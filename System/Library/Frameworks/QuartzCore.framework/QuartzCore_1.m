uint64_t CA::Render::Texture::should_cache(CA::Render::Texture *this)
{
  return 1;
}

CA::Render::Texture *CA::Render::`anonymous namespace'::create_image_from_image_data(CGImageRef image, CGImage *a2, CGColorSpace *a3, __int16 a4, double a5)
{
  int v10;
  void (*DataProvider)(const void *, void *);
  unint64_t v12;
  size_t Width;
  size_t Height;
  size_t BytesPerRow;
  CGColorSpaceRef ColorSpace;
  CGColorSpace *v17;
  unint64_t SizeOfData;
  uint64_t v19;
  const char *v20;
  NSObject *v21;
  uint32_t v22;
  uint64_t v23;
  void *image_by_copying;
  unint64_t v27;
  NSObject *v28;
  NSObject *v29;
  const char *v30;
  unint64_t v31;
  NSObject *v32;
  NSObject *v33;
  NSObject *v34;
  void *v35;
  CGColorSpace *v36;
  size_t v37;
  uint8_t buf[4];
  CGImageRef v39;
  __int16 v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v10 = BYTE9(ca_debug_options);
  if ((a4 & 0x20) == 0 && a3 <= 0x23 && ((0x1FFFFFF2FuLL >> (char)a3) & 1) == 0)
  {
    if (BYTE9(ca_debug_options))
    {
      if (x_log_hook_p())
        goto LABEL_11;
      v19 = x_log_category_render;
      if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      *(_DWORD *)buf = 134218240;
      v39 = image;
      v40 = 1024;
      v41 = (int)a3;
      v20 = "CoreAnimation: copied CGImageRef %p - non-native format (%d)\n";
      v21 = v19;
      v22 = 18;
      goto LABEL_21;
    }
  }
  if ((_DWORD)a3 != 14 && (_DWORD)a3 != -1)
  {
    DataProvider = (void (*)(const void *, void *))CGImageGetDataProvider(image);
    v12 = CGDataProviderRetainBytePtr();
    Width = CGImageGetWidth(image);
    Height = CGImageGetHeight(image);
    BytesPerRow = CGImageGetBytesPerRow(image);
    v37 = BytesPerRow;
    ColorSpace = CGImageGetColorSpace(image);
    v17 = ColorSpace;
    if (!v12)
    {
      if (v10)
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v28 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134217984;
            v39 = image;
            _os_log_impl(&dword_184457000, v28, OS_LOG_TYPE_DEFAULT, "CoreAnimation: copied CGImageRef %p - no data pointer\n", buf, 0xCu);
          }
        }
      }
    }
    v36 = ColorSpace;
    SizeOfData = CGDataProviderGetSizeOfData();
    if (SizeOfData == -1)
    {
      if (x_log_hook_p())
      {
LABEL_29:
        x_log_();
LABEL_43:
        image_by_copying = 0;
        goto LABEL_72;
      }
      v29 = x_log_category_render;
      if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
        goto LABEL_43;
      *(_WORD *)buf = 0;
      v30 = "CoreAnimation: data provider size invalid";
LABEL_42:
      _os_log_impl(&dword_184457000, v29, OS_LOG_TYPE_ERROR, v30, buf, 2u);
      goto LABEL_43;
    }
    if (SizeOfData < (CGImageGetBitsPerPixel(image) >> 3) * Width + BytesPerRow * (Height - 1))
    {
      if (x_log_hook_p())
        goto LABEL_29;
      v29 = x_log_category_render;
      if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
        goto LABEL_43;
      *(_WORD *)buf = 0;
      v30 = "CoreAnimation: data provider size is too small";
      goto LABEL_42;
    }
    if (qword_1ECDC4CD0
      && ((qword_1ECDC4CD0 & (qword_1ECDC4CD0 - 1)) != 0
        ? (v27 = v12 % qword_1ECDC4CD0)
        : (v27 = (qword_1ECDC4CD0 - 1) & v12),
          v27))
    {
      if (!v10)
        goto LABEL_71;
      if (!x_log_hook_p())
      {
        v32 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134217984;
          v39 = image;
          _os_log_impl(&dword_184457000, v32, OS_LOG_TYPE_DEFAULT, "CoreAnimation: copied CGImageRef %p - bad image alignment\n", buf, 0xCu);
        }
        goto LABEL_71;
      }
    }
    else if (qword_1ECDC4CD8
           && ((qword_1ECDC4CD8 & (qword_1ECDC4CD8 - 1)) != 0
             ? (v31 = BytesPerRow % qword_1ECDC4CD8)
             : (v31 = BytesPerRow & (qword_1ECDC4CD8 - 1)),
               v31))
    {
      if (!v10)
        goto LABEL_71;
      if (!x_log_hook_p())
      {
        v33 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134217984;
          v39 = image;
          _os_log_impl(&dword_184457000, v33, OS_LOG_TYPE_DEFAULT, "CoreAnimation: copied CGImageRef %p - bad row alignment\n", buf, 0xCu);
        }
        goto LABEL_71;
      }
    }
    else
    {
      if ((a4 & 1) == 0)
      {
        if (image_by_copying)
        {
          CGDataProviderRetain((CGDataProviderRef)DataProvider);
          return (CA::Render::Texture *)image_by_copying;
        }
LABEL_72:
        CGDataProviderReleaseBytePtr();
        return (CA::Render::Texture *)image_by_copying;
      }
      if (!v10)
      {
LABEL_71:
        goto LABEL_72;
      }
      if (!x_log_hook_p())
      {
        v34 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134217984;
          v39 = image;
          _os_log_impl(&dword_184457000, v34, OS_LOG_TYPE_DEFAULT, "CoreAnimation: copied CGImageRef %p - mipmap generation\n", buf, 0xCu);
        }
        goto LABEL_71;
      }
    }
    x_log_();
    goto LABEL_71;
  }
  if (BYTE9(ca_debug_options))
  {
    if (x_log_hook_p())
    {
LABEL_11:
      x_log_();
    }
    v23 = x_log_category_render;
    if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
    *(_DWORD *)buf = 134217984;
    v39 = image;
    v20 = "CoreAnimation: copied CGImageRef %p - format not supported by hardware\n";
    v21 = v23;
    v22 = 12;
LABEL_21:
    _os_log_impl(&dword_184457000, v21, OS_LOG_TYPE_DEFAULT, v20, buf, v22);
  }
}

uint64_t CARetainColorTransform(CGColorSpace *a1)
{
  uint64_t v2;
  CGColorSpaceRef **v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  CGColorSpaceRef *v7;
  malloc_zone_t *malloc_zone;
  uint64_t v9;
  _QWORD *v10;
  CGColorSpaceRef v11;
  malloc_zone_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  malloc_zone_t *v16;
  _QWORD *v17;
  malloc_zone_t *v18;
  uint64_t v19;

  os_unfair_lock_lock((os_unfair_lock_t)&transform_lock);
  v2 = transform_list;
  if (transform_list)
  {
    while (!CGColorSpaceEqualToColorSpace())
    {
      v2 = *(_QWORD *)(v2 + 8);
      if (!v2)
      {
        v3 = (CGColorSpaceRef **)transform_list;
        if (transform_list)
        {
          v4 = 0;
          v5 = transform_list;
          do
          {
            ++v4;
            v5 = *(_QWORD *)(v5 + 8);
          }
          while (v5);
          if (v4 >= 3)
          {
            v6 = v4 + 1;
            do
            {
              v7 = *v3;
              CGColorSpaceRelease(**v3);
              CGColorTransformRelease();
              malloc_zone = (malloc_zone_t *)get_malloc_zone();
              malloc_zone_free(malloc_zone, v7);
              v3 = (CGColorSpaceRef **)x_list_remove_head((_QWORD *)transform_list);
              transform_list = (uint64_t)v3;
              --v6;
            }
            while (v6 > 3);
          }
        }
        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_10:
    v9 = MEMORY[0x186DBBA1C](a1, 0);
    if (v9)
    {
      v10 = (_QWORD *)transform_list;
      v11 = CGColorSpaceRetain(a1);
      v12 = (malloc_zone_t *)get_malloc_zone();
      v13 = malloc_type_zone_malloc(v12, 0x10uLL, 0x8BB15036uLL);
      *v13 = v11;
      v13[1] = v9;
      if (v10)
      {
        v14 = v10;
        do
        {
          v15 = v14;
          v14 = (_QWORD *)v14[1];
        }
        while (v14);
        v16 = (malloc_zone_t *)get_malloc_zone();
        v17 = malloc_type_zone_malloc(v16, 0x10uLL, 0x8BB15036uLL);
        *v17 = v13;
        v17[1] = 0;
        v15[1] = v17;
      }
      else
      {
        v18 = (malloc_zone_t *)get_malloc_zone();
        v10 = malloc_type_zone_malloc(v18, 0x10uLL, 0x8BB15036uLL);
        *v10 = v13;
        v10[1] = 0;
      }
      transform_list = (uint64_t)v10;
    }
  }
  v19 = CGColorTransformRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)&transform_lock);
  return v19;
}

uint64_t CA::Render::CompressedImage::should_cache(CA::Render::CompressedImage *this)
{
  return (*((unsigned __int8 *)this + 176) >> 1) & 1;
}

uint64_t CA::Render::`anonymous namespace'::image_format_from_component_type(int a1, int a2, int a3)
{
  uint64_t result;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  int v14;

  result = 0xFFFFFFFFLL;
  v5 = a1 - 1;
  v6 = a2 - 1;
  switch(v5)
  {
    case 0:
      if (v6 < 4)
        v7 = 1;
      else
        v7 = 3;
      if (a2 == 5)
        v8 = 19;
      else
        v8 = 10;
      if (v6 >= 4)
        v9 = v8;
      else
        v9 = 18;
      if (a3)
        result = v9;
      else
        result = v7;
      break;
    case 1:
      v10 = v6 >= 4;
      if (v6 < 4)
        v11 = 21;
      else
        v11 = 22;
      if (v10)
        v12 = -1;
      else
        v12 = 27;
      goto LABEL_26;
    case 4:
      v13 = v6 >= 4;
      if (v6 >= 4)
        v11 = 17;
      else
        v11 = 13;
      if (v13)
        v12 = 25;
      else
        v12 = 28;
LABEL_26:
      if (a3)
        result = v12;
      else
        result = v11;
      break;
    case 5:
      if (a2 == 6)
        v14 = a3;
      else
        v14 = 1;
      if (v14)
        result = 0xFFFFFFFFLL;
      else
        result = 31;
      break;
    default:
      return result;
  }
  return result;
}

CFTypeRef CA::Render::`anonymous namespace'::retain_provider_options(CA::Render::_anonymous_namespace_ *this)
{
  int v1;
  CFDictionaryRef provider_options;

  v1 = (int)this;
  {
  }
  else
  {
  }
  if (!v1)
  return CFRetain(provider_options);
}

uint64_t CA::Render::`anonymous namespace'::image_format_from_blockset(uint64_t a1, uint64_t a2, int a3)
{
  int ComponentType;
  int AlphaInfo;

  ComponentType = CGImageBlockSetGetComponentType();
  AlphaInfo = CGImageProviderGetAlphaInfo();
}

CFDictionaryRef CA::Render::`anonymous namespace'::create_provider_options(CA::Render::_anonymous_namespace_ *this)
{
  unsigned int v1;
  void **v2;
  void *v3;
  unsigned int v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  CFDictionaryRef v10;
  uint64_t v11;
  int valuePtr;
  void *values[2];
  __int128 v15;
  uint64_t v16;
  void *keys[2];
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v19 = 0;
  *(_OWORD *)keys = 0u;
  v18 = 0u;
  v16 = 0;
  *(_OWORD *)values = 0u;
  v15 = 0u;
  if ((this & 1) != 0)
  {
    v1 = 0;
  }
  else
  {
    keys[0] = *(void **)MEMORY[0x1E0C9DAB0];
    values[0] = *(void **)MEMORY[0x1E0C9DAA8];
    v1 = 1;
  }
  v2 = (void **)MEMORY[0x1E0C9AE50];
  *(_QWORD *)((unint64_t)keys | (8 * v1)) = *MEMORY[0x1E0C9DAC0];
  v3 = *v2;
  v4 = v1 + 1;
  *(_QWORD *)((unint64_t)values & 0xFFFFFFFFFFFFFFF7 | (8 * (v1 & 1))) = *v2;
  keys[v4] = (void *)*MEMORY[0x1E0C9DAB8];
  v5 = v1 | 2;
  values[v4] = v3;
  v6 = qword_1ECDC4CD0;
  if (qword_1ECDC4CD0)
  {
    v7 = 1 << v5;
    keys[v5] = (void *)*MEMORY[0x1E0C9DA90];
    valuePtr = v6;
    v8 = v1 + 3;
    values[v5] = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  }
  else
  {
    v7 = 0;
    v8 = v1 | 2;
  }
  v9 = qword_1ECDC4CD8;
  if (qword_1ECDC4CD8)
  {
    v7 |= 1 << v8;
    keys[v8] = (void *)*MEMORY[0x1E0C9DA98];
    valuePtr = v9;
    values[v8++] = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  }
  v10 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, v8, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v11 = 0;
  do
  {
    if (((v7 >> v11) & 1) != 0)
      CFRelease(values[v11]);
    ++v11;
  }
  while (v8 != v11);
  return v10;
}

_DWORD *CA::Render::Pattern::new_pattern(CA::Render::Pattern *this, CGPattern *a2, CGColorSpace *a3, CGAffineTransform *a4, double a5)
{
  double width;
  double height;
  _DWORD *v12;
  uint64_t Image;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  float64x2_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  malloc_zone_t *malloc_zone;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  CA::Render *v45;
  _DWORD *pattern_image;
  unint64_t v47;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  unsigned int *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  double v57;
  uint64_t v58;
  unsigned int *v59;
  malloc_zone_t *v60;
  _QWORD *v61;
  int *v62;
  CA::Render::Pattern *v63;
  uint64_t v64;
  double v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v69;
  uint64_t v70;
  uint64_t *v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  unsigned int v82;
  double v83;
  double v84;
  float64x2_t v85;
  float64x2_t v86;
  CGRect v87;

  if (CGPatternGetType())
    return 0;
  CGPatternGetBounds();
  width = v87.size.width;
  height = v87.size.height;
  if (CGRectIsEmpty(v87))
    return 0;
  v83 = 1.0;
  __asm { FMOV            V0.2D, #1.0 }
  v86 = _Q0;
  if (a3)
  {
    Image = CGPatternGetImage();
    v18 = 1.0;
    if (!Image)
    {
      CGPatternGetMatrix();
      v19 = *((double *)a3 + 1);
      v20 = *((double *)a3 + 2);
      v21 = *((double *)a3 + 3);
      v22 = 0.0 * v19 + 0.0 * v21;
      v23 = (*(double *)a3 * 0.0 + v20 * 0.0) * (*(double *)a3 * 0.0 + v20 * 0.0)
          + (v19 * 0.0 + v21 * 0.0) * (v19 * 0.0 + v21 * 0.0);
      v24 = v22 * v22 + (0.0 * *(double *)a3 + 0.0 * v20) * (0.0 * *(double *)a3 + 0.0 * v20);
      v25 = sqrt(v23);
      if (v23 == 1.0)
        v18 = v23;
      else
        v18 = v25;
      v26 = sqrt(v24);
      if (v24 == 1.0)
        v27 = v24;
      else
        v27 = v26;
      for (; v18 > 1.0 && v18 * width > 2048.0; v18 = v18 * 0.5)
        ;
      for (; v27 > 1.0 && v27 * height > 2048.0; v27 = v27 * 0.5)
        ;
      v32.f64[0] = v18;
      v83 = v27;
      v32.f64[1] = v27;
      v86 = v32;
    }
  }
  else
  {
    v18 = 1.0;
  }
  v84 = v18;
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::pattern_lock);
  v33 = CA::Render::pattern_cache;
  if (!CA::Render::pattern_cache)
  {
    CA::Render::pattern_cache = (uint64_t)x_hash_table_new_(0, 0, 0, 0, 0, 0);
    CA::Render::pattern_cache_list = (uint64_t)&CA::Render::pattern_cache_list;
    qword_1ECDC4FB8 = (uint64_t)&CA::Render::pattern_cache_list;
    CGPatternNotificationCenter();
    CGNotificationCenterAddCallback();
    v33 = CA::Render::pattern_cache;
  }
  v34 = x_hash_table_lookup(v33, (uint64_t)this, 0);
  if (v34
    && (v35 = v34, (v12 = *(_DWORD **)(v34 + 24)) != 0)
    && *((double *)v12 + 14) == v84
    && *((double *)v12 + 15) == v83
    && ((v81 = *((_QWORD *)v12 + 16)) == 0
     || !CARequiresColorMatching(*(CGColorSpace **)(v81 + 48), a2, (a4 >> 3) & 1)))
  {
    v59 = 0;
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::pattern_lock);
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v37 = malloc_type_zone_calloc(malloc_zone, 1uLL, 0x88uLL, 0x743898A5uLL);
    v12 = v37;
    if (v37)
    {
      v37[2] = 1;
      v37[3] = 37;
      ++dword_1ECDC7CBC;
      *(_QWORD *)v37 = off_1E1598F18;
      CGPatternGetMatrix();
      CGPatternGetBounds();
      *((_QWORD *)v12 + 8) = v38;
      *((_QWORD *)v12 + 9) = v39;
      *((_QWORD *)v12 + 10) = v40;
      *((_QWORD *)v12 + 11) = v41;
      CGPatternGetStep();
      __asm { FMOV            V2.2D, #1.0 }
      v85 = _Q2;
      *((float64x2_t *)v12 + 7) = _Q2;
      *((_QWORD *)v12 + 12) = v43;
      *((_QWORD *)v12 + 13) = v44;
      *((_QWORD *)v12 + 16) = 0;
      if ((CGPatternIsColored() & 1) == 0)
      {
        a2 = 0;
        v12[3] |= 0x200u;
      }
      v45 = (CA::Render *)CGPatternGetImage();
      if (v45)
      {
        pattern_image = CA::Render::copy_image(v45, a2, (CGColorSpace *)a4, a5, 1.0);
      }
      else
      {
        if (v86.f64[0] != 1.0 || v86.f64[1] != 1.0)
        {
          v49 = vdivq_f64(v85, v86);
          v50 = vmulq_f64(*((float64x2_t *)v12 + 1), v49);
          v51 = vmulq_f64(*((float64x2_t *)v12 + 2), v49);
          *((float64x2_t *)v12 + 1) = v50;
          *((float64x2_t *)v12 + 2) = v51;
          v52 = vmulq_f64(*((float64x2_t *)v12 + 5), v86);
          *((float64x2_t *)v12 + 4) = vmulq_f64(*((float64x2_t *)v12 + 4), v86);
          *((float64x2_t *)v12 + 5) = v52;
          *((float64x2_t *)v12 + 6) = vmulq_f64(*((float64x2_t *)v12 + 6), v86);
          *((float64x2_t *)v12 + 7) = v86;
        }
        pattern_image = CA::Render::create_pattern_image((uint64_t)this, a2, (CGFloat *)v12 + 14, (double *)v12 + 8);
      }
      v53 = (unsigned int *)*((_QWORD *)v12 + 16);
      *((_QWORD *)v12 + 16) = pattern_image;
      if (v53)
      {
        v54 = v53 + 2;
        do
        {
          v55 = __ldaxr(v54);
          v56 = v55 - 1;
        }
        while (__stlxr(v56, v54));
        if (!v56)
          (*(void (**)(unsigned int *))(*(_QWORD *)v53 + 16))(v53);
        pattern_image = (_DWORD *)*((_QWORD *)v12 + 16);
      }
      if (pattern_image)
      {
        LODWORD(v47) = pattern_image[4];
        v57 = (double)v47;
        if (*((double *)v12 + 12) == v57)
        {
          LODWORD(v57) = pattern_image[5];
          if (*((double *)v12 + 13) == (double)*(unint64_t *)&v57
            && *((double *)v12 + 3) == 0.0
            && *((double *)v12 + 4) == 0.0)
          {
            v12[3] |= 0x100u;
          }
        }
      }
    }
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::pattern_lock);
    v58 = x_hash_table_lookup(CA::Render::pattern_cache, (uint64_t)this, 0);
    if (v58)
    {
      v35 = v58;
      v59 = *(unsigned int **)(v58 + 24);
    }
    else
    {
      v60 = (malloc_zone_t *)get_malloc_zone();
      v61 = malloc_type_zone_malloc(v60, 0x28uLL, 0x8BB15036uLL);
      v35 = (uint64_t)v61;
      if (v61)
      {
        v61[3] = 0;
        v61[4] = 0;
        v61[1] = v61;
        v61[2] = this;
        *v61 = v61;
        v62 = (int *)CA::Render::pattern_cache;
        v63 = this;
        v64 = v35;
      }
      else
      {
        v62 = (int *)CA::Render::pattern_cache;
        v63 = this;
        v64 = 0;
      }
      hash_table_modify(v62, (uint64_t)v63, v64, 0);
      v59 = 0;
    }
    *(_QWORD *)(v35 + 24) = v12;
  }
  v65 = *(double *)(v35 + 32);
  if ((a4 & 4) != 0)
  {
    if (v65 >= 0.0 && v65 < a5)
    {
      if (v65 > 0.0)
      {
        v70 = *(_QWORD *)v35;
        v69 = *(_QWORD **)(v35 + 8);
        *(_QWORD *)(v70 + 8) = v69;
        *v69 = v70;
        *(_QWORD *)v35 = v35;
        *(_QWORD *)(v35 + 8) = v35;
      }
      *(double *)(v35 + 32) = a5;
      v71 = &CA::Render::pattern_cache_list;
      while (1)
      {
        v71 = (uint64_t *)*v71;
        if (v71 == &CA::Render::pattern_cache_list)
          break;
        if (*((double *)v71 + 4) <= a5)
        {
          v72 = (_QWORD *)v71[1];
          v73 = *(_QWORD *)v35;
          v71[1] = v35;
          *(_QWORD *)v35 = v71;
          *v72 = v73;
          *(_QWORD *)(v73 + 8) = v72;
          goto LABEL_84;
        }
      }
      v74 = (_QWORD *)qword_1ECDC4FB8;
      v75 = *(_QWORD *)v35;
      qword_1ECDC4FB8 = v35;
      *(_QWORD *)v35 = &CA::Render::pattern_cache_list;
      *v74 = v75;
      *(_QWORD *)(v75 + 8) = v74;
    }
  }
  else if (v65 >= 0.0)
  {
    v67 = *(_QWORD *)v35;
    v66 = *(_QWORD **)(v35 + 8);
    *(_QWORD *)(v67 + 8) = v66;
    *v66 = v67;
    *(_QWORD *)v35 = v35;
    *(_QWORD *)(v35 + 8) = v35;
    *(_QWORD *)(v35 + 32) = 0xBFF0000000000000;
  }
LABEL_84:
  v76 = v12 + 2;
  do
    v77 = __ldaxr(v76);
  while (__stlxr(v77 + 1, v76));
  if (!v77)
  {
    do
      v82 = __ldaxr(v76);
    while (__stlxr(v82 - 1, v76));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::pattern_lock);
  if (v59)
  {
    v78 = v59 + 2;
    do
    {
      v79 = __ldaxr(v78);
      v80 = v79 - 1;
    }
    while (__stlxr(v80, v78));
    if (!v80)
      (*(void (**)(unsigned int *))(*(_QWORD *)v59 + 16))(v59);
  }
  return v12;
}

void CA::Render::Updater::add_background_filters_(uint64_t ***a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, CA::Render::Updater::LayerShapes *this)
{
  uint64_t v6;
  uint64_t v12;
  _BOOL4 v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  __int128 *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  const CA::Bounds *v32;
  CA::Shape *v33;
  double v34;
  uint64_t v35;
  uint64_t **v36;
  float64x2_t v37;
  int64x2_t v38;
  int8x16_t v39;
  float64x2_t v40;
  int32x4_t v41;
  CA::Render::Filter *v42;
  _QWORD *v44;
  unsigned int v45;
  BOOL v46;
  BOOL v47;
  BOOL v51;
  uint64_t v52;
  BOOL v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  CA::Shape *v60;
  CA::Render::Updater::LayerShapes *v61;
  CA::Shape *v62[2];
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a3 + 128);
  if (!v6)
    return;
  v12 = *(_QWORD *)(v6 + 88);
  if (v12 && (*(_BYTE *)(v12 + 13) & 1) != 0)
  {
    v13 = 0;
    v42 = (CA::Render::Filter *)*(unsigned int *)(v12 + 24);
    if ((_DWORD)v42 == 394 || (_DWORD)v42 == 513)
      goto LABEL_5;
    v44 = (_QWORD *)(a2 + 72);
    *(_QWORD *)(a2 + 72) |= 0x20C00000uLL;
    v45 = CA::Render::Filter::compositing_dod(v42) - 5;
    v13 = v45 < 0xFFFFFFFE;
    if ((int)v42 > 408)
    {
      if (((_DWORD)v42 - 537) <= 0x3D
        && ((1 << (v42 - 25)) & 0x200DA00000000007) != 0)
      {
        goto LABEL_83;
      }
      if (((_DWORD)v42 - 474) <= 0x26 && ((1 << (v42 + 38)) & 0x4A40000021) != 0)
        goto LABEL_83;
      if (((_DWORD)v42 - 409) <= 0xF && ((1 << ((_BYTE)v42 + 103)) & 0xA041) != 0)
        goto LABEL_83;
    }
    else if ((int)v42 > 248)
    {
      v51 = ((_DWORD)v42 - 341) > 0x2D || ((1 << (v42 - 85)) & 0x320400201C03) == 0;
      if (!v51 || (_DWORD)v42 == 249 || (_DWORD)v42 == 258)
        goto LABEL_83;
    }
    else
    {
      v46 = ((_DWORD)v42 - 160) > 0x36 || ((1 << (v42 + 96)) & 0x400000002007F3) == 0;
      if (!v46
        || (((_DWORD)v42 - 88) <= 0x34
          ? (v47 = ((1 << (v42 - 88)) & 0x10000000000151) == 0)
          : (v47 = 1),
            !v47))
      {
LABEL_83:
        if (!*(_DWORD *)(a4 + 116) && v45 > 0xFFFFFFFD)
          goto LABEL_115;
        v52 = *(_QWORD *)(a2 + 48);
        if (v52)
          *(_QWORD *)(v52 + 24) |= 0x4000uLL;
        if ((int)v42 > 384)
        {
          v54 = ((_DWORD)v42 - 509) > 0x1E || ((1 << ((_BYTE)v42 + 3)) & 0x60000009) == 0;
          if (v54 && (_DWORD)v42 != 598 && (_DWORD)v42 != 385)
          {
LABEL_115:
            *(_BYTE *)(a2 + 89) |= 2u;
            if (this)
            {
              v59 = *(_DWORD *)(v12 + 24);
              if (v59 != 140 && v59 != 513)
              {
                v60 = (CA::Shape *)*((_QWORD *)this + 7);
                if (v60)
                {
                  CA::Shape::unref(v60);
                  *((_QWORD *)this + 7) = 0;
                }
              }
            }
            goto LABEL_5;
          }
        }
        else
        {
          v53 = ((_DWORD)v42 - 140) > 0x1C || ((1 << ((_BYTE)v42 + 116)) & 0x1E000001) == 0;
          if (v53 && (_DWORD)v42 != 88 && (_DWORD)v42 != 382)
            goto LABEL_115;
        }
        v55 = *(_QWORD *)(a3 + 40);
        if ((v55 & 0x1000000) != 0 || (*(_BYTE *)(a2 + 89) & 4) != 0)
          goto LABEL_115;
        v56 = *(_QWORD *)(a2 + 56);
        if (v56)
        {
          if (*(_QWORD *)(v56 + 40) & 0x40000000 | *(_QWORD *)(a3 + 40) & 0x100)
            goto LABEL_115;
        }
        else if ((v55 & 0x100) != 0)
        {
          goto LABEL_115;
        }
        v58 = 0x200000000;
LABEL_114:
        *v44 |= v58;
        goto LABEL_115;
      }
    }
    v57 = *(_QWORD *)(a2 + 48);
    if (!v57)
      goto LABEL_115;
    v44 = (_QWORD *)(v57 + 24);
    v58 = 0x8000;
    goto LABEL_114;
  }
  v13 = 0;
LABEL_5:
  v14 = *(_QWORD **)(a3 + 128);
  if (v14)
  {
    v15 = v14[13];
    if (v15)
    {
      v61 = this;
      if (!*v14 || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v14 + 176))(*v14) & 1) == 0)
      {
        v16 = *(unsigned int *)(v15 + 16);
        if ((_DWORD)v16)
        {
          do
          {
            v17 = *(_QWORD *)(v15 + 8 * (v16 - 1) + 24);
            if ((*(_DWORD *)(v17 + 12) & 0x40100) == 0x100)
            {
              v18 = x_heap_malloc_small_(**a1, 0x38uLL);
              if (v18)
              {
                v19 = **a1;
                *(_WORD *)(v18 + 16) = 1;
                *(_BYTE *)(v18 + 18) = 0;
                *(_QWORD *)v18 = &off_1E15993F0;
                *(_QWORD *)(v18 + 24) = a2 + 8;
                *(_QWORD *)(v18 + 32) = *(_QWORD *)(a2 + 56);
                *(_QWORD *)(v18 + 40) = v17;
                *(_BYTE *)(v18 + 48) = 1;
                v20 = x_heap_malloc_small_(v19, 0x28uLL);
                if (v20)
                {
                  v21 = *(__int128 **)(v18 + 24);
                  v22 = *v21;
                  v23 = v21[1];
                  *(_QWORD *)(v20 + 32) = *((_QWORD *)v21 + 4);
                  *(_OWORD *)v20 = v22;
                  *(_OWORD *)(v20 + 16) = v23;
                }
                *(_QWORD *)(v18 + 24) = v20;
                v24 = *(_QWORD *)(v18 + 32);
                if (v24)
                {
                  v25 = (unsigned int *)(v24 + 8);
                  do
                    v26 = __ldaxr(v25);
                  while (__stlxr(v26 + 1, v25));
                  if (!v26)
                  {
                    do
                      v30 = __ldaxr(v25);
                    while (__stlxr(v30 - 1, v25));
                  }
                }
                v27 = *(_QWORD *)(v18 + 40);
                if (v27)
                {
                  v28 = (unsigned int *)(v27 + 8);
                  do
                    v29 = __ldaxr(v28);
                  while (__stlxr(v29 + 1, v28));
                  if (!v29)
                  {
                    do
                      v31 = __ldaxr(v28);
                    while (__stlxr(v31 - 1, v28));
                  }
                }
              }
              *(_QWORD *)(v18 + 8) = *(_QWORD *)a2;
              *(_QWORD *)a2 = v18;
              if ((*(_BYTE *)(a2 + 64) & 8) != 0)
                *(_DWORD *)(v17 + 20) = *((_DWORD *)a1 + 2);
              *(_BYTE *)(a2 + 89) |= 3u;
              *(_QWORD *)(a2 + 72) |= 0x20C00000uLL;
              LOBYTE(v13) = 1;
            }
            --v16;
          }
          while (v16);
        }
      }
      this = v61;
    }
  }
  if (this && v13)
  {
    CA::Render::Updater::LayerShapes::union_bounds((__n128 *)this, (float64x2_t *)((char *)this + 88), (const CA::Bounds *)1);
    v33 = (CA::Shape *)*((_QWORD *)this + 7);
    if (v33)
    {
      CA::Shape::unref(v33);
      *((_QWORD *)this + 7) = 1;
    }
    if (a5)
    {
      v34 = *((double *)this + 13);
      if (v34 >= *((double *)this + 14))
        v34 = *((double *)this + 14);
      if (v34 > 0.0)
      {
        v35 = *(_QWORD *)(a2 + 56);
        if (v35)
        {
          if ((*(_BYTE *)(v35 + 43) & 0x40) == 0)
          {
            v36 = *a1;
            v37 = *(float64x2_t *)((char *)this + 104);
            v38 = vceqzq_f64(v37);
            if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v38, 1), (int8x16_t)v38).u64[0] & 0x8000000000000000) != 0
              || (v39 = vorrq_s8((int8x16_t)vcltzq_f64(v37), (int8x16_t)vcgezq_f64(v37)),
                  (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v39), 1), v39).u64[0] & 0x8000000000000000) != 0))
            {
              v62[0] = 0;
              v62[1] = 0;
            }
            else
            {
              v40 = *(float64x2_t *)((char *)this + 88);
              v41 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v40, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
              *(int32x4_t *)v62 = vuzp1q_s32(v41, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v40, v37), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v41));
            }
            CA::shape_union((CA::Shape **)v36 + 8, v62, v32);
            *(_QWORD *)(a5 + 72) |= 4uLL;
          }
        }
      }
    }
  }
}

void CA::Render::Updater::RasterizationOp::map_bounds(CA::Render::Updater::RasterizationOp *this, CA::Render::Updater::LayerShapes *a2)
{
  CA::Shape **v3;
  void (*v4)(CA::Rect *, void *);
  int32x4_t v5;
  CA::Shape *v6;

  v3 = (CA::Shape **)((char *)this + 20);
  CA::BoundsImpl::inset((double *)a2, (double)-*((_DWORD *)this + 5), (double)-*((_DWORD *)this + 5));
  if (*((_QWORD *)a2 + 8))
    CA::shape_map((CA::Shape **)a2 + 8, v3, (void (*)(CA::Rect *, void *))CA::Render::Updater::RasterizationOp::map_bounds(CA::Render::Updater::LayerShapes &,BOOL)::$_0::__invoke, v4, v5);
  v6 = (CA::Shape *)*((_QWORD *)a2 + 7);
  if (v6)
  {
    if ((v6 & 1) != 0)
    {
      if (v6 == (CA::Shape *)1)
        return;
    }
    else if (*((_DWORD *)v6 + 1) == 6)
    {
      return;
    }
    CA::Shape::unref(v6);
    *((_QWORD *)a2 + 7) = 1;
  }
}

uint64_t CA::Render::LayerSubclass::has_edr_content(CA::Render::LayerSubclass *this, const CA::Render::Layer *a2)
{
  return 0;
}

uint64_t CA::Render::LayerSubclass::get_bounds(CA::Render::LayerSubclass *this, const CA::Render::Layer *a2, Rect *a3, Rect *a4)
{
  return 0;
}

void CA::Render::Update::add_opaque_shape(CA::Shape **this, CA::Shape **a2, const CA::Shape *a3)
{
  _QWORD *v4;
  CA::Shape *v5;

  v4 = this + 65;
  CA::shape_union(this + 65, a2, a3);
  v5 = this[65];
  if ((v5 & 1) == 0 && *((int *)v5 + 1) >= 257)
  {
    CA::Shape::unref(v5);
    *v4 = 1;
  }
}

uint64_t CA::Render::LayerHost::has_background(CA::Render::LayerHost *this, const CA::Render::Layer *a2, BOOL *a3)
{
  *a3 = 0;
  return (*((unsigned __int8 *)this + 13) >> 2) & 1;
}

BOOL CA::Render::BackdropLayer::has_background(CA::Render::BackdropLayer *this, const CA::Render::Layer *a2, BOOL *a3)
{
  int v3;

  v3 = *((_DWORD *)this + 3) & 0x1100;
  if (v3 == 256)
    *a3 = 0;
  return v3 == 256;
}

BOOL CA::Render::BackdropLayer::bounds_are_visible(CA::Render::BackdropLayer *this)
{
  return (*((_DWORD *)this + 3) & 0x1000) == 0 && (*((_DWORD *)this + 3) & 0x500) != 0;
}

void CA::Render::Update::add_visible_shape(CA::Shape **this, CA::Shape **a2, const CA::Shape *a3)
{
  CA::Shape **v4;
  uint64_t v5;
  const CA::Bounds *v6;
  unint64_t v7;
  _QWORD v8[3];

  v8[2] = *MEMORY[0x1E0C80C00];
  v4 = this + 66;
  CA::shape_union(this + 66, a2, a3);
  v5 = (uint64_t)this[66];
  if ((v5 & 1) == 0 && *(int *)(v5 + 4) >= 257)
  {
    v8[0] = 0;
    v8[1] = 0;
    CA::Shape::get_bounds(v5, (int *)v8);
    v7 = CA::Shape::new_shape((CA::Shape *)v8, v6);
    CA::Shape::unref(*v4);
    *v4 = (CA::Shape *)v7;
  }
}

double *CA::Render::Updater::corner_clipped_layer_bounds(double *this, const CA::Render::Layer *a2)
{
  double v2;
  double v3;
  uint64_t v4;
  double *v6;
  float v7;
  int v8;
  double v9;
  double *v10;
  double v11;
  float v12;
  float v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;

  *(_OWORD *)this = *((_OWORD *)a2 + 4);
  v2 = *((double *)a2 + 10);
  v3 = *((double *)a2 + 11);
  this[2] = v2;
  this[3] = v3;
  v4 = *((_QWORD *)a2 + 16);
  if (v4)
  {
    v6 = this;
    v7 = *(float *)(v4 + 228);
    v8 = *((_DWORD *)a2 + 9);
    if ((v8 & 0xF0000) == 0)
      v7 = 0.0;
    if (*(_QWORD *)(v4 + 72))
    {
      this = (double *)CA::Render::Layer::max_corner_radii(*((_QWORD *)a2 + 16));
      v7 = v15;
    }
    if (v7 > 0.0)
    {
      if (*(_QWORD *)(v4 + 56) && (*((_BYTE *)a2 + 45) & 2) != 0)
      {
        v9 = v7;
        v10 = v6;
        v11 = v9;
        return CA::BoundsImpl::inset(v10, v9, v11);
      }
      if ((*((_BYTE *)a2 + 40) & 3) != 0)
      {
        v12 = v7 * 1.52866;
        v7 = v12;
      }
      v13 = ceilf(v7);
      v14 = v13;
      if ((v8 & 0xF0000) == 0xF0000)
      {
        v11 = 0.0;
        if (v2 <= v3)
          v9 = 0.0;
        else
          v9 = v13;
        if (v2 <= v3)
          v11 = v14;
        v10 = v6;
        return CA::BoundsImpl::inset(v10, v9, v11);
      }
      if (v2 <= v3)
      {
        v17 = 0.0;
        if ((v8 & 0x30000) != 0)
          v16 = v14;
        else
          v16 = 0.0;
        if ((v8 & 0xC0000) != 0)
          v18 = v14;
        else
          v18 = 0.0;
        v14 = 0.0;
      }
      else
      {
        v16 = 0.0;
        if ((v8 & 0x50000) != 0)
          v17 = v13;
        else
          v17 = 0.0;
        if ((v8 & 0xA0000) == 0)
          v14 = 0.0;
        v18 = 0.0;
      }
      return CA::BoundsImpl::inset(v6, v17, v16, v14, v18);
    }
  }
  return this;
}

uint64_t CA::Render::Updater::FilterOp::copy(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v17;
  unsigned int v18;

  v4 = x_heap_malloc_small_(a2, 0x38uLL);
  v5 = v4;
  if (v4)
  {
    *(_WORD *)(v4 + 16) = 1;
    *(_BYTE *)(v4 + 18) = 0;
    *(_QWORD *)v4 = &off_1E15993F0;
  }
  v6 = x_heap_malloc_small_(a2, 0x28uLL);
  if (v6)
  {
    v7 = *(__int128 **)(a1 + 24);
    v8 = *v7;
    v9 = v7[1];
    *(_QWORD *)(v6 + 32) = *((_QWORD *)v7 + 4);
    *(_OWORD *)v6 = v8;
    *(_OWORD *)(v6 + 16) = v9;
  }
  *(_QWORD *)(v5 + 24) = v6;
  v10 = *(_QWORD *)(a1 + 32);
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    if (!v12)
    {
      v10 = 0;
      do
        v17 = __ldaxr(v11);
      while (__stlxr(v17 - 1, v11));
    }
  }
  *(_QWORD *)(v5 + 32) = v10;
  v13 = *(_QWORD *)(a1 + 40);
  if (v13)
  {
    v14 = (unsigned int *)(v13 + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
    if (!v15)
    {
      v13 = 0;
      do
        v18 = __ldaxr(v14);
      while (__stlxr(v18 - 1, v14));
    }
  }
  *(_QWORD *)(v5 + 40) = v13;
  *(_BYTE *)(v5 + 48) = *(_BYTE *)(a1 + 48);
  return v5;
}

uint64_t CA::Render::LayerSubclass::has_background(CA::Render::LayerSubclass *this, const CA::Render::Layer *a2, BOOL *a3)
{
  return 0;
}

BOOL CA::Render::GainMapLayer::has_background(CA::Render::GainMapLayer *this, const CA::Render::Layer *a2, BOOL *a3)
{
  *a3 = 0;
  if (*((_BYTE *)this + 16) == 3 || BYTE10(xmmword_1ECDC6AD0) != 0)
    return 1;
  if (CADeviceSupportsHWGainMap::once != -1)
    dispatch_once(&CADeviceSupportsHWGainMap::once, &__block_literal_global_57);
  return CADeviceSupportsHWGainMap::supports_gain_map == 0;
}

BOOL CA::Render::curves_equal(unint64_t this, unint64_t a2, CA::Render::Object *a3)
{
  uint64_t v3;

  if ((this == 0) == (a2 != 0))
    return 0;
  if (!(this | a2))
    return 1;
  if (*(_BYTE *)(a2 + 12) == 56)
  {
    v3 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v3 == *(_DWORD *)(this + 16))
      return memcmp((const void *)(this + 24), (const void *)(a2 + 24), 8 * v3) == 0;
  }
  return 0;
}

uint64_t CA::Render::LayerSubclass::bounds_are_visible(CA::Render::LayerSubclass *this)
{
  return 1;
}

double *CA::BoundsImpl::inset(double *result, double a2, double a3, double a4, double a5)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;

  v6 = result[2];
  v5 = result[3];
  if (v6 <= v5)
    v7 = result[3];
  else
    v7 = result[2];
  if (v7 < 1.79769313e308)
  {
    if (v6 >= v5)
      v8 = result[3];
    else
      v8 = result[2];
    if (v8 > 0.0)
    {
      v9 = result[1] + a3;
      *result = *result + a2;
      result[1] = v9;
      v10 = v6 - (a2 + a4);
      v11 = v5 - (a3 + a5);
      result[2] = v10;
      result[3] = v11;
      if (v10 <= 0.0 || v11 <= 0.0)
      {
        result[2] = 0.0;
        result[3] = 0.0;
      }
    }
  }
  return result;
}

BOOL CA::Render::ShapeLayer::self_intersects(CA::Render::ShapeLayer *this, const CA::Render::Layer *a2)
{
  if (!*((_QWORD *)this + 2)
    || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(*(float32x4_t *)((char *)this + 24))))) & 1) == 0
    && !*((_QWORD *)this + 5)
    || *((double *)this + 11) == 0.0
    || *((double *)this + 10) <= *((double *)this + 9))
  {
    return 0;
  }
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(*((float32x4_t *)this + 3))))) & 1) != 0)
    return 1;
  return *((_QWORD *)this + 8) != 0;
}

BOOL CA::OGL::AsynchronousItem::latch(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  char *v4;
  os_unfair_lock_s *v5;

  v2 = this + 52;
  os_unfair_lock_lock(this + 52);
  v3 = 0;
  v4 = 0;
  do
  {
    v5 = &this[v3];
    if ((this[v3 + 59]._os_unfair_lock_opaque & 0xFFFFFFFE) == 2)
    {
      if (!v4 || this[v3 + 58]._os_unfair_lock_opaque > *((_DWORD *)v4 + 4))
        v4 = (char *)&v5[54];
      v5[59]._os_unfair_lock_opaque = 0;
    }
    v3 += 14;
  }
  while (v3 != 28);
  os_unfair_lock_unlock(v2);
  if (v4)
  {
    dispatch_semaphore_wait(*((dispatch_semaphore_t *)v4 + 4), 0xFFFFFFFFFFFFFFFFLL);
    os_unfair_lock_lock(v2);
    *((_DWORD *)v4 + 5) = 3;
    *(_QWORD *)&this[82]._os_unfair_lock_opaque = v4;
    LOWORD(this[38]._os_unfair_lock_opaque) = *((_WORD *)v4 + 26);
    *(_QWORD *)&this[40]._os_unfair_lock_opaque = *((_QWORD *)v4 + 5);
    this[44]._os_unfair_lock_opaque = *(_DWORD *)(v4 + 48);
    os_unfair_lock_unlock(v2);
  }
  return v4 != 0;
}

uint64_t CA::Render::LayerSubclass::self_intersects(CA::Render::LayerSubclass *this, const CA::Render::Layer *a2)
{
  return 0;
}

void CA::Render::ImageQueue::pse_mitigate(CA::Render::ImageQueue *this, CA::Render::Update *a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  CA::Render::Surface *v6;
  _QWORD *v7;
  uint64_t v8;
  CA::Render::Surface *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  if (((*((unsigned int *)a2 + 266) | ((unint64_t)*((unsigned __int16 *)a2 + 534) << 32)) & 0x80000000000) != 0)
  {
    v4 = (os_unfair_lock_s *)((char *)this + 56);
    os_unfair_lock_lock((os_unfair_lock_t)this + 14);
    v5 = *((_QWORD *)this + 3);
    if (v5 && *(_BYTE *)(v5 + 12) == 51 && *((double *)this + 5) != 0.0)
    {
      v6 = (CA::Render::Surface *)(*((_QWORD *)this + 10) ? *((_QWORD *)this + 10) : *((_QWORD *)this + 3));
      if ((*((_WORD *)v6 + 168) & 0x40) != 0 && !*((_QWORD *)this + 8))
      {
        if (!*((_QWORD *)this + 9))
        {
          v7 = x_mem_alloc0(0x20uLL);
          if (v7)
            *v7 = objc_opt_new();
          *((_QWORD *)this + 9) = v7;
        }
        v8 = CA::Render::ImageQueue::resolved_display_attributes(this, a2);
        v9 = CA::CAPSEProcessor::process_surface(*((CA::CAPSEProcessor **)this + 9), v6, *((double *)this + 5), *(float *)(v8 + 12), *(float *)(v8 + 20));
        v10 = (unsigned int *)*((_QWORD *)this + 8);
        *((_QWORD *)this + 8) = v9;
        if (v10)
        {
          v11 = v10 + 2;
          do
          {
            v12 = __ldaxr(v11);
            v13 = v12 - 1;
          }
          while (__stlxr(v13, v11));
          if (!v13)
            (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 16))(v10);
          v9 = (CA::Render::Surface *)*((_QWORD *)this + 8);
        }
        if (v9)
        {
          v14 = (unsigned int *)((char *)v9 + 36);
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 + 1, v14));
        }
      }
    }
    os_unfair_lock_unlock(v4);
  }
}

double CA::Render::Updater::LayerShapesOp::map_detached_rect(CA::Render::Updater::LayerShapesOp *this, Rect *a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)&a2->top = 0u;
  *(_OWORD *)&a2[2].top = 0u;
  return result;
}

uint64_t CA::Render::Updater::LayerShapes::union_visible_shape(uint64_t this, CA::Shape **a2, const CA::Shape *a3)
{
  CA::Shape **v3;
  const CA::Bounds *v4;
  _QWORD v5[3];

  v5[2] = *MEMORY[0x1E0C80C00];
  v3 = (CA::Shape **)(this + 64);
  if (*(_QWORD *)(this + 64))
  {
    CA::shape_union((CA::Shape **)(this + 64), a2, a3);
    this = (uint64_t)*v3;
    if ((*v3 & 1) == 0 && *(int *)(this + 4) >= 257)
    {
      v5[0] = 0;
      v5[1] = 0;
      CA::Shape::get_bounds(this, (int *)v5);
      CA::Shape::unref(*v3);
      this = CA::Shape::new_shape((CA::Shape *)v5, v4);
      *v3 = (CA::Shape *)this;
    }
  }
  return this;
}

uint64_t CA::Render::SecureIndicatorLayer::has_background(CA::Render::SecureIndicatorLayer *this, const CA::Render::Layer *a2, BOOL *a3)
{
  *a3 = 0;
  return 1;
}

uint64_t CA::Render::FilterSubclass::identity_opaque_shape(CA::Render::FilterSubclass *this, const CA::Render::Filter *a2, const CA::Render::Layer *a3)
{
  return 0;
}

uint64_t CA::Render::Updater::ShadowOp::copy(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  __int128 v9;

  v4 = x_heap_malloc_small_(a2, 0x30uLL);
  v5 = v4;
  if (v4)
  {
    *(_WORD *)(v4 + 16) = 1;
    *(_BYTE *)(v4 + 18) = 0;
    *(_QWORD *)v4 = &off_1E1599460;
  }
  v6 = x_heap_malloc_small_(a2, 0x28uLL);
  if (v6)
  {
    v7 = *(__int128 **)(a1 + 24);
    v8 = *v7;
    v9 = v7[1];
    *(_QWORD *)(v6 + 32) = *((_QWORD *)v7 + 4);
    *(_OWORD *)v6 = v8;
    *(_OWORD *)(v6 + 16) = v9;
  }
  *(_QWORD *)(v5 + 24) = v6;
  *(_DWORD *)(v5 + 32) = *(_DWORD *)(a1 + 32);
  *(_QWORD *)(v5 + 36) = *(_QWORD *)(a1 + 36);
  *(_DWORD *)(v5 + 44) = *(_DWORD *)(a1 + 44);
  return v5;
}

BOOL CA::Render::BasicAnimation0::validate(CA::Render::BasicAnimation0 *this, CA::Render::Layer *a2)
{
  _DWORD *v2;
  const CA::Render::Layer **v3;
  uint64_t v6;
  uint64_t v7;
  void *const *v13;
  CA::Render::Layer *v14;
  void *const *v15;
  CA::Render::Object *keypath_object;
  CA::Render::Vector *keypath_value;
  const double *v18;
  CA::Render::Object *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  double *v27;
  _QWORD v28[2];
  CA::Render::Layer *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[32];
  uint64_t v39;
  double v40[26];

  v40[25] = *(double *)MEMORY[0x1E0C80C00];
  v3 = (const CA::Render::Layer **)((char *)this + 96);
  v2 = (_DWORD *)*((_QWORD *)this + 12);
  if (!v2 || (v2 & 1) == 0 && !*v2)
    return 0;
  if (*((_QWORD *)this + 14) || *((_QWORD *)this + 15))
    return 1;
  if (a2 && !*((_QWORD *)this + 16))
  {
    v6 = *((_QWORD *)this + 5);
    v7 = v6 ? *(_QWORD *)(v6 + 40) : 0;
    v28[1] = 0;
    *(_OWORD *)&v38[16] = 0u;
    v28[0] = v7;
    v29 = a2;
    memset(v38, 0, 21);
    *(_WORD *)&v38[22] = 0;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v37 = 0u;
    __asm { FMOV            V0.2D, #1.0 }
    v36 = _Q0;
    v38[21] = 1;
    v38[24] = 1;
    v39 = 0;
    CA::Render::AnimationEvaluator::first_pass((CA::Render::AnimationEvaluator *)v28, 0);
    CA::Render::AnimationEvaluator::second_pass((uint64_t)v28);
    v14 = (_QWORD)v31 ? (CA::Render::Layer *)v31 : v29;
    if (CA::Render::Layer::keypath_is_object(v14, v3, v13))
    {
      keypath_object = (CA::Render::Object *)CA::Render::Layer::get_keypath_object(v14, v3, v15);
      CA::Render::BasicAnimation0::set_from(this, keypath_object);
    }
    else
    {
      memset(v40, 0, 192);
      v27 = 0;
      keypath_value = (CA::Render::Vector *)CA::Render::Layer::get_keypath_value(v14, (unint64_t *)v3, 0x18uLL, v40, &v27);
      if (keypath_value)
      {
        v19 = (CA::Render::Object *)CA::Render::Vector::new_vector(keypath_value, v27, v18);
        CA::Render::BasicAnimation0::set_from(this, v19);
        if (v19)
        {
          v20 = (unsigned int *)((char *)v19 + 8);
          do
          {
            v21 = __ldaxr(v20);
            v22 = v21 - 1;
          }
          while (__stlxr(v22, v20));
          if (!v22)
            (*(void (**)(CA::Render::Object *))(*(_QWORD *)v19 + 16))(v19);
        }
        if (v27 != v40)
          free(v27);
      }
    }
    v23 = v31;
    if ((_QWORD)v31)
    {
      v24 = (unsigned int *)(v31 + 8);
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
    }
    if (*((_QWORD *)this + 14) || *((_QWORD *)this + 15))
      return 1;
  }
  return *((_QWORD *)this + 16) != 0;
}

void CA::Render::AnimationEvaluator::first_pass(CA::Render::AnimationEvaluator *this, int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  _BYTE *v9;
  dispatch_once_t *v10;
  uint64_t v11;
  int v12;
  char v13;
  int v14;
  _BYTE *v15;
  _QWORD *v16;
  dispatch_once_t *v17;
  malloc_zone_t *malloc_zone;
  void *v19;
  void *v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned __int8 v25;
  malloc_zone_t *v26;
  void *v27;
  void *v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  double v33;
  BOOL v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*((_QWORD *)this + 2) + 136);
  if (v2)
  {
    v4 = *(unsigned int *)(v2 + 16);
    if ((_DWORD)v4)
    {
      v6 = (uint64_t *)(v2 + 24);
      v7 = v2 + 24 + 8 * v4;
      v8 = &context_lock;
      v9 = &context_lock;
      v10 = CAPrefers60HzAPT(void)::once;
      do
      {
        v11 = *v6;
        v12 = *(_DWORD *)(*v6 + 12);
        if ((v12 & 0x20000) != 0)
          goto LABEL_11;
        ++*(_DWORD *)(v11 + 80);
        if ((v12 & 0x100) == 0)
          goto LABEL_11;
        if ((v12 & 0x4000) != 0)
        {
          v13 = *((_BYTE *)this + 178) | 2;
        }
        else
        {
          if (v12 != 55)
          {
            v35 = 0;
            v34 = 0;
            v33 = *(double *)this;
            if (!CA::Render::Animation::map_time((CA::Render::Animation *)v11, &v33, &v35, 0, &v34))
              goto LABEL_11;
            if (!*((_QWORD *)this + 5))
            {
              v15 = v9;
              v16 = v8;
              v17 = v10;
              malloc_zone = (malloc_zone_t *)get_malloc_zone();
              v19 = malloc_type_zone_calloc(malloc_zone, 1uLL, 0x98uLL, 0x743898A5uLL);
              v20 = v19;
              if (v19)
                CA::Render::Layer::Layer((uint64_t)v19, *((const CA::Render::Layer **)this + 2));
              v21 = (unsigned int *)*((_QWORD *)this + 5);
              *((_QWORD *)this + 5) = v20;
              v10 = v17;
              v8 = v16;
              v9 = v15;
              if (v21)
              {
                v22 = v21 + 2;
                do
                {
                  v23 = __ldaxr(v22);
                  v24 = v23 - 1;
                }
                while (__stlxr(v24, v22));
                if (!v24)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 16))(v21);
              }
            }
            ++*(_DWORD *)(v11 + 84);
            (*(void (**)(uint64_t, CA::Render::AnimationEvaluator *, _QWORD, BOOL, double))(*(_QWORD *)v11 + 120))(v11, this, v35, v34, v33);
            if ((*((_BYTE *)this + 178) & 1) == 0
              || v34
              || !CA::Render::Animation::affects_velocity((CA::Render::Animation *)v11))
            {
              goto LABEL_11;
            }
            v14 = (int)*(float *)(v11 + 28);
            if (v14)
            {
              if (!a2)
              {
LABEL_38:
                if (v14 >= 49)
                {
                  if (v14 >= 0x3D)
                  {
                    if (v14 < 0x51)
                      v25 = 3;
                    else
                      v25 = 4;
                  }
                  else
                  {
                    v25 = 2;
                  }
                }
                else
                {
                  v25 = 1;
                }
                if (*((unsigned __int8 *)this + 176) > v25)
                  v25 = *((_BYTE *)this + 176);
                *((_BYTE *)this + 176) = v25;
                v13 = *((_BYTE *)this + 178) | 0x10;
                goto LABEL_10;
              }
            }
            else
            {
              if (v8[285] != -1)
                dispatch_once(v10, &__block_literal_global_2);
              if (v9[2112])
                v14 = 60;
              else
                v14 = 120;
              if (!a2)
                goto LABEL_38;
            }
            if (!*(_DWORD *)(v11 + 88) && (*(_BYTE *)(v11 + 14) & 0x80) != 0 && v14 >= 60)
              v14 = 60;
            goto LABEL_38;
          }
          v13 = *((_BYTE *)this + 178) | 4;
        }
LABEL_10:
        *((_BYTE *)this + 178) = v13;
LABEL_11:
        ++v6;
      }
      while (v6 != (uint64_t *)v7);
    }
    if ((*((_BYTE *)this + 178) & 2) != 0 && !*((_QWORD *)this + 5))
    {
      v26 = (malloc_zone_t *)get_malloc_zone();
      v27 = malloc_type_zone_calloc(v26, 1uLL, 0x98uLL, 0x743898A5uLL);
      v28 = v27;
      if (v27)
        CA::Render::Layer::Layer((uint64_t)v27, *((const CA::Render::Layer **)this + 2));
      v29 = (unsigned int *)*((_QWORD *)this + 5);
      *((_QWORD *)this + 5) = v28;
      if (v29)
      {
        v30 = v29 + 2;
        do
        {
          v31 = __ldaxr(v30);
          v32 = v31 - 1;
        }
        while (__stlxr(v32, v30));
        if (!v32)
          (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 16))(v29);
      }
    }
  }
}

uint64_t CA::Render::Layer::Layer(uint64_t this, const CA::Render::Layer *a2)
{
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;

  *(_QWORD *)this = off_1E1598C30;
  *(_DWORD *)(this + 8) = 1;
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3) & 0xFFFFFF00 | 0x1D;
  ++dword_1ECDC7C9C;
  *(_QWORD *)this = off_1E15989E0;
  v2 = *((_OWORD *)a2 + 1);
  v3 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(this + 32) = *((_OWORD *)a2 + 2);
  *(_OWORD *)(this + 48) = v3;
  *(_OWORD *)(this + 16) = v2;
  *(_OWORD *)(this + 64) = *((_OWORD *)a2 + 4);
  *(_OWORD *)(this + 80) = *((_OWORD *)a2 + 5);
  v4 = *((_QWORD *)a2 + 12);
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    if (!v6)
    {
      v4 = 0;
      do
        v22 = __ldaxr(v5);
      while (__stlxr(v22 - 1, v5));
    }
  }
  *(_QWORD *)(this + 96) = v4;
  v7 = *((_QWORD *)a2 + 13);
  if (v7)
  {
    v8 = (unsigned int *)(v7 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    if (!v9)
    {
      v7 = 0;
      do
        v23 = __ldaxr(v8);
      while (__stlxr(v23 - 1, v8));
    }
  }
  *(_QWORD *)(this + 104) = v7;
  v10 = *((_QWORD *)a2 + 14);
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    if (!v12)
    {
      v10 = 0;
      do
        v24 = __ldaxr(v11);
      while (__stlxr(v24 - 1, v11));
    }
  }
  *(_QWORD *)(this + 112) = v10;
  v13 = *((_QWORD *)a2 + 15);
  if (v13)
  {
    v14 = (unsigned int *)(v13 + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
    if (!v15)
    {
      v13 = 0;
      do
        v25 = __ldaxr(v14);
      while (__stlxr(v25 - 1, v14));
    }
  }
  *(_QWORD *)(this + 120) = v13;
  v16 = *((_QWORD *)a2 + 16);
  if (v16)
  {
    v17 = (unsigned int *)(v16 + 324);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  *(_QWORD *)(this + 128) = v16;
  *(_QWORD *)(this + 136) = 0;
  v19 = *((_QWORD *)a2 + 18);
  if (v19)
  {
    v20 = (unsigned int *)(v19 + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
    if (!v21)
    {
      v19 = 0;
      do
        v26 = __ldaxr(v20);
      while (__stlxr(v26 - 1, v20));
    }
  }
  *(_QWORD *)(this + 144) = v19;
  return this;
}

BOOL CA::Render::Animation::affects_velocity(CA::Render::Animation *this)
{
  uint64_t v2;
  int v4;
  BOOL v5;

  if ((*((_DWORD *)this + 3) & 0x88000) != 0x80000 || *((_DWORD *)this + 3) == 31)
    return 0;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if (*(double *)(v2 + 32) < 0.00208333333)
      return 0;
  }
  v4 = (int)*((float *)this + 7);
  if (v4)
    v5 = v4 <= 59;
  else
    v5 = 0;
  return !v5;
}

void CA::Render::BasicAnimation0::apply(CA::Render::BasicAnimation0 *this, CA::Render::AnimationEvaluator *a2, double a3, int a4, char a5)
{
  CA::Render::Object *keypath_object;
  CA::Render::Object **v11;
  CA::Render::PropertyAnimation *v12;
  uint64_t v13;
  CA::Render::VelocityState *v14;
  double v15;
  unint64_t *v16;
  double v17;
  void *const *v18;
  void *const *v19;
  double *v20;
  double **v21;
  CA::Render::Object *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  double *v29;
  double **v30;
  unint64_t v31;
  uint64_t keypath_value;
  CA::Render::Vector *v33;
  CA::Render::Vector *v34;
  double *v35;
  double *v36;
  double **v37;
  unint64_t v38;
  const double *v39;
  double *v40;
  unint64_t v41;
  float64x2_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  double *v48;
  double **v49;
  unint64_t v50;
  const double *v51;
  unint64_t v52;
  float64x2_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  double *v59;
  double *v60;
  double v61;
  double *v62;
  double *v63;
  double v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  double *v71;
  double **v72;
  unint64_t v73;
  const double *v74;
  double *v75;
  double *v76;
  double v77;
  double *v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  double *v82;
  double *v83;
  float64x2_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  CA::Render::Object *v100[2];
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  _BYTE v112[128];
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;

  v117 = *MEMORY[0x1E0C80C00];
  keypath_object = (CA::Render::Object *)*((_QWORD *)this + 14);
  v11 = (CA::Render::Object **)*((_QWORD *)this + 15);
  v12 = (CA::Render::PropertyAnimation *)*((_QWORD *)this + 16);
  v13 = CA::Render::PropertyAnimation::apply_velocity_state(this, (uint64_t)a2);
  v14 = (CA::Render::VelocityState *)v13;
  v15 = 0.0;
  if ((a5 & 1) == 0 && v13)
    v15 = (*(double (**)(CA::Render::BasicAnimation0 *, double))(*(_QWORD *)this + 128))(this, a3)
        * *((float *)a2 + 2);
  v16 = (unint64_t *)((char *)this + 96);
  v17 = (*(double (**)(CA::Render::BasicAnimation0 *, double))(*(_QWORD *)this + 168))(this, a3);
  if (CA::Render::Layer::keypath_is_object(*((CA::Render::Layer **)a2 + 5), (const CA::Render::Layer **)this + 12, v18))
  {
    if (keypath_object)
    {
      if (v11)
        goto LABEL_7;
    }
    else
    {
      keypath_object = (CA::Render::Object *)CA::Render::Layer::get_keypath_object(*((CA::Render::Layer **)a2 + 5), (const CA::Render::Layer **)this + 12, v19);
      if (v11)
        goto LABEL_7;
    }
    v11 = (CA::Render::Object **)CA::Render::Layer::get_keypath_object(*((CA::Render::Layer **)a2 + 2), (const CA::Render::Layer **)this + 12, v19);
LABEL_7:
    memset(&v112[16], 0, 104);
    *(double *)v112 = v17;
    *(double *)&v112[8] = v15;
    v100[0] = 0;
    CA::Render::mix_objects((uint64_t)v100, keypath_object, v11, (const ValueInterpolator *)v112);
    CA::Render::Layer::set_keypath_object(*((CA::Render::Layer **)a2 + 5), (const CA::Render::Layer **)this + 12, (void *const *)v100[0]);
    v22 = v100[0];
    if (v100[0])
    {
      v23 = (unsigned int *)((char *)v100[0] + 8);
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
        (*(void (**)(CA::Render::Object *))(*(_QWORD *)v22 + 16))(v22);
    }
    return;
  }
  if (!v12)
    goto LABEL_23;
  v26 = *v16;
  if (!*v16)
    goto LABEL_23;
  if ((v26 & 1) != 0)
  {
    v26 >>= 1;
  }
  else
  {
    if (!*(_DWORD *)v26)
    {
LABEL_23:
      v27 = 0;
      goto LABEL_24;
    }
    LODWORD(v26) = *(_DWORD *)(v26 + 4);
  }
  v27 = 1;
  if ((_DWORD)v26 != 137 && (_DWORD)v26 != 535 && (_DWORD)v26 != 557)
    goto LABEL_23;
LABEL_24:
  v115 = 0u;
  v116 = 0u;
  v113 = 0u;
  v114 = 0u;
  memset(v112, 0, sizeof(v112));
  v110 = 0u;
  v111 = 0u;
  v108 = 0u;
  v109 = 0u;
  v106 = 0u;
  v107 = 0u;
  v104 = 0u;
  v105 = 0u;
  v102 = 0u;
  v103 = 0u;
  *(_OWORD *)v100 = 0u;
  v101 = 0u;
  v83 = (double *)v112;
  v82 = (double *)v100;
  if (keypath_object && v11)
  {
    v28 = CA::Render::PropertyAnimation::animation_value(keypath_object, (const CA::Render::Object *)v112, (const CA::Render::Object **)&v83, v20, v21);
LABEL_27:
    v31 = v28;
    keypath_value = CA::Render::PropertyAnimation::animation_value((CA::Render::PropertyAnimation *)v11, (const CA::Render::Object *)v100, (const CA::Render::Object **)&v82, v29, v30);
LABEL_28:
    v33 = (CA::Render::Vector *)keypath_value;
    goto LABEL_29;
  }
  if (keypath_object && v12)
  {
    v31 = CA::Render::PropertyAnimation::animation_value(keypath_object, (const CA::Render::Object *)v112, (const CA::Render::Object **)&v83, v20, v21);
    v38 = CA::Render::PropertyAnimation::animation_value(v12, (const CA::Render::Object *)v100, (const CA::Render::Object **)&v82, v36, v37);
    v33 = (CA::Render::Vector *)v38;
    if ((v27 & 1) != 0)
    {
      v40 = v82;
      if (v31 >= v38)
        v41 = v38;
      else
        v41 = v31;
      if (v41 == 6)
      {
        v65 = *(float64x2_t *)(v83 + 2);
        v66 = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)(v83 + 4), *(float64x2_t *)v83, v82[4]), v65, *(float64x2_t *)(v82 + 4), 1);
        v67 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v83, v82[2]), v65, *(float64x2_t *)(v82 + 2), 1);
        *(float64x2_t *)v82 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v83, *v82), v65, *(float64x2_t *)v82, 1);
        *((float64x2_t *)v40 + 1) = v67;
        *((float64x2_t *)v40 + 2) = v66;
        goto LABEL_29;
      }
      if (v41 == 16)
      {
        v96 = *((_OWORD *)v82 + 4);
        v97 = *((_OWORD *)v82 + 5);
        v98 = *((_OWORD *)v82 + 6);
        v99 = *((_OWORD *)v82 + 7);
        v92 = *(float64x2_t *)v82;
        v93 = *(float64x2_t *)(v82 + 2);
        v94 = *(float64x2_t *)(v82 + 4);
        v95 = *((_OWORD *)v82 + 3);
        v42 = *(float64x2_t *)v83;
        v43 = *((_OWORD *)v83 + 1);
        v44 = *((_OWORD *)v83 + 3);
        v86 = *((_OWORD *)v83 + 2);
        v87 = v44;
        v84 = v42;
        v85 = v43;
        v45 = *((_OWORD *)v83 + 4);
        v46 = *((_OWORD *)v83 + 5);
        v47 = *((_OWORD *)v83 + 7);
        v90 = *((_OWORD *)v83 + 6);
        v91 = v47;
        v88 = v45;
        v89 = v46;
LABEL_57:
        CA::Mat4Impl::mat4_concat(&v92, v92.f64, v84.f64, v39);
        *((_OWORD *)v40 + 4) = v96;
        *((_OWORD *)v40 + 5) = v97;
        *((_OWORD *)v40 + 6) = v98;
        *((_OWORD *)v40 + 7) = v99;
        *(float64x2_t *)v40 = v92;
        *((float64x2_t *)v40 + 1) = v93;
        *((float64x2_t *)v40 + 2) = v94;
        *((_OWORD *)v40 + 3) = v95;
        goto LABEL_29;
      }
    }
    else if (v31 >= v38)
    {
      v41 = v38;
    }
    else
    {
      v41 = v31;
    }
    if (v41)
    {
      v60 = v82;
      v59 = v83;
      do
      {
        v61 = *v59++;
        *v60 = *v60 + v61;
        ++v60;
        --v41;
      }
      while (v41);
    }
    goto LABEL_29;
  }
  if (v11 && v12)
  {
    v31 = CA::Render::PropertyAnimation::animation_value(v12, (const CA::Render::Object *)v112, (const CA::Render::Object **)&v83, v20, v21);
    v50 = CA::Render::PropertyAnimation::animation_value((CA::Render::PropertyAnimation *)v11, (const CA::Render::Object *)v100, (const CA::Render::Object **)&v82, v48, v49);
    v33 = (CA::Render::Vector *)v50;
    if ((v27 & 1) != 0)
    {
      v40 = v83;
      if (v31 >= v50)
        v52 = v50;
      else
        v52 = v31;
      if (v52 == 6)
      {
        v79 = *(float64x2_t *)v82;
        v80 = *(float64x2_t *)(v82 + 2);
        v81 = *(float64x2_t *)(v82 + 4);
        v68 = *(float64x2_t *)(v83 + 2);
        v92 = *(float64x2_t *)v83;
        v93 = v68;
        v94 = *(float64x2_t *)(v83 + 4);
        CA::Mat2Impl::mat2_invert((CA::Mat2Impl *)&v92, v92.f64, v51);
        v69 = vmlaq_laneq_f64(vmulq_n_f64(v92, v80.f64[0]), v93, v80, 1);
        v70 = vmlaq_laneq_f64(vmlaq_n_f64(v94, v92, v81.f64[0]), v93, v81, 1);
        *(float64x2_t *)v40 = vmlaq_laneq_f64(vmulq_n_f64(v92, v79.f64[0]), v93, v79, 1);
        *((float64x2_t *)v40 + 1) = v69;
        *((float64x2_t *)v40 + 2) = v70;
        goto LABEL_29;
      }
      if (v52 == 16)
      {
        v96 = *((_OWORD *)v82 + 4);
        v97 = *((_OWORD *)v82 + 5);
        v98 = *((_OWORD *)v82 + 6);
        v99 = *((_OWORD *)v82 + 7);
        v92 = *(float64x2_t *)v82;
        v93 = *(float64x2_t *)(v82 + 2);
        v94 = *(float64x2_t *)(v82 + 4);
        v95 = *((_OWORD *)v82 + 3);
        v53 = *(float64x2_t *)v83;
        v54 = *((_OWORD *)v83 + 1);
        v55 = *((_OWORD *)v83 + 3);
        v86 = *((_OWORD *)v83 + 2);
        v87 = v55;
        v84 = v53;
        v85 = v54;
        v56 = *((_OWORD *)v83 + 4);
        v57 = *((_OWORD *)v83 + 5);
        v58 = *((_OWORD *)v83 + 7);
        v90 = *((_OWORD *)v83 + 6);
        v91 = v58;
        v88 = v56;
        v89 = v57;
        CA::Mat4Impl::mat4_invert((CA::Mat4Impl *)&v84, (CA::Mat4Impl *)&v84, v51);
        goto LABEL_57;
      }
    }
    else if (v31 >= v50)
    {
      v52 = v50;
    }
    else
    {
      v52 = v31;
    }
    if (v52)
    {
      v62 = v82;
      v63 = v83;
      do
      {
        v64 = *v62++;
        *v63 = v64 - *v63;
        ++v63;
        --v52;
      }
      while (v52);
    }
    goto LABEL_29;
  }
  if (keypath_object)
  {
    v31 = CA::Render::PropertyAnimation::animation_value(keypath_object, (const CA::Render::Object *)v112, (const CA::Render::Object **)&v83, v20, v21);
    keypath_value = CA::Render::Layer::get_keypath_value(*((CA::Render::Layer **)a2 + 2), (unint64_t *)this + 12, 0x18uLL, (double *)v100, &v82);
    goto LABEL_28;
  }
  if (v11)
  {
    v28 = CA::Render::Layer::get_keypath_value(*((CA::Render::Layer **)a2 + 5), (unint64_t *)this + 12, 0x18uLL, (double *)v112, &v83);
    goto LABEL_27;
  }
  if (v12)
  {
    v31 = CA::Render::Layer::get_keypath_value(*((CA::Render::Layer **)a2 + 5), (unint64_t *)this + 12, 0x18uLL, (double *)v112, &v83);
    v73 = CA::Render::PropertyAnimation::animation_value(v12, (const CA::Render::Object *)v100, (const CA::Render::Object **)&v82, v71, v72);
    v33 = (CA::Render::Vector *)v73;
    if ((v27 & 1) != 0)
    {
      if (v31 >= v73)
        v74 = (const double *)v73;
      else
        v74 = (const double *)v31;
        goto LABEL_29;
    }
    else if (v31 >= v73)
    {
      v74 = (const double *)v73;
    }
    else
    {
      v74 = (const double *)v31;
    }
    if (v74)
    {
      v76 = v82;
      v75 = v83;
      do
      {
        v77 = *v75++;
        *v76 = *v76 + v77;
        ++v76;
        v74 = (const double *)((char *)v74 - 1);
      }
      while (v74);
    }
    goto LABEL_29;
  }
  v31 = 0;
  v33 = 0;
LABEL_29:
  if ((unint64_t)v33 >= v31)
    v34 = (CA::Render::Vector *)v31;
  else
    v34 = v33;
  v35 = v83;
  if (v34)
  {
    *(_QWORD *)&v99 = 0;
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v92.f64[0] = v17;
    v92.f64[1] = v15;
    LODWORD(v78) = a4;
    CA::Render::PropertyAnimation::set(this, *((CA::Render::Layer **)a2 + 5), v14, v34, 0, v83, v82, 0, v83, v82, (const CA::Render::ValueInterpolator *)&v92, v78);
    v35 = v83;
  }
  if (v35 != (double *)v112)
    free(v35);
  if (v82 != (double *)v100)
    free(v82);
}

uint64_t CA::Render::PropertyAnimation::animation_value(CA::Render::PropertyAnimation *this, const CA::Render::Object *a2, const CA::Render::Object **a3, double *a4, double **a5)
{
  const CA::Render::Object *v6;
  uint64_t v8;
  const CA::Render::Object *v9;
  uint64_t result;
  uint64_t i;

  if (*((_BYTE *)this + 12) != 56)
    return 0;
  v6 = a2;
  v8 = *((unsigned int *)this + 4);
  v9 = a2;
  if (v8 < 0x19)
  {
LABEL_5:
    if (v9)
    {
      v6 = v9;
      result = v8;
    }
    else
    {
      result = 24;
    }
    if (!result)
      goto LABEL_14;
    goto LABEL_12;
  }
  if (a3)
  {
    v9 = (const CA::Render::Object *)malloc_type_malloc(8 * v8, 0x100004000313F17uLL);
    goto LABEL_5;
  }
  result = 24;
LABEL_12:
  for (i = 0; i != result; ++i)
    *((_QWORD *)v6 + i) = *((_QWORD *)this + i + 3);
LABEL_14:
  if (a3)
    *a3 = v6;
  return result;
}

uint64_t CA::Render::Layer::keypath_is_object(CA::Render::Layer *this, const CA::Render::Layer **a2, void *const *a3)
{
  unsigned int v5;
  unint64_t v6;
  int v7;
  int v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t result;
  unsigned int v12;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  v13[0] = this;
  v5 = CA::Render::skip_sublayers((CA::Render *)v13, a2, a3);
  if ((v5 & 0x80000000) != 0)
    return 0;
  v6 = (unint64_t)*a2;
  if (!*a2)
  {
    if (v5 != -1)
      return 0;
    goto LABEL_19;
  }
  if ((v6 & 1) != 0)
    v7 = 1;
  else
    v7 = *(_DWORD *)v6;
  v8 = v7 - v5;
  if (v8 != 1)
  {
    if (v8 > 3 || !v6)
      return 0;
    if ((v6 & 1) != 0)
    {
      if (v5)
        return 0;
      v9 = v6 >> 1;
    }
    else
    {
      if (*(_DWORD *)v6 <= v5)
        return 0;
      LODWORD(v9) = *(_DWORD *)(v6 + 4 * v5 + 4);
    }
    if ((_DWORD)v9 != 222)
    {
      if ((_DWORD)v9 == 111)
      {
        v12 = v5 + 1;
        return (v6 & 1) == 0 && *(_DWORD *)v6 > v12 && *(_DWORD *)(v6 + 4 * v12 + 4) == 283;
      }
      if ((_DWORD)v9 != 54)
        return 0;
    }
    v12 = v5 + 2;
    return (v6 & 1) == 0 && *(_DWORD *)v6 > v12 && *(_DWORD *)(v6 + 4 * v12 + 4) == 283;
  }
  if (!v6)
    goto LABEL_19;
  if ((v6 & 1) != 0)
  {
    if (v5)
      goto LABEL_19;
    v6 >>= 1;
  }
  else
  {
    if (*(_DWORD *)v6 <= v5)
      goto LABEL_19;
    LODWORD(v6) = *(_DWORD *)(v6 + 4 * v5 + 4);
  }
  result = 1;
  if ((int)v6 > 221)
  {
    if ((int)v6 > 492)
    {
      if ((_DWORD)v6 != 493 && (_DWORD)v6 != 536)
        goto LABEL_19;
    }
    else if ((_DWORD)v6 != 222 && (_DWORD)v6 != 377)
    {
      goto LABEL_19;
    }
  }
  else if (((v6 - 111) > 0x1E || ((1 << (v6 - 111)) & 0x40000041) == 0) && (_DWORD)v6 != 54)
  {
LABEL_19:
    v10 = (uint64_t *)*((_QWORD *)this + 16);
    if (v10)
    {
      result = *v10;
      if (*v10)
        return (*(uint64_t (**)(uint64_t, const CA::Render::Layer **))(*(_QWORD *)result + 112))(result, a2);
      return result;
    }
    return 0;
  }
  return result;
}

unint64_t CA::Render::skip_sublayers(CA::Render *this, const CA::Render::Layer **a2, void *const *a3)
{
  int *v3;
  int v6;
  unint64_t i;
  unint64_t v8;
  uint64_t v9;
  unsigned int named_object;
  CA::Render::String *v11;

  v3 = (int *)*a2;
  if (!*a2)
    return 0;
  if ((v3 & 1) != 0)
  {
    v6 = 1;
  }
  else
  {
    v6 = *v3;
    if (*v3 < 1)
      return 0;
  }
  for (i = 0; v6 > (int)i; i += 2)
  {
    v8 = (unint64_t)*a2;
    if (!*a2)
      break;
    if ((v8 & 1) != 0)
    {
      if (i)
        return i;
      v8 >>= 1;
    }
    else
    {
      if (i >= *(unsigned int *)v8)
        return i;
      LODWORD(v8) = *(_DWORD *)(v8 + 4 * i + 4);
    }
    if ((_DWORD)v8 != 536)
      break;
    v9 = *(_QWORD *)(*(_QWORD *)this + 104);
    if ((*(_BYTE *)(*(_QWORD *)this + 13) & 0x20) != 0)
    {
      if (!v9)
        return 0xFFFFFFFFLL;
      v11 = *(CA::Render::String **)(v9 + 120);
      if (!v11 || !CA::Render::String::equal(v11, 0x218u))
        return 0xFFFFFFFFLL;
    }
    else
    {
      if (!v9)
        return 0xFFFFFFFFLL;
      named_object = CA::Render::TypedArray<CA::Render::Layer>::find_named_object(*(_QWORD *)(*(_QWORD *)this + 104), 0x218u);
      if ((named_object & 0x80000000) != 0)
        return 0xFFFFFFFFLL;
      v9 = *(_QWORD *)(v9 + 8 * named_object + 24);
    }
    *(_QWORD *)this = v9;
  }
  return i;
}

void CA::Render::PropertyAnimation::set(CA::Render::PropertyAnimation *this, CA::Render::Layer *a2, CA::Render::VelocityState *a3, CA::Render::Vector *a4, unint64_t a5, const double *a6, const double *a7, unint64_t a8, const double *a9, const double *a10, const CA::Render::ValueInterpolator *a11, double *a12)
{
  CA::Render::Vector *v15;
  CA::Render::PropertyAnimation *v18;
  size_t v20;
  size_t v21;
  float64x2_t *v22;
  uint64_t v23;
  const double *v24;
  const double *v25;
  const double *v26;
  int v32;
  float64x2_t *v33;
  float64x2_t *v34;
  const double *v35;
  char v36;
  uint64_t v37;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  float64x2_t v42;
  __int128 v43;
  float64x2_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  int v50;
  double v51;
  const double *v52;
  double v53;
  CA::Render::VelocityState *v54;
  float64x2_t v55;
  float64x2_t v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  float64x2_t *v62;
  float64x2_t *v63;
  int v64;
  CA::Render::Vector *v65;
  const double *v66;
  double *v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  CA::Render::Vector *v76;
  unint64_t v77;
  CA::Render::Vector *v78;
  double *v79;
  CA::Mat4Impl *v80;
  double v81;
  double v82;
  double v83;
  double *v84;
  CA::Render::Vector *v85;
  double v86;
  int v87;
  CA::Render::Layer *v88;
  __int128 v89;
  float64x2_t v90;
  int v91;
  float64x2_t *v92;
  __int128 v93;
  __int128 v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t *v98;
  float64x2_t *v99;
  float64x2_t v100;
  char v101;
  float64x2_t *v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64_t v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  uint64_t v119;
  const double *v120;
  long double v121;
  double v122;
  CA::Mat4Impl *v123;
  float64x2_t v124;
  __int128 v125;
  float64x2_t v126;
  float64x2_t v127;
  char v128;
  float64x2_t *v129;
  const double *v130;
  __int128 v131;
  __int128 v132;
  float64x2_t v133;
  float64x2_t v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  size_t v139;
  char *v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  __int128 v146;
  __int128 v147;
  double *v148;
  CA::Render::Vector *v149;
  CA::Render::VelocityState *v150;
  float64x2_t *v151;
  CA::Render::Layer *v152;
  const double *v153;
  size_t v154;
  _OWORD v155[2];
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  float64x2_t v162[2];
  float64x2_t v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  float64x2_t v167;
  __int128 v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  __int128 v174;
  float64x2_t v175;
  __int128 v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  __int128 v184;
  __int128 v185;
  double v186;
  _OWORD v187[3];
  float64x2_t v188;
  __int128 v189;
  __int128 v190;
  float64x2_t v191;
  float64x2_t v192;
  __n128 v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  double v197;
  double v198;
  double v199;
  double v200;
  double v201;
  float64x2_t v202[3];
  uint64_t v203;

  v203 = *MEMORY[0x1E0C80C00];
  if (!((unint64_t)a4 >> 61))
  {
    v15 = a4;
    v18 = this;
    v153 = a7;
    v154 = 8 * (_QWORD)a4;
    if ((unint64_t)(8 * (_QWORD)a4) > 0x1000)
    {
      v34 = (float64x2_t *)malloc_type_malloc(v154, 0x2B6CFB91uLL);
      v35 = v153;
      if (!v34)
        return;
      v22 = v34;
      __asm { FMOV            V0.2D, #1.0 }
      v177 = (float64x2_t)_Q0;
      if (!a3)
      {
        v150 = 0;
        v151 = 0;
        v32 = 0;
        v33 = 0;
        goto LABEL_12;
      }
      v151 = (float64x2_t *)malloc_type_malloc(v154, 0x923DBC3EuLL);
      if (!v151)
        return;
      v150 = a3;
      v32 = 1;
      v33 = v22;
    }
    else
    {
      v149 = a4;
      v20 = v154;
      MEMORY[0x1E0C80A78](this);
      v21 = (v154 + 15) & 0xFFFFFFFFFFFFFFF0;
      v22 = (float64x2_t *)((char *)&v141 - v21);
      bzero((char *)&v141 - v21, v154);
      __asm { FMOV            V0.2D, #1.0 }
      v177 = (float64x2_t)_Q0;
      v150 = a3;
      if (a3)
      {
        MEMORY[0x1E0C80A78](v23);
        v151 = (float64x2_t *)((char *)&v141 - v21);
        bzero((char *)&v141 - v21, v20);
        v32 = 1;
        v33 = (float64x2_t *)((char *)&v141 - v21);
      }
      else
      {
        v32 = 0;
        v151 = 0;
        v33 = 0;
      }
      v18 = this;
      v15 = v149;
    }
    v35 = v153;
LABEL_12:
    v36 = *((_BYTE *)v18 + 13);
    v152 = a2;
    if ((v36 & 4) != 0 && (v37 = *((_QWORD *)v18 + 5)) != 0)
    {
      if ((*(_BYTE *)(v37 + 13) & 1) != 0)
        a10 = a9;
    }
    else
    {
      a10 = 0;
    }
    v39 = *((_QWORD *)v18 + 12);
    v149 = (CA::Render::PropertyAnimation *)((char *)v18 + 96);
    if (v39)
    {
      if ((v39 & 1) != 0)
      {
        v39 >>= 1;
      }
      else
      {
        if (!*(_DWORD *)v39)
          goto LABEL_33;
        LODWORD(v39) = *(_DWORD *)(v39 + 4);
      }
      if ((_DWORD)v39 == 137 || (_DWORD)v39 == 557 || (_DWORD)v39 == 535)
      {
        if (v15 == (CA::Render::Vector *)6)
        {
          v192 = 0u;
          v193 = 0u;
          v191 = 0u;
          if (v35)
          {
            v89 = *((_OWORD *)a6 + 1);
            v188 = *(float64x2_t *)a6;
            v189 = v89;
            v190 = *((_OWORD *)a6 + 2);
            v90 = *(float64x2_t *)(v35 + 2);
            v169 = *(float64x2_t *)v35;
            v170 = v90;
            v171 = *(float64x2_t *)(v35 + 4);
            v91 = v32;
            if (v32)
            {
              v182.f64[0] = 0.0;
              v180 = 0u;
              v181 = 0u;
              v178 = 0u;
              v179 = 0u;
              CA::Mat2Impl::mat2_mix_with_deriv(&v191, (uint64_t)&v188, (uint64_t)&v169, &v178, &v177, *(double *)a11, *((double *)a11 + 1));
              v33 = &v177;
              v92 = v151;
              *v151 = v178;
              v92[1] = v179;
              v92[2].f64[0] = v180.f64[0];
            }
            else
            {
              v99 = v33;
              CA::Mat2Impl::mat2_mix((CA::Mat2Impl *)&v191, v188.f64, v169.f64, v26, *(double *)a11);
              v33 = v99;
            }
            v87 = v91;
            LOBYTE(v32) = v91;
          }
          else
          {
            v87 = 0;
            v97 = *(float64x2_t *)(a6 + 2);
            v191 = *(float64x2_t *)a6;
            v192 = v97;
            v193 = *(__n128 *)(a6 + 4);
          }
          if (a10)
          {
            v100 = *(float64x2_t *)(a10 + 2);
            v178 = *(float64x2_t *)a10;
            v179 = v100;
            v180 = *(float64x2_t *)(a10 + 4);
            v101 = v32;
            v102 = v33;
            CA::Mat2Impl::mat2_pow((CA::Mat2Impl *)&v178, (double *)a12, v25, v26);
            v33 = v102;
            LOBYTE(v32) = v101;
            v103 = v191;
            *(_QWORD *)&v104.f64[0] = *(_OWORD *)&vmulq_laneq_f64(v192, v178, 1);
            v105 = vmulq_f64((float64x2_t)vzip2q_s64((int64x2_t)v191, (int64x2_t)v192), v178);
            v104.f64[1] = v105.f64[1];
            v106 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v105.f64[0], 0);
            *(_QWORD *)&v106.f64[0] = *(_OWORD *)&vmulq_f64(v191, v178);
            v191 = vaddq_f64(v104, v106);
            v107 = vmlaq_n_f64(vmulq_n_f64(v103, v179.f64[0]), v192, v179.f64[1]);
            _Q0 = (__n128)vmlaq_n_f64(vmlaq_n_f64((float64x2_t)v193, v103, v180.f64[0]), v192, v180.f64[1]);
            v108 = v191.f64[1];
          }
          else
          {
            v108 = v191.f64[1];
            v107 = v192;
            _Q0 = v193;
          }
          v88 = v152;
          v35 = v153;
          v22->f64[0] = v191.f64[0];
          v22->f64[1] = v108;
          v22[1] = v107;
          v22[2] = (float64x2_t)_Q0;
LABEL_92:
          v135 = v32 ^ 1;
          if (!v35)
            v135 = 1;
          if ((v135 & 1) == 0)
            CA::Render::VelocityState::set_keypath_velocity((uint64_t)v150, *((void *const **)v18 + 12), *((CA::Render::Function **)v18 + 13), (*((_DWORD *)v18 + 3) >> 9) & 1, (unint64_t)v15, (CA::Mat4Impl *)v151, v33->f64, v87, _Q0);
          v136 = *((_QWORD *)v18 + 13);
          if (v136)
          {
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v136 + 104))(v136) <= (unint64_t)v15)
            {
              v137 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v18 + 13) + 112))(*((_QWORD *)v18 + 13));
              v138 = v137;
              if (v137 <= 0x200)
              {
                MEMORY[0x1E0C80A78](v137);
                v140 = (char *)&v141 - ((v139 + 15) & 0xFFFFFFFF0);
                bzero(v140, v139);
LABEL_102:
                *(_QWORD *)&v178.f64[0] = v18;
                *(_QWORD *)&v178.f64[1] = v88;
                if ((*(unsigned int (**)(_QWORD, uint64_t, float64x2_t *, _QWORD, char *, _QWORD, double (*)(CA::Render *, const unsigned int *, const unsigned int *, uint64_t, void *), float64x2_t *))(**((_QWORD **)v18 + 13) + 128))(*((_QWORD *)v18 + 13), 1, v22, 0, v140, 0, CA::Render::animation_get_function_param, &v178))
                {
                  CA::Render::Layer::set_keypath_value(v88, (unint64_t *)v149, (const unsigned int *)((*((_DWORD *)v18 + 3) >> 9) & 1), (CA::Render::Vector *)v138, (double *)v140);
                }
                if (v138 >= 0x201)
                  free(v140);
                goto LABEL_106;
              }
              v140 = (char *)malloc_type_malloc(8 * v137, 0xBF37FB71uLL);
              if (v140)
                goto LABEL_102;
            }
          }
          else
          {
            CA::Render::Layer::set_keypath_value(v88, (unint64_t *)v149, (const unsigned int *)((*((_DWORD *)v18 + 3) >> 9) & 1), v15, v22->f64);
          }
LABEL_106:
          if (v154 > 0x1000)
            free(v22);
          return;
        }
        if (v15 == (CA::Render::Vector *)16)
        {
          v175 = 0u;
          v176 = 0u;
          v173 = 0u;
          v174 = 0u;
          v171 = 0u;
          v172 = 0u;
          v169 = 0u;
          v170 = 0u;
          if (v35)
          {
            v40 = *((_OWORD *)a6 + 5);
            v165 = *((_OWORD *)a6 + 4);
            v166 = v40;
            v41 = *((_OWORD *)a6 + 7);
            v167 = *(float64x2_t *)(a6 + 12);
            v168 = v41;
            v42 = *(float64x2_t *)(a6 + 2);
            v162[0] = *(float64x2_t *)a6;
            v162[1] = v42;
            v43 = *((_OWORD *)a6 + 3);
            v163 = *(float64x2_t *)(a6 + 4);
            v164 = v43;
            v44 = *(float64x2_t *)v35;
            v45 = *((_OWORD *)v35 + 1);
            v46 = *((_OWORD *)v35 + 3);
            v156 = *((_OWORD *)v35 + 2);
            v157 = v46;
            v155[0] = v44;
            v155[1] = v45;
            v47 = *((_OWORD *)v35 + 4);
            v48 = *((_OWORD *)v35 + 5);
            v49 = *((_OWORD *)v35 + 7);
            v160 = *((_OWORD *)v35 + 6);
            v161 = v49;
            v158 = v47;
            v159 = v48;
            v50 = v32;
            if (v32)
            {
              v51 = *(double *)a11;
              *(_QWORD *)&v47 = *((_QWORD *)a11 + 1);
              v147 = v47;
              if (CA::Mat4Impl::mat4_is_affine((CA::Mat4Impl *)v162, v24)
                && CA::Mat4Impl::mat4_is_affine((CA::Mat4Impl *)v155, v52))
              {
                v191 = v162[0];
                v192 = v163;
                v193 = (__n128)v167;
                v188 = (float64x2_t)v155[0];
                v189 = v156;
                v190 = v160;
                CA::Mat2Impl::mat2_mix_with_deriv(v202, (uint64_t)&v191, (uint64_t)&v188, &v178, &v177, v51, *(double *)&v147);
                v53 = 0.0;
                v54 = v150;
                v35 = v153;
                v32 = v50;
                v55 = v178;
                v56 = v179;
                memset(v187, 0, 32);
                *(_QWORD *)&v187[2] = 0x3FF0000000000000;
                v173 = 0u;
                v174 = xmmword_18474DF40;
                v169 = v202[0];
                v170 = 0u;
                v141 = 0u;
                v171 = v202[1];
                v172 = 0u;
                v57 = 1.0;
                v58 = 0.0;
                v175 = v202[2];
                v176 = xmmword_18474DF50;
                v59 = 0.0;
                v60 = 0.0;
                v61 = v180.f64[0];
              }
              else
              {
                CA::Mat4Impl::mat4_get_unmatrix(v162[0].f64, (uint64_t)&v178, (const double *)1);
                CA::Mat4Impl::mat4_get_unmatrix((double *)v155, (uint64_t)&v191, (const double *)1);
                CA::mix((uint64_t)&v188, &v178, &v191, v51);
                v109 = *((double *)&v184 + 1);
                v187[0] = vmulq_n_f64(vsubq_f64(v195, v182), *(double *)&v147);
                v187[1] = vmulq_n_f64(vsubq_f64(v196, v183), *(double *)&v147);
                *(double *)&v187[2] = (v197 - *(double *)&v184) * *(double *)&v147;
                v110 = *((double *)&v185 + 1);
                v111 = *(double *)&v185;
                v112 = v186;
                v113 = v199 * *(double *)&v185 + v200 * *((double *)&v185 + 1);
                v114 = v113 + v198 * *((double *)&v184 + 1) + v201 * v186;
                v54 = v150;
                v146 = v187[0];
                if (v114 < 0.0)
                {
                  v114 = -(v113 + v201 * v186 + v198 * *((double *)&v184 + 1));
                  v109 = -*((double *)&v184 + 1);
                  v111 = -*(double *)&v185;
                  v110 = -*((double *)&v185 + 1);
                  v112 = -v186;
                }
                v145 = vsubq_f64(v191, v178);
                v143 = vsubq_f64((float64x2_t)v193, v180);
                v144 = vsubq_f64(v192, v179);
                v142 = vsubq_f64(v194, v181);
                v115 = v111 * v200 + v112 * v198 - (v109 * v201 + v110 * v199);
                v116 = v110 * v198 + v112 * v199 - (v109 * v200 + v111 * v201);
                v117 = v109 * v199 + v112 * v200 - (v111 * v198 + v110 * v201);
                v118 = sqrt(v115 * v115 + v116 * v116 + v117 * v117);
                v121 = atan2(v118, v114);
                v122 = v121 + v121;
                if (v118 == 0.0)
                {
                  v57 = 1.0;
                  v59 = 0.0;
                  v60 = 0.0;
                }
                else
                {
                  v59 = v115 * (1.0 / v118);
                  v60 = v116 * (1.0 / v118);
                  v57 = v117 * (1.0 / v118);
                  if (v57 < 0.0)
                  {
                    v59 = -v59;
                    v60 = -v60;
                    v57 = -v57;
                    v122 = -v122;
                  }
                }
                v144 = vmulq_n_f64(v144, *(double *)&v147);
                v145 = vmulq_n_f64(v145, *(double *)&v147);
                v141 = vmulq_n_f64(v143, *(double *)&v147);
                v143 = vmulq_n_f64(v142, *(double *)&v147);
                v61 = -(*(double *)&v147 * v122);
                v177 = v188;
                CA::Mat4Impl::mat4_set_unmatrix((CA::Mat4Impl *)&v169, (uint64_t)&v188, v119, v120);
                v56 = v143;
                v53 = v144.f64[0];
                v55 = v145;
                v58 = *(double *)&v146;
                v35 = v153;
                v32 = v50;
              }
              if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*(float64x2_t *)((char *)v187 + 8)), (int32x4_t)vceqq_f64(*(float64x2_t *)((char *)&v187[1] + 8), (float64x2_t)xmmword_18474DF50))))) & 1) != 0|| fabs(v59) >= 0.000001|| fabs(v60) >= 0.000001|| fabs(v57 + -1.0) >= 0.000001|| v141.f64[0] != 0.0|| v141.f64[1] != 0.0)
              {
                if ((*((_BYTE *)v54 + 121) & 8) == 0)
                  *((_BYTE *)v54 + 124) = 3;
                *((_DWORD *)v54 + 30) = 2048;
              }
              if (fabs(v53 + -1.0) >= 0.000001 || fabs(v58) >= 0.000001)
                *((_DWORD *)v54 + 30) |= 0x400u;
              v150 = v54;
              v123 = (CA::Mat4Impl *)v151;
              *v151 = v55;
              *((float64x2_t *)v123 + 1) = v56;
              v33 = &v177;
              v87 = v32;
              *((double *)v123 + 4) = v61;
            }
            else
            {
              v98 = v33;
              CA::Mat4Impl::mat4_mix((CA::Mat4Impl *)&v169, v162, (double *)v155, v26, *(double *)a11);
              v33 = v98;
              v87 = 0;
              v35 = v153;
              LOBYTE(v32) = 0;
            }
          }
          else
          {
            v87 = 0;
            v93 = *((_OWORD *)a6 + 5);
            v173 = *(float64x2_t *)(a6 + 8);
            v174 = v93;
            v94 = *((_OWORD *)a6 + 7);
            v175 = *(float64x2_t *)(a6 + 12);
            v176 = v94;
            v95 = *(float64x2_t *)(a6 + 2);
            v169 = *(float64x2_t *)a6;
            v170 = v95;
            v96 = *(float64x2_t *)(a6 + 6);
            v171 = *(float64x2_t *)(a6 + 4);
            v172 = v96;
          }
          if (a10)
          {
            v124 = *(float64x2_t *)(a10 + 10);
            v182 = *(float64x2_t *)(a10 + 8);
            v183 = v124;
            v125 = *((_OWORD *)a10 + 7);
            v184 = *((_OWORD *)a10 + 6);
            v185 = v125;
            v126 = *(float64x2_t *)(a10 + 2);
            v178 = *(float64x2_t *)a10;
            v179 = v126;
            v127 = *(float64x2_t *)(a10 + 6);
            v180 = *(float64x2_t *)(a10 + 4);
            v181 = v127;
            v128 = v32;
            v129 = v33;
            CA::Mat4Impl::mat4_pow((CA::Mat4Impl *)&v178, (double *)a12, v25, v26);
            CA::Mat4Impl::mat4_concat(&v169, v178.f64, v169.f64, v130);
            v33 = v129;
            LOBYTE(v32) = v128;
            v35 = v153;
          }
          v131 = v174;
          v22[4] = v173;
          v22[5] = (float64x2_t)v131;
          v132 = v176;
          v22[6] = v175;
          v22[7] = (float64x2_t)v132;
          v133 = v170;
          *v22 = v169;
          v22[1] = v133;
          _Q0 = (__n128)v171;
          v134 = v172;
          v22[2] = v171;
          v22[3] = v134;
LABEL_91:
          v88 = v152;
          goto LABEL_92;
        }
      }
    }
LABEL_33:
    LODWORD(v147) = (_DWORD)a12;
    v148 = (double *)v22;
    if (v35)
    {
      v62 = v22;
      v63 = v33;
      v64 = v32;
      (*(void (**)(CA::Render::PropertyAnimation *, CA::Render::Vector *, float64x2_t *, unint64_t, const double *, const double *, unint64_t, const CA::Render::ValueInterpolator *))(*(_QWORD *)v18 + 160))(v18, v15, v62, a5, a6, v35, a8, a11);
      v33 = v63;
      LOBYTE(v32) = v64;
      v35 = v153;
      if (v64)
      {
        if (*((_BYTE *)a11 + 112) && a5 | a8)
        {
          _Q0.n128_u64[0] = -2.0;
          v65 = v15;
          v66 = v153;
          v67 = (double *)v151;
          while (1)
          {
            v68 = *a6++;
            v69 = v68;
            v70 = *v66++;
            v71 = v70;
            if (a5)
            {
              v72 = *(double *)a5;
              a5 += 8;
              v73 = v72;
              if (!a8)
                goto LABEL_42;
            }
            else
            {
              v73 = -(v71 + v69 * -2.0);
              if (!a8)
              {
LABEL_42:
                v75 = -(v69 + v71 * -2.0);
                goto LABEL_43;
              }
            }
            v74 = *(double *)a8;
            a8 += 8;
            v75 = v74;
LABEL_43:
            *v67++ = (*((double *)a11 + 6) * v69
                    + *((double *)a11 + 7) * (*((double *)a11 + 10) * (v69 - v73) + *((double *)a11 + 11) * (v71 - v69))
                    + *((double *)a11 + 8) * v71
                    + *((double *)a11 + 9) * (*((double *)a11 + 12) * (v71 - v69) + *((double *)a11 + 13) * (v75 - v71)))
                   * *((double *)a11 + 1);
            v65 = (CA::Render::Vector *)((char *)v65 - 1);
            if (!v65)
              goto LABEL_50;
          }
        }
        v78 = v15;
        v79 = (double *)v153;
        v80 = (CA::Mat4Impl *)v151;
        do
        {
          v81 = *a6++;
          v82 = v81;
          v83 = *v79++;
          _Q0.n128_f64[0] = *((double *)a11 + 1) * (v83 - v82);
          *(_QWORD *)v80 = _Q0.n128_u64[0];
          v80 = (CA::Mat4Impl *)((char *)v80 + 8);
          v78 = (CA::Render::Vector *)((char *)v78 - 1);
        }
        while (v78);
      }
    }
    else
    {
      v76 = v15;
      do
      {
        v77 = *(_QWORD *)a6++;
        _Q0.n128_u64[0] = v77;
        *(_QWORD *)&v22->f64[0] = v77;
        v22 = (float64x2_t *)((char *)v22 + 8);
        v76 = (CA::Render::Vector *)((char *)v76 - 1);
      }
      while (v76);
    }
LABEL_50:
    if (!a10)
    {
      v87 = 0;
      v88 = v152;
      v22 = (float64x2_t *)v148;
      goto LABEL_92;
    }
    _Q0.n128_f64[0] = (double)(int)v147;
    v22 = (float64x2_t *)v148;
    v84 = v148;
    v85 = v15;
    do
    {
      v86 = *a10++;
      *v84 = *v84 + v86 * _Q0.n128_f64[0];
      ++v84;
      v85 = (CA::Render::Vector *)((char *)v85 - 1);
    }
    while (v85);
    v87 = 0;
    goto LABEL_91;
  }
}

void CA::Render::Layer::set_keypath_value(CA::Render::Layer *this, unint64_t *size, const unsigned int *a3, CA::Render::Vector *a4, double *a5)
{
  unint64_t v5;
  unint64_t v10;
  _DWORD *v12;
  const double *v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  size_t v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  v5 = *size;
  if (*size)
  {
    if ((v5 & 1) != 0)
    {
      v10 = 1;
    }
    else
    {
      v10 = *(unsigned int *)v5;
      if (v10 - 0x10000 < 0xFFFFFFFFFFFF0001)
        return;
      if (v10 > 0x400)
      {
        v12 = malloc_type_malloc(4 * v10, 0x100004052888210uLL);
        if (!v12)
          return;
        v14 = v12;
        v5 = *size;
        if (!*size)
          goto LABEL_15;
        if ((v5 & 1) == 0)
          goto LABEL_8;
        goto LABEL_14;
      }
    }
    MEMORY[0x1E0C80A78](this);
    v14 = (_DWORD *)((char *)v19 - ((v18 + 15) & 0x7FFFFFFF0));
    bzero(v14, v18);
    if ((v5 & 1) == 0)
    {
LABEL_8:
      v15 = *(unsigned int *)v5;
      if ((_DWORD)v15)
      {
        v16 = 0;
        v17 = 4 * v15;
        do
        {
          v14[v16 / 4] = *(_DWORD *)(v5 + 4 + v16);
          v16 += 4;
        }
        while (v17 != v16);
      }
      goto LABEL_15;
    }
LABEL_14:
    *v14 = v5 >> 1;
LABEL_15:
    CA::Render::Layer::set_property_value(this, v14, (double *)v10, a3, a4, a5, v13);
    if (v10 >= 0x401)
      free(v14);
  }
}

void CA::Render::Layer::set_property_value(CA::Render::Layer *this, const unsigned int *a2, double *a3, const unsigned int *a4, CA::Render::Vector *a5, double *a6, const double *a7)
{
  float64x2_t *v7;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  const unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  CA::Render *v21;
  CGFloat a;
  CA::Render::Vector *v23;
  float v24;
  double v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  unsigned int v38;
  uint64_t v39;
  CA::Render *v40;
  uint64_t v41;
  CA::Render *v42;
  unint64_t v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float64x2_t v48;
  float64x2_t v49;
  uint64_t v50;
  double v51;
  double v52;
  uint64_t v53;
  double v54;
  double v55;
  uint64_t v56;
  double v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  float64x2_t *v62;
  float64x2_t *v63;
  float64x2_t *v64;
  BOOL v65;
  float64x2_t *v66;
  float64x2_t v67;
  float64x2_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  CA::Render *v72;
  unsigned int *v73;
  unsigned int named_object;
  unsigned int v75;
  void *v76;
  uint64_t v77;
  CA::Render::Layer *v78;
  const double *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  float v83;
  _BOOL4 v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float64x2_t v91;
  double *v92;
  unsigned int v93;
  double v94;
  CA::Render::Vector *v95;
  unsigned int *v96;
  unsigned int v97;
  BOOL v98;
  CA::Render::Layer *v99;
  CA::Render::Layer *v100;
  CA::Render::Layer *v101;
  const double *v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int v105;
  CA::Render::Filter *v106;
  CA::Render::Filter *v107;
  CA::Render::Filter *v108;
  _QWORD *v109;
  unsigned int *v110;
  unsigned int *v111;
  unsigned int v112;
  BOOL v113;
  CA::Render::Vector *v114;
  unsigned int *v115;
  unsigned int v116;
  BOOL v117;
  _DWORD *v118;
  _DWORD *v119;
  uint64_t v120;
  _QWORD *v121;
  unsigned int *v122;
  unsigned int v123;
  unsigned int *v124;
  unsigned int v125;
  unsigned int *v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  double v131;
  _DWORD *v132;
  _DWORD *v133;
  uint64_t v134;
  _QWORD *v135;
  unsigned int *v136;
  unsigned int v137;
  unsigned int *v138;
  unsigned int v139;
  float64_t v140;
  unsigned int v141;
  double v142;
  float v143;
  float v144;
  BOOL v145;
  float *v146;
  _BOOL4 v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  unsigned int *v156;
  unsigned int v157;
  float v158;
  unsigned int *v159;
  unsigned int v160;
  float v161;
  float v162;
  CA::Render::Layer *v163;
  uint64_t v164;
  float v165;
  float v166;
  float64x2_t v167;
  float64_t v168;
  float64_t v169;
  float64_t *v170;
  float v171;
  float v172;
  float *v173;
  double v174;
  double *v175;
  float64x2_t v176;
  int8x16_t v177;
  unint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  float v181;
  float v182;
  float v183;
  unsigned int v184;
  double v185;
  float64x2_t v186;
  char *v187;
  unsigned int *v188;
  uint64_t *v189;
  unsigned int *v190;
  unsigned int *v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int *v194;
  unsigned int v195;
  const double *v196;
  double v197;
  double v198;
  const CGAffineTransform *v199;
  unsigned int *v200;
  unsigned int v201;
  CGAffineTransform v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  int8x16_t v206;
  float64x2_t v207;
  _BYTE v208[40];
  uint64_t v209;

  v209 = *MEMORY[0x1E0C80C00];
  if (!a3)
    return;
  v7 = (float64x2_t *)a6;
  v13 = (_DWORD)a3 - 1;
  if (a3 == (double *)1)
  {
    v206 = 0u;
    v207 = 0u;
    v202.a = 0.0;
    if (!(_DWORD)a4)
    {
LABEL_28:
      v15 = 0;
      v14 = *a2;
      goto LABEL_29;
    }
    v14 = *a2;
    v15 = 1;
    if (*(int *)a2 > 534)
    {
      if (v14 != 535 && v14 != 557)
      {
LABEL_23:
        if (CA::Render::Layer::get_property_value(this, a2, 1, 4uLL, (double *)v206.i64, (double **)&v202, 0.0) >= (unint64_t)a5)
        {
          a = v202.a;
          if (a5)
          {
            v23 = 0;
            do
            {
              *(double *)(*(_QWORD *)&a + 8 * (_QWORD)v23) = *(double *)(*(_QWORD *)&a + 8 * (_QWORD)v23)
                                                             + v7->f64[(_QWORD)v23];
              v23 = (CA::Render::Vector *)((char *)v23 + 1);
            }
            while (a5 != v23);
          }
          v7 = *(float64x2_t **)&a;
        }
        goto LABEL_28;
      }
    }
    else if (v14 != 137 && v14 != 321)
    {
      goto LABEL_23;
    }
LABEL_29:
    if (v14 <= 380)
    {
      if (v14 <= 122)
      {
        if (v14 > 52)
        {
          switch(v14)
          {
            case '@':
              if ((unint64_t)a5 >= 4)
              {
                v30 = v7->f64[0];
                v31 = v7->f64[1];
                v32 = v7[1].f64[0];
                v33 = v7[1].f64[1];
                CA::Render::Layer::set_border_color(this, v30, v31, v32, v33);
              }
              goto LABEL_390;
            case 'A':
              if (a5)
              {
                v165 = v7->f64[0];
                if (v165 != 0.0 || *((_QWORD *)this + 16))
                  *((float *)CA::Render::Layer::ensure_ext(this) + 58) = v165;
              }
              goto LABEL_390;
            case 'B':
              if (!a5)
                goto LABEL_390;
              v43 = *((_QWORD *)this + 5) & 0xFFFFFFDFFFFFFFFFLL | ((unint64_t)(v7->f64[0] > 0.5) << 37);
              goto LABEL_389;
            case 'C':
              if (a5)
              {
                v166 = v7->f64[0];
                if (v166 > 0.0 || *((_QWORD *)this + 16))
                  *((float *)CA::Render::Layer::ensure_ext(this) + 59) = v166;
              }
              goto LABEL_390;
            case 'D':
            case 'E':
            case 'F':
            case 'G':
              goto LABEL_373;
            case 'H':
              if ((unint64_t)a5 >= 4)
              {
                v167 = vsubq_f64(v7[1], *v7);
                *((float64x2_t *)this + 4) = *v7;
                *((float64x2_t *)this + 5) = v167;
              }
              goto LABEL_390;
            default:
              if (v14 == 53)
              {
                if ((unint64_t)a5 >= 2)
                {
                  v168 = v7->f64[0];
                  v169 = v7->f64[1];
                  v170 = (float64_t *)CA::Render::Layer::ensure_ext(this);
                  v170[19] = v168;
                  v170[20] = v169;
                }
              }
              else
              {
                if (v14 != 119)
                  goto LABEL_373;
                if ((unint64_t)a5 >= 4)
                {
                  v95 = (CA::Render::Vector *)CA::Render::Vector::new_vector((CA::Render::Vector *)4, v7, a3);
                  CA::Render::Layer::set_contents_center((unsigned int *)this, v95);
                  if (v95)
                  {
                    v96 = (unsigned int *)((char *)v95 + 8);
                    do
                    {
                      v97 = __ldaxr(v96);
                      v98 = --v97 == 0;
                    }
                    while (__stlxr(v97, v96));
                    goto LABEL_306;
                  }
                }
              }
              break;
          }
          goto LABEL_390;
        }
        if (v14 > 25)
        {
          if (v14 == 26)
          {
            if (a5 && (v7->f64[0] != 0.0 || *((_QWORD *)this + 16)))
            {
              v140 = v7->f64[0];
              *((float64_t *)CA::Render::Layer::ensure_ext(this) + 23) = v140;
            }
            goto LABEL_390;
          }
          if (v14 == 52)
          {
            if ((unint64_t)a5 >= 4)
            {
              v87 = v7->f64[0];
              v88 = v7->f64[1];
              v89 = v7[1].f64[0];
              v90 = v7[1].f64[1];
              CA::Render::Layer::set_background_color((uint64_t)this, v87, v88, v89, v90);
            }
            goto LABEL_390;
          }
        }
        else
        {
          if (v14 == 12)
          {
            if (!a5)
              goto LABEL_390;
            v43 = *((_QWORD *)this + 5) & 0xFFFFFFFFFBFFFFFFLL | ((unint64_t)(v7->f64[0] > 0.5) << 26);
            goto LABEL_389;
          }
          if (v14 == 25)
          {
            if ((unint64_t)a5 >= 2)
            {
              v203 = *v7;
              CA::Render::Layer::set_anchor_point(this, (uint64_t)&v203);
            }
            goto LABEL_390;
          }
        }
        goto LABEL_373;
      }
      if (v14 <= 181)
      {
        switch(v14)
        {
          case 123:
            if (a5)
            {
              v24 = v7->f64[0];
              if (v24 != 1.0 || *((_QWORD *)this + 16))
                *((float *)CA::Render::Layer::ensure_ext(this) + 64) = v24;
            }
            goto LABEL_390;
          case 129:
            if (a5)
              *((_DWORD *)this + 9) = *((_DWORD *)this + 9) & 0xFFFF0FFF | (((int)v7->f64[0] & 0xF) << 12);
            goto LABEL_390;
          case 130:
            if (a5)
            {
              v151 = v7->f64[0];
              if (v151 != 0.0 || *((_QWORD *)this + 16))
                *((float *)CA::Render::Layer::ensure_ext(this) + 65) = v151;
            }
            goto LABEL_390;
          case 131:
            if ((unint64_t)a5 >= 4)
            {
              v152 = v7->f64[0];
              v153 = v7->f64[1];
              v154 = v7[1].f64[0];
              v155 = v7[1].f64[1];
              CA::Render::Layer::set_contents_multiply_color(this, v152, v153, v154, v155);
            }
            goto LABEL_390;
          case 133:
            if ((unint64_t)a5 < 4)
              goto LABEL_390;
            v95 = (CA::Render::Vector *)CA::Render::Vector::new_vector((CA::Render::Vector *)4, v7, a3);
            CA::Render::Layer::set_contents_rect((unsigned int *)this, v95);
            if (!v95)
              goto LABEL_390;
            v156 = (unsigned int *)((char *)v95 + 8);
            do
            {
              v157 = __ldaxr(v156);
              v98 = --v157 == 0;
            }
            while (__stlxr(v157, v156));
            break;
          case 134:
            if (a5)
            {
              v158 = v7->f64[0];
              CA::Render::Layer::set_contents_scale(this, v158);
            }
            goto LABEL_390;
          case 136:
            if (a5)
              CA::Render::Layer::set_contents_swizzle(this, (int)v7->f64[0]);
            goto LABEL_390;
          case 137:
            CA::Render::Layer::set_affine_matrix(this, v15, (unint64_t)a5, v7);
            goto LABEL_390;
          case 145:
            if ((unint64_t)a5 < 8)
              goto LABEL_390;
            v95 = (CA::Render::Vector *)CA::Render::Vector::new_vector((CA::Render::Vector *)8, v7, a3);
            CA::Render::Layer::set_corner_radii((unsigned int *)this, v95);
            if (!v95)
              goto LABEL_390;
            v159 = (unsigned int *)((char *)v95 + 8);
            do
            {
              v160 = __ldaxr(v159);
              v98 = --v160 == 0;
            }
            while (__stlxr(v160, v159));
            break;
          case 146:
            if (a5)
            {
              v161 = v7->f64[0];
              v162 = v161 >= 0.0 ? v7->f64[0] : 0.0;
              if (v162 != 0.0 || *((_QWORD *)this + 16))
                *((float *)CA::Render::Layer::ensure_ext(this) + 57) = v162;
            }
            goto LABEL_390;
          default:
            goto LABEL_373;
        }
LABEL_306:
        if (v98)
          (*(void (**)(CA::Render::Vector *))(*(_QWORD *)v95 + 16))(v95);
        goto LABEL_390;
      }
      if (v14 <= 325)
      {
        if (v14 == 182)
        {
          if (!a5)
            goto LABEL_390;
          v43 = *((_QWORD *)this + 5) & 0xFFFFFFFFFFFFFBFFLL | ((unint64_t)(v7->f64[0] > 0.5) << 10);
          goto LABEL_389;
        }
        if (v14 == 251)
        {
          if (!a5)
            goto LABEL_390;
          v43 = *((_QWORD *)this + 5) & 0xFFFFFFFFFFFFFEFFLL | ((unint64_t)(v7->f64[0] > 0.5) << 8);
          goto LABEL_389;
        }
LABEL_373:
        v179 = (_QWORD *)*((_QWORD *)this + 16);
        if (v179)
        {
          if (*v179)
          {
            v180 = *CA::Render::Layer::ensure_ext(this);
            if (v180)
              (*(void (**)(uint64_t, uint64_t, const unsigned int *, uint64_t, CA::Render::Vector *, float64x2_t *))(*(_QWORD *)v180 + 144))(v180, 1, a2, v15, a5, v7);
          }
        }
        goto LABEL_390;
      }
      if (v14 != 326)
      {
        if (v14 == 369)
        {
          if (!a5)
            goto LABEL_390;
          v43 = *((_QWORD *)this + 5) & 0xFFFFFFFFFFFFFFBFLL | ((unint64_t)(v7->f64[0] > 0.5) << 6);
          goto LABEL_389;
        }
        goto LABEL_373;
      }
      if (!a5)
        goto LABEL_390;
      v43 = *((_QWORD *)this + 5) & 0xFFFFFFFDFFFFFFFFLL | ((unint64_t)(v7->f64[0] > 0.5) << 33);
LABEL_389:
      *((_QWORD *)this + 5) = v43;
LABEL_390:
      if (*(int8x16_t **)&v202.a != &v206)
        free(*(void **)&v202.a);
      return;
    }
    if (v14 <= 489)
    {
      if (v14 > 432)
      {
        switch(v14)
        {
          case 440:
            if (!a5)
              goto LABEL_390;
            v43 = *((_QWORD *)this + 5) & 0xFFFFFFF7FFFFFFFFLL | ((unint64_t)(v7->f64[0] > 0.5) << 35);
            break;
          case 441:
          case 442:
          case 443:
          case 444:
            goto LABEL_373;
          case 445:
            if (!a5)
              goto LABEL_390;
            v43 = *((_QWORD *)this + 5) & 0xFFFFFFFFFFDFFFFFLL | ((unint64_t)(v7->f64[0] > 0.5) << 21);
            break;
          case 446:
            if (!a5)
              goto LABEL_390;
            v43 = *((_QWORD *)this + 5) & 0xFFFFFFFFFFBFFFFFLL | ((unint64_t)(v7->f64[0] > 0.5) << 22);
            break;
          case 447:
            if (a5)
            {
              v181 = v7->f64[0];
              CA::Render::Layer::set_rasterization_scale(this, v181);
            }
            goto LABEL_390;
          default:
            switch(v14)
            {
              case 466:
                if ((unint64_t)a5 >= 4)
                {
                  v44 = v7->f64[0];
                  v45 = v7->f64[1];
                  v46 = v7[1].f64[0];
                  v47 = v7[1].f64[1];
                  CA::Render::Layer::set_rim_color(this, v44, v45, v46, v47);
                }
                break;
              case 467:
                if (a5)
                {
                  v182 = v7->f64[0];
                  if (v182 > 0.0 || *((_QWORD *)this + 16))
                    *((float *)CA::Render::Layer::ensure_ext(this) + 79) = v182;
                }
                break;
              case 468:
                if (a5)
                {
                  v43 = *((_QWORD *)this + 5) & 0xFFFFFFEFFFFFFFFFLL | ((unint64_t)(v7->f64[0] > 0.5) << 36);
                  goto LABEL_389;
                }
                break;
              case 469:
                if (a5)
                {
                  v183 = v7->f64[0];
                  if (v183 > 0.0 || *((_QWORD *)this + 16))
                    *((float *)CA::Render::Layer::ensure_ext(this) + 74) = v183;
                }
                break;
              default:
                if (v14 != 433)
                  goto LABEL_373;
                if (a5)
                {
                  v43 = *((_QWORD *)this + 5) & 0xFFFFFFFFFF7FFFFFLL | ((unint64_t)(v7->f64[0] > 0.5) << 23);
                  goto LABEL_389;
                }
                break;
            }
            goto LABEL_390;
        }
        goto LABEL_389;
      }
      if (v14 == 381)
      {
        if (a5)
        {
          v83 = v7->f64[0];
          if (v83 != 0.0 || *((_QWORD *)this + 16))
            *((float *)CA::Render::Layer::ensure_ext(this) + 72) = v83;
        }
        goto LABEL_390;
      }
      if (v14 == 400)
      {
        if (a5)
        {
          v84 = v7->f64[0] > 1.0 || v7->f64[0] < 0.0;
          v85 = 1.0;
          if (v7->f64[0] < 0.0 && v7->f64[0] <= 1.0)
            v85 = 0.0;
          v86 = v7->f64[0];
          if (v84)
            v86 = v85;
          *((_BYTE *)this + 32) = (int)(float)((float)(v86 * 255.0) + 0.5);
        }
        goto LABEL_390;
      }
      if (v14 != 429)
        goto LABEL_373;
      if ((unint64_t)a5 < 2)
        goto LABEL_390;
      *((float64x2_t *)this + 3) = *v7;
      if (a5 == (CA::Render::Vector *)2)
        goto LABEL_390;
      v25 = v7[1].f64[0];
LABEL_124:
      if (v25 != 0.0 || *((_QWORD *)this + 16))
        *((double *)CA::Render::Layer::ensure_ext(this) + 24) = v25;
      goto LABEL_390;
    }
    if (v14 <= 534)
    {
      switch(v14)
      {
        case 490:
          if ((unint64_t)a5 >= 4)
          {
            v26 = v7->f64[0];
            v27 = v7->f64[1];
            v28 = v7[1].f64[0];
            v29 = v7[1].f64[1];
            CA::Render::Layer::set_shadow_color(this, v26, v27, v28, v29);
          }
          goto LABEL_390;
        case 491:
          if ((unint64_t)a5 >= 2)
          {
            v143 = v7->f64[0];
            v144 = v7->f64[1];
            v145 = v143 == 0.0 && v144 == -3.0;
            if (!v145 || *((_QWORD *)this + 16))
            {
              v146 = (float *)CA::Render::Layer::ensure_ext(this);
              v146[54] = v143;
              v146[55] = v144;
            }
          }
          goto LABEL_390;
        case 492:
          if (a5)
          {
            v147 = v7->f64[0] > 1.0 || v7->f64[0] < 0.0;
            v148 = 1.0;
            if (v7->f64[0] < 0.0 && v7->f64[0] <= 1.0)
              v148 = 0.0;
            v149 = v7->f64[0];
            if (v147)
              v149 = v148;
            *((_BYTE *)this + 33) = (int)(float)((float)(v149 * 255.0) + 0.5);
          }
          goto LABEL_390;
        case 494:
          if (!a5)
            goto LABEL_390;
          v43 = *((_QWORD *)this + 5) & 0xFFFFFFFBFFFFFFFFLL | ((unint64_t)(v7->f64[0] > 0.5) << 34);
          break;
        case 495:
          if (a5)
          {
            v150 = v7->f64[0];
            if (v150 != 3.0 || *((_QWORD *)this + 16))
              *((float *)CA::Render::Layer::ensure_ext(this) + 56) = v150;
          }
          goto LABEL_390;
        case 497:
          if (!a5)
            goto LABEL_390;
          v43 = *((_QWORD *)this + 5) & 0xFFFFFFFFFFFBFFFFLL | ((unint64_t)(v7->f64[0] > 0.5) << 18);
          break;
        case 498:
          if (!a5)
            goto LABEL_390;
          v43 = *((_QWORD *)this + 5) & 0xFFFFFFFFFFF7FFFFLL | ((unint64_t)(v7->f64[0] > 0.5) << 19);
          break;
        case 499:
          if (!a5)
            goto LABEL_390;
          v43 = *((_QWORD *)this + 5) & 0xFFFFFFFFFFEFFFFFLL | ((unint64_t)(v7->f64[0] > 0.5) << 20);
          break;
        case 505:
          if (!a5)
            goto LABEL_390;
          v43 = *((_QWORD *)this + 5) & 0xFFFFFFBFFFFFFFFFLL | ((unint64_t)(v7->f64[0] > 0.5) << 38);
          break;
        default:
          goto LABEL_373;
      }
      goto LABEL_389;
    }
    switch(v14)
    {
      case 535:
        v163 = this;
        v164 = 24;
        break;
      case 557:
        v163 = this;
        v164 = 16;
        break;
      case 604:
        if (!a5)
          goto LABEL_390;
        v25 = v7->f64[0];
        goto LABEL_124;
      default:
        goto LABEL_373;
    }
    CA::Render::Layer::set_transform_matrix(v163, v164, v15, (unint64_t)a5, v7);
    goto LABEL_390;
  }
  v17 = a2 + 1;
  v16 = *a2;
  if (*(int *)a2 > 136)
  {
    if (v16 <= 490)
    {
      if (v16 != 137)
      {
        if (v16 != 222)
        {
          if (v16 == 429)
          {
            v37 = *((double *)this + 6);
            v36 = *((double *)this + 7);
            if ((_DWORD)a3 == 2)
            {
              v38 = *v17;
              if (a5 && v38 == 596)
              {
                if (!(_DWORD)a4)
                  v37 = -0.0;
                v37 = *a6 + v37;
              }
              else if (a5 && v38 == 600)
              {
                if (!(_DWORD)a4)
                  v36 = -0.0;
                v36 = *a6 + v36;
              }
            }
            *((double *)this + 6) = v37;
            *((double *)this + 7) = v36;
            return;
          }
          goto LABEL_115;
        }
        v69 = *((_QWORD *)this + 16);
        if (v69)
          v70 = *(_QWORD *)(v69 + 96);
        else
          v70 = 0;
        v132 = CA::Render::set_list_property<CA::Render::Filter>(v70, (unint64_t)a3 - 1, (uint64_t)(a2 + 1), (int)a4, a5, a6);
        v133 = v132;
        v134 = *((_QWORD *)this + 16);
        if (v134)
          v134 = *(_QWORD *)(v134 + 96);
        if (v132 == (_DWORD *)v134)
          return;
        v135 = CA::Render::Layer::ensure_ext(this);
        v110 = (unsigned int *)v135[12];
        v135[12] = v133;
        if (!v110)
          return;
        v136 = v110 + 2;
        do
        {
          v137 = __ldaxr(v136);
          v113 = --v137 == 0;
        }
        while (__stlxr(v137, v136));
LABEL_233:
        if (v113)
          (*(void (**)(unsigned int *))(*(_QWORD *)v110 + 16))(v110);
        return;
      }
      v59 = *((_QWORD *)this + 16);
      if (v59 && (v60 = *(_QWORD *)(v59 + 32)) != 0)
      {
        v61 = *(_DWORD *)(v60 + 16);
        v62 = (float64x2_t *)(v60 + 24);
        v63 = (float64x2_t *)(v60 + 40);
        v64 = (float64x2_t *)(v60 + 56);
        v65 = v61 >= 6;
        if (v61 < 6)
          v64 = (float64x2_t *)(MEMORY[0x1E0C9BAA8] + 32);
        v66 = (float64x2_t *)(MEMORY[0x1E0C9BAA8] + 16);
        if (v65)
          v66 = v63;
        if (!v65)
          v62 = (float64x2_t *)MEMORY[0x1E0C9BAA8];
        v67 = *v66;
        v68 = *v64;
        v203 = *v62;
        v204 = v67;
        v205 = v68;
      }
      else
      {
        v91 = *(float64x2_t *)(MEMORY[0x1E0C9BAA8] + 16);
        v203 = *(float64x2_t *)MEMORY[0x1E0C9BAA8];
        v204 = v91;
        v205 = *(float64x2_t *)(MEMORY[0x1E0C9BAA8] + 32);
      }
      memset(v208, 0, sizeof(v208));
      v206 = 0u;
      v207 = 0u;
      CA::Mat2Impl::mat2_get_unmatrix((uint64_t)&v203, (uint64_t)&v206);
      if (v13 == 2)
      {
        if (*v17 == 561)
        {
          v184 = a2[2];
          if (a5 && v184 == 596)
          {
            if ((a4 & 1) != 0)
              v185 = v7->f64[0] + v207.f64[0];
            else
              v185 = v7->f64[0];
            v207.f64[0] = v185;
          }
          else if (a5 && v184 == 600)
          {
            if ((a4 & 1) != 0)
              v198 = v7->f64[0] + v207.f64[1];
            else
              v198 = v7->f64[0];
            v207.f64[1] = v198;
          }
        }
        else if (*v17 == 475)
        {
          v141 = a2[2];
          if (a5 && v141 == 596)
          {
            if ((a4 & 1) != 0)
              v142 = v7->f64[0] + *(double *)v206.i64;
            else
              v142 = v7->f64[0];
            *(double *)v206.i64 = v142;
          }
          else if (a5 && v141 == 600)
          {
            if ((a4 & 1) != 0)
              v197 = v7->f64[0] + *(double *)&v206.i64[1];
            else
              v197 = v7->f64[0];
            *(double *)&v206.i64[1] = v197;
          }
        }
      }
      else if (v13 == 1)
      {
        v93 = *v17;
        if (a5 && v93 == 470)
        {
          if ((a4 & 1) != 0)
            v94 = v7->f64[0] + *(double *)v208;
          else
            v94 = v7->f64[0];
          *(double *)v208 = v94;
        }
        else if (a5 && v93 == 475)
        {
          v176 = vld1q_dup_f64(v7->f64);
          v177 = (int8x16_t)vdupq_n_s64(0x8000000000000000);
          if ((_DWORD)a4)
            v178 = -1;
          else
            v178 = 0;
          v206 = (int8x16_t)vaddq_f64(v176, (float64x2_t)vbslq_s8((int8x16_t)vdupq_n_s64(v178), v206, v177));
        }
        else if ((unint64_t)a5 >= 2 && v93 == 561)
        {
          if ((a4 & 1) != 0)
            v186 = vaddq_f64(*v7, v207);
          else
            v186 = *v7;
          v207 = v186;
        }
      }
      v203 = *(float64x2_t *)&v208[8];
      v204 = *(float64x2_t *)&v208[24];
      v205 = v207;
      if (*(double *)v208 != 0.0)
        CA::Mat2Impl::mat2_rotate(&v203, v92, *(double *)v208);
      if (*(double *)v206.i64 != 1.0 || *(double *)&v206.i64[1] != 1.0)
      {
        v203 = vmulq_n_f64(v203, *(double *)v206.i64);
        v204 = vmulq_n_f64(v204, *(double *)&v206.i64[1]);
      }
      *(float64x2_t *)&v202.a = v203;
      *(float64x2_t *)&v202.c = v204;
      *(float64x2_t *)&v202.tx = v205;
      if (CGAffineTransformIsIdentity(&v202))
      {
        CA::Render::Layer::set_contents_transform((unsigned int *)this, 0);
        return;
      }
      v114 = (CA::Render::Vector *)CA::Render::Vector::new_affine_transform((CA::Render::Vector *)&v203, v199);
      CA::Render::Layer::set_contents_transform((unsigned int *)this, v114);
      if (!v114)
        return;
      v200 = (unsigned int *)((char *)v114 + 8);
      do
      {
        v201 = __ldaxr(v200);
        v117 = --v201 == 0;
      }
      while (__stlxr(v201, v200));
    }
    else
    {
      if (v16 <= 535)
      {
        if (v16 == 491)
        {
          v50 = *((_QWORD *)this + 16);
          if (v50)
          {
            v51 = *(float *)(v50 + 216);
            v52 = *(float *)(v50 + 220);
          }
          else
          {
            v52 = -3.0;
            v51 = 0.0;
          }
          if ((_DWORD)a3 == 2)
          {
            v128 = *v17;
            if (a5 && v128 == 593)
            {
              if (!(_DWORD)a4)
                v51 = -0.0;
              v51 = *a6 + v51;
            }
            else if (a5 && v128 == 250)
            {
              if (!(_DWORD)a4)
                v52 = -0.0;
              v52 = *a6 + v52;
            }
          }
          v171 = v51;
          v172 = v52;
          if (v50 || v171 != 0.0 || v172 != -3.0)
          {
            v173 = (float *)CA::Render::Layer::ensure_ext(this);
            v173[54] = v171;
            v173[55] = v172;
          }
          return;
        }
        if (v16 == 535)
        {
          v20 = *((_QWORD *)this + 16);
          if (v20)
            v21 = *(CA::Render **)(v20 + 24);
          else
            v21 = 0;
          v114 = (CA::Render::Vector *)CA::Render::set_transform_property(v21, (CA::Render::Vector *)((char *)a3 - 1), (int *)a2 + 1, a4, (unint64_t)a5, (uint64_t)a6, a7);
          CA::Render::Layer::set_sublayer_transform((unsigned int *)this, v114);
          if (!v114)
            return;
          v115 = (unsigned int *)((char *)v114 + 8);
          do
          {
            v116 = __ldaxr(v115);
            v117 = --v116 == 0;
          }
          while (__stlxr(v116, v115));
          goto LABEL_445;
        }
        goto LABEL_115;
      }
      if (v16 != 536)
      {
        if (v16 == 557)
        {
          v41 = *((_QWORD *)this + 16);
          if (v41)
            v42 = *(CA::Render **)(v41 + 16);
          else
            v42 = 0;
          v114 = (CA::Render::Vector *)CA::Render::set_transform_property(v42, (CA::Render::Vector *)((char *)a3 - 1), (int *)a2 + 1, a4, (unint64_t)a5, (uint64_t)a6, a7);
          CA::Render::Layer::set_transform((unsigned int *)this, v114);
          if (!v114)
            return;
          v126 = (unsigned int *)((char *)v114 + 8);
          do
          {
            v127 = __ldaxr(v126);
            v117 = --v127 == 0;
          }
          while (__stlxr(v127, v126));
          goto LABEL_445;
        }
        goto LABEL_115;
      }
      v73 = (unsigned int *)*((_QWORD *)this + 13);
      if ((*((_BYTE *)this + 13) & 0x20) != 0)
      {
        if (v73
          && CA::Render::atom_is_single_sublayer((CA::Render *)*v17, *((_QWORD *)this + 13), (CA::Render::Layer *)a3))
        {
          v99 = (CA::Render::Layer *)x_mem_alloc0(0x98uLL);
          if (v99)
          {
            v100 = v99;
            v101 = (CA::Render::Layer *)CA::Render::Layer::Layer((uint64_t)v99, (const CA::Render::Layer *)v73);
            CA::Render::Layer::set_property_value(v101, a2 + 2, (unint64_t)a3 - 2, (BOOL)a4, (unint64_t)a5, v7->f64);
            CA::Render::Layer::evaluate_container((uint64_t)v100, v102);
            CA::Render::Layer::set_single_sublayer(this, v100);
            v103 = (unsigned int *)((char *)v100 + 8);
            do
            {
              v104 = __ldaxr(v103);
              v105 = v104 - 1;
            }
            while (__stlxr(v105, v103));
            if (!v105)
              (*(void (**)(CA::Render::Layer *))(*(_QWORD *)v100 + 16))(v100);
          }
          else
          {
            CA::Render::Layer::set_property_value(0, a2 + 2, (unint64_t)a3 - 2, (BOOL)a4, (unint64_t)a5, v7->f64);
            CA::Render::Layer::evaluate_container(0, v196);
            CA::Render::Layer::set_single_sublayer(this, 0);
          }
        }
        return;
      }
      if (!v73)
        return;
      named_object = CA::Render::TypedArray<CA::Render::Layer>::find_named_object(*((_QWORD *)this + 13), *v17);
      if ((named_object & 0x80000000) != 0)
        return;
      v75 = named_object;
      v76 = x_mem_alloc0(0x98uLL);
      v77 = (uint64_t)v76;
      if (v76)
      {
        v78 = (CA::Render::Layer *)CA::Render::Layer::Layer((uint64_t)v76, *(const CA::Render::Layer **)&v73[2 * v75 + 6]);
        CA::Render::Layer::set_property_value(v78, a2 + 2, (unint64_t)a3 - 2, (BOOL)a4, (unint64_t)a5, v7->f64);
        v80 = v77;
      }
      else
      {
        CA::Render::Layer::set_property_value(0, a2 + 2, (unint64_t)a3 - 2, (BOOL)a4, (unint64_t)a5, v7->f64);
        v80 = 0;
      }
      CA::Render::Layer::evaluate_container(v80, v79);
      v114 = (CA::Render::Vector *)CA::Render::Array::new_array((CA::Render::Array *)v73[4], v73 + 6, (CA::Render::Object *const *)1, 0);
      v187 = (char *)v114 + 8 * v75;
      v190 = (unsigned int *)*((_QWORD *)v187 + 3);
      v189 = (uint64_t *)(v187 + 24);
      v188 = v190;
      if (v190)
      {
        v191 = v188 + 2;
        do
        {
          v192 = __ldaxr(v191);
          v193 = v192 - 1;
        }
        while (__stlxr(v193, v191));
        if (!v193)
          (*(void (**)(unsigned int *))(*(_QWORD *)v188 + 16))(v188);
      }
      *v189 = v77;
      CA::Render::Layer::set_sublayers((uint64_t)this, (uint64_t)v114);
      v194 = (unsigned int *)((char *)v114 + 8);
      do
      {
        v195 = __ldaxr(v194);
        v117 = --v195 == 0;
      }
      while (__stlxr(v195, v194));
    }
LABEL_445:
    if (v117)
      (*(void (**)(CA::Render::Vector *))(*(_QWORD *)v114 + 16))(v114);
    return;
  }
  if (v16 <= 71)
  {
    if (v16 == 25)
    {
      v53 = *((_QWORD *)this + 16);
      if (v53)
      {
        v55 = *(double *)(v53 + 168);
        v54 = *(double *)(v53 + 176);
      }
      else
      {
        v54 = 0.0;
        if ((*((_BYTE *)this + 45) & 0x40) == 0)
          v54 = 0.5;
        v55 = v54;
      }
      *(double *)v206.i64 = v55;
      *(double *)&v206.i64[1] = v54;
      if ((_DWORD)a3 == 2)
      {
        v129 = *v17;
        if (a5 && v129 == 596)
        {
          if (!(_DWORD)a4)
            v55 = 0.0;
          *(double *)v206.i64 = *a6 + v55;
        }
        else if (a5 && v129 == 600)
        {
          if (!(_DWORD)a4)
            v54 = 0.0;
          *(double *)&v206.i64[1] = *a6 + v54;
        }
      }
      CA::Render::Layer::set_anchor_point(this, (uint64_t)&v206);
      return;
    }
    if (v16 == 53)
    {
      v56 = *((_QWORD *)this + 16);
      if (v56)
      {
        v57 = *(double *)(v56 + 152);
        v58 = *(double *)(v56 + 160);
      }
      else
      {
        v57 = 0.0;
        v58 = 0.0;
      }
      if ((_DWORD)a3 == 2)
      {
        v130 = *v17;
        if (a5 && v130 == 596)
        {
          v131 = -0.0;
          if ((_DWORD)a4)
            v131 = v57;
          v57 = *a6 + v131;
        }
        else if (a5 && v130 == 600)
        {
          v174 = -0.0;
          if ((_DWORD)a4)
            v174 = v58;
          v58 = *a6 + v174;
        }
      }
      v175 = (double *)CA::Render::Layer::ensure_ext(this);
      v175[19] = v57;
      v175[20] = v58;
      return;
    }
    if (v16 != 54)
      goto LABEL_115;
    v34 = *((_QWORD *)this + 16);
    if (v34)
      v35 = *(_QWORD *)(v34 + 104);
    else
      v35 = 0;
    v118 = CA::Render::set_list_property<CA::Render::Filter>(v35, (unint64_t)a3 - 1, (uint64_t)(a2 + 1), (int)a4, a5, a6);
    v119 = v118;
    v120 = *((_QWORD *)this + 16);
    if (v120)
      v120 = *(_QWORD *)(v120 + 104);
    if (v118 == (_DWORD *)v120)
      return;
    v121 = CA::Render::Layer::ensure_ext(this);
    v110 = (unsigned int *)v121[13];
    v121[13] = v119;
    if (!v110)
      return;
    v122 = v110 + 2;
    do
    {
      v123 = __ldaxr(v122);
      v113 = --v123 == 0;
    }
    while (__stlxr(v123, v122));
    goto LABEL_233;
  }
  if (v16 > 118)
  {
    if (v16 == 119)
    {
      v71 = *((_QWORD *)this + 16);
      if (v71)
        v72 = *(CA::Render **)(v71 + 48);
      else
        v72 = 0;
      v114 = (CA::Render::Vector *)CA::Render::set_rect_vector_property(v72, (Rect *)((char *)a3 - 1), (int *)a2 + 1, a4, (unint64_t)a5, a6, a7);
      CA::Render::Layer::set_contents_center((unsigned int *)this, v114);
      if (!v114)
        return;
      v138 = (unsigned int *)((char *)v114 + 8);
      do
      {
        v139 = __ldaxr(v138);
        v117 = --v139 == 0;
      }
      while (__stlxr(v139, v138));
      goto LABEL_445;
    }
    if (v16 == 133)
    {
      v39 = *((_QWORD *)this + 16);
      if (v39)
        v40 = *(CA::Render **)(v39 + 40);
      else
        v40 = 0;
      v114 = (CA::Render::Vector *)CA::Render::set_rect_vector_property(v40, (Rect *)((char *)a3 - 1), (int *)a2 + 1, a4, (unint64_t)a5, a6, a7);
      CA::Render::Layer::set_contents_rect((unsigned int *)this, v114);
      if (!v114)
        return;
      v124 = (unsigned int *)((char *)v114 + 8);
      do
      {
        v125 = __ldaxr(v124);
        v117 = --v125 == 0;
      }
      while (__stlxr(v125, v124));
      goto LABEL_445;
    }
LABEL_115:
    v81 = (_QWORD *)*((_QWORD *)this + 16);
    if (v81)
    {
      if (*v81)
      {
        v82 = *CA::Render::Layer::ensure_ext(this);
        if (v82)
          (*(void (**)(uint64_t, double *, const unsigned int *, const unsigned int *, CA::Render::Vector *, float64x2_t *))(*(_QWORD *)v82 + 144))(v82, a3, a2, a4, a5, v7);
      }
    }
    return;
  }
  if (v16 == 72)
  {
    v48 = *((float64x2_t *)this + 5);
    v206 = *((int8x16_t *)this + 4);
    v207 = v48;
    CA::Render::set_rect_property((double *)v206.i64, (Rect *)((char *)a3 - 1), (int *)a2 + 1, a4, (unint64_t)a5, a6, a7);
    v49 = v207;
    *((int8x16_t *)this + 4) = v206;
    *((float64x2_t *)this + 5) = v49;
    return;
  }
  if (v16 != 111)
    goto LABEL_115;
  v18 = *((_QWORD *)this + 16);
  if (v18)
    v19 = *(_QWORD *)(v18 + 88);
  else
    v19 = 0;
  v106 = CA::Render::set_object_property<CA::Render::Filter>(v19, (uint64_t)a3 - 1, (const double *)(a2 + 1), (int)a4, a5, a6);
  v107 = v106;
  v108 = (CA::Render::Filter *)*((_QWORD *)this + 16);
  if (v108)
    v108 = (CA::Render::Filter *)*((_QWORD *)v108 + 11);
  if (v106 != v108)
  {
    v109 = CA::Render::Layer::ensure_ext(this);
    v110 = (unsigned int *)v109[11];
    v109[11] = v107;
    if (v110)
    {
      v111 = v110 + 2;
      do
      {
        v112 = __ldaxr(v111);
        v113 = --v112 == 0;
      }
      while (__stlxr(v112, v111));
      goto LABEL_233;
    }
  }
}

uint64_t CA::Render::VelocityState::set_keypath_velocity(uint64_t this, void *const *a2, CA::Render::Function *a3, int a4, unint64_t a5, CA::Mat4Impl *a6, double *a7, int a8, __n128 a9)
{
  char v9;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  _BOOL4 v19;
  _BOOL4 v20;
  unint64_t v21;
  unint64_t *i;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double *v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  int v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  char v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  int v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  _QWORD v110[3];

  v9 = a8;
  v15 = this;
  v110[2] = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    LODWORD(v18) = 0;
    v19 = 0;
    v16 = 0;
    LODWORD(v110[1]) = 0;
    v110[0] = 0;
    goto LABEL_8;
  }
  if ((a2 & 1) == 0)
  {
    v16 = *(unsigned int *)a2;
    if (v16 >= 4)
    {
      if ((*(_BYTE *)(this + 121) & 8) == 0)
        *(_BYTE *)(this + 124) = 1;
      v17 = 2048;
      goto LABEL_186;
    }
    LODWORD(v110[1]) = 0;
    v110[0] = 0;
    v23 = *(unsigned int *)a2;
    if ((_DWORD)v23)
    {
      v24 = 0;
      v25 = 4 * v23;
      do
      {
        *(_DWORD *)((char *)v110 + v24) = *(_DWORD *)((char *)a2 + v24 + 4);
        v24 += 4;
      }
      while (v25 != v24);
      LODWORD(v18) = v110[0];
      goto LABEL_22;
    }
    LODWORD(v18) = 0;
    v19 = 0;
LABEL_8:
    v20 = a5 == 16;
    goto LABEL_9;
  }
  v18 = (unint64_t)a2 >> 1;
  LODWORD(v110[1]) = 0;
  v110[0] = ((unint64_t)a2 >> 1);
  v16 = 1;
LABEL_22:
  v19 = v16 == 1 && (_DWORD)v18 == 557;
  v20 = a5 == 16;
  if (a5 == 16 && v19)
  {
    if (!a3)
    {
      if (!a8)
      {
        v40 = (double *)(this + 88);
        goto LABEL_50;
      }
LABEL_35:
      v28 = *(double *)a6;
      v29 = *(double *)(v15 + 72);
      v30 = *(double *)(v15 + 80);
      v31 = *(double *)(v15 + 64);
      v32 = v29 * *(double *)a6 + *(double *)(v15 + 56) * *a7;
      if (!a4)
        v29 = 1.0;
      *(double *)(v15 + 72) = v29 * *a7;
      if (a4)
        v33 = v32;
      else
        v33 = v28;
      *(double *)(v15 + 56) = v33;
      v34 = a7[1];
      v35 = *((double *)a6 + 1);
      if (a4)
        v36 = v30;
      else
        v36 = 1.0;
      *(double *)(v15 + 80) = v36 * v34;
      v37 = v30 * v35 + v31 * v34;
      if (!a4)
        v37 = v35;
      *(double *)(v15 + 64) = v37;
      if ((a4 & 1) != 0)
      {
        v38 = *(double *)(v15 + 96);
        *(double *)(v15 + 88) = *((double *)a6 + 2) + *(double *)(v15 + 88);
        *(double *)(v15 + 96) = *((double *)a6 + 3) + v38;
        v39 = *((double *)a6 + 4) + *(double *)(v15 + 112);
      }
      else
      {
        *(_QWORD *)(v15 + 88) = *((_QWORD *)a6 + 2);
        *(_QWORD *)(v15 + 96) = *((_QWORD *)a6 + 3);
        v39 = *((double *)a6 + 4);
      }
      *(double *)(v15 + 112) = v39;
      v50 = 368;
      goto LABEL_185;
    }
    v20 = 1;
    LODWORD(v18) = 557;
    goto LABEL_32;
  }
LABEL_9:
  if (!a5)
    return this;
  v21 = a5;
  for (i = (unint64_t *)a6; ; ++i)
  {
    a9.n128_u64[0] = *i;
    if (*(double *)i != 0.0)
      break;
    if (!--v21)
      return this;
  }
  if (a3)
  {
    if (!v19)
    {
      LODWORD(v110[0]) = 0;
      goto LABEL_180;
    }
LABEL_32:
    switch((*(unsigned int (**)(CA::Render::Function *, __n128))(*(_QWORD *)a3 + 120))(a3, a9))
    {
      case 0xFFFFFFFF:
        LODWORD(v18) = 0;
        LODWORD(v110[0]) = 0;
        goto LABEL_162;
      case 0u:
      case 1u:
      case 2u:
        v27 = 470;
        goto LABEL_70;
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
        v27 = 475;
        goto LABEL_70;
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
        v27 = 561;
LABEL_70:
        HIDWORD(v110[0]) = v27;
        v16 = 2;
        break;
      default:
LABEL_162:
        v16 = 1;
        break;
    }
    this = (*(uint64_t (**)(CA::Render::Function *))(*(_QWORD *)a3 + 120))(a3);
    if (this < 0xD)
      *((_DWORD *)v110 + v16++) = dword_184763604[(int)this];
  }
  if ((int)v18 > 556)
  {
    if ((_DWORD)v18 != 557)
    {
      if ((_DWORD)v18 == 604)
      {
        if ((a4 & 1) != 0)
          v56 = *(double *)a6 + *(double *)(v15 + 104);
        else
          v56 = *(double *)a6;
        *(double *)(v15 + 104) = v56;
        v50 = 128;
        goto LABEL_185;
      }
LABEL_180:
      if ((*(_BYTE *)(v15 + 121) & 8) == 0)
      {
        v73 = 1;
        goto LABEL_182;
      }
      goto LABEL_183;
    }
    v40 = (double *)(v15 + 88);
    switch(v16)
    {
      case 3:
        if (HIDWORD(v110[0]) == 561)
        {
          if (LODWORD(v110[1]) == 600)
          {
            if ((a4 & 1) == 0)
            {
              v103 = *(double *)a6;
              goto LABEL_238;
            }
            v101 = *(double *)(v15 + 96);
            v102 = *(double *)a6;
            goto LABEL_220;
          }
          if (LODWORD(v110[1]) != 596)
            goto LABEL_180;
          if ((a4 & 1) != 0)
            v98 = *(double *)a6 + *v40;
          else
            v98 = *(double *)a6;
          *v40 = v98;
LABEL_239:
          v50 = 64;
          goto LABEL_185;
        }
        if (HIDWORD(v110[0]) == 475)
        {
          if (LODWORD(v110[1]) == 600)
          {
            v104 = *a7;
            v105 = *(double *)a6;
            v106 = *(double *)(v15 + 80);
            v107 = *(double *)(v15 + 64);
            v108 = 1.0;
            if (a4)
              v108 = *(double *)(v15 + 80);
            *(double *)(v15 + 80) = v108 * v104;
            v109 = v106 * v105 + v107 * v104;
            if (!a4)
              v109 = v105;
            *(double *)(v15 + 64) = v109;
            v50 = 32;
            goto LABEL_185;
          }
          if (LODWORD(v110[1]) != 599)
          {
            if (LODWORD(v110[1]) == 596)
            {
              v78 = *a7;
              v79 = *(double *)a6;
              v80 = *(double *)(v15 + 72);
              v81 = *(double *)(v15 + 56);
              v82 = 1.0;
              if (a4)
                v82 = *(double *)(v15 + 72);
              *(double *)(v15 + 72) = v82 * v78;
              v83 = v80 * v79 + v81 * v78;
              if (!a4)
                v83 = v79;
              *(double *)(v15 + 56) = v83;
              v50 = 16;
              goto LABEL_185;
            }
            goto LABEL_180;
          }
LABEL_149:
          v84 = *(double *)a6;
          v85 = *(double *)(v15 + 72);
          v86 = *(double *)(v15 + 80);
          v87 = *(double *)(v15 + 64);
          v88 = v85 * *(double *)a6 + *(double *)(v15 + 56) * *a7;
          if (!a4)
            v85 = 1.0;
          *(double *)(v15 + 72) = v85 * *a7;
          if (a4)
            v89 = v88;
          else
            v89 = v84;
          *(double *)(v15 + 56) = v89;
          v90 = *a7;
          v91 = *(double *)a6;
          if (a4)
            v92 = v86;
          else
            v92 = 1.0;
          *(double *)(v15 + 80) = v92 * v90;
          v93 = v86 * v91 + v87 * v90;
          if (!a4)
            v93 = v91;
          *(double *)(v15 + 64) = v93;
          v50 = 48;
          goto LABEL_185;
        }
        v50 = 0;
        if (*(_QWORD *)((char *)v110 + 4) != 0x25A000001D6)
          goto LABEL_185;
        break;
      case 2:
        if (HIDWORD(v110[0]) != 470)
        {
          if (HIDWORD(v110[0]) != 561)
          {
            if (HIDWORD(v110[0]) != 475)
              goto LABEL_160;
            goto LABEL_149;
          }
          if (a4)
          {
            *v40 = *(double *)a6 + *v40;
            if (a5 > 1)
            {
              v101 = *(double *)(v15 + 96);
              v102 = *((double *)a6 + 1);
LABEL_220:
              v103 = v102 + v101;
              goto LABEL_238;
            }
          }
          else
          {
            *v40 = *(double *)a6;
            if (a5 >= 2)
            {
              v103 = *((double *)a6 + 1);
LABEL_238:
              *(double *)(v15 + 96) = v103;
              goto LABEL_239;
            }
          }
          goto LABEL_239;
        }
        break;
      case 1:
        if ((v9 & 1) == 0)
        {
          if (!v20)
          {
            if (a5 != 6)
              goto LABEL_160;
            if (*((double *)a6 + 1) == 0.0 && *((double *)a6 + 2) == 0.0)
            {
              v61 = *(double *)a6;
              if (*(double *)a6 == 0.0 && *((double *)a6 + 3) == 0.0)
              {
                v50 = 0;
              }
              else
              {
                v62 = *(double *)(v15 + 72);
                v63 = *(double *)(v15 + 80);
                v64 = *(double *)(v15 + 64);
                v65 = v62 * v61 + *(double *)(v15 + 56) * *a7;
                if (!a4)
                  v62 = 1.0;
                *(double *)(v15 + 72) = v62 * *a7;
                if (a4)
                  v61 = v65;
                *(double *)(v15 + 56) = v61;
                v66 = a7[3];
                v67 = *((double *)a6 + 3);
                if (a4)
                  v68 = v63;
                else
                  v68 = 1.0;
                *(double *)(v15 + 80) = v68 * v66;
                v69 = v63 * v67 + v64 * v66;
                if (!a4)
                  v69 = v67;
                *(double *)(v15 + 64) = v69;
                v50 = 48;
              }
              v70 = *((double *)a6 + 4);
              if (v70 != 0.0 || *((double *)a6 + 5) != 0.0)
              {
                if ((a4 & 1) != 0)
                {
                  v71 = *(double *)(v15 + 96);
                  *(double *)(v15 + 88) = *(double *)(v15 + 88) + v70;
                  v72 = *((double *)a6 + 5) + v71;
                }
                else
                {
                  *v40 = v70;
                  v72 = *((double *)a6 + 5);
                }
                *(double *)(v15 + 96) = v72;
                v50 |= 0x40u;
              }
              goto LABEL_185;
            }
            goto LABEL_116;
          }
LABEL_50:
          this = CA::Mat4Impl::mat4_is_affine_with_z_transform(a6, (const double *)a2);
          if ((_DWORD)this && *((double *)a6 + 1) == 0.0 && *((double *)a6 + 4) == 0.0)
          {
            v41 = *(double *)a6;
            if (*(double *)a6 == 0.0 && *((double *)a6 + 5) == 0.0)
            {
              v50 = 0;
            }
            else
            {
              v42 = *(double *)(v15 + 72);
              v43 = *(double *)(v15 + 80);
              v44 = *(double *)(v15 + 64);
              v45 = v42 * v41 + *(double *)(v15 + 56) * *a7;
              if (!a4)
                v42 = 1.0;
              *(double *)(v15 + 72) = v42 * *a7;
              if (a4)
                v41 = v45;
              *(double *)(v15 + 56) = v41;
              v46 = a7[5];
              v47 = *((double *)a6 + 5);
              if (a4)
                v48 = v43;
              else
                v48 = 1.0;
              *(double *)(v15 + 80) = v48 * v46;
              v49 = v43 * v47 + v44 * v46;
              if (!a4)
                v49 = v47;
              *(double *)(v15 + 64) = v49;
              v50 = 48;
            }
            v51 = *((double *)a6 + 12);
            if (v51 != 0.0 || *((double *)a6 + 13) != 0.0)
            {
              if ((a4 & 1) != 0)
              {
                v52 = *(double *)(v15 + 96);
                *(double *)(v15 + 88) = *(double *)(v15 + 88) + v51;
                v53 = *((double *)a6 + 13) + v52;
              }
              else
              {
                *v40 = v51;
                v53 = *((double *)a6 + 13);
              }
              *(double *)(v15 + 96) = v53;
              v50 |= 0x40u;
            }
            if (*((double *)a6 + 10) == 0.0 && *((double *)a6 + 14) == 0.0)
              goto LABEL_185;
            v99 = *(_DWORD *)(v15 + 120) | 0x400;
            goto LABEL_184;
          }
LABEL_116:
          if ((*(_BYTE *)(v15 + 121) & 8) == 0)
          {
            v73 = 3;
LABEL_182:
            *(_BYTE *)(v15 + 124) = v73;
          }
LABEL_183:
          v50 = 0;
          v99 = 2048;
LABEL_184:
          *(_DWORD *)(v15 + 120) = v99;
          goto LABEL_185;
        }
        goto LABEL_35;
      default:
        goto LABEL_160;
    }
    if ((a4 & 1) != 0)
      v100 = *(double *)a6 + *(double *)(v15 + 112);
    else
      v100 = *(double *)a6;
    *(double *)(v15 + 112) = v100;
    v50 = 256;
    goto LABEL_185;
  }
  if ((_DWORD)v18 == 72)
  {
    if (v16 == 3)
    {
      if (HIDWORD(v110[0]) != 502)
      {
        if (HIDWORD(v110[0]) != 407)
          goto LABEL_160;
        if (LODWORD(v110[1]) != 600)
        {
          if (LODWORD(v110[1]) == 596)
          {
            if ((a4 & 1) != 0)
              v75 = *(double *)a6 + *(double *)(v15 + 24);
            else
              v75 = *(double *)a6;
            *(double *)(v15 + 24) = v75;
          }
          goto LABEL_201;
        }
        if ((a4 & 1) != 0)
          v77 = *(double *)a6 + *(double *)(v15 + 32);
        else
          v77 = *(double *)a6;
LABEL_200:
        *(double *)(v15 + 32) = v77;
LABEL_201:
        v50 = 4;
        goto LABEL_185;
      }
      if (LODWORD(v110[1]) != 250)
      {
        if (LODWORD(v110[1]) == 593)
        {
          if ((a4 & 1) != 0)
            v97 = *(double *)a6 + *(double *)(v15 + 40);
          else
            v97 = *(double *)a6;
          *(double *)(v15 + 40) = v97;
        }
        goto LABEL_236;
      }
      if ((a4 & 1) != 0)
        v95 = *(double *)a6 + *(double *)(v15 + 48);
      else
        v95 = *(double *)a6;
    }
    else
    {
      if (v16 != 2)
      {
        if (v16 == 1 && a5 >= 4)
        {
          if ((a4 & 1) != 0)
          {
            v57 = *(double *)(v15 + 32);
            *(double *)(v15 + 24) = *(double *)a6 + *(double *)(v15 + 24);
            *(double *)(v15 + 32) = *((double *)a6 + 1) + v57;
            v58 = *(double *)(v15 + 48);
            *(double *)(v15 + 40) = *((double *)a6 + 2) + *(double *)(v15 + 40) - *(double *)a6;
            v59 = *((double *)a6 + 1);
            v60 = *((double *)a6 + 3) + v58;
          }
          else
          {
            *(_QWORD *)(v15 + 24) = *(_QWORD *)a6;
            *(_QWORD *)(v15 + 32) = *((_QWORD *)a6 + 1);
            *(double *)(v15 + 40) = *((double *)a6 + 2) - *(double *)a6;
            v60 = *((double *)a6 + 3);
            v59 = *((double *)a6 + 1);
          }
          *(double *)(v15 + 48) = v60 - v59;
          v50 = 12;
          goto LABEL_185;
        }
        goto LABEL_160;
      }
      if (a5 >= 2 && HIDWORD(v110[0]) == 407)
      {
        if ((a4 & 1) != 0)
        {
          v76 = *(double *)(v15 + 32);
          *(double *)(v15 + 24) = *(double *)a6 + *(double *)(v15 + 24);
          v77 = *((double *)a6 + 1) + v76;
        }
        else
        {
          *(_QWORD *)(v15 + 24) = *(_QWORD *)a6;
          v77 = *((double *)a6 + 1);
        }
        goto LABEL_200;
      }
      v50 = 0;
      if (a5 < 2 || HIDWORD(v110[0]) != 502)
        goto LABEL_185;
      if ((a4 & 1) != 0)
      {
        v94 = *(double *)(v15 + 48);
        *(double *)(v15 + 40) = *(double *)a6 + *(double *)(v15 + 40);
        v95 = *((double *)a6 + 1) + v94;
      }
      else
      {
        *(_QWORD *)(v15 + 40) = *(_QWORD *)a6;
        v95 = *((double *)a6 + 1);
      }
    }
    *(double *)(v15 + 48) = v95;
LABEL_236:
    v50 = 8;
    goto LABEL_185;
  }
  if ((_DWORD)v18 != 429)
    goto LABEL_180;
  if (v16 == 2)
  {
    if (HIDWORD(v110[0]) == 600)
    {
      if ((a4 & 1) != 0)
        v96 = *(double *)a6 + *(double *)(v15 + 16);
      else
        v96 = *(double *)a6;
      *(double *)(v15 + 16) = v96;
      v50 = 2;
      goto LABEL_185;
    }
    if (HIDWORD(v110[0]) == 596)
    {
      if ((a4 & 1) != 0)
        v74 = *(double *)a6 + *(double *)(v15 + 8);
      else
        v74 = *(double *)a6;
      *(double *)(v15 + 8) = v74;
      v50 = 1;
      goto LABEL_185;
    }
  }
  else if (v16 == 1 && a5 >= 2)
  {
    if (a4)
    {
      v54 = *(double *)(v15 + 16);
      *(double *)(v15 + 8) = *(double *)a6 + *(double *)(v15 + 8);
      *(double *)(v15 + 16) = *((double *)a6 + 1) + v54;
      if (a5 > 2)
      {
        v55 = *((double *)a6 + 2) + *(double *)(v15 + 104);
LABEL_171:
        *(double *)(v15 + 104) = v55;
        v50 = 131;
        goto LABEL_185;
      }
    }
    else
    {
      *(_QWORD *)(v15 + 8) = *(_QWORD *)a6;
      *(_QWORD *)(v15 + 16) = *((_QWORD *)a6 + 1);
      if (a5 >= 3)
      {
        v55 = *((double *)a6 + 2);
        goto LABEL_171;
      }
    }
    v50 = 3;
    goto LABEL_185;
  }
LABEL_160:
  v50 = 0;
LABEL_185:
  v17 = *(_DWORD *)(v15 + 120) | v50;
LABEL_186:
  *(_DWORD *)(v15 + 120) = v17;
  return this;
}

uint64_t CA::Render::PropertyAnimation::apply_velocity_state(CA::Render::Animation *a1, uint64_t a2)
{
  char v4;
  _BOOL4 v5;
  _BOOL4 v6;
  uint64_t v7;
  unint64_t v8;

  v4 = *(_BYTE *)(a2 + 178);
  v5 = CA::Render::Animation::affects_velocity(a1);
  v6 = v5;
  if ((v4 & 1) == 0)
  {
    v7 = 0;
    goto LABEL_12;
  }
  v7 = a2 + 48;
  v8 = *((_QWORD *)a1 + 12);
  if (v8)
  {
    if ((v8 & 1) != 0)
    {
      v8 >>= 1;
    }
    else
    {
      if (!*(_DWORD *)v8)
        goto LABEL_12;
      LODWORD(v8) = *(_DWORD *)(v8 + 4);
    }
    if ((_DWORD)v8 == 557)
    {
      if (v5)
        CA::Render::VelocityState::init_scale((CA::Render::VelocityState *)(a2 + 48), *(const CA::Render::Layer **)(a2 + 40));
      else
        *(_DWORD *)(a2 + 168) |= 0x200u;
    }
  }
LABEL_12:
  if (v6)
    return v7;
  else
    return 0;
}

double CA::Render::BasicAnimation0::interpolate_vector(CA::Render::BasicAnimation0 *this, uint64_t a2, float64x2_t *a3, double *a4, double *a5, double *a6, double *a7, const CA::Render::ValueInterpolator *a8)
{
  double *v8;
  float64x2_t *v9;
  uint64_t v10;
  double v12;
  double v13;
  double result;
  double v15;

  v8 = a5;
  v9 = a3;
  v10 = a2;
  if (a2 == 2)
  {
    v12 = *((double *)this + 17);
    v13 = *((double *)this + 18);
    if (v12 != 0.0 || v13 != 0.0)
    {
      *(_QWORD *)&result = *(_OWORD *)&CA::Render::point_interpolate(a3, (double *)2, a3->f64, a4, *(float64x2_t *)a5, *(float64x2_t *)a6, *(double *)a8, v12, v13);
      return result;
    }
    a2 = 2;
  }
  CA::Render::PropertyAnimation::interpolate_vector(this, a2, a3->f64, a4, a5, a6, a7, a8);
  if ((*((_BYTE *)this + 15) & 1) != 0 && v10)
  {
    do
    {
      v15 = *v8++;
      result = round(v9->f64[0] - v15) + v15;
      v9->f64[0] = result;
      v9 = (float64x2_t *)((char *)v9 + 8);
      --v10;
    }
    while (v10);
  }
  return result;
}

double *CA::Render::PropertyAnimation::interpolate_vector(CA::Render::PropertyAnimation *this, uint64_t a2, double *a3, double *a4, double *a5, double *a6, double *a7, const CA::Render::ValueInterpolator *a8)
{
  BOOL v8;
  double v9;
  double v10;
  double v11;
  double *result;

  if (*((_BYTE *)a8 + 112))
    v8 = ((unint64_t)a4 | (unint64_t)a7) == 0;
  else
    v8 = 1;
  if (!v8)
    return CA::Render::ValueInterpolator::mix_n<double>((double *)a8, a2, a3, a4, a5, a6, a7);
  for (; a2; --a2)
  {
    v9 = *a5++;
    v10 = v9;
    v11 = *a6++;
    *a3++ = v10 + *(double *)a8 * (v11 - v10);
  }
  return result;
}

double CA::Render::SpringAnimation::time_function(CA::Render::SpringAnimation *this, double a2)
{
  uint64_t v2;
  double v3;

  v2 = *((_QWORD *)this + 5);
  if (v2)
    v3 = *(double *)(v2 + 32);
  else
    v3 = INFINITY;
  return CA::Render::SpringAnimation::State::eval((CA::Render::SpringAnimation *)((char *)this + 192), v3 * a2);
}

uint64_t CA::Render::LayerSubclass::keypath_is_object(CA::Render::LayerSubclass *this, void *const *a2)
{
  return 0;
}

double *CA::Render::set_rect_property(double *this, Rect *a2, int *a3, const unsigned int *a4, unint64_t a5, double *a6, const double *a7)
{
  int v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  int v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  int v19;

  v7 = *a3;
  if ((_DWORD)a2 == 1)
  {
    if (a5 >= 2 && v7 == 407)
    {
      v8 = *a6;
      if ((a4 & 1) != 0)
      {
        v9 = this[1];
        *this = *this + v8;
        v10 = v9 + a6[1];
      }
      else
      {
        *this = v8;
        v10 = a6[1];
      }
      this[1] = v10;
    }
    else if (a5 >= 2 && v7 == 502)
    {
      v14 = *a6;
      if ((a4 & 1) != 0)
      {
        v15 = this[3];
        this[2] = this[2] + v14;
        v16 = v15 + a6[1];
      }
      else
      {
        this[2] = v14;
        v16 = a6[1];
      }
      this[3] = v16;
    }
  }
  else if (v7 == 502)
  {
    v17 = this[2];
    v18 = this[3];
    if ((_DWORD)a2 == 2)
    {
      v19 = a3[1];
      if (a5 && v19 == 593)
      {
        if (!(_DWORD)a4)
          v17 = -0.0;
        v17 = *a6 + v17;
      }
      else if (a5 && v19 == 250)
      {
        if (!(_DWORD)a4)
          v18 = -0.0;
        v18 = *a6 + v18;
      }
    }
    this[2] = v17;
    this[3] = v18;
  }
  else if (v7 == 407)
  {
    v11 = *this;
    v12 = this[1];
    if ((_DWORD)a2 == 2)
    {
      v13 = a3[1];
      if (a5 && v13 == 596)
      {
        if (!(_DWORD)a4)
          v11 = -0.0;
        v11 = *a6 + v11;
      }
      else if (a5 && v13 == 600)
      {
        if (!(_DWORD)a4)
          v12 = -0.0;
        v12 = *a6 + v12;
      }
    }
    *this = v11;
    this[1] = v12;
  }
  return this;
}

uint64_t CA::Render::NamedFunction::name(CA::Render::NamedFunction *this)
{
  return *((unsigned int *)this + 4);
}

BOOL CA::Render::ShapeLayer::keypath_is_object(CA::Render::ShapeLayer *this, void *const *a2)
{
  unint64_t v2;

  v2 = (unint64_t)*a2;
  if (!*a2)
    return 0;
  if ((v2 & 1) != 0)
  {
    v2 >>= 1;
    return (_DWORD)v2 == 414 || (_DWORD)v2 == 346;
  }
  if (*(_DWORD *)v2 != 1)
    return 0;
  LODWORD(v2) = *(_DWORD *)(v2 + 4);
  return (_DWORD)v2 == 414 || (_DWORD)v2 == 346;
}

float64x2_t CA::Render::ShapeLayer::set_property(CA::Render::ShapeLayer *this, unint64_t a2, const unsigned int *a3, BOOL a4, unint64_t a5, const double *a6)
{
  int v6;
  float64x2_t result;

  v6 = *a3;
  if (*(int *)a3 <= 382)
  {
    if (v6 == 218)
    {
      if (a5 >= 4)
      {
        result = *(float64x2_t *)(a6 + 2);
        *(float32x4_t *)((char *)this + 24) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)a6), result);
      }
    }
    else
    {
      if (v6 == 347)
      {
        if (!a5)
          return result;
        *((double *)this + 13) = *a6;
        goto LABEL_17;
      }
      if (v6 == 349 && a5 != 0)
      {
        *((double *)this + 11) = *a6;
        goto LABEL_17;
      }
    }
  }
  else
  {
    if (v6 <= 531)
    {
      if (v6 != 383)
      {
        if (v6 == 531 && a5 >= 4)
        {
          result = *(float64x2_t *)(a6 + 2);
          *((float32x4_t *)this + 3) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)a6), result);
        }
        return result;
      }
      if (!a5)
        return result;
      *((double *)this + 12) = *a6;
LABEL_17:
      CA::Render::ShapeLayer::invalidate_stroke_path(this);
      return result;
    }
    if (v6 == 532)
    {
      if (!a5)
        return result;
      *((double *)this + 10) = *a6;
      goto LABEL_17;
    }
    if (v6 == 533 && a5 != 0)
    {
      *((double *)this + 9) = *a6;
      goto LABEL_17;
    }
  }
  return result;
}

uint64_t CA::Render::Layer::get_keypath_object(CA::Render::Layer *this, const CA::Render::Layer **a2, void *const *a3)
{
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v22[0] = this;
  v5 = CA::Render::skip_sublayers((CA::Render *)v22, a2, a3);
  if ((v5 & 0x80000000) != 0)
    return 0;
  v6 = (unint64_t)*a2;
  if (!*a2)
    return 0;
  v7 = (v6 & 1) != 0 ? 1 : *(unsigned int *)v6;
  if (v7 - v5 != 1)
    return 0;
  if (!v6)
    goto LABEL_12;
  if ((v6 & 1) != 0)
  {
    if (v5)
      goto LABEL_12;
    v6 >>= 1;
  }
  else
  {
    if (*(_DWORD *)v6 <= v5)
      goto LABEL_12;
    LODWORD(v6) = *(_DWORD *)(v6 + 4 * v5 + 4);
  }
  if ((int)v6 > 221)
  {
    if ((int)v6 > 534)
    {
      switch((_DWORD)v6)
      {
        case 0x217:
          v17 = *(_QWORD *)(v22[0] + 128);
          if (v17)
            return *(_QWORD *)(v17 + 24);
          return 0;
        case 0x218:
          return 0;
        case 0x22D:
          v13 = *(_QWORD *)(v22[0] + 128);
          if (v13)
            return *(_QWORD *)(v13 + 16);
          return 0;
      }
    }
    else
    {
      switch((_DWORD)v6)
      {
        case 0xDE:
          v10 = *(_QWORD *)(v22[0] + 128);
          if (v10)
            return *(_QWORD *)(v10 + 96);
          return 0;
        case 0x179:
          v16 = *(_QWORD *)(v22[0] + 128);
          if (v16)
            return *(_QWORD *)(v16 + 112);
          return 0;
        case 0x1ED:
          v11 = *(_QWORD *)(v22[0] + 128);
          if (v11)
            return *(_QWORD *)(v11 + 120);
          return 0;
      }
    }
LABEL_12:
    v8 = (uint64_t *)*((_QWORD *)this + 16);
    if (v8)
    {
      result = *v8;
      if (*v8)
        return (*(uint64_t (**)(uint64_t, const CA::Render::Layer **))(*(_QWORD *)result + 120))(result, a2);
      return result;
    }
    return 0;
  }
  if ((int)v6 <= 118)
  {
    switch((_DWORD)v6)
    {
      case '6':
        v14 = *(_QWORD *)(v22[0] + 128);
        if (v14)
          return *(_QWORD *)(v14 + 104);
        return 0;
      case 'o':
        v15 = *(_QWORD *)(v22[0] + 128);
        if (v15)
          return *(_QWORD *)(v15 + 88);
        return 0;
      case 'u':
        v10 = v22[0];
        return *(_QWORD *)(v10 + 96);
    }
    goto LABEL_12;
  }
  switch((int)v6)
  {
    case 133:
      v12 = *(_QWORD *)(v22[0] + 128);
      if (!v12)
        return 0;
      return *(_QWORD *)(v12 + 40);
    case 134:
    case 135:
    case 136:
    case 138:
    case 139:
    case 140:
      goto LABEL_12;
    case 137:
      v19 = *(_QWORD *)(v22[0] + 128);
      if (!v19)
        return 0;
      return *(_QWORD *)(v19 + 32);
    case 141:
      v20 = *(_QWORD *)(v22[0] + 128);
      if (!v20)
        return 0;
      return *(_QWORD *)(v20 + 56);
    case 142:
      v21 = *(_QWORD *)(v22[0] + 128);
      if (!v21)
        return 0;
      return *(_QWORD *)(v21 + 64);
    default:
      if ((_DWORD)v6 != 119)
        goto LABEL_12;
      v18 = *(_QWORD *)(v22[0] + 128);
      if (!v18)
        return 0;
      result = *(_QWORD *)(v18 + 48);
      break;
  }
  return result;
}

uint64_t CA::Render::NamedFunction::output_count(CA::Render::NamedFunction *this)
{
  return 16 * (*((_DWORD *)this + 4) < 0xDu);
}

uint64_t CA::Render::NamedFunction::input_count(CA::Render::NamedFunction *this)
{
  uint64_t v1;

  v1 = *((unsigned int *)this + 4);
  if (v1 > 0xC)
    return 0;
  else
    return dword_184753FB0[v1];
}

uint64_t CA::Render::Texture::mix@<X0>(CA::Render::Texture *this@<X0>, CA::Render::Object *a2@<X1>, const CA::Render::ValueInterpolator *a3@<X2>, _QWORD *a4@<X8>)
{
  malloc_zone_t *malloc_zone;
  uint64_t result;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  result = (uint64_t)malloc_type_zone_malloc(malloc_zone, 0xA8uLL, 0x8BB15036uLL);
  if (result)
    result = CA::Render::Interpolator::Interpolator(result, this, a2, *(double *)a3);
  *a4 = result;
  return result;
}

uint64_t CA::Render::Interpolator::Interpolator(uint64_t this, CA::Render::Object *a2, CA::Render::Object *a3, double a4)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  *(_DWORD *)(this + 8) = 1;
  *(_DWORD *)(this + 12) = 26;
  ++dword_1ECDC7C90;
  *(_QWORD *)this = off_1E1596A78;
  *(_QWORD *)(this + 16) = 0;
  if (a2)
  {
    v4 = (unsigned int *)((char *)a2 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    if (!v5)
    {
      a2 = 0;
      do
        v8 = __ldaxr(v4);
      while (__stlxr(v8 - 1, v4));
    }
  }
  *(_QWORD *)(this + 24) = a2;
  if (a3)
  {
    v6 = (unsigned int *)((char *)a3 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    if (!v7)
    {
      a3 = 0;
      do
        v9 = __ldaxr(v6);
      while (__stlxr(v9 - 1, v6));
    }
  }
  *(_QWORD *)(this + 32) = a3;
  *(_QWORD *)(this + 40) = 0;
  *(double *)(this + 48) = a4;
  *(_QWORD *)(this + 56) = 0;
  *(_BYTE *)(this + 160) = 0;
  return this;
}

double *CA::Render::BackdropLayer::set_property(double *this, uint64_t a2, const unsigned int *a3, const unsigned int *a4, unint64_t a5, double *a6, const double *a7)
{
  double *v7;
  int v8;
  int v9;
  unsigned int v10;
  float64x2_t v11;
  __int128 v12;
  float64x2_t v13;
  float v14;
  int v15;
  float v16;
  float v17;
  __int128 v18;
  float64x2_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return this;
  v7 = this;
  if (a2 != 1)
  {
    if (*a3 != 51)
      return this;
    v11 = *(float64x2_t *)(this + 8);
    v18 = *((_OWORD *)this + 3);
    v19 = v11;
    this = CA::Render::set_rect_property((double *)&v18, (Rect *)(a2 - 1), (int *)a3 + 1, a4, a5, a6, a7);
    v12 = v18;
    v13 = v19;
    goto LABEL_12;
  }
  v8 = *a3;
  if (*(int *)a3 > 365)
  {
    if (v8 == 366)
    {
      if (a5)
      {
        v16 = *a6;
        *((float *)this + 9) = v16;
      }
    }
    else if (v8 == 475)
    {
      if (a5)
      {
        v17 = *a6;
        *((float *)this + 8) = v17;
      }
    }
    else if (v8 == 605 && a5)
    {
      v14 = *a6;
      *((float *)this + 10) = v14;
    }
    return this;
  }
  if (v8 == 51)
  {
    if (a5 < 4)
      return this;
    v12 = *(_OWORD *)a6;
    v13 = vsubq_f64(*(float64x2_t *)(a6 + 2), *(float64x2_t *)a6);
LABEL_12:
    *((_OWORD *)v7 + 3) = v12;
    *((float64x2_t *)v7 + 4) = v13;
    return this;
  }
  if (v8 == 80)
  {
    if (!a5)
      return this;
    v15 = *((_DWORD *)this + 3);
    if (*a6 == 0.0)
      v10 = v15 & 0xFFFFEFFF;
    else
      v10 = v15 | 0x1000;
    goto LABEL_29;
  }
  if (v8 == 208 && a5)
  {
    v9 = *((_DWORD *)this + 3);
    if (*a6 <= 0.5)
      v10 = v9 & 0xFFFFFEFF;
    else
      v10 = v9 | 0x100;
LABEL_29:
    *((_DWORD *)this + 3) = v10;
  }
  return this;
}

uint64_t CA::Render::ReplicatorLayer::set_property(uint64_t this, uint64_t a2, const unsigned int *a3, const double *a4, unint64_t a5, const double *a6, const double *a7)
{
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  float v13;
  uint64_t v14;
  _DWORD *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  float64x2_t v19[8];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v7 = this;
    if (a2 == 1)
    {
      v8 = 0;
      switch(*a3)
      {
        case 0x13Au:
          v8 = 8;
          goto LABEL_18;
        case 0x13Bu:
          v8 = 7;
          goto LABEL_18;
        case 0x13Cu:
          if (a5 >= 4)
            *(float32x4_t *)(this + 36) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)a6), *(float64x2_t *)(a6 + 2));
          return this;
        case 0x13Du:
          if (a5)
            *(_DWORD *)(this + 16) = (int)(floor(*a6) + 0.5);
          return this;
        case 0x13Eu:
          goto LABEL_18;
        case 0x13Fu:
          v8 = 6;
          goto LABEL_18;
        case 0x140u:
          v8 = 5;
LABEL_18:
          if (a5)
          {
            v13 = *a6;
            *(float *)(this + 4 * v8 + 32) = v13;
          }
          break;
        case 0x141u:
          if (a5 >= 0x10)
          {
            memset(v19, 0, sizeof(v19));
            if ((_DWORD)a4)
            {
              v14 = *(_QWORD *)(this + 24);
              if (v14)
              {
                CA::Mat4Impl::mat4_concat(v19, (double *)(v14 + 24), a6, a4);
                a6 = (const double *)v19;
              }
            }
            v15 = CA::Render::Vector::new_vector((CA::Render::Vector *)0x10, a6, (const double *)a3);
            this = *(_QWORD *)(v7 + 24);
            *(_QWORD *)(v7 + 24) = v15;
            if (this)
            {
              v16 = (unsigned int *)(this + 8);
              do
              {
                v17 = __ldaxr(v16);
                v18 = v17 - 1;
              }
              while (__stlxr(v18, v16));
              if (!v18)
                this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 16))(this);
            }
          }
          break;
        default:
          return this;
      }
    }
    else if (*a3 == 321)
    {
      v9 = CA::Render::set_transform_property(*(CA::Render **)(this + 24), (CA::Render::Vector *)(a2 - 1), (int *)a3 + 1, (const unsigned int *)a4, a5, (uint64_t)a6, a7);
      this = *(_QWORD *)(v7 + 24);
      *(_QWORD *)(v7 + 24) = v9;
      if (this)
      {
        v10 = (unsigned int *)(this + 8);
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 16))(this);
      }
    }
  }
  return this;
}

unint64_t *CA::Render::Layer::set_background_color(uint64_t a1, float a2, float a3, float a4, float a5)
{
  unint64_t *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(float *)(a1 + 16) = a2;
  *(float *)(a1 + 20) = a3;
  *(float *)(a1 + 24) = a4;
  *(float *)(a1 + 28) = a5;
  if (a4 != 0.0 || a2 != 0.0 || a3 != 0.0)
  {
    v9 = *(_QWORD *)(a1 + 40);
    result = (unint64_t *)(a1 + 40);
    v6 = v9;
    goto LABEL_7;
  }
  v7 = *(_QWORD *)(a1 + 40);
  result = (unint64_t *)(a1 + 40);
  v6 = v7;
  if (a5 != 0.0)
  {
LABEL_7:
    v8 = 0x40000000000;
    goto LABEL_8;
  }
  v8 = 0;
LABEL_8:
  *result = v8 | v6 & 0xFFFFFBFFFFFFFFFFLL;
  return result;
}

CA::Render **CA::Render::Path::mix@<X0>(CA::Render **this@<X0>, CA::Render **a2@<X1>, const CA::Render::ValueInterpolator *a3@<X2>, CA::Render ***a4@<X8>)
{
  float v5;
  CA::Render **result;

  v5 = *(double *)a3;
  result = CA::Render::morph_paths(this, a2, a3, v5);
  *a4 = result;
  return result;
}

uint64_t CA::Render::AnimationEvaluator::second_pass(uint64_t this)
{
  double *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t i;
  CA::Render::Animation *v5;
  double v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(this + 178) & 2) != 0)
  {
    v1 = (double *)this;
    v2 = *(_QWORD *)(*(_QWORD *)(this + 16) + 136);
    v3 = *(unsigned int *)(v2 + 16);
    if ((_DWORD)v3)
    {
      for (i = 0; i < v3; ++i)
      {
        v5 = *(CA::Render::Animation **)(v2 + 24 + 8 * i);
        if ((*((_DWORD *)v5 + 3) & 0x24100) == 0x4100)
        {
          v7 = 0;
          v6 = *v1;
          this = CA::Render::Animation::map_time(v5, &v6, &v7, 0, 0);
          if ((_DWORD)this)
          {
            ++*((_DWORD *)v5 + 21);
            this = (*(uint64_t (**)(CA::Render::Animation *, double *, _QWORD, _QWORD, double))(*(_QWORD *)v5 + 120))(v5, v1, v7, 0, v6);
          }
          v3 = *(unsigned int *)(v2 + 16);
        }
      }
    }
  }
  return this;
}

uint64_t CA::WindowServer::Server::render_display_layer(CA::WindowServer::Server *this, CA::Render::Object *a2, unsigned __int16 *a3, void *a4)
{
  uint64_t result;
  __int128 v7;
  CA::Render::LayerNode *v8;
  const CA::Shape *v9;
  int64x2_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  CA::Shape **v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  float64x2_t v26;
  uint64_t v27;
  CA::Render::Layer *v28;
  const CA::Shape *v29;
  uint64_t v30;
  CA::Render::RenderTarget *v31;
  float *v32;
  unsigned __int16 v33;
  CA::WindowServer::Surface *v34;
  const CA::Render::LayerNode *v35;
  int v36;
  unsigned __int16 v37;
  uint64_t v38;
  uint64_t v39;
  __IOSurface *v40;
  char *v41;
  void (*v42)(CA::WindowServer::Surface *);
  CA::Render::Layer *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  BOOL v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  __int128 v53;
  _QWORD v54[2];
  CA::Shape *v55[25];
  _QWORD v56[12];
  int v57;
  unsigned int v58;
  unsigned __int16 v59;
  CA::Shape *v60[2];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  result = CA::WindowServer::display_name_matches((CFTypeRef *)a2, *((CA::WindowServer::Server **)a3 + 1), (const __CFString *)(HIBYTE(a3[40]) & 1));
  if ((_DWORD)result)
  {
    a3[40] |= 0x200u;
    pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 24));
    *(_QWORD *)&v7 = *((_QWORD *)a3 + 5);
    *((_QWORD *)&v7 + 1) = *(_QWORD *)(*((_QWORD *)a3 + 4) + 8);
    v53 = v7;
    bzero(v54, 0x430uLL);
    CA::Render::Update::Update((CA::Render::Update *)v54, 0, 0, *((double *)a3 + 6), 0, 0, 0, 0, (const CA::Bounds *)&v53, *((_DWORD *)a3 + 14) | *((_DWORD *)a2 + 46));
    if (!v54[0])
    {
LABEL_40:
      CA::Render::Update::~Update((CA::Render::Update *)v54, v8);
      return pthread_mutex_unlock((pthread_mutex_t *)((char *)a2 + 24));
    }
    if (CADeviceNeedsP3ShapeTracking::once != -1)
      dispatch_once(&CADeviceNeedsP3ShapeTracking::once, &__block_literal_global_42);
    if (*((_BYTE *)a2 + 514))
      v11 = (unint64_t)(*((_BYTE *)a3 + 4) == 0) << 7;
    else
      v11 = 0;
    v12 = *((unsigned __int8 *)a3 + 7);
    v13 = v11 | (v58 | ((unint64_t)v59 << 32)) & 0xFFFFEFFFDEFFFF7FLL | ((unint64_t)CADeviceNeedsP3ShapeTracking::p3_tracking << 24) | (v12 << 44);
    v14 = a3[40];
    v15 = v13 | ((unint64_t)(v14 & 0x40) << 23);
    v59 = WORD2(v13);
    v58 = v13 | ((v14 & 0x40) << 23);
    if (v12)
    {
      v8 = (CA::Render::LayerNode *)*((_QWORD *)a2 + 12);
      if (v8)
      {
        v66 = 0u;
        v67 = 0u;
        v64 = 0u;
        v65 = 0u;
        v62 = 0u;
        v63 = 0u;
        *(_OWORD *)v60 = 0u;
        v61 = 0u;
        CA::WindowServer::Display::reconciled_display_attributes((CA::WindowServer::Display *)v60, (uint64_t)v8);
        CA::Render::Update::set_display_attributes((uint64_t)v54, (float *)v60);
        v15 = v58 | ((unint64_t)v59 << 32);
        v14 = a3[40];
      }
    }
    v16 = v15 & 0xFFFFAFFF1FFBLL | ((unint64_t)*((unsigned __int8 *)a3 + 6) << 30);
    v57 = *(_DWORD *)a3;
    v59 = WORD2(v16);
    v58 = v16 & 0xFFFF9FFF | (((v14 >> 1) & 1) << 13) & 0xFFFFBFFF | (((v14 >> 3) & 1) << 14) | 0x10008004;
    v17 = *((_QWORD *)a3 + 2);
    if (!v17)
    {
LABEL_18:
      CA::Render::Update::added_all_contexts((CA::Render::Update *)v54, v8, v9, v10);
      v61 = 0u;
      v62 = 0u;
      *(_OWORD *)v60 = 0u;
      CA::Shape::operator=((uint64_t)v60, &v53);
      CA::shape_union(v55, v60, v29);
      v30 = v56[9];
      *((_QWORD *)a3 + 9) = v56[10];
      (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(**((_QWORD **)a3 + 4) + 24))(*((_QWORD *)a3 + 4), v30, *((unsigned int *)a3 + 15), 0, 0);
      v32 = CA::WindowServer::wrap_buffer(*((CA::WindowServer **)a2 + 12), *((CA::WindowServer::Display **)a3 + 4), v31);
      v33 = a3[40];
      if (v32)
      {
        v34 = (CA::WindowServer::Surface *)v32;
        if ((*(unsigned int (**)(CA::Render::Object *, _QWORD *, float *, __int128 *, _QWORD, _QWORD))(*(_QWORD *)a2 + 432))(a2, v54, v32, &v53, v33 & 1, *((unsigned int *)a3 + 15)))
        {
          v36 = ~(*((unsigned __int8 *)v34 + 228) << 6) & 0x200;
        }
        else
        {
          v36 = 0;
        }
        v37 = a3[40];
        a3[40] = v37 & 0xFDFF | v36;
        if (v36)
        {
          if ((v37 & 2) != 0 && (v37 & 4) != 0)
          {
            v38 = (*(uint64_t (**)(CA::Render::Object *))(*(_QWORD *)a2 + 392))(a2);
            if (v38)
              a3[40] = a3[40] & 0xFDFF | ((*(_BYTE *)(v38 + 100) == 0) << 9);
          }
        }
        v39 = *((_QWORD *)a3 + 4);
        CA::Render::Update::render_edr_factor((CA::Render::Update *)v54, v35);
        (*(void (**)(uint64_t))(*(_QWORD *)v39 + 32))(v39);
        if (BYTE5(ca_debug_options))
          CA::WindowServer::print_layer_trees((uint64_t)v56, 1, *(double *)&v55[7]);
        if (initialized[0] != -1)
          dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
        if (*(float *)&dword_1ECDC6948)
        {
          v40 = (__IOSurface *)(*(uint64_t (**)(CA::WindowServer::Surface *))(*(_QWORD *)v34 + 160))(v34);
          if (v40)
          {
            v41 = CAIOSurfaceWriteToFileWithSuffix(v40, "snapshot-layer");
            free(v41);
            if (*(float *)&dword_1ECDC6948 > 0.0)
              *(float *)&dword_1ECDC6948 = *(float *)&dword_1ECDC6948 + -1.0;
          }
        }
        if (*((_QWORD *)v34 + 9))
        {
          v42 = (void (*)(CA::WindowServer::Surface *))*((_QWORD *)v34 + 10);
          if (v42)
            v42(v34);
        }
        *((_QWORD *)v34 + 9) = 0;
        *((_QWORD *)v34 + 10) = 0;
        CA::WindowServer::Surface::unref(v34);
      }
      else
      {
        a3[40] = v33 & 0xFDFF;
      }
      goto LABEL_40;
    }
    pthread_mutex_lock((pthread_mutex_t *)(v17 + 72));
    v18 = (CA::Shape **)*((_QWORD *)a3 + 8);
    v69 = 0;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    *(_OWORD *)v60 = 0u;
    if ((a3[40] & 0x20) != 0)
    {
      v19 = *((_OWORD *)v18 + 1);
      v20 = *((_OWORD *)v18 + 2);
      v21 = *((_OWORD *)v18 + 3);
      *(_OWORD *)v60 = *(_OWORD *)v18;
      v61 = v19;
      v62 = v20;
      v63 = v21;
      v22 = *((_OWORD *)v18 + 5);
      v23 = *((_OWORD *)v18 + 6);
      v24 = *((_OWORD *)v18 + 7);
      v64 = *((_OWORD *)v18 + 4);
      v65 = v22;
      v66 = v23;
      v67 = v24;
      v68 = *((_OWORD *)v18 + 8);
      HIDWORD(v25) = DWORD1(v68);
      LOBYTE(v69) = (_BYTE)v18[18] & 7;
      LOBYTE(v69) = (_BYTE)v18[18] & 8 | v69;
      LOBYTE(v69) = v69 | (_BYTE)v18[18] & 0x10;
      LODWORD(v25) = *(_DWORD *)(*((_QWORD *)a3 + 4) + 12);
      v18 = v60;
      v26 = CA::Transform::translate((CA::Transform *)v60, 0.0, (double)v25, 0.0);
      v26.f64[0] = 1.0;
      CA::Transform::scale((float64x2_t *)v60, v26, -1.0, 1.0);
    }
    v27 = CA::Render::Context::lookup_object(*(_QWORD *)(v17 + 136), *(_DWORD *)(v17 + 148), *((_QWORD *)a3 + 3), 0, 29, 0);
    if (!v27)
    {
LABEL_17:
      pthread_mutex_unlock((pthread_mutex_t *)(v17 + 72));
      goto LABEL_18;
    }
    v28 = (CA::Render::Layer *)v27;
    if ((a3[40] & 0x10) == 0)
    {
LABEL_16:
      CA::Render::Update::add_context((CA::Render::Update *)v54, (CA::Render::Context *)v17, (CA::Render::Layer *)v27, (const CA::Transform *)v18);
      goto LABEL_17;
    }
    v43 = *(CA::Render::Layer **)(v27 + 104);
    if ((*(_BYTE *)(v27 + 13) & 0x20) != 0)
    {
      if (!v43)
        goto LABEL_16;
      v48 = (unsigned int *)((char *)v43 + 8);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 + 1, v48));
      if (!v49)
      {
        do
          v52 = __ldaxr(v48);
        while (__stlxr(v52 - 1, v48));
      }
      CA::Render::Layer::set_single_sublayer((CA::Render::Layer *)v27, 0);
      CA::Render::Update::add_context((CA::Render::Update *)v54, (CA::Render::Context *)v17, v28, (const CA::Transform *)v18);
      CA::Render::Layer::set_single_sublayer(v28, v43);
      do
      {
        v50 = __ldaxr(v48);
        v47 = --v50 == 0;
      }
      while (__stlxr(v50, v48));
    }
    else
    {
      if (!v43)
        goto LABEL_16;
      v44 = (unsigned int *)((char *)v43 + 8);
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 + 1, v44));
      if (!v45)
      {
        do
          v51 = __ldaxr(v44);
        while (__stlxr(v51 - 1, v44));
      }
      CA::Render::Layer::set_sublayers(v27, 0);
      CA::Render::Update::add_context((CA::Render::Update *)v54, (CA::Render::Context *)v17, v28, (const CA::Transform *)v18);
      CA::Render::Layer::set_sublayers((uint64_t)v28, (uint64_t)v43);
      do
      {
        v46 = __ldaxr(v44);
        v47 = --v46 == 0;
      }
      while (__stlxr(v46, v44));
    }
    if (v47)
      (*(void (**)(CA::Render::Layer *))(*(_QWORD *)v43 + 16))(v43);
    goto LABEL_17;
  }
  return result;
}

void CA::WindowServer::IOMFBDisplay::FrameInfo::~FrameInfo(CA::WindowServer::IOMFBDisplay::FrameInfo *this)
{
  char *v2;
  char *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  char *v8;
  char *v9;
  BOOL v10;
  const void **v11;
  const void **v12;
  const void *v13;

  v2 = (char *)*((_QWORD *)this + 9);
  v3 = (char *)this + 80;
  if (v2 != (char *)this + 80)
  {
    do
    {
      v4 = (unsigned int *)*((_QWORD *)v2 + 4);
      if (v4)
      {
        v5 = v4 + 2;
        do
        {
          v6 = __ldaxr(v5);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, v5));
        if (!v7)
          (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
      }
      v8 = (char *)*((_QWORD *)v2 + 1);
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = *(char **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (char *)*((_QWORD *)v2 + 2);
          v10 = *(_QWORD *)v9 == (_QWORD)v2;
          v2 = v9;
        }
        while (!v10);
      }
      v2 = v9;
    }
    while (v9 != v3);
  }
  v11 = (const void **)*((_QWORD *)this + 15);
  v12 = (const void **)*((_QWORD *)this + 16);
  if (v11 != v12)
  {
    do
    {
      v13 = *v11++;
      _Block_release(v13);
    }
    while (v11 != v12);
    v11 = (const void **)*((_QWORD *)this + 15);
  }
  if (v11 != *((const void ***)this + 17))
    free(v11);
  std::__tree<CA::Render::Update::ContextInfo>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::tuple<unsigned short,unsigned short>>::destroy(*((_QWORD **)this + 10));
}

void CA::Render::Update::~Update(CA::Render::Update *this, CA::Render::LayerNode *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  CA::Shape *v10;
  CA::Render::LayerNode *v11;
  CA::Shape *v12;
  uint64_t v13;
  CA::Render::LayerNode *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  _QWORD *v24;
  _QWORD *v25;
  CA::Render::LayerNode *v26;
  uint64_t *i;
  os_unfair_lock_s *v28;
  uint32_t v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t **j;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  CA::Render::LayerNode *v44;
  CA::Render::LayerNode *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t *v49;
  uint64_t *v50;
  _QWORD *k;
  CA::Shape *v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  void *v59;
  unint64_t v60;
  unint64_t m;
  CA::Shape *v62;
  CA::Shape *v63;
  CA::Shape *v64;
  _QWORD *n;
  unsigned int *v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  _QWORD *v71;
  unsigned int *v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  _QWORD *v76;
  _QWORD *v77;
  CA::Render::Update *v78;
  unsigned int *v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  CA::Render::Update *v83;
  CA::Render::Update *v84;
  _QWORD *ii;
  const void *v86;
  void *v87;
  const void *v88;
  const void *v89;
  const void *v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  void *v94;

  v3 = (unsigned int *)((char *)this + 216);
  v4 = (unsigned int *)*((_QWORD *)this + 28);
  while (v4 != v3)
  {
    v5 = v4;
    v4 = (unsigned int *)*((_QWORD *)v4 + 1);
    v6 = *(_QWORD *)v5;
    *(_QWORD *)(v6 + 8) = v4;
    *(_QWORD *)v4 = v6;
    *(_QWORD *)v5 = v5;
    *((_QWORD *)v5 + 1) = v5;
    v7 = v5 + 4;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      CA::Render::LayerNode::delete_node((CA::Render::LayerNode *)v5, a2);
  }
  CA::Shape::unref(*((CA::Shape **)this + 2));
  v10 = (CA::Shape *)*((_QWORD *)this + 3);
  if (v10)
    CA::Shape::unref(v10);
  CA::Shape::unref(*((CA::Shape **)this + 4));
  CA::Shape::unref(*((CA::Shape **)this + 5));
  CA::Shape::unref(*((CA::Shape **)this + 6));
  CA::Shape::unref(*((CA::Shape **)this + 7));
  CA::Shape::unref(*((CA::Shape **)this + 8));
  v12 = (CA::Shape *)*((_QWORD *)this + 1);
  if (v12)
    CA::Shape::unref(v12);
  v13 = *((_QWORD *)this + 74);
  if (v13)
  {
    do
    {
      v14 = *(CA::Render::LayerNode **)v13;
      v15 = (unsigned int *)(*(_QWORD *)v13 + 16);
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
        CA::Render::LayerNode::delete_node(v14, v11);
      v13 = *(_QWORD *)(v13 + 8);
    }
    while (v13);
    v18 = (_QWORD *)*((_QWORD *)this + 74);
    if (v18)
    {
      do
      {
        v19 = (_QWORD *)v18[1];
        free(v18);
        v18 = v19;
      }
      while (v19);
    }
  }
  v20 = (_QWORD *)*((_QWORD *)this + 75);
  if (v20)
  {
    do
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v20 + 24))(*v20);
      v21 = *v20;
      v22 = (unsigned int *)(*v20 + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (v21 && v23 == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      v20 = (_QWORD *)v20[1];
    }
    while (v20);
    v24 = (_QWORD *)*((_QWORD *)this + 75);
    if (v24)
    {
      do
      {
        v25 = (_QWORD *)v24[1];
        free(v24);
        v24 = v25;
      }
      while (v25);
    }
  }
  CA::Render::Update::release_objects((unint64_t *)this);
  for (i = (uint64_t *)*((_QWORD *)this + 42); i; i = (uint64_t *)*i)
  {
    if ((*((_DWORD *)this + 266) & 0x44) == 0)
    {
      v28 = (os_unfair_lock_s *)i[1];
      v29 = *((_DWORD *)i + 4);
      os_unfair_lock_lock(v28 + 13);
      if (v28[17]._os_unfair_lock_opaque < v29)
      {
        v28[17]._os_unfair_lock_opaque = v29;
        CA::Render::Context::check_sync_reqs((CA::Render::Context *)v28, 0.0);
      }
      os_unfair_lock_unlock(v28 + 13);
    }
    v30 = (unsigned int *)i[1];
    v31 = v30 + 2;
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
      (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 16))(v30);
  }
  CA::Render::Update::pop_dependence_group(this, v26);
  for (j = (uint64_t **)*((_QWORD *)this + 63); j; j = (uint64_t **)*j)
  {
    v35 = *((_DWORD *)this + 62);
    v36 = j[1][32];
    os_unfair_lock_lock((os_unfair_lock_t)(v36 + 36));
    v37 = *(_QWORD *)(v36 + 40);
    os_unfair_lock_lock((os_unfair_lock_t)(v37 + 40));
    if (*(_DWORD *)(v37 + 56) == v35)
    {
      v38 = *(_DWORD *)(v37 + 432);
      v39 = v38 == v35 || v38 == 0;
      if (v39)
      {
        v40 = *(_QWORD *)(v37 + 64);
        v41 = *(_QWORD *)(v37 + 72);
        while (v40 != v41)
        {
          *(_QWORD *)(v40 + 8) = 0;
          *(_BYTE *)(v40 + 161) = 0;
          v40 += 168;
        }
        *(_DWORD *)(v37 + 432) = 0;
      }
      v42 = *(_QWORD *)(v37 + 48);
      if (v42)
      {
        v43 = *(double *)(v37 + 504);
        if (v43 >= *(double *)(v37 + 512))
          v43 = *(double *)(v37 + 512);
        if (v43 <= 0.0)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
          *(_QWORD *)(v37 + 48) = 0;
        }
      }
      *(_DWORD *)(v37 + 56) = 0;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(v37 + 40));
    os_unfair_lock_unlock((os_unfair_lock_t)(v36 + 36));
    v45 = (CA::Render::LayerNode *)j[1];
    v46 = (unsigned int *)((char *)v45 + 16);
    do
    {
      v47 = __ldaxr(v46);
      v48 = v47 - 1;
    }
    while (__stlxr(v48, v46));
    if (!v48)
      CA::Render::LayerNode::delete_node(v45, v44);
    CA::Shape::unref((CA::Shape *)j[5]);
    v49 = j[11];
    if (v49)
    {
      do
      {
        v50 = (uint64_t *)v49[1];
        (*(void (**)(uint64_t *))*v49)(v49);
        v49 = v50;
      }
      while (v50);
    }
  }
  for (k = (_QWORD *)*((_QWORD *)this + 68); k; k = (_QWORD *)*k)
  {
    v52 = (CA::Shape *)k[2];
    if (v52)
      CA::Shape::unref(v52);
  }
  v53 = (_QWORD *)*((_QWORD *)this + 69);
  v54 = (_QWORD *)*((_QWORD *)this + 70);
  while (v53 != v54)
  {
    v55 = *v53;
    v56 = (unsigned int *)(*v53 + 8);
    do
    {
      v57 = __ldaxr(v56);
      v58 = v57 - 1;
    }
    while (__stlxr(v58, v56));
    if (!v58)
      (*(void (**)(uint64_t))(*(_QWORD *)v55 + 16))(v55);
    ++v53;
  }
  if ((*((_DWORD *)this + 266) & 0x10000) == 0)
    CA::Render::BackdropState::collect((CA::Render::BackdropState *)*((unsigned int *)this + 62));
  v59 = (void *)*((_QWORD *)this + 67);
  if (v59)
  {
    v60 = *((unsigned int *)this + 128);
    if ((_DWORD)v60)
    {
      for (m = 0; m < v60; ++m)
      {
        v62 = *(CA::Shape **)(*((_QWORD *)this + 67) + 8 * m);
        if (v62)
        {
          CA::Shape::unref(v62);
          v60 = *((unsigned int *)this + 128);
        }
      }
      v59 = (void *)*((_QWORD *)this + 67);
    }
    free(v59);
  }
  v63 = (CA::Shape *)*((_QWORD *)this + 65);
  if (v63)
    CA::Shape::unref(v63);
  v64 = (CA::Shape *)*((_QWORD *)this + 66);
  if (v64)
    CA::Shape::unref(v64);
  for (n = (_QWORD *)*((_QWORD *)this + 129); n; n = (_QWORD *)*n)
  {
    v66 = (unsigned int *)n[1];
    v67 = v66 + 2;
    do
    {
      v68 = __ldaxr(v67);
      v69 = v68 - 1;
    }
    while (__stlxr(v69, v67));
    if (!v69)
      (*(void (**)(unsigned int *))(*(_QWORD *)v66 + 16))(v66);
  }
  v70 = *((_QWORD *)this + 103);
  if (v70)
  {
    v71 = *(_QWORD **)v70;
    if (*(_QWORD *)v70 == v70 + 8)
      goto LABEL_107;
    do
    {
      v72 = (unsigned int *)v71[4];
      if (*((_BYTE *)v72 + 12) != 25)
        __assert_rtn("~Update", "render-updater.cpp", 10362, "obj->type () == Render::kTypeImageQueue");
      v73 = v72 + 2;
      do
      {
        v74 = __ldaxr(v73);
        v75 = v74 - 1;
      }
      while (__stlxr(v75, v73));
      if (!v75)
        (*(void (**)(unsigned int *))(*(_QWORD *)v72 + 16))(v72);
      v76 = (_QWORD *)v71[1];
      if (v76)
      {
        do
        {
          v77 = v76;
          v76 = (_QWORD *)*v76;
        }
        while (v76);
      }
      else
      {
        do
        {
          v77 = (_QWORD *)v71[2];
          v39 = *v77 == (_QWORD)v71;
          v71 = v77;
        }
        while (!v39);
      }
      v71 = v77;
    }
    while (v77 != (_QWORD *)(v70 + 8));
    v70 = *((_QWORD *)this + 103);
    if (v70)
    {
LABEL_107:
      std::__tree<std::tuple<unsigned short,unsigned short>>::destroy(*(_QWORD **)(v70 + 8));
      MEMORY[0x186DBD990](v70, 0x1020C4062D53EE8);
    }
  }
  if (*((_QWORD *)this + 109))
  {
    v78 = (CA::Render::Update *)*((_QWORD *)this + 107);
    if (v78 != (CA::Render::Update *)((char *)this + 864))
    {
      do
      {
        v79 = (unsigned int *)*((_QWORD *)v78 + 4);
        if (*((_BYTE *)v79 + 12) != 25)
          __assert_rtn("~Update", "render-updater.cpp", 10384, "obj->type () == Render::kTypeImageQueue");
        CA::Render::ImageQueue::did_display(*((CA::Render::ImageQueue **)v78 + 4), *((_DWORD *)this + 62), 0.0, 0.0, 0.0);
        v80 = v79 + 2;
        do
        {
          v81 = __ldaxr(v80);
          v82 = v81 - 1;
        }
        while (__stlxr(v82, v80));
        if (!v82)
          (*(void (**)(unsigned int *))(*(_QWORD *)v79 + 16))(v79);
        v83 = (CA::Render::Update *)*((_QWORD *)v78 + 1);
        if (v83)
        {
          do
          {
            v84 = v83;
            v83 = *(CA::Render::Update **)v83;
          }
          while (v83);
        }
        else
        {
          do
          {
            v84 = (CA::Render::Update *)*((_QWORD *)v78 + 2);
            v39 = *(_QWORD *)v84 == (_QWORD)v78;
            v78 = v84;
          }
          while (!v39);
        }
        v78 = v84;
      }
      while (v84 != (CA::Render::Update *)((char *)this + 864));
    }
  }
  std::__tree<CA::Render::Update::ContextInfo>::destroy(*((_QWORD **)this + 105));
  *((_QWORD *)this + 104) = (char *)this + 840;
  *((_QWORD *)this + 106) = 0;
  *((_QWORD *)this + 105) = 0;
  for (ii = (_QWORD *)*((_QWORD *)this + 127); ii; ii = (_QWORD *)*ii)
  {
    v86 = (const void *)ii[1];
    if (v86)
      CFRelease(v86);
  }
  *((_QWORD *)this + 116) = *((_QWORD *)this + 115);

  x_heap_free(*(void ****)this);
  v87 = (void *)*((_QWORD *)this + 115);
  if (v87 != *((void **)this + 117))
    free(v87);
  v88 = (const void *)*((_QWORD *)this + 114);
  if (v88)
    CFRelease(v88);
  v89 = (const void *)*((_QWORD *)this + 113);
  if (v89)
    CFRelease(v89);
  v90 = (const void *)*((_QWORD *)this + 112);
  if (v90)
    CFRelease(v90);
  std::__tree<std::tuple<unsigned short,unsigned short>>::destroy(*((_QWORD **)this + 108));
  std::__tree<CA::Render::Update::ContextInfo>::destroy(*((_QWORD **)this + 105));
  v91 = *((_QWORD *)this + 100);
  if (v91)
  {
    v92 = *((_QWORD *)this + 101);
    v93 = (void *)*((_QWORD *)this + 100);
    if (v92 != v91)
    {
      do
        v92 = std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table(v92 - 40);
      while (v92 != v91);
      v93 = (void *)*((_QWORD *)this + 100);
    }
    *((_QWORD *)this + 101) = v91;
    operator delete(v93);
  }
  v94 = (void *)*((_QWORD *)this + 69);
  if (v94 != *((void **)this + 71))
    free(v94);
}

void std::__tree<CA::Render::Update::ContextInfo>::destroy(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (a1)
  {
    std::__tree<CA::Render::Update::ContextInfo>::destroy(*a1);
    std::__tree<CA::Render::Update::ContextInfo>::destroy(a1[1]);
    v2 = (unsigned int *)a1[4];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
    operator delete(a1);
  }
}

uint64_t CA::Render::Context::increment_commit_seed(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  uint64_t os_unfair_lock_opaque;

  v2 = this + 13;
  os_unfair_lock_lock(this + 13);
  ++this[16]._os_unfair_lock_opaque;
  CA::Render::Context::check_sync_reqs((CA::Render::Context *)this, 0.0);
  os_unfair_lock_opaque = this[16]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v2);
  return os_unfair_lock_opaque;
}

void CA::Render::Context::check_sync_reqs(CA::Render::Context *this, double a2)
{
  double *v2;
  double *v3;
  unsigned int v6;
  unsigned int v7;
  _BOOL4 v8;
  BOOL v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  NSObject *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  malloc_zone_t *malloc_zone;
  uint64_t v34;
  uint8_t buf[4];
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v3 = (double *)((char *)this + 56);
  v2 = (double *)*((_QWORD *)this + 7);
  if (v2)
  {
    do
    {
      v6 = *((_DWORD *)v2 + 9);
      v7 = *((_DWORD *)this + 16);
      v8 = v7 >= v6;
      if (*((_BYTE *)v2 + 40))
        v9 = v7 >= v6;
      else
        v9 = 0;
      if (v9)
        v8 = *((_DWORD *)this + 17) >= v6 || *((_DWORD *)this + 88) == 0;
      if (v2[2] <= a2)
      {
        if (CA::Render::sync_hang_report_level(void)::onceToken[0] != -1)
          dispatch_once(CA::Render::sync_hang_report_level(void)::onceToken, &__block_literal_global_3588);
        if ((_DWORD)CA::Render::sync_hang_report_level(void)::level == 2)
        {
          if (x_log_hook_p())
            goto LABEL_18;
          v19 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_FAULT))
          {
            v20 = *((_DWORD *)this + 4);
            v21 = *((_DWORD *)this + 16);
            v22 = *((_DWORD *)this + 17);
            if (*((_BYTE *)v2 + 40))
              v23 = 114;
            else
              v23 = 99;
            v25 = *((_DWORD *)v2 + 8);
            v24 = *((_DWORD *)v2 + 9);
            *(_DWORD *)buf = 67110400;
            v36 = v20;
            v37 = 1024;
            v38 = v21;
            v39 = 1024;
            v40 = v22;
            v41 = 1024;
            v42 = v23;
            v43 = 1024;
            v44 = v24;
            v45 = 1024;
            v46 = v25;
            v17 = v19;
            v18 = OS_LOG_TYPE_FAULT;
            goto LABEL_29;
          }
        }
        else
        {
          if ((_DWORD)CA::Render::sync_hang_report_level(void)::level == 3)
          {
            v34 = 114;
            if (!*((_BYTE *)v2 + 40))
              v34 = 99;
            x_log_crash("long synchronize for %x: now (%u,%u): req %c%u(%u)", *((_DWORD *)this + 4), *((_DWORD *)this + 16), *((_DWORD *)this + 17), v34, *((_DWORD *)v2 + 9), *((_DWORD *)v2 + 8));
            abort();
          }
          if (x_log_hook_p())
          {
LABEL_18:
            x_log_();
            goto LABEL_30;
          }
          v10 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
          {
            v11 = *((_DWORD *)this + 4);
            v12 = *((_DWORD *)this + 16);
            v13 = *((_DWORD *)this + 17);
            if (*((_BYTE *)v2 + 40))
              v14 = 114;
            else
              v14 = 99;
            v16 = *((_DWORD *)v2 + 8);
            v15 = *((_DWORD *)v2 + 9);
            *(_DWORD *)buf = 67110400;
            v36 = v11;
            v37 = 1024;
            v38 = v12;
            v39 = 1024;
            v40 = v13;
            v41 = 1024;
            v42 = v14;
            v43 = 1024;
            v44 = v15;
            v45 = 1024;
            v46 = v16;
            v17 = v10;
            v18 = OS_LOG_TYPE_ERROR;
LABEL_29:
            _os_log_impl(&dword_184457000, v17, v18, "long synchronize for %x: now (%u,%u): req %c%u(%u)", buf, 0x26u);
          }
        }
      }
LABEL_30:
      if (v2[3] <= a2)
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v26 = x_log_category_render;
          if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
          {
            v27 = *((_DWORD *)this + 4);
            v28 = *((_DWORD *)this + 16);
            v29 = *((_DWORD *)this + 17);
            if (*((_BYTE *)v2 + 40))
              v30 = 114;
            else
              v30 = 99;
            v32 = *((_DWORD *)v2 + 8);
            v31 = *((_DWORD *)v2 + 9);
            *(_DWORD *)buf = 67110400;
            v36 = v27;
            v37 = 1024;
            v38 = v28;
            v39 = 1024;
            v40 = v29;
            v41 = 1024;
            v42 = v30;
            v43 = 1024;
            v44 = v31;
            v45 = 1024;
            v46 = v32;
            _os_log_impl(&dword_184457000, v26, OS_LOG_TYPE_ERROR, "synchronize timed out for %x with (%u,%u): req %c%u(%u)", buf, 0x26u);
          }
        }
LABEL_40:
        CA::Render::send_synchronize_reply((CA::Render *)*((unsigned int *)this + 4), *((_DWORD *)v2 + 2), *((_DWORD *)v2 + 8), *((_DWORD *)this + 16), *((_DWORD *)this + 17));
        *v3 = *v2;
        malloc_zone = (malloc_zone_t *)get_malloc_zone();
        malloc_zone_free(malloc_zone, v2);
        goto LABEL_41;
      }
      if (v8)
        goto LABEL_40;
      v3 = v2;
LABEL_41:
      v2 = *(double **)v3;
    }
    while (*(_QWORD *)v3);
  }
}

void CA::Render::Updater::FilterOp::~FilterOp(CA::Render::Updater::FilterOp *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *(_QWORD *)this = &off_1E15993F0;
  if (*((_BYTE *)this + 16))
  {
    v2 = (unsigned int *)*((_QWORD *)this + 4);
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
    v6 = (unsigned int *)*((_QWORD *)this + 5);
    if (v6)
    {
      v7 = v6 + 2;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
    }
  }
}

{
  CA::Render::Updater::FilterOp::~FilterOp(this);
  JUMPOUT(0x186DBD990);
}

void std::__tree<std::tuple<unsigned short,unsigned short>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::tuple<unsigned short,unsigned short>>::destroy(*a1);
    std::__tree<std::tuple<unsigned short,unsigned short>>::destroy(a1[1]);
    operator delete(a1);
  }
}

void CA::Render::BackdropState::collect(CA::Render::BackdropState *this)
{
  int v1;
  char *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  _BYTE *v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  malloc_zone_t *malloc_zone;
  _QWORD *v24;
  NSObject *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint8_t buf[4];
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v1 = (int)this;
  v33 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::BackdropState::_list_lock);
  v2 = (char *)CA::Render::BackdropState::_list;
  v3 = qword_1EDD0FBD8;
  if (CA::Render::BackdropState::_list == (_UNKNOWN *)qword_1EDD0FBD8)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::BackdropState::_list_lock);
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)v2;
      if (*(_DWORD *)(*(_QWORD *)v2 + 8))
      {
        v6 = (os_unfair_lock_s *)(v5 + 36);
        os_unfair_lock_lock((os_unfair_lock_t)(v5 + 36));
        if (!*(_BYTE *)(v5 + 97))
        {
          v10 = *(_QWORD *)(v5 + 40);
          if (v10)
          {
            if (!*(_DWORD *)(v10 + 56))
              *(_DWORD *)(v10 + 552) = v1;
          }
        }
        v9 = *(_QWORD *)(v5 + 88);
        v8 = (uint64_t *)(v5 + 88);
        v7 = v9;
        if (v9)
        {
          do
          {
            if (*(_DWORD *)(v7 + 24) == v1)
            {
              v8 = (uint64_t *)v7;
            }
            else
            {
              *v8 = *(_QWORD *)v7;
              *(_QWORD *)v7 = v4;
              v4 = (_QWORD *)v7;
            }
            v7 = *v8;
          }
          while (*v8);
        }
        os_unfair_lock_unlock(v6);
      }
      v2 += 8;
    }
    while (v2 != (char *)v3);
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::BackdropState::_list_lock);
    while (v4)
    {
      v11 = v4;
      v4 = (_QWORD *)*v4;
      v12 = (unsigned int *)v11[4];
      v13 = v12 + 2;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
        (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 16))(v12);
      free(v11);
    }
  }
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::BackdropGroup::_list_lock);
  v16 = (char *)CA::Render::BackdropGroup::_list;
  v17 = qword_1EDD0FB98;
  if (CA::Render::BackdropGroup::_list == (_UNKNOWN *)qword_1EDD0FB98)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::BackdropGroup::_list_lock);
  }
  else
  {
    v18 = 0;
    v19 = &unk_1ECDC6000;
    do
    {
      v20 = *(_QWORD *)v16;
      if (*(_DWORD *)(*(_QWORD *)v16 + 8) && *(_DWORD *)(v20 + 552) != v1 && !*(_DWORD *)(v20 + 56))
      {
        os_unfair_lock_lock((os_unfair_lock_t)(v20 + 40));
        if (*(_QWORD *)(v20 + 48) && *(_DWORD *)(v20 + 552) != v1 && !*(_DWORD *)(v20 + 56))
        {
          if (v19[2666])
          {
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v25 = x_log_category_render;
              if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
              {
                v26 = *(_QWORD *)(v20 + 48);
                *(_DWORD *)buf = 134218240;
                v30 = v20;
                v31 = 2048;
                v32 = v26;
                _os_log_impl(&dword_184457000, v25, OS_LOG_TYPE_DEFAULT, "collected backdrop group %p buffer %p\n", buf, 0x16u);
              }
            }
          }
          v21 = v19;
          v22 = *(_QWORD *)(v20 + 48);
          malloc_zone = (malloc_zone_t *)get_malloc_zone();
          v24 = malloc_type_zone_malloc(malloc_zone, 0x10uLL, 0x8BB15036uLL);
          *v24 = v22;
          v24[1] = v18;
          v19 = v21;
          *(_QWORD *)(v20 + 48) = 0;
          X::small_vector_base<CA::Render::BackdropGroup::Item>::resize((char **)(v20 + 64), 0);
          v18 = v24;
        }
        os_unfair_lock_unlock((os_unfair_lock_t)(v20 + 40));
      }
      v16 += 8;
    }
    while (v16 != (char *)v17);
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::BackdropGroup::_list_lock);
    if (v18)
    {
      v27 = v18;
      do
      {
        if (*v27)
          (*(void (**)(_QWORD))(*(_QWORD *)*v27 + 8))(*v27);
        v27 = (_QWORD *)v27[1];
      }
      while (v27);
      do
      {
        v28 = (_QWORD *)v18[1];
        free(v18);
        v18 = v28;
      }
      while (v28);
    }
  }
}

uint64_t backing_callback(CGContext *a1, CA::Layer *this)
{
  CA::Transaction *v4;
  CA::Transaction *v5;

  v4 = (CA::Transaction *)CA::Layer::prepare_context_for_drawing(this, a1, 1);
  v5 = *(CA::Transaction **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 576);
  if (!v5)
    v5 = (CA::Transaction *)CA::Transaction::create(v4);
  return objc_msgSend(CA::Layer::layer_being_drawn(this, v5, 0x800000), "drawInContext:", a1);
}

void CA::Layer::layout_and_display_if_needed(CA::Layer *this, CA::Transaction *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  id *v5;
  int v6;
  uint64_t v7;
  char *v8;
  int v9;
  _DWORD *v10;
  uint64_t v11;
  char v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  NSObject *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  unsigned int *v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD buf[2];
  _QWORD v25[510];

  v2 = MEMORY[0x1E0C80A78](this);
  v4 = v3;
  v5 = (id *)v2;
  v6 = 0;
  v25[508] = *MEMORY[0x1E0C80C00];
  while (1)
  {
    CA::Layer::layout_if_needed((CA::Layer *)v5, (CA::Transaction *)v4);
    v7 = v4[24];
    if ((v7 & 0x80000000) != 0 || (v8 = (char *)v5 + 4 * v7, (v9 = *((_DWORD *)v8 + 68)) == 0))
    {
      v10 = CA::Layer::thread_flags_((CA::Layer *)v5, (CA::Transaction *)v4);
      v9 = *v10;
    }
    else
    {
      v10 = v8 + 272;
    }
    if ((v9 & 0x300) == 0)
      break;
    kdebug_trace();
    v11 = 0;
    v12 = 0;
    while ((*((_BYTE *)v10 + 1) & 3) != 0)
    {
      *(_QWORD *)&buf[0] = 0;
      *((_QWORD *)&buf[0] + 1) = v25;
      buf[1] = xmmword_18474E5E0;
      v13 = v4[25];
      v4[25] = v13 + 1;
      if (!v13)
        os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
      v19 = 0;
      v23 = 0;
      v18 = 0u;
      v20 = v4;
      v21 = buf;
      v22 = 0x20000000100;
      CA::Layer::collect_layers_((CA::Layer *)v5, (uint64_t *)&v18);
      v14 = v19;
      v15 = (_QWORD *)v18;
      CA::Transaction::unlock((CA::Transaction *)v4);
      if (v14)
      {
        for (v11 += v14; v15; v15 = (_QWORD *)v15[1])
        {
          kdebug_trace();
          objc_msgSend(*(id *)(*v15 + 16), "display");
          kdebug_trace();
        }
        v12 = 1;
      }
      x_heap_free((void ***)buf);
    }
    kdebug_trace();
    if ((v12 & 1) == 0)
      break;
    if (++v6 == 102)
    {
      if (x_log_hook_p())
      {
        objc_msgSend((id)objc_msgSend(v5[2], "debugDescription"), "UTF8String");
        x_log_();
      }
      else
      {
        v16 = x_log_category_api;
        if (os_log_type_enabled((os_log_t)x_log_category_api, OS_LOG_TYPE_ERROR))
        {
          v17 = objc_msgSend((id)objc_msgSend(v5[2], "debugDescription"), "UTF8String");
          LODWORD(buf[0]) = 136315138;
          *(_QWORD *)((char *)buf + 4) = v17;
          _os_log_impl(&dword_184457000, v16, OS_LOG_TYPE_ERROR, "Layer (%s) took over 100 attempts to layout and display – this typically implies a client error. Breaking the loop!", (uint8_t *)buf, 0xCu);
        }
      }
      return;
    }
  }
}

void sub_1844CA6B8(_Unwind_Exception *a1)
{
  kdebug_trace();
  _Unwind_Resume(a1);
}

CA::Layer *CA::Layer::layout_if_needed(CA::Layer *this, CA::Transaction *a2)
{
  CA::Layer *result;
  unsigned int *v3;
  unsigned int *v4;
  CA::Layer *v5;
  uint64_t v6;
  char *v7;
  int v8;
  CA::Layer *v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned __int8 v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  CA::Layer *v18;
  id v19;
  void *v20;
  double Current;
  CA::Layer *v22;
  uint64_t v23;
  char *v24;
  int v25;
  int *v26;
  unsigned int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  void **v32[2];
  __int128 v33;
  _QWORD v34[510];

  result = (CA::Layer *)MEMORY[0x1E0C80A78](this);
  v4 = v3;
  v5 = result;
  v34[508] = *MEMORY[0x1E0C80C00];
  v6 = v3[24];
  if ((v6 & 0x80000000) != 0 || (v7 = (char *)result + 4 * v6, (v8 = *((_DWORD *)v7 + 68)) == 0))
  {
    result = (CA::Layer *)CA::Layer::thread_flags_(result, (CA::Transaction *)v3);
    v9 = result;
    v8 = *(_DWORD *)result;
  }
  else
  {
    v9 = (CA::Layer *)(v7 + 272);
  }
  if ((v8 & 0x60) != 0)
  {
    kdebug_trace();
    v10 = v4[25];
    v4[25] = v10 + 1;
    if (!v10)
      os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
    if ((*(_BYTE *)v9 & 0x60) != 0)
    {
      v11 = 0;
      do
      {
        v32[0] = 0;
        v32[1] = (void **)v34;
        v33 = xmmword_18474E5E0;
        v12 = dyld_program_sdk_at_least();
        v13 = v12;
        v29 = 0u;
        v30 = 0u;
        if (v12)
          v14 = 0;
        else
          v14 = 128;
        v28 = 0uLL;
        *((_QWORD *)&v29 + 1) = v4;
        *(_QWORD *)&v30 = v32;
        *((_QWORD *)&v30 + 1) = 0x4000000020;
        v31 = v14;
        CA::Layer::collect_layers_(v5, (uint64_t *)&v28);
        v15 = *((_QWORD *)&v28 + 1);
        v16 = (_QWORD *)v28;
        *(_QWORD *)&v30 = v13 ^ 1u;
        v17 = *((_QWORD *)v4 + 9);
        *(_QWORD *)&v28 = v4;
        *((_QWORD *)&v28 + 1) = v17;
        v29 = (unint64_t)v16;
        *((_QWORD *)v4 + 9) = &v28;
        CA::Transaction::unlock((CA::Transaction *)v4);
        for (; v16; ++v11)
        {
          *((_QWORD *)&v29 + 1) = *v16;
          v18 = (CA::Layer *)*((_QWORD *)&v29 + 1);
          kdebug_trace();
          v19 = CA::Layer::layer_being_drawn(v18, (CA::Transaction *)v4, 0x1000000);
          v20 = v19;
          if (BYTE3(xmmword_1ECDC6AB0) | BYTE4(xmmword_1ECDC6AB0))
          {
            Current = CFAbsoluteTimeGetCurrent();
            objc_msgSend(v20, "layoutSublayers");
            objc_msgSend(v20, "_validateLayoutHashHasChangedWithLayoutTime:", CFAbsoluteTimeGetCurrent() - Current);
          }
          else
          {
            objc_msgSend(v19, "layoutSublayers");
          }
          kdebug_trace();
          v16 = (_QWORD *)v16[1];
        }
        while (v15)
        {
          v22 = *(CA::Layer **)v15;
          v23 = v4[24];
          if ((v23 & 0x80000000) != 0 || (v24 = (char *)v22 + 4 * v23, (v25 = *((_DWORD *)v24 + 68)) == 0))
          {
            v26 = CA::Layer::thread_flags_(v22, (CA::Transaction *)v4);
            v25 = *v26;
          }
          else
          {
            v26 = (int *)(v24 + 272);
          }
          *v26 = v25 & 0xFFFFFF7F;
          v15 = *(_QWORD *)(v15 + 8);
        }
        x_heap_free(v32);
        v27 = v4[25];
        v4[25] = v27 + 1;
        if (!v27)
          os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
        *(_QWORD *)(v28 + 72) = *((_QWORD *)&v28 + 1);
      }
      while ((*(_BYTE *)v9 & 0x60) != 0);
    }
    CA::Transaction::unlock((CA::Transaction *)v4);
    return (CA::Layer *)kdebug_trace();
  }
  return result;
}

void sub_1844CAA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  CA::Transaction *v12;
  int v14;

  kdebug_trace();
  v14 = *((_DWORD *)v12 + 25);
  *((_DWORD *)v12 + 25) = v14 + 1;
  if (!v14)
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
  *(_QWORD *)(a11 + 72) = a12;
  CA::Transaction::unlock(v12);
  kdebug_trace();
  _Unwind_Resume(a1);
}

id CA::Layer::layer_being_drawn(CA::Layer *this, CA::Transaction *a2, int a3)
{
  id v3;
  int v6;
  double *v7;
  double v8;
  double v9;
  double v10;

  v3 = (id)*((_QWORD *)this + 2);
  if ((*((_DWORD *)this + 1) & a3) != 0 && (*((_DWORD *)this + 1) & 0x60000) != 0x40000 && *((_QWORD *)this + 35))
  {
    v6 = *((_DWORD *)a2 + 25);
    *((_DWORD *)a2 + 25) = v6 + 1;
    if (!v6)
      os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
    v7 = (double *)*((_QWORD *)a2 + 13);
    v8 = v7[29];
    v9 = v8;
    if (v8 == 0.0)
    {
      CA::Transaction::Shared::time((CA::Transaction::Shared *)v7);
      v9 = v10 + 0.025;
    }
    v3 = CA::Layer::layer_at_time(this, a2, v9, v8 == 0.0, 1);
    CA::Transaction::unlock(a2);
  }
  return v3;
}

void sub_1844CAB78(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

void CA::Layer::prepare_commit(CA::Layer *this, CA::Transaction *a2)
{
  uint64_t v2;
  CA::Transaction *v3;
  CA::Transaction *v4;
  CA::Layer *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  CA::Transaction *v9;
  uint64_t v10;
  CA::Layer *v11;
  uint64_t **v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  CA::Transaction *v16;
  void ***v17;
  uint64_t v18;
  uint64_t v19;
  void **v20[2];
  __int128 v21;
  _QWORD v22[509];

  v2 = MEMORY[0x1E0C80A78](this);
  v4 = v3;
  v5 = (CA::Layer *)v2;
  v22[508] = *MEMORY[0x1E0C80C00];
  v20[0] = 0;
  v20[1] = (void **)v22;
  v21 = xmmword_18474E5E0;
  v6 = *((_DWORD *)v3 + 25);
  *((_DWORD *)v3 + 25) = v6 + 1;
  if (!v6)
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
  v15 = 0;
  v19 = 0;
  v14 = 0u;
  v16 = v4;
  v17 = v20;
  v18 = 0x400000002;
  CA::Layer::collect_layers_(v5, (uint64_t *)&v14);
  v7 = v15;
  v8 = (_QWORD *)v14;
  CA::Transaction::unlock(v4);
  if (v7)
  {
    kdebug_trace();
    for (; v8; v8 = (_QWORD *)v8[1])
    {
      v10 = *v8;
      v11 = *(CA::Layer **)(*v8 + 16);
      if (v11)
        CA::Layer::prepare_contents(v11, (CALayer *)v4, v9);
      v12 = *(uint64_t ***)(v10 + 280);
      if (v12)
      {
        v13 = *((_DWORD *)v4 + 25);
        *((_DWORD *)v4 + 25) = v13 + 1;
        if (v13
          || (os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock),
              (v12 = *(uint64_t ***)(v10 + 280)) != 0))
        {
          do
          {
            if (((_WORD)v12[7] & 0x66) == 0)
              objc_msgSend(v12[1], "CA_prepareRenderValue");
            v12 = (uint64_t **)*v12;
          }
          while (v12);
        }
        CA::Transaction::unlock(v4);
      }
    }
    kdebug_trace();
  }
  x_heap_free(v20);
}

void sub_1844CAE80(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

CA::Layer *CA::Layer::collect_layers_(CA::Layer *result, uint64_t *a2)
{
  CA::Layer *v3;
  unsigned int *v4;
  uint64_t v5;
  char *v6;
  int v7;
  CA::Layer *v8;
  int v9;
  unsigned int *v10;
  unsigned int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v28;
  int v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;

  v3 = result;
  v4 = (unsigned int *)a2[3];
  v5 = v4[24];
  if ((v5 & 0x80000000) != 0 || (v6 = (char *)result + 4 * v5, (v7 = *((_DWORD *)v6 + 68)) == 0))
  {
    result = (CA::Layer *)CA::Layer::thread_flags_(result, (CA::Transaction *)v4);
    v8 = result;
    v7 = *(_DWORD *)result;
  }
  else
  {
    v8 = (CA::Layer *)(v6 + 272);
  }
  v9 = (*((_DWORD *)a2 + 11) | *((_DWORD *)a2 + 10)) & v7;
  v10 = (unsigned int *)((char *)v3 + 4);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 & ~v9, v10));
  if (v9)
  {
    v12 = *((_DWORD *)a2 + 12);
    if (v12)
    {
      *(_DWORD *)v8 |= v12;
      result = (CA::Layer *)a2[4];
      v13 = *((_QWORD *)result + 2);
      v14 = v13 - 16;
      if (v13 >= 0x10)
      {
        v15 = (_QWORD *)*((_QWORD *)result + 1);
        *((_QWORD *)result + 1) = v15 + 2;
        *((_QWORD *)result + 2) = v14;
      }
      else
      {
        result = (CA::Layer *)x_heap_malloc_small_((uint64_t *)result, 0x10uLL);
        v15 = result;
      }
      v16 = a2[1];
      *v15 = v3;
      v15[1] = v16;
      a2[1] = (uint64_t)v15;
    }
    v17 = *((_DWORD *)a2 + 11);
    if ((v17 & v7) == 0)
      goto LABEL_23;
    *(_DWORD *)v8 &= ~v17;
    v18 = (_QWORD *)*((_QWORD *)v3 + 3);
    if (!v18)
    {
LABEL_21:
      v28 = *((_QWORD *)v3 + 4);
      if (v28)
      {
        _X0 = *(_QWORD *)(v28 + 16);
        __asm { PRFM            #0, [X0,#0x110] }
        result = (CA::Layer *)CA::Layer::collect_layers_();
      }
LABEL_23:
      v31 = *((_DWORD *)a2 + 10);
      if ((v31 & v7) != 0)
      {
        *(_DWORD *)v8 &= ~v31;
        result = (CA::Layer *)a2[4];
        v32 = *((_QWORD *)result + 2);
        v33 = v32 - 16;
        if (v32 >= 0x10)
        {
          v34 = (_QWORD *)*((_QWORD *)result + 1);
          *((_QWORD *)result + 1) = v34 + 2;
          *((_QWORD *)result + 2) = v33;
        }
        else
        {
          result = (CA::Layer *)x_heap_malloc_small_((uint64_t *)result, 0x10uLL);
          v34 = result;
        }
        v35 = *a2;
        *v34 = v3;
        v34[1] = v35;
        *a2 = (uint64_t)v34;
        ++a2[2];
      }
      return result;
    }
    v19 = v18 + 1;
    v20 = v18[2];
    if (v20 == 1)
    {
      if (!v18[3])
      {
        do
        {
LABEL_20:
          v21 = *v19++;
          _X0 = *(_QWORD *)(v21 + 16);
          __asm { PRFM            #0, [X0,#0x110] }
          result = (CA::Layer *)CA::Layer::collect_layers_();
          --v20;
        }
        while (v20);
        goto LABEL_21;
      }
    }
    else if (!v20)
    {
      goto LABEL_21;
    }
    v19 = (uint64_t *)*v19;
    goto LABEL_20;
  }
  return result;
}

void CA::Render::Server::CmdStreamMsg::~CmdStreamMsg(CA::Render::Server::CmdStreamMsg *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  mach_vm_address_t v10;
  unint64_t v11;
  ipc_space_t *v12;
  unint64_t v13;

  v2 = (char *)this + 4176;
  *(_QWORD *)this = off_1E1598CA0;
  v3 = *((_QWORD *)this + 521);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*v2)
  {
    v4 = *((_QWORD *)this + 4);
    if (v4)
      mach_vm_deallocate(*MEMORY[0x1E0C83DA0], *(_QWORD *)v4, *(unsigned int *)(v4 + 12));
    v5 = *((_QWORD *)this + 5);
    if (v5)
    {
      if (*(_BYTE *)(v5 + 11))
      {
        v10 = *(_QWORD *)v5;
        if (*(_QWORD *)v5 && *(_DWORD *)(v5 + 12))
        {
          v11 = 0;
          v12 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
          do
          {
            mach_port_deallocate(*v12, *(_DWORD *)(v10 + 4 * v11++));
            v13 = *(unsigned int *)(v5 + 12);
          }
          while (v11 < v13);
          mach_vm_deallocate(*v12, v10, 4 * v13);
        }
      }
      else
      {
        mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(_DWORD *)v5);
      }
    }
  }
  else
  {
    mach_msg_destroy(*((mach_msg_header_t **)this + 2));
  }
  if (v2[1])
    free(*((void **)this + 2));
  v6 = (unsigned int *)*((_QWORD *)this + 1);
  v7 = v6 + 2;
  do
  {
    v8 = __ldaxr(v7);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v7));
  if (!v9)
    (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
  x_heap_free(*((void ****)this + 6));
}

{
  malloc_zone_t *malloc_zone;

  CA::Render::Server::CmdStreamMsg::~CmdStreamMsg(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void x_heap_free(void ***a1)
{
  void **v1;
  void **v2;
  void **v3;

  if (a1)
  {
    v1 = *a1;
    if (*a1)
    {
      v2 = *a1;
      do
      {
        free(*v2);
        v2 = (void **)v2[1];
      }
      while (v2);
      do
      {
        v3 = (void **)v1[1];
        free(v1);
        v1 = v3;
      }
      while (v3);
    }
  }
}

uint64_t CA::Render::Server::CmdStreamMsg::defer(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  malloc_zone_t *malloc_zone;
  void *v11;
  uint64_t v12;

  if (!*(_QWORD *)(this + 4168))
    __assert_rtn("defer", "render-server.cpp", 1554, "is_valid ()");
  v1 = this;
  v2 = this + 4176;
  if (*(_BYTE *)(this + 4176))
    __assert_rtn("defer", "render-server.cpp", 1555, "!_did_run");
  if (!*(_BYTE *)(this + 4177))
  {
    v3 = (char *)malloc_type_calloc(1uLL, *(unsigned int *)(*(_QWORD *)(this + 16) + 4), 0x2B6B237AuLL);
    if (!v3)
      __assert_rtn("defer", "render-server.cpp", 1561, "msg");
    v4 = v3;
    *(_BYTE *)(v2 + 1) = 1;
    this = (uint64_t)memcpy(v3, *(const void **)(v1 + 16), *(unsigned int *)(*(_QWORD *)(v1 + 16) + 4));
    v5 = *(_QWORD *)(v1 + 16);
    v6 = *(_QWORD *)(v1 + 24) - v5;
    *(_QWORD *)(v1 + 24) = &v4[v6];
    v7 = *(_QWORD *)(v1 + 32);
    if (v7)
    {
      *(_QWORD *)(v1 + 32) = &v4[v7 - v5];
    }
    else
    {
      v8 = *(_QWORD *)(v1 + 4168);
      if (v8)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
        v5 = *(_QWORD *)(v1 + 16);
      }
      v9 = *(unsigned int *)(v5 + 4);
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      v11 = malloc_type_zone_malloc(malloc_zone, 0x58uLL, 0x8BB15036uLL);
      if (!v11)
      {
        *(_QWORD *)(v1 + 4168) = 0;
        __assert_rtn("defer", "render-server.cpp", 1580, "_decoder");
      }
      this = CA::Render::Decoder::Decoder((uint64_t)v11, *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 24), v9 - v6);
      *(_QWORD *)(v1 + 4168) = this;
    }
    v12 = *(_QWORD *)(v1 + 40);
    if (v12)
      *(_QWORD *)(v1 + 40) = &v4[v12 - *(_QWORD *)(v1 + 16)];
    *(_QWORD *)(v1 + 16) = v4;
  }
  return this;
}

void CA::Render::Decoder::~Decoder(CA::Render::Decoder *this)
{
  malloc_zone_t *malloc_zone;

  CA::Render::Coder::~Coder(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CA::Render::Coder::~Coder(CA::Render::Coder *this)
{
  uint64_t *v2;
  ipc_space_t *v3;
  int v4;
  void (*v5)(uint64_t, uint64_t);
  int v6;

  *(_QWORD *)this = off_1E1598770;
  v2 = (uint64_t *)*((_QWORD *)this + 6);
  if (v2)
  {
    v3 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
    do
    {
      v4 = *((_DWORD *)v2 + 2);
      if (v4 == 2)
      {
        if (*((_BYTE *)v2 + 24))
          mach_port_deallocate(*v3, *((_DWORD *)v2 + 4));
      }
      else if (v4 == 1)
      {
        v5 = (void (*)(uint64_t, uint64_t))v2[4];
        if (v5)
          v5(v2[2], v2[5]);
      }
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 0x100) != 0)
  {
    munmap(*((void **)this + 3), *((_QWORD *)this + 5) - *((_QWORD *)this + 3));
    v6 = *((_DWORD *)this + 4);
  }
  if ((v6 & 1) != 0)
    x_heap_free(*((void ****)this + 1));
}

{
  malloc_zone_t *malloc_zone;

  CA::Render::Coder::~Coder(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

uint64_t CA::Layer::prepare_contents(CA::Layer *this, CALayer *a2, CA::Transaction *a3)
{
  int isa_high;
  void *v6;
  void *v7;
  CFTypeID v8;
  CGColorSpace *v9;
  double v10;
  uint64_t v11;
  CGImage *v12;

  kdebug_trace();
  isa_high = HIDWORD(a2[3].super.isa);
  HIDWORD(a2[3].super.isa) = isa_high + 1;
  if (!isa_high)
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
  v6 = (void *)-[CA::Layer contents](this, "contents");
  v7 = v6;
  if (v6)
  {
    CFRetain(v6);
    CA::Transaction::unlock((CA::Transaction *)a2);
    v8 = CFGetTypeID(v7);
    if (v8 == CGImageGetTypeID())
    {
      v9 = (CGColorSpace *)-[CA::Layer _renderImageCopyFlags](this, "_renderImageCopyFlags");
      v11 = *(_QWORD *)&a2[1]._attr.refcount;
      if (v11)
        v12 = *(CGImage **)(v11 + 112);
      else
        v12 = (CGImage *)CAGetColorSpace(0x1Du);
      CA::Render::prepare_image((CA::Render *)v7, v12, v9, v10);
    }
    else
    {
      objc_msgSend(v7, "CA_prepareRenderValue");
    }
    CFRelease(v7);
  }
  else
  {
    CA::Transaction::unlock((CA::Transaction *)a2);
  }
  return kdebug_trace();
}

void sub_1844CB578(_Unwind_Exception *a1)
{
  kdebug_trace();
  _Unwind_Resume(a1);
}

char *CA::Render::prepare_image(CA::Render *this, CGImage *a2, CGColorSpace *a3, double a4)
{
  char *result;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  result = CA::Render::copy_image(this, a2, a3, 0.0, 1.0);
  if (result)
  {
    v5 = (unsigned int *)(result + 8);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      return (char *)(*(uint64_t (**)(char *))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

void sub_1844CC160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  CACGContextEvaluator::~CACGContextEvaluator((CGColorSpaceRef *)va);
  _Unwind_Resume(a1);
}

void sub_1844CC368(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t CA::Layer::prepare_context_for_drawing(CA::Layer *this, CGContext *a2, int a3)
{
  void *v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  CGAffineTransform v11;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGAffineTransform transform;
  CGAffineTransform v15;
  CGAffineTransform v16;
  CGAffineTransform v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = (void *)*((_QWORD *)this + 2);
  memset(&v17, 0, sizeof(v17));
  CGContextGetBaseCTM();
  if ((*((_BYTE *)this + 56) & 1) != 0)
  {
    objc_msgSend(v6, "contentsScale");
    v8 = v7;
    CGContextScaleCTM(a2, v7, v7);
    v15 = v17;
    CGAffineTransformScale(&v16, &v15, v8, v8);
    v17 = v16;
  }
  if (a3)
  {
    if ((*((_DWORD *)this + 1) & 0x400000) == 0)
    {
      v9 = *((double *)this + 15);
      transform.b = 0.0;
      transform.c = 0.0;
      transform.a = 1.0;
      *(_OWORD *)&transform.d = xmmword_18474DFF0;
      transform.ty = v9;
      CGContextConcatCTM(a2, &transform);
      if (dyld_program_sdk_at_least())
      {
        t1.b = 0.0;
        t1.c = 0.0;
        t1.a = 1.0;
        *(_OWORD *)&t1.d = xmmword_18474DFF0;
        t1.ty = v9;
        t2 = v17;
        CGAffineTransformConcat(&v16, &t1, &t2);
        v17 = v16;
      }
    }
  }
  if ((*((_BYTE *)this + 55) & 4) != 0)
  {
    CGContextTranslateCTM(a2, -*((double *)this + 12), -*((double *)this + 13));
    if (dyld_program_sdk_at_least())
    {
      v11 = v17;
      CGAffineTransformTranslate(&v16, &v11, -*((double *)this + 12), -*((double *)this + 13));
      v17 = v16;
    }
  }
  CGContextSetBaseCTM();
  return objc_msgSend(v6, "_prepareContext:", a2);
}

uint64_t x_blame_allocations(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t StatusReg;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (!*MEMORY[0x1E0C9A980])
    return (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
  v6[0] = backing_blame_callback;
  v6[1] = MEMORY[0x1E0C80A78](a1);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v4 = *(_QWORD *)(StatusReg + 592);
  *(_QWORD *)(StatusReg + 592) = v6;
  result = (*(uint64_t (**)(uint64_t))(v5 + 16))(v5);
  *(_QWORD *)(StatusReg + 592) = v4;
  return result;
}

uint64_t CABackingStoreSetDefaultAccelFlags(uint64_t a1)
{
  if (accel_once[0] != -1)
    dispatch_once_f(accel_once, 0, (dispatch_function_t)accel_init);
  if (accel_defined == 1)
  {
    if (accel_enabled)
      return a1 | 0x100;
    else
      return a1 & 0xFFFFFEFF;
  }
  return a1;
}

uint64_t CA::Render::format_default_colorspace(CA::Render *this)
{
  unsigned int v1;
  uint64_t result;
  NSObject *v3;
  const char *v4;
  uint8_t buf[4];
  const char *v6;
  uint64_t v7;

  v1 = this;
  v7 = *MEMORY[0x1E0C80C00];
  switch((int)this)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 21:
    case 22:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
      result = CAGetColorSpace(0x1Du);
      break;
    case 9:
      goto LABEL_13;
    case 10:
    case 18:
    case 19:
    case 25:
    case 26:
    case 27:
    case 28:
      result = CAGetColorSpace(3u);
      break;
    case 29:
    case 30:
      result = CAGetColorSpace(4u);
      break;
    default:
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v3 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          if (v1 > 0x23)
            v4 = "UNKNOWN";
          else
            v4 = off_1E159CBE8[v1];
          *(_DWORD *)buf = 136315138;
          v6 = v4;
          _os_log_impl(&dword_184457000, v3, OS_LOG_TYPE_DEFAULT, "Unsupported image format '%s' for default colorspace\n", buf, 0xCu);
        }
      }
LABEL_13:
      result = 0;
      break;
  }
  return result;
}

uint64_t CABackingStoreCreate()
{
  uint64_t Instance;
  uint64_t v1;
  CGColorSpace *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (memory_once != -1)
    dispatch_once_f(&memory_once, 0, (dispatch_function_t)register_memory_handler);
  if (!CABackingStoreGetTypeID::type)
    CABackingStoreGetTypeID::type = _CFRuntimeRegisterClass();
  Instance = _CFRuntimeCreateInstance();
  v1 = Instance;
  if (Instance)
  {
    *(_OWORD *)(Instance + 16) = 0u;
    *(_OWORD *)(Instance + 464) = 0u;
    *(_OWORD *)(Instance + 480) = 0u;
    *(_OWORD *)(Instance + 432) = 0u;
    *(_OWORD *)(Instance + 448) = 0u;
    *(_OWORD *)(Instance + 400) = 0u;
    *(_OWORD *)(Instance + 416) = 0u;
    *(_OWORD *)(Instance + 368) = 0u;
    *(_OWORD *)(Instance + 384) = 0u;
    *(_OWORD *)(Instance + 336) = 0u;
    *(_OWORD *)(Instance + 352) = 0u;
    *(_OWORD *)(Instance + 304) = 0u;
    *(_OWORD *)(Instance + 320) = 0u;
    *(_OWORD *)(Instance + 272) = 0u;
    *(_OWORD *)(Instance + 288) = 0u;
    *(_OWORD *)(Instance + 240) = 0u;
    *(_OWORD *)(Instance + 256) = 0u;
    *(_OWORD *)(Instance + 208) = 0u;
    *(_OWORD *)(Instance + 224) = 0u;
    *(_OWORD *)(Instance + 176) = 0u;
    *(_OWORD *)(Instance + 192) = 0u;
    *(_OWORD *)(Instance + 144) = 0u;
    *(_OWORD *)(Instance + 160) = 0u;
    *(_OWORD *)(Instance + 112) = 0u;
    *(_OWORD *)(Instance + 128) = 0u;
    *(_OWORD *)(Instance + 96) = 0u;
    *(_OWORD *)(Instance + 48) = 0u;
    *(_OWORD *)(Instance + 64) = 0u;
    *(_OWORD *)(Instance + 32) = 0u;
    *(_OWORD *)(Instance + 80) = 0u;
    pthread_mutex_init((pthread_mutex_t *)(Instance + 16), 0);
    pthread_cond_init((pthread_cond_t *)(v1 + 80), 0);
    v2 = (CGColorSpace *)CAGetColorSpace(0x1Du);
    *(_QWORD *)(v1 + 160) = CGColorSpaceRetain(v2);
    pthread_mutex_lock(&buffer_list_mutex);
    v3 = buffer_list;
    if (buffer_list)
      *(_QWORD *)(buffer_list + 176) = v1;
    v4 = 0;
    *(_QWORD *)(v1 + 168) = v3;
    buffer_list = v1;
    v5 = *(_QWORD *)(v1 + 400);
    do
    {
      *(_QWORD *)(v1 + v4 + 184) = v5;
      v6 = v1 + v4 + 184;
      v4 += 72;
      v5 = v6;
    }
    while (v4 != 216);
    *(_QWORD *)(v1 + 400) = v1 + 328;
    pthread_mutex_unlock(&buffer_list_mutex);
  }
  return v1;
}

void CA::OGL::AsynchronousItem::unlatch(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  uint64_t v3;

  v2 = this + 52;
  os_unfair_lock_lock(this + 52);
  v3 = *(_QWORD *)&this[82]._os_unfair_lock_opaque;
  *(_QWORD *)&this[82]._os_unfair_lock_opaque = 0;
  os_unfair_lock_unlock(v2);
  if (v3)
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v3 + 32));
}

uint64_t default_contents_image_format(id *a1)
{
  unsigned __int8 *v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t result;

  v2 = (unsigned __int8 *)CA::Layer::retain_context((CA::Layer *)a1);
  if (v2)
  {
    v3 = v2[240];
    CA::Context::unref((CA::Context *)v2, 0);
    v4 = objc_msgSend(a1[2], "isOpaque");
    switch(v3)
    {
      case 0:
        goto LABEL_8;
      case 1:
        if (v4)
          v5 = 17;
        else
          v5 = 13;
        LOBYTE(v3) = 1;
        break;
      case 2:
        if (v4)
          v5 = 33;
        else
          v5 = 35;
        LOBYTE(v3) = 2;
        break;
      case 3:
        v5 = 9;
        break;
      case 4:
        if (v4)
          v5 = 10;
        else
          v5 = 18;
        LOBYTE(v3) = 4;
        break;
      case 5:
        v5 = 36;
        break;
      default:
        v5 = 1;
        break;
    }
  }
  else
  {
    v4 = objc_msgSend(a1[2], "isOpaque");
LABEL_8:
    LOBYTE(v3) = 0;
    if (v4)
      v5 = 3;
    else
      v5 = 1;
  }
  LODWORD(result) = objc_msgSend(a1[2], "_overrideImageFormat");
  if ((*((_BYTE *)a1 + 58) & 0x40) == 0)
    *((_DWORD *)a1 + 11) = *((_DWORD *)a1 + 11) & 0xFFFFFFF8 | v3 & 7;
  if ((_DWORD)result == -1)
    return v5;
  else
    return result;
}

uint64_t CA::Render::release_object(CA::Render *this, unsigned int *a2, void *a3)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t result;

  if (a2)
  {
    v3 = a2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a2 + 16))(a2);
  }
  return result;
}

void CA::OGL::MetalContext::release_display_surfaces(CA::OGL::MetalContext *this, CA::WindowServer::Surface *a2, void *a3)
{
  uint64_t v4;
  os_unfair_lock_s *v5;
  _QWORD *v6;
  uint64_t i;

  v4 = *(_QWORD *)a2;
  v5 = (os_unfair_lock_s *)(*(_QWORD *)a2 + 2744);
  os_unfair_lock_lock(v5);
  v6 = *(_QWORD **)(v4 + 2752);
  if (v6)
    *(_QWORD *)(v4 + 2752) = x_list_remove(v6, (uint64_t)a2);
  os_unfair_lock_unlock(v5);
  if (*(_QWORD *)a2)
  {
    for (i = 8; i != 24; i += 8)
      CA::OGL::MetalContext::finalize_surface(*(_QWORD *)a2, *(_QWORD *)((char *)a2 + i));
  }
  JUMPOUT(0x186DBD990);
}

void CA::CG::AccelQueue::flush_all_renderers(uint64_t a1, int a2)
{
  CA::CG::Renderer *v4;
  uint64_t v5;
  uint64_t i;

  if (a2)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::CG::AccelRenderer::_list_lock);
    v5 = CA::CG::AccelRenderer::_list;
    if (CA::CG::AccelRenderer::_list)
    {
      do
      {
        v4 = (CA::CG::Renderer *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, 1, v5);
        v5 = *(_QWORD *)(v5 + 4272);
      }
      while (v5);
      if (a2 == 3)
      {
        for (i = CA::CG::AccelRenderer::_list; i; i = *(_QWORD *)(i + 4272))
          v4 = (CA::CG::Renderer *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, 3, i);
      }
    }
    CA::CG::Renderer::flush_released_objects(v4);
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::CG::AccelRenderer::_list_lock);
  }
}

uint64_t CA::CG::AccelQueue::flush_renderer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const __CFString *a7)
{
  int v8;
  CA::CG::AccelRenderer **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  unsigned int v16;
  uint64_t v17;
  int v18;

  v8 = a2;
  if (*(_BYTE *)(a1 + 209))
    v10 = *(CA::CG::AccelRenderer ***)(a1 + 200);
  else
    v10 = 0;
  v11 = a3;
  if (a3
    || (v11 = CA::CG::AccelRenderer::acquire(*(CA::CG::AccelRenderer **)(a1 + 176), (CA::CG::AccelDrawable *)(a1 + 184), v10, *(unsigned int *)(a1 + 24), 1, *(const __CFString **)(a1 + 192), a7)) != 0)
  {
    *(_BYTE *)(a1 + 208) = 0;
    (*(void (**)(_QWORD, uint64_t, CA::CG::AccelRenderer **))(**(_QWORD **)(a1 + 176) + 64))(*(_QWORD *)(a1 + 176), a2, v10);
    CA::CG::AccelRenderer::unlock_surface((CA::CG::AccelRenderer *)v11);
    CA::CG::Renderer::end_rendering((CA::CG::Renderer *)v11);
    CA::CG::Renderer::end_rendering((CA::CG::Renderer *)v11);
    v12 = *(_QWORD *)(v11 + 8);
    if (v12)
    {
      (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v12 + 408))(v12, v8 == 3);
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
      v13 = *(unsigned int *)(v11 + 288);
      v14 = *(_QWORD *)(v11 + 8);
      v15 = *(double *)(v14 + 224);
      if (*(double *)(v11 + 16 * v13 + 160) + 0.03125 >= v15)
      {
        v18 = *(_DWORD *)(v11 + 152);
      }
      else
      {
        if ((_DWORD)v13 == 7)
          v16 = 0;
        else
          v16 = v13 + 1;
        *(_DWORD *)(v11 + 288) = v16;
        v17 = v11 + 16 * v16;
        *(double *)(v17 + 160) = v15;
        v18 = *(_DWORD *)(v11 + 152);
        *(_DWORD *)(v17 + 168) = v18;
      }
      *(_QWORD *)(v11 + 296) = 0;
      *(_DWORD *)(v11 + 152) = v18 + 1;
      if (!a3)
        goto LABEL_16;
    }
    else
    {
      v14 = 0;
      if (!a3)
      {
LABEL_16:
        *(_BYTE *)(v11 + 4228) = 0;
        *(_DWORD *)(v14 + 336) = 0;
        os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 4224));
      }
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

void CA::CG::Renderer::end_rendering(CA::CG::Renderer *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_signpost_id_t v7;
  NSObject *v8;
  uint8_t buf[4];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 4176) & 1) != 0)
  {
    *((_BYTE *)this + 4176) &= ~1u;
    v2 = *((_QWORD *)this + 1);
    if (v2)
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v2 + 1016))(v2, (char *)this + 1296);
      if (BYTE13(xmmword_1ECDC6AD0))
      {
        if (CA::CG::cg_perf_log(void)::once_token[0] != -1)
          dispatch_once(CA::CG::cg_perf_log(void)::once_token, &__block_literal_global_10);
        v7 = *((_QWORD *)this + 521);
        if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v8 = CA::CG::cg_perf_log(void)::log;
          if (os_signpost_enabled((os_log_t)CA::CG::cg_perf_log(void)::log))
          {
            *(_DWORD *)buf = 138543362;
            v10 = (uint64_t)_MXSignpostMetricsSnapshot();
            _os_signpost_emit_with_name_impl(&dword_184457000, v8, OS_SIGNPOST_INTERVAL_END, v7, "Rendering", "\n%{public, signpost:metrics}@", buf, 0xCu);
          }
        }
      }
      v3 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 184))(*((_QWORD *)this + 1), 0);
      if ((_DWORD)v3)
      {
        v4 = v3;
        if (x_log_hook_p())
        {
          (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 192))(*((_QWORD *)this + 1), v4);
          x_log_();
        }
        else
        {
          v5 = x_log_category_cg;
          if (os_log_type_enabled((os_log_t)x_log_category_cg, OS_LOG_TYPE_ERROR))
          {
            v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 192))(*((_QWORD *)this + 1), v4);
            *(_DWORD *)buf = 136315138;
            v10 = v6;
            _os_log_impl(&dword_184457000, v5, OS_LOG_TYPE_ERROR, "CoreAnimation: rendering error %s\n", buf, 0xCu);
          }
        }
      }
    }
  }
}

void CA::OGL::MetalContext::end_rendering(uint64_t a1)
{
  double v2;
  void *v3;
  os_signpost_id_t v4;
  NSObject *v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  *(_WORD *)(a1 + 3280) |= 0x80u;
  *(float *)&v2 = CA::OGL::Context::end_rendering((CA::OGL::Context *)a1);
  v3 = *(void **)(a1 + 3008);
  if (!v3)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 600) != 1)
  {
LABEL_7:
    objc_msgSend(v3, "endScope");
    goto LABEL_8;
  }
  if ((objc_msgSend(*(id *)(a1 + 3000), "isCapturing", v2) & 1) == 0)
  {
    v3 = *(void **)(a1 + 3008);
    goto LABEL_7;
  }
  CA::OGL::MetalContext::flush((CA::OGL::MetalContext *)a1, 0);
  objc_msgSend(*(id *)(a1 + 3008), "endScope");
  objc_msgSend(*(id *)(a1 + 3000), "stopCapture");
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v5 = x_log_category_ogl_metal;
    if (os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v8) = 0;
      _os_log_impl(&dword_184457000, v5, OS_LOG_TYPE_DEFAULT, "Finished capturing GPU frames\n", (uint8_t *)&v8, 2u);
    }
  }
LABEL_8:
  v4 = *(_QWORD *)(a1 + 4056);
  if (v4)
  {
    if (v4 != -1)
    {
      v6 = CA::OGL::MetalContext::_perf_log;
      if (os_signpost_enabled((os_log_t)CA::OGL::MetalContext::_perf_log))
      {
        v7 = _MXSignpostMetricsSnapshot();
        v8 = 138543362;
        v9 = v7;
        _os_signpost_emit_with_name_impl(&dword_184457000, v6, OS_SIGNPOST_INTERVAL_END, v4, "Rendering", "\n%{public, signpost:metrics}@", (uint8_t *)&v8, 0xCu);
      }
    }
    *(_QWORD *)(a1 + 4056) = 0;
  }
}

float CA::OGL::Context::end_rendering(CA::OGL::Context *this)
{
  uint64_t v2;
  float result;

  v2 = *((_QWORD *)this + 32);
  if (v2 != *((_QWORD *)this + 31))
    goto LABEL_2;
  if (v2)
    LODWORD(v2) = (*(unsigned __int8 *)(v2 + 72) >> 1) & 0x1F;
  if (*((_DWORD *)this + 61) != (_DWORD)v2)
LABEL_2:
    CA::OGL::Context::prepare_destination_(this);
  (*(void (**)(CA::OGL::Context *))(*(_QWORD *)this + 240))(this);
  *((_QWORD *)this + 29) = 0;
  if (*(float *)&dword_1ECDC6930 > 0.0)
    *(float *)&dword_1ECDC6930 = *(float *)&dword_1ECDC6930 + -1.0;
  result = *(float *)&dword_1ECDC69CC;
  if (*(float *)&dword_1ECDC69CC > 0.0)
  {
    result = *(float *)&dword_1ECDC69CC + -1.0;
    *(float *)&dword_1ECDC69CC = *(float *)&dword_1ECDC69CC + -1.0;
  }
  return result;
}

double CA::OGL::MetalContext::restore_state(CA::OGL::MetalContext *this)
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v1 = 0;
  v2 = *((_QWORD *)this + 3);
  do
  {
    *(_OWORD *)(v2 + 96 + v1) = xmmword_18474E210;
    v1 += 16;
  }
  while (v1 != 48);
  *(_BYTE *)(v2 + 480) = 1;
  *(_BYTE *)(v2 + 481) &= ~1u;
  *((_BYTE *)this + 65) &= ~1u;
  result = NAN;
  *((_QWORD *)this + 7) = -1;
  return result;
}

uint64_t CA::OGL::MetalContext::tile_downsample_surface(uint64_t a1, uint64_t a2, unsigned int a3, _DWORD *a4, int8x8_t a5)
{
  uint64_t v6;
  uint8x8_t v7;
  unsigned int v8;
  uint64_t v10;
  uint64_t v12;
  uint64_t tile_pipeline;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  _QWORD v20[3];
  _WORD v21[2];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 2936))
    return 0;
  v6 = 0;
  if ((*(_BYTE *)(a2 + 69) & 0x40) != 0)
  {
    a5.i32[0] = a3;
    v7 = (uint8x8_t)vcnt_s8(a5);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.i32[0] <= 1u)
    {
      v8 = __clz(__rbit32(a3));
      if (v8 >= 4)
        __assert_rtn("tile_downsample_surface", "ogl-metal.mm", 14179, "index < 4");
      v10 = *(_QWORD *)(a1 + 256);
      if ((*(_BYTE *)(v10 + 68) & 8) != 0)
      {
        v12 = byte_18474ECEC[v8];
        tile_pipeline = CA::OGL::MetalContext::get_tile_pipeline(a1, byte_18474ECEC[v8], *(_QWORD *)(v10 + 120));
        v14 = a4[1];
        v21[0] = *a4;
        v21[1] = v14;
        v15 = *((unsigned __int8 *)&CA::OGL::MetalContext::tile_shader_type_info + 16 * v12 + 8);
        v16 = objc_msgSend(*(id *)(a1 + 2936), "tileWidth") / v15;
        v17 = objc_msgSend(*(id *)(a1 + 2936), "tileHeight") / v15;
        objc_msgSend(*(id *)(a1 + 2936), "setRenderPipelineState:", tile_pipeline);
        objc_msgSend(*(id *)(a1 + 2936), "setTileTexture:atIndex:", *(_QWORD *)(a2 + 96), 0);
        objc_msgSend(*(id *)(a1 + 2936), "setTileBytes:length:atIndex:", v21, 4, 0);
        v18 = *(void **)(a1 + 2936);
        v20[0] = v16;
        v20[1] = v17;
        v6 = 1;
        v20[2] = 1;
        objc_msgSend(v18, "dispatchThreadsPerTile:", v20);
        *(_QWORD *)(a1 + 3312) = tile_pipeline;
        *(_WORD *)(a2 + 75) = *(_WORD *)(a2 + 75) & 0xFF5F | 0x80;
        return v6;
      }
      return 0;
    }
  }
  return v6;
}

void CA::OGL::BlurState::tile_simd_blur(float32x2_t *this, uint64_t a2, const float *a3, uint64_t a4)
{
  __int16 v8;
  int v9;
  float32x2_t *v10;
  uint64_t v11;
  float32x2_t *v12;
  uint64_t v13;
  uint64_t v14;
  float32x2_t v15;
  float32x2_t v16;
  int32x2_t v17;
  int64x2_t v18;
  int8x8_t v19;
  int64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x2_t v26;
  int32x2_t v27;
  int v28;
  int v29;
  int8x8_t v31;
  unsigned int v33;
  float32x2_t v34;
  uint64_t v35;
  float32x2_t v36;
  float32x2_t v37;
  int32x2_t v38;
  float v39;
  CA::OGL::Context *v40;
  __int16 v41;
  int v42;
  float32x2_t *v43;
  _QWORD v44[2];
  int32x4_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v8 = this[4].i16[0];
  v9 = v8;
  v10 = this + 1;
  v11 = v8 & 1;
  v12 = &this[v11 + 11];
  if (v9 < 0)
    v12 = this + 1;
  if ((this[13].i8[4] & 1) != 0)
    v13 = 16;
  else
    v13 = 32;
  v14 = v11 ^ 1;
  v15 = this[6];
  v16 = vsub_f32(this[7], v15);
  v17 = vceqz_f32(v16);
  v18.i64[0] = v17.i32[0];
  v18.i64[1] = v17.i32[1];
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v18, 1), (int8x16_t)v18).u64[0] & 0x8000000000000000) != 0
    || (v19 = vmvn_s8(vorr_s8((int8x8_t)vcltz_f32(v16), (int8x8_t)vcgez_f32(v16))),
        v20.i64[0] = v19.i32[0],
        v20.i64[1] = v19.i32[1],
        (vorrq_s8((int8x16_t)vdupq_laneq_s64(v20, 1), (int8x16_t)v20).u64[0] & 0x8000000000000000) != 0))
  {
    memset(&v45, 0, sizeof(v45));
    v27 = 0;
    v26 = (int32x2_t)-1;
  }
  else
  {
    v21 = vcvtq_f64_f32(v15);
    v22 = vmaxnmq_f64(v21, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000));
    v23 = vminnmq_f64(vaddq_f64(v21, vcvtq_f64_f32(v16)), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL));
    v24 = (int32x4_t)vcvtmq_s64_f64(v22);
    v25 = (int32x4_t)vsubq_s64(vcvtpq_s64_f64(v23), (int64x2_t)v24);
    v45 = vuzp1q_s32(v24, v25);
    v26 = vadd_s32(vmovn_s64((int64x2_t)v24), (int32x2_t)-1);
    v27 = vmovn_s64((int64x2_t)v25);
  }
  if (this[4].i8[2])
  {
    v28 = v27.i32[0];
    if (v27.i32[0] <= v27.i32[1])
      v29 = v27.i32[1];
    else
      v29 = v27.i32[0];
    if (v27.i32[0] >= v27.i32[1])
      v28 = v27.i32[1];
    if (v29 <= 1073741822 && v28 >= 1)
    {
      v31 = (int8x8_t)vadd_s32(v27, (int32x2_t)0x200000002);
      if (v31.i32[1] < 1 || v31.i32[0] < 1)
        v33 = -1;
      else
        v33 = 0;
      *(int32x2_t *)v45.i8 = v26;
      v45.u64[1] = (unint64_t)vbic_s8(v31, (int8x8_t)vdup_n_s32(v33));
    }
  }
  v34 = *v12;
  if (CA::OGL::PingPongState::create_surface((CA::OGL::PingPongState *)this, v14, (const CA::Bounds *)&v45))
  {
    v35 = (uint64_t)this[v14 + 11];
    (*(void (**)(float32x2_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)this + 704))(*this, v35, v13, v13);
    CA::OGL::Context::push_surface((uint64_t)*this, v35, 0, 64, 0);
    v36 = *this;
    v37 = this[6];
    v38 = vcvt_s32_f32(vsub_f32(this[7], v37));
    v44[0] = vcvt_s32_f32(v37);
    v44[1] = v38;
    (*(void (**)(float32x2_t, float32x2_t, _QWORD *, const float *, uint64_t, uint64_t))(**(_QWORD **)&v36
                                                                                                + 888))(v36, v34, v44, a3, a2, a4);
    v45.i64[0] = *(_QWORD *)(*(_QWORD *)&v34 + 32);
    v39 = 32.0;
    if ((this[13].i8[4] & 1) != 0)
      v39 = 16.0;
    CA::OGL::BlurState::process_edges((CA::OGL::BlurState *)this, v39, 1.0, 1.0, v45.i32);
    v40 = (CA::OGL::Context *)*this;
    if ((*(_WORD *)(*(_QWORD *)this + 816) & 0x7000) != 0)
    {
      v41 = this[4].i16[0];
      v42 = v41;
      v43 = &this[(v41 & 1) + 11];
      if (v42 < 0)
        v43 = v10;
      *(_BYTE *)(*((_QWORD *)v40 + 31) + 73) = *(_BYTE *)(*((_QWORD *)v40 + 31) + 73) & 0xC0 | *(_BYTE *)(*(_QWORD *)v43 + 73) & 0x3F;
      v40 = (CA::OGL::Context *)*this;
    }
    CA::OGL::Context::pop_surface(v40);
    ++this[4].i16[0];
  }
}

uint64_t CA::OGL::MetalContext::tile_simd_blur_surface(CA::OGL::Context *this, int32x2_t *a2, int32x2_t *a3, float32x4_t *a4, int a5, unsigned int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  unsigned int v19;
  int32x2_t v20;
  int32x2_t v21;
  int32x2_t v22;
  int32x2_t v23;
  int32x2_t v24;
  int32x2_t v25;
  uint32x2_t v26;
  int32x2_t v27;
  int32x2_t v28;
  int32x2_t v29;
  int32x2_t v30;
  int32x2_t v31;
  __int16 v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  _WORD *v38;
  uint64_t tile_pipeline;
  void *v40;
  int32x2_t v41;
  __int128 v42;
  _QWORD v43[3];
  __int128 v44;
  uint64_t v45;
  int64x2_t v46;
  uint64_t v47;
  _WORD v48[4];
  int v49;
  _WORD v50[27];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v12 = *((_QWORD *)this + 32);
  if (v12 != *((_QWORD *)this + 31))
    goto LABEL_2;
  if (v12)
    LODWORD(v12) = (*(unsigned __int8 *)(v12 + 72) >> 1) & 0x1F;
  if (*((_DWORD *)this + 61) != (_DWORD)v12)
LABEL_2:
    CA::OGL::Context::prepare_destination_(this);
  if ((*((_WORD *)this + 408) & 0x200) != 0)
  {
    v13 = *((_QWORD *)this + 22);
    if (v13)
    {
      *((_WORD *)this + 408) &= ~0x200u;
    }
  }
  result = CA::OGL::MetalContext::start_render_encoder(this);
  if ((_DWORD)result)
  {
    v15 = 0;
    v16 = *((_QWORD *)this + 31);
    while (1)
    {
      v17 = (char *)&CA::OGL::MetalContext::tile_simd_blur_surface(CA::OGL::Surface *,CA::Bounds,float const*,int,BOOL)::shaders
          + v15;
      if (*(_DWORD *)((char *)&CA::OGL::MetalContext::tile_simd_blur_surface(CA::OGL::Surface *,CA::Bounds,float const*,int,BOOL)::shaders
                     + v15) < a5)
        break;
      v15 += 12;
      if (v15 == 84)
      {
        v18 = 2;
        v19 = 10;
        goto LABEL_15;
      }
    }
    v18 = *((_DWORD *)v17 + 1);
    v19 = v17[8];
LABEL_15:
    v20 = *(int32x2_t *)(v16 + 32);
    v21 = vsub_s32(*a3, v20);
    v22 = (int32x2_t)vsra_n_u32((uint32x2_t)v21, (uint32x2_t)vcltz_s32(v21), 0x1BuLL);
    v23 = vsra_n_s32(vcltz_s32(vsub_s32(v21, (int32x2_t)(*(_QWORD *)&v22 & 0xFFFFFFE0FFFFFFE0))), v22, 5uLL);
    v24 = vadd_s32(a3[1], v21);
    v22.i32[0] = 0;
    v22.i32[1] = v18;
    v25 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(a6), 0x1FuLL)), (int8x8_t)v18, (int8x8_t)v22);
    v26 = vsra_n_u32((uint32x2_t)v24, (uint32x2_t)vcltz_s32(v24), 0x1BuLL);
    v27 = vcgtz_s32(vsub_s32(v24, (int32x2_t)(*(_QWORD *)&v26 & 0xFFFFFFE0FFFFFFE0)));
    v28 = vsub_s32((int32x2_t)vshr_n_u32(v26, 5uLL), v23);
    v29 = vshl_n_s32(v23, 5uLL);
    v30 = vsub_s32(vadd_s32(v29, v20), vadd_s32(v25, a2[4]));
    v31 = vshl_n_s32(vsub_s32(v28, v27), 5uLL);
    v49 = 0;
    v48[1] = v30.i16[2];
    v48[0] = v30.i16[0];
    if (a6)
      v32 = 0;
    else
      v32 = 32;
    v48[3] = v32;
    if (a6)
      v33 = 32;
    else
      v33 = 0;
    v48[2] = v33;
    LOWORD(v49) = a6;
    if (v18 >= a5)
    {
      v41 = v29;
      bzero(v50, 2 * (v18 - a5) + 2);
      v29 = v41;
    }
    v34 = v29.i32[0];
    v35 = v29.i32[1];
    *(_QWORD *)&v36 = v31.i32[0];
    *((_QWORD *)&v36 + 1) = v31.i32[1];
    v42 = v36;
    CA::HalfFloat::convert_float_array((uint64_t)&v50[v18 - a5 + 1], a4, (const float *)a5);
    if (v18 >= 1)
    {
      v37 = v18;
      v38 = &v50[v18 + 1];
      do
        *v38++ = v50[(int)--v37];
      while (v37);
    }
    tile_pipeline = CA::OGL::MetalContext::get_tile_pipeline((uint64_t)this, v19, *(_QWORD *)(v16 + 120));
    objc_msgSend(*((id *)this + 367), "setRenderPipelineState:", tile_pipeline);
    objc_msgSend(*((id *)this + 367), "setTileTexture:atIndex:", *(_QWORD *)&a2[12], 0);
    objc_msgSend(*((id *)this + 367), "setTileBytes:length:atIndex:", v48, 12, 0);
    objc_msgSend(*((id *)this + 367), "setTileBytes:length:atIndex:", v50, 2 * ((2 * v18) | 1), 1);
    v40 = (void *)*((_QWORD *)this + 367);
    v46 = vdupq_n_s64(0x20uLL);
    v47 = 1;
    v43[0] = v34;
    v43[1] = v35;
    v43[2] = 0;
    v44 = v42;
    v45 = 1;
    result = objc_msgSend(v40, "dispatchThreadsPerTile:inRegion:", &v46, v43);
    *((_QWORD *)this + 414) = tile_pipeline;
  }
  return result;
}

uint64_t CA::OGL::MetalContext::get_tile_pipeline(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v5;
  int8x8_t v6;
  uint8x8_t v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  void *v12;
  void *shader_function;
  id v14;
  MTLPixelFormat v15;
  uint64_t v16;
  unint64_t v17;
  uint8x8_t v18;
  unint64_t v19;
  void **v20;
  _QWORD *v21;
  unint64_t v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  int8x8_t prime;
  void *v29;
  void *v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint8x8_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t result;
  uint64_t v45;
  void *v46;
  const char *v47;
  const char *v48;
  const char *Name;
  const char *v50;
  NSObject *v51;
  NSObject *v52;
  id v53;
  uint8_t buf[4];
  const char *v55;
  __int16 v56;
  char *v57;
  char __str[2047];
  char v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v5 = a3 & 0x3FF | ((a2 & 0xF) << 10);
  v6 = *(int8x8_t *)(a1 + 2568);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8(v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = a3 & 0x3FF | ((a2 & 0xF) << 10);
      if (*(_QWORD *)&v6 <= v5)
        v8 = v5 % *(_QWORD *)&v6;
    }
    else
    {
      v8 = (v6.i32[0] - 1) & v5;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)(a1 + 2560) + 8 * v8);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == v5)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v5)
            return i[3];
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v11 >= *(_QWORD *)&v6)
              v11 %= *(_QWORD *)&v6;
          }
          else
          {
            v11 &= *(_QWORD *)&v6 - 1;
          }
          if (v11 != v8)
            break;
        }
      }
    }
  }
  v12 = *(&CA::OGL::MetalContext::tile_shader_type_info + 2 * a2);
  v53 = 0;
  shader_function = CA::OGL::MetalContext::load_shader_function(a1, *(void **)(a1 + 3288), v12, 0, 0, 0, (uint64_t)&v53);
  if (!shader_function)
  {
    bzero(__str, 0x7FFuLL);
    v47 = (const char *)objc_msgSend(v12, "UTF8String");
    if (v53)
      v48 = (const char *)objc_msgSend((id)objc_msgSend(v53, "localizedDescription"), "UTF8String");
    else
      v48 = "";
    snprintf(__str, 0x800uLL, "function=%s\n%s", v47, v48);
    v59 = 0;
    if (!x_log_hook_p())
    {
      v51 = x_log_category_ogl_metal;
      if (os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v55 = "Metal failed to load compute shader";
        v56 = 2080;
        v57 = __str;
        _os_log_impl(&dword_184457000, v51, OS_LOG_TYPE_ERROR, "%s: %s\n", buf, 0x16u);
      }
      goto LABEL_133;
    }
    goto LABEL_125;
  }
  v14 = (id)objc_opt_new();
  objc_msgSend(v14, "setLabel:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("com.apple.coreanimation.%@"), v12));
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v14, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setPixelFormat:", a3);
  if ((*(_WORD *)(a1 + 3280) & 8) != 0)
  {
    if (a3 > 89)
    {
      v16 = 110;
      if (a3 == 90 || a3 == 94)
        goto LABEL_35;
      if (a3 == 554)
      {
        if (CADeviceIsVirtualized::once[0] != -1)
          dispatch_once(CADeviceIsVirtualized::once, &__block_literal_global_204);
        if (CADeviceIsVirtualized::is_virtualized)
          v16 = 115;
        else
          v16 = 550;
        goto LABEL_35;
      }
    }
    else
    {
      switch(a3)
      {
        case 10:
          v16 = 30;
          goto LABEL_35;
        case 43:
          v16 = 80;
          goto LABEL_35;
        case 63:
          v16 = 113;
LABEL_35:
          objc_msgSend((id)objc_msgSend((id)objc_msgSend(v14, "colorAttachments"), "objectAtIndexedSubscript:", 1), "setPixelFormat:", CA::OGL::non_srgb_pixel_format(v16, v15));
          goto LABEL_36;
      }
    }
    v16 = a3;
    goto LABEL_35;
  }
LABEL_36:
  objc_msgSend(v14, "setThreadgroupSizeMatchesTileSize:", 0);
  objc_msgSend(v14, "setTileFunction:", shader_function);

  v45 = objc_msgSend(*(id *)(a1 + 2904), "newRenderPipelineStateWithTileDescriptor:options:reflection:error:", v14, 0, 0, &v53);
  if (!v45)
  {
    bzero(__str, 0x7FFuLL);
    Name = (const char *)MTLPixelFormatGetName();
    v50 = (const char *)objc_msgSend(v12, "UTF8String");
    snprintf(__str, 0x800uLL, "tile_pipeline=%s_%s\n%s", Name, v50, (const char *)objc_msgSend((id)objc_msgSend(v53, "localizedDescription"), "UTF8String"));
    v59 = 0;
    if (!x_log_hook_p())
    {
      v52 = x_log_category_ogl_metal;
      if (os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v55 = "Metal failed to build render pipeline";
        v56 = 2080;
        v57 = __str;
        _os_log_impl(&dword_184457000, v52, OS_LOG_TYPE_ERROR, "%s: %s\n", buf, 0x16u);
      }
      goto LABEL_133;
    }
LABEL_125:
    x_log_();
LABEL_133:
    strlen(__str);
    result = abort_with_payload();
    __break(1u);
    return result;
  }
  v17 = *(_QWORD *)(a1 + 2568);
  if (v17)
  {
    v18 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
    v18.i16[0] = vaddlv_u8(v18);
    if (v18.u32[0] > 1uLL)
    {
      v19 = v5;
      if (v17 <= v5)
        v19 = v5 % v17;
    }
    else
    {
      v19 = ((_DWORD)v17 - 1) & v5;
    }
    v20 = *(void ***)(*(_QWORD *)(a1 + 2560) + 8 * v19);
    if (v20)
    {
      v21 = *v20;
      if (*v20)
      {
        do
        {
          v22 = v21[1];
          if (v22 == v5)
          {
            if (*((_DWORD *)v21 + 4) == (_DWORD)v5)
              goto LABEL_109;
          }
          else
          {
            if (v18.u32[0] > 1uLL)
            {
              if (v22 >= v17)
                v22 %= v17;
            }
            else
            {
              v22 &= v17 - 1;
            }
            if (v22 != v19)
              break;
          }
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
    }
  }
  else
  {
    v19 = 0;
  }
  v21 = operator new(0x20uLL);
  *v21 = 0;
  v21[1] = v5;
  *((_DWORD *)v21 + 4) = v5;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 2584) + 1);
  v21[3] = 0;
  v24 = *(float *)(a1 + 2592);
  if ((((float)(v24 * (float)v17) >= v23) & ~(v17 == 0)) != 0)
  {
    v5 = v19;
    goto LABEL_99;
  }
  v25 = 1;
  if (v17 >= 3)
    v25 = (v17 & (v17 - 1)) != 0;
  v26 = v25 | (2 * v17);
  v27 = vcvtps_u32_f32(v23 / v24);
  if (v26 <= v27)
    prime = (int8x8_t)v27;
  else
    prime = (int8x8_t)v26;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v17 = *(_QWORD *)(a1 + 2568);
  }
  if (*(_QWORD *)&prime > v17)
    goto LABEL_66;
  if (*(_QWORD *)&prime < v17)
  {
    v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 2584) / *(float *)(a1 + 2592));
    if (v17 < 3 || (v36 = (uint8x8_t)vcnt_s8((int8x8_t)v17), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
    {
      v35 = std::__next_prime(v35);
    }
    else
    {
      v37 = 1 << -(char)__clz(v35 - 1);
      if (v35 >= 2)
        v35 = v37;
    }
    if (*(_QWORD *)&prime <= v35)
      prime = (int8x8_t)v35;
    if (*(_QWORD *)&prime >= v17)
    {
      v17 = *(_QWORD *)(a1 + 2568);
    }
    else
    {
      if (prime)
      {
LABEL_66:
        if (*(_QWORD *)&prime >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v29 = operator new(8 * *(_QWORD *)&prime);
        v30 = *(void **)(a1 + 2560);
        *(_QWORD *)(a1 + 2560) = v29;
        if (v30)
          operator delete(v30);
        v31 = 0;
        *(int8x8_t *)(a1 + 2568) = prime;
        do
          *(_QWORD *)(*(_QWORD *)(a1 + 2560) + 8 * v31++) = 0;
        while (*(_QWORD *)&prime != v31);
        v32 = *(_QWORD **)(a1 + 2576);
        if (v32)
        {
          v33 = v32[1];
          v34 = (uint8x8_t)vcnt_s8(prime);
          v34.i16[0] = vaddlv_u8(v34);
          if (v34.u32[0] > 1uLL)
          {
            if (v33 >= *(_QWORD *)&prime)
              v33 %= *(_QWORD *)&prime;
          }
          else
          {
            v33 &= *(_QWORD *)&prime - 1;
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 2560) + 8 * v33) = a1 + 2576;
          v38 = (_QWORD *)*v32;
          if (*v32)
          {
            do
            {
              v39 = v38[1];
              if (v34.u32[0] > 1uLL)
              {
                if (v39 >= *(_QWORD *)&prime)
                  v39 %= *(_QWORD *)&prime;
              }
              else
              {
                v39 &= *(_QWORD *)&prime - 1;
              }
              if (v39 != v33)
              {
                v40 = *(_QWORD *)(a1 + 2560);
                if (!*(_QWORD *)(v40 + 8 * v39))
                {
                  *(_QWORD *)(v40 + 8 * v39) = v32;
                  goto LABEL_91;
                }
                *v32 = *v38;
                *v38 = **(_QWORD **)(*(_QWORD *)(a1 + 2560) + 8 * v39);
                **(_QWORD **)(*(_QWORD *)(a1 + 2560) + 8 * v39) = v38;
                v38 = v32;
              }
              v39 = v33;
LABEL_91:
              v32 = v38;
              v38 = (_QWORD *)*v38;
              v33 = v39;
            }
            while (v38);
          }
        }
        v17 = (unint64_t)prime;
        goto LABEL_95;
      }
      v46 = *(void **)(a1 + 2560);
      *(_QWORD *)(a1 + 2560) = 0;
      if (v46)
        operator delete(v46);
      v17 = 0;
      *(_QWORD *)(a1 + 2568) = 0;
    }
  }
LABEL_95:
  if ((v17 & (v17 - 1)) != 0)
  {
    if (v17 <= v5)
      v5 %= v17;
  }
  else
  {
    v5 = ((_DWORD)v17 - 1) & v5;
  }
LABEL_99:
  v41 = *(_QWORD *)(a1 + 2560);
  v42 = *(_QWORD **)(v41 + 8 * v5);
  if (v42)
  {
    *v21 = *v42;
LABEL_107:
    *v42 = v21;
    goto LABEL_108;
  }
  *v21 = *(_QWORD *)(a1 + 2576);
  *(_QWORD *)(a1 + 2576) = v21;
  *(_QWORD *)(v41 + 8 * v5) = a1 + 2576;
  if (*v21)
  {
    v43 = *(_QWORD *)(*v21 + 8);
    if ((v17 & (v17 - 1)) != 0)
    {
      if (v43 >= v17)
        v43 %= v17;
    }
    else
    {
      v43 &= v17 - 1;
    }
    v42 = (_QWORD *)(*(_QWORD *)(a1 + 2560) + 8 * v43);
    goto LABEL_107;
  }
LABEL_108:
  ++*(_QWORD *)(a1 + 2584);
LABEL_109:
  v21[3] = v45;
  return v45;
}

void sub_1844CE31C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void CA::OGL::MetalContext::detach_surface(CA::OGL::MetalContext *this)
{
  if (!*(_QWORD *)(*((_QWORD *)this + 32) + 200))
    CA::OGL::MetalContext::stop_encoders(this);
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 493) = 0;
}

void CA::OGL::MetalContext::collect(CA::OGL::MetalContext *this, int a2)
{
  uint64_t v4;
  unint64_t v5;
  void **v6;
  void **v7;
  unint64_t v8;
  void **v9;
  id *v10;
  _QWORD *v11;
  uint64_t v12;
  id *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  void **v18;
  unint64_t v19;
  void **v20;
  id *v21;
  _QWORD *v22;
  uint64_t v23;
  id *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = *((_QWORD *)this + 499);
  v5 = atomic_load((unint64_t *)this + 498);
  CA::OGL::MetalBufferPool::pool_flush((CA::OGL::MetalBufferPool *)v4, v5, 0);
  if (a2)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v4 + 56));
    v6 = *(void ***)(v4 + 248);
    v7 = *(void ***)(v4 + 256);
    if (v7 == v6)
    {
      v11 = (_QWORD *)(v4 + 280);
      v7 = *(void ***)(v4 + 248);
    }
    else
    {
      v8 = *(_QWORD *)(v4 + 272);
      v9 = &v6[v8 >> 9];
      v10 = (id *)((char *)*v9 + 8 * (v8 & 0x1FF));
      v11 = (_QWORD *)(v4 + 280);
      v12 = *(uint64_t *)((char *)v6 + (((*(_QWORD *)(v4 + 280) + v8) >> 6) & 0x3FFFFFFFFFFFFF8))
          + 8 * ((*(_QWORD *)(v4 + 280) + v8) & 0x1FF);
      if (v10 != (id *)v12)
      {
        do
        {

          if ((char *)v10 - (_BYTE *)*v9 == 4096)
          {
            v13 = (id *)v9[1];
            ++v9;
            v10 = v13;
          }
        }
        while (v10 != (id *)v12);
        v6 = *(void ***)(v4 + 248);
        v7 = *(void ***)(v4 + 256);
      }
    }
    *v11 = 0;
    v14 = (char *)v7 - (char *)v6;
    if (v14 >= 0x11)
    {
      do
      {
        operator delete(*v6);
        v15 = *(_QWORD *)(v4 + 256);
        v6 = (void **)(*(_QWORD *)(v4 + 248) + 8);
        *(_QWORD *)(v4 + 248) = v6;
        v14 = v15 - (_QWORD)v6;
      }
      while (v14 > 0x10);
    }
    if (v14 >> 3 == 1)
    {
      v16 = 256;
    }
    else
    {
      if (v14 >> 3 != 2)
        goto LABEL_16;
      v16 = 512;
    }
    *(_QWORD *)(v4 + 272) = v16;
LABEL_16:
    v17 = *(void ***)(v4 + 296);
    v18 = *(void ***)(v4 + 304);
    if (v18 == v17)
    {
      v22 = (_QWORD *)(v4 + 328);
      v18 = *(void ***)(v4 + 296);
    }
    else
    {
      v19 = *(_QWORD *)(v4 + 320);
      v20 = &v17[v19 >> 9];
      v21 = (id *)((char *)*v20 + 8 * (v19 & 0x1FF));
      v22 = (_QWORD *)(v4 + 328);
      v23 = *(uint64_t *)((char *)v17 + (((*(_QWORD *)(v4 + 328) + v19) >> 6) & 0x3FFFFFFFFFFFFF8))
          + 8 * ((*(_QWORD *)(v4 + 328) + v19) & 0x1FF);
      if (v21 != (id *)v23)
      {
        do
        {

          if ((char *)v21 - (_BYTE *)*v20 == 4096)
          {
            v24 = (id *)v20[1];
            ++v20;
            v21 = v24;
          }
        }
        while (v21 != (id *)v23);
        v17 = *(void ***)(v4 + 296);
        v18 = *(void ***)(v4 + 304);
      }
    }
    *v22 = 0;
    v25 = (char *)v18 - (char *)v17;
    if (v25 >= 0x11)
    {
      do
      {
        operator delete(*v17);
        v26 = *(_QWORD *)(v4 + 304);
        v17 = (void **)(*(_QWORD *)(v4 + 296) + 8);
        *(_QWORD *)(v4 + 296) = v17;
        v25 = v26 - (_QWORD)v17;
      }
      while (v25 > 0x10);
    }
    if (v25 >> 3 == 1)
    {
      v27 = 256;
    }
    else
    {
      if (v25 >> 3 != 2)
      {
LABEL_30:
        os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 56));
        goto LABEL_31;
      }
      v27 = 512;
    }
    *(_QWORD *)(v4 + 320) = v27;
    goto LABEL_30;
  }
LABEL_31:
  CA::OGL::Context::collect(this, a2);
}

void sub_1844CE588(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void CA::OGL::MetalContext::flush(CA::OGL::MetalContext *this, int a2)
{
  CA::OGL::MetalBufferPool *v4;
  unint64_t v5;
  void (*v6)(_QWORD, _QWORD);
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;
  _QWORD *v12;
  const void *v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  int v17;
  __uint64_t v18;
  uint64_t v19;
  int v20;
  _opaque_pthread_t *v21;
  __uint64_t v22;
  __uint64_t v23;
  __int16 v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  _QWORD v30[5];
  _QWORD v31[8];
  int v32;
  int v33;
  _QWORD v34[7];
  int v35;
  int v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  char v40;
  __uint64_t handler;
  uint64_t v42;
  void (*v43)(uint64_t);
  void *v44;
  CA::OGL::MetalContext *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v4 = (CA::OGL::MetalBufferPool *)*((_QWORD *)this + 499);
  v5 = atomic_load((unint64_t *)this + 498);
  CA::OGL::MetalBufferPool::pool_flush(v4, v5, 1);
  v37 = 0;
  v38 = &v37;
  v39 = 0x2020000000;
  v40 = 0;
  if (*((_QWORD *)this + 366))
  {
    CA::OGL::MetalContext::stop_encoders(this);
    v6 = (void (*)(_QWORD, _QWORD))*((_QWORD *)this + 407);
    if (v6)
      v6(*((_QWORD *)this + 408), *((_QWORD *)this + 366));
    if (BYTE13(xmmword_1ECDC6AD0))
    {
      v17 = *((_DWORD *)this + 1010);
      handler = 0;
      v42 = 0;
      mach_get_times();
      v18 = handler;
      v19 = v42;
      v20 = *((_DWORD *)this + 53);
      v21 = pthread_self();
      handler = 0;
      pthread_threadid_np(v21, &handler);
      v22 = v19 - v18;
      v23 = handler;
      v24 = *((_WORD *)this + 1640);
      if ((v24 & 0x80) != 0)
      {
        v25 = *((_QWORD *)this + 506);
        *((_QWORD *)this + 506) = 0;
        *((_WORD *)this + 1640) = v24 & 0xFF3F;
      }
      else
      {
        v25 = 0;
      }
      v27 = (void *)*((_QWORD *)this + 366);
      v28 = MEMORY[0x1E0C809B0];
      v34[0] = MEMORY[0x1E0C809B0];
      v34[1] = 3221225472;
      v34[2] = ___ZN2CA3OGL12MetalContext5flushEb_block_invoke;
      v34[3] = &__block_descriptor_64_e28_v16__0___MTLCommandBuffer__8l;
      v35 = v20;
      v36 = v17;
      v34[4] = this;
      v34[5] = v23;
      v34[6] = v22;
      objc_msgSend(v27, "addScheduledHandler:", v34);
      v29 = (void *)*((_QWORD *)this + 366);
      v31[0] = v28;
      v31[1] = 3221225472;
      v31[2] = ___ZN2CA3OGL12MetalContext5flushEb_block_invoke_67;
      v31[3] = &__block_descriptor_72_e28_v16__0___MTLCommandBuffer__8l;
      v31[4] = this;
      v31[5] = v22;
      v32 = v20;
      v33 = v17;
      v31[6] = v23;
      v31[7] = v25;
      objc_msgSend(v29, "addCompletedHandler:", v31);
    }
    if (BYTE5(xmmword_1ECDC6A70))
    {
      v26 = (void *)*((_QWORD *)this + 366);
      v30[0] = MEMORY[0x1E0C809B0];
      v30[1] = 3221225472;
      v30[2] = ___ZN2CA3OGL12MetalContext5flushEb_block_invoke_69;
      v30[3] = &__block_descriptor_40_e28_v16__0___MTLCommandBuffer__8l;
      v30[4] = this;
      objc_msgSend(v26, "addCompletedHandler:", v30);
    }
    if (a2)
    {
      v7 = (void *)*((_QWORD *)this + 366);
      v8 = *((_QWORD *)this + 22);
      if (v8
        && (v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8), (*((_WORD *)this + 1640) & 0x200) != 0)
        && v9
        && (*(_WORD *)(v9 + 656) & 0x1C00) == 0)
      {
        BMMonitorBlockExecutionWithSignature();
      }
      else
      {
        v10 = objc_msgSend(v7, "commitAndWaitUntilSubmitted");
        *((_BYTE *)v38 + 24) = v10;
      }
    }
    if (*((_BYTE *)v38 + 24))
    {
      v11 = (_QWORD *)*((_QWORD *)this + 377);
      v12 = (_QWORD *)*((_QWORD *)this + 378);
      if (v11 != v12)
      {
        do
        {
          v13 = (const void *)*v11;
          (*(void (**)(_QWORD))(*v11 + 16))(*v11);
          _Block_release(v13);
          ++v11;
        }
        while (v11 != v12);
        v11 = (_QWORD *)*((_QWORD *)this + 377);
      }
      *((_QWORD *)this + 378) = v11;
    }
    else
    {
      CA::OGL::MetalContext::copy_submitted_callbacks((uint64_t)this, *((void **)this + 366));
    }
    if ((a2 & 1) == 0)
      objc_msgSend(*((id *)this + 366), "commit");

    *((_QWORD *)this + 365) = *((_QWORD *)this + 366);
    *((_QWORD *)this + 366) = 0;
    *((_QWORD *)this + 407) = 0;
    *((_QWORD *)this + 408) = 0;
  }
  if (a2 && !*((_BYTE *)v38 + 24))
    objc_msgSend(*((id *)this + 365), "waitUntilScheduled");
  v14 = mach_absolute_time();
  *((double *)this + 495) = CATimeWithHostTime(v14);
  os_unfair_lock_lock((os_unfair_lock_t)this + 658);
  if (!*((_QWORD *)this + 496))
  {
    v15 = dispatch_source_create(MEMORY[0x1E0C80DD0], 1uLL, 0, *((dispatch_queue_t *)this + 494));
    *((_QWORD *)this + 496) = v15;
    if (v15)
    {
      dispatch_source_set_timer(v15, 0, 0x3B9ACA00uLL, 0x1DCD6500uLL);
      v16 = *((_QWORD *)this + 496);
      handler = MEMORY[0x1E0C809B0];
      v42 = 3221225472;
      v43 = ___ZN2CA3OGL12MetalContext24start_idle_collect_timerEv_block_invoke;
      v44 = &__block_descriptor_40_e5_v8__0l;
      v45 = this;
      dispatch_source_set_event_handler(v16, &handler);
      dispatch_resume(*((dispatch_object_t *)this + 496));
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)this + 658);
  _Block_object_dispose(&v37, 8);
}

void sub_1844CE970(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t CA::OGL::Context::prepare_destination_(CA::OGL::Context *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  CA::Render *v12;
  uint64_t v13;
  unsigned int v14;
  CA::Render *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  CA::Render::Object *v22;
  uint64_t v23;
  const char *v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  char v29;
  size_t v30;
  NSObject *v31;
  int v32;
  NSObject *v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  NSObject *v43;
  uint32_t v44;
  unint64_t v45;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  uint64_t v52;
  char *v53;
  int v54;
  int v55;
  int v56;
  int v57;
  double v58;
  double v59;
  double v60;
  uint64_t v61;
  char *v62;
  unsigned int v63;
  __int16 v64;
  int v65;
  const char *v66;
  char *v67;
  int v68;
  uint64_t v69;
  char *v70;
  int v71;
  unsigned int v72;
  int v74;
  NSObject *v75;
  const char *v76;
  void **v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE buf[34];
  __int16 v81;
  int v82;
  __int16 v83;
  int v84;
  __int16 v85;
  double v86;
  __int16 v87;
  char *v88;
  __int16 v89;
  int v90;
  __int16 v91;
  const char *v92;
  __int16 v93;
  uint64_t v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 31);
  if (!byte_1ECDC6A6D)
  {
    if (!v2)
      goto LABEL_10;
    goto LABEL_3;
  }
  v9 = *((_QWORD *)this + 32);
  if ((_BYTE)xmmword_1ECDC6AD0)
    v10 = 1;
  else
    v10 = v2 == 0;
  if (v10 || v9 == 0)
  {
    if (!v2)
    {
      v12 = 0;
      v13 = 0;
LABEL_47:
      v15 = 0;
      v21 = 0;
      v18 = 1;
      goto LABEL_48;
    }
  }
  else if ((*(_BYTE *)(v2 + 69) & 8) != 0 || (*(_BYTE *)(v9 + 69) & 8) != 0)
  {
LABEL_3:
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      v4 = *(_DWORD *)(v3 + 300) & 0x1FFFF;
      if ((_DWORD)v4)
      {
        for (i = 0; i != 17; ++i)
        {
          if (((v4 >> i) & 1) != 0)
            ++*((_DWORD *)this + i + 182);
        }
        if (BYTE9(xmmword_1ECDC6A90))
        {
          v79 = v4 << 32;
          v22 = *(CA::Render::Object **)(v3 + 24);
          if (v22 && (v23 = *((_QWORD *)v22 + 15)) != 0)
          {
            v24 = (const char *)(v23 + 28);
            v78 = 0;
            v25 = strlen((const char *)(v23 + 28));
            if (v25 >= 0xC)
              v26 = 12;
            else
              v26 = v25;
            *(_QWORD *)buf = &v79;
            *(_QWORD *)&buf[8] = &v78;
            if (v26)
            {
              v27 = 0;
              v28 = &v24[v26];
              v29 = 1;
              v30 = 4;
              do
              {
                strncpy(*(char **)&buf[8 * v27], v24, v30);
                if ((v29 & 1) == 0)
                  break;
                v29 = 0;
                v24 += v30;
                v27 = 1;
                v30 = 8;
              }
              while (v24 < v28);
            }
          }
          else
          {
            v78 = 0;
          }
          if (v22)
            CA::Render::Object::render_id(v22);
          kdebug_trace();
        }
      }
    }
    goto LABEL_10;
  }
  v13 = *(_QWORD *)(v2 + 16);
  if (!v13)
  {
    v12 = 0;
    goto LABEL_47;
  }
  v14 = *(_DWORD *)(v13 + 300);
  v15 = (CA::Render *)(v14 & 0x1FFFF);
  v12 = (CA::Render *)((v14 >> 17) & 0x7FF);
  v16 = *(_QWORD *)(v13 + 24);
  if (v16 && (v17 = *(_QWORD *)(v16 + 120)) != 0)
  {
    v18 = 0;
    v19 = *(_DWORD *)(v17 + 24);
    v20 = v17 + 28;
    if (v19)
      v21 = v20;
    else
      v21 = 0;
  }
  else
  {
    v18 = 0;
    v21 = 0;
  }
LABEL_48:
  x_log_begin();
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v31 = x_log_category_ogl;
    if (os_log_type_enabled((os_log_t)x_log_category_ogl, OS_LOG_TYPE_DEFAULT))
    {
      v32 = *((_DWORD *)this + 53);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v32;
      _os_log_impl(&dword_184457000, v31, OS_LOG_TYPE_DEFAULT, "[%u]", buf, 8u);
    }
  }
  if ((v18 & 1) == 0 && *(_QWORD *)(v13 + 24))
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v33 = x_log_category_ogl;
      if (os_log_type_enabled((os_log_t)x_log_category_ogl, OS_LOG_TYPE_DEFAULT))
      {
        v34 = *(_QWORD *)(v13 + 24);
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v34;
        _os_log_impl(&dword_184457000, v33, OS_LOG_TYPE_DEFAULT, " (%p)", buf, 0xCu);
      }
    }
  }
  if (v21)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v35 = x_log_category_ogl;
      if (os_log_type_enabled((os_log_t)x_log_category_ogl, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v21;
        _os_log_impl(&dword_184457000, v35, OS_LOG_TYPE_DEFAULT, " %s", buf, 0xCu);
      }
    }
  }
  if ((_DWORD)v15)
    CA::Render::print_offscreen_flags(v15);
  if ((_DWORD)v12)
    CA::Render::print_group_flags(v12);
  v36 = *((_QWORD *)this + 31);
  if (((*(uint64_t (**)(CA::OGL::Context *))(*(_QWORD *)this + 800))(this) & 1) != 0)
  {
    if (x_log_hook_p())
    {
LABEL_90:
      x_log_();
      goto LABEL_121;
    }
    v41 = x_log_category_ogl;
    if (!os_log_type_enabled((os_log_t)x_log_category_ogl, OS_LOG_TYPE_DEFAULT))
      goto LABEL_121;
    *(_WORD *)buf = 0;
    v42 = " s:framebuffer\n";
    v43 = v41;
    v44 = 2;
  }
  else
  {
    v37 = (*(uint64_t (**)(CA::OGL::Context *, uint64_t))(*(_QWORD *)this + 1024))(this, v36);
    v38 = v37 * *(int *)(v36 + 24) * *(int *)(v36 + 28);
    v39 = *(int *)(v36 + 44);
    v40 = v37 * *(int *)(v36 + 40);
    if (!x_hash_table_lookup(*((_QWORD *)this + 34), v36, 0))
    {
      hash_table_modify(*((int **)this + 34), v36, v38, 0);
      *((_QWORD *)this + 35) += v38;
    }
    v45 = v40 * v39;
    kdebug_trace();
    if (x_log_hook_p())
    {
      if (v38 >= 0x400)
      {
        v49 = 1.0;
        do
          v49 = v49 * 0.0009765625;
        while (v49 * (double)v38 >= 1024.0);
      }
      if (v45 >= 0x400)
      {
        v50 = 1.0;
        do
          v50 = v50 * 0.0009765625;
        while (v50 * (double)v45 >= 1024.0);
      }
      goto LABEL_90;
    }
    v46 = x_log_category_ogl;
    if (!os_log_type_enabled((os_log_t)x_log_category_ogl, OS_LOG_TYPE_DEFAULT))
      goto LABEL_121;
    v47 = (double)v38;
    if (v38 >= 0x400)
    {
      v51 = 1.0;
      do
      {
        v51 = v51 * 0.0009765625;
        v48 = v51 * v47;
      }
      while (v51 * v47 >= 1024.0);
    }
    else
    {
      v48 = (double)v38;
    }
    v52 = v38 > 0x3FF;
    if ((v38 & 0xFFFFFFFFFFF00000) != 0)
      ++v52;
    if ((v38 & 0xFFFFFFFFC0000000) != 0)
      ++v52;
    if (v38 >> 40)
      ++v52;
    if (v38 >> 50)
      ++v52;
    if (v38 >> 60)
      ++v52;
    v53 = off_1E15AAF00[v52];
    v55 = *(_DWORD *)(v36 + 24);
    v54 = *(_DWORD *)(v36 + 28);
    v56 = *(_DWORD *)(v36 + 40);
    v57 = *(_DWORD *)(v36 + 44);
    v58 = (double)v45;
    if (v45 >= 0x400)
    {
      v60 = 1.0;
      do
      {
        v60 = v60 * 0.0009765625;
        v59 = v60 * v58;
      }
      while (v60 * v58 >= 1024.0);
    }
    else
    {
      v59 = (double)v45;
    }
    v61 = v45 > 0x3FF;
    if ((v45 & 0xFFFFFFFFFFF00000) != 0)
      ++v61;
    if ((v45 & 0xFFFFFFFFC0000000) != 0)
      ++v61;
    if (v45 >> 40)
      ++v61;
    if (v45 >> 50)
      ++v61;
    if (v45 >> 60)
      ++v61;
    v62 = off_1E15AAF00[v61];
    v63 = *(unsigned __int16 *)(v36 + 75);
    v64 = *(_DWORD *)(v36 + 68);
    *(_DWORD *)buf = 67111682;
    *(_DWORD *)&buf[4] = v55;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v54;
    *(_WORD *)&buf[14] = 2048;
    *(double *)&buf[16] = v48;
    v65 = (v63 >> 5) & 1;
    *(_QWORD *)&buf[26] = v53;
    v66 = ", memoryless";
    *(_WORD *)&buf[24] = 2080;
    if ((v64 & 0x800) == 0)
      v66 = "";
    v81 = 1024;
    v82 = v56;
    v83 = 1024;
    v84 = v57;
    v85 = 2048;
    v86 = v59;
    v87 = 2080;
    v88 = v62;
    v89 = 1024;
    v90 = v65;
    v91 = 2080;
    v92 = v66;
    v93 = 2048;
    v94 = v36;
    v42 = " s:[%u x %u (%.2lf %s)] b:[%u x %u (%.2lf %s)] need-clear:%d%s, id:%p\n";
    v43 = v46;
    v44 = 92;
  }
  _os_log_impl(&dword_184457000, v43, OS_LOG_TYPE_DEFAULT, v42, buf, v44);
LABEL_121:
  v77 = (void **)x_stream_pop_(0);
  v67 = x_stream_get(v77);
  v68 = 0;
  while (2)
  {
    v69 = 0;
    v70 = &v67[v68];
    v71 = -1;
    while (1)
    {
      if (v70[v69] == 10)
      {
        v71 = v69;
        goto LABEL_127;
      }
      if (!v70[v69])
        break;
LABEL_127:
      ++v69;
      v72 = 32512;
      if (v69 == 32512)
        goto LABEL_128;
    }
    v72 = v69;
LABEL_128:
    if (v71 <= -1 || v70[v72] == 0)
      v74 = v72;
    else
      v74 = v71 + 1;
    if (v74 > 0)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v75 = x_log_category_ogl;
        if (os_log_type_enabled((os_log_t)x_log_category_ogl, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          v76 = "";
          if (v68)
            v76 = "continued...\n";
          *(_QWORD *)&buf[4] = v76;
          *(_WORD *)&buf[12] = 1040;
          *(_DWORD *)&buf[14] = v74;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = &v67[v68];
          _os_log_impl(&dword_184457000, v75, OS_LOG_TYPE_DEFAULT, "%s%.*s", buf, 0x1Cu);
        }
      }
      v68 += v74;
      continue;
    }
    break;
  }
  x_log_end_free_(v77);
  v2 = *((_QWORD *)this + 31);
  if (v2)
    goto LABEL_3;
LABEL_10:
  result = (*(uint64_t (**)(CA::OGL::Context *))(*(_QWORD *)this + 792))(this);
  if ((_DWORD)result)
    ++*((_DWORD *)this + 173);
  v7 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 32) = v7;
  if (v7)
  {
    *((_DWORD *)this + 61) = (*(unsigned __int8 *)(v7 + 72) >> 1) & 0x1F;
    v8 = *(_QWORD *)(v7 + 16);
    if (v8)
    {
      ++*(_WORD *)(v8 + 298);
      *(_QWORD *)(v7 + 16) = 0;
    }
  }
  else
  {
    *((_DWORD *)this + 61) = 0;
  }
  return result;
}

uint64_t CA::OGL::MetalContext::set_surface(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  _BOOL8 v8;
  double v9;
  int *v10;
  int *v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t i;
  void *v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint8_t v26[8];
  uint64_t v27;

  v2 = a2;
  v27 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if ((*(_BYTE *)(a2 + 69) & 8) != 0)
    {
      if (*(_QWORD *)(a2 + 200) == *(_QWORD *)(a1 + 3944))
      {
        v22 = *(_QWORD *)(a1 + 248);
        if ((*(_BYTE *)(v22 + 69) & 8) != 0 && (*(_WORD *)(v22 + 75) & 0x20) != 0)
          CA::OGL::MetalContext::clear_memoryless_texture_(a1, v22);
        return 0;
      }
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v23 = x_log_category_ogl_metal;
        if (os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v26 = 0;
          _os_log_impl(&dword_184457000, v23, OS_LOG_TYPE_DEFAULT, "Target of memoryless surface not bound, possible misuse.", v26, 2u);
        }
      }
      return CA::OGL::MetalContext::set_surface(a1, *(_QWORD *)(v2 + 200));
    }
    if (*(_QWORD *)(a1 + 3944) == a2)
    {
      v4 = *(_QWORD *)(a1 + 248);
      if (v4)
        LODWORD(v4) = (*(unsigned __int8 *)(v4 + 72) >> 1) & 0x1F;
      if ((_DWORD)v4 == *(_DWORD *)(a1 + 244))
        return 0;
    }
  }
  if ((*(_WORD *)(a1 + 3280) & 1) == 0 || *(_QWORD *)(a1 + 3272) != a2)
    CA::OGL::MetalContext::stop_encoders((CA::OGL::MetalContext *)a1);
  *(_QWORD *)(a1 + 3944) = 0;
  v5 = *(_DWORD *)(a1 + 692);
  if (!v5 || (*(_WORD *)(a1 + 3280) & 0x100) != 0)
  {
LABEL_17:
    if (v2)
      goto LABEL_18;
LABEL_48:
    v24 = a1 + 3912;
    do
    {
      objc_msgSend(*(id *)(v24 + v2), "setTexture:", 0);
      v2 += 8;
    }
    while (v2 != 24);
    return 0;
  }
  v6 = *(_DWORD *)(a1 + 2680);
  if (!v6 || v5 % v6)
  {
    v7 = *(_DWORD *)(a1 + 424);
    if (v7 && !(v5 % v7))
      CA::OGL::MetalContext::flush((CA::OGL::MetalContext *)a1, 1);
    goto LABEL_17;
  }
  CA::OGL::MetalContext::flush((CA::OGL::MetalContext *)a1, 1);
  objc_msgSend(*(id *)(a1 + 2920), "waitUntilCompleted");

  *(_QWORD *)(a1 + 2920) = 0;
  if (!v2)
    goto LABEL_48;
LABEL_18:
  v8 = *(_QWORD *)(a1 + 2936) == 0;
  *(float *)&v9 = CA::OGL::MetalContext::update_projection_matrix((CA::OGL::MetalContext *)a1);
  ++*(_DWORD *)(a1 + 240);
  v10 = (int *)(v2 + 184);
  v11 = (int *)(v2 + 188);
  if ((*(_BYTE *)(v2 + 70) & 4) != 0)
  {
    v10 = (int *)(v2 + 24);
    v11 = (int *)(v2 + 28);
  }
  v12 = *v11;
  v13 = *v10;
  v14 = *(_QWORD *)(a1 + 248);
  if (v14)
  {
    v15 = (*(unsigned __int8 *)(v14 + 72) >> 1) & 0x1F;
    v16 = v13 >> v15;
    if (v13 >> v15 <= 1)
      v16 = 1;
    v17 = v12 >> v15;
    if (v12 >> v15 <= 1)
      v17 = 1;
    if (v15)
    {
      v13 = v16;
      v12 = v17;
    }
  }
  objc_msgSend(*(id *)(a1 + 3904), "setRenderTargetWidth:", v13, v9);
  objc_msgSend(*(id *)(a1 + 3904), "setRenderTargetHeight:", v12);
  for (i = 0; i != 3; ++i)
  {
    v19 = *(void **)(a1 + 8 * i + 3912);
    if (i >= *(unsigned __int16 *)(v2 + 232) << 28 >> 28)
    {
      objc_msgSend(*(id *)(a1 + 8 * i + 3912), "setTexture:", 0);
      objc_msgSend(v19, "setLoadAction:", 0);
      v21 = 0;
    }
    else
    {
      v20 = v2 + 8 * i;
      objc_msgSend(*(id *)(a1 + 8 * i + 3912), "setTexture:", *(_QWORD *)(v20 + 96));
      v21 = objc_msgSend(*(id *)(v20 + 96), "storageMode") != 3;
    }
    objc_msgSend(v19, "setStoreAction:", v21);
  }
  if (*(_WORD *)(v2 + 214) && (*(_WORD *)(a1 + 816) & 1) == 0)
    *(_QWORD *)(a1 + 3944) = v2;
  if ((*(_WORD *)(v2 + 75) & 0x20) != 0
    && !CA::OGL::MetalContext::start_render_encoder((CA::OGL::MetalContext *)a1))
  {
    return 0;
  }
  return v8;
}

void CA::OGL::MetalContext::stop_encoders(CA::OGL::MetalContext *this)
{
  void *v2;
  uint64_t v3;
  os_signpost_id_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  __CFString *v8;
  unint64_t i;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  void *v15;
  __CFString *v16;
  os_signpost_id_t v17;
  NSObject *v18;
  id v19;
  id *v20;
  __CFString *v21;
  os_signpost_id_t v22;
  NSObject *v23;
  uint8_t buf[4];
  __CFString *v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v2 = (void *)*((_QWORD *)this + 367);
  if (!BYTE1(xmmword_1ECDC6A70))
  {
    if (v2)
    {
      v3 = *((_QWORD *)this + 493);
      if (v3 && *(unsigned __int16 *)(v3 + 216) != *(unsigned __int16 *)(v3 + 214))
        __assert_rtn("stop_encoders", "ogl-metal.mm", 14737, "!memoryless_in_use ()");
      goto LABEL_5;
    }
LABEL_24:
    v14 = 1;
    goto LABEL_25;
  }
  if (!v2)
    goto LABEL_24;
LABEL_5:
  if (*((_QWORD *)this + 382))
  {
    v4 = *((unsigned int *)this + 53);
    if ((_DWORD)v4)
    {
      v5 = CA::OGL::MetalContext::_metal_trace_log;
      if (os_signpost_enabled((os_log_t)CA::OGL::MetalContext::_metal_trace_log))
      {
        v6 = *((unsigned int *)this + 766);
        if ((_DWORD)v6)
        {
          if (CA::OGL::layer_flags_str::once != -1)
            dispatch_once(&CA::OGL::layer_flags_str::once, &__block_literal_global_3915);
          v7 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v6);
          v8 = (__CFString *)objc_msgSend((id)CA::OGL::layer_flags_str::str_cache, "objectForKeyedSubscript:", v7);
          if (!v8)
          {
            v8 = (__CFString *)objc_msgSend(CFSTR("offscreen:"), "mutableCopy");
            for (i = 0; i != 32; ++i)
            {
              if (((v6 >> i) & 1) != 0)
              {
                if (i <= 0x10)
                  v10 = CA::Render::offscreen_flag_names[i];
                else
                  v10 = 0;
                -[__CFString appendFormat:](v8, "appendFormat:", CFSTR(" %s"), v10);
              }
            }
            objc_msgSend((id)CA::OGL::layer_flags_str::str_cache, "setObject:forKeyedSubscript:", v8, v7);
          }
        }
        else
        {
          v8 = CFSTR("assembly");
        }
        v11 = *((_QWORD *)this + 384);
        v12 = *((_DWORD *)this + 770);
        v13 = *((_QWORD *)this + 382);
        *(_DWORD *)buf = 138544130;
        v25 = v8;
        v26 = 2050;
        v27 = v11;
        v28 = 1026;
        v29 = v12;
        v30 = 2050;
        v31 = v13;
        _os_signpost_emit_with_name_impl(&dword_184457000, v5, OS_SIGNPOST_EVENT, v4, "RenderEncoder", "ID is update pass=%{public,name=pass}@ layerid=%{public,name=layerid}#lx contextid=%{public,name=contextid}#x begin=%{public,signpost.description:begin_time}llu", buf, 0x26u);
        v2 = (void *)*((_QWORD *)this + 367);
      }
    }
  }
  objc_msgSend(v2, "endEncoding");

  v14 = 0;
  *((_QWORD *)this + 367) = 0;
  *((_OWORD *)this + 185) = 0u;
  *((_OWORD *)this + 186) = 0u;
  *((_QWORD *)this + 374) = 0;
  *((_WORD *)this + 1640) &= ~1u;
LABEL_25:
  v15 = (void *)*((_QWORD *)this + 368);
  if (v15)
  {
    v16 = (__CFString *)*((_QWORD *)this + 382);
    if (v16)
    {
      v17 = *((unsigned int *)this + 53);
      if ((_DWORD)v17)
      {
        v18 = CA::OGL::MetalContext::_metal_trace_log;
        if (os_signpost_enabled((os_log_t)CA::OGL::MetalContext::_metal_trace_log))
        {
          *(_DWORD *)buf = 134349056;
          v25 = v16;
          _os_signpost_emit_with_name_impl(&dword_184457000, v18, OS_SIGNPOST_EVENT, v17, "BlitEncoder", "ID is update begin=%{public,signpost.description:begin_time}llu", buf, 0xCu);
          v15 = (void *)*((_QWORD *)this + 368);
        }
      }
    }
    objc_msgSend(v15, "endEncoding");

    *((_QWORD *)this + 368) = 0;
    v19 = (id)*((_QWORD *)this + 369);
    if (!v19)
      goto LABEL_38;
  }
  else
  {
    v19 = (id)*((_QWORD *)this + 369);
    if (!v19)
    {
      if ((v14 & 1) != 0)
        return;
      goto LABEL_38;
    }
  }
  v20 = (id *)((char *)this + 2952);
  v21 = (__CFString *)*((_QWORD *)this + 382);
  if (v21)
  {
    v22 = *((unsigned int *)this + 53);
    if ((_DWORD)v22)
    {
      v23 = CA::OGL::MetalContext::_metal_trace_log;
      if (os_signpost_enabled((os_log_t)CA::OGL::MetalContext::_metal_trace_log))
      {
        *(_DWORD *)buf = 134349056;
        v25 = v21;
        _os_signpost_emit_with_name_impl(&dword_184457000, v23, OS_SIGNPOST_EVENT, v22, "ComputeEncoder", "ID is update begin=%{public,signpost.description:begin_time}llu", buf, 0xCu);
        v19 = *v20;
      }
    }
  }
  objc_msgSend(v19, "endEncoding");

  *v20 = 0;
LABEL_38:
  if ((*((_BYTE *)this + 2677) & 0x80) != 0 && *((_QWORD *)this + 10))
  {
    if (byte_1ECDC6AAA)
      CA::OGL::MetalContext::issue_cache_drop_hints(this);
  }
}

float CA::OGL::MetalContext::update_projection_matrix(CA::OGL::MetalContext *this)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float result;
  float v12;
  float v13;
  float v14;
  float v15;

  v1 = *((_QWORD *)this + 31);
  v2 = *(_DWORD *)(v1 + 32);
  v3 = *(_DWORD *)(v1 + 36);
  v4 = *(_DWORD *)(v1 + 28);
  v5 = (float)v3;
  v6 = (float)(v4 + v3);
  if ((*(_WORD *)(v1 + 232) & 0x400) != 0)
    v7 = (float)(v4 + v3);
  else
    v7 = (float)v2;
  if ((*(_WORD *)(v1 + 232) & 0x400) != 0)
    v8 = (float)v3;
  else
    v8 = (float)(*(_DWORD *)(v1 + 24) + v2);
  if ((*(_WORD *)(v1 + 232) & 0x400) != 0)
  {
    v5 = (float)v2;
    v6 = (float)(*(_DWORD *)(v1 + 24) + v2);
  }
  v9 = 1.0 / (float)(v8 - v7);
  v10 = 1.0 / (float)(v6 - v5);
  result = v9 + v9;
  v12 = 0.0;
  if ((*(_WORD *)(v1 + 232) & 0x400) != 0)
    v13 = 0.0;
  else
    v13 = v9 + v9;
  *((float *)this + 534) = v13;
  if ((*(_WORD *)(v1 + 232) & 0x400) == 0)
    result = 0.0;
  *((float *)this + 538) = result;
  *((_DWORD *)this + 542) = 0;
  *((float *)this + 546) = -(float)((float)(v8 + v7) * v9);
  if ((*(_WORD *)(v1 + 232) & 0x400) != 0)
    v14 = v10 * -2.0;
  else
    v14 = 0.0;
  *((float *)this + 535) = v14;
  if ((*(_WORD *)(v1 + 232) & 0x400) == 0)
    v12 = v10 * -2.0;
  *((float *)this + 539) = v12;
  *((_DWORD *)this + 543) = 0;
  v15 = v10 * (float)(v6 + v5);
  *((float *)this + 547) = v15;
  *((_QWORD *)this + 268) = 0;
  *((_QWORD *)this + 270) = 0;
  *((_QWORD *)this + 272) = 0;
  *((_QWORD *)this + 274) = 0x3F80000000000000;
  if ((*(_WORD *)(v1 + 232) & 0x200) != 0)
  {
    *((float *)this + 538) = -result;
    *((float *)this + 539) = -v12;
    result = -v15;
    *((float *)this + 547) = -v15;
  }
  return result;
}

uint64_t CA::Render::Object::render_id(CA::Render::Object *this)
{
  if (CA::Render::Encoder::initialize_render_id_slide(void)::once[0] != -1)
    dispatch_once(CA::Render::Encoder::initialize_render_id_slide(void)::once, &__block_literal_global_11026);
  if (this)
    return (uint64_t)this + CA::Render::_render_id_slide;
  else
    return 0;
}

void CA::OGL::MetalBufferPool::pool_flush(CA::OGL::MetalBufferPool *this, unint64_t a2, int a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t *v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  void *v21;
  uint64_t *v22;
  uint64_t *v23;
  BOOL v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  void *v29;
  _QWORD v30[2];

  v30[1] = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v5 = *((_QWORD *)this + 1);
    if (v5)
    {
      v6 = (_QWORD *)((char *)this + 24);
      if (*((_DWORD *)this + 6))
      {
        CA::OGL::MetalBufferPool::retire_metal_buffer((uint64_t)this, v5);
        *((_QWORD *)this + 1) = 0;
        *v6 = 0;
        *((_QWORD *)this + 4) = 0;
      }
    }
  }
  os_unfair_lock_lock((os_unfair_lock_t)this + 14);
  v7 = (_QWORD *)*((_QWORD *)this + 43);
  if (v7)
  {
    v8 = (uint64_t *)((char *)this + 344);
    v9 = (uint64_t *)*((_QWORD *)this + 43);
    do
    {
      v10 = v9;
      v9 = (uint64_t *)*v9;
    }
    while (v9);
    do
    {
      v11 = v7[4];
      v12 = v11 > a2;
      if (v11 <= a2)
        v13 = v7 + 1;
      else
        v13 = v7;
      if (v12)
        v8 = v7;
      v7 = (_QWORD *)*v13;
    }
    while (*v13);
    v14 = v10;
    if (v10 != v8)
    {
      v15 = v10;
      do
      {
        v16 = (void *)v15[5];
        v30[0] = v16;
        if (objc_msgSend(v16, "length") == 0x40000)
        {
          v17 = *((_QWORD *)this + 35);
          if (v17 >= 0x10)
          {
            v18 = *((_QWORD *)this + 34);
            v19 = *(void **)(*(_QWORD *)(*((_QWORD *)this + 31) + ((v18 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v18 & 0x1FF));
            v29 = v19;
            *((_QWORD *)this + 34) = v18 + 1;
            *((_QWORD *)this + 35) = v17 - 1;
            std::deque<objc_object  {objcproto9MTLBuffer}*>::__maybe_remove_front_spare[abi:nn180100]((uint64_t)this + 240);
            v20 = *((_QWORD *)this + 41);
            if (v20 >= 0x40)
            {
              v21 = *(void **)(*(_QWORD *)(*((_QWORD *)this + 37) + ((*((_QWORD *)this + 40) >> 6) & 0x3FFFFFFFFFFFFF8))
                             + 8 * (*((_QWORD *)this + 40) & 0x1FFLL));
              ++*((_QWORD *)this + 40);
              *((_QWORD *)this + 41) = v20 - 1;
              std::deque<objc_object  {objcproto9MTLBuffer}*>::__maybe_remove_front_spare[abi:nn180100]((uint64_t)this + 288);

            }
            std::deque<objc_object  {objcproto9MTLBuffer}*>::push_back((_QWORD *)this + 36, &v29);
            objc_msgSend(v19, "setPurgeableState:", 3);
          }
          std::deque<objc_object  {objcproto9MTLBuffer}*>::push_back((_QWORD *)this + 30, v30);
        }
        else
        {

        }
        v22 = (uint64_t *)v15[1];
        if (v22)
        {
          do
          {
            v23 = v22;
            v22 = (uint64_t *)*v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            v23 = (uint64_t *)v15[2];
            v24 = *v23 == (_QWORD)v15;
            v15 = v23;
          }
          while (!v24);
        }
        v15 = v23;
      }
      while (v23 != v8);
      v14 = v8;
    }
    if (v10 != v14)
    {
      do
      {
        v25 = (uint64_t *)v10[1];
        v26 = v10;
        if (v25)
        {
          do
          {
            v27 = v25;
            v25 = (uint64_t *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v27 = (uint64_t *)v26[2];
            v24 = *v27 == (_QWORD)v26;
            v26 = v27;
          }
          while (!v24);
        }
        if (*((uint64_t **)this + 42) == v10)
          *((_QWORD *)this + 42) = v27;
        v28 = (uint64_t *)*((_QWORD *)this + 43);
        --*((_QWORD *)this + 44);
        std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v28, v10);
        operator delete(v10);
        v10 = v27;
      }
      while (v27 != v14);
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)this + 14);
}

void sub_1844CFD8C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void std::deque<objc_object  {objcproto9MTLBuffer}*>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  __int128 v34;
  void *v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t i;
  _QWORD *v78;
  char *v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  __int128 v111;

  v4 = (char *)a1[2];
  v5 = (char *)a1[1];
  v6 = v4 - v5;
  if (v4 == v5)
    v7 = 0;
  else
    v7 = ((v4 - v5) << 6) - 1;
  v8 = a1[4];
  v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 >= 0x200)
    {
      a1[4] = v8 - 512;
      v12 = *(_QWORD *)v5;
      v10 = v5 + 8;
      v11 = v12;
      a1[1] = v10;
      if ((char *)a1[3] == v4)
      {
        v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 <= *a1)
        {
          if (v4 == (char *)*a1)
            v41 = 1;
          else
            v41 = (uint64_t)&v4[-*a1] >> 2;
          v42 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Display::DisplayLinkItem *>>(v41);
          v44 = &v42[8 * (v41 >> 2)];
          v45 = (uint64_t *)a1[1];
          v4 = v44;
          v46 = a1[2] - (_QWORD)v45;
          if (v46)
          {
            v4 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            v47 = 8 * (v46 >> 3);
            v48 = &v42[8 * (v41 >> 2)];
            do
            {
              v49 = *v45++;
              *(_QWORD *)v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v4;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            v4 = (char *)a1[2];
          }
        }
        else
        {
          v14 = v13 >> 3;
          v15 = v13 >> 3 < -1;
          v16 = (v13 >> 3) + 2;
          if (v15)
            v17 = v16;
          else
            v17 = v14 + 1;
          v18 = -(v17 >> 1);
          v19 = v17 >> 1;
          v20 = &v10[-8 * v19];
          v21 = v4 - v10;
          if (v4 == v10)
          {
            v22 = v4;
          }
          else
          {
            memmove(&v10[-8 * v19], v10, v4 - v10);
            v22 = (char *)a1[1];
          }
          v4 = &v20[v21];
          a1[1] = &v22[8 * v18];
          a1[2] = &v20[v21];
        }
      }
      *(_QWORD *)v4 = v11;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      v5 = (char *)a1[1];
      v9 = a1[5] + a1[4];
      goto LABEL_84;
    }
    v23 = v6 >> 3;
    v24 = (char *)a1[3];
    v25 = (char *)*a1;
    v26 = (uint64_t)&v24[-*a1];
    if (v6 >> 3 < (unint64_t)(v26 >> 3))
    {
      v27 = operator new(0x1000uLL);
      v28 = v27;
      if (v24 == v4)
      {
        if (v25 == v5)
        {
          if (v4 == v5)
            v51 = 1;
          else
            v51 = v26 >> 2;
          v52 = 2 * v51;
          v53 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Display::DisplayLinkItem *>>(v51);
          v5 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          v55 = (uint64_t *)a1[1];
          v56 = v5;
          v57 = a1[2] - (_QWORD)v55;
          if (v57)
          {
            v56 = &v5[v57 & 0xFFFFFFFFFFFFFFF8];
            v58 = 8 * (v57 >> 3);
            v59 = v5;
            do
            {
              v60 = *v55++;
              *(_QWORD *)v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v5;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            v5 = (char *)a1[1];
          }
        }
        *((_QWORD *)v5 - 1) = v28;
        v62 = (char *)a1[1];
        v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        v64 = *((_QWORD *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1)
              v96 = 1;
            else
              v96 = (uint64_t)&v63[-*a1] >> 2;
            v97 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Display::DisplayLinkItem *>>(v96);
            v99 = &v97[8 * (v96 >> 2)];
            v100 = (uint64_t *)a1[1];
            v63 = v99;
            v101 = a1[2] - (_QWORD)v100;
            if (v101)
            {
              v63 = &v99[v101 & 0xFFFFFFFFFFFFFFF8];
              v102 = 8 * (v101 >> 3);
              v103 = &v97[8 * (v96 >> 2)];
              do
              {
                v104 = *v100++;
                *(_QWORD *)v103 = v104;
                v103 += 8;
                v102 -= 8;
              }
              while (v102);
            }
            v105 = (char *)*a1;
            *a1 = v97;
            a1[1] = v99;
            a1[2] = v63;
            a1[3] = &v97[8 * v98];
            if (v105)
            {
              operator delete(v105);
              v63 = (char *)a1[2];
            }
          }
          else
          {
            v66 = v65 >> 3;
            v15 = v65 >> 3 < -1;
            v67 = (v65 >> 3) + 2;
            if (v15)
              v68 = v67;
            else
              v68 = v66 + 1;
            v69 = -(v68 >> 1);
            v70 = v68 >> 1;
            v71 = &v62[-8 * v70];
            v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              v62 = (char *)a1[1];
            }
            v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(_QWORD *)v63 = v64;
      }
      else
      {
        *(_QWORD *)v4 = v27;
      }
      goto LABEL_82;
    }
    if (v24 == v25)
      v29 = 1;
    else
      v29 = v26 >> 2;
    v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Display::DisplayLinkItem *>>(v29);
    v32 = v31;
    v33 = &v30[8 * v23];
    *(_QWORD *)&v34 = v30;
    *((_QWORD *)&v34 + 1) = v33;
    v109 = v34;
    v35 = operator new(0x1000uLL);
    *(_QWORD *)&v36 = v33;
    *((_QWORD *)&v36 + 1) = &v30[8 * v32];
    if (v23 == v32)
    {
      v37 = 8 * v23;
      *(_QWORD *)&v38 = v109;
      if (v6 >= 1)
      {
        v39 = v37 >> 3;
        if (v39 >= -1)
          v40 = v39 + 1;
        else
          v40 = v39 + 2;
        v33 -= 8 * (v40 >> 1);
        *(_QWORD *)&v36 = v33;
        *((_QWORD *)&v38 + 1) = v33;
        goto LABEL_56;
      }
      v73 = v37 >> 2;
      if (v4 == v5)
        v74 = 1;
      else
        v74 = v73;
      v75 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Display::DisplayLinkItem *>>(v74);
      v33 = &v75[8 * (v74 >> 2)];
      *(_QWORD *)&v38 = v75;
      *((_QWORD *)&v38 + 1) = v33;
      *(_QWORD *)&v36 = v33;
      *((_QWORD *)&v36 + 1) = &v75[8 * v76];
      if (!v30)
        goto LABEL_56;
      v106 = v36;
      v109 = v38;
      operator delete(v30);
      v36 = v106;
    }
    v38 = v109;
LABEL_56:
    *(_QWORD *)v33 = v35;
    *(_QWORD *)&v36 = v36 + 8;
    for (i = a1[2]; i != a1[1]; i -= 8)
    {
      v78 = (_QWORD *)*((_QWORD *)&v38 + 1);
      if (*((_QWORD *)&v38 + 1) == (_QWORD)v38)
      {
        v80 = (_BYTE *)v36;
        if ((unint64_t)v36 >= *((_QWORD *)&v36 + 1))
        {
          if (*((_QWORD *)&v36 + 1) == *((_QWORD *)&v38 + 1))
            v85 = 1;
          else
            v85 = (uint64_t)(*((_QWORD *)&v36 + 1) - *((_QWORD *)&v38 + 1)) >> 2;
          v86 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Display::DisplayLinkItem *>>(v85);
          v79 = &v86[(2 * v85 + 6) & 0xFFFFFFFFFFFFFFF8];
          v88 = v79;
          v89 = v80 - (_BYTE *)v78;
          if (v80 != (_BYTE *)v78)
          {
            v88 = &v79[v89 & 0xFFFFFFFFFFFFFFF8];
            v90 = 8 * (v89 >> 3);
            v91 = v79;
            v92 = v78;
            do
            {
              v93 = *v92++;
              *(_QWORD *)v91 = v93;
              v91 += 8;
              v90 -= 8;
            }
            while (v90);
          }
          *(_QWORD *)&v38 = v86;
          *((_QWORD *)&v38 + 1) = v79;
          *(_QWORD *)&v36 = v88;
          *((_QWORD *)&v36 + 1) = &v86[8 * v87];
          if (v78)
          {
            v107 = v36;
            v111 = v38;
            operator delete(v78);
            v36 = v107;
            v38 = v111;
          }
        }
        else
        {
          v81 = (uint64_t)(*((_QWORD *)&v36 + 1) - v36) >> 3;
          if (v81 >= -1)
            v82 = v81 + 1;
          else
            v82 = v81 + 2;
          v83 = v82 >> 1;
          v84 = v36 + 8 * (v82 >> 1);
          v79 = (char *)(v84 - (v36 - *((_QWORD *)&v38 + 1)));
          if ((_QWORD)v36 == *((_QWORD *)&v38 + 1))
          {
            v80 = (_BYTE *)*((_QWORD *)&v38 + 1);
          }
          else
          {
            v108 = *((_QWORD *)&v36 + 1);
            v110 = v38;
            memmove((void *)(v84 - (v36 - *((_QWORD *)&v38 + 1))), *((const void **)&v38 + 1), v36 - *((_QWORD *)&v38 + 1));
            *((_QWORD *)&v36 + 1) = v108;
            *(_QWORD *)&v38 = v110;
          }
          *((_QWORD *)&v38 + 1) = v79;
          *(_QWORD *)&v36 = &v80[8 * v83];
        }
      }
      else
      {
        v79 = (char *)*((_QWORD *)&v38 + 1);
      }
      v94 = *(_QWORD *)(i - 8);
      *((_QWORD *)v79 - 1) = v94;
      *((_QWORD *)&v38 + 1) -= 8;
    }
    v95 = (char *)*a1;
    *(_OWORD *)a1 = v38;
    *((_OWORD *)a1 + 1) = v36;
    if (v95)
      operator delete(v95);
    goto LABEL_83;
  }
LABEL_84:
  *(_QWORD *)(*(_QWORD *)&v5[(v9 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v9 & 0x1FF)) = *a2;
  ++a1[5];
}

void sub_1844D02FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  void *v11;

  operator delete(v11);
  if ((_QWORD)a11)
    operator delete((void *)a11);
  _Unwind_Resume(a1);
}

void CA::OGL::MetalBufferPool::retire_metal_buffer(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t v11;

  v4 = (os_unfair_lock_s *)(a1 + 56);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 16);
  v6 = (uint64_t *)operator new(0x30uLL);
  v7 = v6;
  v6[4] = v5;
  v6[5] = a2;
  v8 = *(uint64_t **)(a1 + 344);
  if (v8)
  {
    do
    {
      while (1)
      {
        v9 = (uint64_t **)v8;
        if (v5 >= v8[4])
          break;
        v8 = (uint64_t *)*v8;
        v10 = v9;
        if (!*v9)
          goto LABEL_8;
      }
      v8 = (uint64_t *)v8[1];
    }
    while (v8);
    v10 = v9 + 1;
  }
  else
  {
    v9 = (uint64_t **)(a1 + 344);
    v10 = (uint64_t **)(a1 + 344);
  }
LABEL_8:
  *v6 = 0;
  v6[1] = 0;
  v6[2] = (uint64_t)v9;
  *v10 = v6;
  v11 = **(_QWORD **)(a1 + 336);
  if (v11)
  {
    *(_QWORD *)(a1 + 336) = v11;
    v7 = *v10;
  }
  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 344), v7);
  ++*(_QWORD *)(a1 + 352);
  os_unfair_lock_unlock(v4);
}

void sub_1844D03EC(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t CA::OGL::MetalContext::clear_memoryless_texture_(uint64_t a1, uint64_t a2)
{
  int v4;
  const void *v5;
  uint64_t v6;
  int32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  uint64_t result;
  _QWORD v11[3];
  _QWORD v12[2];
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD __dst[62];

  __dst[61] = *MEMORY[0x1E0C80C00];
  *(_WORD *)(a2 + 75) &= ~0x20u;
  v14 = 0x3C003C003C003C00;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v12[0] = 0;
  v13 = 0uLL;
  v18 = 0x4013F800000;
  v12[1] = &CA::Shape::_infinite_shape;
  v4 = *(unsigned __int8 *)(a1 + 64);
  *(_BYTE *)(a1 + 64) = 0;
  v5 = *(const void **)(a1 + 16);
  memcpy(__dst, v5, 0x1E8uLL);
  __dst[0] = v5;
  *(_QWORD *)(a1 + 16) = __dst;
  v12[0] = CA::OGL::Context::set_gstate(a1, (uint64_t)v12);
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + 481) &= ~1u;
  v6 = *(_QWORD *)(a1 + 800);
  if (v6)
  {
    *(_QWORD *)(a1 + 800) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + 16) = 97;
  v7 = *(int32x2_t *)(a2 + 32);
  v8 = vcvt_f32_s32(v7);
  v9 = vcvt_f32_s32(vadd_s32(*(int32x2_t *)(a2 + 40), v7));
  v11[0] = v8;
  v11[1] = v9;
  v11[2] = 0;
  CA::OGL::MetalContext::draw_axis_aligned_rects((CA::OGL::Context *)a1, 1u, (char *)v11);
  if (v6)
  {
    *(_QWORD *)(a1 + 800) = v6;
    ++*(_DWORD *)(a1 + 240);
  }
  result = CA::OGL::Context::set_gstate(a1, **(_QWORD **)(a1 + 232));
  *(_QWORD *)(a1 + 16) = __dst[0];
  if (v4)
    *(_BYTE *)(a1 + 64) = 1;
  return result;
}

void sub_1844D057C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (!a23)
    _Unwind_Resume(a1);
  __assert_rtn("~ContextState", "ogl-context.h", 551, "!next && \"Imbalanced ContextState push/pop\"");
}

void CA::OGL::MetalContext::draw_axis_aligned_rects(CA::OGL::Context *a1, unsigned int a2, char *a3)
{
  int v3;

  v3 = *(unsigned __int8 *)(*((_QWORD *)a1 + 2) + 16);
  if ((v3 - 89) >= 3 && v3 != 97)
    __assert_rtn("draw_axis_aligned_rects", "ogl-metal.mm", 8130, "get_texture_function () == OGL_TEX_PATH_CLEAR || get_texture_function () == OGL_TEX_PATH_BLIT || get_texture_function () == OGL_TEX_PATH_BLIT_EO || get_texture_function () == OGL_TEX_ATTACHMENT_CLEAR");
  CA::OGL::MetalContext::draw(a1, 4, 4u, a2, a3, 0x18uLL, 8u, 0, a2, 0, 0, 0);
}

intptr_t ___ZN2CA3OGL16AsynchronousItem20retain_latest_bufferERNS0_7ContextEb_block_invoke(intptr_t result)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;

  v1 = *(unsigned int **)(result + 32);
  if (!*(_BYTE *)(result + 48))
    result = dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(result + 40) + 24));
  v2 = v1 + 2;
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 - 1, v2));
  if (v1)
  {
    if (v3 == 1)
      return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v1 + 8))(v1);
  }
  return result;
}

uint64_t CA::HalfFloat::convert_float_array(uint64_t this, float32x4_t *a2, const float *a3)
{
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v15;
  __int32 v16;

  if (((a2 | this) & 0xF) != 0)
  {
    if ((unint64_t)a3 >= 4)
    {
      do
      {
        v15 = *a2++;
        *(float16x4_t *)this = vcvt_f16_f32(v15);
        this += 8;
        --a3;
      }
      while ((unint64_t)a3 > 3);
    }
    for (; a3; a3 = (const float *)((char *)a3 - 1))
    {
      v16 = a2->i32[0];
      a2 = (float32x4_t *)((char *)a2 + 4);
      _S0 = v16;
      __asm { FCVT            H0, S0 }
      *(_WORD *)this = _S0;
      this += 2;
    }
  }
  else
  {
    if ((unint64_t)a3 >= 0x10)
    {
      do
      {
        v4 = a2[2];
        v3 = a2[3];
        v6 = *a2;
        v5 = a2[1];
        a2 += 4;
        *(float16x8_t *)this = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v6), v5);
        *(float16x8_t *)(this + 16) = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v4), v3);
        this += 32;
        a3 -= 4;
      }
      while ((unint64_t)a3 > 0xF);
    }
    if ((unint64_t)a3 >= 4)
    {
      do
      {
        v7 = *a2++;
        *(float16x4_t *)this = vcvt_f16_f32(v7);
        this += 8;
        --a3;
      }
      while ((unint64_t)a3 > 3);
    }
    if (a3 != (const float *)1)
    {
      if (a3 != (const float *)2)
      {
        if (a3 != (const float *)3)
          return this;
        _S0 = a2->i32[2];
        __asm { FCVT            H0, S0 }
        *(_WORD *)(this + 4) = _S0;
      }
      _S0 = a2->i32[1];
      __asm { FCVT            H0, S0 }
      *(_WORD *)(this + 2) = _S0;
    }
    _S0 = a2->i32[0];
    __asm { FCVT            H0, S0 }
    *(_WORD *)this = _S0;
  }
  return this;
}

void CA::OGL::MetalContext::copy_submitted_callbacks(uint64_t a1, void *a2)
{
  const void **v3;
  const void **v4;
  uint64_t v6;
  const void *v7;
  _QWORD v8[6];

  v8[5] = *MEMORY[0x1E0C80C00];
  v3 = *(const void ***)(a1 + 3016);
  v4 = *(const void ***)(a1 + 3024);
  if (v3 != v4)
  {
    v6 = MEMORY[0x1E0C809B0];
    do
    {
      v7 = *v3++;
      v8[0] = v6;
      v8[1] = 3221225472;
      v8[2] = ___ZN2CA3OGL12MetalContext24copy_submitted_callbacksEPU27objcproto16MTLCommandBuffer11objc_object_block_invoke;
      v8[3] = &unk_1E15A6600;
      v8[4] = v7;
      objc_msgSend(a2, "addScheduledHandler:", v8);
      _Block_release(v7);
    }
    while (v3 != v4);
    v3 = *(const void ***)(a1 + 3016);
  }
  *(_QWORD *)(a1 + 3024) = v3;
}

void CA::CG::IOSurfaceDrawable::mark_texture(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v2 = this + 3;
  os_unfair_lock_lock(this + 3);
  v3 = *(_QWORD *)&this[26]._os_unfair_lock_opaque;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 36);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  os_unfair_lock_unlock(v2);
}

void CA::CG::AccelRenderer::unlock_surface(CA::CG::AccelRenderer *this)
{
  __IOSurface *v2;
  char *v3;

  v2 = (__IOSurface *)*((_QWORD *)this + 532);
  if (v2)
  {
    v3 = (char *)this + 4256;
    IOSurfaceUnlock(v2, 0, 0);
    CFRelease(*(CFTypeRef *)v3);
    *(_QWORD *)v3 = 0;
    *((_QWORD *)v3 + 1) = 0;
  }
}

uint64_t CA::CG::Renderer::collect_(CA::CG::Renderer *this)
{
  CA::CG::Renderer *v1;
  uint64_t v2;
  char *v3;
  _QWORD **v4;
  _QWORD *v5;
  uint64_t v6;
  _DWORD *v7;
  unsigned int v8;
  char *v9;
  char *v10;
  uint64_t *v11;
  unsigned int v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  _QWORD *v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  malloc_zone_t *malloc_zone;
  uint64_t v24;
  char *v25;
  uint64_t result;
  CA::CG::Renderer *v27;
  uint64_t v28;

  v1 = this;
  CA::Render::collect(0, *(double *)(*((_QWORD *)this + 1) + 224));
  v2 = 0;
  v27 = v1;
  do
  {
    v3 = (char *)v1 + 192 * v2;
    if (*((_DWORD *)v3 + 370))
    {
      v4 = (_QWORD **)((char *)v1 + 192 * v2 + 1488);
      v5 = *v4;
      if (*v4 != v4)
      {
        v6 = (uint64_t)(v3 + 1392);
        v7 = v3 + 1480;
        v8 = *(_DWORD *)(*((_QWORD *)v1 + 1) + 216);
        v28 = v2;
        v9 = (char *)v1 + 192 * v2;
        v10 = v9 + 1440;
        v11 = (uint64_t *)(v9 + 1448);
        v12 = 256;
        do
        {
          v13 = (_QWORD *)*v5;
          if (*((_DWORD *)v5 + 14) + v12 < v8)
          {
            v14 = (_QWORD *)v5[1];
            v13[1] = v14;
            *v14 = v13;
            *v5 = v5;
            v5[1] = v5;
            v15 = *v11;
LABEL_7:
            while ((char *)v15 != v10)
            {
              v16 = (_DWORD *)v15;
              v15 = *(_QWORD *)(v15 + 8);
              v17 = v16 + 10;
              while (1)
              {
                v17 = (_QWORD *)*v17;
                if (!v17)
                  break;
                if ((_QWORD *)v17[1] == v5)
                {
                  CA::OGL::Mosaic::delete_image(v6, v16);
                  goto LABEL_7;
                }
              }
            }
            --*v7;
            v18 = (unsigned int *)v5[2];
            if (v18)
            {
              v19 = v18 + 2;
              do
              {
                v20 = __ldaxr(v19);
                v21 = v20 - 1;
              }
              while (__stlxr(v21, v19));
              if (!v21)
                (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 16))(v18);
            }
            v22 = v5[3];
            if (v22)
              MEMORY[0x186DBD978](v22, 0x1020C8062D53EE8);
            malloc_zone = (malloc_zone_t *)get_malloc_zone();
            malloc_zone_free(malloc_zone, v5);
          }
          v12 >>= 1;
          v5 = v13;
        }
        while (v13 != v4);
        v1 = v27;
        v2 = v28;
        if (!*v7 && !*((_QWORD *)v27 + 24 * v28 + 184))
        {
          v24 = *((_QWORD *)v27 + 24 * v28 + 183);
          if (v24)
            MEMORY[0x186DBD978](v24, 0x20C8093837F09);
          v25 = (char *)v27 + 192 * v28;
          *((_QWORD *)v25 + 183) = 0;
          *((_QWORD *)v25 + 182) = 0;
        }
      }
    }
    ++v2;
  }
  while (v2 != 6);
  result = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)v1 + 1) + 216))(*((_QWORD *)v1 + 1), 0);
  *((_BYTE *)v1 + 4176) &= ~2u;
  return result;
}

uint64_t CA::CG::Queue::did_flush_renderer(uint64_t this)
{
  *(_DWORD *)(this + 168) = 0;
  return this;
}

void CA::CG::Renderer::flush_released_objects(CA::CG::Renderer *this)
{
  uint64_t v1;
  int v2;
  _QWORD block[5];
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock((os_unfair_lock_t)&CA::CG::_released_objects_lock);
  v1 = CA::CG::_released_objects;
  v2 = CA::CG::_released_objects_count;
  CA::CG::_released_objects = 0;
  CA::CG::_released_objects_count = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::CG::_released_objects_lock);
  if (v1)
  {
    if (CA::CG::release_queue(void)::once != -1)
      dispatch_once(&CA::CG::release_queue(void)::once, &__block_literal_global_14);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZN2CA2CG8Renderer22flush_released_objectsEv_block_invoke;
    block[3] = &__block_descriptor_tmp_4;
    v4 = v2;
    block[4] = v1;
    dispatch_async((dispatch_queue_t)CA::CG::release_queue(void)::queue, block);
  }
}

intptr_t ___ZN2CA3OGL16AsynchronousItem12first_bufferERNS0_7ContextEPNS_6Render6HandleE_block_invoke(uint64_t a1)
{
  unsigned int *v1;
  intptr_t result;
  unsigned int *v3;
  unsigned int v4;

  v1 = *(unsigned int **)(a1 + 32);
  result = dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 40) + 24));
  v3 = v1 + 2;
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 - 1, v3));
  if (v1)
  {
    if (v4 == 1)
      return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v1 + 8))(v1);
  }
  return result;
}

_DWORD *CA::Bounds::subtract_exterior(_DWORD *this, const CA::Shape *a2)
{
  int v2;
  _DWORD *v4;
  const int *v5;
  int *v6[4];
  __int128 v7;
  int v8;
  _BYTE v9[2036];
  _BYTE v10[56];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = this[2];
  if (v2 >= this[3])
    v2 = this[3];
  if (v2 >= 1)
  {
    v4 = this;
    if ((a2 & 1) != 0)
    {
      if (a2 == (const CA::Shape *)1)
        return this;
    }
    else if (*((_DWORD *)a2 + 1) == 6)
    {
      return this;
    }
    memset(v10, 0, 48);
    CA::Shape::operator=((uint64_t)v10, this);
    bzero(&v8, 0x7F0uLL);
    v7 = xmmword_18474E610;
    v8 = 2;
    v6[0] = (int *)&v7;
    v6[1] = (int *)v9;
    v6[2] = (int *)v9;
    v6[3] = (int *)&v7 + 3;
    *(_QWORD *)&v9[2028] = v4;
    return (_DWORD *)CA::shape_subtract(v6, (uint64_t)v10, (uint64_t)a2, v5);
  }
  return this;
}

uint64_t CA::shape_subtract(int **this, uint64_t a2, uint64_t a3, const int *a4)
{
  __int128 *v4;
  char *v6;
  int v7;
  int v8;
  const int *v9;
  const int *v11;
  const int *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  const int *v16;
  int v17;
  unsigned int v18;
  int *v19;
  int *v20;
  int *v21;
  int v22;
  int v23;
  int *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int *v29;
  int *v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v4 = (__int128 *)a2;
  v41 = *MEMORY[0x1E0C80C00];
  v39 = 0u;
  v40 = 0u;
  v38 = 0u;
  if ((a2 & 1) != 0)
  {
    v38 = xmmword_18474E620;
    LODWORD(v39) = 2;
    DWORD1(v39) = (int)((unint64_t)a2 >> 16) >> 16;
    DWORD2(v39) = 4;
    HIDWORD(v39) = a2 >> 48;
    LODWORD(v40) = HIDWORD(v39) + (a2 >> 17);
    DWORD1(v40) = ((a2 >> 2) & 0x7FFF) + DWORD1(v39);
    *((_QWORD *)&v40 + 1) = 0x7FFFFFFF00000002;
    v4 = &v38;
  }
  v36 = 0uLL;
  v37 = 0uLL;
  v35 = 0uLL;
  if ((a3 & 1) != 0)
  {
    v35 = xmmword_18474E620;
    LODWORD(v36) = 2;
    DWORD1(v36) = (int)((unint64_t)a3 >> 16) >> 16;
    DWORD2(v36) = 4;
    HIDWORD(v36) = a3 >> 48;
    LODWORD(v37) = HIDWORD(v36) + (a3 >> 17);
    DWORD1(v37) = ((a3 >> 2) & 0x7FFF) + DWORD1(v36);
    *((_QWORD *)&v37 + 1) = 0x7FFFFFFF00000002;
    a3 = (uint64_t)&v35;
  }
  v8 = *((_DWORD *)v4 + 3);
  v6 = (char *)v4 + 12;
  v7 = v8;
  if (v8 != 0x7FFFFFFF)
  {
    v11 = (const int *)(a3 + 12);
    v12 = (const int *)(a3 + 12);
    v9 = (const int *)v6;
    while (1)
    {
      v13 = *v12;
      if (*v12 == 0x7FFFFFFF)
        return CA::ShapeHandle::finish((CA::ShapeHandle *)this, v9);
      if (v7 - v13 >= 1)
        break;
      v14 = v9[1];
      if (((v7 - v13) & 0x80000000) == 0)
      {
        v6 = (char *)v9;
        v9 += v14;
        goto LABEL_14;
      }
      LODWORD(v15) = v11[1];
      v6 = (char *)v9;
      v9 += v14;
      v16 = v12;
LABEL_15:
      v17 = v14 - 2;
      v18 = v14 - 2 + v15;
      v19 = this[1];
      if ((*this)[2] < &v19[v18] - *this)
      {
        if (!CA::ShapeHandle::grow((CA::ShapeHandle *)this, v18))
          return CA::ShapeHandle::finish((CA::ShapeHandle *)this, v9);
        v19 = this[1];
      }
      *v19 = v7;
      v20 = v19 + 2;
      this[1] = v19 + 2;
      v19[1] = 0;
      v21 = (int *)(v6 + 8);
      if (v17)
      {
        v22 = v15 - 2;
        if ((_DWORD)v15 != 2)
        {
          v23 = 0;
          v24 = (int *)(v11 + 2);
          while (1)
          {
            v25 = *v21;
            v26 = *v24;
            if (*v21 > *v24)
              break;
            ++v21;
            --v17;
            v27 = v23 ^ 1;
            if (((v25 - *v24) & 0x80000000) == 0)
              goto LABEL_24;
            v26 = v25;
LABEL_25:
            if (v23 == 1 || v27 == 1)
            {
              *v20++ = v26;
              this[1] = v20;
            }
            if (v17)
            {
              v23 = v27;
              if (v22)
                continue;
            }
            goto LABEL_32;
          }
          v27 = v23;
LABEL_24:
          ++v24;
          --v22;
          v27 ^= 2u;
          goto LABEL_25;
        }
      }
LABEL_32:
      if (v17)
      {
        do
        {
          v28 = *v21++;
          *v20++ = v28;
          --v17;
        }
        while (v17);
        this[1] = v20;
      }
      v29 = this[2];
      v30 = this[3];
      v31 = (unint64_t)((char *)v20 - (char *)v29) >> 2;
      v29[1] = v31;
      if (v30 && v30[1] == (_DWORD)v31)
      {
        v32 = 2;
        while ((_DWORD)v31 != (_DWORD)v32)
        {
          v33 = v29[v32];
          v34 = v30[v32++];
          if (v33 != v34)
            goto LABEL_40;
        }
        this[1] = v29;
      }
      else
      {
LABEL_40:
        this[2] = v20;
        this[3] = v29;
      }
      v7 = *v9;
      v12 = v16;
      if (*v9 == 0x7FFFFFFF)
        return CA::ShapeHandle::finish((CA::ShapeHandle *)this, v9);
    }
    LODWORD(v14) = *((_DWORD *)v6 + 1);
LABEL_14:
    v15 = v12[1];
    v16 = &v12[v15];
    v11 = v12;
    v7 = *v12;
    goto LABEL_15;
  }
  v9 = (const int *)v6;
  return CA::ShapeHandle::finish((CA::ShapeHandle *)this, v9);
}

CATransform3D *__cdecl CATransform3DRotate_(CATransform3D *__return_ptr retstr, CATransform3D *t, CGFloat angle, CGFloat x, CGFloat y, CGFloat z)
{
  double *v6;
  const double *v8;
  CATransform3D *result;
  double v10[17];

  v10[16] = *(double *)MEMORY[0x1E0C80C00];
  CA::Mat4Impl::mat4_set_rotation((CA::Mat4Impl *)v10, v6, angle, x, y, z);
  CA::Mat4Impl::mat4_concat((float64x2_t *)t, v10, &t->m11, v8);
  return result;
}

BOOL CA::Render::NamedFunction::apply(CA::Render::NamedFunction *this, double *a2, double *a3, uint64_t a4, double *a5, uint64_t a6, double (*a7)(unsigned int, const unsigned int *, unint64_t, void *), void *a8)
{
  BOOL v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  if (a2)
  {
    v13 = 0;
    v14 = 0;
    v15 = a5 + 14;
    v16 = xmmword_18474DF40;
    v17 = 0uLL;
    v18 = xmmword_18474DF50;
    while (2)
    {
      switch(*((_DWORD *)this + 4))
      {
        case 0:
          v19 = *a3;
          v20 = 1.0;
          v21 = 0.0;
          goto LABEL_6;
        case 1:
          v19 = *a3;
          v20 = 0.0;
          v21 = 1.0;
LABEL_6:
          v22 = 0.0;
          goto LABEL_8;
        case 2:
          v19 = *a3;
          v20 = 0.0;
          v21 = 0.0;
          v22 = 1.0;
LABEL_8:
          CA::Mat4Impl::mat4_set_rotation((CA::Mat4Impl *)(v15 - 14), a2, v19, v20, v21, v22);
          v18 = xmmword_18474DF50;
          v16 = xmmword_18474DF40;
          v17 = 0uLL;
          goto LABEL_23;
        case 3:
          v23 = *(_QWORD *)a3;
          v24 = *((_QWORD *)a3 + 1);
          v25 = *((_QWORD *)a3 + 2);
          *((_OWORD *)v15 - 7) = v16;
          *((_OWORD *)v15 - 6) = v17;
          *((_OWORD *)v15 - 5) = v18;
          *((_OWORD *)v15 - 4) = v17;
          *((_OWORD *)v15 - 3) = v17;
          *((_OWORD *)v15 - 2) = v16;
          *((_OWORD *)v15 - 1) = v17;
          *(_OWORD *)v15 = v18;
          *((_QWORD *)v15 - 14) = v23;
          *((_QWORD *)v15 - 9) = v24;
          *((_QWORD *)v15 - 4) = v25;
          goto LABEL_23;
        case 4:
          v26 = *(_QWORD *)a3;
          *((_OWORD *)v15 - 7) = v16;
          *((_OWORD *)v15 - 6) = v17;
          *((_OWORD *)v15 - 5) = v18;
          *((_OWORD *)v15 - 4) = v17;
          *((_OWORD *)v15 - 3) = v17;
          *((_OWORD *)v15 - 2) = v16;
          *((_OWORD *)v15 - 1) = v17;
          *(_OWORD *)v15 = v18;
          *((_QWORD *)v15 - 14) = v26;
          *(v15 - 9) = 1.0;
          goto LABEL_15;
        case 5:
          v27 = *(_QWORD *)a3;
          *((_OWORD *)v15 - 7) = v16;
          *((_OWORD *)v15 - 6) = v17;
          *((_OWORD *)v15 - 5) = v18;
          *((_OWORD *)v15 - 4) = v17;
          *((_OWORD *)v15 - 3) = v17;
          *((_OWORD *)v15 - 2) = v16;
          *((_OWORD *)v15 - 1) = v17;
          *(_OWORD *)v15 = v18;
          *(v15 - 14) = 1.0;
          goto LABEL_14;
        case 6:
          v28 = *(_QWORD *)a3;
          *((_OWORD *)v15 - 7) = v16;
          *((_OWORD *)v15 - 6) = v17;
          *((_OWORD *)v15 - 5) = v18;
          *((_OWORD *)v15 - 4) = v17;
          *((_OWORD *)v15 - 3) = v17;
          *((_OWORD *)v15 - 2) = v16;
          *((_OWORD *)v15 - 1) = v17;
          *(_OWORD *)v15 = v18;
          *(v15 - 14) = 1.0;
          *(v15 - 9) = 1.0;
          goto LABEL_17;
        case 7:
          v27 = *(_QWORD *)a3;
          *((_OWORD *)v15 - 7) = v16;
          *((_OWORD *)v15 - 6) = v17;
          *((_OWORD *)v15 - 5) = v18;
          *((_OWORD *)v15 - 4) = v17;
          *((_OWORD *)v15 - 3) = v17;
          *((_OWORD *)v15 - 2) = v16;
          *((_OWORD *)v15 - 1) = v17;
          *(_OWORD *)v15 = v18;
          *((_QWORD *)v15 - 14) = v27;
LABEL_14:
          *((_QWORD *)v15 - 9) = v27;
LABEL_15:
          *(v15 - 4) = 1.0;
          goto LABEL_23;
        case 8:
          v28 = *(_QWORD *)a3;
          *((_OWORD *)v15 - 7) = v16;
          *((_OWORD *)v15 - 6) = v17;
          *((_OWORD *)v15 - 5) = v18;
          *((_OWORD *)v15 - 4) = v17;
          *((_OWORD *)v15 - 3) = v17;
          *((_OWORD *)v15 - 2) = v16;
          *((_OWORD *)v15 - 1) = v17;
          *(_OWORD *)v15 = v18;
          *((_QWORD *)v15 - 14) = v28;
          *((_QWORD *)v15 - 9) = v28;
LABEL_17:
          *((_QWORD *)v15 - 4) = v28;
          goto LABEL_23;
        case 9:
          v29 = *((_QWORD *)a3 + 2);
          v30 = *(_OWORD *)a3;
          *((_OWORD *)v15 - 7) = v16;
          *(v15 - 12) = 0.0;
          *(v15 - 11) = 0.0;
          *((_OWORD *)v15 - 5) = v18;
          *((_OWORD *)v15 - 4) = v17;
          *((_OWORD *)v15 - 3) = v17;
          *((_OWORD *)v15 - 2) = v16;
          *((_OWORD *)v15 - 1) = v30;
          *(_OWORD *)v15 = v18;
          goto LABEL_22;
        case 0xA:
          v31 = *(_QWORD *)a3;
          *((_OWORD *)v15 - 7) = v16;
          *(v15 - 12) = 0.0;
          *(v15 - 11) = 0.0;
          *((_OWORD *)v15 - 5) = v18;
          *((_OWORD *)v15 - 4) = v17;
          *((_OWORD *)v15 - 3) = v17;
          *((_OWORD *)v15 - 2) = v16;
          *(_OWORD *)v15 = v18;
          *((_QWORD *)v15 - 2) = v31;
          *(v15 - 1) = 0.0;
          *v15 = 0.0;
          goto LABEL_23;
        case 0xB:
          v32 = *(_QWORD *)a3;
          *((_OWORD *)v15 - 7) = v16;
          *(v15 - 12) = 0.0;
          *(v15 - 11) = 0.0;
          *((_OWORD *)v15 - 5) = v18;
          *((_OWORD *)v15 - 4) = v17;
          *((_OWORD *)v15 - 3) = v17;
          *((_OWORD *)v15 - 2) = v16;
          *(_OWORD *)v15 = v18;
          *(v15 - 2) = 0.0;
          *((_QWORD *)v15 - 1) = v32;
          *v15 = 0.0;
          goto LABEL_23;
        case 0xC:
          v29 = *(_QWORD *)a3;
          *((_OWORD *)v15 - 7) = v16;
          *(v15 - 12) = 0.0;
          *(v15 - 11) = 0.0;
          *((_OWORD *)v15 - 5) = v18;
          *((_OWORD *)v15 - 4) = v17;
          *((_OWORD *)v15 - 3) = v17;
          *((_OWORD *)v15 - 2) = v16;
          *(_OWORD *)v15 = v18;
          *(v15 - 2) = 0.0;
          *(v15 - 1) = 0.0;
LABEL_22:
          *(_QWORD *)v15 = v29;
LABEL_23:
          a3 = (double *)((char *)a3 + a4);
          v14 = (double *)((char *)v14 + 1);
          v13 = v14 >= a2;
          v15 = (double *)((char *)v15 + a6);
          if (a2 == v14)
            return v13;
          continue;
        default:
          return v13;
      }
    }
  }
  return 1;
}

CATransform3D *__cdecl CATransform3DRotate(CATransform3D *__return_ptr retstr, CATransform3D *t, CGFloat angle, CGFloat x, CGFloat y, CGFloat z)
{
  double *v6;
  const double *v9;
  CATransform3D *result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  double v15[17];

  v15[16] = *(double *)MEMORY[0x1E0C80C00];
  CA::Mat4Impl::mat4_set_rotation((CA::Mat4Impl *)v15, v6, angle, x, y, z);
  CA::Mat4Impl::mat4_concat((float64x2_t *)t, v15, &t->m11, v9);
  v11 = *(_OWORD *)&t->m33;
  *(_OWORD *)&retstr->m31 = *(_OWORD *)&t->m31;
  *(_OWORD *)&retstr->m33 = v11;
  v12 = *(_OWORD *)&t->m43;
  *(_OWORD *)&retstr->m41 = *(_OWORD *)&t->m41;
  *(_OWORD *)&retstr->m43 = v12;
  v13 = *(_OWORD *)&t->m13;
  *(_OWORD *)&retstr->m11 = *(_OWORD *)&t->m11;
  *(_OWORD *)&retstr->m13 = v13;
  v14 = *(_OWORD *)&t->m23;
  *(_OWORD *)&retstr->m21 = *(_OWORD *)&t->m21;
  *(_OWORD *)&retstr->m23 = v14;
  return result;
}

void CA::Mat4Impl::mat4_set_rotation(CA::Mat4Impl *this, double *a2, double a3, double a4, double a5, double a6)
{
  int8x16_t v10;
  int8x16_t v11;
  __double2 v12;
  float64x2_t v13;
  float64x2_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;

  *(_OWORD *)this = xmmword_18474DF40;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = xmmword_18474DF50;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = xmmword_18474DF40;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = xmmword_18474DF50;
  v12 = __sincos_stret(a3);
  *(double *)v11.i64 = v12.__cosval;
  *(double *)v10.i64 = v12.__sinval;
  if (fabs(v12.__sinval) >= 0.0000001)
  {
    if (fabs(v12.__cosval) < 0.0000001)
    {
      v11.i64[0] = 1.0;
      v14.f64[0] = NAN;
      v14.f64[1] = NAN;
      v10.i64[0] = vbslq_s8((int8x16_t)vnegq_f64(v14), v11, v10).u64[0];
      v11.i64[0] = 0;
    }
  }
  else
  {
    v10.i64[0] = 1.0;
    v13.f64[0] = NAN;
    v13.f64[1] = NAN;
    v11.i64[0] = vbslq_s8((int8x16_t)vnegq_f64(v13), v10, v11).u64[0];
    v10.i64[0] = 0;
  }
  if (a4 == 0.0 && a5 == 0.0 && a6 == 1.0)
  {
    *(_QWORD *)this = v11.i64[0];
    *((_QWORD *)this + 1) = v10.i64[0];
    *((double *)this + 4) = -*(double *)v10.i64;
    *((_QWORD *)this + 5) = v11.i64[0];
  }
  else if (a4 == 0.0 && a5 == 1.0 && a6 == 0.0)
  {
    *(_QWORD *)this = v11.i64[0];
    *((double *)this + 2) = -*(double *)v10.i64;
    *((_QWORD *)this + 8) = v10.i64[0];
    *((_QWORD *)this + 10) = v11.i64[0];
  }
  else if (a4 == 1.0 && a5 == 0.0 && a6 == 0.0)
  {
    *((_QWORD *)this + 5) = v11.i64[0];
    *((_QWORD *)this + 6) = v10.i64[0];
    *((double *)this + 9) = -*(double *)v10.i64;
    *((_QWORD *)this + 10) = v11.i64[0];
  }
  else
  {
    v15 = a4 * a4;
    v16 = a5 * a5;
    v17 = a6 * a6;
    v18 = sqrt(a5 * a5 + a4 * a4 + a6 * a6);
    if (fabs(v18) >= 0.000001)
    {
      if (v18 != 1.0)
      {
        a4 = 1.0 / v18 * a4;
        a5 = 1.0 / v18 * a5;
        a6 = 1.0 / v18 * a6;
        v15 = a4 * a4;
        v16 = a5 * a5;
        v17 = a6 * a6;
      }
      v19 = a5 * (1.0 - *(double *)v11.i64);
      v20 = v19 * a4;
      v21 = v19 * a6;
      v22 = a6 * a4 * (1.0 - *(double *)v11.i64);
      v23 = a4 * *(double *)v10.i64;
      v24 = a5 * *(double *)v10.i64;
      v25 = a6 * *(double *)v10.i64;
      *(double *)this = v15 + (1.0 - v15) * *(double *)v11.i64;
      *((double *)this + 1) = v20 + v25;
      *((double *)this + 2) = v22 - v24;
      *((double *)this + 4) = v20 - v25;
      *((double *)this + 5) = v16 + (1.0 - v16) * *(double *)v11.i64;
      *((double *)this + 6) = v21 + v23;
      *((double *)this + 8) = v22 + v24;
      *((double *)this + 9) = v21 - v23;
      *((double *)this + 10) = v17 + (1.0 - v17) * *(double *)v11.i64;
    }
  }
}

void CAML::State::finish(CAML::State *this)
{
  _QWORD *v2;
  _QWORD *v3;
  size_t v4;
  size_t v5;
  _QWORD *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  malloc_zone_t *malloc_zone;
  int v15;
  const __CFString *v17;
  const void *v18;
  void (*v19)(_QWORD, CAML::State *);
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)*((_QWORD *)this + 26);
  if (!v2)
  {
    v9 = (char *)this + 72;
    *((_BYTE *)this + *((_QWORD *)this + 25) + 72) = 0;
    v5 = *((_QWORD *)this + 25);
    goto LABEL_16;
  }
  v3 = 0;
  v4 = *((_QWORD *)this + 25);
  v5 = v4;
  do
  {
    v6 = v3;
    v3 = v2;
    v2 = (_QWORD *)*v2;
    v7 = v3[1];
    *v3 = v6;
    v5 += v7;
  }
  while (v2);
  *((_QWORD *)this + 26) = v3;
  if (v5)
  {
    if (v5 + 1 <= 0x1000)
    {
      MEMORY[0x1E0C80A78](this);
      v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v9, v8);
LABEL_10:
      memcpy(v9, (char *)this + 72, v4);
      v11 = (_QWORD *)*((_QWORD *)this + 26);
      v12 = &v9[*((_QWORD *)this + 25)];
      if (v11)
      {
        do
        {
          v13 = (_QWORD *)*v11;
          memcpy(v12, v11 + 2, v11[1]);
          v12 += v11[1];
          malloc_zone = (malloc_zone_t *)get_malloc_zone();
          malloc_zone_free(malloc_zone, v11);
          v11 = v13;
        }
        while (v13);
      }
      *v12 = 0;
      goto LABEL_15;
    }
    v10 = (char *)malloc_type_malloc(v5 + 1, 0x5A1C9370uLL);
    if (v10)
    {
      v9 = v10;
      v4 = *((_QWORD *)this + 25);
      goto LABEL_10;
    }
    v5 = 0;
  }
  v9 = "";
LABEL_15:
  *((_QWORD *)this + 26) = 0;
LABEL_16:
  v15 = *((_DWORD *)this + 4);
  if ((v15 - 2) < 3)
  {
LABEL_19:
    (*(void (**)(_QWORD, _QWORD, CAML::State *, char *, size_t))(**((_QWORD **)this + 6) + 24))(*((_QWORD *)this + 6), *((_QWORD *)this + 1), this, v9, v5);
    goto LABEL_20;
  }
  if (v15 != 7)
  {
    if (v15 != 6)
      goto LABEL_20;
    goto LABEL_19;
  }
  (*(void (**)(_QWORD, char *, size_t))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1), v9, v5);
LABEL_20:
  if (v5 - 4096 <= 0xFFFFFFFFFFFFEFFELL && v9 != (char *)this + 72)
    free(v9);
  v17 = (const __CFString *)*((_QWORD *)this + 4);
  if (v17)
  {
    v18 = (const void *)*((_QWORD *)this + 8);
    if (v18)
      CAML::Context::set_object(*((CAML::Context **)this + 1), v17, *((const CAML::Type **)this + 6), v18);
  }
  v19 = (void (*)(_QWORD, CAML::State *))*((_QWORD *)this + 7);
  if (v19)
    v19(*((_QWORD *)this + 1), this);
}

void sub_1844D1BB4(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

NSArray *CAObject_valueForKeyPath(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  NSArray *result;
  NSArray *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  void *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  const __CFString *v23;
  double v24;
  double v25;
  void *v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  void *v37;
  double v38;
  double v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v4 = objc_msgSend(a2, "rangeOfString:", CFSTR("."));
  if (!v5)
    return (NSArray *)objc_msgSend(a1, "valueForKey:", a2);
  v6 = v4;
  v7 = objc_msgSend(a2, "substringToIndex:", v4);
  v8 = (void *)objc_msgSend(a2, "substringFromIndex:", v6 + 1);
  result = (NSArray *)objc_msgSend(a1, "valueForKey:", v7);
  if (!result)
    return result;
  v10 = result;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        return (NSArray *)-[NSArray valueForKeyPath:](v10, "valueForKeyPath:", v8);
      v49 = 0u;
      v50 = 0u;
      v48 = 0u;
      *(_QWORD *)&v60 = 0;
      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      -[NSArray transformStruct](v10, "transformStruct");
      CA::Mat2Impl::mat2_get_unmatrix((uint64_t)&v48, (uint64_t)&v56);
      if (objc_msgSend(v8, "isEqualToString:", CFSTR("rotation")))
      {
        v15 = (void *)MEMORY[0x1E0CB37E8];
        v16 = *(double *)&v58;
        return (NSArray *)objc_msgSend(v15, "numberWithDouble:", v16);
      }
      if (!objc_msgSend(v8, "isEqualToString:", CFSTR("scale")))
      {
        if (!objc_msgSend(v8, "isEqualToString:", CFSTR("scale.x")))
        {
          if (!objc_msgSend(v8, "isEqualToString:", CFSTR("scale.y")))
          {
            if (objc_msgSend(v8, "isEqualToString:", CFSTR("translation")))
            {
              v37 = (void *)MEMORY[0x1E0CB3B18];
              v39 = *((double *)&v57 + 1);
              v38 = *(double *)&v57;
              return (NSArray *)objc_msgSend(v37, "valueWithSize:", v38, v39);
            }
            if (!objc_msgSend(v8, "isEqualToString:", CFSTR("translation.x")))
            {
              if (objc_msgSend(v8, "isEqualToString:", CFSTR("translation.y")))
              {
                v15 = (void *)MEMORY[0x1E0CB37E8];
                v16 = *((double *)&v57 + 1);
                return (NSArray *)objc_msgSend(v15, "numberWithDouble:", v16);
              }
              return (NSArray *)-[NSArray valueForKeyPath:](v10, "valueForKeyPath:", v8);
            }
LABEL_50:
            v15 = (void *)MEMORY[0x1E0CB37E8];
            v16 = *(double *)&v57;
            return (NSArray *)objc_msgSend(v15, "numberWithDouble:", v16);
          }
LABEL_36:
          v15 = (void *)MEMORY[0x1E0CB37E8];
          v16 = *((double *)&v56 + 1);
          return (NSArray *)objc_msgSend(v15, "numberWithDouble:", v16);
        }
LABEL_29:
        v15 = (void *)MEMORY[0x1E0CB37E8];
        v16 = *(double *)&v56;
        return (NSArray *)objc_msgSend(v15, "numberWithDouble:", v16);
      }
LABEL_22:
      v15 = (void *)MEMORY[0x1E0CB37E8];
      v17 = *((double *)&v56 + 1) + *(double *)&v56;
      v18 = 0.5;
LABEL_23:
      v16 = v17 * v18;
      return (NSArray *)objc_msgSend(v15, "numberWithDouble:", v16);
    }
    v13 = (const char *)-[NSArray objCType](v10, "objCType");
    if (!v13)
      return (NSArray *)-[NSArray valueForKeyPath:](v10, "valueForKeyPath:", v8);
    v14 = v13;
    if (!strcmp(v13, "{CGPoint=dd}"))
    {
      -[NSArray pointValue](v10, "pointValue");
      v20 = v19;
      v22 = v21;
      if (objc_msgSend(v8, "isEqualToString:", CFSTR("x")))
        goto LABEL_27;
      v23 = CFSTR("y");
    }
    else
    {
      if (strcmp(v14, "{CGSize=dd}"))
      {
        if (!strcmp(v14, "{CGRect={CGPoint=dd}{CGSize=dd}}"))
        {
          -[NSArray rectValue](v10, "rectValue");
          v29 = v28;
          v31 = v30;
          v20 = v32;
          v22 = v33;
          if (objc_msgSend(v8, "isEqualToString:", CFSTR("origin")))
            return (NSArray *)objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithPoint:", v29, v31);
          if (objc_msgSend(v8, "isEqualToString:", CFSTR("size")))
            return (NSArray *)objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithSize:", v20, v22);
          if (objc_msgSend(v8, "isEqualToString:", CFSTR("origin.x")))
          {
            v26 = (void *)MEMORY[0x1E0CB37E8];
            v27 = v29;
            return (NSArray *)objc_msgSend(v26, "numberWithDouble:", v27);
          }
          if (objc_msgSend(v8, "isEqualToString:", CFSTR("origin.y")))
            goto LABEL_38;
          if (!objc_msgSend(v8, "isEqualToString:", CFSTR("size.width")))
          {
            v23 = CFSTR("size.height");
            goto LABEL_33;
          }
        }
        else
        {
          if (strcmp(v14, "{CAPoint3D=ddd}"))
          {
            if (strcmp(v14, "{CATransform3D=dddddddddddddddd}"))
              return (NSArray *)-[NSArray valueForKeyPath:](v10, "valueForKeyPath:", v8);
            v63 = 0u;
            v64 = 0u;
            v61 = 0u;
            v62 = 0u;
            v59 = 0u;
            v60 = 0u;
            v57 = 0u;
            v58 = 0u;
            v56 = 0u;
            -[NSArray CATransform3DValue](v10, "CATransform3DValue");
            v48 = v40;
            v49 = v41;
            v50 = v42;
            v51 = v43;
            v52 = v44;
            v53 = v45;
            v54 = v46;
            v55 = v47;
            CA::Mat4Impl::mat4_get_unmatrix((double *)&v48, (uint64_t)&v56, 0);
            if ((objc_msgSend(v8, "isEqualToString:", CFSTR("rotation")) & 1) != 0
              || objc_msgSend(v8, "isEqualToString:", CFSTR("rotation.z")))
            {
              v15 = (void *)MEMORY[0x1E0CB37E8];
              v16 = *((double *)&v63 + 1);
              return (NSArray *)objc_msgSend(v15, "numberWithDouble:", v16);
            }
            if (objc_msgSend(v8, "isEqualToString:", CFSTR("rotation.x")))
            {
              v15 = (void *)MEMORY[0x1E0CB37E8];
              v16 = *((double *)&v62 + 1);
              return (NSArray *)objc_msgSend(v15, "numberWithDouble:", v16);
            }
            if (objc_msgSend(v8, "isEqualToString:", CFSTR("rotation.y")))
            {
              v15 = (void *)MEMORY[0x1E0CB37E8];
              v16 = *(double *)&v63;
              return (NSArray *)objc_msgSend(v15, "numberWithDouble:", v16);
            }
            if (objc_msgSend(v8, "isEqualToString:", CFSTR("scale")))
            {
              v15 = (void *)MEMORY[0x1E0CB37E8];
              v17 = *((double *)&v56 + 1) + *(double *)&v56 + *(double *)&v57;
              v18 = 0.333333333;
              goto LABEL_23;
            }
            if (!objc_msgSend(v8, "isEqualToString:", CFSTR("scale.xy")))
            {
              if (!objc_msgSend(v8, "isEqualToString:", CFSTR("scale.x")))
              {
                if (!objc_msgSend(v8, "isEqualToString:", CFSTR("scale.y")))
                {
                  if (!objc_msgSend(v8, "isEqualToString:", CFSTR("scale.z")))
                  {
                    if (objc_msgSend(v8, "isEqualToString:", CFSTR("translation")))
                    {
                      v37 = (void *)MEMORY[0x1E0CB3B18];
                      v39 = *((double *)&v59 + 1);
                      v38 = *(double *)&v59;
                      return (NSArray *)objc_msgSend(v37, "valueWithSize:", v38, v39);
                    }
                    if (objc_msgSend(v8, "isEqualToString:", CFSTR("translation.x")))
                    {
                      v15 = (void *)MEMORY[0x1E0CB37E8];
                      v16 = *(double *)&v59;
                      return (NSArray *)objc_msgSend(v15, "numberWithDouble:", v16);
                    }
                    if (objc_msgSend(v8, "isEqualToString:", CFSTR("translation.y")))
                    {
                      v15 = (void *)MEMORY[0x1E0CB37E8];
                      v16 = *((double *)&v59 + 1);
                      return (NSArray *)objc_msgSend(v15, "numberWithDouble:", v16);
                    }
                    if (objc_msgSend(v8, "isEqualToString:", CFSTR("translation.z")))
                    {
                      v15 = (void *)MEMORY[0x1E0CB37E8];
                      v16 = *(double *)&v60;
                      return (NSArray *)objc_msgSend(v15, "numberWithDouble:", v16);
                    }
                    return (NSArray *)-[NSArray valueForKeyPath:](v10, "valueForKeyPath:", v8);
                  }
                  goto LABEL_50;
                }
                goto LABEL_36;
              }
              goto LABEL_29;
            }
            goto LABEL_22;
          }
          -[NSArray CAPoint3DValue](v10, "CAPoint3DValue");
          v31 = v34;
          v20 = v35;
          v22 = v36;
          if (objc_msgSend(v8, "isEqualToString:", CFSTR("x")))
          {
LABEL_38:
            v26 = (void *)MEMORY[0x1E0CB37E8];
            v27 = v31;
            return (NSArray *)objc_msgSend(v26, "numberWithDouble:", v27);
          }
          if (!objc_msgSend(v8, "isEqualToString:", CFSTR("y")))
          {
            v23 = CFSTR("z");
            goto LABEL_33;
          }
        }
LABEL_27:
        v26 = (void *)MEMORY[0x1E0CB37E8];
        v27 = v20;
        return (NSArray *)objc_msgSend(v26, "numberWithDouble:", v27);
      }
      -[NSArray sizeValue](v10, "sizeValue");
      v20 = v24;
      v22 = v25;
      if (objc_msgSend(v8, "isEqualToString:", CFSTR("width")))
        goto LABEL_27;
      v23 = CFSTR("height");
    }
LABEL_33:
    if (!objc_msgSend(v8, "isEqualToString:", v23))
      return (NSArray *)-[NSArray valueForKeyPath:](v10, "valueForKeyPath:", v8);
    v26 = (void *)MEMORY[0x1E0CB37E8];
    v27 = v22;
    return (NSArray *)objc_msgSend(v26, "numberWithDouble:", v27);
  }
  v11 = objc_msgSend(v8, "rangeOfString:", CFSTR("."));
  if (v12)
    return (NSArray *)objc_msgSend(objectForKey(v10, (NSString *)objc_msgSend(v8, "substringToIndex:", v11), 0), "valueForKeyPath:", objc_msgSend(v8, "substringFromIndex:", v11 + 1));
  else
    return (NSArray *)objectForKey(v10, (NSString *)v8, 0);
}

void CAObject_setValueForKeyPath_(void *a1, void *a2, uint64_t a3, void *a4, int a5)
{
  uint64_t v10;
  NSArray *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSString *v15;
  NSArray *v16;
  NSArray *v17;
  void *v18;
  void *v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  const double *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  double *v27;
  uint64_t v28;
  CA::Transaction *v29;
  char *v30;
  NSArray *v31;
  unint64_t v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  unint64_t v43;
  double v44;
  uint64_t v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  unint64_t v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  double v70;
  uint64_t v71;
  double v72;
  double v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  double v77;
  uint64_t v78;
  double v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _OWORD v89[3];
  float64x2_t v90;
  float64x2_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  float64x2_t v98;
  float64x2_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  unint64_t v106[2];
  __int128 v107;
  _OWORD v108[4];
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  v10 = objc_msgSend(a1, "valueForKey:");
  if (!v10)
    return;
  v11 = (NSArray *)v10;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          if ((a5 & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
          {
            v11 = (NSArray *)-[NSArray mutableCopy](v11, "mutableCopy");
            objc_msgSend(a1, "setValue:forKey:", v11, a3);

            if (!v11)
              return;
          }
        }
        goto LABEL_111;
      }
      memset(v108, 0, 40);
      *(_OWORD *)v106 = 0u;
      v107 = 0u;
      -[NSArray transformStruct](v11, "transformStruct");
      v98 = v90;
      v99 = v91;
      v100 = v92;
      CA::Mat2Impl::mat2_get_unmatrix((uint64_t)&v98, (uint64_t)v106);
      if (objc_msgSend(a4, "isEqualToString:", CFSTR("rotation")))
      {
        objc_msgSend(a2, "doubleValue");
        *(_QWORD *)&v108[0] = v28;
      }
      else if (objc_msgSend(a4, "isEqualToString:", CFSTR("scale")))
      {
        objc_msgSend(a2, "doubleValue");
        v106[0] = v32;
        v106[1] = v32;
      }
      else if (objc_msgSend(a4, "isEqualToString:", CFSTR("scale.x")))
      {
        objc_msgSend(a2, "doubleValue");
        v106[0] = v43;
      }
      else if (objc_msgSend(a4, "isEqualToString:", CFSTR("scale.y")))
      {
        objc_msgSend(a2, "doubleValue");
        v106[1] = v57;
      }
      else if (objc_msgSend(a4, "isEqualToString:", CFSTR("translation")))
      {
        objc_msgSend(a2, "sizeValue");
        *(_QWORD *)&v107 = v67;
        *((_QWORD *)&v107 + 1) = v68;
      }
      else if (objc_msgSend(a4, "isEqualToString:", CFSTR("translation.x")))
      {
        objc_msgSend(a2, "doubleValue");
        *(_QWORD *)&v107 = v71;
      }
      else
      {
        if ((objc_msgSend(a4, "isEqualToString:", CFSTR("translation.y")) & 1) == 0)
          goto LABEL_111;
        objc_msgSend(a2, "doubleValue");
        *((_QWORD *)&v107 + 1) = v75;
      }
      v98 = *(float64x2_t *)((char *)v108 + 8);
      v99 = *(float64x2_t *)((char *)&v108[1] + 8);
      v100 = v107;
      if (*(double *)v108 != 0.0)
        CA::Mat2Impl::mat2_rotate(&v98, v27, *(double *)v108);
      if (*(double *)v106 != 1.0 || *(double *)&v106[1] != 1.0)
      {
        v98 = vmulq_n_f64(v98, *(double *)v106);
        v99 = vmulq_n_f64(v99, *(double *)&v106[1]);
      }
      v76 = (void *)objc_msgSend(MEMORY[0x1E0CB3478], "transform");
      v89[0] = v98;
      v89[1] = v99;
      v89[2] = v100;
      objc_msgSend(v76, "setTransformStruct:", v89);
      v26 = a1;
      v25 = (uint64_t)v76;
      goto LABEL_83;
    }
    v20 = (const char *)-[NSArray objCType](v11, "objCType");
    if (v20)
    {
      v21 = v20;
      if (!strcmp(v20, "{CGPoint=dd}"))
      {
        -[NSArray pointValue](v11, "pointValue");
        v34 = v33;
        v36 = v35;
        if (objc_msgSend(a4, "isEqualToString:", CFSTR("x")))
        {
          objc_msgSend(a2, "doubleValue");
          v34 = v37;
        }
        else
        {
          if (!objc_msgSend(a4, "isEqualToString:", CFSTR("y")))
            goto LABEL_111;
          objc_msgSend(a2, "doubleValue");
          v36 = v44;
        }
        v45 = objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithPoint:", v34, v36);
      }
      else if (!strcmp(v21, "{CGSize=dd}"))
      {
        -[NSArray sizeValue](v11, "sizeValue");
        v39 = v38;
        v41 = v40;
        if (objc_msgSend(a4, "isEqualToString:", CFSTR("width")))
        {
          objc_msgSend(a2, "doubleValue");
          v39 = v42;
        }
        else
        {
          if (!objc_msgSend(a4, "isEqualToString:", CFSTR("height")))
            goto LABEL_111;
          objc_msgSend(a2, "doubleValue");
          v41 = v56;
        }
        v45 = objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithSize:", v39, v41);
      }
      else if (!strcmp(v21, "{CGRect={CGPoint=dd}{CGSize=dd}}"))
      {
        -[NSArray rectValue](v11, "rectValue");
        v47 = v46;
        v49 = v48;
        v51 = v50;
        v53 = v52;
        if (objc_msgSend(a4, "isEqualToString:", CFSTR("origin")))
        {
          objc_msgSend(a2, "pointValue");
          v47 = v54;
          v49 = v55;
        }
        else if (objc_msgSend(a4, "isEqualToString:", CFSTR("size")))
        {
          objc_msgSend(a2, "sizeValue");
          v51 = v65;
          v53 = v66;
        }
        else if (objc_msgSend(a4, "isEqualToString:", CFSTR("origin.x")))
        {
          objc_msgSend(a2, "doubleValue");
          v47 = v70;
        }
        else if (objc_msgSend(a4, "isEqualToString:", CFSTR("origin.y")))
        {
          objc_msgSend(a2, "doubleValue");
          v49 = v73;
        }
        else if (objc_msgSend(a4, "isEqualToString:", CFSTR("size.width")))
        {
          objc_msgSend(a2, "doubleValue");
          v51 = v77;
        }
        else
        {
          if (!objc_msgSend(a4, "isEqualToString:", CFSTR("size.height")))
            goto LABEL_111;
          objc_msgSend(a2, "doubleValue");
          v53 = v79;
        }
        v45 = objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithRect:", v47, v49, v51, v53);
      }
      else
      {
        if (strcmp(v21, "{CAPoint3D=ddd}"))
        {
          if (!strcmp(v21, "{CATransform3D=dddddddddddddddd}"))
          {
            v110 = 0u;
            v111 = 0u;
            v109 = 0u;
            v107 = 0u;
            memset(v108, 0, sizeof(v108));
            *(_OWORD *)v106 = 0u;
            -[NSArray CATransform3DValue](v11, "CATransform3DValue");
            v98 = v90;
            v99 = v91;
            v100 = v92;
            v101 = v93;
            v102 = v94;
            v103 = v95;
            v104 = v96;
            v105 = v97;
            CA::Mat4Impl::mat4_get_unmatrix(v98.f64, (uint64_t)v106, 0);
            if ((objc_msgSend(a4, "isEqualToString:", CFSTR("rotation")) & 1) != 0
              || objc_msgSend(a4, "isEqualToString:", CFSTR("rotation.z")))
            {
              objc_msgSend(a2, "doubleValue");
              *((_QWORD *)&v110 + 1) = v24;
LABEL_18:
              v25 = objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", &v98, "{CATransform3D=dddddddddddddddd}", CA::Mat4Impl::mat4_set_unmatrix((CA::Mat4Impl *)&v98, (uint64_t)v106, v22, v23).f64[0]);
              v26 = a1;
LABEL_83:
              objc_msgSend(v26, "setValue:forKey:", v25, a3);
              return;
            }
            if (objc_msgSend(a4, "isEqualToString:", CFSTR("rotation.x")))
            {
              objc_msgSend(a2, "doubleValue");
              *((_QWORD *)&v109 + 1) = v74;
              goto LABEL_18;
            }
            if (objc_msgSend(a4, "isEqualToString:", CFSTR("rotation.y")))
            {
              objc_msgSend(a2, "doubleValue");
              *(_QWORD *)&v110 = v78;
              goto LABEL_18;
            }
            if (objc_msgSend(a4, "isEqualToString:", CFSTR("scale")))
            {
              objc_msgSend(a2, "doubleValue");
              *(_QWORD *)&v107 = v80;
LABEL_96:
              v106[0] = v80;
              v106[1] = v80;
              goto LABEL_18;
            }
            if (objc_msgSend(a4, "isEqualToString:", CFSTR("scale.xy")))
            {
              objc_msgSend(a2, "doubleValue");
              goto LABEL_96;
            }
            if (objc_msgSend(a4, "isEqualToString:", CFSTR("scale.x")))
            {
              objc_msgSend(a2, "doubleValue");
              v106[0] = v81;
              goto LABEL_18;
            }
            if (objc_msgSend(a4, "isEqualToString:", CFSTR("scale.y")))
            {
              objc_msgSend(a2, "doubleValue");
              v106[1] = v82;
              goto LABEL_18;
            }
            if (objc_msgSend(a4, "isEqualToString:", CFSTR("scale.z")))
            {
              objc_msgSend(a2, "doubleValue");
              *(_QWORD *)&v107 = v83;
              goto LABEL_18;
            }
            if (objc_msgSend(a4, "isEqualToString:", CFSTR("translation")))
            {
              objc_msgSend(a2, "sizeValue");
              *(_QWORD *)&v108[1] = v84;
              *((_QWORD *)&v108[1] + 1) = v85;
              goto LABEL_18;
            }
            if (objc_msgSend(a4, "isEqualToString:", CFSTR("translation.x")))
            {
              objc_msgSend(a2, "doubleValue");
              *(_QWORD *)&v108[1] = v86;
              goto LABEL_18;
            }
            if (objc_msgSend(a4, "isEqualToString:", CFSTR("translation.y")))
            {
              objc_msgSend(a2, "doubleValue");
              *((_QWORD *)&v108[1] + 1) = v87;
              goto LABEL_18;
            }
            if (objc_msgSend(a4, "isEqualToString:", CFSTR("translation.z")))
            {
              objc_msgSend(a2, "doubleValue");
              *(_QWORD *)&v108[2] = v88;
              goto LABEL_18;
            }
          }
          goto LABEL_111;
        }
        -[NSArray CAPoint3DValue](v11, "CAPoint3DValue");
        v59 = v58;
        v61 = v60;
        v63 = v62;
        if (objc_msgSend(a4, "isEqualToString:", CFSTR("x")))
        {
          objc_msgSend(a2, "doubleValue");
          v59 = v64;
        }
        else if (objc_msgSend(a4, "isEqualToString:", CFSTR("y")))
        {
          objc_msgSend(a2, "doubleValue");
          v61 = v69;
        }
        else
        {
          if (!objc_msgSend(a4, "isEqualToString:", CFSTR("z")))
            goto LABEL_111;
          objc_msgSend(a2, "doubleValue");
          v63 = v72;
        }
        v45 = objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithCAPoint3D:", v59, v61, v63);
      }
      objc_msgSend(a1, "setValue:forKey:", v45, a3);
      return;
    }
LABEL_111:
    objc_msgSend(a1, "willChangeValueForKey:", a3);
    v31 = v11;
    goto LABEL_112;
  }
  v106[0] = 0;
  v12 = objc_msgSend(a4, "rangeOfString:", CFSTR("."));
  if (!v13)
  {
    if (!objectForKey(v11, (NSString *)a4, v106))
      return;
    v19 = (void *)-[NSArray mutableCopy](v11, "mutableCopy");
    objc_msgSend(v19, "replaceObjectAtIndex:withObject:", v106[0], a2);
    goto LABEL_24;
  }
  v14 = v12;
  v15 = (NSString *)objc_msgSend(a4, "substringToIndex:", v12);
  a4 = (void *)objc_msgSend(a4, "substringFromIndex:", v14 + 1);
  v16 = (NSArray *)objectForKey(v11, v15, v106);
  if (!v16)
    return;
  v17 = v16;
  if (!a5 || (objc_opt_respondsToSelector() & 1) == 0)
  {
    objc_msgSend(a1, "willChangeValueForKey:", a3);
    v31 = v17;
LABEL_112:
    -[NSArray setValue:forKeyPath:](v31, "setValue:forKeyPath:", a2, a4);
    objc_msgSend(a1, "didChangeValueForKey:", a3);
    return;
  }
  v18 = (void *)-[NSArray mutableCopy](v17, "mutableCopy");
  objc_msgSend(v18, "setValue:forKeyPath:", a2, a4);
  v19 = (void *)-[NSArray mutableCopy](v11, "mutableCopy");
  objc_msgSend(v19, "replaceObjectAtIndex:withObject:", v106[0], v18);

LABEL_24:
  v29 = *(CA::Transaction **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 576);
  if (v29)
  {
    v30 = (char *)v29 + 88;
    while (1)
    {
      v30 = *(char **)v30;
      if (!v30)
        break;
      if ((v30[28] & 1) != 0)
      {
        if ((v30[24] & 1) != 0)
          goto LABEL_36;
        break;
      }
    }
    CA::Transaction::set_BOOL_value(v29, 1, 0);
    objc_msgSend(a1, "setValue:forKey:", v19, a3);
    CA::Transaction::set_BOOL_value(v29, 0, 0);
  }
  else
  {
LABEL_36:
    objc_msgSend(a1, "setValue:forKey:", v19, a3);
  }

}

_DWORD *CA::Transaction::set_BOOL_value(CA::Transaction *this, int a2, unsigned int a3)
{
  char v3;
  _DWORD *result;
  malloc_zone_t *malloc_zone;
  int v8;
  int v9;

  if (a3 >= 0x20)
    __assert_rtn("set_BOOL_value", "CATransactionInternal.mm", 1295, "key < (CHAR_BIT * sizeof (Level::_BOOL_values))");
  v3 = a3;
  if (!**((_DWORD **)this + 13))
    CA::Transaction::ensure_implicit(this, 1);
  result = (_DWORD *)*((_QWORD *)this + 11);
  if (!result)
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    result = malloc_type_zone_calloc(malloc_zone, 1uLL, 0x20uLL, 0x743898A5uLL);
    *((_QWORD *)this + 11) = result;
  }
  v8 = 1 << v3;
  if (a2)
    v9 = result[6] | v8;
  else
    v9 = result[6] & ~v8;
  result[6] = v9;
  result[7] |= v8;
  return result;
}

id CA_valueForKey(void *a1, const char *a2, uint64_t a3)
{
  id v3;
  id v4;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  char v14[64];
  char v15[128];
  _OWORD v16[3];
  uint64_t v17;

  v3 = 0;
  v17 = *MEMORY[0x1E0C80C00];
  if (a1 && a2)
  {
    memset(v16, 0, sizeof(v16));
    switch((int)a3)
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        v4 = objc_msgSend(a1, a2);
        goto LABEL_5;
      case 6:
        v4 = (id)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(a1, a2));
        goto LABEL_5;
      case 7:
        v4 = (id)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithChar:", objc_msgSend(a1, a2));
        goto LABEL_5;
      case 8:
        v4 = (id)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedChar:", objc_msgSend(a1, a2));
        goto LABEL_5;
      case 9:
        v4 = (id)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", objc_msgSend(a1, a2));
        goto LABEL_5;
      case 10:
        v4 = (id)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedShort:", objc_msgSend(a1, a2));
        goto LABEL_5;
      case 11:
        v4 = (id)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend(a1, a2));
        goto LABEL_5;
      case 12:
        v4 = (id)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", objc_msgSend(a1, a2));
        goto LABEL_5;
      case 13:
        v4 = (id)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", objc_msgSend(a1, a2));
        goto LABEL_5;
      case 14:
        v4 = (id)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", objc_msgSend(a1, a2));
        goto LABEL_5;
      case 15:
        v4 = (id)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(a1, a2));
        goto LABEL_5;
      case 16:
        v4 = (id)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(a1, a2));
        goto LABEL_5;
      case 17:
        v6 = (void *)MEMORY[0x1E0CB37E8];
        objc_msgSend(a1, a2);
        v4 = (id)objc_msgSend(v6, "numberWithFloat:");
        goto LABEL_5;
      case 18:
        v7 = (void *)MEMORY[0x1E0CB37E8];
        objc_msgSend(a1, a2);
        v4 = (id)objc_msgSend(v7, "numberWithDouble:");
        goto LABEL_5;
      case 19:
        v8 = (void *)MEMORY[0x1E0CB3B18];
        objc_msgSend(a1, a2);
        v4 = (id)objc_msgSend(v8, "valueWithPoint:");
        goto LABEL_5;
      case 20:
        v9 = (void *)MEMORY[0x1E0CB3B18];
        objc_msgSend(a1, a2);
        v4 = (id)objc_msgSend(v9, "valueWithSize:");
        goto LABEL_5;
      case 21:
        v10 = (void *)MEMORY[0x1E0CB3B18];
        objc_msgSend(a1, a2);
        v4 = (id)objc_msgSend(v10, "valueWithRect:");
        goto LABEL_5;
      case 22:
        v11 = (void *)MEMORY[0x1E0CB3B18];
        objc_msgSend(a1, a2);
        v4 = (id)objc_msgSend(v11, "valueWithCATransform3D:", v15);
        goto LABEL_5;
      case 23:
        objc_msgSend(a1, a2);
        v4 = (id)objc_msgSend(MEMORY[0x1E0CB3B18], "value:withObjCType:", v16, "{CGAffineTransform=dddddd}");
        goto LABEL_5;
      case 24:
        v12 = (void *)MEMORY[0x1E0CB3B18];
        objc_msgSend(a1, a2);
        v4 = (id)objc_msgSend(v12, "valueWithCAPoint3D:");
        goto LABEL_5;
      case 25:
        v13 = (void *)MEMORY[0x1E0CB3B18];
        objc_msgSend(a1, a2);
        v4 = (id)objc_msgSend(v13, "valueWithCACornerRadii:", v14);
LABEL_5:
        v3 = v4;
        break;
      default:
        NSLog(CFSTR("unhandled getter type: %d"), a3);
        v3 = 0;
        break;
    }
  }
  return v3;
}

void sub_1844D3774(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t CA::Transaction::ensure_implicit(CA::Transaction *this, int a2)
{
  __CFRunLoop *Current;
  CFRunLoopMode v5;
  const __CFString *v6;
  __CFRunLoopObserver *v7;
  uint64_t result;
  pthread_t v9;

  if (BYTE7(ca_debug_options))
  {
    v9 = pthread_self();
    NSLog(CFSTR("Started implicit transaction for thread %p\n"), v9);
  }
  Current = (__CFRunLoop *)*((_QWORD *)this + 7);
  if (!Current)
  {
    Current = CFRunLoopGetCurrent();
    *((_QWORD *)this + 7) = Current;
  }
  if (!*((_QWORD *)this + 8))
  {
    v7 = CFRunLoopObserverCreate(0, 0xA0uLL, 1u, 2000000, (CFRunLoopObserverCallBack)CA::Transaction::observer_callback, 0);
    *((_QWORD *)this + 8) = v7;
    if (!v7)
      goto LABEL_17;
    CFRunLoopAddObserver(*((CFRunLoopRef *)this + 7), v7, (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
    if (!*((_QWORD *)this + 8))
      goto LABEL_17;
    Current = (__CFRunLoop *)*((_QWORD *)this + 7);
  }
  v5 = CFRunLoopCopyCurrentMode(Current);
  if (v5)
  {
    v6 = v5;
    if (v5 != (CFRunLoopMode)*MEMORY[0x1E0C9B280])
    {
      if (!CA::Transaction::ensure_implicit(BOOL)::tracking_mode && CFEqual(v5, CFSTR("UITrackingRunLoopMode")))
      {
        CA::Transaction::ensure_implicit(BOOL)::tracking_mode = (uint64_t)CFRetain(v6);
        CFRunLoopAddObserver(*((CFRunLoopRef *)this + 7), *((CFRunLoopObserverRef *)this + 8), v6);
      }
      if (v6 != (const __CFString *)CA::Transaction::ensure_implicit(BOOL)::tracking_mode)
        CFRunLoopAddObserver(*((CFRunLoopRef *)this + 7), *((CFRunLoopObserverRef *)this + 8), v6);
    }
    CFRelease(v6);
  }
LABEL_17:
  CA::Transaction::push(this, 1, a2);
  *(_BYTE *)(*((_QWORD *)this + 13) + 204) |= 1u;
  result = *(_QWORD *)(*((_QWORD *)this + 13) + 112);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t CA::Transaction::push(CA::Transaction *this, BOOL a2, int a3)
{
  uint64_t v5;
  unsigned int v6;
  malloc_zone_t *malloc_zone;
  malloc_zone_t *v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;
  void **v13;

  v5 = *((_QWORD *)this + 13);
  do
    v6 = __ldaxr((unsigned int *)v5);
  while (__stlxr(v6 + 1, (unsigned int *)v5));
  if (v6)
  {
    if (!*((_QWORD *)this + 11))
    {
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      *((_QWORD *)this + 11) = malloc_type_zone_calloc(malloc_zone, 1uLL, 0x20uLL, 0x743898A5uLL);
    }
    v8 = (malloc_zone_t *)get_malloc_zone();
    result = (uint64_t)malloc_type_zone_calloc(v8, 1uLL, 0x20uLL, 0x743898A5uLL);
    *(_QWORD *)result = *((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = result;
    return result;
  }
  *(_BYTE *)(v5 + 204) &= 0xFCu;
  *(_QWORD *)(v5 + 144) = 0;
  v10 = mach_absolute_time();
  *(double *)(v5 + 152) = CATimeWithHostTime(v10);
  *(_QWORD *)(v5 + 232) = 0;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 47) = (char *)this + 400;
  *((_OWORD *)this + 24) = xmmword_18474E460;
  *(_QWORD *)(v5 + 128) = (char *)this + 368;
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::slot_lock);
  if ((CA::Transaction::slot_mask & 1) != 0)
  {
    if ((CA::Transaction::slot_mask & 2) != 0)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::Transaction::slot_lock);
      result = (uint64_t)x_hash_table_new_(0, 0, 0, 0, 0, 0);
      *(_QWORD *)(v5 + 8) = result;
      v11 = *(_DWORD *)(v5 + 4);
      goto LABEL_13;
    }
    v12 = 2;
    v11 = 1;
  }
  else
  {
    v11 = 0;
    v12 = 1;
  }
  CA::Transaction::slot_mask |= v12;
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Transaction::slot_lock);
  *(_DWORD *)(v5 + 4) = v11;
  result = *(_QWORD *)(v5 + 8);
LABEL_13:
  *((_DWORD *)this + 24) = v11;
  *(_QWORD *)this = result;
  if (BYTE9(xmmword_1ECDC6A90))
    result = kdebug_trace();
  if (CA::Transaction::_debug_transactions)
  {
    v13 = (void **)malloc_type_malloc(0x1000uLL, 0x80040B8603338uLL);
    *(_QWORD *)(v5 + 240) = v13;
    result = backtrace(v13, 512);
    *(_WORD *)(v5 + 206) = result;
  }
  if (CA::Transaction::_assert_transactions)
  {
    if (a3)
    {
      result = pthread_main_np();
      if (!(_DWORD)result && (*((_BYTE *)this + 116) & 8) == 0)
        CA::CA_ABORT_ON_NON_MAIN_THREAD_TRANSACTION_PUSH((CA *)result);
    }
  }
  return result;
}

uint64_t CAML::`anonymous namespace'::set_property(CAML::_anonymous_namespace_ *this, CAML::Context *a2, CAML::State *a3)
{
  uint64_t result;
  const char *v7;

  if (*((_QWORD *)a2 + 8))
    return (*(uint64_t (**)(_QWORD, CAML::_anonymous_namespace_ *, _QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)this + 6) + 48)
                                                                                            + 48))(*(_QWORD *)(*((_QWORD *)this + 6) + 48), this, *(_QWORD *)(*((_QWORD *)this + 6) + 64), *((unsigned int *)a2 + 10));
  result = *((unsigned int *)a2 + 10);
  {
    v7 = (const char *)-[__CFString cStringUsingEncoding:]((id)CAAtomGetString(result), "cStringUsingEncoding:", 4);
  }
  return result;
}

uint64_t CAML::ObjCNSObject::set_property(uint64_t this, CAML::Context *a2, void *a3, unsigned int a4, const void *a5)
{
  uint64_t v7;
  const __CFString *String;

  if ((*(_BYTE *)(this + 32) & 8) != 0)
  {
    v7 = *((_QWORD *)a2 + 10);
    String = CAAtomGetString(a4);
    this = objc_msgSend(a3, "CAMLTypeSupportedForKey:", String);
    if ((_DWORD)this)
      return objc_msgSend(a3, "CAMLParser:setValue:forKey:", v7, a5, String);
  }
  return this;
}

double ___ZL27cons_CALayer_kCAValueDoublejb_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  id v4[2];

  v4[1] = *(id *)MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 32);
  v4[0] = 0;
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v2, (const CGAffineTransform *)0x12, v4);
  return *(double *)v4;
}

void CA::Layer::set_mask(CA::Layer ***this, CALayer *a2)
{
  objc_object **v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  uint64_t v8;
  objc_object **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  malloc_zone_t *malloc_zone;
  int v14;
  CA::Layer **v15;
  CA::Layer *layer;
  uint64_t v17;
  int v18;
  objc_object v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = (unsigned int *)CA::Transaction::ensure_compat((CA::Transaction *)this);
  if ((*((_DWORD *)this + 1) & 0x60000) != 0)
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("CALayerInvalidTree"), CFSTR("expecting model layer not copy: %@"), this[2]);
  if (this[4] != (CA::Layer **)a2)
  {
    v6 = v5[25];
    v5[25] = v6 + 1;
    if (v6)
    {
      if (!a2)
        goto LABEL_18;
    }
    else
    {
      os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
      if (!a2)
      {
LABEL_18:
        v19.isa = 0;
        CA::Layer::begin_change((CA::Layer *)this, (CA::Transaction *)v5, CFSTR("mask"), &v19, v4);
        v14 = CA::Layer::ancestor_context_id((CA::Layer *)this, (CA::Transaction *)v5);
        v15 = this[4];
        if (v15)
          CA::Layer::update_removed_sublayer(v15[2], (CA::Transaction *)v5, v14);
        if (a2)
        {
          CA::Layer::update_added_sublayer((CA::Layer *)a2->_attr.layer, (CA::Transaction *)v5, (CA::Layer *)this, v14);
          layer = (CA::Layer *)a2->_attr.layer;
          v17 = v5[24];
          if ((v17 & 0x80000000) != 0 || (v18 = *((_DWORD *)layer + v17 + 68)) == 0)
            v18 = *CA::Layer::thread_flags_(layer, (CA::Transaction *)v5);
          CA::Layer::update_for_changed_sublayers((CA::Layer *)this, (CA::Transaction *)v5, v18);
        }
        this[4] = &a2->super.isa;
        CA::Layer::end_change((id *)this, (CA::Transaction *)v5, 367, (objc_object *)CFSTR("mask"), (objc_object *)v19.isa);
        CA::Transaction::unlock((CA::Transaction *)v5);
        if (v15)
          CA::Transaction::release_object((CA::Transaction *)v5, v15);
        return;
      }
    }
    v7 = CA::Layer::retain_parent((CA::Layer *)a2->_attr.layer, (CA::Transaction *)v5);
    if (v7)
    {
      v10 = v7;
      CA::Layer::remove_sublayer((CA::Layer *)v7, (CA::Transaction *)v5, a2, v8, v9);
LABEL_10:
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = __ldaxr(v10);
          if (v12 != v11)
          {
            __clrex();
            goto LABEL_10;
          }
        }
        while (__stlxr(v11 - 1, v10));
        if (v11 == 1)
        {
          CA::Layer::destroy((CA::Layer *)v10);
          CA::Layer::~Layer((CA::AttrList **)v10);
          malloc_zone = (malloc_zone_t *)get_malloc_zone();
          malloc_zone_free(malloc_zone, v10);
        }
      }
    }
    else
    {
      CFRetain(a2);
      CA::Layer::remove_from_context((CA::Layer *)a2->_attr.layer);
    }
    goto LABEL_18;
  }
}

void sub_1844D42D0(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

void CAML::ObjCString::end(CAML::ObjCString *this, CAML::Context *a2, CAML::State *a3, UInt8 *bytes, CFIndex numBytes)
{
  CFStringRef v6;

  v6 = CFStringCreateWithBytes(0, bytes, numBytes, 0x8000100u, 0);
  CAML::State::set_value(a3, v6);
  CFRelease(v6);
}

void CAML::State::set_value(CAML::State *this, CFTypeRef cf)
{
  const void *v4;

  v4 = (const void *)*((_QWORD *)this + 8);
  if (v4)
  {
    CFRelease(v4);
    *((_QWORD *)this + 8) = 0;
  }
  if (cf)
    *((_QWORD *)this + 8) = CFRetain(cf);
}

void sub_1844D4460(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock((os_unfair_lock_t)&-[CAAnimation(CAAnimationPrivate) CAMLTypeSupportedForKey:]::lock);
  _Unwind_Resume(a1);
}

uint64_t CAML::ObjCReal::end(CAML::ObjCReal *this, CAML::Context *a2, CAML::State *a3, CAML *a4, uint64_t a5)
{
  CAML::Context *v7;
  CFNumberRef v8;
  const char *v9;
  double valuePtr;
  CAML::Context *v12[2];

  v12[1] = *(CAML::Context **)MEMORY[0x1E0C80C00];
  v12[0] = a4;
  v7 = (CAML *)((char *)a4 + a5);
  valuePtr = CAML::parse_real(a4, (char *)v12, (char **)((char *)a4 + a5), (const char *)a4);
  v8 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  CAML::State::set_value(a3, v8);
  CFRelease(v8);
  return CAML::check_trailer((uint64_t)a2, v12[0], v7, v9);
}

uint64_t CAML::check_trailer(uint64_t this, CAML::Context *a2, CAML::Context *a3, const char *a4)
{
  const char *v4;
  CAML::Context *v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 < a3)
  {
    v4 = (const char *)a2;
    v5 = (CAML::Context *)this;
    v6 = a3 - a2;
    v7 = MEMORY[0x1E0C80978];
    do
    {
      this = *v4;
      if (!*v4)
        break;
      if ((this & 0x80000000) != 0)
      {
        this = __maskrune(this, 0x4000uLL);
        if (!(_DWORD)this)
        {
LABEL_10:
          if (*v4)
            return CAML::Context::warning(v5, "Ignoring trailing characters: %s", v4);
          return this;
        }
      }
      else
      {
        this = *(_DWORD *)(v7 + 4 * this + 60) & 0x4000;
        if (!(_DWORD)this)
          goto LABEL_10;
      }
      ++v4;
      --v6;
    }
    while (v6);
  }
  return this;
}

double CAML::parse_real(CAML *this, char *a2, char **a3, const char *a4)
{
  const char *v6;
  double v7;
  char *v8;
  double v9;
  double v10;
  unsigned int v11;
  char *v12;
  double v13;
  int v14;
  double v15;
  int v16;
  CAML *v18;
  char *__s1[2];

  __s1[1] = *(char **)MEMORY[0x1E0C80C00];
  __s1[0] = (char *)this;
  v7 = x_strtod((const char *)this, __s1, (const char *)a3);
  v8 = __s1[0];
  v18 = (CAML *)__s1[0];
  switch(*__s1[0])
  {
    case 'c':
      if (__s1[0][1] == 109)
      {
        v9 = 28.346456;
        goto LABEL_39;
      }
      goto LABEL_42;
    case 'd':
      if (!strncmp(__s1[0], "deg", 3uLL))
      {
        v18 = (CAML *)(v8 + 3);
        v13 = 0.0174532925;
        goto LABEL_16;
      }
      goto LABEL_42;
    case 'e':
    case 'f':
    case 'h':
    case 'j':
    case 'k':
    case 'l':
    case 'n':
    case 'o':
    case 'q':
      goto LABEL_6;
    case 'g':
      if (!strncmp(__s1[0], "grad", 4uLL))
      {
        v18 = (CAML *)(v8 + 4);
        v13 = 0.0157079633;
LABEL_16:
        v7 = v7 * v13;
      }
      goto LABEL_42;
    case 'i':
      if (__s1[0][1] != 110)
        goto LABEL_42;
      v9 = 72.0;
      goto LABEL_39;
    case 'm':
      if (__s1[0][1] != 109)
        goto LABEL_42;
      v9 = 2.8346456;
      goto LABEL_39;
    case 'p':
      v14 = __s1[0][1];
      if (v14 == 99)
      {
        v9 = 12.0;
        goto LABEL_39;
      }
      if (v14 != 120 && v14 != 116)
        goto LABEL_42;
      goto LABEL_40;
    case 'r':
      if (!strncmp(__s1[0], "rad", 3uLL))
        goto LABEL_26;
      goto LABEL_42;
    default:
      if (*__s1[0] == 37)
      {
        v10 = 0.01;
LABEL_10:
        v7 = v7 * v10;
LABEL_11:
        v12 = __s1[0] + 1;
LABEL_41:
        v18 = (CAML *)v12;
        goto LABEL_42;
      }
LABEL_6:
      v11 = *__s1[0];
      if (v11 > 0x6C)
      {
        if (v11 != 109)
        {
          if (v11 != 115)
            goto LABEL_42;
          goto LABEL_11;
        }
        v16 = *((unsigned __int8 *)__s1[0] + 1);
        if (v16 == 115)
        {
          v9 = 0.001;
LABEL_39:
          v7 = v7 * v9;
LABEL_40:
          v12 = __s1[0] + 2;
          goto LABEL_41;
        }
        if (v16 == 105 && __s1[0][2] == 110)
        {
          v7 = v7 * 60.0;
LABEL_26:
          v12 = v8 + 3;
          goto LABEL_41;
        }
      }
      else
      {
        if (v11 != 58)
        {
          if (v11 != 104)
            goto LABEL_42;
          v10 = 3600.0;
          goto LABEL_10;
        }
        v15 = x_strtod(__s1[0] + 1, &v18, (const char *)a3);
        if (*((_BYTE *)v18 + 1) == 58)
          v7 = x_strtod((const char *)v18 + 1, &v18, (const char *)a3) + (v15 + v7 * 60.0) * 60.0;
        else
          v7 = v15 + v7 * 60.0;
      }
LABEL_42:
      if (a2)
        *(_QWORD *)a2 = CAML::skip_whitespace(v18, (CAML *)a3, v6);
      return v7;
  }
}

CAML *CAML::skip_whitespace(CAML *this, CAML *a2, const char *a3)
{
  CAML *v3;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  v3 = this;
  if (this < a2)
  {
    v5 = a2 - this;
    v6 = MEMORY[0x1E0C80978];
    while (1)
    {
      v7 = *(char *)v3;
      if (!*(_BYTE *)v3)
        break;
      if ((v7 & 0x80000000) != 0)
      {
        if (!__maskrune(v7, 0x4000uLL))
          return v3;
      }
      else if ((*(_DWORD *)(v6 + 4 * v7 + 60) & 0x4000) == 0)
      {
        return v3;
      }
      v3 = (CAML *)((char *)v3 + 1);
      if (!--v5)
        return a2;
    }
  }
  return v3;
}

void sub_1844D4994(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock((os_unfair_lock_t)&-[CALayer(CALayerPrivate) CAMLTypeSupportedForKey:]::lock);
  _Unwind_Resume(a1);
}

void CAML::ObjCNSObject::end(id *this, CAML::Context *a2, CAML::State *a3, char *a4, uint64_t a5)
{
  uint64_t v8;
  id v9;

  v8 = *((_QWORD *)a2 + 10);
  if (((_BYTE)this[4] & 4) != 0)
  {
    v9 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytes:length:encoding:", a4, a5, 4);
    *((_QWORD *)a2 + 11) = a3;
    objc_msgSend(this[3], "CAMLParserEndElement:content:", v8, v9);
    *((_QWORD *)a2 + 11) = 0;

  }
  else if (((_BYTE)this[4] & 2) != 0)
  {
    *((_QWORD *)a2 + 11) = a3;
    objc_msgSend(this[3], "CAMLParserEndElement:", v8, a4);
    *((_QWORD *)a2 + 11) = 0;
  }
}

void CAML::`anonymous namespace'::set_array(uint64_t a1, uint64_t a2)
{
  const void *v2;

  v2 = *(const void **)(a2 + 64);
  if (v2)
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(a1 + 48) + 64), v2);
}

id ___ZL36cons_CALayer_kCAValueRetainedPointerjb_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  id v4[2];

  v4[1] = *(id *)MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 32);
  v4[0] = 0;
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v2, (const CGAffineTransform *)2, v4);
  return v4[0];
}

void CAML::ObjCBool::end(CAML::ObjCBool *this, CAML::Context *a2, CAML::State *a3, char *a4, char *a5)
{
  char *v6;
  double v7;
  CFTypeRef *v8;
  char *v9;
  char *__s1;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  v9 = a5;
  __s1 = a4;
  CAML::trim_whitespace((const char **)&__s1, &v9, (unint64_t *)a3);
  v6 = __s1;
  if (!strcmp(__s1, "true"))
  {
    v8 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
  }
  else if (!strcmp(v6, "false"))
  {
    v8 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
  }
  else
  {
    v11[0] = v6;
    v7 = x_strtod(v6, v11, &v9[(_QWORD)v6]);
    v8 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    if (v7 != 0.0)
      v8 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
  }
  CAML::State::set_value(a3, *v8);
}

uint64_t CAML::trim_whitespace(const char **this, char **a2, unint64_t *a3)
{
  const char *v5;
  char *v6;
  uint64_t i;
  unsigned int v8;
  uint64_t result;
  const char *v10;
  unsigned int v11;

  v5 = *this;
  v6 = *a2;
  for (i = MEMORY[0x1E0C80978]; v6; --v6)
  {
    v8 = *v5;
    if (!*v5)
      break;
    if ((v8 & 0x80000000) != 0)
    {
      if (!__maskrune(v8, 0x4000uLL))
        break;
    }
    else if ((*(_DWORD *)(i + 4 * v8 + 60) & 0x4000) == 0)
    {
      break;
    }
    ++v5;
  }
  result = strlen(v5);
  if (v6 && result >= 1)
  {
    v10 = &v5[result - 1];
    do
    {
      v11 = *v10;
      if ((v11 & 0x80000000) != 0)
      {
        result = __maskrune(v11, 0x4000uLL);
        if (!(_DWORD)result)
          break;
      }
      else
      {
        result = *(_DWORD *)(i + 4 * v11 + 60) & 0x4000;
        if (!(_DWORD)result)
          break;
      }
      *v10 = 0;
      if (!--v6)
        break;
    }
    while (v10-- > v5);
  }
  *this = v5;
  *a2 = v6;
  return result;
}

void CAML::ObjCCGPoint::end(CAML::ObjCCGPoint *this, CAML::Context *a2, CAML::State *a3, CAML *a4, uint64_t a5)
{
  char **v7;
  double v8;
  const char *v9;
  double v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  CAML::Context *v14[2];

  v14[1] = *(CAML::Context **)MEMORY[0x1E0C80C00];
  v7 = (char **)((char *)a4 + a5);
  v14[0] = a4;
  v8 = CAML::parse_length(a4, (char *)v14, (char **)((char *)a4 + a5), (const char *)a4);
  v10 = CAML::parse_length(v14[0], (char *)v14, v7, v9);
  v12 = CAML::check_trailer((uint64_t)a2, v14[0], (CAML::Context *)v7, v11);
  v13 = (void *)MEMORY[0x186DBE2E4](v12);
  CAML::State::set_value(a3, (CFTypeRef)objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithPoint:", v8, v10));
  objc_autoreleasePoolPop(v13);
}

void sub_1844D51B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_autoreleasePoolPop(v1);
  _Unwind_Resume(a1);
}

void ___ZL34cons_CALayer_kCAValueCopiedPointerjb_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v3;
  double v4[2];

  v4[1] = *(double *)MEMORY[0x1E0C80C00];
  v3 = (const void *)*(unsigned int *)(a1 + 32);
  *(_QWORD *)&v4[0] = a3;
  CA::Layer::setter(*(CA::Transaction **)(a2 + 16), v3, (const CGAffineTransform *)3, v4);
}

float ___ZL26cons_CALayer_kCAValueFloatjb_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  float v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 32);
  v4 = 0.0;
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v2, (const CGAffineTransform *)0x11, (id *)&v4);
  return v4;
}

uint64_t CAML::ObjCInteger::end(CAML::ObjCInteger *this, CAML::Context *a2, CAML::State *a3, char *__str, uint64_t a5)
{
  CAML::Context *v7;
  CFNumberRef v8;
  const char *v9;
  uint64_t valuePtr;
  char *__endptr[2];

  __endptr[1] = *(char **)MEMORY[0x1E0C80C00];
  __endptr[0] = __str;
  v7 = (CAML::Context *)&__str[a5];
  valuePtr = strtol(__str, __endptr, 10);
  v8 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
  CAML::State::set_value(a3, v8);
  CFRelease(v8);
  return CAML::check_trailer((uint64_t)a2, (CAML::Context *)__endptr[0], v7, v9);
}

uint64_t CAML::ObjCCGColor::end(CAML::ObjCCGColor *this, CAML::Context *a2, CAML::State *a3, CAML::State *a4, char *a5)
{
  return CAML::cgcolor_end(a2, a3, a4, a5);
}

uint64_t CAML::cgcolor_end(CAML *this, CAML::Context *a2, CAML::State *a3, char *a4)
{
  CAML *v6;
  const char *v7;
  CGColorSpace *v8;
  CFTypeID v9;
  CFTypeID TypeID;
  char *v11;
  uint64_t v12;
  const char *v13;
  size_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int v29;
  CAML *v30;
  unint64_t v31;
  int v32;
  const char *v33;
  double v34;
  CAML *v35;
  CAML *v36;
  int v37;
  CAML *v38;
  unsigned int v39;
  uint64_t v40;
  const char *v41;
  char *v42;
  size_t NumberOfComponents;
  uint64_t v44;
  uint64_t v45;
  CGFloat *v46;
  size_t v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;
  double v51;
  const char *v52;
  const char *v53;
  BOOL v54;
  BOOL v55;
  CGColorSpaceRef v56;
  _BOOL4 v57;
  CGColorSpace *v58;
  CGFloat *v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  CGColorRef v93;
  uint64_t v95;
  char *v96;
  char *v97;
  CAML *v98;
  CGFloat components[2];
  __int128 v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  v96 = a4;
  v97 = (char *)a3;
  *(_OWORD *)components = 0u;
  v100 = 0u;
  v6 = (CAML *)&a4[(_QWORD)a3];
  CAML::trim_whitespace((const char **)&v97, &v96, (unint64_t *)a3);
  v8 = (CGColorSpace *)*((_QWORD *)a2 + 8);
  if (v8)
  {
    v9 = CFGetTypeID(*((CFTypeRef *)a2 + 8));
    TypeID = CGColorSpaceGetTypeID();
    v11 = v97;
    if (v9 == TypeID)
    {
      if (v96)
      {
        v12 = *v97;
        if (*v97 < 0 || (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v12 + 60) & 0x400) == 0)
        {
          if (!strncmp(v97, "rgb(", 4uLL))
          {
            v30 = CAML::skip_whitespace((CAML *)(v11 + 4), v6, v13);
            if (v30 >= v6)
            {
              v39 = 0;
LABEL_48:
              v32 = *(unsigned __int8 *)v30;
            }
            else
            {
              v31 = 0;
              while (1)
              {
                v32 = *(unsigned __int8 *)v30;
                if (!*(_BYTE *)v30 || v32 == 41)
                  break;
                v98 = v30;
                v34 = x_strtod((const char *)v30, &v98, (const char *)v6);
                v35 = v98;
                v36 = (CAML *)((char *)v98 + 1);
                v37 = *(unsigned __int8 *)v98;
                components[v31] = dbl_18474E3F0[v37 == 37] * v34;
                if (v37 == 44)
                  v38 = v36;
                else
                  v38 = v35;
                v30 = CAML::skip_whitespace(v38, v6, v33);
                v39 = v31 + 1;
                if (v31 <= 1)
                {
                  ++v31;
                  if (v30 < v6)
                    continue;
                }
                goto LABEL_48;
              }
              v39 = v31;
            }
            if (v32 == 41)
            {
              v11 = (char *)v30 + 1;
              if (v39 <= 2)
                memset_pattern16(&components[v39], &unk_18474EA80, 8 * (2 - v39) + 8);
              goto LABEL_123;
            }
          }
          else
          {
            if ((_DWORD)v12 != 35)
            {
              v40 = 0;
              v41 = "aqua";
              while (strcmp(v41, v11))
              {
                ++v40;
                v41 += 40;
                if (v40 == 16)
                  goto LABEL_54;
              }
              v42 = &CAParseCSSColorDescription::colors[40 * v40];
              *(_OWORD *)components = *((_OWORD *)v42 + 1);
              *(_QWORD *)&v100 = *((_QWORD *)v42 + 4);
              v11 += strlen(&CAParseCSSColorDescription::colors[40 * v40]);
              goto LABEL_123;
            }
            v14 = strlen(v11);
            if (v14 == 7)
            {
              v60 = v11[1];
              v61 = v60 - 48;
              v62 = v60 - 97;
              if ((v60 - 65) >= 6)
                v63 = 0;
              else
                v63 = v60 - 55;
              v64 = v60 - 87;
              if (v62 > 5)
                v64 = v63;
              if (v61 < 0xA)
                v64 = v61;
              v65 = 16 * v64;
              v66 = v11[2];
              v67 = v66 - 48;
              v68 = v66 - 97;
              if ((v66 - 65) >= 6)
                v69 = 0;
              else
                v69 = v66 - 55;
              v70 = v66 - 87;
              if (v68 > 5)
                v70 = v69;
              if (v67 < 0xA)
                v70 = v67;
              components[0] = (double)(int)(v70 | v65) * 0.00392156863;
              v71 = v11[3];
              v72 = v71 - 48;
              v73 = v71 - 97;
              if ((v71 - 65) >= 6)
                v74 = 0;
              else
                v74 = v71 - 55;
              v75 = v71 - 87;
              if (v73 > 5)
                v75 = v74;
              if (v72 < 0xA)
                v75 = v72;
              v76 = 16 * v75;
              v77 = v11[4];
              v78 = v77 - 48;
              v79 = v77 - 97;
              if ((v77 - 65) >= 6)
                v80 = 0;
              else
                v80 = v77 - 55;
              v81 = v77 - 87;
              if (v79 > 5)
                v81 = v80;
              if (v78 < 0xA)
                v81 = v78;
              components[1] = (double)(int)(v81 | v76) * 0.00392156863;
              v82 = v11[5];
              v83 = v82 - 48;
              v84 = v82 - 97;
              if ((v82 - 65) >= 6)
                v85 = 0;
              else
                v85 = v82 - 55;
              v86 = v82 - 87;
              if (v84 > 5)
                v86 = v85;
              if (v83 < 0xA)
                v86 = v83;
              v87 = 16 * v86;
              v88 = v11[6];
              v89 = v88 - 48;
              v90 = v88 - 97;
              if ((v88 - 65) >= 6)
                v91 = 0;
              else
                v91 = v88 - 55;
              v92 = v88 - 87;
              if (v90 > 5)
                v92 = v91;
              if (v89 < 0xA)
                v92 = v89;
              *(double *)&v100 = (double)(int)(v92 | v87) * 0.00392156863;
              v11 += 7;
              goto LABEL_123;
            }
            if (v14 == 4)
            {
              v15 = v11[1];
              v16 = v15 - 48;
              v17 = v15 - 97;
              if ((v15 - 65) >= 6)
                v18 = 0;
              else
                v18 = v15 - 55;
              v19 = v15 - 87;
              if (v17 > 5)
                v19 = v18;
              if (v16 < 0xA)
                v19 = v16;
              components[0] = (double)v19 * 0.0666666667;
              v20 = v11[2];
              v21 = v20 - 48;
              v22 = v20 - 97;
              if ((v20 - 65) >= 6)
                v23 = 0;
              else
                v23 = v20 - 55;
              v24 = v20 - 87;
              if (v22 > 5)
                v24 = v23;
              if (v21 < 0xA)
                v24 = v21;
              components[1] = (double)v24 * 0.0666666667;
              v25 = v11[3];
              v26 = v25 - 48;
              v27 = v25 - 97;
              if ((v25 - 65) >= 6)
                v28 = 0;
              else
                v28 = v25 - 55;
              v29 = v25 - 87;
              if (v27 > 5)
                v29 = v28;
              if (v26 < 0xA)
                v29 = v26;
              *(double *)&v100 = (double)v29 * 0.0666666667;
              v11 += 4;
LABEL_123:
              v97 = v11;
              *((double *)&v100 + 1) = *(float *)a2;
              v59 = components;
              v58 = v8;
LABEL_124:
              v93 = CGColorCreate(v58, v59);
              CAML::State::set_value(a2, v93);
              CGColorRelease(v93);
              return CAML::check_trailer((uint64_t)this, (CAML::Context *)v11, v6, v7);
            }
          }
        }
      }
LABEL_54:
      NumberOfComponents = CGColorSpaceGetNumberOfComponents(v8);
      v44 = NumberOfComponents << 32;
      MEMORY[0x1E0C80A78](NumberOfComponents);
      v46 = (CGFloat *)((char *)&v95 - v45);
      bzero((char *)&v95 - v45, v47);
      LODWORD(v48) = 0;
      if (!*v11 || (NumberOfComponents & 0x80000000) != 0)
      {
        v49 = 0;
      }
      else
      {
        v48 = 0;
        v49 = 0;
        v95 = NumberOfComponents << 32;
        do
        {
          v50 = v48;
          v98 = (CAML *)v11;
          v51 = x_strtod(v11, &v98, (const char *)v6);
          v53 = (const char *)CAML::skip_whitespace(v98, v6, v52);
          v11 = (char *)v53;
          v46[v50] = v51;
          v54 = v51 < 0.0;
          if (v51 > 1.0)
            v54 = 1;
          v49 |= v54;
          v48 = v50 + 1;
          if (*v53)
            v55 = v50 < (int)NumberOfComponents;
          else
            v55 = 0;
        }
        while (v55);
        v97 = (char *)v53;
        v44 = v95;
      }
      if ((_DWORD)v48 == (_DWORD)NumberOfComponents)
      {
        v46[NumberOfComponents] = 1.0;
      }
      else if ((int)v48 <= (int)NumberOfComponents)
      {
        CAML::Context::error(this, "Incorrect number of color components (need %d)", NumberOfComponents);
      }
      if ((v49 & (CAML::cgcolor_end(CAML::Context *,CAML::State *,char *,unsigned long)::xr_srgb == 0)) == 1)
        CAML::cgcolor_end(CAML::Context *,CAML::State *,char *,unsigned long)::xr_srgb = (uint64_t)CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D960]);
      v56 = (CGColorSpaceRef)CAML::cgcolor_end(CAML::Context *,CAML::State *,char *,unsigned long)::srgb;
      if (CAML::cgcolor_end(CAML::Context *,CAML::State *,char *,unsigned long)::srgb)
      {
        if ((v49 & 1) != 0)
        {
LABEL_73:
          v57 = CFEqual(v8, v56) != 0;
LABEL_76:
          *(CGFloat *)((char *)v46 + (v44 >> 29)) = *(CGFloat *)((char *)v46 + (v44 >> 29)) * *(float *)a2;
          if (v57)
            v58 = (CGColorSpace *)CAML::cgcolor_end(CAML::Context *,CAML::State *,char *,unsigned long)::xr_srgb;
          else
            v58 = v8;
          v59 = v46;
          goto LABEL_124;
        }
      }
      else
      {
        v56 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
        CAML::cgcolor_end(CAML::Context *,CAML::State *,char *,unsigned long)::srgb = (uint64_t)v56;
        if ((v49 & 1) != 0)
          goto LABEL_73;
      }
      v57 = 0;
      goto LABEL_76;
    }
  }
  else
  {
    v11 = v97;
  }
  return CAML::check_trailer((uint64_t)this, (CAML::Context *)v11, v6, v7);
}

void CAML::ObjCCATransform3D::end(CAML::ObjCCATransform3D *this, CAML::Context *a2, CAML::State *a3, char *a4, uint64_t a5)
{
  char *v5;
  CAML *v6;
  float64x2_t v7;
  uint64_t v8;
  CAML *v9;
  size_t v10;
  unsigned int v11;
  char *v12;
  const char *v13;
  double *v14;
  const char *v15;
  unint64_t v16;
  int v17;
  const char *v19;
  int v20;
  int v21;
  BOOL v29;
  BOOL v30;
  float64x2_t v31;
  double v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  double v39;
  double v40;
  double v41;
  double v42;
  int8x16_t v43;
  int8x16_t v44;
  __double2 v45;
  BOOL v46;
  double *v47;
  void *v48;
  int8x16_t v49;
  _OWORD v53[8];
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  void *__src;
  float64x2_t __x;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  _OWORD __dst[2];
  _QWORD v83[2];
  __int128 v84;
  double v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  __src = a4;
  v54 = (float64x2_t)xmmword_18474DF40;
  v55 = 0u;
  v56 = (float64x2_t)xmmword_18474DF50;
  v57 = 0u;
  v58 = 0u;
  v59 = (float64x2_t)xmmword_18474DF40;
  v60 = 0u;
  v61 = (float64x2_t)xmmword_18474DF50;
  if (a5 >= 1)
  {
    v5 = a4;
    v6 = (CAML *)&a4[a5];
    memset(__dst, 0, sizeof(__dst));
    __x = 0uLL;
    v75 = 0uLL;
    v76 = 0uLL;
    v77 = 0uLL;
    v78 = 0uLL;
    v79 = 0uLL;
    v80 = 0uLL;
    v81 = 0uLL;
    v70 = 0uLL;
    v71 = 0uLL;
    v72 = 0uLL;
    v62 = 0uLL;
    v63 = 0uLL;
    v64 = 0uLL;
    v65 = 0uLL;
    v66 = 0uLL;
    v67 = 0uLL;
    v7.f64[0] = NAN;
    v7.f64[1] = NAN;
    v49 = (int8x16_t)vnegq_f64(v7);
    v68 = 0uLL;
    v69 = 0uLL;
    v8 = MEMORY[0x1E0C80978];
    while (1)
    {
      if (!*v5)
        goto LABEL_118;
      v9 = CAML::skip_whitespace((CAML *)v5, v6, (const char *)a3);
      v10 = 0;
      __src = v9;
      do
      {
        if (__src < v6)
        {
          v11 = *((char *)__src + v10);
          if (!*((_BYTE *)__src + v10))
            break;
          if ((v11 & 0x80000000) != 0)
          {
            if (!__maskrune(v11, 0x100uLL))
              break;
          }
          else if ((*(_DWORD *)(v8 + 4 * v11 + 60) & 0x100) == 0)
          {
            break;
          }
        }
        ++v10;
      }
      while (v10 != 31);
      v12 = (char *)__src;
      memcpy(__dst, __src, v10);
      *((_BYTE *)__dst + v10) = 0;
      __src = &v12[v10];
      this = CAML::skip_whitespace((CAML *)&v12[v10], v6, v13);
      v5 = (char *)this;
      __src = this;
      if (this < v6 && *(_BYTE *)this == 40)
      {
        this = CAML::skip_whitespace((CAML::ObjCCATransform3D *)((char *)this + 1), v6, (const char *)a3);
        v5 = (char *)this;
        __src = this;
      }
      if (v5 >= (char *)v6)
      {
        v16 = 0;
      }
      else
      {
        v16 = 0;
        do
        {
          v17 = *v5;
          if (!*v5)
            break;
          if (v17 == 41 || v16 > 0xF)
          {
            if (v17 == 41)
            {
              this = CAML::skip_whitespace((CAML *)(v5 + 1), v6, (const char *)a3);
              v5 = (char *)this;
              __src = this;
            }
            break;
          }
          __x.f64[v16] = CAML::parse_real((CAML *)v5, (char *)&__src, (char **)v6, v15);
          this = CAML::skip_whitespace((CAML *)__src, v6, v19);
          v5 = (char *)this;
          __src = this;
          if (this < v6)
          {
            v20 = *(unsigned __int8 *)this;
            if (v20 == 59 || v20 == 44)
            {
              this = CAML::skip_whitespace((CAML::ObjCCATransform3D *)((char *)this + 1), v6, (const char *)a3);
              v5 = (char *)this;
              __src = this;
            }
          }
          ++v16;
        }
        while (v5 < (char *)v6);
      }
      if (v5 < (char *)v6)
      {
        v21 = *v5;
        if (v21 == 59 || v21 == 44)
        {
          this = CAML::skip_whitespace((CAML *)(v5 + 1), v6, (const char *)a3);
          v5 = (char *)this;
          __src = this;
        }
      }
      if (LODWORD(__dst[0]) != 1920229741 || *(_DWORD *)((char *)__dst + 3) != 7891314)
        break;
      if (v16 == 6)
      {
        v70 = __x;
        v71 = v75;
        v72 = v76;
        v33 = vmlaq_n_f64(vmlaq_n_f64(v60, v54, v76.f64[0]), v56, v76.f64[1]);
        v37 = vmlaq_n_f64(vmulq_n_f64(v54, v75.f64[0]), v56, v75.f64[1]);
        v35 = vmlaq_n_f64(vmlaq_n_f64(v61, v55, v76.f64[0]), v57, v76.f64[1]);
        v38 = vmlaq_n_f64(vmulq_n_f64(v55, v75.f64[0]), v57, v75.f64[1]);
        v54 = vmlaq_n_f64(vmulq_n_f64(v54, __x.f64[0]), v56, __x.f64[1]);
        v55 = vmlaq_n_f64(vmulq_n_f64(v55, __x.f64[0]), v57, __x.f64[1]);
        v56 = v37;
        v57 = v38;
LABEL_78:
        v60 = v33;
        v61 = v35;
        goto LABEL_117;
      }
      if (v16 != 16)
        goto LABEL_119;
      v58 = v78;
      v59 = v79;
      v60 = v80;
      v61 = v81;
      v54 = __x;
      v55 = v75;
      v56 = v76;
      v57 = v77;
LABEL_117:
      if (v5 >= (char *)v6)
        goto LABEL_118;
    }
    if (*(_QWORD *)&__dst[0] == 0x74616C736E617274 && WORD4(__dst[0]) == 101 && v16 != 0 && v16 <= 3)
    {
      if (v16 <= 1)
      {
        __x.f64[1] = 0.0;
        goto LABEL_82;
      }
      if (v16 == 2)
      {
LABEL_82:
        v75.f64[0] = 0.0;
        v39 = 0.0;
      }
      else
      {
        v39 = v75.f64[0];
      }
      v60 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v60, v54, __x.f64[0]), v56, __x.f64[1]), v58, v39);
      v61 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v61, v55, __x.f64[0]), v57, __x.f64[1]), v59, v39);
      goto LABEL_117;
    }
    if (LODWORD(__dst[0]) == 1818321779 && WORD2(__dst[0]) == 101)
    {
      if (v16 == 1)
      {
        v42 = __x.f64[0];
        __x.f64[1] = __x.f64[0];
        v75.f64[0] = __x.f64[0];
        v40 = __x.f64[0];
        v41 = __x.f64[0];
        goto LABEL_106;
      }
      if (v16 == 3)
      {
        v40 = __x.f64[1];
        v41 = __x.f64[0];
        v42 = v75.f64[0];
LABEL_106:
        v54 = vmulq_n_f64(v54, v41);
        v55 = vmulq_n_f64(v55, v41);
        v56 = vmulq_n_f64(v56, v40);
        v57 = vmulq_n_f64(v57, v40);
        v58 = vmulq_n_f64(v58, v42);
        v59 = vmulq_n_f64(v59, v42);
        goto LABEL_117;
      }
    }
    if (LODWORD(__dst[0]) == 1635020658 && *(_DWORD *)((char *)__dst + 3) == 6648929)
    {
      if (v16 == 4)
      {
        CA::Mat4Impl::mat4_set_rotation((CA::Mat4Impl *)v83, v14, __x.f64[0], __x.f64[1], v75.f64[0], v75.f64[1]);
LABEL_113:
        v47 = (double *)v83;
LABEL_116:
        CA::Mat4Impl::mat4_concat(&v54, v47, v54.f64, (const double *)v15);
        goto LABEL_117;
      }
      if (v16 == 1)
      {
        v87 = 0u;
        v88 = 0u;
        v84 = 0u;
        v89 = xmmword_18474DF40;
        v90 = 0u;
        v91 = xmmword_18474DF50;
        v45 = __sincos_stret(__x.f64[0]);
        *(double *)v44.i64 = v45.__cosval;
        *(double *)v43.i64 = v45.__sinval;
        if (fabs(v45.__sinval) >= 0.0000001)
        {
          if (fabs(v45.__cosval) < 0.0000001)
          {
            v44.i64[0] = 1.0;
            v43.i64[0] = vbslq_s8(v49, v44, v43).u64[0];
            v44.i64[0] = 0;
          }
        }
        else
        {
          v43.i64[0] = 1.0;
          v44.i64[0] = vbslq_s8(v49, v43, v44).u64[0];
          v43.i64[0] = 0;
        }
        v83[0] = v44.i64[0];
        v83[1] = v43.i64[0];
        v85 = -*(double *)v43.i64;
        v86 = v44.i64[0];
        goto LABEL_113;
      }
    }
    v29 = LODWORD(__dst[0]) == 2003135347 && WORD2(__dst[0]) == 88;
    if (!v29 && (LODWORD(__dst[0]) == 2003135347 ? (v30 = WORD2(__dst[0]) == 89) : (v30 = 0), !v30) || v16 != 1)
    {
      if ((*(_QWORD *)&__dst[0] == 0x59587261656873
         || *(_QWORD *)&__dst[0] == 0x5A597261656873
         || *(_QWORD *)&__dst[0] == 0x5A587261656873)
        && v16 == 1)
      {
        v62 = xmmword_18474DF40;
        v63 = 0u;
        v65 = 0u;
        v66 = 0u;
        v64 = xmmword_18474DF50;
        v67 = xmmword_18474DF40;
        v68 = 0u;
        v69 = xmmword_18474DF50;
        if (BYTE5(__dst[0]) == 89)
        {
          *((_QWORD *)&v66 + 1) = *(_QWORD *)&__x.f64[0];
        }
        else if (BYTE6(__dst[0]) == 89)
        {
          *(float64_t *)&v64 = __x.f64[0];
        }
        else
        {
          *(float64_t *)&v66 = __x.f64[0];
        }
      }
      else
      {
        v46 = *(_QWORD *)&__dst[0] == 0x7463657073726570 && DWORD2(__dst[0]) == 6649449;
        if (!v46 || v16 != 1)
        {
LABEL_119:
          this = (CAML::ObjCCATransform3D *)CAML::Context::error(a2, "Invalid transform: %s (position %ld)", a4, v5 - a4);
          goto LABEL_118;
        }
        v62 = xmmword_18474DF40;
        v63 = 0u;
        v65 = 0u;
        v66 = 0u;
        v64 = xmmword_18474DF50;
        *(_QWORD *)&v67 = 0x3FF0000000000000;
        v68 = 0u;
        v69 = xmmword_18474DF50;
        *((double *)&v67 + 1) = -1.0 / __x.f64[0];
      }
      v47 = (double *)&v62;
      goto LABEL_116;
    }
    v31 = *(float64x2_t *)(MEMORY[0x1E0C9BAA8] + 16);
    v70 = *(float64x2_t *)MEMORY[0x1E0C9BAA8];
    v71 = v31;
    v72 = *(float64x2_t *)(MEMORY[0x1E0C9BAA8] + 32);
    v32 = tan(__x.f64[0]);
    v71.f64[0] = v32;
    if (BYTE4(__dst[0]) == 89)
    {
      v70.f64[1] = v32;
      v71.f64[0] = 0.0;
    }
    v33 = vmlaq_n_f64(vmlaq_n_f64(v60, v54, v72.f64[0]), v56, v72.f64[1]);
    v34 = vmlaq_n_f64(vmulq_n_f64(v54, v71.f64[0]), v56, v71.f64[1]);
    v35 = vmlaq_n_f64(vmlaq_n_f64(v61, v55, v72.f64[0]), v57, v72.f64[1]);
    v36 = vmlaq_n_f64(vmulq_n_f64(v55, v71.f64[0]), v57, v71.f64[1]);
    v54 = vmlaq_n_f64(vmulq_n_f64(v54, v70.f64[0]), v56, v70.f64[1]);
    v55 = vmlaq_n_f64(vmulq_n_f64(v55, v70.f64[0]), v57, v70.f64[1]);
    v56 = v34;
    v57 = v36;
    goto LABEL_78;
  }
LABEL_118:
  v48 = (void *)MEMORY[0x186DBE2E4](this);
  v53[4] = v58;
  v53[5] = v59;
  v53[6] = v60;
  v53[7] = v61;
  v53[0] = v54;
  v53[1] = v55;
  v53[2] = v56;
  v53[3] = v57;
  CAML::State::set_value(a3, (CFTypeRef)objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithCATransform3D:", v53));
  objc_autoreleasePoolPop(v48);
}

void sub_1844D61D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_autoreleasePoolPop(v1);
  _Unwind_Resume(a1);
}

void CAML::`anonymous namespace'::set_value(uint64_t a1, uint64_t a2)
{
  CAML::State::set_value(*(CAML::State **)(a1 + 48), *(CFTypeRef *)(a2 + 64));
}

void CAML::`anonymous namespace'::set_document(uint64_t a1, uint64_t a2)
{
  const void *v3;
  const void *v4;

  v3 = *(const void **)(a2 + 64);
  v4 = *(const void **)(a1 + 40);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 40) = 0;
  }
  if (v3)
    *(_QWORD *)(a1 + 40) = CFRetain(v3);
}

uint64_t mapAnimationTime(CAAnimation *a1, double *a2, int *a3)
{
  CA::Render::Timing *v6;
  uint64_t v7;
  double v8;
  int v9;
  uint64_t v10;
  CAMediaTimingFunction *v11;
  double v12;
  float v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  v6 = (CA::Render::Timing *)CAMediaTimingCopyRenderTiming((unint64_t)a1);
  v7 = (uint64_t)v6;
  if (v6)
  {
    if (!CA::Render::Timing::map_parent_to_active(v6, a2, 0))
    {
      v10 = 0;
LABEL_17:
      v14 = (unsigned int *)(v7 + 8);
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      return v10;
    }
    if (a3)
    {
      v8 = *(double *)(v7 + 32);
      if ((*(_BYTE *)(v7 + 13) & 1) != 0)
        v8 = v8 + v8;
      if ((*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        v9 = 0;
      else
        v9 = vcvtmd_s64_f64(*a2 / v8);
      *a3 = v9;
    }
    CA::Render::Timing::map_active_to_local(v7, a2, 0);
    *a2 = *a2 / *(double *)(v7 + 32);
  }
  else if (a3)
  {
    *a3 = 0;
  }
  v11 = -[CAAnimation timingFunction](a1, "timingFunction");
  if (v11)
  {
    v12 = *a2;
    *(float *)&v12 = *a2;
    -[CAMediaTimingFunction _solveForInput:](v11, "_solveForInput:", v12);
    *a2 = v13;
  }
  v10 = 1;
  if (v7)
    goto LABEL_17;
  return v10;
}

void sub_1844D63E4(_Unwind_Exception *exception_object)
{
  unsigned int *v1;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (v1)
  {
    v3 = v1 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 16))(v1);
  }
  _Unwind_Resume(exception_object);
}

void CA::Render::KeyframeAnimation::apply(CA::Render::KeyframeAnimation *this, CA::Render::AnimationEvaluator *a2, double a3, int a4, char a5)
{
  signed int v10;
  uint64_t v11;
  const double *v12;
  CA::Render::VelocityState *v13;
  double v14;
  double v15;
  int v16;
  int v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  double v25;
  CA::Render::TimingFunction *v26;
  double v27;
  const double *v28;
  double v29;
  CA::Render::Path *v30;
  int v31;
  float v32;
  long double *v33;
  float v34;
  _QWORD *v35;
  __n128 v36;
  double v37;
  int8x16_t v38;
  int8x16_t v39;
  __double2 v40;
  float64x2_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  double v45;
  double v46;
  unint64_t v47;
  uint64_t v48;
  double v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  double v53;
  double v54;
  float64x2_t v55;
  void **v56;
  int v57;
  int v58;
  signed int v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v65;
  unint64_t v66;
  unsigned int v67;
  unsigned int v68;
  unint64_t v69;
  unint64_t v70;
  unsigned int v71;
  float64_t v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  unint64_t v76;
  double *v77;
  unint64_t v78;
  double v79;
  float64x2_t v80;
  float64x2_t v81;
  _QWORD v82[2];
  float64x2_t v83;
  _BYTE v84[128];
  __int128 v85;
  __int128 v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v85 = 0u;
  v86 = 0u;
  v10 = CA::Render::KeyframeAnimation::keyframe_for_time(this, a3, (double *)&v85);
  v11 = CA::Render::PropertyAnimation::apply_velocity_state(this, (uint64_t)a2);
  v13 = (CA::Render::VelocityState *)v11;
  v14 = 0.0;
  v15 = 0.0;
  if ((a5 & 1) == 0 && v11)
    v15 = (*(double (**)(CA::Render::KeyframeAnimation *, double))(*(_QWORD *)this + 128))(this, a3)
        * *((float *)a2 + 2);
  v16 = *((unsigned __int8 *)this + 144);
  if (*((_BYTE *)this + 144))
  {
    if (v16 == 2 || v16 == 4)
    {
      v19 = 0;
      v18 = 1;
    }
    else
    {
      v18 = 0;
      v19 = *((_QWORD *)this + 16);
    }
    v20 = *(double *)&v86 - *((double *)&v85 + 1);
    v21 = (a3 - *((double *)&v85 + 1)) / (*(double *)&v86 - *((double *)&v85 + 1));
    if (v21 > 1.0)
      v21 = 1.0;
    if (v21 >= 0.0)
      v14 = v21;
    else
      v14 = 0.0;
    v22 = v15 / v20;
    if (v13)
      v23 = v15 / v20;
    else
      v23 = v15;
    if (!v19 || v10 < 0 || v10 >= *(_DWORD *)(v19 + 16) >> 2)
    {
      v15 = v23;
    }
    else
    {
      v24 = *((_QWORD *)this + 5);
      if (v24)
        v25 = *(double *)(v24 + 32);
      else
        v25 = INFINITY;
      v26 = (CA::Render::TimingFunction *)(v19 + 32 * v10 + 24);
      v27 = 0.001 / v25;
      v29 = CA::Render::TimingFunction::evaluate(v26, v12, v14, 0.001 / v25);
      v14 = v29;
      if (v13)
        v15 = CA::Render::TimingFunction::evaluate_derivative_inverse(v26, v28, v29, v27) * v22;
    }
  }
  else
  {
    v18 = 0;
  }
  v30 = (CA::Render::Path *)*((_QWORD *)this + 17);
  if (v30)
  {
    v83 = 0uLL;
    v82[0] = 0;
    v82[1] = 0;
    v81 = 0uLL;
    v80 = 0uLL;
    v79 = 0.0;
    v31 = *((_DWORD *)this + 3);
    if ((v31 & 0x3000000) != 0)
      v33 = &v79;
    else
      v33 = 0;
    if (v13)
      v35 = v82;
    else
      v35 = 0;
    v32 = v14;
    v34 = v15;
    if (CA::Render::Path::interpolate(v30, v10, v18, &v83, &v81, &v80, v33, (unint64_t)v35, v32, v34))
    {
      LODWORD(v77) = a4;
      CA::Render::PropertyAnimation::set(this, *((CA::Render::Layer **)a2 + 5), 0, (CA::Render::Vector *)2, 0, v83.f64, 0, 0, v81.f64, v80.f64, 0, v77);
      if (v13)
        CA::Render::VelocityState::set_keypath_velocity((uint64_t)v13, *((void *const **)this + 12), *((CA::Render::Function **)this + 13), (*((_DWORD *)this + 3) >> 9) & 1, 2uLL, (CA::Mat4Impl *)v82, v83.f64, 0, v36);
      if ((v31 & 0x3000000) != 0)
      {
        v37 = v79;
        if ((v31 & 0x2000000) != 0)
        {
          v37 = v79 + 3.14159265;
          v79 = v79 + 3.14159265;
        }
        *(_OWORD *)&v84[16] = 0u;
        memset(&v84[48], 0, 32);
        *(_OWORD *)&v84[80] = xmmword_18474DF40;
        *(_OWORD *)&v84[96] = 0u;
        *(_OWORD *)&v84[112] = xmmword_18474DF50;
        v40 = __sincos_stret(v37);
        *(double *)v39.i64 = v40.__cosval;
        *(double *)v38.i64 = v40.__sinval;
        if (fabs(v40.__sinval) >= 0.0000001)
        {
          if (fabs(v40.__cosval) < 0.0000001)
          {
            v39.i64[0] = 1.0;
            v55.f64[0] = NAN;
            v55.f64[1] = NAN;
            v38.i64[0] = vbslq_s8((int8x16_t)vnegq_f64(v55), v39, v38).u64[0];
            v39.i64[0] = 0;
          }
        }
        else
        {
          v38.i64[0] = 1.0;
          v41.f64[0] = NAN;
          v41.f64[1] = NAN;
          v39.i64[0] = vbslq_s8((int8x16_t)vnegq_f64(v41), v38, v39).u64[0];
          v38.i64[0] = 0;
        }
        *(_QWORD *)v84 = v39.i64[0];
        *(_QWORD *)&v84[8] = v38.i64[0];
        *(double *)&v84[32] = -*(double *)v38.i64;
        *(_QWORD *)&v84[40] = v39.i64[0];
        v78 = 1115;
        CA::Render::Layer::set_keypath_value(*((CA::Render::Layer **)a2 + 5), &v78, (const unsigned int *)1, (CA::Render::Vector *)0x10, (double *)v84);
        CA::Render::key_path_free((CA::Render *)0x45B, v56);
      }
    }
    return;
  }
  v42 = *((_QWORD *)this + 14);
  if (!v42)
    return;
  if (v16 == 3)
  {
    memset(&v84[16], 0, 104);
    *(double *)v84 = v14;
    *(double *)&v84[8] = v15;
  }
  else
  {
    memset(&v84[16], 0, 104);
    *(double *)v84 = v14;
    *(double *)&v84[8] = v15;
    if (v16 != 4)
    {
      v57 = 0;
      goto LABEL_69;
    }
  }
  v43 = *((_QWORD *)this + 19);
  v44 = 0.0;
  v45 = 0.0;
  v46 = 0.0;
  if (v43)
  {
    v47 = *(unsigned int *)(v43 + 16);
    if (v10 < v47)
      v45 = *(double *)(v43 + 8 * v10 + 24);
    if (v10 + 1 < v47)
      v46 = *(double *)(v43 + 8 * (v10 + 1) + 24);
  }
  v48 = *((_QWORD *)this + 20);
  v49 = 0.0;
  if (v48)
  {
    v50 = *(unsigned int *)(v48 + 16);
    if (v10 < v50)
      v44 = *(double *)(v48 + 8 * v10 + 24);
    if (v10 + 1 < v50)
      v49 = *(double *)(v48 + 8 * (v10 + 1) + 24);
  }
  v51 = *((_QWORD *)this + 21);
  if (v51)
  {
    v52 = *(unsigned int *)(v51 + 16);
    v53 = 0.0;
    v54 = 0.0;
    if (v10 < v52)
      v54 = *(double *)(v51 + 8 * v10 + 24);
    if (v10 + 1 < v52)
      v53 = *(double *)(v51 + 8 * (v10 + 1) + 24);
  }
  else
  {
    v54 = 0.0;
    v53 = 0.0;
  }
  CA::Render::ValueInterpolator::set_hermite((CA::Render::ValueInterpolator *)v84, *((double *)&v85 + 1) - *(double *)&v85, *(double *)&v86 - *((double *)&v85 + 1), *((double *)&v86 + 1) - *(double *)&v86, v45, v44, v54, v46, v49, v53);
  v57 = 1;
LABEL_69:
  v58 = *(_DWORD *)(v42 + 16);
  v59 = v58 - 1;
  if (v58 < 1)
    return;
  v60 = v10 >= v59 ? v58 - 1 : v10;
  v61 = *(_QWORD *)(v42 + 24 + 8 * v60);
  v62 = v10 + 1 < v59 ? v10 + 1 : v58 - 1;
  v63 = *(_QWORD *)(v42 + 24 + 8 * v62);
  if (!v61 || v63 == 0)
    return;
  v65 = 0;
  if (v57)
  {
    if (v10 >= 1 && v10 <= v58)
      v65 = *(_QWORD *)(v42 + 8 * (v10 - 1) + 24);
    v66 = 0;
    if (v10 >= -2 && v10 + 2 < v58)
      v66 = *(_QWORD *)(v42 + 8 * (v10 + 2) + 24);
  }
  else
  {
    v66 = 0;
  }
  if (*(_BYTE *)(v61 + 12) == 56 && *(_BYTE *)(v63 + 12) == 56)
  {
    v67 = *(_DWORD *)(v61 + 16);
    v68 = *(_DWORD *)(v63 + 16);
    if (v67 >= v68)
      v69 = v68;
    else
      v69 = v67;
    if (v57)
    {
      if (v65)
      {
        v70 = v65 + 24;
        v71 = *(_DWORD *)(v65 + 16);
        if (v69 >= v71)
          v69 = v71;
        else
          v69 = v69;
      }
      else
      {
        v70 = 0;
      }
      if (v66)
      {
        v76 = v66 + 24;
        if (v69 >= *(unsigned int *)(v66 + 16))
          v69 = *(unsigned int *)(v66 + 16);
        goto LABEL_113;
      }
    }
    else
    {
      v70 = 0;
    }
    v76 = 0;
LABEL_113:
    if (v69)
    {
      LODWORD(v77) = a4;
      CA::Render::PropertyAnimation::set(this, *((CA::Render::Layer **)a2 + 5), v13, (CA::Render::Vector *)v69, v70, (const double *)(v61 + 24), (const double *)(v63 + 24), v76, (const double *)(*(_QWORD *)(v42 + 24) + 24), (const double *)(*(_QWORD *)(v42 + 24 + 8 * v59) + 24), (const CA::Render::ValueInterpolator *)v84, v77);
    }
    return;
  }
  v83.f64[0] = 0.0;
  if ((v57 & 1) != 0)
    CA::Render::mix_objects(&v83, v65, (CA::Render::Object *)v61, (CA::Render::Object *)v63, v66, (const CA::Render::ValueInterpolator *)v84);
  else
    CA::Render::mix_objects((uint64_t)&v83, (CA::Render::Object *)v61, (CA::Render::Object **)v63, (const ValueInterpolator *)v84);
  CA::Render::Layer::set_keypath_object(*((CA::Render::Layer **)a2 + 5), (const CA::Render::Layer **)this + 12, *(void *const **)&v83.f64[0]);
  v72 = v83.f64[0];
  if (*(_QWORD *)&v83.f64[0])
  {
    v73 = (unsigned int *)(*(_QWORD *)&v83.f64[0] + 8);
    do
    {
      v74 = __ldaxr(v73);
      v75 = v74 - 1;
    }
    while (__stlxr(v75, v73));
    if (!v75)
      (*(void (**)(float64_t))(**(_QWORD **)&v72 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v72));
  }
}

double CA::Render::SpringAnimation::time_derivative(CA::Render::SpringAnimation *this, double a2, const double *a3)
{
  uint64_t v5;
  double v6;
  double v7;
  CA::Render::SpringAnimation::State *v8;
  double v9;
  double v10;
  double v11;
  double v12;

  v5 = *((_QWORD *)this + 5);
  if (v5)
    v6 = *(double *)(v5 + 32);
  else
    v6 = INFINITY;
  v7 = CA::Render::Animation::time_derivative(this, a2, a3);
  v8 = (CA::Render::SpringAnimation *)((char *)this + 192);
  v9 = v6 * a2;
  CA::Render::SpringAnimation::State::eval_derivative(v8, v9);
  v11 = v10;
  CA::Render::SpringAnimation::State::eval_derivative(v8, v9 + 0.0166666667);
  if (fabs(v11) > fabs(v12))
    v12 = v11;
  return v7 * v6 * v12;
}

void CA::Render::GroupAnimation::apply(CA::Render::GroupAnimation *this, CA::Render::AnimationEvaluator *a2, __n128 a3, int a4, unsigned int a5)
{
  uint64_t v5;
  double v7;
  uint64_t v9;
  double v10;
  float v11;
  float v12;
  unint64_t v13;
  unint64_t v14;
  double v15;
  CA::Render::Animation *v16;
  __n128 v17;
  uint64_t v18;
  double v19;
  BOOL v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v21 = a4;
  v5 = *((_QWORD *)this + 12);
  if (v5)
  {
    v7 = a3.n128_f64[0];
    v9 = *((_QWORD *)this + 5);
    if (v9)
      v10 = *(double *)(v9 + 32);
    else
      v10 = INFINITY;
    v11 = *((float *)a2 + 2);
    v12 = v10
        * v11
        * (*(double (**)(CA::Render::GroupAnimation *, __n128))(*(_QWORD *)this + 128))(this, a3);
    *((float *)a2 + 2) = v12;
    v13 = *(unsigned int *)(v5 + 16);
    if ((_DWORD)v13)
    {
      v14 = 0;
      v15 = v10 * v7;
      do
      {
        v16 = *(CA::Render::Animation **)(v5 + 24 + 8 * v14);
        if ((*((_BYTE *)v16 + 13) & 1) != 0)
        {
          v20 = 0;
          v19 = v15;
          if (CA::Render::Animation::map_time(v16, &v19, &v21, 0, &v20))
          {
            v17.n128_f64[0] = v19;
            if (v20)
              v18 = 1;
            else
              v18 = a5;
            (*(void (**)(CA::Render::Animation *, CA::Render::AnimationEvaluator *, _QWORD, uint64_t, __n128))(*(_QWORD *)v16 + 120))(v16, a2, v21, v18, v17);
          }
          v13 = *(unsigned int *)(v5 + 16);
        }
        ++v14;
      }
      while (v14 < v13);
    }
    *((float *)a2 + 2) = v11;
  }
}

double CA::Render::Animation::time_derivative(CA::Render::Animation *this, double a2, const double *a3)
{
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;

  v3 = *((_QWORD *)this + 5);
  v4 = 1.0;
  if (v3)
  {
    v5 = *(double *)(v3 + 32);
    v6 = *(float *)(v3 + 16);
  }
  else
  {
    v5 = INFINITY;
    v6 = 1.0;
  }
  v7 = *((_QWORD *)this + 6);
  if (v7 && *(_DWORD *)(v7 + 16) == 4)
    v4 = CA::Render::TimingFunction::evaluate_derivative_inverse((CA::Render::TimingFunction *)(v7 + 24), a3, a2, 0.001 / v5);
  return v4 * v6 / v5;
}

double CA::Render::TimingFunction::evaluate_derivative_inverse(CA::Render::TimingFunction *this, const double *a2, double a3, double a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  int v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  int v20;
  double v22;
  double v23;
  double v24;
  double v25;

  v4 = *((double *)this + 1);
  v5 = *(double *)this * 3.0;
  v6 = (*((double *)this + 2) - *(double *)this) * 3.0;
  v7 = v6 - v5;
  v8 = 1.0 - v6;
  v9 = v4 * 3.0;
  v10 = (*((double *)this + 3) - v4) * 3.0;
  v11 = v10 - v9;
  v12 = 1.0 - v10;
  v13 = v11 + v11;
  v14 = 8;
  v15 = a3;
  while (1)
  {
    v16 = -(a3 - (v9 + (v11 + v15 * v12) * v15) * v15);
    if (fabs(v16) < a4)
      break;
    v17 = v9 + (v13 + v12 * 3.0 * v15) * v15;
    if (fabs(v17) >= 0.000001)
    {
      v15 = v15 - v16 / v17;
      if (--v14)
        continue;
    }
    v15 = 0.0;
    if (a3 >= 0.0)
    {
      v15 = 1.0;
      if (a3 <= 1.0)
      {
        v18 = 0.0;
        v19 = 1.0;
        v20 = -1025;
        v15 = a3;
        do
        {
          if (__CFADD__(v20++, 1))
            break;
          v22 = -(a3 - (v9 + (v11 + v15 * v12) * v15) * v15);
          if (fabs(v22) < a4)
            break;
          if (v22 >= 0.0)
            v19 = v15;
          else
            v18 = v15;
          v15 = v18 + (v19 - v18) * 0.5;
        }
        while (v18 < v19);
      }
    }
    break;
  }
  v23 = v9 + (v13 + v15 * 3.0 * v12) * v15;
  v24 = v7 + v7;
  v25 = v5 + (v24 + v15 * 3.0 * v8) * v15;
  if (v23 == 0.0 && v25 == 0.0)
  {
    v23 = v13 + v15 * 6.0 * v12;
    v25 = v24 + v15 * 6.0 * v8;
  }
  return v23 / v25;
}

void CA::Render::SpringAnimation::State::eval_derivative(CA::Render::SpringAnimation::State *this, double a2)
{
  double v4;
  double v5;
  double v6;

  v4 = *((double *)this + 1);
  if (v4 >= 1.0)
  {
    if (v4 > 1.0 && *((_BYTE *)this + 40))
    {
      v5 = *((double *)this + 2);
      v6 = *(double *)this * v4;
      exp(-((v6 + v5) * a2));
      exp((v5 - v6) * a2);
    }
    else
    {
      exp(-(a2 * *(double *)this));
    }
  }
  else
  {
    exp(-(a2 * v4) * *(double *)this);
    __sincos_stret(*((double *)this + 2) * a2);
  }
}

void CA::Render::KeyframeAnimation::next_time(uint64_t a1, void *a2, int a3, uint64_t a4, int a5, double *a6, CA::Render::Layer *a7, float64x2_t *a8, int8x16_t a9, double a10, int8x16_t a11, _DWORD *a12)
{
  float v16;
  double v17;
  int v19;
  uint64_t v20;
  int v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  _BOOL4 v29;
  _BOOL4 v30;
  _BOOL4 v31;
  signed int v32;
  uint64_t v33;
  int8x16_t v34;
  double v35;
  int8x16_t v36;
  uint64_t v37;
  _BOOL4 v38;
  uint64_t v39;
  unsigned int v40;
  signed int v41;
  signed int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  double v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  double v58;
  signed int v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[8];
  char v63;
  _QWORD v64[8];
  char v65;
  BOOL v66;
  double v67;
  double v68[8];

  v16 = *(float *)&a10;
  v17 = *(double *)a9.i64;
  v68[5] = *(double *)MEMORY[0x1E0C80C00];
  v19 = *(unsigned __int8 *)(a1 + 144);
  if ((v19 - 2) < 3)
  {
    v20 = *(_QWORD *)(a1 + 136);
    if (v20 && *(_DWORD *)(v20 + 16) && !*(_QWORD *)(v20 + 64))
      CA::Render::Path::keyframe_lengths((CA::Render::Path *)v20);
LABEL_16:
    *(double *)a9.i64 = v17;
    *(float *)&a10 = v16;
    CA::Render::Animation::next_time(a1, a2, a3, a9, a10, a11, a4, a5, a6);
    return;
  }
  v23 = a4;
  if (*(_BYTE *)(a1 + 144))
  {
    if (v19 != 1)
      goto LABEL_16;
    v24 = *(_QWORD *)(a1 + 136);
    if (v24 && *(_DWORD *)(v24 + 16))
    {
      if (!*(_QWORD *)(v24 + 64))
        CA::Render::Path::keyframe_lengths(*(CA::Render::Path **)(a1 + 136));
      if (*(double *)(v24 + 72) != 0.0)
        goto LABEL_16;
    }
  }
  v25 = *(_QWORD *)(a1 + 40);
  if (v25)
  {
    if (*(float *)(v25 + 16) == 0.0)
      return;
    v26 = *(double *)(v25 + 40);
    v27 = CA::Render::Timing::end_time((CA::Render::Timing *)v25);
  }
  else
  {
    v26 = 0.0;
    v27 = INFINITY;
  }
  if (v16 >= 0.0)
    v28 = v26;
  else
    v28 = v27;
  v29 = v28 > v17;
  if (v16 <= 0.0)
    v29 = v28 < v17;
  if (v29)
  {
    v30 = v28 < *a6;
    if (v16 <= 0.0)
      v30 = v28 > *a6;
    if (v30)
      *a6 = v28;
  }
  else
  {
    if (v16 < 0.0)
      v27 = v26;
    v31 = v27 > v17;
    if (v16 <= 0.0)
      v31 = v27 < v17;
    if (v31)
    {
      v67 = v17;
      v66 = 0;
      if (CA::Render::Animation::map_time((CA::Render::Animation *)a1, &v67, 0, &v66, 0))
      {
        memset(v68, 0, 32);
        v32 = CA::Render::KeyframeAnimation::keyframe_for_time((CA::Render::KeyframeAnimation *)a1, v67, v68);
        if (*(_BYTE *)(a1 + 144) != 1)
          goto LABEL_36;
        if (*(_QWORD *)(a1 + 136))
          goto LABEL_36;
        v39 = *(_QWORD *)(a1 + 112);
        if (!v39)
          goto LABEL_36;
        v40 = *(_DWORD *)(v39 + 16);
        if (v40 < 2)
          goto LABEL_36;
        v41 = v32;
        v42 = v40 - 1;
        if (v32 >= v42)
          v43 = v42;
        else
          v43 = v32;
        v44 = v39 + 24;
        v45 = *(_QWORD *)(v44 + 8 * v43);
        if (v32 + 1 < v42)
          v42 = v32 + 1;
        v46 = *(_QWORD *)(v44 + 8 * v42);
        v47 = !v45 || v46 == 0;
        if (v47
          || (v60 = *(_QWORD *)(v44 + 8 * v42), v61 = v45, *(_BYTE *)(v45 + 12) == 56)
          && *(_BYTE *)(v46 + 12) == 56
          && (v48 = *(unsigned int *)(v46 + 16), (_DWORD)v48 == *(_DWORD *)(v45 + 16))
          && (v59 = v32, v49 = memcmp((const void *)(v45 + 24), (const void *)(v46 + 24), 8 * v48), v41 = v59, !v49))
        {
LABEL_36:
          if (v66)
            *(int8x16_t *)&v68[1] = vextq_s8(*(int8x16_t *)&v68[1], *(int8x16_t *)&v68[1], 8uLL);
          v37 = *(_QWORD *)(a1 + 40);
          if (v37 && *(float *)(v37 + 16) < 0.0)
            v68[2] = v68[1];
          v67 = v68[2];
          CA::Render::Animation::inverse_map_time(a1, &v67, v17);
          v38 = v67 < *a6;
          if (v16 <= 0.0)
            v38 = v67 > *a6;
          if (v38)
            *a6 = v67;
        }
        else
        {
          v50 = v41;
          v51 = *a6;
          *(double *)v34.i64 = v17;
          *(float *)&v35 = v16;
          CA::Render::Animation::next_time(a1, a2, a3, v34, v35, v36, v33, a5, a6);
          v52 = 0;
          v53 = 0;
          v54 = *(_QWORD *)(a1 + 128);
          if (v54 && (v50 & 0x80000000) == 0)
          {
            if (v50 >= *(_DWORD *)(v54 + 16) >> 2)
            {
              v53 = 0;
              v52 = 0;
            }
            else
            {
              v52 = v54 + 8 * (int)(4 * v50) + 24;
              v53 = 1;
            }
          }
          v55 = *(_QWORD *)(a1 + 40);
          if (v55)
            v56 = *(_QWORD *)(v55 + 32);
          else
            v56 = 0x7FF0000000000000;
          if (!v52
            || (v57 = *(double *)(v52 + 8), v57 >= 0.0)
            && v57 <= 1.0
            && (v58 = *(double *)(v52 + 24), v58 >= 0.0)
            && v58 <= 1.0)
          {
            v64[0] = MEMORY[0x1E0C809B0];
            v64[1] = 0x40000000;
            v64[2] = ___ZNK2CA6Render17KeyframeAnimation9next_timeEdfPKvNS0_26AnimationFrameRateOverrideEjbRdPKNS0_5LayerEPKNS_4Vec2IdEERj_block_invoke;
            v64[3] = &__block_descriptor_tmp_16156;
            *(double *)&v64[4] = v68[1];
            *(double *)&v64[5] = v68[2];
            v65 = v53;
            v64[6] = v52;
            v64[7] = v56;
            v62[0] = MEMORY[0x1E0C809B0];
            v62[1] = 0x40000000;
            v62[2] = ___ZNK2CA6Render17KeyframeAnimation9next_timeEdfPKvNS0_26AnimationFrameRateOverrideEjbRdPKNS0_5LayerEPKNS_4Vec2IdEERj_block_invoke_2;
            v62[3] = &__block_descriptor_tmp_1_16157;
            v63 = v53;
            v62[4] = v52;
            v62[5] = v56;
            *(double *)&v62[6] = v68[2];
            *(double *)&v62[7] = v68[1];
            CA::Render::PropertyAnimation::significant_change_next_time((CA::Render::Animation *)a1, (uint64_t)v64, (uint64_t)v62, v23, a6, a7, a8, a12, v17, v16, v51, v61, v60, 0);
          }
        }
      }
    }
  }
}

void CA::Render::BasicAnimation0::next_time(uint64_t *a1, void *a2, int a3, uint64_t a4, int a5, double *a6, CA::Render::Layer *a7, float64x2_t *a8, int8x16_t a9, double a10, int8x16_t a11, _DWORD *a12)
{
  int v15;
  float v16;
  double v17;
  double v19;

  v15 = a4;
  v16 = *(float *)&a10;
  v17 = *(double *)a9.i64;
  v19 = *a6;
  CA::Render::Animation::next_time((uint64_t)a1, a2, a3, a9, a10, a11, a4, a5, a6);
  CA::Render::PropertyAnimation::significant_change_next_time((CA::Render::Animation *)a1, 0, 0, v15, a6, a7, a8, a12, v17, v16, v19, a1[14], a1[15], a1[16]);
}

void CA::Render::Animation::next_time(uint64_t a1, void *a2, int a3, int8x16_t a4, double a5, int8x16_t a6, uint64_t a7, int a8, double *a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v27;
  double v28;
  uint64_t v30;
  double v31;
  double v32;
  _BOOL4 v33;
  BOOL v34;
  _BOOL4 v35;
  float v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  uint64_t v42;
  double v43;
  float64x2_t v44;
  _BOOL4 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  if (*(float *)&a5 == 0.0)
    return;
  v46 = v21;
  v47 = v20;
  v48 = v19;
  v49 = v18;
  v50 = v17;
  v51 = v14;
  v52 = v13;
  v53 = v12;
  v54 = v11;
  v55 = v10;
  v56 = v9;
  v27 = *(float *)&a5;
  v28 = *(double *)a4.i64;
  v30 = *(_QWORD *)(a1 + 40);
  if (v30)
  {
    if (*(float *)(v30 + 16) == 0.0)
      return;
    v31 = *(double *)(v30 + 40);
    *(double *)a4.i64 = CA::Render::Timing::end_time((CA::Render::Timing *)v30);
  }
  else
  {
    v31 = 0.0;
    a4.i64[0] = 0x7FF0000000000000;
  }
  if (v27 >= 0.0)
    v32 = v31;
  else
    v32 = *(double *)a4.i64;
  v33 = v32 > v28;
  if (v27 <= 0.0)
    v33 = v32 < v28;
  if (v33)
  {
    v34 = v32 < *a9;
    if (v27 <= 0.0)
      v34 = v32 > *a9;
    if (!v34)
      return;
LABEL_75:
    *a9 = v32;
    return;
  }
  if (v27 < 0.0)
    *(double *)a4.i64 = v31;
  v35 = *(double *)a4.i64 > v28;
  if (v27 <= 0.0)
    v35 = *(double *)a4.i64 < v28;
  if (v35)
  {
    v37 = *(float *)(a1 + 28);
    v36 = *(float *)(a1 + 32);
    if (!a2)
      goto LABEL_57;
    a4.i32[0] = *(_DWORD *)(a1 + 24);
    v38 = *(_QWORD *)(a1 + 40);
    if (v38)
    {
      if (*(float *)(v38 + 16) == 0.0)
        goto LABEL_57;
    }
    if (*(float *)a4.i32 == 0.0 && v37 == 0.0 && v36 == 0.0)
    {
      if (CAPrefers60HzAPT(void)::once[0] != -1)
        dispatch_once(CAPrefers60HzAPT(void)::once, &__block_literal_global_2);
      if (CAPrefers60HzAPT(void)::enabled)
        v36 = 0.0;
      else
        v36 = 120.0;
      if (CAPrefers60HzAPT(void)::enabled)
        v37 = 80.0;
      else
        v37 = 120.0;
      if (CAPrefers60HzAPT(void)::enabled)
        *(float *)a4.i32 = 60.0;
      else
        *(float *)a4.i32 = 120.0;
    }
    v39 = *(unsigned int *)(a1 + 88);
    if (a8 && !(_DWORD)v39)
    {
      if ((*(_BYTE *)(a1 + 14) & 0x80) != 0)
      {
        if (*(float *)a4.i32 > 60.0)
          *(float *)a4.i32 = 60.0;
        LODWORD(a5) = 1117782016;
        if (v37 <= 80.0)
          *(float *)&a5 = v37;
        a6.i32[0] = 1114636288;
        if (v36 <= 60.0)
          *(float *)a6.i32 = v36;
        v39 = 0;
        if (v36 == 0.0)
          *(float *)a6.i32 = v36;
        goto LABEL_51;
      }
      v39 = 0;
    }
    *(float *)&a5 = v37;
    *(float *)a6.i32 = v36;
LABEL_51:
    if (!a3 || a3 == 2 && (*(_BYTE *)(a1 + 14) & 0x10) != 0)
      objc_msgSend(a2, "addFrameRateRange:", *(double *)a4.i64, a5, *(double *)a6.i64, v22, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v15, v16);
    if ((v39 + 0x10000) >= 0x20000)
      objc_msgSend(a2, "addReason:", v39, *(double *)a4.i64, a5, *(double *)a6.i64);
LABEL_57:
    v40 = 48.0;
    if (v37 >= 48.0)
      v40 = v37;
    if (v37 == 0.0 || v36 != 0.0)
      v40 = v36;
    if (v40 != 0.0)
    {
      *(double *)a4.i64 = 1.0 / v40;
      if (*(double *)a4.i64 != 0.0)
      {
        v42 = *(_QWORD *)(a1 + 40);
        if (v42)
          *(double *)a4.i64 = *(double *)a4.i64 * *(float *)(v42 + 16);
        if (*(double *)a4.i64 != 0.0)
        {
          if ((*(_BYTE *)(a1 + 13) & 0x80) != 0)
          {
            v28 = v32 + ceil((v28 - v32) / *(double *)a4.i64) * *(double *)a4.i64;
          }
          else
          {
            v43 = *(double *)a4.i64 + v28;
            *(double *)a4.i64 = -*(double *)a4.i64;
            a6.i64[0] = 0x3F61111111111111;
            v44.f64[0] = NAN;
            v44.f64[1] = NAN;
            v28 = v43 + *(double *)vbslq_s8((int8x16_t)vnegq_f64(v44), a6, a4).i64;
          }
        }
      }
    }
    v45 = v28 < *a9;
    if (v27 <= 0.0)
      v45 = v28 > *a9;
    v32 = v28;
    if (v45)
      goto LABEL_75;
  }
}

void CA::Render::PropertyAnimation::significant_change_next_time(CA::Render::Animation *a1, uint64_t a2, uint64_t a3, int a4, double *a5, CA::Render::Layer *a6, float64x2_t *a7, _DWORD *a8, double a9, float a10, double a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  unint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  double *v25;
  unint64_t v26;
  uint64_t v27;
  double *v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t *v34;
  int v35;
  int v36;
  int v37;
  const double *v38;
  uint64_t v39;
  double v40;
  __n128 v41;
  unint64_t v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unint64_t keypath_value;
  const void *v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  float64x2_t *v54;
  float64x2_t *p_dst;
  double v56;
  uint64_t v57;
  unint64_t v58;
  unsigned int v59;
  unint64_t v60;
  float64x2_t *v61;
  float64x2_t *v62;
  double v63;
  double v64;
  double v65;
  double position_range;
  const double *v67;
  float64x2_t v68;
  uint64_t v69;
  int v70;
  unint64_t v71;
  float64_t *v72;
  float64_t *v73;
  double v74;
  double v75;
  double v76;
  double v77;
  uint64_t v78;
  double v79;
  double v80;
  double v81;
  double v82;
  _BOOL4 v83;
  uint64_t v84;
  unsigned int v85;
  float64x2_t v86;
  int64x2_t v87;
  float64x2_t v88;
  int64x2_t v89;
  uint64_t v90;
  unsigned int v91;
  unint64_t v92;
  float64x2_t *v93;
  float64x2_t *v94;
  double v95;
  double *v96;
  unint64_t v97;
  int v98;
  double v99;
  BOOL v100;
  double v101;
  float64x2_t v102;
  float64x2_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  float64x2_t v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  float64x2_t __dst;
  float64x2_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  float64x2_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  int v127;
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  if (!a7 || *((float *)a1 + 6) != 0.0 && (*((_BYTE *)a6 + 41) & 0x10) == 0)
    return;
  v22 = *((_QWORD *)a1 + 12);
  if (!v22)
  {
    v23 = a8;
    v24 = a3;
LABEL_9:
    v25 = a5;
    LODWORD(v26) = 0;
    goto LABEL_11;
  }
  v23 = a8;
  v24 = a3;
  if ((v22 & 1) == 0)
  {
    if (*(_DWORD *)v22)
    {
      v25 = a5;
      LODWORD(v26) = *(_DWORD *)(v22 + 4);
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  v25 = a5;
  v26 = v22 >> 1;
LABEL_11:
  v98 = v26;
  v27 = CAAtomIndexInArray(10, (uint64_t)CA::Render::PropertyAnimation::significant_change_next_time(double,float,double({block_pointer})(double),double({block_pointer})(double),unsigned int,double &,double,CA::Render::Layer const*,CA::Vec2<double> const*,unsigned int &,CA::Render::Object *,CA::Render::Object *,CA::Render::Object *)const::atoms, v26);
  if (v27 == -1)
    return;
  v28 = v25;
  v29 = v24;
  v30 = v23;
  v127 = 0;
  v126 = 0;
  if (v22)
  {
    if ((v22 & 1) != 0)
    {
      LODWORD(v126) = v22 >> 1;
      v31 = 1;
    }
    else
    {
      v31 = *(unsigned int *)v22;
      if (v31 > 3)
        return;
      v32 = *(unsigned int *)v22;
      if ((_DWORD)v32)
      {
        v33 = (int *)(v22 + 4);
        v34 = &v126;
        do
        {
          v35 = *v33++;
          *(_DWORD *)v34 = v35;
          v34 = (uint64_t *)((char *)v34 + 4);
          --v32;
        }
        while (v32);
      }
    }
  }
  else
  {
    v31 = 0;
  }
  v36 = *v23;
  v37 = 1 << v27;
  if ((v36 & (1 << v27)) == 0)
  {
    v96 = v28;
    v97 = v31;
    v101 = a9;
    v100 = 0;
    if (CA::Render::Animation::map_time(a1, &v101, 0, &v100, 0))
    {
      v39 = a13;
      if (a2)
      {
        v40 = (*(double (**)(uint64_t, double))(a2 + 16))(a2, v101);
        v39 = a13;
        v101 = v40;
      }
      v41.n128_u64[1] = 0;
      v124 = 0u;
      v125 = 0u;
      v122 = 0u;
      v123 = 0u;
      v120 = 0u;
      v121 = 0u;
      v118 = 0u;
      v119 = 0u;
      v116 = 0u;
      v117 = 0u;
      __dst = 0u;
      v115 = 0u;
      v112 = 0u;
      v113 = 0u;
      v110 = 0u;
      v111 = 0u;
      v109 = 0u;
      v107 = 0u;
      v108 = 0u;
      v105 = 0u;
      v106 = 0u;
      v103 = 0u;
      v104 = 0u;
      v102 = 0u;
      if (a12 && v39)
      {
        v42 = v97;
        if (*(_BYTE *)(a12 + 12) == 56
          && ((v43 = *(_DWORD *)(a12 + 16), v43 >= 0x18) ? (v44 = 24) : (v44 = v43), (_DWORD)v44))
        {
          v45 = v39;
          memcpy(&__dst, (const void *)(a12 + 24), 8 * v44);
          v39 = v45;
          v42 = v97;
        }
        else
        {
          v44 = 0;
        }
        if (*(_BYTE *)(v39 + 12) == 56)
        {
          v47 = *(_DWORD *)(v39 + 16);
          keypath_value = v47 >= 0x18 ? 24 : v47;
          if ((_DWORD)keypath_value)
          {
            v49 = (const void *)(v39 + 24);
            goto LABEL_48;
          }
        }
        keypath_value = 0;
      }
      else
      {
        v42 = v97;
        if (a12 && a14)
        {
          if (*(_BYTE *)(a12 + 12) == 56
            && ((v46 = *(_DWORD *)(a12 + 16), v46 >= 0x18) ? (v44 = 24) : (v44 = v46), (_DWORD)v44))
          {
            memcpy(&__dst, (const void *)(a12 + 24), 8 * v44);
            v42 = v97;
          }
          else
          {
            v44 = 0;
          }
          if (*(_BYTE *)(a14 + 12) == 56
            && ((v52 = *(_DWORD *)(a14 + 16), v52 >= 0x18) ? (keypath_value = 24) : (keypath_value = v52),
                (_DWORD)keypath_value))
          {
            memcpy(&v102, (const void *)(a14 + 24), 8 * keypath_value);
            v42 = v97;
          }
          else
          {
            keypath_value = 0;
          }
          if (v44 >= keypath_value)
            v53 = keypath_value;
          else
            v53 = v44;
          if (v53)
          {
            v54 = &v102;
            p_dst = &__dst;
            do
            {
              v56 = p_dst->f64[0];
              p_dst = (float64x2_t *)((char *)p_dst + 8);
              v54->f64[0] = v54->f64[0] + v56;
              v54 = (float64x2_t *)((char *)v54 + 8);
              --v53;
            }
            while (v53);
          }
        }
        else if (v39 && a14)
        {
          if (*(_BYTE *)(a14 + 12) == 56
            && ((v50 = *(_DWORD *)(a14 + 16), v50 >= 0x18) ? (v44 = 24) : (v44 = v50), (_DWORD)v44))
          {
            v51 = v39;
            memcpy(&__dst, (const void *)(a14 + 24), 8 * v44);
            v39 = v51;
            v42 = v97;
          }
          else
          {
            v44 = 0;
          }
          if (*(_BYTE *)(v39 + 12) == 56
            && ((v59 = *(_DWORD *)(v39 + 16), v59 >= 0x18) ? (keypath_value = 24) : (keypath_value = v59),
                (_DWORD)keypath_value))
          {
            memcpy(&v102, (const void *)(v39 + 24), 8 * keypath_value);
            v42 = v97;
          }
          else
          {
            keypath_value = 0;
          }
          if (v44 >= keypath_value)
            v60 = keypath_value;
          else
            v60 = v44;
          if (v60)
          {
            v61 = &__dst;
            v62 = &v102;
            do
            {
              v63 = v62->f64[0];
              v62 = (float64x2_t *)((char *)v62 + 8);
              v61->f64[0] = v63 - v61->f64[0];
              v61 = (float64x2_t *)((char *)v61 + 8);
              --v60;
            }
            while (v60);
          }
        }
        else if (a12)
        {
          if (*(_BYTE *)(a12 + 12) == 56
            && ((LODWORD(v57) = *(_DWORD *)(a12 + 16), v57 >= 0x18)
              ? (v57 = 24)
              : (v57 = v57),
                (_DWORD)v57))
          {
            v58 = v57;
            memcpy(&__dst, (const void *)(a12 + 24), 8 * v57);
          }
          else
          {
            v58 = 0;
          }
          keypath_value = CA::Render::Layer::get_keypath_value(a6, (unint64_t *)a1 + 12, 0x18uLL, v102.f64, 0);
          v42 = v97;
          v44 = v58;
        }
        else
        {
          if (v39)
          {
            v84 = v39;
            v44 = CA::Render::Layer::get_keypath_value(a6, (unint64_t *)a1 + 12, 0x18uLL, __dst.f64, 0);
            if (*(_BYTE *)(v84 + 12) != 56
              || ((v85 = *(_DWORD *)(v84 + 16), v85 >= 0x18) ? (keypath_value = 24) : (keypath_value = v85),
                  !(_DWORD)keypath_value))
            {
              keypath_value = 0;
              goto LABEL_49;
            }
            v49 = (const void *)(v84 + 24);
LABEL_48:
            memcpy(&v102, v49, 8 * keypath_value);
LABEL_49:
            v42 = v97;
            goto LABEL_98;
          }
          if (!a14)
            return;
          v90 = CA::Render::Layer::get_keypath_value(a6, (unint64_t *)a1 + 12, 0x18uLL, __dst.f64, 0);
          v42 = v97;
          v44 = v90;
          keypath_value = 0;
          if (*(_BYTE *)(a14 + 12) == 56)
          {
            v91 = *(_DWORD *)(a14 + 16);
            if (v91 >= 0x18)
              keypath_value = 24;
            else
              keypath_value = v91;
            if ((_DWORD)keypath_value)
            {
              memcpy(&v102, (const void *)(a14 + 24), 8 * keypath_value);
              v42 = v97;
            }
            else
            {
              keypath_value = 0;
            }
          }
          if (v44 >= keypath_value)
            v92 = keypath_value;
          else
            v92 = v44;
          if (v92)
          {
            v93 = &v102;
            v94 = &__dst;
            do
            {
              v95 = v94->f64[0];
              v94 = (float64x2_t *)((char *)v94 + 8);
              v93->f64[0] = v93->f64[0] + v95;
              v93 = (float64x2_t *)((char *)v93 + 8);
              --v92;
            }
            while (v92);
          }
        }
      }
LABEL_98:
      v64 = 0.0;
      v65 = 0.00833333333;
      position_range = INFINITY;
      if (v98 > 399)
      {
        if (v98 <= 489)
        {
          if (v98 == 400)
            goto LABEL_121;
          if (v98 != 429)
            goto LABEL_131;
          v69 = v42 - 1;
          v70 = HIDWORD(v126);
          goto LABEL_161;
        }
        if (v98 == 490 || v98 == 492)
          goto LABEL_121;
        if (v98 != 557)
          goto LABEL_131;
        position_range = INFINITY;
        if (v42 == 1)
        {
          if (v44 == 16 && keypath_value == 16)
          {
            if (!CA::Mat4Impl::mat4_is_translation((CA::Mat4Impl *)&__dst, v38)
              || !CA::Mat4Impl::mat4_is_translation((CA::Mat4Impl *)&v102, v67)
              || *(double *)&v121 != *(double *)&v109)
            {
              goto LABEL_128;
            }
            v68 = vmulq_f64(*a7, vsubq_f64(v108, v120));
            v41 = (__n128)vmulq_f64(v68, v68);
            position_range = sqrt(vaddvq_f64((float64x2_t)v41));
LABEL_162:
            v64 = 0.5;
          }
        }
        else if (v42 && HIDWORD(v126) == 561)
        {
          v69 = v42 - 2;
LABEL_160:
          v70 = v127;
LABEL_161:
          position_range = CA::Render::get_position_range(v70, v69, v44, keypath_value, a7->f64[0], a7->f64[1], __dst.f64[0], __dst.f64[1], v102.f64[0], v102.f64[1]);
          goto LABEL_162;
        }
      }
      else
      {
        if (v98 > 71)
        {
          if (v98 != 72)
          {
            if (v98 == 117)
            {
              position_range = 1.0;
              v64 = 0.00392156863;
LABEL_130:
              v65 = dbl_18474E7F0[(a4 - 1) < 0x4F];
              goto LABEL_131;
            }
            if (v98 != 131)
              goto LABEL_131;
LABEL_121:
            position_range = vabdd_f64(__dst.f64[0], v102.f64[0]);
            v64 = 0.00392156863;
            if (v44 >= 2)
            {
              v71 = v44 - 1;
              v72 = &v102.f64[1];
              v73 = &__dst.f64[1];
              do
              {
                v74 = *v73++;
                v75 = v74;
                v76 = *v72++;
                position_range = fmax(position_range, vabdd_f64(v75, v76));
                --v71;
              }
              while (v71);
            }
            goto LABEL_130;
          }
          v69 = v42 - 2;
          if (v42 < 2)
          {
            position_range = INFINITY;
            if (v42 == 1 && v44 >= 4 && keypath_value >= 4)
            {
              v86 = vmulq_f64(*a7, vsubq_f64(v102, __dst));
              v87 = (int64x2_t)vmulq_f64(v86, v86);
              v88 = vmulq_f64(vsubq_f64(v103, v115), *a7);
              v89 = (int64x2_t)vmulq_f64(v88, v88);
              v41 = (__n128)vsqrtq_f64(vaddq_f64((float64x2_t)vzip2q_s64(v87, v89), (float64x2_t)vzip1q_s64(v87, v89)));
              position_range = v41.n128_f64[1];
              v64 = 0.5;
              if (v41.n128_f64[0] > v41.n128_f64[1])
                position_range = v41.n128_f64[0];
            }
            goto LABEL_131;
          }
          if (HIDWORD(v126) != 502 && HIDWORD(v126) != 407)
          {
LABEL_128:
            position_range = INFINITY;
            goto LABEL_131;
          }
          goto LABEL_160;
        }
        if (v98 == 52 || v98 == 64)
          goto LABEL_121;
      }
LABEL_131:
      if ((*(_QWORD *)&position_range & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        v77 = fabsf(a10);
        v41.n128_f64[0] = v64 / position_range;
        if (v100)
          v41.n128_f64[0] = -(v64 / position_range);
        v78 = *((_QWORD *)a1 + 5);
        if (v78 && *(float *)(v78 + 16) < 0.0)
          v41.n128_f64[0] = -v41.n128_f64[0];
        v79 = (v65 + -0.00208333333) * v77;
        v80 = v101;
        v81 = (*(double (**)(CA::Render::Animation *, __n128, double))(*(_QWORD *)a1 + 176))(a1, v41, v101)
            + v80;
        if (v81 > 1.0)
          v81 = 1.0;
        if (v81 < 0.0)
          v81 = 0.0;
        v99 = v81;
        if (v29)
          v99 = (*(double (**)(uint64_t))(v29 + 16))(v29);
        CA::Render::Animation::inverse_map_time((uint64_t)a1, &v99, a9);
        v82 = fmax(v99 + -0.00208333333, v79 + a9);
        v83 = v82 < a11;
        if (a10 <= 0.0)
          v83 = v82 > a11;
        if (v83)
          *v96 = v82;
        if (position_range != 0.0)
          *v30 |= v37;
      }
    }
  }
}

uint64_t CA::Render::Timing::map_time(CA::Render::Timing *this, double *a2, unsigned int *a3)
{
  uint64_t v6;

  v6 = CA::Render::Timing::map_parent_to_active(this, a2, 0);
  if ((v6 & 1) != 0)
  {
    CA::Render::Timing::map_active_to_local((uint64_t)this, a2, a3);
  }
  else if (a3)
  {
    *a3 = 0;
  }
  return v6;
}

uint64_t CA::Render::Animation::map_time(CA::Render::Animation *this, double *a2, int *a3, BOOL *a4, BOOL *a5)
{
  double *v7;
  float v10;
  uint64_t result;
  uint64_t v12;
  double v13;
  int v14;
  const double *v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v7 = (double *)*((_QWORD *)this + 5);
  if (!v7)
  {
    if (a3)
      *a3 = 0;
    return 1;
  }
  v10 = *((float *)this + 8);
  if (v10 != 0.0 && (*((_BYTE *)this + 13) & 0x80) != 0)
    *a2 = floor((*a2 - v7[5]) * v10) / v10 + v7[5];
  result = CA::Render::Timing::map_parent_to_active((CA::Render::Timing *)v7, a2, a5);
  if ((_DWORD)result)
  {
    v12 = *((_QWORD *)this + 5);
    if (a3)
    {
      v13 = *(double *)(v12 + 32);
      if ((*(_BYTE *)(v12 + 13) & 1) != 0)
        v13 = v13 + v13;
      if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        v14 = 0;
      else
        v14 = vcvtmd_s64_f64(*a2 / v13);
      *a3 = v14;
    }
    v20 = 0;
    CA::Render::Timing::map_active_to_local(v12, a2, &v20);
    v16 = *((_QWORD *)this + 5);
    if (a4 && (*(_BYTE *)(v16 + 13) & 1) != 0)
      *a4 = v20 & 1;
    v17 = *(double *)(v16 + 32);
    v18 = *a2 / v17;
    *a2 = v18;
    v19 = *((_QWORD *)this + 6);
    if (v19)
    {
      if (*(_DWORD *)(v19 + 16) == 4)
        *a2 = CA::Render::TimingFunction::evaluate((CA::Render::TimingFunction *)(v19 + 24), v15, v18, 0.001 / v17);
    }
    return 1;
  }
  return result;
}

uint64_t CA::Render::Timing::map_active_to_local(uint64_t this, double *a2, unsigned int *a3)
{
  double v3;
  double v4;
  double v5;
  BOOL v6;
  double v7;
  double v8;

  v3 = *a2;
  v4 = *(double *)(this + 32);
  v5 = 0.0;
  if ((*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || (v3 >= 0.0 ? (v6 = v3 < v4) : (v6 = 0), v6))
  {
    v7 = 0.0;
  }
  else
  {
    v7 = floor(v3 / v4);
    v3 = v3 - v7 * v4;
    if ((*(_BYTE *)(this + 13) & 1) != 0 && ((int)v7 & 1) != 0)
    {
      v3 = v4 - v3;
      v8 = v4 + -0.000001;
      if (v3 >= v8)
        v3 = v8;
    }
  }
  if ((*(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    *a2 = v3;
    v5 = v7;
  }
  if (a3)
    *a3 = (int)v5;
  return this;
}

uint64_t CA::Render::Timing::map_parent_to_active(CA::Render::Timing *this, double *a2, BOOL *a3)
{
  int v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  BOOL v12;
  double v13;

  v6 = *((_DWORD *)this + 3);
  v7 = *a2;
  v8 = *((double *)this + 5);
  v9 = CA::Render::Timing::end_time(this);
  if ((v6 & 0x400) == 0 && v7 < v8 || (v6 & 0x200) == 0 && v7 > v9)
    return 0;
  if (v7 >= v8)
    v10 = v7;
  else
    v10 = v8;
  v11 = v9 + -0.000001;
  if (v10 <= v11)
    v11 = v10;
  v12 = v11 != v7;
  v13 = *((double *)this + 6) + (v11 - v8) * *((float *)this + 4);
  if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0;
  *a2 = v13;
  if (a3)
    *a3 = v12;
  return 1;
}

double CA::Render::Timing::end_time(CA::Render::Timing *this)
{
  int v1;
  float v2;
  double v3;
  double result;
  double v5;
  double v6;
  double v7;

  v1 = *((_DWORD *)this + 3);
  if ((v1 & 0x1000) != 0)
    return *((double *)this + 7);
  v2 = *((float *)this + 4);
  if (v2 != 0.0)
  {
    v5 = 1.0;
    if (v2 == 1.0)
    {
      if ((v1 & 0x800) == 0)
      {
LABEL_7:
        v7 = *((double *)this + 3);
        v6 = *((double *)this + 4);
        if ((v1 & 0x100) != 0)
          v6 = v6 + v6;
        if (v7 > 0.0)
          v6 = v6 * v7;
        goto LABEL_13;
      }
    }
    else
    {
      v5 = fabsf(1.0 / v2);
      if ((v1 & 0x800) == 0)
        goto LABEL_7;
    }
    v6 = *((double *)this + 3);
LABEL_13:
    v3 = v6 * v5;
    goto LABEL_14;
  }
  v3 = INFINITY;
LABEL_14:
  result = v3 + *((double *)this + 5);
  *((double *)this + 7) = result;
  *((_DWORD *)this + 3) = v1 | 0x1000;
  return result;
}

double CA::Render::TimingFunction::evaluate(CA::Render::TimingFunction *this, const double *a2, double a3, double a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  int v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  int v14;
  double v16;

  v4 = *(double *)this * 3.0;
  v5 = (*((double *)this + 2) - *(double *)this) * 3.0;
  v6 = v5 - v4;
  v7 = 1.0 - v5;
  v8 = 8;
  v9 = a3;
  while (1)
  {
    v10 = -(a3 - (v4 + (v6 + v9 * v7) * v9) * v9);
    if (fabs(v10) < a4)
      break;
    v11 = v4 + (v6 + v6 + v7 * 3.0 * v9) * v9;
    if (fabs(v11) >= 0.000001)
    {
      v9 = v9 - v10 / v11;
      if (--v8)
        continue;
    }
    v9 = 0.0;
    if (a3 >= 0.0)
    {
      v9 = 1.0;
      if (a3 <= 1.0)
      {
        v12 = 0.0;
        v13 = 1.0;
        v14 = -1025;
        v9 = a3;
        do
        {
          if (__CFADD__(v14++, 1))
            break;
          v16 = -(a3 - (v4 + (v6 + v9 * v7) * v9) * v9);
          if (fabs(v16) < a4)
            break;
          if (v16 >= 0.0)
            v13 = v9;
          else
            v12 = v9;
          v9 = v12 + (v13 - v12) * 0.5;
        }
        while (v12 < v13);
      }
    }
    return (*((double *)this + 1) * 3.0
          + ((*((double *)this + 3) - *((double *)this + 1)) * 3.0
           - *((double *)this + 1) * 3.0
           + v9 * (1.0 - (*((double *)this + 3) - *((double *)this + 1)) * 3.0))
          * v9)
         * v9;
  }
  return (*((double *)this + 1) * 3.0
        + ((*((double *)this + 3) - *((double *)this + 1)) * 3.0
         - *((double *)this + 1) * 3.0
         + v9 * (1.0 - (*((double *)this + 3) - *((double *)this + 1)) * 3.0))
        * v9)
       * v9;
}

uint64_t CA::Render::Timing::inverse_map_time(uint64_t this, double *a2, double a3)
{
  double v3;
  float v4;
  double v5;
  double v6;
  double v7;
  float v8;

  v3 = *(double *)(this + 32);
  if ((*(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    v4 = *(float *)(this + 16);
  }
  else
  {
    v4 = *(float *)(this + 16);
    v5 = floor((*(double *)(this + 48) + (a3 - *(double *)(this + 40)) * v4) / v3);
    v6 = *a2;
    if ((*(_BYTE *)(this + 13) & 1) != 0 && ((int)v5 & 1) != 0)
      v6 = v3 - v6;
    v7 = v6 + v5 * v3;
    if ((*(_QWORD *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      *a2 = v7;
  }
  if (v4 == 0.0
    || (v4 != 1.0 ? (v8 = 1.0 / v4) : (v8 = v4),
        a3 = *(double *)(this + 40) + (*a2 - *(double *)(this + 48)) * v8,
        (*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL))
  {
    *a2 = a3;
  }
  return this;
}

uint64_t CA::Render::Animation::inverse_map_time(uint64_t this, double *a2, double a3)
{
  uint64_t v3;
  double v6;
  uint64_t v7;
  double v8;

  v3 = *(_QWORD *)(this + 40);
  if (v3)
  {
    v6 = *(double *)(v3 + 32);
    v7 = *(_QWORD *)(this + 48);
    if (v7)
    {
      v8 = *a2;
      if (*(_DWORD *)(v7 + 16) == 4)
        v8 = CA::Render::TimingFunction::evaluate_inverse((CA::Render::TimingFunction *)(v7 + 24), a2, v8, 0.001 / v6);
    }
    else
    {
      v8 = *a2;
    }
    *a2 = v8 * v6;
    return CA::Render::Timing::inverse_map_time(v3, a2, a3);
  }
  return this;
}

void CA::Render::MatchPropertyAnimation::apply(CA::Render::MatchPropertyAnimation *this, CA::Render::AnimationEvaluator *a2, double a3)
{
  unint64_t v3;
  CA::Render::LayerNode *v5;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  CA::Render::LayerNode *v11;
  void *const *v12;
  CA::Render::Layer *v13;
  CA::Render::Layer *v14;
  void *const *v15;
  void *const *keypath_object;
  CA::Render::Vector *keypath_value;
  double *v18;
  _OWORD v19[12];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 16);
  if (v3)
  {
    v5 = (CA::Render::LayerNode *)*((_QWORD *)a2 + 4);
    if (v5)
    {
      v7 = *((_QWORD *)a2 + 3);
      v8 = *(_QWORD **)(v7 + 808);
      v9 = *(_QWORD **)(v7 + 800);
      while (v8 != v9)
      {
        v8 -= 5;
        v10 = std::__hash_table<std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::__unordered_map_hasher<CA::Render::Object *,std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::hash<CA::Render::Object *>,std::equal_to<CA::Render::Object *>,true>,std::__unordered_map_equal<CA::Render::Object *,std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::equal_to<CA::Render::Object *>,std::hash<CA::Render::Object *>,true>,std::allocator<std::__hash_value_type<CA::Render::Object *,x_link_struct>>>::find<CA::Render::Object *>(v8, v3);
        if (v10)
        {
          v11 = (CA::Render::LayerNode *)v10[3];
          goto LABEL_8;
        }
      }
      v11 = 0;
LABEL_8:
      CA::Render::Update::mark_root_dependence((CA::Render::LayerNode *)(*(unsigned int *)(v7 + 1064) | ((unint64_t)*(unsigned __int16 *)(v7 + 1068) << 32)), v11, v5);
      if (v11)
      {
        v13 = (CA::Render::Layer *)*((_QWORD *)v11 + 4);
        v14 = (CA::Render::Layer *)*((_QWORD *)a2 + 5);
        if (CA::Render::Layer::keypath_is_object(v14, (const CA::Render::Layer **)this + 15, v12))
        {
          keypath_object = (void *const *)CA::Render::Layer::get_keypath_object(v13, (const CA::Render::Layer **)this + 15, v15);
          CA::Render::Layer::set_keypath_object(v14, (const CA::Render::Layer **)this + 15, keypath_object);
        }
        else
        {
          memset(v19, 0, sizeof(v19));
          v18 = 0;
          keypath_value = (CA::Render::Vector *)CA::Render::Layer::get_keypath_value(v13, (unint64_t *)this + 15, 0x18uLL, (double *)v19, &v18);
          if (keypath_value)
          {
            CA::Render::Layer::set_keypath_value(v14, (unint64_t *)this + 15, (const unsigned int *)((*((_DWORD *)this + 3) >> 9) & 1), keypath_value, v18);
            if (v18 != (double *)v19)
              free(v18);
          }
        }
      }
    }
  }
}

uint64_t CA::Render::Layer::get_keypath_value(CA::Render::Layer *this, unint64_t *size, unint64_t a3, double *a4, double **a5)
{
  unint64_t v5;
  unint64_t v10;
  uint64_t property_value;
  size_t v12;
  _DWORD *v13;
  float v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _DWORD *v20;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x1E0C80C00];
  v5 = *size;
  if (!*size)
    return 0;
  if ((v5 & 1) != 0)
  {
    v10 = 1;
LABEL_6:
    MEMORY[0x1E0C80A78](this);
    v13 = (_DWORD *)((char *)v21 - ((v12 + 15) & 0x7FFFFFFF0));
    bzero(v13, v12);
LABEL_7:
    if ((v5 & 1) != 0)
    {
      *v13 = v5 >> 1;
    }
    else
    {
      v15 = *(unsigned int *)v5;
      if ((_DWORD)v15)
      {
        v16 = 0;
        v17 = 4 * v15;
        do
        {
          v13[v16 / 4] = *(_DWORD *)(v5 + 4 + v16);
          v16 += 4;
        }
        while (v17 != v16);
      }
    }
    goto LABEL_13;
  }
  v10 = *(unsigned int *)v5;
  if (v10 - 0x10000 < 0xFFFFFFFFFFFF0001)
    return 0;
  if (v10 <= 0x400)
    goto LABEL_6;
  v20 = malloc_type_malloc(4 * v10, 0x100004052888210uLL);
  if (!v20)
    return 0;
  v13 = v20;
  v5 = *size;
  if (*size)
    goto LABEL_7;
LABEL_13:
  property_value = CA::Render::Layer::get_property_value(this, v13, v10, a3, a4, a5, v14);
  if (v10 >= 0x401)
    free(v13);
  return property_value;
}

uint64_t CA::Render::Layer::get_property_value(CA::Render::Layer *this, const unsigned int *a2, uint64_t a3, unint64_t a4, double *a5, double **a6, float a7)
{
  unsigned int *v11;
  CA::Render::Layer *v12;
  unsigned int named_object;
  unsigned int v14;
  uint64_t result;
  int *v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  CA::Render *v29;
  double *v30;
  int v31;
  uint64_t v32;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v49;
  float64x2_t v50;
  uint64_t v52;
  uint64_t v53;
  float32x2_t *v54;
  float32x2_t v55;
  float32x2_t v56;
  unsigned int v57;
  float32x2_t *v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float v64;
  float32x2_t *v65;
  float64x2_t v66;
  float64x2_t v67;
  unsigned int v68;
  uint64_t v70;
  float64x2_t v71;
  double v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  float32x2_t *v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  float32x2_t *v82;
  float64x2_t v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _OWORD *v89;
  __int128 *v90;
  __int128 *v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  __int128 *v106;
  unsigned int v107;
  __int128 *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  double v120;
  __int128 v121;
  float64x2_t v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  v11 = (unsigned int *)(a2 + 1);
  if (a6)
    goto LABEL_14;
  while (1)
  {
    v16 = (int *)(v11 - 1);
    if (!a3)
      goto LABEL_161;
    v17 = a3 - 1;
    if (a3 == 1)
    {
      v31 = *v16;
      if (*v16 <= 325)
      {
        if (v31 > 118)
        {
          if (v31 <= 181)
          {
            switch(v31)
            {
              case 119:
                v32 = *((_QWORD *)this + 16);
                __asm { FMOV            V1.2D, #1.0 }
                _Q0 = 0uLL;
                if (!v32)
                  goto LABEL_259;
                v38 = *(_QWORD *)(v32 + 48);
                if (!v38)
                  goto LABEL_259;
                goto LABEL_195;
              case 123:
                v79 = *((_QWORD *)this + 16);
                if (!v79)
                  goto LABEL_248;
                v64 = *(float *)(v79 + 256);
                goto LABEL_275;
              case 129:
                v80 = (unsigned __int16)*((_DWORD *)this + 9) >> 12;
                goto LABEL_200;
              case 130:
                v81 = *((_QWORD *)this + 16);
                if (!v81)
                  goto LABEL_257;
                v64 = *(float *)(v81 + 260);
                goto LABEL_275;
              case 131:
                v82 = (float32x2_t *)*((_QWORD *)this + 16);
                if (v82)
                {
                  _Q0 = vcvtq_f64_f32(v82[33]);
                  v83 = vcvtq_f64_f32(v82[34]);
                }
                else
                {
                  __asm { FMOV            V0.2D, #1.0 }
                  v83 = _Q0;
                }
                goto LABEL_260;
              case 133:
                v84 = *((_QWORD *)this + 16);
                __asm { FMOV            V1.2D, #1.0 }
                _Q0 = 0uLL;
                if (!v84)
                  goto LABEL_259;
                v38 = *(_QWORD *)(v84 + 40);
                if (!v38)
                  goto LABEL_259;
LABEL_195:
                v85 = *(_DWORD *)(v38 + 16);
                _Q1 = 0uLL;
                goto LABEL_213;
              case 134:
                v86 = *((_QWORD *)this + 16);
                if (v86)
                {
                  v64 = *(float *)(v86 + 280);
                  goto LABEL_275;
                }
                LOBYTE(a7) = *((_BYTE *)this + 34);
                break;
              case 136:
                v87 = *((_QWORD *)this + 16);
                if (!v87)
                  goto LABEL_257;
                v80 = *(_BYTE *)(v87 + 320) & 1;
LABEL_200:
                v40 = (double)v80;
                goto LABEL_276;
              case 137:
                if (a4 < 6)
                  return 0;
                v88 = *((_QWORD *)this + 16);
                v89 = (_OWORD *)MEMORY[0x1E0C9BAA8];
                v90 = (__int128 *)(MEMORY[0x1E0C9BAA8] + 16);
                v91 = (__int128 *)(MEMORY[0x1E0C9BAA8] + 32);
                if (v88)
                {
                  v92 = *(_QWORD *)(v88 + 32);
                  if (v92)
                  {
                    v90 = (__int128 *)(MEMORY[0x1E0C9BAA8] + 16);
                    v91 = (__int128 *)(v92 + 56);
                    if (*(_DWORD *)(v92 + 16) >= 6u)
                      v90 = (__int128 *)(v92 + 40);
                    else
                      v91 = (__int128 *)(MEMORY[0x1E0C9BAA8] + 32);
                    if (*(_DWORD *)(v92 + 16) >= 6u)
                      v89 = (_OWORD *)(v92 + 24);
                  }
                }
                v93 = *v90;
                v94 = *v91;
                *(_OWORD *)a5 = *v89;
                *((_OWORD *)a5 + 1) = v93;
                *((_OWORD *)a5 + 2) = v94;
                return 6;
              case 142:
                v95 = *((_QWORD *)this + 16);
                _Q1 = 0uLL;
                __asm { FMOV            V0.2D, #0.5 }
                if (!v95)
                  goto LABEL_259;
                v38 = *(_QWORD *)(v95 + 64);
                if (!v38)
                  goto LABEL_259;
                v85 = *(_DWORD *)(v38 + 16);
                _Q0 = 0uLL;
LABEL_213:
                if (v85 >= 4)
                {
                  _Q0 = *(float64x2_t *)(v38 + 24);
                  _Q1 = vsubq_f64(*(float64x2_t *)(v38 + 40), _Q0);
                }
                goto LABEL_259;
              case 145:
                v96 = *((_QWORD *)this + 16);
                if (!v96)
                  return 0;
                result = 0;
                if (a4 < 8)
                  return result;
                v97 = *(_QWORD *)(v96 + 72);
                if (!v97)
                  return result;
                if (*(_DWORD *)(v97 + 16) != 8)
                  return 0;
                v98 = *(_OWORD *)(v97 + 24);
                v99 = *(_OWORD *)(v97 + 40);
                v100 = *(_OWORD *)(v97 + 72);
                *((_OWORD *)a5 + 2) = *(_OWORD *)(v97 + 56);
                *((_OWORD *)a5 + 3) = v100;
                *(_OWORD *)a5 = v98;
                *((_OWORD *)a5 + 1) = v99;
                return 8;
              case 146:
                v101 = *((_QWORD *)this + 16);
                v64 = 0.0;
                if (v101)
                  v64 = *(float *)(v101 + 228);
                goto LABEL_275;
              default:
                goto LABEL_161;
            }
LABEL_274:
            v64 = (float)LODWORD(a7);
            goto LABEL_275;
          }
          if (v31 > 250)
          {
            if (v31 == 251)
            {
              _ZF = (*((_QWORD *)this + 5) & 0x100) == 0;
            }
            else
            {
              if (v31 != 325)
                goto LABEL_161;
              _ZF = (*((_QWORD *)this + 5) & 0x80) == 0;
            }
          }
          else
          {
            if (v31 != 182)
            {
              if (v31 != 241)
                goto LABEL_161;
              v63 = *((_QWORD *)this + 16);
              if (!v63)
              {
LABEL_248:
                v40 = 1.0;
                goto LABEL_276;
              }
              v64 = *(float *)(v63 + 292);
LABEL_275:
              v40 = v64;
              goto LABEL_276;
            }
            _ZF = (*((_QWORD *)this + 5) & 0x400) == 0;
          }
LABEL_243:
          v40 = 0.0;
          if (!_ZF)
            v40 = 1.0;
          goto LABEL_276;
        }
        if (v31 > 51)
        {
          switch(v31)
          {
            case '@':
              v65 = (float32x2_t *)*((_QWORD *)this + 16);
              if (!v65)
                goto LABEL_234;
              v55 = v65[30];
              v56 = v65[31];
              goto LABEL_139;
            case 'A':
              v118 = *((_QWORD *)this + 16);
              if (!v118)
                goto LABEL_257;
              v64 = *(float *)(v118 + 232);
              goto LABEL_275;
            case 'B':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
              goto LABEL_161;
            case 'C':
              v119 = *((_QWORD *)this + 16);
              if (!v119)
                goto LABEL_257;
              v64 = *(float *)(v119 + 236);
              goto LABEL_275;
            case 'H':
              _Q0 = *((float64x2_t *)this + 4);
              _Q1 = *((float64x2_t *)this + 5);
LABEL_259:
              v83 = vaddq_f64(_Q0, _Q1);
LABEL_260:
              *(float64x2_t *)a5 = _Q0;
              *((float64x2_t *)a5 + 1) = v83;
              return 4;
            default:
              if (v31 == 52)
              {
                *(float64x2_t *)a5 = vcvtq_f64_f32(*(float32x2_t *)((char *)this + 16));
                v67 = vcvtq_f64_f32(*(float32x2_t *)((char *)this + 24));
                goto LABEL_262;
              }
              if (v31 != 53)
                goto LABEL_161;
              v75 = *((_QWORD *)this + 16);
              if (v75)
                v71 = *(float64x2_t *)(v75 + 152);
              else
                v71 = 0uLL;
              break;
          }
          goto LABEL_280;
        }
        if (v31 == 12)
        {
          v72 = 0.0;
          if ((*((_QWORD *)this + 5) & 0x4000000) != 0)
            v72 = 1.0;
          *a5 = v72;
          a3 = 1;
          goto LABEL_161;
        }
        if (v31 == 25)
        {
          v74 = *((_QWORD *)this + 16);
          if (v74)
          {
            v71 = *(float64x2_t *)(v74 + 168);
          }
          else
          {
            v120 = 0.0;
            if ((*((_BYTE *)this + 45) & 0x40) == 0)
              v120 = 0.5;
            v71 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v120, 0);
          }
          goto LABEL_280;
        }
        if (v31 != 26)
          goto LABEL_161;
        v59 = *((_QWORD *)this + 16);
        if (v59)
        {
          v40 = *(double *)(v59 + 184);
          goto LABEL_276;
        }
        goto LABEL_257;
      }
      if (v31 <= 489)
      {
        if (v31 > 432)
        {
          switch(v31)
          {
            case 440:
              _ZF = (*((_QWORD *)this + 5) & 0x800000000) == 0;
              goto LABEL_243;
            case 441:
            case 442:
            case 443:
            case 444:
              goto LABEL_161;
            case 445:
              _ZF = (*((_QWORD *)this + 5) & 0x200000) == 0;
              goto LABEL_243;
            case 446:
              _ZF = (*((_QWORD *)this + 5) & 0x400000) == 0;
              goto LABEL_243;
            case 447:
              v109 = *((_QWORD *)this + 16);
              if (v109)
              {
                v64 = *(float *)(v109 + 284);
                goto LABEL_275;
              }
              LOBYTE(a7) = *((_BYTE *)this + 35);
              break;
            default:
              switch(v31)
              {
                case 466:
                  v53 = *((_QWORD *)this + 16);
                  if (!v53)
                    goto LABEL_234;
                  v54 = (float32x2_t *)(v53 + 300);
                  v55 = *v54;
                  v56 = v54[1];
                  goto LABEL_139;
                case 467:
                  v110 = *((_QWORD *)this + 16);
                  if (!v110)
                    goto LABEL_257;
                  v64 = *(float *)(v110 + 316);
                  goto LABEL_275;
                case 468:
                  _ZF = (*((_QWORD *)this + 5) & 0x1000000000) == 0;
                  goto LABEL_243;
                case 469:
                  v111 = *((_QWORD *)this + 16);
                  if (!v111)
                    goto LABEL_257;
                  v64 = *(float *)(v111 + 296);
                  goto LABEL_275;
                default:
                  if (v31 != 433)
                    goto LABEL_161;
                  _ZF = (*((_QWORD *)this + 5) & 0x800000) == 0;
                  goto LABEL_243;
              }
          }
          goto LABEL_274;
        }
        if (v31 <= 380)
        {
          if (v31 == 326)
          {
            _ZF = (*((_QWORD *)this + 5) & 0x200000000) == 0;
          }
          else
          {
            if (v31 != 369)
              goto LABEL_161;
            _ZF = (*((_QWORD *)this + 5) & 0x40) == 0;
          }
          goto LABEL_243;
        }
        if (v31 != 381)
        {
          if (v31 != 400)
          {
            if (v31 != 429)
              goto LABEL_161;
            *a5 = *((double *)this + 6);
            a5[1] = *((double *)this + 7);
            v61 = *((_QWORD *)this + 16);
            if (v61)
              v62 = *(_QWORD *)(v61 + 192);
            else
              v62 = 0;
            *((_QWORD *)a5 + 2) = v62;
            return 3;
          }
          LOBYTE(a7) = *((_BYTE *)this + 32);
LABEL_179:
          v64 = (float)LODWORD(a7) * 0.0039216;
          goto LABEL_275;
        }
        v76 = *((_QWORD *)this + 16);
        if (v76)
        {
          v64 = *(float *)(v76 + 288);
          goto LABEL_275;
        }
LABEL_257:
        v40 = 0.0;
        goto LABEL_276;
      }
      if (v31 <= 534)
      {
        switch(v31)
        {
          case 490:
            v58 = (float32x2_t *)*((_QWORD *)this + 16);
            if (v58)
            {
              v55 = v58[25];
              v56 = v58[26];
LABEL_139:
              v66 = vcvtq_f64_f32(v55);
              v67 = vcvtq_f64_f32(v56);
            }
            else
            {
LABEL_234:
              v67 = (float64x2_t)xmmword_18474DF50;
              v66 = 0uLL;
            }
            *(float64x2_t *)a5 = v66;
LABEL_262:
            *((float64x2_t *)a5 + 1) = v67;
            return 4;
          case 491:
            v77 = (float32x2_t *)*((_QWORD *)this + 16);
            if (v77)
              v71 = vcvtq_f64_f32(v77[27]);
            else
              v71 = (float64x2_t)xmmword_18474E0D0;
            goto LABEL_280;
          case 492:
            LOBYTE(a7) = *((_BYTE *)this + 33);
            goto LABEL_179;
          case 494:
            _ZF = (*((_QWORD *)this + 5) & 0x400000000) == 0;
            goto LABEL_243;
          case 495:
            v78 = *((_QWORD *)this + 16);
            if (v78)
            {
              v64 = *(float *)(v78 + 224);
              goto LABEL_275;
            }
            v40 = 3.0;
            break;
          case 497:
            _ZF = (*((_QWORD *)this + 5) & 0x40000) == 0;
            goto LABEL_243;
          case 498:
            _ZF = (*((_QWORD *)this + 5) & 0x80000) == 0;
            goto LABEL_243;
          case 499:
            _ZF = (*((_QWORD *)this + 5) & 0x100000) == 0;
            goto LABEL_243;
          default:
            goto LABEL_161;
        }
        goto LABEL_276;
      }
      switch(v31)
      {
        case 535:
          v102 = *((_QWORD *)this + 16);
          if (v102)
          {
            v103 = (uint64_t *)(v102 + 24);
LABEL_227:
            v105 = *v103;
            v106 = &CA::Mat4Impl::mat4_identity_double;
            if (v105)
            {
              v107 = *(_DWORD *)(v105 + 16);
              v108 = (__int128 *)(v105 + 24);
              if (v107 > 0xF)
                v106 = v108;
            }
LABEL_250:
            if (a4 >= 0x10)
            {
              v112 = v106[1];
              v113 = v106[2];
              v114 = v106[3];
              *(_OWORD *)a5 = *v106;
              *((_OWORD *)a5 + 1) = v112;
              *((_OWORD *)a5 + 2) = v113;
              *((_OWORD *)a5 + 3) = v114;
              v115 = v106[5];
              v116 = v106[6];
              v117 = v106[7];
              *((_OWORD *)a5 + 4) = v106[4];
              *((_OWORD *)a5 + 5) = v115;
              *((_OWORD *)a5 + 6) = v116;
              *((_OWORD *)a5 + 7) = v117;
              return 16;
            }
            return 0;
          }
          break;
        case 557:
          v104 = *((_QWORD *)this + 16);
          if (v104)
          {
            v103 = (uint64_t *)(v104 + 16);
            goto LABEL_227;
          }
          break;
        case 604:
          v70 = *((_QWORD *)this + 16);
          if (v70)
          {
            v40 = *(double *)(v70 + 192);
            goto LABEL_276;
          }
          goto LABEL_257;
        default:
          goto LABEL_161;
      }
      v106 = &CA::Mat4Impl::mat4_identity_double;
      goto LABEL_250;
    }
    v18 = *v16;
    if (*v16 != 536)
      break;
    v12 = (CA::Render::Layer *)*((_QWORD *)this + 13);
    if ((*((_BYTE *)this + 13) & 0x20) != 0)
    {
      if (!v12)
        return 0;
      v14 = *v11;
      if ((*v11 & 0x40000000) != 0)
      {
        if ((v14 & 0xBFFFFFFF) != 0)
          return 0;
      }
      else
      {
        result = *((_QWORD *)v12 + 15);
        if (!result)
          return result;
        if (!CA::Render::String::equal((CA::Render::String *)result, v14))
          return 0;
      }
    }
    else
    {
      if (!v12)
        return 0;
      named_object = CA::Render::TypedArray<CA::Render::Layer>::find_named_object(*((_QWORD *)this + 13), *v11);
      if ((named_object & 0x80000000) != 0)
        return 0;
      v12 = (CA::Render::Layer *)*((_QWORD *)v12 + named_object + 3);
    }
    a3 -= 2;
    v11 += 2;
    this = v12;
    if (a6)
LABEL_14:
      *a6 = a5;
  }
  if (v18 > 136)
  {
    if (v18 > 428)
    {
      if (v18 <= 534)
      {
        if (v18 != 429)
        {
          if (v18 != 491)
            goto LABEL_161;
          v20 = *((_QWORD *)this + 16);
          if (v20)
          {
            v21 = *(float *)(v20 + 216);
            v22 = *(float *)(v20 + 220);
          }
          else
          {
            v22 = -3.0;
            v21 = 0.0;
          }
          if ((_DWORD)a3 != 2)
            return 0;
          if (*v11 != 593)
          {
            if (*v11 != 250)
              return 0;
            v21 = v22;
          }
          *a5 = v21;
          return 1;
        }
LABEL_50:
        if ((_DWORD)a3 != 2)
          return 0;
        if (*v11 == 596)
        {
          v30 = (double *)((char *)this + 48);
        }
        else
        {
          if (*v11 != 600)
            return 0;
          v30 = (double *)((char *)this + 56);
        }
        v40 = *v30;
        goto LABEL_276;
      }
      if (v18 == 535)
      {
        v52 = *((_QWORD *)this + 16);
        if (v52)
        {
          v29 = *(CA::Render **)(v52 + 24);
          return CA::Render::get_transform_property(v29, (CA::Render::Vector *)(a3 - 1), (int *)v11, (unsigned int *)a5, a5);
        }
      }
      else
      {
        if (v18 != 557)
          goto LABEL_161;
        v28 = *((_QWORD *)this + 16);
        if (v28)
        {
          v29 = *(CA::Render **)(v28 + 16);
          return CA::Render::get_transform_property(v29, (CA::Render::Vector *)(a3 - 1), (int *)v11, (unsigned int *)a5, a5);
        }
      }
      v29 = 0;
      return CA::Render::get_transform_property(v29, (CA::Render::Vector *)(a3 - 1), (int *)v11, (unsigned int *)a5, a5);
    }
    if (v18 != 137)
    {
      if (v18 == 142)
      {
        v47 = *((_QWORD *)this + 16);
        if (v47)
        {
          v27 = *(_QWORD *)(v47 + 64);
          v121 = 0u;
          v122 = 0u;
          if (v27)
          {
LABEL_80:
            if (*(_DWORD *)(v27 + 16) >= 4u)
            {
              v50 = vsubq_f64(*(float64x2_t *)(v27 + 40), *(float64x2_t *)(v27 + 24));
              v121 = *(_OWORD *)(v27 + 24);
              v122 = v50;
            }
            return CA::Render::get_rect_property((CA::Render *)&v121, (const CA::Rect *)(a3 - 1), (int *)v11, (unsigned int *)a5, a5);
          }
        }
        __asm { FMOV            V0.2D, #0.5 }
        v121 = _Q0;
        v122 = 0uLL;
        return CA::Render::get_rect_property((CA::Render *)&v121, (const CA::Rect *)(a3 - 1), (int *)v11, (unsigned int *)a5, a5);
      }
      if (v18 != 222)
        goto LABEL_161;
      v25 = *((_QWORD *)this + 16);
      if (v25)
      {
        v24 = *(_QWORD *)(v25 + 96);
        return CA::Render::get_list_property<CA::Render::Filter>(v24, v17, (uint64_t)v11, a4, a5);
      }
LABEL_86:
      v24 = 0;
      return CA::Render::get_list_property<CA::Render::Filter>(v24, v17, (uint64_t)v11, a4, a5);
    }
    v42 = *((_QWORD *)this + 16);
    if (v42 && (v43 = *(_QWORD *)(v42 + 32)) != 0 && *(_DWORD *)(v43 + 16) > 5u)
    {
      v60 = *(_OWORD *)(v43 + 40);
      v126 = *(_OWORD *)(v43 + 24);
      v127 = v60;
      v45 = *(_OWORD *)(v43 + 56);
    }
    else
    {
      v44 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
      v126 = *MEMORY[0x1E0C9BAA8];
      v127 = v44;
      v45 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
    }
    v128 = v45;
    v125 = 0;
    v123 = 0u;
    v124 = 0u;
    v121 = 0u;
    v122 = 0u;
    CA::Mat2Impl::mat2_get_unmatrix((uint64_t)&v126, (uint64_t)&v121);
    if ((_DWORD)a3 != 3)
    {
      result = 0;
      if ((_DWORD)a3 != 2)
        return result;
      v46 = *v11;
      if (*v11 != 561)
      {
        if (v46 == 475)
        {
          v40 = (*((double *)&v121 + 1) + *(double *)&v121) * 0.5;
        }
        else
        {
          if (v46 != 470)
            return 0;
          v40 = *(double *)&v123;
        }
        goto LABEL_276;
      }
      v71 = v122;
LABEL_280:
      *(float64x2_t *)a5 = v71;
      return 2;
    }
    if (*v11 == 561)
    {
      v68 = v11[1];
      if (v68 == 600)
      {
        v40 = v122.f64[1];
      }
      else
      {
        if (v68 != 596)
          return 0;
        v40 = v122.f64[0];
      }
    }
    else
    {
      if (*v11 != 475)
        return 0;
      v57 = v11[1];
      if (v57 == 600)
      {
        v40 = *((double *)&v121 + 1);
      }
      else
      {
        if (v57 != 596)
          return 0;
        v40 = *(double *)&v121;
      }
    }
LABEL_276:
    *a5 = v40;
    return 1;
  }
  if (v18 <= 71)
  {
    if (v18 != 25)
    {
      if (v18 != 53)
      {
        if (v18 != 54)
          goto LABEL_161;
        v23 = *((_QWORD *)this + 16);
        if (v23)
        {
          v24 = *(_QWORD *)(v23 + 104);
          return CA::Render::get_list_property<CA::Render::Filter>(v24, v17, (uint64_t)v11, a4, a5);
        }
        goto LABEL_86;
      }
      v39 = *((_QWORD *)this + 16);
      if (v39)
      {
        v40 = *(double *)(v39 + 152);
        v41 = *(double *)(v39 + 160);
      }
      else
      {
        v40 = 0.0;
        v41 = 0.0;
      }
      if ((_DWORD)a3 != 2)
        return 0;
      if (*v11 != 596)
      {
        if (*v11 != 600)
          return 0;
        v40 = v41;
      }
      goto LABEL_276;
    }
    goto LABEL_50;
  }
  if (v18 > 118)
  {
    if (v18 == 119)
    {
      v49 = *((_QWORD *)this + 16);
      if (v49)
      {
        v27 = *(_QWORD *)(v49 + 48);
LABEL_79:
        v121 = 0u;
        v122 = 0u;
        if (v27)
          goto LABEL_80;
      }
    }
    else
    {
      if (v18 != 133)
        goto LABEL_161;
      v26 = *((_QWORD *)this + 16);
      if (v26)
      {
        v27 = *(_QWORD *)(v26 + 40);
        goto LABEL_79;
      }
    }
    v121 = 0uLL;
    __asm { FMOV            V0.2D, #1.0 }
    v122 = _Q0;
    return CA::Render::get_rect_property((CA::Render *)&v121, (const CA::Rect *)(a3 - 1), (int *)v11, (unsigned int *)a5, a5);
  }
  if (v18 == 72)
    return CA::Render::get_rect_property((CA::Render::Layer *)((char *)this + 64), (const CA::Rect *)(a3 - 1), (int *)v11, (unsigned int *)a5, a5);
  if (v18 == 111)
  {
    v19 = *((_QWORD *)this + 16);
    if (v19)
    {
      result = *(_QWORD *)(v19 + 88);
      if (result)
        return CA::Render::Filter::get_property((CA::Render::Filter *)result, v17, v11, a4, a5);
      return result;
    }
    return 0;
  }
LABEL_161:
  v73 = (uint64_t *)*((_QWORD *)this + 16);
  if (!v73)
    return 0;
  result = *v73;
  if (*v73)
    return (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *, unint64_t, double *, double **))(*(_QWORD *)result + 136))(result, a3, v11 - 1, a4, a5, a6);
  return result;
}

unsigned int CA::Render::KeyframeAnimation::keyframe_for_time(CA::Render::KeyframeAnimation *this, double a2, double *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int result;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  int v14;
  int v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;

  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0;
  v3 = *((_QWORD *)this + 15);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 + 16);
    v5 = v4 - 2;
    if (v4 >= 2)
    {
      v6 = 1;
      if ((*((_BYTE *)this + 15) & 4) != 0 && v4 >= 6)
      {
        v7 = v4 - 3;
        do
        {
          v8 = v6 + (v7 >> 1);
          if (*(double *)(v3 + 8 * v8 + 24) > a2)
            v5 = v8;
          else
            v6 = v8;
          v7 = v5 - v6;
        }
        while (v5 - v6 > 2);
      }
      if (v6 < v4 - 1)
      {
        while (*(double *)(v3 + 8 * v6 + 24) <= a2)
        {
          if (v4 - 1 == ++v6)
          {
            v6 = v4 - 1;
            break;
          }
        }
      }
      result = v6 - 1;
      v10 = *(double *)(v3 + 24 + 8 * (v6 - 1));
      a3[1] = v10;
      v11 = *(double *)(v3 + 24 + 8 * v6);
      a3[2] = v11;
      if (v6 < 2)
        v12 = -(v11 + v10 * -2.0);
      else
        v12 = *(double *)(v3 + 8 * (v6 - 2) + 24);
      *a3 = v12;
      v15 = v6 + 1;
      if (v15 >= v4)
        v16 = -(v10 + v11 * -2.0);
      else
        v16 = *(double *)(v3 + 8 * v15 + 24);
      goto LABEL_32;
    }
LABEL_33:
    result = 0;
    *a3 = 0.0;
    a3[1] = 0.0;
    a3[3] = 1.0;
    v16 = 1.0;
    v22 = 2;
    goto LABEL_34;
  }
  v13 = *((_QWORD *)this + 17);
  if (v13)
  {
    v14 = *(_DWORD *)(v13 + 16);
  }
  else
  {
    v17 = *((_QWORD *)this + 14);
    if (!v17)
      goto LABEL_33;
    v14 = *(_DWORD *)(v17 + 16) - (*((_BYTE *)this + 144) != 0);
  }
  if (v14 <= 0)
    goto LABEL_33;
  v18 = 1.0 / (double)v14;
  if (a2 > 1.0)
    a2 = 1.0;
  if (a2 < 0.0)
    a2 = 0.0;
  v19 = a2 * (double)v14;
  v20 = floor(v19);
  result = vcvtmd_s64_f64(v19);
  *a3 = v18 * v20 - v18;
  a3[1] = v18 * v20;
  v21 = v18 * v20 + v18;
  a3[2] = v21;
  v16 = v21 + v18;
LABEL_32:
  v22 = 3;
LABEL_34:
  a3[v22] = v16;
  return result;
}

double CA::Render::TimingFunction::evaluate_inverse(CA::Render::TimingFunction *this, const double *a2, double a3, double a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  int v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  int v15;
  double v17;

  v4 = *((double *)this + 1);
  v5 = v4 * 3.0;
  v6 = (*((double *)this + 3) - v4) * 3.0;
  v7 = v6 - v4 * 3.0;
  v8 = 1.0 - v6;
  v9 = 8;
  v10 = a3;
  while (1)
  {
    v11 = -(a3 - (v5 + (v7 + v10 * v8) * v10) * v10);
    if (fabs(v11) < a4)
      break;
    v12 = v5 + (v7 + v7 + v8 * 3.0 * v10) * v10;
    if (fabs(v12) >= 0.000001)
    {
      v10 = v10 - v11 / v12;
      if (--v9)
        continue;
    }
    v10 = 0.0;
    if (a3 >= 0.0)
    {
      v10 = 1.0;
      if (a3 <= 1.0)
      {
        v13 = 0.0;
        v14 = 1.0;
        v15 = -1025;
        v10 = a3;
        do
        {
          if (__CFADD__(v15++, 1))
            break;
          v17 = -(a3 - (v5 + (v7 + v10 * v8) * v10) * v10);
          if (fabs(v17) < a4)
            break;
          if (v17 >= 0.0)
            v14 = v10;
          else
            v13 = v10;
          v10 = v13 + (v14 - v13) * 0.5;
        }
        while (v13 < v14);
      }
    }
    return (*(double *)this * 3.0
          + ((*((double *)this + 2) - *(double *)this) * 3.0
           - *(double *)this * 3.0
           + v10 * (1.0 - (*((double *)this + 2) - *(double *)this) * 3.0))
          * v10)
         * v10;
  }
  return (*(double *)this * 3.0
        + ((*((double *)this + 2) - *(double *)this) * 3.0
         - *(double *)this * 3.0
         + v10 * (1.0 - (*((double *)this + 2) - *(double *)this) * 3.0))
        * v10)
       * v10;
}

uint64_t CA::Render::get_list_property<CA::Render::Filter>(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, double *a5)
{
  unsigned int named_object;
  CA::Render::Filter *v11;

  if (a1
    && a2 >= 2
    && (named_object = CA::Render::TypedArray<CA::Render::Filter>::find_named_object(a1, *(_DWORD *)a3),
        (named_object & 0x80000000) == 0)
    && (v11 = *(CA::Render::Filter **)(a1 + 8 * named_object + 24)) != 0)
  {
    return CA::Render::Filter::get_property(v11, a2 - 1, (const unsigned int *)(a3 + 4), a4, a5);
  }
  else
  {
    return 0;
  }
}

uint64_t CA::Render::Filter::get_property(CA::Render::Filter *this, uint64_t a2, const unsigned int *a3, unint64_t a4, double *a5)
{
  const CA::Render::KeyValueArray *v6;
  double v7;
  uint64_t v9;
  unsigned int named_object;
  uint64_t v12;
  unint64_t v13;

  if (a2 != 1)
    return 0;
  v6 = (const CA::Render::KeyValueArray *)*a3;
  if ((_DWORD)v6 == 208)
  {
    v7 = 1.0;
    if ((*((_DWORD *)this + 3) & 0x100) == 0)
      v7 = 0.0;
    *a5 = v7;
    return 1;
  }
  else
  {
    v9 = *((_QWORD *)this + 5);
    if (v9
      && (named_object = CA::Render::KeyValueArray::find_named_object_(*((CA::Render::KeyValueArray **)this + 5), v6),
          (named_object & 0x80000000) == 0)
      && (v12 = *(_QWORD *)(*(_QWORD *)(v9 + 8 * named_object + 24) + 24)) != 0
      && *(_BYTE *)(v12 + 12) == 56
      && (v13 = *(unsigned int *)(v12 + 16), v13 <= a4))
    {
      memcpy(a5, (const void *)(v12 + 24), 8 * v13);
      return *(unsigned int *)(v12 + 16);
    }
    else
    {
      return 0;
    }
  }
}

double CA::Render::get_position_range(int a1, uint64_t a2, unint64_t a3, unint64_t a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  double v10;

  if (a2 != 1 || !a3 || !a4)
  {
    if (a2)
      return INFINITY;
    if (a3 < 2)
      return INFINITY;
    v10 = a9;
    if (a4 < 2)
      return INFINITY;
    return sqrt((v10 - a7) * a5 * ((v10 - a7) * a5) + (a10 - a8) * a6 * ((a10 - a8) * a6));
  }
  a10 = 0.0;
  if (a1 > 595)
  {
    if (a1 == 596)
    {
      v10 = a9;
      a8 = 0.0;
      return sqrt((v10 - a7) * a5 * ((v10 - a7) * a5) + (a10 - a8) * a6 * ((a10 - a8) * a6));
    }
    if (a1 != 600)
      return INFINITY;
    goto LABEL_14;
  }
  if (a1 == 250)
  {
LABEL_14:
    v10 = 0.0;
    a10 = a9;
    a8 = a7;
    a7 = 0.0;
    return sqrt((v10 - a7) * a5 * ((v10 - a7) * a5) + (a10 - a8) * a6 * ((a10 - a8) * a6));
  }
  v10 = a9;
  a8 = 0.0;
  if (a1 != 593)
    return INFINITY;
  return sqrt((v10 - a7) * a5 * ((v10 - a7) * a5) + (a10 - a8) * a6 * ((a10 - a8) * a6));
}

uint64_t CA::Render::Layer::set_keypath_object(CA::Render::Layer *this, const CA::Render::Layer **a2, void *const *a3)
{
  CA::Render::Object *v3;
  uint64_t result;
  const CA::Rect *v7;
  unint64_t v8;
  CA::Render::Layer *v9;
  unsigned int v10;
  unsigned int *v11;
  CA::Render::Path *v12;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int *v17;
  CA::Render::Vector *v18;
  unsigned int *v19;
  CA::Render::Vector *v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int *v23;
  CA::Render::Filter *v24;
  unsigned int *v25;
  unsigned int *v26;
  int v27;
  uint64_t v28;
  unsigned int *v29;
  CA::Render::Vector *v30;
  unsigned int *v31;
  CA::Render::Vector *v32;
  _QWORD *v33;
  unsigned int *v34;
  CA::Render::Vector *v35;
  unsigned int *v36;
  CA::Render::Vector *v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  const CA::Render::KeyValueArray *v42;
  uint64_t v43;
  uint64_t v44;
  const CA::Render::Layer *v45;
  CA::Render::KeyValueArray *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  CA::Render::Layer *v51[2];

  v3 = (CA::Render::Object *)a3;
  v51[1] = *(CA::Render::Layer **)MEMORY[0x1E0C80C00];
  v51[0] = this;
  result = CA::Render::skip_sublayers((CA::Render *)v51, a2, a3);
  if ((_DWORD)result)
    return result;
  v8 = (unint64_t)*a2;
  if (!*a2)
    return result;
  v9 = v51[0];
  if ((v8 & 1) != 0)
  {
    v50 = 17;
    v8 >>= 1;
    goto LABEL_9;
  }
  v10 = *(_DWORD *)v8;
  if (*(_DWORD *)v8 != 1)
  {
    if ((int)v10 > 3 || v10 == 0)
      return result;
    v14 = *(_DWORD *)(v8 + 4);
    switch(v14)
    {
      case 54:
        v38 = *((_QWORD *)v51[0] + 16);
        if (!v38)
          return result;
        result = *(_QWORD *)(v38 + 104);
        if (!result)
          return result;
        v39 = v10 < 2 ? 0 : *(_DWORD *)(v8 + 8);
        result = CA::Render::TypedArray<CA::Render::Filter>::find_named_object(result, v39);
        if ((result & 0x80000000) != 0)
          return result;
        v42 = 0;
        v43 = *(_QWORD *)(*((_QWORD *)v9 + 16) + 104);
        break;
      case 111:
        v40 = *((_QWORD *)v51[0] + 16);
        if (!v40)
          return result;
        v41 = *(_QWORD *)(v40 + 88);
        if (!v41)
          return result;
        if (v10 < 2)
          v42 = 0;
        else
          v42 = (const CA::Render::KeyValueArray *)*(unsigned int *)(v8 + 8);
        v46 = *(CA::Render::KeyValueArray **)(v41 + 40);
        return CA::Render::KeyValueArray::set_key(v46, v42, v3);
      case 222:
        v15 = *((_QWORD *)v51[0] + 16);
        if (!v15)
          return result;
        result = *(_QWORD *)(v15 + 96);
        if (!result)
          return result;
        v16 = v10 < 2 ? 0 : *(_DWORD *)(v8 + 8);
        result = CA::Render::TypedArray<CA::Render::Filter>::find_named_object(result, v16);
        if ((result & 0x80000000) != 0)
          return result;
        v42 = 0;
        v43 = *(_QWORD *)(*((_QWORD *)v9 + 16) + 96);
        break;
      default:
        return result;
    }
    v44 = *(_QWORD *)(v43 + 8 * result + 24);
    v45 = *a2;
    if (*a2 && (v45 & 1) == 0)
    {
      if (*(_DWORD *)v45 < 3u)
        v42 = 0;
      else
        v42 = (const CA::Render::KeyValueArray *)*((unsigned int *)v45 + 3);
    }
    v46 = *(CA::Render::KeyValueArray **)(v44 + 40);
    return CA::Render::KeyValueArray::set_key(v46, v42, v3);
  }
  v50 = 17;
  if (!*(_DWORD *)v8)
  {
LABEL_65:
    v33 = (_QWORD *)*((_QWORD *)this + 16);
    if (v33 && *v33)
    {
      result = *CA::Render::Layer::ensure_ext(this);
      if (result)
        return (*(uint64_t (**)(uint64_t, const CA::Render::Layer **, CA::Render::Object *))(*(_QWORD *)result + 128))(result, a2, v3);
    }
    return result;
  }
  LODWORD(v8) = *(_DWORD *)(v8 + 4);
LABEL_9:
  if ((int)v8 > 221)
  {
    if ((int)v8 > 534)
    {
      switch((_DWORD)v8)
      {
        case 0x217:
          if (v3)
          {
            if (*((_BYTE *)v3 + 12) != 56)
              return result;
            v29 = (unsigned int *)v51[0];
            v30 = v3;
          }
          else
          {
            v29 = (unsigned int *)v51[0];
            v30 = 0;
          }
          return (uint64_t)CA::Render::Layer::set_sublayer_transform(v29, v30);
        case 0x218:
          return result;
        case 0x22D:
          if (v3)
          {
            if (*((_BYTE *)v3 + 12) != 56)
              return result;
            v19 = (unsigned int *)v51[0];
            v20 = v3;
          }
          else
          {
            v19 = (unsigned int *)v51[0];
            v20 = 0;
          }
          return (uint64_t)CA::Render::Layer::set_transform(v19, v20);
      }
      goto LABEL_65;
    }
    if ((_DWORD)v8 == 222)
    {
      if (v3)
      {
        if (*((_BYTE *)v3 + 12) != 1)
          return result;
        result = CA::Render::Array::check_types((uint64_t)v3, 1, &v50);
        if (!(_DWORD)result)
          return result;
        v25 = (unsigned int *)v9;
        v26 = (unsigned int *)v3;
      }
      else
      {
        v25 = (unsigned int *)v51[0];
        v26 = 0;
      }
      return (uint64_t)CA::Render::Layer::set_filters(v25, v26);
    }
    if ((_DWORD)v8 != 377)
    {
      if ((_DWORD)v8 == 493)
      {
        if (v3)
        {
          if (*((_BYTE *)v3 + 12) != 36)
            return result;
          v11 = (unsigned int *)v51[0];
          v12 = v3;
        }
        else
        {
          v11 = (unsigned int *)v51[0];
          v12 = 0;
        }
        return (uint64_t)CA::Render::Layer::set_shadow_path(v11, v12);
      }
      goto LABEL_65;
    }
    if (!v3)
      return result;
    v27 = *((unsigned __int8 *)v3 + 12);
    if (v27 == 26)
    {
      result = (uint64_t)CA::Render::MeshTransform::eval_interpolator(v3, (float64x2_t *)v51[0] + 4, v7);
      v3 = (CA::Render::Object *)result;
      if (!result)
      {
        v28 = 0;
LABEL_120:
        result = CA::Render::Layer::set_mesh_transform((uint64_t)v9, (os_unfair_lock_s *)v3);
LABEL_121:
        if (v28)
        {
          v47 = (unsigned int *)(v28 + 8);
          do
          {
            v48 = __ldaxr(v47);
            v49 = v48 - 1;
          }
          while (__stlxr(v49, v47));
          if (!v49)
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
        }
        return result;
      }
      v27 = *(unsigned __int8 *)(result + 12);
      v28 = result;
    }
    else
    {
      v28 = 0;
    }
    if (v27 != 33)
      goto LABEL_121;
    goto LABEL_120;
  }
  if ((int)v8 <= 118)
  {
    switch((_DWORD)v8)
    {
      case '6':
        if (v3)
        {
          if (*((_BYTE *)v3 + 12) != 1)
            return result;
          result = CA::Render::Array::check_types((uint64_t)v3, 1, &v50);
          if (!(_DWORD)result)
            return result;
          v21 = (unsigned int *)v9;
          v22 = (unsigned int *)v3;
        }
        else
        {
          v21 = (unsigned int *)v51[0];
          v22 = 0;
        }
        return (uint64_t)CA::Render::Layer::set_background_filters(v21, v22);
      case 'o':
        if (v3)
        {
          if (*((_BYTE *)v3 + 12) != 17)
            return result;
          v23 = (unsigned int *)v51[0];
          v24 = v3;
        }
        else
        {
          v23 = (unsigned int *)v51[0];
          v24 = 0;
        }
        return (uint64_t)CA::Render::Layer::set_compositing_filter(v23, v24);
      case 'u':
        return (uint64_t)CA::Render::Layer::set_contents(v51[0], v3);
    }
    goto LABEL_65;
  }
  switch((int)v8)
  {
    case 133:
      if (v3)
      {
        if (*((_BYTE *)v3 + 12) != 56)
          return result;
        v17 = (unsigned int *)v51[0];
        v18 = v3;
      }
      else
      {
        v17 = (unsigned int *)v51[0];
        v18 = 0;
      }
      return (uint64_t)CA::Render::Layer::set_contents_rect(v17, v18);
    case 134:
    case 135:
    case 136:
    case 138:
    case 139:
    case 140:
      goto LABEL_65;
    case 137:
      if (v3)
      {
        if (*((_BYTE *)v3 + 12) != 56)
          return result;
        v34 = (unsigned int *)v51[0];
        v35 = v3;
      }
      else
      {
        v34 = (unsigned int *)v51[0];
        v35 = 0;
      }
      return (uint64_t)CA::Render::Layer::set_contents_transform(v34, v35);
    case 141:
      return (uint64_t)CA::Render::Layer::set_corner_contents((unsigned int *)v51[0], v3);
    case 142:
      if (v3)
      {
        if (*((_BYTE *)v3 + 12) != 56)
          return result;
        v36 = (unsigned int *)v51[0];
        v37 = v3;
      }
      else
      {
        v36 = (unsigned int *)v51[0];
        v37 = 0;
      }
      return (uint64_t)CA::Render::Layer::set_corner_contents_center(v36, v37);
    default:
      if ((_DWORD)v8 != 119)
        goto LABEL_65;
      if (v3)
      {
        if (*((_BYTE *)v3 + 12) != 56)
          return result;
        v31 = (unsigned int *)v51[0];
        v32 = v3;
      }
      else
      {
        v31 = (unsigned int *)v51[0];
        v32 = 0;
      }
      result = (uint64_t)CA::Render::Layer::set_contents_center(v31, v32);
      break;
  }
  return result;
}

double CA::Render::SpringAnimation::inverse_delta_time_function(CA::Render::SpringAnimation *this, double a2, double a3)
{
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  long double v10;
  double v11;
  double v12;
  double v13;
  double v14;

  v5 = *((_QWORD *)this + 5);
  if (v5)
    v6 = *(double *)(v5 + 32);
  else
    v6 = INFINITY;
  v7 = 0.0;
  if (*((double *)this + 25) >= 1.0)
  {
    v8 = v6 * a3;
    v9 = *((double *)this + 24);
    v10 = exp(-(v6 * a3 * v9));
    v11 = *((double *)this + 28);
    v12 = (*((double *)this + 27) * v9 + v11 * (v9 * v8 + -1.0)) * v10;
    v13 = v10 * v9;
    if (v12 >= 0.0)
      v14 = v13;
    else
      v14 = *((double *)this + 28);
    if (v11 <= v9)
      v14 = v13;
    if (v12 > 0.0)
      v13 = -v11;
    if (v11 >= 0.0)
      v13 = v14;
    v7 = fmax(a2 / fmax(fabs(v12), v13), 0.0);
  }
  return v7 / v6;
}

uint64_t CA::Render::ShapeLayer::get_property(float32x2_t *this, unint64_t a2, const unsigned int *a3, unint64_t a4, float64x2_t *a5, float64x2_t **a6)
{
  uint64_t result;
  int v8;
  float32x2_t v9;
  float32x2_t v10;
  float64_t v11;

  if (a4 < 4)
    return 0;
  if (a6)
    *a6 = a5;
  result = 0;
  v8 = *a3;
  if (*(int *)a3 <= 382)
  {
    switch(v8)
    {
      case 218:
        v9 = this[3];
        v10 = this[4];
        goto LABEL_20;
      case 347:
        v11 = *(double *)&this[13];
        break;
      case 349:
        v11 = *(double *)&this[11];
        break;
      default:
        return result;
    }
    goto LABEL_23;
  }
  if (v8 > 531)
  {
    if (v8 == 532)
    {
      v11 = *(double *)&this[10];
    }
    else
    {
      if (v8 != 533)
        return result;
      v11 = *(double *)&this[9];
    }
LABEL_23:
    a5->f64[0] = v11;
    return 1;
  }
  if (v8 == 383)
  {
    v11 = *(double *)&this[12];
    goto LABEL_23;
  }
  if (v8 == 531)
  {
    v9 = this[6];
    v10 = this[7];
LABEL_20:
    *a5 = vcvtq_f64_f32(v9);
    a5[1] = vcvtq_f64_f32(v10);
    return 4;
  }
  return result;
}

BOOL CA::Mat4Impl::mat4_is_translation(CA::Mat4Impl *this, const double *a2)
{
  return *(double *)this == 1.0
      && *((double *)this + 1) == 0.0
      && *((double *)this + 2) == 0.0
      && *((double *)this + 3) == 0.0
      && *((double *)this + 4) == 0.0
      && *((double *)this + 5) == 1.0
      && *((double *)this + 6) == 0.0
      && *((double *)this + 7) == 0.0
      && *((double *)this + 8) == 0.0
      && *((double *)this + 9) == 0.0
      && *((double *)this + 10) == 1.0
      && *((double *)this + 11) == 0.0
      && *((double *)this + 15) == 1.0;
}

uint64_t CA::Render::ReplicatorLayer::get_property(CA::Render::ReplicatorLayer *this, uint64_t a2, const unsigned int *a3, unint64_t a4, float64x2_t *a5, float64x2_t **a6)
{
  float64x2_t v7;
  double v8;
  uint64_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;

  if (a4 >= 4)
  {
    if (a6)
      *a6 = a5;
    if (!a2)
      return a2;
    if (a2 == 1)
    {
      a2 = 0;
      switch(*a3)
      {
        case 0x13Au:
          a2 = 8;
          goto LABEL_16;
        case 0x13Bu:
          a2 = 7;
          goto LABEL_16;
        case 0x13Cu:
          v7 = vcvtq_f64_f32(*(float32x2_t *)((char *)this + 44));
          *a5 = vcvtq_f64_f32(*(float32x2_t *)((char *)this + 36));
          a5[1] = v7;
          return 4;
        case 0x13Du:
          v8 = (double)*((int *)this + 4);
          goto LABEL_17;
        case 0x13Eu:
          goto LABEL_16;
        case 0x13Fu:
          a2 = 6;
          goto LABEL_16;
        case 0x140u:
          a2 = 5;
LABEL_16:
          v8 = *((float *)this + a2 + 8);
LABEL_17:
          a5->f64[0] = v8;
          a2 = 1;
          break;
        case 0x141u:
          if (a4 < 0x10)
            return 0;
          v9 = *((_QWORD *)this + 3);
          v10 = *(float64x2_t *)(v9 + 40);
          v11 = *(float64x2_t *)(v9 + 56);
          v12 = *(float64x2_t *)(v9 + 72);
          *a5 = *(float64x2_t *)(v9 + 24);
          a5[1] = v10;
          a5[2] = v11;
          a5[3] = v12;
          v13 = *(float64x2_t *)(v9 + 104);
          v14 = *(float64x2_t *)(v9 + 120);
          v15 = *(float64x2_t *)(v9 + 136);
          a5[4] = *(float64x2_t *)(v9 + 88);
          a5[5] = v13;
          a5[6] = v14;
          a5[7] = v15;
          a2 = 16;
          break;
        default:
          return a2;
      }
      return a2;
    }
    if (*a3 == 321)
      return CA::Render::get_transform_property(*((CA::Render **)this + 3), (CA::Render::Vector *)(a2 - 1), (int *)a3 + 1, (unsigned int *)a5, a5->f64);
  }
  return 0;
}

void ___ZNK2CA6Render17KeyframeAnimation9next_timeEdfPKvNS0_26AnimationFrameRateOverrideEjbRdPKNS0_5LayerEPKNS_4Vec2IdEERj_block_invoke(uint64_t a1, const double *a2, double a3)
{
  double v3;

  v3 = (a3 - *(double *)(a1 + 32)) / (*(double *)(a1 + 40) - *(double *)(a1 + 32));
  if (v3 > 1.0)
    v3 = 1.0;
  if (v3 < 0.0)
    v3 = 0.0;
  if (*(_BYTE *)(a1 + 64))
    CA::Render::TimingFunction::evaluate(*(CA::Render::TimingFunction **)(a1 + 48), a2, v3, 0.001 / *(double *)(a1 + 56));
}

uint64_t CA::Render::GradientLayer::get_property(CA::Render::GradientLayer *this, uint64_t a2, const unsigned int *a3, unint64_t a4, float64x2_t *a5, double **a6)
{
  unint64_t v6;
  double *v9;
  int v12;
  double *v13;
  uint64_t v15;
  float **v16;
  float v17;
  double v18;
  unsigned int v19;
  uint64_t v20;
  float32x2_t *v21;
  float64x2_t v22;
  unint64_t v23;
  unint64_t v24;
  const void *v25;
  size_t v26;
  const void *v27;
  double *v28;
  float *v29;
  double *v30;
  double *v31;
  double *v32;
  unint64_t v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  double *v37;
  unint64_t v38;
  uint64x2_t v39;
  double v40;
  int64x2_t v41;
  int64x2_t v42;
  int32x2_t v43;
  uint64_t v44;
  unint64_t v45;
  _OWORD *v46;

  if (a4 < 4)
    return 0;
  v9 = (double *)a5;
  if (a6)
    *a6 = (double *)a5;
  v6 = 0;
  v12 = *a3;
  if (*(int *)a3 > 355)
  {
    if (v12 != 356)
    {
      if (v12 != 393)
      {
        if (v12 != 525)
          return v6;
LABEL_14:
        v13 = (double *)((char *)this + 72);
        _ZF = v12 == 525;
        v15 = 88;
        if (_ZF)
          v15 = 72;
        else
          v13 = (double *)((char *)this + 88);
        if (a2 != 2)
        {
          if (a2 == 1)
          {
            a5->f64[0] = *(float64_t *)((char *)this + v15);
            a5->f64[1] = v13[1];
            return 2;
          }
          return 0;
        }
        v19 = a3[1];
        if (v19 == 600)
        {
          v18 = v13[1];
        }
        else
        {
          if (v19 != 596)
            return 0;
          v18 = *(double *)((char *)this + v15);
        }
LABEL_27:
        a5->f64[0] = v18;
        return 1;
      }
      v17 = *((float *)this + 27);
LABEL_26:
      v18 = v17;
      goto LABEL_27;
    }
  }
  else if (v12 != 108)
  {
    if (v12 != 211)
    {
      if (v12 != 322)
        return v6;
      v23 = *((_QWORD *)this + 4);
      if (v23 < 2)
        return 0;
      if (a2 != 2)
      {
        if (a2 == 1)
        {
          v24 = v23 - 1;
          if (!(v24 >> 62))
          {
            v6 = 4 * v24;
            if (!((4 * v24) >> 61))
            {
              v25 = (const void *)*((_QWORD *)this + 8);
              v26 = 32 * v24;
              v27 = v25;
              v28 = (double *)a5;
              if (v6 > a4)
              {
                v28 = (double *)malloc_type_malloc(v26, 0xADD7C2B9uLL);
                v27 = (const void *)*((_QWORD *)this + 8);
              }
              if (v28)
                v9 = v28;
              else
                v6 = a4;
              if (v27)
              {
                memcpy(v9, v25, v26);
              }
              else if (v6)
              {
                v45 = 0;
                v46 = v9 + 2;
                __asm { FMOV            V0.2D, #1.0 }
                do
                {
                  *((_QWORD *)v46 - 2) = 0;
                  *((_QWORD *)v46 - 1) = 0;
                  *v46 = _Q0;
                  v46 += 2;
                  v45 += 4;
                }
                while (v45 < v6);
              }
              *a6 = v9;
              return v6;
            }
          }
        }
        return 0;
      }
      v35 = a3[1];
      if ((v35 & 0x40000000) == 0 || v23 - 1 <= (v35 & 0xFFFFFFFFBFFFFFFFLL))
        return 0;
      v36 = *((_QWORD *)this + 8);
      if (v36)
      {
        v37 = (double *)(v36 + 8 * (4 * v35));
        a5->f64[0] = *v37;
        a5->f64[1] = v37[1];
        a5[1].f64[0] = v37[2];
        a5[1].f64[1] = v37[3];
      }
      else
      {
        a5->f64[0] = 0.0;
        a5->f64[1] = 0.0;
        __asm { FMOV            V0.2D, #1.0 }
        a5[1] = _Q0;
      }
      return 4;
    }
    goto LABEL_14;
  }
  if (a2 == 2)
  {
    v20 = a3[1];
    if ((v20 & 0x40000000) == 0 || *((_QWORD *)this + 4) <= (v20 & 0xFFFFFFFFBFFFFFFFLL))
      return 0;
    if (v12 != 356)
    {
      v21 = (float32x2_t *)(*((_QWORD *)this + 6) + 4 * (4 * v20));
      v22 = vcvtq_f64_f32(v21[1]);
      *a5 = vcvtq_f64_f32(*v21);
      a5[1] = v22;
      return 4;
    }
    v44 = *((_QWORD *)this + 7);
    if (!v44)
      return 0;
    v17 = *(float *)(v44 + 4 * (v20 & 0xFFFFFFFFBFFFFFFFLL));
    goto LABEL_26;
  }
  if (a2 != 1)
    return 0;
  v6 = *((_QWORD *)this + 4);
  if (v12 == 108)
  {
    if (v6 >> 62)
      return 0;
    v16 = (float **)((char *)this + 48);
    v6 *= 4;
  }
  else
  {
    v16 = (float **)((char *)this + 56);
  }
  if (v6 >> 61)
    return 0;
  v29 = *v16;
  v30 = (double *)a5;
  if (v6 > a4)
    v30 = (double *)malloc_type_malloc(8 * v6, 0x531A6179uLL);
  if (v30)
  {
    v31 = v30;
  }
  else
  {
    v6 = a4;
    v31 = v9;
  }
  if (v29)
  {
    if (v6)
    {
      v32 = v31;
      v33 = v6;
      do
      {
        v34 = *v29++;
        *v32++ = v34;
        --v33;
      }
      while (v33);
    }
  }
  else if (v6)
  {
    v38 = 0;
    v39 = (uint64x2_t)vdupq_n_s64(v6 - 1);
    v40 = 1.0 / (double)v6;
    v41 = (int64x2_t)xmmword_18474E1C0;
    v42 = vdupq_n_s64(2uLL);
    do
    {
      v43 = vmovn_s64((int64x2_t)vcgeq_u64(v39, (uint64x2_t)v41));
      if ((v43.i8[0] & 1) != 0)
        v31[v38] = v40 * (double)v38;
      if ((v43.i8[4] & 1) != 0)
        v31[v38 + 1] = v40 * (double)(v38 + 1);
      v38 += 2;
      v41 = vaddq_s64(v41, v42);
    }
    while (((v6 + 1) & 0xFFFFFFFFFFFFFFFELL) != v38);
  }
  *a6 = v31;
  return v6;
}

uint64_t CA::Render::GainMapLayer::get_bounds(CA::Render::GainMapLayer *this, const CA::Render::Layer *a2, Rect *a3, Rect *a4)
{
  uint64_t v7;

  v7 = (*(uint64_t (**)(CA::Render::GainMapLayer *))(*(_QWORD *)this + 200))(this);
  if ((_DWORD)v7)
  {
    *(_OWORD *)&a3->top = *((_OWORD *)a2 + 4);
    *(_OWORD *)&a3[2].top = *((_OWORD *)a2 + 5);
    CA::BoundsImpl::inset((double *)a3, -2.0, -2.0);
    if (a4)
    {
      *(_OWORD *)&a4->top = 0u;
      *(_OWORD *)&a4[2].top = 0u;
    }
  }
  return v7;
}

BOOL CA::Render::GainMapLayer::bounds_are_visible(CA::Render::GainMapLayer *this)
{
  if (*((_BYTE *)this + 16) == 3 || BYTE10(xmmword_1ECDC6AD0) != 0)
    return 1;
  if (CADeviceSupportsHWGainMap::once != -1)
    dispatch_once(&CADeviceSupportsHWGainMap::once, &__block_literal_global_57);
  return CADeviceSupportsHWGainMap::supports_gain_map == 0;
}

char *CAML::`anonymous namespace'::sax_characters(char **this, const char *a2, const unsigned __int8 *a3)
{
  return CAML::State::characters(this[6], a2, (int)a3);
}

uint64_t CA::WindowServer::`anonymous namespace'::OGLDisplay::update_detached_layer(CA::WindowServer::_anonymous_namespace_::OGLDisplay *this, CA::Render::Handle *a2, uint64_t a3, CA::Render::Texture *a4, _QWORD *a5)
{
  uint64_t v6;
  uint64_t v7;

  if (a5)
  {
    v6 = a5[1];
    v7 = *((_QWORD *)this + 1);
    if (v6 != v7)
    {
      a5[1] = v7;
      v6 = v7;
    }
  }
  else
  {
    v6 = *((_QWORD *)this + 1);
  }
  return (*(uint64_t (**)(uint64_t, CA::Render::Handle *, uint64_t, CA::Render::Texture *))(*(_QWORD *)v6 + 576))(v6, a2, a3, a4);
}

uint64_t CA::WindowServer::`anonymous namespace'::OGLDisplay::remove_detached_layer(CA::WindowServer::_anonymous_namespace_::OGLDisplay *this, CA::Render::Handle *a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, CA::Render::Handle *, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 576))(*((_QWORD *)this + 1), a2, a3, 0, 0, 0, 0, 0, 0);
}

BOOL CA::WindowServer::IOMFBDisplay::detach_layer(CA::WindowServer::IOMFBDisplay *this, CA::Render::Handle *a2, int a3, CA::Render::Texture *a4, CA::WindowServer::Surface *a5, float64x2_t *a6, float64x2_t *a7, unsigned int a8, unsigned int *a9)
{
  unsigned int v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  __IOSurface *v19;
  IOSurfaceID v20;
  int v21;
  char *v23;
  __int128 v24;
  float64x2_t *v25;
  float64x2_t v26;
  float64x2_t v27;
  uint64_t v28;
  uint64_t v29;
  int64x2_t v30;
  float64x2_t v31;
  uint64_t v32;
  uint64_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v38;
  unsigned int v40;
  char *v41;
  int32x4_t v42;
  int32x4_t v43;
  int v44;
  int v45;
  int v46;
  int8x16_t v47;
  uint64_t v48;
  int64x2_t v49;
  int8x16_t v50;
  double v51;
  double v52;
  BOOL v53;
  const CA::Rect *v54;
  double v55;
  double v56;
  double v57;
  int32x4_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  double v62;
  double v63;
  float64x2_t v64;
  double v65;
  double v66;
  float64x2_t v67;
  unsigned int v68;
  CA::Render::Texture *v69;
  CA::WindowServer::Surface *v70;
  char *v71;
  double v72;
  unsigned int v76;
  uint64_t v77;
  __IOSurface *v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  _BOOL4 v83;
  const CA::Rect *v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  const char *v88;
  unsigned int v89;
  unint64_t v90;
  unsigned int v91;
  double v92;
  double v93;
  double v94;
  uint64_t v95;
  uint64_t v96;
  double *v97;
  double v98;
  double *v99;
  double v100;
  double *f64;
  double v102;
  double *v103;
  double v104;
  double *v105;
  double v106;
  double *v107;
  double v108;
  double *v109;
  double *v110;
  double v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  double *v115;
  unsigned int v116;
  double *v117;
  unsigned int v118;
  int v119;
  uint64_t v120;
  int v121;
  int v122;
  int v124;
  CA::WindowServer::Surface *v125;
  unsigned int v126;
  unsigned int *v127;
  unsigned int v128;
  CA::Render::Handle *v129;
  CA::WindowServer::Surface *v130;
  CA::WindowServer::Surface *v131;
  _BOOL4 v132;
  double v133;
  float64x2_t *v134;
  double v135;
  double v136;
  double v137;
  unint64_t v138;
  __int128 v139;
  double v140;
  double *v141;
  double v142;
  double v143;
  double v144;
  double v145;
  uint64_t v146;
  uint64x2_t v147;
  CA::Render::Texture *v148;
  unsigned int *v149;
  unsigned int v150;
  unsigned int v151;
  char *v152;
  unsigned int *v153;
  unsigned int v154;
  CA::Render::Texture *v155;
  unsigned int v156;
  uint64_t v157;
  int v158;
  NSObject *v159;
  char *v160;
  int v161;
  int v162;
  int v163;
  unsigned int *v164;
  uint64_t v165;
  unsigned __int16 v166;
  int v167;
  int v168;
  uint64_t v169;
  unsigned int v170;
  uint64_t v171;
  CA::Render *v172;
  CA::ScalerUtil::ScalerLimits *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t surface;
  float v177;
  unsigned int *v178;
  uint64_t v179;
  uint64_t v180;
  CA::ScalerStatistics *v181;
  uint8_t *v182;
  unsigned int *v183;
  unsigned int v184;
  unsigned int v185;
  NSObject *v186;
  const char *v187;
  int v188;
  unsigned int v189;
  int v190;
  int v191;
  unsigned int v192;
  unsigned int v193;
  char *v194;
  char *v195;
  int v196;
  float64x2_t v197;
  uint64_t v198;
  char v199;
  float64x2_t v200;
  unsigned int *v201;
  char *v202;
  int v203;
  IOSurfaceID ID;
  unsigned int v205;
  unsigned int v206;
  pthread_mutex_t *v207;
  unsigned int v208;
  double *v209;
  CA::Rect *v210[2];
  float64x2_t *v211;
  uint64_t v213;
  CA::ScalerStatistics *v214;
  __int128 v215;
  int v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  unsigned int v223;
  _BYTE v224[32];
  uint8_t buf[40];
  uint64_t v226;

  v226 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    if (CADeviceIsVirtualized::once[0] != -1)
      dispatch_once(CADeviceIsVirtualized::once, &__block_literal_global_204);
    LODWORD(v213) = 0;
    if (CADeviceIsVirtualized::is_virtualized)
      v17 = 11;
    else
      v17 = 1;
    goto LABEL_11;
  }
  v15 = a8;
  v16 = *((_QWORD *)a2 + 12);
  v223 = a8;
  if (CADeviceIsVirtualized::once[0] != -1)
    dispatch_once(CADeviceIsVirtualized::once, &__block_literal_global_204);
  v213 = (v16 >> 15) & 1;
  if (CADeviceIsVirtualized::is_virtualized)
  {
    v17 = 11;
    goto LABEL_11;
  }
  if (!*((_QWORD *)this + 3307))
  {
    v17 = 1;
    goto LABEL_11;
  }
  if (a5
    && ((*((unsigned int *)a5 + 56) | ((unint64_t)*((unsigned __int8 *)a5 + 228) << 32)) & 0x1000000000) != 0)
  {
    v17 = 16;
    goto LABEL_11;
  }
  v23 = (char *)*((_QWORD *)this + 3251);
  memset(buf, 0, 32);
  if (!v23 || (v23[292] & 1) != 0)
  {
    if ((v15 & 0x400) != 0)
    {
      v17 = 8;
      goto LABEL_11;
    }
    v203 = 0;
  }
  else
  {
    if (*(CA::Render::Handle **)v23 != a2)
    {
      v17 = 2;
      goto LABEL_11;
    }
    if ((v15 & 0x40) != 0)
    {
      v15 |= *((_DWORD *)v23 + 9) & 0xD800008F;
      v223 = v15;
      v24 = *((_OWORD *)v23 + 17);
      *(_OWORD *)buf = *((_OWORD *)v23 + 16);
      *(_OWORD *)&buf[16] = v24;
    }
    v203 = *((_DWORD *)v23 + 10);
  }
  v221 = 0u;
  v222 = 0u;
  if (a7)
  {
    v25 = a7;
    if ((*((_BYTE *)this + 745) & 4) != 0)
    {
      v26 = *a7;
      v27 = a7[1];
      v221 = *a7;
      v222 = v27;
      v29 = *((_QWORD *)this + 19);
      v28 = *((_QWORD *)this + 20);
      v30.i64[0] = (int)v28;
      v30.i64[1] = SHIDWORD(v28);
      v31 = vcvtq_f64_s64(v30);
      v33 = *((_QWORD *)this + 25);
      v32 = *((_QWORD *)this + 26);
      v30.i64[0] = (int)v32;
      v30.i64[1] = SHIDWORD(v32);
      v34 = vdivq_f64(v31, vcvtq_f64_s64(v30));
      v30.i64[0] = (int)v29;
      v30.i64[1] = SHIDWORD(v29);
      v35 = vcvtq_f64_s64(v30);
      v30.i64[0] = (int)v33;
      v30.i64[1] = SHIDWORD(v33);
      v36 = vcvtq_f64_s64(v30);
      if (v34.f64[0] != 1.0 && v27.f64[0] < 1.79769313e308)
      {
        *(_QWORD *)&v221.f64[0] = *(_OWORD *)&vmulq_f64(v26, v34);
        *(_QWORD *)&v222.f64[0] = *(_OWORD *)&vmulq_f64(v27, v34);
      }
      v38 = vmlsq_f64(v35, v36, v34);
      if (v34.f64[1] != 1.0 && v27.f64[1] < 1.79769313e308)
      {
        v221.f64[1] = vmulq_f64(v26, v34).f64[1];
        v222.f64[1] = v27.f64[1] * v34.f64[1];
      }
      v221 = vaddq_f64(v38, v221);
      v25 = &v221;
    }
  }
  else
  {
    v25 = 0;
  }
  v40 = v15;
  if ((v15 & 0x48) == 8)
  {
    v40 = v15;
    if (a6[1].f64[0] == v25[1].f64[0])
    {
      v40 = v15;
      if (a6[1].f64[1] == v25[1].f64[1])
      {
        v40 = v15 & 0xFFFFFFF7;
        v223 = v15 & 0xFFFFFFF7;
      }
    }
  }
  v41 = (char *)this + 25672;
  v219 = 0u;
  v220 = 0u;
  v217 = 0u;
  v218 = 0u;
  if (a6 && v25)
  {
    v208 = v40;
    *(float64x2_t *)v210 = *a6;
    v200 = a6[1];
    v219 = *a6;
    v220 = v200;
    v42 = *(int32x4_t *)v25;
    v43 = (int32x4_t)v25[1];
    v217 = *v25;
    v218 = (float64x2_t)v43;
    v44 = *((_DWORD *)this + 40);
    v45 = *((_DWORD *)this + 41);
    if (v44 <= v45)
      v46 = *((_DWORD *)this + 41);
    else
      v46 = *((_DWORD *)this + 40);
    v42.i32[0] = 1073741822;
    v43.i32[0] = v46;
    v47 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v43, v42), 0);
    v48 = *((_QWORD *)this + 19);
    v49.i64[0] = (int)v48;
    v49.i64[1] = SHIDWORD(v48);
    v50 = vbslq_s8(v47, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v49));
    v51 = (double)v44;
    v52 = (double)v45;
    if (v46 > 1073741822)
    {
      v51 = 1.79769313e308;
      v52 = 1.79769313e308;
    }
    v197 = (float64x2_t)v50;
    *(int8x16_t *)v224 = v50;
    *(double *)&v224[16] = v51;
    *(double *)&v224[24] = v52;
    v53 = CA::BoundsImpl::contains((double *)v224, v217.f64);
    v59 = v200;
    v60 = *(float64x2_t *)v210;
    if (!v53)
    {
      CA::OGL::clip_detached_rects(&v219, &v217, (CA::Rect *)v208, v54, v197, *(float64x2_t *)&v224[16], v55, v200.f64[0], v56, v57, *(double *)v210, v58);
      v60 = v219;
      v59 = v220;
    }
    v61 = vrndaq_f64(v60);
    if (vaddvq_f64(vabdq_f64(v60, v61))
       + vabdd_f64(v59.f64[0], round(v59.f64[0]))
       + vabdd_f64(v59.f64[1], round(v59.f64[1])) < 0.004)
    {
      v62 = v220.f64[1];
      v63 = v220.f64[0] <= v220.f64[1] ? v220.f64[1] : v220.f64[0];
      if (v63 < 1.79769313e308)
      {
        if (v220.f64[0] < v220.f64[1])
          v62 = v220.f64[0];
        if (v62 > 0.0)
        {
          v219 = v61;
          v220 = vsubq_f64(vrndaq_f64(vaddq_f64(v60, v220)), v61);
        }
      }
    }
    v64 = vrndaq_f64(v217);
    v41 = (char *)this + 25672;
    v40 = v208;
    if (vaddvq_f64(vabdq_f64(v217, v64))
       + vabdd_f64(v218.f64[0], round(v218.f64[0]))
       + vabdd_f64(v218.f64[1], round(v218.f64[1])) < 0.004)
    {
      v65 = v218.f64[1];
      v66 = v218.f64[0] <= v218.f64[1] ? v218.f64[1] : v218.f64[0];
      if (v66 < 1.79769313e308)
      {
        if (v218.f64[0] < v218.f64[1])
          v65 = v218.f64[0];
        if (v65 > 0.0)
        {
          v67 = vsubq_f64(vrndaq_f64(vaddq_f64(v217, v218)), v64);
          v217 = v64;
          v218 = v67;
        }
      }
    }
    v211 = &v219;
    v25 = &v217;
  }
  else
  {
    v211 = a6;
  }
  if (v23 && (v23[292] & 1) == 0)
  {
    v68 = v40 ^ *((_DWORD *)v23 + 9);
    v69 = (CA::Render::Texture *)*((_QWORD *)v23 + 1);
    if ((v68 & 0x10F) != 0 || v69 != a4)
    {
      if (v69 != a4)
        goto LABEL_134;
      v70 = (CA::WindowServer::Surface *)*((_QWORD *)v23 + 2);
    }
    else
    {
      v70 = (CA::WindowServer::Surface *)*((_QWORD *)v23 + 2);
      if (v70 == a5)
      {
        if ((v40 & 0x40) != 0)
          goto LABEL_113;
        v70 = a5;
        if (*((double *)v23 + 20) == v25->f64[0])
        {
          v70 = a5;
          if (*((double *)v23 + 21) == v25->f64[1])
          {
            v70 = a5;
            if (*((double *)v23 + 22) == v25[1].f64[0])
            {
              v70 = a5;
              if (*((double *)v23 + 23) == v25[1].f64[1])
              {
                v70 = a5;
                if (*((double *)v23 + 16) == v211->f64[0])
                {
                  v70 = a5;
                  if (*((double *)v23 + 17) == v211->f64[1])
                  {
                    v70 = a5;
                    if (*((double *)v23 + 18) == v211[1].f64[0])
                    {
                      v70 = a5;
                      if (*((double *)v23 + 19) == v211[1].f64[1])
                      {
                        v70 = a5;
                        if (*((double *)v23 + 12) == a7->f64[0])
                        {
                          v70 = a5;
                          if (*((double *)v23 + 13) == a7->f64[1])
                          {
                            v70 = a5;
                            if (*((double *)v23 + 14) == a7[1].f64[0])
                            {
                              v70 = a5;
                              if (*((double *)v23 + 15) == a7[1].f64[1])
                              {
LABEL_113:
                                if (a9)
                                {
                                  v71 = v23;
                                  v17 = 0;
                                  *a9 = *((_DWORD *)v71 + 11);
                                  goto LABEL_11;
                                }
LABEL_318:
                                v17 = 0;
                                goto LABEL_11;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (v70 == a5
      && v68 <= 7
      && (!v25
       || *((double *)v23 + 20) == v25->f64[0]
       && *((double *)v23 + 21) == v25->f64[1]
       && *((double *)v23 + 22) == v25[1].f64[0]
       && *((double *)v23 + 23) == v25[1].f64[1])
      && (!v211
       || *((double *)v23 + 16) == v211->f64[0]
       && *((double *)v23 + 17) == v211->f64[1]
       && *((double *)v23 + 18) == v211[1].f64[0]
       && *((double *)v23 + 19) == v211[1].f64[1]))
    {
      v72 = 1.0;
      if (!a7
        || *((double *)v23 + 12) == a7->f64[0]
        && *((double *)v23 + 13) == a7->f64[1]
        && *((double *)v23 + 14) == a7[1].f64[0]
        && *((double *)v23 + 15) == a7[1].f64[1])
      {
        v195 = v23;
        v132 = 0;
        v94 = 1.0;
        if ((v40 & 0x40) != 0)
          goto LABEL_301;
        goto LABEL_278;
      }
    }
  }
LABEL_134:
  v41[2379] = 1;
  if (!a5)
  {
    v17 = 3;
    goto LABEL_11;
  }
  v201 = (unsigned int *)v41;
  (*(void (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1832))(this);
  if (a4 && *((_QWORD *)a4 + 6) && (((unint64_t)*((unsigned __int8 *)a5 + 228) << 32) & 0x2000000000) == 0)
    (*(void (**)(CA::WindowServer::Surface *))(*(_QWORD *)a5 + 96))(a5);
  v216 = 0;
  __asm { FMOV            V0.2D, #1.0 }
  v215 = _Q0;
  if (v23 && (v223 & 0x40) != 0)
    v215 = *((_OWORD *)v23 + 3);
  v209 = (double *)v25;
  v76 = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *, unsigned int *, __int128 *, CA::WindowServer::Surface *, float64x2_t *, float64x2_t *, int *))(*(_QWORD *)this + 2288))(this, &v223, &v215, a5, v211, v25, &v216);
  v77 = (*(uint64_t (**)(CA::WindowServer::Surface *))(*(_QWORD *)a5 + 160))(a5);
  if (v77)
  {
    v78 = (__IOSurface *)v77;
    IOSurfaceSetDetachModeCode();
    if (!byte_1ECDC6A6E)
      goto LABEL_147;
    ID = IOSurfaceGetID(v78);
  }
  else
  {
    if (!byte_1ECDC6A6E)
      goto LABEL_147;
    ID = 0;
  }
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v186 = x_log_category_CADebug;
    if (os_log_type_enabled((os_log_t)x_log_category_CADebug, OS_LOG_TYPE_INFO))
    {
      if (v76 > 0x26)
        v187 = "UNKNOWN";
      else
        v187 = CA::detach_string_display(CA::DisplayDetachReasonCode)::names[v76];
      *(_DWORD *)v224 = 67109378;
      *(_DWORD *)&v224[4] = ID;
      *(_WORD *)&v224[8] = 2080;
      *(_QWORD *)&v224[10] = v187;
      _os_log_impl(&dword_184457000, v186, OS_LOG_TYPE_INFO, "[Display] Surface ID:0x%x detach result: %s", v224, 0x12u);
    }
  }
LABEL_147:
  if (v76)
  {
    v17 = 7;
    goto LABEL_11;
  }
  v79 = v223;
  v80 = v223 & 0xBF800080;
  if ((v223 & 0xBF800080) == 0x80000000)
  {
    v81 = *((_DWORD *)a5 + 16);
    v205 = v223;
    v82 = CA::Render::fourcc_compressed_of_type((CA::Render *)v81, 0, 0);
    v79 = v205;
    v83 = v82 == v81;
    v80 = 0x80000000;
  }
  else
  {
    v83 = 0;
  }
  v84 = (const CA::Rect *)v209;
  v85 = v79 & 7;
  if (!v80 || v83)
  {
    v206 = v79 & 7;
    if (((*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 2272))(this) & 1) != 0)
    {
      v86 = *((_QWORD *)a2 + 2);
      if (v86)
      {
        v87 = *(_QWORD *)(v86 + 96);
        if (v87)
        {
          if (*(_BYTE *)(v87 + 12) == 25)
            *(_BYTE *)(v87 + 168) = 0;
        }
      }
      if ((CA::WindowServer::IOMFBDisplay::exceeds_disp_bandwidth_limits_p(this, a5, v223, v211, (const CA::Rect *)v209) & 1) == 0)
      {
        *((_DWORD *)a5 + 56) = *((_DWORD *)a5 + 56) & 0xFFFF0000 | (unsigned __int16)(*((_DWORD *)a5 + 56) + 1);
        v72 = 1.0;
        v89 = v206;
        if (v206)
        {
          if (byte_1ECDC6AAD)
          {
            CA::WindowServer::rotate_surface_log(a5, (CA::WindowServer::Surface *)v206, v88);
            v89 = v206;
          }
          v196 = 0;
          v193 = 0;
          v203 = 2 * v89;
        }
        else
        {
          v203 = 0;
          v196 = 0;
          v193 = 0;
        }
        v94 = 1.0;
        v125 = a5;
        if (!v23)
          goto LABEL_267;
        goto LABEL_268;
      }
LABEL_230:
      v17 = 15;
      goto LABEL_11;
    }
    v79 = v223;
    v85 = v206;
    v84 = (const CA::Rect *)v209;
  }
  LODWORD(v90) = *((_DWORD *)a5 + 14);
  v91 = *((_DWORD *)a5 + 15);
  if ((v79 & 0x80) != 0)
  {
    if ((v79 & 0x40000000) != 0)
    {
      v97 = (double *)(v23 + 128);
      if ((v79 & 0x40) == 0)
        v97 = (double *)v211;
      v98 = *v97 + 0.5;
      v99 = (double *)(v23 + 136);
      if ((v79 & 0x40) == 0)
        v99 = &v211->f64[1];
      v100 = floor(*v99 + 0.5);
      *(_QWORD *)buf = floor(v98);
      *(double *)&buf[8] = v100;
      f64 = (double *)(v23 + 144);
      if ((v79 & 0x40) == 0)
        f64 = v211[1].f64;
      v102 = round(*f64);
      v103 = (double *)(v23 + 152);
      if ((v79 & 0x40) == 0)
        v103 = &v211[1].f64[1];
      v104 = round(*v103);
      *(double *)&buf[16] = v102;
      *(double *)&buf[24] = v104;
    }
    v105 = (double *)(v23 + 176);
    if ((v79 & 0x40) == 0)
      v105 = (double *)((char *)v84 + 16);
    v106 = *v105;
    v107 = (double *)(v23 + 184);
    if ((v79 & 0x40) == 0)
      v107 = (double *)((char *)v84 + 24);
    v108 = *v107;
    v109 = (double *)(v23 + 144);
    if ((v79 & 0x40) == 0)
      v109 = v211[1].f64;
    v110 = (double *)(v23 + 152);
    if ((v79 & 0x40) == 0)
      v110 = &v211[1].f64[1];
    if ((v79 & 4) != 0)
      v111 = v108;
    else
      v111 = v106;
    v92 = v111 / *v109;
    if ((v79 & 4) == 0)
      v106 = v108;
    v93 = v106 / *v110;
    v72 = v93;
    v94 = v92;
  }
  else
  {
    if ((v79 & 0x8000000) == 0)
      goto LABEL_169;
    v93 = *((double *)&v215 + 1);
    v92 = *(double *)&v215;
    v72 = 1.0;
    if (*(double *)&v215 == 1.0)
    {
      v94 = 1.0;
      if (*((double *)&v215 + 1) == 1.0)
      {
LABEL_169:
        v95 = *((_QWORD *)a2 + 2);
        v94 = 1.0;
        if (v95)
        {
          v96 = *(_QWORD *)(v95 + 96);
          if (v96)
          {
            if (*(_BYTE *)(v96 + 12) == 25)
              *(_BYTE *)(v96 + 168) = 0;
          }
        }
        v72 = 1.0;
        goto LABEL_204;
      }
    }
    else
    {
      v94 = 1.0;
    }
  }
  v112 = *((_QWORD *)a2 + 2);
  if (v112)
  {
    v113 = *(_QWORD *)(v112 + 96);
    if (v113)
    {
      if (*(_BYTE *)(v113 + 12) == 25)
        *(_BYTE *)(v113 + 168) = 1;
    }
  }
  if (((*((unsigned int *)a5 + 56) | ((unint64_t)*((unsigned __int8 *)a5 + 228) << 32)) & 0x2000000000) != 0)
  {
    v17 = 17;
    goto LABEL_11;
  }
  LODWORD(v90) = vcvtad_u64_f64(v92 * (double)v90);
  v91 = vcvtad_u64_f64(v93 * (double)v91);
LABEL_204:
  if ((v79 & 4) != 0)
    v114 = v90;
  else
    v114 = v91;
  if ((v79 & 4) != 0)
    LODWORD(v90) = v91;
  if ((~(_DWORD)v79 & 0x40000080) != 0)
    goto LABEL_216;
  v115 = (double *)(v23 + 176);
  if ((v79 & 0x40) == 0)
    v115 = (double *)((char *)v84 + 16);
  v116 = *v115;
  v117 = (double *)(v23 + 184);
  if ((v79 & 0x40) == 0)
    v117 = (double *)((char *)v84 + 24);
  v118 = *v117;
  if (v90 <= v116 && v114 <= v118)
  {
LABEL_216:
    v119 = v85;
    v196 = 0;
    v190 = 1;
  }
  else
  {
    v119 = v85;
    v190 = 0;
    if (v114 >= v118)
      v114 = v118;
    if (v90 >= v116)
      LODWORD(v90) = v116;
    v196 = 1;
  }
  v191 = *((_DWORD *)a5 + 16);
  if (v216 == 2)
    v120 = (v114 + 1) & 0xFFFFFFFE;
  else
    v120 = v114;
  if (v216 == 2)
    v90 = ((_DWORD)v90 + 1) & 0xFFFFFFFE;
  else
    v90 = v90;
  v207 = (pthread_mutex_t *)v90;
  v198 = v120;
  *(_QWORD *)v224 = 0;
  *(_QWORD *)&v224[8] = 0;
  *(double *)&v224[16] = (double)v90;
  *(double *)&v224[24] = (double)v120;
  if ((CA::WindowServer::IOMFBDisplay::exceeds_disp_bandwidth_limits_p(this, a5, v79, (float64x2_t *)v224, v84) & 1) != 0)
    goto LABEL_230;
  if ((v223 & 8) != 0)
    v121 = 768;
  else
    v121 = 256;
  v122 = v121 | v119;
  _ZF = v216 == 2 && (v223 & 0x12000000) == 0x10000000;
  v124 = v122 | 0x2000;
  if (!_ZF)
    v124 = v122;
  v193 = v124;
  if (v23)
  {
    v125 = (CA::WindowServer::Surface *)*((_QWORD *)v23 + 3);
    if (v125)
    {
      if (*((CA::WindowServer::Surface **)v23 + 2) == a5
        && *((_DWORD *)v23 + 11) == v124
        && *((_DWORD *)v125 + 14) == (_DWORD)v207
        && *((_DWORD *)v125 + 15) == (_DWORD)v198
        && *((double *)v23 + 6) == *(double *)&v215
        && *((double *)v23 + 7) == *((double *)&v215 + 1)
        && *((double *)v23 + 32) == *(double *)buf
        && *((double *)v23 + 33) == *(double *)&buf[8]
        && *((double *)v23 + 34) == *(double *)&buf[16]
        && *((double *)v23 + 35) == *(double *)&buf[24]
        && (v23[292] & 2) == 0)
      {
        v194 = v23;
        *((_DWORD *)v125 + 56) = *((_DWORD *)v125 + 56) & 0xFFFF0000 | (unsigned __int16)(*((_DWORD *)v125 + 56) + 1);
        goto LABEL_421;
      }
    }
  }
  if (!(*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *, _QWORD, _QWORD, pthread_mutex_t *, uint64_t))(*(_QWORD *)this + 144))(this, *((unsigned int *)a5 + 14), *((unsigned int *)a5 + 15), v207, v198))
  {
    v17 = 4;
    goto LABEL_11;
  }
  v194 = v23;
  if (v216 == 2)
  {
    if (v209)
    {
      if ((_DWORD)v207 == v209[2] && (_DWORD)v198 == v209[3])
      {
        v126 = v201[372];
        if (v126 == 1)
        {
          if (v191 == 875704438)
          {
            v158 = 875704950;
          }
          else
          {
            if (v191 != 875704422)
              goto LABEL_343;
            v158 = 875704934;
          }
          goto LABEL_342;
        }
        if (v126 == 2)
        {
          if (v191 > 875704933)
          {
            if (v191 == 875704950)
            {
LABEL_340:
              v158 = 875836534;
              goto LABEL_342;
            }
            if (v191 != 875704934)
              goto LABEL_343;
          }
          else if (v191 != 875704422)
          {
            if (v191 != 875704438)
              goto LABEL_343;
            goto LABEL_340;
          }
          v158 = 875836518;
LABEL_342:
          v191 = v158;
          goto LABEL_343;
        }
        if (*((_BYTE *)v201 + 2399))
        {
          if (CADeviceUseCompression::once != -1)
            dispatch_once(&CADeviceUseCompression::once, &__block_literal_global_15);
          if (!CADeviceUseCompression::enable_compression)
          {
            if (v191 > 2016686639)
            {
              if (v191 > 2019963439)
              {
                if (v191 == 2019963440 || v191 == 2019963956)
                  goto LABEL_441;
                v161 = 2019963442;
              }
              else
              {
                if (v191 == 2016686640 || v191 == 2016686642)
                  goto LABEL_441;
                v161 = 2016687156;
              }
            }
            else
            {
              if (v191 <= 1953903151)
              {
                if (v191 != 1952854576 && v191 != 1952854578)
                {
                  v161 = 1952855092;
                  goto LABEL_440;
                }
LABEL_441:
                v191 = CA::Render::fourcc_packed_from_unpacked((CA::Render *)v191);
                goto LABEL_343;
              }
              if (v191 == 1953903152 || v191 == 1953903154)
                goto LABEL_441;
              v161 = 1953903668;
            }
LABEL_440:
            if (v191 != v161)
              goto LABEL_343;
            goto LABEL_441;
          }
        }
      }
    }
    else if (v23)
    {
      v157 = *((_QWORD *)v23 + 3);
      if (v157)
      {
        if (*(_DWORD *)(*((_QWORD *)v23 + 2) + 64) == v191)
        {
          v158 = *(_DWORD *)(v157 + 64);
          goto LABEL_342;
        }
      }
    }
  }
LABEL_343:
  v162 = (*(uint64_t (**)(CA::WindowServer::Surface *))(*(_QWORD *)a5 + 56))(a5);
  if ((v223 & 0x800000) != 0)
  {
    if ((*((_DWORD *)this + 156) & 8) != 0)
      v165 = 1999843442;
    else
      v165 = 1111970369;
    v163 = 2;
    v164 = v201;
  }
  else
  {
    v163 = v162;
    v164 = v201;
    v165 = v191;
    if ((v223 & 0x1000000) != 0)
    {
      if (v216 == 2)
      {
        if ((*((_DWORD *)this + 156) & 8) != 0)
          v165 = 1885745712;
        else
          v165 = 875704422;
      }
      else
      {
        v165 = 1111970369;
      }
      v163 = 4;
    }
  }
  if (!*((_BYTE *)v164 + 2399))
    goto LABEL_359;
  if (CADeviceUseCompression::once != -1)
  {
    v192 = v165;
    v188 = v163;
    dispatch_once(&CADeviceUseCompression::once, &__block_literal_global_15);
    v163 = v188;
    v165 = v192;
  }
  if (CADeviceUseCompression::enable_compression)
  {
LABEL_359:
    if ((int)v165 > 1885746227)
    {
      if (((v165 - 1886676528) > 4 || ((1 << (v165 - 48)) & 0x15) == 0)
        && ((v165 - 1886680624) > 4 || ((1 << (v165 - 48)) & 0x15) == 0))
      {
        v166 = 13364;
        goto LABEL_368;
      }
    }
    else if ((int)v165 <= 1882469427)
    {
      if ((_DWORD)v165 != 1882468912)
      {
        v167 = 1882468914;
LABEL_373:
        if ((_DWORD)v165 != v167)
          goto LABEL_375;
      }
    }
    else if ((_DWORD)v165 != 1882469428 && (_DWORD)v165 != 1885745712)
    {
      v166 = 12850;
LABEL_368:
      v167 = v166 | 0x70660000;
      goto LABEL_373;
    }
    v168 = v163;
    LODWORD(v165) = CA::Render::fourcc_unpacked_from_packed((CA::Render *)v165);
    v163 = v168;
  }
LABEL_375:
  if ((v223 & 0x4000000) != 0)
  {
    v216 = 0;
    v163 = 2;
    LODWORD(v165) = 1999843442;
  }
  if ((((_DWORD)v165 == 1999843442) & (v223 >> 25)) != 0)
    v169 = 2019964016;
  else
    v169 = v165;
  if ((((_DWORD)v165 == 1999843442) & (v223 >> 25)) != 0)
    v170 = 4;
  else
    v170 = v163;
  if ((v223 & 0x20000000) != 0)
    v169 = CA::Render::fourcc_422_from_420((CA::Render *)v169);
  if (CA::Render::fourcc_is_420((CA::Render *)v169)
    && (*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *, pthread_mutex_t *))(*(_QWORD *)this + 2168))(this, v207))
  {
    v169 = CA::Render::fourcc_422_from_420((CA::Render *)v169);
  }
  if ((v223 & 0x80000000) != 0)
    v171 = CA::Render::fourcc_compressed_of_type((CA::Render *)v169, 0, 0);
  else
    v171 = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *, uint64_t, pthread_mutex_t *))(*(_QWORD *)this + 2280))(this, v169, v207);
  v172 = (CA::Render *)v171;
  if (((_DWORD)v171 == 1380411457 || (_DWORD)v171 == 642934849) && CA::WindowServer::Display::edr_headroom(this) > 1.0)
  {
    CA::ScalerUtil::ScalerLimits::limits(v173);
    if (!HIBYTE(dword_1EDD110CC))
    {
      v17 = 12;
      goto LABEL_11;
    }
  }
  if (a4 && (*((_BYTE *)a4 + 15) & 8) != 0)
  {
    v17 = 13;
    goto LABEL_11;
  }
  v174 = (*(uint64_t (**)(CA::WindowServer::Surface *))(*(_QWORD *)a5 + 24))(a5);
  v175 = (*(uint64_t (**)(CA::WindowServer::Surface *))(*(_QWORD *)a5 + 216))(a5);
  surface = CA::WindowServer::Display::allocate_surface((uint64_t)this, (uint64_t)v207, v198, v172, v174, v170, 0, v175, (uint64_t)CFSTR("CA MSR Intermediate"), 0);
  if (!surface)
  {
    v17 = 5;
    goto LABEL_11;
  }
  v125 = (CA::WindowServer::Surface *)surface;
  v193 = v193 & 0xFFFFBFFF | (((*((unsigned __int8 *)a5 + 228) >> 5) & 1) << 14);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 25688));
  v178 = (unsigned int *)((char *)this + 48 * *v201 + 25776);
  if (!*v178)
    CA::IOMobileFramebuffer::swap_begin((CA::WindowServer::IOMFBDisplay *)((char *)this + 25536), v178);
  if ((v223 & 0x10000000) != 0
    && (v179 = *((_QWORD *)a2 + 2)) != 0
    && (v180 = *(_QWORD *)(v179 + 96)) != 0
    && *(_BYTE *)(v180 + 12) == 25)
  {
    CA::Render::ImageQueue::retain_scaler_stats((CA::Render::ImageQueue *)&v214, v180);
    v181 = v214;
    if (v214)
      *((_BYTE *)v214 + 12) = *((_BYTE *)a5 + 229);
  }
  else
  {
    v181 = 0;
  }
  if (v190)
    v182 = 0;
  else
    v182 = buf;
  v199 = CA::WindowServer::IOMFBDisplay::copy_surface(this, v125, a5, v193, 0, 0, (CA::Rect *)v182, v181, v177);
  if ((v199 & 1) != 0)
  {
    v17 = 12;
  }
  else
  {
    CA::WindowServer::Surface::unref(v125);
    v17 = 6;
  }
  if (v181)
  {
    v183 = (unsigned int *)((char *)v181 + 8);
    do
    {
      v184 = __ldaxr(v183);
      v185 = v184 - 1;
    }
    while (__stlxr(v185, v183));
    if (!v185)
      (*(void (**)(CA::ScalerStatistics *))(*(_QWORD *)v181 + 8))(v181);
  }
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 25688));
  if ((v199 & 1) != 0)
  {
LABEL_421:
    v203 = 0;
    v23 = v194;
    if (!v194)
LABEL_267:
      v23 = (char *)x_mem_alloc0(0x128uLL);
LABEL_268:
    if (!*(_QWORD *)v23)
    {
      v127 = (unsigned int *)((char *)a2 + 8);
      do
        v128 = __ldaxr(v127);
      while (__stlxr(v128 + 1, v127));
      v129 = a2;
      if (!v128)
      {
        v129 = 0;
        do
          v189 = __ldaxr(v127);
        while (__stlxr(v189 - 1, v127));
      }
      *(_QWORD *)v23 = v129;
    }
    v130 = (CA::WindowServer::Surface *)*((_QWORD *)v23 + 2);
    if (v130)
      CA::WindowServer::Surface::unref(v130);
    *((_DWORD *)a5 + 56) = *((_DWORD *)a5 + 56) & 0xFFFF0000 | (unsigned __int16)(*((_DWORD *)a5 + 56) + 1);
    *((_QWORD *)v23 + 2) = a5;
    v131 = (CA::WindowServer::Surface *)*((_QWORD *)v23 + 3);
    if (v131)
      CA::WindowServer::Surface::unref(v131);
    *((_QWORD *)v23 + 3) = v125;
    *((_DWORD *)v23 + 11) = v193;
    *((_OWORD *)v23 + 3) = v215;
    v40 = v223;
    v195 = v23;
    v23[292] = (v223 >> 3) & 4 | v23[292] & 0xF8;
    v41 = (char *)v201;
    *((_BYTE *)v201 + 713) = v216;
    v132 = v196 != 0;
    v25 = (float64x2_t *)v209;
    if ((v40 & 0x40) != 0)
    {
LABEL_301:
      *((_DWORD *)v195 + 9) = v40 & 0xFFFFFFBF;
      *((_DWORD *)v195 + 10) = v203;
      v148 = (CA::Render::Texture *)*((_QWORD *)v195 + 1);
      if (v148 != a4)
      {
        if (v148)
        {
          v149 = (unsigned int *)((char *)v148 + 8);
          do
          {
            v150 = __ldaxr(v149);
            v151 = v150 - 1;
          }
          while (__stlxr(v151, v149));
          if (!v151)
          {
            v152 = v41;
            (*(void (**)(CA::Render::Texture *))(*(_QWORD *)v148 + 16))(v148);
            v41 = v152;
          }
        }
        if (a4)
        {
          v153 = (unsigned int *)((char *)a4 + 8);
          do
            v154 = __ldaxr(v153);
          while (__stlxr(v154 + 1, v153));
          v155 = a4;
          if (!v154)
          {
            v155 = 0;
            do
              v156 = __ldaxr(v153);
            while (__stlxr(v156 - 1, v153));
          }
        }
        else
        {
          v155 = 0;
        }
        *((_QWORD *)v195 + 1) = v155;
      }
      *((_QWORD *)this + 3251) = v195;
      v41[712] = 1;
      if (a9)
      {
        v17 = 0;
        *a9 = *((_DWORD *)v195 + 11);
        goto LABEL_11;
      }
      goto LABEL_318;
    }
LABEL_278:
    v202 = v41;
    *((float64x2_t *)v195 + 8) = *v211;
    *((float64x2_t *)v195 + 9) = v211[1];
    *((float64x2_t *)v195 + 10) = *v25;
    *((float64x2_t *)v195 + 11) = v25[1];
    v133 = v211->f64[0];
    *((_QWORD *)v195 + 24) = *(_QWORD *)&v211->f64[0];
    v134 = (float64x2_t *)(v195 + 192);
    v135 = v211->f64[1];
    *((double *)v195 + 25) = v135;
    v136 = v211[1].f64[0];
    *((double *)v195 + 26) = v136;
    v137 = v211[1].f64[1];
    *((double *)v195 + 27) = v137;
    *((float64x2_t *)v195 + 14) = *v25;
    *((float64x2_t *)v195 + 15) = v25[1];
    *((float64x2_t *)v195 + 4) = *a6;
    *((float64x2_t *)v195 + 5) = a6[1];
    *((float64x2_t *)v195 + 6) = *a7;
    *((float64x2_t *)v195 + 7) = a7[1];
    HIDWORD(v138) = *(_DWORD *)&buf[4];
    v139 = *(_OWORD *)&buf[16];
    *((_OWORD *)v195 + 16) = *(_OWORD *)buf;
    *((_OWORD *)v195 + 17) = v139;
    *((_DWORD *)v195 + 8) = v15;
    if (*((CA::WindowServer::Surface **)v195 + 3) == a5)
    {
LABEL_298:
      CA::Rect::round_center(v134);
      CA::Rect::round_center((float64x2_t *)v195 + 14);
      if (v132)
      {
        *((_QWORD *)v195 + 24) = 0;
        *((_QWORD *)v195 + 25) = 0;
        v146 = *(_QWORD *)(*((_QWORD *)v195 + 3) + 56);
        v147.i64[0] = v146;
        v147.i64[1] = HIDWORD(v146);
        *((float64x2_t *)v195 + 13) = vcvtq_f64_u64(v147);
      }
      v41 = v202;
      v202[2379] = 1;
      v40 = v223;
      goto LABEL_301;
    }
    LODWORD(v138) = *((_DWORD *)a5 + 14);
    LODWORD(v139) = *((_DWORD *)a5 + 15);
    v140 = (double)v138;
    *(double *)&v139 = (double)(unint64_t)v139;
    if ((v40 & 0x8000000) != 0)
    {
      v141 = (double *)v195;
      v94 = *((double *)v195 + 6);
      v72 = *((double *)v195 + 7);
      v133 = v94 * v133;
    }
    else
    {
      if (v94 == 1.0 && v72 == 1.0)
      {
LABEL_291:
        if ((v40 & 4) != 0)
        {
          v144 = v135 + v137;
          v135 = v133;
          v145 = *(double *)&v139 - v144;
          *((double *)v195 + 24) = *(double *)&v139 - v144;
          *((double *)v195 + 25) = v133;
          *((double *)v195 + 26) = v137;
          *((double *)v195 + 27) = v136;
          v142 = v136;
          v133 = v145;
          v143 = *(double *)&v139;
        }
        else
        {
          v142 = v137;
          v137 = v136;
          v143 = v140;
          v140 = *(double *)&v139;
        }
        if ((v40 & 2) != 0)
          v134->f64[0] = v143 - (v133 + v137);
        if ((v40 & 1) != 0)
          *((double *)v195 + 25) = v140 - (v135 + v142);
        goto LABEL_298;
      }
      v133 = v133 * v94;
      v141 = (double *)v195;
    }
    v135 = v135 * v72;
    v141[24] = v133;
    v141[25] = v135;
    v136 = v136 * v94;
    *(double *)&v139 = v72 * *(double *)&v139;
    v140 = v94 * v140;
    v137 = v137 * v72;
    v141[26] = v136;
    v141[27] = v137;
    goto LABEL_291;
  }
LABEL_11:
  if (a5 && (v18 = (*(uint64_t (**)(CA::WindowServer::Surface *))(*(_QWORD *)a5 + 160))(a5)) != 0)
  {
    v19 = (__IOSurface *)v18;
    IOSurfaceSetDetachModeCode();
    if (!byte_1ECDC6A6E)
      goto LABEL_16;
    v20 = IOSurfaceGetID(v19);
  }
  else
  {
    if (!byte_1ECDC6A6E)
      goto LABEL_16;
    v20 = 0;
  }
  if (x_log_hook_p())
  {
    x_log_();
  }
  else
  {
    v159 = x_log_category_CADebug;
    if (os_log_type_enabled((os_log_t)x_log_category_CADebug, OS_LOG_TYPE_INFO))
    {
      v160 = CA::detach_string_server(CA::ServerDetachReasonCode)::names[v17];
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = v20;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = v160;
      _os_log_impl(&dword_184457000, v159, OS_LOG_TYPE_INFO, "[Server] Surface ID:0x%x detach result: %s", buf, 0x12u);
    }
  }
LABEL_16:
  if (v17 >= 3)
    CA::WindowServer::IOMFBDisplay::delete_detached_layer(this);
  if (a2 && !a7 && !a5 && !a4 && !a6)
  {
    if (a3)
      v21 = 0;
    else
      v21 = v213;
    if (*((_QWORD *)a2 + 5)
      && v21
      && (*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 552))(this))
    {
      *((_QWORD *)a2 + 12) |= 8uLL;
    }
  }
  return v17 == 0;
}

void CA::Render::Update::added_all_contexts(CA::Render::Update *this, CA::Render::LayerNode *a2, const CA::Shape *a3, int64x2_t a4)
{
  CA::Render::Update *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  const CA::Shape *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v14;
  _QWORD *v15;
  int32x2_t *v16;
  CA::Shape **v17;
  int64x2_t v18;
  uint64_t v19;
  uint64_t v20;
  const CA::Bounds *v21;
  const CA::Shape *v22;
  float v23;
  float v24;
  int v25;
  char v26;
  CA::Shape *v27;
  unint64_t v28;
  int v29;
  int v30;
  int v31;
  int32x2_t *v32;
  int32x2_t *v33;
  int32x4_t v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  int32x2_t v39;
  int64x2_t v40;
  int32x4_t v41;
  double v42;
  double v43;
  float v44;
  int v45;
  double v46;
  int v47;
  double v48;
  float v49;
  double v50;
  int v52;
  double v53;
  int64x2_t v55;
  float64x2_t v56;
  double v57;
  float64x2_t v58;
  int64x2_t v59;
  int64x2_t v60;
  int32x2_t v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  int v66;
  int v67;
  char v68;
  uint64_t v69;
  float64x2_t v70;
  float64x2_t v71;
  CA::Rect *v72;
  uint64_t v73;
  int v74;
  float64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  int8x16_t v78;
  int32x2_t v79;
  float64x2_t v80;
  int64x2_t v81;
  int32x4_t v82;
  uint64_t v83;
  int64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  int64x2_t v88;
  int64x2_t v89;
  unint64_t v90;
  int8x16_t v91;
  int8x16_t v92;
  float64x2_t v93;
  int32x4_t v94;
  int32x2_t v95;
  int32x2_t v96;
  uint32x2_t v97;
  unsigned __int32 v98;
  uint32x2_t v99;
  unsigned __int32 v100;
  int32x2_t v101;
  uint32x2_t v102;
  int32x2_t v103;
  uint32x2_t v104;
  int32x2_t v105;
  int32x2_t v106;
  int32x2_t v107;
  int32x2_t v108;
  int32x2_t v109;
  uint32x2_t v110;
  __int128 v111;
  int v112;
  int v113;
  unsigned int v114;
  int v115;
  int v116;
  uint32x2_t v117;
  __int128 v118;
  int32x2_t v119;
  uint32x2_t v120;
  const CA::Shape *v121;
  unint64_t v122;
  __int128 *v123;
  unint64_t v124;
  unint64_t v125;
  __int128 *v126;
  char *v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 *v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  float64x2_t *v141;
  float64x2_t v142;
  float64x2_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  double v148;
  double v149;
  double v150;
  int8x16_t v151;
  int8x16_t v152;
  int8x16_t v153;
  float64x2_t v154;
  int8x16_t v155;
  int8x16_t v156;
  float64x2_t v157;
  int64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  int64x2_t v161;
  int64x2_t v162;
  int32x2_t v163;
  float64x2_t v164;
  double v165;
  float64_t v166;
  _BOOL4 v167;
  unint64_t v168;
  _QWORD *i;
  CA::Shape **v170;
  unint64_t *v171;
  uint64_t v172;
  unint64_t v173;
  CA::Shape *v174;
  _QWORD *v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  const CA::Bounds *v182;
  CA::Shape *v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  CA::Render::Update *v187;
  int32x4_t v188;
  CA::Shape **v189;
  int32x4_t v190;
  int32x4_t v191;
  int64x2_t v192;
  int8x16_t v193;
  int8x16_t v194;
  float64x2_t v195;
  float64x2_t v196;
  __int128 v197;
  __int128 v198;
  CA::Shape **v199;
  float64x2_t v200;
  float64x2_t v201;
  CA::Shape *v202[2];
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  uint64_t v206;

  v4 = this;
  v206 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)this + 74);
  if (v5)
  {
    do
    {
      v6 = *(unsigned int **)v5;
      if (*(_QWORD *)v5)
      {
        v7 = *(unsigned int **)v5;
        while ((v7[6] & 0x18) == 0)
        {
          v8 = *(_QWORD *)(*((_QWORD *)v7 + 4) + 40);
          if ((v8 & 0x80000) != 0 || (v8 & 0x840000) == 0x840000)
            break;
          v7 = (unsigned int *)*((_QWORD *)v7 + 11);
          if (!v7)
            goto LABEL_8;
        }
      }
      else
      {
LABEL_8:
        v9 = *(_QWORD *)(*((_QWORD *)v6 + 32) + 40);
        CA::Render::Update::invalidate_backdrops((uint64_t)v4, *(CA::Shape **)(v9 + 480), 0, 0);
        CA::shape_union((CA::Shape **)v4 + 2, *(CA::Shape ***)(v9 + 480), v10);
      }
      v11 = v6 + 4;
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
        CA::Render::LayerNode::delete_node((CA::Render::LayerNode *)v6, a2);
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5);
    v14 = (_QWORD *)*((_QWORD *)v4 + 74);
    if (v14)
    {
      do
      {
        v15 = (_QWORD *)v14[1];
        free(v14);
        v14 = v15;
      }
      while (v15);
    }
    *((_QWORD *)v4 + 74) = 0;
  }
  v16 = (int32x2_t *)*((_QWORD *)v4 + 63);
  if (v16)
  {
    v17 = (CA::Shape **)((char *)v4 + 16);
    v187 = v4;
    a4.i64[0] = 0x7FF0000000000000;
    v192 = a4;
    v18 = vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL);
    v193 = (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v194 = (int8x16_t)v18;
    v18.i32[0] = 1073741822;
    v190 = (int32x4_t)v18;
    v191 = (int32x4_t)v18;
    v188 = (int32x4_t)v18;
    v189 = (CA::Shape **)((char *)v4 + 16);
    while (1)
    {
      v19 = *(_QWORD *)(*(_QWORD *)&v16[1] + 256);
      os_unfair_lock_lock((os_unfair_lock_t)(v19 + 36));
      v20 = *(_QWORD *)(v19 + 40);
      os_unfair_lock_lock((os_unfair_lock_t)(v20 + 40));
      v23 = *(float *)(*(_QWORD *)(v19 + 40) + 60);
      v24 = 0.0;
      if (v23 != 1.0)
        v24 = ceilf(0.5 / v23);
      v25 = *((_DWORD *)v4 + 62);
      if (*(_DWORD *)(v20 + 56) != v25 || *(_DWORD *)(v20 + 432) == v25)
      {
        v26 = 0;
        goto LABEL_24;
      }
      v62 = *((_DWORD *)v4 + 67);
      v63 = *((_QWORD *)v4 + 73);
      v64 = *(_DWORD *)(v20 + 12);
      *(_DWORD *)(v20 + 12) = v64 & 0xFFFFFBFF;
      *(_DWORD *)(v20 + 432) = v25;
      v65 = *(_QWORD *)(v20 + 560);
      if (v65)
        LODWORD(v65) = *(_DWORD *)(v65 + 16);
      v66 = (v64 >> 10) & 1;
      if (*(_DWORD *)(v20 + 556) != (_DWORD)v65)
        LOBYTE(v66) = 1;
      *(_DWORD *)(v20 + 556) = v65;
      v67 = (v62 >> 15) & 1;
      if ((v64 & 0x800) != 0)
        v68 = v66;
      else
        v68 = 1;
      if (*(unsigned __int8 *)(v20 + 569) == v67)
        v26 = v66;
      else
        v26 = v68;
      if (v63)
      {
        v69 = *(_QWORD *)(v20 + 48);
        if (!v69 || *(_QWORD *)(v69 + 8) != v63)
          v26 = 1;
      }
      v122 = *(_QWORD *)(v20 + 64);
      v123 = *(__int128 **)(v20 + 72);
      if (v123 == (__int128 *)v122)
      {
        v122 = *(_QWORD *)(v20 + 72);
      }
      else
      {
        v124 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)((uint64_t)v123 - v122) >> 3);
        do
        {
          v125 = v124 - 1;
          if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)((uint64_t)v123 - v122) >> 3) <= v124 - 1)
LABEL_210:
            __assert_rtn("operator[]", "x-small-vector.h", 91, "pos < size () && \"Out of bounds access\"");
          if (*(_DWORD *)(v122 + 168 * v125 + 164) != v25 || !*(_QWORD *)(v122 + 168 * v125 + 8))
          {
            v126 = (__int128 *)(v122 + 168 * v124);
            if (v126 != v123)
            {
              v127 = (char *)v126 - 168;
              do
              {
                v128 = *(_OWORD *)(v127 + 184);
                *(_OWORD *)v127 = *(_OWORD *)(v127 + 168);
                *((_OWORD *)v127 + 1) = v128;
                v129 = *(_OWORD *)(v127 + 216);
                *((_OWORD *)v127 + 2) = *(_OWORD *)(v127 + 200);
                *((_OWORD *)v127 + 3) = v129;
                v130 = *(_OWORD *)(v127 + 248);
                *((_OWORD *)v127 + 4) = *(_OWORD *)(v127 + 232);
                *((_OWORD *)v127 + 5) = v130;
                v131 = *(_OWORD *)(v127 + 264);
                v132 = *(_OWORD *)(v127 + 280);
                v133 = *(_OWORD *)(v127 + 296);
                v134 = *(_OWORD *)(v127 + 312);
                *((_QWORD *)v127 + 20) = *((_QWORD *)v127 + 41);
                *((_OWORD *)v127 + 8) = v133;
                *((_OWORD *)v127 + 9) = v134;
                v135 = (__int128 *)(v127 + 336);
                *((_OWORD *)v127 + 6) = v131;
                *((_OWORD *)v127 + 7) = v132;
                v127 += 168;
              }
              while (v135 != v123);
              v122 = *(_QWORD *)(v20 + 64);
              v123 = *(__int128 **)(v20 + 72);
            }
            if ((unint64_t)v123 <= v122)
              __assert_rtn("pop_back", "x-small-vector.h", 410, "_end > _begin && \"pop_back on empty container\"");
            v123 = (__int128 *)((char *)v123 - 168);
            *(_QWORD *)(v20 + 72) = v123;
            v26 = 1;
          }
          v124 = v125;
        }
        while (v125);
      }
      v136 = 126 - 2 * __clz(0xCF3CF3CF3CF3CF3DLL * ((uint64_t)((uint64_t)v123 - v122) >> 3));
      v137 = v123 == (__int128 *)v122 ? 0 : v136;
      std::__introsort<std::_ClassicAlgPolicy,CA::Render::BackdropGroup::finalize_update(unsigned int,BOOL,void *)::$_0 &,CA::Render::BackdropGroup::Item *,false>(v122, v123, v137, 1);
      v138 = *(_QWORD *)(v20 + 64);
      v139 = *(_QWORD *)(v20 + 72) - v138;
      if (v139)
      {
        v140 = 0xCF3CF3CF3CF3CF3DLL * (v139 >> 3) - 1;
        v141 = (float64x2_t *)(v138 + 168 * v140);
        v143 = v141[1];
        v142 = v141[2];
        v200 = v141[5];
        v201 = v141[6];
        if (0xCF3CF3CF3CF3CF3DLL * (v139 >> 3) != 1)
        {
          v195 = v142;
          v144 = 0;
          v145 = 0;
          while (1)
          {
            v204 = 0u;
            v205 = 0u;
            *(_OWORD *)v202 = 0u;
            v203 = 0u;
            v146 = *(_QWORD *)(v20 + 64);
            v147 = 0xCF3CF3CF3CF3CF3DLL * ((*(_QWORD *)(v20 + 72) - v146) >> 3);
            if (v147 <= v145)
              goto LABEL_210;
            v148 = *(double *)(v146 + v144 + 24);
            v149 = *(double *)(v146 + v144 + 32);
            v150 = *(double *)(v146 + v144 + 40);
            v202[0] = *(CA::Shape **)(v146 + v144 + 16);
            v202[1] = *(CA::Shape **)&v148;
            v203.f64[0] = v149 + *(double *)v202;
            v203.f64[1] = v148;
            v204.f64[0] = v149 + *(double *)v202;
            v204.f64[1] = v150 + v148;
            *(CA::Shape **)&v205.f64[0] = v202[0];
            v205.f64[1] = v150 + v148;
            *(_QWORD *)&v198 = off_1E15997E8;
            *((_QWORD *)&v198 + 1) = 4;
            v199 = v202;
            if (v147 <= v140)
              goto LABEL_210;
            v196 = v143;
            CA::Render::LayerNode::MapGeometry::map((uint64_t)&v198, *(CA::Render::LayerNode **)(v146 + v144 + 8), *(CA::Render::LayerNode **)(v146 + 168 * v140 + 8));
            v151 = vbslq_s8((int8x16_t)vcgtq_f64(v203, *(float64x2_t *)v202), *(int8x16_t *)v202, (int8x16_t)v203);
            v152 = vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)v202, v203), *(int8x16_t *)v202, (int8x16_t)v203);
            v153 = vbslq_s8((int8x16_t)vcgtq_f64(v205, v204), (int8x16_t)v204, (int8x16_t)v205);
            v154 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v204, v205), (int8x16_t)v204, (int8x16_t)v205);
            v155 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v153, (float64x2_t)v151), v151, v153);
            v156 = (int8x16_t)vsubq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v152, v154), v152, (int8x16_t)v154), (float64x2_t)v155);
            *(_QWORD *)&v154.f64[0] = COERCE_UNSIGNED_INT64(vaddvq_f64((float64x2_t)v156)) & 0x7FFFFFFFFFFFFFFFLL;
            v157 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vcgtq_s64(v192, (int64x2_t)v154).i64[0], 0), v156, v193);
            *(int32x2_t *)&v154.f64[0] = vdup_n_s32(*(_QWORD *)&v154.f64[0] < 0x7FF0000000000000);
            v158.i64[0] = LODWORD(v154.f64[0]);
            v158.i64[1] = HIDWORD(v154.f64[0]);
            v159 = v195;
            v160 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v158, 0x3FuLL)), v155, v194);
            v161 = vclezq_f64(v195);
            v162 = vclezq_f64(v157);
            v163 = vmovn_s64(vcltzq_s64((int64x2_t)vorrq_s8((int8x16_t)vzip1q_s64(v162, v161), (int8x16_t)vzip2q_s64(v162, v161))));
            if ((v163.i8[4] & 1) != 0)
              break;
            if ((v163.i8[0] & 1) == 0)
            {
              v164 = vaddq_f64(v160, v157);
              v160 = vminnmq_f64(v196, v160);
              v157 = vsubq_f64(vmaxnmq_f64(vaddq_f64(v196, v195), v164), v160);
LABEL_147:
              v196 = v160;
              v159 = v157;
            }
LABEL_148:
            v195 = v159;
            *(_BYTE *)(v146 + v144 + 161) = CA::BoundsImpl::contains(v200.f64, (double *)(v146 + v144 + 80));
            ++v145;
            v144 += 168;
            v143 = v196;
            if (v140 == v145)
            {
              v165 = v196.f64[0];
              v4 = v187;
              v142 = v195;
              goto LABEL_152;
            }
          }
          if ((v163.i8[0] & 1) != 0)
            goto LABEL_148;
          goto LABEL_147;
        }
        v165 = v143.f64[0];
LABEL_152:
        v17 = v189;
      }
      else
      {
        v165 = 0.0;
        v143.f64[1] = 0.0;
        v142 = 0uLL;
      }
      if (*(double *)(v20 + 488) != v165)
        break;
      v166 = v143.f64[1];
      if (*(double *)(v20 + 496) != v143.f64[1]
        || *(double *)(v20 + 504) != v142.f64[0]
        || *(double *)(v20 + 512) != v142.f64[1])
      {
        goto LABEL_159;
      }
LABEL_160:
      *(double *)(v20 + 488) = v165;
      *(float64_t *)(v20 + 496) = v166;
      *(float64x2_t *)(v20 + 504) = v142;
      if (*(_QWORD *)(v20 + 48))
      {
        v167 = 0;
        if ((v26 & 1) == 0)
          goto LABEL_164;
      }
      else
      {
        v167 = (*(_BYTE *)(v20 + 13) & 8) == 0;
        if ((v26 & 1) == 0)
        {
LABEL_164:
          if (!v167)
            goto LABEL_24;
        }
      }
      v168 = *(_QWORD *)(v20 + 480);
      if (v168)
      {
        if (*(_QWORD *)(v20 + 520))
        {
          CA::Shape::unref(*(CA::Shape **)(v20 + 520));
          v168 = *(_QWORD *)(v20 + 480);
        }
        *(_QWORD *)(v20 + 520) = CA::Shape::ref(v168, v21);
      }
LABEL_24:
      v27 = *(CA::Shape **)(v20 + 536);
      if (v27)
        CA::Shape::unref(v27);
      v28 = *(_QWORD *)(v20 + 528);
      if (v28)
        v28 = CA::Shape::ref(v28, v21);
      *(_QWORD *)(v20 + 536) = v28;
      if (v26 & 1 | (BYTE7(xmmword_1ECDC6A90) != 0))
        CA::shape_union(v17, *(CA::Shape ***)(v20 + 480), v22);
      os_unfair_lock_unlock((os_unfair_lock_t)(v20 + 40));
      v29 = v16[4].i32[0];
      v30 = v16[4].i32[1];
      if (v29 >= v30)
        v31 = v16[4].i32[1];
      else
        v31 = v16[4].i32[0];
      if (v31 < 1)
        goto LABEL_118;
      v32 = v16 + 3;
      v198 = 0uLL;
      v33 = (int32x2_t *)(v19 + 48);
      v197 = 0uLL;
      if (!CA::BoundsImpl::contains(&v16[3], (_DWORD *)(v19 + 48)))
      {
        if (v29 <= v30)
          v38 = v30;
        else
          v38 = v29;
        v34.i32[0] = v38;
        v203 = 0u;
        v39 = v16[3];
        v40.i64[0] = v39.i32[0];
        v40.i64[1] = v39.i32[1];
        v41 = (int32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v34, v191), 0), v194, (int8x16_t)vcvtq_f64_s64(v40));
        v42 = (double)v30;
        if (v38 <= 1073741822)
          v43 = (double)v29;
        else
          v43 = 1.79769313e308;
        if (v38 > 1073741822)
          v42 = 1.79769313e308;
        *(int32x4_t *)v202 = v41;
        v203.f64[0] = v43;
        v203.f64[1] = v42;
        v44 = *(float *)&v16[12].i32[1];
        if (v44 != 0.0)
        {
          v45 = *(_DWORD *)(v19 + 60);
          v46 = (double)(*(_DWORD *)(v19 + 48) + *(_DWORD *)(v19 + 56) / 2);
          if (v45 >= 0)
            v47 = *(_DWORD *)(v19 + 60);
          else
            v47 = v45 + 1;
          v48 = *(double *)v41.i64 - v46;
          v49 = 1.0 / (float)((float)(v44 * 2.0) + 1.0);
          v50 = v49;
          if (v49 != 1.0 && v43 < 1.79769313e308)
          {
            v48 = v48 * v50;
            v203.f64[0] = v43 * v50;
          }
          v52 = *(_DWORD *)(v19 + 52) + (v47 >> 1);
          v53 = *(double *)&v41.i64[1] - (double)v52;
          v41.i32[1] = 2146435071;
          if (v49 != 1.0 && v42 < 1.79769313e308)
          {
            v53 = v53 * v50;
            *(double *)v41.i64 = v42 * v50;
            v203.f64[1] = v42 * v50;
          }
          v41.i32[0] = v38;
          v55.i64[0] = v32->i32[0];
          v55.i64[1] = (int)HIDWORD(*(unint64_t *)v32);
          v56 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v41, v190), 0), v194, (int8x16_t)vcvtq_f64_s64(v55));
          v57 = v48 + v46;
          v58.f64[0] = v43;
          v58.f64[1] = v42;
          v202[0] = *(CA::Shape **)&v57;
          *(double *)&v202[1] = v53 + (double)v52;
          v59 = vclezq_f64(v203);
          v60 = vclezq_f64(v58);
          v61 = vmovn_s64(vcltzq_s64((int64x2_t)vorrq_s8((int8x16_t)vzip1q_s64(v60, v59), (int8x16_t)vzip2q_s64(v60, v59))));
          if ((v61.i8[4] & 1) != 0)
          {
            if ((v61.i8[0] & 1) == 0)
            {
              *(float64x2_t *)v202 = v56;
              v203.f64[0] = v43;
              goto LABEL_79;
            }
          }
          else if ((v61.i8[0] & 1) == 0)
          {
            v70 = vminnmq_f64(*(float64x2_t *)v202, v56);
            v71 = vsubq_f64(vmaxnmq_f64(vaddq_f64(*(float64x2_t *)v202, v203), vaddq_f64(v56, v58)), v70);
            *(float64x2_t *)v202 = v70;
            v42 = v71.f64[1];
            v203.f64[0] = v71.f64[0];
LABEL_79:
            v203.f64[1] = v42;
          }
        }
        *(_QWORD *)&v200.f64[0] = off_1E15997C8;
        *(_QWORD *)&v200.f64[1] = 1;
        *(_QWORD *)&v201.f64[0] = v202;
        CA::Render::LayerNode::MapGeometry::map((uint64_t)&v200, 0, *(CA::Render::LayerNode **)&v16[1]);
        CA::Rect::apply_transform((double *)v202, (uint64_t)&v16[6]);
        CA::Render::Updater::apply_shapes_ops(*(_QWORD **)&v16[11], (CA::Render::Updater::LayerShapesOp *)v202, v72);
        v73 = *((_QWORD *)v4 + 25);
        v74 = v73;
        if ((int)v73 <= SHIDWORD(v73))
          v74 = HIDWORD(v73);
        v75 = v203;
        v76 = vclezq_f64(v203);
        if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v76, 1), (int8x16_t)v76).u64[0] & 0x8000000000000000) == 0)
        {
          v77.i64[0] = (int)v73;
          v77.i64[1] = SHIDWORD(v73);
          v78 = (int8x16_t)vcvtq_f64_s64(v77);
          v79 = vdup_n_s32(v74 > 1073741822);
          v77.i64[0] = v79.u32[0];
          v77.i64[1] = v79.u32[1];
          v80 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v77, 0x3FuLL)), v193, v78);
          v81 = vclezq_f64(v80);
          v82 = (int32x4_t)vdupq_laneq_s64(v81, 1);
          if ((vorrq_s8((int8x16_t)v82, (int8x16_t)v81).u64[0] & 0x8000000000000000) != 0)
            goto LABEL_86;
          v83 = *((_QWORD *)v4 + 24);
          v84.i64[0] = (int)v83;
          v84.i64[1] = SHIDWORD(v83);
          v82.i32[0] = v74;
          v85 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v82, v188), 0), v194, (int8x16_t)vcvtq_f64_s64(v84));
          v86 = vaddq_f64(v85, v80);
          v87 = vmaxnmq_f64(*(float64x2_t *)v202, v85);
          v75 = vsubq_f64(vminnmq_f64(vaddq_f64(*(float64x2_t *)v202, v203), v86), v87);
          v88 = vclezq_f64(v75);
          if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v88, 1), (int8x16_t)v88).u64[0] & 0x8000000000000000) != 0)
          {
LABEL_86:
            v203 = 0uLL;
            v75 = 0uLL;
          }
          else
          {
            *(float64x2_t *)v202 = v87;
            v203 = v75;
          }
        }
        v89 = vceqzq_f64(v75);
        v90 = vorrq_s8((int8x16_t)vdupq_laneq_s64(v89, 1), (int8x16_t)v89).u64[0];
        v91 = 0uLL;
        if ((v90 & 0x8000000000000000) == 0)
        {
          v92 = vorrq_s8((int8x16_t)vcltzq_f64(v75), (int8x16_t)vcgezq_f64(v75));
          if ((vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v92), 1), v92).u64[0] & 0x8000000000000000) == 0)
          {
            v93 = vminnmq_f64(vaddq_f64(*(float64x2_t *)v202, v75), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL));
            v94 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(*(float64x2_t *)v202, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
            v91 = (int8x16_t)vuzp1q_s32(v94, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(v93), (int64x2_t)v94));
          }
        }
        v95 = (int32x2_t)vextq_s8(v91, v91, 8uLL).u64[0];
        v96 = v16[4];
        v97 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v95);
        v98 = vpmax_u32(v97, v97).u32[0];
        v99 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v96);
        v100 = vpmax_u32(v99, v99).u32[0];
        if ((v98 & 0x80000000) != 0)
        {
          if ((v100 & 0x80000000) == 0)
          {
            *(int32x2_t *)v91.i8 = *v32;
LABEL_95:
            v91.u64[1] = (unint64_t)v96;
            v95 = (int32x2_t)vextq_s8(v91, v91, 8uLL).u64[0];
          }
        }
        else if ((v100 & 0x80000000) == 0)
        {
          v101 = vadd_s32(*(int32x2_t *)v91.i8, v95);
          *(int32x2_t *)v91.i8 = vmin_s32(*(int32x2_t *)v91.i8, *v32);
          v96 = vsub_s32(vmax_s32(v101, vadd_s32(*v32, v96)), *(int32x2_t *)v91.i8);
          goto LABEL_95;
        }
        v102 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v95);
        if ((vpmax_u32(v102, v102).u32[0] & 0x80000000) != 0)
          goto LABEL_113;
        v103 = *(int32x2_t *)(v19 + 56);
        v104 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v103);
        if ((vpmax_u32(v104, v104).u32[0] & 0x80000000) != 0
          || (v105 = *v33,
              v106 = vadd_s32(*(int32x2_t *)v91.i8, v95),
              v107 = vadd_s32(*v33, v103),
              v108 = vmax_s32(*(int32x2_t *)v91.i8, *v33),
              v109 = vsub_s32(vmin_s32(v106, v107), v108),
              v110 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v109),
              (vpmax_u32(v110, v110).u32[0] & 0x80000000) != 0))
        {
LABEL_113:
          v37 = 0;
          v36 = 0;
        }
        else
        {
          v36 = v109.i32[0];
          v37 = v109.i32[1];
          *(int32x2_t *)&v111 = v108;
          *((int32x2_t *)&v111 + 1) = v109;
          v197 = v111;
          v198 = v111;
          if (v109.i32[0] <= v109.i32[1])
            v112 = v109.i32[1];
          else
            v112 = v109.i32[0];
          if (v109.i32[0] >= v109.i32[1])
            v113 = v109.i32[1];
          else
            v113 = v109.i32[0];
          if (v112 <= 1073741822 && v113 >= 1)
          {
            v114 = (int)(float)-v24;
            *(int32x2_t *)&v197 = vadd_s32(v108, vdup_n_s32(v114));
            v115 = v109.i32[0] - 2 * v114;
            v116 = v109.i32[1] - 2 * v114;
            *((_QWORD *)&v197 + 1) = __PAIR64__(v116, v115);
            if (v115 < 1 || v116 <= 0)
              *((_QWORD *)&v197 + 1) = 0;
          }
          v117 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)((char *)&v197 + 8));
          if ((vpmax_u32(v117, v117).u32[0] & 0x80000000) == 0)
          {
            *(int32x2_t *)&v118 = vmax_s32(*(int32x2_t *)&v197, v105);
            v119 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)&v197, *(int32x2_t *)((char *)&v197 + 8)), v107), *(int32x2_t *)&v118);
            v120 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v119);
            if ((vpmax_u32(v120, v120).u32[0] & 0x80000000) != 0)
            {
              *((_QWORD *)&v197 + 1) = 0;
            }
            else
            {
              *((int32x2_t *)&v118 + 1) = v119;
              v197 = v118;
            }
          }
        }
        goto LABEL_114;
      }
      v35 = *(_DWORD *)(v19 + 52);
      LODWORD(v198) = *(_DWORD *)(v19 + 48);
      DWORD1(v198) = v35;
      v36 = *(_DWORD *)(v19 + 56);
      v37 = *(_DWORD *)(v19 + 60);
      *((_QWORD *)&v198 + 1) = __PAIR64__(v37, v36);
      *(_QWORD *)&v197 = __PAIR64__(v35, v198);
      *((_QWORD *)&v197 + 1) = __PAIR64__(v37, v36);
LABEL_114:
      if (v36 >= v37)
        v36 = v37;
      if (v36 >= 1)
      {
        v203 = 0u;
        v204 = 0u;
        *(_OWORD *)v202 = 0u;
        CA::Shape::operator=((uint64_t)v202, &v197);
        CA::shape_union(v17, v202, v121);
        v203 = 0u;
        v204 = 0u;
        *(_OWORD *)v202 = 0u;
        CA::Shape::operator=((uint64_t)v202, &v198);
        CA::Render::Update::invalidate_backdrops((uint64_t)v4, (CA::Shape *)v202, (int32x2_t **)v16, 1);
      }
LABEL_118:
      os_unfair_lock_unlock((os_unfair_lock_t)(v19 + 36));
      v16 = (int32x2_t *)*v16;
      if (!v16)
        goto LABEL_170;
    }
    v166 = v143.f64[1];
LABEL_159:
    v26 = 1;
    goto LABEL_160;
  }
LABEL_170:
  for (i = (_QWORD *)*((_QWORD *)v4 + 68); i; i = (_QWORD *)*i)
  {
    v170 = (CA::Shape **)i[2];
    if (v170)
    {
      v171 = (unint64_t *)(i[1] + 520);
      if (*v171)
        CA::shape_union((CA::Shape **)(i[1] + 520), v170, a3);
      else
        *v171 = CA::Shape::ref(i[2], (const CA::Bounds *)v170);
    }
  }
  v172 = *((unsigned int *)v4 + 128);
  if ((_DWORD)v172)
  {
    if (*((_QWORD *)v4 + 67))
    {
      v173 = 0;
      do
      {
        v174 = *(CA::Shape **)(*((_QWORD *)v4 + 67) + 8 * v173);
        if (v174)
        {
          CA::Shape::unref(v174);
          LODWORD(v172) = *((_DWORD *)v4 + 128);
        }
        ++v173;
      }
      while (v173 < v172);
    }
    else
    {
      *((_QWORD *)v4 + 67) = malloc_type_malloc(8 * v172, 0x846BD4BBuLL);
      LODWORD(v172) = *((_DWORD *)v4 + 128);
    }
    v175 = (_QWORD *)*((_QWORD *)v4 + 63);
    if (v175)
    {
      v176 = v172 - 1;
      do
      {
        v177 = *(_QWORD *)(v175[2] + 8);
        os_unfair_lock_lock((os_unfair_lock_t)(v177 + 40));
        v178 = *(_QWORD *)(v177 + 520);
        if (v178)
          v179 = CA::Shape::intersect(v178, v175[5]);
        else
          v179 = 1;
        *(_QWORD *)(*((_QWORD *)v4 + 67) + 8 * v176) = v179;
        os_unfair_lock_unlock((os_unfair_lock_t)(v177 + 40));
        v175 = (_QWORD *)*v175;
        --v176;
      }
      while (v175);
      LODWORD(v172) = *((_DWORD *)v4 + 128);
    }
    if (v172 >= 2)
    {
      v180 = 0;
      v181 = 1;
      do
      {
        CA::shape_union((CA::Shape **)(*((_QWORD *)v4 + 67) + v180 + 8), *(CA::Shape ***)(*((_QWORD *)v4 + 67) + v180), a3);
        ++v181;
        v180 += 8;
      }
      while (v181 < *((unsigned int *)v4 + 128));
    }
  }
  CA::shape_intersect((CA::Shape **)v4 + 2, (CA::Shape **)v4 + 24, a3);
  v183 = (CA::Shape *)*((_QWORD *)v4 + 3);
  if (v183)
  {
    CA::Shape::unref(v183);
    *((_QWORD *)v4 + 3) = 0;
  }
  *((_QWORD *)v4 + 3) = CA::Shape::ref(*((_QWORD *)v4 + 2), v182);
  if ((*((_BYTE *)v4 + 269) & 2) != 0)
    notify_post("com.apple.CoreAnimation.CAWindowServer.SecureModeViolation");
  v184 = *((unsigned int *)v4 + 266) | ((unint64_t)*((unsigned __int16 *)v4 + 534) << 32) | 0x100000000;
  *((_WORD *)v4 + 534) = WORD2(v184);
  v185 = *((_QWORD *)v4 + 4);
  if ((v185 & 1) == 0)
  {
    if (*(_DWORD *)(v185 + 4) == 6)
      goto LABEL_203;
    goto LABEL_202;
  }
  if (v185 != 1)
  {
LABEL_202:
    v186 = CA::Shape::dilate(v185, (const CA::Bounds *)1, 1u);
    CA::Shape::unref(*((CA::Shape **)v4 + 4));
    *((_QWORD *)v4 + 4) = v186;
    LODWORD(v184) = *((_DWORD *)v4 + 266);
  }
LABEL_203:
  if ((v184 & 4) == 0 && BYTE9(xmmword_1ECDC6A90))
    kdebug_trace();
  if (initialized[0] != -1)
    dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
  if (*(float *)&dword_1ECDC6A14)
  {
    if (*(float *)&dword_1ECDC6A14 > 0.0)
      *(float *)&dword_1ECDC6A14 = *(float *)&dword_1ECDC6A14 + -1.0;
  }
}

BOOL CA::BoundsImpl::contains(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;

  v2 = a1[2];
  if (v2 > 0.0
    && (v3 = a1[3], v3 > 0.0)
    && (v4 = a2[2], v4 >= 0.0)
    && (v5 = a2[3], v5 >= 0.0)
    && *a1 <= *a2
    && (v6 = a1[1], v7 = a2[1], v6 <= v7)
    && *a1 + v2 >= *a2 + v4)
  {
    return v6 + v3 >= v7 + v5;
  }
  else
  {
    return 0;
  }
}

void CA::Render::Update::invalidate_backdrops(uint64_t a1, CA::Shape *this, int32x2_t **a3, int a4)
{
  int32x2_t **v7;
  int32x2_t *v8;
  __int32 v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  const CA::Bounds *v13;
  const CA::Shape *v14;
  CA::Shape *v15;
  int32x2_t v16;
  CA::Shape **v17;
  uint64_t v18;
  CA::Shape *v19;
  const CA::Bounds *v20;
  unint64_t v21;
  int32x2_t v22;
  int32x2_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if ((this & 1) != 0)
  {
    if (this == (CA::Shape *)1)
      return;
  }
  else if (*((_DWORD *)this + 1) == 6)
  {
    return;
  }
  v7 = (int32x2_t **)(a1 + 504);
  if (a3)
    v7 = a3;
  v8 = *v7;
  if (*v7)
  {
    while (1)
    {
      v9 = v8[12].i32[0];
      if ((v9 & 0x40000000) != 0)
        v10 = a4;
      else
        v10 = 1;
      if ((v9 & 0x10000000) != 0 || !v10)
        goto LABEL_27;
      v11 = *(_QWORD *)(*(_QWORD *)&v8[1] + 256);
      v12 = CA::Shape::intersect(this, (const CA::Bounds *)(v11 + 48));
      v15 = (CA::Shape *)v12;
      if ((v12 & 1) == 0)
        break;
      if (v12 != 1)
        goto LABEL_17;
LABEL_26:
      CA::Shape::unref(v15);
LABEL_27:
      v8 = (int32x2_t *)*v8;
      if (!v8)
        return;
    }
    if (*(_DWORD *)(v12 + 4) == 6)
      goto LABEL_26;
LABEL_17:
    if ((v8[12].i8[3] & 0x20) != 0)
    {
      v22 = 0;
      v23 = 0;
      CA::Shape::get_bounds(v12, (int *)&v22);
      CA::BoundsImpl::Union(v8 + 3, v22, v23);
    }
    v16 = v8[2];
    v18 = *(_QWORD *)(*(_QWORD *)&v16 + 16);
    v17 = (CA::Shape **)(*(_QWORD *)&v16 + 16);
    if (v18)
    {
      CA::shape_union(v17, (CA::Shape **)v15, v14);
      v19 = *v17;
      if ((*v17 & 1) != 0 || *((int *)v19 + 1) < 65)
        goto LABEL_25;
      v22 = 0;
      v23 = 0;
      CA::Shape::get_bounds((uint64_t)v19, (int *)&v22);
      CA::Shape::unref(*v17);
      v21 = CA::Shape::new_shape((CA::Shape *)&v22, v20);
    }
    else
    {
      v21 = CA::Shape::ref((unint64_t)v15, v13);
    }
    *v17 = (CA::Shape *)v21;
LABEL_25:
    goto LABEL_26;
  }
}

uint64_t CA::Shape::dilate(uint64_t this, const CA::Bounds *a2, unsigned int a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  signed int v8;
  signed int v9;
  int v11;
  int v12;
  int32x2_t v13;
  const CA::Bounds *v14;
  CA::Shape *v15;
  int32x2_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!(a3 | a2))
    return CA::Shape::ref(this, a2);
  v4 = (int)a2;
  if ((this & 1) != 0)
  {
    if (this != 1)
    {
      v6 = this >> 48;
      v5 = this << 16 >> 48;
      LODWORD(v18) = this >> 48;
      HIDWORD(v18) = (int)((unint64_t)this >> 16) >> 16;
      v8 = this >> 17;
      LODWORD(v19) = this >> 17;
      v9 = (this >> 2) & 0x7FFF;
      goto LABEL_8;
    }
LABEL_20:
    v16 = 0;
    v17 = 1;
    v15 = 0;
    v19 = 0;
    v20 = 0;
    v18 = this;
    v13 = vadd_s32((int32x2_t)__PAIR64__(a3, a2), (int32x2_t)__PAIR64__(a3, a2));
    while (CA::ShapeIterator::iterate((uint64_t *)&v18, (int *)&v15))
    {
      LODWORD(v15) = (_DWORD)v15 - v4;
      HIDWORD(v15) -= a3;
      v16 = vadd_s32(v16, v13);
      CA::shape_union((CA::Shape **)&v17, &v15, v14);
    }
    return v17;
  }
  if (*(_DWORD *)(this + 4) != 12)
    goto LABEL_20;
  LODWORD(v5) = *(_DWORD *)(this + 20);
  LODWORD(v6) = *(_DWORD *)(this + 28);
  v7 = *(_DWORD *)(this + 32);
  v18 = __PAIR64__(v5, v6);
  v8 = v7 - v6;
  LODWORD(v19) = v8;
  v9 = *(_DWORD *)(this + 36) - v5;
LABEL_8:
  HIDWORD(v19) = v9;
  if (v8 <= v9)
    v11 = v9;
  else
    v11 = v8;
  if (v8 >= v9)
    v12 = v9;
  else
    v12 = v8;
  if (v11 <= 1073741822 && v12 >= 1)
  {
    LODWORD(v18) = v6 - (_DWORD)a2;
    HIDWORD(v18) = v5 - a3;
    LODWORD(v19) = v8 + 2 * (_DWORD)a2;
    HIDWORD(v19) = v9 + 2 * a3;
    if ((int)v19 < 1 || (int)(v9 + 2 * a3) <= 0)
      v19 = 0;
  }
  return CA::Shape::new_shape((CA::Shape *)&v18, a2);
}

float64x2_t CA::Rect::round_center(float64x2_t *this)
{
  float64x2_t result;
  double v2;
  double v3;
  float64x2_t v4;

  result = this[1];
  v2 = this[1].f64[1];
  if (result.f64[0] <= v2)
    v3 = this[1].f64[1];
  else
    v3 = this[1].f64[0];
  if (v3 < 1.79769313e308)
  {
    if (result.f64[0] < v2)
      v2 = this[1].f64[0];
    if (v2 > 0.0)
    {
      v4 = vrndaq_f64(*this);
      result = vsubq_f64(vrndaq_f64(vaddq_f64(*this, result)), v4);
      *this = v4;
      this[1] = result;
    }
  }
  return result;
}

void CA::WindowServer::Surface::unref(CA::WindowServer::Surface *this)
{
  int v1;
  void (*v3)(CA::WindowServer::Surface *, _QWORD);
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  CA::WindowServer::Surface **v7;
  CA::WindowServer::Surface **v8;
  int64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  NSObject *v24;
  __int16 v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v1 = *((_DWORD *)this + 56);
  *((_DWORD *)this + 56) = v1 & 0xFFFF0000 | (unsigned __int16)(v1 - 1);
  if ((_WORD)v1 == 1)
  {
    v3 = (void (*)(CA::WindowServer::Surface *, _QWORD))*((_QWORD *)this + 10);
    if (v3)
    {
      v3(this, *((_QWORD *)this + 9));
      *((_QWORD *)this + 10) = 0;
    }
    v4 = *((_QWORD *)this + 1);
    if (v4
      && (v5 = *((unsigned int *)this + 56),
          v6 = v5 | ((unint64_t)*((unsigned __int8 *)this + 228) << 32),
          (v5 & 0x6000000) != 0))
    {
      *((_BYTE *)this + 228) = BYTE4(v6);
      *((_DWORD *)this + 56) = v6 & 0xFF000000 | 0x50001;
      *(_OWORD *)((char *)this + 24) = 0u;
      *(_OWORD *)((char *)this + 40) = 0u;
      os_unfair_lock_lock((os_unfair_lock_t)(v4 + 224));
      v8 = *(CA::WindowServer::Surface ***)(v4 + 232);
      v7 = *(CA::WindowServer::Surface ***)(v4 + 240);
      if (v8 != v7)
      {
        while (*v8 != this)
        {
          if (++v8 == v7)
          {
            v8 = *(CA::WindowServer::Surface ***)(v4 + 240);
            break;
          }
        }
      }
      if (v8 == v7)
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v24 = x_log_category_windowserver;
          if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
          {
            v25 = 0;
            _os_log_impl(&dword_184457000, v24, OS_LOG_TYPE_ERROR, "Failed to find Surface in _inuse_surfaces", (uint8_t *)&v25, 2u);
          }
        }
      }
      else
      {
        v9 = (char *)v7 - (char *)(v8 + 1);
        if (v7 != v8 + 1)
          memmove(v8, v8 + 1, (char *)v7 - (char *)(v8 + 1));
        *(_QWORD *)(v4 + 240) = (char *)v8 + v9;
      }
      v11 = *(_QWORD **)(v4 + 264);
      v10 = *(_QWORD *)(v4 + 272);
      if ((unint64_t)v11 >= v10)
      {
        v13 = *(_QWORD *)(v4 + 256);
        v14 = ((uint64_t)v11 - v13) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          abort();
        v15 = v10 - v13;
        v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v17 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Display::DisplayLinkItem *>>(v17);
        else
          v18 = 0;
        v19 = (_QWORD *)(v17 + 8 * v14);
        v20 = v17 + 8 * v18;
        *v19 = this;
        v12 = v19 + 1;
        v22 = *(char **)(v4 + 256);
        v21 = *(char **)(v4 + 264);
        if (v21 != v22)
        {
          do
          {
            v23 = *((_QWORD *)v21 - 1);
            v21 -= 8;
            *--v19 = v23;
          }
          while (v21 != v22);
          v21 = *(char **)(v4 + 256);
        }
        *(_QWORD *)(v4 + 256) = v19;
        *(_QWORD *)(v4 + 264) = v12;
        *(_QWORD *)(v4 + 272) = v20;
        if (v21)
          operator delete(v21);
      }
      else
      {
        *v11 = this;
        v12 = v11 + 1;
      }
      *(_QWORD *)(v4 + 264) = v12;
      os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 224));
    }
    else
    {
      (*(void (**)(CA::WindowServer::Surface *))(*(_QWORD *)this + 8))(this);
    }
  }
}

void CA::WindowServer::IOMFBDisplay::delete_detached_layer(CA::WindowServer::IOMFBDisplay *this)
{
  _QWORD *v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  CA::WindowServer::Surface *v7;
  CA::WindowServer::Surface *v8;
  malloc_zone_t *malloc_zone;

  v1 = (_QWORD *)*((_QWORD *)this + 3251);
  if (v1)
  {
    CA::WindowServer::IOMFBDisplay::release_detached_handle(*((_QWORD *)this + 3251));
    v3 = (unsigned int *)v1[1];
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
    v7 = (CA::WindowServer::Surface *)v1[2];
    if (v7)
      CA::WindowServer::Surface::unref(v7);
    v8 = (CA::WindowServer::Surface *)v1[3];
    if (v8)
      CA::WindowServer::Surface::unref(v8);
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, v1);
    *((_QWORD *)this + 3251) = 0;
    *((_BYTE *)this + 28051) = 1;
    *((_BYTE *)this + 26384) = *((_BYTE *)this + 26386);
  }
}

BOOL CA::WindowServer::AppleInternalDisplay::display_supports_rotation_p(CA::WindowServer::AppleInternalDisplay *this, char a2, CA::WindowServer::Surface *a3)
{
  unint64_t v6;
  unsigned int v7;
  _BOOL8 result;
  uint64_t v10;
  unint64_t v11;
  int v12;
  CA::Render *v13;
  int v14;

  if (a3 && (a2 & 4) != 0)
  {
    if ((*((_WORD *)this + 14212) & 0x800) != 0)
    {
      v10 = *((_QWORD *)this + 3535);
      v12 = *((_DWORD *)a3 + 14);
      v11 = *((unsigned int *)a3 + 15);
      if ((*(uint64_t (**)(CA::WindowServer::AppleInternalDisplay *))(*(_QWORD *)this + 64))(this) < v11)
        return 0;
      v13 = (CA::Render *)*((unsigned int *)a3 + 16);
      v14 = CA::Render::fourcc_compressed_of_type(v13, 0, 0);
      result = 0;
      if (v14 == (_DWORD)v13)
        return result;
      if (v10 - 1 < (unint64_t)(((((_DWORD)v11 + 31) & 0xFFFFFFE0) * ((v12 + 31) & 0xFFFFFFE0)) & 0xFFFFFC00))
        return 0;
      return byte_1ECDC6B00 == 0;
    }
    else
    {
      v6 = *((_QWORD *)this + 3528);
      if (!v6)
        return (a2 & 4) == 0 || *((_BYTE *)this + 28065) != 0;
      v7 = *((_DWORD *)a3 + 16);
      if (CA::Render::fourcc_compressed_of_type((CA::Render *)v7, 0, 0) == v7)
        return (a2 & 4) == 0 || *((_BYTE *)this + 28065) != 0;
      if (CADeviceSupportsUniversalCompression::once[0] != -1)
        dispatch_once(CADeviceSupportsUniversalCompression::once, &__block_literal_global_27);
      if (CADeviceSupportsUniversalCompression::universal)
        return (a2 & 4) == 0 || *((_BYTE *)this + 28065) != 0;
      return v6 >= *((unsigned int *)a3 + 15) && byte_1ECDC6B00 == 0;
    }
  }
  return (a2 & 4) == 0 || *((_BYTE *)this + 28065) != 0;
}

void CA::WindowServer::IOSurface::set_colorspace(CA::WindowServer::IOSurface *this, void *cf, uint64_t a3)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFDataRef v10;
  NSObject *v11;
  CFDataRef v12;
  uint8_t buf[4];
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (cf)
  {
    if (*((void **)this + 35) != cf || (_DWORD)a3 != 0)
    {
      X::CFRef<__CFDictionary const*>::operator=((const void **)this + 35, cf);
      v7 = *((_QWORD *)this + 1);
      if ((void *)CAGetColorSpace(5u) == cf
        || (CGColorSpaceEqualToColorSpaceIgnoringRange() & 1) != 0
        || (void *)CAGetColorSpace(6u) == cf
        || (CGColorSpaceEqualToColorSpaceIgnoringRange() & 1) != 0
        || (void *)CAGetColorSpace(7u) == cf
        || (CGColorSpaceEqualToColorSpaceIgnoringRange() & 1) != 0
        || (void *)CAGetColorSpace(0xFu) == cf
        || (CGColorSpaceEqualToColorSpaceIgnoringRange() & 1) != 0
        || (void *)CAGetColorSpace(0x10u) == cf
        || (CGColorSpaceEqualToColorSpaceIgnoringRange() & 1) != 0)
      {
        v8 = 4;
      }
      else if ((void *)CAGetColorSpace(9u) == cf
             || (CGColorSpaceEqualToColorSpaceIgnoringRange() & 1) != 0
             || (void *)CAGetColorSpace(0xAu) == cf
             || (CGColorSpaceEqualToColorSpaceIgnoringRange() & 1) != 0
             || (void *)CAGetColorSpace(0xBu) == cf
             || (CGColorSpaceEqualToColorSpaceIgnoringRange() & 1) != 0
             || (void *)CAGetColorSpace(0xDu) == cf
             || (CGColorSpaceEqualToColorSpaceIgnoringRange() & 1) != 0
             || (void *)CAGetColorSpace(0xCu) == cf
             || (CGColorSpaceEqualToColorSpaceIgnoringRange() & 1) != 0
             || (void *)CAGetColorSpace(0xEu) == cf
             || (CGColorSpaceEqualToColorSpaceIgnoringRange() & 1) != 0)
      {
        v8 = 8;
      }
      else if ((void *)CAGetColorSpace(0x1Du) == cf
             || (CGColorSpaceEqualToColorSpaceIgnoringRange() & 1) != 0
             || (void *)CAGetColorSpace(0x11u) == cf
             || (CGColorSpaceEqualToColorSpaceIgnoringRange() & 1) != 0
             || (void *)CAGetColorSpace(0x12u) == cf
             || (CGColorSpaceEqualToColorSpaceIgnoringRange() & 1) != 0
             || (void *)CAGetColorSpace(0x1Au) == cf
             || (CGColorSpaceEqualToColorSpaceIgnoringRange() & 1) != 0
             || (void *)CAGetColorSpace(0x1Bu) == cf
             || (CGColorSpaceEqualToColorSpaceIgnoringRange() & 1) != 0)
      {
        v8 = 2;
      }
      else if (v7 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 1832))(v7) & 1) != 0)
      {
        v8 = 16;
      }
      else
      {
        v8 = 1;
      }
      (*(void (**)(CA::WindowServer::IOSurface *, uint64_t, uint64_t))(*(_QWORD *)this + 72))(this, v8, a3);
      if ((void *)CAGetColorSpace(0xFu) == cf
        || (CGColorSpaceEqualToColorSpaceIgnoringRange() & 1) != 0
        || (void *)CAGetColorSpace(0x10u) == cf
        || (CGColorSpaceEqualToColorSpaceIgnoringRange() & 1) != 0
        || (void *)CAGetColorSpace(0x1Au) == cf
        || (CGColorSpaceEqualToColorSpaceIgnoringRange() & 1) != 0
        || (void *)CAGetColorSpace(0x1Bu) == cf
        || (CGColorSpaceEqualToColorSpaceIgnoringRange() & 1) != 0
        || (void *)CAGetColorSpace(0xAu) == cf
        || (CGColorSpaceEqualToColorSpaceIgnoringRange() & 1) != 0
        || (void *)CAGetColorSpace(0xBu) == cf)
      {
        v9 = 1;
      }
      else
      {
        v9 = CGColorSpaceEqualToColorSpaceIgnoringRange();
      }
      (*(void (**)(CA::WindowServer::IOSurface *, uint64_t))(*(_QWORD *)this + 80))(this, v9);
      if (CADeviceIsVirtualized::once[0] != -1)
        dispatch_once(CADeviceIsVirtualized::once, &__block_literal_global_204);
      if (CADeviceIsVirtualized::is_virtualized)
      {
        v10 = CGColorSpaceCopyICCData((CGColorSpaceRef)cf);
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v11 = x_log_category_utilities;
          if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67109120;
            v14 = 2;
            _os_log_impl(&dword_184457000, v11, OS_LOG_TYPE_DEBUG, "primaries of value %d received, no matching case", buf, 8u);
          }
        }
        if (v10)
          CFRelease(v10);
        v12 = CGColorSpaceCopyICCData((CGColorSpaceRef)cf);
        IOSurfaceSetValue(*((IOSurfaceRef *)this + 30), (CFStringRef)*MEMORY[0x1E0CBC010], v12);
        if (v12)
          CFRelease(v12);
      }
    }
  }
}

uint64_t CA::WindowServer::IOMFBDisplay::exceeds_disp_bandwidth_limits_p(CA::WindowServer::IOMFBDisplay *this, CA::WindowServer::Surface *a2, uint64_t a3, float64x2_t *a4, const CA::Rect *a5)
{
  _QWORD *v11;

  if (!byte_1ECDC6B06 && *((_BYTE *)this + 26984))
  {
    if (CA::WindowServer::IOMFBDisplay::detach_exceeds_display_bandwidth_limits_p(this, a2, a4, a5, a5))
      return 1;
    v11 = (_QWORD *)*((_QWORD *)this + 5);
    if (v11)
    {
      while (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(*v11 + 96) + 696))(*(_QWORD *)(*v11 + 96))
           || ((*(uint64_t (**)(_QWORD, CA::WindowServer::IOMFBDisplay *, CA::WindowServer::Surface *, uint64_t, float64x2_t *, const CA::Rect *))(**(_QWORD **)(*v11 + 96) + 712))(*(_QWORD *)(*v11 + 96), this, a2, a3, a4, a5) & 1) == 0)
      {
        v11 = (_QWORD *)v11[1];
        if (!v11)
          return 0;
      }
      return 1;
    }
  }
  return 0;
}

uint64_t CA::WindowServer::IOSurface::set_color_primaries(uint64_t result, int a2, int a3)
{
  if (*(_DWORD *)(result + 272) != a2 || a3 != 0)
  {
    *(_DWORD *)(result + 272) = a2;
    IOSurfaceRemoveValue(*(IOSurfaceRef *)(result + 240), (CFStringRef)*MEMORY[0x1E0CBBF70]);
    return IOSurfaceSetBulkAttachments2();
  }
  return result;
}

uint64_t CA::WindowServer::IOSurface::set_linear(uint64_t this, char a2)
{
  *(_BYTE *)(this + 288) = a2;
  return this;
}

uint64_t CA::OGL::emit_twenty_part_rect(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  CA::OGL::Context *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t i;
  void (*v21)(uint64_t, float64x2_t *, uint64_t, uint64_t, __n128);
  void (*v22)(uint64_t, uint64_t, uint64_t);
  int v23;
  _BOOL4 v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD v31[8];
  float64x2_t v32;
  _QWORD v33[144];

  v33[143] = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(result + 136) < 0x24u)
    return result;
  v10 = (CA::OGL::Context *)result;
  v11 = 0;
  v12 = *(_QWORD *)(result + 120);
  v13 = (_DWORD *)(v12 + 28);
  v14 = v33;
  do
  {
    v15 = 0;
    v16 = *(_QWORD *)(a4 + 8 * v11);
    v17 = v14;
    v18 = v13;
    do
    {
      *((_QWORD *)v17 - 2) = *(_QWORD *)(a3 + 8 * v15);
      *((_QWORD *)v17 - 1) = v16;
      *v17 = xmmword_18474DF50;
      if (a5)
      {
        *(v18 - 3) = *(_DWORD *)(a5 + 4 * v15);
        *(v18 - 2) = *(_DWORD *)(a6 + 4 * v11);
      }
      if (a7)
      {
        *(v18 - 1) = *(_DWORD *)(a7 + 4 * v15);
        *v18 = *(_DWORD *)(a8 + 4 * v11);
      }
      ++v15;
      v18 += 12;
      v17 += 2;
    }
    while (v15 != 6);
    ++v11;
    v13 += 72;
    v14 += 24;
  }
  while (v11 != 6);
  v19 = *(_QWORD *)(*(_QWORD *)(result + 16) + 8);
  for (i = 32; i != 1760; i += 48)
    *(_QWORD *)(v12 + i) = v19;
  v21 = *(void (**)(uint64_t, float64x2_t *, uint64_t, uint64_t, __n128))(a2 + 24);
  if (v21)
    v21(a2, &v32, v12, 36, (__n128)xmmword_18474DF50);
  CA::OGL::transform_vertices(&v32, (float32x4_t *)v12, (const double *)0x24, *(float64x2_t **)(a2 + 8));
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(a2 + 32);
  if (v22)
    v22(a2, v12, 36);
  if ((*(_BYTE *)(a2 + 16) & 9) != 0)
  {
    v23 = *(_DWORD *)(a2 + 20);
    if ((v23 & 0xF) == 0)
      goto LABEL_23;
    if ((v23 & 4) != 0)
    {
      CA::OGL::aa_adjust_vertices(v12, v12 + 288, 48, 6);
      v23 = *(_DWORD *)(a2 + 20);
      if ((v23 & 8) == 0)
      {
LABEL_20:
        if ((v23 & 1) == 0)
          goto LABEL_21;
        goto LABEL_34;
      }
    }
    else if ((v23 & 8) == 0)
    {
      goto LABEL_20;
    }
    CA::OGL::aa_adjust_vertices(v12 + 1440, v12 + 1152, 48, 6);
    v23 = *(_DWORD *)(a2 + 20);
    if ((v23 & 1) == 0)
    {
LABEL_21:
      if ((v23 & 2) == 0)
        goto LABEL_23;
      goto LABEL_22;
    }
LABEL_34:
    CA::OGL::aa_adjust_vertices(v12, v12 + 48, 288, 6);
    v23 = *(_DWORD *)(a2 + 20);
    if ((v23 & 2) == 0)
    {
LABEL_23:
      if ((v23 & 0xF0) != 0)
      {
        CA::OGL::aa_adjust_vertices(v12 + 384, v12 + 96, 48, 2);
        CA::OGL::aa_adjust_vertices(v12 + 1248, v12 + 1536, 48, 2);
        CA::OGL::aa_adjust_vertices(v12 + 624, v12 + 576, 288, 2);
        CA::OGL::aa_adjust_vertices(v12 + 768, v12 + 816, 288, 2);
      }
      goto LABEL_25;
    }
LABEL_22:
    CA::OGL::aa_adjust_vertices(v12 + 240, v12 + 192, 288, 6);
    v23 = *(_DWORD *)(a2 + 20);
    goto LABEL_23;
  }
LABEL_25:
  v24 = CA::OGL::Context::need_transparent_source(v10);
  result = CA::OGL::emit_quad_indices((uint64_t)v10, *(float64x2_t **)(a2 + 40), CA::OGL::emit_twenty_part_rect(CA::OGL::Context &,CA::OGL::RectState const&,double const*,double const*,float const*,float const*,float const*,float const*,unsigned int,float)::indices, 0x50uLL, 0x24u);
  if ((a9 & 0x40000) != 0 || v24)
  {
    v25 = vcvtq_f64_f32(*(float32x2_t *)(v12 + 8));
    v31[0] = vcvtq_f64_f32(*(float32x2_t *)v12);
    v31[1] = v25;
    v26 = vcvtq_f64_f32(*(float32x2_t *)(v12 + 248));
    v31[2] = vcvtq_f64_f32(*(float32x2_t *)(v12 + 240));
    v31[3] = v26;
    v27 = vcvtq_f64_f32(*(float32x2_t *)(v12 + 1688));
    v31[4] = vcvtq_f64_f32(*(float32x2_t *)(v12 + 1680));
    v31[5] = v27;
    v28 = vcvtq_f64_f32(*(float32x2_t *)(v12 + 1448));
    v31[6] = vcvtq_f64_f32(*(float32x2_t *)(v12 + 1440));
    v31[7] = v28;
    if ((a9 & 0x40000) != 0)
      v29 = *(_QWORD *)(*((_QWORD *)v10 + 2) + 8);
    else
      v29 = 0;
    v30 = v29;
    return CA::OGL::emit_quad_surround((uint64_t)v10, (const double *)v31, &v30);
  }
  return result;
}

void CA::OGL::stroke_round_rect(_QWORD *a1, float64x2_t **a2, double *a3, double *a4, float64_t a5, double a6)
{
  uint64_t v6;
  int v8;
  float64x2_t *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  float64x2_t *v18;
  double v19;
  double v20;
  _BOOL8 v21;
  uint64_t v22;
  uint64_t v23;
  double *v24;
  unsigned int v25;
  double v26;
  double v27;
  int8x16_t v28;
  int8x16_t v34;
  _BOOL8 v35;
  double v36;
  int8x16_t v37;
  int8x16_t v39;
  uint64_t v40;
  float64x2_t *v41;
  double v42;
  double v43;
  float64_t v44;
  int32x2_t v45;
  double v46;
  unsigned int v47;
  double v48;
  double v49;
  unsigned int v50;
  double v51;
  float v52;
  uint64_t v53;
  double v54;
  double v55;
  float v56;
  double v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  double v62;
  float v63;
  double v64;
  float v65;
  int v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _DWORD *v70;
  _QWORD *v71;
  __n128 v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  _OWORD *v76;
  int v77;
  _DWORD *v78;
  uint64_t v79;
  uint64_t v80;
  float64x2_t *v81;
  float64x2_t *v82;
  int v83;
  uint64_t v84;
  float64x2_t *v85;
  double v86;
  double v87;
  float64_t v88;
  double v89;
  double v90;
  float v91;
  unsigned int v92;
  unsigned int v93;
  float v94;
  float *v95;
  uint64_t v96;
  unint64_t v97;
  int v98;
  float64x2_t *v99;
  double v100;
  float64_t v101;
  float64_t v102;
  double v103;
  float64_t v104;
  float *v105;
  float64_t v106;
  float64_t v107;
  float64x2_t *v108;
  double v109;
  double v110;
  float64_t v111;
  float v112;
  const unsigned __int16 *v113;
  uint64_t v114;
  unint64_t v115;
  unsigned int v116;
  double v117;
  double v118;
  double v119;
  float32x2_t v120;
  uint64_t v121;
  _OWORD v122[2];
  _OWORD v123[2];
  __int128 v124;
  __int128 v125;
  _OWORD v126[2];
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  float64x2_t v135;
  _QWORD v136[288];

  v8 = (int)a3;
  v136[287] = *MEMORY[0x1E0C80C00];
  v118 = 0.0;
  v119 = 0.0;
  memset(v126, 0, sizeof(v126));
  v124 = 0u;
  v125 = 0u;
  memset(v123, 0, sizeof(v123));
  memset(v122, 0, sizeof(v122));
  v121 = 0;
  v13 = a2[1];
  if ((LOBYTE(v13[9].f64[0]) & 0x10) != 0)
  {
    CA::Mat4Impl::mat4_get_scale((CA::Mat4Impl *)v13, &v119, &v118, a4);
    v14 = v118;
    v15 = v119;
  }
  else
  {
    v14 = v13[8].f64[0];
    v118 = v14;
    v119 = v14;
    v15 = v14;
  }
  if ((_DWORD)a4)
    v16 = a5 * 1.528665;
  else
    v16 = a5;
  if (v15 > v14)
    v14 = v15;
  LODWORD(v6) = vcvtpd_s64_f64(v14 * v16);
  if ((int)v6 >= 2)
    v17 = v16;
  else
    v17 = a6 * 1.1;
  if (a6 > 0.001)
  {
    v18 = *a2;
    v19 = (*a2)[1].f64[0];
    if (a6 + a6 >= v19 || (v20 = v18[1].f64[1], a6 + a6 >= v20))
    {
      if ((int)v6 > 1)
        CA::OGL::fill_round_rect((uint64_t)a1, a2, (double *)0xF, 0, a5, a5);
      else
        CA::OGL::fill_rect((uint64_t)a1, (uint64_t)a2, a3, a4);
    }
    else
    {
      if (v19 >= v20)
        v19 = v18[1].f64[1];
      if (v19 > 0.0)
      {
        v129 = 0u;
        v130 = 0u;
        v127 = 0u;
        v128 = 0u;
        v131 = 0u;
        v132 = 0u;
        v133 = 0u;
        v134 = 0u;
        v21 = !CA::Transform::is_isotropic((CA::Transform *)v13, 0.0, (uint64_t)a2, (uint64_t)a3, a4);
        if ((int)v6 > 1)
        {
          if ((_DWORD)a4)
          {
            v28 = (int8x16_t)vaddq_f64(vdivq_f64(vmulq_f64(v18[1], (float64x2_t)vdupq_n_s64(0xBFF721E8A7A4B61BLL)), (float64x2_t)vdupq_lane_s64(COERCE__INT64(a5 * 1.528665), 0)), (float64x2_t)vdupq_n_s64(0x400721E8A7A4B61BuLL));
            __asm { FMOV            V1.2D, #1.0 }
            v34 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v28, (float64x2_t)_Q1), _Q1, v28);
            *(float32x2_t *)&v135.f64[0] = vcvt_f32_f64((float64x2_t)vbicq_s8(v34, (int8x16_t)vcltzq_f64((float64x2_t)v34)));
            (*(void (**)(_QWORD *, _QWORD, uint64_t, _BOOL8, _QWORD, uint64_t *, double *, float64x2_t *))(*a1 + 464))(a1, 0, v6, v21, 0, &v121, a4, &v135);
          }
          else
          {
            (*(void (**)(_QWORD *, _QWORD, uint64_t, _BOOL8, uint64_t, uint64_t *))(*a1 + 456))(a1, 0, v6, v21, 1, &v121);
          }
          v25 = ~(v8 << 22) & 0x3C00000;
          v27 = v16 - a6;
          v26 = 0.01;
          if (v16 - a6 <= 0.01)
          {
            v96 = a1[2];
            v97 = *(_QWORD *)(v96 + 16) & 0xFFFFFF00FF00FF00;
            if (*(_QWORD *)(v96 + 8) == 0x3C003C003C003C00)
              v98 = 1;
            else
              v98 = 3;
            *(_DWORD *)(v96 + 16) = v98 | v97;
            *(_DWORD *)(v96 + 20) = HIDWORD(v97);
            v99 = *a2;
            *(float64_t *)&v131 = (*a2)->f64[0];
            *((double *)&v131 + 1) = *(double *)&v131 + v16;
            v100 = v99->f64[1];
            if (v27 >= -0.01)
            {
              v106 = v99[1].f64[0] + *(double *)&v131;
              *(double *)&v132 = v106 - v16;
              *((float64_t *)&v132 + 1) = v106;
              *(double *)&v127 = v100;
              *((double *)&v127 + 1) = v100 + v16;
              v107 = v99[1].f64[1] + v100;
              *(double *)&v128 = v107 - v16;
              *((float64_t *)&v128 + 1) = v107;
              LODWORD(v126[0]) = v121;
              *((float *)v126 + 1) = *(float *)&v121 + (float)((float)(*((float *)&v121 + 1) - *(float *)&v121) * 0.5);
              *((float *)v126 + 2) = *((float *)v126 + 1);
              HIDWORD(v126[0]) = HIDWORD(v121);
              *(_QWORD *)&v123[0] = v121;
              *((_QWORD *)&v123[0] + 1) = v121;
              CA::OGL::emit_eight_part_rect((uint64_t)a1, (uint64_t)a2, (uint64_t)&v131, (uint64_t)&v127, (uint64_t)v126, (uint64_t)v126, (uint64_t)v123, (uint64_t)v123, v25);
            }
            else
            {
              v101 = v99[1].f64[0] + *(double *)&v131;
              *(double *)&v133 = v101 - v16;
              *((float64_t *)&v133 + 1) = v101;
              *(double *)&v132 = *(double *)&v131 + a6;
              *((double *)&v132 + 1) = v101 - a6;
              *(double *)&v127 = v100;
              *((double *)&v127 + 1) = v100 + v16;
              v102 = v99[1].f64[1] + v100;
              v103 = v100 + a6;
              v104 = v102 - v16;
              *(double *)&v129 = v102 - v16;
              *((float64_t *)&v129 + 1) = v102;
              *(double *)&v128 = v103;
              *((double *)&v128 + 1) = v102 - a6;
              *(float *)&v104 = *(float *)&v121 + (float)((float)(*((float *)&v121 + 1) - *(float *)&v121) * 0.5);
              LODWORD(v126[0]) = v121;
              *(int32x4_t *)((char *)v126 + 4) = vdupq_lane_s32(*(int32x2_t *)&v104, 0);
              DWORD1(v126[1]) = HIDWORD(v121);
              LODWORD(v123[0]) = v121;
              *((float *)v123 + 1) = *(float *)&v104;
              *((_QWORD *)&v123[0] + 1) = __PAIR64__(v121, HIDWORD(v121));
              *(float *)&v123[1] = *(float *)&v104;
              DWORD1(v123[1]) = HIDWORD(v121);
              CA::OGL::emit_twenty_four_part_rect((uint64_t)a1, (uint64_t)a2, (uint64_t)&v131, (uint64_t)&v127, (uint64_t)v126, (uint64_t)v126, (uint64_t)v123, (uint64_t)v123, v25);
            }
            goto LABEL_106;
          }
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD, _BOOL8, uint64_t, uint64_t *))(*a1 + 448))(a1, 0, v21, 1, &v121);
          v25 = ~(v8 << 22) & 0x3C00000;
          v26 = 0.1;
          v27 = a6 * 0.1;
        }
        v35 = !CA::Transform::is_isotropic((CA::Transform *)a2[1], v26, v22, v23, v24);
        *(_BYTE *)(a1[2] + 16) = 6;
        if (!(_DWORD)a4)
        {
          v84 = *a1;
          if (v8 == 15 && (int)v6 > 1)
          {
            (*(void (**)(_QWORD *, uint64_t, uint64_t, _BOOL8, uint64_t, uint64_t *))(v84 + 456))(a1, 1, v6, v35, 1, &v121);
            v85 = *a2;
            v86 = (*a2)->f64[1];
            *(float64_t *)&v131 = (*a2)->f64[0];
            *((double *)&v131 + 1) = *(double *)&v131 + a6;
            v87 = v85[1].f64[1];
            v88 = v85[1].f64[0] + *(double *)&v131;
            *(double *)&v133 = v88 - a6;
            *((float64_t *)&v133 + 1) = v88;
            *(double *)&v132 = *(double *)&v131 + v17;
            *((double *)&v132 + 1) = v88 - v17;
            *(double *)&v127 = v86;
            *((double *)&v127 + 1) = v86 + a6;
            v89 = v86 + v17;
            v90 = v87 + v86;
            *(double *)&v129 = v90 - a6;
            *((double *)&v129 + 1) = v90;
            *(double *)&v128 = v89;
            *((double *)&v128 + 1) = v90 - v17;
            v91 = (float)(*((float *)&v121 + 1) - *(float *)&v121) * 0.5;
            *(float *)&v87 = v91 + *(float *)&v121;
            *(float *)&v92 = *(float *)&v121 + a6 / v17 * v91;
            *(float *)&v93 = *((float *)&v121 + 1) + a6 / v17 * (float)(*(float *)&v87 - *((float *)&v121 + 1));
            *(_QWORD *)&v124 = __PAIR64__(v92, v121);
            *(_QWORD *)&v126[0] = __PAIR64__(v92, v121);
            DWORD2(v124) = LODWORD(v87);
            HIDWORD(v124) = LODWORD(v87);
            DWORD2(v126[0]) = LODWORD(v87);
            HIDWORD(v126[0]) = LODWORD(v87);
            *(_QWORD *)&v125 = __PAIR64__(HIDWORD(v121), v93);
            *(_QWORD *)&v126[1] = __PAIR64__(HIDWORD(v121), v93);
            v94 = 0.5 - v17 * 0.5 / v27;
            *(float *)v122 = *(float *)&v121 + (float)((float)(*((float *)&v121 + 1) - *(float *)&v121) * v94);
            *(_QWORD *)((char *)v122 + 4) = __PAIR64__(LODWORD(v87), v121);
            *(float *)v123 = *(float *)v122;
            *(_QWORD *)((char *)v123 + 4) = __PAIR64__(LODWORD(v87), v121);
            HIDWORD(v122[0]) = LODWORD(v87);
            HIDWORD(v123[0]) = LODWORD(v87);
            LODWORD(v122[1]) = HIDWORD(v121);
            *((float *)&v122[1] + 1) = *((float *)&v121 + 1)
                                     + (float)((float)(*(float *)&v121 - *((float *)&v121 + 1)) * v94);
            LODWORD(v123[1]) = HIDWORD(v121);
            *((float *)&v123[1] + 1) = *((float *)&v122[1] + 1);
            CA::OGL::emit_twenty_part_rect((uint64_t)a1, (uint64_t)a2, (uint64_t)&v131, (uint64_t)&v127, (uint64_t)v126, (uint64_t)&v124, (uint64_t)v123, (uint64_t)v122, v25 | 0x4000);
          }
          else
          {
            if ((int)v6 > 1)
              (*(void (**)(_QWORD *, uint64_t, uint64_t, _BOOL8, uint64_t, uint64_t *))(v84 + 456))(a1, 1, v6, v35, 1, &v121);
            else
              (*(void (**)(_QWORD *, uint64_t, _BOOL8, uint64_t, uint64_t *))(v84 + 448))(a1, 1, v35, 1, &v121);
            v108 = *a2;
            v109 = (*a2)->f64[1];
            *(float64_t *)&v131 = (*a2)->f64[0];
            *((double *)&v131 + 1) = *(double *)&v131 + v17;
            v110 = v108[1].f64[1];
            v111 = v108[1].f64[0] + *(double *)&v131;
            *(double *)&v132 = v111 - v17;
            *((float64_t *)&v132 + 1) = v111;
            *(double *)&v127 = v109;
            *((double *)&v127 + 1) = v109 + v17;
            *(double *)&v128 = v110 + v109 - v17;
            *((double *)&v128 + 1) = v110 + v109;
            LODWORD(v126[0]) = v121;
            *((float *)v126 + 1) = *(float *)&v121 + (float)((float)(*((float *)&v121 + 1) - *(float *)&v121) * 0.5);
            *((float *)v126 + 2) = *((float *)v126 + 1);
            HIDWORD(v126[0]) = HIDWORD(v121);
            LODWORD(v124) = v121;
            *((float *)&v124 + 1) = *((float *)v126 + 1);
            *((float *)&v124 + 2) = *((float *)v126 + 1);
            HIDWORD(v124) = HIDWORD(v121);
            v112 = 0.5 - v17 * 0.5 / v27;
            *(float *)v123 = *(float *)&v121 + (float)((float)(*((float *)&v121 + 1) - *(float *)&v121) * v112);
            *((float *)v123 + 1) = *((float *)v126 + 1);
            *((float *)v123 + 2) = *((float *)v126 + 1);
            *((float *)v123 + 3) = *((float *)&v121 + 1)
                                 + (float)((float)(*(float *)&v121 - *((float *)&v121 + 1)) * v112);
            *(float *)v122 = *(float *)v123;
            *((float *)v122 + 1) = *((float *)v126 + 1);
            *((float *)v122 + 2) = *((float *)v126 + 1);
            *((float *)v122 + 3) = *((float *)v123 + 3);
            CA::OGL::emit_nine_part_rect((uint64_t)a1, (uint64_t)a2, (uint64_t)&v131, (uint64_t)&v127, (uint64_t)v126, (uint64_t)&v124, (uint64_t)v123, (uint64_t)v122, v25 | 0x4000);
          }
          goto LABEL_105;
        }
        if (a5 - a6 >= 0.0)
          v36 = (a5 - a6) * 1.528665;
        else
          v36 = 0.0;
        v117 = v36;
        v37 = (int8x16_t)vaddq_f64(vdivq_f64(vmulq_f64(vsubq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(a6 + a6), 0), (*a2)[1]), (float64x2_t)vdupq_n_s64(0x3FF721E8A7A4B61BuLL)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v36, 0)), (float64x2_t)vdupq_n_s64(0x400721E8A7A4B61BuLL));
        __asm { FMOV            V1.2D, #1.0 }
        v39 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v37, (float64x2_t)_Q1), _Q1, v37);
        v120 = vcvt_f32_f64((float64x2_t)vbicq_s8(v39, (int8x16_t)vcltzq_f64((float64x2_t)v39)));
        v40 = 1;
        (*(void (**)(_QWORD *, uint64_t, uint64_t, _BOOL8, _QWORD, uint64_t *, double *, float32x2_t *))(*a1 + 464))(a1, 1, v6, v35, 0, &v121, a4, &v120);
        v41 = *a2;
        v42 = (*a2)->f64[1];
        *(float64_t *)&v131 = (*a2)->f64[0];
        *((double *)&v131 + 1) = *(double *)&v131 + a6;
        v45.i32[1] = HIDWORD(v117);
        *(double *)&v132 = *(double *)&v131 + a6 + v117;
        *((double *)&v132 + 1) = *(double *)&v131 + v17;
        v43 = v41[1].f64[1];
        v44 = v41[1].f64[0] + *(double *)&v131;
        *(double *)&v134 = v44 - a6;
        *((float64_t *)&v134 + 1) = v44;
        *(double *)&v133 = v44 - v17;
        *((double *)&v133 + 1) = v44 - a6 - v117;
        *(double *)&v127 = v42;
        *((double *)&v127 + 1) = v42 + a6;
        *(double *)&v128 = v42 + a6 + v117;
        *((double *)&v128 + 1) = v42 + v17;
        *(double *)&v130 = v43 + v42 - a6;
        *((double *)&v130 + 1) = v43 + v42;
        *(double *)&v129 = v43 + v42 - v17;
        *((double *)&v129 + 1) = *(double *)&v130 - v117;
        *(float *)&v43 = (float)(*((float *)&v121 + 1) - *(float *)&v121) * 0.5;
        *(float *)v45.i32 = *(float *)&v43 + *(float *)&v121;
        v46 = *(float *)&v43;
        *(float *)&v47 = *(float *)&v121 + a6 / v17 * v46;
        v48 = (v117 + a6) / v17;
        *(float *)&v46 = *(float *)&v121 + v48 * v46;
        v49 = (float)(*(float *)v45.i32 - *((float *)&v121 + 1));
        *(float *)&v48 = *((float *)&v121 + 1) + v48 * v49;
        *(float *)&v50 = *((float *)&v121 + 1) + a6 / v17 * v49;
        *(_QWORD *)&v126[0] = __PAIR64__(v47, v121);
        *((_QWORD *)&v126[0] + 1) = __PAIR64__(v45.u32[0], LODWORD(v46));
        *(_QWORD *)&v126[1] = __PAIR64__(LODWORD(v48), v45.u32[0]);
        *((_QWORD *)&v126[1] + 1) = __PAIR64__(HIDWORD(v121), v50);
        *(_QWORD *)&v124 = __PAIR64__(v47, v121);
        *((_QWORD *)&v124 + 1) = __PAIR64__(v45.u32[0], LODWORD(v46));
        *(_QWORD *)&v125 = __PAIR64__(LODWORD(v48), v45.u32[0]);
        *((_QWORD *)&v125 + 1) = __PAIR64__(HIDWORD(v121), v50);
        if (v117 == 0.0)
          v51 = v27;
        else
          v51 = v117;
        v52 = a6 * -0.5 / v51;
        *(float *)v123 = *(float *)&v121 + (float)((float)(*((float *)&v121 + 1) - *(float *)&v121) * v52);
        DWORD1(v123[0]) = v121;
        *(int32x4_t *)((char *)v123 + 8) = vdupq_lane_s32(v45, 0);
        DWORD2(v123[1]) = HIDWORD(v121);
        *((float *)&v123[1] + 3) = *((float *)&v121 + 1)
                                 + (float)((float)(*(float *)&v121 - *((float *)&v121 + 1)) * v52);
        *(float *)v122 = *(float *)v123;
        DWORD1(v122[0]) = v121;
        *(_OWORD *)((char *)v122 + 8) = *(_OWORD *)((char *)v123 + 8);
        DWORD2(v122[1]) = HIDWORD(v121);
        *((float *)&v122[1] + 3) = *((float *)&v123[1] + 3);
        v53 = 6;
        do
        {
          v54 = *((double *)&v131 + v40);
          v55 = *((double *)&v131 + v53);
          if (v54 > v55)
          {
            v56 = (v55 + v54) * 0.5;
            v57 = v56;
            v58 = (v57 - *(double *)&v131) / (v54 - *(double *)&v131);
            *((double *)&v131 + v53) = v57;
            *((double *)&v131 + v40) = v57;
            *((float *)v126 + v40) = *(float *)v126 + (float)((float)(*((float *)v126 + v40) - *(float *)v126) * v58);
            *((float *)v126 + v53) = *((float *)&v126[1] + 3)
                                   + (float)((float)(*((float *)v126 + v53) - *((float *)&v126[1] + 3)) * v58);
            *((float *)v123 + v40) = *(float *)v123 + (float)((float)(*((float *)v123 + v40) - *(float *)v123) * v58);
            *((float *)v123 + v53) = *((float *)&v123[1] + 3)
                                   + (float)((float)(*((float *)v123 + v53) - *((float *)&v123[1] + 3)) * v58);
          }
          ++v40;
          --v53;
        }
        while (v40 != 4);
        v59 = 1;
        v60 = 6;
        do
        {
          v61 = *((double *)&v127 + v59);
          v62 = *((double *)&v127 + v60);
          if (v61 > v62)
          {
            v63 = (v62 + v61) * 0.5;
            v64 = v63;
            v65 = (v64 - *(double *)&v127) / (v61 - *(double *)&v127);
            *((double *)&v127 + v60) = v64;
            *((double *)&v127 + v59) = v64;
            *((float *)&v124 + v59) = *(float *)&v124
                                    + (float)((float)(*((float *)&v124 + v59) - *(float *)&v124) * v65);
            *((float *)&v124 + v60) = *((float *)&v125 + 3)
                                    + (float)((float)(*((float *)&v124 + v60) - *((float *)&v125 + 3)) * v65);
            *((float *)v122 + v59) = *(float *)v122 + (float)((float)(*((float *)v122 + v59) - *(float *)v122) * v65);
            *((float *)v122 + v60) = *((float *)&v122[1] + 3)
                                   + (float)((float)(*((float *)v122 + v60) - *((float *)&v122[1] + 3)) * v65);
          }
          ++v59;
          --v60;
        }
        while (v59 != 4);
        bzero(&v135, 0x900uLL);
        v66 = v25 & 0x3C00000;
        if ((v25 & 0x3C00000) != 0)
          v67 = 72;
        else
          v67 = 64;
        if (v67 > *((unsigned int *)a1 + 34))
          goto LABEL_105;
        v68 = 0;
        v69 = a1[15];
        v70 = (_DWORD *)(v69 + 28);
        v71 = v136;
        v72 = (__n128)xmmword_18474DF50;
        do
        {
          v73 = 0;
          v74 = *((_QWORD *)&v127 + v68);
          v75 = *((_DWORD *)&v124 + v68);
          v76 = v71;
          v77 = *((_DWORD *)v122 + v68);
          v78 = v70;
          do
          {
            *((_QWORD *)v76 - 2) = *((_QWORD *)&v131 + v73);
            *((_QWORD *)v76 - 1) = v74;
            *v76 = xmmword_18474DF50;
            v76 += 2;
            *(v78 - 3) = *((_DWORD *)v126 + v73);
            *(v78 - 2) = v75;
            *(v78 - 1) = *((_DWORD *)v123 + v73);
            *v78 = v77;
            ++v73;
            v78 += 12;
          }
          while (v73 != 8);
          ++v68;
          v70 += 96;
          v71 += 32;
        }
        while (v68 != 8);
        if (v66)
        {
          CA::OGL::adjust_skipped_corner_vertices((uint64_t)&v135, v69, 0, 3uLL, 64, 4, v25 | 0x4000);
          v72.n128_f32[0] = CA::OGL::adjust_skipped_corner_vertices((uint64_t)&v135, v69, 1, 1uLL, 68, 4, v25 | 0x4000);
        }
        v79 = 0;
        v80 = *(_QWORD *)(a1[2] + 8);
        do
        {
          *(_QWORD *)(v69 + v79 + 32) = v80;
          v79 += 48;
        }
        while (48 * v67 != v79);
        v81 = a2[3];
        if (v81)
          ((void (*)(float64x2_t **, float64x2_t *, uint64_t, unint64_t, __n128))v81)(a2, &v135, v69, v67, v72);
        CA::OGL::transform_vertices(&v135, (float32x4_t *)v69, (const double *)v67, a2[1]);
        v82 = a2[4];
        if (v82)
          ((void (*)(float64x2_t **, uint64_t, unint64_t))v82)(a2, v69, v67);
        if (((_BYTE)a2[2] & 9) == 0)
        {
LABEL_101:
          if (v66)
          {
            v113 = (const unsigned __int16 *)&CA::OGL::emit_forty_nine_part_rect(CA::OGL::Context &,CA::OGL::RectState const&,double const*,double const*,float const*,float const*,float const*,float const*,unsigned int,float)::corner_skipped_indices;
            v114 = (uint64_t)a1;
            v115 = 144;
            v116 = 72;
          }
          else
          {
            v113 = (const unsigned __int16 *)&CA::OGL::emit_forty_nine_part_rect(CA::OGL::Context &,CA::OGL::RectState const&,double const*,double const*,float const*,float const*,float const*,float const*,unsigned int,float)::indices;
            v114 = (uint64_t)a1;
            v115 = 112;
            v116 = 64;
          }
          CA::OGL::emit_quad_indices(v114, a2[5], v113, v115, v116);
LABEL_105:
          (*(void (**)(_QWORD *, _QWORD, uint64_t))(*a1 + 520))(a1, 0, 1);
LABEL_106:
          *(_BYTE *)(a1[2] + 16) = 0;
          (*(void (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 520))(a1, 0, 0);
          return;
        }
        v83 = *((_DWORD *)a2 + 5);
        if ((v83 & 0xF) == 0)
          goto LABEL_100;
        if (v66)
        {
          if ((v83 & 4) != 0)
          {
            CA::OGL::aa_adjust_vertices(v69 + 3072, v69 + 384, 0, 1);
            CA::OGL::aa_adjust_vertices(v69 + 48, v69 + 3264, 0, 1);
            CA::OGL::aa_adjust_vertices(v69 + 96, v69 + 480, 48, 4);
            CA::OGL::aa_adjust_vertices(v69 + 336, v69 + 720, 0, 1);
            CA::OGL::aa_adjust_vertices(v69 + 3072, v69 + 48, 0, 1);
            if ((v25 & 0x400000) != 0)
              *(_OWORD *)(v69 + 3088) = *(_OWORD *)(v69 + 64);
          }
          if ((*((_BYTE *)a2 + 20) & 1) != 0)
          {
            CA::OGL::aa_adjust_vertices(v69, v69 + 384, 0, 1);
            CA::OGL::aa_adjust_vertices(v69, v69 + 48, 384, 6);
            CA::OGL::aa_adjust_vertices(v69 + 2304, v69 + 3408, 0, 1);
            CA::OGL::aa_adjust_vertices(v69 + 3216, v69 + 2736, 0, 1);
            CA::OGL::aa_adjust_vertices(v69 + 3216, v69 + 2304, 0, 1);
            if ((v25 & 0x400000) != 0)
              *(_OWORD *)(v69 + 16) = *(_OWORD *)(v69 + 400);
            if ((v25 & 0x1000000) != 0)
              *(_OWORD *)(v69 + 3232) = *(_OWORD *)(v69 + 2320);
          }
          if ((*((_BYTE *)a2 + 20) & 8) != 0)
          {
            CA::OGL::aa_adjust_vertices(v69 + 2688, v69 + 2736, 0, 1);
            CA::OGL::aa_adjust_vertices(v69 + 2688, v69 + 2304, 48, 6);
            CA::OGL::aa_adjust_vertices(v69 + 2976, v69 + 3360, 0, 1);
            CA::OGL::aa_adjust_vertices(v69 + 3168, v69 + 2640, 0, 1);
            CA::OGL::aa_adjust_vertices(v69 + 3168, v69 + 2976, 0, 1);
            if ((v25 & 0x1000000) != 0)
              *(_OWORD *)(v69 + 2704) = *(_OWORD *)(v69 + 2752);
            if ((v25 & 0x2000000) != 0)
              *(_OWORD *)(v69 + 3184) = *(_OWORD *)(v69 + 2992);
          }
          if ((*((_BYTE *)a2 + 20) & 2) != 0)
          {
            CA::OGL::aa_adjust_vertices(v69 + 3024, v69 + 2640, 0, 1);
            CA::OGL::aa_adjust_vertices(v69 + 1104, v69 + 1056, 384, 6);
            CA::OGL::aa_adjust_vertices(v69 + 720, v69 + 3312, 0, 1);
            CA::OGL::aa_adjust_vertices(v69 + 3120, v69 + 288, 0, 1);
            CA::OGL::aa_adjust_vertices(v69 + 3120, v69 + 720, 0, 1);
            if ((v25 & 0x2000000) != 0)
              *(_OWORD *)(v69 + 3040) = *(_OWORD *)(v69 + 2656);
            if ((v25 & 0x800000) != 0)
              *(_OWORD *)(v69 + 3136) = *(_OWORD *)(v69 + 736);
          }
          if ((*((_BYTE *)a2 + 20) & 4) != 0)
          {
            CA::OGL::aa_adjust_vertices(v69 + 288, v69 + 672, 0, 1);
            CA::OGL::aa_adjust_vertices(v69 + 336, v69 + 288, 0, 1);
            if ((v25 & 0x800000) != 0)
              *(_OWORD *)(v69 + 352) = *(_OWORD *)(v69 + 304);
          }
          goto LABEL_100;
        }
        if ((v83 & 4) != 0)
        {
          CA::OGL::aa_adjust_vertices(v69, v69 + 384, 48, 8);
          v83 = *((_DWORD *)a2 + 5);
          if ((v83 & 8) == 0)
          {
LABEL_97:
            if ((v83 & 1) == 0)
              goto LABEL_98;
            goto LABEL_110;
          }
        }
        else if ((v83 & 8) == 0)
        {
          goto LABEL_97;
        }
        CA::OGL::aa_adjust_vertices(v69 + 2688, v69 + 2304, 48, 8);
        v83 = *((_DWORD *)a2 + 5);
        if ((v83 & 1) == 0)
        {
LABEL_98:
          if ((v83 & 2) != 0)
LABEL_99:
            CA::OGL::aa_adjust_vertices(v69 + 336, v69 + 288, 384, 8);
LABEL_100:
          CA::OGL::aa_adjust_vertices(v69 + 480, v69 + 96, 48, 4);
          CA::OGL::aa_adjust_vertices(v69 + 2400, v69 + 2784, 48, 4);
          CA::OGL::aa_adjust_vertices(v69 + 816, v69 + 768, 384, 4);
          CA::OGL::aa_adjust_vertices(v69 + 1056, v69 + 1104, 384, 4);
          goto LABEL_101;
        }
LABEL_110:
        CA::OGL::aa_adjust_vertices(v69, v69 + 48, 384, 8);
        if ((*((_DWORD *)a2 + 5) & 2) == 0)
          goto LABEL_100;
        goto LABEL_99;
      }
    }
  }
}

void CA::OGL::Shape::fill_path<CA::OGL::RenderPathIterator>(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  int32x2_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int32x2_t *v8;
  uint64_t v9;
  uint64_t v10;
  int32x2_t v11;
  int64x2_t v12;
  float64x2_t v13;
  double *v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE *v17;
  _QWORD *v18;
  __int128 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  float64x2_t v23;
  uint64_t v24;
  double v25;
  double v26;
  float64_t v27;
  float64_t v28;
  int v29;
  float64x2_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float64x2_t v34;
  _OWORD v35[4];
  uint64_t v36;
  int64x2_t v37;
  int64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  void ***v41;
  _QWORD v42[2];
  __int128 v43;
  uint64_t v44;
  float64x2_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  MEMORY[0x1E0C80A78](a1);
  v8 = v3;
  v29 = v2;
  v10 = v9;
  v51 = *MEMORY[0x1E0C80C00];
  v42[0] = 0;
  v42[1] = &v44;
  v43 = xmmword_18474E1F0;
  v41 = (void ***)v42;
  v36 = 0;
  *(_QWORD *)&v30.f64[0] = v42;
  v30.f64[1] = 0.0;
  v31 = 0;
  v32 = 0;
  v33 = 0x3FC0000000000000;
  v34 = 0u;
  memset(v35, 0, sizeof(v35));
  v37 = vdupq_n_s64(0x7FF0000000000000uLL);
  v38 = vdupq_n_s64(0xFFF0000000000000);
  v11 = vadd_s32(v3[1], *v3);
  v12.i64[0] = v11.i32[0];
  v12.i64[1] = v11.i32[1];
  v13 = vcvtq_f64_s64(v12);
  v12.i64[0] = v3->i32[0];
  v12.i64[1] = (int)HIDWORD(*(unint64_t *)v3);
  v39 = vcvtq_f64_s64(v12);
  v40 = v13;
  v14 = *(double **)(*v1 + 32);
  v15 = *(_BYTE **)(*v1 + 40);
  v16 = *(unsigned int *)(*v1 + 20);
  v17 = &v15[v16];
  if (v1[1])
  {
    if ((_DWORD)v16)
    {
      v18 = v1;
      v19 = xmmword_18474DF50;
      while (1)
      {
        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        v20 = *v15;
        if ((v20 - 1) < 2)
          break;
        if (v20 == 3)
        {
          v21 = 1;
LABEL_10:
          v47 = *((_OWORD *)v14 + 1);
          v48 = v19;
LABEL_11:
          v45 = *(float64x2_t *)v14;
          v46 = v19;
          v22 = v21 + 1;
          CA::Transform::apply_to_point4(v18[1], &v45, &v45, (const double *)(v21 + 1));
          v19 = xmmword_18474DF50;
          v14 += 2 * v22;
          v20 = *v15;
          goto LABEL_12;
        }
        if (v20 == 4)
        {
          v49 = *((_OWORD *)v14 + 2);
          *((_QWORD *)&v50 + 1) = 0x3FF0000000000000;
          v21 = 2;
          goto LABEL_10;
        }
LABEL_12:
        switch(v20)
        {
          case 0:
            CA::ScanConverter::Path::closepath(v30.f64);
            goto LABEL_18;
          case 1:
            v23 = v45;
            v24 = *((_QWORD *)&v46 + 1);
            CA::ScanConverter::Path::closepath(v30.f64);
            v34 = v23;
            *(_QWORD *)&v35[0] = v24;
            *(float64x2_t *)((char *)v35 + 8) = v23;
            *((_QWORD *)&v35[1] + 1) = v24;
            goto LABEL_18;
          case 2:
            CA::ScanConverter::Path::lineto((uint64_t)&v30, v45.f64[0], v45.f64[1], *((double *)&v46 + 1));
            goto LABEL_18;
          case 3:
            CA::ScanConverter::Path::quadto((CA::ScanConverter::Path *)&v30, v45.f64[0], v45.f64[1], *((double *)&v46 + 1), *(double *)&v47, *((double *)&v47 + 1), *((double *)&v48 + 1), (uint64_t)v1, v2, (uint64_t)v3, v4, v5, v6, v7);
            goto LABEL_18;
          case 4:
            CA::ScanConverter::Path::cubeto((CA::ScanConverter::Path *)&v30, v45.f64[0], v45.f64[1], *((double *)&v46 + 1), *(double *)&v47, *((double *)&v47 + 1), *((double *)&v48 + 1), *(double *)&v49, *((double *)&v49 + 1), (uint64_t)v1, v2, (uint64_t)v3, v4, v5, v6, v7, *((double *)&v50 + 1));
LABEL_18:
            v19 = xmmword_18474DF50;
            break;
          default:
            break;
        }
        if (++v15 >= v17)
          goto LABEL_29;
      }
      v21 = 0;
      goto LABEL_11;
    }
  }
  else if ((_DWORD)v16)
  {
    do
    {
      switch(*v15)
      {
        case 0:
          CA::ScanConverter::Path::closepath(v30.f64);
          break;
        case 1:
          v27 = *v14;
          v28 = v14[1];
          v14 += 2;
          CA::ScanConverter::Path::closepath(v30.f64);
          v34.f64[0] = v27;
          v34.f64[1] = v28;
          *((float64_t *)v35 + 1) = v27;
          *(float64_t *)&v35[1] = v28;
          *(_QWORD *)&v35[0] = 0x3FF0000000000000;
          *((_QWORD *)&v35[1] + 1) = 0x3FF0000000000000;
          break;
        case 2:
          v25 = *v14;
          v26 = v14[1];
          v14 += 2;
          CA::ScanConverter::Path::lineto(v30.f64, v25, v26);
          break;
        case 3:
          CA::ScanConverter::Path::quadto((CA::ScanConverter::Path *)&v30, *v14, v14[1], v14[2], v14[3], (uint64_t)v1, v2, (uint64_t)v3, v4, v5, v6, v7);
          v14 += 4;
          break;
        case 4:
          CA::ScanConverter::Path::cubeto((CA::ScanConverter::Path *)&v30, *v14, v14[1], v14[2], v14[3], v14[4], v14[5], (uint64_t)v1, v2, (uint64_t)v3, v4, v5, v6, v7);
          v14 += 6;
          break;
        default:
          break;
      }
      ++v15;
    }
    while (v15 < v17);
  }
LABEL_29:
  CA::ScanConverter::Path::closepath(v30.f64);
  if (*(_QWORD *)&v30.f64[0])
    CA::OGL::Shape::fill_sc_path(v10, &v30, v29, 0, 1u, *v8, v8[1]);
  x_heap_free(v41);
}

uint64_t CA::OGL::emit_nine_part_rect(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  _BOOL4 v9;
  _BOOL4 v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  CA::OGL::Context *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _QWORD *v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, float64x2_t *, uint64_t, unint64_t, __n128);
  void (*v28)(uint64_t, uint64_t, unint64_t);
  int v29;
  unint64_t v30;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _DWORD *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _DWORD *v42;
  unint64_t v43;
  unint64_t v44;
  _DWORD *v45;
  unint64_t v46;
  unint64_t v47;
  _DWORD *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _DWORD *v54;
  uint64_t v55;
  unsigned int v56;
  unint64_t v57;
  const unsigned __int16 *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  uint64_t v73;
  _WORD v74[16];
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  _OWORD v79[8];
  float64x2_t v80;
  _QWORD v81[80];

  v81[78] = *MEMORY[0x1E0C80C00];
  v9 = (a9 & 0x3C00000) != 0;
  v10 = (a9 & 0x8000000) == 0;
  v11 = v9 && v10;
  if (v9 && v10)
    v12 = 20;
  else
    v12 = 16;
  if (a7)
    v13 = 4;
  else
    v13 = 2;
  if (v12 > *(unsigned int *)(result + 136))
    return result;
  v15 = (CA::OGL::Context *)result;
  v16 = 0;
  v17 = *(_QWORD *)(result + 120);
  v18 = (_DWORD *)(v17 + 28);
  v19 = v81;
  v20 = (__n128)xmmword_18474DF50;
  do
  {
    v21 = 0;
    v22 = *(_QWORD *)(a4 + 8 * v16);
    v23 = v19;
    v24 = v18;
    do
    {
      *((_QWORD *)v23 - 2) = *(_QWORD *)(a3 + 8 * v21);
      *((_QWORD *)v23 - 1) = v22;
      *v23 = xmmword_18474DF50;
      if (a5)
      {
        *(v24 - 3) = *(_DWORD *)(a5 + 4 * v21);
        *(v24 - 2) = *(_DWORD *)(a6 + 4 * v16);
      }
      if (a7)
      {
        *(v24 - 1) = *(_DWORD *)(a7 + 4 * v21);
        *v24 = *(_DWORD *)(a8 + 4 * v16);
      }
      ++v21;
      v24 += 12;
      v23 += 2;
    }
    while (v21 != 4);
    ++v16;
    v18 += 48;
    v19 += 16;
  }
  while (v16 != 4);
  if (v11)
    v20.n128_f32[0] = CA::OGL::adjust_skipped_corner_vertices_simple(&v80, v17, 4, v13, a9);
  v25 = 0;
  v26 = *(_QWORD *)(*((_QWORD *)v15 + 2) + 8);
  do
  {
    *(_QWORD *)(v17 + v25 + 32) = v26;
    v25 += 48;
  }
  while (48 * v12 != v25);
  v27 = *(void (**)(uint64_t, float64x2_t *, uint64_t, unint64_t, __n128))(a2 + 24);
  if (v27)
    v27(a2, &v80, v17, v12, v20);
  CA::OGL::transform_vertices(&v80, (float32x4_t *)v17, (const double *)v12, *(float64x2_t **)(a2 + 8));
  v28 = *(void (**)(uint64_t, uint64_t, unint64_t))(a2 + 32);
  if (v28)
    v28(a2, v17, v12);
  if ((*(_BYTE *)(a2 + 16) & 9) == 0)
    goto LABEL_78;
  v29 = *(_DWORD *)(a2 + 20);
  if ((v29 & 0xF) == 0)
    goto LABEL_78;
  if (v11)
  {
    if ((v29 & 4) != 0)
    {
      CA::OGL::aa_adjust_vertices(v17 + 768, v17 + 192, 0, 1);
      CA::OGL::aa_adjust_vertices(v17 + 48, v17 + 240, 0, 1);
      CA::OGL::aa_adjust_vertices(v17 + 144, v17 + 336, 0, 1);
      CA::OGL::aa_adjust_vertices(v17 + 768, v17 + 48, 0, 1);
      if ((a9 & 0x400000) != 0)
      {
        v30 = (a9 >> 25) & 2;
        v31 = v13 >= v30;
        v32 = v13 - v30;
        if (v32 != 0 && v31)
        {
          v33 = v17 + 8 * (((unint64_t)a9 >> 26) & 1);
          do
          {
            *(_DWORD *)(v33 + 784) = *(_DWORD *)(v33 + 64);
            v33 += 4;
            --v32;
          }
          while (v32);
        }
      }
    }
    if ((*(_BYTE *)(a2 + 20) & 1) != 0)
    {
      CA::OGL::aa_adjust_vertices(v17, v17 + 192, 0, 1);
      CA::OGL::aa_adjust_vertices(v17, v17 + 48, 192, 3);
      CA::OGL::aa_adjust_vertices(v17 + 912, v17 + 624, 0, 1);
      CA::OGL::aa_adjust_vertices(v17 + 912, v17 + 384, 0, 1);
      if ((a9 & 0x400000) != 0)
      {
        v34 = (a9 >> 25) & 2;
        v31 = v13 >= v34;
        v35 = v13 - v34;
        if (v35 != 0 && v31)
        {
          v36 = (_DWORD *)(v17 + 8 * (((unint64_t)a9 >> 26) & 1) + 208);
          do
          {
            *(v36 - 48) = *v36;
            ++v36;
            --v35;
          }
          while (v35);
        }
      }
      if ((a9 & 0x1000000) != 0)
      {
        v37 = (a9 >> 25) & 2;
        v31 = v13 >= v37;
        v38 = v13 - v37;
        if (v38 != 0 && v31)
        {
          v39 = v17 + 8 * (((unint64_t)a9 >> 26) & 1);
          do
          {
            *(_DWORD *)(v39 + 928) = *(_DWORD *)(v39 + 400);
            v39 += 4;
            --v38;
          }
          while (v38);
        }
      }
    }
    if ((*(_BYTE *)(a2 + 20) & 8) != 0)
    {
      CA::OGL::aa_adjust_vertices(v17 + 576, v17 + 624, 0, 1);
      CA::OGL::aa_adjust_vertices(v17 + 576, v17 + 384, 48, 3);
      CA::OGL::aa_adjust_vertices(v17 + 864, v17 + 528, 0, 1);
      CA::OGL::aa_adjust_vertices(v17 + 864, v17 + 672, 0, 1);
      if ((a9 & 0x1000000) != 0)
      {
        v40 = (a9 >> 25) & 2;
        v31 = v13 >= v40;
        v41 = v13 - v40;
        if (v41 != 0 && v31)
        {
          v42 = (_DWORD *)(v17 + 8 * (((unint64_t)a9 >> 26) & 1) + 592);
          do
          {
            *v42 = v42[12];
            ++v42;
            --v41;
          }
          while (v41);
        }
      }
      if ((a9 & 0x2000000) != 0)
      {
        v43 = (a9 >> 25) & 2;
        v31 = v13 >= v43;
        v44 = v13 - v43;
        if (v44 != 0 && v31)
        {
          v45 = (_DWORD *)(v17 + 8 * (((unint64_t)a9 >> 26) & 1) + 880);
          do
          {
            *v45 = *(v45 - 48);
            ++v45;
            --v44;
          }
          while (v44);
        }
      }
    }
    if ((*(_BYTE *)(a2 + 20) & 2) != 0)
    {
      CA::OGL::aa_adjust_vertices(v17 + 720, v17 + 528, 0, 1);
      CA::OGL::aa_adjust_vertices(v17 + 336, v17 + 288, 192, 3);
      CA::OGL::aa_adjust_vertices(v17 + 816, v17 + 96, 0, 1);
      CA::OGL::aa_adjust_vertices(v17 + 816, v17 + 336, 0, 1);
      if ((a9 & 0x2000000) != 0)
      {
        v46 = (a9 >> 25) & 2;
        v31 = v13 >= v46;
        v47 = v13 - v46;
        if (v47 != 0 && v31)
        {
          v48 = (_DWORD *)(v17 + 8 * (((unint64_t)a9 >> 26) & 1) + 736);
          do
          {
            *v48 = *(v48 - 48);
            ++v48;
            --v47;
          }
          while (v47);
        }
      }
      if ((a9 & 0x800000) != 0)
      {
        v49 = (a9 >> 25) & 2;
        v31 = v13 >= v49;
        v50 = v13 - v49;
        if (v50 != 0 && v31)
        {
          v51 = v17 + 8 * (((unint64_t)a9 >> 26) & 1);
          do
          {
            *(_DWORD *)(v51 + 832) = *(_DWORD *)(v51 + 352);
            v51 += 4;
            --v50;
          }
          while (v50);
        }
      }
    }
    if ((*(_BYTE *)(a2 + 20) & 4) != 0)
    {
      CA::OGL::aa_adjust_vertices(v17 + 96, v17 + 288, 0, 1);
      CA::OGL::aa_adjust_vertices(v17 + 144, v17 + 96, 0, 1);
      if ((a9 & 0x800000) != 0)
      {
        v52 = (a9 >> 25) & 2;
        v31 = v13 >= v52;
        v53 = v13 - v52;
        if (v53 != 0 && v31)
        {
          v54 = (_DWORD *)(v17 + 8 * (((unint64_t)a9 >> 26) & 1) + 160);
          do
          {
            *v54 = *(v54 - 12);
            ++v54;
            --v53;
          }
          while (v53);
        }
      }
    }
    goto LABEL_78;
  }
  if ((v29 & 4) != 0)
  {
    CA::OGL::aa_adjust_vertices(v17, v17 + 192, 48, 4);
    v29 = *(_DWORD *)(a2 + 20);
    if ((v29 & 8) == 0)
    {
LABEL_75:
      if ((v29 & 1) == 0)
        goto LABEL_76;
LABEL_100:
      CA::OGL::aa_adjust_vertices(v17, v17 + 48, 192, 4);
      if ((*(_DWORD *)(a2 + 20) & 2) == 0)
        goto LABEL_78;
      goto LABEL_77;
    }
  }
  else if ((v29 & 8) == 0)
  {
    goto LABEL_75;
  }
  CA::OGL::aa_adjust_vertices(v17 + 576, v17 + 384, 48, 4);
  v29 = *(_DWORD *)(a2 + 20);
  if ((v29 & 1) != 0)
    goto LABEL_100;
LABEL_76:
  if ((v29 & 2) != 0)
LABEL_77:
    CA::OGL::aa_adjust_vertices(v17 + 144, v17 + 96, 192, 4);
LABEL_78:
  v55 = CA::OGL::Context::need_transparent_source(v15);
  v56 = a9 & 0x40000;
  if ((a9 & 0x8000000) != 0)
    v57 = 20;
  else
    v57 = 4;
  v58 = (const unsigned __int16 *)&CA::OGL::emit_nine_part_rect(CA::OGL::Context &,CA::OGL::RectState const&,double const*,double const*,float const*,float const*,float const*,float const*,unsigned int,float)::indices;
  if ((a9 & 0x8000000) != 0 && (a9 & 0x3C00000) != 0)
  {
    LODWORD(v55) = MEMORY[0x1E0C80A78](v55);
    v60 = 0;
    v61 = 0;
    memset(v74, 0, sizeof(v74));
    v75 = xmmword_18475E168;
    v76 = unk_18475E178;
    v77 = 0x9000A00060005;
    v62 = 12;
    do
    {
      v63 = *(_QWORD *)(v59 + 8 * v60);
      if ((dword_18474EA50[v60] & a9) != 0)
      {
        *(_QWORD *)&v74[v62] = v63;
        v62 -= 4;
        v57 += 4;
      }
      else
      {
        *(_QWORD *)&v74[v61] = v63;
        v61 += 4;
      }
      ++v60;
    }
    while (v60 != 4);
    v58 = v74;
  }
  v64 = v55 | (v56 >> 18);
  if (v11)
  {
    v58 = (const unsigned __int16 *)&CA::OGL::emit_nine_part_rect(CA::OGL::Context &,CA::OGL::RectState const&,double const*,double const*,float const*,float const*,float const*,float const*,unsigned int,float)::corner_skipped_indices;
    v65 = (uint64_t)v15;
    v66 = a2;
    v67 = 52;
    v68 = 20;
  }
  else
  {
    v65 = (uint64_t)v15;
    v66 = a2;
    v67 = 36;
    v68 = 16;
  }
  result = CA::OGL::emit_mesh_with_center(v65, v66, v58, v67, v57, v68, a9);
  if (v64)
  {
    v69 = vcvtq_f64_f32(*(float32x2_t *)(v17 + 8));
    v79[0] = vcvtq_f64_f32(*(float32x2_t *)v17);
    v79[1] = v69;
    v70 = vcvtq_f64_f32(*(float32x2_t *)(v17 + 152));
    v79[2] = vcvtq_f64_f32(*(float32x2_t *)(v17 + 144));
    v79[3] = v70;
    v71 = vcvtq_f64_f32(*(float32x2_t *)(v17 + 728));
    v79[4] = vcvtq_f64_f32(*(float32x2_t *)(v17 + 720));
    v79[5] = v71;
    v72 = vcvtq_f64_f32(*(float32x2_t *)(v17 + 584));
    v79[6] = vcvtq_f64_f32(*(float32x2_t *)(v17 + 576));
    v79[7] = v72;
    if ((a9 & 0x40000) != 0)
      v73 = *(_QWORD *)(*((_QWORD *)v15 + 2) + 8);
    else
      v73 = 0;
    v78 = v73;
    return CA::OGL::emit_quad_surround((uint64_t)v15, (const double *)v79, &v78);
  }
  return result;
}

uint64_t CA::OGL::aa_adjust_vertices(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float v9;
  float v10;
  float v11;
  float32x4_t *v12;
  float32x4_t v13;
  float32x4_t v14;

  if (a4)
  {
    v4 = 0;
    do
    {
      v5 = *(float32x4_t *)(result + v4);
      v6 = *(float32x4_t *)(a2 + v4);
      v7 = vsubq_f32(v5, v6);
      v8 = vmulq_f32(v7, v7);
      v9 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v8, v8));
      if (v9 != 0.0)
      {
        v10 = 1.0;
        if (v9 != 1.0)
          v10 = 1.0 / sqrtf(v9);
        v6.i32[0] = HIDWORD(*(_OWORD *)(a2 + v4));
        if (v5.f32[3] > v6.f32[3])
          v6.i32[0] = HIDWORD(*(_OWORD *)(result + v4));
        v11 = v10 * v6.f32[0];
        v12 = (float32x4_t *)(result + v4);
        v13 = vmlaq_n_f32(v5, v7, v11);
        v14 = vmlaq_n_f32(*(float32x4_t *)(result + v4 + 16), vsubq_f32(*(float32x4_t *)(result + v4 + 16), *(float32x4_t *)(a2 + v4 + 16)), v11);
        *v12 = v13;
        v12[1] = v14;
      }
      v4 += a3;
      --a4;
    }
    while (a4);
  }
  return result;
}

float64x2_t *CA::OGL::transform_vertices(float64x2_t *result, float32x4_t *a2, const double *a3, float64x2_t *this)
{
  const double *v4;
  float64x2_t *v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t *v10;

  v4 = a3;
  v6 = result;
  if ((LOBYTE(this[9].f64[0]) & 0x1F) != 0)
  {
    for (result = (float64x2_t *)CA::Transform::apply_to_point4((uint64_t)this, result, result, a3);
          v4;
          v4 = (const double *)((char *)v4 - 1))
    {
      v8 = *v6;
      v7 = v6[1];
      v6 += 2;
      *a2 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v8), v7);
      a2 += 3;
    }
  }
  else if (a3)
  {
    v9 = this[6];
    v10 = result + 1;
    do
    {
      *a2 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(v10[-1], v9)), *v10);
      a2 += 3;
      v10 += 2;
      v4 = (const double *)((char *)v4 - 1);
    }
    while (v4);
  }
  return result;
}

uint64_t CA::Transform::apply_to_point4(uint64_t this, float64x2_t *a2, float64x2_t *a3, const double *a4)
{
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;

  if ((*(_BYTE *)(this + 144) & 0x10) != 0)
  {
    for (; a4; a4 = (const double *)((char *)a4 - 1))
    {
      v7 = *a3;
      v8 = a3[1];
      a3 += 2;
      v9 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(this + 16), v7.f64[0]), *(float64x2_t *)(this + 48), v7, 1), *(float64x2_t *)(this + 80), v8.f64[0]), *(float64x2_t *)(this + 112), v8, 1);
      *a2 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)this, v7.f64[0]), *(float64x2_t *)(this + 32), v7, 1), *(float64x2_t *)(this + 64), v8.f64[0]), *(float64x2_t *)(this + 96), v8, 1);
      a2[1] = v9;
      a2 += 2;
    }
  }
  else
  {
    v4 = *(float64x2_t *)(this + 96);
    v5.f64[0] = *(float64_t *)this;
    v6.f64[1] = *(float64_t *)(this + 40);
    if (a2 == a3)
    {
      if (a4)
      {
        v5.f64[1] = *(float64_t *)(this + 8);
        v6.f64[0] = *(float64_t *)(this + 32);
        do
        {
          *a2 = vmlaq_laneq_f64(vmlaq_n_f64(v4, v5, a2->f64[0]), v6, *a2, 1);
          a2 += 2;
          a4 = (const double *)((char *)a4 - 1);
        }
        while (a4);
      }
    }
    else if (a4)
    {
      v5.f64[1] = *(float64_t *)(this + 8);
      v6.f64[0] = *(float64_t *)(this + 32);
      do
      {
        *a2 = vmlaq_laneq_f64(vmlaq_n_f64(v4, v5, a3->f64[0]), v6, *a3, 1);
        a2[1] = a3[1];
        a3 += 2;
        a2 += 2;
        a4 = (const double *)((char *)a4 - 1);
      }
      while (a4);
    }
  }
  return this;
}

uint64_t CA::OGL::emit_mesh_with_center(uint64_t a1, uint64_t a2, const unsigned __int16 *a3, unint64_t a4, unint64_t a5, unsigned int a6, int a7)
{
  unint64_t v8;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  char v16;

  v8 = a4;
  if ((a7 & 0x4000) != 0)
  {
    v8 = a4 - a5;
  }
  else if ((a7 & 0x30000) != 0 || (*(_BYTE *)(a2 + 17) & 0x80) != 0)
  {
    v8 = a4 - a5;
    if (a5)
    {
      v12 = *(_QWORD *)(a1 + 16);
      v13 = *(_QWORD *)(v12 + 16);
      if ((a7 & 0x10000) != 0)
      {
        v14 = v13 & 0xFFFFFF00FF00FF00;
        if (*(_QWORD *)(v12 + 8) == 0x3C003C003C003C00)
          v15 = 1;
        else
          v15 = 3;
        *(_DWORD *)(v12 + 16) = v15 | v14;
        *(_DWORD *)(v12 + 20) = HIDWORD(v14);
      }
      v16 = *(_BYTE *)(v12 + 481);
      if ((a7 & 0x20000) != 0)
        *(_BYTE *)(*(_QWORD *)(a1 + 16) + 16) = 0;
      if ((v16 & 1) != 0)
      {
        if ((*(_BYTE *)(a2 + 17) & 0x80) != 0)
          *(_BYTE *)(*(_QWORD *)(a1 + 16) + 481) &= ~1u;
        CA::OGL::emit_quad_indices(a1, *(float64x2_t **)(a2 + 40), &a3[v8], a5, a6);
        if ((*(_BYTE *)(a2 + 17) & 0x80) != 0)
          *(_BYTE *)(*(_QWORD *)(a1 + 16) + 481) |= 1u;
      }
      else
      {
        CA::OGL::emit_quad_indices(a1, *(float64x2_t **)(a2 + 40), &a3[v8], a5, a6);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16) = v13;
    }
  }
  return CA::OGL::emit_quad_indices(a1, *(float64x2_t **)(a2 + 40), a3, v8, a6);
}

uint64_t CA::ScanConverter::Path::add_monotonic_cube(uint64_t this, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, int a10)
{
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  unsigned int v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  BOOL v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v53;
  double v54;
  double v55;
  NSObject *v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  BOOL v62;
  double v63;
  BOOL v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  uint8_t buf[4];
  double v82;
  __int16 v83;
  double v84;
  __int16 v85;
  double v86;
  __int16 v87;
  double v88;
  __int16 v89;
  double v90;
  __int16 v91;
  double v92;
  __int16 v93;
  double v94;
  __int16 v95;
  double v96;
  uint64_t v97;

  v15 = this;
  v97 = *MEMORY[0x1E0C80C00];
  if (a10 >= 2)
  {
    v18 = a9 * a9;
    v19 = 4.0;
    v75 = a8 * 4.0;
    v69 = a9 * 8.0;
    v70 = a9 * 4.0;
    v67 = a9 * a9 * a9;
    v68 = a9 + a9;
    v20 = a10 + 1;
    v21 = 12.0;
    v22 = 6.0;
    v23 = 2.0;
    v24 = a8 + a8;
    v79 = a8 + a8;
    while (1)
    {
      if (vabdd_f64(a9, a3) < 0.0001)
      {
        v16 = a2;
        v17 = a3;
        return CA::ScanConverter::Path::add_line(v15, v16, v17, a8, a9);
      }
      if (a3 >= a9)
        v25 = a9;
      else
        v25 = a3;
      if (a3 <= a9)
        v26 = a9;
      else
        v26 = a3;
      if (v25 > *(double *)(v15 + 184) || v26 < *(double *)(v15 + 168))
        return this;
      v27 = *(double *)(v15 + 32);
      v28 = a4 + a4;
      v29 = a6 + a6;
      v30 = (a2 - (a4 + a4) + a6) * (a2 - (a4 + a4) + a6) + (a3 - (a5 + a5) + a7) * (a3 - (a5 + a5) + a7) > v27 * v27
         || (a4 - (a6 + a6) + a8) * (a4 - (a6 + a6) + a8) + (a5 - (a7 + a7) + a9) * (a5 - (a7 + a7) + a9) > v27 * v27;
      if (!v30)
        return CA::ScanConverter::Path::add_line(v15, a2, a3, a8, a9);
      v74 = v25;
      v31 = 1.0 / (a3 - a9);
      v78 = a4 + a2;
      v32 = v31
          * v31
          * (0.9
           * v31)
          * (a7 * (a4 + a2 - v24) + (v29 + a4 + a2 * -3.0) * a9 + (a8 * 3.0 - v28 - a6) * a3 + (a2 + a2 - (a6 + a8))
                                                                                             * a5);
      v33 = (a2 - a8 + v32 * (v18 - a3 * a3)) * v31;
      v77 = a2 * v19;
      v34 = a2 * v19 + a4 * v19 + a6;
      v35 = a8 + a2 * 8.0 + a4 * v21 + a6 * v22;
      v36 = v35 * 0.037037037;
      v76 = a3 * v19;
      v37 = (a9 + a3 * 8.0 + a5 * v21 + a7 * v22) * 0.037037037;
      v72 = v33;
      v73 = v32;
      v38 = v32 * 0.333333333;
      v39 = v33 * 0.5;
      if (fabs(-(v33 * 0.5 * (v37 * v37 - a3 * a3)+ v32 * 0.333333333 * (v37 * v37 * v37 - a3 * a3 * a3)+ (a2 - (v33 + v32 * a3) * a3) * (v37 - a3)+ ((v35 * 0.037037037 - (a2 + a2 + v34 * -0.111111111)) * (a5 + a3 + a3)+ (a3 * v19 + a5 * v19 + a7) * 0.333333333 * (v35 * 0.0740740741 - (a2 + (a4 + a2 + a2) * 0.333333333))+ (v35 * 0.037037037 + a2 * 10.0 + (a4 + a2 + a2) * v23 + v34 * 0.333333333) * a3+ (-(a4 + a2 + a2 + a2 + v34 * 0.666666667) - v35 * 0.37037037) * v37)* 0.05)/ sqrt((v36 - a2) * (v36 - a2) + (v37 - a3) * (v37 - a3))) <= v27)
      {
        v40 = a2 - (v33 + v32 * a3) * a3;
        v41 = a4 + v75 + a6 * 4.0;
        v42 = a2 + a8 * 8.0 + a4 * 6.0 + a6 * v21;
        v43 = v42 * 0.037037037;
        v44 = v79 - v42 * 0.037037037 + v41 * -0.111111111;
        v45 = v42 * 0.0740740741;
        v46 = v42 * 0.37037037;
        v47 = (a3 + v69 + a5 * 6.0 + a7 * v21) * 0.037037037;
        v71 = v44 * (a7 + v68)
            + (a6 + v24 + a8 + v41 * 0.666666667 + v46) * v47
            + (a5 + v70 + a7 * 4.0) * -0.333333333 * (v45 - (a8 - (a6 + v24) * -0.333333333));
        v48 = a2 + a2 + v75 + a4 * 9.0 + a6 * v21;
        v49 = v77 + v79 + a4 * v21 + a6 * 9.0;
        v50 = v47 * v47 * v47;
        v30 = fabs(-(v39 * (v47 * v47 - v37 * v37)+ v38 * (v50 - v37 * v37 * v37)+ v40 * (v47 - v37)+ ((-(v46 + v48 * 0.222222222 + v49 * 0.111111111) - v36) * v47+ (v35 * 0.37037037 + v49 * 0.222222222 + v48 * 0.111111111 + v43) * v37+ ((v43 + v48 * 0.037037037 - v35 * 0.0740740741) * (v76 + v68 + a5 * v21 + a7 * 9.0)+ (v45 - (v36 + v49 * 0.037037037)) * (a3 + a3 + v70 + a5 * 9.0 + a7 * v21))* 0.111111111)* 0.05)/ sqrt((v43 - v36) * (v43 - v36) + (v47 - v37) * (v47 - v37))) <= v27;
        v51 = fabs(-(v39 * (a9 * a9 - v47 * v47)+ v38 * (v67 - v50)+ v40 * (a9 - v47)+ (v71 + (-(a8 * 10.0 + (a6 + v24) * 2.0 - v41 * -0.333333333) - v43) * a9) * 0.05)/ sqrt((a8 - v43) * (a8 - v43) + (a9 - v47) * (a9 - v47)));
        if (v30 && v51 <= v27)
          break;
      }
      v53 = (v28 + a2 + a6) * 0.25;
      v16 = (a2 + a8 + (a6 + a4) * 3.0) * 0.125;
      a4 = (v29 + a4 + a8) * 0.25;
      a6 = (a6 + a8) * 0.5;
      v54 = (a5 + a3) * 0.5;
      v55 = (a5 + a5 + a3 + a7) * 0.25;
      v17 = (a3 + a9 + (a7 + a5) * 3.0) * 0.125;
      a5 = (a5 + a9 + a7 + a7) * 0.25;
      a7 = (a7 + a9) * 0.5;
      this = CA::ScanConverter::Path::add_monotonic_cube((CA::ScanConverter::Path *)v15, a2, a3, v78 * 0.5, v54, v53, v55, v16, v17, v20 - 2);
      v21 = 12.0;
      v18 = a9 * a9;
      v24 = a8 + a8;
      --v20;
      a3 = v17;
      a2 = v16;
      v19 = 4.0;
      v22 = 6.0;
      v23 = 2.0;
      if (v20 < 3)
        goto LABEL_3;
    }
    v57 = v40;
    v58 = a8;
    if (a2 >= a8)
      v59 = a8;
    else
      v59 = a2;
    if (a2 > a8)
      v58 = a2;
    if (v73 == 0.0)
    {
      v63 = v74;
      v60 = v72;
    }
    else
    {
      v60 = v72;
      v61 = v72 * -0.5 / v73;
      v62 = v61 > a3 && v61 < a9;
      v63 = v74;
      if (v62 || (v61 > a9 ? (v64 = v61 < a3) : (v64 = 0), v64))
      {
        v65 = v57 + v39 * v61;
        if (v59 >= v65)
          v59 = v65;
        if (v58 <= v65)
          v58 = v65;
      }
    }
    if (a3 <= a9)
      v66 = 1.0;
    else
      v66 = -1.0;
    return CA::ScanConverter::Path::add_curve(v15, v59, v63, v58, v26, v73, v60, v57, v66);
  }
  else
  {
    v16 = a2;
    v17 = a3;
LABEL_3:
    if (!*(_BYTE *)(v15 + 90))
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v56 = x_log_category_utilities;
        if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134219776;
          v82 = v16;
          v83 = 2048;
          v84 = v17;
          v85 = 2048;
          v86 = a4;
          v87 = 2048;
          v88 = a5;
          v89 = 2048;
          v90 = a6;
          v91 = 2048;
          v92 = a7;
          v93 = 2048;
          v94 = a8;
          v95 = 2048;
          v96 = a9;
          _os_log_impl(&dword_184457000, v56, OS_LOG_TYPE_ERROR, "CoreAnimation: failed to add monotonic cube ((%g, %g) (%g, %g) (%g, %g) (%g, %g))\n", buf, 0x52u);
        }
      }
      *(_BYTE *)(v15 + 90) = 1;
    }
    return CA::ScanConverter::Path::add_line(v15, v16, v17, a8, a9);
  }
}

uint64_t CA::ScanConverter::Path::lineto(uint64_t this, double a2, double a3, double a4)
{
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;

  v7 = this;
  v8 = *(double *)(this + 64);
  if (v8 != a2 || *(double *)(this + 72) != a3 || *(double *)(this + 80) != a4)
  {
    v9 = *(double *)(this + 80);
    v10 = v9 + -0.0001;
    if (a4 + -0.0001 < 0.0 || v10 < 0.0)
    {
      if (a4 + -0.0001 < 0.0 && v10 < 0.0)
        goto LABEL_14;
      v15 = v10 / (v9 - a4);
      v16 = v8 + v15 * (a2 - v8);
      v17 = *(double *)(this + 72);
      v18 = v17 + (a3 - v17) * v15;
      v19 = v9 + v15 * (a4 - v9);
      v20 = v18 / v19;
      if (v10 >= 0.0)
      {
        v22 = v16 / v19;
        this = CA::ScanConverter::Path::add_line(this, v8 / v9, v17 / v9, v16 / v19, v18 / v19);
        *(double *)(v7 + 96) = v22;
        *(double *)(v7 + 104) = v20;
        *(_BYTE *)(v7 + 88) = 1;
        goto LABEL_14;
      }
      if (*(_BYTE *)(this + 88))
      {
        v21 = v16 / v19;
        CA::ScanConverter::Path::add_line(this, *(double *)(this + 96), *(double *)(this + 104), v16 / v19, v18 / v19);
        *(_BYTE *)(v7 + 88) = 0;
      }
      else
      {
        *(_BYTE *)(this + 89) = 1;
        v21 = v16 / v19;
        *(double *)(this + 112) = v16 / v19;
        *(double *)(this + 120) = v20;
      }
      v13 = a2 / a4;
      v14 = a3 / a4;
      this = v7;
      v11 = v21;
      v12 = v20;
    }
    else
    {
      v11 = v8 / v9;
      v12 = *(double *)(this + 72) / v9;
      v13 = a2 / a4;
      v14 = a3 / a4;
    }
    this = CA::ScanConverter::Path::add_line(this, v11, v12, v13, v14);
LABEL_14:
    *(double *)(v7 + 64) = a2;
    *(double *)(v7 + 72) = a3;
    *(double *)(v7 + 80) = a4;
  }
  return this;
}

uint64_t CA::ScanConverter::Path::add_curve(uint64_t this, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  float v9;
  float v10;
  uint64_t v13;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  float *v22;
  float v23;
  float v24;
  float v25;
  BOOL v26;
  float v27;
  float v28;
  double v29;
  double v30;

  v9 = a3;
  v10 = a5;
  if (v10 <= v9)
    return this;
  v13 = this;
  if (*(double *)(this + 184) < a3 || *(double *)(this + 168) > a5)
    return this;
  this = *(_QWORD *)(this + 16);
  if (this)
  {
    v18 = *(_QWORD *)(this + 16);
    if (v18)
    {
      v19 = *(_QWORD *)(this + 8);
      v20 = v18 - 1;
LABEL_15:
      v22 = (float *)(this + 24 * v19 + 24);
      *(_QWORD *)(this + 8) = v19 + 1;
      *(_QWORD *)(this + 16) = v20;
      ++*(_QWORD *)(v13 + 24);
      goto LABEL_16;
    }
  }
  this = *(_QWORD *)v13;
  if (*(_QWORD *)v13)
  {
    v29 = a8;
    v30 = a9;
    this = x_heap_malloc_small_((uint64_t *)this, 0x400uLL);
    if (this)
    {
      *(_QWORD *)this = 0;
      *(_QWORD *)(this + 8) = 0;
      *(_QWORD *)(this + 16) = 41;
      v21 = *(_QWORD **)(v13 + 16);
      v19 = 0;
      if (v21)
        *v21 = this;
      else
        *(_QWORD *)(v13 + 8) = this;
      *(_QWORD *)(v13 + 16) = this;
      v20 = 40;
      a8 = v29;
      a9 = v30;
      goto LABEL_15;
    }
    *(_QWORD *)v13 = 0;
    v22 = (float *)&CA::ScanConverter::CurveAccumulator::append(void)::fail;
    a8 = v29;
    a9 = v30;
  }
  else
  {
    v22 = (float *)&CA::ScanConverter::CurveAccumulator::append(void)::fail;
  }
LABEL_16:
  v23 = a2;
  v24 = a4;
  *v22 = v9;
  v22[1] = v10;
  v25 = 0.0;
  v26 = v23 == v24;
  v27 = 0.0;
  if (!v26)
  {
    v25 = a6;
    v27 = a7 + a6 * a3 * 2.0;
    v23 = a8 + (a6 * a3 + a7) * a3;
  }
  v22[2] = v25;
  v22[3] = v27;
  v28 = a9;
  v22[4] = v23;
  v22[5] = v28;
  if (*(double *)(v13 + 128) > a2)
    *(double *)(v13 + 128) = a2;
  if (*(double *)(v13 + 136) > a3)
    *(double *)(v13 + 136) = a3;
  if (*(double *)(v13 + 144) < a4)
    *(double *)(v13 + 144) = a4;
  if (*(double *)(v13 + 152) < a5)
    *(double *)(v13 + 152) = a5;
  return this;
}

uint64_t CA::ScanConverter::Path::add_line(uint64_t this, double a2, double a3, double a4, double a5)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;

  if (a2 != a4 || a3 != a5)
  {
    v6 = a2;
    if (vabdd_f64(a5, a3) >= 0.000001)
      v7 = a5;
    else
      v7 = a3;
    if (a2 >= a4)
      a2 = a4;
    if (v6 <= a4)
      v8 = a4;
    else
      v8 = v6;
    if (v7 <= a3)
      v9 = v7;
    else
      v9 = a3;
    if (v7 >= a3)
      v10 = v7;
    else
      v10 = a3;
    if (v7 == a3)
      v11 = 0.0;
    else
      v11 = (a4 - v6) / (v7 - a3);
    v12 = a4 - v11 * v7;
    if (v7 >= a3)
      v13 = 1.0;
    else
      v13 = -1.0;
    return CA::ScanConverter::Path::add_curve(this, a2, v9, v8, v10, 0.0, v11, v12, v13);
  }
  return this;
}

uint64_t CA::ScanConverter::Path::add_cube(uint64_t this, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;

  v11 = this;
  if (vabdd_f64(a5, a7) + vabdd_f64(a4, a6) >= 0.0001)
    goto LABEL_5;
  v12 = vabdd_f64(a3, a5) + vabdd_f64(a2, a4);
  v13 = vabdd_f64(a7, a9) + vabdd_f64(a6, a8);
  if (v13 + v12 < 0.0002)
    return this;
  if (v12 < 0.0001 || v13 < 0.0001)
    return CA::ScanConverter::Path::add_line(this, a2, a3, a8, a9);
LABEL_5:
  v14 = a5 - a7;
  v15 = (a5 - a7) * a5 + (a7 - a3) * a7 + (a3 - a5) * a9;
  if (v15 >= 0.0)
  {
    v16 = a9 - a3 + v14 * 3.0;
    v17 = a3 + a5 * -2.0 + a7;
    if (v16 == 0.0)
    {
      if (v17 == 0.0)
      {
        v18 = 0.0;
        v19 = 0.0;
      }
      else
      {
        v18 = 2.0;
        v19 = (a3 - a5) * 0.5 / v17;
      }
    }
    else if (v17 != 0.0 || (v18 = 0.0, v19 = 0.0, v15 != 0.0))
    {
      v20 = sqrt(v15);
      if (v17 < 0.0)
        v20 = -v20;
      v21 = v20 + v17;
      v22 = -v21 / v16;
      v18 = (a3 - a5) / v21;
      if (v22 >= v18)
        v19 = (a3 - a5) / v21;
      else
        v19 = v22;
      if (v22 > v18)
        v18 = v22;
    }
    v23 = 2.0;
    if (v19 < 1.0e-10)
    {
      v24 = v18;
    }
    else
    {
      v23 = v18;
      v24 = v19;
    }
    if (v24 >= 1.0e-10 && v24 <= 1.0)
    {
      if (1.0 - v23 >= 1.0e-10)
      {
        v32 = 1.0 - v24;
        v33 = (v23 - v24) / (1.0 - v24);
        v34 = a9 - a7;
        v35 = a2 + a4 * -2.0 + a6;
        v36 = a2 + ((a4 - a2) * 3.0 + (v35 * 3.0 + v24 * (a8 - (a2 + (a4 - a6) * -3.0))) * v24) * v24;
        v37 = a3 + ((a5 - a3) * 3.0 + (v17 * 3.0 + v24 * (a9 - (a3 + v14 * -3.0))) * v24) * v24;
        v38 = a8 - a6 + a8 - a6;
        v58 = -((v38 + v32 * (-(a4 + a6 * -2.0) - a8)) * v32);
        v39 = -((v34 + v34 + v32 * (-(a5 + a7 * -2.0) - a9)) * v32);
        v56 = a9 - (v34 + v34 + v32 * (-(a5 + a7 * -2.0) - a9)) * v32;
        v57 = a8 - (v38 + v32 * (-(a4 + a6 * -2.0) - a8)) * v32;
        v40 = (1.0 - v24) * (a8 - a6);
        v41 = (1.0 - v24) * (a9 - a7);
        CA::ScanConverter::Path::add_monotonic_cube(this, a2, a3, a2 + v24 * (a4 - a2), a3 + v24 * (a5 - a3), a2 + (a4 - a2 + a4 - a2 + v24 * v35) * v24, a3 + (a5 - a3 + a5 - a3 + v24 * v17) * v24, v36, v37, 128);
        v42 = v36 + (v57 - v36) * v33;
        v43 = v37 + (v56 - v37) * v33;
        v44 = v36 + v57 * -2.0 + a8 - v40;
        v45 = v36 + (v57 - v36 + v57 - v36 + v44 * v33) * v33;
        v46 = v37 + v56 * -2.0 + a9 - v41;
        v47 = v37 + (v56 - v37 + v56 - v37 + v46 * v33) * v33;
        v48 = v36 + ((v57 - v36) * 3.0 + ((a8 - v36 + (v58 + v40) * 3.0) * v33 + v44 * 3.0) * v33) * v33;
        v49 = v37 + ((v56 - v37) * 3.0 + ((a9 - v37 + (v39 + v41) * 3.0) * v33 + v46 * 3.0) * v33) * v33;
        v50 = 1.0 - v33;
        v59 = a8 - (v40 + v40 + (-(a8 + (a8 - v40) * -2.0) - v57) * (1.0 - v33)) * (1.0 - v33);
        v51 = a9 - (v41 + v41 + (-(a9 + (a9 - v41) * -2.0) - v56) * (1.0 - v33)) * (1.0 - v33);
        v52 = a8 - v50 * v40;
        v53 = a9 - v50 * v41;
        v54 = v36;
        v55 = v48;
        CA::ScanConverter::Path::add_monotonic_cube(v11, v54, v37, v42, v43, v45, v47, v48, v49, 128);
        a2 = v55;
        this = v11;
        a3 = v49;
        a4 = v59;
        a5 = v51;
        a6 = v52;
        a7 = v53;
      }
      else
      {
        v25 = a2 + a4 * -2.0 + a6;
        v26 = a2 + ((a4 - a2) * 3.0 + (v25 * 3.0 + v24 * (a8 - (a2 + (a4 - a6) * -3.0))) * v24) * v24;
        v27 = a3 + ((a5 - a3) * 3.0 + (v17 * 3.0 + v24 * (a9 - (a3 + v14 * -3.0))) * v24) * v24;
        v28 = a8 - (a8 - a6 + a8 - a6 + (1.0 - v24) * (-(a4 + a6 * -2.0) - a8)) * (1.0 - v24);
        v29 = a9 - (a9 - a7 + a9 - a7 + (1.0 - v24) * (-(a5 + a7 * -2.0) - a9)) * (1.0 - v24);
        v30 = a8 - (1.0 - v24) * (a8 - a6);
        v31 = a9 - (1.0 - v24) * (a9 - a7);
        CA::ScanConverter::Path::add_monotonic_cube(this, a2, a3, a2 + v24 * (a4 - a2), a3 + v24 * (a5 - a3), a2 + (a4 - a2 + a4 - a2 + v24 * v25) * v24, a3 + (a5 - a3 + a5 - a3 + v24 * v17) * v24, v26, v27, 128);
        a2 = v26;
        this = v11;
        a3 = v27;
        a4 = v28;
        a5 = v29;
        a6 = v30;
        a7 = v31;
      }
    }
  }
  return CA::ScanConverter::Path::add_monotonic_cube(this, a2, a3, a4, a5, a6, a7, a8, a9, 128);
}

uint64_t CA::ScanConverter::Path::cubeto(CA::ScanConverter::Path *this, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, double a17)
{
  double v25;
  double v26;
  double v27;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  float64_t v56;
  double v57;
  float64_t v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  float64_t v73;
  float64_t v74;
  double v75;
  double v76;
  double v77;
  double v78;
  float64_t v79;
  float64_t v80;
  double v81;
  double v82;
  float64_t v83;
  double v84;
  double v85;
  double v86;
  double v87;
  float64_t v88;
  double v89;
  double v90;
  double v91;
  double v92;
  float64_t v93;
  float64_t v94;
  double v95;
  float64_t v96;
  float64_t v97;
  double v98;
  double v99;
  float64_t v100;
  float64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  float64_t v131;
  float64_t v132;
  double v133;
  float64_t v134;
  double v135;
  double v136;
  float64_t v137;
  float64_t v138;
  float64_t v139;
  float64_t v140;
  double v141;

  v25 = *((double *)this + 8);
  v26 = *((double *)this + 9);
  v27 = *((double *)this + 10);
  *((double *)this + 8) = a8;
  *((double *)this + 9) = a9;
  *((double *)this + 10) = a17;
  if (a17 == 1.0 && a7 == 1.0 && a4 == 1.0 && v27 == 1.0)
    return CA::ScanConverter::Path::add_cube((uint64_t)this, v25, v26, a2, a3, a5, a6, a8, a9);
  v32 = (a4 - a7) * a4 + (a7 - v27) * a7 + (v27 - a4) * a17;
  if (v32 < 0.0)
    goto LABEL_14;
  v33 = a17 - v27 + (a4 - a7) * 3.0;
  v34 = a4 + a4;
  v35 = a7 - (a4 + a4) + v27;
  if (v33 == 0.0)
  {
    if (v35 == 0.0)
    {
      v36 = 0.0;
      v37 = 0.0;
    }
    else
    {
      v36 = 2.0;
      v37 = (v27 - a4) * 0.5 / v35;
    }
  }
  else if (v35 != 0.0 || (v36 = 0.0, v37 = 0.0, v32 != 0.0))
  {
    v38 = sqrt(v32);
    if (v35 < 0.0)
      v38 = -v38;
    v39 = v38 + v35;
    v40 = -v39 / v33;
    v41 = (v26 - a3) / v39;
    if (v40 >= v41)
      v37 = v41;
    else
      v37 = v40;
    if (v40 <= v41)
      v36 = v41;
    else
      v36 = v40;
  }
  v42 = 2.0;
  if (v37 < 1.0e-10)
    v37 = v36;
  else
    v42 = v36;
  if (v37 < 1.0e-10 || v37 > 1.0)
  {
LABEL_14:
    v116.f64[1] = a9;
    v116.f64[0] = a8;
    return CA::ScanConverter::Path::add_cube_clip((uint64_t)this, v25, v26, v27, a2, a3, a4, a5, a6, a10, a11, a12, a13, a14, a15, a16, a7, v116, a17);
  }
  else if (1.0 - v42 >= 1.0e-10)
  {
    v67 = 1.0 - v37;
    v68 = (v42 - v37) / (1.0 - v37);
    v69 = a9 - a6;
    v70 = v25 + a2 * -2.0 + a5;
    v71 = v26 + a3 * -2.0 + a6;
    v72 = (a3 - v26) * 3.0 + (v71 * 3.0 + v37 * (a9 + (a6 - a3) * -3.0 - v26)) * v37;
    v73 = v25 + v37 * (a2 - v25);
    v74 = v26 + v37 * (a3 - v26);
    v75 = v27 - v34 + a7;
    v76 = a4 - v27 + a4 - v27 + v37 * v75;
    v77 = v75 * 3.0 + v37 * (a17 + (a7 - a4) * -3.0 - v27);
    v78 = v27 + v37 * (a4 - v27);
    v79 = v25 + (a2 - v25 + a2 - v25 + v37 * v70) * v37;
    v80 = v26 + (a3 - v26 + a3 - v26 + v37 * v71) * v37;
    v81 = v27 + v76 * v37;
    v82 = v25 + ((a2 - v25) * 3.0 + (v70 * 3.0 + v37 * (a8 + (a5 - a2) * -3.0 - v25)) * v37) * v37;
    v83 = v26 + v72 * v37;
    v84 = v27 + ((a4 - v27) * 3.0 + v77 * v37) * v37;
    v85 = a8 - a5 + a8 - a5;
    v136 = -((v85 + v67 * (-(a2 + a5 * -2.0) - a8)) * v67);
    v130 = -((v69 + v69 + v67 * (-(a3 + a6 * -2.0) - a9)) * v67);
    v133 = a8 - (v85 + v67 * (-(a2 + a5 * -2.0) - a8)) * v67;
    v86 = a17 - a7 + a17 - a7;
    v126 = -((v86 + v67 * (-(a4 + a7 * -2.0) - a17)) * v67);
    v128 = a9 - (v69 + v69 + v67 * (-(a3 + a6 * -2.0) - a9)) * v67;
    v125 = a17 - (v86 + v67 * (-(a4 + a7 * -2.0) - a17)) * v67;
    v124 = v67 * (a8 - a5);
    v123 = v67 * (a9 - a6);
    v122 = v67 * (a17 - a7);
    v119.f64[1] = v83;
    v119.f64[0] = v82;
    CA::ScanConverter::Path::add_cube_clip((uint64_t)this, v25, v26, v27, v73, v74, v78, v79, v80, a10, a11, a12, a13, a14, a15, a16, v81, v119, v84);
    v87 = v82 + v133 * -2.0 + a8 - v124;
    v88 = v83 + v128 * -2.0 + a9 - v123;
    v89 = (v133 - v82) * 3.0 + ((a8 - v82 + (v136 + v124) * 3.0) * v68 + v87 * 3.0) * v68;
    v90 = v84 + v125 * -2.0 + a17 - v122;
    v91 = v125 - v84 + v125 - v84 + v90 * v68;
    v92 = (v125 - v84) * 3.0 + ((a17 - v84 + (v126 + v122) * 3.0) * v68 + v90 * 3.0) * v68;
    v93 = v82 + (v133 - v82) * v68;
    v94 = v83 + (v128 - v83) * v68;
    v95 = v84 + (v125 - v84) * v68;
    v96 = v82 + (v133 - v82 + v133 - v82 + v87 * v68) * v68;
    v97 = v83 + (v128 - v83 + v128 - v83 + v88 * v68) * v68;
    v98 = v84 + v91 * v68;
    v99 = v82 + v89 * v68;
    v100 = v83 + ((v128 - v83) * 3.0 + ((a9 - v83 + (v130 + v123) * 3.0) * v68 + v88 * 3.0) * v68) * v68;
    v127 = v84 + v92 * v68;
    v131 = a8 - (v124 + v124 + (-(a8 + (a8 - v124) * -2.0) - v133) * (1.0 - v68)) * (1.0 - v68);
    v134 = a9 - (v123 + v123 + (-(a9 + (a9 - v123) * -2.0) - v128) * (1.0 - v68)) * (1.0 - v68);
    v141 = a17 - (v122 + v122 + (-(a17 + (a17 - v122) * -2.0) - v125) * (1.0 - v68)) * (1.0 - v68);
    v139 = a8 - (1.0 - v68) * v124;
    v137 = a9 - (1.0 - v68) * v123;
    v129 = a17 - (1.0 - v68) * v122;
    v120.f64[1] = v100;
    v101 = v100;
    v120.f64[0] = v99;
    CA::ScanConverter::Path::add_cube_clip((uint64_t)this, v82, v83, v84, v93, v94, v95, v96, v97, v102, v103, v104, v105, v106, v107, v108, v98, v120, v127);
    v121.f64[1] = a9;
    v121.f64[0] = a8;
    return CA::ScanConverter::Path::add_cube_clip((uint64_t)this, v99, v101, v127, v131, v134, v141, v139, v137, v109, v110, v111, v112, v113, v114, v115, v129, v121, a17);
  }
  else
  {
    v43 = a2 - v25;
    v44 = a3 - v26;
    v45 = v25 + a2 * -2.0 + a5;
    v46 = v43 + v43 + v37 * v45;
    v47 = (a2 - v25) * 3.0 + (v45 * 3.0 + v37 * (a8 + (a5 - a2) * -3.0 - v25)) * v37;
    v48 = v26 + a3 * -2.0 + a6;
    v49 = (a3 - v26) * 3.0 + (v48 * 3.0 + v37 * (a9 + (a6 - a3) * -3.0 - v26)) * v37;
    v50 = v27 - v34 + a7;
    v51 = -(a2 + a5 * -2.0);
    v52 = -(a3 + a6 * -2.0);
    v53 = a8 - a5;
    v54 = a9 - a6;
    v55 = v25 + v47 * v37;
    v56 = v26 + v49 * v37;
    v57 = v27 + ((a4 - v27) * 3.0 + (v50 * 3.0 + v37 * (a17 + (a7 - a4) * -3.0 - v27)) * v37) * v37;
    v58 = a8 - (v53 + v53 + (1.0 - v37) * (v51 - a8)) * (1.0 - v37);
    v132 = a9 - (v54 + v54 + (1.0 - v37) * (v52 - a9)) * (1.0 - v37);
    v135 = a17 - (a17 - a7 + a17 - a7 + (1.0 - v37) * (-(a4 + a7 * -2.0) - a17)) * (1.0 - v37);
    v138 = a8 - (1.0 - v37) * v53;
    v140 = a9 - (1.0 - v37) * v54;
    v59 = a17 - (1.0 - v37) * (a17 - a7);
    v117.f64[1] = v56;
    v117.f64[0] = v55;
    CA::ScanConverter::Path::add_cube_clip((uint64_t)this, v25, v26, v27, v25 + v37 * v43, v26 + v37 * v44, v27 + v37 * (a4 - v27), v25 + v46 * v37, v26 + (v44 + v44 + v37 * v48) * v37, a10, a11, a12, a13, a14, a15, a16, v27 + (a4 - v27 + a4 - v27 + v37 * v50) * v37, v117, v57);
    v118.f64[1] = a9;
    v118.f64[0] = a8;
    return CA::ScanConverter::Path::add_cube_clip((uint64_t)this, v55, v56, v57, v58, v132, v135, v138, v140, v60, v61, v62, v63, v64, v65, v66, v59, v118, a17);
  }
}

double *CA::ScanConverter::Path::closepath(double *this)
{
  double *v1;
  double v2;
  double v3;
  double v4;

  v1 = this;
  v2 = this[5];
  if (this[8] != v2)
  {
    v3 = this[6];
LABEL_5:
    v4 = this[7];
    if (v4 == 1.0)
      this = CA::ScanConverter::Path::lineto(this, v2, v3);
    else
      this = (double *)CA::ScanConverter::Path::lineto((uint64_t)this, v2, v3, v4);
    goto LABEL_8;
  }
  v3 = this[6];
  if (this[9] != v3 || this[10] != this[7])
    goto LABEL_5;
LABEL_8:
  if (*((_BYTE *)v1 + 89) && *((_BYTE *)v1 + 88))
    this = (double *)CA::ScanConverter::Path::add_line((uint64_t)v1, v1[12], v1[13], v1[14], v1[15]);
  *((_WORD *)v1 + 44) = 0;
  return this;
}

float32x2_t CA::OGL::`anonymous namespace'::BackdropRectState::map(uint64_t a1, uint64_t a2, float32x2_t *a3, uint64_t a4)
{
  float32x2_t *v4;
  float32x2_t *v5;
  const float *v6;
  float32x2_t result;
  float32x2_t v8;

  if (a4)
  {
    v4 = *(float32x2_t **)(a1 + 48);
    v5 = a3 + 2;
    do
    {
      v6 = (const float *)v5;
      result = vld1_dup_f32(v6++);
      v8 = vmla_f32(*v4, result, vsub_f32(v4[1], *v4));
      *v5 = vmla_n_f32(v8, vmla_f32(vsub_f32(v4[3], v8), result, vsub_f32(v4[2], v4[3])), *v6);
      v5 += 6;
      --a4;
    }
    while (a4);
  }
  return result;
}

uint64_t CA::ScanConverter::Path::quadto(CA::ScanConverter::Path *this, double a2, double a3, double a4, double a5, double a6, double a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return CA::ScanConverter::Path::cubeto(this, (*((double *)this + 8) + a2 + a2) * 0.333333333, (*((double *)this + 9) + a3 + a3) * 0.333333333, (*((double *)this + 10) + a4 + a4) * 0.333333333, (a2 + a2 + a5) * 0.333333333, (a3 + a3 + a6) * 0.333333333, (a4 + a4 + a7) * 0.333333333, a5, a6, a8, a9, a10, a11, a12, a13, a14, a7);
}

float CA::OGL::`anonymous namespace'::GradientRectState::map_(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float *v12;
  float v13;
  float v14;
  float *v15;
  double v16;
  double v17;
  double v18;
  float v19;
  double v20;
  float v21;
  float v22;
  float v23;
  float *v24;
  float v25;
  float v26;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_DWORD *)(v5 + 104);
  if (v6 == 115)
  {
    v17 = *(double *)(v5 + 72);
    v16 = *(double *)(v5 + 80);
    a2 = *(double *)(v5 + 88) - v17;
    v18 = *(double *)(v5 + 96) - v16;
    v19 = sqrt(a2 * a2 + v18 * v18);
    v20 = 0.0;
    if (v19 != 0.0)
      v20 = (float)(-1.0 / v19);
    if (a5)
    {
      *(float *)&a2 = v20 * a2;
      v21 = v20 * v18;
      v22 = v17 * 2.0 + -1.0;
      v23 = v16 * 2.0 + -1.0;
      v24 = (float *)(a4 + 20);
      do
      {
        v25 = *(v24 - 1) - v22;
        v26 = *v24 + v23;
        *(v24 - 1) = -(float)((float)(v26 * v21) - (float)(v25 * *(float *)&a2));
        *v24 = (float)(v25 * v21) + (float)(v26 * *(float *)&a2);
        v24 += 12;
        --a5;
      }
      while (a5);
    }
  }
  else if (v6 == 49)
  {
    *(float *)&a2 = *(double *)(v5 + 72);
    v7 = *(double *)(v5 + 80);
    v8 = *(double *)(v5 + 88) - *(float *)&a2;
    v9 = *(double *)(v5 + 96) - v7;
    v10 = (float)(v8 * v8) + (float)(v9 * v9);
    v11 = 1.0 / v10;
    if (v10 == 0.0)
      v11 = (float)(v8 * v8) + (float)(v9 * v9);
    if (a5)
    {
      v12 = *(float **)(a1 + 56);
      v13 = *v12;
      v14 = v11 * (float)(v12[2] - *v12);
      v15 = (float *)(a4 + 20);
      do
      {
        *(v15 - 1) = v13
                   + (float)(v14
                           * (float)((float)((float)(*(v15 - 1) - *(float *)&a2) * v8) + (float)((float)(*v15 - v7) * v9)));
        *v15 = v12[1];
        v15 += 12;
        --a5;
      }
      while (a5);
    }
  }
  return *(float *)&a2;
}

double *CA::ScanConverter::Path::lineto(double *this, double a2, double a3)
{
  double v5;
  double v6;

  if (this[10] != 1.0)
    return (double *)CA::ScanConverter::Path::lineto((uint64_t)this, a2, a3, 1.0);
  v5 = this[8];
  v6 = this[9];
  if (v5 != a2 || v6 != a3)
  {
    this[8] = a2;
    this[9] = a3;
    return (double *)CA::ScanConverter::Path::add_line((uint64_t)this, v5, v6, a2, a3);
  }
  return this;
}

uint64_t CA::ScanConverter::Path::add_cube_clip(uint64_t this, double a2, float64_t a3, double a4, float64_t a5, float64_t a6, double a7, float64_t a8, float64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, double a17, float64x2_t a18, double a19)
{
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  int v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  int v43;
  double v44;
  double v45;
  double v47;
  double v48;
  double v49;
  double v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v54;
  float64x2_t v55;
  double v61;
  float64x2_t v62;
  float64x2_t v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v76;
  char v78;
  double v79;
  double v80;
  char v81;
  double v82;
  uint64_t v83;
  float64_t v84;
  float64x2_t v85;

  v19 = this;
  v20 = a4 + -0.0001;
  v21 = a19 + -0.0001;
  if (a4 + -0.0001 >= 0.0 && v21 >= 0.0)
  {
    v22 = 1.0 / a4;
    v23 = 1.0 / a7;
    v24 = v22 * a2;
    v25 = v22 * a3;
    v26 = v23 * a5;
    v27 = v23 * a6;
    v28 = 1.0 / a17 * a8;
    v29 = 1.0 / a17 * a9;
    v30 = 1.0 / a19 * a18.f64[0];
    v31 = 1.0 / a19 * a18.f64[1];
    return CA::ScanConverter::Path::add_cube(v19, v24, v25, v26, v27, v28, v29, v30, v31);
  }
  if (v20 >= 0.0 || v21 >= 0.0)
  {
    v32 = 0;
    v33 = a7 - a4;
    v34 = (a7 - a4) * 3.0;
    v35 = (a17 - a7) * 3.0;
    v36 = v35 - v34;
    v37 = a19 - (v35 + a4);
    v38 = v37 * 3.0;
    v39 = a4 + -0.0001;
    v40 = v34;
    v41 = v36;
    while (2)
    {
      _D19 = 0.5;
      v43 = 8;
      do
      {
        v44 = v39 + (v40 + (v41 + _D19 * v37) * _D19) * _D19;
        if (fabs(v44) < 0.000001)
          break;
        v45 = v40 + (v41 + v41 + _D19 * v38) * _D19;
        if (fabs(v45) < 0.000001)
        {
          v48 = 0.0;
          v49 = 1.0;
          _D19 = 0.5;
          do
          {
            v50 = v20 + (v34 + (v36 + _D19 * v37) * _D19) * _D19;
            if (fabs(v50) < 0.000001)
              break;
            if (v50 <= 0.0)
              v49 = _D19;
            else
              v48 = _D19;
            _D19 = v48 + (v49 - v48) * 0.5;
          }
          while (v48 < v49);
          goto LABEL_24;
        }
        _D19 = _D19 - v44 / v45;
        --v43;
      }
      while (v43);
      if (_D19 >= 0.0 && _D19 <= 1.0)
      {
        if (!v32)
          goto LABEL_24;
      }
      else
      {
        v47 = v41 + _D19 * v37;
        v39 = v40 + v47 * _D19 - (v39 + (v40 + v47 * _D19) * _D19);
        ++v32;
        v40 = v47;
        v41 = v37;
        if (v32 != 4)
          continue;
      }
      break;
    }
    v78 = 1;
    do
    {
      v79 = v20 + (v34 + (v36 + _D19 * v37) * _D19) * _D19;
      if (fabs(v79) < 0.000001)
        break;
      v80 = v34 + (v36 + v36 + _D19 * v38) * _D19;
      if (fabs(v80) < 0.000001)
        break;
      v81 = v78;
      v78 = 0;
      _D19 = _D19 - v79 / v80;
    }
    while ((v81 & 1) != 0);
LABEL_24:
    v51.f64[0] = a5;
    v51.f64[1] = a6;
    v52.f64[0] = a2;
    v52.f64[1] = a3;
    _Q22 = vsubq_f64(v51, v52);
    v54.f64[0] = a8;
    v54.f64[1] = a9;
    v55 = vsubq_f64(v51, v54);
    __asm { FMOV            V28.2D, #-2.0 }
    v61 = a4 + a7 * -2.0 + a17;
    v62 = vaddq_f64(vmlaq_f64(v52, _Q28, v51), v54);
    __asm
    {
      FMOV            V26.2D, #3.0
      FMOV            V29.2D, #-3.0
    }
    v65 = vmlaq_n_f64(v52, vmlaq_n_f64(vmulq_f64(_Q22, _Q26), vmlaq_n_f64(vmulq_f64(v62, _Q26), vsubq_f64(a18, vmlaq_f64(v52, _Q29, v55)), _D19), _D19), _D19);
    v66 = a4 + (v34 + (v61 * 3.0 + _D19 * v37) * _D19) * _D19;
    if (v20 < 0.0)
    {
      v67 = a18.f64[0]
          - (a18.f64[0] - a8 + a18.f64[0] - a8 + (1.0 - _D19) * (-(a5 + a8 * -2.0) - a18.f64[0])) * (1.0 - _D19);
      v68 = a18.f64[1]
          - (a18.f64[1] - a9 + a18.f64[1] - a9 + (1.0 - _D19) * (-(a6 + a9 * -2.0) - a18.f64[1])) * (1.0 - _D19);
      v69 = a19 - (a19 - a17 + a19 - a17 + (1.0 - _D19) * (-(a7 + a17 * -2.0) - a19)) * (1.0 - _D19);
      v70 = a18.f64[0] - (1.0 - _D19) * (a18.f64[0] - a8);
      v71 = a18.f64[1] - (1.0 - _D19) * (a18.f64[1] - a9);
      v72 = a19 - (1.0 - _D19) * (a19 - a17);
      v73 = v65.f64[1];
      v74 = v65.f64[1] / v66;
      if (*(_BYTE *)(this + 88))
      {
        v82 = v66;
        v84 = v65.f64[0];
        CA::ScanConverter::Path::add_line(this, *(double *)(this + 96), *(double *)(this + 104), v65.f64[0] / v66, v74);
        v66 = v82;
        v65.f64[0] = v84;
        *(_BYTE *)(v19 + 88) = 0;
      }
      else
      {
        *(_BYTE *)(this + 89) = 1;
        *(double *)(this + 112) = v65.f64[0] / v66;
        *(double *)(this + 120) = v74;
      }
      v24 = 1.0 / v66 * v65.f64[0];
      v25 = 1.0 / v66 * v73;
      v26 = 1.0 / v69 * v67;
      v27 = 1.0 / v69 * v68;
      v28 = 1.0 / v72 * v70;
      v29 = 1.0 / v72 * v71;
      v30 = 1.0 / a19 * a18.f64[0];
      v31 = 1.0 / a19 * a18.f64[1];
      return CA::ScanConverter::Path::add_cube(v19, v24, v25, v26, v27, v28, v29, v30, v31);
    }
    __asm { FMOV            V4.2D, #2.0 }
    _Q4.f64[0] = _D19;
    v76 = a4 + (v33 + v33 + _D19 * v61) * _D19;
    __asm { FMLA            D7, D19, V22.D[1] }
    v83 = *(_QWORD *)&v66;
    v85 = v65;
    this = CA::ScanConverter::Path::add_cube(this, 1.0 / a4 * a2, 1.0 / a4 * a3, 1.0 / (a4 + _D19 * v33) * vmlad_n_f64(a2, _D19, _Q22.f64[0]), 1.0 / (a4 + _D19 * v33) * _D7, 1.0 / v76 * (a2 + vmlad_n_f64(_Q22.f64[0] + _Q22.f64[0], _D19, v62.f64[0]) * _D19), 1.0/ v76* (a3 + vaddvq_f64(vmulq_f64(_Q4, (float64x2_t)vzip2q_s64((int64x2_t)v62, (int64x2_t)_Q22))) * _D19), 1.0 / v66 * v65.f64[0], vmuld_lane_f64(1.0 / v66, v65, 1));
    *(float64x2_t *)(v19 + 96) = vdivq_f64(v85, (float64x2_t)vdupq_lane_s64(v83, 0));
    *(_BYTE *)(v19 + 88) = 1;
  }
  return this;
}

double *CA::OGL::`anonymous namespace'::clamp_twenty_part_rect(double *this, double *a2, double *a3, float *a4, float *a5, float *a6, float *a7)
{
  char v7;
  uint64_t v8;
  char v9;
  double v10;
  uint64_t v11;
  double v12;
  float v13;
  double v14;
  float v15;
  char v16;
  uint64_t v17;
  char v18;
  double v19;
  uint64_t v20;
  double v21;
  float v22;
  double v23;
  float v24;

  v7 = 0;
  v8 = 1;
  do
  {
    v9 = v7;
    v10 = this[v8];
    v11 = 5 - v8;
    v12 = this[5 - v8];
    if (v10 > v12)
    {
      v13 = (v12 + v10) * 0.5;
      v14 = v13;
      v15 = (v14 - *this) / (v10 - *this);
      this[v11] = v14;
      this[v8] = v14;
      if (a3)
      {
        *((float *)a3 + v8) = *(float *)a3 + (float)((float)(*((float *)a3 + v8) - *(float *)a3) * v15);
        *((float *)a3 + v11) = *((float *)a3 + 5) + (float)((float)(*((float *)a3 + v11) - *((float *)a3 + 5)) * v15);
      }
      if (a5)
      {
        a5[v8] = *a5 + (float)((float)(a5[v8] - *a5) * v15);
        a5[v11] = a5[5] + (float)((float)(a5[v11] - a5[5]) * v15);
      }
    }
    v7 = 1;
    v8 = 2;
  }
  while ((v9 & 1) == 0);
  v16 = 0;
  v17 = 1;
  do
  {
    v18 = v16;
    v19 = a2[v17];
    v20 = 5 - v17;
    v21 = a2[5 - v17];
    if (v19 > v21)
    {
      v22 = (v21 + v19) * 0.5;
      v23 = v22;
      v24 = (v23 - *a2) / (v19 - *a2);
      a2[v20] = v23;
      a2[v17] = v23;
      if (a4)
      {
        a4[v17] = *a4 + (float)((float)(a4[v17] - *a4) * v24);
        a4[v20] = a4[5] + (float)((float)(a4[v20] - a4[5]) * v24);
      }
      if (a6)
      {
        a6[v17] = *a6 + (float)((float)(a6[v17] - *a6) * v24);
        a6[v20] = a6[5] + (float)((float)(a6[v20] - a6[5]) * v24);
      }
    }
    v16 = 1;
    v17 = 2;
  }
  while ((v18 & 1) == 0);
  return this;
}

float CA::OGL::adjust_skipped_corner_vertices_simple(_OWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v5;
  _OWORD *v6;
  __int128 v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  _OWORD *v11;
  __int128 v12;
  _OWORD *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  float result;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  float *v25;
  float *v26;
  _DWORD *v27;
  float v28;
  unint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  float *v37;
  float *v38;
  _DWORD *v39;
  float v40;

  v5 = a3 * a3;
  v6 = &a1[2 * a3 * a3];
  v7 = a1[1];
  *v6 = *a1;
  v6[1] = v7;
  v8 = a3 - 1;
  v9 = &a1[2 * a3 - 2];
  v10 = v9[1];
  v6[2] = *v9;
  v6[3] = v10;
  v11 = (_OWORD *)((char *)a1 + ((32 * a3 * a3) | 0x40));
  v12 = *(v6 - 1);
  *v11 = *(v6 - 2);
  v11[1] = v12;
  v13 = &a1[2 * (a3 - 1) * a3];
  v14 = v13[1];
  v6[6] = *v13;
  v6[7] = v14;
  v15 = 48 * a3 * a3 + 64;
  v16 = a2;
  v17 = a4;
  do
  {
    v18 = v16 + v15;
    *(_DWORD *)(v18 - 48) = *(_DWORD *)(v16 + 16);
    *(_DWORD *)v18 = *(_DWORD *)(v16 + 48 * a3 - 32);
    *(_DWORD *)(v18 + 48) = *(_DWORD *)(v16 + v15 - 96);
    result = *(float *)(v16 + 48 * a3 * (a3 - 1) + 16);
    *(float *)(v18 + 96) = result;
    v16 += 4;
    --v17;
  }
  while (v17);
  v20 = (a5 >> 25) & 2;
  if ((a5 & 0x400000) != 0)
  {
    v21 = a4 - v20;
    if (a4 > v20)
    {
      v22 = a2 + 8 * ((a5 >> 26) & 1);
      do
      {
        *(_DWORD *)(v22 + 16) = *(_DWORD *)(v22 + 48 * a3 + 16);
        result = *(float *)(v22 + 64);
        *(float *)(v22 + 48 * a3 * a3 + 16) = result;
        v22 += 4;
        --v21;
      }
      while (v21);
    }
  }
  if ((a5 & 0x800000) != 0)
  {
    v23 = a4 - v20;
    if (a4 > v20)
    {
      v24 = 8 * ((a5 >> 26) & 1);
      v25 = (float *)(((48 * a3 * a3) & 0xFFFFFFFFFFFFFFF7 | (8 * ((a5 >> 26) & 1))) + a2 + 64);
      v26 = (float *)((v24 | (96 * a3)) + a2 - 32);
      v27 = (_DWORD *)((v24 & 0xF | (48 * a3)) + a2 - 80);
      do
      {
        v27[12] = *v27;
        v28 = *v26++;
        result = v28;
        *v25++ = v28;
        ++v27;
        --v23;
      }
      while (v23);
    }
  }
  if ((a5 & 0x2000000) != 0)
  {
    v29 = a4 - v20;
    if (a4 > v20)
    {
      v30 = 8 * ((a5 >> 26) & 1);
      v31 = (int *)((v30 | (48 * a3 * v8)) + a2 - 32);
      v32 = (v30 | (48 * v5)) + a2 - 80;
      do
      {
        v33 = *v31++;
        *(_DWORD *)(v32 + 48) = v33;
        result = *(float *)v32;
        *(_DWORD *)(v32 + 192) = *(_DWORD *)v32;
        v32 += 4;
        --v29;
      }
      while (v29);
    }
  }
  if ((a5 & 0x1000000) != 0)
  {
    v34 = a4 >= v20;
    v35 = a4 - v20;
    if (v35 != 0 && v34)
    {
      v36 = 8 * ((a5 >> 26) & 1);
      v37 = (float *)((v36 | (48 * v5)) + a2 + 160);
      v38 = (float *)((v36 | (48 * a3 * (a3 - 2))) + a2 + 16);
      v39 = (_DWORD *)((v36 | (48 * a3 * v8)) + a2 + 64);
      do
      {
        *(v39 - 12) = *v39;
        v40 = *v38++;
        result = v40;
        *v37++ = v40;
        ++v39;
        --v35;
      }
      while (v35);
    }
  }
  return result;
}

float CA::OGL::adjust_skipped_corner_vertices(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;
  _OWORD *v16;
  _OWORD *v17;
  __int128 v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  _DWORD *v40;
  _DWORD *v41;
  _DWORD *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  _DWORD *v49;
  _DWORD *v50;
  _DWORD *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  _DWORD *v57;
  _DWORD *v58;
  _DWORD *v59;
  unint64_t v60;

  v7 = 9 * a3;
  v8 = (_OWORD *)(a1 + 288 * a3);
  v9 = (_OWORD *)(a1 + 32 * a5);
  v10 = v8[1];
  *v9 = *v8;
  v9[1] = v10;
  v11 = 7 - a3;
  v12 = 7 - a3 + 8 * a3;
  v13 = (_OWORD *)(a1 + 32 * v12);
  v14 = (_OWORD *)(a1 + 32 * (a5 + 1));
  v15 = v13[1];
  *v14 = *v13;
  v14[1] = v15;
  v16 = (_OWORD *)(a1 + 288 * (7 - a3));
  v17 = (_OWORD *)(a1 + 32 * (a5 + 2));
  v18 = v16[1];
  *v17 = *v16;
  v17[1] = v18;
  v19 = a3 + 8 * (7 - a3);
  v20 = (_OWORD *)(a1 + 32 * v19);
  v21 = (_OWORD *)(a1 + 32 * (a5 + 3));
  v22 = v20[1];
  *v21 = *v20;
  v21[1] = v22;
  v23 = a2;
  v24 = a6;
  do
  {
    v25 = v23 + 48 * a5 + 112;
    *(_DWORD *)(v25 - 96) = *(_DWORD *)(v23 + 432 * a3 + 16);
    *(_DWORD *)(v25 - 48) = *(_DWORD *)(v23 + 336 * a3 + 352);
    *(_DWORD *)v25 = *(_DWORD *)(v23 + 3040 - 432 * a3);
    result = *(float *)(v23 + 2704 - 336 * a3);
    *(float *)(v25 + 48) = result;
    v23 += 4;
    --v24;
  }
  while (v24);
  if ((a7 & 0x400000) != 0)
  {
    v27 = 0;
    v28 = a3 + 8 * (a4 + a3);
    v29 = a2 + 432 * a3;
    v30 = (_DWORD *)(v29 + 64);
    v31 = (_DWORD *)(v29 + 400);
    do
    {
      if (a4 >= 2)
      {
        v32 = v31;
        v33 = v30;
        v34 = a4 - 1;
        do
        {
          *v32 = *(_DWORD *)(a2 + 48 * v28 + 4 * v27 + 16);
          *v33 = *(_DWORD *)(a2 + 48 * (v7 + a4) + 4 * v27 + 16);
          v33 += 12;
          v32 += 96;
          --v34;
        }
        while (v34);
      }
      *(_DWORD *)(a2 + 432 * a3 + 4 * v27 + 16) = *(_DWORD *)(a2 + 48 * v28 + 4 * v27 + 16);
      result = *(float *)(a2 + 48 * (v7 + a4) + 4 * v27 + 16);
      *(float *)(a2 + 48 * a5 + 4 * v27++ + 16) = result;
      ++v30;
      ++v31;
    }
    while (v27 != a6);
  }
  if ((a7 & 0x800000) != 0)
  {
    v35 = 0;
    v36 = v11 - a4 + 8 * a3;
    v37 = v11 + 8 * (a4 + a3);
    v38 = a2 + 336 * a3;
    v39 = (_DWORD *)(v38 + 736);
    v40 = (_DWORD *)(v38 + 304);
    do
    {
      if (a4 >= 2)
      {
        v41 = v40;
        v42 = v39;
        v43 = a4 - 1;
        do
        {
          *v41 = *(_DWORD *)(a2 + 48 * v36 + 4 * v35 + 16);
          v41 -= 12;
          *v42 = *(_DWORD *)(a2 + 48 * v37 + 4 * v35 + 16);
          v42 += 96;
          --v43;
        }
        while (v43);
      }
      *(_DWORD *)(a2 + 48 * v12 + 4 * v35 + 16) = *(_DWORD *)(a2 + 48 * v36 + 4 * v35 + 16);
      result = *(float *)(a2 + 48 * v37 + 4 * v35 + 16);
      *(float *)(a2 + 48 * (a5 + 1) + 4 * v35++ + 16) = result;
      ++v39;
      ++v40;
    }
    while (v35 != a6);
  }
  if ((a7 & 0x2000000) != 0)
  {
    v44 = 0;
    v45 = v11 + 8 * (v11 - a4);
    v46 = 8 * (7 - a3) + v11 - a4;
    v47 = a2 - 432 * a3;
    v48 = (_DWORD *)(v47 + 2656);
    v49 = (_DWORD *)(v47 + 2992);
    do
    {
      if (a4 >= 2)
      {
        v50 = v49;
        v51 = v48;
        v52 = a4 - 1;
        do
        {
          *v51 = *(_DWORD *)(a2 + 48 * v45 + 4 * v44 + 16);
          *v50 = *(_DWORD *)(a2 + 48 * v46 + 4 * v44 + 16);
          v50 -= 12;
          v51 -= 96;
          --v52;
        }
        while (v52);
      }
      *(_DWORD *)(a2 + 432 * (7 - a3) + 4 * v44 + 16) = *(_DWORD *)(a2 + 48 * v45 + 4 * v44 + 16);
      result = *(float *)(a2 + 48 * v46 + 4 * v44 + 16);
      *(float *)(a2 + 48 * (a5 + 2) + 4 * v44++ + 16) = result;
      ++v48;
      ++v49;
    }
    while (v44 != a6);
  }
  if ((a7 & 0x1000000) != 0)
  {
    v53 = 0;
    v54 = a3 + 8 * (v11 - a4);
    v55 = a2 - 336 * a3;
    v56 = (_DWORD *)(v55 + 2320);
    v57 = (_DWORD *)(v55 + 2752);
    do
    {
      if (a4 >= 2)
      {
        v58 = v57;
        v59 = v56;
        v60 = a4 - 1;
        do
        {
          *v58 = *(_DWORD *)(a2 + 48 * (v19 + a4) + 4 * v53 + 16);
          v58 += 12;
          *v59 = *(_DWORD *)(a2 + 48 * v54 + 4 * v53 + 16);
          v59 -= 96;
          --v60;
        }
        while (v60);
      }
      *(_DWORD *)(a2 + 48 * v19 + 4 * v53 + 16) = *(_DWORD *)(a2 + 48 * (v19 + a4) + 4 * v53 + 16);
      result = *(float *)(a2 + 48 * v54 + 4 * v53 + 16);
      *(float *)(a2 + 48 * (a5 + 3) + 4 * v53++ + 16) = result;
      ++v56;
      ++v57;
    }
    while (v53 != a6);
  }
  return result;
}

uint64_t CA::Render::count_elements(uint64_t this, _QWORD *a2, const CGPathElement *a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;

  v3 = *(int *)a2;
  v4 = cgpath_counts[v3];
  v5 = *(_QWORD *)(this + 8) + v4;
  ++*(_QWORD *)this;
  *(_QWORD *)(this + 8) = v5;
  if ((_DWORD)v3)
    ++*(_QWORD *)(this + 16);
  if (*(_BYTE *)(this + 40))
    v6 = (_DWORD)v3 == 4;
  else
    v6 = 1;
  if (!v6)
  {
    if (v4 <= 1)
      v4 = 1;
    v7 = (_QWORD *)(a2[1] + 8);
    do
    {
      if ((*(v7 - 1) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*v7 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        *(_BYTE *)(this + 40) = 0;
      }
      v7 += 2;
      --v4;
    }
    while (v4);
  }
  return this;
}

void CA::Transaction::flush_as_runloop_observer(CA::Transaction *this, int a2)
{
  uint64_t v3;
  char v4;
  void *v5;
  _QWORD *v6;
  BOOL v7;
  CA *v8;

  v3 = *((_QWORD *)this + 13);
  if (v3)
  {
    if (*(_DWORD *)v3)
    {
      v4 = *(_BYTE *)(v3 + 204);
      if ((v4 & 1) != 0 && a2 != (v4 & 8) >> 3)
      {
        v5 = (void *)MEMORY[0x186DBE2E4]();
        if (dyld_program_sdk_at_least())
        {
          CA::Transaction::flush(this);
        }
        else
        {
          CA::Transaction::commit(this);
          CA::Transaction::reset_animators(this);
        }
        objc_autoreleasePoolPop(v5);
      }
    }
  }
  if ((*((_BYTE *)this + 116) & 1) != 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::callback_lock);
    v6 = (_QWORD *)CA::active_timers;
    if (CA::callback_timer)
      v7 = CA::active_timers == 0;
    else
      v7 = 1;
    if (!v7)
    {
      while (*v6 != CA::callback_timer)
      {
        v6 = (_QWORD *)v6[1];
        if (!v6)
          goto LABEL_18;
      }
      CFRunLoopTimerInvalidate((CFRunLoopTimerRef)CA::callback_timer);
      CFRelease((CFTypeRef)CA::callback_timer);
      CA::callback_timer = 0;
      CA::update_timer(v8);
    }
LABEL_18:
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::callback_lock);
  }
}

void sub_1844E25F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_autoreleasePoolPop(v1);
  _Unwind_Resume(a1);
}

void CA::Transaction::flush(CA::Transaction *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 13);
  if ((*(_BYTE *)(v1 + 204) & 1) != 0 && !*((_DWORD *)this + 28))
  {
    if (*(_DWORD *)v1 < 2u)
      CA::Transaction::commit(this);
    else
      *(_BYTE *)(v1 + 204) |= 2u;
  }
}

BOOL CA::Render::Fence::resolve_batches(CA::Render::Fence *this, double a2)
{
  uint64_t *i;
  unsigned int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint64_t **v10;
  uint64_t *j;
  unint64_t v12;
  float v13;
  uint64_t v14;
  _BOOL8 v15;
  size_t v16;
  unint64_t v17;
  size_t v18;
  _QWORD *v19;
  uint8x8_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  unsigned int v30;
  uint64_t *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  os_unfair_lock_s *v36;
  uint64_t *v37;
  char v38;
  _QWORD *v39;
  unsigned int v40;
  uint64_t *v41;
  uint64_t *v42;
  _QWORD *k;
  _QWORD *v44;
  uint64_t *v45;
  int8x8_t v46;
  unint64_t v47;
  uint8x8_t v48;
  uint64_t *v49;
  uint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t *m;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  malloc_zone_t *malloc_zone;
  _QWORD *v77;
  uint64_t *v78;
  uint64_t *v79;
  ipc_space_t *v80;
  unsigned int v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t *n;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t *v90;
  int8x8_t v91;
  unint64_t v92;
  uint8x8_t v93;
  uint64_t *v94;
  uint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  malloc_zone_t *v100;
  _QWORD *v101;
  _QWORD *v102;
  void *v103;
  _BOOL8 v104;
  uint64_t v106;
  _QWORD *v107;
  void *v108[2];
  void *__p[2];
  uint64_t v110;
  _OWORD v111[2];
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  void **v116[5];

  v116[3] = *(void ***)MEMORY[0x1E0C80C00];
  v113 = 0u;
  v114 = 0u;
  v115 = 1065353216;
  memset(v111, 0, sizeof(v111));
  v112 = 1065353216;
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>((uint64_t)&v113, (unint64_t)(float)*(unint64_t *)(CA::Render::Fence::cleared_b_ports + 24));
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>((uint64_t)v111, (unint64_t)(float)*(unint64_t *)(CA::Render::Fence::batches_by_port + 24));
  for (i = *(uint64_t **)(CA::Render::Fence::cleared_b_ports + 16); i; i = (uint64_t *)*i)
  {
    v4 = *((_DWORD *)i + 4);
    if (!std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(&v113, v4)&& !std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v111, v4))
    {
      *(_OWORD *)v108 = 0u;
      *(_OWORD *)__p = 0u;
      v110 = 1065353216;
      if (!CA::Render::Fence::is_batch_resolved(v4, v108, &v113, v111))
        goto LABEL_48;
      v5 = __p[0];
      if (!__p[0])
        goto LABEL_48;
      v6 = *((_QWORD *)&v113 + 1);
LABEL_7:
      while (2)
      {
        v7 = *((unsigned int *)v5 + 4);
        if (v6)
        {
          v8 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
          v8.i16[0] = vaddlv_u8(v8);
          if (v8.u32[0] > 1uLL)
          {
            v9 = *((unsigned int *)v5 + 4);
            if (v6 <= v7)
              v9 = v7 % v6;
          }
          else
          {
            v9 = ((_DWORD)v6 - 1) & v7;
          }
          v10 = *(uint64_t ***)(v113 + 8 * v9);
          if (v10)
          {
            for (j = *v10; j; j = (uint64_t *)*j)
            {
              v12 = j[1];
              if (v12 == v7)
              {
                if (*((_DWORD *)j + 4) == (_DWORD)v7)
                {
                  v5 = (_QWORD *)*v5;
                  if (!v5)
                    goto LABEL_48;
                  goto LABEL_7;
                }
              }
              else
              {
                if (v8.u32[0] > 1uLL)
                {
                  if (v12 >= v6)
                    v12 %= v6;
                }
                else
                {
                  v12 &= v6 - 1;
                }
                if (v12 != v9)
                  break;
              }
            }
          }
        }
        v13 = (float)(unint64_t)(*((_QWORD *)&v114 + 1) + 1);
        if (!v6 || (float)(*(float *)&v115 * (float)v6) < v13)
        {
          v14 = 2 * v6;
          v15 = v6 < 3 || (v6 & (v6 - 1)) != 0;
          v16 = v15 | v14;
          v17 = vcvtps_u32_f32(v13 / *(float *)&v115);
          if (v16 <= v17)
            v18 = v17;
          else
            v18 = v16;
          std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>((uint64_t)&v113, v18);
        }
        v19 = (_QWORD *)*v5;
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::remove((uint64_t)v116, v108, v5);
        v5[1] = v7;
        v6 = *((_QWORD *)&v113 + 1);
        v20 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v113 + 8));
        v20.i16[0] = vaddlv_u8(v20);
        if (v20.u32[0] > 1uLL)
        {
          if (*((_QWORD *)&v113 + 1) <= v7)
            v7 %= *((_QWORD *)&v113 + 1);
        }
        else
        {
          v7 = (DWORD2(v113) - 1) & v7;
        }
        v21 = *(_QWORD **)(v113 + 8 * v7);
        if (v21)
        {
          *v5 = *v21;
          goto LABEL_44;
        }
        *v5 = v114;
        *(_QWORD *)&v114 = v5;
        *(_QWORD *)(v113 + 8 * v7) = &v114;
        if (*v5)
        {
          v22 = *(_QWORD *)(*v5 + 8);
          if (v20.u32[0] > 1uLL)
          {
            if (v22 >= v6)
              v22 %= v6;
          }
          else
          {
            v22 &= v6 - 1;
          }
          v21 = (_QWORD *)(v113 + 8 * v22);
LABEL_44:
          *v21 = v5;
        }
        ++*((_QWORD *)&v114 + 1);
        v5 = v19;
        if (v19)
          continue;
        break;
      }
LABEL_48:
      std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)v108);
    }
  }
  v23 = *((_QWORD *)&v114 + 1);
  if (*((_QWORD *)&v114 + 1))
  {
    v106 = *((_QWORD *)&v114 + 1);
    *(_OWORD *)v108 = 0u;
    *(_OWORD *)__p = 0u;
    v110 = 1065353216;
    v24 = (uint64_t *)v114;
    if ((_QWORD)v114)
    {
      v25 = &CA::Render::transition_lock;
      do
      {
        v26 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((_QWORD *)CA::Render::Fence::batches_by_port, *((_DWORD *)v24 + 4));
        if (!v26)
          goto LABEL_194;
        v27 = v26[3];
        if (a2 <= *(double *)(v27 + 16))
          a2 = *(double *)(v27 + 16);
        v28 = *(uint64_t **)(*(_QWORD *)(v27 + 24) + 16);
        if (v28)
        {
          v29 = (_QWORD *)CA::Render::Fence::bcontexts_by_id;
          do
          {
            LODWORD(v116[0]) = *((_DWORD *)v28 + 4);
            v30 = v116[0];
            v31 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v29, v116[0]);
            if (v31)
            {
              v32 = v31[3];
              std::__hash_table<std::__hash_value_type<unsigned int,CA::Render::Context *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,CA::Render::Context *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,CA::Render::Context *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,CA::Render::Context *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((float *)v108, v30, v116)[3] = v32;
              v29 = (_QWORD *)CA::Render::Fence::bcontexts_by_id;
            }
            v28 = (uint64_t *)*v28;
          }
          while (v28);
        }
        v24 = (uint64_t *)*v24;
      }
      while (v24);
      if (__p[1])
      {
        pthread_mutex_lock(&CA::Render::Fence::_bwait_mutex);
        CA::Render::Fence::_bwait_writer_pending = 1;
        while (CA::Render::Fence::_bwait_readers_by_tid)
          pthread_cond_wait(&CA::Render::Fence::_bwait_cond_writer, &CA::Render::Fence::_bwait_mutex);
        CA::Render::Fence::_bwait_writer_active = 1;
        CA::Render::Fence::_bwait_writer_pending = 0;
        pthread_mutex_unlock(&CA::Render::Fence::_bwait_mutex);
        v33 = __p[0];
        if (__p[0])
        {
          do
          {
            v107 = v33;
            v34 = (uint64_t *)v33[3];
            v35 = *v34;
            v36 = (os_unfair_lock_s *)(*v34 + 680);
            os_unfair_lock_lock(v36);
            if (*((_QWORD *)&v114 + 1))
            {
              os_unfair_lock_lock((os_unfair_lock_t)(v35 + 632));
              v37 = (uint64_t *)v114;
              if ((_QWORD)v114)
              {
                v38 = 0;
                v39 = (_QWORD *)(v35 + 696);
                do
                {
                  v40 = *((_DWORD *)v37 + 4);
                  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__erase_unique<unsigned int>((_QWORD *)(v35 + 640), v40);
                  v41 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((_QWORD *)(v35 + 696), v40);
                  if (v41)
                  {
                    v42 = v41;
                    for (k = *(_QWORD **)(v35 + 688); k; k = (_QWORD *)*k)
                    {
                      v44 = (_QWORD *)k[1];
                      if (v44)
                      {
                        v45 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((_QWORD *)k[1], v40);
                        if (v45)
                        {
                          std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::erase(v44, v45);
                          v38 = 1;
                        }
                        if (k == (_QWORD *)v42[3])
                          break;
                      }
                    }
                    v46 = *(int8x8_t *)(v35 + 704);
                    v47 = v42[1];
                    v48 = (uint8x8_t)vcnt_s8(v46);
                    v48.i16[0] = vaddlv_u8(v48);
                    if (v48.u32[0] > 1uLL)
                    {
                      if (v47 >= *(_QWORD *)&v46)
                        v47 %= *(_QWORD *)&v46;
                    }
                    else
                    {
                      v47 &= *(_QWORD *)&v46 - 1;
                    }
                    v49 = *(uint64_t **)(*v39 + 8 * v47);
                    do
                    {
                      v50 = v49;
                      v49 = (uint64_t *)*v49;
                    }
                    while (v49 != v42);
                    if (v50 == (uint64_t *)(v35 + 712))
                      goto LABEL_93;
                    v51 = v50[1];
                    if (v48.u32[0] > 1uLL)
                    {
                      if (v51 >= *(_QWORD *)&v46)
                        v51 %= *(_QWORD *)&v46;
                    }
                    else
                    {
                      v51 &= *(_QWORD *)&v46 - 1;
                    }
                    if (v51 != v47)
                    {
LABEL_93:
                      if (!*v42)
                        goto LABEL_94;
                      v52 = *(_QWORD *)(*v42 + 8);
                      if (v48.u32[0] > 1uLL)
                      {
                        if (v52 >= *(_QWORD *)&v46)
                          v52 %= *(_QWORD *)&v46;
                      }
                      else
                      {
                        v52 &= *(_QWORD *)&v46 - 1;
                      }
                      if (v52 != v47)
LABEL_94:
                        *(_QWORD *)(*v39 + 8 * v47) = 0;
                    }
                    v53 = *v42;
                    if (*v42)
                    {
                      v54 = *(_QWORD *)(v53 + 8);
                      if (v48.u32[0] > 1uLL)
                      {
                        if (v54 >= *(_QWORD *)&v46)
                          v54 %= *(_QWORD *)&v46;
                      }
                      else
                      {
                        v54 &= *(_QWORD *)&v46 - 1;
                      }
                      if (v54 != v47)
                      {
                        *(_QWORD *)(*v39 + 8 * v54) = v50;
                        v53 = *v42;
                      }
                    }
                    *v50 = v53;
                    --*(_QWORD *)(v35 + 720);
                    operator delete(v42);
                  }
                  v37 = (uint64_t *)*v37;
                }
                while (v37);
                os_unfair_lock_unlock((os_unfair_lock_t)(v35 + 632));
                v25 = (_QWORD *)&CA::Render::transition_lock;
                if ((v38 & 1) != 0)
                  CA::Render::Context::drain_deferred(v35, a2);
              }
              else
              {
                os_unfair_lock_unlock((os_unfair_lock_t)(v35 + 632));
              }
            }
            os_unfair_lock_unlock(v36);
            v55 = v34[1];
            v56 = *(_QWORD **)v55;
            if (*(_QWORD *)v55 == *(_QWORD *)(v55 + 8))
            {
              v58 = *(_QWORD **)v55;
            }
            else
            {
              do
              {
                for (m = (uint64_t *)v114; m; m = (uint64_t *)*m)
                  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__erase_unique<unsigned int>(v56, *((_DWORD *)m + 4));
                if (v56[3])
                {
                  v56 += 5;
                  v58 = *(_QWORD **)(v55 + 8);
                }
                else
                {
                  v59 = (uint64_t)(v56 + 5);
                  v60 = *(_QWORD **)(v55 + 8);
                  if (v56 + 5 == v60)
                  {
                    v58 = v56;
                  }
                  else
                  {
                    v61 = v56;
                    do
                    {
                      std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::clear(v61);
                      v62 = v61[5];
                      v61[5] = 0;
                      v63 = (void *)*v61;
                      *v61 = v62;
                      if (v63)
                        operator delete(v63);
                      v64 = v61[7];
                      v61[2] = v64;
                      v65 = v61[6];
                      v61[1] = v65;
                      v61[6] = 0;
                      v66 = v61[8];
                      v61[3] = v66;
                      *((_DWORD *)v61 + 8) = *((_DWORD *)v61 + 18);
                      if (v66)
                      {
                        v67 = *(_QWORD *)(v64 + 8);
                        if ((v65 & (v65 - 1)) != 0)
                        {
                          if (v67 >= v65)
                            v67 %= v65;
                        }
                        else
                        {
                          v67 &= v65 - 1;
                        }
                        *(_QWORD *)(*v61 + 8 * v67) = v61 + 2;
                        v61[7] = 0;
                        v61[8] = 0;
                      }
                      v58 = v61 + 5;
                      v68 = v61 + 10;
                      v61 += 5;
                    }
                    while (v68 != v60);
                    v59 = *(_QWORD *)(v55 + 8);
                  }
                  while ((_QWORD *)v59 != v58)
                    v59 = std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table(v59 - 40);
                  *(_QWORD *)(v55 + 8) = v58;
                }
              }
              while (v56 != v58);
            }
            v69 = (uint64_t *)v114;
            if ((_QWORD)v114)
            {
              do
              {
                std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__erase_unique<unsigned int>((_QWORD *)v34[2], *((_DWORD *)v69 + 4));
                v69 = (uint64_t *)*v69;
              }
              while (v69);
              v58 = *(_QWORD **)(v55 + 8);
            }
            if (*(_QWORD **)v55 == v58 && !*(_QWORD *)(v34[2] + 24))
            {
              v116[0] = (void **)v55;
              std::vector<std::unordered_set<unsigned long long>>::__destroy_vector::operator()[abi:nn180100](v116);
              MEMORY[0x186DBD990](v55, 0x20C40960023A9);
              v70 = v34[2];
              if (v70)
              {
                v71 = std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table(v70);
                MEMORY[0x186DBD990](v71, 0x10A0C408EF24B1CLL);
              }
              v72 = (unsigned int *)*v34;
              if (*v34)
              {
                v73 = v72 + 2;
                do
                {
                  v74 = __ldaxr(v73);
                  v75 = v74 - 1;
                }
                while (__stlxr(v75, v73));
                if (!v75)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v72 + 16))(v72);
              }
              malloc_zone = (malloc_zone_t *)get_malloc_zone();
              malloc_zone_free(malloc_zone, v34);
              v77 = (_QWORD *)v25[429];
              v78 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v77, *((_DWORD *)v107 + 4));
              if (v78)
                std::__hash_table<std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::__unordered_map_hasher<CA::Render::Object *,std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::hash<CA::Render::Object *>,std::equal_to<CA::Render::Object *>,true>,std::__unordered_map_equal<CA::Render::Object *,std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::equal_to<CA::Render::Object *>,std::hash<CA::Render::Object *>,true>,std::allocator<std::__hash_value_type<CA::Render::Object *,x_link_struct>>>::erase(v77, v78);
            }
            v33 = (_QWORD *)*v107;
          }
          while (*v107);
        }
        pthread_mutex_lock(&CA::Render::Fence::_bwait_mutex);
        CA::Render::Fence::_bwait_writer_active = 0;
        pthread_cond_broadcast(&CA::Render::Fence::_bwait_cond_reader);
        pthread_mutex_unlock(&CA::Render::Fence::_bwait_mutex);
      }
      v79 = (uint64_t *)v114;
      if ((_QWORD)v114)
      {
        v80 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
        while (1)
        {
          v81 = *((_DWORD *)v79 + 4);
          v82 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((_QWORD *)CA::Render::Fence::batches_by_port, v81);
          if (!v82)
            break;
          v83 = v82[3];
          if (*(_BYTE *)(v83 + 44))
          {
            for (n = *(uint64_t **)(*(_QWORD *)(v83 + 24) + 16); n; n = (uint64_t *)*n)
            {
              std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(*(_QWORD **)(v83 + 32), *((_DWORD *)n + 4));
              kdebug_trace();
            }
          }
          v85 = *(_QWORD *)(v83 + 24);
          if (v85)
          {
            v86 = std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table(v85);
            MEMORY[0x186DBD990](v86, 0x10A0C408EF24B1CLL);
          }
          v87 = *(_QWORD *)(v83 + 32);
          if (v87)
          {
            v88 = std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table(v87);
            MEMORY[0x186DBD990](v88, 0x10A0C408EF24B1CLL);
          }
          v89 = (_QWORD *)CA::Render::Fence::batches_by_port;
          v90 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((_QWORD *)CA::Render::Fence::batches_by_port, v81);
          if (v90)
          {
            v91 = (int8x8_t)v89[1];
            v92 = v90[1];
            v93 = (uint8x8_t)vcnt_s8(v91);
            v93.i16[0] = vaddlv_u8(v93);
            if (v93.u32[0] > 1uLL)
            {
              if (v92 >= *(_QWORD *)&v91)
                v92 %= *(_QWORD *)&v91;
            }
            else
            {
              v92 &= *(_QWORD *)&v91 - 1;
            }
            v94 = *(uint64_t **)(*v89 + 8 * v92);
            do
            {
              v95 = v94;
              v94 = (uint64_t *)*v94;
            }
            while (v94 != v90);
            if (v95 == v89 + 2)
              goto LABEL_175;
            v96 = v95[1];
            if (v93.u32[0] > 1uLL)
            {
              if (v96 >= *(_QWORD *)&v91)
                v96 %= *(_QWORD *)&v91;
            }
            else
            {
              v96 &= *(_QWORD *)&v91 - 1;
            }
            if (v96 != v92)
            {
LABEL_175:
              if (!*v90)
                goto LABEL_176;
              v97 = *(_QWORD *)(*v90 + 8);
              if (v93.u32[0] > 1uLL)
              {
                if (v97 >= *(_QWORD *)&v91)
                  v97 %= *(_QWORD *)&v91;
              }
              else
              {
                v97 &= *(_QWORD *)&v91 - 1;
              }
              if (v97 != v92)
LABEL_176:
                *(_QWORD *)(*v89 + 8 * v92) = 0;
            }
            v98 = *v90;
            if (*v90)
            {
              v99 = *(_QWORD *)(v98 + 8);
              if (v93.u32[0] > 1uLL)
              {
                if (v99 >= *(_QWORD *)&v91)
                  v99 %= *(_QWORD *)&v91;
              }
              else
              {
                v99 &= *(_QWORD *)&v91 - 1;
              }
              if (v99 != v92)
              {
                *(_QWORD *)(*v89 + 8 * v99) = v95;
                v98 = *v90;
              }
            }
            *v95 = v98;
            *v90 = 0;
            --v89[3];
            operator delete(v90);
          }
          std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__erase_unique<unsigned int>((_QWORD *)CA::Render::Fence::cleared_b_ports, v81);
          if (*(_BYTE *)(v83 + 44))
            kdebug_trace();
          mach_port_destruct(*v80, v81, 0, *(_QWORD *)v83);
          v100 = (malloc_zone_t *)get_malloc_zone();
          malloc_zone_free(v100, (void *)v83);
          v79 = (uint64_t *)*v79;
          if (!v79)
            goto LABEL_188;
        }
LABEL_194:
        abort();
      }
    }
LABEL_188:
    v101 = __p[0];
    if (__p[0])
    {
      do
      {
        v102 = (_QWORD *)*v101;
        operator delete(v101);
        v101 = v102;
      }
      while (v102);
    }
    v103 = v108[0];
    v108[0] = 0;
    if (v103)
      operator delete(v103);
    v23 = v106;
  }
  v104 = v23 != 0;
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)v111);
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)&v113);
  return v104;
}

uint64_t CA::Render::Context::drain_deferred(uint64_t this, double a2)
{
  CA::Render::Context *v2;
  double v3;
  double *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t *v8;
  uint64_t i;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  malloc_zone_t *malloc_zone;
  _QWORD v14[2];

  v2 = (CA::Render::Context *)this;
  v14[1] = *MEMORY[0x1E0C80C00];
  v3 = *(double *)(this + 736);
  if (v3 < a2)
  {
    *(double *)(this + 736) = a2;
    v3 = a2;
  }
  v4 = *(double **)(this + 688);
  if (v4 && (*(_BYTE *)(this + 13) & 4) == 0)
  {
    v5 = 0;
    do
    {
      if (v4[2] > v3)
        break;
      v6 = *((_QWORD *)v4 + 1);
      if (v6)
      {
        if (*(_QWORD *)(v6 + 24))
          break;
      }
      ++v5;
      v4 = *(double **)v4;
    }
    while (v4);
    if (v5)
    {
      MEMORY[0x1E0C80A78](this);
      v8 = (_QWORD *)((char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
      bzero(v8, v7);
      for (i = 0; i != v5; ++i)
      {
        v10 = (_QWORD *)*((_QWORD *)v2 + 86);
        v11 = v10[1];
        *((_QWORD *)v2 + 86) = *v10;
        v8[i] = v10[3];
        if (v11)
        {
          v12 = std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table(v11);
          MEMORY[0x186DBD990](v12, 0x10A0C408EF24B1CLL);
        }
        malloc_zone = (malloc_zone_t *)get_malloc_zone();
        malloc_zone_free(malloc_zone, v10);
      }
      CA::Render::Context::apply_streams(v2, v8, v5);
      do
      {
        this = *v8;
        if (*v8)
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
        ++v8;
        --v5;
      }
      while (v5);
    }
  }
  return this;
}

void CA::Render::Context::apply_streams(CA::Render::Context *this, _QWORD *a2, uint64_t a3)
{
  char *v6;
  char v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  double v11;
  char v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if ((CA::Render::Context::apply_streams(CA::Render::Context::CommandStream **,unsigned long)::initialized & 1) == 0)
  {
    v6 = getenv("CA_BENCHMARK");
    if (v6 && atoi(v6))
      CA::Render::Context::apply_streams(CA::Render::Context::CommandStream **,unsigned long)::benchmark_mode = 1;
    CA::Render::Context::apply_streams(CA::Render::Context::CommandStream **,unsigned long)::initialized = 1;
  }
  CA::Render::Context::will_commit(this);
  v7 = 0;
  LOBYTE(v8) = 1;
  v9 = NAN;
  do
  {
    v13 = CA::Render::Context::apply_streams(CA::Render::Context::CommandStream **,unsigned long)::benchmark_mode;
    v12 = 0;
    v11 = NAN;
    (*(void (**)(_QWORD, char *, char *, double *))(*(_QWORD *)*a2 + 40))(*a2, &v13, &v12, &v11);
    if (v13
      || CA::Render::Context::apply_streams(CA::Render::Context::CommandStream **,unsigned long)::benchmark_mode == 1)
    {
      v7 = 1;
    }
    v8 = (v12 != 0) & v8;
    if (v11 < v9)
      v9 = v11;
    ++a2;
    --a3;
  }
  while (a3);
  if ((*(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    v10 = 0;
  else
    v10 = *(_QWORD *)&v9;
  CA::Render::Context::did_commit((unint64_t)this, v7 & 1, v10, 1, v8, 0);
  CA::Render::Context::run_scheduled_handle_updates(this);
}

uint64_t CA::Render::Context::will_commit(CA::Render::Context *this)
{
  uint64_t v2;
  CA::Render::Context *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t result;
  CA::Render::Context *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  if ((*((_WORD *)this + 276) & 0x40) == 0)
    CA::Render::post_notification(4u, (unint64_t)this, 0, 0);
  if (!*((_QWORD *)this + 52))
    goto LABEL_11;
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
  v2 = *((_QWORD *)this + 52);
  if (!v2 || (v3 = *(CA::Render::Context **)(v2 + 80)) == 0)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
LABEL_11:
    v3 = 0;
    goto LABEL_12;
  }
  v4 = (unsigned int *)((char *)v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  if (!v5)
  {
    do
      v10 = __ldaxr(v4);
    while (__stlxr(v10 - 1, v4));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
  CA::Render::Context::will_commit(v3);
LABEL_12:
  result = pthread_mutex_lock((pthread_mutex_t *)((char *)this + 72));
  v7 = (CA::Render::Context *)*((_QWORD *)this + 54);
  if (v7 && v7 != v3)
    __assert_rtn("will_commit", "render-context.cpp", 2307, "!_locked_host_ctx || _locked_host_ctx == host_ctx");
  *((_QWORD *)this + 54) = v3;
  v8 = (unsigned int *)((char *)this + 440);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  return result;
}

void CA::Render::post_notification(unsigned int a1, unint64_t a2, uint64_t a3, int a4)
{
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _UNKNOWN **v11;
  _UNKNOWN **v12;
  _QWORD *v13;
  _UNKNOWN **v14;
  _UNKNOWN **v15;
  _UNKNOWN **v16;
  BOOL v17;
  BOOL v18;
  char *v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  unsigned int *v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  int v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t i;
  uint64_t v49;
  int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  malloc_zone_t *malloc_zone;
  char *v55;
  uint64_t v56;
  int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  malloc_zone_t *v61;
  uint64_t v62;
  int64x2_t *v63;
  char *v64;
  uint64_t v65;
  int v66;
  _UNKNOWN **v67;
  _QWORD *v68;
  char *v69;
  unint64_t v70;
  _UNKNOWN **v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  if (a1 > 0x49)
    return;
  v8 = *MEMORY[0x1E0C85AD8];
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::notification_lock);
  if ((CA::Render::initialize_notifications(void)::initialized & 1) == 0)
  {
    v62 = 0;
    v63 = (int64x2_t *)CA::Render::notifications;
    do
    {
      v64 = (char *)&CA::Render::notifications_map_data + v62;
      *(_OWORD *)v64 = 0uLL;
      *((_OWORD *)v64 + 1) = 0uLL;
      *((_DWORD *)v64 + 8) = 1065353216;
      *v63 = vdupq_n_s64((unint64_t)v63);
      ++v63;
      v62 += 40;
    }
    while (v62 != 2960);
    CA::Render::initialize_notifications(void)::initialized = 1;
  }
  if (*((__int128 **)&CA::Render::notifications[a1] + 1) == &CA::Render::notifications[a1])
    goto LABEL_85;
  v9 = (_QWORD *)((char *)&CA::Render::notifications_map_data + 40 * a1);
  v10 = std::__hash_table<std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::__unordered_map_hasher<CA::Render::Object *,std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::hash<CA::Render::Object *>,std::equal_to<CA::Render::Object *>,true>,std::__unordered_map_equal<CA::Render::Object *,std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::equal_to<CA::Render::Object *>,std::hash<CA::Render::Object *>,true>,std::allocator<std::__hash_value_type<CA::Render::Object *,x_link_struct>>>::find<CA::Render::Object *>(v9, 0);
  v11 = (_UNKNOWN **)(v10 + 3);
  v12 = &CA::Render::post_notification(CA::Render::NotificationName,CA::Render::Object *,void *,BOOL)::empty_dummy;
  if (!v10)
    v11 = &CA::Render::post_notification(CA::Render::NotificationName,CA::Render::Object *,void *,BOOL)::empty_dummy;
  v67 = v11;
  v65 = a3;
  if (a2)
  {
    v13 = std::__hash_table<std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::__unordered_map_hasher<CA::Render::Object *,std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::hash<CA::Render::Object *>,std::equal_to<CA::Render::Object *>,true>,std::__unordered_map_equal<CA::Render::Object *,std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::equal_to<CA::Render::Object *>,std::hash<CA::Render::Object *>,true>,std::allocator<std::__hash_value_type<CA::Render::Object *,x_link_struct>>>::find<CA::Render::Object *>(v9, a2);
    if (v13)
      v12 = (_UNKNOWN **)(v13 + 3);
    else
      v12 = &CA::Render::post_notification(CA::Render::NotificationName,CA::Render::Object *,void *,BOOL)::empty_dummy;
  }
  v14 = v67;
  v15 = (_UNKNOWN **)v67[1];
  v16 = (_UNKNOWN **)v12[1];
  v17 = v16 != v12;
  v18 = v15 != v67;
  if (v15 == v67 && v16 == v12)
  {
LABEL_85:
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::notification_lock);
    return;
  }
  v68 = v9;
  v69 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v70 = v8 >> 4;
  v71 = v12;
  v66 = a4;
  do
  {
    if (!v18)
    {
      if (!v16)
        __assert_rtn("post_notification", "render-notification.cpp", 434, "0");
      if (v17)
        v24 = (uint64_t *)(v16 - 2);
      else
        v24 = 0;
      goto LABEL_24;
    }
    v24 = (uint64_t *)(v15 - 2);
    if (v17 && v15[2] >= v16[2])
    {
      v24 = (uint64_t *)(v16 - 2);
LABEL_24:
      v16 = (_UNKNOWN **)v16[1];
      goto LABEL_25;
    }
    v15 = (_UNKNOWN **)v15[1];
LABEL_25:
    v25 = v24[6];
    if (v25)
      v26 = v25 == a2;
    else
      v26 = 1;
    if (!v26)
      goto LABEL_94;
    v27 = (unsigned int *)(v24 + 9);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 + 1, v27));
    if (!v28)
    {
      v29 = v23;
      dispatch_semaphore_wait((dispatch_semaphore_t)v24[8], 0xFFFFFFFFFFFFFFFFLL);
      LODWORD(v23) = v29;
      v12 = v71;
    }
    if ((int)v23 >= (int)v70)
    {
      if (v21 >= v69)
      {
        v30 = (v21 - v20) >> 3;
        v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 61)
          abort();
        v32 = v69 - v20;
        if ((v69 - v20) >> 2 > v31)
          v31 = v32 >> 2;
        v33 = (unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v31;
        if (v33)
        {
          if (v33 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v34 = v23;
          v35 = (char *)operator new(8 * v33);
          v12 = v71;
          LODWORD(v23) = v34;
        }
        else
        {
          v35 = 0;
        }
        v36 = &v35[8 * v30];
        *(_QWORD *)v36 = v24;
        v37 = v36 + 8;
        while (v21 != v20)
        {
          v38 = *((_QWORD *)v21 - 1);
          v21 -= 8;
          *((_QWORD *)v36 - 1) = v38;
          v36 -= 8;
        }
        v69 = &v35[8 * v33];
        if (v20)
        {
          v39 = v20;
          v40 = v23;
          operator delete(v39);
          LODWORD(v23) = v40;
          v12 = v71;
        }
        v20 = v36;
        v21 = v37;
        a4 = v66;
        v14 = v67;
      }
      else
      {
        *(_QWORD *)v21 = v24;
        v21 += 8;
      }
    }
    else
    {
      MEMORY[0x1E0C80A78]();
      *(&v65 - 2) = (uint64_t)v24;
      *(&v65 - 1) = (uint64_t)v22;
      v22 = &v65 - 2;
    }
    v23 = (v23 + 1);
    if (*((_BYTE *)v24 + 76))
    {
      v41 = v24[6];
    }
    else
    {
LABEL_94:
      if (!a4)
        goto LABEL_63;
      v41 = a2;
      if (v24[6] != a2)
        goto LABEL_63;
    }
    *((_BYTE *)v24 + 77) = 1;
    v43 = *v24;
    v42 = (_QWORD *)v24[1];
    *(_QWORD *)(v43 + 8) = v42;
    *v42 = v43;
    *v24 = (uint64_t)v24;
    v24[1] = (uint64_t)v24;
    v44 = (_QWORD *)v24[3];
    v45 = v24[2];
    *(_QWORD *)(v45 + 8) = v44;
    *v44 = v45;
    v24[2] = (uint64_t)(v24 + 2);
    v24[3] = (uint64_t)(v24 + 2);
    if (v41)
    {
      v46 = v23;
      v47 = std::__hash_table<std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::__unordered_map_hasher<CA::Render::Object *,std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::hash<CA::Render::Object *>,std::equal_to<CA::Render::Object *>,true>,std::__unordered_map_equal<CA::Render::Object *,std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::equal_to<CA::Render::Object *>,std::hash<CA::Render::Object *>,true>,std::allocator<std::__hash_value_type<CA::Render::Object *,x_link_struct>>>::find<CA::Render::Object *>(v68, v24[6]);
      if (v47 && (_QWORD *)v47[4] == v47 + 3)
        std::__hash_table<std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::__unordered_map_hasher<CA::Render::Object *,std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::hash<CA::Render::Object *>,std::equal_to<CA::Render::Object *>,true>,std::__unordered_map_equal<CA::Render::Object *,std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::equal_to<CA::Render::Object *>,std::hash<CA::Render::Object *>,true>,std::allocator<std::__hash_value_type<CA::Render::Object *,x_link_struct>>>::erase(v68, v47);
      v12 = v71;
      v23 = v46;
    }
LABEL_63:
    v17 = v16 != v12;
    v18 = v15 != v14;
  }
  while (v15 != v14 || v16 != v12);
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::notification_lock);
  for (i = v65; v22; v22 = (uint64_t *)v22[1])
  {
    v49 = *v22;
    (*(void (**)(unint64_t, _QWORD, uint64_t))(*v22 + 40))(a2, *(_QWORD *)(*v22 + 56), i);
    v50 = *(unsigned __int8 *)(v49 + 77);
    v51 = (unsigned int *)(v49 + 72);
    do
    {
      v52 = __ldaxr(v51);
      v53 = v52 - 1;
    }
    while (__stlxr(v53, v51));
    if (!v53)
      dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v49 + 64));
    if (v50)
    {
      dispatch_release(*(dispatch_object_t *)(v49 + 64));
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(malloc_zone, (void *)v49);
    }
  }
  if (v20 != v21)
  {
    v55 = v20;
    do
    {
      v56 = *(_QWORD *)v55;
      (*(void (**)(unint64_t, _QWORD, uint64_t))(*(_QWORD *)v55 + 40))(a2, *(_QWORD *)(*(_QWORD *)v55 + 56), i);
      v57 = *(unsigned __int8 *)(v56 + 77);
      v58 = (unsigned int *)(v56 + 72);
      do
      {
        v59 = __ldaxr(v58);
        v60 = v59 - 1;
      }
      while (__stlxr(v60, v58));
      if (!v60)
        dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v56 + 64));
      if (v57)
      {
        dispatch_release(*(dispatch_object_t *)(v56 + 64));
        v61 = (malloc_zone_t *)get_malloc_zone();
        malloc_zone_free(v61, (void *)v56);
      }
      v55 += 8;
    }
    while (v55 != v21);
  }
  if (v20)
    operator delete(v20);
}

void CA::Render::Server::CmdStreamMsg::_send_reply(CA::Render::Server::CmdStreamMsg *this)
{
  uint64_t v1;
  uint64_t v3;
  BOOLean_t v4;
  mach_msg_return_t v5;
  mach_msg_header_t send_size;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 2);
  if (*(_DWORD *)(v1 + 8))
  {
    v7 = 0;
    v3 = *(_QWORD *)(v1 + 16);
    *(_OWORD *)&send_size.msgh_bits = *(_OWORD *)v1;
    *(_QWORD *)&send_size.msgh_voucher_port = v3;
    send_size.msgh_size = 28;
    send_size.msgh_local_port = 0;
    v4 = voucher_mach_msg_set(&send_size);
    v5 = mach_msg(&send_size, 1, send_size.msgh_size, 0, 0, 0, 0);
    if (v4)
      voucher_mach_msg_clear(&send_size);
    if ((v5 - 268435459) <= 1)
      mach_msg_destroy(&send_size);
    *(_DWORD *)(*((_QWORD *)this + 2) + 8) = 0;
  }
}

void CA::Render::Context::run_scheduled_handle_updates(CA::Render::Context *this)
{
  CA::Render::Handle **v2;
  CA::Render::Handle **v3;
  CA::Render::Object *v4;
  CA::Render::Context *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = (CA::Render::Handle **)*((_QWORD *)this + 49);
  v3 = (CA::Render::Handle **)*((_QWORD *)this + 50);
  if (v2 != v3)
  {
    do
    {
      v4 = *v2;
      v5 = (CA::Render::Context *)CA::Render::Handle::retain_context(*v2);
      if (v5)
      {
        v6 = (unint64_t)v5;
        CA::Render::Context::will_commit(v5);
        CA::Render::Handle::set_update_flags(v4, 4);
        CA::Render::Context::did_commit(v6, 1, 0, 1, 0, 0);
        v7 = (unsigned int *)(v6 + 8);
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
          (*(void (**)(unint64_t))(*(_QWORD *)v6 + 16))(v6);
      }
      v10 = (unsigned int *)((char *)v4 + 8);
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(CA::Render::Object *))(*(_QWORD *)v4 + 16))(v4);
      ++v2;
    }
    while (v2 != v3);
    v2 = (CA::Render::Handle **)*((_QWORD *)this + 49);
  }
  *((_QWORD *)this + 50) = v2;
}

uint64_t *std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__erase_unique<unsigned int>(_QWORD *a1, unsigned int a2)
{
  uint64_t *result;

  result = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(a1, a2);
  if (result)
    return (uint64_t *)std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::erase(a1, result);
  return result;
}

uint64_t std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void *__p[4];

  __p[3] = *(void **)MEMORY[0x1E0C80C00];
  v2 = *a2;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::remove((uint64_t)__p, a1, a2);
  if (__p[0])
    operator delete(__p[0]);
  return v2;
}

uint64_t std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::remove(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)a2[1];
  v4 = a3[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*a2 + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a3);
  if (v7 == a2 + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a3)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a3 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*a2 + 8 * v4) = 0;
  }
  v10 = *a3;
  if (*a3)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*a2 + 8 * v11) = v7;
      v10 = *a3;
    }
  }
  *v7 = v10;
  *a3 = 0;
  --a2[3];
  *(_QWORD *)result = a3;
  *(_QWORD *)(result + 8) = a2 + 2;
  *(_BYTE *)(result + 16) = 1;
  return result;
}

void CA::WindowServer::Server::get_active_display_count(CA::WindowServer::Server *this, CA::Render::Object *a2, _BYTE *a3, void *a4)
{
  char v6;

  if (!*((_BYTE *)a2 + 512)
    && (*(double (**)(_QWORD))(**((_QWORD **)a2 + 12) + 744))(*((_QWORD *)a2 + 12)) != 0.0)
  {
    ++*(_QWORD *)a3;
    v6 = a3[8];
    if (v6)
      v6 = fabs((*(double (**)(_QWORD))(**((_QWORD **)a2 + 12) + 744))(*((_QWORD *)a2 + 12)) + -0.00416666667) < 0.005;
    a3[8] = v6;
  }
}

double CA::WindowServer::IOMFBDisplay::refresh_rate(CA::WindowServer::IOMFBDisplay *this)
{
  double result;
  double v3;

  if (*((_BYTE *)this + 636) == 1 && *((_QWORD *)this + 80) == -1)
  {
    v3 = (double)(*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 768))(this);
    return (*(double (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 760))(this) * v3;
  }
  else
  {
    (*(void (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 736))(this);
  }
  return result;
}

uint64_t CA::WindowServer::AppleInternalDisplay::minimum_frame_duration(CA::WindowServer::AppleInternalDisplay *this)
{
  _DWORD *v2;
  unsigned int v3;
  unsigned int v4;
  char *v5;

  if ((*((_DWORD *)this + 156) & 0x10) == 0 || (*((_QWORD *)this + 80) & 0x8000000000000000) == 0)
    return (*(uint64_t (**)(CA::WindowServer::AppleInternalDisplay *))(*(_QWORD *)this + 776))(this);
  v2 = (_DWORD *)((char *)this + 27152);
  if (*((_DWORD *)this + 6788))
    v3 = 4;
  else
    v3 = 2;
  if (initialized[0] != -1)
  {
    v5 = (char *)this + 27152;
    v4 = v3;
    dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
    v3 = v4;
    v2 = v5;
  }
  if (v3 <= *(float *)&dword_1ECDC69E0)
    return *(float *)&dword_1ECDC69E0;
  if (*v2)
    return 4;
  return 2;
}

void CA::WindowServer::IOMFBDisplay::hardware_refresh_rate(CA::WindowServer::IOMFBDisplay *this)
{
  if (*((_BYTE *)this + 636) == 1 && *((_QWORD *)this + 80) == -1)
  {
    (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *, double))(*(_QWORD *)this + 776))(this, 0.0);
    (*(double (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 760))(this);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,CA::Render::Context *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,CA::Render::Context *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,CA::Render::Context *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,CA::Render::Context *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(float *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v33;

  v5 = a2;
  v6 = *((_QWORD *)a1 + 1);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = a2;
      if (v6 <= a2)
        v8 = a2 % v6;
    }
    else
    {
      v8 = ((_DWORD)v6 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v8);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v11 >= v6)
                v11 %= v6;
            }
            else
            {
              v11 &= v6 - 1;
            }
            if (v11 != v8)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    v8 = 0;
  }
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v5;
  *((_DWORD *)v10 + 4) = *a3;
  v10[3] = 0;
  v12 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v13 = a1[8];
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    v14 = 1;
    if (v6 >= 3)
      v14 = (v6 & (v6 - 1)) != 0;
    v15 = v14 | (2 * v6);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      prime = (int8x8_t)v16;
    else
      prime = (int8x8_t)v15;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v6 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v6)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v6)
    {
      v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v6 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (*(_QWORD *)&prime <= v24)
        prime = (int8x8_t)v24;
      if (*(_QWORD *)&prime >= v6)
      {
        v6 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v18 = operator new(8 * *(_QWORD *)&prime);
          v19 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v18;
          if (v19)
            operator delete(v19);
          v20 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v20++) = 0;
          while (*(_QWORD *)&prime != v20);
          v21 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v21)
          {
            v22 = v21[1];
            v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(_QWORD *)&prime)
                v22 %= *(_QWORD *)&prime;
            }
            else
            {
              v22 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = a1 + 4;
            v27 = (_QWORD *)*v21;
            if (*v21)
            {
              do
              {
                v28 = v27[1];
                if (v23.u32[0] > 1uLL)
                {
                  if (v28 >= *(_QWORD *)&prime)
                    v28 %= *(_QWORD *)&prime;
                }
                else
                {
                  v28 &= *(_QWORD *)&prime - 1;
                }
                if (v28 != v22)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v21;
                    goto LABEL_55;
                  }
                  *v21 = *v27;
                  *v27 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v28);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v28) = v27;
                  v27 = v21;
                }
                v28 = v22;
LABEL_55:
                v21 = v27;
                v27 = (_QWORD *)*v27;
                v22 = v28;
              }
              while (v27);
            }
          }
          v6 = (unint64_t)prime;
          goto LABEL_59;
        }
        v33 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v33)
          operator delete(v33);
        v6 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
        v8 = v5 % v6;
      else
        v8 = v5;
    }
    else
    {
      v8 = ((_DWORD)v6 - 1) & v5;
    }
  }
  v29 = *(_QWORD **)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
  if (v30)
  {
    *v10 = *v30;
LABEL_72:
    *v30 = v10;
    goto LABEL_73;
  }
  *v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v29[v8] = a1 + 4;
  if (*v10)
  {
    v31 = *(_QWORD *)(*v10 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v31 >= v6)
        v31 %= v6;
    }
    else
    {
      v31 &= v6 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

double CA::Render::Context::delay_of_batch(os_unfair_lock_s *this, unsigned int a2)
{
  os_unfair_lock_s *v4;
  double *v5;
  double i;
  uint64_t *v7;
  uint64_t v8;

  v4 = this + 170;
  os_unfair_lock_lock(this + 170);
  v5 = *(double **)&this[172]._os_unfair_lock_opaque;
  i = 0.0;
  if (v5)
  {
    v7 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(&this[174]._os_unfair_lock_opaque, a2);
    if (v7)
    {
      v8 = v7[3];
      for (i = *(double *)(v8 + 16); v5 != (double *)v8; v5 = *(double **)v5)
      {
        if (((_QWORD)v5[2] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000 && v5[2] > i)
          i = v5[2];
      }
    }
  }
  os_unfair_lock_unlock(v4);
  return i;
}

void std::__hash_table<std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::__unordered_map_hasher<CA::Render::Object *,std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::hash<CA::Render::Object *>,std::equal_to<CA::Render::Object *>,true>,std::__unordered_map_equal<CA::Render::Object *,std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::equal_to<CA::Render::Object *>,std::hash<CA::Render::Object *>,true>,std::allocator<std::__hash_value_type<CA::Render::Object *,x_link_struct>>>::erase(_QWORD *a1, _QWORD *__p)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  v3 = __p[1];
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    if (v3 >= *(_QWORD *)&v2)
      v3 %= *(_QWORD *)&v2;
  }
  else
  {
    v3 &= *(_QWORD *)&v2 - 1;
  }
  v5 = *(_QWORD **)(*a1 + 8 * v3);
  do
  {
    v6 = v5;
    v5 = (_QWORD *)*v5;
  }
  while (v5 != __p);
  if (v6 == a1 + 2)
    goto LABEL_18;
  v7 = v6[1];
  if (v4.u32[0] > 1uLL)
  {
    if (v7 >= *(_QWORD *)&v2)
      v7 %= *(_QWORD *)&v2;
  }
  else
  {
    v7 &= *(_QWORD *)&v2 - 1;
  }
  if (v7 != v3)
  {
LABEL_18:
    if (!*__p)
      goto LABEL_19;
    v8 = *(_QWORD *)(*__p + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v8 >= *(_QWORD *)&v2)
        v8 %= *(_QWORD *)&v2;
    }
    else
    {
      v8 &= *(_QWORD *)&v2 - 1;
    }
    if (v8 != v3)
LABEL_19:
      *(_QWORD *)(*a1 + 8 * v3) = 0;
  }
  v9 = *__p;
  if (*__p)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v10 >= *(_QWORD *)&v2)
        v10 %= *(_QWORD *)&v2;
    }
    else
    {
      v10 &= *(_QWORD *)&v2 - 1;
    }
    if (v10 != v3)
    {
      *(_QWORD *)(*a1 + 8 * v10) = v6;
      v9 = *__p;
    }
  }
  *v6 = v9;
  *__p = 0;
  --a1[3];
  operator delete(__p);
}

void CA::OGL::Context::image_deleted(CA::OGL::Context *this, CA::Render::Object *a2, void *a3, void *a4)
{
  os_unfair_lock_s *v6;
  uint64_t v7;
  CA::OGL::Context *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  malloc_zone_t *malloc_zone;
  _QWORD *v13;
  uint64_t v14;

  v6 = (os_unfair_lock_s *)((char *)a2 + 288);
  os_unfair_lock_lock((os_unfair_lock_t)a2 + 72);
  v7 = x_hash_table_remove(*((_QWORD *)a2 + 37), (uint64_t)this);
  if (v7)
    CA::OGL::Context::prepend_deleted_image(a2, v7);
  v8 = (CA::OGL::Context *)(*(uint64_t (**)(CA::OGL::Context *))(*(_QWORD *)this + 88))(this);
  if (v8 != this)
  {
    v9 = x_hash_table_lookup(*((_QWORD *)a2 + 37), (uint64_t)v8, 0);
    if (v9)
    {
      v10 = v9;
      if (!*(_BYTE *)(v9 + 61) && !*(_BYTE *)(v9 + 60))
      {
        v11 = *((_QWORD *)a2 + 39);
        malloc_zone = (malloc_zone_t *)get_malloc_zone();
        v13 = malloc_type_zone_malloc(malloc_zone, 0x10uLL, 0x8BB15036uLL);
        *v13 = v10;
        v13[1] = v11;
        *((_QWORD *)a2 + 39) = v13;
        *(_BYTE *)(v10 + 60) = 1;
      }
      v14 = *(_QWORD *)v10;
      if (*(_QWORD *)v10)
      {
        if (*(CA::Render::Object **)(v14 + 88) == a2)
          *(_QWORD *)(v14 + 88) = 0;
        *(_QWORD *)v10 = 0;
      }
    }
  }
  os_unfair_lock_unlock(v6);
}

uint64_t CA::OGL::Context::lookup_image_(CA::OGL::Context *this, CA::Render::Texture *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  unint64_t *v10;

  v6 = (*(uint64_t (**)(CA::Render::Texture *))(*(_QWORD *)a2 + 88))(a2);
  os_unfair_lock_lock((os_unfair_lock_t)this + 72);
  v7 = x_hash_table_lookup(*((_QWORD *)this + 37), v6, 0);
  if (v7)
    v8 = 1;
  else
    v8 = a3 == 0;
  if (!v8)
  {
    v7 = (*(uint64_t (**)(CA::OGL::Context *))(*(_QWORD *)this + 632))(this);
    hash_table_modify(*((int **)this + 37), v6, v7, 0);
  }
  if (v7)
  {
    v9 = *(_QWORD *)v7;
    if (*(_QWORD *)v7 && *(CA::OGL::Context **)(v9 + 88) == this)
      *(_QWORD *)(v9 + 88) = 0;
    *(_QWORD *)v7 = a2;
    *(_BYTE *)(v7 + 56) = *(_BYTE *)(v7 + 56) & 0xC0 | *((_BYTE *)a2 + 12) & 0x3F;
    v10 = (unint64_t *)((char *)a2 + 88);
    while (!__ldaxr(v10))
    {
      if (!__stlxr((unint64_t)this, v10))
      {
        *((_QWORD *)a2 + 10) = v7;
        goto LABEL_15;
      }
    }
    __clrex();
  }
LABEL_15:
  os_unfair_lock_unlock((os_unfair_lock_t)this + 72);
  return v7;
}

CA::Render::Image *CA::Render::Image::ogl_image_key(CA::Render::Image *this)
{
  CA::Render::Image *result;

  result = (CA::Render::Image *)*((_QWORD *)this + 15);
  if (!result || (*((_BYTE *)result + 13) & 8) == 0)
    return this;
  return result;
}

void CA::WindowServer::Server::get_display_info(CA::WindowServer::Server *this, CA::Render::Object *a2, char *a3, void *a4)
{
  float64x2_t *v4;
  pthread_mutex_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int i;
  uint64_t v13;
  PerModeInfo *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t *v25;
  uint64_t *v26;
  char *v27;
  uint64_t v28;
  NSObject *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  float v34;
  double v35;
  float v36;
  _QWORD *f64;
  float v38;
  float v39;
  float v40;
  int *v41;
  float v42;
  unint64_t v43;
  unint64_t v44;
  float64x2_t *v45;
  float v46;
  __int128 v47;
  float64_t v48;
  float64_t v49;
  PerModeInfo v50[4];
  _BYTE __p[48];
  _OWORD v52[2];
  __int128 v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v4 = (float64x2_t *)*((_QWORD *)a2 + 12);
  if (*((_DWORD *)a3 + 1) == LODWORD(v4[1].f64[1]))
  {
    v7 = (pthread_mutex_t *)&v4[35];
    pthread_mutex_lock((pthread_mutex_t *)&v4[35]);
    *a3 = 1;
    v8 = *((_QWORD *)a2 + 12);
    *((_QWORD *)a3 + 1) = *(_QWORD *)(v8 + 28);
    if (((*(uint64_t (**)(uint64_t, _QWORD, char *, uint64_t, _QWORD))(*(_QWORD *)v8 + 800))(v8, 0, a3 + 16, 64, 0) & 1) == 0)a3[16] = 0;
    if (((*(uint64_t (**)(_QWORD, uint64_t, char *, uint64_t, _QWORD))(**((_QWORD **)a2 + 12) + 800))(*((_QWORD *)a2 + 12), 1, a3 + 80, 64, 0) & 1) == 0)a3[80] = 0;
    if (((*(uint64_t (**)(_QWORD, uint64_t, char *, uint64_t, _QWORD))(**((_QWORD **)a2 + 12) + 800))(*((_QWORD *)a2 + 12), 2, a3 + 144, 256, 0) & 1) == 0)a3[144] = 0;
    v9 = *((_QWORD *)a2 + 12);
    if (*(_QWORD *)(v9 + 48) && (*(_BYTE *)(v9 + 56) & 1) != 0)
    {
      *((_DWORD *)a3 + 1214) = 0;
      *((_QWORD *)a3 + 562) = 0;
      *((_QWORD *)a3 + 564) = 0;
      *((_QWORD *)a3 + 563) = 0;
    }
    else
    {
      v53 = 0u;
      memset(__p, 0, 24);
      *(_OWORD *)&__p[32] = 0u;
      memset(v52, 0, sizeof(v52));
      *(_QWORD *)&__p[24] = &__p[32];
      LODWORD(v53) = 1065353216;
      os_unfair_lock_lock((os_unfair_lock_t)&v4[24].f64[1]);
      CA::WindowServer::Display::ModeSet::operator=((char **)__p, (char **)&v4[25]);
      v48 = v4[40].f64[1];
      v49 = v4[40].f64[0];
      os_unfair_lock_unlock((os_unfair_lock_t)&v4[24].f64[1]);
      v10 = (uint64_t)(*(_QWORD *)&__p[8] - *(_QWORD *)__p) >> 3;
      if (v10 >= 0x200)
        v10 = 512;
      *((_QWORD *)a3 + 562) = v10;
      *((_QWORD *)a3 + 580) = *((_QWORD *)a3 + 579);
      *((_DWORD *)a3 + 1214) = DWORD2(v53);
      if (v10)
      {
        v11 = 0;
        for (i = 0; i < v10; v11 = ++i)
        {
          v13 = *(_QWORD *)__p;
          if (v11 >= (uint64_t)(*(_QWORD *)&__p[8] - *(_QWORD *)__p) >> 3)
            abort();
          *(_QWORD *)&a3[8 * v11 + 400] = *(_QWORD *)(*(_QWORD *)__p + 8 * v11);
          if (*((_DWORD *)a3 + 1214))
          {
            *(_DWORD *)&v50[0].var2 = 0;
            *(_QWORD *)&v50[0].var0 = 0;
            CA::WindowServer::Display::ModeSet::get_per_mode_info((uint64_t)__p, *(_QWORD *)(v13 + 8 * v11), v50);
            v14 = (PerModeInfo *)*((_QWORD *)a3 + 580);
            v15 = *((_QWORD *)a3 + 579);
            v16 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v14 - v15) >> 2);
            v17 = *((_QWORD *)a3 + 582);
            if (v17 < v16 + 1)
            {
              v18 = *((_QWORD *)a3 + 581);
              v19 = (v17 + 1) | ((v17 + 1) >> 1) | (((v17 + 1) | ((v17 + 1) >> 1)) >> 2);
              v20 = v19 | (v19 >> 4) | ((v19 | (v19 >> 4)) >> 8);
              v21 = v20 | (v20 >> 16) | ((v20 | (v20 >> 16)) >> 32);
              if (v21 + 1 > v16 + 1)
                v22 = v21 + 1;
              else
                v22 = v16 + 1;
              v23 = (char *)malloc_type_malloc(12 * v22, 0x1000040CBA68D63uLL);
              v24 = v23;
              v25 = (uint64_t *)*((_QWORD *)a3 + 579);
              v26 = (uint64_t *)*((_QWORD *)a3 + 580);
              if (v25 != v26)
              {
                v27 = v23;
                do
                {
                  v28 = *v25;
                  *((_DWORD *)v27 + 2) = *((_DWORD *)v25 + 2);
                  *(_QWORD *)v27 = v28;
                  v27 += 12;
                  v25 = (uint64_t *)((char *)v25 + 12);
                }
                while (v25 != v26);
              }
              if (v15 != v18)
                free(*((void **)a3 + 579));
              *((_QWORD *)a3 + 579) = v24;
              v14 = (PerModeInfo *)&v24[12 * v16];
              *((_QWORD *)a3 + 580) = v14;
              *((_QWORD *)a3 + 582) = v22;
            }
            *v14 = v50[0];
            *((_QWORD *)a3 + 580) += 12;
            v10 = *((_QWORD *)a3 + 562);
          }
        }
      }
      *((float64_t *)a3 + 563) = v49;
      *((float64_t *)a3 + 564) = v48;
      std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)v52);
      std::__tree<std::tuple<unsigned short,unsigned short>>::destroy(*(_QWORD **)&__p[32]);
      if (*(_QWORD *)__p)
      {
        *(_QWORD *)&__p[8] = *(_QWORD *)__p;
        operator delete(*(void **)__p);
      }
      v7 = (pthread_mutex_t *)&v4[35];
      if (*((_DWORD *)a3 + 1214)
        && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a3 + 580) - *((_QWORD *)a3 + 579)) >> 2) != *((_QWORD *)a3 + 562))
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v29 = x_log_category_windowserver;
          if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
          {
            v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a3 + 580) - *((_QWORD *)a3 + 579)) >> 2);
            v31 = *((_QWORD *)a3 + 562);
            *(_DWORD *)__p = 134218240;
            *(_QWORD *)&__p[4] = v30;
            *(_WORD *)&__p[12] = 2048;
            *(_QWORD *)&__p[14] = v31;
            _os_log_impl(&dword_184457000, v29, OS_LOG_TYPE_DEFAULT, "Per Mode Size: %zu != Available Modes Count: %zu", __p, 0x16u);
          }
        }
        *((_DWORD *)a3 + 1214) = 0;
        *((_QWORD *)a3 + 580) = *((_QWORD *)a3 + 579);
      }
    }
    *((_DWORD *)a3 + 1130) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 12) + 1384))(*((_QWORD *)a2 + 12));
    *((double *)a3 + 566) = (*(double (**)(CA::Render::Object *))(*(_QWORD *)a2 + 168))(a2);
    v32 = *((_QWORD *)a2 + 12);
    *(_OWORD *)(a3 + 4536) = *(_OWORD *)(v32 + 168);
    *(_OWORD *)(a3 + 4552) = *(_OWORD *)(v32 + 152);
    *((_DWORD *)a3 + 1142) = *(_DWORD *)(v32 + 624);
    *((_DWORD *)a3 + 1143) = *(_DWORD *)(v32 + 628);
    *((_DWORD *)a3 + 1144) = *(_DWORD *)(v32 + 632);
    *(_QWORD *)(a3 + 4580) = *(_QWORD *)(v32 + 60);
    v33 = (_BYTE *)*((_QWORD *)a2 + 12);
    *((_DWORD *)a3 + 1147) = v33[657] & 3;
    v34 = (*(double (**)(_BYTE *))(*(_QWORD *)v33 + 16))(v33);
    *((float *)a3 + 1153) = v34;
    v36 = v35;
    *((float *)a3 + 1154) = v36;
    if (((LOWORD(v4[41].f64[0]) >> 10) & 3 | 4) == 4)
    {
      f64 = (_QWORD *)&v4[5].f64[1];
    }
    else
    {
      f64 = (_QWORD *)v4[5].f64;
      if (!LODWORD(v4[5].f64[0]) || !HIDWORD(v4[5].f64[0]))
        f64 = (_QWORD *)&v4[4].f64[1];
    }
    *(_QWORD *)(a3 + 4620) = *f64;
    *((double *)a3 + 608) = (*(double (**)(float64x2_t *))(*(_QWORD *)&v4->f64[0] + 744))(v4);
    *((double *)a3 + 609) = (*(double (**)(float64x2_t *))(*(_QWORD *)&v4->f64[0] + 736))(v4);
    *((double *)a3 + 610) = (*(double (**)(float64x2_t *))(*(_QWORD *)&v4->f64[0] + 760))(v4);
    *((_DWORD *)a3 + 1222) = (*(uint64_t (**)(float64x2_t *))(*(_QWORD *)&v4->f64[0] + 768))(v4);
    *((_DWORD *)a3 + 1223) = (*(uint64_t (**)(float64x2_t *))(*(_QWORD *)&v4->f64[0] + 784))(v4);
    a3[4896] = (*(uint64_t (**)(float64x2_t *))(*(_QWORD *)&v4->f64[0] + 272))(v4);
    *((_DWORD *)a3 + 1225) = (*(uint64_t (**)(float64x2_t *))(*(_QWORD *)&v4->f64[0] + 840))(v4);
    *((_DWORD *)a3 + 1226) = LOBYTE(v4[41].f64[0]);
    *((_QWORD *)a3 + 614) = (*(uint64_t (**)(float64x2_t *))(*(_QWORD *)&v4->f64[0] + 120))(v4);
    *((_DWORD *)a3 + 1230) = (*(uint64_t (**)(float64x2_t *))(*(_QWORD *)&v4->f64[0] + 1504))(v4);
    *((float32x2_t *)a3 + 574) = vcvt_f32_f64(v4[8]);
    v38 = 1.0 / (*(double (**)(float64x2_t *))(*(_QWORD *)&v4->f64[0] + 32))(v4);
    *((float *)a3 + 1150) = v38;
    v39 = 1.0 / (*(double (**)(float64x2_t *))(*(_QWORD *)&v4->f64[0] + 24))(v4);
    *((float *)a3 + 1151) = v39;
    if ((BYTE2(v4[46].f64[1]) & 0x10) != 0)
    {
      v40 = (float)(unint64_t)(*(uint64_t (**)(float64x2_t *))(*(_QWORD *)&v4->f64[0] + 64))(v4);
      if (((LOWORD(v4[41].f64[0]) >> 10) & 3 | 4) == 4)
      {
        v41 = (int *)&v4[5].f64[1];
      }
      else
      {
        v41 = (int *)&v4[5];
        if (!LODWORD(v4[5].f64[0]) || !HIDWORD(v4[5].f64[0]))
          v41 = (int *)&v4[4].f64[1];
      }
      v42 = v40 / (float)*v41;
      v43 = (*(uint64_t (**)(float64x2_t *))(*(_QWORD *)&v4->f64[0] + 72))(v4);
      v44 = (*(uint64_t (**)(float64x2_t *))(*(_QWORD *)&v4->f64[0] + 64))(v4);
      if (((LOWORD(v4[41].f64[0]) >> 10) & 3 | 4) == 4)
      {
        v45 = (float64x2_t *)((char *)v4 + 88);
      }
      else
      {
        v45 = v4 + 5;
        if (!LODWORD(v4[5].f64[0]) || !HIDWORD(v4[5].f64[0]))
          v45 = (float64x2_t *)((char *)v4 + 72);
      }
      v46 = (float)(v43 / v44) / (float)SHIDWORD(v45->f64[0]);
      if (v46 >= v42)
        v46 = v42;
      if (v46 >= *((float *)a3 + 1151))
        v46 = *((float *)a3 + 1151);
      *((float *)a3 + 1151) = v46;
    }
    *((_DWORD *)a3 + 1152) = HIDWORD(v4[9].f64[0]);
    memset(__p, 0, 44);
    (*(void (**)(_BYTE *__return_ptr, float64x2_t *))(*(_QWORD *)&v4->f64[0] + 1360))(__p, v4);
    *(_OWORD *)(a3 + 4924) = *(_OWORD *)__p;
    *((_DWORD *)a3 + 1235) = *(_DWORD *)&__p[16];
    *((_DWORD *)a3 + 1236) = __p[20];
    *((_DWORD *)a3 + 1237) = *(_DWORD *)((_BYTE *)&v4[46].f64[1] + 1) & 1;
    *((_DWORD *)a3 + 1238) = LOWORD(v4[41].f64[0]) >> 13;
    *((_DWORD *)a3 + 1239) = (*(uint64_t (**)(float64x2_t *))(*(_QWORD *)&v4->f64[0] + 816))(v4);
    *((_DWORD *)a3 + 1240) = (LOWORD(v4[41].f64[0]) >> 10) & 7;
    *(_QWORD *)&v47 = vrev64q_s32(*(int32x4_t *)&__p[24]).u64[0];
    *((_QWORD *)&v47 + 1) = *(_QWORD *)&__p[32];
    *(_OWORD *)(a3 + 4964) = v47;
    *((_DWORD *)a3 + 1245) = *(_DWORD *)&__p[40];
    a3[4984] = (*(uint64_t (**)(float64x2_t *))(*(_QWORD *)&v4->f64[0] + 128))(v4);
    memset(v50, 0, 40);
    (*(void (**)(PerModeInfo *__return_ptr, float64x2_t *))(*(_QWORD *)&v4->f64[0] + 1368))(v50, v4);
    *(_WORD *)(a3 + 4985) = v50[0].var0;
    *((_OWORD *)a3 + 312) = *(_OWORD *)&v50[0].var2;
    *((_OWORD *)a3 + 313) = *(_OWORD *)&v50[2].var0;
    a3[5024] = (*(uint64_t (**)(float64x2_t *))(*(_QWORD *)&v4->f64[0] + 288))(v4);
    pthread_mutex_unlock(v7);
  }
}

uint64_t CA::WindowServer::IOMFBDisplay::display_timings_shmem(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  uint64_t v3;

  v2 = this + 6504;
  os_unfair_lock_lock(this + 6504);
  CA::WindowServer::IOMFBDisplay::initialize_timings((CA::WindowServer::IOMFBDisplay *)this);
  v3 = *(_QWORD *)&this[6506]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v2);
  return v3;
}

void CA::WindowServer::Server::get_displays(CA::WindowServer::Server *this, CA::Render::Object *a2, CFMutableArrayRef *a3, void *a4)
{
  uint64_t v5;
  void *v6;
  int *v7;
  void *v8;
  CFDictionaryRef v9;
  int valuePtr;
  void *values[2];
  CFTypeRef cf;
  CFTypeRef v13;
  CFTypeRef v14;
  CFTypeRef v15;
  CFTypeRef v16;
  CFTypeRef v17;
  void *keys[9];

  keys[8] = *(void **)MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)a2 + 12);
  v6 = (void *)*((_QWORD *)a2 + 13);
  v7 = (int *)(v5 + 25336);
  keys[0] = CFSTR("kCADisplayName");
  keys[1] = CFSTR("kCADisplayDeviceName");
  keys[2] = CFSTR("kCADisplayId");
  keys[3] = CFSTR("kCADisplayFrameCount");
  keys[4] = CFSTR("kCADisplaySkippedFrameCount");
  keys[5] = CFSTR("kCADisplayClonedFrameCount");
  keys[6] = CFSTR("kCADisplaySkippedClonedFrameCount");
  keys[7] = CFSTR("kCADisplayDirtyFrameCount");
  v8 = *(void **)(v5 + 8);
  values[0] = v6;
  values[1] = v8;
  valuePtr = *(_DWORD *)(v5 + 24);
  cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  valuePtr = *v7;
  v13 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  valuePtr = v7[1];
  v14 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  valuePtr = v7[2];
  v15 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  valuePtr = v7[3];
  v16 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  valuePtr = v7[4];
  v17 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  v9 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 8, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFArrayAppendValue(*a3, v9);
  CFRelease(v9);
  CFRelease(cf);
  CFRelease(v13);
  CFRelease(v14);
  CFRelease(v15);
  CFRelease(v16);
  CFRelease(v17);
}

uint64_t CA::WindowServer::IOMFBDisplay::copy_string(uint64_t a1, int a2, char *a3, size_t a4)
{
  os_unfair_lock_s *v8;
  const char *v9;
  uint64_t v10;

  v8 = (os_unfair_lock_s *)(a1 + 27012);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 27012));
  if (a2 == 2)
  {
    v9 = *(const char **)(a1 + 27048);
    if (!v9)
      goto LABEL_10;
  }
  else if (a2 == 1)
  {
    v9 = *(const char **)(a1 + 27032);
    if (!v9)
      goto LABEL_10;
  }
  else
  {
    if (a2)
      goto LABEL_10;
    v9 = *(const char **)(a1 + 27016);
    if (!v9)
      goto LABEL_10;
  }
  if (strlen(v9) + 1 <= a4)
  {
    strcpy(a3, v9);
    v10 = 1;
    goto LABEL_12;
  }
LABEL_10:
  v10 = 0;
LABEL_12:
  os_unfair_lock_unlock(v8);
  return v10;
}

uint64_t CA::WindowServer::AppleDisplay::max_src_rect_width(CA::WindowServer::AppleDisplay *this)
{
  return (*(uint64_t (**)(CA::WindowServer::AppleDisplay *, _QWORD))(*(_QWORD *)this + 2248))(this, 0);
}

unint64_t CA::WindowServer::Server::context_created(unint64_t this, CA::Render::Object *a2, void *a3, void *a4)
{
  unint64_t v5;
  const __CFDictionary *v6;
  const void *Value;
  const __CFDictionary *v8;
  const void *v9;
  const void *v10;
  uint64_t v11;
  float v12;
  unint64_t v13;
  float *v14;
  uint64_t v15;
  int64x2_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)(this + 12) & 0x4200) != 0x4000)
    return this;
  v5 = this;
  v6 = *(const __CFDictionary **)(this + 32);
  if (v6)
  {
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(this + 32), CFSTR("displayId"));
    if (Value)
    {
      this = CA_CFIntValue(Value);
      if ((_DWORD)this)
      {
        if (*(_DWORD *)(*((_QWORD *)a2 + 12) + 24) != (_DWORD)this)
          return this;
        goto LABEL_11;
      }
    }
    this = (unint64_t)CFDictionaryGetValue(v6, CFSTR("displayName"));
    if (this)
    {
      this = CFEqual((CFTypeRef)this, *((CFTypeRef *)a2 + 13));
      if (!(_DWORD)this)
        return this;
      goto LABEL_11;
    }
  }
  if ((*(_BYTE *)(*((_QWORD *)a2 + 12) + 745) & 0x20) == 0)
    return this;
LABEL_11:
  v8 = *(const __CFDictionary **)(v5 + 32);
  if (v8)
  {
    v9 = CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 32), CFSTR("definesDisplayBounds"));
    if (v9 && CA_CFBoolValue(v9))
      *(_DWORD *)(v5 + 12) |= 0x8000u;
    v10 = CFDictionaryGetValue(v8, CFSTR("displayFilter"));
    if (v10)
    {
      if (CFEqual(v10, CFSTR("nearest")))
        *(_DWORD *)(v5 + 12) |= 0x10000u;
    }
  }
  *(_DWORD *)(v5 + 12) |= 0x200u;
  CA::Render::Context::set_display_id((CA::Render::Context *)v5, *(_DWORD *)(*((_QWORD *)a2 + 12) + 24));
  CA::Render::add_observer(2u, v5, (uint64_t)CA::WindowServer::Server::context_deleted, (uint64_t)a2, 1);
  CA::Render::add_observer(0, v5, (uint64_t)CA::WindowServer::Server::context_changed, (uint64_t)a2, 0);
  CA::Render::add_observer(8u, v5, (uint64_t)CA::WindowServer::Server::context_ordered, (uint64_t)a2, 0);
  CA::WindowServer::Server::invalidate_context((os_unfair_lock_s *)a2, (CA::Render::Context *)v5);
  os_unfair_lock_lock((os_unfair_lock_t)a2 + 4);
  v11 = *((_QWORD *)a2 + 16);
  v12 = *(float *)(v5 + 192);
  v13 = 0;
  if (v11)
  {
    v14 = (float *)(*((_QWORD *)a2 + 14) + 8);
    while (*v14 <= v12)
    {
      ++v13;
      v14 += 4;
      if (v11 == v13)
      {
        v13 = *((_QWORD *)a2 + 16);
        break;
      }
    }
  }
  CA::WindowServer::Server::context_insert(a2, v13, (CA::Render::Context *)v5, v12);
  os_unfair_lock_unlock((os_unfair_lock_t)a2 + 4);
  v15 = 0;
  v16 = vdupq_n_s64(4uLL);
  return (*(uint64_t (**)(CA::Render::Object *, uint64_t *, double))(*(_QWORD *)a2 + 184))(a2, &v15, 0.0);
}

uint64_t CA::WindowServer::Display::minimum_frame_duration(CA::WindowServer::Display *this)
{
  return 1;
}

void CA::Render::ShadowCache::path_deleted(CA::Render::ShadowCache *this, os_unfair_lock_s *a2, void *a3, void *a4)
{
  os_unfair_lock_s *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v6 = a2 + 6;
  os_unfair_lock_lock(a2 + 6);
  v7 = x_hash_table_remove(*(_QWORD *)&a2->_os_unfair_lock_opaque, (uint64_t)this);
  if (v7)
  {
    v8 = (_QWORD *)v7;
    do
    {
      v9 = v8;
      v8 = (_QWORD *)*v8;
    }
    while (v8);
    *v9 = *(_QWORD *)&a2[4]._os_unfair_lock_opaque;
    *(_QWORD *)&a2[4]._os_unfair_lock_opaque = v7;
  }
  os_unfair_lock_unlock(v6);
}

uint64_t CA::Render::Fence::is_batch_resolved(unsigned int a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t result;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)a2, a1, a1);
  if (!std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((_QWORD *)CA::Render::Fence::cleared_b_ports, a1))
  {
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)a4, a1, a1);
    return 0;
  }
  v8 = *(_QWORD **)(CA::Render::Fence::bcontexts_by_id + 16);
  if (!v8)
    return 1;
  while (1)
  {
    v9 = *(_QWORD **)(v8[3] + 8);
    v10 = v9[1];
    if (v10 != *v9)
      break;
LABEL_16:
    v8 = (_QWORD *)*v8;
    result = 1;
    if (!v8)
      return result;
  }
  v11 = 0;
  while (1)
  {
    v17 = 0;
    v10 -= 40;
    v15 = 0u;
    v16 = 0u;
    std::unordered_set<unsigned int>::unordered_set((uint64_t)&v15, v10);
    if ((v11 & 1) == 0
      && !std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(&v15, a1))
    {
      v11 = 0;
      goto LABEL_15;
    }
    v12 = (uint64_t *)v16;
    if ((_QWORD)v16)
      break;
LABEL_13:
    v11 = 1;
LABEL_15:
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)&v15);
    if (v10 == *v9)
      goto LABEL_16;
  }
  while (1)
  {
    v13 = *((unsigned int *)v12 + 4);
    if (!std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(a2, *((_DWORD *)v12 + 4))&& !std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(a3, v13)&& (std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(a4, v13)|| !CA::Render::Fence::is_batch_resolved(v13, a2, a3, a4)))
    {
      break;
    }
    v12 = (uint64_t *)*v12;
    if (!v12)
      goto LABEL_13;
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)a4, a1, a1);
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)&v15);
  return 0;
}

uint64_t CA::WindowServer::Display::heartbeat_rate(CA::WindowServer::Display *this)
{
  return (*(uint64_t (**)(CA::WindowServer::Display *))(*(_QWORD *)this + 744))(this);
}

uint64_t CA::Render::Surface::ogl_image_key(uint64_t this)
{
  if (*(_QWORD *)(this + 96))
    return *(_QWORD *)(this + 96);
  return this;
}

__n128 CA::WindowServer::IOMFBDisplay::edid_attributes@<Q0>(CA::WindowServer::IOMFBDisplay *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result;

  *(_OWORD *)a2 = *(_OWORD *)((char *)this + 26284);
  *(_DWORD *)(a2 + 16) = *((_DWORD *)this + 6575);
  *(_BYTE *)(a2 + 20) = *((_BYTE *)this + 26304);
  result = *(__n128 *)((char *)this + 26308);
  *(__n128 *)(a2 + 24) = result;
  *(_DWORD *)(a2 + 40) = *((_DWORD *)this + 6581);
  return result;
}

double CA::WindowServer::IOMFBDisplay::panel_physical_size(CA::WindowServer::IOMFBDisplay *this)
{
  return *((double *)this + 3264);
}

__n128 CA::WindowServer::IOMFBDisplay::preset_properties@<Q0>(CA::WindowServer::IOMFBDisplay *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)(a2 + 32) = *((_QWORD *)this + 3295);
  result = *(__n128 *)((char *)this + 26328);
  v3 = *(_OWORD *)((char *)this + 26344);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t CA::WindowServer::IOMFBDisplay::transport_type(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned int *)this + 6592);
}

uint64_t CA::WindowServer::IOMFBDisplay::od_lut_version(CA::WindowServer::IOMFBDisplay *this)
{
  CA::WindowServer::IOMFBDisplay *v2;

  if (*((_BYTE *)this + 28052) || (*((_WORD *)this + 328) & 0x1C00) == 0x1000)
    return 0;
  if (CADeviceNeedsDisplayWorkarounds::once[0] != -1)
  {
    v2 = this;
    dispatch_once(CADeviceNeedsDisplayWorkarounds::once, &__block_literal_global_52_9800);
    this = v2;
  }
  if (!CADeviceNeedsDisplayWorkarounds::needs_workarounds)
    return 0;
  else
    return CA::WindowServer::IOMFBDisplay::od_lut_version(void)const::radar_numbers[(*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1064))(this)];
}

uint64_t CA::WindowServer::IOMFBDisplay::dmrr_enabled(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned __int8 *)this + 28130);
}

double CA::WindowServer::AppleDisplay::min_scale(CA::WindowServer::AppleDisplay *this)
{
  return *((double *)this + 3547);
}

double CA::WindowServer::AppleDisplay::max_scale(CA::WindowServer::AppleDisplay *this)
{
  return *((double *)this + 3548);
}

uint64_t CA::WindowServer::AppleDisplay::max_src_rect_pixels(CA::WindowServer::AppleDisplay *this)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(CA::WindowServer::AppleDisplay *, _QWORD))(*(_QWORD *)this + 2248))(this, 0);
  return (*(uint64_t (**)(CA::WindowServer::AppleDisplay *, _QWORD))(*(_QWORD *)this + 2256))(this, 0)
       * v2;
}

uint64_t CA::WindowServer::IOMFBDisplay::preferred_ui_scale(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned int *)this + 6610);
}

double CA::WindowServer::IOMFBServer::latency(CA::WindowServer::IOMFBServer *this)
{
  return *(double *)(*((_QWORD *)this + 12) + 27096);
}

uint64_t CA::WindowServer::Display::uses_extended_display_timings(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::Display::preferred_frame_duration(CA::WindowServer::Display *this)
{
  return (*(uint64_t (**)(CA::WindowServer::Display *))(*(_QWORD *)this + 768))(this);
}

uint64_t CA::WindowServer::Display::native_orientation(CA::WindowServer::Display *this)
{
  return 0;
}

uint64_t CA::WindowServer::IOMFBServer::post_render_statistics_power_log(CA::WindowServer::IOMFBServer *this, CA::Render::Object *a2, void *a3, void *a4)
{
  pthread_mutex_t *v5;
  uint64_t v6;
  _OWORD *v7;
  const CFDictionaryKeyCallBacks *v8;
  const CFDictionaryValueCallBacks *v9;
  __CFDictionary *Mutable;
  __CFDictionary *v11;
  __CFDictionary *v12;
  __CFArray *v13;
  uint64_t i;
  _OWORD *v15;
  __CFArray *v16;
  uint64_t j;
  uint64_t v18;
  _OWORD *v19;
  int v20;
  CFStringRef v21;
  CFStringRef v22;
  _BYTE *v24;
  os_unfair_lock_s *lock;
  pthread_mutex_t *v26;

  v5 = (pthread_mutex_t *)((char *)a2 + 544);
  pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 544));
  v6 = *((_QWORD *)a2 + 12);
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 27504));
  if (*(_BYTE *)(v6 + 27508))
  {
    v24 = (_BYTE *)(v6 + 27508);
    lock = (os_unfair_lock_s *)(v6 + 27504);
    v26 = v5;
    v7 = (_OWORD *)(v6 + 27512);
    v8 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
    v9 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v11 = CFDictionaryCreateMutable(0, 0, v8, v9);
    v12 = CFDictionaryCreateMutable(0, 0, v8, v9);
    CA_CFDictionarySetInt(Mutable, CFSTR("bucket_size"), 10);
    CA_CFDictionarySetInt(Mutable, CFSTR("bucket_count"), 10);
    v13 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    for (i = 0; i != 40; i += 4)
      CA_CFArrayAppendInt(v13, *(_DWORD *)((char *)v7 + i));
    v15 = (_OWORD *)(v6 + 27552);
    CFDictionarySetValue(Mutable, CFSTR("data"), v13);
    *(_QWORD *)(v6 + 27544) = 0;
    *v7 = 0u;
    *(_OWORD *)(v6 + 27528) = 0u;
    CA_CFDictionarySetInt(v11, CFSTR("bucket_size"), 200);
    CA_CFDictionarySetInt(v11, CFSTR("bucket_count"), 10);
    v16 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    for (j = 0; j != 40; j += 4)
      CA_CFArrayAppendInt(v16, *(_DWORD *)((char *)v15 + j));
    CFDictionarySetValue(v11, CFSTR("data"), v16);
    v18 = 0;
    *(_QWORD *)(v6 + 27584) = 0;
    *v15 = 0u;
    *(_OWORD *)(v6 + 27568) = 0u;
    v19 = (_OWORD *)(v6 + 27592);
    do
    {
      v20 = *((_DWORD *)v19 + v18);
      if (v20 >= 1)
      {
        v21 = CFStringCreateWithCString(0, *((const char **)&CA::WindowServer::IOMFBDisplay::offscreen_reason_string + v18), 0x8000100u);
        if (v21)
        {
          v22 = v21;
          CA_CFDictionarySetInt(v12, v21, v20);
          CFRelease(v22);
        }
      }
      ++v18;
    }
    while (v18 != 12);
    v19[1] = 0u;
    v19[2] = 0u;
    *v19 = 0u;
    *v24 = 0;
    if (v16)
      CFRelease(v16);
    v5 = v26;
    if (v13)
      CFRelease(v13);
    os_unfair_lock_unlock(lock);
    if (CA::WindowServer::IOMFBDisplay::post_render_statistics_power_log(void)::once[0] != -1)
      dispatch_once(CA::WindowServer::IOMFBDisplay::post_render_statistics_power_log(void)::once, &__block_literal_global_343);
    if (CA::WindowServer::IOMFBDisplay::post_render_statistics_power_log(void)::render_pass_id)
      pps_send_telemetry();
    if (CA::WindowServer::IOMFBDisplay::post_render_statistics_power_log(void)::layer_count_id)
      pps_send_telemetry();
    if (CA::WindowServer::IOMFBDisplay::post_render_statistics_power_log(void)::offscreen_reasons_id)
      pps_send_telemetry();
    if (v12)
      CFRelease(v12);
    if (v11)
      CFRelease(v11);
    if (Mutable)
      CFRelease(Mutable);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 27504));
  }
  return pthread_mutex_unlock(v5);
}

void CA::WindowServer::IOMFBServer::check_display_blanked(CA::WindowServer::IOMFBServer *this, CA::Render::Object *a2, _BYTE *a3, void *a4)
{
  uint64_t v4;

  v4 = *((_QWORD *)a2 + 12);
  if (!*(_BYTE *)(v4 + 28052) && (*(_WORD *)(v4 + 656) & 0x1C00) != 0x1000 && *(_DWORD *)a3 == *(_DWORD *)(v4 + 24))
    a3[4] = *(_BYTE *)(*(_QWORD *)(v4 + 728) + 1) != 1;
}

void CA::WindowServer::IOMFBServer::register_frame_interval_reasons(CA::WindowServer::IOMFBServer *this, CA::Render::Object *a2, _DWORD *a3, void *a4)
{
  uint64_t v4;
  int v6;
  uint64_t v7;
  int *v8;
  unint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  unint64_t v20;
  _DWORD *v21;
  NSObject *v22;
  _DWORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  _DWORD *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int *i;
  uint64_t j;
  _BYTE *v46;
  void *v47;
  NSObject *v48;
  uint8_t buf[8];
  uint64_t v50;
  uint64_t v51;
  uint8_t v52[4];
  void *v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a2 + 12);
  if ((*(_DWORD *)(v4 + 624) & 0x100) != 0)
  {
    v6 = a3[1];
    if ((!v6 || *(_DWORD *)(v4 + 24) == v6) && (*(_WORD *)(v4 + 656) & 0x1C00) == 0)
    {
      v7 = a3[2];
      v8 = (int *)*((_QWORD *)a3 + 2);
      v9 = *((_QWORD *)a3 + 3);
      v10 = (os_unfair_lock_s *)(v4 + 27408);
      os_unfair_lock_lock((os_unfair_lock_t)(v4 + 27408));
      v17 = *(_DWORD **)(v4 + 27416);
      v18 = *(_DWORD **)(v4 + 27424);
      v19 = v17;
      if (v17 != v18)
      {
        while (*v19 != (_DWORD)v7)
        {
          v19 += 7;
          if (v19 == v18)
            goto LABEL_10;
        }
      }
      if (v19 == v18)
      {
LABEL_10:
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v18 - v17)) >= 0x40)
        {
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v22 = x_log_category_frame_rate;
            if (os_log_type_enabled((os_log_t)x_log_category_frame_rate, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_184457000, v22, OS_LOG_TYPE_DEFAULT, "CAFrameRateServer too many reasons.", buf, 2u);
            }
          }
          goto LABEL_48;
        }
        if (!v9)
        {
LABEL_48:
          os_unfair_lock_unlock(v10);
          *(_BYTE *)a3 = 1;
          return;
        }
        if ((_DWORD)v7)
        {
          os_unfair_lock_lock((os_unfair_lock_t)(v4 + 27356));
          -[CAProcessMonitor addMonitoringProcess:](CA::WindowServer::IOMFBDisplay::process_monitor((CA::WindowServer::IOMFBDisplay *)v4), "addMonitoringProcess:", v7);
          os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 27356));
          v18 = *(_DWORD **)(v4 + 27424);
        }
        v20 = *(_QWORD *)(v4 + 27432);
        if ((unint64_t)v18 >= v20)
        {
          v23 = *(_DWORD **)(v4 + 27416);
          v24 = 0x6DB6DB6DB6DB6DB7 * (v18 - v23) + 1;
          if (v24 > 0x924924924924924)
            abort();
          v25 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v20 - (_QWORD)v23) >> 2);
          if (2 * v25 > v24)
            v24 = 2 * v25;
          if (v25 >= 0x492492492492492)
            v26 = 0x924924924924924;
          else
            v26 = v24;
          if (v26)
          {
            if (v26 > 0x924924924924924)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v27 = (char *)operator new(28 * v26);
          }
          else
          {
            v27 = 0;
          }
          v28 = &v27[4 * (v18 - v23)];
          *(_DWORD *)v28 = v7;
          *(_QWORD *)(v28 + 4) = 0;
          v21 = v28 + 28;
          *(_QWORD *)(v28 + 20) = 0;
          *(_QWORD *)(v28 + 12) = 0;
          if (v18 != v23)
          {
            do
            {
              v29 = *(_OWORD *)(v18 - 7);
              *((_OWORD *)v28 - 1) = *((_OWORD *)v18 - 1);
              *(_OWORD *)(v28 - 28) = v29;
              v28 -= 28;
              v18 -= 7;
            }
            while (v18 != v23);
            v18 = *(_DWORD **)(v4 + 27416);
          }
          *(_QWORD *)(v4 + 27416) = v28;
          *(_QWORD *)(v4 + 27424) = v21;
          *(_QWORD *)(v4 + 27432) = &v27[28 * v26];
          if (v18)
            operator delete(v18);
        }
        else
        {
          *v18 = v7;
          v21 = v18 + 7;
          *(_QWORD *)(v18 + 1) = 0;
          *(_QWORD *)(v18 + 5) = 0;
          *(_QWORD *)(v18 + 3) = 0;
        }
        *(_QWORD *)(v4 + 27424) = v21;
        v19 = v21 - 7;
      }
      if (v9 && *v8)
      {
        v30 = 0;
        *((_QWORD *)v19 + 1) = 0;
        *((_QWORD *)v19 + 2) = 0;
        v31 = 4;
        if (v9 < 4)
          v31 = v9;
        do
        {
          v33 = *v8++;
          v32 = v33;
          if (v33)
          {
            v34 = &v19[v30++];
            v34[2] = v32;
          }
          --v31;
        }
        while (v31);
      }
      else
      {
        os_unfair_lock_lock((os_unfair_lock_t)(v4 + 27356));
        v35 = *(char **)(v4 + 27424);
        v36 = v35 - (char *)(v19 + 7);
        if (v35 != (char *)(v19 + 7))
          memmove(v19, v19 + 7, v35 - (char *)(v19 + 7));
        *(_QWORD *)(v4 + 27424) = (char *)v19 + v36;
        os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 27356));
      }
      if (byte_1ECDC6AC5)
      {
        *(_QWORD *)buf = 0;
        v50 = 0;
        v51 = 0;
        x_stream_printf((uint64_t)buf, "  Reasons: %ld", v11, v12, v13, v14, v15, v16, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v4 + 27424) - *(_QWORD *)(v4 + 27416)) >> 2));
        v43 = *(unsigned int **)(v4 + 27416);
        for (i = *(unsigned int **)(v4 + 27424); v43 != i; v43 += 7)
        {
          x_stream_printf((uint64_t)buf, "    %d: ", v37, v38, v39, v40, v41, v42, *v43);
          for (j = 2; j != 6; ++j)
            x_stream_printf((uint64_t)buf, "%u %u, ", v37, v38, v39, v40, v41, v42, HIWORD(v43[j]));
        }
        v46 = x_stream_finish((uint64_t)buf);
        if (v46)
        {
          v47 = v46;
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v48 = x_log_category_frame_rate;
            if (os_log_type_enabled((os_log_t)x_log_category_frame_rate, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v52 = 136315138;
              v53 = v47;
              _os_log_impl(&dword_184457000, v48, OS_LOG_TYPE_DEFAULT, "CAFrameRateServer: %s\n", v52, 0xCu);
            }
          }
          free(v47);
        }
      }
      goto LABEL_48;
    }
  }
}

void CA::OGL::Context::image_volatile(CA::OGL::Context *this, CA::Render::Object *a2, void *a3, void *a4)
{
  os_unfair_lock_s *v6;
  uint64_t v7;

  v6 = (os_unfair_lock_s *)((char *)a2 + 288);
  os_unfair_lock_lock((os_unfair_lock_t)a2 + 72);
  v7 = x_hash_table_remove(*((_QWORD *)a2 + 37), (uint64_t)this);
  if (v7)
    CA::OGL::Context::prepend_deleted_image(a2, v7);
  os_unfair_lock_unlock(v6);
}

uint64_t CA::OGL::AsynchronousItem::invalidate(uint64_t this)
{
  *(_BYTE *)(this + 356) = 1;
  return this;
}

_BYTE *CA::WindowServer::Server::get_surface_replaceability(CA::WindowServer::Server *this, CA::Render::Object *a2, _BYTE *a3, void *a4)
{
  _BYTE *result;

  result = (_BYTE *)*((_QWORD *)a2 + 12);
  if ((result[745] & 0x20) != 0)
  {
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)result + 1624))(result, *(unsigned int *)a3);
    a3[4] = (_BYTE)result;
  }
  return result;
}

uint64_t CA::WindowServer::AppleInternalDisplay::hardware_minimum_frame_duration(CA::WindowServer::AppleInternalDisplay *this)
{
  uint64_t v1;

  v1 = 1;
  if ((*((_DWORD *)this + 156) & 0x10) != 0)
  {
    if (*((uint64_t *)this + 80) >= 0)
      v1 = 1;
    else
      v1 = 2;
  }
  if (initialized[0] != -1)
    dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
  if (v1 <= *(float *)&dword_1ECDC69E0)
    return *(float *)&dword_1ECDC69E0;
  return v1;
}

uint64_t CA::WindowServer::AppleInternalDisplay::native_orientation(CA::WindowServer::AppleInternalDisplay *this)
{
  return *((unsigned int *)this + 7105);
}

void sub_1844E6AEC(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t drawLine(void *a1, const char *a2, CGPoint a3, const __CTLine *a4)
{
  return objc_msgSend(a1, "_drawLine:inContext:atPoint:", a4, a2, a3.x, a3.y);
}

double get_line_bounds(const __CTLine *a1, double *a2, double *a3, double *a4)
{
  double TypographicBounds;
  double v8;
  double v9;
  double v10;

  TypographicBounds = CTLineGetTypographicBounds(a1, a2, a3, a4);
  if (dyld_program_sdk_at_least())
  {
    CTLineGetDefaultBounds();
    if (a2)
    {
      v8 = *a2;
      if (*a2 <= 0.0)
        v8 = 0.0;
      *a2 = v8;
    }
    if (a3)
    {
      v9 = *a3;
      if (*a3 <= 0.0)
        v9 = 0.0;
      *a3 = v9;
    }
    if (a4)
    {
      v10 = *a4;
      if (*a4 <= 0.0)
        v10 = 0.0;
      *a4 = v10;
    }
  }
  return TypographicBounds;
}

BOOL CA::ColorMatrix::is_alpha_identity(CA::ColorMatrix *this)
{
  return *((float *)this + 3) == 0.0
      && *((float *)this + 8) == 0.0
      && *((float *)this + 13) == 0.0
      && *((float *)this + 15) == 0.0
      && *((float *)this + 16) == 0.0
      && *((float *)this + 17) == 0.0
      && *((float *)this + 18) == 1.0
      && *((float *)this + 19) == 0.0;
}

uint64_t CA::OGL::VariableBlurFilter::filter_flags(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  int int_key;
  unsigned int v6;

  if (CA::OGL::BlurFilter::needs_dither(*(CA::Render::KeyValueArray **)(a2 + 40), a3))
    v4 = 14;
  else
    v4 = 6;
  int_key = CA::Render::KeyValueArray::get_int_key(*(CA::Render::KeyValueArray **)(a2 + 40), (const CA::Render::KeyValueArray *)0x129, 0);
  v6 = v4 | (int_key == 0);
  if (int_key)
    return v6 | 0x10;
  else
    return v6;
}

uint64_t CA::OGL::GaussianBlurFilter::filter_flags(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5;
  CA::Render::KeyValueArray *v6;
  double *v7;
  double v8;
  double v9;
  double v11;
  float v12;
  double v13;
  double v14[2];

  v14[1] = *(double *)MEMORY[0x1E0C80C00];
  if (CA::OGL::BlurFilter::needs_dither(*(CA::Render::KeyValueArray **)(a2 + 40), a3))
    v5 = 14;
  else
    v5 = 6;
  v6 = *(CA::Render::KeyValueArray **)(a2 + 40);
  if (!CA::Render::KeyValueArray::get_int_key(v6, (const CA::Render::KeyValueArray *)0x129, 0))
    return v5 | (CA::Render::KeyValueArray::get_int_key(v6, (const CA::Render::KeyValueArray *)0x124, 0) == 0);
  v13 = 0.0;
  v14[0] = 0.0;
  if ((*(_BYTE *)(a3 + 288) & 0x10) != 0)
  {
    CA::Mat4Impl::mat4_get_scale((CA::Mat4Impl *)(a3 + 144), v14, &v13, v7);
    v8 = v13;
    v9 = v14[0];
  }
  else
  {
    v8 = *(double *)(a3 + 272);
    v13 = v8;
    v14[0] = v8;
    v9 = v8;
  }
  if (v9 >= v8)
    v11 = v8;
  else
    v11 = v9;
  v12 = v11 * CA::Render::KeyValueArray::get_float_key(v6, (const CA::Render::KeyValueArray *)0x12E, 0.0);
  if (v12 <= 0.35)
    return v5;
  else
    return v5 | 0x10;
}

uint64_t CA::OGL::BlurFilter::needs_dither(CA::Render::KeyValueArray *a1, uint64_t a2)
{
  uint64_t result;
  double *v5;
  double float_key;
  double scale;

  result = CA::Render::KeyValueArray::get_int_key(a1, (const CA::Render::KeyValueArray *)0x11E, 0);
  if ((_DWORD)result)
  {
    float_key = CA::Render::KeyValueArray::get_float_key(a1, (const CA::Render::KeyValueArray *)0x12E, 0.0);
    if ((*(_BYTE *)(a2 + 288) & 0x10) != 0)
      scale = CA::Mat4Impl::mat4_get_scale((CA::Mat4Impl *)(a2 + 144), 0, 0, v5);
    else
      scale = *(double *)(a2 + 272);
    return scale * float_key > 4.0;
  }
  return result;
}

uint64_t CA::Render::Object::texture_cast(CA::Render::Object *this)
{
  return 0;
}

float CA::OGL::ContentsGeometry::fill_debug(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, int a5, double a6, int8x16_t a7)
{
  double *v9;
  int v10;
  int v11;
  BOOL v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  float v23;
  uint64_t *v24;
  float v25;
  double v26;
  double v28;
  _BOOL4 v29;
  float v30;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v43;
  CGColorSpace *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  double v48;
  _BOOL4 v49;
  double v50;
  double v51;
  unsigned int v53;
  double *v54;
  int8x16_t v55;
  float v58;
  CGColorSpace *s;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  if (options_are_visual != 1)
    return *(float *)&a6;
  v9 = (double *)(a1 + 308);
  v10 = *(_DWORD *)(a1 + 308);
  if ((v10 & 0x36) == 0
    || ((v11 = BYTE1(xmmword_1ECDC6AB0), !(_BYTE)xmmword_1ECDC6AB0) ? (_ZF = BYTE1(xmmword_1ECDC6AB0) == 0) : (_ZF = 0),
        _ZF))
  {
    if (*(_BYTE *)(a1 + 494))
      v13 = BYTE2(xmmword_1ECDC6AB0) == 0;
    else
      v13 = 1;
    if (!v13 || (v10 & 9) != 0 && BYTE14(ca_debug_options))
    {
      v62 = a1 + 8;
      v63 = a1 + 104;
      v38 = *v9;
      v64 = *v9;
      v65 = 0;
      v66 = 0;
      v67 = a1 + 40;
      v39 = a2;
      v37 = 2155872384;
    }
    else
    {
      if (byte_1ECDC6A68 && *(_BYTE *)(a1 + 495))
      {
        v62 = a1 + 8;
        v63 = a1 + 104;
        v38 = *v9;
        v64 = *v9;
        v65 = 0;
        v66 = 0;
        v67 = a1 + 40;
        v39 = a2;
        v37 = 4294901888;
        goto LABEL_95;
      }
      if (byte_1ECDC6A69 && *(_BYTE *)(a1 + 496))
      {
        v62 = a1 + 8;
        v63 = a1 + 104;
        v38 = *v9;
        v64 = *v9;
        v65 = 0;
        v66 = 0;
        v67 = a1 + 40;
        v39 = a2;
        v37 = 16777088;
        goto LABEL_95;
      }
      if (BYTE1(ca_debug_options) && a4 && (*((_DWORD *)a4 + 3) & 0x8000FF) == 0x800017)
      {
        v62 = a1 + 8;
        v63 = a1 + 104;
        v38 = *v9;
        v64 = *v9;
        v65 = 0;
        v66 = 0;
        v67 = a1 + 40;
        v39 = a2;
        v37 = 8421504;
        goto LABEL_95;
      }
      if (BYTE2(ca_debug_options))
      {
        v62 = a1 + 8;
        v63 = a1 + 104;
        v38 = *v9;
        if (a5)
          v37 = 8388736;
        else
          v37 = 2147483776;
        goto LABEL_94;
      }
      if (byte_1ECDC6A62)
      {
        if (a3)
        {
          if (a4)
          {
            v40 = *(_QWORD *)(a3 + 24);
            if (v40)
            {
              if ((*(_BYTE *)(v40 + 43) & 2) != 0)
              {
                v41 = *(_QWORD *)(v40 + 144);
                if (v41)
                {
                  if ((*(_BYTE *)(v41 + 97) & 0x80) == 0)
                  {
LABEL_77:
                    v62 = a1 + 8;
                    v63 = a1 + 104;
                    v38 = *v9;
                    v64 = *v9;
                    v65 = 0;
                    v66 = 0;
                    v67 = a1 + 40;
                    v39 = a2;
                    v37 = 2147483776;
                    goto LABEL_95;
                  }
                }
              }
            }
          }
        }
      }
      if (byte_1ECDC6A64)
      {
        if (a4)
        {
          v43 = (*(uint64_t (**)(double *))(*(_QWORD *)a4 + 104))(a4);
          if (*((_BYTE *)a4 + 12) == 9)
            goto LABEL_85;
          if (v43 > 0x1C || ((0x17826000u >> v43) & 1) == 0)
          {
            v37 = 2155872384;
            if (v43 - 33 >= 3)
            {
              if (v43 <= 0x10 && ((0x1980Fu >> v43) & 1) != 0)
              {
                v37 = 2151678080;
              }
              else if ((v43 & 0xFFFFFFFE) == 0x12)
              {
                v37 = 2151710848;
              }
              else
              {
                if (v43 > 0x1A || ((0x6000700u >> v43) & 1) == 0)
                  return *(float *)&a6;
                v37 = 1077952640;
              }
            }
LABEL_92:
            v62 = a1 + 8;
            v63 = a1 + 104;
LABEL_93:
            v38 = *v9;
LABEL_94:
            v64 = v38;
            v65 = 0;
            v66 = 0;
            v67 = a1 + 40;
            v39 = a2;
            goto LABEL_95;
          }
LABEL_66:
          v37 = 32896;
          goto LABEL_92;
        }
      }
      else if (byte_1ECDC6A65 && a4)
      {
        v44 = (CGColorSpace *)*((_QWORD *)a4 + 6);
        if (!v44)
          return *(float *)&a6;
        s = (CGColorSpace *)*((_QWORD *)a4 + 6);
        if (CGColorSpaceIsHLGBased(v44))
        {
          v37 = 2155872384;
          goto LABEL_92;
        }
        if ((CGColorSpaceContainsFlexGTCInfo() & 1) != 0)
        {
LABEL_85:
          v37 = 8388736;
          goto LABEL_92;
        }
        if (CGColorSpaceIsPQBased(s))
        {
LABEL_91:
          v37 = 2147516544;
          goto LABEL_92;
        }
        if (!CGColorSpaceUsesExtendedRange(s))
          return *(float *)&a6;
        LODWORD(a6) = *((_DWORD *)a4 + 14);
        a7.i32[0] = 1.0;
        if (*(float *)&a6 <= 1.0)
          return *(float *)&a6;
        goto LABEL_66;
      }
      if (!BYTE3(xmmword_1ECDC6A70))
      {
        if (byte_1ECDC6AA4 && a4)
        {
          if (!(*(unsigned int (**)(double *))(*(_QWORD *)a4 + 128))(a4))
            return *(float *)&a6;
          goto LABEL_77;
        }
LABEL_24:
        if (!byte_1ECDC6ACD)
          return *(float *)&a6;
        if (!a3)
          return *(float *)&a6;
        v45 = *(_QWORD *)(a3 + 24);
        if (!v45)
          return *(float *)&a6;
        v46 = *(_QWORD *)(v45 + 144);
        if (!v46)
          return *(float *)&a6;
        v47 = *(_QWORD *)(v46 + 96);
        if ((v47 & 0xE0000000000000) == 0)
          return *(float *)&a6;
        if ((v47 & 0xE0000000000000) >> 53 <= 4)
        {
          v37 = CA::OGL::fill_color_rect(CA::OGL::Context &,CA::Rect const&,unsigned int,BOOL,BOOL,CA::Render::VelocityBucket)::velocity_colors[((v47 >> 53) & 7) - 1];
          goto LABEL_92;
        }
        goto LABEL_91;
      }
      if (!a4)
        goto LABEL_24;
      if ((*((_DWORD *)a4 + 3) & 0x100000) == 0 || *((_DWORD *)a4 + 3) == 51)
        return *(float *)&a6;
      v62 = a1 + 8;
      v63 = a1 + 104;
      v38 = *v9;
      v64 = *v9;
      v65 = 0;
      v66 = 0;
      v67 = a1 + 40;
      v39 = a2;
      v37 = 2150914688;
    }
LABEL_95:
    CA::OGL::fill_color_rect(v39, (uint64_t)&v62, (double *)v37, a4, v38, a7);
    return *(float *)&a6;
  }
  v14 = a1 + 104;
  v15 = *(double *)(a1 + 264);
  v16 = v15 / *(double *)(a1 + 256);
  v17 = 1.0 / *(double *)(a1 + 224);
  v18 = sqrt(*(double *)(a1 + 104) * *(double *)(a1 + 104) + *(double *)(a1 + 112) * *(double *)(a1 + 112)) * v17;
  v19 = sqrt(*(double *)(a1 + 136) * *(double *)(a1 + 136) + *(double *)(a1 + 144) * *(double *)(a1 + 144)) * v17;
  v20 = v16 / v18;
  if (v16 / v18 <= v15 / v19)
    v20 = v15 / v19;
  v21 = v18 / v16;
  v22 = v19 / v15;
  if (v21 <= v22)
    v21 = v22;
  v23 = v21;
  v24 = &qword_18474D000;
  if ((_BYTE)xmmword_1ECDC6AB0)
  {
    v25 = v20;
    v26 = v25;
    if (v26 > 1.001)
    {
      v48 = v26 * 0.333333333 + -0.333333333;
      v49 = v48 > 1.0 || v48 < 0.0;
      v50 = 0.0;
      if (v48 >= 0.0 || v48 > 1.0)
        v50 = 0.699999988;
      v51 = v48 * 0.699999988;
      if (v49)
        v51 = v50;
      _D1 = 0.699999988 - v51;
      LOWORD(v60) = 14746;
      __asm { FCVT            H1, D1 }
      HIWORD(v60) = LOWORD(_D1);
      v61 = 966393856;
      v58 = v23;
      v53 = CA::OGL::ExtendedColor::word32((CA::OGL::ExtendedColor *)&v60);
      v62 = a1 + 8;
      v63 = a1 + 104;
      v64 = *v9;
      v65 = 0;
      v66 = 0;
      v67 = a1 + 40;
      CA::OGL::fill_color_rect(a2, (uint64_t)&v62, (double *)bswap32(v53), v54, v64, v55);
      v24 = &qword_18474D000;
      v23 = v58;
      v14 = a1 + 104;
      v11 = BYTE1(xmmword_1ECDC6AB0);
    }
  }
  a6 = v23;
  if (a6 > *((double *)v24 + 38) && v11 != 0)
  {
    v28 = a6 * 0.333333333 + -0.333333333;
    v29 = v28 > 1.0 || v28 < 0.0;
    v30 = 0.7;
    if (v28 < 0.0 && v28 <= 1.0)
      v30 = 0.2;
    _S0 = v28 * 0.5 + 0.200000003;
    if (v29)
      _S0 = v30;
    v60 = 0;
    __asm { FCVT            H0, S0 }
    LOWORD(v61) = _H0;
    HIWORD(v61) = _H0;
    v36 = v14;
    v37 = bswap32(CA::OGL::ExtendedColor::word32((CA::OGL::ExtendedColor *)&v60));
    v62 = a1 + 8;
    v63 = v36;
    goto LABEL_93;
  }
  return *(float *)&a6;
}

void CA::OGL::ContentsGeometry::fill_and_unbind(uint64_t a1, uint64_t a2, uint32x2_t **a3, double *a4, float a5)
{
  int v6;
  double *v10;
  float32x4_t v11;
  float32x2_t *v12;
  float32x2_t v13;
  double v14;
  double v15;
  double v16;
  BOOL v18;
  const double *v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x2_t *v22;
  int32x2_t *v23;
  uint32x2_t v24;
  int32x2_t v25;
  uint32x2_t v26;
  __int128 v27;
  uint32x2_t v28;
  int v29;
  int v30;
  int64x2_t v31;
  float64x2_t v32;
  double v33;
  double v34;
  double v35;
  double v40;
  const Rect *v41;
  __int32 v42;
  const Rect *v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  double *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  double *v52;
  __int128 *v53;
  const void *v54;
  char v55;
  uint64_t v57;
  double *v58;
  int8x16_t v59;
  float64x2_t v60;
  int64x2_t v61;
  float32x2_t v62;
  float64x2_t v63;
  float32x4_t v64;
  float64x2_t v65;
  float64x2_t v66;
  uint64_t v67;
  float64x2_t *v68[2];
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int32x4_t v74;
  int32x4_t v75;
  float64x2_t v76;
  float64x2_t v77;
  __int128 v78;
  double v79;
  double v80;
  float64x2_t *v81;
  double v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  _QWORD v97[2];
  _OWORD v98[3];
  _OWORD v99[3];
  uint64_t v100;
  _OWORD *v101;
  uint64_t v102;
  float64x2_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _OWORD __dst[31];
  uint64_t v110;

  v6 = (int)a4;
  v110 = *MEMORY[0x1E0C80C00];
  v10 = (double *)(a1 + 308);
  if (*(_BYTE *)(a1 + 491))
  {
    v11 = *(float32x4_t *)(a1 + 392);
    if ((*((_WORD *)a3 + 29) & 0x100) == 0 && *a3)
    {
      *(float32x2_t *)v64.f32 = vcvt_f32_u32((*a3)[2]);
      v64.i64[1] = v64.i64[0];
      v11 = vmulq_f32(v11, v64);
    }
    *(_BYTE *)(*(_QWORD *)(a2 + 16) + 19) = 5;
    *(float32x4_t *)(*(_QWORD *)(a2 + 16) + 368) = v11;
  }
  if (*(_BYTE *)(a1 + 494))
  {
    v12 = *(float32x2_t **)(a2 + 16);
    v13 = v12[12];
    v12[13] = vmla_f32(v12[13], *(float32x2_t *)(a1 + 416), v13);
    v12[12] = vmul_f32(*(float32x2_t *)(a1 + 408), v13);
  }
  if (*(_BYTE *)(a1 + 337)
    || *(_BYTE *)(a1 + 338)
    || (*(_BYTE *)v10 & 0x12) == 0
    || (*((_WORD *)a3 + 27) & 0xF) == (_DWORD)a4)
  {
    CA::OGL::ContentsGeometry::fill_and_unbind(a1, (int32x2_t *)a2, (uint64_t)a3, a4);
    return;
  }
  v79 = 0.0;
  v80 = 0.0;
  if ((*(_BYTE *)(a1 + 248) & 0x10) != 0)
  {
    CA::Mat4Impl::mat4_get_scale((CA::Mat4Impl *)(a1 + 104), &v80, &v79, a4);
    v14 = v79;
    v15 = v80;
  }
  else
  {
    v14 = *(double *)(a1 + 232);
    v15 = v14;
  }
  if (v15 < 0.0)
    v15 = -v15;
  if (v15 > 1.0)
    v15 = 1.0;
  if (v14 < 0.0)
    v14 = -v14;
  if (v14 > 1.0)
    v14 = 1.0;
  v79 = v14;
  v80 = v15;
  if (v15 <= v14)
    v16 = v15;
  else
    v16 = v14;
  if (v15 > v14)
    v14 = v15;
  v18 = v16 < 0.75 || v6 == 10;
  if (v14 >= 0.999 || !v18)
    goto LABEL_76;
  v78 = 0uLL;
  CA::Shape::get_bounds(*(_QWORD *)(*(_QWORD *)(a2 + 232) + 8), (int *)&v78);
  v22 = *(int32x2_t **)(a2 + 248);
  if (v22)
    v23 = v22 + 4;
  else
    v23 = (int32x2_t *)(a2 + 184);
  v24 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)((char *)&v78 + 8));
  if ((vpmax_u32(v24, v24).u32[0] & 0x80000000) != 0)
    goto LABEL_77;
  v25 = v23[1];
  v26 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v25);
  if ((vpmax_u32(v26, v26).u32[0] & 0x80000000) != 0)
    goto LABEL_77;
  *(int32x2_t *)&v27 = vmax_s32(*(int32x2_t *)&v78, *v23);
  *(int32x2_t *)v20.i8 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)&v78, *(int32x2_t *)((char *)&v78 + 8)), vadd_s32(*v23, v25)), *(int32x2_t *)&v27);
  v28 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)v20.i8);
  *(uint32x2_t *)v21.i8 = vpmax_u32(v28, v28);
  if (v21.i32[0] < 0)
    goto LABEL_77;
  *((_QWORD *)&v27 + 1) = v20.i64[0];
  v78 = v27;
  v29 = v20.i32[0];
  if (v20.i32[0] <= v20.i32[1])
    v30 = v20.i32[1];
  else
    v30 = v20.i32[0];
  v20.i32[0] = v30;
  v21.i32[0] = 1073741822;
  v31.i64[0] = (int)v27;
  v31.i64[1] = SDWORD1(v27);
  v32 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v20, v21), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v31));
  v33 = (double)v20.i32[1];
  if (v30 <= 1073741822)
    v34 = (double)v29;
  else
    v34 = 1.79769313e308;
  if (v30 > 1073741822)
    v33 = 1.79769313e308;
  v76 = v32;
  v77.f64[0] = v34;
  v77.f64[1] = v33;
  if (fmax(v34, v33) < 1.79769313e308)
  {
    v35 = v34 >= v33 ? v33 : v34;
    if (v35 > 0.0)
    {
      __asm { FMOV            V3.2D, #-2.0 }
      v76 = vaddq_f64(v32, _Q3);
      v40 = v33 + 4.0;
      v77.f64[0] = v34 + 4.0;
      v77.f64[1] = v40;
      if (v34 + 4.0 <= 0.0 || v40 <= 0.0)
        v77 = 0uLL;
    }
  }
  CA::Rect::unapply_transform((CA::Rect *)&v76, (const CA::Transform *)(a1 + 104), v19);
  if ((CA::BoundsImpl::intersect((uint64_t)&v76, *(float64x2_t *)(a1 + 8), *(float64x2_t *)(a1 + 24)) & 1) == 0)
  {
LABEL_77:
    (*(void (**)(uint64_t, uint32x2_t **, _QWORD))(*(_QWORD *)a2 + 520))(a2, a3, 0);
    return;
  }
  v75 = 0uLL;
  v65 = v77;
  v66 = v76;
  CA::Bounds::set_exterior(&v75, v41, v76, v77);
  v42 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 184))(a2, 7);
  if (v75.i32[2] > v42 || v75.i32[3] > v42)
  {
LABEL_76:
    CA::OGL::ContentsGeometry::fill_and_unbind(a1, (int32x2_t *)a2, (uint64_t)a3, a4);
    return;
  }
  v74 = 0uLL;
  if (v80 != 1.0 && v65.f64[0] < 1.79769313e308)
  {
    v76.f64[0] = v66.f64[0] * v80;
    v77.f64[0] = v65.f64[0] * v80;
  }
  if (v79 != 1.0 && v65.f64[1] < 1.79769313e308)
  {
    v76.f64[1] = v66.f64[1] * v79;
    v77.f64[1] = v65.f64[1] * v79;
  }
  CA::Bounds::set_exterior(&v74, v43, v76, v77);
  memset(__dst, 0, 488);
  v44 = *(const void **)(a2 + 16);
  memcpy(__dst, v44, 0x1E8uLL);
  *(_QWORD *)&__dst[0] = v44;
  *(_QWORD *)(a2 + 16) = __dst;
  if (*(_BYTE *)(a1 + 492))
    v45 = 4111;
  else
    v45 = 15;
  v46 = (*(uint64_t (**)(uint64_t, uint64_t, int32x4_t *, uint64_t))(*(_QWORD *)a2 + 656))(a2, 1, &v75, v45);
  if (v46)
  {
    v67 = v46;
    if (*(_DWORD *)(a1 + 312) && (*(_BYTE *)v10 & 9) != 0
      || (v48 = *(_QWORD *)(a2 + 16), *(_QWORD *)(v48 + 8) != 0x3C003C003C003C00))
    {
      v49 = (*(uint64_t (**)(uint64_t, uint64_t, int32x4_t *, uint64_t))(*(_QWORD *)a2 + 656))(a2, 1, &v74, v45);
      v48 = *(_QWORD *)(a2 + 16);
    }
    else
    {
      v49 = 0;
    }
    v50 = *(_QWORD *)&__dst[0];
    memcpy(__dst, *(const void **)&__dst[0], 0x1E8uLL);
    *(_QWORD *)&__dst[0] = v50;
    *(_QWORD *)(v48 + 8) = 0x3C003C003C003C00;
    *(_BYTE *)(*(_QWORD *)(a2 + 16) + 481) &= ~1u;
    v104 = 0x3C003C003C003C00;
    v106 = 0;
    v105 = 0;
    v107 = 0;
    v100 = 0;
    v101 = 0;
    v108 = 1065353216;
    v102 = 0;
    v103 = (float64x2_t *)&CA::identity_transform;
    memset(v99, 0, sizeof(v99));
    CA::Shape::operator=((uint64_t)v99, &v75);
    v101 = v99;
    WORD2(v108) = 1;
    v100 = CA::OGL::Context::set_gstate(a2, (uint64_t)&v100);
    CA::OGL::Context::push_surface(a2, v67, 1u, 1024, 0);
    v51 = *(unsigned __int8 *)(a1 + 336);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 1032))(a2) < v51)
    {
      *(_BYTE *)(*(_QWORD *)(a2 + 16) + 481) |= 2u;
      *(_DWORD *)(*(_QWORD *)(a2 + 16) + 352) = 1065353216;
    }
    v68[0] = (float64x2_t *)(a1 + 8);
    v68[1] = v103;
    v69 = 256;
    v70 = 0;
    v72 = 0;
    v71 = 0;
    v73 = 0;
    v52 = (double *)(a1 + 276);
    if (v49)
      CA::OGL::fill_rect_tex((CA::OGL::Context *)a2, (uint64_t)v68, a1 + 276, v52);
    else
      CA::OGL::ContentsGeometry::fill_geometry(a1, (CA::OGL::Context *)a2, v68, (uint64_t)v52);
    *(_BYTE *)(*(_QWORD *)(a2 + 16) + 481) &= ~2u;
    CA::OGL::Context::pop_surface((CA::OGL::Context *)a2);
    CA::OGL::Context::set_gstate(a2, **(_QWORD **)(a2 + 232));
    *(_QWORD *)(a2 + 16) = *(_QWORD *)&__dst[0];
    *(_QWORD *)&__dst[0] = 0;
    (*(void (**)(uint64_t, uint32x2_t **, _QWORD))(*(_QWORD *)a2 + 520))(a2, a3, 0);
    memset(v98, 0, sizeof(v98));
    v96 = 0;
    v94 = 0u;
    v95 = 0u;
    v92 = 0u;
    v93 = 0u;
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    v53 = (__int128 *)(a1 + 104);
    v87 = 0u;
    if (v49)
    {
      v54 = *(const void **)(a2 + 16);
      memcpy(__dst, v54, 0x1E8uLL);
      *(_QWORD *)&__dst[0] = v54;
      *(_QWORD *)(a2 + 16) = __dst;
      *((_QWORD *)&__dst[0] + 1) = 0x3C003C003C003C00;
      BYTE1(__dst[30]) &= ~1u;
      CA::Shape::operator=((uint64_t)v98, &v74);
      v101 = v98;
      v88 = 0u;
      v89 = xmmword_18474DF50;
      v90 = 0u;
      v91 = 0u;
      v92 = xmmword_18474DF40;
      v93 = 0u;
      v94 = xmmword_18474DF50;
      v87 = *(unint64_t *)&v80;
      if (v80 == v79)
      {
        *((double *)&v89 + 1) = v80;
        *(_QWORD *)&v92 = 0x3FF0000000000000;
        *(double *)&v95 = v80;
        *((double *)&v95 + 1) = 1.0 / v80;
        v55 = 8 * (v80 != 1.0);
      }
      else
      {
        *((double *)&v89 + 1) = v79;
        *(_QWORD *)&v92 = 0x3FF0000000000000;
        __asm { FMOV            V0.2D, #1.0 }
        v95 = _Q0;
        v55 = 16;
      }
      LOBYTE(v96) = v55;
      v100 = CA::OGL::Context::set_gstate(a2, (uint64_t)&v100);
      CA::OGL::Context::push_surface(a2, v49, 1u, 1024, 0);
      v53 = &v87;
    }
    v57 = 0;
    if (v6 != 2 && v6 != 7)
    {
      if (v6 == 11)
      {
        v57 = 1;
      }
      else if (v6 == 10)
      {
        v57 = 2;
      }
      else
      {
        v57 = 1;
      }
    }
    v81 = *(float64x2_t **)&v80;
    v82 = v79;
    (*(void (**)(uint64_t, uint64_t, float64x2_t **, __int128 *, uint64_t, float))(*(_QWORD *)a2 + 864))(a2, v67, &v81, v53, v57, a5);
    if (v49)
    {
      CA::OGL::Context::pop_surface((CA::OGL::Context *)a2);
      CA::OGL::Context::set_gstate(a2, **(_QWORD **)(a2 + 232));
      *(_QWORD *)(a2 + 16) = *(_QWORD *)&__dst[0];
      v60.f64[0] = v80;
      v60.f64[1] = v79;
      v61.i64[0] = v74.i32[0];
      v61.i64[1] = v74.i32[1];
      v62 = vcvt_f32_f64(vmlaq_f64(vnegq_f64(vcvtq_f64_s64(v61)), *(float64x2_t *)(a1 + 8), v60));
      v63 = vmlaq_f64(vcvtq_f64_f32(v62), v60, *(float64x2_t *)(a1 + 24));
      *(_QWORD *)&__dst[0] = 0;
      v97[0] = v62;
      v97[1] = vcvt_f32_f64(v63);
      v81 = (float64x2_t *)(a1 + 8);
      *(_QWORD *)&v82 = a1 + 104;
      v83 = *v10;
      v84 = 0;
      v85 = 0;
      v86 = a1 + 40;
      CA::OGL::Context::bind_surface(a2, v49, 0, 1u, 1, 0.0);
      CA::OGL::ContentsGeometry::fill_geometry(a1, (CA::OGL::Context *)a2, &v81, (uint64_t)v97);
      CA::OGL::Context::unbind_surface((_QWORD *)a2, v49, 0);
    }
    if (byte_1ECDC6A61)
    {
      v81 = (float64x2_t *)(a1 + 8);
      *(_QWORD *)&v82 = a1 + 104;
      v83 = *v10;
      v84 = 0;
      v85 = 0;
      v86 = a1 + 40;
      CA::OGL::fill_color_rect(a2, (uint64_t)&v81, (double *)0x80008080, v58, v83, v59);
    }
    CA::OGL::Context::release_surface(a2, v67);
    if (v49)
      CA::OGL::Context::release_surface(a2, v49);
    if (*(_QWORD *)&__dst[0])
      __assert_rtn("~ContextState", "ogl-context.h", 551, "!next && \"Imbalanced ContextState push/pop\"");
  }
  else
  {
    CA::OGL::ContentsGeometry::fill_and_unbind(a1, (int32x2_t *)a2, (uint64_t)a3, v47);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)&__dst[0];
  }
}

BOOL CA::OGL::MetalContext::should_tile_image(CA::OGL::MetalContext *this, CA::Render::Texture *a2)
{
  unint64_t v2;
  _BOOL8 result;
  unint64_t v4;

  v2 = *((_QWORD *)this + 332);
  result = 1;
  if (v2 >= *((unsigned int *)a2 + 4) && v2 >= *((unsigned int *)a2 + 5))
  {
    if (*((_BYTE *)a2 + 12) != 23)
      return 0;
    v4 = *((_QWORD *)this + 333);
    if (!v4 || *((_QWORD *)a2 + 20) <= v4)
      return 0;
  }
  return result;
}

uint64_t CA::Render::Texture::tiled_texture_cast(CA::Render::Texture *this)
{
  return 0;
}

void CA::OGL::Mosaic::draw(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, uint64_t a9, unsigned int a10)
{
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  malloc_zone_t *malloc_zone;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  size_t v29;
  int v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  __int16 v34;
  uint64_t *i;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  malloc_zone_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t **v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t **v60;
  signed int v61;
  int v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  int v66;
  __int32 v67;
  int v68;
  unsigned int v69;
  int v70;
  int v71;
  unsigned int v72;
  int v73;
  uint64_t v74;
  int v75;
  int v76;
  __int32 v77;
  _BYTE *v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  uint64_t *v83;
  _QWORD *v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  int v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  malloc_zone_t *v92;
  void *v93;
  uint64_t v94;
  malloc_zone_t *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  BOOL v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  unsigned int v110;
  uint64_t v111;
  int v112;
  uint64_t *v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int32x2_t v120;
  float32x4_t v121;
  float32x4_t v122;
  int32x2_t v123;
  int8x16_t v124;
  int8x16_t v125;
  float32x4_t v126;
  uint64_t v127;
  int v128;
  _QWORD *v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  _BYTE v133[4];
  int v134;
  _BYTE *v135;
  _BYTE *v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;
  unsigned int v140;
  int v141;
  uint64_t v142;
  _BYTE *v143;
  int v144;
  int v145;
  int v146;
  unsigned int v147;
  int v148;
  int v149;
  int v150;
  unsigned int v151;
  __int32 v152;
  _BYTE *v153;
  _QWORD *v154;
  int v155;
  uint64_t v156;
  unsigned int v157;
  _QWORD *v158;
  unsigned int v159;
  _BYTE *v160;
  int v161;
  int v162;
  uint64_t *v163;
  _DWORD v164[4];
  float32x4_t v165;
  uint64_t v166;

  v166 = *MEMORY[0x1E0C80C00];
  v162 = a6;
  if (!(a7 | a6) || (*(_DWORD *)(a1 + 144) & 0x80000000) != 0)
    return;
  v14 = *(_DWORD *)(a1 + 4);
  v15 = *(_DWORD *)(a1 + 8);
  v134 = a4;
  v16 = (v162 + v14 - 1) / v14;
  v17 = a4;
  v155 = a7;
  v18 = (a7 + v15 - 1) / v15;
  v163 = a2;
  if ((_DWORD)a4)
  {
    v19 = *(_QWORD *)(a1 + 64);
    if (v19)
    {
      v20 = *(_QWORD **)(*(_QWORD *)(a1 + 72) + 8 * (((_DWORD)v19 - 1) & a4));
      if (v20)
      {
        while (1)
        {
          if (*((_DWORD *)v20 + 7) == v17
            && *((_DWORD *)v20 + 6) == a3
            && (__int16)v16 == *((__int16 *)v20 + 24)
            && (__int16)v18 == *((__int16 *)v20 + 25))
          {
            if (!a5)
              break;
            v21 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a5 + 16))(a5, v20[4]);
            v17 = v134;
            a2 = v163;
            if ((v21 & 1) != 0)
              break;
          }
          v20 = (_QWORD *)v20[2];
          if (!v20)
            goto LABEL_13;
        }
        v132 = *v20;
        v131 = (_QWORD *)v20[1];
        *(_QWORD *)(v132 + 8) = v131;
        *v131 = v132;
        *v20 = v20;
        v20[1] = v20;
        ++*(_QWORD *)(a1 + 120);
        v26 = v155;
        v87 = v162;
        goto LABEL_125;
      }
    }
  }
LABEL_13:
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v23 = malloc_type_zone_malloc(malloc_zone, 0x38uLL, 0x8BB15036uLL);
  v24 = v134;
  v20 = v23;
  if (v23)
  {
    v23[2] = 0;
    *((_DWORD *)v23 + 6) = a3;
    *((_DWORD *)v23 + 7) = v24;
    if (a5)
      v23 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 24))(a5);
    else
      v23 = 0;
    v20[4] = v23;
    v20[5] = 0;
    *((_WORD *)v20 + 24) = v16;
    *((_WORD *)v20 + 25) = v18;
    *v20 = v20;
    v20[1] = v20;
  }
  v25 = *(unsigned int *)(a1 + 20);
  if (v25 > 0x25)
    v139 = 0;
  else
    v139 = dword_184750480[v25];
  v26 = v155;
  if (a8)
    v27 = *(_DWORD *)a1;
  else
    v27 = 0;
  v156 = (*(_DWORD *)(a1 + 4) + v27) * v139;
  MEMORY[0x1E0C80A78](v23);
  v143 = &v133[-v28];
  bzero(&v133[-v28], v29);
  v30 = *((__int16 *)v20 + 25);
  a2 = v163;
  if (v30 < 1)
  {
LABEL_100:
    v87 = v162;
    v88 = v134;
    if (!v134)
    {
LABEL_124:
      ++*(_QWORD *)(a1 + 128);
LABEL_125:
      if (v26 >= 1)
      {
        v112 = 0;
        v113 = (uint64_t *)v20[5];
        v114 = *(_DWORD *)(a1 + 8);
        v154 = v20;
        do
        {
          if (v114 >= v26 - v112)
            v115 = v26 - v112;
          else
            v115 = v114;
          if (v87 >= 1)
          {
            v116 = 0;
            v117 = (4 * (v112 == 0)) | (8 * (v115 + v112 == v26));
            v118 = *(_DWORD *)(a1 + 4);
            do
            {
              if (v118 >= v87 - v116)
                v119 = v87 - v116;
              else
                v119 = v118;
              v120.i32[0] = *((__int16 *)v113 + 8);
              v120.i32[1] = *((__int16 *)v113 + 9);
              *(float32x2_t *)v121.f32 = vcvt_f32_s32(v120);
              v122.i64[0] = *(_QWORD *)(a1 + 40);
              v123 = (int32x2_t)vcvt_f32_s32(vadd_s32((int32x2_t)__PAIR64__(v115, v119), v120));
              *(float32x2_t *)v124.i8 = vmul_f32(vadd_f32(*(float32x2_t *)v121.f32, (float32x2_t)0x3F0000003F000000), *(float32x2_t *)v122.f32);
              *(int32x2_t *)&v121.u32[2] = v123;
              v124.i64[1] = v124.i64[0];
              v123.i16[0] = v119 == 1;
              v123.i16[1] = v115 == 1;
              v122.i64[1] = v122.i64[0];
              v125 = (int8x16_t)vmulq_f32(v122, v121);
              v122.i64[0] = *(_QWORD *)(a1 + 176);
              v126.i64[0] = *(_QWORD *)(a1 + 184);
              v122.i64[1] = v122.i64[0];
              v126.i64[1] = v126.i64[0];
              v165 = vmlaq_f32(v122, v126, (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_lane_s32(v123, 0)), 0x1FuLL)), v124, v125));
              v127 = v113[1];
              if (v127 != *(_QWORD *)(a1 + 112))
              {
                CA::OGL::Mosaic::bind_buffer(a1, v163, v113[1], a9);
                a2 = v163;
              }
              *(_DWORD *)(v127 + 56) = *((_DWORD *)a2 + 53);
              v164[0] = v116;
              v164[1] = v112;
              v164[2] = v119;
              v164[3] = v115;
              v87 = v162;
              if (a10 && (v128 = v117 | (v116 == 0) | (2 * (v119 + v116 == v162)), a4 = v128 & a10, (v128 & a10) != 0))
                (*(void (**)(uint64_t, _DWORD *, float32x4_t *, uint64_t))(*(_QWORD *)a9 + 32))(a9, v164, &v165, a4);
              else
                (*(void (**)(uint64_t, _DWORD *, float32x4_t *, uint64_t))(*(_QWORD *)a9 + 24))(a9, v164, &v165, a4);
              a2 = v163;
              *((_DWORD *)v113 + 5) = *((_DWORD *)v163 + 53);
              v113 = (uint64_t *)*v113;
              v118 = *(_DWORD *)(a1 + 4);
              v116 += v118;
            }
            while (v116 < v87);
            v114 = *(_DWORD *)(a1 + 8);
            v26 = v155;
            v20 = v154;
          }
          v112 += v114;
        }
        while (v112 < v26);
      }
      v130 = *(_QWORD *)(a1 + 48);
      v129 = (_QWORD *)(a1 + 48);
      v20[1] = v129;
      *v129 = v20;
      *v20 = v130;
      *(_QWORD *)(v130 + 8) = v20;
      *((_DWORD *)v20 + 13) = *((_DWORD *)a2 + 53);
      return;
    }
    v89 = *(_QWORD *)(a1 + 64);
    if (*(_QWORD *)(a1 + 80) + 1 > 2 * v89)
    {
      v90 = 2 * v89;
      if (2 * v89)
      {
        if (v90 > 0x400)
          goto LABEL_122;
      }
      else
      {
        v96 = *(int *)(a1 + 16) * (uint64_t)*(int *)(a1 + 12);
        v97 = ((v96 >> 3) - 1) | (((v96 >> 3) - 1) >> 1);
        v98 = v97 | (v97 >> 2) | ((v97 | (v97 >> 2)) >> 4);
        v99 = v98 | (v98 >> 8) | ((v98 | (v98 >> 8)) >> 16);
        v100 = v99 | HIDWORD(v99);
        v101 = __CFADD__(v100, 1);
        v102 = v100 + 1;
        if (v101)
          v90 = *(int *)(a1 + 16) * (uint64_t)*(int *)(a1 + 12);
        else
          v90 = v102;
      }
      v103 = (void *)operator new[]();
      bzero(v103, 8 * v90);
      v104 = *(_QWORD *)(a1 + 64);
      if (v104)
      {
        v105 = 0;
        v106 = *(_QWORD *)(a1 + 72);
        do
        {
          v107 = *(_QWORD *)(v106 + 8 * v105);
          if (v107)
          {
            do
            {
              v108 = *(_QWORD *)(v107 + 16);
              v109 = *(_DWORD *)(v107 + 28) & (v90 - 1);
              *(_QWORD *)(v107 + 16) = *((_QWORD *)v103 + v109);
              *((_QWORD *)v103 + v109) = v107;
              v107 = v108;
            }
            while (v108);
          }
          ++v105;
        }
        while (v105 != v104);
        if (v106)
          MEMORY[0x186DBD978](v106, 0x20C8093837F09);
      }
      *(_QWORD *)(a1 + 64) = v90;
      *(_QWORD *)(a1 + 72) = v103;
      v89 = v90;
      a2 = v163;
      v87 = v162;
      v88 = v134;
    }
LABEL_122:
    if (v89)
    {
      v110 = (v89 - 1) & v88;
      v111 = *(_QWORD *)(a1 + 72);
      v20[2] = *(_QWORD *)(v111 + 8 * v110);
      *(_QWORD *)(v111 + 8 * v110) = v20;
      ++*(_QWORD *)(a1 + 80);
    }
    goto LABEL_124;
  }
  v144 = 0;
  v141 = 0;
  v31 = v20 + 5;
  v32 = (uint64_t *)(a1 + 96);
  v33 = v156 + v139;
  if (!v27)
    v33 = 0;
  v137 = -(int)v156;
  v136 = &v143[v33 + v137];
  v160 = &v143[v33];
  v153 = &v143[v33 - v139];
  v135 = &v153[v137];
  v140 = v27 >> 1;
  v34 = *((_WORD *)v20 + 24);
  v138 = a1 + 48;
  v154 = v20;
  v159 = v27;
  v142 = a1 + 96;
  while (v34 < 1)
  {
LABEL_99:
    if (++v144 >= (__int16)v30)
      goto LABEL_100;
  }
  v161 = 0;
  while (2)
  {
    for (i = *(uint64_t **)(a1 + 104); i != v32; i = (uint64_t *)i[1])
    {
      if (i[4])
        goto LABEL_58;
    }
    if (*(_DWORD *)(a1 + 88) <= 7u)
    {
      v36 = *(_QWORD *)(a1 + 56);
      if (v36 == v138)
        goto LABEL_44;
      v37 = *((_DWORD *)v163 + 53);
      if (v37)
      {
        if (*(_DWORD *)(v36 + 52) >= v37)
          goto LABEL_44;
      }
      goto LABEL_40;
    }
    v36 = *(_QWORD *)(a1 + 56);
    if (v36 != v138)
    {
LABEL_40:
      *(_QWORD *)(a1 + 136) += *(__int16 *)(v36 + 50) * (uint64_t)*(__int16 *)(v36 + 48);
      v38 = *(_QWORD *)(v36 + 40);
      if (v38)
      {
        i = *(uint64_t **)(v38 + 8);
        CA::OGL::Mosaic::delete_image(a1, (_DWORD *)v36);
        if (i)
          goto LABEL_58;
      }
      else
      {
        CA::OGL::Mosaic::delete_image(a1, (_DWORD *)v36);
      }
LABEL_44:
      if (*(_DWORD *)(a1 + 88) <= 7u)
      {
        v39 = (malloc_zone_t *)get_malloc_zone();
        i = (uint64_t *)malloc_type_zone_malloc(v39, 0x40uLL, 0x8BB15036uLL);
        if (i)
        {
          is_mul_ok(*(int *)(a1 + 16) * (uint64_t)*(int *)(a1 + 12), 0x18uLL);
          i[3] = operator new[]();
          i[6] = 0;
          v40 = (*(uint64_t (**)(uint64_t *, _QWORD, _QWORD, _QWORD, _QWORD))(*v163 + 592))(v163, *(unsigned int *)(a1 + 20), *(unsigned int *)(a1 + 24), *(unsigned int *)(a1 + 32), 0);
          i[2] = v40;
          if (v40)
            *(_DWORD *)(v40 + 12) |= 0x800u;
          v41 = i[3];
          if (v41)
          {
            v43 = *(unsigned int *)(a1 + 12);
            v42 = *(unsigned int *)(a1 + 16);
            if ((int)v42 >= 1)
            {
              v44 = 0;
              v45 = 0;
              v46 = *(_DWORD *)a1 + *(_DWORD *)(a1 + 4);
              v47 = *(_DWORD *)a1 >> 1;
              v48 = *(_DWORD *)(a1 + 8) + *(_DWORD *)a1;
              do
              {
                if ((int)v43 >= 1)
                {
                  v49 = v44;
                  v50 = v47;
                  v51 = v43;
                  do
                  {
                    v52 = v49++;
                    v53 = v41 + 24 * v52;
                    *(_WORD *)(v53 + 16) = v50;
                    *(_WORD *)(v53 + 18) = v47 + v48 * v45;
                    *(_QWORD *)v53 = v41 + 24 * v49;
                    *(_QWORD *)(v53 + 8) = i;
                    *(_DWORD *)(v53 + 20) = 0;
                    v50 += v46;
                    --v51;
                  }
                  while (v51);
                }
                ++v45;
                v44 += v43;
              }
              while (v45 != v42);
            }
            v54 = (_QWORD *)(v41 + 24 * ((int)v43 * (int)v42 - 1));
            i[4] = v41;
            i[5] = (uint64_t)v54;
            *v54 = 0;
          }
        }
        if (i[2])
        {
          ++*(_DWORD *)(a1 + 88);
          v55 = *(uint64_t ***)(a1 + 104);
          *(_QWORD *)(a1 + 104) = i;
          *i = (uint64_t)v32;
          *v55 = i;
          i[1] = (uint64_t)v55;
LABEL_58:
          v56 = (_QWORD *)i[4];
          v57 = *v56;
          i[4] = *v56;
          if (!v57)
            i[5] = 0;
          ++i[6];
          if (*(uint64_t **)(a1 + 104) != i)
          {
            v59 = *i;
            v58 = (_QWORD *)i[1];
            *(_QWORD *)(v59 + 8) = v58;
            *v58 = v59;
            i[1] = (uint64_t)i;
            v60 = *(uint64_t ***)(a1 + 104);
            *(_QWORD *)(a1 + 104) = i;
            *i = (uint64_t)v32;
            *v60 = i;
            i[1] = (uint64_t)v60;
          }
          *v31 = v56;
          v158 = v56;
          *v56 = 0;
          v62 = *(_DWORD *)(a1 + 4);
          v61 = *(_DWORD *)(a1 + 8);
          v63 = v61 * v144;
          v64 = v62 * v161;
          if (v62 >= v162 - v62 * v161)
            v65 = v162 - v62 * v161;
          else
            v65 = *(_DWORD *)(a1 + 4);
          v66 = v155;
          if (v61 >= (int)(v155 - v63))
            v67 = v155 - v63;
          else
            v67 = *(_DWORD *)(a1 + 8);
          v165.i32[0] = v62 * v161;
          v165.i32[1] = v61 * v144;
          v165.i64[1] = __PAIR64__(v67, v65);
          (*(void (**)(uint64_t, uint64_t, float32x4_t *, _BYTE *, uint64_t))(*(_QWORD *)a9 + 16))(a9, v25, &v165, v160, v156);
          if (v159)
          {
            if (v64)
              v68 = -1;
            else
              v68 = 0;
            v148 = v68;
            v69 = v65 + v64;
            if (v63)
              v70 = -1;
            else
              v70 = 0;
            if (v67 + v63 == v66)
              v71 = -1;
            else
              v71 = 0;
            v145 = v71;
            v72 = v65;
            v157 = v65 + v64;
            if (v69 == v162)
              v73 = -1;
            else
              v73 = 0;
            v150 = v73;
            if (v69 != v162)
              v72 = *(_DWORD *)(a1 + 4);
            v151 = v67 + v63;
            v152 = v67;
            if (v67 + v63 != v66)
              v67 = *(_DWORD *)(a1 + 8);
            v74 = v156;
            v75 = v67 * v156;
            v149 = v75;
            v146 = v72 * v139;
            v147 = v63 + v70;
            v165.i32[0] = v64;
            v165.i32[1] = v63 + v70;
            v165.i64[1] = v65 | 0x100000000;
            (*(void (**)(uint64_t, uint64_t, float32x4_t *, _BYTE *, uint64_t))(*(_QWORD *)a9 + 16))(a9, v25, &v165, v136, v156);
            v151 += v145;
            v165.i64[0] = __PAIR64__(v151, v64);
            v165.i64[1] = v65 | 0x100000000;
            (*(void (**)(uint64_t, uint64_t, float32x4_t *, _BYTE *, uint64_t))(*(_QWORD *)a9 + 16))(a9, v25, &v165, &v160[v75], v74);
            v165.i32[0] = v64 + v148;
            *(uint64_t *)((char *)v165.i64 + 4) = v63 | 0x100000000;
            v76 = v64 + v148;
            v77 = v152;
            v165.i32[3] = v152;
            (*(void (**)(uint64_t, uint64_t, float32x4_t *, _BYTE *, uint64_t))(*(_QWORD *)a9 + 16))(a9, v25, &v165, v153, v74);
            v157 += v150;
            v165.i64[0] = __PAIR64__(v63, v157);
            v165.i32[2] = 1;
            v165.i32[3] = v77;
            v78 = &v160[v146];
            (*(void (**)(uint64_t, uint64_t, float32x4_t *, _BYTE *, uint64_t))(*(_QWORD *)a9 + 16))(a9, v25, &v165, v78, v74);
            v79 = v76;
            v165.i64[0] = __PAIR64__(v147, v76);
            v80 = v147;
            v165.i64[1] = 0x100000001;
            (*(void (**)(uint64_t, uint64_t, float32x4_t *, _BYTE *, uint64_t))(*(_QWORD *)a9 + 16))(a9, v25, &v165, v135, v74);
            v165.i64[0] = __PAIR64__(v80, v157);
            v165.i64[1] = 0x100000001;
            (*(void (**)(uint64_t, uint64_t, float32x4_t *, _BYTE *, uint64_t))(*(_QWORD *)a9 + 16))(a9, v25, &v165, &v78[v137], v74);
            v81 = v151;
            v165.i64[0] = __PAIR64__(v151, v79);
            v165.i64[1] = 0x100000001;
            v82 = v149;
            (*(void (**)(uint64_t, uint64_t, float32x4_t *, _BYTE *, uint64_t))(*(_QWORD *)a9 + 16))(a9, v25, &v165, &v153[v149], v74);
            v165.i64[0] = __PAIR64__(v81, v157);
            v165.i64[1] = 0x100000001;
            (*(void (**)(uint64_t, uint64_t, float32x4_t *, _BYTE *, uint64_t))(*(_QWORD *)a9 + 16))(a9, v25, &v165, &v78[v82], v74);
          }
          v83 = v163;
          if (i != *(uint64_t **)(a1 + 112))
          {
            CA::OGL::Mosaic::bind_buffer(a1, v163, (uint64_t)i, a9);
            v83 = v163;
          }
          v84 = v158;
          v85 = *((_DWORD *)v158 + 5);
          v86 = v159;
          v32 = (uint64_t *)v142;
          if (v85 && v85 > *((_DWORD *)v83 + 54))
          {
            if ((v141 & 1) == 0)
              (*(void (**)(uint64_t))(*(_QWORD *)a9 + 48))(a9);
            if ((*(_WORD *)(*(_QWORD *)(a1 + 160) + 58) & 0x400) != 0)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a9 + 40))(a9, *((unsigned int *)v84 + 5));
            v141 = 1;
          }
          if (*(_DWORD *)(a1 + 8) + v86 != 1)
            v65 = *(_DWORD *)(a1 + 4);
          (*(void (**)(uint64_t *, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*v163 + 600))(v163, *(_QWORD *)(a1 + 160), i[2], *(unsigned int *)(a1 + 152), *((__int16 *)v84 + 8) - v140, *((__int16 *)v84 + 9) - v140, v65 + v86);
          *((_DWORD *)v84 + 5) = 0;
          v20 = v154;
          v30 = *((__int16 *)v154 + 24);
          v31 = v84;
          if (++v161 >= v30)
          {
            v34 = v30;
            LOWORD(v30) = *((_WORD *)v154 + 25);
            v31 = v84;
            a2 = v163;
            v26 = v155;
            goto LABEL_99;
          }
          continue;
        }
        v91 = i[3];
        if (v91)
          MEMORY[0x186DBD978](v91, 0x1020C8062D53EE8);
        v92 = (malloc_zone_t *)get_malloc_zone();
        malloc_zone_free(v92, i);
      }
    }
    break;
  }
  v93 = v154;
  v94 = v154[4];
  if (v94)
    (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
  v95 = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(v95, v93);
}

void CA::CG::MosaicBitmapDelegate::read(CA::CG::MosaicBitmapDelegate *this, CA::Render *a2, const CA::Bounds *a3, unsigned __int8 *a4, uint64_t a5)
{
  unsigned int v5;
  char *v10;
  int v11;
  uint64_t v12;
  char *v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  size_t v21;
  _BYTE *v22;
  CGContext *v23;
  int v24;
  uint64_t v25;
  char *v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  char *v32;
  int v33;
  uint64_t v34;
  unsigned int v35;

  if (a2 > 0x12)
    return;
  v5 = a2;
  if (((1 << (char)a2) & 0x42800) == 0)
    return;
  v10 = (char *)*((_QWORD *)this + 6);
  if (v10)
    goto LABEL_4;
  v18 = CA::Render::format_rowbytes(a2, *((_DWORD *)this + 6));
  v19 = *((unsigned int *)this + 7);
  if (!is_mul_ok(v18, v19))
    return;
  v20 = v18;
  v21 = v18 * v19;
  if (!(v18 * v19))
    return;
  if (v21 <= *((_QWORD *)this + 5))
  {
    v10 = (char *)*((_QWORD *)this + 4);
    bzero(v10, v21);
  }
  else
  {
    v10 = (char *)malloc_type_calloc(v21, 1uLL, 0x907AB817uLL);
    if (!v10)
      return;
  }
  v22 = CAGetCachedCGBitmapContext_(v10, *((_DWORD *)this + 6), *((_DWORD *)this + 7), v5, v20, *(CGColorSpaceRef *)(*((_QWORD *)this + 2) + 144));
  if (v22)
  {
    v23 = (CGContext *)*((_QWORD *)v22 + 2);
    if (v23)
    {
      (*(void (**)(CA::CG::MosaicBitmapDelegate *, CGContext *))(*(_QWORD *)this + 56))(this, v23);
      CAReleaseCachedCGContext(v23);
      *((_QWORD *)this + 6) = v10;
      *((_QWORD *)this + 7) = v20;
LABEL_4:
      switch(v5)
      {
        case 0xBu:
          v11 = *((_DWORD *)a3 + 3);
          if (v11 >= 1)
          {
            v12 = *((_QWORD *)this + 7);
            v13 = &v10[4 * *(_DWORD *)a3 + v12 * *((int *)a3 + 1)];
            do
            {
              v14 = *((_DWORD *)a3 + 2);
              if (v14 >= 1)
              {
                v15 = 0;
                v16 = v14 + 1;
                do
                {
                  *(_DWORD *)&a4[v15] = *(_DWORD *)&v13[v15];
                  --v16;
                  v15 += 4;
                }
                while (v16 > 1);
              }
              v13 += v12;
              a4 += a5;
              v17 = v11-- <= 1;
            }
            while (!v17);
          }
          break;
        case 0x12u:
          v24 = *((_DWORD *)a3 + 3);
          if (v24 >= 1)
          {
            v25 = *((_QWORD *)this + 7);
            v26 = &v10[2 * *(_DWORD *)a3 + v25 * *((int *)a3 + 1)];
            v27 = *((_DWORD *)a3 + 2);
            do
            {
              if (v27 >= 1)
              {
                v28 = 0;
                v29 = v27 + 1;
                do
                {
                  *(_WORD *)&a4[v28] = *(_WORD *)&v26[v28];
                  --v29;
                  v28 += 2;
                }
                while (v29 > 1);
              }
              v26 += v25;
              a4 += a5;
              v17 = v24-- <= 1;
            }
            while (!v17);
          }
          break;
        case 0xDu:
          v30 = *((_DWORD *)a3 + 3);
          if (v30 >= 1)
          {
            v31 = *((_QWORD *)this + 7);
            v32 = &v10[8 * *(_DWORD *)a3 + v31 * *((int *)a3 + 1)];
            v33 = *((_DWORD *)a3 + 2);
            do
            {
              if (v33 >= 1)
              {
                v34 = 0;
                v35 = v33 + 1;
                do
                {
                  *(_QWORD *)&a4[v34] = *(_QWORD *)&v32[v34];
                  --v35;
                  v34 += 8;
                }
                while (v35 > 1);
              }
              v32 += v31;
              a4 += a5;
              v17 = v30-- <= 1;
            }
            while (!v17);
          }
          break;
      }
      return;
    }
  }
  if (v10 != *((char **)this + 4))
    free(v10);
}

uint64_t CA::CG::PathDelegate::read(uint64_t this, int a2, const CA::Bounds *a3, unsigned __int8 *a4, uint64_t a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;

  if (a2 == 9)
  {
    v5 = *((_DWORD *)a3 + 3);
    if (v5 >= 1)
    {
      v6 = *(_QWORD *)(this + 32);
      v7 = *(_QWORD *)(this + 24) + *(int *)(v6 + 8) * (uint64_t)*((int *)a3 + 1) + *(int *)a3;
      do
      {
        v8 = *((_DWORD *)a3 + 2);
        if (v8 >= 1)
        {
          v9 = 0;
          v10 = v8 + 1;
          do
          {
            a4[v9] = *(_BYTE *)(v7 + v9);
            --v10;
            ++v9;
          }
          while (v10 > 1);
          v6 = *(_QWORD *)(this + 32);
        }
        v7 += *(int *)(v6 + 8);
        a4 += a5;
      }
      while (v5-- > 1);
    }
  }
  return this;
}

double CA::CG::ImageRectDelegate::aa_quad(CA::CG::ImageRectDelegate *this, int32x2_t *a2, double *a3, __int32 a4)
{
  unsigned int v8;
  float32x2_t *v9;
  double result;

  v8 = *((_DWORD *)this + 348);
  if (v8 == 32)
  {
    CA::CG::ImageRectDelegate::draw_image_rects((uint64_t)this);
    v8 = *((_DWORD *)this + 348);
  }
  *((_DWORD *)this + 348) = v8 + 1;
  v9 = (float32x2_t *)((char *)this + 40 * v8);
  v9[14] = vcvt_f32_s32(*a2);
  v9[15] = vcvt_f32_s32(vadd_s32(a2[1], *a2));
  v9[16] = *(float32x2_t *)a3;
  result = a3[1];
  *(double *)&v9[17] = result;
  v9[18].i32[0] = a4;
  return result;
}

double CA::CG::ImageRectDelegate::quad(CA::CG::ImageRectDelegate *this, int32x2_t *a2, double *a3)
{
  return CA::CG::ImageRectDelegate::aa_quad(this, a2, a3, 0);
}

_QWORD *CA::OGL::MetalContext::modify_subimage_impl(_QWORD *result, unint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  _QWORD *v15;
  unint64_t v16;
  int v17;
  int v18;
  void *v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD v22[7];

  v22[6] = *MEMORY[0x1E0C80C00];
  if (a2 && *(_BYTE *)(a3 + 153) == 1 && !*(_QWORD *)(a3 + 160))
  {
    v15 = result;
    v16 = *(unsigned __int8 *)(a3 + 152);
    if (v16 > 0x25)
      v17 = 0;
    else
      v17 = dword_184750480[v16];
    v18 = v17 * a7;
    CA::OGL::MetalContext::update_texture_plane(result, a2, a4, 0, v16, *(_DWORD *)(a3 + 16), *(_DWORD *)(a3 + 20));
    v19 = *(void **)(a2 + 64);
    v22[0] = a5;
    v22[1] = a6;
    v22[2] = 0;
    v22[3] = a7;
    v22[4] = a8;
    v22[5] = 1;
    result = (_QWORD *)objc_msgSend(v19, "replaceRegion:mipmapLevel:withBytes:bytesPerRow:", v22, 0, a9, v18);
    v20 = (unsigned int *)(a3 + 36);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
    *(_DWORD *)(a2 + 16) = *v20;
    *(_WORD *)(a2 + 123) &= ~1u;
    v15[89] += v18 * a8;
  }
  return result;
}

float CA::CG::PathDelegate::quad(CA::CG::PathDelegate *this, const CA::Bounds *a2, float *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  float result;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *((_QWORD *)this + 2);
  v7 = 6;
  if (!*(_DWORD *)(v6 + 92))
    v7 = 4;
  if ((unint64_t)(*(_QWORD *)(v6 + 128) + 4) > *(_QWORD *)(v6 + 136)
    || (v8 = *(_QWORD *)(v6 + 112)) != 0 && *(_QWORD *)(v6 + 104) + v7 > v8)
  {
    CA::CG::MosaicDelegate::draw_array(*((CA::CG::MosaicDelegate **)this + 2));
  }
  v9 = (_DWORD *)*((_QWORD *)this + 4);
  v10 = *((double *)this + 5);
  v11 = v10 * (double)(*(_DWORD *)a2 + *v9);
  v12 = v10 * (double)(*((_DWORD *)a2 + 1) + v9[1]);
  v13 = v11 + v10 * (double)*((int *)a2 + 2);
  v14 = v12 + v10 * (double)*((int *)a2 + 3);
  *(float *)&v11 = v11;
  *(float *)&v10 = v12;
  *(float *)&v12 = v13;
  *(float *)&v13 = v14;
  CA::OGL::Context::array_rect((_QWORD *)v6, *(float *)&v11, *(float *)&v10, *(float *)&v12, *(float *)&v13);
  result = *a3;
  v16 = *((_DWORD *)a3 + 1);
  v17 = *((_DWORD *)a3 + 2);
  v18 = *((_DWORD *)a3 + 3);
  v19 = *(_QWORD *)(v6 + 120) + 48 * *(_QWORD *)(v6 + 128);
  *(float *)(v19 - 176) = *a3;
  *(_DWORD *)(v19 - 172) = v16;
  *(_DWORD *)(v19 - 128) = v17;
  *(_DWORD *)(v19 - 124) = v16;
  *(_DWORD *)(v19 - 80) = v17;
  *(_DWORD *)(v19 - 76) = v18;
  *(float *)(v19 - 32) = result;
  *(_DWORD *)(v19 - 28) = v18;
  v20 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8);
  *(_QWORD *)(v19 - 160) = v20;
  *(_QWORD *)(v19 - 112) = v20;
  *(_QWORD *)(v19 - 64) = v20;
  *(_QWORD *)(v19 - 16) = v20;
  return result;
}

float CA::CG::GlyphDelegate::quad(CA::CG::GlyphDelegate *this, int32x2_t *a2, float *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int32x2_t *v12;
  uint64_t v13;
  unsigned int v14;
  float v15;
  float result;
  int v17;
  int v18;
  int v19;
  int32x2_t v20;
  int32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;

  v6 = *((_QWORD *)this + 2);
  v7 = 4;
  if (*(_DWORD *)(v6 + 92))
    v7 = 6;
  v8 = *(_QWORD *)(v6 + 128);
  v9 = v8 + 4;
  if ((unint64_t)(v8 + 4) > *(_QWORD *)(v6 + 136)
    || (v10 = *(_QWORD *)(v6 + 112)) != 0 && *(_QWORD *)(v6 + 104) + v7 > v10)
  {
    CA::CG::MosaicDelegate::draw_array(*((CA::CG::MosaicDelegate **)this + 2));
    v8 = *(_QWORD *)(v6 + 128);
    v9 = v8 + 4;
  }
  v11 = *(_QWORD *)(v6 + 120) + 48 * v8;
  *(_QWORD *)(v6 + 128) = v9;
  CA::OGL::Context::array_indices(v6, v8);
  v13 = *((_QWORD *)this + 9);
  v12 = (int32x2_t *)*((_QWORD *)this + 10);
  v14 = *((_DWORD *)this + 15);
  v15 = *((float *)this + 13);
  result = *a3;
  v17 = *((_DWORD *)a3 + 1);
  v18 = *((_DWORD *)a3 + 2);
  v19 = *((_DWORD *)a3 + 3);
  *(float *)(v11 + 16) = *a3;
  *(_DWORD *)(v11 + 20) = v17;
  v20 = *(int32x2_t *)(v13 + 12);
  v21.i32[0] = v14;
  v21.i32[0] = vadd_s32(vsub_s32(v20, v21), *a2).u32[0];
  v21.i32[1] = vsub_s32(vadd_s32(v20, vdup_n_s32(v14)), *a2).i32[1];
  v22 = vrnd_f32(vmla_n_f32(vcvt_f32_s32(*v12), vcvt_f32_s32(v21), v15));
  v23 = vmul_n_f32(vcvt_f32_s32(a2[1]), v15);
  v20.i32[0] = vadd_f32(v23, v22).u32[0];
  v21.i32[0] = v20.i32[0];
  v21.i32[1] = vsub_f32(v22, v23).i32[1];
  *(float32x2_t *)v11 = v22;
  *(_QWORD *)(v11 + 8) = 0x3F80000000000000;
  *(_QWORD *)(v11 + 32) = *((_QWORD *)this + 3);
  v20.i32[1] = v22.i32[1];
  *(int32x2_t *)(v11 + 48) = v20;
  *(_QWORD *)(v11 + 56) = 0x3F80000000000000;
  *(_DWORD *)(v11 + 64) = v18;
  *(_DWORD *)(v11 + 68) = v17;
  *(_QWORD *)(v11 + 80) = *((_QWORD *)this + 3);
  *(int32x2_t *)(v11 + 96) = v21;
  *(_QWORD *)(v11 + 104) = 0x3F80000000000000;
  *(_DWORD *)(v11 + 112) = v18;
  *(_DWORD *)(v11 + 116) = v19;
  *(_QWORD *)(v11 + 128) = *((_QWORD *)this + 3);
  v22.i32[1] = v21.i32[1];
  *(float32x2_t *)(v11 + 144) = v22;
  *(_QWORD *)(v11 + 152) = 0x3F80000000000000;
  *(float *)(v11 + 160) = result;
  *(_DWORD *)(v11 + 164) = v19;
  *(_QWORD *)(v11 + 176) = *((_QWORD *)this + 3);
  return result;
}

char *CA::CG::GlyphDelegate::read(CA::CG::GlyphDelegate *this, int a2, const CA::Bounds *a3, unsigned __int8 *a4, uint64_t a5)
{
  _DWORD *v10;
  int v11;
  unsigned __int8 *v12;
  const unsigned __int8 *v13;
  char *result;
  unint64_t v15;
  int v16;
  size_t v17;
  int v18;
  float v19;
  char *v20;
  int v21;
  char *v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  BOOL v26;
  int v27;
  char *v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  _BYTE *v33;
  _BYTE *v34;
  int v35;
  char *v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  char *v41;
  int v42;
  uint64_t v43;
  unsigned int v44;

  v10 = (_DWORD *)*((_QWORD *)this + 9);
  v11 = *((_DWORD *)this + 16);
  if (!v11)
  {
    result = (char *)(v10 + 10);
    v16 = v10[7];
    LODWORD(v12) = v10[8];
    goto LABEL_15;
  }
  v12 = (unsigned __int8 *)(v10[5] + v11);
  v13 = (const unsigned __int8 *)(v10[6] + v11);
  result = (char *)*((_QWORD *)this + 11);
  if (!result)
  {
    LODWORD(v15) = (_DWORD)v13 * (_DWORD)v12;
    goto LABEL_7;
  }
  v15 = ((_DWORD)v13 * (_DWORD)v12);
  if (*((_QWORD *)this + 12) < v15)
  {
    free(result);
LABEL_7:
    if (v15 <= 0x1000)
      v17 = 4096;
    else
      v17 = v15;
    *((_QWORD *)this + 12) = v17;
    result = (char *)malloc_type_malloc(v17, 0x2589D4D0uLL);
    *((_QWORD *)this + 11) = result;
    v18 = ~v10[9];
    *((_DWORD *)this + 26) = v18;
    goto LABEL_12;
  }
  v18 = *((_DWORD *)this + 26);
LABEL_12:
  if (v18 != v10[9])
  {
    bzero(result, ((_DWORD)v13 * (_DWORD)v12));
    CGBlt_copyBytes();
    v19 = *(double *)(*((_QWORD *)this + 1) + 80) * *((float *)this + 12) * *(float *)(*((_QWORD *)this + 5) + 76);
    *((_DWORD *)this + 26) = v10[9];
    result = (char *)*((_QWORD *)this + 11);
  }
  v16 = 8;
LABEL_15:
  v20 = &result[*((int *)a3 + 1) * (unint64_t)v12];
  if (a2 == 20)
  {
    if (v16 == 16)
    {
      v40 = *((_DWORD *)a3 + 3);
      if (v40 >= 1)
      {
        v41 = &v20[2 * *(_DWORD *)a3];
        v42 = *((_DWORD *)a3 + 2);
        do
        {
          if (v42 >= 1)
          {
            v43 = 0;
            v44 = v42 + 1;
            do
            {
              *(_WORD *)&a4[v43] = (2 * *(_WORD *)&v41[v43]) | 1;
              --v44;
              v43 += 2;
            }
            while (v44 > 1);
          }
          v41 += v12;
          a4 += a5;
          v26 = v40-- <= 1;
        }
        while (!v26);
      }
    }
    else if (v16 == 8)
    {
      v27 = *((_DWORD *)a3 + 3);
      if (v27 >= 1)
      {
        v28 = &v20[*(int *)a3];
        v29 = *((_DWORD *)a3 + 2);
        do
        {
          if (v29 >= 1)
          {
            v30 = 0;
            v31 = v29 + 1;
            do
            {
              *(_WORD *)&a4[2 * v30] = (2114 * (v28[v30] >> 3)) | 1;
              --v31;
              ++v30;
            }
            while (v31 > 1);
          }
          v28 += v12;
          a4 += a5;
          v26 = v27-- <= 1;
        }
        while (!v26);
      }
    }
  }
  else if (a2 == 9)
  {
    if (v16 == 16)
    {
      v32 = *((_DWORD *)this + 8);
      v33 = &CA::CG::identity_map;
      if (v32 == 2)
        v33 = &CA::CG::white_on_black_map;
      if (v32 == 1)
        v34 = &CA::CG::black_on_white_map;
      else
        v34 = v33;
      v35 = *((_DWORD *)a3 + 3);
      if (v35 >= 1)
      {
        v36 = &v20[2 * *(_DWORD *)a3];
        do
        {
          v37 = *((_DWORD *)a3 + 2);
          if (v37 >= 1)
          {
            v38 = 0;
            v39 = v37 + 1;
            do
            {
              a4[v38] = v34[*(_WORD *)&v36[2 * v38] & 0x1F];
              --v39;
              ++v38;
            }
            while (v39 > 1);
          }
          v36 += v12;
          a4 += a5;
          v26 = v35-- <= 1;
        }
        while (!v26);
      }
    }
    else if (v16 == 8)
    {
      v21 = *((_DWORD *)a3 + 3);
      if (v21 >= 1)
      {
        v22 = &v20[*(int *)a3];
        do
        {
          v23 = *((_DWORD *)a3 + 2);
          if (v23 >= 1)
          {
            v24 = 0;
            v25 = v23 + 1;
            do
            {
              a4[v24] = v22[v24];
              --v25;
              ++v24;
            }
            while (v25 > 1);
          }
          v22 += v12;
          a4 += a5;
          v26 = v21-- <= 1;
        }
        while (!v26);
      }
    }
  }
  return result;
}

uint64_t CA::OGL::Mosaic::bind_buffer(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  float32x2_t *v6;
  _OWORD *v7;
  float32x2_t v8;
  float32x4_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(result + 112) != a3)
  {
    v6 = (float32x2_t *)result;
    if (*(_QWORD *)(result + 160))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a4 + 48))(a4);
      (*(void (**)(uint64_t *, _QWORD, _QWORD))(*a2 + 520))(a2, *(_QWORD *)&v6[20], v6[18].u32[0]);
      v6[20] = 0;
      v6[19].i32[0] = -1;
    }
    v6[14] = (float32x2_t)a3;
    v9 = 0uLL;
    v7 = CA::OGL::Context::bind_image((uint64_t)a2, v6[18].u32[0], *(uint32x2_t **)(a3 + 16), (double *)0x103F, v6[18].u8[4], v6[18].u8[5], 0, 0, 0.0, &v9, 0);
    v6[20] = (float32x2_t)v7;
    if (v7)
    {
      v8 = vsub_f32(*(float32x2_t *)&v9.u32[2], *(float32x2_t *)v9.f32);
      v6[22] = *(float32x2_t *)v9.f32;
      v6[23] = v8;
      result = CA::OGL::state_image_texture_unit(a2[2], v6[18].i32[0]);
    }
    else
    {
      v6[14] = 0;
      result = 0xFFFFFFFFLL;
    }
    v6[19].i32[0] = result;
  }
  return result;
}

uint64_t CA::CG::ImageRectDelegate::ImageRectDelegate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, char a8, float64x2_t *a9, char a10, uint64_t a11)
{
  uint64_t v13;
  uint64_t v14;
  CA::Transform *v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  float *v19;
  float32x4_t v21;
  _BYTE v22[24];
  uint64_t v23;
  float32x2x2_t v24;

  v23 = *MEMORY[0x1E0C80C00];
  CA::CG::ImageDelegate::ImageDelegate(a1, a2, a3, a4, a5, a6, a7, a8, a9->f64, a10, a11);
  *(_QWORD *)v13 = &off_1E1592AD8;
  *(_DWORD *)(v13 + 1392) = 0;
  v14 = v13 + 1400;
  *(_BYTE *)(*(_QWORD *)(a3 + 16) + 16) = 93;
  CA::Transform::operator=(v13 + 1400, (uint64_t)&CA::identity_transform);
  CA::Transform::translate(v15, a9[2].f64[0], a9[2].f64[1], 0.0);
  *(_QWORD *)(a3 + 800) = v14;
  ++*(_DWORD *)(a3 + 240);
  v16 = *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8);
  v17 = (*(unsigned __int16 *)(a3 + 816) >> 12) & 7;
  v18 = HIWORD(v16);
  if (v17 == 2)
    goto LABEL_4;
  if (v17 == 1)
  {
    v16 = v16 & 0xFFFFFFFFFFFF0000 | v18;
LABEL_4:
    v16 = v16 & 0xFFFF00000000FFFFLL | (v18 << 16) | (v18 << 32);
  }
  v21 = vcvtq_f32_f16((float16x4_t)v16);
  v24.val[1] = vcvt_f32_f64(a9[1]);
  v24.val[0] = vcvt_f32_f64(*a9);
  v19 = (float *)v22;
  vst2_f32(v19, v24);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a3 + 1000))(a3, 0, 4, 1, v22);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *))(*(_QWORD *)a3 + 1000))(a3, 1, 4, 1, &v21);
  return a1;
}

float64x2_t CA::CG::ImageDelegate::ImageDelegate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, char a8, double *a9, char a10, uint64_t a11)
{
  double v12;
  double v13;
  double v14;
  BOOL v15;
  double v16;
  float64x2_t result;

  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a3 + 96) = a3 + 818;
  *(_QWORD *)(a3 + 128) = 0;
  *(_OWORD *)(a3 + 104) = xmmword_18474E060;
  *(_DWORD *)(a1 + 24) = a5;
  *(_DWORD *)(a1 + 28) = a6;
  *(_QWORD *)(a1 + 32) = a11;
  *(_QWORD *)(a1 + 40) = 0x2000;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &off_1E1591D60;
  *(_QWORD *)(a1 + 64) = a4;
  *(_DWORD *)(a1 + 72) = a7;
  *(_BYTE *)(a1 + 76) = a8;
  *(_QWORD *)(a1 + 80) = a9;
  *(_BYTE *)(a1 + 88) = a10;
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(*(_QWORD *)(a3 + 16) + 16);
  v12 = *a9 * *a9 + a9[1] * a9[1];
  v13 = a9[2] * a9[2] + a9[3] * a9[3];
  v14 = 1.0;
  v15 = v12 == 1.0 && v13 == 1.0;
  v16 = 1.0;
  if (!v15)
  {
    v14 = 1.0 / sqrt(v12);
    v16 = 1.0 / sqrt(v13);
  }
  *(double *)(a1 + 96) = v14;
  *(double *)(a1 + 104) = v16;
  result = vaddq_f64(*(float64x2_t *)(a1 + 96), *(float64x2_t *)(a1 + 96));
  *(float64x2_t *)(a1 + 96) = result;
  return result;
}

uint64_t CA::OGL::ContentsGeometry::ContentsGeometry(uint64_t a1, int a2, int a3, unsigned int a4, _OWORD *a5, int *a6, double *a7, int a8, int a9)
{
  _QWORD *v15;
  CA::Transform *v16;
  double *v17;
  unsigned int v22;
  double v23;
  double v24;
  int v25;
  int v26;
  double v27;
  double v28;
  int v30;
  int v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  int v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float64x2_t v44;

  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_OWORD *)(a1 + 8) = *a5;
  v15 = (_QWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = a5[1];
  v16 = (CA::Transform *)(a1 + 104);
  CA::Transform::set_affine((CA::Transform *)(a1 + 104), *a7, a7[1], a7[2], a7[3], a7[4], a7[5]);
  __asm { FMOV            V0.2D, #1.0 }
  v44 = _Q0;
  *(float64x2_t *)(a1 + 256) = _Q0;
  *(_BYTE *)(a1 + 272) = 1;
  *(_DWORD *)(a1 + 308) = a8;
  *(_DWORD *)(a1 + 312) = a9;
  *(_DWORD *)(a1 + 316) = -1082130432;
  if (a4 - 33 >= 3)
  {
    if (a4 > 0x23)
      LOBYTE(v22) = 0;
    else
      v22 = dword_184750518[a4];
  }
  else
  {
    LOBYTE(v22) = 9;
  }
  *(_BYTE *)(a1 + 336) = v22;
  *(_DWORD *)(a1 + 337) = 0;
  *(_DWORD *)(a1 + 490) = 0;
  *(_DWORD *)(a1 + 493) = 0;
  v23 = *(double *)(a1 + 8);
  v24 = *(double *)(a1 + 16);
  if (v23 != 0.0 || v24 != 0.0)
  {
    _Q0 = CA::Transform::translate(v16, v23, v24, 0.0);
    *v15 = 0;
    v15[1] = 0;
  }
  v25 = a6[2];
  v26 = a6[3];
  _Q0.f64[0] = *(float64_t *)(a1 + 24);
  v27 = *(double *)(a1 + 32);
  v28 = (double)v26;
  if (_Q0.f64[0] != (double)v25 || v27 != v28)
  {
    _Q0.f64[0] = _Q0.f64[0] / (double)v25;
    CA::Transform::scale((float64x2_t *)v16, _Q0, v27 / v28, 1.0);
    _Q0.f64[0] = (double)a6[2];
    v27 = (double)a6[3];
    *(float64_t *)(a1 + 24) = _Q0.f64[0];
    *(double *)(a1 + 32) = v27;
    v25 = a6[2];
    v26 = a6[3];
  }
  v31 = *a6;
  v30 = a6[1];
  if (*(_QWORD *)a6 || v25 != a2 || v26 != a3)
  {
    v32 = 1.0 / (float)a2;
    v33 = 1.0 / (float)a3;
    v34 = v32 * (float)v31;
    *(float *)(a1 + 276) = v34;
    v35 = 1.0 - (float)(v33 * (float)(v26 + v30));
    *(float *)(a1 + 280) = v35;
    v36 = v32 * (float)(v25 + v31);
    *(float *)(a1 + 284) = v36;
    v37 = 1.0 - (float)(v33 * (float)v30);
    *(float *)(a1 + 288) = v37;
    v38 = *(_DWORD *)(a1 + 308);
    *(_DWORD *)(a1 + 308) = v38 | 0x400;
    v39 = v32 * 0.5;
    *(float *)(a1 + 392) = v34 + (float)(v32 * 0.5);
    v40 = v33 * 0.5;
    v41 = v35 + v40;
    *(float *)(a1 + 396) = v35 + v40;
    *(float *)(a1 + 400) = v36 - v39;
    v42 = v37 - v40;
    *(float *)(a1 + 404) = v42;
    *(_BYTE *)(a1 + 491) = 1;
    if ((v38 & 0x800) == 0)
    {
      *(float *)(a1 + 396) = 1.0 - v42;
      *(float *)(a1 + 404) = 1.0 - v41;
    }
  }
  *(float64x2_t *)(a1 + 320) = v44;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 8);
  *(float64_t *)(a1 + 56) = _Q0.f64[0];
  *(double *)(a1 + 64) = v27;
  CA::Rect::apply_transform((int8x16_t *)(a1 + 40), v16, v17);
  return a1;
}

double CA::CG::GlyphKey::copy(CA::CG::GlyphKey *this)
{
  malloc_zone_t *malloc_zone;
  double *v3;
  double result;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v3 = (double *)malloc_type_zone_malloc(malloc_zone, 0x18uLL, 0x8BB15036uLL);
  if (v3)
  {
    *(_QWORD *)v3 = off_1E1593A28;
    *((_DWORD *)v3 + 2) = *((_DWORD *)this + 2);
    *((_DWORD *)v3 + 3) = *((_DWORD *)this + 3);
    result = *((double *)this + 2);
    v3[2] = result;
  }
  return result;
}

void CA::CG::ImageDelegate::draw(CA::CG::ImageDelegate *this, CGContext *a2)
{
  unint64_t v4;
  unint64_t v5;
  double v6;
  double v7;
  CGRect v8;
  CGRect v9;
  CGRect v10;

  CGContextSetCompositeOperation();
  CGContextSetInterpolationQuality(a2, *((CGInterpolationQuality *)this + 18));
  LODWORD(v4) = *((_DWORD *)this + 6);
  LODWORD(v5) = *((_DWORD *)this + 7);
  v6 = (double)v4;
  v7 = (double)v5;
  if (*((_BYTE *)this + 76) || CGImageIsMask(*((CGImageRef *)this + 8)))
  {
    CGContextSetRGBFillColor(a2, 1.0, 1.0, 1.0, 1.0);
    v8.origin.x = 0.0;
    v8.origin.y = 0.0;
    v8.size.width = v6;
    v8.size.height = v7;
    CGContextClipToMask(a2, v8, *((CGImageRef *)this + 8));
    v9.origin.x = 0.0;
    v9.origin.y = 0.0;
    v9.size.width = v6;
    v9.size.height = v7;
    CGContextFillRect(a2, v9);
  }
  else
  {
    v10.origin.x = 0.0;
    v10.origin.y = 0.0;
    v10.size.width = v6;
    v10.size.height = v7;
    CGContextDrawImage(a2, v10, *((CGImageRef *)this + 8));
  }
}

BOOL CA::CG::GlyphKey::equal(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
      && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
      && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
      && *(unsigned __int16 *)(a1 + 12) == *(unsigned __int16 *)(a2 + 12)
      && *(unsigned __int8 *)(a1 + 14) == *(unsigned __int8 *)(a2 + 14)
      && *(unsigned __int8 *)(a1 + 15) == *(unsigned __int8 *)(a2 + 15);
}

CA::Render::Texture *CA::OGL::MetalContext::create_mutable_image(CA::OGL::MetalContext *this, CA::Render::Image *a2, unsigned int a3, unsigned int a4, CGColorSpace *a5)
{
  void *v6;
  unint64_t v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v7[0] = 0;
  return CA::Render::Image::new_image(a2, a3, a4, 1u, a5, 0, v7, 0, 0, v6);
}

void ___Z23CABackdropDidChangeLumayf_block_invoke(uint64_t a1)
{
  uint64_t v1;
  float v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  id v9;
  id v10;
  id v11;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(float *)(a1 + 40);
  if (CA::Render::Encoder::initialize_render_id_slide(void)::once[0] != -1)
    dispatch_once(CA::Render::Encoder::initialize_render_id_slide(void)::once, &__block_literal_global_11026);
  if (v1)
    v3 = (void *)(v1 - CA::Render::_render_id_slide);
  else
    v3 = 0;
  v11 = v3;
  os_unfair_lock_lock(&_all_backdrops_lock);
  v4 = *(_QWORD **)(_all_backdrops + 8);
  if (!v4)
    goto LABEL_17;
  v5 = _all_backdrops + 8;
  do
  {
    v6 = v4[4];
    v7 = v6 >= (unint64_t)v11;
    if (v6 >= (unint64_t)v11)
      v8 = v4;
    else
      v8 = v4 + 1;
    if (v7)
      v5 = (uint64_t)v4;
    v4 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 != _all_backdrops + 8 && *(_QWORD *)(v5 + 32) <= (unint64_t)v11)
  {
    v9 = v11;
    os_unfair_lock_unlock(&_all_backdrops_lock);
    +[CATransaction lock](CATransaction, "lock");
    v10 = (id)objc_msgSend(v11, "delegate");
    +[CATransaction unlock](CATransaction, "unlock");
    if ((objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(v10, "backdropLayer:didChangeLuma:", v11, v2);

  }
  else
  {
LABEL_17:
    os_unfair_lock_unlock(&_all_backdrops_lock);
  }
}

void sub_1844EA7AC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(&_all_backdrops_lock);
  _Unwind_Resume(a1);
}

void CA::CG::ShadowStyle::~ShadowStyle(CA::CG::Renderer **this, const void *a2)
{
  malloc_zone_t *malloc_zone;

  *this = (CA::CG::Renderer *)off_1E1593750;
  CA::CG::Renderer::release_object(this[2], a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  *this = (CA::CG::Renderer *)off_1E1593750;
  CA::CG::Renderer::release_object(this[2], a2);
}

void CA::CG::Queue::render_callback(CA::CG::Queue *this, void *a2)
{
  void *v3;
  CA::CG::Queue *v4;
  uint64_t v5;
  void *v6;
  float64x2_t v7;
  CA::CG::Queue *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  CA::CG::TransparencyLayer *v17;
  char v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  CA::CG::TransparencyLayer *v25;
  char *v26;
  char v27;
  CA::CG::TransparencyLayer *v28;
  CA::CG::DrawOp *v29;
  unsigned __int16 *v30;
  uint64_t v31;
  double v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int64x2_t v37;
  int8x16_t v38;
  float64x2_t v39;
  float64x2_t v40;
  int32x4_t v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  char v46;
  char v47;
  int v48;
  CA::CG::DrawOp *v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_signpost_id_t v54;
  os_signpost_id_t v55;
  int v56;
  void *v57;
  float64x2_t v58;
  float64x2_t v59;
  void *v60;
  int v61;
  int v62;
  uint8_t buf[16];
  void *v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x186DBE2E4](this, a2);
  v4 = *(CA::CG::Queue **)this;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 32))(*(_QWORD *)this);
  if (!v5)
  {
    CA::CG::Queue::mark_serial(v4);
    goto LABEL_94;
  }
  *((_QWORD *)this + 1) = v5;
  v6 = (void *)MEMORY[0x186DBE2E4]();
  v8 = *(CA::CG::Queue **)this;
  v9 = BYTE9(xmmword_1ECDC6A90);
  if (BYTE9(xmmword_1ECDC6A90))
    kdebug_trace();
  v10 = *((_QWORD *)this + 1);
  if (!v10)
  {
LABEL_13:
    v14 = 0;
    goto LABEL_14;
  }
  v11 = *(_QWORD *)(v10 + 8);
  if (!v11)
  {
    (*(void (**)(CA::CG::Queue *, _QWORD))(*(_QWORD *)v8 + 40))(v8, *((_QWORD *)this + 1));
    goto LABEL_13;
  }
  if ((*(_BYTE *)(v10 + 4176) & 1) == 0)
  {
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 208))(v11))
    {
      v18 = 0;
      goto LABEL_78;
    }
    v12 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v10 + 8) + 184))(*(_QWORD *)(v10 + 8), 0);
    if ((_DWORD)v12)
    {
      v13 = v12;
      if (x_log_hook_p())
      {
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v10 + 8) + 192))(*(_QWORD *)(v10 + 8), v13);
        x_log_();
      }
      else
      {
        v19 = x_log_category_cg;
        if (os_log_type_enabled((os_log_t)x_log_category_cg, OS_LOG_TYPE_ERROR))
        {
          v20 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v10 + 8) + 192))(*(_QWORD *)(v10 + 8), v13);
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v20;
          _os_log_impl(&dword_184457000, v19, OS_LOG_TYPE_ERROR, "CoreAnimation: rendering error %s\n", buf, 0xCu);
        }
      }
    }
    *(_BYTE *)(v10 + 4176) |= 1u;
    memset(buf, 0, sizeof(buf));
    mach_get_times();
    v21 = *(_QWORD *)&buf[8];
    v22 = *(_QWORD *)(v10 + 8);
    *(double *)(v22 + 224) = CATimeWithHostTime(*(unint64_t *)buf);
    CA::CG::Renderer::update_finished_seed(v10);
    if (BYTE13(xmmword_1ECDC6AD0))
    {
      if (CA::CG::cg_perf_log(void)::once_token[0] != -1)
        dispatch_once(CA::CG::cg_perf_log(void)::once_token, &__block_literal_global_10);
      v53 = CA::CG::cg_perf_log(void)::log;
      v54 = os_signpost_id_generate((os_log_t)CA::CG::cg_perf_log(void)::log);
      *(_QWORD *)(v10 + 4168) = v54;
      if (v54 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v55 = v54;
        if (os_signpost_enabled(v53))
        {
          v56 = *(_DWORD *)(*(_QWORD *)(v10 + 8) + 8);
          v61 = *(_DWORD *)(v10 + 152);
          v57 = _MXSignpostMetricsSnapshot();
          *(_DWORD *)buf = 67240706;
          *(_DWORD *)&buf[4] = v56;
          *(_WORD *)&buf[8] = 1026;
          *(_DWORD *)&buf[10] = v61;
          *(_WORD *)&buf[14] = 2114;
          v64 = v57;
          _os_signpost_emit_with_name_impl(&dword_184457000, v53, OS_SIGNPOST_INTERVAL_BEGIN, v55, "Rendering", "context=%{public,name=context}u update=0x%{public,name=update}x\n%{public, signpost:metrics}@", buf, 0x18u);
        }
      }
    }
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v10 + 8) + 160))(*(_QWORD *)(v10 + 8), v21);
    v23 = *(_QWORD *)(v10 + 8);
    *(_QWORD *)(v23 + 212) = *(_QWORD *)(v10 + 152);
    if (*(double *)(v10 + 296) == 0.0)
      *(double *)(v10 + 296) = *(double *)(v23 + 224) + 0.25;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 1008))(v23, v10 + 1296);
  }
  v62 = v9;
  v24 = *((_QWORD *)this + 2) - 48;
  if (v24 <= *((_QWORD *)this + 3))
  {
    v18 = 1;
    v9 = v62;
    goto LABEL_78;
  }
  v60 = v6;
  v25 = 0;
  v26 = (char *)this + 48;
  v27 = 1;
  v58 = (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL);
  v59 = (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000);
  do
  {
    v28 = (CA::CG::TransparencyLayer *)*((_QWORD *)v26 + 1);
    if (v25 == v28)
    {
      if (v25)
        CA::CG::TransparencyLayer::unref(v25);
      v29 = (CA::CG::DrawOp *)(v26 + 16);
      if ((v27 & 1) == 0)
      {
        v27 = 0;
        goto LABEL_68;
      }
      v28 = v25;
      goto LABEL_60;
    }
    if (v25 == 0 || (v27 & 1) == 0)
    {
      if (!v25)
        goto LABEL_38;
    }
    else
    {
      CA::CG::Renderer::pop_transparency_layer((CA::CG::Renderer *)v10, v25);
      v28 = (CA::CG::TransparencyLayer *)*((_QWORD *)v26 + 1);
    }
    CA::CG::TransparencyLayer::unref(v25);
LABEL_38:
    if (!v28)
      goto LABEL_59;
    v30 = *(unsigned __int16 **)(v10 + 8);
    if (v30 && (*((_BYTE *)v28 + 196) & 8) == 0)
    {
      v31 = *((_QWORD *)v28 + 5);
      if (v31)
        goto LABEL_51;
      v32 = *(double *)(v10 + 80);
      *((double *)v28 + 6) = v32;
      v33 = *(int8x16_t *)((char *)v28 + 8);
      v34 = *(int8x16_t *)((char *)v28 + 24);
      if (v32 != 1.0)
      {
        v7.f64[0] = 1.79769313e308;
        v35 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v7, (float64x2_t)v34).i64[0], 0);
        v36.i64[1] = *((_QWORD *)v28 + 2);
        *(double *)v36.i64 = v32 * *(double *)v33.i64;
        v33 = vbslq_s8(v35, v36, v33);
        v36.i64[1] = *((_QWORD *)v28 + 4);
        *(double *)v36.i64 = v32 * *(double *)v34.i64;
        v34 = vbslq_s8(v35, v36, v34);
        if (*(double *)&v34.i64[1] < 1.79769313e308)
        {
          v33.i64[1] = vmuld_lane_f64(v32, (float64x2_t)v33, 1);
          *(double *)&v34.i64[1] = *(double *)&v34.i64[1] * v32;
        }
      }
      v37 = vceqzq_f64((float64x2_t)v34);
      if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v37, 1), (int8x16_t)v37).u64[0] & 0x8000000000000000) != 0
        || (v38 = vorrq_s8((int8x16_t)vcltzq_f64((float64x2_t)v34), (int8x16_t)vcgezq_f64((float64x2_t)v34)),
            (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v38), 1), v38).u64[0] & 0x8000000000000000) != 0))
      {
        memset(buf, 0, sizeof(buf));
      }
      else
      {
        v39 = vmaxnmq_f64((float64x2_t)v33, v59);
        v40 = vminnmq_f64(vaddq_f64((float64x2_t)v33, (float64x2_t)v34), v58);
        v41 = (int32x4_t)vcvtmq_s64_f64(v39);
        *(int32x4_t *)buf = vuzp1q_s32(v41, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(v40), (int64x2_t)v41));
      }
      CA::Shape::operator=((uint64_t)v28 + 56, buf);
      v31 = (*(uint64_t (**)(unsigned __int16 *, uint64_t, uint8_t *, uint64_t))(*(_QWORD *)v30 + 656))(v30, 1, buf, 8207);
      *((_QWORD *)v28 + 5) = v31;
      if (v31)
      {
LABEL_51:
        v42 = (v30[408] >> 12) & 7;
        *((_BYTE *)v28 + 176) = (v30[408] >> 12) & 7;
        v43 = v30[408];
        if (v42 == 3)
        {
          v44 = v43 & 0xFFFF8FFF | 0x2000;
          v30[408] = v44;
          v45 = v44 >> 12;
          v31 = *((_QWORD *)v28 + 5);
        }
        else
        {
          v45 = v43 >> 12;
        }
        if ((v45 & 4) != 0)
          v46 = 0;
        else
          v46 = 0x1E1F1400u >> (8 * (v45 & 7));
        *(_BYTE *)(v31 + 73) = *(_BYTE *)(v31 + 73) & 0xC0 | v46;
        v47 = *((_BYTE *)v28 + 196);
        *((_BYTE *)v28 + 196) = (4 * *((_BYTE *)v30 + 816)) & 0x10 | v47 & 0xEF;
        CA::OGL::Context::push_surface((uint64_t)v30, *((_QWORD *)v28 + 5), (v47 & 4) != 0, 512, 0);
        v30[408] |= 4u;
        *((_BYTE *)v28 + 196) &= ~4u;
        *((_QWORD *)v28 + 13) = CA::OGL::Context::set_gstate((uint64_t)v30, (uint64_t)v28 + 104);
        *((_BYTE *)v28 + 196) |= 8u;
        *(_QWORD *)(v10 + 1368) = v28;
LABEL_59:
        v29 = (CA::CG::DrawOp *)(v26 + 16);
LABEL_60:
        v48 = *((_DWORD *)v26 + 29) & 0x18;
        if (v48 == 8)
        {
          CA::CG::DrawOp::render(v29, (float64x2_t *)v10);
          v49 = (CA::CG::DrawOp *)*((_QWORD *)v26 + 15);
LABEL_65:
          CA::CG::DrawOp::render(v49, (float64x2_t *)v10);
        }
        else if (!v48 || (CA::CG::DrawOp::render(*((CA::CG::DrawOp **)v26 + 15), (float64x2_t *)v10), v48 == 16))
        {
          v49 = v29;
          goto LABEL_65;
        }
        v27 = 1;
        goto LABEL_67;
      }
    }
    v27 = 0;
    v29 = (CA::CG::DrawOp *)(v26 + 16);
LABEL_67:
    v25 = v28;
LABEL_68:
    (*(void (**)(CA::CG::DrawOp *, uint64_t))(*((_QWORD *)v26 + 2) + 16))(v29, v10);
    (**((void (***)(CA::CG::DrawOp *))v26 + 2))(v29);
    v24 -= *(_QWORD *)v26;
    v26 += *(_QWORD *)v26;
  }
  while (v24 > *((_QWORD *)this + 3));
  if (v25)
    v50 = v27;
  else
    v50 = 0;
  if ((v50 & 1) != 0)
  {
    CA::CG::Renderer::pop_transparency_layer((CA::CG::Renderer *)v10, v25);
    v6 = v60;
    v9 = v62;
    goto LABEL_76;
  }
  v6 = v60;
  v9 = v62;
  if (v25)
LABEL_76:
    CA::CG::TransparencyLayer::unref(v25);
  v18 = 1;
LABEL_78:
  v51 = *(_QWORD *)(v10 + 8);
  if (v51 && *(double *)(v10 + 296) != 0.0)
  {
    v52 = mach_absolute_time();
    *(double *)(v51 + 224) = CATimeWithHostTime(v52);
    if (*(double *)(v10 + 296) >= *(double *)(*(_QWORD *)(v10 + 8) + 224))
      v14 = 0;
    else
      v14 = 3;
    (*(void (**)(CA::CG::Queue *, uint64_t))(*(_QWORD *)v8 + 40))(v8, v10);
    if ((v18 & 1) == 0)
      goto LABEL_14;
  }
  else
  {
    (*(void (**)(CA::CG::Queue *, uint64_t))(*(_QWORD *)v8 + 40))(v8, v10);
    v14 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_86;
LABEL_14:
    v15 = *((_QWORD *)this + 2) - 48;
    if (v15 > *((_QWORD *)this + 3))
    {
      v16 = (char *)this + 48;
      do
      {
        v17 = (CA::CG::TransparencyLayer *)*((_QWORD *)v16 + 1);
        if (v17)
          CA::CG::TransparencyLayer::unref(v17);
        (**((void (***)(uint64_t))v16 + 2))((uint64_t)(v16 + 16));
        v15 -= *(_QWORD *)v16;
        v16 += *(_QWORD *)v16;
      }
      while (v15 > *((_QWORD *)this + 3));
    }
  }
LABEL_86:
  CA::CG::Queue::deallocate_slab(this);
  ++*((_DWORD *)v8 + 42);
  if (dispatch_semaphore_signal((dispatch_semaphore_t)CA::CG::Queue::_queue_sema) && *((int *)v8 + 42) > 7)
  {
    v14 = 1;
    goto LABEL_90;
  }
  if ((_DWORD)v14)
LABEL_90:
    (*(void (**)(CA::CG::Queue *, uint64_t, _QWORD))(*(_QWORD *)v8 + 48))(v8, v14, 0);
  CA::CG::Queue::mark_serial(v8);
  if (v9)
    kdebug_trace();
  objc_autoreleasePoolPop(v6);
LABEL_94:
  objc_autoreleasePoolPop(v3);
}

BOOL CA::OGL::MetalContext::update(CA::OGL::MetalContext *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint8_t v10[8];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 22);
  if (v2 && (v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2)) != 0)
  {
    v4 = *(int *)(v3 + 180) * (uint64_t)*(int *)(v3 + 176);
    if (CADeviceUseCIF10::once != -1)
      dispatch_once(&CADeviceUseCIF10::once, &__block_literal_global_9735);
    v5 = 20;
    if (!CADeviceUseCIF10::enable_cif10)
      v5 = 10;
    v6 = v5 * v4;
    if (v6 <= 0x200000)
      v6 = 0x200000;
  }
  else
  {
    v6 = 0x8000000;
  }
  *((_QWORD *)this + 47) = v6;
  v7 = *((_QWORD *)this + 31);
  if (!v7)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v8 = x_log_category_ogl_metal;
      if (os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v10 = 0;
        _os_log_impl(&dword_184457000, v8, OS_LOG_TYPE_ERROR, "Can't run metal against null surface\n", v10, 2u);
      }
    }
  }
  return v7 != 0;
}

uint64_t CA::OGL::MetalContext::begin_rendering(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  NSString *v8;
  id v9;
  _BOOL4 v10;
  uint64_t v11;
  const char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint32_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_signpost_id_t v22;
  os_signpost_id_t v23;
  NSObject *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint8_t buf[4];
  _BYTE v31[20];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = *(_WORD *)(a1 + 3280);
  *(_WORD *)(a1 + 3280) = v4 & 0xFF7F;
  if (BYTE13(xmmword_1ECDC6AD0))
  {
    if ((v4 & 0x40) == 0)
    {
      *(_QWORD *)(a1 + 4048) = mach_continuous_time();
      v22 = os_signpost_id_generate((os_log_t)CA::OGL::MetalContext::_perf_log);
      *(_QWORD *)(a1 + 4056) = v22;
      if (v22 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v23 = v22;
        v24 = CA::OGL::MetalContext::_perf_log;
        if (os_signpost_enabled((os_log_t)CA::OGL::MetalContext::_perf_log))
        {
          v25 = *(_DWORD *)(a1 + 8);
          v26 = *(_DWORD *)(a1 + 212);
          *(_DWORD *)buf = 67240706;
          *(_DWORD *)v31 = v25;
          *(_WORD *)&v31[4] = 1026;
          *(_DWORD *)&v31[6] = v26;
          *(_WORD *)&v31[10] = 2114;
          *(_QWORD *)&v31[12] = _MXSignpostMetricsSnapshot();
          _os_signpost_emit_with_name_impl(&dword_184457000, v24, OS_SIGNPOST_INTERVAL_BEGIN, v23, "Rendering", "context=%{public,name=context}u update=0x%{public,name=update}x\n%{public, signpost:metrics}@", buf, 0x18u);
        }
      }
    }
  }
  if (*(_QWORD *)(a1 + 3008))
  {
    if ((*(_WORD *)(a1 + 3280) & 4) == 0)
    {
      v5 = *(_QWORD *)(a1 + 176);
      if (v5)
      {
        v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
        if (v6)
        {
          if ((*(_WORD *)(v6 + 656) & 0x1C00) == 0)
            objc_msgSend(*(id *)(a1 + 3000), "setDefaultCaptureScope:", *(_QWORD *)(a1 + 3008));
        }
      }
      *(_WORD *)(a1 + 3280) |= 4u;
    }
    if (initialized[0] != -1)
      dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
    if (!*(float *)&dword_1ECDC69CC || (objc_msgSend(*(id *)(a1 + 3000), "isCapturing") & 1) != 0)
      goto LABEL_33;
    if (objc_msgSend(*(id *)(a1 + 3000), "supportsDestination:", 2))
    {
      v7 = (id)objc_opt_new();
      objc_msgSend(v7, "setDateFormat:", CFSTR("yyyyMMdd-HHmmssSSS"));
      v8 = -[NSString stringByAppendingPathComponent:](NSTemporaryDirectory(), "stringByAppendingPathComponent:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("CoreAnimation-%@.gputrace"), objc_msgSend(v7, "stringFromDate:", objc_msgSend(MEMORY[0x1E0C99D68], "date"))));
      v9 = (id)objc_opt_new();
      objc_msgSend(v9, "setCaptureObject:", *(_QWORD *)(a1 + 2912));
      objc_msgSend(v9, "setDestination:", 2);
      objc_msgSend(v9, "setOutputURL:", objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v8));
      v29 = 0;
      LODWORD(v9) = objc_msgSend(*(id *)(a1 + 3000), "startCaptureWithDescriptor:error:", v9, &v29);
      v10 = x_log_hook_p();
      if ((_DWORD)v9)
      {
        if (v10)
        {
          if (initialized[0] != -1)
            dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
          v27 = *(float *)&dword_1ECDC69CC;
          v28 = -[NSString UTF8String](v8, "UTF8String");
          goto LABEL_23;
        }
        v16 = x_log_category_ogl_metal;
        if (!os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_DEFAULT))
          goto LABEL_33;
        if (initialized[0] != -1)
          dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
        v17 = *(float *)&dword_1ECDC69CC;
        v18 = -[NSString UTF8String](v8, "UTF8String");
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)v31 = v17;
        *(_WORD *)&v31[4] = 2080;
        *(_QWORD *)&v31[6] = v18;
        v12 = "Capturing %d GPU frames to %s\n";
        v13 = v16;
        v14 = OS_LOG_TYPE_DEFAULT;
        v15 = 18;
LABEL_32:
        _os_log_impl(&dword_184457000, v13, v14, v12, buf, v15);
        goto LABEL_33;
      }
      if (!v10)
      {
        v19 = x_log_category_ogl_metal;
        if (!os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_ERROR))
          goto LABEL_33;
        v20 = objc_msgSend((id)objc_msgSend(v29, "localizedDescription"), "UTF8String");
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)v31 = v20;
        v12 = "Unable to capture to GPU trace file: %s\n";
        v13 = v19;
        v14 = OS_LOG_TYPE_ERROR;
        v15 = 12;
        goto LABEL_32;
      }
      v27 = objc_msgSend((id)objc_msgSend(v29, "localizedDescription"), "UTF8String");
    }
    else if (!x_log_hook_p())
    {
      v11 = x_log_category_ogl_metal;
      if (!os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_ERROR))
        goto LABEL_33;
      *(_WORD *)buf = 0;
      v12 = "Capture to a GPU trace file is not supported. Try setting env var: METAL_CAPTURE_ENABLED=1\n";
      v13 = v11;
      v14 = OS_LOG_TYPE_ERROR;
      v15 = 2;
      goto LABEL_32;
    }
LABEL_23:
    x_log_();
LABEL_33:
    objc_msgSend(*(id *)(a1 + 3008), "beginScope", v27, v28);
  }
  return CA::OGL::Context::begin_rendering(a1, a2);
}

void CA::OGL::Context::prepare_context(uint64_t a1, uint64_t a2)
{
  uint64_t i;

  *(_QWORD *)(a1 + 16) = a2 + 488;
  *(_QWORD *)(a1 + 24) = a2;
  *(_DWORD *)(a1 + 416) = global_feature_flags | *(_DWORD *)(a1 + 208);
  if (initialized[0] != -1)
    dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
  for (i = 0; i != 65; ++i)
    *(_DWORD *)(a1 + 428 + 4 * i) = CAGetDebugValueFloat(i);
  *(_QWORD *)(a1 + 232) = 0;
}

uint64_t CA::OGL::Context::begin_rendering(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  __int16 v13;

  for (i = 0; i != 65; ++i)
    *(_DWORD *)(a1 + 4 * i + 428) = CAGetDebugValueFloat(i);
  *(_QWORD *)(a1 + 800) = 0;
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v5 + 480) = 0;
  *(_OWORD *)(v5 + 448) = 0u;
  *(_OWORD *)(v5 + 464) = 0u;
  *(_OWORD *)(v5 + 416) = 0u;
  *(_OWORD *)(v5 + 432) = 0u;
  *(_OWORD *)(v5 + 384) = 0u;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_OWORD *)(v5 + 352) = 0u;
  *(_OWORD *)(v5 + 368) = 0u;
  *(_OWORD *)(v5 + 320) = 0u;
  *(_OWORD *)(v5 + 336) = 0u;
  *(_OWORD *)(v5 + 288) = 0u;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_OWORD *)(v5 + 272) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v6 + 480) = 0;
  *(_OWORD *)(v6 + 448) = 0u;
  *(_OWORD *)(v6 + 464) = 0u;
  *(_OWORD *)(v6 + 416) = 0u;
  *(_OWORD *)(v6 + 432) = 0u;
  *(_OWORD *)(v6 + 384) = 0u;
  *(_OWORD *)(v6 + 400) = 0u;
  *(_OWORD *)(v6 + 352) = 0u;
  *(_OWORD *)(v6 + 368) = 0u;
  *(_OWORD *)(v6 + 320) = 0u;
  *(_OWORD *)(v6 + 336) = 0u;
  *(_OWORD *)(v6 + 288) = 0u;
  *(_OWORD *)(v6 + 304) = 0u;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_OWORD *)(v6 + 272) = 0u;
  *(_OWORD *)(v6 + 224) = 0u;
  *(_OWORD *)(v6 + 240) = 0u;
  *(_OWORD *)(v6 + 192) = 0u;
  *(_OWORD *)(v6 + 208) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_BYTE *)(a1 + 65) &= ~1u;
  *(_BYTE *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 184))(a1, 3);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 232))(a1);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 184))(a1, 8);
  v8 = 0;
  *(_DWORD *)(a1 + 92) = result == 0;
  v9 = *(_QWORD *)(a1 + 16);
  do
  {
    *(_OWORD *)(v9 + 96 + v8) = xmmword_18474E210;
    v8 += 16;
  }
  while (v8 != 48);
  *(_BYTE *)(v9 + 481) &= ~1u;
  v10 = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(v10 + 480) = *(_BYTE *)(a2 + 68);
  *(_QWORD *)(v10 + 288) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 296) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 280) = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 8);
  if ((v11 & 1) != 0)
    v12 = v11 != 1;
  else
    v12 = *(_DWORD *)(v11 + 4) == 12;
  if (v12)
    v13 = 24;
  else
    v13 = 0;
  *(_WORD *)(a1 + 816) = v13 | *(_WORD *)(a1 + 816) & 0xFFE7;
  *(_QWORD *)(a1 + 232) = a2;
  return result;
}

float CAGetDebugValueFloat(unsigned int a1)
{
  float result;

  if (initialized[0] != -1)
    dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
  result = 0.0;
  if (a1 <= 0x40)
    return *(float *)&debug_values[a1];
  return result;
}

double CA::OGL::MetalContext::init_state(CA::OGL::MetalContext *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double result;

  if (!*((_QWORD *)this + 31))
    __assert_rtn("init_state", "ogl-metal.mm", 4544, "current_surface () && \"no such thing as current fbo\"");
  v1 = 0;
  *(_BYTE *)(*((_QWORD *)this + 3) + 16) = 0;
  *(_BYTE *)(*((_QWORD *)this + 3) + 17) = 0;
  *(_BYTE *)(*((_QWORD *)this + 3) + 18) = 0;
  *(_BYTE *)(*((_QWORD *)this + 3) + 19) = 0;
  *(_BYTE *)(*((_QWORD *)this + 3) + 20) = 0;
  v2 = *((_QWORD *)this + 3);
  *(_BYTE *)(v2 + 480) = 1;
  v3 = v2 + 96;
  do
  {
    *(_OWORD *)(v3 + v1) = xmmword_18474E210;
    v1 += 16;
  }
  while (v1 != 48);
  *((_BYTE *)this + 65) &= ~1u;
  result = NAN;
  *((_QWORD *)this + 7) = -1;
  return result;
}

uint64_t CA::OGL::MetalContext::set_render_begin_time(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 4048) = a2;
  *(_WORD *)(this + 3280) |= 0x40u;
  return this;
}

uint64_t CA::WindowServer::IOMFBDisplay::edr_factor_changed(CA::WindowServer::IOMFBDisplay *a1, const CA::Render::LayerNode *a2, CA::Render::Update *this)
{
  float v6;
  float v7;
  float v8;
  float *v9;
  float *v10;
  uint64_t result;

  CA::Render::Update::render_edr_factor(this, a2);
  v7 = v6;
  v8 = *((float *)this + 93);
  v9 = (float *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 5))
  {
    if (CA::WindowServer::IOMFBDisplay::use_assembly_surface(a1))
      v9 = (float *)*((_QWORD *)a2 + 5);
    v10 = v9;
    if (!*((_QWORD *)a2 + 4))
      return 0;
  }
  else
  {
    v10 = (float *)*((_QWORD *)a2 + 4);
    if (!v9)
      return 0;
  }
  if (((*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)a1 + 1528))(a1) & 1) == 0
    && (float)(1.0 / v8) != (*(float (**)(float *))(*(_QWORD *)v10 + 192))(v10))
  {
    return 1;
  }
  result = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)a1 + 1528))(a1);
  if (!(_DWORD)result)
    return result;
  return (float)(1.0 / v7) != v10[17];
}

void CA::WindowServer::IOMFBDisplay::update_display_headroom(CA::WindowServer::IOMFBDisplay *this)
{
  unsigned int *v2;

  (*(void (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1104))(this);
  if (!(*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 872))(this))
    goto LABEL_7;
  if ((*((_BYTE *)this + 746) & 2) == 0)
  {
    if (CADeviceIsVirtualized::once[0] != -1)
      dispatch_once(CADeviceIsVirtualized::once, &__block_literal_global_204);
    if (!CADeviceIsVirtualized::is_virtualized
      && !CA::WindowServer::Display::Mode::is_hdr((CA::WindowServer::IOMFBDisplay *)((char *)this + 640)))
    {
LABEL_7:
      CA::WindowServer::Display::initialize_edr_state(this);
      v2 = (unsigned int *)*((_QWORD *)this + 86);
      if (v2)
        atomic_store(0x3F800000u, v2);
    }
  }
}

uint64_t CA::WindowServer::IOMFBDisplay::allows_edr(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned __int8 *)this + 28060);
}

uint64_t CA::WindowServer::IOMFBDisplay::update_ui_scale_factor(CA::WindowServer::IOMFBDisplay *this)
{
  int v2;
  __n128 v3;

  v2 = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1528))(this);
  v3.n128_u32[0] = 1.0;
  if (v2)
  {
    if (initialized[0] != -1)
      dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
    if (*(float *)&dword_1ECDC698C)
      v3.n128_f32[0] = truncf(*(float *)&dword_1ECDC698C);
    else
      v3.n128_f32[0] = (*(float (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 920))(this);
    v3.n128_f32[0] = v3.n128_f32[0] * 0.01;
  }
  return (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *, __n128))(*(_QWORD *)this + 1088))(this, v3);
}

BOOL CA::WindowServer::IOMFBDisplay::supports_edr_factor(CA::WindowServer::IOMFBDisplay *this)
{
  return *((_BYTE *)this + 28087) && byte_1ECDC6A85 == 0;
}

float CA::WindowServer::IOMFBDisplay::sdr_nits(CA::WindowServer::IOMFBDisplay *this)
{
  return *((float *)this + 6539);
}

uint64_t CA::WindowServer::IOMFBDisplay::set_ui_scale_factor(uint64_t this, float a2)
{
  *(float *)(this + 26140) = a2;
  return this;
}

CA::Shape **CA::WindowServer::AccelServer::render_update(CA::WindowServer::Display **this, CA::Render::Update *a2, unsigned int *a3)
{
  CA::Shape **v6;
  unsigned int *v7;
  CA::OGL::Renderer *v8;

  v6 = (CA::Shape **)(*((uint64_t (**)(CA::WindowServer::Display **))*this + 49))(this);
  if (!v6)
    return CA::WindowServer::Server::render_update(this, a2, v7);
  v8 = (CA::OGL::Renderer *)v6;
  if (CA::WindowServer::Display::render_display(this[12], v6, a2))
    *a3 |= 3u;
  if (BYTE4(xmmword_1ECDC6A70))
    (*(void (**)(_QWORD, const char *))(**(_QWORD **)v8 + 424))(*(_QWORD *)v8, "com.apple.GL.event.frameboundary.end");
  return (CA::Shape **)CA::OGL::Renderer::collect(v8, a2, *((double *)a2 + 9));
}

uint64_t CA::WindowServer::AccelServer::renderer(CA::WindowServer::AccelServer *this)
{
  uint64_t result;
  uint64_t v3;
  id v4;
  malloc_zone_t *malloc_zone;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _BOOL8 v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;

  result = *((_QWORD *)this + 128);
  if (result)
    goto LABEL_12;
  v3 = *((_QWORD *)this + 12);
  v4 = *(id *)(v3 + 296);
  if (!v4)
  {
    v4 = CAMetalContextCreate();
    *(_QWORD *)(v3 + 296) = v4;
    if (!v4)
    {
      result = *((_QWORD *)this + 128);
      if (!result)
        return result;
      goto LABEL_12;
    }
  }
  *((_QWORD *)this + 127) = CA::OGL::new_metal_context(v4, 0, 0, 0, 4, CFSTR("com.apple.coreanimation.AccelServer"));
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v6 = malloc_type_zone_malloc(malloc_zone, 0x68uLL, 0x8BB15036uLL);
  v7 = v6;
  if (v6)
  {
    v8 = *((_QWORD *)this + 127);
    v6[1] = 0;
    v6[2] = 0;
    *v6 = v8;
    v6[6] = malloc_type_malloc(0x40000uLL, 0xA44586FDuLL);
    v7[7] = 0;
    *((_DWORD *)v7 + 24) = 1;
    *((_WORD *)v7 + 50) = 0;
  }
  *((_QWORD *)this + 128) = v7;
  if (CADeviceUseFramebufferCompression::once[0] != -1)
    dispatch_once(CADeviceUseFramebufferCompression::once, &__block_literal_global_22_9761);
  v9 = CADeviceUseFramebufferCompression::enable_compression
    && (unint64_t)(*(_BYTE *)(*((_QWORD *)this + 12) + 28069) == 0);
  (*(void (**)(_QWORD, _BOOL8))(**((_QWORD **)this + 127) + 176))(*((_QWORD *)this + 127), v9);
  result = *((_QWORD *)this + 128);
  *(_QWORD *)(*((_QWORD *)this + 12) + 312) = result;
  if (result)
  {
LABEL_12:
    if ((*(_DWORD *)(*((_QWORD *)this + 12) + 745) & 0x4000) != 0)
      v10 = 33685520;
    else
      v10 = 131088;
    v11 = v10 | *((_DWORD *)this + 46);
    v12 = *((_QWORD *)this + 127);
    v13 = *(_DWORD *)(v12 + 208);
    *(_DWORD *)(v12 + 208) = v11;
    *(_DWORD *)(v12 + 416) = global_feature_flags | v11;
    if (((v13 ^ v11) & 0x2000200) != 0)
    {
      CA::OGL::Context::update_color_program_cache(v12);
      return *((_QWORD *)this + 128);
    }
  }
  return result;
}

uint64_t CA::WindowServer::Display::render_display(CA::WindowServer::Display *this, CA::Shape **a2, CA::Render::Update *a3)
{
  void *v6;
  CA::Shape *v7;
  _QWORD *v8;
  malloc_zone_t *malloc_zone;
  CGColorSpace *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  const CA::Render::LayerNode *v21;
  __n128 v22;
  float v23;
  unsigned int v24;
  const CA::Render::LayerNode *v25;
  float v26;
  float v27;
  CA::WindowServer::SharedEvent *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  CA::Shape *v32;
  unsigned int v33;

  v6 = (void *)MEMORY[0x186DBE2E4]();
  v7 = *a2;
  v8 = (_QWORD *)*((_QWORD *)this + 38);
  if (!v8)
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v8 = malloc_type_zone_malloc(malloc_zone, 0x10uLL, 0x8BB15036uLL);
    if (v8)
    {
      *v8 = off_1E158D840;
      v8[1] = this;
    }
    *((_QWORD *)this + 38) = v8;
  }
  *((_QWORD *)v7 + 22) = v8;
  *(_OWORD *)((char *)v7 + 184) = *(_OWORD *)((char *)this + 200);
  if ((*(unsigned int (**)(CA::WindowServer::Display *))(*(_QWORD *)this + 1832))(this))
  {
    v10 = (CGColorSpace *)(*(uint64_t (**)(CA::WindowServer::Display *))(*(_QWORD *)this + 1792))(this);
    if (v10)
      CA::OGL::Context::set_colorspace(v7, v10);
  }
  v11 = (*(uint64_t (**)(CA::Shape *))(*(_QWORD *)v7 + 1080))(v7);
  v12 = (*(uint64_t (**)(CA::WindowServer::Display *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this
                                                                                                 + 488))(this, 1, v11, *((_QWORD *)a3 + 36), 0);
  v13 = v12;
  if (v12)
  {
    v14 = *(_DWORD *)(v12 + 64);
    if (v14 != 643969848 && v14 != 1647534392)
    {
      if (((*(unsigned int *)(v12 + 224) | ((unint64_t)*(unsigned __int8 *)(v12 + 228) << 32)) & 0x200000000) == 0)
        goto LABEL_26;
LABEL_25:
      CA::Render::Update::set_shape(a3, *((const CA::Shape **)this + 27));
      goto LABEL_26;
    }
    v16 = *((_DWORD *)a3 + 67);
    if ((v16 & 0x2000) != 0 || (v16 & 2) != 0 || BYTE8(xmmword_1ECDC6A90))
    {
      v17 = v12 + 224;
      v19 = *(unsigned int *)(v12 + 224) | ((unint64_t)*(unsigned __int8 *)(v12 + 228) << 32);
      if ((*(_DWORD *)(v12 + 224) & 0x40000000) != 0)
        goto LABEL_24;
      v20 = v19 | 0x80000000;
    }
    else
    {
      v17 = v12 + 224;
      v18 = *(unsigned __int8 *)(v12 + 228);
      v19 = *(unsigned int *)(v12 + 224) | (unint64_t)(v18 << 32);
      if (((v19 >> 30) & 1) == ((v18 >> 1) & 1))
        goto LABEL_24;
      v20 = v19 | 0x80000000;
      if ((v19 & 0x200000000) == 0)
      {
        v19 = v19 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
LABEL_23:
        *(_DWORD *)v17 = v19;
        *(_BYTE *)(v17 + 4) = BYTE4(v19);
LABEL_24:
        if ((v19 & 0x200000000) == 0)
          goto LABEL_26;
        goto LABEL_25;
      }
    }
    v19 = v20 | 0x240000000;
    goto LABEL_23;
  }
LABEL_26:
  CA::OGL::Renderer::prepare_clip_shape((CA::OGL::Renderer *)a2, *((const CA::Render::Update **)a3 + 2));
  CA::Render::Update::render_edr_factor(a3, v21);
  v23 = v22.n128_f32[0];
  if (v13)
  {
    v24 = CA::Render::fourcc_to_format((CA::Render *)*(unsigned int *)(v13 + 64));
    if (((v24 < 0x1D) & (0x17826000u >> v24)) != 0)
      v23 = 1.0;
    (*(void (**)(CA::Shape *, float))(*(_QWORD *)v7 + 1048))(v7, v23);
    if ((*(unsigned int (**)(CA::Shape *, uint64_t))(*(_QWORD *)v7 + 920))(v7, v13))
    {
      if ((*(unsigned int (**)(CA::WindowServer::Display *))(*(_QWORD *)this + 1528))(this))
      {
        CA::Render::Update::render_edr_factor(a3, v25);
        v27 = 1.0 / v26;
      }
      else
      {
        v27 = *((float *)a3 + 93);
        v23 = 1.0 / v27;
      }
      *(float *)(v13 + 68) = v27;
      (*(void (**)(uint64_t, float))(*(_QWORD *)v13 + 200))(v13, v23);
      CA::OGL::Renderer::render((CA::OGL::Renderer *)a2, a3, *(_QWORD *)(v13 + 16), v28);
      v30 = *(_DWORD *)(v13 + 224);
      v29 = v13 + 224;
      v31 = *(unsigned __int8 *)(v29 + 4);
      *(_DWORD *)v29 = v30;
      *(_BYTE *)(v29 + 4) = ((v30 | (unint64_t)(v31 << 32)) & 0xFFFFFFFDFFFFFFFFLL) >> 32;
      (*(void (**)(CA::Shape *, _QWORD))(*(_QWORD *)v7 + 920))(v7, 0);
    }
  }
  else
  {
    (*(void (**)(CA::Shape *, __n128))(*(_QWORD *)v7 + 1048))(v7, v22);
  }
  v32 = a2[2];
  if (v32)
  {
    CA::Shape::unref(v32);
    a2[2] = 0;
  }
  (*(void (**)(CA::Shape *, float))(*(_QWORD *)v7 + 1048))(v7, 1.0);
  *((_QWORD *)v7 + 22) = 0;
  v33 = *((unsigned __int16 *)v7 + 408);
  if ((v33 & 0x80) != 0)
    (*(void (**)(CA::WindowServer::Display *))(*(_QWORD *)this + 504))(this);
  objc_autoreleasePoolPop(v6);
  return (v33 >> 7) & 1;
}

void CA::Render::Update::render_edr_factor(CA::Render::Update *this, const CA::Render::LayerNode *a2)
{
  if (initialized[0] != -1)
    dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
}

uint64_t CA::OGL::MetalContext::set_hdr_scale(uint64_t this, float a2)
{
  *(float *)(this + 2888) = a2;
  return this;
}

uint64_t CA::OGL::MetalContext::make_buffer_current(CA::OGL::MetalContext *this, CA::WindowServer::Surface *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  if (a2)
  {
    result = CA::OGL::MetalContext::get_surface(this, a2, 1);
    if (!result)
      return result;
    v5 = result;
    *((_QWORD *)this + 380) = (*(uint64_t (**)(CA::WindowServer::Surface *))(*(_QWORD *)a2 + 216))(a2);
    CA::OGL::Context::push_surface((uint64_t)this, v5, (*(_WORD *)(v5 + 75) & 0x80) == 0, 0, 0);
    *((_QWORD *)this + 347) = v5;
    *((_QWORD *)this + 348) = *(_QWORD *)(v5 + 120);
  }
  else
  {
    *((_QWORD *)this + 380) = 0;
    CA::OGL::Context::pop_surface(this);
    v6 = *((_QWORD *)this + 32);
    if (v6 != *((_QWORD *)this + 31))
      goto LABEL_5;
    if (v6)
      LODWORD(v6) = (*(unsigned __int8 *)(v6 + 72) >> 1) & 0x1F;
    if (*((_DWORD *)this + 61) != (_DWORD)v6)
LABEL_5:
      CA::OGL::Context::prepare_destination_(this);
    *(_OWORD *)((char *)this + 2776) = 0u;
  }
  return 1;
}

uint64_t CA::WindowServer::IOSurface::set_edr_factor(uint64_t this, float a2)
{
  if (*(float *)(this + 252) != a2)
  {
    *(float *)(this + 252) = a2;
    this = *(_QWORD *)(this + 240);
    if (this)
      return IOSurfaceSetBulkAttachments2();
  }
  return this;
}

uint64_t CA::Render::fourcc_to_format(CA::Render *this)
{
  int v1;
  uint64_t v2;

  v1 = CA::Render::fourcc_compressed_of_type(this, 0, 0);
  if (v1 > 1279342647)
  {
    if (v1 > 1647534391)
    {
      if (v1 > 1999843441)
      {
        switch(v1)
        {
          case 1999843442:
            return 33;
          case 1999908961:
            return 34;
          case 2037741171:
            return 7;
        }
      }
      else
      {
        switch(v1)
        {
          case 1647534392:
            return 35;
          case 1815162994:
            return 31;
          case 1815491698:
            return 21;
        }
      }
      return 0xFFFFFFFFLL;
    }
    if (v1 > 1380401728)
    {
      switch(v1)
      {
        case 1380401729:
          return 11;
        case 1380410945:
          return 14;
        case 1380411457:
          return 13;
      }
      return 0xFFFFFFFFLL;
    }
    if (v1 != 1279342648)
    {
      if (v1 == 1378955371)
        return 32;
      return 0xFFFFFFFFLL;
    }
    return 18;
  }
  if (v1 > 892679472)
  {
    if (v1 <= 1278226487)
    {
      switch(v1)
      {
        case 892679473:
          return 20;
        case 1093677112:
          return 9;
        case 1111970369:
          return 1;
      }
      return 0xFFFFFFFFLL;
    }
    if (v1 == 1278226488)
      return 10;
    if (v1 == 1278555445)
      return 5;
    if (v1 != 1279340600)
      return 0xFFFFFFFFLL;
    return 18;
  }
  if (v1 > 843264103)
  {
    switch(v1)
    {
      case 843264104:
        return 28;
      case 843264310:
        return 27;
      case 846624121:
        return 6;
    }
    return 0xFFFFFFFFLL;
  }
  if (v1 == 16)
    return 4;
  v2 = 0;
  if (v1 != 32)
    return 0xFFFFFFFFLL;
  return v2;
}

void CA::OGL::Renderer::prepare_clip_shape(CA::OGL::Renderer *this, const CA::Render::Update *a2)
{
  CA::Shape *v4;
  int v5;
  const CA::Bounds *v7;
  uint64_t v8;
  CA::Shape *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = (CA::Shape *)*((_QWORD *)this + 2);
  if (v4)
    CA::Shape::unref(v4);
  *((_QWORD *)this + 2) = 0;
  if ((a2 & 1) == 0)
  {
    v10 = 0;
    v11 = 0;
    v5 = *((_DWORD *)a2 + 1);
    if (v5 != 6 && v5 != 12)
    {
      CA::Shape::get_bounds((uint64_t)a2, (int *)&v10);
      if ((*(_BYTE *)(*(_QWORD *)this + 416) & 0x10) != 0
        || (v8 = SHIDWORD(v11) * (uint64_t)(int)v11, v8 < 2 * CA::Shape::area(a2)))
      {
        v9 = (CA::Shape *)*((_QWORD *)this + 2);
        if (v9)
          CA::Shape::unref(v9);
        *((_QWORD *)this + 2) = CA::Shape::new_shape((CA::Shape *)&v10, v7);
      }
    }
  }
}

uint64_t CA::OGL::MetalContext::get_surface(CA::OGL::MetalContext *this, CA::WindowServer::Surface *a2, int a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __IOSurface *v10;
  unint64_t v11;
  uint64_t v12;
  MTLPixelFormat v13;
  _QWORD *v14;
  uint64_t i;
  malloc_zone_t *malloc_zone;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  void (*v20)(CA::OGL::MetalContext *, CA::WindowServer::Surface *, void *);
  uint64_t v21;
  malloc_zone_t *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  int v26;
  const char *v27;
  NSObject *v28;
  os_log_type_t v29;
  uint32_t v30;
  uint64_t v31;
  int v33;
  BOOL v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  _BOOL4 v42;
  _BOOL4 v43;
  int v44;
  __int128 v45;
  int v46;
  __int16 v47;
  __int16 v48;
  int v49;
  int v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  unint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;
  uint8_t buf[4];
  int v83;
  __int16 v84;
  int v85;
  __int16 v86;
  int v87;
  __int16 v88;
  int v89;
  __int16 v90;
  int v91;
  __int16 v92;
  int v93;
  __int16 v94;
  uint64_t Name;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  v6 = (*(uint64_t (**)(CA::WindowServer::Surface *))(*(_QWORD *)a2 + 160))(a2);
  if (!v6)
    return 0;
  v7 = *((unsigned int *)a2 + 14);
  if (!(_DWORD)v7
    || (v8 = *((unsigned int *)a2 + 15), !(_DWORD)v8)
    || (v9 = *((_QWORD *)this + 331), v9 < v7)
    || v9 < v8)
  {
    if (x_log_hook_p())
    {
LABEL_19:
      x_log_();
      return 0;
    }
    v24 = x_log_category_ogl_metal;
    if (!os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_DEFAULT))
      return 0;
    v25 = *((_DWORD *)a2 + 14);
    v26 = *((_DWORD *)a2 + 15);
    *(_DWORD *)buf = 67109376;
    v83 = v25;
    v84 = 1024;
    v85 = v26;
    v27 = "Ignoring [%d x %d] invalid surface dimensions";
    v28 = v24;
    v29 = OS_LOG_TYPE_DEFAULT;
    v30 = 14;
LABEL_22:
    _os_log_impl(&dword_184457000, v28, v29, v27, buf, v30);
    return 0;
  }
  v10 = (__IOSurface *)v6;
  v11 = *((unsigned int *)a2 + 16);
  v12 = CA::OGL::four_cc_to_mtl_format((CA::Render *)v11, *((_DWORD *)this + 669));
  if (!CA::OGL::MetalContext::is_viable_texture_from_iosurface(this, v10, (MTLPixelFormat)v12))
    return 0;
  if (*((void (**)(CA::OGL::MetalContext *, CA::WindowServer::Surface *, void *))a2 + 10) != CA::OGL::MetalContext::release_display_surfaces
    || (v14 = (_QWORD *)*((_QWORD *)a2 + 9)) == 0)
  {
    v80 = a3;
    v81 = v12;
    v14 = (_QWORD *)operator new();
    *v14 = 0;
    for (i = 1; i != 3; ++i)
    {
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      v14[i] = malloc_type_zone_calloc(malloc_zone, 1uLL, 0xF0uLL, 0x743898A5uLL);
    }
    v17 = 1;
    *v14 = this;
    do
    {
      v18 = v14[v17];
      *(_DWORD *)v18 = 1;
      *(_DWORD *)(v18 + 68) = 15;
      *(_BYTE *)(v18 + 72) |= 1u;
      *(_WORD *)(v18 + 75) |= 0x10u;
      *(_QWORD *)(v18 + 48) = (*(uint64_t (**)(CA::WindowServer::Surface *))(*(_QWORD *)a2 + 216))(a2);
      v19 = *(_WORD *)(v18 + 232);
      *(_QWORD *)(v18 + 80) = a2;
      *(_QWORD *)(v18 + 88) = this;
      *(_WORD *)(v18 + 232) = v19 & 0xFD40 | 0xB0;
      ++v17;
    }
    while (v17 != 3);
    v12 = v81;
    if (*((_QWORD **)a2 + 9) != v14)
    {
      v20 = (void (*)(CA::OGL::MetalContext *, CA::WindowServer::Surface *, void *))*((_QWORD *)a2 + 10);
      if (v20)
      {
        if (v20 != CA::OGL::MetalContext::release_display_surfaces)
          ((void (*)(CA::WindowServer::Surface *))v20)(a2);
      }
    }
    *((_QWORD *)a2 + 9) = v14;
    *((_QWORD *)a2 + 10) = CA::OGL::MetalContext::release_display_surfaces;
    os_unfair_lock_lock((os_unfair_lock_t)this + 686);
    v21 = *((_QWORD *)this + 344);
    v22 = (malloc_zone_t *)get_malloc_zone();
    v23 = malloc_type_zone_malloc(v22, 0x10uLL, 0x8BB15036uLL);
    *v23 = v14;
    v23[1] = v21;
    *((_QWORD *)this + 344) = v23;
    os_unfair_lock_unlock((os_unfair_lock_t)this + 686);
    a3 = v80;
  }
  v33 = *((_DWORD *)a2 + 16);
  v34 = v33 == 643969848 || v33 == 1647534392;
  if (v34 && a3)
  {
    v35 = ((*((_DWORD *)a2 + 56) & 0x40000000) == 0) & (*((unsigned __int8 *)this + 2677) >> 1);
    if (v35)
      v12 = 554;
    v31 = v14[v35 + 1];
    if ((*((_DWORD *)a2 + 56) & 0x80000000) != 0)
    {
      v36 = v14[((((*((_DWORD *)a2 + 56) & 0x40000000) == 0) & (*((_BYTE *)this + 2677) >> 1)) == 0) + 1];
      v37 = *(_WORD *)(v31 + 75) & 0xFF7F | (((*(unsigned __int16 *)(v36 + 75) >> 7) & 1) << 7);
      *(_WORD *)(v31 + 75) = *(_WORD *)(v31 + 75) & 0xFF7F | (((*(_WORD *)(v36 + 75) >> 7) & 1) << 7);
      *(_DWORD *)(v31 + 4) = *(_DWORD *)(v36 + 4);
      v38 = *((unsigned int *)a2 + 56) | ((unint64_t)*((unsigned __int8 *)a2 + 228) << 32);
      if ((v38 & 0x200000000) != 0)
      {
        *(_WORD *)(v31 + 75) = v37 | 0x20;
        v38 = *((unsigned int *)a2 + 56) | ((unint64_t)*((unsigned __int8 *)a2 + 228) << 32);
      }
      *((_DWORD *)a2 + 56) = v38 & 0x7FFFFFFF;
      *((_BYTE *)a2 + 228) = (v38 & 0xFFFFFFFF7FFFFFFFLL) >> 32;
    }
  }
  else
  {
    v31 = v14[1];
  }
  if (a3)
  {
    if (CADeviceUseFramebufferCompression::once[0] != -1)
      dispatch_once(CADeviceUseFramebufferCompression::once, &__block_literal_global_22_9761);
    v39 = *((_QWORD *)this + 22);
    if (v39)
    {
      v40 = CADeviceUseFramebufferCompression::enable_compression;
      v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 16))(v39);
      v42 = 0;
      if (v41 && !v40)
        v42 = (*(_WORD *)(v41 + 656) & 0xFD) == 1;
    }
    else
    {
      v42 = 0;
    }
    if (((*(unsigned __int16 *)(v31 + 232) >> 10) & 1) != v42)
      CA::OGL::MetalContext::finalize_surface_textures((uint64_t)this, v31);
    v43 = v42;
  }
  else
  {
    v43 = 0;
  }
  v44 = HIDWORD(*((_QWORD *)a2 + 7));
  v46 = *((_QWORD *)a2 + 7);
  v47 = *(_WORD *)(v31 + 232);
  if (v43)
    v48 = 1024;
  else
    v48 = 0;
  *((_QWORD *)&v45 + 1) = *((_QWORD *)this + 23);
  *(_QWORD *)&v45 = *((_QWORD *)a2 + 7);
  *(_OWORD *)(v31 + 24) = v45;
  *(_QWORD *)(v31 + 40) = *((_QWORD *)this + 24);
  *(_WORD *)(v31 + 232) = v47 & 0xFBFF | v48;
  if (v43)
    v49 = v44;
  else
    v49 = v46;
  if (v43)
    v44 = v46;
  *(_DWORD *)(v31 + 184) = v49;
  *(_DWORD *)(v31 + 188) = v44;
  *(_DWORD *)(v31 + 64) = *((_DWORD *)this + 722);
  if (!*(_QWORD *)(v31 + 96))
  {
    if (v12)
    {
      v51 = (void *)objc_msgSend(MEMORY[0x1E0CC6BB0], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", v12, v49, v44, 0);
      v52 = v51;
      if (a3)
      {
        objc_msgSend(v51, "setFramebufferOnly:", 1);
        if (v43)
          v53 = 3;
        else
          v53 = 0;
        objc_msgSend(v52, "setRotation:", v53);
        v54 = 5;
      }
      else
      {
        v54 = 17;
      }
      objc_msgSend(v52, "setUsage:", v54);
      v55 = (void *)objc_msgSend(*((id *)this + 363), "newTextureWithDescriptor:iosurface:plane:", v52, v10, 0);
      *(_QWORD *)(v31 + 96) = v55;
      objc_msgSend(v55, "setLabel:", CFSTR("com.apple.coreanimation.framebuffer-surface"));
      *(_QWORD *)(v31 + 120) = v12;
      *(_WORD *)(v31 + 232) = *(_WORD *)(v31 + 232) & 0xFFF0 | 1;
      if (*(_QWORD *)(v31 + 96))
      {
        CA::OGL::MetalContext::add_memoryless_textures((uint64_t)this, v31);
        goto LABEL_60;
      }
      if (x_log_hook_p())
      {
        if ((v11 & 0x80000000) != 0)
          __maskrune(v11 >> 24, 0x40000uLL);
        if (BYTE2(v11) > 0x7Fu)
          __maskrune(BYTE2(v11), 0x40000uLL);
        if (BYTE1(v11) > 0x7Fu)
          __maskrune(BYTE1(v11), 0x40000uLL);
        if (v11 > 0x7Fu)
          __maskrune(v11, 0x40000uLL);
        MTLPixelFormatGetName();
        goto LABEL_19;
      }
      v59 = x_log_category_ogl_metal;
      if (!os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_ERROR))
        return 0;
      v60 = 28;
      if ((*(_WORD *)(v31 + 232) & 0x400) != 0)
        v61 = 28;
      else
        v61 = 24;
      v62 = *(_DWORD *)(v31 + v61);
      if ((*(_WORD *)(v31 + 232) & 0x400) != 0)
        v60 = 24;
      v63 = *(_DWORD *)(v31 + v60);
      v64 = MEMORY[0x1E0C80978];
      if ((v11 & 0x80000000) != 0)
        v65 = __maskrune(BYTE3(v11), 0x40000uLL);
      else
        v65 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * BYTE3(v11) + 60) & 0x40000;
      if (v65)
        v73 = (int)v11 >> 24;
      else
        v73 = 32;
      if (BYTE2(v11) <= 0x7Fu)
        v74 = *(_DWORD *)(v64 + 4 * BYTE2(v11) + 60) & 0x40000;
      else
        v74 = __maskrune(BYTE2(v11), 0x40000uLL);
      if (v74)
        v75 = SBYTE2(v11);
      else
        v75 = 32;
      if (BYTE1(v11) <= 0x7Fu)
        v76 = *(_DWORD *)(v64 + 4 * BYTE1(v11) + 60) & 0x40000;
      else
        v76 = __maskrune(BYTE1(v11), 0x40000uLL);
      if (v76)
        v77 = SBYTE1(v11);
      else
        v77 = 32;
      if (v11 <= 0x7Fu)
        v78 = *(_DWORD *)(v64 + 4 * v11 + 60) & 0x40000;
      else
        v78 = __maskrune(v11, 0x40000uLL);
      if (v78)
        v79 = (char)v11;
      else
        v79 = 32;
      *(_DWORD *)buf = 67110658;
      v83 = v62;
      v84 = 1024;
      v85 = v63;
      v86 = 1024;
      v87 = v73;
      v88 = 1024;
      v89 = v75;
      v90 = 1024;
      v91 = v77;
      v92 = 1024;
      v93 = v79;
      v94 = 2080;
      Name = MTLPixelFormatGetName();
      v27 = "Failed to allocate [%d x %d] %c%c%c%c framebuffer %s";
      v28 = v59;
      v29 = OS_LOG_TYPE_ERROR;
      v30 = 48;
    }
    else
    {
      if (x_log_hook_p())
      {
        if ((v11 & 0x80000000) != 0)
          __maskrune(v11 >> 24, 0x40000uLL);
        if (BYTE2(v11) > 0x7Fu)
          __maskrune(BYTE2(v11), 0x40000uLL);
        if (BYTE1(v11) > 0x7Fu)
          __maskrune(BYTE1(v11), 0x40000uLL);
        if (v11 > 0x7Fu)
          __maskrune(v11, 0x40000uLL);
        goto LABEL_19;
      }
      v56 = x_log_category_ogl_metal;
      if (!os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_ERROR))
        return 0;
      v57 = v11 >> 24;
      if ((v11 & 0x80000000) != 0)
        v58 = __maskrune(v57, 0x40000uLL);
      else
        v58 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v57 + 60) & 0x40000;
      if (v58)
        v66 = (int)v11 >> 24;
      else
        v66 = 32;
      if (BYTE2(v11) <= 0x7Fu)
        v67 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * BYTE2(v11) + 60) & 0x40000;
      else
        v67 = __maskrune(BYTE2(v11), 0x40000uLL);
      if (v67)
        v68 = SBYTE2(v11);
      else
        v68 = 32;
      if (BYTE1(v11) <= 0x7Fu)
        v69 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * BYTE1(v11) + 60) & 0x40000;
      else
        v69 = __maskrune(BYTE1(v11), 0x40000uLL);
      if (v69)
        v70 = SBYTE1(v11);
      else
        v70 = 32;
      if (v11 <= 0x7Fu)
        v71 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v11 + 60) & 0x40000;
      else
        v71 = __maskrune(v11, 0x40000uLL);
      *(_DWORD *)buf = 67109888;
      v72 = (char)v11;
      v83 = v66;
      v84 = 1024;
      if (!v71)
        v72 = 32;
      v85 = v68;
      v86 = 1024;
      v87 = v70;
      v88 = 1024;
      v89 = v72;
      v27 = "Unexpected framebuffer format %c%c%c%c\n";
      v28 = v56;
      v29 = OS_LOG_TYPE_ERROR;
      v30 = 26;
    }
    goto LABEL_22;
  }
LABEL_60:
  if ((unint64_t)(v12 - 550) <= 5)
    *(_DWORD *)(v31 + 68) |= 0x100u;
  if (v12 == 115)
  {
    v50 = 16;
  }
  else
  {
    if (v12 != 125)
      goto LABEL_73;
    v50 = 32;
  }
  *(_DWORD *)(v31 + 68) |= v50;
LABEL_73:
  if (!CA::OGL::metal_pixel_format_has_alpha_plane((CA::OGL *)v12, v13))
    *(_DWORD *)(v31 + 68) &= ~8u;
  return v31;
}

uint64_t CA::WindowServer::`anonymous namespace'::OGLDisplay::native_display(CA::WindowServer::_anonymous_namespace_::OGLDisplay *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t CA::OGL::four_cc_to_mtl_format(CA::Render *a1, __int16 a2)
{
  int v3;
  uint64_t result;
  BOOL v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  unsigned __int16 v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  unsigned int v30;

  v3 = CA::Render::fourcc_compressed_of_type(a1, 0, 0);
  result = 0;
  if (v3 > 1882468913)
  {
    if (v3 <= 1953903153)
    {
      if (v3 > 1886676531)
      {
        if (v3 <= 1952854575)
        {
          if (v3 <= 1886680625)
          {
            if (v3 != 1886676532)
            {
              if (v3 != 1886680624)
                return result;
              goto LABEL_142;
            }
LABEL_103:
            v17 = (a2 & 0x40) == 0;
            v18 = 582;
            goto LABEL_151;
          }
          if (v3 != 1886680626)
          {
            if (v3 != 1886680628)
              return result;
            goto LABEL_103;
          }
LABEL_117:
          v17 = (a2 & 0x40) == 0;
          v18 = 581;
          goto LABEL_151;
        }
        if (v3 <= 1952855091)
        {
          if (v3 != 1952854576)
          {
            if (v3 != 1952854578)
              return result;
            goto LABEL_141;
          }
LABEL_130:
          v17 = (a2 & 0x20) == 0;
          v18 = 570;
          goto LABEL_151;
        }
        if (v3 != 1952855092)
        {
          if (v3 != 1953903152)
            return result;
          goto LABEL_130;
        }
LABEL_144:
        v17 = (a2 & 0x20) == 0;
        v18 = 572;
        goto LABEL_151;
      }
      if (v3 <= 1885745713)
      {
        if (v3 != 1882468914)
        {
          if (v3 != 1882469428)
          {
            v25 = 1885745712;
            goto LABEL_133;
          }
LABEL_140:
          v17 = (a2 & 0x10) == 0;
          v18 = 510;
          goto LABEL_151;
        }
      }
      else
      {
        if (v3 > 1886676527)
        {
          if (v3 == 1886676528)
          {
LABEL_142:
            v17 = (a2 & 0x40) == 0;
            v18 = 580;
            goto LABEL_151;
          }
          if (v3 != 1886676530)
            return result;
          goto LABEL_117;
        }
        if (v3 != 1885745714)
        {
          if (v3 != 1885746228)
            return result;
          goto LABEL_140;
        }
      }
      v17 = (a2 & 0x10) == 0;
      v18 = 509;
      goto LABEL_151;
    }
    if (v3 <= 2016687215)
    {
      if (v3 <= 1999908960)
      {
        if (v3 == 1953903154)
        {
LABEL_141:
          v17 = (a2 & 0x20) == 0;
          v18 = 571;
          goto LABEL_151;
        }
        if (v3 != 1953903668)
        {
          v27 = 554;
          if ((a2 & 0x200) == 0)
            v27 = 0;
          if (v3 == 1999843442)
            return v27;
          else
            return 0;
        }
        goto LABEL_144;
      }
      if (v3 <= 2016686641)
      {
        if (v3 == 1999908961)
        {
          v17 = (a2 & 0x200) == 0;
          v18 = 552;
          goto LABEL_151;
        }
        v15 = 2016686640;
LABEL_49:
        if (v3 != v15)
          return result;
        v17 = (a2 & 0x10) == 0;
        v18 = 505;
        goto LABEL_151;
      }
      if (v3 != 2016686642)
      {
        v29 = 2016687156;
        goto LABEL_126;
      }
    }
    else
    {
      if (v3 > 2019964015)
      {
        if (v3 > 2037741157)
        {
          if (v3 != 2037741158 && v3 != 2037741171)
            return result;
          v17 = (a2 & 4) == 0;
          v18 = 501;
          goto LABEL_151;
        }
        if (v3 != 2019964016)
        {
          v5 = v3 == 2033463606;
          v6 = 110;
          goto LABEL_120;
        }
        goto LABEL_138;
      }
      if (v3 <= 2019963441)
      {
        if (v3 != 2016687216)
        {
          v15 = 2019963440;
          goto LABEL_49;
        }
LABEL_138:
        v17 = (a2 & 0x10) == 0;
        v18 = 504;
        goto LABEL_151;
      }
      if (v3 != 2019963442)
      {
        v29 = 2019963956;
LABEL_126:
        if (v3 != v29)
          return result;
        v17 = (a2 & 0x10) == 0;
        v18 = 507;
        goto LABEL_151;
      }
    }
    v17 = (a2 & 0x10) == 0;
    v18 = 506;
    goto LABEL_151;
  }
  if (v3 <= 1278226535)
  {
    if (v3 > 875704949)
    {
      if (v3 <= 1093677111)
      {
        if (v3 <= 875836517)
        {
          if (v3 != 875704950)
          {
            v5 = v3 == 875836468;
            v6 = 42;
            goto LABEL_120;
          }
          goto LABEL_110;
        }
        if (v3 != 875836518)
        {
          v28 = 875836534;
          goto LABEL_109;
        }
LABEL_110:
        v30 = v3 & 0xFFFFFFEF;
        if (v30 != 875704422)
        {
          if (v30 == 875704934)
          {
            if ((a2 & 0x10) != 0)
              return 502;
          }
          else if (v30 == 875836518 && (a2 & 0x10) != 0)
          {
            return 503;
          }
          return 0;
        }
        v17 = (a2 & 4) == 0;
        v18 = 500;
        goto LABEL_151;
      }
      v7 = 1278226487;
      v19 = 55;
      if (v3 != 1278226534)
        v19 = 0;
      if (v3 == 1278226488)
        v10 = 10;
      else
        v10 = v19;
      v11 = 1093677112;
      v12 = 1;
      v13 = v3 == 1111970369;
      v14 = 80;
      goto LABEL_57;
    }
    if (v3 > 846624120)
    {
      if (v3 > 875704437)
      {
        if (v3 == 875704438)
          goto LABEL_110;
        v16 = 12902;
LABEL_108:
        v28 = v16 | 0x34320000;
LABEL_109:
        if (v3 != v28)
          return result;
        goto LABEL_110;
      }
      if (v3 != 846624121)
      {
        v16 = 12390;
        goto LABEL_108;
      }
      v17 = (a2 & 8) == 0;
      v18 = 562;
LABEL_151:
      if (v17)
        return 0;
      else
        return v18;
    }
    if (v3 != 843264056)
    {
      v21 = 843264104;
      v22 = 65;
      v23 = v3 == 843264310;
      v24 = 60;
LABEL_78:
      if (!v23)
        v24 = 0;
LABEL_89:
      if (v3 == v21)
        return v22;
      else
        return v24;
    }
    return 30;
  }
  if (v3 > 1380401728)
  {
    if (v3 <= 1647534391)
    {
      v7 = 1380411456;
      v8 = 542;
      if ((a2 & 4) == 0)
        v8 = 0;
      if (v3 == 1599226420)
        v9 = v8;
      else
        v9 = 0;
      if (v3 == 1380411457)
        v10 = 115;
      else
        v10 = v9;
      v11 = 1380401729;
      v12 = 70;
      v13 = v3 == 1380410945;
      v14 = 125;
LABEL_57:
      if (!v13)
        v14 = 0;
      if (v3 == v11)
        v20 = v12;
      else
        v20 = v14;
      if (v3 <= v7)
        return v20;
      else
        return v10;
    }
    if (v3 <= 1815491697)
    {
      v21 = 1647534392;
      v22 = 550;
      if ((a2 & 0x100) == 0)
        v22 = 0;
      v23 = v3 == 1815162994;
      v24 = 94;
      goto LABEL_78;
    }
    if (v3 == 1815491698)
      return 110;
    v25 = 1882468912;
LABEL_133:
    if (v3 != v25)
      return result;
    v17 = (a2 & 0x10) == 0;
    v18 = 508;
    goto LABEL_151;
  }
  if (v3 <= 1278555700)
  {
    v21 = 1278226536;
    v22 = 25;
    v26 = 43;
    if (v3 != 1278555445)
      v26 = 0;
    if (v3 == 1278226742)
      v24 = 20;
    else
      v24 = v26;
    goto LABEL_89;
  }
  if (v3 > 1279342647)
  {
    if (v3 == 1279342648)
      return 30;
    v5 = v3 == 1378955371;
    v6 = 90;
LABEL_120:
    if (v5)
      return v6;
    else
      return 0;
  }
  if (v3 == 1278555701)
    return 40;
  if (v3 == 1279340600)
    return 30;
  return result;
}

BOOL CA::OGL::metal_pixel_format_has_alpha_plane(CA::OGL *this, MTLPixelFormat a2)
{
  _BOOL8 result;
  char *v4;
  _BOOL4 v5;

  result = 1;
  if ((unint64_t)this - 70 > 0x37 || ((1 << (this - 70)) & 0xE03D0000000C1FLL) == 0)
  {
    v4 = (char *)this - 550;
    v5 = this == (CA::OGL *)1;
    return (unint64_t)v4 < 4 || v5;
  }
  return result;
}

BOOL CA::OGL::MetalContext::is_viable_texture_from_iosurface(CA::OGL::MetalContext *this, IOSurfaceRef buffer, MTLPixelFormat a3)
{
  _BOOL8 result;
  size_t BytesPerRow;
  uint64_t v6;
  size_t BytesPerElement;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  uint8_t buf[4];
  IOSurfaceID ID;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  size_t v16;
  _OWORD v17[4];
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (IOSurfaceGetPlaneCount(buffer))
    return 1;
  BytesPerRow = IOSurfaceGetBytesPerRow(buffer);
  v6 = qword_1ECDC4CD8;
  if (((qword_1ECDC4CD8 - 1) & BytesPerRow) == 0)
  {
    BytesPerElement = IOSurfaceGetBytesPerElement(buffer);
    v20 = 0;
    v18 = 0u;
    v19 = 0u;
    memset(v17, 0, sizeof(v17));
    MTLGetTextureLevelInfoForDeviceWithOptions();
    IOSurfaceGetWidth(buffer);
    if (IOSurfaceAllowsPixelSizeCasting(buffer) || *((_QWORD *)&v18 + 1) == BytesPerElement)
      return 1;
    if (x_log_hook_p())
      goto LABEL_9;
    v8 = x_log_category_ogl_metal;
    if (!os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buf = 67109632;
    ID = IOSurfaceGetID(buffer);
    v13 = 2048;
    v14 = *((_QWORD *)&v18 + 1);
    v15 = 2048;
    v16 = BytesPerElement;
    v9 = "Failed to allocate MTLTexture from IOSurface 0x%x. Texture block bytes (%ld) not equal to surface block bytes (%ld).";
    v10 = buf;
LABEL_12:
    _os_log_impl(&dword_184457000, v8, OS_LOG_TYPE_ERROR, v9, v10, 0x1Cu);
    return 0;
  }
  if (!x_log_hook_p())
  {
    v8 = x_log_category_ogl_metal;
    result = os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    LODWORD(v17[0]) = 67109632;
    DWORD1(v17[0]) = IOSurfaceGetID(buffer);
    WORD4(v17[0]) = 2048;
    *(_QWORD *)((char *)v17 + 10) = BytesPerRow;
    WORD1(v17[1]) = 2048;
    *(_QWORD *)((char *)&v17[1] + 4) = v6;
    v9 = "Failed to allocate MTLTexture from IOSurface 0x%x. Row bytes (%ld) not %ld aligned.";
    v10 = (uint8_t *)v17;
    goto LABEL_12;
  }
LABEL_9:
  IOSurfaceGetID(buffer);
  x_log_();
  return 0;
}

_QWORD *CA::WindowServer::Display::ogl_display(CA::WindowServer::Display *this)
{
  _QWORD *result;
  malloc_zone_t *malloc_zone;

  result = (_QWORD *)*((_QWORD *)this + 38);
  if (!result)
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    result = malloc_type_zone_malloc(malloc_zone, 0x10uLL, 0x8BB15036uLL);
    if (result)
    {
      *result = off_1E158D840;
      result[1] = this;
    }
    *((_QWORD *)this + 38) = result;
  }
  return result;
}

uint64_t CA::WindowServer::IOMFBDisplay::update_surface(CA::WindowServer::IOMFBDisplay *this, int a2, int a3, uint64_t a4)
{
  int v8;

  v8 = CA::WindowServer::IOMFBDisplay::use_assembly_surface(this);
  return CA::WindowServer::IOMFBDisplay::current_page_surface(this, v8, a2, a3, 0, a4);
}

uint64_t CA::WindowServer::IOMFBDisplay::dirty_update_surface(CA::WindowServer::IOMFBDisplay *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;

  v2 = (pthread_mutex_t *)((char *)this + 25688);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 25688));
  v3 = *((_QWORD *)this + 6 * *((unsigned int *)this + 6418) + 3220);
  if (v3)
  {
    *(_BYTE *)(v3 + 132) = *(_BYTE *)(v3 + 132) & 0xFA | 1;
    if (CA::WindowServer::IOMFBDisplay::use_assembly_surface(this))
      *(_BYTE *)(v3 + 132) |= 2u;
  }
  return pthread_mutex_unlock(v2);
}

void CA::CG::DrawOp::~DrawOp(CA::CG::DrawOp *this)
{
  uint64_t v2;
  CFTypeRef *v3;
  malloc_zone_t *malloc_zone;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;
  malloc_zone_t *v9;

  *(_QWORD *)this = off_1E1593790;
  v2 = *((_QWORD *)this + 13);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (CFTypeRef *)*((_QWORD *)this + 10);
  if (v3)
  {
    CFRelease(*v3);
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, v3);
  }
  v5 = (unsigned int *)*((_QWORD *)this + 9);
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      CA::CG::ClipStack::destroy_clip_stack((void (***)(char *))v5);
  }
  v8 = (void *)*((_QWORD *)this + 8);
  if (v8)
  {
    CGSoftMaskRelease();
    CGRenderingStateRelease();
    CGGStateRelease();
    v9 = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(v9, v8);
  }
}

uint64_t CA::CG::DrawOp::invalidate(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 104);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

void CA::CG::ClipStack::destroy_clip_stack(void (***this)(char *))
{
  unsigned int v2;

  if (*((_DWORD *)this + 1))
  {
    v2 = 0;
    do
    {
      (*this[13 * (int)v2 + 7])((char *)&this[13 * (int)v2 + 7]);
      ++v2;
    }
    while (v2 < *((_DWORD *)this + 1));
  }
  free(this);
}

void CA::CG::DrawLinearGradient::~DrawLinearGradient(CA::CG::Renderer **this, const void *a2)
{
  *this = (CA::CG::Renderer *)off_1E1591710;
  CA::CG::Renderer::release_object(this[14], a2);
  CA::CG::DrawOp::~DrawOp((CA::CG::DrawOp *)this);
}

{
  malloc_zone_t *malloc_zone;

  *this = (CA::CG::Renderer *)off_1E1591710;
  CA::CG::Renderer::release_object(this[14], a2);
  CA::CG::DrawOp::~DrawOp((CA::CG::DrawOp *)this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CA::CG::Renderer::release_object(CA::CG::Renderer *this, const void *a2)
{
  _QWORD *v3;
  uint64_t v4;
  int v5;
  _QWORD v6[6];

  v6[5] = *MEMORY[0x1E0C80C00];
  if (this)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::CG::_released_objects_lock);
    v3 = (_QWORD *)CA::CG::_released_objects;
    if (!CA::CG::_released_objects)
    {
      v3 = malloc_type_malloc(0x400uLL, 0xC0040B8AA526DuLL);
      CA::CG::_released_objects = (uint64_t)v3;
    }
    v4 = CA::CG::_released_objects_count++;
    v5 = CA::CG::_released_objects_count;
    v3[v4] = this;
    if (v5 == 128)
    {
      CA::CG::_released_objects = 0;
      CA::CG::_released_objects_count = 0;
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::CG::_released_objects_lock);
      if (CA::CG::release_queue(void)::once != -1)
        dispatch_once(&CA::CG::release_queue(void)::once, &__block_literal_global_14);
      v6[0] = MEMORY[0x1E0C809B0];
      v6[1] = 0x40000000;
      v6[2] = ___ZN2CA2CG8Renderer14release_objectEPKv_block_invoke;
      v6[3] = &__block_descriptor_tmp_441;
      v6[4] = v3;
      dispatch_async((dispatch_queue_t)CA::CG::release_queue(void)::queue, v6);
    }
    else
    {
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::CG::_released_objects_lock);
    }
  }
}

void CA::CG::Queue::Flush::callback(CA::CG::Queue::Flush *this, void *a2)
{
  uint64_t v2;
  _QWORD v3[7];

  v3[6] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)this;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN2CA2CG5Queue5Flush8callbackEPv_block_invoke;
  v3[3] = &__block_descriptor_tmp_3;
  v3[4] = v2;
  v3[5] = this;
  ___ZN2CA2CG5Queue5Flush8callbackEPv_block_invoke((uint64_t)v3);
}

void ___ZN2CA2CG5Queue5Flush8callbackEPv_block_invoke(uint64_t a1)
{
  CA::CG::Queue *v2;
  void *v3;
  malloc_zone_t *malloc_zone;

  v2 = (CA::CG::Queue *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 56))(*(_QWORD *)(a1 + 32), *(unsigned int *)(*(_QWORD *)(a1 + 40) + 8));
  CA::CG::Queue::reclaim_slabs(v2);
  CA::CG::Queue::mark_serial(*(CA::CG::Queue **)(a1 + 32));
  v3 = *(void **)(a1 + 40);
  if (v3)
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, v3);
  }
}

uint64_t CA::CG::Queue::mark_serial(CA::CG::Queue *this)
{
  pthread_mutex_t *v2;

  v2 = (pthread_mutex_t *)((char *)this + 56);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 56));
  ++*((_DWORD *)this + 13);
  pthread_cond_broadcast((pthread_cond_t *)((char *)this + 120));
  return pthread_mutex_unlock(v2);
}

void CA::CG::Queue::reclaim_slabs(CA::CG::Queue *this)
{
  size_t *v1;

  if (CA::CG::Queue::_free_slabs)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::CG::Queue::_free_lock);
    v1 = (size_t *)CA::CG::Queue::_free_slabs;
    if (CA::CG::Queue::_free_slabs && *(_QWORD *)CA::CG::Queue::_free_slabs)
    {
      CA::CG::Queue::_free_slabs = *(_QWORD *)CA::CG::Queue::_free_slabs;
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::CG::Queue::_free_lock);
      munmap(v1, v1[1]);
    }
    else
    {
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::CG::Queue::_free_lock);
    }
  }
}

void CA::CG::FillGlyphs::~FillGlyphs(CA::CG::FillGlyphs *this)
{
  const void *v2;

  *(_QWORD *)this = off_1E1590FB8;
  v2 = (const void *)*((_QWORD *)this + 14);
  if (v2)
    CFRelease(v2);
  CA::CG::DrawOp::~DrawOp(this);
}

{
  const void *v2;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E1590FB8;
  v2 = (const void *)*((_QWORD *)this + 14);
  if (v2)
    CFRelease(v2);
  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

uint64_t CA::CG::Renderer::update_finished_seed(uint64_t this)
{
  uint64_t v1;
  double v2;
  int v3;
  int v4;
  int v5;

  v1 = *(_QWORD *)(this + 8);
  if (v1 && *(_DWORD *)(this + 156) < (*(_DWORD *)(this + 152) - 1))
  {
    v2 = *(double *)(v1 + 224) + -0.25;
    v3 = *(_DWORD *)(this + 288);
    v4 = 8;
    do
    {
      v5 = v3 + v4;
      if (v3 + v4 - 8 >= 0)
        v5 = v3 + v4 - 8;
      --v4;
    }
    while (v4 && *(double *)(this + 16 * v5 + 160) > v2);
    *(_DWORD *)(this + 156) = *(_DWORD *)(this + 16 * v5 + 168);
  }
  return this;
}

void CA::CG::Queue::deallocate_slab(_QWORD *a1)
{
  if (a1[4])
  {
    a1[1] = a1[2];
    os_unfair_lock_lock((os_unfair_lock_t)&CA::CG::Queue::_free_lock);
    *a1 = CA::CG::Queue::_free_slabs;
    CA::CG::Queue::_free_slabs = (uint64_t)a1;
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::CG::Queue::_free_lock);
  }
  else
  {
    free(a1);
  }
}

void CA::CG::AccelQueue::release_renderer(CA::CG::AccelQueue *this, CA::CG::Renderer *a2)
{
  *((_BYTE *)a2 + 4228) = 0;
  *(_DWORD *)(*((_QWORD *)a2 + 1) + 336) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)a2 + 1056);
  *((_BYTE *)this + 208) = 1;
}

uint64_t CA::CG::AccelQueue::acquire_renderer(CA::CG::AccelQueue *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const __CFString *a7)
{
  CA::CG::AccelRenderer **v7;

  if (*((_BYTE *)this + 209))
    v7 = (CA::CG::AccelRenderer **)*((_QWORD *)this + 25);
  else
    v7 = 0;
  return CA::CG::AccelRenderer::acquire(*((CA::CG::AccelRenderer **)this + 22), (CA::CG::AccelQueue *)((char *)this + 184), v7, *((unsigned int *)this + 6), 0, *((const __CFString **)this + 24), a7);
}

void CA::CG::DrawImage::~DrawImage(CGImageRef *this)
{
  *this = (CGImageRef)off_1E1593B18;
  CGImageRelease(this[15]);
  CA::CG::DrawOp::~DrawOp((CA::CG::DrawOp *)this);
}

{
  malloc_zone_t *malloc_zone;

  *this = (CGImageRef)off_1E1593B18;
  CGImageRelease(this[15]);
  CA::CG::DrawOp::~DrawOp((CA::CG::DrawOp *)this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CA::CG::FillRoundedRectShadow::~FillRoundedRectShadow(CA::CG::FillRoundedRectShadow *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E1591088;
  v2 = (unsigned int *)*((_QWORD *)this + 19);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  CA::CG::DrawOp::~DrawOp(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = off_1E1591088;
  v2 = (unsigned int *)*((_QWORD *)this + 19);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  CA::CG::DrawOp::~DrawOp(this);
}

void CA::CG::ClipPath::~ClipPath(CA::CG::Renderer **this, const void *a2)
{
  *this = (CA::CG::Renderer *)off_1E1593858;
  CA::CG::Renderer::release_object(this[1], a2);
}

{
  malloc_zone_t *malloc_zone;

  *this = (CA::CG::Renderer *)off_1E1593858;
  CA::CG::Renderer::release_object(this[1], a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CA::CG::FillPath::~FillPath(CA::CG::Renderer **this, const void *a2)
{
  *this = (CA::CG::Renderer *)off_1E1593890;
  CA::CG::Renderer::release_object(this[14], a2);
  CA::CG::DrawOp::~DrawOp((CA::CG::DrawOp *)this);
}

{
  malloc_zone_t *malloc_zone;

  *this = (CA::CG::Renderer *)off_1E1593890;
  CA::CG::Renderer::release_object(this[14], a2);
  CA::CG::DrawOp::~DrawOp((CA::CG::DrawOp *)this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CA::OGL::MetalContext::update_surface(uint64_t a1, unint64_t a2, unsigned int *a3, int a4, uint64_t a5)
{
  uint64_t v6;
  unsigned int *v8;
  __IOSurface *v10;
  float v11;
  uint64_t v12;
  __IOSurface *v13;
  CA::Render *PixelFormat;
  unint64_t v15;
  id *v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  MTLPixelFormat v20;
  CA::Render *v21;
  __IOSurface *v22;
  int v23;
  unsigned __int16 v24;
  unsigned __int16 v25;
  int v26;
  char v27;
  int v28;
  int v29;
  unsigned __int16 v30;
  int v31;
  int CompressionTypeOfPlane;
  __IOSurface *v33;
  int v34;
  int v35;
  int v36;
  unsigned __int16 v37;
  int v38;
  unsigned __int16 v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  char v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  __IOSurface *v48;
  int v49;
  __IOSurface *v50;
  int v51;
  int v52;
  int v53;
  int v54;
  __IOSurface *v55;
  int v56;
  __IOSurface *v57;
  unsigned int WidthOfPlane;
  unsigned int HeightOfPlane;
  unsigned int v60;
  int is_triplanar;
  __IOSurface *v62;
  int v63;
  char v64;
  __IOSurface *v65;
  char v66;
  int v67;
  int v68;
  char v69;
  int v70;
  int v71;
  uint64_t v72;
  char v73;
  void *v74;
  unint64_t v75;
  uint64_t v76;
  void *v77;
  unsigned int v78;
  int v79;
  char can_generate_mipmaps_for_format;
  char v81;
  unsigned int v82;
  id v83;
  void *v84;
  const __CFString *v85;
  void *v86;
  NSObject *v87;
  unsigned int v88;
  uint64_t v89;
  int v90;
  NSObject *v91;
  IOSurfaceID ID;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  __int16 v100;
  __int16 v101;
  __int16 v102;
  __int16 v103;
  __int16 v104;
  __int16 v105;
  int v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  CA::Render::Surface *v110;
  uint64_t v111;
  __IOSurface *buffer;
  int v113;
  char v115;
  unsigned int v116;
  char v117;
  _QWORD v118[3];
  _QWORD v119[3];
  _QWORD v120[3];
  BOOL v121;
  char v122;
  uint8_t buf[8];
  __int16 v124;
  int v125;
  __int16 v126;
  int v127;
  __int16 v128;
  int v129;
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a2 + 32);
  if (!v6)
    return;
  v8 = a3;
  if (*(_QWORD *)(a2 + 8))
  {
    v10 = (__IOSurface *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 160))(v6);
    v113 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 104))(*(_QWORD *)(a2 + 8));
    v11 = (*(float (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 152))(*(_QWORD *)(a2 + 8));
    if (!v10)
      return;
    goto LABEL_8;
  }
  v11 = (*(float (**)(unsigned int *))(*(_QWORD *)a3 + 152))(a3);
  v12 = *(_QWORD *)(a2 + 40);
  if (!v12)
    v12 = *(_QWORD *)(a2 + 32);
  v10 = (__IOSurface *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 160))(v12);
  v113 = -1;
  if (v10)
  {
LABEL_8:
    v108 = a5;
    v122 = 0;
    buffer = v10;
    PixelFormat = (CA::Render *)IOSurfaceGetPixelFormat(v10);
    v15 = 0;
    v115 = 0;
    v109 = 0;
    v110 = (CA::Render::Surface *)v8;
    v111 = 0;
    v107 = 0;
    v16 = (id *)(a2 + 88);
    v116 = 1;
    v117 = 0;
    while (1)
    {
      v18 = v8[4];
      v17 = v8[5];
      v19 = CA::Render::Surface::chroma_location((__IOSurface **)v8, v13) == 2 ? -1 : -2;
      v20 = v113 == -1 ? MTLPixelFormatInvalid : CA::OGL::MetalContext::image_parameters(a1, v113, v15, &v122);
      v21 = (CA::Render *)CA::Render::fourcc_compressed_of_type(PixelFormat, 0, 0);
      PixelFormat = v21;
      if (v15)
        break;
      if (v18 < 2)
        BYTE4(v111) = 0;
      else
        HIDWORD(v111) = CA::Render::fourcc_is_444(v21) ^ 1;
      if (v17 < 2)
      {
        LOBYTE(v111) = 0;
        if (v20 == MTLPixelFormatInvalid)
          goto LABEL_17;
      }
      else
      {
        LOBYTE(v111) = CA::Render::fourcc_is_420(PixelFormat);
        if (v20 == MTLPixelFormatInvalid)
          goto LABEL_17;
      }
LABEL_18:
      if ((int)PixelFormat <= 1936077361)
      {
        if ((int)PixelFormat > 1882468913)
        {
          if ((int)PixelFormat > 1886680623)
          {
            if ((int)PixelFormat > 1932550514)
            {
              if ((int)PixelFormat > 1932812658)
              {
                if ((_DWORD)PixelFormat == 1932812659)
                  goto LABEL_211;
                v24 = 12848;
                goto LABEL_209;
              }
              if ((_DWORD)PixelFormat == 1932550515)
                goto LABEL_211;
              v38 = 1932681587;
LABEL_210:
              if ((_DWORD)PixelFormat == v38)
                goto LABEL_211;
              goto LABEL_247;
            }
            if (((_DWORD)PixelFormat - 1886680624) > 4 || ((1 << ((_BYTE)PixelFormat - 48)) & 0x15) == 0)
            {
              if ((_DWORD)PixelFormat == 1919365992)
              {
                v122 = 36;
                v116 = 3;
                if ((v117 & 1) == 0)
                {
                  v117 = 0;
                  v20 = MTLPixelFormatR16Float;
                  goto LABEL_293;
                }
                v20 = MTLPixelFormatR16Float;
                goto LABEL_248;
              }
              goto LABEL_247;
            }
          }
          else
          {
            if ((int)PixelFormat <= 1885745713)
            {
              if ((_DWORD)PixelFormat == 1882468914 || (_DWORD)PixelFormat == 1882469428)
                goto LABEL_216;
              v25 = 12848;
LABEL_214:
              v54 = v25 | 0x70660000;
              goto LABEL_215;
            }
            if (((_DWORD)PixelFormat - 1886676528) > 4 || ((1 << ((_BYTE)PixelFormat - 48)) & 0x15) == 0)
            {
              if ((_DWORD)PixelFormat == 1885745714)
                goto LABEL_216;
              v25 = 13364;
              goto LABEL_214;
            }
          }
          CompressionTypeOfPlane = IOSurfaceGetCompressionTypeOfPlane();
          if ((~*(_DWORD *)(a1 + 2676) & 0xC0) != 0
            || (v34 = CompressionTypeOfPlane, CA::Render::Surface::ycbcr_matrix(v110, v33) > 6)
            || v34 != 3)
          {
            v20 = MTLPixelFormatInvalid;
          }
          else
          {
            if ((v111 & 0x100000000) != 0)
              v35 = v19;
            else
              v35 = -1;
            v18 &= v35;
            if ((v111 & 1) != 0)
              v36 = v19;
            else
              v36 = -1;
            v17 &= v36;
            HIDWORD(v109) = 1;
          }
          v8 = (unsigned int *)v110;
          goto LABEL_247;
        }
        if ((int)PixelFormat <= 875836533)
        {
          if ((int)PixelFormat <= 875704437)
          {
            if ((int)PixelFormat <= 846624120)
            {
              if ((_DWORD)PixelFormat != 843264104)
              {
                v23 = 843264310;
                goto LABEL_98;
              }
              goto LABEL_199;
            }
            if ((_DWORD)PixelFormat == 846624121)
              goto LABEL_113;
            v30 = 12390;
            goto LABEL_112;
          }
          if ((int)PixelFormat > 875704949)
          {
            if ((_DWORD)PixelFormat == 875704950)
              goto LABEL_152;
            v26 = 875836518;
          }
          else
          {
            if ((_DWORD)PixelFormat == 875704438)
              goto LABEL_152;
            v30 = 12902;
LABEL_112:
            v26 = v30 | 0x34320000;
          }
LABEL_151:
          if ((_DWORD)PixelFormat != v26)
            goto LABEL_247;
          goto LABEL_152;
        }
        if ((int)PixelFormat > 1278555444)
        {
          if ((int)PixelFormat <= 1279342647)
          {
            if ((_DWORD)PixelFormat == 1278555445)
            {
              v43 = 1;
              goto LABEL_246;
            }
            v23 = 1279340600;
LABEL_98:
            if ((_DWORD)PixelFormat != v23)
              goto LABEL_247;
LABEL_199:
            v27 = 31;
            goto LABEL_200;
          }
          if ((_DWORD)PixelFormat == 1279342648)
            goto LABEL_199;
          v54 = 1882468912;
LABEL_215:
          if ((_DWORD)PixelFormat != v54)
            goto LABEL_247;
LABEL_216:
          v56 = *(_DWORD *)(a1 + 2676);
          if ((v56 & 0x80) != 0)
          {
            if (CA::Render::Surface::ycbcr_matrix((CA::Render::Surface *)v8, v22) <= 5)
            {
              v56 = *(_DWORD *)(a1 + 2676);
              goto LABEL_219;
            }
          }
          else
          {
LABEL_219:
            if ((v56 & 0x80) != 0
              || CA::Render::Surface::ycbcr_matrix((CA::Render::Surface *)v8, v22) < 5)
            {
              goto LABEL_247;
            }
          }
          v122 = 32;
          LOBYTE(v109) = CA::Render::Surface::ycbcr_matrix((CA::Render::Surface *)v8, v22);
          if ((int)PixelFormat > 1885745711)
          {
            if ((_DWORD)PixelFormat == 1885746228)
              goto LABEL_350;
            if ((_DWORD)PixelFormat == 1885745714)
              goto LABEL_352;
            if ((_DWORD)PixelFormat != 1885745712)
              goto LABEL_247;
          }
          else if ((_DWORD)PixelFormat != 1882468912)
          {
            if ((_DWORD)PixelFormat != 1882468914)
            {
              if ((_DWORD)PixelFormat != 1882469428)
                goto LABEL_247;
LABEL_350:
              if ((v117 & 1) == 0)
              {
                v117 = 0;
                v20 = 548;
                goto LABEL_293;
              }
              v20 = 548;
              goto LABEL_248;
            }
LABEL_352:
            v18 &= v19;
            if ((v117 & 1) == 0)
            {
              v117 = 0;
              v20 = MTLPixelFormatRG8Sint|MTLPixelFormatA8Unorm|0x200;
              goto LABEL_293;
            }
            v20 = MTLPixelFormatRG8Sint|MTLPixelFormatA8Unorm|0x200;
            goto LABEL_248;
          }
          v18 &= v19;
          v17 &= v19;
          if ((v117 & 1) == 0)
          {
            v117 = 0;
            v20 = MTLPixelFormatRG8Sint|0x200;
            goto LABEL_293;
          }
          v20 = MTLPixelFormatRG8Sint|0x200;
          goto LABEL_248;
        }
        if ((int)PixelFormat > 1278226487)
        {
          if ((_DWORD)PixelFormat != 1278226488 && (_DWORD)PixelFormat != 1278226742)
            goto LABEL_247;
          v43 = 30;
LABEL_246:
          v122 = v43;
          goto LABEL_247;
        }
        if ((_DWORD)PixelFormat != 875836534)
        {
          if ((_DWORD)PixelFormat != 1093677112 || v113 == 8)
            goto LABEL_247;
          v27 = 21;
LABEL_200:
          v122 = v27;
          goto LABEL_247;
        }
      }
      else if ((int)PixelFormat <= 1983013175)
      {
        if ((int)PixelFormat <= 1952854575)
        {
          if ((int)PixelFormat <= 1937126451)
          {
            if ((int)PixelFormat > 1937125935)
            {
              if ((_DWORD)PixelFormat == 1937125936)
                goto LABEL_211;
              v38 = 1937125938;
            }
            else
            {
              if ((_DWORD)PixelFormat == 1936077362)
                goto LABEL_211;
              v24 = 13364;
LABEL_209:
              v38 = v24 | 0x73660000;
            }
            goto LABEL_210;
          }
          if ((int)PixelFormat <= 1949458802)
          {
            if ((_DWORD)PixelFormat == 1937126452)
              goto LABEL_211;
            v31 = 1949327731;
            goto LABEL_171;
          }
          if ((_DWORD)PixelFormat != 1949458803)
          {
            v31 = 1949589875;
LABEL_171:
            if ((_DWORD)PixelFormat != v31)
              goto LABEL_247;
          }
          if (IOSurfaceGetCompressionTypeOfPlane() != 3
            || CA::Render::ycbcr_fourcc_depth(PixelFormat) != 12)
          {
            goto LABEL_211;
          }
          v122 = 41;
          LOBYTE(v109) = CA::Render::Surface::ycbcr_matrix((CA::Render::Surface *)v8, v50);
          if (v15 > 1)
          {
            if ((v117 & 1) == 0)
            {
              v116 = 3;
              v117 = 0;
              v20 = MTLPixelFormatR16Unorm;
              goto LABEL_301;
            }
            v20 = MTLPixelFormatR16Unorm;
LABEL_238:
            v117 = 1;
LABEL_360:
            v116 = 3;
            goto LABEL_301;
          }
          switch((_DWORD)PixelFormat)
          {
            case 0x74346173:
              v116 = 3;
              if ((v117 & 1) == 0)
              {
                v117 = 0;
                v20 = MTLPixelFormatRGBA8Unorm|0x200;
                goto LABEL_293;
              }
              v20 = MTLPixelFormatRGBA8Unorm|0x200;
              goto LABEL_248;
            case 0x74326173:
              v18 &= v19;
              v116 = 3;
              if ((v117 & 1) == 0)
              {
                v117 = 0;
                v20 = 581;
                goto LABEL_293;
              }
              v20 = 581;
              goto LABEL_248;
            case 0x74306173:
              v18 &= v19;
              v17 &= v19;
              v116 = 3;
              if ((v117 & 1) == 0)
              {
                v117 = 0;
                v20 = 580;
                goto LABEL_293;
              }
              v20 = 580;
              goto LABEL_248;
          }
          v116 = 3;
LABEL_247:
          if ((v117 & 1) == 0)
          {
            v117 = 0;
            goto LABEL_293;
          }
          goto LABEL_248;
        }
        if ((int)PixelFormat <= 1953903153)
        {
          if ((int)PixelFormat > 1952855091)
          {
            if ((_DWORD)PixelFormat == 1952855092)
              goto LABEL_137;
            v37 = 12848;
LABEL_135:
            v28 = v37 | 0x74760000;
          }
          else
          {
            if ((_DWORD)PixelFormat == 1952854576)
              goto LABEL_137;
            v28 = 1952854578;
          }
          if ((_DWORD)PixelFormat == v28)
            goto LABEL_137;
          goto LABEL_247;
        }
        if ((int)PixelFormat <= 1982882103)
        {
          if ((_DWORD)PixelFormat != 1953903154)
          {
            v37 = 13364;
            goto LABEL_135;
          }
LABEL_137:
          if ((~*(_DWORD *)(a1 + 2676) & 0xA0) != 0
            || CA::Render::Surface::ycbcr_matrix((CA::Render::Surface *)v8, v22) > 6
            || CA::Render::ycbcr_fourcc_depth(PixelFormat) != 12)
          {
LABEL_211:
            v115 = 1;
            goto LABEL_248;
          }
          goto LABEL_188;
        }
        if ((_DWORD)PixelFormat != 1982882104)
        {
          if ((_DWORD)PixelFormat == 1983000886)
          {
            v122 = 40;
            if (v15)
              v20 = MTLPixelFormatRGBA16Unorm;
            else
              v20 = MTLPixelFormatRG16Unorm;
            v18 >>= v15 != 0;
            LOBYTE(v109) = CA::Render::Surface::ycbcr_matrix((CA::Render::Surface *)v8, v22);
            v107 = CA::Render::Surface::chroma_location((__IOSurface **)v8, v55);
            v116 = 2;
            BYTE4(v111) = 1;
          }
          goto LABEL_247;
        }
      }
      else
      {
        if ((int)PixelFormat > 2016687155)
        {
          if ((int)PixelFormat <= 2019963441)
          {
            if ((int)PixelFormat <= 2016698738)
            {
              if ((_DWORD)PixelFormat != 2016687156)
              {
                v29 = 2016698680;
LABEL_128:
                if ((_DWORD)PixelFormat != v29)
                  goto LABEL_247;
                goto LABEL_144;
              }
              goto LABEL_183;
            }
            if ((_DWORD)PixelFormat == 2016698739)
              goto LABEL_144;
            v39 = 12848;
          }
          else
          {
            if ((int)PixelFormat > 2033463605)
            {
              if ((_DWORD)PixelFormat == 2033463606)
              {
                v122 = 39;
                LOBYTE(v109) = CA::Render::Surface::ycbcr_matrix((CA::Render::Surface *)v8, v22);
              }
              else if ((_DWORD)PixelFormat == 2037741158 || (_DWORD)PixelFormat == 2037741171)
              {
LABEL_113:
                if ((*(_BYTE *)(a1 + 2676) & 4) == 0
                  || ((v40 = CA::Render::Surface::ycbcr_matrix((CA::Render::Surface *)v8, v22),
                       v41 = *(_DWORD *)(a1 + 2676),
                       (v41 & 0x80) != 0)
                    ? (v42 = 6)
                    : (v42 = 4),
                      v42 < v40 || (v41 & 8) == 0 && (_DWORD)PixelFormat == 846624121))
                {
                  v122 = 32;
                  LOBYTE(v109) = CA::Render::Surface::ycbcr_matrix((CA::Render::Surface *)v8, v22);
                  if ((_DWORD)PixelFormat == 846624121)
                    v20 = MTLPixelFormatBGRG422;
                  else
                    v20 = MTLPixelFormatGBGR422;
                  v18 &= v19;
                }
              }
              goto LABEL_247;
            }
            if ((_DWORD)PixelFormat == 2019963442)
              goto LABEL_183;
            v39 = 13364;
          }
          v44 = v39 | 0x78660000;
LABEL_182:
          if ((_DWORD)PixelFormat != v44)
            goto LABEL_247;
LABEL_183:
          v51 = *(_DWORD *)(a1 + 2676);
          if ((v51 & 0x10) != 0)
          {
            if (CA::Render::Surface::ycbcr_matrix((CA::Render::Surface *)v8, v22) < 5)
              goto LABEL_188;
            v51 = *(_DWORD *)(a1 + 2676);
          }
          if ((v51 & 0x80) == 0 || CA::Render::Surface::ycbcr_matrix((CA::Render::Surface *)v8, v22) > 6)
            goto LABEL_211;
LABEL_188:
          if ((CA::Render::ycbcr_fourcc_is_triplanar(PixelFormat) & 1) == 0)
          {
            if ((v111 & 0x100000000) != 0)
              v52 = v19;
            else
              v52 = -1;
            v18 &= v52;
            if ((v111 & 1) != 0)
              v53 = v19;
            else
              v53 = -1;
            v17 &= v53;
            v115 = 1;
            if ((v117 & 1) == 0)
            {
              v117 = 0;
              HIDWORD(v109) = 1;
              goto LABEL_293;
            }
            HIDWORD(v109) = 1;
            goto LABEL_248;
          }
          goto LABEL_211;
        }
        if ((int)PixelFormat > 2016567607)
        {
          if ((int)PixelFormat <= 2016686639)
          {
            if ((_DWORD)PixelFormat == 2016567608)
              goto LABEL_144;
            v29 = 2016567667;
            goto LABEL_128;
          }
          if ((_DWORD)PixelFormat != 2016686640)
          {
            v44 = 2016686642;
            goto LABEL_182;
          }
          goto LABEL_183;
        }
        if ((int)PixelFormat > 2016436535)
        {
          if ((_DWORD)PixelFormat != 2016436536)
          {
            v29 = 2016436595;
            goto LABEL_128;
          }
LABEL_144:
          v106 = v19;
          if (v15 == 2)
          {
            v115 = 0;
            if ((_DWORD)PixelFormat == 2016436536 || (_DWORD)PixelFormat == 2016567608)
            {
              v45 = 10;
            }
            else
            {
              v45 = 10;
              if ((_DWORD)PixelFormat != 2016698680)
                goto LABEL_148;
            }
          }
          else
          {
LABEL_148:
            v115 = 1;
            v45 = 20;
          }
          if (IOSurfaceGetCompressionTypeOfPlane() != 3)
          {
            v19 = v106;
            goto LABEL_248;
          }
          v122 = 41;
          LOBYTE(v109) = CA::Render::Surface::ycbcr_matrix((CA::Render::Surface *)v8, v57);
          if (v15 > 1)
          {
            if (v15 == 2)
              v20 = v45;
            if ((v117 & 1) != 0)
              goto LABEL_238;
            v117 = 0;
            goto LABEL_360;
          }
          v116 = 3;
          if ((int)PixelFormat > 2016567666)
          {
            v19 = v106;
            if ((_DWORD)PixelFormat != 2016567667)
            {
              if ((_DWORD)PixelFormat == 2016698680 || (_DWORD)PixelFormat == 2016698739)
              {
                v116 = 3;
                if ((v117 & 1) == 0)
                {
                  v117 = 0;
                  v20 = MTLPixelFormatX24_Stencil8|MTLPixelFormatGBGR422|0x8;
                  goto LABEL_293;
                }
                v20 = MTLPixelFormatX24_Stencil8|MTLPixelFormatGBGR422|0x8;
                goto LABEL_248;
              }
              goto LABEL_247;
            }
          }
          else
          {
            v19 = v106;
            if ((_DWORD)PixelFormat == 2016436536 || (_DWORD)PixelFormat == 2016436595)
            {
              v18 &= v106;
              v17 &= v106;
              v116 = 3;
              if ((v117 & 1) == 0)
              {
                v117 = 0;
                v20 = MTLPixelFormatDepth32Float_Stencil8|MTLPixelFormatGBGR422|0x8;
                goto LABEL_293;
              }
              v20 = MTLPixelFormatDepth32Float_Stencil8|MTLPixelFormatGBGR422|0x8;
              goto LABEL_248;
            }
            if ((_DWORD)PixelFormat != 2016567608)
              goto LABEL_247;
          }
          v18 &= v19;
          v116 = 3;
          if ((v117 & 1) == 0)
          {
            v117 = 0;
            v20 = MTLPixelFormatX32_Stencil8|MTLPixelFormatGBGR422|0x8;
            goto LABEL_293;
          }
          v20 = MTLPixelFormatX32_Stencil8|MTLPixelFormatGBGR422|0x8;
          goto LABEL_248;
        }
        if ((_DWORD)PixelFormat != 1983013176)
        {
          v26 = 1983144248;
          goto LABEL_151;
        }
      }
LABEL_152:
      if ((v15 != 0) | v115 & 1)
      {
        if (((v15 != 0) & BYTE4(v109)) == 1)
        {
LABEL_154:
          if ((v111 & 0x100000000) != 0)
            v46 = v19;
          else
            v46 = -1;
          v18 &= v46;
          if ((v111 & 1) != 0)
            v47 = v19;
          else
            v47 = -1;
          v17 &= v47;
          HIDWORD(v109) = 1;
          goto LABEL_247;
        }
        HIDWORD(v109) = 0;
LABEL_248:
        if (v15)
        {
          if (v15 == 1)
          {
            WidthOfPlane = IOSurfaceGetWidthOfPlane(buffer, 1uLL);
            HeightOfPlane = IOSurfaceGetHeightOfPlane(buffer, 1uLL);
            if ((*(_BYTE *)(a1 + 2678) & 2) != 0)
            {
              v60 = v18 >> 1;
              if (v18 >> 1 >= WidthOfPlane)
                v60 = WidthOfPlane;
              if ((v111 & 0x100000000) != 0)
                WidthOfPlane = v60;
              else
                WidthOfPlane = v18;
              if ((v111 & 1) != 0)
              {
                if (v17 >> 1 < HeightOfPlane)
                  HeightOfPlane = v17 >> 1;
              }
              else
              {
                HeightOfPlane = v17;
              }
            }
            if ((v115 & 1) != 0)
              v20 = MTLPixelFormatRG16Unorm;
            else
              v20 = MTLPixelFormatRG8Unorm;
            v117 = 1;
            v17 = HeightOfPlane;
            v18 = WidthOfPlane;
            v8 = (unsigned int *)v110;
          }
          else
          {
            if (v122 == 37)
            {
              if ((v115 & 1) != 0)
                v20 = MTLPixelFormatR16Unorm;
              else
                v20 = MTLPixelFormatR8Unorm;
              if (v18 <= 1)
                v70 = -1;
              else
                v70 = v19;
              v18 &= v70;
              if (v17 <= 1)
                v71 = -1;
              else
                v71 = v19;
              v17 &= v71;
            }
            v117 = 1;
          }
          goto LABEL_301;
        }
        v49 = v19;
        goto LABEL_261;
      }
      if ((*(_BYTE *)(a1 + 2676) & 4) != 0
        && (CA::Render::ycbcr_fourcc_is_triplanar(PixelFormat) & 1) == 0
        && (*(_DWORD *)(a2 + 52) & 0xF0000) != 0x20000
        && CA::Render::Surface::ycbcr_matrix((CA::Render::Surface *)v8, v48) <= 4
        && ((PixelFormat & 0xFFFFFFEF) == 0x34323066 || (*(_BYTE *)(a1 + 2676) & 0x10) != 0))
      {
        goto LABEL_154;
      }
      v49 = v19;
      HIDWORD(v109) = 0;
      v115 = 0;
LABEL_261:
      is_triplanar = CA::Render::ycbcr_fourcc_is_triplanar(PixelFormat);
      if (is_triplanar)
        v63 = 3;
      else
        v63 = 2;
      v116 = v63;
      if (is_triplanar)
        v64 = 37;
      else
        v64 = 22;
      v122 = v64;
      LOBYTE(v109) = CA::Render::Surface::ycbcr_matrix((CA::Render::Surface *)v8, v62);
      v66 = CA::Render::Surface::chroma_location((__IOSurface **)v8, v65);
      if ((v111 & 0x100000000) != 0)
        v67 = v49;
      else
        v67 = -1;
      v18 &= v67;
      if ((v111 & 1) != 0)
        v68 = v49;
      else
        v68 = -1;
      v17 &= v68;
      if (((BYTE4(v111) | v111) & 1) != 0)
        v69 = v66;
      else
        v69 = 2;
      v107 = v69;
      if ((v115 & 1) != 0)
        v20 = MTLPixelFormatR16Unorm;
      else
        v20 = MTLPixelFormatR8Unorm;
      v117 = 1;
LABEL_293:
      if (!v15 && ((HIDWORD(v109) ^ ((*(_WORD *)(a2 + 123) & 0x20) >> 5)) & 1) != 0)
        CA::OGL::MetalContext::delete_image(a1, a2);
LABEL_301:
      if (v20 == MTLPixelFormatInvalid || !v18 || !v17)
      {
LABEL_383:
        if (v116 != *(unsigned __int8 *)(a2 + 122))
        {
          if (x_log_hook_p())
          {
            if ((PixelFormat & 0x80000000) != 0)
              __maskrune(PixelFormat >> 24, 0x40000uLL);
            if (BYTE2(PixelFormat) > 0x7Fu)
              __maskrune(BYTE2(PixelFormat), 0x40000uLL);
            if (BYTE1(PixelFormat) > 0x7Fu)
              __maskrune(BYTE1(PixelFormat), 0x40000uLL);
            if (PixelFormat > 0x7Fu)
              __maskrune(PixelFormat, 0x40000uLL);
            x_log_();
            v8 = (unsigned int *)v110;
          }
          else
          {
            v87 = x_log_category_ogl_metal;
            if (os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_ERROR))
            {
              v88 = PixelFormat >> 24;
              v89 = MEMORY[0x1E0C80978];
              if ((PixelFormat & 0x80000000) != 0)
                v90 = __maskrune(v88, 0x40000uLL);
              else
                v90 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v88 + 60) & 0x40000;
              if (v90)
                v93 = (int)PixelFormat >> 24;
              else
                v93 = 32;
              if (BYTE2(PixelFormat) <= 0x7Fu)
                v94 = *(_DWORD *)(v89 + 4 * BYTE2(PixelFormat) + 60) & 0x40000;
              else
                v94 = __maskrune(BYTE2(PixelFormat), 0x40000uLL);
              if (v94)
                v95 = SBYTE2(PixelFormat);
              else
                v95 = 32;
              if (BYTE1(PixelFormat) <= 0x7Fu)
                v96 = *(_DWORD *)(v89 + 4 * BYTE1(PixelFormat) + 60) & 0x40000;
              else
                v96 = __maskrune(BYTE1(PixelFormat), 0x40000uLL);
              if (v96)
                v97 = SBYTE1(PixelFormat);
              else
                v97 = 32;
              if (PixelFormat <= 0x7Fu)
                v98 = *(_DWORD *)(v89 + 4 * PixelFormat + 60) & 0x40000;
              else
                v98 = __maskrune(PixelFormat, 0x40000uLL);
              v8 = (unsigned int *)v110;
              *(_DWORD *)buf = 67109888;
              v99 = (char)PixelFormat;
              *(_DWORD *)&buf[4] = v93;
              v124 = 1024;
              if (!v98)
                v99 = 32;
              v125 = v95;
              v126 = 1024;
              v127 = v97;
              v128 = 1024;
              v129 = v99;
              _os_log_impl(&dword_184457000, v87, OS_LOG_TYPE_ERROR, "unsupported surface format: %c%c%c%c\n", buf, 0x1Au);
            }
          }
        }
        *(_DWORD *)(a2 + 52) = *(_DWORD *)(a2 + 52) & 0xC0FFFFFF | ((v122 & 0x3F) << 24);
        if ((*(unsigned int (**)(unsigned int *))(*(_QWORD *)v8 + 128))(v8))
          v100 = 32;
        else
          v100 = 0;
        v101 = *(_WORD *)(a2 + 58) & 0xFF18 | v100;
        v102 = *(_WORD *)(a2 + 123);
        *(_BYTE *)(a2 + 57) = *(_BYTE *)(a2 + 57) & 0xF0 | v109 & 0xF;
        if ((v111 & 0x100000000) != 0)
          v103 = 64;
        else
          v103 = 0;
        if ((v111 & 1) != 0)
          v104 = 128;
        else
          v104 = 0;
        *(_WORD *)(a2 + 58) = v103 & 0xFFF8 | v107 & 7 | v104 | v101;
        if ((v109 & 0x100000000) != 0)
          v105 = 32;
        else
          v105 = 0;
        *(_WORD *)(a2 + 123) = v102 & 0xFF5B | v105 | ((v11 != 1.0) << 7) | 4;
        *(_DWORD *)(a2 + 16) = v8[9];
        return;
      }
      if (!v15)
      {
        v72 = CA::Render::ycbcr_fourcc_depth(PixelFormat);
        v73 = 32 * (v72 == 10);
        if (v72 == 8)
          v73 = 16;
        *(_BYTE *)(a2 + 57) = v73 | *(_BYTE *)(a2 + 57) & 0xCF;
      }
      CA::OGL::MetalContext::update_texture_plane((_QWORD *)a1, a2, a4, v15, v20, v18, v17);
      v74 = *(v16 - 3);
      if (!v74 || *(_DWORD *)(a2 + 16) != v8[9] && (unint64_t)objc_msgSend(*v16, "mipmapLevelCount") >= 2)
      {
        *(v16 - 3) = 0;
        if (*(_WORD *)(a2 + 120) != 1)
          __assert_rtn("update_surface", "ogl-metal.mm", 12114, "tex->depth == 1 && \"surface textures must be 2D\"");
        objc_msgSend(*v16, "setUsage:", 1);
        if (!CA::OGL::MetalContext::is_viable_texture_from_iosurface((CA::OGL::MetalContext *)a1, buffer, v20))
        {

          return;
        }
        objc_msgSend(*v16, "setMipmapLevelCount:", 1);
        objc_msgSend(*v16, "setProtectionOptions:", IOSurfaceGetProtectionOptions());
        if (v122 == 40)
          v75 = 0;
        else
          v75 = v15;
        v76 = objc_msgSend(*(id *)(a1 + 2904), "newTextureWithDescriptor:iosurface:plane:", *v16, buffer, v75);
        if (!v76)
        {

          if (x_log_hook_p())
          {
            IOSurfaceGetID(buffer);
            x_log_();
          }
          else
          {
            v91 = x_log_category_ogl_metal;
            if (os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_ERROR))
            {
              ID = IOSurfaceGetID(buffer);
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)&buf[4] = ID;
              _os_log_impl(&dword_184457000, v91, OS_LOG_TYPE_ERROR, "Failed to allocate MTLTexture from IOSurface 0x%x.", buf, 8u);
            }
          }
          return;
        }
        v77 = (void *)v76;
        v121 = 0;
        if ((_DWORD)PixelFormat == 1983000886)
        {
          v78 = *(_DWORD *)(a1 + 2676);
          *(_QWORD *)buf = v20;
          if ((*(_DWORD *)(a2 + 52) & 0xF0000) == 0x20000)
          {
            v79 = HIWORD(v78) & 1;
            goto LABEL_322;
          }
          if ((v78 & 0x10000) != 0)
          {
LABEL_329:
            if (v18 <= v17)
              v82 = v17;
            else
              v82 = v18;
            objc_msgSend(*v16, "setMipmapLevelCount:", (floor(log2((double)v82)) + 1.0));
            v83 = v74;
            if (v83 || (v83 = (id)objc_msgSend(*(id *)(a1 + 2904), "newTextureWithDescriptor:", *v16)) != 0)
            {
              objc_msgSend(v77, "setLabel:", CFSTR("com.apple.coreanimation.surface-source"));
              if (CA::OGL::MetalContext::start_blit_encoder((CA::OGL::MetalContext *)a1, objc_msgSend(*v16, "protectionOptions")))
              {
                v84 = *(void **)(a1 + 2944);
                v119[0] = v18;
                v119[1] = v17;
                v119[2] = 1;
                memset(v120, 0, sizeof(v120));
                memset(v118, 0, sizeof(v118));
                objc_msgSend(v84, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:", v77, 0, 0, v120, v119, v83, 0, 0, v118);
                if ((*(_DWORD *)(a2 + 52) & 0xF0000) == 0x20000)
                {
                  if (v116 == *(unsigned __int8 *)(a2 + 122))
                    *(_WORD *)(a2 + 123) |= 1u;
                  objc_msgSend(*(id *)(a1 + 2944), "generateMipmapsForTexture:", v83);
                }
              }
              *(v16 - 3) = v83;

              goto LABEL_342;
            }
            objc_msgSend(*v16, "setMipmapLevelCount:", 1);
          }
        }
        else
        {
          *(_QWORD *)buf = v20;
          if ((*(_DWORD *)(a2 + 52) & 0xF0000) == 0x20000)
          {
            LOBYTE(v79) = 0;
LABEL_322:
            can_generate_mipmaps_for_format = CA::OGL::MetalContext::can_generate_mipmaps_for_format((CA::OGL::MetalContext *)a1, (MTLPixelFormat *)buf, &v121);
            v81 = v121 ? 0 : can_generate_mipmaps_for_format;
            if ((v81 & 1) != 0 || (v79 & 1) != 0)
              goto LABEL_329;
          }
        }
        *(v16 - 3) = v77;
LABEL_342:
        v8 = (unsigned int *)v110;
        if (v108)
        {
          v85 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:");
          v86 = *(v16 - 3);
        }
        else
        {
          v86 = *(v16 - 3);
          v85 = CFSTR("com.apple.coreanimation.surface");
        }
        objc_msgSend(v86, "setLabel:", v85);
        CA::OGL::MetalContext::update_texture_ownership(a1, *(v16 - 3));
        if (v74)

      }
      ++v15;
      ++v16;
      if (v15 >= v116)
        goto LABEL_383;
    }
    if (v20)
      goto LABEL_18;
LABEL_17:
    v20 = CA::OGL::four_cc_to_mtl_format(PixelFormat, *(_DWORD *)(a1 + 2676));
    goto LABEL_18;
  }
}

void CA::OGL::MetalContext::update_image(uint64_t a1, unint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  _BOOL4 v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int can_generate_mipmaps_for_format;
  int v20;
  _BOOL4 v21;
  void *v22;
  const __CFString *v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  _QWORD v38[6];
  _QWORD v39[6];
  BOOL v40;
  MTLPixelFormat v41;
  unsigned __int8 v42;
  uint8_t buf[8];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v42 = 0;
  v41 = CA::OGL::MetalContext::image_parameters(a1, *(unsigned __int8 *)(a3 + 152), 0, (char *)&v42);
  if (v41)
  {
    v10 = v42;
    v11 = *(_DWORD *)(a2 + 52);
    v12 = v11 & 0xF0000;
    v13 = v11 & 0xC0FFFFFF | ((v42 & 0x3F) << 24);
    *(_DWORD *)(a2 + 52) = v13;
    v15 = *(unsigned __int8 *)(a3 + 153) > 1u || v12 == 0x20000;
    v17 = *(_DWORD *)(a3 + 16);
    v16 = *(_DWORD *)(a3 + 20);
    v18 = *(_QWORD *)(a3 + 96);
    if (v10 == 32)
    {
      v17 &= ~1u;
      *(_BYTE *)(a2 + 57) = *(_BYTE *)(a2 + 57) & 0xF0 | 3;
    }
    v40 = 0;
    if (!v18)
      v15 = 0;
    if (v15
      && (can_generate_mipmaps_for_format = CA::OGL::MetalContext::can_generate_mipmaps_for_format((CA::OGL::MetalContext *)a1, &v41, &v40), v13 = *(_DWORD *)(a2 + 52), can_generate_mipmaps_for_format))
    {
      *(_WORD *)(a2 + 123) |= 0x11u;
      v20 = 0x20000;
    }
    else
    {
      *(_WORD *)(a2 + 123) &= 0xFFEEu;
      v20 = 0x10000;
    }
    *(_DWORD *)(a2 + 52) = v13 & 0xFFF0FFFF | v20;
    CA::OGL::MetalContext::update_texture_plane((_QWORD *)a1, a2, a4, 0, v41, v17, v16);
    if (*(_QWORD *)(a2 + 64))
    {
      if (!v18)
      {
LABEL_64:
        *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 36);
        return;
      }
LABEL_36:
      v24 = *(void **)(a2 + 64);
      if (v24 && (*(_WORD *)(a2 + 123) & 0x200) == 0)
      {
        v25 = *(unsigned __int16 *)(a2 + 120);
        if (v25 == 1)
        {
          v26 = *(unsigned __int8 *)(a3 + 153);
          if (objc_msgSend(*(id *)(a2 + 88), "mipmapLevelCount") <= v26)
            v27 = objc_msgSend(*(id *)(a2 + 88), "mipmapLevelCount");
          else
            v27 = *(unsigned __int8 *)(a3 + 153);
          v30 = v27;
          if (v27)
          {
            v32 = 0;
            v33 = a3 + 160;
            do
            {
              v34 = *(_QWORD *)(v33 + 8 * v32);
              v35 = *(void **)(a2 + 64);
              memset(v39, 0, 24);
              v39[3] = v17;
              v39[4] = v16;
              v39[5] = 1;
              objc_msgSend(v35, "replaceRegion:mipmapLevel:slice:withBytes:bytesPerRow:bytesPerImage:", v39, v32, 0, v18, v34, 0);
              v18 += *(_QWORD *)(v33 + 8 * v32) * v16;
              if (v17 <= 1)
                v17 = 1;
              else
                v17 >>= 1;
              if (v16 <= 1)
                v16 = 1;
              else
                v16 >>= 1;
              ++v32;
            }
            while (v30 != v32);
          }
        }
        else
        {
          v28 = *(_QWORD *)(a3 + 160);
          if (v16 == 1)
            v29 = 1;
          else
            v29 = v17;
          if (v16 == 1)
            v25 = 1;
          memset(v38, 0, 24);
          v38[3] = v17;
          v38[4] = v29;
          v38[5] = v25;
          objc_msgSend(v24, "replaceRegion:mipmapLevel:slice:withBytes:bytesPerRow:bytesPerImage:", v38, 0, 0, v18, v28, v28 * v17);
          v30 = 1;
        }
        *(_QWORD *)(a1 + 712) += CA::Render::Image::data_size((CA::Render::Image *)a3);
        if ((*(_BYTE *)(a2 + 123) & 1) != 0 && v30 != objc_msgSend(*(id *)(a2 + 88), "mipmapLevelCount"))
          CA::OGL::MetalContext::generate_mipmaps_for_texture((id *)a1, a2);
        if (v40)
        {
          v36 = *(void **)(a2 + 64);
          v37 = (void *)objc_msgSend(v36, "newTextureViewWithPixelFormat:", 1);
          *(_QWORD *)(a2 + 64) = v37;
          objc_msgSend(v37, "setLabel:", CFSTR("com.apple.coreanimation.image-a8"));

        }
      }
      goto LABEL_64;
    }
    objc_msgSend(*(id *)(a2 + 88), "setUsage:", 1);
    v21 = v40;
    if (v40)
      objc_msgSend(*(id *)(a2 + 88), "setUsage:", objc_msgSend(*(id *)(a2 + 88), "usage") | 0x10);
    if (*(unsigned __int8 *)(a3 + 153) >= 2uLL)
      objc_msgSend(*(id *)(a2 + 88), "setMipmapLevelCount:");
    if (v18
      && *(_WORD *)(a2 + 120) == 1
      && (*(_WORD *)(a2 + 123) & 0x400) == 0
      && !v21
      && *(_BYTE *)(a3 + 153) == 1
      && CA::OGL::MetalContext::copy_image_to_texture(a1, (CA::Render::Image *)a3, a2))
    {
      goto LABEL_64;
    }
    v22 = (void *)objc_msgSend(*(id *)(a1 + 2904), "newTextureWithDescriptor:", *(_QWORD *)(a2 + 88));
    *(_QWORD *)(a2 + 64) = v22;
    if (v22)
    {
      if (a5)
      {
        v23 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a5);
        v22 = *(void **)(a2 + 64);
      }
      else
      {
        v23 = CFSTR("com.apple.coreanimation.image");
      }
      objc_msgSend(v22, "setLabel:", v23);
      CA::OGL::MetalContext::update_texture_ownership(a1, *(void **)(a2 + 64));
      if (!v18)
        goto LABEL_64;
      goto LABEL_36;
    }
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v31 = x_log_category_ogl_metal;
      if (os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v31, OS_LOG_TYPE_ERROR, "Failed to allocate MTLTexture\n", buf, 2u);
      }
    }
  }
}

uint64_t CA::OGL::MetalContext::image_parameters(uint64_t a1, int a2, int a3, char *a4)
{
  uint64_t result;
  BOOL v6;
  uint64_t v7;
  char v8;
  char v9;

  *a4 = 0;
  if (a3)
    return 0;
  result = 0;
  switch(a2)
  {
    case 0:
      v8 = 2;
      goto LABEL_21;
    case 1:
      return 80;
    case 2:
      v8 = 3;
      goto LABEL_21;
    case 3:
      v8 = 1;
LABEL_21:
      *a4 = v8;
      return 80;
    case 5:
      *a4 = 1;
      return 43;
    case 6:
      if ((*(_BYTE *)(a1 + 2676) & 8) != 0)
        return 562;
      *a4 = 32;
      return 241;
    case 7:
      if ((*(_BYTE *)(a1 + 2676) & 4) != 0)
        return 501;
      *a4 = 32;
      return 240;
    case 8:
      return 1;
    case 9:
      *a4 = 21;
      return 1;
    case 10:
      *a4 = 30;
      return 10;
    case 11:
    case 29:
      return 70;
    case 12:
      v9 = 1;
      goto LABEL_35;
    case 13:
      return 115;
    case 14:
      return 125;
    case 15:
      v9 = 6;
      goto LABEL_35;
    case 16:
      v9 = 7;
      goto LABEL_35;
    case 17:
      *a4 = 1;
      return 115;
    case 18:
      *a4 = 31;
      return 30;
    case 19:
      result = 30;
      *a4 = 30;
      return result;
    case 20:
      return 43;
    case 21:
      return 110;
    case 22:
      *a4 = 1;
      return 110;
    case 23:
    case 25:
      *a4 = 20;
      return 25;
    case 24:
    case 26:
      *a4 = 20;
      return 55;
    case 27:
      *a4 = 31;
      return 60;
    case 28:
      *a4 = 31;
      return 65;
    case 30:
      v9 = 28;
LABEL_35:
      *a4 = v9;
      return 70;
    case 31:
      return 94;
    case 32:
      return 90;
    case 33:
      v6 = (*(_BYTE *)(a1 + 2677) & 2) == 0;
      v7 = 554;
      goto LABEL_40;
    case 34:
      v6 = (*(_BYTE *)(a1 + 2677) & 2) == 0;
      v7 = 552;
      goto LABEL_40;
    case 35:
      v6 = (*(_BYTE *)(a1 + 2677) & 1) == 0;
      v7 = 550;
LABEL_40:
      if (v6)
        result = 0;
      else
        result = v7;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t CA::OGL::MetalContext::copy_image_to_texture(uint64_t a1, CA::Render::Image *this, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  NSObject *v18;
  _BOOL4 v19;
  int v20;
  int v21;
  const char *v22;
  _BOOL4 v23;
  int v24;
  int v25;
  uint8_t buf[4];
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  unint64_t v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)this + 12);
  v7 = *((_QWORD *)this + 20);
  if (*MEMORY[0x1E0C85AD8] >= *MEMORY[0x1E0C85AA8])
    v8 = *MEMORY[0x1E0C85AA8];
  else
    v8 = *MEMORY[0x1E0C85AD8];
  v9 = CA::Render::Image::data_size(this);
  if ((*(_WORD *)(a3 + 123) & 1) != 0)
    return 0;
  v10 = v9;
  v11 = objc_msgSend(*(id *)(a1 + 2904), "deviceLinearReadOnlyTextureAlignmentBytes");
  if (v6 % v11 || v7 % v11)
    return 0;
  v13 = -v8 & v6;
  v14 = v6 - v13;
  v15 = (v10 + v8 + v14 - 1) & -v8;
  v16 = (void *)objc_msgSend(*(id *)(a1 + 2904), "newBufferWithBytesNoCopy:length:options:deallocator:", v13, v15, 0, 0);
  objc_msgSend(v16, "setLabel:", CFSTR("com.apple.coreanimation.buffer-client-storage"));
  if (v16)
  {
    objc_msgSend(*(id *)(a3 + 88), "setCpuCacheMode:", objc_msgSend(v16, "cpuCacheMode"));
    objc_msgSend(*(id *)(a3 + 88), "setStorageMode:", objc_msgSend(v16, "storageMode"));
    *(_QWORD *)(a3 + 64) = objc_msgSend(v16, "newLinearTextureWithDescriptor:offset:bytesPerRow:bytesPerImage:", *(_QWORD *)(a3 + 88), v14, v7, CA::Render::Image::data_size(this));

    v17 = *(void **)(a3 + 64);
    if (v17)
    {
      objc_msgSend(v17, "setLabel:", CFSTR("com.apple.coreanimation.image-client-storage"));
      CA::OGL::MetalContext::update_texture_ownership(a1, *(void **)(a3 + 64));
      *(_WORD *)(a3 + 123) |= 0x200u;
      return 1;
    }
    if (x_log_hook_p())
      goto LABEL_15;
    v18 = x_log_category_ogl_metal;
    v23 = os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (v23)
    {
      v24 = *((_DWORD *)this + 4);
      v25 = *((_DWORD *)this + 5);
      *(_DWORD *)buf = 134219520;
      v27 = v13;
      v28 = 2048;
      v29 = v14;
      v30 = 2048;
      v31 = v15;
      v32 = 1024;
      v33 = v24;
      v34 = 1024;
      v35 = v25;
      v36 = 2048;
      v37 = v7;
      v38 = 2048;
      v39 = CA::Render::Image::data_size(this);
      v22 = "nil linear texture from buffer: [b:%08lx o:%04lx l:%06zx], w:%u h:%u bpr:%zu bpi:%zu\n";
      goto LABEL_20;
    }
  }
  else
  {
    if (x_log_hook_p())
    {
LABEL_15:
      CA::Render::Image::data_size(this);
      x_log_();
      return 0;
    }
    v18 = x_log_category_ogl_metal;
    v19 = os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (v19)
    {
      v20 = *((_DWORD *)this + 4);
      v21 = *((_DWORD *)this + 5);
      *(_DWORD *)buf = 134219520;
      v27 = v13;
      v28 = 2048;
      v29 = v14;
      v30 = 2048;
      v31 = v15;
      v32 = 1024;
      v33 = v20;
      v34 = 1024;
      v35 = v21;
      v36 = 2048;
      v37 = v7;
      v38 = 2048;
      v39 = CA::Render::Image::data_size(this);
      v22 = "nil buffer from memory: [b:%08lx o:%04lx l:%06zx], w:%u h:%u bpr:%zu bpi:%zu\n";
LABEL_20:
      _os_log_impl(&dword_184457000, v18, OS_LOG_TYPE_DEFAULT, v22, buf, 0x40u);
      return 0;
    }
  }
  return result;
}

uint64_t CA::Render::Image::data_size(CA::Render::Image *this)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v1 = *((unsigned __int8 *)this + 152);
  v2 = *((_DWORD *)this + 4);
  v3 = *((_DWORD *)this + 5);
  v4 = *((unsigned __int8 *)this + 153);
  if (v4 < 2)
  {
    v5 = 0;
    v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = (v4 - 1);
    v7 = (uint64_t *)((char *)this + 160);
    v8 = v6;
    do
    {
      v9 = *v7++;
      v5 += v9 * v3;
      if (v2 <= 1)
        v2 = 1;
      else
        v2 >>= 1;
      if (v3 <= 1)
        v3 = 1;
      else
        v3 >>= 1;
      --v8;
    }
    while (v8);
  }
  if (v1 > 0x25)
    v10 = 0;
  else
    v10 = dword_184750480[v1];
  return v5 + v2 * v10 + *((_QWORD *)this + v6 + 20) * (v3 - 1);
}

uint64_t CA::OGL::MetalContext::add_memoryless_textures(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  MTLPixelFormat v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  if ((*(_WORD *)(result + 3280) & 8) == 0)
    return result;
  v3 = result;
  v4 = *(void **)(a2 + 96);
  v5 = objc_msgSend(v4, "pixelFormat");
  if (v5 > 89)
  {
    v7 = 110;
    if (v5 == 90 || v5 == 94)
      goto LABEL_18;
    if (v5 == 554)
    {
      if (CADeviceIsVirtualized::once[0] != -1)
        dispatch_once(CADeviceIsVirtualized::once, &__block_literal_global_204);
      v7 = 115;
      if (!CADeviceIsVirtualized::is_virtualized)
        v7 = 550;
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (v5 == 10)
  {
    v7 = 30;
    goto LABEL_18;
  }
  if (v5 == 43)
  {
    v7 = 80;
    goto LABEL_18;
  }
  if (v5 != 63)
  {
LABEL_17:
    v7 = v5;
    goto LABEL_18;
  }
  v7 = 113;
LABEL_18:
  v8 = CA::OGL::non_srgb_pixel_format(v7, v6);
  v9 = (void *)objc_msgSend(MEMORY[0x1E0CC6BB0], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", v8, objc_msgSend(v4, "width"), objc_msgSend(v4, "height"), 0);
  objc_msgSend(v9, "setUsage:", 5);
  if (!BYTE1(xmmword_1ECDC6A70))
    objc_msgSend(v9, "setStorageMode:", 3);
  result = objc_msgSend(v9, "setProtectionOptions:", *(_QWORD *)(v3 + 3040));
  v10 = *(unsigned __int16 *)(a2 + 232);
  if ((v10 & 0xFu) <= 2)
  {
    v11 = (uint64_t)(v10 << 28) >> 28;
    v12 = (void *)objc_msgSend(*(id *)(v3 + 2904), "newTextureWithDescriptor:", v9);
    v13 = a2 + 8 * v11;
    *(_QWORD *)(v13 + 96) = v12;
    result = objc_msgSend(v12, "setLabel:", CFSTR("com.apple.coreanimation.memoryless-texture"));
    if (*(_QWORD *)(v13 + 96))
    {
      *(_QWORD *)(v13 + 120) = v8;
      *(_WORD *)(a2 + 232) = *(_WORD *)(a2 + 232) & 0xFFF0 | (v11 + 1);
      *(_WORD *)(a2 + 214) |= 1 << v11;
    }
  }
  *(_WORD *)(a2 + 216) = *(_WORD *)(a2 + 214);
  return result;
}

uint64_t CA::OGL::non_srgb_pixel_format(uint64_t this, MTLPixelFormat a2)
{
  if (this <= 80)
  {
    switch(this)
    {
      case 11:
        return 10;
      case 31:
        return 30;
      case 71:
        return 70;
    }
  }
  else if (this > 552)
  {
    if (this == 553)
    {
      return 552;
    }
    else if (this == 555)
    {
      return 554;
    }
  }
  else if (this == 81)
  {
    return 80;
  }
  else if (this == 551)
  {
    return 550;
  }
  return this;
}

void CA::OGL::MetalContext::update_texture_ownership(uint64_t a1, void *a2)
{
  unsigned __int8 v4;

  if ((v4 & 1) == 0
  {
    CA::OGL::MetalContext::update_texture_ownership(objc_object  {objcproto10MTLTexture}*,CA::Render::Texture *)::set_owner_sel = (uint64_t)sel_setOwnerWithIdentity_;
  }
  if (*(_DWORD *)(a1 + 336))
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(a2, "setOwnerWithIdentity:", *(unsigned int *)(a1 + 336));
  }
}

uint64_t CA::Render::Surface::image_format(CA::Render::Surface *this)
{
  return *((unsigned int *)this + 27);
}

uint64_t CA::Render::fourcc_is_420(CA::Render *this)
{
  int v1;
  uint64_t result;
  int v3;
  unsigned __int16 v4;
  unsigned __int16 v5;

  v1 = (int)this;
  result = 1;
  if (v1 > 875704437)
  {
    if (v1 > 1952854575)
    {
      if (v1 > 2084070959)
      {
        if (v1 > 2088003119)
        {
          if (v1 > 2088265263)
          {
            if (v1 == 2088265264)
              return result;
            v3 = 2088269360;
          }
          else
          {
            if (v1 == 2088003120)
              return result;
            v3 = 2088007216;
          }
        }
        else if (v1 > 2087937583)
        {
          if (v1 == 2087937584)
            return result;
          v3 = 2087941680;
        }
        else
        {
          if (v1 == 2084070960)
            return result;
          v3 = 2084075056;
        }
        goto LABEL_90;
      }
      if (v1 > 2016436535)
      {
        if (v1 > 2016686639)
        {
          if (v1 == 2016686640)
            return result;
          v3 = 2019963440;
        }
        else
        {
          if (v1 == 2016436536)
            return result;
          v3 = 2016436595;
        }
        goto LABEL_90;
      }
      if (v1 != 1952854576 && v1 != 1953903152)
      {
        v3 = 1982882104;
        goto LABEL_90;
      }
    }
    else
    {
      if (v1 > 1882468911)
      {
        if (v1 > 1932550514)
        {
          if (v1 > 1937125935)
          {
            if (v1 == 1937125936)
              return result;
            v3 = 1949327731;
          }
          else
          {
            if (v1 == 1932550515)
              return result;
            v3 = 1936077360;
          }
        }
        else if (v1 > 1886676527)
        {
          if (v1 == 1886676528)
            return result;
          v3 = 1886680624;
        }
        else
        {
          if (v1 == 1882468912)
            return result;
          v3 = 1885745712;
        }
        goto LABEL_90;
      }
      if (v1 > 1534354991)
      {
        if (v1 > 1534617135)
        {
          if (v1 == 1534617136)
            return result;
          v3 = 1534621232;
        }
        else
        {
          if (v1 == 1534354992)
            return result;
          v3 = 1534359088;
        }
        goto LABEL_90;
      }
      if (v1 != 875704438 && v1 != 1530422832)
      {
        v3 = 1530426928;
        goto LABEL_90;
      }
    }
  }
  else if (v1 > 762537519)
  {
    if (v1 > 792229423)
    {
      if (v1 > 796161583)
      {
        if (v1 > 796423727)
        {
          if (v1 == 796423728)
            return result;
          v3 = 875704422;
        }
        else
        {
          if (v1 == 796161584)
            return result;
          v3 = 796419632;
        }
      }
      else if (v1 > 796096047)
      {
        if (v1 == 796096048)
          return result;
        v3 = 796157488;
      }
      else
      {
        if (v1 == 792229424)
          return result;
        v3 = 796091952;
      }
      goto LABEL_90;
    }
    if (v1 > 762607151)
    {
      if (v1 > 762869295)
      {
        if (v1 == 762869296)
          return result;
        v3 = 792225328;
      }
      else
      {
        if (v1 == 762607152)
          return result;
        v3 = 762865200;
      }
      goto LABEL_90;
    }
    if (v1 != 762537520 && v1 != 762541616)
    {
      v3 = 762603056;
      goto LABEL_90;
    }
  }
  else
  {
    if (v1 > 645166639)
    {
      if (v1 > 645424687)
      {
        if (v1 > 758670895)
        {
          if (v1 == 758670896)
            return result;
          v3 = 758674992;
          goto LABEL_90;
        }
        if (v1 == 645424688)
          return result;
        v5 = 30256;
      }
      else
      {
        if (v1 <= 645410871)
        {
          if (v1 == 645166640)
            return result;
          v3 = 645279800;
          goto LABEL_90;
        }
        if (v1 == 645410872)
          return result;
        v5 = 12403;
      }
      v3 = v5 | 0x26780000;
LABEL_90:
      if (v1 != v3)
        return 0;
      return result;
    }
    if (v1 > 645097007)
    {
      if (v1 > 645148786)
      {
        if (v1 == 645148787)
          return result;
        v3 = 645162544;
        goto LABEL_90;
      }
      if (v1 == 645097008)
        return result;
      v4 = 30256;
      goto LABEL_55;
    }
    if (v1 != 641230384 && v1 != 641234480)
    {
      v4 = 12403;
LABEL_55:
      v3 = v4 | 0x26730000;
      goto LABEL_90;
    }
  }
  return result;
}

uint64_t CA::Render::Surface::is_unpremultiplied(CA::Render::Surface *this)
{
  return (*((unsigned __int16 *)this + 168) >> 3) & 1;
}

BOOL CA::OGL::MetalContext::start_blit_encoder(CA::OGL::MetalContext *this, uint64_t a2)
{
  const char *v4;
  _BOOL8 result;
  id v6;
  uint64_t v7;
  NSObject *v8;
  uint8_t v9[8];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 368))
    return 1;
  CA::OGL::MetalContext::stop_encoders(this);
  result = CA::OGL::MetalContext::start_command_buffer(this, a2, v4);
  if (!result)
    return result;
  v6 = (id)objc_msgSend(*((id *)this + 366), "blitCommandEncoder");
  *((_QWORD *)this + 368) = v6;
  if (v6)
  {
    if (BYTE3(xmmword_1ECDC6AF0))
      v7 = mach_continuous_time();
    else
      v7 = 0;
    *((_QWORD *)this + 382) = v7;
    return 1;
  }
  if (x_log_hook_p())
  {
    x_log_();
    return 0;
  }
  v8 = x_log_category_ogl_metal;
  result = os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_184457000, v8, OS_LOG_TYPE_ERROR, "Unable to start blit command encoder\n", v9, 2u);
    return 0;
  }
  return result;
}

void CA::OGL::Context::copy_surface(uint64_t a1, const CA::Bounds *a2, uint64_t a3, uint64_t a4, uint64_t a5, float64x2_t *a6, float64x2_t *a7)
{
  const CA::Bounds *v10;
  CA::Shape *v11;
  CA::Shape *v12;
  int32x4_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a6)
  {
    v13 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(*a6), (int32x4_t)vcvtq_s64_f64(a6[1]));
  }
  else
  {
    v13.i64[0] = 0;
    v13.i64[1] = *((_QWORD *)a2 + 3);
  }
  v11 = (CA::Shape *)CA::Shape::new_shape((CA::Shape *)&v13, a2);
  if (a7)
  {
    v13 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(*a7), (int32x4_t)vcvtq_s64_f64(a7[1]));
  }
  else
  {
    v13.i64[0] = 0;
    v13.i64[1] = *(_QWORD *)(a3 + 24);
  }
  v12 = (CA::Shape *)CA::Shape::new_shape((CA::Shape *)&v13, v10);
  CA::OGL::Context::copy_surface_region(a1);
  CA::Shape::unref(v11);
  CA::Shape::unref(v12);
}

void CA::OGL::Context::copy_surface_region(uint64_t a1)
{
  __int16 v1;
  __int16 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  CA::Shape *v5;
  CA::Shape *v6;
  CA::Shape *v7;
  CA::Shape *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  float v20;
  float v21;
  int v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t i;
  uint64_t v32;
  __int128 v33;
  int v34[6];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[3];
  uint64_t v38[3];
  _QWORD v39[9];
  char v40;
  _QWORD v41[124];

  MEMORY[0x1E0C80A78](a1);
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v41[122] = *MEMORY[0x1E0C80C00];
  v15 = *(_QWORD *)(v13 + 232);
  bzero(v41, 0x3D0uLL);
  if (CA::Shape::rect_count(v6) && CA::Shape::rect_count(v8))
  {
    v39[4] = 0x3C003C003C003C00;
    memset(&v39[5], 0, 24);
    v39[8] = 0x4013F800000;
    v39[2] = 0;
    v39[3] = &CA::identity_transform;
    v39[0] = 0;
    v39[1] = &CA::Shape::_infinite_shape;
    CA::OGL::Context::push_surface(v14, v12, v4, 0, 0);
    v32 = v15;
    if (v15)
    {
      v16 = *(const void **)(v14 + 16);
      memcpy(v41, v16, 0x1E8uLL);
      v41[0] = v16;
      *(_QWORD *)(v14 + 16) = v41;
      v39[0] = CA::OGL::Context::set_gstate(v14, (uint64_t)v39);
    }
    else
    {
      CA::OGL::Context::prepare_context(v14, (uint64_t)v41);
      *(_QWORD *)(v14 + 120) = &v40;
      *(_QWORD *)(v14 + 136) = 128;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v14 + 1008))(v14, v39);
    }
    *(_BYTE *)(*(_QWORD *)(v14 + 16) + 481) &= ~1u;
    *(_BYTE *)(*(_QWORD *)(v14 + 16) + 16) = 1;
    CA::OGL::Context::bind_surface(v14, v10, 0, (v2 & 0x200) == 0, (v2 & 0x200) == 0, 0.0);
    v17 = 0;
    *(_QWORD *)(v14 + 128) = 0;
    *(_QWORD *)(v14 + 96) = v14 + 818;
    *(_OWORD *)(v14 + 104) = xmmword_18474E060;
    v35 = 0;
    v36 = 0;
    *(_OWORD *)v34 = 0uLL;
    v38[1] = 0;
    v38[2] = 0;
    v37[2] = 0;
    v38[0] = (uint64_t)v6;
    v33 = 0u;
    v37[0] = (uint64_t)v8;
    v37[1] = 0;
    while (1)
    {
      if (!CA::ShapeIterator::iterate(v37, (int *)&v35))
      {
        CA::OGL::Context::array_flush(v14);
        CA::OGL::Context::unbind_surface((_QWORD *)v14, v10, 0);
        if (v32)
        {
          CA::OGL::Context::set_gstate(v14, **(_QWORD **)(v14 + 232));
          *(_QWORD *)(v14 + 16) = v41[0];
          v41[0] = 0;
        }
        else
        {
          (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v14 + 1016))(v14, v39);
          *(_QWORD *)(v14 + 120) = 0;
          *(_QWORD *)(v14 + 136) = 0;
          *(_QWORD *)(v14 + 16) = 0;
          *(_QWORD *)(v14 + 24) = 0;
        }
        CA::OGL::Context::pop_surface((CA::OGL::Context *)v14);
        goto LABEL_49;
      }
      if (CA::ShapeIterator::iterate(v38, v34))
        v33 = *(_OWORD *)v34;
      else
        *(_OWORD *)v34 = v33;
      v18 = 6;
      if (!*(_DWORD *)(v14 + 92))
        v18 = 4;
      if ((unint64_t)(v17 + 4) > *(_QWORD *)(v14 + 136)
        || (v19 = *(_QWORD *)(v14 + 112)) != 0 && *(_QWORD *)(v14 + 104) + v18 > v19)
      {
        *(_WORD *)(v14 + 816) |= 0x20u;
        CA::OGL::Context::array_flush(v14);
        *(_QWORD *)(v14 + 128) = 0;
        *(_QWORD *)(v14 + 96) = v14 + 818;
        *(_OWORD *)(v14 + 104) = xmmword_18474E060;
      }
      CA::OGL::Context::array_rect((_QWORD *)v14, (float)(int)v35, (float)SHIDWORD(v35), (float)(v36 + v35), (float)(HIDWORD(v36) + HIDWORD(v35)));
      v20 = (float)SDWORD1(v33);
      v21 = (float)(DWORD2(v33) + v33);
      v22 = HIDWORD(v33) + DWORD1(v33);
      if ((v2 & 1) == 0)
        break;
      if ((v2 & 4) == 0)
      {
        v23 = (float)SDWORD1(v33);
        v25 = (float)v22;
        if ((v2 & 2) == 0)
          goto LABEL_22;
LABEL_25:
        v24 = (float)(int)v33;
        v20 = v25;
        goto LABEL_32;
      }
      if ((v2 & 2) != 0)
        v23 = (float)SDWORD1(v33);
      else
        v23 = (float)v22;
      if ((v2 & 2) != 0)
        v20 = (float)v22;
      v24 = (float)(int)v33;
LABEL_32:
      if ((v2 & 4) != 0)
        v26 = v23;
      else
        v26 = v20;
      if ((v2 & 4) != 0)
        v27 = v21;
      else
        v27 = v24;
      if ((v2 & 4) != 0)
        v28 = v20;
      else
        v28 = v23;
      if ((v2 & 4) != 0)
        v29 = v24;
      else
        v29 = v21;
      v17 = *(_QWORD *)(v14 + 128);
      v30 = *(_QWORD *)(v14 + 120) + 48 * v17;
      *(float *)(v30 - 176) = v21;
      *(float *)(v30 - 172) = v26;
      *(float *)(v30 - 128) = v27;
      *(float *)(v30 - 124) = v20;
      *(float *)(v30 - 80) = v24;
      *(float *)(v30 - 76) = v28;
      *(float *)(v30 - 32) = v29;
      *(float *)(v30 - 28) = v23;
    }
    if ((v2 & 2) == 0)
    {
      v23 = (float)v22;
      v24 = (float)(DWORD2(v33) + v33);
LABEL_23:
      v21 = (float)(int)v33;
      goto LABEL_32;
    }
    v23 = (float)v22;
    v25 = (float)SDWORD1(v33);
    if ((v2 & 4) != 0)
    {
LABEL_22:
      v23 = (float)SDWORD1(v33);
      v24 = (float)(DWORD2(v33) + v33);
      v20 = (float)v22;
      goto LABEL_23;
    }
    goto LABEL_25;
  }
LABEL_49:
  for (i = 61; i != -61; i -= 61)
  {
    if (v41[i])
      __assert_rtn("~ContextState", "ogl-context.h", 551, "!next && \"Imbalanced ContextState push/pop\"");
  }
}

BOOL CA::Shape::rect_count(CA::Shape *this)
{
  int v1;
  uint64_t v2;
  _DWORD *v3;
  int v4;
  uint64_t v5;

  if ((this & 1) != 0)
    return this != (CA::Shape *)1;
  v1 = *((_DWORD *)this + 1);
  if (v1 == 6)
    return 0;
  if (v1 == 12)
    return 1;
  v4 = *((_DWORD *)this + 3);
  v3 = (_DWORD *)((char *)this + 12);
  if (v4 == 0x7FFFFFFF)
    return 0;
  LODWORD(v2) = 0;
  do
  {
    v5 = (int)v3[1];
    v2 = (v2 + (((int)v5 - 2) >> 1));
    v3 += v5;
  }
  while (*v3 != 0x7FFFFFFF);
  return v2;
}

void CA::OGL::MetalContext::copy_surface(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float64x2_t *a6, float64x2_t *a7)
{
  BOOL v14;
  void *v15;
  unsigned int v16;
  unsigned int v17;
  char *surface;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t compute_pipeline;
  int32x2_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  void *v32;
  id v33;
  void *v39;
  _QWORD v40[3];
  int64x2_t v41;
  uint64_t v42;
  uint64x2_t v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a4)
    v14 = *(_DWORD *)(a3 + 24) < *(_DWORD *)(a2 + 24) || *(_DWORD *)(a3 + 28) < *(_DWORD *)(a2 + 28);
  else
    v14 = 0;
  *(_QWORD *)(a1 + 3040) = objc_msgSend(*(id *)(a2 + 96), "protectionOptions");
  if (CA::ScalerUtil::get_io_service(void)::once != -1)
    dispatch_once(&CA::ScalerUtil::get_io_service(void)::once, &__block_literal_global_52);
  if (!CA::ScalerUtil::get_io_service(void)::scaler_service && *(_QWORD *)(a2 + 120) == 500)
  {
    v15 = (void *)MEMORY[0x186DBE2E4]();
    v16 = *(_DWORD *)(a2 + 24);
    if (*(_DWORD *)(a3 + 24) == v16)
    {
      v17 = *(_DWORD *)(a2 + 28);
      surface = (char *)a3;
      if (*(_DWORD *)(a3 + 28) == v17)
      {
LABEL_29:
        if (CA::OGL::MetalContext::start_compute_encoder((CA::OGL::MetalContext *)a1, *(_QWORD *)(a1 + 3040)))
        {
          compute_pipeline = CA::OGL::MetalContext::get_compute_pipeline(a1, 3u);
          v28 = *(int32x2_t *)(a3 + 24);
          v29 = objc_msgSend(*(id *)(a2 + 96), "iosurface");
          v30 = (void *)objc_msgSend(MEMORY[0x1E0CC6BB0], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 10, *(int *)(a2 + 24), *(int *)(a2 + 28), 0);
          objc_msgSend(v30, "setUsage:", 2);
          v31 = (id)objc_msgSend(*(id *)(a1 + 2904), "newTextureWithDescriptor:iosurface:plane:", v30, v29, 0);
          v32 = (void *)objc_msgSend(MEMORY[0x1E0CC6BB0], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 30, vcvtpd_u64_f64((double)*(int *)(a2 + 24) * 0.5), vcvtpd_u64_f64((double)*(int *)(a2 + 28) * 0.5), 0);
          objc_msgSend(v32, "setUsage:", 2);
          v33 = (id)objc_msgSend(*(id *)(a1 + 2904), "newTextureWithDescriptor:iosurface:plane:", v32, v29, 1);
          objc_msgSend(*(id *)(a1 + 2952), "setComputePipelineState:", compute_pipeline);
          objc_msgSend(*(id *)(a1 + 2952), "setTexture:atIndex:", *((_QWORD *)surface + 12), 1);
          objc_msgSend(*(id *)(a1 + 2952), "setTexture:atIndex:", v31, 2);
          objc_msgSend(*(id *)(a1 + 2952), "setTexture:atIndex:", v33, 3);
          __asm { FMOV            V1.2D, #0.125 }
          v39 = *(void **)(a1 + 2952);
          v43 = vcvtq_u64_f64(vmulq_f64(vcvtq_f64_u64((uint64x2_t)vaddw_s32(vdupq_n_s64(0xFuLL), v28)), _Q1));
          v44 = 1;
          v41 = vdupq_n_s64(0x10uLL);
          v42 = 1;
          objc_msgSend(v39, "dispatchThreadgroups:threadsPerThreadgroup:", &v43, &v41);
          if (surface != (char *)a3)
            CA::OGL::Context::release_surface(a1, (uint64_t)surface);
        }
        goto LABEL_32;
      }
    }
    else
    {
      v17 = *(_DWORD *)(a2 + 28);
    }
    v43.i64[0] = 0;
    v43.i64[1] = __PAIR64__(v17, v16);
    surface = CA::OGL::MetalContext::create_surface((CA::OGL::MetalContext *)a1, MTLPixelFormatA8Unorm, (int32x2_t *)&v43, 1048591);
    if (surface)
    {
      CA::OGL::MetalContext::copy_surface(a1, surface, a3, 0, 0, 0, 0);
      goto LABEL_29;
    }
LABEL_32:
    objc_autoreleasePoolPop(v15);
    return;
  }
  if (a7)
    v19 = 1;
  else
    v19 = v14;
  if ((a5 & 7) == 0 && !a6 && (v19 & 1) == 0)
  {
    v15 = (void *)MEMORY[0x186DBE2E4]();
    v20 = *(_QWORD *)(a3 + 120);
    if (v20 == 550)
      v20 = 554;
    if (*(_QWORD *)(a2 + 120) == v20
      && *(_DWORD *)(a3 + 40) == *(_DWORD *)(a2 + 40)
      && *(_DWORD *)(a3 + 44) == *(_DWORD *)(a2 + 44))
    {
      v21 = objc_msgSend(*(id *)(a2 + 96), "protectionOptions");
      v22 = *(int *)(a3 + 40);
      v23 = *(int *)(a3 + 44);
      if (CA::OGL::MetalContext::start_blit_encoder((CA::OGL::MetalContext *)a1, v21))
      {
        v24 = *(void **)(a1 + 2944);
        v25 = *(_QWORD *)(a3 + 96);
        v44 = 0;
        v43 = 0uLL;
        v41.i64[0] = v22;
        v41.i64[1] = v23;
        v42 = 1;
        v26 = *(_QWORD *)(a2 + 96);
        memset(v40, 0, sizeof(v40));
        objc_msgSend(v24, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:", v25, 0, 0, &v43, &v41, v26, 0, 0, v40);
        *(_DWORD *)(a2 + 64) = *(_DWORD *)(a3 + 64);
        goto LABEL_32;
      }
      *(_DWORD *)(a2 + 64) = *(_DWORD *)(a3 + 64);
    }
    objc_autoreleasePoolPop(v15);
  }
  CA::OGL::Context::copy_surface(a1, (const CA::Bounds *)a2, a3, a4, a5, a6, a7);
}

void sub_1844F1788(_Unwind_Exception *a1)
{
  void *v1;

  objc_autoreleasePoolPop(v1);
  _Unwind_Resume(a1);
}

uint64_t CA::Render::Surface::chroma_location(__IOSurface **this, __IOSurface *a2)
{
  unsigned int v2;
  int v4;
  __IOSurface *v5;
  int v6;
  __IOSurface *v7;

  v2 = *((unsigned __int8 *)this + 329);
  if ((v2 & 0x70) == 0)
  {
    v4 = CA::Render::Surface::ycbcr_matrix((CA::Render::Surface *)this, a2);
    v5 = this[14];
    if (v5)
    {
      v6 = 16 * CA::Render::iosurface_chroma_location(v5, v4);
    }
    else if (((v4 - 1) & 0xF9) != 0)
    {
      v6 = 32;
    }
    else
    {
      v6 = 16;
    }
    v2 = *((_BYTE *)this + 329) & 0x8F | v6;
    *((_BYTE *)this + 329) = *((_BYTE *)this + 329) & 0x8F | v6;
    v7 = this[12];
    if (v7)
    {
      *((_BYTE *)v7 + 329) = *((_BYTE *)v7 + 329) & 0x8F | v6;
      v2 = *((unsigned __int8 *)this + 329);
    }
  }
  return (v2 >> 4) & 7;
}

uint64_t CA::OGL::MetalContext::image_surface(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  CA::OGL::MetalContext::retain_image(a1, a2, a3, 1);
  return *(_QWORD *)(a2 + 32);
}

__IOSurface **CA::OGL::MetalContext::retain_image(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v4;
  __IOSurface **v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  float v12;
  int v13;
  float v14;
  uint64_t v15;
  int v16;
  int v17;
  char v18;
  CA::Render::Texture *v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  __IOSurface *v23;
  __IOSurface *v24;
  char v25;
  int v26;
  unsigned int *v27;
  unsigned int v28;
  __IOSurface *v29;
  unsigned int *v30;
  unsigned int v31;
  CA::WindowServer::IOSurface *v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v54;
  IOSurfaceRef buffer;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  char v61;
  __int16 v62;
  char v63;
  __int128 v64;
  __IOSurface *v65;
  __int16 v66;

  while (1)
  {
    v4 = a4;
    v5 = (__IOSurface **)a3;
    v6 = a2;
    v7 = a1;
    v8 = 0;
    v9 = 0;
    v62 = 0;
    v63 = 0;
    v65 = 0;
    v66 = 0;
    v59 = 0u;
    v60 = 0u;
    v61 = 0;
    v64 = 0uLL;
    v10 = a3[12];
    v58 = xmmword_18474E020;
    v57 = xmmword_18474E480;
    v56 = xmmword_18474E4E0;
    v11 = 0x100000001;
    v12 = 1.0;
    v13 = -1;
    v14 = 0.0;
    if (v10 <= 0x21)
      break;
    if (v10 == 34)
      goto LABEL_16;
    if (v10 == 51)
    {
      if (!*(_QWORD *)(a2 + 8))
      {
        *(_QWORD *)(a2 + 8) = a3;
        (*(void (**)(unsigned __int8 *))(*(_QWORD *)a3 + 176))(a3);
      }
      if (*(_QWORD *)(v6 + 32) || (v24 = v5[14]) == 0)
      {
        buffer = 0;
      }
      else
      {
        buffer = v5[14];
        CFRetain(v24);
      }
      v25 = *((_BYTE *)v5 + 328);
      v14 = (*((float (**)(__IOSurface **))*v5 + 19))(v5);
      v26 = (*((uint64_t (**)(__IOSurface **))*v5 + 34))(v5);
      v54 = v7;
      if ((*((unsigned int (**)(__IOSurface **))*v5 + 35))(v5))
      {
        v9 = (unsigned int *)v5[21];
        if (v9)
        {
          v27 = v9 + 4;
          v17 = v26;
          v18 = v25;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 + 1, v27));
        }
        else
        {
          v17 = v26;
          v18 = v25;
        }
        v29 = buffer;
        v56 = *((_OWORD *)v5 + 11);
        v57 = *((_OWORD *)v5 + 12);
        v8 = *((_WORD *)v5 + 117);
        v11 = *(uint64_t *)((char *)v5 + 236);
        v12 = *((float *)v5 + 70);
        v13 = *((_DWORD *)v5 + 75);
        v65 = v5[28];
        v66 = *((_WORD *)v5 + 116);
        v61 = *((_BYTE *)v5 + 276);
        v58 = *((_OWORD *)v5 + 13);
        v59 = *(_OWORD *)((char *)v5 + 244);
        v60 = *(_OWORD *)((char *)v5 + 260);
        v63 = *((_BYTE *)v5 + 279);
        v62 = *(_WORD *)((char *)v5 + 277);
        v64 = *(_OWORD *)((char *)v5 + 284);
        if (v9)
        {
          v30 = v9 + 4;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (v31 == 1)
            (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
        }
        v16 = 1;
      }
      else
      {
        v8 = 0;
        v16 = 0;
        v9 = 0;
        v58 = xmmword_18474E020;
        v57 = xmmword_18474E480;
        v56 = xmmword_18474E4E0;
        v17 = v26;
        v18 = v25;
        v13 = -1;
        v29 = buffer;
      }
LABEL_41:
      if (v29)
      {
        v32 = *(CA::WindowServer::IOSurface **)(v54 + 176);
        if (v32)
          v32 = (CA::WindowServer::IOSurface *)(*(uint64_t (**)(CA::WindowServer::IOSurface *))(*(_QWORD *)v32 + 16))(v32);
        *(_QWORD *)(v6 + 32) = CA::WindowServer::IOSurface::wrap_buffer(v32, v29, 0, 1);
      }
      goto LABEL_45;
    }
    v15 = a1;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    if (v10 != 38)
      goto LABEL_45;
    v19 = CA::Render::PixelBuffer::image((CA::Render::PixelBuffer *)a3);
    if (!v19)
      return 0;
    *(_BYTE *)(v6 + 56) = *(_BYTE *)(v6 + 56) & 0xC0 | 0x17;
    a3 = (unsigned __int8 *)v19;
    a1 = v15;
    a2 = v6;
    a4 = v4;
  }
  if (v10 == 9)
  {
LABEL_16:
    if (!*(_QWORD *)(a2 + 8))
    {
      *(_QWORD *)(a2 + 8) = a3;
      (*(void (**)(unsigned __int8 *))(*(_QWORD *)a3 + 176))(a3);
    }
    v8 = 0;
    v9 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
  }
  else
  {
    if (v10 == 23)
    {
      if (!*(_QWORD *)(a2 + 8))
      {
        *(_QWORD *)(a2 + 8) = a3;
        v20 = (unsigned int *)(a3 + 148);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 + 1, v20));
      }
      if ((_DWORD)a4)
      {
        v22 = *(_QWORD *)(a2 + 32);
        if (!v22)
        {
          v54 = v7;
          v58 = xmmword_18474E020;
          v57 = xmmword_18474E480;
          v56 = xmmword_18474E4E0;
          v29 = CA::Render::Image::retain_iosurface((CA::Render::Image *)a3);
          v8 = 0;
          v18 = 0;
          v17 = 0;
          v16 = 0;
          v9 = 0;
          v11 = 0x100000001;
          v14 = 0.0;
          v12 = 1.0;
          v13 = -1;
          goto LABEL_41;
        }
        v23 = (__IOSurface *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 160))(v22);
        CA::Render::Image::update_iosurface(v5, v23);
      }
      v8 = 0;
      v9 = 0;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v13 = -1;
      goto LABEL_45;
    }
    v16 = 0;
    v17 = 0;
    v18 = 0;
  }
LABEL_45:
  v33 = *(_BYTE **)(v6 + 32);
  if (v33)
  {
    v33[229] = v18;
    (*(void (**)(_BYTE *, float))(*(_QWORD *)v33 + 200))(v33, v14);
    v34 = *(_QWORD *)(v6 + 32);
    v36 = *(_DWORD *)(v34 + 224);
    v35 = v34 + 224;
    v37 = v36 | ((unint64_t)*(unsigned __int8 *)(v35 + 4) << 32);
    v38 = 0x1000000000;
    if (!v17)
      v38 = 0;
    v39 = v37 & 0xFFFFFFEFFFFFFFFFLL;
    *(_DWORD *)v35 = v39;
    *(_BYTE *)(v35 + 4) = (v39 | v38) >> 32;
    v40 = *(_QWORD *)(v6 + 32);
    v42 = *(_DWORD *)(v40 + 224);
    v41 = v40 + 224;
    v43 = v42 | ((unint64_t)*(unsigned __int8 *)(v41 + 4) << 32);
    v44 = 32;
    if (!v16)
      v44 = 0;
    v45 = v43 & 0xFFFFFFDFFFFFFFFFLL;
    *(_DWORD *)v41 = v45;
    *(_BYTE *)(v41 + 4) = BYTE4(v45) | v44;
    if (v16)
    {
      v46 = *(_QWORD *)(v6 + 32);
      v47 = *(unsigned int **)(v46 + 88);
      if (v47 != v9)
      {
        if (v47)
        {
          v48 = v47 + 4;
          do
          {
            v49 = __ldaxr(v48);
            v50 = v49 - 1;
          }
          while (__stlxr(v50, v48));
          if (!v50)
            (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 8))(v47);
        }
        if (v9)
        {
          v51 = v9 + 4;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 + 1, v51));
        }
        *(_QWORD *)(v46 + 88) = v9;
        v46 = *(_QWORD *)(v6 + 32);
      }
      *(_OWORD *)(v46 + 96) = v56;
      *(_OWORD *)(v46 + 112) = v57;
      *(_OWORD *)(v46 + 128) = v58;
      *(_QWORD *)(v46 + 144) = v65;
      *(_WORD *)(v46 + 152) = v66;
      *(_WORD *)(v46 + 154) = v8;
      *(_QWORD *)(v46 + 156) = v11;
      *(_OWORD *)(v46 + 164) = v59;
      *(_OWORD *)(v46 + 180) = v60;
      *(_BYTE *)(v46 + 196) = v61;
      *(_BYTE *)(v46 + 199) = v63;
      *(_WORD *)(v46 + 197) = v62;
      *(float *)(v46 + 200) = v12;
      *(_OWORD *)(v46 + 204) = v64;
      *(_DWORD *)(v46 + 220) = v13;
    }
  }
  return v5;
}

float CA::Render::Surface::edr_factor(CA::Render::Surface *this)
{
  return *((float *)this + 33);
}

uint64_t CA::Render::Surface::should_display_tonemap(CA::Render::Surface *this)
{
  return (*((unsigned __int16 *)this + 168) >> 9) & 1;
}

uint64_t CA::Render::Image::ref_image_data(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this + 148);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

uint64_t CA::Render::Surface::did_gpu_tonemap(CA::Render::Surface *this)
{
  return HIBYTE(*((unsigned __int16 *)this + 168)) & 1;
}

uint64_t CA::Render::fourcc_is_444(CA::Render *this)
{
  int v1;
  uint64_t result;
  int v3;
  unsigned __int16 v4;
  unsigned __int16 v5;
  unsigned __int16 v6;

  v1 = (int)this;
  result = 1;
  if (v1 <= 875836533)
  {
    if (v1 <= 762537523)
    {
      if (v1 > 645166643)
      {
        if (v1 > 645424691)
        {
          if (v1 > 758670899)
          {
            if (v1 == 758670900)
              return result;
            v3 = 758674996;
            goto LABEL_93;
          }
          if (v1 == 645424692)
            return result;
          v6 = 30260;
        }
        else
        {
          if (v1 <= 645411895)
          {
            if (v1 == 645166644)
              return result;
            v3 = 645280824;
            goto LABEL_93;
          }
          if (v1 == 645411896)
            return result;
          v6 = 13427;
        }
        v3 = v6 | 0x26780000;
        goto LABEL_93;
      }
      if (v1 <= 645097011)
      {
        if (v1 == 641230388 || v1 == 641234484)
          return result;
        v4 = 13427;
      }
      else
      {
        if (v1 > 645149810)
        {
          if (v1 == 645149811)
            return result;
          v3 = 645162548;
          goto LABEL_93;
        }
        if (v1 == 645097012)
          return result;
        v4 = 30260;
      }
      v3 = v4 | 0x26730000;
      goto LABEL_93;
    }
    if (v1 > 792229427)
    {
      if (v1 > 796161587)
      {
        if (v1 > 796423731)
        {
          if (v1 == 796423732)
            return result;
          v3 = 875836518;
        }
        else
        {
          if (v1 == 796161588)
            return result;
          v3 = 796419636;
        }
      }
      else if (v1 > 796096051)
      {
        if (v1 == 796096052)
          return result;
        v3 = 796157492;
      }
      else
      {
        if (v1 == 792229428)
          return result;
        v3 = 796091956;
      }
      goto LABEL_93;
    }
    if (v1 > 762607155)
    {
      if (v1 > 762869299)
      {
        if (v1 == 762869300)
          return result;
        v3 = 792225332;
      }
      else
      {
        if (v1 == 762607156)
          return result;
        v3 = 762865204;
      }
      goto LABEL_93;
    }
    if (v1 != 762537524 && v1 != 762541620)
    {
      v3 = 762603060;
      goto LABEL_93;
    }
  }
  else
  {
    if (v1 > 1952855091)
    {
      if (v1 > 2084070963)
      {
        if (v1 > 2088003123)
        {
          if (v1 > 2088265267)
          {
            if (v1 == 2088265268)
              return result;
            v3 = 2088269364;
          }
          else
          {
            if (v1 == 2088003124)
              return result;
            v3 = 2088007220;
          }
        }
        else if (v1 > 2087937587)
        {
          if (v1 == 2087937588)
            return result;
          v3 = 2087941684;
        }
        else
        {
          if (v1 == 2084070964)
            return result;
          v3 = 2084075060;
        }
        goto LABEL_93;
      }
      if (v1 > 2016698679)
      {
        if (v1 > 2019963955)
        {
          if (v1 == 2019963956)
            return result;
          v3 = 2033463606;
          goto LABEL_93;
        }
        if (v1 == 2016698680)
          return result;
        v5 = 24947;
      }
      else
      {
        if (v1 <= 1983144247)
        {
          if (v1 == 1952855092)
            return result;
          v3 = 1953903668;
          goto LABEL_93;
        }
        if (v1 == 1983144248)
          return result;
        v5 = 13364;
      }
      v3 = v5 | 0x78340000;
LABEL_93:
      if (v1 != v3)
        return 0;
      return result;
    }
    if (v1 > 1882469427)
    {
      if (v1 > 1932812658)
      {
        if (v1 > 1937126451)
        {
          if (v1 == 1937126452)
            return result;
          v3 = 1949589875;
        }
        else
        {
          if (v1 == 1932812659)
            return result;
          v3 = 1936077876;
        }
      }
      else if (v1 > 1886676531)
      {
        if (v1 == 1886676532)
          return result;
        v3 = 1886680628;
      }
      else
      {
        if (v1 == 1882469428)
          return result;
        v3 = 1885746228;
      }
      goto LABEL_93;
    }
    if (v1 > 1534354995)
    {
      if (v1 > 1534617139)
      {
        if (v1 == 1534617140)
          return result;
        v3 = 1534621236;
      }
      else
      {
        if (v1 == 1534354996)
          return result;
        v3 = 1534359092;
      }
      goto LABEL_93;
    }
    if (v1 != 875836534 && v1 != 1530422836)
    {
      v3 = 1530426932;
      goto LABEL_93;
    }
  }
  return result;
}

uint64_t CA::Render::Surface::ref_image_data(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this + 324);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

uint64_t CA::Render::CompressedImage::ref_image_data(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this + 164);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

uint64_t CA::Render::Surface::ycbcr_matrix(CA::Render::Surface *this, __IOSurface *a2)
{
  char v2;
  CA::Render *v4;
  char v5;
  uint64_t v6;

  v2 = *((_BYTE *)this + 329);
  if ((v2 & 0xF) == 0)
  {
    v4 = (CA::Render *)*((_QWORD *)this + 14);
    if (v4)
    {
      v5 = CA::Render::iosurface_ycbcr_matrix(v4, a2);
      v2 = *((_BYTE *)this + 329);
    }
    else
    {
      v5 = 1;
    }
    v2 = v2 & 0xF0 | v5;
    *((_BYTE *)this + 329) = v2;
    v6 = *((_QWORD *)this + 12);
    if (v6)
    {
      *(_BYTE *)(v6 + 329) = *(_BYTE *)(v6 + 329) & 0xF0 | v5;
      v2 = *((_BYTE *)this + 329);
    }
  }
  return v2 & 0xF;
}

uint64_t CA::Render::ycbcr_fourcc_is_triplanar(CA::Render *this)
{
  int v1;
  uint64_t result;
  int v3;

  v1 = (int)this;
  result = 1;
  if (v1 > 1983013175)
  {
    if (v1 > 2016567607)
    {
      if (v1 > 2016698679)
      {
        if (v1 == 2016698680)
          return result;
        v3 = 2016698739;
      }
      else
      {
        if (v1 == 2016567608)
          return result;
        v3 = 2016567667;
      }
    }
    else if (v1 > 2016436535)
    {
      if (v1 == 2016436536)
        return result;
      v3 = 2016436595;
    }
    else
    {
      if (v1 == 1983013176)
        return result;
      v3 = 1983144248;
    }
    goto LABEL_22;
  }
  if (v1 > 1949327730)
  {
    if (v1 > 1949589874)
    {
      if (v1 == 1949589875)
        return result;
      v3 = 1982882104;
    }
    else
    {
      if (v1 == 1949327731)
        return result;
      v3 = 1949458803;
    }
    goto LABEL_22;
  }
  if (v1 != 1932550515 && v1 != 1932681587)
  {
    v3 = 1932812659;
LABEL_22:
    if (v1 != v3)
      return 0;
  }
  return result;
}

uint64_t CA::Render::iosurface_chroma_location(__IOSurface *a1, int a2)
{
  unsigned __int8 v2;
  CFTypeRef v3;
  const void *v4;

  if (((a2 - 1) & 0xF9) != 0)
    v2 = 2;
  else
    v2 = 1;
  v3 = IOSurfaceCopyValue(a1, (CFStringRef)*MEMORY[0x1E0CBBF20]);
  if (v3)
  {
    v4 = v3;
    if (CFEqual(v3, (CFTypeRef)*MEMORY[0x1E0CBBF40]))
    {
      v2 = 1;
    }
    else if (CFEqual(v4, (CFTypeRef)*MEMORY[0x1E0CBBF38]))
    {
      v2 = 2;
    }
    else if (CFEqual(v4, (CFTypeRef)*MEMORY[0x1E0CBBF50]))
    {
      v2 = 3;
    }
    else if (CFEqual(v4, (CFTypeRef)*MEMORY[0x1E0CBBF48]))
    {
      v2 = 4;
    }
    else if (CFEqual(v4, (CFTypeRef)*MEMORY[0x1E0CBBF30]))
    {
      v2 = 5;
    }
    else if (CFEqual(v4, (CFTypeRef)*MEMORY[0x1E0CBBF28]))
    {
      v2 = 6;
    }
    CFRelease(v4);
  }
  return v2;
}

uint64_t CA::Render::iosurface_ycbcr_matrix(CA::Render *this, __IOSurface *a2)
{
  signed int PixelFormat;
  int v3;
  unsigned __int16 v4;
  unsigned __int16 v5;
  int v6;

  PixelFormat = IOSurfaceGetPixelFormat(this);
  v3 = 0;
  if (PixelFormat > 1952854575)
  {
    if (PixelFormat <= 2019963439)
    {
      if (PixelFormat == 1952854576 || PixelFormat == 1952854578)
        goto LABEL_23;
      v6 = 1952855092;
    }
    else
    {
      if (PixelFormat > 2019963955)
      {
        if (PixelFormat == 2037741158)
          goto LABEL_23;
        v5 = 13364;
      }
      else
      {
        if (PixelFormat == 2019963440)
          goto LABEL_23;
        v5 = 12850;
      }
      v6 = v5 | 0x78660000;
    }
  }
  else
  {
    if (PixelFormat > 1714696751)
    {
      if (PixelFormat > 1936077361)
      {
        if (PixelFormat != 1936077362)
        {
          v4 = 13364;
          goto LABEL_18;
        }
      }
      else if (PixelFormat != 1714696752)
      {
        v4 = 12848;
LABEL_18:
        v6 = v4 | 0x73660000;
        goto LABEL_22;
      }
LABEL_23:
      v3 = 1;
      goto LABEL_24;
    }
    if (PixelFormat == 875704422 || PixelFormat == 875704934)
      goto LABEL_23;
    v6 = 875836518;
  }
LABEL_22:
  if (PixelFormat == v6)
    goto LABEL_23;
LABEL_24:
  IOSurfaceGetYCbCrMatrix();
  return (v3 + 1);
}

uint64_t CA::OGL::MetalContext::can_generate_mipmaps_for_format(CA::OGL::MetalContext *this, MTLPixelFormat *a2, BOOL *a3)
{
  uint64_t v4;

  v4 = *a2;
  if ((unint64_t)(v4 - 550) < 6)
    return 0;
  if (v4 == 1)
  {
    *a2 = MTLPixelFormatR8Unorm;
    *a3 = 1;
  }
  MTLPixelFormatGetInfoForDevice();
  return 0;
}

uint64_t CA::OGL::MetalContext::generate_mipmaps_for_texture(id *a1, uint64_t a2)
{
  void *v3;
  uint64_t result;

  v3 = *(void **)(a2 + 64);
  if (!v3)
    __assert_rtn("generate_mipmaps_for_texture", "ogl-metal.mm", 12238, "tex->textures[0] && \"nil mtl texture?\"");
  result = CA::OGL::MetalContext::start_blit_encoder((CA::OGL::MetalContext *)a1, objc_msgSend(v3, "protectionOptions"));
  if ((_DWORD)result)
    return objc_msgSend(a1[368], "generateMipmapsForTexture:", *(_QWORD *)(a2 + 64));
  return result;
}

CGPathRef CA::CG::Renderer::retain_simple_path(CA::CG::Renderer *this, const CGRect *a2, const CGSize *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  CGFloat *v11;
  char *v12;
  CGPath *Mutable;
  CGPath *v15;
  CGFloat y;
  CGFloat x;
  CGFloat height;
  CGFloat width;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  const CGPath *v26;
  char *v27;
  CGPoint origin;
  CGPoint v29;
  char *v30;
  char *v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  int v38;
  const CGPath *v39;
  CGRect v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = a3 == 0;
  v10 = -1;
  do
  {
    v11 = (CGFloat *)((char *)this + v6);
    if (*(_DWORD *)((char *)this + v6 + 2684) < v10)
    {
      v7 = v8;
      v10 = *(_DWORD *)((char *)this + v6 + 2684);
    }
    if (*((_QWORD *)v11 + 334))
    {
      if (*((unsigned __int8 *)v11 + 2680) == v9)
      {
        v40.origin.x = v11[328];
        v40.origin.y = *(CGFloat *)((char *)this + v6 + 2632);
        v40.size.width = *(CGFloat *)((char *)this + v6 + 2640);
        v40.size.height = *(CGFloat *)((char *)this + v6 + 2648);
        if (CGRectEqualToRect(v40, *a2))
        {
          if (!a3)
          {
            v12 = (char *)this + v6;
LABEL_39:
            v38 = *((_DWORD *)this + 1040) + 1;
            *((_DWORD *)this + 1040) = v38;
            *((_DWORD *)v12 + 671) = v38;
            v39 = (const CGPath *)CA::Render::Path::cg_path(*((CA::Render::Path **)v12 + 334));
            return CGPathRetain(v39);
          }
          v12 = (char *)this + v6;
          if (*(double *)((char *)this + v6 + 2656) == a3->width && *(double *)((char *)this + v6 + 2664) == a3->height)
            goto LABEL_39;
        }
      }
    }
    ++v8;
    v6 += 64;
  }
  while (v6 != 1536);
  Mutable = CGPathCreateMutable();
  v15 = Mutable;
  if (Mutable)
  {
    x = a2->origin.x;
    y = a2->origin.y;
    width = a2->size.width;
    height = a2->size.height;
    if (a3)
    {
      v20 = a3->width;
      if (a3->width <= 0.0)
        goto LABEL_28;
      v21 = a3->height;
      if (v21 <= 0.0)
        goto LABEL_28;
      v22 = CGRectGetWidth(*a2);
      v41.origin.x = x;
      v41.origin.y = y;
      v41.size.width = width;
      v41.size.height = height;
      v23 = CGRectGetHeight(v41);
      v24 = 0.0;
      v25 = 0.0;
      if (v20 >= 0.0)
      {
        v25 = v20;
        if (v20 + v20 > v22)
          v25 = v22 * 0.5 + -0.0001;
      }
      if (v21 >= 0.0)
      {
        v24 = v21;
        if (v21 + v21 > v23)
          v24 = v23 * 0.5 + -0.0001;
      }
      if (v25 < 0.0 || v25 + v25 > v22 || v24 < 0.0 || v24 + v24 > v23)
      {
LABEL_28:
        v43.origin.x = x;
        v43.origin.y = y;
        v43.size.width = width;
        v43.size.height = height;
        CGPathAddRect(v15, 0, v43);
      }
      else
      {
        v42.origin.x = x;
        v42.origin.y = y;
        v42.size.width = width;
        v42.size.height = height;
        CGPathAddRoundedRect(v15, 0, v42, v25, v24);
      }
      v27 = (char *)this + 64 * v7;
      origin = a2->origin;
      *((_OWORD *)v27 + 165) = a2->size;
      *((CGPoint *)v27 + 164) = origin;
      *((CGSize *)v27 + 166) = *a3;
    }
    else
    {
      CGPathAddEllipseInRect(Mutable, 0, *a2);
      v29 = a2->origin;
      v30 = (char *)this + 64 * v7;
      *((_OWORD *)v30 + 165) = a2->size;
      *((CGPoint *)v30 + 164) = v29;
    }
    v31 = (char *)this + 64 * v7;
    v32 = (unsigned int *)*((_QWORD *)v31 + 334);
    if (v32)
    {
      v33 = v32 + 2;
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (!v35)
        (*(void (**)(unsigned int *))(*(_QWORD *)v32 + 16))(v32);
    }
    *((_QWORD *)v31 + 334) = CA::Render::Path::new_path(v15, v26);
    v31[2680] = v9;
    v36 = *((_DWORD *)this + 1040) + 1;
    *((_DWORD *)this + 1040) = v36;
    *((_DWORD *)v31 + 671) = v36;
  }
  return v15;
}

CA::Render::Path *CA::Render::Path::stroke(CA::Render::Path *result, double a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const CGPath *v6;
  const CGPath *v7;
  uint64_t StrokedPath;
  int8x16_t *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  if (a5)
  {
    CA::Render::Path::cg_path(result);
    result = (CA::Render::Path *)CGPathCreateDashedPath();
    if (result)
    {
      v7 = result;
      if (a2 <= 0.0)
        goto LABEL_5;
      StrokedPath = CGPathCreateStrokedPath();
      CGPathRelease(v7);
      v7 = (const CGPath *)StrokedPath;
      if (StrokedPath)
        goto LABEL_5;
      return 0;
    }
  }
  else
  {
    if (a2 > 0.0)
    {
      CA::Render::Path::cg_path(result);
      v7 = (const CGPath *)CGPathCreateStrokedPath();
      if (v7)
      {
LABEL_5:
        v9 = CA::Render::Path::new_path(v7, v6);
        CGPathRelease(v7);
        return (CA::Render::Path *)v9;
      }
      return 0;
    }
    if (result)
    {
      v10 = (unsigned int *)((char *)result + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      if (!v11)
      {
        result = 0;
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
      }
    }
  }
  return result;
}

unint64_t CA::Render::Path::cg_path(CA::Render::Path *this)
{
  unint64_t *v1;
  CGPath *Mutable;
  CGFloat *v4;
  _BYTE *v5;
  char *v6;
  int v7;

  v1 = (unint64_t *)((char *)this + 56);
  if (!*((_QWORD *)this + 7))
  {
    Mutable = CGPathCreateMutable();
    v6 = (char *)this + 32;
    v4 = (CGFloat *)*((_QWORD *)this + 4);
    v5 = (_BYTE *)*((_QWORD *)v6 + 1);
    while (2)
    {
      switch(*v5)
      {
        case 0:
          CGPathCloseSubpath(Mutable);
          goto LABEL_9;
        case 1:
          CGPathMoveToPoint(Mutable, 0, *v4, v4[1]);
          goto LABEL_9;
        case 2:
          CGPathAddLineToPoint(Mutable, 0, *v4, v4[1]);
          goto LABEL_9;
        case 3:
          CGPathAddQuadCurveToPoint(Mutable, 0, *v4, v4[1], v4[2], v4[3]);
          goto LABEL_9;
        case 4:
          CGPathAddCurveToPoint(Mutable, 0, *v4, v4[1], v4[2], v4[3], v4[4], v4[5]);
          goto LABEL_9;
        case 5:
          break;
        default:
LABEL_9:
          v7 = *v5++;
          v4 += 2 * CA::Render::path_counts[v7];
          continue;
      }
      break;
    }
    while (!__ldaxr(v1))
    {
      if (!__stlxr((unint64_t)Mutable, v1))
        return *v1;
    }
    __clrex();
    CGPathRelease(Mutable);
  }
  return *v1;
}

void sub_1844F3224(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

unsigned int *CA::Render::ShapeLayer::invalidate_stroke_path(CA::Render::ShapeLayer *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *result;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = (unsigned int *)*((_QWORD *)this + 17);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    *((_QWORD *)this + 17) = 0;
  }
  *((_QWORD *)this + 18) = 0x3FF0000000000000;
  result = (unsigned int *)*((_QWORD *)this + 16);
  if (result)
  {
    v7 = result + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
    *((_QWORD *)this + 16) = 0;
  }
  return result;
}

int8x16_t *CA::Render::Path::new_path(CGPathRef path, const CGPath *a2)
{
  uint64_t v3;
  int8x16_t *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  size_t v8;
  malloc_zone_t *malloc_zone;
  int8x16_t *v10;
  __int32 v11;
  unsigned __int32 v12;
  __int32 v13;
  _BYTE *v14;
  int *v15;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int8x16_t v21;
  uint64_t v22;
  uint8_t buf[8];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (!path)
    return 0;
  if (CA::Render::Path::_path_table)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Path::_path_lock);
    v3 = x_hash_table_lookup(CA::Render::Path::_path_table, (uint64_t)path, 0);
    if (v3)
    {
      v4 = (int8x16_t *)v3;
      v5 = (unsigned int *)(v3 + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
      if (v6)
      {
LABEL_14:
        os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Path::_path_lock);
        return v4;
      }
      do
        v7 = __ldaxr(v5);
      while (__stlxr(v7 - 1, v5));
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Path::_path_lock);
  }
  v22 = 1;
  v21 = 0uLL;
  v19 = 0;
  v20 = 0;
  v18 = 0;
  CGPathApply(path, &v18, (CGPathApplierFunction)CA::Render::count_elements);
  if (!(_BYTE)v22)
  {
    if ((CA::Render::Path::new_path(CGPath const*,BOOL)::_before & 1) == 0)
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v17 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v17, OS_LOG_TYPE_DEFAULT, "CoreAnimation: ignoring invalid path\n", buf, 2u);
        }
      }
      v4 = 0;
      CA::Render::Path::new_path(CGPath const*,BOOL)::_before = 1;
      return v4;
    }
    return 0;
  }
  v8 = v18 + 16 * v19 + 113;
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v10 = (int8x16_t *)malloc_type_zone_malloc(malloc_zone, v8, 0x8BB15036uLL);
  v4 = v10;
  if (v10)
  {
    v12 = v19;
    v11 = v20;
    v13 = v18;
    v10->i32[2] = 1;
    v10->i32[3] = 36;
    ++dword_1ECDC7CB8;
    v10->i64[0] = (uint64_t)off_1E1598688;
    v10[1].i32[0] = v11;
    v10[1].i32[1] = v13;
    v10[1].i32[2] = v12;
    v10[2].i64[0] = (uint64_t)v10[7].i64;
    v10[2].i64[1] = (uint64_t)v10[v12 + 7].i64;
    v10[3].i64[1] = 0;
    v10[4].i64[0] = 0;
    v10[3].i64[0] = (uint64_t)path;
    v10[3].i64[1] = (uint64_t)CGPathRetain(path);
    v21 = vextq_s8(v4[2], v4[2], 8uLL);
    CGPathApply(path, &v18, (CGPathApplierFunction)CA::Render::copy_elements);
    v14 = (_BYTE *)v21.i64[0]++;
    *v14 = 5;
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Path::_path_lock);
    v15 = (int *)CA::Render::Path::_path_table;
    if (!CA::Render::Path::_path_table)
    {
      v15 = (int *)x_hash_table_new_(0, 0, 0, 0, 0, 0);
      CA::Render::Path::_path_table = (uint64_t)v15;
    }
    hash_table_modify(v15, v4[3].i64[0], (uint64_t)v4, 0);
    goto LABEL_14;
  }
  return v4;
}

unsigned int *CA::Render::ShapeLayer::set_path(CA::Render::ShapeLayer *this, CA::Render::Path *a2)
{
  CA::Render::Path *v3;
  CA::Render::Path *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v11;

  v3 = (CA::Render::Path *)*((_QWORD *)this + 2);
  if (v3 != a2)
  {
    v4 = a2;
    if (v3)
    {
      v5 = (unsigned int *)((char *)v3 + 8);
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
        (*(void (**)(CA::Render::Path *))(*(_QWORD *)v3 + 16))(v3);
    }
    if (v4)
    {
      v8 = (unsigned int *)((char *)v4 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      if (!v9)
      {
        v4 = 0;
        do
          v11 = __ldaxr(v8);
        while (__stlxr(v11 - 1, v8));
      }
    }
    *((_QWORD *)this + 2) = v4;
  }
  return CA::Render::ShapeLayer::invalidate_stroke_path(this);
}

void sub_1844F4858(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

CALayer *CA::Layer::mask(CA::Layer *this)
{
  int v2;
  CA::Transaction *v3;
  CALayer *result;

  v2 = *((_DWORD *)this + 1) & 0x60000;
  if (!v2)
    return (CALayer *)*((_QWORD *)this + 4);
  v3 = CA::Transaction::ensure_compat(this);
  result = (CALayer *)CA::Layer::model_layer(this, v3);
  if (result)
  {
    result = (CALayer *)result[1].super.isa;
    if (v2 == 0x20000 && result != 0)
      return CA::Layer::presentation_layer((CA::Layer *)result->_attr.layer, (CA::Transaction::Shared **)v3);
  }
  return result;
}

void sub_1844F4C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9)
{
  X::Ref<CA::Layer>::~Ref(&a9);
  _Unwind_Resume(a1);
}

void sub_1844F5098(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1844F53F4(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1844F5F88(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

void CA::Layer::get_frame_transform(CA::Layer *this, CGAffineTransform *a2, char a3)
{
  CA::Layer **v6;
  const double *v7;
  CA::Transaction *v8;
  int v9;
  float64_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  __int128 v21;
  __int128 v22;
  CALayer *v23;
  void *layer;
  float64_t v26;
  const double *v27;
  __int128 v28;
  __int128 v29;
  int v30;
  CGFloat v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  CGAffineTransform v40;
  CGAffineTransform v41;
  CGAffineTransform v42;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGAffineTransform v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  float64x2_t v49;
  __int128 v50;
  CGAffineTransform v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  float64x2_t v55;
  __int128 v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v6 = (CA::Layer **)*((_QWORD *)this + 2);
  v8 = CA::Transaction::ensure_compat(this);
  v9 = *((_DWORD *)v8 + 25);
  *((_DWORD *)v8 + 25) = v9 + 1;
  if (!v9)
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
  if ((*((_BYTE *)this + 56) & 8) != 0)
  {
    objc_msgSend(v6, "anchorPoint");
    _Q0.f64[1] = v15;
  }
  else
  {
    __asm { FMOV            V0.2D, #0.5 }
  }
  v16 = vmulq_f64(*((float64x2_t *)this + 7), _Q0);
  if ((*((_BYTE *)this + 55) & 0x10) != 0)
  {
    v37 = v16;
    if (v6)
    {
      objc_msgSend(v6, "transform");
    }
    else
    {
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v46 = 0u;
      memset(&v45, 0, sizeof(v45));
    }
    v53 = v47;
    v54 = v48;
    v55 = v49;
    v56 = v50;
    v51 = v45;
    v52 = v46;
    if (CA::Mat4Impl::mat4_is_affine((CA::Mat4Impl *)&v51, v7))
    {
      v18 = *(float64x2_t *)&v51.a;
      v19 = *(float64x2_t *)&v51.tx;
      *(_OWORD *)&a2->a = *(_OWORD *)&v51.a;
      *(float64x2_t *)&a2->c = v19;
      v20 = v55;
      *(float64x2_t *)&a2->tx = v55;
    }
    else
    {
      v22 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
      v21 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
      *(_OWORD *)&a2->a = *MEMORY[0x1E0C9BAA8];
      *(_OWORD *)&a2->c = v22;
      *(_OWORD *)&a2->tx = v21;
      v18 = *(float64x2_t *)&a2->a;
      v19 = *(float64x2_t *)&a2->c;
      v20 = *(float64x2_t *)&a2->tx;
    }
    v17 = vaddq_f64(vsubq_f64(*((float64x2_t *)this + 5), vmlaq_n_f64(vmulq_laneq_f64(v19, v37, 1), v18, v37.f64[0])), v20);
  }
  else
  {
    a2->a = 1.0;
    a2->b = 0.0;
    a2->c = 0.0;
    a2->d = 1.0;
    v17 = vsubq_f64(*((float64x2_t *)this + 5), v16);
  }
  *(float64x2_t *)&a2->tx = v17;
  if ((a3 & 1) == 0)
  {
    if (v6)
    {
      v23 = CA::Layer::superlayer(v6[2], v8);
      if (v23)
      {
        if (dyld_program_sdk_at_least())
        {
          layer = v23->_attr.layer;
          if ((*((_BYTE *)layer + 55) & 0x20) != 0)
          {
            if ((*((_BYTE *)layer + 56) & 8) != 0)
            {
              -[CALayer anchorPoint](v23, "anchorPoint");
              _Q0.f64[1] = v26;
            }
            else
            {
              __asm { FMOV            V0.2D, #0.5 }
            }
            v38 = vmlaq_f64(*((float64x2_t *)layer + 6), _Q0, *((float64x2_t *)layer + 7));
            *(float64x2_t *)&a2->tx = vsubq_f64(*(float64x2_t *)&a2->tx, v38);
            -[CALayer sublayerTransform](v23, "sublayerTransform", *(_OWORD *)&v38);
            v53 = v47;
            v54 = v48;
            v55 = v49;
            v56 = v50;
            v51 = v45;
            v52 = v46;
            if (CA::Mat4Impl::mat4_is_affine((CA::Mat4Impl *)&v51, v27))
            {
              v28 = *(_OWORD *)&a2->c;
              *(_OWORD *)&t1.a = *(_OWORD *)&a2->a;
              *(_OWORD *)&t1.c = v28;
              *(_OWORD *)&t1.tx = *(_OWORD *)&a2->tx;
              *(_OWORD *)&t2.a = *(_OWORD *)&v51.a;
              *(_OWORD *)&t2.c = *(_OWORD *)&v51.tx;
              *(float64x2_t *)&t2.tx = v55;
              CGAffineTransformConcat(&v45, &t1, &t2);
              v29 = *(_OWORD *)&v45.c;
              *(_OWORD *)&a2->a = *(_OWORD *)&v45.a;
              *(_OWORD *)&a2->c = v29;
              *(_OWORD *)&a2->tx = *(_OWORD *)&v45.tx;
            }
            *(float64x2_t *)&a2->tx = vaddq_f64(*(float64x2_t *)&a2->tx, v39);
          }
        }
      }
    }
  }
  v30 = *((_DWORD *)this + 12);
  if ((v30 & 0x800) != 0)
  {
    v31 = *((double *)this + 15);
    v42.b = 0.0;
    v42.c = 0.0;
    v42.a = 1.0;
    *(_OWORD *)&v42.d = xmmword_18474DFF0;
    v42.ty = v31;
    v32 = *(_OWORD *)&a2->c;
    *(_OWORD *)&v41.a = *(_OWORD *)&a2->a;
    *(_OWORD *)&v41.c = v32;
    *(_OWORD *)&v41.tx = *(_OWORD *)&a2->tx;
    CGAffineTransformConcat(&v45, &v42, &v41);
    v33 = *(_OWORD *)&v45.c;
    *(_OWORD *)&a2->a = *(_OWORD *)&v45.a;
    *(_OWORD *)&a2->c = v33;
    *(_OWORD *)&a2->tx = *(_OWORD *)&v45.tx;
    v30 = *((_DWORD *)this + 12);
  }
  if ((v30 & 0x10000000) != 0)
  {
    v36 = *(float64x2_t *)&a2->a;
    *(float64x2_t *)&a2->tx = vmlaq_n_f64(*(float64x2_t *)&a2->tx, *(float64x2_t *)&a2->a, *((double *)this + 14));
    *(float64x2_t *)&a2->a = vnegq_f64(v36);
  }
  if ((*((_BYTE *)this + 55) & 4) != 0)
  {
    v34 = *(_OWORD *)&a2->c;
    *(_OWORD *)&v40.a = *(_OWORD *)&a2->a;
    *(_OWORD *)&v40.c = v34;
    *(_OWORD *)&v40.tx = *(_OWORD *)&a2->tx;
    CGAffineTransformTranslate(&v45, &v40, -*((double *)this + 12), -*((double *)this + 13));
    v35 = *(_OWORD *)&v45.c;
    *(_OWORD *)&a2->a = *(_OWORD *)&v45.a;
    *(_OWORD *)&a2->c = v35;
    *(_OWORD *)&a2->tx = *(_OWORD *)&v45.tx;
  }
  CA::Transaction::unlock(v8);
}

void sub_1844F6380(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t CA_CGAffineTransformIsValid()
{
  if (CGFloatIsValid()
    && CGFloatIsValid()
    && CGFloatIsValid()
    && CGFloatIsValid()
    && CGFloatIsValid())
  {
    return CGFloatIsValid();
  }
  else
  {
    return 0;
  }
}

CGImageRef create_tinted_contents(CGImage *a1, CGColor *a2, char a3)
{
  size_t Width;
  size_t Height;
  __int16 BitmapInfo;
  size_t BitsPerComponent;
  _BOOL4 v9;
  unsigned int v10;
  uint64_t v11;
  CGColorSpace *ColorSpace;
  unsigned int v13;
  size_t v14;
  float16x4_t *v15;
  _BYTE *v16;
  CGContext *v17;
  CGImageRef Image;
  CA::Render::Pattern **v20;
  float32x4_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  int32x2_t v27;
  int32x2_t v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned __int32 v32;
  unint64_t v33;
  float16x4_t *v34;
  uint64_t i;
  char *v36;
  unint64_t v37;
  int8x16_t v38;
  float32x4_t v39;
  int8x16_t v40;
  float32x4_t v41;
  int16x4_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  float16x4_t *v50;
  uint64_t k;
  char *v52;
  uint64_t v53;
  int v54;
  int v55;
  int32x2_t v56;
  float16x4_t *v57;
  uint64_t j;
  unsigned int v59;
  int8x8_t v60;
  uint64_t v61;
  float16x4_t *v62;
  size_t v63;
  float16x4_t *n;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  float16x4_t *v79;
  uint64_t m;
  uint64_t v81;
  float16x4_t *v82;
  uint64_t ii;
  _BOOL4 v84;
  float32x4_t v86;
  uint64_t v87;
  CGRect v88;
  CGRect v89;
  CGRect v90;

  v87 = *MEMORY[0x1E0C80C00];
  Width = CGImageGetWidth(a1);
  Height = CGImageGetHeight(a1);
  BitmapInfo = CGImageGetBitmapInfo(a1);
  if ((BitmapInfo & 0x100) != 0)
  {
    v9 = 0;
    v84 = 0;
    v10 = 13;
    v11 = 8;
  }
  else
  {
    BitsPerComponent = CGImageGetBitsPerComponent(a1);
    v84 = BitsPerComponent == 16;
    v9 = BitsPerComponent != 16;
    if (BitsPerComponent == 16)
      v10 = 21;
    else
      v10 = 1;
    if (BitsPerComponent == 16)
      v11 = 8;
    else
      v11 = 4;
  }
  ColorSpace = CGImageGetColorSpace(a1);
  if (CGColorSpaceGetModel(ColorSpace) != kCGColorSpaceModelRGB)
  {
    if ((BitmapInfo & 0x100) != 0)
      v13 = 28;
    else
      v13 = 29;
    ColorSpace = (CGColorSpace *)CAGetColorSpace(v13);
  }
  v14 = (v11 * Width + 31) & 0xFFFFFFFFFFFFFFE0;
  v15 = (float16x4_t *)malloc_type_calloc(v14 * Height, 1uLL, 0xB8E31422uLL);
  v16 = CAGetCachedCGBitmapContext_(v15, Width, Height, v10, v14, ColorSpace);
  if (v16)
    v17 = (CGContext *)*((_QWORD *)v16 + 2);
  else
    v17 = 0;
  if (CGImageIsMask(a1))
  {
    v88.origin.x = 0.0;
    v88.origin.y = 0.0;
    v88.size.width = (double)Width;
    v88.size.height = (double)Height;
    CGContextClipToMask(v17, v88, a1);
    CGContextSetFillColorWithColor(v17, a2);
    v89.origin.x = 0.0;
    v89.origin.y = 0.0;
    v89.size.width = (double)Width;
    v89.size.height = (double)Height;
    CGContextFillRect(v17, v89);
  }
  else
  {
    CGContextSetBlendMode(v17, kCGBlendModeCopy);
    v90.origin.x = 0.0;
    v90.origin.y = 0.0;
    v90.size.width = (double)Width;
    v90.size.height = (double)Height;
    CGContextDrawImage(v17, v90, a1);
    v86 = 0uLL;
    CA::Render::convert_cgcolor_to_float(a2, ColorSpace, (CGColorSpace *)&v86, 0, v20);
    v21 = v86;
    if (v9)
    {
      v22 = (float32x2_t)vdup_n_s32(0x437F0000u);
      v23 = vmla_f32((float32x2_t)0x3F0000003F000000, v22, *(float32x2_t *)v86.f32);
      v24 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v23, v22), (int8x8_t)v22, (int8x8_t)v23);
      v25 = vmla_f32((float32x2_t)0x3F0000003F000000, v22, (float32x2_t)vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v86, (int8x16_t)v86, 8uLL)));
      v26 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v25, v22), (int8x8_t)v22, (int8x8_t)v25);
      v27 = (int32x2_t)vbic_s8((int8x8_t)vshl_u32((uint32x2_t)vcvt_s32_f32(v24), (uint32x2_t)0x800000010), (int8x8_t)vcltz_f32(v24));
      v28 = vcltz_f32(v26);
      if ((v28.i8[4] & 1) != 0)
        v29 = 0;
      else
        v29 = (int)v26.f32[1];
      if ((v28.i8[0] & 1) != 0)
        v30 = 0;
      else
        v30 = (int)v26.f32[0] << 24;
      if ((a3 & 1) != 0)
      {
        if (Height)
        {
          v31 = 0;
          v32 = vorr_s8((int8x8_t)vdup_lane_s32(v27, 1), (int8x8_t)v27).u32[0];
          v33 = (v32 | v29 | v30 | ((unint64_t)(v32 | v29 | v30) << 24)) & 0xFF00FF00FF00FFLL;
          v34 = v15;
          do
          {
            if (Width)
            {
              for (i = 0; i != Width; ++i)
              {
                v36 = (char *)v34 + 4 * i;
                v37 = ((v33 + v33 * v36[3]) >> 8) & 0xFF00FF00FF00FFLL;
                *(_DWORD *)v36 = (v37 >> 24) | v37;
              }
            }
            ++v31;
            v34 = (float16x4_t *)((char *)v34 + v14);
          }
          while (v31 != Height);
        }
      }
      else if (Height)
      {
        v53 = 0;
        v54 = v29 + 1;
        v55 = (v30 >> 8) + 0x10000;
        v56 = (int32x2_t)vsra_n_u32((uint32x2_t)0x100000100, (uint32x2_t)v27, 8uLL);
        v57 = v15;
        do
        {
          if (Width)
          {
            for (j = 0; j != Width; ++j)
            {
              v59 = v57->u32[j];
              v60 = vand_s8((int8x8_t)vmul_s32(v56, (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v59), (uint32x2_t)0xFFFFFFF8FFFFFFF0), (int8x8_t)0xFF000000FFLL)), (int8x8_t)0x1FF0001FF0000);
              v57->i32[j] = (v55 * HIBYTE(v59)) & 0xFF000000 | ((v59 * v54) >> 8) | v60.i32[0] | v60.i32[1];
            }
          }
          ++v53;
          v57 = (float16x4_t *)((char *)v57 + v14);
        }
        while (v53 != Height);
      }
    }
    else if (v84)
    {
      v38 = (int8x16_t)vdupq_n_s32(0x477FFF00u);
      v39.i64[0] = 0x3F0000003F000000;
      v39.i64[1] = 0x3F0000003F000000;
      v40 = (int8x16_t)vmlaq_f32(v39, (float32x4_t)v38, v86);
      v41 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v40, (float32x4_t)v38), v38, v40);
      v42 = vmovn_s32(vclezq_f32(v41));
      if ((v42.i8[0] & 1) != 0)
        v43 = 0;
      else
        v43 = (unint64_t)v41.f32[0];
      if ((v42.i8[2] & 1) != 0)
        v44 = 0;
      else
        v44 = (unint64_t)v41.f32[1];
      if ((v42.i8[4] & 1) != 0)
        v45 = 0;
      else
        v45 = (unint64_t)v41.f32[2];
      v46 = (unint64_t)v41.f32[3];
      if ((v42.i8[6] & 1) != 0)
        v46 = 0;
      if ((a3 & 1) != 0)
      {
        if (Height)
        {
          v47 = 0;
          v48 = v46 << 32;
          v49 = v45 << 16;
          v50 = v15;
          do
          {
            if (Width)
            {
              for (k = 0; k != Width; ++k)
              {
                v52 = (char *)&v50[k];
                *(_QWORD *)v52 = (v48 * (*((unsigned __int16 *)v52 + 3) + 1)) & 0xFFFF000000000000 | (v49 * (*((unsigned __int16 *)v52 + 3) + 1)) & 0xFFFFFFFF00000000 | ((*((unsigned __int16 *)v52 + 3) + 1) * v44) & 0xFFFFFFFFFFFF0000 | (((*((unsigned __int16 *)v52 + 3) + 1) * v43) >> 16);
              }
            }
            ++v47;
            v50 = (float16x4_t *)((char *)v50 + v14);
          }
          while (v47 != Height);
        }
      }
      else if (Height)
      {
        v71 = 0;
        v72 = (v44 << 16) | (v45 << 32) | (v46 << 48) | v43;
        v73 = v72 >> 16;
        v74 = (unsigned __int16)v43;
        v75 = WORD1(v72) + 1;
        v76 = v74 + 1;
        v77 = (v73 & 0xFFFF00000000) + 0x100000000;
        v78 = (v73 & 0xFFFF0000) + 0x10000;
        v79 = v15;
        do
        {
          if (Width)
          {
            for (m = 0; m != Width; ++m)
              v79[m] = (float16x4_t)((v77 * HIWORD(*(_QWORD *)&v79[m])) & 0xFFFF000000000000 | (((unsigned __int16)*(_QWORD *)&v79[m]
                                                                                                 * (unint64_t)v76) >> 16) | (v78 * (unsigned __int16)WORD2(*(_QWORD *)&v79[m])) & 0x1FFFF00000000 | (WORD1(*(_QWORD *)&v79[m]) * (unint64_t)v75) & 0x1FFFF0000);
          }
          ++v71;
          v79 = (float16x4_t *)((char *)v79 + v14);
        }
        while (v71 != Height);
      }
    }
    else if ((BitmapInfo & 0x100) != 0)
    {
      if ((a3 & 1) != 0)
      {
        if (Height)
        {
          v61 = 0;
          v62 = v15;
          do
          {
            v63 = Width;
            for (n = v62; v63; --v63)
            {
              _H1 = n->i16[3];
              __asm { FCVT            S1, H1 }
              *n++ = vcvt_f16_f32(vmulq_n_f32(v21, _S1));
            }
            ++v61;
            v62 = (float16x4_t *)((char *)v62 + v14);
          }
          while (v61 != Height);
        }
      }
      else if (Height)
      {
        v81 = 0;
        v82 = v15;
        do
        {
          if (Width)
          {
            for (ii = 0; ii != Width; ++ii)
              v82[ii] = vcvt_f16_f32(vmulq_f32(v21, vcvtq_f32_f16(v82[ii])));
          }
          ++v81;
          v82 = (float16x4_t *)((char *)v82 + v14);
        }
        while (v81 != Height);
      }
    }
  }
  Image = CGBitmapContextCreateImage(v17);
  CAReleaseCachedCGContext(v17);
  free(v15);
  return Image;
}

void CA_CGContextAddRoundRect(CGContext *a1, int a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat cp1y;
  CGFloat v25;
  CGFloat v26;
  CGFloat cp2y;
  CGFloat x;
  CGFloat v29;
  CGFloat v30;
  CGFloat y;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  CGFloat v36;
  CGFloat v37;
  CGFloat v38;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  CGFloat v42;
  CGFloat v43;
  CGFloat v44;
  CGRect v45;

  if (!CGRectIsNull(*(CGRect *)&a3) && (*(_QWORD *)&a7 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    if (a7 <= 0.0)
    {
      v45.origin.x = a3;
      v45.origin.y = a4;
      v45.size.width = a5;
      v45.size.height = a6;
      CGContextAddRect(a1, v45);
    }
    else
    {
      if (a2)
      {
        v14 = a3 + a5;
        v15 = a4 + a6;
        v44 = a7 * 1.528665;
        CGContextMoveToPoint(a1, a3, a7 * 1.528665 + a4);
        v40 = a7 * 1.08849;
        v33 = a7 * 1.08849 + a4;
        v16 = a7 * 0.868407;
        v32 = a7 * 0.868407 + a4;
        v43 = a7 * 0.0749114;
        v39 = a7 * 0.0749114 + a3;
        y = a7 * 0.631494 + a4;
        CGContextAddCurveToPoint(a1, a3, v33, a3, v32, v39, y);
        v25 = a7 * 0.16906;
        v38 = a7 * 0.16906 + a3;
        v26 = a7 * 0.372824;
        cp2y = a7 * 0.372824 + a4;
        cp1y = a7 * 0.16906 + a4;
        v36 = a7 * 0.631494 + a3;
        v37 = a7 * 0.372824 + a3;
        v17 = a7 * 0.0749114 + a4;
        CGContextAddCurveToPoint(a1, v38, cp2y, v37, cp1y, v36, v17);
        v23 = a7 * 0.868407;
        v35 = a7 * 0.868407 + a3;
        v34 = a7 * 1.08849 + a3;
        v42 = a7 * 1.52866;
        CGContextAddCurveToPoint(a1, v35, a4, v34, a4, a7 * 1.52866 + a3, a4);
        CGContextAddLineToPoint(a1, v14 - a7 * 1.528665, a4);
        v29 = v14 - a7 * 0.868407;
        v30 = v14 - a7 * 1.08849;
        v18 = a7 * 0.631494;
        x = v14 - v18;
        CGContextAddCurveToPoint(a1, v14 - v40, a4, v14 - v16, a4, v14 - v18, v17);
        CGContextAddCurveToPoint(a1, v14 - v26, cp1y, v14 - v25, cp2y, v14 - v43, y);
        CGContextAddCurveToPoint(a1, v14, v32, v14, v33, v14, v42 + a4);
        CGContextAddLineToPoint(a1, v14, v15 - v44);
        v41 = v15 - v40;
        v19 = v15 - v18;
        CGContextAddCurveToPoint(a1, v14, v41, v14, v15 - v23, v14 - v43, v19);
        CGContextAddCurveToPoint(a1, v14 - v25, v15 - v26, v14 - v26, v15 - v25, x, v15 - v43);
        CGContextAddCurveToPoint(a1, v29, v15, v30, v15, v14 - v42, v15);
        CGContextAddLineToPoint(a1, v44 + a3, v15);
        CGContextAddCurveToPoint(a1, v34, v15, v35, v15, v36, v15 - v43);
        CGContextAddCurveToPoint(a1, v37, v15 - v25, v38, v15 - v26, v39, v19);
        CGContextAddCurveToPoint(a1, a3, v15 - v23, a3, v41, a3, v15 - v42);
      }
      else
      {
        v20 = a3 + a7;
        CGContextMoveToPoint(a1, a3 + a7, a4);
        v21 = a3 + a5 - a7;
        CGContextAddArc(a1, v21, a4 + a7, a7, 4.71238898, 0.0, 0);
        v22 = a4 + a6 - a7;
        CGContextAddArc(a1, v21, v22, a7, 0.0, 1.57079633, 0);
        CGContextAddArc(a1, v20, v22, a7, 1.57079633, 3.14159265, 0);
        CGContextAddArc(a1, v20, a4 + a7, a7, 3.14159265, 4.71238898, 0);
      }
      CGContextClosePath(a1);
    }
  }
}

uint64_t CA::OGL::MaskNode::prepare(CA::OGL::MaskNode *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  int v5;

  result = (uint64_t)CA::OGL::ImagingNode::prepare(this);
  v3 = *((_QWORD *)this + 2);
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
  {
    if ((*((_BYTE *)this + 224) & 1) != 0)
    {
      result = *((_QWORD *)this + 29);
      if (!result)
        return result;
    }
    else
    {
      result = CA::OGL::prepare_layer(*((_QWORD *)this + 1), *(_QWORD *)(*(_QWORD *)(v3 + 16) + 128), (const CA::Render::TransitionSubclass *)v3, (uint64_t)this + 56, 0x4000000, (*((_DWORD *)this + 55) >> 22) & 1);
      *((_QWORD *)this + 29) = result;
      *((_BYTE *)this + 224) |= 1u;
      if (!result)
        return result;
    }
    v5 = *(_DWORD *)(*(_QWORD *)(result + 104) + 220);
    if ((v5 & 0x100000) != 0)
    {
      *((_DWORD *)this + 55) |= 0x100000u;
      v5 = *(_DWORD *)(*(_QWORD *)(result + 104) + 220);
    }
    if ((v5 & 0x800000) != 0)
      *((_DWORD *)this + 55) |= 0x800000u;
  }
  else
  {
    v4 = *((_QWORD *)this + 3);
    if (v4)
    {
      if ((*(_BYTE *)(v4 + 222) & 0x10) == 0)
        *(_DWORD *)(v4 + 216) |= 0x800u;
    }
  }
  return result;
}

_DWORD *CA::OGL::ImagingNode::prepare(CA::OGL::ImagingNode *this)
{
  uint64_t v2;
  char v3;
  char v4;
  char *v5;
  _DWORD *result;
  char *v7;
  _DWORD *v8;
  _DWORD *v9;
  int v10;

  v2 = 0;
  v3 = 1;
  do
  {
    v4 = v3;
    v5 = (char *)this + 8 * v2;
    v8 = (_DWORD *)*((_QWORD *)v5 + 3);
    v7 = v5 + 24;
    result = v8;
    if (v8)
    {
      if ((*((_BYTE *)this + 222) & 0x40) != 0)
      {
        result[55] |= 0x400000u;
        result = *(_DWORD **)v7;
      }
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 88))(result);
      v9 = *(_DWORD **)v7;
      v10 = *(_DWORD *)(*(_QWORD *)v7 + 220);
      if ((v10 & 0x300000) != 0)
      {
        *((_DWORD *)this + 55) |= 0x100000u;
        v10 = v9[55];
      }
      if ((v10 & 0x800000) != 0)
        *((_DWORD *)this + 55) |= 0x800000u;
    }
    v3 = 0;
    v2 = 1;
  }
  while ((v4 & 1) != 0);
  return result;
}

BOOL CA::ColorMatrix::is_diagonal(CA::ColorMatrix *this)
{
  return *((float *)this + 1) == 0.0
      && *((float *)this + 2) == 0.0
      && *((float *)this + 3) == 0.0
      && *((float *)this + 4) == 0.0
      && *((float *)this + 5) == 0.0
      && *((float *)this + 7) == 0.0
      && *((float *)this + 8) == 0.0
      && *((float *)this + 9) == 0.0
      && *((float *)this + 10) == 0.0
      && *((float *)this + 11) == 0.0
      && *((float *)this + 13) == 0.0
      && *((float *)this + 14) == 0.0
      && *((float *)this + 15) == 0.0
      && *((float *)this + 16) == 0.0
      && *((float *)this + 17) == 0.0
      && *((float *)this + 19) == 0.0;
}

uint64_t animation_property_flags(__CFString *a1, CALayer *a2)
{
  uint64_t AtomInKeyPath;
  int v5;
  unsigned int v6;
  objc_class *Class;
  uint64_t v8;
  uint64_t v9;

  AtomInKeyPath = CAInternFirstAtomInKeyPath(a1);
  if (!(_DWORD)AtomInKeyPath)
    return 0;
  v5 = AtomInKeyPath;
  if (-[CALayer _renderLayerDefinesProperty:](a2, "_renderLayerDefinesProperty:", AtomInKeyPath))
    v6 = 1;
  else
    v6 = 2;
  Class = object_getClass(a2);
  if (CAObject_needsLayoutForKey(Class, v5))
    v6 |= 4u;
  if (CAObject_needsDisplayForKey(Class, v5))
    v8 = v6 | 8;
  else
    v8 = v6;
  if (v5 == 536)
  {
    -[__CFString rangeOfString:](a1, "rangeOfString:", CFSTR("."));
    if (v9)
      return v8;
    else
      return v8 | 0x10;
  }
  return v8;
}

uint64_t CAObject_needsDisplayForKey(objc_class *a1, int a2)
{
  uint64_t result;

  result = classDescription(a1);
  if (result)
    return *(_WORD *)(result + 30)
        && CAAtomIndexInArray(*(unsigned __int16 *)(result + 30), *(_QWORD *)(result + 40), a2) != -1;
  return result;
}

uint64_t CAInternFirstAtomInKeyPath(const __CFString *a1)
{
  CFRange v2;
  const __CFString *v3;
  const __CFString *v4;
  uint64_t v5;
  CFRange v7;

  if (!a1)
    return 0;
  v2 = CFStringFind(a1, CFSTR("."), 0);
  if (v2.length >= 1)
  {
    v7.length = v2.location;
    v7.location = 0;
    v3 = CFStringCreateWithSubstring(0, a1, v7);
    if (v3)
    {
      v4 = v3;
      v5 = CAInternAtom(v3, 0);
      CFRelease(v4);
      return v5;
    }
    return 0;
  }
  return CAInternAtom(a1, 0);
}

uint64_t CAObject_needsLayoutForKey(objc_class *a1, int a2)
{
  uint64_t result;

  result = classDescription(a1);
  if (result)
    return *(_WORD *)(result + 28)
        && CAAtomIndexInArray(*(unsigned __int16 *)(result + 28), *(_QWORD *)(result + 32), a2) != -1;
  return result;
}

void sub_1844F8668(_Unwind_Exception *exception_object)
{
  unsigned int *v1;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (v1)
  {
    v3 = v1 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 16))(v1);
  }
  _Unwind_Resume(exception_object);
}

void CA::Layer::add_animation(unsigned __int16 **this, CAAnimation *a2, __CFString *a3)
{
  _DWORD *v6;
  int v7;
  unsigned __int16 *v8;
  uint64_t v9;
  char v10;
  uint64_t *v11;
  malloc_zone_t *malloc_zone;
  CFTypeRef v13;
  unsigned int v14;
  unsigned int v15;
  __int16 v16;
  __int16 v17;
  unsigned int v18;
  int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  objc_object *v24;
  unsigned __int16 v25;
  _QWORD *v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  double *v30;
  uint64_t *v31;
  uint64_t *v32;
  double *v33;
  double v34;
  double v35;
  int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned __int16 *v44;

  v6 = *(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 576);
  if (!v6)
    v6 = CA::Transaction::create((CA::Transaction *)this);
  a2->_flags |= 1u;
  v7 = v6[25];
  v6[25] = v7 + 1;
  if (!v7)
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
  v44 = this[35];
  v8 = v44;
  v9 = -[__CFString hash](a3, "hash");
  v10 = 0;
  if (v44)
  {
    v11 = (uint64_t *)&v44;
    do
    {
      if (*((_QWORD *)v8 + 3) == v9 && objc_msgSend(*((id *)v8 + 2), "isEqualToString:", a3))
      {
        if ((v8[28] & 0x3002) == 0 && !*((_QWORD *)v8 + 6))
        {
          *v11 = *(_QWORD *)v8;
          schedule_stop_callback((uint64_t)v8, (uint64_t *)&animation_state);
          free_non_deferred_animation(v8, 0);
          v10 = 1;
          goto LABEL_14;
        }
        v8[28] |= 0x20u;
        v10 = 1;
      }
      v11 = (uint64_t *)v8;
      v8 = *(unsigned __int16 **)v8;
    }
    while (v8);
  }
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v8 = (unsigned __int16 *)malloc_type_zone_malloc(malloc_zone, 0x40uLL, 0x8BB15036uLL);
LABEL_14:
  *((_QWORD *)v8 + 1) = CFRetain(a2);
  if (a3)
    v13 = CFRetain(a3);
  else
    v13 = 0;
  *((_QWORD *)v8 + 2) = v13;
  *((_QWORD *)v8 + 3) = v9;
  *((_QWORD *)v8 + 4) = 0;
  do
  {
    v14 = __ldaxr((unsigned int *)&CA::Layer::add_animation(CAAnimation *,__CFString const*)::counter);
    v15 = v14 + 1;
  }
  while (__stlxr(v15, (unsigned int *)&CA::Layer::add_animation(CAAnimation *,__CFString const*)::counter));
  *((_DWORD *)v8 + 10) = v15;
  v16 = -[CAAnimation isRemovedOnCompletion](a2, "isRemovedOnCompletion");
  if ((v10 & 1) != 0)
    v17 = 64;
  else
    v17 = 0;
  v8[28] = v17 | v16 | v8[28] & 0xFF80;
  *((_DWORD *)v8 + 15) = -892679478;
  v18 = objc_msgSend(*((id *)v8 + 1), "_propertyFlagsForLayer:", this[2]);
  v19 = ((_WORD)v18 << 7) & 0xC00 | ((v18 & 1) << 8) & 0xFD7F | v8[28] & 0xF07F | (((v18 >> 2) & 1) << 9) | (((v18 >> 1) & 1) << 7);
  v8[28] = ((_WORD)v18 << 7) & 0xC00 | ((v18 & 1) << 8) & 0xFD7F | v8[28] & 0xF07F | (((v18 >> 2) & 1) << 9) | (((v18 >> 1) & 1) << 7);
  if (((v18 << 6) & 0x80) != 0 && (((_WORD)v18 << 7) & 0x200) != 0)
  {
    v20 = (unsigned int *)this + 1;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 | 0x1000000, v20));
    v19 = v8[28];
  }
  if ((~v19 & 0x480) == 0)
  {
    v22 = (unsigned int *)this + 1;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 | 0x800000, v22));
  }
  v24 = -[CAAnimation delegate](a2, "delegate");
  if (v24)
    v25 = v8[28] & 0xCFFF | (lookup_delegate_methods((CA::Transaction *)v6, v24) >> 6 << 12);
  else
    v25 = v8[28] & 0xCFFF;
  v8[28] = v25;
  v26 = v6 + 22;
  v27 = v6 + 22;
  while (1)
  {
    v27 = *(unsigned int **)v27;
    if (!v27)
      break;
    if (*((_QWORD *)v27 + 1))
    {
      while (1)
      {
        v26 = (_QWORD *)*v26;
        if (!v26)
          break;
        v27 = (unsigned int *)v26[1];
        if (v27)
          goto LABEL_40;
      }
      v27 = 0;
      do
LABEL_40:
        v28 = __ldaxr(v27);
      while (__stlxr(v28 + 1, v27));
      break;
    }
  }
  *((_QWORD *)v8 + 6) = v27;
  v29 = (uint64_t)v44;
  if (!v44)
  {
    v44 = v8;
    *(_QWORD *)v8 = 0;
    goto LABEL_71;
  }
  v30 = (double *)CAMediaTimingCopyRenderTiming((unint64_t)a2);
  v31 = (uint64_t *)&v44;
  while (1)
  {
    v32 = (uint64_t *)v29;
    v33 = (double *)CAMediaTimingCopyRenderTiming(*(_QWORD *)(v29 + 8));
    v34 = 0.0;
    v35 = 0.0;
    if (v30)
      v35 = v30[5];
    if (v33)
      v34 = v33[5];
    if (v35 >= v34)
    {
      if (v35 <= v34)
      {
        if (*((_DWORD *)v8 + 10) >= *(_DWORD *)(v29 + 40))
          v36 = 0;
        else
          v36 = 5;
        if (!v33)
          goto LABEL_61;
      }
      else
      {
        v36 = 7;
        if (!v33)
          goto LABEL_61;
      }
    }
    else
    {
      v36 = 5;
      if (!v33)
        goto LABEL_61;
    }
    v37 = (unsigned int *)(v33 + 1);
    do
    {
      v38 = __ldaxr(v37);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, v37));
    if (!v39)
      (*(void (**)(double *))(*(_QWORD *)v33 + 16))(v33);
LABEL_61:
    if (v36 == 5)
      break;
    v29 = *v32;
    v31 = v32;
    if (!*v32)
    {
      v40 = 0;
      goto LABEL_66;
    }
  }
  v40 = *v31;
  v32 = v31;
LABEL_66:
  *(_QWORD *)v8 = v40;
  *v32 = (uint64_t)v8;
  if (v30)
  {
    v41 = (unsigned int *)(v30 + 1);
    do
    {
      v42 = __ldaxr(v41);
      v43 = v42 - 1;
    }
    while (__stlxr(v43, v41));
    if (!v43)
      (*(void (**)(double *))(*(_QWORD *)v30 + 16))(v30);
  }
LABEL_71:
  CA::Layer::set_animations((CA::Layer *)this, (uint64_t)v44);
  CA::Layer::mark_animations((CA::Layer *)this, (CA::Transaction *)v6, 1);
  CA::Transaction::unlock((CA::Transaction *)v6);
}

void sub_1844F8B94(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

void CA::Layer::set_animations(CA::Layer *value, uint64_t a2)
{
  uint64_t v4;

  if ((*((_BYTE *)value + 54) & 0x10) == 0)
  {
    v4 = *((_QWORD *)value + 35);
    if (!a2 || v4)
    {
      if (!a2 && v4 && non_visible_animating_layers)
        CFSetRemoveValue((CFMutableSetRef)non_visible_animating_layers, value);
    }
    else
    {
      add_non_visible_animating_layer(value);
    }
  }
  *((_QWORD *)value + 35) = a2;
}

void CA::Layer::collect_non_visible_callback(CA::Layer *this, uint64_t **a2, void *a3)
{
  _WORD *v5;
  _QWORD *v6;
  __int16 v7;
  _WORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  _WORD *v24;

  v5 = (_WORD *)*((_QWORD *)this + 35);
  v24 = v5;
  if (v5)
  {
    v6 = &v24;
    do
    {
      schedule_stop_callback((uint64_t)v5, (uint64_t *)&animation_state);
      v7 = v5[28];
      if ((v7 & 0x41) == 1)
      {
        *v6 = *(_QWORD *)v5;
        free_non_deferred_animation(v5, 1);
      }
      else
      {
        v5[28] = v7 & 0xFFFB | (4 * ((v7 & 5) != 0));
        v6 = v5;
      }
      v5 = (_WORD *)*v6;
    }
    while (*v6);
    v8 = v24;
    *((_QWORD *)this + 35) = v24;
    if (v8)
      return;
  }
  else
  {
    *((_QWORD *)this + 35) = 0;
  }
  v10 = *a2;
  v9 = a2[1];
  v11 = v9 - *a2;
  v12 = (unint64_t)a2[3];
  if (v12 < v11 + 1)
  {
    v13 = a2[2];
    v14 = (v12 + 1) | ((v12 + 1) >> 1) | (((v12 + 1) | ((v12 + 1) >> 1)) >> 2);
    v15 = v14 | (v14 >> 4) | ((v14 | (v14 >> 4)) >> 8);
    v16 = v15 | (v15 >> 16) | ((v15 | (v15 >> 16)) >> 32);
    if (v16 + 1 > v11 + 1)
      v17 = v16 + 1;
    else
      v17 = v11 + 1;
    v18 = (uint64_t *)malloc_type_malloc(8 * v17, 0x2004093837F09uLL);
    v19 = v18;
    v20 = *a2;
    v21 = a2[1];
    if (*a2 != v21)
    {
      v22 = v18;
      do
      {
        v23 = *v20++;
        *v22++ = v23;
      }
      while (v20 != v21);
    }
    if (v10 != v13)
      free(*a2);
    v9 = &v19[v11];
    *a2 = v19;
    a2[1] = v9;
    a2[3] = (uint64_t *)v17;
  }
  *v9 = (uint64_t)this;
  ++a2[1];
}

void schedule_stop_callback(uint64_t a1, uint64_t *a2)
{
  CA::Transaction::Continuation *v4;
  uint64_t v5;
  uint64_t v6;
  malloc_zone_t *malloc_zone;
  _QWORD *v8;

  if ((*(_WORD *)(a1 + 56) & 0x1000) != 0)
    schedule_start_callback((_QWORD *)a1, (uint64_t)a2);
  v4 = *(CA::Transaction::Continuation **)(a1 + 48);
  if (v4)
  {
    CA::Transaction::Continuation::unref(v4);
    *(_QWORD *)(a1 + 48) = 0;
  }
  if ((*(_WORD *)(a1 + 56) & 0x2000) != 0)
  {
    v5 = *a2;
    v6 = *(_QWORD *)(a1 + 8);
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v8 = malloc_type_zone_malloc(malloc_zone, 0x10uLL, 0x8BB15036uLL);
    *v8 = v6;
    v8[1] = v5;
    *a2 = (uint64_t)v8;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    *(_WORD *)(a1 + 56) &= ~0x2000u;
  }
}

void CA::Layer::mark_animations(CA::Layer *this, CA::Transaction *a2, int a3)
{
  BOOL v4;
  int v5;
  int v6;

  v4 = a3 == 0;
  if (a3)
    v5 = 2099210;
  else
    v5 = 2099208;
  if (v4)
    v6 = 2064;
  else
    v6 = 2068;
  CA::Layer::mark(this, a2, v5, v6);
  if (!**((_DWORD **)a2 + 13))
    CA::Transaction::ensure_implicit(a2, 1);
}

BOOL key_path_affects_container(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  unsigned int v3;
  int v4;

  if (!a1)
    return 0;
  if ((a1 & 1) != 0)
  {
    v1 = a1 >> 1;
  }
  else
  {
    if (!*(_DWORD *)a1)
      return 0;
    LODWORD(v1) = *(_DWORD *)(a1 + 4);
  }
  v2 = 1;
  if ((int)v1 > 556)
  {
    if ((_DWORD)v1 == 604)
      return v2;
    if ((_DWORD)v1 == 557)
    {
      if ((a1 & 1) == 0)
      {
        v3 = *(_DWORD *)a1;
        if (*(_DWORD *)a1 >= 2u)
        {
          v4 = *(_DWORD *)(a1 + 8);
          switch(v4)
          {
            case 470:
              if (v3 >= 3)
                return *(_DWORD *)(a1 + 12) != 602;
              break;
            case 475:
              return 0;
            case 561:
              if (v3 >= 3)
                return *(_DWORD *)(a1 + 12) == 602;
              return 0;
          }
        }
      }
      return 1;
    }
    return 0;
  }
  if ((_DWORD)v1 != 26 && (_DWORD)v1 != 111)
    return 0;
  return v2;
}

uint64_t CABackingStoreRetainFrontTexture(uint64_t a1, CGColorSpace *a2)
{
  pthread_mutex_t *v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v11;

  v4 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  CABackingStoreGetFrontTexture((CABackingStore *)a1, a2, v5);
  v7 = v6;
  if (v6)
  {
    v8 = (unsigned int *)(v6 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    if (!v9)
    {
      v7 = 0;
      do
        v11 = __ldaxr(v8);
      while (__stlxr(v11 - 1, v8));
    }
  }
  pthread_mutex_unlock(v4);
  return v7;
}

float CABackingStoreGetFrontTexture(CABackingStore *a1, CGColorSpace *a2, float result)
{
  __int16 v3;
  uint64_t v5;
  uint64_t v7;
  CA::Render::Shmem *v8;
  CA::Render::Pattern **v9;
  CA::Render::Texture *v10;
  uint64_t v11;
  uint64_t v12;
  malloc_zone_t *malloc_zone;
  CA::Render::Surface *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  CGColor *v21;
  unint64_t v22;
  const CA::Bounds *v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int32x2_t *v32;
  __int32 v33;
  int32x2_t v34;
  __int32 v35;
  int v36;
  int32x2_t *v37;
  const CA::Bounds *v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  _DWORD *v43;
  const CA::Bounds *v44;
  CA::Shape *v45;
  uint64_t v46;
  int v47;
  malloc_zone_t *v48;
  _DWORD *v49;
  int v50;
  int *v51;
  _DWORD *v52;
  int v53;
  int32x2_t *v54;
  __int32 v55;
  int32x2_t v56;
  __int32 v57;
  int v58;
  int32x2_t *v59;
  char *v60;
  __int128 v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v3 = *((_WORD *)a1 + 246);
  if ((v3 & 0x100) == 0)
  {
    v5 = *((_QWORD *)a1 + 53);
    if (v5)
    {
LABEL_62:
      v46 = *((_QWORD *)a1 + 50);
      if (v46)
      {
        result = *(float *)(v46 + 60);
        *(float *)(v5 + 56) = result;
      }
      return result;
    }
    v7 = *((_QWORD *)a1 + 50);
    v8 = *(CA::Render::Shmem **)(v7 + 16);
    if (v8)
    {
      v10 = CA::Render::Shmem::copy_image(v8, *(CGColorSpace **)(v7 + 8));
    }
    else
    {
      v11 = *(_QWORD *)(v7 + 24);
      if (!v11)
        goto LABEL_61;
      if ((v3 & 0x800) != 0)
      {
        v12 = *(_QWORD *)(v11 + 72);
        if (v12)
        {
          CA::CG::Queue::flush(v12, 3, 1);
          v3 = *((_WORD *)a1 + 246);
        }
        *((_WORD *)a1 + 246) = v3 & 0xF7FF;
      }
      os_unfair_lock_lock((os_unfair_lock_t)(v11 + 12));
      if (*(_BYTE *)(v11 + 68))
      {
        v10 = 0;
      }
      else
      {
        CA::CG::IOSurfaceDrawable::ensure_shared_surface((_QWORD *)v11);
        malloc_zone = (malloc_zone_t *)get_malloc_zone();
        v14 = (CA::Render::Surface *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x158uLL, 0x743898A5uLL);
        v10 = v14;
        if (v14)
          CA::Render::Surface::Surface(v14, *(CA::Render::Surface **)(v11 + 104), 0x8000);
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 12));
    }
    *((_QWORD *)a1 + 53) = v10;
    if (!v10)
      return result;
    *((_DWORD *)v10 + 3) |= 0x100000u;
    v15 = *((_QWORD *)a1 + 53);
    v16 = *(unsigned int *)(v15 + 16);
    v17 = *((_QWORD *)a1 + 16);
    if (v17 != v16 || *((_QWORD *)a1 + 17) != *(_DWORD *)(v15 + 20))
    {
      if (*(_BYTE *)(v7 + 64))
      {
        v18 = *((_QWORD *)a1 + 17);
        v19 = *((_DWORD *)a1 + 38) - v18;
        v20 = *(_DWORD *)(v15 + 20);
      }
      else
      {
        v20 = *(_DWORD *)(v15 + 20);
        v19 = v20 - *((_DWORD *)a1 + 38);
        v18 = *((_QWORD *)a1 + 17);
      }
      *(_WORD *)(v15 + 24) = 0;
      *(_WORD *)(v15 + 26) = v19;
      *(_WORD *)(v15 + 28) = v16 - v17;
      *(_WORD *)(v15 + 30) = v20 - v19 - v18;
      *(_DWORD *)(v15 + 12) |= 0x4000u;
    }
    v21 = *(CGColor **)(v7 + 32);
    if (v21)
    {
      v61 = 0uLL;
      CA::Render::convert_cgcolor_to_float(v21, a2, (CGColorSpace *)&v61, 0, v9);
      result = *(float *)&v61;
      *(_OWORD *)(*((_QWORD *)a1 + 53) + 60) = v61;
    }
    if (!*((_QWORD *)a1 + 58))
    {
LABEL_61:
      v5 = *((_QWORD *)a1 + 53);
      if (!v5)
        return result;
      goto LABEL_62;
    }
    v22 = CA::Shape::new_shape();
    if (!CA::Shape::is_valid((CA::Shape *)v22))
    {
      v60 = CA::Shape::dump((CA::Shape *)v22);
      x_log_crash("Shape: %s", v60);
      abort();
    }
    v24 = *((_QWORD *)a1 + 53);
    v25 = *(__int16 *)(v24 + 24);
    v26 = *(__int16 *)(v24 + 26);
    v27 = v26 | v25;
    if ((v22 & 1) != 0)
    {
      if (!v27 || v22 == 1)
        goto LABEL_60;
      if (!(v26 | v25))
        goto LABEL_57;
    }
    else
    {
      if (!v27)
        goto LABEL_60;
      v28 = *(_DWORD *)(v22 + 4);
      if (v28 == 6)
        goto LABEL_60;
      if (v28 == 12)
      {
        v29 = *(_DWORD *)(v22 + 32) - *(_DWORD *)(v22 + 28);
        v30 = *(_DWORD *)(v22 + 36) - *(_DWORD *)(v22 + 20);
        if (v29 >= 0x3FFFFFFF && v30 > 0x3FFFFFFE)
          goto LABEL_60;
        if (v30 <= 0x3FFFFFFE)
          v31 = v26;
        else
          v31 = 0;
        if (v29 > 0x3FFFFFFE)
          v25 = 0;
        else
          v26 = v31;
      }
      if (*(_DWORD *)v22 == 1)
      {
        v32 = (int32x2_t *)(v22 + 20);
        v33 = *(_DWORD *)(v22 + 20);
        if (v33 != 0x7FFFFFFF)
        {
          v34 = vdup_n_s32(v25);
          do
          {
            v32->i32[0] = v33 + v26;
            v35 = v32->i32[1];
            if ((v35 - 2) >= 2)
            {
              v36 = (v35 - 2) >> 1;
              v37 = v32 + 1;
              do
              {
                *v37 = vadd_s32(*v37, v34);
                ++v37;
                --v36;
              }
              while (v36);
              v35 = v32->i32[1];
            }
            v32 = (int32x2_t *)((char *)v32 + 4 * v35);
            v33 = v32->i32[0];
          }
          while (v32->i32[0] != 0x7FFFFFFF);
        }
        goto LABEL_60;
      }
      if (!(v26 | v25))
        goto LABEL_57;
      if ((v22 & 1) == 0)
      {
        v40 = *(unsigned int *)(v22 + 4);
        if ((_DWORD)v40 == 12)
        {
          v41 = *(_DWORD *)(v22 + 32) - *(_DWORD *)(v22 + 28);
          v42 = *(_DWORD *)(v22 + 36) - *(_DWORD *)(v22 + 20);
          if (v41 >= 0x3FFFFFFF && v42 >= 0x3FFFFFFF)
          {
LABEL_57:
            v39 = CA::Shape::ref(v22, v23);
            goto LABEL_58;
          }
          if (v42 <= 0x3FFFFFFE)
            v47 = v26;
          else
            v47 = 0;
          if (v41 <= 0x3FFFFFFE)
            v26 = v47;
          else
            v25 = 0;
        }
        else if ((v40 & 0x80000000) != 0)
        {
          v43 = 0;
          goto LABEL_59;
        }
        v48 = (malloc_zone_t *)get_malloc_zone();
        v49 = malloc_type_zone_malloc(v48, 4 * v40, 0x8BB15036uLL);
        v43 = v49;
        if (v49)
        {
          if ((_DWORD)v40)
          {
            v50 = v40;
            v51 = (int *)v22;
            v52 = v49;
            do
            {
              v53 = *v51++;
              *v52++ = v53;
              --v50;
            }
            while (v50);
          }
          *v49 = 1;
          v49[2] = v40;
          v54 = (int32x2_t *)(v49 + 5);
          v55 = v49[5];
          if (v55 != 0x7FFFFFFF)
          {
            v56 = vdup_n_s32(v25);
            do
            {
              v54->i32[0] = v55 + v26;
              v57 = v54->i32[1];
              if ((v57 - 2) >= 2)
              {
                v58 = (v57 - 2) >> 1;
                v59 = v54 + 1;
                do
                {
                  *v59 = vadd_s32(*v59, v56);
                  ++v59;
                  --v58;
                }
                while (v58);
                v57 = v54->i32[1];
              }
              v54 = (int32x2_t *)((char *)v54 + 4 * v57);
              v55 = v54->i32[0];
            }
            while (v54->i32[0] != 0x7FFFFFFF);
          }
        }
        goto LABEL_59;
      }
    }
    v61 = 0uLL;
    CA::Shape::get_bounds(v22, (int *)&v61);
    LODWORD(v61) = v61 + v25;
    DWORD1(v61) += v26;
    v39 = CA::Shape::new_shape((CA::Shape *)&v61, v38);
LABEL_58:
    v43 = (_DWORD *)v39;
LABEL_59:
    CA::Shape::unref((CA::Shape *)v22);
    v22 = (unint64_t)v43;
LABEL_60:
    v61 = 0uLL;
    CA::Shape::get_bounds(v22, (int *)&v61);
    v45 = (CA::Shape *)CA::Shape::new_shape((CA::Shape *)&v61, v44);
    CA::Render::Texture::set_dirty_shape(*((CA::Render::Texture **)a1 + 53), v45);
    CA::Shape::unref(v45);
    CA::Shape::unref((CA::Shape *)v22);
    CGSReleaseRegion();
    *((_QWORD *)a1 + 58) = 0;
    goto LABEL_61;
  }
  return result;
}

CA::Render::Object *CA::Render::BasicAnimation0::set_from(CA::Render::BasicAnimation0 *this, CA::Render::Object *a2)
{
  CA::Render::Object *result;
  CA::Render::Object *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  result = (CA::Render::Object *)*((_QWORD *)this + 14);
  if (result != a2)
  {
    v4 = a2;
    if (result)
    {
      v5 = (unsigned int *)((char *)result + 8);
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
        result = (CA::Render::Object *)(*(uint64_t (**)(CA::Render::Object *))(*(_QWORD *)result + 16))(result);
    }
    if (v4)
    {
      v8 = (unsigned int *)((char *)v4 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      if (!v9)
      {
        v4 = 0;
        do
          v10 = __ldaxr(v8);
        while (__stlxr(v10 - 1, v8));
      }
    }
    *((_QWORD *)this + 14) = v4;
  }
  return result;
}

uint64_t CA::Layer::State::State(uint64_t a1, uint64_t a2, CA::Transaction *a3)
{
  __int128 v6;
  uint64_t v7;
  id *v8;
  id WeakRetained;
  void *v10;
  CFTypeRef v11;
  CA::AttrList *v12;
  int v13;
  uint64_t v14;
  uint64_t i;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 32) = 0;
  v6 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 88) = 0;
  v7 = a1 + 88;
  *(_OWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v8 = (id *)(a2 + 88);
  *(_BYTE *)(v7 + 8) = 0;
  if (*(_BYTE *)(a2 + 96))
  {
    WeakRetained = objc_loadWeakRetained(v8);
    if (WeakRetained)
    {
      v10 = WeakRetained;
      X::WeakDetails::Ptr::set((id *)v7, WeakRetained, 1);

    }
  }
  else
  {
    X::WeakDetails::Ptr::set((id *)v7, *v8, 0);
  }
  v11 = *(CFTypeRef *)(a2 + 104);
  if (v11)
    v11 = CFRetain(v11);
  *(_QWORD *)(a1 + 104) = v11;
  v12 = *(CA::AttrList **)(a2 + 32);
  if (v12)
  {
    v13 = *((_DWORD *)a3 + 25);
    *((_DWORD *)a3 + 25) = v13 + 1;
    if (v13
      || (os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock),
          (v12 = *(CA::AttrList **)(a2 + 32)) != 0))
    {
      v14 = *((_QWORD *)v12 + 1) & 7;
      if ((_DWORD)v14 == 7)
        v12 = (CA::AttrList *)CA::AttrList::copy_(v12);
      else
        *((_QWORD *)v12 + 1) = *((_QWORD *)v12 + 1) & 0xFFFFFFFFFFFFFFF8 | (v14 + 1);
    }
    *(_QWORD *)(a1 + 32) = v12;
    CA::Transaction::unlock(a3);
  }
  for (i = 4; i != 28; i += 4)
    *(_DWORD *)(a1 + i) = *(_DWORD *)(a2 + i);
  return a1;
}

void sub_1844F9BB8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  id *v2;

  if (*v2)
  {
    if (*(_BYTE *)(v1 + 96))
      objc_storeWeakOrNil(v2, 0);
    else
      *v2 = 0;
  }
  _Unwind_Resume(exception_object);
}

void CA::Layer::set_delegate(CA::Layer *this, objc_object *a2, int a3)
{
  CA::Transaction *v6;
  int v7;
  objc_object **v8;
  char *v9;
  char *v10;
  objc_object *v11[2];

  v11[1] = *(objc_object **)MEMORY[0x1E0C80C00];
  v6 = CA::Transaction::ensure_compat(this);
  v7 = *((_DWORD *)v6 + 25);
  *((_DWORD *)v6 + 25) = v7 + 1;
  if (!v7)
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
  if (X::Weak<objc_object *>::operator==((uint64_t)this + 128, a2))
  {
    v9 = (char *)this + 40;
  }
  else
  {
    v11[0] = 0;
    CA::Layer::begin_change(this, v6, CFSTR("delegate"), (objc_object *)v11, v8);
    v9 = CA::Layer::writable_state(this, v6);
    CA::Layer::State::set_delegate((CA::Layer::State *)v9, v6, a2, a3);
    CA::Layer::end_change((id *)this, v6, 163, (objc_object *)CFSTR("delegate"), v11[0]);
  }
  if ((v9[18] & 0x10) == 0)
  {
    v10 = CA::Layer::writable_state(this, v6);
    *((_DWORD *)v10 + 4) |= 0x100000u;
  }
  CA::Transaction::unlock(v6);
}

void sub_1844F9D08(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t CA::Layer::State::set_delegate(CA::Layer::State *this, CA::Transaction *a2, objc_object *a3, int a4)
{
  id *v8;
  uint64_t result;
  int v10;

  v8 = (id *)((char *)this + 88);
  result = X::Weak<objc_object *>::operator==((uint64_t)this + 88, a3);
  if ((result & 1) == 0)
  {
    result = (uint64_t)X::WeakDetails::Ptr::set(v8, a3, a4);
    if (a3)
    {
      result = lookup_delegate_methods(a2, a3);
      if ((result & 0x20) != 0)
        v10 = *((_DWORD *)this + 4) & 0xFFFE0FFF | ((result & 0x1F) << 12) | 0x20000;
      else
        v10 = *((_DWORD *)this + 4) & 0xFFFC0FFF | ((result & 0x1F) << 12) & 0xFFFDFFFF;
    }
    else
    {
      v10 = *((_DWORD *)this + 4) & 0xFFFC0FFF;
    }
    *((_DWORD *)this + 4) = v10;
  }
  return result;
}

id *X::WeakDetails::Ptr::set(id *location, id obj, int a3)
{
  id *v3;

  v3 = location;
  if (obj)
  {
    if (*((_BYTE *)location + 8))
    {
      if (!a3)
        goto LABEL_11;
    }
    else
    {
      *location = 0;
      if (!a3)
      {
LABEL_11:
        if (*v3)
        {
          if (*((_BYTE *)v3 + 8))
            location = (id *)objc_storeWeakOrNil(v3, 0);
        }
        *((_BYTE *)v3 + 8) = 0;
        *v3 = obj;
        return location;
      }
    }
    location = (id *)objc_storeWeakOrNil(location, obj);
    if (location)
    {
      *((_BYTE *)v3 + 8) = 1;
      return location;
    }
    goto LABEL_11;
  }
  if (*location)
  {
    if (*((_BYTE *)location + 8))
      return (id *)objc_storeWeakOrNil(location, 0);
    else
      *location = 0;
  }
  return location;
}

BOOL X::Weak<objc_object *>::operator==(uint64_t a1, id a2)
{
  id WeakRetained;
  _BOOL8 v4;

  if (*(_BYTE *)(a1 + 8))
    WeakRetained = objc_loadWeakRetained((id *)a1);
  else
    WeakRetained = *(id *)a1;
  v4 = WeakRetained == a2;

  return v4;
}

char *CA::Layer::class_state(CA::Layer *this, objc_class *a2)
{
  uint64_t v3;
  char *v4;
  malloc_zone_t *malloc_zone;
  char *v6;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v10;
  int *v11;
  char *v12;
  uint64_t v13;
  CA::Transaction *v14;
  CA::Transaction *v15;
  CA::Layer *v16;
  int v17;
  uint64_t i;
  char *v19;
  const char *v20;
  SEL v21;
  uint64_t v22;
  const char *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  CA::Transaction *v28;
  unint64_t *v29;
  CA::Transaction *v31;
  const void *v32;
  CA::AttrList *v33;
  int v34;
  id *v35;
  malloc_zone_t *v36;
  unint64_t StatusReg;
  _QWORD v39[2];

  v39[1] = *MEMORY[0x1E0C80C00];
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
    v3 = classDescription(this);
    if (v3)
    {
      v4 = *(char **)(v3 + 128);
      if (v4)
        return v4;
    }
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v6 = (char *)malloc_type_zone_malloc(malloc_zone, 0x70uLL, 0x8BB15036uLL);
    v4 = v6;
    if (v6)
    {
      v7 = 0;
      v8 = 0;
      v9 = 0;
      *((_QWORD *)v6 + 13) = 0;
      *((_QWORD *)v6 + 1) = 0;
      *((_QWORD *)v6 + 2) = 0;
      *(_QWORD *)v6 = 0;
      *((_DWORD *)v6 + 6) = 0;
      *((_OWORD *)v6 + 2) = 0u;
      *((_OWORD *)v6 + 3) = 0u;
      *((_OWORD *)v6 + 4) = 0u;
      *((_OWORD *)v6 + 5) = 0u;
      v6[96] = 0;
    }
    else
    {
      v9 = MEMORY[0x10];
      v8 = MEMORY[4];
      v7 = MEMORY[8];
    }
    *((_DWORD *)v6 + 4) = v9 | 0x80;
    *((_DWORD *)v6 + 1) = v8 & 0x3C000000 | 0x7FC8;
    if (LINKED_DEFAULT_CONTINUOUS_CORNERS)
    {
      v7 = v7 & 0xFFFFFFF9 | 2;
      *((_DWORD *)v6 + 2) = v7;
    }
    v10 = 0;
    *((_DWORD *)v6 + 2) = v7 & 0xFFFFFFE7;
    v11 = &BOOL_bits;
    do
    {
      if (((0x37EF7BDFE757uLL >> v10) & 1) == 0)
      {
        v12 = &v6[4 * (*v11 >> 5)];
        *((_DWORD *)v12 + 1) |= 1 << *v11;
      }
      ++v10;
      v11 += 8;
    }
    while (v10 != 46);
    v13 = classDescription(this);
    if (v13 && *(_BYTE *)(v13 + 138))
      *((_DWORD *)v4 + 4) |= 0x400u;
    v14 = (CA::Transaction *)classDescription(this);
    if (v14 && *((_BYTE *)v14 + 137))
      *((_DWORD *)v4 + 4) |= 0x800u;
    v15 = *(CA::Transaction **)(StatusReg + 576);
    if (!v15)
      v15 = (CA::Transaction *)CA::Transaction::create(v14);
    *(_DWORD *)v4 |= CA::Layer::State::fetch_defaults((uint64_t)v4, v15, (void (*)(uint64_t, uint64_t, uint64_t, CFTypeRef *))fetchDefault, (uint64_t)this);
    v16 = (CA::Layer *)objc_opt_class();
    if (v16 == this)
    {
      v17 = 0;
    }
    else
    {
      v17 = 0;
      for (i = 0; i != 14; ++i)
      {
        v19 = (char *)&CA::Layer::changed_flags_for_class(objc_class *)::changed_flags + 16 * i;
        v20 = (const char *)*((_QWORD *)v19 + 1);
        if (*v20)
        {
          while (1)
          {
            v21 = sel_registerName(v20);
            if (v21)
            {
              v22 = -[CA::Layer instanceMethodForSelector:](v16, "instanceMethodForSelector:", v21);
              if (-[CA::Layer instanceMethodForSelector:](this, "instanceMethodForSelector:", v21) != v22)
                break;
            }
            v23 = &v20[strlen(v20)];
            v24 = *((unsigned __int8 *)v23 + 1);
            v20 = v23 + 1;
            if (!v24)
              goto LABEL_29;
          }
          v17 |= *(_DWORD *)v19;
        }
LABEL_29:
        ;
      }
    }
    v25 = -[CA::Layer _hasRenderLayerSubclass](this, "_hasRenderLayerSubclass");
    v26 = v17 | 0x10000;
    if (!v25)
      v26 = v17;
    v27 = *(_DWORD *)v4 | v26;
    *(_DWORD *)v4 = v27;
    if ((v27 & 0x8000) == 0)
    {
      v39[0] = 0;
      CAObject_defaultValueForAtom(this, 52, (const CGAffineTransform *)1, (uint64_t)v39);
      if (!v39[0])
      {
        CAObject_defaultValueForAtom(this, 64, (const CGAffineTransform *)1, (uint64_t)v39);
        if (!v39[0])
        {
          if ((*(_DWORD *)v4 & 0x2000) != 0)
            goto LABEL_41;
          goto LABEL_39;
        }
      }
      v27 = *(_DWORD *)v4 | 0x8000;
      *(_DWORD *)v4 = v27;
    }
    if ((v27 & 0x2000) != 0)
      goto LABEL_41;
LABEL_39:
    v39[0] = 0;
    CAObject_defaultValueForAtom(this, 490, (const CGAffineTransform *)1, (uint64_t)v39);
    if (v39[0])
      *(_DWORD *)v4 |= 0x2000u;
LABEL_41:
    v28 = (CA::Transaction *)classDescription(this);
    if (v28)
    {
      v29 = (unint64_t *)((char *)v28 + 128);
      while (!*v29)
      {
        while (!__ldaxr(v29))
        {
          if (!__stlxr((unint64_t)v4, v29))
            return v4;
        }
        __clrex();
      }
    }
    v31 = *(CA::Transaction **)(StatusReg + 576);
    if (!v31)
      v31 = (CA::Transaction *)CA::Transaction::create(v28);
    v32 = (const void *)*((_QWORD *)v4 + 13);
    if (v32)
      CA::Transaction::release_object(v31, v32);
    v33 = (CA::AttrList *)*((_QWORD *)v4 + 4);
    if (v33)
    {
      v34 = *((_DWORD *)v31 + 25);
      *((_DWORD *)v31 + 25) = v34 + 1;
      if (v34
        || (os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock),
            (v33 = (CA::AttrList *)*((_QWORD *)v4 + 4)) != 0))
      {
        CA::AttrList::free(v33, v32);
      }
      CA::Transaction::unlock(v31);
    }
    v35 = (id *)(v4 + 88);
    if (*((_QWORD *)v4 + 11))
    {
      if (v4[96])
        objc_storeWeakOrNil(v35, 0);
      else
        *v35 = 0;
    }
    v36 = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(v36, v4);
  }
}

void sub_1844FA29C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  id *v3;

  v3 = (id *)(v1 + 88);
  if (*(_QWORD *)(v1 + 88))
  {
    if (*(_BYTE *)(v1 + 96))
      objc_storeWeakOrNil(v3, 0);
    else
      *v3 = 0;
  }
  _Unwind_Resume(exception_object);
}

uint64_t lookup_delegate_methods(CA::Transaction *a1, objc_object *a2)
{
  objc_object *v4;
  int v5;
  uint64_t v6;
  const char *v7;
  uint64_t *v8;
  const char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  v4 = (objc_object *)objc_opt_class();
  v5 = *((_DWORD *)a1 + 25);
  *((_DWORD *)a1 + 25) = v5 + 1;
  if (!v5)
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
  v6 = lookup_delegate_methods(CA::Transaction *,objc_object *)::table;
  if (!lookup_delegate_methods(CA::Transaction *,objc_object *)::table)
  {
    lookup_delegate_methods(CA::Transaction *,objc_object *)::table = (uint64_t)x_hash_table_new_(0, 0, 0, 0, 0, 0);
    v7 = "actionForLayer:forKey:";
    v8 = &lookup_delegate_methods(CA::Transaction *,objc_object *)::selectors;
    do
    {
      *v8++ = (uint64_t)sel_registerName(v7);
      v9 = &v7[strlen(v7)];
      v10 = *((unsigned __int8 *)v9 + 1);
      v7 = v9 + 1;
    }
    while (v10);
    v6 = lookup_delegate_methods(CA::Transaction *,objc_object *)::table;
  }
  v17[0] = 0;
  v11 = x_hash_table_lookup(v6, (uint64_t)v4, v17);
  if (!v17[0] || (v12 = v11, (v11 & 0x100) != (v4 == a2) << 8))
  {
    v13 = 0;
    v14 = 1;
    LODWORD(v12) = (v4 == a2) << 8;
    do
    {
      if ((objc_opt_respondsToSelector() & 1) != 0)
        v15 = v14;
      else
        v15 = 0;
      v12 = v15 | v12;
      v14 *= 2;
      v13 += 8;
    }
    while (v13 != 64);
    hash_table_modify((int *)lookup_delegate_methods(CA::Transaction *,objc_object *)::table, (uint64_t)v4, v12, 0);
  }
  CA::Transaction::unlock(a1);
  return v12;
}

void sub_1844FA454(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

void add_non_visible_animating_layer(CA::Layer *value)
{
  __CFSet *Mutable;

  Mutable = (__CFSet *)non_visible_animating_layers;
  if (!non_visible_animating_layers)
  {
    Mutable = CFSetCreateMutable(0, 0, 0);
    non_visible_animating_layers = (uint64_t)Mutable;
  }
  CFSetAddValue(Mutable, value);
}

_DWORD *CA::Render::copy_render_array(CA::Render *this, const __CFArray *a2, CGColorSpace *a3)
{
  CFIndex Count;
  const double *v5;
  CFIndex v6;
  void *ValueAtIndex;
  CFTypeID v8;
  CFTypeID v9;
  uint64_t v10;
  uint64_t v11;
  size_t v13;
  _OWORD *v14;
  const double *v15;
  CA::Render::Vector *v16;
  CFIndex v17;
  uint64_t v18;
  void *v19;
  _DWORD *v20;
  uint64_t v21;
  void *v22;
  unint64_t v23;
  CGColorSpace *v24;
  __int128 valuePtr;
  __int128 v26;
  uint64_t v27;

  v24 = a2;
  v27 = *MEMORY[0x1E0C80C00];
  Count = CFArrayGetCount(this);
  if (!Count)
    return CA::Render::Vector::new_vector(0, 0, v5);
  v6 = Count;
  if (CA::Render::initialize_types(void)::once[0] != -1)
    dispatch_once(CA::Render::initialize_types(void)::once, &__block_literal_global_4814);
  ValueAtIndex = (void *)CFArrayGetValueAtIndex(this, 0);
  v8 = CFGetTypeID(ValueAtIndex);
  v9 = v8;
  v10 = CA::Render::number_type;
  if (v8 == CA::Render::number_type)
  {
    v24 = 0;
    v11 = 1;
  }
  else
  {
    if (v8 != CA::Render::color_type)
      return CA::Render::copy_render_object(this, 0);
    v11 = 4;
  }
  v23 = 8 * v6 * v11;
  if (v23 > 0x1000)
  {
    v14 = malloc_type_malloc(8 * v6 * v11, 0x341C2289uLL);
  }
  else
  {
    MEMORY[0x1E0C80A78](v8);
    v14 = (_OWORD *)((char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
    bzero(v14, v13);
  }
  v16 = 0;
  v17 = 0;
  v22 = v14;
  while (1)
  {
    if (v17)
      ValueAtIndex = (void *)CFArrayGetValueAtIndex(this, v17);
    if (v9 == v10)
    {
      if (ValueAtIndex)
      {
        *(_QWORD *)&valuePtr = 0;
        CFNumberGetValue((CFNumberRef)ValueAtIndex, kCFNumberDoubleType, &valuePtr);
        v18 = valuePtr;
      }
      else
      {
        v18 = 0;
      }
      *(_QWORD *)v14 = v18;
      goto LABEL_22;
    }
    if (CGColorGetPattern((CGColorRef)ValueAtIndex))
      break;
    valuePtr = 0u;
    v26 = 0u;
    CA_CGColorGetRGBComponents((CGColor *)ValueAtIndex, v24, (CGFloat *)&valuePtr);
    *v14 = valuePtr;
    v14[1] = v26;
LABEL_22:
    ++v17;
    v16 = (CA::Render::Vector *)((char *)v16 + v11);
    v14 = (_OWORD *)((char *)v14 + 8 * v11);
    if (v6 == v17)
    {
      v19 = v22;
      v20 = CA::Render::Vector::new_vector(v16, v22, v15);
      if (v23 > 0x1000)
        free(v19);
      return v20;
    }
  }
  if (v23 > 0x1000)
    free(v22);
  return 0;
}

uint64_t CA::OGL::color_matrix_function(CA::OGL *this, CA::OGL::Context *a2, const CA::ColorMatrix *a3, int a4, int a5)
{
  int v7;
  uint64_t result;
  float v11;
  BOOL v12;
  float v13;
  BOOL v14;
  float v15;
  BOOL v16;
  BOOL v18;
  char v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int v33;
  unsigned int v34;
  char v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  _WORD *v56;
  char v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;

  v7 = (int)a3;
  v63 = *MEMORY[0x1E0C80C00];
  result = CA::ColorMatrix::is_diagonal(a2);
  if (!(_DWORD)result)
    goto LABEL_21;
  v11 = *(float *)a2;
  v12 = *(float *)a2 >= 0.0 && v11 <= 1.0;
  if (!v12
    || ((v13 = *((float *)a2 + 6), v13 >= 0.0) ? (v14 = v13 <= 1.0) : (v14 = 0),
        !v14
     || ((v15 = *((float *)a2 + 12), v15 >= 0.0) ? (v16 = v15 <= 1.0) : (v16 = 0),
         !v16 || ((_S3 = *((float *)a2 + 18), _S3 >= 0.0) ? (v18 = _S3 <= 1.0) : (v18 = 0), !v18))))
  {
LABEL_21:
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v58 = 0u;
    if (CA::ColorMatrix::is_alpha_identity(a2) || a4 && CA::ColorMatrix::is_opaque_identity(a2))
    {
      if (*((float *)a2 + 4) == 0.0
        && *((float *)a2 + 9) == 0.0
        && *((float *)a2 + 14) == 0.0
        && *((float *)a2 + 19) == 0.0)
      {
        v19 = v7 ? 22 : 18;
        *(_BYTE *)(*((_QWORD *)this + 2) + 16) = v19;
        if ((*(unsigned int (**)(CA::OGL *))(*(_QWORD *)this + 984))(this))
        {
          v20 = *((_DWORD *)a2 + 1);
          v21 = *((_DWORD *)a2 + 5);
          v22 = *((_DWORD *)a2 + 6);
          LODWORD(v58) = *(_DWORD *)a2;
          DWORD1(v58) = v21;
          v23 = *((_DWORD *)a2 + 11);
          DWORD2(v58) = *((_DWORD *)a2 + 10);
          HIDWORD(v58) = v20;
          *(_QWORD *)&v59 = __PAIR64__(v23, v22);
          v24 = *((_DWORD *)a2 + 7);
          DWORD2(v59) = *((_DWORD *)a2 + 2);
          HIDWORD(v59) = v24;
          v25 = 3;
          v26 = 3;
          LODWORD(v60) = *((_DWORD *)a2 + 12);
          return (*(uint64_t (**)(CA::OGL *, _QWORD, uint64_t, uint64_t, __int128 *))(*(_QWORD *)this + 1000))(this, 0, v25, v26, &v58);
        }
      }
      if (v7)
        v27 = 23;
      else
        v27 = 19;
      *(_BYTE *)(*((_QWORD *)this + 2) + 16) = v27;
      if ((*(unsigned int (**)(CA::OGL *))(*(_QWORD *)this + 984))(this))
      {
        v28 = *((_DWORD *)a2 + 1);
        v30 = *((_DWORD *)a2 + 4);
        v29 = *((_DWORD *)a2 + 5);
        LODWORD(v58) = *(_DWORD *)a2;
        DWORD1(v58) = v29;
        v31 = *((_DWORD *)a2 + 9);
        DWORD2(v58) = *((_DWORD *)a2 + 10);
        HIDWORD(v58) = v28;
        v32 = *((_DWORD *)a2 + 7);
        v33 = *((_DWORD *)a2 + 11);
        v34 = *((_DWORD *)a2 + 12);
        LODWORD(v59) = *((_DWORD *)a2 + 6);
        DWORD1(v59) = v33;
        DWORD2(v59) = *((_DWORD *)a2 + 2);
        HIDWORD(v59) = v32;
        *(_QWORD *)&v60 = __PAIR64__(v30, v34);
        v26 = 4;
        v25 = 3;
        *((_QWORD *)&v60 + 1) = __PAIR64__(*((_DWORD *)a2 + 14), v31);
        return (*(uint64_t (**)(CA::OGL *, _QWORD, uint64_t, uint64_t, __int128 *))(*(_QWORD *)this + 1000))(this, 0, v25, v26, &v58);
      }
    }
    if (a5)
      v35 = 20;
    else
      v35 = 21;
    if (v7)
      v35 = 24;
    *(_BYTE *)(*((_QWORD *)this + 2) + 16) = v35;
    v36 = *((_DWORD *)a2 + 1);
    v38 = *((_DWORD *)a2 + 4);
    v37 = *((_DWORD *)a2 + 5);
    LODWORD(v58) = *(_DWORD *)a2;
    DWORD1(v58) = v37;
    v39 = *((_DWORD *)a2 + 11);
    v41 = *((_DWORD *)a2 + 14);
    v40 = *((_DWORD *)a2 + 15);
    DWORD2(v58) = *((_DWORD *)a2 + 10);
    HIDWORD(v58) = v40;
    v42 = *((_DWORD *)a2 + 7);
    *(_QWORD *)&v59 = __PAIR64__(*((_DWORD *)a2 + 6), v36);
    v43 = *((_DWORD *)a2 + 17);
    *((_QWORD *)&v59 + 1) = __PAIR64__(*((_DWORD *)a2 + 16), v39);
    v44 = *((_DWORD *)a2 + 3);
    LODWORD(v60) = *((_DWORD *)a2 + 2);
    DWORD1(v60) = v42;
    v45 = *((_DWORD *)a2 + 13);
    DWORD2(v60) = *((_DWORD *)a2 + 12);
    HIDWORD(v60) = v43;
    v46 = *((_DWORD *)a2 + 9);
    *(_QWORD *)&v61 = __PAIR64__(*((_DWORD *)a2 + 8), v44);
    v47 = *((_DWORD *)a2 + 19);
    *((_QWORD *)&v61 + 1) = __PAIR64__(*((_DWORD *)a2 + 18), v45);
    *(_QWORD *)&v62 = __PAIR64__(v46, v38);
    v26 = 5;
    v25 = 4;
    *((_QWORD *)&v62 + 1) = __PAIR64__(v47, v41);
    return (*(uint64_t (**)(CA::OGL *, _QWORD, uint64_t, uint64_t, __int128 *))(*(_QWORD *)this + 1000))(this, 0, v25, v26, &v58);
  }
  _S0 = _S3 * v11;
  _S1 = v13 * _S3;
  _S2 = v15 * _S3;
  __asm
  {
    FCVT            H0, S0
    FCVT            H1, S1
    FCVT            H2, S2
    FCVT            H3, S3
  }
  v56 = (_WORD *)*((_QWORD *)this + 2);
  v56[4] = LOWORD(_S0);
  v56[5] = LOWORD(_S1);
  v56[6] = LOWORD(_S2);
  v56[7] = _H3;
  if (v7)
    v57 = 4;
  else
    v57 = 3;
  *(_BYTE *)(*((_QWORD *)this + 2) + 16) = v57;
  return result;
}

void CA::OGL::Context::blur_surface(uint64_t a1, const CA::Bounds *a2, uint64_t a3, uint64_t a4, float a5, float a6, double a7, double a8, float64x2_t a9)
{
  int8x16_t *v15;
  unint64_t v16;
  int8x16_t v17;
  int8x16_t v18;
  double v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  float64x2_t v24;
  float64x2_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int v29;
  int32x2_t v30;
  int v31;
  __int32 v32;
  __int32 v33;
  int32x2_t v34;
  uint32x2_t v35;
  uint32x2_t v36;
  unsigned __int32 v37;
  int32x2_t v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  int v43;
  unsigned int v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x2_t *v51;
  int32x2_t *v52;
  int32x2_t v53;
  uint32x2_t v54;
  uint32x2_t v55;
  int32x2_t v56;
  uint32x2_t v57;
  int v58;
  int64x2_t v59;
  float64x2_t v60;
  int8x16_t v61;
  int32x2_t v62;
  int8x16_t v63;
  int8x16_t v64;
  float v65;
  double v66;
  int8x16_t v68;
  int8x16_t v69;
  unint64_t v70;
  int8x16_t v71;
  float64x2_t v72;
  float64x2_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int v78;
  int v79;
  int32x2_t v80;
  int32x2_t v81;
  int v82;
  int v83;
  int32x2_t v84;
  int v85;
  BOOL v86;
  unsigned int v87;
  uint64_t v88;
  uint32x2_t v89;
  uint32x2_t v90;
  int32x2_t v91;
  int32x4_t v92;
  int32x2_t v93;
  uint32x2_t v94;
  int32x2_t v95;
  uint32x2_t v96;
  uint32x2_t v97;
  int32x2_t v98;
  __int128 v99;
  uint32x2_t v100;
  int v101;
  int v102;
  int32x2_t v103;
  int8x8_t v104;
  unsigned int v106;
  const void *v107;
  uint64_t v108;
  float v109;
  __int16 v110;
  _OWORD *v111;
  double v112;
  float v113;
  char v114;
  float v115;
  float v116;
  int v117;
  int v118;
  uint64_t v119;
  double v120;
  _DWORD *v121;
  uint64_t *v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  _BOOL4 v131;
  _BOOL4 v132;
  BOOL v133;
  double v134;
  float *v135;
  __n128 v136;
  double v137;
  double v138;
  const float *v139;
  const float *v140;
  double v141;
  BOOL v142;
  BOOL v143;
  const float *v145;
  const float *v146;
  double v148;
  double v149;
  CA::OGL::Context *v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  int v154;
  int v155;
  float v156;
  uint64_t v157;
  float v158;
  uint64_t *v159;
  double v161;
  double v163;
  CA::OGL::Context *v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  int v168;
  int v169;
  float v170;
  uint64_t v171;
  float32x4_t *v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t *v177;
  double v179;
  BOOL v182;
  BOOL i;
  double v186;
  int v187;
  BOOL v188;
  _BOOL4 v189;
  double v190;
  double v191;
  double v192;
  int32x4_t v193;
  double v194;
  double v195;
  int32x4_t v196;
  float v197;
  float v198;
  int *v199;
  BOOL v200;
  int v201;
  unsigned int v202;
  float v203;
  int v204;
  unsigned int v205;
  float v206;
  int *v207;
  double v208;
  _BOOL4 v209;
  BOOL v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  unsigned int v214;
  _BOOL4 v215;
  signed int v216;
  signed int v217;
  int v218;
  unsigned int v219;
  float v220;
  float *v221;
  unsigned int v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  CA::OGL::_anonymous_namespace_ *v226;
  int v227;
  int v228;
  unsigned int v229;
  float v230;
  double v231;
  uint64_t v232;
  uint64_t v233;
  _BOOL4 v234;
  _BOOL4 v235;
  BOOL v236;
  int v237;
  unsigned int v238;
  _BOOL4 v240;
  signed int v241;
  signed int v242;
  int v243;
  uint64_t v244;
  uint64_t v245;
  __int16 v246;
  double v247;
  int32x4_t v248;
  double v249;
  double v250;
  int32x4_t v251;
  int v252;
  float32x4_t *v253;
  CA::OGL::Context *v254;
  char v255;
  int v256;
  uint64_t v257;
  int v258;
  int v259;
  CA::OGL::Context *v260;
  int32x4_t v262;
  float16x4_t v263;
  uint64_t v264;
  float v265;
  float v266;
  float v267;
  float v268;
  float v269;
  float v270;
  uint64_t v271;
  int v272;
  float v273;
  float v274;
  float v275;
  float v276;
  float v277;
  char v278;
  float v279;
  float v280;
  float32x4_t v283;
  int32x4_t v284;
  float32x4_t v285;
  int32x4_t v286;
  float32x4_t v287;
  float v288;
  float v289;
  float v290;
  _DWORD *v291;
  float v292;
  int v293;
  int v294;
  int v295;
  int v296;
  float v297;
  float v298;
  float v299;
  float v300;
  float v301;
  float v302;
  float v303;
  float v304;
  CA::Shape *v305;
  char v307;
  int v308;
  int v309;
  int v310;
  int v311;
  int v312;
  int v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  float v317;
  float v318;
  float v319;
  float v320;
  float v321;
  float v322;
  uint64_t v323;
  uint64_t *v324;
  uint64_t v325;
  uint64_t PerfHud;
  double v327;
  double v328;
  int v329;
  unint64_t v330;
  const CA::Bounds *v331;
  int v332;
  uint64_t v333;
  int v334;
  int32x2_t v335;
  uint64_t v336;
  uint64_t v337;
  float v338;
  float v339;
  int32x2_t v340;
  int v341;
  char v342;
  int32x4_t v343;
  CA::Shape *v344;
  int32x2_t v345;
  int8x8_t v346;
  _OWORD v347[3];
  uint64_t v348;
  _OWORD v349[2];
  _OWORD v350[2];
  CA::Shape *v351[2];
  __int128 v352;
  __int128 v353;
  uint64_t v354;
  _OWORD v355[3];
  uint64_t v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  int32x4_t __dst;
  CA::OGL::Context *v362;
  uint64_t v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  float32x4_t v370[4];
  float32x4_t v371;
  __int128 v372;
  double v373;
  double v374;
  __int128 v375;
  uint64_t v376;
  float32x4x2_t v377;

  v376 = *MEMORY[0x1E0C80C00];
  if (BYTE5(xmmword_1ECDC6A70))
  {
    PerfHud = CA::OGL::GetPerfHud((CA::OGL *)a1);
    if (PerfHud)
      ++*(_QWORD *)(PerfHud + 464);
  }
  if (*((_DWORD *)a2 + 6)
    && *((_DWORD *)a2 + 7)
    && (*(_DWORD *)a3 & 0x7FFFFFFFu) <= 0x7F7FFFFF
    && (*(_DWORD *)(a3 + 4) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    v333 = (uint64_t)a2;
    if ((*(_BYTE *)(a3 + 48) & 8) != 0)
      v333 = (*(uint64_t (**)(uint64_t, const CA::Bounds *, uint64_t))(*(_QWORD *)a1 + 680))(a1, a2, 1);
    v331 = a2;
    v343 = 0uLL;
    v15 = *(int8x16_t **)(a3 + 24);
    v16 = *(_QWORD *)(a3 + 32);
    v337 = a4;
    if (!v15)
    {
      v31 = 0;
      v29 = 0;
      v32 = 0;
      v39 = 0;
      v40 = *(unsigned __int8 *)(a3 + 48);
      goto LABEL_37;
    }
    v17 = *v15;
    v18 = v15[1];
    if (a6 != 1.0)
    {
      v19 = a6;
      a9.f64[0] = 1.79769313e308;
      v20 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(a9, (float64x2_t)v18).i64[0], 0);
      v21.i64[1] = v15->i64[1];
      *(double *)v21.i64 = a6 * *(double *)v17.i64;
      v17 = vbslq_s8(v20, v21, v17);
      v21.i64[1] = v15[1].i64[1];
      *(double *)v21.i64 = a6 * *(double *)v18.i64;
      v18 = vbslq_s8(v20, v21, v18);
      if (*(double *)&v18.i64[1] < 1.79769313e308)
      {
        v17.i64[1] = vmuld_lane_f64(v19, (float64x2_t)v17, 1);
        *(double *)&v18.i64[1] = *(double *)&v18.i64[1] * v19;
      }
    }
    v22 = (int8x16_t)vceqzq_f64((float64x2_t)v18);
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v22, 1), v22).u64[0] & 0x8000000000000000) != 0
      || (v23 = vorrq_s8((int8x16_t)vcltzq_f64((float64x2_t)v18), (int8x16_t)vcgezq_f64((float64x2_t)v18)),
          (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v23), 1), v23).u64[0] & 0x8000000000000000) != 0))
    {
      v31 = 0;
      v29 = 0;
      v32 = 0;
      v33 = 0;
      v28.i64[0] = 0;
      v30 = 0;
    }
    else
    {
      v24 = vmaxnmq_f64((float64x2_t)v17, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000));
      v25 = vminnmq_f64(vaddq_f64((float64x2_t)v17, (float64x2_t)v18), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL));
      v26 = (int32x4_t)vcvtmq_s64_f64(v24);
      v27 = (int32x4_t)vsubq_s64(vcvtpq_s64_f64(v25), (int64x2_t)v26);
      v28 = vuzp1q_s32(v26, v27);
      v343 = v28;
      v29 = v28.i32[2];
      v30 = (int32x2_t)v28.u64[1];
      v31 = v27.i32[2];
      v32 = v26.i32[2];
      v33 = v26.i32[0];
    }
    if (v16)
    {
      v335 = *(int32x2_t *)v28.i8;
      __dst = 0uLL;
      v340 = v30;
      CA::Shape::get_bounds(v16, __dst.i32);
      v34 = (int32x2_t)__dst.u64[1];
      v35 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v340);
      v36 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, (int32x2_t)__dst.u64[1]);
      v37 = vpmax_u32(v36, v36).u32[0];
      if ((vpmax_u32(v35, v35).u32[0] & 0x80000000) != 0)
      {
        if ((v37 & 0x80000000) != 0)
          goto LABEL_24;
        v38 = *(int32x2_t *)__dst.i8;
      }
      else
      {
        if ((v37 & 0x80000000) != 0)
          goto LABEL_24;
        v38 = vmin_s32(v335, *(int32x2_t *)__dst.i8);
        v34 = vsub_s32(vmax_s32(vadd_s32(v335, v340), vadd_s32(*(int32x2_t *)__dst.i8, (int32x2_t)__dst.u64[1])), v38);
      }
      v32 = v38.i32[1];
      v33 = v38.i32[0];
      *(int32x2_t *)v343.i8 = v38;
      v343.u64[1] = (unint64_t)v34;
      v29 = v34.i32[0];
      v31 = v34.i32[1];
    }
LABEL_24:
    v40 = *(unsigned __int8 *)(a3 + 48);
    if ((v40 & 1) == 0)
    {
      v41 = v29 <= v31 ? v31 : v29;
      v42 = v29 >= v31 ? v31 : v29;
      if (v41 <= 1073741822 && v42 >= 1)
      {
        ++v32;
        v343.i32[0] = v33 + 1;
        v343.i32[1] = v32;
        v29 -= 2;
        v31 -= 2;
        v343.i64[1] = __PAIR64__(v31, v29);
        if (v29 < 1 || v31 <= 0)
        {
          v31 = 0;
          v29 = 0;
          v343.i64[1] = 0;
        }
      }
    }
    a4 = v337;
    v39 = *(_QWORD *)(a3 + 24);
LABEL_37:
    v369 = 0u;
    v368 = 0u;
    v367 = 0u;
    v366 = 0u;
    v365 = 0u;
    v43 = ((v40 & 4) << 15) ^ 0x20000 | *(_DWORD *)(a3 + 44);
    v362 = (CA::OGL::Context *)a1;
    v363 = v333;
    v364 = *(_OWORD *)(v333 + 32);
    LOWORD(v365) = -1;
    BYTE2(v365) = 1;
    DWORD1(v365) = v43;
    __asm { FMOV            V0.2S, #1.0 }
    v368 = _D0;
    *(_QWORD *)&v369 = 0;
    if (v16)
    {
      *((_QWORD *)&v365 + 1) = CA::Shape::ref(v16, a2);
      v40 = *(unsigned __int8 *)(a3 + 48);
    }
    DWORD2(v369) = *(_DWORD *)(a3 + 40);
    v48 = v40 >> 2;
    BYTE12(v369) = v48 & 4 | (v39 != 0) | v48 & 2;
    if ((v48 & 2) != 0)
      DWORD1(v365) = v43 | 0x80;
    __dst = 0uLL;
    CA::Shape::get_bounds(*(_QWORD *)(*(_QWORD *)(a1 + 232) + 8), __dst.i32);
    v51 = *(int32x2_t **)(a1 + 248);
    if (v51)
      v52 = v51 + 4;
    else
      v52 = (int32x2_t *)(a1 + 184);
    v53 = (int32x2_t)__dst.u64[1];
    v50.i32[1] = 1;
    v54 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, (int32x2_t)__dst.u64[1]);
    *(uint32x2_t *)v49.i8 = vpmax_u32(v54, v54);
    if ((v49.i32[0] & 0x80000000) == 0)
    {
      *(int32x2_t *)v49.i8 = v52[1];
      v55 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)v49.i8);
      *(uint32x2_t *)v50.i8 = vpmax_u32(v55, v55);
      if (v50.i32[0] < 0
        || (v56 = vadd_s32(*v52, *(int32x2_t *)v49.i8),
            *(int32x2_t *)v49.i8 = vmax_s32(*(int32x2_t *)__dst.i8, *v52),
            v53 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)__dst.i8, (int32x2_t)__dst.u64[1]), v56), *(int32x2_t *)v49.i8), v57 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v53), *(uint32x2_t *)v50.i8 = vpmax_u32(v57, v57), v50.i32[0] < 0))
      {
        v53 = 0;
      }
      else
      {
        v49.u64[1] = (unint64_t)v53;
        __dst = v49;
      }
    }
    v58 = v53.i32[0];
    if (v53.i32[0] <= v53.i32[1])
      v58 = v53.i32[1];
    v49.i32[0] = v58;
    v50.i32[0] = 1073741822;
    v59.i64[0] = __dst.i32[0];
    v59.i64[1] = __dst.i32[1];
    v60 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v49, v50), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v59));
    v59.i64[0] = v53.i32[0];
    v59.i64[1] = v53.i32[1];
    v61 = (int8x16_t)vcvtq_f64_s64(v59);
    v62 = vdup_n_s32(v58 > 1073741822);
    v59.i64[0] = v62.u32[0];
    v59.i64[1] = v62.u32[1];
    v63 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v59, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL), v61);
    v64 = (int8x16_t)vsubq_f64(v60, vcvtq_f64_f32(*(float32x2_t *)(a3 + 8)));
    v65 = a6 / a5;
    v66 = (float)(a6 / a5);
    _ZF = *(double *)v63.i64 >= 1.79769313e308 || v65 == 1.0;
    v68.i64[1] = v64.i64[1];
    v69.i64[1] = v63.i64[1];
    if (_ZF)
      v70 = 0;
    else
      v70 = -1;
    v71 = (int8x16_t)vdupq_n_s64(v70);
    *(double *)v69.i64 = v66 * *(double *)v63.i64;
    v72 = (float64x2_t)vbslq_s8(v71, v69, v63);
    *(double *)v68.i64 = v66 * *(double *)v64.i64;
    v73 = (float64x2_t)vbslq_s8(v71, v68, v64);
    if (v65 != 1.0 && v72.f64[1] < 1.79769313e308)
    {
      v73.f64[1] = vmuld_lane_f64(v66, v73, 1);
      v72.f64[1] = v72.f64[1] * v66;
    }
    v74 = (int8x16_t)vceqzq_f64(v72);
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v74, 1), v74).u64[0] & 0x8000000000000000) != 0
      || (v75 = vorrq_s8((int8x16_t)vcltzq_f64(v72), (int8x16_t)vcgezq_f64(v72)),
          (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v75), 1), v75).u64[0] & 0x8000000000000000) != 0))
    {
      v79 = 0;
      v78 = 0;
      __dst = 0uLL;
      v80 = 0;
      v81 = 0;
    }
    else
    {
      v76 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v73, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
      v77 = (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v73, v72), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v76);
      __dst = vuzp1q_s32(v76, v77);
      v78 = __dst.i32[2];
      v79 = v77.i32[2];
      v80 = (int32x2_t)__dst.u64[1];
      v81 = vmovn_s64((int64x2_t)v76);
      v81.i32[0] = v76.i32[0];
    }
    if (v78 <= v79)
      v82 = v79;
    else
      v82 = v78;
    if (v78 >= v79)
      v83 = v79;
    else
      v83 = v78;
    if (v82 <= 1073741822 && v83 >= 1)
    {
      v84 = vcvt_s32_f32(vneg_f32(vrndp_f32(vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)a3), (float64x2_t)vdupq_n_s64(0x4006666666666666uLL))))));
      v85 = v78 - 2 * v84.i32[0];
      *(int32x2_t *)__dst.i8 = vadd_s32(v81, v84);
      __dst.i32[2] = v85;
      __dst.i32[3] = v79 - 2 * v84.i32[1];
      v86 = __dst.i32[3] < 1 || v85 < 1;
      if (v86)
        v87 = -1;
      else
        v87 = 0;
      v80 = (int32x2_t)vbic_s8((int8x8_t)__dst.u64[1], (int8x8_t)vdup_n_s32(v87));
    }
    if ((BYTE12(v369) & 1) != 0)
    {
      v88 = (uint64_t)&v343.i64[1];
      if (!v39)
        v88 = 8;
      v89 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v80);
      if ((vpmax_u32(v89, v89).u32[0] & 0x80000000) == 0)
      {
        v90 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)v88);
        if ((vpmax_u32(v90, v90).u32[0] & 0x80000000) != 0
          || (v91 = vadd_s32(*(int32x2_t *)__dst.i8, v80),
              *(int32x2_t *)v92.i8 = vmax_s32(*(int32x2_t *)__dst.i8, *(int32x2_t *)v343.i8),
              v93 = vsub_s32(vmin_s32(v91, vadd_s32(*(int32x2_t *)v343.i8, *(int32x2_t *)v88)), *(int32x2_t *)v92.i8),
              v94 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v93),
              (vpmax_u32(v94, v94).u32[0] & 0x80000000) != 0))
        {
          v80 = 0;
        }
        else
        {
          v92.u64[1] = (unint64_t)v93;
          __dst = v92;
          v80 = v93;
        }
      }
    }
    v95 = *(int32x2_t *)((char *)&v364 + 8);
    v96 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)((char *)&v364 + 8));
    if ((vpmax_u32(v96, v96).u32[0] & 0x80000000) == 0)
    {
      v97 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v80);
      if ((vpmax_u32(v97, v97).u32[0] & 0x80000000) != 0
        || (v98 = vadd_s32(*(int32x2_t *)__dst.i8, v80),
            *(int32x2_t *)&v99 = vmax_s32(*(int32x2_t *)&v364, *(int32x2_t *)__dst.i8),
            v95 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)&v364, *(int32x2_t *)((char *)&v364 + 8)), v98), *(int32x2_t *)&v99), v100 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v95), (vpmax_u32(v100, v100).u32[0] & 0x80000000) != 0))
      {
        v95 = 0;
        *((_QWORD *)&v364 + 1) = 0;
      }
      else
      {
        *((int32x2_t *)&v99 + 1) = v95;
        v364 = v99;
      }
    }
    v101 = v95.i32[0];
    if (v95.i32[0] >= v95.i32[1])
      v102 = v95.i32[1];
    else
      v102 = v95.i32[0];
    if (!a4 && v102 < 1)
      goto LABEL_419;
    DWORD1(v365) |= *(_DWORD *)(v333 + 68) & 0x30;
    v345 = (int32x2_t)v364;
    v346 = (int8x8_t)v95;
    if (v95.i32[0] <= v95.i32[1])
      v101 = v95.i32[1];
    if (v101 <= 1073741822 && v102 >= 1)
    {
      v103 = vadd_s32(*(int32x2_t *)&v364, (int32x2_t)-1);
      v104 = (int8x8_t)vadd_s32(v95, (int32x2_t)0x200000002);
      if (v104.i32[1] < 1 || v104.i32[0] < 1)
        v106 = -1;
      else
        v106 = 0;
      v345 = v103;
      v346 = vbic_s8(v104, (int8x8_t)vdup_n_s32(v106));
    }
    memset(&__dst, 0, 488);
    v107 = *(const void **)(a1 + 16);
    memcpy(&__dst, v107, 0x1E8uLL);
    __dst.i64[0] = (uint64_t)v107;
    *(_QWORD *)(a1 + 16) = &__dst;
    v358 = 0u;
    v359 = 0u;
    v360 = 0u;
    v357 = 0u;
    v108 = *(_QWORD *)(a1 + 232);
    *((_QWORD *)&v358 + 1) = 0x3C003C003C003C00;
    v359 = 0uLL;
    *(_QWORD *)&v360 = 0;
    WORD6(v360) = 1;
    v356 = 0;
    if (v108)
    {
      v109 = *(float *)(v108 + 64);
      WORD6(v360) = *(_WORD *)(v108 + 68) & 0x100 | 1;
      v110 = WORD6(v360) | *(_WORD *)(v108 + 68) & 0x400;
    }
    else
    {
      v110 = 1025;
      v109 = 1.0;
    }
    *((float *)&v360 + 2) = v109;
    WORD6(v360) = v110;
    *(_QWORD *)&v358 = &CA::identity_transform;
    memset(v355, 0, sizeof(v355));
    CA::Shape::operator=((uint64_t)v355, &v345);
    if (v16)
      v111 = (_OWORD *)v16;
    else
      v111 = v355;
    v357 = (unint64_t)v111;
    v356 = CA::OGL::Context::set_gstate(a1, (uint64_t)&v356);
    v329 = *(unsigned __int8 *)(a1 + 64);
    *(_BYTE *)(*(_QWORD *)(a1 + 16) + 481) &= ~1u;
    *(_BYTE *)(a1 + 64) = 0;
    *(_BYTE *)(*(_QWORD *)(a1 + 16) + 16) = 0;
    v112 = COERCE_DOUBLE(vcvt_f32_s32(*(int32x2_t *)&v364));
    *(double *)&v366 = v112;
    *((float32x2_t *)&v366 + 1) = vcvt_f32_s32(vadd_s32(*(int32x2_t *)((char *)&v364 + 8), *(int32x2_t *)&v364));
    if (*(_QWORD *)(a3 + 24)
      && (*(_BYTE *)(a3 + 48) & 1) == 0
      && (*(_DWORD *)(v333 + 32) != v343.i32[0]
       || *(_DWORD *)(v333 + 36) != v32
       || *(_DWORD *)(v333 + 40) != v29
       || *(_DWORD *)(v333 + 44) != v31
       || *(_DWORD *)(v333 + 24) != v29
       || *(_DWORD *)(v333 + 28) != v31))
    {
      v113 = 32.0;
      if (*(_DWORD *)(a3 + 40))
        v113 = 16.0;
      CA::OGL::BlurState::copy((float32x2_t *)&v362, v113);
    }
    if (DWORD2(v369) == 2)
    {
      LODWORD(v112) = 1.0;
      CA::OGL::PingPongState::scale_and_dilate((CA::OGL::PingPongState *)&v362, v112, 1.0, 1, 1);
    }
    v114 = *(_BYTE *)(a3 + 48);
    v115 = *(float *)a3 * *(float *)a3;
    v116 = *(float *)(a3 + 4) * *(float *)(a3 + 4);
    v117 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 184))(a1, 15);
    if (v117 >= 27)
      v118 = 27;
    else
      v118 = v117;
    if (v118 <= 15)
      v119 = 15;
    else
      v119 = v118;
    if (v119 <= 0x1A)
    {
      v120 = 5.25;
      v121 = (_DWORD *)v337;
      if (v119 <= 0x16)
      {
        v120 = 4.35;
        if (v119 <= 0x12)
          v120 = 3.5;
      }
    }
    else
    {
      v120 = 6.1;
      v121 = (_DWORD *)v337;
    }
    v122 = &v363;
    v123 = v115;
    v124 = v116;
    v336 = a3;
    v330 = v16;
    v328 = v120;
    if ((v114 & 4) != 0)
    {
      v131 = (v114 & 2) == 0;
      v132 = fmax(v123, v124) > 100.0;
      v133 = v131 && v132;
      if (v131 && v132)
        v134 = 7.5;
      else
        v134 = 3.5;
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 184))(a1, 13))
      {
LABEL_157:
        v137 = v124 * 0.0625 + -1.1025;
        while (1)
        {
          v136.n128_u32[1] = 1068498944;
          v138 = v123 * 0.0625 + -1.1025;
          if (v138 < v134)
            break;
          v136.n128_u32[0] = 0.25;
          CA::OGL::PingPongState::scale_and_dilate((CA::OGL::PingPongState *)&v362, v136.n128_f64[0], 1.0, 4, 0);
          CA::OGL::BlurState::downsample_blur_4((float32x2_t *)&v362, 4.0, 1.0, flt_1847507F8, v139);
          v123 = v123 * 0.0625 + -1.1025;
          if (v137 >= v134)
          {
LABEL_162:
            v136.n128_u32[0] = 1.0;
            CA::OGL::PingPongState::scale_and_dilate((CA::OGL::PingPongState *)&v362, v136.n128_f64[0], 0.25, 0, 4);
            v123 = v138;
            v124 = v124 * 0.0625 + -1.1025;
            goto LABEL_157;
          }
        }
        v138 = v123;
        if (v137 >= v134)
          goto LABEL_162;
      }
      v136.n128_u32[1] = 1076396032;
      if (v133)
        v141 = 56.25;
      else
        v141 = 12.25;
      v142 = v124 > v141;
      v143 = v123 > v141;
      if (v123 <= v141 && v124 <= v141)
      {
        v122 = &v363;
      }
      else
      {
        v122 = &v363;
        do
        {
          if (v143)
          {
            v136.n128_u32[0] = 0.5;
            CA::OGL::PingPongState::scale_and_dilate((CA::OGL::PingPongState *)&v362, v136.n128_f64[0], 1.0, 2, 0);
            CA::OGL::BlurState::downsample_blur_2((float32x2_t *)&v362, 2.0, 1.0, flt_18475084C, v145);
            v123 = v123 * 0.25 + -2.56;
          }
          if (v142)
          {
            v136.n128_u32[0] = 1.0;
            CA::OGL::PingPongState::scale_and_dilate((CA::OGL::PingPongState *)&v362, v136.n128_f64[0], 0.5, 0, 2);
            v124 = v124 * 0.25 + -2.56;
          }
          v142 = v124 > v141;
          v143 = v123 > v141;
        }
        while (v123 > v141 || v124 > v141);
      }
    }
    else
    {
      if ((v114 & 2) != 0)
      {
        v130 = 20.0;
        v129 = 5.5;
        v327 = 3.5;
      }
      else
      {
        v125 = fmax(v123, v124);
        v126 = 5.5;
        if (v125 <= 100.0)
          v127 = 3.5;
        else
          v127 = 5.5;
        if (v125 > 100.0)
          v126 = 9.5;
        v128 = v127 + 1.0;
        if (v125 > 3600.0)
        {
          v129 = v126 + 1.0;
        }
        else
        {
          v128 = v127;
          v129 = v126;
        }
        if (v125 <= 3600.0)
          v130 = 20.0;
        else
          v130 = 21.0;
        if (v125 <= 10000.0)
        {
          v327 = v128;
        }
        else
        {
          v327 = v128 + 1.0;
          v129 = v129 + 1.0;
          v130 = v130 + 1.0;
        }
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 184))(a1, 14))
      {
        v148 = v130 * v130;
        if (v148 < v123 && v148 < v124)
        {
          HIDWORD(v149) = 0;
          do
          {
            LODWORD(v149) = 0.125;
            CA::OGL::PingPongState::scale_and_dilate((CA::OGL::PingPongState *)&v362, v149, 0.125, 0, 0);
            if ((CA::OGL::BlurState::tile_downsample((float32x2_t *)&v362, 8) & 1) == 0)
            {
              v150 = v362;
              v151 = (BYTE12(v369) & 1) != 0 ? 16 : 32;
              if (CA::OGL::PingPongState::attach_dest((float32x2_t *)&v362, 1, v151))
              {
                v152 = (uint64_t *)&v368 + (v365 & 1) + 1;
                if ((v365 & 0x8000u) != 0)
                  v152 = &v363;
                v153 = *v152;
                v154 = *(_DWORD *)(*v152 + 32);
                v155 = *(_DWORD *)(*v152 + 36);
                v351[0] = (CA::Shape *)__PAIR64__(v155, v154);
                CA::OGL::Context::bind_surface((uint64_t)v362, v153, 0, 1u, 1, 0.0);
                v156 = 32.0;
                if ((BYTE12(v369) & 1) != 0)
                  v156 = 16.0;
                CA::OGL::BlurState::process_edges((CA::OGL::BlurState *)&v362, v156, 8.0, 8.0, (int *)v351);
                *(_BYTE *)(*((_QWORD *)v150 + 2) + 16) = 28;
                v157 = *((_QWORD *)v150 + 2);
                v158 = *(float *)(v157 + 100);
                v370[0].i32[0] = *(_DWORD *)(v157 + 96);
                *(uint64_t *)((char *)v370[0].i64 + 4) = __PAIR64__(v370[0].u32[0], LODWORD(v158));
                v370[0].f32[3] = v158 * 3.0;
                v370[1].f32[0] = v370[0].f32[0] * 3.0;
                v370[1].f32[1] = v158;
                v370[1].f32[2] = v370[0].f32[0] * 3.0;
                v370[1].f32[3] = v158 * 3.0;
                (*(void (**)(CA::OGL::Context *, _QWORD, uint64_t, uint64_t, float32x4_t *))(*(_QWORD *)v150 + 1000))(v150, 0, 2, 4, v370);
                *((_QWORD *)v150 + 16) = 0;
                *((_QWORD *)v150 + 12) = (char *)v150 + 818;
                *(_OWORD *)((char *)v150 + 104) = xmmword_18474E060;
                *(_QWORD *)&v347[0] = 0;
                CA::OGL::PingPongState::render_pass((uint64_t)&v362, v154, v155, 0, (uint64_t *)v347, 8.0, 8.0, 0.0, 0.0);
                CA::OGL::Context::array_flush((uint64_t)v150);
                v159 = (uint64_t *)&v368 + (v365 & 1) + 1;
                a3 = v336;
                if ((v365 & 0x8000u) != 0)
                  v159 = &v363;
                CA::OGL::Context::unbind_surface(v362, *v159, 0);
                *(_BYTE *)(*((_QWORD *)v150 + 2) + 16) = 0;
                CA::OGL::Context::pop_surface(v362);
                LOWORD(v365) = v365 + 1;
              }
            }
            HIDWORD(v149) = 1066401792;
            v123 = v123 * 0.015625 + -0.140625;
            v124 = v124 * 0.015625 + -0.140625;
          }
          while (v123 > v148 && v124 > v148);
        }
      }
      v161 = v129 * v129;
      if (v123 > v129 * v129 && v124 > v161)
      {
        HIDWORD(v163) = 0;
        do
        {
          LODWORD(v163) = 0.25;
          CA::OGL::PingPongState::scale_and_dilate((CA::OGL::PingPongState *)&v362, v163, 0.25, 0, 0);
          if ((CA::OGL::BlurState::tile_downsample((float32x2_t *)&v362, 4) & 1) == 0)
          {
            v164 = v362;
            v165 = (BYTE12(v369) & 1) != 0 ? 16 : 32;
            if (CA::OGL::PingPongState::attach_dest((float32x2_t *)&v362, 1, v165))
            {
              v166 = (uint64_t *)&v368 + (v365 & 1) + 1;
              if ((v365 & 0x8000u) != 0)
                v166 = &v363;
              v167 = *v166;
              v169 = *(_DWORD *)(*v166 + 32);
              v168 = *(_DWORD *)(*v166 + 36);
              v351[0] = (CA::Shape *)__PAIR64__(v168, v169);
              CA::OGL::Context::bind_surface((uint64_t)v362, v167, 0, 1u, 1, 0.0);
              if ((BYTE12(v369) & 1) != 0)
                v170 = 16.0;
              else
                v170 = 32.0;
              CA::OGL::BlurState::process_edges((CA::OGL::BlurState *)&v362, v170, 4.0, 4.0, (int *)v351);
              *(_BYTE *)(*((_QWORD *)v164 + 2) + 16) = 26;
              v171 = *((_QWORD *)v164 + 2);
              v377.val[0] = vmulq_n_f32((float32x4_t)xmmword_18474E0E0, *(float *)(v171 + 96));
              v377.val[1] = vmulq_n_f32((float32x4_t)xmmword_18474E0F0, *(float *)(v171 + 100));
              v172 = v370;
              vst2q_f32(v172->f32, v377);
              if ((*(unsigned int (**)(CA::OGL::Context *))(*(_QWORD *)v164 + 984))(v164))
              {
                (*(void (**)(CA::OGL::Context *, _QWORD, uint64_t, uint64_t, float32x4_t *))(*(_QWORD *)v164 + 1000))(v164, 0, 2, 4, v370);
                (*(void (**)(CA::OGL::Context *, uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)v164 + 1000))(v164, 1, 4, 1, &CA::OGL::BlurState::downsample_box_4(void)::weight);
                *((_QWORD *)v164 + 16) = 0;
                *((_QWORD *)v164 + 12) = (char *)v164 + 818;
                *(_OWORD *)((char *)v164 + 104) = xmmword_18474E060;
                *(_QWORD *)&v347[0] = 0;
                CA::OGL::PingPongState::render_pass((uint64_t)&v362, v169, v168, 0, (uint64_t *)v347, 4.0, 4.0, 0.0, 0.0);
                CA::OGL::Context::array_flush((uint64_t)v164);
              }
              else
              {
                v173 = 0;
                *(_BYTE *)(*((_QWORD *)v164 + 2) + 16) = 3;
                *(_BYTE *)(*((_QWORD *)v164 + 2) + 480) = 12;
                *((_QWORD *)v164 + 16) = 0;
                v174 = (char *)v164 + 818;
                *((_QWORD *)v164 + 12) = (char *)v164 + 818;
                *(_OWORD *)((char *)v164 + 104) = xmmword_18474E060;
                do
                {
                  if (*((_DWORD *)v164 + 23))
                    v175 = 6;
                  else
                    v175 = 4;
                  if ((unint64_t)(*((_QWORD *)v164 + 16) + 4) > *((_QWORD *)v164 + 17)
                    || (v176 = *((_QWORD *)v164 + 14)) != 0 && *((_QWORD *)v164 + 13) + v175 > v176)
                  {
                    *((_WORD *)v164 + 408) |= 0x20u;
                    CA::OGL::Context::array_flush((uint64_t)v164);
                    *((_QWORD *)v164 + 16) = 0;
                    *((_QWORD *)v164 + 12) = v174;
                    *(_OWORD *)((char *)v164 + 104) = xmmword_18474E060;
                  }
                  *(_QWORD *)&v347[0] = 0x3400340034003400;
                  CA::OGL::PingPongState::render_pass((uint64_t)&v362, v169, v168, 1, (uint64_t *)v347, 4.0, 4.0, *(float *)((char *)&CA::OGL::BlurState::downsample_box_4(void)::offset + v173), *(float *)((char *)&CA::OGL::BlurState::downsample_box_4(void)::offset + v173 + 4));
                  if (!v173)
                  {
                    CA::OGL::Context::array_flush((uint64_t)v164);
                    *(_BYTE *)(*((_QWORD *)v164 + 2) + 481) |= 1u;
                    *((_QWORD *)v164 + 16) = 0;
                    *((_QWORD *)v164 + 12) = v174;
                    *(_OWORD *)((char *)v164 + 104) = xmmword_18474E060;
                  }
                  v173 += 8;
                }
                while (v173 != 32);
                CA::OGL::Context::array_flush((uint64_t)v164);
                *(_BYTE *)(*((_QWORD *)v164 + 2) + 481) &= ~1u;
                a3 = v336;
                v122 = &v363;
              }
              v177 = (uint64_t *)&v368 + (v365 & 1) + 1;
              if ((v365 & 0x8000u) != 0)
                v177 = &v363;
              CA::OGL::Context::unbind_surface(v362, *v177, 0);
              *(_BYTE *)(*((_QWORD *)v164 + 2) + 16) = 0;
              CA::OGL::Context::pop_surface(v362);
              LOWORD(v365) = v365 + 1;
            }
          }
          HIDWORD(v163) = 1068498944;
          v123 = v123 * 0.0625 + -0.47265625;
          v124 = v124 * 0.0625 + -0.47265625;
        }
        while (v123 > v161 && v124 > v161);
      }
      v136.n128_f64[0] = v327;
      v179 = v136.n128_f64[0] * v136.n128_f64[0];
      if (v123 <= v136.n128_f64[0] * v136.n128_f64[0] || v124 <= v179)
      {
        v121 = (_DWORD *)v337;
        v119 = v119;
      }
      else
      {
        v121 = (_DWORD *)v337;
        v119 = v119;
        do
        {
          v136.n128_u32[0] = 0.5;
          CA::OGL::PingPongState::scale_and_dilate((CA::OGL::PingPongState *)&v362, v136.n128_f64[0], 0.5, 0, 0);
          if ((CA::OGL::BlurState::tile_downsample((float32x2_t *)&v362, 2) & 1) == 0)
            CA::OGL::BlurState::downsample_box_2((float32x2_t *)&v362, 2.0, 2.0);
          v123 = v123 * 0.25 + -0.765625;
          v124 = v124 * 0.25 + -0.765625;
        }
        while (v123 > v179 && v124 > v179);
      }
      v182 = v124 > v179;
      for (i = v123 > v179; v123 > v179 || v124 > v179; i = v123 > v179)
      {
        if (i)
        {
          v136.n128_u32[0] = 0.5;
          CA::OGL::PingPongState::scale_and_dilate((CA::OGL::PingPongState *)&v362, v136.n128_f64[0], 1.0, 0, 0);
          CA::OGL::BlurState::downsample_box_2((float32x2_t *)&v362, 2.0, 1.0);
          v123 = v123 * 0.25 + -0.765625;
        }
        if (v182)
        {
          v136.n128_u32[0] = 1.0;
          CA::OGL::PingPongState::scale_and_dilate((CA::OGL::PingPongState *)&v362, v136.n128_f64[0], 0.5, 0, 0);
          CA::OGL::BlurState::downsample_box_2((float32x2_t *)&v362, 1.0, 2.0);
          v124 = v124 * 0.25 + -0.765625;
        }
        v182 = v124 > v179;
      }
    }
    if (v123 <= v124)
      v186 = v124;
    else
      v186 = v123;
    v136.n128_u32[0] = v368;
    v187 = 0;
    if (*(float *)&v368 == *((float *)&v368 + 1))
    {
      v188 = *(float *)&v368 != 1.0 && v121 == 0;
      v189 = !v188;
      if (v16 && v189)
        v187 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)a1 + 1080))(a1, v136) ^ 1;
    }
    if (v186 <= 0.6 && (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 992))(a1, 41))
    {
      LODWORD(v190) = 1.0;
      CA::OGL::PingPongState::scale_and_dilate((CA::OGL::PingPongState *)&v362, v190, 1.0, 1, 1);
      if (v187)
      {
        CA::OGL::Context::set_gstate(a1, **(_QWORD **)(a1 + 232));
        *(_QWORD *)(a1 + 16) = __dst.i64[0];
        __dst.i64[0] = 0;
        v351[0] = 0;
        v371.i64[0] = 0;
        memset(v370, 0, sizeof(v370));
        CA::OGL::copy_gstate((uint64_t)v370, *(_QWORD *)(a1 + 232));
        LODWORD(v191) = v368;
        v370[0].i64[0] = CA::OGL::Context::set_gstate(a1, (uint64_t)v370);
        v197 = v123;
        v198 = v124;
        CA::OGL::BlurState::single_pass_blur((float32x2_t *)&v362, v197, v198, 1);
        CA::OGL::BlurState::in_place_color_matrix(&v362, *(const CA::ColorMatrix **)(a3 + 16), 1);
        CA::OGL::Context::set_gstate(a1, **(_QWORD **)(a1 + 232));
        if (v351[0])
          CA::Shape::unref(v351[0]);
        v187 = 1;
      }
      else
      {
        v279 = v123;
        v280 = v124;
        CA::OGL::BlurState::single_pass_blur((float32x2_t *)&v362, v279, v280, 0);
      }
    }
    else
    {
      if ((v187 & 1) != 0
        || ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 184))(a1, 38)
          ? (v200 = DWORD2(v369) == 1)
          : (v200 = 1),
            v200 || (BYTE12(v369) & 2) != 0))
      {
        v218 = vcvtpd_s64_f64(v123 / (v328 * v328));
        memset(v350, 0, sizeof(v350));
        v354 = 0;
        v352 = 0u;
        v353 = 0u;
        *(_OWORD *)v351 = 0u;
        memset(v349, 0, sizeof(v349));
        v348 = 0;
        memset(v347, 0, sizeof(v347));
        v219 = v218 & ~(v218 >> 31);
        v220 = v123 / (double)(int)v219;
        v341 = ((v119 - 8) & 0xFFFFFFFC) + 11;
        v222 = (v119 - 8) >> 1;
        v223 = (v222 & 0x7FFFFFFE) + 5;
        v224 = -2;
        v225 = 8;
        while (*(float *)((char *)v350 + v225) != 0.0)
        {
          v224 += 2;
          v225 += 4;
          if ((v222 & 0x7FFFFFFE) == v224)
          {
            v226 = (CA::OGL::_anonymous_namespace_ *)v119;
            v332 = ((v119 - 8) & 0xFFFFFFFC) + 11;
            v227 = (v222 & 0x7FFFFFFE) + 5;
            goto LABEL_315;
          }
        }
        v226 = (CA::OGL::_anonymous_namespace_ *)v119;
        v227 = v224 + 5;
        v332 = v225 - 1;
LABEL_315:
        v228 = vcvtpd_s64_f64(v124 / (v328 * v328));
        v229 = v228 & ~(v228 >> 31);
        v230 = v124 / (double)(int)v229;
        v232 = -2;
        v233 = 8;
        while (*(float *)((char *)v349 + v233) != 0.0)
        {
          v232 += 2;
          v233 += 4;
          if ((v222 & 0x7FFFFFFE) == v232)
            goto LABEL_320;
        }
        v223 = v232 + 5;
        v341 = v233 - 1;
LABEL_320:
        v234 = v229 >= v219;
        v235 = v228 > 0;
        if (v228 <= 0)
          v234 = 0;
        v187 &= v234;
        v236 = v218 > 0;
        if (v218 > 0 || v228 >= 1)
        {
          v237 = 1;
          do
          {
            v238 = v237;
            v240 = (BYTE12(v369) & 1) == 0 || DWORD2(v369) == 1;
            if (v236 && v240)
              v241 = v227;
            else
              v241 = 1;
            if (v235 && v240)
              v242 = v223;
            else
              v242 = 1;
            LODWORD(v231) = 1.0;
            CA::OGL::PingPongState::scale_and_dilate((CA::OGL::PingPongState *)&v362, v231, 1.0, v241, v242);
            if (v236)
              CA::OGL::BlurState::narrow_blur((float32x2_t *)&v362, v332, (const float *)v351, (const float *)v350, 0);
            if (v235)
            {
              if (v229 == v238)
                v243 = v187;
              else
                v243 = 0;
              if (v243 == 1)
              {
                CA::OGL::Context::set_gstate(a1, **(_QWORD **)(a1 + 232));
                *(_QWORD *)(a1 + 16) = __dst.i64[0];
                __dst.i64[0] = 0;
                v344 = 0;
                v371.i64[0] = 0;
                v370[3] = 0u;
                v370[2] = 0u;
                v370[1] = 0u;
                v370[0] = 0u;
                v244 = *(_QWORD *)(a1 + 232);
                *(float32x4_t *)((char *)v370 + 8) = *(float32x4_t *)(v244 + 8);
                v245 = *(_QWORD *)(v244 + 32);
                v370[1].i64[1] = *(_QWORD *)(v244 + 24);
                v370[2].i64[0] = v245;
                *(float32x4_t *)((char *)&v370[2] + 8) = *(float32x4_t *)(v244 + 40);
                v370[3].i64[1] = *(_QWORD *)(v244 + 56);
                v246 = *(unsigned __int8 *)(v244 + 68);
                v371.i16[2] = v246;
                v371.i32[0] = *(_DWORD *)(v244 + 64);
                v371.i16[2] = *(_WORD *)(v244 + 68) & 0x100 | v246;
                v371.i16[2] |= *(_WORD *)(v244 + 68) & 0x400;
                v370[0].i64[0] = CA::OGL::Context::set_gstate(a1, (uint64_t)v370);
                CA::OGL::BlurState::narrow_blur((float32x2_t *)&v362, v341, (const float *)v347, (const float *)v349, 1);
                CA::OGL::BlurState::in_place_color_matrix(&v362, *(const CA::ColorMatrix **)(v336 + 16), 1);
                CA::OGL::Context::set_gstate(a1, **(_QWORD **)(a1 + 232));
                if (v344)
                  CA::Shape::unref(v344);
              }
              else
              {
                CA::OGL::BlurState::narrow_blur((float32x2_t *)&v362, v341, (const float *)v347, (const float *)v349, 0);
              }
            }
            v235 = v238 < v229;
            v237 = v238 + 1;
            v236 = v238 < v219;
          }
          while (v238 < v219 || v238 < v229);
        }
      }
      else
      {
        LODWORD(v347[0]) = 0;
        v201 = vcvtpd_s64_f64(v123 / (v328 * v328));
        LODWORD(v350[0]) = 0;
        v202 = v201 & ~(v201 >> 31);
        v203 = v123 / (double)(int)v202;
        v204 = vcvtpd_s64_f64(v124 / (v328 * v328));
        v205 = v204 & ~(v204 >> 31);
        v206 = v124 / (double)(int)v205;
        v209 = v204 > 0;
        v86 = v201 <= 0;
        v210 = v201 > 0;
        if (!v86 || v204 >= 1)
        {
          v211 = LODWORD(v347[0]);
          v212 = 1;
          v213 = LODWORD(v350[0]);
          do
          {
            v214 = v212;
            v215 = (BYTE12(v369) & 1) == 0;
            if (v210 && v215)
              v216 = v211;
            else
              v216 = 1;
            if (v209 && v215)
              v217 = v213;
            else
              v217 = 1;
            LODWORD(v208) = 1.0;
            CA::OGL::PingPongState::scale_and_dilate((CA::OGL::PingPongState *)&v362, v208, 1.0, v216, v217);
            if (v210)
              CA::OGL::BlurState::tile_simd_blur((float32x2_t *)&v362, v211, v370[0].f32, 1);
            if (v209)
              CA::OGL::BlurState::tile_simd_blur((float32x2_t *)&v362, v213, (const float *)v351, 0);
            v209 = v214 < v205;
            v212 = v214 + 1;
            v210 = v214 < v202;
          }
          while (v214 < v202 || v214 < v205);
        }
        v187 = 0;
      }
      v16 = v330;
      a3 = v336;
      v121 = (_DWORD *)v337;
      v122 = &v363;
    }
    if ((*(_BYTE *)(a3 + 48) & 8) != 0)
    {
      (*(void (**)(uint64_t, const CA::Bounds *, uint64_t))(*(_QWORD *)a1 + 688))(a1, v331, v333);
      CA::OGL::Context::release_surface(a1, v333);
    }
    if (v329)
      *(_BYTE *)(a1 + 64) = 1;
    if (v187)
    {
      if (v121)
        *v121 = v368;
LABEL_418:
      if (__dst.i64[0])
        __assert_rtn("~ContextState", "ogl-context.h", 551, "!next && \"Imbalanced ContextState push/pop\"");
LABEL_419:
      CA::OGL::PingPongState::~PingPongState((CA::OGL::PingPongState *)&v362);
      return;
    }
    v252 = CA::OGL::BlurState::in_place_color_matrix(&v362, *(const CA::ColorMatrix **)(a3 + 16), 0);
    CA::OGL::Context::set_gstate(a1, **(_QWORD **)(a1 + 232));
    *(_QWORD *)(a1 + 16) = __dst.i64[0];
    __dst.i64[0] = 0;
    if (v252)
      v253 = 0;
    else
      v253 = *(float32x4_t **)(a3 + 16);
    v342 = *(_BYTE *)(a3 + 48);
    v254 = v362;
    v255 = BYTE12(v369);
    v256 = (__int16)v365;
    if ((BYTE12(v369) & 4) != 0 && ((__int16)v365 & 0x80000000) == 0)
    {
      *(_WORD *)(*((_QWORD *)&v368 + (v365 & 1) + 1) + 75) |= 0x200u;
      v255 = BYTE12(v369);
    }
    if (v256 >= 0)
      v122 = (uint64_t *)&v368 + (v256 & 1) + 1;
    v257 = *v122;
    v258 = *(_DWORD *)(*v122 + 32);
    v259 = *(_DWORD *)(*v122 + 36);
    if ((v255 & 2) != 0)
    {
      *v122 = (*(uint64_t (**)(CA::OGL::Context *, uint64_t, _QWORD))(*(_QWORD *)v254 + 680))(v254, *v122, 0);
      CA::OGL::Context::release_surface((uint64_t)v362, v257);
      v257 = *v122;
      v260 = v362;
    }
    else
    {
      v260 = v254;
    }
    CA::OGL::Context::bind_surface((uint64_t)v260, v257, 0, 1u, 1, 0.0);
    if ((v342 & 0x20) != 0)
      CA::OGL::Context::bind_surface((uint64_t)v362, v363, 1u, 0, 0, 0.0);
    v264 = v366;
    v266 = *((float *)&v366 + 3);
    v265 = *((float *)&v366 + 2);
    v267 = *((float *)&v368 + 1);
    v268 = *(float *)&v368;
    v270 = *(float *)(v336 + 8);
    v269 = *(float *)(v336 + 12);
    v271 = *((_QWORD *)v254 + 2);
    v272 = *(unsigned __int8 *)(v271 + 16);
    v273 = a5 / a6;
    if (v253)
    {
      if (v272 == 3)
      {
        _Q0.i16[0] = *(_WORD *)(v271 + 8);
        v339 = *((float *)&v368 + 1);
        _H1 = *(_WORD *)(v271 + 14);
        __asm { FCVT            S1, H1 }
        *(float *)v262.i32 = 1.0 / _S1;
        if (_S1 <= 0.0)
          *(float *)v262.i32 = 0.0;
        __asm { FCVT            S0, H0 }
        *(float *)_Q0.i32 = *(float *)v262.i32 * *(float *)_Q0.i32;
        v263.i32[0] = *(_DWORD *)(v271 + 10);
        v274 = *((float *)&v366 + 2);
        v370[0] = *v253;
        v370[1] = v253[1];
        v370[2] = v253[2];
        v370[3] = v253[3];
        v371 = v253[4];
        *(float32x2_t *)v262.i8 = vmul_n_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(v263), *(float *)v262.i32);
        v283 = vmulq_n_f32(v370[0], *(float *)_Q0.i32);
        v284 = vzip1q_s32(_Q0, v262);
        v275 = *((float *)&v366 + 3);
        v370[0] = v283;
        v370[1] = vmulq_f32(v370[1], (float32x4_t)vzip1q_s32(v284, vdupq_lane_s32(*(int32x2_t *)v284.i8, 1)));
        v285 = vmulq_f32(v370[2], (float32x4_t)vzip1q_s32(v262, v262));
        *(int32x2_t *)v262.i8 = vdup_lane_s32(*(int32x2_t *)v262.i8, 1);
        v286 = v262;
        *(float *)&v286.i32[1] = _S1;
        v287 = (float32x4_t)vzip1q_s32(v286, v286);
        v287.i32[2] = v262.i32[0];
        v370[2] = v285;
        v370[3] = vmulq_f32(v370[3], v287);
        v371 = vmulq_n_f32(v371, _S1);
        v276 = v269;
        CA::OGL::color_matrix_function(v254, (CA::OGL::Context *)v370, (const CA::ColorMatrix *)(DWORD2(v369) == 2), 0, 1);
        v267 = v339;
      }
      else
      {
        if (v272 != 1)
          goto LABEL_385;
        v275 = *((float *)&v366 + 3);
        v274 = *((float *)&v366 + 2);
        v276 = *(float *)(v336 + 12);
        v277 = *((float *)&v368 + 1);
        v338 = *(float *)&v368;
        CA::OGL::color_matrix_function(v254, (CA::OGL::Context *)v253, (const CA::ColorMatrix *)(DWORD2(v369) == 2), 0, 1);
        v267 = v277;
        v268 = v338;
      }
      v269 = v276;
      v266 = v275;
      v265 = v274;
    }
    else
    {
      if (DWORD2(v369) != 2)
        goto LABEL_385;
      if (v272 == 3)
      {
        v278 = 4;
      }
      else
      {
        if (v272 != 1)
          goto LABEL_385;
        v278 = 2;
      }
      *(_BYTE *)(v271 + 16) = v278;
    }
LABEL_385:
    v288 = (float)v258;
    v289 = (float)v259;
    v290 = v273 / v268;
    v291 = (_DWORD *)*((_QWORD *)v254 + 31);
    v292 = v273 / v267;
    if (v291)
    {
      v293 = v291[8];
      v294 = v291[9];
      v296 = v291[10];
      v295 = v291[11];
    }
    else
    {
      v295 = 0;
      v296 = 0;
      v294 = 0;
      v293 = 0;
    }
    v297 = *(float *)&v264 - v288;
    v298 = *((float *)&v264 + 1) - v289;
    v299 = v265 - v288;
    v300 = v266 - v289;
    v301 = v270 + (float)(*(float *)&v264 * v290);
    v302 = v269 + (float)(*((float *)&v264 + 1) * v292);
    v303 = v270 + (float)(v265 * v290);
    v304 = v269 + (float)(v266 * v292);
    _ZF = v291 == 0;
    v334 = *((unsigned __int8 *)v254 + 64);
    *((_BYTE *)v254 + 64) = 1;
    v347[0] = 0uLL;
    v305 = *(CA::Shape **)(*((_QWORD *)v254 + 29) + 8);
    v351[1] = 0;
    *(_QWORD *)&v352 = 0;
    v351[0] = v305;
    v307 = !_ZF && v16 != 0;
    v308 = v293 + v296;
    v309 = v294 + v295;
    while (CA::ShapeIterator::iterate((uint64_t *)v351, (int *)v347))
    {
      v310 = v347[0];
      if ((v307 & 1) != 0)
      {
        if (LODWORD(v347[0]) == v293)
        {
          LODWORD(v347[0]) = v293 - 1;
          ++DWORD2(v347[0]);
          v310 = v293 - 1;
        }
        v311 = DWORD1(v347[0]);
        if (DWORD1(v347[0]) == v294)
        {
          DWORD1(v347[0]) = v294 - 1;
          ++HIDWORD(v347[0]);
          v311 = v294 - 1;
        }
        v312 = DWORD2(v347[0]);
        if (DWORD2(v347[0]) + v310 == v308)
          v312 = ++DWORD2(v347[0]);
        v313 = HIDWORD(v347[0]);
        if (HIDWORD(v347[0]) + v311 == v309)
          v313 = ++HIDWORD(v347[0]);
      }
      else
      {
        v311 = DWORD1(v347[0]);
        v312 = DWORD2(v347[0]);
        v313 = HIDWORD(v347[0]);
      }
      *((_QWORD *)v254 + 16) = 0;
      *((_QWORD *)v254 + 12) = (char *)v254 + 818;
      *(_OWORD *)((char *)v254 + 104) = xmmword_18474E060;
      *((_DWORD *)v254 + 8) = v310;
      *((_DWORD *)v254 + 9) = v311;
      *((_DWORD *)v254 + 10) = v312;
      *((_DWORD *)v254 + 11) = v313;
      CA::OGL::Context::array_rect(v254, v301, v302, v303, v304);
      v314 = *(_QWORD *)(*((_QWORD *)v254 + 2) + 8);
      v315 = *((_QWORD *)v254 + 15) + 48 * *((_QWORD *)v254 + 16);
      *(_QWORD *)(v315 - 160) = v314;
      *(_QWORD *)(v315 - 112) = v314;
      *(_QWORD *)(v315 - 64) = v314;
      *(_QWORD *)(v315 - 16) = v314;
      v316 = *((_QWORD *)v254 + 15) + 48 * *((_QWORD *)v254 + 16);
      *(float *)(v316 - 176) = v297;
      *(float *)(v316 - 172) = v298;
      *(float *)(v316 - 128) = v299;
      *(float *)(v316 - 124) = v298;
      *(float *)(v316 - 80) = v299;
      *(float *)(v316 - 76) = v300;
      *(float *)(v316 - 32) = v297;
      *(float *)(v316 - 28) = v300;
      if ((v342 & 0x20) != 0)
      {
        *(_BYTE *)(*((_QWORD *)v254 + 2) + 16) = 14;
        v317 = (float)*(int *)(v363 + 32);
        v318 = v301 - v317;
        v319 = (float)*(int *)(v363 + 36);
        v320 = v302 - v319;
        v321 = v303 - v317;
        v322 = v304 - v319;
        v323 = *((_QWORD *)v254 + 15) + 48 * *((_QWORD *)v254 + 16);
        *(float *)(v323 - 168) = v318;
        *(float *)(v323 - 164) = v320;
        *(float *)(v323 - 120) = v321;
        *(float *)(v323 - 116) = v320;
        *(float *)(v323 - 72) = v321;
        *(float *)(v323 - 68) = v322;
        *(float *)(v323 - 24) = v318;
        *(float *)(v323 - 20) = v322;
      }
      CA::OGL::Context::array_flush((uint64_t)v254);
    }
    if (!v334)
      *((_BYTE *)v254 + 64) = 0;
    v324 = (uint64_t *)&v368 + (v365 & 1) + 1;
    if ((v365 & 0x8000u) != 0)
      v324 = &v363;
    CA::OGL::Context::unbind_surface(v362, *v324, 0);
    if ((v342 & 0x20) != 0)
      CA::OGL::Context::unbind_surface(v362, v363, 1);
    v325 = *((_QWORD *)v254 + 2);
    if (*(_BYTE *)(v325 + 16) == 12)
    {
      *(double *)v370[0].i64 = v301;
      *(double *)&v370[0].i64[1] = v302;
      v370[1] = (float32x4_t)xmmword_18474DF50;
      *(double *)v370[2].i64 = v303;
      *(double *)&v370[2].i64[1] = v302;
      v370[3] = (float32x4_t)xmmword_18474DF50;
      *(double *)v371.i64 = v303;
      *(double *)&v371.i64[1] = v304;
      v372 = xmmword_18474DF50;
      v373 = v301;
      v374 = v304;
      v375 = xmmword_18474DF50;
      *(_QWORD *)&v350[0] = *(_QWORD *)(v325 + 8);
      CA::OGL::emit_quad_surround((uint64_t)v254, (const double *)v370[0].i64, (uint64_t *)v350);
      v325 = *((_QWORD *)v254 + 2);
    }
    *(_BYTE *)(v325 + 16) = v272;
    goto LABEL_418;
  }
}

void CA::OGL::PingPongState::scale_and_dilate(CA::OGL::PingPongState *this, double a2, float32_t a3, signed int a4, signed int a5)
{
  float v6;
  float v7;
  CA::Shape *v8;
  uint64_t v9;

  *((float32x2_t *)this + 10) = vmul_f32(*(float32x2_t *)((char *)this + 80), (float32x2_t)__PAIR64__(LODWORD(a3), LODWORD(a2)));
  v6 = floorf(*((float *)this + 13) * a3);
  *((float *)this + 12) = floorf(*((float *)this + 12) * *(float *)&a2) - (float)a4;
  *((float *)this + 13) = v6 - (float)a5;
  v7 = ceilf(*((float *)this + 15) * a3) + (float)a5;
  *((float *)this + 14) = ceilf(*((float *)this + 14) * *(float *)&a2) + (float)a4;
  *((float *)this + 15) = v7;
  v8 = (CA::Shape *)*((_QWORD *)this + 5);
  if (v8)
  {
    v9 = CA::Shape::scale_and_dilate(v8, *(float32x2_t *)&a2, a3, a4, a5);
    CA::Shape::unref(*((CA::Shape **)this + 5));
    *((_QWORD *)this + 5) = v9;
  }
}

void CA::OGL::`anonymous namespace'::narrowBlurParameters(CA::OGL::_anonymous_namespace_ *this, float a2, int a3, float *a4, float *a5, float *a6)
{
  int v9;
  uint64_t v10;
  double v11;
  double v12;
  long double v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  _BOOL4 v22;
  _BOOL4 v24;
  _BOOL4 v26;
  double v27;
  double v28;
  double v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  double v57;
  double v58;
  uint64_t v59;

  v9 = (int)this;
  v10 = 0;
  v59 = *MEMORY[0x1E0C80C00];
  v57 = 0.0;
  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v11 = 0.0;
  v12 = 1.0 / a2;
  do
  {
    v13 = exp((double)((int)v10 - 13) * (double)((int)v10 - 13) * -0.5 * v12);
    *((long double *)&v51 + v10) = v13;
    v11 = v13 + v11;
    ++v10;
  }
  while (v10 != 13);
  v14 = 0;
  v58 = 1.0;
  do
  {
    *(__int128 *)((char *)&v51 + v14) = (__int128)vmulq_n_f64(*(float64x2_t *)((char *)&v51 + v14), 1.0 / (v11 * 2.0 + 1.0));
    v14 += 16;
  }
  while (v14 != 112);
  v15 = *(double *)&v56 + *((double *)&v56 + 1);
  v16 = *(double *)&v55 + *((double *)&v55 + 1);
  v17 = *(double *)&v54 + *((double *)&v54 + 1);
  v18 = *(double *)&v53 + *((double *)&v53 + 1);
  v19 = *(double *)&v52 + *((double *)&v52 + 1);
  v20 = *(double *)&v51 + *((double *)&v51 + 1);
  v22 = *(double *)&v53 + *((double *)&v53 + 1) < 0.002 || v9 < 19;
  v24 = v19 < 0.002 || v9 < 23;
  v26 = v20 < 0.002 || v9 < 27;
  if (v15 >= 0.002)
    v27 = *(double *)&v56 / (*(double *)&v56 + *((double *)&v56 + 1)) + 2.0;
  else
    v27 = 0.0;
  if (v15 < 0.002)
    v15 = 0.0;
  if (v16 >= 0.002)
    v28 = *(double *)&v55 / (*(double *)&v55 + *((double *)&v55 + 1)) + 4.0;
  else
    v28 = 0.0;
  if (v16 < 0.002)
    v16 = 0.0;
  if (v17 >= 0.002)
    v29 = *(double *)&v54 / (*(double *)&v54 + *((double *)&v54 + 1)) + 6.0;
  else
    v29 = 0.0;
  v30 = *(double *)&v53 / (*(double *)&v53 + *((double *)&v53 + 1)) + 8.0;
  v31 = *(double *)&v52 / (*(double *)&v52 + *((double *)&v52 + 1)) + 10.0;
  v32 = *(double *)&v51 / (*(double *)&v51 + *((double *)&v51 + 1)) + 12.0;
  if (v17 < 0.002)
    v17 = 0.0;
  if (v22)
  {
    v30 = 0.0;
    v18 = 0.0;
  }
  if (v24)
  {
    v31 = 0.0;
    v19 = 0.0;
  }
  if (v26)
    v32 = 0.0;
  v33 = v57 / (v57 + v58 * 0.5);
  v34 = v27;
  v35 = v28;
  v36 = v29;
  if (v26)
    v20 = 0.0;
  if (a3)
    v37 = v57 / (v57 + v58 * 0.5);
  else
    v37 = 0.0;
  if (a3)
  {
    v33 = 0.0;
    v38 = v34;
  }
  else
  {
    v38 = 0.0;
  }
  if (a3)
  {
    v34 = 0.0;
    v39 = v35;
  }
  else
  {
    v39 = 0.0;
  }
  if (a3)
  {
    v35 = 0.0;
    v40 = v36;
  }
  else
  {
    v40 = 0.0;
  }
  if (a3)
  {
    v36 = 0.0;
    v41 = v30;
  }
  else
  {
    v41 = 0.0;
  }
  if (a3)
  {
    v30 = 0.0;
    v42 = v31;
  }
  else
  {
    v42 = 0.0;
  }
  if (a3)
  {
    v31 = 0.0;
    v43 = v32;
  }
  else
  {
    v43 = 0.0;
  }
  if (a3)
    v32 = 0.0;
  *a4 = v37;
  a4[1] = v33;
  a4[2] = v38;
  a4[3] = v34;
  a4[4] = v39;
  a4[5] = v35;
  a4[6] = v40;
  a4[7] = v36;
  a4[8] = v41;
  a4[9] = v30;
  a4[10] = v42;
  a4[11] = v31;
  a4[12] = v43;
  a4[13] = v32;
  v44 = 0.5 - (v15 + v16 + v19 + v17 + v18 + v20);
  v45 = v15;
  *a5 = v44;
  a5[1] = v45;
  v46 = v16;
  v47 = v17;
  a5[2] = v46;
  a5[3] = v47;
  v48 = v18;
  v49 = v19;
  a5[4] = v48;
  a5[5] = v49;
  v50 = v20;
  a5[6] = v50;
  a5[7] = 0.0;
}

void CA::OGL::BlurState::narrow_blur(float32x2_t *this, int a2, const float *a3, const float *a4, int a5)
{
  int v5;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  char v13;
  __int16 v14;
  int v15;
  uint64_t *v16;
  float32x2_t *v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float32x2_t v21;
  unint64_t v22;
  float v23;
  int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  int *v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v41;
  const float *v42;
  __int16 v44;
  int v45;
  uint64_t *v46;
  char v47;
  char v48;
  int v49;
  char v50;
  char *v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[3];
  int v59;
  _OWORD v60[3];
  uint64_t v61;
  int v62[2];
  uint64_t v63;

  v5 = a5;
  v63 = *MEMORY[0x1E0C80C00];
  v10 = (_QWORD *)*this;
  if ((a5 & 1) != 0
    || ((this[13].i8[4] & 1) != 0 ? (v11 = 16) : (v11 = 32), CA::OGL::PingPongState::attach_dest(this, 1, v11)))
  {
    if (a2 <= 26)
    {
      if (a2 <= 22)
      {
        if (a2 <= 18)
        {
          if (a2 <= 14)
          {
            if (a2 <= 10)
              v12 = 32;
            else
              v12 = 33;
          }
          else
          {
            v12 = 34;
          }
        }
        else
        {
          v12 = 35;
        }
      }
      else
      {
        v12 = 36;
      }
    }
    else
    {
      v12 = 37;
    }
    v13 = *(_BYTE *)(v10[2] + 16);
    v14 = this[4].i16[0];
    v15 = v14;
    v16 = (uint64_t *)&this[1];
    v17 = &this[(v14 & 1) + 11];
    if (v15 < 0)
      v17 = this + 1;
    v18 = (uint64_t)*v17;
    v52 = *(_DWORD *)(*(_QWORD *)v17 + 36);
    v53 = *(_DWORD *)(*(_QWORD *)v17 + 32);
    v62[0] = v53;
    v62[1] = v52;
    CA::OGL::Context::bind_surface((uint64_t)*this, v18, 0, 1u, 1, 0.0);
    if ((v5 & 1) == 0)
    {
      v19 = 32.0;
      if ((this[13].i8[4] & 1) != 0)
        v19 = 16.0;
      CA::OGL::BlurState::process_edges((CA::OGL::BlurState *)this, v19, 1.0, 1.0, v62);
    }
    v20 = 0;
    *(_BYTE *)(v10[2] + 16) = v12;
    v21 = *(float32x2_t *)(v10[2] + 96);
    v61 = 0;
    memset(v60, 0, sizeof(v60));
    v22 = -2;
    do
    {
      *(float32x2_t *)((char *)v60 + v20 * 4) = vmul_f32(*(float32x2_t *)&a3[v20], v21);
      v22 += 2;
      v20 += 2;
    }
    while (v22 < 0xC);
    if (((*(uint64_t (**)(_QWORD *))(*v10 + 984))(v10) & 1) != 0)
    {
      v23 = 1.0;
      if (this[13].i32[0] == 2)
      {
        if ((v5 & 1) == 0)
        {
          v23 = 1.0;
          if ((this[13].i8[4] & 2) == 0)
            v23 = 0.0;
        }
      }
      else
      {
        v23 = 0.0;
      }
      *(float *)v58 = v23;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t, _OWORD *))(*v10 + 1000))(v10, 0, 2, 7, v60);
      (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, const float *))(*v10 + 1000))(v10, 1, 4, 2, a4);
      (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, _QWORD *))(*v10 + 1000))(v10, 2, 1, 1, v58);
      if (v5)
      {
        v24 = (this[13].u8[4] >> 1) & 1;
        v57 = 0;
        CA::OGL::PingPongState::render_pass_final_dest(*this, v53, v52, v24, &v57);
      }
      else
      {
        v10[16] = 0;
        v10[12] = (char *)v10 + 818;
        *(_OWORD *)(v10 + 13) = xmmword_18474E060;
        v56 = 0;
        CA::OGL::PingPongState::render_pass((uint64_t)this, v53, v52, 0, &v56, 1.0, 1.0, 0.0, 0.0);
        CA::OGL::Context::array_flush((uint64_t)v10);
      }
    }
    else
    {
      v48 = v13;
      v49 = v5;
      v25 = 0;
      *(_BYTE *)(v10[2] + 16) = 3;
      *(_BYTE *)(v10[2] + 480) = 12;
      v10[16] = 0;
      v51 = (char *)v10 + 818;
      v10[12] = (char *)v10 + 818;
      *(_OWORD *)(v10 + 13) = xmmword_18474E060;
      memset(v58, 0, sizeof(v58));
      v59 = 0;
      v26 = 255;
      do
      {
        v27 = (float)((float)(a4[v25] * 255.0) + 0.5);
        *(_DWORD *)((char *)v58 + v25 * 4) = v27;
        v26 -= 2 * v27;
        ++v25;
      }
      while (v25 != 7);
      v28 = 0;
      v29 = v26 & ~(v26 >> 31);
      LODWORD(v58[0]) += v29 >> 1;
      v50 = v29 & 1;
      v30 = a2 - 3;
      v31 = 1;
      v32 = (int *)v58;
      do
      {
        if (v28 <= v30)
        {
          v33 = 12;
          if (!*((_DWORD *)v10 + 23))
            v33 = 8;
          if ((unint64_t)(v10[16] + 8) > v10[17] || (v34 = v10[14]) != 0 && v10[13] + v33 > v34)
          {
            *((_WORD *)v10 + 408) |= 0x20u;
            CA::OGL::Context::array_flush((uint64_t)v10);
            v10[16] = 0;
            v10[12] = v51;
            *(_OWORD *)(v10 + 13) = xmmword_18474E060;
          }
          v35 = *v32;
          _S0 = (float)*v32 * 0.0039216;
          __asm { FCVT            H0, S0 }
          v41 = LOWORD(_S0);
          v55 = 0x1000100010001 * LOWORD(_S0);
          v42 = &a3[v28];
          CA::OGL::PingPongState::render_pass((uint64_t)this, v53, v52, 1, &v55, 1.0, 1.0, -*v42, -v42[1]);
          if ((v31 & 1) != 0)
          {
            CA::OGL::Context::array_flush((uint64_t)v10);
            *(_BYTE *)(v10[2] + 481) |= 1u;
            v10[16] = 0;
            v10[12] = v51;
            *(_OWORD *)(v10 + 13) = xmmword_18474E060;
            _S0 = (float)(v35 + v50) * 0.0039216;
            __asm { FCVT            H0, S0 }
            v41 = LOWORD(_S0);
          }
          v54 = (v41 << 32) | (v41 << 48) | (v41 << 16) | v41;
          CA::OGL::PingPongState::render_pass((uint64_t)this, v53, v52, 1, &v54, 1.0, 1.0, a3[v28], v42[1]);
          v31 = 0;
        }
        v28 += 2;
        ++v32;
      }
      while (v28 != 12);
      CA::OGL::Context::array_flush((uint64_t)v10);
      *(_BYTE *)(v10[2] + 481) &= ~1u;
      v13 = v48;
      v5 = v49;
      v16 = (uint64_t *)&this[1];
    }
    v44 = this[4].i16[0];
    v45 = v44;
    v46 = (uint64_t *)&this[(v44 & 1) + 11];
    if (v45 < 0)
      v46 = v16;
    CA::OGL::Context::unbind_surface(*this, *v46, 0);
    if (v5)
      v47 = v13;
    else
      v47 = 0;
    *(_BYTE *)(v10[2] + 16) = v47;
    if ((v5 & 1) == 0)
    {
      CA::OGL::Context::pop_surface(*(CA::OGL::Context **)this);
      ++this[4].i16[0];
    }
  }
}

void *CA::OGL::MetalContext::function_uniform(CA::OGL::MetalContext *this, unsigned int a2, uint64_t a3, uint64_t a4, const float *__src)
{
  if ((unint64_t)(a4 * a3) >= 0x15)
    __assert_rtn("function_uniform", "ogl-metal.mm", 5590, "total_elements <= kMaxFunctionUniformSize * 4");
  return memcpy((char *)this + 80 * a2 + 2208, __src, 4 * a4 * a3);
}

uint64_t CA::OGL::Context::bind_surface(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, float a6)
{
  _QWORD *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float32x2_t *v15;
  float32x2_t v16;
  uint64_t v23;
  float32x2_t *v24;
  float v25;

  if (a2 && (*(_BYTE *)(a2 + 72) & 1) != 0)
  {
    v10 = (_QWORD *)result;
    if (a4 == 11)
      v11 = 2;
    else
      v11 = a4;
    if (v11 == 10)
      v12 = 1;
    else
      v12 = v11;
    v13 = CA::OGL::state_image_texture_unit(*(_QWORD *)(result + 16), a3);
    result = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, float))(*v10 + 776))(v10, a2, 0, v13, v12, a5, a6);
    v14 = v10[2];
    v15 = (float32x2_t *)(v14 + 16 * a3);
    v16 = vcvt_f32_s32(*(int32x2_t *)(a2 + 24));
    __asm { FMOV            V0.2S, #1.0 }
    v15[40] = v16;
    v15[41] = vdiv_f32(_D0, v16);
    *(_BYTE *)(v14 + a3 + 17) = *(_BYTE *)(a2 + 73) & 0x3F;
    if ((*(_WORD *)(a2 + 75) & 0x10) != 0)
    {
      __asm { FMOV            V1.2S, #1.0 }
      _D0 = vdiv_f32(_D1, vcvt_f32_s32(*(int32x2_t *)(a2 + 24)));
    }
    v23 = v10[2];
    v24 = (float32x2_t *)(v23 + 16 * a3);
    v24[12] = _D0;
    v24[13] = 0;
    if ((*(_BYTE *)(a2 + 76) & 2) != 0)
    {
      *(_BYTE *)(v23 + 481) |= 2u;
      v23 = v10[2];
      *(_DWORD *)(v23 + 352) = 1065353216;
    }
    v25 = *(float *)(a2 + 64);
    if (v25 != 0.0 && v25 != 1.0)
    {
      *(float *)(v23 + 4 * a3 + 312) = 1.0 / v25;
      *(_BYTE *)(v23 + 305) |= 1 << a3;
    }
  }
  return result;
}

CA::OGL::MetalContext *CA::OGL::MetalContext::bind_surface_impl(CA::OGL::MetalContext *result, uint64_t a2, int a3, int a4, int a5, char a6, float a7)
{
  uint64_t v7;
  id *v8;
  uint64_t v9;
  id *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  char v22;

  v7 = a2 + 8 * a3;
  v9 = *(_QWORD *)(v7 + 96);
  v8 = (id *)(v7 + 96);
  if (v9)
  {
    v15 = (id *)result;
    v16 = a2 + 8 * a3;
    v18 = (uint64_t *)(v16 + 160);
    v17 = *(_QWORD *)(v16 + 160);
    if (!v17)
    {
      CA::OGL::MetalContext::new_image(result);
      *v18 = v19;
      *(_QWORD *)(*v18 + 64) = *v8;
      *(_WORD *)(*v18 + 123) = *(_WORD *)(*v18 + 123) & 0xFFBF | (*(_WORD *)(a2 + 232) >> 1) & 0x40;
      *(_WORD *)(*v18 + 123) = *(_WORD *)(*v18 + 123) & 0xFEFF | (*(_WORD *)(a2 + 232) >> 1) & 0x100;
      v17 = *v18;
      *(_BYTE *)(*v18 + 122) = 1;
    }
    result = (CA::OGL::MetalContext *)CA::OGL::MetalContext::update_texture_plane(v15, v17, a4, 0, *(_DWORD *)(v16 + 120), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28));
    if (a5 == 11)
      v20 = 2;
    else
      v20 = a5;
    if (v20 == 2)
    {
      if ((*(_BYTE *)(a2 + 68) & 0x40) != 0)
      {
        if ((*(_WORD *)(a2 + 232) & 0x100) != 0)
        {
          result = (CA::OGL::MetalContext *)CA::OGL::MetalContext::generate_mipmaps_for_texture(v15, *v18);
          *(_WORD *)(a2 + 232) &= ~0x100u;
          *(_WORD *)(*v18 + 123) |= 1u;
          *(_WORD *)(*v18 + 123) |= 0x10u;
        }
        LOBYTE(v20) = 2;
      }
      else
      {
        LOBYTE(v20) = 1;
      }
    }
    *(_DWORD *)(*v18 + 52) = *(_DWORD *)(*v18 + 52) & 0xFFF0FFFF | ((v20 & 0xF) << 16);
    *(_DWORD *)(*v18 + 52) = *(_DWORD *)(*v18 + 52) & 0xFF0FFFFF | ((a6 & 0xF) << 20);
    *(_WORD *)(*v18 + 123) |= 8u;
    v21 = *v18;
    *(float *)(*v18 + 48) = a7;
    if (*(_QWORD *)(a2 + 200) || *((_QWORD *)v15[31] + 25) == a2)
    {
      *(_WORD *)(v21 + 123) &= ~8u;
      v22 = *(_BYTE *)(a2 + 212);
      v21 = *v18;
    }
    else
    {
      v22 = -1;
    }
    *(_BYTE *)(v21 + 125) = v22;
  }
  return result;
}

_QWORD *CA::OGL::MetalContext::update_texture_plane(_QWORD *result, unint64_t a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v12;
  unint64_t v13;
  id *v14;
  id v15;
  uint64_t v16;

  v7 = a4;
  v8 = result[2];
  *(_WORD *)(v8 + 2 * (a4 + a3) + 144) = *(_DWORD *)(a2 + 52);
  *(_QWORD *)(v8 + 8 * (a4 + a3) + 176) = a4 | a2;
  v9 = *(unsigned __int8 *)(a2 + 122);
  if (v9 <= a4)
  {
    *(_BYTE *)(a2 + 122) = v9 + 1;
    v12 = a6;
    result = (id)objc_msgSend(MEMORY[0x1E0CC6BB0], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", a5, a6, a7, *(_WORD *)(a2 + 123) & 1);
    v13 = a2 + 8 * v7;
    *(_QWORD *)(v13 + 88) = result;
    v14 = (id *)(v13 + 88);
    if ((*(_WORD *)(a2 + 123) & 0x400) != 0)
    {
      objc_msgSend(result, "setTextureType:", 7);
      v15 = *v14;
      if (a7 == 1)
      {
        v16 = 1;
        objc_msgSend(v15, "setHeight:", 1);
      }
      else
      {
        objc_msgSend(v15, "setHeight:", v12);
        v16 = *(unsigned __int16 *)(a2 + 120);
      }
      return (_QWORD *)objc_msgSend(*v14, "setDepth:", v16);
    }
  }
  return result;
}

BOOL CA::OGL::MetalContext::function_supported(CA::OGL::MetalContext *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  int v6;
  int v7;
  _BOOL8 result;
  BOOL v10;

  v1 = *((_QWORD *)this + 2);
  v2 = *(unsigned __int8 *)(v1 + 16);
  if ((CA::OGL::MetalContext::texture_function_info[8 * v2 - v2] & 0x3F) == 0)
    return 1;
  v3 = CA::OGL::tex_image_count[v2];
  if (!v3)
    return 1;
  v4 = (unsigned __int8 *)(v1 + 17);
  v5 = v3 - 1;
  do
  {
    v7 = *v4++;
    v6 = v7;
    result = v7 == 0;
    v10 = v5-- != 0;
  }
  while (!v6 && v10);
  return result;
}

uint64_t CA::OGL::BlurState::process_edges(CA::OGL::BlurState *this, float a2, float a3, float a4, int *a5)
{
  uint64_t v10;
  uint64_t result;
  float v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16[4];

  v16[3] = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)this + 16) + 16) = 1;
  v10 = *((_QWORD *)this + 5);
  if (v10)
  {
    v14 = 0;
    v15 = 0;
    v16[1] = 0;
    v16[2] = 0;
    v16[0] = v10;
    while (1)
    {
      result = CA::ShapeIterator::iterate(v16, (int *)&v14);
      if (!(_DWORD)result)
        break;
      v12 = (float)(int)v14;
      if (*((_DWORD *)this + 26) == 1)
        CA::OGL::PingPongState::replicate_edges(*(CA::OGL::PingPongState **)this, a2, v12, (float)SHIDWORD(v14), (float)(v15 + v14), (float)(HIDWORD(v15) + HIDWORD(v14)), -(float)((float)*a5 - (float)(v12 * a3)), -(float)((float)a5[1] - (float)((float)SHIDWORD(v14) * a4)), -(float)((float)*a5 - (float)((float)(v15 + v14) * a3)), -(float)((float)a5[1] - (float)((float)(HIDWORD(v15) + HIDWORD(v14)) * a4)));
      else
        CA::OGL::PingPongState::clear_edges(*(CA::OGL::PingPongState **)this, a2, v12, (float)SHIDWORD(v14), (float)(v15 + v14), (float)(HIDWORD(v15) + HIDWORD(v14)));
    }
  }
  else
  {
    v13 = *((float *)this + 12);
    if (*((_DWORD *)this + 26) == 1)
      return CA::OGL::PingPongState::replicate_edges(*(CA::OGL::PingPongState **)this, a2, v13, *((float *)this + 13), *((float *)this + 14), *((float *)this + 15), -(float)((float)*a5 - (float)(v13 * a3)), -(float)((float)a5[1] - (float)(*((float *)this + 13) * a4)), -(float)((float)*a5 - (float)(*((float *)this + 14) * a3)), -(float)((float)a5[1] - (float)(*((float *)this + 15) * a4)));
    else
      return CA::OGL::PingPongState::clear_edges(*(CA::OGL::PingPongState **)this, a2, v13, *((float *)this + 13), *((float *)this + 14), *((float *)this + 15));
  }
  return result;
}

uint64_t CA::OGL::PingPongState::render_pass(uint64_t a1, int a2, int a3, int a4, uint64_t *a5, float a6, float a7, float a8, float a9)
{
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  uint64_t result;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  float v33;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  unint64_t v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  float v55;
  float v56;
  float v57;
  uint64_t v58;
  float v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63[4];

  v63[3] = *MEMORY[0x1E0C80C00];
  v16 = *(_QWORD *)a1;
  v17 = *(_QWORD *)(a1 + 40);
  if (v17)
  {
    v61 = 0;
    v62 = 0;
    v63[1] = 0;
    v63[2] = 0;
    v63[0] = v17;
    v18 = a8 - (float)a2;
    v19 = a9 - (float)a3;
    while (1)
    {
      result = CA::ShapeIterator::iterate(v63, (int *)&v61);
      if (!(_DWORD)result)
        break;
      v22 = v61;
      v21 = HIDWORD(v61);
      v23 = v62;
      v24 = HIDWORD(v62);
      if (*(_DWORD *)(v16 + 92))
        v25 = 6;
      else
        v25 = 4;
      if ((unint64_t)(*(_QWORD *)(v16 + 128) + 4) > *(_QWORD *)(v16 + 136)
        || (v26 = *(_QWORD *)(v16 + 112)) != 0 && *(_QWORD *)(v16 + 104) + v25 > v26)
      {
        *(_WORD *)(v16 + 816) |= 0x20u;
        CA::OGL::Context::array_flush(v16);
        *(_QWORD *)(v16 + 128) = 0;
        *(_QWORD *)(v16 + 96) = v16 + 818;
        *(_OWORD *)(v16 + 104) = xmmword_18474E060;
      }
      CA::OGL::Context::array_rect((_QWORD *)v16, (float)v22, (float)v21, (float)(v23 + v22), (float)(v24 + v21));
      if (a4)
      {
        v27 = *a5;
        v28 = *(_QWORD *)(v16 + 120) + 48 * *(_QWORD *)(v16 + 128);
        *(_QWORD *)(v28 - 160) = *a5;
        *(_QWORD *)(v28 - 112) = v27;
        *(_QWORD *)(v28 - 64) = v27;
        *(_QWORD *)(v28 - 16) = v27;
      }
      v29 = v18 + (float)((float)v22 * a6);
      v30 = v19 + (float)((float)v21 * a7);
      v31 = v18 + (float)((float)(v23 + v22) * a6);
      v32 = *(_QWORD *)(v16 + 120) + 48 * *(_QWORD *)(v16 + 128);
      *(float *)(v32 - 176) = v29;
      *(float *)(v32 - 172) = v30;
      v33 = v19 + (float)((float)(v24 + v21) * a7);
      *(float *)(v32 - 128) = v31;
      *(float *)(v32 - 124) = v30;
      *(float *)(v32 - 80) = v31;
      *(float *)(v32 - 76) = v33;
      *(float *)(v32 - 32) = v29;
      *(float *)(v32 - 28) = v33;
    }
  }
  else
  {
    v35 = *(float *)(a1 + 48);
    v36 = *(float *)(a1 + 52);
    v37 = *(float *)(a1 + 56);
    v38 = *(float *)(a1 + 60);
    v39 = 6;
    if (!*(_DWORD *)(v16 + 92))
      v39 = 4;
    if ((unint64_t)(*(_QWORD *)(v16 + 128) + 4) > *(_QWORD *)(v16 + 136))
      goto LABEL_19;
    v40 = *(_QWORD *)(v16 + 112);
    v41 = *(float *)(a1 + 60);
    v42 = *(float *)(a1 + 56);
    v43 = *(float *)(a1 + 52);
    v44 = *(float *)(a1 + 48);
    if (v40)
    {
      v41 = *(float *)(a1 + 60);
      v42 = *(float *)(a1 + 56);
      v43 = *(float *)(a1 + 52);
      v44 = *(float *)(a1 + 48);
      if (*(_QWORD *)(v16 + 104) + v39 > v40)
      {
LABEL_19:
        *(_WORD *)(v16 + 816) |= 0x20u;
        v45 = v37;
        v46 = v38;
        CA::OGL::Context::array_flush(v16);
        v38 = v46;
        v37 = v45;
        *(_QWORD *)(v16 + 128) = 0;
        *(_QWORD *)(v16 + 96) = v16 + 818;
        *(_OWORD *)(v16 + 104) = xmmword_18474E060;
        v44 = *(float *)(a1 + 48);
        v43 = *(float *)(a1 + 52);
        v42 = *(float *)(a1 + 56);
        v41 = *(float *)(a1 + 60);
      }
    }
    v47 = (float)a2;
    v48 = v35 * a6;
    v49 = v36 * a7;
    v50 = (float)a3;
    v51 = v37 * a6;
    v52 = v38 * a7;
    result = (uint64_t)CA::OGL::Context::array_rect((_QWORD *)v16, v44, v43, v42, v41);
    if (a4)
    {
      v53 = *a5;
      v54 = *(_QWORD *)(v16 + 120) + 48 * *(_QWORD *)(v16 + 128);
      *(_QWORD *)(v54 - 160) = *a5;
      *(_QWORD *)(v54 - 112) = v53;
      *(_QWORD *)(v54 - 64) = v53;
      *(_QWORD *)(v54 - 16) = v53;
    }
    v55 = (float)(a8 - v47) + v48;
    v56 = (float)(a9 - v50) + v49;
    v57 = (float)(a8 - v47) + v51;
    v58 = *(_QWORD *)(v16 + 120) + 48 * *(_QWORD *)(v16 + 128);
    *(float *)(v58 - 176) = v55;
    *(float *)(v58 - 172) = v56;
    v59 = (float)(a9 - v50) + v52;
    *(float *)(v58 - 128) = v57;
    *(float *)(v58 - 124) = v56;
    *(float *)(v58 - 80) = v57;
    *(float *)(v58 - 76) = v59;
    *(float *)(v58 - 32) = v55;
    *(float *)(v58 - 28) = v59;
  }
  return result;
}

double CA::OGL::MetalContext::new_image(CA::OGL::MetalContext *this)
{
  malloc_zone_t *malloc_zone;
  char *v2;
  double result;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v2 = (char *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x80uLL, 0x743898A5uLL);
  if (v2)
  {
    *((_QWORD *)v2 + 14) = 0;
    result = 0.0;
    *((_OWORD *)v2 + 5) = 0u;
    *((_OWORD *)v2 + 6) = 0u;
    *((_OWORD *)v2 + 4) = 0u;
    *((_WORD *)v2 + 60) = 1;
    v2[122] = 0;
    *(_WORD *)(v2 + 123) |= 8u;
    v2[125] = -1;
    *((_WORD *)v2 + 29) |= 0x500u;
  }
  return result;
}

uint64_t CA::OGL::Context::sw_renderer_p(CA::OGL::Context *this)
{
  return 0;
}

void CA::OGL::PingPongState::render_pass_final_dest(_QWORD *a1, int a2, int a3, int a4, uint64_t *a5)
{
  _DWORD *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[4];

  v28[3] = *MEMORY[0x1E0C80C00];
  v9 = (_DWORD *)a1[31];
  if (v9)
    v10 = a4 == 0;
  else
    v10 = 1;
  if (!v10)
  {
    v9 = (_DWORD *)(*(uint64_t (**)(_QWORD *, _DWORD *, uint64_t))(*a1 + 680))(a1, v9, 1);
    CA::OGL::Context::push_surface((uint64_t)a1, (uint64_t)v9, 0, 64, 0);
  }
  v11 = 0;
  a1[16] = 0;
  v26 = 0;
  a1[12] = (char *)a1 + 818;
  *(_OWORD *)(a1 + 13) = xmmword_18474E060;
  v12 = *(_QWORD *)(a1[29] + 8);
  v28[1] = 0;
  v28[2] = 0;
  v27 = 0;
  v28[0] = v12;
  while (CA::ShapeIterator::iterate(v28, (int *)&v26))
  {
    if (v9)
    {
      if ((_DWORD)v27 + (_DWORD)v26 == v9[10] + v9[8])
        LODWORD(v27) = v27 + 1;
      if (HIDWORD(v27) + HIDWORD(v26) == v9[11] + v9[9])
        ++HIDWORD(v27);
    }
    v13 = 6;
    if (!*((_DWORD *)a1 + 23))
      v13 = 4;
    if ((unint64_t)(v11 + 4) > a1[17] || (v14 = a1[14]) != 0 && a1[13] + v13 > v14)
    {
      *((_WORD *)a1 + 408) |= 0x20u;
      CA::OGL::Context::array_flush((uint64_t)a1);
      a1[16] = 0;
      a1[12] = (char *)a1 + 818;
      *(_OWORD *)(a1 + 13) = xmmword_18474E060;
    }
    v15 = v26;
    v16 = HIDWORD(v26);
    v18 = v27;
    v17 = HIDWORD(v27);
    CA::OGL::Context::array_rect(a1, (float)(int)v26, (float)SHIDWORD(v26), (float)(v27 + v26), (float)(HIDWORD(v27) + HIDWORD(v26)));
    v19 = *a5;
    v20 = a1[15] + 48 * a1[16];
    *(_QWORD *)(v20 - 160) = *a5;
    *(_QWORD *)(v20 - 112) = v19;
    *(_QWORD *)(v20 - 64) = v19;
    v21 = (float)(v15 - a2);
    v22 = (float)(v15 - a2 + v18);
    v23 = (float)(v16 - a3 + v17);
    *(_QWORD *)(v20 - 16) = v19;
    v11 = a1[16];
    v24 = a1[15] + 48 * v11;
    *(float *)(v24 - 176) = v21;
    *(float *)(v24 - 172) = (float)(v16 - a3);
    *(float *)(v24 - 128) = v22;
    *(float *)(v24 - 124) = (float)(v16 - a3);
    *(float *)(v24 - 80) = v22;
    *(float *)(v24 - 76) = v23;
    *(float *)(v24 - 32) = v21;
    *(float *)(v24 - 28) = v23;
  }
  CA::OGL::Context::array_flush((uint64_t)a1);
  if (v9 && a4)
  {
    CA::OGL::Context::pop_surface((CA::OGL::Context *)a1);
    (*(void (**)(_QWORD *, _QWORD, _DWORD *))(*a1 + 688))(a1, a1[31], v9);
    CA::OGL::Context::release_surface((uint64_t)a1, (uint64_t)v9);
  }
}

uint64_t CA::OGL::BlurState::in_place_color_matrix(CA::OGL **this, const CA::ColorMatrix *a2, char a3)
{
  CA::OGL *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v15;
  uint64_t v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if ((a3 & 1) != 0)
    {
      v5 = *this;
      v6 = (uint64_t)*this + 16;
      *(_BYTE *)(*(_QWORD *)v6 + 17) = 38;
      v7 = *((_QWORD *)v5 + 31);
      CA::OGL::color_matrix_function(v5, a2, 0, 0, 1);
      v8 = *(_DWORD *)(v7 + 32);
      v9 = *(_DWORD *)(v7 + 36);
      v16[0] = *(_QWORD *)(*(_QWORD *)v6 + 8);
      CA::OGL::PingPongState::render_pass_final_dest(*this, v8, v9, 0, v16);
LABEL_6:
      *(_BYTE *)(*(_QWORD *)v6 + 16) = 0;
      *(_BYTE *)(*(_QWORD *)v6 + 17) = 0;
      return 1;
    }
    if (((__int16)this[4] & 0x80000000) == 0)
    {
      v10 = (uint64_t)*this;
      v6 = (uint64_t)*this + 16;
      *(_BYTE *)(*(_QWORD *)v6 + 17) = 38;
      v11 = (uint64_t)this[((_WORD)this[4] & 1) + 11];
      CA::OGL::Context::push_surface(v10, v11, 0, 64, 0);
      CA::OGL::color_matrix_function((CA::OGL *)v10, a2, 0, 0, 1);
      *(_QWORD *)(v10 + 128) = 0;
      *(_QWORD *)(v10 + 96) = v10 + 818;
      *(_OWORD *)(v10 + 104) = xmmword_18474E060;
      v12 = *(_DWORD *)(v11 + 32);
      v13 = *(_DWORD *)(v11 + 36);
      v15 = *(_QWORD *)(*(_QWORD *)v6 + 8);
      CA::OGL::PingPongState::render_pass((uint64_t)this, v12, v13, 1, &v15, 1.0, 1.0, 0.0, 0.0);
      CA::OGL::Context::array_flush(v10);
      CA::OGL::Context::pop_surface((CA::OGL::Context *)v10);
      goto LABEL_6;
    }
  }
  return 0;
}

uint64_t CA::OGL::`anonymous namespace'::set_destination_bounds(uint64_t result, int32x4_t *a2, uint64_t *a3, uint64_t a4, double a5, float a6, double a7, int32x4_t a8, double a9, double a10, int32x4_t a11)
{
  uint64_t v13;
  int32x4_t *v14;
  uint64_t v15;
  int64x2_t v16;
  int8x16_t v17;
  signed __int32 v18;
  int64x2_t v19;
  int8x16_t v20;
  int32x2_t v21;
  int8x16_t v22;
  int64x2_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  float64x2_t v27;
  int8x16_t v28;
  float64x2_t v29;
  int8x16_t v30;
  int8x16_t v31;
  float64x2_t v32;
  int32x4_t v33;

  if (*(float *)&a5 != 1.0 && a4 != 0)
  {
    v13 = result;
    v15 = a2[2].i64[0];
    a8.i64[0] = a2[2].i64[1];
    v14 = a2 + 2;
    v16.i64[0] = (int)v15;
    v16.i64[1] = SHIDWORD(v15);
    v17 = (int8x16_t)vcvtq_f64_s64(v16);
    v18 = a8.i32[1];
    v16.i64[0] = a8.i32[0];
    v16.i64[1] = a8.i32[1];
    v19 = v16;
    if (a8.i32[0] > a8.i32[1])
      v18 = a8.i32[0];
    a8.i32[0] = v18;
    a11.i32[0] = 1073741822;
    v20 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(a8, a11), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), v17);
    v21 = vdup_n_s32(v18 > 1073741822);
    v22 = (int8x16_t)vcvtq_f64_s64(v19);
    v23.i64[0] = v21.u32[0];
    v23.i64[1] = v21.u32[1];
    v24 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v23, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL), v22);
    v22.i64[0] = 0x7FEFFFFFFFFFFFFFLL;
    v25 = (int8x16_t)vdupq_lane_s64(vcgtq_f64((float64x2_t)v22, (float64x2_t)v24).i64[0], 0);
    v26.i64[1] = v24.i64[1];
    *(double *)v26.i64 = *(float *)&a5 * *(double *)v24.i64;
    v27 = (float64x2_t)vbslq_s8(v25, v26, v24);
    v28.i64[1] = v20.i64[1];
    *(double *)v28.i64 = *(float *)&a5 * *(double *)v20.i64;
    v29 = (float64x2_t)vbslq_s8(v25, v28, v20);
    if (a6 != 1.0 && v27.f64[1] < 1.79769313e308)
    {
      v29.f64[1] = vmuld_lane_f64(a6, v29, 1);
      v27.f64[1] = v27.f64[1] * a6;
    }
    v30 = (int8x16_t)vceqzq_f64(v27);
    if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v30, 1), v30).u64[0] & 0x8000000000000000) != 0
      || (v31 = vorrq_s8((int8x16_t)vcltzq_f64(v27), (int8x16_t)vcgezq_f64(v27)),
          (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v31), 1), v31).u64[0] & 0x8000000000000000) != 0))
    {
      v14->i64[0] = 0;
      v14->i64[1] = 0;
    }
    else
    {
      v32 = vminnmq_f64(vaddq_f64(v29, v27), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL));
      v33 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v29, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
      *v14 = vuzp1q_s32(v33, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(v32), (int64x2_t)v33));
    }
    result = CA::Shape::scale_and_dilate(*(CA::Shape **)(result + 8), *(float32x2_t *)&a5, a6, 1u, 1u);
    *a3 = result;
    *(_QWORD *)(v13 + 8) = result;
  }
  return result;
}

uint64_t CA::OGL::BlurState::tile_downsample(float32x2_t *this, int a2)
{
  uint64_t v2;
  _QWORD *v6;
  int32x4_t v7;
  int32x4_t v8;
  __int16 v9;
  int v10;
  uint64_t v11;
  CA::OGL::BlurState *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64x2_t v16;
  int8x16_t v17;
  int v18;
  int64x2_t v19;
  int8x16_t v20;
  int32x2_t v21;
  int64x2_t v22;
  int8x16_t v23;
  float v24;
  double v25;
  BOOL v26;
  int8x16_t v27;
  int8x16_t v28;
  unint64_t v29;
  int8x16_t v30;
  float64x2_t v31;
  float64x2_t v32;
  int8x16_t v33;
  int8x16_t v34;
  float64x2_t v35;
  int32x4_t v36;
  int32x2_t v37;
  float32x2_t v38;
  int v39;
  int32x4_t v40;
  int v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (this[5])
    return 0;
  if ((this[13].i8[4] & 1) != 0)
  {
    v2 = 0;
    if ((this[13].i8[4] & 2) != 0 || this[13].i32[0] == 1)
      return v2;
  }
  else if ((this[13].i8[4] & 2) != 0)
  {
    return 0;
  }
  v6 = (_QWORD *)*this;
  if (!(*(unsigned int (**)(float32x2_t, uint64_t))(**(_QWORD **)this + 184))(*this, 34))
    return 0;
  v9 = this[4].i16[0];
  v10 = v9;
  v11 = v9 & 1;
  v12 = (CA::OGL::BlurState *)(v10 >= 0 ? &this[v11 + 11] : &this[1]);
  v13 = *(_QWORD *)v12;
  if (v6[32] != *(_QWORD *)v12 || (*(_WORD *)(v13 + 75) & 0xF) < a2)
    return 0;
  v14 = v11 ^ 1;
  v15 = *(_QWORD *)(v13 + 32);
  v7.i64[0] = *(_QWORD *)(v13 + 40);
  v16.i64[0] = (int)v15;
  v16.i64[1] = SHIDWORD(v15);
  v17 = (int8x16_t)vcvtq_f64_s64(v16);
  v18 = v7.i32[1];
  v16.i64[0] = v7.i32[0];
  v16.i64[1] = v7.i32[1];
  v19 = v16;
  if (v7.i32[0] > v7.i32[1])
    v18 = *(_QWORD *)(v13 + 40);
  v7.i32[0] = v18;
  v8.i32[0] = 1073741822;
  v20 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v7, v8), 0), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), v17);
  v21 = vdup_n_s32(v18 > 1073741822);
  v22.i64[0] = v21.u32[0];
  v22.i64[1] = v21.u32[1];
  v23 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v22, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL), (int8x16_t)vcvtq_f64_s64(v19));
  v24 = 1.0 / (float)a2;
  v25 = v24;
  v26 = *(double *)v23.i64 >= 1.79769313e308 || v24 == 1.0;
  v27.i64[1] = v20.i64[1];
  v28.i64[1] = v23.i64[1];
  if (v26)
    v29 = 0;
  else
    v29 = -1;
  v30 = (int8x16_t)vdupq_n_s64(v29);
  *(double *)v28.i64 = v25 * *(double *)v23.i64;
  v31 = (float64x2_t)vbslq_s8(v30, v28, v23);
  *(double *)v27.i64 = v25 * *(double *)v20.i64;
  v32 = (float64x2_t)vbslq_s8(v30, v27, v20);
  if (v24 != 1.0 && v31.f64[1] < 1.79769313e308)
  {
    v32.f64[1] = vmuld_lane_f64(v25, v32, 1);
    v31.f64[1] = v31.f64[1] * v25;
  }
  v33 = (int8x16_t)vceqzq_f64(v31);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v33, 1), v33).u64[0] & 0x8000000000000000) != 0
    || (v34 = vorrq_s8((int8x16_t)vcltzq_f64(v31), (int8x16_t)vcgezq_f64(v31)),
        (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v34), 1), v34).u64[0] & 0x8000000000000000) != 0))
  {
    v40 = 0uLL;
    v37 = (int32x2_t)0x100000001;
  }
  else
  {
    v35 = vminnmq_f64(vaddq_f64(v32, v31), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL));
    v36 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v32, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
    v40 = vuzp1q_s32(v36, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(v35), (int64x2_t)v36));
    v37 = vadd_s32((int32x2_t)v40.u64[1], (int32x2_t)0x100000001);
  }
  v40.u64[1] = (unint64_t)v37;
  this[4].i32[1] |= 0x4000u;
  if (!CA::OGL::PingPongState::create_surface((CA::OGL::PingPongState *)this, v14, (const CA::Bounds *)&v40))
    return 0;
  this[7] = vcvt_f32_s32(vadd_s32((int32x2_t)v40.u64[1], *(int32x2_t *)v40.i8));
  v38 = this[v14 + 11];
  v39 = *(_DWORD *)(v13 + 36) / a2 - *(_DWORD *)(*(_QWORD *)&v38 + 36);
  v41 = *(_DWORD *)(v13 + 32) / a2 - *(_DWORD *)(*(_QWORD *)&v38 + 32);
  v42 = v39;
  v2 = (*(uint64_t (**)(_QWORD *))(*v6 + 880))(v6);
  if ((_DWORD)v2)
  {
    (*(void (**)(_QWORD *))(*v6 + 752))(v6);
    ++this[4].i16[0];
  }
  return v2;
}

void CA::OGL::`anonymous namespace'::simdBlurParameters(CA::OGL::_anonymous_namespace_ *this, float a2, float *a3, int *a4)
{
  uint64_t v6;
  double v7;
  double v8;
  long double v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  double *v15;
  uint64_t v16;
  double v17;
  double v18;
  float v19;
  _OWORD v20[6];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = 0;
  v23 = *MEMORY[0x1E0C80C00];
  v21 = 0;
  memset(v20, 0, sizeof(v20));
  v7 = 0.0;
  v8 = 1.0 / a2;
  do
  {
    v9 = exp((double)((int)v6 - 13) * (double)((int)v6 - 13) * -0.5 * v8);
    *((long double *)v20 + v6) = v9;
    v7 = v9 + v7;
    ++v6;
  }
  while (v6 != 13);
  v10 = 0;
  v22 = 0x3FF0000000000000;
  do
  {
    v20[v10] = vmulq_n_f64((float64x2_t)v20[v10], 1.0 / (v7 * 2.0 + 1.0));
    ++v10;
  }
  while (v10 != 7);
  v11 = 0;
  v12 = 0.0;
  while (1)
  {
    v13 = *((double *)v20 + v11);
    if (v13 >= 0.002)
      break;
    v12 = v13 + v12;
    if (++v11 == 11)
      goto LABEL_10;
  }
  if (v11 > 0xD)
  {
    LODWORD(v14) = 0;
    goto LABEL_14;
  }
LABEL_10:
  v14 = (14 - v11);
  v15 = (double *)v20 + v11;
  v16 = v14;
  v17 = 1.0 / (1.0 - v12);
  do
  {
    v18 = *v15++;
    v19 = v18 * v17;
    *(float *)this = v19;
    this = (CA::OGL::_anonymous_namespace_ *)((char *)this + 4);
    --v16;
  }
  while (v16);
LABEL_14:
  *(_DWORD *)a3 = v14;
}

void CA::OGL::BlurState::downsample_box_2(float32x2_t *this, float a2, float a3)
{
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  int v9;
  float32x2_t *v10;
  uint64_t v11;
  int v12;
  int v13;
  float v14;
  __int16 v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  int v19[2];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v6 = (uint64_t)*this;
  if ((this[13].i8[4] & 1) != 0)
    v7 = 16;
  else
    v7 = 32;
  if (CA::OGL::PingPongState::attach_dest(this, 1, v7))
  {
    v8 = this[4].i16[0];
    v9 = v8;
    v10 = &this[(v8 & 1) + 11];
    if (v9 < 0)
      v10 = this + 1;
    v11 = (uint64_t)*v10;
    v12 = *(_DWORD *)(*(_QWORD *)v10 + 32);
    v13 = *(_DWORD *)(*(_QWORD *)v10 + 36);
    v19[0] = v12;
    v19[1] = v13;
    CA::OGL::Context::bind_surface((uint64_t)*this, v11, 0, 1u, 1, 0.0);
    v14 = 32.0;
    if ((this[13].i8[4] & 1) != 0)
      v14 = 16.0;
    CA::OGL::BlurState::process_edges((CA::OGL::BlurState *)this, v14, a2, a3, v19);
    *(_BYTE *)(*(_QWORD *)(v6 + 16) + 16) = 1;
    *(_QWORD *)(v6 + 128) = 0;
    *(_QWORD *)(v6 + 96) = v6 + 818;
    *(_OWORD *)(v6 + 104) = xmmword_18474E060;
    v18 = 0;
    CA::OGL::PingPongState::render_pass((uint64_t)this, v12, v13, 0, &v18, a2, a3, 0.0, 0.0);
    CA::OGL::Context::array_flush(v6);
    v15 = this[4].i16[0];
    v16 = v15;
    v17 = (uint64_t *)&this[(v15 & 1) + 11];
    if (v16 < 0)
      v17 = (uint64_t *)&this[1];
    CA::OGL::Context::unbind_surface(*this, *v17, 0);
    *(_BYTE *)(*(_QWORD *)(v6 + 16) + 16) = 0;
    CA::OGL::Context::pop_surface(*(CA::OGL::Context **)this);
    ++this[4].i16[0];
  }
}

uint64_t CA::OGL::MetalContext::reset_attached_surface(uint64_t this)
{
  *(_QWORD *)(this + 256) = 0;
  *(_QWORD *)(this + 3944) = 0;
  return this;
}

void CA::OGL::BlurState::downsample_blur_4(float32x2_t *this, float a2, float a3, const float *a4, const float *a5)
{
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  int v12;
  float32x2_t *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  float32x2_t v18;
  unint64_t v19;
  float v20;
  __int16 v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  _OWORD v25[3];
  int v26[2];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v9 = (uint64_t)*this;
  if ((this[13].i8[4] & 1) != 0)
    v10 = 16;
  else
    v10 = 32;
  if (CA::OGL::PingPongState::attach_dest(this, 1, v10))
  {
    v11 = this[4].i16[0];
    v12 = v11;
    v13 = &this[(v11 & 1) + 11];
    if (v12 < 0)
      v13 = this + 1;
    v14 = (uint64_t)*v13;
    v15 = *(_DWORD *)(*(_QWORD *)v13 + 32);
    v16 = *(_DWORD *)(*(_QWORD *)v13 + 36);
    v26[0] = v15;
    v26[1] = v16;
    CA::OGL::Context::bind_surface((uint64_t)*this, v14, 0, 1u, 1, 0.0);
    v17 = 0;
    v18 = *(float32x2_t *)(*(_QWORD *)(v9 + 16) + 96);
    memset(v25, 0, sizeof(v25));
    v19 = -2;
    do
    {
      *(float32x2_t *)((char *)v25 + v17 * 4) = vmul_f32(*(float32x2_t *)&a4[v17], v18);
      v19 += 2;
      v17 += 2;
    }
    while (v19 < 0xA);
    v20 = a4[10];
    if (v20 <= a4[11])
      v20 = a4[11];
    CA::OGL::BlurState::process_edges((CA::OGL::BlurState *)this, v20 + v20, a2, a3, v26);
    *(_BYTE *)(*(_QWORD *)(v9 + 16) + 16) = 31;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 984))(v9) & 1) != 0)
    {
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, _OWORD *))(*(_QWORD *)v9 + 1000))(v9, 0, 2, 6, v25);
      *(_QWORD *)(v9 + 128) = 0;
      *(_QWORD *)(v9 + 96) = v9 + 818;
      *(_OWORD *)(v9 + 104) = xmmword_18474E060;
      v24 = 0;
      CA::OGL::PingPongState::render_pass((uint64_t)this, v15, v16, 0, &v24, a2, a3, 0.0, 0.0);
      CA::OGL::Context::array_flush(v9);
      v21 = this[4].i16[0];
      v22 = v21;
      v23 = (uint64_t *)&this[(v21 & 1) + 11];
      if (v22 < 0)
        v23 = (uint64_t *)&this[1];
      CA::OGL::Context::unbind_surface(*this, *v23, 0);
      *(_BYTE *)(*(_QWORD *)(v9 + 16) + 16) = 0;
      CA::OGL::Context::pop_surface(*(CA::OGL::Context **)this);
      ++this[4].i16[0];
    }
  }
}

void CA::OGL::BlurState::downsample_blur_2(float32x2_t *this, float a2, float a3, const float *a4, const float *a5)
{
  _QWORD *v9;
  uint64_t v10;
  __int16 v11;
  int v12;
  uint64_t *v13;
  float32x2_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  float32x2_t v19;
  unint64_t v20;
  float v21;
  const float *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v31;
  __int16 v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  int v40[2];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v9 = (_QWORD *)*this;
  if ((this[13].i8[4] & 1) != 0)
    v10 = 16;
  else
    v10 = 32;
  if (CA::OGL::PingPongState::attach_dest(this, 1, v10))
  {
    v11 = this[4].i16[0];
    v12 = v11;
    v13 = (uint64_t *)&this[1];
    v14 = &this[(v11 & 1) + 11];
    if (v12 < 0)
      v14 = this + 1;
    v15 = (uint64_t)*v14;
    v16 = *(_DWORD *)(*(_QWORD *)v14 + 32);
    v17 = *(_DWORD *)(*(_QWORD *)v14 + 36);
    v40[0] = v16;
    v40[1] = v17;
    CA::OGL::Context::bind_surface((uint64_t)*this, v15, 0, 1u, 1, 0.0);
    v18 = 0;
    v19 = *(float32x2_t *)(v9[2] + 96);
    memset(v39, 0, sizeof(v39));
    v20 = -2;
    do
    {
      v39[v18 / 2] = vmul_f32(*(float32x2_t *)&a4[v18], v19);
      v20 += 2;
      v18 += 2;
    }
    while (v20 < 4);
    v21 = a4[4];
    if (v21 <= a4[5])
      v21 = a4[5];
    CA::OGL::BlurState::process_edges((CA::OGL::BlurState *)this, v21 + v21, a2, a3, v40);
    *(_BYTE *)(v9[2] + 16) = 30;
    if (((*(uint64_t (**)(_QWORD *))(*v9 + 984))(v9) & 1) != 0)
    {
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t, _QWORD *))(*v9 + 1000))(v9, 0, 2, 3, v39);
      v9[16] = 0;
      v9[12] = (char *)v9 + 818;
      *(_OWORD *)(v9 + 13) = xmmword_18474E060;
      v38 = 0;
      CA::OGL::PingPongState::render_pass((uint64_t)this, v16, v17, 0, &v38, a2, a3, 0.0, 0.0);
      CA::OGL::Context::array_flush((uint64_t)v9);
    }
    else
    {
      *(_BYTE *)(v9[2] + 16) = 3;
      v9[16] = 0;
      v9[12] = (char *)v9 + 818;
      *(_OWORD *)(v9 + 13) = xmmword_18474E060;
      v37 = 0x340E340E340E340ELL;
      CA::OGL::PingPongState::render_pass((uint64_t)this, v16, v17, 1, &v37, a2, a3, 0.0, 0.0);
      CA::OGL::Context::array_flush((uint64_t)v9);
      *(_BYTE *)(v9[2] + 481) |= 1u;
      *(_BYTE *)(v9[2] + 480) = 12;
      v9[16] = 0;
      v9[12] = (char *)v9 + 818;
      *(_OWORD *)(v9 + 13) = xmmword_18474E060;
      v22 = a4 + 1;
      v23 = 4u;
      do
      {
        v24 = 12;
        if (!*((_DWORD *)v9 + 23))
          v24 = 8;
        if ((unint64_t)(v9[16] + 8) > v9[17] || (v25 = v9[14]) != 0 && v9[13] + v24 > v25)
        {
          *((_WORD *)v9 + 408) |= 0x20u;
          CA::OGL::Context::array_flush((uint64_t)v9);
          v9[16] = 0;
          v9[12] = (char *)v9 + 818;
          *(_OWORD *)(v9 + 13) = xmmword_18474E060;
        }
        __asm { FCVT            H0, S0 }
        v31 = 0x1000100010001 * (unsigned __int16)_S0;
        v36 = v31;
        CA::OGL::PingPongState::render_pass((uint64_t)this, v16, v17, 1, &v36, a2, a3, -*(v22 - 1), -*v22);
        v35 = v31;
        CA::OGL::PingPongState::render_pass((uint64_t)this, v16, v17, 1, &v35, a2, a3, *(v22 - 1), *v22);
        v23 += 4;
        v22 += 2;
      }
      while (v23 != 16);
      CA::OGL::Context::array_flush((uint64_t)v9);
      *(_BYTE *)(v9[2] + 481) &= ~1u;
      v13 = (uint64_t *)&this[1];
    }
    v32 = this[4].i16[0];
    v33 = v32;
    v34 = (uint64_t *)&this[(v32 & 1) + 11];
    if (v33 < 0)
      v34 = v13;
    CA::OGL::Context::unbind_surface(*this, *v34, 0);
    *(_BYTE *)(v9[2] + 16) = 0;
    CA::OGL::Context::pop_surface(*(CA::OGL::Context **)this);
    ++this[4].i16[0];
  }
}

void CA::OGL::BlurState::single_pass_blur(float32x2_t *this, float a2, float a3, int a4)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  __int16 v11;
  int v12;
  uint64_t *v13;
  int v14;
  int v15;
  long double v16;
  long double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  unsigned int v22;
  long double v23;
  long double v24;
  float v25;
  float v26;
  uint64_t v27;
  float v28;
  float v29;
  float *v30;
  float v31;
  int v32;
  __int16 v33;
  int v34;
  uint64_t *v35;
  __int16 v36;
  int v37;
  float32x2_t *v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  float v42[8];
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  float32x4x2_t v47;
  float32x4x2_t v48;

  v46 = *MEMORY[0x1E0C80C00];
  v8 = (uint64_t)*this;
  v9 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)this + 16) + 16);
  v10 = (uint64_t)*this;
  if ((a4 & 1) == 0)
  {
    if (!CA::OGL::PingPongState::attach_dest(this, 1, 0))
      return;
    v10 = (uint64_t)*this;
  }
  v11 = this[4].i16[0];
  v12 = v11;
  v13 = (uint64_t *)&this[(v11 & 1) + 11];
  if (v12 < 0)
    v13 = (uint64_t *)&this[1];
  v14 = *(_DWORD *)(*v13 + 32);
  v15 = *(_DWORD *)(*v13 + 36);
  CA::OGL::Context::bind_surface(v10, *v13, 0, 1u, 1, 0.0);
  *(_BYTE *)(*(_QWORD *)(v8 + 16) + 16) = 41;
  v45 = 0;
  v44 = 0;
  v16 = exp(-0.5 / a2);
  v17 = v16 * 2.0 + 1.0;
  v18 = v16 / v17;
  v19 = 1.0 / v17;
  v20 = 1.0 / v17;
  v21 = v18;
  if (a2 != a3)
  {
    if (a2 < 0.0 == a3 >= 0.0)
      goto LABEL_11;
    v22 = LODWORD(a2) - LODWORD(a3);
    if (LODWORD(a2) - LODWORD(a3) < 0)
      v22 = LODWORD(a3) - LODWORD(a2);
    v20 = v19;
    v21 = v18;
    if (v22 >= 4)
    {
LABEL_11:
      v23 = exp(-0.5 / a3);
      v24 = v23 * 2.0 + 1.0;
      v21 = v23 / v24;
      v20 = 1.0 / v24;
    }
  }
  v25 = v19 * 4.0 * v18;
  v26 = v20 * (4.0 * v21);
  v42[0] = -v25;
  v42[1] = v26;
  v42[2] = v25;
  v42[3] = v26;
  v42[4] = -v25;
  v42[5] = -v26;
  v42[6] = v25;
  v42[7] = -v26;
  v27 = *(_QWORD *)(v8 + 16);
  v29 = *(float *)(v27 + 96);
  v28 = *(float *)(v27 + 100);
  v30 = v42;
  v47 = vld2q_f32(v30);
  v48.val[0] = vmulq_n_f32(v47.val[0], v29);
  v48.val[1] = vmulq_n_f32(v47.val[1], v28);
  vst2q_f32(v30, v48);
  v43 = 1048576000;
  v31 = 1.0;
  if (this[13].i32[0] == 2)
  {
    if ((a4 & 1) == 0)
    {
      v31 = 1.0;
      if ((this[13].i8[4] & 2) == 0)
        v31 = 0.0;
    }
  }
  else
  {
    v31 = 0.0;
  }
  v41 = v31;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, float *))(*(_QWORD *)v8 + 1000))(v8, 0, 2, 4, v42);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)v8 + 1000))(v8, 1, 4, 1, &v43);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, float *))(*(_QWORD *)v8 + 1000))(v8, 2, 1, 1, &v41);
  if (a4)
  {
    v32 = (this[13].u8[4] >> 1) & 1;
    v40 = 0;
    CA::OGL::PingPongState::render_pass_final_dest(*this, v14, v15, v32, &v40);
  }
  else
  {
    *(_QWORD *)(v8 + 128) = 0;
    *(_QWORD *)(v8 + 96) = v8 + 818;
    *(_OWORD *)(v8 + 104) = xmmword_18474E060;
    v39 = 0;
    CA::OGL::PingPongState::render_pass((uint64_t)this, v14, v15, 0, &v39, 1.0, 1.0, 0.0, 0.0);
    CA::OGL::Context::array_flush(v8);
  }
  v33 = this[4].i16[0];
  v34 = v33;
  v35 = (uint64_t *)&this[(v33 & 1) + 11];
  if (v34 < 0)
    v35 = (uint64_t *)&this[1];
  CA::OGL::Context::unbind_surface(*this, *v35, 0);
  *(_BYTE *)(*(_QWORD *)(v8 + 16) + 16) = v9;
  if ((a4 & 1) == 0)
  {
    if ((*(_WORD *)(v8 + 816) & 0x7000) != 0)
    {
      v36 = this[4].i16[0];
      v37 = v36;
      v38 = &this[(v36 & 1) + 11];
      if (v37 < 0)
        v38 = this + 1;
      *(_BYTE *)(*(_QWORD *)(v8 + 248) + 73) = *(_BYTE *)(*(_QWORD *)(v8 + 248) + 73) & 0xC0 | *(_BYTE *)(*(_QWORD *)v38 + 73) & 0x3F;
    }
    CA::OGL::Context::pop_surface(*(CA::OGL::Context **)this);
    ++this[4].i16[0];
  }
}

uint64_t CA::OGL::Context::function_supported(_QWORD *a1, char a2)
{
  uint64_t v3;
  char v4;
  uint64_t result;

  v3 = a1[2];
  v4 = *(_BYTE *)(v3 + 16);
  *(_BYTE *)(v3 + 16) = a2;
  result = (*(uint64_t (**)(_QWORD *))(*a1 + 984))(a1);
  *(_BYTE *)(a1[2] + 16) = v4;
  return result;
}

CA::Render::Context *CA::Render::Context::add_update_deadline(CA::Render::Context *this, double a2)
{
  CA::Render::Context *result;
  CA::Render::Context *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  double v9;

  result = (CA::Render::Context *)CA::Render::Context::retain_host_context(this);
  if (result)
  {
    v5 = result;
    result = (CA::Render::Context *)CA::Render::Context::add_update_deadline(result, a2);
    v6 = (unsigned int *)((char *)v5 + 8);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      return (CA::Render::Context *)(*(uint64_t (**)(CA::Render::Context *))(*(_QWORD *)v5 + 16))(v5);
  }
  else
  {
    v9 = *((double *)this + 64);
    if (v9 > a2)
      v9 = a2;
    *((double *)this + 64) = v9;
  }
  return result;
}

CA::Render::Context *CA::Render::Context::set_frame_stall_skip_request(CA::Render::Context *this, _BOOL4 a2)
{
  CA::Render::Context *result;
  CA::Render::Context *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  __int16 v9;

  result = (CA::Render::Context *)CA::Render::Context::retain_host_context(this);
  if (result)
  {
    v5 = result;
    result = (CA::Render::Context *)CA::Render::Context::set_frame_stall_skip_request(result, a2);
    v6 = (unsigned int *)((char *)v5 + 8);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      return (CA::Render::Context *)(*(uint64_t (**)(CA::Render::Context *))(*(_QWORD *)v5 + 16))(v5);
  }
  else
  {
    if (a2)
      v9 = 128;
    else
      v9 = 0;
    *((_WORD *)this + 276) = *((_WORD *)this + 276) & 0xFF7F | v9;
  }
  return result;
}

CA::Render::Context *CA::Render::Context::add_input_time(CA::Render::Context *this, double a2)
{
  CA::Render::Context *result;
  CA::Render::Context *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  double v9;

  result = (CA::Render::Context *)CA::Render::Context::retain_host_context(this);
  if (result)
  {
    v5 = result;
    result = (CA::Render::Context *)CA::Render::Context::add_input_time(result, a2);
    v6 = (unsigned int *)((char *)v5 + 8);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      return (CA::Render::Context *)(*(uint64_t (**)(CA::Render::Context *))(*(_QWORD *)v5 + 16))(v5);
  }
  else
  {
    v9 = *((double *)this + 57);
    if (v9 > a2)
      v9 = a2;
    *((double *)this + 57) = v9;
  }
  return result;
}

uint64_t CA::Render::Context::retain_host_context(CA::Render::Context *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
  v2 = *((_QWORD *)this + 52);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 80);
    if (v3)
    {
      v4 = (unsigned int *)(v3 + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
      if (!v5)
      {
        v3 = 0;
        do
          v6 = __ldaxr(v4);
        while (__stlxr(v6 - 1, v4));
      }
    }
  }
  else
  {
    v3 = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
  return v3;
}

void sub_184500160(_Unwind_Exception *exception_object)
{
  unsigned int *v1;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = v1 + 2;
  do
  {
    v4 = __ldaxr(v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v3));
  if (!v5)
    (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 16))(v1);
  _Unwind_Resume(exception_object);
}

void CA::CG::FillRoundedRectShadow::draw_shadow(float32x2_t **this, CA::OGL::Context **a2)
{
  float32x2_t *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  float64x2_t v13;
  uint64_t v14;
  float64x2_t *v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  double v20;
  float32x2_t *v21;
  float v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  int8x16_t v27;
  float64x2_t v28;
  float v29;
  CA::OGL::Context *v30;
  float16x4_t *v31;
  float16x4_t v32;
  float16x4_t v39;
  float32x2_t *v40;
  unsigned int v41;
  float v42;
  float v43;
  double v44;
  CGSize v46;
  float64x2_t v47;
  float64x2_t v48;
  const CGPath *v49;
  const CGPath *v50;
  const CGPath *v51;
  double v52;
  double v53;
  _BOOL4 v54;
  double v55;
  double v56;
  int8x16_t *v57;
  int8x16_t *v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  char v62;
  CGPoint origin;
  float16x4_t v64;
  float64x2_t v65[2];
  float64x2_t v66;
  float64x2_t v67;
  double v68;
  double v69;
  CGSize v70;
  CGRect v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(float32x2_t *))(*(_QWORD *)this[18] + 136))(this[18]) & 5) == 0)
  {
    CA::CG::DrawShadow::draw_shadow((CA::CG::DrawShadow *)this, (CA::CG::Renderer *)a2);
    return;
  }
  v4 = this[18];
  v6 = *(double *)&v4[14];
  v5 = *(double *)&v4[15];
  v67.f64[0] = v6;
  v67.f64[1] = v5;
  v7 = *(double *)&v4[16];
  v8 = *(double *)&v4[17];
  v68 = v7;
  v69 = v8;
  if (v7 < 0.0)
  {
    v9 = v7 + v6;
    v7 = -v7;
    v67.f64[0] = v9;
    v68 = v7;
  }
  if (v8 < 0.0)
  {
    v10 = v8 + v5;
    v8 = -v8;
    v67.f64[1] = v10;
    v69 = v8;
  }
  v11 = *(double *)&v4[18];
  v12 = *(double *)&v4[19];
  v13 = 0uLL;
  v66 = 0u;
  memset(v65, 0, sizeof(v65));
  v14 = 4;
  if ((*((_DWORD *)this + 25) & 4) != 0)
  {
    v14 = 11;
    v15 = (float64x2_t *)(a2 + 11);
  }
  else
  {
    v15 = (float64x2_t *)(a2 + 4);
  }
  if (v15 == v65)
  {
    v18.f64[0] = 0.0;
    v17 = 0uLL;
    v16 = 0uLL;
    v19 = 0uLL;
    v20 = 0.0;
  }
  else
  {
    v16 = *(float64x2_t *)&a2[v14];
    v17 = v15[1];
    v13 = v15[2];
    v65[0] = v16;
    v65[1] = v17;
    v18.f64[0] = v17.f64[1];
    v19 = *(float64x2_t *)((char *)v65 + 8);
    v20 = v16.f64[0];
  }
  v21 = this[19];
  v22 = *((double *)a2 + 10);
  v23.f64[1] = v19.f64[1];
  v23.f64[0] = v18.f64[0];
  v24 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v19.f64[0], 0);
  v24.f64[0] = v20;
  v25 = vmulq_f64(v23, v24);
  v18.f64[1] = v20;
  v26 = vcvtq_f64_f32(vmul_n_f32(v21[10], v22));
  v27 = (int8x16_t)vmulq_f64(v19, v26);
  v28 = vmulq_n_f64(vmlaq_f64(vnegq_f64((float64x2_t)vextq_s8(v27, v27, 8uLL)), v26, v18), 1.0 / vsubq_f64(v25, (float64x2_t)vdupq_laneq_s64((int64x2_t)v25, 1)).f64[0]);
  v29 = v21[9].f32[1];
  v66 = vmlaq_laneq_f64(vmlaq_n_f64(v13, v16, v28.f64[0]), v17, v28, 1);
  v30 = a2[1];
  v31 = (float16x4_t *)*((_QWORD *)v30 + 2);
  v32 = v31[1];
  _H4 = v4[11].i16[3];
  __asm { FCVT            S4, H4 }
  v39 = v32;
  if (_S4 != 1.0)
    v39 = vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(v32), _S4));
  v31[1] = v39;
  v40 = this[18];
  v41 = v40[12].u32[1];
  if (this[19][9].f32[1] < 0.1 && (v41 & 0x400) == 0)
  {
    v82 = 0;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    v72 = 0u;
    v73 = 0u;
    memset(&v71, 0, sizeof(v71));
    CA::Transform::set_affine((CA::Transform *)&v71, v65[0].f64[0], v65[0].f64[1], v65[1].f64[0], v65[1].f64[1], v66.f64[0], v66.f64[1]);
    *((_QWORD *)&v79 + 1) = &v67;
    *(_QWORD *)&v80 = &v71;
    *((_QWORD *)&v80 + 1) = 0xFF0020003FLL;
    v82 = 0;
    v81 = 0uLL;
    CA::OGL::fill_round_rect((uint64_t)a2[1], (float64x2_t **)&v79 + 1, (double *)0xF, 0, v11, v12);
LABEL_44:
    *(float16x4_t *)(*((_QWORD *)v30 + 2) + 8) = v32;
    return;
  }
  v42 = vmulq_f64(v19, v19).f64[0] + v20 * v20;
  v43 = (float)(v29 * v22) / sqrtf(v42);
  if (v11 == v12)
  {
    v44 = v11 + v43 * 2.8 + v11 + v43 * 2.8;
    if (v44 <= v7 && v44 <= v8)
    {
      v70.width = 0.0;
      v64 = v39;
      CA::Transform::set_affine((CA::Transform *)&v71, v65[0].f64[0], v65[0].f64[1], v65[1].f64[0], v65[1].f64[1], v66.f64[0], v66.f64[1]);
      CA::OGL::emit_shadow_round_rect(v30, &v67, (float32x2_t *)&v70, &v64, 255, (v41 >> 10) & 1, 0, 0, v11, v43, 15, (uint64_t)&v71);
      goto LABEL_44;
    }
  }
  v46 = *(CGSize *)v40[16].f32;
  v71.origin = *(CGPoint *)v40[14].f32;
  v71.size = v46;
  v70 = *(CGSize *)v40[18].f32;
  origin = v71.origin;
  v71.origin.x = 0.0;
  v71.origin.y = 0.0;
  v47 = (float64x2_t)vdupq_n_s64(0x40F0000000000000uLL);
  v48 = (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL);
  v71.size = (CGSize)vmulq_f64(vrndaq_f64(vmulq_f64((float64x2_t)v46, v47)), v48);
  v70 = (CGSize)vmulq_f64(vrndaq_f64(vmulq_f64((float64x2_t)v70, v47)), v48);
  v49 = CA::CG::Renderer::retain_simple_path((CA::CG::Renderer *)a2, &v71, &v70);
  if (!v49)
    goto LABEL_42;
  v51 = v49;
  v66 = vmlaq_laneq_f64(vmlaq_n_f64(v66, v65[0], origin.x), v65[1], (float64x2_t)origin, 1);
  v52 = vaddvq_f64(vmulq_f64(v65[0], v65[0]));
  v53 = vaddvq_f64(vmulq_f64(v65[1], v65[1]));
  v54 = v52 != 1.0;
  if (v53 != 1.0)
    v54 = 1;
  v55 = sqrt(v52);
  if (!v54)
    v55 = v52;
  if (v55 <= 2.0)
  {
    v56 = sqrt(v53);
    if (v54)
      v53 = v56;
    if (vabdd_f64(v55, v53) < 0.001 && this[19][9].f32[1] >= 1.5)
    {
      v57 = CA::Render::Path::new_path(v49, v50);
      if (v57)
      {
        v58 = v57;
        v70.width = 0.0;
        CA::Transform::set_affine((CA::Transform *)&v71, v65[0].f64[0], v65[0].f64[1], v65[1].f64[0], v65[1].f64[1], v66.f64[0], v66.f64[1]);
        CA::OGL::emit_shadow_path((uint64_t)v30);
        v59 = &v58->u32[2];
        do
        {
          v60 = __ldaxr(v59);
          v61 = v60 - 1;
        }
        while (__stlxr(v61, v59));
        if (!v61)
          (*(void (**)(int8x16_t *))(v58->i64[0] + 16))(v58);
        CGPathRelease(v51);
        goto LABEL_44;
      }
    }
  }
  if ((v41 & 0x400) != 0)
  {
    CGPathRelease(v51);
LABEL_42:
    *(float16x4_t *)(*((_QWORD *)v30 + 2) + 8) = v32;
LABEL_43:
    CA::CG::DrawShadow::draw_shadow((CA::CG::DrawShadow *)this, (CA::CG::Renderer *)a2);
    return;
  }
  v62 = CA::CG::fill_path_blurred((uint64_t)a2);
  CGPathRelease(v51);
  *(float16x4_t *)(*((_QWORD *)v30 + 2) + 8) = v32;
  if ((v62 & 1) == 0)
    goto LABEL_43;
}

int8x16_t *CA::OGL::emit_shadow_round_rect(CA::OGL::Context *this, float64x2_t *a2, float32x2_t *a3, float16x4_t *a4, int a5, int a6, int a7, uint64_t a8, double a9, double a10, int a11, uint64_t a12)
{
  double v21;
  double v22;
  double v23;
  BOOL v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  float32x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float16x4_t v34;
  int v35;
  int v36;
  int8x16_t *result;
  double v41;
  double v42;
  double v43;
  double v44;
  float16x4_t v45;
  double v46;
  char v47;
  float v48;
  uint64_t v49;
  float v50;
  float *v51;
  float v52;
  float v53;
  uint64_t v54;
  float *v55;
  float v56;
  uint64_t i;
  float32x2_t v58;
  float32x2_t v59;
  int8x8_t v60;
  float v61;
  float32x2_t v62;
  float32_t v63;
  float32_t v64;
  float32_t v65;
  uint64_t v66;
  float32x2_t *v67;
  double v68;
  double v69;
  float64_t v70;
  double v71;
  float64_t v72;
  int8x16_t v73;
  int8x16_t v75;
  unsigned int v76;
  float64x2_t v77;
  float v78;
  int v79;
  int v80;
  float *v81;
  float *v82;
  float64x2_t v83;
  float64x2_t v84;
  double v85;
  float16x4_t v86;
  _QWORD v87[2];
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  _OWORD v93[2];
  _OWORD v94[2];
  _OWORD v95[2];
  _OWORD v96[2];
  _OWORD v97[4];
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  _BYTE v107[12];
  int v108;
  _BYTE v109[12];
  int v110;
  double v111[4];
  double v112[4];
  uint64_t v113;
  float32x2_t v114;
  float v115;
  _OWORD v116[3];
  __int128 v117;
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  if (a11)
    v21 = a9;
  else
    v21 = 0.0;
  v22 = a2[1].f64[0];
  v23 = 1.0;
  if (a11)
    _NF = v21 < 1.0;
  else
    _NF = 1;
  if (!_NF || (v22 >= a10 * 5.6 ? (v25 = a2[1].f64[1] < a10 * 5.6) : (v25 = 1), v25))
  {
    v26 = a10 * 2.8;
    if ((_DWORD)a8)
      v23 = 1.528665;
    v85 = v21;
    v27 = v26 + v21 * v23;
    v28 = v27 + v27;
    if (v27 + v27 < v22
      && a11 == 15
      && v28 < a2[1].f64[1]
      && (*(unsigned int (**)(CA::OGL::Context *, uint64_t))(*(_QWORD *)this + 184))(this, 37))
    {
      if (byte_1ECDC6AEF)
        *a4 = (float16x4_t)0x3C003A0000003400;
      v31 = *a2;
      v32 = a2[1];
      _Q0 = vaddq_f64(*a2, vcvtq_f64_f32(*a3));
      *a2 = _Q0;
      v34 = *a4;
      if (a5 >= 255)
        v35 = 255;
      else
        v35 = a5;
      v36 = v35 & ~(v35 >> 31);
      v83 = v31;
      v84 = v32;
      if (*(_QWORD *)&v34 == 0x3C003C003C003C00)
      {
        *(float *)_Q0.f64 = (float)v36 * 0.0039216;
        __asm { FCVT            H0, S0 }
        *(int16x4_t *)&_Q0.f64[0] = vdup_lane_s16(*(int16x4_t *)&_Q0.f64[0], 0);
      }
      else
      {
        *(float16x4_t *)&_Q0.f64[0] = vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(v34), (float)v36 * 0.0039216));
      }
      v46 = COERCE_DOUBLE(vcvt_f16_f32(vmulq_f32(vcvtq_f32_f16(*(float16x4_t *)(*((_QWORD *)this + 29) + 32)), vcvtq_f32_f16(*(float16x4_t *)&_Q0.f64[0]))));
      if (*(_QWORD *)(*((_QWORD *)this + 29) + 32) != 0x3C003C003C003C00)
        _Q0.f64[0] = v46;
      *(float64_t *)(*((_QWORD *)this + 2) + 8) = _Q0.f64[0];
      if (a6)
        v47 = 12;
      else
        v47 = 3;
      *(_BYTE *)(*((_QWORD *)this + 2) + 16) = v47;
      v114 = 0;
      v113 = 0;
      v115 = 0.0;
      v48 = v85 / a10;
      if (v48 <= 20.0)
      {
        v54 = 0;
        v55 = &CA::OGL::emit_shadow_round_rect(CA::OGL::Context &,CA::Rect &,CA::Vec2<float> const&,double,double,CA::OGL::ExtendedColor,int,BOOL,BOOL,unsigned int,unsigned int,CA::Transform const&,float)::w[55 * ((_DWORD)a8 != 0)];
        do
        {
          v56 = CA::OGL::emit_shadow_round_rect(CA::OGL::Context &,CA::Rect &,CA::Vec2<float> const&,double,double,CA::OGL::ExtendedColor,int,BOOL,BOOL,unsigned int,unsigned int,CA::Transform const&,float)::w[55 * ((_DWORD)a8 != 0) + 10 + 11 * v54];
          for (i = 9; i != -1; --i)
            v56 = v55[i] + (float)(v56 * v48);
          *((float *)&v113 + v54++) = v56;
          v55 += 11;
        }
        while (v54 != 5);
      }
      else
      {
        v49 = 0;
        v50 = -v48;
        v51 = (float *)((char *)&CA::OGL::emit_shadow_round_rect(CA::OGL::Context &,CA::Rect &,CA::Vec2<float> const&,double,double,CA::OGL::ExtendedColor,int,BOOL,BOOL,unsigned int,unsigned int,CA::Transform const&,float)::w
                      + 60 * ((_DWORD)a8 != 0)
                      + 4);
        do
        {
          v52 = *(v51 - 1);
          v53 = *v51;
          *(float *)((char *)&v113 + v49) = v52 + (float)(exp2f(v50 / v51[1]) * v53);
          v49 += 4;
          v51 += 3;
        }
        while (v49 != 20);
      }
      v30.f32[0] = (float)(*((float *)&v113 + 1) * 60.0) + (float)(*(float *)&v113 * -60.0);
      v58.i32[1] = v114.i32[1];
      v59 = vmul_f32(v114, (float32x2_t)0xC0A00000C1F00000);
      v60 = (int8x8_t)vadd_f32(v59, v30);
      v30.f32[1] = *((float *)&v113 + 1) * 20.0;
      v61 = vmlas_n_f32(-(float)((float)(*((float *)&v113 + 1) * 60.0) + (float)(*(float *)&v113 * -90.0)), 15.0, v114.f32[0]);
      v58.f32[0] = v114.f32[0] + *(float *)&v113;
      v62 = vmla_f32((float32x2_t)vext_s8((int8x8_t)vsub_f32(v59, v30), v60, 4uLL), (float32x2_t)0x40C0000041700000, v58);
      v63 = (float)(*((float *)&v113 + 1) * 20.0) + (float)(*(float *)&v113 * -60.0);
      v64 = *(float *)&v113 * 15.0;
      v65 = v27 / fmax(a10 * 1.41421356, 0.5);
      v58.f32[0] = v115 * v65;
      v66 = *((_QWORD *)this + 2);
      *(_OWORD *)(v66 + 96) = xmmword_18474E210;
      *(_BYTE *)(v66 + 17) = 14;
      v67 = (float32x2_t *)*((_QWORD *)this + 2);
      v67[48] = v62;
      v67[49].f32[0] = v61;
      v67[49].f32[1] = v63;
      v67[50].f32[0] = v64;
      v67[50].f32[1] = v65;
      v67[51].i32[0] = v58.i32[0];
      v68 = a2->f64[0];
      v69 = a2->f64[1];
      v70 = a2->f64[0] + v27;
      v112[0] = a2->f64[0] - v26;
      v112[1] = v70;
      v71 = a2[1].f64[1];
      v72 = a2[1].f64[0] + v68;
      v112[2] = v72 - v27;
      v112[3] = v72 + v26;
      v111[0] = v69 - v26;
      v111[1] = v69 + v27;
      v111[2] = v71 + v69 - v27;
      v111[3] = v71 + v69 + v26;
      *(_QWORD *)&v109[4] = 0x80000000800000;
      *(float *)&v72 = (v27 + v26 + v27 + v26) / v28;
      *(_DWORD *)v109 = LODWORD(v72);
      v110 = LODWORD(v72);
      *(_QWORD *)&v107[4] = 0x80000000800000;
      *(_DWORD *)v107 = LODWORD(v72);
      v108 = LODWORD(v72);
      if (a7)
      {
        *(_BYTE *)(*((_QWORD *)this + 2) + 16) = 14;
        v105 = 0u;
        v106 = 0u;
        v103 = 0u;
        v104 = 0u;
        v101 = 0;
        v102 = 0;
        v99 = 0;
        v100 = 0;
        v98 = 0;
        v117 = 0u;
        memset(v116, 0, sizeof(v116));
        memset(v97, 0, sizeof(v97));
        memset(v96, 0, sizeof(v96));
        memset(v95, 0, sizeof(v95));
        memset(v94, 0, sizeof(v94));
        memset(v93, 0, sizeof(v93));
        if ((_DWORD)a8)
        {
          v73 = (int8x16_t)vaddq_f64(vdivq_f64(vmulq_f64(v84, (float64x2_t)vdupq_n_s64(0xBFF721E8A7A4B61BLL)), (float64x2_t)vdupq_lane_s64(COERCE__INT64(v85 * 1.528665), 0)), (float64x2_t)vdupq_n_s64(0x400721E8A7A4B61BuLL));
          __asm { FMOV            V1.2D, #1.0 }
          v75 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v73, (float64x2_t)_Q1), _Q1, v73);
          v87[0] = vcvt_f32_f64((float64x2_t)vbicq_s8(v75, (int8x16_t)vcltzq_f64((float64x2_t)v75)));
          v85 = v85 * 1.528665;
          LODWORD(v29) = vcvtpd_s64_f64(v85);
          (*(void (**)(CA::OGL::Context *, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t *, uint64_t, _QWORD *))(*(_QWORD *)this + 464))(this, 1, v29, 0, 0, &v102, a8, v87);
        }
        else
        {
          LODWORD(v29) = vcvtpd_s64_f64(v85);
          (*(void (**)(CA::OGL::Context *, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t *))(*(_QWORD *)this
                                                                                                  + 456))(this, 1, v29, 0, 0, &v102);
        }
        *(float64_t *)&v105 = v83.f64[0];
        *((double *)&v105 + 1) = v85 + v83.f64[0];
        v77 = vaddq_f64(v84, v83);
        *(double *)&v106 = v77.f64[0] - v85;
        *((_QWORD *)&v106 + 1) = *(_QWORD *)&v77.f64[0];
        *(float64_t *)&v103 = v83.f64[1];
        *((_QWORD *)&v104 + 1) = *(_QWORD *)&v77.f64[1];
        *((double *)&v103 + 1) = v85 + v83.f64[1];
        *(double *)&v104 = v77.f64[1] - v85;
        v78 = *(float *)&v102;
        LODWORD(v100) = v102;
        *((float *)&v100 + 1) = *(float *)&v102 + (float)((float)(*((float *)&v102 + 1) - *(float *)&v102) * 0.5);
        *(float *)&v101 = *((float *)&v100 + 1);
        HIDWORD(v101) = HIDWORD(v102);
        LODWORD(v98) = v102;
        *((float *)&v98 + 1) = *((float *)&v100 + 1);
        *(float *)&v99 = *((float *)&v100 + 1);
        HIDWORD(v99) = HIDWORD(v102);
        v79 = CA::OGL::merge_compressed_geometry((CA::OGL *)v112, (const double *)&v105, (const double *)v109, (const float *)&v100, (const float *)3, 0.0, (uint64_t)v116, 1.1755e-38, *(float *)&v102, (double *)v96, (float *)v95, v81);
        v80 = CA::OGL::merge_compressed_geometry((CA::OGL *)v111, (const double *)&v103, (const double *)v107, (const float *)&v98, (const float *)3, 0.0, (uint64_t)v97, 2.0, v78, (double *)v94, (float *)v93, v82);
        v87[0] = a2;
        v87[1] = a12;
        v88 = 63;
        v89 = 0;
        v91 = 0;
        v90 = 0;
        v92 = 0;
        CA::OGL::emit_n_part_rect((uint64_t)this, (uint64_t)v87, v79 - 1, v80 - 1, (float64_t *)v116, (uint64_t)v97, v96, (uint64_t)v94, v95, (uint64_t)v93, 0);
      }
      else
      {
        *(_QWORD *)&v116[0] = a2;
        *((_QWORD *)&v116[0] + 1) = a12;
        if (a6)
          v76 = 278528;
        else
          v76 = 0x20000;
        memset((char *)&v116[1] + 4, 0, 28);
        LODWORD(v116[1]) = 63;
        CA::OGL::emit_nine_part_rect((uint64_t)this, (uint64_t)v116, (uint64_t)v112, (uint64_t)v111, (uint64_t)v109, (uint64_t)v107, 0, 0, v76);
      }
      result = (int8x16_t *)(*(uint64_t (**)(CA::OGL::Context *, _QWORD, _QWORD))(*(_QWORD *)this + 520))(this, 0, 0);
      *(_BYTE *)(*((_QWORD *)this + 2) + 16) = 0;
    }
    else
    {
      result = (int8x16_t *)CA::OGL::Context::shadow_cache(this);
      if (result)
      {
        v41 = 0.0;
        if ((a11 & 4) != 0)
          v42 = v85;
        else
          v42 = 0.0;
        *(double *)v116 = v42;
        *((double *)v116 + 1) = v42;
        if ((a11 & 8) != 0)
          v43 = v85;
        else
          v43 = 0.0;
        *(double *)&v116[1] = v43;
        *((double *)&v116[1] + 1) = v43;
        if ((a11 & 2) != 0)
          v44 = v85;
        else
          v44 = 0.0;
        *(double *)&v116[2] = v44;
        *((double *)&v116[2] + 1) = v44;
        if ((a11 & 1) != 0)
          v41 = v85;
        *(double *)&v117 = v41;
        *((double *)&v117 + 1) = v41;
        result = CA::Render::ShadowCache::lookup_rounded_rect_path((uint64_t)result, a2->f64, (double *)v116, a8 != 0);
        if (result)
          return (int8x16_t *)CA::OGL::emit_shadow_path((uint64_t)this);
      }
    }
  }
  else
  {
    if (byte_1ECDC6AEF)
    {
      *a4 = (float16x4_t)0x3C0038CD00003400;
      v45 = (float16x4_t)0x3C0038CD00003400;
    }
    else
    {
      v45 = *a4;
    }
    v86 = v45;
    return (int8x16_t *)CA::OGL::emit_shadow_rect(this, a2, a3, &v86, a5, a6, a7, a12, a10);
  }
  return result;
}

uint64_t CASRegisterClient(mach_port_name_t a1, const audit_token_t *a2, mach_port_name_t a3, mach_port_name_t a4, char a5, const UInt8 *a6, unsigned int a7, _DWORD *a8, _DWORD *a9, pid_t *a10, CA::Render::Server *a11)
{
  mach_port_name_t v16;
  CFIndex v18;
  __int16 v19;
  const audit_token_t *v20;
  ipc_space_t *v21;
  const __CFAllocator *v22;
  const __CFData *v23;
  const __CFData *v24;
  CFPropertyListRef v25;
  const void *v26;
  CFTypeID v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  malloc_zone_t *malloc_zone;
  CA::Render::Context *v32;
  CA::Render::Context *v33;
  CA::Render::Server *v34;
  ipc_space_t v35;
  mach_port_t v36;
  task_name_t v37;
  const audit_token_t *v38;
  const audit_token_t *v39;
  unsigned int v40;
  const audit_token_t *v41;
  unsigned int *v42;
  unsigned int v43;
  const UInt8 *v45;
  mach_vm_size_t size;
  mach_port_t previous;
  mach_msg_type_number_t task_info_outCnt;
  uint64_t v50;

  v16 = a2;
  v50 = *MEMORY[0x1E0C80C00];
  v18 = a7;
  v19 = CA::Render::Server::audit_token_cache_lookup(a11, a2);
  v21 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
  size = v18;
  if ((v19 & 0x2000) != 0)
  {
    v28 = 4213784577;
    if (a4)
LABEL_30:
      mach_port_deallocate(*v21, a4);
  }
  else
  {
    v45 = a6;
    if (a7
      && (v22 = (const __CFAllocator *)*MEMORY[0x1E0C9AE18],
          (v23 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE18], a6, v18)) != 0))
    {
      v24 = v23;
      v25 = CFPropertyListCreateWithData(v22, v23, 0, 0, 0);
      v26 = v25;
      if (v25)
      {
        v27 = CFGetTypeID(v25);
        if (v27 != CFDictionaryGetTypeID())
        {
          CFRelease(v26);
          v26 = 0;
        }
      }
      CFRelease(v24);
    }
    else
    {
      v26 = 0;
    }
    v29 = CA::Render::Server::audit_token_cache_lookup(a11, v20);
    v30 = *((_DWORD *)a11 + 5);
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v32 = (CA::Render::Context *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x2E8uLL, 0x743898A5uLL);
    v33 = v32;
    if (v32)
    {
      v34 = CA::Render::Context::Context(v32, (const __CFDictionary *)v26, (v29 >> 9) & 4 | (v29 >> 1) & 3, a5 & 8, v30);
      *((_DWORD *)v33 + 63) = a1;
      *((_DWORD *)v33 + 64) = v16;
      *((_DWORD *)v33 + 65) = a3;
      *((_DWORD *)v33 + 66) = a4;
      previous = 0;
      v35 = *v21;
      v36 = CA::Render::Server::notify_port(v34);
      mach_port_request_notification(v35, v16, 72, 0, v36, 0x15u, &previous);
      if (previous)
        mach_port_deallocate(*v21, previous);
      *((_DWORD *)v33 + 3) |= 0x1401000u;
      CA::Render::Context::set_display_mask(v33, *((_DWORD *)v33 + 152));
      CA::Render::Context::set_display_id(v33, *((_DWORD *)v33 + 153));
      v37 = *((_DWORD *)v33 + 63);
      if (v37)
      {
        task_info_outCnt = 8;
        task_info(v37, 0xFu, (task_info_t)v33 + 49, &task_info_outCnt);
        atomic_store(*((_DWORD *)v33 + 54), (unsigned int *)v33 + 57);
        if ((CA::Render::Server::audit_token_cache_lookup((CA::Render::Context *)((char *)v33 + 196), v38) & 0x400) != 0)
          LOWORD(v40) = 256;
        else
          v40 = (CA::Render::Server::audit_token_cache_lookup((CA::Render::Context *)((char *)v33 + 196), v39) >> 9) & 0x100;
        *((_WORD *)v33 + 276) = *((_WORD *)v33 + 276) & 0xFEFF | v40;
        *((_WORD *)v33 + 276) = *((_WORD *)v33 + 276) & 0xFDFF | (CA::Render::Server::audit_token_cache_lookup((CA::Render::Context *)((char *)v33 + 196), v39) >> 3) & 0x200;
        *((_WORD *)v33 + 276) = *((_WORD *)v33 + 276) & 0xFBFF | ((unsigned __int16)CA::Render::Server::audit_token_cache_lookup((CA::Render::Context *)((char *)v33 + 196), v41) << 8) & 0x400;
      }
      *a8 = CA::Render::Context::server_port((mach_port_name_t *)v33);
      *a9 = *((_DWORD *)v33 + 4);
      *a10 = getpid();
      v42 = (unsigned int *)((char *)v33 + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (v43 == 1)
        (*(void (**)(CA::Render::Context *))(*(_QWORD *)v33 + 16))(v33);
      a1 = 0;
      v16 = 0;
      a3 = 0;
      a4 = 0;
    }
    if (v26)
      CFRelease(v26);
    if (v33)
      v28 = 0;
    else
      v28 = 5;
    a6 = v45;
    if (a4)
      goto LABEL_30;
  }
  if (a3)
    mach_port_deallocate(*v21, a3);
  if (v16)
    mach_port_deallocate(*v21, v16);
  if (a1)
    mach_port_deallocate(*v21, a1);
  mach_vm_deallocate(*v21, (mach_vm_address_t)a6, size);
  return v28;
}

uint64_t CA::Render::Server::audit_token_cache_lookup(CA::Render::Server *this, const audit_token_t *a2)
{
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;
  uint64_t v9;
  uint64_t *v10;
  malloc_zone_t *malloc_zone;
  __int128 v12;
  __int128 v13;
  SecTaskRef v14;
  __SecTask *v15;
  int v16;
  uint64_t i;
  CFTypeRef v18;
  const void *v19;
  unint64_t v20;
  BOOL v21;
  CFTypeRef v22;
  _QWORD *v23;
  malloc_zone_t *v24;
  _QWORD *v25;
  uint64_t v26;
  audit_token_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Server::_audit_token_lock);
  if (CA::Render::Server::_audit_token_cache)
  {
    v3 = 0;
    v4 = (uint64_t *)CA::Render::Server::_audit_token_cache;
    do
    {
      v5 = *v4;
      if (*(_DWORD *)(*v4 + 20) == *((_DWORD *)this + 5))
      {
        v6 = *(_QWORD *)v5 == *(_QWORD *)this && *(_QWORD *)(v5 + 8) == *((_QWORD *)this + 1);
        v7 = v6 && *(_QWORD *)(v5 + 16) == *((_QWORD *)this + 2);
        if (v7 && *(_QWORD *)(v5 + 24) == *((_QWORD *)this + 3))
        {
          v23 = x_list_remove((_QWORD *)CA::Render::Server::_audit_token_cache, *v4);
          CA::Render::Server::_audit_token_cache = (uint64_t)v23;
          goto LABEL_35;
        }
      }
      v4 = (uint64_t *)v4[1];
      ++v3;
    }
    while (v4);
    if (v3 < 0x10)
      goto LABEL_19;
    v9 = CA::Render::Server::_audit_token_cache;
    do
    {
      v10 = (uint64_t *)v9;
      v9 = *(_QWORD *)(v9 + 8);
    }
    while (v9);
    v5 = *v10;
    CA::Render::Server::_audit_token_cache = (uint64_t)x_list_remove((_QWORD *)CA::Render::Server::_audit_token_cache, *v10);
  }
  else
  {
LABEL_19:
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v5 = (uint64_t)malloc_type_zone_malloc(malloc_zone, 0x24uLL, 0x8BB15036uLL);
  }
  v12 = *((_OWORD *)this + 1);
  *(_OWORD *)v5 = *(_OWORD *)this;
  *(_OWORD *)(v5 + 16) = v12;
  v13 = *((_OWORD *)this + 1);
  *(_OWORD *)v28.val = *(_OWORD *)this;
  *(_OWORD *)&v28.val[4] = v13;
  v14 = SecTaskCreateWithAuditToken(0, &v28);
  if (v14)
  {
    v15 = v14;
    v16 = 0;
    for (i = 0; i != 17; ++i)
    {
      v18 = SecTaskCopyValueForEntitlement(v15, CA::Render::Server::entitlements_for_audit_token(audit_token_t const&)::str[i], 0);
      if (v18)
      {
        v19 = v18;
        v16 |= CA_CFBoolValue(v18) << i;
        CFRelease(v19);
      }
    }
    v20 = 0;
    v21 = 1;
    while (1)
    {
      v22 = SecTaskCopyValueForEntitlement(v15, CA::Render::Server::has_restricted_client_entitlement(__SecTask *)::entitlements[v20], 0);
      if (v22)
        break;
      v21 = v20++ < 2;
      if (v20 == 3)
        goto LABEL_32;
    }
    CFRelease(v22);
    if (v21)
      v16 |= 0x20000u;
LABEL_32:
    CFRelease(v15);
  }
  else
  {
    v16 = 0;
  }
  *(_DWORD *)(v5 + 32) = v16;
  v23 = (_QWORD *)CA::Render::Server::_audit_token_cache;
LABEL_35:
  v24 = (malloc_zone_t *)get_malloc_zone();
  v25 = malloc_type_zone_malloc(v24, 0x10uLL, 0x8BB15036uLL);
  *v25 = v5;
  v25[1] = v23;
  CA::Render::Server::_audit_token_cache = (uint64_t)v25;
  v26 = *(unsigned int *)(v5 + 32);
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Server::_audit_token_lock);
  return v26;
}

_QWORD *x_list_remove(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  malloc_zone_t *malloc_zone;
  _QWORD *v6;

  v6 = result;
  if (result)
  {
    v3 = result;
    v4 = &v6;
    do
    {
      if (*v3 == a2)
      {
        *v4 = v3[1];
        malloc_zone = (malloc_zone_t *)get_malloc_zone();
        malloc_zone_free(malloc_zone, v3);
      }
      else
      {
        v4 = v3 + 1;
      }
      v3 = (_QWORD *)*v4;
    }
    while (*v4);
    return v6;
  }
  return result;
}

void CA::Render::LayerHost::commit_layer(CA::Render::LayerHost *this, CA::Render::Context *a2, CA::Render::Layer *a3, CA::Render::Handle *a4, int a5)
{
  CA::Render::Handle *v8;
  CA::Render::Handle *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  v8 = (CA::Render::Handle *)*((_QWORD *)this + 3);
  if (v8 != a4)
  {
    v9 = a4;
    if (v8)
    {
      v10 = (unsigned int *)((char *)v8 + 8);
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(CA::Render::Handle *, CA::Render::Context *, CA::Render::Layer *))(*(_QWORD *)v8 + 16))(v8, a2, a3);
    }
    if (v9)
    {
      v13 = (unsigned int *)((char *)v9 + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
      if (!v14)
      {
        v9 = 0;
        do
          v19 = __ldaxr(v13);
        while (__stlxr(v19 - 1, v13));
      }
    }
    *((_QWORD *)this + 3) = v9;
  }
  if ((a5 & 0x200000) != 0)
  {
    CA::Render::LayerHost::retain_hosted_context((CA::Render::LayerHost *)v20, this, (uint64_t)a2, 0);
    v15 = v20[0];
    if (v20[0])
    {
      v16 = (unsigned int *)(v20[0] + 8);
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
    }
  }
  else
  {
    CA::Render::LayerHost::invalidate(this);
  }
}

void CA::Render::LayerHost::retain_hosted_context(CA::Render::LayerHost *this, CA::Render::Context *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  malloc_zone_t *malloc_zone;
  _QWORD *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  CA::Render *v19;
  BOOL v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  CA::Render::Context *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  int v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  malloc_zone_t *v38;
  void *v39;
  __n128 v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  __n128 v44;
  unsigned int *v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  const CA::Render::Context *v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  CA::Render::Context *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  uint8_t buf[8];
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
  if (a4)
  {
    v8 = *((_QWORD *)a2 + 9);
    if (v8)
    {
      v9 = (unsigned int *)(v8 + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
      if (!v10)
      {
        v8 = 0;
        do
          v11 = __ldaxr(v9);
        while (__stlxr(v11 - 1, v9));
      }
    }
    goto LABEL_13;
  }
  v12 = *((_QWORD *)a2 + 10);
  if (!v12)
  {
    *((_QWORD *)a2 + 10) = a3;
    v13 = *(_QWORD *)(a3 + 424);
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v15 = malloc_type_zone_malloc(malloc_zone, 0x10uLL, 0x8BB15036uLL);
    *v15 = a2;
    v15[1] = v13;
    *(_QWORD *)(a3 + 424) = v15;
    v12 = *((_QWORD *)a2 + 10);
  }
  if (v12 != a3)
  {
    v8 = 0;
LABEL_13:
    *(_QWORD *)this = v8;
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
    return;
  }
  v16 = *((_QWORD *)a2 + 9);
  if (!v16)
  {
    v25 = (CA::Render::Context *)*((unsigned int *)a2 + 4);
    if (!(_DWORD)v25)
      goto LABEL_85;
    if (a3)
    {
      v26 = a3;
      while ((_DWORD)v25 != *(_DWORD *)(v26 + 16))
      {
        v27 = *(_QWORD *)(v26 + 416);
        if (v27)
        {
          v26 = *(_QWORD *)(v27 + 80);
          if (v26)
            continue;
        }
        goto LABEL_39;
      }
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v28 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          v29 = *((_DWORD *)a2 + 4);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v29;
          _os_log_impl(&dword_184457000, v28, OS_LOG_TYPE_DEFAULT, "CoreAnimation: LayerHost trying to host itself or one of its ancestors (context id %d)\n", buf, 8u);
        }
      }
      v25 = 0;
      *((_DWORD *)a2 + 4) = 0;
    }
LABEL_39:
    v30 = CA::Render::Context::context_by_id(v25);
    if (!v30)
      goto LABEL_85;
    v16 = v30;
    v31 = *(_QWORD **)(v30 + 416);
    if (v31)
    {
      v32 = v31[10];
      *(_QWORD *)(v32 + 424) = x_list_remove(*(_QWORD **)(v32 + 424), (uint64_t)v31);
      *(_QWORD *)(v16 + 416) = 0;
      v31[9] = 0;
      v31[10] = 0;
      *(_DWORD *)(v32 + 12) |= 0x2000u;
      v33 = (unsigned int *)(v16 + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 + 1, v33));
      v19 = (CA::Render *)v16;
      if (!v34)
      {
        v19 = 0;
        do
          v66 = __ldaxr(v33);
        while (__stlxr(v66 - 1, v33));
      }
      v35 = v31[4];
      v31[4] = 0;
      *((_QWORD *)a2 + 9) = v16;
      *(_QWORD *)buf = v35;
      if ((*((_BYTE *)a2 + 13) & 4) == 0)
        goto LABEL_72;
      if (v35)
      {
        X::Ref<CA::Render::AsynchronousState>::operator=((unsigned int **)a2 + 4, (unsigned int **)buf);
LABEL_71:
        v57 = *((_QWORD *)a2 + 4);
        *(_BYTE *)(v57 + 21) = (*((_DWORD *)a2 + 3) & 0x800) != 0;
        *(_QWORD *)(v57 + 64) = *((_QWORD *)a2 + 8);
        std::vector<unsigned long long>::__move_assign(v57 + 40, (__n128 *)((char *)a2 + 40));
        *((_QWORD *)a2 + 6) = *((_QWORD *)a2 + 5);
LABEL_72:
        *(_QWORD *)(v16 + 416) = a2;
        if ((*(_WORD *)(*((_QWORD *)a2 + 10) + 552) & 1) != 0)
          v58 = (const CA::Render::Context *)*((_QWORD *)a2 + 10);
        else
          v58 = 0;
        CA::Render::Context::update_backdrop_namespaces_locked(v16, v58);
        CA::Render::Context::set_visible_locked((CA::Render::Context *)v16, *(_DWORD *)(a3 + 352) != 0);
        do
          v59 = __ldaxr((unsigned int *)&CA::Render::LayerHost::_seed);
        while (__stlxr(v59 + 1, (unsigned int *)&CA::Render::LayerHost::_seed));
        v60 = *(_QWORD *)buf;
        if (*(_QWORD *)buf)
        {
          v61 = (unsigned int *)(*(_QWORD *)buf + 8);
          do
          {
            v62 = __ldaxr(v61);
            v63 = v62 - 1;
          }
          while (__stlxr(v63, v61));
          if (!v63)
            (*(void (**)(uint64_t))(*(_QWORD *)v60 + 16))(v60);
        }
        os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
        v20 = v19 == 0;
        if (v19)
          CA::Render::invalidate_context(v19, v64);
        goto LABEL_19;
      }
    }
    else
    {
      v36 = (unsigned int *)(v30 + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 + 1, v36));
      v19 = (CA::Render *)v30;
      if (!v37)
      {
        v19 = 0;
        do
          v67 = __ldaxr(v36);
        while (__stlxr(v67 - 1, v36));
      }
      *((_QWORD *)a2 + 9) = v30;
      *(_QWORD *)buf = 0;
      if ((*((_BYTE *)a2 + 13) & 4) == 0)
        goto LABEL_72;
    }
    v38 = (malloc_zone_t *)get_malloc_zone();
    v39 = malloc_type_zone_malloc(v38, 0x48uLL, 0x8BB15036uLL);
    if (v39)
    {
      v41 = *((_QWORD *)a2 + 3);
      if (v41)
      {
        v42 = (unsigned int *)(v41 + 8);
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 + 1, v42));
        if (!v43)
        {
          v41 = 0;
          do
            v68 = __ldaxr(v42);
          while (__stlxr(v68 - 1, v42));
        }
      }
      v69 = v41;
      v44.n128_f64[0] = CA::Render::AsynchronousState::AsynchronousState((uint64_t)v39, &v69, *((_DWORD *)a2 + 4));
      v45 = (unsigned int *)*((_QWORD *)a2 + 4);
      *((_QWORD *)a2 + 4) = v46;
      if (v45)
      {
        v47 = v45 + 2;
        do
        {
          v48 = __ldaxr(v47);
          v49 = v48 - 1;
        }
        while (__stlxr(v49, v47));
        if (!v49)
          (*(void (**)(unsigned int *, __n128))(*(_QWORD *)v45 + 16))(v45, v44);
      }
      if (v41)
      {
        v50 = (unsigned int *)(v41 + 8);
        do
        {
          v51 = __ldaxr(v50);
          v52 = v51 - 1;
        }
        while (__stlxr(v52, v50));
        if (!v52)
          (*(void (**)(uint64_t, __n128))(*(_QWORD *)v41 + 16))(v41, v44);
      }
    }
    else
    {
      v53 = (unsigned int *)*((_QWORD *)a2 + 4);
      *((_QWORD *)a2 + 4) = 0;
      if (v53)
      {
        v54 = v53 + 2;
        do
        {
          v55 = __ldaxr(v54);
          v56 = v55 - 1;
        }
        while (__stlxr(v56, v54));
        if (!v56)
          (*(void (**)(unsigned int *, __n128))(*(_QWORD *)v53 + 16))(v53, v40);
      }
    }
    goto LABEL_71;
  }
  v17 = (unsigned int *)(v16 + 8);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 + 1, v17));
  if (!v18)
  {
    do
      v65 = __ldaxr(v17);
    while (__stlxr(v65 - 1, v17));
LABEL_85:
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
    *(_QWORD *)this = 0;
    return;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
  v19 = 0;
  v20 = 1;
LABEL_19:
  CA::Render::Context::set_display_mask((CA::Render::Context *)v16, *(_DWORD *)(a3 + 608));
  CA::Render::Context::set_display_id((CA::Render::Context *)v16, *(_DWORD *)(a3 + 612));
  v21 = *(_QWORD *)(a3 + 600);
  if (*(_QWORD *)(v16 + 600) != v21)
  {
    *(_QWORD *)(v16 + 600) = v21;
    if (*(_DWORD *)(v16 + 256))
      *(_DWORD *)(v16 + 12) |= 0x400000u;
  }
  *(_QWORD *)this = v16;
  if (!v20)
  {
    v22 = (unsigned int *)((char *)v19 + 8);
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
      (*(void (**)(CA::Render *))(*(_QWORD *)v19 + 16))(v19);
  }
}

void CA::Render::Context::set_display_mask(CA::Render::Context *this, int a2)
{
  mach_port_t v3;
  mach_msg_return_t v4;
  mach_msg_header_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 152) != a2)
  {
    *((_DWORD *)this + 152) = a2;
    if (*((_DWORD *)this + 64))
      *((_DWORD *)this + 3) |= 0x1000u;
  }
  if ((*((_BYTE *)this + 13) & 0x10) != 0)
  {
    v3 = *((_DWORD *)this + 64);
    v6 = *MEMORY[0x1E0C804E8];
    v7 = a2;
    *(_QWORD *)&v5.msgh_bits = 19;
    v5.msgh_voucher_port = 0;
    v5.msgh_id = 40400;
    v5.msgh_remote_port = v3;
    v5.msgh_local_port = 0;
    if (MEMORY[0x1E0C85B60])
      voucher_mach_msg_set(&v5);
    v4 = mach_msg(&v5, 17, 0x24u, 0, 0, 0, 0);
    if ((v4 - 268435459) > 1)
    {
      if (!v4)
        *((_DWORD *)this + 3) &= ~0x1000u;
    }
    else
    {
      if ((v5.msgh_bits & 0x1F00) == 0x1100)
        mach_port_deallocate(*MEMORY[0x1E0C83DA0], v5.msgh_local_port);
      mach_msg_destroy(&v5);
    }
  }
}

void CA::Render::Context::set_display_id(CA::Render::Context *this, int a2)
{
  mach_port_t v3;
  mach_msg_return_t v4;
  mach_msg_header_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 153) != a2)
  {
    *((_DWORD *)this + 153) = a2;
    if (*((_DWORD *)this + 64))
      *((_DWORD *)this + 3) |= 0x1000000u;
  }
  if ((*((_BYTE *)this + 15) & 1) != 0)
  {
    v3 = *((_DWORD *)this + 64);
    v6 = *MEMORY[0x1E0C804E8];
    v7 = a2;
    *(_QWORD *)&v5.msgh_bits = 19;
    v5.msgh_voucher_port = 0;
    v5.msgh_id = 40401;
    v5.msgh_remote_port = v3;
    v5.msgh_local_port = 0;
    if (MEMORY[0x1E0C85B60])
      voucher_mach_msg_set(&v5);
    v4 = mach_msg(&v5, 17, 0x24u, 0, 0, 0, 0);
    if ((v4 - 268435459) > 1)
    {
      if (!v4)
        *((_DWORD *)this + 3) &= ~0x1000000u;
    }
    else
    {
      if ((v5.msgh_bits & 0x1F00) == 0x1100)
        mach_port_deallocate(*MEMORY[0x1E0C83DA0], v5.msgh_local_port);
      mach_msg_destroy(&v5);
    }
  }
}

uint64_t CA::Render::Context::context_by_id(CA::Render::Context *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v1 = 0;
  if ((_DWORD)this && CA::Render::Context::_context_table)
  {
    v2 = this;
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Context::_context_lock);
    v3 = x_hash_table_lookup(CA::Render::Context::_context_table, v2, 0);
    v1 = v3;
    if (v3)
    {
      if ((*(_BYTE *)(v3 + 13) & 4) != 0)
      {
        v1 = 0;
      }
      else
      {
        v4 = (unsigned int *)(v3 + 8);
        do
          v5 = __ldaxr(v4);
        while (__stlxr(v5 + 1, v4));
        if (!v5)
        {
          v1 = 0;
          do
            v6 = __ldaxr(v4);
          while (__stlxr(v6 - 1, v4));
        }
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Context::_context_lock);
  }
  return v1;
}

uint64_t CA::Render::Context::update_backdrop_namespaces_locked(uint64_t this, const CA::Render::Context *a2)
{
  _QWORD *v3;
  uint64_t v4;

  if ((*(_WORD *)(this + 552) & 1) != 0)
    a2 = (const CA::Render::Context *)this;
  *(_QWORD *)(this + 544) = a2;
  v3 = *(_QWORD **)(this + 424);
  if (v3)
  {
    v4 = this;
    do
    {
      this = *(_QWORD *)(*v3 + 72);
      if (this)
        this = CA::Render::Context::update_backdrop_namespaces_locked((CA::Render::Context *)this, *(const CA::Render::Context **)(v4 + 544));
      v3 = (_QWORD *)v3[1];
    }
    while (v3);
  }
  return this;
}

void CA::Render::Context::set_visible_locked(CA::Render::Context *this, int a2)
{
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  malloc_zone_t *malloc_zone;
  _QWORD *v8;
  CA::Render::ImageQueue **v9;
  CA::Render::ImageQueue **v10;
  CA::Render::ImageQueue *v11;
  CA::Render::Context *v12;
  _QWORD *v13;
  malloc_zone_t *v14;

  if (*((_DWORD *)this + 88) != a2)
  {
    *((_DWORD *)this + 88) = a2;
    v4 = (uint64_t *)*((_QWORD *)this + 53);
    if (v4)
    {
      v5 = 0;
      do
      {
        v6 = *v4;
        malloc_zone = (malloc_zone_t *)get_malloc_zone();
        v8 = malloc_type_zone_malloc(malloc_zone, 0x10uLL, 0x8BB15036uLL);
        *v8 = v6;
        v8[1] = v5;
        v4 = (uint64_t *)v4[1];
        v5 = v8;
      }
      while (v4);
    }
    else
    {
      v8 = 0;
    }
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Context::_image_queues_lock);
    v10 = (CA::Render::ImageQueue **)*((_QWORD *)this + 45);
    v9 = (CA::Render::ImageQueue **)*((_QWORD *)this + 46);
    while (v10 != v9)
    {
      v11 = *v10++;
      CA::Render::ImageQueue::set_visible(v11, a2);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Context::_image_queues_lock);
    if (v8)
    {
      do
      {
        v12 = *(CA::Render::Context **)(*v8 + 72);
        if (v12)
          CA::Render::Context::set_visible_locked(v12, a2);
        v13 = (_QWORD *)v8[1];
        v14 = (malloc_zone_t *)get_malloc_zone();
        malloc_zone_free(v14, v8);
        v8 = v13;
      }
      while (v13);
    }
  }
}

uint64_t CA::Render::invalidate_context(CA::Render *this, CA::Render::Context *a2)
{
  pthread_mutex_t *v3;
  int32x2_t *v4;
  const CA::Bounds *v5;
  int32x2_t *v6;

  v3 = (pthread_mutex_t *)((char *)this + 72);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 72));
  v4 = (int32x2_t *)CA::Render::Context::root_layer_handle(this);
  if (v4)
  {
    v6 = v4;
    CA::Render::Context::invalidate(this, v4 + 14, v5);
    *(_QWORD *)&v6[12] |= 0xBuLL;
  }
  return pthread_mutex_unlock(v3);
}

void CA::Render::Update::invalidate_context(CA::Render::Update *this, CA::Render::Context *a2, int32x2_t *a3)
{
  CA::Render::Context::invalidate(a2, a3, (const CA::Bounds *)a3);
  CA::Render::Update::invalidate_backdrops(this, (const CA::Bounds *)a3, 0, 0xFFFFFFFF);
}

void CA::Render::Context::invalidate(CA::Render::Context *this, int32x2_t *a2, const CA::Bounds *a3)
{
  int v3;
  uint64_t *v5;
  uint64_t v6;

  v3 = a2[1].i32[0];
  if (v3 >= a2[1].i32[1])
    v3 = a2[1].i32[1];
  if (v3 >= 1)
  {
    if (*((_QWORD *)this + 72))
    {
      v5 = (uint64_t *)((char *)this + 576);
      CA::shape_union((CA::Shape **)this + 72, (CA::Shape **)a2, a3);
      v6 = *v5;
      if ((*v5 & 1) == 0 && *(int *)(v6 + 4) >= 65)
      {
        CA::Shape::get_bounds(v6, (int *)this + 146);
        CA::Shape::unref(*((CA::Shape **)this + 72));
        *((_QWORD *)this + 72) = 0;
      }
    }
    else
    {
      CA::BoundsImpl::Union((int32x2_t *)this + 73, *a2, a2[1]);
    }
  }
}

void CA::Render::Update::add_context(CA::Render::Update *this, CA::Render::Context *a2)
{
  uint64_t v4;
  CA::Render::Layer *v5;

  v4 = CA::Render::Context::root_layer_handle(a2);
  if (v4)
    v5 = *(CA::Render::Layer **)(v4 + 16);
  else
    v5 = 0;
  CA::Render::Update::add_context(this, a2, v5, 0);
}

uint64_t CA::Render::Context::root_layer_handle(CA::Render::Context *this)
{
  unint64_t v1;
  uint64_t result;
  const double *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v1 = *((_QWORD *)this + 34);
  if (v1)
  {
    result = *((_QWORD *)this + 35);
    if (result)
      return result;
    v5 = CA::Render::Context::lookup_handle(this, v1, 0, 0, 0);
    v6 = (unsigned int *)*((_QWORD *)this + 35);
    if (v6 != (unsigned int *)v5)
    {
      if (v6)
      {
        v7 = v6 + 2;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
          (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
      }
      if (v5)
      {
        v10 = (unsigned int *)(v5 + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 + 1, v10));
        if (!v11)
        {
          v5 = 0;
          do
            v12 = __ldaxr(v10);
          while (__stlxr(v12 - 1, v10));
        }
      }
      *((_QWORD *)this + 35) = v5;
    }
    if (v5)
    {
      *(_DWORD *)(v5 + 12) |= 0x100u;
      CA::Render::Handle::update_container_state(v5, v4);
      return *((_QWORD *)this + 35);
    }
  }
  return 0;
}

CA::Render::Context *CA::Render::Context::Context(CA::Render::Context *this, const __CFDictionary *a2, char a3, int a4, unsigned int a5)
{
  unsigned int *v10;
  malloc_zone_t *malloc_zone;
  __int128 v12;
  uint64_t v13;
  CA::Render::Context *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  const void *Value;
  const void *v20;
  const __CFString *v21;
  const __CFString *v22;
  CFTypeID v23;
  const __CFString *v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  const void *v30;
  const void *v31;
  const void *v32;
  _BOOL4 v33;
  const void *v34;
  _BOOL4 v35;
  const void *v36;
  _BOOL4 v37;
  const void *v38;
  const void *v39;
  _BOOL4 v40;
  int *v41;
  uint64_t v42;
  unsigned int v43;
  CA::Render::Context *v44;
  unsigned int v46;

  *((_DWORD *)this + 2) = 1;
  v10 = (unsigned int *)((char *)this + 8);
  *((_DWORD *)this + 3) = 10;
  ++dword_1ECDC7C50;
  *(_QWORD *)this = off_1E1598E30;
  *((_DWORD *)this + 13) = 0;
  *((_QWORD *)this + 18) = 0xF00000010;
  *((_DWORD *)this + 38) = 4;
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  *((_QWORD *)this + 17) = malloc_type_zone_calloc(malloc_zone, 1uLL, 0x80uLL, 0x743898A5uLL);
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *(_QWORD *)&v12 = -1;
  *((_QWORD *)&v12 + 1) = -1;
  *(_OWORD *)((char *)this + 196) = v12;
  *(_OWORD *)((char *)this + 212) = v12;
  *((_QWORD *)this + 35) = 0;
  *(_QWORD *)((char *)this + 236) = 0;
  *(_QWORD *)((char *)this + 228) = 0;
  *((_DWORD *)this + 61) = 0;
  *((_DWORD *)this + 77) = 1065353216;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *((_DWORD *)this + 86) = 1065353216;
  *((_DWORD *)this + 88) = 0;
  *((_DWORD *)this + 110) = 0;
  *((_DWORD *)this + 120) = 0;
  *((_QWORD *)this + 61) = 0;
  *((_QWORD *)this + 62) = 0;
  *((_QWORD *)this + 63) = 0;
  *((_QWORD *)this + 66) = 0;
  *((_QWORD *)this + 78) = 0;
  *((_DWORD *)this + 158) = 0;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 41) = 0u;
  *((_QWORD *)this + 51) = 0;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *((_DWORD *)this + 168) = 1065353216;
  *((_DWORD *)this + 170) = 0;
  *((_OWORD *)this + 43) = 0u;
  *((_OWORD *)this + 44) = 0u;
  *((_QWORD *)this + 90) = 0;
  *((_DWORD *)this + 182) = 1065353216;
  v13 = mach_absolute_time();
  *((double *)this + 58) = CATimeWithHostTime(v13);
  *((_QWORD *)this + 57) = 0x7FF0000000000000;
  *((_QWORD *)this + 64) = 0x7FF0000000000000;
  *((_QWORD *)this + 59) = -1;
  while (1)
  {
    do
    {
      v14 = (CA::Render::Context *)arc4random();
      *((_DWORD *)this + 4) = (_DWORD)v14;
    }
    while (!(_DWORD)v14);
    v15 = CA::Render::Context::context_by_id(v14);
    if (!v15)
      break;
    v16 = (unsigned int *)(v15 + 8);
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
  }
  x_thread_init_mutex((pthread_mutex_t *)((char *)this + 72), 1);
  if (a2)
  {
    *((_QWORD *)this + 4) = CFRetain(a2);
    Value = CFDictionaryGetValue(a2, CFSTR("disableGroupOpacity"));
    if (Value && CA_CFBoolValue(Value))
      *((_QWORD *)this + 3) |= 0x80uLL;
    v20 = CFDictionaryGetValue(a2, CFSTR("disableEdgeAA"));
    if (v20 && CA_CFBoolValue(v20))
      *((_QWORD *)this + 3) |= 0x100uLL;
    v21 = (const __CFString *)CFDictionaryGetValue(a2, CFSTR("name"));
    if (v21)
    {
      v22 = v21;
      v23 = CFGetTypeID(v21);
      if (v23 == CFStringGetTypeID())
      {
        v25 = CA::Render::String::new_string(v22, v24);
        v26 = (unsigned int *)*((_QWORD *)this + 30);
        *((_QWORD *)this + 30) = v25;
        if (v26)
        {
          v27 = v26 + 2;
          do
          {
            v28 = __ldaxr(v27);
            v29 = v28 - 1;
          }
          while (__stlxr(v29, v27));
          if (!v29)
            (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 16))(v26);
        }
      }
    }
    v30 = CFDictionaryGetValue(a2, CFSTR("backdropNamespace"));
    if (v30 && CA_CFBoolValue(v30))
      *((_WORD *)this + 276) |= 1u;
    v31 = CFDictionaryGetValue(a2, CFSTR("ignoresHitTest"));
    if (v31 && CA_CFBoolValue(v31))
      *((_QWORD *)this + 3) |= 0x200uLL;
    v32 = CFDictionaryGetValue(a2, CFSTR("displayable"));
    if (v32)
    {
      v33 = CA_CFBoolValue(v32);
      if ((a3 & 1) != 0 && v33)
      {
        *((_DWORD *)this + 3) |= 0x4000u;
        os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
        os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Context::_context_lock);
        CA::Render::Context::set_visible_locked(this, 1);
        os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Context::_context_lock);
        os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
      }
    }
    v34 = CFDictionaryGetValue(a2, CFSTR("secure"));
    if (v34)
    {
      v35 = CA_CFBoolValue(v34);
      if ((a3 & 2) != 0 && v35)
        *((_WORD *)this + 276) |= 4u;
    }
    v36 = CFDictionaryGetValue(a2, CFSTR("allowsOcclusionDetectionOverride"));
    if (v36)
    {
      v37 = CA_CFBoolValue(v36);
      if ((a3 & 4) != 0 && v37)
        *((_WORD *)this + 276) |= 8u;
    }
    v38 = CFDictionaryGetValue(a2, CFSTR("startSecureSuperlayersValidation"));
    if (v38 && CA_CFBoolValue(v38))
      *((_WORD *)this + 276) |= 0x10u;
    v39 = CFDictionaryGetValue(a2, CFSTR("stopSecureSuperlayersValidation"));
    if (v39)
    {
      v40 = CA_CFBoolValue(v39);
      if ((a3 & 2) != 0 && v40)
        *((_WORD *)this + 276) |= 0x20u;
    }
  }
  atomic_store(a5, (unsigned int *)this + 57);
  *((_DWORD *)this + 3) |= a4 << 8;
  *((_QWORD *)this + 72) = 1;
  *((_QWORD *)this + 71) = 0;
  *((_WORD *)this + 276) &= ~2u;
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Context::_context_lock);
  v41 = (int *)CA::Render::Context::_context_table;
  if (!CA::Render::Context::_context_table)
  {
    CA::Render::Context::_context_table = (uint64_t)x_hash_table_new_(0, 0, 0, 0, 0, 0);
    CA::Render::add_observer(0x30u, 0, (uint64_t)CA::Render::Context::get_debug_log, CA::Render::Context::_context_table, 0);
    v41 = (int *)CA::Render::Context::_context_table;
  }
  v42 = *((unsigned int *)this + 4);
  do
    v43 = __ldaxr(v10);
  while (__stlxr(v43 + 1, v10));
  v44 = this;
  if (!v43)
  {
    v44 = 0;
    do
      v46 = __ldaxr(v10);
    while (__stlxr(v46 - 1, v10));
  }
  hash_table_modify(v41, v42, (uint64_t)v44, 0);
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Context::_context_lock);
  CA::Render::post_notification(1u, (unint64_t)this, 0, 0);
  return this;
}

BOOL CA_CFBoolValue(const void *a1)
{
  CFTypeID v2;
  BOOL v3;
  int valuePtr;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = CFGetTypeID(a1);
  if (v2 == CFBooleanGetTypeID())
  {
    v3 = *MEMORY[0x1E0C9AE40] == (_QWORD)a1;
  }
  else
  {
    if (v2 != CFNumberGetTypeID())
      return 0;
    valuePtr = 0;
    CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
    v3 = valuePtr == 0;
  }
  return !v3;
}

uint64_t CA::Render::Context::server_port(mach_port_name_t *this)
{
  mach_port_name_t *v2;
  uint64_t v3;
  ipc_space_t *v4;
  CA::Render::Server *inserted;
  mach_port_name_t v6;
  mach_port_name_t v7;
  int *v8;

  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Context::_context_lock);
  v2 = this + 62;
  v3 = this[62];
  if (!(_DWORD)v3)
  {
    if ((*((_BYTE *)this + 13) & 4) != 0)
    {
      v3 = 0;
    }
    else
    {
      v4 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
      mach_port_allocate(*MEMORY[0x1E0C83DA0], 1u, this + 62);
      inserted = (CA::Render::Server *)mach_port_insert_right(*v4, *v2, *v2, 0x14u);
      LODWORD(v4) = *v4;
      v6 = *v2;
      v7 = CA::Render::Server::port_set(inserted);
      mach_port_move_member((ipc_space_t)v4, v6, v7);
      v8 = (int *)CA::Render::Context::_port_table;
      if (!CA::Render::Context::_port_table)
      {
        v8 = (int *)x_hash_table_new_(0, 0, 0, 0, 0, 0);
        CA::Render::Context::_port_table = (uint64_t)v8;
      }
      hash_table_modify(v8, this[62], (uint64_t)this, 0);
      v3 = this[62];
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Context::_context_lock);
  return v3;
}

uint64_t CA::OGL::emit_shadow_rect(_QWORD *a1, float64x2_t *a2, float32x2_t *a3, float16x4_t *a4, int a5, int a6, int a7, uint64_t a8, double a9)
{
  float16x4_t v17;
  int v18;
  int v19;
  double v24;
  char v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  float v37;
  float v38;
  double v39;
  double v40;
  double v41;
  double v42;
  float v43;
  float v44;
  float v45;
  double v46;
  double v47;
  unsigned int v48;
  uint64_t result;
  _QWORD v50[2];
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  _DWORD v56[4];
  _DWORD v57[4];
  _DWORD v58[2];
  uint64_t v59;
  _DWORD v60[2];
  uint64_t v61;
  double v62[4];
  double v63[4];
  uint64_t v64;
  _QWORD v65[2];

  v65[1] = *MEMORY[0x1E0C80C00];
  _Q0 = vaddq_f64(*a2, vcvtq_f64_f32(*a3));
  *a2 = _Q0;
  v17 = *a4;
  if (a5 >= 255)
    v18 = 255;
  else
    v18 = a5;
  v19 = v18 & ~(v18 >> 31);
  if (*(_QWORD *)&v17 == 0x3C003C003C003C00)
  {
    *(float *)_Q0.f64 = (float)v19 * 0.0039216;
    __asm { FCVT            H0, S0 }
    *(int16x4_t *)&_Q0.f64[0] = vdup_lane_s16(*(int16x4_t *)&_Q0.f64[0], 0);
  }
  else
  {
    *(float16x4_t *)&_Q0.f64[0] = vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(v17), (float)v19 * 0.0039216));
  }
  v24 = COERCE_DOUBLE(vcvt_f16_f32(vmulq_f32(vcvtq_f32_f16(*(float16x4_t *)(a1[29] + 32)), vcvtq_f32_f16(*(float16x4_t *)&_Q0.f64[0]))));
  if (*(_QWORD *)(a1[29] + 32) != 0x3C003C003C003C00)
    _Q0.f64[0] = v24;
  *(float64_t *)(a1[2] + 8) = _Q0.f64[0];
  if (a6)
    v25 = 12;
  else
    v25 = 3;
  *(_BYTE *)(a1[2] + 16) = v25;
  v64 = 0;
  v65[0] = 0;
  (*(void (**)(_QWORD *, _QWORD, _QWORD *))(*a1 + 496))(a1, 0, v65);
  v26 = a2->f64[1];
  v27 = a2->f64[0] - a9 * 2.8;
  v28 = v27 + a9 * 5.6;
  v63[0] = v27;
  v63[1] = v28;
  v29 = a2[1].f64[0];
  v30 = a2[1].f64[1];
  v31 = v29 + v27;
  v32 = v29 + v28;
  v63[2] = v29 + v27;
  v63[3] = v29 + v28;
  v33 = v26 - a9 * 2.8;
  v34 = v33 + a9 * 5.6;
  v62[0] = v33;
  v62[1] = v34;
  v35 = v30 + v33;
  v36 = v30 + v34;
  v62[2] = v30 + v33;
  v62[3] = v30 + v34;
  v60[0] = HIDWORD(v65[0]);
  v60[1] = v65[0];
  v61 = v65[0];
  v58[0] = HIDWORD(v65[0]);
  v58[1] = v65[0];
  v59 = v65[0];
  v50[0] = a2;
  v50[1] = a8;
  v51 = 63;
  v52 = 0;
  v54 = 0;
  v53 = 0;
  v55 = 0;
  if (a7)
  {
    *(_BYTE *)(a1[2] + 16) = 14;
    (*(void (**)(_QWORD *, uint64_t, _QWORD, _QWORD, uint64_t *))(*a1 + 448))(a1, 1, 0, 0, &v64);
    v37 = 1.0 / a2[1].f64[0];
    v38 = 1.0 / a2[1].f64[1];
    v39 = a2->f64[1] - a3->f32[1];
    v40 = trunc(a2->f64[0] - a3->f32[0]);
    v41 = (float)(*((float *)&v64 + 1) - *(float *)&v64);
    v42 = v41 * v37;
    v43 = *(float *)&v64 + v42 * (v27 - v40);
    v44 = *(float *)&v64 + v42 * (v28 - v40);
    *(float *)v57 = v43;
    *(float *)&v57[1] = v44;
    v45 = *(float *)&v64 + v42 * (v31 - v40);
    *(float *)&v42 = *(float *)&v64 + v42 * (v32 - v40);
    *(float *)&v57[2] = v45;
    v57[3] = LODWORD(v42);
    v46 = trunc(v39);
    v47 = v41 * v38;
    *(float *)&v40 = *(float *)&v64 + v47 * (v33 - v46);
    *(float *)&v39 = *(float *)&v64 + v47 * (v34 - v46);
    v56[0] = LODWORD(v40);
    v56[1] = LODWORD(v39);
    *(float *)&v40 = *(float *)&v64 + v47 * (v35 - v46);
    *(float *)&v47 = *(float *)&v64 + v47 * (v36 - v46);
    v56[2] = LODWORD(v40);
    v56[3] = LODWORD(v47);
    CA::OGL::emit_nine_part_rect((uint64_t)a1, (uint64_t)v50, (uint64_t)v63, (uint64_t)v62, (uint64_t)v60, (uint64_t)v58, (uint64_t)v57, (uint64_t)v56, 0);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*a1 + 520))(a1, 0, 1);
  }
  else
  {
    if (a6)
      v48 = 278528;
    else
      v48 = 0;
    CA::OGL::emit_nine_part_rect((uint64_t)a1, (uint64_t)v50, (uint64_t)v63, (uint64_t)v62, (uint64_t)v60, (uint64_t)v58, 0, 0, v48);
  }
  result = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 520))(a1, 0, 0);
  *(_BYTE *)(a1[2] + 16) = 0;
  return result;
}

double CA::OGL::MetalContext::bind_gaussian(CA::OGL::MetalContext *this, unsigned int a2, float *a3)
{
  uint64_t v6;
  const unsigned __int8 *v7;
  BOOL v8;
  const char *v9;
  unsigned int v10;
  uint64_t texture;
  double result;

  v6 = *((_QWORD *)this + 2);
  v10 = CA::OGL::state_image_texture_unit(v6, a2);
  texture = *((_QWORD *)this + 350);
  if (!texture)
  {
    texture = CA::OGL::MetalContext::create_texture((id *)this, 1, 6uLL, (MTLPixelFormat)&CA::OGL::gaussian_data, (uint64_t)"gaussian_texture", v7, v8, v9);
    *((_QWORD *)this + 350) = texture;
    if (!texture)
      return result;
    v6 = *((_QWORD *)this + 2);
  }
  *(_WORD *)(v6 + 2 * v10 + 144) = *(_DWORD *)(texture + 52);
  *(_QWORD *)(v6 + 8 * v10 + 176) = texture;
  *(_BYTE *)(v6 + a2 + 17) = *(_BYTE *)(texture + 55) & 0x3F;
  *(_OWORD *)(*((_QWORD *)this + 2) + 16 * a2 + 96) = xmmword_18474E210;
  result = 0.0078125;
  *(_QWORD *)a3 = 0x3F80000000000000;
  return result;
}

uint64_t CA::CG::DrawOp::color_type(CA::CG::DrawOp *this, CA::CG::Renderer *a2)
{
  uint64_t v2;
  unsigned int v3;

  v2 = *((_QWORD *)this + 10);
  v3 = 9;
  if (v2)
  {
    if (*((_DWORD *)this + 14))
      v3 = 10;
    else
      v3 = 9;
  }
  _H0 = *((_WORD *)this + 47);
  __asm { FCVT            S0, H0 }
  if (_S0 == 1.0 && v2 == 0)
    return v3 | 4;
  else
    return v3;
}

__n128 std::vector<unsigned long long>::__move_assign(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

double CA::Render::AsynchronousState::AsynchronousState(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  double result;
  unsigned int v7;

  *(_DWORD *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 12) = 35;
  ++dword_1ECDC7CB4;
  *(_QWORD *)a1 = off_1E1597BB8;
  *(_DWORD *)(a1 + 16) = a3;
  *(_WORD *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    if (!v5)
    {
      v3 = 0;
      do
        v7 = __ldaxr(v4);
      while (__stlxr(v7 - 1, v4));
    }
  }
  *(_QWORD *)(a1 + 32) = v3;
  result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  return result;
}

BOOL CA::OGL::MetalContext::add_completed_callback(uint64_t a1, uint64_t a2)
{
  void *v3;
  _QWORD v5[6];

  v5[5] = *MEMORY[0x1E0C80C00];
  v3 = *(void **)(a1 + 2928);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = ___ZN2CA3OGL12MetalContext22add_completed_callbackEU13block_pointerFvvE_block_invoke;
  v5[3] = &unk_1E15A6600;
  v5[4] = a2;
  objc_msgSend(v3, "addCompletedHandler:", v5);
  return *(_QWORD *)(a1 + 2928) != 0;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void delete_buffer(uint64_t a1, CAImageQueueBuffer *a2, void *a3)
{
  uint64_t v3;
  int *v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  int *v8;
  int v9;
  uint64_t v10;
  xpc_object_t v11;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  int *v16;
  uint64_t v17;
  _BYTE v18[4120];
  _QWORD v19[16];

  v6.n128_f64[0] = MEMORY[0x1E0C80A78](a1);
  v19[15] = *MEMORY[0x1E0C80C00];
  if (v4)
  {
    v7 = v5;
    v8 = v4;
    v9 = *(_DWORD *)(v5 + 20);
    if (v9 == 1)
    {
      if (*(_QWORD *)(v5 + 80))
      {
        v10 = v3;
        v11 = xpc_dictionary_create(0, 0, 0);
        if (v11)
        {
          v12 = v11;
          xpc_dictionary_set_uint64(v11, "command", 3uLL);
          xpc_dictionary_set_uint64(v12, "iosurfaceRenderId", v10);
          (*(void (**)(uint64_t, void *, _QWORD))(v7 + 80))(v7, v12, *(_QWORD *)(v7 + 88));
          xpc_release(v12);
        }
      }
      v9 = *(_DWORD *)(v7 + 20);
    }
    if (!v9)
    {
      if (*(_DWORD *)(v7 + 212))
      {
        v16 = CA::Context::retain_context_with_id((CA::Context *)*(unsigned int *)(v7 + 208));
        if (v16)
        {
          v17 = (uint64_t)(v16 + 54);
          bzero(v18, 0x1090uLL);
          CAImageQueueCommit::CAImageQueueCommit((uint64_t)v18, v7, v17);
          if (CA::Render::Encoder::initialize_render_id_slide(void)::once[0] != -1)
            dispatch_once(CA::Render::Encoder::initialize_render_id_slide(void)::once, &__block_literal_global_11026);
          CA::Render::encode_delete_object((CA::Render::Encoder *)v19, (CA::Render::Encoder *)((char *)v8 + CA::Render::_render_id_slide), v8[4]);
          CAImageQueueCommit::~CAImageQueueCommit((CAImageQueueCommit *)v18);
        }
      }
    }
    v13 = (unsigned int *)(v8 + 2);
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
      (*(void (**)(int *, __n128))(*(_QWORD *)v8 + 16))(v8, v6);
  }
}

void CAImageQueueBuffer::finalize(CAImageQueueBuffer *this)
{
  char *v1;

  v1 = (char *)this - 8;
  (**(void (***)(CAImageQueueBuffer *))this)(this);
  free(v1);
}

void CAImageQueueBuffer::~CAImageQueueBuffer(CAImageQueueBuffer *this, const CA::Render::Object *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = off_1E158BFE0;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  --CA::Render::Object::_instance_counts[0];
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
}

{
  malloc_zone_t *malloc_zone;

  CAImageQueueBuffer::~CAImageQueueBuffer(this, a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void ___ZN2CA7Context18commit_transactionEPNS_11TransactionEdPd_block_invoke_49(uint64_t a1, uint64_t a2)
{
  mach_msg_header_t *msg;
  pthread_mutex_t *v4;

  if (a2 == 8)
  {
    mach_port_mod_refs(*MEMORY[0x1E0C83DA0], *(_DWORD *)(a1 + 48), 1u, -1);
    dispatch_release(*(dispatch_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
  }
  else if (a2 == 2)
  {
    msg = (mach_msg_header_t *)dispatch_mach_msg_get_msg();
    mach_msg_destroy(msg);
    v4 = (pthread_mutex_t *)(*(_QWORD *)(a1 + 40) + 16);
    pthread_mutex_lock(v4);
    CA::Context::destroy(*(CA::Context **)(a1 + 40));
    pthread_mutex_unlock(v4);
    CA::Context::unref(*(CA::Context **)(a1 + 40), 1);
    dispatch_mach_cancel();
  }
}

void sub_184503230(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t CA::Context::destroy(CA::Context *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  mach_port_t v7;
  mach_msg_return_t v8;
  mach_error_t v9;
  NSObject *v10;
  mach_msg_size_t v11;
  char *v12;
  mach_port_name_t v13;
  CA::Render::Encoder::ObjectCache *v14;
  CA::Render::Context *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v22;
  mach_msg_header_t msg;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = (pthread_mutex_t *)((char *)this + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  v3 = *((_QWORD *)this + 12);
  if (v3)
  {
    CA::Layer::set_visible(*(CA::Layer **)(v3 + 16), 0);
    CFRelease(*((CFTypeRef *)this + 12));
    *((_QWORD *)this + 12) = 0;
  }
  if (!*(_DWORD *)this && (*((_BYTE *)this + 241) & 4) == 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Context::_lock);
    if ((CA::all_contexts(void)::contexts_data_initialized & 1) != 0)
    {
      v4 = qword_1ECDC6558;
      if (qword_1ECDC6558 != CA::all_contexts(void)::contexts_data)
      {
        v5 = 0;
        v6 = (qword_1ECDC6558 - CA::all_contexts(void)::contexts_data) >> 3;
        if (v6 <= 1)
          v6 = 1;
        while (*(CA::Context **)(CA::all_contexts(void)::contexts_data + 8 * v5) != this)
        {
          if (v6 == ++v5)
            goto LABEL_13;
        }
        *(_QWORD *)(CA::all_contexts(void)::contexts_data + 8 * v5) = *(_QWORD *)(qword_1ECDC6558 - 8);
        qword_1ECDC6558 = v4 - 8;
      }
    }
    else
    {
      CA::all_contexts(void)::contexts_data = 0;
      qword_1ECDC6558 = 0;
      qword_1ECDC6560 = 0;
      CA::all_contexts(void)::contexts_data_initialized = 1;
    }
LABEL_13:
    *((_BYTE *)this + 241) |= 4u;
    --CA::Context::_context_count;
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Context::_lock);
  }
  if (*((_DWORD *)this + 1))
  {
    v7 = *((_DWORD *)this + 40);
    if (v7)
    {
      msg.msgh_size = 0;
      msg.msgh_bits = 19;
      msg.msgh_remote_port = v7;
      msg.msgh_local_port = 0;
      *(_QWORD *)&msg.msgh_voucher_port = 0x9D0B00000000;
      if (MEMORY[0x1E0C85B60])
        voucher_mach_msg_set(&msg);
      v8 = mach_msg(&msg, 1, 0x18u, 0, 0, 0, 0);
      if (v8)
      {
        v9 = v8;
        if (v8 == 268435459)
        {
          *((_BYTE *)this + 241) |= 2u;
        }
        else if (v8 == -81182719)
        {
          x_log_crash("Unentitled call to server!");
          abort();
        }
        if (x_log_hook_p())
        {
          mach_error_string(v9);
          x_log_();
        }
        else
        {
          v10 = x_log_category_api;
          if (os_log_type_enabled((os_log_t)x_log_category_api, OS_LOG_TYPE_ERROR))
          {
            v11 = *((_DWORD *)this + 1);
            v12 = mach_error_string(v9);
            msg.msgh_bits = 67109634;
            msg.msgh_size = v11;
            LOWORD(msg.msgh_remote_port) = 1024;
            *(mach_port_t *)((char *)&msg.msgh_remote_port + 2) = v9;
            HIWORD(msg.msgh_local_port) = 2080;
            *(_QWORD *)&msg.msgh_voucher_port = v12;
            _os_log_impl(&dword_184457000, v10, OS_LOG_TYPE_ERROR, "Failed to unregister client (client=0x%x) [0x%x %s]", (uint8_t *)&msg, 0x18u);
          }
        }
      }
      *((_DWORD *)this + 1) = 0;
    }
  }
  v13 = *((_DWORD *)this + 40);
  if (v13)
  {
    mach_port_deallocate(*MEMORY[0x1E0C83DA0], v13);
    *((_DWORD *)this + 40) = 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)this + 41);
  v14 = (CA::Render::Encoder::ObjectCache *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)this + 41);
  if (v14)
    CA::Render::Encoder::ObjectCache::unref(v14);
  CA::MachPortUtil::ClientIPC::destroy((CA::Context *)((char *)this + 176));
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Context::_lock);
  v15 = (CA::Render::Context *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Context::_lock);
  if (v15)
  {
    if (CA::Render::Server::_thread)
    {
      v16 = (unsigned int *)((char *)v15 + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 + 1, v16));
      if (!v17)
      {
        do
          v22 = __ldaxr(v16);
        while (__stlxr(v22 - 1, v16));
      }
      CA::Render::Server::add_callback(0, (uint64_t)CA::Render::Context::schedule_destroy(void)::$_0::__invoke, (uint64_t)v15, 0.0);
    }
    else
    {
      CA::Render::Context::destroy(v15);
    }
    v18 = (unsigned int *)((char *)v15 + 8);
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
      (*(void (**)(CA::Render::Context *))(*(_QWORD *)v15 + 16))(v15);
  }
  *((_BYTE *)this + 241) |= 1u;
  return pthread_mutex_unlock(v2);
}

void sub_1845035DC(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t register_drawable(uint64_t result, _CAImageQueue *a2)
{
  uint64_t v3;
  const __CFString *v4;
  BOOL v5;
  char v7;

  if (result && a2)
  {
    v3 = result;
    if ((*(_BYTE *)(result + 113) & 2) != 0)
    {
      CAImageQueueUnregisterBuffer((uint64_t)a2, *(_QWORD *)(result + 24));
      *(_BYTE *)(v3 + 113) &= ~2u;
    }
    v4 = *(const __CFString **)(v3 + 104);
    if (*(_QWORD *)(v3 + 96))
      v5 = v4 == CFSTR("ifSupported");
    else
      v5 = 1;
    if (v5 || v4 == CFSTR("never"))
      v7 = 2;
    else
      v7 = 1;
    result = CAImageQueueRegisterIOSurfaceBuffer((_anonymous_namespace_ *)a2, *(__IOSurface **)(v3 + 64), v7);
    if (result)
    {
      *(_QWORD *)(v3 + 24) = result;
      *(_BYTE *)(v3 + 113) |= 2u;
    }
  }
  return result;
}

uint64_t CAImageQueueRegisterIOSurfaceBuffer(_anonymous_namespace_ *a1, __IOSurface *a2, char a3)
{
  uint64_t v4;
  __int16 v7;
  malloc_zone_t *malloc_zone;
  _CAImageQueue *v9;
  CA::Render::Texture *v10;
  _CAImageQueue *v11;
  char v12;

  if (a2)
  {
    v4 = *((_QWORD *)a1 + 6);
    if (v4)
    {
      v7 = atomic_load((unint64_t *)(*(_QWORD *)(v4 + 24) + 8));
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      v9 = (_CAImageQueue *)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x158uLL, 0x743898A5uLL);
      v11 = v9;
      if (!v9)
      if ((v7 & 0x2000) != 0)
        v12 = 61;
      else
        v12 = 63;
      CA::Render::Surface::Surface((uint64_t)v9, a2, -1, v12, 0, 0, 0);
      if ((a3 & 1) != 0)
      {
        *((_WORD *)v11 + 168) |= 0x420u;
        if ((a3 & 2) == 0)
        {
LABEL_9:
          if ((a3 & 4) != 0)
LABEL_10:
            *((_WORD *)v11 + 168) |= 0x40u;
        }
      }
      else if ((a3 & 2) == 0)
      {
        goto LABEL_9;
      }
      *((_WORD *)v11 + 168) &= 0xFBDFu;
      if ((a3 & 4) == 0)
      goto LABEL_10;
    }
  }
  return 0;
}

void ___ZN2CA6Render5Fence11Transaction8Observer8activateENSt3__113unordered_setIyNS4_4hashIyEENS4_8equal_toIyEENS4_9allocatorIyEEEEPFvPS3_RKSC_djyEPFvSD_SF_jjEPFvSD_SF_E_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  mach_msg_header_t *msg;
  mach_msg_id_t msgh_id;
  _QWORD *i;
  void (*v7)(uint64_t, __int128 *, _QWORD, uint64_t, double);
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  mach_msg_id_t v12;
  void (*v13)(uint64_t, __int128 *, _QWORD, _QWORD);
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  double v17;
  int v18[2];
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint8_t buf[4];
  mach_msg_id_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (a2 == 8)
  {
    mach_port_mod_refs(*MEMORY[0x1E0C83DA0], *(_DWORD *)(a1 + 96), 1u, -1);
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    if (*(_QWORD *)(v9 + 24))
      *(_QWORD *)(v9 + 24) = 0;
    v10 = *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
    if (v10)
    {
      dispatch_source_cancel(v10);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 0;
    }
  }
  else if (a2 == 2)
  {
    v3 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)v18 = 0;
    msg = (mach_msg_header_t *)dispatch_mach_msg_get_msg();
    v19 = 0u;
    v20 = 0u;
    v21 = 1065353216;
    v17 = 0.0;
    v16 = 0;
    v14 = 0;
    v15 = 0;
    if (CA::Render::Fence::extract_msg((uint64_t)msg, 0, (uint64_t)&v19, &v17, &v16, &v15, (_DWORD *)&v14 + 1, &v14))
    {
      msgh_id = msg->msgh_id;
      if (msgh_id == 1919772259)
      {
        if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
        {
          v13 = *(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(a1 + 88);
          if (v13)
            v13(v3, &v19, HIDWORD(v14), v14);
        }
      }
      else if (msgh_id == 1919706727 && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      {
        for (i = (_QWORD *)v20; i; i = (_QWORD *)*i)
          std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__erase_unique<unsigned long long>((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), i[2]);
        v7 = *(void (**)(uint64_t, __int128 *, _QWORD, uint64_t, double))(a1 + 72);
        if (v7)
          v7(v3, &v19, v16, v15, v17);
        if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 64))
        {
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
          (*(void (**)(uint64_t, uint64_t))(a1 + 80))(v3, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
          if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
          {
            dispatch_mach_cancel();
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
          }
          v8 = *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
          if (v8)
          {
            dispatch_source_cancel(v8);
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 0;
          }
        }
      }
    }
    else if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v11 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        v12 = msg->msgh_id;
        *(_DWORD *)buf = 67109120;
        v23 = v12;
        _os_log_impl(&dword_184457000, v11, OS_LOG_TYPE_DEFAULT, "unknown fence tx observer message %i\n", buf, 8u);
      }
    }
    mach_msg_destroy(msg);
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)&v19);
  }
}

uint64_t CA::Render::Fence::extract_msg(uint64_t a1, unint64_t a2, uint64_t a3, _QWORD *a4, _DWORD *a5, _QWORD *a6, _DWORD *a7, _DWORD *a8)
{
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  unint64_t *v13;
  unsigned int v14;
  uint64_t v16;
  unint64_t v17;

  v9 = *(_DWORD *)(a1 + 20);
  if (v9 == 1919772259)
  {
    if (a2 < 0x34)
      return 0;
    if (*(_DWORD *)(a1 + 4) < 0x34u)
      return 0;
    if ((*(_DWORD *)a1 & 0x80000000) == 0)
      return 0;
    if (*(_DWORD *)(a1 + 24) != 1)
      return 0;
    if (*(_BYTE *)(a1 + 39) != 1)
      return 0;
    v13 = *(unint64_t **)(a1 + 28);
    if (!v13)
      return 0;
    v14 = *(_DWORD *)(a1 + 40);
    if (v14 < 8)
      return 0;
    if (a7)
      *a7 = *(_DWORD *)(a1 + 44);
    if (a8)
      *a8 = *(_DWORD *)(a1 + 48);
  }
  else
  {
    if (v9 != 1919706727 || a2 < 0x48 || *(_DWORD *)(a1 + 4) < 0x48u || (*(_DWORD *)a1 & 0x80000000) == 0)
      return 0;
    v10 = *(_DWORD *)(a1 + 24);
    if (v10 == 1)
      goto LABEL_21;
    v11 = 0;
    if (v10 != 2)
      return v11;
    if (*(_BYTE *)(a1 + 55))
LABEL_21:
      v12 = 0;
    else
      v12 = *(_DWORD *)(a1 + 44);
    if (*(_BYTE *)(a1 + 39) != 1)
      return 0;
    v13 = *(unint64_t **)(a1 + 28);
    if (!v13)
      return 0;
    v14 = *(_DWORD *)(a1 + 40);
    if (v14 < 8)
      return 0;
    *a6 = *(_QWORD *)(a1 + 56);
    *a4 = *(_QWORD *)(a1 + 64);
    *a5 = v12;
  }
  v16 = v14 >> 3;
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>(a3, vcvtps_u32_f32((float)v16 / *(float *)(a3 + 32)));
  do
  {
    v17 = *v13++;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(a3, v17, v17);
    v11 = 1;
    --v16;
  }
  while (v16);
  return v11;
}

uint64_t CA::fo_completed(CA::Render::Fence::Transaction::Observer *a1, uint64_t a2)
{
  uint64_t v4;
  double v5;
  uint64_t result;

  v4 = mach_absolute_time();
  v5 = CATimeWithHostTime(v4);
  result = CA::fo_fences_released(a1, a2, 0, 0, v5);
  if (a1)
  {
    CA::Render::Fence::Transaction::Observer::~Observer(a1);
    JUMPOUT(0x186DBD990);
  }
  return result;
}

void CA::Render::Fence::Transaction::Observer::~Observer(CA::Render::Fence::Transaction::Observer *this)
{
  NSObject *v2;
  mach_port_name_t v3;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 2));
    *((_QWORD *)this + 2) = 0;
  }
  if (*((_QWORD *)this + 1))
  {
    dispatch_mach_cancel();
    dispatch_release(*((dispatch_object_t *)this + 1));
    *((_QWORD *)this + 1) = 0;
  }
  v3 = *((_DWORD *)this + 6);
  if (v3 && *((_BYTE *)this + 28))
    mach_port_mod_refs(*MEMORY[0x1E0C83DA0], v3, 1u, -1);
  *((_BYTE *)this + 28) = 0;
  *((_DWORD *)this + 6) = 0;
  if (*((_QWORD *)this + 4))
    CA::Render::Fence::Transaction::Observer::free_batch_handlers(this);
}

uint64_t `anonymous namespace'::register_buffer(_anonymous_namespace_ *this, _CAImageQueue *a2, CA::Render::Texture *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  unsigned int v13;
  char v14;
  uint64_t v15;
  int *v16;
  int v17;
  __IOSurface *v18;
  xpc_object_t v19;
  void *v20;
  mach_port_t MachPort;
  int *v23;
  uint64_t v24;
  _BYTE v25[4120];
  _BYTE v26[120];
  uint64_t v27;

  MEMORY[0x1E0C80A78](this);
  v4 = v3;
  v6 = v5;
  v27 = *MEMORY[0x1E0C80C00];
  v7 = malloc_type_malloc(0x28uLL, 0xE6C23951uLL);
  v8 = v7;
  v7[1] = off_1E158BFE0;
  v9 = (uint64_t)(v7 + 1);
  *((_DWORD *)v7 + 4) = 1;
  *((_DWORD *)v7 + 5) = 0;
  ++CA::Render::Object::_instance_counts[0];
  do
  {
    v10 = __ldaxr(CA::Render::next_sequence(void)::sequence);
    v11 = __stlxr(v10 + 1, CA::Render::next_sequence(void)::sequence);
    v12 = __CFADD__(v10, 1);
    v13 = v10 + 1;
    v14 = v12;
  }
  while (v11 || (v14 & 1) != 0);
  *((_DWORD *)v7 + 6) = v13;
  v7[4] = v4;
  if (CA::Render::Encoder::initialize_render_id_slide(void)::once[0] != -1)
    dispatch_once(CA::Render::Encoder::initialize_render_id_slide(void)::once, &__block_literal_global_11026);
  v15 = CA::Render::_render_id_slide + v9;
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 16));
  v16 = *(int **)(v6 + 200);
  if (!v16)
  {
    v16 = (int *)x_hash_table_new_(0, 0, 0, 0, 0, 0);
    *(_QWORD *)(v6 + 200) = v16;
  }
  hash_table_modify(v16, v15, v9, 0);
  os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 16));
  v17 = *(_DWORD *)(v6 + 20);
  if (v17 == 1)
  {
    if (*(_BYTE *)(v4 + 12) == 51)
    {
      if (*(_QWORD *)(v6 + 80))
      {
        v18 = *(__IOSurface **)(v4 + 112);
        v19 = xpc_dictionary_create(0, 0, 0);
        if (v19)
        {
          v20 = v19;
          xpc_dictionary_set_uint64(v19, "command", 2uLL);
          MachPort = IOSurfaceCreateMachPort(v18);
          xpc_dictionary_set_mach_send();
          mach_port_deallocate(*MEMORY[0x1E0C83DA0], MachPort);
          xpc_dictionary_set_uint64(v20, "iosurfaceRenderId", v15);
          (*(void (**)(uint64_t, void *, _QWORD))(v6 + 80))(v6, v20, *(_QWORD *)(v6 + 88));
          xpc_release(v20);
        }
      }
    }
    v17 = *(_DWORD *)(v6 + 20);
  }
  if (!v17)
  {
    if (*(_DWORD *)(v6 + 212))
    {
      v23 = CA::Context::retain_context_with_id((CA::Context *)*(unsigned int *)(v6 + 208));
      if (v23)
      {
        v24 = (uint64_t)(v23 + 54);
        bzero(v25, 0x1090uLL);
        CAImageQueueCommit::CAImageQueueCommit((uint64_t)v25, v6, v24);
        if (CA::Render::Encoder::initialize_render_id_slide(void)::once[0] != -1)
          dispatch_once(CA::Render::Encoder::initialize_render_id_slide(void)::once, &__block_literal_global_11026);
        CA::Render::encode_set_object((CA::Render *)v26, (CA::Render::Encoder *)(CA::Render::_render_id_slide + v9), *((_DWORD *)v8 + 6), (CA::Render::Object *)v8[4], 0);
        v26[104] = 1;
        CAImageQueueCommit::~CAImageQueueCommit((CAImageQueueCommit *)v25);
      }
    }
  }
  return v15;
}

uint64_t CAImageQueueCommit::CAImageQueueCommit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CA::Render::Encoder *v4;
  uint64_t v5;
  CA::Render::Encoder::ObjectCache *v6;
  int v7;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 56;
  *(_OWORD *)(a1 + 40) = xmmword_18474E260;
  *(_QWORD *)(a1 + 16) = a1 + 24;
  v4 = (CA::Render::Encoder *)(a1 + 4120);
  CA::Render::Encoder::Encoder(a1 + 4120, a1 + 24, 4, *(_DWORD *)(a2 + 216), 0.0);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  if (v5)
  {
    v6 = (CA::Render::Encoder::ObjectCache *)v5;
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    CA::Render::Encoder::set_object_cache(v4, v6, v7 ^ 1);
    CA::Render::Encoder::ObjectCache::unref(v6);
  }
  return a1;
}

void CA::Render::Encoder::set_object_cache(CA::Render::Encoder *this, CA::Render::Encoder::ObjectCache *a2, int a3)
{
  CA::Render::Encoder::ObjectCache *v6;
  unsigned int v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t **j;

  v6 = (CA::Render::Encoder::ObjectCache *)*((_QWORD *)this + 9);
  if (v6 != a2)
  {
    if (v6)
      CA::Render::Encoder::ObjectCache::unref(v6);
    if (a2)
    {
      do
        v7 = __ldaxr((unsigned int *)a2);
      while (__stlxr(v7 + 1, (unsigned int *)a2));
    }
    *((_QWORD *)this + 9) = a2;
  }
  if (a2 && a3)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Encoder::ObjectCache::_lock);
    v9 = *((_QWORD *)a2 + 2);
    if (v9)
    {
      v10 = 0;
      v11 = 1 << *(_DWORD *)v9;
      do
      {
        for (i = *(uint64_t ***)(*(_QWORD *)(v9 + 16) + 8 * v10); i; i = (uint64_t **)*i)
          CA::Render::encode_invalidation((CA::Render *)i[2], (const CA::Render::Object *)i[3], this, v8);
        ++v10;
      }
      while (v10 != v11);
      x_hash_table_remove_all(*((_QWORD **)a2 + 2));
    }
    v13 = *((_QWORD *)a2 + 4);
    if (v13)
    {
      v14 = 0;
      v15 = 1 << *(_DWORD *)v13;
      do
      {
        for (j = *(uint64_t ***)(*(_QWORD *)(v13 + 16) + 8 * v14); j; j = (uint64_t **)*j)
          CA::Render::encode_volatile((CA::Render *)j[2], (const CA::Render::Object *)j[3], this, v8);
        ++v14;
      }
      while (v14 != v15);
      x_hash_table_remove_all(*((_QWORD **)a2 + 4));
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Encoder::ObjectCache::_lock);
  }
}

uint64_t CA::Render::Encoder::Encoder(uint64_t a1, uint64_t a2, int a3, int a4, double a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  unint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  unint64_t v22;
  double *v23;
  uint64_t v24;
  uint64_t v25;

  v9 = CA::Render::Coder::Coder(a1, a2);
  *(_QWORD *)v9 = off_1E1598EC0;
  *(_DWORD *)(v9 + 68) = a4;
  *(_QWORD *)(v9 + 72) = 0;
  *(_BYTE *)(v9 + 104) = 0;
  *(_QWORD *)(v9 + 112) = 0;
  if (CA::Render::Encoder::initialize_render_id_slide(void)::once[0] != -1)
    dispatch_once(CA::Render::Encoder::initialize_render_id_slide(void)::once, &__block_literal_global_11026);
  v10 = a3 | 1;
  *(_DWORD *)(a1 + 64) = v10;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(v11 + 16);
  if ((int)v12 >= 8704)
    v13 = (int)v12 - 0x2000;
  else
    v13 = 512;
  v14 = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = v12 >= v14;
  v16 = v12 - v14;
  if (v15)
  {
    v17 = *(_DWORD **)(v11 + 8);
    *(_QWORD *)(v11 + 8) = (char *)v17 + v14;
    *(_QWORD *)(v11 + 16) = v16;
  }
  else
  {
    v17 = (_DWORD *)x_heap_malloc_small_(*(uint64_t **)(a1 + 8), v14);
    v10 = *(_DWORD *)(a1 + 64);
  }
  *(_QWORD *)(a1 + 24) = v17;
  *(_QWORD *)(a1 + 32) = v17;
  *(_QWORD *)(a1 + 40) = (char *)v17 + v13;
  if (v13 <= 3)
  {
    CA::Render::Encoder::grow((CA::Render::Encoder *)a1, 4);
    v17 = *(_DWORD **)(a1 + 32);
  }
  *v17 = v10;
  v18 = *(_QWORD *)(a1 + 32);
  v19 = *(_QWORD *)(a1 + 40);
  v20 = (_DWORD *)(v18 + 4);
  *(_QWORD *)(a1 + 32) = v18 + 4;
  if (v18 + 8 > v19)
  {
    CA::Render::Encoder::grow((CA::Render::Encoder *)a1, 4);
    v20 = *(_DWORD **)(a1 + 32);
  }
  *v20 = a4;
  v21 = *(_QWORD *)(a1 + 32);
  v22 = *(_QWORD *)(a1 + 40);
  v23 = (double *)(v21 + 4);
  *(_QWORD *)(a1 + 32) = v21 + 4;
  if (v21 + 12 > v22)
  {
    CA::Render::Encoder::grow((CA::Render::Encoder *)a1, 8);
    v23 = *(double **)(a1 + 32);
  }
  *v23 = a5;
  v24 = *(_QWORD *)(a1 + 24);
  v25 = *(_QWORD *)(a1 + 32) + 8;
  *(_QWORD *)(a1 + 32) = v25;
  *(_QWORD *)(a1 + 96) = v25 - v24;
  return a1;
}

CA::Render::Encoder *CA::Render::encode_delete_object(CA::Render::Encoder *this, CA::Render::Encoder *a2, int a3)
{
  CA::Render::Encoder *v5;
  _BYTE *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _DWORD *v10;

  v5 = this;
  v6 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)(v6 + 1) > *((_QWORD *)this + 5))
  {
    this = (CA::Render::Encoder *)CA::Render::Encoder::grow(this, 1);
    v6 = (_BYTE *)*((_QWORD *)v5 + 4);
  }
  *((_QWORD *)v5 + 4) = v6 + 1;
  *v6 = 1;
  v7 = (_QWORD *)*((_QWORD *)v5 + 4);
  if ((unint64_t)(v7 + 1) > *((_QWORD *)v5 + 5))
  {
    this = (CA::Render::Encoder *)CA::Render::Encoder::grow(v5, 8);
    v7 = (_QWORD *)*((_QWORD *)v5 + 4);
  }
  *v7 = a2;
  v8 = *((_QWORD *)v5 + 4);
  v9 = *((_QWORD *)v5 + 5);
  v10 = (_DWORD *)(v8 + 8);
  *((_QWORD *)v5 + 4) = v8 + 8;
  if (v8 + 12 > v9)
  {
    this = (CA::Render::Encoder *)CA::Render::Encoder::grow(v5, 4);
    v10 = (_DWORD *)*((_QWORD *)v5 + 4);
  }
  *v10 = a3;
  *((_QWORD *)v5 + 4) += 4;
  return this;
}

_QWORD *x_hash_table_remove_all(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD);
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  _QWORD *v11;

  if (result[3])
  {
    v1 = result;
    v2 = 0;
    v3 = 1 << *(_DWORD *)result;
    while (1)
    {
      v4 = v1[2];
      v5 = *(_QWORD **)(v4 + 8 * v2);
      if (v5)
        break;
      if (!v1[9])
        goto LABEL_14;
LABEL_17:
      *(_QWORD *)(v4 + 8 * v2++) = 0;
      if (v2 == v3)
      {
        v1[3] = 0;
        return result;
      }
    }
    do
    {
      v6 = (_QWORD *)*v5;
      v7 = v5[3];
      v8 = (uint64_t (*)(_QWORD))v1[6];
      if (v8)
        result = (_QWORD *)v8(v5[2]);
      v9 = (uint64_t (*)(uint64_t))v1[7];
      if (v9)
        result = (_QWORD *)v9(v7);
      v10 = v1[9];
      if (v10)
      {
        *v5 = *(_QWORD *)(v10 + 8);
        *(_QWORD *)(v10 + 8) = v5;
      }
      v5 = v6;
    }
    while (v6);
    v4 = v1[2];
    if (v10)
      goto LABEL_17;
LABEL_14:
    result = *(_QWORD **)(v4 + 8 * v2);
    if (result)
    {
      do
      {
        v11 = (_QWORD *)*result;
        free(result);
        result = v11;
      }
      while (v11);
      v4 = v1[2];
    }
    goto LABEL_17;
  }
  return result;
}

CA::Render::Encoder *CA::Render::encode_invalidation(CA::Render *this, const CA::Render::Object *a2, CA::Render *a3, void *a4)
{
  int v5;
  CA::Render::Encoder *v7;

  v5 = (int)a2;
  if (CA::Render::Encoder::initialize_render_id_slide(void)::once[0] != -1)
    dispatch_once(CA::Render::Encoder::initialize_render_id_slide(void)::once, &__block_literal_global_11026);
  if (this)
    v7 = (CA::Render *)((char *)this + CA::Render::_render_id_slide);
  else
    v7 = 0;
  return CA::Render::encode_delete_object(a3, v7, v5);
}

unsigned int *CA::Context::Generic::retain_encoder_cache(CA::Context::Generic *this)
{
  uint64_t v1;
  os_unfair_lock_s *v2;
  unsigned int *v3;
  unsigned int v4;

  v1 = *((_QWORD *)this + 1);
  v2 = (os_unfair_lock_s *)(v1 + 164);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 164));
  if ((*(_BYTE *)(v1 + 241) & 8) != 0)
  {
    v3 = 0;
  }
  else
  {
    v3 = *(unsigned int **)(v1 + 168);
    if (v3)
    {
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 + 1, v3));
    }
  }
  os_unfair_lock_unlock(v2);
  return v3;
}

BOOL CA::Context::Generic::is_deferring(CA::Context::Generic *this)
{
  uint64_t v1;
  _BOOL8 v2;

  v1 = *((_QWORD *)this + 1);
  os_unfair_lock_lock(&CA::Context::_deferred_lock);
  v2 = CA::Context::_deferred_by_lid
    && std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((_QWORD *)CA::Context::_deferred_by_lid, *(_DWORD *)(v1 + 8));
  os_unfair_lock_unlock(&CA::Context::_deferred_lock);
  return v2;
}

void CAImageQueueCommit::~CAImageQueueCommit(CAImageQueueCommit *this)
{
  CA::Render::Encoder *v2;
  int v3;

  v2 = (CAImageQueueCommit *)((char *)this + 4120);
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  CA::Render::Encoder::send_message(v2, v3, 0, 0, 0);
  (***((void (****)(_QWORD))this + 1))(*((_QWORD *)this + 1));
  CA::Render::Encoder::~Encoder(v2);
  x_heap_free(*((void ****)this + 2));
}

uint64_t CA::Context::send_deferrals(int a1, int a2, uint64_t a3, unsigned int a4, double a5)
{
  _QWORD *v8;
  char *v9;
  char *v10;
  char *v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *i;
  pthread_mutex_t *v35;
  const CA::Render::DeferredEncoder *v36;
  _BOOL8 v39;
  mach_error_t v40;
  mach_error_t v41;
  NSObject *v42;
  int v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  const void *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  unsigned int v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t *v56;
  int8x8_t v57;
  unint64_t v58;
  uint8x8_t v59;
  uint64_t *v60;
  uint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void **v66;
  _QWORD *v67;
  _QWORD *v68;
  void *v69;
  uint64_t v71;
  unsigned int v72;
  _QWORD *v75;
  int v76;
  _QWORD block[5];
  __int128 v78;
  char *v79;
  unsigned int v80;
  uint8_t buf[4];
  int v82;
  __int16 v83;
  mach_error_t v84;
  __int16 v85;
  char *v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v80 = a4;
  pthread_mutex_lock(&CA::Context::_deferred_sending_mutex);
  v78 = 0uLL;
  v79 = 0;
  os_unfair_lock_lock(&CA::Context::_deferred_lock);
  if (!CA::Context::_deferred_by_lid || (v8 = *(_QWORD **)(CA::Context::_deferred_by_lid + 16)) == 0)
  {
    os_unfair_lock_unlock(&CA::Context::_deferred_lock);
    return pthread_mutex_unlock(&CA::Context::_deferred_sending_mutex);
  }
  v72 = a4;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  if (a1)
    v12 = a2 == 0;
  else
    v12 = 1;
  v13 = !v12;
  v76 = v13;
  do
  {
    v14 = v8[3];
    v15 = *(_QWORD *)(v14 + 8);
    v16 = v76;
    if (!v15)
      v16 = 0;
    if (v16 != 1 || *(_DWORD *)(v15 + 12) == a1 && *(_DWORD *)(v15 + 4) == a2)
    {
      v17 = 0;
      v18 = 0;
      v19 = (uint64_t *)v8[3];
      while (1)
      {
        v20 = v19[2];
        if (!v20)
          goto LABEL_26;
        v21 = *(_QWORD *)(v20 + 16);
        if (v21)
        {
          do
          {
            while (std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(*(_QWORD *)a3, *(_QWORD *)(a3 + 8), *(_QWORD *)(v21 + 16)))
            {
              v21 = std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::erase((_QWORD *)v19[2], (uint64_t *)v21);
              if (!v21)
                goto LABEL_22;
            }
            v21 = *(_QWORD *)v21;
          }
          while (v21);
LABEL_22:
          v20 = v19[2];
        }
        if (!*(_QWORD *)(v20 + 24))
          break;
        v18 = 1;
LABEL_28:
        v19 = (uint64_t *)*v19;
        if (!v19)
        {
          if (v17)
          {
            if (v11 >= v10)
            {
              v23 = (v11 - v9) >> 4;
              v24 = v23 + 1;
              if ((unint64_t)(v23 + 1) >> 60)
                abort();
              if ((v10 - v9) >> 3 > v24)
                v24 = (v10 - v9) >> 3;
              if ((unint64_t)(v10 - v9) >= 0x7FFFFFFFFFFFFFF0)
                v25 = 0xFFFFFFFFFFFFFFFLL;
              else
                v25 = v24;
              if (v25)
              {
                if (v25 >> 60)
                  std::__throw_bad_array_new_length[abi:nn180100]();
                v26 = (char *)operator new(16 * v25);
              }
              else
              {
                v26 = 0;
              }
              v27 = &v26[16 * v23];
              *(_QWORD *)v27 = v14;
              *((_QWORD *)v27 + 1) = v17;
              if (v11 == v9)
              {
                v29 = &v26[16 * v23];
              }
              else
              {
                v28 = &v26[16 * v23];
                do
                {
                  v29 = v28 - 16;
                  *((_OWORD *)v28 - 1) = *((_OWORD *)v11 - 1);
                  v11 -= 16;
                  v28 -= 16;
                }
                while (v11 != v9);
              }
              v10 = &v26[16 * v25];
              v11 = v27 + 16;
              *(_QWORD *)&v78 = v29;
              v79 = v10;
              if (v9)
                operator delete(v9);
              v9 = v29;
            }
            else
            {
              *(_QWORD *)v11 = v14;
              *((_QWORD *)v11 + 1) = v17;
              v11 += 16;
            }
            *((_QWORD *)&v78 + 1) = v11;
          }
          goto LABEL_51;
        }
      }
      v22 = std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table(v20);
      MEMORY[0x186DBD990](v22, 0x10A0C408EF24B1CLL);
      v19[2] = 0;
LABEL_26:
      v18 |= *((_BYTE *)v19 + 44) == 0;
      if ((v18 & 1) == 0)
        v17 = v19;
      goto LABEL_28;
    }
LABEL_51:
    v8 = (_QWORD *)*v8;
  }
  while (v8);
  v30 = (_QWORD *)v78;
  os_unfair_lock_unlock(&CA::Context::_deferred_lock);
  if ((char *)v78 == v11)
  {
LABEL_124:
    if (v11)
    {
      *((_QWORD *)&v78 + 1) = v11;
      operator delete(v11);
    }
  }
  else
  {
    do
    {
      v31 = (uint64_t *)*v30;
      v32 = (uint64_t *)v30[1];
      v75 = v30;
      v33 = *(_QWORD *)(*v30 + 8);
      for (i = (uint64_t *)*v30; ; v33 = i[1])
      {
        v35 = (pthread_mutex_t *)(v33 + 16);
        pthread_mutex_lock((pthread_mutex_t *)(v33 + 16));
        if (CA::Render::DeferredEncoder::retime((int8x8_t *)i[3], a5))
          CA::Layer::run_deferred_animation_callbacks((CA::Layer *)i[3], a5, v36);
        v39 = (i == v31 || i == v32) && v72 - 1 < 0xFFFFFFFE;
        v40 = CA::Render::Encoder::send_message((CA::Render::Encoder *)i[3], *(_DWORD *)(v33 + 160), 0, &v80, v39);
        if (v40)
        {
          v41 = v40;
          if (v40 == 268435459)
          {
            *(_BYTE *)(v33 + 241) |= 2u;
          }
          else if (v40 == -81182719)
          {
            x_log_crash("Unentitled call to server!");
            abort();
          }
          if (x_log_hook_p())
          {
            mach_error_string(v41);
            x_log_();
          }
          else
          {
            v42 = x_log_category_api;
            if (os_log_type_enabled((os_log_t)x_log_category_api, OS_LOG_TYPE_ERROR))
            {
              v43 = *(_DWORD *)(v33 + 4);
              v44 = mach_error_string(v41);
              *(_DWORD *)buf = 67109634;
              v82 = v43;
              v83 = 1024;
              v84 = v41;
              v85 = 2080;
              v86 = v44;
              _os_log_impl(&dword_184457000, v42, OS_LOG_TYPE_ERROR, "Failed to send deferred commits (client=0x%x) [0x%x %s]", buf, 0x18u);
            }
          }
        }
        if (*((_DWORD *)i + 10))
          kdebug_trace();
        pthread_mutex_unlock(v35);
        v45 = i[3];
        if (v45)
          (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
        v46 = (_QWORD *)i[4];
        if (v46)
        {
          do
          {
            v47 = (const void *)*v46;
            (*(void (**)(_QWORD))(*v46 + 16))(*v46);
            _Block_release(v47);
            v46 = (_QWORD *)v46[1];
          }
          while (v46);
          v48 = (_QWORD *)i[4];
          if (v48)
          {
            do
            {
              v49 = (_QWORD *)v48[1];
              free(v48);
              v48 = v49;
            }
            while (v49);
          }
        }
        if (i == v32)
          break;
        i = (uint64_t *)*i;
      }
      v30 = v75 + 2;
    }
    while (v75 + 2 != (_QWORD *)v11);
    os_unfair_lock_lock(&CA::Context::_deferred_lock);
    v50 = *((_QWORD *)&v78 + 1);
    v11 = (char *)v78;
    if ((_QWORD)v78 != *((_QWORD *)&v78 + 1))
    {
      v51 = v78;
      do
      {
        v52 = *(uint64_t **)(v51 + 8);
        v53 = *(_DWORD *)(v52[1] + 8);
        *(_DWORD *)buf = v53;
        v55 = (_QWORD *)CA::Context::_deferred_by_lid;
        if (*v52)
        {
          v54 = *v52;
          std::__hash_table<std::__hash_value_type<unsigned int,CA::Context::DeferredCommit *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,CA::Context::DeferredCommit *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,CA::Context::DeferredCommit *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,CA::Context::DeferredCommit *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((float *)CA::Context::_deferred_by_lid, v53, buf)[3] = v54;
        }
        else
        {
          v56 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((_QWORD *)CA::Context::_deferred_by_lid, v53);
          v57 = (int8x8_t)v55[1];
          v58 = v56[1];
          v59 = (uint8x8_t)vcnt_s8(v57);
          v59.i16[0] = vaddlv_u8(v59);
          if (v59.u32[0] > 1uLL)
          {
            if (v58 >= *(_QWORD *)&v57)
              v58 %= *(_QWORD *)&v57;
          }
          else
          {
            v58 &= *(_QWORD *)&v57 - 1;
          }
          v60 = *(uint64_t **)(*v55 + 8 * v58);
          do
          {
            v61 = v60;
            v60 = (uint64_t *)*v60;
          }
          while (v60 != v56);
          if (v61 == v55 + 2)
            goto LABEL_106;
          v62 = v61[1];
          if (v59.u32[0] > 1uLL)
          {
            if (v62 >= *(_QWORD *)&v57)
              v62 %= *(_QWORD *)&v57;
          }
          else
          {
            v62 &= *(_QWORD *)&v57 - 1;
          }
          if (v62 != v58)
          {
LABEL_106:
            if (!*v56)
              goto LABEL_107;
            v63 = *(_QWORD *)(*v56 + 8);
            if (v59.u32[0] > 1uLL)
            {
              if (v63 >= *(_QWORD *)&v57)
                v63 %= *(_QWORD *)&v57;
            }
            else
            {
              v63 &= *(_QWORD *)&v57 - 1;
            }
            if (v63 != v58)
LABEL_107:
              *(_QWORD *)(*v55 + 8 * v58) = 0;
          }
          v64 = *v56;
          if (*v56)
          {
            v65 = *(_QWORD *)(v64 + 8);
            if (v59.u32[0] > 1uLL)
            {
              if (v65 >= *(_QWORD *)&v57)
                v65 %= *(_QWORD *)&v57;
            }
            else
            {
              v65 &= *(_QWORD *)&v57 - 1;
            }
            if (v65 != v58)
            {
              *(_QWORD *)(*v55 + 8 * v65) = v61;
              v64 = *v56;
            }
          }
          *v61 = v64;
          *v56 = 0;
          --v55[3];
          operator delete(v56);
          v66 = (void **)CA::Context::_deferred_by_lid;
          if (!*(_QWORD *)(CA::Context::_deferred_by_lid + 24))
          {
            v67 = *(_QWORD **)(CA::Context::_deferred_by_lid + 16);
            if (v67)
            {
              do
              {
                v68 = (_QWORD *)*v67;
                operator delete(v67);
                v67 = v68;
              }
              while (v68);
            }
            v69 = *v66;
            *v66 = 0;
            if (v69)
              operator delete(v69);
            MEMORY[0x186DBD990](v66, 0x10A0C408EF24B1CLL);
            CA::Context::_deferred_by_lid = 0;
          }
        }
        v51 += 16;
      }
      while (v51 != v50);
    }
    os_unfair_lock_unlock(&CA::Context::_deferred_lock);
    if (pthread_main_np())
    {
      CA::Context::delete_sent_deferrals((uint64_t *)&v78);
      goto LABEL_124;
    }
    v71 = operator new();
    *(_OWORD *)v71 = v78;
    *(_QWORD *)(v71 + 16) = v79;
    v79 = 0;
    v78 = 0uLL;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___ZN2CA7Context14send_deferralsEjjRKNSt3__113unordered_setIyNS1_4hashIyEENS1_8equal_toIyEENS1_9allocatorIyEEEEdjy_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    block[4] = v71;
    dispatch_async(MEMORY[0x1E0C80D38], block);
  }
  return pthread_mutex_unlock(&CA::Context::_deferred_sending_mutex);
}

void sub_184504D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p)
{
  if (__p)
    operator delete(__p);
  pthread_mutex_unlock(&CA::Context::_deferred_sending_mutex);
  _Unwind_Resume(a1);
}

uint64_t CA::Render::Encoder::send_message(CA::Render::Encoder *this, int a2, mach_port_t a3, unsigned int *a4, uint64_t a5)
{
  CA::Render::Encoder *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  size_t v26;
  mach_port_t reply_port;
  BOOL v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  mach_port_name_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  unsigned int *v43;
  int v44;
  size_t v45;
  uint64_t v46;
  mach_port_t v47;
  mach_msg_header_t msg[4];
  uint64_t v49;

  v47 = a3;
  v49 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  v8 = this;
  v9 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)(v9 + 1) > *((_QWORD *)this + 5))
  {
    this = (CA::Render::Encoder *)CA::Render::Encoder::grow(this, 1);
    v9 = (_BYTE *)*((_QWORD *)v8 + 4);
  }
  *((_QWORD *)v8 + 4) = v9 + 1;
  *v9 = 0;
  v10 = *((_QWORD *)v8 + 7);
  v11 = a5 == 1;
  if (v10)
  {
    MEMORY[0x1E0C80A78](this);
    v12 = (char *)&v42 - ((8 * v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v12, 8 * v10);
    v13 = (uint64_t *)*((_QWORD *)v8 + 6);
    if (v13)
    {
      v14 = 0;
      v15 = 8 * v10 - 8;
      do
      {
        *(_QWORD *)&v12[v15] = v13;
        v16 = *((_DWORD *)v13 + 2);
        if (v16 == 1)
          v17 = v14 + 1;
        else
          v17 = v14;
        if (v16 == 2)
          ++v11;
        else
          v14 = v17;
        v13 = (uint64_t *)*v13;
        v15 -= 8;
      }
      while (v13);
    }
    else
    {
      v14 = 0;
    }
  }
  else
  {
    v14 = 0;
    v12 = 0;
  }
  v19 = *((_QWORD *)v8 + 3);
  v18 = *((_QWORD *)v8 + 4);
  v20 = v18 - v19;
  if (v18 == v19)
    return 0;
  v46 = a5;
  v42 = 12 * v11;
  v43 = a4;
  v21 = ((12 * v11 + 28 + 16 * v14 + v20) + 3) & 0x1FFFFFFFCLL;
  v22 = *MEMORY[0x1E0C85AD8];
  if (v21 < *MEMORY[0x1E0C85AD8])
    v23 = v14;
  else
    v23 = v14 + 1;
  MEMORY[0x1E0C80A78](this);
  v25 = (char *)&v42 - v24;
  v45 = v26;
  bzero((char *)&v42 - v24, v26);
  reply_port = v47;
  if (v47)
    v28 = 1;
  else
    v28 = *((_BYTE *)v8 + 104) == 0;
  v29 = !v28;
  v44 = v29;
  if (!v28)
    reply_port = mig_get_reply_port();
  if (v46)
    v30 = 40004;
  else
    v30 = 40002;
  if (v46)
    v31 = 40005;
  else
    v31 = 40003;
  if (v21 < v22)
    v31 = v30;
  if (reply_port)
    v32 = 5395;
  else
    v32 = 19;
  v33 = v45;
  *(_DWORD *)v25 = v32;
  *((_DWORD *)v25 + 1) = v33;
  *((_DWORD *)v25 + 2) = a2;
  *((_DWORD *)v25 + 3) = reply_port;
  *((_DWORD *)v25 + 4) = 0;
  *((_DWORD *)v25 + 5) = v31;
  if (v11 + v23)
  {
    *(_DWORD *)v25 = v32 | 0x80000000;
    *((_DWORD *)v25 + 6) = v11 + v23;
  }
  if (v21 >= v22)
  {
    v34 = reply_port;
    *(_QWORD *)(v25 + 28) = *((_QWORD *)v8 + 3);
    *((_DWORD *)v25 + 9) = *((_DWORD *)v8 + 4) & 0x100 | (v25[38] << 16) | 0x1000000;
    *((_DWORD *)v25 + 10) = v20;
    v35 = v25 + 44;
  }
  else
  {
    v34 = reply_port;
    v35 = v25 + 28;
    memcpy(&v25[16 * v23 + 28 + v42], *((const void **)v8 + 3), v20);
  }
  if (v46 == 1)
  {
    *(_DWORD *)v35 = *v43;
    *((_WORD *)v35 + 5) = 19;
    v35 += 12;
  }
  for (; v10; --v10)
  {
    v37 = *(_QWORD *)v12;
    v38 = *(_DWORD *)(*(_QWORD *)v12 + 8);
    if (v38 == 2)
    {
      *(_DWORD *)v35 = *(_DWORD *)(v37 + 16);
      *((_WORD *)v35 + 5) = *(unsigned __int8 *)(v37 + 20);
      v40 = *(_QWORD *)v12;
      if (*(_DWORD *)(*(_QWORD *)v12 + 20) == 18 && *(_BYTE *)(v40 + 24))
        *(_BYTE *)(v40 + 24) = 0;
      v35 += 12;
    }
    else if (v38 == 1)
    {
      *(_QWORD *)v35 = *(_QWORD *)(v37 + 16);
      v39 = *(_QWORD *)(*(_QWORD *)v12 + 24);
      *((_DWORD *)v35 + 2) = (v35[10] << 16) | 0x1000100;
      *((_DWORD *)v35 + 3) = v39;
      v35 += 16;
    }
    v12 += 8;
  }
  if (BYTE9(xmmword_1ECDC6A90))
  {
    kdebug_trace();
    v36 = CA::Render::Message::send_message((mach_msg_header_t *)v25);
    kdebug_trace();
  }
  else
  {
    v36 = CA::Render::Message::send_message((mach_msg_header_t *)v25);
  }
  if (v44)
  {
    if (!(_DWORD)v36)
    {
      memset(msg, 0, 92);
      v36 = mach_msg(msg, 2, 0, 0x5Cu, v34, 0, 0);
    }
    if ((v36 - 268435458) <= 0xE && ((1 << (v36 - 2)) & 0x4003) != 0)
      mig_put_reply_port(v34);
    else
      mig_dealloc_reply_port(v34);
  }
  return v36;
}

uint64_t CA::Render::Message::send_message(mach_msg_header_t *this)
{
  BOOLean_t v2;
  uint64_t v3;
  NSObject *v4;
  uint8_t buf[4];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = voucher_mach_msg_set(this);
  v3 = mach_msg(this, 1, this->msgh_size, 0, 0, 0, 0);
  if (v2)
    voucher_mach_msg_clear(this);
  if ((_DWORD)v3)
  {
    if ((_DWORD)v3 == 268435459)
      goto LABEL_16;
    if (CA::Render::should_abort_on_send_failures(void)::once[0] != -1)
      dispatch_once(CA::Render::should_abort_on_send_failures(void)::once, &__block_literal_global_50);
    if ((CA::Render::should_abort_on_send_failures(void)::ignore_mach_send_errors & 1) == 0)
    {
      if (CADeviceHasInternalBuild::once != -1)
        dispatch_once(&CADeviceHasInternalBuild::once, &__block_literal_global_107);
      if (CADeviceHasInternalBuild::internal)
      {
        x_log_crash("CoreAnimation: Message::send_message() returned 0x%x - size %zu, # descriptors %zu", v3, this->msgh_size, this[1].msgh_bits);
        abort();
      }
    }
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v4 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v7 = v3;
        _os_log_impl(&dword_184457000, v4, OS_LOG_TYPE_ERROR, "CoreAnimation: Message::send_message() returned 0x%x\n", buf, 8u);
      }
    }
    if ((v3 - 268435459) <= 1)
LABEL_16:
      mach_msg_destroy(this);
  }
  return v3;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,CA::Context::DeferredCommit *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,CA::Context::DeferredCommit *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,CA::Context::DeferredCommit *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,CA::Context::DeferredCommit *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(float *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v33;

  v5 = a2;
  v6 = *((_QWORD *)a1 + 1);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = a2;
      if (v6 <= a2)
        v8 = a2 % v6;
    }
    else
    {
      v8 = ((_DWORD)v6 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v8);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v11 >= v6)
                v11 %= v6;
            }
            else
            {
              v11 &= v6 - 1;
            }
            if (v11 != v8)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    v8 = 0;
  }
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v5;
  *((_DWORD *)v10 + 4) = *a3;
  v10[3] = 0;
  v12 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v13 = a1[8];
  if (v6 && (float)(v13 * (float)v6) >= v12)
  {
    v5 = v8;
    goto LABEL_64;
  }
  v14 = 1;
  if (v6 >= 3)
    v14 = (v6 & (v6 - 1)) != 0;
  v15 = v14 | (2 * v6);
  v16 = vcvtps_u32_f32(v12 / v13);
  if (v15 <= v16)
    prime = (int8x8_t)v16;
  else
    prime = (int8x8_t)v15;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v6 = *((_QWORD *)a1 + 1);
  }
  if (*(_QWORD *)&prime <= v6)
  {
    if (*(_QWORD *)&prime >= v6)
      goto LABEL_60;
    v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v6 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
    {
      v24 = std::__next_prime(v24);
    }
    else
    {
      v26 = 1 << -(char)__clz(v24 - 1);
      if (v24 >= 2)
        v24 = v26;
    }
    if (*(_QWORD *)&prime <= v24)
      prime = (int8x8_t)v24;
    if (*(_QWORD *)&prime >= v6)
    {
      v6 = *((_QWORD *)a1 + 1);
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v33 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v33)
        operator delete(v33);
      v6 = 0;
      *((_QWORD *)a1 + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v18 = operator new(8 * *(_QWORD *)&prime);
  v19 = *(_QWORD **)a1;
  *(_QWORD *)a1 = v18;
  if (v19)
    operator delete(v19);
  v20 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v20++) = 0;
  while (*(_QWORD *)&prime != v20);
  v21 = (_QWORD *)*((_QWORD *)a1 + 2);
  if (v21)
  {
    v22 = v21[1];
    v23 = (uint8x8_t)vcnt_s8(prime);
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.u32[0] > 1uLL)
    {
      if (v22 >= *(_QWORD *)&prime)
        v22 %= *(_QWORD *)&prime;
    }
    else
    {
      v22 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = a1 + 4;
    v27 = (_QWORD *)*v21;
    if (*v21)
    {
      do
      {
        v28 = v27[1];
        if (v23.u32[0] > 1uLL)
        {
          if (v28 >= *(_QWORD *)&prime)
            v28 %= *(_QWORD *)&prime;
        }
        else
        {
          v28 &= *(_QWORD *)&prime - 1;
        }
        if (v28 != v22)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v21;
            goto LABEL_56;
          }
          *v21 = *v27;
          *v27 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v28);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v28) = v27;
          v27 = v21;
        }
        v28 = v22;
LABEL_56:
        v21 = v27;
        v27 = (_QWORD *)*v27;
        v22 = v28;
      }
      while (v27);
    }
  }
  v6 = (unint64_t)prime;
LABEL_60:
  if ((v6 & (v6 - 1)) != 0)
  {
    if (v6 <= v5)
      v5 %= v6;
  }
  else
  {
    v5 = ((_DWORD)v6 - 1) & v5;
  }
LABEL_64:
  v29 = *(_QWORD **)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v30)
  {
    *v10 = *v30;
LABEL_72:
    *v30 = v10;
    goto LABEL_73;
  }
  *v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v29[v5] = a1 + 4;
  if (*v10)
  {
    v31 = *(_QWORD *)(*v10 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v31 >= v6)
        v31 %= v6;
    }
    else
    {
      v31 &= v6 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

void sub_184505738(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  unint64_t v7;

  if (!a2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a3;
    if (a3 >= a2)
      v4 = a3 % a2;
  }
  else
  {
    v4 = (a2 - 1) & a3;
  }
  v5 = *(_QWORD **)(a1 + 8 * v4);
  if (!v5)
    return 0;
  result = (_QWORD *)*v5;
  if (*v5)
  {
    do
    {
      v7 = result[1];
      if (v7 == a3)
      {
        if (result[2] == a3)
          return result;
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= a2)
            v7 %= a2;
        }
        else
        {
          v7 &= a2 - 1;
        }
        if (v7 != v4)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

BOOL CA::Render::DeferredEncoder::retime(int8x8_t *this, double a2)
{
  int8x8_t v3;
  int8x8_t v4;
  int64x2_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  double v14;
  _QWORD *v15;
  _QWORD *v16;
  int8x8_t v17;
  uint64_t v18;
  int64x2_t v20;

  v4 = this[15];
  v3 = this[16];
  if (*(_QWORD *)&v4 == *(_QWORD *)&v3)
  {
    v3 = this[15];
  }
  else
  {
    v6 = vdupq_n_s64(0x7FF8000000000000uLL);
    v20 = v6;
    do
    {
      v7 = this[19];
      if (v7)
      {
        v8 = **(_QWORD **)&v4;
        v9 = (uint8x8_t)vcnt_s8(v7);
        v9.i16[0] = vaddlv_u8(v9);
        if (v9.u32[0] > 1uLL)
        {
          v10 = **(_QWORD **)&v4;
          if (v8 >= *(_QWORD *)&v7)
            v10 = v8 % *(_QWORD *)&v7;
        }
        else
        {
          v10 = (*(_QWORD *)&v7 - 1) & v8;
        }
        v11 = *(_QWORD **)(*(_QWORD *)&this[18] + 8 * v10);
        if (v11)
        {
          v12 = (_QWORD *)*v11;
          if (*v11)
          {
            do
            {
              v13 = v12[1];
              if (v13 == v8)
              {
                if (v12[2] == v8)
                {
                  v14 = CA::Render::TimingList::map_time(*(CA::Render::TimingList **)(*(_QWORD *)&v4 + 16), *(double *)(*(_QWORD *)&v4 + 24) + a2);
                  v6 = v20;
                  *(double *)(*(_QWORD *)&v4 + 32) = v14;
                  *(double *)(*(_QWORD *)&this[3] + v12[3]) = v14;
                  v3 = this[16];
                  goto LABEL_20;
                }
              }
              else
              {
                if (v9.u32[0] > 1uLL)
                {
                  if (v13 >= *(_QWORD *)&v7)
                    v13 %= *(_QWORD *)&v7;
                }
                else
                {
                  v13 &= *(_QWORD *)&v7 - 1;
                }
                if (v13 != v10)
                  break;
              }
              v12 = (_QWORD *)*v12;
            }
            while (v12);
          }
        }
      }
      *(int64x2_t *)(*(_QWORD *)&v4 + 24) = v6;
LABEL_20:
      *(_QWORD *)&v4 += 40;
    }
    while (*(_QWORD *)&v4 != *(_QWORD *)&v3);
  }
  if (this[21])
  {
    v15 = (_QWORD *)this[20];
    if (v15)
    {
      do
      {
        v16 = (_QWORD *)*v15;
        operator delete(v15);
        v15 = v16;
      }
      while (v16);
    }
    this[20] = 0;
    v17 = this[19];
    if (v17)
    {
      v18 = 0;
      do
        *(_QWORD *)(*(_QWORD *)&this[18] + 8 * v18++) = 0;
      while (*(_QWORD *)&v17 != v18);
    }
    this[21] = 0;
    v3 = this[16];
  }
  return *(_QWORD *)&this[15] != *(_QWORD *)&v3;
}

void CA::Render::DeferredEncoder::~DeferredEncoder(CA::Render::DeferredEncoder *this)
{
  malloc_zone_t *malloc_zone;

  CA::Render::DeferredEncoder::~DeferredEncoder(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  void *v11;

  *(_QWORD *)this = off_1E15976C0;
  v2 = *((_QWORD *)this + 15);
  v3 = *((_QWORD *)this + 16);
  while (v2 != v3)
  {
    v4 = *(unsigned int **)(v2 + 16);
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
    v2 += 40;
  }
  v8 = (_QWORD *)*((_QWORD *)this + 20);
  if (v8)
  {
    do
    {
      v9 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v9;
    }
    while (v9);
  }
  v10 = (void *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v10)
    operator delete(v10);
  v11 = (void *)*((_QWORD *)this + 15);
  if (v11)
  {
    *((_QWORD *)this + 16) = v11;
    operator delete(v11);
  }
  CA::Render::Encoder::~Encoder(this);
}

void CA::Render::Encoder::~Encoder(CA::Render::Encoder *this)
{
  _QWORD *i;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  CA::Render::Encoder::ObjectCache *v7;

  *(_QWORD *)this = off_1E1598EC0;
  for (i = (_QWORD *)*((_QWORD *)this + 14); i; i = (_QWORD *)i[1])
  {
    v3 = *i;
    v4 = (unsigned int *)(*i + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  }
  v7 = (CA::Render::Encoder::ObjectCache *)*((_QWORD *)this + 9);
  if (v7)
    CA::Render::Encoder::ObjectCache::unref(v7);
  CA::Render::Coder::~Coder(this);
}

{
  malloc_zone_t *malloc_zone;

  CA::Render::Encoder::~Encoder(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CA::Render::Encoder::ObjectCache::unref(CA::Render::Encoder::ObjectCache *this)
{
  unsigned int v2;
  unsigned int v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  malloc_zone_t *malloc_zone;

  do
  {
    v2 = __ldaxr((unsigned int *)this);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, (unsigned int *)this));
  if (!v3)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Encoder::ObjectCache::_lock);
    CA::Render::Encoder::ObjectCache::_cache_list = (uint64_t)x_list_remove((_QWORD *)CA::Render::Encoder::ObjectCache::_cache_list, (uint64_t)this);
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Encoder::ObjectCache::_lock);
    x_hash_table_free(*((_QWORD **)this + 1));
    v4 = (_QWORD *)*((_QWORD *)this + 2);
    if (v4)
      x_hash_table_free(v4);
    v5 = (_QWORD *)*((_QWORD *)this + 3);
    if (v5)
      x_hash_table_free(v5);
    v6 = (_QWORD *)*((_QWORD *)this + 4);
    if (v6)
      x_hash_table_free(v6);
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, this);
  }
}

double CA::Render::TimingList::map_time(CA::Render::TimingList *this, double result)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  double v11[2];

  v11[1] = *(double *)MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 2);
  v2 = *((_QWORD *)this + 3);
  v11[0] = result;
  v4 = v2 - v3;
  if (v4)
  {
    v6 = 0;
    v7 = v4 >> 3;
    if (v7 <= 1)
      v7 = 1;
    v8 = v7 - 1;
    do
    {
      v9 = *((_QWORD *)this + 2);
      if (v6 >= (*((_QWORD *)this + 3) - v9) >> 3)
        __assert_rtn("operator[]", "x-small-vector.h", 98, "pos < (size ()) && \"Out of bounds access\"");
      if (CA::Render::Timing::map_time(*(CA::Render::Timing **)(v9 + 8 * v6), v11, 0))
        v10 = v8 == v6;
      else
        v10 = 1;
      ++v6;
    }
    while (!v10);
    return v11[0];
  }
  return result;
}

void CA::Render::CompressedImage::finalize(CA::Render::CompressedImage *this)
{
  unsigned int *v2;
  unsigned int v3;

  CA::Render::post_notification(3u, (unint64_t)this, 0, 1);
  v2 = (unsigned int *)((char *)this + 164);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 - 1, v2));
  if (this)
  {
    if (v3 == 1)
      (*(void (**)(CA::Render::CompressedImage *))(*(_QWORD *)this + 8))(this);
  }
}

void CA::Render::CompressedImage::~CompressedImage(CA::Render::CompressedImage *this)
{
  malloc_zone_t *malloc_zone;

  CA::Render::CompressedImage::~CompressedImage(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  mach_port_name_t v2;
  void (*v3)(_QWORD, _QWORD);
  void *v4;
  malloc_zone_t *malloc_zone;
  void *v6;
  malloc_zone_t *v7;
  void *v8;
  malloc_zone_t *v9;

  *(_QWORD *)this = off_1E15975B0;
  v2 = *((_DWORD *)this + 43);
  if (v2)
    mach_port_deallocate(*MEMORY[0x1E0C83DA0], v2);
  v3 = (void (*)(_QWORD, _QWORD))*((_QWORD *)this + 14);
  if (v3)
    v3(*((_QWORD *)this + 12), *((_QWORD *)this + 15));
  v4 = (void *)*((_QWORD *)this + 16);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, v4);
  v6 = (void *)*((_QWORD *)this + 17);
  v7 = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(v7, v6);
  v8 = (void *)*((_QWORD *)this + 18);
  v9 = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(v9, v8);
  --dword_1ECDC7C4C;
  CA::Render::Texture::~Texture((CGColorSpaceRef *)this);
}

void sub_184505D68(_Unwind_Exception *a1)
{
  CGColorSpaceRef *v1;

  --dword_1ECDC7C4C;
  CA::Render::Texture::~Texture(v1);
  _Unwind_Resume(a1);
}

uint64_t CA::Render::release_cgtexturedata(CA::Render *this, const void *a2, void *a3)
{
  return CGImageTextureDataRelease();
}

void CA::Render::TimingList::~TimingList(CA::Render::TimingList *this, const CA::Render::Object *a2)
{
  malloc_zone_t *malloc_zone;

  CA::Render::TimingList::~TimingList(this, a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = off_1E15963D0;
  v3 = (_QWORD *)*((_QWORD *)this + 2);
  v4 = (_QWORD *)*((_QWORD *)this + 3);
  if (v3 != v4)
  {
    do
    {
      v5 = *v3;
      v6 = (unsigned int *)(*v3 + 8);
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      ++v3;
    }
    while (v3 != v4);
    v3 = (_QWORD *)*((_QWORD *)this + 2);
  }
  if (v3 != *((_QWORD **)this + 4))
    free(v3);
  --dword_1ECDC7CFC;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
}

void ___ZN2CA7Context14send_deferralsEjjRKNSt3__113unordered_setIyNS1_4hashIyEENS1_8equal_toIyEENS1_9allocatorIyEEEEdjy_block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  CA::Context::delete_sent_deferrals(*(uint64_t **)(a1 + 32));
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v3);
    }
    JUMPOUT(0x186DBD990);
  }
}

void CA::Context::delete_sent_deferrals(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  CA::Context *v3;
  CA::Context **v4;
  CA::Context *v5;
  malloc_zone_t *malloc_zone;
  malloc_zone_t *v7;

  v1 = *a1;
  v2 = a1[1];
  while (v1 != v2)
  {
    v4 = *(CA::Context ***)v1;
    v3 = *(CA::Context **)(v1 + 8);
    if (*(CA::Context **)v1 != v3)
    {
      do
      {
        v5 = *v4;
        CA::Context::unref(v4[1], 1);
        malloc_zone = (malloc_zone_t *)get_malloc_zone();
        malloc_zone_free(malloc_zone, v4);
        v4 = (CA::Context **)v5;
      }
      while (v5 != v3);
    }
    v7 = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(v7, v3);
    v1 += 16;
  }
}

uint64_t CA::fo_fences_released(_QWORD *a1, uint64_t a2, unsigned int a3, unint64_t a4, double a5)
{
  CABatchInfo *v9;

  if (a1 && a1[4])
  {
    if (a3 - 1 >= 0xFFFFFFFE)
    {
      CA::Render::Fence::Transaction::Observer::notify_batch_handlers(a1);
    }
    else
    {
      v9 = +[CABatchInfo _newInfoWithUnownedPort:name:]((uint64_t)CABatchInfo, a3, a4);
      CA::Render::Fence::Transaction::Observer::notify_batch_handlers(a1);
      if (v9)
      {
        os_unfair_lock_lock((os_unfair_lock_t)&v9->_lock);
        v9->_invalidated = 1;
        os_unfair_lock_unlock((os_unfair_lock_t)&v9->_lock);

      }
    }
  }
  return CA::Context::send_deferrals(0, 0, a2, a3, a5);
}

uint64_t CA::Render::CompressedImage::data_size(CA::Render::CompressedImage *this)
{
  return *((_QWORD *)this + 13);
}

void CA::Render::encode_volatile(CA::Render *this, const CA::Render::Object *a2, CA::Render::Encoder *a3, void *a4)
{
  int v5;
  char *v7;
  _BYTE *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;

  v5 = (int)a2;
  if (CA::Render::Encoder::initialize_render_id_slide(void)::once[0] != -1)
    dispatch_once(CA::Render::Encoder::initialize_render_id_slide(void)::once, &__block_literal_global_11026);
  if (this)
    v7 = (char *)this + CA::Render::_render_id_slide;
  else
    v7 = 0;
  v8 = (_BYTE *)*((_QWORD *)a3 + 4);
  if ((unint64_t)(v8 + 1) > *((_QWORD *)a3 + 5))
  {
    CA::Render::Encoder::grow(a3, 1);
    v8 = (_BYTE *)*((_QWORD *)a3 + 4);
  }
  *((_QWORD *)a3 + 4) = v8 + 1;
  *v8 = 17;
  v9 = (_QWORD *)*((_QWORD *)a3 + 4);
  if ((unint64_t)(v9 + 1) > *((_QWORD *)a3 + 5))
  {
    CA::Render::Encoder::grow(a3, 8);
    v9 = (_QWORD *)*((_QWORD *)a3 + 4);
  }
  *v9 = v7;
  v10 = *((_QWORD *)a3 + 4);
  v11 = *((_QWORD *)a3 + 5);
  v12 = (_DWORD *)(v10 + 8);
  *((_QWORD *)a3 + 4) = v10 + 8;
  if (v10 + 12 > v11)
  {
    CA::Render::Encoder::grow(a3, 4);
    v12 = (_DWORD *)*((_QWORD *)a3 + 4);
  }
  *v12 = v5;
  *((_QWORD *)a3 + 4) += 4;
}

void CA::Layer::run_deferred_animation_callbacks(CA::Layer *this, double a2, const CA::Render::DeferredEncoder *a3)
{
  uint64_t *v5;
  void *v6;
  uint64_t *v7;
  _QWORD *v8;
  _QWORD *v9;
  double v10;
  float64x2_t v11;
  uint64_t v12;
  __int16 v13;
  float v14;
  uint64_t v15;
  double v17;
  double v18;
  int8x16_t v19;
  int8x16_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  _OWORD *v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  void *v35;
  char *v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  double v40;
  unint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  double *v45;
  _BOOL4 v46;
  uint64_t v47;
  _BOOL4 v48;
  _QWORD *v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  double *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  int v62;
  const char *v63;
  _OWORD *v64;
  int8x16_t v65;
  uint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  double v69;
  void *v70;
  char *v71;
  _OWORD *v72;
  unint64_t v73;
  _OWORD v74[16];
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  if (byte_1ECDC6B01)
    return;
  if (*((_QWORD *)this + 15) == *((_QWORD *)this + 16))
    __assert_rtn("run_deferred_animation_callbacks", "CALayer.mm", 8323, "!timing_infos.empty ()");
  v5 = (uint64_t *)operator new();
  v7 = v5;
  v5[1] = 0;
  v5[2] = 0;
  *v5 = 0;
  memset(v74, 0, sizeof(v74));
  v70 = v74;
  v71 = (char *)v74;
  v72 = v74;
  v73 = 32;
  v9 = (_QWORD *)*((_QWORD *)this + 15);
  v8 = (_QWORD *)*((_QWORD *)this + 16);
  v10 = INFINITY;
  if (v9 == v8)
  {
LABEL_72:
    if (v7[2])
      goto LABEL_73;
    goto LABEL_74;
  }
  v11.f64[0] = NAN;
  v11.f64[1] = NAN;
  v65 = (int8x16_t)vnegq_f64(v11);
  v66 = v5;
  do
  {
    v12 = v9[1];
    v13 = *(_WORD *)(v12 + 56);
    if ((v13 & 8) == 0)
    {
      v62 = 8331;
      v63 = "ti.la->deferred";
      goto LABEL_87;
    }
    if ((v13 & 2) == 0)
    {
      v62 = 8332;
      v63 = "ti.la->committed";
LABEL_87:
      __assert_rtn("run_deferred_animation_callbacks", "CALayer.mm", v62, v63);
    }
    v14 = *(float *)(v9[2] + 304);
    v15 = *(_QWORD *)(v12 + 32);
    if (v14 == 0.0 || v15 == 0)
      goto LABEL_67;
    *(_QWORD *)(v15 + 40) = v9[4];
    *(_DWORD *)(v15 + 12) &= ~0x1000u;
    CA::Render::Timing::end_time((CA::Render::Timing *)v15);
    v17 = *(double *)(v15 + 40);
    v18 = CA::Render::Timing::end_time((CA::Render::Timing *)v15);
    if (v14 >= 0.0)
      v21 = v17;
    else
      v21 = v18;
    if (v14 >= 0.0)
      v17 = v18;
    v22 = v9[2];
    v24 = *(_QWORD *)(v22 + 16);
    v23 = *(_QWORD *)(v22 + 24);
    v25 = (v23 - v24) >> 3;
    v27 = v70;
    v26 = v71;
    v28 = (v71 - (_BYTE *)v70) >> 3;
    if (v28 <= v25)
    {
      if (v28 >= v25)
        goto LABEL_33;
      if (v73 >= v25)
      {
        v34 = v70;
      }
      else
      {
        v64 = v72;
        v30 = (v73 + 1) | ((v73 + 1) >> 1) | (((v73 + 1) | ((v73 + 1) >> 1)) >> 2);
        v31 = v30 | (v30 >> 4) | ((v30 | (v30 >> 4)) >> 8);
        v32 = v31 | (v31 >> 16) | ((v31 | (v31 >> 16)) >> 32);
        if (v32 + 1 > v25)
          v33 = v32 + 1;
        else
          v33 = (v23 - v24) >> 3;
        v67 = v33;
        v34 = malloc_type_malloc(8 * v33, 0x100004000313F17uLL);
        v35 = v70;
        v36 = v71;
        if (v70 != v71)
        {
          v37 = v34;
          v38 = (uint64_t *)v70;
          do
          {
            v39 = *v38++;
            *v37++ = v39;
          }
          while (v38 != (uint64_t *)v36);
        }
        if (v27 != v64)
          free(v35);
        v26 = (char *)&v34[v28];
        v70 = v34;
        v73 = v67;
      }
      v29 = (char *)&v34[v25];
      if (v26 != v29)
        bzero(v26, (((char *)v34 + v23 - v24 - v26 - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
    }
    else
    {
      v29 = (char *)v70 + 8 * v25;
    }
    v71 = v29;
LABEL_33:
    v69 = a2;
    v40 = a2;
    if (v23 != v24)
    {
      v41 = 0;
      if (v25 <= 1)
        v42 = 1;
      else
        v42 = v25;
      do
      {
        if (v41 >= (v71 - (_BYTE *)v70) >> 3)
          __assert_rtn("operator[]", "x-small-vector.h", 91, "pos < size () && \"Out of bounds access\"");
        v43 = v69;
        *((double *)v70 + v41) = v69;
        v44 = *(_QWORD *)(v22 + 16);
        if (v41 >= (*(_QWORD *)(v22 + 24) - v44) >> 3)
LABEL_83:
          __assert_rtn("operator[]", "x-small-vector.h", 98, "pos < (size ()) && \"Out of bounds access\"");
        v45 = *(double **)(v44 + 8 * v41);
        v69 = fmin(fmax(v43, v45[5]), CA::Render::Timing::end_time((CA::Render::Timing *)v45));
        CA::Render::Timing::map_time((CA::Render::Timing *)v45, &v69, 0);
        ++v41;
      }
      while (v42 != v41);
      v40 = v69;
    }
    *(double *)v19.i64 = v14;
    v20.i64[0] = 0x7FF0000000000000;
    v68 = vbslq_s8(v65, v20, v19).u64[0];
    v46 = v40 < v21;
    if (v14 <= 0.0)
      v46 = v40 > v21;
    if (v46)
    {
      v47 = v9[1];
      v7 = v66;
      if ((*(_WORD *)(v47 + 56) & 0x1080) != 0)
        goto LABEL_56;
      if ((*(_WORD *)(v47 + 56) & 0x2000) != 0)
        goto LABEL_52;
      goto LABEL_51;
    }
    v48 = v40 < v17;
    if (v14 <= 0.0)
      v48 = v40 > v17;
    v49 = (_QWORD *)v9[1];
    v7 = v66;
    if (v48)
    {
      schedule_start_callback(v49, (uint64_t)v66);
      v47 = v9[1];
      if ((*(_WORD *)(v47 + 56) & 0x2000) != 0)
      {
LABEL_52:
        v21 = v17;
        goto LABEL_56;
      }
LABEL_51:
      v21 = *(double *)&v68;
      if (!*(_QWORD *)(v47 + 48))
        goto LABEL_56;
      goto LABEL_52;
    }
    *(_DWORD *)(v49[1] + 16) |= 2u;
    schedule_stop_callback((uint64_t)v49, v66);
    v50 = v9[1];
    v51 = *(_WORD *)(v50 + 56);
    if ((v51 & 1) != 0)
      *(_WORD *)(v50 + 56) = v51 | 4;
    v21 = *(double *)&v68;
LABEL_56:
    if ((*(_QWORD *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      v52 = v9[2];
      v53 = (double *)v70;
      v54 = (v71 - (_BYTE *)v70) >> 3;
      v56 = *(_QWORD *)(v52 + 16);
      v55 = *(_QWORD *)(v52 + 24);
      v57 = 0.0;
      if (v54 == (v55 - v56) >> 3)
      {
        v69 = v21;
        if (v55 != v56 && v55 - v56 >= 1)
        {
          v58 = v54 - 1;
          do
          {
            if (v54 <= v58)
              goto LABEL_83;
            CA::Render::Timing::inverse_map_time(*(_QWORD *)(v56 + 8 * v58), &v69, v53[v58]);
            v59 = v58-- + 1;
          }
          while (v59 > 1);
          v21 = v69;
        }
        v57 = v21;
      }
      if (v10 >= v57)
        v10 = v57;
    }
LABEL_67:
    *(_WORD *)(v9[1] + 56) &= ~8u;
    v60 = v9[1];
    if ((*(_WORD *)(v60 + 56) & 0x10) != 0)
    {
      *(_QWORD *)v60 = v7[2];
      v7[2] = v60;
    }
    v9 += 5;
  }
  while (v9 != v8);
  if (!v7[1] && !*v7)
    goto LABEL_72;
LABEL_73:
  dispatch_async_f(MEMORY[0x1E0C80D38], v7, (dispatch_function_t)run_animation_callbacks);
  v7 = 0;
LABEL_74:
  if ((*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v61 = a2 + 0.0166666667;
    if (v10 >= a2 + 0.0166666667)
      v61 = v10;
    CA::call_at_time((CA *)CA::Layer::animation_heart_beat, 0, v61, v6);
  }
  if (v70 != v72)
    free(v70);
  if (v7)
    MEMORY[0x186DBD990](v7, 0x20C40960023A9);
}

void sub_1845066E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21)
{
  uint64_t v21;

  if (a19 != a21)
    free(a19);
  if (v21)
    MEMORY[0x186DBD990](v21, 0x20C40960023A9);
  _Unwind_Resume(exception_object);
}

_QWORD *schedule_start_callback(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  malloc_zone_t *malloc_zone;
  _QWORD *v7;

  if ((result[7] & 0x1000) != 0)
  {
    v3 = result;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = result[1];
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v7 = malloc_type_zone_malloc(malloc_zone, 0x10uLL, 0x8BB15036uLL);
    *v7 = v5;
    v7[1] = v4;
    *(_QWORD *)(a2 + 8) = v7;
    result = CFRetain((CFTypeRef)v3[1]);
    *((_WORD *)v3 + 28) &= ~0x1000u;
  }
  return result;
}

uint64_t default_anim_init(void)
{
  CAMediaTimingFunction *v0;
  uint64_t result;

  basicAnim = objc_alloc_init(CABasicAnimation);
  transition = objc_alloc_init(CATransition);
  v0 = +[CAMediaTimingFunction functionWithName:](CAMediaTimingFunction, "functionWithName:", CFSTR("default"));
  objc_msgSend((id)basicAnim, "setTimingFunction:", v0);
  objc_msgSend((id)basicAnim, "setFillMode:", CFSTR("backwards"));
  objc_msgSend((id)basicAnim, "setKeyPath:", CFSTR("contents"));
  objc_msgSend((id)transition, "setTimingFunction:", v0);
  result = objc_msgSend((id)transition, "setFillMode:", CFSTR("backwards"));
  *(_DWORD *)(basicAnim + 16) |= 1u;
  *(_DWORD *)(transition + 16) |= 1u;
  return result;
}

uint64_t ___ZL36cons_CAAnimation_kCAValueWeakPointerjb_block_invoke(uint64_t a1, CA::Transaction *a2)
{
  int v3;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a1 + 32);
  v5[0] = 0;
  CAAnimation_getter(a2, v3, (const CGAffineTransform *)4, (CA::Mat4Impl *)v5);
  return v5[0];
}

id ___ZL34cons_CALayer_kCAValueCopiedPointerjb_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  id v4[2];

  v4[1] = *(id *)MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 32);
  v4[0] = 0;
  CA::Layer::getter(*(CA::Transaction **)(a2 + 16), v2, (const CGAffineTransform *)3, v4);
  return v4[0];
}

void *find_state(NSArray *a1, NSString *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _BYTE v10[128];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v4 = -[NSArray countByEnumeratingWithState:objects:count:](a1, "countByEnumeratingWithState:objects:count:", &v11, v10, 16);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = *(_QWORD *)v12;
LABEL_4:
  v7 = 0;
  while (1)
  {
    if (*(_QWORD *)v12 != v6)
      objc_enumerationMutation(a1);
    v8 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * v7);
    if ((objc_msgSend((id)objc_msgSend(v8, "name"), "isEqualToString:", a2) & 1) != 0)
      return v8;
    if (v5 == ++v7)
    {
      v5 = -[NSArray countByEnumeratingWithState:objects:count:](a1, "countByEnumeratingWithState:objects:count:", &v11, v10, 16);
      v8 = 0;
      if (v5)
        goto LABEL_4;
      return v8;
    }
  }
}

void sub_184508428(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x184508394);
  }
  _Unwind_Resume(a1);
}

CAAnimation *CALayerCreateImplicitAnimation(CAMediaTimingFunction *a1, void *a2, unsigned int a3)
{
  CAAnimation *v5;
  CA::Transaction *v6;
  BOOL v7;
  objc_class *v8;
  uint64_t *v9;
  unsigned int *v10;
  const char *v11;
  id v12;
  void *v13;
  char v15;
  uint64_t v16;

  v5 = (CAAnimation *)a1;
  v16 = *MEMORY[0x1E0C80C00];
  if (!CALayerCreateImplicitAnimation::timingFunction)
  {
    a1 = +[CAMediaTimingFunction functionWithName:](CAMediaTimingFunction, "functionWithName:", CFSTR("default"));
    CALayerCreateImplicitAnimation::timingFunction = (uint64_t)a1;
  }
  v15 = 0;
  v6 = CA::Transaction::ensure_compat((CA::Transaction *)a1);
  if (CA::Transaction::get_value(*((_QWORD *)v6 + 11), 27, (const CGAffineTransform *)7, (CA::Mat4Impl *)&v15))v7 = v15 == 0;
  else
    v7 = 1;
  if (v7)
    v5 = (CAAnimation *)-[CAAnimation presentationLayer](v5, "presentationLayer");
  if (v5)
  {
    if (a3)
    {
      v8 = (objc_class *)objc_opt_class();
      v9 = (uint64_t *)classDescription(v8);
      v10 = propertyInfoForAtom(v9, a3, 0);
      if (v10)
      {
        v11 = (const char *)*((_QWORD *)v10 + 2);
        if (!v11 || !*((_WORD *)v10 + 2))
          return 0;
        v12 = CA_valueForKey(v5, v11, *((unsigned __int16 *)v10 + 2));
      }
      else
      {
        v12 = -[CAAnimation valueForUndefinedKey:](v5, "valueForUndefinedKey:", CAAtomGetString(a3));
      }
    }
    else
    {
      v12 = CAObject_valueForKeyPath(v5, a2);
    }
    v13 = v12;
    if (v12)
    {
      v5 = +[CAAnimation animation](CABasicAnimation, "animation");
      -[CAAnimation setFromValue:](v5, "setFromValue:", v13);
      -[CAAnimation setKeyPath:](v5, "setKeyPath:", a2);
      -[CAAnimation setTimingFunction:](v5, "setTimingFunction:", CALayerCreateImplicitAnimation::timingFunction);
      -[CAAnimation setFillMode:](v5, "setFillMode:", CFSTR("backwards"));
      if (dyld_program_sdk_at_least())
        v5->_flags |= 1u;
      return v5;
    }
    return 0;
  }
  return v5;
}

void sub_1845086EC()
{
  objc_end_catch();
  JUMPOUT(0x184508678);
}

CALayer *CA::Layer::presentation_layer(CA::Layer *this, CA::Transaction::Shared **a2)
{
  CA::Layer *v3;
  CALayer *v4;
  CA::Transaction::Shared *v5;
  int v6;
  uint64_t v7;
  CALayer *v8;
  int v9;
  malloc_zone_t *malloc_zone;
  unsigned int *v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t v15;
  CALayer *v16;
  double v17;
  unsigned int *v18;
  unsigned int v19;
  int *v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD v24[2];

  v24[1] = *MEMORY[0x1E0C80C00];
  do
  {
    v3 = this;
    this = CA::Layer::model_layer(this, (CA::Transaction *)a2);
  }
  while (this != v3 && this);
  if ((*((_DWORD *)v3 + 1) & 0x4000) == 0)
    return 0;
  v5 = a2[13];
  v6 = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v6 + 1;
  if (!v6)
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
  v7 = *((_QWORD *)v5 + 27);
  if (!v7 || (v4 = (CALayer *)x_hash_table_lookup(v7, (uint64_t)v3, 0)) == 0)
  {
    v8 = (CALayer *)*((_QWORD *)v3 + 2);
    v4 = (CALayer *)objc_alloc((Class)objc_opt_class());
    if (v4)
    {
      v9 = *((_DWORD *)v3 + 1);
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      v11 = (unsigned int *)malloc_type_zone_malloc(malloc_zone, 0x128uLL, 0x8BB15036uLL);
      v12 = v11;
      if (v11)
      {
        if ((v9 & 0x100000) != 0)
          v13 = (uint64_t)v3 + 152;
        else
          v13 = (uint64_t)v3 + 40;
        *(_QWORD *)v11 = 0;
        *((_QWORD *)v11 + 1) = 0;
        *((_QWORD *)v11 + 3) = 0;
        *((_QWORD *)v11 + 4) = 0;
        *((_QWORD *)v11 + 2) = v4;
        CA::Layer::State::State((uint64_t)(v11 + 10), v13, (CA::Transaction *)a2);
        *((_QWORD *)v12 + 19) = 0;
        *((_QWORD *)v12 + 20) = 0;
        v12[44] = 0;
        *((_QWORD *)v12 + 21) = 0;
        *(_OWORD *)(v12 + 46) = 0u;
        *(_OWORD *)(v12 + 50) = 0u;
        *(_OWORD *)(v12 + 54) = 0u;
        *(_OWORD *)(v12 + 58) = 0u;
        *((_BYTE *)v12 + 248) = 0;
        *((_QWORD *)v12 + 32) = 0;
        *((_QWORD *)v12 + 33) = 0;
        *((_QWORD *)v12 + 35) = 0;
        *((_QWORD *)v12 + 36) = 0;
        *v12 = 1;
        v12[1] = v9 & 0xFFEDFFFF | 0x20000;
        *((_QWORD *)v12 + 34) = 0;
        v4->_attr.layer = v12;
      }
      CA::Layer::set_model_layer((CA::Layer *)v12, (CA::Transaction *)a2, v3);
      v4 = -[CALayer initWithLayer:](v4, "initWithLayer:", v8);
      if (v4)
      {
        CA::Layer::apply_modifiers_to_layer(*((CA::Layer **)v3 + 36), v4);
        v14 = (uint64_t **)*((_QWORD *)v3 + 35);
        if (v14)
        {
          CA::Transaction::Shared::time(a2[13]);
          v24[0] = v15;
          if (CA::Layer::convert_time((CA::Layer *)a2, (CA::Transaction *)v24, 0, v8, v16))
          {
            v17 = *(double *)v24;
            do
            {
              if (((_WORD)v14[7] & 0x802) == 2)
                objc_msgSend(v14[1], "applyForTime:presentationObject:modelObject:", v4, v8, v17);
              v14 = (uint64_t **)*v14;
            }
            while (v14);
          }
          v18 = v12 + 1;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 | 0x8000, v18));
        }
        if (!*(_DWORD *)a2[13])
          CA::Transaction::ensure_implicit((CA::Transaction *)a2, 1);
        v20 = (int *)*((_QWORD *)v5 + 27);
        if (!v20)
        {
          v22 = (uint64_t *)*((_QWORD *)v5 + 16);
          v21 = *((_QWORD *)v5 + 17);
          if (!v21)
          {
            v21 = x_pool_new_(*((uint64_t **)v5 + 16));
            *((_QWORD *)v5 + 17) = v21;
          }
          v20 = (int *)x_hash_table_new_(0, 0, 0, 0, v22, v21);
          *((_QWORD *)v5 + 27) = v20;
        }
        hash_table_modify(v20, (uint64_t)v3, (uint64_t)v4, 0);
      }
    }
  }
  CA::Transaction::unlock((CA::Transaction *)a2);
  return v4;
}

void sub_1845089D0(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t CA::Layer::apply_modifiers_to_layer(CA::Layer *this, CALayer *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[128];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  result = -[CA::Layer countByEnumeratingWithState:objects:count:](this, "countByEnumeratingWithState:objects:count:", &v12, v11, 16);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)v13;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v13 != v6)
          objc_enumerationMutation(this);
        v8 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * v7);
        v9 = objc_msgSend(v8, "value");
        v10 = objc_msgSend(v8, "keyPath");
        if (objc_msgSend(v8, "additive"))
          v9 = objc_msgSend(-[CALayer valueForKeyPath:](a2, "valueForKeyPath:", v10), "CA_addValue:multipliedBy:", v9, 1);
        -[CALayer setValue:forKeyPath:](a2, "setValue:forKeyPath:", v9, v10);
        ++v7;
      }
      while (v5 != v7);
      result = -[CA::Layer countByEnumeratingWithState:objects:count:](this, "countByEnumeratingWithState:objects:count:", &v12, v11, 16);
      v5 = result;
    }
    while (result);
  }
  return result;
}

uint64_t CA::Layer::set_model_layer(CA::Layer *this, CA::Transaction *a2, CA::Layer *a3)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = *((unsigned int *)a2 + 24);
  if ((v6 & 0x80000000) != 0 || !*((_DWORD *)a3 + v6 + 68))
    CA::Layer::thread_flags_(a3, a2);
  v7 = *((_QWORD *)a2 + 13);
  v8 = *(int **)(v7 + 224);
  if (!v8)
  {
    v10 = *(uint64_t **)(v7 + 128);
    v9 = *(_QWORD *)(v7 + 136);
    if (!v9)
    {
      v9 = x_pool_new_(*(uint64_t **)(v7 + 128));
      *(_QWORD *)(v7 + 136) = v9;
    }
    v8 = (int *)x_hash_table_new_(0, 0, 0, 0, v10, v9);
    *(_QWORD *)(v7 + 224) = v8;
  }
  return hash_table_modify(v8, (uint64_t)this, (uint64_t)a3, 0);
}

void CA::Transaction::Shared::time(CA::Transaction::Shared *this)
{
  uint64_t v2;

  if (*((double *)this + 18) == 0.0)
  {
    v2 = mach_absolute_time();
    *((double *)this + 18) = CATimeWithHostTime(v2);
  }
}

uint64_t x_pool_new_(uint64_t *a1)
{
  uint64_t v2;
  malloc_zone_t *malloc_zone;

  if (a1)
  {
    v2 = x_heap_malloc_small_(a1, 0x28uLL);
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_QWORD *)(v2 + 32) = a1;
  }
  else
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v2 = (uint64_t)malloc_type_zone_calloc(malloc_zone, 1uLL, 0x28uLL, 0xB6D46EB3uLL);
  }
  if (!pool_construct(x_pool_struct *,unsigned long)::choices)
  {
    pool_construct(x_pool_struct *,unsigned long)::choices = malloc_good_size(0x3F0uLL) - 8;
    pool_construct(x_pool_struct *,unsigned long)::choices = malloc_good_size(0x7F0uLL) - 8;
    malloc_good_size(0xBF0uLL);
    malloc_good_size(0xFF0uLL);
  }
  *(_QWORD *)(v2 + 16) = 32;
  *(_DWORD *)(v2 + 24) = (unint64_t)pool_construct(x_pool_struct *,unsigned long)::choices >> 5;
  return v2;
}

void ___ZL36cons_CAAnimation_kCAValueWeakPointerjb_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v4 = (const void *)*(unsigned int *)(a1 + 32);
  v5[0] = a3;
  CAAnimation_setter(a2, v4, 4, (unsigned __int8 *)v5);
}

double begin_time(_CAStateControllerData *a1)
{
  double result;
  uint64_t v2;

  if (a1)
    return *(double *)&a1[1].var0;
  +[CATransaction commitTime](CATransaction, "commitTime");
  if (result == 0.0)
  {
    v2 = mach_absolute_time();
    return CATimeWithHostTime(v2);
  }
  return result;
}

uint64_t CA::Layer::convert_time(CA::Layer *this, CA::Transaction *a2, CALayer *a3, CALayer *a4, CALayer *a5)
{
  CA::Layer **p_isa;
  CA::Transaction **v6;
  int v9;
  uint64_t v10;
  CA::Transaction **v11;
  CA::Render::Timing *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  CA::Render::Timing **v16;
  CA::Render::Timing *v17;
  CA::Render::Timing *v18;
  int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  CA::Render::Timing *v25[2];

  v25[1] = *(CA::Render::Timing **)MEMORY[0x1E0C80C00];
  if (a3 == a4)
    return 1;
  p_isa = &a4->super.isa;
  v6 = &a3->super.isa;
  v9 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = v9 + 1;
  if (!v9)
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
  v10 = objc_msgSend(v6, "ancestorSharedWithLayer:", p_isa);
  v11 = (CA::Transaction **)v10;
  while (v6 != v11)
  {
    v25[0] = 0;
    CA::Layer::render_timing((uint64_t)v25, v6[2], this);
    v12 = v25[0];
    if (v25[0])
    {
      CA::Render::Timing::inverse_map_time((uint64_t)v25[0], (double *)a2, 0.0);
      v13 = (unsigned int *)((char *)v12 + 8);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
        (*(void (**)(CA::Render::Timing *))(*(_QWORD *)v12 + 16))(v12);
    }
    v10 = CA::Layer::superlayer(v6[2], this);
    v6 = (CA::Transaction **)v10;
  }
  if (v11 == p_isa)
  {
LABEL_23:
    v23 = 1;
  }
  else
  {
    do
    {
      v10 = MEMORY[0x1E0C80A78](v10);
      v16 = &v25[-2];
      v25[-2] = (CA::Render::Timing *)p_isa;
      v25[-1] = v17;
      if (p_isa)
      {
        v10 = CA::Layer::superlayer(p_isa[2], this);
        p_isa = (CA::Layer **)v10;
      }
    }
    while (p_isa != v11);
    while (1)
    {
      v25[0] = 0;
      CA::Layer::render_timing((uint64_t)v25, *((CA::Transaction **)*v16 + 2), this);
      v18 = v25[0];
      if (v25[0])
      {
        v19 = CA::Render::Timing::map_time(v25[0], (double *)a2, 0);
        v20 = (unsigned int *)((char *)v18 + 8);
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
          (*(void (**)(CA::Render::Timing *))(*(_QWORD *)v18 + 16))(v18);
        if (!v19)
          break;
      }
      v16 = (CA::Render::Timing **)v16[1];
      if (!v16)
        goto LABEL_23;
    }
    v23 = 0;
  }
  CA::Transaction::unlock(this);
  return v23;
}

void sub_1845093A0(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t CA::Layer::render_timing(uint64_t this, CA::Transaction *a2, CA::Transaction *a3)
{
  _QWORD *v3;

  v3 = (_QWORD *)this;
  if ((*((_BYTE *)a2 + 56) & 0x80) != 0)
  {
    *(_QWORD *)this = 0;
    this = CAMediaTimingCopyRenderTiming(*((_QWORD *)a2 + 2));
    *v3 = this;
    if (!this)
    {
      this = (uint64_t)CA::Layer::writable_state(a2, a3);
      *(_DWORD *)(this + 16) &= ~0x80u;
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  return this;
}

void *find_transition(NSArray *a1, const __CFString *a2, const __CFString *a3)
{
  const __CFString *v4;
  const __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _BYTE v12[128];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a2)
    v4 = a2;
  else
    v4 = &stru_1E15B0530;
  v13 = 0u;
  v14 = 0u;
  if (a3)
    v5 = a3;
  else
    v5 = &stru_1E15B0530;
  v15 = 0uLL;
  v16 = 0uLL;
  v6 = -[NSArray countByEnumeratingWithState:objects:count:](a1, "countByEnumeratingWithState:objects:count:", &v13, v12, 16);
  if (!v6)
    return 0;
  v7 = v6;
  v8 = *(_QWORD *)v14;
LABEL_9:
  v9 = 0;
  while (1)
  {
    if (*(_QWORD *)v14 != v8)
      objc_enumerationMutation(a1);
    v10 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * v9);
    if (objc_msgSend((id)objc_msgSend(v10, "fromState"), "isEqualToString:", v4))
    {
      if ((objc_msgSend((id)objc_msgSend(v10, "toState"), "isEqualToString:", v5) & 1) != 0)
        return v10;
    }
    if (v7 == ++v9)
    {
      v7 = -[NSArray countByEnumeratingWithState:objects:count:](a1, "countByEnumeratingWithState:objects:count:", &v13, v12, 16);
      if (v7)
        goto LABEL_9;
      return 0;
    }
  }
}

CAMediaTimingFunctionBuiltin *builtin_function(unsigned int a1)
{
  CAMediaTimingFunctionBuiltin *result;

  if (a1 > 4)
    return 0;
  result = (CAMediaTimingFunctionBuiltin *)functions[a1];
  if (!result)
  {
    result = objc_alloc_init(CAMediaTimingFunctionBuiltin);
    result->_index = a1;
    functions[a1] = result;
  }
  return result;
}

void ___ZN2CA3OGL12MetalContext26prepare_new_command_bufferEv_block_invoke(uint64_t a1, void *a2)
{
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint8_t buf[4];
  void *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = (unint64_t *)(*(_QWORD *)(a1 + 32) + 3984);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = objc_msgSend(a2, "protectionOptions");
  if (objc_msgSend(a2, "error"))
  {
    if (x_log_hook_p())
    {
      objc_msgSend((id)objc_msgSend(a2, "label"), "UTF8String");
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "error"), "localizedDescription"), "UTF8String");
      x_log_();
    }
    else
    {
      v6 = x_log_category_ogl_metal;
      if (os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218754;
        v8 = a2;
        v9 = 2048;
        v10 = v5;
        v11 = 2080;
        v12 = objc_msgSend((id)objc_msgSend(a2, "label"), "UTF8String");
        v13 = 2080;
        v14 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "error"), "localizedDescription"), "UTF8String");
        _os_log_impl(&dword_184457000, v6, OS_LOG_TYPE_ERROR, "MTLCommandBuffer %p, protection 0x%llx, label %s, error = %s\n", buf, 0x2Au);
      }
    }
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_18450A4C8(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL CA::Render::Fence::resolve_fences(CA::Render::Fence *this)
{
  _QWORD **v1;
  _QWORD *i;
  unint64_t v3;
  _QWORD *j;
  uint64_t v5;
  double *batch;
  uint64_t *k;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned int *v12;
  _QWORD *m;
  unint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t *v17;
  _QWORD *v18;
  unsigned int v19;
  malloc_zone_t *malloc_zone;
  _QWORD *v21;
  uint64_t v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  malloc_zone_t *v38;
  _QWORD *v39;
  ipc_space_t *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  int8x8_t v46;
  unint64_t v47;
  uint8x8_t v48;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t *v56;
  int8x8_t v57;
  unint64_t v58;
  uint8x8_t v59;
  uint64_t *v60;
  uint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  malloc_zone_t *v66;
  uint64_t v67;
  double v68;
  char *v69;
  double v70;
  ipc_space_t *v71;
  uint64_t v72;
  _QWORD *v73;
  char v74;
  _QWORD *v75;
  uint64_t *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  malloc_zone_t *v81;
  uint64_t v82;
  char *v83;
  int64_t v84;
  mach_port_name_t v85;
  uint64_t v87;
  uint64_t *v88;
  uint64_t **v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  _OWORD v93[2];
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  v95 = 0u;
  v96 = 0u;
  v97 = 1065353216;
  memset(v93, 0, sizeof(v93));
  v94 = 1065353216;
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>((uint64_t)&v95, (unint64_t)(float)*(unint64_t *)(CA::Render::Fence::cleared_f_names + 24));
  v1 = (_QWORD **)&unk_1EDD13000;
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>((uint64_t)v93, (unint64_t)(float)*(unint64_t *)(CA::Render::Fence::fences_by_name + 24));
  for (i = *(_QWORD **)(CA::Render::Fence::cleared_f_names + 16); i; i = (_QWORD *)*i)
  {
    v3 = i[2];
    if (!std::__hash_table<std::__hash_value_type<unsigned long,unsigned long long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long long>>>::find<unsigned long>(&v95, v3)&& !std::__hash_table<std::__hash_value_type<unsigned long,unsigned long long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long long>>>::find<unsigned long>(v93, v3))
    {
      v90 = 0u;
      v91 = 0u;
      v92 = 1065353216;
      if (CA::Render::Fence::is_fence_resolved(v3, &v90, (uint64_t)&v95, v93))
      {
        for (j = (_QWORD *)v91; j; j = (_QWORD *)*j)
          std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)&v95, j[2], j[2]);
      }
      std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)&v90);
    }
  }
  v5 = *((_QWORD *)&v96 + 1);
  if (*((_QWORD *)&v96 + 1))
  {
    v87 = *((_QWORD *)&v96 + 1);
    batch = CA::Render::Fence::create_batch((CA::Render::Fence *)1);
    for (k = *(uint64_t **)(CA::Render::Fence::fcontexts_by_id + 16);
          k;
          k = (uint64_t *)std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::erase((_QWORD *)CA::Render::Fence::fcontexts_by_id, k))
    {
      while (1)
      {
        v8 = (uint64_t *)k[3];
        v9 = *v8;
        v10 = v8[1];
        v11 = *(_QWORD **)v10;
        if (*(_QWORD *)v10 == *(_QWORD *)(v10 + 8))
          break;
        v88 = (uint64_t *)k[3];
        v89 = (uint64_t **)k;
        v12 = (unsigned int *)(v9 + 8);
        do
        {
          for (m = (_QWORD *)v96; m; m = (_QWORD *)*m)
          {
            v14 = m[2];
            if (std::__hash_table<std::__hash_value_type<unsigned long,unsigned long long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long long>>>::find<unsigned long>(v11, v14))
            {
              if (batch)
              {
                if ((*(_BYTE *)(v9 + 13) & 4) == 0)
                {
                  LODWORD(v90) = *(_DWORD *)(v9 + 16);
                  v15 = v90;
                  v16 = (_QWORD *)*((_QWORD *)batch + 3);
                  if (!std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v16, v90))
                  {
                    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)v16, v15, v15);
                    kdebug_trace();
                    CA::Render::Context::add_fence_batch_port((os_unfair_lock_s *)v9, *((_DWORD *)batch + 10));
                    v17 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((_QWORD *)CA::Render::Fence::bcontexts_by_id, v15);
                    if (v17)
                    {
                      v18 = (_QWORD *)v17[3];
                    }
                    else
                    {
                      do
                        v19 = __ldaxr(v12);
                      while (__stlxr(v19 + 1, v12));
                      if (!v19)
                      {
                        do
                          v23 = __ldaxr(v12);
                        while (__stlxr(v23 - 1, v12));
                      }
                      malloc_zone = (malloc_zone_t *)get_malloc_zone();
                      v18 = malloc_type_zone_malloc(malloc_zone, 0x18uLL, 0x8BB15036uLL);
                      *v18 = v9;
                      v21 = (_QWORD *)operator new();
                      v21[1] = 0;
                      v21[2] = 0;
                      *v21 = 0;
                      v18[1] = v21;
                      v22 = operator new();
                      *(_OWORD *)v22 = 0u;
                      *(_OWORD *)(v22 + 16) = 0u;
                      *(_DWORD *)(v22 + 32) = 1065353216;
                      v18[2] = v22;
                      std::__hash_table<std::__hash_value_type<unsigned int,CA::Render::Context *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,CA::Render::Context *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,CA::Render::Context *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,CA::Render::Context *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((float *)CA::Render::Fence::bcontexts_by_id, v90, &v90)[3] = v18;
                    }
                    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(v18[2], *((_DWORD *)batch + 10), *((_DWORD *)batch + 10));
                  }
                }
              }
              std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__erase_unique<unsigned long long>(v11, v14);
            }
          }
          if (v11[3])
          {
            v11 += 5;
            v24 = *(_QWORD **)(v10 + 8);
          }
          else
          {
            v25 = (uint64_t)(v11 + 5);
            v26 = *(_QWORD **)(v10 + 8);
            if (v11 + 5 == v26)
            {
              v24 = v11;
            }
            else
            {
              v27 = v11;
              do
              {
                std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::clear(v27);
                v28 = v27[5];
                v27[5] = 0;
                v29 = (void *)*v27;
                *v27 = v28;
                if (v29)
                  operator delete(v29);
                v30 = v27[7];
                v27[2] = v30;
                v31 = v27[6];
                v27[1] = v31;
                v27[6] = 0;
                v32 = v27[8];
                v27[3] = v32;
                *((_DWORD *)v27 + 8) = *((_DWORD *)v27 + 18);
                if (v32)
                {
                  v33 = *(_QWORD *)(v30 + 8);
                  if ((v31 & (v31 - 1)) != 0)
                  {
                    if (v33 >= v31)
                      v33 %= v31;
                  }
                  else
                  {
                    v33 &= v31 - 1;
                  }
                  *(_QWORD *)(*v27 + 8 * v33) = v27 + 2;
                  v27[7] = 0;
                  v27[8] = 0;
                }
                v24 = v27 + 5;
                v34 = v27 + 10;
                v27 += 5;
              }
              while (v34 != v26);
              v25 = *(_QWORD *)(v10 + 8);
            }
            while ((_QWORD *)v25 != v24)
              v25 = std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table(v25 - 40);
            *(_QWORD *)(v10 + 8) = v24;
          }
        }
        while (v11 != v24);
        v1 = (_QWORD **)&unk_1EDD13000;
        v8 = v88;
        k = (uint64_t *)v89;
        if (*(_QWORD **)v10 == v24)
          break;
        k = *v89;
        if (!*v89)
          goto LABEL_57;
      }
      *(_QWORD *)&v90 = v10;
      std::vector<std::unordered_set<unsigned long long>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v90);
      MEMORY[0x186DBD990](v10, 0x20C40960023A9);
      if (v9)
      {
        v35 = (unsigned int *)(v9 + 8);
        do
        {
          v36 = __ldaxr(v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v35));
        if (!v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
      }
      v38 = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(v38, v8);
    }
LABEL_57:
    v39 = (_QWORD *)v96;
    if ((_QWORD)v96)
    {
      v40 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
      do
      {
        v41 = v39[2];
        v42 = std::__hash_table<std::__hash_value_type<unsigned long,unsigned long long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long long>>>::find<unsigned long>(v1[134], v41);
        if (!v42)
          abort();
        v43 = v42[3];
        kdebug_trace();
        v44 = v1[134];
        v45 = std::__hash_table<std::__hash_value_type<unsigned long,unsigned long long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long long>>>::find<unsigned long>(v44, v41);
        if (v45)
        {
          v46 = (int8x8_t)v44[1];
          v47 = v45[1];
          v48 = (uint8x8_t)vcnt_s8(v46);
          v48.i16[0] = vaddlv_u8(v48);
          if (v48.u32[0] > 1uLL)
          {
            if (v47 >= *(_QWORD *)&v46)
              v47 %= *(_QWORD *)&v46;
          }
          else
          {
            v47 &= *(_QWORD *)&v46 - 1;
          }
          v49 = *(_QWORD **)(*v44 + 8 * v47);
          do
          {
            v50 = v49;
            v49 = (_QWORD *)*v49;
          }
          while (v49 != v45);
          if (v50 == v44 + 2)
            goto LABEL_78;
          v51 = v50[1];
          if (v48.u32[0] > 1uLL)
          {
            if (v51 >= *(_QWORD *)&v46)
              v51 %= *(_QWORD *)&v46;
          }
          else
          {
            v51 &= *(_QWORD *)&v46 - 1;
          }
          if (v51 != v47)
          {
LABEL_78:
            if (!*v45)
              goto LABEL_79;
            v52 = *(_QWORD *)(*v45 + 8);
            if (v48.u32[0] > 1uLL)
            {
              if (v52 >= *(_QWORD *)&v46)
                v52 %= *(_QWORD *)&v46;
            }
            else
            {
              v52 &= *(_QWORD *)&v46 - 1;
            }
            if (v52 != v47)
LABEL_79:
              *(_QWORD *)(*v44 + 8 * v47) = 0;
          }
          v53 = *v45;
          if (*v45)
          {
            v54 = *(_QWORD *)(v53 + 8);
            if (v48.u32[0] > 1uLL)
            {
              if (v54 >= *(_QWORD *)&v46)
                v54 %= *(_QWORD *)&v46;
            }
            else
            {
              v54 &= *(_QWORD *)&v46 - 1;
            }
            if (v54 != v47)
            {
              *(_QWORD *)(*v44 + 8 * v54) = v50;
              v53 = *v45;
            }
          }
          *v50 = v53;
          *v45 = 0;
          --v44[3];
          operator delete(v45);
        }
        v55 = (_QWORD *)CA::Render::Fence::fences_by_port;
        v56 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((_QWORD *)CA::Render::Fence::fences_by_port, *(_DWORD *)(v43 + 16));
        if (v56)
        {
          v57 = (int8x8_t)v55[1];
          v58 = v56[1];
          v59 = (uint8x8_t)vcnt_s8(v57);
          v59.i16[0] = vaddlv_u8(v59);
          if (v59.u32[0] > 1uLL)
          {
            if (v58 >= *(_QWORD *)&v57)
              v58 %= *(_QWORD *)&v57;
          }
          else
          {
            v58 &= *(_QWORD *)&v57 - 1;
          }
          v60 = *(uint64_t **)(*v55 + 8 * v58);
          do
          {
            v61 = v60;
            v60 = (uint64_t *)*v60;
          }
          while (v60 != v56);
          if (v61 == v55 + 2)
            goto LABEL_106;
          v62 = v61[1];
          if (v59.u32[0] > 1uLL)
          {
            if (v62 >= *(_QWORD *)&v57)
              v62 %= *(_QWORD *)&v57;
          }
          else
          {
            v62 &= *(_QWORD *)&v57 - 1;
          }
          if (v62 != v58)
          {
LABEL_106:
            if (!*v56)
              goto LABEL_107;
            v63 = *(_QWORD *)(*v56 + 8);
            if (v59.u32[0] > 1uLL)
            {
              if (v63 >= *(_QWORD *)&v57)
                v63 %= *(_QWORD *)&v57;
            }
            else
            {
              v63 &= *(_QWORD *)&v57 - 1;
            }
            if (v63 != v58)
LABEL_107:
              *(_QWORD *)(*v55 + 8 * v58) = 0;
          }
          v64 = *v56;
          if (*v56)
          {
            v65 = *(_QWORD *)(v64 + 8);
            if (v59.u32[0] > 1uLL)
            {
              if (v65 >= *(_QWORD *)&v57)
                v65 %= *(_QWORD *)&v57;
            }
            else
            {
              v65 &= *(_QWORD *)&v57 - 1;
            }
            if (v65 != v58)
            {
              *(_QWORD *)(*v55 + 8 * v65) = v61;
              v64 = *v56;
            }
          }
          *v61 = v64;
          *v56 = 0;
          --v55[3];
          operator delete(v56);
        }
        std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__erase_unique<unsigned long long>((_QWORD *)CA::Render::Fence::cleared_f_names, v41);
        mach_port_destruct(*v40, *(_DWORD *)(v43 + 16), 0, *(_QWORD *)v43);
        v66 = (malloc_zone_t *)get_malloc_zone();
        malloc_zone_free(v66, (void *)v43);
        v39 = (_QWORD *)*v39;
      }
      while (v39);
    }
    v67 = mach_absolute_time();
    v68 = CATimeWithHostTime(v67);
    v69 = *(char **)CA::Render::Fence::transactions;
    if (*(_QWORD *)CA::Render::Fence::transactions != *(_QWORD *)(CA::Render::Fence::transactions + 8))
    {
      v70 = v68;
      v71 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
      do
      {
        v72 = *(_QWORD *)v69;
        v73 = (_QWORD *)v96;
        if ((_QWORD)v96)
        {
          v74 = 0;
LABEL_121:
          v75 = *(_QWORD **)v72;
          do
          {
            v76 = std::__hash_table<std::__hash_value_type<unsigned long,unsigned long long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long long>>>::find<unsigned long>(v75, v73[2]);
            if (v76)
            {
              std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::erase(v75, v76);
              v73 = (_QWORD *)*v73;
              v74 = 1;
              if (v73)
                goto LABEL_121;
              goto LABEL_128;
            }
            v73 = (_QWORD *)*v73;
          }
          while (v73);
          if ((v74 & 1) == 0)
            goto LABEL_129;
LABEL_128:
          CA::Render::Fence::send_rlfg_msg(*(unsigned int *)(v72 + 16), *((unsigned int *)batch + 10), *(_QWORD *)batch, (uint64_t)&v95, v70);
        }
LABEL_129:
        if (*(_QWORD *)(*(_QWORD *)v72 + 24))
        {
          v69 += 8;
          v77 = *(char **)(CA::Render::Fence::transactions + 8);
        }
        else
        {
          mach_port_deallocate(*v71, *(_DWORD *)(v72 + 16));
          if (*(_QWORD *)v72)
          {
            v78 = std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table(*(_QWORD *)v72);
            MEMORY[0x186DBD990](v78, 0x10A0C408EF24B1CLL);
          }
          v79 = *(_QWORD *)(v72 + 8);
          if (v79)
          {
            v80 = std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table(v79);
            MEMORY[0x186DBD990](v80, 0x10A0C408EF24B1CLL);
          }
          v81 = (malloc_zone_t *)get_malloc_zone();
          malloc_zone_free(v81, (void *)v72);
          v82 = CA::Render::Fence::transactions;
          v83 = *(char **)(CA::Render::Fence::transactions + 8);
          v84 = v83 - (v69 + 8);
          if (v83 != v69 + 8)
            memmove(v69, v69 + 8, v83 - (v69 + 8));
          v77 = &v69[v84];
          *(_QWORD *)(v82 + 8) = &v69[v84];
        }
      }
      while (v69 != v77);
    }
    v85 = *((_DWORD *)batch + 10);
    v5 = v87;
    if (v85 + 1 >= 2)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], v85);
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)v93);
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)&v95);
  return v5 != 0;
}

uint64_t std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::erase(_QWORD *a1, uint64_t *__p)
{
  int8x8_t v2;
  unint64_t v3;
  uint64_t v4;
  uint8x8_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v2 = (int8x8_t)a1[1];
  v4 = *__p;
  v3 = __p[1];
  v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v3 >= *(_QWORD *)&v2)
      v3 %= *(_QWORD *)&v2;
  }
  else
  {
    v3 &= *(_QWORD *)&v2 - 1;
  }
  v6 = *(uint64_t **)(*a1 + 8 * v3);
  do
  {
    v7 = v6;
    v6 = (uint64_t *)*v6;
  }
  while (v6 != __p);
  if (v7 != a1 + 2)
  {
    v8 = v7[1];
    if (v5.u32[0] > 1uLL)
    {
      if (v8 >= *(_QWORD *)&v2)
        v8 %= *(_QWORD *)&v2;
    }
    else
    {
      v8 &= *(_QWORD *)&v2 - 1;
    }
    v9 = *__p;
    if (v8 == v3)
    {
LABEL_20:
      if (!v9)
        goto LABEL_27;
      goto LABEL_21;
    }
  }
  if (!v4)
    goto LABEL_19;
  v10 = *(_QWORD *)(v4 + 8);
  if (v5.u32[0] > 1uLL)
  {
    if (v10 >= *(_QWORD *)&v2)
      v10 %= *(_QWORD *)&v2;
  }
  else
  {
    v10 &= *(_QWORD *)&v2 - 1;
  }
  v9 = *__p;
  if (v10 != v3)
  {
LABEL_19:
    *(_QWORD *)(*a1 + 8 * v3) = 0;
    v9 = *__p;
    goto LABEL_20;
  }
LABEL_21:
  v11 = *(_QWORD *)(v9 + 8);
  if (v5.u32[0] > 1uLL)
  {
    if (v11 >= *(_QWORD *)&v2)
      v11 %= *(_QWORD *)&v2;
  }
  else
  {
    v11 &= *(_QWORD *)&v2 - 1;
  }
  if (v11 != v3)
  {
    *(_QWORD *)(*a1 + 8 * v11) = v7;
    v9 = *__p;
  }
LABEL_27:
  *v7 = v9;
  *__p = 0;
  --a1[3];
  operator delete(__p);
  return v4;
}

uint64_t *std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__erase_unique<unsigned long long>(_QWORD *a1, unint64_t a2)
{
  uint64_t *result;

  result = std::__hash_table<std::__hash_value_type<unsigned long,unsigned long long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long long>>>::find<unsigned long>(a1, a2);
  if (result)
    return (uint64_t *)std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::erase(a1, result);
  return result;
}

_QWORD *CA::Render::Fence::applyTransaction(_QWORD *a1)
{
  BOOL v1;
  _QWORD *v2;
  uint64_t *v4;
  _QWORD **v5;
  _DWORD *TransactionInfo;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  malloc_zone_t *malloc_zone;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  malloc_zone_t *v22;
  uint64_t v23;
  double v24;
  malloc_zone_t *v25;
  unsigned int v26;
  _QWORD *v27;
  BOOL v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t **v31;
  CA::Render::Fence *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  double *batch;
  double *v38;
  uint64_t v39;
  double *fence;
  double *v41;
  uint64_t v42;
  double v43;
  CA::Render::Fence *v44;
  uint64_t *v45;
  _DWORD *v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  malloc_zone_t *v51;
  _QWORD *v52;
  _QWORD *v53;
  char *v54;
  malloc_zone_t *v55;
  _DWORD *v56;
  unsigned int v57;
  uint64_t *v58;
  _DWORD *v59;
  unsigned int v60;
  os_unfair_lock_s *v61;
  uint64_t *v62;
  _QWORD *v63;
  unsigned int *p_os_unfair_lock_opaque;
  unsigned int v65;
  malloc_zone_t *v66;
  _QWORD *v67;
  uint64_t v68;
  malloc_zone_t *v69;
  _DWORD *v70;
  unsigned int v71;
  malloc_zone_t *v72;
  double *v73;
  NSObject *v74;
  const char *v75;
  uint64_t *i;
  uint64_t *v77;
  _QWORD **v78;
  uint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t *v92;
  malloc_zone_t *v93;
  _QWORD *v94;
  int v95;
  char v97;
  uint64_t v98;
  _QWORD *v99;
  int v100;
  _DWORD *v101;
  uint8_t buf[16];
  __int128 v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  if (CA::Render::Server::_thread)
    v1 = BYTE7(xmmword_1ECDC6AF0) == 0;
  else
    v1 = 0;
  if (!v1)
    return 0;
  if (CA::Render::Fence::fence_info_once[0] != -1)
    dispatch_once_f(CA::Render::Fence::fence_info_once, 0, (dispatch_function_t)CA::Render::Fence::fence_info_init);
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Fence::_lock);
  v108 = 0u;
  v109 = 0u;
  v110 = 1065353216;
  v99 = a1;
  v4 = (uint64_t *)*a1;
  v5 = (_QWORD **)&CA::Render::transition_lock;
  if (*a1)
  {
    v101 = 0;
    TransactionInfo = 0;
    while (1)
    {
      v7 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((_QWORD *)CA::Render::Fence::fences_by_port, *((_DWORD *)v4 + 2));
      if (v7)
      {
        v8 = v7[3];
        v9 = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long,unsigned long long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long long>>>::find<unsigned long>((_QWORD *)CA::Render::Fence::cleared_f_names, *(_QWORD *)v8);
        if (!v9)
        {
          v10 = (_QWORD *)v4[3];
          if (v10)
            break;
        }
      }
LABEL_12:
      v4 = (uint64_t *)*v4;
      if (!v4)
        goto LABEL_39;
    }
    v11 = 0;
    while (1)
    {
      v12 = v10[2];
      if (v12)
      {
        if ((*(_BYTE *)(v12 + 13) & 4) == 0)
          break;
      }
LABEL_32:
      v10 = (_QWORD *)*v10;
      if (!v10)
        goto LABEL_12;
    }
    v13 = *(_DWORD *)(v12 + 16);
    LODWORD(v105) = v13;
    if (!TransactionInfo)
      TransactionInfo = CA::Render::Fence::_createTransactionInfo((CA::Render::Fence *)v9);
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(*(_QWORD *)TransactionInfo, *(_QWORD *)v8, *(_QWORD *)v8);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(*((_QWORD *)TransactionInfo + 1), v13, v13);
    if (!std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((_QWORD *)CA::Render::Fence::fcontexts_by_id, v13))
    {
      v14 = (unsigned int *)(v12 + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
      if (!v15)
      {
        do
          v26 = __ldaxr(v14);
        while (__stlxr(v26 - 1, v14));
      }
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      v17 = malloc_type_zone_malloc(malloc_zone, 0x10uLL, 0x8BB15036uLL);
      *v17 = v12;
      v18 = (_QWORD *)operator new();
      v18[1] = 0;
      v18[2] = 0;
      *v18 = 0;
      v17[1] = v18;
      v13 = v105;
      std::__hash_table<std::__hash_value_type<unsigned int,CA::Render::Context *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,CA::Render::Context *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,CA::Render::Context *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,CA::Render::Context *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((float *)CA::Render::Fence::fcontexts_by_id, v105, &v105)[3] = v17;
    }
    v19 = std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned long long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned long long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long long>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)&v108, v13, &v105);
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)(v19 + 24), *(_QWORD *)v8, *(_QWORD *)v8);
    if (*(_BYTE *)(v8 + 20))
    {
      if (v11)
        goto LABEL_27;
    }
    else
    {
      *(_BYTE *)(v8 + 20) = 1;
      kdebug_trace();
      v23 = mach_absolute_time();
      v24 = CATimeWithHostTime(v23) + 0.5;
      *(double *)(v8 + 8) = v24;
      v9 = CA::Render::Server::add_callback(3, (uint64_t)CA::Render::Fence::ftimeout_callback, 0, v24);
      if (v11)
        goto LABEL_27;
    }
    v25 = (malloc_zone_t *)get_malloc_zone();
    v9 = (uint64_t)malloc_type_zone_malloc(v25, 0x20uLL, 0x8BB15036uLL);
    v11 = v9;
    *(_QWORD *)v9 = v101;
    *(_DWORD *)(v9 + 8) = 0;
    *(_QWORD *)(v9 + 16) = *(_QWORD *)v8;
    *(_QWORD *)(v9 + 24) = 0;
    v101 = (_DWORD *)v9;
LABEL_27:
    v20 = (uint64_t *)(v11 + 24);
    v21 = v11 + 24;
    while (1)
    {
      v21 = *(_QWORD *)v21;
      if (!v21)
        break;
      if (*(_DWORD *)(v21 + 12) == v13)
        goto LABEL_32;
    }
    v22 = (malloc_zone_t *)get_malloc_zone();
    v9 = (uint64_t)malloc_type_zone_malloc(v22, 0x18uLL, 0x8BB15036uLL);
    *(_QWORD *)v9 = *v20;
    *(_DWORD *)(v9 + 8) = 0;
    *(_DWORD *)(v9 + 12) = v13;
    *(_QWORD *)(v9 + 16) = 0;
    *v20 = v9;
    goto LABEL_32;
  }
  TransactionInfo = 0;
  v101 = 0;
LABEL_39:
  v105 = 0u;
  v106 = 0u;
  v107 = 1065353216;
  v27 = (_QWORD *)v99[1];
  if (v27)
  {
    v28 = BYTE8(xmmword_1ECDC6AF0) != 0;
    do
    {
      v29 = v27[2];
      if (v29 && (*(_BYTE *)(v29 + 13) & 4) == 0)
      {
        *(_DWORD *)buf = *(_DWORD *)(v29 + 16);
        v30 = *(_DWORD *)buf;
        std::__hash_table<std::__hash_value_type<unsigned int,CA::Render::Context *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,CA::Render::Context *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,CA::Render::Context *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,CA::Render::Context *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((float *)&v105, *(unsigned int *)buf, buf)[3] = v29;
        v28 = v28
           || std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((_QWORD *)CA::Render::Fence::fcontexts_by_id, v30) != 0;
      }
      v27 = (_QWORD *)*v27;
    }
    while (v27);
    if (*((_QWORD *)&v106 + 1) > 1uLL)
    {
      if (!v28)
        goto LABEL_68;
LABEL_53:
      v31 = (uint64_t **)v106;
      v32 = (CA::Render::Fence *)std::__hash_table<std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>>>::find<unsigned int>(v108, *((unint64_t *)&v108 + 1), *(_DWORD *)(v106 + 16));
      if (v32)
      {
        v104 = 0;
        *(_OWORD *)buf = 0u;
        v103 = 0u;
        std::unordered_set<unsigned long long>::unordered_set((uint64_t)buf, (uint64_t)v32 + 24);
        v33 = *v31;
        while (v33)
        {
          v34 = std::__hash_table<std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>>>::find<unsigned int>(v108, *((unint64_t *)&v108 + 1), *((_DWORD *)v33 + 4));
          v33 = (uint64_t *)*v33;
          if (v34)
          {
            v35 = v103;
            if ((_QWORD)v103)
            {
              v36 = v34 + 3;
              do
              {
                if (std::__hash_table<std::__hash_value_type<unsigned long,unsigned long long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long long>>>::find<unsigned long>(v36, *(_QWORD *)(v35 + 16)))
                {
                  v35 = *(_QWORD *)v35;
                }
                else
                {
                  v35 = std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::erase(buf, (uint64_t *)v35);
                }
              }
              while (v35);
            }
          }
          else
          {
            std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::clear(buf);
          }
          if (!*((_QWORD *)&v103 + 1))
          {
            v32 = (CA::Render::Fence *)std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)buf);
            goto LABEL_74;
          }
        }
        v39 = *((_QWORD *)&v103 + 1);
        v32 = (CA::Render::Fence *)std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)buf);
        if (v39)
          goto LABEL_113;
      }
LABEL_74:
      fence = (double *)CA::Render::Fence::_create_fence(v32);
      if (fence)
      {
        v41 = fence;
        v100 = *((_DWORD *)fence + 4);
        *((_BYTE *)fence + 20) = 1;
        kdebug_trace();
        v42 = mach_absolute_time();
        v43 = CATimeWithHostTime(v42) + 0.5;
        v41[1] = v43;
        v44 = (CA::Render::Fence *)CA::Render::Server::add_callback(3, (uint64_t)CA::Render::Fence::ftimeout_callback, 0, v43);
        if (!TransactionInfo)
          TransactionInfo = CA::Render::Fence::_createTransactionInfo(v44);
        std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(*(_QWORD *)TransactionInfo, *(_QWORD *)v41, *(_QWORD *)v41);
        v45 = (uint64_t *)v106;
        if ((_QWORD)v106)
        {
          v46 = 0;
          do
          {
            *(_DWORD *)buf = *((_DWORD *)v45 + 4);
            v47 = *(_DWORD *)buf;
            v48 = v45[3];
            std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(*((_QWORD *)TransactionInfo + 1), *(unsigned int *)buf, *(int *)buf);
            if (!std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((_QWORD *)CA::Render::Fence::fcontexts_by_id, v47))
            {
              v49 = (unsigned int *)(v48 + 8);
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 + 1, v49));
              if (!v50)
              {
                do
                  v57 = __ldaxr(v49);
                while (__stlxr(v57 - 1, v49));
              }
              v51 = (malloc_zone_t *)get_malloc_zone();
              v52 = malloc_type_zone_malloc(v51, 0x10uLL, 0x8BB15036uLL);
              *v52 = v48;
              v53 = (_QWORD *)operator new();
              v53[1] = 0;
              v53[2] = 0;
              *v53 = 0;
              v52[1] = v53;
              v47 = *(_DWORD *)buf;
              std::__hash_table<std::__hash_value_type<unsigned int,CA::Render::Context *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,CA::Render::Context *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,CA::Render::Context *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,CA::Render::Context *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((float *)CA::Render::Fence::fcontexts_by_id, *(unsigned int *)buf, buf)[3] = v52;
            }
            v54 = std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned long long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned long long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long long>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)&v108, v47, buf);
            std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)(v54 + 24), *(_QWORD *)v41, *(_QWORD *)v41);
            v55 = (malloc_zone_t *)get_malloc_zone();
            v56 = malloc_type_zone_malloc(v55, 0x18uLL, 0x8BB15036uLL);
            *(_QWORD *)v56 = v46;
            v56[2] = 0;
            v56[3] = v47;
            *((_QWORD *)v56 + 2) = 0;
            v45 = (uint64_t *)*v45;
            v46 = v56;
          }
          while (v45);
        }
        else
        {
          v56 = 0;
        }
        v72 = (malloc_zone_t *)get_malloc_zone();
        v73 = (double *)malloc_type_zone_malloc(v72, 0x20uLL, 0x8BB15036uLL);
        v98 = 0;
        v27 = 0;
        *(_QWORD *)v73 = v101;
        *((_DWORD *)v73 + 2) = 0;
        v73[2] = *v41;
        *((_QWORD *)v73 + 3) = v56;
        v97 = 1;
        v101 = v73;
        v5 = (_QWORD **)&CA::Render::transition_lock;
        goto LABEL_115;
      }
      if (x_log_hook_p())
        goto LABEL_89;
      v74 = x_log_category_render;
      if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
        goto LABEL_113;
      *(_WORD *)buf = 0;
      v75 = "Failed to create batch fence in applyTransaction.";
      goto LABEL_112;
    }
    if (*((_QWORD *)&v106 + 1) == 1)
    {
      if (*((_BYTE *)v99 + 25) != 0 && v28)
        goto LABEL_53;
      if (*((_BYTE *)v99 + 25))
      {
LABEL_68:
        batch = CA::Render::Fence::create_batch((CA::Render::Fence *)(BYTE9(xmmword_1ECDC6AF0) == 0));
        if (batch)
        {
          v38 = batch;
          if (*((_BYTE *)batch + 44))
            v98 = *(_QWORD *)batch;
          else
            v98 = 0;
          v58 = (uint64_t *)v106;
          v100 = *((_DWORD *)batch + 10);
          if ((_QWORD)v106)
          {
            v59 = 0;
            do
            {
              *(_DWORD *)buf = *((_DWORD *)v58 + 4);
              v60 = *(_DWORD *)buf;
              v61 = (os_unfair_lock_s *)v58[3];
              std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(*((_QWORD *)v38 + 3), *(unsigned int *)buf, *(int *)buf);
              if (*((_BYTE *)v38 + 44))
                kdebug_trace();
              CA::Render::Context::add_fence_batch_port(v61, *((_DWORD *)v38 + 10));
              v62 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((_QWORD *)CA::Render::Fence::bcontexts_by_id, v60);
              if (v62)
              {
                v63 = (_QWORD *)v62[3];
              }
              else
              {
                p_os_unfair_lock_opaque = &v61[2]._os_unfair_lock_opaque;
                do
                  v65 = __ldaxr(p_os_unfair_lock_opaque);
                while (__stlxr(v65 + 1, p_os_unfair_lock_opaque));
                if (!v65)
                {
                  do
                    v71 = __ldaxr(p_os_unfair_lock_opaque);
                  while (__stlxr(v71 - 1, p_os_unfair_lock_opaque));
                }
                v66 = (malloc_zone_t *)get_malloc_zone();
                v63 = malloc_type_zone_malloc(v66, 0x18uLL, 0x8BB15036uLL);
                *v63 = v61;
                v67 = (_QWORD *)operator new();
                v67[1] = 0;
                v67[2] = 0;
                *v67 = 0;
                v63[1] = v67;
                v68 = operator new();
                *(_OWORD *)v68 = 0u;
                *(_OWORD *)(v68 + 16) = 0u;
                *(_DWORD *)(v68 + 32) = 1065353216;
                v63[2] = v68;
                v60 = *(_DWORD *)buf;
                std::__hash_table<std::__hash_value_type<unsigned int,CA::Render::Context *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,CA::Render::Context *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,CA::Render::Context *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,CA::Render::Context *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((float *)CA::Render::Fence::bcontexts_by_id, *(unsigned int *)buf, buf)[3] = v63;
              }
              std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(v63[2], *((_DWORD *)v38 + 10), *((_DWORD *)v38 + 10));
              v69 = (malloc_zone_t *)get_malloc_zone();
              v70 = malloc_type_zone_malloc(v69, 0x18uLL, 0x8BB15036uLL);
              *(_QWORD *)v70 = v59;
              v70[2] = 0;
              v70[3] = v60;
              *((_QWORD *)v70 + 2) = 0;
              v58 = (uint64_t *)*v58;
              v59 = v70;
            }
            while (v58);
            v27 = v70;
            v97 = 0;
            goto LABEL_115;
          }
          v97 = 0;
          goto LABEL_114;
        }
        if (x_log_hook_p())
        {
LABEL_89:
          x_log_();
          goto LABEL_113;
        }
        v74 = x_log_category_render;
        if (!os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
          goto LABEL_113;
        *(_WORD *)buf = 0;
        v75 = "Failed to create batch in applyTransaction.";
LABEL_112:
        _os_log_impl(&dword_184457000, v74, OS_LOG_TYPE_ERROR, v75, buf, 2u);
      }
    }
LABEL_113:
    v97 = 0;
    v100 = 0;
    v98 = 0;
LABEL_114:
    v27 = 0;
    goto LABEL_115;
  }
  v97 = 0;
  v100 = 0;
  v98 = 0;
LABEL_115:
  for (i = (uint64_t *)v109; i; v5 = v78)
  {
    v77 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v5[432], *((_DWORD *)i + 4));
    if (!v77)
LABEL_147:
      abort();
    v78 = v5;
    v79 = *(uint64_t **)(v77[3] + 8);
    v80 = v79[1];
    v81 = v79[2];
    if (v80 >= v81)
    {
      v83 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v80 - *v79) >> 3);
      v84 = v83 + 1;
      if (v83 + 1 > 0x666666666666666)
        goto LABEL_147;
      v85 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v81 - *v79) >> 3);
      if (2 * v85 > v84)
        v84 = 2 * v85;
      if (v85 >= 0x333333333333333)
        v86 = 0x666666666666666;
      else
        v86 = v84;
      if (v86)
      {
        if (v86 > 0x666666666666666)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v87 = (char *)operator new(40 * v86);
      }
      else
      {
        v87 = 0;
      }
      v88 = &v87[40 * v86];
      v89 = std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__hash_table((uint64_t)&v87[40 * v83], i + 3);
      v82 = v89 + 40;
      v91 = (uint64_t *)*v79;
      v90 = (uint64_t *)v79[1];
      if (v90 == (uint64_t *)*v79)
      {
        *v79 = v89;
        v79[1] = v82;
        v79[2] = (uint64_t)v88;
      }
      else
      {
        do
        {
          v90 -= 5;
          v89 = std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__hash_table(v89 - 40, v90);
        }
        while (v90 != v91);
        v92 = (uint64_t *)*v79;
        v90 = (uint64_t *)v79[1];
        *v79 = v89;
        v79[1] = v82;
        v79[2] = (uint64_t)v88;
        if (v90 != v92)
        {
          do
          {
            v90 -= 5;
            std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)v90);
          }
          while (v90 != v92);
          v90 = v92;
        }
      }
      if (v90)
        operator delete(v90);
    }
    else
    {
      v82 = std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__hash_table(v80, i + 3)+ 40;
    }
    v79[1] = v82;
    i = (uint64_t *)*i;
  }
  if (TransactionInfo || (v100 - 1) < 0xFFFFFFFE)
  {
    v93 = (malloc_zone_t *)get_malloc_zone();
    v94 = malloc_type_zone_malloc(v93, 0x28uLL, 0x8BB15036uLL);
    v2 = v94;
    *v94 = v101;
    v94[1] = v27;
    if (TransactionInfo)
      v95 = TransactionInfo[4];
    else
      v95 = 0;
    *((_DWORD *)v94 + 4) = v95;
    *((_DWORD *)v94 + 5) = v100;
    *((_BYTE *)v94 + 24) = v97;
    v94[4] = v98;
  }
  else
  {
    v2 = 0;
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)&v105);
  std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>>>::~__hash_table((uint64_t)&v108);
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Fence::_lock);
  return v2;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>>>::find<unsigned int>(uint64_t a1, unint64_t a2, unsigned int a3)
{
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  if (!a2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a3;
    if (a3 >= a2)
      v4 = a3 % a2;
  }
  else
  {
    v4 = ((_DWORD)a2 - 1) & a3;
  }
  v5 = *(uint64_t ***)(a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a3)
    {
      if (*((_DWORD *)result + 4) == a3)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= a2)
          v7 %= a2;
      }
      else
      {
        v7 &= a2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

uint64_t std::unordered_set<unsigned int>::unordered_set(uint64_t a1, uint64_t a2)
{
  uint64_t *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(a1, *((_DWORD *)i + 4), *((_DWORD *)i + 4));
  return a1;
}

void std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(uint64_t a1, unsigned int a2, int a3)
{
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;

  v5 = a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = a2;
      if (v6 <= a2)
        v8 = a2 % v6;
    }
    else
    {
      v8 = ((_DWORD)v6 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v8);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return;
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v11 >= v6)
              v11 %= v6;
          }
          else
          {
            v11 &= v6 - 1;
          }
          if (v11 != v8)
            break;
        }
      }
    }
  }
  else
  {
    v8 = 0;
  }
  v12 = operator new(0x18uLL);
  v12[1] = v5;
  *((_DWORD *)v12 + 4) = a3;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v6 || (float)(v14 * (float)v6) < v13)
  {
    v15 = 1;
    if (v6 >= 3)
      v15 = (v6 & (v6 - 1)) != 0;
    v16 = v15 | (2 * v6);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>(a1, v18);
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
        v8 = v5 % v6;
      else
        v8 = v5;
    }
    else
    {
      v8 = ((_DWORD)v6 - 1) & v5;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
  if (v20)
  {
    *v12 = *v20;
LABEL_38:
    *v20 = v12;
    goto LABEL_39;
  }
  v21 = *(_QWORD *)(a1 + 16);
  *v12 = v21;
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v19 + 8 * v8) = a1 + 16;
  if (v21)
  {
    v22 = *(_QWORD *)(v21 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v22 >= v6)
        v22 %= v6;
    }
    else
    {
      v22 &= v6 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
}

void std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime >= *(_QWORD *)&v4)
      return;
    if (!prime)
    {
      v16 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v16)
        operator delete(v16);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v9 = v8[1];
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime)
        v9 %= prime;
    }
    else
    {
      v9 &= prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = a1 + 16;
    v14 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime)
            v15 %= prime;
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v15))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *v8 = *v14;
          *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v15) = v14;
          v14 = v8;
        }
        v15 = v9;
LABEL_31:
        v8 = v14;
        v14 = (_QWORD *)*v14;
        v9 = v15;
      }
      while (v14);
    }
  }
}

void std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = a2;
      if (v6 <= a2)
        v8 = a2 % v6;
    }
    else
    {
      v8 = (v6 - 1) & a2;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
    if (v9)
    {
      for (i = (_QWORD *)*v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return;
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v11 >= v6)
              v11 %= v6;
          }
          else
          {
            v11 &= v6 - 1;
          }
          if (v11 != v8)
            break;
        }
      }
    }
  }
  else
  {
    v8 = 0;
  }
  v12 = operator new(0x18uLL);
  *v12 = 0;
  v12[1] = a2;
  v12[2] = a3;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v6 || (float)(v14 * (float)v6) < v13)
  {
    v15 = 1;
    if (v6 >= 3)
      v15 = (v6 & (v6 - 1)) != 0;
    v16 = v15 | (2 * v6);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>(a1, v18);
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= a2)
        v8 = a2 % v6;
      else
        v8 = a2;
    }
    else
    {
      v8 = (v6 - 1) & a2;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
  if (v20)
  {
    *v12 = *v20;
LABEL_38:
    *v20 = v12;
    goto LABEL_39;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v19 + 8 * v8) = a1 + 16;
  if (*v12)
  {
    v21 = *(_QWORD *)(*v12 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v21 >= v6)
        v21 %= v6;
    }
    else
    {
      v21 &= v6 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
}

void sub_18450C0FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void CA::Render::Context::add_fence_batch_port(os_unfair_lock_s *this, unsigned int a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;

  if (a2 - 1 <= 0xFFFFFFFD)
  {
    v4 = this + 158;
    os_unfair_lock_lock(this + 158);
    v5 = *(_QWORD *)&this[166]._os_unfair_lock_opaque;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)&this[160], a2, a2);
    os_unfair_lock_unlock(v4);
    if (!v5)
      CA::Render::post_notification(6u, (unint64_t)this, 0, 0);
  }
}

char *std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned long long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned long long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long long>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD v23[4];

  v23[3] = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = a2;
      if (v6 <= a2)
        v8 = a2 % v6;
    }
    else
    {
      v8 = ((_DWORD)v6 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v8);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v11 >= v6)
                v11 %= v6;
            }
            else
            {
              v11 &= v6 - 1;
            }
            if (v11 != v8)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    v8 = 0;
  }
  v12 = (_QWORD *)(a1 + 16);
  v23[2] = 1;
  v10 = (char *)operator new(0x40uLL);
  v23[0] = v10;
  v23[1] = a1 + 16;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v5;
  *((_DWORD *)v10 + 4) = *a3;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *((_DWORD *)v10 + 14) = 1065353216;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v6 || (float)(v14 * (float)v6) < v13)
  {
    v15 = 1;
    if (v6 >= 3)
      v15 = (v6 & (v6 - 1)) != 0;
    v16 = v15 | (2 * v6);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>(a1, v18);
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
        v8 = v5 % v6;
      else
        v8 = v5;
    }
    else
    {
      v8 = ((_DWORD)v6 - 1) & v5;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
  if (v20)
  {
    *(_QWORD *)v10 = *v20;
LABEL_38:
    *v20 = v10;
    goto LABEL_39;
  }
  *(_QWORD *)v10 = *v12;
  *v12 = v10;
  *(_QWORD *)(v19 + 8 * v8) = v12;
  if (*(_QWORD *)v10)
  {
    v21 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v21 >= v6)
        v21 %= v6;
    }
    else
    {
      v21 &= v6 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  v23[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long long>>,void *>>>>::reset[abi:nn180100]((uint64_t)v23);
  return v10;
}

void sub_18450C3F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long long>>,void *>>>>::reset[abi:nn180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t CASApplyFenceTransaction(unsigned int a1, mach_vm_address_t a2, unsigned int a3, vm_address_t a4, unsigned int a5, int a6, vm_address_t *a7, _DWORD *a8, vm_address_t *a9, unsigned int *a10, _DWORD *a11, _DWORD *a12, _BYTE *a13, _QWORD *a14)
{
  unint64_t v18;
  unint64_t v19;
  malloc_zone_t *malloc_zone;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  mach_vm_address_t v24;
  unint64_t v25;
  mach_vm_address_t v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  malloc_zone_t *v30;
  _DWORD *v31;
  _DWORD *v32;
  int v33;
  unsigned int v34;
  uint64_t *v35;
  uint64_t *v36;
  malloc_zone_t *v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t *v40;
  malloc_zone_t *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  malloc_zone_t *v47;
  malloc_zone_t *v48;
  malloc_zone_t *v49;
  _QWORD *v50;
  mach_vm_size_t v51;
  malloc_zone_t *v52;
  _QWORD *i;
  unsigned int *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  vm_map_t *j;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  void **v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  vm_address_t v67;
  unint64_t v68;
  vm_address_t v69;
  unsigned int v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  unint64_t v75;
  unint64_t v76;
  malloc_zone_t *v77;
  _DWORD *v78;
  malloc_zone_t *v79;
  _DWORD *v80;
  malloc_zone_t *v81;
  malloc_zone_t *v82;
  uint64_t result;
  mach_port_name_t *v84;
  unint64_t v85;
  mach_port_name_t v86;
  mach_port_name_t v87;
  unsigned int v88;
  mach_vm_address_t v93;
  vm_address_t address;
  vm_address_t v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  v95 = a4;
  v18 = a3;
  v19 = a5;
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v21 = malloc_type_zone_malloc(malloc_zone, 0x28uLL, 0x8BB15036uLL);
  v22 = 0;
  v21[1] = 0;
  v21[2] = 0;
  *v21 = 0;
  *((_BYTE *)v21 + 24) = 0;
  *((_BYTE *)v21 + 25) = a6 != 0;
  v21[4] = 0;
  v98 = 1065353216;
  v23 = a1;
  v96 = 0u;
  v97 = 0u;
  v88 = a3;
  v93 = a2;
  if (a1 < a3)
  {
    v24 = a2;
    v25 = 0;
    v22 = v18 - a1;
    v26 = v24 + 4 * a1;
    do
    {
      if (v25 < v19)
      {
        LODWORD(address) = *(_DWORD *)(v95 + 4 * v25);
        v27 = address;
        if (!std::__hash_table<std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>>>::find<unsigned int>(v96, *((unint64_t *)&v96 + 1), address))
        {
          v28 = CA::Render::Context::context_by_server_port((CA::Render::Context *)*(unsigned int *)(v26 + 4 * v25));
          if (v28)
            std::__hash_table<std::__hash_value_type<unsigned int,CA::Render::Context *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,CA::Render::Context *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,CA::Render::Context *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,CA::Render::Context *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((float *)&v96, v27, &address)[3] = v28;
        }
      }
      ++v25;
    }
    while (v22 != v25);
    a2 = v93;
  }
  if (a1)
  {
    v29 = 0;
    do
    {
      v30 = (malloc_zone_t *)get_malloc_zone();
      v31 = malloc_type_zone_malloc(v30, 0x20uLL, 0x8BB15036uLL);
      v32 = v31;
      *(_QWORD *)v31 = *v21;
      if (v29 >= v18)
        v33 = 0;
      else
        v33 = *(_DWORD *)(a2 + 4 * v29);
      v31[2] = v33;
      *((_QWORD *)v31 + 2) = 0;
      *((_QWORD *)v31 + 3) = 0;
      *v21 = v31;
      if (v22 < v19)
      {
        while (1)
        {
          v34 = *(_DWORD *)(v95 + 4 * v22);
          if (!v34)
            break;
          v35 = std::__hash_table<std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>>>::find<unsigned int>(v96, *((unint64_t *)&v96 + 1), v34);
          if (v35)
          {
            v36 = v35;
            v37 = (malloc_zone_t *)get_malloc_zone();
            v38 = malloc_type_zone_malloc(v37, 0x18uLL, 0x8BB15036uLL);
            *v38 = *((_QWORD *)v32 + 3);
            v38[1] = 0;
            v38[2] = v36[3];
            *((_QWORD *)v32 + 3) = v38;
          }
          if (v19 == ++v22)
          {
            v22 = v19;
            break;
          }
        }
      }
      ++v22;
      ++v29;
    }
    while (v29 != v23);
  }
  if (v22 < v19)
  {
    do
    {
      v39 = std::__hash_table<std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>>>::find<unsigned int>(v96, *((unint64_t *)&v96 + 1), *(_DWORD *)(v95 + 4 * v22));
      if (v39)
      {
        v40 = v39;
        v41 = (malloc_zone_t *)get_malloc_zone();
        v42 = malloc_type_zone_malloc(v41, 0x18uLL, 0x8BB15036uLL);
        *v42 = v21[1];
        v42[1] = 0;
        v42[2] = v40[3];
        v21[1] = v42;
      }
      ++v22;
    }
    while (v19 != v22);
  }
  v43 = CA::Render::Fence::applyTransaction(v21);
  while (1)
  {
    v44 = (_QWORD *)*v21;
    if (!*v21)
      break;
    v45 = (_QWORD *)v44[3];
    if (v45)
    {
      do
      {
        v46 = (_QWORD *)*v45;
        v47 = (malloc_zone_t *)get_malloc_zone();
        malloc_zone_free(v47, v45);
        v45 = v46;
      }
      while (v46);
      v44 = (_QWORD *)*v21;
    }
    *v21 = *v44;
    v48 = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(v48, v44);
  }
  while (1)
  {
    v50 = (_QWORD *)v21[1];
    if (!v50)
      break;
    v21[1] = *v50;
    v49 = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(v49, v50);
  }
  v51 = 4 * a5;
  v52 = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(v52, v21);
  for (i = (_QWORD *)v97; i; i = (_QWORD *)*i)
  {
    v54 = (unsigned int *)i[3];
    if (v54)
    {
      v55 = v54 + 2;
      do
      {
        v56 = __ldaxr(v55);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, v55));
      if (!v57)
        (*(void (**)(unsigned int *))(*(_QWORD *)v54 + 16))(v54);
    }
  }
  j = (vm_map_t *)MEMORY[0x1E0C83DA0];
  if (!v43)
  {
    *a7 = 0;
    *a8 = 0;
    v95 = 0;
    *a9 = 0;
    *a10 = 0;
    *a11 = 0;
    *a12 = 0;
    *a13 = 0;
    *a14 = 0;
    goto LABEL_85;
  }
  v59 = (_QWORD *)*v43;
  if (*v43)
  {
    v60 = 0;
    v61 = 0;
    do
    {
      v62 = v59 + 3;
      do
      {
        v62 = (_QWORD *)*v62;
        ++v60;
      }
      while (v62);
      ++v61;
      v59 = (_QWORD *)*v59;
    }
    while (v59);
  }
  else
  {
    v61 = 0;
    v60 = 0;
  }
  v63 = (void **)(v43 + 1);
  v64 = v60 - 1;
  v65 = v43 + 1;
  do
  {
    v65 = (_QWORD *)*v65;
    ++v64;
  }
  while (v65);
  address = 0;
  v66 = (_QWORD *)MEMORY[0x1E0C85AD8];
  if (v61)
  {
    vm_allocate(*MEMORY[0x1E0C83DA0], &address, (*MEMORY[0x1E0C85AD8] + 8 * v61 - 1) & -*MEMORY[0x1E0C85AD8], 1);
    v67 = address;
    if (address)
      v68 = v61;
    else
      v68 = 0;
  }
  else
  {
    v67 = 0;
    v68 = 0;
  }
  *a7 = v67;
  *a8 = v68;
  v95 = 0;
  if (v64)
  {
    vm_allocate(*MEMORY[0x1E0C83DA0], &v95, (*v66 + 4 * v64 - 1) & -*v66, 1);
    v69 = v95;
    if (v95)
      v70 = v64;
    else
      v70 = 0;
  }
  else
  {
    v69 = 0;
    v70 = 0;
  }
  *a9 = v69;
  *a10 = v70;
  *a11 = 0;
  *a12 = 0;
  *a13 = 0;
  *a14 = 0;
  v71 = (_QWORD *)*v43;
  if (*((_BYTE *)v43 + 24))
  {
    if (!v71)
      goto LABEL_79;
    v72 = (_QWORD *)*v43;
    do
    {
      v73 = v72;
      v72 = (_QWORD *)*v72;
    }
    while (v72);
    if (v71 != v73)
    {
      *v73 = v71;
      v74 = (_QWORD *)*v71;
      *v43 = *v71;
      *v71 = 0;
      v71 = v74;
    }
  }
  if (v71)
  {
    v75 = 0;
    v76 = 0;
    do
    {
      if (v75 < v68)
        *(_QWORD *)(address + 8 * v75++) = v71[2];
      while (1)
      {
        v78 = (_DWORD *)v71[3];
        if (!v78)
          break;
        if (v76 < v70)
          *(_DWORD *)(v95 + 4 * v76++) = v78[3];
        v71[3] = *(_QWORD *)v78;
        v77 = (malloc_zone_t *)get_malloc_zone();
        malloc_zone_free(v77, v78);
      }
      if (v76 < v70)
        *(_DWORD *)(v95 + 4 * v76++) = 0;
      *v43 = *v71;
      v79 = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(v79, v71);
      v71 = (_QWORD *)*v43;
    }
    while (*v43);
    goto LABEL_80;
  }
LABEL_79:
  v76 = 0;
LABEL_80:
  v80 = *v63;
  v51 = 4 * a5;
  for (j = (vm_map_t *)MEMORY[0x1E0C83DA0]; *v63; v80 = *v63)
  {
    if (v76 < v70)
      *(_DWORD *)(v95 + 4 * v76++) = v80[3];
    *v63 = *(void **)v80;
    v81 = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(v81, v80);
  }
  *a11 = *((_DWORD *)v43 + 4);
  *a12 = *((_DWORD *)v43 + 5);
  *a13 = *((_BYTE *)v43 + 24);
  *a14 = v43[4];
  v82 = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(v82, v43);
  a2 = v93;
LABEL_85:
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)&v96);
  result = mach_vm_deallocate(*j, a4, v51);
  if (a2 && v88)
  {
    v84 = (mach_port_name_t *)a2;
    v85 = v18;
    do
    {
      v87 = *v84++;
      v86 = v87;
      if (v87)
        mach_port_deallocate(*j, v86);
      --v85;
    }
    while (v85);
    return mach_vm_deallocate(*j, a2, 4 * v18);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,unsigned long long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long long>>>::find<unsigned long>(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  unint64_t v7;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (*(_QWORD *)&v2 <= a2)
      v4 = a2 % *(_QWORD *)&v2;
  }
  else
  {
    v4 = (*(_QWORD *)&v2 - 1) & a2;
  }
  v5 = *(_QWORD **)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  result = (_QWORD *)*v5;
  if (*v5)
  {
    do
    {
      v7 = result[1];
      if (v7 == a2)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= *(_QWORD *)&v2)
            v7 %= *(_QWORD *)&v2;
        }
        else
        {
          v7 &= *(_QWORD *)&v2 - 1;
        }
        if (v7 != v4)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t CA::Render::Fence::is_fence_resolved(unint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t result;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)a2, a1, a1);
  if (!std::__hash_table<std::__hash_value_type<unsigned long,unsigned long long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long long>>>::find<unsigned long>((_QWORD *)CA::Render::Fence::cleared_f_names, a1))
  {
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)a4, a1, a1);
    return 0;
  }
  v8 = *(_QWORD **)(CA::Render::Fence::fcontexts_by_id + 16);
  if (!v8)
    return 1;
  while (1)
  {
    v9 = *(_QWORD **)(v8[3] + 8);
    v10 = v9[1];
    if (v10 != *v9)
      break;
LABEL_16:
    v8 = (_QWORD *)*v8;
    result = 1;
    if (!v8)
      return result;
  }
  v11 = 0;
  while (1)
  {
    v17 = 0;
    v10 -= 40;
    v15 = 0u;
    v16 = 0u;
    std::unordered_set<unsigned long long>::unordered_set((uint64_t)&v15, v10);
    if ((v11 & 1) == 0
      && !std::__hash_table<std::__hash_value_type<unsigned long,unsigned long long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long long>>>::find<unsigned long>(&v15, a1))
    {
      v11 = 0;
      goto LABEL_15;
    }
    v12 = (_QWORD *)v16;
    if ((_QWORD)v16)
      break;
LABEL_13:
    v11 = 1;
LABEL_15:
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)&v15);
    if (v10 == *v9)
      goto LABEL_16;
  }
  while (1)
  {
    v13 = v12[2];
    if (!std::__hash_table<std::__hash_value_type<unsigned long,unsigned long long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long long>>>::find<unsigned long>(a2, v13)&& !std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(*(_QWORD *)a3, *(_QWORD *)(a3 + 8), v13)&& (std::__hash_table<std::__hash_value_type<unsigned long,unsigned long long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long long>>>::find<unsigned long>(a4, v13)|| !CA::Render::Fence::is_fence_resolved(v13, a2, a3, a4)))
    {
      break;
    }
    v12 = (_QWORD *)*v12;
    if (!v12)
      goto LABEL_13;
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)a4, a1, a1);
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)&v15);
  return 0;
}

uint64_t std::unordered_set<unsigned long long>::unordered_set(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(a1, i[2], i[2]);
  return a1;
}

void CA::Render::Fence::send_rlfg_msg(uint64_t a1, size_t size, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v5;
  int v6;
  int v10;
  size_t v11;
  _BYTE *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  mach_msg_return_t v16;
  mach_msg_return_t v17;
  NSObject *v18;
  _BYTE msg[28];
  _BYTE *v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint8_t buf[4];
  mach_msg_return_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a4 + 24);
  if (!v5)
    __assert_rtn("send_rlfg_msg", "render-fence.cpp", 107, "!f_names.empty ()");
  v6 = size;
  if ((size + 1) <= 1)
    __assert_rtn("send_rlfg_msg", "render-fence.cpp", 108, "MACH_PORT_VALID (batch_port)");
  v10 = a1;
  if ((unint64_t)(8 * v5) > 0x1000)
  {
    v12 = malloc_type_malloc(8 * v5, 0x65CF298AuLL);
  }
  else
  {
    MEMORY[0x1E0C80A78](a1);
    v12 = &msg[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
    bzero(v12, v11);
  }
  v13 = *(_QWORD **)(a4 + 16);
  if (v13)
  {
    v14 = v12;
    do
    {
      *v14++ = v13[2];
      v13 = (_QWORD *)*v13;
    }
    while (v13);
  }
  *(_QWORD *)msg = 0x4880000013;
  *(_DWORD *)&msg[8] = v10;
  *(_OWORD *)&msg[12] = xmmword_18474E860;
  v21 = v12;
  v15 = 8 * *(_DWORD *)(a4 + 24);
  v22 = 16777472;
  v23 = v15;
  v24 = v6;
  v25 = 0x13000000000000;
  v26 = a3;
  v27 = a5;
  v16 = mach_msg((mach_msg_header_t *)msg, 17, 0x48u, 0, 0, 0x64u, 0);
  if (v16)
  {
    v17 = v16;
    if ((v16 - 268435459) <= 1)
      mach_msg_destroy((mach_msg_header_t *)msg);
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v18 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        v29 = v17;
        _os_log_impl(&dword_184457000, v18, OS_LOG_TYPE_DEFAULT, "failed to send rlfg reply: %x\n", buf, 8u);
      }
    }
  }
}

_DWORD *CA::Render::Fence::_createTransactionInfo(CA::Render::Fence *this)
{
  malloc_zone_t *malloc_zone;
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  mach_port_name_t name;
  mach_port_options_t options;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  memset(&options.mpl, 0, 20);
  name = 0;
  options.flags = 16;
  if (mach_port_construct(*MEMORY[0x1E0C83DA0], &options, 0, &name) || name + 1 <= 1)
    goto LABEL_21;
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v2 = malloc_type_zone_malloc(malloc_zone, 0x18uLL, 0x8BB15036uLL);
  v2[4] = name;
  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_DWORD *)(v3 + 32) = 1065353216;
  *(_QWORD *)v2 = v3;
  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_DWORD *)(v4 + 32) = 1065353216;
  *((_QWORD *)v2 + 1) = v4;
  v5 = CA::Render::Fence::transactions;
  v7 = *(_QWORD **)(CA::Render::Fence::transactions + 8);
  v6 = *(_QWORD *)(CA::Render::Fence::transactions + 16);
  if ((unint64_t)v7 < v6)
  {
    *v7 = v2;
    v8 = v7 + 1;
    goto LABEL_20;
  }
  v9 = *(_QWORD **)CA::Render::Fence::transactions;
  v10 = ((uint64_t)v7 - *(_QWORD *)CA::Render::Fence::transactions) >> 3;
  v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 61)
LABEL_21:
    abort();
  v12 = v6 - (_QWORD)v9;
  if (v12 >> 2 > v11)
    v11 = v12 >> 2;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
    v13 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v14 = (char *)operator new(8 * v13);
  }
  else
  {
    v14 = 0;
  }
  v15 = &v14[8 * v10];
  *(_QWORD *)v15 = v2;
  v8 = v15 + 8;
  if (v7 != v9)
  {
    do
    {
      v16 = *--v7;
      *((_QWORD *)v15 - 1) = v16;
      v15 -= 8;
    }
    while (v7 != v9);
    v7 = *(_QWORD **)v5;
  }
  *(_QWORD *)v5 = v15;
  *(_QWORD *)(v5 + 8) = v8;
  *(_QWORD *)(v5 + 16) = &v14[8 * v13];
  if (v7)
    operator delete(v7);
LABEL_20:
  *(_QWORD *)(v5 + 8) = v8;
  return v2;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::clear(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;

  if (result[3])
  {
    v1 = result;
    result = (_QWORD *)result[2];
    if (result)
    {
      do
      {
        v2 = (_QWORD *)*result;
        operator delete(result);
        result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    v3 = v1[1];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

void __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

uint64_t CA::Render::Subtexture::texture_cast(CA::Render::Subtexture *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 2);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 80))(result);
  return result;
}

uint64_t get_bounds()
{
  CGContextDelegateGetInfo();
  return CGContextDelegateGetBounds();
}

uint64_t ___ZN2CA3OGL12MetalContext22add_completed_callbackEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t CA::OGL::render_subclass(CA::OGL::Renderer &,CA::OGL::Layer const*)::visitor::visit_subclass(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float64_t v9;
  int64x2_t v10;
  int8x16_t v11;
  int32x4_t v12;
  uint64_t result;
  const double *v14;
  float64x2_t *v15;
  uint64_t v16;
  int8x16_t v17;
  double *v18;
  int v19;
  _BOOL4 v20;
  unsigned int *v21;
  uint64_t v22;
  int v23;
  _BOOL4 v24;
  double *v25;
  uint64_t v26;
  __int16 v27;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  float64x2_t v42;
  float64x2_t v43;
  uint64_t v45;
  char v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  uint32x2_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float v62;
  float64x2_t v64;
  double v65;
  int8x16_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  float64x2_t v73;
  __int128 v74;
  float64x2_t v75;
  int32x4_t v76;
  int v77;
  int v78;
  float (*v79)(uint64_t, double, uint64_t, uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  float32x4_t *v83;
  unsigned int *v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float32x4_t v89;
  float32x4_t v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 16);
  v5 = **(_QWORD ***)(a1 + 8);
  v6 = v5[29];
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(_QWORD *)(v7 + 72);
  v87.f64[0] = *(float64_t *)(v7 + 64);
  *(_QWORD *)&v87.f64[1] = v8;
  v9 = *(double *)(v7 + 88);
  v88.f64[0] = *(float64_t *)(v7 + 80);
  v88.f64[1] = v9;
  v85.f64[0] = v87.f64[0];
  *(_QWORD *)&v85.f64[1] = v8;
  v86.f64[0] = v88.f64[0];
  v86.f64[1] = v9;
  CA::Rect::apply_transform((int8x16_t *)&v85, *(const CA::Transform **)(v6 + 24), a3);
  v10 = vceqzq_f64(v86);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v10, 1), (int8x16_t)v10).u64[0] & 0x8000000000000000) != 0
    || (v11 = vorrq_s8((int8x16_t)vcltzq_f64(v86), (int8x16_t)vcgezq_f64(v86)),
        (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v11), 1), v11).u64[0] & 0x8000000000000000) != 0))
  {
    v76 = 0uLL;
  }
  else
  {
    v12 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v85, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
    v76 = vuzp1q_s32(v12, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v85, v86), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v12));
  }
  result = CA::Shape::intersects(*(_QWORD *)(v6 + 8), (int32x2_t *)&v76);
  if ((_DWORD)result)
  {
    v15 = *(float64x2_t **)(v6 + 24);
    v16 = CA::OGL::transform_filter_bits(v15, v14, 1.0, 1.0);
    v17.i64[0] = 1.0;
    v73 = v88;
    v19 = CA::OGL::rect_filter_bits(v15, v16, v18, v87, v88, v17, 1.0);
    v20 = (*((_BYTE *)v5 + 417) & 0x40) == 0
       && (*(unsigned int (**)(_QWORD *, uint64_t))(*v5 + 184))(v5, 23) != 0;
    v84 = 0;
    result = (uint64_t)CA::Render::GradientLayer::color_map(&v84, a2, v20);
    v21 = v84;
    if (v84)
    {
      result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v84 + 80))(v84);
      if (!result)
        goto LABEL_64;
      v22 = result;
      v23 = *(_DWORD *)(a2 + 104);
      v24 = v23 == 442;
      if (v23 == 115)
        v24 = 1;
      v25 = (double *)(v24 ? 528647 : 4359);
      v90 = 0uLL;
      result = (uint64_t)CA::OGL::Context::bind_image((uint64_t)v5, 0, (uint32x2_t *)result, v25, 1u, 1, v23 == 115, 0, 0.0, &v90, 0);
      if (!result)
        goto LABEL_64;
      v26 = result;
      v27 = *(_WORD *)(v6 + 38);
      _H0 = v27;
      __asm { FCVT            S0, H0 }
      if (_S0 == 1.0)
      {
        v34 = *(_DWORD *)(a2 + 12);
        if ((v34 & 0x800) != 0)
        {
          if ((v34 & 0x1000) != 0)
          {
LABEL_20:
            v35 = *(unsigned __int8 *)(v5[2] + 480);
            if (v35 > 3 || v35 == 2)
              v36 = 0;
            else
              v36 = 0x8000;
            v37 = 1;
LABEL_27:
            v38 = *(unsigned int *)(v6 + 32) | ((unint64_t)*(unsigned __int16 *)(v6 + 36) << 32);
            if ((v19 & 9) != 0 && (*(_WORD *)(v4 + 40) & 0x3C0) != 0 || (*(_BYTE *)(v4 + 32) & 0x10) != 0)
              v37 = 0;
            v90.f32[3] = (float)(v90.f32[3] + v90.f32[1]) * 0.5;
            v90.i32[1] = v90.i32[3];
            v39 = v5[2];
            v40 = *(unsigned __int8 *)(v39 + 480);
            if (v40 >= 2 && (v40 != 3 || (v37 & 1) == 0))
            {
              *(_BYTE *)(v39 + 481) |= 1u;
              v39 = v5[2];
            }
            *(_DWORD *)(v39 + 8) = v38;
            *(_WORD *)(v39 + 12) = WORD2(v38);
            *(_WORD *)(v39 + 14) = v27;
            v89 = 0uLL;
            v72 = v37;
            if (v23 == 442)
            {
              v42 = *(float64x2_t *)(a2 + 72);
              v43 = vcvtq_f64_f32(vcvt_f32_f64(vmulq_f64(vsubq_f64(*(float64x2_t *)(a2 + 88), v42), v73)));
              __asm { FMOV            V2.2D, #-1.0 }
              v89 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vmulq_f64(v73, v42), v43)), vdivq_f64(vmulq_f64(vaddq_f64(v42, _Q2), v73), v43));
              v45 = v5[2];
              v46 = 1;
            }
            else
            {
              if (v23 != 115)
              {
                if (v23 == 49)
                {
                  __asm { FMOV            V0.2S, #1.0 }
                  v89.i64[1] = _D0;
                }
LABEL_42:
                v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 104))(v22);
                v48 = (v47 < 0x1D) & (0x17826000u >> v47);
                if (v48 == 1)
                {
                  v49 = *(_DWORD *)(a2 + 108);
                  *(_BYTE *)(v5[2] + 481) |= 2u;
                  *(_DWORD *)(v5[2] + 352) = v49;
                }
                v50 = (*(unsigned __int16 *)(v4 + 40) >> 6);
                v51 = *(_QWORD *)(v6 + 24);
                v76.i64[0] = (uint64_t)&v87;
                v76.i64[1] = v51;
                v77 = v36 | v19;
                v78 = v50;
                v81 = 0;
                v82 = a2;
                v83 = &v90;
                v80 = 0;
                v52 = *(_QWORD *)(v4 + 24);
                v53 = *(_QWORD *)(v52 + 128);
                v54 = 0.0;
                if (v53)
                {
                  v55 = *(_QWORD *)(v53 + 72);
                  if (v55)
                  {
                    CA::OGL::fill_uneven_round_rect_tex((CA::OGL::Context *)v5, (uint64_t)&v76, (float64_t *)(v55 + 24), (uint64_t)&v89, *(_DWORD *)(v52 + 40) & 3);
                    if (!v48)
                      goto LABEL_60;
                    goto LABEL_59;
                  }
                  v56 = *(_QWORD *)(v53 + 56);
                  if (v56)
                  {
                    v57 = (uint32x2_t *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v56 + 80))(v56, 0.0);
                    v58 = *(_QWORD *)(v4 + 24);
                    v59 = *(_QWORD *)(v58 + 128);
                    if (v59)
                    {
                      v60 = *(_QWORD *)(v59 + 64);
                      if (v60)
                      {
                        if (*(_DWORD *)(v60 + 16) > 3u)
                        {
                          v64 = vsubq_f64(*(float64x2_t *)(v60 + 40), *(float64x2_t *)(v60 + 24));
                          v74 = *(_OWORD *)(v60 + 24);
                          v75 = v64;
                        }
                        else
                        {
                          v74 = 0u;
                          v75 = 0u;
                        }
                      }
                      else
                      {
                        __asm { FMOV            V0.2D, #0.5 }
                        v74 = _Q0;
                        v75 = 0uLL;
                      }
                      v62 = *(float *)(v59 + 228);
                    }
                    else
                    {
                      __asm { FMOV            V0.2D, #0.5 }
                      v74 = _Q0;
                      v75 = 0uLL;
                      v62 = 0.0;
                    }
                    CA::OGL::fill_corner_rect_tex((CA::OGL::Context *)v5, (double **)&v76, v57, (double *)&v74, *(_DWORD *)(*(_QWORD *)(v4 + 16) + 24) & 1, (*(_QWORD *)(v58 + 40) >> 41) & 1, (uint64_t)&v89, *(_WORD *)(v58 + 38) & 0xF, v62, v62, 0);
                    if (!v48)
                      goto LABEL_60;
LABEL_59:
                    *(_BYTE *)(v5[2] + 481) &= ~2u;
LABEL_60:
                    *(_BYTE *)(v5[2] + 19) = 0;
                    *(_BYTE *)(v5[2] + 481) &= ~1u;
                    (*(void (**)(_QWORD *, uint64_t, _QWORD))(*v5 + 520))(v5, v26, 0);
                    v67 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 144);
                    if (v67)
                      v68 = (*(_QWORD *)(v67 + 96) >> 53) & 7;
                    else
                      LODWORD(v68) = 0;
                    result = CA::OGL::fill_color_rect((uint64_t)v5, (uint64_t)&v87, v19, 0, v72 ^ 1u, v68, v65, v66);
LABEL_64:
                    v69 = v21 + 2;
                    do
                    {
                      v70 = __ldaxr(v69);
                      v71 = v70 - 1;
                    }
                    while (__stlxr(v71, v69));
                    if (!v71)
                      return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v21 + 16))(v21);
                    return result;
                  }
                  v54 = *(float *)(v53 + 228);
                }
                CA::OGL::fill_round_rect_tex((CA::OGL::Context *)v5, (float64x2_t **)&v76, (uint64_t)&v89, (double *)(*(_WORD *)(v52 + 38) & 0xF), *(_DWORD *)(v52 + 40) & 3, 0, v54, v54);
                if (!v48)
                  goto LABEL_60;
                goto LABEL_59;
              }
              v89 = (float32x4_t)xmmword_18474E1E0;
              v45 = v5[2];
              v46 = 2;
            }
            *(_BYTE *)(v45 + 19) = v46;
            goto LABEL_42;
          }
        }
        else if ((*(_DWORD *)(a2 + 28) & 0x800) != 0)
        {
          goto LABEL_20;
        }
      }
      v37 = 0;
      v36 = 0;
      goto LABEL_27;
    }
  }
  return result;
}

_QWORD *CA::Render::GradientLayer::color_map(_QWORD *this, uint64_t a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  CA::Render *v10;
  uint64_t v11;
  int8x16_t v12;
  int8x16_t v13;
  char v14;
  uint64_t v15;
  float v16;
  unint64_t v17;
  float *v18;
  uint64_t v19;
  float v20;
  unint64_t v21;
  int v22;
  CA::Render::TimingFunction *v23;
  uint64_t v24;
  float v25;
  CA::Render::TimingFunction *v31;
  CA::Render::TimingFunction *v32;
  uint64_t v33;
  float v34;
  _QWORD *v35;
  float v36;
  CA::Render::TimingFunction *v37;
  float v38;
  float v39;
  float32x2_t v40;
  float v41;
  int v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float32x2_t v47;
  BOOL v48;
  float v49;
  uint64_t v50;
  int32x2_t v52;
  float v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  CGColorSpace *v67;
  unsigned int v68;
  CA::Render::Image *v69;
  unsigned int v70;
  char v71;
  _QWORD *v73;
  CA::Render *v74;
  void (*v75[3])(const void *, void *);

  v3 = this;
  v75[1] = *(void (**)(const void *, void *))MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(a2 + 13) & 8) != 0)
  {
    v7 = *(_QWORD *)(a2 + 112);
    if (v7)
    {
      v8 = (unsigned int *)(v7 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      if (!v9)
      {
        v7 = 0;
        do
          v66 = __ldaxr(v8);
        while (__stlxr(v66 - 1, v8));
      }
    }
    *this = v7;
  }
  else
  {
    if (a3)
      v4 = 120;
    else
      v4 = 112;
    this = *(_QWORD **)(a2 + v4);
    if (this)
      goto LABEL_6;
    v75[0] = 0;
    if (*(_QWORD *)(a2 + 32) >= 2uLL)
    {
      v10 = (CA::Render *)(a3 ? 13 : 1);
      v11 = a3 ? 256 : 512;
      v71 = a3;
      v74 = (CA::Render *)CA::Render::format_rowbytes(v10, v11);
      this = CA::Render::aligned_malloc(v74, (unint64_t *)v75, 0);
      v14 = v71;
      v15 = a2;
      if (this)
      {
        v16 = 1.0 / (float)v11;
        v17 = *(_QWORD *)(a2 + 32);
        v18 = *(float **)(a2 + 56);
        v19 = v11;
        v69 = (CA::Render::Image *)v4;
        v68 = v10;
        if (v18)
          v20 = *v18;
        else
          v20 = 0.0;
        LODWORD(v21) = 0;
        v22 = 0;
        v23 = *(CA::Render::TimingFunction **)(a2 + 64);
        v24 = *(_QWORD *)(a2 + 48);
        v25 = v16 * 0.5;
        __asm { FMOV            V14.2S, #1.0 }
        v31 = v23;
        v32 = v23;
        v33 = v24;
        v34 = v20;
        v67 = (CGColorSpace *)this;
        v35 = this;
        v36 = 1.0 / (float)(v20 - v20);
        v70 = v19;
        do
        {
          if (v25 >= v20)
          {
            v37 = v31;
            v38 = v20;
            do
            {
              v33 = v24;
              v21 = (v21 + 1);
              v20 = 2.0;
              if (v17 <= v21)
              {
                v38 = 2.0;
                v31 = v37;
              }
              else
              {
                if (v18)
                  v20 = v18[v21];
                else
                  v20 = v38 + (float)(1.0 / (float)(v17 - 1));
                v24 += 16;
                v31 = (CA::Render::TimingFunction *)((char *)v37 + 32 * (v23 != 0));
                if (!v23)
                  v37 = v32;
                v36 = 1.0 / (float)(v20 - v38);
              }
              v32 = v37;
              v34 = v38;
              v37 = v31;
              v38 = v20;
            }
            while (v25 >= v20);
          }
          if (v20 > v34)
          {
            v43 = v36 * (float)(v25 - v34);
            if (v23)
            {
              v73 = v35;
              *(double *)v12.i64 = CA::Render::TimingFunction::evaluate(v32, (const double *)v19, v43, 0.00001);
              v15 = a2;
              v35 = v73;
              v19 = v70;
              v14 = v71;
              v43 = *(double *)v12.i64;
            }
            v44 = *(float *)v33;
            if ((*(_BYTE *)(v15 + 29) & 0x10) != 0)
            {
              v45 = *(float *)(v33 + 12);
              v46 = *(float *)(v24 + 12);
              v39 = (float)(v45 * v44)
                  + (float)((float)-(float)((float)(v45 * v44) - (float)(v46 * *(float *)v24)) * v43);
              v47 = vmul_n_f32(*(float32x2_t *)(v33 + 4), v45);
              v40 = vmla_n_f32(v47, vmla_n_f32(vneg_f32(v47), *(float32x2_t *)(v24 + 4), v46), v43);
              v41 = v45 + (float)((float)(v46 - v45) * v43);
              v42 = 1;
            }
            else
            {
              v42 = 0;
              v39 = v44 + (float)((float)(*(float *)v24 - v44) * v43);
              v40 = vmla_n_f32(*(float32x2_t *)(v33 + 4), vsub_f32(*(float32x2_t *)(v24 + 4), *(float32x2_t *)(v33 + 4)), v43);
              v41 = *(float *)(v33 + 12) + (float)((float)(*(float *)(v24 + 12) - *(float *)(v33 + 12)) * v43);
            }
          }
          else
          {
            v39 = *(float *)v33;
            v40 = *(float32x2_t *)(v33 + 4);
            v41 = *(float *)(v33 + 12);
            v42 = *(_DWORD *)(v15 + 28) & 0x1000;
          }
          if (v42)
            v48 = v20 <= v34;
          else
            v48 = 1;
          if (v48)
            v49 = v41;
          else
            v49 = 1.0;
          *(float *)v12.i32 = v49 * v39;
          *(float32x2_t *)v13.i8 = vmul_n_f32(v40, v49);
          if ((v14 & 1) != 0)
          {
            v13 = vextq_s8(v12, v13, 0xCuLL);
            v13.i32[0] = v12.i32[0];
            *(float *)&v13.i32[3] = v41;
            *(float16x4_t *)v12.i8 = vcvt_f16_f32((float32x4_t)v13);
            *v35 = v12.i64[0];
            v50 = 8;
          }
          else
          {
            if (*(float *)v12.i32 > 1.0)
              *(float *)v12.i32 = 1.0;
            _D2 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v13.i8, _D14), (int8x8_t)_D14, *(int8x8_t *)v13.i8);
            v52 = vcltz_f32(_D2);
            _S4 = 1132396544;
            if (*(float *)v12.i32 >= 0.0)
              v54 = (float)(*(float *)v12.i32 * 255.0) + 0.5;
            else
              v54 = 0.5;
            v55 = v54;
            v56 = vmlas_n_f32(0.5, 255.0, _D2.f32[0]) << 8;
            if ((v52.i8[0] & 1) != 0)
              v57 = 0;
            else
              v57 = v56;
            __asm { FMLA            S0, S4, V2.S[1] }
            if ((v52.i8[4] & 1) != 0)
              v59 = 0;
            else
              v59 = _S0;
            *(_DWORD *)v35 = v59 | ((float)((float)(v41 * 255.0) + 0.5) << 24) | (v55 << 16) | v57;
            v50 = 4;
          }
          v35 = (_QWORD *)((char *)v35 + v50);
          ++v22;
          v25 = v25 + v16;
        }
        while (v22 != (_DWORD)v19);
        this = CA::Render::Image::new_image((CA::Render::Image *)v68, v19, 1u, 1u, *(CGColorSpace **)(v15 + 128), v67, (unint64_t *)&v74, (const unint64_t *)CA::Render::release_image_data, v75[0], v67);
        v60 = a2;
        v61 = *(unsigned int **)((char *)v69 + a2);
        *(_QWORD *)((char *)v69 + a2) = this;
        if (v61)
        {
          v62 = v61 + 2;
          do
          {
            v63 = __ldaxr(v62);
            v64 = v63 - 1;
          }
          while (__stlxr(v64, v62));
          if (!v64)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v61 + 16))(v61);
            v60 = a2;
          }
          this = *(_QWORD **)((char *)v69 + v60);
          if (!this)
            goto LABEL_9;
        }
        else if (!this)
        {
LABEL_9:
          *v3 = this;
          return this;
        }
LABEL_6:
        v5 = (unsigned int *)(this + 1);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 + 1, v5));
        if (!v6)
        {
          this = 0;
          do
            v65 = __ldaxr(v5);
          while (__stlxr(v65 - 1, v5));
        }
        goto LABEL_9;
      }
    }
    *v3 = 0;
  }
  return this;
}

void *CA::Render::aligned_malloc(CA::Render *this, unint64_t *a2, void **a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v8;
  void *v9;
  int *v10;
  unint64_t v11;
  unint64_t v12;

  if (!this)
    return 0;
  v3 = *MEMORY[0x1E0C85AD8];
  if (*MEMORY[0x1E0C85AD8] < (unint64_t)a3)
    __assert_rtn("aligned_malloc", "render-image.cpp", 753, "align <= PAGE_SIZE");
  v4 = (unint64_t)this + v3 - 1;
  v5 = -v3;
  v6 = v4 & v5;
  if ((v4 & v5) == 0)
    return 0;
  v8 = mmap(0, v4 & v5, 3, 4098, 855638016, 0);
  if (v8 == (void *)-1)
    return 0;
  v9 = v8;
  *a2 = v6;
  v10 = CAGetStatsStruct(0);
  v11 = *((_QWORD *)v10 + 1);
  v12 = *(_QWORD *)v10 + v6;
  *(_QWORD *)v10 = v12;
  if (v12 > v11)
    *((_QWORD *)v10 + 1) = v12;
  return v9;
}

void CA::OGL::MaskCorners::finish(CA::OGL::MaskCorners *this, CA::OGL::ImagingNode *a2)
{
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint32x2_t *v7;
  _OWORD *v8;
  uint32x2_t *v9;
  _OWORD *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  __int32 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  uint64_t v28;
  float32x2_t *v29;
  uint64_t v30;
  uint64_t v31;
  float32x2_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float32x2_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(_QWORD *, _OWORD *, uint64_t);
  uint32x2_t *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  float v45;
  float *v46;
  uint64_t i;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  uint64_t v56;
  float32x2_t *v57;
  uint64_t v58;
  uint64_t v59;
  int8x16_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  __int128 *v64;
  __int128 v65;
  __int128 v66;
  _OWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double *v71;
  int *v72;
  int32x4_t v73;
  int32x4_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  int v79;
  int v80;
  uint64_t v81;
  int64x2_t v82;
  double v83;
  int8x16_t v84;
  int8x16_t v85;
  char v86;
  _OWORD *v87;
  int8x16_t v88;
  int32x4_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t v92;
  float32x2_t v93;
  float32x4_t v94[3];
  int8x16_t v95;
  double v96;
  uint64_t v97;
  __int128 v98;
  _OWORD v99[3];
  uint64_t v100;
  float32x4_t v101;
  uint64_t v102;
  float32x2_t v103;
  uint64_t v104;
  float32x2_t v105[4];

  v105[1] = *(float32x2_t *)MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)this + 24) && (*((_BYTE *)this + 244) & 4) == 0)
    return;
  v3 = (_QWORD *)**((_QWORD **)a2 + 1);
  v102 = 0;
  v101 = 0uLL;
  *(_BYTE *)(v3[2] + 16) = 15;
  if ((*(unsigned int (**)(_QWORD *))(*v3 + 984))(v3)
    && (*((_BYTE *)this + 244) & 4) == 0
    && ((*(uint64_t (**)(_QWORD *))(*v3 + 760))(v3) & 1) == 0)
  {
    *(_BYTE *)(v3[2] + 480) = 58;
    v40 = (uint32x2_t *)*((_QWORD *)this + 25);
    if (v40)
    {
      v87 = CA::OGL::Context::bind_image((uint64_t)v3, 0, v40, (double *)*((unsigned int *)this + 60), 1u, 1, 0, 0, 0.0, &v101, 0);
    }
    else
    {
      v41 = *((_DWORD *)this + 1);
      if (*(_DWORD *)this <= (signed int)v41)
        v42 = v41;
      else
        v42 = *(unsigned int *)this;
      if ((*((_BYTE *)this + 244) & 3) != 0)
        (*(void (**)(_QWORD *, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t *, _QWORD, char *))(*v3 + 464))(v3, 0, v42, 0, 0, &v102, *((_BYTE *)this + 244) & 3, (char *)this + 168);
      else
        (*(void (**)(_QWORD *, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t *))(*v3 + 456))(v3, 0, v42, 0, 0, &v102);
      v87 = 0;
    }
    CA::OGL::Context::bind_surface((uint64_t)v3, *((_QWORD *)this + 24), 1u, 0, 0, 0.0);
    v43 = *(_QWORD *)(v3[29] + 8);
    *(_QWORD *)&v98 = v3;
    *((_QWORD *)&v98 + 1) = v43;
    memset(v99, 0, 40);
    LOWORD(v99[1]) = 256;
    CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)&v98);
    v94[0] = 0uLL;
    if ((*((_BYTE *)this + 244) & 8) != 0)
    {
      v44 = *(float *)&v102;
      v45 = v44 + (float)((float)(*((float *)&v102 + 1) - v44) * 0.5);
      *(_BYTE *)(v3[2] + 19) = 5;
      v46 = (float *)v3[2];
      v46[92] = v44;
      v46[93] = v44;
      v46[94] = v45;
      v46[95] = v45;
    }
    while (CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)&v98, (int32x2_t *)v94))
    {
      for (i = 0; i != 4; ++i)
      {
        if (!*((_BYTE *)this + i + 184))
        {
          if (*((_DWORD *)v3 + 23))
            v48 = 6;
          else
            v48 = 4;
          v49 = v3[16];
          if ((unint64_t)(v49 + 4) > v3[17] || (v50 = v3[14]) != 0 && v3[13] + v48 > v50)
          {
            *((_WORD *)v3 + 408) |= 0x20u;
            CA::OGL::Context::array_flush((uint64_t)v3);
            v49 = 0;
            v3[12] = (char *)v3 + 818;
            *(_OWORD *)(v3 + 13) = xmmword_18474E060;
          }
          v51 = *(float32x2_t *)((char *)this + 8 * i + 40);
          v52 = vadd_f32(*(float32x2_t *)((char *)this + 8), v51);
          v53 = vadd_f32(*(float32x2_t *)((char *)this + 16), v51);
          v54 = vadd_f32(*(float32x2_t *)((char *)this + 24), v51);
          v55 = vadd_f32(*(float32x2_t *)((char *)this + 32), v51);
          v56 = v3[15];
          v57 = (float32x2_t *)(v56 + 48 * v49);
          v58 = v49 + 4;
          v3[16] = v49 + 4;
          *v57 = v52;
          v57[1] = (float32x2_t)0x3F80000000000000;
          v57[6] = v53;
          v57[7] = (float32x2_t)0x3F80000000000000;
          v57[12] = v54;
          v57[13] = (float32x2_t)0x3F80000000000000;
          v57[18] = v55;
          v57[19] = (float32x2_t)0x3F80000000000000;
          if (v3[12])
          {
            CA::OGL::Context::array_indices((uint64_t)v3, v49);
            v56 = v3[15];
            v58 = v3[16];
          }
          v59 = v56 + 48 * v58;
          *(_QWORD *)(v59 - 160) = 0x3C003C003C003C00;
          *(_QWORD *)(v59 - 112) = 0x3C003C003C003C00;
          *(_QWORD *)(v59 - 64) = 0x3C003C003C003C00;
          *(_QWORD *)(v59 - 16) = 0x3C003C003C003C00;
          v95 = 0uLL;
          if (*((_QWORD *)this + 25))
            CA::OGL::MaskCorners::corner_contents_texcoord(this, i, v101.f32, (float *)v95.i32);
          else
            CA::OGL::MaskCorners::corner_circle_texcoord((uint64_t)this, i, (const float *)&v102, (float *)v95.i32);
          v60 = v95;
          v61 = v3[15] + 48 * v3[16];
          *(_QWORD *)(v61 - 176) = v95.i64[0];
          *(_DWORD *)(v61 - 128) = v60.i32[2];
          *(_DWORD *)(v61 - 124) = v60.i32[1];
          *(_QWORD *)(v61 - 80) = v60.i64[1];
          *(_DWORD *)(v61 - 32) = v60.i32[0];
          *(_DWORD *)(v61 - 28) = v60.i32[3];
          v103 = 0;
          v105[0] = 0;
          v92 = 0;
          v93 = 0;
          CA::OGL::MaskCorners::corner_quad((float32x2_t *)this, i, &v103, v105, &v93, &v92);
          *(float32x2_t *)(v61 - 168) = v103;
          *(float32x2_t *)(v61 - 120) = v105[0];
          *(float32x2_t *)(v61 - 72) = v93;
          *(float32x2_t *)(v61 - 24) = v92;
          if (!*((_QWORD *)this + 25))
          {
            v62 = v3[15] + 48 * *((unsigned int *)v3 + 32) - 192;
            v63 = CA::OGL::MaskCorners::finish(CA::OGL::ImagingNode *)::quad_inner_vertex_index[i];
            v64 = (__int128 *)(v62 + 48 * (((_BYTE)v63 + 1) & 3));
            v65 = *v64;
            v66 = v64[2];
            v67 = (_OWORD *)(v62 + 48 * v63);
            v67[1] = v64[1];
            v67[2] = v66;
            *v67 = v65;
          }
        }
      }
    }
    CA::OGL::Context::unbind_surface(v3, *((_QWORD *)this + 24), 1);
    (*(void (**)(_QWORD *, _OWORD *, _QWORD))(*v3 + 520))(v3, v87, 0);
    goto LABEL_81;
  }
  v4 = 0;
  *(_BYTE *)(v3[2] + 481) |= 1u;
  v86 = *((_BYTE *)this + 244);
  v5 = 1;
  while (1)
  {
    v105[0] = 0;
    v94[0] = 0uLL;
    v6 = v3[2];
    if ((v5 & 1) != 0)
    {
      *(_BYTE *)(v6 + 16) = 1;
      *(_BYTE *)(v3[2] + 480) = 8;
      v7 = (uint32x2_t *)*((_QWORD *)this + 25);
      if (v7)
      {
        v8 = CA::OGL::Context::bind_image((uint64_t)v3, 0, v7, (double *)*((unsigned int *)this + 60), 1u, 1, 0, 0, 0.0, v94, 0);
LABEL_12:
        v10 = v8;
        goto LABEL_26;
      }
      v11 = *((_DWORD *)this + 1);
      v12 = *(_DWORD *)this <= (signed int)v11 ? v11 : *(unsigned int *)this;
      if ((*((_BYTE *)this + 244) & 3) != 0)
        (*(void (**)(_QWORD *, _QWORD, uint64_t, _QWORD, _QWORD, float32x2_t *))(*v3 + 464))(v3, 0, v12, 0, 0, v105);
      else
        (*(void (**)(_QWORD *, _QWORD, uint64_t, _QWORD, _QWORD, float32x2_t *))(*v3 + 456))(v3, 0, v12, 0, 0, v105);
    }
    else
    {
      *(_BYTE *)(v6 + 16) = 6;
      *(_BYTE *)(v3[2] + 480) = 12;
      CA::OGL::Context::bind_surface((uint64_t)v3, *((_QWORD *)this + 24), 0, 0, 0, 0.0);
      v9 = (uint32x2_t *)*((_QWORD *)this + 25);
      if (v9)
      {
        v8 = CA::OGL::Context::bind_image((uint64_t)v3, 1, v9, (double *)*((unsigned int *)this + 60), 1u, 1, 0, 0, 0.0, v94, 0);
        goto LABEL_12;
      }
      v13 = *((_DWORD *)this + 1);
      v14 = *(_DWORD *)this <= (signed int)v13 ? v13 : *(unsigned int *)this;
      if ((*((_BYTE *)this + 244) & 3) != 0)
        (*(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD, _QWORD, float32x2_t *))(*v3 + 464))(v3, 1, v14, 0, 0, v105);
      else
        (*(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD, _QWORD, float32x2_t *))(*v3 + 456))(v3, 1, v14, 0, 0, v105);
    }
    v10 = 0;
LABEL_26:
    v15 = *(_QWORD *)(v3[29] + 8);
    *(_QWORD *)&v98 = v3;
    *((_QWORD *)&v98 + 1) = v15;
    memset(v99, 0, 40);
    BYTE1(v99[1]) = 1;
    CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)&v98);
    v95 = 0uLL;
    if ((*((_BYTE *)this + 244) & 8) != 0)
    {
      v16 = v105[0].f32[0] + (float)((float)(v105[0].f32[1] - v105[0].f32[0]) * 0.5);
      *(_BYTE *)(v3[2] + v4 + 19) = 5;
      v17 = v105[0].i32[0];
      v18 = v3[2];
      *(_DWORD *)(v18 + 368) = v105[0].i32[0];
      *(_DWORD *)(v18 + 372) = v17;
      *(float *)(v18 + 376) = v16;
      *(float *)(v18 + 380) = v16;
    }
LABEL_45:
    if (CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)&v98, (int32x2_t *)&v95))
    {
      v19 = 0;
      while (1)
      {
        if (!*((_BYTE *)this + v19 + 184))
        {
          if (*((_DWORD *)v3 + 23))
            v20 = 6;
          else
            v20 = 4;
          v21 = v3[16];
          if ((unint64_t)(v21 + 4) > v3[17] || (v22 = v3[14]) != 0 && v3[13] + v20 > v22)
          {
            *((_WORD *)v3 + 408) |= 0x20u;
            CA::OGL::Context::array_flush((uint64_t)v3);
            v21 = 0;
            v3[12] = (char *)v3 + 818;
            *(_OWORD *)(v3 + 13) = xmmword_18474E060;
          }
          v23 = *(float32x2_t *)((char *)this + 8 * v19 + 40);
          v24 = vadd_f32(*(float32x2_t *)((char *)this + 8), v23);
          v25 = vadd_f32(*(float32x2_t *)((char *)this + 16), v23);
          v26 = vadd_f32(*(float32x2_t *)((char *)this + 24), v23);
          v27 = vadd_f32(*(float32x2_t *)((char *)this + 32), v23);
          v28 = v3[15];
          v29 = (float32x2_t *)(v28 + 48 * v21);
          v30 = v21 + 4;
          v3[16] = v21 + 4;
          *v29 = v24;
          v29[1] = (float32x2_t)0x3F80000000000000;
          v29[6] = v25;
          v29[7] = (float32x2_t)0x3F80000000000000;
          v29[12] = v26;
          v29[13] = (float32x2_t)0x3F80000000000000;
          v29[18] = v27;
          v29[19] = (float32x2_t)0x3F80000000000000;
          if (v3[12])
          {
            CA::OGL::Context::array_indices((uint64_t)v3, v21);
            v28 = v3[15];
            v30 = v3[16];
          }
          v31 = v28 + 48 * v30;
          *(_QWORD *)(v31 - 160) = 0x3C003C003C003C00;
          *(_QWORD *)(v31 - 112) = 0x3C003C003C003C00;
          *(_QWORD *)(v31 - 64) = 0x3C003C003C003C00;
          *(_QWORD *)(v31 - 16) = 0x3C003C003C003C00;
          v103 = 0;
          v104 = 0;
          if (*((_QWORD *)this + 25))
          {
            CA::OGL::MaskCorners::corner_contents_texcoord(this, v19, v94[0].f32, (float *)&v103);
            if ((v5 & 1) == 0)
              goto LABEL_43;
          }
          else
          {
            CA::OGL::MaskCorners::corner_circle_texcoord((uint64_t)this, v19, (const float *)v105, (float *)&v103);
            if ((v5 & 1) == 0)
            {
LABEL_43:
              v92 = 0;
              v93 = 0;
              v90 = 0;
              v91 = 0;
              CA::OGL::MaskCorners::corner_quad((float32x2_t *)this, v19, &v93, &v92, &v91, &v90);
              v35 = v3[15] + 48 * v3[16];
              *(float32x2_t *)(v35 - 176) = v93;
              *(float32x2_t *)(v35 - 128) = v92;
              *(float32x2_t *)(v35 - 80) = v91;
              *(float32x2_t *)(v35 - 32) = v90;
              v36 = v103;
              v37 = v104;
              v38 = v3[15] + 48 * v3[16];
              *(float32x2_t *)(v38 - 168) = v103;
              *(_DWORD *)(v38 - 120) = v37;
              *(_DWORD *)(v38 - 116) = v36.i32[1];
              *(_QWORD *)(v38 - 72) = v37;
              *(_DWORD *)(v38 - 24) = v36.i32[0];
              *(_DWORD *)(v38 - 20) = HIDWORD(v37);
              goto LABEL_44;
            }
          }
          v32 = v103;
          v33 = v104;
          v34 = v3[15] + 48 * v3[16];
          *(float32x2_t *)(v34 - 176) = v103;
          *(_DWORD *)(v34 - 128) = v33;
          *(_DWORD *)(v34 - 124) = v32.i32[1];
          *(_QWORD *)(v34 - 80) = v33;
          *(_DWORD *)(v34 - 32) = v32.i32[0];
          *(_DWORD *)(v34 - 28) = HIDWORD(v33);
        }
LABEL_44:
        if (++v19 == 4)
          goto LABEL_45;
      }
    }
    v39 = *(void (**)(_QWORD *, _OWORD *, uint64_t))(*v3 + 520);
    if ((v5 & 1) == 0)
      break;
    v39(v3, v10, 0);
    v5 = 0;
    v4 = 1;
    if ((v86 & 4) != 0)
      goto LABEL_81;
  }
  v39(v3, v10, 1);
  CA::OGL::Context::unbind_surface(v3, *((_QWORD *)this + 24), 0);
LABEL_81:
  *(_BYTE *)(v3[2] + 481) &= ~1u;
  v68 = v3[2];
  *(_BYTE *)(v68 + 480) = *(_BYTE *)(v3[29] + 68);
  *(_BYTE *)(v68 + 16) = 0;
  if (byte_1ECDC6A61)
  {
    v100 = 0;
    v98 = 0u;
    memset(v99, 0, sizeof(v99));
    CA::OGL::copy_gstate((uint64_t)&v98, v3[29]);
    *((_QWORD *)&v99[0] + 1) = &CA::identity_transform;
    v70 = 0;
    *(_QWORD *)&v98 = CA::OGL::Context::set_gstate((uint64_t)v3, (uint64_t)&v98);
    v72 = (int *)((char *)this + 116);
    v73.i32[0] = 1073741822;
    v89 = v73;
    v74 = (int32x4_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL);
    v88 = (int8x16_t)v74;
    do
    {
      if (!*((_BYTE *)this + v70 + 184))
      {
        v75 = *((_QWORD *)this + 24);
        v76 = 2155872384;
        if (v75)
        {
          v77 = *(_DWORD *)(v75 + 68);
          if ((v77 & 0x4000) != 0)
            v78 = -2147450752;
          else
            v78 = -2139094912;
          if ((v77 & 0x800) != 0)
            v76 = 8388736;
          else
            v76 = v78;
        }
        v79 = *(v72 - 1);
        if (v79 <= *v72)
          v80 = *v72;
        else
          v80 = *(v72 - 1);
        v74.i32[0] = v80;
        v81 = *(_QWORD *)(v72 - 3);
        v82.i64[0] = (int)v81;
        v82.i64[1] = SHIDWORD(v81);
        v85 = (int8x16_t)vcvtq_f64_s64(v82);
        v83 = (double)v79;
        v84 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v74, v89), 0), v88, v85);
        v85.i64[0] = 0x7FEFFFFFFFFFFFFFLL;
        if (v80 <= 1073741822)
          *(double *)v85.i64 = (double)*v72;
        else
          v83 = 1.79769313e308;
        v95 = v84;
        v96 = v83;
        v97 = v85.i64[0];
        v94[0].i64[0] = (uint64_t)&v95;
        v94[0].i64[1] = *((_QWORD *)&v99[0] + 1);
        memset(&v94[1], 0, 32);
        CA::OGL::fill_color_rect((uint64_t)v3, (uint64_t)v94, (double *)v76, v71, 0.0, v85);
      }
      ++v70;
      v72 += 4;
    }
    while (v70 != 4);
    CA::OGL::Context::set_gstate((uint64_t)v3, *(_QWORD *)v3[29]);
  }
  v69 = *((_QWORD *)this + 24);
  if (v69)
    CA::OGL::Context::release_surface((uint64_t)v3, v69);
}

uint64_t CA::OGL::MetalContext::needs_destination_group(CA::OGL::MetalContext *this)
{
  return 0;
}

uint64_t CA::OGL::MaskCorners::corner_circle_texcoord(uint64_t this, int a2, const float *a3, float *a4)
{
  int v4;
  float v5;
  int v6;
  float v7;
  float v8;
  uint64_t v9;

  v4 = *(_DWORD *)a3;
  v5 = *a3 + (float)((float)(a3[1] - *a3) * 0.5);
  *a4 = *a3;
  v6 = *(_DWORD *)a3;
  a4[1] = *a3;
  v7 = *a3 + (float)(*(float *)(this + 176) * (float)(v5 - *a3));
  a4[2] = v7;
  v8 = *a3 + (float)(*(float *)(this + 180) * (float)(v5 - *a3));
  a4[3] = v8;
  if ((*(_BYTE *)(this + 244) & 8) != 0)
  {
    v9 = this + 8 * a2;
    v7 = *a3 + (float)((float)((float)(v5 - *a3) * *(float *)(v9 + 72)) * *(float *)(this + 176));
    a4[2] = v7;
    v8 = *a3 + (float)((float)((float)(v5 - *a3) * *(float *)(v9 + 76)) * *(float *)(this + 180));
    a4[3] = v8;
  }
  if ((a2 & 1) != 0)
  {
    *a4 = v7;
    *((_DWORD *)a4 + 2) = v4;
  }
  if (a2 >= 2)
  {
    a4[1] = v8;
    *((_DWORD *)a4 + 3) = v6;
  }
  return this;
}

float32x2_t CA::OGL::MaskCorners::corner_quad(float32x2_t *a1, int a2, float32x2_t *a3, float32x2_t *a4, float32x2_t *a5, float32x2_t *a6)
{
  __int32 v6;
  int v7;
  int v8;
  int32x2_t v9;
  float32x2_t v10;
  int v11;
  float32x2_t v12;
  float32x2_t result;

  v6 = a1->i32[1];
  if (a1[4].f32[1] > a1[1].f32[1])
    v7 = a1->i32[1];
  else
    v7 = -v6;
  if ((a2 & 1) != 0)
    v8 = a1->i32[0] + 3;
  else
    v8 = 1;
  v9 = (int32x2_t)a1[2 * a2 + 13];
  v10 = a1[a2 + 5];
  *a3 = a1[1];
  *a4 = a1[2];
  *a5 = a1[3];
  *a6 = a1[4];
  if (a1[30].i8[5])
  {
    a3->f32[1] = (float)v7 - a3->f32[1];
    a4->f32[1] = (float)v7 - a4->f32[1];
    a5->f32[1] = (float)v7 - a5->f32[1];
    a6->f32[1] = (float)v7 - a6->f32[1];
  }
  v11 = v6 + 3;
  if (a2 <= 1)
    v11 = 1;
  v12 = vadd_f32(v10, vcvt_f32_s32(vsub_s32((int32x2_t)__PAIR64__(v11, v8), v9)));
  *a3 = vadd_f32(*a3, v12);
  *a4 = vadd_f32(*a4, v12);
  *a5 = vadd_f32(*a5, v12);
  result = vadd_f32(*a6, v12);
  *a6 = result;
  return result;
}

uint64_t CA::OGL::cache_node(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  unsigned int v10;

  v8 = *(_QWORD *)(a1 + 72);
  if (v8)
    *(_QWORD *)(a1 + 72) = *(_QWORD *)v8;
  else
    v8 = x_heap_malloc_small_(*(uint64_t **)(a1 + 56), 0xF8uLL);
  v9 = *(_DWORD *)(*(_QWORD *)(a2 + 24) + 40);
  *(_WORD *)(v8 + 212) = *(_WORD *)(v8 + 212) & 0xC000 | 1;
  v10 = *(_DWORD *)(v8 + 220) & 0xFC000000;
  *(_DWORD *)(v8 + 216) = *(_DWORD *)(v8 + 216) & 0xFFC00000 | 0xF;
  *(_DWORD *)(v8 + 220) = v10;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 192) = 0;
  *(_QWORD *)(v8 + 200) = 0;
  *(_DWORD *)(v8 + 208) = 0;
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a4;
  *(_QWORD *)(v8 + 32) = 0;
  *(_DWORD *)(v8 + 136) = -1;
  *(_QWORD *)v8 = &off_1E1595C50;
  *(_QWORD *)(v8 + 8) = a1;
  *(_BYTE *)(v8 + 224) = *(_BYTE *)(v8 + 224) & 0xFE | ((v9 & 0x800000) != 0);
  *(_QWORD *)(v8 + 228) = *a3;
  *(_DWORD *)(a4 + 220) |= 0x400000u;
  CA::OGL::copy_gstate(v8 + 56, a4 + 56);
  *(_DWORD *)(v8 + 220) = *(_DWORD *)(v8 + 220) & 0xFFCE0000 | *(_DWORD *)(a4 + 220) & 0x200000 | 0x101000;
  return v8;
}

float CA::OGL::copy_gstate(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  float result;
  __int16 v4;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v2 = *(unsigned __int8 *)(a2 + 68) | (*(unsigned __int8 *)(a1 + 69) << 8);
  *(_WORD *)(a1 + 68) = v2;
  result = *(float *)(a2 + 64);
  *(float *)(a1 + 64) = result;
  v4 = *(_WORD *)(a2 + 68) & 0x100 | v2 & 0xFEFF;
  *(_WORD *)(a1 + 68) = v4;
  *(_WORD *)(a1 + 68) = v4 & 0xFBFF | *(_WORD *)(a2 + 68) & 0x400;
  return result;
}

void CA::OGL::render_subclass(CA::OGL::Renderer &,CA::OGL::Layer const*)::visitor::visit_subclass(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const double *v14;
  float64x2_t v15;
  int64x2_t v16;
  int64x2_t v17;
  float64x2_t v18;
  int64x2_t v19;
  float64x2_t *v20;
  uint64_t v21;
  int8x16_t v22;
  double *v23;
  CA::ColorMatrix *v24;
  int v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  float32x2_t v29;
  float32x2_t v30;
  uint64_t v31;
  float64x2_t *v32;
  int32x4_t v33;
  int32x4_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  int8x16_t v39;
  float64x2_t v40;
  int64x2_t v41;
  int8x16_t v42;
  float64x2_t v43;
  int32x4_t v44;
  int32x4_t v45;
  uint64_t v46;
  int v47;
  int v48;
  BOOL v49;
  int32x2_t v50;
  int32x2_t *v51;
  int32x2_t *v52;
  int32x2_t v53;
  uint32x2_t v54;
  int32x2_t v55;
  uint32x2_t v56;
  __int128 v57;
  int32x2_t v58;
  uint32x2_t v59;
  uint32x2_t v60;
  uint32x2_t v61;
  int32x2_t v62;
  int8x16_t v63;
  int32x2_t v64;
  uint32x2_t v65;
  uint64_t v66;
  double v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  float v72;
  __int16 v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int16 v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  float v85;
  uint64_t v86;
  double *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int32x2_t *v96;
  uint64_t v97;
  BOOL v98;
  int32x2_t v99;
  uint32x2_t v100;
  uint32x2_t v101;
  int32x2_t v102;
  int32x2_t v103;
  int32x2_t v104;
  uint32x2_t v105;
  uint64_t v106;
  uint64_t v107;
  int32x2_t v108;
  float32x2_t v109;
  float32x2_t v110;
  float16x4_t v111;
  uint64_t v112;
  int v113;
  int v114;
  __int32 v115;
  __int32 v116;
  uint64_t v117;
  unint64_t v118;
  __int16 v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  _QWORD *v126;
  __int16 v127;
  __int16 v128;
  CA::ColorMatrix *v129;
  __int16 v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  float v139;
  uint64_t v140;
  float32x2_t *v141;
  uint64_t v142;
  int v148;
  _BOOL4 v149;
  uint64_t v150;
  os_unfair_lock_s *v151;
  unint64_t v152;
  unsigned int v153;
  int32x2_t v154;
  float64x2_t v155;
  float32x2_t v156;
  float32x2_t v157;
  float32x2_t v158;
  float32x2_t *v159;
  float32x2_t v160;
  uint64_t v161;
  int64x2_t v162;
  float32x2_t *v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint32x2_t *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  float64x2_t v176;
  float v178;
  float64x2_t v180;
  uint64_t v181;
  uint64_t v182;
  __int16 v183;
  __int16 v184;
  double *v185;
  int32x4_t v186;
  int32x4_t v187;
  uint64_t v188;
  int v189;
  int8x16_t v190;
  int64x2_t v191;
  int8x16_t v192;
  int8x16_t v193;
  double v194;
  uint64_t v195;
  char v196;
  os_unfair_lock_s *v197;
  uint64_t v198;
  uint64_t v199;
  __int16 v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  float64x2_t v204;
  float64x2_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  float64x2_t v209;
  float64x2_t v210;
  unint64_t v211;
  uint64_t *v212;
  float64x2_t v213;
  double v214;
  int32x2_t v215;
  unint64_t v216;
  double v217;
  _QWORD v218[2];
  __int128 v219;
  __int128 v220;
  int8x16_t v221;
  uint64_t v222;
  double v223;
  char v224;
  char v225;
  __int128 v226;
  int8x16_t v227;
  _OWORD v228[2];
  float64x2_t v229;
  float64x2_t v230;
  __int128 v231;
  float64x2_t v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  _OWORD v248[2];
  _OWORD v249[2];
  char *v250;
  _OWORD v251[5];
  uint64_t v252;

  v252 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(uint64_t **)(*(_QWORD *)(v1 + 24) + 128);
  if (v2 && (v3 = *v2) != 0)
  {
    if (*(_BYTE *)(v3 + 12) == 3)
      v4 = v3;
    else
      v4 = 0;
  }
  else
  {
    v4 = 0;
  }
  if ((*(_BYTE *)(v4 + 13) & 0x10) == 0)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 256);
    if (v5)
    {
      v6 = *(uint64_t **)(a1 + 8);
      v7 = (os_unfair_lock_s *)(v5 + 36);
      os_unfair_lock_lock((os_unfair_lock_t)(v5 + 36));
      v8 = *(_QWORD *)(v5 + 40);
      if (!v8)
      {
LABEL_185:
        os_unfair_lock_unlock(v7);
        return;
      }
      v9 = (os_unfair_lock_s *)(v8 + 40);
      os_unfair_lock_lock((os_unfair_lock_t)(v8 + 40));
      v11 = *(_QWORD *)(v8 + 64);
      v10 = *(_QWORD *)(v8 + 72);
      if (v11 == v10)
        goto LABEL_184;
      v12 = *v6;
      while (*(_QWORD *)v11 != *(_QWORD *)(v5 + 24))
      {
        v11 += 168;
        if (v11 == v10)
          goto LABEL_184;
      }
      v13 = *(_QWORD *)(v12 + 232);
      v204 = *(float64x2_t *)(v11 + 16);
      v205 = *(float64x2_t *)(v11 + 32);
      v229 = 0u;
      v230 = 0u;
      CA::Render::BackdropLayer::get_backdrop_bounds((CA::Render::BackdropLayer *)v4, *(const CA::Render::Layer **)(v1 + 24), (CA::Rect *)&v229);
      v15 = v230;
      v16 = vclezq_f64(v230);
      v212 = v6;
      if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v16, 1), (int8x16_t)v16).u64[0] & 0x8000000000000000) == 0)
      {
        v17 = vclezq_f64(v205);
        if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v17, 1), (int8x16_t)v17).u64[0] & 0x8000000000000000) != 0
          || (v18 = vmaxnmq_f64(v229, v204),
              v15 = vsubq_f64(vminnmq_f64(vaddq_f64(v229, v230), vaddq_f64(v204, v205)), v18),
              v19 = vclezq_f64(v15),
              (vorrq_s8((int8x16_t)vdupq_laneq_s64(v19, 1), (int8x16_t)v19).u64[0] & 0x8000000000000000) != 0))
        {
          v230 = 0uLL;
          v213 = 0u;
LABEL_21:
          v20 = *(float64x2_t **)(v13 + 24);
          v21 = CA::OGL::transform_filter_bits(v20, v14, 1.0, 1.0);
          v22.i64[0] = 1.0;
          v209 = v229;
          v25 = CA::OGL::rect_filter_bits(v20, v21, v23, v229, v213, v22, 1.0);
          v246 = 0u;
          v247 = 0u;
          v199 = *(unsigned __int16 *)(v13 + 36);
          v198 = *(unsigned int *)(v13 + 32);
          v200 = *(_WORD *)(v13 + 38);
          if (*(_BYTE *)(v11 + 160)
            && (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 184))(v12, 27))
          {
            v201 = v25;
            v202 = v13;
            v228[0] = v209;
            v228[1] = v213;
            v27 = *v212;
            if (!*(_QWORD *)(*(_QWORD *)(*v212 + 248) + 8))
            {
              v74 = *(_QWORD *)(v8 + 560);
              if (v74)
              {
                v75 = *(_DWORD *)(v74 + 16);
                if (v75)
                {
                  v76 = *(_QWORD *)(v74 + 24);
                  if ((*(_BYTE *)(v76 + 13) & 1) != 0 && v75 == 1)
                  {
                    v77 = *(_QWORD *)(v27 + 232);
                    if (*(_BYTE *)(v77 + 68) == 3
                      && *(float *)(*(_QWORD *)(v1 + 24) + 28) == 0.0
                      && *(_DWORD *)(v76 + 24) == 101)
                    {
                      v78 = *(_QWORD *)(v27 + 176);
                      if (!v78
                        || (*(_DWORD *)(v212[1] + 1064) & 4) != 0
                        || (LOBYTE(v234) = 0,
                            (*(void (**)(uint64_t, void (*)(uint64_t, uint64_t, uint64_t, _BYTE *), __int128 *))(*(_QWORD *)v78 + 80))(v78, CA::OGL::render_in_place_backdrop_with_color_matrix(CA::OGL::Renderer &,CA::OGL::Layer const*,CA::Render::BackdropGroup *,CA::Rect)::$_0::__invoke, &v234), !(_BYTE)v234))
                      {
                        memset(v251, 0, sizeof(v251));
                        CA::OGL::get_filter_color_matrix(*(CA::OGL **)(v76 + 40), (const CA::Render::Filter *)v251, v24);
                        *(_QWORD *)&v234 = __PAIR64__(DWORD1(v251[1]), v251[0]);
                        *((_QWORD *)&v234 + 1) = __PAIR64__(HIDWORD(v251[3]), DWORD2(v251[2]));
                        *(_QWORD *)&v235 = __PAIR64__(DWORD2(v251[1]), DWORD1(v251[0]));
                        *((_QWORD *)&v235 + 1) = __PAIR64__(v251[4], HIDWORD(v251[2]));
                        *(_QWORD *)&v236 = __PAIR64__(HIDWORD(v251[1]), DWORD2(v251[0]));
                        *((_QWORD *)&v236 + 1) = __PAIR64__(DWORD1(v251[4]), v251[3]);
                        *(_QWORD *)&v237 = __PAIR64__(v251[2], HIDWORD(v251[0]));
                        *((_QWORD *)&v237 + 1) = __PAIR64__(DWORD2(v251[4]), DWORD1(v251[3]));
                        *(_QWORD *)&v238 = __PAIR64__(DWORD1(v251[2]), v251[1]);
                        *((_QWORD *)&v238 + 1) = __PAIR64__(HIDWORD(v251[4]), DWORD2(v251[3]));
                        v250 = 0;
                        memset(v249, 0, sizeof(v249));
                        memset(v248, 0, sizeof(v248));
                        *(_OWORD *)((char *)v248 + 8) = *(_OWORD *)(v77 + 8);
                        v79 = *(_QWORD *)(v77 + 32);
                        *((_QWORD *)&v248[1] + 1) = *(_QWORD *)(v77 + 24);
                        *(_QWORD *)&v249[0] = v79;
                        *(_OWORD *)((char *)v249 + 8) = *(_OWORD *)(v77 + 40);
                        v80 = *(_WORD *)(v77 + 68);
                        LODWORD(v250) = *(_DWORD *)(v77 + 64);
                        *((_QWORD *)&v249[1] + 1) = &v234;
                        HIDWORD(v250) = v80 & 0x500 | 0x2A;
                        *(_QWORD *)&v248[0] = CA::OGL::Context::set_gstate(v27, (uint64_t)v248);
                        *(_QWORD *)(*(_QWORD *)(v27 + 16) + 8) = *(_QWORD *)&v249[0];
                        v81 = *(_QWORD *)(v27 + 16);
                        if (*(unsigned __int8 *)(v81 + 480) >= 2u)
                          *(_BYTE *)(v81 + 481) |= 1u;
                        v82 = (*(unsigned __int16 *)(v1 + 40) >> 6);
                        *(_QWORD *)&v242 = v228;
                        *((_QWORD *)&v242 + 1) = *((_QWORD *)&v248[1] + 1);
                        LODWORD(v243) = 0;
                        DWORD1(v243) = v82;
                        *((_QWORD *)&v243 + 1) = 0;
                        v244 = 0uLL;
                        v83 = *(_QWORD *)(v1 + 24);
                        v84 = *(_QWORD *)(v83 + 128);
                        v85 = 0.0;
                        if (v84)
                        {
                          v86 = *(_QWORD *)(v84 + 56);
                          if (v86)
                          {
                            v87 = (double *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v86 + 80))(v86, 0.0);
                            v88 = *(_QWORD *)(v1 + 24);
                            v89 = *(_QWORD *)(v88 + 128);
                            if (v89)
                            {
                              v90 = *(_QWORD *)(v89 + 64);
                              if (v90)
                              {
                                if (*(_DWORD *)(v90 + 16) > 3u)
                                {
                                  v180 = vsubq_f64(*(float64x2_t *)(v90 + 40), *(float64x2_t *)(v90 + 24));
                                  v231 = *(_OWORD *)(v90 + 24);
                                  v232 = v180;
                                }
                                else
                                {
                                  v231 = 0u;
                                  v232 = 0u;
                                }
                              }
                              else
                              {
                                __asm { FMOV            V0.2D, #0.5 }
                                v231 = _Q0;
                                v232 = 0uLL;
                              }
                              v178 = *(float *)(v89 + 228);
                            }
                            else
                            {
                              __asm { FMOV            V0.2D, #0.5 }
                              v231 = _Q0;
                              v232 = 0uLL;
                              v178 = 0.0;
                            }
                            CA::OGL::fill_corner_rect(v27, (double **)&v242, v87, (double *)&v231, *(_DWORD *)(*(_QWORD *)(v1 + 16) + 24) & 1, (*(_QWORD *)(v88 + 40) >> 41) & 1, 15, v178, v178);
                            goto LABEL_194;
                          }
                          v85 = *(float *)(v84 + 228);
                        }
                        CA::OGL::fill_round_rect(v27, (float64x2_t **)&v242, (double *)(*(_WORD *)(v83 + 38) & 0xF), (double *)(*(_DWORD *)(v83 + 40) & 3), v85, v85);
LABEL_194:
                        *(_BYTE *)(*(_QWORD *)(v27 + 16) + 481) &= ~1u;
                        CA::OGL::Context::set_gstate(v27, **(_QWORD **)(v27 + 232));
                        goto LABEL_184;
                      }
                    }
                  }
                }
              }
            }
            v28 = 0;
            v29 = vcvt_f32_f64(*(float64x2_t *)(v11 + 16));
            v30 = vadd_f32(vcvt_f32_f64(*(float64x2_t *)(v11 + 32)), v29);
            *(float32x2_t *)&v246 = v29;
            *((_QWORD *)&v246 + 1) = __PAIR64__(v29.u32[1], v30.u32[0]);
            v29.i32[1] = v30.i32[1];
            *(float32x2_t *)&v247 = v30;
            *((float32x2_t *)&v247 + 1) = v29;
            v31 = v202;
            v32 = *(float64x2_t **)(v202 + 24);
            do
            {
              CA::Transform::apply_to_point2(v32, (double *)((char *)&v246 + v28), (float *)v24);
              v28 += 8;
            }
            while (v28 != 32);
            v35 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)((char *)&v246 + 8), *(float32x2_t *)&v246), *(int8x8_t *)&v246, *(int8x8_t *)((char *)&v246 + 8));
            *(int8x8_t *)v33.i8 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)&v246, *(float32x2_t *)((char *)&v246 + 8)), *(int8x8_t *)&v246, *(int8x8_t *)((char *)&v246 + 8));
            v36 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)((char *)&v247 + 8), *(float32x2_t *)&v247), *(int8x8_t *)&v247, *(int8x8_t *)((char *)&v247 + 8));
            *(int8x8_t *)v34.i8 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)&v247, *(float32x2_t *)((char *)&v247 + 8)), *(int8x8_t *)&v247, *(int8x8_t *)((char *)&v247 + 8));
            v37 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v36, v35), (int8x8_t)v35, (int8x8_t)v36);
            *(int8x8_t *)v33.i8 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v33.i8, *(float32x2_t *)v34.i8), *(int8x8_t *)v33.i8, *(int8x8_t *)v34.i8);
            v38 = vsub_f32(*(float32x2_t *)v33.i8, v37);
            v33.i32[0] = COERCE_UNSIGNED_INT(vaddv_f32(v38)) & 0x7FFFFFFF;
            v34.i32[0] = 2139095040;
            v39 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v34, v33), 0);
            v40 = (float64x2_t)vbslq_s8(v39, (int8x16_t)vcvtq_f64_f32(v38), (int8x16_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL));
            v41 = vceqzq_f64(v40);
            if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v41, 1), (int8x16_t)v41).u64[0] & 0x8000000000000000) != 0
              || (v42 = vorrq_s8((int8x16_t)vcltzq_f64(v40), (int8x16_t)vcgezq_f64(v40)),
                  (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v42), 1), v42).u64[0] & 0x8000000000000000) != 0))
            {
              v227 = 0uLL;
              v45 = 0uLL;
            }
            else
            {
              v43 = (float64x2_t)vbslq_s8(v39, (int8x16_t)vcvtq_f64_f32(v37), (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL));
              v44 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v43, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
              v45 = vuzp1q_s32(v44, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v43, v40), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v44));
              v227 = (int8x16_t)v45;
            }
            v25 = v201;
            if ((v201 & 9) != 0)
            {
              v47 = v45.i32[2];
              if (v45.i32[2] <= v45.i32[3])
                v48 = v45.i32[3];
              else
                v48 = v45.i32[2];
              if (v45.i32[2] >= v45.i32[3])
                v47 = v45.i32[3];
              v49 = v48 > 1073741822 || v47 < 1;
              if (!v49)
              {
                v227 = (int8x16_t)vaddq_s32(v45, (int32x4_t)xmmword_18474E100);
                v50 = vcgt_s32((int32x2_t)0x100000001, vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8(v227, v227, 8uLL)));
                if (((v50.i32[1] | v50.i32[0]) & 1) != 0)
                  v227.i64[1] = 0;
              }
            }
            v226 = 0uLL;
            CA::Shape::get_bounds(*(_QWORD *)(*(_QWORD *)(v12 + 232) + 8), (int *)&v226);
            v51 = *(int32x2_t **)(v12 + 248);
            if (v51)
              v52 = v51 + 4;
            else
              v52 = (int32x2_t *)(v12 + 184);
            v53 = *(int32x2_t *)((char *)&v226 + 8);
            v54 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *(int32x2_t *)((char *)&v226 + 8));
            if ((vpmax_u32(v54, v54).u32[0] & 0x80000000) == 0)
            {
              v55 = v52[1];
              v56 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v55);
              if ((vpmax_u32(v56, v56).u32[0] & 0x80000000) != 0
                || (*(int32x2_t *)&v57 = vmax_s32(*(int32x2_t *)&v226, *v52),
                    v58 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)&v226, *(int32x2_t *)((char *)&v226 + 8)), vadd_s32(*v52, v55)), *(int32x2_t *)&v57), v59 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v58), (vpmax_u32(v59, v59).u32[0] & 0x80000000) != 0))
              {
                v53 = 0;
                *((_QWORD *)&v226 + 1) = 0;
              }
              else
              {
                *((int32x2_t *)&v57 + 1) = v58;
                v226 = v57;
                v53 = v58;
              }
            }
            v60 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, (int32x2_t)v227.u64[1]);
            if ((vpmax_u32(v60, v60).u32[0] & 0x80000000) == 0)
            {
              v61 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v53);
              if ((vpmax_u32(v61, v61).u32[0] & 0x80000000) != 0
                || (v62 = vadd_s32(*(int32x2_t *)&v226, v53),
                    *(int32x2_t *)v63.i8 = vmax_s32(*(int32x2_t *)v227.i8, *(int32x2_t *)&v226),
                    v64 = vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)v227.i8, (int32x2_t)v227.u64[1]), v62), *(int32x2_t *)v63.i8), v65 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v64), (vpmax_u32(v65, v65).u32[0] & 0x80000000) != 0))
              {
                v227.i64[1] = 0;
              }
              else
              {
                v63.u64[1] = (unint64_t)v64;
                v227 = v63;
              }
            }
            v197 = (os_unfair_lock_s *)(v8 + 40);
            v66 = (*(uint64_t (**)(uint64_t, uint64_t, int8x16_t *, uint64_t))(*(_QWORD *)v12 + 656))(v12, 1, &v227, 2063);
            v68 = v66;
            if (v66)
            {
              v207 = v66;
              v244 = 0u;
              v245 = 0u;
              v242 = 0u;
              v243 = 0u;
              v240 = 0u;
              v241 = 0u;
              v238 = 0u;
              v239 = 0u;
              v236 = 0u;
              v237 = 0u;
              v234 = 0u;
              v235 = 0u;
              v225 = 0;
              v70 = *(_QWORD *)(v12 + 16);
              v196 = *(_BYTE *)(v70 + 480);
              *(_QWORD *)(v70 + 8) = 0x3C003C003C003C00;
              v232 = 0u;
              v233 = 0u;
              v231 = 0u;
              CA::Shape::operator=((uint64_t)&v231, &v227);
              memset((char *)v251 + 8, 0, 64);
              v71 = *(_QWORD *)(v12 + 232);
              v251[2] = 0x3C003C003C003C00uLL;
              v251[3] = 0uLL;
              WORD2(v251[4]) = 1;
              *(_QWORD *)&v251[0] = 0;
              if (v71)
              {
                *(_OWORD *)((char *)v251 + 8) = *(_OWORD *)(v71 + 8);
                *((_QWORD *)&v251[1] + 1) = *(_QWORD *)(v71 + 24);
                v72 = *(float *)(v71 + 64);
                WORD2(v251[4]) = *(_WORD *)(v71 + 68) & 0x100 | 1;
                v73 = WORD2(v251[4]) | *(_WORD *)(v71 + 68) & 0x400;
              }
              else
              {
                v251[1] = 0uLL;
                v73 = 1025;
                v72 = 1.0;
              }
              *(float *)&v251[4] = v72;
              WORD2(v251[4]) = v73;
              *((_QWORD *)&v251[0] + 1) = &v231;
              *(_QWORD *)&v251[0] = CA::OGL::Context::set_gstate(v12, (uint64_t)v251);
              CA::OGL::Context::push_surface(v12, v207, 1u, 8, 0);
              *(_BYTE *)(*(_QWORD *)(v12 + 16) + 481) &= ~1u;
              *(_BYTE *)(*(_QWORD *)(v12 + 16) + 16) = 1;
              v224 = 0;
              v93 = *(_QWORD *)(v12 + 176);
              if (v93 && (*(_DWORD *)(v212[1] + 1064) & 4) == 0 && !v225)
              {
                memset(v249, 0, sizeof(v249));
                v248[1] = 0u;
                *(_QWORD *)&v248[0] = v12;
                *((_QWORD *)&v248[0] + 1) = &v231;
                LODWORD(v248[1]) = 1065353216;
                BYTE8(v249[1]) = 1;
                v250 = &v224;
              }
              v94 = (v69 - 1);
              if (v69 >= 1)
              {
                v95 = v12 + 818;
                v96 = (int32x2_t *)((unint64_t)(&v234 + v94) | 8);
                v97 = (v69 - 1);
                do
                {
                  if (v224)
                    v98 = 1;
                  else
                    v98 = v97 < v94;
                  if (v98)
                  {
                    *(_BYTE *)(*(_QWORD *)(v12 + 16) + 481) |= 1u;
                    *(_BYTE *)(*(_QWORD *)(v12 + 16) + 480) = 3;
                  }
                  v99 = (int32x2_t)vextq_s8(v227, v227, 8uLL).u64[0];
                  v100 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v99);
                  if ((vpmax_u32(v100, v100).u32[0] & 0x80000000) == 0)
                  {
                    v101 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *v96);
                    if ((vpmax_u32(v101, v101).u32[0] & 0x80000000) == 0)
                    {
                      v102 = v96[-1];
                      v103 = vmin_s32(vadd_s32(*(int32x2_t *)v227.i8, v99), vadd_s32(v102, *v96));
                      v215 = vmax_s32(*(int32x2_t *)v227.i8, v102);
                      v104 = vsub_s32(v103, v215);
                      v105 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v104);
                      if ((vpmax_u32(v105, v105).u32[0] & 0x80000000) == 0)
                      {
                        *(int32x2_t *)&v210.f64[0] = v103;
                        v106 = *((_QWORD *)&v242 + v97);
                        CA::OGL::Context::bind_surface(v12, v106, 0, 0, 0, 0.0);
                        *(_QWORD *)(v12 + 128) = 0;
                        *(_QWORD *)(v12 + 96) = v95;
                        *(_OWORD *)(v12 + 104) = xmmword_18474E060;
                        if (*(_QWORD *)(v12 + 136) <= 3uLL)
                        {
                          *(_WORD *)(v12 + 816) |= 0x20u;
                          CA::OGL::Context::array_flush(v12);
                          *(_QWORD *)(v12 + 128) = 0;
                          *(_QWORD *)(v12 + 96) = v95;
                          *(_OWORD *)(v12 + 104) = xmmword_18474E060;
                        }
                        CA::OGL::Context::array_rect((_QWORD *)v12, (float)v215.i32[0], (float)v215.i32[1], (float)SLODWORD(v210.f64[0]), (float)SHIDWORD(v210.f64[0]));
                        v107 = *(_QWORD *)(v12 + 120) + 48 * *(_QWORD *)(v12 + 128);
                        v108 = vsub_s32(v215, v102);
                        v109 = vcvt_f32_s32(v108);
                        v110 = vcvt_f32_s32(vadd_s32(v108, v104));
                        *(float32x2_t *)(v107 - 176) = v109;
                        *(_QWORD *)(v107 - 128) = __PAIR64__(v109.u32[1], v110.u32[0]);
                        *(float32x2_t *)(v107 - 80) = v110;
                        v109.i32[1] = v110.i32[1];
                        *(float32x2_t *)(v107 - 32) = v109;
                        CA::OGL::Context::array_flush(v12);
                        CA::OGL::Context::unbind_surface((_QWORD *)v12, v106, 0);
                      }
                    }
                  }
                  v96 -= 2;
                  v49 = v97-- <= 0;
                }
                while (!v49);
              }
              v111 = vcvt_f16_f32(*(float32x4_t *)(*(_QWORD *)(v1 + 24) + 16));
              v112 = *(_QWORD *)(v12 + 16);
              if (v111.u16[0] | (unint64_t)(v111.u16[1] << 16) | ((unint64_t)v111.u16[2] << 32) & 0xFFFFFFFFFFFFLL | ((unint64_t)v111.u16[3] << 48))
              {
                v216 = (unint64_t)v111.u16[3] << 48;
                v211 = (unint64_t)v111.u16[2] << 32;
                v206 = (unint64_t)v111.u16[1] << 16;
                v195 = v111.u16[0];
                *(_BYTE *)(v112 + 16) = 0;
                *(_BYTE *)(*(_QWORD *)(v12 + 16) + 481) |= 1u;
                *(_BYTE *)(*(_QWORD *)(v12 + 16) + 480) = 3;
                v113 = v227.i32[0];
                v114 = v227.i32[1];
                v115 = v227.i32[2];
                v116 = v227.i32[3];
                *(_QWORD *)(v12 + 128) = 0;
                *(_QWORD *)(v12 + 96) = v12 + 818;
                *(_OWORD *)(v12 + 104) = xmmword_18474E060;
                if (*(_QWORD *)(v12 + 136) <= 3uLL)
                {
                  *(_WORD *)(v12 + 816) |= 0x20u;
                  CA::OGL::Context::array_flush(v12);
                  *(_QWORD *)(v12 + 128) = 0;
                  *(_QWORD *)(v12 + 96) = v12 + 818;
                  *(_OWORD *)(v12 + 104) = xmmword_18474E060;
                }
                CA::OGL::Context::array_rect((_QWORD *)v12, (float)v113, (float)v114, (float)(v115 + v113), (float)(v116 + v114));
                v117 = *(_QWORD *)(v12 + 120) + 48 * *(_QWORD *)(v12 + 128);
                v118 = v216 | v211 | v206 | v195;
                *(_QWORD *)(v117 - 160) = v118;
                *(_QWORD *)(v117 - 112) = v118;
                *(_QWORD *)(v117 - 64) = v118;
                *(_QWORD *)(v117 - 16) = v118;
                CA::OGL::Context::array_flush(v12);
                v112 = *(_QWORD *)(v12 + 16);
              }
              v25 = v201;
              *(_BYTE *)(v112 + 480) = v196;
              v31 = v202;
              v68 = v207;
              if (v225)
                v119 = 0;
              else
                v119 = ~(*(_WORD *)(v12 + 816) << 10) & 0x800;
              *(_WORD *)(v207 + 75) = *(_WORD *)(v207 + 75) & 0xF7FF | v119;
              v120 = *(_QWORD *)(v8 + 560);
              if (v120)
              {
                v121 = *(unsigned int *)(v120 + 16);
                if ((_DWORD)v121)
                {
                  if ((*(_BYTE *)(*(_QWORD *)(v120 + 24) + 13) & 1) != 0)
                  {
LABEL_119:
                    LODWORD(v248[0]) = 0;
                    v124 = CA::OGL::prepare_filters((CA::Render::Update **)v212, (const CA::Render::LayerNode *)v1, (unsigned int *)v120, 1, (int *)v248, 1);
                    if (v124)
                    {
                      v125 = v124;
                      v126 = v124;
                      do
                      {
                        CA::OGL::emit_filter((CA::Render::Update **)v212, (uint64_t)v126, v1, (int *)v68, 0, 0, 0, 1.0, 1.0);
                        v127 = 0;
                        v128 = *(_WORD *)(v68 + 75);
                        if ((v128 & 0x800) != 0)
                        {
                          v129 = (CA::ColorMatrix *)v125[6];
                          if (v129)
                          {
                            if (CA::ColorMatrix::is_opaque_identity(v129))
                              v127 = 2048;
                            else
                              v127 = 0;
                          }
                          else
                          {
                            v127 = 0;
                          }
                        }
                        v130 = v128 & 0xF7FF | v127;
                        v68 = v207;
                        *(_WORD *)(v207 + 75) = v130;
                        v126 = (_QWORD *)*v126;
                      }
                      while (v126);
                      do
                      {
                        v131 = (_QWORD *)*v125;
                        CA::OGL::finalize_filter(v125);
                        v125 = v131;
                      }
                      while (v131);
                    }
                  }
                  else
                  {
                    v122 = 0;
                    while (v121 - 1 != v122)
                    {
                      v123 = *(_QWORD *)(v120 + 32 + 8 * v122++);
                      if ((*(_BYTE *)(v123 + 13) & 1) != 0)
                      {
                        if (v122 >= v121)
                          break;
                        goto LABEL_119;
                      }
                    }
                  }
                }
              }
              if (byte_1ECDC6A61)
              {
                v250 = 0;
                memset(v249, 0, sizeof(v249));
                memset(v248, 0, sizeof(v248));
                v181 = *(_QWORD *)(v12 + 232);
                *(_OWORD *)((char *)v248 + 8) = *(_OWORD *)(v181 + 8);
                v182 = *(_QWORD *)(v181 + 32);
                *(_OWORD *)((char *)v249 + 8) = *(_OWORD *)(v181 + 40);
                *((_QWORD *)&v249[1] + 1) = *(_QWORD *)(v181 + 56);
                v183 = *(unsigned __int8 *)(v181 + 68);
                WORD2(v250) = v183;
                v184 = *(_WORD *)(v181 + 68) & 0x100 | v183;
                LODWORD(v250) = *(_DWORD *)(v181 + 64);
                WORD2(v250) = v184;
                WORD2(v250) = v184 | *(_WORD *)(v181 + 68) & 0x400;
                *(_QWORD *)&v249[0] = v182;
                *((_QWORD *)&v248[1] + 1) = &CA::identity_transform;
                *(_QWORD *)&v248[0] = CA::OGL::Context::set_gstate(v12, (uint64_t)v248);
                if ((*(_DWORD *)(v68 + 68) & 0x800) != 0)
                  v188 = 8388736;
                else
                  v188 = 2155872384;
                if (v227.i32[2] <= v227.i32[3])
                  v189 = v227.i32[3];
                else
                  v189 = v227.i32[2];
                v186.i32[0] = 1073741822;
                v187.i32[0] = v189;
                v190 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v187, v186), 0);
                v191.i64[0] = v227.i32[0];
                v191.i64[1] = v227.i32[1];
                v193 = (int8x16_t)vcvtq_f64_s64(v191);
                v192 = vbslq_s8(v190, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), v193);
                *(double *)v193.i64 = (double)v227.i32[2];
                v194 = (double)v227.i32[3];
                if (v189 > 1073741822)
                {
                  *(double *)v193.i64 = 1.79769313e308;
                  v194 = 1.79769313e308;
                }
                v221 = v192;
                v222 = v193.i64[0];
                v223 = v194;
                v218[0] = &v221;
                v218[1] = *((_QWORD *)&v248[1] + 1);
                v219 = 0u;
                v220 = 0u;
                CA::OGL::fill_color_rect(v12, (uint64_t)v218, (double *)v188, v185, 0.0, v193);
                CA::OGL::Context::set_gstate(v12, **(_QWORD **)(v12 + 232));
              }
              CA::OGL::Context::pop_surface((CA::OGL::Context *)v12);
              CA::OGL::Context::set_gstate(v12, **(_QWORD **)(v12 + 232));
            }
            LODWORD(v67) = 1.0;
            v92 = 1;
            if (!v68)
              goto LABEL_150;
            goto LABEL_132;
          }
          v46 = *(_QWORD *)(v8 + 48);
          if (v46)
          {
            if (*(_QWORD *)(v46 + 8) == v12)
            {
              v208 = *(_QWORD *)(v46 + 32);
              if (v208)
              {
                v203 = v13;
                v197 = (os_unfair_lock_s *)(v8 + 40);
                v91 = 0;
                LODWORD(v26) = *(_DWORD *)(v46 + 28);
                v214 = v26;
                do
                {
                  *(_QWORD *)((char *)&v246 + v91) = *(_QWORD *)(v11 + v91 + 112);
                  CA::Transform::apply_to_point2((float64x2_t *)(v46 + 64), (double *)((char *)&v246 + v91), (float *)v24);
                  v67 = v214;
                  *(float32x2_t *)((char *)&v246 + v91) = vmul_n_f32(*(float32x2_t *)((char *)&v246 + v91), *(float *)&v214);
                  v91 += 8;
                }
                while (v91 != 32);
                v92 = 0;
                if (*(_QWORD *)(v46 + 40))
                {
                  v68 = *(_QWORD *)(v46 + 40);
                  v31 = v203;
                }
                else
                {
                  LODWORD(v67) = *(_DWORD *)(v46 + 24);
                  v31 = v203;
                  v68 = v208;
                }
LABEL_132:
                v217 = v67;
                v132 = *(_QWORD *)(v68 + 48);
                if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 96))(v12) & v132) == v132)
                {
                  v133 = *(_QWORD *)(v1 + 24);
                  v134 = *(_DWORD *)(v133 + 36);
                  if ((v134 & 0xFu) > 0xA)
                    v135 = 1;
                  else
                    v135 = CA::OGL::texture_filter(CA::Render::ImageFilter)::filters[v134 & 0xF];
                  v136 = v134 >> 4;
                  if (v136 > 0xA)
                    v137 = 1;
                  else
                    v137 = CA::OGL::texture_filter(CA::Render::ImageFilter)::filters[v136];
                  if ((*(_WORD *)(v1 + 40) & 0x10) != 0)
                  {
                    v150 = *(_QWORD *)(v133 + 128);
                    if (v150)
                      v151 = *(os_unfair_lock_s **)(v150 + 112);
                    else
                      v151 = 0;
                    v9 = v197;
                    CA::OGL::fill_surface_mesh(v12, v151, v133 + 64, v68, v135, v137, 1, v217, 0.0);
                    goto LABEL_184;
                  }
                  _H9 = v200;
                  v139 = 0.0;
                  CA::OGL::Context::bind_surface(v12, v68, 0, v135, v137, 0.0);
                  v140 = *(_QWORD *)(v12 + 16);
                  *(_WORD *)(v140 + 12) = (v198 | (unint64_t)(v199 << 32)) >> 32;
                  *(_DWORD *)(v140 + 8) = v198;
                  *(_WORD *)(v140 + 14) = v200;
                  v141 = *(float32x2_t **)(v12 + 16);
                  v141[13] = vmla_f32(v141[13], vcvt_f32_s32(vneg_s32(*(int32x2_t *)(v68 + 32))), v141[12]);
                  v142 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 128);
                  if (v142)
                    v139 = *(float *)(v142 + 228);
                  __asm { FCVT            S0, H9 }
                  if (_S0 == 1.0)
                  {
                    if ((v25 & 9) != 0)
                    {
                      v148 = 0;
                      v149 = 1;
                      if ((*(_WORD *)(v1 + 40) & 0x3C0) != 0 || (*(_WORD *)(v68 + 75) & 0x800) == 0)
                        goto LABEL_161;
                      goto LABEL_154;
                    }
                    if ((*(_WORD *)(v68 + 75) & 0x800) != 0)
                    {
LABEL_154:
                      v152 = v141[60].i8[0];
                      if (v152 > 3)
                        v148 = 0;
                      else
                        v148 = dword_18474EA90[v152];
                      v149 = v139 != 0.0;
                      if (v139 == 0.0 && v142)
                        v149 = *(_QWORD *)(v142 + 72) != 0;
LABEL_161:
                      v153 = v141[60].u8[0];
                      if (v153 >= 2 && (v153 != 3 || v149))
                        v141[60].i8[1] |= 1u;
                      v154.i32[1] = HIDWORD(v230.f64[0]);
                      v155 = vsubq_f64(v229, v204);
                      v156 = vcvt_f32_f64(vdivq_f64(v155, v205));
                      v157 = vcvt_f32_f64(vdivq_f64(vaddq_f64(v155, v230), v205));
                      *(float32x2_t *)&v248[0] = v156;
                      *((float32x2_t *)&v248[0] + 1) = v157;
                      if ((v92 & 1) == 0)
                      {
                        v154.i32[0] = *(_DWORD *)(v4 + 40);
                        if (*(float *)v154.i32 != 0.0)
                        {
                          v158 = (float32x2_t)vdup_lane_s32(v154, 0);
                          *(float32x2_t *)&v248[0] = vsub_f32(v156, v158);
                          *((float32x2_t *)&v248[0] + 1) = vadd_f32(v158, v157);
                        }
                        v159 = *(float32x2_t **)(v12 + 16);
                        v160 = v159[12];
                        v161 = *(_QWORD *)(v68 + 40);
                        v162.i64[0] = (int)v161;
                        v162.i64[1] = SHIDWORD(v161);
                        __asm { FMOV            V3.2D, #-0.5 }
                        v159[2].i8[3] = 5;
                        v164 = *(float32x2_t **)(v12 + 16);
                        v164[46] = vmul_f32(v160, (float32x2_t)0x3F0000003F000000);
                        v164[47] = vcvt_f32_f64(vmulq_f64(vaddq_f64(vcvtq_f64_s64(v162), _Q3), vcvtq_f64_f32(v160)));
                      }
                      v165 = (*(unsigned __int16 *)(v1 + 40) >> 6);
                      v166 = *(_QWORD *)(v31 + 24);
                      *(_QWORD *)&v234 = &v229;
                      *((_QWORD *)&v234 + 1) = v166;
                      LODWORD(v235) = v148 | v25;
                      DWORD1(v235) = v165;
                      *((_QWORD *)&v236 + 1) = 0;
                      *(_QWORD *)&v237 = &v246;
                      v167 = *(_QWORD *)(v1 + 24);
                      v168 = *(_QWORD *)(v167 + 128);
                      if (v168)
                      {
                        v169 = *(_QWORD *)(v168 + 72);
                        if (v169)
                        {
                          CA::OGL::fill_uneven_round_rect_tex((CA::OGL::Context *)v12, (uint64_t)&v234, (float64_t *)(v169 + 24), (uint64_t)v248, *(_DWORD *)(v167 + 40) & 3);
                          goto LABEL_180;
                        }
                        v170 = *(_QWORD *)(v168 + 56);
                        if (v170)
                        {
                          v171 = (uint32x2_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v170 + 80))(v170);
                          v172 = *(_QWORD *)(v1 + 24);
                          v173 = *(_QWORD *)(v172 + 128);
                          if (v173 && (v174 = *(_QWORD *)(v173 + 64)) != 0)
                          {
                            if (*(_DWORD *)(v174 + 16) > 3u)
                            {
                              v176 = vsubq_f64(*(float64x2_t *)(v174 + 40), *(float64x2_t *)(v174 + 24));
                              v251[0] = *(_OWORD *)(v174 + 24);
                              v251[1] = v176;
                            }
                            else
                            {
                              memset(v251, 0, 32);
                            }
                          }
                          else
                          {
                            __asm { FMOV            V0.2D, #0.5 }
                            v251[0] = _Q0;
                            v251[1] = 0uLL;
                          }
                          CA::OGL::fill_corner_rect_tex((CA::OGL::Context *)v12, (double **)&v234, v171, (double *)v251, *(_DWORD *)(*(_QWORD *)(v1 + 16) + 24) & 1, (*(_QWORD *)(v172 + 40) >> 41) & 1, (uint64_t)v248, *(_WORD *)(v172 + 38) & 0xF, v139, v139, 0);
                          goto LABEL_180;
                        }
                      }
                      CA::OGL::fill_round_rect_tex((CA::OGL::Context *)v12, (float64x2_t **)&v234, (uint64_t)v248, (double *)(*(_WORD *)(v167 + 38) & 0xF), *(_DWORD *)(v167 + 40) & 3, 0, v139, v139);
LABEL_180:
                      *(_BYTE *)(*(_QWORD *)(v12 + 16) + 481) &= ~1u;
                      CA::OGL::Context::unbind_surface((_QWORD *)v12, v68, 0);
                      if (v92)
                        CA::OGL::Context::release_surface(v12, v68);
                      *(_BYTE *)(*(_QWORD *)(v12 + 16) + 19) = 0;
                      goto LABEL_183;
                    }
                  }
                  v148 = 0;
                  v149 = 1;
                  goto LABEL_161;
                }
LABEL_150:
                *((_BYTE *)v212 + 100) = 1;
LABEL_183:
                v9 = v197;
                goto LABEL_184;
              }
            }
          }
          *((_BYTE *)v212 + 100) = 1;
LABEL_184:
          os_unfair_lock_unlock(v9);
          goto LABEL_185;
        }
        v229 = v18;
        v230 = v15;
      }
      v213 = v15;
      goto LABEL_21;
    }
  }
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  const void *v15;
  uint64_t v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[9];
  _QWORD __dst[62];

  __dst[61] = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(v1 + 8);
  if (((*(unsigned int *)(v2 + 1064) | ((unint64_t)*(unsigned __int16 *)(v2 + 1068) << 32)) & 0x200000000) != 0)
  {
    *(_BYTE *)(v1 + 101) = 1;
  }
  else if ((*(_BYTE *)(v2 + 270) & 8) == 0)
  {
    v3 = *(_QWORD *)v1;
    if ((*(_WORD *)(*(_QWORD *)v1 + 816) & 2) == 0)
    {
      v4 = *(_QWORD *)(v3 + 176);
      if (v4)
      {
        v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
        if (v5)
        {
          v6 = v5;
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 616))(v5))
          {
            v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 624))(v6);
            if (v7)
            {
              v8 = *(_QWORD *)(v3 + 248);
              do
              {
                v9 = (_DWORD *)v8;
                v8 = *(_QWORD *)(v8 + 8);
              }
              while (v8);
              v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 928))(v3, v7, 1);
              v12 = v9[8];
              v11 = v9[9];
              v14 = v9[10];
              v13 = v9[11];
              CA::OGL::Context::push_surface(v3, v10, 0, 0, 0);
              v15 = *(const void **)(v3 + 16);
              memcpy(__dst, v15, 0x1E8uLL);
              *(_QWORD *)(v3 + 16) = __dst;
              v22[4] = 0x3C003C003C003C00;
              memset(&v22[5], 0, 24);
              __dst[0] = v15;
              v22[8] = 0x4013F800000;
              v22[2] = 0;
              v22[3] = &CA::identity_transform;
              v22[0] = 0;
              v22[1] = &CA::Shape::_infinite_shape;
              v22[0] = CA::OGL::Context::set_gstate(v3, (uint64_t)v22);
              *(_BYTE *)(*(_QWORD *)(v3 + 16) + 481) &= ~1u;
              *(_BYTE *)(*(_QWORD *)(v3 + 16) + 16) = 1;
              CA::OGL::Context::bind_surface(v3, (uint64_t)v9, 0, 0, 0, 0.0);
              *(_QWORD *)(v3 + 128) = 0;
              v16 = v3 + 818;
              *(_QWORD *)(v3 + 96) = v3 + 818;
              *(_OWORD *)(v3 + 104) = xmmword_18474E060;
              if (*(_QWORD *)(v3 + 136) <= 3uLL)
              {
                *(_WORD *)(v3 + 816) |= 0x20u;
                CA::OGL::Context::array_flush(v3);
                *(_QWORD *)(v3 + 128) = 0;
                *(_QWORD *)(v3 + 96) = v16;
                *(_OWORD *)(v3 + 104) = xmmword_18474E060;
              }
              v17 = (float)(v14 + v12);
              v18 = (float)(v13 + v11);
              CA::OGL::Context::array_rect((_QWORD *)v3, (float)v12, (float)v11, v17, v18);
              v19 = *(_QWORD *)(v3 + 120) + 48 * *(_QWORD *)(v3 + 128);
              *(float *)(v19 - 176) = (float)v12;
              *(float *)(v19 - 172) = (float)v11;
              *(float *)(v19 - 128) = v17;
              *(float *)(v19 - 124) = (float)v11;
              *(float *)(v19 - 80) = v17;
              *(float *)(v19 - 76) = v18;
              *(float *)(v19 - 32) = (float)v12;
              *(float *)(v19 - 28) = v18;
              CA::OGL::Context::array_flush(v3);
              CA::OGL::Context::unbind_surface((_QWORD *)v3, (uint64_t)v9, 0);
              if (BYTE3(xmmword_1ECDC6AD0))
              {
                *(_BYTE *)(*(_QWORD *)(v3 + 16) + 481) |= 1u;
                v20 = *(_QWORD *)(v3 + 16);
                *(_BYTE *)(v20 + 480) = 3;
                *(_BYTE *)(v20 + 16) = 0;
                CA::OGL::Context::bind_surface(v3, (uint64_t)v9, 0, 0, 0, 0.0);
                *(_QWORD *)(v3 + 128) = 0;
                *(_QWORD *)(v3 + 96) = v16;
                *(_OWORD *)(v3 + 104) = xmmword_18474E060;
                if (*(_QWORD *)(v3 + 136) <= 3uLL)
                {
                  *(_WORD *)(v3 + 816) |= 0x20u;
                  CA::OGL::Context::array_flush(v3);
                  *(_QWORD *)(v3 + 128) = 0;
                  *(_QWORD *)(v3 + 96) = v16;
                  *(_OWORD *)(v3 + 104) = xmmword_18474E060;
                }
                CA::OGL::Context::array_rect((_QWORD *)v3, (float)v12, (float)v11, (float)(v14 + v12), v18);
                v21 = *(_QWORD *)(v3 + 120) + 48 * *(_QWORD *)(v3 + 128);
                *(_QWORD *)(v21 - 160) = 0x3800000000003800;
                *(_QWORD *)(v21 - 112) = 0x3800000000003800;
                *(_QWORD *)(v21 - 64) = 0x3800000000003800;
                *(_QWORD *)(v21 - 16) = 0x3800000000003800;
                CA::OGL::Context::array_flush(v3);
              }
              CA::OGL::Context::set_gstate(v3, **(_QWORD **)(v3 + 232));
              *(_QWORD *)(v3 + 16) = __dst[0];
              __dst[0] = 0;
              CA::OGL::Context::pop_surface((CA::OGL::Context *)v3);
              if (__dst[0])
                __assert_rtn("~ContextState", "ogl-context.h", 551, "!next && \"Imbalanced ContextState push/pop\"");
            }
          }
        }
      }
    }
  }
}

float32x2_t CA::Transform::apply_to_point2(float64x2_t *this, double *a2, float *a3)
{
  char v3;
  float32x2_t v4;
  float32x2_t result;
  float v6;
  float v7;

  v3 = LOBYTE(this[9].f64[0]);
  if ((v3 & 0x10) != 0)
    return CA::Mat4Impl::mat4_apply_to_point2(this, a2, a3);
  if ((LOBYTE(this[9].f64[0]) & 8) == 0)
  {
    v4.i32[0] = *(_DWORD *)a2;
    if ((LOBYTE(this[9].f64[0]) & 4) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
  v4 = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)a2), this[8].f64[0]));
  *a2 = *(double *)&v4;
  v3 = LOBYTE(this[9].f64[0]);
  if ((v3 & 4) != 0)
  {
LABEL_7:
    v6 = *((float *)a2 + 1);
    *((_DWORD *)a2 + 1) = v4.i32[0];
    v4.f32[0] = -v6;
    *(float *)a2 = -v6;
    v3 = LOBYTE(this[9].f64[0]);
  }
LABEL_8:
  if ((v3 & 2) != 0)
  {
    v4.f32[0] = -v4.f32[0];
    *(_DWORD *)a2 = v4.i32[0];
    v3 = LOBYTE(this[9].f64[0]);
  }
  v7 = *((float *)a2 + 1);
  if ((v3 & 1) != 0)
    v7 = -v7;
  v4.f32[1] = v7;
  result = vcvt_f32_f64(vaddq_f64(this[6], vcvtq_f64_f32(v4)));
  *a2 = *(double *)&result;
  return result;
}

CA::OGL::Context *CA::OGL::fill_round_rect_tex(CA::OGL::Context *result, float64x2_t **a2, uint64_t a3, double *a4, uint64_t a5, double *a6, float64_t a7, float64_t a8)
{
  double v8;
  double v9;
  double v10;
  int v13;
  uint64_t v16;
  float64x2_t *v17;
  double v18;
  float64x2_t v19;
  float64x2_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int8x16_t v29;
  int8x16_t v34;
  float *v35;
  float64x2_t *v36;
  double v37;
  double v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  BOOL v46;
  int v47;
  const CA::Rect *v48;
  double v49;
  double v50;
  double v51;
  double v52;
  int v53;
  uint64_t v54;
  int v55;
  _DWORD v56[4];
  uint64_t v57;
  float v58[4];
  float v59;
  float v60;
  float v61;
  int v62;
  float v63[4];
  unint64_t v64;
  float v65;
  float v66;
  double v67[4];
  double v68[5];

  v68[4] = *(double *)MEMORY[0x1E0C80C00];
  v8 = (*a2)[1].f64[0];
  v9 = (*a2)[1].f64[1];
  if (v8 >= v9)
    v10 = (*a2)[1].f64[1];
  else
    v10 = (*a2)[1].f64[0];
  if (v10 > 0.0)
  {
    v13 = (int)a4;
    v16 = (uint64_t)result;
    v51 = 0.0;
    v52 = 0.0;
    v57 = 0;
    v17 = a2[1];
    if ((LOBYTE(v17[9].f64[0]) & 0x10) != 0)
    {
      v49 = a8;
      v50 = a7;
      CA::Mat4Impl::mat4_get_scale((CA::Mat4Impl *)v17, &v52, &v51, a4);
      a8 = v49;
      a7 = v50;
      v18 = v52;
    }
    else
    {
      v18 = v17[8].f64[0];
      v51 = v18;
      v52 = v18;
    }
    v19.f64[0] = a7;
    v19.f64[1] = a8;
    v20 = vmulq_f64(v19, (float64x2_t)vdupq_n_s64(0x3FF875696E58A32FuLL));
    if ((_DWORD)a5)
      v21 = v20.f64[1];
    else
      v21 = a8;
    if ((_DWORD)a5)
      v22 = v20.f64[0];
    else
      v22 = a7;
    if (v18 * v22 < 1.0)
      return CA::OGL::fill_rect_tex((CA::OGL::Context *)v16, (uint64_t)a2, a3, a4);
    if (!v13)
      return CA::OGL::fill_rect_tex((CA::OGL::Context *)v16, (uint64_t)a2, a3, a4);
    v23 = v51;
    if (v51 * v21 < 1.0)
      return CA::OGL::fill_rect_tex((CA::OGL::Context *)v16, (uint64_t)a2, a3, a4);
    v24 = ceil(v18 * v22);
    v25 = ceil(v51 * v21);
    if (v24 <= v25)
      v24 = v25;
    v26 = (int)v24;
    v27 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(*(_QWORD *)(v16 + 16) + 16) = 5;
    v28 = (v27 >> 21) & 1;
    if ((_DWORD)a5)
    {
      v29 = (int8x16_t)vaddq_f64(vdivq_f64(vmulq_f64((*a2)[1], (float64x2_t)vdupq_n_s64(0xBFF721E8A7A4B61BLL)), v20), (float64x2_t)vdupq_n_s64(0x400721E8A7A4B61BuLL));
      __asm { FMOV            V1.2D, #1.0 }
      v34 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v29, (float64x2_t)_Q1), _Q1, v29);
      *(float32x2_t *)&v68[0] = vcvt_f32_f64((float64x2_t)vbicq_s8(v34, (int8x16_t)vcltzq_f64((float64x2_t)v34)));
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *, uint64_t, double *))(*(_QWORD *)v16 + 464))(v16, 1, v26, 0, v28, &v57, a5, v68);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *))(*(_QWORD *)v16 + 456))(v16, 1, v26, 0, v28, &v57);
    }
    v36 = *a2;
    v68[0] = (*a2)->f64[0];
    v68[1] = v68[0] + v22;
    v37 = v36[1].f64[0];
    v68[2] = v37 + v68[0] - v22;
    v68[3] = v37 + v68[0];
    v67[0] = v36->f64[1];
    v67[1] = v67[0] + v21;
    v38 = v36[1].f64[1];
    v67[2] = v38 + v67[0] - v21;
    v67[3] = v38 + v67[0];
    v39 = v22 / v37;
    v40 = v21 / v38;
    v41 = *(float *)a3;
    v42 = *(float *)(a3 + 4);
    v43 = *(float *)(a3 + 8);
    v44 = *(float *)(a3 + 12);
    v64 = __PAIR64__(*(float *)a3 + (float)((float)(v43 - *(float *)a3) * v39), *(_DWORD *)a3);
    v65 = v43 + (float)((float)(v41 - v43) * v39);
    v66 = v43;
    v63[0] = v42;
    v63[1] = v42 + (float)((float)(v44 - v42) * v40);
    v63[2] = v44 + (float)((float)(v42 - v44) * v40);
    v63[3] = v44;
    LODWORD(v59) = v57;
    v60 = *(float *)&v57 + (float)((float)(*((float *)&v57 + 1) - *(float *)&v57) * 0.5);
    v61 = v60;
    v62 = HIDWORD(v57);
    LODWORD(v58[0]) = v57;
    v58[1] = v60;
    v58[2] = v60;
    v58[3] = *((float *)&v57 + 1);
    if (v37 == v38
      && (fabs(v37 + v22 * -2.0) < 1.0 ? (_ZF = v22 == v21) : (_ZF = 0),
          _ZF && ((*((_BYTE *)a2 + 20) & 0xF) == 0 || ((_BYTE)a2[2] & 9) == 0)))
    {
      v46 = a6 == 0;
      if (v13 == 15 && !a6)
      {
        *(float *)v56 = v41;
        *(float *)&v56[1] = v42;
        *(float *)&v56[2] = v43;
        *(float *)&v56[3] = v44;
        v53 = v57;
        v54 = v57;
        v55 = HIDWORD(v57);
        CA::OGL::emit_one_part_rect((CA::OGL::Context *)v16, (uint64_t)a2, (const CA::Transform *)v56, (uint64_t)&v53, 0);
LABEL_35:
        result = (CA::OGL::Context *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v16 + 520))(v16, 0, 1);
        *(_BYTE *)(*(_QWORD *)(v16 + 16) + 16) = 0;
        return result;
      }
    }
    else
    {
      v46 = a6 == 0;
    }
    v47 = v23 * v18 * (v8 * v9) >= *(double *)(v16 + 72);
    if (v46
    {
      CA::OGL::emit_nine_part_rect(v16, (uint64_t)a2, (uint64_t)v68, (uint64_t)v67, (uint64_t)&v64, (uint64_t)v63, (uint64_t)&v59, (uint64_t)v58, (((v13 & 0xF) << 22) | (v47 << 16)) ^ 0x7C00000);
    }
    goto LABEL_35;
  }
  return result;
}

double CA::OGL::Context::bind_supercircle(CA::OGL::Context *this, unsigned int a2, int a3, BOOL a4, BOOL a5, float *a6, int a7, float *a8)
{
  uint64_t v8;
  __int128 v9;
  double result;

  v8 = *((_QWORD *)this + 2);
  *(_OWORD *)(v8 + 16 * a2 + 96) = xmmword_18474E210;
  *(_BYTE *)(v8 + a2 + 17) = byte_18474ECE4[a7];
  if (a8)
    *(_QWORD *)&v9 = *(_QWORD *)a8;
  else
    *(_QWORD *)&v9 = 0;
  *((_QWORD *)&v9 + 1) = v9;
  *(_OWORD *)(*((_QWORD *)this + 2) + 48 * a2 + 416) = v9;
  result = 0.00781250557;
  *(_QWORD *)a6 = 0x3F800000BF800000;
  return result;
}

float CA::OGL::`anonymous namespace'::clamp_nine_part_rect(CA::OGL::_anonymous_namespace_ *this, double *a2, double *a3, float *a4, float *a5, float *a6, float *a7)
{
  double v7;
  double v8;
  float v9;
  double v10;
  float v11;
  float v12;
  float v13;
  float v14;
  double v15;
  double v16;
  float v17;
  double v18;
  float v19;
  float v20;

  v7 = *((double *)this + 1);
  v8 = *((double *)this + 2);
  if (v7 > v8)
  {
    v9 = (v8 + v7) * 0.5;
    v10 = v9;
    v11 = (v10 - *(double *)this) / (v7 - *(double *)this);
    *((double *)this + 1) = v10;
    *((double *)this + 2) = v10;
    if (a3)
    {
      v12 = *((float *)a3 + 3) + (float)((float)(*((float *)a3 + 2) - *((float *)a3 + 3)) * v11);
      *((float *)a3 + 1) = *(float *)a3 + (float)((float)(*((float *)a3 + 1) - *(float *)a3) * v11);
      *((float *)a3 + 2) = v12;
    }
    if (a5)
    {
      v13 = *a5 + (float)((float)(a5[1] - *a5) * v11);
      v14 = a5[3] + (float)((float)(a5[2] - a5[3]) * v11);
      a5[1] = v13;
      a5[2] = v14;
    }
  }
  v15 = a2[1];
  v16 = a2[2];
  if (v15 > v16)
  {
    v17 = (v16 + v15) * 0.5;
    v18 = v17;
    *(float *)&v15 = (v18 - *a2) / (v15 - *a2);
    a2[1] = v18;
    a2[2] = v18;
    if (a4)
    {
      v19 = a4[3] + (float)((float)(a4[2] - a4[3]) * *(float *)&v15);
      a4[1] = *a4 + (float)((float)(a4[1] - *a4) * *(float *)&v15);
      a4[2] = v19;
    }
    if (a6)
    {
      v20 = *a6 + (float)((float)(a6[1] - *a6) * *(float *)&v15);
      *(float *)&v15 = a6[3] + (float)((float)(a6[2] - a6[3]) * *(float *)&v15);
      a6[1] = v20;
      a6[2] = *(float *)&v15;
    }
  }
  return *(float *)&v15;
}

CA::OGL::Context *CA::OGL::fill_corner_rect_tex(CA::OGL::Context *result, double **a2, uint32x2_t *a3, double *a4, int a5, int a6, uint64_t a7, int a8, double a9, double a10, double *a11)
{
  double v13;
  CA::OGL::Context *v21;
  double *v22;
  double v23;
  unsigned int v24;
  double *v25;
  _OWORD *v26;
  float *v27;
  _OWORD *v28;
  double *v29;
  double v30;
  double v31;
  double v32;
  float v33;
  double v34;
  float v35;
  float v36;
  float v37;
  float *v38;
  int v39;
  const CA::Rect *v40;
  double v41;
  double v42;
  _QWORD v43[2];
  _QWORD v44[2];
  float v45[4];
  double v46;
  float v47;
  float v48;
  double v49[4];
  double v50[4];
  float32x4_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v13 = (*a2)[2];
  if (v13 >= (*a2)[3])
    v13 = (*a2)[3];
  if (v13 > 0.0)
  {
    v21 = result;
    v41 = 0.0;
    v42 = 0.0;
    v22 = a2[1];
    if (((_BYTE)v22[18] & 0x10) != 0)
    {
      CA::Mat4Impl::mat4_get_scale((CA::Mat4Impl *)v22, &v42, &v41, a4);
      v23 = v42;
    }
    else
    {
      v23 = v22[16];
      v41 = v23;
      v42 = v23;
    }
    if (v23 * a9 >= 1.0
      && a8
      && a3
      && v41 * a10 >= 1.0
      && ((v51 = 0uLL, (*((_DWORD *)v21 + 104) & 2) != 0) ? (v24 = 2358) : (v24 = 310),
          !a5 ? (v25 = (double *)v24) : (v25 = (double *)(v24 ^ 0x800)),
          *(_BYTE *)(*((_QWORD *)v21 + 2) + 16) = 5,
          (v26 = CA::OGL::Context::bind_image((uint64_t)v21, 1, a3, v25, 1u, 1, 0, 0, 0.0, &v51, 0)) != 0))
    {
      v28 = v26;
      v44[0] = 0;
      v44[1] = 0;
      v43[0] = 0;
      v43[1] = 0;
      v29 = *a2;
      v30 = (*a2)[1];
      v50[0] = **a2;
      v50[1] = v50[0] + a9;
      v31 = v29[2];
      v32 = v29[3];
      v50[2] = v31 + v50[0] - a9;
      v50[3] = v31 + v50[0];
      v49[0] = v30;
      v49[1] = v30 + a10;
      v49[2] = v32 + v30 - a10;
      v49[3] = v32 + v30;
      v33 = a9 / v31;
      v34 = a10 / v32;
      LODWORD(v32) = *(_DWORD *)(a7 + 4);
      v35 = *(float *)(a7 + 8);
      v36 = *(float *)(a7 + 12);
      v37 = *(float *)a7 + (float)((float)(v35 - *(float *)a7) * v33);
      LODWORD(v46) = *(_DWORD *)a7;
      *((float *)&v46 + 1) = v37;
      *(float *)&v34 = v34;
      v47 = v35 + (float)((float)(*(float *)&v46 - v35) * v33);
      v48 = v35;
      v45[0] = *(float *)&v32;
      v45[1] = *(float *)&v32 + (float)((float)(v36 - *(float *)&v32) * *(float *)&v34);
      v45[2] = v36 + (float)((float)(*(float *)&v32 - v36) * *(float *)&v34);
      v45[3] = v36;
      if (a6)
        v39 = 0x4000000;
      else
        v39 = 0x8000000;
      if (!a11
      {
        CA::OGL::emit_nine_part_rect((uint64_t)v21, (uint64_t)a2, (uint64_t)v50, (uint64_t)v49, (uint64_t)&v46, (uint64_t)v45, (uint64_t)v44, (uint64_t)v43, (v39 & 0xFC3FFFFF | ((a8 & 0xF) << 22)) ^ 0x3C10000);
      }
      result = (CA::OGL::Context *)(*(uint64_t (**)(CA::OGL::Context *, _OWORD *, uint64_t))(*(_QWORD *)v21 + 520))(v21, v28, 1);
      *(_BYTE *)(*((_QWORD *)v21 + 2) + 16) = 0;
    }
    else
    {
      return CA::OGL::fill_rect_tex(v21, (uint64_t)a2, a7, a4);
    }
  }
  return result;
}

float CA::OGL::`anonymous namespace'::map_corner_texture_coordinates(CA::OGL::_anonymous_namespace_ *this, double *a2, const CA::Rect *a3, float *a4, float *a5)
{
  uint64_t v5;
  double v6;
  double v7;
  float v8;
  float v9;
  double v10;
  float result;

  v5 = 0;
  v6 = a2[1];
  v7 = a2[3];
  v8 = *a2;
  v9 = a2[2] + *a2;
  *((float *)a3 + 1) = v8;
  *((float *)a3 + 2) = v9;
  *(_DWORD *)a3 = 0;
  *((_DWORD *)a3 + 3) = 1065353216;
  *a4 = 0.0;
  v10 = v7 + v6;
  *(float *)&v6 = v6;
  *(float *)&v10 = v10;
  a4[1] = *(float *)&v6;
  a4[2] = *(float *)&v10;
  a4[3] = 1.0;
  do
  {
    *(float *)((char *)a3 + v5 * 4) = *(float *)this
                                    + (float)((float)(*((float *)this + 2) - *(float *)this)
                                            * *(float *)((char *)a3 + v5 * 4));
    result = *((float *)this + 1) + (float)((float)(*((float *)this + 3) - *((float *)this + 1)) * a4[v5]);
    a4[v5++] = result;
  }
  while (v5 != 4);
  return result;
}

float32x2_t CA::Mat4Impl::mat4_apply_to_point2(float64x2_t *this, double *a2, float *a3)
{
  double v3;
  double v4;
  float v5;
  float32x2_t result;

  v3 = *(float *)a2;
  v4 = *((float *)a2 + 1);
  v5 = this[7].f64[1] + this[1].f64[1] * v3 + this[3].f64[1] * v4;
  if (fabsf(v5 + -1.0) >= 0.000001)
  {
    if (v5 <= 0.0)
      v5 = INFINITY;
    else
      v5 = 1.0 / v5;
  }
  result = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(this[6], *this, v3), this[2], v4), v5));
  *a2 = *(double *)&result;
  return result;
}

uint64_t CA::OGL::`anonymous namespace'::clip_nine_part_rect(CA::OGL::_anonymous_namespace_ *this, double *a2, double *a3, float *a4, float *a5, float *a6, double *a7, const CA::Rect *a8)
{
  float v8;
  double v9;
  float v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  unsigned int v25;
  uint64_t v26;
  float v27;
  double v28;
  float v29;
  double v30;
  uint64_t result;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  unsigned int v43;
  uint64_t v44;

  v8 = *a7;
  v9 = v8;
  v10 = a7[2] + v8;
  v11 = v10;
  if (*(double *)this > v10 || *((double *)this + 3) < v9)
    return 0;
  v12 = a7[1];
  v13 = a7[3];
  v14 = 1;
  while (1)
  {
    v15 = *((double *)this + v14);
    if (v15 > v11)
      break;
    if (++v14 == 4)
      goto LABEL_18;
  }
  v16 = (v14 << 32) - 0x100000000;
  v17 = v16 >> 32;
  v18 = (v11 - *(double *)((char *)this + (v16 >> 29))) / (v15 - *(double *)((char *)this + (v16 >> 29)));
  if (a3)
    *((float *)a3 + v14) = *((float *)a3 + v17) + (float)((float)(*((float *)a3 + v14) - *((float *)a3 + v17)) * v18);
  if (a5)
    a5[v14] = a5[v17] + (float)((float)(a5[v14] - a5[v17]) * v18);
  *((double *)this + v14) = v11;
  if (v14 <= 2)
  {
    v19 = v14 - 1;
    do
    {
      *((_QWORD *)this + v19 + 2) = *((_QWORD *)this + v14);
      if (a3)
        *((_DWORD *)a3 + v19 + 2) = *((_DWORD *)a3 + v14);
      if (a5)
        a5[v19 + 2] = a5[v14];
      ++v19;
    }
    while (v19 != 2);
  }
LABEL_18:
  v20 = 0;
  while (1)
  {
    v21 = *((double *)this + v20 + 2);
    if (v21 < v9)
      break;
    if (--v20 == -3)
      goto LABEL_33;
  }
  v22 = v20 + 2;
  v23 = (v20 + 3);
  v24 = (v9 - v21) / (*((double *)this + v23) - v21);
  if (a3)
    *((float *)a3 + v22) = *((float *)a3 + v22) + (float)((float)(*((float *)a3 + v23) - *((float *)a3 + v22)) * v24);
  if (a5)
    a5[v22] = a5[v22] + (float)((float)(a5[v23] - a5[v22]) * v24);
  *((double *)this + v22) = v9;
  if ((_DWORD)v20 != -2)
  {
    v25 = v20 + 1;
    do
    {
      v26 = v25;
      *((_QWORD *)this + v25) = *((_QWORD *)this + v22);
      if (a3)
        *((_DWORD *)a3 + v25) = *((_DWORD *)a3 + v22);
      if (a5)
        a5[v25] = a5[v22];
      --v25;
    }
    while (v26);
  }
LABEL_33:
  v27 = v12;
  v28 = v27;
  v29 = v13 + v28;
  v30 = v29;
  if (*a2 > v30 || a2[3] < v28)
    return 0;
  v32 = 1;
  while (1)
  {
    v33 = a2[v32];
    if (v33 > v30)
      break;
    if (++v32 == 4)
      goto LABEL_51;
  }
  v34 = (v32 << 32) - 0x100000000;
  v35 = v34 >> 32;
  v36 = (v30 - *(double *)((char *)a2 + (v34 >> 29))) / (v33 - *(double *)((char *)a2 + (v34 >> 29)));
  if (a4)
    a4[v32] = a4[v35] + (float)((float)(a4[v32] - a4[v35]) * v36);
  if (a6)
    a6[v32] = a6[v35] + (float)((float)(a6[v32] - a6[v35]) * v36);
  a2[v32] = v30;
  if (v32 <= 2)
  {
    v37 = v32 - 1;
    do
    {
      a2[v37 + 2] = a2[v32];
      if (a4)
        a4[v37 + 2] = a4[v32];
      if (a6)
        a6[v37 + 2] = a6[v32];
      ++v37;
    }
    while (v37 != 2);
  }
LABEL_51:
  v38 = 0;
  while (1)
  {
    v39 = a2[v38 + 2];
    if (v39 < v28)
      break;
    if (--v38 == -3)
      return 1;
  }
  v40 = v38 + 2;
  v41 = (v38 + 3);
  v42 = (v28 - v39) / (a2[v41] - v39);
  if (a4)
    a4[v40] = a4[v40] + (float)((float)(a4[v41] - a4[v40]) * v42);
  if (a6)
    a6[v40] = a6[v40] + (float)((float)(a6[v41] - a6[v40]) * v42);
  a2[v40] = v28;
  if ((_DWORD)v38 == -2)
    return 1;
  v43 = v38 + 1;
  result = 1;
  do
  {
    v44 = v43;
    a2[v43] = a2[v40];
    if (a4)
      a4[v43] = a4[v40];
    if (a6)
      a6[v43] = a6[v40];
    --v43;
  }
  while (v44);
  return result;
}

void ___ZN2CA3OGL12MetalContext24start_idle_collect_timerEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  CA::OGL::MetalBufferPool *v3;
  unint64_t v4;
  uint64_t v5;
  void **v6;
  void **v7;
  unint64_t v8;
  void **v9;
  void **v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  void **v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = mach_absolute_time();
  if (CATimeWithHostTime(v2) > *(double *)(v1 + 3960) + 0.5)
  {
    v3 = *(CA::OGL::MetalBufferPool **)(v1 + 3992);
    v4 = atomic_load((unint64_t *)(v1 + 3984));
    CA::OGL::MetalBufferPool::pool_flush(v3, v4, 0);
    v5 = *(_QWORD *)(v1 + 3992);
    os_unfair_lock_lock((os_unfair_lock_t)(v5 + 56));
    v6 = *(void ***)(v5 + 248);
    v7 = *(void ***)(v5 + 256);
    if (v7 == v6)
    {
      v11 = (_QWORD *)(v5 + 280);
      v7 = *(void ***)(v5 + 248);
    }
    else
    {
      v8 = *(_QWORD *)(v5 + 272);
      v9 = &v6[v8 >> 9];
      v10 = (void **)((char *)*v9 + 8 * (v8 & 0x1FF));
      v11 = (_QWORD *)(v5 + 280);
      v12 = *(uint64_t *)((char *)v6 + (((*(_QWORD *)(v5 + 280) + v8) >> 6) & 0x3FFFFFFFFFFFFF8))
          + 8 * ((*(_QWORD *)(v5 + 280) + v8) & 0x1FF);
      if (v10 != (void **)v12)
      {
        do
        {
          v13 = *v10;
          v18 = *v10;
          if (*(_QWORD *)(v5 + 328) > 0x3FuLL)
          {

          }
          else
          {
            objc_msgSend(v13, "setPurgeableState:", 3, v18, v19);
            std::deque<objc_object  {objcproto9MTLBuffer}*>::push_back((_QWORD *)(v5 + 288), &v18);
          }
          if ((char *)++v10 - (_BYTE *)*v9 == 4096)
          {
            v14 = (void **)v9[1];
            ++v9;
            v10 = v14;
          }
        }
        while (v10 != (void **)v12);
        v6 = *(void ***)(v5 + 248);
        v7 = *(void ***)(v5 + 256);
      }
    }
    *v11 = 0;
    v15 = (char *)v7 - (char *)v6;
    if (v15 >= 0x11)
    {
      do
      {
        operator delete(*v6);
        v16 = *(_QWORD *)(v5 + 256);
        v6 = (void **)(*(_QWORD *)(v5 + 248) + 8);
        *(_QWORD *)(v5 + 248) = v6;
        v15 = v16 - (_QWORD)v6;
      }
      while (v15 > 0x10);
    }
    if (v15 >> 3 == 1)
    {
      v17 = 256;
    }
    else
    {
      if (v15 >> 3 != 2)
      {
LABEL_20:
        os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 56));
        CA::OGL::MetalContext::stop_idle_collect_timer((CA::OGL::MetalContext *)v1);
        return;
      }
      v17 = 512;
    }
    *(_QWORD *)(v5 + 272) = v17;
    goto LABEL_20;
  }
}

void sub_184510E74(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void CA::CG::FillGlyphs::draw_shape(CA::CG::FillGlyphs *this, CA::CG::Renderer *a2, double a3, int64x2_t a4, double a5, double a6, double a7, int64x2_t a8, uint64_t a9, const CA::CG::ShadowStyle *a10)
{
  if ((CA::CG::draw_glyph_bitmaps(a2, this, 0, a10, a3, a4, a5, a6, a7, a8) & 1) == 0)
    CA::CG::draw_glyph_paths((uint64_t)a2, (uint64_t)this, 192, 0);
}

void CA::CG::FillGlyphs::draw_shape_and_color(CA::CG::FillGlyphs *this, CA::CG::Renderer *a2, double a3, int64x2_t a4, double a5, double a6, double a7, int64x2_t a8, uint64_t a9, const CA::CG::ShadowStyle *a10)
{
  if ((CA::CG::draw_glyph_bitmaps(a2, this, 0, a10, a3, a4, a5, a6, a7, a8) & 1) == 0)
    CA::CG::draw_glyph_paths((uint64_t)a2, (uint64_t)this, 192, 0);
}

uint64_t CA::CG::draw_glyph_bitmaps(CA::CG *this, CA::CG::Renderer *a2, float32x2_t *a3, const CA::CG::ShadowStyle *a4, double a5, int64x2_t a6, double a7, double a8, double a9, int64x2_t a10)
{
  double v13;
  int8x16_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  __int128 v18;
  __int128 v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float v23;
  double v24;
  double v25;
  BOOL v27;
  double v28;
  double i;
  int8x16_t v30;
  int32x2_t v31;
  int64x2_t v32;
  double v33;
  double v34;
  double v35;
  uint64_t QuantizationLevel;
  _QWORD *v37;
  uint64_t v38;
  size_t v39;
  size_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  unint64_t v45;
  uint64_t v46;
  _BOOL4 v47;
  int v48;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  size_t v53;
  float16x4_t v54;
  unint64_t v55;
  unint64_t v56;
  _DWORD *v57;
  __int128 v58;
  unsigned __int8 *v59;
  unsigned int v60;
  int v61;
  unint64_t v62;
  int v63;
  unint64_t v64;
  unsigned int v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  uint8x8_t v69;
  unint64_t v70;
  void **v71;
  unint64_t v72;
  unsigned int v73;
  float v74;
  _BOOL8 v75;
  unint64_t v76;
  unint64_t v77;
  size_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  unint64_t v82;
  char *v83;
  int v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  int8x8_t v89;
  unint64_t v90;
  uint8x8_t v91;
  _QWORD *v92;
  _QWORD *v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  float32x2_t v104;
  unsigned int v105;
  int v106;
  unint64_t v107;
  int v108;
  uint64_t v109;
  int v110;
  unsigned int v111;
  size_t v112;
  uint64_t v113;
  float v114;
  uint64_t v115;
  size_t v116;
  unint64_t v117;
  _QWORD *v118;
  size_t v119;
  char *v120;
  _QWORD *v121;
  __int128 v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t *v127;
  _QWORD v128[5];
  double v129;
  double v130;
  double v131;
  float64x2_t v132;
  _OWORD v133[2];
  float64x2_t v134;
  _OWORD v135[7];
  uint64_t v136;

  v136 = *MEMORY[0x1E0C80C00];
  if ((*((_DWORD *)a2 + 33) | 4) != 4)
    return 0;
  if (!*((_QWORD *)this + 172))
    *((_QWORD *)this + 172) = CGGlyphLockCreate();
  v13 = *((double *)a2 + 15);
  a6.i64[0] = (uint64_t)v133;
  a10.i64[0] = (uint64_t)this + 32;
  v14 = (int8x16_t)vdupq_lane_s64(vmvnq_s8((int8x16_t)vceqq_s64(a10, a6)).i64[0], 0);
  v15 = (float64x2_t)vandq_s8(*((int8x16_t *)this + 4), v14);
  v16 = (float64x2_t)vandq_s8(*((int8x16_t *)this + 3), v14);
  v17 = (float64x2_t)vandq_s8(*((int8x16_t *)this + 2), v14);
  v18 = *(_OWORD *)((char *)a2 + 168);
  v19 = *((_OWORD *)a2 + 11);
  v20 = vmlaq_n_f64(vmulq_n_f64(v17, *((double *)a2 + 17)), v16, *((double *)a2 + 18));
  v21 = vmlaq_n_f64(vmulq_n_f64(v17, *((double *)a2 + 19)), v16, *((double *)a2 + 20));
  v133[0] = v20;
  v133[1] = v21;
  v22 = vmlaq_n_f64(vmlaq_n_f64(v15, v17, *(double *)&v18), v16, *(double *)&v19);
  v134 = v22;
  if (a3)
  {
    v23 = a3[9].f32[1];
    v24 = v23;
    v25 = fabs(v23);
    if ((unint64_t)(*(_QWORD *)&v25 - 0x10000000000000) >> 53 > 0x3FE && *(_QWORD *)&v25 != 0)
      return 1;
    v27 = v23 > 8.0;
    v28 = 4.0;
    if (v27)
      v28 = 8.0;
    for (i = 1.0; v24 > v28; v24 = v24 * 0.5)
      i = i * 0.5;
    v30 = (int8x16_t)vmulq_n_f64(vcvtq_f64_f32(a3[10]), *((double *)this + 10));
    v31 = vdup_n_s32((*((_DWORD *)a2 + 32) & 8) == 0);
    v32.i64[0] = v31.u32[0];
    v32.i64[1] = v31.u32[1];
    v22 = vaddq_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), v30, (int8x16_t)vrndaq_f64((float64x2_t)v30)), v22);
    v134 = v22;
  }
  else
  {
    i = 1.0;
  }
  v33 = i * v13;
  *(double *)&v128[4] = v33 * *(double *)v133;
  v129 = vmuld_lane_f64(v33, v20, 1);
  v130 = v33 * v21.f64[0];
  v131 = vmuld_lane_f64(v33, v21, 1);
  v132 = v22;
  v34 = -(v33 * v21.f64[0] * v129 - v131 * (v33 * *(double *)v133));
  v35 = -(v131 * (v33 * *(double *)v133) - v33 * v21.f64[0] * v129);
  if (v34 >= 0.0)
    v35 = v34;
  if (v35 > 32768.0)
    return 0;
  if (!CGGlyphLockAccess())
    return 0;
  v128[3] = 0;
  QuantizationLevel = CGGlyphLockGetQuantizationLevel();
  if (!(_DWORD)QuantizationLevel)
    return 0;
  v37 = (_QWORD *)*((_QWORD *)this + 1);
  v38 = *((_QWORD *)a2 + 23);
  v39 = 4 * v38;
  v40 = 8 * v38;
  if ((unint64_t)(4 * v38) > 0x1000)
  {
    v42 = (char *)malloc_type_malloc(4 * v38, 0x1908288EuLL);
    v41 = v42;
  }
  else
  {
    MEMORY[0x1E0C80A78](QuantizationLevel);
    v41 = (char *)&v116 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v41, v39);
  }
  if (v40 > 0x1000)
  {
    v124 = (char *)malloc_type_malloc(v40, 0xAAB13D6AuLL);
    v126 = (uint64_t *)malloc_type_malloc(v40, 0x1E964644uLL);
  }
  else
  {
    MEMORY[0x1E0C80A78](v42);
    v45 = (v40 + 15) & 0xFFFFFFFFFFFFFFF0;
    v124 = (char *)&v116 - v45;
    bzero((char *)&v116 - v45, v40);
    MEMORY[0x1E0C80A78](v46);
    v126 = (uint64_t *)((char *)&v116 - v45);
    bzero((char *)&v116 - v45, v40);
  }
  v121 = v37;
  if (a3 || !(*(unsigned int (**)(_QWORD *, uint64_t))(*v37 + 184))(v37, 19))
  {
    v47 = 0;
  }
  else
  {
    v48 = *(unsigned __int8 *)(v37[2] + 480);
    v47 = v48 != 12 && (v48 - 1) < 0x19;
  }
  v43 = 0;
  if (v41 && v124 && v126)
  {
    v128[1] = 0;
    v128[2] = 0;
    CGFontGetGlyphIdentifiers();
    v50 = CGGlyphLockLockGlyphBitmaps();
    if (!(_DWORD)v50)
    {
      v43 = 0;
      goto LABEL_158;
    }
    if (v47)
    {
      v43 = CA::OGL::GlyphCache::emit_glyphs((CA::CG *)((char *)this + 2544), *((_QWORD *)a2 + 23), (uint64_t)v126, (uint64_t)v124);
      v51 = v121;
LABEL_157:
      *(_BYTE *)(v51[2] + 16) = 0;
      CGGlyphLockUnlock();
      goto LABEL_158;
    }
    v52 = *((_QWORD *)a2 + 23);
    v117 = 24 * v52;
    if ((unint64_t)(24 * v52) > 0x1000)
    {
      v123 = (char *)malloc_type_malloc(24 * v52, 0xE0CA2311uLL);
      v52 = *((_QWORD *)a2 + 23);
    }
    else
    {
      MEMORY[0x1E0C80A78](v50);
      v123 = (char *)&v116 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v123, v53);
    }
    v127 = (uint64_t *)((char *)this + 4184);
    v119 = v40;
    v120 = v41;
    if (!v52)
    {
      v86 = 0;
LABEL_107:
      v87 = *((_QWORD *)this + 526);
      v51 = v121;
      if (v87 >= 0x801)
      {
        do
        {
          v88 = (_QWORD *)*((_QWORD *)this + 525);
          v89 = *(int8x8_t *)((char *)this + 4192);
          v90 = v88[1];
          v91 = (uint8x8_t)vcnt_s8(v89);
          v91.i16[0] = vaddlv_u8(v91);
          if (v91.u32[0] > 1uLL)
          {
            if (v90 >= *(_QWORD *)&v89)
              v90 %= *(_QWORD *)&v89;
          }
          else
          {
            v90 &= *(_QWORD *)&v89 - 1;
          }
          v92 = *(_QWORD **)(*v127 + 8 * v90);
          do
          {
            v93 = v92;
            v92 = (_QWORD *)*v92;
          }
          while (v92 != v88);
          if (v93 == (_QWORD *)((char *)this + 4200))
            goto LABEL_125;
          v94 = v93[1];
          if (v91.u32[0] > 1uLL)
          {
            if (v94 >= *(_QWORD *)&v89)
              v94 %= *(_QWORD *)&v89;
          }
          else
          {
            v94 &= *(_QWORD *)&v89 - 1;
          }
          if (v94 != v90)
          {
LABEL_125:
            if (!*v88)
              goto LABEL_126;
            v95 = *(_QWORD *)(*v88 + 8);
            if (v91.u32[0] > 1uLL)
            {
              if (v95 >= *(_QWORD *)&v89)
                v95 %= *(_QWORD *)&v89;
            }
            else
            {
              v95 &= *(_QWORD *)&v89 - 1;
            }
            if (v95 != v90)
LABEL_126:
              *(_QWORD *)(*v127 + 8 * v90) = 0;
          }
          v96 = *v88;
          if (*v88)
          {
            v97 = *(_QWORD *)(v96 + 8);
            if (v91.u32[0] > 1uLL)
            {
              if (v97 >= *(_QWORD *)&v89)
                v97 %= *(_QWORD *)&v89;
            }
            else
            {
              v97 &= *(_QWORD *)&v89 - 1;
            }
            if (v97 != v90)
            {
              *(_QWORD *)(*v127 + 8 * v97) = v93;
              v96 = *v88;
            }
          }
          *v93 = v96;
          *((_QWORD *)this + 526) = v87 - 1;
          operator delete(v88);
          v87 = *((_QWORD *)this + 526);
        }
        while (v87 > 0x800);
        v86 = *((_QWORD *)a2 + 23);
      }
      v98 = v51[2];
      v99 = *(_QWORD *)(v98 + 8);
      if (v86 && *(_DWORD *)(*v126 + 28) == 16)
      {
        _H0 = *((_WORD *)a2 + 44);
        __asm { FCVT            S0, H0 }
        v54.i32[0] = *(_DWORD *)((char *)a2 + 90);
        v104 = vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(v54), (float32x2_t)0x3E0000003F000000);
        v105 = (int)(float)((float)(v104.f32[0] + (float)(_S0 * 0.375)) + v104.f32[1]);
        if (v105 >= 0x55)
          v106 = 2 * (v105 > 0xAA);
        else
          v106 = 1;
      }
      else
      {
        v106 = 0;
      }
      v107 = *(_QWORD *)(v98 + 16) & 0xFFFFFF00FF00FF00;
      if (v99 == 0x3C003C003C003C00)
        v108 = 1;
      else
        v108 = 3;
      *(_DWORD *)(v98 + 16) = v108 | v107;
      *(_DWORD *)(v98 + 20) = HIDWORD(v107);
      v109 = v51[2];
      if ((*(_BYTE *)(v109 + 481) & 1) != 0 && *(unsigned __int8 *)(v109 + 480) <= 1u)
      {
        *(_BYTE *)(v109 + 481) &= ~1u;
        v110 = 1;
      }
      else
      {
        v110 = 0;
      }
      v111 = *((_DWORD *)this + 384);
      if ((v111 & 0x80000000) != 0)
      {
        LODWORD(v127) = v110;
        v112 = v39;
        *((_DWORD *)this + 384) = 0;
        *((_WORD *)this + 770) = 0;
        v113 = *((_QWORD *)this + 1);
        memset(v135, 0, sizeof(v135));
        v114 = i;
        v128[0] = v99;
        CA::CG::GlyphDelegate::GlyphDelegate((uint64_t)v135, (uint64_t)this, v113, v128, v106, (uint64_t)a3, v114);
        CA::CG::emit_glyphs(v113, (uint64_t)v135, (uint64_t)this + 1392, *((_QWORD *)a2 + 23), v126, (uint64_t)v124, (uint64_t)v123);
        CA::CG::GlyphDelegate::~GlyphDelegate((CA::CG::GlyphDelegate *)v135);
        v115 = *((_QWORD *)this + 194);
        if (v115)
        {
          (*(void (**)(_QWORD *, uint64_t, _QWORD))(*v51 + 520))(v51, v115, 0);
          *((_QWORD *)this + 194) = 0;
          *((_DWORD *)this + 386) = -1;
        }
        *((_DWORD *)this + 384) = -1;
        *((_QWORD *)this + 188) = 0;
        v39 = v112;
        v40 = v119;
        v110 = (int)v127;
      }
      v43 = v111 >> 31;
      if (v110)
        *(_BYTE *)(v51[2] + 481) |= 1u;
      v41 = v120;
      if (v117 > 0x1000 && v123)
        free(v123);
      goto LABEL_157;
    }
    v116 = v39;
    v55 = 0;
    v118 = (_QWORD *)((char *)this + 4200);
    while (1)
    {
      v125 = v126[v55];
      v56 = *(unsigned int *)(v125 + 36);
      v57 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v127, *(_DWORD *)(v125 + 36));
      if (!v57)
        break;
LABEL_102:
      if (v123)
      {
        v83 = &v123[24 * v55];
        v84 = v57[5];
        *(_QWORD *)v83 = off_1E1593A28;
        v85 = *(_QWORD *)(v125 + 20);
        *((_DWORD *)v83 + 2) = v84;
        *((_DWORD *)v83 + 3) = *(_DWORD *)&v41[4 * v55];
        *((_QWORD *)v83 + 2) = v85;
      }
      ++v55;
      v86 = *((_QWORD *)a2 + 23);
      if (v55 >= v86)
      {
        v39 = v116;
        goto LABEL_107;
      }
    }
    v59 = (unsigned __int8 *)(v125 + 40);
    v60 = *(_DWORD *)(v125 + 24) * *(_DWORD *)(v125 + 32);
    if (v60 < 4)
    {
      v65 = 0;
      v61 = 190295070;
    }
    else
    {
      v61 = 190295070;
      v62 = (*(_DWORD *)(v125 + 24) * *(_DWORD *)(v125 + 32));
      do
      {
        v63 = *(_DWORD *)v59;
        v59 += 4;
        HIDWORD(v64) = (461845907 * ((380141568 * v63) | ((-862048943 * v63) >> 17))) ^ v61;
        LODWORD(v64) = HIDWORD(v64);
        v61 = 5 * (v64 >> 19) - 430675100;
        v62 -= 4;
      }
      while (v62 > 3);
      v65 = v60 & 0xFFFFFFFC;
      v60 = v62;
    }
    v66 = 0;
    if (v60 != 1)
    {
      if (v60 != 2)
      {
        if (v60 != 3)
          goto LABEL_62;
        v66 = v59[2] << 16;
      }
      v66 |= v59[1] << 8;
    }
    HIDWORD(v67) = (461845907 * ((380141568 * (v66 ^ *v59)) | ((-862048943 * (v66 ^ *v59)) >> 17))) ^ v61;
    LODWORD(v67) = HIDWORD(v67);
    v61 = 5 * (v67 >> 19) - 430675100;
    v65 += 4;
LABEL_62:
    v68 = *((_QWORD *)this + 524);
    if (v68)
    {
      v69 = (uint8x8_t)vcnt_s8((int8x8_t)v68);
      v69.i16[0] = vaddlv_u8(v69);
      if (v69.u32[0] > 1uLL)
      {
        v70 = v56;
        if (v68 <= v56)
          v70 = v56 % v68;
      }
      else
      {
        v70 = ((_DWORD)v68 - 1) & v56;
      }
      v71 = *(void ***)(*v127 + 8 * v70);
      if (v71)
      {
        v57 = *v71;
        if (*v71)
        {
          do
          {
            v72 = *((_QWORD *)v57 + 1);
            if (v72 == v56)
            {
              if (v57[4] == (_DWORD)v56)
              {
                v41 = v120;
                goto LABEL_101;
              }
            }
            else
            {
              if (v69.u32[0] > 1uLL)
              {
                if (v72 >= v68)
                  v72 %= v68;
              }
              else
              {
                v72 &= v68 - 1;
              }
              if (v72 != v70)
                break;
            }
            v57 = *(_DWORD **)v57;
          }
          while (v57);
        }
      }
    }
    else
    {
      v70 = 0;
    }
    v73 = -2048144789 * (v61 ^ v65 ^ ((v61 ^ v65) >> 16));
    LODWORD(v58) = v56;
    DWORD1(v58) = (-1028477387 * (v73 ^ (v73 >> 13))) ^ ((-1028477387 * (v73 ^ (v73 >> 13))) >> 16);
    v122 = v58;
    v57 = operator new(0x18uLL);
    *(_QWORD *)v57 = 0;
    *((_QWORD *)v57 + 1) = v56;
    *((_QWORD *)v57 + 2) = v122;
    v74 = (float)(unint64_t)(*((_QWORD *)this + 526) + 1);
    v54.i32[0] = *((_DWORD *)this + 1054);
    if (!v68 || (float)(*(float *)v54.i32 * (float)v68) < v74)
    {
      v75 = (v68 & (v68 - 1)) != 0;
      if (v68 < 3)
        v75 = 1;
      v76 = v75 | (2 * v68);
      v77 = vcvtps_u32_f32(v74 / *(float *)v54.i32);
      if (v76 <= v77)
        v78 = v77;
      else
        v78 = v76;
      std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>((uint64_t)v127, v78);
      v68 = *((_QWORD *)this + 524);
      if ((v68 & (v68 - 1)) != 0)
      {
        if (v68 <= v56)
          v70 = v56 % v68;
        else
          v70 = v56;
      }
      else
      {
        v70 = ((_DWORD)v68 - 1) & v56;
      }
    }
    v79 = *v127;
    v80 = *(_QWORD **)(*v127 + 8 * v70);
    if (v80)
    {
      *(_QWORD *)v57 = *v80;
      v41 = v120;
    }
    else
    {
      v81 = v118;
      *(_QWORD *)v57 = *v118;
      *v81 = v57;
      *(_QWORD *)(v79 + 8 * v70) = v81;
      v41 = v120;
      if (!*(_QWORD *)v57)
        goto LABEL_100;
      v82 = *(_QWORD *)(*(_QWORD *)v57 + 8);
      if ((v68 & (v68 - 1)) != 0)
      {
        if (v82 >= v68)
          v82 %= v68;
      }
      else
      {
        v82 &= v68 - 1;
      }
      v80 = (_QWORD *)(*v127 + 8 * v82);
    }
    *v80 = v57;
LABEL_100:
    ++*((_QWORD *)this + 526);
LABEL_101:
    v40 = v119;
    goto LABEL_102;
  }
LABEL_158:
  if (v40 > 0x1000 && v126)
    free(v126);
  if (v40 > 0x1000 && v124)
    free(v124);
  if (v39 > 0x1000 && v41)
    free(v41);
  return v43;
}

uint64_t CA::OGL::GlyphCache::emit_glyphs(CA::OGL::GlyphCache *this, unint64_t a2, uint64_t a3, uint64_t a4)
{
  CA::OGL::GlyphCache *v7;
  _QWORD *v8;
  unint64_t v9;
  unsigned int v10;
  _DWORD *v11;
  int v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  unsigned int *v16;
  size_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  CA::OGL::GlyphCache *v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  unsigned int v25;
  char *v26;
  char *v27;
  unint64_t v28;
  CA::OGL::GlyphCache *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unsigned int v34;
  uint64_t v35;

  v7 = this;
  v35 = *MEMORY[0x1E0C80C00];
  v8 = (_QWORD *)*((_QWORD *)this + 1);
  if (!v8)
  {
    CA::OGL::GlyphCache::reallocate(this);
    v8 = (_QWORD *)*((_QWORD *)v7 + 1);
    if (!v8)
      return 0;
  }
  if (a2)
  {
    v9 = 0;
    v10 = 1;
    do
    {
      v11 = *(_DWORD **)(a3 + 8 * v9);
      v13 = v11[5];
      v12 = v11[6];
      if (v13)
        v14 = v12 == 0;
      else
        v14 = 1;
      if (!v14 && (*((_QWORD *)v7 + 2) < (unint64_t)(v13 * v12) || v11[7] != 8))
        return 0;
      v9 = v10++;
    }
    while (v9 < a2);
    v15 = 0;
    v30 = a4;
    v31 = 0;
    v33 = (_QWORD *)((char *)v7 + 40);
    v29 = v7;
    while (1)
    {
      v16 = *(unsigned int **)(a3 + 8 * v15);
      v17 = v16[5];
      if (!(_DWORD)v17)
        goto LABEL_24;
      v18 = v16[6];
      if (!v18)
        goto LABEL_24;
      v34 = v16[9];
      v19 = v34;
      if (std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v33, v34))
      {
        goto LABEL_24;
      }
      v20 = v17 * v18;
      v21 = v7;
      v22 = *((_QWORD *)v7 + 3);
      v32 = v20;
      if ((unint64_t)(v22 + v20) <= v8[1])
        goto LABEL_20;
      result = CA::OGL::GlyphCache::flush(v21, v15 - v31, a3 + 8 * v31, a4 + 8 * v31);
      if (!(_DWORD)result)
        return result;
      CA::OGL::GlyphCache::reallocate(v21);
      v22 = *((_QWORD *)v21 + 3);
      if (v16[6])
        break;
      v31 = v15;
LABEL_23:
      *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v33, v19, &v34)+ 5) = v22;
      v28 = *((_QWORD *)v21 + 3) + v32;
      *((_QWORD *)v21 + 3) = v28;
      v8 = (_QWORD *)*((_QWORD *)v21 + 1);
      v7 = v21;
      if (v28 > v8[1])
        __assert_rtn("emit_glyphs", "ogl-glyph-cache.cpp", 177, "_buffer_end <= _buffer->size");
LABEL_24:
      if (++v15 == a2)
        return CA::OGL::GlyphCache::flush(v7, a2 - v31, a3 + 8 * v31, a4 + 8 * v31);
    }
    v8 = (_QWORD *)*((_QWORD *)v21 + 1);
    v17 = v16[5];
    v31 = v15;
LABEL_20:
    v24 = v16[8];
    v25 = 0;
    v26 = (char *)(*v8 + v22);
    v27 = (char *)(v16 + 10);
    do
    {
      memcpy(v26, v27, v17);
      v27 += v24;
      v26 += v17;
      ++v25;
    }
    while (v25 < v16[6]);
    v21 = v29;
    a4 = v30;
    v22 = *((_QWORD *)v29 + 3);
    goto LABEL_23;
  }
  v31 = 0;
  return CA::OGL::GlyphCache::flush(v7, a2 - v31, a3 + 8 * v31, a4 + 8 * v31);
}

uint64_t CA::OGL::GlyphCache::flush(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  __int128 v24;
  float32x4_t v25;
  _QWORD v26[3];
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 1;
  v6 = a2;
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 824))(*a1, 24 * a2, 16);
  if (!result)
    return result;
  v9 = result;
  v10 = 0;
  v11 = *(_QWORD *)result;
  v12 = (_DWORD *)(a4 + 4);
  do
  {
    v13 = *(_DWORD **)a3;
    if (*(_DWORD *)(*(_QWORD *)a3 + 20) && v13[6])
    {
      v14 = v10 + 1;
      v15 = v11 + 24 * v10;
      *(float *)&v16 = (float)(v13[3] + *(v12 - 1));
      *(_DWORD *)v15 = v16;
      *((float *)&v16 + 1) = (float)(v13[4] + *v12);
      *(_QWORD *)v15 = v16;
      *(float *)&v16 = (float)v13[5];
      *(_DWORD *)(v15 + 8) = v16;
      *((float *)&v16 + 1) = (float)v13[6];
      *(_QWORD *)(v15 + 8) = v16;
      *(float *)(v15 + 16) = (float)*((unsigned int *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)(a1 + 5), v13[9], v13 + 9)+ 5);
      *(float *)(v15 + 20) = (float)v13[5];
      v10 = v14;
    }
    v12 += 2;
    a3 += 8;
    --v6;
  }
  while (v6);
  if (v10)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)*a1 + 840))(*a1, v9, 24 * v10, 0);
    v18 = a1[3];
    v17 = a1[4];
    if (v18 > v17)
    {
      (*(void (**)(_QWORD, _QWORD, unint64_t))(*(_QWORD *)*a1 + 840))(*a1, a1[1], v18 - v17);
      a1[4] = a1[3];
    }
    *(_BYTE *)(*(_QWORD *)(*a1 + 16) + 16) = 92;
    v19 = *a1;
    v20 = *(_QWORD *)(*(_QWORD *)(*a1 + 16) + 8);
    v21 = (*(unsigned __int16 *)(*a1 + 816) >> 12) & 7;
    v22 = HIWORD(v20);
    if (v21 != 2)
    {
      if (v21 != 1)
        goto LABEL_15;
      v20 = v20 & 0xFFFFFFFFFFFF0000 | v22;
    }
    v20 = v20 & 0xFFFF00000000FFFFLL | (v22 << 16) | (v22 << 32);
LABEL_15:
    v25 = vmulq_f32(vcvtq_f32_f16((float16x4_t)v20), (float32x4_t)vdupq_n_s32(0x3B808081u));
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, float32x4_t *))(*(_QWORD *)v19 + 1000))(v19, 0, 4, 1, &v25);
    v24 = 0u;
    v28 = 0u;
    v23 = *(_QWORD *)(*(_QWORD *)(*a1 + 232) + 8);
    v26[0] = *a1;
    v26[1] = v23;
    v27 = 0u;
    v26[2] = 0;
    WORD4(v27) = 0;
    CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)v26);
    while (CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)v26, (int32x2_t *)&v24))(*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)*a1 + 368))(*a1, v10, v9, a1[1]);
  }
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 832))(*a1, v9);
  return 1;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v5 = a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = a2;
      if (v6 <= a2)
        v8 = a2 % v6;
    }
    else
    {
      v8 = ((_DWORD)v6 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v8);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v11 >= v6)
                v11 %= v6;
            }
            else
            {
              v11 &= v6 - 1;
            }
            if (v11 != v8)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    v8 = 0;
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v5;
  *((_DWORD *)v10 + 4) = *a3;
  *((_DWORD *)v10 + 5) = 0;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    v14 = 1;
    if (v6 >= 3)
      v14 = (v6 & (v6 - 1)) != 0;
    v15 = v14 | (2 * v6);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>(a1, v17);
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
        v8 = v5 % v6;
      else
        v8 = v5;
    }
    else
    {
      v8 = ((_DWORD)v6 - 1) & v5;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v8) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v20 >= v6)
        v20 %= v6;
    }
    else
    {
      v20 &= v6 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void CA::OGL::MetalBufferPool::release_external_buffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  malloc_zone_t *malloc_zone;
  malloc_zone_t *v6;

  if (*(_QWORD *)(a2 + 16))
  {

  }
  else
  {
    v3 = *(_QWORD *)(a2 + 24);
    v4 = *(_DWORD *)(v3 + 24) - 1;
    *(_DWORD *)(v3 + 24) = v4;
    if (!v4 && *(_QWORD *)(a1 + 48) != v3)
    {
      CA::OGL::MetalBufferPool::retire_metal_buffer(a1, *(_QWORD *)v3);
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(malloc_zone, (void *)v3);
    }
  }
  v6 = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(v6, (void *)a2);
}

_QWORD *CA::OGL::MetalBufferPool::create_external_buffer(CA::OGL::MetalBufferPool *this, unsigned int a2, unint64_t a3, uint64_t a4)
{
  void *v8;
  id v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *result;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  malloc_zone_t *v19;
  _OWORD *v20;
  malloc_zone_t *malloc_zone;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  malloc_zone_t *v27;
  _OWORD *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  malloc_zone_t *v32;
  uint64_t v33;

  if (!a2)
    return 0;
  if (!a4)
  {
    v20 = (_OWORD *)*((_QWORD *)this + 6);
    if (!v20)
    {
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      v20 = malloc_type_zone_calloc(malloc_zone, 1uLL, 0x20uLL, 0x743898A5uLL);
      if (v20)
      {
        *v20 = 0u;
        v20[1] = 0u;
      }
      *((_QWORD *)this + 6) = v20;
    }
    v22 = *((unsigned int *)this + 11);
    if (v22 <= a3)
      v22 = a3;
    v23 = v22 - 1 + *((unsigned int *)v20 + 4);
    v24 = v23 / v22 * v22;
    v25 = v23 & -(uint64_t)v22;
    if ((v22 & (v22 - 1)) != 0)
      v26 = v24;
    else
      v26 = v25;
    if (*(_QWORD *)v20)
    {
      if (*((_DWORD *)v20 + 5) >= v26 + a2)
      {
LABEL_29:
        *((_DWORD *)v20 + 4) = v26 + a2;
        ++*((_DWORD *)v20 + 6);
        v32 = (malloc_zone_t *)get_malloc_zone();
        result = malloc_type_zone_calloc(v32, 1uLL, 0x30uLL, 0x743898A5uLL);
        v33 = *((_QWORD *)this + 6);
        *result = *(_QWORD *)(v33 + 8) + v26;
        result[1] = a2;
        result[3] = v33;
        result[4] = **((_QWORD **)this + 6);
        *((_DWORD *)result + 10) = v26;
        return result;
      }
      if (*((_DWORD *)v20 + 6))
      {
        v27 = (malloc_zone_t *)get_malloc_zone();
        v28 = malloc_type_zone_calloc(v27, 1uLL, 0x20uLL, 0x743898A5uLL);
        if (v28)
        {
          *v28 = 0u;
          v28[1] = 0u;
        }
        *((_QWORD *)this + 6) = v28;
      }
      else
      {
        CA::OGL::MetalBufferPool::retire_metal_buffer((uint64_t)this, *(_QWORD *)v20);
        **((_QWORD **)this + 6) = 0;
      }
    }
    result = CA::OGL::MetalBufferPool::allocate_buffer((os_unfair_lock_s *)this, a2);
    **((_QWORD **)this + 6) = result;
    if (!result)
      return result;
    v29 = objc_msgSend(result, "contents");
    v30 = *((_QWORD *)this + 6);
    *(_QWORD *)(v30 + 8) = v29;
    v31 = objc_msgSend(*(id *)v30, "length");
    v26 = 0;
    v20 = (_OWORD *)*((_QWORD *)this + 6);
    *((_DWORD *)v20 + 5) = v31;
    goto LABEL_29;
  }
  v8 = *(void **)this;
  v9 = (id)objc_opt_new();
  v10 = v9;
  v11 = a3 - 1 + a2;
  v12 = v11 / a3 * a3;
  v13 = v11 & -(uint64_t)a3;
  if ((a3 & (a3 - 1)) != 0)
    v14 = v12;
  else
    v14 = v13;
  objc_msgSend(v9, "setSize:", v14);
  objc_msgSend(v10, "setProtectionOptions:", a4);
  objc_msgSend(v10, "setHazardTrackingMode:", 2);
  result = (_QWORD *)objc_msgSend(v8, "newHeapWithDescriptor:", v10);
  if (result)
  {
    v16 = result;
    v17 = objc_msgSend(result, "newBufferWithLength:options:", a2, 32);
    if (v17)
    {
      v18 = v17;
      v19 = (malloc_zone_t *)get_malloc_zone();
      result = malloc_type_zone_calloc(v19, 1uLL, 0x30uLL, 0x743898A5uLL);
      result[1] = a2;
      result[2] = a4;
      result[3] = v16;
      result[4] = v18;
    }
    else
    {

      return 0;
    }
  }
  return result;
}

void *CA::OGL::MetalBufferPool::allocate_buffer(os_unfair_lock_s *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  uint8_t buf[4];
  int v13;
  uint64_t v14;

  LODWORD(v2) = a2;
  v14 = *MEMORY[0x1E0C80C00];
  if (a2 <= 0x40000)
  {
    os_unfair_lock_lock(this + 14);
    v4 = *(_QWORD *)&this[70]._os_unfair_lock_opaque;
    if (v4)
    {
      v5 = v4 - 1;
      v6 = *(void **)(*(_QWORD *)(*(_QWORD *)&this[62]._os_unfair_lock_opaque
                                + (((unint64_t)(*(_QWORD *)&this[68]._os_unfair_lock_opaque + v5) >> 6) & 0x3FFFFFFFFFFFFF8))
                    + 8 * ((*(_QWORD *)&this[68]._os_unfair_lock_opaque + v5) & 0x1FF));
      *(_QWORD *)&this[70]._os_unfair_lock_opaque = v5;
      std::deque<objc_object  {objcproto9MTLBuffer}*>::__maybe_remove_back_spare[abi:nn180100](&this[60]._os_unfair_lock_opaque);
      os_unfair_lock_unlock(this + 14);
      if (v6)
        return v6;
    }
    else
    {
      v7 = *(_QWORD *)&this[82]._os_unfair_lock_opaque;
      if (v7)
      {
        v8 = v7 - 1;
        v6 = *(void **)(*(_QWORD *)(*(_QWORD *)&this[74]._os_unfair_lock_opaque
                                  + (((unint64_t)(*(_QWORD *)&this[80]._os_unfair_lock_opaque + v8) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((*(_QWORD *)&this[80]._os_unfair_lock_opaque + v8) & 0x1FF));
        *(_QWORD *)&this[82]._os_unfair_lock_opaque = v8;
        std::deque<objc_object  {objcproto9MTLBuffer}*>::__maybe_remove_back_spare[abi:nn180100](&this[72]._os_unfair_lock_opaque);
        os_unfair_lock_unlock(this + 14);
        if (v6)
        {
          objc_msgSend(v6, "setPurgeableState:", 2);
          return v6;
        }
      }
      else
      {
        os_unfair_lock_unlock(this + 14);
      }
    }
  }
  if (v2 <= 0x40000)
    v2 = 0x40000;
  else
    v2 = v2;
  v9 = (void *)objc_msgSend(*(id *)&this->_os_unfair_lock_opaque, "newBufferWithLength:options:", v2, 0);
  if (v9)
  {
    v6 = v9;
    objc_msgSend(v9, "setLabel:", CFSTR("com.apple.coreanimation.buffer"));
  }
  else
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v10 = x_log_category_ogl_metal;
      if (os_log_type_enabled((os_log_t)x_log_category_ogl_metal, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v13 = v2;
        _os_log_impl(&dword_184457000, v10, OS_LOG_TYPE_ERROR, "Failed to allocate %u-byte Metal buffer\n", buf, 8u);
      }
    }
    return 0;
  }
  return v6;
}

void CA::OGL::MetalContext::finalize_buffer(uint64_t a1, uint64_t a2)
{
  CA::OGL::MetalBufferPool::release_external_buffer(*(_QWORD *)(a1 + 3992), a2);
}

_QWORD *CA::OGL::MetalContext::create_buffer(CA::OGL::MetalBufferPool **this, unsigned int a2, unint64_t a3)
{
  return CA::OGL::MetalBufferPool::create_external_buffer(this[499], a2, a3, 0);
}

void CA::OGL::MetalContext::draw_buffer_image_rects(CA::OGL::Context *a1, unsigned int a2, char *a3, uint64_t a4)
{
  if (*(_BYTE *)(*((_QWORD *)a1 + 2) + 16) != 92)
    __assert_rtn("draw_buffer_image_rects", "ogl-metal.mm", 8138, "get_texture_function () == OGL_TEX_BUFFER_IMAGE_BLIT");
  CA::OGL::MetalContext::draw(a1, 4, 4u, a2, a3, 0, 0, 0, a2, 0, 0, a4);
}

uint64_t CA::CG::GlyphDelegate::GlyphDelegate(uint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4, int a5, uint64_t a6, float a7)
{
  float v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  *(_QWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = a3;
  *(_QWORD *)(a3 + 96) = a3 + 818;
  *(_QWORD *)(a3 + 128) = 0;
  *(_OWORD *)(a3 + 104) = xmmword_18474E060;
  *(_QWORD *)result = &off_1E1591D18;
  *(_QWORD *)(result + 24) = *a4;
  *(_DWORD *)(result + 32) = a5;
  *(_QWORD *)(result + 40) = a6;
  *(float *)(result + 48) = a7;
  *(float *)(result + 52) = 1.0 / a7;
  *(_QWORD *)(result + 88) = 0;
  if (a6)
  {
    v7 = *(float *)(a6 + 76) * (a7 * *(double *)(a2 + 80));
    v8 = ((float)((float)(v7 * 256.0) + 0.5) << 10) | 1;
    v9 = vcvtps_s32_f32((float)(v7 * 2.82) + 0.5);
    if (v7 <= 0.6)
      v9 = 0;
    v10 = 2 * v9;
  }
  else
  {
    v8 = 0;
    v10 = 0;
    v9 = 0;
  }
  *(_DWORD *)(result + 60) = v9;
  *(_DWORD *)(result + 64) = v10;
  *(_DWORD *)(result + 56) = v8 | (a5 << 8);
  return result;
}

void CA::CG::emit_glyphs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int32x2_t v22;
  int8x8_t v23;
  int8x8_t v24;
  int32x2_t v25;
  __int32 v26;
  int v27;
  int32x2_t *v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t i;
  char **v35;
  char *j;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  int32x2_t *v40;
  char *v41;
  uint64_t k;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  _OWORD v51[6];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 768))(a1);
  if ((v13 & 1) != 0)
  {
    if ((unint64_t)(8 * a4) > 0x1000)
    {
      v14 = (char *)malloc_type_malloc(8 * a4, 0x2004093837F09uLL);
      if (!v14)
        return;
    }
    else
    {
      MEMORY[0x1E0C80A78](v13);
      v14 = (char *)&v45 - ((8 * a4 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v14, 8 * a4);
    }
    v17 = 0;
    memset(v51, 0, sizeof(v51));
    do
    {
      *(_QWORD *)((char *)v51 + v17) = 0;
      v17 += 24;
    }
    while (v17 != 96);
    v46 = 8 * a4;
    if (a4)
    {
      v18 = 0;
      v47 = a4;
      do
      {
        v19 = 0;
        v20 = 0;
        v21 = a5[v18];
        *(int32x2_t *)&v15 = vadd_s32(*(int32x2_t *)(v21 + 12), *(int32x2_t *)(a6 + 8 * v18));
        v22 = *(int32x2_t *)(v21 + 20);
        v23 = (int8x8_t)vsub_s32(*(int32x2_t *)&v15, v22);
        v24 = (int8x8_t)vadd_s32(*(int32x2_t *)&v15, v22);
        v25 = (int32x2_t)vext_s8(v23, v24, 4uLL);
        v26 = v15;
        v27 = DWORD1(v15);
        do
        {
          v28 = (int32x2_t *)((char *)v51 + v19);
          v29 = *(_QWORD *)((char *)v51 + v19);
          if (!v29)
          {
            v39 = &v14[8 * v18];
            *(_QWORD *)v39 = 0;
            v40 = v28 + 1;
            goto LABEL_34;
          }
          v30 = v28[2].i32[0];
          if (v24.i32[0] < v30)
            v30 = v24.i32[0];
          v31 = v28[1].i32[0];
          if ((int)v15 > v31)
            v31 = v15;
          if (v30 <= v31)
            goto LABEL_31;
          v32 = *(_DWORD *)((char *)&v51[1] + v19 + 4);
          if (SDWORD1(v15) < v32)
            v32 = DWORD1(v15);
          v33 = *(_DWORD *)((char *)v51 + v19 + 12);
          if (v23.i32[1] > v33)
            v33 = v23.i32[1];
          if (v32 <= v33)
          {
LABEL_31:
            v28 = (int32x2_t *)((char *)v51 + v19);
            v39 = &v14[8 * v18];
            *(_QWORD *)v39 = v29;
            v40 = v28 + 1;
LABEL_32:
            *v40 = vmin_s32(*v40, vzip1_s32(*(int32x2_t *)&v15, v25));
            *((int32x2_t *)&v51[1] + 3 * v20) = vmax_s32(*(int32x2_t *)((char *)&v51[1] + 24 * v20), vzip2_s32(v25, *(int32x2_t *)&v15));
            goto LABEL_35;
          }
          ++v20;
          v19 += 24;
        }
        while (v20 != 4);
        v48 = v15;
        v49 = v15;
        v50 = v18;
        for (i = 0; i != 4; ++i)
        {
          v35 = (char **)v51 + 3 * i;
          for (j = *v35; j; j = *(char **)j)
          {
            v37 = *(uint64_t *)((char *)a5 + j - v14);
            *(_QWORD *)(a2 + 72) = v37;
            *(_QWORD *)(a2 + 80) = a6 + j - v14;
            CA::OGL::Mosaic::draw(a3, *(uint64_t **)(a2 + 16), *(_DWORD *)(a2 + 56), *(unsigned int *)(a7 + 24 * ((j - v14) >> 3) + 8), a7 + 24 * ((j - v14) >> 3), *(_DWORD *)(a2 + 64) + *(_DWORD *)(v37 + 20), *(_DWORD *)(v37 + 24) + *(_DWORD *)(a2 + 64), 0, a2, 0);
          }
          *v35 = 0;
          CA::CG::MosaicDelegate::draw_array(*(CA::CG::MosaicDelegate **)(a2 + 16));
        }
        v20 = 0;
        v18 = v50;
        v38 = *(_QWORD *)&v51[0];
        v28 = (int32x2_t *)v51;
        v39 = &v14[8 * v50];
        *(_QWORD *)v39 = *(_QWORD *)&v51[0];
        v40 = (int32x2_t *)v51 + 1;
        a4 = v47;
        v15 = v49;
        v26 = v48;
        v27 = HIDWORD(v48);
        if (v38)
          goto LABEL_32;
LABEL_34:
        v40->i32[0] = v26;
        v41 = (char *)v51 + 24 * v20;
        *(int32x2_t *)(v41 + 12) = v25;
        *((_DWORD *)v41 + 5) = v27;
LABEL_35:
        *v28 = (int32x2_t)v39;
        ++v18;
      }
      while (v18 != a4);
    }
    for (k = 0; k != 4; ++k)
    {
      v43 = (char *)*((_QWORD *)v51 + 3 * k);
      if (v43)
      {
        do
        {
          v44 = *(uint64_t *)((char *)a5 + v43 - v14);
          *(_QWORD *)(a2 + 72) = v44;
          *(_QWORD *)(a2 + 80) = a6 + v43 - v14;
          CA::OGL::Mosaic::draw(a3, *(uint64_t **)(a2 + 16), *(_DWORD *)(a2 + 56), *(unsigned int *)(a7 + 24 * ((v43 - v14) >> 3) + 8), a7 + 24 * ((v43 - v14) >> 3), *(_DWORD *)(a2 + 64) + *(_DWORD *)(v44 + 20), *(_DWORD *)(v44 + 24) + *(_DWORD *)(a2 + 64), 0, a2, 0);
          v43 = *(char **)v43;
        }
        while (v43);
        CA::CG::MosaicDelegate::draw_array(*(CA::CG::MosaicDelegate **)(a2 + 16));
      }
    }
    if (v46 > 0x1000)
      free(v14);
  }
  else
  {
    for (; a4; --a4)
    {
      v16 = *a5++;
      *(_QWORD *)(a2 + 72) = v16;
      *(_QWORD *)(a2 + 80) = a6;
      CA::OGL::Mosaic::draw(a3, *(uint64_t **)(a2 + 16), *(_DWORD *)(a2 + 56), *(unsigned int *)(a7 + 8), a7, *(_DWORD *)(a2 + 64) + *(_DWORD *)(v16 + 20), *(_DWORD *)(v16 + 24) + *(_DWORD *)(a2 + 64), 0, a2, 0);
      a7 += 24;
      a6 += 8;
    }
  }
}

uint64_t CA::OGL::MetalContext::state_requires_disjoint_primitives(CA::OGL::MetalContext *this)
{
  return 0;
}

int *CAImageQueueSetFlags(int *a1, unsigned int a2, unsigned int a3)
{
  return CAImageQueueSetFlagsInternal(a1, a2, a3);
}

uint64_t CA::DynamicFrameRateSource::commit_deadline(CA::DynamicFrameRateSource *this)
{
  unint64_t v2;
  uint64_t result;

  v2 = mach_absolute_time();
  result = *((_QWORD *)this + 5);
  if (v2 >= result)
  {
    result = CA::DynamicFrameRateSource::_commit_deadline_at_timestamp(this, v2);
    *((_QWORD *)this + 5) = result;
  }
  return result;
}

void CA::Display::DisplayLink::dispatch_deferred_display_links(CA::Display::DisplayLink *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  CA::Display::DisplayLink **v15;
  _QWORD v16[2];

  v1 = (int)this;
  v16[1] = *MEMORY[0x1E0C80C00];
  kdebug_trace();
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Display::DisplayLink::_list_lock);
  v3 = CA::Display::DisplayLink::_list;
  if (!CA::Display::DisplayLink::_list)
    goto LABEL_30;
  v4 = 0;
  v5 = CA::Display::DisplayLink::_list;
  do
  {
    if (*(_BYTE *)(v5 + 200) && (v1 == -1 || *(_DWORD *)(*(_QWORD *)(v5 + 8) + 104) == v1))
      ++v4;
    v5 = *(_QWORD *)(v5 + 48);
  }
  while (v5);
  if (!v4)
  {
LABEL_30:
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Display::DisplayLink::_list_lock);
    return;
  }
  v6 = 8 * v4;
  if ((unint64_t)(8 * v4) > 0x1000)
  {
    v7 = (uint64_t *)malloc_type_malloc(8 * v4, 0x357B3FA4uLL);
    v3 = CA::Display::DisplayLink::_list;
    if (CA::Display::DisplayLink::_list)
    {
LABEL_11:
      v8 = 0;
      do
      {
        if (*(_BYTE *)(v3 + 200) && (v1 == -1 || *(_DWORD *)(*(_QWORD *)(v3 + 8) + 104) == v1))
        {
          v9 = (unsigned int *)(v3 + 40);
          while (1)
          {
            v10 = *v9;
            if (!*v9)
              break;
            while (1)
            {
              v11 = __ldaxr(v9);
              if (v11 != v10)
                break;
              if (!__stlxr(v10 + 1, v9))
              {
                v7[v8++] = v3;
                goto LABEL_21;
              }
            }
            __clrex();
          }
        }
LABEL_21:
        v3 = *(_QWORD *)(v3 + 48);
      }
      while (v3);
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::Display::DisplayLink::_list_lock);
      if (v8)
      {
        v12 = v7;
        v13 = v8;
        do
        {
          v14 = *v12++;
          CA::Display::DisplayLink::callback(*(_QWORD *)(v14 + 208), *(_QWORD *)(v14 + 216), *(_QWORD *)(v14 + 224), 0, v14);
          --v13;
        }
        while (v13);
        v15 = (CA::Display::DisplayLink **)v7;
        do
        {
          if (*v15)
            CA::Display::DisplayLink::unref(*v15);
          ++v15;
          --v8;
        }
        while (v8);
      }
      goto LABEL_33;
    }
  }
  else
  {
    MEMORY[0x1E0C80A78](v2);
    v7 = (_QWORD *)((char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
    bzero(v7, v6);
    if (v3)
      goto LABEL_11;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Display::DisplayLink::_list_lock);
LABEL_33:
  if (v6 > 0x1000)
    free(v7);
}

void sub_184512E14(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Display::DisplayLink::_list_lock);
  _Unwind_Resume(a1);
}

void CA::Display::DisplayLink::dispatch_items(CA::Display::DisplayLink *this, unint64_t a2, unint64_t a3, uint64_t a4)
{
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  CA::Display::DisplayLink *v11;
  pthread_mutex_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  double v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  double v33;
  _BYTE *v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  double v38;
  double v39;
  uint64_t *v40;
  int started;
  _DWORD *v42;
  char v43;
  int v44;
  __CFRunLoop *Current;
  int v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  double v50;
  double v52;
  uint64_t v53;
  double v54;
  CA::Transaction *v55;
  uint64_t v56;
  unint64_t v57;
  pthread_mutex_t *v58;
  void *v59;
  CA::Display::DisplayLink *v60;
  _BYTE *v61;
  unint64_t v62;
  unint64_t StatusReg;
  double v64;
  double v65;
  _OWORD v66[2];
  uint64_t v67;
  uint64_t v68;

  v62 = a3;
  v68 = *MEMORY[0x1E0C80C00];
  v7 = (void *)MEMORY[0x186DBE2E4]();
  v65 = 1.79769313e308;
  v8 = (unsigned int *)((char *)this + 40);
  while (1)
  {
    v9 = *v8;
    if (!*v8)
      break;
    while (1)
    {
      v10 = __ldaxr(v8);
      if (v10 != v9)
        break;
      if (!__stlxr(v9 + 1, v8))
      {
        v11 = this;
        goto LABEL_7;
      }
    }
    __clrex();
  }
  v11 = 0;
LABEL_7:
  v12 = (pthread_mutex_t *)((char *)this + 56);
  v13 = pthread_mutex_lock((pthread_mutex_t *)((char *)this + 56));
  v15 = *((_QWORD *)this + 15);
  v14 = *((_QWORD *)this + 16);
  v16 = v14 - v15;
  if (v14 == v15)
  {
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 56));
  }
  else
  {
    v60 = v11;
    v57 = 2 * v16;
    if ((unint64_t)(2 * v16) > 0x1000)
    {
      v17 = (char *)malloc_type_malloc(2 * v16, 0x3E3F228uLL);
    }
    else
    {
      MEMORY[0x1E0C80A78](v13);
      v17 = (char *)&v56 - ((2 * v16 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v17, 2 * v16);
    }
    v18 = 0;
    if ((unint64_t)(v16 >> 3) <= 1)
      v19 = 1;
    else
      v19 = v16 >> 3;
    v20 = v17 + 8;
    do
    {
      v21 = *(_QWORD *)(*((_QWORD *)this + 15) + 8 * v18);
      *((_QWORD *)v20 - 1) = v21;
      *v20 = 0;
      CFRetain(*(CFTypeRef *)(v21 + 256));
      ++v18;
      v20 += 16;
    }
    while (v19 != v18);
    v58 = (pthread_mutex_t *)((char *)this + 56);
    v59 = v7;
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 56));
    v22 = v65;
    v61 = v17;
    v23 = v17 + 8;
    v24 = v19;
    do
    {
      v25 = *((_QWORD *)v23 - 1);
      pthread_mutex_lock((pthread_mutex_t *)(v25 + 136));
      if (*(CA::Display::DisplayLink **)(v25 + 264) == this)
      {
        v26 = *(_QWORD *)(v25 + 280);
        v27 = *(int *)(v25 + 56);
        v28 = *(int *)(v25 + 60);
        *(_DWORD *)(v25 + 60) = 0;
        if ((*(_BYTE *)(v25 + 316) & 1) == 0
          && (!(a2 % v27) || (_DWORD)v28 && !(a2 % v28) || (double)(v27 * a4) * 1.485 <= (double)(v62 - v26)))
        {
          *(_QWORD *)(v25 + 248) = pthread_self();
          *(_QWORD *)(v25 + 296) = a4;
          *(_QWORD *)(v25 + 280) = v62;
          v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25);
          v30 = v29 + v62;
          *(_QWORD *)(v25 + 288) = v30;
          v31 = *((_QWORD *)this + 1);
          if ((*(_BYTE *)(v31 + 697) & 1) != 0)
            v32 = 2;
          else
            v32 = 1;
          if (v32 <= *(_DWORD *)(v31 + 520))
            v32 = *(_DWORD *)(v31 + 520);
          LODWORD(v31) = *(_DWORD *)(v31 + 552);
          if (v32 <= v31)
            v31 = v31;
          else
            v31 = v32;
          *(_QWORD *)(v25 + 304) = v31 * a4;
          *v23 = 1;
          v33 = CATimeWithHostTime(v30);
          if (v22 >= v33)
            v22 = v33;
        }
      }
      pthread_mutex_unlock((pthread_mutex_t *)(v25 + 136));
      v23 += 16;
      --v24;
    }
    while (v24);
    v65 = v22;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v34 = v61;
    do
    {
      if (v34[8])
      {
        v35 = *(_QWORD *)v34;
        v36 = CATimeWithHostTime(*(_QWORD *)(*(_QWORD *)v34 + 280));
        v37 = mach_absolute_time();
        v38 = CATimeWithHostTime(v37);
        v39 = CATimeWithHostTime(*(_QWORD *)(v35 + 288));
        v40 = *(uint64_t **)(StatusReg + 576);
        if (v40)
          started = CA::Transaction::start_frame(v40[13], 4, v36, v38, v39);
        else
          started = 0;
        if (!*(_DWORD *)(v35 + 312))
        {
          v67 = BYTE9(xmmword_1ECDC6A90);
          if (BYTE9(xmmword_1ECDC6A90))
            kdebug_trace();
          memset(v66, 0, sizeof(v66));
          (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v35 + 48))(v35, v66);
          if ((_BYTE)v67)
            kdebug_trace();
        }
        if (!started)
        {
          v40 = *(uint64_t **)(StatusReg + 576);
          if (v40 && (v42 = (_DWORD *)v40[13], *v42))
            started = CA::Transaction::start_frame((uint64_t)v42, 4, v36, v38, v39);
          else
            started = 0;
        }
        pthread_mutex_lock((pthread_mutex_t *)(v35 + 136));
        *(_QWORD *)(v35 + 248) = 0;
        pthread_cond_broadcast((pthread_cond_t *)(v35 + 200));
        v43 = *(_BYTE *)(v35 + 316);
        v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 32))(v35);
        if (*(_BYTE *)(v35 + 129))
          CA::Display::DisplayLinkItem::run_deferred_unregister_frame_interval_range((CA::Display::DisplayLinkItem *)v35);
        pthread_mutex_unlock((pthread_mutex_t *)(v35 + 136));
        if (v44 | ((v43 & 2) >> 1))
        {
          Current = CFRunLoopGetCurrent();
          CA::Display::DisplayLinkItem::update_link((CA::Display::DisplayLinkItem *)v35, Current);
        }
        if (started)
          CA::Transaction::finish_frame((CA::Transaction *)v40);
      }
      CFRelease(*(CFTypeRef *)(*(_QWORD *)v34 + 256));
      v34 += 16;
      --v19;
    }
    while (v19);
    v7 = v59;
    v11 = v60;
    v12 = v58;
    if (v61 && v57 > 0x1000)
      free(v61);
  }
  pthread_mutex_lock(v12);
  if (*((_DWORD *)this + 36) == (uint64_t)(*((_QWORD *)this + 16) - *((_QWORD *)this + 15)) >> 3)
  {
    v46 = *((_DWORD *)this + 37);
    if (!v46 || (v47 = v46 - 1, (*((_DWORD *)this + 37) = v47) == 0))
      CA::Display::DisplayLink::pause_timer_locked((uint64_t)this);
  }
  pthread_mutex_unlock(v12);
  v48 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v49 = *(_QWORD *)(v48 + 576);
  if (v49)
  {
    if (CADeviceUseVBL::once[0] != -1)
      dispatch_once(CADeviceUseVBL::once, &__block_literal_global_12);
    if (!CADeviceUseVBL::use_vbl)
    {
      v50 = v65;
      if (**(_DWORD **)(v49 + 104) && v65 != 1.79769313e308)
      {
        *(_QWORD *)&v66[0] = 0;
        if ((CA::Transaction::get_value(*(_QWORD *)(v49 + 88), 189, (const CGAffineTransform *)0x12, (CA::Mat4Impl *)v66) & 1) == 0)
        {
          v52 = CATimeWithHostTime(v62) + 0.001;
          *(double *)v66 = v52;
          v53 = mach_absolute_time();
          if (v52 > CATimeWithHostTime(v53))
            CA::Transaction::set_value((CA::Transaction *)v49, (const void *)0xBD, 18, (unsigned __int8 *)v66);
        }
        v64 = 0.0;
        if (CA::Transaction::get_value(*(_QWORD *)(v49 + 88), 568, (const CGAffineTransform *)0x12, (CA::Mat4Impl *)&v64))
        {
          v54 = v64;
          if (v50 < v64)
            v54 = v50;
          v65 = v54;
        }
        CA::Transaction::set_value((CA::Transaction *)v49, (const void *)0x238, 18, (unsigned __int8 *)&v65);
      }
    }
  }
  if (v11)
    CA::Display::DisplayLink::unref(v11);
  objc_autoreleasePoolPop(v7);
  if ((CA::Transaction::_update_cycle_support_enabled & 1) == 0)
  {
    v55 = *(CA::Transaction **)(v48 + 576);
    if (v55)
    {
      if (**((_DWORD **)v55 + 13))
        CA::Transaction::flush(v55);
    }
  }
}

void sub_1845134C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  objc_end_catch();
  v3 = *(void **)(v1 - 232);
  if (*(_QWORD *)(v1 - 224))
    CA::Display::DisplayLink::unref(*(CA::Display::DisplayLink **)(v1 - 224));
  objc_autoreleasePoolPop(v3);
  _Unwind_Resume(a1);
}

void sub_1845134D0()
{
  JUMPOUT(0x184513520);
}

void sub_1845134DC()
{
  JUMPOUT(0x184513534);
}

void sub_1845134E4()
{
  pthread_mutex_t *v0;

  pthread_mutex_unlock(v0);
  JUMPOUT(0x184513520);
}

void sub_184513508(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;
  uint64_t v2;
  void *v4;

  pthread_mutex_unlock(v1);
  v4 = *(void **)(v2 - 232);
  if (*(_QWORD *)(v2 - 224))
    CA::Display::DisplayLink::unref(*(CA::Display::DisplayLink **)(v2 - 224));
  objc_autoreleasePoolPop(v4);
  _Unwind_Resume(a1);
}

uint64_t CA::DynamicFrameRateSource::_commit_deadline_at_timestamp(CA::DynamicFrameRateSource *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  float v8;
  float v9;
  float v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t *v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  unint64_t v33;
  unint64_t phase;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v39;
  unint64_t v40;
  unsigned int v41;
  unsigned int v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47[2];
  CAFrameIntervalRange v48;
  CAFrameIntervalRange v49;
  CAFrameRateRange v50;

  v47[1] = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 104) & 1) != 0)
    return a2;
  v4 = mach_absolute_time();
  if (*((_QWORD *)this + 7) - 1 < v4
    || (v5 = *((_QWORD *)this + 8),
        v5 != CA::Display::DisplayTimingsControl::server_frame_interval(*((CA::Display::DisplayTimingsControl **)this + 1), v4)))
  {
    CA::DynamicFrameRateSource::set_preferred_fps_range(this, *(CAFrameRateRange *)((char *)this + 16), 0);
  }
  v45 = 0uLL;
  v46 = 0;
  CA::Display::DisplayTimingsControl::timing_reference((CA::Display::DisplayTimingsControl *)&v45, *((_QWORD *)this + 1), a2);
  if (*((_QWORD *)this + 7) - 1 < a2
    || (v6 = *((_DWORD *)this + 12),
        v7 = *((_QWORD *)this + 8),
        v7 != CA::Display::DisplayTimingsControl::server_frame_interval(*((CA::Display::DisplayTimingsControl **)this + 1), a2)))
  {
    v8 = *((float *)this + 4);
    v9 = *((float *)this + 5);
    v10 = *((float *)this + 6);
    v11 = CA::Display::DisplayTimingsControl::server_compat_quanta_mode(*((CA::Display::DisplayTimingsControl **)this + 1), a2);
    v50.minimum = v8;
    v50.maximum = v9;
    v50.preferred = v10;
    v12 = CA::Display::DisplayTimingsControl::fps_range_to_frame_interval_range(*((CA::Display::DisplayTimingsControl **)this + 1), v50, v11);
    v49.var2 = v13;
    *(_QWORD *)&v49.var0 = v12;
    v6 = CA::DynamicFrameRateSource::frame_interval_range_adapt_to_server_interval((CA::Display::DisplayTimingsControl **)this, v49, a2);
  }
  v14 = *((_QWORD *)this + 1);
  if (v6)
  {
    v15 = v6;
  }
  else
  {
    if ((*(_BYTE *)(v14 + 233) & 1) != 0)
      v39 = 2;
    else
      v39 = 1;
    if (v39 <= *(_DWORD *)(v14 + 56))
      v39 = *(_DWORD *)(v14 + 56);
    if (v39 <= *(_DWORD *)(v14 + 88))
      v39 = *(_DWORD *)(v14 + 88);
    if (v39 <= *(_DWORD *)(v14 + 60))
      LOBYTE(v39) = *(_DWORD *)(v14 + 60);
    v15 = v39;
  }
  if (CA::Display::DisplayTimingsControl::server_timing_expiry(*((os_unfair_lock_s **)this + 1)) - 1 >= a2)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Display::DisplayLink::_next_wakeup_info_lock);
    if (CA::Display::DisplayLink::_next_wakeup_info_count
      && (v27 = mach_absolute_time(),
          v28 = CA::Display::DisplayLink::_next_wakeup_info_count,
          CA::Display::DisplayLink::_next_wakeup_info_count))
    {
      v26 = -1;
      v29 = &qword_1ECDC53E0;
      do
      {
        v30 = *v29;
        if (*v29 >= v26)
          v30 = v26;
        if (*(v29 - 1) > v27)
          v26 = v30;
        v29 += 5;
        --v28;
      }
      while (v28);
    }
    else
    {
      v26 = -1;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Display::DisplayLink::_next_wakeup_info_lock);
    if (!v26)
      goto LABEL_47;
    goto LABEL_35;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(v14 + 92));
  v16 = *(_QWORD *)(v14 + 112);
  v17 = *(_QWORD *)(v14 + 120);
  v18 = v16 == v17;
  if (v16 == v17)
    v19 = (uint64_t *)&CAFrameIntervalRangeZero;
  else
    v19 = (uint64_t *)(v14 + 96);
  v20 = (unsigned int *)&unk_1847521F8;
  if (!v18)
    v20 = (unsigned int *)(v14 + 104);
  v21 = *v20;
  v22 = *v19;
  os_unfair_lock_unlock((os_unfair_lock_t)(v14 + 92));
  if (v22)
    v23 = 0;
  else
    v23 = v21 == 0;
  if (v23)
  {
    v26 = -1;
    goto LABEL_35;
  }
  v24 = CA::Display::DisplayTimingsControl::server_frame_interval((CA::Display::DisplayTimingsControl *)v14, a2);
  *(_QWORD *)&v48.var0 = v22;
  v48.var2 = v21;
  v25 = CAFrameIntervalRangeAdaptToFrameInterval(v48, v24, (*(unsigned __int8 *)(v14 + 233) >> 1) & 1);
  v26 = v25;
  if (v25)
  {
LABEL_35:
    v31 = *((_QWORD *)this + 1);
    if ((*(_BYTE *)(v31 + 233) & 1) != 0)
      v32 = 2;
    else
      v32 = 1;
    if (v32 <= *(_DWORD *)(v31 + 56))
      v32 = *(_DWORD *)(v31 + 56);
    LODWORD(v31) = *(_DWORD *)(v31 + 88);
    if (v32 <= v31)
      v31 = v31;
    else
      v31 = v32;
    if (v26 > v31)
      v31 = v26;
    if (v31 < v15)
      v15 = v31;
  }
LABEL_47:
  v33 = v46 * v15;
  v43 = v45;
  v44 = v46;
  v47[0] = v46 * v15;
  phase = get_phase((unint64_t *)&v43, a2, v47);
  v35 = a2 - phase + v47[0];
  if (!phase)
    v35 = a2;
  if (v35 == a2)
    v36 = v33 + a2;
  else
    v36 = v35;
  v37 = *((_QWORD *)this + 7);
  if (v37 > a2)
  {
    v40 = *((_QWORD *)this + 8);
    if (!v40)
    {
      v40 = *((_QWORD *)this + 1);
      if ((*(_BYTE *)(v40 + 233) & 1) != 0)
        v41 = 2;
      else
        v41 = 1;
      v42 = *(_DWORD *)(v40 + 60);
      if (v41 <= *(_DWORD *)(v40 + 56))
        v41 = *(_DWORD *)(v40 + 56);
      LODWORD(v40) = *(_DWORD *)(v40 + 88);
      if (v41 > v40)
        LODWORD(v40) = v41;
      if (v40 <= v42)
        LOBYTE(v40) = v42;
      v40 = v40;
    }
    if (v36 >= v37 || v40 > v15)
      v36 = CA::DynamicFrameRateSource::_commit_deadline_at_timestamp(this, v37);
  }
  kdebug_trace();
  return v36;
}

uint64_t CA::Display::DisplayTimingsControl::server_frame_interval(CA::Display::DisplayTimingsControl *this, uint64_t a2)
{
  uint64_t v2;
  os_unfair_lock_s *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  if ((*((_BYTE *)this + 233) & 4) == 0)
    return 0;
  v5 = (os_unfair_lock_s *)((char *)this + 12);
  os_unfair_lock_lock((os_unfair_lock_t)this + 3);
  v6 = *((_QWORD *)this + 3);
  if (v6)
  {
    do
    {
      do
      {
        v7 = atomic_load((unsigned int *)(v6 + 16));
        v8 = *(_QWORD *)(v6 + 24);
        v9 = *(_DWORD *)(v6 + 36);
        v10 = *(_DWORD *)(v6 + 40);
        __dmb(9u);
      }
      while ((v7 & 1) != 0);
    }
    while (v7 != *(_DWORD *)(v6 + 16));
    if (!a2)
      a2 = mach_absolute_time();
    if (v8 - 1 >= a2)
      v2 = v9;
    else
      v2 = v10;
  }
  else
  {
    v2 = 0;
  }
  os_unfair_lock_unlock(v5);
  return v2;
}

void display_timer_callback(__CFMachPort *a1, void *a2, uint64_t a3, char *a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  _BYTE *v9;
  double v10;
  int64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t phase;
  unint64_t v17;
  void (*v18)(char *, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, int64_t, uint64_t, uint64_t);
  uint64_t (*v23)(_QWORD);
  void (*v24)(uint64_t);
  NSObject *v25;
  unint64_t v26;
  __int128 buf;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v5 = (void *)MEMORY[0x186DBE2E4](a1, a2);
  v6 = mach_absolute_time();
  pthread_mutex_lock((pthread_mutex_t *)(a4 + 16));
  kdebug_trace();
  v7 = *((_QWORD *)a4 + 28);
  if (v6 <= v7)
  {
    v9 = a4 + 201;
  }
  else
  {
    v8 = CATimeWithHostTime(v6 - v7);
    v9 = a4 + 201;
    if (a4[201])
    {
      v10 = v8;
      if (v8 > 1.0)
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v25 = x_log_category_windowserver;
          if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf) = 134217984;
            *(double *)((char *)&buf + 4) = v10;
            _os_log_impl(&dword_184457000, v25, OS_LOG_TYPE_ERROR, "Timer delayed by %.2fs", (uint8_t *)&buf, 0xCu);
          }
        }
        v7 = *((_QWORD *)a4 + 28);
      }
    }
  }
  v11 = *((_QWORD *)a4 + 27);
  v12 = v6 - v7;
  if ((uint64_t)(v6 - v7) < 0 || v12 > v11)
  {
    if (*v9 && v12 > v11)
    {
      v13 = 0;
      v7 = v6 - v11;
    }
    else
    {
      v13 = (unint64_t)v11 >> 2;
      v7 = v6;
    }
  }
  else
  {
    v13 = *((_QWORD *)a4 + 29) >> 2;
  }
  v14 = v7 - v13;
  v15 = *((_QWORD *)a4 + 30);
  *(_QWORD *)&buf = 0;
  *((_QWORD *)&buf + 1) = v15;
  v28 = v11;
  v26 = 0;
  phase = get_phase((unint64_t *)&buf, v14, &v26);
  v17 = v14 - phase + v26;
  if (!phase)
    v17 = v14;
  *((_QWORD *)a4 + 28) = v17 + v11;
  mk_timer_cancel();
  a4[200] = 1;
  mk_timer_arm_leeway();
  a4[200] = 0;
  v18 = (void (*)(char *, uint64_t, _QWORD, _QWORD, _QWORD))*((_QWORD *)a4 + 24);
  if (v18)
    v18(a4, 1, *((_QWORD *)a4 + 28), *((_QWORD *)a4 + 27), *((_QWORD *)a4 + 23));
  v19 = *((_QWORD *)a4 + 30);
  if (*((_QWORD *)a4 + 29))
    v20 = *((_QWORD *)a4 + 29);
  else
    v20 = v11;
  v22 = (void (*)(char *, uint64_t, int64_t, uint64_t, uint64_t))*((_QWORD *)a4 + 18);
  v21 = *((_QWORD *)a4 + 19);
  v23 = (uint64_t (*)(_QWORD))*((_QWORD *)a4 + 20);
  v24 = (void (*)(uint64_t))*((_QWORD *)a4 + 21);
  if (v23)
    v21 = v23(*((_QWORD *)a4 + 19));
  pthread_mutex_unlock((pthread_mutex_t *)(a4 + 16));
  if (v22)
    v22(a4, v7, v11, (v7 - v19) / v20 % 0xF0, v21);
  if (v24)
    v24(v21);
  objc_autoreleasePoolPop(v5);
}

unint64_t get_phase(unint64_t *a1, unint64_t a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  double v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v3 = *a1;
  v4 = a1[1];
  if (v4)
    v5 = 1;
  else
    v5 = v3 == 0;
  if (!v5)
    v3 = 0;
  v6 = 240 * (v3 / 0xF0);
  v7 = v3 % 0xF0;
  v8 = a1[2];
  *a1 = v6;
  a1[1] = v4 - v8 * v7;
  v9 = *a3;
  if (!*a3)
    goto LABEL_10;
  v10 = round((double)v9 / (double)v8) * (double)v8;
  v8 = (unint64_t)v10;
  v11 = (unint64_t)v10 - v9;
  if (v9 >= (unint64_t)v10)
    v11 = v9 - (unint64_t)v10;
  if (v11 <= v9 >> 5)
  {
LABEL_10:
    *a3 = v8;
    v12 = a1[1];
    v13 = a2 - v12;
    if (v12 >= a2)
      v13 = v12 - a2;
    v14 = v13 % v8;
    if (v14)
    {
      v15 = v8 - v14;
      if (v12 >= a2)
        return v15;
      else
        return v14;
    }
    else
    {
      return 0;
    }
  }
  return a2;
}

void CA::Display::DisplayLink::unref(CA::Display::DisplayLink *this)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  os_unfair_lock_lock((os_unfair_lock_t)&CA::Display::DisplayLink::_list_lock);
  v2 = (unsigned int *)((char *)this + 40);
  do
  {
    v3 = __ldaxr(v2);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, v2));
  if (!v4)
    (*(void (**)(CA::Display::DisplayLink *))(*(_QWORD *)this + 8))(this);
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Display::DisplayLink::_list_lock);
}

uint64_t CA::Display::DisplayTimingsControl::server_timing_expiry(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v2 = this + 3;
  os_unfair_lock_lock(this + 3);
  v3 = *(_QWORD *)&this[6]._os_unfair_lock_opaque;
  if (v3)
  {
    do
    {
      do
      {
        v4 = atomic_load((unsigned int *)(v3 + 16));
        v5 = *(_QWORD *)(v3 + 24);
        __dmb(9u);
      }
      while ((v4 & 1) != 0);
    }
    while (v4 != *(_DWORD *)(v3 + 16));
  }
  else
  {
    v5 = 0;
  }
  os_unfair_lock_unlock(v2);
  return v5;
}

void CA::Display::DisplayLink::callback(unint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v18;
  int v19;
  int v20;
  unint64_t v21;
  double v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  CA::Display::DisplayTimingsControl *v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (a5)
  {
    if ((CA::Display::DisplayTimingsControl::power_state((CA::Display::DisplayTimingsControl *)(*(_QWORD *)(a5 + 8)
                                                                                               + 464)) & 1) == 0
      && (*(_WORD *)(*(_QWORD *)(a5 + 8) + 760) & 0x100) == 0)
    {
      CA::Display::DisplayLink::set_display_active((CA::Display::DisplayLink *)a5, 0);
      pthread_mutex_lock((pthread_mutex_t *)(a5 + 56));
      CA::Display::DisplayLink::pause_timer_locked(a5);
      pthread_mutex_unlock((pthread_mutex_t *)(a5 + 56));
      return;
    }
    pthread_mutex_lock((pthread_mutex_t *)(a5 + 56));
    v10 = CA::Display::DisplayLink::align_phase_locked((CA::Display::DisplayLink *)a5);
    pthread_mutex_unlock((pthread_mutex_t *)(a5 + 56));
    v11 = CA::Display::DisplayTimingsControl::compat_quanta_mode((CA::Display::DisplayTimingsControl *)(*(_QWORD *)(a5 + 8) + 464));
    pthread_mutex_lock((pthread_mutex_t *)(a5 + 56));
    v12 = mach_absolute_time();
    v13 = *(uint64_t **)(a5 + 120);
    v14 = *(uint64_t **)(a5 + 128);
    if (v13 == v14)
    {
LABEL_15:
      v18 = 0;
    }
    else
    {
      while (1)
      {
        v15 = *v13;
        if (*(_DWORD *)(*v13 + 112) != *(_DWORD *)(a5 + 176))
          break;
        v16 = *(_QWORD *)(v15 + 104);
        if ((v11 & 1) == 0 && *(unsigned __int8 *)(a5 + 180) != *(unsigned __int8 *)(v15 + 128))
          break;
        if (v16 && v16 < v12)
          break;
        if (++v13 == v14)
          goto LABEL_15;
      }
      v18 = 1;
    }
    pthread_mutex_unlock((pthread_mutex_t *)(a5 + 56));
    v19 = CA::Display::DisplayTimingsControl::server_frame_interval((CA::Display::DisplayTimingsControl *)(*(_QWORD *)(a5 + 8) + 464), 0);
    v20 = CA::Display::DisplayTimingsControl::server_compat_quanta_mode((CA::Display::DisplayTimingsControl *)(*(_QWORD *)(a5 + 8) + 464), 0);
    if (*(_DWORD *)(a5 + 176) != v19)
    {
      *(_DWORD *)(a5 + 176) = v19;
      v18 = 1;
    }
    if (*(unsigned __int8 *)(a5 + 180) != v20)
    {
      *(_BYTE *)(a5 + 180) = v20;
      v18 = 1;
    }
    v21 = v10 + a3;
    CA::Display::DisplayLink::update_timer((CA::Display::DisplayLink *)a5, v18);
    pthread_mutex_lock((pthread_mutex_t *)(a5 + 56));
    v22 = *(double *)(a5 + 160);
    pthread_mutex_unlock((pthread_mutex_t *)(a5 + 56));
    v23 = CAHostTimeWithTime(v22);
    if (v23)
    {
      v34[1] = v23;
      v35 = 0;
      v34[0] = a1;
      LODWORD(v35) = *(_DWORD *)(*(_QWORD *)(a5 + 8) + 104);
      if (*(_QWORD *)(a5 + 240))
      {
        pthread_mutex_lock((pthread_mutex_t *)(a5 + 56));
        if (*(_QWORD *)(a5 + 120) == *(_QWORD *)(a5 + 128))
        {
          pthread_mutex_unlock((pthread_mutex_t *)(a5 + 56));
        }
        else
        {
          v26 = (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a5 + 240) + 16))(*(_QWORD *)(a5 + 240), v34, v24, v25);
          pthread_mutex_unlock((pthread_mutex_t *)(a5 + 56));
          if (v26)
          {
LABEL_26:
            *(_BYTE *)(a5 + 200) = 1;
            *(_QWORD *)(a5 + 208) = a1;
            *(_QWORD *)(a5 + 216) = a2;
            *(_QWORD *)(a5 + 224) = v21;
            kdebug_trace();
            return;
          }
        }
      }
      else if (a4
             && _CFRunLoopCurrentIsMain()
             && CA::Display::DisplayLink::_will_fire_handler_external
             && (*(unsigned int (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(CA::Display::DisplayLink::_will_fire_handler_external
                                                                                    + 16))(CA::Display::DisplayLink::_will_fire_handler_external, v34, v27, v28) != 1)
      {
        goto LABEL_26;
      }
    }
    *(_BYTE *)(a5 + 200) = 0;
    v29 = *(_QWORD *)(a5 + 8);
    v30 = (CA::Display::DisplayTimingsControl *)(v29 + 464);
    v31 = 528;
    if ((*(_BYTE *)(v29 + 697) & 8) == 0)
      v31 = 512;
    v32 = CAHostTimeWithTime(*(double *)(v29 + v31));
    v33 = CA::Display::DisplayTimingsControl::granularity(v30, v32);
    CA::Display::DisplayLink::dispatch_items((CA::Display::DisplayLink *)a5, v21, a1, v33);
  }
}

void sub_18451411C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t CA::Display::DisplayTimingsControl::compat_quanta_mode(CA::Display::DisplayTimingsControl *this)
{
  uint64_t result;

  if (*((_DWORD *)this + 14) < 2u)
    return 0;
  if (initialized[0] != -1)
    dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
  result = *(float *)&dword_1ECDC69F0 == 1;
  if (!*(float *)&dword_1ECDC69F0)
  {
    if ((*((_BYTE *)this + 233) & 2) != 0)
      return dyld_program_sdk_at_least() ^ 1;
    else
      return 1;
  }
  return result;
}

uint64_t CA::Display::DisplayTimingsControl::server_compat_quanta_mode(CA::Display::DisplayTimingsControl *this, uint64_t a2)
{
  uint64_t v2;
  os_unfair_lock_s *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;

  if ((*((_BYTE *)this + 233) & 4) == 0)
    return 0;
  v5 = (os_unfair_lock_s *)((char *)this + 12);
  os_unfair_lock_lock((os_unfair_lock_t)this + 3);
  v6 = *((_QWORD *)this + 3);
  if (v6)
  {
    do
    {
      do
      {
        v7 = atomic_load((unsigned int *)(v6 + 16));
        v8 = *(_QWORD *)(v6 + 24);
        v9 = *(_BYTE *)(v6 + 32);
        v10 = *(_BYTE *)(v6 + 33);
        __dmb(9u);
      }
      while ((v7 & 1) != 0);
    }
    while (v7 != *(_DWORD *)(v6 + 16));
    if (!a2)
      a2 = mach_absolute_time();
    if (v8 - 1 >= a2)
      v11 = v9;
    else
      v11 = v10;
    v2 = v11 & 1;
  }
  else
  {
    v2 = 0;
  }
  os_unfair_lock_unlock(v5);
  return v2;
}

unint64_t CA::Display::DisplayTimingsControl::granularity(CA::Display::DisplayTimingsControl *this, unint64_t a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;

  v4 = (os_unfair_lock_s *)((char *)this + 12);
  os_unfair_lock_lock((os_unfair_lock_t)this + 3);
  if ((*((_BYTE *)this + 233) & 8) != 0)
  {
    a2 = CAHostTimeWithTime(*((double *)this + 8));
  }
  else
  {
    v5 = *((_QWORD *)this + 3);
    if (v5)
      a2 = atomic_load((unsigned int *)(v5 + 4));
  }
  os_unfair_lock_unlock(v4);
  return a2;
}

uint64_t CA::Display::DisplayLink::update_timer(CA::Display::DisplayLink *this, int a2)
{
  pthread_mutex_t *v4;

  v4 = (pthread_mutex_t *)((char *)this + 56);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 56));
  CA::Display::DisplayLink::update_timer_locked(this, a2);
  return pthread_mutex_unlock(v4);
}

void sub_184514328(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t CA::Display::DisplayLink::update_timer_locked(CA::Display::DisplayLink *this, int a2)
{
  _opaque_pthread_t *v4;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  unint64_t v12;
  uint64_t v13;
  CFTypeRef *v14;
  uint64_t v15;
  double v16;
  uint64_t i;
  __int128 v18;
  __int128 v19;
  void (*v20)(CA::Display::DisplayLink *);
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = (_opaque_pthread_t *)*((_QWORD *)this + 23);
  if (v4 && v4 != pthread_self())
    return 0;
  *((_QWORD *)this + 23) = pthread_self();
  v6 = *((_QWORD *)this + 1);
  v7 = 528;
  if ((*(_BYTE *)(v6 + 697) & 8) == 0)
    v7 = 512;
  v8 = *(double *)(v6 + v7);
  if (v8 <= 0.0)
  {
    v14 = (CFTypeRef *)((char *)this + 152);
    v13 = *((_QWORD *)this + 19);
    if (v13)
    {
      CADisplayTimerInvalidate(v13);
      CFRelease(*v14);
      *v14 = 0;
      *((_QWORD *)this + 20) = 0;
    }
  }
  else
  {
    if (a2)
    {
      CA::Display::DisplayLink::refresh_item_properties_locked(this);
      CA::Display::DisplayLink::compute_firing_rate_multiplier_locked((uint64_t)this);
    }
    v9 = *((_QWORD *)this + 19);
    if (v9)
    {
      v10 = *((int *)this + 42);
      v11 = v8 * (double)(int)v10;
      if (*((double *)this + 20) != v11)
      {
        *((double *)this + 20) = v11;
        v12 = CAHostTimeWithTime(v8);
        CADisplayTimerSetInterval(v9, v12, v10);
      }
    }
    else
    {
      *(_QWORD *)&v19 = this;
      *((_QWORD *)&v19 + 1) = CA::Display::DisplayLink::update_timer_locked(BOOL)::$_0::__invoke;
      v20 = CA::Display::DisplayLink::update_timer_locked(BOOL)::$_1::__invoke;
      v21 = 0;
      v18 = 0uLL;
      if (CFRunLoopGetMain() == *((CFRunLoopRef *)this + 2) && !*(_QWORD *)(*((_QWORD *)this + 1) + 448))
      {
        *(_QWORD *)&v18 = this;
        *((_QWORD *)&v18 + 1) = CA::Display::DisplayLink::timer_status_callback;
      }
      *((double *)this + 20) = v8 * (double)*((int *)this + 42);
      v15 = mach_absolute_time();
      v16 = CATimeWithHostTime(v15);
      *((_QWORD *)this + 19) = CADisplayTimerCreate((uint64_t)CA::Display::DisplayLink::callback, &v19, &v18, v16, *((double *)this + 20));
      CA::Display::DisplayLink::align_phase_locked(this);
      if (*((_QWORD *)this + 19))
      {
        for (i = *((_QWORD *)this + 3); i; i = *(_QWORD *)(i + 8))
          CADisplayTimerAddToRunLoop(*((_QWORD *)this + 19), *((__CFRunLoop **)this + 2), *(const __CFString **)i);
      }
    }
  }
  *((_QWORD *)this + 23) = 0;
  if (*((_BYTE *)this + 192))
  {
    *((_BYTE *)this + 192) = 0;
    CA::Display::DisplayLink::start_timer_locked(this);
  }
  return 1;
}

unint64_t CA::Display::DisplayLink::align_phase_locked(CA::Display::DisplayLink *this)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)this + 19))
    return 0;
  v7 = 0uLL;
  v8 = 0;
  CA::Display::DisplayTimingsControl::timing_reference((CA::Display::DisplayTimingsControl *)&v7, *((_QWORD *)this + 1) + 464, 0);
  v2 = *((_QWORD *)this + 31);
  if (v2)
  {
    if (*((_QWORD *)this + 15) != *((_QWORD *)this + 16))
      (*(void (**)(uint64_t, __int128 *))(v2 + 16))(v2, &v7);
  }
  v3 = *((_QWORD *)this + 19);
  v5 = v7;
  v6 = v8;
  return CADisplayTimerAlignPhase(v3, &v5);
}

void CA::Display::DisplayTimingsControl::timing_reference(CA::Display::DisplayTimingsControl *this, uint64_t a2, uint64_t a3)
{
  char v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  uint64_t v19;
  os_unfair_lock_s *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v5 = *(_BYTE *)(a2 + 233);
  if ((v5 & 0x10) != 0)
  {
    *(_OWORD *)this = *(_OWORD *)(a2 + 72);
    v18 = (v5 & 8) == 0;
    v19 = 64;
    if (v18)
      v19 = 48;
    *((_QWORD *)this + 2) = CAHostTimeWithTime(*(double *)(a2 + v19));
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 184);
    if (v6)
    {
      v33 = 0;
      v34 = 0;
      v32 = 1;
      v7 = (*(uint64_t (**)(uint64_t, uint64_t *))(v6 + 16))(v6, &v32);
      v8 = v34;
      if (v34)
        v9 = v7;
      else
        v9 = 0;
      if (v9 != 1)
        goto LABEL_21;
      v10 = *(_QWORD *)(a2 + 200);
      v11 = v33;
      if (v10 - 1 >= v33)
      {
        *(_QWORD *)(a2 + 192) = 0;
        *(_QWORD *)(a2 + 200) = v11;
        v10 = v11;
      }
      v12 = *(_BYTE *)(a2 + 233);
      v13 = 64;
      if ((v12 & 8) == 0)
        v13 = 48;
      v14 = CAHostTimeWithTime(*(double *)(a2 + v13));
      if (!v14)
      {
        v16 = *(_QWORD *)(a2 + 192);
        goto LABEL_20;
      }
      v15 = vcvtad_u64_f64((double)(v11 - v10) / (double)v14);
      v16 = *(_QWORD *)(a2 + 192) + v15;
      *(_QWORD *)(a2 + 192) = v16;
      *(_QWORD *)(a2 + 200) = v11;
      if ((v12 & 1) != 0 && v15 && *(double *)(a2 + 48) != *(double *)(a2 + 32))
      {
        if ((v16 & 1) == 0)
        {
LABEL_18:
          *(_BYTE *)(a2 + 232) = 10;
          goto LABEL_19;
        }
        v17 = *(_BYTE *)(a2 + 232) - 1;
        *(_BYTE *)(a2 + 232) = v17;
        if (!v17)
        {
          *(_QWORD *)(a2 + 192) = ++v16;
          goto LABEL_18;
        }
      }
LABEL_19:
      v10 = v11;
LABEL_20:
      *(_QWORD *)(a2 + 208) = v16;
      *(_QWORD *)(a2 + 216) = v10;
      *(_QWORD *)(a2 + 224) = v8;
LABEL_21:
      *(_OWORD *)this = *(_OWORD *)(a2 + 208);
      *((_QWORD *)this + 2) = *(_QWORD *)(a2 + 224);
      return;
    }
    v21 = (os_unfair_lock_s *)(a2 + 12);
    os_unfair_lock_lock((os_unfair_lock_t)(a2 + 12));
    v22 = *(_QWORD *)(a2 + 24);
    if (v22)
    {
      *(_QWORD *)this = 0;
      *((_QWORD *)this + 1) = 0;
      *((_QWORD *)this + 2) = 0;
      v23 = atomic_load((unsigned int *)(v22 + 4));
      *((_QWORD *)this + 2) = v23;
      v24 = *(_QWORD *)(a2 + 24);
      if ((*(_BYTE *)(a2 + 233) & 4) != 0)
      {
        do
        {
          do
          {
            v27 = atomic_load((unsigned int *)(v24 + 16));
            v28 = *(_QWORD *)(v24 + 24);
            v29 = *(_QWORD *)(v24 + 56);
            v30 = *(_QWORD *)(v24 + 64);
            *(_QWORD *)this = *(_QWORD *)(v24 + 48);
            *((_QWORD *)this + 1) = v30;
            __dmb(9u);
          }
          while ((v27 & 1) != 0);
        }
        while (v27 != *(_DWORD *)(v24 + 16));
        if (!a3)
          a3 = mach_absolute_time();
        if (v28 - 1 < a3)
          *(_QWORD *)this = v29;
      }
      else
      {
        do
        {
          do
          {
            v25 = atomic_load((unsigned int *)(v24 + 16));
            v26 = *(_QWORD *)(v24 + 64);
            *(_QWORD *)this = *(_QWORD *)(v24 + 48);
            *((_QWORD *)this + 1) = v26;
            __dmb(9u);
          }
          while ((v25 & 1) != 0);
        }
        while (v25 != *(_DWORD *)(v24 + 16));
      }
    }
    else
    {
      *(_QWORD *)this = 0;
      *((_QWORD *)this + 1) = 0;
      v31 = 64;
      if ((*(_BYTE *)(a2 + 233) & 8) == 0)
        v31 = 48;
      *((_QWORD *)this + 2) = CAHostTimeWithTime(*(double *)(a2 + v31));
    }
    os_unfair_lock_unlock(v21);
  }
}

unint64_t CADisplayTimerAlignPhase(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t phase;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD);
  NSObject *v27;
  uint64_t v28;
  unint64_t v29;
  _BYTE buf[24];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (a2[1])
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
    v4 = *(_QWORD *)(a1 + 232);
    v5 = *(_QWORD *)(a1 + 240);
    v6 = a2[1];
    v7 = vcvtad_u64_f64((double)(unint64_t)(v6 - v5) / (double)v4) % 0xF0;
    v8 = *a2 % 0xF0uLL;
    v9 = v8 + 240;
    if (v7 <= v8)
      v9 = *a2 % 0xF0uLL;
    v10 = v9 - v7;
    if (v7 == v8)
      v11 = 0;
    else
      v11 = v10;
    v12 = ((v6 - v5) % v4);
    v13 = v4 - v12;
    if (v12 >= v13)
      v14 = v13;
    else
      v14 = v12;
    v15 = a2[2];
    v16 = v14 >= v15 >> 7 || v5 == 0;
    if (v16 || v11)
    {
      v17 = vcvtad_u64_f64((double)*(unint64_t *)(a1 + 208) / (double)v15);
      v18 = *(_QWORD *)(a1 + 216);
      if (v17)
      {
        v19 = v15 * v17;
        *(_QWORD *)(a1 + 216) = v15 * v17;
        *(_QWORD *)(a1 + 232) = v15;
        *(_QWORD *)(a1 + 240) = v6 - v8 * v15;
      }
      else
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v27 = x_log_category_windowserver;
          if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
          {
            v28 = *(_QWORD *)(a1 + 208);
            *(_DWORD *)buf = 134218240;
            *(_QWORD *)&buf[4] = v28;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v15;
            _os_log_impl(&dword_184457000, v27, OS_LOG_TYPE_ERROR, "CADisplayTimerAlignPhase: unexpected state (interval:%llx, heartbeat:%llx)", buf, 0x16u);
          }
        }
        v19 = *(_QWORD *)(a1 + 216);
      }
      if (BYTE9(xmmword_1ECDC6A90))
      {
        kdebug_trace();
        v19 = *(_QWORD *)(a1 + 216);
      }
      v20 = *(_QWORD *)(a1 + 224) - v18 + (v19 >> 1);
      if (v20 <= mach_absolute_time())
        v20 = mach_absolute_time();
      v21 = *(_QWORD *)(a1 + 240);
      v22 = *(_QWORD *)(a1 + 216);
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = v21;
      *(_QWORD *)&buf[16] = v22;
      v29 = 0;
      phase = get_phase((unint64_t *)buf, v20, &v29);
      v24 = v20 - phase + v29;
      if (!phase)
        v24 = v20;
      *(_QWORD *)(a1 + 224) = v24;
      mk_timer_cancel();
      *(_BYTE *)(a1 + 200) = 1;
      mk_timer_arm_leeway();
      *(_BYTE *)(a1 + 200) = 0;
      v25 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 192);
      if (v25)
        v25(a1, 1, *(_QWORD *)(a1 + 224), *(_QWORD *)(a1 + 216), *(_QWORD *)(a1 + 184));
    }
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 16));
  }
  else
  {
    v11 = 0;
    *(_QWORD *)(a1 + 232) = a2[2];
  }
  return v11;
}

uint64_t CA::Display::DisplayTimingsControl::power_state(CA::Display::DisplayTimingsControl *this)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD v9[4];

  v9[3] = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 23);
  if (v2)
  {
    v9[1] = 0;
    v9[2] = 0;
    v9[0] = 1;
    v3 = (*(uint64_t (**)(uint64_t, _QWORD *))(v2 + 16))(v2, v9) ^ 1;
    if (BYTE4(v9[0]))
      return 1;
    else
      return v3;
  }
  else
  {
    v5 = (os_unfair_lock_s *)((char *)this + 12);
    os_unfair_lock_lock((os_unfair_lock_t)this + 3);
    v6 = *((_QWORD *)this + 3);
    if (v6)
    {
      v7 = atomic_load((unsigned __int8 *)(v6 + 1));
      v4 = v7 & 1;
    }
    else
    {
      v4 = 1;
    }
    os_unfair_lock_unlock(v5);
  }
  return v4;
}

double CA::Transaction::finish_frame(CA::Transaction *this)
{
  uint64_t v1;
  int v2;
  int v4;
  double result;

  v1 = *((_QWORD *)this + 13);
  v2 = *(_DWORD *)(v1 + 160);
  if (!v2)
    __assert_rtn("finish_frame", "CATransactionInternal.mm", 2042, "s->_frame_depth");
  v4 = v2 - 1;
  *(_DWORD *)(v1 + 160) = v2 - 1;
  if ((*(_BYTE *)(v1 + 204) & 0x20) == 0)
  {
    CAHostTimeWithTime(*(double *)(v1 + 176));
    CAHostTimeWithTime(*(double *)(v1 + 168));
    kdebug_trace();
  }
  if (!v4)
  {
    if (*(_DWORD *)(v1 + 160))
      __assert_rtn("finish_frame", "CATransactionInternal.mm", 2052, "!s->_frame_depth");
    *(_DWORD *)(v1 + 164) = 0;
    if (!**((_DWORD **)this + 13))
    {
      result = 0.0;
      *(_OWORD *)(v1 + 184) = 0u;
      *(_OWORD *)(v1 + 168) = 0u;
    }
  }
  return result;
}

uint64_t CA::Transaction::start_frame(uint64_t a1, int a2, double a3, double a4, double a5)
{
  int v6;
  int v7;
  double v8;
  double v10;
  double v12;
  uint64_t v13;

  v6 = *(_DWORD *)(a1 + 160);
  v7 = *(_DWORD *)(a1 + 164) + 1;
  *(_DWORD *)(a1 + 160) = v6 + 1;
  *(_DWORD *)(a1 + 164) = v7;
  v8 = *(double *)(a1 + 168);
  if (v6 && v8 == 0.0)
    __assert_rtn("start_frame", "CATransactionInternal.mm", 2019, "!nested || s->_frame_commit_deadline != 0");
  if (v8 == 0.0 || v8 > a5)
    *(double *)(a1 + 168) = a5;
  v10 = *(double *)(a1 + 176);
  if (v6 && v10 == 0.0)
    __assert_rtn("start_frame", "CATransactionInternal.mm", 2022, "!nested || s->_frame_begin_time != 0");
  if (v10 == 0.0 || v10 > a3)
    *(double *)(a1 + 176) = a3;
  v12 = *(double *)(a1 + 184);
  if (v6)
  {
    if (v12 == 0.0)
      __assert_rtn("start_frame", "CATransactionInternal.mm", 2025, "!nested || s->_frame_start_time != 0");
  }
  else if (v12 == 0.0)
  {
    *(double *)(a1 + 184) = a4;
  }
  v13 = a2 | (v7 << 8);
  if ((*(_BYTE *)(a1 + 204) & 0x20) == 0)
  {
    CAHostTimeWithTime(a3);
    CAHostTimeWithTime(a5);
    kdebug_trace();
  }
  return v13;
}

void CA::Display::DisplayLink::callback(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CA::Display::DisplayLink::callback(a2, a3, a4, 1, a5);
}

void CA::Display::DisplayLinkItem::dispatch_(uint64_t a1, _QWORD *a2)
{
  void *v4;

  v4 = (void *)MEMORY[0x186DBE2E4]();
  objc_msgSend(*(id *)(a1 + 24), *(SEL *)(a1 + 32), *(_QWORD *)(a1 + 256));
  objc_autoreleasePoolPop(v4);
  *a2 = *(_QWORD *)(a1 + 288) - *(_QWORD *)(a1 + 280);
  a2[2] = *(_QWORD *)(a1 + 288);
}

uint64_t CA::Display::DisplayLinkItem::compute_target_timestamp_delta(CA::Display::DisplayLinkItem *this)
{
  return *((_QWORD *)this + 37) * *((int *)this + 14);
}

uint64_t CA::Display::DisplayLinkItem::needs_update_link(CA::Display::DisplayLinkItem *this)
{
  return 0;
}

uint64_t CA::WindowServer::IOMFBServer::vsync_callback(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  pthread_mutex_t *v8;
  double v9;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  double v16;
  uint64_t v17;
  unint64_t v19;
  unsigned __int8 v20;
  int v21;
  unsigned int v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t i;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int *j;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t k;
  unsigned int v53;
  const char *v54;
  _BYTE *v55;
  void *v56;
  NSObject *v57;
  int v58;
  uint64_t v59;
  os_unfair_lock_s *lock;
  os_unfair_lock_s *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint8_t buf[32];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v8 = (pthread_mutex_t *)(a5 + 544);
  pthread_mutex_lock((pthread_mutex_t *)(a5 + 544));
  if (BYTE9(xmmword_1ECDC6A90))
    CA::WindowServer::IOMFBDisplay::emit_server_timing_info(*(os_unfair_lock_s **)(a5 + 96));
  v9 = CATimeWithHostTime(a3);
  (*(void (**)(uint64_t, double))(*(_QWORD *)a5 + 480))(a5, v9);
  *(_QWORD *)(a5 + 912) = a3;
  if (*(_QWORD *)(a5 + 904) > a3)
  {
    *(_BYTE *)(a5 + 1006) |= 1u;
    if (BYTE9(xmmword_1ECDC6A90))
      kdebug_trace();
    return pthread_mutex_unlock(v8);
  }
  kdebug_trace();
  v11 = *(_QWORD *)(a5 + 96);
  if ((*(_DWORD *)(v11 + 624) & 0x100) != 0 && byte_1ECDC6AC5)
  {
    v61 = (os_unfair_lock_s *)(v11 + 27408);
    os_unfair_lock_lock((os_unfair_lock_t)(v11 + 27408));
    lock = (os_unfair_lock_s *)(v11 + 27356);
    os_unfair_lock_lock((os_unfair_lock_t)(v11 + 27356));
    v62 = 0uLL;
    *(_QWORD *)&v63 = 0;
    x_stream_printf((uint64_t)&v62, "Frame Rate Requests %ld\n", v24, v25, v26, v27, v28, v29, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v11 + 27368) - *(_QWORD *)(v11 + 27360)) >> 3));
    v36 = *(_QWORD *)(v11 + 27360);
    for (i = *(_QWORD *)(v11 + 27368); v36 != i; v36 += 24)
      x_stream_printf((uint64_t)&v62, "%s[%d]: %u %u %u %s%s\n", v30, v31, v32, v33, v34, v35, (uint64_t)"");
    x_stream_printf((uint64_t)&v62, "\nFrame Rate Reasons %ld\n", v30, v31, v32, v33, v34, v35, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v11 + 27424) - *(_QWORD *)(v11 + 27416)) >> 2));
    v44 = *(unsigned int **)(v11 + 27416);
    v59 = v11;
    for (j = *(unsigned int **)(v11 + 27424); v44 != j; v44 += 7)
    {
      x_stream_printf((uint64_t)&v62, "[%d]: ", v38, v39, v40, v41, v42, v43, *v44);
      for (k = 2; k != 6; ++k)
      {
        v53 = v44[k];
        if (!v53)
          break;
        x_stream_printf((uint64_t)&v62, "%u'%u ", v46, v47, v48, v49, v50, v51, HIWORD(v53));
      }
      v54 = "suspended";
      if (!*((_BYTE *)v44 + 24))
        v54 = "";
      x_stream_printf((uint64_t)&v62, "%s\n", v46, v47, v48, v49, v50, v51, (uint64_t)v54);
    }
    v55 = x_stream_finish((uint64_t)&v62);
    if (v55)
    {
      v56 = v55;
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v57 = x_log_category_frame_rate;
        if (os_log_type_enabled((os_log_t)x_log_category_frame_rate, OS_LOG_TYPE_DEFAULT))
        {
          v58 = *(unsigned __int8 *)(v59 + 28128);
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v56;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v58;
          _os_log_impl(&dword_184457000, v57, OS_LOG_TYPE_DEFAULT, "CAFrameRateServer: post_frame_rate_log\n%s\nserver_source_compat_quanta_mode: %i\n", buf, 0x12u);
        }
      }
      free(v56);
    }
    os_unfair_lock_unlock(lock);
    os_unfair_lock_unlock(v61);
  }
  if (fabs(*(double *)(a5 + 856)) == INFINITY)
  {
    if (*(_DWORD *)(a5 + 1000))
    {
      v12 = (unsigned int *)(a5 + 1000);
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        CA::WindowServer::IOMFBServer::set_vsync_disabled((CA::WindowServer::IOMFBServer *)a5);
        (*(void (**)(_QWORD))(**(_QWORD **)(a5 + 96) + 440))(*(_QWORD *)(a5 + 96));
      }
    }
  }
  pthread_mutex_unlock(v8);
  v15 = a4 + a3;
  v16 = CATimeWithHostTime(v15);
  v17 = *(_QWORD *)(a5 + 96);
  if (atomic_load(CA::WindowServer::IOMFBDisplay::_latching_vsync))
  {
    do
      v20 = __ldaxr(CA::WindowServer::IOMFBDisplay::_latching_vsync);
    while (__stlxr(v20 - 1, CA::WindowServer::IOMFBDisplay::_latching_vsync));
LABEL_22:
    v21 = *(_DWORD *)(v17 + 24);
    v22 = atomic_load(CA::WindowServer::IOMFBDisplay::_fastest_display_id);
    if (v21 == v22)
    {
      if (CA::WindowServer::IOMFBDisplay::hint_agx_timing(unsigned long long,unsigned long long)::once != -1)
        dispatch_once(&CA::WindowServer::IOMFBDisplay::hint_agx_timing(unsigned long long,unsigned long long)::once, &__block_literal_global_112_17699);
      if (CA::WindowServer::IOMFBDisplay::hint_agx_timing(unsigned long long,unsigned long long)::agx_device)
      {
        IOGPUDeviceSetDisplayParamsFunc(CA::WindowServer::IOMFBDisplay::hint_agx_timing(unsigned long long,unsigned long long)::agx_device, v15, a4);
        if (initialized[0] != -1)
          dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
        v23 = (double)*(float *)&dword_1ECDC69F4 * 0.001;
        if (!*(float *)&dword_1ECDC69F4)
          v23 = 1.0;
        atomic_store(CAHostTimeWithTime(v23) + v15, (unint64_t *)&CA::WindowServer::IOMFBDisplay::hint_agx_timing(unsigned long long,unsigned long long)::next_agx_hint);
      }
    }
    goto LABEL_17;
  }
  v19 = atomic_load((unint64_t *)&CA::WindowServer::IOMFBDisplay::hint_agx_timing(unsigned long long,unsigned long long)::next_agx_hint);
  if (v19 <= v15)
    goto LABEL_22;
LABEL_17:
  if (v16 >= *(double *)(a5 + 856))
  {
    v65 = 0u;
    v64 = 0u;
    v62 = 0u;
    v66 = 0xAuLL;
    v63 = v15;
    *(_QWORD *)&v64 = (uint64_t)(CATimeWithHostTime(a4) * 1000000.0);
    DWORD1(v62) = 1000000;
    memset(buf, 0, 24);
    CA::WindowServer::IOMFBDisplay::timing_reference((CA::WindowServer::IOMFBDisplay *)buf, *(_QWORD *)(a5 + 96), 1);
    *(_QWORD *)(a5 + 856) = 0x7FF0000000000000;
    *(_QWORD *)(a5 + 872) = 0;
    *(_QWORD *)(a5 + 864) = 0;
    CA::WindowServer::Server::render_for_time(a5);
  }
  else
  {
    CA::Render::collect(0, v16);
  }
  pthread_mutex_lock(v8);
  *(_BYTE *)(a5 + 1006) |= 1u;
  return pthread_mutex_unlock(v8);
}

double CA::WindowServer::IOMFBServer::set_low_latency_threshold(CA::WindowServer::IOMFBServer *this, double a2)
{
  unint64_t v4;
  double result;

  v4 = (*(uint64_t (**)(CA::WindowServer::IOMFBServer *))(*(_QWORD *)this + 48))(this);
  result = CATimeWithHostTime(v4) + a2;
  *((double *)this + 110) = result;
  return result;
}

void CA::WindowServer::IOMFBDisplay::emit_server_timing_info(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  unsigned __int8 *v3;
  unsigned __int8 v4;
  uint64_t v5;

  v2 = this + 6504;
  os_unfair_lock_lock(this + 6504);
  CA::WindowServer::IOMFBDisplay::initialize_timings((CA::WindowServer::IOMFBDisplay *)this);
  v3 = *(unsigned __int8 **)&this[6508]._os_unfair_lock_opaque;
  if (v3)
  {
    v4 = atomic_load(v3);
    if ((v4 & 1) != 0)
    {
      atomic_load((unsigned int *)(*(_QWORD *)&this[6508]._os_unfair_lock_opaque + 36));
      atomic_load((unint64_t *)(*(_QWORD *)&this[6508]._os_unfair_lock_opaque + 48));
      atomic_load((unint64_t *)(*(_QWORD *)&this[6508]._os_unfair_lock_opaque + 64));
      v5 = atomic_load((unint64_t *)(*(_QWORD *)&this[6508]._os_unfair_lock_opaque + 24));
      if (v5 && v5 < mach_absolute_time())
      {
        atomic_load((unsigned int *)(*(_QWORD *)&this[6508]._os_unfair_lock_opaque + 40));
        atomic_load((unint64_t *)(*(_QWORD *)&this[6508]._os_unfair_lock_opaque + 56));
      }
      kdebug_trace();
    }
  }
  os_unfair_lock_unlock(v2);
}

double CA::WindowServer::IOMFBDisplay::initialize_timings(CA::WindowServer::IOMFBDisplay *this)
{
  _BYTE *v1;
  _DWORD *v3;
  double v4;
  unsigned __int8 v5;
  double result;

  v1 = (char *)this + 26020;
  if (!*((_BYTE *)this + 26020))
  {
    if (*((_BYTE *)this + 28068))
      goto LABEL_3;
    if (!*((_QWORD *)this + 3253))
    {
      v3 = CA::Render::Shmem::new_shmem((CA::Render::Shmem *)0x48);
      *((_QWORD *)this + 3253) = v3;
      *((_QWORD *)this + 3254) = *((_QWORD *)v3 + 3);
    }
    v4 = (*(double (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 760))(this);
    atomic_store(CAHostTimeWithTime(v4), (unsigned int *)(*((_QWORD *)this + 3254) + 4));
    if ((*((_DWORD *)this + 156) & 0x100) != 0)
    {
      if (CAPrefers60HzAPT(void)::once[0] != -1)
        dispatch_once(CAPrefers60HzAPT(void)::once, &__block_literal_global_2);
      v5 = CAPrefers60HzAPT(void)::enabled != 0;
    }
    else
    {
      v5 = 0;
    }
    atomic_store(v5, (unsigned __int8 *)(*((_QWORD *)this + 3254) + 2));
    result = (*(double (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 760))(this);
    if (result != 0.0)
LABEL_3:
      *v1 = 1;
  }
  return result;
}

void CA::Render::collect(CA::Render *this, double a2)
{
  _BOOL4 v3;
  double v4;
  unint64_t v5;
  double v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  double *v10;
  double v11;
  _DWORD *v12;
  int v13;
  BOOL v14;
  char v15;
  _QWORD *v16;
  uint64_t *v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  malloc_zone_t *malloc_zone;
  BOOL v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  malloc_zone_t *v34;
  BOOL v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  malloc_zone_t *v46;
  NSObject *v48;
  double v49;
  _BYTE buf[12];
  __int16 v51;
  double v52;
  __int16 v53;
  double v54;
  __int16 v55;
  double v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  if ((this & 1) != 0)
  {
    v3 = 1;
  }
  else
  {
    v4 = a2 + -5.0;
    if (CA::Render::memory_once[0] != -1)
      dispatch_once_f(CA::Render::memory_once, 0, (dispatch_function_t)CA::Render::init_memory_warnings_);
    v3 = *(double *)&CA::Render::last_memory_warning > v4;
  }
  if (CA::Render::subimage_head)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::ImageProvider::_provider_lock);
    if (v3)
      v5 = 0x100000;
    else
      v5 = 0x800000;
    if (v3)
      v6 = 0.1;
    else
      v6 = 1.0;
    v7 = CA::Render::subimage_head;
    if (CA::Render::subimage_head)
    {
      v8 = 0;
      v9 = 0;
      while (1)
      {
        v10 = (double *)v7;
        v7 = *(_QWORD *)(v7 + 8);
        v11 = a2 - v10[10];
        v12 = (_DWORD *)*((_QWORD *)v10 + 3);
        if (!v12)
          goto LABEL_35;
        v13 = *((_DWORD *)v10 + 13);
        if ((v13 & 1) != 0)
          goto LABEL_35;
        if (v11 >= 30.0 || (v11 >= v6 ? (v14 = *((_QWORD *)v10 + 4) + v9 > v5) : (v14 = 0), v14))
        {
          v15 = v11 >= 600.0 || v3;
          v16 = (_QWORD *)v7;
          if ((v15 & 1) != 0)
            goto LABEL_38;
          v16 = (_QWORD *)v7;
          if (*((_QWORD *)v10 + 4) + v8 > 0x10000000)
            goto LABEL_38;
          if ((v13 & 0x20000) != 0)
          {
            v8 += *((_QWORD *)v10 + 4);
LABEL_35:
            if (!v7)
              goto LABEL_50;
          }
          else
          {
            v16 = (_QWORD *)v7;
            if (v12[2] == 1)
            {
              if (((*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v12 + 192))(v12, 1) & 1) == 0)
              {
                v16 = (_QWORD *)*((_QWORD *)v10 + 1);
                goto LABEL_38;
              }
              *((_DWORD *)v10 + 13) |= 0x20000u;
              v8 += *((_QWORD *)v10 + 4);
              if (!v7)
                goto LABEL_50;
            }
            else
            {
LABEL_38:
              if (v16)
                *v16 = *(_QWORD *)v10;
              if (*(_QWORD *)v10)
                v17 = (uint64_t *)(*(_QWORD *)v10 + 8);
              else
                v17 = &CA::Render::subimage_head;
              *v17 = (uint64_t)v16;
              v18 = (unsigned int *)*((_QWORD *)v10 + 3);
              v19 = v18 + 2;
              do
              {
                v20 = __ldaxr(v19);
                v21 = v20 - 1;
              }
              while (__stlxr(v21, v19));
              if (!v21)
                (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 16))(v18);
              x_hash_table_remove_ptr(*(_QWORD *)(*((_QWORD *)v10 + 2) + 144), (uint64_t)(v10 + 5));
              malloc_zone = (malloc_zone_t *)get_malloc_zone();
              malloc_zone_free(malloc_zone, v10);
              if (!v7)
                goto LABEL_50;
            }
          }
        }
        else
        {
          v9 += *((_QWORD *)v10 + 4);
          if (!v7)
            goto LABEL_50;
        }
      }
    }
    v9 = 0;
    v8 = 0;
    v11 = 0.0;
LABEL_50:
    if (BYTE8(ca_debug_options)
      && *(double *)&CA::Render::ImageProvider::collect(double,BOOL)::last_log_time + 1.0 <= a2)
    {
      CA::Render::ImageProvider::collect(double,BOOL)::last_log_time = *(_QWORD *)&a2;
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v48 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
        {
          if (CA::Render::subimage_head)
            v49 = a2 - *(double *)(CA::Render::subimage_head + 80);
          else
            v49 = 0.0;
          *(_DWORD *)buf = 134218752;
          *(double *)&buf[4] = (double)v9 * 0.000001;
          v51 = 2048;
          v52 = (double)v8 * 0.000001;
          v53 = 2048;
          v54 = v49;
          v55 = 2048;
          v56 = v11;
          _os_log_impl(&dword_184457000, v48, OS_LOG_TYPE_DEFAULT, "CAImageProvider: %.3gMB cached (%.3gMB purgeable); idle %.3gs -> %.3gs\n",
            buf,
            0x2Au);
        }
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::ImageProvider::_provider_lock);
  }
  if (CA::Render::pattern_cache)
    v23 = qword_1ECDC4FB8 == (_QWORD)&CA::Render::pattern_cache_list;
  else
    v23 = 1;
  if (!v23)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::pattern_lock);
    v24 = qword_1ECDC4FB8;
    if ((uint64_t *)qword_1ECDC4FB8 == &CA::Render::pattern_cache_list)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::pattern_lock);
    }
    else
    {
      v25 = 0;
      while (*(double *)(v24 + 32) <= a2)
      {
        v26 = (_QWORD *)v24;
        v24 = *(_QWORD *)(v24 + 8);
        x_hash_table_remove(CA::Render::pattern_cache, v26[2]);
        v28 = *v26;
        v27 = (_QWORD *)v26[1];
        *(_QWORD *)(v28 + 8) = v27;
        *v27 = v28;
        *v26 = v26;
        v26[1] = v25;
        v25 = v26;
        if ((uint64_t *)v24 == &CA::Render::pattern_cache_list)
          goto LABEL_63;
      }
      v26 = v25;
LABEL_63:
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::pattern_lock);
      while (v26)
      {
        v29 = v26;
        v26 = (_QWORD *)v26[1];
        v30 = (unsigned int *)v29[3];
        if (v30)
        {
          v31 = v30 + 2;
          do
          {
            v32 = __ldaxr(v31);
            v33 = v32 - 1;
          }
          while (__stlxr(v33, v31));
          if (!v33)
            (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 16))(v30);
        }
        v34 = (malloc_zone_t *)get_malloc_zone();
        malloc_zone_free(v34, v29);
      }
    }
  }
  if (CA::Render::image_cache)
    v35 = qword_1ECDC63B8 == (_QWORD)&CA::Render::image_cache_list;
  else
    v35 = 1;
  if (!v35)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::image_cache_lock);
    v36 = qword_1ECDC63B8;
    if ((uint64_t *)qword_1ECDC63B8 == &CA::Render::image_cache_list)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::image_cache_lock);
    }
    else
    {
      v37 = 0;
      while (*(double *)(v36 + 32) <= a2)
      {
        v38 = (_QWORD *)v36;
        v36 = *(_QWORD *)(v36 + 8);
        x_hash_table_remove(CA::Render::image_cache, v38[2]);
        v40 = *v38;
        v39 = (_QWORD *)v38[1];
        *(_QWORD *)(v40 + 8) = v39;
        *v39 = v40;
        *v38 = v38;
        v38[1] = v37;
        v37 = v38;
        if ((uint64_t *)v36 == &CA::Render::image_cache_list)
          goto LABEL_81;
      }
      v38 = v37;
LABEL_81:
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::image_cache_lock);
      while (v38)
      {
        v41 = v38;
        v38 = (_QWORD *)v38[1];
        v42 = (unsigned int *)v41[3];
        if (v42)
        {
          v43 = v42 + 2;
          do
          {
            v44 = __ldaxr(v43);
            v45 = v44 - 1;
          }
          while (__stlxr(v45, v43));
          if (!v45)
            (*(void (**)(unsigned int *))(*(_QWORD *)v42 + 16))(v42);
        }
        v46 = (malloc_zone_t *)get_malloc_zone();
        malloc_zone_free(v46, v41);
      }
    }
  }
  *(double *)buf = a2;
  if ((CA::Render::Image::_subimage_deadline & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Image::_subimage_table_lock);
    if (*(double *)&CA::Render::Image::_subimage_deadline <= a2 && CA::Render::Image::_subimage_table != 0)
    {
      CA::Render::Image::_subimage_deadline = 0x7FF0000000000000;
      x_hash_table_remove_if (CA::Render::Image::_subimage_table, (unsigned int (*)(_QWORD, _QWORD, uint64_t))CA::Render::Image::collect_subimages_, (uint64_t)buf);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Image::_subimage_table_lock);
  }
}

CA::AttrList *CA::Transaction::set_value(CA::Transaction *this, const void *a2, int a3, unsigned __int8 *a4)
{
  void *v8;
  malloc_zone_t *malloc_zone;
  CA::AttrList *v10;
  malloc_zone_t *v11;
  CA::AttrList *result;

  if (!**((_DWORD **)this + 13))
    CA::Transaction::ensure_implicit(this, 1);
  v8 = (void *)*((_QWORD *)this + 11);
  if (!v8)
  {
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v8 = malloc_type_zone_calloc(malloc_zone, 1uLL, 0x20uLL, 0x743898A5uLL);
    *((_QWORD *)this + 11) = v8;
  }
  v10 = (CA::AttrList *)*((_QWORD *)v8 + 2);
  if (!v10)
  {
    v11 = (malloc_zone_t *)get_malloc_zone();
    v10 = (CA::AttrList *)malloc_type_zone_calloc(v11, 1uLL, 0x10uLL, 0x743898A5uLL);
  }
  result = CA::AttrList::set(v10, a2, a3, a4);
  *(_QWORD *)(*((_QWORD *)this + 11) + 16) = result;
  return result;
}

void CA::Display::DisplayLink::timer_status_callback(uint64_t a1, int a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unsigned int v9;
  __int128 *v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  void **v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  double v34;
  uint64_t v35;
  CA::Display::DisplayTimingsControl *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 *v44;
  __int128 *v45;
  __int128 *v46;
  __int128 *v47;
  uint64_t i;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;

  if (CA::Transaction::_update_cycle_support_enabled != 1)
    return;
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Display::DisplayLink::_next_wakeup_info_lock);
  v9 = CA::Display::DisplayLink::_next_wakeup_info_count;
  if (CA::Display::DisplayLink::_next_wakeup_info_count == 4)
  {
    v18 = mach_absolute_time();
    v9 = CA::Display::DisplayLink::_next_wakeup_info_count;
    if (!CA::Display::DisplayLink::_next_wakeup_info_count)
    {
      v10 = &CA::Display::DisplayLink::_next_wakeup_info_list;
      goto LABEL_35;
    }
    v19 = v18;
    v20 = 0;
    v56 = v18;
    do
    {
      v21 = (char *)&CA::Display::DisplayLink::_next_wakeup_info_list + 40 * v20;
      if (*((_QWORD *)v21 + 1) >= v19)
      {
        ++v20;
      }
      else
      {
        v22 = (char *)&CA::Display::DisplayLink::_next_wakeup_info_list + 40 * v20;
        v25 = *((_QWORD *)v22 + 3);
        v24 = (unint64_t *)(v22 + 24);
        v23 = v25;
        if (v25)
        {
          if (v23 == 1)
          {
            CFRelease(*((CFTypeRef *)&CA::Display::DisplayLink::_next_wakeup_info_list + 5 * v20 + 4));
          }
          else
          {
            v26 = 0;
            v27 = (void **)&CA::Display::DisplayLink::_next_wakeup_info_list + 5 * v20 + 4;
            do
              CFRelease(*((CFTypeRef *)*v27 + v26++));
            while (v26 < *v24);
            free(*v27);
            v19 = v56;
          }
        }
        *v24 = 0;
        v9 = CA::Display::DisplayLink::_next_wakeup_info_count - 1;
        CA::Display::DisplayLink::_next_wakeup_info_count = v9;
        v28 = (char *)&CA::Display::DisplayLink::_next_wakeup_info_list + 40 * v9;
        v29 = *(_OWORD *)v21;
        v30 = *((_OWORD *)v21 + 1);
        v31 = *((_QWORD *)v21 + 4);
        v32 = *((_QWORD *)v28 + 4);
        v33 = *((_OWORD *)v28 + 1);
        *(_OWORD *)v21 = *(_OWORD *)v28;
        *((_OWORD *)v21 + 1) = v33;
        *((_QWORD *)v21 + 4) = v32;
        *((_QWORD *)v28 + 4) = v31;
        *(_OWORD *)v28 = v29;
        *((_OWORD *)v28 + 1) = v30;
      }
    }
    while (v20 < v9);
    if (!a2 && v9 == 4)
      goto LABEL_59;
  }
  v10 = (__int128 *)((char *)&CA::Display::DisplayLink::_next_wakeup_info_list + 40 * v9);
  if (v9)
  {
    v11 = 40 * v9;
    v12 = &CA::Display::DisplayLink::_next_wakeup_info_list;
    while (*(_QWORD *)v12 != a5)
    {
      v12 = (__int128 *)((char *)v12 + 40);
      v11 -= 40;
      if (!v11)
        goto LABEL_35;
    }
  }
  else
  {
    v12 = &CA::Display::DisplayLink::_next_wakeup_info_list;
  }
  if (v12 != v10)
  {
    if (a2 == 2)
    {
      v13 = *((_QWORD *)v12 + 3);
      if (v13)
      {
        if (v13 == 1)
        {
          CFRelease(*((CFTypeRef *)v12 + 4));
        }
        else
        {
          v14 = 0;
          do
            CFRelease(*(CFTypeRef *)(*((_QWORD *)v12 + 4) + 8 * v14++));
          while (v14 < *((_QWORD *)v12 + 3));
          free(*((void **)v12 + 4));
        }
      }
      *((_QWORD *)v12 + 3) = 0;
      v15 = (char *)&CA::Display::DisplayLink::_next_wakeup_info_list
          + 40 * --CA::Display::DisplayLink::_next_wakeup_info_count;
      v59 = *((_QWORD *)v12 + 4);
      v57 = *v12;
      v58 = v12[1];
      v16 = *(_OWORD *)v15;
      v17 = *((_OWORD *)v15 + 1);
      *((_QWORD *)v12 + 4) = *((_QWORD *)v15 + 4);
      *v12 = v16;
      v12[1] = v17;
      *(_OWORD *)v15 = v57;
      *((_OWORD *)v15 + 1) = v58;
      *((_QWORD *)v15 + 4) = v59;
      goto LABEL_59;
    }
    v10 = v12;
    goto LABEL_37;
  }
LABEL_35:
  if (a2 != 2)
  {
    CA::Display::DisplayLink::_next_wakeup_info_count = v9 + 1;
    *v10 = 0u;
    v10[1] = 0u;
    *((_QWORD *)v10 + 4) = 0;
LABEL_37:
    *(_QWORD *)v10 = a5;
    *((_QWORD *)v10 + 1) = a3;
    v34 = (double)a4;
    v35 = *(_QWORD *)(a5 + 8);
    v36 = (CA::Display::DisplayTimingsControl *)(v35 + 464);
    v37 = 528;
    if ((*(_BYTE *)(v35 + 697) & 8) == 0)
      v37 = 512;
    v38 = CAHostTimeWithTime(*(double *)(v35 + v37));
    *((_QWORD *)v10 + 2) = vcvtad_u64_f64(v34 / (double)CA::Display::DisplayTimingsControl::granularity(v36, v38));
    v39 = *(_QWORD *)(a5 + 24);
    if (v39)
    {
      v40 = 0;
      v41 = v39;
      do
      {
        v42 = v40++;
        v41 = *(_QWORD *)(v41 + 8);
      }
      while (v41);
      v43 = *((_QWORD *)v10 + 3);
      if (v40 == v43)
      {
        v46 = (__int128 *)*((_QWORD *)v10 + 4);
        v45 = v10 + 2;
        v44 = v46;
        if (v42)
          v47 = v44;
        else
          v47 = v45;
        if (v40)
        {
          for (i = 0; i != v40; ++i)
          {
            if (!CFEqual(*((CFTypeRef *)v47 + i), *(CFTypeRef *)v39))
            {
              CFRelease(*((CFTypeRef *)v47 + i));
              *((_QWORD *)v47 + i) = CFRetain(*(CFTypeRef *)v39);
            }
            v39 = *(_QWORD *)(v39 + 8);
          }
        }
      }
      else
      {
        if (v43)
        {
          if (v43 == 1)
          {
            CFRelease(*((CFTypeRef *)v10 + 4));
          }
          else
          {
            v51 = 0;
            do
              CFRelease(*(CFTypeRef *)(*((_QWORD *)v10 + 4) + 8 * v51++));
            while (v51 < *((_QWORD *)v10 + 3));
            free(*((void **)v10 + 4));
          }
        }
        v52 = 0;
        *((_QWORD *)v10 + 3) = 0;
        v53 = v39;
        do
        {
          v54 = v52++;
          v53 = *(_QWORD *)(v53 + 8);
        }
        while (v53);
        if (v52)
        {
          *((_QWORD *)v10 + 3) = v52;
          if (v54)
          {
            v55 = 0;
            *((_QWORD *)v10 + 4) = malloc_type_malloc(8 * v52, 0x6004044C4A2DFuLL);
            do
            {
              *(_QWORD *)(*((_QWORD *)v10 + 4) + 8 * v55) = CFRetain(*(CFTypeRef *)v39);
              v39 = *(_QWORD *)(v39 + 8);
              ++v55;
            }
            while (v52 != v55);
          }
          else
          {
            *((_QWORD *)v10 + 4) = CFRetain(*(CFTypeRef *)v39);
          }
        }
      }
    }
    else
    {
      v49 = *((_QWORD *)v10 + 3);
      if (v49)
      {
        if (v49 == 1)
        {
          CFRelease(*((CFTypeRef *)v10 + 4));
        }
        else
        {
          v50 = 0;
          do
            CFRelease(*(CFTypeRef *)(*((_QWORD *)v10 + 4) + 8 * v50++));
          while (v50 < *((_QWORD *)v10 + 3));
          free(*((void **)v10 + 4));
        }
      }
      *((_QWORD *)v10 + 3) = 0;
    }
  }
LABEL_59:
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Display::DisplayLink::_next_wakeup_info_lock);
  if (a2 == 2)
  {
    if (CA::Display::DisplayLink::_will_fire_handler_external)
      (*(void (**)(void))(CA::Display::DisplayLink::_will_fire_handler_external + 16))();
  }
}

void sub_1845162D8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Display::DisplayLink::_next_wakeup_info_lock);
  _Unwind_Resume(a1);
}

uint64_t CA::Display::DisplayLink::compute_firing_rate_multiplier_locked(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;

  v1 = *(_QWORD *)(this + 120);
  v2 = *(_QWORD *)(this + 128);
  if (v1 != v2)
  {
    v3 = 0;
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)v1 + 316) & 1) == 0)
      {
        v4 = *(_DWORD *)(*(_QWORD *)v1 + 56);
        if (v3)
        {
          if (v4)
          {
            v5 = v3;
            do
            {
              v3 = v4;
              v4 = v5 % v4;
              v5 = v3;
            }
            while (v4);
          }
        }
        else
        {
          v3 = *(_DWORD *)(*(_QWORD *)v1 + 56);
        }
      }
      v1 += 8;
    }
    while (v1 != v2);
    if (v3)
      *(_DWORD *)(this + 168) = v3;
  }
  return this;
}

uint64_t CADisplayTimerSetInterval(uint64_t a1, unint64_t a2, uint64_t a3)
{
  pthread_mutex_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t phase;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31[2];

  v31[1] = *MEMORY[0x1E0C80C00];
  v6 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  v7 = *(_QWORD *)(a1 + 232);
  v8 = a2 - v7;
  if (v7 <= a2)
    v7 = a2;
  if (v8 < 0)
    v8 = -v8;
  if (v8 > v7 >> 5)
    *(_QWORD *)(a1 + 232) = a2;
  v9 = mach_absolute_time();
  v10 = *(_QWORD *)(a1 + 240);
  v11 = *(_QWORD *)(a1 + 232) * a3;
  v28 = 0;
  v29 = v10;
  v30 = v11;
  v31[0] = 0;
  phase = get_phase(&v28, v9, v31);
  v13 = v31[0];
  *(_QWORD *)(a1 + 208) = a3 * a2;
  *(_QWORD *)(a1 + 216) = v11;
  if (!*(_BYTE *)(a1 + 200))
  {
    v14 = v9 - phase + v13;
    if (!phase)
      v14 = v9;
    v15 = *(_QWORD *)(a1 + 224);
    if (v14 == v15 || v15 <= v9 || v15 - v9 <= CAHostTimeWithTime(0.0005))
    {
      v21 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 192);
      if (v21)
      {
        v22 = *(_QWORD *)(a1 + 184);
        v25 = a1;
        v26 = 1;
        v23 = v15;
        v24 = v11;
        goto LABEL_22;
      }
    }
    else
    {
      mk_timer_cancel();
      *(_BYTE *)(a1 + 200) = 1;
      v16 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 192);
      if (v16)
        v16(a1, 2, *(_QWORD *)(a1 + 224), *(_QWORD *)(a1 + 216), *(_QWORD *)(a1 + 184));
      v17 = *(_QWORD *)(a1 + 240);
      v18 = *(_QWORD *)(a1 + 216);
      v28 = 0;
      v29 = v17;
      v30 = v18;
      v31[0] = 0;
      v19 = get_phase(&v28, v9, v31);
      if (v19)
        v20 = v9 - v19 + v31[0];
      else
        v20 = v9;
      *(_QWORD *)(a1 + 224) = v20;
      mk_timer_arm_leeway();
      *(_BYTE *)(a1 + 200) = 0;
      v21 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 192);
      if (v21)
      {
        v22 = *(_QWORD *)(a1 + 184);
        v24 = *(_QWORD *)(a1 + 216);
        v23 = *(_QWORD *)(a1 + 224);
        v25 = a1;
        v26 = 0;
LABEL_22:
        v21(v25, v26, v23, v24, v22);
      }
    }
  }
  return pthread_mutex_unlock(v6);
}

void CA::OGL::AsynchronousDispatcher::timer_callback(int a1, int a2, int a3, int a4, CA::OGL::AsynchronousDispatcher *this)
{
  CA::OGL::AsynchronousDispatcher::tick(this);
}

uint64_t CADisplayTimerCreate(uint64_t a1, _OWORD *a2, _OWORD *a3, double a4, double a5)
{
  uint64_t Instance;
  uint64_t v11;
  uint64_t (*v12)(_QWORD);
  mach_port_t v13;
  __CFMachPort *v14;
  CFRunLoopSourceRef RunLoopSource;
  unint64_t v16;
  __int128 v17;

  if (!CADisplayTimerGetTypeID::type)
    CADisplayTimerGetTypeID::type = _CFRuntimeRegisterClass();
  Instance = _CFRuntimeCreateInstance();
  v11 = Instance;
  if (Instance)
  {
    *(_QWORD *)(Instance + 16) = 850045863;
    *(_OWORD *)(Instance + 24) = 0u;
    *(_OWORD *)(Instance + 40) = 0u;
    *(_OWORD *)(Instance + 56) = 0u;
    *(_QWORD *)(Instance + 72) = 0;
    *(_QWORD *)(Instance + 80) = 1;
    v12 = MEMORY[0x1E0C98BD0];
    *(_QWORD *)(Instance + 88) = Instance;
    *(_QWORD *)(Instance + 96) = v12;
    *(_QWORD *)(Instance + 104) = MEMORY[0x1E0C98BC0];
    *(_QWORD *)(Instance + 112) = 0;
    v13 = mk_timer_create();
    *(_DWORD *)(v11 + 120) = v13;
    if (v13)
    {
      v14 = CFMachPortCreateWithPort(0, v13, (CFMachPortCallBack)display_timer_callback, (CFMachPortContext *)(v11 + 80), 0);
      *(_QWORD *)(v11 + 128) = v14;
      if (v14)
      {
        RunLoopSource = CFMachPortCreateRunLoopSource(0, v14, -1);
        *(_QWORD *)(v11 + 136) = RunLoopSource;
        if (RunLoopSource)
        {
          *(_WORD *)(v11 + 200) = 1;
          *(_QWORD *)(v11 + 240) = 0;
          *(_QWORD *)(v11 + 224) = CAHostTimeWithTime(a4);
          v16 = CAHostTimeWithTime(a5);
          *(_OWORD *)(v11 + 152) = 0u;
          *(_QWORD *)(v11 + 232) = v16;
          *(_QWORD *)(v11 + 208) = v16;
          *(_QWORD *)(v11 + 216) = v16;
          *(_QWORD *)(v11 + 144) = a1;
          *(_OWORD *)(v11 + 168) = 0u;
          if (a2)
          {
            v17 = a2[1];
            *(_OWORD *)(v11 + 152) = *a2;
            *(_OWORD *)(v11 + 168) = v17;
          }
          *(_QWORD *)(v11 + 184) = 0;
          *(_QWORD *)(v11 + 192) = 0;
          if (a3)
            *(_OWORD *)(v11 + 184) = *a3;
          return v11;
        }
      }
      CADisplayTimerInvalidate(v11);
    }
    return 0;
  }
  return v11;
}

void CA::Display::DisplayLinkItem::~DisplayLinkItem(CA::Display::DisplayLinkItem *this)
{
  CA::Display::DisplayLinkItem::~DisplayLinkItem(this);
  JUMPOUT(0x186DBD990);
}

{
  const void *v2;
  const void *v3;
  CA::Display::DisplayLink *v4;

  *(_QWORD *)this = &off_1E1599940;
  v2 = (const void *)*((_QWORD *)this + 3);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 5);
  if (v3)
    CFRelease(v3);

  pthread_cond_destroy((pthread_cond_t *)((char *)this + 200));
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 136));
  v4 = (CA::Display::DisplayLink *)*((_QWORD *)this + 33);
  if (v4)
    CA::Display::DisplayLink::unref(v4);
}

void sub_1845167D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  CA::Display::DisplayLink *v3;

  v3 = *(CA::Display::DisplayLink **)(v1 + 264);
  if (v3)
    CA::Display::DisplayLink::unref(v3);
  _Unwind_Resume(exception_object);
}

_QWORD *CA::WindowServer::IOMFBDisplay::activate_replay(CA::WindowServer::IOMFBDisplay *this)
{
  char *v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  BOOL v8;

  v2 = (char *)this + 25528;
  result = (_QWORD *)CA::WindowServer::IOMFBDisplay::service_int_property((CA::WindowServer::IOMFBDisplay *)*((unsigned int *)this + 6382), CFSTR("IdleState"));
  if (!v2[2524] && (*((_WORD *)this + 328) & 0x1C00) != 0x1000)
  {
    if (v2[2546])
      v8 = byte_1ECDC6A89 == 0;
    else
      v8 = 0;
    if (v8 && (_DWORD)result != 2 && (_DWORD)result != 1)
    {
      if (v2[2550])
        return CA::WindowServer::IOMFBDisplay::activate_replay_(this);
      result = (_QWORD *)CA::WindowServer::IOMFBDisplay::framebuffer_available(this, v4, v5, v6, v7);
      if ((_DWORD)result)
        return CA::WindowServer::IOMFBDisplay::activate_replay_(this);
    }
  }
  return result;
}

uint64_t CA::WindowServer::IOMFBDisplay::service_int_property(CA::WindowServer::IOMFBDisplay *this, const __CFString *a2)
{
  CFTypeRef CFProperty;
  const void *v3;
  uint64_t v4;

  if (!(_DWORD)this)
    return 0;
  CFProperty = IORegistryEntryCreateCFProperty((io_registry_entry_t)this, a2, 0, 0);
  if (!CFProperty)
    return 0;
  v3 = CFProperty;
  v4 = CA_CFIntValue(CFProperty);
  CFRelease(v3);
  return v4;
}

uint64_t CA::WindowServer::IOMFBServer::set_vsync_disabled(CA::WindowServer::IOMFBServer *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  __CFRunLoop *v4;

  v2 = (pthread_mutex_t *)((char *)this + 608);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 608));
  if (*((_BYTE *)this + 1005))
  {
    *((_BYTE *)this + 1005) = 0;
    if (BYTE9(xmmword_1ECDC6A90))
      kdebug_trace();
    if ((*((_BYTE *)this + 1006) & 2) != 0)
    {
      IOMobileFramebufferDisableVSyncNotifications();
    }
    else
    {
      v3 = *((_QWORD *)this + 100);
      if (v3)
      {
        v4 = (__CFRunLoop *)(*(uint64_t (**)(CA::WindowServer::IOMFBServer *))(*(_QWORD *)this + 384))(this);
        CADisplayTimerRemoveFromRunLoop(v3, v4, (const __CFString *)*MEMORY[0x1E0C9B280]);
      }
      CA::WindowServer::IOMFBDisplay::set_timings_enabled(*((CA::WindowServer::IOMFBDisplay **)this + 12), 0);
    }
  }
  return pthread_mutex_unlock(v2);
}

uint64_t CA::WindowServer::IOMFBDisplay::framebuffer_available(CA::WindowServer::IOMFBDisplay *this, uint64_t a2, uint64_t a3, uint64_t a4, double *a5)
{
  uint64_t *v6;

  CA::WindowServer::IOMFBDisplay::can_update_(this, 0, 0.0, 0.0, a3, a4, a5);
  v6 = (uint64_t *)*((_QWORD *)this + 3250);
  if (!v6)
    return 0;
  while (!v6[4] || *((_DWORD *)v6 + 2))
  {
    v6 = (uint64_t *)*v6;
    if (!v6)
      return 0;
  }
  return 1;
}

uint64_t CA::Display::DisplayLink::pause_timer_locked(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v4;

  v1 = *(_QWORD *)(this + 152);
  if (v1)
  {
    v2 = this;
    pthread_mutex_lock((pthread_mutex_t *)(v1 + 16));
    mk_timer_cancel();
    *(_BYTE *)(v1 + 200) = 1;
    v3 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(v1 + 192);
    if (v3)
      v3(v1, 2, *(_QWORD *)(v1 + 224), *(_QWORD *)(v1 + 216), *(_QWORD *)(v1 + 184));
    pthread_mutex_unlock((pthread_mutex_t *)(v1 + 16));
    v4 = *(_QWORD *)(v2 + 152);
    pthread_mutex_lock((pthread_mutex_t *)(v4 + 16));
    *(_QWORD *)(v4 + 240) = 0;
    return pthread_mutex_unlock((pthread_mutex_t *)(v4 + 16));
  }
  return this;
}

float64_t CA::OGL::get_filter_color_matrix(CA::OGL *this, const CA::Render::Filter *a2, CA::ColorMatrix *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float64x2_t *v8;
  float64x2_t v9;
  float64x2_t v10;

  if (!this)
    goto LABEL_14;
  v3 = *((unsigned int *)this + 4);
  if (!(_DWORD)v3)
    goto LABEL_14;
  v4 = 0;
  while (1)
  {
    v5 = *((_QWORD *)this + v4 + 3);
    if (*(_DWORD *)(v5 + 16) == 284)
      break;
    if (v3 == ++v4)
      goto LABEL_14;
  }
  if ((v4 & 0x80000000) == 0
    && (v6 = *(_QWORD *)(v5 + 24)) != 0
    && *(_BYTE *)(v6 + 12) == 56
    && *(_DWORD *)(v6 + 16) == 20)
  {
    v7 = 0;
    v8 = (float64x2_t *)(v6 + 24);
    do
    {
      v10 = *v8;
      v9 = v8[1];
      v8 += 2;
      *(float32x4_t *)((char *)a2 + v7) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v10), v9);
      v7 += 16;
    }
    while (v7 != 80);
  }
  else
  {
LABEL_14:
    *(_DWORD *)a2 = 1065353216;
    *(_QWORD *)&v9.f64[0] = 1065353216;
    *((_QWORD *)a2 + 9) = 1065353216;
    *(_QWORD *)((char *)a2 + 12) = 0;
    *(_QWORD *)((char *)a2 + 4) = 0;
    *(_QWORD *)((char *)a2 + 20) = 0x3F80000000000000;
    *(_QWORD *)((char *)a2 + 44) = 0x3F80000000000000;
    *(_QWORD *)((char *)a2 + 36) = 0;
    *(_QWORD *)((char *)a2 + 28) = 0;
    *(_QWORD *)((char *)a2 + 60) = 0;
    *(_QWORD *)((char *)a2 + 52) = 0;
    *((_DWORD *)a2 + 17) = 0;
  }
  return v9.f64[0];
}

void CA::WindowServer::IOMFBDisplay::update_frame_interval_reason_statistics(CA::WindowServer::IOMFBDisplay *this, double a2, double a3, unsigned int *a4, unsigned int a5)
{
  double v5;
  double v6;
  double v10;
  BOOL v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  uint64_t i;
  unsigned int v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  os_unfair_lock_s *lock;
  os_unfair_lock_s *v28;
  unsigned int v29;
  CA::WindowServer::IOMFBDisplay *v30;
  unsigned int v31;
  _OWORD v32[2];
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v5 = COERCE_DOUBLE(atomic_load((unint64_t *)this + 3437));
  if (v5 > a3)
    a3 = v5;
  if (*((_BYTE *)this + 28044))
  {
    v6 = a2 - a3;
    if (a2 - a3 >= 0.0
      && v6 >= (*(double (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 760))(this) + -0.001)
    {
      v10 = v6 + -0.001;
      v29 = a5;
      if (v6 + -0.001 >= 0.00833333333)
      {
        if (v10 >= 0.0125)
        {
          if (v10 >= 0.0166666667)
          {
            v11 = v10 >= 0.0208333333;
            if (v10 < 0.0208333333)
              v12 = 0;
            else
              v12 = -1;
          }
          else
          {
            v11 = 0;
            v12 = 4;
          }
        }
        else
        {
          v11 = 0;
          v12 = 8;
        }
      }
      else
      {
        v11 = 0;
        v12 = 12;
      }
      v13 = (v10 * 1000.0 + 1.0);
      v28 = (os_unfair_lock_s *)((char *)this + 27408);
      os_unfair_lock_lock((os_unfair_lock_t)this + 6852);
      lock = (os_unfair_lock_s *)((char *)this + 27440);
      os_unfair_lock_lock((os_unfair_lock_t)this + 6860);
      memset(v32, 0, sizeof(v32));
      v33 = 1065353216;
      v14 = *((_QWORD *)this + 3427);
      v30 = this;
      v15 = *((_QWORD *)this + 3428);
      if (v14 != v15)
      {
        v16 = (float *)((char *)this + 27448);
        do
        {
          if (!*(_BYTE *)(v14 + 24))
          {
            for (i = 8; i != 24; i += 4)
            {
              v18 = *(_DWORD *)(v14 + i);
              v31 = v18;
              if (!v18)
                break;
              v19 = std::__hash_table<std::__hash_value_type<unsigned int,CA::WindowServer::IOMFBDisplay::FrameRateBuckets>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,CA::WindowServer::IOMFBDisplay::FrameRateBuckets>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,CA::WindowServer::IOMFBDisplay::FrameRateBuckets>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,CA::WindowServer::IOMFBDisplay::FrameRateBuckets>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v16, v18, &v31);
              v20 = v19;
              if (!v11)
                ++*(_DWORD *)((char *)v19 + v12 + 20);
              if (!std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v32, v18))
              {
                *((_DWORD *)v20 + 9) += v13;
                std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)v32, v18, v18);
              }
            }
          }
          v14 += 28;
        }
        while (v14 != v15);
      }
      if (v29)
      {
        v21 = v29;
        do
        {
          v23 = *a4++;
          v22 = v23;
          v31 = v23;
          v24 = std::__hash_table<std::__hash_value_type<unsigned int,CA::WindowServer::IOMFBDisplay::FrameRateBuckets>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,CA::WindowServer::IOMFBDisplay::FrameRateBuckets>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,CA::WindowServer::IOMFBDisplay::FrameRateBuckets>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,CA::WindowServer::IOMFBDisplay::FrameRateBuckets>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((float *)v30 + 6862, v23, &v31);
          v25 = v24;
          if (!v11)
            ++*(_DWORD *)((char *)v24 + v12 + 20);
          if (!std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v32, v22))*((_DWORD *)v25 + 9) += v13;
          --v21;
        }
        while (v21);
      }
      v26 = std::__hash_table<std::__hash_value_type<unsigned int,CA::WindowServer::IOMFBDisplay::FrameRateBuckets>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,CA::WindowServer::IOMFBDisplay::FrameRateBuckets>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,CA::WindowServer::IOMFBDisplay::FrameRateBuckets>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,CA::WindowServer::IOMFBDisplay::FrameRateBuckets>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((float *)v30 + 6862, 0xFFFFFFFF, &kCAHighFrameRateReasonTotal);
      if (!v11)
        ++*(_DWORD *)((char *)v26 + v12 + 20);
      *((_DWORD *)v26 + 9) += v13;
      std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)v32);
      os_unfair_lock_unlock(lock);
      os_unfair_lock_unlock(v28);
    }
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,CA::WindowServer::IOMFBDisplay::FrameRateBuckets>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,CA::WindowServer::IOMFBDisplay::FrameRateBuckets>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,CA::WindowServer::IOMFBDisplay::FrameRateBuckets>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,CA::WindowServer::IOMFBDisplay::FrameRateBuckets>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(float *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v33;

  v5 = a2;
  v6 = *((_QWORD *)a1 + 1);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = a2;
      if (v6 <= a2)
        v8 = a2 % v6;
    }
    else
    {
      v8 = ((_DWORD)v6 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v8);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v11 >= v6)
                v11 %= v6;
            }
            else
            {
              v11 &= v6 - 1;
            }
            if (v11 != v8)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    v8 = 0;
  }
  v10 = operator new(0x28uLL);
  *v10 = 0;
  v10[1] = v5;
  *((_DWORD *)v10 + 4) = *a3;
  *(_QWORD *)((char *)v10 + 28) = 0;
  *(_QWORD *)((char *)v10 + 20) = 0;
  *((_DWORD *)v10 + 9) = 0;
  v12 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v13 = a1[8];
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    v14 = 1;
    if (v6 >= 3)
      v14 = (v6 & (v6 - 1)) != 0;
    v15 = v14 | (2 * v6);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      prime = (int8x8_t)v16;
    else
      prime = (int8x8_t)v15;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v6 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v6)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v6)
    {
      v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v6 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (*(_QWORD *)&prime <= v24)
        prime = (int8x8_t)v24;
      if (*(_QWORD *)&prime >= v6)
      {
        v6 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v18 = operator new(8 * *(_QWORD *)&prime);
          v19 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v18;
          if (v19)
            operator delete(v19);
          v20 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v20++) = 0;
          while (*(_QWORD *)&prime != v20);
          v21 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v21)
          {
            v22 = v21[1];
            v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(_QWORD *)&prime)
                v22 %= *(_QWORD *)&prime;
            }
            else
            {
              v22 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = a1 + 4;
            v27 = (_QWORD *)*v21;
            if (*v21)
            {
              do
              {
                v28 = v27[1];
                if (v23.u32[0] > 1uLL)
                {
                  if (v28 >= *(_QWORD *)&prime)
                    v28 %= *(_QWORD *)&prime;
                }
                else
                {
                  v28 &= *(_QWORD *)&prime - 1;
                }
                if (v28 != v22)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v21;
                    goto LABEL_55;
                  }
                  *v21 = *v27;
                  *v27 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v28);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v28) = v27;
                  v27 = v21;
                }
                v28 = v22;
LABEL_55:
                v21 = v27;
                v27 = (_QWORD *)*v27;
                v22 = v28;
              }
              while (v27);
            }
          }
          v6 = (unint64_t)prime;
          goto LABEL_59;
        }
        v33 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v33)
          operator delete(v33);
        v6 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
        v8 = v5 % v6;
      else
        v8 = v5;
    }
    else
    {
      v8 = ((_DWORD)v6 - 1) & v5;
    }
  }
  v29 = *(_QWORD **)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
  if (v30)
  {
    *v10 = *v30;
LABEL_72:
    *v30 = v10;
    goto LABEL_73;
  }
  *v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v29[v8] = a1 + 4;
  if (*v10)
  {
    v31 = *(_QWORD *)(*v10 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v31 >= v6)
        v31 %= v6;
    }
    else
    {
      v31 &= v6 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

_QWORD *CA::WindowServer::IOMFBDisplay::begin_work_interval(_QWORD *this, double a2, double a3, uint64_t a4, int a5, int a6)
{
  _QWORD *v11;
  unsigned __int8 *v12;
  double v13;
  int v14;
  double v15;
  double v16;
  double v17;
  double v18;
  _QWORD *v19;

  if (this[3188])
  {
    v11 = this;
    v12 = (unsigned __int8 *)this + 28099;
    (*(void (**)(_QWORD *))(*this + 760))(this);
    v14 = *v12;
    if ((v11[78] & 0x100) != 0)
      v14 = v12[3];
    v15 = a2 + v13 * -0.125;
    if (v14 && (a5 & 1) == 0)
    {
      v16 = (*(double (**)(_QWORD *))(*v11 + 760))(v11);
      v15 = v15 + v16 * (double)(*(unsigned int (**)(_QWORD *))(*v11 + 768))(v11);
    }
    v17 = 0.001;
    if (a5)
      v17 = 0.0014;
    v18 = v15 - v17;
    if (v18 <= a3 + 0.0001)
      v18 = a3 + 0.0001;
    v19 = (_QWORD *)v11[3188];
    v19[1] = a4;
    this = (_QWORD *)CAHostTimeWithTime(v18);
    v19[2] = this;
    *v19 = a6;
    if (v19[5])
    {
      mach_absolute_time();
      work_interval_instance_clear();
      work_interval_instance_set_start();
      work_interval_instance_set_deadline();
      work_interval_instance_set_complexity();
      work_interval_instance_start();
      return (_QWORD *)kdebug_trace();
    }
  }
  return this;
}

void CA::WindowServer::IOMFBServer::frame_info_callback(const void *a1, uint64_t a2, const __CFDictionary *a3, uint64_t *a4)
{
  CA::WindowServer::IOMFBDisplay::FrameInfo *v8;
  const __CFDictionary *Int64;
  const __CFDictionary *v10;
  const __CFDictionary *v11;
  _BYTE *v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int16 v19;
  uint64_t v20;
  const CA::WindowServer::IOMFBDisplay::FrameInfo *v21;
  unint64_t v22;
  unint64_t v23;
  _WORD *v24;
  _BOOL4 v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  __int16 v29;
  _BYTE *v30;
  unint64_t v31;
  BOOL v32;
  char *v33;
  unint64_t v34;
  double v35;
  double v36;
  unint64_t v37;
  unint64_t v38;
  double v39;
  double v40;
  unsigned __int8 *v41;
  unsigned __int8 v42;
  unsigned __int8 *v43;
  unsigned __int8 v44;
  unsigned __int8 *v45;
  unsigned __int8 v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char *v54;
  const __CFDictionary *v55;
  const __CFDictionary *v56;
  const __CFDictionary *v57;
  const __CFDictionary *v58;
  CA::WindowServer::IOMFBDisplay::FrameInfo *v59;
  double v60;
  double v61;
  unint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  _DWORD *v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int v68;
  pid_t v69;
  unsigned int v70;
  int v71;
  _DWORD *v72;
  uint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _DWORD *v79;
  _DWORD *v80;
  unint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  double v85;
  uint64_t v86;
  int v87;
  int v88;
  uint64_t *v89;
  int v90;
  uint64_t v91;
  int v92;
  int v93;
  uint64_t v94;
  int v95;
  int v96;
  uint64_t v97;
  int *v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t *i;
  unint64_t v102;
  unint64_t v103;
  os_signpost_id_t v104;
  NSObject *v105;
  _BOOL4 v106;
  double v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  const char *v111;
  int v112;
  unsigned int v113;
  const char *v114;
  int v115;
  int v116;
  int v117;
  unsigned int v118;
  double v119;
  int v120;
  const __CFArray *Count;
  _BOOL4 v122;
  const char *v123;
  const char *v124;
  unint64_t v125;
  double v126;
  CA::WindowServer::IOMFBServer *v127;
  unint64_t v128;
  int v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  unsigned int v134;
  _BOOL4 v135;
  unsigned __int8 v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  __int128 v147;
  char *v148;
  char *v149;
  double v150;
  CA::Render::ImageQueue *v151;
  _DWORD *v152;
  double v153;
  char *v154;
  char *v155;
  double v156;
  double v157;
  _QWORD *v158;
  unint64_t v159;
  const CA::WindowServer::IOMFBDisplay::FrameInfo *v160;
  unsigned int v161;
  uint64_t v162;
  malloc_zone_t *malloc_zone;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  _QWORD *v168;
  unint64_t v169;
  _QWORD *v170;
  unint64_t *v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  char *v180;
  uint64_t v181;
  char *v182;
  uint64_t *v183;
  char *v184;
  uint64_t v185;
  char **v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char **v196;
  char *v197;
  char *v198;
  char *v199;
  char *v200;
  char *v201;
  char *v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  BOOL v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  int64_t v218;
  char *v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  void *v223;
  char *v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  int64_t v233;
  char *v234;
  uint64_t v235;
  unint64_t v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  __int128 v241;
  void *v242;
  __int128 v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  __int128 v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  char *v252;
  uint64_t v253;
  char *v254;
  uint64_t *v255;
  uint64_t v256;
  uint64_t v257;
  char *v258;
  uint64_t v259;
  void *v260;
  char *v261;
  char *v262;
  uint64_t v263;
  unint64_t v264;
  char *v265;
  uint64_t v266;
  __int128 v267;
  uint64_t v268;
  _QWORD *v269;
  char *v270;
  _BYTE *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  char *v277;
  uint64_t v278;
  char *v279;
  uint64_t v280;
  uint64_t v281;
  char *v282;
  uint64_t *v283;
  uint64_t v284;
  uint64_t v285;
  void *v286;
  _BYTE *v287;
  _BYTE *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  char *v293;
  uint64_t v294;
  char *v295;
  uint64_t *v296;
  uint64_t v297;
  uint64_t v298;
  char *v299;
  uint64_t v300;
  void *v301;
  unint64_t v302;
  uint64_t v303;
  char *v304;
  uint64_t v305;
  uint64_t *v306;
  char *v307;
  uint64_t v308;
  uint64_t v309;
  char *v310;
  uint64_t v311;
  void *v312;
  char *v313;
  char *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  char *v322;
  int64_t v323;
  unint64_t v324;
  char *v325;
  uint64_t v326;
  char *v327;
  uint64_t *v328;
  uint64_t v329;
  uint64_t v330;
  char *v331;
  uint64_t v332;
  void *v333;
  uint64_t *v334;
  char *v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  int v339;
  uint64_t v340;
  uint64_t v341;
  unint64_t v342;
  uint32_t v343;
  uint64_t v344;
  NSObject *v345;
  uint64_t v346;
  char *v347;
  NSObject *v348;
  _OWORD *v349;
  unint64_t v350;
  const __CFDictionary *v351;
  const __CFDictionary *v352;
  const __CFDictionary *v353;
  unint64_t v354;
  unint64_t v355;
  unsigned int v356;
  unint64_t v357;
  unint64_t v358;
  uint64_t *v359;
  CFTypeRef cf;
  uint64_t v361;
  uint64_t v362;
  unint64_t v363;
  unsigned int v364;
  uint64_t v365;
  uint64_t v366;
  char v367;
  uint64_t v368;
  _QWORD *v369;
  int v370;
  char *v371;
  __int128 v372;
  __int128 v373;
  uint64_t v374;
  int v375;
  _QWORD *v376;
  int v377;
  int v378;
  unint64_t v379;
  float *v380;
  NSObject *v381;
  uint64_t v382;
  __int128 v383;
  __int128 v384;
  uint64_t v385;
  __int128 v386;
  _DWORD *v387;
  CA::WindowServer::IOMFBDisplay::FrameInfo *v388;
  _OWORD v389[3];
  uint8_t buf[8];
  uint64_t v391;
  _BYTE v392[10];
  __int16 v393;
  int v394;
  __int16 v395;
  int v396;
  __int16 v397;
  unsigned int v398;
  __int16 v399;
  double v400;
  __int16 v401;
  const char *v402;
  __int16 v403;
  int v404;
  __int16 v405;
  const char *v406;
  __int16 v407;
  const __CFArray *v408;
  uint8_t v409[104];
  uint64_t v410;

  v410 = *MEMORY[0x1E0C80C00];
  ++CA::WindowServer::IOMFBServer::frame_info_callback(__IOMobileFramebuffer *,unsigned int,__CFDictionary const*,void *)::frame_info_count;
  if (!(*(uint64_t (**)(uint64_t *))(*a4 + 384))(a4))
    __assert_rtn("frame_info_callback", "windowserver-iomfb-server.cpp", 1036, "run_loop != nullptr");
  v388 = 0;
  CA::WindowServer::IOMFBDisplay::collect_frame_info(&v388, a4[12], a2);
  v8 = v388;
  if (!v388)
    return;
  if ((*(_WORD *)((_BYTE *)v388 + 197) & 0x100) != 0)
  {
LABEL_10:
    v388 = 0;
    goto LABEL_236;
  }
  cf = a1;
  v364 = *((_DWORD *)v388 + 1);
  Int64 = CA_CFDictionaryGetInt64(a3, CFSTR("Presentation_time"));
  v10 = CA_CFDictionaryGetInt64(a3, CFSTR("Requested_presentation"));
  v11 = CA_CFDictionaryGetInt64(a3, CFSTR("Last_Fence_or_Event_Time"));
  v12 = (_BYTE *)a4[12];
  if (v12[28106])
  {
    *(_QWORD *)v409 = 0;
    *(_QWORD *)&v409[8] = 0;
    mach_get_times();
    Int64 = (const __CFDictionary *)((char *)Int64 - (*(_QWORD *)&v409[8] - *(_QWORD *)v409));
    v10 = (const __CFDictionary *)((char *)v10 - (*(_QWORD *)&v409[8] - *(_QWORD *)v409));
  }
  if ((*(_WORD *)((_BYTE *)v8 + 197) & 0x400) != 0)
  {
    kdebug_trace();
    CA::WindowServer::IOMFBDisplay::add_timing((CA::WindowServer::IOMFBDisplay *)a4[12], (unint64_t)Int64);
    CA::WindowServer::IOMFBServer::forward_frame_info_callback((CA::WindowServer::IOMFBServer *)a4, a3, v8, v21);
    goto LABEL_10;
  }
  v13 = CATimeWithHostTime((unint64_t)Int64);
  v14 = CATimeWithHostTime((unint64_t)v10);
  v15 = (*(double (**)(_BYTE *))(*(_QWORD *)v12 + 744))(v12);
  v363 = CAHostTimeWithTime(v15);
  *(_QWORD *)v409 = 0;
  *(_QWORD *)&v409[8] = 0;
  mach_get_times();
  v16 = *(_QWORD *)&v409[8] - *(_QWORD *)v409;
  v17 = *((_QWORD *)v8 + 4) - (*(_QWORD *)&v409[8] - *(_QWORD *)v409);
  kdebug_trace();
  v365 = v16;
  v368 = (uint64_t)Int64 + v16;
  v18 = *((_QWORD *)v8 + 4);
  v19 = *(_WORD *)((char *)v8 + 197);
  v361 = a2;
  if ((v19 & 0x80) != 0)
    v20 = 2;
  else
    v20 = *((unsigned __int8 *)v8 + 196) - 1;
  v358 = v368 - v18;
  if ((v19 & 0x40) != 0)
    v22 = v363;
  else
    v22 = 0;
  v23 = v22 + v20 * v363;
  if (v18 >= *((_QWORD *)v8 + 5))
  {
    v27 = 0;
    v25 = 0;
    v26 = v363;
  }
  else if (*((_QWORD *)v8 + 7) == -1 || (v24 = (_WORD *)a4[12], (v24[328] & 0x1C00) != 0))
  {
    v25 = 0;
    v26 = v363;
    v27 = v363;
  }
  else
  {
    v107 = (*(double (**)(_WORD *))(*(_QWORD *)v24 + 760))(v24);
    v108 = CAHostTimeWithTime(v107);
    if (*((_QWORD *)v8 + 7) <= v17)
      v109 = v17;
    else
      v109 = *((_QWORD *)v8 + 7);
    v19 = *(_WORD *)((char *)v8 + 197);
    v26 = v363;
    if ((v19 & 0x40) != 0)
      v110 = v363;
    else
      v110 = 0;
    v25 = v109 + v108 + v110 < *((_QWORD *)v8 + 5) - v16;
    v27 = v109 - v17;
  }
  v357 = v23 + v27;
  v28 = v358 > (v26 >> 1) + (v26 >> 6) + v23 + v27 || v25;
  v356 = v19 & 0x20;
  if (v28 == 1)
  {
    kdebug_trace();
    if (v356)
      kdebug_trace();
  }
  v29 = *(_WORD *)((char *)v8 + 197);
  if (v11 && (*(_WORD *)((_BYTE *)v8 + 197) & 0x800) != 0)
  {
    v30 = (_BYTE *)a4[12];
    if (!v30[28106])
    {
      *(_QWORD *)v409 = 0;
      *(_QWORD *)&v409[8] = 0;
      mach_get_times();
      v11 = (const __CFDictionary *)((char *)v11 + *(_QWORD *)&v409[8] - *(_QWORD *)v409);
    }
    v31 = *((_QWORD *)v8 + 5);
    v32 = (unint64_t)v11 >= v31;
    v33 = (char *)v11 - v31;
    if (v32)
      v34 = (unint64_t)v33;
    else
      v34 = 0;
    v35 = CATimeWithHostTime(v34);
    *((_BYTE *)a4 + 1004) = (v35 < (*(double (**)(_BYTE *))(*(_QWORD *)v30 + 744))(v30) * 0.4375) | (2 * *((_BYTE *)a4 + 1004));
    v29 = *(_WORD *)((char *)v8 + 197);
  }
  if ((v29 & 0x1000) != 0)
  {
    v36 = (*(double (**)(uint64_t))(*(_QWORD *)a4[12] + 760))(a4[12]);
    v37 = CAHostTimeWithTime(v36);
    if ((*(_DWORD *)(a4[12] + 624) & 0x10) != 0)
      v38 = v37;
    else
      v38 = 0;
    v39 = *((double *)a4 + 117);
    if (Int64 >= (const __CFDictionary *)((char *)v10 + (v37 >> 2) + v38))
    {
      v40 = v39 * 1.33333333;
      if (v40 > 10.0)
        v40 = 10.0;
    }
    else
    {
      v40 = v39 * 0.5;
      if (v40 < 0.25)
        v40 = 0.25;
    }
    *((double *)a4 + 117) = v40;
  }
  v41 = (unsigned __int8 *)(a4 + 58);
  do
    v42 = __ldaxr(v41);
  while (__stlxr(0, v41));
  if ((v42 & 1) == 0)
  {
    v43 = (unsigned __int8 *)a4 + 465;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(0, v43));
    if ((v44 & 1) == 0)
    {
      v45 = (unsigned __int8 *)a4 + 466;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(0, v45));
      if ((v46 & 1) == 0)
      {
        v47 = *((unsigned __int8 *)a4 + 1006);
        if (BYTE2(dword_1ECDC6B10) == ((v47 >> 3) & 1))
          goto LABEL_57;
        *((_BYTE *)a4 + 1006) = v47 & 0xF7 | (8 * BYTE2(dword_1ECDC6B10));
      }
    }
  }
  pthread_mutex_lock((pthread_mutex_t *)(a4 + 68));
  CA::WindowServer::IOMFBServer::set_throttle_reason((uint64_t)a4, 1u, *((unsigned __int8 *)a4 + 518));
  CA::WindowServer::IOMFBServer::set_throttle_reason((uint64_t)a4, 0, *((unsigned __int8 *)a4 + 517));
  CA::WindowServer::IOMFBServer::set_throttle_reason((uint64_t)a4, 2u, *((unsigned __int8 *)a4 + 523));
  CA::WindowServer::IOMFBServer::update_throttle((uint64_t)a4);
  pthread_mutex_unlock((pthread_mutex_t *)(a4 + 68));
LABEL_57:
  v362 = (uint64_t)Int64;
  if (initialized[0] != -1)
    dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
  v48 = *(float *)&dword_1ECDC69E0;
  if (*((_DWORD *)a4 + 232) != *(float *)&dword_1ECDC69E0)
  {
    pthread_mutex_lock((pthread_mutex_t *)(a4 + 68));
    *((_DWORD *)a4 + 232) = v48;
    CA::WindowServer::IOMFBServer::refresh_timer_interval((CA::WindowServer::IOMFBServer *)a4);
    CA::WindowServer::IOMFBDisplay::minimum_frame_duration_changed((os_unfair_lock_s *)a4[12]);
    pthread_mutex_unlock((pthread_mutex_t *)(a4 + 68));
  }
  CA::WindowServer::IOMFBDisplay::add_timing((CA::WindowServer::IOMFBDisplay *)a4[12], v362);
  v49 = a4[12];
  v50 = 0.003;
  if ((*(_DWORD *)(v49 + 624) & 0x10) != 0 && (*(_QWORD *)(v49 + 640) & 0x8000000000000000) != 0)
    v50 = (*(double (**)(uint64_t, double))(*(_QWORD *)v49 + 760))(v49, 0.003) + 0.003;
  if (v13 < v14 - v50)
  {
    v8 = v388;
    goto LABEL_235;
  }
  v51 = a4[12];
  v354 = *(_QWORD *)(v51 + 27104);
  *(_QWORD *)(v51 + 27104) = v368;
  if (CA::WindowServer::IOMFBServer::frame_info_callback(__IOMobileFramebuffer *,unsigned int,__CFDictionary const*,void *)::previous_swap_id)
    v52 = CA::WindowServer::IOMFBServer::frame_info_callback(__IOMobileFramebuffer *,unsigned int,__CFDictionary const*,void *)::previous_swap_id == (_DWORD)v361;
  else
    v52 = 1;
  if (v52)
    v53 = 0;
  else
    v53 = v362
        - CA::WindowServer::IOMFBServer::frame_info_callback(__IOMobileFramebuffer *,unsigned int,__CFDictionary const*,void *)::mt_previous_pres;
  CA::WindowServer::IOMFBServer::frame_info_callback(__IOMobileFramebuffer *,unsigned int,__CFDictionary const*,void *)::previous_swap_id = v361;
  CA::WindowServer::IOMFBServer::frame_info_callback(__IOMobileFramebuffer *,unsigned int,__CFDictionary const*,void *)::mt_previous_pres = v362;
  qword_1EDD12430 += v53;
  v54 = (char *)(v362 - (_QWORD)v10);
  if (v362 - (uint64_t)v10 < 0)
    v54 = (char *)v10 - v362;
  *(_QWORD *)&xmmword_1EDD12460 = &v54[xmmword_1EDD12460];
  if (CADeviceSupportsBandwidthStatistics::once != -1)
    dispatch_once(&CADeviceSupportsBandwidthStatistics::once, &__block_literal_global_239);
  if (CADeviceSupportsBandwidthStatistics::bw_stats)
  {
    v55 = CA_CFDictionaryGetInt64(a3, CFSTR("GP0_Max_BW"));
    v56 = CA_CFDictionaryGetInt64(a3, CFSTR("GP1_Max_BW"));
    v57 = CA_CFDictionaryGetInt64(a3, CFSTR("GP0_Obs_BW"));
    v58 = CA_CFDictionaryGetInt64(a3, CFSTR("GP1_Obs_BW"));
    atomic_store(COERCE_UNSIGNED_INT64((double)(unint64_t)v57), (unint64_t *)(a4[12] + 27696));
    atomic_store(COERCE_UNSIGNED_INT64((double)(unint64_t)v55), (unint64_t *)(a4[12] + 27704));
    atomic_store(COERCE_UNSIGNED_INT64((double)(unint64_t)v58), (unint64_t *)(a4[12] + 27712));
    atomic_store(COERCE_UNSIGNED_INT64((double)(unint64_t)v56), (unint64_t *)(a4[12] + 27720));
  }
  if (BYTE12(xmmword_1ECDC6A70))
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v348 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v409 = 67109888;
        *(_DWORD *)&v409[4] = v361;
        *(_WORD *)&v409[8] = 2048;
        *(double *)&v409[10] = v14;
        *(_WORD *)&v409[18] = 2048;
        *(double *)&v409[20] = v13;
        *(_WORD *)&v409[28] = 2048;
        *(double *)&v409[30] = v13 - v14;
        _os_log_impl(&dword_184457000, v348, OS_LOG_TYPE_DEFAULT, "CoreAnimation: swap %u : requested %.5f, presented at %.5f, diff %.5f\n", v409, 0x26u);
      }
    }
  }
  v59 = v388;
  v60 = *((double *)v388 + 3);
  v355 = v363;
  if (v60 != 0.0)
    v355 = CAHostTimeWithTime(v60);
  v61 = *((double *)v59 + 8);
  v359 = a4;
  if (v61 == 0.0)
  {
    CA::Render::invoke_presentation_handlers((_QWORD *)v8 + 12, v361, v368, v363, *((_BYTE *)v59 + 196), v13);
    v350 = 0;
    if (v28)
    {
LABEL_85:
      kdebug_trace();
      v375 = 1;
      goto LABEL_88;
    }
  }
  else
  {
    v62 = CAHostTimeWithTime(v61);
    *(_QWORD *)v409 = 0;
    *(_QWORD *)&v409[8] = 0;
    mach_get_times();
    v350 = *(_QWORD *)&v409[8] - *(_QWORD *)v409 + v62;
    if (*((_QWORD *)v59 + 4) > (unint64_t)((double)v350 + (double)v355 * 2.1))
      LOBYTE(v28) = 1;
    CA::Render::invoke_presentation_handlers((_QWORD *)v8 + 12, v361, v368, v363, *((_BYTE *)v59 + 196), v13);
    if ((v28 & 1) != 0)
      goto LABEL_85;
  }
  v375 = 0;
LABEL_88:
  v63 = (_QWORD *)*((_QWORD *)v8 + 12);
  v369 = (_QWORD *)((char *)v8 + 104);
  if (v63 != (_QWORD *)((char *)v8 + 104))
  {
    v351 = a3;
    v387 = 0;
    v380 = (float *)(v359[12] + 27112);
    v64 = -1;
    while (1)
    {
      v65 = (_DWORD *)v63[4];
      v66 = v65[4];
      v377 = *((_DWORD *)v63 + 11);
      v67 = v65 + 57;
      v68 = atomic_load(v65 + 57);
      if (!v68)
      {
        if (v65[63])
          v69 = 0;
        else
          v69 = getpid();
        while (1)
        {
          v70 = __ldaxr(v67);
          if (v70)
            break;
          if (!__stlxr(v69, v67))
          {
            v71 = 1;
            goto LABEL_98;
          }
        }
        v71 = 0;
        __clrex();
LABEL_98:
        if (v71)
          v68 = v69;
        else
          v68 = v70;
      }
      v72 = CA::Render::Context::process_path((CA::Render::Context *)v63[4]);
      v73 = *(_QWORD *)(v63[4] + 520);
      v74 = v63[6];
      *(_DWORD *)v409 = v66;
      v75 = std::__hash_table<std::__hash_value_type<unsigned int,CA::WindowServer::IOMFBDisplay::PreviousMCTRecord>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,CA::WindowServer::IOMFBDisplay::PreviousMCTRecord>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,CA::WindowServer::IOMFBDisplay::PreviousMCTRecord>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,CA::WindowServer::IOMFBDisplay::PreviousMCTRecord>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v380, v66, v409);
      v76 = v75[4];
      v77 = *(unsigned int *)(v63[4] + 44);
      if ((_DWORD)v77 != *((_DWORD *)v75 + 6))
      {
        *(_DWORD *)v409 = v66;
        v78 = std::__hash_table<std::__hash_value_type<unsigned int,CA::WindowServer::IOMFBDisplay::PreviousMCTRecord>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,CA::WindowServer::IOMFBDisplay::PreviousMCTRecord>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,CA::WindowServer::IOMFBDisplay::PreviousMCTRecord>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,CA::WindowServer::IOMFBDisplay::PreviousMCTRecord>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v380, v66, v409);
        v78[3] = v77;
        v78[4] = v368;
      }
      v79 = v387;
      if (v74 < v64)
        v79 = v72;
      v387 = v79;
      if (v74 < v64)
        v64 = v74;
      if (!v375)
        goto LABEL_120;
      kdebug_trace();
      v80 = v72 + 7;
      v81 = CAHostTimeWithTime(*(double *)(v63[4] + 624));
      *(_QWORD *)v409 = 0;
      *(_QWORD *)&v409[8] = 0;
      mach_get_times();
      v82 = *(_QWORD *)&v409[8] - *(_QWORD *)v409 + v81;
      if (v73)
      {
        if (CA::WindowServer::IOMFBServer::server_stall_log_handle(void)::once_token == -1)
        {
          if (!v66)
            goto LABEL_120;
        }
        else
        {
          dispatch_once(&CA::WindowServer::IOMFBServer::server_stall_log_handle(void)::once_token, &__block_literal_global_4);
          if (!v66)
            goto LABEL_120;
        }
        if (os_signpost_enabled((os_log_t)CA::WindowServer::IOMFBServer::server_stall_log_handle(void)::handle))
        {
          *(_DWORD *)v409 = 67241986;
          *(_DWORD *)&v409[4] = v68;
          *(_WORD *)&v409[8] = 1026;
          *(_DWORD *)&v409[10] = v364;
          *(_WORD *)&v409[14] = 2050;
          *(_QWORD *)&v409[16] = v74;
          *(_WORD *)&v409[24] = 2050;
          *(_QWORD *)&v409[26] = v76;
          *(_WORD *)&v409[34] = 2082;
          *(_QWORD *)&v409[36] = v80;
          *(_WORD *)&v409[44] = 2050;
          *(_QWORD *)&v409[46] = v82;
          *(_WORD *)&v409[54] = 2114;
          *(_QWORD *)&v409[56] = v73;
          *(_WORD *)&v409[64] = 1026;
          *(_DWORD *)&v409[66] = v377;
LABEL_119:
          _os_signpost_emit_unreliably_with_name_impl();
        }
      }
      else
      {
        if (CA::WindowServer::IOMFBServer::server_stall_log_handle(void)::once_token == -1)
        {
          if (!v66)
            goto LABEL_120;
        }
        else
        {
          dispatch_once(&CA::WindowServer::IOMFBServer::server_stall_log_handle(void)::once_token, &__block_literal_global_4);
          if (!v66)
            goto LABEL_120;
        }
        if (os_signpost_enabled((os_log_t)CA::WindowServer::IOMFBServer::server_stall_log_handle(void)::handle))
        {
          *(_DWORD *)v409 = 67241730;
          *(_DWORD *)&v409[4] = v68;
          *(_WORD *)&v409[8] = 1026;
          *(_DWORD *)&v409[10] = v364;
          *(_WORD *)&v409[14] = 2050;
          *(_QWORD *)&v409[16] = v74;
          *(_WORD *)&v409[24] = 2050;
          *(_QWORD *)&v409[26] = v76;
          *(_WORD *)&v409[34] = 2082;
          *(_QWORD *)&v409[36] = v80;
          *(_WORD *)&v409[44] = 2050;
          *(_QWORD *)&v409[46] = v82;
          *(_WORD *)&v409[54] = 1026;
          *(_DWORD *)&v409[56] = v377;
          goto LABEL_119;
        }
      }
LABEL_120:
      v83 = (_QWORD *)v63[1];
      if (v83)
      {
        do
        {
          v84 = v83;
          v83 = (_QWORD *)*v83;
        }
        while (v83);
      }
      else
      {
        do
        {
          v84 = (_QWORD *)v63[2];
          v52 = *v84 == (_QWORD)v63;
          v63 = v84;
        }
        while (!v52);
      }
      v63 = v84;
      if (v84 == v369)
      {
        v59 = v388;
        a3 = v351;
        goto LABEL_132;
      }
    }
  }
  v387 = 0;
LABEL_132:
  v85 = *((double *)v59 + 2);
  if (v85 == 0.0)
    v86 = 0;
  else
    v86 = CAHostTimeWithTime(v85) + v365;
  v87 = *(_DWORD *)(v359[12] + 24);
  v88 = *((_DWORD *)v59 + 48);
  if (v375)
  {
    if (CA::WindowServer::IOMFBServer::server_stall_log_handle(void)::once_token != -1)
      dispatch_once(&CA::WindowServer::IOMFBServer::server_stall_log_handle(void)::once_token, &__block_literal_global_4);
    v89 = &CA::WindowServer::IOMFBServer::server_stall_log_handle(void)::handle;
  }
  else
  {
    if (CA::WindowServer::IOMFBServer::server_log_handle(void)::once_token != -1)
      dispatch_once(&CA::WindowServer::IOMFBServer::server_log_handle(void)::once_token, &__block_literal_global_14116);
    v89 = &CA::WindowServer::IOMFBServer::server_log_handle(void)::in_memory_handle;
  }
  v90 = *(_DWORD *)v59;
  if (v86)
  {
    if (!v90 || !os_signpost_enabled((os_log_t)*v89))
      goto LABEL_150;
    v91 = *((_QWORD *)v59 + 4);
    v92 = *((_DWORD *)v59 + 1);
    v93 = *((unsigned __int8 *)v59 + 196);
    *(_DWORD *)v409 = 134351616;
    *(_QWORD *)&v409[4] = v91;
    *(_WORD *)&v409[12] = 1026;
    *(_DWORD *)&v409[14] = v92;
    *(_WORD *)&v409[18] = 2050;
    *(_QWORD *)&v409[20] = v355;
    *(_WORD *)&v409[28] = 1026;
    *(_DWORD *)&v409[30] = v93;
    *(_WORD *)&v409[34] = 2050;
    *(_QWORD *)&v409[36] = v368;
    *(_WORD *)&v409[44] = 2050;
    *(_QWORD *)&v409[46] = v354;
    *(_WORD *)&v409[54] = 1026;
    *(_DWORD *)&v409[56] = v356 >> 5;
    *(_WORD *)&v409[60] = 1026;
    *(_DWORD *)&v409[62] = v87;
    *(_WORD *)&v409[66] = 1026;
    *(_DWORD *)&v409[68] = v88;
    *(_WORD *)&v409[72] = 2050;
    *(_QWORD *)&v409[74] = v350;
    *(_WORD *)&v409[82] = 2050;
    *(_QWORD *)&v409[84] = v86;
  }
  else
  {
    if (!v90 || !os_signpost_enabled((os_log_t)*v89))
      goto LABEL_150;
    v94 = *((_QWORD *)v59 + 4);
    v95 = *((_DWORD *)v59 + 1);
    v96 = *((unsigned __int8 *)v59 + 196);
    *(_DWORD *)v409 = 134351360;
    *(_QWORD *)&v409[4] = v94;
    *(_WORD *)&v409[12] = 1026;
    *(_DWORD *)&v409[14] = v95;
    *(_WORD *)&v409[18] = 2050;
    *(_QWORD *)&v409[20] = v355;
    *(_WORD *)&v409[28] = 1026;
    *(_DWORD *)&v409[30] = v96;
    *(_WORD *)&v409[34] = 2050;
    *(_QWORD *)&v409[36] = v368;
    *(_WORD *)&v409[44] = 2050;
    *(_QWORD *)&v409[46] = v354;
    *(_WORD *)&v409[54] = 1026;
    *(_DWORD *)&v409[56] = v356 >> 5;
    *(_WORD *)&v409[60] = 1026;
    *(_DWORD *)&v409[62] = v87;
    *(_WORD *)&v409[66] = 1026;
    *(_DWORD *)&v409[68] = v88;
    *(_WORD *)&v409[72] = 2050;
    *(_QWORD *)&v409[74] = v350;
  }
  _os_signpost_emit_unreliably_with_name_impl();
LABEL_150:
  v97 = v359[12];
  v98 = (int *)(v97 + 27056);
  v99 = v363;
  if (!*(_BYTE *)(v97 + 28083))
    goto LABEL_186;
  memset(v409, 0, 96);
  os_unfair_lock_lock((os_unfair_lock_t)(v97 + 392));
  CA::WindowServer::Display::ModeSet::ModeSet((CA::WindowServer::Display::ModeSet *)v409, (const CA::WindowServer::Display::ModeSet *)(v97 + 400));
  os_unfair_lock_unlock((os_unfair_lock_t)(v97 + 392));
  v100 = *(unint64_t **)v409;
  if (*(_QWORD *)v409 == *(_QWORD *)&v409[8])
    goto LABEL_184;
  for (i = (unint64_t *)(*(_QWORD *)v409 + 8); i != *(unint64_t **)&v409[8]; ++i)
  {
    v102 = *i;
    if (((*v100 >> 54) & 1) == ((*i >> 54) & 1))
    {
      if (((*v100 >> 14) & 0x3FFF) * (*v100 & 0x3FFF) >= ((v102 >> 14) & 0x3FFF)
                                                                      * (v102 & 0x3FFF))
        continue;
LABEL_158:
      v100 = i;
      continue;
    }
    if ((v102 & 0x40000000000000) == 0)
      goto LABEL_158;
  }
  v103 = *v100;
  memset(v389, 0, 44);
  (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(_QWORD *)v97 + 1360))(v389, v97);
  if (CA::WindowServer::Display::get_display_perf_log(void)::once_token[0] != -1)
    dispatch_once(CA::WindowServer::Display::get_display_perf_log(void)::once_token, &__block_literal_global_61);
  v104 = *(unsigned int *)(v97 + 24);
  if ((_DWORD)v104)
  {
    v105 = CA::WindowServer::Display::get_display_perf_log(void)::log;
    if (os_signpost_enabled((os_log_t)CA::WindowServer::Display::get_display_perf_log(void)::log))
    {
      if (*(_BYTE *)(v97 + 28052))
        v106 = 0;
      else
        v106 = (*(_WORD *)(v97 + 656) & 0x1C00) != 4096;
      if (LODWORD(v389[0]) > 3)
        v111 = "Unspecified";
      else
        v111 = off_1E15AB790[LODWORD(v389[0])];
      v112 = v103 & 0x3FFF;
      v113 = (*(unsigned __int16 *)(v97 + 656) >> 13) - 1;
      v352 = a3;
      if (v113 > 4)
        v114 = "Unspecified";
      else
        v114 = off_1E15AB7B0[v113];
      v115 = *(unsigned __int8 *)(v97 + 28082);
      v117 = *v98;
      v116 = *(_DWORD *)(v97 + 27060);
      v118 = (v103 >> 14) & 0x3FFF;
      v119 = (double)((v103 >> 29) & 0x1FFFFFF) * 0.0000152587891;
      v120 = BYTE4(v389[1]);
      Count = *(const __CFArray **)(v97 + 27080);
      if (Count)
      {
        v122 = v106;
        v123 = v111;
        v381 = v105;
        v124 = v114;
        v378 = v116;
        v370 = v115;
        Count = (const __CFArray *)CFArrayGetCount(Count);
        v115 = v370;
        v116 = v378;
        v114 = v124;
        v105 = v381;
        v111 = v123;
        v106 = v122;
      }
      *(_DWORD *)buf = 67243010;
      *(_DWORD *)&buf[4] = v104;
      LOWORD(v391) = 1026;
      *(_DWORD *)((char *)&v391 + 2) = v106;
      HIWORD(v391) = 1026;
      *(_DWORD *)v392 = v115;
      *(_WORD *)&v392[4] = 1026;
      *(_DWORD *)&v392[6] = v117;
      v393 = 1026;
      v394 = v116;
      v395 = 1026;
      v396 = v112;
      v397 = 1026;
      v398 = v118;
      v399 = 2050;
      v400 = v119;
      v401 = 2082;
      v402 = v111;
      v403 = 1026;
      v404 = v120;
      v405 = 2082;
      v406 = v114;
      v407 = 2050;
      v408 = Count;
      _os_signpost_emit_with_name_impl(&dword_184457000, v105, OS_SIGNPOST_INTERVAL_END, v104, "HotPlug", "displayId=%{public, name=displayId}u isInternalPanel=%{public, BOOL, name=isInternalPanel}d state=%{public, BOOL, name=state}d vendorId=%{public, name=vendorId}u modelId=%{public, name=modelId}u bestWidth=%{public, name=bestWidth}d bestHeight=%{public, name=bestHeight}d bestRefreshRate=%{public, name=bestRefreshRate}.3f dolbyVision=%{public, name=dolbyVision}s legacyHDMI=%{public, BOOL, name=legacyHDMI}d preferredHdrType=%{public, name=preferredHdrType}s modeCount=%{public, name=modeCount}lu", buf, 0x5Au);
      a3 = v352;
      v99 = v363;
    }
  }
  *((_BYTE *)v98 + 1027) = 0;
LABEL_184:
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)&v409[48]);
  std::__tree<std::tuple<unsigned short,unsigned short>>::destroy(*(_QWORD **)&v409[32]);
  if (*(_QWORD *)v409)
  {
    *(_QWORD *)&v409[8] = *(_QWORD *)v409;
    operator delete(*(void **)v409);
  }
LABEL_186:
  v125 = 0;
  v126 = (double)(v368 - v354) / (double)v99;
  if (v126 < 0.95)
  {
    v127 = (CA::WindowServer::IOMFBServer *)v359;
    goto LABEL_214;
  }
  v127 = (CA::WindowServer::IOMFBServer *)v359;
  if (v126 <= 1.05 && ((v375 ^ 1) & 1) == 0)
  {
    v128 = v358 - v357;
    if (v358 == v357)
    {
      v125 = v128 <= v99 ? v99 : v358 - v357;
      v129 = 16;
    }
    else
    {
      v125 = v128 <= v99 ? v99 : v358 - v357;
      v129 = v354 >= *((_QWORD *)v59 + 4) ? 16 : 48;
    }
    v130 = *(unsigned __int16 *)((char *)v59 + 197);
    if ((os_variant_uses_ephemeral_storage() & 1) == 0)
    {
      v131 = mach_absolute_time();
      *(double *)&v132 = CATimeWithHostTime(v131);
      if (*(double *)&CATailspinLastDefaultCheckTimestamp == 0.0
        || *(double *)&v132 - *(double *)&CATailspinLastDefaultCheckTimestamp > 3600.0)
      {
        v133 = should_emit_tailspins();
        CATailspinCanGenerate = v133;
        CATailspinLastDefaultCheckTimestamp = v132;
      }
      else
      {
        v133 = CATailspinCanGenerate;
      }
      v127 = (CA::WindowServer::IOMFBServer *)v359;
      if (v133)
      {
        v134 = v129 & 0xFFFFFFBF | (((v130 >> 5) & 1) << 6);
        v135 = *(double *)&CATailspinMinimumTimestamp == 0.0;
        if (*(double *)&v132 >= *(double *)&CATailspinMinimumTimestamp)
          v135 = 1;
        if (v134 <= 0x1F && v135 && *(double *)&v132 - *(double *)&CATailspinLastRequestTimestamp >= 1800.0)
        {
          v379 = v125;
          {
            v349 = (_OWORD *)operator new();
            v349[1] = 0u;
            v349[2] = 0u;
            *v349 = 0u;
            CATailspinGlitchHistory(void)::a = (uint64_t)v349;
          }
          v137 = CATailspinGlitchHistory(void)::a;
          v138 = CAHostTimeWithTime(1.0);
          v139 = *(_QWORD *)(v137 + 32);
          v141 = *(_QWORD *)(v137 + 8);
          v140 = *(_QWORD *)(v137 + 16);
          v142 = (char *)(v141 + 8 * (v139 >> 8));
          if (v140 == v141)
          {
            v144 = 0;
            v146 = 0;
            v143 = *(_QWORD *)(v137 + 40);
            v376 = (_QWORD *)(v137 + 40);
            v145 = (char *)(v141 + 8 * ((v143 + v139) >> 8));
          }
          else
          {
            v143 = *(_QWORD *)(v137 + 40);
            v376 = (_QWORD *)(v137 + 40);
            v144 = *(_QWORD *)v142 + 16 * v139;
            v145 = (char *)(v141 + 8 * ((v143 + v139) >> 8));
            v146 = *(_QWORD *)v145 + 16 * (v143 + v139);
          }
          if (v146 == v144
            || (v164 = ((v146 - *(_QWORD *)v145) >> 4) + 32 * (v145 - v142),
                v165 = v144 - *(_QWORD *)v142,
                v166 = v164 - (v165 >> 4),
                v164 == v165 >> 4))
          {
            v168 = (_QWORD *)(v141 + 8 * (v139 >> 8));
          }
          else
          {
            v167 = v368 - v138;
            v168 = (_QWORD *)(v141 + 8 * (v139 >> 8));
            do
            {
              v169 = v166 >> 1;
              if (v166 == 1)
              {
                v170 = v168;
                v171 = (unint64_t *)v144;
              }
              else
              {
                v172 = v169 + ((v144 - *v168) >> 4);
                if (v172 < 1)
                {
                  v173 = 255 - v172;
                  LOBYTE(v172) = ~(-1 - v172);
                  v170 = &v168[-(v173 >> 8)];
                }
                else
                {
                  v170 = &v168[(unint64_t)v172 >> 8];
                }
                v171 = (unint64_t *)(*v170 + 16 * v172);
              }
              if (*v171 >= v167)
                v174 = 1;
              else
                v174 = 255;
              if (*v171 != v167 && v174 >= 0x80)
              {
                v144 = (uint64_t)(v171 + 2);
                if ((unint64_t *)((char *)v171 - *v170 + 16) == (unint64_t *)4096)
                {
                  v175 = v170[1];
                  ++v170;
                  v144 = v175;
                }
                v169 = v166 + ~v169;
                v168 = v170;
              }
              v166 = v169;
            }
            while (v169);
          }
          if (v140 == v141)
            v176 = 0;
          else
            v176 = *(_QWORD *)v142 + 16 * v139;
          if (v144 == v176)
            v177 = 0;
          else
            v177 = ((v144 - *v168) >> 4) + 32 * ((char *)v168 - v142) - ((v176 - *(_QWORD *)v142) >> 4);
          if (v140 == v141)
            v178 = 0;
          else
            v178 = *(_QWORD *)v142 + 16 * v139;
          v367 = v134;
          if (v178 == v176)
            v179 = 0;
          else
            v179 = ((v176 - *(_QWORD *)v142) >> 4) - ((v178 - *(_QWORD *)v142) >> 4);
          v353 = a3;
          v382 = v178;
          v180 = (char *)std::__deque_iterator<std::pair<unsigned long long,unsigned long long>,std::pair<unsigned long long,unsigned long long>*,std::pair<unsigned long long,unsigned long long>&,std::pair<unsigned long long,unsigned long long>**,long,256l>::operator+[abi:nn180100]((_QWORD *)(v141 + 8 * (v139 >> 8)), v178, v179);
          if (v177 >= 1)
          {
            v182 = v180;
            v366 = v140;
            v371 = (char *)v181;
            v183 = std::__deque_iterator<std::pair<unsigned long long,unsigned long long>,std::pair<unsigned long long,unsigned long long>*,std::pair<unsigned long long,unsigned long long>&,std::pair<unsigned long long,unsigned long long>**,long,256l>::operator+[abi:nn180100](v180, v181, v177);
            v185 = (uint64_t)v184;
            if (v179 > (unint64_t)(v143 - v177) >> 1)
            {
              v186 = (char **)(v141 + 8 * ((v139 + v143) >> 8));
              if (v366 == v141)
                v187 = 0;
              else
                v187 = (uint64_t)&(*v186)[16 * (v139 + v143)];
              if (v186 == (char **)v183)
              {
                memset(v409, 0, 24);
                v201 = (char *)v187;
                v198 = v182;
                v199 = v371;
              }
              else
              {
                v196 = (char **)(v183 + 1);
                v197 = (char *)(*v183 + 4096);
                memset(v409, 0, 24);
                v198 = v182;
                v199 = v371;
                while (1)
                {
                  std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::pair<unsigned long long,unsigned long long> *,std::__deque_iterator<std::pair<unsigned long long,unsigned long long>,std::pair<unsigned long long,unsigned long long> *,std::pair<unsigned long long,unsigned long long>&,std::pair<unsigned long long,unsigned long long> **,long,256l>,0>((char **)v409, v184, v197, v198, v199);
                  v198 = *(char **)&v409[8];
                  v199 = *(char **)&v409[16];
                  if (v196 == v186)
                    break;
                  v200 = *v196++;
                  v184 = v200;
                  v197 = v200 + 4096;
                  memset(v409, 0, 24);
                }
                v184 = *v186;
                memset(v409, 0, 24);
                v201 = (char *)v187;
              }
              std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::pair<unsigned long long,unsigned long long> *,std::__deque_iterator<std::pair<unsigned long long,unsigned long long>,std::pair<unsigned long long,unsigned long long> *,std::pair<unsigned long long,unsigned long long>&,std::pair<unsigned long long,unsigned long long> **,long,256l>,0>((char **)v409, v184, v201, v198, v199);
              v143 = *(_QWORD *)(v137 + 40) - v177;
              *(_QWORD *)(v137 + 40) = v143;
              v248 = *(_QWORD *)(v137 + 16);
              v125 = v379;
              while (1)
              {
                v249 = *(_QWORD *)(v137 + 8);
                v250 = v248 == v249 ? 0 : 32 * (v248 - v249) - 1;
                v139 = *(_QWORD *)(v137 + 32);
                if (v250 - (v143 + v139) < 0x200)
                  break;
                operator delete(*(void **)(v248 - 8));
                v248 = *(_QWORD *)(v137 + 16) - 8;
                *(_QWORD *)(v137 + 16) = v248;
                v143 = *(_QWORD *)(v137 + 40);
              }
LABEL_293:
              v202 = *(char **)(v137 + 16);
              v203 = *(char **)(v137 + 8);
              v204 = v202 - v203;
              if (v202 == v203)
                v205 = 0;
              else
                v205 = 32 * (v202 - v203) - 1;
              v206 = v143 + v139;
              if (v205 == v143 + v139)
              {
                if (v139 >= 0x100)
                {
                  *(_QWORD *)(v137 + 32) = v139 - 256;
                  v209 = *(_QWORD *)v203;
                  v208 = v203 + 8;
                  v207 = v209;
                  *(_QWORD *)(v137 + 8) = v208;
                  a3 = v353;
                  if (*(char **)(v137 + 24) == v202)
                  {
                    v210 = (uint64_t)&v208[-*(_QWORD *)v137];
                    if ((unint64_t)v208 <= *(_QWORD *)v137)
                    {
                      if (v202 == *(char **)v137)
                        v251 = 1;
                      else
                        v251 = (uint64_t)&v202[-*(_QWORD *)v137] >> 2;
                      v252 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Display::DisplayLinkItem *>>(v251);
                      v254 = &v252[8 * (v251 >> 2)];
                      v255 = *(uint64_t **)(v137 + 8);
                      v202 = v254;
                      v256 = *(_QWORD *)(v137 + 16) - (_QWORD)v255;
                      if (v256)
                      {
                        v202 = &v254[v256 & 0xFFFFFFFFFFFFFFF8];
                        v257 = 8 * (v256 >> 3);
                        v258 = &v252[8 * (v251 >> 2)];
                        do
                        {
                          v259 = *v255++;
                          *(_QWORD *)v258 = v259;
                          v258 += 8;
                          v257 -= 8;
                        }
                        while (v257);
                      }
                      v260 = *(void **)v137;
                      *(_QWORD *)v137 = v252;
                      *(_QWORD *)(v137 + 8) = v254;
                      *(_QWORD *)(v137 + 16) = v202;
                      *(_QWORD *)(v137 + 24) = &v252[8 * v253];
                      if (v260)
                      {
                        operator delete(v260);
                        v202 = *(char **)(v137 + 16);
                      }
                    }
                    else
                    {
                      v211 = v210 >> 3;
                      v212 = v210 >> 3 < -1;
                      v213 = (v210 >> 3) + 2;
                      if (v212)
                        v214 = v213;
                      else
                        v214 = v211 + 1;
                      v215 = -(v214 >> 1);
                      v216 = v214 >> 1;
                      v217 = &v208[-8 * v216];
                      v218 = v202 - v208;
                      if (v202 == v208)
                      {
                        v219 = v202;
                      }
                      else
                      {
                        memmove(&v208[-8 * v216], v208, v202 - v208);
                        v219 = *(char **)(v137 + 8);
                      }
                      v202 = &v217[v218];
                      *(_QWORD *)(v137 + 8) = &v219[8 * v215];
                      *(_QWORD *)(v137 + 16) = &v217[v218];
                      v125 = v379;
                    }
                  }
                  *(_QWORD *)v202 = v207;
                  goto LABEL_421;
                }
                v220 = v204 >> 3;
                v221 = *(char **)(v137 + 24);
                v222 = (uint64_t)&v221[-*(_QWORD *)v137];
                if (v204 >> 3 >= (unint64_t)(v222 >> 3))
                {
                  v235 = v222 >> 2;
                  if (v221 == *(char **)v137)
                    v236 = 1;
                  else
                    v236 = v235;
                  v237 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Display::DisplayLinkItem *>>(v236);
                  v239 = v238;
                  v240 = &v237[8 * v220];
                  *(_QWORD *)&v241 = v237;
                  *((_QWORD *)&v241 + 1) = v240;
                  v383 = v241;
                  v242 = operator new(0x1000uLL);
                  *(_QWORD *)&v243 = v240;
                  *((_QWORD *)&v243 + 1) = &v237[8 * v239];
                  if (v220 == v239)
                  {
                    v244 = 8 * v220;
                    if (v204 < 1)
                    {
                      v263 = v244 >> 2;
                      if (v202 == v203)
                        v264 = 1;
                      else
                        v264 = v263;
                      v265 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Display::DisplayLinkItem *>>(v264);
                      a3 = v353;
                      v240 = &v265[8 * (v264 >> 2)];
                      *(_QWORD *)&v267 = v265;
                      *((_QWORD *)&v267 + 1) = v240;
                      v384 = v267;
                      *(_QWORD *)&v267 = v240;
                      *((_QWORD *)&v267 + 1) = &v265[8 * v266];
                      v372 = v267;
                      if (v237)
                        operator delete(v237);
                      v247 = v384;
                      v243 = v372;
                    }
                    else
                    {
                      v245 = v244 >> 3;
                      if (v245 >= -1)
                        v246 = v245 + 1;
                      else
                        v246 = v245 + 2;
                      v240 -= 8 * (v246 >> 1);
                      *(_QWORD *)&v243 = v240;
                      *(_QWORD *)&v247 = v383;
                      *((_QWORD *)&v247 + 1) = v240;
                      a3 = v353;
                    }
                  }
                  else
                  {
                    a3 = v353;
                    v247 = v383;
                  }
                  *(_QWORD *)v240 = v242;
                  *(_QWORD *)&v243 = v243 + 8;
                  v268 = *(_QWORD *)(v137 + 16);
                  v125 = v379;
                  while (v268 != *(_QWORD *)(v137 + 8))
                  {
                    v269 = (_QWORD *)*((_QWORD *)&v247 + 1);
                    if (*((_QWORD *)&v247 + 1) == (_QWORD)v247)
                    {
                      v271 = (_BYTE *)v243;
                      if ((unint64_t)v243 >= *((_QWORD *)&v243 + 1))
                      {
                        if (*((_QWORD *)&v243 + 1) == *((_QWORD *)&v247 + 1))
                          v276 = 1;
                        else
                          v276 = (uint64_t)(*((_QWORD *)&v243 + 1) - *((_QWORD *)&v247 + 1)) >> 2;
                        v277 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Display::DisplayLinkItem *>>(v276);
                        v270 = &v277[(2 * v276 + 6) & 0xFFFFFFFFFFFFFFF8];
                        v279 = v270;
                        v280 = v271 - (_BYTE *)v269;
                        if (v271 != (_BYTE *)v269)
                        {
                          v279 = &v270[v280 & 0xFFFFFFFFFFFFFFF8];
                          v281 = 8 * (v280 >> 3);
                          v282 = v270;
                          v283 = v269;
                          do
                          {
                            v284 = *v283++;
                            *(_QWORD *)v282 = v284;
                            v282 += 8;
                            v281 -= 8;
                          }
                          while (v281);
                        }
                        *(_QWORD *)&v247 = v277;
                        *((_QWORD *)&v247 + 1) = v270;
                        *(_QWORD *)&v243 = v279;
                        *((_QWORD *)&v243 + 1) = &v277[8 * v278];
                        if (v269)
                        {
                          v386 = v247;
                          v373 = v243;
                          operator delete(v269);
                          v243 = v373;
                          v247 = v386;
                        }
                      }
                      else
                      {
                        v272 = (uint64_t)(*((_QWORD *)&v243 + 1) - v243) >> 3;
                        if (v272 >= -1)
                          v273 = v272 + 1;
                        else
                          v273 = v272 + 2;
                        v274 = v273 >> 1;
                        v275 = v243 + 8 * (v273 >> 1);
                        v270 = (char *)(v275 - (v243 - *((_QWORD *)&v247 + 1)));
                        if ((_QWORD)v243 == *((_QWORD *)&v247 + 1))
                        {
                          v271 = (_BYTE *)*((_QWORD *)&v247 + 1);
                        }
                        else
                        {
                          v385 = v247;
                          v374 = *((_QWORD *)&v243 + 1);
                          memmove((void *)(v275 - (v243 - *((_QWORD *)&v247 + 1))), *((const void **)&v247 + 1), v243 - *((_QWORD *)&v247 + 1));
                          *((_QWORD *)&v243 + 1) = v374;
                          *(_QWORD *)&v247 = v385;
                        }
                        *((_QWORD *)&v247 + 1) = v270;
                        *(_QWORD *)&v243 = &v271[8 * v274];
                      }
                    }
                    else
                    {
                      v270 = (char *)*((_QWORD *)&v247 + 1);
                    }
                    v285 = *(_QWORD *)(v268 - 8);
                    v268 -= 8;
                    *((_QWORD *)v270 - 1) = v285;
                    *((_QWORD *)&v247 + 1) -= 8;
                  }
                  v286 = *(void **)v137;
                  *(_OWORD *)v137 = v247;
                  *(_OWORD *)(v137 + 16) = v243;
                  if (v286)
                  {
                    operator delete(v286);
                    v202 = *(char **)(v137 + 16);
                  }
                  else
                  {
                    v202 = (char *)v243;
                  }
                }
                else
                {
                  v223 = operator new(0x1000uLL);
                  if (v221 == v202)
                  {
                    v261 = *(char **)(v137 + 8);
                    a3 = v353;
                    if (v261 == *(char **)v137)
                    {
                      v287 = *(_BYTE **)(v137 + 16);
                      v288 = *(_BYTE **)(v137 + 24);
                      if (v287 >= v288)
                      {
                        if (v288 == v261)
                          v302 = 1;
                        else
                          v302 = (v288 - v261) >> 2;
                        v303 = 2 * v302;
                        v304 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Display::DisplayLinkItem *>>(v302);
                        v262 = &v304[(v303 + 6) & 0xFFFFFFFFFFFFFFF8];
                        v306 = *(uint64_t **)(v137 + 8);
                        v307 = v262;
                        v308 = *(_QWORD *)(v137 + 16) - (_QWORD)v306;
                        if (v308)
                        {
                          v307 = &v262[v308 & 0xFFFFFFFFFFFFFFF8];
                          v309 = 8 * (v308 >> 3);
                          v310 = &v304[(v303 + 6) & 0xFFFFFFFFFFFFFFF8];
                          do
                          {
                            v311 = *v306++;
                            *(_QWORD *)v310 = v311;
                            v310 += 8;
                            v309 -= 8;
                          }
                          while (v309);
                        }
                        v312 = *(void **)v137;
                        *(_QWORD *)v137 = v304;
                        *(_QWORD *)(v137 + 8) = v262;
                        *(_QWORD *)(v137 + 16) = v307;
                        *(_QWORD *)(v137 + 24) = &v304[8 * v305];
                        a3 = v353;
                        v125 = v379;
                        if (v312)
                        {
                          operator delete(v312);
                          v262 = *(char **)(v137 + 8);
                        }
                      }
                      else
                      {
                        v289 = (v288 - v287) >> 3;
                        if (v289 >= -1)
                          v290 = v289 + 1;
                        else
                          v290 = v289 + 2;
                        v291 = v290 >> 1;
                        v262 = &v261[8 * (v290 >> 1)];
                        if (v287 != v261)
                        {
                          memmove(&v261[8 * (v290 >> 1)], v261, v287 - v261);
                          v261 = *(char **)(v137 + 16);
                        }
                        *(_QWORD *)(v137 + 8) = v262;
                        *(_QWORD *)(v137 + 16) = &v261[8 * v291];
                        a3 = v353;
                        v125 = v379;
                      }
                    }
                    else
                    {
                      v262 = *(char **)(v137 + 8);
                    }
                    *((_QWORD *)v262 - 1) = v223;
                    v313 = *(char **)(v137 + 8);
                    v314 = *(char **)(v137 + 16);
                    *(_QWORD *)(v137 + 8) = v313 - 8;
                    v315 = *((_QWORD *)v313 - 1);
                    *(_QWORD *)(v137 + 8) = v313;
                    if (v314 == *(char **)(v137 + 24))
                    {
                      v316 = (uint64_t)&v313[-*(_QWORD *)v137];
                      if ((unint64_t)v313 <= *(_QWORD *)v137)
                      {
                        if (v314 == *(char **)v137)
                          v324 = 1;
                        else
                          v324 = (uint64_t)&v314[-*(_QWORD *)v137] >> 2;
                        v325 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Display::DisplayLinkItem *>>(v324);
                        v327 = &v325[8 * (v324 >> 2)];
                        v328 = *(uint64_t **)(v137 + 8);
                        v314 = v327;
                        v329 = *(_QWORD *)(v137 + 16) - (_QWORD)v328;
                        if (v329)
                        {
                          v314 = &v327[v329 & 0xFFFFFFFFFFFFFFF8];
                          v330 = 8 * (v329 >> 3);
                          v331 = &v325[8 * (v324 >> 2)];
                          do
                          {
                            v332 = *v328++;
                            *(_QWORD *)v331 = v332;
                            v331 += 8;
                            v330 -= 8;
                          }
                          while (v330);
                        }
                        v333 = *(void **)v137;
                        *(_QWORD *)v137 = v325;
                        *(_QWORD *)(v137 + 8) = v327;
                        *(_QWORD *)(v137 + 16) = v314;
                        *(_QWORD *)(v137 + 24) = &v325[8 * v326];
                        a3 = v353;
                        v125 = v379;
                        if (v333)
                        {
                          operator delete(v333);
                          v314 = *(char **)(v137 + 16);
                        }
                      }
                      else
                      {
                        v317 = v316 >> 3;
                        v212 = v316 >> 3 < -1;
                        v318 = (v316 >> 3) + 2;
                        if (v212)
                          v319 = v318;
                        else
                          v319 = v317 + 1;
                        v320 = -(v319 >> 1);
                        v321 = v319 >> 1;
                        v322 = &v313[-8 * v321];
                        v323 = v314 - v313;
                        if (v314 != v313)
                        {
                          memmove(&v313[-8 * v321], v313, v314 - v313);
                          v313 = *(char **)(v137 + 8);
                        }
                        v314 = &v322[v323];
                        *(_QWORD *)(v137 + 8) = &v313[8 * v320];
                        *(_QWORD *)(v137 + 16) = &v322[v323];
                        a3 = v353;
                        v125 = v379;
                      }
                    }
                    *(_QWORD *)v314 = v315;
                  }
                  else
                  {
                    v224 = *(char **)(v137 + 16);
                    a3 = v353;
                    if (v224 == *(char **)(v137 + 24))
                    {
                      v225 = *(char **)(v137 + 8);
                      v226 = (uint64_t)&v225[-*(_QWORD *)v137];
                      if ((unint64_t)v225 <= *(_QWORD *)v137)
                      {
                        if (v224 == *(char **)v137)
                          v292 = 1;
                        else
                          v292 = (uint64_t)&v224[-*(_QWORD *)v137] >> 2;
                        v293 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CA::Display::DisplayLinkItem *>>(v292);
                        v295 = &v293[8 * (v292 >> 2)];
                        v296 = *(uint64_t **)(v137 + 8);
                        v224 = v295;
                        v297 = *(_QWORD *)(v137 + 16) - (_QWORD)v296;
                        if (v297)
                        {
                          v224 = &v295[v297 & 0xFFFFFFFFFFFFFFF8];
                          v298 = 8 * (v297 >> 3);
                          v299 = &v293[8 * (v292 >> 2)];
                          do
                          {
                            v300 = *v296++;
                            *(_QWORD *)v299 = v300;
                            v299 += 8;
                            v298 -= 8;
                          }
                          while (v298);
                          a3 = v353;
                          v125 = v379;
                        }
                        v301 = *(void **)v137;
                        *(_QWORD *)v137 = v293;
                        *(_QWORD *)(v137 + 8) = v295;
                        *(_QWORD *)(v137 + 16) = v224;
                        *(_QWORD *)(v137 + 24) = &v293[8 * v294];
                        if (v301)
                        {
                          operator delete(v301);
                          v224 = *(char **)(v137 + 16);
                        }
                      }
                      else
                      {
                        v227 = v226 >> 3;
                        v212 = v226 >> 3 < -1;
                        v228 = (v226 >> 3) + 2;
                        if (v212)
                          v229 = v228;
                        else
                          v229 = v227 + 1;
                        v230 = -(v229 >> 1);
                        v231 = v229 >> 1;
                        v232 = &v225[-8 * v231];
                        v233 = v224 - v225;
                        if (v224 != v225)
                        {
                          memmove(&v225[-8 * v231], v225, v224 - v225);
                          v224 = *(char **)(v137 + 8);
                        }
                        v234 = &v224[8 * v230];
                        v224 = &v232[v233];
                        *(_QWORD *)(v137 + 8) = v234;
                        *(_QWORD *)(v137 + 16) = &v232[v233];
                        v125 = v379;
                      }
                    }
                    *(_QWORD *)v224 = v223;
                  }
LABEL_421:
                  v202 = (char *)(*(_QWORD *)(v137 + 16) + 8);
                  *(_QWORD *)(v137 + 16) = v202;
                }
                v139 = *(_QWORD *)(v137 + 32);
                v143 = *(_QWORD *)(v137 + 40);
                v203 = *(char **)(v137 + 8);
                v206 = v139 + v143;
              }
              else
              {
                a3 = v353;
              }
              v334 = (uint64_t *)(*(_QWORD *)&v203[(v206 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v206);
              *v334 = v368;
              v334[1] = v125;
              *(_QWORD *)(v137 + 40) = v143 + 1;
              if (v202 == v203
                || (v335 = &v203[8 * (v139 >> 8)],
                    v336 = *(_QWORD *)v335,
                    v337 = *(_QWORD *)v335 + 16 * v139,
                    v338 = *(_QWORD *)&v203[((*v376 + v139) >> 5) & 0x7FFFFFFFFFFFFF8]
                         + 16 * (*(_BYTE *)v376 + v139),
                    v337 == v338))
              {
                v342 = 0;
                v127 = (CA::WindowServer::IOMFBServer *)v359;
              }
              else
              {
                v339 = 0;
                v127 = (CA::WindowServer::IOMFBServer *)v359;
                do
                {
                  v340 = v337 + 16;
                  if (v337 + 16 - v336 == 4096)
                  {
                    v341 = *((_QWORD *)v335 + 1);
                    v335 += 8;
                    v336 = v341;
                    v340 = v341;
                  }
                  v339 += *(_DWORD *)(v337 + 8);
                  v337 = v340;
                }
                while (v340 != v338);
                v342 = v339;
              }
              v343 = (CATimeWithHostTime(v342) * 1000.0);
              if (arc4random_uniform(0xFAu) <= v343)
              {
                v344 = (uint64_t)(v387 + 7);
                if (!objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v387 + 7), "lastPathComponent"), "isEqual:", CFSTR("SpringBoard"))|| arc4random_uniform(0x64u) >= 0x55)
                {
                  if (x_log_hook_p())
                  {
                    x_log_();
                  }
                  else
                  {
                    v345 = x_log_category_utilities;
                    if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_INFO))
                    {
                      v346 = *v376;
                      *(_DWORD *)v409 = 134218240;
                      *(_QWORD *)&v409[4] = v346;
                      *(_WORD *)&v409[12] = 1024;
                      *(_DWORD *)&v409[14] = v343;
                      _os_log_impl(&dword_184457000, v345, OS_LOG_TYPE_INFO, "Diagnostics (tailspin) allowed for %zu glitches with %d ms glitch time.", v409, 0x12u);
                    }
                  }
                  CATailspinLastRequestTimestamp = v132;
                  if (CADeviceHasInternalBuild::once != -1)
                    dispatch_once(&CADeviceHasInternalBuild::once, &__block_literal_global_107);
                  if (CADeviceHasInternalBuild::internal)
                  {
                    memset(v409, 0, 24);
                    *(_DWORD *)&buf[4] = 0;
                    v391 = 0;
                    *(_DWORD *)buf = 14;
                    *(_QWORD *)v392 = v409;
                    CA::Render::post_notification(0x30u, 0, (uint64_t)buf, 0);
                    v347 = x_stream_finish((uint64_t)v409);
                    if (*(_QWORD *)v409)
                      free(*(void **)v409);
                    CATailspinEmit(v361, v364, v367, v344, v347);
                    if (v347)
                      free(v347);
                  }
                  else
                  {
                    CATailspinEmit(v361, v364, v367, v344, 0);
                  }
                }
              }
              goto LABEL_214;
            }
            if (v142 == v182)
            {
              memset(v409, 0, 24);
              v195 = v382;
              v194 = (uint64_t)v371;
              v192 = v183;
            }
            else
            {
              v190 = *(_QWORD *)v182;
              v189 = (uint64_t *)(v182 - 8);
              v188 = v190;
              memset(v409, 0, 24);
              v191 = (uint64_t)v371;
              v192 = v183;
              while (1)
              {
                std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::pair<unsigned long long,unsigned long long> *,std::__deque_iterator<std::pair<unsigned long long,unsigned long long>,std::pair<unsigned long long,unsigned long long> *,std::pair<unsigned long long,unsigned long long>&,std::pair<unsigned long long,unsigned long long> **,long,256l>,0>(v409, v188, v191, v192, v185);
                v192 = *(uint64_t **)&v409[8];
                v185 = *(_QWORD *)&v409[16];
                if (v189 == (uint64_t *)v142)
                  break;
                v193 = *v189--;
                v188 = v193;
                v191 = v193 + 4096;
                memset(v409, 0, 24);
              }
              v194 = *(_QWORD *)v142 + 4096;
              memset(v409, 0, 24);
              v195 = v382;
            }
            std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::pair<unsigned long long,unsigned long long> *,std::__deque_iterator<std::pair<unsigned long long,unsigned long long>,std::pair<unsigned long long,unsigned long long> *,std::pair<unsigned long long,unsigned long long>&,std::pair<unsigned long long,unsigned long long> **,long,256l>,0>(v409, v195, v194, v192, v185);
            *(_QWORD *)(v137 + 40) -= v177;
            while (1)
            {
              v139 = *(_QWORD *)(v137 + 32) + v177;
              *(_QWORD *)(v137 + 32) = v139;
              if (v139 < 0x200)
                break;
              operator delete(**(void ***)(v137 + 8));
              *(_QWORD *)(v137 + 8) += 8;
              v177 = -256;
            }
            v143 = *(_QWORD *)(v137 + 40);
          }
          v125 = v379;
          goto LABEL_293;
        }
      }
    }
  }
LABEL_214:
  qword_1EDD12530 += v125;
  *(_QWORD *)v409 = cf;
  *(_QWORD *)&v409[8] = 0;
  *(_QWORD *)&v409[16] = 0;
  *(_QWORD *)&v409[24] = cf;
  *(_QWORD *)&v147 = -1;
  *((_QWORD *)&v147 + 1) = -1;
  *(_OWORD *)&v409[32] = v147;
  *(_OWORD *)&v409[48] = v147;
  if (cf)
    CFRetain(cf);
  CA::IOMobileFramebuffer::swap_wait((CA::IOMobileFramebuffer *)v409);
  v8 = v388;
  v148 = (char *)*((_QWORD *)v388 + 9);
  v149 = (char *)v388 + 80;
  if (v148 != (char *)v388 + 80)
  {
    v150 = v13 - v14;
    do
    {
      v151 = (CA::Render::ImageQueue *)*((_QWORD *)v148 + 4);
      if (*((_BYTE *)v151 + 12) != 25)
        __assert_rtn("frame_info_callback", "windowserver-iomfb-server.cpp", 1510, "obj->type () == Render::kTypeImageQueue");
      v152 = (_DWORD *)*((_QWORD *)v127 + 12);
      v153 = 0.0;
      if ((v152[156] & 0x10) != 0)
        v153 = (*(double (**)(_DWORD *))(*(_QWORD *)v152 + 760))(v152);
      CA::Render::ImageQueue::did_display(v151, v364, v13, v150, v153);
      v154 = (char *)*((_QWORD *)v148 + 1);
      if (v154)
      {
        do
        {
          v155 = v154;
          v154 = *(char **)v154;
        }
        while (v154);
      }
      else
      {
        do
        {
          v155 = (char *)*((_QWORD *)v148 + 2);
          v52 = *(_QWORD *)v155 == (_QWORD)v148;
          v148 = v155;
        }
        while (!v52);
      }
      v148 = v155;
    }
    while (v155 != v149);
  }
  v156 = CATimeWithHostTime(v362 - *((_QWORD *)v127 + 115));
  v157 = fmax(round(v156 / (*(double (**)(_QWORD))(**((_QWORD **)v127 + 12) + 760))(*((_QWORD *)v127 + 12)))+ -1.0, 0.0);
  v158 = (_QWORD *)*((_QWORD *)v127 + 12);
  v159 = 240;
  if ((unint64_t)v157 < 0xF0)
    v159 = (unint64_t)v157;
  ++*(_QWORD *)(v158[3171] + 8 * v159);
  if ((unint64_t)v157 + 1 == (*(unsigned int (**)(_QWORD *))(*v158 + 768))(v158))
  {
    v161 = *(_WORD *)((_BYTE *)v8 + 197) & 0xF;
    if (v161 >= 9)
      v161 = 9;
    v162 = *((_QWORD *)v127 + 12) + 4 * v161;
    ++*(_DWORD *)(v162 + 25460);
  }
  *((_QWORD *)v127 + 115) = v362;
  CA::WindowServer::IOMFBServer::forward_frame_info_callback(v127, a3, v8, v160);
  if (*(_QWORD *)v409)
    CFRelease(*(CFTypeRef *)v409);
LABEL_235:
  v388 = 0;
  if (v8)
  {
LABEL_236:
    CA::WindowServer::IOMFBDisplay::FrameInfo::~FrameInfo(v8);
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, v8);
  }
}

void sub_184519530(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_DWORD *CA::Render::Context::process_path(CA::Render::Context *this)
{
  uint64_t v1;
  _DWORD *result;
  unsigned int *v3;
  pid_t v4;
  unsigned int v5;
  int v6;
  int v7;
  const char *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _BYTE buffer[4096];
  uint64_t v14;

  v1 = MEMORY[0x1E0C80A78](this);
  v14 = *MEMORY[0x1E0C80C00];
  result = *(_DWORD **)(v1 + 232);
  if (!result)
  {
    bzero(buffer, 0x1000uLL);
    v3 = (unsigned int *)(v1 + 228);
    v4 = atomic_load((unsigned int *)(v1 + 228));
    if (!v4)
    {
      if (*(_DWORD *)(v1 + 252))
        v4 = 0;
      else
        v4 = getpid();
      while (1)
      {
        v5 = __ldaxr(v3);
        if (v5)
          break;
        if (!__stlxr(v4, v3))
        {
          v6 = 1;
          goto LABEL_10;
        }
      }
      v6 = 0;
      __clrex();
LABEL_10:
      if (!v6)
        v4 = v5;
    }
    v7 = proc_pidpath(v4, buffer, 0x1000u);
    result = CA::Render::String::new_string((CA::Render::String *)v7, buffer, v8);
    v9 = *(unsigned int **)(v1 + 232);
    *(_QWORD *)(v1 + 232) = result;
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
      return *(_DWORD **)(v1 + 232);
    }
  }
  return result;
}

unint64_t CA::WindowServer::IOMFBServer::vbl_delta(CA::WindowServer::IOMFBServer *this)
{
  uint64_t *v2;
  uint64_t v3;
  double v4;
  unint64_t v5;
  unsigned int *v6;
  int v7;
  double v8;
  unint64_t v9;
  unsigned int v10;
  char v12;

  v2 = (uint64_t *)*((_QWORD *)this + 12);
  v3 = *v2;
  if ((v2[78] & 0x100) != 0)
  {
    v8 = (*(double (**)(void))(v3 + 760))();
    v9 = CAHostTimeWithTime(v8);
    v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 136))(*((_QWORD *)this + 12));
    if (!v10)
      v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 784))(*((_QWORD *)this + 12));
    return v9 * v10;
  }
  else
  {
    v4 = (*(double (**)(void))(v3 + 744))();
    v5 = CAHostTimeWithTime(v4);
    v6 = (unsigned int *)(*((_QWORD *)this + 12) + 25528);
    if (*((_BYTE *)v6 + 2549)
      && CA::WindowServer::IOMFBDisplay::service_int_property((CA::WindowServer::IOMFBDisplay *)*v6, CFSTR("VRRIsIdle")))
    {
      if (CA::WindowServer::IOMFBDisplay::vrr_rate(void)::initialized == 1)
      {
        v7 = CA::WindowServer::IOMFBDisplay::vrr_rate(void)::rate;
      }
      else
      {
        v7 = CA::WindowServer::IOMFBDisplay::service_int_property((CA::WindowServer::IOMFBDisplay *)*v6, CFSTR("VRRDivisor"));
        CA::WindowServer::IOMFBDisplay::vrr_rate(void)::rate = v7;
        CA::WindowServer::IOMFBDisplay::vrr_rate(void)::initialized = 1;
      }
      v12 = (int)(float)(3932200.0 / (float)v7) == 30;
    }
    else
    {
      v12 = 0;
    }
    return v5 << v12;
  }
}

double CA::WindowServer::AppleInternalDisplay::heartbeat_rate(CA::WindowServer::AppleInternalDisplay *this)
{
  double result;
  char *v3;
  unint64_t v4;
  double v5;
  uint64_t v6;

  result = *((double *)this + 3554);
  if (result == 0.0)
  {
    v3 = getenv("CA_HEARTBEAT_RATE");
    if (v3)
    {
      result = 1.0 / atof(v3);
    }
    else
    {
      result = *((double *)this + 3550);
      if (result == 0.0)
      {
        v4 = *((_QWORD *)this + 3549);
        if (v4)
        {
          v5 = 1.16415322e-10;
          if ((*((_DWORD *)this + 156) & 0x10) == 0)
            v5 = 2.32830644e-10;
          result = v5 * (double)v4;
        }
        else
        {
          result = 0.0166666667;
        }
      }
    }
    *((double *)this + 3554) = result;
  }
  v6 = *((_QWORD *)this + 80);
  if (v6 != -1)
  {
    result = 65536.0 / (double)(((unint64_t)v6 >> 29) & 0x1FFFFFF);
    if ((*((_DWORD *)this + 156) & 0x10) != 0 && v6 < 0)
      return result * 0.5;
  }
  return result;
}

uint64_t CA::WindowServer::IOMFBServer::timer_callback(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unsigned int v9;
  unsigned int v10;
  _DWORD *v11;
  int v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  _QWORD v16[4];

  v16[3] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    CA::WindowServer::IOMFBDisplay::timing_reference((CA::WindowServer::IOMFBDisplay *)v16, *(_QWORD *)(a5 + 96), 1);
    a4 += CADisplayTimerAlignPhase(a1, v16);
  }
  v9 = CA::WindowServer::IOMFBDisplay::timing_granularity(*(os_unfair_lock_s **)(a5 + 96), 1);
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a5 + 96) + 768))(*(_QWORD *)(a5 + 96));
  v11 = *(_DWORD **)(a5 + 96);
  if ((v11[156] & 0x100) != 0)
  {
    v12 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v11 + 136))(v11);
    if (!v12)
      v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a5 + 96) + 784))(*(_QWORD *)(a5 + 96));
    if (v12 != *(_DWORD *)(a5 + 932))
    {
      pthread_mutex_lock((pthread_mutex_t *)(a5 + 544));
      CA::WindowServer::IOMFBServer::refresh_timer_interval((CA::WindowServer::IOMFBServer *)a5);
      pthread_mutex_unlock((pthread_mutex_t *)(a5 + 544));
    }
  }
  result = *(_QWORD *)(a5 + 96);
  if ((*(_DWORD *)(result + 624) & 0x100) == 0)
    goto LABEL_9;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 136))(result);
  if (!(_DWORD)result)
  {
    if (CAPrefers60HzAPT(void)::once[0] != -1)
      dispatch_once(CAPrefers60HzAPT(void)::once, &__block_literal_global_2);
    if (!CAPrefers60HzAPT(void)::enabled)
    {
LABEL_9:
      v14 = ++CA::WindowServer::IOMFBServer::timer_callback(_CADisplayTimer *,unsigned long long,unsigned long long,unsigned long long,void *)::serial;
      return CA::WindowServer::IOMFBServer::vsync_callback(result, v14, a2, v10 * (unint64_t)v9, a5);
    }
    result = 4;
  }
  v15 = result;
  if (byte_1ECDC6AC6)
    result = kdebug_trace();
  v14 = ++CA::WindowServer::IOMFBServer::timer_callback(_CADisplayTimer *,unsigned long long,unsigned long long,unsigned long long,void *)::serial;
  if (!(a4 % v15))
    return CA::WindowServer::IOMFBServer::vsync_callback(result, v14, a2, v10 * (unint64_t)v9, a5);
  return result;
}

uint64_t CA::WindowServer::IOMFBDisplay::timing_server_frame_interval(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  unsigned __int8 *v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;

  v2 = this + 6504;
  os_unfair_lock_lock(this + 6504);
  v3 = *(unsigned __int8 **)&this[6508]._os_unfair_lock_opaque;
  if (v3 && (v4 = atomic_load(v3), (v4 & 1) != 0))
  {
    v6 = atomic_load((unint64_t *)(*(_QWORD *)&this[6508]._os_unfair_lock_opaque + 24));
    if (v6 && v6 < mach_absolute_time())
      v7 = (unsigned int *)(*(_QWORD *)&this[6508]._os_unfair_lock_opaque + 40);
    else
      v7 = (unsigned int *)(*(_QWORD *)&this[6508]._os_unfair_lock_opaque + 36);
    v5 = atomic_load(v7);
  }
  else
  {
    v5 = 0;
  }
  os_unfair_lock_unlock(v2);
  return v5;
}

void CA::WindowServer::IOMFBDisplay::timing_reference(CA::WindowServer::IOMFBDisplay *this, uint64_t a2, int a3)
{
  os_unfair_lock_s *v6;
  unsigned __int8 *v7;
  unsigned __int8 v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = (os_unfair_lock_s *)(a2 + 26016);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 26016));
  v7 = *(unsigned __int8 **)(a2 + 26032);
  if (v7 && ((v8 = atomic_load(v7), (v8 & 1) != 0) || !a3))
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
    v9 = atomic_load((unsigned int *)(*(_QWORD *)(a2 + 26032) + 4));
    *((_QWORD *)this + 2) = v9;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 128))(a2);
    v11 = *(_QWORD **)(a2 + 26032);
    if (v10)
    {
      v12 = v11[3];
      v13 = v11[6];
      v14 = v11[7];
      v15 = v11[8];
      *(_QWORD *)this = v13;
      *((_QWORD *)this + 1) = v15;
      if (v12 && v12 < mach_absolute_time())
        *(_QWORD *)this = v14;
    }
    else
    {
      v16 = v11[6];
      v17 = v11[8];
      *(_QWORD *)this = v16;
      *((_QWORD *)this + 1) = v17;
    }
  }
  else
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
  }
  os_unfair_lock_unlock(v6);
}

uint64_t CA::WindowServer::AppleInternalDisplay::uses_extended_display_timings(CA::WindowServer::AppleInternalDisplay *this)
{
  return (*((_DWORD *)this + 156) >> 8) & 1;
}

unint64_t CA::WindowServer::IOMFBDisplay::timing_granularity(os_unfair_lock_s *this, int a2)
{
  os_unfair_lock_s *v4;
  unsigned __int8 *v5;
  unsigned __int8 v6;
  double v7;
  unint64_t v8;

  v4 = this + 6504;
  os_unfair_lock_lock(this + 6504);
  v5 = *(unsigned __int8 **)&this[6508]._os_unfair_lock_opaque;
  if (v5 && ((v6 = atomic_load(v5), (v6 & 1) != 0) || !a2))
  {
    v8 = atomic_load((unsigned int *)(*(_QWORD *)&this[6508]._os_unfair_lock_opaque + 4));
  }
  else
  {
    v7 = (*(double (**)(os_unfair_lock_s *))(*(_QWORD *)&this->_os_unfair_lock_opaque + 760))(this);
    v8 = CAHostTimeWithTime(v7);
  }
  os_unfair_lock_unlock(v4);
  return v8;
}

uint64_t CA::WindowServer::IOMFBServer::run_loop(CA::WindowServer::IOMFBServer *this)
{
  return *((_QWORD *)this + 96);
}

void CA::WindowServer::IOMFBDisplay::add_timing(CA::WindowServer::IOMFBDisplay *this, unint64_t a2)
{
  os_unfair_lock_s *v4;
  unsigned __int8 *v5;
  unsigned __int8 v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  double v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  _DWORD *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  _BYTE buf[12];
  __int16 v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v4 = (os_unfair_lock_s *)((char *)this + 26016);
  os_unfair_lock_lock((os_unfair_lock_t)this + 6504);
  CA::WindowServer::IOMFBDisplay::initialize_timings(this);
  v5 = (unsigned __int8 *)*((_QWORD *)this + 3254);
  if (v5)
  {
    v6 = atomic_load(v5);
    if ((v6 & 1) != 0)
    {
      v7 = mach_absolute_time();
      if (v7 < a2)
      {
        if (x_log_hook_p())
        {
          x_log_();
        }
        else
        {
          v42 = x_log_category_windowserver;
          if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(_QWORD *)&buf[4] = a2;
            v44 = 2048;
            v45 = v7;
            _os_log_impl(&dword_184457000, v42, OS_LOG_TYPE_ERROR, "unexpected presentation time %llu, now %llu", buf, 0x16u);
          }
        }
      }
      else if (*((_QWORD *)this + 3259))
      {
        *(_QWORD *)buf = 0;
        v8 = atomic_load((unint64_t *)(*((_QWORD *)this + 3254) + 24));
        *(_QWORD *)buf = v8;
        if (v8)
          CA::WindowServer::IOMFBDisplay::flush_timings_locked(this, v7, (unint64_t *)buf);
        v9 = *((_QWORD *)this + 3259);
        v10 = (*(double (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 760))(this);
        v11 = CAHostTimeWithTime(v10);
        v12 = v11;
        v13 = *((_QWORD *)this + 3259);
        if (v13 < a2 && (v14 = a2 - v9, (v15 = vcvtad_u64_f64((double)(a2 - v9) / (double)v11)) != 0))
        {
          v16 = v14 / v15;
          v17 = v11 - v14 / v15;
          v18 = v14 / v15 >= v11;
          v19 = v14 / v15 - v11;
          if (v19 != 0 && v18)
            v20 = v19;
          else
            v20 = v17;
          v21 = *((_QWORD *)this + 3258) + v15;
          *((_QWORD *)this + 3258) = v21;
          *((_QWORD *)this + 3259) = a2;
          v22 = *((_QWORD *)this + 3254);
          if (*(_QWORD *)buf)
          {
            v23 = atomic_load((unint64_t *)(v22 + 48));
            v24 = v21 - v23;
            v25 = atomic_load((unint64_t *)(*((_QWORD *)this + 3254) + 56));
            v26 = v24 + v25;
            v22 = *((_QWORD *)this + 3254);
            v27 = (unsigned int *)(v22 + 16);
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 + 1, v27));
            atomic_store(*((_QWORD *)this + 3258), (unint64_t *)(v22 + 48));
            atomic_store(v26, (unint64_t *)(v22 + 56));
          }
          else
          {
            v29 = (unsigned int *)(v22 + 16);
            do
              v28 = __ldaxr(v29);
            while (__stlxr(v28 + 1, v29));
            atomic_store(*((_QWORD *)this + 3258), (unint64_t *)(v22 + 48));
          }
          atomic_store(a2, (unint64_t *)(v22 + 64));
          atomic_store(v28 + 2, (unsigned int *)(v22 + 16));
          if (byte_1ECDC6AC6)
            CA::WindowServer::IOMFBDisplay::emit_server_timing_update_locked(this);
          v30 = (_DWORD *)((char *)this + 26040);
          if (v20 > v12 >> 4)
          {
            *v30 = 0;
            *((_QWORD *)this + 3256) = 0;
          }
          else
          {
            v31 = *v30;
            v32 = *((_QWORD *)this + 3256);
            if (v31 > 0xFF)
            {
              v33 = v32 - (v32 >> 8) + v16;
              v35 = v33 >> 8;
            }
            else
            {
              v33 = v32 + v16;
              v34 = v31 + 1;
              *v30 = v34;
              v35 = v33 / v34;
            }
            *((_QWORD *)this + 3256) = v33;
            atomic_store(v35, (unsigned int *)(*((_QWORD *)this + 3254) + 4));
            *((_QWORD *)this + 3257) = v16;
            v36 = *((_QWORD *)this + 3260);
            if (v36)
              *((_QWORD *)this + 3260) = v36 - 1;
            if ((*((_WORD *)this + 328) & 0x1C00) == 0)
            {
              v37 = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 768))(this);
              v38 = atomic_load((unsigned int *)(*((_QWORD *)this + 3254) + 4));
              v39 = v38 * v37;
              v40 = *((_QWORD *)this + 3258);
              if (CA::OGL::AsynchronousDispatcher::dispatcher(void)::once != -1)
                dispatch_once(&CA::OGL::AsynchronousDispatcher::dispatcher(void)::once, &__block_literal_global_1592);
              v41 = CA::OGL::AsynchronousDispatcher::dispatcher(void)::dispatcher;
              *(_QWORD *)(CA::OGL::AsynchronousDispatcher::dispatcher(void)::dispatcher + 72) = v40;
              *(_QWORD *)(v41 + 80) = a2 + (v39 >> 1);
              *(_QWORD *)(v41 + 88) = v39;
            }
            __dmb(0xBu);
          }
        }
        else if (v13 > a2 + (v11 >> 14))
        {
          *((_OWORD *)this + 1629) = 0u;
        }
      }
      else
      {
        *((_QWORD *)this + 3259) = a2;
      }
    }
  }
  os_unfair_lock_unlock(v4);
}

void CA::WindowServer::IOMFBServer::forward_frame_info_callback(CA::WindowServer::IOMFBServer *this, const __CFDictionary *a2, const __CFDictionary *a3, const CA::WindowServer::IOMFBDisplay::FrameInfo *a4)
{
  const __CFDictionary *Int64;
  const __CFDictionary *v8;
  const __CFDictionary *v9;
  const __CFDictionary *v10;
  const __CFDictionary *v11;
  const __CFDictionary *v12;
  uint64_t *v13;
  uint64_t *v14;
  __CFDictionary *Mutable;
  const CFDictionaryKeyCallBacks *v16;
  const CFDictionaryValueCallBacks *v17;
  uint64_t v18;
  os_unfair_lock_s *v19;
  uint64_t v20;
  int64_t v21;
  int64_t v22;
  double v23;
  unsigned __int8 Bool;
  unsigned __int8 v25;
  const __CFDictionary *v26;
  double v27;
  uint64_t v28;
  __int16 v29;
  unsigned int v30;
  uint64_t v31;
  void (**v32)(void *, _QWORD, uint64_t, const __CFDictionary *, const __CFDictionary *, int64_t, int64_t, uint64_t, float, float, float, int, const __CFDictionary *, unsigned int);
  float v33;
  float v34;
  float v35;
  int v36;
  int v37;
  int Int;
  int64_t v39;
  const __CFDictionary *v40;
  const __CFDictionary *v41;
  const __CFDictionary *v42;
  int64_t v43;
  const __CFDictionary *v44;
  unsigned int v45;
  CA::WindowServer::IOMFBServer *v46;

  Int64 = CA_CFDictionaryGetInt64(a2, CFSTR("Presentation_time"));
  v8 = CA_CFDictionaryGetInt64(a2, CFSTR("Requested_presentation"));
  v9 = CA_CFDictionaryGetInt64(a2, CFSTR("Min_FrameTime"));
  v10 = CA_CFDictionaryGetInt64(a2, CFSTR("Max_FrameTime"));
  v11 = CA_CFDictionaryGetInt64(a2, CFSTR("Vbl_FrameTime"));
  v46 = this;
  if (*(_BYTE *)(*((_QWORD *)this + 12) + 28106))
  {
    mach_get_times();
    v12 = v9;
    if (!v9)
      v12 = 0;
    v41 = v8;
    v42 = v12;
    if (!v10)
      v10 = 0;
  }
  else
  {
    v41 = v8;
    v42 = v9;
  }
  v40 = v11;
  v13 = (uint64_t *)*((_QWORD *)a3 + 15);
  v14 = (uint64_t *)*((_QWORD *)a3 + 16);
  v44 = a3;
  if (v13 == v14)
  {
    Mutable = 0;
  }
  else
  {
    Mutable = 0;
    v16 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
    v17 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
    do
    {
      v18 = *v13;
      if (!Mutable)
      {
        Mutable = CFDictionaryCreateMutable(0, 0, v16, v17);
        CA_CFDictionarySetLongLong(Mutable, CFSTR("brightnessTransactionPresentationTime"), (uint64_t)Int64);
      }
      (*(void (**)(uint64_t, __CFDictionary *))(v18 + 16))(v18, Mutable);
      ++v13;
    }
    while (v13 != v14);
  }
  v19 = (os_unfair_lock_s *)((char *)v46 + 320);
  os_unfair_lock_lock((os_unfair_lock_t)v46 + 80);
  v20 = *((_QWORD *)v46 + 1);
  os_unfair_lock_unlock((os_unfair_lock_t)v46 + 80);
  if (v20 || BYTE5(xmmword_1ECDC6A70))
  {
    v21 = v42 - Int64;
    if (!v42)
      v21 = 0;
    v43 = v21;
    v22 = v10 - Int64;
    if (!v10)
      v22 = 0;
    v39 = v22;
    Int = CA_CFDictionaryGetInt(a2, CFSTR("BrightOut_NoScale"));
    v37 = CA_CFDictionaryGetInt(a2, CFSTR("Bright_ScalingFactor"));
    v23 = (double)(int)CA_CFDictionaryGetInt(a2, CFSTR("Frame_APCE"));
    Bool = CA_CFDictionaryGetBool(a2, CFSTR("RTPLC_RT_Trig"));
    v25 = CA_CFDictionaryGetBool(a2, CFSTR("RTPLC_Bright_Capped"));
    if (CADeviceSupportsRTPLC::once != -1)
      dispatch_once(&CADeviceSupportsRTPLC::once, &__block_literal_global_218);
    v26 = v44;
    v27 = v23 * 0.0000152587891;
    if (CADeviceSupportsRTPLC::rtplc)
    {
      atomic_store(*(unint64_t *)&v27, (unint64_t *)(*((_QWORD *)v46 + 12) + 27728));
      atomic_store(Bool, (unsigned __int8 *)(*((_QWORD *)v46 + 12) + 27736));
      atomic_store(v25, (unsigned __int8 *)(*((_QWORD *)v46 + 12) + 27737));
    }
    v45 = *(_DWORD *)(*((_QWORD *)v46 + 12) + 24);
    v28 = *((unsigned int *)v26 + 48);
    v29 = *(_WORD *)((char *)v26 + 197);
    v31 = *(unsigned int *)v26;
    v30 = *((_DWORD *)v26 + 1);
    os_unfair_lock_lock(v19);
    v32 = (void (**)(void *, _QWORD, uint64_t, const __CFDictionary *, const __CFDictionary *, int64_t, int64_t, uint64_t, float, float, float, int, const __CFDictionary *, unsigned int))_Block_copy(*((const void **)v46 + 1));
    os_unfair_lock_unlock(v19);
    if (v32)
    {
      v33 = v27;
      v34 = (double)v37 * 0.0000152587891;
      v35 = (double)Int * 0.0000152587891;
      BYTE2(v36) = v25;
      BYTE1(v36) = Bool;
      LOBYTE(v36) = (v29 & 0x200) != 0;
      v32[2](v32, v45, v28, v41, Int64, v43, v39, v31, v35, v34, v33, v36, v40, v30);
      _Block_release(v32);
    }
  }
  if (Mutable)
    CFRelease(Mutable);
}

const __CFDictionary *CA_CFDictionaryGetInt64(const __CFDictionary *result, const void *a2)
{
  const __CFNumber *v2;
  CFTypeID v3;
  _QWORD v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, a2);
    if (result)
    {
      v2 = result;
      v3 = CFGetTypeID(result);
      if (v3 == CFBooleanGetTypeID())
      {
        return (const __CFDictionary *)(*MEMORY[0x1E0C9AE40] != (_QWORD)v2);
      }
      else if (v3 == CFNumberGetTypeID())
      {
        v4[0] = 0;
        CFNumberGetValue(v2, kCFNumberSInt64Type, v4);
        return (const __CFDictionary *)v4[0];
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

void CA::WindowServer::IOMFBDisplay::collect_frame_info(CA::WindowServer::IOMFBDisplay::FrameInfo **this, uint64_t a2, unsigned int a3)
{
  os_unfair_lock_s *v6;
  CA::WindowServer::IOMFBDisplay::FrameInfo **v7;
  _BOOL4 v8;
  unsigned int v9;
  CA::WindowServer::IOMFBDisplay::FrameInfo *v10;
  CA::WindowServer::IOMFBDisplay::FrameInfo **v11;
  CA::WindowServer::IOMFBDisplay::FrameInfo **v12;
  CA::WindowServer::IOMFBDisplay::FrameInfo **v13;
  CA::WindowServer::IOMFBDisplay::FrameInfo **v14;
  CA::WindowServer::IOMFBDisplay::FrameInfo *v15;
  os_unfair_lock_s *v16;

  *this = 0;
  v6 = (os_unfair_lock_s *)(a2 + 25908);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 25908));
  v7 = *(CA::WindowServer::IOMFBDisplay::FrameInfo ***)(a2 + 25912);
  if (v7 != *(CA::WindowServer::IOMFBDisplay::FrameInfo ***)(a2 + 25920))
  {
    do
    {
      v8 = a3 == 0;
      v9 = *(_DWORD *)*v7;
      if (v9 <= a3)
        v8 = 1;
      if (v9 == a3)
      {
        v10 = *this;
        *this = *v7;
        *v7 = v10;
      }
      if (v8)
      {
        v11 = v7 + 1;
        v12 = *(CA::WindowServer::IOMFBDisplay::FrameInfo ***)(a2 + 25920);
        if (v7 + 1 == v12)
        {
          v13 = v7;
        }
        else
        {
          do
          {
            v13 = v11;
            v14 = v11 - 1;
            v15 = *v11;
            *v11++ = 0;
            std::unique_ptr<CA::WindowServer::IOMFBDisplay::FrameInfo>::reset[abi:nn180100](v14, v15);
          }
          while (v11 != v12);
          v11 = *(CA::WindowServer::IOMFBDisplay::FrameInfo ***)(a2 + 25920);
        }
        while (v11 != v13)
          std::unique_ptr<CA::WindowServer::IOMFBDisplay::FrameInfo>::reset[abi:nn180100](--v11, 0);
        *(_QWORD *)(a2 + 25920) = v13;
      }
      else
      {
        ++v7;
        v13 = *(CA::WindowServer::IOMFBDisplay::FrameInfo ***)(a2 + 25920);
      }
    }
    while (v7 != v13);
  }
  os_unfair_lock_unlock(v6);
  if (a3 && (*(_DWORD *)(a2 + 624) & 0x40) != 0)
  {
    v16 = *(os_unfair_lock_s **)(a2 + 320);
    if (v16)
      CA::WindowServer::FlipBook::swap_completed(v16, a3);
  }
}

void CAShmemImageQueueCollectable(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BOOL4 v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t v9;

  if (a3)
    v5 = *(_DWORD *)(a1 + 44) != a3;
  else
    v5 = 1;
  v6 = *(unsigned int *)(a1 + 28);
  v7 = v5 | a4;
  if ((_DWORD)v6)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    if ((_DWORD)a2 && a3)
    {
      *(_DWORD *)(a1 + 44) = a3;
LABEL_14:
      CA::MachPortUtil::call_with_timeout<int (*)(unsigned int,unsigned int,unsigned int),unsigned int>(a2, (uint64_t)"IQCollectable", (uint64_t (*)(uint64_t, _QWORD, uint64_t))_CACImageQueueCollectable, v6);
      return;
    }
    if ((_DWORD)a2)
      goto LABEL_14;
    if (CA::MachPortUtil::reply_queue(void)::once != -1)
    {
      v9 = *(unsigned int *)(a1 + 28);
      dispatch_once(&CA::MachPortUtil::reply_queue(void)::once, &__block_literal_global_8138);
      v6 = v9;
    }
    dispatch_async_f((dispatch_queue_t)CA::MachPortUtil::reply_queue(void)::queue, (void *)v6, (dispatch_function_t)collectable_callback);
  }
}

uint64_t CA::WindowServer::IOMFBServer::refresh_timer_interval(CA::WindowServer::IOMFBServer *this)
{
  double v2;
  unint64_t v3;
  uint64_t result;
  _DWORD *v5;

  v2 = (*(double (**)(_QWORD))(**((_QWORD **)this + 12) + 760))(*((_QWORD *)this + 12));
  v3 = CAHostTimeWithTime(v2);
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 768))(*((_QWORD *)this + 12));
  v5 = (_DWORD *)*((_QWORD *)this + 12);
  if ((v5[156] & 0x100) != 0)
  {
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v5 + 136))(*((_QWORD *)this + 12));
    if (!(_DWORD)result)
      result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 784))(*((_QWORD *)this + 12));
    *((_DWORD *)this + 233) = result;
  }
  if (*((_QWORD *)this + 100))
    return CADisplayTimerSetInterval(*((_QWORD *)this + 100), v3, result);
  return result;
}

BOOL should_emit_tailspins(void)
{
  int AppBooleanValue;
  Boolean keyExistsAndHasValidFormat;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  if (dyld_shared_cache_some_image_overridden() && arc4random_uniform(0x64u) < 0x4B)
    return 0;
  keyExistsAndHasValidFormat = 0;
  AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("CATailspinEnable"), CFSTR("com.apple.coreanimation"), &keyExistsAndHasValidFormat);
  if (!keyExistsAndHasValidFormat)
  {
    AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("PDSECATailspin.CATailspinEnable"), CFSTR("com.apple.da"), &keyExistsAndHasValidFormat);
    if (!keyExistsAndHasValidFormat)
    {
      if (CADeviceHasInternalBuild::once != -1)
        dispatch_once(&CADeviceHasInternalBuild::once, &__block_literal_global_107);
      AppBooleanValue = CADeviceHasInternalBuild::internal;
    }
  }
  return AppBooleanValue != 0;
}

CA::Render::Layer *CA::Render::Layer::set_contents_multiply_color(CA::Render::Layer *result, float a2, float a3, float a4, float a5)
{
  BOOL v6;

  if (*((_QWORD *)result + 16))
    v6 = 0;
  else
    v6 = a2 == 1.0;
  if (!v6 || a3 != 1.0 || a4 != 1.0 || a5 != 1.0)
  {
    result = (CA::Render::Layer *)CA::Render::Layer::ensure_ext(result);
    *((float *)result + 66) = a2;
    *((float *)result + 67) = a3;
    *((float *)result + 68) = a4;
    *((float *)result + 69) = a5;
  }
  return result;
}

void init_debug(void *a1)
{
  const __CFDictionary *v1;
  uint64_t i;
  float v3;
  uint64_t v4;
  float v5;
  float v6;
  uint64_t v7;

  if (CADeviceHasInternalBuild::once != -1)
    dispatch_once(&CADeviceHasInternalBuild::once, &__block_literal_global_107);
  if (CADeviceHasInternalBuild::internal)
    v1 = CFPreferencesCopyMultiple(0, CFSTR("com.apple.coreanimation"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
  else
    v1 = 0;
  for (i = 0; i != 196; ++i)
    *((_BYTE *)&ca_debug_options + i) = CADefaultsGetFloat(v1, 0.0, debug_option_env_vars[i]) != 0.0;
  if (CADeviceHasInternalBuild::once != -1)
    dispatch_once(&CADeviceHasInternalBuild::once, &__block_literal_global_107);
  v3 = 0.0;
  if (CADeviceHasInternalBuild::internal)
    v3 = 1.0;
  v4 = 0;
  BYTE9(xmmword_1ECDC6A90) = CADefaultsGetFloat(v1, v3, "CA_EMIT_DEBUG_SIGNPOSTS") != 0.0;
  BYTE11(xmmword_1ECDC6A90) = 0;
  do
  {
    *(float *)&debug_values[v4] = CADefaultsGetFloat(v1, 0.0, debug_value_env_vars[v4]);
    ++v4;
  }
  while (v4 != 65);
  MGGetFloat32Answer();
  if (v5)
  {
    MGGetFloat32Answer();
    dword_1ECDC6980 = truncf(CADefaultsGetFloat(v1, (float)((48 * v6) | (v6 << 21)), "CA_PERF_HUD_ORIGIN"));
  }
  dword_1ECDC6988 = 1133903872;
  dword_1ECDC69A8 = truncf(CADefaultsGetFloat(v1, 2.0, "CA_DISPLAY_HYSTERESIS_NITS"));
  xmmword_1ECDC69B8 = xmmword_18474E670;
  if (*(float *)&dword_1ECDC69CC != 0.0)
    byte_1ECDC6AA8 = 1;
  v7 = 0;
  dword_1ECDC69D0 = 0;
  options_are_visual = 0;
  while (!*((_BYTE *)&ca_debug_options + dword_18475EC84[v7]))
  {
    if (++v7 == 39)
      goto LABEL_23;
  }
  options_are_visual = 1;
LABEL_23:
  if (CADeviceSupportsHDRExternalDisplayBrightnessControl::once[0] != -1)
    dispatch_once(CADeviceSupportsHDRExternalDisplayBrightnessControl::once, &__block_literal_global_284);
  byte_1ECDC6B0A |= CADeviceSupportsHDRExternalDisplayBrightnessControl::enabled;
  if (v1)
    CFRelease(v1);
}

float CADefaultsGetFloat(const __CFDictionary *a1, float a2, const char *a3)
{
  char *v6;
  CFStringRef v7;
  CFTypeID v8;
  float valuePtr;
  void *value[2];

  value[1] = *(void **)MEMORY[0x1E0C80C00];
  v6 = getenv(a3);
  if (v6)
    return atof(v6);
  value[0] = 0;
  v7 = CFStringCreateWithCStringNoCopy(0, a3, 0x8000100u, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  if (a1
    && CFDictionaryGetValueIfPresent(a1, v7, (const void **)value)
    && (v8 = CFGetTypeID(value[0]), v8 == CFNumberGetTypeID()))
  {
    valuePtr = a2;
    CFNumberGetValue((CFNumberRef)value[0], kCFNumberFloatType, &valuePtr);
    CFRelease(v7);
    return valuePtr;
  }
  else
  {
    CFRelease(v7);
  }
  return a2;
}

uint64_t CARenderServerGetDirtyFrameCount(mach_port_name_t a1)
{
  return CARenderServerGetDirtyFrameCountByIndex(a1, 0);
}

_DWORD *_XCreateFencePort(_DWORD *result, uint64_t a2, unint64_t *a3)
{
  int v4;

  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    v4 = -304;
    goto LABEL_7;
  }
  if (result[6] || result[7] <= 0x1Fu)
  {
    v4 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v4;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    return result;
  }
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a2 + 32) = 0x11000000000000;
  *(_QWORD *)(a2 + 48) = 0;
  result = (_DWORD *)CA::Render::Fence::create_fence_port((CA::Render::Fence *)(a2 + 28), (unsigned int *)(a2 + 48), a3);
  if ((result & 1) == 0)
  {
    v4 = 5;
    goto LABEL_7;
  }
  *(_QWORD *)(a2 + 40) = *MEMORY[0x1E0C804E8];
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

BOOL CA::Render::Fence::create_fence_port(CA::Render::Fence *this, unsigned int *a2, unint64_t *a3)
{
  _BOOL8 v6;
  CA::Render::Fence *v7;
  _QWORD *fence;

  if (this)
    *(_DWORD *)this = 0;
  if (a2)
    *(_QWORD *)a2 = 0;
  if (!this)
    return 0;
  if (!CA::Render::Server::_thread || BYTE7(xmmword_1ECDC6AF0) != 0)
    return 0;
  if (CA::Render::Fence::fence_info_once[0] != -1)
    dispatch_once_f(CA::Render::Fence::fence_info_once, 0, (dispatch_function_t)CA::Render::Fence::fence_info_init);
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Fence::_lock);
  fence = CA::Render::Fence::_create_fence(v7);
  v6 = fence != 0;
  if (fence)
  {
    *(_DWORD *)this = *((_DWORD *)fence + 4);
    if (a2)
      *(_QWORD *)a2 = *fence;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Fence::_lock);
  return v6;
}

_QWORD *CA::Render::Fence::_create_fence(CA::Render::Fence *this)
{
  unsigned int v1;
  mach_port_context_t v2;
  ipc_space_t *v3;
  _QWORD *v4;
  uint64_t v5;
  double v6;
  malloc_zone_t *malloc_zone;
  _QWORD *prime;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  size_t v26;
  uint8x8_t v27;
  uint8x8_t v28;
  uint64_t v29;
  _QWORD *v30;
  size_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint8x8_t v37;
  mach_port_context_t v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  float v42;
  float v43;
  _BOOL8 v44;
  unint64_t v45;
  unint64_t v46;
  size_t v47;
  void *v48;
  uint64_t v49;
  _QWORD *v50;
  size_t v51;
  uint8x8_t v52;
  uint8x8_t v53;
  uint64_t v54;
  _QWORD *v55;
  size_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  ipc_space_t v61;
  mach_port_name_t v62;
  mach_port_t v63;
  mach_port_t previous;
  mach_port_name_t name;
  mach_port_options_t options;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  if (CA::Render::Fence::fence_info_once[0] != -1)
    dispatch_once_f(CA::Render::Fence::fence_info_once, 0, (dispatch_function_t)CA::Render::Fence::fence_info_init);
  if ((CA::Render::Fence::_name_counter + 1) > 1)
    v1 = CA::Render::Fence::_name_counter + 1;
  else
    v1 = 1;
  CA::Render::Fence::_name_counter = v1;
  v2 = v1 | (unint64_t)((uint64_t)getpid() << 32);
  name = 0;
  *(_OWORD *)&options.flags = xmmword_18475F108;
  options.reserved[1] = 0;
  v3 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
  v4 = 0;
  if (mach_port_construct(*MEMORY[0x1E0C83DA0], &options, v2, &name))
    return v4;
  v5 = mach_absolute_time();
  v6 = CATimeWithHostTime(v5) + 10.0;
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  prime = malloc_type_zone_malloc(malloc_zone, 0x18uLL, 0x8BB15036uLL);
  v4 = prime;
  v9 = name;
  *((_DWORD *)prime + 4) = name;
  *prime = v2;
  *((double *)prime + 1) = v6;
  *((_BYTE *)prime + 20) = 0;
  v10 = CA::Render::Fence::fences_by_port;
  v11 = *(_QWORD *)(CA::Render::Fence::fences_by_port + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v13 = v9;
      if (v11 <= v9)
        v13 = v9 % v11;
    }
    else
    {
      v13 = ((_DWORD)v11 - 1) & v9;
    }
    v14 = *(_QWORD **)(*(_QWORD *)CA::Render::Fence::fences_by_port + 8 * v13);
    if (v14)
    {
      v15 = (_QWORD *)*v14;
      if (*v14)
      {
        do
        {
          v16 = v15[1];
          if (v16 == v9)
          {
            if (*((_DWORD *)v15 + 4) == (_DWORD)v9)
              goto LABEL_80;
          }
          else
          {
            if (v12.u32[0] > 1uLL)
            {
              if (v16 >= v11)
                v16 %= v11;
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v13)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
  else
  {
    v13 = 0;
  }
  prime = operator new(0x20uLL);
  v15 = prime;
  *prime = 0;
  prime[1] = v9;
  *((_DWORD *)prime + 4) = v9;
  prime[3] = 0;
  v17 = (float)(unint64_t)(*(_QWORD *)(v10 + 24) + 1);
  v18 = *(float *)(v10 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    if (v22 == 1)
    {
      v22 = 2;
    }
    else if ((v22 & (v22 - 1)) != 0)
    {
      prime = (_QWORD *)std::__next_prime(v22);
      v22 = (size_t)prime;
    }
    v11 = *(_QWORD *)(v10 + 8);
    if (v22 > v11)
      goto LABEL_36;
    if (v22 < v11)
    {
      prime = (_QWORD *)vcvtps_u32_f32((float)*(unint64_t *)(v10 + 24) / *(float *)(v10 + 32));
      if (v11 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        prime = (_QWORD *)std::__next_prime((size_t)prime);
      }
      else
      {
        v29 = 1 << -(char)__clz((unint64_t)prime - 1);
        if ((unint64_t)prime >= 2)
          prime = (_QWORD *)v29;
      }
      if (v22 <= (unint64_t)prime)
        v22 = (size_t)prime;
      if (v22 >= v11)
      {
        v11 = *(_QWORD *)(v10 + 8);
      }
      else
      {
        if (v22)
        {
LABEL_36:
          if (v22 >> 61)
            goto LABEL_173;
          v23 = operator new(8 * v22);
          prime = *(_QWORD **)v10;
          *(_QWORD *)v10 = v23;
          if (prime)
            operator delete(prime);
          v24 = 0;
          *(_QWORD *)(v10 + 8) = v22;
          do
            *(_QWORD *)(*(_QWORD *)v10 + 8 * v24++) = 0;
          while (v22 != v24);
          v25 = *(_QWORD **)(v10 + 16);
          if (v25)
          {
            v26 = v25[1];
            v27 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= v22)
                v26 %= v22;
            }
            else
            {
              v26 &= v22 - 1;
            }
            *(_QWORD *)(*(_QWORD *)v10 + 8 * v26) = v10 + 16;
            v30 = (_QWORD *)*v25;
            if (*v25)
            {
              do
              {
                v31 = v30[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v31 >= v22)
                    v31 %= v22;
                }
                else
                {
                  v31 &= v22 - 1;
                }
                if (v31 != v26)
                {
                  if (!*(_QWORD *)(*(_QWORD *)v10 + 8 * v31))
                  {
                    *(_QWORD *)(*(_QWORD *)v10 + 8 * v31) = v25;
                    goto LABEL_61;
                  }
                  *v25 = *v30;
                  *v30 = **(_QWORD **)(*(_QWORD *)v10 + 8 * v31);
                  **(_QWORD **)(*(_QWORD *)v10 + 8 * v31) = v30;
                  v30 = v25;
                }
                v31 = v26;
LABEL_61:
                v25 = v30;
                v30 = (_QWORD *)*v30;
                v26 = v31;
              }
              while (v30);
            }
          }
          v11 = v22;
          goto LABEL_65;
        }
        prime = *(_QWORD **)v10;
        *(_QWORD *)v10 = 0;
        if (prime)
          operator delete(prime);
        v11 = 0;
        *(_QWORD *)(v10 + 8) = 0;
      }
    }
LABEL_65:
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v11 <= v9)
        v13 = v9 % v11;
      else
        v13 = v9;
    }
    else
    {
      v13 = ((_DWORD)v11 - 1) & v9;
    }
  }
  v32 = *(_QWORD **)v10;
  v33 = *(_QWORD **)(*(_QWORD *)v10 + 8 * v13);
  if (v33)
  {
    *v15 = *v33;
LABEL_78:
    *v33 = v15;
    goto LABEL_79;
  }
  *v15 = *(_QWORD *)(v10 + 16);
  *(_QWORD *)(v10 + 16) = v15;
  v32[v13] = v10 + 16;
  if (*v15)
  {
    v34 = *(_QWORD *)(*v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v34 >= v11)
        v34 %= v11;
    }
    else
    {
      v34 &= v11 - 1;
    }
    v33 = (_QWORD *)(*(_QWORD *)v10 + 8 * v34);
    goto LABEL_78;
  }
LABEL_79:
  ++*(_QWORD *)(v10 + 24);
LABEL_80:
  v15[3] = v4;
  v35 = CA::Render::Fence::fences_by_name;
  v36 = *(_QWORD *)(CA::Render::Fence::fences_by_name + 8);
  if (v36)
  {
    v37 = (uint8x8_t)vcnt_s8((int8x8_t)v36);
    v37.i16[0] = vaddlv_u8(v37);
    if (v37.u32[0] > 1uLL)
    {
      v38 = v2;
      if (v2 >= v36)
        v38 = v2 % v36;
    }
    else
    {
      v38 = (v36 - 1) & v2;
    }
    v39 = *(_QWORD **)(*(_QWORD *)CA::Render::Fence::fences_by_name + 8 * v38);
    if (v39)
    {
      v40 = (_QWORD *)*v39;
      if (*v39)
      {
        do
        {
          v41 = v40[1];
          if (v41 == v2)
          {
            if (v40[2] == v2)
              goto LABEL_153;
          }
          else
          {
            if (v37.u32[0] > 1uLL)
            {
              if (v41 >= v36)
                v41 %= v36;
            }
            else
            {
              v41 &= v36 - 1;
            }
            if (v41 != v38)
              break;
          }
          v40 = (_QWORD *)*v40;
        }
        while (v40);
      }
    }
  }
  else
  {
    v38 = 0;
  }
  prime = operator new(0x20uLL);
  v40 = prime;
  *prime = 0;
  prime[1] = v2;
  prime[2] = v2;
  prime[3] = 0;
  v42 = (float)(unint64_t)(*(_QWORD *)(v35 + 24) + 1);
  v43 = *(float *)(v35 + 32);
  if (!v36 || (float)(v43 * (float)v36) < v42)
  {
    v44 = 1;
    if (v36 >= 3)
      v44 = (v36 & (v36 - 1)) != 0;
    v45 = v44 | (2 * v36);
    v46 = vcvtps_u32_f32(v42 / v43);
    if (v45 <= v46)
      v47 = v46;
    else
      v47 = v45;
    if (v47 == 1)
    {
      v47 = 2;
    }
    else if ((v47 & (v47 - 1)) != 0)
    {
      prime = (_QWORD *)std::__next_prime(v47);
      v47 = (size_t)prime;
      v36 = *(_QWORD *)(v35 + 8);
    }
    if (v47 > v36)
    {
LABEL_109:
      if (!(v47 >> 61))
      {
        v48 = operator new(8 * v47);
        prime = *(_QWORD **)v35;
        *(_QWORD *)v35 = v48;
        if (prime)
          operator delete(prime);
        v49 = 0;
        *(_QWORD *)(v35 + 8) = v47;
        do
          *(_QWORD *)(*(_QWORD *)v35 + 8 * v49++) = 0;
        while (v47 != v49);
        v50 = *(_QWORD **)(v35 + 16);
        if (v50)
        {
          v51 = v50[1];
          v52 = (uint8x8_t)vcnt_s8((int8x8_t)v47);
          v52.i16[0] = vaddlv_u8(v52);
          if (v52.u32[0] > 1uLL)
          {
            if (v51 >= v47)
              v51 %= v47;
          }
          else
          {
            v51 &= v47 - 1;
          }
          *(_QWORD *)(*(_QWORD *)v35 + 8 * v51) = v35 + 16;
          v55 = (_QWORD *)*v50;
          if (*v50)
          {
            do
            {
              v56 = v55[1];
              if (v52.u32[0] > 1uLL)
              {
                if (v56 >= v47)
                  v56 %= v47;
              }
              else
              {
                v56 &= v47 - 1;
              }
              if (v56 != v51)
              {
                if (!*(_QWORD *)(*(_QWORD *)v35 + 8 * v56))
                {
                  *(_QWORD *)(*(_QWORD *)v35 + 8 * v56) = v50;
                  goto LABEL_134;
                }
                *v50 = *v55;
                *v55 = **(_QWORD **)(*(_QWORD *)v35 + 8 * v56);
                **(_QWORD **)(*(_QWORD *)v35 + 8 * v56) = v55;
                v55 = v50;
              }
              v56 = v51;
LABEL_134:
              v50 = v55;
              v55 = (_QWORD *)*v55;
              v51 = v56;
            }
            while (v55);
          }
        }
        v36 = v47;
        goto LABEL_138;
      }
LABEL_173:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    if (v47 < v36)
    {
      prime = (_QWORD *)vcvtps_u32_f32((float)*(unint64_t *)(v35 + 24) / *(float *)(v35 + 32));
      if (v36 < 3 || (v53 = (uint8x8_t)vcnt_s8((int8x8_t)v36), v53.i16[0] = vaddlv_u8(v53), v53.u32[0] > 1uLL))
      {
        prime = (_QWORD *)std::__next_prime((size_t)prime);
      }
      else
      {
        v54 = 1 << -(char)__clz((unint64_t)prime - 1);
        if ((unint64_t)prime >= 2)
          prime = (_QWORD *)v54;
      }
      if (v47 <= (unint64_t)prime)
        v47 = (size_t)prime;
      if (v47 >= v36)
      {
        v36 = *(_QWORD *)(v35 + 8);
      }
      else
      {
        if (v47)
          goto LABEL_109;
        prime = *(_QWORD **)v35;
        *(_QWORD *)v35 = 0;
        if (prime)
          operator delete(prime);
        v36 = 0;
        *(_QWORD *)(v35 + 8) = 0;
      }
    }
LABEL_138:
    if ((v36 & (v36 - 1)) != 0)
    {
      if (v2 >= v36)
        v38 = v2 % v36;
      else
        v38 = v2;
    }
    else
    {
      v38 = (v36 - 1) & v2;
    }
  }
  v57 = *(_QWORD **)v35;
  v58 = *(_QWORD **)(*(_QWORD *)v35 + 8 * v38);
  if (v58)
  {
    *v40 = *v58;
  }
  else
  {
    v59 = *(_QWORD *)(v35 + 16);
    *v40 = v59;
    *(_QWORD *)(v35 + 16) = v40;
    v57[v38] = v35 + 16;
    if (!v59)
      goto LABEL_152;
    v60 = *(_QWORD *)(v59 + 8);
    if ((v36 & (v36 - 1)) != 0)
    {
      if (v60 >= v36)
        v60 %= v36;
    }
    else
    {
      v60 &= v36 - 1;
    }
    v58 = (_QWORD *)(*(_QWORD *)v35 + 8 * v60);
  }
  *v58 = v40;
LABEL_152:
  ++*(_QWORD *)(v35 + 24);
LABEL_153:
  v40[3] = v4;
  previous = 0;
  v61 = *v3;
  v62 = name;
  v63 = CA::Render::Server::notify_port((CA::Render::Server *)prime);
  mach_port_request_notification(v61, v62, 70, 0, v63, 0x15u, &previous);
  kdebug_trace();
  ht_fence_start();
  CA::Render::Server::add_callback(3, (uint64_t)CA::Render::Fence::ftimeout_callback, 0, v6);
  return v4;
}

double *CA::Render::Fence::create_batch(CA::Render::Fence *this)
{
  int v1;
  unsigned int v2;
  mach_port_context_t v3;
  ipc_space_t *v4;
  double *v5;
  uint64_t v6;
  double v7;
  malloc_zone_t *malloc_zone;
  uint64_t v9;
  _OWORD *prime;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  _QWORD *v16;
  _OWORD *v17;
  unint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  size_t v28;
  uint8x8_t v29;
  uint8x8_t v30;
  uint64_t v31;
  _QWORD *v32;
  size_t v33;
  _OWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  ipc_space_t v38;
  mach_port_t v39;
  mach_port_t previous;
  mach_port_name_t name;
  mach_port_options_t options;
  uint64_t v44;

  v1 = (int)this;
  v44 = *MEMORY[0x1E0C80C00];
  if (CA::Render::Fence::fence_info_once[0] != -1)
    dispatch_once_f(CA::Render::Fence::fence_info_once, 0, (dispatch_function_t)CA::Render::Fence::fence_info_init);
  if ((CA::Render::Fence::_batch_counter + 1) > 1)
    v2 = CA::Render::Fence::_batch_counter + 1;
  else
    v2 = 1;
  CA::Render::Fence::_batch_counter = v2;
  v3 = v2 | (unint64_t)((uint64_t)getpid() << 32);
  name = 0;
  *(_OWORD *)&options.flags = xmmword_18475F108;
  options.reserved[1] = 0;
  v4 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
  v5 = 0;
  if (mach_port_construct(*MEMORY[0x1E0C83DA0], &options, v3, &name))
    return v5;
  v6 = mach_absolute_time();
  v7 = CATimeWithHostTime(v6) + 0.5;
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v5 = (double *)malloc_type_zone_malloc(malloc_zone, 0x30uLL, 0x8BB15036uLL);
  *(_QWORD *)v5 = v3;
  *((_DWORD *)v5 + 10) = name;
  v5[1] = v7;
  v5[2] = 0.0;
  v9 = operator new();
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_DWORD *)(v9 + 32) = 1065353216;
  *((_QWORD *)v5 + 3) = v9;
  prime = (_OWORD *)operator new();
  *prime = 0u;
  prime[1] = 0u;
  *((_DWORD *)prime + 8) = 1065353216;
  *((_QWORD *)v5 + 4) = prime;
  *((_BYTE *)v5 + 44) = v1;
  v11 = CA::Render::Fence::batches_by_port;
  v12 = name;
  v13 = *(_QWORD *)(CA::Render::Fence::batches_by_port + 8);
  if (v13)
  {
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      v15 = name;
      if (v13 <= name)
        v15 = name % v13;
    }
    else
    {
      v15 = ((_DWORD)v13 - 1) & name;
    }
    v16 = *(_QWORD **)(*(_QWORD *)CA::Render::Fence::batches_by_port + 8 * v15);
    if (v16)
    {
      v17 = (_OWORD *)*v16;
      if (*v16)
      {
        do
        {
          v18 = *((_QWORD *)v17 + 1);
          if (v18 == name)
          {
            if (*((_DWORD *)v17 + 4) == name)
              goto LABEL_80;
          }
          else
          {
            if (v14.u32[0] > 1uLL)
            {
              if (v18 >= v13)
                v18 %= v13;
            }
            else
            {
              v18 &= v13 - 1;
            }
            if (v18 != v15)
              break;
          }
          v17 = *(_OWORD **)v17;
        }
        while (v17);
      }
    }
  }
  else
  {
    v15 = 0;
  }
  prime = operator new(0x20uLL);
  v17 = prime;
  *(_QWORD *)prime = 0;
  *((_QWORD *)prime + 1) = v12;
  *((_DWORD *)prime + 4) = v12;
  *((_QWORD *)prime + 3) = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(v11 + 24) + 1);
  v20 = *(float *)(v11 + 32);
  if (!v13 || (float)(v20 * (float)v13) < v19)
  {
    v21 = 1;
    if (v13 >= 3)
      v21 = (v13 & (v13 - 1)) != 0;
    v22 = v21 | (2 * v13);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    if (v24 == 1)
    {
      v24 = 2;
    }
    else if ((v24 & (v24 - 1)) != 0)
    {
      prime = (_OWORD *)std::__next_prime(v24);
      v24 = (size_t)prime;
      v13 = *(_QWORD *)(v11 + 8);
    }
    if (v24 > v13)
      goto LABEL_36;
    if (v24 < v13)
    {
      prime = (_OWORD *)vcvtps_u32_f32((float)*(unint64_t *)(v11 + 24) / *(float *)(v11 + 32));
      if (v13 < 3 || (v30 = (uint8x8_t)vcnt_s8((int8x8_t)v13), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        prime = (_OWORD *)std::__next_prime((size_t)prime);
      }
      else
      {
        v31 = 1 << -(char)__clz((unint64_t)prime - 1);
        if ((unint64_t)prime >= 2)
          prime = (_OWORD *)v31;
      }
      if (v24 <= (unint64_t)prime)
        v24 = (size_t)prime;
      if (v24 >= v13)
      {
        v13 = *(_QWORD *)(v11 + 8);
      }
      else
      {
        if (v24)
        {
LABEL_36:
          if (v24 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v25 = operator new(8 * v24);
          prime = *(_OWORD **)v11;
          *(_QWORD *)v11 = v25;
          if (prime)
            operator delete(prime);
          v26 = 0;
          *(_QWORD *)(v11 + 8) = v24;
          do
            *(_QWORD *)(*(_QWORD *)v11 + 8 * v26++) = 0;
          while (v24 != v26);
          v27 = *(_QWORD **)(v11 + 16);
          if (v27)
          {
            v28 = v27[1];
            v29 = (uint8x8_t)vcnt_s8((int8x8_t)v24);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              if (v28 >= v24)
                v28 %= v24;
            }
            else
            {
              v28 &= v24 - 1;
            }
            *(_QWORD *)(*(_QWORD *)v11 + 8 * v28) = v11 + 16;
            v32 = (_QWORD *)*v27;
            if (*v27)
            {
              do
              {
                v33 = v32[1];
                if (v29.u32[0] > 1uLL)
                {
                  if (v33 >= v24)
                    v33 %= v24;
                }
                else
                {
                  v33 &= v24 - 1;
                }
                if (v33 != v28)
                {
                  if (!*(_QWORD *)(*(_QWORD *)v11 + 8 * v33))
                  {
                    *(_QWORD *)(*(_QWORD *)v11 + 8 * v33) = v27;
                    goto LABEL_61;
                  }
                  *v27 = *v32;
                  *v32 = **(_QWORD **)(*(_QWORD *)v11 + 8 * v33);
                  **(_QWORD **)(*(_QWORD *)v11 + 8 * v33) = v32;
                  v32 = v27;
                }
                v33 = v28;
LABEL_61:
                v27 = v32;
                v32 = (_QWORD *)*v32;
                v28 = v33;
              }
              while (v32);
            }
          }
          v13 = v24;
          goto LABEL_65;
        }
        prime = *(_OWORD **)v11;
        *(_QWORD *)v11 = 0;
        if (prime)
          operator delete(prime);
        v13 = 0;
        *(_QWORD *)(v11 + 8) = 0;
      }
    }
LABEL_65:
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v13 <= v12)
        v15 = v12 % v13;
      else
        v15 = v12;
    }
    else
    {
      v15 = ((_DWORD)v13 - 1) & v12;
    }
  }
  v34 = *(_OWORD **)v11;
  v35 = *(_QWORD **)(*(_QWORD *)v11 + 8 * v15);
  if (v35)
  {
    *(_QWORD *)v17 = *v35;
  }
  else
  {
    v36 = *(_QWORD *)(v11 + 16);
    *(_QWORD *)v17 = v36;
    *(_QWORD *)(v11 + 16) = v17;
    *((_QWORD *)v34 + v15) = v11 + 16;
    if (!v36)
      goto LABEL_79;
    v37 = *(_QWORD *)(v36 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v37 >= v13)
        v37 %= v13;
    }
    else
    {
      v37 &= v13 - 1;
    }
    v35 = (_QWORD *)(*(_QWORD *)v11 + 8 * v37);
  }
  *v35 = v17;
LABEL_79:
  ++*(_QWORD *)(v11 + 24);
  LODWORD(v12) = name;
LABEL_80:
  *((_QWORD *)v17 + 3) = v5;
  previous = 0;
  v38 = *v4;
  v39 = CA::Render::Server::notify_port((CA::Render::Server *)prime);
  mach_port_request_notification(v38, v12, 70, 0, v39, 0x15u, &previous);
  if (v1)
    kdebug_trace();
  CA::Render::Server::add_callback(3, (uint64_t)CA::Render::Fence::btimeout_callback, 0, v7);
  return v5;
}

uint64_t CASSynchronize(CA::Render::Context *a1, mach_port_name_t a2, int a3, int a4, unsigned int a5, int a6, int a7)
{
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  if (a2 - 1 > 0xFFFFFFFD)
  {
    if (!a2)
      return 0;
LABEL_15:
    mach_port_deallocate(*MEMORY[0x1E0C83DA0], a2);
    return 0;
  }
  v13 = CA::Render::Context::context_by_server_port(a1);
  if (!v13)
    goto LABEL_15;
  v14 = (unsigned int *)v13;
  if (CADeviceSupportsAndromeda::once != -1)
    dispatch_once(&CADeviceSupportsAndromeda::once, &__block_literal_global_61_9817);
  if (CADeviceSupportsAndromeda::supports_andromeda)
  {
    if (a7)
    {
      v15 = v14[153];
      if (v15)
      {
        v20[0] = v15;
        CA::Render::post_notification(0x3Eu, 0, (uint64_t)v20, 0);
        if (BYTE4(v20[0]))
          a3 = 0;
      }
    }
  }
  CA::Render::Context::request_synchronize((CA::Render::Context *)v14, a2, a3, a4, a5, a6);
  v16 = v14 + 2;
  do
  {
    v17 = __ldaxr(v16);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, v16));
  if (!v18)
    (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
  return 0;
}

void CA::Render::Context::request_synchronize(CA::Render::Context *this, mach_port_name_t name, int a3, int a4, unsigned int a5, int a6)
{
  unsigned int v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  int v17;
  int64_t v18;
  double v19;
  unsigned int *v20;
  unsigned int v21;
  CA::Render::Context *v22;
  NSObject *global_queue;
  dispatch_time_t v24;
  malloc_zone_t *malloc_zone;
  double *v26;
  unsigned int v27;
  _QWORD block[7];

  block[6] = *MEMORY[0x1E0C80C00];
  if (name + 1 <= 1)
    __assert_rtn("request_synchronize", "render-context.cpp", 1634, "MACH_PORT_VALID (port)");
  if ((*((_BYTE *)this + 13) & 4) != 0)
  {
    mach_port_deallocate(*MEMORY[0x1E0C83DA0], name);
    return;
  }
  os_unfair_lock_lock((os_unfair_lock_t)this + 13);
  v12 = *((_DWORD *)this + 16);
  if (a3)
  {
    if (v12 >= a5 && a6)
    {
      if (*((_DWORD *)this + 17) < a5 && *((_DWORD *)this + 88))
        goto LABEL_8;
    }
    else if (v12 < a5)
    {
LABEL_8:
      if (CA::Render::sync_hang_report_level(void)::onceToken[0] != -1)
        dispatch_once(CA::Render::sync_hang_report_level(void)::onceToken, &__block_literal_global_3588);
      if (a3 > 0 || (_DWORD)CA::Render::sync_hang_report_level(void)::level)
      {
        v15 = mach_absolute_time();
        v16 = CATimeWithHostTime(v15);
        if (a3 < 1)
        {
          v19 = v16 + 5.0;
          v18 = 5000000000;
          v13 = INFINITY;
          v14 = v16 + 5.0;
        }
        else
        {
          if (a3 >= 5000)
            v17 = 5000;
          else
            v17 = a3;
          v13 = v16 + (double)v17 * 0.001;
          v18 = 1000000 * v17;
          v14 = INFINITY;
          v19 = v13;
        }
        v20 = (unsigned int *)((char *)this + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 + 1, v20));
        v22 = this;
        if (!v21)
        {
          v22 = 0;
          do
            v27 = __ldaxr(v20);
          while (__stlxr(v27 - 1, v20));
        }
        if (!CA::Render::Server::_thread
          || (CA::Render::Server::add_callback(0, (uint64_t)CA::Render::sync_req_timeout, (uint64_t)v22, v19) & 1) == 0)
        {
          global_queue = dispatch_get_global_queue(33, 0);
          v24 = dispatch_time(0, v18);
          block[0] = MEMORY[0x1E0C809B0];
          block[1] = 0x40000000;
          block[2] = ___ZN2CA6Render7Context19request_synchronizeEjijjb_block_invoke;
          block[3] = &__block_descriptor_tmp_3602;
          *(double *)&block[4] = v19;
          block[5] = v22;
          dispatch_after(v24, global_queue, block);
        }
      }
      else
      {
        v13 = INFINITY;
        v14 = INFINITY;
      }
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      v26 = (double *)malloc_type_zone_malloc(malloc_zone, 0x30uLL, 0x8BB15036uLL);
      *v26 = *((double *)this + 7);
      *((_DWORD *)v26 + 2) = name;
      v26[2] = v14;
      v26[3] = v13;
      *((_DWORD *)v26 + 8) = a4;
      *((_DWORD *)v26 + 9) = a5;
      *((_BYTE *)v26 + 40) = a6;
      *((_QWORD *)this + 7) = v26;
      goto LABEL_29;
    }
  }
  CA::Render::send_synchronize_reply((CA::Render *)*((unsigned int *)this + 4), name, a4, v12, *((_DWORD *)this + 17));
LABEL_29:
  os_unfair_lock_unlock((os_unfair_lock_t)this + 13);
}

uint64_t CA::Render::Server::add_callback(int a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v8;
  uint64_t *v9;
  double *v10;
  malloc_zone_t *malloc_zone;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  malloc_zone_t *v15;
  CA::Render::Server *v16;

  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Server::_callback_lock);
  if (!a1)
  {
    if ((*(_QWORD *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
LABEL_19:
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Server::_callback_lock);
      CA::Render::Server::kick_server(v16);
      return 1;
    }
LABEL_12:
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    v10 = (double *)malloc_type_zone_malloc(malloc_zone, 0x28uLL, 0x8BB15036uLL);
    *((_QWORD *)v10 + 3) = a2;
    *((_QWORD *)v10 + 4) = a3;
LABEL_13:
    v10[1] = a4;
    v12 = mach_absolute_time();
    v10[2] = CATimeWithHostTime(v12);
    v13 = &CA::Render::Server::_callback_list;
    do
    {
      v14 = v13;
      v13 = (uint64_t *)*v13;
    }
    while (v13 && *((double *)v13 + 1) <= v10[1]);
    *(_QWORD *)v10 = v13;
    *v14 = (uint64_t)v10;
    goto LABEL_19;
  }
  v8 = CA::Render::Server::_callback_list;
  if (!CA::Render::Server::_callback_list)
  {
LABEL_7:
    v10 = 0;
    goto LABEL_8;
  }
  v9 = &CA::Render::Server::_callback_list;
  while (1)
  {
    v10 = (double *)v8;
    if (*(_QWORD *)(v8 + 24) == a2 && *(_QWORD *)(v8 + 32) == a3)
      break;
    v8 = *(_QWORD *)v8;
    v9 = (uint64_t *)v10;
    if (!*(_QWORD *)v10)
      goto LABEL_7;
  }
  if (a1 != 1 && (a1 != 3 || *(double *)(v8 + 8) >= a4))
  {
    *v9 = *(_QWORD *)v8;
LABEL_8:
    if ((*(_QWORD *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v10)
      {
        v15 = (malloc_zone_t *)get_malloc_zone();
        malloc_zone_free(v15, v10);
      }
      goto LABEL_19;
    }
    if (v10)
      goto LABEL_13;
    goto LABEL_12;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Server::_callback_lock);
  return 0;
}

void CA::Render::Server::kick_server(CA::Render::Server *this)
{
  CA::Render::Server *v1;
  int v2;
  mach_msg_return_t v3;
  mach_msg_return_t v4;
  NSObject *v5;
  _BYTE msg[28];
  uint8_t buf[4];
  mach_msg_return_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (!CA::Render::Server::_kicked)
  {
    v1 = (CA::Render::Server *)pthread_self();
    if (v1 != (CA::Render::Server *)CA::Render::Server::_thread)
    {
      v2 = CA::Render::Server::server_port(v1);
      if (v2)
      {
        CA::Render::Server::_kicked = 1;
        *(_QWORD *)msg = 0x1C00000013;
        *(_DWORD *)&msg[8] = v2;
        *(_OWORD *)&msg[12] = xmmword_18474E4A0;
        v3 = mach_msg((mach_msg_header_t *)msg, 17, 0x1Cu, 0, 0, 0, 0);
        if (v3)
        {
          v4 = v3;
          CA::Render::Server::_kicked = 0;
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v5 = x_log_category_render;
            if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 67109120;
              v8 = v4;
              _os_log_impl(&dword_184457000, v5, OS_LOG_TYPE_ERROR, "Server kick failed with error %u", buf, 8u);
            }
          }
        }
      }
    }
  }
}

void CA::Render::send_synchronize_reply(CA::Render *this, mach_port_t a2, int a3, int a4, int a5)
{
  int v5;
  mach_msg_return_t v6;
  mach_msg_return_t v7;
  NSObject *v8;
  mach_msg_header_t msg;
  int v10;
  int v11;
  int v12;
  uint8_t buf[4];
  mach_msg_return_t v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v5 = (int)this;
  v17 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&msg.msgh_bits = 0x2400000012;
  msg.msgh_remote_port = a2;
  msg.msgh_local_port = 0;
  msg.msgh_voucher_port = 0;
  msg.msgh_id = 1937337955;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v6 = mach_msg(&msg, 1, 0x24u, 0, 0, 0, 0);
  if (v6)
  {
    v7 = v6;
    if (v6 == 268435459)
    {
      mach_msg_destroy(&msg);
    }
    else
    {
      if (CA::Render::sync_hang_report_level(void)::onceToken[0] != -1)
        dispatch_once(CA::Render::sync_hang_report_level(void)::onceToken, &__block_literal_global_3588);
      if ((_DWORD)CA::Render::sync_hang_report_level(void)::level == 3)
      {
        x_log_crash("unexpected error %i sending sync reply from %x", v7, v5);
        abort();
      }
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v8 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 67109376;
          v14 = v7;
          v15 = 1024;
          v16 = v5;
          _os_log_impl(&dword_184457000, v8, OS_LOG_TYPE_FAULT, "unexpected error %i sending sync reply from %x", buf, 0xEu);
        }
      }
    }
  }
}

uint64_t CA::Render::ImageQueue::is_protected(CA::Render::ImageQueue *this)
{
  char v1;
  uint64_t v2;

  v1 = atomic_load((unint64_t *)(*(_QWORD *)(*((_QWORD *)this + 2) + 24) + 8));
  if ((v1 & 4) != 0)
    return 1;
  v2 = *((_QWORD *)this + 8);
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 232))(v2);
  v2 = *((_QWORD *)this + 10);
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 232))(v2);
  v2 = *((_QWORD *)this + 3);
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 232))(v2);
  else
    return 0;
}

uint64_t CAImageQueueCollect(uint64_t a1)
{
  return CAImageQueueCollect_(a1, 0, 0);
}

uint64_t CA::Context::commit_transaction(CA::Context *this, CA::Transaction *a2, double a3, double *a4, uint64_t a5, const __CFArray *a6)
{
  CA::Context *kk;
  CA::Context **v8;
  int value;
  double v10;
  double v11;
  _QWORD *v12;
  size_t v13;
  void *v14;
  size_t v15;
  CA::Context *v16;
  pthread_mutex_t *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  malloc_zone_t *malloc_zone;
  size_t v25;
  const __CFArray *v26;
  CA::Context **v27;
  malloc_zone_t *v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned int ii;
  uint64_t v32;
  _BOOL4 v33;
  uint64_t *v35;
  char v36;
  uint64_t *v37;
  uint64_t *v38;
  unsigned int v39;
  void ***v40;
  CA::Context **v41;
  CA::Context *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int *v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  unsigned int *v51;
  unsigned int v52;
  BOOL v53;
  uint64_t *v54;
  uint64_t *v55;
  _QWORD *v56;
  malloc_zone_t *v57;
  malloc_zone_t *v58;
  _QWORD *v59;
  _QWORD *v60;
  unsigned int *v61;
  unsigned int v62;
  malloc_zone_t *v63;
  int v64;
  BOOL v65;
  size_t v66;
  CA::Context **v67;
  CA::Context *v68;
  unsigned int v69;
  int v70;
  _QWORD *v71;
  unsigned int v72;
  int v73;
  BOOL v74;
  uint64_t *v75;
  uint64_t *v76;
  _QWORD *v77;
  malloc_zone_t *v78;
  malloc_zone_t *v79;
  __int128 v80;
  uint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  int v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *k;
  unsigned int v91;
  int v92;
  uint64_t v93;
  _BOOL4 v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t *m;
  unsigned int v98;
  int v99;
  malloc_zone_t *v100;
  _DWORD *v101;
  malloc_zone_t *v102;
  _DWORD *v103;
  uint64_t *v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t *n;
  uint64_t v109;
  uint64_t *v110;
  _DWORD *v111;
  _OWORD *v112;
  CFAllocatorRef v113;
  mach_port_t reply_port;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  NSObject *v118;
  int v119;
  char *v120;
  mach_vm_address_t v121;
  int v122;
  int v123;
  int v124;
  uint64_t v125;
  malloc_zone_t *v126;
  unint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  unint64_t v130;
  char *v131;
  malloc_zone_t *v132;
  _DWORD *v133;
  unint64_t v134;
  malloc_zone_t *v135;
  _DWORD *v136;
  unsigned int v138;
  char *v139;
  int *v140;
  malloc_zone_t *v141;
  _DWORD *v142;
  int v143;
  malloc_zone_t *v144;
  malloc_zone_t *v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint8x8_t v153;
  unint64_t v154;
  void **v155;
  _QWORD *v156;
  unint64_t v157;
  float v158;
  _BOOL8 v159;
  unint64_t v160;
  unint64_t v161;
  int8x8_t v162;
  void *v163;
  void *v164;
  uint64_t v165;
  _QWORD **v166;
  unint64_t v167;
  uint8x8_t v168;
  unint64_t v169;
  uint8x8_t v170;
  uint64_t v171;
  _QWORD *j;
  unint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  unint64_t v176;
  unsigned int v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int v184;
  uint64_t v185;
  uint64_t *v186;
  _DWORD *v187;
  uint64_t *v188;
  unsigned int v189;
  int v190;
  char *v191;
  char *v192;
  malloc_zone_t *v193;
  malloc_zone_t *v194;
  _QWORD *v195;
  unsigned int v196;
  _DWORD *v197;
  uint64_t *v198;
  unint64_t v199;
  int v200;
  unint64_t v201;
  uint8x8_t v202;
  unint64_t v203;
  void **v204;
  _QWORD *v205;
  unint64_t v206;
  float v207;
  _BOOL8 v208;
  unint64_t v209;
  unint64_t v210;
  int8x8_t prime;
  void *v212;
  void *v213;
  uint64_t v214;
  _QWORD **v215;
  unint64_t v216;
  uint8x8_t v217;
  unint64_t v218;
  uint8x8_t v219;
  uint64_t v220;
  _QWORD *i;
  unint64_t v222;
  uint64_t v223;
  _QWORD *v224;
  unint64_t v225;
  malloc_zone_t *v226;
  uint64_t v227;
  void *v228;
  uint64_t v229;
  unsigned int v230;
  unsigned int v231;
  void *v232;
  malloc_zone_t *v233;
  _QWORD *v234;
  unsigned int *v235;
  unsigned int *v236;
  unsigned int v237;
  unsigned int v238;
  malloc_zone_t *v239;
  unsigned int *v240;
  unsigned int *v241;
  unsigned int v242;
  unsigned int v243;
  malloc_zone_t *v244;
  _QWORD *v245;
  malloc_zone_t *v246;
  _QWORD *v247;
  uint64_t **v248;
  uint64_t v249;
  _QWORD *v250;
  void **v251;
  __int128 *v252;
  uint8x8_t v253;
  unint64_t v254;
  uint64_t v255;
  unint64_t v256;
  void **v257;
  char *v258;
  uint8x8_t v259;
  unint64_t v260;
  unint64_t v261;
  float v262;
  _BOOL8 v263;
  unint64_t v264;
  unint64_t v265;
  size_t v266;
  _QWORD *v267;
  _QWORD *v268;
  unint64_t v269;
  double v270;
  char *v271;
  _QWORD *jj;
  unsigned int v273;
  NSObject *v274;
  uint64_t *v275;
  unint64_t v276;
  unint64_t v277;
  uint8x8_t v278;
  __int128 *v279;
  __int128 *v280;
  unint64_t v281;
  unint64_t v282;
  __int128 *v283;
  unint64_t v284;
  uint64_t v285;
  _QWORD *v286;
  _QWORD *v287;
  _QWORD *v288;
  uint64_t v289;
  double v290;
  double v291;
  char v292;
  double v293;
  double v294;
  __int128 v295;
  double v296;
  uint64_t v297;
  uint64_t v298;
  double v299;
  uint64_t v300;
  __int128 *v301;
  _QWORD *v302;
  char v303;
  pthread_mutex_t *v304;
  void *v305;
  int8x16_t v306;
  int8x16_t v307;
  uint64_t v308;
  int v309;
  CA::Render::Context *v310;
  unsigned int v311;
  uint64_t *v312;
  uint64_t *v313;
  uint64_t v314;
  malloc_zone_t *v315;
  _QWORD *v316;
  uint64_t v317;
  _QWORD *v318;
  _QWORD *v319;
  uint64_t v320;
  __int128 *v321;
  uint64_t v322;
  malloc_zone_t *v323;
  void *v324;
  char v325;
  uint64_t v326;
  __int128 v327;
  uint64_t *v328;
  unint64_t v329;
  uint8x8_t v330;
  uint64_t *v331;
  uint64_t *v332;
  unint64_t v333;
  unint64_t v334;
  uint64_t v335;
  unint64_t v336;
  _DWORD *v337;
  uint64_t v338;
  os_unfair_lock_s *v339;
  CA::Render::Encoder::ObjectCache *v340;
  malloc_zone_t *v341;
  CA::Render::Encoder::ObjectCache *v342;
  uint64_t v343;
  malloc_zone_t *v344;
  _QWORD *v345;
  char v346;
  CA::Render::Context *v347;
  CA::Render::Encoder *v348;
  CGColorSpace *v349;
  _BYTE *v350;
  const __CFString *v351;
  int v352;
  CA::Render::Context *v353;
  CA::Render::Encoder *v354;
  _BYTE *v355;
  int v356;
  uint64_t *mm;
  int v358;
  BOOL v359;
  CA::Render::Encoder *v360;
  int v361;
  uint64_t *nn;
  int v363;
  BOOL v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  _QWORD *i1;
  uint64_t v371;
  pthread_mutex_t *v372;
  uint64_t v373;
  char v374;
  uint64_t v375;
  uint64_t v376;
  _QWORD *i2;
  _QWORD *v378;
  uint64_t v379;
  int v380;
  CA::Render::Encoder *v381;
  char v382;
  _BYTE *v383;
  _DWORD *v384;
  uint64_t v385;
  unint64_t v386;
  BOOL *v387;
  double v388;
  CA::Render::Encoder *v389;
  _BYTE *v390;
  double *v391;
  CA::Render::Encoder *v392;
  char v393;
  _BYTE *v394;
  _BYTE *v395;
  CA::Render::Encoder *v396;
  _BYTE *v397;
  _BYTE *v398;
  CA::Render::Encoder *v399;
  uint64_t v400;
  _BYTE *v401;
  _QWORD *v402;
  uint64_t v403;
  double v404;
  CA::Render::Encoder *v405;
  _BYTE *v406;
  double *v407;
  CA::Render::Encoder *v408;
  _BYTE *v409;
  uint64_t v410;
  _QWORD *v411;
  _DWORD *v412;
  uint64_t v413;
  char v414;
  int v415;
  uint64_t v416;
  uint64_t v417;
  CA::Render::Encoder *v418;
  uint64_t v419;
  _BOOL4 v420;
  mach_port_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  char *v425;
  NSObject *v426;
  char *v427;
  _BYTE *v428;
  double *v429;
  uint64_t *v430;
  int v431;
  uint64_t v432;
  unint64_t v433;
  char *v434;
  NSObject *v435;
  int v436;
  char *v437;
  os_unfair_lock_s *v438;
  int v439;
  unint64_t v440;
  CA::Context *v441;
  uint64_t v442;
  uint8x8_t v443;
  unint64_t v444;
  uint64_t **v445;
  uint64_t *v446;
  unint64_t v447;
  CABatchInfo *v449;
  uint64_t *i3;
  char *v451;
  char *v452;
  char *v453;
  NSObject *v454;
  char *v455;
  uint64_t *v456;
  uint64_t v457;
  uint64_t v458;
  char *v459;
  uint64_t v460;
  unint64_t v461;
  unint64_t v462;
  unint64_t v463;
  int v464;
  NSObject *v465;
  NSObject *v466;
  dispatch_time_t v467;
  uint64_t v468;
  double v469;
  _QWORD *i4;
  _QWORD *v471;
  const void *v472;
  _QWORD *v473;
  _QWORD *v474;
  CA::Context **v475;
  malloc_zone_t *v476;
  int v477;
  uint64_t *v478;
  uint64_t v479;
  unsigned int v480;
  unsigned int v481;
  malloc_zone_t *v482;
  _QWORD *v483;
  _QWORD *v484;
  uint64_t v485;
  _QWORD *v486;
  _QWORD *v487;
  _QWORD *v488;
  CA::Transaction *v489;
  void *v490;
  uint64_t v491;
  uint64_t v492;
  int v493;
  NSObject *v494;
  NSObject *global_queue;
  double v496;
  uint64_t v497;
  double v498;
  int *v499;
  CA::DispatchGroup *v500;
  void (*v501)(void *);
  void *v502;
  uint64_t v504;
  BOOL v505;
  uint64_t v506;
  unint64_t v508;
  uint64_t v509;
  char *v510;
  char *v511;
  __int128 v512;
  uint64_t *v513;
  uint64_t v514;
  size_t v515;
  void *v516;
  __int128 *v517;
  __int128 v518;
  CA::Transaction *v519;
  uint64_t *v520;
  __int128 v521;
  CFAllocatorRef v522;
  unint64_t v523;
  int v524;
  __int128 *v525;
  CABatchInfo *v526;
  double *v527;
  uint64_t *v528;
  uint64_t v529;
  __int128 *v530;
  unsigned int v531;
  unint64_t v532;
  CA::Context *v533;
  void ***v534;
  __int128 v535;
  CA::Context **v536;
  uint64_t v537;
  uint64_t v538;
  void (*v539)(uint64_t, uint64_t);
  void *v540;
  _QWORD *v541;
  __int128 *p_buf;
  _BYTE *v543;
  int v544;
  _QWORD v545[5];
  int v546;
  uint64_t v547;
  uint64_t v548;
  void (*v549)(uint64_t, uint64_t);
  void *v550;
  _BYTE *v551;
  _DWORD *v552;
  int v553;
  _QWORD v554[2];
  uint64_t (*v555)(uint64_t, uint64_t);
  void *v556;
  _QWORD *v557;
  CA::Context *v558;
  int v559;
  _QWORD v560[6];
  double v561;
  uint64_t v562;
  size_t v563;
  size_t v564;
  CA::Context *v565;
  __int128 v566;
  __int128 v567;
  __int128 v568;
  uint64_t v569;
  uint64_t v570;
  unsigned int v571;
  double v572;
  double *v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  unint64_t v577;
  uint64_t v578;
  uint64_t v579;
  int v580;
  __int128 v581;
  __int128 v582;
  uint64_t v583;
  __int128 v584;
  __int128 v585;
  uint64_t v586;
  __int128 v587;
  __int128 v588;
  uint64_t v589;
  _QWORD v590[6];
  __int128 v591;
  __int128 v592;
  uint64_t v593;
  __int128 v594;
  __int128 v595;
  uint64_t v596;
  uint64_t v597[6];
  __int128 v598;
  __int128 v599;
  uint64_t v600;
  __int128 v601;
  __int128 v602;
  uint64_t v603;
  __int128 v604;
  __int128 v605;
  uint64_t v606;
  double *v607;
  int v608;
  __int128 v609;
  __int128 v610;
  uint64_t v611;
  _QWORD v612[2];
  _QWORD v613[2];
  int v614;
  int v615;
  _QWORD v616[16];
  _QWORD v617[16];
  _BYTE v618[112];
  __int128 v619;
  __int128 v620;
  __int128 buf;
  __int128 v622;
  uint64_t v623;
  __int128 *v624;
  __int128 *v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t (*v628)(CA::Render::Fence::Transaction::Observer *, uint64_t);
  int v629;
  uint64_t v630;
  CFRange v631;

  v519 = a2;
  kk = this;
  v630 = *MEMORY[0x1E0C80C00];
  v568 = 0u;
  v567 = 0u;
  v566 = 0u;
  v569 = 0;
  v565 = this;
  memset(v617, 0, sizeof(v617));
  v564 = 16;
  memset(v616, 0, sizeof(v616));
  v563 = 16;
  v8 = (CA::Context **)CA::Context::retain_all_contexts((CA::Context *)1, v617, &v564, *(unint64_t **)(*((_QWORD *)this + 13) + 120), a6);
  v603 = 1065353216;
  v601 = 0u;
  v602 = 0u;
  v600 = 1065353216;
  v598 = 0u;
  v599 = 0u;
  v597[4] = 1065353216;
  memset(v597, 0, 32);
  v596 = 1065353216;
  v594 = 0u;
  v595 = 0u;
  v593 = 1065353216;
  v591 = 0u;
  v592 = 0u;
  v590[4] = 1065353216;
  memset(v590, 0, 32);
  v589 = 1065353216;
  v587 = 0u;
  v588 = 0u;
  v562 = 0;
  value = CA::Transaction::get_value(*((_QWORD *)kk + 11), 109, (const CGAffineTransform *)0x12, (CA::Mat4Impl *)((char *)&v566 + 8));
  v10 = *((double *)&v566 + 1);
  if (*((double *)&v566 + 1) <= a3)
    v10 = a3;
  if (value)
    v11 = v10;
  else
    v11 = 0.0;
  *((double *)&v566 + 1) = v11;
  *(_QWORD *)&v567 = 0x7FF0000000000000;
  v12 = CA::Transaction::run_commit_handlers((uint64_t)kk, 0);
  v13 = v564;
  if (!v564)
  {
    LODWORD(v528) = 0;
    goto LABEL_948;
  }
  v14 = (void *)MEMORY[0x186DBE2E4](v12);
  v15 = 0;
  v527 = (double *)&v567;
  do
  {
    v16 = v8[v15];
    *(_QWORD *)&v566 = v16;
    *((_QWORD *)kk + 5) = v16;
    v17 = (pthread_mutex_t *)((char *)v16 + 16);
    pthread_mutex_lock((pthread_mutex_t *)((char *)v16 + 16));
    v18 = *(_QWORD *)(v566 + 96);
    if (v18)
    {
      v19 = *(unsigned int **)(v18 + 16);
      while (1)
      {
        v20 = *v19;
        if (!*v19)
          break;
        while (1)
        {
          v21 = __ldaxr(v19);
          if (v21 != v20)
            break;
          if (!__stlxr(v20 + 1, v19))
            goto LABEL_15;
        }
        __clrex();
      }
LABEL_15:
      pthread_mutex_unlock(v17);
      CA::Layer::layout_and_display_if_needed((CA::Layer *)v19, kk);
      CA::Layer::prepare_commit((CA::Layer *)v19, kk);
LABEL_16:
      v22 = *v19;
      if (*v19)
      {
        do
        {
          v23 = __ldaxr(v19);
          if (v23 != v22)
          {
            __clrex();
            goto LABEL_16;
          }
        }
        while (__stlxr(v22 - 1, v19));
        if (v22 == 1)
        {
          CA::Layer::destroy((CA::Layer *)v19);
          CA::Layer::~Layer((CA::AttrList **)v19);
          malloc_zone = (malloc_zone_t *)get_malloc_zone();
          malloc_zone_free(malloc_zone, v19);
        }
      }
    }
    else
    {
      pthread_mutex_unlock(v17);
    }
    ++v15;
    v25 = v564;
  }
  while (v15 < v564);
  v515 = v13;
  objc_autoreleasePoolPop(v14);
  CA::Transaction::run_commit_handlers((uint64_t)kk, 3);
  v536 = (CA::Context **)CA::Context::retain_all_contexts((CA::Context *)1, v616, &v563, *(unint64_t **)(*((_QWORD *)kk + 13) + 120), v26);
  if (v25)
  {
    v27 = v8;
    do
    {
      CA::Context::unref(*v27++, 1);
      --v25;
    }
    while (v25);
  }
  if (v8 != v617)
  {
    v28 = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(v28, v8);
  }
  *((_BYTE *)kk + 116) |= 2u;
  v29 = (_QWORD *)MEMORY[0x186DBE2E4]();
  v516 = v29;
  v30 = *((_QWORD *)kk + 13);
  ii = *(_DWORD *)(v30 + 40);
  v32 = *(_QWORD *)(v30 + 48);
  LODWORD(v529) = v32 != 0;
  v33 = (*(_BYTE *)(v30 + 204) & 0x40) != 0 && (v563 > 1 || v32 != 0);
  v35 = *(uint64_t **)(v30 + 32);
  v533 = kk;
  if (!v33 && !v35)
  {
    v526 = 0;
    v36 = 0;
    goto LABEL_583;
  }
  v531 = ii;
  LODWORD(v532) = v33;
  v611 = 1065353216;
  v609 = 0u;
  v610 = 0u;
  v606 = 1065353216;
  v604 = 0u;
  v605 = 0u;
  v513 = v35;
  *(_QWORD *)&v521 = v32;
  if (v35)
  {
    v534 = (void ***)v563;
    v37 = v513;
    while (1)
    {
      v38 = (uint64_t *)v37[2];
      if (v38)
        break;
LABEL_98:
      v37 = (uint64_t *)*v37;
      if (!v37)
        goto LABEL_99;
    }
    while (1)
    {
      v39 = *((_DWORD *)v38 + 2);
      LODWORD(buf) = 0;
      v40 = v534;
      v41 = v536;
      LODWORD(v584) = 0;
      if (!v534)
        break;
      while (1)
      {
        v42 = *v41;
        if (*((_DWORD *)*v41 + 2) == v39)
          break;
        ++v41;
        v40 = (void ***)((char *)v40 - 1);
        if (!v40)
          goto LABEL_48;
      }
      v43 = *((_DWORD *)v42 + 1);
      LODWORD(buf) = v43;
      if (!v43)
        goto LABEL_49;
      v29 = (_QWORD *)CA::Context::retain_render_ctx(v42);
      v45 = (unsigned int *)v29;
      if (v29)
      {
        v44 = 0;
        LODWORD(v535) = 0;
      }
      else
      {
        v44 = *((_DWORD *)v42 + 3);
        LODWORD(v584) = v44;
        v64 = *((_DWORD *)v42 + 40);
        LODWORD(v535) = v64;
        if (v44)
          v65 = v64 == 0;
        else
          v65 = 1;
        if (v65)
        {
          v45 = 0;
          goto LABEL_50;
        }
      }
LABEL_51:
      v46 = v38[2];
      if (v46)
      {
        if (v42)
          v47 = v39;
        else
          v47 = 0;
        LODWORD(v581) = v47;
        v29 = std::__hash_table<std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>>>::find<unsigned int>(v594, *((unint64_t *)&v594 + 1), v47);
        if (v29)
        {
          v48 = v29[3];
          if (v48)
          {
            do
            {
              v49 = v48;
              v48 = *(_QWORD *)(v48 + 8);
            }
            while (v48);
            v50 = (_QWORD *)(v49 + 8);
          }
          else
          {
            v50 = v618;
          }
          *v50 = v46;
        }
        else
        {
          v29 = std::__hash_table<std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((float *)&v594, v47, &v581);
          v29[3] = v46;
        }
        v38[2] = 0;
      }
      if (v42 && (*((_DWORD *)v37 + 6) + 1) >= 2)
      {
        v54 = std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)&v609, v44, &v584);
        *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)(v54 + 3), v43, &buf)+ 5) = v39;
        v55 = std::__hash_table<std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>>>::find<unsigned int>(v604, *((unint64_t *)&v604 + 1), v44);
        if (v55)
        {
          v56 = (_QWORD *)v55[3];
        }
        else
        {
          v57 = (malloc_zone_t *)get_malloc_zone();
          v56 = malloc_type_zone_malloc(v57, 0x28uLL, 0x8BB15036uLL);
          v56[1] = 0;
          v56[2] = 0;
          *v56 = 0;
          *((_BYTE *)v56 + 24) = 0;
          *((_BYTE *)v56 + 25) = v529;
          v56[4] = 0;
          std::__hash_table<std::__hash_value_type<unsigned int,CA::Render::Fence::Transaction::Info *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,CA::Render::Fence::Transaction::Info *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,CA::Render::Fence::Transaction::Info *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,CA::Render::Fence::Transaction::Info *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((float *)&v604, v44, &v584)[3] = v56;
        }
        v29 = v56;
        while (1)
        {
          v29 = (_QWORD *)*v29;
          if (!v29)
            break;
          if (*((_DWORD *)v29 + 2) == *((_DWORD *)v37 + 6))
            goto LABEL_82;
        }
        v58 = (malloc_zone_t *)get_malloc_zone();
        v29 = malloc_type_zone_malloc(v58, 0x20uLL, 0x8BB15036uLL);
        *v29 = *v56;
        *((_DWORD *)v29 + 2) = *((_DWORD *)v37 + 6);
        v29[2] = 0;
        v29[3] = 0;
        *v56 = v29;
LABEL_82:
        v59 = v29 + 3;
        v60 = v29 + 3;
        do
        {
          v60 = (_QWORD *)*v60;
          if (!v60)
          {
            v63 = (malloc_zone_t *)get_malloc_zone();
            v29 = malloc_type_zone_malloc(v63, 0x18uLL, 0x8BB15036uLL);
            *v29 = *v59;
            *((_DWORD *)v29 + 2) = v535;
            *((_DWORD *)v29 + 3) = v43;
            v29[2] = v45;
            *v59 = v29;
            goto LABEL_90;
          }
        }
        while (*((_DWORD *)v60 + 3) != v43);
        if (!v45)
          goto LABEL_90;
        v61 = v45 + 2;
        do
        {
          v62 = __ldaxr(v61);
          v53 = --v62 == 0;
        }
        while (__stlxr(v62, v61));
        goto LABEL_71;
      }
      if (v45)
      {
        v51 = v45 + 2;
        do
        {
          v52 = __ldaxr(v51);
          v53 = --v52 == 0;
        }
        while (__stlxr(v52, v51));
LABEL_71:
        if (v53)
          v29 = (_QWORD *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v45 + 16))(v45);
      }
LABEL_90:
      v38 = (uint64_t *)*v38;
      if (!v38)
        goto LABEL_98;
    }
LABEL_48:
    v43 = 0;
LABEL_49:
    v44 = 0;
    v45 = 0;
    LODWORD(v535) = 0;
LABEL_50:
    v42 = 0;
    goto LABEL_51;
  }
LABEL_99:
  if ((_DWORD)v532)
  {
    v66 = v563;
    v67 = v536;
    if (v563)
    {
      v524 = 0;
      while (1)
      {
        v68 = *v67;
        v69 = *((_DWORD *)*v67 + 1);
        v70 = *((_DWORD *)*v67 + 2);
        *(_DWORD *)v618 = v69;
        LODWORD(buf) = 0;
        if (v69)
        {
          v29 = (_QWORD *)CA::Context::retain_render_ctx(v68);
          v71 = v29;
          if (v29)
          {
            v72 = 0;
            v73 = 0;
LABEL_111:
            if (*((char *)v68 + 241) < 0)
              v524 = *((_DWORD *)v68 + 3);
            v75 = std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)&v609, v72, &buf);
            *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)(v75 + 3), v69, v618)+ 5) = v70;
            v76 = std::__hash_table<std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>>>::find<unsigned int>(v604, *((unint64_t *)&v604 + 1), v72);
            if (v76)
            {
              v77 = (_QWORD *)v76[3];
              kk = v533;
            }
            else
            {
              v78 = (malloc_zone_t *)get_malloc_zone();
              v77 = malloc_type_zone_malloc(v78, 0x28uLL, 0x8BB15036uLL);
              v77[1] = 0;
              v77[2] = 0;
              *v77 = 0;
              *((_BYTE *)v77 + 24) = 0;
              *((_BYTE *)v77 + 25) = v529;
              v77[4] = 0;
              kk = v533;
              std::__hash_table<std::__hash_value_type<unsigned int,CA::Render::Fence::Transaction::Info *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,CA::Render::Fence::Transaction::Info *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,CA::Render::Fence::Transaction::Info *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,CA::Render::Fence::Transaction::Info *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((float *)&v604, v72, &buf)[3] = v77;
            }
            v79 = (malloc_zone_t *)get_malloc_zone();
            v29 = malloc_type_zone_malloc(v79, 0x18uLL, 0x8BB15036uLL);
            *v29 = v77[1];
            *((_DWORD *)v29 + 2) = v73;
            *((_DWORD *)v29 + 3) = v69;
            v29[2] = v71;
            v77[1] = v29;
            goto LABEL_117;
          }
          v72 = *((_DWORD *)v68 + 3);
          LODWORD(buf) = v72;
          v73 = *((_DWORD *)v68 + 40);
          if (v72)
            v74 = v73 == 0;
          else
            v74 = 1;
          if (!v74)
            goto LABEL_111;
        }
        kk = v533;
LABEL_117:
        ++v67;
        if (!--v66)
          goto LABEL_120;
      }
    }
  }
  v524 = 0;
  kk = v533;
LABEL_120:
  v586 = 1065353216;
  *((_QWORD *)&v80 + 1) = 0;
  v585 = 0u;
  v584 = 0u;
  v81 = v605;
  if (!(_QWORD)v605)
  {
    LODWORD(v520) = 0;
    v526 = 0;
LABEL_474:
    v248 = (uint64_t **)v513;
    goto LABEL_475;
  }
  LODWORD(v520) = 0;
  v526 = 0;
  v522 = (CFAllocatorRef)&v618[81];
  v523 = (unint64_t)&v618[4];
  v517 = &v602;
  v530 = &v588;
  *(_QWORD *)&v80 = 67109634;
  v512 = v80;
  do
  {
    v82 = *(unsigned int *)(v81 + 16);
    LODWORD(v581) = *(_DWORD *)(v81 + 16);
    v83 = *(_QWORD **)(v81 + 24);
    v84 = (_QWORD *)*v83;
    v528 = (uint64_t *)v81;
    if (v84)
    {
      v85 = *(_DWORD *)(v84[3] + 8);
      if (!v85)
        goto LABEL_134;
      goto LABEL_124;
    }
    v93 = v83[1];
    v85 = *(_DWORD *)(v93 + 8);
    v94 = (*(_QWORD *)v93 | (unint64_t)v521) != 0;
    if (!v85 && v94)
    {
LABEL_134:
      v95 = CA::Render::Fence::applyTransaction(v83);
      if (!v95)
        goto LABEL_452;
      v96 = v95;
      if (*((_DWORD *)v95 + 5))
        abort();
LABEL_220:
      v146 = *((_DWORD *)v96 + 4);
      if (!v146)
      {
LABEL_300:
        v177 = *((_DWORD *)v96 + 5);
        if (v177 == -1)
        {
          mach_port_deallocate(*MEMORY[0x1E0C83DA0], 0xFFFFFFFF);
        }
        else
        {
          if (!v177)
          {
            LODWORD(v534) = 0;
            goto LABEL_312;
          }
          if (v146)
          {
            if (*((_BYTE *)v96 + 24))
            {
              v178 = *v96;
              if (*v96)
              {
                LODWORD(v534) = *((_DWORD *)v96 + 5);
                v179 = *(_QWORD *)(v178 + 16);
                objc_opt_self();
                if (!v179)
                  __assert_rtn("+[CAFenceHandle _newTxFenceWithPort:name:]", "CAFenceHandle.mm", 323, "name > 0");
                v180 = -[CAFenceHandle _initWithPort:name:tracing:]([CAFenceHandle alloc], (int)v534, v179, 1);
                kdebug_trace();
                goto LABEL_313;
              }
            }
          }
          if (!*((_BYTE *)v96 + 24))
          {
            std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)&v591, *((_DWORD *)v96 + 5), *((_DWORD *)v96 + 5));
            if (!v526)
            {
              v526 = 0;
              if (v524)
              {
                if ((_DWORD)v82 == v524)
                  v526 = +[CABatchInfo _newInfoWithUnownedPort:name:]((uint64_t)CABatchInfo, v177, v96[4]);
              }
            }
            v229 = *((_QWORD *)v533 + 13);
            v531 = *(_DWORD *)(v229 + 40);
            LODWORD(v534) = v177;
            if (!v531)
            {
              do
                v230 = __ldaxr(CA::Transaction::capture_ftx_seed(void)::next_ftx_seed);
              while (__stlxr(v230 + 1, CA::Transaction::capture_ftx_seed(void)::next_ftx_seed));
              v531 = v230 + 1;
              *(_DWORD *)(v229 + 40) = v230 + 1;
              if (v230 == -1)
              {
                do
                  v231 = __ldaxr(CA::Transaction::capture_ftx_seed(void)::next_ftx_seed);
                while (__stlxr(v231 + 1, CA::Transaction::capture_ftx_seed(void)::next_ftx_seed));
                v180 = 0;
                v531 = v231 + 1;
                *(_DWORD *)(v229 + 40) = v231 + 1;
                if (v146)
                {
LABEL_313:
                  if (*v96)
                  {
                    v181 = *((_QWORD *)v533 + 13);
                    v531 = *(_DWORD *)(v181 + 40);
                    if (!v531)
                    {
                      do
                        v182 = __ldaxr(CA::Transaction::capture_ftx_seed(void)::next_ftx_seed);
                      while (__stlxr(v182 + 1, CA::Transaction::capture_ftx_seed(void)::next_ftx_seed));
                      v531 = v182 + 1;
                      *(_DWORD *)(v181 + 40) = v182 + 1;
                      if (v182 == -1)
                      {
                        do
                          v183 = __ldaxr(CA::Transaction::capture_ftx_seed(void)::next_ftx_seed);
                        while (__stlxr(v183 + 1, CA::Transaction::capture_ftx_seed(void)::next_ftx_seed));
                        v531 = v183 + 1;
                        *(_DWORD *)(v181 + 40) = v183 + 1;
                      }
                    }
                    LODWORD(v520) = 1;
                  }
                }
LABEL_320:
                v184 = v581;
                if (v180)
                {
                  v185 = *v96 + 24;
                  while (1)
                  {
                    v185 = *(_QWORD *)v185;
                    if (!v185)
                      break;
                    v186 = std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)&v609, v184, &v581);
                    std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)(v186 + 3), *(_DWORD *)(v185 + 12), (_DWORD *)(v185 + 12));
                    kdebug_trace();
                  }
                  objc_msgSend(v180, "invalidate");

                  v184 = v581;
                }
                while (1)
                {
                  v195 = (_QWORD *)*v96;
                  if (!*v96)
                    break;
                  while (1)
                  {
                    v187 = (_DWORD *)v195[3];
                    if (!v187)
                      break;
                    if (v146)
                    {
                      v188 = std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)&v609, v184, &v581);
                      *(_DWORD *)v618 = *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)(v188 + 3), v187[3], v187 + 3)+ 5);
                      v189 = *(_DWORD *)v618;
                      v190 = v187[3];
                      *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)&v584, *(unsigned int *)v618, v618)+ 5) = v190;
                      v191 = std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned long long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned long long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long long>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v597, v189, v618);
                      std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)(v191 + 24), v195[2], v195[2]);
                      v192 = std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned long long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned long long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long long>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)&v598, v184, &v581);
                      std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)(v192 + 24), v195[2], v195[2]);
                    }
                    v195[3] = *(_QWORD *)v187;
                    v193 = (malloc_zone_t *)get_malloc_zone();
                    malloc_zone_free(v193, v187);
                  }
                  *v96 = *v195;
                  v194 = (malloc_zone_t *)get_malloc_zone();
                  malloc_zone_free(v194, v195);
                }
                v196 = (_DWORD)v534 - 1;
                while (1)
                {
                  v197 = (_DWORD *)v96[1];
                  if (!v197)
                    goto LABEL_451;
                  if (v196 <= 0xFFFFFFFD)
                  {
                    v198 = std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)&v609, v184, &v581);
                    *(_DWORD *)v618 = *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)(v198 + 3), v197[3], v197 + 3)+ 5);
                    v199 = *(unsigned int *)v618;
                    *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v590, *(unsigned int *)v618, v618)+ 5) = (_DWORD)v534;
                    if (v96[4])
                      break;
                  }
LABEL_410:
                  v96[1] = *(_QWORD *)v197;
                  v226 = (malloc_zone_t *)get_malloc_zone();
                  malloc_zone_free(v226, v197);
                }
                v200 = v197[3];
                *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)&v584, v199, v618)+ 5) = v200;
                v201 = *((_QWORD *)&v587 + 1);
                *(_QWORD *)&v535 = v96[4];
                if (*((_QWORD *)&v587 + 1))
                {
                  v202 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v587 + 8));
                  v202.i16[0] = vaddlv_u8(v202);
                  if (v202.u32[0] > 1uLL)
                  {
                    v203 = v199;
                    if (*((_QWORD *)&v587 + 1) <= v199)
                      v203 = v199 % *((_QWORD *)&v587 + 1);
                  }
                  else
                  {
                    v203 = (DWORD2(v587) - 1) & v199;
                  }
                  v204 = *(void ***)(v587 + 8 * v203);
                  if (v204)
                  {
                    v205 = *v204;
                    if (*v204)
                    {
                      do
                      {
                        v206 = v205[1];
                        if (v206 == v199)
                        {
                          if (*((_DWORD *)v205 + 4) == (_DWORD)v199)
                          {
                            v227 = v535;
                            goto LABEL_409;
                          }
                        }
                        else
                        {
                          if (v202.u32[0] > 1uLL)
                          {
                            if (v206 >= *((_QWORD *)&v587 + 1))
                              v206 %= *((_QWORD *)&v587 + 1);
                          }
                          else
                          {
                            v206 &= *((_QWORD *)&v587 + 1) - 1;
                          }
                          if (v206 != v203)
                            break;
                        }
                        v205 = (_QWORD *)*v205;
                      }
                      while (v205);
                    }
                  }
                }
                else
                {
                  v203 = 0;
                }
                v205 = operator new(0x20uLL);
                *v205 = 0;
                v205[1] = v199;
                *((_DWORD *)v205 + 4) = v199;
                v205[3] = 0;
                v207 = (float)(unint64_t)(*((_QWORD *)&v588 + 1) + 1);
                if (v201 && (float)(*(float *)&v589 * (float)v201) >= v207)
                {
                  v199 = v203;
                  v227 = v535;
                  goto LABEL_399;
                }
                v208 = (v201 & (v201 - 1)) != 0;
                if (v201 < 3)
                  v208 = 1;
                v209 = v208 | (2 * v201);
                v210 = vcvtps_u32_f32(v207 / *(float *)&v589);
                if (v209 <= v210)
                  prime = (int8x8_t)v210;
                else
                  prime = (int8x8_t)v209;
                if (*(_QWORD *)&prime == 1)
                {
                  prime = (int8x8_t)2;
                }
                else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
                {
                  prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
                  v201 = *((_QWORD *)&v587 + 1);
                }
                if (*(_QWORD *)&prime > v201)
                {
LABEL_365:
                  if (*(_QWORD *)&prime >> 61)
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  v212 = operator new(8 * *(_QWORD *)&prime);
                  v213 = (void *)v587;
                  *(_QWORD *)&v587 = v212;
                  if (v213)
                    operator delete(v213);
                  v214 = 0;
                  *((int8x8_t *)&v587 + 1) = prime;
                  do
                    *(_QWORD *)(v587 + 8 * v214++) = 0;
                  while (*(_QWORD *)&prime != v214);
                  v215 = (_QWORD **)v588;
                  if ((_QWORD)v588)
                  {
                    v216 = *(_QWORD *)(v588 + 8);
                    v217 = (uint8x8_t)vcnt_s8(prime);
                    v217.i16[0] = vaddlv_u8(v217);
                    if (v217.u32[0] > 1uLL)
                    {
                      if (v216 >= *(_QWORD *)&prime)
                        v216 %= *(_QWORD *)&prime;
                    }
                    else
                    {
                      v216 &= *(_QWORD *)&prime - 1;
                    }
                    *(_QWORD *)(v587 + 8 * v216) = v530;
                    for (i = *v215; i; v216 = v222)
                    {
                      v222 = i[1];
                      if (v217.u32[0] > 1uLL)
                      {
                        if (v222 >= *(_QWORD *)&prime)
                          v222 %= *(_QWORD *)&prime;
                      }
                      else
                      {
                        v222 &= *(_QWORD *)&prime - 1;
                      }
                      if (v222 != v216)
                      {
                        if (!*(_QWORD *)(v587 + 8 * v222))
                        {
                          *(_QWORD *)(v587 + 8 * v222) = v215;
                          goto LABEL_390;
                        }
                        *v215 = (_QWORD *)*i;
                        *i = **(_QWORD **)(v587 + 8 * v222);
                        **(_QWORD **)(v587 + 8 * v222) = i;
                        i = v215;
                      }
                      v222 = v216;
LABEL_390:
                      v215 = (_QWORD **)i;
                      i = (_QWORD *)*i;
                    }
                  }
                  v201 = (unint64_t)prime;
                  goto LABEL_394;
                }
                if (*(_QWORD *)&prime < v201)
                {
                  v218 = vcvtps_u32_f32((float)*((unint64_t *)&v588 + 1) / *(float *)&v589);
                  if (v201 < 3
                    || (v219 = (uint8x8_t)vcnt_s8((int8x8_t)v201), v219.i16[0] = vaddlv_u8(v219), v219.u32[0] > 1uLL))
                  {
                    v218 = std::__next_prime(v218);
                  }
                  else
                  {
                    v220 = 1 << -(char)__clz(v218 - 1);
                    if (v218 >= 2)
                      v218 = v220;
                  }
                  if (*(_QWORD *)&prime <= v218)
                    prime = (int8x8_t)v218;
                  if (*(_QWORD *)&prime < v201)
                  {
                    if (!*(_QWORD *)&prime)
                    {
                      v228 = (void *)v587;
                      *(_QWORD *)&v587 = 0;
                      v227 = v535;
                      if (v228)
                        operator delete(v228);
                      v201 = 0;
                      *((_QWORD *)&v587 + 1) = 0;
                      goto LABEL_395;
                    }
                    goto LABEL_365;
                  }
                  v201 = *((_QWORD *)&v587 + 1);
                }
LABEL_394:
                v227 = v535;
LABEL_395:
                if ((v201 & (v201 - 1)) != 0)
                {
                  if (v201 <= v199)
                    v199 %= v201;
                }
                else
                {
                  v199 = ((_DWORD)v201 - 1) & v199;
                }
LABEL_399:
                v223 = v587;
                v224 = *(_QWORD **)(v587 + 8 * v199);
                if (v224)
                {
                  *v205 = *v224;
                }
                else
                {
                  *v205 = v588;
                  *(_QWORD *)&v588 = v205;
                  *(_QWORD *)(v223 + 8 * v199) = v530;
                  if (!*v205)
                    goto LABEL_408;
                  v225 = *(_QWORD *)(*v205 + 8);
                  if ((v201 & (v201 - 1)) != 0)
                  {
                    if (v225 >= v201)
                      v225 %= v201;
                  }
                  else
                  {
                    v225 &= v201 - 1;
                  }
                  v224 = (_QWORD *)(v587 + 8 * v225);
                }
                *v224 = v205;
LABEL_408:
                ++*((_QWORD *)&v588 + 1);
LABEL_409:
                v205[3] = v227;
                goto LABEL_410;
              }
            }
LABEL_312:
            v180 = 0;
            if (v146)
              goto LABEL_313;
            goto LABEL_320;
          }
          mach_port_deallocate(*MEMORY[0x1E0C83DA0], *((_DWORD *)v96 + 5));
        }
        LODWORD(v534) = 0;
        goto LABEL_312;
      }
      v147 = operator new();
      v148 = v147;
      v149 = *((_DWORD *)v96 + 4);
      *(_DWORD *)v147 = 0;
      *(_QWORD *)(v147 + 8) = 0;
      *(_QWORD *)(v147 + 16) = 0;
      *(_DWORD *)(v147 + 24) = v149;
      *(_BYTE *)(v147 + 28) = 1;
      *(_QWORD *)(v147 + 32) = 0;
      if ((v149 + 1) <= 1)
        abort();
      v150 = *((_QWORD *)v533 + 13);
      v151 = *(_QWORD *)(v150 + 48);
      if (v151 && v524 && (_DWORD)v82 == v524)
      {
        *(_QWORD *)(v147 + 32) = v151;
        *(_QWORD *)(v150 + 48) = 0;
      }
      v152 = *((_QWORD *)&v601 + 1);
      if (*((_QWORD *)&v601 + 1))
      {
        v153 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v601 + 8));
        v153.i16[0] = vaddlv_u8(v153);
        if (v153.u32[0] > 1uLL)
        {
          v154 = v82;
          if (*((_QWORD *)&v601 + 1) <= v82)
            v154 = v82 % *((_QWORD *)&v601 + 1);
        }
        else
        {
          v154 = (DWORD2(v601) - 1) & v82;
        }
        v155 = *(void ***)(v601 + 8 * v154);
        if (v155)
        {
          v156 = *v155;
          if (*v155)
          {
            do
            {
              v157 = v156[1];
              if (v157 == v82)
              {
                if (*((_DWORD *)v156 + 4) == (_DWORD)v82)
                  goto LABEL_299;
              }
              else
              {
                if (v153.u32[0] > 1uLL)
                {
                  if (v157 >= *((_QWORD *)&v601 + 1))
                    v157 %= *((_QWORD *)&v601 + 1);
                }
                else
                {
                  v157 &= *((_QWORD *)&v601 + 1) - 1;
                }
                if (v157 != v154)
                  break;
              }
              v156 = (_QWORD *)*v156;
            }
            while (v156);
          }
        }
      }
      else
      {
        v154 = 0;
      }
      v156 = operator new(0x20uLL);
      *v156 = 0;
      v156[1] = v82;
      *((_DWORD *)v156 + 4) = v82;
      v156[3] = 0;
      v158 = (float)(unint64_t)(*((_QWORD *)&v602 + 1) + 1);
      if (v152 && (float)(*(float *)&v603 * (float)v152) >= v158)
      {
LABEL_289:
        v174 = v601;
        v175 = *(_QWORD **)(v601 + 8 * v154);
        if (v175)
        {
          *v156 = *v175;
        }
        else
        {
          *v156 = v602;
          *(_QWORD *)&v602 = v156;
          *(_QWORD *)(v174 + 8 * v154) = v517;
          if (!*v156)
            goto LABEL_298;
          v176 = *(_QWORD *)(*v156 + 8);
          if ((v152 & (v152 - 1)) != 0)
          {
            if (v176 >= v152)
              v176 %= v152;
          }
          else
          {
            v176 &= v152 - 1;
          }
          v175 = (_QWORD *)(v601 + 8 * v176);
        }
        *v175 = v156;
LABEL_298:
        ++*((_QWORD *)&v602 + 1);
LABEL_299:
        v156[3] = v148;
        goto LABEL_300;
      }
      v159 = (v152 & (v152 - 1)) != 0;
      if (v152 < 3)
        v159 = 1;
      v160 = v159 | (2 * v152);
      v161 = vcvtps_u32_f32(v158 / *(float *)&v603);
      if (v160 <= v161)
        v162 = (int8x8_t)v161;
      else
        v162 = (int8x8_t)v160;
      if (*(_QWORD *)&v162 == 1)
      {
        v162 = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&v162 & (*(_QWORD *)&v162 - 1)) != 0)
      {
        v162 = (int8x8_t)std::__next_prime(*(_QWORD *)&v162);
        v152 = *((_QWORD *)&v601 + 1);
      }
      if (*(_QWORD *)&v162 > v152)
        goto LABEL_255;
      if (*(_QWORD *)&v162 < v152)
      {
        v169 = vcvtps_u32_f32((float)*((unint64_t *)&v602 + 1) / *(float *)&v603);
        if (v152 < 3 || (v170 = (uint8x8_t)vcnt_s8((int8x8_t)v152), v170.i16[0] = vaddlv_u8(v170), v170.u32[0] > 1uLL))
        {
          v169 = std::__next_prime(v169);
        }
        else
        {
          v171 = 1 << -(char)__clz(v169 - 1);
          if (v169 >= 2)
            v169 = v171;
        }
        if (*(_QWORD *)&v162 <= v169)
          v162 = (int8x8_t)v169;
        if (*(_QWORD *)&v162 >= v152)
        {
          v152 = *((_QWORD *)&v601 + 1);
        }
        else
        {
          if (v162)
          {
LABEL_255:
            if (*(_QWORD *)&v162 >> 61)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v163 = operator new(8 * *(_QWORD *)&v162);
            v164 = (void *)v601;
            *(_QWORD *)&v601 = v163;
            if (v164)
              operator delete(v164);
            v165 = 0;
            *((int8x8_t *)&v601 + 1) = v162;
            do
              *(_QWORD *)(v601 + 8 * v165++) = 0;
            while (*(_QWORD *)&v162 != v165);
            v166 = (_QWORD **)v602;
            if ((_QWORD)v602)
            {
              v167 = *(_QWORD *)(v602 + 8);
              v168 = (uint8x8_t)vcnt_s8(v162);
              v168.i16[0] = vaddlv_u8(v168);
              if (v168.u32[0] > 1uLL)
              {
                if (v167 >= *(_QWORD *)&v162)
                  v167 %= *(_QWORD *)&v162;
              }
              else
              {
                v167 &= *(_QWORD *)&v162 - 1;
              }
              *(_QWORD *)(v601 + 8 * v167) = v517;
              for (j = *v166; j; v167 = v173)
              {
                v173 = j[1];
                if (v168.u32[0] > 1uLL)
                {
                  if (v173 >= *(_QWORD *)&v162)
                    v173 %= *(_QWORD *)&v162;
                }
                else
                {
                  v173 &= *(_QWORD *)&v162 - 1;
                }
                if (v173 != v167)
                {
                  if (!*(_QWORD *)(v601 + 8 * v173))
                  {
                    *(_QWORD *)(v601 + 8 * v173) = v166;
                    goto LABEL_280;
                  }
                  *v166 = (_QWORD *)*j;
                  *j = **(_QWORD **)(v601 + 8 * v173);
                  **(_QWORD **)(v601 + 8 * v173) = j;
                  j = v166;
                }
                v173 = v167;
LABEL_280:
                v166 = (_QWORD **)j;
                j = (_QWORD *)*j;
              }
            }
            v152 = (unint64_t)v162;
            goto LABEL_284;
          }
          v232 = (void *)v601;
          *(_QWORD *)&v601 = 0;
          if (v232)
            operator delete(v232);
          v152 = 0;
          *((_QWORD *)&v601 + 1) = 0;
        }
      }
LABEL_284:
      if ((v152 & (v152 - 1)) != 0)
      {
        if (v152 <= v82)
          v154 = v82 % v152;
        else
          v154 = v82;
      }
      else
      {
        v154 = ((_DWORD)v152 - 1) & v82;
      }
      goto LABEL_289;
    }
    if (!v94)
      goto LABEL_452;
LABEL_124:
    LODWORD(v535) = v85;
    v525 = (__int128 *)v82;
    v623 = 1065353216;
    buf = 0u;
    v622 = 0u;
    v86 = (_QWORD *)*v83;
    if (*v83)
    {
      v87 = 0;
      v88 = 0;
      v89 = 0;
      do
      {
        ++v88;
        for (k = (uint64_t *)v86[3]; k; k = (uint64_t *)*k)
        {
          v91 = *((_DWORD *)k + 3);
          v29 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(&buf, v91);
          if (!v29)
          {
            v92 = *((_DWORD *)k + 2);
            v29 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)&buf, v91, (_DWORD *)k + 3);
            *((_DWORD *)v29 + 5) = v92;
            ++v87;
            ++v88;
          }
          ++v87;
        }
        ++v89;
        ++v87;
        v86 = (_QWORD *)*v86;
      }
      while (v86);
    }
    else
    {
      v89 = 0;
      v88 = 0;
      v87 = 0;
    }
    for (m = (uint64_t *)v83[1]; m; m = (uint64_t *)*m)
    {
      v98 = *((_DWORD *)m + 3);
      v29 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(&buf, v98);
      if (!v29)
      {
        v99 = *((_DWORD *)m + 2);
        v29 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)&buf, v98, (_DWORD *)m + 3);
        *((_DWORD *)v29 + 5) = v99;
        ++v87;
        ++v88;
      }
      ++v87;
    }
    if ((unint64_t)(v88 - 1) >= 0x3FFFFFFFFFFFFFFFLL)
    {
      v101 = 0;
    }
    else
    {
      v100 = (malloc_zone_t *)get_malloc_zone();
      v29 = malloc_type_zone_malloc(v100, 4 * v88, 0x8BB15036uLL);
      v101 = v29;
    }
    if ((unint64_t)(v87 - 1) > 0x3FFFFFFFFFFFFFFELL)
    {
      v103 = 0;
    }
    else
    {
      v102 = (malloc_zone_t *)get_malloc_zone();
      v29 = malloc_type_zone_malloc(v102, 4 * v87, 0x8BB15036uLL);
      v103 = v29;
    }
    v104 = (uint64_t *)v622;
    if ((_QWORD)v622)
    {
      v105 = 0;
      do
      {
        v101[v89 + v105] = *((_DWORD *)v104 + 5);
        v103[v105++] = *((_DWORD *)v104 + 4);
        v104 = (uint64_t *)*v104;
      }
      while (v104);
    }
    else
    {
      v105 = 0;
    }
    v106 = (_QWORD *)*v83;
    if (*v83)
    {
      v107 = 0;
      do
      {
        v101[v107] = *((_DWORD *)v106 + 2);
        for (n = (uint64_t *)v106[3]; n; n = (uint64_t *)*n)
          v103[v105++] = *((_DWORD *)n + 3);
        v109 = v105 + 1;
        v103[v105] = 0;
        ++v107;
        v106 = (_QWORD *)*v106;
        ++v105;
      }
      while (v106);
    }
    else
    {
      v109 = v105;
    }
    v110 = (uint64_t *)v83[1];
    if (v110)
    {
      v111 = &v103[v109];
      do
      {
        *v111++ = *((_DWORD *)v110 + 3);
        v110 = (uint64_t *)*v110;
      }
      while (v110);
    }
    CA::work_around_59853502((CA *)v29);
    v112 = (_OWORD *)v523;
    *(_DWORD *)(v523 + 112) = 0;
    v112[5] = 0u;
    v112[6] = 0u;
    v112[3] = 0u;
    v112[4] = 0u;
    v112[1] = 0u;
    v112[2] = 0u;
    *v112 = 0u;
    *(_QWORD *)&v618[28] = v101;
    *(_DWORD *)&v618[24] = 2;
    *(_DWORD *)&v618[36] = 34799616;
    *(_QWORD *)&v618[44] = v103;
    *(_QWORD *)&v618[60] = *MEMORY[0x1E0C804E8];
    *(_DWORD *)&v618[40] = v88;
    *(_DWORD *)&v618[52] = 16777472;
    *(_DWORD *)&v618[56] = 4 * v87;
    *(_DWORD *)&v618[68] = v89;
    *(_DWORD *)&v618[72] = v88;
    *(_DWORD *)&v618[76] = v87;
    v618[80] = v529;
    v113 = v522;
    *(_WORD *)v522 = 0;
    *((_BYTE *)v113 + 2) = 0;
    reply_port = mig_get_reply_port();
    *(_DWORD *)&v618[12] = reply_port;
    *(_DWORD *)v618 = -2147478253;
    *(_DWORD *)&v618[8] = v535;
    *(_QWORD *)&v618[16] = 0x9D1100000000;
    if (MEMORY[0x1E0C85B60])
    {
      voucher_mach_msg_set((mach_msg_header_t *)v618);
      reply_port = *(_DWORD *)&v618[12];
    }
    v115 = mach_msg((mach_msg_header_t *)v618, 3, 0x54u, 0x78u, reply_port, 0, 0);
    v116 = v115;
    if ((v115 - 268435458) > 0xE || ((1 << (v115 - 2)) & 0x4003) == 0)
    {
      if ((_DWORD)v115)
      {
        mig_dealloc_reply_port(*(mach_port_t *)&v618[12]);
        goto LABEL_170;
      }
      if (*(_DWORD *)&v618[20] == 71)
      {
        v116 = 4294966988;
      }
      else if (*(_DWORD *)&v618[20] == 40309)
      {
        if ((*(_DWORD *)v618 & 0x80000000) != 0)
        {
          v116 = 4294966996;
          if (*(_DWORD *)&v618[24] != 4 || *(_DWORD *)&v618[4] != 112 || *(_DWORD *)&v618[8])
            goto LABEL_449;
          if (v618[39] == 1
            && v618[55] == 1
            && *(unsigned __int16 *)&v618[70] << 16 == 0x100000
            && *(unsigned __int16 *)&v618[82] << 16 == 1114112)
          {
            v116 = *(_DWORD *)&v618[40] >> 3;
            if (__PAIR64__(*(_DWORD *)&v618[56] >> 2, v116) == *(_QWORD *)&v618[92])
            {
              *(_QWORD *)&v518 = v101;
              LODWORD(v534) = *(_DWORD *)&v618[56] >> 2;
              *(_QWORD *)&v535 = *(_QWORD *)&v618[28];
              v121 = *(_QWORD *)&v618[44];
              v122 = *(_DWORD *)&v618[60];
              v123 = *(_DWORD *)&v618[72];
              v124 = v618[100];
              v125 = *(_QWORD *)&v618[104];
              goto LABEL_190;
            }
          }
        }
        else if (*(_DWORD *)&v618[4] == 36 && *(_DWORD *)&v618[32])
        {
          if (*(_DWORD *)&v618[8])
            v116 = 4294966996;
          else
            v116 = *(unsigned int *)&v618[32];
          goto LABEL_449;
        }
        v116 = 4294966996;
      }
      else
      {
        v116 = 4294966995;
      }
LABEL_449:
      mach_msg_destroy((mach_msg_header_t *)v618);
      goto LABEL_170;
    }
    mig_put_reply_port(*(mach_port_t *)&v618[12]);
    if (!(_DWORD)v116)
    {
      *(_QWORD *)&v518 = v101;
      v121 = 0;
      *(_QWORD *)&v535 = 0;
      LODWORD(v534) = v116;
      v122 = v116;
      v123 = v116;
      v124 = v116;
      v125 = v116;
LABEL_190:
      v126 = (malloc_zone_t *)get_malloc_zone();
      v96 = malloc_type_zone_malloc(v126, 0x28uLL, 0x8BB15036uLL);
      *v96 = 0;
      v96[1] = 0;
      *((_DWORD *)v96 + 4) = v122;
      *((_DWORD *)v96 + 5) = v123;
      *((_BYTE *)v96 + 24) = v124 != 0;
      *((_BYTE *)v96 + 25) = v529;
      v127 = v534;
      v96[4] = v125;
      v534 = (void ***)v127;
      if ((_DWORD)v116)
      {
        v128 = v116;
        v129 = 0;
        v130 = 0;
        v131 = (char *)(v127 - 1);
        v514 = v128;
        v532 = v128;
        do
        {
          v132 = (malloc_zone_t *)get_malloc_zone();
          v133 = malloc_type_zone_malloc(v132, 0x20uLL, 0x8BB15036uLL);
          *(_QWORD *)v133 = *v96;
          v133[2] = 0;
          *((_QWORD *)v133 + 2) = *(_QWORD *)(v535 + 8 * (_QWORD)v129);
          *((_QWORD *)v133 + 3) = 0;
          if (v130 < v127 && *(_DWORD *)(v121 + 4 * v130))
          {
            do
            {
              v134 = v130;
              v135 = (malloc_zone_t *)get_malloc_zone();
              v136 = malloc_type_zone_malloc(v135, 0x18uLL, 0x8BB15036uLL);
              *(_QWORD *)v136 = *((_QWORD *)v133 + 3);
              v136[2] = 0;
              v136[3] = *(_DWORD *)(v121 + 4 * v130);
              *((_QWORD *)v136 + 2) = 0;
              *((_QWORD *)v133 + 3) = v136;
              if (v131 == (char *)v130)
                break;
            }
            while (*(_DWORD *)(v121 + 4 * v130++ + 4));
            v130 = v134 + 1;
          }
          ++v130;
          *v96 = v133;
          v129 = (_QWORD *)((char *)v129 + 1);
          v127 = (unint64_t)v534;
        }
        while (v129 != (_QWORD *)v532);
        LODWORD(v116) = v514;
        v138 = v514;
      }
      else
      {
        v138 = 0;
        v130 = 0;
      }
      if (v130 < v127)
      {
        if (*(_DWORD *)(v121 + 4 * v130))
        {
          v139 = (char *)(~v130 + v127);
          v140 = (int *)(v121 + 4 * v130 + 4);
          do
          {
            v141 = (malloc_zone_t *)get_malloc_zone();
            v142 = malloc_type_zone_malloc(v141, 0x18uLL, 0x8BB15036uLL);
            *(_QWORD *)v142 = v96[1];
            v142[2] = 0;
            v142[3] = *(v140 - 1);
            *((_QWORD *)v142 + 2) = 0;
            v96[1] = v142;
            if (!v139)
              break;
            v143 = *v140++;
            --v139;
          }
          while (v143);
          v138 = v116;
          v127 = (unint64_t)v534;
        }
        else
        {
          v138 = v116;
        }
      }
      v101 = (_DWORD *)v518;
      if ((_QWORD)v535 && v138)
        mach_vm_deallocate(*MEMORY[0x1E0C83DA0], v535, (*MEMORY[0x1E0C85AD8] + 8 * v138 - 1) & -*MEMORY[0x1E0C85AD8]);
      if (v121 && (_DWORD)v127)
        mach_vm_deallocate(*MEMORY[0x1E0C83DA0], v121, (*MEMORY[0x1E0C85AD8] + 4 * v127 - 1) & -*MEMORY[0x1E0C85AD8]);
      goto LABEL_215;
    }
LABEL_170:
    if ((_DWORD)v116 == 268435459)
    {
      *(_BYTE *)(v566 + 241) |= 2u;
    }
    else if ((_DWORD)v116 == -81182719)
    {
LABEL_1001:
      x_log_crash("Unentitled call to server!", (_QWORD)v512);
      abort();
    }
    if (x_log_hook_p())
    {
      v117 = *(unsigned int *)(v566 + 4);
      v509 = v116;
      v510 = mach_error_string(v116);
      v508 = v117;
      x_log_();
    }
    else
    {
      v118 = x_log_category_api;
      if (os_log_type_enabled((os_log_t)x_log_category_api, OS_LOG_TYPE_ERROR))
      {
        v119 = *(_DWORD *)(v566 + 4);
        v120 = mach_error_string(v116);
        *(_DWORD *)v618 = v512;
        *(_DWORD *)&v618[4] = v119;
        *(_WORD *)&v618[8] = 1024;
        *(_DWORD *)&v618[10] = v116;
        *(_WORD *)&v618[14] = 2080;
        *(_QWORD *)&v618[16] = v120;
        _os_log_impl(&dword_184457000, v118, OS_LOG_TYPE_ERROR, "apply fence tx failed (client=0x%x) [0x%x %s]", v618, 0x18u);
      }
    }
    v96 = 0;
LABEL_215:
    if (v101)
    {
      v144 = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(v144, v101);
    }
    v82 = (unint64_t)v525;
    if (v103)
    {
      v145 = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(v145, v103);
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)&buf);
    if (v96)
      goto LABEL_220;
LABEL_452:
    while (1)
    {
      v96 = (_QWORD *)*v83;
      if (!*v83)
        break;
      while (1)
      {
        v234 = (_QWORD *)v96[3];
        if (!v234)
          break;
        v235 = (unsigned int *)v234[2];
        if (v235)
        {
          v236 = v235 + 2;
          do
          {
            v237 = __ldaxr(v236);
            v238 = v237 - 1;
          }
          while (__stlxr(v238, v236));
          if (!v238)
            (*(void (**)(unsigned int *))(*(_QWORD *)v235 + 16))(v235);
        }
        v96[3] = *v234;
        v239 = (malloc_zone_t *)get_malloc_zone();
        malloc_zone_free(v239, v234);
      }
      *v83 = *v96;
LABEL_451:
      v233 = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(v233, v96);
    }
    while (1)
    {
      v245 = (_QWORD *)v83[1];
      if (!v245)
        break;
      v240 = (unsigned int *)v245[2];
      if (v240)
      {
        v241 = v240 + 2;
        do
        {
          v242 = __ldaxr(v241);
          v243 = v242 - 1;
        }
        while (__stlxr(v243, v241));
        if (!v243)
          (*(void (**)(unsigned int *))(*(_QWORD *)v240 + 16))(v240);
      }
      v83[1] = *v245;
      v244 = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(v244, v245);
    }
    v246 = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(v246, v83);
    v81 = *v528;
  }
  while (*v528);
  v247 = (_QWORD *)v585;
  if (!(_QWORD)v585)
  {
    kk = v533;
    goto LABEL_474;
  }
  kk = v533;
  v248 = (uint64_t **)v513;
  do
  {
    kdebug_trace();
    v247 = (_QWORD *)*v247;
  }
  while (v247);
LABEL_475:
  v249 = *((_QWORD *)kk + 13);
  v250 = *(_QWORD **)(v249 + 48);
  if (v250)
  {
    do
    {
      (*(void (**)(void))(*v250 + 16))();
      v250 = (_QWORD *)v250[1];
    }
    while (v250);
    CA::Transaction::free_batch_handlers_list(*(_QWORD **)(v249 + 48));
    *(_QWORD *)(v249 + 48) = 0;
  }
  for (ii = v531; v248; v248 = (uint64_t **)*v248)
    objc_msgSend(v248[1], "invalidate", v512);
  if (!*((_QWORD *)&v601 + 1))
    goto LABEL_582;
  v251 = *(void ***)v601;
  if (!*(_QWORD *)v601)
    goto LABEL_582;
  v252 = (__int128 *)*v251;
  if (!*v251)
    goto LABEL_582;
  v253 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v601 + 8));
  v253.i16[0] = vaddlv_u8(v253);
  while (2)
  {
    v254 = *((_QWORD *)v252 + 1);
    if (v254)
    {
      if (v253.u32[0] > 1uLL)
      {
        if (v254 < *((_QWORD *)&v601 + 1) || v254 % *((_QWORD *)&v601 + 1))
          goto LABEL_582;
      }
      else if ((v254 & (*((_QWORD *)&v601 + 1) - 1)) != 0)
      {
        goto LABEL_582;
      }
      goto LABEL_492;
    }
    if (*((_DWORD *)v252 + 4))
    {
LABEL_492:
      v252 = *(__int128 **)v252;
      if (!v252)
        goto LABEL_582;
      continue;
    }
    break;
  }
  v255 = *((_QWORD *)v252 + 3);
  v256 = *((_QWORD *)&v598 + 1);
  if (*((_QWORD *)&v598 + 1))
  {
    v257 = *(void ***)v598;
    if (*(_QWORD *)v598)
    {
      v258 = (char *)*v257;
      if (*v257)
      {
        v259 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v598 + 8));
        v259.i16[0] = vaddlv_u8(v259);
        do
        {
          v260 = *((_QWORD *)v258 + 1);
          if (v260)
          {
            if (v259.u32[0] > 1uLL)
            {
              if (v260 < *((_QWORD *)&v598 + 1))
                break;
              v261 = v260 % *((_QWORD *)&v598 + 1);
            }
            else
            {
              v261 = v260 & (*((_QWORD *)&v598 + 1) - 1);
            }
            if (v261)
              break;
          }
          else if (!*((_DWORD *)v258 + 4))
          {
            goto LABEL_525;
          }
          v258 = *(char **)v258;
        }
        while (v258);
      }
    }
  }
  *(_QWORD *)&v618[16] = 1;
  v258 = (char *)operator new(0x40uLL);
  *(_QWORD *)v618 = v258;
  *(_QWORD *)&v618[8] = &v599;
  *(_OWORD *)(v258 + 24) = 0u;
  *(_OWORD *)(v258 + 40) = 0u;
  *(_QWORD *)v258 = 0;
  *((_QWORD *)v258 + 1) = 0;
  *((_DWORD *)v258 + 4) = 0;
  *((_DWORD *)v258 + 14) = 1065353216;
  v262 = (float)(unint64_t)(*((_QWORD *)&v599 + 1) + 1);
  if (!v256 || (float)(*(float *)&v600 * (float)v256) < v262)
  {
    v263 = 1;
    if (v256 >= 3)
      v263 = (v256 & (v256 - 1)) != 0;
    v264 = v263 | (2 * v256);
    v265 = vcvtps_u32_f32(v262 / *(float *)&v600);
    if (v264 <= v265)
      v266 = v265;
    else
      v266 = v264;
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::__rehash<true>((uint64_t)&v598, v266);
    v256 = *((_QWORD *)&v598 + 1);
  }
  v267 = (_QWORD *)v598;
  v268 = *(_QWORD **)v598;
  if (*(_QWORD *)v598)
  {
    *(_QWORD *)v258 = *v268;
    goto LABEL_523;
  }
  *(_QWORD *)v258 = v599;
  *(_QWORD *)&v599 = v258;
  *v267 = &v599;
  if (*(_QWORD *)v258)
  {
    v269 = *(_QWORD *)(*(_QWORD *)v258 + 8);
    if ((v256 & (v256 - 1)) != 0)
    {
      if (v269 >= v256)
        v269 %= v256;
    }
    else
    {
      v269 &= v256 - 1;
    }
    v268 = (_QWORD *)(v598 + 8 * v269);
LABEL_523:
    *v268 = v258;
  }
  *(_QWORD *)v618 = 0;
  ++*((_QWORD *)&v599 + 1);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long long>>,void *>>>>::reset[abi:nn180100]((uint64_t)v618);
LABEL_525:
  ii = v531;
  if (*((_QWORD *)v258 + 6))
  {
    v583 = 1065353216;
    v582 = 0u;
    v581 = 0u;
    os_unfair_lock_lock((os_unfair_lock_t)v255);
    if (!*(_BYTE *)(v255 + 28))
      __assert_rtn("activate_and_wait", "render-fence.cpp", 442, "_has_receive_right");
    kdebug_trace();
    v270 = 0.0;
    while (1)
    {
      v619 = 0u;
      v620 = 0u;
      memset(v618, 0, sizeof(v618));
      v271 = (char *)mach_msg((mach_msg_header_t *)v618, 258, 0, 0x90u, *(_DWORD *)(v255 + 24), 0x1F4u, 0);
      if ((_DWORD)v271)
        break;
      v623 = 1065353216;
      buf = 0u;
      v622 = 0u;
      v572 = 0.0;
      v571 = 0;
      if (CA::Render::Fence::extract_msg((uint64_t)v618, 0x90uLL, (uint64_t)&buf, &v572, &v571, &v570, 0, 0))
      {
        if (*(_DWORD *)&v618[20] == 1919772259)
        {
          v270 = 0.0;
          LODWORD(v271) = 1;
        }
        else if (*(_DWORD *)&v618[20] == 1919706727)
        {
          for (jj = (_QWORD *)v622; jj; jj = (_QWORD *)*jj)
            std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__erase_unique<unsigned long long>((_QWORD *)v258 + 3, jj[2]);
          if (v572 > v270)
            v270 = v572;
          v273 = v571;
          if (v571 - 1 < 0xFFFFFFFE
            && !std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(&v581, v571))
          {
            std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)&v581, v273, v273);
            *(_DWORD *)&v618[44] = 0;
          }
          LODWORD(v271) = *((_QWORD *)v258 + 6) == 0;
        }
        else
        {
          LODWORD(v271) = 0;
        }
      }
      mach_msg_destroy((mach_msg_header_t *)v618);
      std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)&buf);
      if ((_DWORD)v271)
        goto LABEL_548;
    }
    if (x_log_hook_p())
    {
      v510 = v271;
      x_log_();
    }
    else
    {
      v274 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 67109120;
        DWORD1(buf) = (_DWORD)v271;
        _os_log_impl(&dword_184457000, v274, OS_LOG_TYPE_DEFAULT, "failed to wait for fence tx reply: %x\n", (uint8_t *)&buf, 8u);
      }
    }
LABEL_548:
    kdebug_trace();
    os_unfair_lock_unlock((os_unfair_lock_t)v255);
    if (*((double *)&v566 + 1) == 0.0)
      *((double *)&v566 + 1) = v270;
    v275 = (uint64_t *)v582;
    for (kk = v533; v275; v275 = (uint64_t *)*v275)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], *((_DWORD *)v275 + 4));
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)&v581);
    ii = v531;
  }
  if (v255)
  {
    CA::Render::Fence::Transaction::Observer::~Observer((CA::Render::Fence::Transaction::Observer *)v255);
    MEMORY[0x186DBD990]();
  }
  v276 = *((_QWORD *)&v601 + 1);
  v277 = *((_QWORD *)v252 + 1);
  v278 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v601 + 8));
  v278.i16[0] = vaddlv_u8(v278);
  if (v278.u32[0] > 1uLL)
  {
    if (v277 >= *((_QWORD *)&v601 + 1))
      v277 %= *((_QWORD *)&v601 + 1);
  }
  else
  {
    v277 &= *((_QWORD *)&v601 + 1) - 1;
  }
  v279 = *(__int128 **)(v601 + 8 * v277);
  do
  {
    v280 = v279;
    v279 = *(__int128 **)v279;
  }
  while (v279 != v252);
  if (v280 == &v602)
    goto LABEL_572;
  v281 = *((_QWORD *)v280 + 1);
  if (v278.u32[0] > 1uLL)
  {
    if (v281 >= *((_QWORD *)&v601 + 1))
      v281 %= *((_QWORD *)&v601 + 1);
  }
  else
  {
    v281 &= *((_QWORD *)&v601 + 1) - 1;
  }
  if (v281 != v277)
  {
LABEL_572:
    if (!*(_QWORD *)v252)
      goto LABEL_573;
    v282 = *(_QWORD *)(*(_QWORD *)v252 + 8);
    if (v278.u32[0] > 1uLL)
    {
      if (v282 >= *((_QWORD *)&v601 + 1))
        v282 %= *((_QWORD *)&v601 + 1);
    }
    else
    {
      v282 &= *((_QWORD *)&v601 + 1) - 1;
    }
    if (v282 != v277)
LABEL_573:
      *(_QWORD *)(v601 + 8 * v277) = 0;
  }
  v283 = *(__int128 **)v252;
  if (*(_QWORD *)v252)
  {
    v284 = *((_QWORD *)v283 + 1);
    if (v278.u32[0] > 1uLL)
    {
      if (v284 >= v276)
        v284 %= v276;
    }
    else
    {
      v284 &= v276 - 1;
    }
    if (v284 != v277)
    {
      *(_QWORD *)(v601 + 8 * v284) = v280;
      v283 = *(__int128 **)v252;
    }
  }
  *(_QWORD *)v280 = v283;
  *(_QWORD *)v252 = 0;
  --*((_QWORD *)&v602 + 1);
  operator delete(v252);
LABEL_582:
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)&v584);
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)&v604);
  std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>>>::~__hash_table((uint64_t)&v609);
  v36 = v520 & 1;
LABEL_583:
  CA::Transaction::run_commit_handlers((uint64_t)kk, 1);
  v285 = *((_QWORD *)kk + 13);
  if (*(_QWORD *)(v285 + 16))
  {
    v286 = *(_QWORD **)(v285 + 16);
    if (v286)
    {
      v287 = 0;
      do
      {
        v288 = v286;
        v286 = (_QWORD *)*v286;
        *v288 = v287;
        v287 = v288;
      }
      while (v286);
    }
    else
    {
      v288 = 0;
    }
    *((_QWORD *)kk + 2) = v288;
    *(_QWORD *)(v285 + 16) = 0;
  }
  objc_autoreleasePoolPop(v516);
  v289 = mach_absolute_time();
  v290 = CATimeWithHostTime(v289);
  v291 = *((double *)&v566 + 1);
  if (v11 != 0.0)
  {
    if (*((double *)&v566 + 1) <= v290)
      v291 = v290;
    *((double *)&v566 + 1) = v291;
  }
  v561 = 0.0;
  if (v291 == 0.0)
  {
    CA::Transaction::get_value(*((_QWORD *)kk + 11), 188, (const CGAffineTransform *)0x12, (CA::Mat4Impl *)&v561);
    v618[0] = 0;
    if (pthread_main_np())
      CA::Transaction::get_value(*((_QWORD *)kk + 11), 357, (const CGAffineTransform *)7, (CA::Mat4Impl *)v618);
    if (v618[0])
      v292 = 1;
    else
      v292 = v36;
    if ((v292 & 1) != 0
      || (v293 = *(double *)(*((_QWORD *)kk + 13) + 176), v293 == 0.0)
      || (v294 = v293 + 0.001, v294 <= v290))
    {
      v294 = v561;
      if (v290 > v561)
        v294 = v290;
    }
    else if (v294 <= v561)
    {
      v294 = v561;
    }
    *((double *)&v566 + 1) = v294;
  }
  if (CA::Transaction::get_value(*((_QWORD *)kk + 11), 189, (const CGAffineTransform *)0x12, (CA::Mat4Impl *)&v561))
  {
    v296 = *((double *)&v566 + 1);
    if (*((double *)&v566 + 1) <= v561)
      v296 = v561;
    *((double *)&v566 + 1) = v296;
  }
  if (!v563)
  {
    LODWORD(v297) = 0;
    LODWORD(v528) = 0;
    v524 = 0;
    goto LABEL_907;
  }
  v525 = 0;
  v524 = 0;
  LODWORD(v528) = 0;
  v297 = 0;
  v298 = 0;
  v530 = (__int128 *)((char *)&v567 + 8);
  v299 = v290 - a3;
  v522 = (CFAllocatorRef)*MEMORY[0x1E0C9AE00];
  v523 = ii;
  v520 = (uint64_t *)&v595;
  *(_QWORD *)&v295 = 67109634;
  v518 = v295;
  v521 = xmmword_18474E3E0;
  v531 = ii;
  while (2)
  {
    *(_QWORD *)&v566 = v536[v298];
    v300 = v566;
    LOBYTE(v569) = 0;
    v301 = v530;
    *(_QWORD *)v530 = 0;
    *((_QWORD *)v301 + 1) = 0;
    v302 = (_QWORD *)*(unsigned int *)(v300 + 4);
    LODWORD(v604) = *(_DWORD *)(v300 + 8);
    v303 = *(_BYTE *)(*((_QWORD *)kk + 13) + 204);
    v532 = (unint64_t)v302;
    if ((v303 & 0x20) == 0)
    {
      kdebug_trace();
      v300 = v566;
    }
    v304 = (pthread_mutex_t *)(v300 + 16);
    pthread_mutex_lock((pthread_mutex_t *)(v300 + 16));
    v308 = v566;
    *((_QWORD *)kk + 5) = v566;
    *(_QWORD *)(v308 + 208) = &v565;
    v309 = *((_DWORD *)kk + 25);
    *((_DWORD *)kk + 25) = v309 + 1;
    if (!v309)
    {
      os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
      v308 = v566;
    }
    v310 = *(CA::Render::Context **)(v308 + 104);
    if (v310)
    {
      *(_QWORD *)&v568 = *(_QWORD *)(v308 + 104);
      CA::Render::Context::will_commit(v310);
      v308 = v566;
    }
    if (!*(_DWORD *)(v308 + 160) || (*(_BYTE *)(v308 + 241) & 2) != 0)
    {
      v534 = 0;
      *(_QWORD *)&v535 = 0;
      goto LABEL_679;
    }
    v311 = v604;
    v312 = std::__hash_table<std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>>>::find<unsigned int>(v597[0], v597[1], v604);
    v313 = v312;
    if (v312)
    {
      if (v312[6])
      {
        v314 = operator new();
        std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__hash_table(v314, v313 + 3);
        LODWORD(v313) = 1;
        LODWORD(v529) = ii;
      }
      else
      {
        LODWORD(v529) = 0;
        v314 = 0;
        LODWORD(v313) = 0;
      }
    }
    else
    {
      LODWORD(v529) = 0;
      v314 = 0;
    }
    os_unfair_lock_lock(&CA::Context::_deferred_lock);
    if ((v313 & 1) != 0 || !CA::Context::_deferred_by_lid)
    {
      if ((_DWORD)v313)
        goto LABEL_632;
      goto LABEL_639;
    }
    if (!std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((_QWORD *)CA::Context::_deferred_by_lid, v311))
    {
LABEL_639:
      os_unfair_lock_unlock(&CA::Context::_deferred_lock);
      v321 = v525;
      if (!v525)
      {
        MEMORY[0x1E0C80A78](v320);
        v321 = &v512 - 2048;
        bzero(&v512 - 2048, 0x8000uLL);
      }
      *(_QWORD *)v321 = 0;
      *((_QWORD *)v321 + 1) = v321 + 2;
      v321[1] = v521;
      v322 = x_heap_malloc_small_((uint64_t *)v321, 0x78uLL);
      CA::Render::Encoder::Encoder(v322, (uint64_t)v321, 0, v532, *((double *)&v566 + 1));
      v534 = (void ***)v321;
      *(_QWORD *)&v535 = 0;
      v525 = v321;
      goto LABEL_674;
    }
LABEL_632:
    v315 = (malloc_zone_t *)get_malloc_zone();
    v316 = malloc_type_zone_malloc(v315, 0x30uLL, 0x8BB15036uLL);
    v316[1] = 0;
    v316[2] = v314;
    *((_BYTE *)v316 + 44) = 0;
    *(_QWORD *)&v535 = v316;
    *v316 = 0;
    v317 = CA::Context::_deferred_by_lid;
    if (!CA::Context::_deferred_by_lid)
    {
      v317 = operator new();
      *(_OWORD *)v317 = 0u;
      *(_OWORD *)(v317 + 16) = 0u;
      *(_DWORD *)(v317 + 32) = 1065353216;
      CA::Context::_deferred_by_lid = v317;
    }
    v318 = (_QWORD *)std::__hash_table<std::__hash_value_type<unsigned int,CA::Context::DeferredCommit *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,CA::Context::DeferredCommit *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,CA::Context::DeferredCommit *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,CA::Context::DeferredCommit *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((float *)v317, v311, &v604)[3];
    while (v318)
    {
      v319 = v318;
      v318 = (_QWORD *)*v318;
      if (!v318)
        goto LABEL_643;
    }
    v319 = std::__hash_table<std::__hash_value_type<unsigned int,CA::Context::DeferredCommit *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,CA::Context::DeferredCommit *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,CA::Context::DeferredCommit *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,CA::Context::DeferredCommit *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((float *)CA::Context::_deferred_by_lid, v311, &v604)+ 3;
LABEL_643:
    *v319 = v535;
    os_unfair_lock_unlock(&CA::Context::_deferred_lock);
    v323 = (malloc_zone_t *)get_malloc_zone();
    v324 = malloc_type_zone_malloc(v323, 0xC0uLL, 0x8BB15036uLL);
    v322 = (uint64_t)v324;
    if (v324)
    {
      CA::Render::Encoder::Encoder((uint64_t)v324, 0, 2, v532, *((double *)&v566 + 1));
      *(_QWORD *)v322 = off_1E15976C0;
      *(_OWORD *)(v322 + 120) = 0u;
      *(_OWORD *)(v322 + 136) = 0u;
      *(_OWORD *)(v322 + 152) = 0u;
      *(_QWORD *)(v322 + 168) = 0;
      *(_DWORD *)(v322 + 176) = 1065353216;
      *(_QWORD *)(v322 + 184) = 0;
    }
    v325 = v303;
    v326 = std::__hash_table<std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((float *)&v594, v311, &v604)[3];
    v327 = v594;
    v328 = std::__hash_table<std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>>>::find<unsigned int>(v594, *((unint64_t *)&v594 + 1), v311);
    if (v328)
    {
      v329 = v328[1];
      v330 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v327 + 8));
      v330.i16[0] = vaddlv_u8(v330);
      if (v330.u32[0] > 1uLL)
      {
        if (v329 >= *((_QWORD *)&v327 + 1))
          v329 %= *((_QWORD *)&v327 + 1);
      }
      else
      {
        v329 &= *((_QWORD *)&v327 + 1) - 1;
      }
      v331 = *(uint64_t **)(v327 + 8 * v329);
      do
      {
        v332 = v331;
        v331 = (uint64_t *)*v331;
      }
      while (v331 != v328);
      if (v332 == v520)
        goto LABEL_663;
      v333 = v332[1];
      if (v330.u32[0] > 1uLL)
      {
        if (v333 >= *((_QWORD *)&v327 + 1))
          v333 %= *((_QWORD *)&v327 + 1);
      }
      else
      {
        v333 &= *((_QWORD *)&v327 + 1) - 1;
      }
      if (v333 != v329)
      {
LABEL_663:
        if (!*v328)
          goto LABEL_664;
        v334 = *(_QWORD *)(*v328 + 8);
        if (v330.u32[0] > 1uLL)
        {
          if (v334 >= *((_QWORD *)&v327 + 1))
            v334 %= *((_QWORD *)&v327 + 1);
        }
        else
        {
          v334 &= *((_QWORD *)&v327 + 1) - 1;
        }
        if (v334 != v329)
LABEL_664:
          *(_QWORD *)(v327 + 8 * v329) = 0;
      }
      v335 = *v328;
      if (*v328)
      {
        v336 = *(_QWORD *)(v335 + 8);
        if (v330.u32[0] > 1uLL)
        {
          if (v336 >= *((_QWORD *)&v327 + 1))
            v336 %= *((_QWORD *)&v327 + 1);
        }
        else
        {
          v336 &= *((_QWORD *)&v327 + 1) - 1;
        }
        if (v336 != v329)
        {
          *(_QWORD *)(v594 + 8 * v336) = v332;
          v335 = *v328;
        }
      }
      *v332 = v335;
      --*((_QWORD *)&v595 + 1);
      operator delete(v328);
    }
    v337 = (_DWORD *)v566;
    v338 = v535;
    *(_QWORD *)(v535 + 8) = v566;
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Context::_lock);
    ++*v337;
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Context::_lock);
    v534 = 0;
    *(_QWORD *)(v338 + 24) = v322;
    *(_QWORD *)(v338 + 32) = v326;
    v524 = 1;
    *(_DWORD *)(v338 + 40) = v529;
    kk = v533;
    v303 = v325;
LABEL_674:
    *((_QWORD *)&v567 + 1) = v322;
    v339 = (os_unfair_lock_s *)(v566 + 164);
    os_unfair_lock_lock((os_unfair_lock_t)(v566 + 164));
    v340 = *(CA::Render::Encoder::ObjectCache **)(v566 + 168);
    if (!v340)
    {
      v341 = (malloc_zone_t *)get_malloc_zone();
      v342 = (CA::Render::Encoder::ObjectCache *)malloc_type_zone_malloc(v341, 0x28uLL, 0x8BB15036uLL);
      v340 = v342;
      if (v342)
      {
        *(_DWORD *)v342 = 0;
        *((_QWORD *)v342 + 1) = x_hash_table_new_(0, 0, 0, 0, 0, 0);
        *((_QWORD *)v340 + 2) = 0;
        *((_QWORD *)v340 + 3) = 0;
        *((_QWORD *)v340 + 4) = 0;
        *(_DWORD *)v340 = 1;
        os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Encoder::ObjectCache::_lock);
        v343 = CA::Render::Encoder::ObjectCache::_cache_list;
        v344 = (malloc_zone_t *)get_malloc_zone();
        v345 = malloc_type_zone_malloc(v344, 0x10uLL, 0x8BB15036uLL);
        *v345 = v340;
        v345[1] = v343;
        CA::Render::Encoder::ObjectCache::_cache_list = (uint64_t)v345;
        os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Encoder::ObjectCache::_lock);
      }
      *(_QWORD *)(v566 + 168) = v340;
    }
    os_unfair_lock_unlock(v339);
    CA::Render::Encoder::set_object_cache(*((CA::Render::Encoder **)&v567 + 1), v340, 1);
    v308 = v566;
LABEL_679:
    v346 = *(_BYTE *)(v308 + 241);
    if ((v346 & 0x20) != 0)
    {
      v347 = *(CA::Render::Context **)(v308 + 104);
      if (v347)
      {
        CA::Render::Context::set_colorspace(v347, *(CGColorSpace **)(v308 + 112));
        v308 = v566;
      }
      v348 = (CA::Render::Encoder *)*((_QWORD *)&v567 + 1);
      if (*((_QWORD *)&v567 + 1))
      {
        v349 = *(CGColorSpace **)(v308 + 112);
        v350 = *(_BYTE **)(*((_QWORD *)&v567 + 1) + 32);
        if ((unint64_t)(v350 + 1) > *(_QWORD *)(*((_QWORD *)&v567 + 1) + 40))
        {
          CA::Render::Encoder::grow(*((CA::Render::Encoder **)&v567 + 1), 1);
          v350 = (_BYTE *)*((_QWORD *)v348 + 4);
        }
        *((_QWORD *)v348 + 4) = v350 + 1;
        *v350 = 9;
        CA::Render::Encoder::encode_colorspace(v348, v349);
        v308 = v566;
      }
      v346 = *(_BYTE *)(v308 + 241) & 0xDF;
      *(_BYTE *)(v308 + 241) = v346;
    }
    if ((v346 & 0x40) != 0)
    {
      v351 = *(const __CFString **)(v308 + 232);
      if (v351 && CFStringGetLength(*(CFStringRef *)(v308 + 232)) >= 256)
      {
        v631.location = 0;
        v631.length = 255;
        v351 = CFStringCreateWithSubstring(v522, v351, v631);
        v352 = 1;
      }
      else
      {
        v352 = 0;
      }
      v353 = *(CA::Render::Context **)(v566 + 104);
      if (v353)
        CA::Render::Context::set_client_annotation(v353, v351);
      v354 = (CA::Render::Encoder *)*((_QWORD *)&v567 + 1);
      if (*((_QWORD *)&v567 + 1))
      {
        v355 = *(_BYTE **)(*((_QWORD *)&v567 + 1) + 32);
        if ((unint64_t)(v355 + 1) > *(_QWORD *)(*((_QWORD *)&v567 + 1) + 40))
        {
          CA::Render::Encoder::grow(*((CA::Render::Encoder **)&v567 + 1), 1);
          v355 = (_BYTE *)*((_QWORD *)v354 + 4);
        }
        *((_QWORD *)v354 + 4) = v355 + 1;
        *v355 = 10;
        CA::Render::Encoder::encode_cfobject(v354, v351);
      }
      if (v352)
        CFRelease(v351);
      v308 = v566;
      *(_BYTE *)(v566 + 241) &= ~0x40u;
    }
    if (*((_QWORD *)&v567 + 1))
      *(_QWORD *)(*((_QWORD *)&v567 + 1) + 80) = *(_QWORD *)(v308 + 112);
    v356 = v604;
    for (mm = (uint64_t *)*((_QWORD *)kk + 3); mm; mm = (uint64_t *)*mm)
    {
      v358 = *((_DWORD *)mm + 5);
      if (v358)
        v359 = v358 == v356;
      else
        v359 = 1;
      if (v359)
      {
        v360 = (CA::Render::Encoder *)mm[1];
        v361 = *((_DWORD *)mm + 4);
        if ((_QWORD)v568)
          CA::Render::Context::delete_object((CA::Render::Context *)v568, (CA::Render::Object *)mm[1], *((_DWORD *)mm + 4));
        if (*((_QWORD *)&v567 + 1))
          CA::Render::encode_delete_object(*((CA::Render::Encoder **)&v567 + 1), v360, v361);
      }
    }
    for (nn = (uint64_t *)*((_QWORD *)kk + 2); nn; nn = (uint64_t *)*nn)
    {
      v363 = *((_DWORD *)nn + 8);
      if (v363)
        v364 = v363 == v356;
      else
        v364 = 1;
      if (v364)
        CA::Context::commit_command((CA::Context *)*((unsigned int *)nn + 2), (CA::Render::Encoder *)nn[2], (__CFString *)nn[3], &v565, v305);
    }
    v365 = *(_QWORD *)(v566 + 96);
    if (v365)
      v366 = *(_QWORD *)(v365 + 16);
    else
      v366 = 0;
    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = &buf;
    *(_QWORD *)&v622 = 0x2020000000;
    DWORD2(v622) = 0;
    v560[0] = MEMORY[0x1E0C809B0];
    v560[1] = 3221225472;
    v560[2] = ___ZN2CA7Context18commit_transactionEPNS_11TransactionEdPd_block_invoke;
    v560[3] = &unk_1E159DD98;
    v560[4] = &buf;
    v560[5] = &v565;
    if (v366)
      CA::Layer::commit_if_needed(v366, (unsigned int *)kk, (uint64_t)v560);
    v554[0] = MEMORY[0x1E0C809B0];
    v554[1] = 3221225472;
    v555 = ___ZN2CA7Context18commit_transactionEPNS_11TransactionEdPd_block_invoke_2;
    v556 = &unk_1E159DDC0;
    v559 = v356;
    v557 = v560;
    v558 = kk;
    v367 = *((_QWORD *)kk + 6);
    if (!v367)
    {
LABEL_741:
      if (!v366)
        goto LABEL_743;
      goto LABEL_742;
    }
    v368 = 0;
    *((_QWORD *)kk + 6) = 0;
    v369 = 1 << *(_DWORD *)v367;
    do
    {
      for (i1 = *(_QWORD **)(*(_QWORD *)(v367 + 16) + 8 * v368); i1; i1 = (_QWORD *)*i1)
      {
        if (*(_QWORD *)(i1[2] + 16))
          ((void (*)(_QWORD *))v555)(v554);
      }
      ++v368;
    }
    while (v368 != v369);
    kk = v533;
    v371 = *((_QWORD *)v533 + 6);
    if (v371)
    {
      v529 = v298;
      v372 = v304;
      v373 = v297;
      v374 = v303;
      v375 = 0;
      v376 = 1 << *(_DWORD *)v371;
      do
      {
        for (i2 = *(_QWORD **)(*(_QWORD *)(v371 + 16) + 8 * v375); i2; i2 = (_QWORD *)*i2)
          hash_table_modify((int *)v367, i2[2], i2[3], 0);
        ++v375;
      }
      while (v375 != v376);
      kk = v533;
      v378 = (_QWORD *)*((_QWORD *)v533 + 6);
      *((_QWORD *)v533 + 6) = v367;
      v303 = v374;
      v297 = v373;
      v304 = v372;
      v298 = v529;
      if (v378)
        x_hash_table_free(v378);
      goto LABEL_741;
    }
    *((_QWORD *)v533 + 6) = v367;
    if (v366)
    {
LABEL_742:
      v306.i64[0] = *((_QWORD *)&v566 + 1);
      *(_QWORD *)v618 = kk;
      *(_QWORD *)&v618[8] = 1065353216;
      CA::Layer::collect_animations_(v366, v527, (uint64_t)v618, v306, v307);
    }
LABEL_743:
    v379 = *((_QWORD *)kk + 13);
    v380 = *(_DWORD *)(v379 + 200);
    if ((_QWORD)v568)
      *(_DWORD *)(v568 + 288) = v380;
    v381 = (CA::Render::Encoder *)*((_QWORD *)&v567 + 1);
    if (*((_QWORD *)&v567 + 1))
    {
      v382 = *(_BYTE *)(v379 + 204);
      v383 = *(_BYTE **)(*((_QWORD *)&v567 + 1) + 32);
      if ((unint64_t)(v383 + 1) > *(_QWORD *)(*((_QWORD *)&v567 + 1) + 40))
      {
        CA::Render::Encoder::grow(*((CA::Render::Encoder **)&v567 + 1), 1);
        v383 = (_BYTE *)*((_QWORD *)v381 + 4);
      }
      *((_QWORD *)v381 + 4) = v383 + 1;
      *v383 = 32;
      v384 = (_DWORD *)*((_QWORD *)v381 + 4);
      if ((unint64_t)(v384 + 1) > *((_QWORD *)v381 + 5))
      {
        CA::Render::Encoder::grow(v381, 4);
        v384 = (_DWORD *)*((_QWORD *)v381 + 4);
      }
      *v384 = v380;
      v385 = *((_QWORD *)v381 + 4);
      v386 = *((_QWORD *)v381 + 5);
      v387 = (BOOL *)(v385 + 4);
      *((_QWORD *)v381 + 4) = v385 + 4;
      if (v385 + 5 > v386)
      {
        CA::Render::Encoder::grow(v381, 1);
        v387 = (BOOL *)*((_QWORD *)v381 + 4);
      }
      *((_QWORD *)v381 + 4) = v387 + 1;
      *v387 = (v382 & 4) != 0;
      v379 = *((_QWORD *)kk + 13);
    }
    v388 = *(double *)(v379 + 176);
    if (v388 != 0.0)
    {
      if ((_QWORD)v568 && (*(_WORD *)(v568 + 552) & 0x40) == 0)
        CA::Render::Context::add_begin_time((os_unfair_lock_s *)v568, v388);
      v389 = (CA::Render::Encoder *)*((_QWORD *)&v567 + 1);
      if (*((_QWORD *)&v567 + 1))
      {
        v390 = *(_BYTE **)(*((_QWORD *)&v567 + 1) + 32);
        if ((unint64_t)(v390 + 1) > *(_QWORD *)(*((_QWORD *)&v567 + 1) + 40))
        {
          CA::Render::Encoder::grow(*((CA::Render::Encoder **)&v567 + 1), 1);
          v390 = (_BYTE *)*((_QWORD *)v389 + 4);
        }
        *((_QWORD *)v389 + 4) = v390 + 1;
        *v390 = 29;
        v391 = (double *)*((_QWORD *)v389 + 4);
        if ((unint64_t)(v391 + 1) > *((_QWORD *)v389 + 5))
        {
          CA::Render::Encoder::grow(v389, 8);
          v391 = (double *)*((_QWORD *)v389 + 4);
        }
        *v391 = v388;
        *((_QWORD *)v389 + 4) += 8;
      }
    }
    LOBYTE(v581) = 0;
    CA::Transaction::get_value(*((_QWORD *)kk + 11), 207, (const CGAffineTransform *)7, (CA::Mat4Impl *)&v581);
    if (*((_QWORD *)&v567 + 1)
      && *(_QWORD *)(*((_QWORD *)&v567 + 1) + 32) - *(_QWORD *)(*((_QWORD *)&v567 + 1) + 24) != *(_QWORD *)(*((_QWORD *)&v567 + 1) + 96)
      || (_BYTE)v581)
    {
      LOBYTE(v609) = 0;
      CA::Transaction::get_value(*((_QWORD *)kk + 11), 357, (const CGAffineTransform *)7, (CA::Mat4Impl *)&v609);
      if ((_BYTE)v581)
      {
        LOBYTE(v609) = 1;
        if (!pthread_main_np() || (_QWORD)v535)
          goto LABEL_783;
LABEL_771:
        if ((x_cpu_has_64bit::initialized & 1) == 0)
        {
          *(_QWORD *)v618 = 4;
          sysctlbyname("hw.cpu64bit_capable", &x_cpu_has_64bit::has_64_bit, (size_t *)v618, 0, 0);
          x_cpu_has_64bit::initialized = 1;
        }
        if (x_cpu_has_64bit::has_64_bit)
        {
          if ((_BYTE)v609)
          {
            v392 = (CA::Render::Encoder *)*((_QWORD *)&v567 + 1);
            v393 = v581;
            v394 = *(_BYTE **)(*((_QWORD *)&v567 + 1) + 32);
            if ((unint64_t)(v394 + 1) > *(_QWORD *)(*((_QWORD *)&v567 + 1) + 40))
            {
              CA::Render::Encoder::grow(*((CA::Render::Encoder **)&v567 + 1), 1);
              v394 = (_BYTE *)*((_QWORD *)v392 + 4);
            }
            *((_QWORD *)v392 + 4) = v394 + 1;
            *v394 = 31;
            v395 = (_BYTE *)*((_QWORD *)v392 + 4);
            if ((unint64_t)(v395 + 1) > *((_QWORD *)v392 + 5))
            {
              CA::Render::Encoder::grow(v392, 1);
              v395 = (_BYTE *)*((_QWORD *)v392 + 4);
            }
            *((_QWORD *)v392 + 4) = v395 + 1;
            *v395 = v393;
            if (BYTE9(xmmword_1ECDC6A90))
              kdebug_trace();
          }
        }
        else
        {
LABEL_783:
          LOBYTE(v609) = 0;
        }
      }
      else if ((_BYTE)v609)
      {
        goto LABEL_771;
      }
      LOBYTE(v584) = 0;
      if (CA::Transaction::get_value(*((_QWORD *)kk + 11), 244, (const CGAffineTransform *)6, (CA::Mat4Impl *)&v584))
      {
        if ((_QWORD)v568)
          CA::Render::Context::set_frame_stall_skip_request((CA::Render::Context *)v568, v584);
        if ((_BYTE)v584)
        {
          v396 = (CA::Render::Encoder *)*((_QWORD *)&v567 + 1);
          v397 = *(_BYTE **)(*((_QWORD *)&v567 + 1) + 32);
          if ((unint64_t)(v397 + 1) > *(_QWORD *)(*((_QWORD *)&v567 + 1) + 40))
          {
            CA::Render::Encoder::grow(*((CA::Render::Encoder **)&v567 + 1), 1);
            v397 = (_BYTE *)*((_QWORD *)v396 + 4);
          }
          *((_QWORD *)v396 + 4) = v397 + 1;
          *v397 = 27;
          v398 = (_BYTE *)*((_QWORD *)v396 + 4);
          if ((unint64_t)(v398 + 1) > *((_QWORD *)v396 + 5))
          {
            CA::Render::Encoder::grow(v396, 1);
            v398 = (_BYTE *)*((_QWORD *)v396 + 4);
          }
          *((_QWORD *)v396 + 4) = v398 + 1;
          *v398 = 1;
        }
      }
      *(_QWORD *)v618 = 0;
      if (CA::Transaction::_update_cycle_support_enabled == 1
        && CA::Transaction::get_value(*((_QWORD *)kk + 11), 568, (const CGAffineTransform *)0x12, (CA::Mat4Impl *)v618))
      {
        v399 = (CA::Render::Encoder *)*((_QWORD *)&v567 + 1);
        v400 = *(_QWORD *)v618;
        v401 = *(_BYTE **)(*((_QWORD *)&v567 + 1) + 32);
        if ((unint64_t)(v401 + 1) > *(_QWORD *)(*((_QWORD *)&v567 + 1) + 40))
        {
          CA::Render::Encoder::grow(*((CA::Render::Encoder **)&v567 + 1), 1);
          v401 = (_BYTE *)*((_QWORD *)v399 + 4);
        }
        *((_QWORD *)v399 + 4) = v401 + 1;
        *v401 = 34;
        v402 = (_QWORD *)*((_QWORD *)v399 + 4);
        if ((unint64_t)(v402 + 1) > *((_QWORD *)v399 + 5))
        {
          CA::Render::Encoder::grow(v399, 8);
          v402 = (_QWORD *)*((_QWORD *)v399 + 4);
        }
        *v402 = v400;
        *((_QWORD *)v399 + 4) += 8;
      }
    }
    v403 = *((_QWORD *)kk + 13);
    v404 = *(double *)(v403 + 192);
    if (v404 != 0.0)
    {
      if ((_QWORD)v568)
        CA::Render::Context::add_input_time((CA::Render::Context *)v568, *(double *)(v403 + 192));
      v405 = (CA::Render::Encoder *)*((_QWORD *)&v567 + 1);
      if (*((_QWORD *)&v567 + 1))
      {
        v406 = *(_BYTE **)(*((_QWORD *)&v567 + 1) + 32);
        if (&v406[-*(_QWORD *)(*((_QWORD *)&v567 + 1) + 24)] != *(_BYTE **)(*((_QWORD *)&v567 + 1) + 96)
          || byte_1ECDC6AA9)
        {
          if ((unint64_t)(v406 + 1) > *(_QWORD *)(*((_QWORD *)&v567 + 1) + 40))
          {
            CA::Render::Encoder::grow(*((CA::Render::Encoder **)&v567 + 1), 1);
            v406 = (_BYTE *)*((_QWORD *)v405 + 4);
          }
          *((_QWORD *)v405 + 4) = v406 + 1;
          *v406 = 26;
          v407 = (double *)*((_QWORD *)v405 + 4);
          if ((unint64_t)(v407 + 1) > *((_QWORD *)v405 + 5))
          {
            CA::Render::Encoder::grow(v405, 8);
            v407 = (double *)*((_QWORD *)v405 + 4);
          }
          *v407 = v404;
          *((_QWORD *)v405 + 4) += 8;
        }
      }
    }
    *(_QWORD *)&v609 = 0;
    if (CA::Transaction::get_value(*((_QWORD *)kk + 11), 454, (const CGAffineTransform *)0x10, (CA::Mat4Impl *)&v609))
    {
      if ((_QWORD)v568)
        CA::Render::Context::add_remote_input_mach_time((CA::Render::Context *)v568, v609);
      v408 = (CA::Render::Encoder *)*((_QWORD *)&v567 + 1);
      if (*((_QWORD *)&v567 + 1))
      {
        v409 = *(_BYTE **)(*((_QWORD *)&v567 + 1) + 32);
        if (&v409[-*(_QWORD *)(*((_QWORD *)&v567 + 1) + 24)] != *(_BYTE **)(*((_QWORD *)&v567 + 1) + 96)
          || byte_1ECDC6AA9)
        {
          v410 = v609;
          if ((unint64_t)(v409 + 1) > *(_QWORD *)(*((_QWORD *)&v567 + 1) + 40))
          {
            CA::Render::Encoder::grow(*((CA::Render::Encoder **)&v567 + 1), 1);
            v409 = (_BYTE *)*((_QWORD *)v408 + 4);
          }
          *((_QWORD *)v408 + 4) = v409 + 1;
          *v409 = 28;
          v411 = (_QWORD *)*((_QWORD *)v408 + 4);
          if ((unint64_t)(v411 + 1) > *((_QWORD *)v408 + 5))
          {
            CA::Render::Encoder::grow(v408, 8);
            v411 = (_QWORD *)*((_QWORD *)v408 + 4);
          }
          *v411 = v410;
          *((_QWORD *)v408 + 4) += 8;
        }
      }
    }
    CA::Transaction::unlock(kk);
    v412 = (_DWORD *)v566;
    v413 = *((_QWORD *)&v567 + 1);
    v414 = *(_BYTE *)(v566 + 241);
    v415 = v414 & 0x18;
    if (v415 == 8 && *((_QWORD *)&v567 + 1))
    {
      *(_BYTE *)(v566 + 241) = v414 | 0x10;
      os_unfair_lock_lock((os_unfair_lock_t)&CA::Context::_lock);
      ++*v412;
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::Context::_lock);
      LODWORD(v584) = 0;
      v416 = mach_port_allocate(*MEMORY[0x1E0C83DA0], 1u, (mach_port_name_t *)&v584);
      CA_CLIENT_MACH_PORT_ALLOCATE_FAILED(v416, v584);
      if (!CA::Render::encode_sync_request(*((CA::Render **)&v567 + 1), (CA::Render::Encoder *)v584))
        __assert_rtn("commit_transaction", "CAContextInternal.mm", 3631, "scheduled");
      *(_QWORD *)v618 = 0;
      *(_QWORD *)&v618[8] = v618;
      *(_QWORD *)&v618[16] = 0x3052000000;
      *(_QWORD *)&v618[24] = __Block_byref_object_copy_;
      *(_QWORD *)&v618[32] = __Block_byref_object_dispose_;
      *(_QWORD *)&v618[40] = 0;
      v547 = MEMORY[0x1E0C809B0];
      v548 = 3221225472;
      v549 = ___ZN2CA7Context18commit_transactionEPNS_11TransactionEdPd_block_invoke_49;
      v550 = &unk_1E159DDE8;
      v551 = v618;
      v552 = v412;
      v553 = v584;
      *(_QWORD *)&v618[40] = dispatch_mach_create();
      dispatch_mach_connect();
      _Block_object_dispose(v618, 8);
      v413 = *((_QWORD *)&v567 + 1);
    }
    if (v413)
    {
      v417 = *(_QWORD *)(*((_QWORD *)kk + 13) + 104);
      if (!((unint64_t)v535 | v417) && *(_QWORD *)(v413 + 32) - *(_QWORD *)(v413 + 24) == *(_QWORD *)(v413 + 96))
        goto LABEL_835;
      ++*(_DWORD *)(v566 + 128);
      v418 = (CA::Render::Encoder *)HIDWORD(v562);
      if (v417 && !HIDWORD(v562))
      {
        v419 = mach_port_allocate(*MEMORY[0x1E0C83DA0], 1u, (mach_port_name_t *)&v562 + 1);
        CA_CLIENT_MACH_PORT_ALLOCATE_FAILED(v419, SHIDWORD(v562));
        v418 = (CA::Render::Encoder *)HIDWORD(v562);
        v413 = *((_QWORD *)&v567 + 1);
      }
      if ((_DWORD)v418)
      {
        v420 = CA::Render::encode_sync_request((CA::Render *)v413, v418);
        LODWORD(v528) = (_DWORD)v528 + v420;
        v413 = *((_QWORD *)&v567 + 1);
      }
      if ((_QWORD)v535)
      {
LABEL_835:
        v421 = 0;
        LODWORD(v422) = 0;
      }
      else
      {
        if (*(_BYTE *)(v413 + 104))
        {
          v421 = v562;
          if ((v562 - 1) >= 0xFFFFFFFE)
          {
            v423 = mach_port_allocate(*MEMORY[0x1E0C83DA0], 1u, (mach_port_name_t *)&v562);
            v421 = v562;
            if ((v562 - 1) >= 0xFFFFFFFE)
            {
              v424 = v423;
              if (x_log_hook_p())
              {
                v425 = mach_error_string(v424);
                v509 = v424;
                v510 = v425;
                v508 = v532;
                x_log_();
              }
              else
              {
                v426 = x_log_category_api;
                if (os_log_type_enabled((os_log_t)x_log_category_api, OS_LOG_TYPE_ERROR))
                {
                  v427 = mach_error_string(v424);
                  *(_DWORD *)v618 = v518;
                  *(_DWORD *)&v618[4] = v532;
                  *(_WORD *)&v618[8] = 1024;
                  *(_DWORD *)&v618[10] = v424;
                  *(_WORD *)&v618[14] = 2080;
                  *(_QWORD *)&v618[16] = v427;
                  _os_log_impl(&dword_184457000, v426, OS_LOG_TYPE_ERROR, "Failed to make reply port for sync coder (client=0x%x) [0x%x %s]", v618, 0x18u);
                }
              }
              v421 = v562;
            }
          }
          v413 = *((_QWORD *)&v567 + 1);
        }
        else
        {
          v421 = 0;
        }
        v428 = *(_BYTE **)(v413 + 32);
        if ((unint64_t)(v428 + 1) > *(_QWORD *)(v413 + 40))
        {
          CA::Render::Encoder::grow((CA::Render::Encoder *)v413, 1);
          v428 = *(_BYTE **)(v413 + 32);
        }
        *(_QWORD *)(v413 + 32) = v428 + 1;
        *v428 = 30;
        v429 = *(double **)(v413 + 32);
        if ((unint64_t)(v429 + 1) > *(_QWORD *)(v413 + 40))
        {
          CA::Render::Encoder::grow((CA::Render::Encoder *)v413, 8);
          v429 = *(double **)(v413 + 32);
        }
        *v429 = v299;
        *(_QWORD *)(v413 + 32) += 8;
        LODWORD(v584) = 0;
        v430 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v590, v604);
        if (v430)
        {
          v431 = *((_DWORD *)v430 + 5);
          LODWORD(v584) = v431;
        }
        else
        {
          v431 = 0;
        }
        v432 = CA::Render::Encoder::send_message(*((CA::Render::Encoder **)&v567 + 1), *(_DWORD *)(v566 + 160), v421, (unsigned int *)&v584, (v431 - 1) < 0xFFFFFFFE);
        v422 = v432;
        if ((_DWORD)v432)
        {
          if ((_DWORD)v432 == 268435459)
          {
            *(_BYTE *)(v566 + 241) |= 2u;
          }
          else if ((_DWORD)v432 == -81182719)
          {
            goto LABEL_1001;
          }
          if (x_log_hook_p())
          {
            v433 = *(unsigned int *)(v566 + 4);
            v434 = mach_error_string(v422);
            v509 = v422;
            v510 = v434;
            v508 = v433;
            x_log_();
          }
          else
          {
            v435 = x_log_category_api;
            if (os_log_type_enabled((os_log_t)x_log_category_api, OS_LOG_TYPE_ERROR))
            {
              v436 = *(_DWORD *)(v566 + 4);
              v437 = mach_error_string(v422);
              *(_DWORD *)v618 = v518;
              *(_DWORD *)&v618[4] = v436;
              *(_WORD *)&v618[8] = 1024;
              *(_DWORD *)&v618[10] = v422;
              *(_WORD *)&v618[14] = 2080;
              *(_QWORD *)&v618[16] = v437;
              _os_log_impl(&dword_184457000, v435, OS_LOG_TYPE_ERROR, "Failed to commit transaction (client=0x%x) [0x%x %s]", v618, 0x18u);
            }
          }
        }
        v413 = *((_QWORD *)&v567 + 1);
      }
      *(_QWORD *)(v413 + 80) = 0;
    }
    else
    {
      v421 = 0;
      LODWORD(v422) = 0;
    }
    *((_QWORD *)v533 + 5) = 0;
    v438 = (os_unfair_lock_s *)v568;
    *(_QWORD *)(v566 + 208) = 0;
    if (v438)
    {
      v439 = CA::Render::Context::increment_commit_seed(v438);
      v440 = v568;
      *(_DWORD *)(v566 + 128) = v439;
      CA::Render::Context::did_commit(v440, v569, 0, 1, 0, 0);
      CA::Render::Context::run_scheduled_handle_updates((CA::Render::Context *)v568);
      v413 = *((_QWORD *)&v567 + 1);
    }
    if (v415 == 8 && !v413)
    {
      v441 = (CA::Context *)v566;
      *(_BYTE *)(v566 + 241) |= 0x10u;
      CA::Context::destroy(v441);
    }
    _Block_object_dispose(&buf, 8);
    pthread_mutex_unlock(v304);
    ii = v531;
    if ((v303 & 0x20) == 0)
      kdebug_trace();
    v442 = v535;
    if ((_QWORD)v535)
    {
      *((_QWORD *)&v567 + 1) = 0;
      os_unfair_lock_lock(&CA::Context::_deferred_lock);
      *(_BYTE *)(v442 + 44) = 1;
      os_unfair_lock_unlock(&CA::Context::_deferred_lock);
      goto LABEL_900;
    }
    if (!*((_QWORD *)&v587 + 1))
      goto LABEL_890;
    v443 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v587 + 8));
    v443.i16[0] = vaddlv_u8(v443);
    if (v443.u32[0] > 1uLL)
    {
      v444 = v604;
      if (*((_QWORD *)&v587 + 1) <= (unint64_t)v604)
        v444 = (unint64_t)v604 % *((_QWORD *)&v587 + 1);
    }
    else
    {
      v444 = (DWORD2(v587) - 1) & v604;
    }
    v445 = *(uint64_t ***)(v587 + 8 * v444);
    if (!v445 || (v446 = *v445) == 0)
    {
LABEL_890:
      if (std::__hash_table<std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>>>::find<unsigned int>(v597[0], v597[1], v604))
      {
        goto LABEL_891;
      }
      goto LABEL_892;
    }
    while (2)
    {
      v447 = v446[1];
      if (v447 != v604)
      {
        if (v443.u32[0] > 1uLL)
        {
          if (v447 >= *((_QWORD *)&v587 + 1))
            v447 %= *((_QWORD *)&v587 + 1);
        }
        else
        {
          v447 &= *((_QWORD *)&v587 + 1) - 1;
        }
        if (v447 != v444)
          goto LABEL_890;
        goto LABEL_889;
      }
      if (*((_DWORD *)v446 + 4) != (_DWORD)v604)
      {
LABEL_889:
        v446 = (uint64_t *)*v446;
        if (!v446)
          goto LABEL_890;
        continue;
      }
      break;
    }
    if (!v446[3])
      goto LABEL_890;
LABEL_891:
    kdebug_trace();
LABEL_892:
    if (*((_QWORD *)&v567 + 1))
    {
      if (v421 - 1 < 0xFFFFFFFE && (_DWORD)v422 == 0)
        v297 = (v297 + 1);
      else
        v297 = v297;
      (***((void (****)(void))&v567 + 1))();
    }
LABEL_900:
    kk = v533;
    if (v534)
      x_heap_free(v534);
    CA::Context::unref((CA::Context *)v566, 1);
    if (++v298 < v563)
      continue;
    break;
  }
LABEL_907:
  v449 = v526;
  if (v526)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&v526->_lock);
    v449->_invalidated = 1;
    os_unfair_lock_unlock((os_unfair_lock_t)&v449->_lock);

  }
  for (i3 = (uint64_t *)v592; i3; i3 = (uint64_t *)*i3)
    mach_port_deallocate(*MEMORY[0x1E0C83DA0], *((_DWORD *)i3 + 4));
  if ((_DWORD)v297)
  {
    *(_QWORD *)&v295 = 67109378;
    v535 = v295;
    do
    {
      memset(v618, 0, 92);
      v451 = (char *)mach_msg((mach_msg_header_t *)v618, 2, 0, 0x5Cu, v562, 0, 0);
      if ((_DWORD)v451)
      {
        v452 = v451;
        if (x_log_hook_p())
        {
          v453 = mach_error_string((mach_error_t)v452);
          v510 = v452;
          v511 = v453;
          x_log_();
        }
        else
        {
          v454 = x_log_category_api;
          if (os_log_type_enabled((os_log_t)x_log_category_api, OS_LOG_TYPE_ERROR))
          {
            v455 = mach_error_string((mach_error_t)v452);
            *(_DWORD *)v618 = v535;
            *(_DWORD *)&v618[4] = (_DWORD)v452;
            *(_WORD *)&v618[8] = 2080;
            *(_QWORD *)&v618[10] = v455;
            _os_log_impl(&dword_184457000, v454, OS_LOG_TYPE_ERROR, "Failed to receive sync coder reply [0x%x %s]", v618, 0x12u);
          }
        }
      }
      LODWORD(v297) = v297 - 1;
    }
    while ((_DWORD)v297);
  }
  kk = v533;
  if ((v562 - 1) <= 0xFFFFFFFD)
    mach_port_mod_refs(*MEMORY[0x1E0C83DA0], v562, 1u, -1);
  v456 = (uint64_t *)v602;
  if ((_QWORD)v602)
  {
    v534 = (void ***)v613;
    *(_QWORD *)&v535 = v612;
    v532 = (unint64_t)&v578;
    v457 = MEMORY[0x1E0C809B0];
    do
    {
      LODWORD(v570) = *((_DWORD *)v456 + 4);
      v458 = v456[3];
      v459 = std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned long long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned long long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long long>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)&v598, v570, &v570);
      if (*((_QWORD *)v459 + 6))
      {
        std::__hash_table<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,void (*)(CALayer *,CA::Render::Layer const*,CA::Render::Layer const*,std::string const&,ReverseSerializationState const&)>>>::__hash_table((uint64_t)&v576, (uint64_t *)v459 + 3);
        if (!v579)
          __assert_rtn("activate", "render-fence.cpp", 306, "!in_pending.empty ()");
        os_unfair_lock_lock((os_unfair_lock_t)v458);
        if (!*(_BYTE *)(v458 + 28))
          __assert_rtn("activate", "render-fence.cpp", 310, "_has_receive_right");
        *(_QWORD *)&v584 = 0;
        *((_QWORD *)&v584 + 1) = &v584;
        *(_QWORD *)&v585 = 0x2000000000;
        BYTE8(v585) = 0;
        *(_QWORD *)&v609 = 0;
        *((_QWORD *)&v609 + 1) = &v609;
        *(_QWORD *)&v610 = 0x5002000000;
        *((_QWORD *)&v610 + 1) = __Block_byref_object_copy__16702;
        v611 = (uint64_t)__Block_byref_object_dispose__16703;
        v615 = 0;
        v460 = v576;
        v461 = v577;
        v577 = 0;
        v576 = 0;
        v612[0] = v460;
        v612[1] = v461;
        v613[0] = v578;
        v613[1] = v579;
        v614 = v580;
        if (v579)
        {
          v462 = *(_QWORD *)(v578 + 8);
          if ((v461 & (v461 - 1)) != 0)
          {
            if (v462 >= v461)
              v462 %= v461;
          }
          else
          {
            v462 &= v461 - 1;
          }
          *(_QWORD *)(v460 + 8 * v462) = v534;
          v463 = v532;
          *(_QWORD *)v532 = 0;
          *(_QWORD *)(v463 + 8) = 0;
        }
        v464 = *(_DWORD *)(v458 + 24);
        if (CA::Render::Fence::_observer_callback_queue(void)::onceToken != -1)
          dispatch_once(&CA::Render::Fence::_observer_callback_queue(void)::onceToken, &__block_literal_global_16704);
        v465 = CA::Render::Fence::_observer_callback_queue(void)::q;
        *(_QWORD *)&v581 = 0;
        *((_QWORD *)&v581 + 1) = &v581;
        v582 = 0x2000000000uLL;
        v572 = 0.0;
        v573 = &v572;
        v574 = 0x2000000000;
        v575 = 0;
        *(_QWORD *)v618 = v457;
        *(_QWORD *)&v618[8] = 0x40000000;
        *(_QWORD *)&v618[16] = ___ZN2CA6Render5Fence11Transaction8Observer8activateENSt3__113unordered_setIyNS4_4hashIyEENS4_8equal_toIyEENS4_9allocatorIyEEEEPFvPS3_RKSC_djyEPFvSD_SF_jjEPFvSD_SF_E_block_invoke;
        *(_QWORD *)&v618[24] = &unk_1E15AB2F8;
        *(_QWORD *)&v618[32] = &v584;
        *(_QWORD *)&v618[40] = &v609;
        *(_QWORD *)&v618[64] = v458;
        *(_QWORD *)&v618[72] = CA::fo_fences_released;
        *(_QWORD *)&v618[48] = &v581;
        *(_QWORD *)&v618[56] = &v572;
        *(_QWORD *)&v618[80] = CA::fo_completed;
        *(_QWORD *)&v618[88] = CA::fo_removed_context;
        *(_DWORD *)&v618[96] = v464;
        *(_QWORD *)(v458 + 8) = dispatch_mach_create();
        v466 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, v465);
        *(_QWORD *)(v458 + 16) = v466;
        *(_QWORD *)&buf = v457;
        *((_QWORD *)&buf + 1) = 0x40000000;
        *(_QWORD *)&v622 = ___ZN2CA6Render5Fence11Transaction8Observer8activateENSt3__113unordered_setIyNS4_4hashIyEENS4_8equal_toIyEENS4_9allocatorIyEEEEPFvPS3_RKSC_djyEPFvSD_SF_jjEPFvSD_SF_E_block_invoke_7;
        *((_QWORD *)&v622 + 1) = &unk_1E15AB320;
        v629 = v464;
        v623 = (uint64_t)&v581;
        v624 = &v584;
        v627 = 0x3FE3333333333333;
        v628 = CA::fo_completed;
        v625 = &v609;
        v626 = v458;
        dispatch_source_set_event_handler(v466, &buf);
        v467 = dispatch_time(0, 600000000);
        dispatch_source_set_timer(*(dispatch_source_t *)(v458 + 16), v467, 0xFFFFFFFFFFFFFFFFLL, 0);
        *(_BYTE *)(v458 + 28) = 0;
        *(_QWORD *)(*((_QWORD *)&v581 + 1) + 24) = *(_QWORD *)(v458 + 8);
        v573[3] = *(double *)(v458 + 16);
        os_unfair_lock_unlock((os_unfair_lock_t)v458);
        *(_QWORD *)&v604 = v457;
        *((_QWORD *)&v604 + 1) = 0x40000000;
        *(_QWORD *)&v605 = ___ZN2CA6Render5Fence11Transaction8Observer8activateENSt3__113unordered_setIyNS4_4hashIyEENS4_8equal_toIyEENS4_9allocatorIyEEEEPFvPS3_RKSC_djyEPFvSD_SF_jjEPFvSD_SF_E_block_invoke_11;
        *((_QWORD *)&v605 + 1) = &unk_1E15AB348;
        v608 = v464;
        v606 = (uint64_t)&v581;
        v607 = &v572;
        dispatch_sync(v465, &v604);
        _Block_object_dispose(&v572, 8);
        _Block_object_dispose(&v581, 8);
        _Block_object_dispose(&v609, 8);
        std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table(v535);
        _Block_object_dispose(&v584, 8);
        std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)&v576);
        kk = v533;
      }
      else if (v458)
      {
        CA::Render::Fence::Transaction::Observer::~Observer((CA::Render::Fence::Transaction::Observer *)v458);
        MEMORY[0x186DBD990]();
      }
      v456 = (uint64_t *)*v456;
    }
    while (v456);
  }
  v13 = v515;
  if ((v524 & 1) != 0)
  {
    memset(v618, 0, 32);
    *(_DWORD *)&v618[32] = 1065353216;
    v468 = mach_absolute_time();
    v469 = CATimeWithHostTime(v468);
    CA::Context::send_deferrals(0, 0, (uint64_t)v618, 0, v469);
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)v618);
  }
  for (i4 = (_QWORD *)v595; i4; i4 = (_QWORD *)*i4)
  {
    v471 = (_QWORD *)i4[3];
    if (v471)
    {
      do
      {
        v472 = (const void *)*v471;
        (*(void (**)(_QWORD))(*v471 + 16))(*v471);
        _Block_release(v472);
        v471 = (_QWORD *)v471[1];
      }
      while (v471);
      v473 = (_QWORD *)i4[3];
      if (v473)
      {
        do
        {
          v474 = (_QWORD *)v473[1];
          free(v473);
          v473 = v474;
        }
        while (v474);
      }
    }
  }
  v475 = v536;
  if (v536 != v616)
  {
    v476 = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(v476, v475);
  }
LABEL_948:
  v477 = *((_DWORD *)kk + 25);
  *((_DWORD *)kk + 25) = v477 + 1;
  if (!v477)
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
  v478 = (uint64_t *)*((_QWORD *)kk + 10);
  if (v478)
  {
    do
    {
      v479 = *v478;
      if (*v478)
      {
        objc_msgSend(*(id *)(v479 + 16), "layerDidBecomeVisible:", (*(_DWORD *)(v479 + 52) >> 20) & 1);
LABEL_953:
        v480 = *(_DWORD *)v479;
        if (*(_DWORD *)v479)
        {
          do
          {
            v481 = __ldaxr((unsigned int *)v479);
            if (v481 != v480)
            {
              __clrex();
              goto LABEL_953;
            }
          }
          while (__stlxr(v480 - 1, (unsigned int *)v479));
          if (v480 == 1)
          {
            CA::Layer::destroy((CA::Layer *)v479);
            CA::Layer::~Layer((CA::AttrList **)v479);
            v482 = (malloc_zone_t *)get_malloc_zone();
            malloc_zone_free(v482, (void *)v479);
          }
        }
      }
      v478 = (uint64_t *)v478[1];
    }
    while (v478);
    v483 = (_QWORD *)*((_QWORD *)kk + 10);
    if (v483)
    {
      do
      {
        v484 = (_QWORD *)v483[1];
        free(v483);
        v483 = v484;
      }
      while (v484);
    }
    *((_QWORD *)kk + 10) = 0;
  }
  CA::Transaction::unlock(kk);
  if (!v13)
  {
    CA::Transaction::run_commit_handlers((uint64_t)kk, 3);
    CA::Transaction::run_commit_handlers((uint64_t)kk, 1);
    v485 = *((_QWORD *)kk + 13);
    if (*(_QWORD *)(v485 + 16))
    {
      v486 = *(_QWORD **)(v485 + 16);
      if (v486)
      {
        v487 = 0;
        do
        {
          v488 = v486;
          v486 = (_QWORD *)*v486;
          *v488 = v487;
          v487 = v488;
        }
        while (v486);
      }
      else
      {
        v488 = 0;
      }
      *((_QWORD *)kk + 2) = v488;
      *(_QWORD *)(v485 + 16) = 0;
    }
  }
  CA::Transaction::run_commit_handlers((uint64_t)kk, 2);
  v491 = *((_QWORD *)kk + 13);
  v492 = *(_QWORD *)(v491 + 104);
  if (v492)
  {
    *(_QWORD *)(v491 + 104) = 0;
    v493 = *(_DWORD *)(*((_QWORD *)kk + 13) + 200);
    v545[0] = MEMORY[0x1E0C809B0];
    v545[1] = 3221225472;
    v545[2] = ___ZN2CA7Context18commit_transactionEPNS_11TransactionEdPd_block_invoke_54;
    v545[3] = &__block_descriptor_44_e5_v8__0l;
    v546 = v493;
    v545[4] = v492;
    if (HIDWORD(v562) && (_DWORD)v528)
    {
      *(_QWORD *)&buf = 0;
      *((_QWORD *)&buf + 1) = &buf;
      *(_QWORD *)&v622 = 0x2020000000;
      DWORD2(v622) = (_DWORD)v528;
      *(_QWORD *)v618 = 0;
      *(_QWORD *)&v618[8] = v618;
      *(_QWORD *)&v618[16] = 0x3052000000;
      *(_QWORD *)&v618[24] = __Block_byref_object_copy_;
      *(_QWORD *)&v618[32] = __Block_byref_object_dispose_;
      *(_QWORD *)&v618[40] = 0;
      v537 = MEMORY[0x1E0C809B0];
      v538 = 3221225472;
      v539 = ___ZN2CA7Context18commit_transactionEPNS_11TransactionEdPd_block_invoke_2_57;
      v540 = &unk_1E159DE10;
      v541 = v545;
      p_buf = &buf;
      v543 = v618;
      v544 = HIDWORD(v562);
      v494 = dispatch_mach_create();
      *(_QWORD *)(*(_QWORD *)&v618[8] + 40) = v494;
      dispatch_set_qos_class_floor(v494, QOS_CLASS_USER_INTERACTIVE, 0);
      dispatch_mach_connect();
      _Block_object_dispose(v618, 8);
      _Block_object_dispose(&buf, 8);
    }
    else
    {
      global_queue = dispatch_get_global_queue(33, 0);
      dispatch_async(global_queue, v545);
      v489 = (CA::Transaction *)HIDWORD(v562);
      if (HIDWORD(v562))
        mach_port_mod_refs(*MEMORY[0x1E0C83DA0], HIDWORD(v562), 1u, -1);
    }
  }
  else if (HIDWORD(v562))
  {
    abort();
  }
  v496 = *((double *)&v566 + 1);
  if (*((double *)&v566 + 1) == 0.0)
  {
    v497 = mach_absolute_time();
    v496 = CATimeWithHostTime(v497);
    *((double *)&v566 + 1) = v496;
  }
  CA::Layer::set_next_animation_time(kk, v489, v496, *(double *)&v567, v490);
  v498 = *((double *)&v566 + 1);
  v499 = CAGetStatsStruct(0);
  ++v499[4];
  CAMarkStatistic((uint64_t)v499, v498);
  if (buffer_list)
  {
    while (!__ldaxr(pending_async_collect))
    {
      if (!__stlxr(1u, pending_async_collect))
      {
        CA::DispatchGroup::enqueue(v500, v501, v502);
        goto LABEL_987;
      }
    }
    __clrex();
  }
LABEL_987:
  v504 = *((_QWORD *)&v566 + 1);
  if (CA::CG::Queue::_queue)
    v505 = *(double *)&CA::CG::Queue::_next_collection <= *((double *)&v566 + 1);
  else
    v505 = 0;
  if (v505)
  {
    *(double *)&CA::CG::Queue::_next_collection = *((double *)&v566 + 1) + 0.2;
    dispatch_async_f((dispatch_queue_t)CA::CG::Queue::_queue, 0, (dispatch_function_t)CA::CG::Queue::collect_callback);
    v504 = *((_QWORD *)&v566 + 1);
  }
  *(_QWORD *)v519 = v504;
  v506 = v563;
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)&v587);
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)v590);
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)&v591);
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)&v594);
  std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>>>::~__hash_table((uint64_t)v597);
  std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>>>::~__hash_table((uint64_t)&v598);
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)&v601);
  return v506;
}

void sub_184520964(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long long>>,void *>>>>::reset[abi:nn180100](v1 + 1536);
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table(v1 + 752);
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table(v1 + 1136);
  std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>>>::~__hash_table(v1 + 1200);
  objc_autoreleasePoolPop(*(void **)(v1 + 48));
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table(v1 + 800);
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table(v1 + 848);
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table(v1 + 896);
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table(v1 + 944);
  std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>>>::~__hash_table(v1 + 992);
  std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>>>::~__hash_table(v1 + 1040);
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table(v1 + 1088);
  _Unwind_Resume(a1);
}

uint64_t ___ZN2CA7Context18commit_transactionEPNS_11TransactionEdPd_block_invoke_2(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 268) == *(_DWORD *)(result + 48))
    return CA::Layer::commit_if_needed(a2, *(unsigned int **)(result + 40), *(_QWORD *)(result + 32));
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void *v34;
  _QWORD v35[4];

  v35[3] = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = a2;
      if (v6 <= a2)
        v8 = a2 % v6;
    }
    else
    {
      v8 = ((_DWORD)v6 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v8);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return i;
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v11 >= v6)
              v11 %= v6;
          }
          else
          {
            v11 &= v6 - 1;
          }
          if (v11 != v8)
            break;
        }
      }
    }
  }
  else
  {
    v8 = 0;
  }
  v12 = (_QWORD *)(a1 + 16);
  v35[2] = 1;
  v13 = (char *)operator new(0x40uLL);
  v35[0] = v13;
  v35[1] = a1 + 16;
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v5;
  *((_DWORD *)v13 + 4) = *a3;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *((_DWORD *)v13 + 14) = 1065353216;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v6 && (float)(v15 * (float)v6) >= v14)
  {
    v5 = v8;
    goto LABEL_64;
  }
  v16 = 1;
  if (v6 >= 3)
    v16 = (v6 & (v6 - 1)) != 0;
  v17 = v16 | (2 * v6);
  v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18)
    prime = (int8x8_t)v18;
  else
    prime = (int8x8_t)v17;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v6 = *(_QWORD *)(a1 + 8);
  }
  if (*(_QWORD *)&prime <= v6)
  {
    if (*(_QWORD *)&prime >= v6)
      goto LABEL_60;
    v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
    {
      v26 = std::__next_prime(v26);
    }
    else
    {
      v28 = 1 << -(char)__clz(v26 - 1);
      if (v26 >= 2)
        v26 = v28;
    }
    if (*(_QWORD *)&prime <= v26)
      prime = (int8x8_t)v26;
    if (*(_QWORD *)&prime >= v6)
    {
      v6 = *(_QWORD *)(a1 + 8);
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v34 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v34)
        operator delete(v34);
      v6 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v20 = operator new(8 * *(_QWORD *)&prime);
  v21 = *(void **)a1;
  *(_QWORD *)a1 = v20;
  if (v21)
    operator delete(v21);
  v22 = 0;
  *(int8x8_t *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
  while (*(_QWORD *)&prime != v22);
  v23 = (_QWORD *)*v12;
  if (*v12)
  {
    v24 = v23[1];
    v25 = (uint8x8_t)vcnt_s8(prime);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      if (v24 >= *(_QWORD *)&prime)
        v24 %= *(_QWORD *)&prime;
    }
    else
    {
      v24 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v12;
    v29 = (_QWORD *)*v23;
    if (*v23)
    {
      do
      {
        v30 = v29[1];
        if (v25.u32[0] > 1uLL)
        {
          if (v30 >= *(_QWORD *)&prime)
            v30 %= *(_QWORD *)&prime;
        }
        else
        {
          v30 &= *(_QWORD *)&prime - 1;
        }
        if (v30 != v24)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v23;
            goto LABEL_56;
          }
          *v23 = *v29;
          *v29 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v30);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v30) = v29;
          v29 = v23;
        }
        v30 = v24;
LABEL_56:
        v23 = v29;
        v29 = (_QWORD *)*v29;
        v24 = v30;
      }
      while (v29);
    }
  }
  v6 = (unint64_t)prime;
LABEL_60:
  if ((v6 & (v6 - 1)) != 0)
  {
    if (v6 <= v5)
      v5 %= v6;
  }
  else
  {
    v5 = ((_DWORD)v6 - 1) & v5;
  }
LABEL_64:
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  i = (uint64_t *)v35[0];
  if (v31)
  {
    *(_QWORD *)v35[0] = *v31;
LABEL_72:
    *v31 = i;
    goto LABEL_73;
  }
  *(_QWORD *)v35[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v5) = v12;
  if (*i)
  {
    v32 = *(_QWORD *)(*i + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v32 >= v6)
        v32 %= v6;
    }
    else
    {
      v32 &= v6 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  v35[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long long>>,void *>>>>::reset[abi:nn180100]((uint64_t)v35);
  return i;
}

void sub_184521010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_set<unsigned long long>>,void *>>>>::reset[abi:nn180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL CA::Render::encode_sync_request(CA::Render *this, CA::Render::Encoder *a2)
{
  _BYTE *v4;
  int v5;
  BOOL v6;
  int v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)(v4 + 1) > *((_QWORD *)this + 5))
  {
    CA::Render::Encoder::grow(this, 1);
    v4 = (_BYTE *)*((_QWORD *)this + 4);
  }
  *((_QWORD *)this + 4) = v4 + 1;
  *v4 = 33;
  v15 = 0;
  v5 = MEMORY[0x186DBE050](*MEMORY[0x1E0C83DA0], a2, 21, (char *)&v15 + 4, &v15);
  if (v5)
    v6 = 0;
  else
    v6 = (_DWORD)v15 == 18;
  if (!v6 || HIDWORD(v15) == 0 || HIDWORD(v15) == -1)
  {
    v9 = v5;
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v10 = x_log_category_render;
      if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109632;
        v17 = v9;
        v18 = 1024;
        v19 = HIDWORD(v15);
        v20 = 1024;
        v21 = v15;
        _os_log_impl(&dword_184457000, v10, OS_LOG_TYPE_ERROR, "failed encode_port_make_once : r=%i so=%x t=%x", buf, 0x14u);
      }
    }
  }
  v11 = x_heap_malloc_small_(*((uint64_t **)this + 1), 0x30uLL);
  *(_DWORD *)(v11 + 8) = 2;
  v12 = HIDWORD(v15);
  *(_DWORD *)(v11 + 16) = HIDWORD(v15);
  *(_DWORD *)(v11 + 20) = 18;
  *(_BYTE *)(v11 + 24) = 1;
  *(_QWORD *)v11 = *((_QWORD *)this + 6);
  v13 = *((_QWORD *)this + 7) + 1;
  *((_QWORD *)this + 6) = v11;
  *((_QWORD *)this + 7) = v13;
  return (v12 - 1) < 0xFFFFFFFE;
}

void CA::Layer::set_next_animation_time(CA::Layer *this, CA::Transaction *a2, double a3, double a4, void *a5)
{
  const __CFSet *v8;
  int v9;
  const void **v10;
  const void **v11;
  double v12;
  BOOL v13;
  _QWORD *v15;
  int v16;
  void *v17;
  const void **context;
  const void **v19;
  const void **v20;
  uint64_t v21;
  _QWORD v22[257];

  v22[256] = *MEMORY[0x1E0C80C00];
  v8 = (const __CFSet *)non_visible_animating_layers;
  if (non_visible_animating_layers && (*((_BYTE *)this + 116) & 4) == 0)
  {
    v9 = *((_DWORD *)this + 25);
    *((_DWORD *)this + 25) = v9 + 1;
    if (v9
      || (os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock),
          (v8 = (const __CFSet *)non_visible_animating_layers) != 0))
    {
      context = (const void **)v22;
      v19 = (const void **)v22;
      v20 = (const void **)v22;
      v21 = 256;
      CFSetApplyFunction(v8, (CFSetApplierFunction)CA::Layer::collect_non_visible_callback, &context);
      v10 = context;
      v11 = v19;
      while (v10 != v11)
        CFSetRemoveValue((CFMutableSetRef)non_visible_animating_layers, *v10++);
      if (!CFSetGetCount((CFSetRef)non_visible_animating_layers))
      {
        CFRelease((CFTypeRef)non_visible_animating_layers);
        non_visible_animating_layers = 0;
      }
      if (context != v20)
        free(context);
    }
    CA::Transaction::unlock(this);
  }
  if (a4 < INFINITY && (*((_BYTE *)this + 116) & 4) == 0)
  {
    v12 = a3 + 0.0166666667;
    if (a3 + 0.0166666667 <= a4)
      v12 = a4;
    CA::call_at_time((CA *)CA::Layer::animation_heart_beat, 0, v12, a5);
  }
  if (qword_1ECDC5160)
    v13 = 0;
  else
    v13 = (_QWORD)animation_state == 0;
  if (!v13 || *((_QWORD *)&animation_state + 1) != 0)
  {
    v15 = (_QWORD *)operator new();
    v16 = *((_DWORD *)this + 25);
    *((_DWORD *)this + 25) = v16 + 1;
    if (!v16)
      os_unfair_lock_lock((os_unfair_lock_t)&CA::Transaction::transaction_lock);
    v15[2] = qword_1ECDC5160;
    *(_OWORD *)v15 = animation_state;
    animation_state = 0uLL;
    qword_1ECDC5160 = 0;
    CA::Transaction::unlock(this);
    if (dyld_program_sdk_at_least())
      dispatch_async_f(MEMORY[0x1E0C80D38], v15, (dispatch_function_t)run_animation_callbacks);
    else
      CA::call_at_time((CA *)run_animation_callbacks_compat, (void (*)(double, void *))v15, a3, v17);
  }
}

void sub_184521434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  CA::Transaction *v12;

  if (a10 != a12)
    free(a10);
  CA::Transaction::unlock(v12);
  _Unwind_Resume(a1);
}

void CA::DispatchGroup::enqueue(CA::DispatchGroup *this, void (*a2)(void *), void *a3)
{
  if (CA::DispatchGroup::enqueue(void (*)(void *),void *)::once != -1)
    dispatch_once_f(&CA::DispatchGroup::enqueue(void (*)(void *),void *)::once, 0, (dispatch_function_t)CA::DispatchGroup::init);
  dispatch_async_f((dispatch_queue_t)CA::DispatchGroup::_queue, 0, (dispatch_function_t)async_collect_callback);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,X::List<void({block_pointer})(void)> *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(float *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v33;

  v5 = a2;
  v6 = *((_QWORD *)a1 + 1);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = a2;
      if (v6 <= a2)
        v8 = a2 % v6;
    }
    else
    {
      v8 = ((_DWORD)v6 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v8);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v11 >= v6)
                v11 %= v6;
            }
            else
            {
              v11 &= v6 - 1;
            }
            if (v11 != v8)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    v8 = 0;
  }
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v5;
  *((_DWORD *)v10 + 4) = *a3;
  v10[3] = 0;
  v12 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v13 = a1[8];
  if (v6 && (float)(v13 * (float)v6) >= v12)
  {
    v5 = v8;
    goto LABEL_64;
  }
  v14 = 1;
  if (v6 >= 3)
    v14 = (v6 & (v6 - 1)) != 0;
  v15 = v14 | (2 * v6);
  v16 = vcvtps_u32_f32(v12 / v13);
  if (v15 <= v16)
    prime = (int8x8_t)v16;
  else
    prime = (int8x8_t)v15;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v6 = *((_QWORD *)a1 + 1);
  }
  if (*(_QWORD *)&prime <= v6)
  {
    if (*(_QWORD *)&prime >= v6)
      goto LABEL_60;
    v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v6 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
    {
      v24 = std::__next_prime(v24);
    }
    else
    {
      v26 = 1 << -(char)__clz(v24 - 1);
      if (v24 >= 2)
        v24 = v26;
    }
    if (*(_QWORD *)&prime <= v24)
      prime = (int8x8_t)v24;
    if (*(_QWORD *)&prime >= v6)
    {
      v6 = *((_QWORD *)a1 + 1);
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v33 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v33)
        operator delete(v33);
      v6 = 0;
      *((_QWORD *)a1 + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v18 = operator new(8 * *(_QWORD *)&prime);
  v19 = *(_QWORD **)a1;
  *(_QWORD *)a1 = v18;
  if (v19)
    operator delete(v19);
  v20 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v20++) = 0;
  while (*(_QWORD *)&prime != v20);
  v21 = (_QWORD *)*((_QWORD *)a1 + 2);
  if (v21)
  {
    v22 = v21[1];
    v23 = (uint8x8_t)vcnt_s8(prime);
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.u32[0] > 1uLL)
    {
      if (v22 >= *(_QWORD *)&prime)
        v22 %= *(_QWORD *)&prime;
    }
    else
    {
      v22 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = a1 + 4;
    v27 = (_QWORD *)*v21;
    if (*v21)
    {
      do
      {
        v28 = v27[1];
        if (v23.u32[0] > 1uLL)
        {
          if (v28 >= *(_QWORD *)&prime)
            v28 %= *(_QWORD *)&prime;
        }
        else
        {
          v28 &= *(_QWORD *)&prime - 1;
        }
        if (v28 != v22)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v21;
            goto LABEL_56;
          }
          *v21 = *v27;
          *v27 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v28);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v28) = v27;
          v27 = v21;
        }
        v28 = v22;
LABEL_56:
        v21 = v27;
        v27 = (_QWORD *)*v27;
        v22 = v28;
      }
      while (v27);
    }
  }
  v6 = (unint64_t)prime;
LABEL_60:
  if ((v6 & (v6 - 1)) != 0)
  {
    if (v6 <= v5)
      v5 %= v6;
  }
  else
  {
    v5 = ((_DWORD)v6 - 1) & v5;
  }
LABEL_64:
  v29 = *(_QWORD **)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v30)
  {
    *v10 = *v30;
LABEL_72:
    *v30 = v10;
    goto LABEL_73;
  }
  *v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v29[v5] = a1 + 4;
  if (*v10)
  {
    v31 = *(_QWORD *)(*v10 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v31 >= v6)
        v31 %= v6;
    }
    else
    {
      v31 &= v6 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

void sub_184521890(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t CA::work_around_59853502(CA *this)
{
  _OWORD v2[16];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  memset(v2, 0, sizeof(v2));
  return memset_s(v2, 0x100uLL, 0, 0x100uLL);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,CA::Render::Fence::Transaction::Info *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,CA::Render::Fence::Transaction::Info *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,CA::Render::Fence::Transaction::Info *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,CA::Render::Fence::Transaction::Info *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(float *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v33;

  v5 = a2;
  v6 = *((_QWORD *)a1 + 1);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = a2;
      if (v6 <= a2)
        v8 = a2 % v6;
    }
    else
    {
      v8 = ((_DWORD)v6 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v8);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v11 >= v6)
                v11 %= v6;
            }
            else
            {
              v11 &= v6 - 1;
            }
            if (v11 != v8)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    v8 = 0;
  }
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v5;
  *((_DWORD *)v10 + 4) = *a3;
  v10[3] = 0;
  v12 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v13 = a1[8];
  if (v6 && (float)(v13 * (float)v6) >= v12)
  {
    v5 = v8;
    goto LABEL_64;
  }
  v14 = 1;
  if (v6 >= 3)
    v14 = (v6 & (v6 - 1)) != 0;
  v15 = v14 | (2 * v6);
  v16 = vcvtps_u32_f32(v12 / v13);
  if (v15 <= v16)
    prime = (int8x8_t)v16;
  else
    prime = (int8x8_t)v15;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v6 = *((_QWORD *)a1 + 1);
  }
  if (*(_QWORD *)&prime <= v6)
  {
    if (*(_QWORD *)&prime >= v6)
      goto LABEL_60;
    v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v6 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
    {
      v24 = std::__next_prime(v24);
    }
    else
    {
      v26 = 1 << -(char)__clz(v24 - 1);
      if (v24 >= 2)
        v24 = v26;
    }
    if (*(_QWORD *)&prime <= v24)
      prime = (int8x8_t)v24;
    if (*(_QWORD *)&prime >= v6)
    {
      v6 = *((_QWORD *)a1 + 1);
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v33 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v33)
        operator delete(v33);
      v6 = 0;
      *((_QWORD *)a1 + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v18 = operator new(8 * *(_QWORD *)&prime);
  v19 = *(_QWORD **)a1;
  *(_QWORD *)a1 = v18;
  if (v19)
    operator delete(v19);
  v20 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v20++) = 0;
  while (*(_QWORD *)&prime != v20);
  v21 = (_QWORD *)*((_QWORD *)a1 + 2);
  if (v21)
  {
    v22 = v21[1];
    v23 = (uint8x8_t)vcnt_s8(prime);
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.u32[0] > 1uLL)
    {
      if (v22 >= *(_QWORD *)&prime)
        v22 %= *(_QWORD *)&prime;
    }
    else
    {
      v22 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = a1 + 4;
    v27 = (_QWORD *)*v21;
    if (*v21)
    {
      do
      {
        v28 = v27[1];
        if (v23.u32[0] > 1uLL)
        {
          if (v28 >= *(_QWORD *)&prime)
            v28 %= *(_QWORD *)&prime;
        }
        else
        {
          v28 &= *(_QWORD *)&prime - 1;
        }
        if (v28 != v22)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v21;
            goto LABEL_56;
          }
          *v21 = *v27;
          *v27 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v28);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v28) = v27;
          v27 = v21;
        }
        v28 = v22;
LABEL_56:
        v21 = v27;
        v27 = (_QWORD *)*v27;
        v22 = v28;
      }
      while (v27);
    }
  }
  v6 = (unint64_t)prime;
LABEL_60:
  if ((v6 & (v6 - 1)) != 0)
  {
    if (v6 <= v5)
      v5 %= v6;
  }
  else
  {
    v5 = ((_DWORD)v6 - 1) & v5;
  }
LABEL_64:
  v29 = *(_QWORD **)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v30)
  {
    *v10 = *v30;
LABEL_72:
    *v30 = v10;
    goto LABEL_73;
  }
  *v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v29[v5] = a1 + 4;
  if (*v10)
  {
    v31 = *(_QWORD *)(*v10 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v31 >= v6)
        v31 %= v6;
    }
    else
    {
      v31 &= v6 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

void sub_184521D08(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void CA::Render::GradientLayer::encode(CA::Render::GradientLayer *this, CA::Render::Encoder *a2)
{
  _OWORD *v4;
  uint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  int v8;
  _DWORD *v9;

  CA::Render::Object::encode(this, a2);
  CA::Render::InterpolatedFunction::encode((CA::Render::GradientLayer *)((char *)this + 16), a2);
  v4 = (_OWORD *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v4 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 16);
    v4 = (_OWORD *)*((_QWORD *)a2 + 4);
  }
  *v4 = *(_OWORD *)((char *)this + 72);
  v5 = *((_QWORD *)a2 + 4);
  v6 = *((_QWORD *)a2 + 5);
  v7 = (_OWORD *)(v5 + 16);
  *((_QWORD *)a2 + 4) = v5 + 16;
  if (v5 + 32 > v6)
  {
    CA::Render::Encoder::grow(a2, 16);
    v7 = (_OWORD *)*((_QWORD *)a2 + 4);
  }
  *v7 = *(_OWORD *)((char *)this + 88);
  *((_QWORD *)a2 + 4) += 16;
  CA::Render::Encoder::encode_atom(a2, *((_DWORD *)this + 26));
  v8 = *((_DWORD *)this + 27);
  v9 = (_DWORD *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v9 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 4);
    v9 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v9 = v8;
  *((_QWORD *)a2 + 4) += 4;
  if ((*((_BYTE *)this + 13) & 8) != 0)
    CA::Render::Encoder::encode_object(a2, *((const CA::Render::Object **)this + 14));
  CA::Render::Encoder::encode_colorspace(a2, *((CGColorSpaceRef *)this + 16));
}

void *CA::Render::InterpolatedFunction::encode(CA::Render::InterpolatedFunction *this, CA::Render::Encoder *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  int v13;
  void *result;
  uint64_t v15;
  const void *v16;
  size_t v17;
  const void *v18;
  size_t v19;
  const void *v20;
  uint64_t v21;

  v4 = *((_QWORD *)this + 2);
  v5 = (_QWORD *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v5 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 8);
    v5 = (_QWORD *)*((_QWORD *)a2 + 4);
  }
  *v5 = v4;
  v6 = *((_QWORD *)a2 + 4);
  v7 = *((_QWORD *)a2 + 5);
  v8 = (_DWORD *)(v6 + 8);
  *((_QWORD *)a2 + 4) = v6 + 8;
  v9 = *((_DWORD *)this + 6);
  if (v6 + 12 > v7)
  {
    CA::Render::Encoder::grow(a2, 4);
    v8 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v8 = v9;
  v10 = *((_QWORD *)a2 + 4);
  v11 = *((_QWORD *)a2 + 5);
  v12 = (_DWORD *)(v10 + 4);
  *((_QWORD *)a2 + 4) = v10 + 4;
  v13 = *((_DWORD *)this + 3) >> 8;
  if (v10 + 8 > v11)
  {
    CA::Render::Encoder::grow(a2, 4);
    v12 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v12 = v13;
  result = (void *)(*((_QWORD *)a2 + 4) + 4);
  *((_QWORD *)a2 + 4) = result;
  v15 = *((_QWORD *)this + 2);
  if (v15)
  {
    v16 = (const void *)*((_QWORD *)this + 4);
    v17 = 4 * v15 * *((unsigned int *)this + 6);
    if ((unint64_t)result + v17 > *((_QWORD *)a2 + 5))
    {
      CA::Render::Encoder::grow(a2, v17);
      result = (void *)*((_QWORD *)a2 + 4);
    }
    memcpy(result, v16, v17);
    result = (void *)(*((_QWORD *)a2 + 4) + v17);
    *((_QWORD *)a2 + 4) = result;
    v18 = (const void *)*((_QWORD *)this + 5);
    if (v18)
    {
      v19 = 4 * *((_QWORD *)this + 2);
      if ((unint64_t)result + v19 > *((_QWORD *)a2 + 5))
      {
        CA::Render::Encoder::grow(a2, 4 * *((_QWORD *)this + 2));
        result = (void *)*((_QWORD *)a2 + 4);
      }
      memcpy(result, v18, v19);
      result = (void *)(*((_QWORD *)a2 + 4) + v19);
      *((_QWORD *)a2 + 4) = result;
    }
    v20 = (const void *)*((_QWORD *)this + 6);
    if (v20)
    {
      v21 = 32 * *((_QWORD *)this + 2) - 32;
      if ((unint64_t)result + v21 > *((_QWORD *)a2 + 5))
      {
        CA::Render::Encoder::grow(a2, v21);
        result = (void *)*((_QWORD *)a2 + 4);
      }
      result = memcpy(result, v20, v21);
      *((_QWORD *)a2 + 4) += v21;
    }
  }
  return result;
}

void CA::Render::`anonymous namespace'::cg_image_deleted(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  malloc_zone_t *malloc_zone;

  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::image_cache_lock);
  v5 = x_hash_table_remove(CA::Render::image_cache, a4);
  if (v5)
  {
    v6 = (_QWORD *)v5;
    if (*(double *)(v5 + 32) > 0.0)
    {
      v8 = *(_QWORD *)v5;
      v7 = *(_QWORD **)(v5 + 8);
      *(_QWORD *)(v8 + 8) = v7;
      *v7 = v8;
      *(_QWORD *)v5 = v5;
      *(_QWORD *)(v5 + 8) = v5;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::image_cache_lock);
    v9 = (unsigned int *)v6[3];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
    }
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, v6);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::image_cache_lock);
  }
}

void CA::Render::Image::finalize(CA::Render::Image *this)
{
  const void *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (const void *)*((_QWORD *)this + 17);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)this + 17) = 0;
  }
  if (*((_QWORD *)this + 16))
  {
    if (CA::Render::tiled_image_mutex_once[0] != -1)
      dispatch_once_f(CA::Render::tiled_image_mutex_once, 0, (dispatch_function_t)CA::Render::Image::tiled_image_mutex_init);
    pthread_mutex_lock(&CA::Render::Image::_tiled_image_lock);
    while (1)
    {
      v3 = (unsigned int *)*((_QWORD *)this + 16);
      if (!v3)
        break;
      *((_QWORD *)this + 16) = *((_QWORD *)v3 + 16);
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
    *((_QWORD *)this + 16) = 0;
    pthread_mutex_unlock(&CA::Render::Image::_tiled_image_lock);
  }
  if ((*((_BYTE *)this + 15) & 1) != 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Image::_subimage_table_lock);
    if (CA::Render::Image::_subimage_table)
      x_hash_table_remove_if (CA::Render::Image::_subimage_table, (unsigned int (*)(_QWORD, _QWORD, uint64_t))CA::Render::Image::SubimageKey::delete_images, (uint64_t)this);
    *((_DWORD *)this + 3) &= ~0x1000000u;
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Image::_subimage_table_lock);
  }
  CA::Render::post_notification(3u, (unint64_t)this, 0, 1);
  v7 = (unsigned int *)*((_QWORD *)this + 15);
  if (v7)
  {
    *((_QWORD *)this + 15) = 0;
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
  }
  CA::Render::Image::release_data(this);
}

void CA::Render::Shmem::~Shmem(CA::Render::Shmem *this)
{
  malloc_zone_t *malloc_zone;

  CA::Render::Shmem::~Shmem(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  const CA::Render::Object *v2;
  void (*v3)(_QWORD, _QWORD);
  int v4;
  uint64_t v5;
  int *v6;
  unint64_t v7;
  unint64_t v8;

  *(_QWORD *)this = off_1E1598AD0;
  CA::Render::post_notification(3u, (unint64_t)this, 0, 1);
  v2 = (const CA::Render::Object *)*((unsigned int *)this + 8);
  if ((_DWORD)v2)
    mach_port_deallocate(*MEMORY[0x1E0C83DA0], (mach_port_name_t)v2);
  v3 = (void (*)(_QWORD, _QWORD))*((_QWORD *)this + 5);
  if (v3)
    v3(*((_QWORD *)this + 3), *((_QWORD *)this + 6));
  v4 = *((_DWORD *)this + 3);
  if ((v4 & 0x2400) == 0x2000)
  {
    v5 = *((_QWORD *)this + 2);
    v6 = CAGetStatsStruct(0);
    v7 = *((_QWORD *)v6 + 1);
    v8 = *(_QWORD *)v6 - v5;
    *(_QWORD *)v6 = v8;
    if (v8 > v7)
      *((_QWORD *)v6 + 1) = v8;
    v4 = *((_DWORD *)this + 3);
  }
  --dword_1ECDC7CE4;
  *(_QWORD *)this = off_1E1598C30;
  if (v4 < 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, v2);
}

uint64_t CA::Render::release_deallocate(CA::Render *this, _QWORD *a2, void *a3)
{
  return mach_vm_deallocate(*MEMORY[0x1E0C83DA0], a2[3] & -*MEMORY[0x1E0C85AD8], ((*MEMORY[0x1E0C85AD8] + a2[3] + a2[2] - 1) & -*MEMORY[0x1E0C85AD8]) - (a2[3] & -*MEMORY[0x1E0C85AD8]));
}

unsigned int *CA::Render::Surface::unref_image_data(unsigned int *this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = this + 81;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (this)
  {
    if (v2 == 1)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 8))(this);
  }
  return this;
}

uint64_t CA::Render::Surface::finalize(CA::Render::Surface *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  CA::Render::post_notification(3u, (unint64_t)this, 0, 1);
  v2 = (unsigned int *)*((_QWORD *)this + 12);
  if (v2)
  {
    *((_QWORD *)this + 12) = 0;
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  v6 = (unsigned int *)*((_QWORD *)this + 20);
  if (v6)
  {
    *((_QWORD *)this + 20) = 0;
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
  }
  return (*(uint64_t (**)(CA::Render::Surface *))(*(_QWORD *)this + 184))(this);
}

void CA::Render::Surface::~Surface(CA::Render::Surface *this)
{
  malloc_zone_t *malloc_zone;

  CA::Render::Surface::~Surface(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  uint64_t v2;
  __IOSurface *v3;
  const void *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  const void *v13;
  const void *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;

  *(_QWORD *)this = off_1E1598F88;
  v2 = *((_QWORD *)this + 39);
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t))(v2 + 16))(v2, 1);
    _Block_release(*((const void **)this + 39));
    *((_QWORD *)this + 39) = 0;
  }
  v3 = (__IOSurface *)*((_QWORD *)this + 14);
  if (v3)
  {
    if ((*((_BYTE *)this + 14) & 0x80) != 0)
    {
      IOSurfaceDecrementUseCount(v3);
      v3 = (__IOSurface *)*((_QWORD *)this + 14);
    }
    CFRelease(v3);
  }
  v4 = (const void *)*((_QWORD *)this + 15);
  if (v4)
    CFRelease(v4);
  v5 = (unsigned int *)*((_QWORD *)this + 21);
  if (v5)
  {
    v6 = v5 + 4;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  v9 = (unsigned int *)*((_QWORD *)this + 20);
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
  }
  v13 = (const void *)*((_QWORD *)this + 19);
  if (v13)
    CFRelease(v13);
  v14 = (const void *)*((_QWORD *)this + 18);
  if (v14)
    CFRelease(v14);
  v15 = (unsigned int *)*((_QWORD *)this + 12);
  if (v15)
  {
    v16 = v15 + 2;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 16))(v15);
  }
  --dword_1ECDC7CF4;
  CA::Render::Texture::~Texture((CGColorSpaceRef *)this);
}

void CA::Render::KeyframeAnimation::encode(const CA::Render::Object **this, CA::Render::Encoder *a2)
{
  char v4;
  _BYTE *v5;

  CA::Render::PropertyAnimation::encode((CA::Render::PropertyAnimation *)this, a2);
  CA::Render::Encoder::encode_object(a2, this[14]);
  CA::Render::Encoder::encode_object(a2, this[15]);
  CA::Render::Encoder::encode_object(a2, this[16]);
  CA::Render::Encoder::encode_object(a2, this[17]);
  v4 = *((_BYTE *)this + 144);
  v5 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v5 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 1);
    v5 = (_BYTE *)*((_QWORD *)a2 + 4);
  }
  *((_QWORD *)a2 + 4) = v5 + 1;
  *v5 = v4;
  CA::Render::Encoder::encode_object(a2, this[19]);
  CA::Render::Encoder::encode_object(a2, this[20]);
  CA::Render::Encoder::encode_object(a2, this[21]);
}

void CA::Render::Array::encode(CA::Render::Array *this, CA::Render::Encoder *a2)
{
  int v4;
  _DWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  int v9;
  _QWORD *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v4 = *((_DWORD *)this + 3) >> 8;
  v5 = (_DWORD *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v5 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 4);
    v5 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v5 = v4;
  v6 = *((_QWORD *)a2 + 4);
  v7 = *((_QWORD *)a2 + 5);
  v8 = (_DWORD *)(v6 + 4);
  *((_QWORD *)a2 + 4) = v6 + 4;
  v9 = *((_DWORD *)this + 4);
  if (v6 + 8 > v7)
  {
    CA::Render::Encoder::grow(a2, 4);
    v8 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v8 = v9;
  v10 = (_QWORD *)(*((_QWORD *)a2 + 4) + 4);
  *((_QWORD *)a2 + 4) = v10;
  v11 = *((_DWORD *)this + 4);
  if ((*((_BYTE *)this + 13) & 1) != 0)
  {
    if (v11)
    {
      v13 = 0;
      do
      {
        v14 = *((_QWORD *)this + v13 + 3);
        if ((unint64_t)(v10 + 1) > *((_QWORD *)a2 + 5))
        {
          CA::Render::Encoder::grow(a2, 8);
          v10 = (_QWORD *)*((_QWORD *)a2 + 4);
        }
        *v10 = v14;
        v10 = (_QWORD *)(*((_QWORD *)a2 + 4) + 8);
        *((_QWORD *)a2 + 4) = v10;
        ++v13;
      }
      while (v13 < *((unsigned int *)this + 4));
    }
  }
  else if (v11)
  {
    v12 = 0;
    do
      CA::Render::Encoder::encode_object(a2, *((const CA::Render::Object **)this + v12++ + 3));
    while (v12 < *((unsigned int *)this + 4));
  }
}

void *CA::Render::Vector::encode(CA::Render::Vector *this, CA::Render::Encoder *a2)
{
  int v4;
  _DWORD *v5;
  unint64_t v6;
  void *v7;
  size_t v8;
  void *result;

  v4 = *((_DWORD *)this + 4);
  v5 = (_DWORD *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v5 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 4);
    v5 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v5 = v4;
  v6 = *((_QWORD *)a2 + 5);
  v7 = (void *)(*((_QWORD *)a2 + 4) + 4);
  *((_QWORD *)a2 + 4) = v7;
  v8 = 8 * *((unsigned int *)this + 4);
  if ((unint64_t)v7 + v8 > v6)
  {
    CA::Render::Encoder::grow(a2, 8 * *((unsigned int *)this + 4));
    v7 = (void *)*((_QWORD *)a2 + 4);
  }
  result = memcpy(v7, (char *)this + 24, v8);
  *((_QWORD *)a2 + 4) += v8;
  return result;
}

void *CA::Render::PresentationModifier::encode(CA::Render::PresentationModifier *this, CA::Render::Encoder *a2)
{
  uint64_t v4;
  _QWORD *v5;
  void *result;
  int v7;
  _DWORD *v8;

  CA::Render::Object::encode(this, a2);
  CA::Render::Encoder::encode_object(a2, *((const CA::Render::Object **)this + 2));
  v4 = *((_QWORD *)this + 3);
  v5 = (_QWORD *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v5 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 8);
    v5 = (_QWORD *)*((_QWORD *)a2 + 4);
  }
  *v5 = v4;
  *((_QWORD *)a2 + 4) += 8;
  result = CA::Render::Encoder::encode_keypath(a2, (void *const *)this + 4);
  v7 = *((_DWORD *)this + 10);
  v8 = (_DWORD *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v8 + 1) > *((_QWORD *)a2 + 5))
  {
    result = CA::Render::Encoder::grow(a2, 4);
    v8 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v8 = v7;
  *((_QWORD *)a2 + 4) += 4;
  return result;
}

CA::Render::Encoder *CA::Render::Encoder::encode_keypath(CA::Render::Encoder *this, void *const *a2)
{
  CA::Render::Encoder *v3;
  unsigned int *v4;
  uint64_t v5;
  _WORD *v6;
  unint64_t i;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  _BYTE *v11;
  unsigned int *v12;

  v3 = this;
  v4 = (unsigned int *)*a2;
  if (*a2)
  {
    if ((v4 & 1) != 0)
      v5 = 1;
    else
      v5 = *v4;
  }
  else
  {
    v5 = 0;
  }
  v6 = (_WORD *)*((_QWORD *)this + 4);
  if ((unint64_t)(v6 + 1) > *((_QWORD *)this + 5))
  {
    this = (CA::Render::Encoder *)CA::Render::Encoder::grow(this, 2);
    v6 = (_WORD *)*((_QWORD *)v3 + 4);
  }
  *v6 = v5;
  *((_QWORD *)v3 + 4) += 2;
  if (v5)
  {
    for (i = 0; v5 != i; ++i)
    {
      v8 = (unint64_t)*a2;
      if (!*a2)
        goto LABEL_14;
      if ((v8 & 1) != 0)
      {
        v10 = v8 >> 1;
        if (i)
          v9 = 0;
        else
          v9 = v10;
        goto LABEL_18;
      }
      if (i < *(unsigned int *)v8)
        v9 = *(_DWORD *)(v8 + 4 * i + 4);
      else
LABEL_14:
        v9 = 0;
LABEL_18:
      v11 = (_BYTE *)*((_QWORD *)v3 + 4);
      if ((unint64_t)(v11 + 1) > *((_QWORD *)v3 + 5))
      {
        this = (CA::Render::Encoder *)CA::Render::Encoder::grow(v3, 1);
        v11 = (_BYTE *)*((_QWORD *)v3 + 4);
      }
      *((_QWORD *)v3 + 4) = v11 + 1;
      *v11 = (v9 & 0x40000000) >> 30;
      if ((v9 & 0x40000000) != 0)
      {
        v12 = (unsigned int *)*((_QWORD *)v3 + 4);
        if ((unint64_t)(v12 + 1) > *((_QWORD *)v3 + 5))
        {
          this = (CA::Render::Encoder *)CA::Render::Encoder::grow(v3, 4);
          v12 = (unsigned int *)*((_QWORD *)v3 + 4);
        }
        *v12 = v9 & 0xBFFFFFFF;
        *((_QWORD *)v3 + 4) += 4;
      }
      else
      {
        this = CA::Render::Encoder::encode_atom(v3, v9);
      }
    }
  }
  return this;
}

CA::Render::Encoder *CA::Render::Encoder::encode_atom(CA::Render::Encoder *this, unsigned int a2)
{
  CA::Render::Encoder *v3;
  _BYTE *v4;
  _BYTE *v5;
  const __CFString *String;
  char *CStringPtr;
  size_t v8;
  _BYTE *v9;
  _WORD *v10;
  char v11[264];
  uint64_t v12;

  v3 = this;
  v12 = *MEMORY[0x1E0C80C00];
  if (a2 > 0x25E)
  {
    v5 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)(v5 + 1) > *((_QWORD *)this + 5))
    {
      CA::Render::Encoder::grow(this, 1);
      v5 = (_BYTE *)*((_QWORD *)v3 + 4);
    }
    *((_QWORD *)v3 + 4) = v5 + 1;
    *v5 = -1;
    String = CAAtomGetString(a2);
    CStringPtr = (char *)CFStringGetCStringPtr(String, 0x8000100u);
    if (CStringPtr
      || (MEMORY[0x1E0C80A78](0),
          CStringPtr = v11,
          memset(v11, 0, 256),
          CFStringGetCString(String, v11, 256, 0x8000100u)))
    {
      v8 = strlen(CStringPtr);
    }
    else
    {
      CStringPtr = 0;
      v8 = 0;
    }
    return (CA::Render::Encoder *)CA::Render::Encoder::encode_data(v3, CStringPtr, v8);
  }
  else if (a2 > 0xFD)
  {
    v9 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)(v9 + 1) > *((_QWORD *)this + 5))
    {
      this = (CA::Render::Encoder *)CA::Render::Encoder::grow(this, 1);
      v9 = (_BYTE *)*((_QWORD *)v3 + 4);
    }
    *((_QWORD *)v3 + 4) = v9 + 1;
    *v9 = -2;
    v10 = (_WORD *)*((_QWORD *)v3 + 4);
    if ((unint64_t)(v10 + 1) > *((_QWORD *)v3 + 5))
    {
      this = (CA::Render::Encoder *)CA::Render::Encoder::grow(v3, 2);
      v10 = (_WORD *)*((_QWORD *)v3 + 4);
    }
    *v10 = a2;
    *((_QWORD *)v3 + 4) += 2;
  }
  else
  {
    v4 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)(v4 + 1) > *((_QWORD *)this + 5))
    {
      this = (CA::Render::Encoder *)CA::Render::Encoder::grow(this, 1);
      v4 = (_BYTE *)*((_QWORD *)v3 + 4);
    }
    *((_QWORD *)v3 + 4) = v4 + 1;
    *v4 = a2;
  }
  return this;
}

void CA::Render::KeyValue::encode(CA::Render::KeyValue *this, CA::Render::Encoder *a2)
{
  CA::Render::Encoder::encode_atom(a2, *((_DWORD *)this + 4));
  CA::Render::Encoder::encode_object(a2, *((const CA::Render::Object **)this + 3));
}

double CA::Render::Image::encode(CA::Render::Image *this, CA::Render::Encoder *a2)
{
  int v4;
  _DWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  char v9;
  char v10;
  _BYTE *v11;
  int v12;
  _DWORD *v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  int v17;
  _QWORD *v18;
  unint64_t v19;
  double result;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  const void *v36;
  size_t v37;
  _OWORD v38[16];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)this + 3) >> 8;
  v5 = (_DWORD *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v5 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 4);
    v5 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v5 = v4;
  v6 = *((_QWORD *)a2 + 4);
  v7 = *((_QWORD *)a2 + 5);
  v8 = (_BYTE *)(v6 + 4);
  *((_QWORD *)a2 + 4) = v6 + 4;
  v9 = *((_BYTE *)this + 152);
  if (v6 + 5 > v7)
  {
    CA::Render::Encoder::grow(a2, 1);
    v8 = (_BYTE *)*((_QWORD *)a2 + 4);
  }
  *((_QWORD *)a2 + 4) = v8 + 1;
  *v8 = v9;
  v10 = *((_BYTE *)this + 153);
  v11 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v11 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 1);
    v11 = (_BYTE *)*((_QWORD *)a2 + 4);
  }
  *((_QWORD *)a2 + 4) = v11 + 1;
  *v11 = v10;
  v12 = *((_DWORD *)this + 4);
  v13 = (_DWORD *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v13 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 4);
    v13 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v13 = v12;
  v14 = *((_QWORD *)a2 + 4);
  v15 = *((_QWORD *)a2 + 5);
  v16 = (_DWORD *)(v14 + 4);
  *((_QWORD *)a2 + 4) = v14 + 4;
  v17 = *((_DWORD *)this + 5);
  if (v14 + 8 > v15)
  {
    CA::Render::Encoder::grow(a2, 4);
    v16 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v16 = v17;
  v18 = (_QWORD *)(*((_QWORD *)a2 + 4) + 4);
  *((_QWORD *)a2 + 4) = v18;
  v19 = *((unsigned __int8 *)this + 153);
  if (v19 <= 0x20)
  {
    memset(v38, 0, sizeof(v38));
    if ((_DWORD)v19)
    {
      memcpy(v38, (char *)this + 160, 8 * v19);
      v21 = *((unsigned int *)this + 5);
      if (!is_mul_ok(*(unint64_t *)&v38[0], v21))
        goto LABEL_12;
      v22 = *(_QWORD *)&v38[0] * v21;
      if (!(*(_QWORD *)&v38[0] * v21))
        goto LABEL_12;
      v23 = 1;
      while (v19 != v23)
      {
        v24 = v23;
        if (v21 <= 1)
          v21 = 1;
        else
          v21 = v21 >> 1;
        v25 = *((_QWORD *)v38 + v23);
        if (is_mul_ok(v25, v21))
        {
          v26 = v25 * v21;
          if (v25 * v21)
          {
            v23 = v24 + 1;
            v27 = __CFADD__(v22, v26);
            v22 += v26;
            if (!v27)
              continue;
          }
        }
        if (v24 < v19)
          goto LABEL_12;
        break;
      }
      v28 = 0;
      do
      {
        v29 = *((_QWORD *)this + v28 + 20);
        if ((unint64_t)(v18 + 1) > *((_QWORD *)a2 + 5))
        {
          CA::Render::Encoder::grow(a2, 8);
          v18 = (_QWORD *)*((_QWORD *)a2 + 4);
        }
        *v18 = v29;
        v18 = (_QWORD *)(*((_QWORD *)a2 + 4) + 8);
        *((_QWORD *)a2 + 4) = v18;
        ++v28;
      }
      while (v28 < *((unsigned __int8 *)this + 153));
    }
    v30 = *((_QWORD *)a2 + 5);
    if (*((_QWORD *)this + 15))
    {
      if ((unint64_t)v18 + 1 > v30)
      {
        CA::Render::Encoder::grow(a2, 1);
        v18 = (_QWORD *)*((_QWORD *)a2 + 4);
      }
      *((_QWORD *)a2 + 4) = (char *)v18 + 1;
      *(_BYTE *)v18 = 1;
      CA::Render::Encoder::encode_object(a2, *((const CA::Render::Object **)this + 15));
      v31 = *((_QWORD *)this + 15);
      if ((*(_BYTE *)(v31 + 13) & 8) != 0)
      {
        v32 = *(unsigned int **)(v31 + 24);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 + 1, v32));
      }
    }
    else
    {
      if ((unint64_t)v18 + 1 > v30)
      {
        CA::Render::Encoder::grow(a2, 1);
        v18 = (_QWORD *)*((_QWORD *)a2 + 4);
      }
      *((_QWORD *)a2 + 4) = (char *)v18 + 1;
      *(_BYTE *)v18 = 0;
      v34 = (unsigned int *)((char *)this + 148);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 + 1, v34));
      v36 = (const void *)*((_QWORD *)this + 12);
      v37 = CA::Render::Image::data_size(this);
      CA::Render::Encoder::encode_data_async(a2, v36, v37, (uint64_t (*)(const void *, void *))CA::Render::release_image_data, this);
    }
  }
LABEL_12:
  *(_QWORD *)&result = CA::Render::Texture::encode((CGColorSpaceRef *)this, a2).n128_u64[0];
  return result;
}

_QWORD *CA::Render::Shmem::encode(CA::Render::Shmem *this, CA::Render::Encoder *a2)
{
  CA::Render::Shmem *v3;
  unsigned int v4;
  unsigned int *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  mach_port_name_t v13;
  _QWORD *result;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;

  v3 = this;
  v4 = *((_DWORD *)this + 3);
  v5 = (unsigned int *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v5 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 4);
    v5 = (unsigned int *)*((_QWORD *)a2 + 4);
  }
  *v5 = v4 >> 8;
  v6 = *((_QWORD *)a2 + 4);
  v7 = (_QWORD *)(v6 + 4);
  *((_QWORD *)a2 + 4) = v6 + 4;
  if ((v4 & 0x300) != 0)
  {
    v8 = *((_QWORD *)v3 + 2);
    if ((unint64_t)(v6 + 12) > *((_QWORD *)a2 + 5))
    {
      CA::Render::Encoder::grow(a2, 8);
      v7 = (_QWORD *)*((_QWORD *)a2 + 4);
    }
    *v7 = v8;
    v9 = *((_QWORD *)a2 + 4);
    v10 = *((_QWORD *)a2 + 5);
    v11 = (uint64_t *)(v9 + 8);
    *((_QWORD *)a2 + 4) = v9 + 8;
    v12 = (*MEMORY[0x1E0C85AD8] - 1) & *((_QWORD *)v3 + 3);
    if (v9 + 16 > v10)
    {
      CA::Render::Encoder::grow(a2, 8);
      v11 = (uint64_t *)*((_QWORD *)a2 + 4);
    }
    *v11 = v12;
    *((_QWORD *)a2 + 4) += 8;
    v13 = CA::Render::Shmem::port((mach_port_t *)v3);
    CA::Render::Encoder::encode_port_send_right(a2, v13, 0);
    result = (_QWORD *)x_heap_malloc_small_(*((uint64_t **)a2 + 1), 0x10uLL);
    v15 = (unsigned int *)((char *)v3 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
    if (!v16)
    {
      v3 = 0;
      do
        v21 = __ldaxr(v15);
      while (__stlxr(v21 - 1, v15));
    }
    v17 = *((_QWORD *)a2 + 14);
    *result = v3;
    result[1] = v17;
    *((_QWORD *)a2 + 14) = result;
  }
  else
  {
    result = CA::Render::Encoder::encode_data_async(a2, *((const void **)v3 + 3), *((_QWORD *)v3 + 2), (uint64_t (*)(const void *, void *))CA::Render::release_object, v3);
    v18 = (unsigned int *)((char *)v3 + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 + 1, v18));
    if (!v19)
    {
      do
        v20 = __ldaxr(v18);
      while (__stlxr(v20 - 1, v18));
    }
  }
  return result;
}

uint64_t CA::Render::Shmem::port(mach_port_t *object_handle)
{
  uint64_t result;
  mach_port_t *v3;
  vm_prot_t v4;
  memory_object_offset_t v5;
  kern_return_t memory_entry_64;
  NSObject *v7;
  mach_port_t v8;
  memory_object_size_t size;
  uint8_t buf[4];
  memory_object_size_t v11;
  __int16 v12;
  memory_object_offset_t v13;
  __int16 v14;
  vm_prot_t v15;
  __int16 v16;
  mach_port_t v17;
  __int16 v18;
  kern_return_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = object_handle + 8;
  result = object_handle[8];
  if (!(_DWORD)result)
  {
    v4 = (object_handle[3] & 0x100) != 0 ? 5242883 : 5242881;
    v5 = *((_QWORD *)object_handle + 3);
    size = *((_QWORD *)object_handle + 2);
    memory_entry_64 = mach_make_memory_entry_64(*MEMORY[0x1E0C83DA0], &size, v5, v4, v3, 0);
    result = object_handle[8];
    if (!(_DWORD)result)
    {
      if (CADeviceHasInternalBuild::once != -1)
        dispatch_once(&CADeviceHasInternalBuild::once, &__block_literal_global_107);
      if (CADeviceHasInternalBuild::internal)
      {
        x_log_crash("CoreAnimation: mach_make_memory_entry_64 (size %llu, addr 0x%llx, prot 0x%x, port %u) = 0x%x", size, v5, v4, *v3, memory_entry_64);
        abort();
      }
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v7 = x_log_category_render;
        if (os_log_type_enabled((os_log_t)x_log_category_render, OS_LOG_TYPE_ERROR))
        {
          v8 = *v3;
          *(_DWORD *)buf = 134219008;
          v11 = size;
          v12 = 2048;
          v13 = v5;
          v14 = 1024;
          v15 = v4;
          v16 = 1024;
          v17 = v8;
          v18 = 1024;
          v19 = memory_entry_64;
          _os_log_impl(&dword_184457000, v7, OS_LOG_TYPE_ERROR, "CoreAnimation: mach_make_memory_entry_64 (size %llu, addr 0x%llx, prot 0x%x, port %u) = 0x%x", buf, 0x28u);
        }
      }
      return *v3;
    }
  }
  return result;
}

uint64_t CA::Render::Encoder::encode_port_send_right(CA::Render::Encoder *this, mach_port_name_t name, BOOL a3)
{
  BOOL v3;
  mach_port_name_t v4;
  kern_return_t v6;
  uint64_t result;
  uint64_t v8;

  v3 = a3;
  v4 = name;
  if ((*((_BYTE *)this + 64) & 2) != 0 && !a3)
  {
    v6 = mach_port_mod_refs(*MEMORY[0x1E0C83DA0], name, 0, 1);
    v3 = v6 == 0;
    if (v6)
      v4 = 0;
  }
  result = x_heap_malloc_small_(*((uint64_t **)this + 1), 0x30uLL);
  *(_DWORD *)(result + 8) = 2;
  *(_DWORD *)(result + 16) = v4;
  *(_DWORD *)(result + 20) = 19;
  *(_BYTE *)(result + 24) = v3;
  v8 = *((_QWORD *)this + 7);
  *(_QWORD *)result = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = result;
  *((_QWORD *)this + 7) = v8 + 1;
  return result;
}

void CA::Render::Filter::encode(CA::Render::Filter *this, CA::Render::Encoder *a2)
{
  int v4;
  _DWORD *v5;
  uint64_t v6;
  _BYTE *v7;

  v4 = *((_DWORD *)this + 3) >> 8;
  v5 = (_DWORD *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v5 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 4);
    v5 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v5 = v4;
  v6 = *((_QWORD *)a2 + 4);
  v7 = (_BYTE *)(v6 + 4);
  *((_QWORD *)a2 + 4) = v6 + 4;
  if ((*((_BYTE *)this + 14) & 1) != 0)
  {
    CA::Render::Encoder::encode_atom(a2, *((_DWORD *)this + 6));
  }
  else
  {
    if ((unint64_t)(v6 + 5) > *((_QWORD *)a2 + 5))
    {
      CA::Render::Encoder::grow(a2, 1);
      v7 = (_BYTE *)*((_QWORD *)a2 + 4);
    }
    *((_QWORD *)a2 + 4) = v7 + 1;
    *v7 = 1;
    CA::Render::Encoder::encode_atom(a2, *((_DWORD *)this + 6));
    CA::Render::Encoder::encode_object(a2, *((const CA::Render::Object **)this + 4));
    CA::Render::Encoder::encode_object(a2, *((const CA::Render::Object **)this + 5));
  }
}

void *CA::Render::String::encode(CA::Render::String *this, CA::Render::Encoder *a2)
{
  int v4;
  _DWORD *v5;
  unint64_t v6;
  void *v7;
  size_t v8;
  void *result;

  v4 = *((_DWORD *)this + 6);
  v5 = (_DWORD *)*((_QWORD *)a2 + 4);
  if ((unint64_t)(v5 + 1) > *((_QWORD *)a2 + 5))
  {
    CA::Render::Encoder::grow(a2, 4);
    v5 = (_DWORD *)*((_QWORD *)a2 + 4);
  }
  *v5 = v4;
  v6 = *((_QWORD *)a2 + 5);
  v7 = (void *)(*((_QWORD *)a2 + 4) + 4);
  *((_QWORD *)a2 + 4) = v7;
  v8 = *((unsigned int *)this + 6);
  if ((unint64_t)v7 + v8 > v6)
  {
    CA::Render::Encoder::grow(a2, *((unsigned int *)this + 6));
    v7 = (void *)*((_QWORD *)a2 + 4);
  }
  result = memcpy(v7, (char *)this + 28, v8);
  *((_QWORD *)a2 + 4) += v8;
  return result;
}

void CA::Render::release_image_data(CA::Render *this, CA::Render::Image *a2, void *a3)
{
  CA::Render::Image::release_data(a2);
}

_DWORD *CA::Render::Encoder::encode_data_async(CA::Render::Encoder *this, const void *__src, size_t a3, uint64_t (*a4)(const void *, void *), void *a5)
{
  size_t *v9;
  unint64_t v10;
  _QWORD *v11;
  _DWORD *result;
  uint64_t v13;

  if (HIDWORD(a3))
  {
    if (CADeviceHasInternalBuild::once != -1)
      dispatch_once(&CADeviceHasInternalBuild::once, &__block_literal_global_107);
    if (CADeviceHasInternalBuild::internal)
    {
      x_log_crash("Cannot send %zu bytes to the server. This exceeds mach ool capabilities!", a3);
      abort();
    }
  }
  v9 = (size_t *)*((_QWORD *)this + 4);
  v10 = *((_QWORD *)this + 5);
  v11 = v9 + 1;
  if (*MEMORY[0x1E0C85AD8] <= a3)
  {
    if ((unint64_t)v11 > v10)
    {
      CA::Render::Encoder::grow(this, 8);
      v9 = (size_t *)*((_QWORD *)this + 4);
    }
    *v9 = -1;
    *((_QWORD *)this + 4) += 8;
    result = (_DWORD *)x_heap_malloc_small_(*((uint64_t **)this + 1), 0x30uLL);
    result[2] = 1;
    *((_QWORD *)result + 2) = __src;
    *((_QWORD *)result + 3) = a3;
    *((_QWORD *)result + 4) = a4;
    *((_QWORD *)result + 5) = a5;
    v13 = *((_QWORD *)this + 7);
    *(_QWORD *)result = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = result;
    *((_QWORD *)this + 7) = v13 + 1;
  }
  else
  {
    if ((unint64_t)v11 > v10)
    {
      CA::Render::Encoder::grow(this, 8);
      v9 = (size_t *)*((_QWORD *)this + 4);
    }
    *v9 = a3;
    result = (_DWORD *)(*((_QWORD *)this + 4) + 8);
    *((_QWORD *)this + 4) = result;
    if (a3)
    {
      if ((unint64_t)result + a3 > *((_QWORD *)this + 5))
      {
        CA::Render::Encoder::grow(this, a3);
        result = (_DWORD *)*((_QWORD *)this + 4);
      }
      result = memcpy(result, __src, a3);
      *((_QWORD *)this + 4) += a3;
    }
    if (a4)
      return (_DWORD *)a4(__src, a5);
  }
  return result;
}

void *CA::Render::Encoder::grow(CA::Render::Encoder *this, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  size_t v5;
  _BOOL4 v6;
  size_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  size_t v11;
  size_t v12;
  char *v13;
  char *v14;
  void *result;
  int v16;

  v3 = *((_QWORD *)this + 3);
  v4 = *((_QWORD *)this + 5) - v3;
  v5 = *((_QWORD *)this + 4) - v3;
  v6 = v4 < 0;
  v7 = v5 + a2;
  if (__CFADD__(v5, a2))
    v6 = 1;
  v8 = *MEMORY[0x1E0C85AD8] - 1;
  v9 = __CFADD__(v8, 2 * v4);
  v10 = v8 + 2 * v4;
  if (v9)
    v6 = 1;
  v11 = v10 & -*MEMORY[0x1E0C85AD8];
  if (v11 >= v7)
  {
    v12 = v10 & -*MEMORY[0x1E0C85AD8];
  }
  else
  {
    do
    {
      v6 = (v6 | (v11 >> 63)) != 0;
      v11 *= 2;
      v12 = v11;
    }
    while (v11 < v7);
  }
  if (v6)
  {
    x_log_crash("Encoder size overflow, old size = %zu, extra = %zu\n");
    goto LABEL_18;
  }
  v13 = (char *)mmap(0, v12, 3, 4098, 855638016, 0);
  if (v13 == (char *)-1)
  {
    x_log_crash("Failed to allocate %zu bytes, requested = %zu, old size = %zu\n");
LABEL_18:
    abort();
  }
  v14 = v13;
  result = memcpy(v13, *((const void **)this + 3), v5);
  v16 = *((_DWORD *)this + 4);
  if ((v16 & 0x100) != 0)
    result = (void *)munmap(*((void **)this + 3), v4);
  else
    *((_DWORD *)this + 4) = v16 & 0xFFFF00FF | 0x100;
  *((_QWORD *)this + 3) = v14;
  *((_QWORD *)this + 4) = &v14[v5];
  *((_QWORD *)this + 5) = &v14[v12];
  return result;
}

uint64_t CA::OGL::CacheNode::retain_surface(CA::OGL::CacheNode *this, float *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  int v14;
  int v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x1E0C80C00];
  v6 = **((_QWORD **)this + 1);
  v16[0] = 0;
  v16[1] = 0;
  CA::Shape::get_bounds(*((_QWORD *)this + 8), (int *)v16);
  v7 = CA::OGL::Context::cache_fetch(v6, (_DWORD *)this + 57);
  if (!v7)
    return (*(uint64_t (**)(_QWORD, float *, uint64_t))(**((_QWORD **)this + 3) + 80))(*((_QWORD *)this + 3), a2, a3);
  v8 = v7;
  v9 = *(_QWORD *)(v7 + 48);
  if (!v9)
    goto LABEL_9;
  if (!CA::BoundsImpl::contains((_DWORD *)(v9 + 32), v16)
    || ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 808))(v6, v9, 0) & 1) == 0)
  {
    CA::OGL::Context::cache_set_surface(v6, v8, 0);
  }
  v10 = *(_QWORD *)(v8 + 48);
  if (v10)
  {
    v15 = 1065353216;
    v11 = *(_QWORD *)(v10 + 48);
    if (v11 == (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 96))(v6))
    {
      ++*(_DWORD *)v10;
      goto LABEL_13;
    }
  }
  else
  {
LABEL_9:
    ++*(_DWORD *)(v6 + 696);
    if (byte_1ECDC6A63)
      *(double *)(v8 + 56) = *(double *)(v6 + 224) + 0.1;
    v15 = 1065353216;
  }
  v10 = (*(uint64_t (**)(_QWORD, int *, uint64_t))(**((_QWORD **)this + 3) + 80))(*((_QWORD *)this + 3), &v15, a3);
  CA::OGL::Context::cache_set_surface(v6, v8, v10);
LABEL_13:
  if (byte_1ECDC6A63)
  {
    v13 = *(_QWORD *)(*((_QWORD *)this + 2) + 104);
    if (v13)
    {
      if (*(double *)(v6 + 224) >= *(double *)(v8 + 56))
        v14 = 0x40000;
      else
        v14 = 393216;
      *(_DWORD *)(v13 + 220) = *(_DWORD *)(v13 + 220) & 0xFFF1FFFF | v14;
    }
  }
  *(_DWORD *)a2 = v15;
  return v10;
}

void CA::OGL::Context::cache_set_surface(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  malloc_zone_t *malloc_zone;

  v4 = *(_QWORD *)(a2 + 48);
  if (v4 != a3)
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 368) -= *(int *)(v4 + 44) * (uint64_t)*(int *)(v4 + 40) * (*(_BYTE *)(v4 + 74) & 0x1F);
      CA::OGL::Context::release_surface(a1, v4);
      *(_QWORD *)(a2 + 48) = 0;
    }
    if (a3 && (*(_BYTE *)(a1 + 417) & 0x10) == 0)
    {
      v7 = *(int *)(a3 + 44) * (uint64_t)*(int *)(a3 + 40) * (*(_BYTE *)(a3 + 74) & 0x1F);
      v8 = *(_QWORD *)(a1 + 376);
      v9 = *(_QWORD *)(a1 + 368) + v7;
      if (v9 > v8)
      {
        v10 = *(uint64_t **)(a1 + 352);
        if (v10 != (uint64_t *)a2)
        {
          while (1)
          {
            v11 = *(_QWORD *)(a1 + 368);
            if (*((_DWORD *)v10 + 6) == *(_DWORD *)(a2 + 24) || (unint64_t)(v11 + v7) <= *(_QWORD *)(a1 + 376))
              break;
            v12 = (uint64_t *)*v10;
            v13 = v10[6];
            if (v13)
            {
              *(_QWORD *)(a1 + 368) = v11
                                    - *(int *)(v13 + 44) * (uint64_t)*(int *)(v13 + 40) * (*(_BYTE *)(v13 + 74) & 0x1F);
              CA::OGL::Context::release_surface(a1, v13);
              v15 = *v10;
              v14 = (_QWORD *)v10[1];
              *(_QWORD *)(v15 + 8) = v14;
              *v14 = v15;
              *v10 = (uint64_t)v10;
              v10[1] = (uint64_t)v10;
              malloc_zone = (malloc_zone_t *)get_malloc_zone();
              malloc_zone_free(malloc_zone, v10);
            }
            v10 = v12;
            if (v12 == (uint64_t *)a2)
            {
              v11 = *(_QWORD *)(a1 + 368);
              break;
            }
          }
          v8 = *(_QWORD *)(a1 + 376);
          v9 = v11 + v7;
        }
      }
      if (v9 <= v8)
      {
        ++*(_DWORD *)a3;
        *(_QWORD *)(a2 + 48) = a3;
        *(_QWORD *)(a1 + 368) = v9;
      }
    }
  }
}

_DWORD *CA::OGL::ImagingNode::retain_surface(CA::OGL::ImagingNode *this, float *a2, unsigned int a3)
{
  uint64_t v4;
  int v5;
  _DWORD *v6;
  float v7;
  _DWORD *v8;
  float v10;
  void (**v11)(CA::OGL::RenderSurface *__hidden);
  CA::OGL::ImagingNode *v12;
  int v13;
  int v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = **((_QWORD **)this + 1);
  v10 = 0.0;
  ++*(_DWORD *)(v4 + 724);
  if ((*((_BYTE *)this + 213) & 1) != 0)
  {
    v6 = (_DWORD *)(*(uint64_t (**)(_QWORD, float *))(**((_QWORD **)this + 3) + 80))(*((_QWORD *)this + 3), &v10);
    v7 = v10;
    goto LABEL_9;
  }
  v5 = *((_DWORD *)this + 54) & 0x3FFFFF;
  v11 = &off_1E1595028;
  v12 = this;
  v13 = 1;
  v14 = v5;
  v15 = 0;
  v16 = 0;
  CA::OGL::ImagingNode::render((uint64_t)this, (uint64_t)&v11, a3);
  v6 = v15;
  if (v15)
  {
    v7 = *(float *)&v16;
    v11 = &off_1E1595028;
    v8 = v15;
LABEL_8:
    *(_WORD *)((char *)v8 + 75) &= ~0x400u;
    CA::OGL::Context::pop_surface(**((CA::OGL::Context ***)v12 + 1));
    goto LABEL_9;
  }
  v6 = *(_DWORD **)(v4 + 264);
  if (v6
    || (v6 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 728))(v4),
        (*(_QWORD *)(v4 + 264) = v6) != 0))
  {
    ++*v6;
  }
  v8 = v15;
  v11 = &off_1E1595028;
  v7 = 1.0;
  if (v15)
    goto LABEL_8;
LABEL_9:
  --*(_DWORD *)(v4 + 724);
  *a2 = v7;
  return v6;
}

void CA::OGL::RenderSurface::~RenderSurface(CA::OGL::RenderSurface *this)
{
  uint64_t v1;

  *(_QWORD *)this = &off_1E1595028;
  v1 = *((_QWORD *)this + 3);
  if (v1)
  {
    *(_WORD *)(v1 + 75) &= ~0x400u;
    CA::OGL::Context::pop_surface(**(CA::OGL::Context ***)(*((_QWORD *)this + 1) + 8));
  }
}

{
  CA::OGL::RenderSurface::~RenderSurface(this);
  JUMPOUT(0x186DBD990);
}

_DWORD *CA::OGL::LayerNode::retain_surface(CA::OGL::LayerNode *this, float *a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  _QWORD *v10;
  _DWORD *v11;
  _QWORD **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  uint64_t v18;
  os_unfair_lock_s *v19;
  const double *v20;
  _QWORD *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  const CA::Render::Layer *v27;
  CA::Render::BackdropLayer *v28;
  uint64_t v29;
  float64x2_t *v30;
  uint64_t v31;
  const double *v32;
  _QWORD *v33;
  uint64_t v34;
  CA::Render::BackdropLayer *v35;
  float64x2_t v36;
  float64x2_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 2);
  v5 = *(_QWORD *)(v4 + 32);
  if ((v5 & 8) != 0)
  {
    v9 = *((_QWORD *)this + 1);
    v10 = *(_QWORD **)v9;
    v11 = *(_DWORD **)(*(_QWORD *)v9 + 264);
    if (v11
      || (v11 = (_DWORD *)(*(uint64_t (**)(_QWORD *, float *))(*v10 + 728))(v10, a2), (v10[33] = v11) != 0))
    {
      ++*v11;
    }
    return v11;
  }
  if ((*(_WORD *)(v4 + 40) & 8) == 0)
    return CA::OGL::ImagingNode::retain_surface(this, a2, a3);
  if ((v5 & 0x2000013C0) != 0)
    return CA::OGL::ImagingNode::retain_surface(this, a2, a3);
  v12 = (_QWORD **)*((_QWORD *)this + 1);
  if ((v5 & 0x20) != 0)
  {
    v13 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 128);
    if (v13)
    {
      if (*(_QWORD *)(v13 + 80))
        return CA::OGL::ImagingNode::retain_surface(this, a2, a3);
    }
  }
  v14 = *(_QWORD *)(v4 + 16);
  if (v14)
  {
    if (*(_QWORD *)(v14 + 144))
      return CA::OGL::ImagingNode::retain_surface(this, a2, a3);
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 128);
  if (v15)
  {
    if (*(float *)(v15 + 228) != 0.0)
      return CA::OGL::ImagingNode::retain_surface(this, a2, a3);
  }
  v16 = *(_QWORD *)(v14 + 256);
  if (!v16)
    return CA::OGL::ImagingNode::retain_surface(this, a2, a3);
  v17 = (os_unfair_lock_s *)(v16 + 36);
  os_unfair_lock_lock((os_unfair_lock_t)(v16 + 36));
  v18 = *(_QWORD *)(v16 + 40);
  if (!v18)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v16 + 36));
    return CA::OGL::ImagingNode::retain_surface(this, a2, a3);
  }
  v19 = (os_unfair_lock_s *)(v18 + 40);
  os_unfair_lock_lock((os_unfair_lock_t)(v18 + 40));
  v21 = *v12;
  v22 = *(_QWORD *)(v18 + 48);
  if (!v22)
    goto LABEL_21;
  if (*(_QWORD **)(v22 + 8) != v21)
  {
    v22 = 0;
LABEL_21:
    v23 = 1;
    goto LABEL_22;
  }
  if ((*(_BYTE *)(v22 + 216) & 2) == 0)
    goto LABEL_43;
  v23 = 0;
LABEL_22:
  v24 = *(_QWORD *)(v18 + 64);
  v25 = *(_QWORD *)(v18 + 72);
  v26 = 0.0;
  if (v24 == v25)
    goto LABEL_50;
  while (*(_QWORD *)v24 != *(_QWORD *)(v16 + 24))
  {
    v24 += 168;
    if (v24 == v25)
      goto LABEL_50;
  }
  if (*(_BYTE *)(v24 + 160))
    goto LABEL_50;
  v27 = *(const CA::Render::Layer **)(v4 + 24);
  v28 = (CA::Render::BackdropLayer *)*((_QWORD *)v27 + 16);
  if (v28)
  {
    v28 = *(CA::Render::BackdropLayer **)v28;
    if (v28)
    {
      if (*((_BYTE *)v28 + 12) != 3)
        v28 = 0;
    }
  }
  if ((v23 & 1) == 0 && *(_QWORD *)(v22 + 32) && (*((_BYTE *)v28 + 13) & 0x10) == 0)
  {
    if ((*((_WORD *)this + 62) & 0x100) != 0)
    {
      v29 = v4;
      v30 = (float64x2_t *)v24;
      v34 = v22;
      v35 = v28;
      v31 = *((_QWORD *)this + 10);
      if ((*(_BYTE *)(v31 + 144) & 0x10) == 0 || CA::Mat4Impl::mat4_is_rectilinear(*((CA::Mat4Impl **)this + 10), v20))
      {
        v36 = 0u;
        v37 = 0u;
        CA::Render::BackdropLayer::get_backdrop_bounds(v35, v27, (CA::Rect *)&v36);
        CA::BoundsImpl::intersect((uint64_t)&v36, v30[1], v30[2]);
        if ((CA::OGL::rect_transform_filter_bits((float64x2_t *)v31, v32, v36, v37, 1.0, 1.0) & 9) != 0)
        {
          v11 = 0;
          v26 = 0.0;
          if ((*(_WORD *)(v29 + 40) & 0x3C0) != 0 || *((_QWORD *)this + 11) != 0x3C003C003C003C00)
            goto LABEL_51;
          goto LABEL_57;
        }
        if (*((_QWORD *)this + 11) == 0x3C003C003C003C00)
        {
LABEL_57:
          v26 = *(float *)(v34 + 28);
          v11 = *(_DWORD **)(v34 + 40);
          if (v11)
            ++*v11;
          goto LABEL_51;
        }
LABEL_43:
        v11 = 0;
        v26 = 0.0;
        goto LABEL_51;
      }
    }
LABEL_50:
    v11 = 0;
    goto LABEL_51;
  }
  if ((*(_BYTE *)(v4 + 32) & 0x20) != 0)
    goto LABEL_50;
  v11 = (_DWORD *)v21[33];
  if (v11
    || (v33 = v21, v11 = (_DWORD *)(*(uint64_t (**)(_QWORD *))(*v21 + 728))(v21), (v33[33] = v11) != 0))
  {
    ++*v11;
  }
  v26 = 1.0;
LABEL_51:
  os_unfair_lock_unlock(v19);
  os_unfair_lock_unlock(v17);
  if (!v11)
    return CA::OGL::ImagingNode::retain_surface(this, a2, a3);
  if (v26 != 1.0 && (*((_BYTE *)this + 223) & 1) == 0)
  {
    CA::OGL::Context::release_surface(**((_QWORD **)this + 1), (uint64_t)v11);
    return CA::OGL::ImagingNode::retain_surface(this, a2, a3);
  }
  *a2 = v26;
  return v11;
}

void CA::OGL::Context::collect(CA::OGL::Context *this, char a2)
{
  uint64_t v4;
  double v5;
  uint64_t *v6;
  uint64_t *v7;
  void *v8;
  malloc_zone_t *malloc_zone;
  uint64_t *v10;
  uint64_t v11;
  double v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  malloc_zone_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t **v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  malloc_zone_t *v41;
  _QWORD *v42;
  uint64_t *v43;
  _QWORD *v44;
  unsigned int v45;
  uint64_t **v46;
  uint64_t v47;
  uint64_t *v48;
  malloc_zone_t *v49;
  _QWORD *v50;
  uint64_t v51;
  unsigned int v52;
  _QWORD *v53;
  malloc_zone_t *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t **v57;
  uint64_t v58;
  uint64_t *v59;
  malloc_zone_t *v60;
  CA::WindowServer::Surface *v61;
  CA::WindowServer::Surface *v62;
  uint64_t v63;
  malloc_zone_t *v64;
  uint64_t *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t **v69;
  _QWORD *v70;
  malloc_zone_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t **v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  malloc_zone_t *v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  int v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  int v87;
  uint64_t v88;
  unsigned int *v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  unsigned int *v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int v97;
  char *v98;
  char *v99;
  char **v100;
  char *v101;
  uint64_t v102;
  malloc_zone_t *v103;
  uint64_t v104;
  uint64_t *v105;
  BOOL v106;
  unsigned int v107;
  _DWORD *v108;
  uint64_t *v109;
  uint64_t *v110;
  _QWORD *v111;
  uint64_t v112;
  double v113;
  uint64_t v114;

  v114 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 48);
  if (v4)
  {
    v5 = *((double *)this + 28);
    v112 = 0;
    v113 = 0.0;
    if (v5 != 0.0)
    {
      v113 = v5 + -5.0;
      if (v5 + -5.0 > *(double *)(v4 + 32))
      {
        v112 = v4;
        *(_QWORD *)(v4 + 32) = 0x7FF0000000000000;
        os_unfair_lock_lock((os_unfair_lock_t)(v4 + 40));
        x_hash_table_remove_if (*(_QWORD *)(v4 + 16), (unsigned int (*)(_QWORD, _QWORD, uint64_t))CA::Render::TileCache::collect_entry, (uint64_t)&v112);
        os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 40));
      }
    }
    if (*(_QWORD *)(v4 + 24))
    {
      os_unfair_lock_lock((os_unfair_lock_t)(v4 + 40));
      v6 = *(uint64_t **)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
      os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 40));
      if (v6)
      {
        v7 = v6;
        do
        {
          v8 = (void *)*v7;
          CA::Render::tile_cache_entry_release_images((_QWORD *)v4, *v7);
          malloc_zone = (malloc_zone_t *)get_malloc_zone();
          malloc_zone_free(malloc_zone, v8);
          v7 = (uint64_t *)v7[1];
        }
        while (v7);
        do
        {
          v10 = (uint64_t *)v6[1];
          free(v6);
          v6 = v10;
        }
        while (v10);
      }
    }
  }
  v11 = *((_QWORD *)this + 49);
  if (v11)
  {
    if (*(_QWORD *)(v11 + 8))
    {
      v12 = *((double *)this + 28);
      os_unfair_lock_lock((os_unfair_lock_t)(v11 + 24));
      v13 = *(uint64_t **)(v11 + 8);
      *(_QWORD *)(v11 + 8) = 0;
      os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 24));
      if (v13)
      {
        v14 = 15;
        v15 = v13;
        do
        {
          v15 = (uint64_t *)v15[1];
          if (v14 < 2)
            break;
          --v14;
        }
        while (v15);
        if (v15)
        {
          v16 = (_QWORD *)v15[1];
          if (v16)
          {
            x_list_foreach(v16);
            v17 = (_QWORD *)v15[1];
            if (v17)
            {
              do
              {
                v18 = (_QWORD *)v17[1];
                free(v17);
                v17 = v18;
              }
              while (v18);
            }
            v15[1] = 0;
          }
        }
        v19 = v13;
        do
        {
          v20 = *v19;
          v19 = (uint64_t *)v19[1];
          if (*(double *)(v20 + 96) + 60.0 < v12)
          {
            v13 = x_list_remove(v13, v20);
            v21 = *(unsigned int **)(v20 + 104);
            if (v21)
            {
              v22 = v21 + 2;
              do
              {
                v23 = __ldaxr(v22);
                v24 = v23 - 1;
              }
              while (__stlxr(v24, v22));
              if (!v24)
                (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 16))(v21);
              *(_QWORD *)(v20 + 104) = 0;
            }
            v25 = (malloc_zone_t *)get_malloc_zone();
            malloc_zone_free(v25, (void *)v20);
          }
        }
        while (v19);
        os_unfair_lock_lock((os_unfair_lock_t)(v11 + 24));
        if (v13)
        {
          v26 = *(_QWORD *)(v11 + 8);
          v112 = v26;
          if (v26)
          {
            do
            {
              v27 = v26;
              v26 = *(_QWORD *)(v26 + 8);
            }
            while (v26);
            v28 = (uint64_t **)(v27 + 8);
          }
          else
          {
            v28 = (uint64_t **)&v112;
          }
          *v28 = v13;
          *(_QWORD *)(v11 + 8) = v112;
        }
      }
      else
      {
        os_unfair_lock_lock((os_unfair_lock_t)(v11 + 24));
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 24));
    }
    if (*(_QWORD *)(v11 + 16))
    {
      os_unfair_lock_lock((os_unfair_lock_t)(v11 + 24));
      v29 = *(_QWORD **)(v11 + 16);
      *(_QWORD *)(v11 + 16) = 0;
      os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 24));
      while (v29)
      {
        v30 = v29;
        v29 = (_QWORD *)*v29;
        v31 = (void *)v30[14];
        if (v31)
        {
          v30[15] = v31;
          operator delete(v31);
        }
        v32 = (void *)v30[11];
        if (v32)
        {
          v30[12] = v32;
          operator delete(v32);
        }
        v33 = (unsigned int *)v30[4];
        if (v33)
        {
          v34 = v33 + 2;
          do
          {
            v35 = __ldaxr(v34);
            v36 = v35 - 1;
          }
          while (__stlxr(v36, v34));
          if (!v36)
            (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 16))(v33);
        }
        v37 = (unsigned int *)v30[3];
        if (v37)
        {
          v38 = v37 + 2;
          do
          {
            v39 = __ldaxr(v38);
            v40 = v39 - 1;
          }
          while (__stlxr(v40, v38));
          if (!v40)
            (*(void (**)(unsigned int *))(*(_QWORD *)v37 + 16))(v37);
        }
        v41 = (malloc_zone_t *)get_malloc_zone();
        malloc_zone_free(v41, v30);
      }
    }
  }
  os_unfair_lock_lock((os_unfair_lock_t)this + 72);
  v42 = (_QWORD *)*((_QWORD *)this + 39);
  v110 = (uint64_t *)*((_QWORD *)this + 38);
  v111 = v42;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 39) = 0;
  v43 = (uint64_t *)*((_QWORD *)this + 41);
  v109 = v43;
  *((_QWORD *)this + 41) = 0;
  if (v42)
  {
    v44 = v42;
    do
    {
      *(_BYTE *)(*v44 + 60) = 0;
      v44 = (_QWORD *)v44[1];
    }
    while (v44);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)this + 72);
  if ((a2 & 1) != 0)
  {
    v45 = -1;
    if (!v43)
      goto LABEL_70;
  }
  else
  {
    v45 = *((_DWORD *)this + 54);
    if (!v43)
      goto LABEL_70;
  }
  v46 = &v109;
  do
  {
    v47 = *v43;
    if ((*(_WORD *)(*v43 + 75) & 0x100) != 0 && *(_DWORD *)(v47 + 4) > v45)
    {
      v46 = (uint64_t **)(v43 + 1);
    }
    else
    {
      v48 = (uint64_t *)v43[1];
      v49 = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(v49, v43);
      *v46 = v48;
      CA::OGL::Context::release_surface((uint64_t)this, v47);
    }
    v43 = *v46;
  }
  while (*v46);
  v42 = v111;
LABEL_70:
  if (v42)
  {
    v50 = &v111;
    do
    {
      v51 = *v42;
      v52 = *(_DWORD *)(*v42 + 20);
      if (v52 > v45)
      {
        if (v52 == *((_DWORD *)this + 53))
          goto LABEL_79;
      }
      else if (v45 != -1)
      {
        goto LABEL_77;
      }
      if (!(*(unsigned int (**)(CA::OGL::Context *, _QWORD, BOOL))(*(_QWORD *)this + 640))(this, *v42, v52 <= v45))
      {
LABEL_79:
        v50 = v42 + 1;
        goto LABEL_80;
      }
LABEL_77:
      v53 = (_QWORD *)v42[1];
      v54 = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(v54, v42);
      *v50 = v53;
      *(_DWORD *)(v51 + 20) = 0;
      v55 = *(_QWORD *)(v51 + 8);
      if (!v55)
      {
        v42 = v53;
        continue;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v55 + 184))(v55);
      *(_QWORD *)(v51 + 8) = 0;
LABEL_80:
      v42 = (_QWORD *)*v50;
    }
    while (v42);
  }
  v56 = v110;
  if (v110)
  {
    v57 = &v110;
    do
    {
      v58 = *v56;
      if ((v45 == -1 || *(_DWORD *)(v58 + 20) > v45)
        && !(*(unsigned int (**)(CA::OGL::Context *, uint64_t, BOOL))(*(_QWORD *)this + 640))(this, *v56, v45 == -1))
      {
        v57 = (uint64_t **)(v56 + 1);
      }
      else
      {
        v59 = (uint64_t *)v56[1];
        v60 = (malloc_zone_t *)get_malloc_zone();
        malloc_zone_free(v60, v56);
        *v57 = v59;
        (*(void (**)(CA::OGL::Context *, uint64_t))(*(_QWORD *)this + 648))(this, v58);
        v61 = *(CA::WindowServer::Surface **)(v58 + 32);
        if (v61)
          CA::WindowServer::Surface::unref(v61);
        v62 = *(CA::WindowServer::Surface **)(v58 + 40);
        if (v62)
          CA::WindowServer::Surface::unref(v62);
        v63 = *(_QWORD *)(v58 + 8);
        if (v63)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v63 + 184))(v63);
          *(_QWORD *)(v58 + 8) = 0;
        }
        if ((*(_WORD *)(v58 + 58) & 0x200) != 0)
          *((_QWORD *)this + 40) = x_list_remove(*((_QWORD **)this + 40), v58);
        v64 = (malloc_zone_t *)get_malloc_zone();
        malloc_zone_free(v64, (void *)v58);
      }
      v56 = *v57;
    }
    while (*v57);
    v56 = v110;
  }
  v65 = v109;
  v66 = v111;
  if (v109 || v111 || v56)
  {
    os_unfair_lock_lock((os_unfair_lock_t)this + 72);
    v67 = *((_QWORD *)this + 41);
    v112 = v67;
    if (v67)
    {
      do
      {
        v68 = v67;
        v67 = *(_QWORD *)(v67 + 8);
      }
      while (v67);
      v69 = (uint64_t **)(v68 + 8);
    }
    else
    {
      v69 = (uint64_t **)&v112;
    }
    *v69 = v65;
    *((_QWORD *)this + 41) = v112;
    if (v66)
    {
      do
      {
        v70 = (_QWORD *)v66[1];
        if (*(_BYTE *)(*v66 + 61))
        {
          v71 = (malloc_zone_t *)get_malloc_zone();
          malloc_zone_free(v71, v66);
        }
        else
        {
          *(_BYTE *)(*v66 + 60) = 1;
          v66[1] = *((_QWORD *)this + 39);
          *((_QWORD *)this + 39) = v66;
        }
        v66 = v70;
      }
      while (v70);
    }
    v72 = *((_QWORD *)this + 38);
    v111 = 0;
    v112 = v72;
    if (v72)
    {
      do
      {
        v73 = v72;
        v72 = *(_QWORD *)(v72 + 8);
      }
      while (v72);
      v74 = (uint64_t **)(v73 + 8);
    }
    else
    {
      v74 = (uint64_t **)&v112;
    }
    *v74 = v56;
    *((_QWORD *)this + 38) = v112;
    os_unfair_lock_unlock((os_unfair_lock_t)this + 72);
  }
  v75 = (_QWORD *)*((_QWORD *)this + 40);
  if (v75)
  {
    v76 = (_QWORD *)((char *)this + 320);
    do
    {
      v77 = *v75;
      if (*(_DWORD *)(*v75 + 20) > v45
        || v45 == -1
        && !(*(unsigned int (**)(CA::OGL::Context *, _QWORD, uint64_t))(*(_QWORD *)this + 640))(this, *v75, 1))
      {
        v76 = v75 + 1;
      }
      else
      {
        v78 = v75[1];
        v79 = (malloc_zone_t *)get_malloc_zone();
        malloc_zone_free(v79, v75);
        *v76 = v78;
        *(_WORD *)(v77 + 58) &= ~0x200u;
        (*(void (**)(CA::OGL::Context *, uint64_t))(*(_QWORD *)this + 648))(this, v77);
      }
      v75 = (_QWORD *)*v76;
    }
    while (*v76);
  }
  v80 = (_QWORD *)*((_QWORD *)this + 43);
  if (v80)
  {
    v82 = (_QWORD *)*v80;
    v81 = v80[1];
    while (v82 != (_QWORD *)v81)
    {
      v83 = *((unsigned __int16 *)v82 + 13) - 1;
      *((_WORD *)v82 + 13) = v83;
      if (!v83)
      {
        if (v82 == (_QWORD *)v81 || (v84 = v82 + 4, v82 + 4 == (_QWORD *)v81))
        {
          v85 = v82;
        }
        else
        {
          v85 = v82;
          do
          {
            v86 = v84;
            v87 = *((unsigned __int16 *)v82 + 29) - 1;
            *((_WORD *)v82 + 29) = v87;
            if (v87)
            {
              *v85 = *v86;
              v88 = v82[5];
              v82[5] = 0;
              v89 = (unsigned int *)v85[1];
              v85[1] = v88;
              if (v89)
              {
                v90 = v89 + 2;
                do
                {
                  v91 = __ldaxr(v90);
                  v92 = v91 - 1;
                }
                while (__stlxr(v92, v90));
                if (!v92)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v89 + 16))(v89);
              }
              v93 = v82[6];
              v82[6] = 0;
              v94 = (unsigned int *)v85[2];
              v85[2] = v93;
              if (v94)
              {
                v95 = v94 + 2;
                do
                {
                  v96 = __ldaxr(v95);
                  v97 = v96 - 1;
                }
                while (__stlxr(v97, v95));
                if (!v97)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v94 + 16))(v94);
              }
              *((_DWORD *)v85 + 6) = *((_DWORD *)v82 + 14);
              v85 += 4;
            }
            v84 = v86 + 4;
            v82 = v86;
          }
          while (v86 + 4 != (_QWORD *)v81);
          v80 = (_QWORD *)*((_QWORD *)this + 43);
          v81 = v80[1];
        }
        if (v85 != (_QWORD *)v81)
        {
          while ((_QWORD *)v81 != v85)
          {
            v81 -= 32;
            std::__destroy_at[abi:nn180100]<CA::OGL::TransientRenderTexture,0>(v81);
          }
          v80[1] = v85;
        }
        break;
      }
      v82 += 4;
    }
  }
  v98 = (char *)this + 352;
  if (*((CA::OGL::Context **)this + 45) != (CA::OGL::Context *)((char *)this + 352))
  {
    v99 = (char *)*((_QWORD *)this + 44);
    if (v99 != v98)
    {
      while ((a2 & 1) != 0
           || (*((_DWORD *)this + 53) - *((_DWORD *)v99 + 6)) > 0x1D
           || *((_QWORD *)this + 46) > *((_QWORD *)this + 47))
      {
        v101 = *(char **)v99;
        v100 = (char **)*((_QWORD *)v99 + 1);
        *((_QWORD *)v101 + 1) = v100;
        *v100 = v101;
        *(_QWORD *)v99 = v99;
        *((_QWORD *)v99 + 1) = v99;
        v102 = *((_QWORD *)v99 + 6);
        if (v102)
        {
          *((_QWORD *)this + 46) -= *(int *)(v102 + 44) * (uint64_t)*(int *)(v102 + 40) * (*(_BYTE *)(v102 + 74) & 0x1F);
          CA::OGL::Context::release_surface((uint64_t)this, v102);
        }
        v103 = (malloc_zone_t *)get_malloc_zone();
        malloc_zone_free(v103, v99);
        v99 = v101;
        if (v101 == v98)
          goto LABEL_168;
      }
      while (v99 != v98)
      {
        if (*((_QWORD *)v99 + 6) && *((_DWORD *)v99 + 6) < *((_DWORD *)this + 53))
          (*(void (**)(CA::OGL::Context *))(*(_QWORD *)this + 808))(this);
        v99 = (char *)*((_QWORD *)v99 + 1);
      }
    }
  }
LABEL_168:
  v105 = (uint64_t *)((char *)this + 80);
  v104 = *((_QWORD *)this + 10);
  if (v104)
  {
    do
    {
      if ((a2 & 1) != 0 || (v107 = *(_DWORD *)v104 - 1, v106 = *(_DWORD *)v104 == 1, *(_DWORD *)v104 = v107, v106))
      {
        *v105 = *(_QWORD *)(v104 + 8);
        (*(void (**)(CA::OGL::Context *, uint64_t))(*(_QWORD *)this + 736))(this, v104);
      }
      else
      {
        if (v107 <= 2)
          (*(void (**)(CA::OGL::Context *, uint64_t, uint64_t))(*(_QWORD *)this + 808))(this, v104, 2);
        v105 = (uint64_t *)(v104 + 8);
      }
      v104 = *v105;
    }
    while (*v105);
  }
  if ((a2 & 1) != 0)
  {
    v108 = (_DWORD *)*((_QWORD *)this + 33);
    if (v108)
    {
      if (*v108 == 1)
      {
        (*(void (**)(CA::OGL::Context *))(*(_QWORD *)this + 736))(this);
        *((_QWORD *)this + 33) = 0;
      }
    }
  }
}

uint64_t CA::OGL::MetalContext::set_surface_volatile()
{
  return 1;
}

void CA::OGL::MetalContext::finalize_surface(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  malloc_zone_t *malloc_zone;
  NSObject *v6;
  MTLPixelFormat v8;
  int v9;
  int v10;
  int v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD v15[2];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a2 + 224))
    v4 = BYTE3(xmmword_1ECDC6AF0) == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v6 = CA::OGL::MetalContext::_metal_trace_log;
    if (os_signpost_enabled((os_log_t)CA::OGL::MetalContext::_metal_trace_log))
    {
      v9 = *(_DWORD *)(a2 + 24);
      v10 = *(_DWORD *)(a2 + 28);
      v11 = *(_DWORD *)(a2 + 68);
      v12 = CA::OGL::MetalContext::metal_pixel_format_name(*(CA::OGL::MetalContext **)(a2 + 120), v8);
      v13 = *(_QWORD *)(a2 + 224);
      v14 = *(int *)(a2 + 28) * (uint64_t)*(int *)(a2 + 24) * (*(_BYTE *)(a2 + 74) & 0x1F);
      v15[0] = 67241474;
      v15[1] = v9;
      v16 = 1026;
      v17 = v10;
      v18 = 1026;
      v19 = v11;
      v20 = 2082;
      v21 = v12;
      v22 = 2050;
      v23 = v14;
      v24 = 2050;
      v25 = v13;
      _os_signpost_emit_with_name_impl(&dword_184457000, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SurfaceLifetime", " width=%{public,name=width}d height=%{public,name=height}d features=%{public,name=features}#x format=%{public,name=format}s alloc_size=%{public,name=alloc_size}zu begin=%{public,signpost.description:begin_time}llu", (uint8_t *)v15, 0x32u);
    }
  }
  if (*(_QWORD *)(a1 + 3272) == a2)
    *(_QWORD *)(a1 + 3272) = 0;
  CA::OGL::MetalContext::finalize_surface_textures(a1, a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, (void *)a2);
}

void CA::OGL::MetalContext::finalize_surface_textures(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  malloc_zone_t *malloc_zone;

  v4 = *(_QWORD *)(a2 + 200);
  if (v4)
    *(_WORD *)(v4 + 216) |= 1 << *(_WORD *)(a2 + 212);

  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  LOWORD(v5) = *(_WORD *)(a2 + 232);
  if ((__int16)((_WORD)v5 << 12) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = a2 + 8 * v6;

      *(_QWORD *)(v7 + 96) = 0;
      v8 = *(_QWORD *)(v7 + 160);
      if (v8)
      {
        CA::OGL::MetalContext::delete_image(a1, v8);
        v9 = *(void **)(v7 + 160);
        if (v9)
        {
          malloc_zone = (malloc_zone_t *)get_malloc_zone();
          malloc_zone_free(malloc_zone, v9);
        }
        *(_QWORD *)(v7 + 160) = 0;
      }
      ++v6;
      v5 = *(unsigned __int16 *)(a2 + 232);
    }
    while (v6 < v5 << 28 >> 28);
  }
  *(_WORD *)(a2 + 232) = v5 & 0xFFF0;
}

void CA::OGL::MetalContext::delete_image(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  uint64_t i;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  CA::WindowServer::Surface *v14;
  CA::WindowServer::Surface *v15;
  __int16 v16;
  int v17;
  _QWORD v18[6];
  _QWORD block[4];
  __int128 v20;
  uint64_t v21;
  __int128 __dst;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = 0;
    v6 = v4 + 176;
    do
    {
      if ((*(_QWORD *)(v6 + v5) & 0xFFFFFFFFFFFFFFFCLL) == a2)
        __assert_rtn("delete_image", "ogl-metal.mm", 12426, "state_image_binding (_state, tex_unit) != tex");
      v5 += 8;
    }
    while (v5 != 104);
  }
  v7 = *(unsigned __int8 *)(a2 + 122);
  v8 = 8 * v7;
  if (v7 <= 2)
    v9 = 24 - 8 * v7;
  else
    v9 = 0;
  bzero((char *)&__dst + 8 * v7, v9);
  memcpy(&__dst, (const void *)(a2 + 64), v8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN2CA3OGL12MetalContext12delete_imageEPNS0_5ImageE_block_invoke;
  block[3] = &__block_descriptor_56_e5_v8__0ls32l24;
  v20 = __dst;
  v21 = v23;
  if (*(char *)(a2 + 125) < 0)
  {
    v11 = *(void **)(a1 + 2928);
    if (v11)
    {
      v18[0] = MEMORY[0x1E0C809B0];
      v18[1] = 3221225472;
      v18[2] = ___ZN2CA3OGL12MetalContext12delete_imageEPNS0_5ImageE_block_invoke_2;
      v18[3] = &unk_1E15A65B8;
      v18[4] = block;
      v18[5] = a1;
      objc_msgSend(v11, "addScheduledHandler:", v18);
    }
    else
    {
      dispatch_async(*(dispatch_queue_t *)(a1 + 3952), block);
    }
  }
  else
  {
    for (i = 0; i != 24; i += 8)

  }
  if (*(_BYTE *)(a2 + 122))
  {
    v12 = 0;
    do
    {
      v13 = a2 + 8 * v12;
      *(_QWORD *)(v13 + 64) = 0;

      *(_QWORD *)(v13 + 88) = 0;
      ++v12;
    }
    while (v12 < *(unsigned __int8 *)(a2 + 122));
  }
  v14 = *(CA::WindowServer::Surface **)(a2 + 32);
  if (v14)
  {
    CA::WindowServer::Surface::unref(v14);
    *(_QWORD *)(a2 + 32) = 0;
  }
  v15 = *(CA::WindowServer::Surface **)(a2 + 40);
  if (v15)
  {
    CA::WindowServer::Surface::unref(v15);
    *(_QWORD *)(a2 + 40) = 0;
  }
  v16 = *(_WORD *)(a2 + 123);
  *(_BYTE *)(a2 + 122) = 0;
  v17 = *(unsigned __int8 *)(a2 + 55) << 24;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 48) = 0;
  *(_DWORD *)(a2 + 52) = v17;
  *(_WORD *)(a2 + 123) = v16 & 0xFFD8;
}

void CA::Render::Image::release_data(CA::Render::Image *this)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  malloc_zone_t *malloc_zone;

  v2 = (unsigned int *)((char *)this + 148);
  do
  {
    v3 = __ldaxr(v2);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, v2));
  if (!v4)
  {
    CA::Render::Image::~Image(this);
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, this);
  }
}

void CA::Render::Texture::~Texture(CGColorSpaceRef *this)
{
  const CA::Render::Object *v2;
  CA::Shape *v3;

  *this = (CGColorSpaceRef)off_1E15990C0;
  CGColorSpaceRelease(this[6]);
  v3 = this[5];
  if (v3)
    CA::Shape::unref(v3);
  *this = (CGColorSpaceRef)off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate((CA::Render::Encoder::ObjectCache *)this, v2);
}

{
  malloc_zone_t *malloc_zone;

  CA::Render::Texture::~Texture(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CA::Render::Image::~Image(CA::Render::Image *this)
{
  void (*v2)(_QWORD, _QWORD);
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = (void (*)(_QWORD, _QWORD))*((_QWORD *)this + 13);
  if (v2)
    v2(*((_QWORD *)this + 12), *((_QWORD *)this + 14));
  v3 = (unsigned int *)*((_QWORD *)this + 15);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  --dword_1ECDC7C84;
  CA::Render::Texture::~Texture((CGColorSpaceRef *)this);
}

{
  malloc_zone_t *malloc_zone;

  CA::Render::Image::~Image(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

BOOL CA::OGL::MetalContext::finish_image(CA::OGL::MetalContext *this, uint64_t a2, int a3)
{
  unint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if (!*(_BYTE *)(a2 + 122))
    return 1;
  if (a3)
  {
    v5 = *(_QWORD *)(a2 + 112);
    v6 = atomic_load((unint64_t *)this + 498);
    if (v5 > v6)
    {
      v7 = *((_DWORD *)this + 669);
      CA::OGL::MetalContext::flush(this, 1);
      if ((v7 & 0x2000) != 0)
      {
        if (*(_BYTE *)(a2 + 122))
        {
          v9 = 0;
          do
            objc_msgSend(*(id *)(a2 + 64 + 8 * v9++), "waitUntilComplete");
          while (v9 < *(unsigned __int8 *)(a2 + 122));
        }
      }
      else
      {
        objc_msgSend(*((id *)this + 365), "waitUntilCompleted");

        *((_QWORD *)this + 365) = 0;
      }
      goto LABEL_10;
    }
    return 1;
  }
LABEL_10:
  v10 = *(_QWORD *)(a2 + 112);
  v11 = atomic_load((unint64_t *)this + 498);
  return v10 <= v11;
}

uint64_t CA::Render::release_shmem_bitmap(CA::Render *this, unsigned int *a2, void *a3)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t result;

  v3 = (unsigned int *)*((_QWORD *)a2 + 3);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 - 1, v3));
  v5 = a2 + 2;
  do
  {
    v6 = __ldaxr(v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v5));
  if (!v7)
    return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a2 + 16))(a2);
  return result;
}

void CA::Render::`anonymous namespace'::provider_free(CA::Render::_anonymous_namespace_ *this, CGDataProvider *a2, void *a3)
{
  CGDataProviderReleaseBytePtr();
  CGDataProviderRelease(a2);
}

int *CA::Render::aligned_free(CA::Render *this, size_t a2, void *a3)
{
  int *result;
  size_t v5;
  size_t v6;

  munmap(this, a2);
  result = CAGetStatsStruct(0);
  v5 = *((_QWORD *)result + 1);
  v6 = *(_QWORD *)result - a2;
  *(_QWORD *)result = v6;
  if (v6 > v5)
    *((_QWORD *)result + 1) = v6;
  return result;
}

unsigned int *CA::Render::CompressedImage::unref_image_data(unsigned int *this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = this + 41;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (this)
  {
    if (v2 == 1)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 8))(this);
  }
  return this;
}

void CA::WindowServer::IOSurface::~IOSurface(CA::WindowServer::IOSurface *this)
{
  malloc_zone_t *malloc_zone;

  CA::WindowServer::IOSurface::~IOSurface(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  const void *v2;
  const void *v3;

  *(_QWORD *)this = off_1E1590DD0;
  v2 = (const void *)*((_QWORD *)this + 30);
  if (v2 && *((_BYTE *)this + 290))
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 35);
  if (v3)
    CFRelease(v3);
  CA::WindowServer::Surface::~Surface(this);
}

void CA::WindowServer::Surface::~Surface(CA::WindowServer::Surface *this)
{
  const void *v2;
  CA::WindowServer::SharedEvent *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = off_1E1590C28;
  v2 = (const void *)*((_QWORD *)this + 29);
  if (v2)
    CFRelease(v2);
  v3 = (CA::WindowServer::SharedEvent *)*((_QWORD *)this + 2);
  if (v3)
  {
    CA::WindowServer::SharedEvent::~SharedEvent(v3);
    MEMORY[0x186DBD990]();
  }
  v4 = (unsigned int *)*((_QWORD *)this + 11);
  if (v4)
  {
    v5 = v4 + 4;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
  }
}

uint64_t CA::Render::`anonymous namespace'::block_set_free(CA::Render::_anonymous_namespace_ *this, const void *a2, void *a3)
{
  return CGImageBlockSetRelease();
}

void sub_184525564(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18452573C(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

CA::AttrList *CA::AttrList::remove(CA::AttrList *this, const void *a2)
{
  int v2;
  CA::AttrList *v3;
  int v4;
  CA::AttrList *v5;
  CA::AttrList::Node *v6;
  int v7;
  char v8;
  CA::AttrList::Node *v9;
  malloc_zone_t *malloc_zone;
  malloc_zone_t *v11;

  v2 = (int)a2;
  v3 = this;
  v4 = *((_DWORD *)this + 2) & 7;
  if (v4)
  {
    do
    {
      v5 = (CA::AttrList *)CA::AttrList::copy_(v3);
      *((_QWORD *)v3 + 1) = *((_QWORD *)v3 + 1) & 0xFFFFFFFFFFFFFFF8 | (v4 - 1);
      v3 = v5;
      v4 = *((_DWORD *)v5 + 2) & 7;
    }
    while (v4);
  }
  else
  {
    v5 = this;
  }
  v6 = *(CA::AttrList::Node **)v5;
  if (!*(_QWORD *)v5)
    goto LABEL_16;
  v7 = *((_DWORD *)v6 + 2);
  if ((v7 & 0xFFFFFF) == v2)
  {
    *(_QWORD *)v5 = *(_QWORD *)v6;
LABEL_12:
    if ((*((_DWORD *)v6 + 2) & 0x80000000) != 0)
    {
LABEL_14:
      CA::AttrList::splice_shared_node((uint64_t)v5, v6);
    }
    else
    {
      CA::AttrList::Node::free_memory(v6, a2);
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(malloc_zone, v6);
    }
  }
  else
  {
    v8 = 0;
    while (1)
    {
      v9 = v6;
      v6 = *(CA::AttrList::Node **)v6;
      if (!v6)
        break;
      v8 |= v7 < 0;
      v7 = *((_DWORD *)v6 + 2);
      if ((v7 & 0xFFFFFF) == v2)
      {
        *(_QWORD *)v9 = *(_QWORD *)v6;
        if ((v8 & 1) != 0)
          goto LABEL_14;
        goto LABEL_12;
      }
    }
  }
  if (!*(_QWORD *)v5)
  {
LABEL_16:
    v11 = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(v11, v5);
    return 0;
  }
  return v5;
}

uint64_t CA::AttrList::copy_(CA::AttrList *this)
{
  malloc_zone_t *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t *v5;
  _BYTE *v6;
  _BYTE *v7;
  malloc_zone_t *malloc_zone;
  uint64_t v9;
  __int128 v10;
  const void *v11;
  uint64_t v12;
  id WeakRetained;
  __int128 *v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  _OWORD *v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 *v26;
  __int128 v27;
  __int128 *v28;
  __int128 *v29;
  void *v30;
  malloc_zone_t *v31;

  if (*((_QWORD *)this + 1) >= 8uLL)
  {
    v5 = *(uint64_t **)this;
    if (*(_QWORD *)this)
    {
      v6 = 0;
      do
      {
        v7 = v6;
        malloc_zone = (malloc_zone_t *)get_malloc_zone();
        v6 = malloc_type_zone_malloc(malloc_zone, 0x18uLL, 0x8BB15036uLL);
        *((_DWORD *)v6 + 2) = v5[1] & 0xFFFFFF;
        CA::AttrList::Node::alloc_memory(v6, *((_BYTE *)v5 + 11) & 0x7F);
        switch(*((_BYTE *)v5 + 11) & 0x7F)
        {
          case 1:
            **((_QWORD **)v6 + 2) = *(_QWORD *)v5[2];
            break;
          case 2:
            v11 = (const void *)v5[2];
            if (v11)
              v11 = CFRetain(v11);
            goto LABEL_16;
          case 3:
            v11 = (const void *)CAValueCopyPointer((void *)v5[2]);
            goto LABEL_16;
          case 4:
            v12 = v5[2];
            if (*(_BYTE *)(v12 + 8))
              WeakRetained = objc_loadWeakRetained((id *)v12);
            else
              WeakRetained = *(id *)v12;
            v30 = WeakRetained;
            X::WeakDetails::Ptr::set(*((id **)v6 + 2), WeakRetained, 1);

            break;
          case 5:
            v11 = _Block_copy((const void *)v5[2]);
LABEL_16:
            *((_QWORD *)v6 + 2) = v11;
            break;
          case 6:
          case 7:
          case 8:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
          case 0xD:
          case 0xE:
          case 0xF:
          case 0x10:
            *((_QWORD *)v6 + 2) = v5[2];
            break;
          case 0x11:
          case 0x12:
            *((_QWORD *)v6 + 2) = v5[2];
            break;
          case 0x13:
          case 0x14:
            v9 = *((_QWORD *)v6 + 2);
            v10 = *(_OWORD *)v5[2];
            goto LABEL_21;
          case 0x15:
            v14 = (__int128 *)v5[2];
            v15 = (_OWORD *)*((_QWORD *)v6 + 2);
            v16 = *v14;
            v17 = v14[1];
            goto LABEL_24;
          case 0x16:
            v18 = (_OWORD *)v5[2];
            v19 = (_OWORD *)*((_QWORD *)v6 + 2);
            v20 = v18[1];
            v21 = v18[2];
            v22 = v18[3];
            *v19 = *v18;
            v19[1] = v20;
            v19[2] = v21;
            v19[3] = v22;
            v23 = v18[5];
            v24 = v18[6];
            v25 = v18[7];
            v19[4] = v18[4];
            v19[5] = v23;
            v19[6] = v24;
            v19[7] = v25;
            break;
          case 0x17:
            v26 = (__int128 *)v5[2];
            v15 = (_OWORD *)*((_QWORD *)v6 + 2);
            v16 = *v26;
            v17 = v26[1];
            v27 = v26[2];
            goto LABEL_23;
          case 0x18:
            v28 = (__int128 *)v5[2];
            v9 = *((_QWORD *)v6 + 2);
            v10 = *v28;
            *(_QWORD *)(v9 + 16) = *((_QWORD *)v28 + 2);
LABEL_21:
            *(_OWORD *)v9 = v10;
            break;
          case 0x19:
            v29 = (__int128 *)v5[2];
            v15 = (_OWORD *)*((_QWORD *)v6 + 2);
            v16 = *v29;
            v17 = v29[1];
            v27 = v29[2];
            v15[3] = v29[3];
LABEL_23:
            v15[2] = v27;
LABEL_24:
            *v15 = v16;
            v15[1] = v17;
            break;
          default:
            break;
        }
        *(_QWORD *)v6 = v7;
        v5 = (uint64_t *)*v5;
      }
      while (v5);
    }
    else
    {
      v6 = 0;
    }
    v31 = (malloc_zone_t *)get_malloc_zone();
    result = (uint64_t)malloc_type_zone_malloc(v31, 0x10uLL, 0x8BB15036uLL);
    *(_QWORD *)result = v6;
    *(_QWORD *)(result + 8) = 0;
  }
  else
  {
    v2 = (malloc_zone_t *)get_malloc_zone();
    result = (uint64_t)malloc_type_zone_malloc(v2, 0x10uLL, 0x8BB15036uLL);
    *(_QWORD *)(result + 8) = this;
    v4 = *((_QWORD *)this + 1);
    *(_QWORD *)result = *(_QWORD *)this;
    *((_QWORD *)this + 1) = v4 & 7 | result;
    *(_DWORD *)(*(_QWORD *)this + 8) |= 0x80000000;
  }
  return result;
}

void ___ZN2CA7Context18commit_transactionEPNS_11TransactionEdPd_block_invoke_2_57(uint64_t a1, uint64_t a2)
{
  mach_msg_header_t *msg;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  if (a2 == 8)
  {
    mach_port_mod_refs(*MEMORY[0x1E0C83DA0], *(_DWORD *)(a1 + 56), 1u, -1);
    dispatch_release(*(dispatch_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
  }
  else if (a2 == 2)
  {
    msg = (mach_msg_header_t *)dispatch_mach_msg_get_msg();
    mach_msg_destroy(msg);
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v6 = *(_DWORD *)(v5 + 24);
    if (!v6)
      __assert_rtn("commit_transaction_block_invoke_2", "CAContextInternal.mm", 3923, "pending_count > 0");
    v7 = v6 - 1;
    *(_DWORD *)(v5 + 24) = v7;
    if (!v7)
    {
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), v4);
      dispatch_mach_cancel();
    }
  }
}

uint64_t ___ZN2CA7Context18commit_transactionEPNS_11TransactionEdPd_block_invoke_54(uint64_t a1)
{
  uint64_t v2;
  int v3;
  _QWORD *v4;
  _QWORD *v5;

  kdebug_trace();
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = 0;
    do
    {
      (*(void (**)(void))(*(_QWORD *)v2 + 16))();
      _Block_release(*(const void **)v2);
      v2 = *(_QWORD *)(v2 + 8);
      ++v3;
    }
    while (v2);
    v4 = *(_QWORD **)(a1 + 32);
    if (v4)
    {
      do
      {
        v5 = (_QWORD *)v4[1];
        free(v4);
        v4 = v5;
      }
      while (v5);
    }
  }
  return kdebug_trace();
}

void sub_184525C64(_Unwind_Exception *a1)
{
  kdebug_trace();
  _Unwind_Resume(a1);
}

unint64_t CA::GainMapGenerator::Element::gain(float32x2_t *this, float32_t a2, float a3, double a4, double a5)
{
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float v10;
  float32x2_t v11;
  float32x2_t v12;
  float v13;
  uint64_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  BOOL v21;
  float v22;
  float32x2_t v23;
  float32x2_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  BOOL v31;
  float v32;
  uint64_t v33;
  float v34;
  float v35;

  v5 = (float32x2_t)__PAIR64__(LODWORD(a3), LODWORD(a2));
  v6 = *this;
  v7 = this[1];
  v8 = vabd_f32(v5, *this);
  v9 = vsub_f32(v8, v7);
  v10 = 1.0;
  if (v9.f32[1] >= 0.0)
    goto LABEL_9;
  if (v9.f32[0] >= 0.0)
  {
    LODWORD(v14) = (int)v9.f32[0];
    if (v6.f32[0] <= a2)
      v14 = 0x7FFFFFFFLL;
    else
      v14 = v14;
    return LODWORD(v10) | (unint64_t)(v14 << 32);
  }
  LODWORD(a5) = this[2].i32[0];
  v11 = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0), v9);
  v12 = vmaxnm_f32(v11, 0);
  if (v11.f32[0] < v11.f32[1])
    v11.f32[0] = v11.f32[1];
  if (v11.f32[0] > 0.0)
    v11.f32[0] = 0.0;
  v13 = (float)(sqrtf(vaddv_f32(vmul_f32(v12, v12))) - *(float *)&a5) + v11.f32[0];
  if (v13 > 0.0)
  {
    if (v6.f32[0] < a2)
    {
LABEL_9:
      v14 = 0x7FFFFFFFLL;
      return LODWORD(v10) | (unint64_t)(v14 << 32);
    }
    v23.i32[1] = v12.i32[1];
    v23.i32[0] = this[2].i32[0];
    v24 = vmul_f32(v23, v23);
    v25 = v12.f32[0] - sqrtf(vsub_f32(v24, (float32x2_t)vdup_lane_s32((int32x2_t)v24, 1)).f32[0]);
LABEL_26:
    v14 = (int)v25;
    return LODWORD(v10) | (unint64_t)(v14 << 32);
  }
  LODWORD(a5) = this[2].i32[1];
  v15 = vmla_n_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0), v9, this[5].f32[0]);
  if (v15.f32[0] <= 0.0)
  {
    v26 = v9.f32[1] + 1.0;
    if ((float)(v9.f32[1] + 1.0) < 0.0)
      v26 = 0.0;
    if (v9.f32[1] >= -6.1147)
      v10 = v26;
    else
      v10 = -1.0;
    v25 = vadd_f32(v6, v7).f32[0] - (float)(*(float *)&a5 + a2);
    goto LABEL_26;
  }
  v16 = vmaxnm_f32(v15, 0);
  v17 = sqrtf(vaddv_f32(vmul_f32(v16, v16)));
  if (v17 <= (float)(*(float *)&a5 + -6.1147))
  {
    v27 = v8.f32[0] + v8.f32[0];
    v28 = v17 - *(float *)&a5;
LABEL_34:
    if (v6.f32[0] <= a2)
      v35 = v28;
    else
      v35 = v27;
    v14 = (int)v35;
    v10 = -1.0;
    return LODWORD(v10) | (unint64_t)(v14 << 32);
  }
  if (this[9].i8[4])
  {
    v18 = fminf(v16.f32[0], v16.f32[1]);
    v19 = fmaxf(v16.f32[0], v16.f32[1]);
    v20 = v18 / v19;
    v21 = v19 == 0.0;
    v22 = 0.0;
    if (!v21)
      v22 = v20;
  }
  else
  {
    v29 = this[3].f32[0] * fabsf(vsub_f32((float32x2_t)vdup_lane_s32((int32x2_t)v16, 1), v16).f32[0]);
    v30 = 1.0 - v29;
    v31 = v29 < 1.0;
    v22 = 0.0;
    if (v31)
      v22 = v30;
  }
  v32 = (float)(v17
              - (float)((float)((float)((float)(this[8].f32[0]
                                              + (float)((float)(this[7].f32[1]
                                                              + (float)((float)(this[7].f32[0]
                                                                              + (float)((float)(this[6].f32[1]
                                                                                              + (float)((float)(this[6].f32[0] + (float)(this[5].f32[1] * v22)) * v22))
                                                                                      * v22))
                                                                      * v22))
                                                      * v22))
                                      * (float)(this[8].f32[1] * v22))
                              + 1.0)
                      * *(float *)&a5))
      * this[9].f32[0];
  v33 = 8;
  if ((vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v12, 1), v12).u8[0] & 1) != 0)
    v33 = 7;
  v34 = v32 + (float)((float)(v13 - v32) * this->f32[v33]);
  if (v34 < -6.1147)
  {
    v27 = v8.f32[0] + v8.f32[0];
    v28 = v34 - *(float *)&a5;
    goto LABEL_34;
  }
  if (v34 <= 0.0)
  {
    if ((float)(v34 + 1.0) >= 0.0)
      v10 = v34 + 1.0;
    else
      v10 = 0.0;
    v14 = 1;
  }
  else
  {
    LODWORD(v14) = (int)v34;
    if (v6.f32[0] <= a2)
      v14 = 0x7FFFFFFFLL;
    else
      v14 = v14;
    v10 = 1.0;
  }
  return LODWORD(v10) | (unint64_t)(v14 << 32);
}

uint64_t CA::WindowServer::IOSurface::iosurface(CA::WindowServer::IOSurface *this)
{
  return *((_QWORD *)this + 30);
}

uint64_t CA::WindowServer::IOMFBDisplay::use_assembly_surface(CA::WindowServer::IOMFBDisplay *this)
{
  char *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  _QWORD *v13;
  uint64_t v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 26384;
  v3 = (char *)this + 745;
  if (!(*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 80))(this)
    || (v4 = *((_QWORD *)this + 3301)) == 0)
  {
LABEL_18:
    LOBYTE(v9) = 0;
    goto LABEL_19;
  }
  v5 = *((_QWORD *)this + 3383);
  v6 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
  v6.i16[0] = vaddlv_u8(v6);
  v7 = v6.u32[0];
  if (v6.u32[0] > 1uLL)
  {
    v8 = (int)v5;
    if ((int)v5 >= v4)
      v8 = (int)v5 % v4;
  }
  else
  {
    v8 = (v4 - 1) & (int)v5;
  }
  v9 = *(uint64_t ***)(*((_QWORD *)this + 3300) + 8 * v8);
  if (v9)
  {
    v10 = *v9;
    if (*v9)
    {
      while (1)
      {
        v11 = v10[1];
        if ((int)v5 == v11)
        {
          if ((CA::WindowServer::Display::Mode::operator==(v10[2], v5) & 1) != 0)
          {
            LOBYTE(v9) = *((_BYTE *)v10 + 40) != 0;
            goto LABEL_19;
          }
        }
        else
        {
          if (v7 > 1)
          {
            if (v11 >= v4)
              v11 %= v4;
          }
          else
          {
            v11 &= v4 - 1;
          }
          if (v11 != v8)
            goto LABEL_18;
        }
        v10 = (uint64_t *)*v10;
        if (!v10)
          goto LABEL_18;
      }
    }
    goto LABEL_18;
  }
LABEL_19:
  if ((*v3 & 4) != 0 && (HIBYTE(xmmword_1ECDC6AF0) || !v2[1683]))
    return 1;
  if (*v2 == 2)
    LOBYTE(v9) = 1;
  if ((v9 & 1) != 0
    || ((*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1536))(this) & 1) != 0)
  {
    return 1;
  }
  if ((*((_DWORD *)this + 156) & 4) != 0 || (*((_DWORD *)this + 156) & 0x80) != 0)
  {
    v13 = (_QWORD *)*((_QWORD *)this + 5);
    if (v13)
    {
      while (1)
      {
        if (*v13)
        {
          v14 = *(_QWORD *)(*v13 + 96);
          if ((*(_WORD *)(v14 + 656) & 0x1C00) == 0x800)
          {
            v15[0] = *(_QWORD *)(v14 + 640);
            if (CA::WindowServer::Display::Mode::is_hdr((CA::WindowServer::Display::Mode *)v15))
              break;
          }
        }
        v13 = (_QWORD *)v13[1];
        if (!v13)
          return 0;
      }
      return 1;
    }
  }
  return 0;
}

BOOL CA::WindowServer::IOMFBDisplay::needs_passthrough(CA::WindowServer::IOMFBDisplay *this)
{
  _BOOL8 result;

  result = CA::WindowServer::Display::Mode::is_hdr((CA::WindowServer::IOMFBDisplay *)((char *)this + 640));
  if ((_DWORD)result)
    return *((_BYTE *)this + 28085) == 0;
  return result;
}

uint64_t CA::WindowServer::AppleDisplay::full_frame_required(CA::WindowServer::AppleDisplay *this)
{
  return HIBYTE(*((unsigned __int16 *)this + 14212)) & 1;
}

uint64_t CA::WindowServer::IOMFBDisplay::needs_overdrive(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned __int8 *)this + 28089);
}

void X::small_vector_base<void({block_pointer})(__CFDictionary const*)>::move(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v6 = *(void **)a1;
    if (v6 != *(void **)(a1 + 16))
      free(v6);
    *(_QWORD *)(a1 + 16) = a3;
    if (*(_QWORD *)a2 == *(_QWORD *)(a2 + 16))
    {
      *(_QWORD *)a1 = a3;
      v8 = *(uint64_t **)a2;
      *(_QWORD *)(a1 + 8) = (char *)a3 + *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
      v9 = *(uint64_t **)(a2 + 8);
      while (v8 != v9)
      {
        v10 = *v8++;
        *a3++ = v10;
      }
    }
    else
    {
      v7 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v7;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
    }
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  }
}

uint64_t CA::WindowServer::IOMFBDisplay::supports_icc_color_management(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned __int8 *)this + 28121);
}

uint64_t CA::WindowServer::IOMFBDisplay::fb_swap_set_layer(CA::WindowServer::IOMFBDisplay *this, CA::IOMobileFramebuffer *a2, unsigned int a3, IOSurfaceRef buffer, const CA::Rect *a5, const CA::Rect *a6, unsigned int a7, unsigned int a8, unsigned int a9)
{
  if (buffer)
    IOSurfaceGetID(buffer);
  kdebug_trace();
  return CA::IOMobileFramebuffer::swap_set_layer(a2, a3, buffer, a5, a6);
}

uint64_t CA::IOMobileFramebuffer::swap_set_layer(CA::IOMobileFramebuffer *this, unsigned int a2, IOSurfaceRef buffer, const CA::Rect *a4, const CA::Rect *a5)
{
  uint64_t ID;
  char *v8;
  _QWORD *v9;
  uint64_t v10;

  if (buffer)
    ID = IOSurfaceGetID(buffer);
  else
    ID = 0;
  v8 = (char *)this + 8 * a2;
  v10 = *((_QWORD *)v8 + 4);
  v9 = v8 + 32;
  if (v10 != ID)
  {
    *((_BYTE *)this + 16) = 1;
    *v9 = ID;
  }
  return IOMobileFramebufferSwapSetLayer();
}

uint64_t CA::WindowServer::IOMFBDisplay::needs_alpha_unpremultiply(CA::WindowServer::IOMFBDisplay *this)
{
  return *((unsigned __int8 *)this + 28111);
}

uint64_t CA::WindowServer::IOMFBDisplay::finish_work_interval(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(this + 25504);
  if (v2 && *(_QWORD *)(v2 + 40))
  {
    v4 = mach_absolute_time();
    if (a2)
    {
      work_interval_instance_set_deadline();
      work_interval_instance_set_complexity();
    }
    else
    {
      work_interval_instance_set_complexity();
      *(_QWORD *)(v2 + 24) = v4;
    }
    work_interval_instance_set_finish();
    work_interval_instance_finish();
    this = kdebug_trace();
    *(_QWORD *)(v2 + 24) = 0;
  }
  return this;
}

uint64_t CA::WindowServer::IOSurface::set_premultiplied(uint64_t this, int a2)
{
  char v2;
  uint64_t v3;

  if (*(unsigned __int8 *)(this + 289) != a2)
  {
    v2 = a2;
    v3 = this;
    this = IOSurfaceSetBulkAttachments2();
    *(_BYTE *)(v3 + 289) = v2;
  }
  return this;
}

uint64_t CA::WindowServer::IOMFBDisplay::set_framebuffer_ax_matrix(CA::WindowServer::IOMFBDisplay *this)
{
  float *v1;
  uint64_t result;
  char *v4;
  uint64_t i;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  _BOOL4 v9;
  int v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint8_t buf[8];
  __int16 v22;
  double v23;
  __int16 v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  __int16 v30;
  double v31;
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  double v39;
  __int16 v40;
  double v41;
  _OWORD v42[4];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v1 = (float *)((char *)this + 26864);
  if (*((_BYTE *)this + 28068) || *((_BYTE *)this + 26932))
    return 0;
  memset(v42, 0, 60);
  v4 = (char *)this + 26864;
  for (i = 12; i != 48; i += 12)
  {
    v6 = (char *)v42 + i;
    *(_QWORD *)v6 = *(_QWORD *)v4;
    *((_DWORD *)v6 + 2) = *((_DWORD *)v4 + 2);
    v4 += 16;
  }
  result = IOMobileFramebufferSwapSetColorMatrix();
  if (!(_DWORD)result)
  {
    *(_QWORD *)buf = vcvts_n_u32_f32(v1[16], 0x10uLL);
    result = IOMobileFramebufferSetParameter();
    if (!BYTE8(xmmword_1ECDC6A70))
    {
LABEL_9:
      *((_BYTE *)v1 + 68) = 1;
      return result;
    }
    v7 = result;
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v8 = x_log_category_windowserver;
      v9 = os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT);
      result = v7;
      if (!v9)
        goto LABEL_9;
      v10 = *((_DWORD *)this + 6);
      v11 = *v1;
      v12 = v1[1];
      v13 = v1[2];
      v14 = v1[4];
      v15 = v1[5];
      v16 = v1[6];
      v17 = v1[8];
      v18 = v1[9];
      v19 = v1[10];
      v20 = v1[16];
      *(_DWORD *)buf = 67111680;
      *(_DWORD *)&buf[4] = v10;
      v22 = 2048;
      v23 = v11;
      v24 = 2048;
      v25 = v12;
      v26 = 2048;
      v27 = v13;
      v28 = 2048;
      v29 = v14;
      v30 = 2048;
      v31 = v15;
      v32 = 2048;
      v33 = v16;
      v34 = 2048;
      v35 = v17;
      v36 = 2048;
      v37 = v18;
      v38 = 2048;
      v39 = v19;
      v40 = 2048;
      v41 = v20;
      _os_log_impl(&dword_184457000, v8, OS_LOG_TYPE_DEFAULT, "Display %u accessibility matrix [%g, %g, %g; %g, %g, %g; %g, %g, %g], scale %g\n",
        buf,
        0x6Cu);
    }
    result = v7;
    goto LABEL_9;
  }
  return result;
}

uint64_t CA::WindowServer::IOMFBDisplay::update_system_gamma(CA::WindowServer::IOMFBDisplay *this, __n128 a2)
{
  uint64_t result;
  unsigned int *v4;
  uint64_t v5;
  _OWORD v6[2];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (initialized[0] != -1)
    dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
  a2.n128_u32[0] = dword_1ECDC69DC;
  if (*(float *)&dword_1ECDC69DC != 0.0)
  {
    memset(v6, 0, sizeof(v6));
    *(_QWORD *)((char *)v6 + 4) = dword_1ECDC69DC | 0x3F80000000000000;
    v7 = 0;
    (*(void (**)(CA::WindowServer::IOMFBDisplay *, _OWORD *))(*(_QWORD *)this + 1856))(this, v6);
  }
  result = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *, __n128))(*(_QWORD *)this + 1832))(this, a2);
  if ((_DWORD)result && *((_BYTE *)this + 28118) && !HIBYTE(xmmword_1ECDC6AB0))
  {
    v4 = (unsigned int *)((char *)this + 48 * *((unsigned int *)this + 6418) + 25776);
    if (!*v4)
      CA::IOMobileFramebuffer::swap_begin((CA::WindowServer::IOMFBDisplay *)((char *)this + 25536), v4);
    v5 = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1848))(this);
    result = CA::WindowServer::IOMFBDisplay::set_icc_curve_with_cg_trc((uint64_t)this, v5, 0xEu, 7);
    *((_BYTE *)this + 28118) = 0;
  }
  return result;
}

double CACurrentMediaTimeDelta()
{
  mach_get_times();
  return CATimeWithHostTime(0);
}

double CA::WindowServer::IOMFBDisplay::update_user_adjustment(CA::WindowServer::IOMFBDisplay *this)
{
  float *v1;
  __int128 v3;
  double result;
  NSObject *v5;
  int v6;
  double v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  double v11;
  _OWORD v12[4];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = (float *)((char *)this + 26856);
  if (!*((_BYTE *)this + 26860))
  {
    memset(v12, 0, 60);
    v3 = *(_OWORD *)((char *)this + 26836);
    *(_OWORD *)((char *)v12 + 12) = *(_OWORD *)((char *)this + 26820);
    *(_OWORD *)((char *)&v12[1] + 12) = v3;
    HIDWORD(v12[2]) = *((_DWORD *)this + 6713);
    CA::IOMobileFramebuffer::swap_set_icc_matrix((uint64_t)this + 25536, 7u, *((_DWORD *)this + 6), 0, (float *)v12);
    IOMobileFrameBufferSwapSetUserLuminanceAdjustment();
    *((_BYTE *)v1 + 4) = 1;
    if (BYTE8(xmmword_1ECDC6AB0))
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v5 = x_log_category_color;
        if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_INFO))
        {
          v6 = *((_DWORD *)this + 6);
          v7 = *v1;
          *(_DWORD *)buf = 67109376;
          v9 = v6;
          v10 = 2048;
          v11 = v7;
          _os_log_impl(&dword_184457000, v5, OS_LOG_TYPE_INFO, "Display %u setting IOMFB display luminance adjustment to %f", buf, 0x12u);
        }
      }
    }
  }
  return result;
}

uint64_t CA::WindowServer::IOMFBDisplay::update_blackpoint_adaptation(CA::WindowServer::IOMFBDisplay *this)
{
  uint64_t result;
  unsigned int *v4;
  uint64_t v5;

  result = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1832))(this);
  if ((_DWORD)result)
  {
    if (*((_BYTE *)this + 28119) && HIBYTE(xmmword_1ECDC6AB0) == 0)
    {
      v4 = (unsigned int *)((char *)this + 48 * *((unsigned int *)this + 6418) + 25776);
      if (!*v4)
        CA::IOMobileFramebuffer::swap_begin((CA::WindowServer::IOMFBDisplay *)((char *)this + 25536), v4);
      v5 = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1864))(this);
      result = CA::WindowServer::IOMFBDisplay::set_icc_curve_with_cg_trc((uint64_t)this, v5, 0x11u, 7);
      *((_BYTE *)this + 28119) = 0;
    }
  }
  return result;
}

uint64_t CA::WindowServer::IOMFBDisplay::update_gamma_adjustment(CA::WindowServer::IOMFBDisplay *this)
{
  uint64_t result;
  unsigned int *v4;
  uint64_t v5;

  result = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1832))(this);
  if ((_DWORD)result)
  {
    if (*((_BYTE *)this + 28120) && HIBYTE(xmmword_1ECDC6AB0) == 0)
    {
      v4 = (unsigned int *)((char *)this + 48 * *((unsigned int *)this + 6418) + 25776);
      if (!*v4)
        CA::IOMobileFramebuffer::swap_begin((CA::WindowServer::IOMFBDisplay *)((char *)this + 25536), v4);
      v5 = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1880))(this);
      CA::WindowServer::IOMFBDisplay::set_icc_curve_with_cg_trc((uint64_t)this, v5, 0x10u, 1);
      CA::WindowServer::IOMFBDisplay::set_icc_curve_with_cg_trc((uint64_t)this, v5 + 36, 0x10u, 2);
      result = CA::WindowServer::IOMFBDisplay::set_icc_curve_with_cg_trc((uint64_t)this, v5 + 72, 0x10u, 4);
      *((_BYTE *)this + 28120) = 0;
    }
  }
  return result;
}

void CA::WindowServer::IOMFBDisplay::swap_display_headroom_used(CA::WindowServer::IOMFBDisplay *this, const CA::Render::Update *a2)
{
  int v4;
  int v5;
  float *v6;
  float v7;
  double v8;
  NSObject *v9;
  int v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  double v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if ((*((_WORD *)this + 328) & 0x1C00) == 0)
  {
    v4 = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1832))(this);
    if (a2)
    {
      if (v4)
      {
        v5 = *((_DWORD *)a2 + 67);
        if ((v5 & 0x200000) == 0)
        {
          v6 = (float *)((char *)this + 26152);
          v7 = 1.0;
          if ((v5 & 0x8000) != 0)
            v7 = CA::WindowServer::Display::edr_headroom(this);
          if (*v6 != v7)
          {
            v8 = v7;
            *v6 = v7;
            if (x_log_hook_p())
            {
              x_log_();
            }
            else
            {
              v9 = x_log_category_brightness;
              if (os_log_type_enabled((os_log_t)x_log_category_brightness, OS_LOG_TYPE_DEFAULT))
              {
                v10 = *((_DWORD *)this + 6);
                *(_DWORD *)buf = 67109376;
                v12 = v10;
                v13 = 2048;
                v14 = v8;
                _os_log_impl(&dword_184457000, v9, OS_LOG_TYPE_DEFAULT, "Display %u setting display headroom hint to %g", buf, 0x12u);
              }
            }
            if (*((_BYTE *)this + 28123))
            {
              if ((*((_BYTE *)this + 746) & 2) != 0)
                IOMobileFramebufferSwapSetDisplayEdrHeadroom();
            }
          }
        }
      }
    }
  }
}

void CA::WindowServer::IOMFBDisplay::swap_hdr_metadata(CA::WindowServer::IOMFBDisplay *this, const CA::Render::Update *a2)
{
  char *v2;
  unint64_t v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __IOSurface *v10;
  CFTypeRef v11;
  uint64_t v12;
  uint64_t v13;
  __IOSurface *v14;
  const __CFData *v15;
  const __CFData *v16;
  CFTypeID v17;
  void *v18;
  const void *v19;
  CFTypeID v20;
  uint64_t v21;
  int v22;
  int v23;
  NSObject *v24;
  int v25;
  NSObject *v26;
  const UInt8 *BytePtr;
  int Length;
  NSObject *v29;
  NSObject *v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  CFTypeRef cf;
  uint8_t buf[4];
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  _BYTE v53[10];
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;
  uint64_t v78;
  CFRange v79;

  v78 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 26216;
  if (!*((_BYTE *)this + 28068))
  {
    v5 = *((_QWORD *)this + 3383);
    v6 = CA::WindowServer::Display::Mode::hdr_type(v5);
    if (((*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1536))(this) & 1) == 0)
    {
      v7 = (_DWORD *)((char *)this + 25624);
      if ((v5 & 0xF00000000000000) == 0xD00000000000000)
      {
        if (!*((_QWORD *)this + 3202))
          *((_QWORD *)this + 3202) = malloc_type_calloc(0x20CuLL, 1uLL, 0x56B16133uLL);
        cf = 0;
        v8 = *((_QWORD *)this + 3251);
        if (v8 && (v9 = *(_QWORD *)(v8 + 16)) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 160))(v9))
        {
          v10 = (__IOSurface *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 3251) + 16) + 160))(*(_QWORD *)(*((_QWORD *)this + 3251) + 16));
          v11 = IOSurfaceCopyValue(v10, CFSTR("DolbyVisionHDMIData"));
          cf = v11;
        }
        else
        {
          if (!(*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 80))(this))
            goto LABEL_31;
          v19 = (const void *)*((_QWORD *)a2 + 113);
          if (!v19)
            goto LABEL_31;
          X::CFRef<__CFData const*>::operator=(&cf, v19);
          v11 = cf;
        }
        if (v11)
        {
          v20 = CFGetTypeID(v11);
          if (v20 == CFDataGetTypeID() && CFDataGetLength((CFDataRef)cf) >= 524)
          {
            v79.location = 0;
            v79.length = 524;
            CFDataGetBytes((CFDataRef)cf, v79, *((UInt8 **)this + 3202));
            *v7 = 0;
            goto LABEL_37;
          }
        }
LABEL_31:
        if (*v7 == 5)
        {
LABEL_43:
          if (cf)
            CFRelease(cf);
          return;
        }
        v21 = *((_QWORD *)this + 3202);
        if (hdrprocessing_init_once != -1)
          dispatch_once_f(&hdrprocessing_init_once, 0, (dispatch_function_t)load_hdrprocessing_symbols);
        if (hdr_handle)
          objc_msgSend((id)hdr_processor_class, "dolbyIOMFBMetadata:withMinBrightness:maxBrightness:", v21);
        *v7 = 5;
LABEL_37:
        v22 = IOMobileFramebufferSwapSetParams();
        if (v22)
        {
          v23 = v22;
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v24 = x_log_category_windowserver;
            if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_ERROR))
            {
              v25 = *((_DWORD *)this + 6);
              *(_DWORD *)buf = 67109376;
              v49 = v25;
              v50 = 1024;
              v51 = v23;
              _os_log_impl(&dword_184457000, v24, OS_LOG_TYPE_ERROR, "display %u set hdr metadata returned error %x\n", buf, 0xEu);
            }
          }
        }
        goto LABEL_43;
      }
      if (v6 != 3)
      {
        *v7 = 0;
        return;
      }
      if (v2[1870] && !BYTE5(xmmword_1ECDC6A90))
      {
        if (!*((_QWORD *)this + 3204))
          *((_QWORD *)this + 3204) = malloc_type_calloc(0x49uLL, 1uLL, 0x1A12943AuLL);
        v12 = *((_QWORD *)this + 3251);
        if (v12)
        {
          v13 = *(_QWORD *)(v12 + 16);
          if (v13)
          {
            if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 160))(v13))
            {
              v14 = (__IOSurface *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 3251) + 16)
                                                                     + 160))(*(_QWORD *)(*((_QWORD *)this + 3251)
                                                                                         + 16));
              v15 = (const __CFData *)IOSurfaceCopyValue(v14, CFSTR("HDR10PlusData"));
              if (v15)
              {
                v16 = v15;
                v17 = CFGetTypeID(v15);
                if (v17 == CFDataGetTypeID())
                {
                  if (BYTE6(xmmword_1ECDC6A90))
                  {
                    BytePtr = CFDataGetBytePtr(v16);
                    Length = CFDataGetLength(v16);
                    v29 = x_log_category_windowserver;
                    if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buf = 67109634;
                      v49 = Length;
                      v50 = 1040;
                      v51 = Length;
                      v52 = 2096;
                      *(_QWORD *)v53 = BytePtr;
                      _os_log_impl(&dword_184457000, v29, OS_LOG_TYPE_DEFAULT, "HDR10PlusMetadataSEI: Size:%d bytes, %.*P", buf, 0x18u);
                    }
                  }
                  if (CA::CAHDRProcessor::iomfb_hdr10plus_convert_sei_to_metadata(v16, *((const __CFData **)this + 3204), v18))
                  {
                    if (BYTE6(xmmword_1ECDC6A90))
                    {
                      if (x_log_hook_p())
                      {
                        x_log_();
                      }
                      else
                      {
                        v30 = x_log_category_windowserver;
                        if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
                        {
                          v31 = *((_QWORD *)this + 3204);
                          v32 = *(_DWORD *)(v31 + 1);
                          v33 = *(_DWORD *)(v31 + 5);
                          v34 = *(_DWORD *)(v31 + 9);
                          v35 = *(_DWORD *)(v31 + 13);
                          v36 = *(_DWORD *)(v31 + 17);
                          v37 = *(_DWORD *)(v31 + 21);
                          v38 = *(_DWORD *)(v31 + 25);
                          v39 = *(_DWORD *)(v31 + 29);
                          v40 = *(_DWORD *)(v31 + 33);
                          v41 = *(_DWORD *)(v31 + 37);
                          v42 = *(_DWORD *)(v31 + 41);
                          v43 = *(unsigned __int16 *)(v31 + 45);
                          v44 = *(unsigned __int16 *)(v31 + 47);
                          v45 = *(unsigned __int8 *)(v31 + 67);
                          v46 = *(unsigned __int8 *)(v31 + 69);
                          LODWORD(v31) = *(unsigned __int8 *)(v31 + 70);
                          *(_DWORD *)buf = 67112960;
                          v49 = v32;
                          v50 = 1024;
                          v51 = v33;
                          v52 = 1024;
                          *(_DWORD *)v53 = v34;
                          *(_WORD *)&v53[4] = 1024;
                          *(_DWORD *)&v53[6] = v35;
                          v54 = 1024;
                          v55 = v36;
                          v56 = 1024;
                          v57 = v37;
                          v58 = 1024;
                          v59 = v38;
                          v60 = 1024;
                          v61 = v39;
                          v62 = 1024;
                          v63 = v40;
                          v64 = 1024;
                          v65 = v41;
                          v66 = 1024;
                          v67 = v42;
                          v68 = 1024;
                          v69 = v43;
                          v70 = 1024;
                          v71 = v44;
                          v72 = 1024;
                          v73 = v45;
                          v74 = 1024;
                          v75 = v46;
                          v76 = 1024;
                          v77 = v31;
                          _os_log_impl(&dword_184457000, v30, OS_LOG_TYPE_DEFAULT, "Converted HDR10PlusMetadataParams:TargetedSystemDisplayMaxLum[%u], AverageMaxRGB[%u], distValues[%u, %u, %u, %u, %u, %u, %u, %u, %u], KneePointX[%u], KneePointY[%u], ToneMappingFlag[%u], GraphicsOverlayFlag[%u], vsifTimingMode[%u]\n", buf, 0x62u);
                        }
                      }
                    }
                    *v7 = 0;
                    CFRelease(v16);
                    goto LABEL_50;
                  }
                }
                CFRelease(v16);
              }
            }
          }
        }
        if (*v7 == 3)
          return;
        if (BYTE6(xmmword_1ECDC6A90))
        {
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v26 = x_log_category_windowserver;
            if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_184457000, v26, OS_LOG_TYPE_DEFAULT, "HDR10PlusMetadata: Swapping in NULL metadata", buf, 2u);
            }
          }
        }
        **((_BYTE **)this + 3204) = 0;
        *v7 = 3;
LABEL_50:
        IOMobileFramebufferSwapSetParams();
      }
    }
  }
}

uint64_t CA::WindowServer::IOMFBDisplay::swap_display_edr_factor(uint64_t this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  double v6;
  uint8_t buf[8];
  __int16 v8;
  double v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v1 = this + 26144;
  v2 = *(float *)(this + 26144);
  if (*(float *)(this + 26148) != v2)
  {
    v3 = this;
    *(float *)(this + 26148) = v2;
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v4 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEBUG))
      {
        v5 = *(_DWORD *)(v3 + 24);
        v6 = *(float *)v1;
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v5;
        v8 = 2048;
        v9 = v6;
        _os_log_impl(&dword_184457000, v4, OS_LOG_TYPE_DEBUG, "Display %u setting display edr to %g", buf, 0x12u);
      }
    }
    if (*(_BYTE *)(v1 + 1979) && (*(_BYTE *)(v3 + 746) & 2) != 0)
    {
      return IOMobileFramebufferSwapSetDisplayEdr();
    }
    else
    {
      *(_QWORD *)buf = vcvts_n_u32_f32(*(float *)v1, 0x10uLL);
      return IOMobileFramebufferSetParameter();
    }
  }
  return this;
}

uint64_t CA::WindowServer::IOMFBDisplay::finish_update_(uint64_t a1, _DWORD *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t updated;
  CA::WindowServer::Surface *v11;
  unsigned int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v6 = a1 + 25336;
  v13 = a4;
  v7 = *(_DWORD *)(a1 + 25680);
  if (v7 == 1)
    a2[6] = 0;
  *a2 = *(_DWORD *)(a3 + 248);
  if (*(_BYTE *)(a1 + 28078) && !*(_DWORD *)(a1 + 25904))
    *(_DWORD *)(a1 + 25904) = a2[6];
  v8 = *(_DWORD *)(a1 + 25672);
  *(_DWORD *)(a1 + 25676) = v8;
  if (v8 + 1 == v7)
    v9 = 0;
  else
    v9 = v8 + 1;
  *(_DWORD *)(a1 + 25672) = v9;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 2184))(a1, (*(_DWORD *)(a3 + 268) >> 5) & 1);
  updated = CA::WindowServer::Display::update_clones((CA::WindowServer::Display *)a1, (CA::Render::Update *)a3, &v13);
  *(_BYTE *)(v6 + 2715) = 0;
  *(_BYTE *)(v6 + 2727) = 0;
  ++*(_DWORD *)v6;
  if (!*(_BYTE *)(v6 + 2777))
    ++*(_DWORD *)(v6 + 16);
  *(_BYTE *)(v6 + 2777) = 0;
  v11 = *(CA::WindowServer::Surface **)(a1 + 26512);
  if (v11
    && ((*(_DWORD *)(a1 + 624) & 4) == 0
     || ((*(unsigned int *)(a3 + 1064) | ((unint64_t)*(unsigned __int16 *)(a3 + 1068) << 32)) & 0x10000000000) == 0))
  {
    CA::WindowServer::Surface::unref(v11);
    *(_QWORD *)(a1 + 26512) = 0;
  }
  CA::WindowServer::IOMFBDisplay::collect_buffers((CA::WindowServer::IOMFBDisplay *)a1, *(_QWORD *)(a3 + 288));
  CA::WindowServer::Display::purge_surfaces((os_unfair_lock_s *)a1, 0);
  return updated;
}

void CA::WindowServer::IOMFBDisplay::collect_buffers(CA::WindowServer::IOMFBDisplay *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  _DWORD *v5;
  malloc_zone_t *malloc_zone;

  v2 = *((_QWORD *)this + 3250);
  if (v2)
  {
    v4 = (uint64_t *)((char *)this + 26000);
    do
    {
      if (*(_DWORD *)(v2 + 8)
        || (v5 = *(_DWORD **)(v2 + 32)) == 0
        || (v5[56] & 0x4000000) != 0
        || (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 216))(v5) == a2
        && (*(_DWORD *)(*(_QWORD *)(v2 + 32) + 224) & 0x10000000) == 0)
      {
        v4 = (uint64_t *)v2;
      }
      else
      {
        *v4 = *(_QWORD *)v2;
        CA::WindowServer::IOMFBDisplay::release_buffer((_QWORD *)v2);
        malloc_zone = (malloc_zone_t *)get_malloc_zone();
        malloc_zone_free(malloc_zone, (void *)v2);
      }
      v2 = *v4;
    }
    while (*v4);
  }
}

uint64_t CA::WindowServer::IOMFBDisplay::set_dpb_enabled(uint64_t this, int a2)
{
  CA::WindowServer::IOMFBDisplay *v2;
  pthread_mutex_t *v3;

  if (*(unsigned __int8 *)(this + 28064) != a2)
  {
    v2 = (CA::WindowServer::IOMFBDisplay *)this;
    *(_BYTE *)(this + 28064) = a2;
    v3 = (pthread_mutex_t *)(this + 560);
    pthread_mutex_lock((pthread_mutex_t *)(this + 560));
    CA::WindowServer::IOMFBDisplay::update_framebuffer_locked(v2, 8);
    return pthread_mutex_unlock(v3);
  }
  return this;
}

uint64_t CA::WindowServer::Display::update_clones(CA::WindowServer::Display *this, CA::Render::Update *a2, unsigned int *a3)
{
  uint64_t *v3;
  char v5;
  uint64_t v6;
  pthread_mutex_t *v7;
  unsigned int v8;
  pthread_mutex_t *v9;
  _BYTE *v10;
  uint64_t v11;
  double v12;
  double v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  _BOOL4 v17;
  uint64_t v18;
  double v19;
  _DWORD *v20;
  uint64_t v21;
  char *v22;
  os_log_type_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  float *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unsigned int *v36;
  pid_t v38;
  unsigned __int8 *v39;
  unsigned int v40;
  uint64_t v41;
  const char *v42;
  const char *v43;
  NSObject *v44;
  const char *v45;
  uint32_t v46;
  const char *v47;
  const char *v48;
  int v49;
  float v50;
  unsigned int *v51;
  unsigned int v52;
  pid_t v53;
  unsigned int v55;
  int v56;
  CA::Render::Context *v57;
  unsigned int v58;
  int v59;
  _DWORD *v60;
  _BOOL4 v61;
  int v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  NSObject *log;
  os_unfair_lock_s *loga;
  BOOL v72;
  int v73;
  uint8_t buf[4];
  _BYTE v75[10];
  const char *v76;
  __int16 v77;
  int v78;
  __int16 v79;
  int v80;
  __int16 v81;
  double v82;
  __int16 v83;
  unsigned int v84;
  __int16 v85;
  _DWORD *v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v72 = 0;
  v3 = (uint64_t *)*((_QWORD *)this + 5);
  if (!v3)
  {
    v61 = 0;
    v5 = 0;
    goto LABEL_99;
  }
  v5 = 0;
  do
  {
    v6 = *v3;
    v73 = 0;
    CARecordCurrentDisplay::CARecordCurrentDisplay((CARecordCurrentDisplay *)&v73, *(_DWORD *)(*(_QWORD *)(v6 + 96) + 24));
    v7 = (pthread_mutex_t *)(*(_QWORD *)(v6 + 96) + 496);
    if (pthread_mutex_trylock(v7))
    {
      LOBYTE(v8) = -17;
      goto LABEL_33;
    }
    v9 = (pthread_mutex_t *)(v6 + 24);
    pthread_mutex_lock((pthread_mutex_t *)(v6 + 24));
    v10 = *(_BYTE **)(v6 + 96);
    if ((v10[56] & 0x20) != 0)
    {
      v18 = mach_absolute_time();
      v19 = CATimeWithHostTime(v18);
      if (CA::WindowServer::Server::replay_render((CA::WindowServer::Server *)v6, v19, this, &v72))
        LOBYTE(v8) = -18;
      else
        LOBYTE(v8) = 0;
      goto LABEL_32;
    }
    v8 = (*(uint64_t (**)(_BYTE *, uint64_t, CA::WindowServer::Display *, CA::Render::Update *, unsigned int *, BOOL *))(*(_QWORD *)v10 + 672))(v10, v6, this, a2, a3, &v72);
    if (CADeviceHasInternalBuild::once != -1)
      dispatch_once(&CADeviceHasInternalBuild::once, &__block_literal_global_107);
    if (!CADeviceHasInternalBuild::internal || !v8 || v8 == 234 || v8 == 243)
      goto LABEL_32;
    v11 = mach_absolute_time();
    v12 = CATimeWithHostTime(v11);
    v13 = v12 - *(double *)(v6 + 504);
    if (v13 > 1.0)
    {
      *(double *)(v6 + 504) = v12;
      v13 = v12 - v12;
    }
    v14 = v8 == 235 || v8 == 237;
    v15 = v14 || v8 >= 0xFE;
    v16 = v15 || v8 == 244;
    v17 = !v16;
    if (v13 >= 0.05)
      goto LABEL_32;
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      if (v17)
        v23 = OS_LOG_TYPE_ERROR;
      else
        v23 = OS_LOG_TYPE_DEFAULT;
      log = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, v23))
      {
        v24 = *(_QWORD *)(v6 + 96);
        v25 = *(_DWORD *)(v24 + 24);
        LODWORD(v24) = *(_DWORD *)(v24 + 25348);
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)v75 = v25;
        *(_WORD *)&v75[4] = 1024;
        *(_DWORD *)&v75[6] = v8;
        LOWORD(v76) = 1024;
        *(_DWORD *)((char *)&v76 + 2) = v24;
        _os_log_impl(&dword_184457000, log, v23, "display %u clone_update failed with status 0x%x, skipped_cloned_frame_count=%u", buf, 0x14u);
      }
    }
    if (v8 != 255)
      goto LABEL_32;
    loga = (os_unfair_lock_s *)(v6 + 16);
    os_unfair_lock_lock((os_unfair_lock_t)(v6 + 16));
    v26 = *(_QWORD *)(v6 + 128);
    if (v26)
    {
      v27 = 0;
      v28 = 0;
      v29 = *(_QWORD **)(v6 + 112);
      v30 = v29;
      do
      {
        v31 = *v30;
        v30 += 2;
        v32 = *(_DWORD *)(v31 + 12);
        if (v28)
          v33 = 0;
        else
          v33 = (v32 & 0x20000) == 0;
        if (v33)
          v28 = (float *)v29;
        v27 += (v32 & 0x20000) == 0;
        v29 = v30;
        --v26;
      }
      while (v26);
      v34 = *(unsigned __int8 **)(*(_QWORD *)(v6 + 96) + 728);
      v6 = *v34;
      v35 = v34[1];
      if (v28)
      {
        v66 = v35;
        if (x_log_hook_p())
        {
          v36 = (unsigned int *)(*(_QWORD *)v28 + 228);
          if (!atomic_load(v36))
          {
            if (*(_DWORD *)(*(_QWORD *)v28 + 252))
              v38 = 0;
            else
              v38 = getpid();
            while (!__ldaxr(v36))
            {
              if (!__stlxr(v38, v36))
                goto LABEL_84;
            }
            __clrex();
          }
LABEL_84:
          CA::Render::Context::process_path(*(CA::Render::Context **)v28);
LABEL_85:
          x_log_();
          goto LABEL_97;
        }
        v65 = x_log_category_windowserver;
        if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
        {
          v47 = "unknown";
          if (v6 <= 0xB)
            v47 = off_1E159DA10[v6];
          v64 = v47;
          v48 = "unknown";
          if (v66 <= 0xB)
            v48 = off_1E159DA10[v66];
          v67 = v48;
          v49 = *(_DWORD *)(*(_QWORD *)v28 + 16);
          v50 = v28[2];
          v51 = (unsigned int *)(*(_QWORD *)v28 + 228);
          v52 = atomic_load(v51);
          if (!v52)
          {
            v63 = *(_DWORD *)(*(_QWORD *)v28 + 16);
            if (*(_DWORD *)(*(_QWORD *)v28 + 252))
              v53 = 0;
            else
              v53 = getpid();
            while (1)
            {
              v55 = __ldaxr(v51);
              if (v55)
                break;
              if (!__stlxr(v53, v51))
              {
                v56 = 1;
                goto LABEL_91;
              }
            }
            v56 = 0;
            __clrex();
LABEL_91:
            if (v56)
              v52 = v53;
            else
              v52 = v55;
            v49 = v63;
          }
          v57 = *(CA::Render::Context **)v28;
          v58 = v52;
          v59 = v49;
          v60 = CA::Render::Context::process_path(v57);
          *(_DWORD *)buf = 136316674;
          *(_QWORD *)v75 = v64;
          *(_WORD *)&v75[8] = 2080;
          v44 = v65;
          v76 = v67;
          v77 = 1024;
          v78 = v27;
          v79 = 1024;
          v80 = v59;
          v81 = 2048;
          v82 = v50;
          v83 = 1024;
          v84 = v58;
          v85 = 2080;
          v86 = v60 + 7;
          v45 = "display_state: %s %s, context 1/%d: %x: level %g; pid %d [%s]";
          v46 = 60;
          goto LABEL_96;
        }
        goto LABEL_97;
      }
      v40 = v35;
    }
    else
    {
      v39 = *(unsigned __int8 **)(*(_QWORD *)(v6 + 96) + 728);
      LODWORD(v6) = *v39;
      v40 = v39[1];
    }
    if (x_log_hook_p())
      goto LABEL_85;
    v41 = x_log_category_windowserver;
    if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
    {
      v42 = "unknown";
      if (v6 <= 0xB)
        v42 = off_1E159DA10[v6];
      v43 = "unknown";
      if (v40 <= 0xB)
        v43 = off_1E159DA10[v40];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)v75 = v42;
      *(_WORD *)&v75[8] = 2080;
      v76 = v43;
      v44 = v41;
      v45 = "display_state: %s %s, no contexts";
      v46 = 22;
LABEL_96:
      _os_log_impl(&dword_184457000, v44, OS_LOG_TYPE_DEFAULT, v45, buf, v46);
    }
LABEL_97:
    os_unfair_lock_unlock(loga);
    LOBYTE(v8) = -1;
LABEL_32:
    pthread_mutex_unlock(v9);
    pthread_mutex_unlock(v7);
LABEL_33:
    v20 = pthread_getspecific(current_display_slot);
    if (v20 && *v20)
      --*v20;
    v21 = 0;
    while (CA::WindowServer::Display::update_clones(CA::Render::Update *,unsigned int &)::no_retry_statuses[v21] != v8)
    {
      if (++v21 == 7)
      {
        v22 = (char *)&unk_184751EFF;
        goto LABEL_41;
      }
    }
    v22 = &CA::WindowServer::Display::update_clones(CA::Render::Update *,unsigned int &)::no_retry_statuses[v21];
LABEL_41:
    v5 |= v22 - CA::WindowServer::Display::update_clones(CA::Render::Update *,unsigned int &)::no_retry_statuses == 7;
    v3 = (uint64_t *)v3[1];
  }
  while (v3);
  v61 = v72;
LABEL_99:
  CA::WindowServer::Display::update_clone_flags(this, v61);
  return v5 & 1;
}

_QWORD *CA::Render::Update::swap_displayable_contexts(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = result + 104;
  v3 = result[104];
  result[104] = *(_QWORD *)a2;
  *(_QWORD *)a2 = v3;
  v4 = result + 105;
  v5 = result[105];
  v6 = result[106];
  *(_OWORD *)(result + 105) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v6;
  if (result[106])
    v2 = (_QWORD *)(*v4 + 16);
  *v2 = v4;
  v7 = (_QWORD *)(*(_QWORD *)(a2 + 8) + 16);
  if (!v6)
    v7 = (_QWORD *)a2;
  *v7 = a2 + 8;
  return result;
}

uint64_t *std::__tree<CA::Render::Object *>::swap(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *result;
  *result = *(_QWORD *)a2;
  *(_QWORD *)a2 = v2;
  v5 = result[1];
  v4 = result[2];
  v3 = result + 1;
  *(_OWORD *)(result + 1) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v4;
  if (result[2])
    result = (uint64_t *)(*v3 + 16);
  *result = (uint64_t)v3;
  v6 = (_QWORD *)(*(_QWORD *)(a2 + 8) + 16);
  if (!v4)
    v6 = (_QWORD *)a2;
  *v6 = a2 + 8;
  return result;
}

BOOL CA::WindowServer::Display::purge_surfaces(os_unfair_lock_s *this, char a2)
{
  os_unfair_lock_s *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  _BOOL8 v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BOOL4 is_complete_with_timeout;
  uint64_t v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;

  v4 = this + 56;
  os_unfair_lock_lock(this + 56);
  v6 = *(_QWORD **)&this[64]._os_unfair_lock_opaque;
  v5 = *(_QWORD **)&this[66]._os_unfair_lock_opaque;
  if (v6 == v5)
  {
    v14 = 0;
    goto LABEL_31;
  }
  v7 = *(_QWORD **)&this[66]._os_unfair_lock_opaque;
  while (1)
  {
    v8 = *v6;
    if ((*(_DWORD *)(*v6 + 224) & 0x4000000) == 0)
    {
      v9 = *(_QWORD *)(v8 + 16);
      if (v9)
      {
        v10 = objc_msgSend(*(id *)(v9 + 8), "signaledValue") + 1;
        v8 = *v6;
        if (*(_QWORD *)(v9 + 32) - 1 >= v10)
        {
          if (!CA::WindowServer::SharedEvent::is_complete_with_timeout(*(CA::WindowServer::SharedEvent **)(v8 + 16)))
            goto LABEL_10;
          v8 = *v6;
        }
      }
      if ((a2 & 1) != 0)
        goto LABEL_14;
      v12 = *(_DWORD *)(v8 + 224);
      v11 = v8 + 224;
      v13 = v12 & 0xFF00FFFF | ((unint64_t)*(unsigned __int8 *)(v11 + 4) << 32);
      *(_BYTE *)(v11 + 4) = BYTE4(v13);
      *(_DWORD *)v11 = v13 | ((BYTE2(v12) - 1) << 16);
      if (BYTE2(v12) == 1)
        break;
    }
LABEL_10:
    if (++v6 == v5)
      goto LABEL_29;
  }
  v8 = *v6;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (v6 != v5)
  {
    v15 = v6 + 1;
    v7 = v6;
    while (v15 != v5)
    {
      v16 = *v15;
      if ((*(_DWORD *)(*v15 + 224) & 0x4000000) != 0)
        goto LABEL_25;
      v17 = *(_QWORD *)(v16 + 16);
      if (v17)
      {
        v18 = objc_msgSend(*(id *)(v17 + 8), "signaledValue") + 1;
        v16 = *v15;
        if (*(_QWORD *)(v17 + 32) - 1 >= v18)
        {
          is_complete_with_timeout = CA::WindowServer::SharedEvent::is_complete_with_timeout(*(CA::WindowServer::SharedEvent **)(v16 + 16));
          v16 = *v15;
          if (!is_complete_with_timeout)
            goto LABEL_25;
        }
      }
      if ((a2 & 1) != 0
        || (v21 = *(_DWORD *)(v16 + 224),
            v20 = v16 + 224,
            v22 = v21 & 0xFF00FFFF | ((unint64_t)*(unsigned __int8 *)(v20 + 4) << 32),
            *(_DWORD *)v20 = v21 & 0xFF00FFFF | ((BYTE2(v21) - 1) << 16),
            *(_BYTE *)(v20 + 4) = BYTE4(v22),
            v16 = *v15,
            BYTE2(v21) == 1))
      {
        if (v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      }
      else
      {
LABEL_25:
        *v7++ = v16;
      }
      ++v15;
    }
  }
LABEL_29:
  v23 = *(_QWORD **)&this[66]._os_unfair_lock_opaque;
  v14 = v7 != v23;
  if (v7 != v23)
  {
    *(_QWORD *)&this[66]._os_unfair_lock_opaque = v7;
    v14 = 1;
  }
LABEL_31:
  os_unfair_lock_unlock(v4);
  return v14;
}

uint64_t **X::small_vector_base<void({block_pointer})(__CFDictionary const*)>::small_vector_base(uint64_t **result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  *result = a3;
  result[1] = a3;
  result[2] = a3;
  v3 = *(_QWORD *)(a2 + 16);
  result[3] = *(uint64_t **)(a2 + 24);
  v4 = *(uint64_t **)a2;
  if (*(_QWORD *)a2 == v3)
  {
    result[1] = (uint64_t *)((char *)a3 + *(_QWORD *)(a2 + 8) - (_QWORD)v4);
    v6 = *(uint64_t **)(a2 + 8);
    while (v4 != v6)
    {
      v7 = *v4++;
      *a3++ = v7;
    }
  }
  else
  {
    v5 = *(uint64_t **)(a2 + 8);
    *result = v4;
    result[1] = v5;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t CA::OGL::MetalContext::supports_fences(CA::OGL::MetalContext *this)
{
  return 1;
}

unint64_t CA::OGL::MetalContext::set_fence(CA::OGL::MetalContext *this)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD **v7;
  _QWORD *i;
  unint64_t v9;
  float v10;
  float v11;
  _BOOL8 v12;
  unint64_t v13;
  unint64_t v14;
  int8x8_t prime;
  void *v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint8x8_t v21;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  void *v32;

  v2 = *((_QWORD *)this + 342) + 1;
  *((_QWORD *)this + 342) = v2;
  v3 = atomic_load((unint64_t *)this + 497);
  v4 = *((_QWORD *)this + 338);
  if (v4)
  {
    v5 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
    v5.i16[0] = vaddlv_u8(v5);
    if (v5.u32[0] > 1uLL)
    {
      v6 = v2;
      if (v2 >= v4)
        v6 = v2 % v4;
    }
    else
    {
      v6 = (v4 - 1) & v2;
    }
    v7 = *(_QWORD ***)(*((_QWORD *)this + 337) + 8 * v6);
    if (v7)
    {
      for (i = *v7; i; i = (_QWORD *)*i)
      {
        v9 = i[1];
        if (v9 == v2)
        {
          if (i[2] == v2)
            goto LABEL_74;
        }
        else
        {
          if (v5.u32[0] > 1uLL)
          {
            if (v9 >= v4)
              v9 %= v4;
          }
          else
          {
            v9 &= v4 - 1;
          }
          if (v9 != v6)
            break;
        }
      }
    }
  }
  else
  {
    v6 = 0;
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v2;
  i[2] = v2;
  i[3] = 0;
  v10 = (float)(unint64_t)(*((_QWORD *)this + 340) + 1);
  v11 = *((float *)this + 682);
  if (!v4 || (float)(v11 * (float)v4) < v10)
  {
    v12 = 1;
    if (v4 >= 3)
      v12 = (v4 & (v4 - 1)) != 0;
    v13 = v12 | (2 * v4);
    v14 = vcvtps_u32_f32(v10 / v11);
    if (v13 <= v14)
      prime = (int8x8_t)v14;
    else
      prime = (int8x8_t)v13;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v4 = *((_QWORD *)this + 338);
    }
    if (*(_QWORD *)&prime > v4)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v4)
    {
      v22 = vcvtps_u32_f32((float)*((unint64_t *)this + 340) / *((float *)this + 682));
      if (v4 < 3 || (v23 = (uint8x8_t)vcnt_s8((int8x8_t)v4), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        v22 = std::__next_prime(v22);
      }
      else
      {
        v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2)
          v22 = v24;
      }
      if (*(_QWORD *)&prime <= v22)
        prime = (int8x8_t)v22;
      if (*(_QWORD *)&prime >= v4)
      {
        v4 = *((_QWORD *)this + 338);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v16 = operator new(8 * *(_QWORD *)&prime);
          v17 = (void *)*((_QWORD *)this + 337);
          *((_QWORD *)this + 337) = v16;
          if (v17)
            operator delete(v17);
          v18 = 0;
          *((int8x8_t *)this + 338) = prime;
          do
            *(_QWORD *)(*((_QWORD *)this + 337) + 8 * v18++) = 0;
          while (*(_QWORD *)&prime != v18);
          v19 = (_QWORD *)*((_QWORD *)this + 339);
          if (v19)
          {
            v20 = v19[1];
            v21 = (uint8x8_t)vcnt_s8(prime);
            v21.i16[0] = vaddlv_u8(v21);
            if (v21.u32[0] > 1uLL)
            {
              if (v20 >= *(_QWORD *)&prime)
                v20 %= *(_QWORD *)&prime;
            }
            else
            {
              v20 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*((_QWORD *)this + 337) + 8 * v20) = (char *)this + 2712;
            v25 = (_QWORD *)*v19;
            if (*v19)
            {
              do
              {
                v26 = v25[1];
                if (v21.u32[0] > 1uLL)
                {
                  if (v26 >= *(_QWORD *)&prime)
                    v26 %= *(_QWORD *)&prime;
                }
                else
                {
                  v26 &= *(_QWORD *)&prime - 1;
                }
                if (v26 != v20)
                {
                  v27 = *((_QWORD *)this + 337);
                  if (!*(_QWORD *)(v27 + 8 * v26))
                  {
                    *(_QWORD *)(v27 + 8 * v26) = v19;
                    goto LABEL_55;
                  }
                  *v19 = *v25;
                  *v25 = **(_QWORD **)(*((_QWORD *)this + 337) + 8 * v26);
                  **(_QWORD **)(*((_QWORD *)this + 337) + 8 * v26) = v25;
                  v25 = v19;
                }
                v26 = v20;
LABEL_55:
                v19 = v25;
                v25 = (_QWORD *)*v25;
                v20 = v26;
              }
              while (v25);
            }
          }
          v4 = (unint64_t)prime;
          goto LABEL_59;
        }
        v32 = (void *)*((_QWORD *)this + 337);
        *((_QWORD *)this + 337) = 0;
        if (v32)
          operator delete(v32);
        v4 = 0;
        *((_QWORD *)this + 338) = 0;
      }
    }
LABEL_59:
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v2 >= v4)
        v6 = v2 % v4;
      else
        v6 = v2;
    }
    else
    {
      v6 = (v4 - 1) & v2;
    }
  }
  v28 = *((_QWORD *)this + 337);
  v29 = *(_QWORD **)(v28 + 8 * v6);
  if (v29)
  {
    *i = *v29;
LABEL_72:
    *v29 = i;
    goto LABEL_73;
  }
  *i = *((_QWORD *)this + 339);
  *((_QWORD *)this + 339) = i;
  *(_QWORD *)(v28 + 8 * v6) = (char *)this + 2712;
  if (*i)
  {
    v30 = *(_QWORD *)(*i + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v30 >= v4)
        v30 %= v4;
    }
    else
    {
      v30 &= v4 - 1;
    }
    v29 = (_QWORD *)(*((_QWORD *)this + 337) + 8 * v30);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)this + 340);
LABEL_74:
  i[3] = v3;
  return v2;
}

void sub_1845284A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void CA::WindowServer::IOMFBDisplay::update_blend_display_color_spaces(CA::WindowServer::IOMFBDisplay *this)
{
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unsigned int *v6;
  CGColorSpace *v7;
  _BYTE *v8;
  CGColorSpace *v9;
  _DWORD *v10;
  _DWORD *v11;
  CGColorSpace *v12;
  _DWORD *v13;
  uint64_t v14;
  const __CFString *v15;
  uint64_t v16;
  const __CFString *v17;
  NSObject *v18;
  int v19;
  NSObject *v20;
  int v21;
  const char *v22;
  uint8_t buf[4];
  int v24;
  __int16 v25;
  const char *CString;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1832))(this))
    v2 = HIBYTE(xmmword_1ECDC6AB0) == 0;
  else
    v2 = 0;
  if (v2)
  {
    if (initialized[0] != -1)
      dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
    if (*(float *)&dword_1ECDC69D4)
    {
      v3 = CAGetColorSpace(*(float *)&dword_1ECDC69D4);
      (*(void (**)(CA::WindowServer::IOMFBDisplay *, uint64_t))(*(_QWORD *)this + 1808))(this, v3);
      if (initialized[0] != -1)
        dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
    }
    if (*(float *)&dword_1ECDC69D8)
    {
      v4 = CAGetColorSpace(*(float *)&dword_1ECDC69D8);
      (*(void (**)(CA::WindowServer::IOMFBDisplay *, uint64_t))(*(_QWORD *)this + 1824))(this, v4);
    }
    if (*((_BYTE *)this + 28116) || *((_BYTE *)this + 28117))
    {
      v5 = CA::WindowServer::IOMFBDisplay::color_program_cache(this);
      v5[63] = 1;
      *((_DWORD *)this + 6824) = -1;
      v6 = (unsigned int *)((char *)this + 48 * *((unsigned int *)this + 6418) + 25776);
      if (!*v6)
        CA::IOMobileFramebuffer::swap_begin((CA::WindowServer::IOMFBDisplay *)((char *)this + 25536), v6);
      v7 = (CGColorSpace *)CAGetColorSpace(0x1Eu);
      v8 = &unk_1ECDC6000;
      if (*((_BYTE *)this + 28116))
      {
        v9 = (CGColorSpace *)(*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1800))(this);
        if (BYTE8(xmmword_1ECDC6AB0))
        {
          v14 = CGColorSpaceCopyICCProfileDescription();
          if (v14)
          {
            v15 = (const __CFString *)v14;
            v33 = 0u;
            v34 = 0u;
            v31 = 0u;
            v32 = 0u;
            v29 = 0u;
            v30 = 0u;
            v27 = 0u;
            v28 = 0u;
            if (x_log_hook_p())
            {
              CA_CFStringGetCString(v15, (char *)&v27, 128);
              x_log_();
            }
            else
            {
              v18 = x_log_category_color;
              if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_INFO))
              {
                v19 = *((_DWORD *)this + 6);
                *(_DWORD *)buf = 67109378;
                v24 = v19;
                v25 = 2080;
                CString = CA_CFStringGetCString(v15, (char *)&v27, 128);
                _os_log_impl(&dword_184457000, v18, OS_LOG_TYPE_INFO, "Display %u setting IOMFB blending colorspace to '%s'", buf, 0x12u);
              }
            }
            CFRelease(v15);
            v8 = (_BYTE *)&unk_1ECDC6000;
          }
        }
        CA::ColorProgram::Cache::set_colorspace((CGColorSpace **)v5, v9);
        v10 = CA::ColorProgram::Cache::lookup((uint64_t)v5, v7, 0, 0);
        if (v10)
          CA::WindowServer::IOMFBDisplay::set_icc_matrix_and_trc((uint64_t)this, (uint64_t)v10, 1u, 1u, -1);
        CA::ColorProgram::Cache::set_colorspace((CGColorSpace **)v5, v7);
        v11 = CA::ColorProgram::Cache::lookup((uint64_t)v5, v9, 0, 0);
        if (v11)
          CA::WindowServer::IOMFBDisplay::set_icc_matrix_and_trc((uint64_t)this, (uint64_t)v11, 4u, 0xCu, -1);
        *((_BYTE *)this + 28116) = 0;
      }
      if (*((_BYTE *)this + 28117))
      {
        (*(void (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1816))(this);
        if (v8[2744])
        {
          v16 = CGColorSpaceCopyICCProfileDescription();
          if (v16)
          {
            v17 = (const __CFString *)v16;
            v33 = 0u;
            v34 = 0u;
            v31 = 0u;
            v32 = 0u;
            v29 = 0u;
            v30 = 0u;
            v27 = 0u;
            v28 = 0u;
            if (x_log_hook_p())
            {
              CA_CFStringGetCString(v17, (char *)&v27, 128);
              x_log_();
            }
            else
            {
              v20 = x_log_category_color;
              if (os_log_type_enabled((os_log_t)x_log_category_color, OS_LOG_TYPE_INFO))
              {
                v21 = *((_DWORD *)this + 6);
                v22 = CA_CFStringGetCString(v17, (char *)&v27, 128);
                *(_DWORD *)buf = 67109378;
                v24 = v21;
                v25 = 2080;
                CString = v22;
                _os_log_impl(&dword_184457000, v20, OS_LOG_TYPE_INFO, "Display %u setting IOMFB display colorspace to '%s'", buf, 0x12u);
              }
            }
            CFRelease(v17);
          }
        }
        v12 = (CGColorSpace *)(*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1816))(this);
        CA::ColorProgram::Cache::set_colorspace((CGColorSpace **)v5, v12);
        v13 = CA::ColorProgram::Cache::lookup((uint64_t)v5, v7, 0, 0);
        if (v13)
          CA::WindowServer::IOMFBDisplay::set_icc_matrix_and_trc((uint64_t)this, (uint64_t)v13, 5u, 0xFu, -1);
        *((_BYTE *)this + 28117) = 0;
      }
    }
  }
}

unint64_t CA::Shape::coalesce(CA::Shape *this, CA::Bounds *a2, unint64_t a3)
{
  unint64_t v4;
  uint64_t v6;
  float64x2_t v7;
  float64x2_t v8;
  unint64_t v9;
  int8x16_t v10;
  char v11;
  char *v12;
  unint64_t v13;
  int32x2_t *v14;
  unsigned int v15;
  char *v16;
  int v17;
  _DWORD *v18;
  __int32 v19;
  int32x2_t v20;
  int32x4_t v21;
  int32x2_t *v22;
  int32x2_t v23;
  uint32x2_t v24;
  unsigned __int32 v25;
  uint32x2_t v26;
  unsigned __int32 v27;
  int32x2_t v28;
  int32x4_t v29;
  __int32 v30;
  __int32 *v31;
  int32x2_t v32;
  int32x2_t v33;
  uint32x2_t v34;
  uint32x2_t v35;
  char v36;
  unint64_t v37;
  char *v38;
  unint64_t result;
  uint64_t v40;
  int32x2_t *v41;
  uint64_t i;
  uint64_t v43;
  int32x2_t *v44;
  int32x2_t v45;
  uint32x2_t v46;
  unsigned __int32 v47;
  uint64_t v48;
  int32x2_t *v49;
  uint32x2_t v50;
  uint32x2_t v51;
  CA::Shape *v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  __int128 v57;
  uint64_t v58[4];

  v58[3] = *MEMORY[0x1E0C80C00];
  v4 = a3 - 1;
  if (a3 == 1)
    goto LABEL_56;
  v56 = 0;
  v57 = 0uLL;
  v58[0] = (uint64_t)this;
  v58[1] = 0;
  v58[2] = 0;
  if (a3 + 1 > 2)
    v6 = a3 + 1;
  else
    v6 = 2;
  v54 = (char *)a2 + 32;
  v55 = a3 - 2;
  v52 = this;
  v53 = -1;
LABEL_6:
  while (2)
  {
    if ((CA::ShapeIterator::iterate(v58, (int *)&v57) & 1) != 0)
    {
      if (v56 < a3)
      {
        *((_OWORD *)a2 + v56++) = v57;
        ++v53;
        continue;
      }
      v9 = 0;
      v10 = 0uLL;
      v11 = 1;
      v7.f64[0] = INFINITY;
      while (1)
      {
        v12 = (char *)a2 + 28;
        v13 = 1;
        do
        {
          v14 = (int32x2_t *)(v12 - 12);
          if (v13 >= a3)
            v14 = (int32x2_t *)&v57;
          v15 = *((_DWORD *)v12 - 6);
          if ((v11 & 1) == 0)
            goto LABEL_20;
          v16 = v12 - 8;
          if (v13 >= a3)
            v16 = (char *)&v57 + 4;
          v17 = *(_DWORD *)v16;
          if (v15 == v17
            || (v13 >= a3 ? (v18 = (_DWORD *)((unint64_t)&v57 | 0xC)) : (v18 = v12),
                *((_DWORD *)v12 - 4) + v15 == *v18 + v17))
          {
LABEL_20:
            v19 = *((_DWORD *)v12 - 7);
            v20 = *(int32x2_t *)(v12 - 20);
            v21.i32[0] = v19;
            v21.i32[1] = *((_DWORD *)v12 - 6);
            v21.u64[1] = (unint64_t)v20;
            v22 = (int32x2_t *)(v12 - 4);
            if (v13 >= a3)
              v22 = (int32x2_t *)&v57 + 1;
            v23 = *v22;
            v24 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v20);
            v25 = vpmax_u32(v24, v24).u32[0];
            v26 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *v22);
            v27 = vpmax_u32(v26, v26).u32[0];
            if ((v25 & 0x80000000) != 0)
            {
              if ((v27 & 0x80000000) == 0)
              {
                *(int32x2_t *)v29.i8 = *v14;
                v29.i32[3] = vextq_s8(*(int8x16_t *)&v21, *(int8x16_t *)&v21, 8uLL).i32[1];
                v29.i32[2] = (__int32)*v22;
                v28 = *v22;
LABEL_27:
                v21 = v29;
                v21.i32[3] = v28.i32[1];
              }
            }
            else if ((v27 & 0x80000000) == 0)
            {
              *(int32x2_t *)v29.i8 = vmin_s32((int32x2_t)__PAIR64__(v15, v19), *v14);
              v28 = vsub_s32(vmax_s32(vadd_s32((int32x2_t)__PAIR64__(v15, v19), v20), vadd_s32(*v14, v23)), *(int32x2_t *)v29.i8);
              v29.i32[3] = vextq_s8(*(int8x16_t *)&v21, *(int8x16_t *)&v21, 8uLL).i32[1];
              v29.i32[2] = v28.i32[0];
              goto LABEL_27;
            }
            v30 = vmulq_laneq_s32(v21, v21, 3).i32[2];
            if (v13 >= a3)
              v31 = (__int32 *)((unint64_t)&v57 | 0xC);
            else
              v31 = (__int32 *)v12;
            v32 = vdup_lane_s32(v20, 0);
            v32.i32[0] = *v31;
            v23.i32[1] = HIDWORD(*(_QWORD *)(v12 - 20));
            v33 = vmul_s32(v32, v23);
            v33.i32[0] = vadd_s32(v33, vdup_lane_s32(v33, 1)).u32[0];
            v8.f64[0] = (double)((v30 - v33.i32[0]) & ~((v30 - v33.i32[0]) >> 31));
            if ((v25 & 0x80000000) == 0)
            {
              v34 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *v22);
              if ((vpmax_u32(v34, v34).u32[0] & 0x80000000) == 0)
              {
                v35 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, vsub_s32(vmin_s32(vadd_s32(*(int32x2_t *)(v12 - 28), v20), vadd_s32(*v14, *v22)), vmax_s32(*(int32x2_t *)(v12 - 28), *v14)));
                if (vpmax_u32(v35, v35).i32[0] >= 0)
                  v8.f64[0] = 0.0;
              }
            }
            v10 = vbslq_s8((int8x16_t)vdupq_lane_s64(vcgtq_f64(v7, v8).i64[0], 0), (int8x16_t)v21, v10);
            if (v8.f64[0] < v7.f64[0])
            {
              v9 = v13 - 1;
              v7.f64[0] = v8.f64[0];
            }
          }
          ++v13;
          v12 += 16;
        }
        while (v6 != v13);
        v36 = (v7.f64[0] >= INFINITY) & v11;
        v11 = 0;
        if ((v36 & 1) == 0)
        {
          *((int8x16_t *)a2 + v9) = v10;
          if (v9 != v4)
          {
            if (v9 + 2 < a3)
            {
              v37 = v55 - v9;
              v38 = &v54[16 * v9];
              do
              {
                *((_OWORD *)v38 - 1) = *(_OWORD *)v38;
                v38 += 16;
                --v37;
              }
              while (v37);
            }
            *((_OWORD *)a2 + v4) = v57;
          }
          goto LABEL_6;
        }
      }
    }
    break;
  }
  result = v56;
  if (v56)
  {
    v40 = 0;
    v41 = (int32x2_t *)((char *)a2 + 24);
    for (i = v53; ; --i)
    {
      v43 = v40 + 1;
      if (v40 + 1 < v56)
        break;
LABEL_53:
      v41 += 2;
      v40 = v43;
      if (v43 == v56)
        return result;
    }
    v44 = (int32x2_t *)((char *)a2 + 16 * v40);
    v45 = v44[1];
    v46 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, v45);
    v47 = vpmax_u32(v46, v46).u32[0];
    v48 = i;
    v49 = v41;
    while (1)
    {
      if ((v47 & 0x80000000) == 0)
      {
        v50 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, *v49);
        if ((vpmax_u32(v50, v50).u32[0] & 0x80000000) == 0)
        {
          v51 = (uint32x2_t)vcgt_s32((int32x2_t)0x100000001, vsub_s32(vmin_s32(vadd_s32(*v44, v45), vadd_s32(v49[-1], *v49)), vmax_s32(*v44, v49[-1])));
          if ((vpmax_u32(v51, v51).u32[0] & 0x80000000) == 0)
            break;
        }
      }
      v49 += 2;
      if (!--v48)
        goto LABEL_53;
    }
    this = v52;
LABEL_56:
    CA::Shape::get_bounds((uint64_t)this, (int *)a2);
    return 1;
  }
  return result;
}

uint64_t CA::WindowServer::AppleDisplay::subpixel_layout(CA::WindowServer::AppleDisplay *this)
{
  return *((unsigned int *)this + 7104);
}

void CA::WindowServer::FlipBook::swap_completed(os_unfair_lock_s *this, unsigned int a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  NSObject *v6;
  IOSurfaceID ID;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint8_t buf[4];
  unsigned int v15;
  __int16 v16;
  IOSurfaceID v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = this + 2;
  os_unfair_lock_lock(this + 2);
  v5 = *(_QWORD *)&this[32]._os_unfair_lock_opaque;
  if (*(_QWORD *)&this[34]._os_unfair_lock_opaque != v5)
  {
    while (*(_DWORD *)(v5 + 48) < a2)
    {
      if (x_log_hook_p())
      {
        IOSurfaceGetID(*(IOSurfaceRef *)v5);
        x_log_();
      }
      else
      {
        v6 = x_log_category_flipbook;
        if (os_log_type_enabled((os_log_t)x_log_category_flipbook, OS_LOG_TYPE_DEFAULT))
        {
          ID = IOSurfaceGetID(*(IOSurfaceRef *)v5);
          v8 = *(_DWORD *)(v5 + 48);
          *(_DWORD *)buf = 67109632;
          v15 = a2;
          v16 = 1024;
          v17 = ID;
          v18 = 1024;
          v19 = v8;
          _os_log_impl(&dword_184457000, v6, OS_LOG_TYPE_DEFAULT, "swap %u completed, recycling surface 0x%x from swap %u", buf, 0x14u);
        }
      }
      CA::WindowServer::FlipBook::reuse_frame(this, (_QWORD *)v5);
      v9 = *(_QWORD *)&this[34]._os_unfair_lock_opaque;
      v10 = v5;
      if (v5 + 104 == v9)
      {
        *(_QWORD *)&this[34]._os_unfair_lock_opaque = v5;
        break;
      }
      do
      {
        v11 = v10 + 104;
        v12 = *(_OWORD *)(v10 + 120);
        *(_OWORD *)v10 = *(_OWORD *)(v10 + 104);
        *(_OWORD *)(v10 + 16) = v12;
        *(_OWORD *)(v10 + 32) = *(_OWORD *)(v10 + 136);
        *(_DWORD *)(v10 + 48) = *(_DWORD *)(v10 + 152);
        *(_OWORD *)(v10 + 52) = *(_OWORD *)(v10 + 156);
        *(_QWORD *)(v10 + 88) = *(_QWORD *)(v10 + 192);
        *(_BYTE *)(v10 + 96) = *(_BYTE *)(v10 + 200);
        v13 = v10 + 208;
        *(_OWORD *)(v10 + 68) = *(_OWORD *)(v10 + 172);
        v10 += 104;
      }
      while (v13 != v9);
      *(_QWORD *)&this[34]._os_unfair_lock_opaque = v11;
      if (v11 == v5)
        break;
    }
  }
  CA::WindowServer::FlipBook::collect((CA::WindowServer::FlipBook *)this);
  os_unfair_lock_unlock(v4);
}

void CA::WindowServer::FlipBook::collect(CA::WindowServer::FlipBook *this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = *((_QWORD *)this + 14);
  v2 = 0x4EC4EC4EC4EC4EC5 * ((v1 - *((_QWORD *)this + 13)) >> 3)
     + 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((_QWORD *)this + 17) - *((_QWORD *)this + 16)) >> 3)
     + 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((_QWORD *)this + 11) - *((_QWORD *)this + 10)) >> 3);
  v3 = *((_QWORD *)this + 8);
  v4 = v2 - v3;
  if (v2 > v3)
  {
    do
    {
      if (*((_QWORD *)this + 13) == v1)
        break;
      CA::WindowServer::FlipBook::free_surface(this, (_QWORD *)(v1 - 104));
      v1 = *((_QWORD *)this + 14) - 104;
      *((_QWORD *)this + 14) = v1;
      --v4;
    }
    while (v4);
  }
}

uint64_t CA::WindowServer::Server::display_changed(CA::WindowServer::Server *this, os_unfair_lock_s *a2, const CA::Shape **a3, void *a4)
{
  uint64_t result;
  uint64_t v6;
  int64x2_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (*(const CA::Shape ***)&a2[24]._os_unfair_lock_opaque == a3)
  {
    CA::WindowServer::Server::invalidate(a2, a3[27]);
    v6 = 0;
    v7 = vdupq_n_s64(0x800000uLL);
    return (*(uint64_t (**)(os_unfair_lock_s *, uint64_t *, double))(*(_QWORD *)&a2->_os_unfair_lock_opaque
                                                                            + 184))(a2, &v6, 0.0);
  }
  return result;
}

void CA::WindowServer::Server::invalidate(os_unfair_lock_s *this, const CA::Shape *a2)
{
  os_unfair_lock_s *v4;
  const CA::Bounds *v5;
  const CA::Shape *v6;
  CA::Shape **v7;
  uint64_t v8;

  if (a2)
  {
    if ((a2 & 1) != 0)
    {
      if (a2 == (const CA::Shape *)1)
        return;
    }
    else if (*((_DWORD *)a2 + 1) == 6)
    {
      return;
    }
    v4 = this + 4;
    os_unfair_lock_lock(this + 4);
    v8 = *(_QWORD *)&this[44]._os_unfair_lock_opaque;
    v7 = (CA::Shape **)&this[44];
    if (v8)
      CA::shape_union(v7, (CA::Shape **)a2, v6);
    else
      *v7 = (CA::Shape *)CA::Shape::ref((unint64_t)a2, v5);
    os_unfair_lock_unlock(v4);
  }
}

uint64_t CA::WindowServer::Server::set_color_matrix(CA::WindowServer::Server *this, const float *a2, float a3, double a4)
{
  pthread_mutex_t *v8;
  NSObject *v10;
  _BYTE buf[24];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v8 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  (*(void (**)(_QWORD, const float *, float, double))(**((_QWORD **)this + 12) + 1408))(*((_QWORD *)this + 12), a2, a3, a4);
  if (byte_1ECDC6B04)
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v10 = x_log_category_CADebug;
      if (os_log_type_enabled((os_log_t)x_log_category_CADebug, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = "set_color_matrix";
        _os_log_impl(&dword_184457000, v10, OS_LOG_TYPE_INFO, "kUpdateReasonDisplayBrightness %s", buf, 0xCu);
      }
    }
  }
  *(_QWORD *)buf = 0;
  *(int64x2_t *)&buf[8] = vdupq_n_s64(8uLL);
  (*(void (**)(CA::WindowServer::Server *, _BYTE *, double))(*(_QWORD *)this + 184))(this, buf, 0.0);
  return pthread_mutex_unlock(v8);
}

uint64_t CA::WindowServer::Server::context_changed(uint64_t this, CA::Render::Object *a2, double *a3, void *a4)
{
  double v6;
  double v7;
  __n128 v8;
  float *v9;
  __n128 v10;
  _BOOL8 v11;
  double v12;
  __n128 v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(this + 416))
  {
    if (!a3 || *(_BYTE *)a3 || (v6 = a3[1], v6 <= 0.0))
    {
      v14 = 0;
      v10 = (__n128)vdupq_n_s64(4uLL);
      v15 = v10;
      v10.n128_u64[0] = 0;
      this = (*(uint64_t (**)(CA::Render::Object *, uint64_t *, __n128))(*(_QWORD *)a2 + 184))(a2, &v14, v10);
    }
    else
    {
      if (*((_BYTE *)a3 + 16))
      {
        v7 = (*(double (**)(_QWORD))(**((_QWORD **)a2 + 12) + 760))(*((_QWORD *)a2 + 12));
        v6 = a3[1]
           + ((double)(*(unsigned int (**)(_QWORD))(**((_QWORD **)a2 + 12) + 768))(*((_QWORD *)a2 + 12))
            + -0.25)
           * v7;
        a3[1] = v6;
      }
      v12 = v6;
      v8 = (__n128)vdupq_n_s64(4uLL);
      v13 = v8;
      v8.n128_u64[0] = 0;
      this = (*(uint64_t (**)(CA::Render::Object *, double *, __n128))(*(_QWORD *)a2 + 184))(a2, &v12, v8);
    }
    if (!BYTE6(xmmword_1ECDC6A70))
    {
      this = CA::WindowServer::Display::benchmark_mode(0, v9);
      if (a3)
      {
        if ((this & 1) == 0 && *(_BYTE *)a3)
        {
          if (BYTE7(xmmword_1ECDC6A70))
            v11 = 0;
          else
            v11 = *((_BYTE *)a3 + 1) != 0;
          return (*(uint64_t (**)(CA::Render::Object *, _BOOL8))(*(_QWORD *)a2 + 416))(a2, v11);
        }
      }
    }
  }
  return this;
}

_QWORD *CA::OGL::MetalContext::test_fence(CA::OGL::MetalContext *this, unint64_t a2)
{
  _QWORD *result;
  unint64_t v4;

  result = std::__hash_table<std::__hash_value_type<unsigned long,unsigned long long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long long>>>::find<unsigned long>((_QWORD *)this + 337, a2);
  if (result)
  {
    v4 = atomic_load((unint64_t *)this + 498);
    return (_QWORD *)(v4 >= result[3]);
  }
  return result;
}

_DWORD *CA::WindowServer::IOMFBDisplay::allocate_buffer(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  _DWORD *v4;
  _QWORD *v7;
  uint64_t v10;
  uint64_t v11;
  CA::Shape *v12;
  uint64_t v13;
  malloc_zone_t *malloc_zone;

  v4 = *(_DWORD **)(a2 + 8);
  if (!v4)
  {
    v7 = *(_QWORD **)(a1 + 26000);
    if (!v7)
      goto LABEL_17;
    v4 = 0;
    v10 = 0x7FFFFFFFFFFFFFFFLL;
    do
    {
      v11 = v7[4];
      if ((!v11
         || (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 216))(v11) == a4
         && (!a3 || (*(_DWORD *)(v7[4] + 224) & 0x8000000) == 0))
        && !*((_DWORD *)v7 + 2))
      {
        v12 = (CA::Shape *)v7[2];
        if (v12)
        {
          v13 = CA::Shape::area(v12);
          if (v13 < v10)
          {
            v4 = v7;
            v10 = v13;
          }
        }
        else
        {
          v10 = 0;
          v4 = v7;
        }
      }
      v7 = (_QWORD *)*v7;
    }
    while (v7);
    if (v4)
    {
      ++v4[2];
    }
    else
    {
LABEL_17:
      malloc_zone = (malloc_zone_t *)get_malloc_zone();
      v4 = malloc_type_zone_calloc(malloc_zone, 1uLL, 0x88uLL, 0x743898A5uLL);
      *(_QWORD *)v4 = *(_QWORD *)(a1 + 26000);
      *(_QWORD *)(a1 + 26000) = v4;
      *((_OWORD *)v4 + 4) = xmmword_18474DFB0;
      *((_OWORD *)v4 + 5) = xmmword_18474DFC0;
      *((_OWORD *)v4 + 6) = xmmword_18474DFD0;
      *((_OWORD *)v4 + 7) = xmmword_18474DFE0;
      v4[2] = 1;
    }
    *(_QWORD *)(a2 + 8) = v4;
  }
  return v4;
}

uint64_t CA::WindowServer::IOMFBDisplay::begin_update(CA::WindowServer::IOMFBDisplay *this, CA::Render::Update *a2)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  CA::Shape *v9;
  char v10;
  BOOL v11;
  uint64_t v12;
  float v13;
  const float *v14;
  float v15;
  int v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  int v25;
  int v26;
  int v27;
  BOOL v28;
  char v29;
  uint64_t v30;
  char v31;
  double v32;
  int v33;
  int v34;
  BOOL v35;
  int v36;
  char v37;
  float *v38;
  float32x4_t *v39;
  const float *v40;
  uint64_t v41;
  __int128 *v42;
  char *v43;
  uint64_t i;
  uint64_t v45;
  BOOL v46;
  double v47;
  float v48;
  uint64_t v49;
  int v50;
  const __CFNumber *v51;
  const __CFNumber *v52;
  float v53;
  float v54;
  float v56;
  int v57;
  float v58;
  uint64_t v59;
  _BOOL4 v60;
  int v61;
  float v62;
  int v63;
  float v64;
  float v65;
  float v66;
  float v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  int v74;
  const CA::Bounds *v75;
  char v76;
  float64x2_t v77;
  int64x2_t v78;
  int8x16_t v79;
  float64x2_t v80;
  int32x4_t v81;
  CA::Shape **j;
  int v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char updated;
  const CA::Shape *v88;
  int v89;
  _BYTE *v90;
  uint64_t v91;
  char v92;
  char v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  float v98;
  float v99;
  uint64_t v100;
  uint64_t v101;
  BOOL v102;
  BOOL v103;
  CA::Shape **k;
  _DWORD *buffer;
  const CA::Shape *v106;
  _DWORD *v107;
  CA::Shape **v108;
  uint64_t v109;
  uint64_t v110;
  _BOOL4 v111;
  int v112;
  float v113;
  double v114;
  float v115;
  CA::Render::LayerNode ***v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  float v120;
  float v121;
  uint64_t v122;
  int v123;
  int v125;
  char v126;
  char v127;
  BOOL v128;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  const CA::Bounds *v133;
  const CA::Shape *v134;
  char v135;
  CA::Shape *v136;
  float v137;
  float v138;
  int v139;
  pthread_mutex_t *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  _BOOL4 v144;
  int v145;
  unint64_t v146;
  unsigned int *v147;
  unsigned int v148;
  int v149;
  uint64_t *v150;
  unsigned int v151;
  int v152;
  _BYTE *v153;
  int v154;
  uint64_t *v155;
  _OWORD valuePtr[4];
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  int __s2;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;

  v167 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 216))(this);
  if (!(_DWORD)result)
    return result;
  if (!*((_QWORD *)this + 80))
    return result;
  v5 = (_QWORD *)((char *)this + 26532);
  if (*((_BYTE *)this + 28076))
    return result;
  if (*((_BYTE *)this + 28075))
  {
    *((_BYTE *)this + 28063) = 1;
    v6 = *((unsigned int *)a2 + 266);
    v7 = v6 & 0xFFFFFFFFFFEFFFFFLL | ((unint64_t)*((unsigned __int16 *)a2 + 534) << 32);
    *((_DWORD *)a2 + 266) = v6 & 0xFFEFFFFF;
    *((_WORD *)a2 + 534) = WORD2(v7);
  }
  CA::WindowServer::IOMFBDisplay::mark_buffers_non_static((uint64_t)this, *((_QWORD *)a2 + 36));
  if ((*((_DWORD *)a2 + 266) & 0x800000) == 0)
  {
    v8 = 0;
    v9 = 0;
LABEL_13:
    v10 = 0;
    goto LABEL_19;
  }
  v9 = (CA::Shape *)*((_QWORD *)a2 + 4);
  if (!v9)
  {
    v8 = 0;
    goto LABEL_13;
  }
  if ((v9 & 1) != 0)
  {
    if (v9 != (CA::Shape *)1)
    {
LABEL_17:
      v10 = 0;
      goto LABEL_18;
    }
  }
  else if (*((_DWORD *)v9 + 1) != 6)
  {
    goto LABEL_17;
  }
  if ((*((_BYTE *)a2 + 268) & 4) != 0)
    goto LABEL_17;
  v10 = options_are_visual ^ 1;
LABEL_18:
  v8 = 1;
LABEL_19:
  CA::WindowServer::IOMFBDisplay::update_color_matrix(this, *((double *)a2 + 9));
  v154 = *((unsigned __int8 *)this + 28088);
  v164 = 0x3F80000000000000;
  v163 = 0;
  v165 = 0;
  v166 = 0x3F80000000000000;
  __s2 = 1065353216;
  *((_BYTE *)this + 28088) = memcmp((char *)this + 26768, &__s2, 0x24uLL) != 0;
  if ((*((_BYTE *)this + 745) & 4) != 0)
  {
    v12 = *((_QWORD *)a2 + 4);
    if ((v12 & 1) != 0)
    {
      if (v12 == 1)
        goto LABEL_20;
    }
    else if (*(_DWORD *)(v12 + 4) == 6)
    {
      goto LABEL_20;
    }
    if (CADeviceNeedsSurfaceAlphaUnpremultiply::once != -1)
      dispatch_once(&CADeviceNeedsSurfaceAlphaUnpremultiply::once, &__block_literal_global_59);
    v11 = CADeviceNeedsSurfaceAlphaUnpremultiply::needs != 0;
    goto LABEL_28;
  }
LABEL_20:
  v11 = 0;
LABEL_28:
  *((_BYTE *)this + 28111) = v11;
  v13 = (*(float (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 920))(this);
  v15 = CA::WindowServer::Display::edr_headroom(this) * v13;
  if (initialized[0] != -1)
    dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
  v153 = (char *)this + 745;
  v16 = v10 & 1;
  v17 = truncf(*(float *)&dword_1ECDC69A8);
  v18 = truncf(*(float *)&dword_1ECDC699C);
  v19 = truncf(*(float *)&dword_1ECDC69A4);
  if (!*(float *)&dword_1ECDC699C)
    v18 = 30.0;
  if (*(float *)&dword_1ECDC69A4)
    v20 = v19;
  else
    v20 = 80.0;
  v21 = *((float *)this + 6631);
  if (v15 <= v21)
    v22 = v17;
  else
    v22 = -v17;
  v23 = v22 + v18;
  *((float *)this + 6631) = v23;
  if (v21 != v23)
  {
    *(_QWORD *)&v157 = vcvts_n_u32_f32(v23, 0x10uLL);
    IOMobileFramebufferSetParameter();
  }
  if (v15 <= *((float *)this + 6630))
    v24 = v17;
  else
    v24 = -v17;
  *((float *)this + 6630) = v24 + v20;
  *((_BYTE *)this + 28091) = 0;
  v25 = *((unsigned __int8 *)this + 28089);
  v26 = *((unsigned __int8 *)this + 28090);
  if (*((_BYTE *)this + 28052))
  {
    v27 = 0;
    v28 = 0;
    *((_BYTE *)this + 28089) = 0;
    goto LABEL_62;
  }
  v27 = 0;
  if ((*((_WORD *)this + 328) & 0x1C00) == 0x1000)
    goto LABEL_58;
  v29 = 0;
  if (byte_1ECDC6A86)
    goto LABEL_59;
  v27 = 0;
  if (v15 >= *((float *)this + 6631))
  {
LABEL_58:
    v29 = 0;
    goto LABEL_59;
  }
  v29 = 0;
  if ((v16 & 1) == 0)
  {
    if (((*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 848))(this) & 1) != 0
      || *((_QWORD *)this + 5)
      || !CA::WindowServer::Display::Mode::operator==(*((_QWORD *)this + 80), *((_QWORD *)this + 81)))
    {
      goto LABEL_57;
    }
    v30 = *((_QWORD *)this + 3251);
    v31 = v8 ^ 1;
    if (!v30)
      v31 = 1;
    if ((v31 & 1) != 0
      || (v32 = (double)(*((_DWORD *)this + 53) * *((_DWORD *)this + 52)),
          *(double *)(v30 + 120) * *(double *)(v30 + 112) <= v32 * 0.9)
      || v32 * 0.3 <= (double)CA::Shape::area(v9))
    {
      if (CADeviceNeedsDisplayWorkarounds::once[0] != -1)
        dispatch_once(CADeviceNeedsDisplayWorkarounds::once, &__block_literal_global_52_9800);
      v29 = CADeviceNeedsDisplayWorkarounds::needs_workarounds;
      if (CADeviceNeedsDisplayWorkarounds::needs_workarounds)
        v29 = (*(float (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1048))(this) != 0.0;
      v27 = 1;
    }
    else
    {
LABEL_57:
      v27 = 0;
      v29 = 0;
    }
  }
LABEL_59:
  v33 = *((unsigned __int8 *)this + 28052);
  *((_BYTE *)this + 28089) = v29;
  if (v33 || (*((_WORD *)this + 328) & 0x1C00) == 0x1000)
    goto LABEL_61;
  if (CADeviceNeedsDisplayWorkarounds::once[0] != -1)
  {
    v149 = v27;
    dispatch_once(CADeviceNeedsDisplayWorkarounds::once, &__block_literal_global_52_9800);
    v27 = v149;
  }
  v28 = 0;
  if (CADeviceNeedsDisplayWorkarounds::needs_workarounds && !byte_1ECDC6A87)
  {
    if (v15 <= *((float *)this + 6630))
    {
LABEL_61:
      v28 = 0;
      goto LABEL_62;
    }
    v28 = *((_BYTE *)this + 28089) == 0;
  }
LABEL_62:
  *((_BYTE *)this + 28090) = v28;
  v152 = v27;
  if (BYTE9(xmmword_1ECDC6A90))
  {
    if (CADeviceNeedsDisplayWorkarounds::once[0] != -1)
      dispatch_once(CADeviceNeedsDisplayWorkarounds::once, &__block_literal_global_52_9800);
    LOBYTE(v27) = v152;
    if (CADeviceNeedsDisplayWorkarounds::needs_workarounds)
    {
      v145 = 0;
      valuePtr[0] = 0uLL;
      v146 = *((_QWORD *)a2 + 3);
      *(_QWORD *)&v158 = 0;
      v157 = v146;
      while (CA::ShapeIterator::iterate((uint64_t *)&v157, (int *)valuePtr))
      {
        CA::BoundsImpl::intersect((int32x2_t *)valuePtr, *(int32x2_t *)((char *)a2 + 192), *(int32x2_t *)((char *)a2 + 200));
        v145 += HIDWORD(valuePtr[0]) * DWORD2(valuePtr[0]);
      }
      (*(void (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 848))(this);
      kdebug_trace();
      (*(void (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 920))(this);
      CA::WindowServer::Display::edr_headroom(this);
      kdebug_trace();
      (*(void (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1048))(this);
      (*(void (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 984))(this);
      (*(void (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 920))(this);
      CA::WindowServer::Display::edr_headroom(this);
      (*(void (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1520))(this);
      kdebug_trace();
      LOBYTE(v27) = v152;
    }
  }
  v34 = *((unsigned __int8 *)this + 28089);
  v35 = v26 == *((unsigned __int8 *)this + 28090) && v25 == v34;
  v36 = !v35;
  v161 = 0;
  v159 = 0u;
  v160 = 0u;
  v157 = 0u;
  v158 = 0u;
  if (v34)
  {
    if (!IOMobileFramebufferGetMatrix())
    {
      v41 = 0;
      v42 = &v157;
      v43 = (char *)this + 26532;
      do
      {
        for (i = 0; i != 3; ++i)
        {
          v45 = *((_QWORD *)v42 + i);
          v46 = v45 < 0;
          if (v45 < 0)
            v45 = -v45;
          v47 = -((double)v45 * 2.32830644e-10);
          if (!v46)
            v47 = (double)v45 * 2.32830644e-10;
          v48 = v47;
          *(float *)&v43[4 * i] = v48;
        }
        ++v41;
        v43 += 16;
        v42 = (__int128 *)((char *)v42 + 24);
      }
      while (v41 != 3);
      CA::Mat4Impl::mat4_concat((float32x4_t *)((char *)this + 26532), (float *)this + 6633, flt_18475F25C, v14);
      v39 = (float32x4_t *)((char *)this + 26532);
      v38 = flt_18475F25C;
      v40 = (const float *)((char *)this + 26532);
      goto LABEL_86;
    }
    v34 = *((unsigned __int8 *)this + 28089);
    LOBYTE(v27) = v152;
  }
  v35 = v34 == 0;
  v37 = v27 ^ 1;
  if (!v35)
    v37 = 1;
  if ((v37 & 1) == 0)
  {
    *v5 = *((_QWORD *)this + 3346);
    *((_DWORD *)this + 6635) = *((_DWORD *)this + 6694);
    *(_QWORD *)((char *)this + 26548) = *(_QWORD *)((char *)this + 26780);
    *((_DWORD *)this + 6639) = *((_DWORD *)this + 6697);
    *(_QWORD *)((char *)this + 26564) = *((_QWORD *)this + 3349);
    v38 = (float *)((char *)this + 26864);
    *((_DWORD *)this + 6643) = *((_DWORD *)this + 6700);
    v39 = (float32x4_t *)((char *)this + 26532);
    v40 = (const float *)((char *)this + 26532);
LABEL_86:
    CA::Mat4Impl::mat4_concat(v39, v38, v40, v14);
    goto LABEL_87;
  }
  *(_OWORD *)v5 = xmmword_18474DFB0;
  *(_OWORD *)((char *)this + 26548) = xmmword_18474DFC0;
  *(_OWORD *)((char *)this + 26564) = xmmword_18474DFD0;
  *(_OWORD *)((char *)this + 26580) = xmmword_18474DFE0;
LABEL_87:
  *((_BYTE *)this + 28108) = 0;
  if (initialized[0] != -1)
    dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
  v49 = *((_QWORD *)&xmmword_1ECDC69B8 + 1);
  if (*((_BYTE *)this + 28052))
    goto LABEL_90;
  v50 = 0;
  if ((*((_WORD *)this + 328) & 0x1C00) == 0x1000 || byte_1ECDC6AAE)
    goto LABEL_91;
  if (CADeviceNeedsLumaBoost::once[0] != -1)
    dispatch_once(CADeviceNeedsLumaBoost::once, &__block_literal_global_54);
  if (!CADeviceNeedsLumaBoost::needs_luma_bost
    || (float)(v15 / *((float *)a2 + 93)) >= *((float *)&v49 + 1)
    || ((*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 848))(this) & 1) != 0
    || *((_QWORD *)this + 5))
  {
LABEL_90:
    v50 = 0;
  }
  else
  {
    v50 = CA::WindowServer::Display::Mode::operator==(*((_QWORD *)this + 80), *((_QWORD *)this + 81));
  }
LABEL_91:
  *((_DWORD *)this + 6632) = 1065353216;
  if (*((_BYTE *)this + 28089) || v50)
  {
    v51 = (const __CFNumber *)IOMobileFramebufferCopyProperty();
    if (v51)
    {
      v52 = v51;
      LODWORD(valuePtr[0]) = 0;
      CFNumberGetValue(v51, kCFNumberIntType, valuePtr);
      CFRelease(v52);
      *((float *)this + 6632) = (float)SLODWORD(valuePtr[0]) * 0.000015259;
    }
  }
  if (v50)
  {
    v53 = (float)(*((float *)this + 6632) * v15) / *((float *)a2 + 93);
    v54 = 1.0;
    if (v53 >= *(float *)&v49)
    {
      v54 = 0.0;
      if (v53 <= *((float *)&v49 + 1) && *(float *)&v49 != *((float *)&v49 + 1))
      {
        v56 = (float)((float)((float)((float)((float)((float)((float)(v53 * 0.000008375) + -0.00027092) * v53)
                                            + 0.0038907)
                                    * v53)
                            + -0.094163)
                    * v53)
            + 1.156;
        if (v56 > 1.0)
          v56 = 1.0;
        if (v56 >= 0.0)
          v54 = v56;
        else
          v54 = 0.0;
      }
    }
    v57 = *((unsigned __int8 *)this + 28109);
    v58 = *((float *)this + 6650);
    v59 = *((_QWORD *)this + 3251);
    *((_BYTE *)this + 28109) = v59 != 0;
    if (v59)
    {
      *((_DWORD *)this + 6651) = 0;
    }
    else
    {
      if (v57 || !*((_BYTE *)this + 28110))
        v61 = 2;
      else
        v61 = 1;
      *((_DWORD *)this + 6652) = v61;
    }
    v62 = (*(double (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 744))(this) * 0.666666667;
    v63 = *((_DWORD *)this + 6652);
    if (v63 == 1)
    {
      v64 = *((float *)this + 6651) - v62;
    }
    else if (v63 == 2)
    {
      v64 = *((float *)this + 6651) + v62;
    }
    else
    {
      v64 = *((float *)this + 6651);
    }
    if (v64 > 1.0)
      v64 = 1.0;
    if (v64 < 0.0)
      v64 = 0.0;
    *((float *)this + 6650) = v64 * v54;
    *((float *)this + 6651) = v64;
    *((_BYTE *)this + 28110) = 0;
    if (CADeviceSupportsAndromeda::once != -1)
      dispatch_once(&CADeviceSupportsAndromeda::once, &__block_literal_global_61_9817);
    if (CADeviceSupportsAndromeda::supports_andromeda)
    {
      v65 = (*(float (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1272))(this);
      v66 = *((float *)this + 6650);
      if ((LODWORD(v65) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      {
        v67 = 1.0 - v65;
        if (v67 > 1.0)
          v67 = 1.0;
        if (v67 < 0.0)
          v67 = 0.0;
        v66 = v66 * v67;
        *((float *)this + 6650) = v66;
      }
    }
    else
    {
      v66 = *((float *)this + 6650);
    }
    *((float *)this + 6649) = (float)(*((float *)a2 + 93) * *((float *)&v49 + 1)) / *((float *)this + 6632);
    v60 = v66 == 0.0;
    if (v66 == 0.0 || (v113 = *((float *)this + 6651), v113 == 0.0) || v113 == 1.0)
      *((_DWORD *)this + 6652) = 0;
    if (v58 != 0.0 || v66 == 0.0)
    {
      if (v58 == 0.0)
        v60 = 0;
    }
    else
    {
      v60 = 1;
    }
  }
  else
  {
    v60 = 0;
    *((_BYTE *)this + 28110) = 0;
    *(_QWORD *)((char *)this + 26596) = 0;
    *((_DWORD *)this + 6652) = 0;
  }
  if (*((_BYTE *)this + 28089) || *((_BYTE *)this + 28090))
    *((_BYTE *)this + 28088) = 0;
  if (*((_BYTE *)this + 28114))
  {
    v68 = *((unsigned __int8 *)this + 28061);
    if (*((unsigned __int8 *)this + 28062) == v68)
    {
      v69 = *((unsigned __int8 *)this + 28053);
      if (*((unsigned __int8 *)this + 28059) == v69)
        goto LABEL_164;
    }
    else
    {
      LOBYTE(v69) = *((_BYTE *)this + 28053);
    }
    *((_BYTE *)this + 28062) = v68;
    *((_BYTE *)this + 28059) = v69;
    *((_BYTE *)this + 28115) = 1;
  }
LABEL_164:
  v70 = 0;
  v71 = *((_DWORD *)a2 + 67);
  v72 = *((unsigned __int8 *)this + 28092);
  *((_BYTE *)this + 28092) = v16;
  v73 = *((_QWORD *)this + 3251);
  if (v73 && (v71 & 0x200000) == 0)
  {
    if ((v71 & 4) != 0)
      goto LABEL_172;
    if ((v71 & 2) == 0)
      v60 = 1;
    if (((v36 | v60) & 1) != 0
      || v72 != v16
      || *((_BYTE *)this + 28075)
      || (*((_DWORD *)this + 156) & 4) != 0
      && CA::WindowServer::Display::clones_support_detaching(*((CA::WindowServer::Display **)this + 5))
      && (v73 = *((_QWORD *)this + 3251), (v116 = *(CA::Render::LayerNode ****)(*(_QWORD *)v73 + 40)) != 0)
      && (CA::Render::LayerNode::clear_above_and_black_below(v116, 1, v114, v115) & 1) == 0)
    {
LABEL_172:
      if (v72 == v16)
        v74 = v36;
      else
        v74 = 1;
      CA::WindowServer::IOMFBDisplay::release_detached_handle(v73);
      if (v74)
        v76 = 3;
      else
        v76 = 1;
      *(_BYTE *)(v73 + 292) = v76 | *(_BYTE *)(v73 + 292) & 0xFC;
      *((_BYTE *)this + 28051) = 1;
      *((_BYTE *)this + 26384) = *((_BYTE *)this + 26386);
      v77 = *(float64x2_t *)(v73 + 112);
      v78 = vceqzq_f64(v77);
      if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v78, 1), (int8x16_t)v78).u64[0] & 0x8000000000000000) != 0
        || (v79 = vorrq_s8((int8x16_t)vcltzq_f64(v77), (int8x16_t)vcgezq_f64(v77)),
            (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v79), 1), v79).u64[0] & 0x8000000000000000) != 0))
      {
        valuePtr[0] = 0uLL;
      }
      else
      {
        v80 = *(float64x2_t *)(v73 + 96);
        v81 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v80, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
        valuePtr[0] = vuzp1q_s32(v81, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(vminnmq_f64(vaddq_f64(v80, v77), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL))), (int64x2_t)v81));
      }
      for (j = (CA::Shape **)*((_QWORD *)this + 3250); j; j = (CA::Shape **)*j)
      {
        if (j[2])
          CA::shape_union(j + 2, (CA::Shape **)valuePtr, v75);
      }
      v83 = *((_DWORD *)a2 + 67);
      if ((v83 & 0x8000) != 0)
        *((_DWORD *)a2 + 67) = v83 | 0x10000;
      v70 = 1;
    }
    else
    {
      v70 = 0;
    }
  }
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 25688));
  v151 = *((_DWORD *)this + 6418);
  v84 = (char *)this + 48 * v151 + 25752;
  v35 = v154 == *((unsigned __int8 *)this + 28088);
  v155 = (uint64_t *)((char *)this + 216);
  v150 = (uint64_t *)((char *)a2 + 16);
  if (v35)
    v85 = (char *)a2 + 16;
  else
    v85 = (char *)this + 216;
  v86 = *(_QWORD *)v85;
  updated = CA::WindowServer::IOMFBDisplay::update_display_edr_factor(this);
  v89 = *((_DWORD *)a2 + 67);
  v90 = (char *)this + 48 * v151 + 25792;
  *v90 &= ~0x10u;
  if ((v71 & 0x200000) != 0)
  {
    if (v70)
      __assert_rtn("begin_update", "windowserver-iomfb-display.cpp", 3231, "!invalidated_detached");
    v91 = *((_QWORD *)this + 6 * *((unsigned int *)this + 6419) + 3220);
    if (v91)
    {
      ++*(_DWORD *)(v91 + 8);
      *((_QWORD *)this + 6 * v151 + 3220) = v91;
      *v90 |= 0x10u;
      kdebug_trace();
    }
    goto LABEL_242;
  }
  v92 = updated;
  if ((v86 & 1) != 0)
  {
    if (v86 != 1)
      goto LABEL_237;
  }
  else if (*(_DWORD *)(v86 + 4) != 6)
  {
    goto LABEL_237;
  }
  if (((*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1536))(this) & 1) != 0
    || (*((_DWORD *)this + 156) & 4) != 0
    || (*((_BYTE *)this + 28078) ? (v93 = 1) : (v93 = v92), (v93 & 1) != 0 || (*((_BYTE *)a2 + 271) & 1) != 0))
  {
LABEL_237:
    if ((v89 & 0x100000) == 0)
    {
      for (k = (CA::Shape **)*((_QWORD *)this + 3250); k; k = (CA::Shape **)*k)
      {
        if (k[2])
          CA::shape_union(k + 2, (CA::Shape **)v86, v88);
      }
    }
    goto LABEL_242;
  }
  if (*((_DWORD *)this + 6420) < 2u)
    v94 = 1;
  else
    v94 = v70;
  if ((v94 & 1) == 0)
  {
    v95 = *((_QWORD *)this + 6 * *((unsigned int *)this + 6419) + 3220);
    if (v95)
    {
      if ((*(_BYTE *)(v95 + 132) & 0x50) == 0 && !*(_QWORD *)(v95 + 24))
      {
        if (CADeviceNeedsDisplayWorkarounds::once[0] != -1)
          dispatch_once(CADeviceNeedsDisplayWorkarounds::once, &__block_literal_global_52_9800);
        if (CADeviceNeedsDisplayWorkarounds::needs_workarounds)
        {
          (*(void (**)(_OWORD *__return_ptr, CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1488))(valuePtr, this);
          if (*(float *)(v95 + 64) != *(float *)valuePtr)
            goto LABEL_242;
          v96 = 0;
          while (v96 != 15)
          {
            v97 = v96 + 1;
            v98 = *(float *)(v95 + 68 + 4 * v96);
            v99 = *((float *)valuePtr + ++v96);
            if (v98 != v99)
            {
              if ((unint64_t)(v97 - 1) <= 0xE)
                goto LABEL_242;
              break;
            }
          }
        }
        v100 = *(_QWORD *)(v95 + 32);
        if (v100)
        {
          v101 = *(unsigned int *)(v100 + 224);
          v102 = (v101 & 0x8000000) == 0 || (*v153 & 0x80) == 0;
          v103 = v102 && ((v101 | ((unint64_t)*(unsigned __int8 *)(v100 + 228) << 32)) & 0x200000000) == 0;
          if (v103
            && *(_QWORD *)(v95 + 16)
            && (*(_BYTE *)(v95 + 132) & 8) == 0
            && *(float *)(v95 + 128) == *((float *)this + 6650)
            && (CA::WindowServer::IOMFBDisplay::edr_factor_changed(this, (const CA::Render::LayerNode *)v95, a2) & 1) == 0
            && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v100 + 216))(v100) == *((_QWORD *)a2 + 36))
          {
            ++*(_DWORD *)(v95 + 8);
            *((_QWORD *)this + 6 * v151 + 3220) = v95;
            *v90 |= 0x10u;
          }
        }
      }
    }
  }
LABEL_242:
  buffer = CA::WindowServer::IOMFBDisplay::allocate_buffer((uint64_t)this, (uint64_t)v84, (*(_DWORD *)v153 >> 7) & 1, *((_QWORD *)a2 + 36));
  v107 = buffer;
  if ((v89 & 0x100000) != 0)
  {
    v108 = (CA::Shape **)(buffer + 4);
    if (*((_QWORD *)v107 + 2))
      CA::shape_union(v108, (CA::Shape **)v86, v106);
  }
  v109 = *((_QWORD *)v107 + 2);
  if (v109
    && (v110 = *((_QWORD *)v107 + 4)) != 0
    && ((*(unsigned int *)(v110 + 224) | ((unint64_t)*(unsigned __int8 *)(v110 + 228) << 32)) & 0x200000000) == 0
    && (CA::WindowServer::IOMFBDisplay::edr_factor_changed(this, (const CA::Render::LayerNode *)v107, a2) & 1) == 0
    && (v107[33] & 8) == 0
    && (!CA::WindowServer::IOMFBDisplay::use_assembly_surface(this) || *((_QWORD *)v107 + 5))
    && *((float *)v107 + 32) == *((float *)this + 6650))
  {
    v111 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v107 + 4) + 216))(*((_QWORD *)v107 + 4)) != *((_QWORD *)a2 + 36);
    if ((v71 & 0x200000) != 0)
      goto LABEL_254;
  }
  else
  {
    v111 = 1;
    if ((v71 & 0x200000) != 0)
    {
LABEL_254:
      v112 = 0;
      v109 = 1;
      goto LABEL_301;
    }
  }
  if (v111)
  {
    v112 = 0;
    goto LABEL_275;
  }
  (*(void (**)(_OWORD *__return_ptr, CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1488))(valuePtr, this);
  if (*((float *)v107 + 16) == *(float *)valuePtr)
  {
    v118 = 0;
    while (v118 != 15)
    {
      v119 = v118 + 1;
      v120 = *(float *)&v107[v118 + 17];
      v121 = *((float *)valuePtr + ++v118);
      if (v120 != v121)
      {
        if ((unint64_t)(v119 - 1) <= 0xE)
          goto LABEL_272;
        break;
      }
    }
    v112 = 0;
LABEL_288:
    v122 = *((_QWORD *)v107 + 4);
    if (v122)
    {
      v123 = *(_DWORD *)(v122 + 64);
      if (v123 == 1647534392 || v123 == 643969848)
      {
        v125 = *((_DWORD *)a2 + 67);
        if ((v125 & 0x2000) != 0 || (v125 & 2) != 0 || BYTE8(xmmword_1ECDC6A90))
        {
          if ((*(_DWORD *)(v122 + 224) & 0x40000000) == 0)
            goto LABEL_275;
        }
        else if (((*(unsigned __int8 *)(v122 + 228) >> 1) & 1) != ((*(_DWORD *)(v122 + 224) >> 30) & 1))
        {
          goto LABEL_275;
        }
      }
    }
    v111 = 0;
    goto LABEL_301;
  }
LABEL_272:
  if (CADeviceNeedsDisplayWorkarounds::once[0] != -1)
    dispatch_once(CADeviceNeedsDisplayWorkarounds::once, &__block_literal_global_52_9800);
  v112 = 1;
  if (!CADeviceNeedsDisplayWorkarounds::needs_workarounds)
    goto LABEL_288;
LABEL_275:
  v109 = *v155;
  v117 = *v150;
  if ((*v150 & 1) != 0)
  {
    if (v117 != 1)
      goto LABEL_278;
    goto LABEL_277;
  }
  if (*(_DWORD *)(v117 + 4) == 6)
LABEL_277:
    *((_BYTE *)this + 28113) = 1;
LABEL_278:
  if ((*v90 & 0x10) != 0)
  {
    --v107[2];
    *((_QWORD *)this + 6 * v151 + 3220) = 0;
    v107 = CA::WindowServer::IOMFBDisplay::allocate_buffer((uint64_t)this, (uint64_t)v84, (*(_DWORD *)v153 >> 7) & 1, *((_QWORD *)a2 + 36));
    *v90 &= ~0x10u;
  }
  v111 = 1;
LABEL_301:
  v126 = *((_BYTE *)v107 + 132);
  *((_BYTE *)v107 + 132) = v126 & 0xBF;
  v127 = *((_BYTE *)this + 28089);
  if (v127)
  {
    if ((v86 & 1) != 0)
      v128 = v86 == 1;
    else
      v128 = *(_DWORD *)(v86 + 4) == 6;
    if (v128)
      v127 = 0;
    else
      v127 = 16;
  }
  *((_BYTE *)v107 + 132) = v127 | v126 & 0xAF;
  (*(void (**)(_OWORD *__return_ptr, CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1488))(valuePtr, this);
  v130 = valuePtr[1];
  v131 = valuePtr[2];
  v132 = valuePtr[3];
  *((_OWORD *)v107 + 4) = valuePtr[0];
  *((_OWORD *)v107 + 5) = v130;
  *((_OWORD *)v107 + 6) = v131;
  *((_OWORD *)v107 + 7) = v132;
  v107[32] = *((_DWORD *)this + 6650);
  CA::Render::Update::set_shape(a2, (const CA::Shape *)v109);
  v133 = (const CA::Bounds *)*((_QWORD *)v107 + 3);
  if (v133)
  {
    v134 = (const CA::Shape *)CA::Shape::Union(v109, (uint64_t)v133);
    CA::Render::Update::set_shape(a2, v134);
    CA::Shape::unref(v134);
    CA::Shape::unref(*((CA::Shape **)v107 + 3));
    *((_QWORD *)v107 + 3) = 0;
  }
  v135 = *((_BYTE *)v107 + 132);
  *((_BYTE *)v107 + 132) = v135 & 0xDF;
  if (!(ca_debug_options | BYTE14(xmmword_1ECDC6A90)))
    goto LABEL_314;
  if ((_BYTE)ca_debug_options)
    v143 = *((_QWORD *)v107 + 2);
  else
    v143 = 0;
  if (BYTE14(xmmword_1ECDC6A90))
    v144 = v111;
  else
    v144 = 0;
  if (v144)
  {
    *((_BYTE *)v107 + 132) = v135 | 0x20;
    v143 = v109;
    if (!v109)
      goto LABEL_314;
  }
  else if (!v143)
  {
    goto LABEL_314;
  }
  if ((v143 & 1) != 0)
  {
    if (v143 != 1)
LABEL_346:
      *((_QWORD *)v107 + 3) = CA::Shape::ref(v143, v133);
  }
  else if (*(_DWORD *)(v143 + 4) != 6)
  {
    goto LABEL_346;
  }
LABEL_314:
  if (BYTE5(xmmword_1ECDC6A70))
  {
    v147 = (unsigned int *)((char *)this + 48 * v151 + 25776);
    v148 = *v147;
    if (!*v147)
    {
      CA::IOMobileFramebuffer::swap_begin((CA::WindowServer::IOMFBDisplay *)((char *)this + 25536), (unsigned int *)this + 12 * v151 + 6444);
      v148 = *v147;
    }
    qword_1EDD12458 = v148;
  }
  v136 = (CA::Shape *)CA::Shape::intersect(v109, *v155);
  v137 = (float)CA::Shape::area(v136);
  v138 = fminf(v137 / (float)CA::Shape::area((CA::Shape *)*v155), 1.0);
  CA::Shape::unref(v136);
  if (v138 <= 0.0)
  {
    v139 = 0;
    v140 = (pthread_mutex_t *)((char *)this + 25688);
  }
  else
  {
    v139 = (int)(float)(ceilf(v138 * 10.0) + -1.0);
    v140 = (pthread_mutex_t *)((char *)this + 25688);
    if ((v152 & v112) == 1)
    {
      ++*((_DWORD *)this + 6364);
    }
    else
    {
      if (v152)
        v141 = 25376;
      else
        v141 = 25416;
      ++*(_DWORD *)((char *)this + 4 * v139 + v141);
    }
  }
  *((_DWORD *)this + 6375) = v139;
  v142 = mach_absolute_time();
  *((double *)this + 3310) = CATimeWithHostTime(v142);
  CA::WindowServer::IOMFBDisplay::update_brightness_deadline((double *)this, *((double *)a2 + 9));
  return pthread_mutex_unlock(v140);
}

uint64_t CA::Shape::area(CA::Shape *this)
{
  char *v1;
  int v2;
  uint64_t result;
  uint64_t v4;
  char *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _DWORD *v10;

  if ((this & 1) != 0)
    return ((this >> 2) & 0x7FFF) * (this >> 17);
  v1 = (char *)this + 12;
  v2 = *((_DWORD *)this + 3);
  if (v2 == 0x7FFFFFFF)
    return 0;
  result = 0;
  do
  {
    v4 = *((int *)v1 + 1);
    v5 = &v1[4 * v4];
    v6 = *(_DWORD *)v5;
    v7 = v4 - 2;
    if (v7 >= 2)
    {
      v8 = v6 - v2;
      v9 = v7 >> 1;
      v10 = v1 + 12;
      do
      {
        result += (*v10 - *(v10 - 1)) * v8;
        v10 += 2;
        --v9;
      }
      while (v9);
    }
    v2 = *(_DWORD *)v5;
    v1 = v5;
  }
  while (v6 != 0x7FFFFFFF);
  return result;
}

__n128 CA::WindowServer::IOMFBDisplay::workaround_matrix@<Q0>(CA::WindowServer::IOMFBDisplay *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  result = *(__n128 *)((char *)this + 26532);
  v3 = *(_OWORD *)((char *)this + 26548);
  v4 = *(_OWORD *)((char *)this + 26564);
  v5 = *(_OWORD *)((char *)this + 26580);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)(a2 + 48) = v5;
  return result;
}

uint64_t CA::WindowServer::IOMFBDisplay::can_update(CA::WindowServer::IOMFBDisplay *this, char a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  double *v10;

  if (!(*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 216))(this))
    return 255;
  if (!*((_QWORD *)this + 80))
    return 254;
  if (*((_BYTE *)this + 28076))
    return 253;
  if ((**((_BYTE **)this + 91) & 0xFE) == 2)
    return 252;
  if ((*((_BYTE *)this + 746) & 1) != 0)
    return 251;
  if (CA::WindowServer::IOMFBDisplay::can_update_(this, a2, a3, a4, v8, v9, v10))
    return 0;
  ++*((_DWORD *)this + 6335);
  return 250;
}

uint64_t CA::WindowServer::IOMFBServer::set_next_update(uint64_t a1, __int128 *a2, double a3)
{
  pthread_mutex_t *v6;
  double v7;
  double v8;
  uint64_t v10;
  __n128 v12;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v6 = (pthread_mutex_t *)(a1 + 544);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 544));
  if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 216))(*(_QWORD *)(a1 + 96)))
    goto LABEL_21;
  if ((*(_BYTE *)(a1 + 1006) & 2) != 0)
  {
    if (*(_QWORD *)(a1 + 784))
      goto LABEL_4;
LABEL_21:
    v14 = *a2;
    v12.n128_u64[1] = *((_QWORD *)&v14 + 1);
    v15 = *((_QWORD *)a2 + 2);
    v12.n128_f64[0] = a3;
    CA::WindowServer::Server::set_next_update(a1, (unint64_t *)&v14, v12);
    return pthread_mutex_unlock(v6);
  }
  if (!*(_QWORD *)(a1 + 800))
    goto LABEL_21;
LABEL_4:
  v7 = *(double *)a2;
  v8 = *(double *)(a1 + 856);
  if (*(double *)a2 < v8 && (*(_QWORD *)a2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    if (!*(_DWORD *)(a1 + 1000))
      CA::WindowServer::IOMFBServer::set_vsync_enabled((CA::WindowServer::IOMFBServer *)a1);
    *(_DWORD *)(a1 + 1000) = 3
                           * (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 768))(*(_QWORD *)(a1 + 96));
    v7 = *(double *)a2;
    v8 = *(double *)(a1 + 856);
  }
  v10 = *((_QWORD *)a2 + 1);
  *(_QWORD *)(a1 + 872) |= *((_QWORD *)a2 + 2);
  if (v8 >= v7)
  {
    if (v7 == 0.0 || v8 <= v7)
      v10 |= *(_QWORD *)(a1 + 864);
    *(_QWORD *)(a1 + 864) = v10;
    *(double *)(a1 + 856) = v7;
  }
  return pthread_mutex_unlock(v6);
}

BOOL CA::WindowServer::IOMFBDisplay::is_enabled(CA::WindowServer::IOMFBDisplay *this)
{
  if (!*((_QWORD *)this + 80))
    return 0;
  if (*((_BYTE *)this + 28044))
    return 1;
  return *((_BYTE *)this + 28045) != 0;
}

BOOL CA::WindowServer::IOMFBDisplay::can_update_(CA::WindowServer::IOMFBDisplay *this, char a2, double a3, double a4, uint64_t a5, uint64_t a6, double *a7)
{
  int32x2_t *v10;
  CA::IOMobileFramebuffer *v11;
  int v12;
  int v13;
  uint64_t v14;
  double *v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  _BYTE *v23;
  char v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  _BOOL4 v32;
  unint64_t v33;
  int v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  CA::WindowServer::Surface *v49;
  _QWORD *v50;
  char *v51;
  uint64_t v52;
  NSObject *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  _BOOL4 v59;
  char *v60;
  double *v61;
  int v62;
  _BOOL8 v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  uint64_t *v67;
  uint64_t v68;
  unsigned int v69;
  unint64_t v70;
  uint64_t *v71;
  unint64_t v72;
  uint64_t *v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  int v77;
  double v78;
  unint64_t v79;
  int v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  BOOL v85;
  char v86;
  unint64_t v87;
  BOOL v88;
  int v89;
  int v90;
  BOOL v91;
  double v92;
  double v93;
  _BYTE *v94;
  BOOL v95;
  int v96;
  pthread_mutex_t *v97;
  _BOOL8 v98;
  char v99;
  int v100;
  _QWORD *v102;
  unsigned int v103;
  char v104;
  unsigned int v105;
  CA::IOMobileFramebuffer *v106;
  int32x2_t *v108;
  int v109;
  uint64_t v110;
  uint8_t buf[8];
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  v10 = (int32x2_t *)((char *)this + 25672);
  v110 = 0;
  if (!*((_BYTE *)this + 28078))
    goto LABEL_9;
  v11 = (CA::IOMobileFramebuffer *)*((unsigned int *)this + 6476);
  if (!(_DWORD)v11)
    goto LABEL_9;
  v12 = CA::WindowServer::swap_wait_timeout((CA::WindowServer::IOMFBDisplay *)((char *)this + 25536), v11, 0x80000001, (double *)&v110, a7);
  v13 = v12;
  if (BYTE9(xmmword_1ECDC6A90))
  {
    kdebug_trace();
    if (v13)
      goto LABEL_9;
  }
  else if (v12)
  {
    goto LABEL_9;
  }
  v10[29].i32[0] = 0;
  v10[300].i8[6] = 0;
  if (!byte_1ECDC6A8A)
  {
    v14 = *((_QWORD *)this + 3299);
    if (v14)
    {
      --*(_DWORD *)(v14 + 8);
      *((_QWORD *)this + 3299) = 0;
    }
  }
  v10[300].i8[7] = 1;
LABEL_9:
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 25688));
  v16 = v10[1].u32[0];
  if (v16 >= 2)
    v17 = 2;
  else
    v17 = v16;
  if (!(_DWORD)v17)
    goto LABEL_99;
  v18 = 0;
  v19 = a2 & 1;
  v20 = v10->u32[0];
  v106 = (CA::WindowServer::IOMFBDisplay *)((char *)this + 25536);
  v104 = 1;
  v108 = v10;
  while (1)
  {
    v21 = v20 == v10[1].i32[0] ? 0 : v20;
    if (v21 != v10->i32[1] || CA::WindowServer::page_flipping_disabled == 1)
      break;
LABEL_66:
    v20 = v21 + 1;
    if (!--v17)
      goto LABEL_100;
  }
  v22 = (*((_DWORD *)this + 156) & 0x100) != 0
     && (*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 136))(this) == 3;
  v23 = (char *)this + 48 * v21 + 25792;
  if ((*v23 & 3) == 2)
    v24 = v19;
  else
    v24 = 1;
  if ((v24 & 1) == 0 && !v22)
    v10[1].i32[1] = 4;
  v25 = (unsigned int *)((char *)this + 48 * v21 + 25752);
  if (!*v25)
  {
LABEL_59:
    v44 = (char *)this + 48 * v21;
    if (*((_QWORD *)v44 + 3223))
    {
      v45 = v44 + 25784;
      (*(void (**)(_QWORD))(**((_QWORD **)this + 3307) + 32))(*((_QWORD *)this + 3307));
      *v45 = 0;
    }
    v46 = (char *)this + 48 * v21;
    v47 = *((_QWORD *)v46 + 3220);
    if (v47)
    {
      *((_QWORD *)v46 + 3220) = 0;
      --*(_DWORD *)(v47 + 8);
      *(_BYTE *)(v47 + 132) &= ~1u;
    }
    v48 = (char *)this + 48 * v21;
    v49 = (CA::WindowServer::Surface *)*((_QWORD *)v48 + 3221);
    if (v49)
    {
      v50 = v48 + 25768;
      CA::WindowServer::Surface::unref(v49);
      *v50 = 0;
    }
    *v23 &= 0xFCu;
    ++v18;
    goto LABEL_66;
  }
  v26 = (unsigned int *)((char *)this + 48 * v21 + 25776);
  v27 = *v26;
  if (!*v26)
  {
    v51 = (char *)this + 48 * v21;
    v52 = *((_QWORD *)v51 + 3221);
    if (v52 && *(_QWORD *)(v52 + 16))
    {
      if (x_log_hook_p())
      {
        x_log_();
      }
      else
      {
        v53 = x_log_category_sharedevent;
        if (os_log_type_enabled((os_log_t)x_log_category_sharedevent, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_184457000, v53, OS_LOG_TYPE_DEFAULT, "swap canceled or aborted, ensure shared events are complete for detached", buf, 2u);
        }
      }
      CA::WindowServer::SharedEvent::force_complete(*(CA::WindowServer::SharedEvent **)(*((_QWORD *)v51 + 3221) + 16), 0);
      v10 = v108;
    }
    v54 = (char *)this + 48 * v21;
    v55 = *((_QWORD *)v54 + 3220);
    if (!v55)
      goto LABEL_54;
    v56 = *(_QWORD *)(v55 + 32);
    if (!v56 || !*(_QWORD *)(v56 + 16))
      goto LABEL_54;
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v57 = x_log_category_sharedevent;
      if (os_log_type_enabled((os_log_t)x_log_category_sharedevent, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_184457000, v57, OS_LOG_TYPE_DEFAULT, "swap canceled or aborted, ensure shared events are complete for framebuffer", buf, 2u);
      }
    }
    CA::WindowServer::SharedEvent::force_complete(*(CA::WindowServer::SharedEvent **)(*(_QWORD *)(*((_QWORD *)v54 + 3220) + 32) + 16), 0);
LABEL_53:
    v10 = v108;
LABEL_54:
    v41 = *v25;
    v42 = v10[28].u32[1];
    if (v10[28].i32[0] > *v25)
      v41 = v10[28].u32[0];
    v10[28].i32[0] = v41;
    v43 = *v25;
    if (v42 > *v25)
      v43 = v42;
    v10[28].i32[1] = v43;
    *v25 = 0;
    *v23 &= 0xF3u;
    goto LABEL_59;
  }
  v28 = v19;
  v109 = v18;
  if (CA::WindowServer::page_flipping_disabled)
    v29 = 0;
  else
    v29 = 0x80000000;
  v105 = v10[1].u32[1];
  v30 = *((_DWORD *)this + 12 * ((v21 + 1) % (unint64_t)v10[1].u32[0]) + 6444);
  if ((a2 & 2) != 0)
    v31 = 0;
  else
    v31 = v29;
  v32 = v30 > v27;
  if (v30 <= v27)
    v33 = v27;
  else
    v33 = v30;
  if (CADeviceUseVBL::once[0] != -1)
    dispatch_once(CADeviceUseVBL::once, &__block_literal_global_12);
  if (CADeviceUseVBL::use_vbl || ((v108[299].i8[4] == 0) & v104) != 1)
  {
    v34 = CA::IOMobileFramebuffer::swap_wait(v106);
  }
  else
  {
    v34 = CA::WindowServer::swap_wait_timeout(v106, (CA::IOMobileFramebuffer *)v33, v31 | v32, (double *)&v110, v15);
    v104 = 0;
  }
  v19 = v28;
  if (!v34)
  {
    if ((*((_DWORD *)this + 156) & 4) == 0
      || (v35 = (char *)this + 48 * v21, (v36 = *((_QWORD *)v35 + 3220)) == 0)
      || (v37 = *(_QWORD *)(v36 + 32)) == 0
      || (v38 = *(_QWORD *)(v37 + 16)) == 0
      || (v39 = *(void **)(v38 + 8)) == 0
      || objc_msgSend(v39, "signaledValue") == *(_QWORD *)(v38 + 16)
      || (v40 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v35 + 3220) + 32) + 16),
          *(_QWORD *)(v40 + 32) - 1 < (unint64_t)(objc_msgSend(*(id *)(v40 + 8), "signaledValue") + 1)))
    {
      *v26 = 0;
      v18 = v109;
      goto LABEL_53;
    }
  }
  v59 = (a2 & 1) == 0 && v105 != 0;
  v60 = (char *)this + 48 * v21;
  v18 = v109;
  v10 = v108;
  if (!*((_QWORD *)v60 + 3223)
    || !(*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 3307) + 24))(*((_QWORD *)this + 3307)))
  {
LABEL_98:
    if (!v59)
      goto LABEL_100;
LABEL_99:
    v18 = 0;
    goto LABEL_100;
  }
  if (CADeviceUseVBL::once[0] != -1)
    dispatch_once(CADeviceUseVBL::once, &__block_literal_global_12);
  if (!CADeviceUseVBL::use_vbl && !v108[299].i8[4])
  {
    if (!CA::WindowServer::swap_wait_timeout(v106, (CA::IOMobileFramebuffer *)*v26, 0x80000001, (double *)&v110, v61))goto LABEL_191;
    goto LABEL_98;
  }
  if (CA::IOMobileFramebuffer::swap_wait(v106))
    goto LABEL_98;
LABEL_191:
  v102 = v60 + 25784;
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 3307) + 32))(*((_QWORD *)this + 3307), *v102);
  *v102 = 0;
  v103 = v108[28].u32[1];
  if (v103 <= *v25)
    v103 = *v25;
  v108[28].i32[1] = v103;
  if (v59)
    goto LABEL_99;
LABEL_100:
  v62 = v18 - v10[300].i8[6];
  v63 = v62 > 0;
  v64 = v10->u32[1];
  if ((*((_BYTE *)this + 48 * v64 + 25792) & 4) != 0)
  {
    if ((*((_BYTE *)this + 48 * v64 + 25792) & 8) != 0
      || (v65 = CA::IOMobileFramebuffer::swap_wait((CA::WindowServer::IOMFBDisplay *)((char *)this + 25536)),
          *((_BYTE *)this + 48 * v64 + 25792) = *((_BYTE *)this + 48 * v64 + 25792) & 0xF7 | (8 * (v65 != -536870187)),
          v65 != -536870187))
    {
      v66 = *((_DWORD *)this + 12 * v64 + 6438) - 1;
      if (v10[28].i32[0] > v66)
        v66 = v10[28].u32[0];
      v10[28] = vdup_n_s32(v66);
    }
  }
  if (v10[299].i8[4])
  {
    v67 = (uint64_t *)*((_QWORD *)this + 3492);
    if (*((uint64_t **)this + 3493) != v67)
    {
      do
      {
        v68 = *v67;
        if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)this + 3307) + 24))(*((_QWORD *)this + 3307), *v67))break;
        (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 3307) + 32))(*((_QWORD *)this + 3307), v68);
        v69 = v10[295].u32[0];
        if (v69 <= *((_DWORD *)v67 + 2))
          v69 = *((_DWORD *)v67 + 2);
        v10[295].i32[0] = v69;
        v70 = *((_QWORD *)this + 3492);
        v71 = v67 + 2;
        v72 = *((_QWORD *)this + 3493);
        while (v71 != (uint64_t *)v72)
        {
          *(v71 - 2) = *v71;
          *((_DWORD *)v71 - 2) = *((_DWORD *)v71 + 2);
          v71 += 2;
        }
        if (v72 <= v70)
          __assert_rtn("pop_back", "x-small-vector.h", 410, "_end > _begin && \"pop_back on empty container\"");
        v73 = (uint64_t *)(v72 - 16);
        *((_QWORD *)this + 3493) = v73;
      }
      while (v67 != v73);
    }
    if (!*((_QWORD *)this + 6 * v64 + 3223)
      || (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 3307) + 24))(*((_QWORD *)this + 3307)))
    {
      v74 = v10[28].u32[1];
      if (v74 <= v10[295].i32[0])
        v74 = v10[295].u32[0];
      v10[28].i32[1] = v74;
    }
  }
  if ((a2 & 1) == 0)
  {
    v75 = v10[1].u32[1];
    if (v75)
      v10[1].i32[1] = v75 - 1;
  }
  v76 = *((_QWORD *)this + 3251);
  if (v76)
    v77 = *(_BYTE *)(v76 + 292) & 1;
  else
    v77 = 1;
  v10[303].i16[2] = 0;
  v78 = *((double *)this + 3460);
  if (v78 != 0.0)
  {
    v79 = CAHostTimeWithTime(v78);
    v80 = 1;
    v81 = CA::WindowServer::IOMFBDisplay::timing_granularity((os_unfair_lock_s *)this, 1);
    v82 = 2 * v81 * (*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 768))(this);
    v88 = v79 > v82;
    v83 = v79 - v82;
    v84 = v82 >> 5;
    v85 = v88 && v83 >= v84;
    v86 = !v85;
    v10[303].i8[4] = v86;
    if (v85)
    {
      v87 = CAHostTimeWithTime(*((double *)this + 3461));
      v88 = v87 > v83 && v87 - v83 > v83 >> 5;
      v80 = v88;
      v10[303].i8[4] = v80;
    }
    if (v80 && v62 == 1)
      v63 = v10[300].i8[6] != 0;
  }
  if (a3 == 0.0)
  {
    v90 = 0;
  }
  else
  {
    if (CADeviceNeedsTripleBufferedTTL::once != -1)
      dispatch_once(&CADeviceNeedsTripleBufferedTTL::once, &__block_literal_global_265);
    v89 = CADeviceNeedsTripleBufferedTTL::wants_triple_buffered_ttl;
    if (initialized[0] != -1)
      dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
    v90 = 0;
    v91 = *(float *)&dword_1ECDC6A0C != 1 && v89 == 0;
    if (!v91 && *(float *)&dword_1ECDC6A0C != 2)
    {
      if (*((double *)this + 3262) > a4)
        *((double *)this + 3262) = a4;
      v92 = (*(double (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 744))(this);
      v93 = v92 + v92;
      if (v93 < 0.026)
        v93 = 0.026;
      if (v10[303].i8[4] || v10[303].i8[5] || !v10[303].i8[6])
      {
        v90 = 1;
      }
      else
      {
        v90 = 1;
        if (*((double *)this + 3263) < a3 && v62 >= 2)
        {
          v98 = a3 - *((double *)this + 3262) < v93;
          v94 = (char *)&v10[303] + 3;
          v95 = v10[303].i8[3] == 0;
          v90 = 1;
LABEL_171:
          if ((a2 & 1) != 0)
            v99 = v77;
          else
            v99 = 1;
          if (v98 | byte_1ECDC6B05)
          {
            v97 = (pthread_mutex_t *)((char *)this + 25688);
            if ((v99 & 1) != 0)
              goto LABEL_176;
          }
          else
          {
            v97 = (pthread_mutex_t *)((char *)this + 25688);
          }
LABEL_181:
          *v94 = 0;
          if (!v95 && v90)
LABEL_183:
            kdebug_trace();
          goto LABEL_185;
        }
      }
    }
  }
  v94 = (char *)&v10[303] + 3;
  v95 = v10[303].i8[3] == 0;
  if (v62 != 1)
  {
    v98 = 0;
    goto LABEL_171;
  }
  if ((a2 & 1) != 0)
    v96 = v77;
  else
    v96 = 1;
  v97 = (pthread_mutex_t *)((char *)this + 25688);
  if (v96 != 1)
    goto LABEL_181;
LABEL_176:
  v100 = v10[300].u8[6];
  v10[303].i8[3] = v100 ^ 1;
  if ((v90 & 1) != 0)
  {
    if (v100)
    {
      if (!v95)
        goto LABEL_183;
    }
    else
    {
      *((double *)this + 3262) = a3;
    }
  }
LABEL_185:
  pthread_mutex_unlock(v97);
  return v63;
}

uint64_t CA::WindowServer::swap_wait_timeout(CA::WindowServer *this, CA::IOMobileFramebuffer *a2, unsigned int a3, double *a4, double *a5)
{
  double v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  double v12;

  if (a4)
    v7 = 0.001 - *a4;
  else
    v7 = 0.001;
  v8 = mach_absolute_time();
  v9 = CATimeWithHostTime(v8);
  while (1)
  {
    v10 = CA::IOMobileFramebuffer::swap_wait(this);
    v11 = mach_absolute_time();
    v12 = CATimeWithHostTime(v11) - v9;
    if (!(_DWORD)v10 || v12 > v7)
      break;
    usleep(0x64u);
  }
  if (a4)
    *a4 = *a4 + v12;
  return v10;
}

CA::Shape *CA::Render::Update::set_shape(CA::Render::Update *this, const CA::Shape *a2)
{
  CA::Shape *result;
  const CA::Bounds *v5;

  result = (CA::Shape *)*((_QWORD *)this + 2);
  if (result != a2)
  {
    CA::Shape::unref(result);
    result = (CA::Shape *)CA::Shape::ref((unint64_t)a2, v5);
    *((_QWORD *)this + 2) = result;
  }
  return result;
}

uint64_t CA::WindowServer::IOMFBDisplay::update_display_edr_factor(CA::WindowServer::IOMFBDisplay *this)
{
  float *v2;
  int v3;
  float v4;
  uint64_t v5;
  uint64_t result;

  if (CADeviceDisplaySupportsEDRFactor::once != -1)
    dispatch_once(&CADeviceDisplaySupportsEDRFactor::once, &__block_literal_global_49);
  if (!CADeviceDisplaySupportsEDRFactor::supports_edr)
    return 0;
  v2 = (float *)((char *)this + 26144);
  (*(void (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1072))(this);
  v3 = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1528))(this);
  v4 = 0.0;
  if (v3)
  {
    if (CA::WindowServer::Display::Mode::hdr_type(*((_QWORD *)this + 80)) - 1 > 1)
      v4 = (*(float (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1096))(this);
    else
      v4 = 1.0 / CA::WindowServer::Display::edr_headroom(this);
  }
  if (*v2 == v4)
    return 0;
  *v2 = v4;
  if (!(*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1832))(this))
    return 1;
  if ((*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1864))(this))
    *((_BYTE *)this + 28119) = 1;
  v5 = (*(uint64_t (**)(CA::WindowServer::IOMFBDisplay *))(*(_QWORD *)this + 1848))(this);
  result = 1;
  if (v5)
    *((_BYTE *)this + 28118) = 1;
  return result;
}

float CA::WindowServer::Display::edr_headroom(CA::WindowServer::Display *this)
{
  float result;
  unsigned int *v3;

  if (initialized[0] != -1)
    dispatch_once_f(initialized, 0, (dispatch_function_t)init_debug);
  result = *(float *)&dword_1ECDC6970;
  if (*(float *)&dword_1ECDC6970 == 0.0)
  {
    v3 = (unsigned int *)*((_QWORD *)this + 86);
    if (v3)
      return COERCE_FLOAT(atomic_load(v3));
    else
      return 1.0;
  }
  return result;
}

uint64_t CA::WindowServer::IOMFBDisplay::mark_buffers_non_static(uint64_t this, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v2 = *(_QWORD **)(this + 26000);
  if (v2)
  {
    v4 = this;
    v5 = (_DWORD *)(this + 25356);
    do
    {
      this = v2[4];
      if (this)
      {
        v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 216))(this);
        this = v2[4];
        if ((v6 != a2
           || *(_DWORD *)(this + 56) != *(_DWORD *)(v4 + 208)
           || *(_DWORD *)(this + 60) != *(_DWORD *)(v4 + 212))
          && (*(_DWORD *)(this + 224) & 0x4000000) != 0)
        {
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 216))(this);
          if (this)
          {
            v7 = v2[4];
            if ((*(_DWORD *)(v7 + 224) & 0xC000000) == 0x4000000)
            {
              v8 = *(_DWORD *)(v7 + 224) & 0xFBFFFFFF | ((unint64_t)*(unsigned __int8 *)(v7 + 228) << 32);
              *(_DWORD *)(v7 + 224) &= ~0x4000000u;
              *(_BYTE *)(v7 + 228) = BYTE4(v8);
              --*v5;
            }
          }
        }
      }
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  return this;
}

uint64_t CA::WindowServer::IOSurface::protection_options(CA::WindowServer::IOSurface *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 30);
  if (result)
    return IOSurfaceGetProtectionOptions();
  return result;
}

double *CA::WindowServer::IOMFBDisplay::update_brightness_deadline(double *this, double a2)
{
  double v2;
  double *v4;

  v2 = this[3311];
  if (v2 != 0.0 && v2 <= a2)
  {
    v4 = this;
    CA::WindowServer::IOMFBDisplay::save_brightness_preferences((CA::WindowServer::IOMFBDisplay *)this, 0);
    (*(void (**)(double *))(*(_QWORD *)v4 + 952))(v4);
    this = (double *)(*(uint64_t (**)(double *))(*(_QWORD *)v4 + 928))(v4);
    v4[3311] = 0.0;
  }
  return this;
}

void CA::WindowServer::IOMFBDisplay::update_color_matrix(CA::WindowServer::IOMFBDisplay *this, double a2)
{
  __n128 v4;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  float v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  float v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  float v27;
  uint64_t v28;
  float v29;
  char *v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  float v36;
  float v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  uint8_t *v41;
  uint64_t i;
  float v43;
  BOOL v44;
  double v45;
  unint64_t v46;
  NSObject *v47;
  int v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  uint8_t buf[78];
  __int16 v60;
  double v61;
  __int16 v62;
  double v63;
  __int16 v64;
  double v65;
  __int16 v66;
  double v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(uint64_t);
  void *v71;
  uint64_t *v72;
  char *v73;
  uint8_t *v74;
  int v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  int v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  if (!CA::WindowServer::IOMFBDisplay::needs_harmony_update(this))
    return;
  v5 = *((double *)this + 3336);
  v6 = (a2 - *((double *)this + 3335)) / v5;
  v4.n128_u64[0] = 1.0;
  if (v6 > 1.0)
    v7 = 1.0;
  else
    v7 = (a2 - *((double *)this + 3335)) / v5;
  if (v7 >= 0.0)
    v8 = (a2 - *((double *)this + 3335)) / v5;
  else
    v8 = 0.0;
  if (v6 <= 1.0 || v7 < 0.0)
  {
    if (v5 != 0.0 && v8 != 1.0)
    {
      v9 = 0;
      v10 = (char *)this + 26696;
      v11 = (char *)this + 26732;
      v12 = (char *)this + 26768;
      v4.n128_u32[0] = 1.0;
      do
      {
        v13 = 0;
        *(_DWORD *)&buf[8] = 0;
        *(_QWORD *)buf = 0;
        LODWORD(v69) = 0;
        v14 = 0.0;
        v68 = 0;
        do
        {
          v14 = v14 + (float)(*(float *)&v10[v13] * *(float *)&v10[v13]);
          v13 += 4;
        }
        while (v13 != 12);
        v15 = sqrtf(v14);
        if (v15 <= 0.0)
        {
          *(_DWORD *)&buf[8] = 0;
          *(_QWORD *)buf = 0;
        }
        else
        {
          v16 = 0;
          v17 = 1.0 / v15;
          do
          {
            *(float *)&buf[v16] = *(float *)&v10[v16] * v17;
            v16 += 4;
          }
          while (v16 != 12);
        }
        v18 = 0;
        v19 = 0.0;
        do
        {
          v19 = v19 + (float)(*(float *)&v11[v18] * *(float *)&v11[v18]);
          v18 += 4;
        }
        while (v18 != 12);
        v20 = sqrtf(v19);
        if (v20 <= 0.0)
        {
          LODWORD(v69) = 0;
          v68 = 0;
        }
        else
        {
          v21 = 0;
          v22 = 1.0 / v20;
          do
          {
            *(float *)((char *)&v68 + v21) = *(float *)&v11[v21] * v22;
            v21 += 4;
          }
          while (v21 != 12);
        }
        v23 = 0;
        LODWORD(v77) = 0;
        v76 = 0;
        do
        {
          v24 = *(float *)&buf[v23] + v8 * (float)(*(float *)((char *)&v68 + v23) - *(float *)&buf[v23]);
          *(float *)((char *)&v76 + v23) = v24;
          v23 += 4;
        }
        while (v23 != 12);
        v25 = 0;
        v26 = 0.0;
        do
        {
          v26 = v26 + (float)(*(float *)((char *)&v76 + v25) * *(float *)((char *)&v76 + v25));
          v25 += 4;
        }
        while (v25 != 12);
        v27 = sqrtf(v26);
        if (v27 <= 0.0)
        {
          v30 = (char *)this + 12 * v9 + 26768;
          *((_DWORD *)v30 + 2) = 0;
          *(_QWORD *)v30 = 0;
        }
        else
        {
          v28 = 0;
          v29 = 1.0 / v27;
          do
          {
            *(float *)&v12[v28] = *(float *)((char *)&v76 + v28) * v29;
            v28 += 4;
          }
          while (v28 != 12);
        }
        v31 = 0;
        v32 = 0.0;
        do
        {
          v32 = v32 + (float)(*(float *)&v10[v31] * *(float *)&v10[v31]);
          v31 += 4;
        }
        while (v31 != 12);
        v33 = 0;
        v34 = 0.0;
        do
        {
          v34 = v34 + (float)(*(float *)&v11[v33] * *(float *)&v11[v33]);
          v33 += 4;
        }
        while (v33 != 12);
        v35 = 0;
        v36 = sqrtf(v32);
        v37 = v36 + v8 * (float)(sqrtf(v34) - v36);
        do
        {
          *(float *)&v12[v35] = *(float *)&v12[v35] * v37;
          v35 += 4;
        }
        while (v35 != 12);
        ++v9;
        v10 += 12;
        v11 += 12;
        v12 += 12;
      }
      while (v9 != 3);
      goto LABEL_46;
    }
    v4.n128_f64[0] = v8;
  }
  v38 = *(_OWORD *)((char *)this + 26748);
  *((_OWORD *)this + 1673) = *(_OWORD *)((char *)this + 26732);
  *((_BYTE *)this + 26816) = 1;
  *((_OWORD *)this + 1674) = v38;
  *((_DWORD *)this + 6700) = *((_DWORD *)this + 6691);
  *((_DWORD *)this + 6703) = *((_DWORD *)this + 6702);
  v8 = v4.n128_f64[0];
LABEL_46:
  if ((*((_WORD *)this + 328) & 0x1C00) != 0x800)
  {
    if (!(*(unsigned int (**)(CA::WindowServer::IOMFBDisplay *, __n128))(*(_QWORD *)this + 1832))(this, v4))goto LABEL_52;
    if (CADeviceUseHarmonyXYZD50::once != -1)
      dispatch_once(&CADeviceUseHarmonyXYZD50::once, &__block_literal_global_187);
    if (CADeviceUseHarmonyXYZD50::use_d50_xyz)
    {
      memset(buf, 0, 60);
      *(_OWORD *)&buf[12] = *((_OWORD *)this + 1673);
      *(_OWORD *)&buf[28] = *((_OWORD *)this + 1674);
      *(_DWORD *)&buf[44] = *((_DWORD *)this + 6700);
      CA::IOMobileFramebuffer::swap_set_icc_matrix((uint64_t)this + 25536, 6u, *((_DWORD *)this + 6), 0, (float *)buf);
    }
    else
    {
LABEL_52:
      v39 = 0;
      memset(buf, 0, 72);
      v40 = (char *)this + 26768;
      v41 = buf;
      do
      {
        for (i = 0; i != 3; ++i)
        {
          v43 = *(float *)&v40[4 * i];
          v44 = v43 < 0.0;
          if (v43 >= 0.0)
            v45 = v43;
          else
            v45 = -v43;
          v46 = vcvtd_n_s64_f64(v45, 0x20uLL);
          if (v44)
            v46 = -(uint64_t)v46;
          *(_QWORD *)&v41[8 * i] = v46;
        }
        ++v39;
        v41 += 24;
        v40 += 12;
      }
      while (v39 != 3);
      if (*((_BYTE *)this + 25544))
      {
        v76 = 0;
        v77 = &v76;
        v78 = 0x2000000000;
        v79 = 0;
        v68 = MEMORY[0x1E0C809B0];
        v69 = 0x40000000;
        v70 = ___ZN2CA19IOMobileFramebuffer10set_matrixE20IOMFB_MatrixLocationPA3_A3_Ky_block_invoke;
        v71 = &unk_1E15AB770;
        v72 = &v76;
        v73 = (char *)this + 25536;
        v75 = 9;
        v74 = buf;
        BMMonitorBlockExecutionWithSignature();
        _Block_object_dispose(&v76, 8);
      }
      else
      {
        IOMobileFramebufferSetMatrix();
      }
    }
    IOMobileFramebufferSetBrightnessCorrection();
  }
  if (BYTE8(xmmword_1ECDC6A70))
  {
    if (x_log_hook_p())
    {
      x_log_();
    }
    else
    {
      v47 = x_log_category_windowserver;
      if (os_log_type_enabled((os_log_t)x_log_category_windowserver, OS_LOG_TYPE_DEFAULT))
      {
        v48 = *((_DWORD *)this + 6);
        v49 = *((float *)this + 6692);
        v50 = *((float *)this + 6693);
        v51 = *((float *)this + 6694);
        v52 = *((float *)this + 6695);
        v53 = *((float *)this + 6696);
        v54 = *((float *)this + 6697);
        v55 = *((float *)this + 6698);
        v56 = *((float *)this + 6699);
        v57 = *((float *)this + 6700);
        v58 = *((float *)this + 6703);
        *(_DWORD *)buf = 67111936;
        *(_DWORD *)&buf[4] = v48;
        *(_WORD *)&buf[8] = 2048;
        *(double *)&buf[10] = v49;
        *(_WORD *)&buf[18] = 2048;
        *(double *)&buf[20] = v50;
        *(_WORD *)&buf[28] = 2048;
        *(double *)&buf[30] = v51;
        *(_WORD *)&buf[38] = 2048;
        *(double *)&buf[40] = v52;
        *(_WORD *)&buf[48] = 2048;
        *(double *)&buf[50] = v53;
        *(_WORD *)&buf[58] = 2048;
        *(double *)&buf[60] = v54;
        *(_WORD *)&buf[68] = 2048;
        *(double *)&buf[70] = v55;
        v60 = 2048;
        v61 = v56;
        v62 = 2048;
        v63 = v57;
        v64 = 2048;
        v65 = v58;
        v66 = 2048;
        v67 = v8;
        _os_log_impl(&dword_184457000, v47, OS_LOG_TYPE_DEFAULT, "display %d harmony matrix [%g, %g, %g; %g, %g, %g; %g, %g, %g], scale %g, t: %g\n",
          buf,
          0x76u);
      }
    }
  }
}

BOOL CA::WindowServer::IOMFBDisplay::needs_harmony_update(CA::WindowServer::IOMFBDisplay *this)
{
  char *v2;
  _BOOL8 result;

  v2 = (char *)this + 26816;
  if (*((_BYTE *)this + 28052))
    return *(unsigned __int8 *)(*((_QWORD *)this + 91) + 2) | *(unsigned __int8 *)(*((_QWORD *)this + 91) + 3)
        && *v2 == 0;
  result = 0;
  if (v2[1250])
  {
    if ((*((_WORD *)this + 328) & 0x1C00) != 0x1000)
      return *(unsigned __int8 *)(*((_QWORD *)this + 91) + 2) | *(unsigned __int8 *)(*((_QWORD *)this + 91) + 3)
          && *v2 == 0;
  }
  return result;
}

void CA::OGL::MetalContext::delete_fence(int8x8_t *this, unint64_t a2)
{
  int8x8_t *v3;
  int8x8_t *v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  int8x8_t *v8;
  int8x8_t *v9;
  unint64_t v10;
  unint64_t v11;
  int8x8_t v12;
  unint64_t v13;

  v3 = this + 337;
  v4 = (int8x8_t *)std::__hash_table<std::__hash_value_type<unsigned long,unsigned long long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long long>>>::find<unsigned long>(&this[337], a2);
  if (v4)
  {
    v5 = this[338];
    v6 = (unint64_t)v4[1];
    v7 = (uint8x8_t)vcnt_s8(v5);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v5)
        v6 %= *(_QWORD *)&v5;
    }
    else
    {
      v6 &= *(_QWORD *)&v5 - 1;
    }
    v8 = *(int8x8_t **)(*(_QWORD *)v3 + 8 * v6);
    do
    {
      v9 = v8;
      v8 = (int8x8_t *)*v8;
    }
    while (v8 != v4);
    if (v9 == &this[339])
      goto LABEL_20;
    v10 = (unint64_t)v9[1];
    if (v7.u32[0] > 1uLL)
    {
      if (v10 >= *(_QWORD *)&v5)
        v10 %= *(_QWORD *)&v5;
    }
    else
    {
      v10 &= *(_QWORD *)&v5 - 1;
    }
    if (v10 != v6)
    {
LABEL_20:
      if (!*(_QWORD *)v4)
        goto LABEL_21;
      v11 = *(_QWORD *)(*(_QWORD *)v4 + 8);
      if (v7.u32[0] > 1uLL)
      {
        if (v11 >= *(_QWORD *)&v5)
          v11 %= *(_QWORD *)&v5;
      }
      else
      {
        v11 &= *(_QWORD *)&v5 - 1;
      }
      if (v11 != v6)
LABEL_21:
        *(_QWORD *)(*(_QWORD *)v3 + 8 * v6) = 0;
    }
    v12 = *v4;
    if (*v4)
    {
      v13 = *(_QWORD *)(*(_QWORD *)&v12 + 8);
      if (v7.u32[0] > 1uLL)
      {
        if (v13 >= *(_QWORD *)&v5)
          v13 %= *(_QWORD *)&v5;
      }
      else
      {
        v13 &= *(_QWORD *)&v5 - 1;
      }
      if (v13 != v6)
      {
        *(_QWORD *)(*(_QWORD *)v3 + 8 * v13) = v9;
        v12 = *v4;
      }
    }
    *v9 = v12;
    *v4 = 0;
    --*(_QWORD *)&this[340];
    operator delete(v4);
  }
}

uint64_t CA::WindowServer::Display::benchmark_mode(CA::WindowServer::Display *this, float *a2)
{
  char *v3;
  int v4;
  float v5;

  if ((CA::WindowServer::Display::benchmark_mode(float *)const::initialized & 1) == 0)
  {
    v3 = getenv("CA_BENCHMARK");
    if (v3 || (v3 = getenv("LK_BENCHMARK")) != 0)
    {
      v4 = atoi(v3);
      CA::WindowServer::Display::benchmark_mode(float *)const::benchmark_mode = v4 != 0;
      if (v4 >= 61)
      {
        v5 = 1.0 / (float)v4;
LABEL_8:
        CA::WindowServer::Display::benchmark_mode(float *)const::benchmark_rate = LODWORD(v5);
        CA::WindowServer::Display::benchmark_mode(float *)const::initialized = 1;
        goto LABEL_9;
      }
    }
    else
    {
      CA::WindowServer::Display::benchmark_mode(float *)const::benchmark_mode = 0;
    }
    v5 = 0.002;
    goto LABEL_8;
  }
LABEL_9:
  if (this)
    *(_DWORD *)this = CA::WindowServer::Display::benchmark_mode(float *)const::benchmark_rate;
  return CA::WindowServer::Display::benchmark_mode(float *)const::benchmark_mode;
}

void CA::WindowServer::IOMFBDisplay::set_color_matrix(CA::WindowServer::IOMFBDisplay *this, const float *a2, float a3, double a4)
{
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v6 = (char *)this + 26732;
  v7 = *((_OWORD *)this + 1674);
  *(_OWORD *)((char *)this + 26696) = *((_OWORD *)this + 1673);
  *(_OWORD *)((char *)this + 26712) = v7;
  *((_DWORD *)this + 6682) = *((_DWORD *)this + 6700);
  *((_DWORD *)this + 6701) = *((_DWORD *)this + 6703);
  if (a2)
  {
    v8 = *(_OWORD *)a2;
    v9 = *((_OWORD *)a2 + 1);
    *((float *)this + 6691) = a2[8];
    *(_OWORD *)v6 = v8;
    *(_OWORD *)((char *)this + 26748) = v9;
    *((float *)this + 6702) = a3;
  }
  else
  {
    *(_OWORD *)v6 = xmmword_18474DFB0;
    *(_OWORD *)((char *)this + 26748) = xmmword_18474DFB0;
    *((_DWORD *)this + 6691) = 1065353216;
  }
  v10 = mach_absolute_time();
  *((double *)this + 3335) = CATimeWithHostTime(v10);
  *((double *)this + 3336) = a4;
  v6[84] = 0;
}

uint64_t CA::WindowServer::IOMFBDisplay::release_detached_handle(uint64_t result)
{
  CA::Render::Handle *v1;
  uint64_t v2;
  CA::Render::LayerNode *v3;
  uint64_t v4;
  CA::Render::LayerNode *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  v1 = *(CA::Render::Handle **)result;
  if (*(_QWORD *)result)
  {
    v2 = result;
    result = CA::Render::Handle::lock_context(*(CA::Render::Handle **)result);
    if (result)
    {
      v4 = result;
      *((_QWORD *)v1 + 12) &= ~0x8000uLL;
      v5 = *(CA::Render::LayerNode **)(result + 384);
      if (v5)
      {
        v6 = (unsigned int *)((char *)v5 + 16);
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          CA::Render::LayerNode::delete_node(v5, v3);
        *(_QWORD *)(v4 + 384) = 0;
      }
      result = pthread_mutex_unlock((pthread_mutex_t *)(v4 + 72));
      v9 = (unsigned int *)(v4 + 8);
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    }
    v12 = (unsigned int *)((char *)v1 + 8);
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      result = (*(uint64_t (**)(CA::Render::Handle *))(*(_QWORD *)v1 + 16))(v1);
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 288) = 0;
  }
  return result;
}

uint64_t CA::WindowServer::IOMFBServer::set_vsync_enabled(CA::WindowServer::IOMFBServer *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  __CFRunLoop *v4;

  v2 = (pthread_mutex_t *)((char *)this + 608);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 608));
  if (!*((_BYTE *)this + 1005))
  {
    *((_BYTE *)this + 1005) = 1;
    if (BYTE9(xmmword_1ECDC6A90))
      kdebug_trace();
    if ((*((_BYTE *)this + 1006) & 2) != 0)
    {
      IOMobileFramebufferEnableVSyncNotifications();
    }
    else
    {
      CA::WindowServer::IOMFBDisplay::set_timings_enabled(*((CA::WindowServer::IOMFBDisplay **)this + 12), 1);
      v3 = *((_QWORD *)this + 100);
      if (v3)
      {
        v4 = (__CFRunLoop *)(*(uint64_t (**)(CA::WindowServer::IOMFBServer *))(*(_QWORD *)this + 384))(this);
        CADisplayTimerAddToRunLoop(v3, v4, (const __CFString *)*MEMORY[0x1E0C9B280]);
      }
    }
  }
  return pthread_mutex_unlock(v2);
}

void CA::WindowServer::IOMFBDisplay::set_timings_enabled(CA::WindowServer::IOMFBDisplay *this, int a2)
{
  os_unfair_lock_s *v4;
  unsigned __int8 *v5;
  unsigned __int8 v6;

  v4 = (os_unfair_lock_s *)((char *)this + 26016);
  os_unfair_lock_lock((os_unfair_lock_t)this + 6504);
  CA::WindowServer::IOMFBDisplay::initialize_timings(this);
  v5 = (unsigned __int8 *)*((_QWORD *)this + 3254);
  if (v5)
  {
    v6 = atomic_load(v5);
    if ((v6 & 1) != a2)
    {
      if ((a2 & 1) == 0)
      {
        *((_DWORD *)this + 6510) = 0;
        *((_QWORD *)this + 3256) = 0;
      }
      atomic_store(a2, *((unsigned __int8 **)this + 3254));
      __dmb(0xBu);
    }
  }
  os_unfair_lock_unlock(v4);
}

uint64_t CA::WindowServer::Server::set_next_update(uint64_t a1, unint64_t *a2, __n128 a3)
{
  double v4;
  uint64_t v6;
  double v7;

  v4 = a3.n128_f64[0];
  a3.n128_u64[0] = *a2;
  if (*(double *)a2 == 0.0)
  {
    v6 = mach_absolute_time();
    a3.n128_f64[0] = CATimeWithHostTime(v6);
    *a2 = a3.n128_u64[0];
    a2[1] = 0;
    a2[2] = 0;
  }
  if (v4 != 0.0)
  {
    v7 = (*(double (**)(uint64_t, __n128))(*(_QWORD *)a1 + 408))(a1, a3) + v4;
    a3.n128_u64[0] = *a2;
    if (*(double *)a2 < v7)
    {
      *(double *)a2 = v7;
      a3.n128_f64[0] = v7;
      a2[1] = 0;
      a2[2] = 0;
    }
  }
  return CA::Render::Server::add_callback(3, (uint64_t)CA::WindowServer::Server::timer_callback, a1, a3.n128_f64[0]);
}

BOOL CAFrameRateRangeIsValid(float a1, float a2, float a3)
{
  if (!dyld_program_sdk_at_least() && a1 == a3 && a1 == a2)
    return 1;
  if (a1 == 0.0 && a2 == 0.0 && a3 == 0.0)
    return 1;
  if (a1 <= 0.0)
    return 0;
  if (a1 <= a3 && a3 <= a2)
    return 1;
  return a3 == 0.0 && a1 <= a2;
}

uint64_t CA::OGL::MetalContext::encode_asg77_weights(CA::OGL::MetalContext *this, const CA::OGL::MetalContext::FragmentShader::Spec *a2)
{
  char v2;
  uint64_t v4;
  void *v5;
  uint64_t result;
  _WORD *v7;
  unint64_t v8;
  __int16 *v9;
  unint64_t v10;
  __int16 *v11;
  uint64_t v12;
  float *v13;
  float v14;
  __int16 *v15;
  uint64_t v16;
  __int16 *v17;
  float v18;
  char v19;
  __int16 *v20;
  __int16 *v21;
  float v22;
  char v23;
  int v24;
  int v25;
  float v26;
  uint64_t v27;
  float v28;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v2 = *((_BYTE *)this + 3360);
  if ((v2 & 8) == 0)
  {
    v4 = *((_QWORD *)this + 501);
    if (!v4)
    {
      v5 = (void *)objc_msgSend(*((id *)this + 363), "newBufferWithLength:options:", 6144, 0);
      *((_QWORD *)this + 501) = v5;
      objc_msgSend(v5, "setLabel:", CFSTR("com.apple.coreanimation.asg77-weights"));
      result = *((_QWORD *)this + 501);
      if (!result)
        return result;
      v7 = (_WORD *)objc_msgSend((id)result, "contents");
      v8 = 0;
      v9 = &word_18475391C;
      do
      {
        v10 = 0;
        v11 = &word_18475391C;
        do
        {
          v12 = 0;
          v35 = 0uLL;
          v36 = 0uLL;
          v13 = (float *)&v34;
          v14 = 0.0;
          v15 = v11;
          v34 = 0uLL;
          do
          {
            v16 = 0;
            v17 = v9;
            do
            {
              if ((_DWORD)v12 && (_DWORD)v12 != 3 || (_DWORD)v16 && (_DWORD)v16 != 3)
              {
                v18 = 0.0;
                v19 = 1;
                v20 = v17;
                v21 = v15;
                v22 = 0.0;
                do
                {
                  v23 = v19;
                  v24 = *v20;
                  v20 -= 4;
                  v22 = v22 + (float)v24;
                  v25 = *v21;
                  v21 -= 4;
                  v18 = v18 + (float)v25;
                  v19 = 0;
                }
                while ((v23 & 1) != 0);
                v26 = (float)(v22 * 0.25) * v18;
                *v13++ = v26;
                v14 = v26 + v14;
              }
              ++v16;
              ++v17;
            }
            while (v16 != 4);
            ++v12;
            ++v15;
          }
          while (v12 != 4);
          v27 = 0;
          v28 = 1.0 / v14;
          do
          {
            _S4 = *(float *)((char *)&v34 + v27) * v28;
            __asm { FCVT            H4, S4 }
            *v7++ = LOWORD(_S4);
            v27 += 4;
          }
          while (v27 != 48);
          v11 -= 8;
          _CF = v10 >= 0x1E;
          v10 += 2;
        }
        while (!_CF);
        v9 -= 8;
        _CF = v8 >= 0x1E;
        v8 += 2;
      }
      while (!_CF);
      v2 = *((_BYTE *)this + 3360);
      v4 = *((_QWORD *)this + 501);
    }
    *((_BYTE *)this + 3360) = v2 | 8;
    objc_msgSend(*((id *)this + 367), "setFragmentBuffer:offset:atIndex:", v4, 0, 8, v34, v35, v36);
  }
  return 1;
}

void CA::OGL::FilterNode::apply(uint64_t a1, int **a2, float *a3, int32x4_t a4, int32x4_t a5)
{
  float v7;
  CA::Render::Update **v9;
  CA::Render::Update *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int64x2_t v15;
  int8x16_t v16;
  int8x16_t v17;
  double v18;
  double v19;
  BOOL v20;
  int8x16_t v21;
  int8x16_t v22;
  unint64_t v23;
  int8x16_t v24;
  float64x2_t v25;
  float64x2_t v26;
  int64x2_t v27;
  int8x16_t v28;
  float64x2_t v29;
  int32x4_t v30;
  CA::Shape *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int8x16_t v47;
  int v48;
  os_unfair_lock_s *v49;
  os_unfair_lock_s *v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  int8x16_t v55;
  int32x4_t v56;
  _QWORD v57[2];
  int32x4_t v58;
  _OWORD v59[4];
  uint64_t v60;
  uint64_t v61;

  v7 = *(float *)a4.i32;
  v61 = *MEMORY[0x1E0C80C00];
  v9 = *(CA::Render::Update ***)(a1 + 8);
  v10 = *v9;
  v11 = *(_DWORD *)(a1 + 136);
  if (v11 < 0)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, a1 + 128);
    v11 = *(_DWORD *)(a1 + 136);
  }
  v12 = *(_DWORD *)(a1 + 140);
  if (v11 <= v12)
    v13 = *(_DWORD *)(a1 + 140);
  else
    v13 = v11;
  a4.i32[0] = 1073741822;
  a5.i32[0] = v13;
  v17 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(a5, a4), 0);
  v14 = *(_QWORD *)(a1 + 128);
  v15.i64[0] = (int)v14;
  v15.i64[1] = SHIDWORD(v14);
  v16 = vbslq_s8(v17, (int8x16_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL), (int8x16_t)vcvtq_f64_s64(v15));
  *(double *)v17.i64 = (double)v11;
  if (v13 <= 1073741822)
  {
    v18 = (double)v12;
  }
  else
  {
    *(double *)v17.i64 = 1.79769313e308;
    v18 = 1.79769313e308;
  }
  v19 = v7;
  *(double *)&v17.i64[1] = v18;
  v20 = *(double *)v17.i64 >= 1.79769313e308 || v7 == 1.0;
  v21.i64[1] = v16.i64[1];
  *(double *)&v22.i64[1] = v18;
  if (v20)
    v23 = 0;
  else
    v23 = -1;
  v24 = (int8x16_t)vdupq_n_s64(v23);
  *(double *)v22.i64 = *(double *)v17.i64 * v7;
  v25 = (float64x2_t)vbslq_s8(v24, v22, v17);
  *(double *)v21.i64 = v19 * *(double *)v16.i64;
  v26 = (float64x2_t)vbslq_s8(v24, v21, v16);
  if (v7 != 1.0 && v25.f64[1] < 1.79769313e308)
  {
    v26.f64[1] = vmuld_lane_f64(v19, v26, 1);
    v25.f64[1] = v25.f64[1] * v19;
  }
  v27 = vceqzq_f64(v25);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v27, 1), (int8x16_t)v27).u64[0] & 0x8000000000000000) != 0
    || (v28 = vorrq_s8((int8x16_t)vcltzq_f64(v25), (int8x16_t)vcgezq_f64(v25)),
        (vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v28), 1), v28).u64[0] & 0x8000000000000000) != 0))
  {
    v58 = 0uLL;
  }
  else
  {
    v29 = vminnmq_f64(vaddq_f64(v26, v25), (float64x2_t)vdupq_n_s64(0x41C0000000000000uLL));
    v30 = (int32x4_t)vcvtmq_s64_f64(vmaxnmq_f64(v26, (float64x2_t)vdupq_n_s64(0xC1BFFFFFFF000000)));
    v58 = vuzp1q_s32(v30, (int32x4_t)vsubq_s64(vcvtpq_s64_f64(v29), (int64x2_t)v30));
  }
  v31 = (CA::Shape *)CA::Shape::intersect(*(CA::Shape **)(*((_QWORD *)v10 + 29) + 8), (const CA::Bounds *)&v58);
  v60 = 0;
  memset(&v59[2], 0, 32);
  memset(v59, 0, 32);
  v32 = *((_QWORD *)v10 + 29);
  *(_OWORD *)((char *)v59 + 8) = *(_OWORD *)(v32 + 8);
  v33 = *(_QWORD *)(v32 + 32);
  *((_QWORD *)&v59[1] + 1) = *(_QWORD *)(v32 + 24);
  *(_QWORD *)&v59[2] = v33;
  v34 = *(_OWORD *)(v32 + 40);
  *((_QWORD *)&v59[3] + 1) = *(_QWORD *)(v32 + 56);
  LOWORD(v33) = *(unsigned __int8 *)(v32 + 68);
  WORD2(v60) = v33;
  LOWORD(v33) = *(_WORD *)(v32 + 68) & 0x100 | v33;
  *(_OWORD *)((char *)&v59[2] + 8) = v34;
  LODWORD(v60) = *(_DWORD *)(v32 + 64);
  WORD2(v60) = v33;
  WORD2(v60) = v33 | *(_WORD *)(v32 + 68) & 0x400;
  *((_QWORD *)&v59[0] + 1) = v31;
  *(_QWORD *)&v59[0] = CA::OGL::Context::set_gstate((uint64_t)v10, (uint64_t)v59);
  if (((*a2)[19] & 8) != 0)
    v35 = (CA::OGL::filter_flags(*(_QWORD *)(a1 + 232), *(_QWORD *)(a1 + 16)) >> 6) & 1;
  else
    LOBYTE(v35) = 0;
  v36 = *((_QWORD *)v10 + 2);
  v37 = *(unsigned __int8 *)(v36 + 480);
  if (v37 >= 2 && (v37 != 3 || (v35 & 1) == 0))
    *(_BYTE *)(v36 + 481) |= 1u;
  v38 = *(_QWORD *)(a1 + 16);
  v39 = *(_QWORD **)(*(_QWORD *)(v38 + 24) + 128);
  if (!v39 || !*v39)
    goto LABEL_40;
  v40 = 0;
  if (*(_BYTE *)(*v39 + 12) == 3)
  {
    v41 = v39[12];
    if (v41)
    {
      v42 = *(unsigned int *)(v41 + 16);
      if (!(_DWORD)v42)
        goto LABEL_40;
      v43 = *(_QWORD *)(v41 + 24);
      if ((*(_BYTE *)(v43 + 13) & 1) == 0)
      {
        v44 = 0;
        v45 = v41 + 32;
        while (v42 - 1 != v44)
        {
          v46 = *(_QWORD *)(v45 + 8 * v44++);
          if ((*(_BYTE *)(v46 + 13) & 1) != 0)
          {
            if (v44 >= v42)
              goto LABEL_40;
            goto LABEL_39;
          }
        }
        goto LABEL_40;
      }
LABEL_39:
      if (v43 != *(_QWORD *)(*(_QWORD *)(a1 + 232) + 16))
      {
LABEL_40:
        v40 = 0;
        goto LABEL_41;
      }
      v40 = *(_QWORD *)(*(_QWORD *)(v38 + 16) + 256);
      if (v40)
      {
        v49 = (os_unfair_lock_s *)(v40 + 36);
        os_unfair_lock_lock((os_unfair_lock_t)(v40 + 36));
        v40 = *(_QWORD *)(v40 + 40);
        if (v40)
        {
          v50 = (os_unfair_lock_s *)(v40 + 40);
          os_unfair_lock_lock((os_unfair_lock_t)(v40 + 40));
          v51 = *(_QWORD *)(v40 + 48);
          if (v51 && *(CA::Render::Update **)(v51 + 8) == *v9)
            v40 = *(_BYTE *)(v51 + 216) & 1;
          else
            v40 = 0;
          os_unfair_lock_unlock(v50);
        }
        os_unfair_lock_unlock(v49);
        v38 = *(_QWORD *)(a1 + 16);
      }
    }
  }
LABEL_41:
  CA::OGL::emit_filter(v9, *(_QWORD *)(a1 + 232), v38, *a2, v40, 0, 0, v7, *a3);
  CA::OGL::Context::set_gstate((uint64_t)v10, **((_QWORD **)v10 + 29));
  v48 = (*(_DWORD *)(a1 + 220) >> 17) & 7;
  if (v48)
  {
    v52 = v48 - 1;
    v53 = -2147467200;
    switch(v52)
    {
      case 0:
        break;
      case 1:
        v53 = 8388736;
        break;
      case 2:
        v53 = -2147483520;
        break;
      case 4:
        v53 = -2139094912;
        if (*a2)
        {
          if ((*((_BYTE *)*a2 + 69) & 8) != 0)
            v53 = 8388736;
          else
            v53 = -2139094912;
        }
        break;
      case 5:
        v53 = -2147450752;
        break;
      case 6:
        v53 = 8421504;
        break;
      default:
        v53 = 0;
        break;
    }
    v54 = bswap32(v53);
    v47.i32[0] = v54;
    v47.i32[1] = v54 >> 8;
    v47.i32[2] = HIWORD(v54);
    v55.i64[0] = 0xFF000000FFLL;
    v55.i64[1] = 0xFF000000FFLL;
    v56 = (int32x4_t)vandq_s8(v47, v55);
    v56.i32[3] = vshrq_n_u32((uint32x4_t)vdupq_n_s32(v54), 0x18uLL).i32[3];
    *(float16x4_t *)(*((_QWORD *)v10 + 2) + 8) = vcvt_f16_f32(vmulq_f32(vcvtq_f32_s32(v56), (float32x4_t)vdupq_n_s32(0x3B808081u)));
    v57[0] = 0;
    v57[1] = 0;
    CA::OGL::emit_combine((uint64_t)v10, 0, 0, 0, *((CA::Shape **)&v59[0] + 1), (unsigned int *)v57);
  }
  *(_BYTE *)(*((_QWORD *)v10 + 2) + 481) &= ~1u;
  if (v31)
    CA::Shape::unref(v31);
}

void CA::OGL::render_home_affordance_base(_QWORD *a1, uint64_t a2, int *a3, float a4)
{
  unsigned int *v8;
  double float_key;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int float_color_key;
  int8x8_t v15;
  unsigned int v16;
  int16x4_t v17;
  int16x4_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint32x2_t *v32;
  _OWORD *v33;
  _OWORD *v34;
  float16x4_t v35;
  float v36;
  float v37;
  float32x4_t v38;
  float32x4_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v8 = *(unsigned int **)(a2 + 40);
  float_key = CA::Render::KeyValueArray::get_float_key((CA::Render::KeyValueArray *)v8, (const CA::Render::KeyValueArray *)0x10E, 0.0);
  v10 = CA::Render::KeyValueArray::get_float_key((CA::Render::KeyValueArray *)v8, (const CA::Render::KeyValueArray *)0x12B, 0.0);
  if (!v8)
    goto LABEL_14;
  v11 = v8[4];
  if (!(_DWORD)v11)
    goto LABEL_14;
  v12 = 0;
  while (1)
  {
    v13 = *(_QWORD *)&v8[2 * v12 + 6];
    if (*(_DWORD *)(v13 + 16) == 266)
      break;
    if (v11 == ++v12)
      goto LABEL_14;
  }
  if ((v12 & 0x80000000) == 0 && *(_QWORD *)(v13 + 24))
  {
    v39 = 0uLL;
    float_color_key = CA::Render::KeyValueArray::get_float_color_key((CA::Render::KeyValueArray *)v8, (const CA::Render::KeyValueArray *)0x118, &v39);
    v15 = (int8x8_t)vcvt_f16_f32(v39);
    if (float_color_key)
      v16 = -1;
    else
      v16 = 0;
    v17 = (int16x4_t)vbsl_s8((int8x8_t)vdup_n_s16(v16), v15, (int8x8_t)0x3C003C003C003C00);
    v8 = *(unsigned int **)(a2 + 40);
    if (!v8)
      return;
  }
  else
  {
LABEL_14:
    _S0 = CA::Render::KeyValueArray::get_float_key((CA::Render::KeyValueArray *)v8, (const CA::Render::KeyValueArray *)0x10B, 0.0);
    if (_S0 > 1.0)
      _S0 = 1.0;
    if (_S0 < 0.0)
      _S0 = 0.0;
    __asm { FCVT            H0, S0 }
    v24.i16[1] = 15360;
    v24.i32[1] = 1006648320;
    v24.i16[0] = _H0;
    v17 = vzip1_s16(v24, v24);
    v17.i16[2] = _H0;
    if (!v8)
      return;
  }
  v25 = v8[4];
  if ((_DWORD)v25)
  {
    v26 = 0;
    v27 = float_key;
    v28 = v10;
    while (1)
    {
      v29 = *(_QWORD *)&v8[2 * v26 + 6];
      if (*(_DWORD *)(v29 + 16) == 283)
        break;
      if (v25 == ++v26)
        return;
    }
    if ((v26 & 0x80000000) == 0)
    {
      v30 = *(_QWORD *)(v29 + 24);
      if (v30)
      {
        v35 = (float16x4_t)v17;
        v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 80))(v30);
        if (v31)
        {
          v32 = (uint32x2_t *)v31;
          v36 = v28;
          v37 = v27;
          CA::OGL::bind_filter_surface((uint64_t)a1, (uint64_t)a3, a4);
          *(_BYTE *)(a1[2] + 16) = 55;
          v39 = vcvtq_f32_f16(v35);
          v38 = 0uLL;
          v33 = CA::OGL::Context::bind_image((uint64_t)a1, 1, v32, (double *)0x100, 1u, 1, 0, 0, 0.0, &v38, 0);
          if (v33)
          {
            v34 = v33;
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t, float32x4_t *))(*a1 + 1000))(a1, 0, 4, 1, &v39);
            (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, float *))(*a1 + 1000))(a1, 1, 1, 1, &v37);
            (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, float *))(*a1 + 1000))(a1, 2, 1, 1, &v36);
            CA::OGL::emit_filter_quads((uint64_t)a1, a3, a4);
            (*(void (**)(_QWORD *, _OWORD *, uint64_t))(*a1 + 520))(a1, v34, 1);
          }
          if ((int *)a1[31] != a3)
            CA::OGL::Context::unbind_surface(a1, (uint64_t)a3, 0);
          *(_BYTE *)(a1[2] + 16) = 0;
          *(_BYTE *)(a1[2] + 19) = 0;
        }
      }
    }
  }
}

uint64_t CA::OGL::render_luminance_curve_map(_QWORD *a1, unsigned int *a2, int *a3, float a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CA::OGL *v11;
  float v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  float float_key;
  float *v20;
  uint64_t result;
  float v22;
  uint64_t v23[2];

  v23[1] = *MEMORY[0x1E0C80C00];
  if (!a2)
    goto LABEL_9;
  v8 = a2[4];
  if (!(_DWORD)v8)
    goto LABEL_9;
  v9 = 0;
  while (1)
  {
    v10 = *(_QWORD *)&a2[2 * v9 + 6];
    if (*(_DWORD *)(v10 + 16) == 312)
      break;
    if (v8 == ++v9)
      goto LABEL_9;
  }
  if ((v9 & 0x80000000) == 0)
    v11 = *(CA::OGL **)(v10 + 24);
  else
LABEL_9:
    v11 = 0;
  v12 = CA::OGL::curve_horner_coeffecients(v11, (CA::Render::Object *)a2);
  v14 = v13;
  v16 = v15;
  v18 = v17;
  float_key = CA::Render::KeyValueArray::get_float_key((CA::Render::KeyValueArray *)a2, (const CA::Render::KeyValueArray *)0x10E, 1.0);
  v22 = float_key;
  CA::OGL::bind_filter_surface((uint64_t)a1, (uint64_t)a3, a4);
  *(_BYTE *)(a1[2] + 16) = 51;
  v20 = (float *)a1[2];
  v20[6] = v12;
  *((_DWORD *)v20 + 7) = v14;
  *((_DWORD *)v20 + 8) = v16;
  *((_DWORD *)v20 + 9) = v18;
  v23[0] = (uint64_t)vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16((float16x4_t)0x3C003C003C003C00), v22));
  result = CA::OGL::emit_filter_quads_color((uint64_t)a1, a3, v23, a4);
  if ((int *)a1[31] != a3)
    result = CA::OGL::Context::unbind_surface(a1, (uint64_t)a3, 0);
  *(_BYTE *)(a1[2] + 16) = 0;
  *(_BYTE *)(a1[2] + 19) = 0;
  return result;
}

uint64_t CA::OGL::emit_color_matrix(CA::OGL *a1, float32x4_t *a2, uint64_t a3, int a4, float a5)
{
  CA::OGL::Context *v8;
  unsigned __int16 *v10;
  uint64_t v11;
  int16x4_t v12;
  uint64_t v13;
  int8x16_t v14;
  int8x16_t v15;
  uint64x2_t v16;
  uint64x2_t v18;
  float16x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float v28;
  int32x4_t v29;
  int32x4_t v30;
  float32x4_t v31;
  int32x4_t v32;
  float32x4_t v33;
  uint64_t result;
  uint64_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  uint64_t v41;

  v8 = (CA::OGL::Context *)a2;
  v41 = *MEMORY[0x1E0C80C00];
  v12.i16[1] = 0;
  v12.i16[3] = 0;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v36 = 0u;
  v10 = (unsigned __int16 *)*((_QWORD *)a1 + 2);
  v11 = v10[4];
  v12.i16[0] = v10[5];
  v12.i16[2] = v10[6];
  v13 = v10[7];
  v14.i64[0] = v12.u16[0];
  v14.i64[1] = v12.u16[2];
  v15.i64[0] = 0xFFFFLL;
  v15.i64[1] = 0xFFFFLL;
  v16 = (uint64x2_t)vandq_s8(v14, v15);
  _Q2 = (int32x4_t)xmmword_18474E330;
  v18 = vshlq_u64(v16, (uint64x2_t)xmmword_18474E330);
  if ((v18.i64[0] | v11 | v18.i64[1] | (v13 << 48)) != 0x3C003C003C003C00)
  {
    _H1 = v13;
    v20 = (float16x4_t)vuzp1_s16(v12, v12);
    _Q2.i16[0] = v11;
    v21 = a2[1];
    v36 = *a2;
    v37 = v21;
    v22 = a2[3];
    v38 = a2[2];
    v39 = v22;
    v40 = a2[4];
    __asm { FCVT            S1, H1 }
    v28 = 1.0 / _S1;
    if (_S1 <= 0.0)
      v28 = 0.0;
    __asm { FCVT            S2, H2 }
    *(float *)_Q2.i32 = v28 * *(float *)_Q2.i32;
    v29 = (int32x4_t)vcvtq_f32_f16(v20);
    *(float32x2_t *)v29.i8 = vmul_n_f32(*(float32x2_t *)v29.i8, v28);
    v30 = vzip1q_s32(_Q2, v29);
    v36 = vmulq_n_f32(v36, *(float *)_Q2.i32);
    v37 = vmulq_f32(v37, (float32x4_t)vzip1q_s32(v30, vdupq_lane_s32(*(int32x2_t *)v30.i8, 1)));
    v31 = vmulq_f32(v38, (float32x4_t)vzip1q_s32(v29, v29));
    *(int32x2_t *)v29.i8 = vdup_lane_s32(*(int32x2_t *)v29.i8, 1);
    v32 = v29;
    *(float *)&v32.i32[1] = _S1;
    v33 = (float32x4_t)vzip1q_s32(v32, v32);
    v33.i32[2] = v29.i32[0];
    v38 = v31;
    v39 = vmulq_f32(v39, v33);
    v40 = vmulq_n_f32(v40, _S1);
    v8 = (CA::OGL::Context *)&v36;
  }
  CA::OGL::bind_filter_surface((uint64_t)a1, a3, a5);
  CA::OGL::color_matrix_function(a1, v8, 0, (*(unsigned __int16 *)(a3 + 75) >> 11) & 1, a4);
  v35 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 8);
  result = CA::OGL::emit_filter_quads_color((uint64_t)a1, (int *)a3, &v35, a5);
  if (*((_QWORD *)a1 + 31) != a3)
    result = CA::OGL::Context::unbind_surface(a1, a3, 0);
  *(_BYTE *)(*((_QWORD *)a1 + 2) + 16) = 0;
  *(_BYTE *)(*((_QWORD *)a1 + 2) + 19) = 0;
  return result;
}

uint64_t CA::OGL::bind_filter_surface(uint64_t result, uint64_t a2, float a3)
{
  uint64_t v3;
  float32x2_t *v6;
  float32x2_t v7;
  uint64_t v8;
  int64x2_t v9;
  float32x2_t *v15;

  v3 = result;
  if (*(_QWORD *)(result + 248) == a2)
  {
    *(_BYTE *)(*(_QWORD *)(result + 16) + 17) = 38;
  }
  else
  {
    result = CA::OGL::Context::bind_surface(result, a2, 0, a3 != 1.0, a3 != 1.0, 0.0);
    if (a3 > 1.0)
    {
      v6 = *(float32x2_t **)(v3 + 16);
      v7 = v6[12];
      v8 = *(_QWORD *)(a2 + 40);
      v9.i64[0] = (int)v8;
      v9.i64[1] = SHIDWORD(v8);
      __asm { FMOV            V3.2D, #-0.5 }
      v6[2].i8[3] = 5;
      v15 = *(float32x2_t **)(v3 + 16);
      v15[46] = vmul_f32(v7, (float32x2_t)0x3F0000003F000000);
      v15[47] = vcvt_f32_f64(vmulq_f64(vaddq_f64(vcvtq_f64_s64(v9), _Q3), vcvtq_f64_f32(v7)));
    }
  }
  return result;
}

uint64_t CA::OGL::emit_filter_quads_color(uint64_t a1, int *a2, uint64_t *a3, float a4)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  float v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  int32x2_t v16[2];
  _QWORD v17[3];
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v19 = 0u;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 232) + 8);
  v17[0] = a1;
  v17[1] = v8;
  v18 = 0u;
  v17[2] = 0;
  WORD4(v18) = 256;
  CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)v17);
  v16[0] = 0;
  v16[1] = 0;
  while (1)
  {
    result = CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)v17, v16);
    if (!(_DWORD)result)
      break;
    if (*(_DWORD *)(a1 + 92))
      v10 = 6;
    else
      v10 = 4;
    if ((unint64_t)(*(_QWORD *)(a1 + 128) + 4) > *(_QWORD *)(a1 + 136)
      || (v11 = *(_QWORD *)(a1 + 112)) != 0 && *(_QWORD *)(a1 + 104) + v10 > v11)
    {
      *(_WORD *)(a1 + 816) |= 0x20u;
      CA::OGL::Context::array_flush(a1);
      *(_QWORD *)(a1 + 128) = 0;
      *(_QWORD *)(a1 + 96) = a1 + 818;
      *(_OWORD *)(a1 + 104) = xmmword_18474E060;
    }
    CA::OGL::Context::array_rect((_QWORD *)a1, (float)a2[8] * a4, (float)a2[9] * a4, (float)(a2[10] + a2[8]) * a4, (float)(a2[11] + a2[9]) * a4);
    v12 = (float)a2[10];
    v13 = (float)a2[11];
    v14 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
    *(_QWORD *)(v14 - 176) = 0;
    *(float *)(v14 - 128) = v12;
    *(_DWORD *)(v14 - 124) = 0;
    *(float *)(v14 - 80) = v12;
    *(float *)(v14 - 76) = v13;
    *(_DWORD *)(v14 - 32) = 0;
    *(float *)(v14 - 28) = v13;
    v15 = *a3;
    *(_QWORD *)(v14 - 160) = *a3;
    *(_QWORD *)(v14 - 112) = v15;
    *(_QWORD *)(v14 - 64) = v15;
    *(_QWORD *)(v14 - 16) = v15;
  }
  return result;
}

float CA::OGL::curve_horner_coeffecients(CA::OGL *this, CA::Render::Object *a2)
{
  float result;
  float v3;
  float v4;
  float v5;
  float v6;

  result = 0.0;
  if (this && *((_BYTE *)this + 12) == 56 && *((_DWORD *)this + 4) >= 4u)
  {
    v3 = *((double *)this + 3);
    v4 = *((double *)this + 4);
    v5 = *((double *)this + 5);
    v6 = *((double *)this + 6);
    return (float)(v6 - v3) + (float)((float)(v4 - v5) * 3.0);
  }
  return result;
}

uint64_t CA::OGL::emit_filter_quads(uint64_t a1, int *a2, float a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  float v10;
  float v11;
  uint64_t v12;
  int32x2_t v13[2];
  _QWORD v14[3];
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v16 = 0u;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 232) + 8);
  v14[0] = a1;
  v14[1] = v6;
  v15 = 0u;
  v14[2] = 0;
  WORD4(v15) = 256;
  CA::OGL::Context::ClippedArray::start((CA::OGL::Context::ClippedArray *)v14);
  v13[0] = 0;
  v13[1] = 0;
  while (1)
  {
    result = CA::OGL::Context::ClippedArray::next_rect((CA::OGL::Context::ClippedArray *)v14, v13);
    if (!(_DWORD)result)
      break;
    if (*(_DWORD *)(a1 + 92))
      v8 = 6;
    else
      v8 = 4;
    if ((unint64_t)(*(_QWORD *)(a1 + 128) + 4) > *(_QWORD *)(a1 + 136)
      || (v9 = *(_QWORD *)(a1 + 112)) != 0 && *(_QWORD *)(a1 + 104) + v8 > v9)
    {
      *(_WORD *)(a1 + 816) |= 0x20u;
      CA::OGL::Context::array_flush(a1);
      *(_QWORD *)(a1 + 128) = 0;
      *(_QWORD *)(a1 + 96) = a1 + 818;
      *(_OWORD *)(a1 + 104) = xmmword_18474E060;
    }
    CA::OGL::Context::array_rect((_QWORD *)a1, (float)a2[8] * a3, (float)a2[9] * a3, (float)(a2[10] + a2[8]) * a3, (float)(a2[11] + a2[9]) * a3);
    v10 = (float)a2[10];
    v11 = (float)a2[11];
    v12 = *(_QWORD *)(a1 + 120) + 48 * *(_QWORD *)(a1 + 128);
    *(_QWORD *)(v12 - 176) = 0;
    *(float *)(v12 - 128) = v10;
    *(_DWORD *)(v12 - 124) = 0;
    *(float *)(v12 - 80) = v10;
    *(float *)(v12 - 76) = v11;
    *(_DWORD *)(v12 - 32) = 0;
    *(float *)(v12 - 28) = v11;
  }
  return result;
}

CFTypeRef CA::Display::Display::retain_uuid(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  const void *v3;
  CFTypeRef v4;

  v2 = this + 18;
  os_unfair_lock_lock(this + 18);
  v3 = *(const void **)&this[32]._os_unfair_lock_opaque;
  if (v3)
    v4 = CFRetain(v3);
  else
    v4 = 0;
  os_unfair_lock_unlock(v2);
  return v4;
}

void sub_18452DE8C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18452DEFC(_Unwind_Exception *a1)
{
  CA::Transaction *v1;

  CA::Transaction::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t CABackingStoreSetColorSpace(uint64_t a1, CGColorSpace *a2)
{
  pthread_mutex_t *v4;
  CGColorSpace *v5;
  uint64_t v6;

  v4 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  v5 = *(CGColorSpace **)(a1 + 160);
  if (v5 == a2)
    goto LABEL_4;
  if (!v5)
  {
LABEL_6:
    CGColorSpaceRelease(v5);
    *(_QWORD *)(a1 + 160) = CGColorSpaceRetain(a2);
    *(_WORD *)(a1 + 492) |= 0x400u;
    v6 = 1;
    goto LABEL_7;
  }
  if ((CGColorSpaceEqualToColorSpace() & 1) == 0)
  {
    v5 = *(CGColorSpace **)(a1 + 160);
    goto LABEL_6;
  }
LABEL_4:
  v6 = 0;
LABEL_7:
  pthread_mutex_unlock(v4);
  return v6;
}

void CA::Render::BackdropState::~BackdropState(CA::Render::BackdropState *this, const CA::Render::Object *a2)
{
  malloc_zone_t *malloc_zone;

  CA::Render::BackdropState::~BackdropState(this, a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  CA::Render::BackdropState **v3;
  _QWORD *v4;
  _QWORD *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  *(_QWORD *)this = off_1E1596EC0;
  if ((*((_BYTE *)this + 13) & 1) != 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::BackdropState::_list_lock);
    v3 = (CA::Render::BackdropState **)CA::Render::BackdropState::_list;
    if (CA::Render::BackdropState::_list != (_UNKNOWN *)qword_1EDD0FBD8)
    {
      while (*v3 != this)
      {
        if (++v3 == (CA::Render::BackdropState **)qword_1EDD0FBD8)
        {
          v3 = (CA::Render::BackdropState **)qword_1EDD0FBD8;
          break;
        }
      }
    }
    *v3 = *(CA::Render::BackdropState **)(qword_1EDD0FBD8 - 8);
    if (qword_1EDD0FBD8 <= (unint64_t)CA::Render::BackdropState::_list)
      __assert_rtn("pop_back", "x-small-vector.h", 410, "_end > _begin && \"pop_back on empty container\"");
    qword_1EDD0FBD8 -= 8;
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::BackdropState::_list_lock);
  }
  v4 = (_QWORD *)*((_QWORD *)this + 11);
  while (v4)
  {
    v5 = v4;
    v4 = (_QWORD *)*v4;
    v6 = (unsigned int *)v5[4];
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
    free(v5);
  }
  v10 = (unsigned int *)*((_QWORD *)this + 5);
  if (v10)
  {
    v11 = v10 + 2;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 16))(v10);
  }
  --dword_1ECDC7C38;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
}

void CA::Render::BackdropGroup::~BackdropGroup(CA::Render::BackdropGroup *this, const CA::Render::Object *a2)
{
  malloc_zone_t *malloc_zone;

  CA::Render::BackdropGroup::~BackdropGroup(this, a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  CA::Render::BackdropGroup **v3;
  uint64_t v4;
  CA::Shape *v5;
  CA::Shape *v6;
  CA::Shape *v7;
  CA::Shape *v8;
  CA::Shape *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;

  *(_QWORD *)this = off_1E1596D40;
  if ((*((_BYTE *)this + 13) & 1) != 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::BackdropGroup::_list_lock);
    v3 = (CA::Render::BackdropGroup **)CA::Render::BackdropGroup::_list;
    if (CA::Render::BackdropGroup::_list != (_UNKNOWN *)qword_1EDD0FB98)
    {
      while (*v3 != this)
      {
        if (++v3 == (CA::Render::BackdropGroup **)qword_1EDD0FB98)
        {
          v3 = (CA::Render::BackdropGroup **)qword_1EDD0FB98;
          break;
        }
      }
    }
    *v3 = *(CA::Render::BackdropGroup **)(qword_1EDD0FB98 - 8);
    if (qword_1EDD0FB98 <= (unint64_t)CA::Render::BackdropGroup::_list)
      __assert_rtn("pop_back", "x-small-vector.h", 410, "_end > _begin && \"pop_back on empty container\"");
    qword_1EDD0FB98 -= 8;
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::BackdropGroup::_list_lock);
  }
  v4 = *((_QWORD *)this + 6);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (CA::Shape *)*((_QWORD *)this + 60);
  if (v5)
    CA::Shape::unref(v5);
  v6 = (CA::Shape *)*((_QWORD *)this + 65);
  if (v6)
    CA::Shape::unref(v6);
  v7 = (CA::Shape *)*((_QWORD *)this + 66);
  if (v7)
    CA::Shape::unref(v7);
  v8 = (CA::Shape *)*((_QWORD *)this + 67);
  if (v8)
    CA::Shape::unref(v8);
  v9 = (CA::Shape *)*((_QWORD *)this + 68);
  if (v9)
    CA::Shape::unref(v9);
  v10 = (unsigned int *)*((_QWORD *)this + 70);
  if (v10)
  {
    v11 = v10 + 2;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 16))(v10);
    *((_QWORD *)this + 70) = 0;
  }
  v14 = (void *)*((_QWORD *)this + 8);
  if (v14 != *((void **)this + 10))
    free(v14);
  v15 = (unsigned int *)*((_QWORD *)this + 4);
  if (v15)
  {
    v16 = v15 + 2;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 16))(v15);
  }
  v19 = (unsigned int *)*((_QWORD *)this + 2);
  if (v19)
  {
    v20 = v19 + 2;
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
      (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 16))(v19);
  }
  --dword_1ECDC7C30;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
}

void CA::OGL::BackdropBuffer::~BackdropBuffer(CA::OGL::BackdropBuffer *this)
{
  malloc_zone_t *malloc_zone;

  CA::OGL::BackdropBuffer::~BackdropBuffer(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E1595050;
  v2 = *((_QWORD *)this + 4);
  if (v2)
    CA::OGL::Context::release_surface_async(*((_QWORD *)this + 1), v2);
  v3 = *((_QWORD *)this + 5);
  if (v3)
    CA::OGL::Context::release_surface_async(*((_QWORD *)this + 1), v3);
}

void CA::Render::Context::~Context(CA::Render::Context *this, CA::Render::Object *a2)
{
  malloc_zone_t *malloc_zone;

  CA::Render::Context::~Context(this, a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  CA::Render::Context::ResourceTable *v3;
  CA::Shape *v4;
  CA::Shape *v5;
  const void *v6;
  const void *v7;
  _QWORD *i;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  CA::Render::LayerNode *v16;
  const void *v17;
  void *v18;
  void *v19;
  CA::Render::LayerNode *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  void *v24;
  CA::Render::Object *v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  void *v38;
  void *v39;
  malloc_zone_t *malloc_zone;
  const CA::Render::Object *v41;

  *(_QWORD *)this = off_1E1598E30;
  v3 = (CA::Render::Context *)((char *)this + 136);
  CA::Render::Context::ResourceTable::remove_all((CA::Render::Context *)((char *)this + 136), a2);
  v4 = (CA::Shape *)*((_QWORD *)this + 72);
  if (v4)
    CA::Shape::unref(v4);
  v5 = (CA::Shape *)*((_QWORD *)this + 71);
  if (v5)
    CA::Shape::unref(v5);
  v6 = (const void *)*((_QWORD *)this + 4);
  if (v6)
    CFRelease(v6);
  CGColorSpaceRelease(*((CGColorSpaceRef *)this + 56));
  v7 = (const void *)*((_QWORD *)this + 65);
  if (v7)
    CFRelease(v7);
  for (i = (_QWORD *)*((_QWORD *)this + 41); i; i = (_QWORD *)*i)
  {
    v9 = (unsigned int *)i[2];
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
  }
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 72));
  v13 = (_QWORD *)*((_QWORD *)this + 89);
  if (v13)
  {
    do
    {
      v14 = (_QWORD *)*v13;
      operator delete(v13);
      v13 = v14;
    }
    while (v14);
  }
  v15 = (void *)*((_QWORD *)this + 87);
  *((_QWORD *)this + 87) = 0;
  if (v15)
    operator delete(v15);
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)this + 640);
  v17 = (const void *)*((_QWORD *)this + 66);
  if (v17)
    CFRelease(v17);
  v18 = (void *)*((_QWORD *)this + 61);
  if (v18)
  {
    *((_QWORD *)this + 62) = v18;
    operator delete(v18);
  }
  v19 = (void *)*((_QWORD *)this + 49);
  if (v19)
  {
    *((_QWORD *)this + 50) = v19;
    operator delete(v19);
  }
  v20 = (CA::Render::LayerNode *)*((_QWORD *)this + 48);
  if (v20)
  {
    v21 = (unsigned int *)((char *)v20 + 16);
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
      CA::Render::LayerNode::delete_node(v20, v16);
  }
  v24 = (void *)*((_QWORD *)this + 45);
  if (v24)
  {
    *((_QWORD *)this + 46) = v24;
    operator delete(v24);
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)this + 312);
  v26 = (unsigned int *)*((_QWORD *)this + 35);
  if (v26)
  {
    v27 = v26 + 2;
    do
    {
      v28 = __ldaxr(v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v27));
    if (!v29)
      (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 16))(v26);
  }
  v30 = (unsigned int *)*((_QWORD *)this + 30);
  if (v30)
  {
    v31 = v30 + 2;
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
      (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 16))(v30);
  }
  v34 = (unsigned int *)*((_QWORD *)this + 29);
  if (v34)
  {
    v35 = v34 + 2;
    do
    {
      v36 = __ldaxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
      (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 16))(v34);
  }
  v38 = (void *)*((_QWORD *)this + 21);
  if (v38)
  {
    *((_QWORD *)this + 22) = v38;
    operator delete(v38);
  }
  CA::Render::Context::ResourceTable::remove_all(v3, v25);
  v39 = (void *)*((_QWORD *)this + 17);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, v39);
  --dword_1ECDC7C50;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, v41);
}

void _XDeleteClient(_DWORD *a1, uint64_t a2)
{
  int v3;
  CA::Render::Context *v4;
  CA::Render::Context *v5;
  _QWORD v6[6];

  v6[5] = *MEMORY[0x1E0C80C00];
  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    v3 = -304;
    goto LABEL_7;
  }
  if (a1[6] || a1[7] <= 0x1Fu)
  {
    v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    return;
  }
  v4 = (CA::Render::Context *)CA::Render::Context::context_by_server_port((CA::Render::Context *)a1[3]);
  if (v4)
  {
    v5 = v4;
    CA::Render::Context::destroy(v4);
    if (dealloc_queue(void)::once != -1)
      dispatch_once(&dealloc_queue(void)::once, &__block_literal_global_6130);
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 0x40000000;
    v6[2] = __CASDeleteClient_block_invoke;
    v6[3] = &__block_descriptor_tmp_64;
    v6[4] = v5;
    dispatch_async((dispatch_queue_t)dealloc_queue(void)::queue, v6);
  }
  *(_DWORD *)(a2 + 32) = 0;
}

void CA::Render::Context::destroy(CA::Render::Context *this)
{
  pthread_mutex_t *v2;
  int v3;
  _QWORD *v4;
  unint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t *v13;
  CA::Render **v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  malloc_zone_t *malloc_zone;
  CA::Render **v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  _QWORD *v27;
  _QWORD *v28;
  CA::Render::Context *v29;
  CA::Render **v30;
  CA::Render *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  CA::Render **v35;
  int32x2_t *v36;
  const CA::Bounds *v37;
  const CA::Bounds *v38;
  CA::Shape **v39;
  const CA::Shape *v40;
  CA::Shape *v41;
  CA::Shape *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  unsigned int v55;
  mach_port_name_t v56;
  ipc_space_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  CA::Render::Object *v62;
  uint64_t i;
  unsigned int *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  _DWORD *v68;
  malloc_zone_t *v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t j;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  malloc_zone_t *v77;
  _QWORD *v78;
  mach_port_name_t v79;
  mach_port_name_t v80;
  mach_port_name_t v81;
  mach_port_name_t v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  _QWORD v87[2];

  v87[1] = *MEMORY[0x1E0C80C00];
  v2 = (pthread_mutex_t *)((char *)this + 72);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 72));
  v3 = *((_DWORD *)this + 3);
  if ((v3 & 0x400) != 0)
  {
    pthread_mutex_unlock(v2);
    return;
  }
  *((_DWORD *)this + 3) = v3 | 0x400;
  CA::Render::Context::set_layer_id((uint64_t)this, 0);
  pthread_mutex_unlock(v2);
  CA::Render::Fence::remove_context(this, (CA::Render::Context *)1);
  if (*((_QWORD *)this + 52) || *((_QWORD *)this + 53))
  {
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
    CA::Render::Context::update_backdrop_namespaces_locked((uint64_t)this, 0);
    v4 = (_QWORD *)*((_QWORD *)this + 52);
    if (v4 && (CA::Render::Context *)v4[9] == this)
    {
      CA::Render::Context::set_visible_locked(this, 0);
      v4[9] = 0;
      v6 = (unsigned int *)v4[4];
      if (v6)
      {
        v7 = v6 + 2;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
          (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
        v4[4] = 0;
      }
      *((_QWORD *)this + 52) = 0;
      v5 = v4[10];
      if (v5)
      {
        v10 = (unsigned int *)(v5 + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 + 1, v10));
        if (!v11)
        {
          v5 = 0;
          do
            v86 = __ldaxr(v10);
          while (__stlxr(v86 - 1, v10));
        }
        *(_QWORD *)(v4[10] + 424) = x_list_remove(*(_QWORD **)(v4[10] + 424), (uint64_t)v4);
        v4[10] = 0;
      }
      do
        v12 = __ldaxr((unsigned int *)&CA::Render::LayerHost::_seed);
      while (__stlxr(v12 + 1, (unsigned int *)&CA::Render::LayerHost::_seed));
    }
    else
    {
      v5 = 0;
    }
    v13 = (uint64_t *)*((_QWORD *)this + 53);
    if (v13)
    {
      v14 = 0;
      do
      {
        v15 = *v13;
        *(_QWORD *)(v15 + 80) = 0;
        v16 = *(_QWORD *)(v15 + 72);
        if (v16)
        {
          CA::Render::Context::set_visible_locked(*(CA::Render::Context **)(v15 + 72), 0);
          *(_QWORD *)(v16 + 416) = 0;
          v17 = (unsigned int *)(v16 + 8);
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 + 1, v17));
          if (!v18)
          {
            do
            {
              v16 = 0;
              v26 = __ldaxr(v17);
            }
            while (__stlxr(v26 - 1, v17));
          }
          malloc_zone = (malloc_zone_t *)get_malloc_zone();
          v20 = (CA::Render **)malloc_type_zone_malloc(malloc_zone, 0x10uLL, 0x8BB15036uLL);
          *v20 = (CA::Render *)v16;
          v20[1] = (CA::Render *)v14;
          *(_QWORD *)(v15 + 72) = 0;
          v21 = *(unsigned int **)(v15 + 32);
          if (v21)
          {
            v22 = v21 + 2;
            do
            {
              v23 = __ldaxr(v22);
              v24 = v23 - 1;
            }
            while (__stlxr(v24, v22));
            if (!v24)
              (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 16))(v21);
            *(_QWORD *)(v15 + 32) = 0;
          }
          do
            v25 = __ldaxr((unsigned int *)&CA::Render::LayerHost::_seed);
          while (__stlxr(v25 + 1, (unsigned int *)&CA::Render::LayerHost::_seed));
          v14 = v20;
        }
        v13 = (uint64_t *)v13[1];
      }
      while (v13);
      v27 = (_QWORD *)*((_QWORD *)this + 53);
      if (v27)
      {
        do
        {
          v28 = (_QWORD *)v27[1];
          free(v27);
          v27 = v28;
        }
        while (v28);
      }
      *((_QWORD *)this + 53) = 0;
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
      if (v14)
      {
        v30 = v14;
        do
        {
          CA::Render::invalidate_context(*v30, v29);
          v31 = *v30;
          v32 = (unsigned int *)((char *)*v30 + 8);
          do
          {
            v33 = __ldaxr(v32);
            v34 = v33 - 1;
          }
          while (__stlxr(v34, v32));
          if (!v34)
            (*(void (**)(CA::Render *))(*(_QWORD *)v31 + 16))(v31);
          v30 = (CA::Render **)v30[1];
        }
        while (v30);
        do
        {
          v35 = (CA::Render **)v14[1];
          free(v14);
          v14 = v35;
        }
        while (v35);
      }
      if (!v5)
        goto LABEL_61;
    }
    else
    {
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
      if (!v5)
        goto LABEL_61;
    }
    pthread_mutex_lock((pthread_mutex_t *)(v5 + 72));
    v36 = (int32x2_t *)CA::Render::Context::root_layer_handle((CA::Render::Context *)v5);
    if (v36)
    {
      *(_QWORD *)&v36[12] |= 8uLL;
      CA::Render::Context::invalidate((CA::Render::Context *)v5, v36 + 14, v38);
    }
    v39 = (CA::Shape **)CA::Render::Context::copy_dirty_shape(this, v37);
    if (v39)
    {
      v41 = (CA::Shape *)v39;
      CA::Render::Context::invalidate((CA::Render::Context *)v5, v39, v40);
      CA::Shape::unref(v41);
      pthread_mutex_lock(v2);
      v42 = (CA::Shape *)*((_QWORD *)this + 72);
      if (v42)
        CA::Shape::unref(v42);
      *((_QWORD *)this + 72) = 1;
      pthread_mutex_unlock(v2);
    }
    pthread_mutex_unlock((pthread_mutex_t *)(v5 + 72));
    CA::Render::Context::mark_changed(v5, 0, 0, 0, 0);
    v43 = (unsigned int *)(v5 + 8);
    do
    {
      v44 = __ldaxr(v43);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, v43));
    if (!v45)
      (*(void (**)(unint64_t))(*(_QWORD *)v5 + 16))(v5);
  }
LABEL_61:
  CA::Render::post_notification(2u, (unint64_t)this, 0, 1);
  CA::Render::remove_every_observer(this, v46);
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Context::_context_lock);
  v47 = x_hash_table_remove(CA::Render::Context::_context_table, *((unsigned int *)this + 4));
  v48 = *((_QWORD *)this + 21);
  v49 = (unsigned int *)*((_QWORD *)this + 22);
  v50 = (unint64_t)v49 - v48;
  if (v49 == (unsigned int *)v48)
  {
    v51 = 0;
  }
  else
  {
    if (v50 > 0x1000)
    {
      v51 = (char *)malloc_type_malloc((size_t)v49 - v48, 0x761F9D16uLL);
      v48 = *((_QWORD *)this + 21);
      v49 = (unsigned int *)*((_QWORD *)this + 22);
    }
    else
    {
      MEMORY[0x1E0C80A78](v47);
      v51 = (char *)v87 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v51, (size_t)v49 - v48);
    }
    if ((unsigned int *)v48 != v49)
    {
      v52 = 0;
      v53 = (unsigned int *)v48;
      do
      {
        v54 = v52;
        v55 = *v53;
        v53 += 2;
        ++v52;
        *(_QWORD *)&v51[8 * v54] = x_hash_table_remove(CA::Render::Context::_slot_table, v55);
        CA::Render::post_notification(0x3Au, 0, v48, 0);
        v48 = (uint64_t)v53;
      }
      while (v53 != v49);
      goto LABEL_71;
    }
  }
  v52 = 0;
LABEL_71:
  v56 = *((_DWORD *)this + 62);
  v57 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
  if (v56)
  {
    mach_port_mod_refs(*MEMORY[0x1E0C83DA0], v56, 1u, -1);
    mach_port_deallocate(*v57, *((_DWORD *)this + 62));
    x_hash_table_remove(CA::Render::Context::_port_table, *((unsigned int *)this + 62));
    *((_DWORD *)this + 62) = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Context::_context_lock);
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Context::_image_queues_lock);
  v58 = (uint64_t *)*((_QWORD *)this + 45);
  v59 = (uint64_t *)*((_QWORD *)this + 46);
  if (v58 != v59)
  {
    v60 = (uint64_t *)*((_QWORD *)this + 45);
    do
    {
      v61 = *v60++;
      *(_QWORD *)(v61 + 224) = 0;
    }
    while (v60 != v59);
  }
  *((_QWORD *)this + 46) = v58;
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Context::_image_queues_lock);
  pthread_mutex_lock(v2);
  if (v52)
  {
    for (i = 0; i != v52; ++i)
    {
      v64 = *(unsigned int **)&v51[8 * i];
      if (v64)
      {
        v65 = v64 + 2;
        do
        {
          v66 = __ldaxr(v65);
          v67 = v66 - 1;
        }
        while (__stlxr(v67, v65));
        if (!v67)
          (*(void (**)(unsigned int *))(*(_QWORD *)v64 + 16))(v64);
      }
    }
  }
  CA::Render::Context::ResourceTable::remove_all((CA::Render::Context *)((char *)this + 136), v62);
  os_unfair_lock_lock((os_unfair_lock_t)this + 13);
  while (1)
  {
    v68 = (_DWORD *)*((_QWORD *)this + 7);
    if (!v68)
      break;
    *((_QWORD *)this + 7) = *(_QWORD *)v68;
    mach_port_deallocate(*v57, v68[2]);
    v69 = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(v69, v68);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)this + 13);
  os_unfair_lock_lock((os_unfair_lock_t)this + 170);
  if (*((_QWORD *)this + 90))
  {
    v70 = (_QWORD *)*((_QWORD *)this + 89);
    if (v70)
    {
      do
      {
        v71 = (_QWORD *)*v70;
        operator delete(v70);
        v70 = v71;
      }
      while (v71);
    }
    *((_QWORD *)this + 89) = 0;
    v72 = *((_QWORD *)this + 88);
    if (v72)
    {
      for (j = 0; j != v72; ++j)
        *(_QWORD *)(*((_QWORD *)this + 87) + 8 * j) = 0;
    }
    *((_QWORD *)this + 90) = 0;
  }
  while (1)
  {
    v78 = (_QWORD *)*((_QWORD *)this + 86);
    if (!v78)
      break;
    *((_QWORD *)this + 86) = *v78;
    v74 = v78[3];
    if (v74)
      (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
    v75 = v78[1];
    if (v75)
    {
      v76 = std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table(v75);
      MEMORY[0x186DBD990](v76, 0x10A0C408EF24B1CLL);
    }
    v77 = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(v77, v78);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)this + 170);
  v79 = *((_DWORD *)this + 63);
  if (v79)
  {
    mach_port_deallocate(*v57, v79);
    *((_DWORD *)this + 63) = 0;
  }
  v80 = *((_DWORD *)this + 64);
  if (v80)
  {
    mach_port_deallocate(*v57, v80);
    *((_DWORD *)this + 64) = 0;
  }
  v81 = *((_DWORD *)this + 65);
  if (v81)
  {
    mach_port_deallocate(*v57, v81);
    *((_DWORD *)this + 65) = 0;
  }
  v82 = *((_DWORD *)this + 66);
  if (v82)
  {
    mach_port_deallocate(*v57, v82);
    *((_DWORD *)this + 66) = 0;
  }
  pthread_mutex_unlock(v2);
  if (v50 > 0x1000)
    free(v51);
  v83 = (unsigned int *)((char *)this + 8);
  do
  {
    v84 = __ldaxr(v83);
    v85 = v84 - 1;
  }
  while (__stlxr(v85, v83));
  if (!v85)
    (*(void (**)(CA::Render::Context *))(*(_QWORD *)this + 16))(this);
}

uint64_t CA::Render::Context::set_layer_id(uint64_t this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  const double *v5;
  const CA::Bounds *v6;
  uint64_t v7;
  int32x2_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (*(_QWORD *)(this + 272) != a2)
  {
    v3 = this;
    v4 = CA::Render::Context::root_layer_handle((CA::Render::Context *)this);
    if (v4)
    {
      v7 = *(_QWORD *)(v4 + 16);
      if (v7)
      {
        v8 = *(int32x2_t **)(v7 + 144);
        if (v8)
        {
          CA::Render::Context::invalidate((CA::Render::Context *)v3, v8 + 14, v6);
          *(_QWORD *)&v8[12] |= 8uLL;
        }
      }
    }
    if (a2)
    {
      v9 = CA::Render::Context::lookup_object(*(_QWORD *)(v3 + 136), *(_DWORD *)(v3 + 148), a2, 0, 29, 0);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 144);
        if (v10)
          *(_QWORD *)(v10 + 96) |= 2uLL;
      }
    }
    this = *(_QWORD *)(v3 + 280);
    if (this)
    {
      *(_DWORD *)(this + 12) &= ~0x100u;
      CA::Render::Handle::update_container_state(this, v5);
      this = *(_QWORD *)(v3 + 280);
      if (this)
      {
        v11 = (unsigned int *)(this + 8);
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 16))(this);
        *(_QWORD *)(v3 + 280) = 0;
      }
    }
    *(_QWORD *)(v3 + 272) = a2;
  }
  return this;
}

uint64_t CA::Render::Context::lookup_object(uint64_t a1, int a2, uint64_t a3, int a4, int a5, int *a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t result;
  int v11;
  int v12;

  v6 = ((a3 ^ 0x8000000000000000) + ~(a3 << 32)) ^ (((a3 ^ 0x8000000000000000) + ~(a3 << 32)) >> 22);
  v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = (uint64_t *)(a1 + 8 * (((v8 >> 31) ^ v8) & a2));
  do
  {
    v9 = (uint64_t *)*v9;
    if (!v9)
    {
      if (!a6)
        return 0;
      result = 0;
      v12 = 1;
      goto LABEL_23;
    }
  }
  while (v9[1] != (a3 ^ 0x8000000000000000));
  if (a4 && *((_DWORD *)v9 + 6) != a4)
  {
    if (!a6)
      return 0;
    result = 0;
    v12 = 2;
    goto LABEL_23;
  }
  result = v9[2];
  if (!result)
  {
    if (!a6)
      return 0;
    result = 0;
    v12 = 3;
    goto LABEL_23;
  }
  v11 = *(unsigned __int8 *)(result + 12);
  if (v11 != 22)
  {
    if (!a5 || v11 == a5)
      return result;
    if (!a6)
      return 0;
    result = 0;
    v12 = 5;
LABEL_23:
    *a6 = v12;
    return result;
  }
  if (!a5 || a5 == 29)
    return *(_QWORD *)(result + 16);
  if (a6)
  {
    result = 0;
    v12 = 4;
    goto LABEL_23;
  }
  return 0;
}

void CA::Render::Fence::remove_context(CA::Render::Fence *this, CA::Render::Context *a2)
{
  int v2;
  size_t v4;
  uint64_t *v5;
  uint64_t *v6;
  unsigned int *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *i;
  unsigned int **v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  malloc_zone_t *malloc_zone;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *j;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  unsigned int **v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  malloc_zone_t *v39;
  uint64_t v40;
  double v41;
  CA::Render::Fence *v42;
  void **v43;
  _OWORD v44[2];
  uint64_t v45;
  uint64_t v46;

  v2 = (int)a2;
  v46 = *MEMORY[0x1E0C80C00];
  if (CA::Render::Fence::fence_info_once[0] != -1)
    dispatch_once_f(CA::Render::Fence::fence_info_once, 0, (dispatch_function_t)CA::Render::Fence::fence_info_init);
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Fence::_lock);
  v4 = *((unsigned int *)this + 4);
  v5 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((_QWORD *)CA::Render::Fence::fcontexts_by_id, v4);
  if (v5)
  {
    v6 = v5;
    memset(v44, 0, sizeof(v44));
    v45 = 1065353216;
    v7 = *(unsigned int **)(v5[3] + 8);
    v8 = *(_QWORD **)v7;
    v9 = (_QWORD *)*((_QWORD *)v7 + 1);
    if (*(_QWORD **)v7 == v9)
      goto LABEL_9;
    do
    {
      for (i = (_QWORD *)v8[2]; i; i = (_QWORD *)*i)
        std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)v44, i[2], i[2]);
      v8 += 5;
    }
    while (v8 != v9);
    v11 = (unsigned int **)v6[3];
    v7 = v11[1];
    if (v7)
    {
LABEL_9:
      v43 = (void **)v7;
      std::vector<std::unordered_set<unsigned long long>>::__destroy_vector::operator()[abi:nn180100](&v43);
      MEMORY[0x186DBD990](v7, 0x20C40960023A9);
      v11 = (unsigned int **)v6[3];
    }
    v12 = *v11;
    if (*v11)
    {
      v13 = v12 + 2;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
        (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 16))(v12);
      v11 = (unsigned int **)v6[3];
    }
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, v11);
    v17 = (uint64_t *)std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::erase((_QWORD *)CA::Render::Fence::fcontexts_by_id, v6);
    v18 = *(uint64_t **)CA::Render::Fence::transactions;
    v19 = *(uint64_t **)(CA::Render::Fence::transactions + 8);
    while (v18 != v19)
    {
      v20 = *v18;
      v21 = *(_QWORD **)(*v18 + 8);
      v17 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v21, v4);
      if (v17)
      {
        v17 = (uint64_t *)std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::erase(v21, v17);
        if ((v2 & 1) == 0)
          CA::Render::Fence::send_rmfc_msg(*(unsigned int *)(v20 + 16), v4, (uint64_t)v44);
      }
      ++v18;
    }
    CA::Render::Fence::resolve_fences((CA::Render::Fence *)v17);
    std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table((uint64_t)v44);
  }
  if (v2)
  {
    for (j = *(_QWORD **)(CA::Render::Fence::batches_by_port + 16); j; j = (_QWORD *)*j)
    {
      v23 = j[3];
      v24 = *(_QWORD **)(v23 + 32);
      v25 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v24, v4);
      if (v25)
      {
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::erase(v24, v25);
        v23 = j[3];
      }
      v26 = *(_QWORD **)(v23 + 24);
      v27 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v26, v4);
      if (v27)
      {
        v28 = v27;
        if (*(_BYTE *)(v23 + 44))
        {
          kdebug_trace();
          v26 = *(_QWORD **)(j[3] + 24);
        }
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::erase(v26, v28);
      }
    }
    v29 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((_QWORD *)CA::Render::Fence::bcontexts_by_id, v4);
    if (v29)
    {
      v30 = v29;
      v31 = (unsigned int **)v29[3];
      v32 = v31[1];
      if (v32)
      {
        *(_QWORD *)&v44[0] = v31[1];
        std::vector<std::unordered_set<unsigned long long>>::__destroy_vector::operator()[abi:nn180100]((void ***)v44);
        MEMORY[0x186DBD990](v32, 0x20C40960023A9);
        v31 = (unsigned int **)v30[3];
      }
      v33 = (uint64_t)v31[2];
      if (v33)
      {
        v34 = std::__hash_table<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CA::Render::PerModeInfo>>>::~__hash_table(v33);
        MEMORY[0x186DBD990](v34, 0x10A0C408EF24B1CLL);
        v31 = (unsigned int **)v30[3];
      }
      v35 = *v31;
      if (*v31)
      {
        v36 = v35 + 2;
        do
        {
          v37 = __ldaxr(v36);
          v38 = v37 - 1;
        }
        while (__stlxr(v38, v36));
        if (!v38)
          (*(void (**)(unsigned int *))(*(_QWORD *)v35 + 16))(v35);
        v31 = (unsigned int **)v30[3];
      }
      v39 = (malloc_zone_t *)get_malloc_zone();
      malloc_zone_free(v39, v31);
      std::__hash_table<std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::__unordered_map_hasher<CA::Render::Object *,std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::hash<CA::Render::Object *>,std::equal_to<CA::Render::Object *>,true>,std::__unordered_map_equal<CA::Render::Object *,std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::equal_to<CA::Render::Object *>,std::hash<CA::Render::Object *>,true>,std::allocator<std::__hash_value_type<CA::Render::Object *,x_link_struct>>>::erase((_QWORD *)CA::Render::Fence::bcontexts_by_id, v30);
      v40 = mach_absolute_time();
      v41 = CATimeWithHostTime(v40);
      CA::Render::Fence::resolve_batches(v42, v41);
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Fence::_lock);
}

void CA::Render::remove_every_observer(CA::Render *this, void *a2)
{
  _QWORD *v3;
  dispatch_semaphore_t **v4;
  uint64_t i;
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  dispatch_semaphore_t *v13;
  malloc_zone_t *malloc_zone;
  uint64_t v15;
  int64x2_t *v16;
  char *v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::notification_lock);
  if ((CA::Render::initialize_notifications(void)::initialized & 1) == 0)
  {
    v15 = 0;
    v16 = (int64x2_t *)CA::Render::notifications;
    do
    {
      v17 = (char *)&CA::Render::notifications_map_data[v15];
      *(_OWORD *)v17 = 0uLL;
      *((_OWORD *)v17 + 1) = 0uLL;
      *((_DWORD *)v17 + 8) = 1065353216;
      *v16 = vdupq_n_s64((unint64_t)v16);
      ++v16;
      v15 += 5;
    }
    while (v15 != 370);
    CA::Render::initialize_notifications(void)::initialized = 1;
  }
  v4 = 0;
  for (i = 0; i != 74; ++i)
  {
    v6 = &CA::Render::notifications[i];
    v7 = (__int128 *)*((_QWORD *)v6 + 1);
    if (v7 != v6)
    {
      do
      {
        v8 = (__int128 *)*((_QWORD *)v7 + 1);
        if (*((CA::Render **)v7 + 7) == this)
        {
          v9 = *(_QWORD *)v7;
          *(_QWORD *)(v9 + 8) = v8;
          *(_QWORD *)v8 = v9;
          *(_QWORD *)v7 = v7;
          *((_QWORD *)v7 + 1) = v7;
          v10 = *((_QWORD *)v7 + 2);
          v11 = (_QWORD *)*((_QWORD *)v7 + 3);
          *(_QWORD *)(v10 + 8) = v11;
          *v11 = v10;
          *((_QWORD *)v7 + 2) = v7 + 1;
          *((_QWORD *)v7 + 3) = v7 + 1;
          v12 = *((_QWORD *)v7 + 6);
          if (v12)
          {
            v3 = std::__hash_table<std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::__unordered_map_hasher<CA::Render::Object *,std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::hash<CA::Render::Object *>,std::equal_to<CA::Render::Object *>,true>,std::__unordered_map_equal<CA::Render::Object *,std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::equal_to<CA::Render::Object *>,std::hash<CA::Render::Object *>,true>,std::allocator<std::__hash_value_type<CA::Render::Object *,x_link_struct>>>::find<CA::Render::Object *>(&CA::Render::notifications_map_data[5 * (int)i], v12);
            if (v3)
            {
              if ((_QWORD *)v3[4] == v3 + 3)
                std::__hash_table<std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::__unordered_map_hasher<CA::Render::Object *,std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::hash<CA::Render::Object *>,std::equal_to<CA::Render::Object *>,true>,std::__unordered_map_equal<CA::Render::Object *,std::__hash_value_type<CA::Render::Object *,x_link_struct>,std::equal_to<CA::Render::Object *>,std::hash<CA::Render::Object *>,true>,std::allocator<std::__hash_value_type<CA::Render::Object *,x_link_struct>>>::erase(&CA::Render::notifications_map_data[5 * (int)i], v3);
            }
          }
          v3 = (_QWORD *)MEMORY[0x1E0C80A78](v3);
          v18[-2] = v7;
          v18[-1] = v4;
          v4 = (dispatch_semaphore_t **)&v18[-2];
        }
        v7 = v8;
      }
      while (v8 != v6);
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::notification_lock);
  for (; v4; v4 = (dispatch_semaphore_t **)v4[1])
  {
    v13 = *v4;
    dispatch_semaphore_wait((*v4)[8], 0xFFFFFFFFFFFFFFFFLL);
    dispatch_semaphore_signal(v13[8]);
    dispatch_release(v13[8]);
    malloc_zone = (malloc_zone_t *)get_malloc_zone();
    malloc_zone_free(malloc_zone, v13);
  }
}

void CA::Render::Filter::~Filter(CA::Render::Filter *this, const CA::Render::Object *a2)
{
  malloc_zone_t *malloc_zone;

  CA::Render::Filter::~Filter(this, a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = off_1E1598B40;
  v3 = (unsigned int *)*((_QWORD *)this + 5);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  v7 = (unsigned int *)*((_QWORD *)this + 4);
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
  }
  --dword_1ECDC7C6C;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
}

void CA::Render::String::finalize(CA::Render::String *this)
{
  const void *v2;
  malloc_zone_t *malloc_zone;

  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
  (**(void (***)(CA::Render::String *))this)(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CA::Render::String::~String(CA::Render::String *this, const CA::Render::Object *a2)
{
  --dword_1ECDC7CEC;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
}

{
  malloc_zone_t *malloc_zone;

  --dword_1ECDC7CEC;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CA::Render::Context::ResourceTable::remove_all(CA::Render::Context::ResourceTable *this, CA::Render::Object *a2)
{
  unint64_t v3;
  unint64_t i;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  v3 = *((unsigned int *)this + 2);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD **)(*(_QWORD *)this + 8 * i);
      v6 = v5;
      if (v5)
      {
        do
        {
          CA::Render::Context::ResourceTable::release_value((CA::Render::Context::ResourceTable *)v6[2], a2);
          v6 = (_QWORD *)*v6;
        }
        while (v6);
        do
        {
          v7 = (_QWORD *)*v5;
          free(v5);
          v5 = v7;
        }
        while (v7);
        *(_QWORD *)(*(_QWORD *)this + 8 * i) = 0;
        v3 = *((unsigned int *)this + 2);
      }
    }
  }
  *((_QWORD *)this + 3) = 0;
}

void CA::Render::GroupAnimation::~GroupAnimation(CA::Render::GroupAnimation *this, const CA::Render::Object *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E1597380;
  v3 = (unsigned int *)*((_QWORD *)this + 12);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  --dword_1ECDC7C7C;
  CA::Render::Animation::~Animation(this, a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = off_1E1597380;
  v3 = (unsigned int *)*((_QWORD *)this + 12);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  --dword_1ECDC7C7C;
  CA::Render::Animation::~Animation(this, a2);
}

void CA::Render::Context::delete_object(CA::Render::Context *this, CA::Render::Object *a2, int a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  malloc_zone_t *malloc_zone;

  v4 = (((unint64_t)a2 ^ 0x8000000000000000) + ~((_QWORD)a2 << 32)) ^ ((((unint64_t)a2 ^ 0x8000000000000000)
                                                                               + ~((_QWORD)a2 << 32)) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = (_QWORD *)(*((_QWORD *)this + 17) + 8
                                         * (*((_DWORD *)this + 37) & ((v6 >> 31) ^ v6)));
  while (1)
  {
    v8 = v7;
    v7 = (_QWORD *)*v7;
    if (!v7)
      break;
    if (v7[1] == ((unint64_t)a2 ^ 0x8000000000000000))
    {
      v9 = *((_DWORD *)v7 + 6);
      if (v9)
        v10 = v9 == a3;
      else
        v10 = 1;
      if (v10)
      {
        *v8 = *v7;
        CA::Render::Context::ResourceTable::release_value((CA::Render::Context::ResourceTable *)v7[2], a2);
        malloc_zone = (malloc_zone_t *)get_malloc_zone();
        malloc_zone_free(malloc_zone, v7);
        --*((_QWORD *)this + 20);
      }
      return;
    }
  }
}

void CA::Render::Context::ResourceTable::release_value(CA::Render::Context::ResourceTable *this, CA::Render::Object *a2)
{
  int v3;
  _QWORD *i;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  if (this)
  {
    v3 = *((unsigned __int8 *)this + 12);
    if (v3 == 24)
    {
      os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::ImageProvider::_provider_lock);
      *((_QWORD *)this + 21) = 0;
      os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::ImageProvider::_provider_lock);
    }
    else if (v3 == 22)
    {
      if (*((_QWORD *)this + 3))
      {
        os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::Handle::_handle_lock);
        *((_QWORD *)this + 3) = 0;
        os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::Handle::_handle_lock);
      }
      for (i = (_QWORD *)*((_QWORD *)this + 6); i; i = (_QWORD *)i[1])
      {
        v5 = *i;
        if (*(_BYTE *)(*i + 12) == 55)
        {
          v6 = *(unsigned int **)(v5 + 128);
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
              (*(void (**)(unsigned int *, CA::Render::Object *))(*(_QWORD *)v6 + 16))(v6, a2);
            *(_QWORD *)(v5 + 128) = 0;
          }
        }
      }
      v10 = (unsigned int *)*((_QWORD *)this + 5);
      if (v10)
      {
        *((_QWORD *)v10 + 5) = 0;
        v11 = v10 + 4;
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
          CA::Render::LayerNode::delete_node((CA::Render::LayerNode *)v10, a2);
        *((_QWORD *)this + 5) = 0;
      }
      v14 = *((_QWORD *)this + 2);
      if (v14)
      {
        v15 = *(uint64_t **)(v14 + 128);
        if (v15)
        {
          v16 = *v15;
          if (*v15)
          {
            if (*(_BYTE *)(v16 + 12) == 30 && *(CA::Render::Context::ResourceTable **)(v16 + 24) == this)
              CA::Render::LayerHost::invalidate((CA::Render::LayerHost *)v16);
          }
        }
      }
      if ((*((_BYTE *)this + 13) & 0x20) != 0)
      {
        CA::Render::FlattenManager::flattened_cache_remove_surface((CA::Render::FlattenManager *)*((unsigned int *)this
                                                                                                 + 18));
        *((_DWORD *)this + 3) &= ~0x2000u;
      }
      CA::Render::Handle::set_current_layer((uint64_t)this, 0);
      *((_QWORD *)this + 7) = 0;
      *((_QWORD *)this + 8) = 0;
    }
    v17 = (unsigned int *)((char *)this + 8);
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
      (*(void (**)(CA::Render::Context::ResourceTable *))(*(_QWORD *)this + 16))(this);
  }
}

void CA::Render::Handle::~Handle(CA::Render::Handle *this)
{
  malloc_zone_t *malloc_zone;

  CA::Render::Handle::~Handle(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  CA::Render::LayerNode *v2;
  CA::Render::Animation *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  *(_QWORD *)this = off_1E1598BB8;
  CA::Render::Handle::set_current_layer((uint64_t)this, 0);
  v4 = *((_QWORD *)this + 6);
  if (v4)
  {
    do
    {
      CA::Render::invalidate_animation(this, *(CA::Render::Handle **)v4, v3);
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4);
    v5 = (_QWORD *)*((_QWORD *)this + 6);
    if (v5)
    {
      do
      {
        v6 = (_QWORD *)v5[1];
        free(v5);
        v5 = v6;
      }
      while (v6);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 5);
  if (v7)
  {
    *((_QWORD *)v7 + 5) = 0;
    v8 = v7 + 4;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      CA::Render::LayerNode::delete_node((CA::Render::LayerNode *)v7, v2);
  }
  v11 = (unsigned int *)*((_QWORD *)this + 2);
  if (v11)
  {
    v12 = v11 + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 16))(v11);
  }
  --dword_1ECDC7C80;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, v2);
}

unsigned int *CA::Render::invalidate_animation(CA::Render *this, CA::Render::Handle *a2, CA::Render::Animation *a3)
{
  unsigned int *result;
  int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  result = (unsigned int *)(*(uint64_t (**)(CA::Render::Handle *, CA::Render *, CA::Render::Animation *))(*(_QWORD *)a2 + 152))(a2, this, a3);
  v5 = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v5 | 0x20000;
  if (v5 == 55)
  {
    result = (unsigned int *)*((_QWORD *)a2 + 16);
    if (result)
    {
      v6 = result + 2;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
      *((_QWORD *)a2 + 16) = 0;
    }
  }
  v9 = (unsigned int *)((char *)a2 + 8);
  do
  {
    v10 = __ldaxr(v9);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v9));
  if (!v11)
    return (unsigned int *)(*(uint64_t (**)(CA::Render::Handle *))(*(_QWORD *)a2 + 16))(a2);
  return result;
}

uint64_t CA::Render::Animation::was_removed(uint64_t this, CA::Render::Handle *a2)
{
  int v2;

  v2 = *(_DWORD *)(this + 12);
  if ((v2 & 0x1000) == 0)
  {
    if ((v2 & 0x2000) == 0)
      return this;
LABEL_5:
    *((_QWORD *)a2 + 12) |= 0x10uLL;
    return this;
  }
  *((_QWORD *)a2 + 12) |= 8uLL;
  if ((*(_DWORD *)(this + 12) & 0x2000) != 0)
    goto LABEL_5;
  return this;
}

void CA::Render::LayerHost::~LayerHost(unsigned int **this)
{
  malloc_zone_t *malloc_zone;

  CA::Render::LayerHost::~LayerHost(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  const CA::Render::Object *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  *this = (unsigned int *)off_1E1599698;
  CA::Render::LayerHost::invalidate((CA::Render::LayerHost *)this);
  v3 = this[5];
  if (v3)
  {
    this[6] = v3;
    operator delete(v3);
  }
  v4 = this[4];
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
  }
  v8 = this[3];
  if (v8)
  {
    v9 = v8 + 2;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 16))(v8);
  }
  --dword_1ECDC7CA0;
  *this = (unsigned int *)off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate((CA::Render::Encoder::ObjectCache *)this, v2);
}

void CA::Render::LayerHost::invalidate(CA::Render::LayerHost *this)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int v5;
  CA::Render *v6;
  uint64_t v7;
  CA::Render::Context *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
  v2 = (unsigned int *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)v2 + 52) = 0;
    *((_QWORD *)this + 9) = 0;
    do
      v3 = __ldaxr((unsigned int *)&CA::Render::LayerHost::_seed);
    while (__stlxr(v3 + 1, (unsigned int *)&CA::Render::LayerHost::_seed));
    v4 = v2 + 2;
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    v6 = (CA::Render *)v2;
    if (!v5)
    {
      v6 = 0;
      do
        v12 = __ldaxr(v4);
      while (__stlxr(v12 - 1, v4));
    }
    CA::Render::Context::set_visible_locked((CA::Render::Context *)v2, 0);
    CA::Render::Context::update_backdrop_namespaces_locked((uint64_t)v2, 0);
  }
  else
  {
    v6 = 0;
  }
  v7 = *((_QWORD *)this + 10);
  if (v7)
  {
    *(_QWORD *)(v7 + 424) = x_list_remove(*(_QWORD **)(v7 + 424), (uint64_t)this);
    *((_QWORD *)this + 10) = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::LayerHost::_lock);
  if (v6)
  {
    CA::Render::invalidate_context(v6, v8);
    v9 = (unsigned int *)((char *)v6 + 8);
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      (*(void (**)(CA::Render *))(*(_QWORD *)v6 + 16))(v6);
  }
}

void CA::Render::KeyframeAnimation::~KeyframeAnimation(CA::Render::KeyframeAnimation *this, void **a2)
{
  malloc_zone_t *malloc_zone;

  CA::Render::KeyframeAnimation::~KeyframeAnimation(this, a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;

  *(_QWORD *)this = off_1E1597CE8;
  v3 = (unsigned int *)*((_QWORD *)this + 21);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  v7 = (unsigned int *)*((_QWORD *)this + 20);
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
  }
  v11 = (unsigned int *)*((_QWORD *)this + 19);
  if (v11)
  {
    v12 = v11 + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 16))(v11);
  }
  v15 = (unsigned int *)*((_QWORD *)this + 17);
  if (v15)
  {
    v16 = v15 + 2;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 16))(v15);
  }
  v19 = (unsigned int *)*((_QWORD *)this + 16);
  if (v19)
  {
    v20 = v19 + 2;
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
      (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 16))(v19);
  }
  v23 = (unsigned int *)*((_QWORD *)this + 15);
  if (v23)
  {
    v24 = v23 + 2;
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
      (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 16))(v23);
  }
  v27 = (unsigned int *)*((_QWORD *)this + 14);
  if (v27)
  {
    v28 = v27 + 2;
    do
    {
      v29 = __ldaxr(v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v28));
    if (!v30)
      (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 16))(v27);
  }
  --dword_1ECDC7C94;
  CA::Render::PropertyAnimation::~PropertyAnimation((CA::Render **)this, a2);
}

void CA::Render::SpringAnimation::~SpringAnimation(CA::Render::SpringAnimation *this, void **a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  malloc_zone_t *malloc_zone;

  --dword_1ECDC7CE8;
  *(_QWORD *)this = off_1E15974E8;
  v3 = (unsigned int *)*((_QWORD *)this + 16);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  v7 = (unsigned int *)*((_QWORD *)this + 15);
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
  }
  v11 = (unsigned int *)*((_QWORD *)this + 14);
  if (v11)
  {
    v12 = v11 + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 16))(v11);
  }
  CA::Render::PropertyAnimation::~PropertyAnimation((CA::Render **)this, a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  --dword_1ECDC7CE8;
  *(_QWORD *)this = off_1E15974E8;
  v3 = (unsigned int *)*((_QWORD *)this + 16);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  v7 = (unsigned int *)*((_QWORD *)this + 15);
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
  }
  v11 = (unsigned int *)*((_QWORD *)this + 14);
  if (v11)
  {
    v12 = v11 + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 16))(v11);
  }
  CA::Render::PropertyAnimation::~PropertyAnimation((CA::Render **)this, a2);
}

void CA::Render::BasicAnimation::~BasicAnimation(CA::Render::BasicAnimation *this, void **a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  malloc_zone_t *malloc_zone;

  --dword_1ECDC7C3C;
  *(_QWORD *)this = off_1E15974E8;
  v3 = (unsigned int *)*((_QWORD *)this + 16);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  v7 = (unsigned int *)*((_QWORD *)this + 15);
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
  }
  v11 = (unsigned int *)*((_QWORD *)this + 14);
  if (v11)
  {
    v12 = v11 + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 16))(v11);
  }
  CA::Render::PropertyAnimation::~PropertyAnimation((CA::Render **)this, a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  --dword_1ECDC7C3C;
  *(_QWORD *)this = off_1E15974E8;
  v3 = (unsigned int *)*((_QWORD *)this + 16);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  v7 = (unsigned int *)*((_QWORD *)this + 15);
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
  }
  v11 = (unsigned int *)*((_QWORD *)this + 14);
  if (v11)
  {
    v12 = v11 + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 16))(v11);
  }
  CA::Render::PropertyAnimation::~PropertyAnimation((CA::Render **)this, a2);
}

void CA::Render::Animation::~Animation(CA::Render::Animation *this, const CA::Render::Object *a2)
{
  const void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  *(_QWORD *)this = off_1E15995E0;
  v3 = (const void *)*((_QWORD *)this + 7);
  if (v3)
    CFRelease(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 6);
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
  }
  v8 = (unsigned int *)*((_QWORD *)this + 5);
  if (v8)
  {
    v9 = v8 + 2;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 16))(v8);
  }
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
}

{
  malloc_zone_t *malloc_zone;

  CA::Render::Animation::~Animation(this, a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CA::Render::PropertyAnimation::~PropertyAnimation(CA::Render **this, void **a2)
{
  const CA::Render::Object *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *this = (CA::Render *)off_1E1597DB0;
  CA::Render::key_path_free(this[12], a2);
  v4 = (unsigned int *)this[13];
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
  }
  CA::Render::Animation::~Animation((CA::Render::Animation *)this, v3);
}

{
  malloc_zone_t *malloc_zone;

  CA::Render::PropertyAnimation::~PropertyAnimation(this, a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CA::Render::Interpolator::~Interpolator(CA::Render::Interpolator *this, const CA::Render::Object *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E1596A78;
  v3 = (unsigned int *)*((_QWORD *)this + 5);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  v7 = (unsigned int *)*((_QWORD *)this + 4);
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
  }
  v11 = (unsigned int *)*((_QWORD *)this + 3);
  if (v11)
  {
    v12 = v11 + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 16))(v11);
  }
  v15 = (unsigned int *)*((_QWORD *)this + 2);
  if (v15)
  {
    v16 = v15 + 2;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 16))(v15);
  }
  --dword_1ECDC7C90;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;

  *(_QWORD *)this = off_1E1596A78;
  v3 = (unsigned int *)*((_QWORD *)this + 5);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  v7 = (unsigned int *)*((_QWORD *)this + 4);
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
  }
  v11 = (unsigned int *)*((_QWORD *)this + 3);
  if (v11)
  {
    v12 = v11 + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 16))(v11);
  }
  v15 = (unsigned int *)*((_QWORD *)this + 2);
  if (v15)
  {
    v16 = v15 + 2;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 16))(v15);
  }
  --dword_1ECDC7C90;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, a2);
}

void CA::Render::TransitionAnimation::~TransitionAnimation(CA::Render::TransitionAnimation *this, const CA::Render::Object *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E1598180;
  v3 = (unsigned int *)*((_QWORD *)this + 16);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  v7 = (unsigned int *)*((_QWORD *)this + 15);
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
  }
  v11 = (unsigned int *)*((_QWORD *)this + 14);
  if (v11)
  {
    v12 = v11 + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 16))(v11);
  }
  --dword_1ECDC7D04;
  CA::Render::Animation::~Animation(this, a2);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  *(_QWORD *)this = off_1E1598180;
  v3 = (unsigned int *)*((_QWORD *)this + 16);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  v7 = (unsigned int *)*((_QWORD *)this + 15);
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
  }
  v11 = (unsigned int *)*((_QWORD *)this + 14);
  if (v11)
  {
    v12 = v11 + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 16))(v11);
  }
  --dword_1ECDC7D04;
  CA::Render::Animation::~Animation(this, a2);
}

void CA::Render::AsynchronousState::~AsynchronousState(CA::Render::AsynchronousState *this)
{
  malloc_zone_t *malloc_zone;

  CA::Render::AsynchronousState::~AsynchronousState(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  const CA::Render::Object *v2;
  void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  *(_QWORD *)this = off_1E1597BB8;
  CA::Render::AsynchronousState::set_item((uint64_t)this, 0);
  v3 = (void *)*((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 6) = v3;
    operator delete(v3);
  }
  v4 = (unsigned int *)*((_QWORD *)this + 4);
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
  }
  v8 = (unsigned int *)*((_QWORD *)this + 3);
  if (v8)
  {
    v9 = v8 + 2;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
  }
  --dword_1ECDC7CB4;
  *(_QWORD *)this = off_1E1598C30;
  if ((*((_DWORD *)this + 3) & 0x80000000) != 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, v2);
}

void CA::Render::FlattenManager::flattened_cache_remove_surface(CA::Render::FlattenManager *this)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  CA::Shape *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  malloc_zone_t *malloc_zone;
  NSObject *v10;
  IOSurfaceID ID;
  uint64_t v12;
  uint8_t buf[4];
  unsigned int v14;
  __int16 v15;
  IOSurfaceID v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)this)
  {
    v1 = this;
    os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::flattened_lock);
    if (CA::Render::flattened_cache)
    {
      if (*(_QWORD *)(CA::Render::flattened_cache + 24))
      {
        v2 = x_hash_table_remove(CA::Render::flattened_cache, v1);
        if (v2)
        {
          v3 = v2;
          if ((_BYTE)xmmword_1ECDC6AF0)
          {
            if (x_log_hook_p())
            {
              IOSurfaceGetID(*(IOSurfaceRef *)v3);
              x_log_();
            }
            else
            {
              v10 = x_log_category_flatten;
              if (os_log_type_enabled((os_log_t)x_log_category_flatten, OS_LOG_TYPE_DEFAULT))
              {
                ID = IOSurfaceGetID(*(IOSurfaceRef *)v3);
                v12 = *(_QWORD *)(CA::Render::flattened_cache + 24);
                *(_DWORD *)buf = 67109632;
                v14 = v1;
                v15 = 1024;
                v16 = ID;
                v17 = 2048;
                v18 = v12;
                _os_log_impl(&dword_184457000, v10, OS_LOG_TYPE_DEFAULT, "[%d] removed surface <%d> from cache <size: %zu>", buf, 0x18u);
              }
            }
          }
          CFRelease(*(CFTypeRef *)v3);
          v4 = *(CA::Shape **)(v3 + 40);
          if (v4)
            CA::Shape::unref(v4);
          v5 = *(unsigned int **)(v3 + 56);
          if (v5)
          {
            v6 = v5 + 2;
            do
            {
              v7 = __ldaxr(v6);
              v8 = v7 - 1;
            }
            while (__stlxr(v8, v6));
            if (!v8)
              (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
          }
          malloc_zone = (malloc_zone_t *)get_malloc_zone();
          malloc_zone_free(malloc_zone, (void *)v3);
        }
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::flattened_lock);
  }
}

void CA::Render::MatchMoveAnimation::~MatchMoveAnimation(CA::Render::MatchMoveAnimation *this, void **a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  const CA::Render::Object *v7;
  malloc_zone_t *malloc_zone;

  *(_QWORD *)this = off_1E1598098;
  v3 = (unsigned int *)*((_QWORD *)this + 17);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  --dword_1ECDC7CA4;
  *(_QWORD *)this = off_1E1597430;
  CA::Render::key_path_free(*((CA::Render **)this + 15), a2);
  CA::Render::Animation::~Animation(this, v7);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  const CA::Render::Object *v7;

  *(_QWORD *)this = off_1E1598098;
  v3 = (unsigned int *)*((_QWORD *)this + 17);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  --dword_1ECDC7CA4;
  *(_QWORD *)this = off_1E1597430;
  CA::Render::key_path_free(*((CA::Render **)this + 15), a2);
  CA::Render::Animation::~Animation(this, v7);
}

uint64_t CA::Render::MatchAnimation::was_removed(CA::Render::MatchAnimation *this, CA::Render::Handle *a2)
{
  uint64_t result;
  int v5;

  result = *((_QWORD *)this + 16);
  if (result)
  {
    CA::Render::Handle::remove_dependence(result);
    result = *((_QWORD *)this + 16);
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    *((_QWORD *)this + 16) = 0;
  }
  v5 = *((_DWORD *)this + 3);
  if ((v5 & 0x1000) != 0)
  {
    *((_QWORD *)a2 + 12) |= 8uLL;
    v5 = *((_DWORD *)this + 3);
  }
  if ((v5 & 0x2000) != 0)
    *((_QWORD *)a2 + 12) |= 0x10uLL;
  return result;
}

void CA::Render::PortalState::~PortalState(CA::Render::PortalState *this)
{
  malloc_zone_t *malloc_zone;

  CA::Render::PortalState::~PortalState(this);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

{
  CA::Render::PortalState *v2;
  CA::Render::PortalState *v3;
  uint64_t *v4;
  const CA::Render::Object *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;

  *(_QWORD *)this = off_1E1596770;
  os_unfair_lock_lock((os_unfair_lock_t)&CA::Render::PortalState::_list_lock);
  v2 = (CA::Render::PortalState *)CA::Render::PortalState::_list;
  if (CA::Render::PortalState::_list)
  {
    if ((CA::Render::PortalState *)CA::Render::PortalState::_list == this)
    {
      v4 = &CA::Render::PortalState::_list;
LABEL_7:
      *v4 = *((_QWORD *)this + 2);
    }
    else
    {
      while (1)
      {
        v3 = v2;
        v2 = (CA::Render::PortalState *)*((_QWORD *)v2 + 2);
        if (!v2)
          break;
        if (v2 == this)
        {
          v4 = (uint64_t *)((char *)v3 + 16);
          goto LABEL_7;
        }
      }
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&CA::Render::PortalState::_list_lock);
  v6 = *((_QWORD *)this + 6);
  if (v6)
  {
    CA::Render::Handle::remove_dependence(v6);
    v7 = *((_QWORD *)this + 6);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  }
  v8 = *((_DWORD *)this + 3);
  if ((v8 & 0x200) != 0)
  {
    os_unfair_lock_lock(&CA::Render::_cross_display_sources_lock);
    v9 = CA::Render::_cross_display_sources;
    v10 = qword_1EDD109D0;
    if (CA::Render::_cross_display_sources != (_UNKNOWN *)qword_1EDD109D0)
    {
      while ((CA::Render::PortalState *)*v9 != this)
      {
        v9 += 20;
        if (v9 == (_QWORD *)qword_1EDD109D0)
          goto LABEL_23;
      }
    }
    if (v9 == (_QWORD *)qword_1EDD109D0)
    {
LABEL_23:
      os_unfair_lock_unlock(&CA::Render::_cross_display_sources_lock);
    }
    else
    {
      v11 = (unsigned int *)v9[1];
      *(_OWORD *)v9 = *(_OWORD *)(qword_1EDD109D0 - 160);
      v12 = *(_OWORD *)(v10 - 128);
      v13 = *(_OWORD *)(v10 - 112);
      v14 = *(_OWORD *)(v10 - 96);
      *((_OWORD *)v9 + 1) = *(_OWORD *)(v10 - 144);
      *((_OWORD *)v9 + 2) = v12;
      *((_OWORD *)v9 + 3) = v13;
      *((_OWORD *)v9 + 4) = v14;
      v15 = *(_OWORD *)(v10 - 64);
      v16 = *(_OWORD *)(v10 - 48);
      v17 = *(_OWORD *)(v10 - 32);
      *((_OWORD *)v9 + 5) = *(_OWORD *)(v10 - 80);
      *((_OWORD *)v9 + 6) = v15;
      *((_OWORD *)v9 + 7) = v16;
      *((_OWORD *)v9 + 8) = v17;
      *((_OWORD *)v9 + 9) = *(_OWORD *)(v10 - 16);
      if (qword_1EDD109D0 <= (unint64_t)CA::Render::_cross_display_sources)
        __assert_rtn("pop_back", "x-small-vector.h", 410, "_end > _begin && \"pop_back on empty container\"");
      qword_1EDD109D0 -= 160;
      os_unfair_lock_unlock(&CA::Render::_cross_display_sources_lock);
      if (v11)
      {
        v18 = v11 + 2;
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
          (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 16))(v11);
      }
    }
    v8 = *((_DWORD *)this + 3);
  }
  --dword_1ECDC7CCC;
  *(_QWORD *)this = off_1E1598C30;
  if (v8 < 0)
    CA::Render::Encoder::ObjectCache::invalidate(this, v5);
}

uint64_t CA::Render::Handle::remove_dependence(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  CA::Render::Object *v8;
  const double *v9;
  CA::Render::Object *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;
  CA::Render::Object *v15;
  const double *v16;
  CA::Render::Object *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;

  v2 = CA::Render::Context::context_by_id((CA::Render::Context *)*(unsigned int *)(a1 + 8));
  result = *(unsigned int *)(a1 + 12);
  if (*(_DWORD *)(a1 + 8) == (_DWORD)result)
  {
    if (!v2)
      return result;
    v4 = (unsigned int *)(v2 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    v6 = v2;
    if (!v5)
    {
      v6 = 0;
      do
        v7 = __ldaxr(v4);
      while (__stlxr(v7 - 1, v4));
    }
  }
  else
  {
    result = CA::Render::Context::context_by_id((CA::Render::Context *)result);
    v6 = result;
    if (!v2)
    {
      if (!result)
        return result;
      v14 = 1;
      goto LABEL_22;
    }
  }
  pthread_mutex_lock((pthread_mutex_t *)(v2 + 72));
  v8 = CA::Render::Context::lookup_handle((CA::Render::Context *)v2, *(CA::Render::Object **)(a1 + 16), 0, 0, 0);
  if (v8)
  {
    v10 = v8;
    v12 = (_QWORD *)((char *)v8 + 56);
    v11 = *((_QWORD *)v8 + 7);
    if (v11)
    {
      if (v11 == a1)
      {
LABEL_16:
        *v12 = *(_QWORD *)(a1 + 32);
      }
      else
      {
        while (1)
        {
          v13 = v11;
          v11 = *(_QWORD *)(v11 + 32);
          if (!v11)
            break;
          if (v11 == a1)
          {
            v12 = (_QWORD *)(v13 + 32);
            goto LABEL_16;
          }
        }
      }
    }
    CA::Render::Handle::update_container_state((uint64_t)v8, v9);
    *((_QWORD *)v10 + 12) |= 0x1BuLL;
  }
  result = pthread_mutex_unlock((pthread_mutex_t *)(v2 + 72));
  if (!v6)
    goto LABEL_35;
  v14 = 0;
LABEL_22:
  pthread_mutex_lock((pthread_mutex_t *)(v6 + 72));
  v15 = CA::Render::Context::lookup_handle((CA::Render::Context *)v6, *(CA::Render::Object **)(a1 + 24), 0, 0, 0);
  if (v15)
  {
    v17 = v15;
    v19 = (_QWORD *)((char *)v15 + 64);
    v18 = *((_QWORD *)v15 + 8);
    if (v18)
    {
      if (v18 == a1)
      {
LABEL_28:
        *v19 = *(_QWORD *)(a1 + 40);
      }
      else
      {
        while (1)
        {
          v20 = v18;
          v18 = *(_QWORD *)(v18 + 40);
          if (!v18)
            break;
          if (v18 == a1)
          {
            v19 = (_QWORD *)(v20 + 40);
            goto LABEL_28;
          }
        }
      }
    }
    CA::Render::Handle::update_container_state((uint64_t)v15, v16);
    *((_QWORD *)v17 + 12) |= 0x1BuLL;
  }
  result = pthread_mutex_unlock((pthread_mutex_t *)(v6 + 72));
  v21 = (unsigned int *)(v6 + 8);
  do
  {
    v22 = __ldaxr(v21);
    v23 = v22 - 1;
  }
  while (__stlxr(v23, v21));
  if (!v23)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  if ((v14 & 1) == 0)
  {
LABEL_35:
    v24 = (unsigned int *)(v2 + 8);
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  }
  return result;
}

void CA::Render::PortalState::Dependence::~Dependence(CA::Render::PortalState::Dependence *this)
{
  malloc_zone_t *malloc_zone;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

void CA::Render::MatchMoveDependence::~MatchMoveDependence(CA::Render::MatchMoveDependence *this)
{
  malloc_zone_t *malloc_zone;

  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  malloc_zone_free(malloc_zone, this);
}

uint64_t ___ZN2CA3OGL20update_backdrop_lumaERNS0_8RendererE_block_invoke(uint64_t a1, float a2)
{
  uint64_t v3;
  mach_port_t v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  mach_msg_header_t msg;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (a2 >= 0.0)
  {
    v3 = *(_QWORD *)(a1 + 40);
    v4 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 256);
    v10 = *MEMORY[0x1E0C804E8];
    v11 = v3;
    v12 = a2;
    *(_QWORD *)&msg.msgh_bits = 19;
    msg.msgh_voucher_port = 0;
    msg.msgh_id = 40409;
    msg.msgh_remote_port = v4;
    msg.msgh_local_port = 0;
    if (MEMORY[0x1E0C85B60])
      voucher_mach_msg_set(&msg);
    if ((mach_msg(&msg, 17, 0x2Cu, 0, 0, 0, 0) - 268435459) <= 1)
    {
      if ((msg.msgh_bits & 0x1F00) == 0x1100)
        mach_port_deallocate(*MEMORY[0x1E0C83DA0], msg.msgh_local_port);
      mach_msg_destroy(&msg);
    }
  }
  result = *(_QWORD *)(a1 + 32);
  v6 = (unsigned int *)(result + 8);
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (!v8)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

void CA::OGL::Context::release_surface_async(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  malloc_zone_t *malloc_zone;
  _QWORD *v7;

  v4 = (os_unfair_lock_s *)(a1 + 288);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 288));
  v5 = *(_QWORD *)(a1 + 328);
  malloc_zone = (malloc_zone_t *)get_malloc_zone();
  v7 = malloc_type_zone_malloc(malloc_zone, 0x10uLL, 0x8BB15036uLL);
  *v7 = a2;
  v7[1] = v5;
  *(_QWORD *)(a1 + 328) = v7;
  os_unfair_lock_unlock(v4);
}

CA::Render::Fence::BatchWaitLock *CA::Render::Fence::BatchWaitLock::BatchWaitLock(CA::Render::Fence::BatchWaitLock *this)
{
  _opaque_pthread_t *v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  int v6;
  int v7;

  *(_QWORD *)this = 0;
  *((_BYTE *)this + 8) = 0;
  pthread_mutex_lock(&CA::Render::Fence::_bwait_mutex);
  v2 = pthread_self();
  if (pthread_threadid_np(v2, (__uint64_t *)this))
    __assert_rtn("BatchWaitLock", "render-fence.cpp", 1910, "r == noErr");
  v3 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    __assert_rtn("BatchWaitLock", "render-fence.cpp", 1911, "_tid != 0");
  while (1)
  {
    if ((CA::Render::Fence::_bwait_writer_active & 1) != 0)
      goto LABEL_7;
    v4 = CA::Render::Fence::_bwait_readers_by_tid;
    if (CA::Render::Fence::_bwait_writer_pending != 1)
      break;
    if (CA::Render::Fence::_bwait_readers_by_tid
      && std::__hash_table<std::__hash_value_type<unsigned long,unsigned long long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long long>>>::find<unsigned long>((_QWORD *)CA::Render::Fence::_bwait_readers_by_tid, v3))
    {
      goto LABEL_10;
    }
LABEL_7:
    pthread_cond_wait(&CA::Render::Fence::_bwait_cond_reader, &CA::Render::Fence::_bwait_mutex);
    v3 = *(_QWORD *)this;
  }
  if (!CA::Render::Fence::_bwait_readers_by_tid)
  {
    v4 = operator new();
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_DWORD *)(v4 + 32) = 1065353216;
    CA::Render::Fence::_bwait_readers_by_tid = v4;
    v3 = *(_QWORD *)this;
  }
LABEL_10:
  v5 = std::__hash_table<std::__hash_value_type<unsigned long,unsigned long long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long long>>>::find<unsigned long>((_QWORD *)v4, v3);
  if (v5)
  {
    v6 = *((_DWORD *)v5 + 6);
    if (v6 == -1)
      __assert_rtn("BatchWaitLock", "render-fence.cpp", 1923, "ri->second < UINT32_MAX");
    v7 = v6 + 1;
  }
  else
  {
    v7 = 1;
  }
  *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned long long,unsigned int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned int>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((float *)v4, v3, this)+ 6) = v7;
  pthread_mutex_unlock(&CA::Render::Fence::_bwait_mutex);
  return this;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,unsigned int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned int>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(float *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v33;

  v6 = *((_QWORD *)a1 + 1);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = a2;
      if (v6 <= a2)
        v8 = a2 % v6;
    }
    else
    {
      v8 = (v6 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v8);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v11 >= v6)
                v11 %= v6;
            }
            else
            {
              v11 &= v6 - 1;
            }
            if (v11 != v8)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    v8 = 0;
  }
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = a2;
  v10[2] = *a3;
  *((_DWORD *)v10 + 6) = 0;
  v12 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v13 = a1[8];
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    v14 = 1;
    if (v6 >= 3)
      v14 = (v6 & (v6 - 1)) != 0;
    v15 = v14 | (2 * v6);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      prime = (int8x8_t)v16;
    else
      prime = (int8x8_t)v15;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v6 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v6)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v6)
    {
      v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v6 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (*(_QWORD *)&prime <= v24)
        prime = (int8x8_t)v24;
      if (*(_QWORD *)&prime >= v6)
      {
        v6 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v18 = operator new(8 * *(_QWORD *)&prime);
          v19 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v18;
          if (v19)
            operator delete(v19);
          v20 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v20++) = 0;
          while (*(_QWORD *)&prime != v20);
          v21 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v21)
          {
            v22 = v21[1];
            v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(_QWORD *)&prime)
                v22 %= *(_QWORD *)&prime;
            }
            else
            {
              v22 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = a1 + 4;
            v27 = (_QWORD *)*v21;
            if (*v21)
            {
              do
              {
                v28 = v27[1];
                if (v23.u32[0] > 1uLL)
                {
                  if (v28 >= *(_QWORD *)&prime)
                    v28 %= *(_QWORD *)&prime;
                }
                else
                {
                  v28 &= *(_QWORD *)&prime - 1;
                }
                if (v28 != v22)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v21;
                    goto LABEL_55;
                  }
                  *v21 = *v27;
                  *v27 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v28);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v28) = v27;
                  v27 = v21;
                }
                v28 = v22;
LABEL_55:
                v21 = v27;
                v27 = (_QWORD *)*v27;
                v22 = v28;
              }
              while (v27);
            }
          }
          v6 = (unint64_t)prime;
          goto LABEL_59;
        }
        v33 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v33)
          operator delete(v33);
        v6 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= a2)
        v8 = a2 % v6;
      else
        v8 = a2;
    }
    else
    {
      v8 = (v6 - 1) & a2;
    }
  }
  v29 = *(_QWORD **)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
  if (v30)
  {
    *v10 = *v30;
LABEL_72:
    *v30 = v10;
    goto LABEL_73;
  }
  *v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v29[v8] = a1 + 4;
  if (*v10)
  {
    v31 = *(_QWORD *)(*v10 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v31 >= v6)
        v31 %= v6;
    }
    else
    {
      v31 &= v6 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

uint64_t CA::WindowServer::IOMFBServer::set_enabled(CA::WindowServer::IOMFBServer *this, int a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  float *v6;

  v4 = (pthread_mutex_t *)((char *)this + 544);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 544));
  if (a2)
  {
    v5 = *((_QWORD *)this + 12);
    if ((*(_WORD *)(v5 + 656) & 0x1C00) == 0 && (!*(_QWORD *)(v5 + 640) || !*(_BYTE *)(v5 + 28044)))
    {
      CA::WindowServer::IOMFBDisplay::enable_hotplug_info((CA::WindowServer::IOMFBDisplay *)v5);
      v5 = *((_QWORD *)this + 12);
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 224))(v5, 1);
    if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 12) + 216))(*((_QWORD *)this + 12)))
    {
      CA::WindowServer::IOMFBServer::add_vsync_source(this, v6);
      CA::WindowServer::IOMFBServer::add_power_log_timer((CFRunLoopRef *)this);
      if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 12) + 208))(*((_QWORD *)this + 12)))
        CA::WindowServer::IOMFBServer::register_libedr_callbacks(this);
    }
  }
  else
  {
    CA::WindowServer::IOMFBServer::remove_vsync_source(this);
    CA::WindowServer::IOMFBServer::remove_power_log_timer(this);
    CA::WindowServer::IOMFBDisplay::post_power_log(*((CA::WindowServer::IOMFBDisplay **)this + 12));
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 12) + 224))(*((_QWORD *)this + 12), 0);
  }
  return pthread_mutex_unlock(v4);
}

BOOL CA::WindowServer::IOMFBDisplay::is_ready(CA::WindowServer::IOMFBDisplay *this)
{
  uint64_t v2;
  int v3;
  int v4;
  BOOL v5;

  v2 = *((_QWORD *)this + 91);
  v3 = *(unsigned __int8 *)(v2 + 2);
  v4 = *(unsigned __int8 *)(v2 + 3);
  if (v3)
    v5 = 0;
  else
    v5 = v4 == 1;
  if (v5 && !CA::IOMobileFramebuffer::swap_wait((CA::WindowServer::IOMFBDisplay *)((char *)this + 25536)))
  {
    CA::WindowServer::Display::complete_powering_on((os_unfair_lock_s *)this);
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 560));
    CA::WindowServer::IOMFBDisplay::update_framebuffer_locked(this, 0);
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 560));
  }
  return (*(unsigned __int8 *)(*((_QWORD *)this + 91) + 2) | *(unsigned __int8 *)(*((_QWORD *)this + 91) + 3)) != 0;
}

void CA::WindowServer::IOMFBServer::register_libedr_callbacks(CA::WindowServer::IOMFBServer *this)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  pthread_mutex_t *v5;
  uint64_t v6;
  NSObject *v7;
  char v8;
  NSObject *v9;
  _QWORD v10[5];
  uint8_t buf[8];
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  void *v14;
  _QWORD *v15;
  pthread_mutex_t *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 1006) & 4) != 0 && *(_BYTE *)(*((_QWORD *)this + 12) + 28123))
    CA::WindowServer::IOMFBServer::unregister_libedr_callbacks(this);
  if (CA::WindowServer::IOMFBServer::edr_client(this))
  {
    v2 = *((_QWORD *)this + 12);
    if (!*(_BYTE *)(v2 + 28123))
    {
      v3 = *(_DWORD *)(CA::WindowServer::IOMFBServer::edr_client(this) + 152);
      CA::WindowServer::Display::initialize_edr_state((_DWORD *)v2);
      v4 = *(_QWORD *)(v2 + 688);
      if (v4)
        atomic_store(v3, (unsigned int *)(v4 + 4));
      if ((*((_BYTE *)this + 1006) & 4) == 0)
      {
        CA::WindowServer::IOMFBServer::unregister_libedr_callbacks(this);
        v5 = (pthread_mutex_t *)CA::WindowServer::IOMFBServer::edr_client(this);
        v6 = MEMORY[0x1E0C809B0];
        v10[0] = MEMORY[0x1E0C809B0];
        v10[1] = 0x40000000;
        v10[2] = ___ZN2CA12WindowServer11IOMFBServer25register_libedr_callbacksEv_block_invoke;
        v10[3] = &__block_descriptor_tmp_76;
        v10[4] = this;
        if (CADeviceHasBacklight::once != -1)
          dispatch_once(&CADeviceHasBacklight::once, &__block_literal_global_85);
        if (CADeviceHasBacklight::has_backlight == 1 && CA::EDRClient::client(v5))
        {
          pthread_mutex_lock(v5 + 1);
          if (v5[2].__opaque[11])
          {
            pthread_mutex_unlock(v5 + 1);
            CA::EDRClient::unregister_callback(v5);
            pthread_mutex_lock(v5 + 1);
          }
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v9 = x_log_category_utilities;
            if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_184457000, v9, OS_LOG_TYPE_DEBUG, "registering libEDR callback\n", buf, 2u);
            }
          }
          CA::EDRClient::client(v5);
          *(_QWORD *)buf = v6;
          v12 = 0x40000000;
          v13 = ___ZN2CA9EDRClient17register_callbackEU13block_pointerFvbfffE_block_invoke;
          v14 = &unk_1E15AAC08;
          v15 = v10;
          v16 = v5;
          EDRRegisterCallbackBlockOnQueue();
          v5[2].__opaque[11] = 1;
          pthread_mutex_unlock(v5 + 1);
          v8 = 4;
        }
        else
        {
          if (x_log_hook_p())
          {
            x_log_();
          }
          else
          {
            v7 = x_log_category_utilities;
            if (os_log_type_enabled((os_log_t)x_log_category_utilities, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_184457000, v7, OS_LOG_TYPE_DEBUG, "cannot register libEDR callback\n", buf, 2u);
            }
          }
          v8 = 0;
        }
        *((_BYTE *)this + 1006) = *((_BYTE *)this + 1006) & 0xFB | v8;
      }
    }
  }
}

