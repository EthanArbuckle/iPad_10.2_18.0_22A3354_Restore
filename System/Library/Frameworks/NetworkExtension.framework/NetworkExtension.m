void sub_19BD18EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19BD1A524(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_19BD1A534(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  void *v26;
  id v27;
  NSObject *v28;

  if (a2 == 1)
  {
    v27 = objc_begin_catch(a1);
    ne_log_obj();
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_FAULT))
    {
      LODWORD(STACK[0x220]) = 138412290;
      STACK[0x224] = (unint64_t)v27;
      _os_log_fault_impl(&dword_19BD16000, v28, OS_LOG_TYPE_FAULT, "Got an exception while reading the index: %@", (uint8_t *)&STACK[0x220], 0xCu);
    }

    -[NEConfigurationManager errorWithCode:specifics:](a26, 1, 0);
    objc_claimAutoreleasedReturnValue();

    objc_end_catch();
    JUMPOUT(0x19BD198C8);
  }
  _Unwind_Resume(a1);
}

void sub_19BD1ABBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19BD1C5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  _Block_object_dispose(&a51, 8);
  _Block_object_dispose(&a55, 8);
  _Block_object_dispose(&a59, 8);
  _Block_object_dispose(&a63, 8);
  _Unwind_Resume(a1);
}

uint64_t isa_nsuuid(void *a1)
{
  id v1;
  char isKindOfClass;

  v1 = a1;
  objc_opt_class();
  if (v1)
    isKindOfClass = objc_opt_isKindOfClass();
  else
    isKindOfClass = 0;

  return isKindOfClass & 1;
}

uint64_t isa_nsstring(void *a1)
{
  id v1;
  char isKindOfClass;

  v1 = a1;
  objc_opt_class();
  if (v1)
    isKindOfClass = objc_opt_isKindOfClass();
  else
    isKindOfClass = 0;

  return isKindOfClass & 1;
}

uint64_t isa_nsarray(void *a1)
{
  id v1;
  char isKindOfClass;

  v1 = a1;
  objc_opt_class();
  if (v1)
    isKindOfClass = objc_opt_isKindOfClass();
  else
    isKindOfClass = 0;

  return isKindOfClass & 1;
}

uint64_t NEUIDForAuditToken()
{
  return 0;
}

BOOL sub_19BD1CFE8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_19BD1CFFC()
{
  sub_19BEC4EAC();
  sub_19BEC4EB8();
  return sub_19BEC4EC4();
}

uint64_t sub_19BD1D040()
{
  return sub_19BEC4EB8();
}

uint64_t sub_19BD1D068()
{
  sub_19BEC4EAC();
  sub_19BEC4EB8();
  return sub_19BEC4EC4();
}

CFErrorRef sub_19BD1D0B8(__SecKey *a1)
{
  CFDataRef v1;
  CFDataRef v2;
  CFErrorRef v3;
  CFErrorRef *v4;
  _BYTE *v5;
  CFErrorRef v7[2];

  v7[1] = *(CFErrorRef *)MEMORY[0x1E0C80C00];
  v7[0] = 0;
  v1 = SecKeyCopyExternalRepresentation(a1, v7);
  if (v1)
  {
    v2 = v1;
    v3 = (CFErrorRef)sub_19BEC49E4();

  }
  else
  {
    v3 = v7[0];
    if (v7[0])
    {
      type metadata accessor for CFError(0);
      sub_19BD23934();
      swift_allocError();
      *v4 = v3;
    }
    else
    {
      sub_19BD2385C();
      swift_allocError();
      *v5 = 0;
    }
    swift_willThrow();
  }
  return v3;
}

id NEIKEv2CryptoKitHPKE.__allocating_init(payload:aad:psk:pskID:keyRef:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, void *a9)
{
  objc_class *v9;
  id v18;
  id v19;

  v18 = objc_allocWithZone(v9);
  v19 = sub_19BD22958(a1, a2, a3, a4, a5, a6, a7, a8, a9);

  sub_19BD22AD8(a7, a8);
  sub_19BD22AD8(a5, a6);
  sub_19BD22B1C(a3, a4);
  sub_19BD22AD8(a1, a2);
  return v19;
}

id NEIKEv2CryptoKitHPKE.init(payload:aad:psk:pskID:keyRef:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, void *a9)
{
  id v17;

  v17 = sub_19BD22958(a1, a2, a3, a4, a5, a6, a7, a8, a9);

  sub_19BD22AD8(a7, a8);
  sub_19BD22AD8(a5, a6);
  sub_19BD22B1C(a3, a4);
  sub_19BD22AD8(a1, a2);
  return v17;
}

id NEIKEv2CryptoKitHPKE.__allocating_init(payload:aad:psk:pskID:keyData:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10)
{
  objc_class *v10;
  id v18;
  id v19;

  v18 = objc_allocWithZone(v10);
  v19 = sub_19BD22B30(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  sub_19BD22AD8(a9, a10);
  sub_19BD22AD8(a7, a8);
  sub_19BD22AD8(a5, a6);
  sub_19BD22B1C(a3, a4);
  sub_19BD22AD8(a1, a2);
  return v19;
}

id NEIKEv2CryptoKitHPKE.init(payload:aad:psk:pskID:keyData:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10)
{
  id v17;

  v17 = sub_19BD22B30(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  sub_19BD22AD8(a9, a10);
  sub_19BD22AD8(a7, a8);
  sub_19BD22AD8(a5, a6);
  sub_19BD22B1C(a3, a4);
  sub_19BD22AD8(a1, a2);
  return v17;
}

void sub_19BD1D770(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  void *v24;
  uint64_t v25;
  CFErrorRef v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  CFErrorRef v54;
  unint64_t v55;
  uint64_t v56;

  v40 = a1;
  v3 = sub_19BEC4B70();
  v36 = *(_QWORD *)(v3 - 8);
  v37 = v3;
  ((void (*)(void))MEMORY[0x1E0C80A78])();
  v39 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_19BEC4DF8();
  v51 = *(_QWORD *)(v5 - 8);
  v52 = v5;
  ((void (*)(void))MEMORY[0x1E0C80A78])();
  v50 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_19BEC4BE8();
  v45 = *(_QWORD *)(v47 - 8);
  ((void (*)(void))MEMORY[0x1E0C80A78])();
  v46 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_19BEC4BD0();
  v42 = *(_QWORD *)(v8 - 8);
  v43 = v8;
  ((void (*)(void))MEMORY[0x1E0C80A78])();
  v44 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_19BEC4BDC();
  v10 = *(_QWORD *)(v41 - 8);
  ((void (*)(void))MEMORY[0x1E0C80A78])();
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19BEC4BC4();
  ((void (*)(void))MEMORY[0x1E0C80A78])();
  v48 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_19BEC4B04();
  v56 = *(_QWORD *)(v49 - 8);
  v14 = ((uint64_t (*)(void))MEMORY[0x1E0C80A78])();
  v53 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v35 - v17;
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v35 - v20;
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v35 - v22;
  v38 = v1;
  v24 = *(void **)(v1 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_key);
  v25 = *(_QWORD *)(v1 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_key + 8);
  if ((v25 & 0x2000000000000000) != 0)
  {
    v54 = *(CFErrorRef *)(v1 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_key);
    v55 = v25 & 0xDFFFFFFFFFFFFFFFLL;
    sub_19BD22CC0((uint64_t)v24, v25 & 0xDFFFFFFFFFFFFFFFLL);
    sub_19BEC4AF8();
    if (v2)
      return;
  }
  else
  {
    v26 = sub_19BD1D0B8((__SecKey *)v24);
    if (v2)
    {
      sub_19BD23674(v24, v25);
      return;
    }
    v54 = v26;
    v55 = v27;
    sub_19BEC4AF8();
    sub_19BD23674(v24, v25);
    v21 = v18;
  }
  v28 = v56;
  v29 = v21;
  v30 = v49;
  (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v23, v29, v49);
  (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v53, v23, v30);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E0CA95F8], v41);
  (*(void (**)(char *, _QWORD, uint64_t))(v42 + 104))(v44, *MEMORY[0x1E0CA95E0], v43);
  (*(void (**)(char *, _QWORD, uint64_t))(v45 + 104))(v46, *MEMORY[0x1E0CA9610], v47);
  sub_19BEC4BB8();
  v31 = v50;
  sub_19BEC4DEC();
  sub_19BEC4DE0();
  v33 = v32;
  (*(void (**)(char *, uint64_t))(v51 + 8))(v31, v52);
  if (v33 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    v34 = v38;
    (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v39, v38 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_psk, v37);
    sub_19BD22CC0(*(_QWORD *)(v34 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_pskID), *(_QWORD *)(v34 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_pskID + 8));
    sub_19BEC4BF4();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v23, v30);
  }
}

void sub_19BD1DBF4(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  __CFError *v36;
  uint64_t v37;
  __SecKey *v38;
  void *v39;
  CFErrorRef v40;
  unint64_t v41;
  unint64_t v42;
  void *v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  unint64_t v88;
  char *v89;
  CFErrorRef v90;
  unint64_t v91;
  void *v92;

  v72 = a1;
  v73 = a2;
  v69 = sub_19BEC4B70();
  v68 = *(_QWORD *)(v69 - 8);
  v5 = MEMORY[0x1E0C80A78](v69);
  v63 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v62 = (char *)&v61 - v7;
  v8 = sub_19BEC4DF8();
  v84 = *(_QWORD *)(v8 - 8);
  v85 = v8;
  MEMORY[0x1E0C80A78](v8);
  v83 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_19BEC4BE8();
  v80 = *(_QWORD *)(v10 - 8);
  v81 = v10;
  MEMORY[0x1E0C80A78](v10);
  v82 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_19BEC4BD0();
  v76 = *(_QWORD *)(v78 - 8);
  MEMORY[0x1E0C80A78](v78);
  v79 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_19BEC4BDC();
  v74 = *(_QWORD *)(v13 - 8);
  v75 = v13;
  MEMORY[0x1E0C80A78](v13);
  v77 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_19BEC4BC4();
  v16 = MEMORY[0x1E0C80A78](v15);
  v89 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v67 = (char *)&v61 - v18;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4113E0);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_19BEC4B88();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = MEMORY[0x1E0C80A78](v22);
  v65 = (char *)&v61 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v66 = (char *)&v61 - v26;
  v64 = sub_19BEC4B34();
  v88 = *(_QWORD *)(v64 - 8);
  v27 = MEMORY[0x1E0C80A78](v64);
  v86 = (char *)&v61 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x1E0C80A78](v27);
  v31 = (char *)&v61 - v30;
  v32 = MEMORY[0x1E0C80A78](v29);
  v34 = (char *)&v61 - v33;
  MEMORY[0x1E0C80A78](v32);
  v87 = (char *)&v61 - v35;
  v70 = v3;
  v36 = *(__CFError **)(v3 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_key);
  v37 = *(_QWORD *)(v3 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_key + 8);
  v71 = a3;
  if ((v37 & 0x2000000000000000) != 0)
  {
    v90 = v36;
    v91 = v37 & 0xDFFFFFFFFFFFFFFFLL;
    sub_19BD22CC0((uint64_t)v36, v37 & 0xDFFFFFFFFFFFFFFFLL);
    v43 = v92;
    sub_19BEC4B1C();
    if (!v43)
      goto LABEL_5;
  }
  else
  {
    v38 = v36;
    v39 = v92;
    sub_19BEC4B7C();
    if (v39)
    {

      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v21, 1, 1, v22);
      sub_19BD238E4((uint64_t)v21, &qword_1EE4113E0);
      v40 = sub_19BD1D0B8(v38);
      v42 = v41;
      v90 = v40;
      v91 = v41;
      sub_19BD22CC0((uint64_t)v40, v41);
      sub_19BEC4B1C();
      sub_19BD23674(v36, v37);
      sub_19BD22AD8((uint64_t)v40, v42);
      v34 = v31;
LABEL_5:
      v45 = v87;
      v44 = v88;
      v46 = v64;
      (*(void (**)(char *, char *, uint64_t))(v88 + 32))(v87, v34, v64);
      (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v86, v45, v46);
      (*(void (**)(char *, _QWORD, uint64_t))(v74 + 104))(v77, *MEMORY[0x1E0CA95F8], v75);
      (*(void (**)(char *, _QWORD, uint64_t))(v76 + 104))(v79, *MEMORY[0x1E0CA95E0], v78);
      (*(void (**)(char *, _QWORD, uint64_t))(v80 + 104))(v82, *MEMORY[0x1E0CA9610], v81);
      sub_19BEC4BB8();
      v47 = v83;
      sub_19BEC4DEC();
      sub_19BEC4DE0();
      v49 = v48;
      (*(void (**)(char *, uint64_t))(v84 + 8))(v47, v85);
      if (v49 >> 60 != 15)
      {
        v50 = v70;
        (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v63, v70 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_psk, v69);
        v51 = v50 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_pskID;
        v52 = *(_QWORD *)(v50 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_pskID);
        v53 = *(_QWORD *)(v51 + 8);
        sub_19BD22CC0(v72, v73);
        sub_19BD22CC0(v52, v53);
        sub_19BEC4C24();
        (*(void (**)(char *, uint64_t))(v88 + 8))(v87, v46);
        return;
      }
      __break(1u);
      goto LABEL_11;
    }
    v92 = 0;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v21, 0, 1, v22);
    v54 = v66;
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v66, v21, v22);
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v65, v54, v22);
    (*(void (**)(char *, _QWORD, uint64_t))(v74 + 104))(v77, *MEMORY[0x1E0CA95F8], v75);
    (*(void (**)(char *, _QWORD, uint64_t))(v76 + 104))(v79, *MEMORY[0x1E0CA95E0], v78);
    (*(void (**)(char *, _QWORD, uint64_t))(v80 + 104))(v82, *MEMORY[0x1E0CA9610], v81);
    sub_19BEC4BB8();
    v55 = v83;
    sub_19BEC4DEC();
    v89 = (char *)sub_19BEC4DE0();
    v57 = v56;
    (*(void (**)(char *, uint64_t))(v84 + 8))(v55, v85);
    v88 = v57;
    if (v57 >> 60 == 15)
    {
LABEL_11:
      __break(1u);
      return;
    }
    v58 = v70;
    (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v62, v70 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_psk, v69);
    v60 = *(_QWORD *)(v58 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_pskID);
    v59 = *(_QWORD *)(v58 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_pskID + 8);
    sub_19BD22CC0(v72, v73);
    sub_19BD22CC0(v60, v59);
    sub_19BEC4C24();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v66, v22);
    sub_19BD23674(v36, v37);
  }
}

void NEIKEv2CryptoKitHPKE.performHPKESeal()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD v12[8];

  v2 = sub_19BEC4C18();
  MEMORY[0x1E0C80A78](v2);
  sub_19BD1D770((uint64_t)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!v1)
  {
    v12[7] = v2;
    v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_payload);
    v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_payload + 8);
    v12[4] = v4;
    v12[5] = v5;
    v6 = v0 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_aad;
    v7 = *(_QWORD *)(v0 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_aad);
    v8 = *(_QWORD *)(v6 + 8);
    if (v8 >> 60 == 15)
      v9 = 0;
    else
      v9 = v7;
    if (v8 >> 60 == 15)
      v10 = 0xC000000000000000;
    else
      v10 = *(_QWORD *)(v6 + 8);
    v12[2] = v9;
    v12[3] = v10;
    sub_19BD22CC0(v4, v5);
    sub_19BD22D04(v7, v8);
    sub_19BD22D18();
    v12[1] = sub_19BEC4C0C();
    sub_19BD22AD8(v9, v10);
    sub_19BD22AD8(v4, v5);
    sub_19BEC4C00();
    __asm { BR              X11 }
  }
}

uint64_t sub_19BD1E598()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_19BD1E5D0 + dword_19BD1E694[v0 >> 62]))();
}

void sub_19BD1E5E0(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!__OFADD__(a1, BYTE6(v3)))
  {
    *(_QWORD *)(v6 - 96) = sub_19BD22D5C(a1 + BYTE6(v3));
    *(_QWORD *)(v6 - 88) = v7;
    sub_19BEC49F0();
    v8 = *(_QWORD *)(v6 - 120);
    sub_19BEC49F0();
    sub_19BD22AD8(v4, v5);
    sub_19BD22AD8(v8, v3);
    (*(void (**)(uint64_t, _QWORD))(v1 + 8))(v2, *(_QWORD *)(v6 - 72));
    JUMPOUT(0x19BD1E524);
  }
  __break(1u);
  JUMPOUT(0x19BD1E674);
}

uint64_t NEIKEv2CryptoKitHPKE.performHPKEOpen()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v2 = sub_19BEC4C3C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v0 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_payload);
  v7 = *(_QWORD *)(v0 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_payload + 8);
  sub_19BD22CC0(v6, v7);
  sub_19BD1E8B0(32, v6, v7);
  v9 = v21;
  v8 = v22;
  sub_19BD22CC0(v6, v7);
  sub_19BD1EA2C(32, v6, v7);
  v10 = v21;
  v11 = v22;
  sub_19BD1DBF4(v9, v8, (uint64_t)v5);
  if (v1)
  {
    sub_19BD22AD8(v10, v11);
    sub_19BD22AD8(v9, v8);
  }
  else
  {
    v18 = v3;
    v23 = v2;
    v21 = v10;
    v22 = v11;
    v12 = *(_QWORD *)(v0 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_aad);
    v13 = *(_QWORD *)(v0 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_aad + 8);
    if (v13 >> 60 == 15)
      v14 = 0;
    else
      v14 = *(_QWORD *)(v0 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_aad);
    if (v13 >> 60 == 15)
      v15 = 0xC000000000000000;
    else
      v15 = *(_QWORD *)(v0 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_aad + 8);
    v17 = v14;
    v19 = v14;
    v20 = v15;
    sub_19BD22D04(v12, v13);
    sub_19BD22D18();
    v0 = sub_19BEC4C30();
    sub_19BD22AD8(v9, v8);
    sub_19BD22AD8(v17, v15);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v5, v23);
    sub_19BD22AD8(v10, v11);
  }
  return v0;
}

void sub_19BD1E8B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000) == 0)
    __asm { BR              X9 }
  __break(1u);
  JUMPOUT(0x19BD1E9F8);
}

void sub_19BD1EA2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000) == 0)
    __asm { BR              X9 }
  __break(1u);
  JUMPOUT(0x19BD1EB88);
}

void NEIKEv2CryptoKitHPKE.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

BOOL sub_19BD1ECB4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t NEIKEv2CryptoKitSPAKE2Plus.__allocating_init(seed:initiatorID:responderID:salt:context:forInitiator:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10, char a11)
{
  objc_class *v11;
  id v17;

  v17 = objc_allocWithZone(v11);
  return NEIKEv2CryptoKitSPAKE2Plus.init(seed:initiatorID:responderID:salt:context:forInitiator:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t NEIKEv2CryptoKitSPAKE2Plus.init(seed:initiatorID:responderID:salt:context:forInitiator:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10, char a11)
{
  void *v11;
  void *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, _QWORD, uint64_t, char *);
  id v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t result;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  void (*v57)(char *, _QWORD, uint64_t, char *);
  void (*v58)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  objc_class *ObjectType;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char *v80;
  objc_super v81;
  uint64_t v82;

  v74 = a8;
  v12 = v11;
  v75 = a6;
  v76 = a3;
  v72 = a5;
  v77 = a4;
  v78 = a2;
  v79 = a1;
  ObjectType = (objc_class *)swift_getObjectType();
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE411318);
  MEMORY[0x1E0C80A78](v14);
  v61 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE411320);
  MEMORY[0x1E0C80A78](v16);
  v60 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_19BEC4A14();
  v82 = *(_QWORD *)(v18 - 8);
  v19 = MEMORY[0x1E0C80A78](v18);
  v71 = (char *)&v57 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19);
  v70 = (char *)&v57 - v22;
  MEMORY[0x1E0C80A78](v21);
  v80 = (char *)&v57 - v23;
  v24 = sub_19BEC4DF8();
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v27 = (char *)&v57 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = (uint64_t)v11 + OBJC_IVAR____TtC16NetworkExtension26NEIKEv2CryptoKitSPAKE2Plus_prover;
  v29 = sub_19BEC4A50();
  v30 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56);
  v63 = v28;
  v59 = v29;
  v58 = v30;
  ((void (*)(uint64_t, uint64_t, uint64_t))v30)(v28, 1, 1);
  v31 = (uint64_t)v12 + OBJC_IVAR____TtC16NetworkExtension26NEIKEv2CryptoKitSPAKE2Plus_verifier;
  v32 = sub_19BEC4A8C();
  v33 = *(void (**)(char *, _QWORD, uint64_t, char *))(*(_QWORD *)(v32 - 8) + 56);
  v62 = v31;
  v57 = v33;
  v33((char *)v31, 1, 1, (char *)v32);
  v34 = v12;
  sub_19BEC4DEC();
  v35 = sub_19BEC4DE0();
  v37 = v36;
  result = (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v27, v24);
  if (v37 >> 60 != 15)
  {
    v67 = v35;
    v68 = v37;
    (*(void (**)(char *, _QWORD, uint64_t))(v82 + 104))(v80, *MEMORY[0x1E0D1BE08], v18);
    v65 = v18;
    v64 = v34;
    v66 = a7;
    if ((a11 & 1) != 0)
    {
      *((_BYTE *)v34 + OBJC_IVAR____TtC16NetworkExtension26NEIKEv2CryptoKitSPAKE2Plus_role) = 0;
      (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v70, v80, v18);
      v39 = v78;
      sub_19BD22CC0(v79, v78);
      v40 = a7;
      v41 = v74;
      sub_19BD22CC0(v40, v74);
      sub_19BD22CC0(a9, a10);
      v42 = v72;
      v43 = v75;
      sub_19BD22CC0(v72, v75);
      v45 = v76;
      v44 = v77;
      sub_19BD22CC0(v76, v77);
      v46 = v66;
      v47 = v73;
      sub_19BEC4A38();
      v73 = v47;
      if (!v47)
      {
        v48 = a9;
        v49 = v64;
        v50 = v46;
        (*(void (**)(char *, uint64_t))(v82 + 8))(v80, v65);
        v51 = (uint64_t)v60;
        v58(v60, 0, 1, v59);
        v52 = v63;
        swift_beginAccess();
        v53 = &qword_1EE411320;
LABEL_8:
        sub_19BD22E80(v51, v52, v53);
        swift_endAccess();

        v81.receiver = v49;
        v81.super_class = ObjectType;
        v56 = objc_msgSendSuper2(&v81, sel_init);
        sub_19BD22AD8(v48, a10);
        sub_19BD22AD8(v50, v74);
        sub_19BD22AD8(v42, v75);
        sub_19BD22AD8(v76, v77);
        sub_19BD22AD8(v79, v78);
        return (uint64_t)v56;
      }
    }
    else
    {
      v70 = (char *)v32;
      *((_BYTE *)v34 + OBJC_IVAR____TtC16NetworkExtension26NEIKEv2CryptoKitSPAKE2Plus_role) = 1;
      (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v71, v80, v18);
      v39 = v78;
      sub_19BD22CC0(v79, v78);
      v54 = a7;
      v41 = v74;
      sub_19BD22CC0(v54, v74);
      sub_19BD22CC0(a9, a10);
      v42 = v72;
      v43 = v75;
      sub_19BD22CC0(v72, v75);
      v45 = v76;
      v44 = v77;
      sub_19BD22CC0(v76, v77);
      v46 = v66;
      v55 = v73;
      sub_19BEC4A74();
      v73 = v55;
      if (!v55)
      {
        v48 = a9;
        v49 = v64;
        v50 = v46;
        (*(void (**)(char *, uint64_t))(v82 + 8))(v80, v65);
        v51 = (uint64_t)v61;
        v57(v61, 0, 1, v70);
        v52 = v62;
        swift_beginAccess();
        v53 = &qword_1EE411318;
        goto LABEL_8;
      }
    }
    sub_19BD22AD8(a9, a10);
    sub_19BD22AD8(v46, v41);
    sub_19BD22AD8(v42, v43);
    sub_19BD22AD8(v45, v44);
    sub_19BD22AD8(v79, v39);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v80, v65);
    sub_19BD238E4(v63, &qword_1EE411320);
    sub_19BD238E4(v62, &qword_1EE411318);
    v56 = v64;

    swift_deallocPartialClassInstance();
    return (uint64_t)v56;
  }
  __break(1u);
  return result;
}

uint64_t NEIKEv2CryptoKitSPAKE2Plus.getFirstMessage()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE411318);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE411320);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC16NetworkExtension26NEIKEv2CryptoKitSPAKE2Plus_role) & 1) != 0)
  {
    v9 = v0 + OBJC_IVAR____TtC16NetworkExtension26NEIKEv2CryptoKitSPAKE2Plus_verifier;
    swift_beginAccess();
    sub_19BD238A0(v9, (uint64_t)v5, &qword_1EE411318);
    v10 = sub_19BEC4A8C();
    v11 = *(_QWORD *)(v10 - 8);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v5, 1, v10);
    if ((_DWORD)result != 1)
    {
      v13 = sub_19BEC4A80();
      if (!v1)
        v2 = v13;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v5, v10);
      return v2;
    }
    __break(1u);
  }
  else
  {
    v14 = v0 + OBJC_IVAR____TtC16NetworkExtension26NEIKEv2CryptoKitSPAKE2Plus_prover;
    swift_beginAccess();
    sub_19BD238A0(v14, (uint64_t)v8, &qword_1EE411320);
    v15 = sub_19BEC4A50();
    v16 = *(_QWORD *)(v15 - 8);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v8, 1, v15);
    if ((_DWORD)result != 1)
    {
      v17 = sub_19BEC4A44();
      if (!v1)
        v2 = v17;
      (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v15);
      return v2;
    }
  }
  __break(1u);
  return result;
}

id sub_19BD1F734(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  id v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;

  v5 = a1;
  v6 = a4();
  v8 = v7;

  v9 = (void *)sub_19BEC49D8();
  sub_19BD22AD8(v6, v8);
  return v9;
}

uint64_t NEIKEv2CryptoKitSPAKE2Plus.processFirstPeerMessage(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC16NetworkExtension26NEIKEv2CryptoKitSPAKE2Plus_role) & 1) != 0)
  {
    v1 = v0 + OBJC_IVAR____TtC16NetworkExtension26NEIKEv2CryptoKitSPAKE2Plus_verifier;
    swift_beginAccess();
    v2 = sub_19BEC4A8C();
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2);
    if ((_DWORD)result != 1)
    {
      v4 = sub_19BEC4A68();
LABEL_6:
      v7 = v4;
      swift_endAccess();
      return v7;
    }
    __break(1u);
  }
  else
  {
    v5 = v0 + OBJC_IVAR____TtC16NetworkExtension26NEIKEv2CryptoKitSPAKE2Plus_prover;
    swift_beginAccess();
    v6 = sub_19BEC4A50();
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6);
    if ((_DWORD)result != 1)
    {
      v4 = sub_19BEC4A2C();
      goto LABEL_6;
    }
  }
  __break(1u);
  return result;
}

uint64_t NEIKEv2CryptoKitSPAKE2Plus.processSecondPeerMessage(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[4];

  v2 = sub_19BEC4A08();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v4);
  v9 = (char *)v17 - v8;
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)v17 - v10;
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC16NetworkExtension26NEIKEv2CryptoKitSPAKE2Plus_role) & 1) != 0)
  {
    v12 = v0 + OBJC_IVAR____TtC16NetworkExtension26NEIKEv2CryptoKitSPAKE2Plus_verifier;
    swift_beginAccess();
    v13 = sub_19BEC4A8C();
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13);
    if ((_DWORD)result != 1)
    {
      sub_19BEC4A5C();
      result = swift_endAccess();
      v9 = v6;
      if (v1)
        return result;
LABEL_7:
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v11, v9, v2);
      sub_19BD22E30();
      sub_19BEC49FC();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v11, v2);
      return v17[1];
    }
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  v15 = v0 + OBJC_IVAR____TtC16NetworkExtension26NEIKEv2CryptoKitSPAKE2Plus_prover;
  swift_beginAccess();
  v16 = sub_19BEC4A50();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v15, 1, v16);
  if ((_DWORD)result == 1)
    goto LABEL_9;
  sub_19BEC4A20();
  result = swift_endAccess();
  if (!v1)
    goto LABEL_7;
  return result;
}

id sub_19BD1FC24@<X0>(void *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_19BD211D4(a1, a2, a3);
}

void NEIKEv2CryptoKitSPAKE2Plus.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t NEIKEv2CryptoKitECDH.keyExchangeData.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitECDH_keyExchangeData);
  sub_19BD22CC0(v1, *(_QWORD *)(v0 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitECDH_keyExchangeData + 8));
  return v1;
}

uint64_t NEIKEv2CryptoKitECDH.sharedSecret.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v10[3];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE411338);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_19BEC4B4C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v0 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitECDH_internalSharedSecret;
  swift_beginAccess();
  sub_19BD238A0(v8, (uint64_t)v3, &qword_1EE411338);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_19BD238E4((uint64_t)v3, &qword_1EE411338);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
    sub_19BD22E30();
    sub_19BEC4B40();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v10[2];
  }
}

uint64_t sub_19BD1FF80()
{
  return sub_19BD2123C();
}

uint64_t NEIKEv2CryptoKitECDH.processPeerPayload(_:)(uint64_t a1, uint64_t a2)
{
  return sub_19BD212B4(a1, a2, &qword_1EE411338, (uint64_t (*)(_QWORD))MEMORY[0x1E0CA9388], &OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitECDH_internalSharedSecret);
}

void NEIKEv2CryptoKitECDH.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id NEIKEv2CryptoKitECDH.__deallocating_deinit()
{
  return sub_19BD215F8(type metadata accessor for NEIKEv2CryptoKitECDH);
}

id NEIKEv2CryptoKitP256.__allocating_init()()
{
  objc_class *v0;
  id v1;

  v1 = objc_allocWithZone(v0);
  return NEIKEv2CryptoKitP256.init()();
}

id NEIKEv2CryptoKitP256.init()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t *v19;
  char *v20;
  objc_class *v21;
  id v22;
  uint64_t v24;
  objc_super v25;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE411338);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_19BEC4C54();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_19BEC4C78();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19BEC4C6C();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(&v0[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitP256_privateKey], v12, v9);
  sub_19BEC4C60();
  v13 = sub_19BEC4C48();
  v15 = v14;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v16 = (uint64_t)&v1[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitECDH_internalSharedSecret];
  v17 = sub_19BEC4B4C();
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v18(v16, 1, 1, v17);
  v19 = (uint64_t *)&v1[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitECDH_keyExchangeData];
  *v19 = v13;
  v19[1] = v15;
  v18((uint64_t)v4, 1, 1, v17);
  swift_beginAccess();
  v20 = v1;
  sub_19BD22CC0(v13, v15);
  sub_19BD22E80((uint64_t)v4, v16, &qword_1EE411338);
  swift_endAccess();

  v21 = (objc_class *)type metadata accessor for NEIKEv2CryptoKitECDH(0);
  v25.receiver = v20;
  v25.super_class = v21;
  v22 = objc_msgSendSuper2(&v25, sel_init);
  sub_19BD22AD8(v13, v15);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return v22;
}

uint64_t sub_19BD202C4(uint64_t a1, unint64_t a2)
{
  return sub_19BD20E10(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x1E0CA9690], MEMORY[0x1E0CA9670], (uint64_t)&OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitP256_privateKey, MEMORY[0x1E0CA96A0]);
}

uint64_t sub_19BD202F8()
{
  return sub_19BD20F24(&OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitP256_privateKey, (uint64_t (*)(_QWORD))MEMORY[0x1E0CA96D8]);
}

id NEIKEv2CryptoKitP384.__allocating_init()()
{
  objc_class *v0;
  id v1;

  v1 = objc_allocWithZone(v0);
  return NEIKEv2CryptoKitP384.init()();
}

id NEIKEv2CryptoKitP384.init()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t *v19;
  char *v20;
  objc_class *v21;
  id v22;
  uint64_t v24;
  objc_super v25;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE411338);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_19BEC4C90();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_19BEC4CB4();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19BEC4CA8();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(&v0[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitP384_privateKey], v12, v9);
  sub_19BEC4C9C();
  v13 = sub_19BEC4C48();
  v15 = v14;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v16 = (uint64_t)&v1[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitECDH_internalSharedSecret];
  v17 = sub_19BEC4B4C();
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v18(v16, 1, 1, v17);
  v19 = (uint64_t *)&v1[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitECDH_keyExchangeData];
  *v19 = v13;
  v19[1] = v15;
  v18((uint64_t)v4, 1, 1, v17);
  swift_beginAccess();
  v20 = v1;
  sub_19BD22CC0(v13, v15);
  sub_19BD22E80((uint64_t)v4, v16, &qword_1EE411338);
  swift_endAccess();

  v21 = (objc_class *)type metadata accessor for NEIKEv2CryptoKitECDH(0);
  v25.receiver = v20;
  v25.super_class = v21;
  v22 = objc_msgSendSuper2(&v25, sel_init);
  sub_19BD22AD8(v13, v15);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return v22;
}

uint64_t sub_19BD2058C(uint64_t a1, unint64_t a2)
{
  return sub_19BD20E10(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x1E0CA9790], MEMORY[0x1E0CA9770], (uint64_t)&OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitP384_privateKey, MEMORY[0x1E0CA97A0]);
}

uint64_t sub_19BD205C0()
{
  return sub_19BD20F24(&OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitP384_privateKey, (uint64_t (*)(_QWORD))MEMORY[0x1E0CA97C8]);
}

id NEIKEv2CryptoKitP521.__allocating_init()()
{
  objc_class *v0;
  id v1;

  v1 = objc_allocWithZone(v0);
  return NEIKEv2CryptoKitP521.init()();
}

id NEIKEv2CryptoKitP521.init()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t *v19;
  char *v20;
  objc_class *v21;
  id v22;
  uint64_t v24;
  objc_super v25;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE411338);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_19BEC4CCC();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_19BEC4CF0();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19BEC4CE4();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(&v0[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitP521_privateKey], v12, v9);
  sub_19BEC4CD8();
  v13 = sub_19BEC4C48();
  v15 = v14;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v16 = (uint64_t)&v1[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitECDH_internalSharedSecret];
  v17 = sub_19BEC4B4C();
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v18(v16, 1, 1, v17);
  v19 = (uint64_t *)&v1[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitECDH_keyExchangeData];
  *v19 = v13;
  v19[1] = v15;
  v18((uint64_t)v4, 1, 1, v17);
  swift_beginAccess();
  v20 = v1;
  sub_19BD22CC0(v13, v15);
  sub_19BD22E80((uint64_t)v4, v16, &qword_1EE411338);
  swift_endAccess();

  v21 = (objc_class *)type metadata accessor for NEIKEv2CryptoKitECDH(0);
  v25.receiver = v20;
  v25.super_class = v21;
  v22 = objc_msgSendSuper2(&v25, sel_init);
  sub_19BD22AD8(v13, v15);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return v22;
}

uint64_t sub_19BD20854(uint64_t a1, unint64_t a2)
{
  return sub_19BD20E10(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x1E0CA9880], MEMORY[0x1E0CA9878], (uint64_t)&OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitP521_privateKey, MEMORY[0x1E0CA9890]);
}

uint64_t sub_19BD20888()
{
  return sub_19BD20F24(&OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitP521_privateKey, (uint64_t (*)(_QWORD))MEMORY[0x1E0CA98B8]);
}

id NEIKEv2CryptoKitX25519.__allocating_init()()
{
  objc_class *v0;
  id v1;

  v1 = objc_allocWithZone(v0);
  return NEIKEv2CryptoKitX25519.init()();
}

id NEIKEv2CryptoKitX25519.init()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t *v19;
  char *v20;
  objc_class *v21;
  id v22;
  uint64_t v24;
  objc_super v25;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE411338);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_19BEC4B04();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_19BEC4B34();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19BEC4B28();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(&v0[OBJC_IVAR____TtC16NetworkExtension22NEIKEv2CryptoKitX25519_privateKey], v12, v9);
  sub_19BEC4B10();
  v13 = sub_19BEC4AEC();
  v15 = v14;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v16 = (uint64_t)&v1[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitECDH_internalSharedSecret];
  v17 = sub_19BEC4B4C();
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v18(v16, 1, 1, v17);
  v19 = (uint64_t *)&v1[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitECDH_keyExchangeData];
  *v19 = v13;
  v19[1] = v15;
  v18((uint64_t)v4, 1, 1, v17);
  swift_beginAccess();
  v20 = v1;
  sub_19BD22CC0(v13, v15);
  sub_19BD22E80((uint64_t)v4, v16, &qword_1EE411338);
  swift_endAccess();

  v21 = (objc_class *)type metadata accessor for NEIKEv2CryptoKitECDH(0);
  v25.receiver = v20;
  v25.super_class = v21;
  v22 = objc_msgSendSuper2(&v25, sel_init);
  sub_19BD22AD8(v13, v15);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return v22;
}

uint64_t sub_19BD20B18(uint64_t a1, unint64_t a2)
{
  return sub_19BD20E10(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x1E0CA9210], (uint64_t (*)(_QWORD *, _QWORD, _QWORD))MEMORY[0x1E0CA9200], (uint64_t)&OBJC_IVAR____TtC16NetworkExtension22NEIKEv2CryptoKitX25519_privateKey, MEMORY[0x1E0CA9220]);
}

uint64_t sub_19BD20B4C()
{
  return sub_19BD20F24(&OBJC_IVAR____TtC16NetworkExtension22NEIKEv2CryptoKitX25519_privateKey, (uint64_t (*)(_QWORD))MEMORY[0x1E0CA9248]);
}

id NEIKEv2CryptoKitX448.__allocating_init()()
{
  objc_class *v0;
  id v1;

  v1 = objc_allocWithZone(v0);
  return NEIKEv2CryptoKitX448.init()();
}

id NEIKEv2CryptoKitX448.init()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t *v19;
  char *v20;
  objc_class *v21;
  id v22;
  uint64_t v24;
  objc_super v25;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE411338);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_19BEC4D08();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_19BEC4D2C();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19BEC4D20();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(&v0[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitX448_privateKey], v12, v9);
  sub_19BEC4D14();
  v13 = sub_19BEC4CFC();
  v15 = v14;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v16 = (uint64_t)&v1[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitECDH_internalSharedSecret];
  v17 = sub_19BEC4B4C();
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v18(v16, 1, 1, v17);
  v19 = (uint64_t *)&v1[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitECDH_keyExchangeData];
  *v19 = v13;
  v19[1] = v15;
  v18((uint64_t)v4, 1, 1, v17);
  swift_beginAccess();
  v20 = v1;
  sub_19BD22CC0(v13, v15);
  sub_19BD22E80((uint64_t)v4, v16, &qword_1EE411338);
  swift_endAccess();

  v21 = (objc_class *)type metadata accessor for NEIKEv2CryptoKitECDH(0);
  v25.receiver = v20;
  v25.super_class = v21;
  v22 = objc_msgSendSuper2(&v25, sel_init);
  sub_19BD22AD8(v13, v15);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return v22;
}

uint64_t sub_19BD20DDC(uint64_t a1, unint64_t a2)
{
  return sub_19BD20E10(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x1E0CA99A0], MEMORY[0x1E0CA9998], (uint64_t)&OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitX448_privateKey, MEMORY[0x1E0CA99B0]);
}

uint64_t sub_19BD20E10(uint64_t a1, unint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(_QWORD *, _QWORD, _QWORD), uint64_t a5, void (*a6)(char *))
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  _QWORD v15[2];
  _QWORD v16[2];
  void (*v17)(char *);

  v17 = a6;
  v15[1] = a5;
  v10 = a3(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v15 - v12;
  v16[0] = a1;
  v16[1] = a2;
  sub_19BD22CC0(a1, a2);
  result = a4(v16, MEMORY[0x1E0CB0338], MEMORY[0x1E0CB0318]);
  if (!v6)
  {
    v17(v13);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  return result;
}

uint64_t sub_19BD20F10()
{
  return sub_19BD20F24(&OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitX448_privateKey, (uint64_t (*)(_QWORD))MEMORY[0x1E0CA99D0]);
}

uint64_t sub_19BD20F24(_QWORD *a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = v2 + *a1;
  v4 = a2(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
}

uint64_t sub_19BD20F74(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *a3;
  v5 = a4(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

id sub_19BD20FB8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;

  v3 = (uint64_t *)(a1 + *a3);
  v4 = *v3;
  v5 = v3[1];
  sub_19BD22CC0(*v3, v5);
  v6 = (void *)sub_19BEC49D8();
  sub_19BD22AD8(v4, v5);
  return v6;
}

uint64_t NEIKEv2CryptoKitKEM.keyExchangeData.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC16NetworkExtension19NEIKEv2CryptoKitKEM_keyExchangeData);
  sub_19BD22CC0(v1, *(_QWORD *)(v0 + OBJC_IVAR____TtC16NetworkExtension19NEIKEv2CryptoKitKEM_keyExchangeData + 8));
  return v1;
}

uint64_t NEIKEv2CryptoKitKEM.sharedSecret.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v10[3];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE411340);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_19BEC4B70();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v0 + OBJC_IVAR____TtC16NetworkExtension19NEIKEv2CryptoKitKEM_internalSharedSecret;
  swift_beginAccess();
  sub_19BD238A0(v8, (uint64_t)v3, &qword_1EE411340);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_19BD238E4((uint64_t)v3, &qword_1EE411340);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
    sub_19BD22E30();
    sub_19BEC4B58();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v10[2];
  }
}

id sub_19BD211D4@<X0>(id result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  if (result)
  {
    result = objc_msgSend((id)objc_opt_self(), sel__newZeroingDataWithBytes_length_, result, a2 - (_QWORD)result);
    if (result)
    {
      *a3 = result;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_19BD2123C()
{
  _BYTE *v0;

  sub_19BD2385C();
  swift_allocError();
  *v0 = 2;
  return swift_willThrow();
}

uint64_t NEIKEv2CryptoKitKEM.processPeerPayload(_:)(uint64_t a1, uint64_t a2)
{
  return sub_19BD212B4(a1, a2, &qword_1EE411340, (uint64_t (*)(_QWORD))MEMORY[0x1E0CA93C8], &OBJC_IVAR____TtC16NetworkExtension19NEIKEv2CryptoKitKEM_internalSharedSecret);
}

uint64_t sub_19BD212B4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(_QWORD), _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v12 = __swift_instantiateConcreteTypeFromMangledName(a3);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (*(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v5) + 0x68))(a1, a2);
  if (!v6)
  {
    v16 = a4(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v14, 0, 1, v16);
    v17 = (uint64_t)v5 + *a5;
    swift_beginAccess();
    sub_19BD22E80((uint64_t)v14, v17, a3);
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_19BD213E4(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD), _QWORD *a7)
{
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  id v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v23[32];

  v12 = __swift_instantiateConcreteTypeFromMangledName(a5);
  MEMORY[0x1E0C80A78](v12);
  v14 = &v23[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = a3;
  v16 = a1;
  v17 = sub_19BEC49E4();
  v19 = v18;

  (*(void (**)(uint64_t, unint64_t))((*MEMORY[0x1E0DEEDD8] & *v16) + 0x68))(v17, v19);
  v20 = a6(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v14, 0, 1, v20);
  v21 = (uint64_t)v16 + *a7;
  swift_beginAccess();
  sub_19BD22E80((uint64_t)v14, v21, a5);
  swift_endAccess();

  sub_19BD22AD8(v17, v19);
  return 1;
}

id NEIKEv2CryptoKitKEM.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void NEIKEv2CryptoKitKEM.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id NEIKEv2CryptoKitKEM.__deallocating_deinit()
{
  return sub_19BD215F8(type metadata accessor for NEIKEv2CryptoKitKEM);
}

id sub_19BD215F8(uint64_t (*a1)(_QWORD))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1(0);
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t sub_19BD2164C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, _QWORD *a5)
{
  sub_19BD238E4(a1 + *a3, a4);
  return sub_19BD22AD8(*(_QWORD *)(a1 + *a5), *(_QWORD *)(a1 + *a5 + 8));
}

void (**NEIKEv2CryptoKitKyber768.__allocating_init()())(char *, uint64_t)
{
  objc_class *v0;
  id v1;

  v1 = objc_allocWithZone(v0);
  return NEIKEv2CryptoKitKyber768.init()();
}

void (**NEIKEv2CryptoKitKyber768.init()())(char *, uint64_t)
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (**v5)(char *, uint64_t);
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t *v20;
  uint64_t v21;
  char *v22;
  objc_class *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  objc_super v28;
  char *v29;

  swift_getObjectType();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE411340);
  MEMORY[0x1E0C80A78](v2);
  v29 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_19BEC4D80();
  v5 = *(void (***)(char *, uint64_t))(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_19BEC4D50();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v0;
  sub_19BEC4D44();
  if (v1)
  {

    swift_deallocPartialClassInstance();
  }
  else
  {
    v13 = &v12[OBJC_IVAR____TtC16NetworkExtension24NEIKEv2CryptoKitKyber768_privateKey];
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(&v12[OBJC_IVAR____TtC16NetworkExtension24NEIKEv2CryptoKitKyber768_privateKey], v11, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v13, 0, 1, v8);

    sub_19BEC4D38();
    v14 = sub_19BEC4D68();
    v26 = v8;
    v16 = v15;
    v5[1](v7, v4);
    v17 = (uint64_t)&v12[OBJC_IVAR____TtC16NetworkExtension19NEIKEv2CryptoKitKEM_internalSharedSecret];
    v18 = sub_19BEC4B70();
    v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
    v19(v17, 1, 1, v18);
    v20 = (uint64_t *)&v12[OBJC_IVAR____TtC16NetworkExtension19NEIKEv2CryptoKitKEM_keyExchangeData];
    *v20 = v14;
    v20[1] = v16;
    v27 = 0;
    v21 = (uint64_t)v29;
    v19((uint64_t)v29, 1, 1, v18);
    swift_beginAccess();
    v22 = v12;
    sub_19BD22CC0(v14, v16);
    sub_19BD22E80(v21, v17, &qword_1EE411340);
    swift_endAccess();

    v23 = (objc_class *)type metadata accessor for NEIKEv2CryptoKitKEM(0);
    v28.receiver = v22;
    v28.super_class = v23;
    v5 = (void (**)(char *, uint64_t))objc_msgSendSuper2(&v28, sel_init);
    sub_19BD22AD8(v14, v16);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v26);
  }
  return v5;
}

char *NEIKEv2CryptoKitKyber768.__allocating_init(publicKeyData:)(uint64_t a1, unint64_t a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return NEIKEv2CryptoKitKyber768.init(publicKeyData:)(a1, a2);
}

char *NEIKEv2CryptoKitKyber768.init(publicKeyData:)(uint64_t a1, unint64_t a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t *v27;
  char *v28;
  uint64_t v29;
  objc_class *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t ObjectType;
  objc_super v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;

  ObjectType = swift_getObjectType();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE411340);
  MEMORY[0x1E0C80A78](v5);
  v39 = (uint64_t)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_19BEC4BAC();
  v7 = *(_QWORD *)(v38 - 8);
  MEMORY[0x1E0C80A78](v38);
  v40 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_19BEC4D80();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = &v2[OBJC_IVAR____TtC16NetworkExtension24NEIKEv2CryptoKitKyber768_privateKey];
  v14 = sub_19BEC4D50();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v43 = a1;
  v44 = a2;
  v15 = v2;
  v16 = a2;
  v17 = v15;
  sub_19BD22CC0(a1, v16);
  v18 = v45;
  sub_19BEC4D74();
  if (v18)
  {
    sub_19BD22AD8(a1, v16);
    sub_19BD238E4((uint64_t)v13, (uint64_t *)&unk_1EE411348);

    swift_deallocPartialClassInstance();
  }
  else
  {
    v35 = v10;
    v36 = a1;
    v34 = v7;
    v37 = v16;
    v45 = v9;
    v19 = v40;
    sub_19BEC4D5C();

    v21 = sub_19BEC4B94();
    v23 = v22;
    v24 = (uint64_t)&v17[OBJC_IVAR____TtC16NetworkExtension19NEIKEv2CryptoKitKEM_internalSharedSecret];
    v25 = sub_19BEC4B70();
    v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56);
    ObjectType = v25;
    v26(v24, 1, 1, v25);
    v27 = (uint64_t *)&v17[OBJC_IVAR____TtC16NetworkExtension19NEIKEv2CryptoKitKEM_keyExchangeData];
    *v27 = v21;
    v27[1] = v23;
    v26(v39, 1, 1, v25);
    swift_beginAccess();
    v28 = v17;
    sub_19BD22CC0(v21, v23);
    v29 = v39;
    sub_19BD22E80(v39, v24, &qword_1EE411340);
    swift_endAccess();

    v30 = (objc_class *)type metadata accessor for NEIKEv2CryptoKitKEM(0);
    v42.receiver = v28;
    v42.super_class = v30;
    v31 = objc_msgSendSuper2(&v42, sel_init);
    sub_19BD22AD8(v21, v23);
    v13 = (char *)v31;
    sub_19BEC4BA0();
    sub_19BD22AD8(v36, v37);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v19, v38);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v12, v45);
    v26(v29, 0, 1, ObjectType);
    v32 = (uint64_t)&v13[OBJC_IVAR____TtC16NetworkExtension19NEIKEv2CryptoKitKEM_internalSharedSecret];
    swift_beginAccess();
    sub_19BD22E80(v29, v32, &qword_1EE411340);
    swift_endAccess();

  }
  return v13;
}

uint64_t sub_19BD21D5C(uint64_t a1, uint64_t a2)
{
  return sub_19BD2260C(a1, a2, (uint64_t *)&unk_1EE411348, (uint64_t (*)(_QWORD))MEMORY[0x1E0CA9A78], &OBJC_IVAR____TtC16NetworkExtension24NEIKEv2CryptoKitKyber768_privateKey, MEMORY[0x1E0CA9A68]);
}

uint64_t sub_19BD21D90()
{
  uint64_t v0;

  return sub_19BD238E4(v0 + OBJC_IVAR____TtC16NetworkExtension24NEIKEv2CryptoKitKyber768_privateKey, (uint64_t *)&unk_1EE411348);
}

void (**NEIKEv2CryptoKitKyber1024.__allocating_init()())(char *, uint64_t)
{
  objc_class *v0;
  id v1;

  v1 = objc_allocWithZone(v0);
  return NEIKEv2CryptoKitKyber1024.init()();
}

void (**NEIKEv2CryptoKitKyber1024.init()())(char *, uint64_t)
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (**v5)(char *, uint64_t);
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t *v20;
  uint64_t v21;
  char *v22;
  objc_class *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  objc_super v28;
  char *v29;

  swift_getObjectType();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE411340);
  MEMORY[0x1E0C80A78](v2);
  v29 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_19BEC4DD4();
  v5 = *(void (***)(char *, uint64_t))(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_19BEC4DA4();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v0;
  sub_19BEC4D98();
  if (v1)
  {

    swift_deallocPartialClassInstance();
  }
  else
  {
    v13 = &v12[OBJC_IVAR____TtC16NetworkExtension25NEIKEv2CryptoKitKyber1024_privateKey];
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(&v12[OBJC_IVAR____TtC16NetworkExtension25NEIKEv2CryptoKitKyber1024_privateKey], v11, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v13, 0, 1, v8);

    sub_19BEC4D8C();
    v14 = sub_19BEC4DBC();
    v26 = v8;
    v16 = v15;
    v5[1](v7, v4);
    v17 = (uint64_t)&v12[OBJC_IVAR____TtC16NetworkExtension19NEIKEv2CryptoKitKEM_internalSharedSecret];
    v18 = sub_19BEC4B70();
    v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
    v19(v17, 1, 1, v18);
    v20 = (uint64_t *)&v12[OBJC_IVAR____TtC16NetworkExtension19NEIKEv2CryptoKitKEM_keyExchangeData];
    *v20 = v14;
    v20[1] = v16;
    v27 = 0;
    v21 = (uint64_t)v29;
    v19((uint64_t)v29, 1, 1, v18);
    swift_beginAccess();
    v22 = v12;
    sub_19BD22CC0(v14, v16);
    sub_19BD22E80(v21, v17, &qword_1EE411340);
    swift_endAccess();

    v23 = (objc_class *)type metadata accessor for NEIKEv2CryptoKitKEM(0);
    v28.receiver = v22;
    v28.super_class = v23;
    v5 = (void (**)(char *, uint64_t))objc_msgSendSuper2(&v28, sel_init);
    sub_19BD22AD8(v14, v16);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v26);
  }
  return v5;
}

uint64_t sub_19BD220C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

char *NEIKEv2CryptoKitKyber1024.__allocating_init(publicKeyData:)(uint64_t a1, unint64_t a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return NEIKEv2CryptoKitKyber1024.init(publicKeyData:)(a1, a2);
}

char *NEIKEv2CryptoKitKyber1024.init(publicKeyData:)(uint64_t a1, unint64_t a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t *v27;
  char *v28;
  uint64_t v29;
  objc_class *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t ObjectType;
  objc_super v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;

  ObjectType = swift_getObjectType();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE411340);
  MEMORY[0x1E0C80A78](v5);
  v39 = (uint64_t)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_19BEC4BAC();
  v7 = *(_QWORD *)(v38 - 8);
  MEMORY[0x1E0C80A78](v38);
  v40 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_19BEC4DD4();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = &v2[OBJC_IVAR____TtC16NetworkExtension25NEIKEv2CryptoKitKyber1024_privateKey];
  v14 = sub_19BEC4DA4();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v43 = a1;
  v44 = a2;
  v15 = v2;
  v16 = a2;
  v17 = v15;
  sub_19BD22CC0(a1, v16);
  v18 = v45;
  sub_19BEC4DC8();
  if (v18)
  {
    sub_19BD22AD8(a1, v16);
    sub_19BD238E4((uint64_t)v13, &qword_1EE411358);

    swift_deallocPartialClassInstance();
  }
  else
  {
    v35 = v10;
    v36 = a1;
    v34 = v7;
    v37 = v16;
    v45 = v9;
    v19 = v40;
    sub_19BEC4DB0();

    v21 = sub_19BEC4B94();
    v23 = v22;
    v24 = (uint64_t)&v17[OBJC_IVAR____TtC16NetworkExtension19NEIKEv2CryptoKitKEM_internalSharedSecret];
    v25 = sub_19BEC4B70();
    v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56);
    ObjectType = v25;
    v26(v24, 1, 1, v25);
    v27 = (uint64_t *)&v17[OBJC_IVAR____TtC16NetworkExtension19NEIKEv2CryptoKitKEM_keyExchangeData];
    *v27 = v21;
    v27[1] = v23;
    v26(v39, 1, 1, v25);
    swift_beginAccess();
    v28 = v17;
    sub_19BD22CC0(v21, v23);
    v29 = v39;
    sub_19BD22E80(v39, v24, &qword_1EE411340);
    swift_endAccess();

    v30 = (objc_class *)type metadata accessor for NEIKEv2CryptoKitKEM(0);
    v42.receiver = v28;
    v42.super_class = v30;
    v31 = objc_msgSendSuper2(&v42, sel_init);
    sub_19BD22AD8(v21, v23);
    v13 = (char *)v31;
    sub_19BEC4BA0();
    sub_19BD22AD8(v36, v37);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v19, v38);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v12, v45);
    v26(v29, 0, 1, ObjectType);
    v32 = (uint64_t)&v13[OBJC_IVAR____TtC16NetworkExtension19NEIKEv2CryptoKitKEM_internalSharedSecret];
    swift_beginAccess();
    sub_19BD22E80(v29, v32, &qword_1EE411340);
    swift_endAccess();

  }
  return v13;
}

uint64_t sub_19BD2252C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = a3;
  v7 = sub_19BEC49E4();
  v9 = v8;

  return a5(v7, v9);
}

uint64_t sub_19BD225D8(uint64_t a1, uint64_t a2)
{
  return sub_19BD2260C(a1, a2, &qword_1EE411358, (uint64_t (*)(_QWORD))MEMORY[0x1E0CA9AC0], &OBJC_IVAR____TtC16NetworkExtension25NEIKEv2CryptoKitKyber1024_privateKey, MEMORY[0x1E0CA9AB0]);
}

uint64_t sub_19BD2260C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(_QWORD), _QWORD *a5, void (*a6)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _BYTE *v18;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);

  v21 = a6;
  v20 = a2;
  v11 = __swift_instantiateConcreteTypeFromMangledName(a3);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a4(0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v20 - v16;
  sub_19BD238A0(v6 + *a5, (uint64_t)v13, a3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_19BD238E4((uint64_t)v13, a3);
    sub_19BD2385C();
    swift_allocError();
    *v18 = 1;
    return swift_willThrow();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
    v21(a1, v20);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
}

uint64_t sub_19BD22784()
{
  uint64_t v0;

  return sub_19BD238E4(v0 + OBJC_IVAR____TtC16NetworkExtension25NEIKEv2CryptoKitKyber1024_privateKey, &qword_1EE411358);
}

id _s16NetworkExtension20NEIKEv2CryptoKitHPKECfD_0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_19BD2280C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v4;
  uint64_t v5;

  v4 = __OFADD__(a1, a2);
  v5 = a1 + a2;
  if (v4)
  {
    __break(1u);
    JUMPOUT(0x19BD2286CLL);
  }
  return ((uint64_t (*)(uint64_t))((char *)&loc_19BD22824 + *((int *)qword_19BD22870 + (a4 >> 62))))(v5);
}

uint64_t sub_19BD22880(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return ((uint64_t (*)(void))((char *)&loc_19BD22890 + *((int *)qword_19BD22938 + (a4 >> 62))))();
}

uint64_t sub_19BD228A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, unsigned int a3@<W8>)
{
  if (BYTE6(a2) < a1 || a1 < 0)
  {
    __break(1u);
    JUMPOUT(0x19BD22930);
  }
  return ((uint64_t (*)(void))((char *)&loc_19BD228E0 + *((int *)qword_19BD22948 + a3)))();
}

id sub_19BD22958(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, void *a9)
{
  char *v9;
  char *v10;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t *v22;
  char *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  void *v28;
  id v29;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  objc_class *ObjectType;
  objc_super v35;
  uint64_t v36;
  unint64_t v37;

  v10 = v9;
  v32 = a7;
  v33 = a8;
  v31 = a9;
  ObjectType = (objc_class *)swift_getObjectType();
  v17 = sub_19BEC4B70();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78]();
  v20 = (char *)&v31 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (uint64_t *)&v10[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_payload];
  *v21 = a1;
  v21[1] = a2;
  v22 = (uint64_t *)&v10[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_aad];
  *v22 = a3;
  v22[1] = a4;
  v36 = a5;
  v37 = a6;
  v23 = v10;
  sub_19BD22CC0(a1, a2);
  sub_19BD22D04(a3, a4);
  sub_19BD22CC0(a5, a6);
  sub_19BEC4B64();
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(&v23[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_psk], v20, v17);
  v24 = (uint64_t *)&v23[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_pskID];
  v25 = v32;
  v26 = v33;
  *v24 = v32;
  v24[1] = v26;
  v27 = &v23[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_key];
  v28 = v31;
  *(_QWORD *)v27 = v31;
  *((_QWORD *)v27 + 1) = 0;
  sub_19BD22CC0(v25, v26);
  v29 = v28;

  v35.receiver = v23;
  v35.super_class = ObjectType;
  return objc_msgSendSuper2(&v35, sel_init);
}

uint64_t sub_19BD22AD8(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t sub_19BD22B1C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_19BD22AD8(a1, a2);
  return a1;
}

id sub_19BD22B30(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10)
{
  char *v10;
  char *v11;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t *v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  objc_class *ObjectType;
  objc_super v38;
  uint64_t v39;
  unint64_t v40;

  v11 = v10;
  v35 = a7;
  v36 = a8;
  v33 = a10;
  v34 = a9;
  ObjectType = (objc_class *)swift_getObjectType();
  v18 = sub_19BEC4B70();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78]();
  v21 = (char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = (uint64_t *)&v11[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_payload];
  *v22 = a1;
  v22[1] = a2;
  v23 = (uint64_t *)&v11[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_aad];
  *v23 = a3;
  v23[1] = a4;
  v39 = a5;
  v40 = a6;
  v24 = v11;
  sub_19BD22CC0(a1, a2);
  sub_19BD22D04(a3, a4);
  sub_19BD22CC0(a5, a6);
  sub_19BEC4B64();
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(&v24[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_psk], v21, v18);
  v25 = (uint64_t *)&v24[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_pskID];
  v26 = v35;
  v27 = v36;
  *v25 = v35;
  v25[1] = v27;
  v29 = v33;
  v28 = v34;
  v30 = (uint64_t *)&v24[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_key];
  *v30 = v34;
  v30[1] = v29 | 0x2000000000000000;
  sub_19BD22CC0(v26, v27);
  sub_19BD22CC0(v28, v29);

  v38.receiver = v24;
  v38.super_class = ObjectType;
  return objc_msgSendSuper2(&v38, sel_init);
}

uint64_t sub_19BD22CC0(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_19BD22D04(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_19BD22CC0(a1, a2);
  return a1;
}

unint64_t sub_19BD22D18()
{
  unint64_t result;

  result = qword_1EE411310;
  if (!qword_1EE411310)
  {
    result = MEMORY[0x1A1ACFA44](MEMORY[0x1E0CB0310], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&qword_1EE411310);
  }
  return result;
}

uint64_t sub_19BD22D5C(uint64_t result)
{
  unint64_t v1;

  if (result)
  {
    v1 = result;
    if (result < 15)
    {
      return 0;
    }
    else
    {
      sub_19BEC49A8();
      swift_allocObject();
      sub_19BEC499C();
      if (v1 >= 0x7FFFFFFF)
      {
        sub_19BEC49C0();
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = 0;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1A1ACFA38]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_19BD22E30()
{
  unint64_t result;

  result = qword_1EE411330;
  if (!qword_1EE411330)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE411330);
  }
  return result;
}

uint64_t type metadata accessor for NEIKEv2CryptoKitECDH(uint64_t a1)
{
  return sub_19BD233F8(a1, (uint64_t *)&unk_1EE411040);
}

uint64_t sub_19BD22E80(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for NEIKEv2CryptoKitKEM(uint64_t a1)
{
  return sub_19BD233F8(a1, (uint64_t *)&unk_1EE410FB8);
}

uint64_t sub_19BD22ED8()
{
  return type metadata accessor for NEIKEv2CryptoKitHPKE(0);
}

uint64_t type metadata accessor for NEIKEv2CryptoKitHPKE(uint64_t a1)
{
  return sub_19BD233F8(a1, qword_1ECFD51D0);
}

uint64_t sub_19BD22EF4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_19BEC4B70();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for NEIKEv2CryptoKitHPKE()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NEIKEv2CryptoKitHPKE.__allocating_init(payload:aad:psk:pskID:keyRef:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of NEIKEv2CryptoKitHPKE.__allocating_init(payload:aad:psk:pskID:keyData:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t sub_19BD22FAC()
{
  return type metadata accessor for NEIKEv2CryptoKitSPAKE2Plus(0);
}

uint64_t type metadata accessor for NEIKEv2CryptoKitSPAKE2Plus(uint64_t a1)
{
  return sub_19BD233F8(a1, (uint64_t *)&unk_1EE410FE8);
}

void sub_19BD22FC8()
{
  unint64_t v0;
  unint64_t v1;

  sub_19BD2344C(319, &qword_1EE410FA8, (void (*)(uint64_t))MEMORY[0x1E0D1BE38]);
  if (v0 <= 0x3F)
  {
    sub_19BD2344C(319, &qword_1EE410FB0, (void (*)(uint64_t))MEMORY[0x1E0D1BE68]);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for NEIKEv2CryptoKitSPAKE2Plus()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NEIKEv2CryptoKitSPAKE2Plus.__allocating_init(seed:initiatorID:responderID:salt:context:forInitiator:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 104))(a1, a2, a3);
}

uint64_t sub_19BD230B8()
{
  return type metadata accessor for NEIKEv2CryptoKitECDH(0);
}

void sub_19BD230C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_19BD23274(a1, a2, a3, (unint64_t *)&unk_1EE411130, (void (*)(uint64_t))MEMORY[0x1E0CA9388]);
}

uint64_t method lookup function for NEIKEv2CryptoKitECDH()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_19BD230E0()
{
  return type metadata accessor for NEIKEv2CryptoKitP256(0);
}

uint64_t type metadata accessor for NEIKEv2CryptoKitP256(uint64_t a1)
{
  return sub_19BD233F8(a1, (uint64_t *)&unk_1EE411080);
}

uint64_t sub_19BD230FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19BD23144(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA96D8]);
}

uint64_t method lookup function for NEIKEv2CryptoKitP256()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NEIKEv2CryptoKitP256.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t sub_19BD2311C()
{
  return type metadata accessor for NEIKEv2CryptoKitP384(0);
}

uint64_t type metadata accessor for NEIKEv2CryptoKitP384(uint64_t a1)
{
  return sub_19BD233F8(a1, (uint64_t *)&unk_1EE411098);
}

uint64_t sub_19BD23138(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19BD23144(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA97C8]);
}

uint64_t sub_19BD23144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result;
  unint64_t v5;

  result = a4(319);
  if (v5 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for NEIKEv2CryptoKitP384()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_19BD231BC()
{
  return type metadata accessor for NEIKEv2CryptoKitP521(0);
}

uint64_t type metadata accessor for NEIKEv2CryptoKitP521(uint64_t a1)
{
  return sub_19BD233F8(a1, qword_1EE4110B0);
}

uint64_t sub_19BD231D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19BD23144(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA98B8]);
}

uint64_t method lookup function for NEIKEv2CryptoKitP521()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_19BD231F0()
{
  return type metadata accessor for NEIKEv2CryptoKitX25519(0);
}

uint64_t type metadata accessor for NEIKEv2CryptoKitX25519(uint64_t a1)
{
  return sub_19BD233F8(a1, qword_1EE4110E8);
}

uint64_t sub_19BD2320C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19BD23144(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9248]);
}

uint64_t method lookup function for NEIKEv2CryptoKitX25519()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_19BD23224()
{
  return type metadata accessor for NEIKEv2CryptoKitX448(0);
}

uint64_t type metadata accessor for NEIKEv2CryptoKitX448(uint64_t a1)
{
  return sub_19BD233F8(a1, (uint64_t *)&unk_1EE4110D0);
}

uint64_t sub_19BD23240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19BD23144(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA99D0]);
}

uint64_t method lookup function for NEIKEv2CryptoKitX448()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_19BD23258()
{
  return type metadata accessor for NEIKEv2CryptoKitKEM(0);
}

void sub_19BD23260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_19BD23274(a1, a2, a3, (unint64_t *)&unk_1EE410FF8, (void (*)(uint64_t))MEMORY[0x1E0CA93C8]);
}

void sub_19BD23274(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(uint64_t))
{
  unint64_t v5;

  sub_19BD2344C(319, a4, a5);
  if (v5 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for NEIKEv2CryptoKitKEM()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_19BD232FC()
{
  return type metadata accessor for NEIKEv2CryptoKitKyber768(0);
}

uint64_t type metadata accessor for NEIKEv2CryptoKitKyber768(uint64_t a1)
{
  return sub_19BD233F8(a1, (uint64_t *)&unk_1EE410FC8);
}

void sub_19BD23318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_19BD2332C(a1, a2, a3, (unint64_t *)&unk_1EE411008, (void (*)(uint64_t))MEMORY[0x1E0CA9A78]);
}

void sub_19BD2332C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(uint64_t))
{
  unint64_t v5;

  sub_19BD2344C(319, a4, a5);
  if (v5 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for NEIKEv2CryptoKitKyber768()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NEIKEv2CryptoKitKyber768.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of NEIKEv2CryptoKitKyber768.__allocating_init(publicKeyData:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t sub_19BD233DC()
{
  return type metadata accessor for NEIKEv2CryptoKitKyber1024(0);
}

uint64_t type metadata accessor for NEIKEv2CryptoKitKyber1024(uint64_t a1)
{
  return sub_19BD233F8(a1, (uint64_t *)&unk_1EE410FD8);
}

uint64_t sub_19BD233F8(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

void sub_19BD2342C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_19BD2332C(a1, a2, a3, (unint64_t *)&unk_1EE411018, (void (*)(uint64_t))MEMORY[0x1E0CA9AC0]);
}

uint64_t method lookup function for NEIKEv2CryptoKitKyber1024()
{
  return swift_lookUpClassMethod();
}

void sub_19BD2344C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_19BEC4E1C();
    if (!v5)
      atomic_store(v4, a2);
  }
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for NEIKEv2CryptoKitSPAKE2Plus.Role(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NEIKEv2CryptoKitSPAKE2Plus.Role(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_19BD23584 + 4 * byte_19BED4BB5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_19BD235B8 + 4 * byte_19BED4BB0[v4]))();
}

uint64_t sub_19BD235B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19BD235C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19BD235C8);
  return result;
}

uint64_t sub_19BD235D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x19BD235DCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_19BD235E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19BD235E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19BD235F4(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_19BD23600(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for NEIKEv2CryptoKitSPAKE2Plus.Role()
{
  return &type metadata for NEIKEv2CryptoKitSPAKE2Plus.Role;
}

_QWORD *initializeBufferWithCopyOfBuffer for NEIKEv2CryptoKitKey(_QWORD *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  sub_19BD23658(*(id *)a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

id sub_19BD23658(id a1, uint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0)
    return (id)sub_19BD22CC0((uint64_t)a1, a2 & 0xDFFFFFFFFFFFFFFFLL);
  else
    return a1;
}

void destroy for NEIKEv2CryptoKitKey(uint64_t a1)
{
  sub_19BD23674(*(id *)a1, *(_QWORD *)(a1 + 8));
}

void sub_19BD23674(id a1, uint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0)
    sub_19BD22AD8((uint64_t)a1, a2 & 0xDFFFFFFFFFFFFFFFLL);
  else

}

uint64_t assignWithCopy for NEIKEv2CryptoKitKey(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  sub_19BD23658(*(id *)a2, v4);
  v5 = *(void **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  sub_19BD23674(v5, v6);
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t assignWithTake for NEIKEv2CryptoKitKey(uint64_t a1, _OWORD *a2)
{
  void *v3;
  uint64_t v4;

  v3 = *(void **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  sub_19BD23674(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for NEIKEv2CryptoKitKey(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 3 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 3);
  v3 = ((2 * ((*(_QWORD *)(a1 + 8) & 0x1000000000000000) != 0)) | ((*(_QWORD *)(a1 + 8) >> 60) >> 1) & 1) ^ 3;
  if (v3 >= 2)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for NEIKEv2CryptoKitKey(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 2)
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 3)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 3)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)((2 * (a2 & 1)) | 1) << 60;
    }
  }
  return result;
}

uint64_t sub_19BD237A8(uint64_t a1)
{
  return (*(_QWORD *)(a1 + 8) >> 61) & 1;
}

uint64_t sub_19BD237B4(uint64_t result)
{
  *(_QWORD *)(result + 8) &= ~0x2000000000000000uLL;
  return result;
}

uint64_t sub_19BD237C4(uint64_t result, char a2)
{
  *(_QWORD *)(result + 8) = *(_QWORD *)(result + 8) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 1) << 61);
  return result;
}

ValueMetadata *type metadata accessor for NEIKEv2CryptoKitKey()
{
  return &type metadata for NEIKEv2CryptoKitKey;
}

void type metadata accessor for Verdict(uint64_t a1)
{
  sub_19BD23AF4(a1, &qword_1EE4113C0);
}

void type metadata accessor for NETrafficDirection(uint64_t a1)
{
  sub_19BD23AF4(a1, &qword_1EE4113C8);
}

unint64_t sub_19BD23818()
{
  unint64_t result;

  result = qword_1EE4113D0;
  if (!qword_1EE4113D0)
  {
    result = MEMORY[0x1A1ACFA44](&unk_19BED4F14, &type metadata for NEIKEv2CryptoKitSPAKE2Plus.Role);
    atomic_store(result, (unint64_t *)&qword_1EE4113D0);
  }
  return result;
}

unint64_t sub_19BD2385C()
{
  unint64_t result;

  result = qword_1EE4113D8;
  if (!qword_1EE4113D8)
  {
    result = MEMORY[0x1A1ACFA44](&unk_19BED5000, &type metadata for NEIKEv2CryptoKitErrors);
    atomic_store(result, (unint64_t *)&qword_1EE4113D8);
  }
  return result;
}

uint64_t sub_19BD238A0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_19BD238E4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for CFError(uint64_t a1)
{
  sub_19BD23AF4(a1, &qword_1EE4113F0);
}

unint64_t sub_19BD23934()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE4113E8;
  if (!qword_1EE4113E8)
  {
    type metadata accessor for CFError(255);
    result = MEMORY[0x1A1ACFA44](MEMORY[0x1E0CB1C60], v1);
    atomic_store(result, (unint64_t *)&qword_1EE4113E8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for NEIKEv2CryptoKitErrors(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NEIKEv2CryptoKitErrors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_19BD23A58 + 4 * byte_19BED4BBF[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_19BD23A8C + 4 * byte_19BED4BBA[v4]))();
}

uint64_t sub_19BD23A8C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19BD23A94(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19BD23A9CLL);
  return result;
}

uint64_t sub_19BD23AA8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x19BD23AB0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_19BD23AB4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19BD23ABC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_19BD23AC8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for NEIKEv2CryptoKitErrors()
{
  return &type metadata for NEIKEv2CryptoKitErrors;
}

void type metadata accessor for SecKey(uint64_t a1)
{
  sub_19BD23AF4(a1, &qword_1EE4113F8);
}

void sub_19BD23AF4(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

unint64_t sub_19BD23B3C()
{
  unint64_t result;

  result = qword_1EE411400;
  if (!qword_1EE411400)
  {
    result = MEMORY[0x1A1ACFA44](&unk_19BED4FD8, &type metadata for NEIKEv2CryptoKitErrors);
    atomic_store(result, (unint64_t *)&qword_1EE411400);
  }
  return result;
}

uint64_t dispatch thunk of NEIKEv2CryptoKitKyber1024.__allocating_init()()
{
  return dispatch thunk of NEIKEv2CryptoKitKyber768.__allocating_init()();
}

uint64_t dispatch thunk of NEIKEv2CryptoKitKyber1024.__allocating_init(publicKeyData:)()
{
  return dispatch thunk of NEIKEv2CryptoKitKyber768.__allocating_init(publicKeyData:)();
}

uint64_t NENetworkRule.init(destinationNetworkEndpoint:prefix:protocol:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  id v7;
  uint64_t v8;

  result = sub_19BEC4A98();
  if (result)
  {
    v7 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithDestinationNetworkEndpoint_prefix_protocol_, result, a2, a3);
    swift_unknownObjectRelease();
    v8 = sub_19BEC4AA4();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
    return (uint64_t)v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t NENetworkRule.init(destinationHostEndpoint:protocol:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  id v5;
  uint64_t v6;

  result = sub_19BEC4A98();
  if (result)
  {
    v5 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithDestinationHostEndpoint_protocol_, result, a2);
    swift_unknownObjectRelease();
    v6 = sub_19BEC4AA4();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    return (uint64_t)v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id NENetworkRule.init(remoteNetworkEndpoint:remotePrefix:localNetworkEndpoint:localPrefix:protocol:direction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v25 = a5;
  v26 = a6;
  v24 = a4;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE411500);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v23 - v13;
  sub_19BD23E98(a1, (uint64_t)&v23 - v13);
  v15 = sub_19BEC4AA4();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  if (v17(v14, 1, v15) == 1)
  {
    sub_19BD23EE0((uint64_t)v14);
    v18 = 0;
  }
  else
  {
    v18 = sub_19BEC4A98();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v14, v15);
  }
  sub_19BD23E98(a3, (uint64_t)v12);
  if (v17(v12, 1, v15) == 1)
  {
    sub_19BD23EE0((uint64_t)v12);
    v19 = 0;
  }
  else
  {
    v19 = sub_19BEC4A98();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v15);
  }
  v20 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v21 = objc_msgSend(v20, sel_initWithRemoteNetworkEndpoint_remotePrefix_localNetworkEndpoint_localPrefix_protocol_direction_, v18, a2, v19, v24, v25, v26);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  sub_19BD23EE0(a3);
  sub_19BD23EE0(a1);
  return v21;
}

uint64_t sub_19BD23E98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE411500);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_19BD23EE0(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE411500);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t NENetworkRule.matchRemoteHostOrNetworkEndpoint.getter()
{
  return sub_19BD23F38((SEL *)&selRef_matchRemoteHostOrNetworkEndpoint);
}

uint64_t NENetworkRule.matchLocalNetworkEndpoint.getter()
{
  return sub_19BD23F38((SEL *)&selRef_matchLocalNetworkEndpoint);
}

uint64_t sub_19BD23F38(SEL *a1)
{
  void *v1;
  id v2;

  v2 = objc_msgSend(v1, *a1);
  return sub_19BEC4AB0();
}

uint64_t NEHotspotHelperCommand.interface.getter()
{
  void *v0;
  id v1;

  v1 = objc_msgSend(v0, sel_interface);
  return sub_19BEC4AD4();
}

uint64_t (*NEFilterPacketProvider.handler.getter())(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)
{
  void *v0;
  uint64_t (*result)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))objc_msgSend(v0, sel_packetHandler);
  if (result)
  {
    v2 = result;
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v2;
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = sub_19BD2428C;
    *(_QWORD *)(v4 + 24) = v3;
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = sub_19BD24344;
    *(_QWORD *)(v5 + 24) = v4;
    return sub_19BD2434C;
  }
  return result;
}

_QWORD *sub_19BD24050@<X0>(id *a1@<X0>, uint64_t (**a2)@<X0>(uint64_t *@<X0>, uint64_t *@<X2>, uint64_t *@<X3>, uint64_t *@<X8>)@<X8>)
{
  _QWORD *result;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)@<X0>(uint64_t *@<X0>, uint64_t *@<X2>, uint64_t *@<X3>, uint64_t *@<X8>);

  result = objc_msgSend(*a1, sel_packetHandler);
  if (result)
  {
    v4 = result;
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v4;
    result = (_QWORD *)swift_allocObject();
    result[2] = sub_19BD248DC;
    result[3] = v5;
    v6 = sub_19BD248E0;
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t *@<X2>, uint64_t *@<X3>, uint64_t *@<X8>))result;
  return result;
}

void sub_19BD240E4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = sub_19BD2434C;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  sub_19BD24844(v1);
  NEFilterPacketProvider.handler.setter((uint64_t)v4, v3);
}

void NEFilterPacketProvider.handler.setter(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[6];

  v3 = v2;
  if (a1)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = a1;
    *(_QWORD *)(v6 + 24) = a2;
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = sub_19BD2444C;
    *(_QWORD *)(v7 + 24) = v6;
    v9[4] = sub_19BD24478;
    v9[5] = v7;
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 1107296256;
    v9[2] = sub_19BD2447C;
    v9[3] = &block_descriptor;
    v8 = _Block_copy(v9);
    swift_retain();
    swift_release();
  }
  else
  {
    v8 = 0;
  }
  objc_msgSend(v3, sel_setPacketHandler_, v8);
  sub_19BD24350(a1);
  _Block_release(v8);
}

uint64_t sub_19BD24268()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_19BD2428C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_19BD242AC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v7 = *a1;
  v8 = *a2;
  v9 = *a3;
  v10 = a3[1];
  result = sub_19BEC4ABC();
  if (result)
  {
    if (v9)
      v12 = v10 - v9;
    else
      v12 = 0;
    v13 = a4(v7, result, v8, v9, v12);
    result = swift_unknownObjectRelease();
    *a5 = v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_19BD24344@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v4;

  return sub_19BD242AC(a1, a2, a3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 16), a4);
}

uint64_t sub_19BD24350(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t sub_19BD24360@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, uint64_t *a4@<X4>, uint64_t (*a5)(uint64_t, char *, uint64_t, uint64_t, uint64_t)@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t *v22;

  v22 = a6;
  v11 = sub_19BEC4AC8();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a1;
  v16 = *a2;
  v17 = *a3;
  v18 = *a4;
  swift_unknownObjectRetain();
  sub_19BEC4AD4();
  v19 = a5(v15, v14, v16, v17, v17 + v18);
  result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  *v22 = v19;
  return result;
}

uint64_t sub_19BD2444C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, uint64_t *a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v5;

  return sub_19BD24360(a1, a2, a3, a4, *(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t))(v5 + 16), a5);
}

uint64_t sub_19BD24454()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_19BD2447C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t (*v11)(id, uint64_t, uint64_t, uint64_t, uint64_t);
  id v12;
  uint64_t v13;

  v11 = *(uint64_t (**)(id, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v12 = a2;
  swift_unknownObjectRetain();
  v13 = v11(v12, a3, a4, a5, a6);
  swift_release();

  swift_unknownObjectRelease();
  return v13;
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

void (*NEFilterPacketProvider.handler.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  void *v1;
  void *v2;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v2 = v1;
  v4 = malloc(0x48uLL);
  *a1 = v4;
  v4[8] = v2;
  v5 = objc_msgSend(v2, sel_packetHandler);
  if (v5)
  {
    v6 = v5;
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = v6;
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = sub_19BD248DC;
    *(_QWORD *)(v8 + 24) = v7;
    v5 = (_QWORD *)swift_allocObject();
    v5[2] = sub_19BD248E0;
    v5[3] = v8;
    v9 = sub_19BD2434C;
  }
  else
  {
    v9 = 0;
  }
  v4[6] = v9;
  v4[7] = v5;
  return sub_19BD2460C;
}

void sub_19BD2460C(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  if ((a2 & 1) != 0)
  {
    if (v3)
    {
      v5 = swift_allocObject();
      *(_QWORD *)(v5 + 16) = v3;
      *(_QWORD *)(v5 + 24) = v4;
      v6 = swift_allocObject();
      *(_QWORD *)(v6 + 16) = sub_19BD248D8;
      *(_QWORD *)(v6 + 24) = v5;
      v2[4] = sub_19BD24478;
      v2[5] = v6;
      *v2 = MEMORY[0x1E0C809B0];
      v2[1] = 1107296256;
      v2[2] = sub_19BD2447C;
      v2[3] = &block_descriptor_23;
      v7 = _Block_copy(v2);
      swift_retain_n();
      swift_release();
    }
    else
    {
      v7 = 0;
    }
    objc_msgSend((id)v2[8], sel_setPacketHandler_, v7);
    sub_19BD24350(v3);
    _Block_release(v7);
    sub_19BD24350(v2[6]);
  }
  else
  {
    if (v3)
    {
      v8 = swift_allocObject();
      *(_QWORD *)(v8 + 16) = v3;
      *(_QWORD *)(v8 + 24) = v4;
      v9 = swift_allocObject();
      *(_QWORD *)(v9 + 16) = sub_19BD248D8;
      *(_QWORD *)(v9 + 24) = v8;
      v2[4] = sub_19BD24478;
      v2[5] = v9;
      *v2 = MEMORY[0x1E0C809B0];
      v2[1] = 1107296256;
      v2[2] = sub_19BD2447C;
      v2[3] = &block_descriptor_34;
      v10 = _Block_copy(v2);
      swift_retain();
      swift_release();
    }
    else
    {
      v10 = 0;
    }
    objc_msgSend((id)v2[8], sel_setPacketHandler_, v10);
    sub_19BD24350(v3);
    _Block_release(v10);
  }
  free(v2);
}

uint64_t sub_19BD247EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  void (*v6)(uint64_t *__return_ptr, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(v5 + 16);
  v13 = a1;
  v11 = a3;
  v12 = a2;
  v9 = a5;
  v10 = a4;
  v6(&v8, &v13, &v12, &v11, &v10, &v9);
  return v8;
}

uint64_t sub_19BD24844(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t sub_19BD24854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  void (*v6)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t *, _QWORD *);
  uint64_t v8;
  _QWORD v9[2];
  uint64_t v10;
  uint64_t v11;

  v6 = *(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t *, _QWORD *))(v5 + 16);
  v11 = a1;
  v9[1] = a5;
  v10 = a3;
  v9[0] = a4;
  v6(&v8, &v11, a2, &v10, v9);
  return v8;
}

uint64_t NEAppProxyTCPFlow.remoteFlowEndpoint.getter@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE411500);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(v2, sel_remoteFlowEndpoint);
  sub_19BEC4AB0();
  v8 = sub_19BEC4AA4();
  v9 = *(_QWORD *)(v8 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a1, v6, v8);
  __break(1u);
  return result;
}

uint64_t NEFilterSocketFlow.remoteFlowEndpoint.getter()
{
  return sub_19BD23F38((SEL *)&selRef_remoteFlowEndpoint);
}

uint64_t NEFilterSocketFlow.localFlowEndpoint.getter()
{
  return sub_19BD23F38((SEL *)&selRef_localFlowEndpoint);
}

void NEAppProxyUDPFlow.readDatagrams(completionHandler:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  void *v6;
  _QWORD v7[6];

  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  v7[4] = sub_19BD24D60;
  v7[5] = v5;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1107296256;
  v7[2] = sub_19BD24F58;
  v7[3] = &block_descriptor_0;
  v6 = _Block_copy(v7);
  swift_retain();
  swift_release();
  objc_msgSend(v2, sel_readDatagramsAndFlowEndpointsWithCompletionHandler_, v6);
  _Block_release(v6);
}

size_t sub_19BD24A88(size_t a1, unint64_t a2, uint64_t a3, void (*a4)(size_t, uint64_t), uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t result;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  size_t v25;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  void (*v29)(size_t, uint64_t);
  unint64_t v30;
  char *v31;
  uint64_t v32;

  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE411500);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_19BEC4AA4();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v31 = (char *)v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
LABEL_20:
    a4(a1, a3);
    return swift_bridgeObjectRelease();
  }
  if (!a2)
  {
    a1 = 0;
    goto LABEL_20;
  }
  v26[1] = a1;
  v27 = a3;
  v28 = a5;
  v29 = a4;
  if (a2 >> 62)
    goto LABEL_23;
  v16 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v17 = MEMORY[0x1E0DEE9D8];
    if (!v16)
    {
LABEL_18:
      v24 = (char *)swift_bridgeObjectRetain();
      v25 = sub_19BD259A0(v24, v17);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v29(v25, v27);
      return swift_bridgeObjectRelease();
    }
    v32 = MEMORY[0x1E0DEE9D8];
    result = sub_19BD256F0(0, v16 & ~(v16 >> 63), 0);
    if (v16 < 0)
      break;
    v19 = 0;
    v17 = v32;
    v30 = a2 & 0xC000000000000001;
    while (v16 != v19)
    {
      if (v30)
        MEMORY[0x1A1ACD53C](v19, a2);
      else
        swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      sub_19BEC4AB0();
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
      if ((_DWORD)result == 1)
        goto LABEL_25;
      v20 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
      v20(v31, v12, v13);
      swift_unknownObjectRelease();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v32 = v17;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_19BD256F0(0, *(_QWORD *)(v17 + 16) + 1, 1);
        v17 = v32;
      }
      v23 = *(_QWORD *)(v17 + 16);
      v22 = *(_QWORD *)(v17 + 24);
      if (v23 >= v22 >> 1)
      {
        sub_19BD256F0(v22 > 1, v23 + 1, 1);
        v17 = v32;
      }
      ++v19;
      *(_QWORD *)(v17 + 16) = v23 + 1;
      v20((char *)(v17+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * v23), v31, v13);
      v32 = v17;
      if (v16 == v19)
        goto LABEL_18;
    }
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    v16 = sub_19BEC4E70();
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_19BD24D3C()
{
  swift_release();
  return swift_deallocObject();
}

size_t sub_19BD24D60(size_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_19BD24A88(a1, a2, a3, *(void (**)(size_t, uint64_t))(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t sub_19BD24D68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4114D8);
  v3 = *(_QWORD *)(v27 - 8);
  v4 = MEMORY[0x1E0C80A78](v27);
  v6 = (uint64_t *)((char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v4);
  v26 = (char *)&v22 - v7;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = MEMORY[0x1E0DEE9D8];
  if (v8)
  {
    v22 = v1;
    v28 = MEMORY[0x1E0DEE9D8];
    sub_19BD2570C(0, v8, 0);
    v10 = (uint64_t *)(a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
    v25 = *(_QWORD *)(v3 + 72);
    v11 = sub_19BEC4AA4();
    v24 = *(_QWORD *)(v11 - 8);
    v23 = *(void (**)(char *, char *, uint64_t))(v24 + 16);
    do
    {
      v12 = v27;
      v13 = *(int *)(v27 + 48);
      v14 = &v26[v13];
      v15 = *v10;
      v16 = v10[1];
      v23(&v26[v13], (char *)v10 + v13, v11);
      v17 = (char *)v6 + *(int *)(v12 + 48);
      *v6 = v15;
      v6[1] = v16;
      (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v17, v14, v11);
      sub_19BD22CC0(v15, v16);
      sub_19BD22CC0(v15, v16);
      sub_19BD2549C((uint64_t)v6);
      v9 = v28;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_19BD2570C(0, *(_QWORD *)(v9 + 16) + 1, 1);
        v9 = v28;
      }
      v19 = *(_QWORD *)(v9 + 16);
      v18 = *(_QWORD *)(v9 + 24);
      if (v19 >= v18 >> 1)
      {
        sub_19BD2570C((char *)(v18 > 1), v19 + 1, 1);
        v9 = v28;
      }
      v10 = (uint64_t *)((char *)v10 + v25);
      *(_QWORD *)(v9 + 16) = v19 + 1;
      v20 = v9 + 16 * v19;
      *(_QWORD *)(v20 + 32) = v15;
      *(_QWORD *)(v20 + 40) = v16;
      --v8;
    }
    while (v8);
  }
  return v9;
}

uint64_t sub_19BD24F58(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, void *);
  uint64_t v7;
  id v8;

  v5 = a3;
  v6 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  if (!a2)
  {
    v7 = 0;
    if (!a3)
      goto LABEL_4;
    goto LABEL_3;
  }
  v7 = sub_19BEC4E10();
  if (v5)
  {
LABEL_3:
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4114E0);
    v5 = sub_19BEC4E10();
  }
LABEL_4:
  swift_retain();
  v8 = a4;
  v6(v7, v5, a4);
  swift_release();

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t NEAppProxyUDPFlow.readDatagrams()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 144) = v0;
  return swift_task_switch();
}

uint64_t sub_19BD2503C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v1 = v0;
  v2 = v0 + 16;
  v3 = (void *)v0[18];
  v1[7] = v2;
  v1[2] = v1;
  v1[3] = sub_19BD25154;
  v4 = swift_continuation_init();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  v6 = swift_allocObject();
  v1[10] = MEMORY[0x1E0C809B0];
  v1 += 10;
  *(_QWORD *)(v6 + 16) = sub_19BD251EC;
  *(_QWORD *)(v6 + 24) = v5;
  v1[4] = sub_19BD25F20;
  v1[5] = v6;
  v1[1] = 1107296256;
  v1[2] = sub_19BD24F58;
  v1[3] = &block_descriptor_10;
  v7 = _Block_copy(v1);
  swift_retain();
  swift_release();
  objc_msgSend(v3, sel_readDatagramsAndFlowEndpointsWithCompletionHandler_, v7);
  _Block_release(v7);
  swift_release();
  return swift_continuation_await();
}

uint64_t sub_19BD25154()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v0 + 8))(*(_QWORD *)(*(_QWORD *)v0 + 128), *(_QWORD *)(*(_QWORD *)v0 + 136));
}

uint64_t sub_19BD25194(uint64_t a1, void *a2, uint64_t a3)
{
  id v6;
  _QWORD *v7;

  swift_bridgeObjectRetain();
  v6 = a2;
  v7 = *(_QWORD **)(*(_QWORD *)(a3 + 64) + 40);
  *v7 = a1;
  v7[1] = a2;
  return swift_continuation_resume();
}

uint64_t sub_19BD251DC()
{
  return swift_deallocObject();
}

uint64_t sub_19BD251EC(uint64_t a1, void *a2)
{
  uint64_t v2;

  return sub_19BD25194(a1, a2, *(_QWORD *)(v2 + 16));
}

void NEAppProxyUDPFlow.writeDatagrams(_:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  _QWORD aBlock[6];

  v29 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4114D8);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (_OWORD *)((char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v8);
  v12 = (_OWORD *)((char *)&v26 - v11);
  v13 = sub_19BD24D68(a1);
  v14 = *(_QWORD *)(a1 + 16);
  if (v14)
  {
    v26 = v13;
    v27 = a3;
    v28 = v3;
    aBlock[0] = MEMORY[0x1E0DEE9D8];
    sub_19BEC4E4C();
    v15 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v16 = *(_QWORD *)(v7 + 72);
    while (1)
    {
      sub_19BD25454(v15, (uint64_t)v12);
      v17 = *(int *)(v6 + 48);
      v18 = (char *)v10 + v17;
      v19 = (char *)v12 + v17;
      *v10 = *v12;
      v20 = sub_19BEC4AA4();
      v21 = *(_QWORD *)(v20 - 8);
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
      v22 = sub_19BEC4A98();
      (*(void (**)(char *, uint64_t))(v21 + 8))(v18, v20);
      if (!v22)
        break;
      sub_19BD2549C((uint64_t)v12);
      sub_19BEC4E34();
      sub_19BEC4E58();
      sub_19BEC4E64();
      sub_19BEC4E40();
      v15 += v16;
      if (!--v14)
      {
        a3 = v27;
        v3 = v28;
        goto LABEL_6;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_6:
    v23 = (void *)sub_19BEC4E04();
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4114E0);
    v24 = (void *)sub_19BEC4E04();
    swift_bridgeObjectRelease();
    aBlock[4] = v29;
    aBlock[5] = a3;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_19BD254DC;
    aBlock[3] = &block_descriptor_13;
    v25 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v3, sel_writeDatagrams_sentByFlowEndpoints_completionHandler_, v23, v24, v25);
    _Block_release(v25);

  }
}

uint64_t sub_19BD25454(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4114D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_19BD2549C(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4114D8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_19BD254DC(uint64_t a1, void *a2)
{
  void (*v3)(void *);
  id v4;

  v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3(a2);
  swift_release();

}

uint64_t NEAppProxyUDPFlow.writeDatagrams(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 80) = a1;
  *(_QWORD *)(v2 + 88) = v1;
  return swift_task_switch();
}

uint64_t sub_19BD25548()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[10];
  v0[2] = v0;
  v0[3] = sub_19BD255D4;
  v2 = swift_continuation_init();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v2;
  NEAppProxyUDPFlow.writeDatagrams(_:completionHandler:)(v1, (uint64_t)sub_19BD256B0, v3);
  swift_release();
  return swift_continuation_await();
}

uint64_t sub_19BD255D4()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  if (*(_QWORD *)(v1 + 48))
    swift_willThrow();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_19BD25628(void *a1)
{
  _QWORD *v2;
  id v3;

  if (!a1)
    return swift_continuation_throwingResume();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4114F0);
  swift_allocError();
  *v2 = a1;
  v3 = a1;
  return swift_continuation_throwingResumeWithError();
}

uint64_t sub_19BD256A0()
{
  return swift_deallocObject();
}

uint64_t sub_19BD256B0(void *a1)
{
  return sub_19BD25628(a1);
}

uint64_t NEAppProxyUDPFlow.localFlowEndpoint.getter()
{
  void *v0;
  id v1;

  v1 = objc_msgSend(v0, sel_localFlowEndpoint);
  return sub_19BEC4AB0();
}

size_t sub_19BD256F0(size_t a1, int64_t a2, char a3)
{
  size_t *v3;
  size_t result;

  result = sub_19BD25728(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

char *sub_19BD2570C(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_19BD2589C(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

size_t sub_19BD25728(size_t result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  unint64_t v16;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(qword_1EE411510);
  v10 = *(_QWORD *)(sub_19BEC4AA4() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_29;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  v15 = *(_QWORD *)(sub_19BEC4AA4() - 8);
  if ((v5 & 1) != 0)
  {
    if (v13 < a4
      || (v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(_QWORD *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (size_t)v13;
}

char *sub_19BD2589C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4114F8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

size_t sub_19BD259A0(char *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  size_t result;
  int64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  int64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  BOOL v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  _QWORD *v69;
  size_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;

  v74 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4114D8);
  v4 = *(_QWORD *)(v74 - 8);
  v5 = MEMORY[0x1E0C80A78](v74);
  v7 = (unint64_t *)((char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = MEMORY[0x1E0C80A78](v5);
  v10 = (uint64_t *)((char *)&v59 - v9);
  MEMORY[0x1E0C80A78](v8);
  v65 = a2;
  v66 = (uint64_t)&v59 - v11;
  v12 = *((_QWORD *)a1 + 2);
  v13 = *(_QWORD *)(a2 + 16);
  if (v13 >= v12)
    v14 = *((_QWORD *)a1 + 2);
  else
    v14 = *(_QWORD *)(a2 + 16);
  v63 = v10;
  v64 = v4;
  v71 = v12;
  v73 = v13;
  v62 = a1;
  if (v14)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE411508);
    v15 = *(_QWORD *)(v4 + 72);
    v16 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    v60 = *(unsigned __int8 *)(v4 + 80);
    v17 = (_QWORD *)swift_allocObject();
    result = _swift_stdlib_malloc_size(v17);
    if (!v15)
    {
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    v19 = result - v16;
    v20 = result - v16 == 0x8000000000000000 && v15 == -1;
    v72 = v16;
    if (v20)
      goto LABEL_63;
    v21 = v19 / v15;
    v61 = (char *)v14;
    v17[2] = v14;
    v17[3] = 2 * (v19 / v15);
    v69 = v17;
    result = sub_19BEC4AA4();
    v70 = result;
    if (v12)
    {
      v14 = 0;
      v22 = v69;
      v23 = *(_QWORD *)(v70 - 8);
      v68 = v65 + ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80));
      v59 = v21 & 0x7FFFFFFFFFFFFFFFLL;
      v24 = (unint64_t *)(v62 + 40);
      v67 = v61 - 1;
      a1 = (char *)v69 + v15;
      while (v13 != v14)
      {
        v13 = *(v24 - 1);
        v12 = *v24;
        v25 = v68 + *(_QWORD *)(v23 + 72) * v14;
        v26 = (char *)v7 + *(int *)(v74 + 48);
        *v7 = v13;
        v7[1] = v12;
        (*(void (**)(char *, uint64_t, size_t))(v23 + 16))(v26, v25, v70);
        sub_19BD25ECC((uint64_t)v7, (uint64_t)v22 + v16);
        if (v67 == (char *)v14)
          goto LABEL_16;
        v24 += 2;
        result = sub_19BD22CC0(v13, v12);
        ++v14;
        a1 += v15;
        v22 = (_QWORD *)((char *)v22 + v15);
        v16 = v72;
        v13 = v73;
        if (v71 == v14)
          goto LABEL_15;
      }
      __break(1u);
      goto LABEL_55;
    }
LABEL_15:
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_19BD22CC0(v13, v12);
    v27 = v60;
    v28 = ~v14 + v59;
    v12 = v71;
    v29 = (uint64_t)&a1[v72];
    v10 = v63;
    v30 = v64;
    v13 = v73;
    v14 = (int64_t)v61;
    if (v71 > v73)
    {
LABEL_19:
      v68 = v27 | 7;
      if (v14 <= (uint64_t)v13)
        v32 = v13;
      else
        v32 = v14;
      v70 = v32;
      v33 = (unint64_t *)&v62[16 * v14 + 40];
      v34 = v14;
      while (v12 != v34)
      {
        if (v13 == v34)
          goto LABEL_49;
        if (v70 == v34)
          goto LABEL_56;
        v35 = *(v33 - 1);
        v36 = *v33;
        v37 = sub_19BEC4AA4();
        v38 = *(_QWORD *)(v37 - 8);
        v39 = v65
            + ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80))
            + *(_QWORD *)(v38 + 72) * v34;
        v40 = (char *)v10 + *(int *)(v74 + 48);
        *v10 = v35;
        v10[1] = v36;
        (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v40, v39, v37);
        result = sub_19BD25ECC((uint64_t)v10, v66);
        if (v28)
        {
          result = sub_19BD22CC0(v35, v36);
          v41 = v69;
        }
        else
        {
          v42 = v69[3];
          if ((uint64_t)((v42 >> 1) + 0x4000000000000000) < 0)
            goto LABEL_58;
          v43 = v42 & 0xFFFFFFFFFFFFFFFELL;
          if (v43 <= 1)
            v44 = 1;
          else
            v44 = v43;
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EE411508);
          v45 = *(_QWORD *)(v30 + 72);
          v46 = v72;
          v41 = (_QWORD *)swift_allocObject();
          result = _swift_stdlib_malloc_size(v41);
          if (!v45)
            goto LABEL_59;
          v47 = result - v46;
          if (result - v46 == 0x8000000000000000 && v45 == -1)
            goto LABEL_60;
          v49 = v47 / v45;
          v41[2] = v44;
          v41[3] = 2 * (v47 / v45);
          v50 = (char *)v41 + v46;
          v51 = v69[3] >> 1;
          v52 = v51 * v45;
          v29 = (uint64_t)v41 + v46 + v51 * v45;
          v53 = v46;
          v28 = (v49 & 0x7FFFFFFFFFFFFFFFLL) - v51;
          if (v69[2])
          {
            v54 = v69;
            if (v41 < v69 || v50 >= (char *)v69 + v53 + v52)
            {
              sub_19BD22CC0(v35, v36);
              swift_arrayInitWithTakeFrontToBack();
              v10 = v63;
            }
            else
            {
              v61 = (char *)v69 + v53;
              v67 = v50;
              sub_19BD22CC0(v35, v36);
              v10 = v63;
              if (v41 != v54)
                swift_arrayInitWithTakeBackToFront();
            }
            v54[2] = 0;
            result = swift_release();
            v30 = v64;
          }
          else
          {
            sub_19BD22CC0(v35, v36);
            result = swift_release();
            v10 = v63;
            v30 = v64;
          }
          v12 = v71;
        }
        v13 = v73;
        v55 = __OFSUB__(v28--, 1);
        if (v55)
          goto LABEL_57;
        ++v34;
        result = sub_19BD25ECC(v66, v29);
        v29 += *(_QWORD *)(v30 + 72);
        v33 += 2;
        v69 = v41;
        if (v12 == v34)
          goto LABEL_50;
      }
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
  }
  else
  {
    v27 = *(unsigned __int8 *)(v4 + 80);
    v31 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 24);
    v72 = (v27 + 32) & ~v27;
    v69 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v29 = MEMORY[0x1E0DEE9D8] + v72;
    v28 = v31 >> 1;
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v30 = v4;
    if (v12 > v13)
      goto LABEL_19;
  }
LABEL_49:
  v41 = v69;
LABEL_50:
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v56 = v41[3];
  if (v56 < 2)
    return (size_t)v41;
  v57 = v56 >> 1;
  v55 = __OFSUB__(v57, v28);
  v58 = v57 - v28;
  if (!v55)
  {
    v41[2] = v58;
    return (size_t)v41;
  }
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
  return result;
}

uint64_t sub_19BD25ECC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE4114D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t dispatch thunk of NEAppProxyUDPFlowHandling.handleNewUDPFlow(_:initialRemoteFlowEndpoint:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t sub_19BD25F34(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD v16[2];
  __int128 v17[2];
  uint64_t v18;
  void *v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE411500);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_19BEC4AA4();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = v1;
  sub_19BD26164();
  v10 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE411530);
  if (!swift_dynamicCast())
  {
    v18 = 0;
    memset(v17, 0, sizeof(v17));
    sub_19BD261A0((uint64_t)v17);
    return -1;
  }
  sub_19BD261E0(v17, (uint64_t)v20);
  v16[1] = &unk_1EE42B390;
  swift_dynamicCastObjCProtocolUnconditional();
  swift_unknownObjectRetain();
  sub_19BEC4AB0();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  if ((_DWORD)result != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
    v12 = v21;
    v13 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    v14 = (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(v13 + 8))(a1, v9, v12, v13);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v15 = v14 & 1;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
    return v15;
  }
  __break(1u);
  return result;
}

unint64_t sub_19BD26164()
{
  unint64_t result;

  result = qword_1EE411528;
  if (!qword_1EE411528)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE411528);
  }
  return result;
}

uint64_t sub_19BD261A0(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE411538);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_19BD261E0(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t NEAppProxyFlow.open(withLocalFlowEndpoint:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD aBlock[6];

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE411500);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19BD238A0(a1, (uint64_t)v10, &qword_1EE411500);
  v11 = sub_19BEC4AA4();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_19BD238E4((uint64_t)v10, &qword_1EE411500);
    v13 = 0;
  }
  else
  {
    v13 = sub_19BEC4A98();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
  }
  aBlock[4] = a2;
  aBlock[5] = a3;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_19BD254DC;
  aBlock[3] = &block_descriptor_1;
  v14 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v4, sel_openWithLocalFlowEndpoint_completionHandler_, v13, v14);
  _Block_release(v14);
  return swift_unknownObjectRelease();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t NEAppProxyFlow.open(withLocalFlowEndpoint:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 80) = a1;
  *(_QWORD *)(v2 + 88) = v1;
  return swift_task_switch();
}

uint64_t sub_19BD263D8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[10];
  v0[2] = v0;
  v0[3] = sub_19BD255D4;
  v2 = swift_continuation_init();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v2;
  NEAppProxyFlow.open(withLocalFlowEndpoint:completionHandler:)(v1, (uint64_t)sub_19BD256B0, v3);
  swift_release();
  return swift_continuation_await();
}

uint64_t sub_19BD26464()
{
  return swift_deallocObject();
}

uint64_t NEAppProxyFlow.setMetadata(on:)()
{
  void *v0;

  objc_msgSend(v0, sel_setMetadata_, sub_19BEC4AE0());
  return swift_unknownObjectRelease();
}

uint64_t NEAppProxyFlow.interface.getter@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  uint64_t v3;
  uint64_t v5;

  if (objc_msgSend(v1, sel_networkInterface))
  {
    swift_unknownObjectRetain();
    sub_19BEC4AD4();
    v3 = sub_19BEC4AC8();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a1, 0, 1, v3);
    return swift_unknownObjectRelease();
  }
  else
  {
    v5 = sub_19BEC4AC8();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a1, 1, 1, v5);
  }
}

uint64_t sub_19BD2654C@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;

  if (objc_msgSend(*a1, sel_networkInterface))
  {
    swift_unknownObjectRetain();
    sub_19BEC4AD4();
    v3 = sub_19BEC4AC8();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, 0, 1, v3);
    return swift_unknownObjectRelease();
  }
  else
  {
    v5 = sub_19BEC4AC8();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a2, 1, 1, v5);
  }
}

uint64_t sub_19BD265E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE411548);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19BD238A0(a1, (uint64_t)v4, &qword_1EE411548);
  return NEAppProxyFlow.interface.setter((uint64_t)v4);
}

uint64_t NEAppProxyFlow.interface.setter(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE411548);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_19BEC4AC8();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19BD238A0(a1, (uint64_t)v6, &qword_1EE411548);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_19BD238E4((uint64_t)v6, &qword_1EE411548);
    objc_msgSend(v2, sel_setNetworkInterface_, 0);
    return sub_19BD238E4(a1, &qword_1EE411548);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    result = sub_19BEC4ABC();
    if (result)
    {
      objc_msgSend(v2, sel_setNetworkInterface_, result);
      swift_unknownObjectRelease();
      sub_19BD238E4(a1, &qword_1EE411548);
      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

void (*NEAppProxyFlow.interface.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  void *v1;
  size_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = v1;
  v3 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE411548) - 8) + 64);
  a1[1] = malloc(v3);
  v4 = malloc(v3);
  a1[2] = v4;
  if (objc_msgSend(v1, sel_networkInterface))
  {
    swift_unknownObjectRetain();
    sub_19BEC4AD4();
    v5 = sub_19BEC4AC8();
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 0, 1, v5);
    swift_unknownObjectRelease();
  }
  else
  {
    v6 = sub_19BEC4AC8();
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v4, 1, 1, v6);
  }
  return sub_19BD268BC;
}

void sub_19BD268BC(uint64_t a1, char a2)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 8);
  v3 = *(void **)(a1 + 16);
  if ((a2 & 1) != 0)
  {
    sub_19BD238A0(*(_QWORD *)(a1 + 16), (uint64_t)v2, &qword_1EE411548);
    NEAppProxyFlow.interface.setter((uint64_t)v2);
    sub_19BD238E4((uint64_t)v3, &qword_1EE411548);
  }
  else
  {
    NEAppProxyFlow.interface.setter(*(_QWORD *)(a1 + 16));
  }
  free(v3);
  free(v2);
}

uint64_t NEPacketTunnelProvider.virtualInterface.getter@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  uint64_t v3;
  uint64_t v5;

  if (objc_msgSend(v1, sel_virtualInterface))
  {
    swift_unknownObjectRetain();
    sub_19BEC4AD4();
    v3 = sub_19BEC4AC8();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a1, 0, 1, v3);
    return swift_unknownObjectRelease();
  }
  else
  {
    v5 = sub_19BEC4AC8();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a1, 1, 1, v5);
  }
}

uint64_t DERDecodeItem(uint64_t a1, unint64_t *a2)
{
  return DERDecodeItemPartialBufferGetLength(a1, a2, 0);
}

uint64_t DERDecodeItemPartialBufferGetLength(uint64_t result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  BOOL v10;
  unint64_t v11;
  char *v12;
  unsigned __int8 v13;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  BOOL v25;
  char v26;
  unint64_t v27;
  _BYTE *v28;

  v3 = *(_QWORD *)(result + 8);
  if (v3 < 2)
    return 3;
  v4 = *(_BYTE **)result;
  if (*(_QWORD *)result == -1)
    goto LABEL_68;
  v5 = &v4[v3];
  v6 = v4 + 1;
  v7 = v3 - 1;
  v8 = *v4 & 0x1F;
  if ((*v4 & 0x1F) != 0x1F)
  {
    v12 = v4 + 1;
LABEL_20:
    *a2 = v8 | ((unint64_t)(*v4 & 0xE0) << 56);
    if (v12 != (char *)-1)
    {
      if (v12 >= v5 || v12 < v4)
        goto LABEL_69;
      v14 = v12 + 1;
      v15 = *v12;
      v16 = v7 - 1;
      if ((*v12 & 0x80000000) == 0)
      {
        if (a3 || v16 >= v15)
        {
          if (v16 >= v15)
            v17 = *v12;
          else
            v17 = v7 - 1;
          v10 = v5 >= v14;
          v18 = v5 - v14;
          if (v10 && v4 <= v14 && v17 <= v18)
          {
            a2[1] = (unint64_t)v14;
            a2[2] = v17;
            if (!a3)
              return 0;
LABEL_34:
            result = 0;
            *a3 = v15;
            return result;
          }
LABEL_69:
          __break(0x5519u);
LABEL_70:
          __break(0x5515u);
          return result;
        }
        return 3;
      }
      v19 = v15 & 0x7F;
      if ((v15 & 0x7F) > 8)
        return 3;
      if ((v15 & 0x7F) == 0 || v16 < v19)
        return 3;
      if (v14 >= v5 || v14 < v4)
        goto LABEL_69;
      if (!*v14)
        return 3;
      v15 = 0;
      v21 = (v19 - 1);
      v22 = v7 - v21 - 2;
      v23 = (unint64_t)&v12[v21 + 2];
      while (v14 != (_BYTE *)-1)
      {
        if (v14 >= v5)
          goto LABEL_69;
        v10 = v16-- != 0;
        if (!v10)
          goto LABEL_70;
        v24 = *v14++;
        v15 = (v15 << 8) | v24;
        LODWORD(v19) = v19 - 1;
        if (!(_DWORD)v19)
        {
          if (a3)
            v25 = 0;
          else
            v25 = v15 > v22;
          v26 = v25;
          result = 3;
          if (v15 < 0x80 || (v26 & 1) != 0)
            return result;
          if (v15 >= v22)
            v27 = v22;
          else
            v27 = v15;
          v10 = (unint64_t)v5 >= v23;
          v28 = &v5[-v23];
          if (!v10 || (unint64_t)v4 > v23 || v27 > (unint64_t)v28)
            goto LABEL_69;
          a2[1] = v23;
          a2[2] = v27;
          if (a3)
            goto LABEL_34;
          return 0;
        }
      }
    }
LABEL_68:
    __break(0x5513u);
    goto LABEL_69;
  }
  v9 = *v6;
  v10 = v9 != 128 && v9 >= 0x1F;
  if (!v10)
    return 3;
  v8 = 0;
  result = 3;
  while (v7 >= 2)
  {
    v11 = v8;
    if (v8 >> 57)
      break;
    if (v6 == (unsigned __int8 *)-1)
      goto LABEL_68;
    if (v6 >= v5 || v6 < v4)
      goto LABEL_69;
    v12 = (char *)(v6 + 1);
    --v7;
    v13 = *v6;
    v8 = *v6++ & 0x7F | (v8 << 7);
    if ((v13 & 0x80) == 0)
    {
      if (v11 >> 54)
        return 3;
      goto LABEL_20;
    }
  }
  return result;
}

uint64_t DERDecodeItemPartialBuffer(uint64_t result, unint64_t *a2, int a3)
{
  unint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  BOOL v10;
  unint64_t v11;
  char *v12;
  unsigned __int8 v13;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  char v24;

  v3 = *(_QWORD *)(result + 8);
  if (v3 < 2)
    return 3;
  v4 = *(_BYTE **)result;
  if (*(_QWORD *)result == -1)
    goto LABEL_54;
  v5 = &v4[v3];
  v6 = v4 + 1;
  v7 = v3 - 1;
  v8 = *v4 & 0x1F;
  if ((*v4 & 0x1F) != 0x1F)
  {
    v12 = v4 + 1;
LABEL_20:
    *a2 = v8 | ((unint64_t)(*v4 & 0xE0) << 56);
    if (v12 != (char *)-1)
    {
      if (v12 >= v5 || v12 < v4)
        goto LABEL_55;
      v14 = v12 + 1;
      v15 = *v12;
      v16 = v7 - 1;
      if ((*v12 & 0x80000000) == 0)
      {
        v17 = v16 < v15 && a3 == 0;
        v18 = (unint64_t)(v12 + 1);
        if (v17)
          return 3;
LABEL_28:
        if (v15 > (~v18 & 0x7FFFFFFFFFFFFFFFLL))
          return 7;
        if (v18 <= v18 + v15)
        {
          result = 0;
          a2[1] = v18;
          a2[2] = v15;
          return result;
        }
        goto LABEL_55;
      }
      v19 = v15 & 0x7F;
      if ((v15 & 0x7F) > 8)
        return 3;
      if ((v15 & 0x7F) == 0 || v16 < v19)
        return 3;
      if (v14 >= v5 || v14 < v4)
      {
LABEL_55:
        __break(0x5519u);
LABEL_56:
        __break(0x5515u);
        return result;
      }
      if (!*v14)
        return 3;
      v15 = 0;
      v21 = (v19 - 1);
      v22 = v7 - v21 - 2;
      v18 = (unint64_t)&v12[v21 + 2];
      while (v14 != (_BYTE *)-1)
      {
        if (v14 >= v5)
          goto LABEL_55;
        v10 = v16-- != 0;
        if (!v10)
          goto LABEL_56;
        v23 = *v14++;
        v15 = (v15 << 8) | v23;
        LODWORD(v19) = v19 - 1;
        if (!(_DWORD)v19)
        {
          if (v15 <= v22)
            v24 = 1;
          else
            v24 = a3;
          result = 3;
          if (v15 >= 0x80 && (v24 & 1) != 0)
            goto LABEL_28;
          return result;
        }
      }
    }
LABEL_54:
    __break(0x5513u);
    goto LABEL_55;
  }
  v9 = *v6;
  v10 = v9 != 128 && v9 >= 0x1F;
  if (!v10)
    return 3;
  v8 = 0;
  result = 3;
  while (v7 >= 2)
  {
    v11 = v8;
    if (v8 >> 57)
      break;
    if (v6 == (unsigned __int8 *)-1)
      goto LABEL_54;
    if (v6 >= v5 || v6 < v4)
      goto LABEL_55;
    v12 = (char *)(v6 + 1);
    --v7;
    v13 = *v6;
    v8 = *v6++ & 0x7F | (v8 << 7);
    if ((v13 & 0x80) == 0)
    {
      if (v11 >> 54)
        return 3;
      goto LABEL_20;
    }
  }
  return result;
}

uint64_t DERParseBitString(uint64_t result, unint64_t *a2, _BYTE *a3)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unint64_t v10;

  *a3 = 0;
  *a2 = 0;
  a2[1] = 0;
  if (!*(_QWORD *)(result + 8))
    return 3;
  v3 = **(unsigned __int8 **)result;
  *a3 = v3;
  v4 = *(_QWORD *)(result + 8);
  if (v4 != 1)
  {
    if (v3 <= 7)
    {
      v5 = v4 - 1;
      if (!v4)
      {
LABEL_20:
        __break(0x5515u);
        goto LABEL_21;
      }
      v6 = *(_QWORD *)result;
      v7 = *(_QWORD *)result + v4;
      v8 = (unsigned __int8 *)(*(_QWORD *)result + v5);
      if ((unint64_t)v8 >= v7 || (unint64_t)v8 < v6)
      {
LABEL_19:
        __break(0x5519u);
        goto LABEL_20;
      }
      if (((0xFFu >> (8 - v3)) & *v8) == 0)
      {
        if (v6 == -1)
        {
LABEL_21:
          __break(0x5513u);
          return result;
        }
        v10 = v6 + 1;
        if (v6 + 1 <= v7 && v6 <= v10)
        {
          result = 0;
          *a2 = v10;
          a2[1] = v5;
          return result;
        }
        goto LABEL_19;
      }
    }
    return 3;
  }
  if (v3)
    return 3;
  else
    return 0;
}

uint64_t DERParseBoolean(unsigned __int8 **a1, BOOL *a2)
{
  int v2;
  uint64_t result;

  if (a1[1] != (unsigned __int8 *)1)
    return 3;
  v2 = **a1;
  if (v2 != 255 && v2 != 0)
    return 3;
  result = 0;
  *a2 = v2 != 0;
  return result;
}

uint64_t DERParseBooleanWithDefault(unsigned __int8 **a1, BOOL a2, BOOL *a3)
{
  unsigned __int8 *v3;
  int v4;
  uint64_t result;

  v3 = a1[1];
  if (!v3)
    goto LABEL_9;
  if (v3 == (unsigned __int8 *)1)
  {
    v4 = **a1;
    if (v4 == 255 || v4 == 0)
    {
      a2 = v4 != 0;
LABEL_9:
      result = 0;
      *a3 = a2;
      return result;
    }
  }
  return 3;
}

uint64_t DERParseInteger(char **a1, _DWORD *a2)
{
  uint64_t result;
  unint64_t v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  v4[0] = 0xAAAAAAAAAAAAAAAALL;
  result = DERParseInteger64(a1, v4);
  if (!(_DWORD)result)
  {
    if (HIDWORD(v4[0]))
    {
      return 7;
    }
    else
    {
      result = 0;
      *a2 = v4[0];
    }
  }
  return result;
}

uint64_t DERParseInteger64(char **a1, unint64_t *a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t result;
  unint64_t v5;
  unsigned int v6;

  v2 = (unint64_t)a1[1];
  if (!v2)
    return 3;
  v3 = (unsigned __int8 *)*a1;
  if (**a1 < 0)
    return 3;
  if (**a1)
  {
    if (v2 > 8)
      return 7;
    goto LABEL_10;
  }
  if (v2 >= 2)
  {
    if (((char)v3[1] & 0x80000000) == 0)
      return 3;
    if (v2 > 9)
      return 7;
  }
LABEL_10:
  v5 = 0;
  do
  {
    v6 = *v3++;
    v5 = v6 | (v5 << 8);
    --v2;
  }
  while (v2);
  result = 0;
  *a2 = v5;
  return result;
}

uint64_t DERDecodeSeqInit(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8[4];

  v8[3] = *MEMORY[0x1E0C80C00];
  memset(v8, 170, 24);
  result = DERDecodeItemPartialBufferGetLength(a1, v8, 0);
  if (!(_DWORD)result)
  {
    v6 = v8[0];
    *a2 = v8[0];
    if (v6 >> 1 == 0x1000000000000008)
    {
      if (__CFADD__(v8[1], v8[2]))
      {
        __break(0x5513u);
      }
      else
      {
        v7 = v8[1] + v8[2];
        if (v8[1] <= v8[1] + v8[2])
        {
          result = 0;
          *a3 = v8[1];
          a3[1] = v7;
          return result;
        }
      }
      __break(0x5519u);
    }
    else
    {
      return 2;
    }
  }
  return result;
}

unint64_t *DERDecodeSeqContentInit(unint64_t *result, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *result;
  v3 = result[1];
  if (__CFADD__(*result, v3))
  {
    __break(0x5513u);
  }
  else
  {
    v4 = v2 + v3;
    if (v2 <= v4)
    {
      *a2 = v2;
      a2[1] = v4;
      return 0;
    }
  }
  __break(0x5519u);
  return result;
}

uint64_t DERDecodeSeqNext(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD v10[3];

  v10[2] = *MEMORY[0x1E0C80C00];
  v10[0] = 0;
  v2 = *a1;
  v3 = a1[1];
  if (*a1 >= v3)
    return 1;
  v10[0] = *a1;
  v10[1] = v3 - v2;
  result = DERDecodeItemPartialBufferGetLength((uint64_t)v10, a2, 0);
  if (!(_DWORD)result)
  {
    v8 = a2[1];
    v7 = a2[2];
    if (!__CFADD__(v8, v7))
    {
      v9 = v8 + v7;
      if (v9 <= a1[1] && *a1 <= v9)
      {
        result = 0;
        *a1 = v9;
        return result;
      }
      __break(0x5519u);
    }
    __break(0x5513u);
  }
  return result;
}

uint64_t DERParseSequenceToObject(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4, unint64_t a5, size_t a6)
{
  uint64_t result;
  unint64_t v12[4];

  v12[3] = *MEMORY[0x1E0C80C00];
  memset(v12, 170, 24);
  result = DERDecodeItemPartialBufferGetLength(a1, v12, 0);
  if (!(_DWORD)result)
  {
    if (v12[0] == 0x2000000000000010)
      return DERParseSequenceContentToObject(&v12[1], a2, a3, a4, a5, a6);
    else
      return 2;
  }
  return result;
}

uint64_t DERParseSequenceContentToObject(unint64_t *a1, unsigned int a2, uint64_t a3, unint64_t a4, unint64_t a5, size_t a6)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int16 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;
  unsigned __int16 v17;
  __int16 v18;
  unint64_t v19;
  char *v21;
  uint64_t v23;
  unint64_t v24;
  __int16 *v25;
  unint64_t v26;
  __int16 v27;
  unint64_t v28;
  char *v29;
  unint64_t v31[3];
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v32 = 0;
  if (a6)
  {
    if (a6 > a5)
      goto LABEL_59;
    bzero((void *)a4, a6);
  }
  v10 = *a1;
  v11 = a1[1];
  if (__CFADD__(*a1, v11))
    goto LABEL_58;
  v12 = v10 + v11;
  if (v10 > v12)
LABEL_59:
    __break(0x5519u);
  v32 = *a1;
  v33 = v12;
  if (a2)
  {
    v13 = 0;
    v29 = (char *)(a4 + a5);
    while (1)
    {
      memset(v31, 170, sizeof(v31));
      v15 = v32;
      v14 = v33;
      result = DERDecodeSeqNext(&v32, v31);
      if ((_DWORD)result)
        break;
      if (a2 <= v13)
        return 2;
      while (1)
      {
        if (24 * (__int16)v13 > (unint64_t)~a3)
          goto LABEL_58;
        v17 = v13;
        v18 = *(_WORD *)(a3 + 24 * v13 + 16);
        if ((v18 & 2) != 0 || v31[0] == *(_QWORD *)(a3 + 24 * v13 + 8))
          break;
        result = 2;
        if ((v18 & 1) != 0)
        {
          ++v13;
          if (a2 > (unsigned __int16)(v17 + 1))
            continue;
        }
        return result;
      }
      if ((v18 & 4) == 0)
      {
        v19 = *(_QWORD *)(a3 + 24 * v13);
        if (v19 > 0xFFFFFFFFFFFFFFEFLL || v19 + 16 > a5)
          return 7;
        if (v19 > ~a4)
          goto LABEL_58;
        v21 = (char *)(a4 + v19);
        if (v21 >= v29 || (unint64_t)v21 < a4)
          goto LABEL_59;
        *(_OWORD *)v21 = *(_OWORD *)&v31[1];
        if ((v18 & 8) != 0)
        {
          if (v15 >= v31[1])
          {
            if (v21 + 16 <= v29 && v14 >= v15 && *((_QWORD *)v21 + 1) <= v14 - v15)
            {
              *(_QWORD *)v21 = v15;
              return 3;
            }
            goto LABEL_59;
          }
          if (v21 + 16 > v29)
            goto LABEL_59;
          v23 = *((_QWORD *)v21 + 1);
          v24 = v23 + v31[1] - v15;
          if (__CFADD__(v23, v31[1] - v15))
          {
            __break(0x5500u);
            return result;
          }
          if (v14 < v15 || v24 > v14 - v15)
            goto LABEL_59;
          *(_QWORD *)v21 = v15;
          *((_QWORD *)v21 + 1) = v24;
        }
      }
      ++v13;
      if (a2 == (unsigned __int16)(v17 + 1))
      {
        if (!__CFADD__(v31[1], v31[2]))
        {
          v28 = a1[1];
          if (!__CFADD__(*a1, v28))
          {
            v10 = v31[1] + v31[2];
            v12 = *a1 + v28;
            goto LABEL_47;
          }
        }
LABEL_58:
        __break(0x5513u);
        goto LABEL_59;
      }
      if (a2 <= (unsigned __int16)(v17 + 1))
      {
        v10 = v32;
        v12 = v33;
        goto LABEL_47;
      }
    }
    if ((_DWORD)result == 1)
    {
      if (a2 <= v13)
      {
        return 0;
      }
      else
      {
        v25 = (__int16 *)(a3 + 24 * v13 + 16);
        v26 = a2 - (unint64_t)v13;
        result = 0;
        while (1)
        {
          v27 = *v25;
          v25 += 12;
          if ((v27 & 1) == 0)
            break;
          if (!--v26)
            return result;
        }
        return 5;
      }
    }
  }
  else
  {
LABEL_47:
    if (v10 == v12)
      return 0;
    else
      return 3;
  }
  return result;
}

uint64_t DERParseSequence(uint64_t result, unsigned int a2, uint64_t a3, unint64_t a4, size_t a5)
{
  if ((a4 | 0x7FFFFFFFFFFFFFFFLL) >= a4)
    return DERParseSequenceToObject(result, a2, a3, a4, ~a4 & 0x7FFFFFFFFFFFFFFFLL, a5);
  __break(0x5519u);
  return result;
}

unint64_t *DERParseSequenceContent(unint64_t *result, unsigned int a2, uint64_t a3, unint64_t a4, size_t a5)
{
  if ((a4 | 0x7FFFFFFFFFFFFFFFLL) >= a4)
    return (unint64_t *)DERParseSequenceContentToObject(result, a2, a3, a4, ~a4 & 0x7FFFFFFFFFFFFFFFLL, a5);
  __break(0x5519u);
  return result;
}

uint64_t DERDecodeSequenceWithBlock(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v4[4];

  v4[3] = *MEMORY[0x1E0C80C00];
  memset(v4, 170, 24);
  result = DERDecodeItemPartialBufferGetLength(a1, v4, 0);
  if (!(_DWORD)result)
  {
    if (v4[0] - 0x2000000000000012 >= 0xFFFFFFFFFFFFFFFELL)
      return DERDecodeSequenceContentWithBlock(&v4[1], a2);
    else
      return 2;
  }
  return result;
}

uint64_t DERDecodeSequenceContentWithBlock(unint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  char v7;
  unint64_t v8[3];
  unint64_t v9[3];

  v9[2] = *MEMORY[0x1E0C80C00];
  v9[0] = 0;
  v2 = *a1;
  v3 = a1[1];
  if (__CFADD__(*a1, v3))
  {
    __break(0x5513u);
LABEL_13:
    __break(0x5519u);
  }
  v4 = v2 + v3;
  if (v2 > v4)
    goto LABEL_13;
  v9[0] = *a1;
  v9[1] = v4;
  memset(v8, 170, sizeof(v8));
  v7 = 0;
  while (1)
  {
    LODWORD(result) = DERDecodeSeqNext(v9, v8);
    if ((_DWORD)result)
      break;
    LODWORD(result) = (*(uint64_t (**)(uint64_t, unint64_t *, char *))(a2 + 16))(a2, v8, &v7);
    if ((_DWORD)result)
      break;
    if (v7)
      return 0;
  }
  if (result <= 1)
    return 0;
  else
    return result;
}

BOOL DEROidCompare(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  size_t v4;

  result = 0;
  if (a1 && a2)
  {
    v4 = *(_QWORD *)(a1 + 8);
    return v4 == *(_QWORD *)(a2 + 8) && memcmp(*(const void **)a1, *(const void **)a2, v4) == 0;
  }
  return result;
}

void sub_19BD2ABE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void sub_19BD2C0A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD2C684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__175(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__176(uint64_t a1)
{

}

void sub_19BD2CF64(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v1);
  objc_destroyWeak(v2);
  objc_destroyWeak((id *)(v3 - 104));
  _Unwind_Resume(a1);
}

void sub_19BD2DCEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id obj, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a37, 8);
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__238(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__239(uint64_t a1)
{

}

void sub_19BD2E680(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD340AC(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

id setLocalCertificate(void *a1)
{
  id v1;
  void *v2;
  id v3;
  NSObject *v4;
  id v6;
  int v7;
  id v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
LABEL_7:
    v3 = 0;
    goto LABEL_8;
  }
  if (!isa_nsdata(v1))
  {
    ne_log_obj();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v7 = 138412290;
      v8 = (id)objc_opt_class();
      v6 = v8;
      _os_log_error_impl(&dword_19BD16000, v4, OS_LOG_TYPE_ERROR, "setLocalCertificate: unsupported data type %@.", (uint8_t *)&v7, 0xCu);

    }
    goto LABEL_7;
  }
  v3 = v2;
LABEL_8:

  return v3;
}

uint64_t ingestIKEv2Dict(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  int v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  void *v20;
  void *v21;
  int v22;
  void *v23;
  void *v24;
  void *v25;
  int v26;
  void *v27;
  uint64_t v28;
  void *v29;
  int v30;
  void *v31;
  void *v32;
  int v33;
  void *v34;
  void *v35;
  int v36;
  void *v37;
  void *v38;
  int v39;
  void *v40;
  void *v41;
  void *v42;
  char v43;
  void *v44;
  void *v45;
  int v46;
  void *v47;
  int v48;
  void *v49;
  void *v50;
  int v51;
  void *v52;
  void *v53;
  int v54;
  void *v55;
  uint64_t v56;
  void *v57;
  int v58;
  void *v59;
  uint64_t v60;
  void *v61;
  int v62;
  NSObject *v63;
  uint64_t v64;
  void *v65;
  int v66;
  void *v67;
  NEVPNIKEv2PPKConfiguration *v68;
  void *v69;
  int v70;
  NEKeychainItem *v71;
  void *v72;
  uint64_t v73;
  SEL v74;
  id v75;
  const char *v76;
  NEKeychainItem *v77;
  const char *v78;
  void *v79;
  void *v80;
  int v81;
  void *v82;
  _DWORD v84[2];
  __int16 v85;
  int v86;
  __int16 v87;
  int v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = v7;
  if (v6)
  {
    if (v7)
    {
      objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("DeadPeerDetectionRate"));
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = isa_nsstring(v9);

      if (!v10)
        goto LABEL_19;
      objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("DeadPeerDetectionRate"));
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v11, "isEqualToString:", CFSTR("None")) & 1) != 0)
      {
        v12 = 0;
      }
      else if ((objc_msgSend(v11, "isEqualToString:", CFSTR("Low")) & 1) != 0)
      {
        v12 = 1;
      }
      else if ((objc_msgSend(v11, "isEqualToString:", CFSTR("Medium")) & 1) != 0)
      {
        v12 = 2;
      }
      else
      {
        if (!objc_msgSend(v11, "isEqualToString:", CFSTR("High")))
        {
LABEL_18:

LABEL_19:
          objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("ServerCertificateIssuerCommonName"));
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "setServerCertificateIssuerCommonName:", v15);

          objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("ServerCertificateCommonName"));
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "setServerCertificateCommonName:", v16);

          objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("IKESecurityAssociationParameters"));
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          v18 = isa_nsdictionary(v17);

          if (v18)
          {
            objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("IKESecurityAssociationParameters"));
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v8, "IKESecurityAssociationParameters");
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            ingestIKEv2SAParameters(v19, v20);

          }
          objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("ChildSecurityAssociationParameters"));
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = isa_nsdictionary(v21);

          if (v22)
          {
            objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("ChildSecurityAssociationParameters"));
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v8, "childSecurityAssociationParameters");
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            ingestIKEv2SAParameters(v23, v24);

          }
          objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("CertificateType"));
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = isa_nsstring(v25);

          if (!v26)
          {
LABEL_40:
            objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("UseConfigurationAttributeInternalIPSubnet"));
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            v30 = isa_nsnumber(v29);

            if (v30)
            {
              objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("UseConfigurationAttributeInternalIPSubnet"));
              v31 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v8, "setUseConfigurationAttributeInternalIPSubnet:", objc_msgSend(v31, "BOOLValue"));

            }
            objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("DisableMOBIKE"));
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            v33 = isa_nsnumber(v32);

            if (v33)
            {
              objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("DisableMOBIKE"));
              v34 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v8, "setDisableMOBIKE:", objc_msgSend(v34, "BOOLValue"));

            }
            objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("DisableRedirect"));
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            v36 = isa_nsnumber(v35);

            if (v36)
            {
              objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("DisableRedirect"));
              v37 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v8, "setDisableRedirect:", objc_msgSend(v37, "BOOLValue"));

            }
            objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("EnablePFS"));
            v38 = (void *)objc_claimAutoreleasedReturnValue();
            v39 = isa_nsnumber(v38);

            if (v39)
            {
              objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("EnablePFS"));
              v40 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v8, "setEnablePFS:", objc_msgSend(v40, "BOOLValue"));

            }
            objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("NATKeepAliveOffloadEnable"));
            v41 = (void *)objc_claimAutoreleasedReturnValue();
            if ((isa_nsnumber(v41) & 1) != 0)
            {
              objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("NATKeepAliveOffloadEnable"));
              v42 = (void *)objc_claimAutoreleasedReturnValue();
              v43 = objc_msgSend(v42, "BOOLValue");

              if ((v43 & 1) == 0)
                objc_msgSend(v8, "setNatKeepAliveOffloadEnable:", 1);
            }
            else
            {

            }
            if (objc_msgSend(v8, "natKeepAliveOffloadEnable") == 2)
            {
              objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("NATKeepAliveInterval"));
              v44 = (void *)objc_claimAutoreleasedReturnValue();
              if (!isa_nsnumber(v44))
              {
LABEL_56:

                goto LABEL_57;
              }
              objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("NATKeepAliveInterval"));
              v45 = (void *)objc_claimAutoreleasedReturnValue();
              v46 = objc_msgSend(v45, "intValue");

              if (v46 >= 20)
              {
                objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("NATKeepAliveInterval"));
                v44 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v8, "setNatKeepAliveOffloadInterval:", objc_msgSend(v44, "intValue"));
                goto LABEL_56;
              }
            }
LABEL_57:
            objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("EnableCertificateRevocationCheck"));
            v47 = (void *)objc_claimAutoreleasedReturnValue();
            v48 = isa_nsnumber(v47);

            if (v48)
            {
              objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("EnableCertificateRevocationCheck"));
              v49 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v8, "setEnableRevocationCheck:", objc_msgSend(v49, "BOOLValue"));

              if (objc_msgSend(v8, "enableRevocationCheck"))
              {
                objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("StrictCertificateRevocationCheck"));
                v50 = (void *)objc_claimAutoreleasedReturnValue();
                v51 = isa_nsnumber(v50);

                if (v51)
                {
                  objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("StrictCertificateRevocationCheck"));
                  v52 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v8, "setStrictRevocationCheck:", objc_msgSend(v52, "BOOLValue"));

                }
              }
            }
            objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("TLSMinimumVersion"));
            v53 = (void *)objc_claimAutoreleasedReturnValue();
            v54 = isa_nsstring(v53);

            if (!v54)
            {
LABEL_70:
              objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("TLSMaximumVersion"));
              v57 = (void *)objc_claimAutoreleasedReturnValue();
              v58 = isa_nsstring(v57);

              if (!v58)
                goto LABEL_79;
              objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("TLSMaximumVersion"));
              v59 = (void *)objc_claimAutoreleasedReturnValue();
              if ((objc_msgSend(v59, "isEqualToString:", CFSTR("1.0")) & 1) != 0)
              {
                v60 = 1;
              }
              else if ((objc_msgSend(v59, "isEqualToString:", CFSTR("1.1")) & 1) != 0)
              {
                v60 = 2;
              }
              else
              {
                if (!objc_msgSend(v59, "isEqualToString:", CFSTR("1.2")))
                {
LABEL_78:

LABEL_79:
                  objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("MTU"));
                  v61 = (void *)objc_claimAutoreleasedReturnValue();
                  v62 = isa_nsnumber(v61);

                  if (v62)
                  {
                    objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("MTU"));
                    v13 = objc_claimAutoreleasedReturnValue();
                    if ((unint64_t)-[NSObject unsignedIntegerValue](v13, "unsignedIntegerValue") < 0x3E8
                      || (unint64_t)-[NSObject unsignedIntegerValue](v13, "unsignedIntegerValue") >= 0x5DD)
                    {
                      ne_log_obj();
                      v63 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
                      {
                        v84[0] = 67109632;
                        v84[1] = -[NSObject intValue](v13, "intValue");
                        v85 = 1024;
                        v86 = 1000;
                        v87 = 1024;
                        v88 = 1500;
                        _os_log_error_impl(&dword_19BD16000, v63, OS_LOG_TYPE_ERROR, "invalid mtu size %d, should be between %d and %d", (uint8_t *)v84, 0x14u);
                      }

                      goto LABEL_85;
                    }
                    objc_msgSend(v8, "setMtu:", -[NSObject unsignedIntegerValue](v13, "unsignedIntegerValue"));

                  }
                  objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("ExtensibleSSOProvider"));
                  v65 = (void *)objc_claimAutoreleasedReturnValue();
                  v66 = isa_nsstring(v65);

                  if (v66)
                  {
                    objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("ExtensibleSSOProvider"));
                    v67 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v8, "setExtensibleSSOProvider:", v67);

                  }
                  objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("PPKIdentifier"));
                  v68 = (NEVPNIKEv2PPKConfiguration *)objc_claimAutoreleasedReturnValue();
                  if ((isa_nsstring(v68) & 1) != 0)
                  {
                    objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("PPK"));
                    v69 = (void *)objc_claimAutoreleasedReturnValue();
                    v70 = isa_nsdata(v69);

                    if (!v70)
                    {
LABEL_99:
                      v64 = 1;
                      goto LABEL_100;
                    }
                    v68 = objc_alloc_init(NEVPNIKEv2PPKConfiguration);
                    v71 = [NEKeychainItem alloc];
                    objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("PPK"));
                    v72 = (void *)objc_claimAutoreleasedReturnValue();
                    v73 = v8[10];
                    v75 = objc_getProperty(v8, v74, 88, 1);
                    v77 = -[NEKeychainItem initWithData:domain:accessGroup:](v71, "initWithData:domain:accessGroup:", v72, v73, v75);
                    if (v68)
                      objc_setProperty_atomic_copy(v68, v76, v77, 32);

                    objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("PPKIdentifier"));
                    v79 = (void *)objc_claimAutoreleasedReturnValue();
                    if (v68)
                      objc_setProperty_atomic_copy(v68, v78, v79, 16);

                    objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("PPKMandatory"));
                    v80 = (void *)objc_claimAutoreleasedReturnValue();
                    v81 = isa_nsnumber(v80);

                    if (v81)
                    {
                      objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("PPKMandatory"));
                      v82 = (void *)objc_claimAutoreleasedReturnValue();
                      -[NEVPNIKEv2PPKConfiguration setIsMandatory:](v68, "setIsMandatory:", objc_msgSend(v82, "BOOLValue"));

                    }
                    objc_msgSend(v8, "setPpkConfiguration:", v68);
                  }

                  goto LABEL_99;
                }
                v60 = 3;
              }
              objc_msgSend(v8, "setMaximumTLSVersion:", v60);
              goto LABEL_78;
            }
            objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("TLSMinimumVersion"));
            v55 = (void *)objc_claimAutoreleasedReturnValue();
            if ((objc_msgSend(v55, "isEqualToString:", CFSTR("1.0")) & 1) != 0)
            {
              v56 = 1;
            }
            else if ((objc_msgSend(v55, "isEqualToString:", CFSTR("1.1")) & 1) != 0)
            {
              v56 = 2;
            }
            else
            {
              if (!objc_msgSend(v55, "isEqualToString:", CFSTR("1.2")))
              {
LABEL_69:

                goto LABEL_70;
              }
              v56 = 3;
            }
            objc_msgSend(v8, "setMinimumTLSVersion:", v56);
            goto LABEL_69;
          }
          objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("CertificateType"));
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          if ((objc_msgSend(v27, "isEqualToString:", CFSTR("RSA")) & 1) != 0)
          {
            v28 = 1;
          }
          else if ((objc_msgSend(v27, "isEqualToString:", CFSTR("ECDSA256")) & 1) != 0)
          {
            v28 = 2;
          }
          else if ((objc_msgSend(v27, "isEqualToString:", CFSTR("ECDSA384")) & 1) != 0)
          {
            v28 = 3;
          }
          else if ((objc_msgSend(v27, "isEqualToString:", CFSTR("ECDSA521")) & 1) != 0)
          {
            v28 = 4;
          }
          else if ((objc_msgSend(v27, "isEqualToString:", CFSTR("Ed25519")) & 1) != 0)
          {
            v28 = 5;
          }
          else if ((objc_msgSend(v27, "isEqualToString:", CFSTR("Ed448")) & 1) != 0)
          {
            v28 = 7;
          }
          else
          {
            if (!objc_msgSend(v27, "isEqualToString:", CFSTR("RSA-PSS")))
            {
LABEL_39:

              goto LABEL_40;
            }
            v28 = 6;
          }
          objc_msgSend(v8, "setCertificateType:", v28);
          goto LABEL_39;
        }
        v12 = 3;
      }
      objc_msgSend(v8, "setDeadPeerDetectionRate:", v12);
      goto LABEL_18;
    }
    ne_log_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v84[0]) = 0;
      v14 = "ingestIKEv2Dict: uninitialized protocol";
      goto LABEL_10;
    }
  }
  else
  {
    ne_log_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v84[0]) = 0;
      v14 = "ingestIKEv2Dict: empty dictionary";
LABEL_10:
      _os_log_error_impl(&dword_19BD16000, v13, OS_LOG_TYPE_ERROR, v14, (uint8_t *)v84, 2u);
    }
  }
LABEL_85:

  v64 = 0;
LABEL_100:

  return v64;
}

void ingestIKEv2SAParameters(void *a1, void *a2)
{
  id v3;
  void *v4;
  int v5;
  void *v6;
  uint64_t v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int v13;
  void *v14;
  void *v15;
  int v16;
  const char *v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  id v22;

  v22 = a1;
  v3 = a2;
  objc_msgSend(v22, "objectForKeyedSubscript:", CFSTR("EncryptionAlgorithm"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = isa_nsstring(v4);

  if (v5)
  {
    objc_msgSend(v22, "objectForKeyedSubscript:", CFSTR("EncryptionAlgorithm"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v6, "isEqualToString:", CFSTR("DES")) & 1) != 0)
    {
      v7 = 1;
    }
    else if ((objc_msgSend(v6, "isEqualToString:", CFSTR("3DES")) & 1) != 0)
    {
      v7 = 2;
    }
    else if ((objc_msgSend(v6, "isEqualToString:", CFSTR("AES-128")) & 1) != 0)
    {
      v7 = 3;
    }
    else if ((objc_msgSend(v6, "isEqualToString:", CFSTR("AES-256")) & 1) != 0)
    {
      v7 = 4;
    }
    else if ((objc_msgSend(v6, "isEqualToString:", CFSTR("AES-128-GCM")) & 1) != 0)
    {
      v7 = 5;
    }
    else if ((objc_msgSend(v6, "isEqualToString:", CFSTR("AES-256-GCM")) & 1) != 0)
    {
      v7 = 6;
    }
    else
    {
      if (!objc_msgSend(v6, "isEqualToString:", CFSTR("ChaCha20Poly1305")))
      {
LABEL_17:

        goto LABEL_18;
      }
      v7 = 7;
    }
    objc_msgSend(v3, "setEncryptionAlgorithm:", v7);
    goto LABEL_17;
  }
LABEL_18:
  objc_msgSend(v22, "objectForKeyedSubscript:", CFSTR("IntegrityAlgorithm"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = isa_nsstring(v8);

  if (!v9)
    goto LABEL_31;
  objc_msgSend(v22, "objectForKeyedSubscript:", CFSTR("IntegrityAlgorithm"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v10, "isEqualToString:", CFSTR("SHA1-96")) & 1) != 0)
  {
    v11 = 1;
LABEL_29:
    objc_msgSend(v3, "setIntegrityAlgorithm:", v11);
    goto LABEL_30;
  }
  if ((objc_msgSend(v10, "isEqualToString:", CFSTR("SHA1-160")) & 1) != 0)
  {
    v11 = 2;
    goto LABEL_29;
  }
  if ((objc_msgSend(v10, "isEqualToString:", CFSTR("SHA2-256")) & 1) != 0)
  {
    v11 = 3;
    goto LABEL_29;
  }
  if ((objc_msgSend(v10, "isEqualToString:", CFSTR("SHA2-384")) & 1) != 0)
  {
    v11 = 4;
    goto LABEL_29;
  }
  if (objc_msgSend(v10, "isEqualToString:", CFSTR("SHA2-512")))
  {
    v11 = 5;
    goto LABEL_29;
  }
LABEL_30:

LABEL_31:
  objc_msgSend(v22, "objectForKeyedSubscript:", CFSTR("DiffieHellmanGroup"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = isa_nsnumber(v12);

  if (v13)
  {
    objc_msgSend(v22, "objectForKeyedSubscript:", CFSTR("DiffieHellmanGroup"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setDiffieHellmanGroup:", (int)objc_msgSend(v14, "intValue"));

  }
  objc_msgSend(v22, "objectForKeyedSubscript:", CFSTR("AdditionalKeyExchangeMethods"));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = isa_nsarray(v15);

  if (v16)
  {
    objc_msgSend(v22, "objectForKeyedSubscript:", CFSTR("AdditionalKeyExchangeMethods"));
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    if (v3)
      objc_setProperty_atomic(v3, v17, v18, 40);

  }
  objc_msgSend(v22, "objectForKeyedSubscript:", CFSTR("LifeTimeInMinutes"));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = isa_nsnumber(v19);

  if (v20)
  {
    objc_msgSend(v22, "objectForKeyedSubscript:", CFSTR("LifeTimeInMinutes"));
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setLifetimeMinutes:", objc_msgSend(v21, "intValue"));

  }
}

CFStringRef copyNextName(CFStringRef theString)
{
  const __CFArray *ArrayBySeparatingStrings;
  const __CFArray *v3;
  __CFArray *MutableCopy;
  CFIndex Count;
  CFIndex v6;
  const __CFString *ValueAtIndex;
  SInt32 IntValue;
  uint64_t v9;
  CFStringRef v10;
  CFStringRef v11;

  ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, theString, CFSTR(" "));
  if (ArrayBySeparatingStrings)
  {
    v3 = ArrayBySeparatingStrings;
    MutableCopy = CFArrayCreateMutableCopy(0, 0, ArrayBySeparatingStrings);
    CFRelease(v3);
  }
  else
  {
    MutableCopy = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    CFArrayAppendValue(MutableCopy, theString);
  }
  Count = CFArrayGetCount(MutableCopy);
  if (Count < 2
    || (v6 = Count - 1,
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(MutableCopy, Count - 1),
        IntValue = CFStringGetIntValue(ValueAtIndex),
        IntValue < 1))
  {
    v9 = 2;
  }
  else
  {
    v9 = (IntValue + 1);
    CFArrayRemoveValueAtIndex(MutableCopy, v6);
  }
  v10 = CFStringCreateWithFormat(0, 0, CFSTR("%d"), v9);
  CFArrayAppendValue(MutableCopy, v10);
  CFRelease(v10);
  v11 = CFStringCreateByCombiningStrings(0, MutableCopy, CFSTR(" "));
  CFRelease(MutableCopy);
  return v11;
}

id getWriterSemaphore()
{
  if (getWriterSemaphore_sema_init != -1)
    dispatch_once(&getWriterSemaphore_sema_init, &__block_literal_global_321);
  return (id)getWriterSemaphore_semaphore;
}

void __getWriterSemaphore_block_invoke()
{
  dispatch_semaphore_t v0;
  void *v1;

  v0 = dispatch_semaphore_create(1);
  v1 = (void *)getWriterSemaphore_semaphore;
  getWriterSemaphore_semaphore = (uint64_t)v0;

}

void sub_19BD514C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

void sub_19BD5348C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD53688(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD53938(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD539C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD53A50(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD53ACC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD53B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_19BD53BC0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD53C38(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id NEDNSProxyMapError(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  int v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v11;
  void *v12;
  uint8_t buf[8];
  uint64_t v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    objc_msgSend(v1, "domain");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "isEqual:", CFSTR("NEConfigurationErrorDomain"));

    if (v4)
    {
      switch(objc_msgSend(v2, "code"))
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 6:
        case 7:
        case 8:
        case 10:
        case 11:
        case 12:
        case 20:
        case 21:
          objc_msgSend(v2, "localizedDescription");
          v5 = objc_claimAutoreleasedReturnValue();
          goto LABEL_7;
        case 5:
          objc_msgSend(v2, "localizedDescription");
          v5 = objc_claimAutoreleasedReturnValue();
          v7 = 3;
          goto LABEL_8;
        case 9:
          ne_log_obj();
          v5 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_19BD16000, v5, OS_LOG_TYPE_DEFAULT, "The configuration was not saved because it was unchanged from the previously saved version", buf, 2u);
          }
          v6 = 0;
          break;
        default:
          v11 = (void *)MEMORY[0x1E0CB3940];
          objc_msgSend(v2, "localizedDescription");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "stringWithFormat:", CFSTR("Unknown: %@"), v12);
          v5 = objc_claimAutoreleasedReturnValue();

          goto LABEL_7;
      }
    }
    else
    {
      v5 = CFSTR("Unknown.");
LABEL_7:
      v7 = 1;
LABEL_8:
      v8 = (void *)MEMORY[0x1E0CB35C8];
      v14 = *MEMORY[0x1E0CB2D50];
      v15[0] = v5;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v15, &v14, 1);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "errorWithDomain:code:userInfo:", CFSTR("NEDNSProxyErrorDomain"), v7, v9);
      v6 = (void *)objc_claimAutoreleasedReturnValue();

    }
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_19BD54898(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD55020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,id location)
{
  id *v40;

  objc_destroyWeak(v40);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19BD55484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19BD5554C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_19BD57BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v20);
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19BD5B03C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD5B5D8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_19BD5D234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19BD5DE68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19BD5E350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19BD5ED4C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD5F130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  void *v14;

  objc_sync_exit(v14);
  _Unwind_Resume(a1);
}

void sub_19BD5F36C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD5F3C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_19BD60E38(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD60FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  void *v14;
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  objc_sync_exit(v14);
  _Unwind_Resume(a1);
}

void sub_19BD6121C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_19BD613D0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD6157C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD616D0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD618EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD61B24(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD63494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, uint64_t a16, uint64_t a17, id a18)
{
  id *v18;
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a18);
  _Unwind_Resume(a1);
}

void sub_19BD64264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19BD6CCD8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD6CDC4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD6CE4C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD6D148(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD6D2DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD72640(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD7283C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD72C14(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD72CA4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD72D34(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD72DB0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD72E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_19BD72EB0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD72F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_19BD72FA4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD7301C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD73194(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD73218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

id NEFilterMapError(void *a1)
{
  id v1;
  void *v2;
  int v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v10;
  void *v11;
  uint8_t buf[8];
  uint64_t v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(v1, "domain");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isEqual:", CFSTR("NEConfigurationErrorDomain"));

  if (v3)
  {
    switch(objc_msgSend(v1, "code"))
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 7:
        objc_msgSend(v1, "localizedDescription");
        v4 = objc_claimAutoreleasedReturnValue();
        v5 = 1;
        goto LABEL_7;
      case 5:
        objc_msgSend(v1, "localizedDescription");
        v4 = objc_claimAutoreleasedReturnValue();
        v5 = 3;
        goto LABEL_7;
      case 6:
      case 8:
      case 11:
      case 12:
      case 20:
        objc_msgSend(v1, "localizedDescription");
        v4 = objc_claimAutoreleasedReturnValue();
        goto LABEL_6;
      case 9:
        ne_log_obj();
        v4 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19BD16000, v4, OS_LOG_TYPE_DEFAULT, "The configuration was not saved because it was unchanged from the previously saved version", buf, 2u);
        }
        v8 = 0;
        break;
      case 10:
      case 21:
        objc_msgSend(v1, "localizedDescription");
        v4 = objc_claimAutoreleasedReturnValue();
        v5 = 5;
        goto LABEL_7;
      default:
        v10 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(v1, "localizedDescription");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "stringWithFormat:", CFSTR("Unknown: %@"), v11);
        v4 = objc_claimAutoreleasedReturnValue();

        goto LABEL_6;
    }
  }
  else
  {
    v4 = CFSTR("Unknown.");
LABEL_6:
    v5 = 6;
LABEL_7:
    v6 = (void *)MEMORY[0x1E0CB35C8];
    v13 = *MEMORY[0x1E0CB2D50];
    v14[0] = v4;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v14, &v13, 1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "errorWithDomain:code:userInfo:", CFSTR("NEFilterErrorDomain"), v5, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v8;
}

void sub_19BD73D70(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD747D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19BD74F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19BD75060(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_19BD7AE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19BD7E790(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 128));
  _Unwind_Resume(a1);
}

void sub_19BD7EEC0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD7F04C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD7FA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id location)
{
  id *v27;
  id *v28;

  objc_destroyWeak(v28);
  objc_destroyWeak(v27);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19BD80F10(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD8136C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD8141C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD814AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_19BD81540(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD815E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD81678(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD8171C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD817B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD81854(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD818D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD81964(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD819F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD81A9C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD81FDC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD822C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__6475(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6476(uint64_t a1)
{

}

void sub_19BD82898(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD82B10(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BD8343C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id obj, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v49;

  _Block_object_dispose(&a49, 8);
  _Block_object_dispose((const void *)(v49 - 176), 8);
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_19BD84304(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_19BD84C50(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id createHotspotNetworkArray(const __CFArray *a1)
{
  id v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex i;
  const void *ValueAtIndex;
  id v7;

  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  Count = CFArrayGetCount(a1);
  if (Count >= 1)
  {
    v4 = Count;
    for (i = 0; i != v4; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
      v7 = -[NEHotspotNetwork initWithNetwork:]([NEHotspotNetwork alloc], ValueAtIndex);
      objc_msgSend(v2, "addObject:", v7);

    }
  }
  return v2;
}

__CFString *NEIKEv2DigitalSignatureAlgorithmCreateString(unint64_t a1)
{
  if (a1 >= 0xC)
    return (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Unknown[%lld]"), a1);
  else
    return off_1E3CC0AD8[a1];
}

const __CFString *NEIKEv2SecurePasswordMethodCreateString(uint64_t a1)
{
  uint64_t v1;
  const __CFString *result;

  v1 = a1 + 1;
  result = CFSTR("Invalid");
  switch(v1)
  {
    case 0:
      result = CFSTR("Placeholder");
      break;
    case 1:
      return result;
    case 2:
      result = CFSTR("PACE");
      break;
    case 3:
      result = CFSTR("AugPAKE");
      break;
    case 4:
      result = CFSTR("SecurePSK");
      break;
    default:
      if (CFSTR("Invalid") == (__CFString *)11001)
        result = CFSTR("SPAKE2Plus");
      else
        result = (const __CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Unknown[%lld]"), CFSTR("Invalid"));
      break;
  }
  return result;
}

const __CFString *NEIKEv2AuthenticationMethodCreateString(uint64_t a1)
{
  const __CFString *result;

  result = CFSTR("None");
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = CFSTR("RSASignature");
      break;
    case 2:
      result = CFSTR("SharedKey");
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      goto LABEL_5;
    case 9:
      result = CFSTR("ECDSA256");
      break;
    case 10:
      result = CFSTR("ECDSA384");
      break;
    case 11:
      result = CFSTR("ECDSA521");
      break;
    case 12:
      result = CFSTR("GenericSecurePassword");
      break;
    case 13:
      result = CFSTR("NULL");
      break;
    case 14:
      result = CFSTR("DigitalSignature");
      break;
    default:
      if (a1 == 245)
        result = CFSTR("RSAPSS");
      else
LABEL_5:
        result = (const __CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Unknown[%lld]"), a1);
      break;
  }
  return result;
}

__CFString *NEIKEv2EncryptionTypeCreateString(unint64_t a1)
{
  if (a1 >= 0xA)
    return (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Unknown[%lld]"), a1);
  else
    return off_1E3CC0C78[a1];
}

__CFString *NEIKEv2EncryptionWireTypeCreateString(unint64_t a1)
{
  if (a1 >= 0x20)
    return (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Unknown[%lld]"), a1);
  else
    return off_1E3CC0B78[a1];
}

__CFString *NEIKEv2CreateChildSAModeString(unint64_t a1)
{
  if (a1 >= 3)
    return (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Unknown(%lld)"), a1);
  else
    return off_1E3CC0AC0[a1];
}

uint64_t NEIKEv2CreateErrorInternal(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v9;
  void *v10;
  void *v11;
  uint64_t ErrorWithDescription;
  NSObject *v14;
  _QWORD buf[4];

  buf[3] = *MEMORY[0x1E0C80C00];
  v9 = a1;
  if (v9)
  {
    buf[0] = &a9;
    v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:arguments:", v9, &a9);
    v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Internal: %@"), v10);
    ErrorWithDescription = NEIKEv2CreateErrorWithDescription(1, v11);

  }
  else
  {
    ne_log_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf[0]) = 136315138;
      *(_QWORD *)((char *)buf + 4) = "NEIKEv2CreateErrorInternal";
      _os_log_fault_impl(&dword_19BD16000, v14, OS_LOG_TYPE_FAULT, "%s called with null errorDescriptionFormat", (uint8_t *)buf, 0xCu);
    }

    ErrorWithDescription = 0;
  }

  return ErrorWithDescription;
}

uint64_t NEIKEv2CreateErrorWithDescription(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = objc_alloc(MEMORY[0x1E0CB35C8]);
  v8 = *MEMORY[0x1E0CB2D50];
  v9[0] = v3;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v9, &v8, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v4, "initWithDomain:code:userInfo:", CFSTR("NEIKEv2ErrorDomain"), a1, v5);

  if (!v6)
    abort();

  return v6;
}

const __CFString *NEIKEv2AttributeTypeCreateString(uint64_t a1)
{
  const __CFString *result;

  result = CFSTR("Invalid");
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = CFSTR("InternalIP4Address");
      break;
    case 2:
      result = CFSTR("InternalIP4Netmask");
      break;
    case 3:
      result = CFSTR("InternalIP4DNS");
      break;
    case 4:
      result = CFSTR("InternalIP4NBNS");
      break;
    case 5:
      result = CFSTR("InternalAddressExpiry");
      break;
    case 6:
      result = CFSTR("InternalIP4DHCP");
      break;
    case 7:
      result = CFSTR("ApplicationVersion");
      break;
    case 8:
      result = CFSTR("InternalIP6Address");
      break;
    case 9:
    case 11:
    case 16:
    case 17:
    case 18:
    case 19:
    case 22:
    case 23:
    case 24:
      goto LABEL_6;
    case 10:
      result = CFSTR("InternalIP6DNS");
      break;
    case 12:
      result = CFSTR("InternalIP6DHCP");
      break;
    case 13:
      result = CFSTR("InternalIP4Subnet");
      break;
    case 14:
      result = CFSTR("SupportedAttributes");
      break;
    case 15:
      result = CFSTR("InternalIP6Subnet");
      break;
    case 20:
      result = CFSTR("PCSCFIP4Address");
      break;
    case 21:
      result = CFSTR("PCSCFIP6Address");
      break;
    case 25:
      result = CFSTR("InternalDNSDomain");
      break;
    default:
      if (a1 == 25958)
      {
        result = CFSTR("InitiatorTransportIP6Address");
      }
      else if (a1 == 25959)
      {
        result = CFSTR("ResponderTransportIP6Address");
      }
      else
      {
LABEL_6:
        result = (const __CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Unknown(%lld)"), a1);
      }
      break;
  }
  return result;
}

uint64_t NEIKEv2CreateError(uint64_t a1)
{
  NSObject *v1;
  __CFString *String;
  uint64_t v3;
  uint64_t ErrorWithDescription;
  uint8_t v7[16];

  if (a1 == 1)
  {
    ne_log_obj();
    v1 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_fault_impl(&dword_19BD16000, v1, OS_LOG_TYPE_FAULT, "NEIKEv2CreateError(NEIKEv2ErrorInternal) is not allowed, use NEIKEv2CreateErrorInternal() instead", v7, 2u);
    }

    String = CFSTR("Internal");
    v3 = 1;
  }
  else
  {
    String = NEIKEv2ErrorCreateString(a1);
    v3 = a1;
  }
  ErrorWithDescription = NEIKEv2CreateErrorWithDescription(v3, String);

  return ErrorWithDescription;
}

__CFString *NEIKEv2ErrorCreateString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 0xF)
    return (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Unknown(%lld)"), a1);
  else
    return off_1E3CC0A48[a1 - 1];
}

uint64_t NEIKEv2CreateErrorFailedToSend(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v9;
  void *v10;
  void *v11;
  uint64_t ErrorWithDescription;
  NSObject *v14;
  _QWORD buf[4];

  buf[3] = *MEMORY[0x1E0C80C00];
  v9 = a1;
  if (v9)
  {
    buf[0] = &a9;
    v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:arguments:", v9, &a9);
    v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("FailedToSend: %@"), v10);
    ErrorWithDescription = NEIKEv2CreateErrorWithDescription(2, v11);

  }
  else
  {
    ne_log_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf[0]) = 136315138;
      *(_QWORD *)((char *)buf + 4) = "NEIKEv2CreateErrorFailedToSend";
      _os_log_fault_impl(&dword_19BD16000, v14, OS_LOG_TYPE_FAULT, "%s called with null errorDescriptionFormat", (uint8_t *)buf, 0xCu);
    }

    ErrorWithDescription = 0;
  }

  return ErrorWithDescription;
}

uint64_t NEIKEv2CreateErrorCrypto(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v9;
  void *v10;
  void *v11;
  uint64_t ErrorWithDescription;
  NSObject *v14;
  _QWORD buf[4];

  buf[3] = *MEMORY[0x1E0C80C00];
  v9 = a1;
  if (v9)
  {
    buf[0] = &a9;
    v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:arguments:", v9, &a9);
    v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Crypto: %@"), v10);
    ErrorWithDescription = NEIKEv2CreateErrorWithDescription(7, v11);

  }
  else
  {
    ne_log_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf[0]) = 136315138;
      *(_QWORD *)((char *)buf + 4) = "NEIKEv2CreateErrorCrypto";
      _os_log_fault_impl(&dword_19BD16000, v14, OS_LOG_TYPE_FAULT, "%s called with null errorDescriptionFormat", (uint8_t *)buf, 0xCu);
    }

    ErrorWithDescription = 0;
  }

  return ErrorWithDescription;
}

uint64_t NEIKEv2CreateErrorPeerInvalidSyntax(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v9;
  void *v10;
  void *v11;
  uint64_t ErrorWithDescription;
  NSObject *v14;
  _QWORD buf[4];

  buf[3] = *MEMORY[0x1E0C80C00];
  v9 = a1;
  if (v9)
  {
    buf[0] = &a9;
    v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:arguments:", v9, &a9);
    v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("PeerInvalidSyntax: %@"), v10);
    ErrorWithDescription = NEIKEv2CreateErrorWithDescription(6, v11);

  }
  else
  {
    ne_log_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf[0]) = 136315138;
      *(_QWORD *)((char *)buf + 4) = "NEIKEv2CreateErrorPeerInvalidSyntax";
      _os_log_fault_impl(&dword_19BD16000, v14, OS_LOG_TYPE_FAULT, "%s called with null errorDescriptionFormat", (uint8_t *)buf, 0xCu);
    }

    ErrorWithDescription = 0;
  }

  return ErrorWithDescription;
}

uint64_t NEIKEv2CreateErrorAuthentication(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v9;
  void *v10;
  void *v11;
  uint64_t ErrorWithDescription;
  NSObject *v14;
  _QWORD buf[4];

  buf[3] = *MEMORY[0x1E0C80C00];
  v9 = a1;
  if (v9)
  {
    buf[0] = &a9;
    v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:arguments:", v9, &a9);
    v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Authentication: %@"), v10);
    ErrorWithDescription = NEIKEv2CreateErrorWithDescription(8, v11);

  }
  else
  {
    ne_log_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf[0]) = 136315138;
      *(_QWORD *)((char *)buf + 4) = "NEIKEv2CreateErrorAuthentication";
      _os_log_fault_impl(&dword_19BD16000, v14, OS_LOG_TYPE_FAULT, "%s called with null errorDescriptionFormat", (uint8_t *)buf, 0xCu);
    }

    ErrorWithDescription = 0;
  }

  return ErrorWithDescription;
}

__CFString *NEIKEv2HashTypeCreateString(unint64_t a1)
{
  if (a1 >= 6)
    return (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Unknown(%lld)"), a1);
  else
    return off_1E3CC0DD0[a1];
}

uint64_t NEIKEv2ASN1CheckForNULLItem(uint64_t a1, _DWORD *a2)
{
  int v3;
  __int128 v5;
  uint64_t v6;

  v6 = 0;
  v5 = xmmword_19BED6F80;
  if (*(_QWORD *)(a1 + 8))
  {
    v3 = DERDecodeItem(a1, (unint64_t *)&v5);
    *a2 = v3;
    if (v3 || (v5 & 0x1FFFFFFFFFFFFFFFLL) != 5)
      return 0;
  }
  else
  {
    *a2 = 0;
  }
  return 1;
}

uint64_t NEIKEv2ASN1DecodeIntegerItem(uint64_t a1, int *a2)
{
  int v3;
  int v4;
  uint64_t result;
  unsigned int v6;
  unint64_t v7;
  char *v8[2];

  v7 = 0;
  v8[0] = 0;
  v8[1] = 0;
  v3 = DERDecodeItem(a1, &v7);
  if (v3)
  {
    v4 = v3;
    result = 0;
  }
  else if (v7 == 2)
  {
    v6 = 0;
    v4 = DERParseInteger(v8, &v6);
    if (v4)
      result = 0;
    else
      result = v6;
  }
  else
  {
    result = 0;
    v4 = 2;
  }
  *a2 = v4;
  return result;
}

uint64_t __Block_byref_object_copy__8858(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8859(uint64_t a1)
{

}

void sub_19BDE64D8(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 112));
  _Unwind_Resume(a1);
}

void sub_19BDF7FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__11403(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__11404(uint64_t a1)
{

}

void sub_19BDF897C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  id *v9;

  objc_destroyWeak(v9);
  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

void sub_19BDFAB30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19BDFB060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19BDFDE28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id *a12, id *a13, id *location, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,id a58)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a22);
  _Unwind_Resume(a1);
}

uint64_t NEIKEv2PacketTunnelProviderGetSocket(void *a1, uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4, void *a5)
{
  id v9;
  SEL v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  void *v15;
  dispatch_semaphore_t v16;
  SEL v17;
  id v18;
  SEL v19;
  NSObject *v20;
  dispatch_time_t v21;
  intptr_t v22;
  const char *v23;
  NSObject *v24;
  _QWORD v26[4];
  id v27;
  uint64_t *v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  id v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  void *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v30 = 0;
  v31 = &v30;
  v32 = 0x2020000000;
  v33 = -1;
  if (objc_getProperty(v9, v10, 160, 1))
  {
    ne_log_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v35 = "NEIKEv2PacketTunnelProviderGetSocket";
      _os_log_error_impl(&dword_19BD16000, v11, OS_LOG_TYPE_ERROR, "%s: A previous call is in progress, ignore", buf, 0xCu);
    }
LABEL_4:
    v12 = 0xFFFFFFFFLL;
    goto LABEL_20;
  }
  ne_log_obj();
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    v14 = "PFKey";
    v35 = "NEIKEv2PacketTunnelProviderGetSocket";
    v36 = 2112;
    *(_DWORD *)buf = 136315906;
    v37 = v9;
    if ((_DWORD)a2)
      v14 = "IKE";
    v38 = 2080;
    v39 = v14;
    v40 = 2080;
    v41 = a5;
    _os_log_impl(&dword_19BD16000, v13, OS_LOG_TYPE_INFO, "%s: %@: socket type %s (%s)", buf, 0x2Au);
  }

  if ((_DWORD)a2)
  {
    if (!a3 || !a4)
    {
      ne_log_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315394;
        v35 = "NEIKEv2PacketTunnelProviderGetSocket";
        v36 = 2112;
        v37 = v9;
        _os_log_impl(&dword_19BD16000, v11, OS_LOG_TYPE_INFO, "%s: %@: Null local/remote", buf, 0x16u);
      }
      goto LABEL_4;
    }
    v11 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", a3, *a3);
    v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", a4, *a4);
    if (a5)
      a5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithUTF8String:", a5);
  }
  else
  {
    a5 = 0;
    v15 = 0;
    v11 = 0;
  }
  v16 = dispatch_semaphore_create(0);
  objc_setProperty_atomic(v9, v17, v16, 160);

  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3221225472;
  v26[2] = __NEIKEv2PacketTunnelProviderGetSocket_block_invoke;
  v26[3] = &unk_1E3CC15F0;
  v18 = v9;
  v29 = a2;
  v27 = v18;
  v28 = &v30;
  objc_msgSend(v18, "requestSocket:interface:local:remote:completionHandler:", a2, a5, v11, v15, v26);
  v20 = objc_getProperty(v18, v19, 160, 1);
  v21 = dispatch_time(0, 2000000000);
  v22 = dispatch_semaphore_wait(v20, v21);

  if (v22)
  {
    ne_log_obj();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v35 = "NEIKEv2PacketTunnelProviderGetSocket";
      v36 = 2112;
      v37 = v18;
      _os_log_error_impl(&dword_19BD16000, v24, OS_LOG_TYPE_ERROR, "%s: %@ Wait Timeout\n", buf, 0x16u);
    }

  }
  objc_setProperty_atomic(v18, v23, 0, 160);
  v12 = *((unsigned int *)v31 + 6);

LABEL_20:
  _Block_object_dispose(&v30, 8);

  return v12;
}

void sub_19BDFE2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19BDFEC88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void NEIKEv2PacketTunnelHandleConnected(void *a1)
{
  NSObject *v1;
  int v2;
  const __CFString *v3;
  const char *v4;
  id v5;
  const char *v6;
  void *v7;
  id v8;
  const char *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  BOOL v14;
  const char *v15;
  id v16;
  SEL v17;
  id Property;
  SEL v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  NEDNSSettings *v30;
  NSObject *v31;
  uint64_t v32;
  NEPacketTunnelNetworkSettings *v33;
  SEL v34;
  id v35;
  SEL v36;
  id v37;
  SEL v38;
  id v39;
  id v40;
  id v41;
  id v42;
  NEIPv4Settings *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  SEL v56;
  id v57;
  SEL v58;
  id v59;
  SEL v60;
  id v61;
  id v62;
  id v63;
  __CFString *v64;
  uint64_t v65;
  uint64_t v66;
  __CFString *v67;
  uint64_t v68;
  uint64_t i;
  void *v70;
  void *v71;
  uint64_t v72;
  void *v73;
  id v74;
  void *v75;
  void *v76;
  NEIPv6Settings *v77;
  __CFString *v78;
  void *v79;
  NEIPv6Settings *v80;
  void *v81;
  _BYTE *v82;
  SEL v83;
  id v84;
  const char *v85;
  void *v86;
  _BYTE *v87;
  char v88;
  SEL v89;
  id v90;
  const char *v91;
  void *v92;
  _BYTE *v93;
  char v94;
  void *v95;
  NEPacketTunnelNetworkSettings *v96;
  _DWORD *self;
  id v98;
  id v99;
  id v100;
  _QWORD v101[5];
  _QWORD v102[5];
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t (*v106)(uint64_t, uint64_t);
  void (*v107)(uint64_t);
  id v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  _BYTE buf[24];
  uint64_t (*v114)(uint64_t, uint64_t);
  void (*v115)(uint64_t);
  id v116;
  uint64_t v117;

  v117 = *MEMORY[0x1E0C80C00];
  v103 = 0;
  v104 = &v103;
  v105 = 0x3032000000;
  v106 = __Block_byref_object_copy__11403;
  v107 = __Block_byref_object_dispose__11404;
  self = a1;
  v108 = self;
  ne_log_obj();
  v1 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    v2 = self[21];
    v3 = &stru_1E3CC53C8;
    *(_DWORD *)buf = 138412802;
    if ((~v2 & 0xF) == 0)
      v3 = CFSTR("Connected with Config");
    *(_QWORD *)&buf[4] = self;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v3;
    *(_WORD *)&buf[22] = 1024;
    LODWORD(v114) = v2;
    _os_log_impl(&dword_19BD16000, v1, OS_LOG_TYPE_DEFAULT, "%@: Tunnel flags - %@ <%X>", buf, 0x1Cu);
  }

  if ((~self[21] & 0xF) != 0)
    goto LABEL_35;
  v5 = objc_getProperty(self, v4, 88, 1);
  if (!v5)
    goto LABEL_29;
  v7 = v5;
  v8 = objc_getProperty(self, v6, 96, 1);
  if (!v8)
  {
LABEL_28:

    goto LABEL_29;
  }
  v10 = v8;
  v11 = objc_getProperty(self, v9, 104, 1);
  if (!v11)
  {

    goto LABEL_28;
  }
  v12 = v11;
  objc_msgSend(self, "protocolConfiguration");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = v13 == 0;

  if (v14)
    goto LABEL_29;
  v16 = objc_getProperty(self, v15, 128, 1);
  Property = objc_getProperty(self, v17, 208, 1);
  -[NEIKEv2Server getViableServerAddressForPath:](v16, Property);
  v95 = (void *)objc_claimAutoreleasedReturnValue();

  v96 = -[NETunnelNetworkSettings initWithTunnelRemoteAddress:]([NEPacketTunnelNetworkSettings alloc], "initWithTunnelRemoteAddress:", v95);
  v20 = objc_getProperty(self, v19, 88, 1);
  objc_opt_self();
  v21 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v98 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v111 = 0u;
  v112 = 0u;
  v109 = 0u;
  v110 = 0u;
  v22 = v20;
  v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v109, buf, 16);
  if (!v23)
    goto LABEL_24;
  v24 = *(_QWORD *)v110;
  do
  {
    v25 = 0;
    do
    {
      if (*(_QWORD *)v110 != v24)
        objc_enumerationMutation(v22);
      v26 = *(void **)(*((_QWORD *)&v109 + 1) + 8 * v25);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      {
        objc_msgSend(v26, "address");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v27, "hostname");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "addObject:", v28);

LABEL_18:
        goto LABEL_19;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        objc_msgSend(v26, "stringValue");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v98, "addObject:", v27);
        goto LABEL_18;
      }
LABEL_19:
      ++v25;
    }
    while (v23 != v25);
    v29 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v109, buf, 16);
    v23 = v29;
  }
  while (v29);
LABEL_24:

  if (objc_msgSend(v21, "count"))
  {
    v30 = -[NEDNSSettings initWithServers:]([NEDNSSettings alloc], "initWithServers:", v21);
    if (objc_msgSend(v98, "count"))
      -[NEDNSSettings setMatchDomains:](v30, "setMatchDomains:", v98);
  }
  else
  {
    v30 = 0;
  }

  -[NETunnelNetworkSettings setDNSSettings:](v96, "setDNSSettings:", v30);
  v35 = objc_getProperty(self, v34, 88, 1);
  v37 = objc_getProperty(self, v36, 96, 1);
  v39 = objc_getProperty(self, v38, 104, 1);
  v40 = v35;
  v41 = v37;
  v99 = v39;
  objc_opt_self();
  v111 = 0u;
  v112 = 0u;
  v109 = 0u;
  v110 = 0u;
  v42 = v40;
  v43 = (NEIPv4Settings *)objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v109, buf, 16);
  if (!v43)
  {
    v45 = 0;
    v44 = 0;
    v53 = v42;
    goto LABEL_56;
  }
  v44 = 0;
  v45 = 0;
  v46 = *(_QWORD *)v110;
  while (2)
  {
    v47 = 0;
    while (2)
    {
      if (*(_QWORD *)v110 != v46)
        objc_enumerationMutation(v42);
      v48 = *(void **)(*((_QWORD *)&v109 + 1) + 8 * v47);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        objc_msgSend(v48, "address");
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v49, "hostname");
        v50 = objc_claimAutoreleasedReturnValue();
        v51 = v45;
        v45 = (void *)v50;
        goto LABEL_46;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        objc_msgSend(v48, "address");
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v49, "hostname");
        v52 = objc_claimAutoreleasedReturnValue();
        v51 = v44;
        v44 = (void *)v52;
LABEL_46:

      }
      if (v43 != (NEIPv4Settings *)++v47)
        continue;
      break;
    }
    v43 = (NEIPv4Settings *)objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v109, buf, 16);
    if (v43)
      continue;
    break;
  }

  if (v45)
  {
    v53 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", v45, 0);
    if (v44)
      v54 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", v44, 0);
    else
      v54 = 0;
    v43 = -[NEIPv4Settings initWithAddresses:subnetMasks:]([NEIPv4Settings alloc], "initWithAddresses:subnetMasks:", v53, v54);
    +[NEIKEv2Helper createRouteArrayFromTunnelConfig:localTS:remoteTS:gatewayAddress:isIPv4:]((uint64_t)NEIKEv2Helper, v42, v41, v99, v45, 1);
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    -[NEIPv4Settings setIncludedRoutes:](v43, "setIncludedRoutes:", v55);

LABEL_56:
  }
  else
  {
    v43 = 0;
  }

  -[NEPacketTunnelNetworkSettings setIPv4Settings:](v96, "setIPv4Settings:", v43);
  v57 = objc_getProperty(self, v56, 88, 1);
  v59 = objc_getProperty(self, v58, 96, 1);
  v61 = objc_getProperty(self, v60, 104, 1);
  v62 = v57;
  v63 = v59;
  v100 = v61;
  objc_opt_self();
  v111 = 0u;
  v112 = 0u;
  v109 = 0u;
  v110 = 0u;
  v64 = (__CFString *)v62;
  v65 = -[__CFString countByEnumeratingWithState:objects:count:](v64, "countByEnumeratingWithState:objects:count:", &v109, buf, 16);
  if (!v65)
  {
    v80 = 0;
    v67 = v64;
    goto LABEL_73;
  }
  v66 = 0;
  v67 = 0;
  v68 = *(_QWORD *)v110;
  do
  {
    for (i = 0; i != v65; ++i)
    {
      if (*(_QWORD *)v110 != v68)
        objc_enumerationMutation(v64);
      v70 = *(void **)(*((_QWORD *)&v109 + 1) + 8 * i);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        objc_msgSend(v70, "address");
        v71 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v71, "hostname");
        v72 = objc_claimAutoreleasedReturnValue();

        v66 = objc_msgSend(v70, "prefix");
        v67 = (__CFString *)v72;
      }
    }
    v65 = -[__CFString countByEnumeratingWithState:objects:count:](v64, "countByEnumeratingWithState:objects:count:", &v109, buf, 16);
  }
  while (v65);

  if (v67)
  {
    v73 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", v67, 0);
    v74 = objc_alloc(MEMORY[0x1E0C99D20]);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v66);
    v75 = (void *)objc_claimAutoreleasedReturnValue();
    v76 = (void *)objc_msgSend(v74, "initWithObjects:", v75, 0);

    v77 = -[NEIPv6Settings initWithAddresses:networkPrefixLengths:]([NEIPv6Settings alloc], "initWithAddresses:networkPrefixLengths:", v73, v76);
    v78 = (__CFString *)NECreateIPv6SubnetAddressWithPrefix(v67, v66);
    if (v78)
    {
      +[NEIKEv2Helper createRouteArrayFromTunnelConfig:localTS:remoteTS:gatewayAddress:isIPv4:]((uint64_t)NEIKEv2Helper, v64, v63, v100, v78, 0);
      v79 = (void *)objc_claimAutoreleasedReturnValue();
      -[NEIPv6Settings setIncludedRoutes:](v77, "setIncludedRoutes:", v79);

      v80 = v77;
    }
    else
    {
      v80 = 0;
    }

LABEL_73:
  }
  else
  {
    v80 = 0;
  }

  -[NEPacketTunnelNetworkSettings setIPv6Settings:](v96, "setIPv6Settings:", v80);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", 1280);
  v81 = (void *)objc_claimAutoreleasedReturnValue();
  -[NEPacketTunnelNetworkSettings setMTU:](v96, "setMTU:", v81);

  if (!v96)
  {
LABEL_29:
    ne_log_obj();
    v31 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = self;
      _os_log_error_impl(&dword_19BD16000, v31, OS_LOG_TYPE_ERROR, "%@: Stopping tunnel because create tunnel settings failed", buf, 0xCu);
    }

    v32 = v104[5];
    if (v32)
      *(_BYTE *)(v32 + 77) = 1;
    v102[0] = MEMORY[0x1E0C809B0];
    v102[1] = 3221225472;
    v102[2] = __NEIKEv2PacketTunnelHandleConnected_block_invoke;
    v102[3] = &unk_1E3CC1480;
    v102[4] = &v103;
    -[NEIKEv2PacketTunnelProvider stopIKEv2TunnelWithReason:completionHandler:](self, 9, v102);
    v33 = 0;
    goto LABEL_34;
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x3032000000;
  v114 = __Block_byref_object_copy__11403;
  v115 = __Block_byref_object_dispose__11404;
  v82 = self;
  v116 = v82;
  v101[0] = MEMORY[0x1E0C809B0];
  v101[1] = 3221225472;
  v101[2] = __NEIKEv2PacketTunnelHandleConnected_block_invoke_2;
  v101[3] = &unk_1E3CC14A8;
  v101[4] = buf;
  objc_msgSend(v82, "setTunnelNetworkSettings:completionHandler:", v96, v101);
  v84 = objc_getProperty(v82, v83, 240, 1);
  v86 = v84;
  if (v84)
  {
    v87 = objc_getProperty(v84, v85, 336, 1);
    if (v87)
    {
      v88 = v87[12] & 1;
      goto LABEL_78;
    }
  }
  else
  {
    v87 = 0;
  }
  v88 = 0;
LABEL_78:
  v82[76] = v88;

  v90 = objc_getProperty(v82, v89, 240, 1);
  v92 = v90;
  if (v90)
  {
    v93 = objc_getProperty(v90, v91, 336, 1);
    if (v93)
    {
      v94 = v93[11] & 1;
      goto LABEL_81;
    }
  }
  else
  {
    v93 = 0;
  }
  v94 = 0;
LABEL_81:
  v82[79] = v94;

  _Block_object_dispose(buf, 8);
  v33 = v96;
LABEL_34:

LABEL_35:
  _Block_object_dispose(&v103, 8);

}

void sub_19BE01E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

void sub_19BE02B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19BE02FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19BE0554C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19BE05B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

__int128 *ne_loopback_protocol_get_id()
{
  if (ne_loopback_protocol_get_id_protocolOnce != -1)
    dispatch_once(&ne_loopback_protocol_get_id_protocolOnce, &__block_literal_global_12024);
  return &g_identifier;
}

void __ne_loopback_protocol_get_id_block_invoke()
{
  NSObject *v0;
  uint8_t v1[16];

  xmmword_1EE413410 = 0u;
  unk_1EE413420 = 0u;
  xmmword_1EE4133F0 = 0u;
  unk_1EE413400 = 0u;
  xmmword_1EE4133D0 = 0u;
  *(_OWORD *)&qword_1EE4133E0 = 0u;
  xmmword_1EE4133B0 = 0u;
  unk_1EE4133C0 = 0u;
  xmmword_1EE413390 = 0u;
  unk_1EE4133A0 = 0u;
  xmmword_1EE413370 = 0u;
  *(_OWORD *)&qword_1EE413380 = 0u;
  xmmword_1EE413350 = 0u;
  unk_1EE413360 = 0u;
  xmmword_1EE413330 = 0u;
  unk_1EE413340 = 0u;
  g_callbacks = 0u;
  qword_1EE413450 = 0;
  g_identifier = 0u;
  unk_1EE413440 = 0u;
  __strlcpy_chk();
  qword_1EE413450 = 0x100000004;
  nw_protocol_set_default_one_to_one_callbacks();
  *(_QWORD *)&g_callbacks = ne_loopback_add_input_handler;
  *((_QWORD *)&g_callbacks + 1) = ne_loopback_remove_input_handler;
  *(_QWORD *)&xmmword_1EE413370 = ne_loopback_get_input_frames;
  *((_QWORD *)&xmmword_1EE413370 + 1) = ne_loopback_get_output_frames;
  qword_1EE413380 = (uint64_t)ne_loopback_finalize_output_frames;
  *(_QWORD *)&xmmword_1EE4133D0 = ne_loopback_supports_external_data;
  qword_1EE4133E0 = (uint64_t)ne_loopback_output_finished;
  qword_1EE413348 = (uint64_t)ne_loopback_connected;
  *((_QWORD *)&xmmword_1EE413350 + 1) = ne_loopback_error;
  *((_QWORD *)&xmmword_1EE413330 + 1) = ne_loopback_connect;
  unk_1EE413340 = ne_loopback_disconnect;
  if ((nw_protocol_register_extended() & 1) == 0)
  {
    ne_log_obj();
    v0 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v1 = 0;
      _os_log_error_impl(&dword_19BD16000, v0, OS_LOG_TYPE_ERROR, "Failed to register the np_tunnel_flow protocol", v1, 2u);
    }

  }
}

uint64_t ne_loopback_add_input_handler(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *v3;

  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 32) = a1;
  *(_QWORD *)(a1 + 48) = a2;
  if (v2)
    v3 = (unsigned __int8 *)(v2 + 40);
  else
    v3 = 0;
  uuid_copy(v3, (const unsigned __int8 *)a2);
  return 1;
}

BOOL ne_loopback_remove_input_handler(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v7;
  void *v8;

  *(_QWORD *)(a2 + 32) = 0;
  v4 = a1[6];
  if (v4 == a2)
  {
    a1[6] = 0;
    v7 = a1[4];
    if (v7)
      (*(void (**)(void))(*(_QWORD *)(v7 + 24) + 8))();
    if (a3)
    {
      v8 = (void *)a1[5];
      a1[5] = 0;

    }
  }
  return v4 == a2;
}

uint64_t ne_loopback_get_input_frames(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  uint64_t v11;
  NSObject *v13;
  uint32_t v14;
  unsigned int v15;
  size_t v16;
  void *v17;
  void *v18;
  void *v19;
  NSObject *v20;
  const void *v21;
  __int16 v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  uint8_t buf[8];
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  void *v30;
  uint64_t *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 40))
    return 0;
  v23 = 0;
  v24 = &v23;
  v25 = 0x2020000000;
  v26 = 0;
  nw_frame_array_init();
  if (!a4 || !a5)
  {
    ne_log_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = a5;
      LOWORD(v28) = 1024;
      *(_DWORD *)((char *)&v28 + 2) = a4;
      v9 = "Maximum frame count (%u) and/or maximum byte count (%u) is 0";
      v10 = buf;
      v13 = v8;
      v14 = 14;
      goto LABEL_28;
    }
    goto LABEL_8;
  }
  if (nw_frame_array_is_empty())
  {
    ne_log_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      v9 = "No input data currently available";
      v10 = buf;
LABEL_15:
      v13 = v8;
      v14 = 2;
LABEL_28:
      _os_log_debug_impl(&dword_19BD16000, v13, OS_LOG_TYPE_DEBUG, v9, v10, v14);
      goto LABEL_8;
    }
    goto LABEL_8;
  }
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  v28 = 3221225472;
  v29 = __90__NELoopbackConnection_addInputFramesToArray_maximumBytes_minimumBytes_maximumFrameCount___block_invoke;
  v30 = &unk_1E3CC1700;
  v31 = &v23;
  nw_frame_array_foreach();
  if (*((_DWORD *)v24 + 6) < a3)
  {
    ne_log_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      v22 = 0;
      v9 = "Not enough data available to meet the required minimum";
      v10 = (uint8_t *)&v22;
      goto LABEL_15;
    }
LABEL_8:
    v11 = 0;
    goto LABEL_9;
  }
  nw_frame_array_first();
  v8 = objc_claimAutoreleasedReturnValue();
  if (!v8)
  {
    v11 = 0;
    goto LABEL_10;
  }
  v11 = 0;
  v15 = 0;
  do
  {
    if (v11 >= a5)
      break;
    v16 = a4 - v15;
    if (a4 <= v15)
      break;
    nw_frame_array_next();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    if (nw_frame_unclaimed_length() + v15 <= a4)
    {
      nw_frame_array_remove();
      nw_frame_array_append();
      v15 += nw_frame_unclaimed_length();
      v20 = v8;
      v8 = v17;
    }
    else
    {
      v18 = malloc_type_malloc(a4 - v15, 0x100004077774924uLL);
      if (!v18)
      {

        break;
      }
      v19 = (void *)nw_frame_create();
      nw_frame_array_append();
      v20 = v19;
      v21 = (const void *)nw_frame_unclaimed_bytes();
      memcpy(v18, v21, v16);
      nw_frame_claim();
      v15 = a4;
    }

    v11 = (v11 + 1);
  }
  while (v8);
LABEL_9:

LABEL_10:
  _Block_object_dispose(&v23, 8);
  return v11;
}

void sub_19BE08C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ne_loopback_get_output_frames(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  uint64_t v13;
  BOOL v14;

  v5 = *(_QWORD *)(a1 + 40);
  if (!v5)
    return 0;
  nw_frame_array_init();
  result = 0;
  if (a4 && a5)
  {
    v9 = 0;
    v10 = *(_QWORD *)(v5 + 128);
    while (1)
    {
      v11 = *(_QWORD *)(v5 + 8 + 8 * v10);
      v12 = v11 >= a4 ? a4 : v11;
      if (!malloc_type_malloc(v12, 0x100004077774924uLL))
        break;
      nw_frame_create();
      nw_frame_array_append();
      v13 = *(_QWORD *)(v5 + 128);
      if (v13 == 3)
        v10 = 0;
      else
        v10 = v13 + 1;
      *(_QWORD *)(v5 + 128) = v10;
      a4 -= v12;
      result = (v9 + 1);
      if (a4)
        v14 = a5 - 1 == (_DWORD)v9;
      else
        v14 = 1;
      v9 = (v9 + 1);
      if (v14)
        return result;
    }
    return v9;
  }
  return result;
}

uint64_t ne_loopback_finalize_output_frames(uint64_t a1)
{
  id v1;
  const char *v2;

  v1 = *(id *)(a1 + 40);
  nw_frame_array_foreach();
  -[NELoopbackConnection notifyInputHandler](v1, v2);

  return 1;
}

uint64_t ne_loopback_supports_external_data(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 24) + 176))();
}

void ne_loopback_output_finished(uint64_t a1)
{
  _QWORD *v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(void);
  _QWORD *v6;
  uint8_t buf[4];
  uint64_t v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v1 = *(id *)(a1 + 40);
  v6 = v1;
  if (v1)
  {
    ne_log_obj();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v3 = v6[17];
      *(_DWORD *)buf = 134218240;
      v8 = v3;
      v9 = 1024;
      v10 = nw_frame_array_unclaimed_length();
      _os_log_impl(&dword_19BD16000, v2, OS_LOG_TYPE_DEFAULT, "Loopback received output finished with %llu bytes received, current input bytes %u", buf, 0x12u);
    }

    v1 = v6;
    v4 = v6[11];
    if (v4)
    {
      v5 = *(void (**)(void))(*(_QWORD *)(v4 + 24) + 184);
      if (v5)
      {
        v5();
        v1 = v6;
      }
    }
  }
  -[NELoopbackConnection notifyInputHandler](v1, (const char *)v1);

}

uint64_t ne_loopback_connected(uint64_t result, uint64_t a2)
{
  if (*(_QWORD *)(result + 32) == a2)
    return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(result + 48) + 24) + 40))();
  return result;
}

uint64_t ne_loopback_error(uint64_t result)
{
  if (result)
  {
    result = *(_QWORD *)(result + 48);
    if (result)
      return (*(uint64_t (**)(void))(*(_QWORD *)(result + 24) + 56))();
  }
  return result;
}

uint64_t ne_loopback_connect(uint64_t a1)
{
  id v1;
  const char *v2;
  void *v3;
  id v4;
  void *v6;

  v1 = *(id *)(a1 + 40);
  v3 = v1;
  if (v1)
    objc_getProperty(v1, v2, 120, 1);
  v6 = v3;
  v4 = v3;
  nw_queue_context_async();

  return 1;
}

void ne_loopback_disconnect(uint64_t a1)
{
  id v1;
  const char *v2;
  void *v3;
  id v4;
  void *v5;

  v1 = *(id *)(a1 + 40);
  v3 = v1;
  if (v1)
    objc_getProperty(v1, v2, 120, 1);
  v5 = v3;
  v4 = v3;
  nw_queue_context_async();

}

char *ne_loopback_protocol_create(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  void *v6;
  NELoopbackConnection *v7;
  id v8;
  char *v9;
  char *v10;
  char *v11;
  objc_super v13;

  v4 = a2;
  v5 = a3;
  if (ne_loopback_protocol_get_id_protocolOnce != -1)
    dispatch_once(&ne_loopback_protocol_get_id_protocolOnce, &__block_literal_global_12024);
  if (nw_protocols_are_equal())
  {
    v6 = (void *)nw_parameters_copy_context();
    v7 = [NELoopbackConnection alloc];
    v8 = v6;
    if (v7
      && (v13.receiver = v7,
          v13.super_class = (Class)NELoopbackConnection,
          (v9 = (char *)objc_msgSendSuper2(&v13, sel_init)) != 0))
    {
      v10 = v9;
      *(_OWORD *)(v9 + 8) = xmmword_19BED74D0;
      *(_OWORD *)(v9 + 24) = xmmword_19BED74E0;
      *(_OWORD *)(v9 + 40) = 0u;
      v11 = v9 + 40;
      *(_OWORD *)(v9 + 56) = 0u;
      *(_OWORD *)(v9 + 72) = 0u;
      *(_OWORD *)(v9 + 88) = 0u;
      *((_QWORD *)v9 + 7) = &g_identifier;
      *((_QWORD *)v9 + 8) = &g_callbacks;
      objc_storeStrong((id *)v9 + 15, v6);
      nw_frame_array_init();

      *((_QWORD *)v10 + 10) = v10;
    }
    else
    {

      v11 = 0;
    }

  }
  else
  {
    v11 = 0;
  }

  return v11;
}

uint64_t __ne_loopback_disconnect_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
    v2 = v1 + 40;
  else
    v2 = 0;
  result = *(_QWORD *)(v2 + 48);
  if (result)
    return (*(uint64_t (**)(void))(*(_QWORD *)(result + 24) + 48))();
  return result;
}

uint64_t __ne_loopback_connect_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
    v2 = v1 + 40;
  else
    v2 = 0;
  result = *(_QWORD *)(v2 + 48);
  if (result)
    return (*(uint64_t (**)(void))(*(_QWORD *)(result + 24) + 40))();
  return result;
}

uint64_t __ne_loopback_finalize_output_frames_block_invoke(uint64_t a1, void *a2)
{
  id v2;

  v2 = a2;
  nw_frame_array_remove();
  nw_frame_finalize();

  return 1;
}

void ne_loopback_output_frame_finalizer(void *a1, int a2, uint64_t a3)
{
  id v4;

  if (a2)
  {
    if (a3)
    {
      v4 = a1;
      *(_QWORD *)(a3 + 136) += nw_frame_unclaimed_length();
      nw_frame_get_buffer();
      nw_frame_reset();
      nw_frame_array_append();

    }
  }
  else
  {
    ne_loopback_input_frame_finalizer(a1);
  }
}

void ne_loopback_input_frame_finalizer(void *a1)
{
  id v1;
  void *buffer;

  v1 = a1;
  buffer = (void *)nw_frame_get_buffer();
  nw_frame_reset();

  free(buffer);
}

void sub_19BE0CFC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

__CFString *NEIKEv2RequestContextTypeString(unsigned int a1)
{
  if (a1 >= 8)
    return (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Unknown(%lld)"), a1);
  else
    return off_1E3CC18F8[a1];
}

void sub_19BE107D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19BE10D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

__CFString *NEIKEv2CreateSessionStateString(unint64_t a1)
{
  if (a1 >= 5)
    return (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Unknown(%lld)"), a1);
  else
    return off_1E3CC18D0[a1];
}

void sub_19BE12688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19BE13240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id *location)
{
  uint64_t v13;
  uint64_t v14;

  if (v13)
    objc_destroyWeak(location);
  objc_destroyWeak((id *)(v14 - 136));
  _Unwind_Resume(a1);
}

void sub_19BE14278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19BE145B4(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_19BE146C8(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_19BE1886C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

id NEIKEv2TransportCopyNATTFramerDefinition()
{
  if (NEIKEv2TransportCopyNATTFramerDefinition_onceToken != -1)
    dispatch_once(&NEIKEv2TransportCopyNATTFramerDefinition_onceToken, &__block_literal_global_12865);
  return (id)NEIKEv2TransportCopyNATTFramerDefinition_definition;
}

void sub_19BE1B8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id NEIKEv2TransportCopyTCPFramerDefinition()
{
  if (NEIKEv2TransportCopyTCPFramerDefinition_onceToken != -1)
    dispatch_once(&NEIKEv2TransportCopyTCPFramerDefinition_onceToken, &__block_literal_global_10);
  return (id)NEIKEv2TransportCopyTCPFramerDefinition_definition;
}

void sub_19BE1BCDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19BE1BFC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19BE1F4D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_19BE1F7D4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BE1F920(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

_QWORD *NEIPSecDBCreateSessionWithSocket(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t Instance;
  _QWORD *v10;
  unint64_t v11;
  CFTypeRef v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  dispatch_queue_t v16;
  NSObject *v17;
  dispatch_queue_t v18;
  const __CFAllocator *v19;
  const CFDictionaryKeyCallBacks *v20;
  const CFDictionaryValueCallBacks *v21;
  CFMutableDictionaryRef Mutable;
  NSObject *v23;
  NSObject *v24;
  _QWORD block[5];
  uint8_t buf[4];
  _QWORD *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (__NEIPSecDBInitialize_onceToken != -1)
    dispatch_once(&__NEIPSecDBInitialize_onceToken, &__block_literal_global_13027);
  if (!g_IPSecDBSessions)
    return 0;
  Instance = _CFRuntimeCreateInstance();
  v10 = (_QWORD *)Instance;
  if (!Instance)
    return v10;
  *(_QWORD *)(Instance + 104) = 0;
  *(_OWORD *)(Instance + 88) = 0u;
  *(_OWORD *)(Instance + 72) = 0u;
  *(_OWORD *)(Instance + 56) = 0u;
  *(_OWORD *)(Instance + 40) = 0u;
  *(_OWORD *)(Instance + 24) = 0u;
  do
    v11 = __ldxr(&sNEIPSecDBIndex);
  while (__stxr(v11 + 1, &sNEIPSecDBIndex));
  *(_QWORD *)(Instance + 16) = v11;
  if (a2)
    v12 = CFRetain(a2);
  else
    v12 = 0;
  v10[3] = v12;
  v10[4] = a3;
  v10[5] = a4;
  v13 = _NEIPSecDBGetQueue();
  v14 = NEPFKeyOpen(v13, NEIPSecDBReceivePFKeyMessage, (uint64_t)v10, a5);
  v10[8] = v14;
  if (!v14)
    goto LABEL_15;
  v15 = v14;
  v16 = _NEIPSecDBGetQueue();
  NEPFKeySendRegister(v15, (uint64_t)v16, 2u);
  v17 = v10[8];
  v18 = _NEIPSecDBGetQueue();
  NEPFKeySendRegister(v17, (uint64_t)v18, 3u);
  v10[9] = 0x100000001;
  v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v20 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v21 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v10[10] = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  Mutable = CFDictionaryCreateMutable(v19, 0, v20, v21);
  v10[11] = Mutable;
  if (!v10[10] || !Mutable)
  {
LABEL_15:
    CFRelease(v10);
    return 0;
  }
  v23 = _NEIPSecDBGetQueue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __NEIPSecDBCreateSessionWithSocket_block_invoke;
  block[3] = &__block_descriptor_tmp;
  block[4] = v10;
  dispatch_sync(v23, block);
  v24 = ne_log_obj();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    v28 = v10;
    _os_log_impl(&dword_19BD16000, v24, OS_LOG_TYPE_INFO, "Created a new NEIPSecDB session %@", buf, 0xCu);
  }
  return v10;
}

dispatch_queue_t _NEIPSecDBGetQueue()
{
  dispatch_queue_t result;
  NSObject *v1;

  result = (dispatch_queue_t)_NEIPSecDBGetQueue_db_queue;
  if (!_NEIPSecDBGetQueue_db_queue)
  {
    v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    result = dispatch_queue_create("NEIPSecDB PFKey IO Queue", v1);
    _NEIPSecDBGetQueue_db_queue = (uint64_t)result;
  }
  return result;
}

void NEIPSecDBReceivePFKeyMessage(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  const __CFArray *v4;
  int v7;
  const __CFDictionary *v8;
  int v9;
  NSObject *v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  char *v17;
  int v18;
  int v19;
  __CFDictionary *v20;
  NSObject *v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  CFIndex Count;
  size_t v32;
  const void **v33;
  const void **v34;
  uint64_t v35;
  int v36;
  void *Value;
  void *v38;
  const __CFString *v39;
  const void *v40;
  const __CFString *v41;
  const void *v42;
  void *v43;
  const __CFString *v44;
  const void *v45;
  const __CFString *v46;
  const void *v47;
  int v48;
  int v49;
  __CFDictionary *v50;
  int v51;
  NSObject *v52;
  const void **v53;
  int v54;
  int v55;
  NSObject *v56;
  char v57;
  const __CFAllocator *v58;
  __CFDictionary *Mutable;
  __CFDictionary *v60;
  int v61;
  const __CFString *v62;
  int v63;
  uint64_t v64;
  int v65;
  const __CFAllocator *v66;
  CFMutableDictionaryRef v67;
  __CFDictionary *v68;
  uint64_t v69;
  CFStringRef v70;
  CFStringRef v71;
  CFStringRef v72;
  CFStringRef v73;
  CFStringRef v74;
  CFStringRef v75;
  unsigned __int16 *v76;
  int v77;
  const __CFString *v78;
  const void *v79;
  int v80;
  uint64_t v81;
  int v82;
  const __CFString *v83;
  int v84;
  uint64_t v85;
  __CFDictionary *v86;
  uint64_t v87;
  CFAllocatorRef *v88;
  CFStringRef v89;
  CFStringRef v90;
  const char *v91;
  int v92;
  CFStringRef v93;
  CFStringRef v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  CFStringRef v102;
  CFStringRef v103;
  CFStringRef v104;
  CFStringRef v105;
  CFStringRef v106;
  CFStringRef v107;
  uint64_t v108;
  int *v109;
  int *v110;
  time_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  int v115;
  const __CFString *v116;
  unint64_t v117;
  int v118;
  const __CFString *v119;
  const void *v120;
  int v121;
  uint64_t v122;
  int v123;
  const __CFString *v124;
  int v125;
  const void *v126;
  int v127;
  _BOOL4 v128;
  uint64_t v129;
  unsigned __int8 *v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __CFDictionary *v136;
  int v137;
  const __CFString *v138;
  int v139;
  const __CFString *v140;
  unint64_t v141;
  uint64_t v142;
  unsigned __int8 *v143;
  int v144;
  uint64_t v145;
  unsigned __int8 *v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  const void **v152;
  uint64_t v153;
  uint64_t v154;
  __int16 v155;
  int v156[2];
  uint8_t buf[4];
  uint64_t v158;
  __int16 v159;
  _BYTE v160[10];
  _BYTE v161[6];
  __int16 v162;
  unsigned int v163;
  uint64_t v164;
  CFRange v165;

  v164 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  *(_QWORD *)v156 = 0;
  v155 = 0;
  if (a3)
  {
    v4 = (const __CFArray *)g_IPSecDBSessions;
    if (g_IPSecDBSessions)
    {
      v165.length = CFArrayGetCount((CFArrayRef)g_IPSecDBSessions);
      v165.location = 0;
      if (CFArrayContainsValue(v4, v165, (const void *)a3))
      {
        CFRetain((CFTypeRef)a3);
        if (!*(_QWORD *)(a3 + 80) || !*(_QWORD *)(a3 + 88))
          goto LABEL_145;
        switch(*(_BYTE *)(v3 + 1))
        {
          case 1:
          case 2:
          case 3:
          case 5:
          case 7:
          case 9:
          case 0xA:
          case 0x1A:
            v7 = *(_DWORD *)(v3 + 12);
            if (v7 == getpid())
              goto LABEL_8;
            goto LABEL_145;
          case 4:
          case 8:
LABEL_8:
            v8 = NEIPSecDBGetSAWithMessage(a3, a1, v156);
            goto LABEL_9;
          case 0xD:
          case 0xE:
          case 0xF:
          case 0x10:
          case 0x12:
          case 0x13:
          case 0x14:
          case 0x16:
            v13 = *(_DWORD *)(v3 + 12);
            if (v13 != getpid())
              goto LABEL_145;
            *(_QWORD *)v156 = -1;
            v14 = a1[5];
            if (v14)
            {
              v15 = v14 + 8;
            }
            else
            {
              v26 = a1[23];
              if (v26)
                v15 = v26 + 8;
              else
                v15 = 0;
            }
            v154 = v15;
            v27 = a1[6];
            if (v27)
            {
              v28 = v27 + 8;
            }
            else
            {
              v29 = a1[25];
              if (v29)
                v28 = v29 + 8;
              else
                v28 = 0;
            }
            v153 = v28;
            v8 = 0;
            if (!*a1)
              goto LABEL_9;
            v30 = a1[18];
            if (!v30)
              goto LABEL_9;
            Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a3 + 88));
            if (Count < 1)
            {
LABEL_59:
              v8 = 0;
              goto LABEL_9;
            }
            v32 = Count;
            v33 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
            v34 = (const void **)malloc_type_calloc(v32, 8uLL, 0x80040B8603338uLL);
            v152 = v33;
            CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a3 + 88), v33, v34);
            v35 = 0;
            break;
          case 0x17:
            v48 = *(_DWORD *)(v3 + 12);
            if (v48 == getpid())
              goto LABEL_59;
            goto LABEL_145;
          default:
            goto LABEL_145;
        }
        do
        {
          v8 = (const __CFDictionary *)v34[v35];
          v36 = NEGetIntFromDictionary(v8, CFSTR("PolicyID"), 0);
          if (v36)
          {
            if (v36 == *(_DWORD *)(v30 + 8))
            {
              *(_DWORD *)buf = 0;
              v53 = v152;
              CFNumberGetValue((CFNumberRef)v152[v35], kCFNumberIntType, buf);
              *(_QWORD *)v156 = *(int *)buf;
              goto LABEL_65;
            }
          }
          else
          {
            Value = (void *)CFDictionaryGetValue(v8, CFSTR("Direction"));
            v38 = Value;
            if (Value)
            {
              if (CFEqual(Value, CFSTR("In")))
              {
                v39 = (const __CFString *)CFDictionaryGetValue(v8, CFSTR("LocalAddress"));
                v40 = CFDictionaryGetValue(v8, CFSTR("LocalPort"));
                v38 = NECreateAddressStructFromString(v39, (uint64_t)v40, 0);
                v41 = (const __CFString *)CFDictionaryGetValue(v8, CFSTR("RemoteAddress"));
                v42 = CFDictionaryGetValue(v8, CFSTR("RemotePort"));
                v43 = NECreateAddressStructFromString(v41, (uint64_t)v42, 0);
              }
              else if (CFEqual(v38, CFSTR("Out")))
              {
                v44 = (const __CFString *)CFDictionaryGetValue(v8, CFSTR("LocalAddress"));
                v45 = CFDictionaryGetValue(v8, CFSTR("LocalPort"));
                v43 = NECreateAddressStructFromString(v44, (uint64_t)v45, 0);
                v46 = (const __CFString *)CFDictionaryGetValue(v8, CFSTR("RemoteAddress"));
                v47 = CFDictionaryGetValue(v8, CFSTR("RemotePort"));
                v38 = NECreateAddressStructFromString(v46, (uint64_t)v47, 0);
              }
              else
              {
                v43 = 0;
                v38 = 0;
              }
            }
            else
            {
              v43 = 0;
            }
            if (NEIPSecDBAddressesMatch((uint64_t)v43, v154) && NEIPSecDBAddressesMatch((uint64_t)v38, v153))
            {
              *(_DWORD *)buf = 0;
              v53 = v152;
              CFNumberGetValue((CFNumberRef)v152[v35], kCFNumberIntType, buf);
              *(_QWORD *)v156 = *(int *)buf;
              if (v43)
                free(v43);
              if (v38)
                free(v38);
              goto LABEL_65;
            }
            if (v43)
              free(v43);
            if (v38)
              free(v38);
          }
          ++v35;
        }
        while (v32 != v35);
        v8 = 0;
        v53 = v152;
        if (!v152)
          goto LABEL_66;
LABEL_65:
        free(v53);
LABEL_66:
        free(v34);
LABEL_9:
        v9 = *(unsigned __int8 *)(v3 + 1);
        if (v9 != 23 && !v8)
        {
          v10 = ne_log_obj();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
          {
            v11 = *(unsigned __int8 *)(v3 + 1);
            v12 = NEIPSecDBExtractSPIFromPFKeyMessage(a1);
            *(_DWORD *)buf = 138412802;
            v158 = a3;
            v159 = 1024;
            *(_DWORD *)v160 = v11;
            *(_WORD *)&v160[4] = 1024;
            *(_DWORD *)&v160[6] = bswap32(v12);
            _os_log_impl(&dword_19BD16000, v10, OS_LOG_TYPE_INFO, "%@ Received PFKey SA Message that could not be matched (type %d, SPI %08X)", buf, 0x18u);
          }
LABEL_145:
          CFRelease((CFTypeRef)a3);
          return;
        }
        if (*(_BYTE *)(v3 + 2))
        {
          v16 = ne_log_obj();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
          {
            v17 = strerror(*(unsigned __int8 *)(v3 + 2));
            v18 = *(unsigned __int8 *)(v3 + 1);
            *(_DWORD *)buf = 138412802;
            v158 = a3;
            v159 = 2080;
            *(_QWORD *)v160 = v17;
            *(_WORD *)&v160[8] = 1024;
            *(_DWORD *)v161 = v18;
            _os_log_impl(&dword_19BD16000, v16, OS_LOG_TYPE_INFO, "%@ Received PFKey Message reporting error: %s (type %d)", buf, 0x1Cu);
          }
          v19 = *(unsigned __int8 *)(v3 + 1);
          switch(*(_BYTE *)(v3 + 1))
          {
            case 1:
            case 3:
              v20 = *(__CFDictionary **)(a3 + 80);
              goto LABEL_74;
            case 2:
              v51 = v156[0];
              v52 = *(NSObject **)(a3 + 96);
              v19 = 2;
              goto LABEL_70;
            case 4:
              v51 = v156[0];
              v52 = *(NSObject **)(a3 + 96);
              v19 = 4;
              goto LABEL_70;
            case 5:
              v51 = v156[0];
              v52 = *(NSObject **)(a3 + 96);
              v19 = 5;
              goto LABEL_70;
            case 6:
            case 7:
            case 8:
            case 9:
            case 0xA:
            case 0xB:
            case 0xC:
            case 0xD:
            case 0x11:
            case 0x12:
            case 0x13:
            case 0x14:
            case 0x15:
              goto LABEL_141;
            case 0xE:
              v20 = *(__CFDictionary **)(a3 + 88);
LABEL_74:
              NERemoveValueFromIntKeyedDictionary(v20, v156[0]);
              v54 = *(unsigned __int8 *)(v3 + 1);
              v55 = v156[0];
              v56 = *(NSObject **)(a3 + 96);
              goto LABEL_76;
            case 0xF:
            case 0x16:
              NEIPSecDBNotifyRequest(*(NSObject **)(a3 + 96), v19, v156[0], 0, 0);
              v49 = *(unsigned __int8 *)(v3 + 2);
              if (v49 == 22 || v49 == 2)
                goto LABEL_62;
              goto LABEL_141;
            case 0x10:
              v55 = v156[0];
              v56 = *(NSObject **)(a3 + 96);
              v54 = 16;
LABEL_76:
              v57 = 0;
              goto LABEL_140;
            default:
              if (v19 != 26)
                goto LABEL_141;
              v51 = v156[0];
              v52 = *(NSObject **)(a3 + 96);
LABEL_70:
              NEIPSecDBNotifyRequest(v52, v19, v51, 0, 0);
              if (*(_BYTE *)(v3 + 2) != 2)
                goto LABEL_141;
              v50 = *(__CFDictionary **)(a3 + 80);
              break;
          }
LABEL_72:
          NERemoveValueFromIntKeyedDictionary(v50, v156[0]);
          goto LABEL_141;
        }
        if (v9 != 23 || NEIPSecDBStatsHandleReply(a3, a1, v156, (_BYTE *)&v155 + 1, &v155))
        {
          v21 = ne_log_obj();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
          {
            v22 = *(unsigned __int8 *)(v3 + 1);
            v23 = v156[0];
            v24 = *(_DWORD *)(v3 + 12);
            v25 = NEIPSecDBExtractSPIFromPFKeyMessage(a1);
            *(_DWORD *)buf = 138413314;
            v158 = a3;
            v159 = 1024;
            *(_DWORD *)v160 = v22;
            *(_WORD *)&v160[4] = 1024;
            *(_DWORD *)&v160[6] = v23;
            *(_WORD *)v161 = 1024;
            *(_DWORD *)&v161[2] = v24;
            v162 = 1024;
            v163 = bswap32(v25);
            _os_log_impl(&dword_19BD16000, v21, OS_LOG_TYPE_INFO, "%@ Received PFKey Message associated with DB (type %d, SAID %u, pid %u, SPI %08X", buf, 0x24u);
          }
        }
        switch(*(_BYTE *)(v3 + 1))
        {
          case 1:
            v81 = a1[1];
            if (v81)
            {
              v82 = bswap32(*(_DWORD *)(v81 + 4));
              v83 = CFSTR("SPIValue");
              goto LABEL_117;
            }
            v54 = 1;
            goto LABEL_138;
          case 2:
            v55 = v156[0];
            v56 = *(NSObject **)(a3 + 96);
            v54 = 2;
            goto LABEL_139;
          case 3:
            v55 = v156[0];
            v56 = *(NSObject **)(a3 + 96);
            v54 = 3;
            goto LABEL_139;
          case 4:
            NERemoveValueFromIntKeyedDictionary(*(__CFDictionary **)(a3 + 80), v156[0]);
            v84 = *(_DWORD *)(v3 + 12);
            if (v84 == getpid())
              goto LABEL_137;
            v63 = v156[0];
            v64 = a3;
            v65 = 9216;
            goto LABEL_114;
          case 5:
            v58 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            if (!Mutable)
              goto LABEL_137;
            v60 = Mutable;
            v61 = *(unsigned __int8 *)(v3 + 3);
            if (v61 == 3)
            {
              v62 = CFSTR("ESP");
            }
            else
            {
              if (v61 != 2)
                goto LABEL_151;
              v62 = CFSTR("AH");
            }
            CFDictionaryAddValue(Mutable, CFSTR("IPSecProtocol"), v62);
LABEL_151:
            v99 = a1[9];
            if (v99)
              NEAddDataToDictionary(v60, CFSTR("EncryptionKey"), (UInt8 *)(v99 + 8), *(unsigned __int16 *)(v99 + 4) >> 3);
            v100 = a1[8];
            if (v100)
              NEAddDataToDictionary(v60, CFSTR("AuthKey"), (UInt8 *)(v100 + 8), *(unsigned __int16 *)(v100 + 4) >> 3);
            v101 = a1[22];
            if (v101)
            {
              if (*(_BYTE *)(v101 + 52))
              {
                v102 = CFStringCreateWithCString(v58, (const char *)(v101 + 52), 0x600u);
                if (v102)
                {
                  v103 = v102;
                  CFDictionaryAddValue(v60, CFSTR("IPSecInterface"), v102);
                  CFRelease(v103);
                }
              }
              if (*(_BYTE *)(v101 + 28))
              {
                v104 = CFStringCreateWithCString(v58, (const char *)(v101 + 28), 0x600u);
                if (v104)
                {
                  v105 = v104;
                  CFDictionaryAddValue(v60, CFSTR("OutgoingInterface"), v104);
                  CFRelease(v105);
                }
              }
              if (*(_BYTE *)(v101 + 4))
              {
                v106 = CFStringCreateWithCString(v58, (const char *)(v101 + 4), 0x600u);
                if (v106)
                {
                  v107 = v106;
                  CFDictionaryAddValue(v60, CFSTR("InternalInterface"), v106);
                  CFRelease(v107);
                }
              }
              if (*(_WORD *)(v101 + 76))
                CFDictionaryAddValue(v60, CFSTR("IntializeDisabled"), (const void *)*MEMORY[0x1E0C9AE50]);
            }
            v108 = a1[2];
            if (v108)
            {
              v110 = (int *)a1[3];
              v109 = (int *)a1[4];
              v111 = time(0);
              NEAddDateToDictionary(v60, CFSTR("CreateTime"), *(_QWORD *)(v108 + 16));
              NEAddDateToDictionary(v60, CFSTR("CurrentTime"), v111);
              NEAddIntToDictionary(v60, CFSTR("DiffTime"), v111 - *(_DWORD *)(v108 + 16));
              v112 = *(_QWORD *)(v108 + 24);
              if (v112)
                NEAddDateToDictionary(v60, CFSTR("LastUseTime"), v112);
              NEAddIntToDictionary(v60, CFSTR("CurrentBytes"), *(_DWORD *)(v108 + 8));
              NEAddIntToDictionary(v60, CFSTR("CurrentAllocations"), *(_DWORD *)(v108 + 4));
              if (v110)
              {
                NEAddIntToDictionary(v60, CFSTR("HardLifetime"), v110[4]);
                NEAddIntToDictionary(v60, CFSTR("HardUseTime"), v110[6]);
                NEAddIntToDictionary(v60, CFSTR("HardBytes"), v110[2]);
                NEAddIntToDictionary(v60, CFSTR("SoftAllocations"), v110[1]);
              }
              if (v109)
              {
                NEAddIntToDictionary(v60, CFSTR("SoftLifetime"), v109[4]);
                NEAddIntToDictionary(v60, CFSTR("SoftUseTime"), v109[6]);
                NEAddIntToDictionary(v60, CFSTR("SoftBytes"), v109[2]);
                NEAddIntToDictionary(v60, CFSTR("SoftAllocations"), v109[1]);
              }
            }
            v113 = a1[1];
            if (!v113)
              goto LABEL_202;
            v114 = *(unsigned __int8 *)(v113 + 9);
            if (v114 <= 3)
              CFDictionaryAddValue(v60, CFSTR("State"), off_1E3CC1F80[v114]);
            NEAddIntToDictionary(v60, CFSTR("SPIValue"), bswap32(*(_DWORD *)(v113 + 4)));
            NEAddIntToDictionary(v60, CFSTR("ReplayWindowSize"), *(unsigned __int8 *)(v113 + 8));
            v115 = *(unsigned __int8 *)(v113 + 11);
            switch(v115)
            {
              case 1:
                v116 = CFSTR("DES");
                break;
              case 12:
                v116 = CFSTR("AES-128");
                break;
              case 2:
                v116 = CFSTR("3DES");
                break;
              default:
                goto LABEL_193;
            }
            CFDictionaryAddValue(v60, CFSTR("EncryptionAlgorithm"), v116);
LABEL_193:
            if ((*(_BYTE *)(v113 + 10) - 1) <= 7u && ((0xE3u >> (*(_BYTE *)(v113 + 10) - 1)) & 1) != 0)
              CFDictionaryAddValue(v60, CFSTR("AuthAlgorithm"), off_1E3CC1FA0[(*(_BYTE *)(v113 + 10) - 1)]);
            if ((*(_BYTE *)(v113 + 12) & 2) == 0)
              goto LABEL_202;
            v120 = (const void *)*MEMORY[0x1E0C9AE50];
            CFDictionaryAddValue(v60, CFSTR("NATTraversal"), (const void *)*MEMORY[0x1E0C9AE50]);
            v121 = *(_DWORD *)(v113 + 12);
            if ((v121 & 4) != 0)
            {
              CFDictionaryAddValue(v60, CFSTR("NATTKeepAlive"), v120);
              v121 = *(_DWORD *)(v113 + 12);
              if ((v121 & 0x8000) == 0)
              {
LABEL_199:
                if ((v121 & 0x1000) == 0)
                  goto LABEL_201;
                goto LABEL_200;
              }
            }
            else if ((v121 & 0x8000) == 0)
            {
              goto LABEL_199;
            }
            CFDictionaryAddValue(v60, CFSTR("NATTKeepAliveOffload"), v120);
            if ((*(_DWORD *)(v113 + 12) & 0x1000) != 0)
LABEL_200:
              CFDictionaryAddValue(v60, CFSTR("NATTDetectedPeer"), v120);
LABEL_201:
            NEAddIntToDictionary(v60, CFSTR("ReplayWindowSize"), *(unsigned __int16 *)(v113 + 16));
LABEL_202:
            v122 = a1[19];
            if (!v122)
              goto LABEL_210;
            v123 = *(unsigned __int8 *)(v122 + 4);
            if (v123 == 1)
            {
              v124 = CFSTR("Transport");
            }
            else
            {
              if (v123 != 2)
                goto LABEL_208;
              v124 = CFSTR("Tunnel");
            }
            CFDictionaryAddValue(v60, CFSTR("Mode"), v124);
LABEL_208:
            v125 = *(_DWORD *)(v122 + 12);
            if (v125)
              NEAddIntToDictionary(v60, CFSTR("UniqueID"), v125);
LABEL_210:
            v126 = CFDictionaryGetValue(v8, CFSTR("Direction"));
            if (v126)
            {
              v127 = CFEqual(v126, CFSTR("In"));
              v128 = v127 == 0;
              if (v127)
              {
                v129 = 6;
LABEL_215:
                v130 = (unsigned __int8 *)a1[v129];
                if (v130)
                  goto LABEL_219;
                v131 = 25;
                if (v128)
                  v131 = 23;
                v130 = (unsigned __int8 *)a1[v131];
                if (v130)
                {
LABEL_219:
                  NEAddAddressToDictionary(v60, CFSTR("LocalAddress"), v130 + 8);
                  NEAddPortToDictionary(v60, CFSTR("LocalPort"), (uint64_t)(v130 + 8));
                  NEAddIntToDictionary(v60, CFSTR("LocalPrefix"), v130[5]);
                  v132 = v130[4];
                }
                else
                {
                  v132 = 255;
                }
                v133 = 5;
                if (v128)
                  v133 = 6;
                v134 = a1[v133];
                if (v134)
                  goto LABEL_226;
                v135 = 23;
                if (v128)
                  v135 = 25;
                v134 = a1[v135];
                if (v134)
                {
LABEL_226:
                  NEAddAddressToDictionary(v60, CFSTR("RemoteAddress"), (unsigned __int8 *)(v134 + 8));
                  NEAddPortToDictionary(v60, CFSTR("RemotePort"), v134 + 8);
                  NEAddIntToDictionary(v60, CFSTR("RemotePrefix"), *(unsigned __int8 *)(v134 + 5));
                }
                if (v132 != 255)
                  NEAddIntToDictionary(v60, CFSTR("UpperLayerProtocol"), v132);
                NEIPSecDBNotifyRequest(*(NSObject **)(a3 + 96), *(unsigned __int8 *)(v3 + 1), v156[0], 1, v60);
                v136 = v60;
LABEL_270:
                CFRelease(v136);
                goto LABEL_141;
              }
            }
            else
            {
              v128 = 1;
            }
            v129 = 5;
            goto LABEL_215;
          case 6:
            v63 = v156[0];
            v64 = a3;
            v65 = 8448;
            goto LABEL_114;
          case 8:
            v63 = v156[0];
            v64 = a3;
            v65 = 8704;
            goto LABEL_114;
          case 0xE:
            v85 = a1[18];
            if (v85)
            {
              v82 = *(_DWORD *)(v85 + 8);
              v83 = CFSTR("PolicyID");
LABEL_117:
              v86 = v8;
LABEL_136:
              NEAddIntToDictionary(v86, v83, v82);
LABEL_137:
              v54 = *(unsigned __int8 *)(v3 + 1);
            }
            else
            {
              v54 = 14;
            }
LABEL_138:
            v55 = v156[0];
            v56 = *(NSObject **)(a3 + 96);
LABEL_139:
            v57 = 1;
LABEL_140:
            NEIPSecDBNotifyRequest(v56, v54, v55, v57, 0);
            goto LABEL_141;
          case 0xF:
          case 0x16:
            NEIPSecDBNotifyRequest(*(NSObject **)(a3 + 96), *(unsigned __int8 *)(v3 + 1), v156[0], 1, 0);
LABEL_62:
            v50 = *(__CFDictionary **)(a3 + 88);
            goto LABEL_72;
          case 0x10:
            v66 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v67 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            if (!v67)
              goto LABEL_137;
            v68 = v67;
            v69 = a1[22];
            if (v69)
            {
              if (*(_BYTE *)(v69 + 52))
              {
                v70 = CFStringCreateWithCString(v66, (const char *)(v69 + 52), 0x600u);
                if (v70)
                {
                  v71 = v70;
                  CFDictionaryAddValue(0, CFSTR("IPSecInterface"), v70);
                  CFRelease(v71);
                }
              }
              if (*(_BYTE *)(v69 + 28))
              {
                v72 = CFStringCreateWithCString(v66, (const char *)(v69 + 28), 0x600u);
                if (v72)
                {
                  v73 = v72;
                  CFDictionaryAddValue(0, CFSTR("OutgoingInterface"), v72);
                  CFRelease(v73);
                }
              }
              if (*(_BYTE *)(v69 + 4))
              {
                v74 = CFStringCreateWithCString(v66, (const char *)(v69 + 4), 0x600u);
                if (v74)
                {
                  v75 = v74;
                  CFDictionaryAddValue(0, CFSTR("InternalInterface"), v74);
                  CFRelease(v75);
                }
              }
              if (*(_WORD *)(v69 + 76))
                CFDictionaryAddValue(0, CFSTR("IntializeDisabled"), (const void *)*MEMORY[0x1E0C9AE50]);
            }
            v76 = (unsigned __int16 *)a1[18];
            if (!v76)
              goto LABEL_254;
            v77 = *((unsigned __int8 *)v76 + 6);
            if (v77 == 1)
            {
              v78 = CFSTR("In");
            }
            else
            {
              if (v77 != 2)
                goto LABEL_183;
              v78 = CFSTR("Out");
            }
            CFDictionaryAddValue(v68, CFSTR("Direction"), v78);
LABEL_183:
            NEAddIntToDictionary(v68, CFSTR("PolicyID"), *((_DWORD *)v76 + 2));
            v117 = v76[2];
            if (v117 <= 5)
              CFDictionaryAddValue(v68, CFSTR("PolicyType"), off_1E3CC1FE0[v117]);
            if (*v76 < 3u)
              goto LABEL_252;
            v118 = *((unsigned __int8 *)v76 + 21);
            if (*((_BYTE *)v76 + 21))
            {
              if (v118 == 3)
              {
                v119 = CFSTR("Unique");
              }
              else
              {
                if (v118 != 2)
                  goto LABEL_237;
                v119 = CFSTR("Require");
              }
            }
            else
            {
              v119 = CFSTR("None");
            }
            CFDictionaryAddValue(v68, CFSTR("Level"), v119);
LABEL_237:
            v137 = *((unsigned __int8 *)v76 + 20);
            if (v137 == 1)
            {
              v138 = CFSTR("Transport");
            }
            else
            {
              if (v137 != 2)
                goto LABEL_242;
              v138 = CFSTR("Tunnel");
            }
            CFDictionaryAddValue(v68, CFSTR("Mode"), v138);
LABEL_242:
            v139 = v76[9];
            if (v139 == 50)
            {
              v140 = CFSTR("ESP");
            }
            else
            {
              if (v139 != 51)
                goto LABEL_247;
              v140 = CFSTR("AH");
            }
            CFDictionaryAddValue(v68, CFSTR("IPSecProtocol"), v140);
LABEL_247:
            if (v76[11])
              NEAddIntToDictionary(v68, CFSTR("UniqueID"), v76[11]);
            v141 = v76[8];
            if (v141 >= 9)
            {
              v142 = *((unsigned __int8 *)v76 + 24);
              v143 = (unsigned __int8 *)v76 + v142 + 24;
              if (v142 + *v143 + 8 == v141)
              {
                NEAddAddressToDictionary(v68, CFSTR("OuterLocalAddress"), (unsigned __int8 *)v76 + 24);
                NEAddAddressToDictionary(v68, CFSTR("OuterRemoteAddress"), v143);
              }
            }
LABEL_252:
            if (*((_BYTE *)v76 + 6) == 1)
            {
              v144 = 0;
              v145 = 6;
            }
            else
            {
LABEL_254:
              v144 = 1;
              v145 = 5;
            }
            v146 = (unsigned __int8 *)a1[v145];
            if (v146)
              goto LABEL_259;
            v147 = 25;
            if (v144)
              v147 = 23;
            v146 = (unsigned __int8 *)a1[v147];
            if (v146)
            {
LABEL_259:
              NEAddAddressToDictionary(v68, CFSTR("LocalAddress"), v146 + 8);
              NEAddPortToDictionary(v68, CFSTR("LocalPort"), (uint64_t)(v146 + 8));
              NEAddIntToDictionary(v68, CFSTR("LocalPrefix"), v146[5]);
              v148 = v146[4];
            }
            else
            {
              v148 = 255;
            }
            v149 = 5;
            if (v144)
              v149 = 6;
            v150 = a1[v149];
            if (v150)
              goto LABEL_266;
            v151 = 23;
            if (v144)
              v151 = 25;
            v150 = a1[v151];
            if (v150)
            {
LABEL_266:
              NEAddAddressToDictionary(v68, CFSTR("RemoteAddress"), (unsigned __int8 *)(v150 + 8));
              NEAddPortToDictionary(v68, CFSTR("RemotePort"), v150 + 8);
              NEAddIntToDictionary(v68, CFSTR("RemotePrefix"), *(unsigned __int8 *)(v150 + 5));
            }
            if (v148 != 255)
              NEAddIntToDictionary(v68, CFSTR("UpperLayerProtocol"), v148);
            NEIPSecDBNotifyRequest(*(NSObject **)(a3 + 96), *(unsigned __int8 *)(v3 + 1), v156[0], 1, v68);
            v136 = v68;
            goto LABEL_270;
          case 0x17:
            if (HIBYTE(v155))
            {
              v63 = v156[0];
              v64 = a3;
              v65 = 10240;
            }
            else
            {
              if (!(_BYTE)v155)
              {
LABEL_141:
                if (!CFDictionaryGetCount(*(CFDictionaryRef *)(a3 + 80)))
                  NEIPSecDBNotifyRequest(*(NSObject **)(a3 + 96), 9, 0, 1, 0);
                if (!CFDictionaryGetCount(*(CFDictionaryRef *)(a3 + 88)))
                  NEIPSecDBNotifyRequest(*(NSObject **)(a3 + 96), 19, 0, 1, 0);
                goto LABEL_145;
              }
              v63 = v156[0];
              v64 = a3;
              v65 = 8208;
            }
LABEL_114:
            NEIPSecDBNotifyClient(v64, v63, v65);
            goto LABEL_141;
          case 0x1A:
            v79 = CFDictionaryGetValue(v8, CFSTR("Direction"));
            if (v79)
              v80 = CFEqual(v79, CFSTR("In"));
            else
              v80 = 0;
            v87 = a1[22];
            if (v87)
            {
              v88 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
              if (*(_BYTE *)(v87 + 52))
              {
                v89 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)(v87 + 52), 0x600u);
                if (v89)
                {
                  v90 = v89;
                  CFDictionarySetValue(v8, CFSTR("IPSecInterface"), v89);
                  CFRelease(v90);
                }
              }
              v92 = *(unsigned __int8 *)(v87 + 28);
              v91 = (const char *)(v87 + 28);
              if (v92)
              {
                v93 = CFStringCreateWithCString(*v88, v91, 0x600u);
                if (v93)
                {
                  v94 = v93;
                  CFDictionarySetValue(v8, CFSTR("OutgoingInterface"), v93);
                  CFRelease(v94);
                }
              }
            }
            v95 = 28;
            if (!v80)
              v95 = 27;
            v96 = a1[v95];
            if (v96)
            {
              CFDictionaryRemoveValue(v8, CFSTR("LocalAddress"));
              CFDictionaryRemoveValue(v8, CFSTR("LocalPort"));
              CFDictionaryRemoveValue(v8, CFSTR("LocalPrefix"));
              NEAddAddressToDictionary(v8, CFSTR("LocalAddress"), (unsigned __int8 *)(v96 + 8));
              NEAddPortToDictionary(v8, CFSTR("LocalPort"), v96 + 8);
              NEAddIntToDictionary(v8, CFSTR("LocalPrefix"), *(unsigned __int8 *)(v96 + 5));
            }
            v97 = 27;
            if (!v80)
              v97 = 28;
            v98 = a1[v97];
            if (!v98)
              goto LABEL_137;
            CFDictionaryRemoveValue(v8, CFSTR("RemoteAddress"));
            CFDictionaryRemoveValue(v8, CFSTR("RemotePort"));
            CFDictionaryRemoveValue(v8, CFSTR("RemotePrefix"));
            NEAddAddressToDictionary(v8, CFSTR("RemoteAddress"), (unsigned __int8 *)(v98 + 8));
            NEAddPortToDictionary(v8, CFSTR("RemotePort"), v98 + 8);
            v82 = *(unsigned __int8 *)(v98 + 5);
            v86 = v8;
            v83 = CFSTR("RemotePrefix");
            goto LABEL_136;
          default:
            goto LABEL_141;
        }
      }
    }
  }
}

const __CFDictionary *NEIPSecDBGetSAWithMessage(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const __CFDictionary *v9;
  CFIndex Count;
  size_t v11;
  const void **v12;
  const void **v13;
  uint64_t i;
  const __CFDictionary *v15;
  const void *Value;
  void **v17;
  void **v18;
  void *v19;
  NSObject *v20;
  const char *v21;
  NSObject *v22;
  const __CFDictionary *v23;
  const void **v25;
  const void **v26;
  uint64_t v27;
  int valuePtr;
  int v29;
  char v30;
  int v31;
  _BYTE buf[24];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    v20 = ne_log_obj();
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = a1;
    v21 = "%@ pfkey received message is NULL";
LABEL_35:
    _os_log_error_impl(&dword_19BD16000, v20, OS_LOG_TYPE_ERROR, v21, buf, 0xCu);
    return 0;
  }
  if (a3)
    *a3 = -1;
  v5 = *a2;
  v6 = a2[6];
  if (v6)
    v7 = v6 + 8;
  else
    v7 = 0;
  v27 = v7;
  if (!v5)
  {
    v20 = ne_log_obj();
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = a1;
    v21 = "%@ pfkey received msg is NULL";
    goto LABEL_35;
  }
  v8 = a2[1];
  if (!v8)
  {
    v22 = ne_log_obj();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = a1;
      _os_log_impl(&dword_19BD16000, v22, OS_LOG_TYPE_INFO, "%@ pfkey received SA is NULL", buf, 0xCu);
    }
    return 0;
  }
  v9 = *(const __CFDictionary **)(a1 + 80);
  if (!v9)
    return 0;
  Count = CFDictionaryGetCount(v9);
  if (Count < 1)
    return 0;
  v11 = Count;
  v12 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
  v13 = (const void **)malloc_type_calloc(v11, 8uLL, 0x80040B8603338uLL);
  v26 = v12;
  CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 80), v12, v13);
  for (i = 0; i != v11; ++i)
  {
    *(_QWORD *)buf = 0;
    v31 = 0;
    v30 = 0;
    v29 = 0;
    v15 = (const __CFDictionary *)v13[i];
    Value = CFDictionaryGetValue(v15, CFSTR("Direction"));
    if (Value)
      LODWORD(Value) = CFEqual(Value, CFSTR("In"));
    if ((_DWORD)Value)
      v17 = (void **)buf;
    else
      v17 = 0;
    if ((_DWORD)Value)
      v18 = 0;
    else
      v18 = (void **)buf;
    if (NEIPSecDBFilloutBasicSAInfo(v15, &v30, &v29, &v31, v17, v18, 0))
    {
      if ((!v31 || v31 == *(_DWORD *)(v8 + 4)) && v30 == *(_BYTE *)(v5 + 3))
      {
        v19 = *(void **)buf;
        if (NEIPSecDBAddressesMatch(*(uint64_t *)buf, v27))
        {
          valuePtr = 0;
          v25 = v26;
          CFNumberGetValue((CFNumberRef)v26[i], kCFNumberIntType, &valuePtr);
          if (*(_QWORD *)buf)
            free(*(void **)buf);
          if (a3)
            *a3 = valuePtr;
          goto LABEL_41;
        }
        if (v19)
        {
LABEL_26:
          free(v19);
          continue;
        }
      }
      else
      {
        v19 = *(void **)buf;
        if (*(_QWORD *)buf)
          goto LABEL_26;
      }
    }
  }
  v15 = 0;
  v23 = 0;
  v25 = v26;
  if (!v26)
    goto LABEL_42;
LABEL_41:
  free(v25);
  v23 = v15;
LABEL_42:
  free(v13);
  return v23;
}

BOOL NEIPSecDBAddressesMatch(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = 0;
  if (a1 && a2)
  {
    v3 = *(unsigned __int8 *)(a1 + 1);
    if (v3 == *(unsigned __int8 *)(a2 + 1))
    {
      if (v3 == 30)
        return *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8) && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
      if (v3 == 2)
        return *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4);
    }
    return 0;
  }
  return v2;
}

uint64_t NEIPSecDBExtractSPIFromPFKeyMessage(_QWORD *a1)
{
  uint64_t result;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;

  result = 0;
  v3 = *(unsigned __int8 *)(*a1 + 1);
  if (v3 <= 0x1A)
  {
    v4 = 1 << v3;
    if ((v4 & 0x40006AE) != 0)
    {
      v5 = *(_DWORD *)(*a1 + 12);
      if (v5 != getpid() || !*a1)
        return 0;
    }
    else if ((v4 & 0x110) == 0)
    {
      return result;
    }
    v6 = a1[1];
    if (v6)
      return *(unsigned int *)(v6 + 4);
    return 0;
  }
  return result;
}

NSObject *NEIPSecDBNotifyRequest(NSObject *result, int a2, int a3, char a4, CFTypeRef cf)
{
  NSObject *v5;
  Class isa;
  objc_class *v7;

  if (result)
  {
    v5 = result;
    while (1)
    {
      isa = v5->isa;
      if (LODWORD(v5[3].isa) == a2 && HIDWORD(v5[3].isa) == a3)
        break;
      v5 = v5->isa;
      if (!isa)
        return result;
    }
    LOBYTE(v5[4].isa) = a4;
    if (cf)
      v7 = (objc_class *)CFRetain(cf);
    else
      v7 = 0;
    v5[5].isa = v7;
    result = v5[2].isa;
    if (result)
      return dispatch_semaphore_signal(result);
  }
  return result;
}

BOOL NEIPSecDBStatsHandleReply(uint64_t a1, uint64_t *a2, _QWORD *a3, _BYTE *a4, _BYTE *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  NSObject *v11;
  _BOOL8 result;
  const char *v13;
  NSObject *v14;
  uint32_t v15;
  NSObject *v16;
  NSObject *v17;
  int v18;
  int v19;
  uint64_t *v22;
  uint64_t v23;
  int32x2_t v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  NSObject *v29;
  int v30;
  unsigned int v31;
  int v32;
  NSObject *v33;
  int v34;
  NSObject *v35;
  int v36;
  const char *v37;
  __int16 v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  if (!*a2 || (v6 = a2[20]) == 0 || (v7 = a2[21]) == 0)
  {
    v16 = ne_log_obj();
    result = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v36 = 136315138;
    v37 = "NEIPSecDBStatsHandleReply";
    v13 = "%s: Bad sadb getsastat response";
    v14 = v16;
    v15 = 12;
    goto LABEL_31;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if (!v8)
  {
    v17 = ne_log_obj();
    result = os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v18 = *(unsigned __int8 *)(v5 + 1);
    v36 = 136315394;
    v37 = "NEIPSecDBStatsHandleReply";
    v38 = 1024;
    v39 = v18;
    v13 = "%s: msg type %d: session-id[0] is invalid.";
LABEL_20:
    v14 = v17;
    v15 = 18;
LABEL_31:
    _os_log_error_impl(&dword_19BD16000, v14, OS_LOG_TYPE_ERROR, v13, (uint8_t *)&v36, v15);
    return 0;
  }
  *a3 = v8;
  if (!*(_DWORD *)(v7 + 12))
  {
    v17 = ne_log_obj();
    result = os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v19 = *(unsigned __int8 *)(v5 + 1);
    v36 = 136315394;
    v37 = "NEIPSecDBStatsHandleReply";
    v38 = 1024;
    v39 = v19;
    v13 = "%s: msg type %d: sastats is invalid.";
    goto LABEL_20;
  }
  if (!a1)
  {
    v35 = ne_log_obj();
    result = os_log_type_enabled(v35, OS_LOG_TYPE_FAULT);
    if (!result)
      return result;
    v36 = 136315138;
    v37 = "NEIPSecDBStatsUpdate";
    _os_log_fault_impl(&dword_19BD16000, v35, OS_LOG_TYPE_FAULT, "%s called with null session", (uint8_t *)&v36, 0xCu);
    return 0;
  }
  v9 = *(_DWORD *)(v7 + 4);
  if ((_DWORD)v8)
    v10 = (v9 - 1) >= 2;
  else
    v10 = 1;
  if (v10)
  {
    v11 = ne_log_obj();
    result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    LOWORD(v36) = 0;
    v13 = "invalid arguments";
    v14 = v11;
    v15 = 2;
    goto LABEL_31;
  }
  if (a4)
    *a4 = 0;
  if (a5)
    *a5 = 0;
  v22 = *(uint64_t **)(a1 + 104);
  if (!v22)
    return 0;
  while (*((_DWORD *)v22 + 4) != (_DWORD)v8 && *((_DWORD *)v22 + 5) != (_DWORD)v8)
  {
    result = 0;
    v22 = (uint64_t *)*v22;
    if (!v22)
      return result;
  }
  v23 = *(_QWORD *)(v7 + 32);
  if (v9 != 1)
  {
    if (v22[7] != v23)
    {
      v22[7] = v23;
      *((_BYTE *)v22 + 80) = 1;
      goto LABEL_39;
    }
LABEL_37:
    v24 = vadd_s32(*(int32x2_t *)((char *)v22 + 68), (int32x2_t)0x100000001);
    *(uint64_t *)((char *)v22 + 68) = (uint64_t)v24;
    v25 = v24.i32[0];
    goto LABEL_40;
  }
  if (v22[6] == v23)
    goto LABEL_37;
  v22[6] = v23;
  *((_BYTE *)v22 + 81) = 1;
LABEL_39:
  v25 = *((_DWORD *)v22 + 17) + 1;
  *((_DWORD *)v22 + 17) = v25;
LABEL_40:
  if (v25 != *((_DWORD *)v22 + 16))
    return 1;
  v26 = *((_DWORD *)v22 + 8);
  if (!v26)
  {
LABEL_49:
    v31 = *((_DWORD *)v22 + 9);
    if (v31)
    {
      if (*((_BYTE *)v22 + 80) == 1 && !*((_BYTE *)v22 + 81))
      {
        v32 = *((_DWORD *)v22 + 19) + 1;
        *((_DWORD *)v22 + 19) = v32;
        if (*((_DWORD *)v22 + 10) * v32 >= v31)
        {
          v33 = ne_log_obj();
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
          {
            v34 = *((_DWORD *)v22 + 10) * *((_DWORD *)v22 + 19);
            v36 = 136315394;
            v37 = "NEIPSecDBStatsUpdate";
            v38 = 1024;
            v39 = v34;
            _os_log_impl(&dword_19BD16000, v33, OS_LOG_TYPE_DEFAULT, "%s: no incoming traffic on SA for past %d secs", (uint8_t *)&v36, 0x12u);
          }
          if (a5)
            *a5 = 1;
          *((_WORD *)v22 + 40) = 0;
          *((_DWORD *)v22 + 19) = 0;
        }
      }
      else
      {
        *((_DWORD *)v22 + 19) = 0;
        *((_WORD *)v22 + 40) = 0;
      }
    }
    return 1;
  }
  if (*((_DWORD *)v22 + 18) != v25)
  {
    *((_DWORD *)v22 + 11) = 0;
    goto LABEL_49;
  }
  v27 = *((_DWORD *)v22 + 10);
  v28 = *((_DWORD *)v22 + 11) + 1;
  *((_DWORD *)v22 + 11) = v28;
  if (v27 * v28 < v26)
    goto LABEL_49;
  v29 = ne_log_obj();
  if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
  {
    v30 = *((_DWORD *)v22 + 10) * *((_DWORD *)v22 + 11);
    v36 = 136315394;
    v37 = "NEIPSecDBStatsUpdate";
    v38 = 1024;
    v39 = v30;
    _os_log_impl(&dword_19BD16000, v29, OS_LOG_TYPE_INFO, "%s: SA is idle for past %d secs", (uint8_t *)&v36, 0x12u);
  }
  result = 1;
  if (a4)
    *a4 = 1;
  return result;
}

void NEIPSecDBNotifyClient(uint64_t a1, int a2, int a3)
{
  NSObject *v6;
  NSObject *v7;
  _QWORD block[6];
  int v9;
  int v10;
  uint8_t buf[4];
  uint64_t v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1 && *(_QWORD *)(a1 + 32) && !*(_BYTE *)(a1 + 56) && *(_QWORD *)(a1 + 48))
  {
    v6 = ne_log_obj();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412802;
      v12 = a1;
      v13 = 1024;
      v14 = a3;
      v15 = 1024;
      v16 = a2;
      _os_log_impl(&dword_19BD16000, v6, OS_LOG_TYPE_INFO, "%@ received notification %#x for SAID %u", buf, 0x18u);
    }
    CFRetain((CFTypeRef)a1);
    v7 = *(NSObject **)(a1 + 48);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __NEIPSecDBNotifyClient_block_invoke;
    block[3] = &__block_descriptor_tmp_215;
    v9 = a2;
    v10 = a3;
    block[4] = a1;
    block[5] = 0;
    dispatch_async(v7, block);
  }
}

BOOL NEIPSecDBFilloutBasicSAInfo(CFDictionaryRef theDict, char *a2, int *a3, _DWORD *a4, void **a5, void **a6, char *a7)
{
  const void *Value;
  int v15;
  NSObject *v16;
  _BOOL8 result;
  const void *v18;
  char v19;
  const __CFNumber *v20;
  unsigned int v21;
  const __CFString *v22;
  const void *v23;
  const __CFString *v24;
  const void *v25;
  const __CFString *v26;
  unsigned int valuePtr;
  uint8_t buf[16];

  if (theDict)
  {
    if (a3)
    {
      Value = CFDictionaryGetValue(theDict, CFSTR("Mode"));
      if (Value)
      {
        if (CFEqual(Value, CFSTR("Transport")))
          v15 = 1;
        else
          v15 = 2;
      }
      else
      {
        v15 = 2;
      }
      *a3 = v15;
    }
    if (a2)
    {
      v18 = CFDictionaryGetValue(theDict, CFSTR("IPSecProtocol"));
      if (v18)
      {
        if (CFEqual(v18, CFSTR("AH")))
          v19 = 2;
        else
          v19 = 3;
      }
      else
      {
        v19 = 3;
      }
      *a2 = v19;
    }
    if (a4)
    {
      valuePtr = 0;
      v20 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("SPIValue"));
      if (v20)
      {
        CFNumberGetValue(v20, kCFNumberIntType, &valuePtr);
        v21 = valuePtr;
      }
      else
      {
        v21 = 0;
      }
      *a4 = bswap32(v21);
    }
    if (a5)
    {
      v22 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("LocalAddress"));
      v23 = CFDictionaryGetValue(theDict, CFSTR("LocalPort"));
      *a5 = NECreateAddressStructFromString(v22, (uint64_t)v23, 0);
    }
    if (a6)
    {
      v24 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("RemoteAddress"));
      v25 = CFDictionaryGetValue(theDict, CFSTR("RemotePort"));
      *a6 = NECreateAddressStructFromString(v24, (uint64_t)v25, 0);
    }
    if (a7)
    {
      if (CFDictionaryContainsKey(theDict, CFSTR("IPSecInterface")))
      {
        v26 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("IPSecInterface"));
        CFStringGetCString(v26, a7, 24, 0x600u);
      }
    }
    return 1;
  }
  else
  {
    v16 = ne_log_obj();
    result = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_19BD16000, v16, OS_LOG_TYPE_ERROR, "saData is NULL", buf, 2u);
      return 0;
    }
  }
  return result;
}

void __NEIPSecDBDeallocate(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  if (a1)
  {
    v2 = a1[8];
    if (v2)
    {
      NEPFKeyClose(v2);
      a1[8] = 0;
    }
    v3 = a1[6];
    if (v3)
    {
      dispatch_release(v3);
      a1[6] = 0;
    }
    v4 = (const void *)a1[10];
    if (v4)
    {
      CFRelease(v4);
      a1[10] = 0;
    }
    v5 = (const void *)a1[11];
    if (v5)
    {
      CFRelease(v5);
      a1[11] = 0;
    }
    v6 = (const void *)a1[3];
    if (v6)
    {
      CFRelease(v6);
      a1[3] = 0;
    }
  }
}

__CFString *__NEIPSecDBCopyDescription(_QWORD *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<NEIPSecDB %p [%p]> {"), a1, v2);
  if (a1)
    CFStringAppendFormat(Mutable, 0, CFSTR("UniqueIndex = %llu"), a1[2]);
  CFStringAppendFormat(Mutable, 0, CFSTR("}"));
  return Mutable;
}

_QWORD *NEIPSecDBCreateSession(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  return NEIPSecDBCreateSessionWithSocket(a1, a2, a3, a4, 0xFFFFFFFF);
}

BOOL NEIPSecDBSetDispatchQueue(uint64_t a1, dispatch_object_t object)
{
  NSObject *v4;
  _BOOL8 result;
  NSObject *v6;
  int v7;
  const char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v4 = *(NSObject **)(a1 + 48);
    if (v4)
    {
      dispatch_release(v4);
      *(_QWORD *)(a1 + 48) = 0;
    }
    if (object)
    {
      *(_QWORD *)(a1 + 48) = object;
      dispatch_retain(object);
    }
    return 1;
  }
  else
  {
    v6 = ne_log_obj();
    result = os_log_type_enabled(v6, OS_LOG_TYPE_FAULT);
    if (result)
    {
      v7 = 136315138;
      v8 = "NEIPSecDBSetDispatchQueue";
      _os_log_fault_impl(&dword_19BD16000, v6, OS_LOG_TYPE_FAULT, "%s called with null session", (uint8_t *)&v7, 0xCu);
      return 0;
    }
  }
  return result;
}

uint64_t NEIPSecDBAddLarvalSA(uint64_t a1, CFTypeRef cf, unsigned int *a3)
{
  _BOOL4 v6;
  uint64_t v7;
  const __CFNumber *Value;
  const __CFNumber *v9;
  const __CFNumber *v10;
  const __CFString *v11;
  _BOOL4 v12;
  NSObject *v13;
  NSObject *v14;
  dispatch_queue_t v15;
  unsigned int v16;
  char *v17;
  char *v18;
  const __CFDictionary *v19;
  NSObject *v20;
  int v21;
  unsigned int v22;
  NSObject *v23;
  NSObject *v24;
  const char *v25;
  int v26;
  NSObject *v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  NSObject *v32;
  const char *v33;
  __int128 v34;
  _QWORD block[8];
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  int valuePtr;
  void *v47;
  void *v48;
  int v49;
  uint8_t buffer[25];
  char v51[24];
  _BYTE buf[24];
  void *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v32 = ne_log_obj();
    if (!os_log_type_enabled(v32, OS_LOG_TYPE_FAULT))
      return 0;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "NEIPSecDBAddLarvalSA";
    v33 = "%s called with null session";
LABEL_46:
    _os_log_fault_impl(&dword_19BD16000, v32, OS_LOG_TYPE_FAULT, v33, buf, 0xCu);
    return 0;
  }
  if (!*(_QWORD *)(a1 + 80))
  {
    v32 = ne_log_obj();
    if (!os_log_type_enabled(v32, OS_LOG_TYPE_FAULT))
      return 0;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "NEIPSecDBAddLarvalSA";
    v33 = "%s called with null session->sas";
    goto LABEL_46;
  }
  *(_WORD *)buffer = 0;
  v49 = 0;
  v47 = 0;
  v48 = 0;
  valuePtr = 0;
  v45 = 0;
  v44 = 0;
  v51[0] = 0;
  v40 = 0;
  v41 = &v40;
  v42 = 0x2000000000;
  v43 = 0;
  v36 = 0;
  v37 = &v36;
  v38 = 0x2000000000;
  v39 = 0;
  v6 = NEIPSecDBValidateSADictionary(cf, 1, 0);
  v7 = MEMORY[0x1E0C809B0];
  if (!v6)
  {
    v23 = ne_log_obj();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = a1;
      _os_log_error_impl(&dword_19BD16000, v23, OS_LOG_TYPE_ERROR, "%@ add larval SA dictionary validation failed", buf, 0xCu);
    }
    goto LABEL_31;
  }
  if (NEIPSecDBFilloutBasicSAInfo((CFDictionaryRef)cf, (char *)buffer, &v49, &v44, &v48, &v47, v51))
  {
    Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("UniqueID"));
    if (Value)
      CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
    v9 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("LifeTimeinSeconds"));
    v10 = v9;
    if (v9)
      CFNumberGetValue(v9, kCFNumberLongType, &v45);
    if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("OutgoingInterface")))
    {
      v11 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("OutgoingInterface"));
      CFStringGetCString(v11, (char *)&buffer[1], 16, 0x600u);
    }
    v12 = v10 != 0;
    v13 = _NEIPSecDBGetQueue();
    block[0] = v7;
    block[1] = 0x40000000;
    block[2] = __NEIPSecDBAddLarvalSA_block_invoke;
    block[3] = &unk_1E3CC1BE0;
    block[6] = a1;
    block[7] = cf;
    block[4] = &v40;
    block[5] = &v36;
    dispatch_sync(v13, block);
    v14 = *(NSObject **)(a1 + 64);
    v15 = _NEIPSecDBGetQueue();
    v16 = bswap32(v44);
    v17 = v51;
    if (!v51[0])
      v17 = 0;
    v18 = (char *)&buffer[1];
    if (!buffer[1])
      v18 = 0;
    *(_QWORD *)&v34 = v17;
    *((_QWORD *)&v34 + 1) = v18;
    if (NEPFKeySendGetSPI(v14, (uint64_t)v15, buffer[0], v49, (uint64_t)v47, (uint64_t)v48, v16, v16, valuePtr, v12, v45, SHIDWORD(v45), 0, 1u, v34))
    {
      if (NEIPSecDBCopyResponseForQueuedRequest(v37[3], 0))
      {
        if (a3)
        {
          v19 = NEGetValueFromIntKeyedDictionary(*(const __CFDictionary **)(a1 + 80), *((_DWORD *)v41 + 6));
          if (v19)
            *a3 = NEGetIntFromDictionary(v19, CFSTR("SPIValue"), 0);
        }
        v20 = ne_log_obj();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          v21 = *((_DWORD *)v41 + 6);
          if (a3)
            v22 = bswap32(*a3);
          else
            v22 = 0;
          *(_DWORD *)buf = 138412802;
          *(_QWORD *)&buf[4] = a1;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v21;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v22;
          _os_log_impl(&dword_19BD16000, v20, OS_LOG_TYPE_INFO, "%@ added larval SAID %u SPI %08X", buf, 0x18u);
        }
        goto LABEL_31;
      }
      v24 = ne_log_obj();
      if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        goto LABEL_28;
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = a1;
      v25 = "%@ add larval SA, failed to receive response for pfkey get spi";
    }
    else
    {
      v24 = ne_log_obj();
      if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
LABEL_28:
        v26 = *((_DWORD *)v41 + 6);
        v27 = _NEIPSecDBGetQueue();
        *(_QWORD *)buf = v7;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)&buf[16] = __NEIPSecDBRemoveSAIDFromSAs_block_invoke;
        v53 = &__block_descriptor_tmp_160;
        v54 = a1;
        v55 = v26;
        dispatch_sync(v27, buf);
        *((_DWORD *)v41 + 6) = 0;
        goto LABEL_31;
      }
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = a1;
      v25 = "%@ add larval SA, pfkey send get spi failed";
    }
    _os_log_error_impl(&dword_19BD16000, v24, OS_LOG_TYPE_ERROR, v25, buf, 0xCu);
    goto LABEL_28;
  }
LABEL_31:
  if (v48)
    free(v48);
  if (v47)
    free(v47);
  v28 = v37[3];
  if (v28)
  {
    v29 = _NEIPSecDBGetQueue();
    *(_QWORD *)buf = v7;
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = __NEIPSecDBRemoveQueuedRequest_block_invoke;
    v53 = &__block_descriptor_tmp_163;
    v54 = v28;
    dispatch_sync(v29, buf);
    free((void *)v37[3]);
  }
  v30 = *((unsigned int *)v41 + 6);
  _Block_object_dispose(&v36, 8);
  _Block_object_dispose(&v40, 8);
  return v30;
}

BOOL NEIPSecDBValidateSADictionary(CFTypeRef cf, int a2, int a3)
{
  uint64_t v6;
  _BOOL8 result;
  NSObject *v8;
  const char *v9;
  CFTypeID v10;
  CFTypeID v11;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  const __CFString *v17;
  __int16 v18;
  CFTypeID TypeID;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (NEInitCFTypes_onceToken == -1)
  {
    if (!cf)
      return 0;
  }
  else
  {
    dispatch_once(&NEInitCFTypes_onceToken, &__block_literal_global_22195);
    if (!cf)
      return 0;
  }
  v6 = CFDICTIONARY_TYPE;
  if (CFGetTypeID(cf) != v6)
    return 0;
  if (!NEGetValueWithType((const __CFDictionary *)cf, CFSTR("LocalAddress"), CFSTRING_TYPE))
  {
    v8 = ne_log_obj();
    result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v12 = 136315906;
    v13 = "NEIPSecDBValidateSADictionary";
    v14 = 1024;
    v15 = 3790;
    v16 = 2112;
    v17 = CFSTR("LocalAddress");
    v18 = 2048;
    TypeID = CFSTRING_TYPE;
    v9 = "%s:%d: value for key %@ is missing or type != %lu";
    goto LABEL_68;
  }
  if (!NEGetValueWithType((const __CFDictionary *)cf, CFSTR("RemoteAddress"), CFSTRING_TYPE))
  {
    v8 = ne_log_obj();
    result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v12 = 136315906;
    v13 = "NEIPSecDBValidateSADictionary";
    v14 = 1024;
    v15 = 3791;
    v16 = 2112;
    v17 = CFSTR("RemoteAddress");
    v18 = 2048;
    TypeID = CFSTRING_TYPE;
    v9 = "%s:%d: value for key %@ is missing or type != %lu";
    goto LABEL_68;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("LocalPrefix"))
    && !NEGetValueWithType((const __CFDictionary *)cf, CFSTR("LocalPrefix"), CFNUMBER_TYPE))
  {
    v8 = ne_log_obj();
    result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v12 = 136315906;
    v13 = "NEIPSecDBValidateSADictionary";
    v14 = 1024;
    v15 = 3792;
    v16 = 2112;
    v17 = CFSTR("LocalPrefix");
    v18 = 2048;
    TypeID = CFNUMBER_TYPE;
    v9 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_68;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("RemotePrefix"))
    && !NEGetValueWithType((const __CFDictionary *)cf, CFSTR("RemotePrefix"), CFNUMBER_TYPE))
  {
    v8 = ne_log_obj();
    result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v12 = 136315906;
    v13 = "NEIPSecDBValidateSADictionary";
    v14 = 1024;
    v15 = 3793;
    v16 = 2112;
    v17 = CFSTR("RemotePrefix");
    v18 = 2048;
    TypeID = CFNUMBER_TYPE;
    v9 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_68;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("LocalPort"))
    && !NEGetValueWithType((const __CFDictionary *)cf, CFSTR("LocalPort"), CFNUMBER_TYPE))
  {
    v8 = ne_log_obj();
    result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v12 = 136315906;
    v13 = "NEIPSecDBValidateSADictionary";
    v14 = 1024;
    v15 = 3794;
    v16 = 2112;
    v17 = CFSTR("LocalPort");
    v18 = 2048;
    TypeID = CFNUMBER_TYPE;
    v9 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_68;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("RemotePort"))
    && !NEGetValueWithType((const __CFDictionary *)cf, CFSTR("RemotePort"), CFNUMBER_TYPE))
  {
    v8 = ne_log_obj();
    result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v12 = 136315906;
    v13 = "NEIPSecDBValidateSADictionary";
    v14 = 1024;
    v15 = 3795;
    v16 = 2112;
    v17 = CFSTR("RemotePort");
    v18 = 2048;
    TypeID = CFNUMBER_TYPE;
    v9 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_68;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("IPSecInterface"))
    && !NEGetValueWithType((const __CFDictionary *)cf, CFSTR("IPSecInterface"), CFSTRING_TYPE))
  {
    v8 = ne_log_obj();
    result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v12 = 136315906;
    v13 = "NEIPSecDBValidateSADictionary";
    v14 = 1024;
    v15 = 3796;
    v16 = 2112;
    v17 = CFSTR("IPSecInterface");
    v18 = 2048;
    TypeID = CFSTRING_TYPE;
    v9 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_68;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("OutgoingInterface"))
    && !NEGetValueWithType((const __CFDictionary *)cf, CFSTR("OutgoingInterface"), CFSTRING_TYPE))
  {
    v8 = ne_log_obj();
    result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v12 = 136315906;
    v13 = "NEIPSecDBValidateSADictionary";
    v14 = 1024;
    v15 = 3797;
    v16 = 2112;
    v17 = CFSTR("OutgoingInterface");
    v18 = 2048;
    TypeID = CFSTRING_TYPE;
    v9 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_68;
  }
  if (a3)
    return 1;
  if (!NEGetValueWithType((const __CFDictionary *)cf, CFSTR("Mode"), CFSTRING_TYPE))
  {
    v8 = ne_log_obj();
    result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v12 = 136315906;
    v13 = "NEIPSecDBValidateSADictionary";
    v14 = 1024;
    v15 = 3799;
    v16 = 2112;
    v17 = CFSTR("Mode");
    v18 = 2048;
    TypeID = CFSTRING_TYPE;
    v9 = "%s:%d: value for key %@ is missing or type != %lu";
    goto LABEL_68;
  }
  if (!NEGetValueWithType((const __CFDictionary *)cf, CFSTR("IPSecProtocol"), CFSTRING_TYPE))
  {
    v8 = ne_log_obj();
    result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v12 = 136315906;
    v13 = "NEIPSecDBValidateSADictionary";
    v14 = 1024;
    v15 = 3800;
    v16 = 2112;
    v17 = CFSTR("IPSecProtocol");
    v18 = 2048;
    TypeID = CFSTRING_TYPE;
    v9 = "%s:%d: value for key %@ is missing or type != %lu";
    goto LABEL_68;
  }
  if (a2)
    return 1;
  if (NEGetValueWithType((const __CFDictionary *)cf, CFSTR("SPIValue"), CFNUMBER_TYPE))
  {
    if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("ReplayWindowSize"))
      && !NEGetValueWithType((const __CFDictionary *)cf, CFSTR("ReplayWindowSize"), CFNUMBER_TYPE))
    {
      v8 = ne_log_obj();
      result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
      if (result)
      {
        v12 = 136315906;
        v13 = "NEIPSecDBValidateSADictionary";
        v14 = 1024;
        v15 = 3804;
        v16 = 2112;
        v17 = CFSTR("ReplayWindowSize");
        v18 = 2048;
        TypeID = CFNUMBER_TYPE;
        v9 = "%s:%d: type of value for key %@ != %lu";
        goto LABEL_68;
      }
    }
    else if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("LifeTimeinSeconds"))
           && !NEGetValueWithType((const __CFDictionary *)cf, CFSTR("LifeTimeinSeconds"), CFNUMBER_TYPE))
    {
      v8 = ne_log_obj();
      result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
      if (result)
      {
        v12 = 136315906;
        v13 = "NEIPSecDBValidateSADictionary";
        v14 = 1024;
        v15 = 3805;
        v16 = 2112;
        v17 = CFSTR("LifeTimeinSeconds");
        v18 = 2048;
        TypeID = CFNUMBER_TYPE;
        v9 = "%s:%d: type of value for key %@ != %lu";
        goto LABEL_68;
      }
    }
    else if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("EncryptionAlgorithm"))
           && !NEGetValueWithType((const __CFDictionary *)cf, CFSTR("EncryptionAlgorithm"), CFSTRING_TYPE))
    {
      v8 = ne_log_obj();
      result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
      if (result)
      {
        v12 = 136315906;
        v13 = "NEIPSecDBValidateSADictionary";
        v14 = 1024;
        v15 = 3807;
        v16 = 2112;
        v17 = CFSTR("EncryptionAlgorithm");
        v18 = 2048;
        TypeID = CFSTRING_TYPE;
        v9 = "%s:%d: type of value for key %@ != %lu";
        goto LABEL_68;
      }
    }
    else if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("EncryptionKey"))
           && (v10 = CFDataGetTypeID(), !NEGetValueWithType((const __CFDictionary *)cf, CFSTR("EncryptionKey"), v10)))
    {
      v8 = ne_log_obj();
      result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
      if (result)
      {
        v12 = 136315906;
        v13 = "NEIPSecDBValidateSADictionary";
        v14 = 1024;
        v15 = 3808;
        v16 = 2112;
        v17 = CFSTR("EncryptionKey");
        v18 = 2048;
        TypeID = CFDataGetTypeID();
        v9 = "%s:%d: type of value for key %@ != %lu";
        goto LABEL_68;
      }
    }
    else if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("AuthAlgorithm"))
           && !NEGetValueWithType((const __CFDictionary *)cf, CFSTR("AuthAlgorithm"), CFSTRING_TYPE))
    {
      v8 = ne_log_obj();
      result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
      if (result)
      {
        v12 = 136315906;
        v13 = "NEIPSecDBValidateSADictionary";
        v14 = 1024;
        v15 = 3810;
        v16 = 2112;
        v17 = CFSTR("AuthAlgorithm");
        v18 = 2048;
        TypeID = CFSTRING_TYPE;
        v9 = "%s:%d: type of value for key %@ != %lu";
        goto LABEL_68;
      }
    }
    else if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("AuthKey"))
           && (v11 = CFDataGetTypeID(), !NEGetValueWithType((const __CFDictionary *)cf, CFSTR("AuthKey"), v11)))
    {
      v8 = ne_log_obj();
      result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
      if (result)
      {
        v12 = 136315906;
        v13 = "NEIPSecDBValidateSADictionary";
        v14 = 1024;
        v15 = 3811;
        v16 = 2112;
        v17 = CFSTR("AuthKey");
        v18 = 2048;
        TypeID = CFDataGetTypeID();
        v9 = "%s:%d: type of value for key %@ != %lu";
        goto LABEL_68;
      }
    }
    else if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("NATTraversal"))
           && !NEGetValueWithType((const __CFDictionary *)cf, CFSTR("NATTraversal"), CFBOOLEAN_TYPE))
    {
      v8 = ne_log_obj();
      result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
      if (result)
      {
        v12 = 136315906;
        v13 = "NEIPSecDBValidateSADictionary";
        v14 = 1024;
        v15 = 3813;
        v16 = 2112;
        v17 = CFSTR("NATTraversal");
        v18 = 2048;
        TypeID = CFBOOLEAN_TYPE;
        v9 = "%s:%d: type of value for key %@ != %lu";
        goto LABEL_68;
      }
    }
    else if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("NATTKeepAlive"))
           && !NEGetValueWithType((const __CFDictionary *)cf, CFSTR("NATTKeepAlive"), CFBOOLEAN_TYPE))
    {
      v8 = ne_log_obj();
      result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
      if (result)
      {
        v12 = 136315906;
        v13 = "NEIPSecDBValidateSADictionary";
        v14 = 1024;
        v15 = 3814;
        v16 = 2112;
        v17 = CFSTR("NATTKeepAlive");
        v18 = 2048;
        TypeID = CFBOOLEAN_TYPE;
        v9 = "%s:%d: type of value for key %@ != %lu";
        goto LABEL_68;
      }
    }
    else if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("NATTDetectedPeer"))
           && !NEGetValueWithType((const __CFDictionary *)cf, CFSTR("NATTDetectedPeer"), CFBOOLEAN_TYPE))
    {
      v8 = ne_log_obj();
      result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
      if (result)
      {
        v12 = 136315906;
        v13 = "NEIPSecDBValidateSADictionary";
        v14 = 1024;
        v15 = 3815;
        v16 = 2112;
        v17 = CFSTR("NATTDetectedPeer");
        v18 = 2048;
        TypeID = CFBOOLEAN_TYPE;
        v9 = "%s:%d: type of value for key %@ != %lu";
        goto LABEL_68;
      }
    }
    else if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("NATTPort"))
           && !NEGetValueWithType((const __CFDictionary *)cf, CFSTR("NATTPort"), CFNUMBER_TYPE))
    {
      v8 = ne_log_obj();
      result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
      if (result)
      {
        v12 = 136315906;
        v13 = "NEIPSecDBValidateSADictionary";
        v14 = 1024;
        v15 = 3816;
        v16 = 2112;
        v17 = CFSTR("NATTPort");
        v18 = 2048;
        TypeID = CFNUMBER_TYPE;
        v9 = "%s:%d: type of value for key %@ != %lu";
        goto LABEL_68;
      }
    }
    else
    {
      if (!CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("NATTSourcePort"))
        || NEGetValueWithType((const __CFDictionary *)cf, CFSTR("NATTSourcePort"), CFNUMBER_TYPE))
      {
        return 1;
      }
      v8 = ne_log_obj();
      result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
      if (result)
      {
        v12 = 136315906;
        v13 = "NEIPSecDBValidateSADictionary";
        v14 = 1024;
        v15 = 3817;
        v16 = 2112;
        v17 = CFSTR("NATTSourcePort");
        v18 = 2048;
        TypeID = CFNUMBER_TYPE;
        v9 = "%s:%d: type of value for key %@ != %lu";
LABEL_68:
        _os_log_error_impl(&dword_19BD16000, v8, OS_LOG_TYPE_ERROR, v9, (uint8_t *)&v12, 0x26u);
        return 0;
      }
    }
  }
  else
  {
    v8 = ne_log_obj();
    result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (result)
    {
      v12 = 136315906;
      v13 = "NEIPSecDBValidateSADictionary";
      v14 = 1024;
      v15 = 3803;
      v16 = 2112;
      v17 = CFSTR("SPIValue");
      v18 = 2048;
      TypeID = CFNUMBER_TYPE;
      v9 = "%s:%d: value for key %@ is missing or type != %lu";
      goto LABEL_68;
    }
  }
  return result;
}

uint64_t NEIPSecDBCopyResponseForQueuedRequest(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  int v6;
  int64_t v8;
  NSObject *v9;
  dispatch_time_t v10;
  NSObject *v11;
  _QWORD block[5];

  if (result)
  {
    v3 = result;
    v4 = *(_DWORD *)(result + 24);
    v5 = v4 > 0x1A;
    v6 = (1 << v4) & 0x400000E;
    if (v5 || v6 == 0)
      v8 = 2000000000;
    else
      v8 = 4000000000;
    v9 = *(NSObject **)(result + 16);
    v10 = dispatch_time(0, v8);
    dispatch_semaphore_wait(v9, v10);
    v11 = _NEIPSecDBGetQueue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __NEIPSecDBCopyResponseForQueuedRequest_block_invoke;
    block[3] = &__block_descriptor_tmp_162;
    block[4] = v3;
    dispatch_sync(v11, block);
    result = *(unsigned __int8 *)(v3 + 32);
    if (a2)
    {
      if (*(_BYTE *)(v3 + 32))
        *a2 = *(_QWORD *)(v3 + 40);
    }
  }
  return result;
}

_OWORD *NEIPSecDBCreateQueuedRequest(uint64_t a1, int a2, int a3)
{
  _OWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  NSObject *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v6 = malloc_type_malloc(0x30uLL, 0x10E004027337507uLL);
    *v6 = 0u;
    v6[1] = 0u;
    v6[2] = 0u;
    *((_DWORD *)v6 + 6) = a2;
    *((_DWORD *)v6 + 7) = a3;
    *((_QWORD *)v6 + 2) = dispatch_semaphore_create(0);
    v9 = *(_QWORD *)(a1 + 96);
    v8 = (_QWORD *)(a1 + 96);
    v7 = v9;
    *(_QWORD *)v6 = v9;
    if (v9)
      *(_QWORD *)(v7 + 8) = v6;
    *v8 = v6;
    *((_QWORD *)v6 + 1) = v8;
  }
  else
  {
    v11 = ne_log_obj();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
    {
      v12 = 136315138;
      v13 = "NEIPSecDBCreateQueuedRequest";
      _os_log_fault_impl(&dword_19BD16000, v11, OS_LOG_TYPE_FAULT, "%s called with null session", (uint8_t *)&v12, 0xCu);
    }
    return 0;
  }
  return v6;
}

uint64_t NEIPSecDBGetSPIForSA(uint64_t a1, int a2)
{
  NSObject *v4;
  const __CFDictionary *v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  NSObject *v10;
  const char *v11;
  _QWORD block[6];
  int v13;
  __int128 buf;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v10 = ne_log_obj();
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      return 0;
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = "NEIPSecDBGetSPIForSA";
    v11 = "%s called with null session";
LABEL_14:
    _os_log_fault_impl(&dword_19BD16000, v10, OS_LOG_TYPE_FAULT, v11, (uint8_t *)&buf, 0xCu);
    return 0;
  }
  if (!*(_QWORD *)(a1 + 80))
  {
    v10 = ne_log_obj();
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      return 0;
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = "NEIPSecDBGetSPIForSA";
    v11 = "%s called with null session->sas";
    goto LABEL_14;
  }
  *(_QWORD *)&buf = 0;
  *((_QWORD *)&buf + 1) = &buf;
  v15 = 0x2000000000;
  v16 = 0;
  v4 = _NEIPSecDBGetQueue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __NEIPSecDBGetSPIForSA_block_invoke;
  block[3] = &unk_1E3CC1C08;
  block[4] = &buf;
  block[5] = a1;
  v13 = a2;
  dispatch_sync(v4, block);
  v5 = *(const __CFDictionary **)(*((_QWORD *)&buf + 1) + 24);
  if (v5)
  {
    v6 = NEGetIntFromDictionary(v5, CFSTR("SPIValue"), 0);
    v7 = *((_QWORD *)&buf + 1);
    v8 = *(const void **)(*((_QWORD *)&buf + 1) + 24);
    if (v8)
    {
      CFRelease(v8);
      *(_QWORD *)(v7 + 24) = 0;
    }
  }
  else
  {
    v6 = 0;
  }
  _Block_object_dispose(&buf, 8);
  return v6;
}

uint64_t NEIPSecDBAddSA(uint64_t a1, CFTypeRef cf)
{
  _BOOL4 v4;
  uint64_t v5;
  _QWORD *v6;
  const __CFNumber *Value;
  const __CFNumber *v8;
  const void *v9;
  const void *v10;
  int v11;
  char v12;
  NSObject *v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  const void *v17;
  const void *v18;
  char v19;
  const __CFData *v20;
  const __CFData *v21;
  CFIndex Length;
  const __CFData *v23;
  const __CFData *v24;
  CFIndex v25;
  char *v26;
  const UInt8 *BytePtr;
  const UInt8 *v28;
  const __CFBoolean *v29;
  const __CFBoolean *v30;
  const __CFBoolean *v31;
  const __CFNumber *v32;
  const __CFNumber *v33;
  const __CFBoolean *v34;
  const __CFNumber *v35;
  const __CFNumber *v36;
  const __CFNumber *v37;
  const __CFString *v38;
  const __CFBoolean *v39;
  unsigned __int16 v40;
  NSObject *v41;
  NSObject *v42;
  dispatch_queue_t v43;
  char *v44;
  char *v45;
  int v46;
  NSObject *v47;
  NSObject *v48;
  int v49;
  NSObject *v50;
  int v51;
  NSObject *v52;
  uint64_t v53;
  NSObject *v54;
  int v56;
  NSObject *v57;
  int v58;
  __int128 v59;
  _QWORD block[8];
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  int v68;
  int v69;
  int valuePtr;
  int v71;
  uint64_t v72;
  unsigned __int8 v73;
  int v74;
  unsigned __int8 v75;
  unsigned int v76;
  UInt8 *v77;
  UInt8 *v78;
  char buffer[24];
  char v80[24];
  _BYTE buf[24];
  void *v82;
  uint64_t v83;
  int v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v14 = ne_log_obj();
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
      return 0;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "NEIPSecDBAddSA";
    v15 = "%s called with null session";
LABEL_36:
    _os_log_fault_impl(&dword_19BD16000, v14, OS_LOG_TYPE_FAULT, v15, buf, 0xCu);
    return 0;
  }
  if (!*(_QWORD *)(a1 + 80))
  {
    v14 = ne_log_obj();
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
      return 0;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "NEIPSecDBAddSA";
    v15 = "%s called with null session->sas";
    goto LABEL_36;
  }
  v77 = 0;
  v78 = 0;
  v76 = 0;
  v75 = 0;
  v74 = 0;
  v73 = 1;
  v72 = 0;
  valuePtr = 0;
  v71 = 0;
  v80[0] = 0;
  buffer[0] = 0;
  v69 = 0;
  v65 = 0;
  v66 = &v65;
  v67 = 0x2000000000;
  v68 = 0;
  v61 = 0;
  v62 = &v61;
  v63 = 0x2000000000;
  v64 = 0;
  v4 = NEIPSecDBValidateSADictionary(cf, 0, 0);
  v5 = MEMORY[0x1E0C809B0];
  v6 = (_QWORD *)&unk_19BED5000;
  if (!v4)
  {
    v13 = ne_log_obj();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = a1;
      _os_log_error_impl(&dword_19BD16000, v13, OS_LOG_TYPE_ERROR, "%@ add SA dictionary validation failed", buf, 0xCu);
    }
    goto LABEL_108;
  }
  if (!NEIPSecDBFilloutBasicSAInfo((CFDictionaryRef)cf, (char *)&v75, &v74, &v76, (void **)&v78, (void **)&v77, v80))
    goto LABEL_108;
  Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("UniqueID"));
  if (Value)
    CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
  v8 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("ReplayWindowSize"));
  if (v8)
    CFNumberGetValue(v8, kCFNumberCharType, &v73);
  v9 = CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("EncryptionAlgorithm"));
  if (!v9)
    goto LABEL_42;
  v10 = v9;
  if (CFEqual(v9, CFSTR("DES")))
  {
    v11 = 0;
    v12 = 1;
    goto LABEL_43;
  }
  if (CFEqual(v10, CFSTR("3DES")))
  {
    v11 = 0;
    v12 = 2;
    goto LABEL_43;
  }
  if (CFEqual(v10, CFSTR("AES-128")) || CFEqual(v10, CFSTR("AES-256")))
  {
    v11 = 0;
    v12 = 12;
    goto LABEL_43;
  }
  if (CFEqual(v10, CFSTR("AES-128-GCM")) || CFEqual(v10, CFSTR("AES-256-GCM")))
  {
    v11 = 0;
LABEL_22:
    v12 = 13;
    goto LABEL_43;
  }
  if (CFEqual(v10, CFSTR("ChaCha20-Poly1305")))
  {
    v11 = 0;
LABEL_31:
    v12 = 14;
    goto LABEL_43;
  }
  if (CFEqual(v10, CFSTR("ChaCha20-Poly1305-IIV")))
  {
    v11 = 1024;
    goto LABEL_31;
  }
  if (CFEqual(v10, CFSTR("AES-128-GCM-IIV")) || CFEqual(v10, CFSTR("AES-256-GCM-IIV")))
  {
    v11 = 1024;
    goto LABEL_22;
  }
  if (CFEqual(v10, CFSTR("NULL-With-AES-128-GMAC")) || CFEqual(v10, CFSTR("NULL-With-AES-256-GMAC")))
  {
    v11 = 0;
    v12 = 15;
    goto LABEL_43;
  }
  if (CFEqual(v10, CFSTR("NULL")))
  {
    v11 = 0;
    v12 = 3;
  }
  else
  {
LABEL_42:
    v12 = 0;
    v11 = 0;
  }
LABEL_43:
  v17 = CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("AuthAlgorithm"));
  if (!v17)
    goto LABEL_54;
  v18 = v17;
  if (!CFEqual(v17, CFSTR("MD5-96")))
  {
    if (CFEqual(v18, CFSTR("SHA1-96")))
    {
      v19 = 2;
      goto LABEL_55;
    }
    if (CFEqual(v18, CFSTR("SHA2-256")))
    {
      v19 = 6;
      goto LABEL_55;
    }
    if (CFEqual(v18, CFSTR("SHA2-384")))
    {
      v19 = 7;
      goto LABEL_55;
    }
    if (CFEqual(v18, CFSTR("SHA2-512")))
    {
      v19 = 8;
      goto LABEL_55;
    }
LABEL_54:
    v19 = 0;
    goto LABEL_55;
  }
  v19 = 1;
LABEL_55:
  v20 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("EncryptionKey"));
  v21 = v20;
  if (v20)
    Length = CFDataGetLength(v20);
  else
    Length = 0;
  v23 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("AuthKey"));
  v24 = v23;
  if (v23)
    v25 = CFDataGetLength(v23);
  else
    v25 = 0;
  if (Length | v25)
  {
    v26 = (char *)malloc_type_malloc(v25 + Length, 0xC0EEEA2FuLL);
    if (Length)
    {
      BytePtr = CFDataGetBytePtr(v21);
      memcpy(v26, BytePtr, Length);
    }
    if (v25)
    {
      v28 = CFDataGetBytePtr(v24);
      memcpy(&v26[Length], v28, v25);
    }
  }
  else
  {
    v26 = 0;
  }
  v29 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("NATTraversal"));
  v5 = MEMORY[0x1E0C809B0];
  if (v29 && CFBooleanGetValue(v29))
    v11 |= 2u;
  v30 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("NATTKeepAlive"));
  if (v30 && CFBooleanGetValue(v30))
    v11 |= 4u;
  v31 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("NATTKeepAliveOffload"));
  if (v31 && CFBooleanGetValue(v31))
    v11 |= 0x8000u;
  v32 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("NATTKeepAliveOffloadInterval"));
  if (v32)
    CFNumberGetValue(v32, kCFNumberShortType, &v69);
  v33 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("NATTKeepAliveInterval"));
  if (v33)
    CFNumberGetValue(v33, kCFNumberShortType, (char *)&v69 + 2);
  v34 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("NATTDetectedPeer"));
  if (v34 && CFBooleanGetValue(v34))
    v11 |= 0x1000u;
  v35 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("LifeTimeinSeconds"));
  if (v35)
    CFNumberGetValue(v35, kCFNumberLongType, &v72);
  v36 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("NATTPort"));
  if (v36)
    CFNumberGetValue(v36, kCFNumberShortType, (char *)&v71 + 2);
  v37 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("NATTSourcePort"));
  if (v37)
    CFNumberGetValue(v37, kCFNumberShortType, &v71);
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("OutgoingInterface")))
  {
    v38 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("OutgoingInterface"));
    CFStringGetCString(v38, buffer, 16, 0x600u);
  }
  v39 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("sequencePerTrafficClass"));
  if (v39)
    v40 = 2 * (CFBooleanGetValue(v39) != 0);
  else
    v40 = 0;
  v41 = _NEIPSecDBGetQueue();
  block[0] = v5;
  block[1] = 0x40000000;
  block[2] = __NEIPSecDBAddSA_block_invoke;
  block[3] = &unk_1E3CC1C30;
  block[6] = a1;
  block[7] = cf;
  block[4] = &v65;
  block[5] = &v61;
  dispatch_sync(v41, block);
  v42 = *(NSObject **)(a1 + 64);
  v43 = _NEIPSecDBGetQueue();
  v44 = v80;
  if (!v80[0])
    v44 = 0;
  v45 = buffer;
  if (!buffer[0])
    v45 = 0;
  *(_QWORD *)&v59 = v44;
  *((_QWORD *)&v59 + 1) = v45;
  if (NEPFKeySendAdd(v42, (uint64_t)v43, v75, v74, v78, v77, v76, valuePtr, v73, (const UInt8 *)v26, v12, Length, v19, v25, v11, v40, 0, v58, 0,
         0,
         v72,
         SHIDWORD(v72),
         0,
         0,
         0,
         v71,
         HIWORD(v71),
         HIWORD(v69),
         v69,
         1,
         v59))
  {
    v46 = NEIPSecDBCopyResponseForQueuedRequest(v62[3], 0);
    v47 = ne_log_obj();
    v48 = v47;
    if (!v46)
    {
      v6 = (_QWORD *)&unk_19BED5000;
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = a1;
        _os_log_error_impl(&dword_19BD16000, v48, OS_LOG_TYPE_ERROR, "%@ add SA, failed to receive response for pfkey add SA", buf, 0xCu);
      }
      v56 = *((_DWORD *)v66 + 6);
      v57 = _NEIPSecDBGetQueue();
      *(_QWORD *)buf = v5;
      *(_QWORD *)&buf[8] = 0x40000000;
      *(_QWORD *)&buf[16] = __NEIPSecDBRemoveSAIDFromSAs_block_invoke;
      v82 = &__block_descriptor_tmp_160;
      v83 = a1;
      v84 = v56;
      dispatch_sync(v57, buf);
      *((_DWORD *)v66 + 6) = 0;
      if (!v26)
        goto LABEL_108;
      goto LABEL_107;
    }
    v6 = (_QWORD *)&unk_19BED5000;
    if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
    {
      v49 = *((_DWORD *)v66 + 6);
      *(_DWORD *)buf = 138412802;
      *(_QWORD *)&buf[4] = a1;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v49;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = bswap32(v76);
      _os_log_impl(&dword_19BD16000, v48, OS_LOG_TYPE_INFO, "%@ added SAID %u SPI %08X", buf, 0x18u);
      if (!v26)
        goto LABEL_108;
      goto LABEL_107;
    }
  }
  else
  {
    v50 = ne_log_obj();
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = a1;
      _os_log_error_impl(&dword_19BD16000, v50, OS_LOG_TYPE_ERROR, "%@ add SA, pfkey add SA failed", buf, 0xCu);
    }
    v51 = *((_DWORD *)v66 + 6);
    v52 = _NEIPSecDBGetQueue();
    *(_QWORD *)buf = v5;
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = __NEIPSecDBRemoveSAIDFromSAs_block_invoke;
    v82 = &__block_descriptor_tmp_160;
    v83 = a1;
    v84 = v51;
    dispatch_sync(v52, buf);
    *((_DWORD *)v66 + 6) = 0;
    v6 = &unk_19BED5000;
  }
  if (v26)
  {
LABEL_107:
    memset_s(v26, v25 + Length, 0, v25 + Length);
    free(v26);
  }
LABEL_108:
  if (v78)
    free(v78);
  if (v77)
    free(v77);
  v53 = v62[3];
  if (v53)
  {
    v54 = _NEIPSecDBGetQueue();
    *(_QWORD *)buf = v5;
    *(_QWORD *)&buf[8] = v6[294];
    *(_QWORD *)&buf[16] = __NEIPSecDBRemoveQueuedRequest_block_invoke;
    v82 = &__block_descriptor_tmp_163;
    v83 = v53;
    dispatch_sync(v54, buf);
    free((void *)v62[3]);
  }
  v16 = *((unsigned int *)v66 + 6);
  _Block_object_dispose(&v61, 8);
  _Block_object_dispose(&v65, 8);
  return v16;
}

uint64_t NEIPSecDBUpdateSA(uint64_t a1, int a2, CFTypeRef cf)
{
  _BOOL4 v6;
  uint64_t v7;
  _QWORD *v8;
  NSObject *v9;
  const __CFDictionary *v10;
  const __CFNumber *Value;
  const __CFNumber *v12;
  const void *v13;
  const void *v14;
  int v15;
  char v16;
  NSObject *v17;
  const char *v18;
  uint64_t *v19;
  const void *v20;
  uint64_t v21;
  NSObject *v22;
  const char *v23;
  const void *v24;
  const void *v25;
  char v26;
  const __CFData *v27;
  const __CFData *v28;
  CFIndex Length;
  const __CFData *v30;
  const __CFData *v31;
  CFIndex v32;
  char *v33;
  const UInt8 *BytePtr;
  const UInt8 *v35;
  const __CFBoolean *v36;
  const __CFBoolean *v37;
  const __CFBoolean *v38;
  const __CFNumber *v39;
  const __CFNumber *v40;
  const __CFBoolean *v41;
  const __CFNumber *v42;
  const __CFNumber *v43;
  const __CFNumber *v44;
  const __CFBoolean *v45;
  unsigned __int16 v46;
  NSObject *v47;
  NSObject *v48;
  dispatch_queue_t v49;
  char *v50;
  int v51;
  NSObject *v52;
  NSObject *v53;
  NSObject *v54;
  const char *v55;
  NSObject *v56;
  uint64_t *v57;
  const void *v58;
  uint64_t v59;
  NSObject *v60;
  int v62;
  char v63;
  _QWORD v64[6];
  int v65;
  _QWORD block[6];
  int v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int valuePtr;
  int v78;
  uint64_t v79;
  unsigned __int8 v80;
  int v81;
  unsigned __int8 v82;
  unsigned int v83;
  UInt8 *v84;
  UInt8 *v85;
  char v86[24];
  _BYTE buf[24];
  void *v88;
  uint64_t v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v22 = ne_log_obj();
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
      return 0;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "NEIPSecDBUpdateSA";
    v23 = "%s called with null session";
LABEL_44:
    _os_log_fault_impl(&dword_19BD16000, v22, OS_LOG_TYPE_FAULT, v23, buf, 0xCu);
    return 0;
  }
  if (!*(_QWORD *)(a1 + 80))
  {
    v22 = ne_log_obj();
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
      return 0;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "NEIPSecDBUpdateSA";
    v23 = "%s called with null session->sas";
    goto LABEL_44;
  }
  v84 = 0;
  v85 = 0;
  v83 = 0;
  v82 = 0;
  v81 = 0;
  v86[0] = 0;
  v80 = 1;
  v79 = 0;
  valuePtr = 0;
  v78 = 0;
  v76 = 0;
  v72 = 0;
  v73 = &v72;
  v74 = 0x2000000000;
  v75 = 0;
  v68 = 0;
  v69 = &v68;
  v70 = 0x2000000000;
  v71 = 0;
  v6 = NEIPSecDBValidateSADictionary(cf, 0, 0);
  v7 = MEMORY[0x1E0C809B0];
  v8 = &unk_19BED5000;
  if (!v6)
  {
    v17 = ne_log_obj();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      goto LABEL_16;
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = a1;
    v18 = "%@ update SA dictionary validation failed";
LABEL_26:
    _os_log_error_impl(&dword_19BD16000, v17, OS_LOG_TYPE_ERROR, v18, buf, 0xCu);
    goto LABEL_16;
  }
  v9 = _NEIPSecDBGetQueue();
  block[0] = v7;
  block[1] = 0x40000000;
  block[2] = __NEIPSecDBUpdateSA_block_invoke;
  block[3] = &unk_1E3CC1C58;
  block[4] = &v72;
  block[5] = a1;
  v67 = a2;
  dispatch_sync(v9, block);
  v10 = (const __CFDictionary *)v73[3];
  if (!v10)
  {
    v17 = ne_log_obj();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      goto LABEL_16;
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = a1;
    v18 = "%@ update SA, failed to find existing SA";
    goto LABEL_26;
  }
  if (NEIPSecDBFilloutBasicSAInfo(v10, (char *)&v82, &v81, &v83, (void **)&v85, (void **)&v84, v86))
  {
    Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("UniqueID"));
    if (Value)
      CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
    v12 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("ReplayWindowSize"));
    if (v12)
      CFNumberGetValue(v12, kCFNumberCharType, &v80);
    v13 = CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("EncryptionAlgorithm"));
    if (v13)
    {
      v14 = v13;
      if (CFEqual(v13, CFSTR("DES")))
      {
        v15 = 0;
        v16 = 1;
LABEL_24:
        v63 = v16;
LABEL_51:
        v24 = CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("AuthAlgorithm"));
        if (!v24)
          goto LABEL_62;
        v25 = v24;
        if (CFEqual(v24, CFSTR("MD5-96")))
        {
          v26 = 1;
          goto LABEL_63;
        }
        if (CFEqual(v25, CFSTR("SHA1-96")))
        {
          v26 = 2;
          goto LABEL_63;
        }
        if (CFEqual(v25, CFSTR("SHA2-256")))
        {
          v26 = 6;
          goto LABEL_63;
        }
        if (CFEqual(v25, CFSTR("SHA2-384")))
        {
          v26 = 7;
          goto LABEL_63;
        }
        if (CFEqual(v25, CFSTR("SHA2-512")))
          v26 = 8;
        else
LABEL_62:
          v26 = 0;
LABEL_63:
        v27 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("EncryptionKey"));
        v28 = v27;
        if (v27)
          Length = CFDataGetLength(v27);
        else
          Length = 0;
        v30 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("AuthKey"));
        v31 = v30;
        if (v30)
          v32 = CFDataGetLength(v30);
        else
          v32 = 0;
        if (Length | v32)
        {
          v33 = (char *)malloc_type_malloc(v32 + Length, 0x875E4909uLL);
          if (Length)
          {
            BytePtr = CFDataGetBytePtr(v28);
            memcpy(v33, BytePtr, Length);
          }
          if (v32)
          {
            v35 = CFDataGetBytePtr(v31);
            memcpy(&v33[Length], v35, v32);
          }
        }
        else
        {
          v33 = 0;
        }
        v36 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("NATTraversal"));
        v7 = MEMORY[0x1E0C809B0];
        if (v36 && CFBooleanGetValue(v36))
          v15 |= 2u;
        v37 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("NATTKeepAlive"));
        if (v37 && CFBooleanGetValue(v37))
          v15 |= 4u;
        v38 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("NATTKeepAliveOffload"));
        if (v38 && CFBooleanGetValue(v38))
          v15 |= 0x8000u;
        v39 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("NATTKeepAliveOffloadInterval"));
        if (v39)
          CFNumberGetValue(v39, kCFNumberShortType, &v76);
        v40 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("NATTKeepAliveInterval"));
        if (v40)
          CFNumberGetValue(v40, kCFNumberShortType, (char *)&v76 + 2);
        v41 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("NATTDetectedPeer"));
        if (v41 && CFBooleanGetValue(v41))
          v15 |= 0x1000u;
        v42 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("LifeTimeinSeconds"));
        if (v42)
          CFNumberGetValue(v42, kCFNumberLongType, &v79);
        v43 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("NATTPort"));
        if (v43)
          CFNumberGetValue(v43, kCFNumberShortType, &v78);
        v44 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("NATTSourcePort"));
        if (v44)
          CFNumberGetValue(v44, kCFNumberShortType, (char *)&v78 + 2);
        v45 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("sequencePerTrafficClass"));
        if (v45)
          v46 = 2 * (CFBooleanGetValue(v45) != 0);
        else
          v46 = 0;
        v47 = _NEIPSecDBGetQueue();
        v64[0] = v7;
        v64[1] = 0x40000000;
        v64[2] = __NEIPSecDBUpdateSA_block_invoke_82;
        v64[3] = &unk_1E3CC1C80;
        v64[4] = &v68;
        v64[5] = a1;
        v65 = a2;
        dispatch_sync(v47, v64);
        v48 = *(NSObject **)(a1 + 64);
        v49 = _NEIPSecDBGetQueue();
        v50 = v86;
        if (!v86[0])
          v50 = 0;
        if (NEPFKeySendUpdate(v48, (uint64_t)v49, v82, v81, v84, v85, v83, valuePtr, v80, (const UInt8 *)v33, v63, Length, v26, v32, v15, v46, 0, v62, 0,
               0,
               v79,
               SHIDWORD(v79),
               0,
               0,
               0,
               HIWORD(v78),
               v78,
               HIWORD(v76),
               v76,
               1,
               (unint64_t)v50))
        {
          v51 = NEIPSecDBCopyResponseForQueuedRequest(v69[3], 0);
          v52 = ne_log_obj();
          v53 = v52;
          v8 = &unk_19BED5000;
          if (v51)
          {
            v21 = 1;
            if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412802;
              *(_QWORD *)&buf[4] = a1;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = a2;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = bswap32(v83);
              _os_log_impl(&dword_19BD16000, v53, OS_LOG_TYPE_INFO, "%@ updated SAID %u SPI %08X", buf, 0x18u);
            }
            goto LABEL_110;
          }
          if (!os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
          {
LABEL_109:
            v21 = 0;
LABEL_110:
            v57 = v73;
            v58 = (const void *)v73[3];
            if (v58)
            {
              CFRelease(v58);
              v57[3] = 0;
            }
            if (v33)
            {
              memset_s(v33, v32 + Length, 0, v32 + Length);
              free(v33);
            }
            goto LABEL_114;
          }
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = a1;
          v55 = "%@ failed to receive response for pfkey update SA";
          v56 = v53;
        }
        else
        {
          v54 = ne_log_obj();
          v8 = (_QWORD *)&unk_19BED5000;
          if (!os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
            goto LABEL_109;
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = a1;
          v55 = "%@ pfkey send update SA failed";
          v56 = v54;
        }
        _os_log_error_impl(&dword_19BD16000, v56, OS_LOG_TYPE_ERROR, v55, buf, 0xCu);
        goto LABEL_109;
      }
      if (CFEqual(v14, CFSTR("3DES")))
      {
        v15 = 0;
        v16 = 2;
        goto LABEL_24;
      }
      if (CFEqual(v14, CFSTR("AES-128")) || CFEqual(v14, CFSTR("AES-256")))
      {
        v15 = 0;
        v16 = 12;
        goto LABEL_24;
      }
      if (CFEqual(v14, CFSTR("AES-128-GCM")) || CFEqual(v14, CFSTR("AES-256-GCM")))
      {
        v15 = 0;
LABEL_30:
        v16 = 13;
        goto LABEL_24;
      }
      if (CFEqual(v14, CFSTR("ChaCha20-Poly1305")))
      {
        v15 = 0;
LABEL_39:
        v16 = 14;
        goto LABEL_24;
      }
      if (CFEqual(v14, CFSTR("ChaCha20-Poly1305-IIV")))
      {
        v15 = 1024;
        goto LABEL_39;
      }
      if (CFEqual(v14, CFSTR("AES-128-GCM-IIV")) || CFEqual(v14, CFSTR("AES-256-GCM-IIV")))
      {
        v15 = 1024;
        goto LABEL_30;
      }
      if (CFEqual(v14, CFSTR("NULL-With-AES-128-GMAC")) || CFEqual(v14, CFSTR("NULL-With-AES-256-GMAC")))
      {
        v15 = 0;
        v16 = 15;
        goto LABEL_24;
      }
      if (CFEqual(v14, CFSTR("NULL")))
      {
        v15 = 0;
        v16 = 3;
        goto LABEL_24;
      }
    }
    v63 = 0;
    v15 = 0;
    goto LABEL_51;
  }
LABEL_16:
  v19 = v73;
  v20 = (const void *)v73[3];
  if (v20)
  {
    CFRelease(v20);
    v21 = 0;
    v19[3] = 0;
  }
  else
  {
    v21 = 0;
  }
LABEL_114:
  if (v85)
    free(v85);
  if (v84)
    free(v84);
  v59 = v69[3];
  if (v59)
  {
    v60 = _NEIPSecDBGetQueue();
    *(_QWORD *)buf = v7;
    *(_QWORD *)&buf[8] = v8[294];
    *(_QWORD *)&buf[16] = __NEIPSecDBRemoveQueuedRequest_block_invoke;
    v88 = &__block_descriptor_tmp_163;
    v89 = v59;
    dispatch_sync(v60, buf);
    free((void *)v69[3]);
  }
  _Block_object_dispose(&v68, 8);
  _Block_object_dispose(&v72, 8);
  return v21;
}

uint64_t NEIPSecDBMigrateSA(uint64_t a1, int a2, CFTypeRef cf)
{
  _BOOL4 v6;
  uint64_t v7;
  NSObject *v8;
  const __CFDictionary *v9;
  const void *Value;
  int v11;
  NSObject *v12;
  const char *v13;
  NSObject *v14;
  const __CFString *v15;
  const void *v16;
  const void *v17;
  const __CFBoolean *v18;
  const __CFBoolean *v19;
  const __CFBoolean *v20;
  const __CFNumber *v21;
  const __CFNumber *v22;
  const __CFBoolean *v23;
  const __CFNumber *v24;
  const __CFNumber *v25;
  NSObject *v26;
  NSObject *v27;
  dispatch_queue_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  int v36;
  NSObject *v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t *v40;
  const void *v41;
  uint64_t v42;
  NSObject *v43;
  NSObject *v45;
  const char *v46;
  _QWORD v47[6];
  int v48;
  _QWORD block[6];
  int v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint8_t v59;
  int valuePtr;
  __int16 v61;
  unsigned __int16 v62;
  unsigned int v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  char buffer[24];
  char v69[24];
  char v70[24];
  _BYTE buf[24];
  void *v72;
  uint64_t v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v45 = ne_log_obj();
    if (!os_log_type_enabled(v45, OS_LOG_TYPE_FAULT))
      return 0;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "NEIPSecDBMigrateSA";
    v46 = "%s called with null session";
LABEL_89:
    _os_log_fault_impl(&dword_19BD16000, v45, OS_LOG_TYPE_FAULT, v46, buf, 0xCu);
    return 0;
  }
  if (!*(_QWORD *)(a1 + 80))
  {
    v45 = ne_log_obj();
    if (!os_log_type_enabled(v45, OS_LOG_TYPE_FAULT))
      return 0;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "NEIPSecDBMigrateSA";
    v46 = "%s called with null session->sas";
    goto LABEL_89;
  }
  v66 = 0;
  v67 = 0;
  v64 = 0;
  v65 = 0;
  v63 = 0;
  v62 = 0;
  v61 = 0;
  valuePtr = 0;
  v59 = 0;
  v70[0] = 0;
  v69[0] = 0;
  buffer[0] = 0;
  v55 = 0;
  v56 = &v55;
  v57 = 0x2000000000;
  v58 = 0;
  v51 = 0;
  v52 = &v51;
  v53 = 0x2000000000;
  v54 = 0;
  v6 = NEIPSecDBValidateSADictionary(cf, 0, 1);
  v7 = MEMORY[0x1E0C809B0];
  if (!v6)
  {
    v12 = ne_log_obj();
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      goto LABEL_67;
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = a1;
    v13 = "%@ migrate SA dictionary validation failed";
    goto LABEL_11;
  }
  v8 = _NEIPSecDBGetQueue();
  block[0] = v7;
  block[1] = 0x40000000;
  block[2] = __NEIPSecDBMigrateSA_block_invoke;
  block[3] = &unk_1E3CC1CA8;
  block[4] = &v55;
  block[5] = a1;
  v50 = a2;
  dispatch_sync(v8, block);
  v9 = (const __CFDictionary *)v56[3];
  if (!v9)
  {
    v12 = ne_log_obj();
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      goto LABEL_67;
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = a1;
    v13 = "%@ migrate SA, failed to find existing SA";
    goto LABEL_11;
  }
  Value = CFDictionaryGetValue(v9, CFSTR("Direction"));
  if (Value)
    v11 = CFEqual(Value, CFSTR("In"));
  else
    v11 = 0;
  if (!NEIPSecDBFilloutBasicSAInfo((CFDictionaryRef)v56[3], (char *)&v59, 0, &v63, &v67, &v66, v70)
    || !NEIPSecDBFilloutBasicSAInfo((CFDictionaryRef)cf, 0, 0, 0, &v65, &v64, v69))
  {
    goto LABEL_67;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("OutgoingInterface")))
  {
    v15 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("OutgoingInterface"));
    CFStringGetCString(v15, buffer, 16, 0x600u);
  }
  v16 = CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("EncryptionAlgorithm"));
  v17 = v16;
  if (v16)
  {
    if (CFEqual(v16, CFSTR("ChaCha20-Poly1305-IIV"))
      || CFEqual(v17, CFSTR("AES-128-GCM-IIV"))
      || CFEqual(v17, CFSTR("AES-256-GCM-IIV")))
    {
      LODWORD(v17) = 1024;
    }
    else
    {
      LODWORD(v17) = 0;
    }
  }
  v18 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("NATTraversal"));
  if (v18 && CFBooleanGetValue(v18))
    LODWORD(v17) = v17 | 2;
  v19 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("NATTKeepAlive"));
  if (v19 && CFBooleanGetValue(v19))
    LODWORD(v17) = v17 | 4;
  v20 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("NATTKeepAliveOffload"));
  if (v20 && CFBooleanGetValue(v20))
    LODWORD(v17) = v17 | 0x8000;
  v21 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("NATTKeepAliveOffloadInterval"));
  if (v21)
    CFNumberGetValue(v21, kCFNumberShortType, &valuePtr);
  v22 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("NATTKeepAliveInterval"));
  if (v22)
    CFNumberGetValue(v22, kCFNumberShortType, (char *)&valuePtr + 2);
  v23 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("NATTDetectedPeer"));
  if (v23 && CFBooleanGetValue(v23))
    LODWORD(v17) = v17 | 0x1000;
  v24 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("NATTPort"));
  if (v24)
    CFNumberGetValue(v24, kCFNumberShortType, &v61);
  v25 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("NATTSourcePort"));
  if (v25)
    CFNumberGetValue(v25, kCFNumberShortType, &v62);
  v26 = _NEIPSecDBGetQueue();
  v47[0] = v7;
  v47[1] = 0x40000000;
  v47[2] = __NEIPSecDBMigrateSA_block_invoke_85;
  v47[3] = &unk_1E3CC1CD0;
  v47[4] = &v51;
  v47[5] = a1;
  v48 = a2;
  dispatch_sync(v26, v47);
  if (!v52[3])
    goto LABEL_67;
  v27 = *(NSObject **)(a1 + 64);
  v28 = _NEIPSecDBGetQueue();
  v29 = (uint64_t)v66;
  v30 = v70;
  if (!v70[0])
    v30 = 0;
  if (v11)
    v31 = (uint64_t)v66;
  else
    v31 = (uint64_t)v67;
  if (v11)
    v29 = (uint64_t)v67;
  v32 = (uint64_t)v64;
  if (v11)
    v33 = (uint64_t)v64;
  else
    v33 = (uint64_t)v65;
  if (v11)
    v32 = (uint64_t)v65;
  v34 = v69;
  if (!v69[0])
    v34 = 0;
  v35 = buffer;
  if (!buffer[0])
    v35 = 0;
  if (!NEPFKeySendMigrate(v27, (uint64_t)v28, v59, v63, (pid_t)v17, v62, v61, SHIWORD(valuePtr), valuePtr, v31, v29, v30, v33, v32, v34, v35))
  {
    v12 = ne_log_obj();
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      goto LABEL_67;
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = a1;
    v13 = "%@ pfkey send migrate SA failed";
LABEL_11:
    v14 = v12;
LABEL_12:
    _os_log_error_impl(&dword_19BD16000, v14, OS_LOG_TYPE_ERROR, v13, buf, 0xCu);
    goto LABEL_67;
  }
  v36 = NEIPSecDBCopyResponseForQueuedRequest(v52[3], 0);
  v37 = ne_log_obj();
  v38 = v37;
  if (v36)
  {
    v39 = 1;
    if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412802;
      *(_QWORD *)&buf[4] = a1;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = a2;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = bswap32(v63);
      _os_log_impl(&dword_19BD16000, v38, OS_LOG_TYPE_INFO, "%@ migrated SAID %u SPI %08X", buf, 0x18u);
    }
    goto LABEL_68;
  }
  if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = a1;
    v13 = "%@ failed to receive response for pfkey migrate SA";
    v14 = v38;
    goto LABEL_12;
  }
LABEL_67:
  v39 = 0;
LABEL_68:
  v40 = v56;
  v41 = (const void *)v56[3];
  if (v41)
  {
    CFRelease(v41);
    v40[3] = 0;
  }
  if (v67)
    free(v67);
  if (v66)
    free(v66);
  if (v65)
    free(v65);
  if (v64)
    free(v64);
  v42 = v52[3];
  if (v42)
  {
    v43 = _NEIPSecDBGetQueue();
    *(_QWORD *)buf = v7;
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = __NEIPSecDBRemoveQueuedRequest_block_invoke;
    v72 = &__block_descriptor_tmp_163;
    v73 = v42;
    dispatch_sync(v43, buf);
    free((void *)v52[3]);
  }
  _Block_object_dispose(&v51, 8);
  _Block_object_dispose(&v55, 8);
  return v39;
}

uint64_t NEIPSecDBDeleteSA(uint64_t a1, int a2)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  const __CFDictionary *v8;
  NSObject *v9;
  uint64_t v10;
  const char *v11;
  NSObject *v12;
  uint64_t *v13;
  const void *v14;
  uint64_t v15;
  NSObject *v16;
  _QWORD v18[7];
  int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE buf[24];
  void *v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = ne_log_obj();
  v5 = v4;
  if (a1)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = a1;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = a2;
      _os_log_impl(&dword_19BD16000, v5, OS_LOG_TYPE_INFO, "%@ deleting SAID %u", buf, 0x12u);
    }
    v24 = 0;
    v25 = &v24;
    v26 = 0x2000000000;
    v27 = 0;
    v20 = 0;
    v21 = &v20;
    v22 = 0x2000000000;
    v23 = 0;
    v6 = _NEIPSecDBGetQueue();
    v7 = MEMORY[0x1E0C809B0];
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 0x40000000;
    v18[2] = __NEIPSecDBDeleteSA_block_invoke;
    v18[3] = &unk_1E3CC1CF8;
    v18[5] = &v20;
    v18[6] = a1;
    v19 = a2;
    v18[4] = &v24;
    dispatch_sync(v6, v18);
    v8 = (const __CFDictionary *)v25[3];
    if (v8)
    {
      if (!_NEIPSecDBDeleteSA(a1, v8)
        || !NEIPSecDBCopyResponseForQueuedRequest(v21[3], 0))
      {
        v12 = ne_log_obj();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412546;
          *(_QWORD *)&buf[4] = a1;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = a2;
          _os_log_error_impl(&dword_19BD16000, v12, OS_LOG_TYPE_ERROR, "%@ failed to receive response for pfkey delete SAID %u", buf, 0x12u);
        }
        v10 = 0;
        goto LABEL_15;
      }
      v9 = ne_log_obj();
      v10 = 1;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)&buf[4] = a1;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = a2;
        v11 = "%@ deleted SAID %u";
LABEL_14:
        _os_log_impl(&dword_19BD16000, v9, OS_LOG_TYPE_INFO, v11, buf, 0x12u);
      }
    }
    else
    {
      v9 = ne_log_obj();
      v10 = 1;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)&buf[4] = a1;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = a2;
        v11 = "%@ delete SA, saData is NULL for SAID %u, may already be removed";
        goto LABEL_14;
      }
    }
LABEL_15:
    v13 = v25;
    v14 = (const void *)v25[3];
    if (v14)
    {
      CFRelease(v14);
      v13[3] = 0;
    }
    v15 = v21[3];
    if (v15)
    {
      v16 = _NEIPSecDBGetQueue();
      *(_QWORD *)buf = v7;
      *(_QWORD *)&buf[8] = 0x40000000;
      *(_QWORD *)&buf[16] = __NEIPSecDBRemoveQueuedRequest_block_invoke;
      v29 = &__block_descriptor_tmp_163;
      v30 = v15;
      dispatch_sync(v16, buf);
      free((void *)v21[3]);
    }
    _Block_object_dispose(&v20, 8);
    _Block_object_dispose(&v24, 8);
    return v10;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "NEIPSecDBDeleteSA";
    _os_log_fault_impl(&dword_19BD16000, v5, OS_LOG_TYPE_FAULT, "%s called with null session", buf, 0xCu);
  }
  return 0;
}

uint64_t _NEIPSecDBDeleteSA(uint64_t a1, CFDictionaryRef theDict)
{
  const void *Value;
  int v5;
  NSObject *v6;
  dispatch_queue_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  char *v11;
  _BOOL4 v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  const char *v16;
  int v18;
  char v19;
  unsigned int v20;
  void *v21;
  void *v22;
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  unsigned int v26;
  char v27[24];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v21 = 0;
  v22 = 0;
  v20 = 0;
  v19 = 0;
  v18 = 0;
  v27[0] = 0;
  Value = CFDictionaryGetValue(theDict, CFSTR("Direction"));
  if (Value)
    v5 = CFEqual(Value, CFSTR("In"));
  else
    v5 = 0;
  if (!NEIPSecDBFilloutBasicSAInfo(theDict, &v19, &v18, &v20, &v22, &v21, v27))
  {
    v14 = ne_log_obj();
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
LABEL_20:
      v15 = 0;
      goto LABEL_21;
    }
    *(_DWORD *)buf = 138412546;
    v24 = a1;
    v25 = 1024;
    v26 = bswap32(v20);
    v16 = "%@ NEIPSecDBFilloutBasicSAInfo error for SPI %08X";
LABEL_27:
    _os_log_error_impl(&dword_19BD16000, v14, OS_LOG_TYPE_ERROR, v16, buf, 0x12u);
    goto LABEL_20;
  }
  v6 = *(NSObject **)(a1 + 64);
  v7 = _NEIPSecDBGetQueue();
  if (v5)
    v9 = v21;
  else
    v9 = v22;
  if (v5)
    v10 = v22;
  else
    v10 = v21;
  if (v27[0])
    v11 = v27;
  else
    v11 = 0;
  v12 = NEPFKeySendDelete(v6, (uint64_t)v7, v19, v8, (uint64_t)v9, (uint64_t)v10, v20, v11);
  v13 = ne_log_obj();
  v14 = v13;
  if (!v12)
  {
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      goto LABEL_20;
    *(_DWORD *)buf = 138412546;
    v24 = a1;
    v25 = 1024;
    v26 = bswap32(v20);
    v16 = "%@ pfkey send delete failed for SPI %08X";
    goto LABEL_27;
  }
  v15 = 1;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412546;
    v24 = a1;
    v25 = 1024;
    v26 = bswap32(v20);
    _os_log_impl(&dword_19BD16000, v14, OS_LOG_TYPE_INFO, "%@ deleted SA SPI %08X", buf, 0x12u);
  }
LABEL_21:
  if (v22)
    free(v22);
  if (v21)
    free(v21);
  return v15;
}

uint64_t NEIPSecDBCopySA(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  const __CFDictionary *v6;
  const void *Value;
  int v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  dispatch_queue_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  char *v16;
  int v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t *v21;
  const void *v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  NSObject *v27;
  _QWORD v28[7];
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  char v40;
  unsigned int v41;
  void *v42;
  void *v43;
  char v44[24];
  _BYTE buf[24];
  void *v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v42 = 0;
    v43 = 0;
    v41 = 0;
    v40 = 0;
    v39 = 0;
    v44[0] = 0;
    v35 = 0;
    v36 = &v35;
    v37 = 0x2000000000;
    v38 = 0;
    v31 = 0;
    v32 = &v31;
    v33 = 0x2000000000;
    v34 = 0;
    v30 = 0;
    v4 = _NEIPSecDBGetQueue();
    v5 = MEMORY[0x1E0C809B0];
    v28[0] = MEMORY[0x1E0C809B0];
    v28[1] = 0x40000000;
    v28[2] = __NEIPSecDBCopySA_block_invoke;
    v28[3] = &unk_1E3CC1D20;
    v28[5] = &v31;
    v28[6] = a1;
    v29 = a2;
    v28[4] = &v35;
    dispatch_sync(v4, v28);
    v6 = (const __CFDictionary *)v36[3];
    if (v6)
    {
      Value = CFDictionaryGetValue(v6, CFSTR("Direction"));
      if (Value)
        v8 = CFEqual(Value, CFSTR("In"));
      else
        v8 = 0;
      if (!NEIPSecDBFilloutBasicSAInfo((CFDictionaryRef)v36[3], &v40, &v39, &v41, &v43, &v42, v44))
        goto LABEL_27;
      v11 = *(NSObject **)(a1 + 64);
      v12 = _NEIPSecDBGetQueue();
      if (v8)
        v14 = v42;
      else
        v14 = v43;
      if (v8)
        v15 = v43;
      else
        v15 = v42;
      if (v44[0])
        v16 = v44;
      else
        v16 = 0;
      if (NEPFKeySendGet(v11, (uint64_t)v12, v40, v13, (uint64_t)v14, (uint64_t)v15, v41, v16))
      {
        v17 = NEIPSecDBCopyResponseForQueuedRequest(v32[3], &v30);
        v18 = ne_log_obj();
        v19 = v18;
        if (v17)
        {
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412802;
            *(_QWORD *)&buf[4] = a1;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = a2;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = bswap32(v41);
            _os_log_impl(&dword_19BD16000, v19, OS_LOG_TYPE_INFO, "%@ copied SAID %u cSPI %08X", buf, 0x18u);
          }
          goto LABEL_27;
        }
        if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
LABEL_27:
          v21 = v36;
          v22 = (const void *)v36[3];
          if (v22)
          {
            CFRelease(v22);
            v21[3] = 0;
          }
          if (v43)
            free(v43);
          if (v42)
            free(v42);
          v23 = v32[3];
          if (v23)
          {
            v24 = _NEIPSecDBGetQueue();
            *(_QWORD *)buf = v5;
            *(_QWORD *)&buf[8] = 0x40000000;
            *(_QWORD *)&buf[16] = __NEIPSecDBRemoveQueuedRequest_block_invoke;
            v46 = &__block_descriptor_tmp_163;
            v47 = v23;
            dispatch_sync(v24, buf);
            free((void *)v32[3]);
          }
          v25 = v30;
          _Block_object_dispose(&v31, 8);
          _Block_object_dispose(&v35, 8);
          return v25;
        }
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = a1;
        v10 = "%@ failed to receive response for pfkey get SA";
        v20 = v19;
LABEL_25:
        _os_log_error_impl(&dword_19BD16000, v20, OS_LOG_TYPE_ERROR, v10, buf, 0xCu);
        goto LABEL_27;
      }
      v9 = ne_log_obj();
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        goto LABEL_27;
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = a1;
      v10 = "%@ pfkey send get SA failed";
    }
    else
    {
      v9 = ne_log_obj();
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        goto LABEL_27;
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = a1;
      v10 = "%@ copy SA, saData is NULL";
    }
    v20 = v9;
    goto LABEL_25;
  }
  v27 = ne_log_obj();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "NEIPSecDBCopySA";
    _os_log_fault_impl(&dword_19BD16000, v27, OS_LOG_TYPE_FAULT, "%s called with null session", buf, 0xCu);
  }
  return 0;
}

__CFArray *NEIPSecDBCopySAIDs(uint64_t a1)
{
  NSObject *v2;
  const __CFDictionary *v3;
  CFIndex Count;
  CFMutableArrayRef Mutable;
  __CFArray *v6;
  const void **v7;
  const void **v8;
  uint64_t i;
  uint64_t v10;
  const void *v11;
  NSObject *v13;
  _QWORD v14[6];
  __int128 buf;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = &buf;
    v16 = 0x2000000000;
    v17 = 0;
    v2 = _NEIPSecDBGetQueue();
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 0x40000000;
    v14[2] = __NEIPSecDBCopySAIDs_block_invoke;
    v14[3] = &unk_1E3CC1D48;
    v14[4] = &buf;
    v14[5] = a1;
    dispatch_sync(v2, v14);
    v3 = *(const __CFDictionary **)(*((_QWORD *)&buf + 1) + 24);
    if (v3)
      Count = CFDictionaryGetCount(v3);
    else
      Count = 0;
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, MEMORY[0x1E0C9B378]);
    v6 = Mutable;
    if (Count >= 1 && Mutable)
    {
      v7 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
      v8 = (const void **)malloc_type_calloc(Count, 8uLL, 0x80040B8603338uLL);
      CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(*((_QWORD *)&buf + 1) + 24), v7, v8);
      for (i = 0; i != Count; ++i)
        CFArrayAppendValue(v6, v7[i]);
      free(v7);
      free(v8);
    }
    v10 = *((_QWORD *)&buf + 1);
    v11 = *(const void **)(*((_QWORD *)&buf + 1) + 24);
    if (v11)
    {
      CFRelease(v11);
      *(_QWORD *)(v10 + 24) = 0;
    }
    _Block_object_dispose(&buf, 8);
  }
  else
  {
    v13 = ne_log_obj();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = "NEIPSecDBCopySAIDs";
      _os_log_fault_impl(&dword_19BD16000, v13, OS_LOG_TYPE_FAULT, "%s called with null session", (uint8_t *)&buf, 0xCu);
    }
    return 0;
  }
  return v6;
}

uint64_t NEIPSecDBFlushSAs(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  CFIndex Count;
  size_t v7;
  const void **v8;
  const void **v9;
  uint64_t i;
  uint64_t v11;
  NSObject *v12;
  uint64_t *v13;
  const void *v14;
  uint64_t v15;
  NSObject *v16;
  _QWORD block[7];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 buf;
  void (*v28)(uint64_t);
  void *v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v2 = ne_log_obj();
  v3 = v2;
  if (a1)
  {
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = a1;
      _os_log_impl(&dword_19BD16000, v3, OS_LOG_TYPE_INFO, "%@ flush all SAs", (uint8_t *)&buf, 0xCu);
    }
    v23 = 0;
    v24 = &v23;
    v25 = 0x2000000000;
    v26 = 0;
    v19 = 0;
    v20 = &v19;
    v21 = 0x2000000000;
    v22 = 0;
    v4 = _NEIPSecDBGetQueue();
    v5 = MEMORY[0x1E0C809B0];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __NEIPSecDBFlushSAs_block_invoke;
    block[3] = &unk_1E3CC1D70;
    block[5] = &v19;
    block[6] = a1;
    block[4] = &v23;
    dispatch_sync(v4, block);
    Count = CFDictionaryGetCount((CFDictionaryRef)v24[3]);
    if (Count < 1)
      goto LABEL_8;
    v7 = Count;
    v8 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
    v9 = (const void **)malloc_type_calloc(v7, 8uLL, 0x80040B8603338uLL);
    CFDictionaryGetKeysAndValues((CFDictionaryRef)v24[3], v8, v9);
    for (i = 0; i != v7; _NEIPSecDBDeleteSA(a1, (CFDictionaryRef)v9[i++]))
      ;
    free(v8);
    free(v9);
    if (NEIPSecDBCopyResponseForQueuedRequest(v20[3], 0))
    {
LABEL_8:
      v11 = 1;
    }
    else
    {
      v12 = ne_log_obj();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_error_impl(&dword_19BD16000, v12, OS_LOG_TYPE_ERROR, "failed to receive response for pfkey flush SA", (uint8_t *)&buf, 2u);
      }
      v11 = 0;
    }
    v13 = v24;
    v14 = (const void *)v24[3];
    if (v14)
    {
      CFRelease(v14);
      v13[3] = 0;
    }
    v15 = v20[3];
    if (v15)
    {
      v16 = _NEIPSecDBGetQueue();
      *(_QWORD *)&buf = v5;
      *((_QWORD *)&buf + 1) = 0x40000000;
      v28 = __NEIPSecDBRemoveQueuedRequest_block_invoke;
      v29 = &__block_descriptor_tmp_163;
      v30 = v15;
      dispatch_sync(v16, &buf);
      free((void *)v20[3]);
    }
    _Block_object_dispose(&v19, 8);
    _Block_object_dispose(&v23, 8);
  }
  else
  {
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = "NEIPSecDBFlushSAs";
      _os_log_fault_impl(&dword_19BD16000, v3, OS_LOG_TYPE_FAULT, "%s called with null session", (uint8_t *)&buf, 0xCu);
    }
    return 0;
  }
  return v11;
}

uint64_t NEIPSecDBAddPolicy(uint64_t a1, CFTypeRef cf)
{
  uint64_t v4;
  const void *Value;
  _BOOL4 v6;
  char v7;
  NSObject *v8;
  const char *v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  const void *v13;
  const void *v14;
  char v15;
  char v16;
  const void *v17;
  const void *v18;
  __int16 v19;
  NSObject *v20;
  uint64_t v21;
  NSObject *v22;
  const char *v24;
  const __CFNumber *v25;
  const __CFString *v26;
  const __CFString *v27;
  void *v28;
  const void *v29;
  const void *v30;
  __int16 v31;
  const __CFString *v32;
  const void *v33;
  void *v34;
  const __CFString *v35;
  const void *v36;
  void *v37;
  const __CFNumber *v38;
  int v39;
  const __CFString *v40;
  const void *v41;
  void *v42;
  const __CFString *v43;
  const void *v44;
  void *v45;
  const __CFNumber *v46;
  int v47;
  const __CFString *v48;
  const __CFString *v49;
  const __CFString *v50;
  __int16 v51;
  NSObject *v52;
  uint64_t v53;
  NSObject *v54;
  dispatch_queue_t v55;
  char *v56;
  char *v57;
  char *v58;
  NSObject *v59;
  dispatch_queue_t v60;
  NSObject *v61;
  const char *v62;
  const __CFNumber *v63;
  int v64;
  NSObject *v65;
  NSObject *v66;
  char v67;
  char v68;
  uint64_t v69;
  __int16 v70;
  char v71;
  void *v72;
  _QWORD block[8];
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  int v81;
  int valuePtr;
  uint64_t v83;
  char v84[24];
  char v85[24];
  char buffer[24];
  _BYTE buf[40];
  int v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v10 = ne_log_obj();
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      return 0;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "NEIPSecDBAddPolicy";
    v11 = "%s called with null session";
LABEL_189:
    _os_log_fault_impl(&dword_19BD16000, v10, OS_LOG_TYPE_FAULT, v11, buf, 0xCu);
    return 0;
  }
  if (!*(_QWORD *)(a1 + 88))
  {
    v10 = ne_log_obj();
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      return 0;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "NEIPSecDBAddPolicy";
    v11 = "%s called with null session->policies";
    goto LABEL_189;
  }
  v83 = 0;
  valuePtr = 255;
  buffer[0] = 0;
  v85[0] = 0;
  v84[0] = 0;
  v78 = 0;
  v79 = &v78;
  v80 = 0x2000000000;
  v81 = 0;
  v74 = 0;
  v75 = &v74;
  v76 = 0x2000000000;
  v77 = 0;
  if (NEInitCFTypes_onceToken == -1)
  {
    if (!cf)
      goto LABEL_97;
  }
  else
  {
    dispatch_once(&NEInitCFTypes_onceToken, &__block_literal_global_22195);
    if (!cf)
      goto LABEL_97;
  }
  v4 = CFDICTIONARY_TYPE;
  if (CFGetTypeID(cf) != v4)
    goto LABEL_97;
  if (!NEGetValueWithType((const __CFDictionary *)cf, CFSTR("Mode"), CFSTRING_TYPE))
  {
    v8 = ne_log_obj();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      goto LABEL_97;
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "NEIPSecDBValidatePolicyDictionary";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3833;
    *(_WORD *)&buf[18] = 2112;
    *(_QWORD *)&buf[20] = CFSTR("Mode");
    *(_WORD *)&buf[28] = 2048;
    *(_QWORD *)&buf[30] = CFSTRING_TYPE;
    v9 = "%s:%d: value for key %@ is missing or type != %lu";
    goto LABEL_96;
  }
  if (!NEGetValueWithType((const __CFDictionary *)cf, CFSTR("IPSecProtocol"), CFSTRING_TYPE))
  {
    v8 = ne_log_obj();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      goto LABEL_97;
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "NEIPSecDBValidatePolicyDictionary";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3834;
    *(_WORD *)&buf[18] = 2112;
    *(_QWORD *)&buf[20] = CFSTR("IPSecProtocol");
    *(_WORD *)&buf[28] = 2048;
    *(_QWORD *)&buf[30] = CFSTRING_TYPE;
    v9 = "%s:%d: value for key %@ is missing or type != %lu";
    goto LABEL_96;
  }
  if (!NEGetValueWithType((const __CFDictionary *)cf, CFSTR("LocalAddress"), CFSTRING_TYPE))
  {
    v8 = ne_log_obj();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      goto LABEL_97;
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "NEIPSecDBValidatePolicyDictionary";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3835;
    *(_WORD *)&buf[18] = 2112;
    *(_QWORD *)&buf[20] = CFSTR("LocalAddress");
    *(_WORD *)&buf[28] = 2048;
    *(_QWORD *)&buf[30] = CFSTRING_TYPE;
    v9 = "%s:%d: value for key %@ is missing or type != %lu";
    goto LABEL_96;
  }
  if (!NEGetValueWithType((const __CFDictionary *)cf, CFSTR("RemoteAddress"), CFSTRING_TYPE))
  {
    v8 = ne_log_obj();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      goto LABEL_97;
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "NEIPSecDBValidatePolicyDictionary";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3836;
    *(_WORD *)&buf[18] = 2112;
    *(_QWORD *)&buf[20] = CFSTR("RemoteAddress");
    *(_WORD *)&buf[28] = 2048;
    *(_QWORD *)&buf[30] = CFSTRING_TYPE;
    v9 = "%s:%d: value for key %@ is missing or type != %lu";
    goto LABEL_96;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("LocalPrefix"))
    && !NEGetValueWithType((const __CFDictionary *)cf, CFSTR("LocalPrefix"), CFNUMBER_TYPE))
  {
    v8 = ne_log_obj();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      goto LABEL_97;
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "NEIPSecDBValidatePolicyDictionary";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3837;
    *(_WORD *)&buf[18] = 2112;
    *(_QWORD *)&buf[20] = CFSTR("LocalPrefix");
    *(_WORD *)&buf[28] = 2048;
    *(_QWORD *)&buf[30] = CFNUMBER_TYPE;
    v9 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_96;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("RemotePrefix"))
    && !NEGetValueWithType((const __CFDictionary *)cf, CFSTR("RemotePrefix"), CFNUMBER_TYPE))
  {
    v8 = ne_log_obj();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      goto LABEL_97;
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "NEIPSecDBValidatePolicyDictionary";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3838;
    *(_WORD *)&buf[18] = 2112;
    *(_QWORD *)&buf[20] = CFSTR("RemotePrefix");
    *(_WORD *)&buf[28] = 2048;
    *(_QWORD *)&buf[30] = CFNUMBER_TYPE;
    v9 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_96;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("LocalPort"))
    && !NEGetValueWithType((const __CFDictionary *)cf, CFSTR("LocalPort"), CFNUMBER_TYPE))
  {
    v8 = ne_log_obj();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      goto LABEL_97;
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "NEIPSecDBValidatePolicyDictionary";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3839;
    *(_WORD *)&buf[18] = 2112;
    *(_QWORD *)&buf[20] = CFSTR("LocalPort");
    *(_WORD *)&buf[28] = 2048;
    *(_QWORD *)&buf[30] = CFNUMBER_TYPE;
    v9 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_96;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("RemotePort"))
    && !NEGetValueWithType((const __CFDictionary *)cf, CFSTR("RemotePort"), CFNUMBER_TYPE))
  {
    v8 = ne_log_obj();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      goto LABEL_97;
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "NEIPSecDBValidatePolicyDictionary";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3840;
    *(_WORD *)&buf[18] = 2112;
    *(_QWORD *)&buf[20] = CFSTR("RemotePort");
    *(_WORD *)&buf[28] = 2048;
    *(_QWORD *)&buf[30] = CFNUMBER_TYPE;
    v9 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_96;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("UpperLayerProtocol"))
    && !NEGetValueWithType((const __CFDictionary *)cf, CFSTR("UpperLayerProtocol"), CFNUMBER_TYPE))
  {
    v8 = ne_log_obj();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      goto LABEL_97;
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "NEIPSecDBValidatePolicyDictionary";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3842;
    *(_WORD *)&buf[18] = 2112;
    *(_QWORD *)&buf[20] = CFSTR("UpperLayerProtocol");
    *(_WORD *)&buf[28] = 2048;
    *(_QWORD *)&buf[30] = CFNUMBER_TYPE;
    v9 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_96;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("UniqueID"))
    && !NEGetValueWithType((const __CFDictionary *)cf, CFSTR("UniqueID"), CFNUMBER_TYPE))
  {
    v8 = ne_log_obj();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      goto LABEL_97;
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "NEIPSecDBValidatePolicyDictionary";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3843;
    *(_WORD *)&buf[18] = 2112;
    *(_QWORD *)&buf[20] = CFSTR("UniqueID");
    *(_WORD *)&buf[28] = 2048;
    *(_QWORD *)&buf[30] = CFNUMBER_TYPE;
    v9 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_96;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("Direction"))
    && !NEGetValueWithType((const __CFDictionary *)cf, CFSTR("Direction"), CFSTRING_TYPE))
  {
    v8 = ne_log_obj();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      goto LABEL_97;
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "NEIPSecDBValidatePolicyDictionary";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3844;
    *(_WORD *)&buf[18] = 2112;
    *(_QWORD *)&buf[20] = CFSTR("Direction");
    *(_WORD *)&buf[28] = 2048;
    *(_QWORD *)&buf[30] = CFSTRING_TYPE;
    v9 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_96;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("Level"))
    && !NEGetValueWithType((const __CFDictionary *)cf, CFSTR("Level"), CFSTRING_TYPE))
  {
    v8 = ne_log_obj();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      goto LABEL_97;
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "NEIPSecDBValidatePolicyDictionary";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3846;
    *(_WORD *)&buf[18] = 2112;
    *(_QWORD *)&buf[20] = CFSTR("Level");
    *(_WORD *)&buf[28] = 2048;
    *(_QWORD *)&buf[30] = CFSTRING_TYPE;
    v9 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_96;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("OuterLocalAddress"))
    && !NEGetValueWithType((const __CFDictionary *)cf, CFSTR("OuterLocalAddress"), CFSTRING_TYPE))
  {
    v8 = ne_log_obj();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      goto LABEL_97;
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "NEIPSecDBValidatePolicyDictionary";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3848;
    *(_WORD *)&buf[18] = 2112;
    *(_QWORD *)&buf[20] = CFSTR("OuterLocalAddress");
    *(_WORD *)&buf[28] = 2048;
    *(_QWORD *)&buf[30] = CFSTRING_TYPE;
    v9 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_96;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("OuterRemoteAddress"))
    && !NEGetValueWithType((const __CFDictionary *)cf, CFSTR("OuterRemoteAddress"), CFSTRING_TYPE))
  {
    v8 = ne_log_obj();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      goto LABEL_97;
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "NEIPSecDBValidatePolicyDictionary";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3849;
    *(_WORD *)&buf[18] = 2112;
    *(_QWORD *)&buf[20] = CFSTR("OuterRemoteAddress");
    *(_WORD *)&buf[28] = 2048;
    *(_QWORD *)&buf[30] = CFSTRING_TYPE;
    v9 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_96;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("IPSecInterface"))
    && !NEGetValueWithType((const __CFDictionary *)cf, CFSTR("IPSecInterface"), CFSTRING_TYPE))
  {
    v8 = ne_log_obj();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      goto LABEL_97;
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "NEIPSecDBValidatePolicyDictionary";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3851;
    *(_WORD *)&buf[18] = 2112;
    *(_QWORD *)&buf[20] = CFSTR("IPSecInterface");
    *(_WORD *)&buf[28] = 2048;
    *(_QWORD *)&buf[30] = CFSTRING_TYPE;
    v9 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_96;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("InternalInterface"))
    && !NEGetValueWithType((const __CFDictionary *)cf, CFSTR("InternalInterface"), CFSTRING_TYPE))
  {
    v8 = ne_log_obj();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      goto LABEL_97;
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "NEIPSecDBValidatePolicyDictionary";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3852;
    *(_WORD *)&buf[18] = 2112;
    *(_QWORD *)&buf[20] = CFSTR("InternalInterface");
    *(_WORD *)&buf[28] = 2048;
    *(_QWORD *)&buf[30] = CFSTRING_TYPE;
    v9 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_96;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("OutgoingInterface"))
    && !NEGetValueWithType((const __CFDictionary *)cf, CFSTR("OutgoingInterface"), CFSTRING_TYPE))
  {
    v8 = ne_log_obj();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      goto LABEL_97;
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "NEIPSecDBValidatePolicyDictionary";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3853;
    *(_WORD *)&buf[18] = 2112;
    *(_QWORD *)&buf[20] = CFSTR("OutgoingInterface");
    *(_WORD *)&buf[28] = 2048;
    *(_QWORD *)&buf[30] = CFSTRING_TYPE;
    v9 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_96;
  }
  if (!CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("IntializeDisabled"))
    || NEGetValueWithType((const __CFDictionary *)cf, CFSTR("IntializeDisabled"), CFBOOLEAN_TYPE))
  {
    if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("Mode")))
    {
      Value = CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("Mode"));
      if (Value)
        LODWORD(Value) = CFEqual(Value, CFSTR("Transport"));
      v6 = (_DWORD)Value == 0;
      if ((_DWORD)Value)
        v7 = 1;
      else
        v7 = 2;
    }
    else
    {
      v7 = 2;
      v6 = 1;
    }
    if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("Direction")))
    {
      v13 = CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("Direction"));
      if (!v13)
        goto LABEL_107;
      v14 = v13;
      if (CFEqual(v13, CFSTR("In")))
      {
        v15 = 0;
        v16 = 1;
        goto LABEL_90;
      }
      if (!CFEqual(v14, CFSTR("Out")))
      {
LABEL_107:
        v20 = ne_log_obj();
        if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          goto LABEL_98;
        *(_WORD *)buf = 0;
        v24 = "add policy, invalid direction";
        goto LABEL_103;
      }
      v16 = 0;
      v15 = 1;
    }
    else
    {
      v15 = 0;
      v16 = 0;
    }
LABEL_90:
    if (!CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("IPSecProtocol")))
    {
      v70 = 0;
      goto LABEL_112;
    }
    v17 = CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("IPSecProtocol"));
    if (v17)
    {
      v18 = v17;
      if (CFEqual(v17, CFSTR("ESP")))
      {
        v19 = 50;
LABEL_111:
        v70 = v19;
LABEL_112:
        if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("UpperLayerProtocol")))
        {
          v25 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("UpperLayerProtocol"));
          CFNumberGetValue(v25, kCFNumberIntType, &valuePtr);
        }
        v71 = v7;
        v67 = v15;
        if (v6)
        {
          if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("OuterLocalAddress")))
          {
            v26 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("OuterLocalAddress"));
            v72 = NECreateAddressStructFromString(v26, 0, 0);
          }
          else
          {
            v72 = 0;
          }
          if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("OuterRemoteAddress")))
          {
            v27 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("OuterRemoteAddress"));
            v28 = NECreateAddressStructFromString(v27, 0, 0);
LABEL_124:
            v29 = CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("Level"));
            if (v29 && (v30 = v29, !CFEqual(v29, CFSTR("None"))))
            {
              if (!CFEqual(v30, CFSTR("Unique")))
              {
                if (CFEqual(v30, CFSTR("Require")))
                {
                  v69 = 2;
                  v68 = 2;
                }
                else
                {
                  if (!CFEqual(v30, CFSTR("Discard")))
                  {
                    v66 = ne_log_obj();
                    if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_error_impl(&dword_19BD16000, v66, OS_LOG_TYPE_ERROR, "add policy, invalid policy level", buf, 2u);
                    }
                    v34 = 0;
                    v37 = 0;
                    v42 = 0;
                    v45 = 0;
                    goto LABEL_172;
                  }
                  v69 = 0;
                  v68 = 0;
                }
LABEL_128:
                v32 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("LocalAddress"));
                v33 = CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("LocalPort"));
                v34 = NECreateAddressStructFromString(v32, (uint64_t)v33, 0);
                if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("LocalRangeEndAddress")))
                {
                  v35 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("LocalRangeEndAddress"));
                  v36 = CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("LocalRangeEndPort"));
                  v37 = NECreateAddressStructFromString(v35, (uint64_t)v36, 0);
                }
                else
                {
                  v37 = 0;
                }
                if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("LocalPrefix")))
                {
                  v38 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("LocalPrefix"));
                  CFNumberGetValue(v38, kCFNumberIntType, (char *)&v83 + 4);
                }
                else
                {
                  if (v6)
                    v39 = 24;
                  else
                    v39 = 32;
                  HIDWORD(v83) = v39;
                }
                v40 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("RemoteAddress"));
                v41 = CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("RemotePort"));
                v42 = NECreateAddressStructFromString(v40, (uint64_t)v41, 0);
                if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("RemoteRangeEndAddress")))
                {
                  v43 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("RemoteRangeEndAddress"));
                  v44 = CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("RemoteRangeEndPort"));
                  v45 = NECreateAddressStructFromString(v43, (uint64_t)v44, 0);
                }
                else
                {
                  v45 = 0;
                }
                if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("RemotePrefix")))
                {
                  v46 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("RemotePrefix"));
                  CFNumberGetValue(v46, kCFNumberIntType, &v83);
                }
                else
                {
                  if (v6)
                    v47 = 24;
                  else
                    v47 = 32;
                  LODWORD(v83) = v47;
                }
                if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("IPSecInterface")))
                {
                  v48 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("IPSecInterface"));
                  CFStringGetCString(v48, buffer, 16, 0x600u);
                }
                if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("InternalInterface")))
                {
                  v49 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("InternalInterface"));
                  CFStringGetCString(v49, v85, 16, 0x600u);
                }
                if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("OutgoingInterface")))
                {
                  v50 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("OutgoingInterface"));
                  CFStringGetCString(v50, v84, 16, 0x600u);
                }
                v51 = NEGetIntFromDictionary((const __CFDictionary *)cf, CFSTR("IntializeDisabled"), 0);
                v52 = _NEIPSecDBGetQueue();
                v53 = MEMORY[0x1E0C809B0];
                block[0] = MEMORY[0x1E0C809B0];
                block[1] = 0x40000000;
                block[2] = __NEIPSecDBAddPolicy_block_invoke;
                block[3] = &unk_1E3CC1D98;
                block[6] = a1;
                block[7] = cf;
                block[4] = &v78;
                block[5] = &v74;
                dispatch_sync(v52, block);
                if ((v16 & 1) != 0)
                  goto LABEL_199;
                v54 = *(NSObject **)(a1 + 64);
                v55 = _NEIPSecDBGetQueue();
                v56 = buffer;
                if (!buffer[0])
                  v56 = 0;
                v57 = v85;
                if (!v85[0])
                  v57 = 0;
                v58 = v84;
                if (!v84[0])
                  v58 = 0;
                if (NEPFKeySendSPDAdd(v54, (uint64_t)v55, (uint64_t)v34, (const UInt8 *)v37, BYTE4(v83), (uint64_t)v42, (const UInt8 *)v45, v83, valuePtr, SHIWORD(valuePtr), v69, 2, v70, v71, v68, SWORD2(v69), (const UInt8 *)v72, (const UInt8 *)v28, 0,
                       v56,
                       v57,
                       v58,
                       v51))
                {
LABEL_199:
                  if ((v67 & 1) != 0
                    || (v59 = *(NSObject **)(a1 + 64),
                        v60 = _NEIPSecDBGetQueue(),
                        NEPFKeySendSPDAdd(v59, (uint64_t)v60, (uint64_t)v42, (const UInt8 *)v45, v83, (uint64_t)v34, (const UInt8 *)v37, BYTE4(v83), valuePtr, SHIWORD(valuePtr), v69, 1, v70, v71, v68, SWORD2(v69), (const UInt8 *)v28, (const UInt8 *)v72, 0,
                          0,
                          0,
                          0,
                          v51)))
                  {
                    if (NEIPSecDBCopyResponseForQueuedRequest(v75[3], 0))
                    {
LABEL_172:
                      if (v72)
                        free(v72);
                      if (v28)
                        free(v28);
                      if (v42)
                        free(v42);
                      if (v34)
                        free(v34);
                      if (v45)
                        free(v45);
                      if (v37)
                        free(v37);
                      goto LABEL_98;
                    }
                    v61 = ne_log_obj();
                    if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
                    {
                      *(_WORD *)buf = 0;
                      v62 = "failed to receive response for pfkey add policy";
LABEL_196:
                      _os_log_error_impl(&dword_19BD16000, v61, OS_LOG_TYPE_ERROR, v62, buf, 2u);
                    }
                  }
                  else
                  {
                    v61 = ne_log_obj();
                    if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
                    {
                      *(_WORD *)buf = 0;
                      v62 = "pfkey send add policy failed";
                      goto LABEL_196;
                    }
                  }
                }
                else
                {
                  v61 = ne_log_obj();
                  if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
                  {
                    *(_WORD *)buf = 0;
                    v62 = "pfkey send add policy failed";
                    goto LABEL_196;
                  }
                }
                v64 = *((_DWORD *)v79 + 6);
                v65 = _NEIPSecDBGetQueue();
                *(_QWORD *)buf = v53;
                *(_QWORD *)&buf[8] = 0x40000000;
                *(_QWORD *)&buf[16] = __NEIPSecDBRemovePolicyIDFromSAs_block_invoke;
                *(_QWORD *)&buf[24] = &__block_descriptor_tmp_161;
                *(_QWORD *)&buf[32] = a1;
                v88 = v64;
                dispatch_sync(v65, buf);
                *((_DWORD *)v79 + 6) = 0;
                goto LABEL_172;
              }
              if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("UniqueID")))
              {
                *(_DWORD *)buf = 0;
                v63 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("UniqueID"));
                CFNumberGetValue(v63, kCFNumberIntType, buf);
                WORD2(v69) = *(_WORD *)buf;
              }
              else
              {
                WORD2(v69) = 0;
              }
              v68 = 3;
              v31 = 2;
            }
            else
            {
              v68 = 0;
              WORD2(v69) = 0;
              v31 = 1;
            }
            LOWORD(v69) = v31;
            goto LABEL_128;
          }
        }
        else
        {
          v72 = 0;
        }
        v28 = 0;
        goto LABEL_124;
      }
      if (CFEqual(v18, CFSTR("AH")))
      {
        v19 = 51;
        goto LABEL_111;
      }
    }
    v20 = ne_log_obj();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v24 = "add policy, invalid ipsec protocol";
      goto LABEL_103;
    }
    goto LABEL_98;
  }
  v8 = ne_log_obj();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "NEIPSecDBValidatePolicyDictionary";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3855;
    *(_WORD *)&buf[18] = 2112;
    *(_QWORD *)&buf[20] = CFSTR("IntializeDisabled");
    *(_WORD *)&buf[28] = 2048;
    *(_QWORD *)&buf[30] = CFBOOLEAN_TYPE;
    v9 = "%s:%d: type of value for key %@ != %lu";
LABEL_96:
    _os_log_error_impl(&dword_19BD16000, v8, OS_LOG_TYPE_ERROR, v9, buf, 0x26u);
  }
LABEL_97:
  v20 = ne_log_obj();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    v24 = "add policy dictionary validation failed";
LABEL_103:
    _os_log_error_impl(&dword_19BD16000, v20, OS_LOG_TYPE_ERROR, v24, buf, 2u);
  }
LABEL_98:
  v21 = v75[3];
  if (v21)
  {
    v22 = _NEIPSecDBGetQueue();
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = __NEIPSecDBRemoveQueuedRequest_block_invoke;
    *(_QWORD *)&buf[24] = &__block_descriptor_tmp_163;
    *(_QWORD *)&buf[32] = v21;
    dispatch_sync(v22, buf);
    free((void *)v75[3]);
  }
  v12 = *((unsigned int *)v79 + 6);
  _Block_object_dispose(&v74, 8);
  _Block_object_dispose(&v78, 8);
  return v12;
}

uint64_t NEIPSecDBDeletePolicy(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  dispatch_queue_t v7;
  int v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint64_t *v12;
  const void *v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v17;
  _QWORD v18[7];
  int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 buf;
  void (*v29)(uint64_t);
  void *v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v24 = 0;
    v25 = &v24;
    v26 = 0x2000000000;
    v27 = 0;
    v20 = 0;
    v21 = &v20;
    v22 = 0x2000000000;
    v23 = 0;
    v4 = _NEIPSecDBGetQueue();
    v5 = MEMORY[0x1E0C809B0];
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 0x40000000;
    v18[2] = __NEIPSecDBDeletePolicy_block_invoke;
    v18[3] = &unk_1E3CC1DC0;
    v18[5] = &v20;
    v18[6] = a1;
    v19 = a2;
    v18[4] = &v24;
    dispatch_sync(v4, v18);
    if (v25[3])
    {
      v6 = *(NSObject **)(a1 + 64);
      v7 = _NEIPSecDBGetQueue();
      v8 = NEGetIntFromDictionary((const __CFDictionary *)v25[3], CFSTR("PolicyID"), 0);
      if (pfkey_send_x5(v6, (uint64_t)v7, 0x16u, v8))
      {
        if (NEIPSecDBCopyResponseForQueuedRequest(v21[3], 0))
        {
          v9 = 1;
LABEL_14:
          v12 = v25;
          v13 = (const void *)v25[3];
          if (v13)
          {
            CFRelease(v13);
            v12[3] = 0;
          }
          v14 = v21[3];
          if (v14)
          {
            v15 = _NEIPSecDBGetQueue();
            *(_QWORD *)&buf = v5;
            *((_QWORD *)&buf + 1) = 0x40000000;
            v29 = __NEIPSecDBRemoveQueuedRequest_block_invoke;
            v30 = &__block_descriptor_tmp_163;
            v31 = v14;
            dispatch_sync(v15, &buf);
            free((void *)v21[3]);
          }
          _Block_object_dispose(&v20, 8);
          _Block_object_dispose(&v24, 8);
          return v9;
        }
        v10 = ne_log_obj();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          v11 = "failed to receive response for pfkey delete policy";
          goto LABEL_12;
        }
LABEL_13:
        v9 = 0;
        goto LABEL_14;
      }
      v10 = ne_log_obj();
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        goto LABEL_13;
      LOWORD(buf) = 0;
      v11 = "pfkey send delete policy failed";
    }
    else
    {
      v10 = ne_log_obj();
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        goto LABEL_13;
      LOWORD(buf) = 0;
      v11 = "delete policy, policy data is NULL";
    }
LABEL_12:
    _os_log_error_impl(&dword_19BD16000, v10, OS_LOG_TYPE_ERROR, v11, (uint8_t *)&buf, 2u);
    goto LABEL_13;
  }
  v17 = ne_log_obj();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
  {
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = "NEIPSecDBDeletePolicy";
    _os_log_fault_impl(&dword_19BD16000, v17, OS_LOG_TYPE_FAULT, "%s called with null session", (uint8_t *)&buf, 0xCu);
  }
  return 0;
}

uint64_t NEIPSecDBCopyPolicy(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  dispatch_queue_t v7;
  int v8;
  NSObject *v9;
  const char *v10;
  uint64_t *v11;
  const void *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v17;
  _QWORD block[7];
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 buf;
  void (*v30)(uint64_t);
  void *v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v25 = 0;
    v26 = &v25;
    v27 = 0x2000000000;
    v28 = 0;
    v21 = 0;
    v22 = &v21;
    v23 = 0x2000000000;
    v24 = 0;
    v20 = 0;
    v4 = _NEIPSecDBGetQueue();
    v5 = MEMORY[0x1E0C809B0];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __NEIPSecDBCopyPolicy_block_invoke;
    block[3] = &unk_1E3CC1DE8;
    block[5] = &v21;
    block[6] = a1;
    v19 = a2;
    block[4] = &v25;
    dispatch_sync(v4, block);
    if (v26[3])
    {
      v6 = *(NSObject **)(a1 + 64);
      v7 = _NEIPSecDBGetQueue();
      v8 = NEGetIntFromDictionary((const __CFDictionary *)v26[3], CFSTR("PolicyID"), 0);
      if (pfkey_send_x5(v6, (uint64_t)v7, 0x10u, v8))
      {
        if (NEIPSecDBCopyResponseForQueuedRequest(v22[3], &v20))
          goto LABEL_10;
        v9 = ne_log_obj();
        if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          goto LABEL_10;
        LOWORD(buf) = 0;
        v10 = "failed to receive response for pfkey spd get";
        goto LABEL_17;
      }
      v9 = ne_log_obj();
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
LABEL_10:
        v11 = v26;
        v12 = (const void *)v26[3];
        if (v12)
        {
          CFRelease(v12);
          v11[3] = 0;
        }
        v13 = v22[3];
        if (v13)
        {
          v14 = _NEIPSecDBGetQueue();
          *(_QWORD *)&buf = v5;
          *((_QWORD *)&buf + 1) = 0x40000000;
          v30 = __NEIPSecDBRemoveQueuedRequest_block_invoke;
          v31 = &__block_descriptor_tmp_163;
          v32 = v13;
          dispatch_sync(v14, &buf);
          free((void *)v22[3]);
        }
        v15 = v20;
        _Block_object_dispose(&v21, 8);
        _Block_object_dispose(&v25, 8);
        return v15;
      }
      LOWORD(buf) = 0;
      v10 = "pfkey send spd get failed";
    }
    else
    {
      v9 = ne_log_obj();
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        goto LABEL_10;
      LOWORD(buf) = 0;
      v10 = "copy policy, policy data is NULL";
    }
LABEL_17:
    _os_log_error_impl(&dword_19BD16000, v9, OS_LOG_TYPE_ERROR, v10, (uint8_t *)&buf, 2u);
    goto LABEL_10;
  }
  v17 = ne_log_obj();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
  {
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = "NEIPSecDBCopyPolicy";
    _os_log_fault_impl(&dword_19BD16000, v17, OS_LOG_TYPE_FAULT, "%s called with null session", (uint8_t *)&buf, 0xCu);
  }
  return 0;
}

__CFArray *NEIPSecDBCopyPolicyIDs(uint64_t a1)
{
  NSObject *v2;
  CFIndex Count;
  CFMutableArrayRef Mutable;
  __CFArray *v5;
  const void **v7;
  const void **v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  NSObject *v13;
  const char *v14;
  _QWORD v15[6];
  __int128 buf;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v13 = ne_log_obj();
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
      return 0;
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = "NEIPSecDBCopyPolicyIDs";
    v14 = "%s called with null session";
LABEL_19:
    _os_log_fault_impl(&dword_19BD16000, v13, OS_LOG_TYPE_FAULT, v14, (uint8_t *)&buf, 0xCu);
    return 0;
  }
  if (!*(_QWORD *)(a1 + 88))
  {
    v13 = ne_log_obj();
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
      return 0;
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = "NEIPSecDBCopyPolicyIDs";
    v14 = "%s called with null session->policies";
    goto LABEL_19;
  }
  *(_QWORD *)&buf = 0;
  *((_QWORD *)&buf + 1) = &buf;
  v17 = 0x2000000000;
  v18 = 0;
  v2 = _NEIPSecDBGetQueue();
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 0x40000000;
  v15[2] = __NEIPSecDBCopyPolicyIDs_block_invoke;
  v15[3] = &unk_1E3CC1E10;
  v15[4] = &buf;
  v15[5] = a1;
  dispatch_sync(v2, v15);
  Count = CFDictionaryGetCount(*(CFDictionaryRef *)(*((_QWORD *)&buf + 1) + 24));
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, MEMORY[0x1E0C9B378]);
  v5 = Mutable;
  if (Count >= 1 && Mutable != 0)
  {
    v7 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
    v8 = (const void **)malloc_type_calloc(Count, 8uLL, 0x80040B8603338uLL);
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(*((_QWORD *)&buf + 1) + 24), v7, v8);
    v9 = 0;
    do
      CFArrayAppendValue(v5, v7[v9++]);
    while (Count != v9);
    free(v7);
    free(v8);
  }
  v10 = *((_QWORD *)&buf + 1);
  v11 = *(const void **)(*((_QWORD *)&buf + 1) + 24);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(v10 + 24) = 0;
  }
  _Block_object_dispose(&buf, 8);
  return v5;
}

uint64_t NEIPSecDBFlushPolicies(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  CFIndex Count;
  size_t v5;
  const void **v6;
  const void **v7;
  uint64_t i;
  NSObject *v9;
  dispatch_queue_t v10;
  int v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t *v14;
  const void *v15;
  uint64_t v16;
  NSObject *v17;
  NSObject *v19;
  _QWORD block[7];
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 buf;
  void (*v30)(uint64_t);
  void *v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v25 = 0;
    v26 = &v25;
    v27 = 0x2000000000;
    v28 = 0;
    v21 = 0;
    v22 = &v21;
    v23 = 0x2000000000;
    v24 = 0;
    v2 = _NEIPSecDBGetQueue();
    v3 = MEMORY[0x1E0C809B0];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __NEIPSecDBFlushPolicies_block_invoke;
    block[3] = &unk_1E3CC1E38;
    block[5] = &v21;
    block[6] = a1;
    block[4] = &v25;
    dispatch_sync(v2, block);
    Count = CFDictionaryGetCount((CFDictionaryRef)v26[3]);
    if (Count < 1)
      goto LABEL_6;
    v5 = Count;
    v6 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
    v7 = (const void **)malloc_type_calloc(v5, 8uLL, 0x80040B8603338uLL);
    CFDictionaryGetKeysAndValues((CFDictionaryRef)v26[3], v6, v7);
    for (i = 0; i != v5; ++i)
    {
      v9 = *(NSObject **)(a1 + 64);
      v10 = _NEIPSecDBGetQueue();
      v11 = NEGetIntFromDictionary((const __CFDictionary *)v7[i], CFSTR("PolicyID"), 0);
      pfkey_send_x5(v9, (uint64_t)v10, 0x16u, v11);
    }
    free(v6);
    free(v7);
    if (NEIPSecDBCopyResponseForQueuedRequest(v22[3], 0))
    {
LABEL_6:
      v12 = 1;
    }
    else
    {
      v13 = ne_log_obj();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_error_impl(&dword_19BD16000, v13, OS_LOG_TYPE_ERROR, "failed to receive response for pfkey flush policies", (uint8_t *)&buf, 2u);
      }
      v12 = 0;
    }
    v14 = v26;
    v15 = (const void *)v26[3];
    if (v15)
    {
      CFRelease(v15);
      v14[3] = 0;
    }
    v16 = v22[3];
    if (v16)
    {
      v17 = _NEIPSecDBGetQueue();
      *(_QWORD *)&buf = v3;
      *((_QWORD *)&buf + 1) = 0x40000000;
      v30 = __NEIPSecDBRemoveQueuedRequest_block_invoke;
      v31 = &__block_descriptor_tmp_163;
      v32 = v16;
      dispatch_sync(v17, &buf);
      free((void *)v22[3]);
    }
    _Block_object_dispose(&v21, 8);
    _Block_object_dispose(&v25, 8);
  }
  else
  {
    v19 = ne_log_obj();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = "NEIPSecDBFlushPolicies";
      _os_log_fault_impl(&dword_19BD16000, v19, OS_LOG_TYPE_FAULT, "%s called with null session", (uint8_t *)&buf, 0xCu);
    }
    return 0;
  }
  return v12;
}

uint64_t NEIPSecDBFlushAll(uint64_t a1)
{
  uint64_t result;
  NSObject *v3;
  int v4;
  const char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    result = NEIPSecDBFlushSAs(a1);
    if ((_DWORD)result)
      return NEIPSecDBFlushPolicies(a1) != 0;
  }
  else
  {
    v3 = ne_log_obj();
    result = os_log_type_enabled(v3, OS_LOG_TYPE_FAULT);
    if ((_DWORD)result)
    {
      v4 = 136315138;
      v5 = "NEIPSecDBFlushAll";
      _os_log_fault_impl(&dword_19BD16000, v3, OS_LOG_TYPE_FAULT, "%s called with null session", (uint8_t *)&v4, 0xCu);
      return 0;
    }
  }
  return result;
}

BOOL NEIPSecDBInvalidateSession(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  _BOOL8 result;
  NSObject *v5;
  _QWORD block[5];
  uint8_t buf[4];
  const char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = ne_log_obj();
  v3 = v2;
  if (a1)
  {
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v8 = (const char *)a1;
      _os_log_impl(&dword_19BD16000, v3, OS_LOG_TYPE_DEFAULT, "%@ invalidating", buf, 0xCu);
    }
    result = 1;
    *(_BYTE *)(a1 + 56) = 1;
    if (*(_QWORD *)(a1 + 64))
    {
      v5 = _NEIPSecDBGetQueue();
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __NEIPSecDBInvalidateSession_block_invoke;
      block[3] = &__block_descriptor_tmp_150;
      block[4] = a1;
      dispatch_sync(v5, block);
      *(_QWORD *)(a1 + 64) = 0;
      return 1;
    }
  }
  else
  {
    result = os_log_type_enabled(v2, OS_LOG_TYPE_FAULT);
    if (result)
    {
      *(_DWORD *)buf = 136315138;
      v8 = "NEIPSecDBInvalidateSession";
      _os_log_fault_impl(&dword_19BD16000, v3, OS_LOG_TYPE_FAULT, "%s called with null session", buf, 0xCu);
      return 0;
    }
  }
  return result;
}

uint64_t NEIPSecDBStartIdleTimeout(uint64_t a1, int a2, int a3, int a4)
{
  return NEIPSecDBCreateStatsTimer(a1, 0, a2, a3, a4);
}

uint64_t NEIPSecDBCreateStatsTimer(uint64_t a1, int a2, int a3, int a4, int a5)
{
  uint64_t v6;
  NSObject *v11;
  NSObject *v13;
  _QWORD v14[6];
  int v15;
  int v16;
  int v17;
  int v18;
  __int128 buf;
  uint64_t v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v6 = 0;
    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = &buf;
    v20 = 0x2000000000;
    v21 = 0;
    if (a3 && a4 && a5)
    {
      v11 = _NEIPSecDBGetQueue();
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 0x40000000;
      v14[2] = __NEIPSecDBCreateStatsTimer_block_invoke;
      v14[3] = &unk_1E3CC1F40;
      v15 = a4;
      v16 = a5;
      v17 = a3;
      v18 = a2;
      v14[4] = &buf;
      v14[5] = a1;
      dispatch_sync(v11, v14);
      v6 = *(unsigned __int8 *)(*((_QWORD *)&buf + 1) + 24);
    }
    _Block_object_dispose(&buf, 8);
  }
  else
  {
    v13 = ne_log_obj();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = "NEIPSecDBCreateStatsTimer";
      _os_log_fault_impl(&dword_19BD16000, v13, OS_LOG_TYPE_FAULT, "%s called with null session", (uint8_t *)&buf, 0xCu);
    }
    return 0;
  }
  return v6;
}

uint64_t NEIPSecDBStartBlackHoleDetection(uint64_t a1, int a2, int a3, int a4)
{
  return NEIPSecDBCreateStatsTimer(a1, 1, a2, a3, a4);
}

uint64_t NEIPSecDBScheduleWithRunLoop(uint64_t a1)
{
  NSObject *v2;
  int v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v2 = ne_log_obj();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
    {
      v3 = 136315138;
      v4 = "NEIPSecDBScheduleWithRunLoop";
      _os_log_fault_impl(&dword_19BD16000, v2, OS_LOG_TYPE_FAULT, "%s called with null session", (uint8_t *)&v3, 0xCu);
    }
  }
  return 0;
}

uint64_t NEIPSecDBUnScheduleWithRunLoop(uint64_t a1)
{
  NSObject *v2;
  int v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v2 = ne_log_obj();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
    {
      v3 = 136315138;
      v4 = "NEIPSecDBUnScheduleWithRunLoop";
      _os_log_fault_impl(&dword_19BD16000, v2, OS_LOG_TYPE_FAULT, "%s called with null session", (uint8_t *)&v3, 0xCu);
    }
  }
  return 0;
}

const __CFString *NEIPSecNotifyCodeCopyString(int a1)
{
  const __CFString *result;

  if (a1 <= 39)
  {
    if (a1 > 23)
    {
      switch(a1)
      {
        case 24:
          return CFSTR("ServerRejectedAuth");
        case 36:
          return CFSTR("ServerInternalAddressFailure");
        case 38:
          return CFSTR("ServerRejectedTS");
      }
    }
    else
    {
      switch(a1)
      {
        case 4:
          return CFSTR("ServerRejectedSPI");
        case 7:
          return CFSTR("ServerRejectedSyntax");
        case 14:
          return CFSTR("ServerRejectedProposal");
      }
    }
    return (const __CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Unknown(%lld)"), a1);
  }
  else
  {
    switch(a1)
    {
      case 70000:
        return CFSTR("Unknown");
      case 70001:
        return CFSTR("InternalError");
      case 70002:
        return CFSTR("CouldNotSend");
      case 70003:
        return CFSTR("InvalidArgs");
      case 70004:
        return CFSTR("UserRequested");
      case 70005:
        return CFSTR("PeerRequested");
      case 70006:
        return CFSTR("ServerDidNotRespond");
      case 70007:
        return CFSTR("ServerStoppedResponding");
      case 70008:
        return CFSTR("ReceivedInvalidSyntax");
      case 70009:
        return CFSTR("ReceivedInvalidProposal");
      case 70010:
        return CFSTR("ReceivedInvalidSPI");
      case 70011:
        return CFSTR("ReceivedInvalidTS");
      case 70012:
        return CFSTR("IKESocketFailure");
      case 70013:
        return CFSTR("IKELocalAddressMissing");
      case 70014:
        return CFSTR("IKERemoteAddressMissing");
      case 70015:
        return CFSTR("IKERemotePortMissing");
      case 70016:
        return CFSTR("PacketCreateFailed");
      case 70017:
        return CFSTR("PacketProcessingFailed");
      case 70018:
        return CFSTR("SAMigrationFailed");
      case 70019:
        return CFSTR("InvalidConfiguration");
      case 70020:
        return CFSTR("FailedToGenerateSPI");
      case 70021:
        return CFSTR("CryptoFailed");
      case 70022:
        return CFSTR("ConfigurationEstablishmentFailed");
      case 70023:
        return CFSTR("ChildInstallSAFailed");
      case 70024:
        return CFSTR("NoIKESA");
      case 70025:
        return CFSTR("NoChildSA");
      case 70026:
        return CFSTR("ChildUninstallSAFailed");
      case 70027:
        return CFSTR("AuthFailed");
      case 70028:
        return CFSTR("ReceivedInvalidVendorID");
      case 70029:
        return CFSTR("EAPIdentityDecryptionFailure");
      case 70030:
        return CFSTR("ClientCertNotYetValid");
      case 70031:
        return CFSTR("ClientCertExpired");
      case 70032:
        return CFSTR("ClientCertMissing");
      case 70033:
        return (const __CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Unknown(%lld)"), a1);
      case 70034:
        return CFSTR("ClientCertInvalid");
      case 70035:
        return CFSTR("ServerCertNotYetValid");
      case 70036:
        return CFSTR("ServerCertExpired");
      case 70037:
        return CFSTR("ServerCertMissing");
      case 70038:
        return CFSTR("ServerCertInvalid");
      case 70039:
        return CFSTR("ReceivedPrivateError");
      case 70040:
        return CFSTR("IKESADelete");
      default:
        if (a1 == 40)
        {
          result = CFSTR("ServerRejectedAddress");
        }
        else
        {
          if (a1 != 16407)
            return (const __CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Unknown(%lld)"), a1);
          result = CFSTR("IKEStatusServerRedirect");
        }
        break;
    }
  }
  return result;
}

const __CFString *NEIPSecNotifyReasonCopyString(int a1)
{
  const __CFString *result;

  if (a1 <= 1999)
  {
    result = CFSTR("Unknown");
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        result = CFSTR("InternalError");
        break;
      case 2:
        result = CFSTR("CouldNotSend");
        break;
      case 3:
        result = CFSTR("InvalidArgs");
        break;
      default:
        if (a1 == 1000)
        {
          result = CFSTR("UserRequested");
        }
        else if (a1 == 1001)
        {
          result = CFSTR("PeerRequested");
        }
        else
        {
LABEL_17:
          result = (const __CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Unknown(%lld)"), a1);
        }
        break;
    }
  }
  else
  {
    switch(a1)
    {
      case 2000:
        result = CFSTR("ServerDidNotRespond");
        break;
      case 2001:
        result = CFSTR("ServerStoppedResponding");
        break;
      case 2002:
      case 2003:
      case 2004:
      case 2005:
      case 2006:
      case 2007:
      case 2008:
      case 2009:
        goto LABEL_17;
      case 2010:
        result = CFSTR("ServerRejectedSyntax");
        break;
      case 2011:
        result = CFSTR("ServerRejectedProposal");
        break;
      case 2012:
        result = CFSTR("ServerRejectedSPI");
        break;
      case 2013:
        result = CFSTR("ServerRejectedTS");
        break;
      case 2014:
        result = CFSTR("ServerRejectedAuth");
        break;
      case 2015:
        result = CFSTR("ServerRejectedAddress");
        break;
      case 2016:
        result = CFSTR("ServerRedirect");
        break;
      default:
        switch(a1)
        {
          case 2100:
            result = CFSTR("ReceivedInvalidSyntax");
            break;
          case 2101:
            result = CFSTR("ReceivedInvalidProposal");
            break;
          case 2102:
            result = CFSTR("ReceivedInvalidSPI");
            break;
          case 2103:
            result = CFSTR("ReceivedInvalidTS");
            break;
          case 2104:
          case 2105:
          case 2106:
          case 2107:
          case 2108:
          case 2109:
            goto LABEL_17;
          case 2110:
            result = CFSTR("AuthFailedPSK");
            break;
          case 2111:
            result = CFSTR("AuthFailedCert");
            break;
          case 2112:
            result = CFSTR("AuthFailedEAP");
            break;
          case 2113:
            result = CFSTR("ReceivedInvalidVendorID");
            break;
          default:
            switch(a1)
            {
              case 3000:
                result = CFSTR("InternalIKESessionMissing");
                break;
              case 3001:
                result = CFSTR("InternalIKESocketFailure");
                break;
              case 3002:
                result = CFSTR("InternalIKELocalAddressMissing");
                break;
              case 3003:
                result = CFSTR("InternalIKERemoteAddressMissing");
                break;
              case 3004:
                result = CFSTR("InternalIKERemotePortMissing");
                break;
              case 3005:
                result = CFSTR("InternalPacketCreateFailed");
                break;
              case 3006:
                result = CFSTR("InternalPacketProcessingFailed");
                break;
              case 3007:
                result = CFSTR("InternalSAMigrationFailed");
                break;
              default:
                goto LABEL_17;
            }
            break;
        }
        break;
    }
  }
  return result;
}

uint64_t NEIPSecIKENotificationTypeCopyString(unsigned int a1)
{
  uint64_t v2;
  __CFString *v3;
  __CFString *v4;
  __CFString *v5;
  uint64_t v6;

  v2 = (unsigned __int16)a1 & 0xF000;
  if ((_DWORD)v2 == 4096)
    v3 = CFSTR("IKE");
  else
    v3 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Unknown(%d)"), v2);
  if ((a1 & 0xF00) < 0x900 && ((0x1BFu >> (BYTE1(a1) & 0xF)) & 1) != 0)
    v4 = off_1E3CC2260[(a1 >> 8) & 0xF];
  else
    v4 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Unknown(%lld)"), a1 & 0xF00);
  if (a1 >= 6u)
    v5 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Unknown(%lld)"), a1);
  else
    v5 = off_1E3CC22A8[a1];
  v6 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("mode=%@,type=%@,status=%@"), v3, v4, v5);

  return v6;
}

CFStringRef NEIPSecIKECreateSessionWithInterfaceAndSocketHandlers(const __CFAllocator *a1, uint64_t a2, const __CFDictionary *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t))
{
  return NEIPSecIKECreateSessionWithInterfaceAndSASession(a1, a3, a4, a5, a6, a7, a8, a9, 0);
}

CFStringRef NEIPSecIKECreateSessionWithInterfaceAndSASession(const __CFAllocator *a1, const __CFDictionary *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t), void *a9)
{
  const __CFNumber *Value;
  CFStringRef v18;
  NSObject *v19;
  xpc_connection_t mach_service;
  void *v21;
  _xpc_connection_s *v22;
  _xpc_connection_s *v23;
  NEIKEv2IKESAConfiguration *v24;
  NEIKEv2ChildSAConfiguration *v25;
  NEIKEv2SessionConfiguration *v26;
  NEIKEv2SessionConfiguration *v27;
  uint64_t v28;
  NSObject *v29;
  xpc_object_t v30;
  void *v31;
  _BOOL4 v32;
  xpc_object_t v33;
  _xpc_connection_s *v34;
  id v35;
  uint64_t v36;
  NSObject *v37;
  void *v38;
  NSObject *v39;
  id v40;
  NSObject *v42;
  int64_t int64;
  _BOOL4 v44;
  NSObject *v45;
  _BOOL4 v46;
  _BOOL4 v47;
  NSObject *v48;
  NSObject *v49;
  NSObject *v50;
  int64_t v51;
  int64_t v52;
  xpc_object_t xdict;
  NEIPSecSAKernelSession *v54;
  _QWORD block[4];
  NEIKEv2IKESAConfiguration *v56;
  NEIKEv2ChildSAConfiguration *v57;
  NEIKEv2SessionConfiguration *v58;
  NEIPSecSAKernelSession *v59;
  id v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD aBlock[5];
  int valuePtr;
  _QWORD handler[6];
  _BYTE buf[24];
  uint64_t (*v69)(uint64_t, uint64_t);
  void (*v70)(uint64_t);
  id v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v54 = a9;
  valuePtr = 0;
  Value = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("IKEVersion"));
  if (!Value || (CFNumberGetValue(Value, kCFNumberIntType, &valuePtr), valuePtr != 1))
  {
    v24 = NEIPSecIKEValidateIKEDictionary(a2);
    v25 = NEIPSecIKEValidateIKEChildDictionary(a3);
    v26 = NEIPSecIKEValidateSessionDictionary(a2);
    v27 = v26;
    if (v24)
    {
      if (v25)
      {
        if (v26)
        {
          if (v54
            || (!a8 ? (v28 = 0xFFFFFFFFLL) : (v28 = a8(a6)),
                (v54 = -[NEIPSecSAKernelSession initWithName:delegate:pfkeySocket:]([NEIPSecSAKernelSession alloc], "initWithName:delegate:pfkeySocket:", CFSTR("IKEv2 Session Database"), 0, v28)) != 0))
          {
            if (a7)
            {
              aBlock[0] = MEMORY[0x1E0C809B0];
              aBlock[1] = 3221225472;
              aBlock[2] = __NEIPSecIKECreateSessionWithInterfaceAndSASession_block_invoke;
              aBlock[3] = &__block_descriptor_40_e57_i40__0_v8r__sockaddr_CC_14c__16r__sockaddr_CC_14c__24r_32l;
              aBlock[4] = a7;
              v38 = _Block_copy(aBlock);
            }
            else
            {
              v38 = 0;
            }
            *(_QWORD *)buf = 0;
            *(_QWORD *)&buf[8] = buf;
            *(_QWORD *)&buf[16] = 0x3032000000;
            v69 = __Block_byref_object_copy__13555;
            v70 = __Block_byref_object_dispose__13556;
            v71 = 0;
            v39 = NEIPSecIKECopyDefaultSessionQueue();
            block[0] = MEMORY[0x1E0C809B0];
            block[1] = 3221225472;
            block[2] = __NEIPSecIKECreateSessionWithInterfaceAndSASession_block_invoke_238;
            block[3] = &unk_1E3CC21D8;
            v61 = buf;
            v56 = v24;
            v57 = v25;
            v62 = a4;
            v58 = v27;
            v60 = v38;
            v54 = v54;
            v59 = v54;
            v63 = a5;
            v64 = a6;
            v40 = v38;
            dispatch_sync(v39, block);

            v18 = (CFStringRef)*(id *)(*(_QWORD *)&buf[8] + 40);
            _Block_object_dispose(buf, 8);

            goto LABEL_35;
          }
          ne_log_obj();
          v42 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v42, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v28;
            _os_log_fault_impl(&dword_19BD16000, v42, OS_LOG_TYPE_FAULT, "[NEIPSecSAKernelSession init pfkeySocket=%d] failed", buf, 8u);
          }

          v54 = 0;
LABEL_40:
          v18 = 0;
LABEL_35:

          goto LABEL_36;
        }
        ne_log_obj();
        v50 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v50, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = "NEIPSecIKECreateSessionWithInterfaceAndSASession";
          _os_log_fault_impl(&dword_19BD16000, v50, OS_LOG_TYPE_FAULT, "%s called with null sessionConfig", buf, 0xCu);
        }
      }
      else
      {
        ne_log_obj();
        v50 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v50, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = "NEIPSecIKECreateSessionWithInterfaceAndSASession";
          _os_log_fault_impl(&dword_19BD16000, v50, OS_LOG_TYPE_FAULT, "%s called with null childConfig", buf, 0xCu);
        }
      }
    }
    else
    {
      ne_log_obj();
      v50 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v50, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = "NEIPSecIKECreateSessionWithInterfaceAndSASession";
        _os_log_fault_impl(&dword_19BD16000, v50, OS_LOG_TYPE_FAULT, "%s called with null ikeConfig", buf, 0xCu);
      }
    }

    goto LABEL_40;
  }
  v18 = CFStringCreateWithCString(a1, "DummyIPSecObject", 0x8000100u);
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x3032000000;
  v69 = __Block_byref_object_copy__13555;
  v70 = __Block_byref_object_dispose__13556;
  v71 = 0;
  if (xpc_client_queue_once != -1)
    dispatch_once(&xpc_client_queue_once, &__block_literal_global_13557);
  v19 = (id)xpc_client_queue_q;
  mach_service = xpc_connection_create_mach_service("com.apple.SecureNetworking.IPSec", v19, 2uLL);
  v21 = *(void **)(*(_QWORD *)&buf[8] + 40);
  *(_QWORD *)(*(_QWORD *)&buf[8] + 40) = mach_service;

  v22 = *(_xpc_connection_s **)(*(_QWORD *)&buf[8] + 40);
  if (v22)
  {
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 3221225472;
    handler[2] = __create_xpc_connection_block_invoke;
    handler[3] = &unk_1E3CC2200;
    handler[4] = buf;
    xpc_connection_set_event_handler(v22, handler);
    xpc_connection_resume(*(xpc_connection_t *)(*(_QWORD *)&buf[8] + 40));
    v23 = (_xpc_connection_s *)*(id *)(*(_QWORD *)&buf[8] + 40);
  }
  else
  {
    ne_log_obj();
    v29 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      LOWORD(handler[0]) = 0;
      _os_log_error_impl(&dword_19BD16000, v29, OS_LOG_TYPE_ERROR, "NEIPSec:create_xpc_connection, xpc_connection_create_mach_service fails\n", (uint8_t *)handler, 2u);
    }

    v23 = 0;
  }

  _Block_object_dispose(buf, 8);
  if (!v23)
    goto LABEL_64;
  v30 = xpc_dictionary_create(0, 0, 0);
  v31 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  if (a3)
    a3 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  v32 = 0;
  if (!v30 || !v31)
    goto LABEL_61;
  xpc_dictionary_set_int64(v30, "ipsecobjectref", (int64_t)v18);
  xpc_dictionary_set_int64(v30, "ipsecopcode", 1);
  xpc_dictionary_set_value(v30, "ipsecikedict", v31);
  if (a3)
    xpc_dictionary_set_value(v30, "ipsecchilddict", a3);
  v33 = xpc_connection_send_message_with_reply_sync(v23, v30);
  if (!v33)
  {
    v32 = 0;
    goto LABEL_61;
  }
  v34 = v23;
  v35 = v33;
  v36 = MEMORY[0x1A1ACFDA4]();
  if (v36 != MEMORY[0x1E0C812F8])
  {
    if (v36 == MEMORY[0x1E0C81310])
    {
      handle_connection_error(v34, (uint64_t)v35);
    }
    else
    {
      ne_log_obj();
      v37 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_19BD16000, v37, OS_LOG_TYPE_ERROR, "NEIPSec: connection returns unknown type\n", buf, 2u);
      }

    }
    v32 = 0;
    goto LABEL_60;
  }
  xdict = v35;
  int64 = xpc_dictionary_get_int64(xdict, "ipsecopcode");
  v51 = xpc_dictionary_get_int64(xdict, "ipsecobjectref");
  v52 = int64 - 4096;
  v44 = int64 <= 4096;
  ne_log_obj();
  v45 = objc_claimAutoreleasedReturnValue();
  v46 = os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG);
  if (v44)
  {
    if (v46)
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v52;
      _os_log_debug_impl(&dword_19BD16000, v45, OS_LOG_TYPE_DEBUG, "process_response invalid reply, opcode = 0x%llx\n", buf, 0xCu);
    }
  }
  else
  {
    if (v46)
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v52;
      _os_log_debug_impl(&dword_19BD16000, v45, OS_LOG_TYPE_DEBUG, "process_response: op 0x%llx\n", buf, 0xCu);
    }

    if (v52 == 1)
    {
      v47 = xpc_dictionary_get_BOOL(xdict, "reply");
      v32 = v18 == (CFStringRef)v51 && v47;
      ne_log_obj();
      v48 = objc_claimAutoreleasedReturnValue();
      v45 = v48;
      if (v32)
      {
        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = v51;
          _os_log_debug_impl(&dword_19BD16000, v45, OS_LOG_TYPE_DEBUG, "get_response_BOOLean response: ref %p", buf, 0xCu);
        }
      }
      else if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = v18;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v51;
        _os_log_error_impl(&dword_19BD16000, v45, OS_LOG_TYPE_ERROR, "get_response_BOOLean response ERROR: requestref %p, returned ref %p", buf, 0x16u);
      }
      goto LABEL_59;
    }
    ne_log_obj();
    v45 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v52;
      _os_log_error_impl(&dword_19BD16000, v45, OS_LOG_TYPE_ERROR, "process_response unknown reply, opcode = 0x%llx\n", buf, 0xCu);
    }
  }
  v32 = 0;
LABEL_59:

LABEL_60:
LABEL_61:
  ne_log_obj();
  v49 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v32;
    _os_log_debug_impl(&dword_19BD16000, v49, OS_LOG_TYPE_DEBUG, "send_xpc_ike_create result %d\n", buf, 8u);
  }

  if (!v32)
  {
LABEL_64:
    if (v18)
    {
      CFRelease(v18);
      v18 = 0;
    }
  }
LABEL_36:

  return v18;
}

void sub_19BE2AD20(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__13555(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__13556(uint64_t a1)
{

}

void __create_xpc_connection_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint8_t v5[16];

  v3 = a2;
  if (MEMORY[0x1A1ACFDA4]() == MEMORY[0x1E0C81310])
  {
    handle_connection_error(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), (uint64_t)v3);
  }
  else
  {
    ne_log_obj();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v5 = 0;
      _os_log_error_impl(&dword_19BD16000, v4, OS_LOG_TYPE_ERROR, "NEIPSec: connection returns unknown type\n", v5, 2u);
    }

  }
}

void handle_connection_error(void *a1, uint64_t a2)
{
  _xpc_connection_s *v3;
  uint64_t v4;
  NSObject *v5;
  _BOOL4 v6;
  uint8_t v7[16];
  uint8_t buf[16];

  v3 = a1;
  v4 = MEMORY[0x1E0C81258];
  ne_log_obj();
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
  if (a2 == v4)
  {
    if (v6)
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_19BD16000, v5, OS_LOG_TYPE_ERROR, "NEIPSec: connection interrupted\n", buf, 2u);
    }

    xpc_connection_cancel(v3);
  }
  else
  {
    if (v6)
    {
      *(_WORD *)v7 = 0;
      _os_log_error_impl(&dword_19BD16000, v5, OS_LOG_TYPE_ERROR, "NEIPSec: connection error\n", v7, 2u);
    }

  }
}

NEIKEv2IKESAConfiguration *NEIPSecIKEValidateIKEDictionary(void *a1)
{
  NEIKEv2IKESAConfiguration *v2;
  uint64_t v3;
  void **p_cache;
  const __CFNumber *v5;
  NSObject *v6;
  void *v7;
  __CFString *v8;
  void *v9;
  void *v10;
  void *v11;
  __CFString *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  __CFString *v19;
  void *v20;
  void *v21;
  const __CFArray *v22;
  const __CFArray *v23;
  NSObject *v24;
  NSObject *v25;
  CFIndex v26;
  void *ValueAtIndex;
  void *v28;
  uint64_t v29;
  NEIKEv2IKESAProposal *v30;
  NEIKEv2IKESAProposal *v31;
  NSObject *v32;
  void *v33;
  void *v34;
  const __CFDictionary *v35;
  void *v36;
  NEIKEv2EncryptionProtocol *v37;
  NEIKEv2EncryptionProtocol *v38;
  NEIKEv2EncryptionProtocol *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t i;
  __CFString *v44;
  NEIKEv2EncryptionProtocol *v45;
  NEIKEv2EncryptionProtocol *v46;
  void *v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t j;
  __CFString *v53;
  NEIKEv2IntegrityProtocol *v54;
  __CFString *v55;
  NEIKEv2PRFProtocol *v56;
  __CFString *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t k;
  __CFString *v62;
  NEIKEv2PRFProtocol *v63;
  NEIKEv2PRFProtocol *v64;
  id v65;
  void *v66;
  NEIKEv2KEMProtocol *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t m;
  void *v72;
  NEIKEv2KEMProtocol *v73;
  __CFString *v74;
  NEIKEv2EAPProtocol *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __CFString *v80;
  NEIKEv2EAPProtocol *v81;
  NEIKEv2EAPProtocol *v82;
  void *v83;
  NSObject *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t n;
  NSObject *v89;
  NEIKEv2IKESAConfiguration *v90;
  const char *v92;
  NSObject *v93;
  uint32_t v94;
  const char *v95;
  void *v96;
  const char *v97;
  NSObject *v98;
  uint32_t v99;
  const char *v100;
  NSObject *v101;
  uint32_t v102;
  NSObject *v103;
  NSObject *p_super;
  NSObject *v105;
  NSObject *v106;
  const char *v107;
  NSObject *v108;
  const char *v109;
  NEIKEv2EncryptionProtocol *v110;
  void *v111;
  __CFString *v112;
  __CFString *v113;
  __CFString *v114;
  const __CFArray *v115;
  NSObject *v116;
  CFIndex Count;
  CFIndex v118;
  const __CFDictionary *v119;
  NEIKEv2IKESAProposal *v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  int valuePtr;
  _BYTE v146[128];
  _BYTE v147[128];
  _BYTE v148[128];
  _BYTE v149[128];
  _BYTE v150[128];
  uint8_t v151[128];
  uint8_t buf[4];
  const char *v153;
  __int16 v154;
  int v155;
  __int16 v156;
  const __CFString *v157;
  __int16 v158;
  uint64_t v159;
  uint64_t v160;

  v160 = *MEMORY[0x1E0C80C00];
  if (NEInitCFTypes_onceToken != -1)
    dispatch_once(&NEInitCFTypes_onceToken, &__block_literal_global_22195);
  v2 = objc_alloc_init(NEIKEv2IKESAConfiguration);
  if (!a1 || (v3 = CFDICTIONARY_TYPE, CFGetTypeID(a1) != v3))
  {
    ne_log_obj();
    v89 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v153 = "NEIPSecIKEValidateIKEDictionary";
      v154 = 1024;
      v155 = 1112;
      v92 = "%s:%d: IKE configuration is not a dictionary";
      v93 = v89;
      v94 = 18;
      goto LABEL_169;
    }
LABEL_161:

    v90 = 0;
    goto LABEL_162;
  }
  p_cache = NEConfigurationManager.cache;
  if (!NEGetValueWithType((const __CFDictionary *)a1, CFSTR("IKEVersion"), CFNUMBER_TYPE))
  {
    ne_log_obj();
    v89 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v153 = "NEIPSecIKEValidateIKEDictionary";
      v154 = 1024;
      v155 = 1116;
      v156 = 2112;
      v157 = CFSTR("IKEVersion");
      v158 = 2048;
      v159 = CFNUMBER_TYPE;
      v92 = "%s:%d: value for key %@ is missing or type != %lu";
      v93 = v89;
      v94 = 38;
LABEL_169:
      _os_log_error_impl(&dword_19BD16000, v93, OS_LOG_TYPE_ERROR, v92, buf, v94);
      goto LABEL_161;
    }
    goto LABEL_161;
  }
  valuePtr = 0;
  v5 = (const __CFNumber *)NEGetValueWithType((const __CFDictionary *)a1, CFSTR("IKEVersion"), CFNUMBER_TYPE);
  CFNumberGetValue(v5, kCFNumberIntType, &valuePtr);
  if (valuePtr != 2)
  {
    ne_log_obj();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v153 = "NEIPSecIKEValidateIKEDictionary";
      v154 = 1024;
      v155 = 1121;
      _os_log_error_impl(&dword_19BD16000, v6, OS_LOG_TYPE_ERROR, "%s:%d: IKE version is not 2", buf, 0x12u);
    }
    v90 = 0;
    goto LABEL_231;
  }
  v6 = a1;
  if (CFDictionaryContainsKey((CFDictionaryRef)v6, CFSTR("OutgoingInterface"))
    && !NEGetValueWithType((const __CFDictionary *)v6, CFSTR("OutgoingInterface"), CFSTRING_TYPE))
  {
    ne_log_obj();
    v25 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      goto LABEL_229;
    *(_DWORD *)buf = 136315906;
    v153 = "NEIPSecIKEValidateIKEDictionary";
    v154 = 1024;
    v155 = 1127;
    v156 = 2112;
    v157 = CFSTR("OutgoingInterface");
    v158 = 2048;
    v159 = CFSTRING_TYPE;
    v95 = "%s:%d: type of value for key %@ != %lu";
LABEL_193:
    v98 = v25;
    v99 = 38;
LABEL_194:
    _os_log_error_impl(&dword_19BD16000, v98, OS_LOG_TYPE_ERROR, v95, buf, v99);
    goto LABEL_229;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v6, CFSTR("OutgoingInterface")))
  {
    -[NSObject objectForKeyedSubscript:](v6, "objectForKeyedSubscript:", CFSTR("OutgoingInterface"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[NEIKEv2IKESAConfiguration setOutgoingInterfaceName:](v2, "setOutgoingInterfaceName:", v7);

  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v6, CFSTR("LocalAddress"))
    && !NEGetValueWithType((const __CFDictionary *)v6, CFSTR("LocalAddress"), CFSTRING_TYPE))
  {
    ne_log_obj();
    v25 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      goto LABEL_229;
    *(_DWORD *)buf = 136315906;
    v153 = "NEIPSecIKEValidateIKEDictionary";
    v154 = 1024;
    v155 = 1132;
    v156 = 2112;
    v157 = CFSTR("LocalAddress");
    v158 = 2048;
    v159 = CFSTRING_TYPE;
    v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_193;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v6, CFSTR("LocalPort"))
    && !NEGetValueWithType((const __CFDictionary *)v6, CFSTR("LocalPort"), CFNUMBER_TYPE))
  {
    ne_log_obj();
    v25 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      goto LABEL_229;
    *(_DWORD *)buf = 136315906;
    v153 = "NEIPSecIKEValidateIKEDictionary";
    v154 = 1024;
    v155 = 1133;
    v156 = 2112;
    v157 = CFSTR("LocalPort");
    v158 = 2048;
    v159 = CFNUMBER_TYPE;
    v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_193;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v6, CFSTR("LocalAddress")))
  {
    -[NSObject objectForKeyedSubscript:](v6, "objectForKeyedSubscript:", CFSTR("LocalAddress"));
    v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
    -[NSObject objectForKeyedSubscript:](v6, "objectForKeyedSubscript:", CFSTR("LocalPort"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = NECreateAddressStructFromString(v8, (uint64_t)v9, 0);

    if (!v10)
    {
      ne_log_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        goto LABEL_229;
      -[NSObject objectForKeyedSubscript:](v6, "objectForKeyedSubscript:", CFSTR("LocalAddress"));
      v35 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
      -[NSObject objectForKeyedSubscript:](v6, "objectForKeyedSubscript:", CFSTR("LocalPort"));
      v96 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136315906;
      v153 = "NEIPSecIKEValidateIKEDictionary";
      v154 = 1024;
      v155 = 1140;
      v156 = 2112;
      v157 = (const __CFString *)v35;
      v158 = 2112;
      v159 = (uint64_t)v96;
      v97 = "%s:%d: Failed to parse local address %@:%@";
      goto LABEL_182;
    }
    objc_msgSend(MEMORY[0x1E0CCEC58], "endpointWithAddress:", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[NEIKEv2IKESAConfiguration setLocalEndpoint:](v2, "setLocalEndpoint:", v11);

    free(v10);
  }
  if (!NEGetValueWithType((const __CFDictionary *)v6, CFSTR("RemoteAddress"), CFSTRING_TYPE))
  {
    ne_log_obj();
    v25 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      goto LABEL_229;
    *(_DWORD *)buf = 136315906;
    v153 = "NEIPSecIKEValidateIKEDictionary";
    v154 = 1024;
    v155 = 1147;
    v156 = 2112;
    v157 = CFSTR("RemoteAddress");
    v158 = 2048;
    v159 = CFSTRING_TYPE;
    v95 = "%s:%d: value for key %@ is missing or type != %lu";
    goto LABEL_193;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v6, CFSTR("RemotePort"))
    && !NEGetValueWithType((const __CFDictionary *)v6, CFSTR("RemotePort"), CFNUMBER_TYPE))
  {
    ne_log_obj();
    v25 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      goto LABEL_229;
    *(_DWORD *)buf = 136315906;
    v153 = "NEIPSecIKEValidateIKEDictionary";
    v154 = 1024;
    v155 = 1148;
    v156 = 2112;
    v157 = CFSTR("RemotePort");
    v158 = 2048;
    v159 = CFNUMBER_TYPE;
    v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_193;
  }
  -[NSObject objectForKeyedSubscript:](v6, "objectForKeyedSubscript:", CFSTR("RemoteAddress"));
  v12 = (__CFString *)objc_claimAutoreleasedReturnValue();
  -[NSObject objectForKeyedSubscript:](v6, "objectForKeyedSubscript:", CFSTR("RemotePort"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = NECreateAddressStructFromString(v12, (uint64_t)v13, 0);

  if (!v14)
  {
    ne_log_obj();
    v25 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      goto LABEL_229;
    -[NSObject objectForKeyedSubscript:](v6, "objectForKeyedSubscript:", CFSTR("RemoteAddress"));
    v35 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
    -[NSObject objectForKeyedSubscript:](v6, "objectForKeyedSubscript:", CFSTR("RemotePort"));
    v96 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136315906;
    v153 = "NEIPSecIKEValidateIKEDictionary";
    v154 = 1024;
    v155 = 1154;
    v156 = 2112;
    v157 = (const __CFString *)v35;
    v158 = 2112;
    v159 = (uint64_t)v96;
    v97 = "%s:%d: Failed to parse remote address %@:%@";
LABEL_182:
    _os_log_error_impl(&dword_19BD16000, v25, OS_LOG_TYPE_ERROR, v97, buf, 0x26u);

    goto LABEL_228;
  }
  objc_msgSend(MEMORY[0x1E0CCEC58], "endpointWithAddress:", v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[NEIKEv2IKESAConfiguration setRemoteEndpoint:](v2, "setRemoteEndpoint:", v15);

  free(v14);
  if (CFDictionaryContainsKey((CFDictionaryRef)v6, CFSTR("ServerMode"))
    && !NEGetValueWithType((const __CFDictionary *)v6, CFSTR("ServerMode"), CFBOOLEAN_TYPE))
  {
    ne_log_obj();
    v25 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      goto LABEL_229;
    *(_DWORD *)buf = 136315906;
    v153 = "NEIPSecIKEValidateIKEDictionary";
    v154 = 1024;
    v155 = 1160;
    v156 = 2112;
    v157 = CFSTR("ServerMode");
    v158 = 2048;
    v159 = CFBOOLEAN_TYPE;
    v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_193;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v6, CFSTR("ServerMode")))
  {
    -[NSObject objectForKeyedSubscript:](v6, "objectForKeyedSubscript:", CFSTR("ServerMode"));
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    -[NEIKEv2IKESAConfiguration setServerMode:](v2, "setServerMode:", objc_msgSend(v16, "BOOLValue"));

  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v6, CFSTR("NonceSize"))
    && !NEGetValueWithType((const __CFDictionary *)v6, CFSTR("NonceSize"), CFNUMBER_TYPE))
  {
    ne_log_obj();
    v25 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      goto LABEL_229;
    *(_DWORD *)buf = 136315906;
    v153 = "NEIPSecIKEValidateIKEDictionary";
    v154 = 1024;
    v155 = 1165;
    v156 = 2112;
    v157 = CFSTR("NonceSize");
    v158 = 2048;
    v159 = CFNUMBER_TYPE;
    v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_193;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v6, CFSTR("NonceSize")))
  {
    -[NSObject objectForKeyedSubscript:](v6, "objectForKeyedSubscript:", CFSTR("NonceSize"));
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    -[NEIKEv2IKESAConfiguration setNonceSize:](v2, "setNonceSize:", objc_msgSend(v17, "unsignedIntValue"));

  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v6, CFSTR("RedirectSupported"))
    && !NEGetValueWithType((const __CFDictionary *)v6, CFSTR("RedirectSupported"), CFBOOLEAN_TYPE))
  {
    ne_log_obj();
    v25 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      goto LABEL_229;
    *(_DWORD *)buf = 136315906;
    v153 = "NEIPSecIKEValidateIKEDictionary";
    v154 = 1024;
    v155 = 1170;
    v156 = 2112;
    v157 = CFSTR("RedirectSupported");
    v158 = 2048;
    v159 = CFBOOLEAN_TYPE;
    v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_193;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v6, CFSTR("RedirectSupported")))
  {
    -[NSObject objectForKeyedSubscript:](v6, "objectForKeyedSubscript:", CFSTR("RedirectSupported"));
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    -[NEIKEv2IKESAConfiguration setAllowRedirect:](v2, "setAllowRedirect:", objc_msgSend(v18, "BOOLValue"));

  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v6, CFSTR("RedirectedFromServer"))
    && !NEGetValueWithType((const __CFDictionary *)v6, CFSTR("RedirectedFromServer"), CFSTRING_TYPE))
  {
    ne_log_obj();
    v25 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      goto LABEL_229;
    *(_DWORD *)buf = 136315906;
    v153 = "NEIPSecIKEValidateIKEDictionary";
    v154 = 1024;
    v155 = 1175;
    v156 = 2112;
    v157 = CFSTR("RedirectedFromServer");
    v158 = 2048;
    v159 = CFSTRING_TYPE;
    v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_193;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v6, CFSTR("RedirectedFromServer")))
  {
    -[NSObject objectForKeyedSubscript:](v6, "objectForKeyedSubscript:", CFSTR("RedirectedFromServer"));
    v19 = (__CFString *)objc_claimAutoreleasedReturnValue();
    v20 = NECreateAddressStructFromString(v19, 0, 0);

    if (!v20)
    {
      ne_log_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        -[NSObject objectForKeyedSubscript:](v6, "objectForKeyedSubscript:", CFSTR("RedirectedFromServer"));
        v35 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136315650;
        v153 = "NEIPSecIKEValidateIKEDictionary";
        v154 = 1024;
        v155 = 1181;
        v156 = 2112;
        v157 = (const __CFString *)v35;
        v100 = "%s:%d: Failed to parse redirect address %@";
        v101 = v25;
        v102 = 28;
        goto LABEL_199;
      }
      goto LABEL_229;
    }
    objc_msgSend(MEMORY[0x1E0CCEC58], "endpointWithAddress:", v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    -[NEIKEv2IKESAConfiguration setRedirectedFromServer:](v2, "setRedirectedFromServer:", v21);

    free(v20);
  }
  v22 = (const __CFArray *)NEGetValueWithType((const __CFDictionary *)v6, CFSTR("Proposals"), CFARRAY_TYPE);
  if (!v22)
  {
    ne_log_obj();
    v25 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      goto LABEL_229;
    *(_DWORD *)buf = 136315394;
    v153 = "NEIPSecIKEValidateIKEDictionary";
    v154 = 1024;
    v155 = 1190;
    v95 = "%s:%d: IKE configuration does not contain proposals array";
LABEL_202:
    v98 = v25;
    v99 = 18;
    goto LABEL_194;
  }
  v23 = v22;
  Count = CFArrayGetCount(v22);
  if (!Count)
  {
    ne_log_obj();
    v25 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      goto LABEL_229;
    *(_DWORD *)buf = 136315394;
    v153 = "NEIPSecIKEValidateIKEDictionary";
    v154 = 1024;
    v155 = 1195;
    v95 = "%s:%d: IKE configuration proposals array is empty";
    goto LABEL_202;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v6, CFSTR("EAPProperties"))
    && !NEGetValueWithType((const __CFDictionary *)v6, CFSTR("EAPProperties"), CFDICTIONARY_TYPE))
  {
    ne_log_obj();
    v25 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      goto LABEL_229;
    *(_DWORD *)buf = 136315906;
    v153 = "NEIPSecIKEValidateIKEDictionary";
    v154 = 1024;
    v155 = 1199;
    v156 = 2112;
    v157 = CFSTR("EAPProperties");
    v158 = 2048;
    v159 = CFDICTIONARY_TYPE;
    v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_193;
  }
  v24 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v25 = v24;
  if (Count < 1)
  {
LABEL_203:
    -[NEIKEv2IKESAConfiguration setProposals:](v2, "setProposals:", v25);
    v90 = v2;
    goto LABEL_230;
  }
  v26 = 0;
  v115 = v23;
  v116 = v24;
  while (1)
  {
    v118 = v26;
    ValueAtIndex = (void *)CFArrayGetValueAtIndex(v23, v26);
    if (!ValueAtIndex)
      break;
    v28 = ValueAtIndex;
    v29 = CFDICTIONARY_TYPE;
    if (CFGetTypeID(ValueAtIndex) != v29)
      break;
    v119 = v28;
    v30 = objc_alloc_init(NEIKEv2IKESAProposal);
    v31 = v30;
    if (v30)
      v30->_proposalNumber = v118 + 1;
    v120 = v30;
    if (!CFDictionaryContainsKey((CFDictionaryRef)v6, CFSTR("AuthenticationMethod")))
    {
      if (!NEGetValueWithType(v119, CFSTR("AuthenticationMethod"), CFSTRING_TYPE))
      {
        ne_log_obj();
        v32 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          v153 = "NEIPSecIKEValidateIKEDictionary";
          v154 = 1024;
          v155 = 1216;
          v156 = 2112;
          v157 = CFSTR("AuthenticationMethod");
          v158 = 2048;
          v159 = CFSTRING_TYPE;
          _os_log_error_impl(&dword_19BD16000, v32, OS_LOG_TYPE_ERROR, "%s:%d: value for key %@ is missing or type != %lu", buf, 0x26u);
        }
        goto LABEL_226;
      }
      -[__CFDictionary objectForKeyedSubscript:](v119, "objectForKeyedSubscript:", CFSTR("AuthenticationMethod"));
      v32 = objc_claimAutoreleasedReturnValue();
      v33 = (void *)NEIPsecIKEGetAuthProcotol(v32);
      if (!v33)
      {
        ne_log_obj();
        v48 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          v153 = "NEIPSecIKEValidateIKEDictionary";
          v154 = 1024;
          v155 = 1220;
          v156 = 2112;
          v157 = (const __CFString *)v32;
          _os_log_error_impl(&dword_19BD16000, v48, OS_LOG_TYPE_ERROR, "%s%d: \"%@\" is not a recognized authentication method", buf, 0x1Cu);
        }
LABEL_218:

        goto LABEL_226;
      }
      v34 = v33;
      -[NEConfigurationManager setAppGroupMap:]((uint64_t)v31, v33);

      p_cache = NEConfigurationManager.cache;
    }
    v35 = v119;
    if (!NEGetValueWithType(v119, CFSTR("Lifetime"), (uint64_t)p_cache[100]))
    {
      ne_log_obj();
      v32 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        v153 = "NEIPSecIKEValidateIKEDictionary";
        v154 = 1024;
        v155 = 1226;
        v156 = 2112;
        v157 = CFSTR("Lifetime");
        v158 = 2048;
        v159 = CFNUMBER_TYPE;
        _os_log_error_impl(&dword_19BD16000, v32, OS_LOG_TYPE_ERROR, "%s:%d: value for key %@ is missing or type != %lu", buf, 0x26u);
      }
      goto LABEL_227;
    }
    -[__CFDictionary objectForKeyedSubscript:](v119, "objectForKeyedSubscript:", CFSTR("Lifetime"));
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    -[NEIKEv2IKESAProposal setLifetimeSeconds:](v31, "setLifetimeSeconds:", objc_msgSend(v36, "unsignedLongValue"));

    if (CFDictionaryContainsKey(v119, CFSTR("EncryptionAlgorithm")))
    {
      v32 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      -[__CFDictionary objectForKeyedSubscript:](v119, "objectForKeyedSubscript:", CFSTR("EncryptionAlgorithm"));
      v37 = (NEIKEv2EncryptionProtocol *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v38 = NEIPsecIKEGetEncryptionProtocol(v37, 0);
        if (!v38)
        {
          v39 = v37;
          ne_log_obj();
          p_super = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(p_super, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            v153 = "NEIPSecIKEValidateIKEDictionary";
            v154 = 1024;
            v155 = 1235;
            v156 = 2112;
            v157 = (const __CFString *)v39;
            _os_log_error_impl(&dword_19BD16000, p_super, OS_LOG_TYPE_ERROR, "%s%d: \"%@\" is not a recognized encryption method", buf, 0x1Cu);
          }
LABEL_213:

LABEL_226:
          v25 = v116;
          v35 = v119;
          v31 = v120;
LABEL_227:

          goto LABEL_228;
        }
        v39 = v38;
        -[NSObject addObject:](v32, "addObject:", v38);
LABEL_58:

        v31 = v120;
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v143 = 0u;
          v144 = 0u;
          v141 = 0u;
          v142 = 0u;
          v39 = v37;
          v40 = -[NEIKEv2EncryptionProtocol countByEnumeratingWithState:objects:count:](v39, "countByEnumeratingWithState:objects:count:", &v141, v151, 16);
          if (v40)
          {
            v41 = v40;
            v110 = v37;
            v42 = *(_QWORD *)v142;
            while (2)
            {
              for (i = 0; i != v41; ++i)
              {
                if (*(_QWORD *)v142 != v42)
                  objc_enumerationMutation(v39);
                v44 = *(__CFString **)(*((_QWORD *)&v141 + 1) + 8 * i);
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                {
                  v45 = NEIPsecIKEGetEncryptionProtocol(v44, 0);
                  if (!v45)
                  {
                    ne_log_obj();
                    v103 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 136315650;
                      v153 = "NEIPSecIKEValidateIKEDictionary";
                      v154 = 1024;
                      v155 = 1245;
                      v156 = 2112;
                      v157 = v44;
                      _os_log_error_impl(&dword_19BD16000, v103, OS_LOG_TYPE_ERROR, "%s%d: \"%@\" is not a recognized encryption method", buf, 0x1Cu);
                    }

                    p_super = &v39->super;
                    goto LABEL_213;
                  }
                  v46 = v45;
                  -[NSObject addObject:](v32, "addObject:", v45);

                }
              }
              v41 = -[NEIKEv2EncryptionProtocol countByEnumeratingWithState:objects:count:](v39, "countByEnumeratingWithState:objects:count:", &v141, v151, 16);
              if (v41)
                continue;
              break;
            }
            v25 = v116;
            v35 = v119;
            v37 = v110;
          }
          else
          {
            v25 = v116;
          }
          goto LABEL_58;
        }
      }
      -[NEIKEv2IKESAProposal setEncryptionProtocols:](v31, "setEncryptionProtocols:", v32);

      p_cache = (void **)(NEConfigurationManager + 16);
    }
    if (!CFDictionaryContainsKey(v35, CFSTR("IntegrityAlgorithm")))
      goto LABEL_90;
    v32 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    -[__CFDictionary objectForKeyedSubscript:](v35, "objectForKeyedSubscript:", CFSTR("IntegrityAlgorithm"));
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v48 = NEIPsecIKEGetIntegrityProtocol(v47);
      if (!v47)
      {
        ne_log_obj();
        v105 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          v153 = "NEIPSecIKEValidateIKEDictionary";
          v154 = 1024;
          v155 = 1261;
          v156 = 2112;
          v157 = 0;
          _os_log_error_impl(&dword_19BD16000, v105, OS_LOG_TYPE_ERROR, "%s%d: \"%@\" is not a recognized integrity method", buf, 0x1Cu);
        }
LABEL_217:

        goto LABEL_218;
      }
      -[NSObject addObject:](v32, "addObject:", v48);
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        goto LABEL_89;
      v139 = 0u;
      v140 = 0u;
      v137 = 0u;
      v138 = 0u;
      v48 = v47;
      v49 = -[NSObject countByEnumeratingWithState:objects:count:](v48, "countByEnumeratingWithState:objects:count:", &v137, v150, 16);
      if (v49)
      {
        v50 = v49;
        v111 = v47;
        v51 = *(_QWORD *)v138;
        while (2)
        {
          for (j = 0; j != v50; ++j)
          {
            if (*(_QWORD *)v138 != v51)
              objc_enumerationMutation(v48);
            v53 = *(__CFString **)(*((_QWORD *)&v137 + 1) + 8 * j);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              v54 = NEIPsecIKEGetIntegrityProtocol(v53);
              if (!v48)
              {
                ne_log_obj();
                v105 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315650;
                  v153 = "NEIPSecIKEValidateIKEDictionary";
                  v154 = 1024;
                  v155 = 1270;
                  v156 = 2112;
                  v157 = v53;
                  _os_log_error_impl(&dword_19BD16000, v105, OS_LOG_TYPE_ERROR, "%s%d: \"%@\" is not a recognized integrity method", buf, 0x1Cu);
                }
                v48 = &v54->super;
                goto LABEL_217;
              }
              -[NSObject addObject:](v32, "addObject:", v54);

            }
          }
          v50 = -[NSObject countByEnumeratingWithState:objects:count:](v48, "countByEnumeratingWithState:objects:count:", &v137, v150, 16);
          if (v50)
            continue;
          break;
        }
        v25 = v116;
        v35 = v119;
        v31 = v120;
        v47 = v111;
      }
      else
      {
        v25 = v116;
      }
    }

LABEL_89:
    -[NEIKEv2IKESAProposal setIntegrityProtocols:](v31, "setIntegrityProtocols:", v32);

    p_cache = (void **)(NEConfigurationManager + 16);
LABEL_90:
    if (!CFDictionaryContainsKey(v35, CFSTR("PRFAlgorithm")))
      goto LABEL_108;
    v32 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    -[__CFDictionary objectForKeyedSubscript:](v35, "objectForKeyedSubscript:", CFSTR("PRFAlgorithm"));
    v55 = (__CFString *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v56 = NEIPsecIKEGetPRFProtocol(v55);
      if (!v56)
      {
        v57 = v55;
        ne_log_obj();
        v108 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v108, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          v153 = "NEIPSecIKEValidateIKEDictionary";
          v154 = 1024;
          v155 = 1286;
          v156 = 2112;
          v157 = v57;
          v109 = "%s%d: \"%@\" is not a recognized PRF protocol";
          goto LABEL_244;
        }
LABEL_223:

        goto LABEL_226;
      }
      v57 = (__CFString *)v56;
      -[NSObject addObject:](v32, "addObject:", v56);
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        goto LABEL_107;
      v135 = 0u;
      v136 = 0u;
      v133 = 0u;
      v134 = 0u;
      v57 = v55;
      v58 = -[__CFString countByEnumeratingWithState:objects:count:](v57, "countByEnumeratingWithState:objects:count:", &v133, v149, 16);
      if (v58)
      {
        v59 = v58;
        v112 = v55;
        v60 = *(_QWORD *)v134;
        while (2)
        {
          for (k = 0; k != v59; ++k)
          {
            if (*(_QWORD *)v134 != v60)
              objc_enumerationMutation(v57);
            v62 = *(__CFString **)(*((_QWORD *)&v133 + 1) + 8 * k);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              v63 = NEIPsecIKEGetPRFProtocol(v62);
              if (!v63)
              {
                ne_log_obj();
                v106 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v106, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315650;
                  v153 = "NEIPSecIKEValidateIKEDictionary";
                  v154 = 1024;
                  v155 = 1295;
                  v156 = 2112;
                  v157 = v62;
                  v107 = "%s%d: \"%@\" is not a recognized PRF protocol";
                  goto LABEL_233;
                }
LABEL_222:

                v108 = v57;
                goto LABEL_223;
              }
              v64 = v63;
              -[NSObject addObject:](v32, "addObject:", v63);

            }
          }
          v59 = -[__CFString countByEnumeratingWithState:objects:count:](v57, "countByEnumeratingWithState:objects:count:", &v133, v149, 16);
          if (v59)
            continue;
          break;
        }
        v25 = v116;
        v35 = v119;
        v31 = v120;
        v55 = v112;
      }
      else
      {
        v25 = v116;
      }
    }

LABEL_107:
    -[NEIKEv2IKESAProposal setPrfProtocols:](v31, "setPrfProtocols:", v32);

    p_cache = (void **)(NEConfigurationManager + 16);
LABEL_108:
    if (!CFDictionaryContainsKey(v35, CFSTR("DHGroup")))
      goto LABEL_128;
    v65 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    -[__CFDictionary objectForKeyedSubscript:](v35, "objectForKeyedSubscript:", CFSTR("DHGroup"));
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v67 = -[NEIKEv2KEMProtocol initWithMethod:]([NEIKEv2KEMProtocol alloc], "initWithMethod:", objc_msgSend(v66, "unsignedIntValue"));
      objc_msgSend(v65, "addObject:", v67);
LABEL_126:

      goto LABEL_127;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v131 = 0u;
      v132 = 0u;
      v129 = 0u;
      v130 = 0u;
      v67 = v66;
      v68 = -[NEIKEv2KEMProtocol countByEnumeratingWithState:objects:count:](v67, "countByEnumeratingWithState:objects:count:", &v129, v148, 16);
      if (v68)
      {
        v69 = v68;
        v70 = *(_QWORD *)v130;
        do
        {
          for (m = 0; m != v69; ++m)
          {
            if (*(_QWORD *)v130 != v70)
              objc_enumerationMutation(v67);
            v72 = *(void **)(*((_QWORD *)&v129 + 1) + 8 * m);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              v73 = -[NEIKEv2KEMProtocol initWithMethod:]([NEIKEv2KEMProtocol alloc], "initWithMethod:", objc_msgSend(v72, "unsignedIntValue"));
              objc_msgSend(v65, "addObject:", v73);

            }
          }
          v69 = -[NEIKEv2KEMProtocol countByEnumeratingWithState:objects:count:](v67, "countByEnumeratingWithState:objects:count:", &v129, v148, 16);
        }
        while (v69);
        v25 = v116;
        v35 = v119;
      }
      else
      {
        v25 = v116;
      }
      goto LABEL_126;
    }
LABEL_127:
    -[NEIKEv2IKESAProposal setKemProtocols:](v120, "setKemProtocols:", v65);

    p_cache = (void **)(NEConfigurationManager + 16);
LABEL_128:
    if (CFDictionaryContainsKey(v35, CFSTR("EAPMethod")))
    {
      v32 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      -[__CFDictionary objectForKeyedSubscript:](v35, "objectForKeyedSubscript:", CFSTR("EAPMethod"));
      v74 = (__CFString *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v75 = NEIPsecIKEGetEAPProtocol(v74);
        if (!v75)
        {
          v57 = v74;
          ne_log_obj();
          v108 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v108, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            v153 = "NEIPSecIKEValidateIKEDictionary";
            v154 = 1024;
            v155 = 1328;
            v156 = 2112;
            v157 = v57;
            v109 = "%s%d: \"%@\" is not a recognized EAP method";
LABEL_244:
            _os_log_error_impl(&dword_19BD16000, v108, OS_LOG_TYPE_ERROR, v109, buf, 0x1Cu);
          }
          goto LABEL_223;
        }
        v57 = (__CFString *)v75;
        -[NSObject addObject:](v32, "addObject:", v75);
LABEL_132:

      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v127 = 0u;
          v128 = 0u;
          v125 = 0u;
          v126 = 0u;
          v57 = v74;
          v76 = -[__CFString countByEnumeratingWithState:objects:count:](v57, "countByEnumeratingWithState:objects:count:", &v125, v147, 16);
          if (v76)
          {
            v77 = v76;
            v113 = v74;
            v78 = *(_QWORD *)v126;
LABEL_136:
            v79 = 0;
            while (1)
            {
              if (*(_QWORD *)v126 != v78)
                objc_enumerationMutation(v57);
              v80 = *(__CFString **)(*((_QWORD *)&v125 + 1) + 8 * v79);
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                v81 = NEIPsecIKEGetEAPProtocol(v80);
                if (!v81)
                {
                  ne_log_obj();
                  v106 = objc_claimAutoreleasedReturnValue();
                  if (!os_log_type_enabled(v106, OS_LOG_TYPE_ERROR))
                    goto LABEL_222;
                  *(_DWORD *)buf = 136315650;
                  v153 = "NEIPSecIKEValidateIKEDictionary";
                  v154 = 1024;
                  v155 = 1337;
                  v156 = 2112;
                  v157 = v80;
                  v107 = "%s%d: \"%@\" is not a recognized EAP method";
LABEL_233:
                  _os_log_error_impl(&dword_19BD16000, v106, OS_LOG_TYPE_ERROR, v107, buf, 0x1Cu);
                  goto LABEL_222;
                }
                v82 = v81;
                -[NSObject addObject:](v32, "addObject:", v81);

              }
              if (v77 == ++v79)
              {
                v77 = -[__CFString countByEnumeratingWithState:objects:count:](v57, "countByEnumeratingWithState:objects:count:", &v125, v147, 16);
                if (v77)
                  goto LABEL_136;
                v25 = v116;
                v35 = v119;
                v74 = v113;
                goto LABEL_132;
              }
            }
          }
          v25 = v116;
          goto LABEL_132;
        }
      }
      if (CFDictionaryContainsKey((CFDictionaryRef)v6, CFSTR("EAPProperties")))
      {
        -[NSObject objectForKeyedSubscript:](v6, "objectForKeyedSubscript:", CFSTR("EAPProperties"));
        v83 = (void *)objc_claimAutoreleasedReturnValue();
        if (v83)
        {
          v114 = v74;
          v123 = 0u;
          v124 = 0u;
          v121 = 0u;
          v122 = 0u;
          v84 = v32;
          v85 = -[NSObject countByEnumeratingWithState:objects:count:](v84, "countByEnumeratingWithState:objects:count:", &v121, v146, 16);
          if (v85)
          {
            v86 = v85;
            v87 = *(_QWORD *)v122;
            do
            {
              for (n = 0; n != v86; ++n)
              {
                if (*(_QWORD *)v122 != v87)
                  objc_enumerationMutation(v84);
                objc_msgSend(*(id *)(*((_QWORD *)&v121 + 1) + 8 * n), "setProperties:", v83);
              }
              v86 = -[NSObject countByEnumeratingWithState:objects:count:](v84, "countByEnumeratingWithState:objects:count:", &v121, v146, 16);
            }
            while (v86);
          }

          v25 = v116;
          v35 = v119;
          v74 = v114;
        }

      }
      -[NEIKEv2IKESAProposal setEapProtocols:](v120, "setEapProtocols:", v32);

      p_cache = (void **)(NEConfigurationManager + 16);
    }
    -[NSObject addObject:](v25, "addObject:", v120);

    v26 = v118 + 1;
    v23 = v115;
    if (v118 + 1 == Count)
      goto LABEL_203;
  }
  ne_log_obj();
  v35 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  if (!os_log_type_enabled((os_log_t)v35, OS_LOG_TYPE_ERROR))
    goto LABEL_228;
  *(_DWORD *)buf = 136315394;
  v153 = "NEIPSecIKEValidateIKEDictionary";
  v154 = 1024;
  v155 = 1205;
  v100 = "%s:%d: IKE configuration proposals array is invalid";
  v101 = v35;
  v102 = 18;
LABEL_199:
  _os_log_error_impl(&dword_19BD16000, v101, OS_LOG_TYPE_ERROR, v100, buf, v102);
LABEL_228:

LABEL_229:
  v90 = 0;
LABEL_230:

LABEL_231:
LABEL_162:

  return v90;
}

NEIKEv2ChildSAConfiguration *NEIPSecIKEValidateIKEChildDictionary(void *a1)
{
  NEIKEv2ChildSAConfiguration *v2;
  void **p_cache;
  uint64_t v4;
  const __CFDictionary *v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  NEIKEv2ChildSAConfiguration *v9;
  void *v10;
  const __CFArray *v11;
  const __CFArray *v12;
  CFIndex Count;
  uint64_t v14;
  NSObject *v15;
  CFIndex v16;
  const __CFString *v17;
  const __CFString *v18;
  void *ValueAtIndex;
  void *v20;
  uint64_t v21;
  const __CFDictionary *v22;
  NEIKEv2TrafficSelector *v23;
  NSObject *v24;
  __CFString *v25;
  void *v26;
  void *v27;
  __CFString *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  const __CFArray *v34;
  const __CFArray *v35;
  CFIndex v36;
  uint64_t v37;
  CFIndex v38;
  void *v39;
  void *v40;
  void *v41;
  void **v42;
  NSObject *v43;
  __CFString *v44;
  void *v45;
  void *v46;
  __CFString *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  const __CFArray *v53;
  const __CFArray *v54;
  CFIndex v55;
  uint64_t v56;
  CFIndex v57;
  const __CFString *v58;
  const __CFString *v59;
  void *v60;
  void *v61;
  void *v62;
  const __CFDictionary *v63;
  NEIKEv2ChildSAProposal *v64;
  void *v65;
  uint64_t v66;
  void *v67;
  NSObject *v68;
  __CFString *v69;
  NEIKEv2EncryptionProtocol *v70;
  NEIKEv2EncryptionProtocol *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t i;
  __CFString *v76;
  NEIKEv2EncryptionProtocol *v77;
  NEIKEv2EncryptionProtocol *v78;
  void *v79;
  NEIKEv2IntegrityProtocol *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t j;
  __CFString *v85;
  NEIKEv2IntegrityProtocol *v86;
  id v87;
  void *v88;
  void *v89;
  unsigned int v90;
  NEIKEv2KEMProtocol *v91;
  uint64_t v92;
  NEIKEv2KEMProtocol *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t k;
  void *v98;
  NEIKEv2KEMProtocol *v99;
  const char *v100;
  NSObject *v101;
  uint32_t v102;
  NSObject *v103;
  const char *v104;
  NSObject *v105;
  const char *v106;
  NSObject *v107;
  NSObject *v109;
  NSObject *p_super;
  NSObject *v111;
  __CFString *v112;
  const __CFDictionary *v113;
  const __CFDictionary *v114;
  const __CFDictionary *v115;
  uint64_t v116;
  const __CFArray *v117;
  NSObject *v118;
  void *v119;
  uint64_t v120;
  CFIndex v121;
  NEIKEv2ChildSAConfiguration *v122;
  NSObject *v123;
  NSObject *v124;
  NSObject *v125;
  CFDictionaryRef theDict;
  CFDictionaryRef theDicta;
  const __CFArray *v128;
  uint64_t v129;
  NEIKEv2ChildSAProposal *v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  _BYTE v143[128];
  _BYTE v144[128];
  uint8_t v145[128];
  uint8_t buf[4];
  const char *v147;
  __int16 v148;
  int v149;
  __int16 v150;
  const __CFString *v151;
  __int16 v152;
  uint64_t v153;
  uint64_t v154;

  v154 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    ne_log_obj();
    v2 = (NEIKEv2ChildSAConfiguration *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(&v2->super, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      v147 = "NEIPSecIKEValidateIKEChildDictionary";
      _os_log_fault_impl(&dword_19BD16000, &v2->super, OS_LOG_TYPE_FAULT, "%s called with null ikeChildDict", buf, 0xCu);
    }
    goto LABEL_11;
  }
  if (NEInitCFTypes_onceToken != -1)
    dispatch_once(&NEInitCFTypes_onceToken, &__block_literal_global_22195);
  v2 = objc_alloc_init(NEIKEv2ChildSAConfiguration);
  p_cache = NEConfigurationManager.cache;
  v4 = CFDICTIONARY_TYPE;
  if (CFGetTypeID(a1) != v4)
  {
    ne_log_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v147 = "NEIPSecIKEValidateIKEChildDictionary";
      v148 = 1024;
      v149 = 2140;
      _os_log_error_impl(&dword_19BD16000, v8, OS_LOG_TYPE_ERROR, "%s:%d: IKE Child configuration is not a dictionary", buf, 0x12u);
    }

LABEL_11:
    v9 = 0;
    goto LABEL_201;
  }
  v5 = a1;
  if (!NEGetValueWithType(v5, CFSTR("Mode"), CFSTRING_TYPE))
  {
    ne_log_obj();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v147 = "NEIPSecIKEValidateIKEChildDictionary";
      v148 = 1024;
      v149 = 2146;
      v150 = 2112;
      v151 = CFSTR("Mode");
      v152 = 2048;
      v153 = CFSTRING_TYPE;
      _os_log_error_impl(&dword_19BD16000, v6, OS_LOG_TYPE_ERROR, "%s:%d: value for key %@ is missing or type != %lu", buf, 0x26u);
    }
    v9 = 0;
    goto LABEL_200;
  }
  -[__CFDictionary objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("Mode"));
  v6 = objc_claimAutoreleasedReturnValue();
  if ((-[NSObject isEqualToString:](v6, "isEqualToString:", CFSTR("Transport")) & 1) != 0)
  {
    v7 = 1;
LABEL_17:
    -[NEIKEv2ChildSAConfiguration setMode:](v2, "setMode:", v7);
    goto LABEL_18;
  }
  if (-[NSObject isEqualToString:](v6, "isEqualToString:", CFSTR("Tunnel")))
  {
    v7 = 2;
    goto LABEL_17;
  }
LABEL_18:
  if (CFDictionaryContainsKey(v5, CFSTR("ReplayWindowSize"))
    && !NEGetValueWithType(v5, CFSTR("ReplayWindowSize"), CFNUMBER_TYPE))
  {
    ne_log_obj();
    v15 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      goto LABEL_198;
    *(_DWORD *)buf = 136315906;
    v147 = "NEIPSecIKEValidateIKEChildDictionary";
    v148 = 1024;
    v149 = 2154;
    v150 = 2112;
    v151 = CFSTR("ReplayWindowSize");
    v152 = 2048;
    v153 = CFNUMBER_TYPE;
    v100 = "%s:%d: type of value for key %@ != %lu";
LABEL_138:
    v101 = v15;
    v102 = 38;
LABEL_148:
    _os_log_error_impl(&dword_19BD16000, v101, OS_LOG_TYPE_ERROR, v100, buf, v102);
    goto LABEL_198;
  }
  if (CFDictionaryContainsKey(v5, CFSTR("ReplayWindowSize")))
  {
    -[__CFDictionary objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("ReplayWindowSize"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[NEIKEv2ChildSAConfiguration setReplayWindowSize:](v2, "setReplayWindowSize:", objc_msgSend(v10, "unsignedIntValue"));

  }
  if (CFDictionaryContainsKey(v5, CFSTR("TrafficSelectorsLocal"))
    && !NEGetValueWithType(v5, CFSTR("TrafficSelectorsLocal"), CFARRAY_TYPE))
  {
    ne_log_obj();
    v15 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      goto LABEL_198;
    *(_DWORD *)buf = 136315906;
    v147 = "NEIPSecIKEValidateIKEChildDictionary";
    v148 = 1024;
    v149 = 2159;
    v150 = 2112;
    v151 = CFSTR("TrafficSelectorsLocal");
    v152 = 2048;
    v153 = CFARRAY_TYPE;
    v100 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_138;
  }
  if (CFDictionaryContainsKey(v5, CFSTR("TrafficSelectorsRemote"))
    && !NEGetValueWithType(v5, CFSTR("TrafficSelectorsRemote"), CFARRAY_TYPE))
  {
    ne_log_obj();
    v15 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      goto LABEL_198;
    *(_DWORD *)buf = 136315906;
    v147 = "NEIPSecIKEValidateIKEChildDictionary";
    v148 = 1024;
    v149 = 2160;
    v150 = 2112;
    v151 = CFSTR("TrafficSelectorsRemote");
    v152 = 2048;
    v153 = CFARRAY_TYPE;
    v100 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_138;
  }
  v11 = (const __CFArray *)NEGetValueWithType(v5, CFSTR("TrafficSelectorsLocal"), CFARRAY_TYPE);
  if (v11)
  {
    v12 = v11;
    Count = CFArrayGetCount(v11);
    if (!Count)
    {
      ne_log_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        goto LABEL_198;
      *(_DWORD *)buf = 136315394;
      v147 = "NEIPSecIKEValidateIKEChildDictionary";
      v148 = 1024;
      v149 = 2167;
      v100 = "%s:%d: IKE Child local traffic selector array is empty";
LABEL_147:
      v101 = v15;
      v102 = 18;
      goto LABEL_148;
    }
    v14 = Count;
    v123 = v6;
    v15 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    if (v14 >= 1)
    {
      v16 = 0;
      v17 = CFSTR("TSProtocol");
      v128 = v12;
      v120 = v14;
      while (1)
      {
        v18 = v17;
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(v12, v16);
        if (!ValueAtIndex)
          break;
        v20 = ValueAtIndex;
        v21 = CFDICTIONARY_TYPE;
        if (CFGetTypeID(ValueAtIndex) != v21)
          break;
        v22 = v20;
        v23 = objc_alloc_init(NEIKEv2TrafficSelector);
        if (!NEGetValueWithType(v22, CFSTR("TSType"), CFSTRING_TYPE))
        {
          ne_log_obj();
          v103 = objc_claimAutoreleasedReturnValue();
          v6 = v123;
          if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315906;
            v147 = "NEIPSecIKEValidateIKEChildDictionary";
            v148 = 1024;
            v149 = 2182;
            v150 = 2112;
            v151 = CFSTR("TSType");
            v152 = 2048;
            v153 = CFSTRING_TYPE;
            _os_log_error_impl(&dword_19BD16000, v103, OS_LOG_TYPE_ERROR, "%s:%d: value for key %@ is missing or type != %lu", buf, 0x26u);
          }
          goto LABEL_196;
        }
        if (!NEGetValueWithType(v22, CFSTR("TSStartAddress"), CFSTRING_TYPE))
        {
          ne_log_obj();
          v103 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315906;
            v147 = "NEIPSecIKEValidateIKEChildDictionary";
            v148 = 1024;
            v149 = 2183;
            v150 = 2112;
            v151 = CFSTR("TSStartAddress");
            v152 = 2048;
            v153 = CFSTRING_TYPE;
            v104 = "%s:%d: value for key %@ is missing or type != %lu";
            goto LABEL_176;
          }
LABEL_177:
          v6 = v123;
          goto LABEL_196;
        }
        v24 = v15;
        -[__CFDictionary objectForKeyedSubscript:](v22, "objectForKeyedSubscript:", CFSTR("TSStartAddress"));
        v25 = (__CFString *)objc_claimAutoreleasedReturnValue();
        v26 = NECreateAddressStructFromString(v25, 0, 0);

        objc_msgSend(MEMORY[0x1E0CCEC58], "endpointWithAddress:", v26);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        -[NEIKEv2TrafficSelector setStartAddress:](v23, "setStartAddress:", v27);

        free(v26);
        if (!NEGetValueWithType(v22, CFSTR("TSEndAddress"), CFSTRING_TYPE))
        {
          ne_log_obj();
          v103 = objc_claimAutoreleasedReturnValue();
          v15 = v24;
          if (!os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
            goto LABEL_177;
          *(_DWORD *)buf = 136315906;
          v147 = "NEIPSecIKEValidateIKEChildDictionary";
          v148 = 1024;
          v149 = 2189;
          v150 = 2112;
          v151 = CFSTR("TSEndAddress");
          v152 = 2048;
          v153 = CFSTRING_TYPE;
          v104 = "%s:%d: value for key %@ is missing or type != %lu";
LABEL_176:
          _os_log_error_impl(&dword_19BD16000, v103, OS_LOG_TYPE_ERROR, v104, buf, 0x26u);
          goto LABEL_177;
        }
        -[__CFDictionary objectForKeyedSubscript:](v22, "objectForKeyedSubscript:", CFSTR("TSEndAddress"));
        v28 = (__CFString *)objc_claimAutoreleasedReturnValue();
        v29 = NECreateAddressStructFromString(v28, 0, 0);

        objc_msgSend(MEMORY[0x1E0CCEC58], "endpointWithAddress:", v29);
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        -[NEIKEv2TrafficSelector setEndAddress:](v23, "setEndAddress:", v30);

        free(v29);
        if (!NEGetValueWithType(v22, CFSTR("TSStartPort"), CFNUMBER_TYPE))
        {
          ne_log_obj();
          v103 = objc_claimAutoreleasedReturnValue();
          v15 = v24;
          if (!os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
            goto LABEL_177;
          *(_DWORD *)buf = 136315906;
          v147 = "NEIPSecIKEValidateIKEChildDictionary";
          v148 = 1024;
          v149 = 2195;
          v150 = 2112;
          v151 = CFSTR("TSStartPort");
          v152 = 2048;
          v153 = CFNUMBER_TYPE;
          v104 = "%s:%d: value for key %@ is missing or type != %lu";
          goto LABEL_176;
        }
        -[__CFDictionary objectForKeyedSubscript:](v22, "objectForKeyedSubscript:", CFSTR("TSStartPort"));
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        -[NEIKEv2TrafficSelector setStartPort:](v23, "setStartPort:", objc_msgSend(v31, "unsignedShortValue"));

        v15 = v24;
        if (!NEGetValueWithType(v22, CFSTR("TSEndPort"), CFNUMBER_TYPE))
        {
          ne_log_obj();
          v103 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
            goto LABEL_177;
          *(_DWORD *)buf = 136315906;
          v147 = "NEIPSecIKEValidateIKEChildDictionary";
          v148 = 1024;
          v149 = 2198;
          v150 = 2112;
          v151 = CFSTR("TSEndPort");
          v152 = 2048;
          v153 = CFNUMBER_TYPE;
          v104 = "%s:%d: value for key %@ is missing or type != %lu";
          goto LABEL_176;
        }
        -[__CFDictionary objectForKeyedSubscript:](v22, "objectForKeyedSubscript:", CFSTR("TSEndPort"));
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        -[NEIKEv2TrafficSelector setEndPort:](v23, "setEndPort:", objc_msgSend(v32, "unsignedShortValue"));

        v17 = v18;
        if (CFDictionaryContainsKey(v22, v18) && !NEGetValueWithType(v22, v18, CFNUMBER_TYPE))
        {
          ne_log_obj();
          v103 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
            goto LABEL_177;
          *(_DWORD *)buf = 136315906;
          v147 = "NEIPSecIKEValidateIKEChildDictionary";
          v148 = 1024;
          v149 = 2201;
          v150 = 2112;
          v151 = v18;
          v152 = 2048;
          v153 = CFNUMBER_TYPE;
          v104 = "%s:%d: type of value for key %@ != %lu";
          goto LABEL_176;
        }
        if (CFDictionaryContainsKey(v5, v18))
        {
          -[__CFDictionary objectForKeyedSubscript:](v22, "objectForKeyedSubscript:", v18);
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          -[NEIKEv2TrafficSelector setIpProtocol:](v23, "setIpProtocol:", objc_msgSend(v33, "unsignedCharValue"));

        }
        -[NSObject addObject:](v15, "addObject:", v23);

        ++v16;
        p_cache = NEConfigurationManager.cache;
        v12 = v128;
        if (v120 == v16)
          goto LABEL_42;
      }
      ne_log_obj();
      v22 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled((os_log_t)v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v147 = "NEIPSecIKEValidateIKEChildDictionary";
        v148 = 1024;
        v149 = 2175;
        _os_log_error_impl(&dword_19BD16000, (os_log_t)v22, OS_LOG_TYPE_ERROR, "%s:%d: IKE Child local traffic selector array is invalid", buf, 0x12u);
      }
      v6 = v123;
      goto LABEL_197;
    }
LABEL_42:
    -[NEIKEv2ChildSAConfiguration setLocalTrafficSelectors:](v2, "setLocalTrafficSelectors:", v15);

    v6 = v123;
  }
  v34 = (const __CFArray *)NEGetValueWithType(v5, CFSTR("TrafficSelectorsRemote"), CFARRAY_TYPE);
  if (!v34)
    goto LABEL_60;
  v35 = v34;
  v36 = CFArrayGetCount(v34);
  if (!v36)
  {
    ne_log_obj();
    v15 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      goto LABEL_198;
    *(_DWORD *)buf = 136315394;
    v147 = "NEIPSecIKEValidateIKEChildDictionary";
    v148 = 1024;
    v149 = 2216;
    v100 = "%s:%d: IKE Child remote traffic selector array is empty";
    goto LABEL_147;
  }
  v37 = v36;
  v124 = v6;
  v15 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  if (v37 >= 1)
  {
    v38 = 0;
    theDict = v35;
    v129 = v37;
    while (1)
    {
      v39 = (void *)CFArrayGetValueAtIndex(v35, v38);
      if (!v39 || (v40 = v39, v41 = p_cache[99], (void *)CFGetTypeID(v39) != v41))
      {
        ne_log_obj();
        v22 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled((os_log_t)v22, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v147 = "NEIPSecIKEValidateIKEChildDictionary";
          v148 = 1024;
          v149 = 2224;
          _os_log_error_impl(&dword_19BD16000, (os_log_t)v22, OS_LOG_TYPE_ERROR, "%s:%d: IKE Child remote traffic selector array is invalid", buf, 0x12u);
        }
        v6 = v124;
        goto LABEL_197;
      }
      v42 = p_cache;
      v22 = v40;
      v23 = objc_alloc_init(NEIKEv2TrafficSelector);
      if (!NEGetValueWithType(v22, CFSTR("TSType"), CFSTRING_TYPE))
      {
        ne_log_obj();
        v103 = objc_claimAutoreleasedReturnValue();
        v6 = v124;
        if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          v147 = "NEIPSecIKEValidateIKEChildDictionary";
          v148 = 1024;
          v149 = 2231;
          v150 = 2112;
          v151 = CFSTR("TSType");
          v152 = 2048;
          v153 = CFSTRING_TYPE;
          _os_log_error_impl(&dword_19BD16000, v103, OS_LOG_TYPE_ERROR, "%s:%d: value for key %@ is missing or type != %lu", buf, 0x26u);
        }
        goto LABEL_196;
      }
      if (!NEGetValueWithType(v22, CFSTR("TSStartAddress"), CFSTRING_TYPE))
      {
        ne_log_obj();
        v103 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          v147 = "NEIPSecIKEValidateIKEChildDictionary";
          v148 = 1024;
          v149 = 2232;
          v150 = 2112;
          v151 = CFSTR("TSStartAddress");
          v152 = 2048;
          v153 = CFSTRING_TYPE;
          v106 = "%s:%d: value for key %@ is missing or type != %lu";
          goto LABEL_194;
        }
        goto LABEL_195;
      }
      v43 = v15;
      -[__CFDictionary objectForKeyedSubscript:](v22, "objectForKeyedSubscript:", CFSTR("TSStartAddress"));
      v44 = (__CFString *)objc_claimAutoreleasedReturnValue();
      v45 = NECreateAddressStructFromString(v44, 0, 0);

      objc_msgSend(MEMORY[0x1E0CCEC58], "endpointWithAddress:", v45);
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      -[NEIKEv2TrafficSelector setStartAddress:](v23, "setStartAddress:", v46);

      free(v45);
      if (!NEGetValueWithType(v22, CFSTR("TSEndAddress"), CFSTRING_TYPE))
      {
        ne_log_obj();
        v103 = objc_claimAutoreleasedReturnValue();
        v15 = v43;
        if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          v147 = "NEIPSecIKEValidateIKEChildDictionary";
          v148 = 1024;
          v149 = 2238;
          v150 = 2112;
          v151 = CFSTR("TSEndAddress");
          v152 = 2048;
          v153 = CFSTRING_TYPE;
          v106 = "%s:%d: value for key %@ is missing or type != %lu";
          goto LABEL_194;
        }
        goto LABEL_195;
      }
      -[__CFDictionary objectForKeyedSubscript:](v22, "objectForKeyedSubscript:", CFSTR("TSEndAddress"));
      v47 = (__CFString *)objc_claimAutoreleasedReturnValue();
      v48 = NECreateAddressStructFromString(v47, 0, 0);

      objc_msgSend(MEMORY[0x1E0CCEC58], "endpointWithAddress:", v48);
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      -[NEIKEv2TrafficSelector setEndAddress:](v23, "setEndAddress:", v49);

      free(v48);
      if (!NEGetValueWithType(v22, CFSTR("TSStartPort"), CFNUMBER_TYPE))
      {
        ne_log_obj();
        v103 = objc_claimAutoreleasedReturnValue();
        v15 = v43;
        if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          v147 = "NEIPSecIKEValidateIKEChildDictionary";
          v148 = 1024;
          v149 = 2244;
          v150 = 2112;
          v151 = CFSTR("TSStartPort");
          v152 = 2048;
          v153 = CFNUMBER_TYPE;
          v106 = "%s:%d: value for key %@ is missing or type != %lu";
          goto LABEL_194;
        }
        goto LABEL_195;
      }
      -[__CFDictionary objectForKeyedSubscript:](v22, "objectForKeyedSubscript:", CFSTR("TSStartPort"));
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      -[NEIKEv2TrafficSelector setStartPort:](v23, "setStartPort:", objc_msgSend(v50, "unsignedShortValue"));

      v15 = v43;
      if (!NEGetValueWithType(v22, CFSTR("TSEndPort"), CFNUMBER_TYPE))
        break;
      -[__CFDictionary objectForKeyedSubscript:](v22, "objectForKeyedSubscript:", CFSTR("TSEndPort"));
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      -[NEIKEv2TrafficSelector setEndPort:](v23, "setEndPort:", objc_msgSend(v51, "unsignedShortValue"));

      if (CFDictionaryContainsKey(v22, CFSTR("TSProtocol"))
        && !NEGetValueWithType(v22, CFSTR("TSProtocol"), CFNUMBER_TYPE))
      {
        ne_log_obj();
        v103 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          v147 = "NEIPSecIKEValidateIKEChildDictionary";
          v148 = 1024;
          v149 = 2250;
          v150 = 2112;
          v151 = CFSTR("TSProtocol");
          v152 = 2048;
          v153 = CFNUMBER_TYPE;
          v106 = "%s:%d: type of value for key %@ != %lu";
LABEL_194:
          _os_log_error_impl(&dword_19BD16000, v103, OS_LOG_TYPE_ERROR, v106, buf, 0x26u);
        }
        goto LABEL_195;
      }
      if (CFDictionaryContainsKey(v5, CFSTR("TSProtocol")))
      {
        -[__CFDictionary objectForKeyedSubscript:](v22, "objectForKeyedSubscript:", CFSTR("TSProtocol"));
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        -[NEIKEv2TrafficSelector setIpProtocol:](v23, "setIpProtocol:", objc_msgSend(v52, "unsignedCharValue"));

      }
      -[NSObject addObject:](v43, "addObject:", v23);

      ++v38;
      p_cache = v42;
      v35 = theDict;
      if (v129 == v38)
        goto LABEL_59;
    }
    ne_log_obj();
    v103 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v147 = "NEIPSecIKEValidateIKEChildDictionary";
      v148 = 1024;
      v149 = 2247;
      v150 = 2112;
      v151 = CFSTR("TSEndPort");
      v152 = 2048;
      v153 = CFNUMBER_TYPE;
      v106 = "%s:%d: value for key %@ is missing or type != %lu";
      goto LABEL_194;
    }
LABEL_195:
    v6 = v124;
LABEL_196:

LABEL_197:
    goto LABEL_198;
  }
LABEL_59:
  -[NEIKEv2ChildSAConfiguration setRemoteTrafficSelectors:](v2, "setRemoteTrafficSelectors:", v15);

  v6 = v124;
LABEL_60:
  v53 = (const __CFArray *)NEGetValueWithType(v5, CFSTR("ChildProposals"), CFARRAY_TYPE);
  if (!v53)
  {
    ne_log_obj();
    v15 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      goto LABEL_198;
    *(_DWORD *)buf = 136315394;
    v147 = "NEIPSecIKEValidateIKEChildDictionary";
    v148 = 1024;
    v149 = 2262;
    v100 = "%s:%d: IKE Child configuration proposals array is missing";
    goto LABEL_147;
  }
  v54 = v53;
  v55 = CFArrayGetCount(v53);
  if (!v55)
  {
    ne_log_obj();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v147 = "NEIPSecIKEValidateIKEChildDictionary";
      v148 = 1024;
      v149 = 2267;
      v100 = "%s:%d: IKE Child configuration proposals array is empty";
      goto LABEL_147;
    }
LABEL_198:
    v9 = 0;
    goto LABEL_199;
  }
  v56 = v55;
  theDicta = v5;
  v118 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  if (v56 < 1)
  {
LABEL_152:
    v15 = v118;
    -[NEIKEv2ChildSAConfiguration setProposals:](v2, "setProposals:", v118);
    v9 = v2;
    goto LABEL_153;
  }
  v57 = 0;
  v58 = CFSTR("Lifetime");
  v122 = v2;
  v125 = v6;
  v116 = v56;
  v117 = v54;
  while (1)
  {
    v59 = v58;
    v121 = v57;
    v60 = (void *)CFArrayGetValueAtIndex(v54, v57);
    if (!v60 || (v61 = v60, v62 = p_cache[99], (void *)CFGetTypeID(v60) != v62))
    {
      ne_log_obj();
      v105 = objc_claimAutoreleasedReturnValue();
      v5 = theDicta;
      if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v147 = "NEIPSecIKEValidateIKEChildDictionary";
        v148 = 1024;
        v149 = 2275;
        _os_log_error_impl(&dword_19BD16000, v105, OS_LOG_TYPE_ERROR, "%s:%d: IKE Child configuration proposals array is invalid", buf, 0x12u);
      }

      v9 = 0;
      v15 = v118;
      goto LABEL_199;
    }
    v63 = v61;
    v64 = objc_alloc_init(NEIKEv2ChildSAProposal);
    if (v64)
      v64->_proposalNumber = v121 + 1;
    v130 = v64;
    if (!NEGetValueWithType(v63, CFSTR("ChildProtocol"), CFSTRING_TYPE))
      break;
    -[__CFDictionary objectForKeyedSubscript:](v63, "objectForKeyedSubscript:", CFSTR("ChildProtocol"));
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v65, "isEqualToString:", CFSTR("ESP")) & 1) != 0)
    {
      v66 = 3;
      v58 = v59;
    }
    else
    {
      v58 = v59;
      if (!objc_msgSend(v65, "isEqualToString:", CFSTR("AH")))
        goto LABEL_74;
      v66 = 2;
    }
    -[NEIKEv2ChildSAProposal setProtocol:](v130, "setProtocol:", v66);
LABEL_74:
    if (!NEGetValueWithType(v63, v58, CFNUMBER_TYPE))
    {
      ne_log_obj();
      v68 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        v147 = "NEIPSecIKEValidateIKEChildDictionary";
        v148 = 1024;
        v149 = 2292;
        v150 = 2112;
        v151 = v58;
        v152 = 2048;
        v153 = CFNUMBER_TYPE;
        _os_log_error_impl(&dword_19BD16000, v68, OS_LOG_TYPE_ERROR, "%s:%d: value for key %@ is missing or type != %lu", buf, 0x26u);
      }
      v15 = v118;
      v5 = theDicta;
LABEL_210:

      v9 = 0;
      v6 = v125;
      goto LABEL_199;
    }
    v119 = v65;
    -[__CFDictionary objectForKeyedSubscript:](v63, "objectForKeyedSubscript:", v58);
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    -[NEIKEv2ChildSAProposal setLifetimeSeconds:](v130, "setLifetimeSeconds:", objc_msgSend(v67, "unsignedLongValue"));

    if (CFDictionaryContainsKey(v63, CFSTR("EncryptionAlgorithm")))
    {
      v68 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      -[__CFDictionary objectForKeyedSubscript:](v63, "objectForKeyedSubscript:", CFSTR("EncryptionAlgorithm"));
      v69 = (__CFString *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v70 = NEIPsecIKEGetEncryptionProtocol(v69, 1);
        if (!v70)
        {
          ne_log_obj();
          p_super = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(p_super, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            v147 = "NEIPSecIKEValidateIKEChildDictionary";
            v148 = 1024;
            v149 = 2301;
            v150 = 2112;
            v151 = v69;
            _os_log_error_impl(&dword_19BD16000, p_super, OS_LOG_TYPE_ERROR, "%s%d: \"%@\" is not a recognized encryption method", buf, 0x1Cu);
          }
          v71 = (NEIKEv2EncryptionProtocol *)v69;
          v15 = v118;
LABEL_205:
          v65 = v119;
          v5 = theDicta;

          goto LABEL_210;
        }
        v71 = v70;
        -[NSObject addObject:](v68, "addObject:", v70);
LABEL_79:

        v58 = v59;
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v113 = v63;
          v141 = 0u;
          v142 = 0u;
          v139 = 0u;
          v140 = 0u;
          v71 = v69;
          v72 = -[NEIKEv2EncryptionProtocol countByEnumeratingWithState:objects:count:](v71, "countByEnumeratingWithState:objects:count:", &v139, v145, 16);
          if (v72)
          {
            v73 = v72;
            v112 = v69;
            v74 = *(_QWORD *)v140;
            while (2)
            {
              for (i = 0; i != v73; ++i)
              {
                if (*(_QWORD *)v140 != v74)
                  objc_enumerationMutation(v71);
                v76 = *(__CFString **)(*((_QWORD *)&v139 + 1) + 8 * i);
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                {
                  v77 = NEIPsecIKEGetEncryptionProtocol(v76, 1);
                  if (!v77)
                  {
                    ne_log_obj();
                    v109 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 136315650;
                      v147 = "NEIPSecIKEValidateIKEChildDictionary";
                      v148 = 1024;
                      v149 = 2310;
                      v150 = 2112;
                      v151 = v76;
                      _os_log_error_impl(&dword_19BD16000, v109, OS_LOG_TYPE_ERROR, "%s%d: \"%@\" is not a recognized encryption method", buf, 0x1Cu);
                    }

                    p_super = &v71->super;
                    v2 = v122;
                    v15 = v118;
                    v63 = v113;
                    goto LABEL_205;
                  }
                  v78 = v77;
                  -[NSObject addObject:](v68, "addObject:", v77);

                }
              }
              v73 = -[NEIKEv2EncryptionProtocol countByEnumeratingWithState:objects:count:](v71, "countByEnumeratingWithState:objects:count:", &v139, v145, 16);
              if (v73)
                continue;
              break;
            }
            v2 = v122;
            p_cache = (void **)(NEConfigurationManager + 16);
            v69 = v112;
            v63 = v113;
          }
          goto LABEL_79;
        }
      }
      -[NEIKEv2ChildSAProposal setEncryptionProtocols:](v130, "setEncryptionProtocols:", v68);

      v6 = v125;
    }
    if (!CFDictionaryContainsKey(v63, CFSTR("IntegrityAlgorithm")))
      goto LABEL_112;
    v68 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    -[__CFDictionary objectForKeyedSubscript:](v63, "objectForKeyedSubscript:", CFSTR("IntegrityAlgorithm"));
    v79 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v80 = NEIPsecIKEGetIntegrityProtocol(v79);
      if (!v79)
      {
        ne_log_obj();
        v111 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          v147 = "NEIPSecIKEValidateIKEChildDictionary";
          v148 = 1024;
          v149 = 2326;
          v150 = 2112;
          v151 = 0;
          _os_log_error_impl(&dword_19BD16000, v111, OS_LOG_TYPE_ERROR, "%s%d: \"%@\" is not a recognized integrity method", buf, 0x1Cu);
        }
        v15 = v118;
LABEL_209:
        v65 = v119;
        v5 = theDicta;

        v2 = v122;
        goto LABEL_210;
      }
      -[NSObject addObject:](v68, "addObject:", v80);
      goto LABEL_110;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v114 = v63;
      v137 = 0u;
      v138 = 0u;
      v135 = 0u;
      v136 = 0u;
      v80 = v79;
      v81 = -[NEIKEv2IntegrityProtocol countByEnumeratingWithState:objects:count:](v80, "countByEnumeratingWithState:objects:count:", &v135, v144, 16);
      if (v81)
      {
        v82 = v81;
        v83 = *(_QWORD *)v136;
        while (2)
        {
          for (j = 0; j != v82; ++j)
          {
            if (*(_QWORD *)v136 != v83)
              objc_enumerationMutation(v80);
            v85 = *(__CFString **)(*((_QWORD *)&v135 + 1) + 8 * j);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              v86 = NEIPsecIKEGetIntegrityProtocol(v85);
              if (!v80)
              {
                ne_log_obj();
                v111 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315650;
                  v147 = "NEIPSecIKEValidateIKEChildDictionary";
                  v148 = 1024;
                  v149 = 2335;
                  v150 = 2112;
                  v151 = v85;
                  _os_log_error_impl(&dword_19BD16000, v111, OS_LOG_TYPE_ERROR, "%s%d: \"%@\" is not a recognized integrity method", buf, 0x1Cu);
                }
                v80 = v86;
                v15 = v118;
                v63 = v114;
                goto LABEL_209;
              }
              -[NSObject addObject:](v68, "addObject:", v86);

              v58 = v59;
            }
          }
          v82 = -[NEIKEv2IntegrityProtocol countByEnumeratingWithState:objects:count:](v80, "countByEnumeratingWithState:objects:count:", &v135, v144, 16);
          if (v82)
            continue;
          break;
        }
        v2 = v122;
      }
      v63 = v114;
LABEL_110:

      p_cache = (void **)(NEConfigurationManager + 16);
    }
    -[NEIKEv2ChildSAProposal setIntegrityProtocols:](v130, "setIntegrityProtocols:", v68);

    v6 = v125;
LABEL_112:
    if (CFDictionaryContainsKey(v63, CFSTR("DHGroup")))
    {
      v87 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      -[__CFDictionary objectForKeyedSubscript:](v63, "objectForKeyedSubscript:", CFSTR("DHGroup"));
      v88 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      v89 = v88;
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v90 = objc_msgSend(v88, "unsignedIntValue");
        v91 = [NEIKEv2KEMProtocol alloc];
        v92 = v90;
        v88 = v89;
        v93 = -[NEIKEv2KEMProtocol initWithMethod:](v91, "initWithMethod:", v92);
        objc_msgSend(v87, "addObject:", v93);
        goto LABEL_127;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v115 = v63;
        v133 = 0u;
        v134 = 0u;
        v131 = 0u;
        v132 = 0u;
        v93 = v88;
        v94 = -[NEIKEv2KEMProtocol countByEnumeratingWithState:objects:count:](v93, "countByEnumeratingWithState:objects:count:", &v131, v143, 16);
        if (v94)
        {
          v95 = v94;
          v96 = *(_QWORD *)v132;
          do
          {
            for (k = 0; k != v95; ++k)
            {
              if (*(_QWORD *)v132 != v96)
                objc_enumerationMutation(v93);
              v98 = *(void **)(*((_QWORD *)&v131 + 1) + 8 * k);
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                v99 = -[NEIKEv2KEMProtocol initWithMethod:]([NEIKEv2KEMProtocol alloc], "initWithMethod:", objc_msgSend(v98, "unsignedIntValue"));
                objc_msgSend(v87, "addObject:", v99);

                v88 = v89;
              }
            }
            v95 = -[NEIKEv2KEMProtocol countByEnumeratingWithState:objects:count:](v93, "countByEnumeratingWithState:objects:count:", &v131, v143, 16);
          }
          while (v95);
          v6 = v125;
          p_cache = (void **)(NEConfigurationManager + 16);
        }
        v63 = v115;
LABEL_127:

        v2 = v122;
      }
      -[NEIKEv2ChildSAProposal setKemProtocols:](v130, "setKemProtocols:", v87);

      v58 = v59;
    }
    -[NSObject addObject:](v118, "addObject:", v130);

    v57 = v121 + 1;
    v54 = v117;
    if (v121 + 1 == v116)
      goto LABEL_152;
  }
  ne_log_obj();
  v107 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315906;
    v147 = "NEIPSecIKEValidateIKEChildDictionary";
    v148 = 1024;
    v149 = 2284;
    v150 = 2112;
    v151 = CFSTR("ChildProtocol");
    v152 = 2048;
    v153 = CFSTRING_TYPE;
    _os_log_error_impl(&dword_19BD16000, v107, OS_LOG_TYPE_ERROR, "%s:%d: value for key %@ is missing or type != %lu", buf, 0x26u);
  }

  v9 = 0;
  v15 = v118;
LABEL_153:
  v5 = theDicta;
LABEL_199:

LABEL_200:
LABEL_201:

  return v9;
}

NEIKEv2SessionConfiguration *NEIPSecIKEValidateSessionDictionary(void *a1)
{
  NEIKEv2SessionConfiguration *v2;
  uint64_t v3;
  const __CFNumber *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  char v9;
  uint64_t v10;
  NSObject *v11;
  NEIKEv2SessionConfiguration *v12;
  const char *v14;
  NSObject *v15;
  uint32_t v16;
  NSObject *v17;
  const char *v18;
  void *v19;
  char v20;
  void *v21;
  char v22;
  void *v23;
  char v24;
  void *v25;
  int v26;
  __CFString *v27;
  unsigned __int8 *v28;
  int v29;
  uint64_t v30;
  id v31;
  void *v32;
  void *v33;
  char v34;
  uint64_t v35;
  void *v36;
  char v37;
  void *v38;
  char v39;
  void *v40;
  char v41;
  void *v42;
  int v43;
  __CFString *v44;
  unsigned __int8 *v45;
  int v46;
  uint64_t v47;
  id v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  CFTypeID TypeID;
  void *v61;
  CFTypeID v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  NSObject *v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  NSObject *v94;
  const char *v95;
  CFTypeID v96;
  CFTypeID v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  char isKindOfClass;
  void *v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t i;
  void *v109;
  char v110;
  __objc2_class **v111;
  char v112;
  char v113;
  char v114;
  char v115;
  char v116;
  char v117;
  char v118;
  char v119;
  char v120;
  char v121;
  char v122;
  char v123;
  char v124;
  int v125;
  void *v126;
  id v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  void *v132;
  void *v133;
  __objc2_class *v134;
  __objc2_class *v135;
  void *v136;
  uint64_t v137;
  __objc2_class *v138;
  uint64_t v139;
  NEIKEv2ConfigurationMessage *v140;
  const char *v141;
  NEIKEv2ConfigurationMessage *v142;
  void *v143;
  void *v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  __CFString *v149;
  __CFString *v150;
  __objc2_class *v151;
  __objc2_class *v152;
  id v153;
  void *v154;
  unsigned __int8 v155;
  id v156;
  __objc2_class *v157;
  __objc2_class *v158;
  uint64_t v159;
  unsigned __int8 v160;
  id v161;
  char v162;
  __objc2_class *v163;
  uint64_t v164;
  NEIKEv2ConfigurationMessage *v165;
  const char *v166;
  NEIKEv2ConfigurationMessage *v167;
  void *v168;
  char v169;
  void *v170;
  id v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t j;
  void *v176;
  char v177;
  __objc2_class **v178;
  char v179;
  char v180;
  char v181;
  char v182;
  char v183;
  char v184;
  char v185;
  char v186;
  char v187;
  char v188;
  char v189;
  char v190;
  char v191;
  int v192;
  void *v193;
  id v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  void *v199;
  void *v200;
  __objc2_class *v201;
  __objc2_class *v202;
  void *v203;
  uint64_t v204;
  __objc2_class *v205;
  uint64_t v206;
  NEIKEv2ConfigurationMessage *v207;
  const char *v208;
  NEIKEv2ConfigurationMessage *v209;
  NEIKEv2IPv4SubnetAttribute *v210;
  NEIKEv2IPv4SubnetAttribute *v211;
  void *v212;
  NEIKEv2IPv4SubnetAttribute *v213;
  id v214;
  id obj;
  id obja;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  id newValue;
  id newValuea;
  id newValueb;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  int valuePtr;
  _BYTE v244[128];
  _BYTE v245[128];
  _BYTE v246[128];
  _BYTE v247[128];
  uint8_t v248[128];
  uint8_t buf[4];
  const char *v250;
  __int16 v251;
  int v252;
  __int16 v253;
  const __CFString *v254;
  __int16 v255;
  uint64_t v256;
  uint64_t v257;

  v257 = *MEMORY[0x1E0C80C00];
  if (NEInitCFTypes_onceToken != -1)
    dispatch_once(&NEInitCFTypes_onceToken, &__block_literal_global_22195);
  v2 = objc_alloc_init(NEIKEv2SessionConfiguration);
  if (!a1 || (v3 = CFDICTIONARY_TYPE, CFGetTypeID(a1) != v3))
  {
    ne_log_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v250 = "NEIPSecIKEValidateSessionDictionary";
      v251 = 1024;
      v252 = 1371;
      v14 = "%s:%d: Session configuration is not a dictionary";
      v15 = v11;
      v16 = 18;
      goto LABEL_22;
    }
LABEL_14:

    v12 = 0;
    goto LABEL_15;
  }
  if (!NEGetValueWithType((const __CFDictionary *)a1, CFSTR("IKEVersion"), CFNUMBER_TYPE))
  {
    ne_log_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v250 = "NEIPSecIKEValidateSessionDictionary";
      v251 = 1024;
      v252 = 1375;
      v253 = 2112;
      v254 = CFSTR("IKEVersion");
      v255 = 2048;
      v256 = CFNUMBER_TYPE;
      v14 = "%s:%d: value for key %@ is missing or type != %lu";
      v15 = v11;
      v16 = 38;
LABEL_22:
      _os_log_error_impl(&dword_19BD16000, v15, OS_LOG_TYPE_ERROR, v14, buf, v16);
      goto LABEL_14;
    }
    goto LABEL_14;
  }
  valuePtr = 0;
  v4 = (const __CFNumber *)NEGetValueWithType((const __CFDictionary *)a1, CFSTR("IKEVersion"), CFNUMBER_TYPE);
  CFNumberGetValue(v4, kCFNumberIntType, &valuePtr);
  if (valuePtr != 2)
  {
    ne_log_obj();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v250 = "NEIPSecIKEValidateSessionDictionary";
      v251 = 1024;
      v252 = 1380;
      _os_log_error_impl(&dword_19BD16000, v5, OS_LOG_TYPE_ERROR, "%s:%d: Session IKE version is not 2", buf, 0x12u);
    }
    v12 = 0;
    goto LABEL_569;
  }
  v5 = a1;
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("LocalIdentifier"))
    && !NEGetValueWithType((const __CFDictionary *)v5, CFSTR("LocalIdentifier"), CFSTRING_TYPE))
  {
    ne_log_obj();
    v17 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      goto LABEL_567;
    *(_DWORD *)buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    v251 = 1024;
    v252 = 1387;
    v253 = 2112;
    v254 = CFSTR("LocalIdentifier");
    v255 = 2048;
    v256 = CFSTRING_TYPE;
    v18 = "%s:%d: type of value for key %@ != %lu";
LABEL_52:
    _os_log_error_impl(&dword_19BD16000, v17, OS_LOG_TYPE_ERROR, v18, buf, 0x26u);
    goto LABEL_567;
  }
  if (!CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("LocalIdentifier")))
    goto LABEL_44;
  if (!NEGetValueWithType((const __CFDictionary *)v5, CFSTR("LocalIdentifierType"), CFSTRING_TYPE))
  {
    ne_log_obj();
    v17 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      goto LABEL_567;
    *(_DWORD *)buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    v251 = 1024;
    v252 = 1389;
    v253 = 2112;
    v254 = CFSTR("LocalIdentifierType");
    v255 = 2048;
    v256 = CFSTRING_TYPE;
    v18 = "%s:%d: value for key %@ is missing or type != %lu";
    goto LABEL_52;
  }
  -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("LocalIdentifier"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "dataUsingEncoding:", 4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("LocalIdentifierType"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "isEqualToString:", CFSTR("IDFQDN"));

  if ((v9 & 1) == 0)
  {
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("LocalIdentifierType"));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend(v19, "isEqualToString:", CFSTR("IDUserFQDN"));

    if ((v20 & 1) != 0)
    {
      v10 = 3;
      goto LABEL_43;
    }
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("LocalIdentifierType"));
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend(v21, "isEqualToString:", CFSTR("ADASN1DN"));

    if ((v22 & 1) != 0)
    {
      v10 = 9;
      goto LABEL_43;
    }
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("LocalIdentifierType"));
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = objc_msgSend(v23, "isEqualToString:", CFSTR("KeyID"));

    if ((v24 & 1) != 0)
    {
      v10 = 11;
      goto LABEL_43;
    }
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("LocalIdentifierType"));
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = objc_msgSend(v25, "isEqualToString:", CFSTR("IDAddress"));

    if (!v26
      || (-[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("LocalIdentifier")),
          v27 = (__CFString *)objc_claimAutoreleasedReturnValue(),
          v28 = (unsigned __int8 *)NECreateAddressStructFromString(v27, 0, 0),
          v27,
          !v28))
    {
      v10 = 0;
      goto LABEL_43;
    }
    v29 = v28[1];
    if (v29 == 30)
    {
      objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v28 + 8, 16);
      v30 = objc_claimAutoreleasedReturnValue();
      v10 = 5;
    }
    else
    {
      if (v29 != 2)
      {
        v10 = 0;
        goto LABEL_42;
      }
      objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v28 + 4, 4);
      v30 = objc_claimAutoreleasedReturnValue();
      v10 = 1;
    }

    v7 = (void *)v30;
LABEL_42:
    free(v28);
    goto LABEL_43;
  }
  v10 = 2;
LABEL_43:
  v31 = +[NEIKEv2Identifier createIdentifierWithType:data:](NEIKEv2Identifier, "createIdentifierWithType:data:", v10, v7);
  -[NEIKEv2SessionConfiguration setLocalIdentifier:](v2, "setLocalIdentifier:", v31);

LABEL_44:
  if (!NEGetValueWithType((const __CFDictionary *)v5, CFSTR("RemoteIdentifier"), CFSTRING_TYPE))
  {
    ne_log_obj();
    v17 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      goto LABEL_567;
    *(_DWORD *)buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    v251 = 1024;
    v252 = 1421;
    v253 = 2112;
    v254 = CFSTR("RemoteIdentifier");
    v255 = 2048;
    v256 = CFSTRING_TYPE;
    v18 = "%s:%d: value for key %@ is missing or type != %lu";
    goto LABEL_52;
  }
  if (!NEGetValueWithType((const __CFDictionary *)v5, CFSTR("RemoteIdentifierType"), CFSTRING_TYPE))
  {
    ne_log_obj();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v250 = "NEIPSecIKEValidateSessionDictionary";
      v251 = 1024;
      v252 = 1422;
      v253 = 2112;
      v254 = CFSTR("RemoteIdentifierType");
      v255 = 2048;
      v256 = CFSTRING_TYPE;
      v18 = "%s:%d: value for key %@ is missing or type != %lu";
      goto LABEL_52;
    }
LABEL_567:
    v12 = 0;
    goto LABEL_568;
  }
  -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("RemoteIdentifier"));
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v32, "dataUsingEncoding:", 4);
  v17 = objc_claimAutoreleasedReturnValue();

  -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("RemoteIdentifierType"));
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v34 = objc_msgSend(v33, "isEqualToString:", CFSTR("IDFQDN"));

  if ((v34 & 1) == 0)
  {
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("RemoteIdentifierType"));
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    v37 = objc_msgSend(v36, "isEqualToString:", CFSTR("IDUserFQDN"));

    if ((v37 & 1) != 0)
    {
      v35 = 3;
      goto LABEL_69;
    }
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("RemoteIdentifierType"));
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    v39 = objc_msgSend(v38, "isEqualToString:", CFSTR("ADASN1DN"));

    if ((v39 & 1) != 0)
    {
      v35 = 9;
      goto LABEL_69;
    }
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("RemoteIdentifierType"));
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    v41 = objc_msgSend(v40, "isEqualToString:", CFSTR("KeyID"));

    if ((v41 & 1) != 0)
    {
      v35 = 11;
      goto LABEL_69;
    }
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("RemoteIdentifierType"));
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v43 = objc_msgSend(v42, "isEqualToString:", CFSTR("IDAddress"));

    if (!v43
      || (-[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("RemoteIdentifier")),
          v44 = (__CFString *)objc_claimAutoreleasedReturnValue(),
          v45 = (unsigned __int8 *)NECreateAddressStructFromString(v44, 0, 0),
          v44,
          !v45))
    {
      v35 = 0;
      goto LABEL_69;
    }
    v46 = v45[1];
    if (v46 == 30)
    {
      objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v45 + 8, 16);
      v47 = objc_claimAutoreleasedReturnValue();
      v35 = 5;
    }
    else
    {
      if (v46 != 2)
      {
        v35 = 0;
        goto LABEL_68;
      }
      objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v45 + 4, 4);
      v47 = objc_claimAutoreleasedReturnValue();
      v35 = 1;
    }

    v17 = v47;
LABEL_68:
    free(v45);
    goto LABEL_69;
  }
  v35 = 2;
LABEL_69:
  v48 = +[NEIKEv2Identifier createIdentifierWithType:data:](NEIKEv2Identifier, "createIdentifierWithType:data:", v35, v17);
  -[NEIKEv2SessionConfiguration setRemoteIdentifier:](v2, "setRemoteIdentifier:", v48);

  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("LocalPrivateEAPIdentity"))
    && !NEGetValueWithType((const __CFDictionary *)v5, CFSTR("LocalPrivateEAPIdentity"), CFSTRING_TYPE))
  {
    ne_log_obj();
    v90 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      goto LABEL_566;
    *(_DWORD *)buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    v251 = 1024;
    v252 = 1453;
    v253 = 2112;
    v254 = CFSTR("LocalPrivateEAPIdentity");
    v255 = 2048;
    v256 = CFSTRING_TYPE;
    v95 = "%s:%d: type of value for key %@ != %lu";
LABEL_565:
    _os_log_error_impl(&dword_19BD16000, v90, OS_LOG_TYPE_ERROR, v95, buf, 0x26u);
    goto LABEL_566;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("LocalPrivateEAPIdentity")))
  {
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("LocalPrivateEAPIdentity"));
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    -[NEIKEv2SessionConfiguration setLocalPrivateEAPIdentity:](v2, "setLocalPrivateEAPIdentity:", v49);

  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("LocalEncryptedEAPIdentity"))
    && !NEGetValueWithType((const __CFDictionary *)v5, CFSTR("LocalEncryptedEAPIdentity"), CFDATA_TYPE))
  {
    ne_log_obj();
    v90 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      goto LABEL_566;
    *(_DWORD *)buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    v251 = 1024;
    v252 = 1458;
    v253 = 2112;
    v254 = CFSTR("LocalEncryptedEAPIdentity");
    v255 = 2048;
    v256 = CFDATA_TYPE;
    v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("LocalEncryptedEAPIdentity")))
  {
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("LocalEncryptedEAPIdentity"));
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    -[NEIKEv2SessionConfiguration setLocalEncryptedEAPIdentity:](v2, "setLocalEncryptedEAPIdentity:", v50);

  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("SharedSecretKey"))
    && !NEGetValueWithType((const __CFDictionary *)v5, CFSTR("SharedSecretKey"), CFSTRING_TYPE))
  {
    ne_log_obj();
    v90 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      goto LABEL_566;
    *(_DWORD *)buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    v251 = 1024;
    v252 = 1463;
    v253 = 2112;
    v254 = CFSTR("SharedSecretKey");
    v255 = 2048;
    v256 = CFSTRING_TYPE;
    v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("SharedSecretKey")))
  {
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("SharedSecretKey"));
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    -[NEIKEv2SessionConfiguration setSharedSecret:](v2, "setSharedSecret:", v51);

  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("SharedSecretReference"))
    && !NEGetValueWithType((const __CFDictionary *)v5, CFSTR("SharedSecretReference"), CFDATA_TYPE))
  {
    ne_log_obj();
    v90 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      goto LABEL_566;
    *(_DWORD *)buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    v251 = 1024;
    v252 = 1468;
    v253 = 2112;
    v254 = CFSTR("SharedSecretReference");
    v255 = 2048;
    v256 = CFDATA_TYPE;
    v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("SharedSecretReference")))
  {
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("SharedSecretReference"));
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    -[NEIKEv2SessionConfiguration setSharedSecretReference:](v2, "setSharedSecretReference:", v52);

  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("LocalCertificate"))
    && !NEGetValueWithType((const __CFDictionary *)v5, CFSTR("LocalCertificate"), CFSTRING_TYPE))
  {
    ne_log_obj();
    v90 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      goto LABEL_566;
    *(_DWORD *)buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    v251 = 1024;
    v252 = 1473;
    v253 = 2112;
    v254 = CFSTR("LocalCertificate");
    v255 = 2048;
    v256 = CFSTRING_TYPE;
    v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("LocalCertificate")))
  {
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("LocalCertificate"));
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    -[NEIKEv2SessionConfiguration setLocalCertificateName:](v2, "setLocalCertificateName:", v53);

  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("LocalCertificateReference"))
    && !NEGetValueWithType((const __CFDictionary *)v5, CFSTR("LocalCertificateReference"), CFDATA_TYPE))
  {
    ne_log_obj();
    v90 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      goto LABEL_566;
    *(_DWORD *)buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    v251 = 1024;
    v252 = 1478;
    v253 = 2112;
    v254 = CFSTR("LocalCertificateReference");
    v255 = 2048;
    v256 = CFDATA_TYPE;
    v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("LocalCertificateReference")))
  {
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("LocalCertificateReference"));
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    -[NEIKEv2SessionConfiguration setLocalCertificateReference:](v2, "setLocalCertificateReference:", v54);

  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("NATTKeepAliveEnabled"))
    && !NEGetValueWithType((const __CFDictionary *)v5, CFSTR("NATTKeepAliveEnabled"), CFBOOLEAN_TYPE))
  {
    ne_log_obj();
    v90 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      goto LABEL_566;
    *(_DWORD *)buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    v251 = 1024;
    v252 = 1483;
    v253 = 2112;
    v254 = CFSTR("NATTKeepAliveEnabled");
    v255 = 2048;
    v256 = CFBOOLEAN_TYPE;
    v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("NATTKeepAliveEnabled")))
  {
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("NATTKeepAliveEnabled"));
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    -[NEIKEv2SessionConfiguration setNatTraversalKeepaliveDisabled:](v2, "setNatTraversalKeepaliveDisabled:", objc_msgSend(v55, "BOOLValue") ^ 1);

  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("NATTKeepAliveInterval"))
    && !NEGetValueWithType((const __CFDictionary *)v5, CFSTR("NATTKeepAliveInterval"), CFNUMBER_TYPE))
  {
    ne_log_obj();
    v90 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      goto LABEL_566;
    *(_DWORD *)buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    v251 = 1024;
    v252 = 1488;
    v253 = 2112;
    v254 = CFSTR("NATTKeepAliveInterval");
    v255 = 2048;
    v256 = CFNUMBER_TYPE;
    v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("NATTKeepAliveInterval")))
  {
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("NATTKeepAliveInterval"));
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    -[NEIKEv2SessionConfiguration setNatTraversalKeepaliveInterval:](v2, "setNatTraversalKeepaliveInterval:", objc_msgSend(v56, "unsignedLongValue"));

  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("NATTKeepAliveOffload"))
    && !NEGetValueWithType((const __CFDictionary *)v5, CFSTR("NATTKeepAliveOffload"), CFBOOLEAN_TYPE))
  {
    ne_log_obj();
    v90 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      goto LABEL_566;
    *(_DWORD *)buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    v251 = 1024;
    v252 = 1493;
    v253 = 2112;
    v254 = CFSTR("NATTKeepAliveOffload");
    v255 = 2048;
    v256 = CFBOOLEAN_TYPE;
    v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("NATTKeepAliveOffload")))
  {
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("NATTKeepAliveOffload"));
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    -[NEIKEv2SessionConfiguration setNatTraversalKeepaliveOffloadEnabled:](v2, "setNatTraversalKeepaliveOffloadEnabled:", objc_msgSend(v57, "BOOLValue"));

  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("NATTKeepAliveOffloadInterval"))
    && !NEGetValueWithType((const __CFDictionary *)v5, CFSTR("NATTKeepAliveOffloadInterval"), CFNUMBER_TYPE))
  {
    ne_log_obj();
    v90 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      goto LABEL_566;
    *(_DWORD *)buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    v251 = 1024;
    v252 = 1498;
    v253 = 2112;
    v254 = CFSTR("NATTKeepAliveOffloadInterval");
    v255 = 2048;
    v256 = CFNUMBER_TYPE;
    v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("NATTKeepAliveOffloadInterval")))
  {
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("NATTKeepAliveOffloadInterval"));
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    -[NEIKEv2SessionConfiguration setNatTraversalKeepaliveOffloadInterval:](v2, "setNatTraversalKeepaliveOffloadInterval:", objc_msgSend(v58, "unsignedLongValue"));

  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("RemoteCertificateAuthorityHash"))
    && !NEGetValueWithType((const __CFDictionary *)v5, CFSTR("RemoteCertificateAuthorityHash"), CFDATA_TYPE))
  {
    ne_log_obj();
    v90 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      goto LABEL_566;
    *(_DWORD *)buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    v251 = 1024;
    v252 = 1503;
    v253 = 2112;
    v254 = CFSTR("RemoteCertificateAuthorityHash");
    v255 = 2048;
    v256 = CFDATA_TYPE;
    v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("RemoteCertificateAuthorityHash")))
  {
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("RemoteCertificateAuthorityHash"));
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    -[NEIKEv2SessionConfiguration setRemoteCertificateAuthorityHash:](v2, "setRemoteCertificateAuthorityHash:", v59);

  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("LocalPrivateKeyRef")))
  {
    TypeID = SecKeyGetTypeID();
    if (!NEGetValueWithType((const __CFDictionary *)v5, CFSTR("LocalPrivateKeyRef"), TypeID))
    {
      ne_log_obj();
      v90 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
        goto LABEL_566;
      v96 = SecKeyGetTypeID();
      *(_DWORD *)buf = 136315906;
      v250 = "NEIPSecIKEValidateSessionDictionary";
      v251 = 1024;
      v252 = 1508;
      v253 = 2112;
      v254 = CFSTR("LocalPrivateKeyRef");
      v255 = 2048;
      v256 = v96;
      v95 = "%s:%d: type of value for key %@ != %lu";
      goto LABEL_565;
    }
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("LocalPrivateKeyRef")))
  {
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("LocalPrivateKeyRef"));
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    -[NEIKEv2SessionConfiguration setLocalPrivateKeyRef:](v2, "setLocalPrivateKeyRef:", v61);

  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("RemotePublicKeyRef")))
  {
    v62 = SecKeyGetTypeID();
    if (!NEGetValueWithType((const __CFDictionary *)v5, CFSTR("RemotePublicKeyRef"), v62))
    {
      ne_log_obj();
      v90 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
        goto LABEL_566;
      v97 = SecKeyGetTypeID();
      *(_DWORD *)buf = 136315906;
      v250 = "NEIPSecIKEValidateSessionDictionary";
      v251 = 1024;
      v252 = 1513;
      v253 = 2112;
      v254 = CFSTR("RemotePublicKeyRef");
      v255 = 2048;
      v256 = v97;
      v95 = "%s:%d: type of value for key %@ != %lu";
      goto LABEL_565;
    }
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("RemotePublicKeyRef")))
  {
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("RemotePublicKeyRef"));
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    -[NEIKEv2SessionConfiguration setRemotePublicKeyRef:](v2, "setRemotePublicKeyRef:", v63);

  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("TLSMinimumVersion"))
    && !NEGetValueWithType((const __CFDictionary *)v5, CFSTR("TLSMinimumVersion"), CFSTRING_TYPE))
  {
    ne_log_obj();
    v90 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      goto LABEL_566;
    *(_DWORD *)buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    v251 = 1024;
    v252 = 1518;
    v253 = 2112;
    v254 = CFSTR("TLSMinimumVersion");
    v255 = 2048;
    v256 = CFSTRING_TYPE;
    v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("TLSMinimumVersion")))
  {
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("TLSMinimumVersion"));
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    -[NEIKEv2SessionConfiguration setTlsMinimumVersion:](v2, "setTlsMinimumVersion:", v64);

  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("TLSMaximumVersion"))
    && !NEGetValueWithType((const __CFDictionary *)v5, CFSTR("TLSMaximumVersion"), CFSTRING_TYPE))
  {
    ne_log_obj();
    v90 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      goto LABEL_566;
    *(_DWORD *)buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    v251 = 1024;
    v252 = 1523;
    v253 = 2112;
    v254 = CFSTR("TLSMaximumVersion");
    v255 = 2048;
    v256 = CFSTRING_TYPE;
    v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("TLSMaximumVersion")))
  {
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("TLSMaximumVersion"));
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    -[NEIKEv2SessionConfiguration setTlsMaximumVersion:](v2, "setTlsMaximumVersion:", v65);

  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("DeadPeerDetectionEnabled"))
    && !NEGetValueWithType((const __CFDictionary *)v5, CFSTR("DeadPeerDetectionEnabled"), CFBOOLEAN_TYPE))
  {
    ne_log_obj();
    v90 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      goto LABEL_566;
    *(_DWORD *)buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    v251 = 1024;
    v252 = 1528;
    v253 = 2112;
    v254 = CFSTR("DeadPeerDetectionEnabled");
    v255 = 2048;
    v256 = CFBOOLEAN_TYPE;
    v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (!CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("DeadPeerDetectionEnabled")))
    goto LABEL_146;
  -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("DeadPeerDetectionEnabled"));
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  -[NEIKEv2SessionConfiguration setDeadPeerDetectionEnabled:](v2, "setDeadPeerDetectionEnabled:", objc_msgSend(v66, "BOOLValue"));

  if (!NEGetValueWithType((const __CFDictionary *)v5, CFSTR("DeadPeerDetectionInterval"), CFNUMBER_TYPE))
  {
    ne_log_obj();
    v90 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      goto LABEL_566;
    *(_DWORD *)buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    v251 = 1024;
    v252 = 1532;
    v253 = 2112;
    v254 = CFSTR("DeadPeerDetectionInterval");
    v255 = 2048;
    v256 = CFNUMBER_TYPE;
    v95 = "%s:%d: value for key %@ is missing or type != %lu";
    goto LABEL_565;
  }
  -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("DeadPeerDetectionInterval"));
  v67 = (void *)objc_claimAutoreleasedReturnValue();
  -[NEIKEv2SessionConfiguration setDeadPeerDetectionInterval:](v2, "setDeadPeerDetectionInterval:", objc_msgSend(v67, "unsignedLongValue"));

  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("DeadPeerDetectionRetryInterval"))
    && !NEGetValueWithType((const __CFDictionary *)v5, CFSTR("DeadPeerDetectionRetryInterval"), CFNUMBER_TYPE))
  {
    ne_log_obj();
    v90 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      goto LABEL_566;
    *(_DWORD *)buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    v251 = 1024;
    v252 = 1535;
    v253 = 2112;
    v254 = CFSTR("DeadPeerDetectionRetryInterval");
    v255 = 2048;
    v256 = CFNUMBER_TYPE;
    v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("DeadPeerDetectionRetryInterval")))
  {
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("DeadPeerDetectionRetryInterval"));
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    -[NEIKEv2SessionConfiguration setDeadPeerDetectionRetryIntervalMilliseconds:](v2, "setDeadPeerDetectionRetryIntervalMilliseconds:", 1000 * objc_msgSend(v68, "unsignedLongValue"));

  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("DeadPeerDetectionRetryIntervalMilliseconds"))
    && !NEGetValueWithType((const __CFDictionary *)v5, CFSTR("DeadPeerDetectionRetryIntervalMilliseconds"), CFNUMBER_TYPE))
  {
    ne_log_obj();
    v90 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      goto LABEL_566;
    *(_DWORD *)buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    v251 = 1024;
    v252 = 1540;
    v253 = 2112;
    v254 = CFSTR("DeadPeerDetectionRetryIntervalMilliseconds");
    v255 = 2048;
    v256 = CFNUMBER_TYPE;
    v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("DeadPeerDetectionRetryIntervalMilliseconds")))
  {
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("DeadPeerDetectionRetryIntervalMilliseconds"));
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    -[NEIKEv2SessionConfiguration setDeadPeerDetectionRetryIntervalMilliseconds:](v2, "setDeadPeerDetectionRetryIntervalMilliseconds:", objc_msgSend(v69, "unsignedLongValue"));

  }
  if (!NEGetValueWithType((const __CFDictionary *)v5, CFSTR("DeadPeerDetectionMaxRetries"), CFNUMBER_TYPE))
  {
    ne_log_obj();
    v90 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      goto LABEL_566;
    *(_DWORD *)buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    v251 = 1024;
    v252 = 1545;
    v253 = 2112;
    v254 = CFSTR("DeadPeerDetectionMaxRetries");
    v255 = 2048;
    v256 = CFNUMBER_TYPE;
    v95 = "%s:%d: value for key %@ is missing or type != %lu";
    goto LABEL_565;
  }
  -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("DeadPeerDetectionMaxRetries"));
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  -[NEIKEv2SessionConfiguration setDeadPeerDetectionMaxRetryCount:](v2, "setDeadPeerDetectionMaxRetryCount:", objc_msgSend(v70, "unsignedIntValue"));

  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("DeadPeerDetectionMaxRetriesBeforeReporting"))
    && !NEGetValueWithType((const __CFDictionary *)v5, CFSTR("DeadPeerDetectionMaxRetriesBeforeReporting"), CFNUMBER_TYPE))
  {
    ne_log_obj();
    v90 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      goto LABEL_566;
    *(_DWORD *)buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    v251 = 1024;
    v252 = 1548;
    v253 = 2112;
    v254 = CFSTR("DeadPeerDetectionMaxRetriesBeforeReporting");
    v255 = 2048;
    v256 = CFNUMBER_TYPE;
    v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("DeadPeerDetectionMaxRetriesBeforeReporting")))
  {
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("DeadPeerDetectionMaxRetriesBeforeReporting"));
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    -[NEIKEv2SessionConfiguration setDeadPeerDetectionMaxRetryCountBeforeReporting:](v2, "setDeadPeerDetectionMaxRetryCountBeforeReporting:", objc_msgSend(v71, "unsignedIntValue"));

  }
LABEL_146:
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("DeadPeerDetectionReceiveIntervalTriggerReporting"))
    && !NEGetValueWithType((const __CFDictionary *)v5, CFSTR("DeadPeerDetectionReceiveIntervalTriggerReporting"), CFNUMBER_TYPE))
  {
    ne_log_obj();
    v90 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      goto LABEL_566;
    *(_DWORD *)buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    v251 = 1024;
    v252 = 1554;
    v253 = 2112;
    v254 = CFSTR("DeadPeerDetectionReceiveIntervalTriggerReporting");
    v255 = 2048;
    v256 = CFNUMBER_TYPE;
    v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("DeadPeerDetectionReceiveIntervalTriggerReporting")))
  {
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("DeadPeerDetectionReceiveIntervalTriggerReporting"));
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    -[NEIKEv2SessionConfiguration setDeadPeerDetectionReceiveIntervalTriggerReporting:](v2, "setDeadPeerDetectionReceiveIntervalTriggerReporting:", objc_msgSend(v72, "unsignedLongValue"));

  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("DeadPeerDetectionReceiveMaxShortDPDBeforeReporting"))
    && !NEGetValueWithType((const __CFDictionary *)v5, CFSTR("DeadPeerDetectionReceiveMaxShortDPDBeforeReporting"), CFNUMBER_TYPE))
  {
    ne_log_obj();
    v90 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      goto LABEL_566;
    *(_DWORD *)buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    v251 = 1024;
    v252 = 1559;
    v253 = 2112;
    v254 = CFSTR("DeadPeerDetectionReceiveMaxShortDPDBeforeReporting");
    v255 = 2048;
    v256 = CFNUMBER_TYPE;
    v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("DeadPeerDetectionReceiveMaxShortDPDBeforeReporting")))
  {
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("DeadPeerDetectionReceiveMaxShortDPDBeforeReporting"));
    v73 = (void *)objc_claimAutoreleasedReturnValue();
    -[NEIKEv2SessionConfiguration setDeadPeerDetectionReceiveMaxShortDPDBeforeReporting:](v2, "setDeadPeerDetectionReceiveMaxShortDPDBeforeReporting:", objc_msgSend(v73, "unsignedIntValue"));

  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("IdleTimeoutEnabled"))
    && !NEGetValueWithType((const __CFDictionary *)v5, CFSTR("IdleTimeoutEnabled"), CFBOOLEAN_TYPE))
  {
    ne_log_obj();
    v90 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      goto LABEL_566;
    *(_DWORD *)buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    v251 = 1024;
    v252 = 1564;
    v253 = 2112;
    v254 = CFSTR("IdleTimeoutEnabled");
    v255 = 2048;
    v256 = CFBOOLEAN_TYPE;
    v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (!CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("IdleTimeoutEnabled")))
    goto LABEL_160;
  -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("IdleTimeoutEnabled"));
  v74 = (void *)objc_claimAutoreleasedReturnValue();
  -[NEIKEv2SessionConfiguration setIdleTimeoutEnabled:](v2, "setIdleTimeoutEnabled:", objc_msgSend(v74, "BOOLValue"));

  if (!NEGetValueWithType((const __CFDictionary *)v5, CFSTR("IdleTimeoutSeconds"), CFNUMBER_TYPE))
  {
    ne_log_obj();
    v90 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      goto LABEL_566;
    *(_DWORD *)buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    v251 = 1024;
    v252 = 1567;
    v253 = 2112;
    v254 = CFSTR("IdleTimeoutSeconds");
    v255 = 2048;
    v256 = CFNUMBER_TYPE;
    v95 = "%s:%d: value for key %@ is missing or type != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("IdleTimeoutSeconds")))
  {
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("IdleTimeoutSeconds"));
    v75 = (void *)objc_claimAutoreleasedReturnValue();
    -[NEIKEv2SessionConfiguration setIdleTimeoutSeconds:](v2, "setIdleTimeoutSeconds:", objc_msgSend(v75, "unsignedLongValue"));

  }
LABEL_160:
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("InitialContact"))
    && !NEGetValueWithType((const __CFDictionary *)v5, CFSTR("InitialContact"), CFBOOLEAN_TYPE))
  {
    ne_log_obj();
    v90 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      goto LABEL_566;
    *(_DWORD *)buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    v251 = 1024;
    v252 = 1573;
    v253 = 2112;
    v254 = CFSTR("InitialContact");
    v255 = 2048;
    v256 = CFBOOLEAN_TYPE;
    v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("InitialContact")))
  {
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("InitialContact"));
    v76 = (void *)objc_claimAutoreleasedReturnValue();
    -[NEIKEv2SessionConfiguration setInitialContactDisabled:](v2, "setInitialContactDisabled:", objc_msgSend(v76, "BOOLValue") ^ 1);

  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("MOBIKESupported"))
    && !NEGetValueWithType((const __CFDictionary *)v5, CFSTR("MOBIKESupported"), CFBOOLEAN_TYPE))
  {
    ne_log_obj();
    v90 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      goto LABEL_566;
    *(_DWORD *)buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    v251 = 1024;
    v252 = 1578;
    v253 = 2112;
    v254 = CFSTR("MOBIKESupported");
    v255 = 2048;
    v256 = CFBOOLEAN_TYPE;
    v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("MOBIKESupported")))
  {
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("MOBIKESupported"));
    v77 = (void *)objc_claimAutoreleasedReturnValue();
    -[NEIKEv2SessionConfiguration setNegotiateMOBIKE:](v2, "setNegotiateMOBIKE:", objc_msgSend(v77, "BOOLValue"));

  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("CertificateRevocationCheckEnable"))
    && !NEGetValueWithType((const __CFDictionary *)v5, CFSTR("CertificateRevocationCheckEnable"), CFBOOLEAN_TYPE))
  {
    ne_log_obj();
    v90 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      goto LABEL_566;
    *(_DWORD *)buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    v251 = 1024;
    v252 = 1583;
    v253 = 2112;
    v254 = CFSTR("CertificateRevocationCheckEnable");
    v255 = 2048;
    v256 = CFBOOLEAN_TYPE;
    v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("CertificateRevocationCheckEnable")))
  {
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("CertificateRevocationCheckEnable"));
    v78 = (void *)objc_claimAutoreleasedReturnValue();
    -[NEIKEv2SessionConfiguration setEnableCertificateRevocationCheck:](v2, "setEnableCertificateRevocationCheck:", objc_msgSend(v78, "BOOLValue"));

  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("CertificateStrictRevocationCheck"))
    && !NEGetValueWithType((const __CFDictionary *)v5, CFSTR("CertificateStrictRevocationCheck"), CFBOOLEAN_TYPE))
  {
    ne_log_obj();
    v90 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      goto LABEL_566;
    *(_DWORD *)buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    v251 = 1024;
    v252 = 1588;
    v253 = 2112;
    v254 = CFSTR("CertificateStrictRevocationCheck");
    v255 = 2048;
    v256 = CFBOOLEAN_TYPE;
    v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("CertificateStrictRevocationCheck")))
  {
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("CertificateStrictRevocationCheck"));
    v79 = (void *)objc_claimAutoreleasedReturnValue();
    -[NEIKEv2SessionConfiguration setStrictCertificateRevocationCheck:](v2, "setStrictCertificateRevocationCheck:", objc_msgSend(v79, "BOOLValue"));

  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("ValidateRemoteCertificate"))
    && !NEGetValueWithType((const __CFDictionary *)v5, CFSTR("ValidateRemoteCertificate"), CFBOOLEAN_TYPE))
  {
    ne_log_obj();
    v90 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      goto LABEL_566;
    *(_DWORD *)buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    v251 = 1024;
    v252 = 1593;
    v253 = 2112;
    v254 = CFSTR("ValidateRemoteCertificate");
    v255 = 2048;
    v256 = CFBOOLEAN_TYPE;
    v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("ValidateRemoteCertificate")))
  {
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("ValidateRemoteCertificate"));
    v80 = (void *)objc_claimAutoreleasedReturnValue();
    -[NEIKEv2SessionConfiguration setDisableRemoteCertificateValidation:](v2, "setDisableRemoteCertificateValidation:", objc_msgSend(v80, "BOOLValue") ^ 1);

  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("BlackHoleDetectionEnabled"))
    && !NEGetValueWithType((const __CFDictionary *)v5, CFSTR("BlackHoleDetectionEnabled"), CFBOOLEAN_TYPE))
  {
    ne_log_obj();
    v90 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      goto LABEL_566;
    *(_DWORD *)buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    v251 = 1024;
    v252 = 1598;
    v253 = 2112;
    v254 = CFSTR("BlackHoleDetectionEnabled");
    v255 = 2048;
    v256 = CFBOOLEAN_TYPE;
    v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("BlackHoleDetectionEnabled")))
  {
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("BlackHoleDetectionEnabled"));
    v81 = (void *)objc_claimAutoreleasedReturnValue();
    -[NEIKEv2SessionConfiguration setBlackholeDetectionEnabled:](v2, "setBlackholeDetectionEnabled:", objc_msgSend(v81, "BOOLValue"));

  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("Username"))
    && !NEGetValueWithType((const __CFDictionary *)v5, CFSTR("Username"), CFSTRING_TYPE))
  {
    ne_log_obj();
    v90 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      goto LABEL_566;
    *(_DWORD *)buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    v251 = 1024;
    v252 = 1603;
    v253 = 2112;
    v254 = CFSTR("Username");
    v255 = 2048;
    v256 = CFSTRING_TYPE;
    v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("Username")))
  {
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("Username"));
    v82 = (void *)objc_claimAutoreleasedReturnValue();
    -[NEIKEv2SessionConfiguration setUsername:](v2, "setUsername:", v82);

  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("Password"))
    && !NEGetValueWithType((const __CFDictionary *)v5, CFSTR("Password"), CFSTRING_TYPE))
  {
    ne_log_obj();
    v90 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      goto LABEL_566;
    *(_DWORD *)buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    v251 = 1024;
    v252 = 1608;
    v253 = 2112;
    v254 = CFSTR("Password");
    v255 = 2048;
    v256 = CFSTRING_TYPE;
    v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("Password")))
  {
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("Password"));
    v83 = (void *)objc_claimAutoreleasedReturnValue();
    -[NEIKEv2SessionConfiguration setPassword:](v2, "setPassword:", v83);

  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("PasswordReference"))
    && !NEGetValueWithType((const __CFDictionary *)v5, CFSTR("PasswordReference"), CFDATA_TYPE))
  {
    ne_log_obj();
    v90 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      goto LABEL_566;
    *(_DWORD *)buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    v251 = 1024;
    v252 = 1613;
    v253 = 2112;
    v254 = CFSTR("PasswordReference");
    v255 = 2048;
    v256 = CFDATA_TYPE;
    v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("PasswordReference")))
  {
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("PasswordReference"));
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    -[NEIKEv2SessionConfiguration setPasswordReference:](v2, "setPasswordReference:", v84);

  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("RemoteCertificateHostname"))
    && !NEGetValueWithType((const __CFDictionary *)v5, CFSTR("RemoteCertificateHostname"), CFSTRING_TYPE))
  {
    ne_log_obj();
    v90 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      goto LABEL_566;
    *(_DWORD *)buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    v251 = 1024;
    v252 = 1618;
    v253 = 2112;
    v254 = CFSTR("RemoteCertificateHostname");
    v255 = 2048;
    v256 = CFSTRING_TYPE;
    v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("RemoteCertificateHostname")))
  {
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("RemoteCertificateHostname"));
    v85 = (void *)objc_claimAutoreleasedReturnValue();
    -[NEIKEv2SessionConfiguration setRemoteCertificateHostname:](v2, "setRemoteCertificateHostname:", v85);

  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("RemoteCertificateAuthorityName"))
    && !NEGetValueWithType((const __CFDictionary *)v5, CFSTR("RemoteCertificateAuthorityName"), CFSTRING_TYPE))
  {
    ne_log_obj();
    v90 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      goto LABEL_566;
    *(_DWORD *)buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    v251 = 1024;
    v252 = 1623;
    v253 = 2112;
    v254 = CFSTR("RemoteCertificateAuthorityName");
    v255 = 2048;
    v256 = CFSTRING_TYPE;
    v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("RemoteCertificateAuthorityName")))
  {
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("RemoteCertificateAuthorityName"));
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    -[NEIKEv2SessionConfiguration setRemoteCertificateAuthorityName:](v2, "setRemoteCertificateAuthorityName:", v86);

  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("RemoteCertificateAuthorityReferences"))
    && !NEGetValueWithType((const __CFDictionary *)v5, CFSTR("RemoteCertificateAuthorityReferences"), CFARRAY_TYPE))
  {
    ne_log_obj();
    v90 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      goto LABEL_566;
    *(_DWORD *)buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    v251 = 1024;
    v252 = 1628;
    v253 = 2112;
    v254 = CFSTR("RemoteCertificateAuthorityReferences");
    v255 = 2048;
    v256 = CFARRAY_TYPE;
    v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("RemoteCertificateAuthorityReferences")))
  {
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("RemoteCertificateAuthorityReferences"));
    v87 = (void *)objc_claimAutoreleasedReturnValue();
    -[NEIKEv2SessionConfiguration setRemoteCertificateAuthorityReferences:](v2, "setRemoteCertificateAuthorityReferences:", v87);

  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("IMEI"))
    && !NEGetValueWithType((const __CFDictionary *)v5, CFSTR("IMEI"), CFSTRING_TYPE))
  {
    ne_log_obj();
    v90 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      goto LABEL_566;
    *(_DWORD *)buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    v251 = 1024;
    v252 = 1633;
    v253 = 2112;
    v254 = CFSTR("IMEI");
    v255 = 2048;
    v256 = CFSTRING_TYPE;
    v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("IMEI")))
  {
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("IMEI"));
    v88 = (void *)objc_claimAutoreleasedReturnValue();
    -[NEIKEv2SessionConfiguration setIMEI:](v2, "setIMEI:", v88);

  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("IMEISV"))
    && !NEGetValueWithType((const __CFDictionary *)v5, CFSTR("IMEISV"), CFSTRING_TYPE))
  {
    ne_log_obj();
    v90 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      goto LABEL_566;
    *(_DWORD *)buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    v251 = 1024;
    v252 = 1638;
    v253 = 2112;
    v254 = CFSTR("IMEISV");
    v255 = 2048;
    v256 = CFSTRING_TYPE;
    v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("IMEISV")))
  {
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("IMEISV"));
    v89 = (void *)objc_claimAutoreleasedReturnValue();
    -[NEIKEv2SessionConfiguration setIMEISV:](v2, "setIMEISV:", v89);

  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("AuthenticationMethod"))
    && !NEGetValueWithType((const __CFDictionary *)v5, CFSTR("AuthenticationMethod"), CFSTRING_TYPE))
  {
    ne_log_obj();
    v90 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      goto LABEL_566;
    *(_DWORD *)buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    v251 = 1024;
    v252 = 1643;
    v253 = 2112;
    v254 = CFSTR("AuthenticationMethod");
    v255 = 2048;
    v256 = CFSTRING_TYPE;
    v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("AuthenticationMethod")))
  {
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("AuthenticationMethod"));
    v90 = objc_claimAutoreleasedReturnValue();
    v91 = NEIPsecIKEGetAuthProcotol(v90);
    if (!v91)
    {
      ne_log_obj();
      v94 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v250 = "NEIPSecIKEValidateSessionDictionary";
        v251 = 1024;
        v252 = 1648;
        v253 = 2112;
        v254 = (const __CFString *)v90;
        goto LABEL_656;
      }
LABEL_654:

      goto LABEL_566;
    }
    v92 = (void *)v91;
    -[NEIKEv2SessionConfiguration setAuthenticationProtocol:](v2, "setAuthenticationProtocol:", v91);

  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("RemoteAuthenticationMethod"))
    && !NEGetValueWithType((const __CFDictionary *)v5, CFSTR("RemoteAuthenticationMethod"), CFSTRING_TYPE))
  {
    ne_log_obj();
    v90 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      goto LABEL_566;
    *(_DWORD *)buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    v251 = 1024;
    v252 = 1654;
    v253 = 2112;
    v254 = CFSTR("RemoteAuthenticationMethod");
    v255 = 2048;
    v256 = CFSTRING_TYPE;
    v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("RemoteAuthenticationMethod")))
  {
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("RemoteAuthenticationMethod"));
    v90 = objc_claimAutoreleasedReturnValue();
    v93 = NEIPsecIKEGetAuthProcotol(v90);
    if (!v93)
    {
      ne_log_obj();
      v94 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v250 = "NEIPSecIKEValidateSessionDictionary";
        v251 = 1024;
        v252 = 1659;
        v253 = 2112;
        v254 = (const __CFString *)v90;
LABEL_656:
        _os_log_error_impl(&dword_19BD16000, v94, OS_LOG_TYPE_ERROR, "%s%d: \"%@\" is not a recognized authentication method", buf, 0x1Cu);
        goto LABEL_654;
      }
      goto LABEL_654;
    }
    goto LABEL_309;
  }
  -[NEIKEv2SessionConfiguration authenticationProtocol](v2, "authenticationProtocol");
  v98 = (void *)objc_claimAutoreleasedReturnValue();

  if (v98)
  {
    -[NEIKEv2SessionConfiguration authenticationProtocol](v2, "authenticationProtocol");
    v90 = objc_claimAutoreleasedReturnValue();
    v93 = -[NSObject copy](v90, "copy");
LABEL_309:
    v99 = (void *)v93;
    -[NEIKEv2SessionConfiguration setRemoteAuthentication:](v2, "setRemoteAuthentication:", v93);

  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("PDUSessionID"))
    && !NEGetValueWithType((const __CFDictionary *)v5, CFSTR("PDUSessionID"), CFNUMBER_TYPE))
  {
    ne_log_obj();
    v90 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      goto LABEL_566;
    *(_DWORD *)buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    v251 = 1024;
    v252 = 1667;
    v253 = 2112;
    v254 = CFSTR("PDUSessionID");
    v255 = 2048;
    v256 = CFNUMBER_TYPE;
    v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("PDUSessionID")))
  {
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("PDUSessionID"));
    v100 = (void *)objc_claimAutoreleasedReturnValue();
    -[NEIKEv2SessionConfiguration setPduSessionID:](v2, "setPduSessionID:", v100);

  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("ConfigurationRequest")))
  {
    -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("ConfigurationRequest"));
    v101 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();

    if ((isKindOfClass & 1) != 0)
    {
      newValue = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("ConfigurationRequest"));
      v103 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      obj = v103;
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v239 = 0u;
        v240 = 0u;
        v241 = 0u;
        v242 = 0u;
        v104 = v103;
        v105 = objc_msgSend(v104, "countByEnumeratingWithState:objects:count:", &v239, v248, 16);
        if (v105)
        {
          v106 = v105;
          v107 = *(_QWORD *)v240;
          do
          {
            for (i = 0; i != v106; ++i)
            {
              if (*(_QWORD *)v240 != v107)
                objc_enumerationMutation(v104);
              v109 = *(void **)(*((_QWORD *)&v239 + 1) + 8 * i);
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                v110 = objc_msgSend(v109, "isEqualToString:", CFSTR("AssignedIPv4Address"));
                v111 = off_1E3CBBA60;
                if ((v110 & 1) != 0)
                  goto LABEL_338;
                v112 = objc_msgSend(v109, "isEqualToString:", CFSTR("AssignedIPv4DNS"));
                v111 = off_1E3CBBA70;
                if ((v112 & 1) != 0)
                  goto LABEL_338;
                v113 = objc_msgSend(v109, "isEqualToString:", CFSTR("AssignedIPv4DHCP"));
                v111 = off_1E3CBBA68;
                if ((v113 & 1) != 0)
                  goto LABEL_338;
                v114 = objc_msgSend(v109, "isEqualToString:", CFSTR("AssignedIPv4NetMask"));
                v111 = off_1E3CBBA78;
                if ((v114 & 1) != 0)
                  goto LABEL_338;
                v115 = objc_msgSend(v109, "isEqualToString:", CFSTR("AssignedIPv4Subnet"));
                v111 = off_1E3CBBA88;
                if ((v115 & 1) != 0)
                  goto LABEL_338;
                v116 = objc_msgSend(v109, "isEqualToString:", CFSTR("AssignedIPv6Address"));
                v111 = off_1E3CBBA90;
                if ((v116 & 1) != 0)
                  goto LABEL_338;
                v117 = objc_msgSend(v109, "isEqualToString:", CFSTR("AssignedIPv6DNS"));
                v111 = off_1E3CBBAA0;
                if ((v117 & 1) != 0)
                  goto LABEL_338;
                v118 = objc_msgSend(v109, "isEqualToString:", CFSTR("AssignedIPv6DHCP"));
                v111 = off_1E3CBBA98;
                if ((v118 & 1) != 0)
                  goto LABEL_338;
                v119 = objc_msgSend(v109, "isEqualToString:", CFSTR("AssignedIPv6Subnet"));
                v111 = off_1E3CBBAB0;
                if ((v119 & 1) != 0)
                  goto LABEL_338;
                v120 = objc_msgSend(v109, "isEqualToString:", CFSTR("AssignedAppVersion"));
                v111 = off_1E3CBB920;
                if ((v120 & 1) != 0)
                  goto LABEL_338;
                v121 = objc_msgSend(v109, "isEqualToString:", CFSTR("AssignedIPv6PCSCF"));
                v111 = off_1E3CBBAA8;
                if ((v121 & 1) != 0)
                  goto LABEL_338;
                v122 = objc_msgSend(v109, "isEqualToString:", CFSTR("AssignedIPv6PCSCF_STD"));
                v111 = off_1E3CBBAA8;
                if ((v122 & 1) != 0
                  || (v123 = objc_msgSend(v109, "isEqualToString:", CFSTR("AssignedIPv4PCSCF_STD")),
                      v111 = off_1E3CBBA80,
                      (v123 & 1) != 0)
                  || (v124 = objc_msgSend(v109, "isEqualToString:", CFSTR("AssignedDNSDomain")),
                      v111 = off_1E3CBB998,
                      (v124 & 1) != 0)
                  || (v125 = objc_msgSend(v109, "isEqualToString:", CFSTR("AssignedAttributes")),
                      v111 = off_1E3CBBC20,
                      v125))
                {
LABEL_338:
                  v126 = (void *)objc_msgSend(objc_alloc(*v111), "initEmptyRequest");
                  objc_msgSend(newValue, "addObject:", v126);

                }
              }
            }
            v106 = objc_msgSend(v104, "countByEnumeratingWithState:objects:count:", &v239, v248, 16);
          }
          while (v106);
        }
LABEL_424:

        goto LABEL_425;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
LABEL_425:
        v140 = objc_alloc_init(NEIKEv2ConfigurationMessage);
        v142 = v140;
        if (v140)
        {
          v140->_configurationType = 1;
          objc_setProperty_atomic(v140, v141, newValue, 16);
        }
        -[NEIKEv2SessionConfiguration setConfigurationRequest:](v2, "setConfigurationRequest:", v142);

        goto LABEL_428;
      }
      v235 = 0u;
      v236 = 0u;
      v237 = 0u;
      v238 = 0u;
      v127 = v103;
      v128 = objc_msgSend(v127, "countByEnumeratingWithState:objects:count:", &v235, v247, 16);
      if (!v128)
        goto LABEL_424;
      v129 = v128;
      v217 = *(_QWORD *)v236;
LABEL_349:
      v130 = 0;
      while (1)
      {
        if (*(_QWORD *)v236 != v217)
          objc_enumerationMutation(v127);
        v131 = *(void **)(*((_QWORD *)&v235 + 1) + 8 * v130);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          goto LABEL_394;
        objc_msgSend(v127, "objectForKeyedSubscript:", v131);
        v132 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v131, "isEqualToString:", CFSTR("AssignedIPv4Address")))
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0 || !objc_msgSend(v132, "length"))
          {
            v135 = NEIKEv2IPv4AddressAttribute;
            goto LABEL_390;
          }
          objc_msgSend(MEMORY[0x1E0CCEC58], "endpointWithHostname:port:", v132, CFSTR("0"));
          v133 = (void *)objc_claimAutoreleasedReturnValue();
          v134 = NEIKEv2IPv4AddressAttribute;
        }
        else if (objc_msgSend(v131, "isEqualToString:", CFSTR("AssignedIPv4DNS")))
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0 || !objc_msgSend(v132, "length"))
          {
            v135 = NEIKEv2IPv4DNSAttribute;
            goto LABEL_390;
          }
          objc_msgSend(MEMORY[0x1E0CCEC58], "endpointWithHostname:port:", v132, CFSTR("0"));
          v133 = (void *)objc_claimAutoreleasedReturnValue();
          v134 = NEIKEv2IPv4DNSAttribute;
        }
        else if (objc_msgSend(v131, "isEqualToString:", CFSTR("AssignedIPv4DHCP")))
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0 || !objc_msgSend(v132, "length"))
          {
            v135 = NEIKEv2IPv4DHCPAttribute;
            goto LABEL_390;
          }
          objc_msgSend(MEMORY[0x1E0CCEC58], "endpointWithHostname:port:", v132, CFSTR("0"));
          v133 = (void *)objc_claimAutoreleasedReturnValue();
          v134 = NEIKEv2IPv4DHCPAttribute;
        }
        else if (objc_msgSend(v131, "isEqualToString:", CFSTR("AssignedIPv4NetMask")))
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0 || !objc_msgSend(v132, "length"))
          {
            v135 = NEIKEv2IPv4NetmaskAttribute;
            goto LABEL_390;
          }
          objc_msgSend(MEMORY[0x1E0CCEC58], "endpointWithHostname:port:", v132, CFSTR("0"));
          v133 = (void *)objc_claimAutoreleasedReturnValue();
          v134 = NEIKEv2IPv4NetmaskAttribute;
        }
        else
        {
          if (objc_msgSend(v131, "isEqualToString:", CFSTR("AssignedIPv4Subnet")))
          {
            v135 = NEIKEv2IPv4SubnetAttribute;
            goto LABEL_390;
          }
          if (objc_msgSend(v131, "isEqualToString:", CFSTR("AssignedIPv6Address")))
          {
            v135 = NEIKEv2IPv6AddressAttribute;
            goto LABEL_390;
          }
          if (objc_msgSend(v131, "isEqualToString:", CFSTR("AssignedIPv6DNS")))
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0 || !objc_msgSend(v132, "length"))
            {
              v135 = NEIKEv2IPv6DNSAttribute;
              goto LABEL_390;
            }
            objc_msgSend(MEMORY[0x1E0CCEC58], "endpointWithHostname:port:", v132, CFSTR("0"));
            v133 = (void *)objc_claimAutoreleasedReturnValue();
            v134 = NEIKEv2IPv6DNSAttribute;
          }
          else if (objc_msgSend(v131, "isEqualToString:", CFSTR("AssignedIPv6DHCP")))
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0 || !objc_msgSend(v132, "length"))
            {
              v135 = NEIKEv2IPv6DHCPAttribute;
              goto LABEL_390;
            }
            objc_msgSend(MEMORY[0x1E0CCEC58], "endpointWithHostname:port:", v132, CFSTR("0"));
            v133 = (void *)objc_claimAutoreleasedReturnValue();
            v134 = NEIKEv2IPv6DHCPAttribute;
          }
          else
          {
            if (objc_msgSend(v131, "isEqualToString:", CFSTR("AssignedIPv6Subnet")))
            {
              v135 = NEIKEv2IPv6SubnetAttribute;
              goto LABEL_390;
            }
            if (objc_msgSend(v131, "isEqualToString:", CFSTR("AssignedAppVersion")))
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend(v132, "length"))
              {
                v138 = NEIKEv2AppVersionAttribute;
                goto LABEL_400;
              }
              v135 = NEIKEv2AppVersionAttribute;
LABEL_390:
              v137 = objc_msgSend([v135 alloc], "initEmptyRequest");
              goto LABEL_391;
            }
            if ((objc_msgSend(v131, "isEqualToString:", CFSTR("AssignedIPv6PCSCF")) & 1) != 0
              || objc_msgSend(v131, "isEqualToString:", CFSTR("AssignedIPv6PCSCF_STD")))
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0 || !objc_msgSend(v132, "length"))
              {
                v135 = NEIKEv2IPv6PCSCFAttribute;
                goto LABEL_390;
              }
              objc_msgSend(MEMORY[0x1E0CCEC58], "endpointWithHostname:port:", v132, CFSTR("0"));
              v133 = (void *)objc_claimAutoreleasedReturnValue();
              v134 = NEIKEv2IPv6PCSCFAttribute;
            }
            else
            {
              if (!objc_msgSend(v131, "isEqualToString:", CFSTR("AssignedIPv4PCSCF_STD")))
              {
                if (objc_msgSend(v131, "isEqualToString:", CFSTR("AssignedDNSDomain")))
                {
                  objc_opt_class();
                  if ((objc_opt_isKindOfClass() & 1) == 0 || !objc_msgSend(v132, "length"))
                  {
                    v135 = NEIKEv2DNSDomainAttribute;
                    goto LABEL_390;
                  }
                  v138 = NEIKEv2DNSDomainAttribute;
                }
                else
                {
                  if (!objc_msgSend(v131, "isEqualToString:", CFSTR("AssignedAttributes")))
                    goto LABEL_393;
                  objc_opt_class();
                  if ((objc_opt_isKindOfClass() & 1) == 0 || !objc_msgSend(v132, "length"))
                  {
                    v135 = NEIKEv2SupportedAttribute;
                    goto LABEL_390;
                  }
                  v138 = NEIKEv2SupportedAttribute;
                }
LABEL_400:
                v137 = objc_msgSend([v138 alloc], "initWithStringValue:", v132);
LABEL_391:
                v133 = (void *)v137;
                objc_msgSend(newValue, "addObject:", v137);
                goto LABEL_392;
              }
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0 || !objc_msgSend(v132, "length"))
              {
                v135 = NEIKEv2IPv4PCSCFAttribute;
                goto LABEL_390;
              }
              objc_msgSend(MEMORY[0x1E0CCEC58], "endpointWithHostname:port:", v132, CFSTR("0"));
              v133 = (void *)objc_claimAutoreleasedReturnValue();
              v134 = NEIKEv2IPv4PCSCFAttribute;
            }
          }
        }
        v136 = (void *)objc_msgSend([v134 alloc], "initWithAddress:", v133);
        objc_msgSend(newValue, "addObject:", v136);

LABEL_392:
LABEL_393:

LABEL_394:
        if (v129 == ++v130)
        {
          v139 = objc_msgSend(v127, "countByEnumeratingWithState:objects:count:", &v235, v247, 16);
          v129 = v139;
          if (!v139)
            goto LABEL_424;
          goto LABEL_349;
        }
      }
    }
  }
LABEL_428:
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("ConfigurationAttributeRequest"))
    && !NEGetValueWithType((const __CFDictionary *)v5, CFSTR("ConfigurationAttributeRequest"), CFARRAY_TYPE))
  {
    ne_log_obj();
    v90 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v250 = "NEIPSecIKEValidateSessionDictionary";
      v251 = 1024;
      v252 = 1808;
      v253 = 2112;
      v254 = CFSTR("ConfigurationAttributeRequest");
      v255 = 2048;
      v256 = CFARRAY_TYPE;
      v95 = "%s:%d: type of value for key %@ != %lu";
      goto LABEL_565;
    }
LABEL_566:

    goto LABEL_567;
  }
  if (!CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("ConfigurationAttributeRequest")))
    goto LABEL_535;
  v214 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("ConfigurationAttributeRequest"));
  v231 = 0u;
  v232 = 0u;
  v233 = 0u;
  v234 = 0u;
  obja = (id)objc_claimAutoreleasedReturnValue();
  newValuea = (id)objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v231, v246, 16);
  if (!newValuea)
    goto LABEL_532;
  v218 = *(_QWORD *)v232;
  do
  {
    v143 = 0;
    do
    {
      if (*(_QWORD *)v232 != v218)
        objc_enumerationMutation(obja);
      v144 = *(void **)(*((_QWORD *)&v231 + 1) + 8 * (_QWORD)v143);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        objc_msgSend(v144, "objectForKeyedSubscript:", CFSTR("Name"));
        v145 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v144, "objectForKeyedSubscript:", CFSTR("Identifier"));
        v146 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v144, "objectForKeyedSubscript:", CFSTR("Type"));
        v147 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            if (objc_msgSend(v147, "isEqualToString:", CFSTR("String")))
            {
              objc_msgSend(v144, "objectForKeyedSubscript:", CFSTR("String"));
              v148 = (void *)objc_claimAutoreleasedReturnValue();
              v149 = -[NEIKEv2StringAttribute initCustomWithAttributeType:attributeName:stringValue:]([NEIKEv2StringAttribute alloc], "initCustomWithAttributeType:attributeName:stringValue:", objc_msgSend(v146, "integerValue"), v145, v148);
              goto LABEL_477;
            }
            if (objc_msgSend(v147, "isEqualToString:", CFSTR("IPv4Address")))
            {
              objc_msgSend(v144, "objectForKeyedSubscript:", CFSTR("Address"));
              v148 = (void *)objc_claimAutoreleasedReturnValue();
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CCEC58], "endpointWithHostname:port:", v148, CFSTR("0"));
                v150 = (__CFString *)objc_claimAutoreleasedReturnValue();
              }
              else
              {
                v150 = 0;
              }
              v153 = -[NEIKEv2AddressAttribute initCustomWithAttributeType:attributeName:addressValue:]([NEIKEv2IPv4AddressAttribute alloc], "initCustomWithAttributeType:attributeName:addressValue:", objc_msgSend(v146, "integerValue"), v145, v150);
              goto LABEL_459;
            }
            if (objc_msgSend(v147, "isEqualToString:", CFSTR("IPv6Address")))
            {
              objc_msgSend(v144, "objectForKeyedSubscript:", CFSTR("Address"));
              v148 = (void *)objc_claimAutoreleasedReturnValue();
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CCEC58], "endpointWithHostname:port:", v148, CFSTR("0"));
                v150 = (__CFString *)objc_claimAutoreleasedReturnValue();
              }
              else
              {
                v150 = 0;
              }
              v153 = -[NEIKEv2SubnetAttribute initCustomWithAttributeType:attributeName:addressValue:prefix:]([NEIKEv2IPv6AddressAttribute alloc], "initCustomWithAttributeType:attributeName:addressValue:prefix:", objc_msgSend(v146, "integerValue"), v145, v150, 0);
LABEL_459:
              v154 = v153;
              objc_msgSend(v214, "addObject:", v153);
LABEL_460:

LABEL_478:
LABEL_479:

              goto LABEL_480;
            }
            if (objc_msgSend(v147, "isEqualToString:", CFSTR("IPv4Subnet")))
            {
              objc_msgSend(v144, "objectForKeyedSubscript:", CFSTR("Address"));
              v148 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v144, "objectForKeyedSubscript:", CFSTR("Netmask"));
              v150 = (__CFString *)objc_claimAutoreleasedReturnValue();
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CCEC58], "endpointWithHostname:port:", v148, CFSTR("0"));
                v212 = (void *)objc_claimAutoreleasedReturnValue();
              }
              else
              {
                v212 = 0;
              }
              v210 = [NEIKEv2IPv4SubnetAttribute alloc];
              v159 = objc_msgSend(v146, "integerValue");
              v160 = NEGetPrefixForIPv4NetmaskString(v150);
            }
            else
            {
              if (!objc_msgSend(v147, "isEqualToString:", CFSTR("IPv6Subnet")))
                goto LABEL_479;
              objc_msgSend(v144, "objectForKeyedSubscript:", CFSTR("Address"));
              v148 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v144, "objectForKeyedSubscript:", CFSTR("Netmask"));
              v150 = (__CFString *)objc_claimAutoreleasedReturnValue();
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(MEMORY[0x1E0CCEC58], "endpointWithHostname:port:", v148, CFSTR("0"));
                v212 = (void *)objc_claimAutoreleasedReturnValue();
              }
              else
              {
                v212 = 0;
              }
              v210 = [NEIKEv2IPv6SubnetAttribute alloc];
              v159 = objc_msgSend(v146, "integerValue");
              v160 = NEGetPrefixForIPv6NetmaskString(v150);
            }
            v161 = -[NEIKEv2SubnetAttribute initCustomWithAttributeType:attributeName:addressValue:prefix:](v210, "initCustomWithAttributeType:attributeName:addressValue:prefix:", v159, v145, v212, v160);
            objc_msgSend(v214, "addObject:", v161);

            goto LABEL_478;
          }
        }
        if (objc_msgSend(v145, "isEqualToString:", CFSTR("AssignedIPv4Address")))
        {
          objc_msgSend(v144, "objectForKeyedSubscript:", CFSTR("Address"));
          v148 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(MEMORY[0x1E0CCEC58], "endpointWithHostname:port:", v148, CFSTR("0"));
            v150 = (__CFString *)objc_claimAutoreleasedReturnValue();
            v151 = NEIKEv2IPv4AddressAttribute;
LABEL_458:
            v153 = (id)objc_msgSend([v151 alloc], "initWithAddress:", v150);
            goto LABEL_459;
          }
          v152 = NEIKEv2IPv4AddressAttribute;
          goto LABEL_475;
        }
        if (objc_msgSend(v145, "isEqualToString:", CFSTR("AssignedIPv4DNS")))
        {
          objc_msgSend(v144, "objectForKeyedSubscript:", CFSTR("Address"));
          v148 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(MEMORY[0x1E0CCEC58], "endpointWithHostname:port:", v148, CFSTR("0"));
            v150 = (__CFString *)objc_claimAutoreleasedReturnValue();
            v151 = NEIKEv2IPv4DNSAttribute;
            goto LABEL_458;
          }
          v152 = NEIKEv2IPv4DNSAttribute;
LABEL_475:
          v156 = [v152 alloc];
LABEL_476:
          v149 = (__CFString *)objc_msgSend(v156, "initEmptyRequest");
          goto LABEL_477;
        }
        if (objc_msgSend(v145, "isEqualToString:", CFSTR("AssignedIPv4DHCP")))
        {
          objc_msgSend(v144, "objectForKeyedSubscript:", CFSTR("Address"));
          v148 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(MEMORY[0x1E0CCEC58], "endpointWithHostname:port:", v148, CFSTR("0"));
            v150 = (__CFString *)objc_claimAutoreleasedReturnValue();
            v151 = NEIKEv2IPv4DHCPAttribute;
            goto LABEL_458;
          }
          v152 = NEIKEv2IPv4DHCPAttribute;
          goto LABEL_475;
        }
        if (objc_msgSend(v145, "isEqualToString:", CFSTR("AssignedIPv4NetMask")))
        {
          objc_msgSend(v144, "objectForKeyedSubscript:", CFSTR("Address"));
          v148 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(MEMORY[0x1E0CCEC58], "endpointWithHostname:port:", v148, CFSTR("0"));
            v150 = (__CFString *)objc_claimAutoreleasedReturnValue();
            v151 = NEIKEv2IPv4NetmaskAttribute;
            goto LABEL_458;
          }
          v152 = NEIKEv2IPv4NetmaskAttribute;
          goto LABEL_475;
        }
        if (objc_msgSend(v145, "isEqualToString:", CFSTR("AssignedIPv4Subnet")))
        {
          objc_msgSend(v144, "objectForKeyedSubscript:", CFSTR("Address"));
          v148 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v144, "objectForKeyedSubscript:", CFSTR("Netmask"));
          v150 = (__CFString *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              objc_msgSend(MEMORY[0x1E0CCEC58], "endpointWithHostname:port:", v148, CFSTR("0"));
              v154 = (void *)objc_claimAutoreleasedReturnValue();
              v211 = [NEIKEv2IPv4SubnetAttribute alloc];
              v155 = NEGetPrefixForIPv4NetmaskString(v150);
LABEL_487:
              v213 = -[NEIKEv2SubnetAttribute initWithAddress:prefix:](v211, "initWithAddress:prefix:", v154, v155);
              objc_msgSend(v214, "addObject:", v213);

              goto LABEL_460;
            }
          }
          v158 = NEIKEv2IPv4SubnetAttribute;
LABEL_498:
          v153 = (id)objc_msgSend([v158 alloc], "initEmptyRequest");
          goto LABEL_459;
        }
        if (objc_msgSend(v145, "isEqualToString:", CFSTR("AssignedIPv6Address")))
        {
          objc_msgSend(v144, "objectForKeyedSubscript:", CFSTR("Address"));
          v148 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v144, "objectForKeyedSubscript:", CFSTR("Netmask"));
          v150 = (__CFString *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
          {
            v158 = NEIKEv2IPv6AddressAttribute;
            goto LABEL_498;
          }
          objc_msgSend(MEMORY[0x1E0CCEC58], "endpointWithHostname:port:", v148, CFSTR("0"));
          v154 = (void *)objc_claimAutoreleasedReturnValue();
          v157 = NEIKEv2IPv6AddressAttribute;
        }
        else
        {
          if (objc_msgSend(v145, "isEqualToString:", CFSTR("AssignedIPv6DNS")))
          {
            objc_msgSend(v144, "objectForKeyedSubscript:", CFSTR("Address"));
            v148 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              objc_msgSend(MEMORY[0x1E0CCEC58], "endpointWithHostname:port:", v148, CFSTR("0"));
              v150 = (__CFString *)objc_claimAutoreleasedReturnValue();
              v151 = NEIKEv2IPv6DNSAttribute;
              goto LABEL_458;
            }
            v152 = NEIKEv2IPv6DNSAttribute;
            goto LABEL_475;
          }
          if (objc_msgSend(v145, "isEqualToString:", CFSTR("AssignedIPv6DHCP")))
          {
            objc_msgSend(v144, "objectForKeyedSubscript:", CFSTR("Address"));
            v148 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              objc_msgSend(MEMORY[0x1E0CCEC58], "endpointWithHostname:port:", v148, CFSTR("0"));
              v150 = (__CFString *)objc_claimAutoreleasedReturnValue();
              v151 = NEIKEv2IPv6DHCPAttribute;
              goto LABEL_458;
            }
            v152 = NEIKEv2IPv6DHCPAttribute;
            goto LABEL_475;
          }
          if (!objc_msgSend(v145, "isEqualToString:", CFSTR("AssignedIPv6Subnet")))
          {
            if (objc_msgSend(v145, "isEqualToString:", CFSTR("AssignedAppVersion")))
            {
              objc_msgSend(v144, "objectForKeyedSubscript:", CFSTR("String"));
              v148 = (void *)objc_claimAutoreleasedReturnValue();
              objc_opt_class();
              v162 = objc_opt_isKindOfClass();
              v163 = NEIKEv2AppVersionAttribute;
            }
            else
            {
              if ((objc_msgSend(v145, "isEqualToString:", CFSTR("AssignedIPv6PCSCF")) & 1) != 0
                || objc_msgSend(v145, "isEqualToString:", CFSTR("AssignedIPv6PCSCF_STD")))
              {
                objc_msgSend(v144, "objectForKeyedSubscript:", CFSTR("Address"));
                v148 = (void *)objc_claimAutoreleasedReturnValue();
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                {
                  objc_msgSend(MEMORY[0x1E0CCEC58], "endpointWithHostname:port:", v148, CFSTR("0"));
                  v150 = (__CFString *)objc_claimAutoreleasedReturnValue();
                  v151 = NEIKEv2IPv6PCSCFAttribute;
                  goto LABEL_458;
                }
                v152 = NEIKEv2IPv6PCSCFAttribute;
                goto LABEL_475;
              }
              if (objc_msgSend(v145, "isEqualToString:", CFSTR("AssignedIPv4PCSCF_STD")))
              {
                objc_msgSend(v144, "objectForKeyedSubscript:", CFSTR("Address"));
                v148 = (void *)objc_claimAutoreleasedReturnValue();
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                {
                  objc_msgSend(MEMORY[0x1E0CCEC58], "endpointWithHostname:port:", v148, CFSTR("0"));
                  v150 = (__CFString *)objc_claimAutoreleasedReturnValue();
                  v151 = NEIKEv2IPv4PCSCFAttribute;
                  goto LABEL_458;
                }
                v152 = NEIKEv2IPv4PCSCFAttribute;
                goto LABEL_475;
              }
              if (objc_msgSend(v145, "isEqualToString:", CFSTR("AssignedDNSDomain")))
              {
                objc_msgSend(v144, "objectForKeyedSubscript:", CFSTR("String"));
                v148 = (void *)objc_claimAutoreleasedReturnValue();
                objc_opt_class();
                v162 = objc_opt_isKindOfClass();
                v163 = NEIKEv2DNSDomainAttribute;
              }
              else
              {
                if (!objc_msgSend(v145, "isEqualToString:", CFSTR("AssignedAttributes")))
                  goto LABEL_479;
                objc_msgSend(v144, "objectForKeyedSubscript:", CFSTR("String"));
                v148 = (void *)objc_claimAutoreleasedReturnValue();
                objc_opt_class();
                v162 = objc_opt_isKindOfClass();
                v163 = NEIKEv2SupportedAttribute;
              }
            }
            v156 = [v163 alloc];
            if ((v162 & 1) == 0)
              goto LABEL_476;
            v149 = (__CFString *)objc_msgSend(v156, "initWithStringValue:", v148);
LABEL_477:
            v150 = v149;
            objc_msgSend(v214, "addObject:", v149);
            goto LABEL_478;
          }
          objc_msgSend(v144, "objectForKeyedSubscript:", CFSTR("Address"));
          v148 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v144, "objectForKeyedSubscript:", CFSTR("Netmask"));
          v150 = (__CFString *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
          {
            v158 = NEIKEv2IPv6SubnetAttribute;
            goto LABEL_498;
          }
          objc_msgSend(MEMORY[0x1E0CCEC58], "endpointWithHostname:port:", v148, CFSTR("0"));
          v154 = (void *)objc_claimAutoreleasedReturnValue();
          v157 = NEIKEv2IPv6SubnetAttribute;
        }
        v211 = (NEIKEv2IPv4SubnetAttribute *)[v157 alloc];
        v155 = NEGetPrefixForIPv6NetmaskString(v150);
        goto LABEL_487;
      }
LABEL_480:
      v143 = (char *)v143 + 1;
    }
    while (newValuea != v143);
    v164 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v231, v246, 16);
    newValuea = (id)v164;
  }
  while (v164);
LABEL_532:

  v165 = objc_alloc_init(NEIKEv2ConfigurationMessage);
  v167 = v165;
  if (v165)
  {
    v165->_configurationType = 1;
    objc_setProperty_atomic(v165, v166, v214, 16);
  }
  -[NEIKEv2SessionConfiguration setConfigurationRequest:](v2, "setConfigurationRequest:", v167);

LABEL_535:
  if (!CFDictionaryContainsKey((CFDictionaryRef)v5, CFSTR("ConfigurationReply")))
    goto LABEL_652;
  -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("ConfigurationReply"));
  v168 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  v169 = objc_opt_isKindOfClass();

  if ((v169 & 1) == 0)
    goto LABEL_652;
  newValueb = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("ConfigurationReply"));
  v170 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      goto LABEL_649;
    v223 = 0u;
    v224 = 0u;
    v225 = 0u;
    v226 = 0u;
    v194 = v170;
    v195 = objc_msgSend(v194, "countByEnumeratingWithState:objects:count:", &v223, v244, 16);
    if (!v195)
      goto LABEL_648;
    v196 = v195;
    v219 = *(_QWORD *)v224;
LABEL_573:
    v197 = 0;
    while (1)
    {
      if (*(_QWORD *)v224 != v219)
        objc_enumerationMutation(v194);
      v198 = *(void **)(*((_QWORD *)&v223 + 1) + 8 * v197);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        goto LABEL_618;
      objc_msgSend(v194, "objectForKeyedSubscript:", v198);
      v199 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v198, "isEqualToString:", CFSTR("AssignedIPv4Address")))
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0 || !objc_msgSend(v199, "length"))
        {
          v202 = NEIKEv2IPv4AddressAttribute;
          goto LABEL_614;
        }
        objc_msgSend(MEMORY[0x1E0CCEC58], "endpointWithHostname:port:", v199, CFSTR("0"));
        v200 = (void *)objc_claimAutoreleasedReturnValue();
        v201 = NEIKEv2IPv4AddressAttribute;
      }
      else if (objc_msgSend(v198, "isEqualToString:", CFSTR("AssignedIPv4DNS")))
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0 || !objc_msgSend(v199, "length"))
        {
          v202 = NEIKEv2IPv4DNSAttribute;
          goto LABEL_614;
        }
        objc_msgSend(MEMORY[0x1E0CCEC58], "endpointWithHostname:port:", v199, CFSTR("0"));
        v200 = (void *)objc_claimAutoreleasedReturnValue();
        v201 = NEIKEv2IPv4DNSAttribute;
      }
      else if (objc_msgSend(v198, "isEqualToString:", CFSTR("AssignedIPv4DHCP")))
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0 || !objc_msgSend(v199, "length"))
        {
          v202 = NEIKEv2IPv4DHCPAttribute;
          goto LABEL_614;
        }
        objc_msgSend(MEMORY[0x1E0CCEC58], "endpointWithHostname:port:", v199, CFSTR("0"));
        v200 = (void *)objc_claimAutoreleasedReturnValue();
        v201 = NEIKEv2IPv4DHCPAttribute;
      }
      else if (objc_msgSend(v198, "isEqualToString:", CFSTR("AssignedIPv4NetMask")))
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0 || !objc_msgSend(v199, "length"))
        {
          v202 = NEIKEv2IPv4NetmaskAttribute;
          goto LABEL_614;
        }
        objc_msgSend(MEMORY[0x1E0CCEC58], "endpointWithHostname:port:", v199, CFSTR("0"));
        v200 = (void *)objc_claimAutoreleasedReturnValue();
        v201 = NEIKEv2IPv4NetmaskAttribute;
      }
      else
      {
        if (objc_msgSend(v198, "isEqualToString:", CFSTR("AssignedIPv4Subnet")))
        {
          v202 = NEIKEv2IPv4SubnetAttribute;
          goto LABEL_614;
        }
        if (objc_msgSend(v198, "isEqualToString:", CFSTR("AssignedIPv6Address")))
        {
          v202 = NEIKEv2IPv6AddressAttribute;
          goto LABEL_614;
        }
        if (objc_msgSend(v198, "isEqualToString:", CFSTR("AssignedIPv6DNS")))
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0 || !objc_msgSend(v199, "length"))
          {
            v202 = NEIKEv2IPv6DNSAttribute;
            goto LABEL_614;
          }
          objc_msgSend(MEMORY[0x1E0CCEC58], "endpointWithHostname:port:", v199, CFSTR("0"));
          v200 = (void *)objc_claimAutoreleasedReturnValue();
          v201 = NEIKEv2IPv6DNSAttribute;
        }
        else if (objc_msgSend(v198, "isEqualToString:", CFSTR("AssignedIPv6DHCP")))
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0 || !objc_msgSend(v199, "length"))
          {
            v202 = NEIKEv2IPv6DHCPAttribute;
            goto LABEL_614;
          }
          objc_msgSend(MEMORY[0x1E0CCEC58], "endpointWithHostname:port:", v199, CFSTR("0"));
          v200 = (void *)objc_claimAutoreleasedReturnValue();
          v201 = NEIKEv2IPv6DHCPAttribute;
        }
        else
        {
          if (objc_msgSend(v198, "isEqualToString:", CFSTR("AssignedIPv6Subnet")))
          {
            v202 = NEIKEv2IPv6SubnetAttribute;
            goto LABEL_614;
          }
          if (objc_msgSend(v198, "isEqualToString:", CFSTR("AssignedAppVersion")))
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend(v199, "length"))
            {
              v205 = NEIKEv2AppVersionAttribute;
              goto LABEL_624;
            }
            v202 = NEIKEv2AppVersionAttribute;
LABEL_614:
            v204 = objc_msgSend([v202 alloc], "initEmptyRequest");
            goto LABEL_615;
          }
          if ((objc_msgSend(v198, "isEqualToString:", CFSTR("AssignedIPv6PCSCF")) & 1) != 0
            || objc_msgSend(v198, "isEqualToString:", CFSTR("AssignedIPv6PCSCF_STD")))
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0 || !objc_msgSend(v199, "length"))
            {
              v202 = NEIKEv2IPv6PCSCFAttribute;
              goto LABEL_614;
            }
            objc_msgSend(MEMORY[0x1E0CCEC58], "endpointWithHostname:port:", v199, CFSTR("0"));
            v200 = (void *)objc_claimAutoreleasedReturnValue();
            v201 = NEIKEv2IPv6PCSCFAttribute;
          }
          else
          {
            if (!objc_msgSend(v198, "isEqualToString:", CFSTR("AssignedIPv4PCSCF_STD")))
            {
              if (objc_msgSend(v198, "isEqualToString:", CFSTR("AssignedDNSDomain")))
              {
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0 || !objc_msgSend(v199, "length"))
                {
                  v202 = NEIKEv2DNSDomainAttribute;
                  goto LABEL_614;
                }
                v205 = NEIKEv2DNSDomainAttribute;
              }
              else
              {
                if (!objc_msgSend(v198, "isEqualToString:", CFSTR("AssignedAttributes")))
                  goto LABEL_617;
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0 || !objc_msgSend(v199, "length"))
                {
                  v202 = NEIKEv2SupportedAttribute;
                  goto LABEL_614;
                }
                v205 = NEIKEv2SupportedAttribute;
              }
LABEL_624:
              v204 = objc_msgSend([v205 alloc], "initWithStringValue:", v199);
LABEL_615:
              v200 = (void *)v204;
              objc_msgSend(newValueb, "addObject:", v204);
              goto LABEL_616;
            }
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0 || !objc_msgSend(v199, "length"))
            {
              v202 = NEIKEv2IPv4PCSCFAttribute;
              goto LABEL_614;
            }
            objc_msgSend(MEMORY[0x1E0CCEC58], "endpointWithHostname:port:", v199, CFSTR("0"));
            v200 = (void *)objc_claimAutoreleasedReturnValue();
            v201 = NEIKEv2IPv4PCSCFAttribute;
          }
        }
      }
      v203 = (void *)objc_msgSend([v201 alloc], "initWithAddress:", v200);
      objc_msgSend(newValueb, "addObject:", v203);

LABEL_616:
LABEL_617:

LABEL_618:
      if (v196 == ++v197)
      {
        v206 = objc_msgSend(v194, "countByEnumeratingWithState:objects:count:", &v223, v244, 16);
        v196 = v206;
        if (!v206)
          goto LABEL_648;
        goto LABEL_573;
      }
    }
  }
  v227 = 0u;
  v228 = 0u;
  v229 = 0u;
  v230 = 0u;
  v171 = v170;
  v172 = objc_msgSend(v171, "countByEnumeratingWithState:objects:count:", &v227, v245, 16);
  if (v172)
  {
    v173 = v172;
    v174 = *(_QWORD *)v228;
    do
    {
      for (j = 0; j != v173; ++j)
      {
        if (*(_QWORD *)v228 != v174)
          objc_enumerationMutation(v171);
        v176 = *(void **)(*((_QWORD *)&v227 + 1) + 8 * j);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v177 = objc_msgSend(v176, "isEqualToString:", CFSTR("AssignedIPv4Address"));
          v178 = off_1E3CBBA60;
          if ((v177 & 1) != 0)
            goto LABEL_559;
          v179 = objc_msgSend(v176, "isEqualToString:", CFSTR("AssignedIPv4DNS"));
          v178 = off_1E3CBBA70;
          if ((v179 & 1) != 0)
            goto LABEL_559;
          v180 = objc_msgSend(v176, "isEqualToString:", CFSTR("AssignedIPv4DHCP"));
          v178 = off_1E3CBBA68;
          if ((v180 & 1) != 0)
            goto LABEL_559;
          v181 = objc_msgSend(v176, "isEqualToString:", CFSTR("AssignedIPv4NetMask"));
          v178 = off_1E3CBBA78;
          if ((v181 & 1) != 0)
            goto LABEL_559;
          v182 = objc_msgSend(v176, "isEqualToString:", CFSTR("AssignedIPv4Subnet"));
          v178 = off_1E3CBBA88;
          if ((v182 & 1) != 0)
            goto LABEL_559;
          v183 = objc_msgSend(v176, "isEqualToString:", CFSTR("AssignedIPv6Address"));
          v178 = off_1E3CBBA90;
          if ((v183 & 1) != 0)
            goto LABEL_559;
          v184 = objc_msgSend(v176, "isEqualToString:", CFSTR("AssignedIPv6DNS"));
          v178 = off_1E3CBBAA0;
          if ((v184 & 1) != 0)
            goto LABEL_559;
          v185 = objc_msgSend(v176, "isEqualToString:", CFSTR("AssignedIPv6DHCP"));
          v178 = off_1E3CBBA98;
          if ((v185 & 1) != 0)
            goto LABEL_559;
          v186 = objc_msgSend(v176, "isEqualToString:", CFSTR("AssignedIPv6Subnet"));
          v178 = off_1E3CBBAB0;
          if ((v186 & 1) != 0)
            goto LABEL_559;
          v187 = objc_msgSend(v176, "isEqualToString:", CFSTR("AssignedAppVersion"));
          v178 = off_1E3CBB920;
          if ((v187 & 1) != 0)
            goto LABEL_559;
          v188 = objc_msgSend(v176, "isEqualToString:", CFSTR("AssignedIPv6PCSCF"));
          v178 = off_1E3CBBAA8;
          if ((v188 & 1) != 0)
            goto LABEL_559;
          v189 = objc_msgSend(v176, "isEqualToString:", CFSTR("AssignedIPv6PCSCF_STD"));
          v178 = off_1E3CBBAA8;
          if ((v189 & 1) != 0
            || (v190 = objc_msgSend(v176, "isEqualToString:", CFSTR("AssignedIPv4PCSCF_STD")),
                v178 = off_1E3CBBA80,
                (v190 & 1) != 0)
            || (v191 = objc_msgSend(v176, "isEqualToString:", CFSTR("AssignedDNSDomain")),
                v178 = off_1E3CBB998,
                (v191 & 1) != 0)
            || (v192 = objc_msgSend(v176, "isEqualToString:", CFSTR("AssignedAttributes")), v178 = off_1E3CBBC20, v192))
          {
LABEL_559:
            v193 = (void *)objc_msgSend(objc_alloc(*v178), "initEmptyRequest");
            objc_msgSend(newValueb, "addObject:", v193);

          }
        }
      }
      v173 = objc_msgSend(v171, "countByEnumeratingWithState:objects:count:", &v227, v245, 16);
    }
    while (v173);
  }
LABEL_648:

LABEL_649:
  v207 = objc_alloc_init(NEIKEv2ConfigurationMessage);
  v209 = v207;
  if (v207)
  {
    v207->_configurationType = 2;
    objc_setProperty_atomic(v207, v208, newValueb, 16);
  }
  -[NEIKEv2SessionConfiguration setConfigurationReply:](v2, "setConfigurationReply:", v209);

LABEL_652:
  v12 = v2;
LABEL_568:

LABEL_569:
LABEL_15:

  return v12;
}

id NEIPSecIKECopyDefaultSessionQueue()
{
  if (NEIPSecIKECopyDefaultSessionQueue_onceToken != -1)
    dispatch_once(&NEIPSecIKECopyDefaultSessionQueue_onceToken, &__block_literal_global_516);
  return (id)NEIPSecIKECopyDefaultSessionQueue_queue;
}

uint64_t NEIPsecIKEGetAuthProcotol(void *a1)
{
  id v1;
  NEIKEv2AuthenticationProtocol *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NEIKEv2AuthenticationProtocol *v7;
  uint64_t v8;

  v1 = a1;
  if (objc_msgSend(v1, "isEqualToString:", CFSTR("SharedSecret")))
  {
    v2 = [NEIKEv2AuthenticationProtocol alloc];
    v3 = 2;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("Certificate")))
  {
    v2 = [NEIKEv2AuthenticationProtocol alloc];
    v3 = 1;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("ECDSA256")))
  {
    v2 = [NEIKEv2AuthenticationProtocol alloc];
    v3 = 9;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("ECDSA384")))
  {
    v2 = [NEIKEv2AuthenticationProtocol alloc];
    v3 = 10;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("ECDSA521")))
  {
    v2 = [NEIKEv2AuthenticationProtocol alloc];
    v3 = 11;
  }
  else
  {
    if (!objc_msgSend(v1, "isEqualToString:", CFSTR("None")))
    {
      if (objc_msgSend(v1, "isEqualToString:", CFSTR("Ed25519")))
      {
        v7 = [NEIKEv2AuthenticationProtocol alloc];
        v8 = 3;
      }
      else
      {
        if (!objc_msgSend(v1, "isEqualToString:", CFSTR("Ed448")))
        {
          if (!objc_msgSend(v1, "isEqualToString:", CFSTR("RSA-PSS")))
          {
            v5 = 0;
            goto LABEL_15;
          }
          v2 = [NEIKEv2AuthenticationProtocol alloc];
          v3 = 245;
          goto LABEL_13;
        }
        v7 = [NEIKEv2AuthenticationProtocol alloc];
        v8 = 4;
      }
      v4 = -[NEIKEv2AuthenticationProtocol initWithDigitalSignature:](v7, "initWithDigitalSignature:", v8);
      goto LABEL_14;
    }
    v2 = [NEIKEv2AuthenticationProtocol alloc];
    v3 = 0;
  }
LABEL_13:
  v4 = -[NEIKEv2AuthenticationProtocol initWithMethod:](v2, "initWithMethod:", v3);
LABEL_14:
  v5 = v4;
LABEL_15:

  return v5;
}

NEIKEv2EncryptionProtocol *NEIPsecIKEGetEncryptionProtocol(void *a1, int a2)
{
  id v3;
  NEIKEv2EncryptionProtocol *v4;
  uint64_t v5;
  NEIKEv2EncryptionProtocol *v6;
  NEIKEv2EncryptionProtocol *v7;
  uint64_t v8;
  NEIKEv2EncryptionProtocol *v9;

  v3 = a1;
  if (!objc_msgSend(v3, "isEqualToString:", CFSTR("DES")))
  {
    if (objc_msgSend(v3, "isEqualToString:", CFSTR("3DES")))
    {
      v4 = [NEIKEv2EncryptionProtocol alloc];
      v5 = 3;
      goto LABEL_5;
    }
    if (objc_msgSend(v3, "isEqualToString:", CFSTR("AES-128")))
    {
      v7 = [NEIKEv2EncryptionProtocol alloc];
      v8 = 2;
    }
    else if (objc_msgSend(v3, "isEqualToString:", CFSTR("AES-256")))
    {
      v7 = [NEIKEv2EncryptionProtocol alloc];
      v8 = 3;
    }
    else if (objc_msgSend(v3, "isEqualToString:", CFSTR("AES-128-GCM")))
    {
      v7 = [NEIKEv2EncryptionProtocol alloc];
      v8 = 4;
    }
    else if (objc_msgSend(v3, "isEqualToString:", CFSTR("AES-256-GCM")))
    {
      v7 = [NEIKEv2EncryptionProtocol alloc];
      v8 = 5;
    }
    else
    {
      if (!objc_msgSend(v3, "isEqualToString:", CFSTR("ChaCha20-Poly1305")))
      {
        if (a2)
        {
          if (objc_msgSend(v3, "isEqualToString:", CFSTR("ChaCha20-Poly1305-IIV")))
          {
            v7 = [NEIKEv2EncryptionProtocol alloc];
            v8 = 7;
            goto LABEL_16;
          }
          if (objc_msgSend(v3, "isEqualToString:", CFSTR("AES-128-GCM-IIV")))
          {
            v7 = [NEIKEv2EncryptionProtocol alloc];
            v8 = 8;
            goto LABEL_16;
          }
          if (objc_msgSend(v3, "isEqualToString:", CFSTR("AES-256-GCM-IIV")))
          {
            v7 = [NEIKEv2EncryptionProtocol alloc];
            v8 = 9;
            goto LABEL_16;
          }
        }
        v9 = 0;
        goto LABEL_18;
      }
      v7 = [NEIKEv2EncryptionProtocol alloc];
      v8 = 6;
    }
LABEL_16:
    v6 = -[NEIKEv2EncryptionProtocol initWithEncryptionType:](v7, "initWithEncryptionType:", v8);
    goto LABEL_17;
  }
  v4 = [NEIKEv2EncryptionProtocol alloc];
  v5 = 2;
LABEL_5:
  v6 = (NEIKEv2EncryptionProtocol *)-[NEIKEv2EncryptionProtocol initWithEncryptionWireType:is256Bit:](v4, v5, 0);
LABEL_17:
  v9 = v6;
LABEL_18:

  return v9;
}

NEIKEv2IntegrityProtocol *NEIPsecIKEGetIntegrityProtocol(void *a1)
{
  id v1;
  uint64_t v2;
  NEIKEv2IntegrityProtocol *v3;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("MD5-96")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("MD5-128")) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("SHA1-96")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("SHA1-160")) & 1) != 0)
  {
    v2 = 7;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("SHA2-256")) & 1) != 0)
  {
    v2 = 12;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("SHA2-384")) & 1) != 0)
  {
    v2 = 13;
  }
  else
  {
    if (!objc_msgSend(v1, "isEqualToString:", CFSTR("SHA2-512")))
    {
      v3 = 0;
      goto LABEL_16;
    }
    v2 = 14;
  }
  v3 = -[NEIKEv2IntegrityProtocol initWithType:]([NEIKEv2IntegrityProtocol alloc], "initWithType:", v2);
LABEL_16:

  return v3;
}

NEIKEv2PRFProtocol *NEIPsecIKEGetPRFProtocol(void *a1)
{
  id v1;
  uint64_t v2;
  NEIKEv2PRFProtocol *v3;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("MD5-128")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("SHA1-160")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("SHA2-256")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("SHA2-384")) & 1) != 0)
  {
    v2 = 6;
  }
  else
  {
    if (!objc_msgSend(v1, "isEqualToString:", CFSTR("SHA2-512")))
    {
      v3 = 0;
      goto LABEL_12;
    }
    v2 = 7;
  }
  v3 = -[NEIKEv2PRFProtocol initWithType:]([NEIKEv2PRFProtocol alloc], "initWithType:", v2);
LABEL_12:

  return v3;
}

NEIKEv2EAPProtocol *NEIPsecIKEGetEAPProtocol(void *a1)
{
  id v1;
  uint64_t v2;
  NEIKEv2EAPProtocol *v3;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("EAP-SIM")) & 1) != 0)
  {
    v2 = 2;
LABEL_16:
    v3 = -[NEIKEv2EAPProtocol initWithMethod:]([NEIKEv2EAPProtocol alloc], "initWithMethod:", v2);
    goto LABEL_17;
  }
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("EAP-AKA")) & 1) != 0)
  {
    v2 = 3;
    goto LABEL_16;
  }
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("EAP-MSCHAPv2")) & 1) != 0)
  {
    v2 = 4;
    goto LABEL_16;
  }
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("EAP-GTC")) & 1) != 0)
  {
    v2 = 5;
    goto LABEL_16;
  }
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("EAP-TLS")) & 1) != 0)
  {
    v2 = 6;
    goto LABEL_16;
  }
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("EAP-PEAP")) & 1) != 0)
  {
    v2 = 7;
    goto LABEL_16;
  }
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Any")) & 1) != 0)
  {
    v2 = 1;
    goto LABEL_16;
  }
  v2 = 0;
  v3 = 0;
  if (objc_msgSend(v1, "isEqualToString:", CFSTR("None")))
    goto LABEL_16;
LABEL_17:

  return v3;
}

void __xpc_client_queue_block_invoke()
{
  dispatch_queue_t v0;
  void *v1;
  NSObject *v2;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v2 = objc_claimAutoreleasedReturnValue();
  v0 = dispatch_queue_create("com.apple.SecureNetworking.IPSec.xpc", v2);
  v1 = (void *)xpc_client_queue_q;
  xpc_client_queue_q = (uint64_t)v0;

}

CFStringRef NEIPSecIKECreateSessionWithInterface(const __CFAllocator *a1, uint64_t a2, const __CFDictionary *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return NEIPSecIKECreateSessionWithInterfaceAndSASession(a1, a3, a4, a5, a6, a7, 0, 0, 0);
}

CFStringRef NEIPSecIKECreateUserspaceSession(const __CFAllocator *a1, uint64_t a2, const __CFDictionary *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  return NEIPSecIKECreateSessionWithInterfaceAndSASession(a1, a3, a4, a5, a6, a7, 0, 0, a8);
}

CFStringRef NEIPSecIKECreateSession(const __CFAllocator *a1, uint64_t a2, const __CFDictionary *a3, void *a4, uint64_t a5, uint64_t a6)
{
  return NEIPSecIKECreateSessionWithInterfaceAndSASession(a1, a3, a4, 0, a5, a6, 0, 0, 0);
}

uint64_t NEIPSecIKEUpdateIKESettings(void *a1)
{
  objc_msgSend(a1, "updateConfiguration:", 0);
  return 1;
}

uint64_t NEIPSecIKESetDispatchQueue(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  _QWORD v7[4];
  id v8;
  _QWORD v9[4];
  id v10;
  _QWORD v11[4];
  id v12;
  _QWORD v13[4];
  id v14;
  _QWORD v15[4];
  id v16;
  _QWORD v17[4];
  id v18;
  _QWORD v19[4];
  id v20;
  id location;

  v3 = a2;
  v4 = a1;
  objc_msgSend(v4, "setClientQueue:", v3);
  objc_initWeak(&location, v4);
  v5 = MEMORY[0x1E0C809B0];
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = __NEIPSecIKESetDispatchQueue_block_invoke;
  v19[3] = &unk_1E3CC20C8;
  objc_copyWeak(&v20, &location);
  objc_msgSend(v4, "setStateUpdateBlock:", v19);
  v17[0] = v5;
  v17[1] = 3221225472;
  v17[2] = __NEIPSecIKESetDispatchQueue_block_invoke_132;
  v17[3] = &unk_1E3CC20F0;
  objc_copyWeak(&v18, &location);
  objc_msgSend(v4, "setChildStateUpdateBlock:", v17);
  v15[0] = v5;
  v15[1] = 3221225472;
  v15[2] = __NEIPSecIKESetDispatchQueue_block_invoke_134;
  v15[3] = &unk_1E3CC2118;
  objc_copyWeak(&v16, &location);
  objc_msgSend(v4, "setConfigurationUpdateBlock:", v15);
  v13[0] = v5;
  v13[1] = 3221225472;
  v13[2] = __NEIPSecIKESetDispatchQueue_block_invoke_155;
  v13[3] = &unk_1E3CC2140;
  objc_copyWeak(&v14, &location);
  objc_msgSend(v4, "setTrafficSelectorUpdateBlock:", v13);
  v11[0] = v5;
  v11[1] = 3221225472;
  v11[2] = __NEIPSecIKESetDispatchQueue_block_invoke_177;
  v11[3] = &unk_1E3CC39A8;
  objc_copyWeak(&v12, &location);
  objc_msgSend(v4, "setShortDPDEventBlock:", v11);
  v9[0] = v5;
  v9[1] = 3221225472;
  v9[2] = __NEIPSecIKESetDispatchQueue_block_invoke_179;
  v9[3] = &unk_1E3CC2168;
  objc_copyWeak(&v10, &location);
  objc_msgSend(v4, "setRedirectEventBlock:", v9);
  v7[0] = v5;
  v7[1] = 3221225472;
  v7[2] = __NEIPSecIKESetDispatchQueue_block_invoke_193;
  v7[3] = &unk_1E3CC3BF0;
  objc_copyWeak(&v8, &location);
  objc_msgSend(v4, "setPrivateNotifyStatusEvent:", v7);
  objc_destroyWeak(&v8);
  objc_destroyWeak(&v10);
  objc_destroyWeak(&v12);
  objc_destroyWeak(&v14);
  objc_destroyWeak(&v16);
  objc_destroyWeak(&v18);
  objc_destroyWeak(&v20);
  objc_destroyWeak(&location);

  return 1;
}

void sub_19BE344F4(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  id *v5;
  id *v6;
  id *v7;
  uint64_t v8;

  objc_destroyWeak(v7);
  objc_destroyWeak(v6);
  objc_destroyWeak(v5);
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v8 - 104));
  _Unwind_Resume(a1);
}

void sub_19BE34560()
{
  JUMPOUT(0x19BE34540);
}

void sub_19BE34568()
{
  JUMPOUT(0x19BE34548);
}

void NEIPSecIKESendDeadPeerDetectionPacket(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;

  v9 = a5;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __NEIPSecIKESendDeadPeerDetectionPacket_block_invoke;
  v11[3] = &unk_1E3CC2F20;
  v12 = v9;
  v10 = v9;
  objc_msgSend(a1, "sendKeepaliveWithRetries:retryIntervalInMilliseconds:callbackQueue:callback:", a2, a3, a4, v11);

}

uint64_t NEIPSecIKEForceChildSARekey(void *a1, const char *a2)
{
  return objc_msgSend(a1, "forceRekeyChild:", a2);
}

uint64_t NEIPSecIKEStartConnection(void *a1)
{
  id v1;
  const char *v2;
  unsigned int *v3;
  uint64_t v4;

  v1 = a1;
  objc_msgSend(v1, "connect");
  -[NEIKEv2Session firstChildSA](v1, v2);
  v3 = (unsigned int *)objc_claimAutoreleasedReturnValue();

  if (v3)
    v4 = v3[4];
  else
    v4 = 0;

  return v4;
}

uint64_t NEIPSecIKEConnectionIsMobile(void *a1, const char *a2)
{
  _BYTE *v2;
  uint64_t v3;

  if (!a1)
  {
    v2 = 0;
    goto LABEL_6;
  }
  v2 = objc_getProperty(a1, a2, 336, 1);
  if (!v2)
  {
LABEL_6:
    v3 = 0;
    goto LABEL_4;
  }
  v3 = v2[11] & 1;
LABEL_4:

  return v3;
}

uint64_t NEIPSecIKEStartMOBIKE(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  return NEIPSecIKEStartMOBIKEReuseSocket(a1, a2, a3, a4, a5, 0, a6, a7);
}

uint64_t NEIPSecIKEStartMOBIKEReuseSocket(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, int a6, void *a7, void *a8)
{
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  _QWORD v20[4];
  id v21;

  v15 = a7;
  v16 = a8;
  if (a1)
  {
    v17 = a1;
    if (a3)
    {
      objc_msgSend(MEMORY[0x1E0CCEC80], "endpointWithHostname:port:", a3, CFSTR("0"));
      a3 = (void *)objc_claimAutoreleasedReturnValue();
    }
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3221225472;
    v20[2] = __NEIPSecIKEStartMOBIKEReuseSocket_block_invoke;
    v20[3] = &unk_1E3CC2190;
    v21 = v16;
    objc_msgSend(v17, "sendMOBIKEWithRetries:retryInterval:interfaceName:invalidateTransport:resetEndpoint:callbackQueue:callback:", a4, a5, a2, a6 == 0, a3, v15, v20);

    v18 = 1000;
  }
  else
  {
    v18 = 3;
  }

  return v18;
}

uint64_t NEIPSecIKEStopConnection(void *a1)
{
  objc_msgSend(a1, "disconnect");
  return 1;
}

uint64_t NEIPSecIKEInvalidateSession(uint64_t result)
{
  void *v1;
  CFTypeID v2;

  if (result)
  {
    v1 = (void *)result;
    v2 = CFGetTypeID((CFTypeRef)result);
    if (v2 != CFStringGetTypeID())
      objc_msgSend(v1, "invalidate");
    return 1;
  }
  return result;
}

uint64_t NEIPSecIKEStartChildSA(void *a1, void *a2)
{
  id v3;
  NEIKEv2ChildSAConfiguration *v4;
  uint64_t v5;

  v3 = a1;
  v4 = NEIPSecIKEValidateIKEChildDictionary(a2);
  v5 = objc_msgSend(v3, "addChild:", v4);

  return v5;
}

uint64_t NEIPSecIKEStopChildSA(void *a1, uint64_t a2)
{
  objc_msgSend(a1, "removeChild:", a2);
  return 1;
}

uint64_t NEIPSecIKEGetLocalAddress(void *a1, char *a2)
{
  id Property;
  const char *v4;
  void *v5;
  id v6;
  unsigned __int8 *v7;
  uint64_t v8;

  if (a1)
  {
    Property = objc_getProperty(a1, a2, 336, 1);
    v5 = Property;
    if (Property)
      Property = objc_getProperty(Property, v4, 64, 1);
  }
  else
  {
    v5 = 0;
    Property = 0;
  }
  v6 = Property;

  v7 = (unsigned __int8 *)objc_msgSend(v6, "address");
  if (v7)
  {
    memcpy(a2, v7, *v7);
    v8 = 1;
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t NEIPSecIKEGetRemoteAddress(void *a1, char *a2)
{
  id Property;
  const char *v4;
  void *v5;
  id v6;
  unsigned __int8 *v7;
  uint64_t v8;

  if (a1)
  {
    Property = objc_getProperty(a1, a2, 336, 1);
    v5 = Property;
    if (Property)
      Property = objc_getProperty(Property, v4, 72, 1);
  }
  else
  {
    v5 = 0;
    Property = 0;
  }
  v6 = Property;

  v7 = (unsigned __int8 *)objc_msgSend(v6, "address");
  if (v7)
  {
    memcpy(a2, v7, *v7);
    v8 = 1;
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

void NEIPSecIKESendPrivateNotifyStatus(void *a1, uint64_t a2, uint64_t a3)
{
  NSObject *v5;
  NEIKEv2PrivateNotify *v6;
  NEIKEv2PrivateNotify *v7;
  NSObject *v8;
  NEIKEv2PrivateNotify *v9;
  uint8_t buf[4];
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v5 = a1;
    v6 = -[NEIKEv2PrivateNotify initWithNotifyStatus:notifyData:]([NEIKEv2PrivateNotify alloc], "initWithNotifyStatus:notifyData:", a2, a3);
    v7 = v6;
    if (v6)
    {
      v9 = v6;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v9, 1);
      v8 = objc_claimAutoreleasedReturnValue();
      -[NSObject sendPrivateNotifies:maxRetries:retryIntervalInMilliseconds:callbackQueue:callback:](v5, "sendPrivateNotifies:maxRetries:retryIntervalInMilliseconds:callbackQueue:callback:", v8, 10, 1000, 0, 0);
    }
    else
    {
      ne_log_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315138;
        v11 = "NEIPSecIKESendPrivateNotifyStatus";
        _os_log_fault_impl(&dword_19BD16000, v8, OS_LOG_TYPE_FAULT, "%s called with null privateNotify", buf, 0xCu);
      }
    }

  }
  else
  {
    ne_log_obj();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      v11 = "NEIPSecIKESendPrivateNotifyStatus";
      _os_log_fault_impl(&dword_19BD16000, v5, OS_LOG_TYPE_FAULT, "%s called with null session", buf, 0xCu);
    }
  }

}

void NEIPSecSAKernelSessionReceiveMessage(uint64_t a1, int a2, int a3, uint64_t a4, void *a5)
{
  id v8;
  const char *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  SEL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint8_t buf[4];
  uint64_t v38;
  __int16 v39;
  void *v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  NSObject *v46;
  _BYTE v47[128];
  _BYTE v48[128];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v8 = a5;
  v10 = v8;
  if (v8)
  {
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v11 = objc_getProperty(v8, v9, 24, 1);
    v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v33, v48, 16);
    if (v12)
    {
      v13 = v12;
      v14 = *(_QWORD *)v34;
      while (2)
      {
        v15 = 0;
        do
        {
          if (*(_QWORD *)v34 != v14)
            objc_enumerationMutation(v11);
          v16 = *(_DWORD **)(*((_QWORD *)&v33 + 1) + 8 * v15);
          if (v16)
          {
            if (v16[12] == a2)
            {
LABEL_28:
              v24 = v16;

              ne_log_large_obj();
              v25 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 138413314;
                v38 = a1;
                v39 = 2112;
                v40 = v10;
                v41 = 1024;
                v42 = a3;
                v43 = 1024;
                v44 = a2;
                v45 = 2112;
                v46 = v24;
                _os_log_impl(&dword_19BD16000, v25, OS_LOG_TYPE_INFO, "%@ %@ received notification %#x for SAID %u which matches SA %@", buf, 0x2Cu);
              }

              objc_msgSend(v10, "delegate");
              v26 = (void *)objc_claimAutoreleasedReturnValue();
              v27 = v26;
              if (v26)
              {
                v28 = a3 & 0xF00;
                switch(v28)
                {
                  case 2048:
                    objc_msgSend(v26, "idleTimeoutSA:", v24);
                    break;
                  case 1024:
                    objc_msgSend(v26, "deleteSA:", v24);
                    break;
                  case 512:
                    objc_msgSend(v26, "expireSA:", v24);
                    break;
                }
                if ((a3 & 0xF0) == 0x10)
                  objc_msgSend(v27, "blackholeDetectedSA:", v24);
              }

              goto LABEL_40;
            }
          }
          else if (!a2)
          {
            goto LABEL_14;
          }
          ++v15;
        }
        while (v13 != v15);
        v17 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v33, v48, 16);
        v13 = v17;
        if (v17)
          continue;
        break;
      }
    }
LABEL_14:

    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v11 = objc_getProperty(v10, v18, 32, 1);
    v19 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v29, v47, 16);
    if (v19)
    {
      v20 = v19;
      v21 = *(_QWORD *)v30;
      do
      {
        v22 = 0;
        do
        {
          if (*(_QWORD *)v30 != v21)
            objc_enumerationMutation(v11);
          v16 = *(_DWORD **)(*((_QWORD *)&v29 + 1) + 8 * v22);
          if (v16)
          {
            if (v16[12] == a2)
              goto LABEL_28;
          }
          else if (!a2)
          {
            goto LABEL_26;
          }
          ++v22;
        }
        while (v20 != v22);
        v23 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v29, v47, 16);
        v20 = v23;
      }
      while (v23);
    }
LABEL_26:

    ne_log_obj();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138413058;
      v38 = a1;
      v39 = 2112;
      v40 = v10;
      v41 = 1024;
      v42 = a3;
      v43 = 1024;
      v44 = a2;
      _os_log_impl(&dword_19BD16000, v24, OS_LOG_TYPE_INFO, "%@ %@ received notification %#x for SAID %u which matches no SA", buf, 0x22u);
    }
LABEL_40:

  }
}

void sub_19BE3FE48(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BE3FF80(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BE40054(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BE400E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BE40164(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BE40F58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v2);
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

const __CFDictionary *NEKeychainCopyValue(const __CFString *a1, const __CFString *a2, const __CFString *a3, const __CFString *a4)
{
  __CFDictionary *Query;
  const __CFDictionary *v5;
  OSStatus v6;
  CFTypeRef v7;
  CFTypeRef result;

  result = 0;
  Query = __NEKeychainCreateQuery(a1, a2, a3, a4);
  v5 = Query;
  if (Query)
  {
    CFDictionaryAddValue(Query, (const void *)*MEMORY[0x1E0CD7018], (const void *)*MEMORY[0x1E0C9AE50]);
    v6 = SecItemCopyMatching(v5, &result);
    CFRelease(v5);
    v7 = result;
    if (result)
    {
      if (v6)
      {
        v5 = 0;
      }
      else
      {
        v5 = (const __CFDictionary *)CFStringCreateFromExternalRepresentation((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFDataRef)result, 0x8000100u);
        v7 = result;
      }
      CFRelease(v7);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

__CFDictionary *__NEKeychainCreateQuery(CFStringRef theString, const __CFString *a2, const __CFString *a3, const __CFString *a4)
{
  __CFDictionary *Length;
  CFIndex v9;
  CFIndex v10;
  CFIndex v11;
  __CFDictionary *Mutable;

  if (theString)
  {
    Length = (__CFDictionary *)CFStringGetLength(theString);
    if (a2)
      goto LABEL_3;
  }
  else
  {
    Length = 0;
    if (a2)
    {
LABEL_3:
      v9 = CFStringGetLength(a2);
      if (a3)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  v9 = 0;
  if (a3)
  {
LABEL_4:
    v10 = CFStringGetLength(a3);
    if (a4)
      goto LABEL_5;
LABEL_10:
    v11 = 0;
    if (!Length)
      return Length;
    goto LABEL_11;
  }
LABEL_9:
  v10 = 0;
  if (!a4)
    goto LABEL_10;
LABEL_5:
  v11 = CFStringGetLength(a4);
  if (!Length)
    return Length;
LABEL_11:
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0);
  Length = Mutable;
  if (Mutable)
  {
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CD6C98], (const void *)*MEMORY[0x1E0CD6CA8]);
    CFDictionaryAddValue(Length, (const void *)*MEMORY[0x1E0CD6B58], theString);
    if (v9)
      CFDictionaryAddValue(Length, (const void *)*MEMORY[0x1E0CD68F8], a2);
    if (v10)
      CFDictionaryAddValue(Length, (const void *)*MEMORY[0x1E0CD6A90], a3);
    if (v11)
      CFDictionaryAddValue(Length, (const void *)*MEMORY[0x1E0CD69A0], a4);
  }
  return Length;
}

__CFDictionary *NEKeychainCopyPersistentRef(const __CFString *a1, const __CFString *a2, const __CFString *a3, const __CFString *a4)
{
  __CFDictionary *Query;
  const __CFDictionary *v5;
  OSStatus v6;
  BOOL v7;
  CFTypeRef result;

  result = 0;
  Query = __NEKeychainCreateQuery(a1, a2, a3, a4);
  if (Query)
  {
    v5 = Query;
    CFDictionaryAddValue(Query, (const void *)*MEMORY[0x1E0CD7020], (const void *)*MEMORY[0x1E0C9AE50]);
    v6 = SecItemCopyMatching(v5, &result);
    CFRelease(v5);
    if (v6)
      v7 = 1;
    else
      v7 = result == 0;
    if (v7)
      return 0;
    else
      return (__CFDictionary *)result;
  }
  return Query;
}

const __CFDictionary *NEKeychainSetValue(const __CFString *a1, const __CFString *a2, const __CFString *a3, const __CFString *a4, CFStringRef theString)
{
  const __CFDictionary *Length;
  const __CFDictionary *v11;
  const __CFAllocator *v12;
  CFDataRef ExternalRepresentation;
  const __CFString *v14;
  const __CFString *v15;
  __CFDictionary *Mutable;
  const __CFDictionary *v17;
  CFTypeRef result;

  result = 0;
  if (!theString)
    return 0;
  Length = (const __CFDictionary *)CFStringGetLength(theString);
  if (Length)
  {
    Length = __NEKeychainCreateQuery(a1, a2, a3, a4);
    if (Length)
    {
      v11 = Length;
      v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      ExternalRepresentation = CFStringCreateExternalRepresentation((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theString, 0x8000100u, 0);
      v14 = (const __CFString *)NEKeychainCopyValue(a1, a2, a3, a4);
      if (v14)
      {
        v15 = v14;
        if (CFStringCompare(theString, v14, 0))
        {
          Mutable = CFDictionaryCreateMutable(v12, 0, 0, 0);
          CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CD70D8], ExternalRepresentation);
          SecItemUpdate(v11, Mutable);
          CFRelease(Mutable);
        }
        CFRelease(v11);
        v17 = (const __CFDictionary *)v15;
      }
      else
      {
        CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E0CD68A0], (const void *)*MEMORY[0x1E0CD68A8]);
        CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E0CD70D8], ExternalRepresentation);
        if (SecItemAdd(v11, &result))
          result = 0;
        v17 = v11;
      }
      CFRelease(v17);
      if (ExternalRepresentation)
        CFRelease(ExternalRepresentation);
      return (const __CFDictionary *)result;
    }
  }
  return Length;
}

void NEKeychainRemoveValue(const __CFString *a1, const __CFString *a2, const __CFString *a3, const __CFString *a4)
{
  __CFDictionary *Query;
  __CFDictionary *v5;

  Query = __NEKeychainCreateQuery(a1, a2, a3, a4);
  if (Query)
  {
    v5 = Query;
    SecItemDelete(Query);
    CFRelease(v5);
  }
}

const __CFDictionary *NEKeychainSetPKCS12Container(const __CFData *a1, void *a2)
{
  const __CFDictionary *Count;
  const __CFDictionary *v4;
  const __CFAllocator *v5;
  __CFDictionary *Mutable;
  CFMutableArrayRef v7;
  BOOL v8;
  const __CFDictionary *ValueAtIndex;
  __SecCertificate *Value;
  CFIndex CertificateCount;
  CFIndex v12;
  CFIndex v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  SecCertificateRef CertificateAtIndex;
  OSStatus v20;
  __CFArray *theArray;
  __SecTrust *trust;
  CFTypeRef result;
  CFArrayRef items;
  void *values;

  values = a2;
  if (!a2)
    return 0;
  items = 0;
  Count = CFDictionaryCreate(0, MEMORY[0x1E0CD6D58], (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Count)
    return Count;
  v4 = Count;
  if (SecPKCS12Import(a1, Count, &items))
    return 0;
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v7 = CFArrayCreateMutable(v5, 0, MEMORY[0x1E0C9B378]);
  Count = 0;
  theArray = v7;
  if (Mutable)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    Count = (const __CFDictionary *)CFArrayGetCount(items);
    if (Count)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(items, 0);
      Value = (__SecCertificate *)CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E0CD6D60]);
      trust = (__SecTrust *)CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E0CD6D68]);
      CertificateCount = SecTrustGetCertificateCount(trust);
      if (CertificateCount >= 1)
      {
        v12 = CertificateCount;
        v13 = 0;
        v14 = (const void *)*MEMORY[0x1E0CD70E8];
        v15 = (const void *)*MEMORY[0x1E0CD7020];
        v16 = (const void *)*MEMORY[0x1E0C9AE50];
        v17 = (const void *)*MEMORY[0x1E0CD68A0];
        v18 = (const void *)*MEMORY[0x1E0CD68A8];
        do
        {
          result = 0;
          CertificateAtIndex = Value;
          if (v13)
            CertificateAtIndex = SecTrustGetCertificateAtIndex(trust, v13);
          CFDictionarySetValue(Mutable, v14, CertificateAtIndex);
          CFDictionarySetValue(Mutable, v15, v16);
          CFDictionarySetValue(Mutable, v17, v18);
          v20 = SecItemAdd(Mutable, &result);
          if (v20 == -25299)
          {
            CFDictionaryRemoveValue(Mutable, v17);
            v20 = SecItemCopyMatching(Mutable, &result);
          }
          if (!v20)
          {
            CFArrayAppendValue(theArray, result);
            CFRelease(result);
          }
          ++v13;
        }
        while (v12 != v13);
      }
      CFRelease(Mutable);
      CFRelease(items);
      CFRelease(v4);
      return theArray;
    }
  }
  return Count;
}

BOOL NEKeychainRemoveWithPersistentID(void *a1)
{
  void *v1;
  const __CFDictionary *v2;
  const __CFDictionary *v3;
  _BOOL8 v4;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  v1 = (void *)*MEMORY[0x1E0CD70E0];
  values = a1;
  keys[0] = v1;
  v2 = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 1, 0, 0);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = SecItemDelete(v2) == 0;
  CFRelease(v3);
  return v4;
}

void sub_19BE44E7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  id *v25;
  id *v26;
  id *v27;

  objc_destroyWeak(v27);
  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19BE4AE28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19BE4B1C8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BE4B3C8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BE4B53C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BE4B5CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BE4B65C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_19BE4B6F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BE4B794(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BE4B828(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BE4B8CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BE4B950(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BE4B9DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BE4C350(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BE4CA68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,id location)
{
  id *v40;

  objc_destroyWeak(v40);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19BE4CF2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  id *v10;

  objc_destroyWeak(v10);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19BE4D008(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_19BE4E7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19BE4F1A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BE4F35C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL nw_nexus_flow_add_input_handler(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 48);
  if (!v2)
  {
    *(_QWORD *)(a1 + 48) = a2;
    *(_QWORD *)(a2 + 32) = a1;
  }
  return v2 == 0;
}

uint64_t nw_nexus_flow_input_available(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(*(_QWORD *)(result + 24) + 64))();
  return result;
}

uint64_t nw_nexus_flow_output_available(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(*(_QWORD *)(result + 24) + 72))();
  return result;
}

uint64_t nw_nexus_flow_get_input_frames(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(*(_QWORD *)(result + 24) + 80))();
  return result;
}

uint64_t nw_nexus_flow_get_output_frames(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(*(_QWORD *)(result + 24) + 88))();
  return result;
}

uint64_t nw_nexus_flow_finalize_output_frames(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(*(_QWORD *)(result + 24) + 96))();
  return result;
}

void sub_19BE53AB8(_Unwind_Exception *a1)
{
  void *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak((id *)(v3 - 40));
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BE53C60(_Unwind_Exception *a1)
{
  void *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak((id *)(v3 - 40));
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BE54198(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BE545A0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BE548C4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BE54BA8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BE54C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sendDataOnRing(void *a1, uint64_t a2, int a3)
{
  os_unfair_lock_s *v4;
  NSObject *v5;
  const char *v6;
  int v7;
  NSObject *v8;
  NSObject *v9;
  const char *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  uint8_t buf[4];
  os_unfair_lock_s *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const __CFString *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = a1;
  if (!os_channel_get_next_slot())
  {
    if (os_channel_sync())
    {
      ne_log_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        v11 = "EGRESS";
        if (!a3)
          v11 = "INGRESS";
        *(_DWORD *)buf = 138412802;
        v15 = v4;
        v16 = 2080;
        v17 = v11;
        v18 = 2112;
        v19 = CFSTR("failed to sync channel TX");
        goto LABEL_28;
      }
LABEL_9:

      if (!*(_QWORD *)&v4[4]._os_unfair_lock_opaque)
        goto LABEL_24;
      os_channel_packet_free();
      goto LABEL_11;
    }
    if (!os_channel_get_next_slot())
    {
      ne_log_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        v10 = "EGRESS";
        if (!a3)
          v10 = "INGRESS";
        *(_DWORD *)buf = 138412802;
        v15 = v4;
        v16 = 2080;
        v17 = v10;
        v18 = 2112;
        v19 = CFSTR("bad next slot");
        goto LABEL_28;
      }
      goto LABEL_9;
    }
  }
  if (os_channel_slot_attach_packet())
  {
    ne_log_obj();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = "EGRESS";
      if (!a3)
        v6 = "INGRESS";
      *(_DWORD *)buf = 138412802;
      v15 = v4;
      v16 = 2080;
      v17 = v6;
      v18 = 2112;
      v19 = CFSTR("bad attach");
LABEL_28:
      _os_log_error_impl(&dword_19BD16000, v5, OS_LOG_TYPE_ERROR, "%@: %s - %@", buf, 0x20u);
      goto LABEL_9;
    }
    goto LABEL_9;
  }
  v7 = os_channel_advance_slot();
  ne_log_obj();
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v7)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v12 = "EGRESS";
      if (!a3)
        v12 = "INGRESS";
      *(_DWORD *)buf = 138412802;
      v15 = v4;
      v16 = 2080;
      v17 = v12;
      v18 = 2112;
      v19 = CFSTR("Failed to advance slot");
      _os_log_error_impl(&dword_19BD16000, v9, OS_LOG_TYPE_ERROR, "%@: %s - %@", buf, 0x20u);
    }

    if (*(_QWORD *)&v4[4]._os_unfair_lock_opaque)
    {
LABEL_11:
      if (os_channel_is_defunct())
      {
        os_unfair_lock_lock(v4 + 2);
        -[NEFilterPacketInterpose close_nolock:]((uint64_t)v4, 1);
        os_unfair_lock_unlock(v4 + 2);
      }
    }
  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      v13 = "EGRESS";
      if (!a3)
        v13 = "INGRESS";
      *(_DWORD *)buf = 138412546;
      v15 = v4;
      v16 = 2080;
      v17 = v13;
      _os_log_debug_impl(&dword_19BD16000, v9, OS_LOG_TYPE_DEBUG, "%@ sendDataOnRing: sent packet on %s tx ring", buf, 0x16u);
    }

  }
LABEL_24:

}

void sub_19BE583BC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 104));
  _Unwind_Resume(a1);
}

uint64_t _NE_DNSMessageExtractDomainNameString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (_NE_DNSMessageExtractDomainNameString_onceToken != -1)
    dispatch_once(&_NE_DNSMessageExtractDomainNameString_onceToken, &__block_literal_global_17448);
  if (_NE_DNSMessageExtractDomainNameString__mdns_DNSMessageExtractDomainNameString)
    return _NE_DNSMessageExtractDomainNameString__mdns_DNSMessageExtractDomainNameString(a1, a2, a3, a4, a5);
  else
    return 0xFFFFFFFFLL;
}

uint64_t ipsec_check_keylen(int a1, int a2, unsigned int a3)
{
  int v3;

  if (a1 == 14)
  {
    v3 = 2;
    return ipsec_check_keylen2(v3, a2, a3);
  }
  if (a1 == 15)
  {
    v3 = 3;
    return ipsec_check_keylen2(v3, a2, a3);
  }
  return 0xFFFFFFFFLL;
}

uint64_t ipsec_check_keylen2(int a1, int a2, unsigned int a3)
{
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned int v6;

  v4 = findsupportedalg(a1, a2);
  if (!v4)
    return 0xFFFFFFFFLL;
  v5 = *((unsigned __int16 *)v4 + 1);
  v6 = *((unsigned __int16 *)v4 + 2);
  if (v5 > a3 || v6 < a3)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "%d %d %d\n", a3, v5, v6);
    return 0xFFFFFFFFLL;
  }
  return 0;
}

unsigned __int8 *findsupportedalg(int a1, int a2)
{
  uint64_t v2;
  unsigned __int16 *v3;
  unsigned int v4;
  unsigned __int8 *result;
  int v6;

  v2 = 0;
  while (supported_map[v2] != a1)
  {
    if (++v2 == 3)
      return 0;
  }
  v3 = (unsigned __int16 *)ipsec_supported[v2];
  if (!v3)
    return 0;
  v4 = *v3;
  if (v4 < 0x10)
    return 0;
  result = (unsigned __int8 *)(v3 + 4);
  v6 = v4 + 8;
  while (*result != a2)
  {
    result += 8;
    v6 -= 8;
    if (v6 <= 23)
      return 0;
  }
  return result;
}

uint64_t ipsec_get_keylen(int a1, int a2, _QWORD *a3)
{
  int v4;
  uint64_t result;
  unsigned __int8 *v6;
  unsigned __int8 *v7;

  if (!a3)
    return 0xFFFFFFFFLL;
  if (a1 == 14)
  {
    v4 = 2;
  }
  else
  {
    if (a1 != 15)
      return 0xFFFFFFFFLL;
    v4 = 3;
  }
  v6 = findsupportedalg(v4, a2);
  if (v6)
  {
    v7 = v6;
    result = 0;
    *a3 = *(_QWORD *)v7;
    return result;
  }
  return 0xFFFFFFFFLL;
}

BOOL NEPFKeySendGetSPI(NSObject *a1, uint64_t a2, uint8_t a3, uint8_t a4, uint64_t a5, uint64_t a6, unsigned int a7, unsigned int a8, int a9, int a10, unsigned int a11, int a12, unsigned int a13, uint8_t a14, __int128 a15)
{
  int v17;
  _BOOL8 v20;
  char v25;
  NSObject *v26;
  const char *v27;
  NSObject *v28;
  uint32_t v29;
  NSObject *v30;
  BOOL v33;
  CFMutableDataRef Mutable;
  const __CFData *v35;
  NSObject *v36;
  unsigned __int16 v37;
  pid_t v38;
  NSObject *v39;
  int v40;
  int v41;
  int v42;
  BOOL v43;
  char v44;
  uint8_t buf[8];
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  CFRange v50;
  CFRange v51;
  CFRange v52;
  CFRange v53;
  CFRange v54;
  CFRange v55;
  CFRange v56;

  v49 = *MEMORY[0x1E0C80C00];
  if (!a5 || !a6)
  {
    v26 = ne_log_obj();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v27 = "pfkey get spi, source/destination is NULL";
      v28 = v26;
      v29 = 2;
LABEL_34:
      _os_log_error_impl(&dword_19BD16000, v28, OS_LOG_TYPE_ERROR, v27, buf, v29);
    }
    return 0;
  }
  v17 = *(unsigned __int8 *)(a5 + 1);
  if (v17 != *(unsigned __int8 *)(a6 + 1))
  {
    v30 = ne_log_obj();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      v41 = *(unsigned __int8 *)(a5 + 1);
      v42 = *(unsigned __int8 *)(a6 + 1);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v41;
      LOWORD(v46) = 1024;
      *(_DWORD *)((char *)&v46 + 2) = v42;
      v27 = "pfkey get spi, source IP family(%d) does not match destination IP family(%d)";
      v28 = v30;
      v29 = 14;
      goto LABEL_34;
    }
    return 0;
  }
  v20 = 0;
  if (a7 > a8 || a7 - 1 < 0xFF)
    return v20;
  if (v17 != 2)
  {
    if (v17 == 30)
    {
      v25 = 0x80;
      goto LABEL_15;
    }
    v39 = ne_log_obj();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      v40 = *(unsigned __int8 *)(a5 + 1);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v40;
      v27 = "pfkey get spi, invalid source IP family %d";
      v28 = v39;
      v29 = 8;
      goto LABEL_34;
    }
    return 0;
  }
  v25 = 32;
LABEL_15:
  v44 = v25;
  v33 = a7 < 0x100 || a8 == -1;
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (!Mutable)
    return 0;
  v35 = Mutable;
  v43 = v33;
  v36 = ne_log_obj();
  if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19BD16000, v36, OS_LOG_TYPE_INFO, "Sending PFKey get new SPI", buf, 2u);
  }
  v50.location = CFDataGetLength(v35);
  *(_DWORD *)buf = 1245186;
  buf[4] = a4;
  LODWORD(v46) = 0;
  HIDWORD(v46) = a9;
  buf[5] = a14;
  *(_WORD *)&buf[6] = 1;
  v50.length = 0;
  CFDataReplaceBytes(v35, v50, buf, 16);
  v51.location = CFDataGetLength(v35);
  v51.length = 5;
  NEPFKeySetSADBAddr(v35, v51, (const UInt8 *)a5, v44, 255);
  v52.location = CFDataGetLength(v35);
  v52.length = 6;
  NEPFKeySetSADBAddr(v35, v52, (const UInt8 *)a6, v44, 255);
  if (a15 != 0)
  {
    v53.location = CFDataGetLength(v35);
    v53.length = 22;
    NEPFKeySetSADBIPSecIF(v35, v53, 0, *((char **)&a15 + 1), (char *)a15, 0);
  }
  if (a10)
  {
    v54.location = CFDataGetLength(v35);
    *(_QWORD *)buf = 196612;
    v46 = 0;
    v47 = a11;
    v48 = 0;
    v54.length = 0;
    CFDataReplaceBytes(v35, v54, buf, 32);
  }
  if (!v43)
  {
    *(_DWORD *)buf = 1048578;
    *(_DWORD *)&buf[4] = a7;
    v46 = a8;
    v55.location = CFDataGetLength(v35);
    v55.length = 0;
    CFDataReplaceBytes(v35, v55, buf, 16);
  }
  v37 = CFDataGetLength(v35) + 16;
  v38 = getpid();
  *(_WORD *)buf = 258;
  buf[2] = 0;
  buf[3] = a3;
  *(_WORD *)&buf[4] = v37 >> 3;
  *(_WORD *)&buf[6] = 0;
  v46 = __PAIR64__(v38, a13);
  v56.location = 0;
  v56.length = 0;
  CFDataReplaceBytes(v35, v56, buf, 16);
  v20 = NEPFKeySend(a1, a2, v35);
  CFRelease(v35);
  return v20;
}

void NEPFKeySetSADBAddr(__CFData *a1, CFRange a2, const UInt8 *a3, char a4, char a5)
{
  CFIndex location;
  CFIndex v8;
  int v9;
  const UInt8 *v10;
  UInt8 *v11;
  uint64_t v12;
  UInt8 newBytes[2];
  __int16 length;
  char v15;
  char v16;
  __int16 v17;
  CFRange v18;
  CFRange v19;

  location = a2.location;
  *(_WORD *)newBytes = (unsigned __int16)(((*a3 - 1) | 7) + 9) >> 3;
  length = a2.length;
  v15 = a5;
  v16 = a4;
  v17 = 0;
  a2.length = 0;
  CFDataReplaceBytes(a1, a2, newBytes, 8);
  v8 = location + 8;
  v18.location = v8;
  v18.length = 0;
  CFDataReplaceBytes(a1, v18, a3, *a3);
  v9 = ((*a3 - 1) | 7) - *a3;
  if (v9 >= 0)
  {
    v10 = (const UInt8 *)malloc_type_calloc(1uLL, (v9 + 1), 0x6D1A479BuLL);
    if (v10)
    {
      v11 = (UInt8 *)v10;
      v12 = *a3;
      v19.location = v8 + v12;
      v19.length = 0;
      CFDataReplaceBytes(a1, v19, v10, ((v12 - 1) | 7) - v12 + 1);
      free(v11);
    }
  }
}

void NEPFKeySetSADBIPSecIF(CFMutableDataRef theData, CFRange range, char *__s, char *a4, char *a5, __int16 a6)
{
  CFIndex location;
  UInt8 newBytes[2];
  __int16 length;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _DWORD v16[7];
  uint64_t v17;
  CFRange v18;

  location = range.location;
  v17 = *MEMORY[0x1E0C80C00];
  memset(v16, 0, sizeof(v16));
  v15 = 0u;
  v14 = 0u;
  v13 = 0u;
  strcpy((char *)newBytes, "\n");
  length = range.length;
  if (__s)
  {
    strlen(__s);
    __strncpy_chk();
  }
  if (a4)
  {
    strlen(a4);
    __strncpy_chk();
  }
  if (a5)
  {
    strlen(a5);
    __strncpy_chk();
  }
  LOWORD(v16[6]) = a6;
  v18.location = location;
  v18.length = 0;
  CFDataReplaceBytes(theData, v18, newBytes, 80);
}

BOOL NEPFKeySend(NSObject *a1, uint64_t a2, const __CFData *a3)
{
  int handle;
  unint64_t v5;
  unint64_t v6;
  NSObject *v7;
  _BOOL8 result;
  const char *v9;
  uint8_t *v10;
  NSObject *v11;
  uint32_t v12;
  NSObject *v13;
  NSObject *v14;
  int *v15;
  char *v16;
  msghdr v17;
  const UInt8 *BytePtr;
  unint64_t Length;
  uint8_t buf[4];
  char *v21;
  __int16 v22;
  unint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (!a1 || !a2 || !a3)
  {
    v13 = ne_log_obj();
    result = os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    LOWORD(v17.msg_name) = 0;
    v9 = "pfkey send invalid args";
    v10 = (uint8_t *)&v17;
    v11 = v13;
    v12 = 2;
    goto LABEL_12;
  }
  handle = dispatch_source_get_handle(a1);
  BytePtr = CFDataGetBytePtr(a3);
  Length = CFDataGetLength(a3);
  *(_OWORD *)&v17.msg_control = 0u;
  *(_OWORD *)&v17.msg_name = 0u;
  v17.msg_iov = (iovec *)&BytePtr;
  *(_QWORD *)&v17.msg_iovlen = 1;
  v5 = sendmsg(handle, &v17, 0);
  if ((v5 & 0x8000000000000000) != 0)
  {
    v14 = ne_log_obj();
    result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v15 = __error();
    v16 = strerror(*v15);
    *(_DWORD *)buf = 136315138;
    v21 = v16;
    v9 = "PFKey write error: %s";
    v10 = buf;
    v11 = v14;
    v12 = 12;
    goto LABEL_12;
  }
  v6 = v5;
  if (v5 < Length)
  {
    v7 = ne_log_obj();
    result = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    *(_DWORD *)buf = 134218240;
    v21 = (char *)v6;
    v22 = 2048;
    v23 = Length;
    v9 = "PFKey failed to write an entire message (%zd < %zu)";
    v10 = buf;
    v11 = v7;
    v12 = 22;
LABEL_12:
    _os_log_error_impl(&dword_19BD16000, v11, OS_LOG_TYPE_ERROR, v9, v10, v12);
    return 0;
  }
  return 1;
}

BOOL NEPFKeySendUpdate(NSObject *a1, uint64_t a2, int a3, char a4, const UInt8 *a5, const UInt8 *a6, unsigned int a7, int a8, unsigned __int8 a9, const UInt8 *a10, char a11, unsigned __int16 a12, char a13, unsigned __int16 a14, int a15, unsigned __int16 a16, int a17, int a18, unsigned int a19, int a20,unsigned int a21,int a22,unsigned int a23,int a24,int a25,unsigned __int16 a26,unsigned __int16 a27,unsigned __int16 a28,__int16 a29,char a30,unint64_t a31)
{
  NSObject *v31;
  uint8_t buf[4];
  unsigned int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v31 = ne_log_obj();
  if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    v42 = bswap32(a7);
    _os_log_impl(&dword_19BD16000, v31, OS_LOG_TYPE_INFO, "Sending PFKey update SPI %04X", buf, 8u);
  }
  return pfkey_send_x1(a1, a2, 2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a19,
           a21,
           a23,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31);
}

BOOL pfkey_send_x1(NSObject *a1, uint64_t a2, int a3, int a4, char a5, const UInt8 *a6, const UInt8 *a7, int a8, int a9, unsigned __int8 a10, const UInt8 *a11, char a12, unsigned __int16 a13, char a14, unsigned __int16 a15, int a16, unsigned __int16 a17, int a18, unsigned int a19, unsigned int a20,unsigned int a21,int a22,unsigned __int16 a23,unsigned __int16 a24,unsigned __int16 a25,__int16 a26,char a27,__int128 a28)
{
  int v31;
  char v37;
  NSObject *v38;
  const char *v39;
  const char *v40;
  NSObject *v41;
  uint32_t v42;
  NSObject *v43;
  const char *v44;
  int v45;
  int v46;
  NSObject *v47;
  const char *v48;
  int v49;
  __CFData *v50;
  int v51;
  _BOOL8 v52;
  NSObject *v53;
  const __CFData *Mutable;
  unsigned __int16 v56;
  pid_t v57;
  CFIndex Length;
  char v59;
  uint8_t v60;
  CFDataRef v61;
  uint8_t buf[4];
  _BYTE v63[20];
  unint64_t v64;
  uint64_t v65;
  CFRange v66;
  CFRange v67;
  CFRange v68;
  CFRange v69;
  CFRange v70;
  CFRange v71;
  CFRange v72;
  CFRange v73;
  CFRange v74;
  CFRange v75;

  v65 = *MEMORY[0x1E0C80C00];
  v61 = 0;
  if (!a6 || !a7)
  {
    v38 = ne_log_obj();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      v39 = "sadb update";
      if (a3 == 3)
        v39 = "sadb add";
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)v63 = v39;
      v40 = "pfkey %s, source/destination is NULL";
      v41 = v38;
      v42 = 12;
      goto LABEL_25;
    }
    goto LABEL_26;
  }
  v31 = a6[1];
  if (v31 != a7[1])
  {
    v43 = ne_log_obj();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      v44 = "sadb update";
      v45 = a6[1];
      v46 = a7[1];
      if (a3 == 3)
        v44 = "sadb add";
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)v63 = v44;
      *(_WORD *)&v63[8] = 1024;
      *(_DWORD *)&v63[10] = v45;
      *(_WORD *)&v63[14] = 1024;
      *(_DWORD *)&v63[16] = v46;
      v40 = "pfkey %s, source IP family(%d) does not match destination IP family(%d)";
      v41 = v43;
      v42 = 24;
      goto LABEL_25;
    }
LABEL_26:
    v50 = 0;
    v51 = 0;
LABEL_27:
    v52 = 0;
    goto LABEL_28;
  }
  if (v31 != 2)
  {
    if (v31 == 30)
    {
      v37 = 0x80;
      goto LABEL_16;
    }
    v47 = ne_log_obj();
    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
    {
      v48 = "sadb update";
      v49 = a6[1];
      if (a3 == 3)
        v48 = "sadb add";
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)v63 = v48;
      *(_WORD *)&v63[8] = 1024;
      *(_DWORD *)&v63[10] = v49;
      v40 = "pfkey %s, invalid source IP family %d";
      v41 = v47;
      v42 = 18;
LABEL_25:
      _os_log_error_impl(&dword_19BD16000, v41, OS_LOG_TYPE_ERROR, v40, buf, v42);
      goto LABEL_26;
    }
    goto LABEL_26;
  }
  v37 = 32;
LABEL_16:
  if (a4 == 2)
  {
    v60 = a3;
    v51 = 0;
    v50 = 0;
    if (!a12)
    {
      v52 = 0;
      if (!a14)
        goto LABEL_28;
      goto LABEL_37;
    }
    goto LABEL_46;
  }
  if (a4 == 9)
  {
    v60 = a3;
    v51 = 0;
    v50 = 0;
    if (a12)
    {
      v52 = 0;
      if (a14)
        goto LABEL_28;
      goto LABEL_37;
    }
LABEL_46:
    v52 = 0;
    goto LABEL_28;
  }
  if (a4 != 3)
    goto LABEL_26;
  v60 = a3;
  if (!a12)
    goto LABEL_26;
LABEL_37:
  v59 = v37;
  v51 = ((*a6 - 1) | 7) + ((a13 - 1) | 7) + ((a15 - 1) | 7) + 236 + ((*a7 - 1) | 7);
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], ((*a6 - 1) | 7) + ((a13 - 1) | 7) + ((a15 - 1) | 7) + 236 + ((*a7 - 1) | 7));
  v50 = Mutable;
  v61 = Mutable;
  if (!Mutable)
    goto LABEL_27;
  v66.location = CFDataGetLength(Mutable);
  *(_DWORD *)buf = 65539;
  *(_DWORD *)v63 = a8;
  *(_WORD *)&v63[4] = a10;
  v63[6] = a14;
  v63[7] = a12;
  *(_DWORD *)&v63[8] = a16;
  *(_WORD *)&v63[18] = __rev16(a23);
  *(_DWORD *)&v63[12] = __PAIR32__(a25, a24);
  *(_WORD *)&v63[16] = a26;
  v66.length = 0;
  CFDataReplaceBytes(v50, v66, buf, 24);
  v67.location = CFDataGetLength(v50);
  *(_DWORD *)buf = 1245186;
  v63[0] = a5;
  *(_WORD *)&v63[6] = 0;
  *(_DWORD *)&v63[8] = a9;
  v63[1] = a27;
  *(_DWORD *)&v63[2] = a17 | 1;
  v67.length = 0;
  CFDataReplaceBytes(v50, v67, buf, 16);
  v68.location = CFDataGetLength(v50);
  v68.length = 5;
  NEPFKeySetSADBAddr(v50, v68, a6, v59, 255);
  v69.location = CFDataGetLength(v50);
  v69.length = 6;
  NEPFKeySetSADBAddr(v50, v69, a7, v59, 255);
  if (a4 != 9 && a12)
  {
    v70.location = CFDataGetLength(v50);
    v70.length = 9;
    NEPFKeySetSADBKey(v50, v70, a11, a13);
  }
  if (a14)
  {
    v71.location = CFDataGetLength(v50);
    v71.length = 8;
    NEPFKeySetSADBKey(v50, v71, &a11[a13], a15);
  }
  if (a28 != 0)
  {
    v72.location = CFDataGetLength(v50);
    v72.length = 22;
    NEPFKeySetSADBIPSecIF(v50, v72, 0, *((char **)&a28 + 1), (char *)a28, 0);
  }
  v73.location = CFDataGetLength(v50);
  *(_DWORD *)buf = 196612;
  *(_DWORD *)v63 = a18;
  *(_QWORD *)&v63[4] = a19;
  *(_QWORD *)&v63[12] = a20;
  v64 = a21;
  v73.length = 0;
  CFDataReplaceBytes(v50, v73, buf, 32);
  v74.location = CFDataGetLength(v50);
  *(_DWORD *)buf = 262148;
  *(_DWORD *)v63 = 80 * a18 / 0x64u;
  *(_QWORD *)&v63[4] = 80 * a19 / 0x64uLL;
  *(_QWORD *)&v63[12] = 80 * a20 / 0x64uLL;
  v64 = 80 * a21 / 0x64uLL;
  v74.length = 0;
  CFDataReplaceBytes(v50, v74, buf, 32);
  v56 = CFDataGetLength(v50) + 16;
  v57 = getpid();
  buf[0] = 2;
  buf[1] = v60;
  buf[2] = 0;
  buf[3] = a4;
  *(_DWORD *)v63 = v56 >> 3;
  *(_DWORD *)&v63[4] = a22;
  *(_DWORD *)&v63[8] = v57;
  v75.location = 0;
  v75.length = 0;
  CFDataReplaceBytes(v50, v75, buf, 16);
  v52 = NEPFKeySend(a1, a2, v50);
LABEL_28:
  if (CFDataGetLength(v50) > v51)
  {
    v53 = ne_log_obj();
    if (os_log_type_enabled(v53, OS_LOG_TYPE_FAULT))
    {
      Length = CFDataGetLength(v50);
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)v63 = v51;
      *(_WORD *)&v63[8] = 2048;
      *(_QWORD *)&v63[10] = Length;
      _os_log_fault_impl(&dword_19BD16000, v53, OS_LOG_TYPE_FAULT, "pfkey_send_x1: calculated message length (%lu) is less than final message len (%lu)", buf, 0x16u);
    }
  }
  myCFDataReleaseReset(&v61);
  return v52;
}

void NEPFKeySetSADBKey(__CFData *a1, CFRange a2, const UInt8 *a3, unsigned int a4)
{
  CFIndex location;
  int v8;
  CFIndex v9;
  uint64_t v10;
  size_t v11;
  const UInt8 *v12;
  UInt8 *v13;
  UInt8 newBytes[2];
  __int16 length;
  __int16 v16;
  __int16 v17;
  CFRange v18;
  CFRange v19;

  location = a2.location;
  v8 = (a4 - 1) | 7;
  *(_WORD *)newBytes = (unsigned __int16)(((a4 - 1) | 7) + 9) >> 3;
  length = a2.length;
  v16 = 8 * a4;
  v17 = 0;
  a2.length = 0;
  CFDataReplaceBytes(a1, a2, newBytes, 8);
  v9 = location + 8;
  v10 = a4;
  v18.location = v9;
  v18.length = 0;
  CFDataReplaceBytes(a1, v18, a3, a4);
  if ((int)(v8 - a4) >= 0)
  {
    v11 = v8 - a4 + 1;
    v12 = (const UInt8 *)malloc_type_calloc(1uLL, v11, 0x67F34D19uLL);
    if (v12)
    {
      v13 = (UInt8 *)v12;
      v19.location = v9 + v10;
      v19.length = 0;
      CFDataReplaceBytes(a1, v19, v12, v11);
      free(v13);
    }
  }
}

BOOL NEPFKeySendAdd(NSObject *a1, uint64_t a2, int a3, char a4, const UInt8 *a5, const UInt8 *a6, unsigned int a7, int a8, unsigned __int8 a9, const UInt8 *a10, char a11, unsigned __int16 a12, char a13, unsigned __int16 a14, int a15, unsigned __int16 a16, int a17, int a18, unsigned int a19, int a20,unsigned int a21,int a22,unsigned int a23,int a24,int a25,unsigned __int16 a26,unsigned __int16 a27,unsigned __int16 a28,__int16 a29,char a30,__int128 a31)
{
  NSObject *v31;
  uint8_t buf[4];
  unsigned int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v31 = ne_log_obj();
  if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    v42 = bswap32(a7);
    _os_log_impl(&dword_19BD16000, v31, OS_LOG_TYPE_INFO, "Sending PFKey add SPI %04X", buf, 8u);
  }
  return pfkey_send_x1(a1, a2, 3, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a19,
           a21,
           a23,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31);
}

BOOL NEPFKeySendMigrate(NSObject *a1, uint64_t a2, uint8_t a3, unsigned int a4, pid_t a5, unsigned int a6, __int16 a7, __int16 a8, __int16 a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, uint64_t a14, char *a15, char *a16)
{
  NSObject *v23;
  _BOOL8 v24;
  int v25;
  int v26;
  char v27;
  char v28;
  const __CFData *Mutable;
  const void *v31;
  unsigned __int16 v32;
  pid_t v33;
  __int128 v34;
  char v35;
  char v36;
  uint8_t buf[4];
  int v39;
  int v40;
  pid_t v41;
  __int16 v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  uint64_t v46;
  CFRange v47;
  CFRange v48;
  CFRange v49;
  CFRange v50;
  CFRange v51;
  CFRange v52;
  CFRange v53;
  CFRange v54;

  v46 = *MEMORY[0x1E0C80C00];
  v23 = ne_log_obj();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    v39 = bswap32(a4);
    _os_log_impl(&dword_19BD16000, v23, OS_LOG_TYPE_INFO, "Sending PFKey migrate SPI %04X", buf, 8u);
  }
  v24 = 0;
  if (a10 && a11 && a13 && a14)
  {
    v25 = *(unsigned __int8 *)(a10 + 1);
    if (v25 != *(unsigned __int8 *)(a11 + 1))
      return 0;
    v26 = *(unsigned __int8 *)(a13 + 1);
    if (v26 != *(unsigned __int8 *)(a14 + 1))
      return 0;
    if (v25 == 2)
    {
      v27 = 32;
    }
    else
    {
      if (v25 != 30)
        return 0;
      v27 = 0x80;
    }
    if (v26 == 2)
    {
      v35 = v27;
      v28 = 32;
LABEL_19:
      v36 = v28;
      Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
      v24 = (_BOOL8)Mutable;
      if (Mutable)
      {
        *(_QWORD *)&v34 = a16;
        *((_QWORD *)&v34 + 1) = a15;
        v47.location = CFDataGetLength(Mutable);
        *(_DWORD *)buf = 65539;
        v39 = a4;
        v40 = 0;
        v41 = a5;
        v45 = __rev16(a6);
        v42 = a7;
        v43 = a8;
        v44 = a9;
        v47.length = 0;
        CFDataReplaceBytes((CFMutableDataRef)v24, v47, buf, 24);
        v48.location = CFDataGetLength((CFDataRef)v24);
        v48.length = 5;
        NEPFKeySetSADBAddr((__CFData *)v24, v48, (const UInt8 *)a10, v35, 255);
        v49.location = CFDataGetLength((CFDataRef)v24);
        v49.length = 6;
        NEPFKeySetSADBAddr((__CFData *)v24, v49, (const UInt8 *)a11, v35, 255);
        v50.location = CFDataGetLength((CFDataRef)v24);
        v50.length = 27;
        NEPFKeySetSADBAddr((__CFData *)v24, v50, (const UInt8 *)a13, v36, 255);
        v51.location = CFDataGetLength((CFDataRef)v24);
        v51.length = 28;
        NEPFKeySetSADBAddr((__CFData *)v24, v51, (const UInt8 *)a14, v36, 255);
        v31 = (const void *)v24;
        if (a12)
        {
          v52.location = CFDataGetLength((CFDataRef)v24);
          v52.length = 22;
          NEPFKeySetSADBIPSecIF((CFMutableDataRef)v24, v52, 0, 0, a12, 0);
        }
        if (v34 != 0)
        {
          v53.location = CFDataGetLength((CFDataRef)v24);
          v53.length = 29;
          NEPFKeySetSADBIPSecIF((CFMutableDataRef)v24, v53, 0, a16, a15, 0);
        }
        v32 = CFDataGetLength((CFDataRef)v24) + 16;
        v33 = getpid();
        *(_WORD *)buf = 6658;
        buf[2] = 0;
        buf[3] = a3;
        v39 = v32 >> 3;
        v40 = 0;
        v41 = v33;
        v54.location = 0;
        v54.length = 0;
        CFDataReplaceBytes((CFMutableDataRef)v24, v54, buf, 16);
        v24 = NEPFKeySend(a1, a2, (const __CFData *)v24);
        CFRelease(v31);
      }
      return v24;
    }
    if (v26 == 30)
    {
      v35 = v27;
      v28 = 0x80;
      goto LABEL_19;
    }
    return 0;
  }
  return v24;
}

BOOL NEPFKeySendDelete(NSObject *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, char *a8)
{
  NSObject *v15;
  _DWORD v17[2];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v15 = ne_log_obj();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    v17[0] = 67109120;
    v17[1] = bswap32(a7);
    _os_log_impl(&dword_19BD16000, v15, OS_LOG_TYPE_INFO, "Sending PFKey delete SPI %04X", (uint8_t *)v17, 8u);
  }
  return pfkey_send_x2(a1, a2, 4, a3, a5, a6, a7, a8);
}

BOOL pfkey_send_x2(NSObject *a1, uint64_t a2, int a3, char a4, uint64_t a5, uint64_t a6, int a7, char *a8)
{
  int v11;
  char v17;
  NSObject *v18;
  const char *v19;
  const char *v20;
  NSObject *v21;
  uint32_t v22;
  NSObject *v23;
  const char *v24;
  int v25;
  int v26;
  const __CFData *Mutable;
  __CFData *v28;
  unsigned __int16 v29;
  pid_t v30;
  _BOOL8 v31;
  NSObject *v32;
  const char *v33;
  int v34;
  int v36;
  _BYTE v37[20];
  uint64_t v38;
  CFRange v39;
  CFRange v40;
  CFRange v41;
  CFRange v42;
  CFRange v43;

  v38 = *MEMORY[0x1E0C80C00];
  if (!a5 || !a6)
  {
    v18 = ne_log_obj();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v19 = "sadb get";
      if (a3 == 4)
        v19 = "sadb delete";
      v36 = 136315138;
      *(_QWORD *)v37 = v19;
      v20 = "pfkey %s, source/destination is NULL";
      v21 = v18;
      v22 = 12;
      goto LABEL_24;
    }
    return 0;
  }
  v11 = *(unsigned __int8 *)(a5 + 1);
  if (v11 != *(unsigned __int8 *)(a6 + 1))
  {
    v23 = ne_log_obj();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      v24 = "sadb get";
      v25 = *(unsigned __int8 *)(a5 + 1);
      v26 = *(unsigned __int8 *)(a6 + 1);
      if (a3 == 4)
        v24 = "sadb delete";
      v36 = 136315650;
      *(_QWORD *)v37 = v24;
      *(_WORD *)&v37[8] = 1024;
      *(_DWORD *)&v37[10] = v25;
      *(_WORD *)&v37[14] = 1024;
      *(_DWORD *)&v37[16] = v26;
      v20 = "pfkey %s, source IP family(%d) does not match destination IP family(%d)";
      v21 = v23;
      v22 = 24;
      goto LABEL_24;
    }
    return 0;
  }
  if (v11 != 2)
  {
    if (v11 == 30)
    {
      v17 = 0x80;
      goto LABEL_16;
    }
    v32 = ne_log_obj();
    if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      return 0;
    v33 = "sadb get";
    v34 = *(unsigned __int8 *)(a5 + 1);
    if (a3 == 4)
      v33 = "sadb delete";
    v36 = 136315394;
    *(_QWORD *)v37 = v33;
    *(_WORD *)&v37[8] = 1024;
    *(_DWORD *)&v37[10] = v34;
    v20 = "pfkey %s, invalid source IP family %d";
    v21 = v32;
    v22 = 18;
LABEL_24:
    _os_log_error_impl(&dword_19BD16000, v21, OS_LOG_TYPE_ERROR, v20, (uint8_t *)&v36, v22);
    return 0;
  }
  v17 = 32;
LABEL_16:
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (!Mutable)
    return 0;
  v28 = Mutable;
  v39.location = CFDataGetLength(Mutable);
  v36 = 65539;
  *(_DWORD *)v37 = a7;
  *(_QWORD *)&v37[4] = 0;
  *(_QWORD *)&v37[12] = 0;
  v39.length = 0;
  CFDataReplaceBytes(v28, v39, (const UInt8 *)&v36, 24);
  v40.location = CFDataGetLength(v28);
  v40.length = 5;
  NEPFKeySetSADBAddr(v28, v40, (const UInt8 *)a5, v17, 255);
  v41.location = CFDataGetLength(v28);
  v41.length = 6;
  NEPFKeySetSADBAddr(v28, v41, (const UInt8 *)a6, v17, 255);
  if (a8)
  {
    v42.location = CFDataGetLength(v28);
    v42.length = 22;
    NEPFKeySetSADBIPSecIF(v28, v42, 0, 0, a8, 0);
  }
  v29 = CFDataGetLength(v28) + 16;
  v30 = getpid();
  LOBYTE(v36) = 2;
  *(_WORD *)((char *)&v36 + 1) = a3;
  HIBYTE(v36) = a4;
  *(_QWORD *)v37 = v29 >> 3;
  *(_DWORD *)&v37[8] = v30;
  v43.location = 0;
  v43.length = 0;
  CFDataReplaceBytes(v28, v43, (const UInt8 *)&v36, 16);
  v31 = NEPFKeySend(a1, a2, v28);
  CFRelease(v28);
  return v31;
}

BOOL NEPFKeySendDeleteAll(NSObject *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v8;
  char v12;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  uint32_t v16;
  NSObject *v17;
  int v18;
  int v19;
  CFMutableDataRef Mutable;
  const __CFData *v21;
  NSObject *v22;
  unsigned __int16 v23;
  pid_t v24;
  _BOOL8 v25;
  NSObject *v26;
  int v27;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  CFRange v33;
  CFRange v34;
  CFRange v35;

  v32 = *MEMORY[0x1E0C80C00];
  if (!a5 || !a6)
  {
    v13 = ne_log_obj();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v29) = 0;
      v14 = "pfkey delete all, source/destination is NULL";
      v15 = v13;
      v16 = 2;
      goto LABEL_18;
    }
    return 0;
  }
  v8 = *(unsigned __int8 *)(a5 + 1);
  if (v8 != *(unsigned __int8 *)(a6 + 1))
  {
    v17 = ne_log_obj();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18 = *(unsigned __int8 *)(a5 + 1);
      v19 = *(unsigned __int8 *)(a6 + 1);
      v29 = 67109376;
      v30 = v18;
      LOWORD(v31) = 1024;
      *(_DWORD *)((char *)&v31 + 2) = v19;
      v14 = "pfkey delete all, source IP family(%d) does not match destination IP family(%d)";
      v15 = v17;
      v16 = 14;
      goto LABEL_18;
    }
    return 0;
  }
  if (v8 != 2)
  {
    if (v8 == 30)
    {
      v12 = 0x80;
      goto LABEL_12;
    }
    v26 = ne_log_obj();
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      return 0;
    v27 = *(unsigned __int8 *)(a5 + 1);
    v29 = 67109120;
    v30 = v27;
    v14 = "pfkey delete all, invalid source IP family %d";
    v15 = v26;
    v16 = 8;
LABEL_18:
    _os_log_error_impl(&dword_19BD16000, v15, OS_LOG_TYPE_ERROR, v14, (uint8_t *)&v29, v16);
    return 0;
  }
  v12 = 32;
LABEL_12:
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (!Mutable)
    return 0;
  v21 = Mutable;
  v22 = ne_log_obj();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
  {
    LOWORD(v29) = 0;
    _os_log_impl(&dword_19BD16000, v22, OS_LOG_TYPE_INFO, "Sending PFKey delete all", (uint8_t *)&v29, 2u);
  }
  v33.location = CFDataGetLength(v21);
  v33.length = 5;
  NEPFKeySetSADBAddr(v21, v33, (const UInt8 *)a5, v12, 255);
  v34.location = CFDataGetLength(v21);
  v34.length = 6;
  NEPFKeySetSADBAddr(v21, v34, (const UInt8 *)a6, v12, 255);
  v23 = CFDataGetLength(v21) + 16;
  v24 = getpid();
  LOWORD(v29) = 1026;
  BYTE2(v29) = 0;
  HIBYTE(v29) = a3;
  v30 = v23 >> 3;
  LODWORD(v31) = 0;
  HIDWORD(v31) = v24;
  v35.location = 0;
  v35.length = 0;
  CFDataReplaceBytes(v21, v35, (const UInt8 *)&v29, 16);
  v25 = NEPFKeySend(a1, a2, v21);
  CFRelease(v21);
  return v25;
}

BOOL NEPFKeySendGet(NSObject *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, char *a8)
{
  NSObject *v15;
  _DWORD v17[2];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v15 = ne_log_obj();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    v17[0] = 67109120;
    v17[1] = bswap32(a7);
    _os_log_impl(&dword_19BD16000, v15, OS_LOG_TYPE_INFO, "Sending PFKey get for SPI %04X", (uint8_t *)v17, 8u);
  }
  return pfkey_send_x2(a1, a2, 5, a3, a5, a6, a7, a8);
}

BOOL NEPFKeySendRegister(NSObject *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  void *v8;
  void *v9;

  v6 = 0;
  if (a3)
  {
    while (supported_map[v6] != a3)
    {
      if (++v6 == 3)
        return 0;
    }
    v9 = (void *)ipsec_supported[v6];
    if (v9)
    {
      free(v9);
      ipsec_supported[v6] = 0;
    }
  }
  else
  {
    do
    {
      v8 = *(void **)((char *)ipsec_supported + v6);
      if (v8)
      {
        free(v8);
        *(uint64_t *)((char *)ipsec_supported + v6) = 0;
      }
      v6 += 8;
    }
    while (v6 != 24);
  }
  return pfkey_send_x3(a1, a2, 7, a3);
}

BOOL pfkey_send_x3(NSObject *a1, uint64_t a2, int a3, unsigned int a4)
{
  NSObject *v8;
  const char *v9;
  NSObject *v10;
  uint32_t v11;
  const __CFData *Mutable;
  __CFData *v13;
  _BOOL8 v14;
  NSObject *v15;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  CFRange v21;

  v20 = *MEMORY[0x1E0C80C00];
  if (a3 == 11)
  {
    if (a4 >= 2)
    {
      v8 = ne_log_obj();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        v17 = 67109120;
        v18 = a4;
        v9 = "pfkey sadb promisc failed, satype %u";
        v10 = v8;
        v11 = 8;
LABEL_13:
        _os_log_error_impl(&dword_19BD16000, v10, OS_LOG_TYPE_ERROR, v9, (uint8_t *)&v17, v11);
        return 0;
      }
      return 0;
    }
  }
  else if (a4 > 9 || ((1 << a4) & 0x20D) == 0)
  {
    v15 = ne_log_obj();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v17 = 67109376;
      v18 = a3;
      LOWORD(v19) = 1024;
      *(_DWORD *)((char *)&v19 + 2) = a4;
      v9 = "pfkey %d, sa type %u";
      v10 = v15;
      v11 = 14;
      goto LABEL_13;
    }
    return 0;
  }
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (!Mutable)
    return 0;
  v13 = Mutable;
  LOBYTE(v17) = 2;
  *(_WORD *)((char *)&v17 + 1) = a3;
  HIBYTE(v17) = a4;
  v18 = (unsigned __int16)(CFDataGetLength(Mutable) + 16) >> 3;
  LODWORD(v19) = 0;
  HIDWORD(v19) = getpid();
  v21.location = 0;
  v21.length = 0;
  CFDataReplaceBytes(v13, v21, (const UInt8 *)&v17, 16);
  v14 = NEPFKeySend(a1, a2, v13);
  CFRelease(v13);
  return v14;
}

uint64_t pfkey_recv_register(int a1)
{
  pid_t v2;
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  unsigned __int16 v6;
  uint64_t v7;

  v2 = getpid();
  while (1)
  {
    v3 = pfkey_recv(a1);
    if (!v3)
      return 0xFFFFFFFFLL;
    v4 = v3;
    if (*((_BYTE *)v3 + 1) == 7 && *((_DWORD *)v3 + 3) == v2)
      break;
    free(v3);
  }
  v6 = 8 * v3[2];
  v3[2] = v6;
  v7 = pfkey_set_supported((uint64_t)v3, v6 & 0xFFF8);
  free(v4);
  return v7;
}

unsigned __int16 *pfkey_recv(int a1)
{
  unint64_t v2;
  size_t v3;
  unsigned __int16 *v4;
  ssize_t v5;
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  while (1)
  {
    v2 = recv(a1, v7, 0x10uLL, 2);
    if ((v2 & 0x8000000000000000) == 0)
      break;
    if (*__error() != 4)
      return 0;
  }
  if (v2 <= 0xF)
  {
    recv(a1, v7, 0x10uLL, 0);
    return 0;
  }
  v3 = 8 * WORD2(v7[0]);
  v4 = (unsigned __int16 *)malloc_type_calloc(1uLL, v3, 0xD09F3777uLL);
  if (v4)
  {
    while (1)
    {
      v5 = recv(a1, v4, v3, 0);
      if ((v5 & 0x8000000000000000) == 0)
        break;
      if (*__error() != 4)
        goto LABEL_13;
    }
    if (v5 != v3 || v3 != 8 * v4[2])
    {
LABEL_13:
      free(v4);
      return 0;
    }
  }
  return v4;
}

uint64_t pfkey_set_supported(uint64_t a1, unsigned int a2)
{
  unint64_t v2;
  unsigned __int16 *v3;
  uint64_t v5;
  int v7;
  unsigned __int16 v8;
  uint64_t v9;
  void *v10;
  void *v11;

  if (*(unsigned __int16 *)(a1 + 4) != a2)
    return 0xFFFFFFFFLL;
  v2 = a1 + a2;
  v3 = (unsigned __int16 *)(a1 + 16);
  if (a2 >= 0x18)
  {
    do
    {
      v5 = *v3;
      if (!*v3 || v2 < (unint64_t)v3 + v5)
        break;
      v7 = v3[1];
      if ((v7 & 0xFFFE) != 0xE)
        return 0xFFFFFFFFLL;
      v8 = 8 * v5;
      *v3 = v8;
      if (v7 == 14)
      {
        v9 = 0;
      }
      else
      {
        if (v7 != 15)
          return 0xFFFFFFFFLL;
        v9 = 1;
      }
      v10 = (void *)ipsec_supported[v9];
      if (v10)
      {
        free(v10);
        v8 = *v3;
      }
      v11 = malloc_type_malloc(v8, 0x1D2A150uLL);
      ipsec_supported[v9] = (uint64_t)v11;
      if (!v11)
        return 0xFFFFFFFFLL;
      memcpy(v11, v3, *v3);
      v3 = (unsigned __int16 *)((char *)v3 + *v3);
    }
    while ((unint64_t)v3 < v2 && v2 >= (unint64_t)(v3 + 4));
  }
  if (v3 == (unsigned __int16 *)v2)
    return 0;
  else
    return 0xFFFFFFFFLL;
}

BOOL NEPFKeySendFlush(NSObject *a1, uint64_t a2, unsigned int a3)
{
  return pfkey_send_x3(a1, a2, 9, a3);
}

BOOL NEPFKeySendDump(NSObject *a1, uint64_t a2, unsigned int a3)
{
  return pfkey_send_x3(a1, a2, 10, a3);
}

BOOL NEPFKeySendPromiscToggle(NSObject *a1, uint64_t a2, int a3)
{
  return pfkey_send_x3(a1, a2, 11, a3 != 0);
}

BOOL NEPFKeySendSPDAdd(NSObject *a1, uint64_t a2, uint64_t a3, const UInt8 *a4, unsigned int a5, uint64_t a6, const UInt8 *a7, unsigned int a8, char a9, __int16 a10, unsigned __int16 a11, char a12, __int16 a13, char a14, char a15, __int16 a16, const UInt8 *a17, const UInt8 *a18, unsigned int a19, char *a20,char *a21,char *a22,__int16 a23)
{
  int v25;
  unsigned int v32;
  NSObject *v33;
  const char *v34;
  NSObject *v35;
  uint32_t v36;
  NSObject *v37;
  int v38;
  int v39;
  BOOL v40;
  int v41;
  const __CFData *Mutable;
  __CFData *v43;
  CFRange v44;
  __CFData *v45;
  const UInt8 *v46;
  NSObject *v47;
  int v48;
  NSObject *v49;
  _BOOL8 v50;
  CFRange v52;
  __CFData *v53;
  const UInt8 *v54;
  CFIndex Length;
  int v56;
  CFIndex v57;
  unsigned __int16 v58;
  pid_t v59;
  int v60;
  UInt8 newBytes[2];
  __int16 v62;
  char v63;
  char v64;
  __int16 v65;
  uint8_t buf[4];
  __int128 v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  CFRange v71;
  CFRange v72;
  CFRange v73;
  CFRange v74;
  CFRange v75;
  CFRange v76;
  CFRange v77;

  v70 = *MEMORY[0x1E0C80C00];
  if (!a3 || !a6)
  {
    v33 = ne_log_obj();
    if (!os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      return 0;
    *(_WORD *)buf = 0;
    v34 = "pfkey spd add, source/destination is NULL";
    v35 = v33;
    v36 = 2;
LABEL_27:
    _os_log_error_impl(&dword_19BD16000, v35, OS_LOG_TYPE_ERROR, v34, buf, v36);
    return 0;
  }
  v25 = *(unsigned __int8 *)(a3 + 1);
  if (v25 != *(unsigned __int8 *)(a6 + 1))
  {
    v37 = ne_log_obj();
    if (!os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      return 0;
    v38 = *(unsigned __int8 *)(a3 + 1);
    v39 = *(unsigned __int8 *)(a6 + 1);
    *(_DWORD *)buf = 67109376;
    LODWORD(v67) = v38;
    WORD2(v67) = 1024;
    *(_DWORD *)((char *)&v67 + 6) = v39;
    v34 = "pfkey spd add, source IP family(%d) does not match destination IP family(%d)";
    v35 = v37;
    v36 = 14;
    goto LABEL_27;
  }
  if (v25 == 2)
  {
    v32 = 32;
    goto LABEL_12;
  }
  if (v25 != 30)
  {
    v47 = ne_log_obj();
    if (!os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      return 0;
    v48 = *(unsigned __int8 *)(a3 + 1);
    *(_DWORD *)buf = 67109120;
    LODWORD(v67) = v48;
    v34 = "pfkey spd add, invalid source IP family %d";
    v35 = v47;
    v36 = 8;
    goto LABEL_27;
  }
  v32 = 128;
LABEL_12:
  if (v32 < a5 || v32 < a8)
  {
    v49 = ne_log_obj();
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109632;
      LODWORD(v67) = v32;
      WORD2(v67) = 1024;
      *(_DWORD *)((char *)&v67 + 6) = a5;
      WORD5(v67) = 1024;
      HIDWORD(v67) = a8;
      v34 = "pfkey spd add, plen %u prefs len %u prefd len %u";
      v35 = v49;
      v36 = 20;
      goto LABEL_27;
    }
    return 0;
  }
  if ((unint64_t)a20 | (unint64_t)a21 | (unint64_t)a22)
    v40 = 0;
  else
    v40 = a23 == 0;
  v41 = !v40;
  v60 = v41;
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (!Mutable)
    return 0;
  v43 = Mutable;
  v44.location = CFDataGetLength(Mutable);
  v45 = v43;
  if (a4)
  {
    v44.length = 23;
    NEPFKeySetSADBAddr(v43, v44, (const UInt8 *)a3, a5, a9);
    v44.location = CFDataGetLength(v43);
    v45 = v43;
    v44.length = 24;
    v46 = a4;
  }
  else
  {
    v44.length = 5;
    v46 = (const UInt8 *)a3;
  }
  NEPFKeySetSADBAddr(v45, v44, v46, a5, a9);
  v52.location = CFDataGetLength(v43);
  v53 = v43;
  if (a7)
  {
    v52.length = 25;
    NEPFKeySetSADBAddr(v43, v52, (const UInt8 *)a6, a8, a9);
    v52.location = CFDataGetLength(v43);
    v53 = v43;
    v52.length = 26;
    v54 = a7;
  }
  else
  {
    v52.length = 6;
    v54 = (const UInt8 *)a6;
  }
  NEPFKeySetSADBAddr(v53, v52, v54, a8, a9);
  if (v60)
  {
    v71.location = CFDataGetLength(v43);
    v71.length = 22;
    NEPFKeySetSADBIPSecIF(v43, v71, a21, a22, a20, a23);
  }
  v72.location = CFDataGetLength(v43);
  *(_DWORD *)buf = 196612;
  v67 = 0uLL;
  v68 = 0;
  v69 = 0;
  v72.length = 0;
  CFDataReplaceBytes(v43, v72, buf, 32);
  Length = CFDataGetLength(v43);
  v56 = 0;
  if (a11 == 2)
  {
    v56 = 8;
    if (a17)
    {
      if (a18)
        v56 = *a17 + *a18 + 8;
    }
  }
  DWORD2(v67) = 0;
  *(_WORD *)buf = (v56 + 16) >> 3;
  *(_WORD *)&buf[2] = 18;
  *(_QWORD *)&v67 = a11;
  BYTE2(v67) = a12;
  v73.location = Length;
  v73.length = 0;
  CFDataReplaceBytes(v43, v73, buf, 16);
  if (a11 == 2)
  {
    *(_WORD *)newBytes = v56;
    v62 = a13;
    v63 = a14;
    v64 = a15;
    v65 = a16;
    v74.location = Length + 16;
    v74.length = 0;
    CFDataReplaceBytes(v43, v74, newBytes, 8);
    if (a17)
    {
      if (a18)
      {
        v57 = Length + 24;
        v75.location = v57;
        v75.length = 0;
        CFDataReplaceBytes(v43, v75, a17, *a17);
        v76.location = v57 + *a17;
        v76.length = 0;
        CFDataReplaceBytes(v43, v76, a18, *a18);
      }
    }
  }
  v58 = CFDataGetLength(v43) + 16;
  v59 = getpid();
  *(_DWORD *)buf = 3586;
  LODWORD(v67) = v58 >> 3;
  *(_QWORD *)((char *)&v67 + 4) = __PAIR64__(v59, a19);
  v77.location = 0;
  v77.length = 0;
  CFDataReplaceBytes(v43, v77, buf, 16);
  v50 = NEPFKeySend(a1, a2, v43);
  CFRelease(v43);
  return v50;
}

BOOL NEPFKeySendSPDDelete(NSObject *a1, uint64_t a2, int a3)
{
  return pfkey_send_x5(a1, a2, 0x16u, a3);
}

BOOL pfkey_send_x5(NSObject *a1, uint64_t a2, UInt8 a3, int a4)
{
  __CFData *Mutable;
  const __CFData *v9;
  unsigned __int16 v10;
  pid_t v11;
  _BOOL8 v12;
  _DWORD v14[4];
  UInt8 newBytes[2];
  __int16 v16;
  __int16 v17;
  __int16 v18;
  int v19;
  pid_t v20;
  CFRange v21;

  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (!Mutable)
    return 0;
  v9 = Mutable;
  v14[1] = 0;
  v14[0] = 1179650;
  v14[2] = a4;
  v14[3] = 0;
  CFDataAppendBytes(Mutable, (const UInt8 *)v14, 16);
  v10 = CFDataGetLength(v9) + 16;
  v11 = getpid();
  newBytes[0] = 2;
  newBytes[1] = a3;
  v16 = 0;
  v17 = v10 >> 3;
  v18 = 0;
  v19 = 0;
  v20 = v11;
  v21.location = 0;
  v21.length = 0;
  CFDataReplaceBytes(v9, v21, newBytes, 16);
  v12 = NEPFKeySend(a1, a2, v9);
  CFRelease(v9);
  return v12;
}

BOOL NEPFKeySendSPDEnable(NSObject *a1, uint64_t a2, int a3)
{
  return pfkey_send_x5(a1, a2, 0x18u, a3);
}

BOOL NEPFKeySendSPDDisable(NSObject *a1, uint64_t a2, int a3)
{
  return pfkey_send_x5(a1, a2, 0x19u, a3);
}

BOOL NEPFKeySendSPDGet(NSObject *a1, uint64_t a2, int a3)
{
  return pfkey_send_x5(a1, a2, 0x10u, a3);
}

BOOL NEPFKeySendSPDFlush(NSObject *a1, uint64_t a2)
{
  return pfkey_send_x3(a1, a2, 19, 0);
}

BOOL NEPFKeySendSPDDump(NSObject *a1, uint64_t a2)
{
  return pfkey_send_x3(a1, a2, 19, 0);
}

NSObject *NEPFKeyOpen(NSObject *a1, void *a2, uint64_t a3, unsigned int a4)
{
  unsigned int PFKeySocket;
  int v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  _QWORD v13[6];
  unsigned int v14;
  _QWORD handler[4];
  unsigned int v16;
  int v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  int v21;
  uint8_t buf[4];
  unsigned int v23;
  uint64_t v24;

  PFKeySocket = a4;
  v24 = *MEMORY[0x1E0C80C00];
  v19 = 8;
  v18 = 1769472;
  if ((a4 & 0x80000000) != 0)
  {
    PFKeySocket = NEHelperGetPFKeySocket();
    if ((PFKeySocket & 0x80000000) != 0)
      return 0;
  }
  v20 = 0;
  if (sysctlbyname("kern.ipc.maxsockbuf", &v20, &v19, &v18, 8uLL))
    v8 = 233016;
  else
    v8 = 1572864;
  v21 = v8;
  v17 = 1;
  if (ioctl(PFKeySocket, 0x8004667EuLL, &v17) == -1)
  {
    v11 = ne_log_obj();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v23 = PFKeySocket;
      _os_log_error_impl(&dword_19BD16000, v11, OS_LOG_TYPE_ERROR, "Failed to set socket %d to non-blocking mode", buf, 8u);
    }
    return 0;
  }
  setsockopt(PFKeySocket, 0xFFFF, 4097, &v21, 4u);
  setsockopt(PFKeySocket, 0xFFFF, 4098, &v21, 4u);
  if (v21 == 1572864)
    sysctlbyname("kern.ipc.maxsockbuf", 0, 0, &v20, v19);
  v9 = dispatch_source_create(MEMORY[0x1E0C80DB8], PFKeySocket, 0, a1);
  dispatch_set_context(v9, a2);
  v10 = MEMORY[0x1E0C809B0];
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 0x40000000;
  handler[2] = __NEPFKeyOpen_block_invoke;
  handler[3] = &__block_descriptor_tmp_17521;
  v16 = PFKeySocket;
  dispatch_source_set_cancel_handler(v9, handler);
  v13[0] = v10;
  v13[1] = 0x40000000;
  v13[2] = __NEPFKeyOpen_block_invoke_2;
  v13[3] = &__block_descriptor_tmp_3;
  v14 = PFKeySocket;
  v13[4] = a2;
  v13[5] = a3;
  dispatch_source_set_event_handler(v9, v13);
  dispatch_resume(v9);
  return v9;
}

uint64_t pfkey_align(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  NSObject *v6;
  const char *v7;
  NSObject *v8;
  uint32_t v9;
  NSObject *v10;
  BOOL v12;
  uint64_t v13;
  BOOL v15;
  NSObject *v16;
  int v17;
  int v18;
  int v19;
  unsigned __int16 *v20;
  __int16 v21;
  unint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (a1 && a2)
  {
    *(_QWORD *)(a2 + 232) = 0;
    *(_OWORD *)(a2 + 216) = 0u;
    *(_OWORD *)(a2 + 200) = 0u;
    *(_OWORD *)(a2 + 184) = 0u;
    *(_OWORD *)(a2 + 168) = 0u;
    *(_OWORD *)(a2 + 152) = 0u;
    *(_OWORD *)(a2 + 136) = 0u;
    *(_OWORD *)(a2 + 120) = 0u;
    *(_OWORD *)(a2 + 104) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_QWORD *)a2 = a1;
    v2 = *(unsigned __int16 *)(a1 + 4);
    v3 = a1 + 8 * v2;
    v4 = (unsigned __int16 *)(a1 + 16);
    if (v2 >= 3)
    {
      while (1)
      {
        v5 = &v4[4 * *v4];
        if (*v4)
          v12 = v3 >= (unint64_t)v5;
        else
          v12 = 0;
        if (!v12)
          goto LABEL_4;
        v13 = v4[1];
        if (*(_QWORD *)(a2 + 8 * v13))
        {
          v16 = ne_log_obj();
          if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
            return 0xFFFFFFFFLL;
          v17 = v4[1];
          v19 = 67109120;
          LODWORD(v20) = v17;
          v7 = "duplicate extension type %u";
          goto LABEL_29;
        }
        if (v13 > 0x1D || ((1 << v13) & 0x3FFDFFFE) == 0)
          break;
        *(_QWORD *)(a2 + 8 * v13) = v4;
        v15 = (unint64_t)v5 < v3 && v3 >= (unint64_t)(v5 + 2);
        v4 = v5;
        if (!v15)
          goto LABEL_5;
      }
      v16 = ne_log_obj();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        v18 = v4[1];
        v19 = 67109120;
        LODWORD(v20) = v18;
        v7 = "bad extension type %u";
LABEL_29:
        v8 = v16;
        v9 = 8;
        goto LABEL_31;
      }
      return 0xFFFFFFFFLL;
    }
LABEL_4:
    v5 = v4;
LABEL_5:
    if (v5 == (unsigned __int16 *)v3)
      return 0;
    v6 = ne_log_obj();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v19 = 134218240;
      v20 = v5;
      v21 = 2048;
      v22 = v3;
      v7 = "invalid pfkey message length p %p and ep %p";
      v8 = v6;
      v9 = 22;
LABEL_31:
      _os_log_error_impl(&dword_19BD16000, v8, OS_LOG_TYPE_ERROR, v7, (uint8_t *)&v19, v9);
    }
  }
  else
  {
    v10 = ne_log_obj();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v19) = 0;
      v7 = "msg/mhp is NULL";
      v8 = v10;
      v9 = 2;
      goto LABEL_31;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t pfkey_check(unsigned __int8 **a1)
{
  unsigned __int8 *v1;
  unsigned int v2;
  NSObject *v3;
  int v4;
  const char *v5;
  NSObject *v6;
  NSObject *v7;
  uint32_t v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  NSObject *v14;
  int v15;
  int v16;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t result;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  __int16 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (!a1 || (v1 = *a1) == 0)
  {
    v6 = ne_log_obj();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v28) = 0;
      v5 = "msg/mhp is NULL";
      v7 = v6;
      v8 = 2;
LABEL_12:
      _os_log_error_impl(&dword_19BD16000, v7, OS_LOG_TYPE_ERROR, v5, (uint8_t *)&v28, v8);
      return 0xFFFFFFFFLL;
    }
    return 0xFFFFFFFFLL;
  }
  if (*v1 != 2)
  {
    v3 = ne_log_obj();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v9 = *v1;
      v28 = 67109120;
      v29 = v9;
      v5 = "invalid sadb version %u";
      goto LABEL_11;
    }
    return 0xFFFFFFFFLL;
  }
  v2 = v1[1];
  if (v2 >= 0x1B)
  {
    v3 = ne_log_obj();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4 = v1[1];
      v28 = 67109120;
      v29 = v4;
      v5 = "invalid message type %u";
LABEL_11:
      v7 = v3;
      v8 = 8;
      goto LABEL_12;
    }
    return 0xFFFFFFFFLL;
  }
  switch(v1[3])
  {
    case 0u:
      if (v2 - 1 >= 6 && v2 != 8)
        goto LABEL_30;
      v14 = ne_log_obj();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        goto LABEL_21;
      return 0xFFFFFFFFLL;
    case 1u:
      if (v2 == 11)
        goto LABEL_30;
      goto LABEL_38;
    case 2u:
    case 3u:
    case 9u:
      v11 = v2 > 0x13;
      v12 = (1 << v2) & 0xDC000;
      if (!v11 && v12 != 0)
      {
        v14 = ne_log_obj();
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          return 0xFFFFFFFFLL;
LABEL_21:
        v15 = v1[3];
        v16 = v1[1];
        v28 = 67109376;
        v29 = v15;
        v30 = 1024;
        v31 = v16;
        v5 = "invalid sa type %u for message type %u";
LABEL_46:
        v7 = v14;
        v8 = 14;
        goto LABEL_12;
      }
LABEL_30:
      v18 = a1[5];
      if (!v18)
        return 0;
      v19 = a1[6];
      if (!v19)
        return 0;
      if (v18[4] != v19[4])
      {
        v14 = ne_log_obj();
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          return 0xFFFFFFFFLL;
        v23 = v18[4];
        v24 = v19[4];
        v28 = 67109376;
        v29 = v23;
        v30 = 1024;
        v31 = v24;
        v5 = "src address protocol %u != dst address proto %u";
        goto LABEL_46;
      }
      v20 = v18[9];
      if (v20 != v19[9])
      {
        v14 = ne_log_obj();
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          return 0xFFFFFFFFLL;
        v25 = v18[9];
        v26 = v19[9];
        v28 = 67109376;
        v29 = v25;
        v30 = 1024;
        v31 = v26;
        v5 = "src address family %u != dst address family %u";
        goto LABEL_46;
      }
      result = 0;
      if (v20 != 2 && v20 != 30)
      {
        v3 = ne_log_obj();
        if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
          return 0xFFFFFFFFLL;
        v22 = v18[9];
        v28 = 67109120;
        v29 = v22;
        v5 = "invalid address family %u";
        goto LABEL_11;
      }
      return result;
    case 5u:
    case 6u:
    case 7u:
    case 8u:
      v3 = ne_log_obj();
      if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        return 0xFFFFFFFFLL;
      v10 = v1[3];
      v28 = 67109120;
      v29 = v10;
      v5 = "invalid sa type %u";
      goto LABEL_11;
    default:
LABEL_38:
      v3 = ne_log_obj();
      if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        return 0xFFFFFFFFLL;
      v27 = v1[3];
      v28 = 67109120;
      v29 = v27;
      v5 = "invalid sa type %u";
      goto LABEL_11;
  }
}

void NEPFKeyClose(NSObject *a1)
{
  if (a1)
  {
    dispatch_set_context(a1, 0);
    dispatch_source_cancel(a1);
    dispatch_release(a1);
  }
}

BOOL NEPFKeySendGetStats(NSObject *a1, uint64_t a2, unsigned int a3, unint64_t *a4, int a5, int a6, const UInt8 *a7, int a8)
{
  _BOOL8 v8;
  const __CFData *Mutable;
  __CFData *v18;
  CFIndex Length;
  CFRange v20;
  unint64_t v21;
  CFIndex v22;
  unsigned __int16 v23;
  pid_t v24;
  UInt8 newBytes[8];
  unint64_t v27;
  unint64_t v28;
  CFRange v29;
  CFRange v30;
  CFRange v31;

  v8 = 0;
  if (a4 && a7 && a8)
  {
    Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    if (Mutable)
    {
      v18 = Mutable;
      Length = CFDataGetLength(Mutable);
      if (a5)
      {
        v20.location = Length;
        v21 = *a4;
        *(_DWORD *)&newBytes[4] = 0;
        *(_DWORD *)newBytes = 1310723;
        v27 = v21;
        v28 = 0;
        if (a5 != 1)
          v28 = a4[1];
        v20.length = 0;
        CFDataReplaceBytes(v18, v20, newBytes, 24);
      }
      v22 = CFDataGetLength(v18);
      LODWORD(v27) = 0;
      *(_WORD *)newBytes = (unsigned __int16)(40 * a8 + 16) >> 3;
      *(_WORD *)&newBytes[2] = 21;
      *(_DWORD *)&newBytes[4] = a6;
      HIDWORD(v27) = a8;
      v29.location = v22;
      v29.length = 0;
      CFDataReplaceBytes(v18, v29, newBytes, 16);
      v30.location = v22 + 16;
      v30.length = 0;
      CFDataReplaceBytes(v18, v30, a7, 8 * ((5 * (_WORD)a8) & 0x1FFF));
      v23 = CFDataGetLength(v18) + 16;
      v24 = getpid();
      *(_DWORD *)newBytes = 5890;
      *(_WORD *)&newBytes[4] = v23 >> 3;
      *(_WORD *)&newBytes[6] = 0;
      v27 = __PAIR64__(v24, a3);
      v31.location = 0;
      v31.length = 0;
      CFDataReplaceBytes(v18, v31, newBytes, 16);
      v8 = NEPFKeySend(a1, a2, v18);
      CFRelease(v18);
    }
    else
    {
      return 0;
    }
  }
  return v8;
}

const __CFString *NEPolicyGetStringForLegacyNECPLevel(unsigned int a1)
{
  if (a1 > 0xA)
    return CFSTR("Unknown");
  else
    return kNEPolicySessionNECPLegacyLevelsMapping[a1];
}

NEPolicySession *NEPolicyCreateSession()
{
  return objc_alloc_init(NEPolicySession);
}

NEPolicySession *NEPolicyCreateSessionWithSocket(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return -[NEPolicySession initWithSocket:]([NEPolicySession alloc], "initWithSocket:", a3);
}

const void **NEPolicySetSessionPriority(void *a1, const void *a2)
{
  const void **result;
  int v4;
  uint64_t v5;
  id v6;
  uint64_t v7;

  result = NEMapStringToInteger((const void **)&kNEPolicySessionPrioritiesMapping, a2);
  if ((_DWORD)result)
  {
    v4 = (int)result;
    v5 = result;
    v6 = a1;
    objc_msgSend(v6, "setPriority:", v5);
    v7 = objc_msgSend(v6, "priority");

    return (const void **)(v7 == v4);
  }
  return result;
}

uint64_t NEPolicySetDropPriorityLevel(CFTypeRef cf1, int a2)
{
  __CFString **v4;
  const __CFString *v5;
  const __CFString *v6;
  NSObject *v7;
  uint64_t v8;
  void *v10;
  id v11;
  char v12;
  NSObject *v13;
  NSObject *v14;
  int v15;
  int *v16;
  char *v17;
  int v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v18 = 0;
  if (cf1)
  {
    v4 = &kNEPolicySessionNECPPrioritiesMapping;
    v5 = CFSTR("Unknown");
    while (!CFEqual(cf1, v5))
    {
      v6 = v4[2];
      v4 += 2;
      v5 = v6;
      if (!v6)
      {
        v18 = 0;
        goto LABEL_7;
      }
    }
    v18 = *((_DWORD *)v4 + 2);
    if (v18)
      goto LABEL_8;
LABEL_7:
    if (!CFEqual(cf1, CFSTR("Unknown")))
      return 0;
  }
LABEL_8:
  if (sysctlbyname("net.necp.drop_all_level", 0, 0, &v18, 4uLL))
  {
    ne_log_obj();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v15 = v18;
      v16 = __error();
      v17 = strerror(*v16);
      *(_DWORD *)buf = 136315650;
      v20 = "net.necp.drop_all_level";
      v21 = 1024;
      v22 = v15;
      v23 = 2080;
      v24 = v17;
      _os_log_error_impl(&dword_19BD16000, v7, OS_LOG_TYPE_ERROR, "Failed to set %s to %d: %s", buf, 0x1Cu);
    }
  }
  else
  {
    if (a2 != 1)
      return 1;
    objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:isDirectory:", CFSTR("/Library/Preferences/com.apple.networkextension.necp.plist"), 1);
    v7 = objc_claimAutoreleasedReturnValue();
    if (v18)
    {
      v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithContentsOfURL:", v7);
      v11 = (id)objc_msgSend(v10, "mutableCopy");
      objc_msgSend(v11, "setObject:forKeyedSubscript:", cf1, CFSTR("drop_all_level"));

    }
    else
    {
      v11 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v11, "setObject:forKeyedSubscript:", CFSTR("Unknown"), CFSTR("drop_all_level"));
    }
    v12 = objc_msgSend(v11, "writeToURL:atomically:", v7, 1);
    ne_log_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = v13;
    if ((v12 & 1) != 0)
    {
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        v20 = (const char *)v7;
        _os_log_debug_impl(&dword_19BD16000, v14, OS_LOG_TYPE_DEBUG, "Saved NECP drop level to <%@>", buf, 0xCu);
      }

      v8 = 1;
      goto LABEL_12;
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v20 = (const char *)v7;
      _os_log_error_impl(&dword_19BD16000, v14, OS_LOG_TYPE_ERROR, "Failed to save NECP drop level to <%@>", buf, 0xCu);
    }

  }
  v8 = 0;
LABEL_12:

  return v8;
}

uint64_t NEPolicyPersistDropAllFeature(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  char v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  int v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:isDirectory:", CFSTR("/Library/Preferences/com.apple.networkextension.necp.plist"), 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithContentsOfURL:", v4);
  v6 = (void *)objc_msgSend(v5, "mutableCopy");
  v7 = v6;
  if ((_DWORD)a2)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedChar:", a2);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setObject:forKeyedSubscript:", v8, a1);

  }
  else
  {
    objc_msgSend(v6, "removeObjectForKey:", a1);
  }
  v9 = objc_msgSend(v7, "writeToURL:atomically:", v4, 1);
  ne_log_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if ((v9 & 1) != 0)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v14 = 138412290;
      v15 = v4;
      _os_log_debug_impl(&dword_19BD16000, v11, OS_LOG_TYPE_DEBUG, "Saved drop-all feature to <%@>", (uint8_t *)&v14, 0xCu);
    }
    v12 = 1;
  }
  else
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v14 = 138412290;
      v15 = v4;
      _os_log_error_impl(&dword_19BD16000, v11, OS_LOG_TYPE_ERROR, "Failed to save drop-all feature to <%@>", (uint8_t *)&v14, 0xCu);
    }
    v12 = 0;
  }

  return v12;
}

BOOL NEPolicySetLayer2DefaultDrop(int a1)
{
  int v1;
  NSObject *v2;
  _BOOL4 v4;
  int *v5;
  char *v6;
  _BOOL4 v7;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  _BOOL4 v11;
  __int16 v12;
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v7 = a1 != 0;
  v1 = sysctlbyname("kern.skywalk.netif.default_drop", 0, 0, &v7, 4uLL);
  if (v1)
  {
    ne_log_obj();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v4 = v7;
      v5 = __error();
      v6 = strerror(*v5);
      *(_DWORD *)buf = 136315650;
      v9 = "kern.skywalk.netif.default_drop";
      v10 = 1024;
      v11 = v4;
      v12 = 2080;
      v13 = v6;
      _os_log_error_impl(&dword_19BD16000, v2, OS_LOG_TYPE_ERROR, "Failed to set %s to %d: %s", buf, 0x1Cu);
    }

  }
  return v1 == 0;
}

uint64_t NEPolicyLockSessionToProcess(void *a1)
{
  return objc_msgSend(a1, "lockSessionToCurrentProcess");
}

uint64_t NEPolicyRegisterService(void *a1, uint64_t a2)
{
  objc_class *v3;
  id v4;
  void *v5;
  uint64_t v6;

  v3 = (objc_class *)MEMORY[0x1E0CB3A28];
  v4 = a1;
  v5 = (void *)objc_msgSend([v3 alloc], "initWithUUIDBytes:", a2);
  v6 = objc_msgSend(v4, "registerServiceUUID:", v5);

  return v6;
}

uint64_t NEPolicyUnregisterService(void *a1, uint64_t a2)
{
  objc_class *v3;
  id v4;
  void *v5;
  uint64_t v6;

  v3 = (objc_class *)MEMORY[0x1E0CB3A28];
  v4 = a1;
  v5 = (void *)objc_msgSend([v3 alloc], "initWithUUIDBytes:", a2);
  v6 = objc_msgSend(v4, "unregisterServiceUUID:", v5);

  return v6;
}

uint64_t NEPolicyAdd(void *a1, unsigned int a2, const __CFArray *a3, const __CFDictionary *a4)
{
  uint64_t v4;
  void *v7;
  void *v8;
  const void *Value;
  uint64_t v10;
  const __CFNumber *v11;
  uint64_t v12;
  const __CFNumber *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  __CFString **v17;
  const __CFString *v18;
  const __CFString *v19;
  uint64_t v20;
  const __CFNumber *v21;
  const __CFUUID *v22;
  __CFString *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  const __CFArray *v27;
  const __CFArray *v28;
  CFIndex v29;
  CFIndex v30;
  CFIndex v31;
  const __CFString *v32;
  const __CFDictionary *v33;
  const __CFDictionary *v34;
  const void *v35;
  unsigned __int8 v36;
  const void *v37;
  unsigned __int8 v38;
  const void *v39;
  const void *v40;
  const __CFUUID *v41;
  CFIndex v42;
  const __CFString *v43;
  void *v44;
  __CFString *v45;
  void *v46;
  void *v47;
  void *v48;
  const __CFUUID *v49;
  __CFString *v50;
  const __CFUUID *v51;
  __CFString *v52;
  const void *v53;
  const __CFArray *v54;
  CFIndex Count;
  CFIndex v56;
  CFIndex v57;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v59;
  const void *v60;
  unsigned __int8 v61;
  void *v62;
  const void *v63;
  const void *v64;
  const __CFNumber *v65;
  unsigned __int8 v66;
  CFStringRef v67;
  const void *v68;
  const void *v69;
  const void *v70;
  const void *v71;
  const void *v72;
  CFStringRef v73;
  CFStringRef v74;
  const __CFUUID *v75;
  __CFString *v76;
  void *v77;
  uint64_t v78;
  const __CFUUID *v79;
  __CFString *v80;
  const __CFNumber *v81;
  uint64_t v82;
  const __CFNumber *v83;
  const void *v84;
  const void *v85;
  const void *v86;
  uint64_t v87;
  uint64_t v88;
  const void *v89;
  const void *v90;
  int v91;
  const __CFNumber *v92;
  const __CFNumber *v93;
  uint64_t v94;
  uint64_t v95;
  const void *v96;
  unsigned __int16 v97;
  unsigned __int16 v98;
  const __CFNumber *v99;
  const void *v100;
  const __CFNumber *v101;
  const __CFNumber *v102;
  const __CFNumber *v103;
  void *v104;
  uint64_t v105;
  void *v106;
  void *v107;
  uint64_t v108;
  const __CFNumber *v109;
  const __CFNumber *v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  const __CFNumber *v115;
  const __CFNumber *v116;
  uint64_t v117;
  uint64_t v118;
  const __CFBoolean *v119;
  const __CFBoolean *v120;
  NEPolicy *v121;
  void *v123;
  void *v124;
  const __CFAllocator *alloc;
  CFAllocatorRef alloca;
  unsigned int v127;
  unsigned int v128;
  void *v129;
  void *v130;
  CFAllocatorRef v131;
  const __CFAllocator *v132;
  unsigned int v134;
  uint64_t valuePtr;

  v4 = 0;
  if (a1 && a3 && a4)
  {
    v7 = a1;
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    Value = CFDictionaryGetValue(a4, CFSTR("Result"));
    v4 = 0;
    switch(NEMapStringToInteger((const void **)&kNEPolicyResultsMapping, Value))
    {
      case 1u:
        +[NEPolicyResult pass](NEPolicyResult, "pass");
        v10 = objc_claimAutoreleasedReturnValue();
        goto LABEL_56;
      case 2u:
        HIDWORD(valuePtr) = 0;
        v11 = (const __CFNumber *)CFDictionaryGetValue(a4, CFSTR("SkipOrder"));
        if (v11)
        {
          CFNumberGetValue(v11, kCFNumberIntType, (char *)&valuePtr + 4);
          v12 = HIDWORD(valuePtr);
        }
        else
        {
          v12 = 0;
        }
        +[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", v12);
        v10 = objc_claimAutoreleasedReturnValue();
        goto LABEL_56;
      case 3u:
        +[NEPolicyResult drop](NEPolicyResult, "drop");
        v10 = objc_claimAutoreleasedReturnValue();
        goto LABEL_56;
      case 4u:
        v13 = (const __CFNumber *)CFDictionaryGetValue(a4, CFSTR("FlowDivertControlUnit"));
        if (!v13)
          goto LABEL_201;
        HIDWORD(valuePtr) = 0;
        if (!CFNumberGetValue(v13, kCFNumberIntType, (char *)&valuePtr + 4))
          goto LABEL_49;
        +[NEPolicyResult divertSocketToControlUnit:](NEPolicyResult, "divertSocketToControlUnit:", HIDWORD(valuePtr));
        v10 = objc_claimAutoreleasedReturnValue();
        goto LABEL_56;
      case 5u:
        v14 = CFDictionaryGetValue(a4, CFSTR("ScopedInterface"));
        if (!v14)
          goto LABEL_201;
        +[NEPolicyResult scopeSocketToInterfaceName:](NEPolicyResult, "scopeSocketToInterfaceName:", v14);
        v10 = objc_claimAutoreleasedReturnValue();
        goto LABEL_56;
      case 6u:
        v15 = CFDictionaryGetValue(a4, CFSTR("TunnelSecondaryResult"));
        if (v15)
        {
          v16 = v15;
          v17 = &kNEPolicySecondaryResultsMapping;
          v18 = CFSTR("Pass");
          while (!CFEqual(v16, v18))
          {
            v19 = v17[2];
            v17 += 2;
            v18 = v19;
            if (!v19)
            {
              v20 = 0;
              goto LABEL_54;
            }
          }
          v20 = *((unsigned int *)v17 + 2);
        }
        else
        {
          v20 = 2;
        }
LABEL_54:
        v53 = CFDictionaryGetValue(a4, CFSTR("TunnelInterface"));
        if (v53)
        {
          +[NEPolicyResult tunnelIPToInterfaceName:secondaryResultType:](NEPolicyResult, "tunnelIPToInterfaceName:secondaryResultType:", v53, v20);
          v10 = objc_claimAutoreleasedReturnValue();
LABEL_56:
          v4 = v10;
LABEL_57:
          if (v4)
          {
            alloca = (CFAllocatorRef)v4;
            v128 = a2;
            v130 = v7;
            v54 = a3;
            Count = CFArrayGetCount(a3);
            if (Count >= 1)
            {
              v56 = Count;
              v57 = 0;
              v132 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
              v124 = v8;
              do
              {
                ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v54, v57);
                if (ValueAtIndex)
                {
                  v59 = ValueAtIndex;
                  v60 = CFDictionaryGetValue(ValueAtIndex, CFSTR("ConditionType"));
                  v61 = NEMapStringToInteger((const void **)&kNEPolicyConditionsMapping, v60);
                  v62 = 0;
                  switch(v61)
                  {
                    case 1u:
                      v75 = (const __CFUUID *)CFDictionaryGetValue(v59, CFSTR("ApplicationUUID"));
                      if (v75)
                      {
                        v76 = (__CFString *)CFUUIDCreateString(v132, v75);
                        v77 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", v76);

                        +[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", v77);
                        v78 = objc_claimAutoreleasedReturnValue();
                        goto LABEL_78;
                      }
                      break;
                    case 2u:
                      v79 = (const __CFUUID *)CFDictionaryGetValue(v59, CFSTR("RealApplicationUUID"));
                      if (v79)
                      {
                        v80 = (__CFString *)CFUUIDCreateString(v132, v79);
                        v77 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", v80);

                        +[NEPolicyCondition realApplication:](NEPolicyCondition, "realApplication:", v77);
                        v78 = objc_claimAutoreleasedReturnValue();
LABEL_78:
                        v62 = (void *)v78;

                        if (v62)
                          goto LABEL_192;
                      }
                      break;
                    case 3u:
                      HIDWORD(valuePtr) = 0;
                      v81 = (const __CFNumber *)CFDictionaryGetValue(v59, CFSTR("PID"));
                      if (!v81 || !CFNumberGetValue(v81, kCFNumberIntType, (char *)&valuePtr + 4))
                        goto LABEL_180;
                      +[NEPolicyCondition effectivePID:](NEPolicyCondition, "effectivePID:", HIDWORD(valuePtr));
                      v82 = objc_claimAutoreleasedReturnValue();
                      goto LABEL_191;
                    case 4u:
                      HIDWORD(valuePtr) = 0;
                      v83 = (const __CFNumber *)CFDictionaryGetValue(v59, CFSTR("UID"));
                      if (!v83 || !CFNumberGetValue(v83, kCFNumberIntType, (char *)&valuePtr + 4))
                        goto LABEL_180;
                      +[NEPolicyCondition uid:](NEPolicyCondition, "uid:", HIDWORD(valuePtr));
                      v82 = objc_claimAutoreleasedReturnValue();
                      goto LABEL_191;
                    case 5u:
                      v84 = CFDictionaryGetValue(v59, CFSTR("AccountID"));
                      if (!v84)
                        break;
                      +[NEPolicyCondition accountIdentifier:](NEPolicyCondition, "accountIdentifier:", v84);
                      v82 = objc_claimAutoreleasedReturnValue();
                      goto LABEL_191;
                    case 6u:
                      v85 = CFDictionaryGetValue(v59, CFSTR("Domain"));
                      if (!v85)
                        break;
                      +[NEPolicyCondition domain:](NEPolicyCondition, "domain:", v85);
                      v82 = objc_claimAutoreleasedReturnValue();
                      goto LABEL_191;
                    case 7u:
                      +[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces");
                      v82 = objc_claimAutoreleasedReturnValue();
                      goto LABEL_191;
                    case 8u:
                      v86 = CFDictionaryGetValue(v59, CFSTR("InterfaceName"));
                      if (!v86)
                        break;
                      +[NEPolicyCondition scopedInterface:](NEPolicyCondition, "scopedInterface:", v86);
                      v82 = objc_claimAutoreleasedReturnValue();
                      goto LABEL_191;
                    case 9u:
                      v87 = NEGetIntFromDictionary(v59, CFSTR("StartTrafficClass"), 0);
                      v88 = NEGetIntFromDictionary(v59, CFSTR("EndTrafficClass"), 0);
                      if (CFDictionaryContainsKey(v59, CFSTR("StartTrafficClass"))
                        && CFDictionaryContainsKey(v59, CFSTR("EndTrafficClass")))
                      {
                        +[NEPolicyCondition trafficClassStart:end:](NEPolicyCondition, "trafficClassStart:end:", v87, v88);
                        v62 = (void *)objc_claimAutoreleasedReturnValue();
                      }
                      else
                      {
                        v62 = 0;
                      }
                      goto LABEL_161;
                    case 0xAu:
                    case 0x13u:
LABEL_161:
                      v112 = NEGetIntFromDictionary(v59, CFSTR("ProtocolIndex"), 0);
                      if (!v112)
                        goto LABEL_181;
                      if (v61 == 10)
                        +[NEPolicyCondition ipProtocol:](NEPolicyCondition, "ipProtocol:", (unsigned __int16)v112);
                      else
                        +[NEPolicyCondition flowIPProtocol:](NEPolicyCondition, "flowIPProtocol:", (unsigned __int16)v112);
                      v113 = objc_claimAutoreleasedReturnValue();

                      v62 = (void *)v113;
                      if (!v113)
                        break;
                      goto LABEL_192;
                    case 0xBu:
                    case 0xDu:
                    case 0x14u:
                    case 0x16u:
                      v63 = CFDictionaryGetValue(v59, CFSTR("Address"));
                      v64 = CFDictionaryGetValue(v59, CFSTR("Port"));
                      v65 = (const __CFNumber *)CFDictionaryGetValue(v59, CFSTR("SubnetPrefix"));
                      if (!v63)
                        break;
                      if (v65)
                      {
                        HIDWORD(valuePtr) = 0;
                        if (CFNumberGetValue(v65, kCFNumberIntType, (char *)&valuePtr + 4))
                          v66 = BYTE4(valuePtr);
                        else
                          v66 = -1;
                        if (v64)
                        {
LABEL_68:
                          v67 = CFStringCreateWithFormat(v132, 0, CFSTR("%@"), v64);
                          goto LABEL_131;
                        }
                      }
                      else
                      {
                        v66 = -1;
                        if (v64)
                          goto LABEL_68;
                      }
                      v67 = CFSTR("0");
LABEL_131:
                      objc_msgSend(MEMORY[0x1E0CCEC58], "endpointWithHostname:port:", v63, v67);
                      v104 = (void *)objc_claimAutoreleasedReturnValue();
                      v62 = 0;
                      if (v61 > 0x13u)
                      {
                        if (v61 == 20)
                        {
                          +[NEPolicyCondition flowLocalAddress:prefix:](NEPolicyCondition, "flowLocalAddress:prefix:", v104, v66);
                          v105 = objc_claimAutoreleasedReturnValue();
                        }
                        else
                        {
                          if (v61 != 22)
                            goto LABEL_170;
                          +[NEPolicyCondition flowRemoteAddress:prefix:](NEPolicyCondition, "flowRemoteAddress:prefix:", v104, v66);
                          v105 = objc_claimAutoreleasedReturnValue();
                        }
                      }
                      else if (v61 == 11)
                      {
                        +[NEPolicyCondition localAddress:prefix:](NEPolicyCondition, "localAddress:prefix:", v104, v66);
                        v105 = objc_claimAutoreleasedReturnValue();
                      }
                      else
                      {
                        if (v61 != 13)
                          goto LABEL_170;
                        +[NEPolicyCondition remoteAddress:prefix:](NEPolicyCondition, "remoteAddress:prefix:", v104, v66);
                        v105 = objc_claimAutoreleasedReturnValue();
                      }
                      v62 = (void *)v105;
LABEL_170:
                      if (v67)
                        CFRelease(v67);

                      if (!v62)
                        break;
                      goto LABEL_192;
                    case 0xCu:
                    case 0xEu:
                    case 0x15u:
                    case 0x17u:
                      v68 = CFDictionaryGetValue(v59, CFSTR("StartAddress"));
                      v69 = CFDictionaryGetValue(v59, CFSTR("StartPort"));
                      v70 = CFDictionaryGetValue(v59, CFSTR("EndAddress"));
                      v71 = CFDictionaryGetValue(v59, CFSTR("EndPort"));
                      if (!v68 || !v70)
                        break;
                      v72 = v71;
                      if (v69)
                      {
                        v73 = CFStringCreateWithFormat(v132, 0, CFSTR("%@"), v69);
                        if (v72)
                          goto LABEL_73;
                      }
                      else
                      {
                        v73 = CFSTR("0");
                        if (v71)
                        {
LABEL_73:
                          v74 = CFStringCreateWithFormat(v132, 0, CFSTR("%@"), v72);
                          goto LABEL_140;
                        }
                      }
                      v74 = CFSTR("0");
LABEL_140:
                      objc_msgSend(MEMORY[0x1E0CCEC58], "endpointWithHostname:port:", v68, v73);
                      v106 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(MEMORY[0x1E0CCEC58], "endpointWithHostname:port:", v70, v74);
                      v107 = (void *)objc_claimAutoreleasedReturnValue();
                      v62 = 0;
                      if (v61 > 0x14u)
                      {
                        if (v61 != 21)
                        {
                          v54 = a3;
                          if (v61 == 23)
                          {
                            +[NEPolicyCondition flowRemoteAddressStart:end:](NEPolicyCondition, "flowRemoteAddressStart:end:", v106, v107);
                            v108 = objc_claimAutoreleasedReturnValue();
LABEL_147:
                            v62 = (void *)v108;
                          }
LABEL_148:
                          if (!v73)
                            goto LABEL_150;
LABEL_149:
                          CFRelease(v73);
                          goto LABEL_150;
                        }
                        +[NEPolicyCondition flowLocalAddressStart:end:](NEPolicyCondition, "flowLocalAddressStart:end:", v106, v107);
                        v114 = objc_claimAutoreleasedReturnValue();
                      }
                      else
                      {
                        if (v61 != 12)
                        {
                          v54 = a3;
                          if (v61 == 14)
                          {
                            +[NEPolicyCondition remoteAddressStart:end:](NEPolicyCondition, "remoteAddressStart:end:", v106, v107);
                            v108 = objc_claimAutoreleasedReturnValue();
                            goto LABEL_147;
                          }
                          goto LABEL_148;
                        }
                        +[NEPolicyCondition localAddressStart:end:](NEPolicyCondition, "localAddressStart:end:", v106, v107);
                        v114 = objc_claimAutoreleasedReturnValue();
                      }
                      v62 = (void *)v114;
                      v54 = a3;
                      if (v73)
                        goto LABEL_149;
LABEL_150:
                      if (v74)
                        CFRelease(v74);

                      v8 = v124;
                      if (v62)
                      {
LABEL_192:
                        v119 = (const __CFBoolean *)CFDictionaryGetValue(v59, CFSTR("IsNegative"));
                        if (v119 && CFBooleanGetValue(v119))
                          objc_msgSend(v62, "setNegative:", 1);
                        v120 = (const __CFBoolean *)CFDictionaryGetValue(v59, CFSTR("ExactMatch"));
                        if (v120 && CFBooleanGetValue(v120))
                          objc_msgSend(v62, "setExactMatch:", 1);
                        objc_msgSend(v8, "addObject:", v62);

                      }
                      break;
                    case 0xFu:
                      +[NEPolicyCondition entitlement](NEPolicyCondition, "entitlement");
                      v82 = objc_claimAutoreleasedReturnValue();
                      goto LABEL_191;
                    case 0x10u:
                      v89 = CFDictionaryGetValue(v59, CFSTR("NetAgentDomain"));
                      v90 = CFDictionaryGetValue(v59, CFSTR("NetAgentType"));
                      if (!v89 || !v90)
                        break;
                      +[NEPolicyCondition requiredAgentDomain:agentType:](NEPolicyCondition, "requiredAgentDomain:agentType:", v89, v90);
                      v82 = objc_claimAutoreleasedReturnValue();
                      goto LABEL_191;
                    case 0x11u:
                      +[NEPolicyCondition usesModernNetworkAPI](NEPolicyCondition, "usesModernNetworkAPI");
                      v82 = objc_claimAutoreleasedReturnValue();
                      goto LABEL_191;
                    case 0x18u:
                      v91 = NEGetIntFromDictionary(v59, CFSTR("ClientFlags"), 0);
                      if (!v91)
                        break;
                      +[NEPolicyCondition clientFlags:](NEPolicyCondition, "clientFlags:", (unsigned __int16)v91);
                      v82 = objc_claimAutoreleasedReturnValue();
                      goto LABEL_191;
                    case 0x19u:
                      +[NEPolicyCondition flowLocalAddressEmpty](NEPolicyCondition, "flowLocalAddressEmpty");
                      v82 = objc_claimAutoreleasedReturnValue();
                      goto LABEL_191;
                    case 0x1Au:
                      +[NEPolicyCondition flowRemoteAddressEmpty](NEPolicyCondition, "flowRemoteAddressEmpty");
                      v82 = objc_claimAutoreleasedReturnValue();
                      goto LABEL_191;
                    case 0x1Bu:
                      +[NEPolicyCondition platformBinary](NEPolicyCondition, "platformBinary");
                      v82 = objc_claimAutoreleasedReturnValue();
                      goto LABEL_191;
                    case 0x1Cu:
                      v92 = (const __CFNumber *)CFDictionaryGetValue(v59, CFSTR("Platform"));
                      if (v92 && (v93 = v92, v94 = CFNUMBER_TYPE, CFGetTypeID(v92) == v94))
                      {
                        HIDWORD(valuePtr) = 0;
                        if (CFNumberGetValue(v93, kCFNumberIntType, (char *)&valuePtr + 4))
                          v95 = HIDWORD(valuePtr);
                        else
                          v95 = 0;
                      }
                      else
                      {
                        v95 = 0;
                      }
                      v109 = (const __CFNumber *)CFDictionaryGetValue(v59, CFSTR("SDKVersion"));
                      v110 = v109;
                      if (v109)
                      {
                        v111 = CFNUMBER_TYPE;
                        if (CFGetTypeID(v109) == v111)
                        {
                          HIDWORD(valuePtr) = 0;
                          if (CFNumberGetValue(v110, kCFNumberIntType, (char *)&valuePtr + 4))
                            v110 = (const __CFNumber *)HIDWORD(valuePtr);
                          else
                            v110 = 0;
                        }
                        else
                        {
                          v110 = 0;
                        }
                      }
                      v115 = (const __CFNumber *)CFDictionaryGetValue(v59, CFSTR("MinSDKVersion"));
                      if (v115 && (v116 = v115, v117 = CFNUMBER_TYPE, CFGetTypeID(v115) == v117))
                      {
                        HIDWORD(valuePtr) = 0;
                        if (CFNumberGetValue(v116, kCFNumberIntType, (char *)&valuePtr + 4))
                          v118 = HIDWORD(valuePtr);
                        else
                          v118 = 0;
                      }
                      else
                      {
                        v118 = 0;
                      }
                      v54 = a3;
                      +[NEPolicyCondition sdkVersion:minSDKVersion:platform:](NEPolicyCondition, "sdkVersion:minSDKVersion:platform:", v110, v118, v95);
                      v82 = objc_claimAutoreleasedReturnValue();
                      goto LABEL_191;
                    case 0x1Du:
                      v96 = CFDictionaryGetValue(v59, CFSTR("SigningIdentifier"));
                      if (!v96)
                        break;
                      +[NEPolicyCondition signingIdentifier:](NEPolicyCondition, "signingIdentifier:", v96);
                      v82 = objc_claimAutoreleasedReturnValue();
                      goto LABEL_191;
                    case 0x1Eu:
                      v97 = NEGetIntFromDictionary(v59, CFSTR("PacketFilterTags"), 0);
                      if (!v97)
                        break;
                      +[NEPolicyCondition packetFilterTags:](NEPolicyCondition, "packetFilterTags:", v97);
                      v82 = objc_claimAutoreleasedReturnValue();
                      goto LABEL_191;
                    case 0x25u:
                      v98 = NEGetIntFromDictionary(v59, CFSTR("Port"), 0);
                      if (!v98)
                        break;
                      +[NEPolicyCondition schemeUsingPort:](NEPolicyCondition, "schemeUsingPort:", v98);
                      v82 = objc_claimAutoreleasedReturnValue();
                      goto LABEL_191;
                    case 0x27u:
                      +[NEPolicyCondition hasSignedResult](NEPolicyCondition, "hasSignedResult");
                      v82 = objc_claimAutoreleasedReturnValue();
                      goto LABEL_191;
                    case 0x28u:
                      HIDWORD(valuePtr) = 0;
                      v99 = (const __CFNumber *)CFDictionaryGetValue(v59, CFSTR("UID"));
                      if (!v99 || !CFNumberGetValue(v99, kCFNumberIntType, (char *)&valuePtr + 4))
                        goto LABEL_180;
                      +[NEPolicyCondition realUID:](NEPolicyCondition, "realUID:", HIDWORD(valuePtr));
                      v82 = objc_claimAutoreleasedReturnValue();
                      goto LABEL_191;
                    case 0x2Au:
                      v100 = CFDictionaryGetValue(v59, CFSTR("URL"));
                      if (!v100)
                        break;
                      +[NEPolicyCondition url:](NEPolicyCondition, "url:", v100);
                      v82 = objc_claimAutoreleasedReturnValue();
                      goto LABEL_191;
                    case 0x2Bu:
                      valuePtr = 0;
                      v134 = 0;
                      v101 = (const __CFNumber *)CFDictionaryGetValue(v59, CFSTR("InterfaceFlags"));
                      v102 = (const __CFNumber *)CFDictionaryGetValue(v59, CFSTR("InterfaceEflags"));
                      v103 = (const __CFNumber *)CFDictionaryGetValue(v59, CFSTR("InterfaceXflags"));
                      if (v101)
                        CFNumberGetValue(v101, kCFNumberSInt32Type, (char *)&valuePtr + 4);
                      if (v102)
                        CFNumberGetValue(v102, kCFNumberSInt32Type, &valuePtr);
                      if (v103)
                      {
                        CFNumberGetValue(v103, kCFNumberSInt32Type, &v134);
                      }
                      else if (!((unint64_t)v101 | (unint64_t)v102))
                      {
LABEL_180:
                        v62 = 0;
LABEL_181:
                        if (v62)
                          goto LABEL_192;
                        break;
                      }
                      +[NEPolicyCondition scopedInterfaceFlags:eflags:xflags:](NEPolicyCondition, "scopedInterfaceFlags:eflags:xflags:", HIDWORD(valuePtr), valuePtr, v134);
                      v82 = objc_claimAutoreleasedReturnValue();
LABEL_191:
                      v62 = (void *)v82;
                      if (!v82)
                        break;
                      goto LABEL_192;
                    default:
                      break;
                  }
                }
                ++v57;
              }
              while (v56 != v57);
            }
            v121 = -[NEPolicy initWithOrder:result:conditions:]([NEPolicy alloc], "initWithOrder:result:conditions:", v128, alloca, v8);
            v4 = objc_msgSend(v130, "addPolicy:storeLocally:", v121, 1);

          }
        }
        else
        {
LABEL_201:
          v4 = 0;
        }
LABEL_202:

        break;
      case 7u:
        v21 = (const __CFNumber *)CFDictionaryGetValue(a4, CFSTR("FilterControlUnit"));
        if (!v21)
          goto LABEL_201;
        HIDWORD(valuePtr) = 0;
        if (CFNumberGetValue(v21, kCFNumberIntType, (char *)&valuePtr + 4))
        {
          +[NEPolicyResult filterWithControlUnit:](NEPolicyResult, "filterWithControlUnit:", HIDWORD(valuePtr));
          v10 = objc_claimAutoreleasedReturnValue();
          goto LABEL_56;
        }
LABEL_49:
        v4 = 0;
        goto LABEL_57;
      case 8u:
        v22 = (const __CFUUID *)CFDictionaryGetValue(a4, CFSTR("NetAgentUUID"));
        if (!v22)
          goto LABEL_201;
        v23 = (__CFString *)CFUUIDCreateString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v22);
        v24 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", v23);

        +[NEPolicyResult netAgentUUID:](NEPolicyResult, "netAgentUUID:", v24);
        v25 = objc_claimAutoreleasedReturnValue();
        goto LABEL_48;
      case 9u:
        v127 = a2;
        v129 = v7;
        v123 = v8;
        objc_msgSend(MEMORY[0x1E0C99DE8], "array");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        v27 = (const __CFArray *)CFDictionaryGetValue(a4, CFSTR("RouteRules"));
        if (v27)
        {
          v28 = v27;
          v29 = CFArrayGetCount(v27);
          if (v29 >= 1)
          {
            v30 = v29;
            v31 = 0;
            v32 = CFSTR("Action");
            alloc = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v131 = v28;
            do
            {
              v33 = (const __CFDictionary *)CFArrayGetValueAtIndex(v28, v31);
              if (v33)
              {
                v34 = v33;
                v35 = CFDictionaryGetValue(v33, v32);
                v36 = NEMapStringToInteger((const void **)&kNEPolicyRouteRuleActionMapping, v35);
                v37 = CFDictionaryGetValue(v34, CFSTR("Type"));
                v38 = NEMapStringToInteger((const void **)&kNEPolicyRouteRuleTypeMapping, v37);
                v39 = CFDictionaryGetValue(v34, CFSTR("Interface"));
                if (v36)
                {
                  v40 = v39;
                  if (v36 - 5 <= 1
                    && (v41 = (const __CFUUID *)CFDictionaryGetValue(a4, CFSTR("NetAgentUUID"))) != 0)
                  {
                    v42 = v30;
                    v43 = v32;
                    v44 = v26;
                    v45 = (__CFString *)CFUUIDCreateString(alloc, v41);
                    v46 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", v45);

                    v26 = v44;
                    v32 = v43;
                    v30 = v42;
                    v28 = v131;
                  }
                  else
                  {
                    v46 = 0;
                  }
                  if (v40)
                    +[NEPolicyRouteRule routeRuleWithAction:forInterfaceName:](NEPolicyRouteRule, "routeRuleWithAction:forInterfaceName:", v36, v40);
                  else
                    +[NEPolicyRouteRule routeRuleWithAction:forType:](NEPolicyRouteRule, "routeRuleWithAction:forType:", v36, v38);
                  v47 = (void *)objc_claimAutoreleasedReturnValue();
                  v48 = v47;
                  if (v47)
                  {
                    objc_msgSend(v47, "setNetworkAgentUUID:", v46);
                    objc_msgSend(v26, "addObject:", v48);
                  }

                }
              }
              ++v31;
            }
            while (v30 != v31);
          }
        }
        +[NEPolicyResult routeRules:](NEPolicyResult, "routeRules:", v26);
        v4 = objc_claimAutoreleasedReturnValue();

        v8 = v123;
        v7 = v129;
        a2 = v127;
        goto LABEL_57;
      case 0xBu:
        v49 = (const __CFUUID *)CFDictionaryGetValue(a4, CFSTR("NetAgentUUID"));
        if (!v49)
          goto LABEL_201;
        v50 = (__CFString *)CFUUIDCreateString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v49);
        v24 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", v50);

        +[NEPolicyResult scopedNetworkAgent:](NEPolicyResult, "scopedNetworkAgent:", v24);
        v25 = objc_claimAutoreleasedReturnValue();
        goto LABEL_48;
      case 0xCu:
        +[NEPolicyResult scopeToDirectInterface](NEPolicyResult, "scopeToDirectInterface");
        v10 = objc_claimAutoreleasedReturnValue();
        goto LABEL_56;
      case 0xDu:
        +[NEPolicyResult allowUnentitled](NEPolicyResult, "allowUnentitled");
        v10 = objc_claimAutoreleasedReturnValue();
        goto LABEL_56;
      case 0xEu:
        +[NEPolicyResult prohibitFilters](NEPolicyResult, "prohibitFilters");
        v10 = objc_claimAutoreleasedReturnValue();
        goto LABEL_56;
      case 0xFu:
        v51 = (const __CFUUID *)CFDictionaryGetValue(a4, CFSTR("NetAgentUUID"));
        if (!v51)
          goto LABEL_201;
        v52 = (__CFString *)CFUUIDCreateString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v51);
        v24 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", v52);

        +[NEPolicyResult removeNetworkAgentUUID:](NEPolicyResult, "removeNetworkAgentUUID:", v24);
        v25 = objc_claimAutoreleasedReturnValue();
LABEL_48:
        v4 = v25;

        goto LABEL_57;
      default:
        goto LABEL_202;
    }
  }
  return v4;
}

uint64_t NEPolicyCopy()
{
  return 0;
}

uint64_t NEPolicyDelete(void *a1, unsigned int a2)
{
  return objc_msgSend(a1, "removePolicyWithID:", a2);
}

uint64_t NEPolicyDeleteAll(void *a1)
{
  return objc_msgSend(a1, "removeAllPolicies");
}

uint64_t NEPolicyCopyIDs()
{
  return 0;
}

uint64_t NEPolicyApply(void *a1)
{
  return objc_msgSend(a1, "apply");
}

uint64_t NEPolicySetDispatchQueue()
{
  return 0;
}

void sub_19BE61750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19BE62074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19BE64B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19BE64FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19BE65F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19BE66FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  id *v25;
  id *v26;
  id *v27;

  objc_destroyWeak(v27);
  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19BE67668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19BE67A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  id *v25;
  id *v26;
  id *v27;

  objc_destroyWeak(v27);
  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19BE6A658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19BE6F40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19BE71558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19BE73FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__18982(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__18983(uint64_t a1)
{

}

__CFString *convert_error_to_string(void *a1)
{
  id v1;
  void *v2;
  int v3;
  __CFString *v4;
  void *v5;
  void *v6;

  v1 = a1;
  objc_msgSend(v1, "domain");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isEqualToString:", CFSTR("NEConfigurationErrorDomain"));

  if (v3)
  {
    v4 = CFSTR("configuration is corrupted");
    switch(objc_msgSend(v1, "code"))
    {
      case 1:
        break;
      case 2:
        v5 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(v1, "localizedDescription");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "stringWithFormat:", CFSTR("configuration is invalid: %@"), v6);
        v4 = (__CFString *)objc_claimAutoreleasedReturnValue();

        break;
      case 3:
        v4 = CFSTR("configuration type is wrong");
        break;
      case 4:
        v4 = CFSTR("configuration owner application is wrong");
        break;
      case 5:
        v4 = CFSTR("configuration is stale");
        break;
      case 6:
        v4 = CFSTR("failed to write configuration to disk");
        break;
      case 7:
        v4 = CFSTR("configuration does not exist");
        break;
      case 8:
        v4 = CFSTR("invalid configuration operation request");
        break;
      case 9:
        v4 = CFSTR("configuration is unchanged");
        break;
      case 10:
        v4 = CFSTR("permission denied");
        break;
      case 11:
        v4 = CFSTR("IPC failed");
        break;
      case 18:
        v4 = CFSTR("file not found");
        break;
      case 21:
        v4 = CFSTR("MDM required");
        break;
      default:
        v4 = CFSTR("<unknown>");
        break;
    }
  }
  else
  {
    objc_msgSend(v1, "localizedDescription");
    v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }

  return v4;
}

void sub_19BE7A38C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_19BE7B7F0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 152));
  _Unwind_Resume(a1);
}

void sub_19BE7CFA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__19902(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__19903(uint64_t a1)
{

}

void sub_19BE81340(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BE813FC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void NEResourcesSetPreferredLanguages(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&languageLock);
  v2 = (void *)g_preferredLanguages;
  g_preferredLanguages = (uint64_t)v1;

  os_unfair_lock_unlock((os_unfair_lock_t)&languageLock);
}

id NEResourcesCopyPreferredLanguages()
{
  void *v0;

  os_unfair_lock_lock((os_unfair_lock_t)&languageLock);
  v0 = (void *)objc_msgSend((id)g_preferredLanguages, "copy");
  os_unfair_lock_unlock((os_unfair_lock_t)&languageLock);
  return v0;
}

id NEResourcesCopyDevicePreferredLocalizations()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v0 = (void *)CFPreferencesCopyValue(CFSTR("AppleLanguages"), (CFStringRef)*MEMORY[0x1E0C9B228], CFSTR("mobile"), (CFStringRef)*MEMORY[0x1E0C9B230]);
  if (v0 || (NEResourcesCopyPreferredLanguages(), (v0 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    get_nsbundle();
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = (void *)MEMORY[0x1E0CB34D0];
    objc_msgSend(v1, "localizations");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "preferredLocalizationsFromArray:forPreferences:", v3, v0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v4 = 0;
  }
  return v4;
}

id get_nsbundle()
{
  if (get_nsbundle_onceToken != -1)
    dispatch_once(&get_nsbundle_onceToken, &__block_literal_global_20408);
  return (id)get_nsbundle_bundle;
}

void __get_nsbundle_block_invoke()
{
  uint64_t v0;
  void *v1;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB34D0]), "initWithPath:", CFSTR("/System/Library/Frameworks/NetworkExtension.framework"));
  v1 = (void *)get_nsbundle_bundle;
  get_nsbundle_bundle = v0;

}

CFTypeRef NEResourcesCopyTrustedApplicationPaths()
{
  CFTypeRef result;

  if (get_bundle_initialized != -1)
    dispatch_once(&get_bundle_initialized, &__block_literal_global_20_20413);
  result = CFBundleGetValueForInfoDictionaryKey((CFBundleRef)get_bundle_bundle, CFSTR("TrustedExecutables"));
  if (result)
    return CFRetain(result);
  return result;
}

void __get_bundle_block_invoke()
{
  const __CFAllocator *v0;
  const __CFURL *v1;

  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v1 = CFURLCreateFromFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)"/System/Library/Frameworks/NetworkExtension.framework", 53, 0);
  get_bundle_bundle = (uint64_t)CFBundleCreate(v0, v1);
  CFRelease(v1);
}

CFURLRef NEResourcesCopyVPNIconURL()
{
  if (get_bundle_initialized != -1)
    dispatch_once(&get_bundle_initialized, &__block_literal_global_20_20413);
  return CFBundleCopyResourceURL((CFBundleRef)get_bundle_bundle, CFSTR("NetworkConnect.icns"), 0, 0);
}

CFURLRef NEResourcesCopyNetworkPrivacyIconURL()
{
  if (get_bundle_initialized != -1)
    dispatch_once(&get_bundle_initialized, &__block_literal_global_20_20413);
  return CFBundleCopyResourceURL((CFBundleRef)get_bundle_bundle, CFSTR("LocalNetworkPrivacy.png"), 0, 0);
}

CFTypeRef NEResourcesCopyContentFilterExclusionList()
{
  CFTypeRef result;

  if (get_bundle_initialized != -1)
    dispatch_once(&get_bundle_initialized, &__block_literal_global_20_20413);
  result = CFBundleGetValueForInfoDictionaryKey((CFBundleRef)get_bundle_bundle, CFSTR("ContentFilterExclusionList"));
  if (result)
    return CFRetain(result);
  return result;
}

CFTypeRef NEResourcesCopyContentFilterDefaultDropExclusionList()
{
  CFTypeRef result;

  if (get_bundle_initialized != -1)
    dispatch_once(&get_bundle_initialized, &__block_literal_global_20_20413);
  result = CFBundleGetValueForInfoDictionaryKey((CFBundleRef)get_bundle_bundle, CFSTR("ContentFilterDefaultDropExclusionList"));
  if (result)
    return CFRetain(result);
  return result;
}

id NEResourcesCopyLocalizedNSString(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v3 = a2;
  v4 = a1;
  get_nsbundle();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  NEResourcesCopyPreferredLanguages();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)MEMORY[0x1E0CB34D0];
  objc_msgSend(v5, "localizations");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "preferredLocalizationsFromArray:forPreferences:", v8, v6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v9, "firstObject");
  if (get_bundle_initialized != -1)
    dispatch_once(&get_bundle_initialized, &__block_literal_global_20_20413);
  v10 = (void *)CFBundleCopyLocalizedStringForLocalization();

  return v10;
}

id NEResourcesCopyLocalizedFormatString(uint64_t a1, void *a2)
{
  return NEResourcesCopyLocalizedNSString(a2, a2);
}

id NEResourcesCopyDeviceLocalizedNSString(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v3 = a2;
  v4 = a1;
  get_nsbundle();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)CFPreferencesCopyValue(CFSTR("AppleLanguages"), (CFStringRef)*MEMORY[0x1E0C9B228], CFSTR("mobile"), (CFStringRef)*MEMORY[0x1E0C9B230]);
  v7 = (void *)MEMORY[0x1E0CB34D0];
  objc_msgSend(v5, "localizations");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "preferredLocalizationsFromArray:forPreferences:", v8, v6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v9, "firstObject");
  if (get_bundle_initialized != -1)
    dispatch_once(&get_bundle_initialized, &__block_literal_global_20_20413);
  v10 = (void *)CFBundleCopyLocalizedStringForLocalization();

  return v10;
}

id NEResourcesCopyDeviceLocalizedFormatString(uint64_t a1, void *a2)
{
  return NEResourcesCopyDeviceLocalizedNSString(a2, a2);
}

const __CFURL *NEResourcesCopyAppTrackingDomainsPath()
{
  const __CFURL *result;
  const __CFURL *v1;
  int v2;
  UInt8 buffer[1024];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (get_bundle_initialized != -1)
    dispatch_once(&get_bundle_initialized, &__block_literal_global_20_20413);
  result = CFBundleCopyResourceURL((CFBundleRef)get_bundle_bundle, CFSTR("apptrackingdomains.json"), 0, 0);
  if (result)
  {
    v1 = result;
    v2 = CFURLGetFileSystemRepresentation(result, 1u, buffer, 1024);
    CFRelease(v1);
    if (v2)
      return (const __CFURL *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)buffer, 0x600u);
    else
      return 0;
  }
  return result;
}

const __CFURL *NEResourcesCopyTestAppTrackingDomainsPath()
{
  const __CFURL *result;
  const __CFURL *v1;
  int v2;
  UInt8 buffer[1024];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (get_bundle_initialized != -1)
    dispatch_once(&get_bundle_initialized, &__block_literal_global_20_20413);
  result = CFBundleCopyResourceURL((CFBundleRef)get_bundle_bundle, CFSTR("testapptrackingdomains.json"), 0, 0);
  if (result)
  {
    v1 = result;
    v2 = CFURLGetFileSystemRepresentation(result, 1u, buffer, 1024);
    CFRelease(v1);
    if (v2)
      return (const __CFURL *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)buffer, 0x600u);
    else
      return 0;
  }
  return result;
}

void sub_19BE829B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19BE83188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t symptomReporterSuccessfullyLoaded()
{
  if (symptomReporterSuccessfullyLoaded_symbolLoadOnce != -1)
    dispatch_once(&symptomReporterSuccessfullyLoaded_symbolLoadOnce, &__block_literal_global_20475);
  return symptomReporterSuccessfullyLoaded_symbolsLoaded;
}

void __symptomReporterSuccessfullyLoaded_block_invoke()
{
  void *v0;
  char *v1;
  char *v2;
  const char *v3;
  BOOL v4;
  void *v5;
  BOOL v6;
  int v7;
  NSObject *v8;
  const char *v9;
  NSObject *v10;
  NSObject *v11;
  const char *v12;
  _BYTE __path[12];
  __int16 v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v0 = dlopen("/System/Library/PrivateFrameworks/SymptomReporter.framework/SymptomReporter", 6);
  v1 = getenv("DYLD_IMAGE_SUFFIX");
  v2 = v1;
  v3 = "out";
  if (v0 || !v1)
    goto LABEL_16;
  *(_QWORD *)__path = 0;
  v4 = asprintf((char **)__path, "%s%s", "/System/Library/PrivateFrameworks/SymptomReporter.framework/SymptomReporter", v1) <= 0;
  v5 = *(void **)__path;
  v6 = v4 || *(_QWORD *)__path == 0;
  v7 = !v6;
  if (v6)
  {
    v0 = 0;
    if (!*(_QWORD *)__path)
      goto LABEL_14;
    goto LABEL_13;
  }
  v0 = dlopen(*(const char **)__path, 6);
  v5 = *(void **)__path;
  if (*(_QWORD *)__path)
LABEL_13:
    free(v5);
LABEL_14:
  if (v7)
    v3 = "";
LABEL_16:
  if (v0)
  {
    symptomReporterSuccessfullyLoaded_symbolsLoaded = 1;
    symptom_create = (uint64_t)dlsym(v0, "symptom_create");
    if (symptom_create)
    {
      symptom_set_qualifier = (uint64_t)dlsym(v0, "symptom_set_qualifier");
      if (symptom_set_qualifier)
      {
        symptom_send = (uint64_t)dlsym(v0, "symptom_send");
        if (symptom_send)
        {
          symptom_set_additional_qualifier = (uint64_t)dlsym(v0, "symptom_set_additional_qualifier");
          if (symptom_set_additional_qualifier)
          {
            if (symptomReporterSuccessfullyLoaded_symbolsLoaded == 1)
            {
              v8 = ne_log_obj();
              if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
              {
                v9 = "[null]";
                if (v2)
                  v9 = v2;
                *(_DWORD *)__path = 136315394;
                *(_QWORD *)&__path[4] = v3;
                v14 = 2080;
                v15 = v9;
                _os_log_debug_impl(&dword_19BD16000, v8, OS_LOG_TYPE_DEBUG, "Successfully loaded SymptomReporter framework with%s suffix %s", __path, 0x16u);
              }
              return;
            }
LABEL_38:
            dlclose(v0);
            return;
          }
          v11 = ne_log_obj();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)__path = 0;
            v12 = "Failed to load SymptomReporter symbol symptom_set_additional_qualifier";
            goto LABEL_36;
          }
LABEL_37:
          symptomReporterSuccessfullyLoaded_symbolsLoaded = 0;
          goto LABEL_38;
        }
        v11 = ne_log_obj();
        if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          goto LABEL_37;
        *(_WORD *)__path = 0;
        v12 = "Failed to load SymptomReporter symbol symptom_send";
      }
      else
      {
        v11 = ne_log_obj();
        if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          goto LABEL_37;
        *(_WORD *)__path = 0;
        v12 = "Failed to load SymptomReporter symbol symptom_set_qualifier";
      }
    }
    else
    {
      v11 = ne_log_obj();
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        goto LABEL_37;
      *(_WORD *)__path = 0;
      v12 = "Failed to load SymptomReporter symbol symptom_create";
    }
LABEL_36:
    _os_log_error_impl(&dword_19BD16000, v11, OS_LOG_TYPE_ERROR, v12, __path, 2u);
    goto LABEL_37;
  }
  v10 = ne_log_obj();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)__path = 0;
    _os_log_error_impl(&dword_19BD16000, v10, OS_LOG_TYPE_ERROR, "Failed to load SymptomReporter framework", __path, 2u);
  }
}

void sub_19BE84704(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BE84C34(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BE84D90(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BE851FC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BE85E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id obj, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a37, 8);
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__20881(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__20882(uint64_t a1)
{

}

void sub_19BE8777C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BE87BD0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BE87E88(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BE88070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  void *v16;

  objc_destroyWeak(&location);
  objc_sync_exit(v16);
  _Unwind_Resume(a1);
}

void sub_19BE8819C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BE8B338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void authCallback(__CFUserNotification *a1, char a2)
{
  id v4;
  const char *v5;
  id *v6;
  uint64_t v7;
  id *v8;
  void *v9;
  __CFUserNotification *Property;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  NSObject *v14;
  CFIndex v15;
  const __CFString *v16;
  CFStringRef ResponseValue;
  NSObject *v18;
  id v19;
  uint8_t v20[8];
  _QWORD block[4];
  NSObject *v22;
  id v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock((os_unfair_lock_t)&g_currentNotificationLock);
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v4 = (id)g_currentNotifications;
  v6 = (id *)objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v26;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v26 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)v8);
        if (v9)
          Property = (__CFUserNotification *)objc_getProperty(*(id *)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)v8), v5, 16, 1);
        else
          Property = 0;
        if (Property == a1)
        {
          v6 = v9;
          goto LABEL_15;
        }
        v8 = (id *)((char *)v8 + 1);
      }
      while (v6 != v8);
      v11 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
      v6 = (id *)v11;
    }
    while (v11);
  }
LABEL_15:

  os_unfair_lock_unlock((os_unfair_lock_t)&g_currentNotificationLock);
  if (v6)
  {
    v13 = a2 & 3;
    if ((_DWORD)v13 == 1)
    {
      v14 = 0;
    }
    else if ((_DWORD)v13 == 3)
    {
      v14 = 0;
      v13 = 2;
    }
    else
    {
      v14 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v15 = 0;
      v16 = (const __CFString *)*MEMORY[0x1E0C9B880];
      do
      {
        ResponseValue = CFUserNotificationGetResponseValue(a1, v16, v15);
        if (!ResponseValue)
          break;
        -[NSObject addObject:](v14, "addObject:", ResponseValue);
        ++v15;
      }
      while (v15 != 10);
      v13 = 0;
    }
    v18 = objc_getProperty(v6, v12, 32, 1);
    v19 = v6[5];
    objc_msgSend(v6, "cancel");
    if (v18 && v19)
    {
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __authCallback_block_invoke;
      block[3] = &unk_1E3CC3B80;
      v23 = v19;
      v24 = v13;
      v22 = v14;
      dispatch_async(v18, block);

    }
  }
  else
  {
    ne_log_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v20 = 0;
      _os_log_error_impl(&dword_19BD16000, v14, OS_LOG_TYPE_ERROR, "Failed to find current notification on auth callback", v20, 2u);
    }
  }

}

void alertCallback(id a1, char a2)
{
  id v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id Property;
  uint64_t v12;
  id *v13;
  const char *v14;
  NSObject *v15;
  id v16;
  uint64_t v17;
  __int16 v18[8];
  _QWORD block[4];
  id v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock((os_unfair_lock_t)&g_currentNotificationLock);
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v4 = (id)g_currentNotifications;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
  if (v5)
  {
    v7 = v5;
    v8 = *(_QWORD *)v23;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v23 != v8)
          objc_enumerationMutation(v4);
        v10 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * v9);
        if (v10)
          Property = objc_getProperty(*(id *)(*((_QWORD *)&v22 + 1) + 8 * v9), v6, 16, 1);
        else
          Property = 0;
        if (Property == a1)
        {
          v13 = v10;
          goto LABEL_15;
        }
        ++v9;
      }
      while (v7 != v9);
      v12 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
      v7 = v12;
    }
    while (v12);
  }
  v13 = 0;
LABEL_15:

  os_unfair_lock_unlock((os_unfair_lock_t)&g_currentNotificationLock);
  if (v13)
  {
    v15 = objc_getProperty(v13, v14, 32, 1);
    v16 = v13[5];
    objc_msgSend(v13, "cancel");
    if (v15 && v16)
    {
      if ((a2 & 3) == 1)
        v17 = 1;
      else
        v17 = 2 * ((a2 & 3) == 3);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __alertCallback_block_invoke;
      block[3] = &unk_1E3CC3B08;
      v20 = v16;
      v21 = v17;
      dispatch_async(v15, block);

    }
  }
  else
  {
    ne_log_obj();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v18[0] = 0;
      _os_log_error_impl(&dword_19BD16000, v15, OS_LOG_TYPE_ERROR, "Failed to find current notification on alert callback", (uint8_t *)v18, 2u);
    }
  }

}

uint64_t __alertCallback_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 0);
}

uint64_t __authCallback_block_invoke(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[5] + 16))(a1[5], a1[6], a1[4]);
}

void sub_19BE8C4CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19BE93D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint8_t buf)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_19BE95E14(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x2A0], 8);
  _Unwind_Resume(a1);
}

__CFString *convert_error_to_string_21542(void *a1)
{
  id v1;
  void *v2;
  int v3;
  __CFString *v4;
  void *v5;
  void *v6;

  v1 = a1;
  objc_msgSend(v1, "domain");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isEqualToString:", CFSTR("NEConfigurationErrorDomain"));

  if (v3)
  {
    v4 = CFSTR("configuration is corrupted");
    switch(objc_msgSend(v1, "code"))
    {
      case 1:
        break;
      case 2:
        v5 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(v1, "localizedDescription");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "stringWithFormat:", CFSTR("configuration is invalid: %@"), v6);
        v4 = (__CFString *)objc_claimAutoreleasedReturnValue();

        break;
      case 3:
        v4 = CFSTR("configuration type is wrong");
        break;
      case 4:
        v4 = CFSTR("configuration owner application is wrong");
        break;
      case 5:
        v4 = CFSTR("configuration is stale");
        break;
      case 6:
        v4 = CFSTR("failed to write configuration to disk");
        break;
      case 7:
        v4 = CFSTR("configuration does not exist");
        break;
      case 8:
        v4 = CFSTR("invalid configuration operation request");
        break;
      case 9:
        v4 = CFSTR("configuration is unchanged");
        break;
      case 10:
        v4 = CFSTR("permission denied");
        break;
      case 11:
        v4 = CFSTR("IPC failed");
        break;
      case 12:
        v4 = CFSTR("failed to make the change in SCPreferences");
        break;
      case 13:
        v4 = CFSTR("failed to copy keychain items");
        break;
      case 14:
        v4 = CFSTR("failed into import certificates into keychain");
        break;
      case 15:
        v4 = CFSTR("unknown certificate format");
        break;
      case 16:
        v4 = CFSTR("failed to import certificate");
        break;
      case 17:
        v4 = CFSTR("internal failure with certificate installation");
        break;
      case 18:
        v4 = CFSTR("file not found");
        break;
      case 21:
        v4 = CFSTR("MDM required");
        break;
      default:
        v4 = CFSTR("<unknown>");
        break;
    }
  }
  else
  {
    objc_msgSend(v1, "localizedDescription");
    v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }

  return v4;
}

id find_config_by_name(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  void *v10;
  int v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v3)
  {
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v5 = v3;
    v6 = (id)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v6)
    {
      v7 = *(_QWORD *)v14;
      while (2)
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(_QWORD *)v14 != v7)
            objc_enumerationMutation(v5);
          v9 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)i);
          objc_msgSend(v9, "name", (_QWORD)v13);
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          v11 = objc_msgSend(v10, "isEqualToString:", v4);

          if (v11)
          {
            v6 = v9;
            goto LABEL_12;
          }
        }
        v6 = (id)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
        if (v6)
          continue;
        break;
      }
    }
LABEL_12:

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

uint64_t __Block_byref_object_copy__21548(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__21549(uint64_t a1)
{

}

void myCFRelease(const void **a1)
{
  const void *v2;

  if (a1)
  {
    v2 = *a1;
    if (v2)
    {
      CFRelease(v2);
      *a1 = 0;
    }
  }
}

CFTypeRef myCFRetain(CFTypeRef cf)
{
  if (cf)
    return CFRetain(cf);
  return cf;
}

void myCFReplace(CFTypeRef *a1, CFTypeRef cf)
{
  CFTypeRef v3;

  if (a1)
  {
    if (cf)
      v3 = CFRetain(cf);
    else
      v3 = 0;
    if (*a1)
      CFRelease(*a1);
    *a1 = v3;
  }
}

uint64_t myCFEqual(unint64_t cf1, unint64_t a2)
{
  uint64_t result;

  if (!(cf1 | a2))
    return 1;
  result = 0;
  if (cf1)
  {
    if (a2)
      return CFEqual((CFTypeRef)cf1, (CFTypeRef)a2);
  }
  return result;
}

void myCFDataReleaseReset(CFDataRef *a1)
{
  __CFData *v2;
  UInt8 *MutableBytePtr;
  UInt8 *v4;
  rsize_t Length;
  rsize_t v6;

  if (a1)
  {
    v2 = *a1;
    if (v2)
    {
      MutableBytePtr = CFDataGetMutableBytePtr(v2);
      if (MutableBytePtr)
      {
        v4 = MutableBytePtr;
        Length = CFDataGetLength(*a1);
        v6 = CFDataGetLength(*a1);
        memset_s(v4, Length, 0, v6);
      }
      CFRelease(*a1);
      *a1 = 0;
    }
  }
}

__CFData *myCFDataCreateMutableCopy(const __CFAllocator *a1, const UInt8 *a2, CFIndex a3)
{
  __CFData *v3;
  __CFData *Mutable;

  v3 = 0;
  if (a2)
  {
    if (a3)
    {
      Mutable = CFDataCreateMutable(a1, 0);
      v3 = Mutable;
      if (Mutable)
        CFDataAppendBytes(Mutable, a2, a3);
    }
  }
  return v3;
}

const __CFData *myCFDataCreateMutableCopyOfData(const __CFData *theData)
{
  NSObject *v1;
  uint8_t v2[16];

  if (theData)
  {
    theData = CFDataCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theData);
    if (!theData)
    {
      v1 = ne_log_obj();
      if (os_log_type_enabled(v1, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)v2 = 0;
        _os_log_fault_impl(&dword_19BD16000, v1, OS_LOG_TYPE_FAULT, "CFDataCreateMutableCopy failed", v2, 2u);
      }
      return 0;
    }
  }
  return theData;
}

void myCFDataResetReplace(CFDataRef *a1, CFDataRef theData)
{
  const __CFData *MutableCopyOfData;
  NSObject *v4;
  int v5;
  const char *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    MutableCopyOfData = myCFDataCreateMutableCopyOfData(theData);
    myCFDataReleaseReset(a1);
    *a1 = MutableCopyOfData;
  }
  else
  {
    v4 = ne_log_obj();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
    {
      v5 = 136315138;
      v6 = "myCFDataResetReplace";
      _os_log_fault_impl(&dword_19BD16000, v4, OS_LOG_TYPE_FAULT, "%s called with null oldP", (uint8_t *)&v5, 0xCu);
    }
  }
}

__CFData *myCFDataCreateMutableFromString(const __CFString *a1)
{
  CFIndex Length;
  CFIndex v3;
  char *v4;
  UInt8 *v5;
  const __CFAllocator *v6;
  CFIndex v7;
  __CFData *MutableCopy;

  if (!a1)
    return 0;
  if (!CFStringGetLength(a1))
    return 0;
  Length = CFStringGetLength(a1);
  v3 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  v4 = (char *)malloc_type_malloc(v3, 0xD053E110uLL);
  if (!v4)
    return 0;
  v5 = (UInt8 *)v4;
  CFStringGetCString(a1, v4, v3, 0x8000100u);
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v7 = CFStringGetLength(a1);
  MutableCopy = myCFDataCreateMutableCopy(v6, v5, v7);
  memset_s(v5, v3, 0, v3);
  free(v5);
  return MutableCopy;
}

void myCFDataResetReplaceFromString(CFDataRef *a1, CFStringRef theString)
{
  const __CFString *MutableCopy;
  CFIndex Length;
  CFIndex v5;
  char *v6;
  UInt8 *v7;
  const __CFAllocator *v8;
  CFIndex v9;
  NSObject *v10;
  NSObject *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    MutableCopy = theString;
    if (theString)
    {
      if (CFStringGetLength(theString) >= 1)
      {
        Length = CFStringGetLength(MutableCopy);
        v5 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
        v6 = (char *)malloc_type_malloc(v5, 0x4DB6B145uLL);
        if (v6)
        {
          v7 = (UInt8 *)v6;
          CFStringGetCString(MutableCopy, v6, v5, 0x8000100u);
          v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          v9 = CFStringGetLength(MutableCopy);
          MutableCopy = (const __CFString *)myCFDataCreateMutableCopy(v8, v7, v9);
          memset_s(v7, v5, 0, v5);
          free(v7);
          goto LABEL_9;
        }
        v10 = ne_log_obj();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
        {
          v12 = 67109120;
          LODWORD(v13) = v5;
          _os_log_fault_impl(&dword_19BD16000, v10, OS_LOG_TYPE_FAULT, "malloc(%u) failed", (uint8_t *)&v12, 8u);
        }
      }
      MutableCopy = 0;
    }
LABEL_9:
    myCFDataReleaseReset(a1);
    *a1 = (CFDataRef)MutableCopy;
    return;
  }
  v11 = ne_log_obj();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
  {
    v12 = 136315138;
    v13 = "myCFDataResetReplaceFromString";
    _os_log_fault_impl(&dword_19BD16000, v11, OS_LOG_TYPE_FAULT, "%s called with null oldP", (uint8_t *)&v12, 0xCu);
  }
}

const void *NEIsValidCFType(const void *result, uint64_t a2)
{
  if (result)
    return (const void *)(CFGetTypeID(result) == a2);
  return result;
}

const void *NEGetValueWithType(const __CFDictionary *a1, const void *a2, uint64_t a3)
{
  const void *v3;
  const void *Value;

  v3 = 0;
  if (a1)
  {
    if (a2)
    {
      Value = CFDictionaryGetValue(a1, a2);
      if (!Value)
        return 0;
      v3 = Value;
      if (CFGetTypeID(Value) != a3)
        return 0;
    }
  }
  return v3;
}

void NEInitCFTypes()
{
  if (NEInitCFTypes_onceToken != -1)
    dispatch_once(&NEInitCFTypes_onceToken, &__block_literal_global_22195);
}

_QWORD *NEMapIntegerToString(_QWORD *result, int a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  if (result)
  {
    v2 = result;
    result = (_QWORD *)*result;
    if (result)
    {
      v3 = v2 + 2;
      do
      {
        if (*((_DWORD *)v3 - 2) == a2)
          break;
        v4 = (_QWORD *)*v3;
        v3 += 2;
        result = v4;
      }
      while (v4);
    }
  }
  return result;
}

const void **NEMapStringToInteger(const void **result, CFTypeRef cf1)
{
  const void **v3;
  const void *v4;
  const void *v5;

  if (result)
  {
    v3 = result;
    v4 = *result;
    if (*result)
    {
      while (!cf1 || !CFEqual(cf1, v4))
      {
        v5 = v3[2];
        v3 += 2;
        v4 = v5;
        if (!v5)
          return 0;
      }
      return (const void **)*((unsigned int *)v3 + 2);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t NEInChecksum(unsigned __int16 *a1, int a2)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  BOOL v5;

  if (a2 < 2)
  {
    v2 = 0;
  }
  else
  {
    v2 = 0;
    v3 = a2;
    do
    {
      v4 = *a1++;
      v2 += v4;
      a2 = v3 - 2;
      v5 = v3 > 3;
      v3 -= 2;
    }
    while (v5);
  }
  if (a2 == 1)
    v2 += *(unsigned __int8 *)a1;
  return (unsigned __int16)~(HIWORD(v2) + v2 + ((HIWORD(v2) + (unsigned __int16)v2) >> 16));
}

void *NECreateAddressStructFromString(const __CFString *a1, uint64_t a2, uint64_t a3)
{
  CFIndex v6;
  char *v7;
  const __CFAllocator *v8;
  const __CFString *v9;
  void *v10;
  const __CFString *v11;
  CFIndex v12;
  char *v13;
  addrinfo *v15;
  addrinfo *v16;
  addrinfo v17;

  v16 = 0;
  if (!a1)
    return 0;
  v6 = CFStringGetLength(a1) + 1;
  v7 = (char *)malloc_type_malloc(v6, 0xEFF596B0uLL);
  CFStringGetCString(a1, v7, v6, 0x600u);
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (a2)
    v9 = CFStringCreateWithFormat(v8, 0, CFSTR("%@"), a2);
  else
    v9 = CFStringCreateWithFormat(v8, 0, CFSTR("%d"), a3);
  v11 = v9;
  v12 = CFStringGetLength(v9) + 1;
  v13 = (char *)malloc_type_malloc(v12, 0x3A484EECuLL);
  CFStringGetCString(v11, v13, v12, 0x600u);
  CFRelease(v11);
  memset(&v17, 0, sizeof(v17));
  v17.ai_socktype = 2;
  v17.ai_flags = 4;
  if (getaddrinfo(v7, v13, &v17, &v16))
  {
    v10 = 0;
    if (!v7)
      goto LABEL_9;
  }
  else
  {
    v10 = malloc_type_malloc(0x80uLL, 0x1000040AE2C30F4uLL);
    v15 = v16;
    if (v10)
      __memcpy_chk();
    freeaddrinfo(v15);
    if (!v7)
      goto LABEL_9;
  }
  free(v7);
LABEL_9:
  if (v13)
    free(v13);
  return v10;
}

const __CFString *NEGetAddressFamilyFromString(CFStringRef theString)
{
  const __CFString *v1;
  CFIndex v2;
  char *v3;
  addrinfo *v5;
  addrinfo *v6;
  addrinfo v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v1 = theString;
  v16 = *MEMORY[0x1E0C80C00];
  v6 = 0;
  if (theString)
  {
    v14 = 0u;
    v15 = 0u;
    v13 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v8 = 0u;
    v2 = CFStringGetLength(theString) + 1;
    v3 = (char *)malloc_type_malloc(v2, 0xD62D3ECEuLL);
    CFStringGetCString(v1, v3, v2, 0x600u);
    memset(&v7, 0, sizeof(v7));
    v7.ai_socktype = 2;
    v7.ai_flags = 4;
    if (!getaddrinfo(v3, 0, &v7, &v6))
    {
      v5 = v6;
      __memcpy_chk();
      freeaddrinfo(v5);
      v1 = (const __CFString *)BYTE1(v8);
      if (!v3)
        return v1;
      goto LABEL_4;
    }
    v1 = 0;
    if (v3)
LABEL_4:
      free(v3);
  }
  return v1;
}

CFDataRef NECreateAddressDataFromString(const __CFString *a1, const __CFString *a2, int *a3)
{
  CFIndex v6;
  char *v7;
  CFIndex v8;
  char *v9;
  CFDataRef v10;
  addrinfo *v12;
  int v13;
  addrinfo *v14;
  addrinfo v15;
  _OWORD v16[8];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v14 = 0;
  if (!a1)
    return 0;
  memset(v16, 0, sizeof(v16));
  v6 = CFStringGetLength(a1) + 1;
  v7 = (char *)malloc_type_malloc(v6, 0x3A9DCF8DuLL);
  CFStringGetCString(a1, v7, v6, 0x600u);
  if (a2)
  {
    v8 = CFStringGetLength(a2) + 1;
    v9 = (char *)malloc_type_malloc(v8, 0x565B4E30uLL);
    CFStringGetCString(a2, v9, v8, 0x600u);
  }
  else
  {
    v9 = 0;
  }
  memset(&v15, 0, sizeof(v15));
  v15.ai_socktype = 2;
  v15.ai_flags = 4;
  if (getaddrinfo(v7, v9, &v15, &v14))
    goto LABEL_7;
  v12 = v14;
  __memcpy_chk();
  freeaddrinfo(v12);
  if (BYTE1(v16[0]) == 30)
  {
    v10 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)v16 + 8, 16);
    if (!a3)
      goto LABEL_8;
    v13 = 30;
    goto LABEL_19;
  }
  if (BYTE1(v16[0]) == 2)
  {
    v10 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)v16 + 4, 4);
    if (!a3)
      goto LABEL_8;
    v13 = 2;
LABEL_19:
    *a3 = v13;
    goto LABEL_8;
  }
LABEL_7:
  v10 = 0;
LABEL_8:
  if (v7)
    free(v7);
  if (v9)
    free(v9);
  return v10;
}

CFDataRef NECreateAddressStructDataFromString(const __CFString *a1, const __CFString *a2, int *a3)
{
  CFIndex v6;
  char *v7;
  CFIndex v8;
  char *v9;
  CFDataRef v10;
  addrinfo *v11;
  int v12;
  addrinfo *v14;
  addrinfo v15;
  UInt8 bytes[16];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v14 = 0;
  if (!a1)
    return 0;
  v22 = 0u;
  v23 = 0u;
  v21 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  *(_OWORD *)bytes = 0u;
  v6 = CFStringGetLength(a1) + 1;
  v7 = (char *)malloc_type_malloc(v6, 0x967EDE5BuLL);
  CFStringGetCString(a1, v7, v6, 0x600u);
  if (a2)
  {
    v8 = CFStringGetLength(a2) + 1;
    v9 = (char *)malloc_type_malloc(v8, 0xE155708FuLL);
    CFStringGetCString(a2, v9, v8, 0x600u);
  }
  else
  {
    v9 = 0;
  }
  memset(&v15, 0, sizeof(v15));
  v15.ai_socktype = 2;
  v15.ai_flags = 4;
  if (!getaddrinfo(v7, v9, &v15, &v14))
  {
    v11 = v14;
    __memcpy_chk();
    freeaddrinfo(v11);
    v10 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, 128);
    v12 = bytes[1];
    if (bytes[1] == 2)
    {
      if (!a3)
        goto LABEL_14;
      v12 = 2;
    }
    else if (!a3 || bytes[1] != 30)
    {
      goto LABEL_14;
    }
    *a3 = v12;
    goto LABEL_14;
  }
  v10 = 0;
LABEL_14:
  if (v7)
    free(v7);
  if (v9)
    free(v9);
  return v10;
}

CFStringRef NECreateAddressString(CFStringRef result)
{
  int v1;
  uint64_t *p_info;
  int v3;
  char cStr[64];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v1 = BYTE1(result->isa);
    if (v1 == 30)
    {
      if (LOBYTE(result->isa) >= 0x1Cu)
      {
        p_info = &result->info;
        v3 = 30;
        goto LABEL_8;
      }
    }
    else if (v1 == 2 && LOBYTE(result->isa) >= 0x10u)
    {
      p_info = (uint64_t *)((char *)&result->isa + 4);
      v3 = 2;
LABEL_8:
      inet_ntop(v3, p_info, cStr, 0x40u);
      return CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], cStr, 0x600u);
    }
    return 0;
  }
  return result;
}

__CFString *NECreateAddressStringWithPort(uint64_t a1)
{
  const __CFString *v2;
  const __CFString *v3;
  __CFString *MutableCopy;
  int v5;
  const __CFString *v6;

  v2 = NECreateAddressString((CFStringRef)a1);
  if (!v2)
    return 0;
  v3 = v2;
  MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v2);
  CFRelease(v3);
  v5 = *(unsigned __int8 *)(a1 + 1);
  if (v5 == 30)
  {
    v6 = CFSTR(".%u");
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = CFSTR(":%u");
LABEL_7:
    CFStringAppendFormat(MutableCopy, 0, v6, bswap32(*(unsigned __int16 *)(a1 + 2)) >> 16);
  }
  return MutableCopy;
}

uint64_t NEGetPortFromAddress(uint64_t result)
{
  int v1;
  unsigned int v2;

  if (result)
  {
    v1 = *(unsigned __int8 *)(result + 1);
    if (v1 == 30 || v1 == 2)
      v2 = *(unsigned __int16 *)(result + 2);
    else
      v2 = 0;
    return __rev16(v2);
  }
  return result;
}

CFStringRef NECreateAddressStringFromBuffer(CFStringRef result, unint64_t a2, int a3)
{
  CFStringRef v3;
  int v4;
  char cStr[64];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v3 = result;
    if (a2 >= 4 && a3 == 2)
    {
      v4 = 2;
LABEL_8:
      inet_ntop(v4, v3, cStr, 0x40u);
      return CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], cStr, 0x600u);
    }
    result = 0;
    if (a2 >= 0x10 && a3 == 30)
    {
      v4 = 30;
      goto LABEL_8;
    }
  }
  return result;
}

CFStringRef NECreateIPv4AddressMaskStringFromPrefix(int a1)
{
  size_t v3;
  int v4;
  int __b;
  char cStr[64];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (a1 > 32)
    return 0;
  __b = 0;
  if (a1 < 8)
  {
    v3 = 0;
  }
  else
  {
    v3 = (a1 >> 3) - 1 + 1;
    memset(&__b, 255, v3);
  }
  if (a1 <= 0)
    v4 = -(-a1 & 7);
  else
    v4 = a1 & 7;
  if (v4)
    cStr[v3 - 4] = 0xFF00u >> v4;
  inet_ntop(2, &__b, cStr, 0x40u);
  return CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], cStr, 0x600u);
}

CFStringRef NECreateIPv6AddressMaskStringFromPrefix(int a1)
{
  size_t v2;
  int v3;
  _QWORD __b[2];
  char cStr[64];
  uint64_t v7;

  v2 = 0;
  v7 = *MEMORY[0x1E0C80C00];
  __b[0] = 0;
  __b[1] = 0;
  if (a1 >= 8)
  {
    v2 = (a1 >> 3) - 1 + 1;
    memset(__b, 255, v2);
  }
  if (a1 <= 0)
    v3 = -(-a1 & 7);
  else
    v3 = a1 & 7;
  if (v3)
    *((_BYTE *)__b + v2) = 0xFF00u >> v3;
  inet_ntop(30, __b, cStr, 0x40u);
  return CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], cStr, 0x600u);
}

CFStringRef NECreateIPv6SubnetAddressWithPrefix(const __CFString *a1, int a2)
{
  const __CFString *v3;
  _BYTE *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  CFStringRef v8;
  _QWORD v10[2];
  char cStr[64];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = NECreateIPv6AddressMaskStringFromPrefix(a2);
  v4 = NECreateAddressStructFromString(v3, 0, 0);
  v5 = NECreateAddressStructFromString(a1, 0, 0);
  v6 = v5;
  if (v4 && v5)
  {
    if (v4[1] == 30 && *((_BYTE *)v5 + 1) == 30)
    {
      v7 = 0;
      v10[0] = 0;
      v10[1] = 0;
      do
      {
        *((_BYTE *)v10 + v7) = v4[v7 + 8] & *((_BYTE *)v5 + v7 + 8);
        ++v7;
      }
      while (v7 != 16);
      inet_ntop(30, v10, cStr, 0x40u);
      v8 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], cStr, 0x600u);
    }
    else
    {
      v8 = 0;
    }
  }
  else
  {
    v8 = 0;
    if (!v4)
    {
      if (!v5)
        goto LABEL_11;
      goto LABEL_10;
    }
  }
  free(v4);
  if (v6)
LABEL_10:
    free(v6);
LABEL_11:
  if (v3)
    CFRelease(v3);
  return v8;
}

void NESetValueIfPresent(const __CFDictionary *a1, __CFDictionary *a2, void *key)
{
  const void *Value;

  if (a1 && a2 && key)
  {
    if (CFDictionaryContainsKey(a1, key))
    {
      Value = CFDictionaryGetValue(a1, key);
      CFDictionarySetValue(a2, key, Value);
    }
  }
}

void NEAddDateToDictionary(__CFDictionary *a1, const void *a2, uint64_t a3)
{
  CFDateRef v5;
  CFDateRef v6;

  if (a1 && a2)
  {
    v5 = CFDateCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (double)a3 - *MEMORY[0x1E0C9ADF8]);
    if (v5)
    {
      v6 = v5;
      CFDictionaryAddValue(a1, a2, v5);
      CFRelease(v6);
    }
  }
}

void NEAddIntToDictionary(__CFDictionary *a1, const void *a2, int a3)
{
  CFNumberRef v5;
  CFNumberRef v6;
  int valuePtr;

  valuePtr = a3;
  if (a1 && a2)
  {
    v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
    if (v5)
    {
      v6 = v5;
      CFDictionaryAddValue(a1, a2, v5);
      CFRelease(v6);
    }
  }
}

void NEAddInt64ToDictionary(__CFDictionary *a1, const void *a2, uint64_t a3)
{
  CFNumberRef v5;
  CFNumberRef v6;
  uint64_t valuePtr;

  valuePtr = a3;
  if (a1 && a2)
  {
    v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &valuePtr);
    if (v5)
    {
      v6 = v5;
      CFDictionaryAddValue(a1, a2, v5);
      CFRelease(v6);
    }
  }
}

void NEAddIntToArray(__CFArray *a1, int a2)
{
  CFNumberRef v3;
  CFNumberRef v4;
  int valuePtr;

  valuePtr = a2;
  if (a1)
  {
    v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
    if (v3)
    {
      v4 = v3;
      CFArrayAppendValue(a1, v3);
      CFRelease(v4);
    }
  }
}

uint64_t NEGetIntFromDictionary(const __CFDictionary *a1, const void *a2, uint64_t a3)
{
  uint64_t v3;
  const __CFNumber *Value;
  unsigned int valuePtr;

  v3 = a3;
  valuePtr = a3;
  if (a1)
  {
    if (a2)
    {
      Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
      if (Value)
      {
        CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
        return valuePtr;
      }
    }
  }
  return v3;
}

uint64_t NEGetIntFromArray(const __CFArray *a1, CFIndex a2, uint64_t a3)
{
  uint64_t v3;
  const __CFNumber *ValueAtIndex;
  unsigned int valuePtr;

  v3 = a3;
  valuePtr = a3;
  if (a1)
  {
    ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, a2);
    if (ValueAtIndex)
    {
      CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &valuePtr);
      return valuePtr;
    }
  }
  return v3;
}

void NEAddAddressToDictionary(__CFDictionary *a1, const void *a2, unsigned __int8 *a3)
{
  int v5;
  const void *v6;
  int v7;
  CFStringRef v8;
  CFStringRef v9;
  char cStr[64];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a1 && a2 && a3)
  {
    v5 = a3[1];
    if (v5 == 30)
    {
      v6 = a3 + 8;
      v7 = 30;
    }
    else
    {
      if (v5 != 2)
        return;
      v6 = a3 + 4;
      v7 = 2;
    }
    inet_ntop(v7, v6, cStr, 0x40u);
    v8 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], cStr, 0x600u);
    if (v8)
    {
      v9 = v8;
      CFDictionaryAddValue(a1, a2, v8);
      CFRelease(v9);
    }
  }
}

void NEAddPortToDictionary(__CFDictionary *a1, const void *a2, uint64_t a3)
{
  int v3;

  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        v3 = *(unsigned __int8 *)(a3 + 1);
        if (v3 == 30 || v3 == 2)
          NEAddIntToDictionary(a1, a2, bswap32(*(unsigned __int16 *)(a3 + 2)) >> 16);
      }
    }
  }
}

uint64_t NEGetPrefixForAddressRange(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  __int128 *v12;
  __int128 v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  BOOL v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t i;
  uint64_t v27;
  unint64_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int32x4_t v31;
  int32x4_t v32;
  uint32x4_t v33;
  int64x2_t v34;
  int32x4_t v35;
  int8x16_t v36;
  uint64x2_t v37;
  uint64x2_t v38;
  uint64x2_t v39;
  int v40;
  int64x2_t v41;
  int64x2_t v42;
  int32x4_t v43;
  unint64_t v44;
  int32x4_t v45;
  uint32x4_t v46;
  int64x2_t v47;
  int32x4_t v48;
  int8x16_t v49;
  uint64x2_t v50;
  uint64x2_t v51;
  uint64x2_t v52;
  __int128 v53;
  __int128 v54;

  result = 0xFFFFFFFFLL;
  if (!a1 || !a2)
    return result;
  v4 = *(unsigned __int8 *)(a1 + 1);
  if (v4 != *(unsigned __int8 *)(a2 + 1))
    return 0xFFFFFFFFLL;
  if (v4 == 30)
  {
    v11 = 0;
    v12 = (__int128 *)(a1 + 8);
    v13 = *(_OWORD *)(a1 + 8);
    v53 = *(_OWORD *)(a2 + 8);
    v54 = v13;
    result = 32;
    while (1)
    {
      v14 = *(_DWORD *)((char *)&v54 + v11);
      v15 = *(_DWORD *)((char *)&v53 + v11);
      if (v14 != v15)
        break;
      v11 += 4;
      result += 32;
      if (v11 == 16)
      {
        result = 128;
        goto LABEL_20;
      }
    }
    v21 = bswap32(v15);
    v22 = bswap32(v14);
    do
    {
      v22 >>= 1;
      v20 = v22 == v21 >> 1;
      v21 >>= 1;
      --result;
    }
    while (!v20);
LABEL_20:
    v23 = 0;
    v24 = *v12;
    v53 = *(_OWORD *)(a2 + 8);
    v54 = v24;
    v25 = 32 - result;
    for (i = result; ; i -= 32)
    {
      if (!i)
      {
        if (*((_DWORD *)&v54 + v23) || *((_DWORD *)&v53 + v23) != -1)
          return 0xFFFFFFFFLL;
        return result;
      }
      if (i <= 0x1F)
        break;
      ++v23;
      v25 += 32;
      if (v23 == 4)
        return result;
    }
    if (v25 <= 1)
      v25 = 1;
    v27 = v25 - 1;
    v28 = (v25 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v29 = (int64x2_t)xmmword_19BED7520;
    v30 = (int64x2_t)xmmword_19BED7530;
    v31 = (int32x4_t)xmmword_19BED7540;
    v32 = 0uLL;
    v33.i64[0] = 0x100000001;
    v33.i64[1] = 0x100000001;
    v34 = vdupq_n_s64(4uLL);
    v35.i64[0] = 0x400000004;
    v35.i64[1] = 0x400000004;
    do
    {
      v36 = (int8x16_t)v32;
      v37 = (uint64x2_t)v29;
      v38 = (uint64x2_t)v30;
      v32 = vaddq_s32((int32x4_t)vshlq_u32(v33, (uint32x4_t)v31), v32);
      v29 = vaddq_s64(v29, v34);
      v30 = vaddq_s64(v30, v34);
      v31 = vaddq_s32(v31, v35);
      v28 -= 4;
    }
    while (v28);
    v39 = (uint64x2_t)vdupq_lane_s64(v27, 0);
    v40 = vaddvq_s32((int32x4_t)vbslq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v38, v39), (int32x4_t)vcgtq_u64(v37, v39)), v36, (int8x16_t)v32));
    if ((bswap32(*((_DWORD *)&v54 + v23)) & v40) == 0
      && (v40 & ~bswap32(*((_DWORD *)&v53 + v23))) == 0)
    {
      return result;
    }
    return 0xFFFFFFFFLL;
  }
  if (v4 != 2)
    return 0xFFFFFFFFLL;
  v5 = *(_DWORD *)(a1 + 4);
  v6 = bswap32(v5);
  v7 = *(_DWORD *)(a2 + 4);
  v8 = bswap32(v7);
  if (v5 == v7)
  {
    v9 = 0;
    v10 = 32;
  }
  else
  {
    v16 = -3;
    v17 = v8;
    v18 = v6;
    do
    {
      v19 = v16;
      v18 >>= 1;
      v20 = v18 == v17 >> 1;
      v17 >>= 1;
      --v16;
    }
    while (!v20);
    v10 = v19 + 34;
    if (v19 == -2)
    {
      v9 = 0;
    }
    else
    {
      v41 = (int64x2_t)xmmword_19BED7520;
      v42 = (int64x2_t)xmmword_19BED7530;
      v43 = (int32x4_t)xmmword_19BED7540;
      v44 = -v16 & 0xFFFFFFFFFFFFFFFCLL;
      v45 = 0uLL;
      v46.i64[0] = 0x100000001;
      v46.i64[1] = 0x100000001;
      v47 = vdupq_n_s64(4uLL);
      v48.i64[0] = 0x400000004;
      v48.i64[1] = 0x400000004;
      do
      {
        v49 = (int8x16_t)v45;
        v50 = (uint64x2_t)v41;
        v51 = (uint64x2_t)v42;
        v45 = vaddq_s32((int32x4_t)vshlq_u32(v46, (uint32x4_t)v43), v45);
        v41 = vaddq_s64(v41, v47);
        v42 = vaddq_s64(v42, v47);
        v43 = vaddq_s32(v43, v48);
        v44 -= 4;
      }
      while (v44);
      v52 = (uint64x2_t)vdupq_lane_s64(-3 - v19, 0);
      v9 = vaddvq_s32((int32x4_t)vbslq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v51, v52), (int32x4_t)vcgtq_u64(v50, v52)), v49, (int8x16_t)v45));
    }
  }
  if (((v6 | ~v8) & v9) != 0)
    return 0xFFFFFFFFLL;
  else
    return v10;
}

uint64_t NEGetPrefixForAddressRangeStrings(const __CFString *a1, const __CFString *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;

  v3 = NECreateAddressStructFromString(a1, 0, 0);
  v4 = NECreateAddressStructFromString(a2, 0, 0);
  v5 = NEGetPrefixForAddressRange((uint64_t)v3, (uint64_t)v4);
  if (v3)
    free(v3);
  if (v4)
    free(v4);
  return v5;
}

uint64_t NEGetPrefixForIPv4NetmaskString(const __CFString *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  v1 = NECreateAddressStructFromString(a1, 0, 0);
  v2 = NECreateAddressStructFromString(CFSTR("255.255.255.255"), 0, 0);
  v3 = NEGetPrefixForAddressRange((uint64_t)v1, (uint64_t)v2);
  if (v1)
    free(v1);
  if (v2)
    free(v2);
  return v3;
}

uint64_t NEGetPrefixForIPv6NetmaskString(const __CFString *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  v1 = NECreateAddressStructFromString(a1, 0, 0);
  v2 = NECreateAddressStructFromString(CFSTR("ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"), 0, 0);
  v3 = NEGetPrefixForAddressRange((uint64_t)v1, (uint64_t)v2);
  if (v1)
    free(v1);
  if (v2)
    free(v2);
  return v3;
}

uint64_t NECompareAddresses(const __CFString *a1, const __CFString *a2)
{
  uint64_t v2;
  CFDataRef v4;
  const __CFData *v5;
  CFDataRef v6;
  const __CFData *v7;
  const UInt8 *BytePtr;
  const UInt8 *v9;
  CFIndex Length;
  int v11;
  uint64_t v13;

  v2 = 4294967294;
  if (a1 && a2)
  {
    v13 = 0;
    v4 = NECreateAddressDataFromString(a1, 0, (int *)&v13 + 1);
    v5 = v4;
    if (v4 && HIDWORD(v13))
    {
      v6 = NECreateAddressDataFromString(a2, 0, (int *)&v13);
      if (v6)
      {
        v7 = v6;
        if ((_DWORD)v13 == HIDWORD(v13))
        {
          BytePtr = CFDataGetBytePtr(v5);
          v9 = CFDataGetBytePtr(v7);
          Length = CFDataGetLength(v5);
          v11 = memcmp(BytePtr, v9, Length);
          if (v11 >= 0)
            v2 = v11 != 0;
          else
            v2 = 0xFFFFFFFFLL;
        }
        CFRelease(v5);
        v5 = v7;
      }
      goto LABEL_12;
    }
    if (v4)
LABEL_12:
      CFRelease(v5);
  }
  return v2;
}

BOOL NEAddressRangeIsContainedInAddressRange(const __CFString *a1, const __CFString *a2, const __CFString *a3, const __CFString *a4)
{
  int v6;
  unsigned int v7;

  v6 = NECompareAddresses(a1, a3);
  v7 = NECompareAddresses(a2, a4);
  return (v6 + 1) < 2 && v7 < 2;
}

void NEAddDataToDictionary(__CFDictionary *a1, const void *a2, UInt8 *bytes, int a4)
{
  CFDataRef v6;
  CFDataRef v7;

  if (a1 && a2 && bytes)
  {
    v6 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, a4);
    if (v6)
    {
      v7 = v6;
      CFDictionaryAddValue(a1, a2, v6);
      CFRelease(v7);
    }
  }
}

void NEAppendIntToArray(__CFArray *a1, int a2)
{
  CFNumberRef v3;
  CFNumberRef v4;
  int valuePtr;

  valuePtr = a2;
  if (a1)
  {
    v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
    if (v3)
    {
      v4 = v3;
      CFArrayAppendValue(a1, v3);
      CFRelease(v4);
    }
  }
}

const __CFNumber *NEGetValueFromIntArray(const __CFNumber *result, CFIndex a2)
{
  const __CFArray *v3;
  unsigned int valuePtr;

  valuePtr = 0;
  if (result)
  {
    v3 = result;
    if (CFArrayGetCount(result) <= a2)
    {
      return 0;
    }
    else
    {
      result = (const __CFNumber *)CFArrayGetValueAtIndex(v3, a2);
      if (result)
      {
        CFNumberGetValue(result, kCFNumberIntType, &valuePtr);
        return (const __CFNumber *)valuePtr;
      }
    }
  }
  return result;
}

CFDataRef NECreateDataFromString(const __CFString *a1, int a2)
{
  CFIndex Length;
  CFIndex v5;
  CFIndex v6;
  char *v7;
  UInt8 *v8;
  CFIndex v9;
  CFDataRef v10;

  if (!a1)
    return 0;
  Length = CFStringGetLength(a1);
  if (!Length)
    return 0;
  v5 = Length;
  v6 = Length + 1;
  v7 = (char *)malloc_type_malloc(Length + 1, 0x970EF794uLL);
  if (!v7)
    return 0;
  v8 = (UInt8 *)v7;
  if (CFStringGetCString(a1, v7, v6, 0x600u))
  {
    if (a2)
      v9 = v5 + 1;
    else
      v9 = v5;
    v10 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v8, v9);
  }
  else
  {
    v10 = 0;
  }
  free(v8);
  return v10;
}

CFStringRef NECreateStringFromData(CFStringRef result)
{
  const __CFData *v1;
  CFIndex Length;
  const UInt8 *BytePtr;
  const __CFAllocator *v4;
  const __CFData *v5;
  const __CFData *v6;
  CFIndex location;
  CFIndex v8;
  UInt8 bytes;
  CFRange v10;

  if (result)
  {
    v1 = (const __CFData *)result;
    Length = CFDataGetLength((CFDataRef)result);
    BytePtr = CFDataGetBytePtr(v1);
    bytes = 0;
    v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v5 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &bytes, 1);
    if (!v5
      || (v6 = v5,
          v10.location = 0,
          v10.length = Length,
          location = CFDataFind(v1, v5, v10, 0).location,
          CFRelease(v6),
          location == -1))
    {
      v8 = CFDataGetLength(v1);
      return CFStringCreateWithBytes(v4, BytePtr, v8, 0x600u, 0);
    }
    else
    {
      return CFStringCreateWithCString(v4, (const char *)BytePtr, 0x600u);
    }
  }
  return result;
}

void *NECreateCStringFromCFString(const __CFString *a1)
{
  CFIndex Length;
  CFIndex v3;
  void *v4;

  if (!a1)
    return 0;
  Length = CFStringGetLength(a1);
  if (!Length)
    return 0;
  v3 = Length + 1;
  v4 = malloc_type_calloc(1uLL, Length + 1, 0x85813EFEuLL);
  if (v4 && !CFStringGetCString(a1, (char *)v4, v3, 0x600u))
  {
    free(v4);
    return 0;
  }
  return v4;
}

void NEAddValueToIntKeyedDictionary(__CFDictionary *a1, int a2, const void *a3)
{
  CFNumberRef v5;
  CFNumberRef v6;
  int valuePtr;

  valuePtr = a2;
  if (a1 && a3)
  {
    v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
    if (v5)
    {
      v6 = v5;
      CFDictionaryAddValue(a1, v5, a3);
      CFRelease(v6);
    }
  }
}

const __CFDictionary *NEGetValueFromIntKeyedDictionary(const __CFDictionary *a1, int a2)
{
  const __CFDictionary *Value;
  CFNumberRef v3;
  CFNumberRef v4;
  int valuePtr;

  Value = a1;
  valuePtr = a2;
  if (a1)
  {
    v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
    if (v3)
    {
      v4 = v3;
      Value = (const __CFDictionary *)CFDictionaryGetValue(Value, v3);
      CFRelease(v4);
    }
    else
    {
      return 0;
    }
  }
  return Value;
}

void NERemoveValueFromIntKeyedDictionary(__CFDictionary *a1, int a2)
{
  CFNumberRef v3;
  CFNumberRef v4;
  int valuePtr;

  valuePtr = a2;
  if (a1)
  {
    v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
    if (v3)
    {
      v4 = v3;
      CFDictionaryRemoveValue(a1, v3);
      CFRelease(v4);
    }
  }
}

NSObject *NERepeatingEventCreate(NSObject *a1, dispatch_time_t a2, uintptr_t a3, uint64_t a4, uint64_t a5, int a6, const void *a7, const void *a8)
{
  _DWORD *v16;
  NSObject *v17;
  NSObject *v18;
  uint64_t v19;
  _QWORD v21[5];
  _QWORD handler[5];

  v16 = malloc_type_calloc(1uLL, 0x20uLL, 0x1080040AA036A7FuLL);
  *(_QWORD *)v16 = a4;
  v16[2] = a6;
  if (a7)
    *((_QWORD *)v16 + 2) = _Block_copy(a7);
  if (a8)
    *((_QWORD *)v16 + 3) = _Block_copy(a8);
  v16[3] = 0;
  v17 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, a3, a1);
  v18 = v17;
  if (v17)
  {
    dispatch_set_context(v17, v16);
    dispatch_set_finalizer_f(v18, (dispatch_function_t)repeatingEventFinalizer);
    dispatch_source_set_timer(v18, a2, 1000000 * a4, 1000000 * a5);
    v19 = MEMORY[0x1E0C809B0];
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 0x40000000;
    handler[2] = __NERepeatingEventCreate_block_invoke;
    handler[3] = &__block_descriptor_tmp_12;
    handler[4] = v18;
    dispatch_source_set_event_handler(v18, handler);
    v21[0] = v19;
    v21[1] = 0x40000000;
    v21[2] = __NERepeatingEventCreate_block_invoke_2;
    v21[3] = &__block_descriptor_tmp_13_22254;
    v21[4] = v18;
    dispatch_source_set_cancel_handler(v18, v21);
    dispatch_resume(v18);
  }
  else
  {
    free(v16);
  }
  return v18;
}

void repeatingEventFinalizer(_QWORD *a1)
{
  const void *v2;
  const void *v3;

  if (a1)
  {
    v2 = (const void *)a1[2];
    if (v2)
      _Block_release(v2);
    v3 = (const void *)a1[3];
    if (v3)
      _Block_release(v3);
    free(a1);
  }
}

uint64_t NERepeatingEventGetTimesFired(NSObject *a1)
{
  if (a1)
    return *((unsigned int *)dispatch_get_context(a1) + 3);
  else
    return 0xFFFFFFFFLL;
}

NSObject *NERepeatingEventGetIntervalInMilliseconds(NSObject *result)
{
  if (result)
    return *(NSObject **)dispatch_get_context(result);
  return result;
}

void NERepeatingEventRelease(NSObject *a1)
{
  if (a1)
  {
    if (!dispatch_source_testcancel(a1))
      dispatch_source_cancel(a1);
  }
}

NSObject *NECreateTimerSource(dispatch_queue_t queue, uint64_t a2, void *a3)
{
  NSObject *v5;
  dispatch_time_t v6;
  _QWORD handler[5];

  v5 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, queue);
  if (v5)
  {
    v6 = dispatch_time(0, 1000000000 * a2);
    dispatch_source_set_timer(v5, v6, 0xFFFFFFFFFFFFFFFFLL, 0);
    dispatch_source_set_event_handler(v5, a3);
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 0x40000000;
    handler[2] = __NECreateTimerSource_block_invoke;
    handler[3] = &__block_descriptor_tmp_14;
    handler[4] = v5;
    dispatch_source_set_cancel_handler(v5, handler);
    dispatch_resume(v5);
  }
  return v5;
}

CFDataRef NECreateDataWithEncodedCString(_BYTE *a1, int a2)
{
  int v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  UInt8 *v9;
  UInt8 *v10;
  unsigned int v11;
  CFIndex v12;
  int v13;
  unsigned __int8 *v14;
  UInt8 *v15;
  UInt8 v16;
  unsigned int v17;
  CFDataRef v19;
  char __str[3];

  LOBYTE(v2) = *a1;
  if (!*a1)
    return 0;
  v5 = 0;
  v6 = 1;
  v7 = MEMORY[0x1E0C80978];
  do
  {
    if ((v2 & 0x80) != 0)
    {
      if (!__maskrune((char)v2, 0x4000uLL))
        return 0;
    }
    else
    {
      v8 = *(_DWORD *)(v7 + 4 * (char)v2 + 60);
      if ((v8 & 0x10000) != 0)
      {
        ++v5;
      }
      else if ((v8 & 0x4000) == 0)
      {
        return 0;
      }
    }
    v2 = a1[v6++];
  }
  while (v2);
  if (!v5)
    return 0;
  if ((v5 & 1) != 0)
    return 0;
  v9 = (UInt8 *)malloc_type_malloc(v5 >> 1, 0xFF0D70EEuLL);
  if (!v9)
    return 0;
  v10 = v9;
  v11 = *a1;
  if (*a1)
  {
    v12 = 0;
    v13 = 0;
    v14 = a1 + 1;
    v15 = v9;
    do
    {
      if ((v11 & 0x80) == 0 && (*(_DWORD *)(v7 + 4 * v11 + 60) & 0x10000) != 0)
      {
        if (v13)
        {
          __str[1] = v11;
          __str[2] = 0;
          v16 = strtol(__str, 0, a2);
          v13 = 0;
          *v15++ = v16;
          ++v12;
        }
        else
        {
          __str[0] = v11;
          v13 = 1;
        }
      }
      v17 = *v14++;
      v11 = v17;
    }
    while (v17);
  }
  else
  {
    v12 = 0;
  }
  v19 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v10, v12);
  free(v10);
  return v19;
}

const char *NECertificateStatusToString(int a1)
{
  if ((a1 - 1) > 4)
    return "Unknown";
  else
    return off_1E3CC3DF8[a1 - 1];
}

uint64_t NECertificateDateIsValid(uint64_t a1)
{
  CFAbsoluteTime v1;
  CFAbsoluteTime v2;
  const __CFDate *v3;
  uint64_t v4;
  CFAbsoluteTime v5;
  CFAbsoluteTime v6;
  const __CFDate *v7;
  double Current;
  const __CFDate *v9;
  const __CFDate *v10;
  NSObject *v11;
  NSObject *v13;
  __CFCalendar *v14;
  __CFCalendar *v15;
  NSObject *v16;
  NSObject *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 4;
  SecCertificateNotValidBefore();
  v2 = v1;
  if (v1 == 0.0)
    v3 = 0;
  else
    v3 = CFDateCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v1);
  SecCertificateNotValidAfter();
  v6 = v5;
  if (v5 == 0.0)
    v7 = 0;
  else
    v7 = CFDateCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v5);
  Current = CFAbsoluteTimeGetCurrent();
  if (Current == 0.0)
  {
    v10 = 0;
    goto LABEL_19;
  }
  v9 = CFDateCreate(0, Current);
  v10 = v9;
  if (!v3 || !v9)
  {
LABEL_19:
    v4 = 1;
    if (!v3)
    {
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    }
    goto LABEL_35;
  }
  if (CFDateCompare(v9, v3, 0) == kCFCompareLessThan)
  {
    v13 = ne_log_obj();
    v4 = 2;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_19BD16000, v13, OS_LOG_TYPE_DEBUG, "Current time before valid time", buf, 2u);
    }
  }
  else
  {
    if (!v7 || CFDateCompare(v10, v7, 0) != kCFCompareGreaterThan)
    {
      v4 = 1;
      goto LABEL_35;
    }
    v11 = ne_log_obj();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_19BD16000, v11, OS_LOG_TYPE_DEBUG, "Current time after valid time", buf, 2u);
    }
    v4 = 3;
  }
  if (nelog_is_info_logging_enabled())
  {
    v19 = 0;
    v20 = 0;
    v18 = 0;
    v14 = CFCalendarCreateWithIdentifier((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFCalendarIdentifier)*MEMORY[0x1E0C9B008]);
    if (v14)
    {
      v15 = v14;
      CFCalendarDecomposeAbsoluteTime(v14, v2, "yMdHm", (char *)&v20 + 4, &v20, (char *)&v19 + 4, &v19, &v18);
      v16 = ne_log_obj();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67110144;
        v22 = HIDWORD(v20);
        v23 = 1024;
        v24 = v20;
        v25 = 1024;
        v26 = HIDWORD(v19);
        v27 = 1024;
        v28 = v19;
        v29 = 1024;
        v30 = v18;
        _os_log_impl(&dword_19BD16000, v16, OS_LOG_TYPE_INFO, "Certificate not valid before yr %d, mon %d, days %d, hours %d, min %d\n", buf, 0x20u);
      }
      CFCalendarDecomposeAbsoluteTime(v15, v6, "yMdHm", (char *)&v20 + 4, &v20, (char *)&v19 + 4, &v19, &v18);
      v17 = ne_log_obj();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67110144;
        v22 = HIDWORD(v20);
        v23 = 1024;
        v24 = v20;
        v25 = 1024;
        v26 = HIDWORD(v19);
        v27 = 1024;
        v28 = v19;
        v29 = 1024;
        v30 = v18;
        _os_log_impl(&dword_19BD16000, v17, OS_LOG_TYPE_INFO, "Certificate not valid after yr %d, mon %d, days %d, hours %d, min %d\n", buf, 0x20u);
      }
      CFRelease(v15);
    }
  }
LABEL_35:
  CFRelease(v3);
  if (v7)
LABEL_21:
    CFRelease(v7);
LABEL_22:
  if (v10)
    CFRelease(v10);
  return v4;
}

BOOL NEIsInterfaceWIFI()
{
  int v0;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  uint8_t buf[4];
  const char *v6;
  _OWORD v7[3];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v0 = socket(2, 2, 0);
  if (v0 < 0)
  {
    v2 = ne_log_obj();
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      goto LABEL_7;
    LODWORD(v7[0]) = 136315138;
    *(_QWORD *)((char *)v7 + 4) = "NEIsInterfaceWIFI";
    v3 = "%s: Failed to open socket";
    v4 = (uint8_t *)v7;
LABEL_10:
    _os_log_error_impl(&dword_19BD16000, v2, OS_LOG_TYPE_ERROR, v3, v4, 0xCu);
    goto LABEL_7;
  }
  memset(v7, 0, 44);
  __strlcpy_chk();
  if (ioctl(v0, 0xC02C6938uLL, v7) != -1)
  {
    close(v0);
    return (v7[1] & 0xE0) == 128;
  }
  v2 = ne_log_obj();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    v6 = "NEIsInterfaceWIFI";
    v3 = "%s: Failed to get media";
    v4 = buf;
    goto LABEL_10;
  }
LABEL_7:
  close(v0);
  return 0;
}

ifaddrs *NEGetInterfaceType(const char *a1, _BYTE *a2, BOOL *a3)
{
  ifaddrs *v6;
  ifaddrs *v7;
  const char *ifa_name;
  ifaddrs *v10;

  v10 = 0;
  *a2 = 0;
  *a3 = 0;
  v6 = 0;
  if (!getifaddrs(&v10))
  {
    v7 = v10;
    if (v10)
    {
      v6 = v10;
      while (1)
      {
        ifa_name = v6->ifa_name;
        if (ifa_name)
        {
          if (!strcmp(ifa_name, a1))
            break;
        }
        v6 = v6->ifa_next;
        if (!v6)
          goto LABEL_13;
      }
      v6 = (ifaddrs *)v6->ifa_addr->sa_data[2];
      if ((_DWORD)v6 == 255)
      {
        *a2 = 0;
      }
      else if ((_DWORD)v6 == 6)
      {
        *a2 = 1;
        *a3 = NEIsInterfaceWIFI();
        v7 = v10;
      }
    }
    else
    {
      v6 = 0;
    }
LABEL_13:
    MEMORY[0x1A1ACE8A4](v7);
  }
  return v6;
}

BOOL NEIsInterfaceCellular(const char *a1)
{
  BOOL v2;
  char v3;

  return NEGetInterfaceType(a1, &v3, &v2) == 255;
}

_QWORD *NECopyInterfaceAddress(const char *a1, int a2)
{
  _QWORD *p_ifa_next;
  const char *v5;
  unsigned __int8 *v6;
  const __CFString *v8;
  unint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  ifaddrs *v13;

  v13 = 0;
  p_ifa_next = 0;
  if (!getifaddrs(&v13))
  {
    p_ifa_next = &v13->ifa_next;
    if (v13)
    {
      while (1)
      {
        v5 = (const char *)p_ifa_next[1];
        if (v5)
        {
          if (!strcmp(v5, a1))
          {
            v6 = (unsigned __int8 *)p_ifa_next[3];
            if (v6[1] == a2)
            {
              if (a2 == 30)
              {
                v10 = *v6;
                v8 = (const __CFString *)(v6 + 8);
                v9 = v10;
                v11 = 30;
                goto LABEL_13;
              }
              if (a2 == 2)
                break;
            }
          }
        }
        p_ifa_next = (_QWORD *)*p_ifa_next;
        if (!p_ifa_next)
          goto LABEL_9;
      }
      v12 = *v6;
      v8 = (const __CFString *)(v6 + 4);
      v9 = v12;
      v11 = 2;
LABEL_13:
      p_ifa_next = NECreateAddressStringFromBuffer(v8, v9, v11);
    }
LABEL_9:
    MEMORY[0x1A1ACE8A4](v13);
  }
  return p_ifa_next;
}

uint64_t NEGetInterfaceForAddress(unsigned __int8 *a1)
{
  int v2;
  ifaddrs *v3;
  int v4;
  sockaddr *ifa_addr;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  NSObject *v10;
  int v11;
  NSObject *v12;
  int v14;
  NSObject *v15;
  char *ifa_name;
  ifaddrs *v17;
  uint8_t v18[4];
  _BYTE v19[14];
  __int16 v20;
  uint8_t *v21;
  uint8_t buf[136];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = a1[1];
  if (v2 == 30)
  {
    if (*a1 > 0x1Bu)
      goto LABEL_4;
LABEL_21:
    v10 = ne_log_obj();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_19BD16000, v10, OS_LOG_TYPE_ERROR, "Address passed to NEGetInterfaceForAddress is too short", buf, 2u);
    }
    return 0;
  }
  if (v2 == 2 && *a1 < 0x10u)
    goto LABEL_21;
LABEL_4:
  v17 = 0;
  if (getifaddrs(&v17) < 0)
  {
    v11 = *__error();
    if (strerror_r(v11, (char *)buf, 0x80uLL))
      buf[0] = 0;
    v12 = ne_log_obj();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v18 = 67109378;
      *(_DWORD *)v19 = v11;
      *(_WORD *)&v19[4] = 2080;
      *(_QWORD *)&v19[6] = buf;
      _os_log_fault_impl(&dword_19BD16000, v12, OS_LOG_TYPE_FAULT, "getifaddrs failed: [%d] %s", v18, 0x12u);
    }
    return 0;
  }
  v3 = v17;
  if (!v17)
    return 0;
  v4 = a1[1];
  while (1)
  {
    ifa_addr = v3->ifa_addr;
    if (v4 != ifa_addr->sa_family)
      goto LABEL_16;
    if (v4 == 30)
      break;
    if (v4 == 2 && *((_DWORD *)a1 + 1) == *(_DWORD *)&ifa_addr->sa_data[2])
      goto LABEL_29;
LABEL_16:
    v3 = v3->ifa_next;
    if (!v3)
      goto LABEL_17;
  }
  v7 = *(_QWORD *)&ifa_addr->sa_data[6];
  v6 = *(_QWORD *)&ifa_addr[1].sa_len;
  if (*((_QWORD *)a1 + 1) != v7 || *((_QWORD *)a1 + 2) != v6)
    goto LABEL_16;
LABEL_29:
  v9 = if_nametoindex(v3->ifa_name);
  if (!(_DWORD)v9)
  {
    v14 = *__error();
    if (strerror_r(v14, (char *)buf, 0x80uLL))
      buf[0] = 0;
    v15 = ne_log_obj();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
    {
      ifa_name = v3->ifa_name;
      *(_DWORD *)v18 = 136315650;
      *(_QWORD *)v19 = ifa_name;
      *(_WORD *)&v19[8] = 1024;
      *(_DWORD *)&v19[10] = v14;
      v20 = 2080;
      v21 = buf;
      _os_log_fault_impl(&dword_19BD16000, v15, OS_LOG_TYPE_FAULT, "Failed to get an interface index for interface %s: [%d] %s", v18, 0x1Cu);
    }
LABEL_17:
    v9 = 0;
  }
  if (v17)
    MEMORY[0x1A1ACE8A4]();
  return v9;
}

uint64_t NEIsValidInterface(const char *a1)
{
  uint64_t v2;
  ifaddrs *v3;
  ifaddrs *v4;
  const char *ifa_name;
  ifaddrs *v7;

  v7 = 0;
  if (getifaddrs(&v7))
    return 0;
  v3 = v7;
  if (v7)
  {
    v4 = v7;
    while (1)
    {
      ifa_name = v4->ifa_name;
      if (ifa_name)
      {
        if (!strcmp(ifa_name, a1))
          break;
      }
      v4 = v4->ifa_next;
      if (!v4)
        goto LABEL_8;
    }
    v2 = 1;
  }
  else
  {
LABEL_8:
    v2 = 0;
  }
  MEMORY[0x1A1ACE8A4](v3);
  return v2;
}

BOOL NEIsWildcardAddress(unsigned __int8 *a1)
{
  int v1;
  _DWORD *v2;

  v1 = a1[1];
  if (v1 == 30)
  {
    if (*a1 >= 0x1Cu && !*((_DWORD *)a1 + 2) && !*((_DWORD *)a1 + 3) && !*((_DWORD *)a1 + 4))
    {
      v2 = a1 + 20;
      return *v2 == 0;
    }
  }
  else if (v1 == 2 && *a1 >= 0x10u)
  {
    v2 = a1 + 4;
    return *v2 == 0;
  }
  return 0;
}

BOOL NEIsLoopbackAddress(unsigned __int8 *a1)
{
  int v1;
  _DWORD *v2;
  int v3;

  v1 = a1[1];
  if (v1 == 30)
  {
    if (*a1 >= 0x1Cu && !*((_DWORD *)a1 + 2) && !*((_DWORD *)a1 + 3) && !*((_DWORD *)a1 + 4))
    {
      v2 = a1 + 20;
      v3 = 0x1000000;
      return *v2 == v3;
    }
  }
  else if (v1 == 2 && *a1 >= 0x10u)
  {
    v2 = a1 + 4;
    v3 = 16777343;
    return *v2 == v3;
  }
  return 0;
}

uint64_t NEGetEntitlement(void *a1)
{
  uint64_t v2;
  size_t count;
  size_t v5;
  size_t v6;
  const char *string;
  const char *v8;
  size_t v9;

  if (a1)
  {
    if (MEMORY[0x1A1ACFDA4]() == MEMORY[0x1E0C812C8])
    {
      count = xpc_array_get_count(a1);
      if (count)
      {
        v5 = count;
        v6 = 0;
        v2 = 0;
        while (1)
        {
          string = xpc_array_get_string(a1, v6);
          if (string)
          {
            v8 = string;
            v9 = strlen(string);
            if (strncmp(v8, "packet-tunnel-provider", v9))
            {
              if (!strncmp(v8, "app-proxy-provider", v9))
                goto LABEL_22;
              if (!strncmp(v8, "content-filter-provider", v9))
                goto LABEL_23;
              if (!strncmp(v8, "dns-proxy", v9))
                goto LABEL_24;
              if (!strncmp(v8, "dns-settings", v9))
              {
                v2 = v2 | 0x40;
                goto LABEL_27;
              }
              if (!strncmp(v8, "relay", v9))
              {
                v2 = v2 | 0x80;
                goto LABEL_27;
              }
              if (strncmp(v8, "packet-tunnel-provider-systemextension", v9))
              {
                if (strncmp(v8, "app-proxy-provider-systemextension", v9))
                {
                  if (strncmp(v8, "content-filter-provider-systemextension", v9))
                  {
                    if (strncmp(v8, "dns-proxy-systemextension", v9))
                    {
                      if (!strncmp(v8, "app-push-provider", v9))
                        v2 = v2 | 0x20;
                      else
                        v2 = v2;
                      goto LABEL_27;
                    }
LABEL_24:
                    v2 = v2 | 0x10;
                    goto LABEL_27;
                  }
LABEL_23:
                  v2 = v2 | 4;
                  goto LABEL_27;
                }
LABEL_22:
                v2 = v2 | 2;
                goto LABEL_27;
              }
            }
            v2 = v2 | 1;
          }
LABEL_27:
          if (v5 == ++v6)
            return v2;
        }
      }
    }
  }
  return 0;
}

CFStringRef NECopySynthesizedIPv6Address(const __CFString *a1, int a2)
{
  CFStringRef v4;
  int v5;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  __CFString v11;
  int v12;
  void *v13;

  v13 = 0;
  v4 = 0;
  if (NEGetAddressFamilyFromString(a1) != 30)
  {
    v12 = a2;
    v5 = nw_nat64_copy_prefixes();
    if (v5 < 1)
    {
      v4 = 0;
      v7 = 0;
    }
    else
    {
      v6 = v5;
      v7 = NECreateAddressStructFromString(a1, 0, 0);
      if (v7)
      {
        v8 = 0;
        v9 = 16 * v6;
        while (1)
        {
          *(_OWORD *)&v11.isa = xmmword_19BED7298;
          *(_OWORD *)((char *)&v11.info + 4) = *(__int128 *)((char *)&xmmword_19BED7298 + 12);
          if (nw_nat64_synthesize_v6())
            break;
          v8 += 16;
          if (v9 == v8)
            goto LABEL_7;
        }
        v4 = NECreateAddressString(&v11);
      }
      else
      {
LABEL_7:
        v4 = 0;
      }
    }
    if (v13)
    {
      free(v13);
      v13 = 0;
    }
    if (v7)
      free(v7);
  }
  return v4;
}

const char *inputNotification2String(int a1)
{
  if ((a1 - 1) > 5)
    return "network changed";
  else
    return off_1E3CC3E20[a1 - 1];
}

uint64_t isa_nsset(void *a1)
{
  id v1;
  char isKindOfClass;

  v1 = a1;
  objc_opt_class();
  if (v1)
    isKindOfClass = objc_opt_isKindOfClass();
  else
    isKindOfClass = 0;

  return isKindOfClass & 1;
}

uint64_t isa_nsdictionary(void *a1)
{
  id v1;
  char isKindOfClass;

  v1 = a1;
  objc_opt_class();
  if (v1)
    isKindOfClass = objc_opt_isKindOfClass();
  else
    isKindOfClass = 0;

  return isKindOfClass & 1;
}

uint64_t isa_nsdata(void *a1)
{
  id v1;
  char isKindOfClass;

  v1 = a1;
  objc_opt_class();
  if (v1)
    isKindOfClass = objc_opt_isKindOfClass();
  else
    isKindOfClass = 0;

  return isKindOfClass & 1;
}

uint64_t isa_nsnumber(void *a1)
{
  id v1;
  char isKindOfClass;

  v1 = a1;
  objc_opt_class();
  if (v1)
    isKindOfClass = objc_opt_isKindOfClass();
  else
    isKindOfClass = 0;

  return isKindOfClass & 1;
}

uint64_t isa_nsnull(void *a1)
{
  id v1;
  char isKindOfClass;

  v1 = a1;
  objc_opt_class();
  if (v1)
    isKindOfClass = objc_opt_isKindOfClass();
  else
    isKindOfClass = 0;

  return isKindOfClass & 1;
}

uint64_t isa_nsurl(void *a1)
{
  id v1;
  char isKindOfClass;

  v1 = a1;
  objc_opt_class();
  if (v1)
    isKindOfClass = objc_opt_isKindOfClass();
  else
    isKindOfClass = 0;

  return isKindOfClass & 1;
}

uint64_t isa_neclass()
{
  objc_class *v0;
  void *v1;
  uint64_t v2;

  v0 = (objc_class *)objc_opt_class();
  NSStringFromClass(v0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "hasPrefix:", CFSTR("NE"));

  return v2;
}

id NECopyUserUUIDFromEUID()
{
  uid_t v0;

  v0 = geteuid();
  return NECopyUserUUIDSimple(v0);
}

id NECopyUserUUIDSimple(uid_t a1)
{
  uuid_t uu;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  memset(uu, 0, sizeof(uu));
  mbr_uid_to_uuid(a1, uu);
  return (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDBytes:", uu);
}

id NECopyUserUUIDFromXPCEUID(_xpc_connection_s *a1)
{
  uid_t euid;

  euid = xpc_connection_get_euid(a1);
  return NECopyUserUUIDSimple(euid);
}

uint64_t NEGetConsoleUserUID()
{
  passwd *v0;

  v0 = getpwnam("mobile");
  if (v0)
    return v0->pw_uid;
  else
    return 501;
}

id NECopyConsoleUserUUID()
{
  passwd *v0;

  v0 = getpwnam("mobile");
  if (v0)
    return NECopyUserUUIDSimple(v0->pw_uid);
  else
    return NECopyUserUUIDSimple(0x1F5u);
}

BOOL NEUserUUIDIsSynthesized(void *a1)
{
  void *v1;
  _BOOL8 v2;

  if (!a1)
    return 0;
  objc_msgSend(a1, "UUIDString");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "compare:options:range:", CFSTR("FFFFEEEE-DDDD-CCCC-BBBB-AAAA"), 1, 0, objc_msgSend(CFSTR("FFFFEEEE-DDDD-CCCC-BBBB-AAAA"), "length")) == 0;

  return v2;
}

uint64_t NECheckConfigurationUserUUID(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unsigned __int8 uu[8];
  uint64_t v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  NECopyConsoleUserUUID();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  NEGetRootUUID();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v1)
  {
    v4 = 0;
    if (objc_msgSend(v1, "count") && v2 && v3)
    {
      v14 = 0u;
      v15 = 0u;
      v12 = 0u;
      v13 = 0u;
      v5 = v1;
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v18, 16);
      if (v6)
      {
        v7 = v6;
        v8 = *(_QWORD *)v13;
        while (2)
        {
          for (i = 0; i != v7; ++i)
          {
            if (*(_QWORD *)v13 != v8)
              objc_enumerationMutation(v5);
            v10 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
            if ((objc_msgSend(v10, "isEqual:", v2, (_QWORD)v12) & 1) == 0
              && (objc_msgSend(v10, "isEqual:", v3) & 1) == 0)
            {
              *(_QWORD *)uu = 0;
              v17 = 0;
              objc_msgSend(v10, "getUUIDBytes:", uu);
              if (!uuid_is_null(uu))
                continue;
            }
            v4 = 1;
            goto LABEL_19;
          }
          v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v18, 16);
          v4 = 0;
          if (v7)
            continue;
          break;
        }
      }
      else
      {
        v4 = 0;
      }
LABEL_19:

    }
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

id NEGetRootUUID()
{
  if (NEGetRootUUID_onceToken != -1)
    dispatch_once(&NEGetRootUUID_onceToken, &__block_literal_global_13_22409);
  return (id)NEGetRootUUID_rootUUID;
}

id NEGetNullUUID()
{
  if (NEGetNullUUID_onceToken != -1)
    dispatch_once(&NEGetNullUUID_onceToken, &__block_literal_global_22412);
  return (id)NEGetNullUUID_nullUUID;
}

id NEGetBundleIdentifierFromAppID(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if ((unint64_t)objc_msgSend(v1, "length") < 0xC)
  {
    v2 = 0;
  }
  else
  {
    objc_msgSend(v1, "substringWithRange:", 11, objc_msgSend(v1, "length") - 11);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v2;
}

uint64_t NEGetSystemWakeTime()
{
  IOPMGetLastWakeTime();
  return objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", 0.0, 0);
}

void neZeroOutNSData(void *a1)
{
  id v1;
  rsize_t v2;
  id v3;

  v1 = a1;
  if (v1)
  {
    v3 = v1;
    v2 = objc_msgSend(v1, "length");
    v1 = v3;
    if (v2)
    {
      memset_s((void *)objc_msgSend(v3, "bytes"), v2, 0, v2);
      v1 = v3;
    }
  }

}

id trimURL(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  __CFString *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  __CFString *v15;
  void *v16;

  v1 = a1;
  if (v1)
  {
    v2 = v1;
    objc_msgSend(v1, "port");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    if (v3)
    {
      v4 = (void *)MEMORY[0x1E0CB3940];
      objc_msgSend(v2, "port");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "stringWithFormat:", CFSTR(":%@"), v5);
      v6 = (__CFString *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v6 = &stru_1E3CC53C8;
    }
    objc_msgSend(v2, "host");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CCEC80], "endpointWithHostname:port:", v8, CFSTR("0"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend(v9, "addressFamily") == 30)
    {
      v10 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("[%@]"), v8);

      v8 = (void *)v10;
    }
    v11 = (void *)MEMORY[0x1E0C99E98];
    v12 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(v2, "scheme");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "path");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (v14)
    {
      objc_msgSend(v2, "path");
      v15 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v15 = &stru_1E3CC53C8;
    }
    objc_msgSend(v12, "stringWithFormat:", CFSTR("%@://%@%@%@"), v13, v8, v6, v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "URLWithString:", v16);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (v14)
  }
  else
  {
    v7 = 0;
  }
  return v7;
}

id createEthernetAddressFromString(void *a1)
{
  id v1;
  void *v2;
  NSObject *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  const char *v13;
  char *__endptr;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint8_t v20[128];
  uint8_t buf[4];
  id v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(v1, "componentsSeparatedByString:", CFSTR(":"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "count") == 6)
  {
    v3 = objc_alloc_init(MEMORY[0x1E0C99DF0]);
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v4 = v2;
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v17;
      while (2)
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v17 != v7)
            objc_enumerationMutation(v4);
          v9 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * i);
          if (!objc_msgSend(v9, "length"))
          {
            ne_log_obj();
            v12 = objc_claimAutoreleasedReturnValue();
            if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
            {
LABEL_19:

              goto LABEL_20;
            }
            *(_DWORD *)buf = 138412290;
            v22 = v1;
            v13 = "Ethernet address string %@ is missing a byte";
LABEL_23:
            _os_log_error_impl(&dword_19BD16000, v12, OS_LOG_TYPE_ERROR, v13, buf, 0xCu);
            goto LABEL_19;
          }
          __endptr = 0;
          v10 = strtol((const char *)objc_msgSend(objc_retainAutorelease(v9), "UTF8String"), &__endptr, 16);
          if (*__endptr || v10 > 255 || v10 < 0)
          {
            ne_log_obj();
            v12 = objc_claimAutoreleasedReturnValue();
            if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
              goto LABEL_19;
            *(_DWORD *)buf = 138412290;
            v22 = v1;
            v13 = "Ethernet address string %@ has an invalid byte";
            goto LABEL_23;
          }
          buf[0] = v10;
          -[NSObject appendBytes:length:](v3, "appendBytes:length:", buf, 1);
        }
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
        if (v6)
          continue;
        break;
      }
    }

    v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithData:", v3);
  }
  else
  {
    ne_log_obj();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      v22 = v1;
      v23 = 1024;
      v24 = 6;
      _os_log_error_impl(&dword_19BD16000, v3, OS_LOG_TYPE_ERROR, "Ethernet address string %@ does not have %d bytes", buf, 0x12u);
    }
LABEL_20:
    v11 = 0;
  }

  return v11;
}

id NECopyETLDPlusOne(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v1 = (void *)MEMORY[0x1E0CB3500];
  v2 = a1;
  objc_msgSend(v1, "characterSetWithCharactersInString:", CFSTR("."));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringByTrimmingCharactersInSet:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "componentsSeparatedByString:", CFSTR("."));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if ((unint64_t)objc_msgSend(v5, "count") >= 2)
  {
    objc_msgSend(v5, "subarrayWithRange:", objc_msgSend(v5, "count") - 2, 2);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "componentsJoinedByString:", CFSTR("."));
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

uint64_t NEPIDByName(const char *a1)
{
  int v2;
  _DWORD *v3;
  _DWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  int *v11;
  char *v12;
  size_t v13;
  int v14;
  int buffer;
  const char *v16;
  __int16 v17;
  char *v18;
  int v19[2];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v19 = 0x600000001;
  v14 = 0;
  v13 = 4;
  if (sysctl(v19, 2u, &v14, &v13, 0, 0) < 0)
  {
    v9 = ne_log_obj();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v11 = __error();
      v12 = strerror(*v11);
      buffer = 136315394;
      v16 = "NEKernMaxProc";
      v17 = 2080;
      v18 = v12;
      _os_log_error_impl(&dword_19BD16000, v9, OS_LOG_TYPE_ERROR, "%s: Failed to get max proc count (%s)", (uint8_t *)&buffer, 0x16u);
    }
    return 0;
  }
  if (!v14)
    return 0;
  v2 = 4 * v14;
  v3 = malloc_type_malloc(4 * v14, 0xF88153BEuLL);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = proc_listallpids(v3, v2);
  if (v5 < 1)
  {
LABEL_9:
    v8 = 0;
  }
  else
  {
    v6 = 0;
    v7 = v5;
    while (!proc_name(v4[v6], &buffer, 0x64u) || strcmp((const char *)&buffer, a1))
    {
      if (v7 == ++v6)
        goto LABEL_9;
    }
    v8 = v4[v6];
  }
  free(v4);
  return v8;
}

uint64_t NECopySigningIdentifierForPIDwithAuditToken()
{
  uint64_t result;
  void *v1;
  uint64_t v2;

  result = ne_copy_signing_identifier_for_pid_with_audit_token();
  if (result)
  {
    v1 = (void *)result;
    v2 = _CFXPCCreateCFObjectFromXPCObject();
    xpc_release(v1);
    return v2;
  }
  return result;
}

uint64_t NECopySigningIdentifierForPID()
{
  return NECopySigningIdentifierForPIDwithAuditToken();
}

CFStringRef NECopySigningIdentifierForXPCMessage(void *a1)
{
  NSObject *v2;
  CFStringRef v3;
  const __CFAllocator *v5;
  __SecTask *v6;
  __SecTask *v7;
  NSObject *v8;
  NSObject *v9;
  const char *v10;
  uint8_t *p_cf;
  NSObject *v12;
  uint32_t v13;
  _xpc_connection_s *remote_connection;
  pid_t pid;
  audit_token_t cf;
  uint8_t v17[4];
  pid_t v18;
  uint8_t buf[16];
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!a1 || MEMORY[0x1A1ACFDA4]() != MEMORY[0x1E0C812F8])
  {
    v2 = ne_log_obj();
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "NECopySigningIdentifierForXPCMessage";
    v10 = "XPC object passed to %s is NULL or is not a dictionary";
    p_cf = buf;
    v12 = v2;
    v13 = 12;
LABEL_15:
    _os_log_error_impl(&dword_19BD16000, v12, OS_LOG_TYPE_ERROR, v10, p_cf, v13);
    return 0;
  }
  *(_OWORD *)buf = 0u;
  v20 = 0u;
  xpc_dictionary_get_audit_token();
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  memset(&cf, 0, sizeof(cf));
  v6 = SecTaskCreateWithAuditToken(v5, &cf);
  if (!v6)
  {
    v9 = ne_log_obj();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      return 0;
    LOWORD(cf.val[0]) = 0;
    v10 = "Failed to create a task from audit token";
    p_cf = (uint8_t *)&cf;
    v12 = v9;
    v13 = 2;
    goto LABEL_15;
  }
  v7 = v6;
  *(_QWORD *)cf.val = 0;
  v3 = SecTaskCopySigningIdentifier(v6, (CFErrorRef *)&cf);
  if (*(_QWORD *)cf.val)
  {
    v8 = ne_log_obj();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      remote_connection = xpc_dictionary_get_remote_connection(a1);
      pid = xpc_connection_get_pid(remote_connection);
      *(_DWORD *)v17 = 67109120;
      v18 = pid;
      _os_log_error_impl(&dword_19BD16000, v8, OS_LOG_TYPE_ERROR, "Failed to get the signing identifier of process %d", v17, 8u);
    }
    CFRelease(*(CFTypeRef *)cf.val);
  }
  CFRelease(v7);
  return v3;
}

BOOL NEAuditTokenForPID(int pid, integer_t *a2)
{
  kern_return_t v4;
  mach_error_t v5;
  NSObject *v6;
  _BOOL8 result;
  char *v8;
  const char *v9;
  kern_return_t v10;
  mach_error_t v11;
  char *v12;
  mach_msg_type_number_t task_info_outCnt;
  mach_port_name_t target_task;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  mach_error_t v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  task_info_outCnt = 8;
  target_task = 0;
  v4 = task_for_pid(*MEMORY[0x1E0C83DA0], pid, &target_task);
  if (v4)
  {
    v5 = v4;
    v6 = ne_log_obj();
    result = os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG);
    if (!result)
      return result;
    v8 = mach_error_string(v5);
    *(_DWORD *)buf = 67109634;
    v16 = pid;
    v17 = 1024;
    v18 = v5;
    v19 = 2080;
    v20 = v8;
    v9 = "task_for_pid(mach_task_self(), %d, &task) => %d (%s)\n";
LABEL_7:
    _os_log_debug_impl(&dword_19BD16000, v6, OS_LOG_TYPE_DEBUG, v9, buf, 0x18u);
    return 0;
  }
  v10 = task_info(target_task, 0xFu, a2, &task_info_outCnt);
  if (v10)
  {
    v11 = v10;
    v6 = ne_log_obj();
    result = os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG);
    if (!result)
      return result;
    v12 = mach_error_string(v11);
    *(_DWORD *)buf = 67109634;
    v16 = pid;
    v17 = 1024;
    v18 = v11;
    v19 = 2080;
    v20 = v12;
    v9 = "task_info(mach_task_self(), %d, TASK_AUDIT_TOKEN) => %d (%s)\n";
    goto LABEL_7;
  }
  return 1;
}

uint64_t NEGIDForAuditToken()
{
  return 0;
}

uint64_t NECopyBootstrapPortForPID()
{
  return 0;
}

uint64_t NECopyAuditPortForAuditToken()
{
  return 0;
}

__CFDictionary *NEVirtualInterfaceCopyIPStateDictionary(uint64_t a1, int a2, int a3)
{
  const __CFAllocator *v6;
  CFStringRef v7;
  __CFDictionary *v8;
  CFTypeID TypeID;
  __CFDictionary *Mutable;
  const void *v11;
  CFTypeID v12;
  const void **v13;
  const void *v14;
  const __CFString *v15;
  CFTypeID v16;
  __CFDictionary *v17;
  const void *v18;
  CFTypeID v19;
  const void **v20;
  CFStringRef v21;
  CFTypeID v22;
  const __CFNumber *v23;
  const __CFString *v24;
  __CFArray *v26;
  __CFArray *v27;
  const void *v28;
  CFTypeID v29;
  const __CFString *v30;
  const void *v31;
  CFTypeID v32;
  const void *v33;
  CFTypeID v34;
  const void *v35;
  const void *ValueAtIndex;
  __CFDictionary *v37;
  __CFArray *v38;
  __CFArray *v39;
  const void *v40;
  CFTypeID v41;
  CFNumberRef v42;
  const void *v43;
  CFTypeID v44;
  const void *v45;
  CFTypeID v46;
  const void *v47;
  CFStringRef v48;
  __CFDictionary *v49;
  const void *v50;
  CFTypeID v51;
  const void *v52;
  const void *v53;
  CFTypeID v54;
  CFTypeID v55;
  const void *v56;
  CFTypeID v57;
  NSObject *v58;
  int valuePtr;
  uint8_t buf[4];
  const char *v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v7 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)(a1 + 265), 0x600u);
    if (a2 != 30)
    {
      if (a2 == 2)
      {
        if ((*(_BYTE *)(a1 + 312) & 1) != 0)
          goto LABEL_8;
        v8 = *(__CFDictionary **)(a1 + 320);
        TypeID = CFArrayGetTypeID();
        if (!v8)
          goto LABEL_26;
        if (CFGetTypeID(v8) == TypeID && CFArrayGetCount(*(CFArrayRef *)(a1 + 320)) >= 1)
        {
LABEL_8:
          Mutable = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          v8 = Mutable;
          if (Mutable)
          {
            CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CE8C08], v7);
            v11 = *(const void **)(a1 + 320);
            v12 = CFArrayGetTypeID();
            v13 = (const void **)MEMORY[0x1E0CE8D10];
            if (v11 && CFGetTypeID(v11) == v12 && CFArrayGetCount(*(CFArrayRef *)(a1 + 320)))
            {
              v14 = (const void *)*MEMORY[0x1E0CE8CC8];
              v15 = *(const __CFString **)(a1 + 320);
            }
            else
            {
              v26 = CFArrayCreateMutable(v6, 1, MEMORY[0x1E0C9B378]);
              if (v26)
              {
                v27 = v26;
                CFArrayAppendValue(v26, CFSTR("127.0.0.1"));
                CFDictionarySetValue(v8, (const void *)*MEMORY[0x1E0CE8CC8], v27);
                CFRelease(v27);
              }
              CFDictionarySetValue(v8, CFSTR("IsNULL"), (const void *)*MEMORY[0x1E0C9AE50]);
              v14 = *v13;
              v15 = CFSTR("127.0.0.1");
            }
            CFDictionarySetValue(v8, v14, v15);
            v28 = *(const void **)(a1 + 344);
            v29 = CFArrayGetTypeID();
            if (v28 && CFGetTypeID(v28) == v29 && CFArrayGetCount(*(CFArrayRef *)(a1 + 344)) >= 1)
              CFDictionarySetValue(v8, (const void *)*MEMORY[0x1E0CE8CC0], *(const void **)(a1 + 344));
            if (a3)
            {
              v30 = *(const __CFString **)(a1 + 472);
              if (v30)
                NEVirtualInterfaceAddIPv4Route(a1, v30, CFSTR("255.255.255.255"), 0, 1);
            }
            v31 = *(const void **)(a1 + 352);
            v32 = CFArrayGetTypeID();
            if (v31 && CFGetTypeID(v31) == v32 && CFArrayGetCount(*(CFArrayRef *)(a1 + 352)) >= 1)
              CFDictionarySetValue(v8, (const void *)*MEMORY[0x1E0CE8CE0], *(const void **)(a1 + 352));
            v33 = *(const void **)(a1 + 456);
            v34 = CFStringGetTypeID();
            if (v33 && CFGetTypeID(v33) == v34)
            {
              v35 = *v13;
              ValueAtIndex = *(const void **)(a1 + 456);
              v37 = v8;
            }
            else
            {
              v50 = *(const void **)(a1 + 320);
              v51 = CFArrayGetTypeID();
              if (!v50 || CFGetTypeID(v50) != v51 || CFArrayGetCount(*(CFArrayRef *)(a1 + 320)) < 1)
              {
LABEL_69:
                v53 = *(const void **)(a1 + 472);
                v54 = CFStringGetTypeID();
                if (v53 && CFGetTypeID(v53) == v54)
                  CFDictionarySetValue(v8, CFSTR("ServerAddress"), *(const void **)(a1 + 472));
                goto LABEL_26;
              }
              v52 = *v13;
              ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 320), 0);
              v37 = v8;
              v35 = v52;
            }
            CFDictionarySetValue(v37, v35, ValueAtIndex);
            goto LABEL_69;
          }
LABEL_26:
          if (v7)
            CFRelease(v7);
          return v8;
        }
      }
LABEL_25:
      v8 = 0;
      goto LABEL_26;
    }
    if ((*(_BYTE *)(a1 + 312) & 1) == 0)
    {
      v8 = *(__CFDictionary **)(a1 + 328);
      v16 = CFArrayGetTypeID();
      if (!v8)
        goto LABEL_26;
      if (CFGetTypeID(v8) != v16 || CFArrayGetCount(*(CFArrayRef *)(a1 + 328)) < 1)
        goto LABEL_25;
    }
    *(_DWORD *)buf = 128;
    v17 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v8 = v17;
    if (!v17)
      goto LABEL_26;
    CFDictionarySetValue(v17, (const void *)*MEMORY[0x1E0CE8C08], v7);
    v18 = *(const void **)(a1 + 328);
    v19 = CFArrayGetTypeID();
    v20 = (const void **)MEMORY[0x1E0CE8D78];
    if (v18 && CFGetTypeID(v18) == v19 && CFArrayGetCount(*(CFArrayRef *)(a1 + 328)))
    {
      CFDictionarySetValue(v8, (const void *)*MEMORY[0x1E0CE8D28], *(const void **)(a1 + 328));
      v21 = *(CFStringRef *)(a1 + 336);
      v22 = CFArrayGetTypeID();
      if (!v21)
      {
LABEL_50:
        v40 = *(const void **)(a1 + 360);
        v41 = CFArrayGetTypeID();
        if (v40 && CFGetTypeID(v40) == v41 && CFArrayGetCount(*(CFArrayRef *)(a1 + 360)) >= 1)
          CFDictionarySetValue(v8, (const void *)*MEMORY[0x1E0CE8D20], *(const void **)(a1 + 360));
        if (a3 && *(_QWORD *)(a1 + 472))
        {
          v42 = CFNumberCreate(v6, kCFNumberIntType, buf);
          NEVirtualInterfaceAddIPv6Route(a1, *(const __CFString **)(a1 + 472), v42, 0, 1);
          CFRelease(v42);
        }
        v43 = *(const void **)(a1 + 368);
        v44 = CFArrayGetTypeID();
        if (v43 && CFGetTypeID(v43) == v44 && CFArrayGetCount(*(CFArrayRef *)(a1 + 368)) >= 1)
          CFDictionarySetValue(v8, (const void *)*MEMORY[0x1E0CE8D38], *(const void **)(a1 + 368));
        v45 = *(const void **)(a1 + 464);
        v46 = CFStringGetTypeID();
        if (v45 && CFGetTypeID(v45) == v46)
        {
          v47 = *v20;
          v48 = *(CFStringRef *)(a1 + 464);
          v49 = v8;
        }
        else
        {
          v55 = CFStringGetTypeID();
          if (!v21 || CFGetTypeID(v21) != v55)
            goto LABEL_76;
          v47 = *v20;
          v49 = v8;
          v48 = v21;
        }
        CFDictionarySetValue(v49, v47, v48);
LABEL_76:
        v56 = *(const void **)(a1 + 472);
        v57 = CFStringGetTypeID();
        if (v56 && CFGetTypeID(v56) == v57)
          CFDictionarySetValue(v8, CFSTR("ServerAddress"), *(const void **)(a1 + 472));
        if (v21)
          CFRelease(v21);
        goto LABEL_26;
      }
      if (CFGetTypeID(v21) == v22 && CFArrayGetCount(*(CFArrayRef *)(a1 + 336)) >= 1)
      {
        CFDictionarySetValue(v8, (const void *)*MEMORY[0x1E0CE8D50], *(const void **)(a1 + 336));
        valuePtr = 0;
        v23 = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 336), 0);
        CFNumberGetValue(v23, kCFNumberIntType, &valuePtr);
        v24 = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 328), 0);
        v21 = NECreateIPv6SubnetAddressWithPrefix(v24, valuePtr);
        goto LABEL_50;
      }
    }
    else
    {
      v38 = CFArrayCreateMutable(v6, 1, MEMORY[0x1E0C9B378]);
      if (v38)
      {
        v39 = v38;
        CFArrayAppendValue(v38, CFSTR("::1"));
        CFDictionarySetValue(v8, (const void *)*MEMORY[0x1E0CE8D28], v39);
        CFRelease(v39);
      }
      CFDictionarySetValue(v8, CFSTR("IsNULL"), (const void *)*MEMORY[0x1E0C9AE50]);
      CFDictionarySetValue(v8, *v20, CFSTR("::1"));
    }
    v21 = 0;
    goto LABEL_50;
  }
  v58 = ne_log_obj();
  if (os_log_type_enabled(v58, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 136315138;
    v61 = "NEVirtualInterfaceCopyIPStateDictionary";
    _os_log_fault_impl(&dword_19BD16000, v58, OS_LOG_TYPE_FAULT, "%s called with null interface", buf, 0xCu);
  }
  return 0;
}

uint64_t NEVirtualInterfaceAddIPv4Route(uint64_t a1, const __CFString *a2, const __CFString *a3, const __CFString *a4, int a5)
{
  NSObject *v6;
  uint64_t result;
  const char *v8;
  CFTypeID TypeID;
  CFDataRef v14;
  CFDataRef v15;
  int v16;
  uint64_t v17;
  void *v18;
  CFTypeID v19;
  int v20;
  int v21;
  CFMutableDictionaryRef Mutable;
  NSObject *v23;
  const char *v24;
  int v25;
  uint8_t buf[4];
  uint64_t v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  const __CFString *v31;
  __int16 v32;
  const __CFString *v33;
  __int16 v34;
  const __CFString *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v25 = 0;
  if (!a1)
  {
    v6 = ne_log_obj();
    result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result)
      return result;
    *(_WORD *)buf = 0;
    v8 = "interface is NULL";
    goto LABEL_16;
  }
  if (*(_BYTE *)(a1 + 264))
  {
    v6 = ne_log_obj();
    result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result)
      return result;
    *(_WORD *)buf = 0;
    v8 = "interface created from socket";
LABEL_16:
    _os_log_error_impl(&dword_19BD16000, v6, OS_LOG_TYPE_ERROR, v8, buf, 2u);
    return 0;
  }
  TypeID = CFStringGetTypeID();
  if (!a2 || CFGetTypeID(a2) != TypeID)
  {
    v6 = ne_log_obj();
    result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result)
      return result;
    *(_WORD *)buf = 0;
    v8 = "address is not a CFString";
    goto LABEL_16;
  }
  v14 = NECreateAddressDataFromString(a2, 0, &v25);
  if (!v14)
  {
    v6 = ne_log_obj();
    result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result)
      return result;
    *(_WORD *)buf = 0;
    v8 = "NECreateAddressDataFromString failed";
    goto LABEL_16;
  }
  v15 = v14;
  if (v25 != 2)
  {
    CFRelease(v14);
    return 0;
  }
  v16 = *CFDataGetBytePtr(v14);
  CFRelease(v15);
  if (v16 == 127)
  {
    v6 = ne_log_obj();
    result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result)
      return result;
    *(_WORD *)buf = 0;
    v8 = "address is loopback";
    goto LABEL_16;
  }
  v17 = 352;
  if (!a5)
    v17 = 344;
  v18 = *(void **)(a1 + v17);
  v19 = CFArrayGetTypeID();
  if (!v18)
    return 0;
  if (CFGetTypeID(v18) != v19)
    return 0;
  if (isA_CFString(a3))
  {
    v20 = v25;
    if (v20 != NEGetAddressFamilyFromString(a3))
      return 0;
  }
  if (isA_CFString(a4))
  {
    v21 = v25;
    if (v21 != NEGetAddressFamilyFromString(a4))
      return 0;
  }
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  result = (uint64_t)isA_CFDictionary(Mutable);
  if (result)
  {
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CE8CF0], a2);
    if (isA_CFString(a3))
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CE8D08], a3);
    if (isA_CFString(a4))
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CE8CF8], a4);
    if (a5 && isA_CFString(*(const void **)(a1 + 480)))
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CE8D00], *(const void **)(a1 + 480));
    if (nelog_is_extra_vpn_logging_enabled())
    {
      v23 = ne_log_obj();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136316162;
        v27 = a1 + 265;
        v24 = "";
        v28 = 2080;
        if (a5)
          v24 = "excluded ";
        v29 = v24;
        v30 = 2112;
        v31 = a2;
        v32 = 2112;
        v33 = a3;
        v34 = 2112;
        v35 = a4;
        _os_log_debug_impl(&dword_19BD16000, v23, OS_LOG_TYPE_DEBUG, "%s: added %sIPv4 route to %@ netmask %@ gateway %@", buf, 0x34u);
      }
    }
    CFArrayAppendValue((CFMutableArrayRef)v18, Mutable);
    if (Mutable)
      CFRelease(Mutable);
    return 1;
  }
  return result;
}

uint64_t NEVirtualInterfaceAddIPv6Route(uint64_t a1, const __CFString *a2, const void *a3, const __CFString *a4, int a5)
{
  NSObject *v6;
  uint64_t result;
  const char *v8;
  CFTypeID TypeID;
  CFDataRef v14;
  CFDataRef v15;
  uint64_t v16;
  void *v17;
  int v18;
  CFMutableDictionaryRef Mutable;
  NSObject *v20;
  const char *v21;
  int32x4_t v22;
  int v23;
  uint8_t buf[4];
  uint64_t v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  const __CFString *v29;
  __int16 v30;
  const void *v31;
  __int16 v32;
  const __CFString *v33;
  uint64_t v34;
  CFRange v35;

  v34 = *MEMORY[0x1E0C80C00];
  v23 = 0;
  if (!a1)
  {
    v6 = ne_log_obj();
    result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result)
      return result;
    *(_WORD *)buf = 0;
    v8 = "interface is NULL";
    goto LABEL_16;
  }
  if (*(_BYTE *)(a1 + 264))
  {
    v6 = ne_log_obj();
    result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result)
      return result;
    *(_WORD *)buf = 0;
    v8 = "interface created from socket";
    goto LABEL_16;
  }
  TypeID = CFStringGetTypeID();
  if (!a2 || CFGetTypeID(a2) != TypeID)
  {
    v6 = ne_log_obj();
    result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result)
      return result;
    *(_WORD *)buf = 0;
    v8 = "address is not a CFString";
    goto LABEL_16;
  }
  v14 = NECreateAddressDataFromString(a2, 0, &v23);
  if (!v14)
  {
    v6 = ne_log_obj();
    result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result)
      return result;
    *(_WORD *)buf = 0;
    v8 = "NECreateAddressDataFromString failed";
    goto LABEL_16;
  }
  v15 = v14;
  if (v23 != 30)
  {
    CFRelease(v14);
    return 0;
  }
  v22 = 0uLL;
  if (CFDataGetLength(v14) <= 15)
  {
    CFRelease(v15);
    v6 = ne_log_obj();
    result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result)
      return result;
    *(_WORD *)buf = 0;
    v8 = "NECreateAddressDataFromString result too short";
    goto LABEL_16;
  }
  v35.location = 0;
  v35.length = 16;
  CFDataGetBytes(v15, v35, (UInt8 *)&v22);
  CFRelease(v15);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v22, (int32x4_t)xmmword_19BED74F0)))) & 1) != 0)
  {
    v16 = 368;
    if (!a5)
      v16 = 360;
    v17 = *(void **)(a1 + v16);
    result = (uint64_t)isA_CFArray(v17);
    if (result)
    {
      if (isA_CFString(a4))
      {
        v18 = v23;
        if (v18 != NEGetAddressFamilyFromString(a4))
          return 0;
      }
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      result = (uint64_t)isA_CFDictionary(Mutable);
      if (result)
      {
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CE8D58], a2);
        if (isA_CFNumber(a3))
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CE8D70], a3);
        if (isA_CFString(a4))
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CE8D60], a4);
        if (a5 && isA_CFString(*(const void **)(a1 + 480)))
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CE8D68], *(const void **)(a1 + 480));
        if (nelog_is_extra_vpn_logging_enabled())
        {
          v20 = ne_log_obj();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136316162;
            v25 = a1 + 265;
            v21 = "";
            v26 = 2080;
            if (a5)
              v21 = "excluded ";
            v27 = v21;
            v28 = 2112;
            v29 = a2;
            v30 = 2112;
            v31 = a3;
            v32 = 2112;
            v33 = a4;
            _os_log_debug_impl(&dword_19BD16000, v20, OS_LOG_TYPE_DEBUG, "%s: added %sIPv6 route to %@ plen %@ gateway %@", buf, 0x34u);
          }
        }
        CFArrayAppendValue((CFMutableArrayRef)v17, Mutable);
        if (Mutable)
          CFRelease(Mutable);
        return 1;
      }
    }
  }
  else
  {
    v6 = ne_log_obj();
    result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      *(_WORD *)buf = 0;
      v8 = "address is loopback";
LABEL_16:
      _os_log_error_impl(&dword_19BD16000, v6, OS_LOG_TYPE_ERROR, v8, buf, 2u);
      return 0;
    }
  }
  return result;
}

const void *isA_CFArray(const void *a1)
{
  CFTypeID TypeID;

  TypeID = CFArrayGetTypeID();
  if (!a1)
    return 0;
  if (CFGetTypeID(a1) == TypeID)
    return a1;
  return 0;
}

const void *isA_CFString(const void *a1)
{
  CFTypeID TypeID;

  TypeID = CFStringGetTypeID();
  if (!a1)
    return 0;
  if (CFGetTypeID(a1) == TypeID)
    return a1;
  return 0;
}

const void *isA_CFDictionary(const void *a1)
{
  CFTypeID TypeID;

  TypeID = CFDictionaryGetTypeID();
  if (!a1)
    return 0;
  if (CFGetTypeID(a1) == TypeID)
    return a1;
  return 0;
}

const void *isA_CFNumber(const void *a1)
{
  CFTypeID TypeID;

  TypeID = CFNumberGetTypeID();
  if (!a1)
    return 0;
  if (CFGetTypeID(a1) == TypeID)
    return a1;
  return 0;
}

CFStringRef NEVirtualInterfaceCopyName(CFStringRef result)
{
  if (result)
    return CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)&result[8].info + 1, 0x600u);
  return result;
}

__CFDictionary *NEVirtualInterfaceCopyRouteCacheFromRoutes(const __CFArray *a1, int a2)
{
  CFIndex Count;
  uint64_t v5;
  const __CFAllocator *v6;
  const CFArrayCallBacks *v7;
  __CFArray *Mutable;
  __CFArray *v9;
  CFIndex v10;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v12;
  const __CFString *v13;
  int v14;
  const __CFString *v15;
  CFDataRef v16;
  CFDataRef v17;
  CFDataRef v18;
  const __CFString *Value;
  const __CFString *v20;
  CFDataRef v21;
  CFDataRef v22;
  CFDataRef v23;
  const __CFString *v24;
  const __CFAllocator *v25;
  CFDataRef v26;
  CFDataRef v27;
  __CFDictionary *v28;
  __CFDictionary *theDict;
  __CFArray *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  const void *v35;
  void *key;
  UInt8 bytes[8];
  uint64_t v38;
  UInt8 v39[4];
  int v40;

  if (!a1)
    return 0;
  Count = CFArrayGetCount(a1);
  if (!Count)
    return 0;
  v5 = Count;
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  theDict = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v7 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  Mutable = CFArrayCreateMutable(v6, 0, MEMORY[0x1E0C9B378]);
  v9 = CFArrayCreateMutable(v6, 0, v7);
  if (v5 >= 1)
  {
    v10 = 0;
    v35 = (const void *)*MEMORY[0x1E0CE8D70];
    key = (void *)*MEMORY[0x1E0CE8D58];
    v33 = (void *)*MEMORY[0x1E0CE8D08];
    v34 = (void *)*MEMORY[0x1E0CE8CF0];
    v31 = Mutable;
    v32 = v5;
    while (1)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v10);
      if (!ValueAtIndex)
        goto LABEL_35;
      v12 = ValueAtIndex;
      if (a2)
        break;
      Value = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, v34);
      v20 = (const __CFString *)CFDictionaryGetValue(v12, v33);
      *(_DWORD *)bytes = 2;
      v40 = 2;
      v21 = NECreateAddressDataFromString(Value, 0, (int *)bytes);
      v22 = NECreateAddressDataFromString(v20, 0, &v40);
      v23 = v22;
      if (*(_DWORD *)bytes == 2 && v21)
      {
        CFArrayAppendValue(Mutable, v21);
        if (v40 == 2 && v23)
        {
          CFArrayAppendValue(v9, v23);
        }
        else
        {
          *(_DWORD *)v39 = -1;
          v27 = CFDataCreate(v6, v39, 4);
          CFArrayAppendValue(v9, v27);
          if (v27)
            CFRelease(v27);
        }
      }
      else if (!v21)
      {
        if (!v22)
          goto LABEL_35;
LABEL_33:
        v24 = (const __CFString *)v23;
LABEL_34:
        CFRelease(v24);
        goto LABEL_35;
      }
      CFRelease(v21);
      if (v23)
        goto LABEL_33;
LABEL_35:
      if (v5 == ++v10)
        goto LABEL_36;
    }
    v13 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, key);
    v14 = NEGetIntFromDictionary(v12, v35, 0);
    v15 = NECreateIPv6AddressMaskStringFromPrefix(v14);
    *(_DWORD *)v39 = 30;
    v40 = 30;
    v16 = NECreateAddressDataFromString(v13, 0, &v40);
    v17 = NECreateAddressDataFromString(v15, 0, (int *)v39);
    v18 = v17;
    if (v40 == 30 && v16)
    {
      CFArrayAppendValue(Mutable, v16);
      if (*(_DWORD *)v39 == 30 && v18)
      {
        CFArrayAppendValue(v9, v18);
      }
      else
      {
        *(_QWORD *)bytes = -1;
        v38 = -1;
        v25 = v6;
        v26 = CFDataCreate(v6, bytes, 16);
        CFArrayAppendValue(v9, v26);
        if (v26)
          CFRelease(v26);
        v6 = v25;
        Mutable = v31;
        v5 = v32;
      }
    }
    else if (!v16)
    {
      if (!v17)
        goto LABEL_20;
      goto LABEL_19;
    }
    CFRelease(v16);
    if (!v18)
    {
LABEL_20:
      if (v15)
      {
        v24 = v15;
        goto LABEL_34;
      }
      goto LABEL_35;
    }
LABEL_19:
    CFRelease(v18);
    goto LABEL_20;
  }
LABEL_36:
  v28 = theDict;
  CFDictionarySetValue(theDict, CFSTR("subnet-addresses"), Mutable);
  CFDictionarySetValue(theDict, CFSTR("subnet-masks"), v9);
  if (Mutable)
    CFRelease(Mutable);
  if (v9)
    CFRelease(v9);
  return v28;
}

unint64_t NEVirtualInterfaceUpdateAdHocService(uint64_t a1)
{
  return NEVirtualInterfaceUpdateAdHocServiceReturnChanges(a1, 0, 1);
}

unint64_t NEVirtualInterfaceUpdateAdHocServiceReturnChanges(uint64_t a1, uint64_t *a2, int a3)
{
  const __CFAllocator *v5;
  CFStringRef v6;
  CFMutableDictionaryRef Mutable;
  CFMutableArrayRef v8;
  const __CFString *v9;
  CFStringRef NetworkServiceEntity;
  CFStringRef v11;
  unint64_t v12;
  __CFDictionary *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  CFNumberRef v19;
  CFNumberRef v20;
  int v21;
  int v22;
  const __CFArray *v23;
  const __CFArray *v24;
  const __CFArray *v25;
  void *v26;
  uint64_t v27;
  xpc_object_t v28;
  NSObject *v29;
  int v30;
  xpc_object_t v31;
  CFIndex Count;
  CFIndex v33;
  CFIndex v34;
  const __CFString *ValueAtIndex;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  int v38;
  char v39;
  int v40;
  char v41;
  __CFDictionary *v42;
  NSObject *v43;
  __CFDictionary *v44;
  const __CFString *v45;
  NSObject *v46;
  const void *v47;
  CFTypeID TypeID;
  const void *v49;
  CFTypeID v50;
  const void *v51;
  const __CFDictionary *Copy;
  int v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  char v57;
  __CFDictionary *v58;
  __CFDictionary *v59;
  const void **v60;
  NSObject *v61;
  const void *v62;
  __CFDictionary *MutableCopy;
  const void *v64;
  const __CFString *v65;
  const __CFString *v66;
  int v67;
  CFIndex v68;
  NSObject *v69;
  _BOOL4 v70;
  __CFDictionary *v71;
  __CFDictionary *v72;
  NSObject *v73;
  NSObject *v74;
  NSObject *v76;
  const __CFString *v77;
  const __CFString *v78;
  CFTypeRef cf;
  CFTypeRef v80;
  xpc_object_t v81;
  xpc_object_t v82;
  xpc_object_t v83;
  xpc_object_t object;
  const __CFString *v85;
  const __CFString *v86;
  uint64_t v88;
  CFStringRef v89;
  CFStringRef v90;
  CFStringRef key;
  CFStringRef value;
  int valuePtr;
  _BYTE buf[12];
  __int16 v95;
  CFMutableDictionaryRef v96;
  void *values[3];

  values[1] = *(void **)MEMORY[0x1E0C80C00];
  if (a1)
  {
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v88 = a1 + 265;
    v6 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)(a1 + 265), 0x600u);
    Mutable = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v8 = CFArrayCreateMutable(v5, 0, MEMORY[0x1E0C9B378]);
    v9 = (const __CFString *)*MEMORY[0x1E0CE8B30];
    NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(v5, (CFStringRef)*MEMORY[0x1E0CE8B30], *(CFStringRef *)(a1 + 488), (CFStringRef)*MEMORY[0x1E0CE8B78]);
    v11 = SCDynamicStoreKeyCreateNetworkServiceEntity(v5, v9, *(CFStringRef *)(a1 + 488), (CFStringRef)*MEMORY[0x1E0CE8B80]);
    value = SCDynamicStoreKeyCreateNetworkServiceEntity(v5, v9, *(CFStringRef *)(a1 + 488), (CFStringRef)*MEMORY[0x1E0CE8B70]);
    key = SCDynamicStoreKeyCreateNetworkServiceEntity(v5, v9, *(CFStringRef *)(a1 + 488), (CFStringRef)*MEMORY[0x1E0CE8BA8]);
    v89 = SCDynamicStoreKeyCreateNetworkServiceEntity(v5, v9, *(CFStringRef *)(a1 + 488), (CFStringRef)*MEMORY[0x1E0CE8BB0]);
    v90 = SCDynamicStoreKeyCreateNetworkServiceEntity(v5, v9, *(CFStringRef *)(a1 + 488), 0);
    if (a2)
      *a2 = 0;
    v12 = 0;
    if (!v6 || !Mutable || !v8 || !NetworkServiceEntity || !v11)
    {
LABEL_177:
      if (!v6)
      {
LABEL_179:
        if (Mutable)
          CFRelease(Mutable);
        if (v8)
          CFRelease(v8);
        if (NetworkServiceEntity)
          CFRelease(NetworkServiceEntity);
        if (v11)
          CFRelease(v11);
        if (value)
          CFRelease(value);
        if (key)
          CFRelease(key);
        if (v90)
          CFRelease(v90);
        if (v89)
          CFRelease(v89);
        return v12;
      }
LABEL_178:
      CFRelease(v6);
      goto LABEL_179;
    }
    if (*(_QWORD *)(a1 + 416))
    {
      v13 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v12 = (unint64_t)v13;
      if (!v13)
        goto LABEL_178;
      v14 = *(const void **)(a1 + 416);
      if (v14)
        CFDictionarySetValue(v13, (const void *)*MEMORY[0x1E0CE8C28], v14);
      v15 = *(const void **)(a1 + 432);
      if (v15)
        CFDictionarySetValue((CFMutableDictionaryRef)v12, (const void *)*MEMORY[0x1E0CE8C18], v15);
      v16 = *(const void **)(a1 + 424);
      if (v16)
        CFDictionarySetValue((CFMutableDictionaryRef)v12, (const void *)*MEMORY[0x1E0CE8C20], v16);
      v17 = *(const void **)(a1 + 392);
      if (v17)
        CFDictionarySetValue((CFMutableDictionaryRef)v12, (const void *)*MEMORY[0x1E0CE8C40], v17);
      v18 = *(const void **)(a1 + 400);
      if (v18)
        CFDictionarySetValue((CFMutableDictionaryRef)v12, (const void *)*MEMORY[0x1E0CE8C50], v18);
      if (*(_DWORD *)(a1 + 408))
      {
        v19 = CFNumberCreate(v5, kCFNumberIntType, (const void *)(a1 + 408));
        if (v19)
        {
          v20 = v19;
          CFDictionarySetValue((CFMutableDictionaryRef)v12, (const void *)*MEMORY[0x1E0CE8C48], v19);
          CFRelease(v20);
        }
      }
      v21 = *(_DWORD *)(a1 + 444);
      if (v21 >= 1)
        NEAddIntToDictionary((__CFDictionary *)v12, (const void *)*MEMORY[0x1E0CE8C30], v21);
      v22 = *(_DWORD *)(a1 + 440);
      if (v22)
      {
        NEAddIntToDictionary((__CFDictionary *)v12, (const void *)*MEMORY[0x1E0CE8C38], v22);
        CFDictionarySetValue((CFMutableDictionaryRef)v12, (const void *)*MEMORY[0x1E0CE8C08], v6);
      }
      if ((*(_BYTE *)(a1 + 312) & 1) != 0)
        goto LABEL_85;
      v23 = *(const __CFArray **)(a1 + 416);
      if (v23
        && CFArrayGetCount(v23) >= 1
        && ((v24 = *(const __CFArray **)(a1 + 344)) != 0 && CFArrayGetCount(v24) > 0
         || (v25 = *(const __CFArray **)(a1 + 360)) != 0 && CFArrayGetCount(v25) >= 1))
      {
        v26 = NEVirtualInterfaceCopyRouteCacheFromRoutes(*(const __CFArray **)(a1 + 344), 0);
        v27 = (uint64_t)NEVirtualInterfaceCopyRouteCacheFromRoutes(*(const __CFArray **)(a1 + 360), 1);
        cf = v26;
        v80 = (CFTypeRef)v27;
        if (v26)
        {
          v26 = (void *)_CFXPCCreateXPCObjectFromCFObject();
          v27 = (uint64_t)v80;
        }
        if (v27)
          v27 = _CFXPCCreateXPCObjectFromCFObject();
        v83 = (xpc_object_t)v27;
        if (v26)
        {
          v28 = xpc_dictionary_create(0, 0, 0);
          if (v28)
          {
            v82 = v28;
            xpc_dictionary_set_value(v28, "ipv4-subnets", v26);
          }
          else
          {
            v82 = 0;
          }
          v27 = (uint64_t)v83;
        }
        else
        {
          v82 = 0;
        }
        v85 = NetworkServiceEntity;
        if (v27 && (v31 = xpc_dictionary_create(0, 0, 0)) != 0)
        {
          v81 = v31;
          xpc_dictionary_set_value(v31, "ipv6-subnets", v83);
        }
        else
        {
          v81 = 0;
        }
        object = v26;
        Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 416));
        if (Count < 1)
        {
          v41 = 0;
          goto LABEL_72;
        }
        v33 = Count;
        v77 = v11;
        v78 = v6;
        v34 = 0;
        while (1)
        {
          ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 416), v34);
          if (ValueAtIndex)
          {
            v36 = (unsigned __int8 *)NECreateAddressStructFromString(ValueAtIndex, 0, 0);
            if (v36)
            {
              v37 = v36;
              v38 = v36[1];
              if (object && v38 == 2)
              {
                v39 = ne_session_address_matches_subnets();
                free(v37);
                if ((v39 & 1) == 0)
                  goto LABEL_70;
              }
              else
              {
                if (!v83 || v38 != 30)
                {
                  free(v36);
LABEL_70:
                  v41 = 1;
LABEL_71:
                  v11 = v77;
                  v6 = v78;
LABEL_72:
                  NetworkServiceEntity = v85;
                  if (cf)
                    CFRelease(cf);
                  if (v80)
                    CFRelease(v80);
                  if (object)
                    xpc_release(object);
                  if (v83)
                    xpc_release(v83);
                  if (v82)
                    xpc_release(v82);
                  if (v81)
                    xpc_release(v81);
                  if ((v41 & 1) == 0)
LABEL_85:
                    CFDictionarySetValue((CFMutableDictionaryRef)v12, (const void *)*MEMORY[0x1E0CE8C10], *(const void **)(a1 + 488));
                  break;
                }
                v40 = ne_session_address_matches_subnets();
                free(v37);
                if (!v40)
                  goto LABEL_70;
              }
            }
          }
          if (v33 == ++v34)
          {
            v41 = 0;
            goto LABEL_71;
          }
        }
      }
      if (a2
        && !NEVirtualInterfaceIsStateEqualToDynamicStoreState(*(const __SCDynamicStore **)(a1 + 496), v12, value))
      {
        *a2 |= 2uLL;
      }
      NEVirtualInterfaceLogStateDictionaryKeys(a1, (uint64_t)"setting DNS to dictionary with keys", (CFDictionaryRef)v12);
      CFDictionarySetValue(Mutable, value, (const void *)v12);
      CFRelease((CFTypeRef)v12);
      v30 = a3;
    }
    else
    {
      if (a2
        && !NEVirtualInterfaceIsStateEqualToDynamicStoreState(*(const __SCDynamicStore **)(a1 + 496), 0, value))
      {
        *a2 |= 2uLL;
      }
      v29 = ne_log_obj();
      v30 = a3;
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v88;
        _os_log_impl(&dword_19BD16000, v29, OS_LOG_TYPE_DEFAULT, "%s: removing DNS", buf, 0xCu);
      }
      CFArrayAppendValue(v8, value);
    }
    v42 = NEVirtualInterfaceCopyIPStateDictionary(a1, 2, v30);
    if (a2
      && !NEVirtualInterfaceIsStateEqualToDynamicStoreState(*(const __SCDynamicStore **)(a1 + 496), (unint64_t)v42, NetworkServiceEntity))
    {
      *a2 |= 1uLL;
      if (v42)
        goto LABEL_93;
    }
    else if (v42)
    {
LABEL_93:
      NEVirtualInterfaceLogStateDictionaryKeys(a1, (uint64_t)"setting IPv4 to dictionary with keys", v42);
      CFDictionarySetValue(Mutable, NetworkServiceEntity, v42);
      CFRelease(v42);
      goto LABEL_98;
    }
    v43 = ne_log_obj();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v88;
      _os_log_impl(&dword_19BD16000, v43, OS_LOG_TYPE_DEFAULT, "%s: removing IPv4", buf, 0xCu);
    }
    CFArrayAppendValue(v8, NetworkServiceEntity);
LABEL_98:
    v44 = NEVirtualInterfaceCopyIPStateDictionary(a1, 30, v30);
    if (a2
      && !NEVirtualInterfaceIsStateEqualToDynamicStoreState(*(const __SCDynamicStore **)(a1 + 496), (unint64_t)v44, v11))
    {
      *a2 |= 1uLL;
      if (v44)
        goto LABEL_101;
    }
    else if (v44)
    {
LABEL_101:
      NEVirtualInterfaceLogStateDictionaryKeys(a1, (uint64_t)"setting IPv6 to dictionary with keys", v44);
      v45 = v11;
      CFDictionarySetValue(Mutable, v11, v44);
      CFRelease(v44);
      goto LABEL_106;
    }
    v46 = ne_log_obj();
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v88;
      _os_log_impl(&dword_19BD16000, v46, OS_LOG_TYPE_DEFAULT, "%s: removing IPv6", buf, 0xCu);
    }
    v45 = v11;
    CFArrayAppendValue(v8, v11);
LABEL_106:
    v47 = *(const void **)(a1 + 448);
    TypeID = CFDictionaryGetTypeID();
    v86 = NetworkServiceEntity;
    if ((!v47 || CFGetTypeID(v47) != TypeID) && (*(_BYTE *)(a1 + 312) & 1) == 0 && !*(_QWORD *)(a1 + 392))
    {
      if (a2
        && !NEVirtualInterfaceIsStateEqualToDynamicStoreState(*(const __SCDynamicStore **)(a1 + 496), 0, key))
      {
        *a2 |= 4uLL;
      }
      v56 = ne_log_obj();
      v11 = v45;
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v88;
        _os_log_impl(&dword_19BD16000, v56, OS_LOG_TYPE_DEFAULT, "%s: removing proxies", buf, 0xCu);
      }
      CFArrayAppendValue(v8, key);
      if (a2)
        goto LABEL_124;
      goto LABEL_134;
    }
    v49 = *(const void **)(a1 + 448);
    v50 = CFDictionaryGetTypeID();
    if (v49 && CFGetTypeID(v49) == v50)
    {
      v51 = *(const void **)(a1 + 448);
      if (v51)
        Copy = (const __CFDictionary *)CFRetain(v51);
      else
        Copy = 0;
      if (*(_QWORD *)(a1 + 392))
      {
        v62 = (const void *)*MEMORY[0x1E0CE8F50];
        if (!CFDictionaryContainsKey(Copy, (const void *)*MEMORY[0x1E0CE8F50]))
        {
          MutableCopy = CFDictionaryCreateMutableCopy(v5, 0, Copy);
          CFDictionarySetValue(MutableCopy, v62, *(const void **)(a1 + 392));
          v64 = *(const void **)(a1 + 400);
          if (v64)
            CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0CE8F58], v64);
          if (Copy)
            CFRelease(Copy);
          Copy = CFDictionaryCreateCopy(v5, MutableCopy);
          v11 = v45;
          if (MutableCopy)
            CFRelease(MutableCopy);
LABEL_116:
          if (a2)
          {
            if (!NEVirtualInterfaceIsStateEqualToDynamicStoreState(*(const __SCDynamicStore **)(a1 + 496), (unint64_t)Copy, key))
            {
              v53 = CFDictionaryContainsKey(Copy, (const void *)*MEMORY[0x1E0CE8F50]);
              v54 = *a2;
              if (v53 || (v54 & 1) != 0)
                *a2 = v54 | 4;
            }
          }
          NEVirtualInterfaceLogStateDictionaryKeys(a1, (uint64_t)"setting proxies to dictionary with keys", Copy);
          CFDictionarySetValue(Mutable, key, Copy);
          if (Copy)
            CFRelease(Copy);
          if (a2)
          {
LABEL_124:
            v55 = *a2;
            if ((*a2 & 2) != 0 && (v55 & 1) == 0 && !*(_QWORD *)(a1 + 392))
              *a2 = v55 & 0xFFFFFFFFFFFFFFFDLL;
          }
LABEL_134:
          v57 = *(_BYTE *)(a1 + 312);
          v58 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          v59 = v58;
          if ((v57 & 1) != 0)
          {
            if (v58)
            {
              CFDictionarySetValue(v58, (const void *)*MEMORY[0x1E0CE8F68], (const void *)*MEMORY[0x1E0CE9158]);
              v61 = ne_log_obj();
              if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = v88;
                v95 = 2112;
                v96 = v59;
                _os_log_impl(&dword_19BD16000, v61, OS_LOG_TYPE_DEFAULT, "%s: setting primary service dictionary to %@", buf, 0x16u);
              }
              CFDictionarySetValue(Mutable, v90, v59);
              goto LABEL_167;
            }
          }
          else if (v58)
          {
            if ((*(_BYTE *)(a1 + 312) & 8) != 0)
            {
              v60 = (const void **)MEMORY[0x1E0CE9170];
            }
            else if ((*(_BYTE *)(a1 + 312) & 4) != 0)
            {
              v60 = (const void **)MEMORY[0x1E0CE9168];
            }
            else
            {
              if ((*(_BYTE *)(a1 + 312) & 2) == 0)
              {
LABEL_157:
                v65 = v11;
                v66 = v6;
                v67 = *(_DWORD *)(a1 + 316);
                if (v67)
                  NEAddIntToDictionary(v59, (const void *)*MEMORY[0x1E0CE8F70], v67);
                v68 = CFDictionaryGetCount(v59);
                v69 = ne_log_obj();
                v70 = os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT);
                if (v68 < 1)
                {
                  v6 = v66;
                  if (v70)
                  {
                    *(_DWORD *)buf = 136315138;
                    *(_QWORD *)&buf[4] = v88;
                    _os_log_impl(&dword_19BD16000, v69, OS_LOG_TYPE_DEFAULT, "%s: removing service dictionary", buf, 0xCu);
                  }
                  CFArrayAppendValue(v8, v90);
                }
                else
                {
                  v6 = v66;
                  if (v70)
                  {
                    *(_DWORD *)buf = 136315394;
                    *(_QWORD *)&buf[4] = v88;
                    v95 = 2112;
                    v96 = v59;
                    _os_log_impl(&dword_19BD16000, v69, OS_LOG_TYPE_DEFAULT, "%s: setting non-primary service dictionary to %@", buf, 0x16u);
                  }
                  CFDictionarySetValue(Mutable, v90, v59);
                }
                v11 = v65;
LABEL_167:
                CFRelease(v59);
                if (*(_QWORD *)(a1 + 472))
                {
                  v71 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                  NetworkServiceEntity = v86;
                  if (!v71)
                  {
                    v12 = 0;
                    goto LABEL_178;
                  }
                  v72 = v71;
                  NEAddIntToDictionary(v71, (const void *)*MEMORY[0x1E0CE90A8], 7);
                  CFDictionarySetValue(Mutable, v89, v72);
                  CFRelease(v72);
                }
                else
                {
                  CFArrayAppendValue(v8, v89);
                  NetworkServiceEntity = v86;
                }
                v73 = ne_log_large_obj();
                if (os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136315394;
                  *(_QWORD *)&buf[4] = v88;
                  v95 = 2112;
                  v96 = Mutable;
                  _os_log_debug_impl(&dword_19BD16000, v73, OS_LOG_TYPE_DEBUG, "%s: Setting keys: %@", buf, 0x16u);
                }
                v74 = ne_log_large_obj();
                if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136315394;
                  *(_QWORD *)&buf[4] = v88;
                  v95 = 2112;
                  v96 = v8;
                  _os_log_debug_impl(&dword_19BD16000, v74, OS_LOG_TYPE_DEBUG, "%s: Removing keys: %@", buf, 0x16u);
                }
                v12 = SCDynamicStoreSetMultiple(*(SCDynamicStoreRef *)(a1 + 496), Mutable, v8, 0);
                if ((_DWORD)v12)
                  *(_BYTE *)(a1 + 312) |= 0x40u;
                goto LABEL_177;
              }
              v60 = (const void **)MEMORY[0x1E0CE9160];
            }
            CFDictionarySetValue(v58, (const void *)*MEMORY[0x1E0CE8F68], *v60);
            goto LABEL_157;
          }
          v12 = 0;
          NetworkServiceEntity = v86;
          goto LABEL_178;
        }
      }
    }
    else
    {
      *(_QWORD *)buf = *MEMORY[0x1E0CE8E68];
      values[0] = 0;
      valuePtr = 1;
      values[0] = CFNumberCreate(v5, kCFNumberIntType, &valuePtr);
      Copy = CFDictionaryCreate(v5, (const void **)buf, (const void **)values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CFRelease(values[0]);
    }
    v11 = v45;
    goto LABEL_116;
  }
  v76 = ne_log_obj();
  if (os_log_type_enabled(v76, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "NEVirtualInterfaceUpdateAdHocServiceReturnChanges";
    _os_log_fault_impl(&dword_19BD16000, v76, OS_LOG_TYPE_FAULT, "%s called with null interface", buf, 0xCu);
  }
  return 0;
}

uint64_t NEVirtualInterfaceIsStateEqualToDynamicStoreState(const __SCDynamicStore *a1, unint64_t a2, CFStringRef key)
{
  unint64_t v4;
  uint64_t result;
  const void *v6;
  uint64_t v7;

  v4 = (unint64_t)SCDynamicStoreCopyValue(a1, key);
  if (!(v4 | a2))
    return 1;
  v6 = (const void *)v4;
  if (v4 && a2)
  {
    v7 = CFEqual((CFTypeRef)v4, (CFTypeRef)a2);
  }
  else
  {
    v7 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  CFRelease(v6);
  return v7;
}

void NEVirtualInterfaceLogStateDictionaryKeys(uint64_t a1, uint64_t a2, CFDictionaryRef theDict)
{
  CFIndex Count;
  CFIndex v7;
  const __CFAllocator *v8;
  const void **v9;
  CFArrayRef v10;
  NSObject *v11;
  NSObject *v12;
  const char *v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  CFArrayRef v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!theDict)
  {
    v12 = ne_log_obj();
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      return;
    v14 = 136315394;
    v15 = a1 + 265;
    v16 = 2080;
    v17 = a2;
    v13 = "%s: %s: NULL";
LABEL_10:
    _os_log_impl(&dword_19BD16000, v12, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&v14, 0x16u);
    return;
  }
  Count = CFDictionaryGetCount(theDict);
  if (!Count)
  {
    v12 = ne_log_obj();
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      return;
    v14 = 136315394;
    v15 = a1 + 265;
    v16 = 2080;
    v17 = a2;
    v13 = "%s: %s: empty";
    goto LABEL_10;
  }
  v7 = Count;
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v9 = (const void **)CFAllocatorAllocate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 8 * Count, 0);
  CFDictionaryGetKeysAndValues(theDict, v9, 0);
  v10 = CFArrayCreate(v8, v9, v7, MEMORY[0x1E0C9B378]);
  CFAllocatorDeallocate(v8, v9);
  v11 = ne_log_large_obj();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v14 = 136315650;
    v15 = a1 + 265;
    v16 = 2080;
    v17 = a2;
    v18 = 2112;
    v19 = v10;
    _os_log_impl(&dword_19BD16000, v11, OS_LOG_TYPE_DEFAULT, "%s: %s: %@", (uint8_t *)&v14, 0x20u);
  }
  CFRelease(v10);
}

_OWORD *NEVirtualInterfaceCreateNexusExtendedWithOptions(const __CFAllocator *a1, uint64_t a2, NSObject *a3, uint64_t a4, int a5, int a6, unsigned int a7, int a8, int a9, int a10, int a11, unsigned __int8 *uu, const void *a13)
{
  _OWORD *Base;
  _OWORD *v18;
  uint64_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  NSObject *v23;
  BOOL v24;
  xpc_object_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  BOOL v28;
  xpc_object_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  CFTypeID TypeID;
  void *v35;
  int v36;
  int v37;
  void *v38;
  xpc_object_t v39;
  xpc_object_t v40;
  xpc_object_t v41;
  xpc_object_t v42;
  xpc_object_t v43;
  NSObject *v44;
  uint64_t v45;
  NSObject *v46;
  uint8_t v48[16];
  int v49;
  int v50;
  int v51;
  int bytes;
  _BYTE applier[24];
  void *v54;
  xpc_object_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  Base = NEVirtualInterfaceCreateBase(a1, a2, a3, a4);
  v18 = Base;
  if (!Base)
    return v18;
  v51 = a9;
  bytes = a8;
  v49 = a11;
  v50 = a10;
  v19 = *((_QWORD *)Base + 32);
  if (v19 != 2)
  {
    if (v19 != 1)
    {
LABEL_63:
      v46 = ne_log_obj();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)applier = 0;
        _os_log_error_impl(&dword_19BD16000, v46, OS_LOG_TYPE_ERROR, "Failed to open interface control socket\n", applier, 2u);
      }
      CFRelease(v18);
      return 0;
    }
    if ((a5 & 1) != 0)
    {
      v20 = xpc_array_create(0, 0);
      *(_DWORD *)v48 = 1;
      v21 = xpc_dictionary_create(0, 0, 0);
      xpc_dictionary_set_uint64(v21, "interface-option", 0x14uLL);
      xpc_dictionary_set_data(v21, "interface-option-data", v48, 4uLL);
      xpc_array_append_value(v20, v21);
      xpc_release(v21);
      if (a6)
      {
LABEL_6:
        *(_DWORD *)v48 = 4;
        v22 = xpc_dictionary_create(0, 0, 0);
        xpc_dictionary_set_uint64(v22, "interface-option", 1uLL);
        xpc_dictionary_set_data(v22, "interface-option-data", v48, 4uLL);
        xpc_array_append_value(v20, v22);
        xpc_release(v22);
      }
    }
    else
    {
      if (a8 | a7 | a9 | a10 | a11)
        v28 = 0;
      else
        v28 = a13 == 0;
      if (v28 && a6 == 0)
      {
        v20 = 0;
        goto LABEL_42;
      }
      v20 = xpc_array_create(0, 0);
      if (a6)
        goto LABEL_6;
    }
    if (a7 >= 2)
    {
      v23 = ne_log_obj();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v48 = 0;
        _os_log_error_impl(&dword_19BD16000, v23, OS_LOG_TYPE_ERROR, "Multiple channels unsupported on UserTunnel interfaces", v48, 2u);
      }
      goto LABEL_63;
    }
    if (bytes)
    {
      v30 = xpc_dictionary_create(0, 0, 0);
      xpc_dictionary_set_uint64(v30, "interface-option", 0x15uLL);
      xpc_dictionary_set_data(v30, "interface-option-data", &bytes, 4uLL);
      xpc_array_append_value(v20, v30);
      xpc_release(v30);
    }
    if (v51)
    {
      v31 = xpc_dictionary_create(0, 0, 0);
      xpc_dictionary_set_uint64(v31, "interface-option", 0x16uLL);
      xpc_dictionary_set_data(v31, "interface-option-data", &v51, 4uLL);
      xpc_array_append_value(v20, v31);
      xpc_release(v31);
    }
    if (v50)
    {
      v32 = xpc_dictionary_create(0, 0, 0);
      xpc_dictionary_set_uint64(v32, "interface-option", 0x19uLL);
      xpc_dictionary_set_data(v32, "interface-option-data", &v50, 4uLL);
      xpc_array_append_value(v20, v32);
      xpc_release(v32);
    }
    if (v49)
    {
      v33 = xpc_dictionary_create(0, 0, 0);
      xpc_dictionary_set_uint64(v33, "interface-option", 0x1AuLL);
      xpc_dictionary_set_data(v33, "interface-option-data", &v49, 4uLL);
      xpc_array_append_value(v20, v33);
      xpc_release(v33);
    }
    TypeID = CFDictionaryGetTypeID();
    if (a13 && CFGetTypeID(a13) == TypeID)
    {
      v35 = (void *)_CFXPCCreateXPCObjectFromCFObject();
      *(_QWORD *)applier = MEMORY[0x1E0C809B0];
      *(_QWORD *)&applier[8] = 0x40000000;
      *(_QWORD *)&applier[16] = __NEVirtualInterfaceConnectSocket_block_invoke;
      v54 = &__block_descriptor_tmp_43;
      v55 = v20;
      xpc_dictionary_apply(v35, applier);
      xpc_release(v35);
    }
LABEL_42:
    if (a6)
      v36 = 4;
    else
      v36 = 0;
    v37 = NEVirtualInterfaceConnectSocketInner((uint64_t)"com.apple.net.utun_control", (uint64_t)v20, (_BYTE *)v18 + 265, (unsigned int *)v18 + 73, v36);
    *((_DWORD *)v18 + 74) = v37;
    *((_BYTE *)v18 + 72) = a6;
    if (v20)
    {
      v38 = v20;
LABEL_59:
      xpc_release(v38);
      v37 = *((_DWORD *)v18 + 74);
      goto LABEL_60;
    }
    goto LABEL_60;
  }
  if (a8 | a7 | a9 | a10 | a11)
    v24 = 0;
  else
    v24 = a5 == 0;
  if (v24)
  {
    v25 = 0;
  }
  else
  {
    v25 = xpc_array_create(0, 0);
    if (a5)
    {
      *(_DWORD *)v48 = 1;
      v26 = xpc_dictionary_create(0, 0, 0);
      xpc_dictionary_set_uint64(v26, "interface-option", 0xCuLL);
      xpc_dictionary_set_data(v26, "interface-option-data", v48, 4uLL);
      xpc_array_append_value(v25, v26);
      xpc_release(v26);
    }
    if (a7)
    {
      if (uu && !uuid_is_null(uu))
      {
        v27 = xpc_dictionary_create(0, 0, 0);
        xpc_dictionary_set_uuid(v27, "interface-bind-channel-exec-uuid", uu);
      }
      else
      {
        v27 = xpc_dictionary_create(0, 0, 0);
        xpc_dictionary_set_BOOL(v27, "interface-bind-channel-pid", 1);
      }
      xpc_dictionary_set_uint64(v27, "interface-type", *((_QWORD *)v18 + 32));
      xpc_array_append_value(v25, v27);
      xpc_release(v27);
      *(_DWORD *)v48 = a7;
      v39 = xpc_dictionary_create(0, 0, 0);
      xpc_dictionary_set_uint64(v39, "interface-option", 8uLL);
      xpc_dictionary_set_data(v39, "interface-option-data", v48, 4uLL);
      xpc_array_append_value(v25, v39);
      xpc_release(v39);
    }
    if (bytes)
    {
      v40 = xpc_dictionary_create(0, 0, 0);
      xpc_dictionary_set_uint64(v40, "interface-option", 0xDuLL);
      xpc_dictionary_set_data(v40, "interface-option-data", &bytes, 4uLL);
      xpc_array_append_value(v25, v40);
      xpc_release(v40);
    }
    if (v51)
    {
      v41 = xpc_dictionary_create(0, 0, 0);
      xpc_dictionary_set_uint64(v41, "interface-option", 0xEuLL);
      xpc_dictionary_set_data(v41, "interface-option-data", &v51, 4uLL);
      xpc_array_append_value(v25, v41);
      xpc_release(v41);
    }
    if (v50)
    {
      v42 = xpc_dictionary_create(0, 0, 0);
      xpc_dictionary_set_uint64(v42, "interface-option", 0x12uLL);
      xpc_dictionary_set_data(v42, "interface-option-data", &v50, 4uLL);
      xpc_array_append_value(v25, v42);
      xpc_release(v42);
    }
    if (v49)
    {
      v43 = xpc_dictionary_create(0, 0, 0);
      xpc_dictionary_set_uint64(v43, "interface-option", 0x13uLL);
      xpc_dictionary_set_data(v43, "interface-option-data", &v49, 4uLL);
      xpc_array_append_value(v25, v43);
      xpc_release(v43);
    }
  }
  v37 = NEVirtualInterfaceConnectSocketInner((uint64_t)"com.apple.net.ipsec_control", (uint64_t)v25, (_BYTE *)v18 + 265, (unsigned int *)v18 + 73, 0);
  *((_DWORD *)v18 + 74) = v37;
  if (v25)
  {
    v38 = v25;
    goto LABEL_59;
  }
LABEL_60:
  if (v37 == -1)
    goto LABEL_63;
  v44 = ne_log_obj();
  if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
  {
    v45 = *((_QWORD *)v18 + 61);
    *(_DWORD *)applier = 136315394;
    *(_QWORD *)&applier[4] = (char *)v18 + 265;
    *(_WORD *)&applier[12] = 2112;
    *(_QWORD *)&applier[14] = v45;
    _os_log_impl(&dword_19BD16000, v44, OS_LOG_TYPE_DEFAULT, "Created a new NEVirtualInterface \"%s\" (%@)", applier, 0x16u);
  }
  return v18;
}

_OWORD *NEVirtualInterfaceCreateBase(const __CFAllocator *a1, uint64_t a2, NSObject *a3, uint64_t a4)
{
  _OWORD *Instance;
  _OWORD *v9;
  NSObject **v10;
  const __CFAllocator *v11;
  const __CFUUID *v12;
  const __CFUUID *v13;
  const CFArrayCallBacks *v14;
  __CFDictionary *Mutable;
  const __CFDictionary *v16;
  uint64_t v17;
  const void *v18;
  NSObject *v19;
  NSObject *v20;
  const char *v21;
  NSObject *v22;
  uint32_t v23;
  SCDynamicStoreRef v24;
  NSObject *v25;
  int v27;
  const char *v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (__NEVirtualInterfaceInitialize_onceToken != -1)
    dispatch_once(&__NEVirtualInterfaceInitialize_onceToken, &__block_literal_global_50);
  Instance = (_OWORD *)_CFRuntimeCreateInstance();
  if (!Instance)
  {
    v19 = ne_log_obj();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      v27 = 136315394;
      v28 = "NEVirtualInterfaceCreateBase";
      v29 = 1024;
      v30 = 1234;
      _os_log_error_impl(&dword_19BD16000, v19, OS_LOG_TYPE_ERROR, "NEVirtualInterface Failure in %s at line %d.", (uint8_t *)&v27, 0x12u);
    }
    return 0;
  }
  v9 = Instance;
  Instance[1] = 0u;
  v10 = (NSObject **)(Instance + 1);
  Instance[30] = 0u;
  Instance[31] = 0u;
  Instance[28] = 0u;
  Instance[29] = 0u;
  Instance[26] = 0u;
  Instance[27] = 0u;
  Instance[24] = 0u;
  Instance[25] = 0u;
  Instance[22] = 0u;
  Instance[23] = 0u;
  Instance[20] = 0u;
  Instance[21] = 0u;
  Instance[18] = 0u;
  Instance[19] = 0u;
  Instance[16] = 0u;
  Instance[17] = 0u;
  Instance[14] = 0u;
  Instance[15] = 0u;
  Instance[12] = 0u;
  Instance[13] = 0u;
  Instance[10] = 0u;
  Instance[11] = 0u;
  Instance[8] = 0u;
  Instance[9] = 0u;
  Instance[6] = 0u;
  Instance[7] = 0u;
  Instance[4] = 0u;
  Instance[5] = 0u;
  Instance[2] = 0u;
  Instance[3] = 0u;
  v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v12 = CFUUIDCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  if (!v12)
  {
    v20 = ne_log_obj();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v27 = 136315394;
      v28 = "NEVirtualInterfaceCreateBase";
      v29 = 1024;
      v30 = 1242;
      v21 = "NEVirtualInterface Failure in %s at line %d.";
LABEL_18:
      v22 = v20;
      v23 = 18;
LABEL_19:
      _os_log_error_impl(&dword_19BD16000, v22, OS_LOG_TYPE_ERROR, v21, (uint8_t *)&v27, v23);
    }
LABEL_22:
    CFRelease(v9);
    return 0;
  }
  v13 = v12;
  *((_QWORD *)v9 + 61) = CFUUIDCreateString(v11, v12);
  CFRelease(v13);
  if (!*((_QWORD *)v9 + 61))
  {
    v20 = ne_log_obj();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v27 = 136315394;
      v28 = "NEVirtualInterfaceCreateBase";
      v29 = 1024;
      v30 = 1248;
      v21 = "NEVirtualInterface Failure in %s at line %d.";
      goto LABEL_18;
    }
    goto LABEL_22;
  }
  if (a3)
  {
    *v10 = a3;
    dispatch_retain(a3);
  }
  *((_DWORD *)v9 + 77) = -1;
  *((_BYTE *)v9 + 73) = 1;
  *((_QWORD *)v9 + 3) = a4;
  *((_QWORD *)v9 + 32) = a2;
  v14 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  *((_QWORD *)v9 + 40) = CFArrayCreateMutable(v11, 0, MEMORY[0x1E0C9B378]);
  *((_QWORD *)v9 + 41) = CFArrayCreateMutable(v11, 0, v14);
  *((_QWORD *)v9 + 42) = CFArrayCreateMutable(v11, 0, v14);
  *((_QWORD *)v9 + 43) = CFArrayCreateMutable(v11, 0, v14);
  *((_QWORD *)v9 + 44) = CFArrayCreateMutable(v11, 0, v14);
  *((_QWORD *)v9 + 45) = CFArrayCreateMutable(v11, 0, v14);
  *((_QWORD *)v9 + 46) = CFArrayCreateMutable(v11, 0, v14);
  *((_QWORD *)v9 + 47) = 1;
  *((_QWORD *)v9 + 48) = 1;
  *((_DWORD *)v9 + 76) = 0;
  Mutable = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v16 = Mutable;
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CE8B50], (const void *)*MEMORY[0x1E0C9AE50]);
    *((_QWORD *)v9 + 62) = SCDynamicStoreCreateWithOptions(a1, CFSTR("NEVirtualInterface Helper Session"), v16, 0, 0);
    CFRelease(v16);
    if (*((_QWORD *)v9 + 62))
      goto LABEL_10;
    goto LABEL_21;
  }
  v24 = SCDynamicStoreCreateWithOptions(a1, CFSTR("NEVirtualInterface Helper Session"), 0, 0, 0);
  *((_QWORD *)v9 + 62) = v24;
  if (!v24)
  {
LABEL_21:
    v25 = ne_log_obj();
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      goto LABEL_22;
    LOWORD(v27) = 0;
    v21 = "Failed to open dynamic store session\n";
    v22 = v25;
    v23 = 2;
    goto LABEL_19;
  }
LABEL_10:
  v17 = _SCNetworkServiceCopyActive();
  if (v17)
  {
    v18 = (const void *)v17;
    SCNetworkServiceSetPrimaryRank();
    CFRelease(v18);
  }
  return v9;
}

uint64_t NEVirtualInterfaceConnectSocketInner(uint64_t a1, uint64_t a2, _BYTE *a3, unsigned int *a4, int a5)
{
  uint64_t KernelControlSocketExtended;
  uint64_t v9;
  NSObject *v10;
  int v11;
  const char *v12;
  NSObject *v13;
  NSObject *v15;
  int v16;
  int v17;
  int v18;
  socklen_t v19;
  int v20;
  uint8_t buf[4];
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v19 = 0;
  v20 = 1;
  KernelControlSocketExtended = NEHelperGetKernelControlSocketExtended();
  v9 = KernelControlSocketExtended;
  if ((KernelControlSocketExtended & 0x80000000) != 0)
  {
    v13 = ne_log_obj();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_19BD16000, v13, OS_LOG_TYPE_ERROR, "Cannot get kernel control socket from NEHelper\n", buf, 2u);
    }
    if ((_DWORD)v9 == -1)
    {
      if (!a4)
        return 0xFFFFFFFFLL;
LABEL_12:
      *a4 = 0;
      return 0xFFFFFFFFLL;
    }
LABEL_16:
    close(v9);
    if (!a4)
      return 0xFFFFFFFFLL;
    goto LABEL_12;
  }
  if (ioctl(KernelControlSocketExtended, 0x8004667EuLL, &v20) == -1)
  {
    v10 = ne_log_obj();
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      goto LABEL_16;
    v17 = *__error();
    *(_DWORD *)buf = 67109120;
    v22 = v17;
    v12 = "FIONBIO failed: %d\n";
    goto LABEL_23;
  }
  if (!virtual_interface_get_properties(v9, a3, a4, 0, 0))
    goto LABEL_16;
  if (a5)
  {
    v18 = 0;
    v19 = 4;
    if (getsockopt(v9, 2, 1, &v18, &v19))
    {
      v10 = ne_log_obj();
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        goto LABEL_16;
      v11 = *__error();
      *(_DWORD *)buf = 67109120;
      v22 = v11;
      v12 = "getsockopt flags failed on kernel control socket (errno = %d)\n";
LABEL_23:
      _os_log_error_impl(&dword_19BD16000, v10, OS_LOG_TYPE_ERROR, v12, buf, 8u);
      goto LABEL_16;
    }
    if ((a5 & ~v18) != 0)
    {
      v18 |= a5;
      v19 = 4;
      if (setsockopt(v9, 2, 1, &v18, 4u))
      {
        v15 = ne_log_obj();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          v16 = *__error();
          *(_DWORD *)buf = 67109120;
          v22 = v16;
          _os_log_impl(&dword_19BD16000, v15, OS_LOG_TYPE_INFO, "setsockopt flags failed on kernel control socket (errno = %d)\n", buf, 8u);
        }
        goto LABEL_16;
      }
    }
  }
  return v9;
}

uint64_t virtual_interface_get_properties(int a1, _BYTE *a2, unsigned int *a3, uint64_t *a4, void *a5)
{
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  int v13;
  uint64_t v14;
  int v15;
  NSObject *v16;
  uint64_t result;
  NSObject *v18;
  int v19;
  int v20;
  socklen_t v21;
  socklen_t v22;
  uint8_t buf[4];
  _BYTE *v24;
  __int16 v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v22 = 24;
  if (a2)
  {
    if (*a2)
    {
      v10 = ne_log_obj();
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        goto LABEL_8;
      *(_DWORD *)buf = 136315138;
      v24 = a2;
      v11 = "Using interface name %s";
      goto LABEL_5;
    }
    v15 = getsockopt(a1, 2, 2, a2, &v22);
    v16 = ne_log_obj();
    v10 = v16;
    if (v15)
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        v20 = *__error();
        *(_DWORD *)buf = 67109120;
        LODWORD(v24) = v20;
        _os_log_error_impl(&dword_19BD16000, v10, OS_LOG_TYPE_ERROR, "getsockopt ifname failed on kernel control socket (errno = %d)\n", buf, 8u);
        if (!a3)
        {
LABEL_20:
          if (a4)
          {
            result = 0;
            *a4 = 0;
            return result;
          }
          return 0;
        }
      }
      else if (!a3)
      {
        goto LABEL_20;
      }
      *a3 = 0;
      goto LABEL_20;
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      v24 = a2;
      v11 = "getsockopt(UTUN_OPT_IFNAME) returned virtual interface name %s";
LABEL_5:
      _os_log_impl(&dword_19BD16000, v10, OS_LOG_TYPE_DEFAULT, v11, buf, 0xCu);
    }
  }
  else
  {
    v12 = ne_log_obj();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218240;
      v24 = 0;
      v25 = 1024;
      v26 = 24;
      _os_log_error_impl(&dword_19BD16000, v12, OS_LOG_TYPE_ERROR, "Provider name buffer is invalid (%p, %u)", buf, 0x12u);
    }
  }
LABEL_8:
  if (a3)
    *a3 = if_nametoindex(a2);
  if (a4)
  {
    if (!strncmp(a2, "utun", 4uLL))
    {
      v14 = 1;
    }
    else if (!strncmp(a2, "ipsec", 5uLL))
    {
      v14 = 2;
    }
    else
    {
      v13 = strncmp(a2, "utap", 4uLL);
      v14 = 3;
      if (v13)
        v14 = 0;
    }
    *a4 = v14;
  }
  if (a5)
  {
    v21 = 4;
    if (getsockopt(a1, 2, 1, a5, &v21))
    {
      v18 = ne_log_obj();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        v19 = *__error();
        *(_DWORD *)buf = 67109120;
        LODWORD(v24) = v19;
        _os_log_error_impl(&dword_19BD16000, v18, OS_LOG_TYPE_ERROR, "getsockopt flags failed on kernel control socket (errno = %d)\n", buf, 8u);
      }
      return 0;
    }
  }
  return 1;
}

__CFString *__NEVirtualInterfaceCopyDescription(const void *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<NEVirtualInterface, %p [%p]> {"), a1, v2);
  CFStringAppendFormat(Mutable, 0, CFSTR("}"));
  return Mutable;
}

void NEVirtualInterfaceTearDown(uint64_t a1)
{
  NSObject *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  int v22;
  const void *v23;
  const void *v24;
  const void *v25;
  NSObject *v26;
  int v27;
  const void *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v2 = ne_log_obj();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v29 = 136315138;
    v30 = a1 + 265;
    _os_log_impl(&dword_19BD16000, v2, OS_LOG_TYPE_DEFAULT, "Tearing down %s", (uint8_t *)&v29, 0xCu);
  }
  if (a1)
  {
    v3 = *(const void **)(a1 + 488);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(a1 + 488) = 0;
    }
    v4 = *(const void **)(a1 + 496);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(a1 + 496) = 0;
    }
    v5 = *(const void **)(a1 + 320);
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(a1 + 320) = 0;
    }
    v6 = *(const void **)(a1 + 328);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(a1 + 328) = 0;
    }
    v7 = *(const void **)(a1 + 336);
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(a1 + 336) = 0;
    }
    v8 = *(const void **)(a1 + 344);
    if (v8)
    {
      CFRelease(v8);
      *(_QWORD *)(a1 + 344) = 0;
    }
    v9 = *(const void **)(a1 + 352);
    if (v9)
    {
      CFRelease(v9);
      *(_QWORD *)(a1 + 352) = 0;
    }
    v10 = *(const void **)(a1 + 360);
    if (v10)
    {
      CFRelease(v10);
      *(_QWORD *)(a1 + 360) = 0;
    }
    v11 = *(const void **)(a1 + 368);
    if (v11)
    {
      CFRelease(v11);
      *(_QWORD *)(a1 + 368) = 0;
    }
    v12 = *(const void **)(a1 + 416);
    if (v12)
    {
      CFRelease(v12);
      *(_QWORD *)(a1 + 416) = 0;
    }
    v13 = *(const void **)(a1 + 432);
    if (v13)
    {
      CFRelease(v13);
      *(_QWORD *)(a1 + 432) = 0;
    }
    v14 = *(const void **)(a1 + 424);
    if (v14)
    {
      CFRelease(v14);
      *(_QWORD *)(a1 + 424) = 0;
    }
    v15 = *(const void **)(a1 + 392);
    if (v15)
    {
      CFRelease(v15);
      *(_QWORD *)(a1 + 392) = 0;
    }
    v16 = *(const void **)(a1 + 400);
    if (v16)
    {
      CFRelease(v16);
      *(_QWORD *)(a1 + 400) = 0;
    }
    v17 = *(const void **)(a1 + 448);
    if (v17)
    {
      CFRelease(v17);
      *(_QWORD *)(a1 + 448) = 0;
    }
    v18 = *(const void **)(a1 + 456);
    if (v18)
    {
      CFRelease(v18);
      *(_QWORD *)(a1 + 456) = 0;
    }
    v19 = *(const void **)(a1 + 464);
    if (v19)
    {
      CFRelease(v19);
      *(_QWORD *)(a1 + 464) = 0;
    }
    v20 = *(const void **)(a1 + 472);
    if (v20)
    {
      CFRelease(v20);
      *(_QWORD *)(a1 + 472) = 0;
    }
    v21 = *(const void **)(a1 + 480);
    if (v21)
    {
      CFRelease(v21);
      *(_QWORD *)(a1 + 480) = 0;
    }
    NEVirtualInterfaceDisableChannel(a1);
    if (*(_QWORD *)(a1 + 256) != 2)
    {
      NEVirtualInterfaceAdjustReadBufferSize(a1, 0);
      NEVirtualInterfaceAdjustSendCount(a1, 0);
    }
    v22 = *(_DWORD *)(a1 + 308);
    if (v22 != -1)
    {
      close(v22);
      *(_DWORD *)(a1 + 308) = -1;
    }
    v23 = *(const void **)(a1 + 32);
    if (v23)
    {
      _Block_release(v23);
      *(_QWORD *)(a1 + 32) = 0;
    }
    v24 = *(const void **)(a1 + 48);
    if (v24)
    {
      _Block_release(v24);
      *(_QWORD *)(a1 + 48) = 0;
    }
    v25 = *(const void **)(a1 + 40);
    if (v25)
    {
      _Block_release(v25);
      *(_QWORD *)(a1 + 40) = 0;
    }
    v26 = *(NSObject **)(a1 + 16);
    if (v26)
    {
      dispatch_release(v26);
      *(_QWORD *)(a1 + 16) = 0;
    }
    v27 = *(_DWORD *)(a1 + 296);
    if (v27 != -1)
    {
      close(v27);
      *(_DWORD *)(a1 + 296) = -1;
    }
    v28 = *(const void **)(a1 + 504);
    if (v28)
    {
      CFRelease(v28);
      *(_QWORD *)(a1 + 504) = 0;
    }
    if (*(_QWORD *)(a1 + 256) == 4)
      NEHelperInterfaceDestroy();
  }
}

BOOL NEVirtualInterfaceDisableChannel(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  NSObject *v4;
  int v5;
  NSObject *v6;
  _BOOL8 result;
  const char *v8;
  uint8_t *v9;
  NSObject *v10;
  uint32_t v11;
  NSObject *v12;
  int v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  char *v21;
  char __strerrbuf[4];
  const char *v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if ((*(_BYTE *)(a1 + 312) & 0x10) != 0)
    {
      *(_BYTE *)(a1 + 312) &= ~0x10u;
      v1 = *(_QWORD *)(a1 + 256);
      if (v1 != 2)
      {
        v2 = *(_DWORD *)(a1 + 296);
        v13 = 0;
        if (v1 == 1)
        {
          v3 = 17;
        }
        else
        {
          v4 = ne_log_obj();
          if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__strerrbuf = 136315394;
            v23 = "NEVirtualInterfaceGetEnableChannelOption";
            v24 = 1024;
            v25 = 1639;
            _os_log_error_impl(&dword_19BD16000, v4, OS_LOG_TYPE_ERROR, "NEVirtualInterface Failure in %s at line %d.", (uint8_t *)__strerrbuf, 0x12u);
          }
          v3 = 0;
        }
        if (setsockopt(v2, 2, v3, &v13, 4u))
        {
          v5 = *__error();
          if (strerror_r(v5, __strerrbuf, 0x80uLL))
            __strerrbuf[0] = 0;
          v6 = ne_log_obj();
          if (!os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
            return 0;
          *(_DWORD *)buf = 67109890;
          v15 = v2;
          v16 = 1024;
          v17 = v3;
          v18 = 1024;
          v19 = v5;
          v20 = 2080;
          v21 = __strerrbuf;
          v8 = "setsockopt(%d, SYSPROTO_CONTROL, %d, disable): [%d] %s";
          v9 = buf;
          v10 = v6;
          v11 = 30;
LABEL_17:
          _os_log_fault_impl(&dword_19BD16000, v10, OS_LOG_TYPE_FAULT, v8, v9, v11);
          return 0;
        }
      }
    }
    return 1;
  }
  else
  {
    v12 = ne_log_obj();
    result = os_log_type_enabled(v12, OS_LOG_TYPE_FAULT);
    if (result)
    {
      *(_DWORD *)__strerrbuf = 136315138;
      v23 = "NEVirtualInterfaceDisableChannel";
      v8 = "%s called with null interface";
      v9 = (uint8_t *)__strerrbuf;
      v10 = v12;
      v11 = 12;
      goto LABEL_17;
    }
  }
  return result;
}

BOOL NEVirtualInterfaceAdjustReadBufferSize(uint64_t a1, unsigned int a2)
{
  NSObject *v2;
  _BOOL8 result;
  NSObject *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  NSObject *v16;
  unsigned int v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  int v24;
  NSObject *v25;
  const char *v26;
  NSObject *v27;
  NSObject *v28;
  uint32_t v29;
  uint64_t v30;
  int v31;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  _WORD v35[9];

  *(_QWORD *)&v35[5] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 256) != 2)
  {
    v31 = 16000;
    if (interface_get_mtu(a1 + 265, &v31, (int *)(a1 + 308)))
    {
      v6 = ne_log_obj();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        v24 = *__error();
        *(_DWORD *)buf = 136315394;
        v33 = "NEVirtualInterfaceAdjustReadBufferSize";
        v34 = 1024;
        *(_DWORD *)v35 = v24;
        _os_log_error_impl(&dword_19BD16000, v6, OS_LOG_TYPE_ERROR, "%s: interface_get_mtu failed (%d), defaulting to max mtu", buf, 0x12u);
      }
      v7 = 16000;
    }
    else
    {
      v7 = v31;
    }
    v8 = v7 + 20;
    LODWORD(v9) = *(_DWORD *)(a1 + 96);
    v10 = *(_QWORD *)(a1 + 88);
    if ((_DWORD)v9 == a2 && v8 == v10)
      return 1;
    *(_QWORD *)(a1 + 88) = v8;
    if (v8 != v10 && (_DWORD)v9)
    {
      v11 = 0;
      while (1)
      {
        v12 = malloc_type_realloc(*(void **)(*(_QWORD *)(a1 + 80) + 8 * v11), *(_QWORD *)(a1 + 88), 0xE0A8BCC5uLL);
        if (!v12)
          break;
        *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v11++) = v12;
        v9 = *(unsigned int *)(a1 + 96);
        if (v11 >= v9)
          goto LABEL_16;
      }
      v16 = ne_log_obj();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        v30 = *(_QWORD *)(a1 + 88);
        *(_DWORD *)buf = 136315394;
        v33 = "NEVirtualInterfaceAdjustReadBufferSize";
        v34 = 2048;
        *(_QWORD *)v35 = v30;
        _os_log_error_impl(&dword_19BD16000, v16, OS_LOG_TYPE_ERROR, "%s: failed to change read buffer size (length=%zu)", buf, 0x16u);
      }
      v17 = *(_DWORD *)(a1 + 96);
      v18 = a1;
      goto LABEL_51;
    }
LABEL_16:
    *(_DWORD *)(a1 + 96) = a2;
    if ((_DWORD)v9 == a2)
      return 1;
    if (NEVirtualInterfaceAdjustMetadataBufferSize(a1, v9, a2))
    {
      v13 = *(unsigned int *)(a1 + 96);
      if (v9 >= v13)
      {
        if (v13 < v9)
        {
          do
            free(*(void **)(*(_QWORD *)(a1 + 80) + 8 * v13++));
          while (v9 != v13);
          LODWORD(v13) = *(_DWORD *)(a1 + 96);
        }
        v22 = *(void **)(a1 + 80);
        if (!(_DWORD)v13)
        {
          free(v22);
          *(_QWORD *)(a1 + 80) = 0;
          return 1;
        }
        v23 = malloc_type_realloc(v22, 8 * v13, 0x10040436913F5uLL);
        if (v23)
        {
          *(_QWORD *)(a1 + 80) = v23;
          return 1;
        }
        v27 = ne_log_obj();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v33 = "NEVirtualInterfaceAdjustReadBufferSize";
          v34 = 1024;
          *(_DWORD *)v35 = a2;
          v26 = "%s: failed to reduce read buffer (cnt=%d)";
          v28 = v27;
          v29 = 18;
LABEL_49:
          _os_log_error_impl(&dword_19BD16000, v28, OS_LOG_TYPE_ERROR, v26, buf, v29);
        }
      }
      else
      {
        v14 = (char *)malloc_type_realloc(*(void **)(a1 + 80), 8 * v13, 0x10040436913F5uLL);
        if (v14)
        {
          *(_QWORD *)(a1 + 80) = v14;
          bzero(&v14[8 * v9], 8 * (*(_DWORD *)(a1 + 96) - v9));
          if (v9 >= *(_DWORD *)(a1 + 96))
            return 1;
          v15 = v9;
          while (1)
          {
            *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v15) = malloc_type_malloc(*(_QWORD *)(a1 + 88), 0x19B7BC8uLL);
            if (!*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v15))
              break;
            ++v15;
            result = 1;
            if (v15 >= *(unsigned int *)(a1 + 96))
              return result;
          }
          v25 = ne_log_obj();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            v33 = "NEVirtualInterfaceAdjustReadBufferSize";
            v34 = 1024;
            *(_DWORD *)v35 = a2;
            v35[2] = 1024;
            *(_DWORD *)&v35[3] = v9;
            v26 = "%s: failed to allocate read buffers (cnt=%d, prev=%d)";
            goto LABEL_48;
          }
        }
        else
        {
          v25 = ne_log_obj();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            v33 = "NEVirtualInterfaceAdjustReadBufferSize";
            v34 = 1024;
            *(_DWORD *)v35 = a2;
            v35[2] = 1024;
            *(_DWORD *)&v35[3] = v9;
            v26 = "%s: failed to allocate read buffer (cnt=%d, prev=%d)";
LABEL_48:
            v28 = v25;
            v29 = 24;
            goto LABEL_49;
          }
        }
      }
      v18 = a1;
      v17 = v9;
LABEL_51:
      NEVirtualInterfaceCleanupBuffersOnFailure(v18, v17);
      return 0;
    }
    v19 = ne_log_obj();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v33 = "NEVirtualInterfaceAdjustReadBufferSize";
      v34 = 1024;
      *(_DWORD *)v35 = a2;
      v35[2] = 1024;
      *(_DWORD *)&v35[3] = v9;
      _os_log_error_impl(&dword_19BD16000, v19, OS_LOG_TYPE_ERROR, "%s: failed to alloc metadata buffer (cnt=%d, prev=%d)", buf, 0x18u);
      if ((_DWORD)v9)
      {
LABEL_32:
        v20 = 0;
        v21 = 8 * v9;
        do
        {
          free(*(void **)(*(_QWORD *)(a1 + 80) + v20));
          v20 += 8;
        }
        while (v21 != v20);
      }
    }
    else if ((_DWORD)v9)
    {
      goto LABEL_32;
    }
    free(*(void **)(a1 + 80));
    result = 0;
    *(_QWORD *)(a1 + 80) = 0;
    return result;
  }
  v2 = ne_log_obj();
  result = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)buf = 136315394;
    v33 = "NEVirtualInterfaceAdjustReadBufferSize";
    v34 = 1024;
    *(_DWORD *)v35 = 2047;
    _os_log_error_impl(&dword_19BD16000, v2, OS_LOG_TYPE_ERROR, "NEVirtualInterface Failure in %s at line %d.", buf, 0x12u);
    return 0;
  }
  return result;
}

void NEVirtualInterfaceAdjustSendCount(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  BOOL v7;
  uint64_t v8;
  unsigned int v9;
  void *v10;
  void *v11;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 256);
  if (v2 == 2)
  {
    v3 = ne_log_obj();
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      return;
    v12 = 136315394;
    v13 = "NEVirtualInterfaceAdjustSendCount";
    v14 = 1024;
    v15 = 1173;
    v4 = "NEVirtualInterface Failure in %s at line %d.";
    goto LABEL_19;
  }
  if (*(_DWORD *)(a1 + 212) == a2)
    return;
  *(_DWORD *)(a1 + 212) = a2;
  if (a2)
  {
    v7 = v2 == 1;
    v8 = 1;
    if (v7)
      v8 = 2;
    if (*(_BYTE *)(a1 + 72))
      ++v8;
    *(_QWORD *)(a1 + 216) = reallocf(*(void **)(a1 + 216), 16 * a2 * v8);
    *(_QWORD *)(a1 + 224) = reallocf(*(void **)(a1 + 224), 56 * a2);
    v9 = 60;
    if (!*(_BYTE *)(a1 + 72))
      v9 = 44;
    *(_QWORD *)(a1 + 232) = reallocf(*(void **)(a1 + 232), v9 * (unint64_t)a2);
    *(_QWORD *)(a1 + 240) = reallocf(*(void **)(a1 + 240), 8 * a2);
    v10 = reallocf(*(void **)(a1 + 248), 8 * a2);
    *(_QWORD *)(a1 + 248) = v10;
    v11 = *(void **)(a1 + 216);
    if (!v11 || !*(_QWORD *)(a1 + 224) || !*(_QWORD *)(a1 + 232) || !v10 || !*(_QWORD *)(a1 + 240))
    {
      free(v11);
      *(_QWORD *)(a1 + 216) = 0;
      free(*(void **)(a1 + 224));
      *(_QWORD *)(a1 + 224) = 0;
      free(*(void **)(a1 + 232));
      *(_QWORD *)(a1 + 232) = 0;
      free(*(void **)(a1 + 240));
      *(_QWORD *)(a1 + 240) = 0;
      free(*(void **)(a1 + 248));
      *(_QWORD *)(a1 + 248) = 0;
      *(_DWORD *)(a1 + 212) = 0;
      v3 = ne_log_obj();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        v12 = 136315394;
        v13 = "NEVirtualInterfaceAdjustSendCount";
        v14 = 1024;
        v15 = a2;
        v4 = "%s: failed to allocate send buffers (cnt=%d)";
LABEL_19:
        _os_log_error_impl(&dword_19BD16000, v3, OS_LOG_TYPE_ERROR, v4, (uint8_t *)&v12, 0x12u);
      }
    }
  }
  else
  {
    free(*(void **)(a1 + 216));
    *(_QWORD *)(a1 + 216) = 0;
    free(*(void **)(a1 + 224));
    *(_QWORD *)(a1 + 224) = 0;
    free(*(void **)(a1 + 232));
    *(_QWORD *)(a1 + 232) = 0;
    free(*(void **)(a1 + 240));
    *(_QWORD *)(a1 + 240) = 0;
    free(*(void **)(a1 + 248));
    *(_QWORD *)(a1 + 248) = 0;
  }
}

uint64_t interface_get_mtu(uint64_t a1, _DWORD *a2, int *a3)
{
  int v5;
  uint64_t result;
  NSObject *v7;
  NSObject *v8;
  int *v9;
  char *v10;
  int *v11;
  char *v12;
  uint8_t buf[4];
  char *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v15 = 0u;
  v16 = 0u;
  if (*a3 == -1 && (v5 = socket(2, 2, 0), *a3 = v5, v5 < 0))
  {
    v8 = ne_log_obj();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v11 = __error();
      v12 = strerror(*v11);
      *(_DWORD *)buf = 136315138;
      v14 = v12;
      _os_log_error_impl(&dword_19BD16000, v8, OS_LOG_TYPE_ERROR, "Failed to create ioctl socket to get MTU: %s", buf, 0xCu);
    }
  }
  else
  {
    __strlcpy_chk();
    LODWORD(v16) = 0;
    if ((ioctl(*a3, 0xC0206933uLL, &v15) & 0x80000000) == 0)
    {
      result = 0;
      *a2 = v16;
      return result;
    }
    v7 = ne_log_obj();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v9 = __error();
      v10 = strerror(*v9);
      *(_DWORD *)buf = 136315138;
      v14 = v10;
      _os_log_error_impl(&dword_19BD16000, v7, OS_LOG_TYPE_ERROR, "SIOCGIFMTU failed: %s", buf, 0xCu);
    }
    close(*a3);
    *a3 = -1;
  }
  return *__error();
}

uint64_t NEVirtualInterfaceCleanupBuffersOnFailure(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v4 = 0;
    v5 = 8 * a2;
    do
    {
      free(*(void **)(*(_QWORD *)(a1 + 80) + v4));
      v4 += 8;
    }
    while (v5 != v4);
  }
  free(*(void **)(a1 + 80));
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  return NEVirtualInterfaceAdjustMetadataBufferSize(a1, a2, 0);
}

uint64_t NEVirtualInterfaceAdjustMetadataBufferSize(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t result;
  void *v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a2 == a3)
    return 1;
  v5 = *(void **)(a1 + 104);
  if (!a3)
  {
    free(v5);
    *(_QWORD *)(a1 + 104) = 0;
    free(*(void **)(a1 + 112));
    *(_QWORD *)(a1 + 112) = 0;
    free(*(void **)(a1 + 120));
    *(_QWORD *)(a1 + 120) = 0;
    free(*(void **)(a1 + 128));
    *(_QWORD *)(a1 + 128) = 0;
    free(*(void **)(a1 + 136));
    *(_QWORD *)(a1 + 136) = 0;
    free(*(void **)(a1 + 144));
    *(_QWORD *)(a1 + 144) = 0;
    free(*(void **)(a1 + 152));
    *(_QWORD *)(a1 + 152) = 0;
    free(*(void **)(a1 + 160));
    *(_QWORD *)(a1 + 160) = 0;
    free(*(void **)(a1 + 168));
    *(_QWORD *)(a1 + 168) = 0;
    free(*(void **)(a1 + 176));
    *(_QWORD *)(a1 + 176) = 0;
    free(*(void **)(a1 + 184));
    *(_QWORD *)(a1 + 184) = 0;
    free(*(void **)(a1 + 192));
    *(_QWORD *)(a1 + 192) = 0;
    free(*(void **)(a1 + 200));
    result = 1;
    v10 = (_QWORD *)(a1 + 200);
LABEL_30:
    *v10 = 0;
    return result;
  }
  v6 = a3;
  *(_QWORD *)(a1 + 104) = reallocf(v5, 4 * a3);
  v7 = *(void **)(a1 + 112);
  if (*(_BYTE *)(a1 + 72))
  {
    v8 = 16 * v6;
    v9 = reallocf(v7, 16 * v6);
  }
  else
  {
    free(v7);
    v9 = 0;
    v8 = 16 * v6;
  }
  *(_QWORD *)(a1 + 112) = v9;
  *(_QWORD *)(a1 + 120) = reallocf(*(void **)(a1 + 120), 8 * v6);
  *(_QWORD *)(a1 + 128) = reallocf(*(void **)(a1 + 128), 8 * v6);
  *(_QWORD *)(a1 + 136) = reallocf(*(void **)(a1 + 136), 8 * v6);
  *(_QWORD *)(a1 + 144) = reallocf(*(void **)(a1 + 144), 8 * v6);
  *(_QWORD *)(a1 + 152) = reallocf(*(void **)(a1 + 152), 8 * v6);
  *(_QWORD *)(a1 + 160) = reallocf(*(void **)(a1 + 160), 8 * v6);
  *(_QWORD *)(a1 + 168) = reallocf(*(void **)(a1 + 168), 28 * v6);
  *(_QWORD *)(a1 + 176) = reallocf(*(void **)(a1 + 176), 28 * v6);
  *(_QWORD *)(a1 + 184) = reallocf(*(void **)(a1 + 184), v6);
  v11 = 1;
  if (*(_QWORD *)(a1 + 256) == 1)
    v11 = 2;
  if (*(_BYTE *)(a1 + 72))
    ++v11;
  *(_QWORD *)(a1 + 192) = reallocf(*(void **)(a1 + 192), v8 * v11);
  v10 = (_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = reallocf(*(void **)(a1 + 200), 56 * v6);
  if (!*(_QWORD *)(a1 + 104)
    || !*(_QWORD *)(a1 + 120)
    || *(_BYTE *)(a1 + 72) && !*(_QWORD *)(a1 + 112)
    || !*(_QWORD *)(a1 + 128)
    || !*(_QWORD *)(a1 + 136)
    || !*(_QWORD *)(a1 + 144)
    || !*(_QWORD *)(a1 + 152)
    || !*(_QWORD *)(a1 + 160)
    || !*(_QWORD *)(a1 + 168)
    || !*(_QWORD *)(a1 + 176)
    || !*(_QWORD *)(a1 + 184))
  {
    v14 = ne_log_obj();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v15 = 136315394;
      v16 = "NEVirtualInterfaceAdjustMetadataBufferSize";
      v17 = 1024;
      v18 = 2010;
      _os_log_error_impl(&dword_19BD16000, v14, OS_LOG_TYPE_ERROR, "NEVirtualInterface Failure in %s at line %d.", (uint8_t *)&v15, 0x12u);
    }
    free(*(void **)(a1 + 104));
    *(_QWORD *)(a1 + 104) = 0;
    free(*(void **)(a1 + 112));
    *(_QWORD *)(a1 + 112) = 0;
    free(*(void **)(a1 + 120));
    *(_QWORD *)(a1 + 120) = 0;
    free(*(void **)(a1 + 128));
    *(_QWORD *)(a1 + 128) = 0;
    free(*(void **)(a1 + 136));
    *(_QWORD *)(a1 + 136) = 0;
    free(*(void **)(a1 + 144));
    *(_QWORD *)(a1 + 144) = 0;
    free(*(void **)(a1 + 152));
    *(_QWORD *)(a1 + 152) = 0;
    free(*(void **)(a1 + 160));
    *(_QWORD *)(a1 + 160) = 0;
    free(*(void **)(a1 + 168));
    *(_QWORD *)(a1 + 168) = 0;
    free(*(void **)(a1 + 176));
    *(_QWORD *)(a1 + 176) = 0;
    free(*(void **)(a1 + 184));
    *(_QWORD *)(a1 + 184) = 0;
    free(*(void **)(a1 + 192));
    *(_QWORD *)(a1 + 192) = 0;
    free(*(void **)(a1 + 200));
    result = 0;
    goto LABEL_30;
  }
  v12 = 0;
  v13 = 0;
  result = 1;
  do
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 152) + 8 * v13) = *(_QWORD *)(a1 + 168) + v12;
    *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v13++) = *(_QWORD *)(a1 + 176) + v12;
    v12 += 28;
  }
  while (v6 != v13);
  return result;
}

_OWORD *NEVirtualInterfaceCreateNexusExtended(const __CFAllocator *a1, uint64_t a2, NSObject *a3, uint64_t a4, int a5, int a6, unsigned int a7, int a8, int a9, int a10, int a11, unsigned __int8 *uu)
{
  return NEVirtualInterfaceCreateNexusExtendedWithOptions(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, uu, 0);
}

_OWORD *NEVirtualInterfaceCreateNexus(const __CFAllocator *a1, uint64_t a2, NSObject *a3, uint64_t a4, int a5, unsigned int a6, int a7, int a8, int a9, int a10)
{
  return NEVirtualInterfaceCreateNexusExtendedWithOptions(a1, a2, a3, a4, a5, 0, a6, a7, a8, a9, a10, 0, 0);
}

_OWORD *NEVirtualInterfaceCreate(const __CFAllocator *a1, uint64_t a2, NSObject *a3, uint64_t a4)
{
  return NEVirtualInterfaceCreateNexusExtendedWithOptions(a1, a2, a3, a4, 0, 0, 0, 0, 0, 0, 0, 0, 0);
}

_OWORD *NEVirtualInterfaceCreateWithOptions(const __CFAllocator *a1, uint64_t a2, const void *a3, NSObject *a4, uint64_t a5)
{
  return NEVirtualInterfaceCreateNexusExtendedWithOptions(a1, a2, a4, a5, 0, 0, 0, 0, 0, 0, 0, 0, a3);
}

_OWORD *NEVirtualInterfaceCreateUserEthernet(const __CFAllocator *a1, NSObject *a2, uint64_t a3, int a4, const char *a5, const void *a6)
{
  _OWORD *Base;
  int v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  int *v15;
  char *v16;
  int v17;
  char *v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  Base = NEVirtualInterfaceCreateBase(a1, 3, a2, a3);
  if (Base)
  {
    v10 = dup(a4);
    *((_DWORD *)Base + 74) = v10;
    if (v10 < 0)
    {
      v13 = ne_log_obj();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        v15 = __error();
        v16 = strerror(*v15);
        v17 = 136315138;
        v18 = v16;
        _os_log_error_impl(&dword_19BD16000, v13, OS_LOG_TYPE_ERROR, "Failed to dup the user ethernet control socket: %s", (uint8_t *)&v17, 0xCu);
      }
      CFRelease(Base);
      return 0;
    }
    else
    {
      __strlcpy_chk();
      *((_DWORD *)Base + 73) = if_nametoindex(a5);
      *((_BYTE *)Base + 72) = 0;
      *((_BYTE *)Base + 264) = 0;
      if (a6)
      {
        CFRetain(a6);
        *((_QWORD *)Base + 63) = a6;
      }
      v11 = ne_log_obj();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v12 = *((_QWORD *)Base + 61);
        v17 = 136315394;
        v18 = (char *)Base + 265;
        v19 = 2112;
        v20 = v12;
        _os_log_impl(&dword_19BD16000, v11, OS_LOG_TYPE_DEFAULT, "Created a new NEVirtualInterface \"%s\" (%@)", (uint8_t *)&v17, 0x16u);
      }
    }
  }
  return Base;
}

char *NEVirtualInterfaceCreateRedirect(const __CFAllocator *a1, NSObject *a2, int a3, uint64_t a4)
{
  return NEVirtualInterfaceCreateRedirectInner(a1, a2, CFSTR("rd"), a3, a4);
}

char *NEVirtualInterfaceCreateRedirectInner(const __CFAllocator *a1, NSObject *a2, const __CFString *a3, int a4, uint64_t a5)
{
  char *Base;
  void *v8;
  void *v9;
  const char *string_ptr;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  uint32_t v16;
  NSObject *v17;
  int v19;
  char *v20;
  __int16 v21;
  uint64_t v22;
  char buffer[8];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    v13 = ne_log_obj();
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      return 0;
    *(_WORD *)buffer = 0;
    v14 = "interface name is NULL";
    v15 = v13;
    v16 = 2;
LABEL_14:
    _os_log_error_impl(&dword_19BD16000, v15, OS_LOG_TYPE_ERROR, v14, (uint8_t *)buffer, v16);
    return 0;
  }
  if ((a4 - 1) >= 3)
  {
    v17 = ne_log_obj();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buffer = 67109120;
    *(_DWORD *)&buffer[4] = a4;
    v14 = "invalid interface type %u";
    v15 = v17;
    v16 = 8;
    goto LABEL_14;
  }
  Base = (char *)NEVirtualInterfaceCreateBase(a1, 4, a2, a5);
  if (!Base)
    return Base;
  *(_QWORD *)buffer = 0;
  v24 = 0;
  v25 = 0;
  CFStringGetCString(a3, buffer, 24, 0x8000100u);
  v8 = (void *)NEHelperInterfaceCreate();
  if (!v8)
  {
    CFRelease(Base);
    return 0;
  }
  v9 = v8;
  string_ptr = xpc_string_get_string_ptr(v8);
  __strlcpy_chk();
  *((_DWORD *)Base + 73) = if_nametoindex(string_ptr);
  Base[72] = 0;
  Base[264] = 0;
  *((_DWORD *)Base + 74) = -1;
  xpc_release(v9);
  v11 = ne_log_obj();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *((_QWORD *)Base + 61);
    v19 = 136315394;
    v20 = Base + 265;
    v21 = 2112;
    v22 = v12;
    _os_log_impl(&dword_19BD16000, v11, OS_LOG_TYPE_DEFAULT, "Created a new NEVirtualInterface \"%s\" (%@)", (uint8_t *)&v19, 0x16u);
  }
  return Base;
}

char *NEVirtualInterfaceCreateRedirectFromName(const __CFAllocator *a1, CFStringRef theString, NSObject *a3, int a4, NSObject *a5)
{
  _OWORD *Base;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  uint32_t v16;
  NSObject *v17;
  int v19;
  char *v20;
  __int16 v21;
  uint64_t v22;
  char buffer[8];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if ((a4 - 1) >= 3)
  {
    v13 = ne_log_obj();
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buffer = 67109120;
    *(_DWORD *)&buffer[4] = a4;
    v14 = "invalid interface type %u";
    v15 = v13;
    v16 = 8;
LABEL_15:
    _os_log_error_impl(&dword_19BD16000, v15, OS_LOG_TYPE_ERROR, v14, (uint8_t *)buffer, v16);
    return 0;
  }
  if (!theString || !CFStringHasPrefix(theString, CFSTR("rd")))
  {
    v17 = ne_log_obj();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      return 0;
    *(_WORD *)buffer = 0;
    v14 = "invalid interface name";
    v15 = v17;
    v16 = 2;
    goto LABEL_15;
  }
  *(_QWORD *)buffer = 0;
  v24 = 0;
  v25 = 0;
  CFStringGetCString(theString, buffer, 24, 0x8000100u);
  if (!NEIsValidInterface(buffer))
    return NEVirtualInterfaceCreateRedirectInner(a1, a5, theString, a4, (uint64_t)a5);
  Base = NEVirtualInterfaceCreateBase(a1, 4, a3, (uint64_t)a5);
  if (Base)
  {
    __strlcpy_chk();
    *((_DWORD *)Base + 73) = if_nametoindex((const char *)Base + 265);
    *((_BYTE *)Base + 72) = 0;
    *((_BYTE *)Base + 264) = 0;
    *((_DWORD *)Base + 74) = -1;
    v11 = ne_log_obj();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *((_QWORD *)Base + 61);
      v19 = 136315394;
      v20 = (char *)Base + 265;
      v21 = 2112;
      v22 = v12;
      _os_log_impl(&dword_19BD16000, v11, OS_LOG_TYPE_DEFAULT, "Created a new NEVirtualInterface \"%s\" (%@)", (uint8_t *)&v19, 0x16u);
    }
  }
  return (char *)Base;
}

uint64_t NEVirtualInterfaceCreateFromSocket(uint64_t a1, int a2, NSObject *a3, uint64_t a4)
{
  return NEVirtualInterfaceCreateFromSocketAndName(a1, a2, 0, 0, a3, a4);
}

uint64_t NEVirtualInterfaceCreateFromSocketAndName(uint64_t a1, int a2, uint64_t a3, unint64_t a4, NSObject *a5, uint64_t a6)
{
  uint64_t Instance;
  uint64_t v12;
  NSObject **v13;
  unint64_t *v14;
  uint64_t *v15;
  int *v16;
  NSObject *v17;
  NSObject *v18;
  const __CFAllocator *v19;
  const __CFUUID *v20;
  const __CFUUID *v21;
  NSObject *v22;
  int v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (a2 < 0)
  {
    v18 = ne_log_obj();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v26 = "NEVirtualInterfaceCreateFromSocketAndName";
      v27 = 1024;
      v28 = 1551;
LABEL_21:
      _os_log_error_impl(&dword_19BD16000, v18, OS_LOG_TYPE_ERROR, "NEVirtualInterface Failure in %s at line %d.", buf, 0x12u);
    }
    return 0;
  }
  if (__NEVirtualInterfaceInitialize_onceToken != -1)
    dispatch_once(&__NEVirtualInterfaceInitialize_onceToken, &__block_literal_global_50);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    v18 = ne_log_obj();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v26 = "NEVirtualInterfaceCreateFromSocketAndName";
      v27 = 1024;
      v28 = 1559;
      goto LABEL_21;
    }
    return 0;
  }
  v12 = Instance;
  *(_OWORD *)(Instance + 16) = 0u;
  v13 = (NSObject **)(Instance + 16);
  *(_OWORD *)(Instance + 480) = 0u;
  *(_OWORD *)(Instance + 496) = 0u;
  *(_OWORD *)(Instance + 448) = 0u;
  *(_OWORD *)(Instance + 464) = 0u;
  *(_OWORD *)(Instance + 416) = 0u;
  *(_OWORD *)(Instance + 432) = 0u;
  *(_OWORD *)(Instance + 384) = 0u;
  *(_OWORD *)(Instance + 400) = 0u;
  *(_OWORD *)(Instance + 352) = 0u;
  *(_OWORD *)(Instance + 368) = 0u;
  *(_OWORD *)(Instance + 320) = 0u;
  *(_OWORD *)(Instance + 336) = 0u;
  *(_OWORD *)(Instance + 288) = 0u;
  *(_OWORD *)(Instance + 304) = 0u;
  *(_OWORD *)(Instance + 256) = 0u;
  *(_OWORD *)(Instance + 272) = 0u;
  *(_OWORD *)(Instance + 224) = 0u;
  *(_OWORD *)(Instance + 240) = 0u;
  *(_OWORD *)(Instance + 192) = 0u;
  *(_OWORD *)(Instance + 208) = 0u;
  *(_OWORD *)(Instance + 160) = 0u;
  *(_OWORD *)(Instance + 176) = 0u;
  *(_OWORD *)(Instance + 128) = 0u;
  *(_OWORD *)(Instance + 144) = 0u;
  *(_OWORD *)(Instance + 96) = 0u;
  *(_OWORD *)(Instance + 112) = 0u;
  *(_OWORD *)(Instance + 64) = 0u;
  *(_OWORD *)(Instance + 80) = 0u;
  *(_OWORD *)(Instance + 32) = 0u;
  *(_OWORD *)(Instance + 48) = 0u;
  *(_DWORD *)(Instance + 308) = -1;
  *(_BYTE *)(Instance + 264) = 1;
  *(_BYTE *)(Instance + 73) = 1;
  *(_DWORD *)(Instance + 296) = a2;
  v24 = 0;
  if (a3)
    __strlcpy_chk();
  v14 = (unint64_t *)(v12 + 256);
  v15 = (uint64_t *)(v12 + 256);
  if (a4)
  {
    v15 = 0;
    *v14 = a4;
  }
  if (a4 >= 2)
    v16 = 0;
  else
    v16 = &v24;
  if (!virtual_interface_get_properties(*(_DWORD *)(v12 + 296), (_BYTE *)(v12 + 265), (unsigned int *)(v12 + 292), v15, v16))
  {
    v17 = ne_log_obj();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v26 = "NEVirtualInterfaceCreateFromSocketAndName";
      v27 = 1024;
      v28 = 1588;
      goto LABEL_36;
    }
LABEL_37:
    CFRelease((CFTypeRef)v12);
    return 0;
  }
  if (*v14 == 1)
  {
    if ((v24 & 4) != 0)
      *(_BYTE *)(v12 + 72) = 1;
  }
  else if (!*v14)
  {
    v17 = ne_log_obj();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v26 = "NEVirtualInterfaceCreateFromSocketAndName";
      v27 = 1024;
      v28 = 1593;
LABEL_36:
      _os_log_error_impl(&dword_19BD16000, v17, OS_LOG_TYPE_ERROR, "NEVirtualInterface Failure in %s at line %d.", buf, 0x12u);
      goto LABEL_37;
    }
    goto LABEL_37;
  }
  v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v20 = CFUUIDCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  if (!v20)
  {
    v17 = ne_log_obj();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v26 = "NEVirtualInterfaceCreateFromSocketAndName";
      v27 = 1024;
      v28 = 1604;
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  v21 = v20;
  *(_QWORD *)(v12 + 488) = CFUUIDCreateString(v19, v20);
  CFRelease(v21);
  if (!*(_QWORD *)(v12 + 488))
  {
    v17 = ne_log_obj();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v26 = "NEVirtualInterfaceCreateFromSocketAndName";
      v27 = 1024;
      v28 = 1610;
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if (a5)
  {
    *v13 = a5;
    dispatch_retain(a5);
  }
  *(_QWORD *)(v12 + 24) = a6;
  v22 = ne_log_obj();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    v26 = (const char *)(v12 + 265);
    _os_log_impl(&dword_19BD16000, v22, OS_LOG_TYPE_DEFAULT, "Created a new NEVirtualInterface \"%s\" from socket", buf, 0xCu);
  }
  return v12;
}

const __CFArray *NEVirtualInterfaceGetNexusInstance(uint64_t a1, unsigned __int8 *a2)
{
  const __CFArray *result;
  const __CFArray *v4;
  CFIndex Count;
  const __CFUUID *ValueAtIndex;
  CFIndex v7;
  NSObject *v8;
  NSObject *v9;
  _BYTE v10[18];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v9 = ne_log_obj();
    result = (const __CFArray *)os_log_type_enabled(v9, OS_LOG_TYPE_FAULT);
    if (!(_DWORD)result)
      return result;
    *(_DWORD *)v10 = 136315138;
    *(_QWORD *)&v10[4] = "NEVirtualInterfaceGetNexusInstance";
    _os_log_fault_impl(&dword_19BD16000, v9, OS_LOG_TYPE_FAULT, "%s called with null interface", v10, 0xCu);
    return 0;
  }
  result = NEVirtualInterfaceCopyNexusInstances(a1, 1u);
  if (result)
  {
    v4 = result;
    Count = CFArrayGetCount(result);
    if (Count == 1)
    {
      ValueAtIndex = (const __CFUUID *)CFArrayGetValueAtIndex(v4, 0);
      *(CFUUIDBytes *)v10 = CFUUIDGetUUIDBytes(ValueAtIndex);
      uuid_copy(a2, v10);
      CFRelease(v4);
      return (const __CFArray *)1;
    }
    v7 = Count;
    v8 = ne_log_obj();
    result = (const __CFArray *)os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      *(_QWORD *)v10 = 0x104000200;
      *(_WORD *)&v10[8] = 2048;
      *(_QWORD *)&v10[10] = v7;
      _os_log_error_impl(&dword_19BD16000, v8, OS_LOG_TYPE_ERROR, "Received unexpected number of channels (%d != %ld)", v10, 0x12u);
      return 0;
    }
  }
  return result;
}

__CFArray *NEVirtualInterfaceCopyNexusInstances(uint64_t a1, socklen_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  NSObject *v7;
  int v8;
  const char *v9;
  NSObject *v10;
  uint32_t v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  char *v15;
  char *v16;
  NSObject *v17;
  NSObject *v18;
  __CFArray *Mutable;
  const __CFAllocator *v21;
  uint64_t v22;
  char *v23;
  CFUUIDRef v24;
  CFUUIDRef v25;
  NSObject *v26;
  int v27;
  NSObject *v28;
  socklen_t v29;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v28 = ne_log_obj();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      v31 = "NEVirtualInterfaceCopyNexusInstances";
      _os_log_fault_impl(&dword_19BD16000, v28, OS_LOG_TYPE_FAULT, "%s called with null interface", buf, 0xCu);
    }
    return 0;
  }
  v4 = *(_QWORD *)(a1 + 256);
  if (v4 != 1)
  {
    if (v4 == 2)
    {
      v5 = *(_DWORD *)(a1 + 296);
      v6 = 9;
      goto LABEL_17;
    }
    v12 = ne_log_obj();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v31 = "NEVirtualInterfaceGetEnableChannelOption";
      v32 = 1024;
      v33 = 1639;
      _os_log_error_impl(&dword_19BD16000, v12, OS_LOG_TYPE_ERROR, "NEVirtualInterface Failure in %s at line %d.", buf, 0x12u);
    }
    if ((unint64_t)(*(_QWORD *)(a1 + 256) - 1) >= 2)
    {
      v13 = ne_log_obj();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v31 = "NEVirtualInterfaceGetChannelOption";
        v32 = 1024;
        v33 = 1655;
        _os_log_error_impl(&dword_19BD16000, v13, OS_LOG_TYPE_ERROR, "NEVirtualInterface Failure in %s at line %d.", buf, 0x12u);
      }
    }
    v14 = ne_log_obj();
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buf = 136315394;
    v31 = "NEVirtualInterfaceCopyNexusInstances";
    v32 = 1024;
    v33 = 1704;
    v9 = "NEVirtualInterface Failure in %s at line %d.";
    v10 = v14;
    v11 = 18;
    goto LABEL_15;
  }
  v5 = *(_DWORD *)(a1 + 296);
  v29 = a2;
  if (setsockopt(v5, 2, 17, &v29, 4u))
  {
    v7 = ne_log_obj();
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      return 0;
    v8 = *__error();
    *(_DWORD *)buf = 67109120;
    LODWORD(v31) = v8;
    v9 = "setsockopt ENABLE_CHANNEL failed (errno = %d)\n";
    v10 = v7;
    v11 = 8;
LABEL_15:
    _os_log_error_impl(&dword_19BD16000, v10, OS_LOG_TYPE_ERROR, v9, buf, v11);
    return 0;
  }
  v6 = 18;
LABEL_17:
  v29 = 16 * a2;
  v15 = (char *)malloc_type_calloc(1uLL, 16 * a2, 0xBAEA5D18uLL);
  if (!v15)
  {
    v18 = ne_log_obj();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_19BD16000, v18, OS_LOG_TYPE_FAULT, "calloc failed", buf, 2u);
    }
    NEVirtualInterfaceDisableChannel(a1);
    return 0;
  }
  v16 = v15;
  if (getsockopt(v5, 2, v6, v15, &v29))
  {
    v17 = ne_log_obj();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v27 = *__error();
      *(_DWORD *)buf = 67109120;
      LODWORD(v31) = v27;
      _os_log_error_impl(&dword_19BD16000, v17, OS_LOG_TYPE_ERROR, "getsockopt GET_CHANNEL_UUID failed (errno %d)\n", buf, 8u);
    }
    NEVirtualInterfaceDisableChannel(a1);
    free(v16);
    return 0;
  }
  *(_BYTE *)(a1 + 312) |= 0x10u;
  v21 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (a2)
  {
    v22 = a2;
    v23 = v16 + 8;
    do
    {
      v24 = CFUUIDCreateFromUUIDBytes(v21, *(CFUUIDBytes *)(v23 - 8));
      if (v24)
      {
        v25 = v24;
        CFArrayAppendValue(Mutable, v24);
        CFRelease(v25);
      }
      v23 += 16;
      --v22;
    }
    while (v22);
  }
  v26 = ne_log_obj();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    v31 = (const char *)Mutable;
    _os_log_impl(&dword_19BD16000, v26, OS_LOG_TYPE_INFO, "nexus instances created: %@", buf, 0xCu);
  }
  free(v16);
  return Mutable;
}

uint64_t NEVirtualInterfaceCreateChannel(uint64_t a1)
{
  uint64_t result;
  NSObject *v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  uint32_t v8;
  int v9;
  NSObject *v10;
  _DWORD v11[4];
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v10 = ne_log_obj();
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      return 0;
    LODWORD(v12) = 136315138;
    *(_QWORD *)((char *)&v12 + 4) = "NEVirtualInterfaceCreateChannel";
    v5 = "%s called with null interface";
    v6 = (uint8_t *)&v12;
    v7 = v10;
    v8 = 12;
    goto LABEL_11;
  }
  v12 = 0uLL;
  if (!NEVirtualInterfaceGetNexusInstance(a1, (unsigned __int8 *)&v12))
  {
    v4 = ne_log_obj();
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      return 0;
    LOWORD(v11[0]) = 0;
    v5 = "NEVirtualInterfaceGetNexusInstance failed";
    v6 = (uint8_t *)v11;
    v7 = v4;
    v8 = 2;
LABEL_11:
    _os_log_fault_impl(&dword_19BD16000, v7, OS_LOG_TYPE_FAULT, v5, v6, v8);
    return 0;
  }
  result = nw_channel_create_with_nexus();
  if (result)
    return result;
  v3 = ne_log_obj();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v9 = *__error();
    v11[0] = 67109120;
    v11[1] = v9;
    _os_log_error_impl(&dword_19BD16000, v3, OS_LOG_TYPE_ERROR, "nw_channel_create_with_nexus failed (errno %d)", (uint8_t *)v11, 8u);
  }
  NEVirtualInterfaceDisableChannel(a1);
  return 0;
}

BOOL NEVirtualInterfaceEnableFlowswitch(uint64_t a1, int a2)
{
  int v3;
  uint64_t v4;
  int v5;
  _BOOL8 result;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  uint32_t v10;
  NSObject *v11;
  int v12;
  NSObject *v13;
  _BOOL4 v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v13 = ne_log_obj();
    result = os_log_type_enabled(v13, OS_LOG_TYPE_FAULT);
    if (!result)
      return result;
    *(_DWORD *)buf = 136315138;
    v16 = "NEVirtualInterfaceEnableFlowswitch";
    _os_log_fault_impl(&dword_19BD16000, v13, OS_LOG_TYPE_FAULT, "%s called with null interface", buf, 0xCu);
    return 0;
  }
  v3 = *(_DWORD *)(a1 + 296);
  v14 = a2 != 0;
  v4 = *(_QWORD *)(a1 + 256);
  if (v4 == 1)
  {
    v5 = 19;
  }
  else
  {
    if (v4 != 2)
    {
      v7 = ne_log_obj();
      result = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
      *(_DWORD *)buf = 136315394;
      v16 = "NEVirtualInterfaceEnableFlowswitch";
      v17 = 1024;
      v18 = 1909;
      v8 = "NEVirtualInterface Failure in %s at line %d.";
      v9 = v7;
      v10 = 18;
      goto LABEL_13;
    }
    v5 = 10;
  }
  if (setsockopt(v3, 2, v5, &v14, 4u) != -1)
    return 1;
  v11 = ne_log_obj();
  result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v12 = *__error();
    *(_DWORD *)buf = 67109120;
    LODWORD(v16) = v12;
    v8 = "setsockopt ENABLE_FLOWSWITCH failed (errno = %d)\n";
    v9 = v11;
    v10 = 8;
LABEL_13:
    _os_log_error_impl(&dword_19BD16000, v9, OS_LOG_TYPE_ERROR, v8, buf, v10);
    return 0;
  }
  return result;
}

BOOL NEVirtualInterfaceNameIsVPN(uint64_t a1, int a2)
{
  int v4;
  int v5;
  NSObject *v6;
  _BOOL8 result;
  NSObject *v8;
  uint8_t buf[4];
  uint64_t v10;
  uint8_t v11[16];
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v8 = ne_log_obj();
    result = os_log_type_enabled(v8, OS_LOG_TYPE_FAULT);
    if (!result)
      return result;
    *(_DWORD *)v11 = 136315138;
    *(_QWORD *)&v11[4] = "NEVirtualInterfaceNameIsVPN";
    _os_log_fault_impl(&dword_19BD16000, v8, OS_LOG_TYPE_FAULT, "%s called with null interfaceName", v11, 0xCu);
    return 0;
  }
  v4 = socket(30, 2, 0);
  if (v4 < 0)
    return 0;
  v5 = v4;
  *(_OWORD *)v11 = 0u;
  v12 = 0u;
  __strlcpy_chk();
  LOBYTE(v12) = a2 != 0;
  if (ioctl(v5, 0xC02069DFuLL, v11) < 0)
  {
    v6 = ne_log_obj();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v10 = a1;
      _os_log_error_impl(&dword_19BD16000, v6, OS_LOG_TYPE_ERROR, "Failed to set is VPN flag for interface %s", buf, 0xCu);
    }
  }
  close(v5);
  return 1;
}

BOOL NEVirtualInterfaceIsVPN(uint64_t a1, int a2)
{
  NSObject *v3;
  int v4;
  const char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (a1)
    return NEVirtualInterfaceNameIsVPN(a1 + 265, a2);
  v3 = ne_log_obj();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
  {
    v4 = 136315138;
    v5 = "NEVirtualInterfaceIsVPN";
    _os_log_fault_impl(&dword_19BD16000, v3, OS_LOG_TYPE_FAULT, "%s called with null interface", (uint8_t *)&v4, 0xCu);
  }
  return 0;
}

void NEVirtualInterfaceInvalidate(uint64_t a1)
{
  NSObject *v1;

  if (a1 && (*(_BYTE *)(a1 + 312) & 0x20) == 0)
  {
    *(_BYTE *)(a1 + 312) |= 0x20u;
    v1 = *(NSObject **)(a1 + 64);
    if (v1)
    {
      *(_QWORD *)(a1 + 64) = 0;
      if (*(_BYTE *)(a1 + 74))
      {
        *(_BYTE *)(a1 + 74) = 0;
        dispatch_resume(v1);
      }
      dispatch_source_cancel(v1);
    }
    else
    {
      NEVirtualInterfaceTearDown(a1);
    }
  }
}

BOOL NEVirtualInterfaceSetReadIPPacketHandler(_QWORD *a1, const void *a2)
{
  return NEVirtualInterfaceSetBothReadIPPacketHandlers(a1, a2, 0, 1u);
}

BOOL NEVirtualInterfaceSetBothReadIPPacketHandlers(_QWORD *a1, const void *a2, const void *a3, unsigned int a4)
{
  NSObject *v5;
  _BOOL8 result;
  const char *v7;
  NSObject *v10;
  NSObject *v11;
  uint32_t v12;
  const void *v13;
  const void *v14;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v5 = ne_log_obj();
    result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v15 = 136315394;
    v16 = "NEVirtualInterfaceSetBothReadIPPacketHandlers";
    v17 = 1024;
    v18 = 2398;
    v7 = "NEVirtualInterface Failure in %s at line %d.";
    goto LABEL_27;
  }
  if (a1[32] == 2)
  {
    v5 = ne_log_obj();
    result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v15 = 136315394;
    v16 = "NEVirtualInterfaceSetBothReadIPPacketHandlers";
    v17 = 1024;
    v18 = 2402;
    v7 = "NEVirtualInterface Failure in %s at line %d.";
LABEL_27:
    v11 = v5;
    v12 = 18;
LABEL_28:
    _os_log_error_impl(&dword_19BD16000, v11, OS_LOG_TYPE_ERROR, v7, (uint8_t *)&v15, v12);
    return 0;
  }
  if (!a4)
  {
    v5 = ne_log_obj();
    result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v15 = 136315394;
    v16 = "NEVirtualInterfaceSetBothReadIPPacketHandlers";
    v17 = 1024;
    v18 = 2406;
    v7 = "NEVirtualInterface Failure in %s at line %d.";
    goto LABEL_27;
  }
  if (a2 && a3)
  {
    v10 = ne_log_obj();
    result = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v15 = 136315138;
    v16 = "NEVirtualInterfaceSetBothReadIPPacketHandlers";
    v7 = "%s: Error: cannot set both single and mutliple packet handlers";
    v11 = v10;
    v12 = 12;
    goto LABEL_28;
  }
  if (!NEVirtualInterfaceAdjustReadBufferSize((uint64_t)a1, a4))
  {
    v5 = ne_log_obj();
    result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v15 = 136315394;
    v16 = "NEVirtualInterfaceSetBothReadIPPacketHandlers";
    v17 = 1024;
    v18 = 2415;
    v7 = "NEVirtualInterface Failure in %s at line %d.";
    goto LABEL_27;
  }
  v13 = (const void *)a1[4];
  if (v13)
  {
    _Block_release(v13);
    a1[4] = 0;
  }
  v14 = (const void *)a1[6];
  if (v14)
  {
    _Block_release(v14);
    a1[6] = 0;
  }
  if (a2)
    a1[4] = _Block_copy(a2);
  if (a3)
    a1[6] = _Block_copy(a3);
  return !a1[2] || NEVirtualInterfaceCreateReadSource((uint64_t)a1);
}

BOOL NEVirtualInterfaceCreateReadSource(uint64_t a1)
{
  NSObject *v1;
  _BOOL8 result;
  const char *v3;
  NSObject *v4;
  uint32_t v5;
  NSObject *v7;
  int v8;
  dispatch_source_t v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  _QWORD v13[5];
  _QWORD handler[6];
  int v15;
  uint8_t buf[4];
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 256) == 2)
  {
    v1 = ne_log_obj();
    result = os_log_type_enabled(v1, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    *(_WORD *)buf = 0;
    v3 = "Invalid interface type for creating read source\n";
LABEL_4:
    v4 = v1;
    v5 = 2;
    goto LABEL_5;
  }
  v7 = *(NSObject **)(a1 + 64);
  if (v7)
  {
    v8 = *(unsigned __int8 *)(a1 + 74);
    *(_DWORD *)(a1 + 208) = *(_DWORD *)(a1 + 96);
    if (!v8)
      return 1;
    goto LABEL_12;
  }
  v15 = 1;
  if (ioctl(*(_DWORD *)(a1 + 296), 0x8004667EuLL, &v15) != -1)
  {
    v9 = dispatch_source_create(MEMORY[0x1E0C80DB8], *(int *)(a1 + 296), 0, *(dispatch_queue_t *)(a1 + 16));
    if (!v9)
    {
      v1 = ne_log_obj();
      if (!os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
        return 0;
      *(_WORD *)buf = 0;
      v3 = "NEVirtualInterface could not create read source\n";
      goto LABEL_4;
    }
    v7 = v9;
    CFRetain((CFTypeRef)a1);
    v10 = MEMORY[0x1E0C809B0];
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 0x40000000;
    handler[2] = __NEVirtualInterfaceCreateReadSource_block_invoke;
    handler[3] = &__block_descriptor_tmp_56;
    handler[4] = a1;
    handler[5] = v7;
    dispatch_source_set_cancel_handler(v7, handler);
    v13[0] = v10;
    v13[1] = 0x40000000;
    v13[2] = __NEVirtualInterfaceCreateReadSource_block_invoke_2;
    v13[3] = &__block_descriptor_tmp_57;
    v13[4] = a1;
    dispatch_source_set_event_handler(v7, v13);
    *(_QWORD *)(a1 + 64) = v7;
    *(_DWORD *)(a1 + 208) = *(_DWORD *)(a1 + 96);
LABEL_12:
    *(_BYTE *)(a1 + 74) = 0;
    dispatch_resume(v7);
    return 1;
  }
  v11 = ne_log_obj();
  if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    return 0;
  v12 = *__error();
  *(_DWORD *)buf = 67109120;
  v17 = v12;
  v3 = "FIONBIO failed: %d\n";
  v4 = v11;
  v5 = 8;
LABEL_5:
  _os_log_error_impl(&dword_19BD16000, v4, OS_LOG_TYPE_ERROR, v3, buf, v5);
  return 0;
}

BOOL NEVirtualInterfaceReadMultiplePackets(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL4 v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;

  v3 = *(_DWORD *)(a1 + 96);
  if (v3 >= a2)
    v4 = a2;
  else
    v4 = v3;
  v5 = *(_QWORD *)(a1 + 112);
  v6 = *(_QWORD *)(a1 + 256);
  bzero(*(void **)(a1 + 200), 56 * v4);
  if (v6 == 1)
  {
    bzero(*(void **)(a1 + 104), 4 * v4);
    v7 = 1;
    v8 = 4;
    if (v5)
    {
LABEL_6:
      v8 |= 0x10uLL;
      bzero(*(void **)(a1 + 112), 16 * v4);
      v9 = v7++;
      goto LABEL_9;
    }
  }
  else
  {
    v8 = 0;
    v7 = 0;
    if (v5)
      goto LABEL_6;
  }
  v9 = -1;
LABEL_9:
  if ((_DWORD)v4)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = v7 + 1;
    v14 = *(_QWORD *)(a1 + 192);
    v15 = (int *)(*(_QWORD *)(a1 + 200) + 24);
    v16 = *(uint64_t **)(a1 + 80);
    v17 = *(_QWORD *)(a1 + 88);
    do
    {
      v18 = v10;
      v19 = (_QWORD *)(v14 + 16 * v10);
      *((_QWORD *)v15 - 1) = v19;
      *v15 = v13;
      if (v6 == 1)
      {
        *v19 = *(_QWORD *)(a1 + 104) + v12;
        *(_QWORD *)(v14 + 16 * v18 + 8) = 4;
      }
      if ((v9 & 0x80000000) == 0)
      {
        v20 = (_QWORD *)(v14 + 16 * (v9 + v18));
        *v20 = *(_QWORD *)(a1 + 112) + v11;
        v20[1] = 16;
      }
      v21 = *v16++;
      v22 = (_QWORD *)(v14 + 16 * (v7 + v18));
      v12 += 4;
      *v22 = v21;
      v22[1] = v17;
      v11 += 16;
      v15 += 14;
      v10 = v18 + v13;
    }
    while (4 * v4 != v12);
  }
  v23 = recvmsg_x();
  v24 = v23;
  if (*(_QWORD *)(a1 + 32))
    v25 = 1;
  else
    v25 = *(_QWORD *)(a1 + 48) != 0;
  if (*(_QWORD *)(a1 + 40))
  {
    v26 = 1;
    if (v23 < 0)
      return v24 >= 0;
  }
  else
  {
    v26 = *(_QWORD *)(a1 + 56) != 0;
    if (v23 < 0)
      return v24 >= 0;
  }
  if (v25 || v26)
  {
    v27 = v23;
    bzero(*(void **)(a1 + 168), 28 * v23);
    bzero(*(void **)(a1 + 176), 28 * v24);
    bzero(*(void **)(a1 + 184), v24);
    if ((_DWORD)v24)
    {
      v28 = 0;
      v29 = 0;
      v30 = 48;
      while (1)
      {
        v31 = *(_QWORD *)(*(_QWORD *)(a1 + 200) + v30);
        if (v31 && v31 >= v8)
          break;
        *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4 * v29) = 0;
        *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8 * v29) = 0;
        *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * v29) = 0;
LABEL_43:
        ++v28;
        v30 += 56;
        if (v27 == v28)
          goto LABEL_49;
      }
      v33 = v31 - v8;
      v34 = *(_QWORD *)(a1 + 136);
      *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * v29) = v33;
      *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4 * v29) = bswap32(*(_DWORD *)(*(_QWORD *)(a1 + 104) + 4 * v28));
      *(_QWORD *)(v34 + 8 * v29) = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v28);
      if (!v26)
      {
LABEL_40:
        v47 = *(_QWORD *)(a1 + 32);
        if (v47)
          (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(v47 + 16))(v47, a1, *(unsigned int *)(*(_QWORD *)(a1 + 104) + 4 * v28), *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v28), *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * v28), *(_QWORD *)(a1 + 24));
        v29 = (v29 + 1);
        goto LABEL_43;
      }
      v35 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4 * v29);
      if (v35 == 30)
      {
        v41 = *(_QWORD *)(*(_QWORD *)(a1 + 152) + 8 * v29);
        v42 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v29);
        v43 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v29);
        *(_WORD *)v42 = 7708;
        *(_WORD *)v41 = 7708;
        *(_OWORD *)(v41 + 8) = *(_OWORD *)(v43 + 8);
        *(_OWORD *)(v42 + 8) = *(_OWORD *)(v43 + 24);
        v39 = (_BYTE *)(v43 + 6);
        v40 = 40;
      }
      else
      {
        if (v35 != 2)
        {
          v40 = 0;
LABEL_38:
          *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v29) = *(_QWORD *)(*(_QWORD *)(a1 + 136)
                                                                                   + 8 * v29)
                                                                       + v40;
          v44 = v33 - v40;
          v45 = *(_QWORD *)(a1 + 128);
          *(_QWORD *)(v45 + 8 * v29) = v44;
          v46 = *(_QWORD *)(a1 + 40);
          if (v46)
            (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v46 + 16))(v46, a1, *(_QWORD *)(*(_QWORD *)(a1 + 152) + 8 * v28), *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v28), *(unsigned __int8 *)(*(_QWORD *)(a1 + 184) + v28), *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v28), *(_QWORD *)(v45 + 8 * v28), *(_QWORD *)(a1 + 24));
          goto LABEL_40;
        }
        v36 = *(_QWORD *)(*(_QWORD *)(a1 + 152) + 8 * v29);
        v37 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v29);
        v38 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v29);
        *(_WORD *)v37 = 528;
        *(_WORD *)v36 = 528;
        *(_DWORD *)(v36 + 4) = *(_DWORD *)(v38 + 12);
        *(_DWORD *)(v37 + 4) = *(_DWORD *)(v38 + 16);
        v39 = (_BYTE *)(v38 + 9);
        v40 = 20;
      }
      *(_BYTE *)(*(_QWORD *)(a1 + 184) + v29) = *v39;
      goto LABEL_38;
    }
    v29 = 0;
LABEL_49:
    v49 = *(_QWORD *)(a1 + 56);
    if (v49)
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD))(v49 + 16))(v49, a1, *(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), v29, *(_QWORD *)(a1 + 24));
    v50 = *(_QWORD *)(a1 + 48);
    if (v50)
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD))(v50 + 16))(v50, a1, *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), v29, *(_QWORD *)(a1 + 24));
  }
  else if (*(_BYTE *)(a1 + 74))
  {
    v48 = *(NSObject **)(a1 + 64);
    if (v48)
    {
      *(_DWORD *)(a1 + 208) = *(_DWORD *)(a1 + 96);
      dispatch_resume(v48);
      *(_BYTE *)(a1 + 74) = 0;
    }
  }
  return v24 >= 0;
}

BOOL NEVirtualInterfaceSetReadMultipleIPPacketsHandler(_QWORD *a1, const void *a2)
{
  _BOOL8 result;
  NSObject *v5;
  unsigned int v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = 0;
  if (NEVirtualInterfaceGetMaxPendingPackets((uint64_t)a1, (int *)&v6))
    return NEVirtualInterfaceSetBothReadIPPacketHandlers(a1, 0, a2, v6);
  v5 = ne_log_obj();
  result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)buf = 136315394;
    v8 = "NEVirtualInterfaceSetReadMultipleIPPacketsHandler";
    v9 = 1024;
    v10 = 2453;
    _os_log_error_impl(&dword_19BD16000, v5, OS_LOG_TYPE_ERROR, "NEVirtualInterface Failure in %s at line %d.", buf, 0x12u);
    return 0;
  }
  return result;
}

BOOL NEVirtualInterfaceGetMaxPendingPackets(uint64_t a1, int *a2)
{
  uint64_t v3;
  int v4;
  _BOOL8 result;
  NSObject *v6;
  const char *v7;
  int v8;
  int v9;
  NSObject *v10;
  char *v11;
  NSObject *v12;
  uint32_t v13;
  NSObject *v14;
  socklen_t v15;
  int v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v6 = ne_log_obj();
    result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    *(_DWORD *)buf = 136315394;
    v18 = "NEVirtualInterfaceGetMaxPendingPackets";
    v19 = 1024;
    LODWORD(v20) = 3139;
    v7 = "NEVirtualInterface Failure in %s at line %d.";
LABEL_21:
    v12 = v6;
    v13 = 18;
    goto LABEL_22;
  }
  v3 = *(_QWORD *)(a1 + 256);
  if (v3 != 1)
  {
    if (v3 == 3)
    {
      if (!a2)
        return 1;
      v4 = 64;
LABEL_6:
      *a2 = v4;
      return 1;
    }
    v6 = ne_log_obj();
    result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    *(_DWORD *)buf = 136315394;
    v18 = "NEVirtualInterfaceGetMaxPendingPackets";
    v19 = 1024;
    LODWORD(v20) = 3151;
    v7 = "NEVirtualInterface Failure in %s at line %d.";
    goto LABEL_21;
  }
  v15 = 4;
  v16 = 0;
  v8 = getsockopt(*(_DWORD *)(a1 + 296), 2, 16, &v16, &v15);
  if (v8)
  {
    v9 = v8;
    v10 = ne_log_obj();
    result = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v11 = strerror(v9);
    *(_DWORD *)buf = 136315394;
    v18 = "NEVirtualInterfaceGetMaxPendingPackets";
    v19 = 2080;
    v20 = v11;
    v7 = "%s failed to get max pending packets: %s\n";
    v12 = v10;
    v13 = 22;
LABEL_22:
    _os_log_error_impl(&dword_19BD16000, v12, OS_LOG_TYPE_ERROR, v7, buf, v13);
    return 0;
  }
  if (v15 == 4)
  {
    if (!a2)
      return 1;
    v4 = v16;
    goto LABEL_6;
  }
  v14 = ne_log_obj();
  result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)buf = 136315138;
    v18 = "NEVirtualInterfaceGetMaxPendingPackets";
    v7 = "%s failed to get correct output length when getting max pending packets\n";
    v12 = v14;
    v13 = 12;
    goto LABEL_22;
  }
  return result;
}

BOOL NEVirtualInterfaceSetReadIPPayloadHandler(_QWORD *a1, const void *a2)
{
  return NEVirtualInterfaceSetBothReadIPPayloadHandler(a1, a2, 0, 1u);
}

BOOL NEVirtualInterfaceSetBothReadIPPayloadHandler(_QWORD *a1, const void *a2, const void *a3, unsigned int a4)
{
  NSObject *v5;
  _BOOL8 result;
  const char *v7;
  NSObject *v10;
  NSObject *v11;
  uint32_t v12;
  const void *v13;
  const void *v14;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v5 = ne_log_obj();
    result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v15 = 136315394;
    v16 = "NEVirtualInterfaceSetBothReadIPPayloadHandler";
    v17 = 1024;
    v18 = 2466;
    v7 = "NEVirtualInterface Failure in %s at line %d.";
    goto LABEL_27;
  }
  if (a1[32] == 2)
  {
    v5 = ne_log_obj();
    result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v15 = 136315394;
    v16 = "NEVirtualInterfaceSetBothReadIPPayloadHandler";
    v17 = 1024;
    v18 = 2470;
    v7 = "NEVirtualInterface Failure in %s at line %d.";
LABEL_27:
    v11 = v5;
    v12 = 18;
LABEL_28:
    _os_log_error_impl(&dword_19BD16000, v11, OS_LOG_TYPE_ERROR, v7, (uint8_t *)&v15, v12);
    return 0;
  }
  if (!a4)
  {
    v5 = ne_log_obj();
    result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v15 = 136315394;
    v16 = "NEVirtualInterfaceSetBothReadIPPayloadHandler";
    v17 = 1024;
    v18 = 2474;
    v7 = "NEVirtualInterface Failure in %s at line %d.";
    goto LABEL_27;
  }
  if (a2 && a3)
  {
    v10 = ne_log_obj();
    result = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v15 = 136315138;
    v16 = "NEVirtualInterfaceSetBothReadIPPayloadHandler";
    v7 = "%s: Error: cannot set both single and mutliple payload handlers";
    v11 = v10;
    v12 = 12;
    goto LABEL_28;
  }
  if (!NEVirtualInterfaceAdjustReadBufferSize((uint64_t)a1, a4))
  {
    v5 = ne_log_obj();
    result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v15 = 136315394;
    v16 = "NEVirtualInterfaceSetBothReadIPPayloadHandler";
    v17 = 1024;
    v18 = 2483;
    v7 = "NEVirtualInterface Failure in %s at line %d.";
    goto LABEL_27;
  }
  v13 = (const void *)a1[5];
  if (v13)
  {
    _Block_release(v13);
    a1[5] = 0;
  }
  v14 = (const void *)a1[7];
  if (v14)
  {
    _Block_release(v14);
    a1[7] = 0;
  }
  if (a2)
    a1[5] = _Block_copy(a2);
  if (a3)
    a1[7] = _Block_copy(a3);
  return !a1[2] || NEVirtualInterfaceCreateReadSource((uint64_t)a1);
}

BOOL NEVirtualInterfaceSetReadMultipleIPPayloadsHandler(_QWORD *a1, const void *a2)
{
  _BOOL8 result;
  NSObject *v5;
  unsigned int v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = 0;
  if (NEVirtualInterfaceGetMaxPendingPackets((uint64_t)a1, (int *)&v6))
    return NEVirtualInterfaceSetBothReadIPPayloadHandler(a1, 0, a2, v6);
  v5 = ne_log_obj();
  result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)buf = 136315394;
    v8 = "NEVirtualInterfaceSetReadMultipleIPPayloadsHandler";
    v9 = 1024;
    v10 = 2521;
    _os_log_error_impl(&dword_19BD16000, v5, OS_LOG_TYPE_ERROR, "NEVirtualInterface Failure in %s at line %d.", buf, 0x12u);
    return 0;
  }
  return result;
}

uint64_t NEVirtualInterfaceSetReadAutomatically(uint64_t result, char a2)
{
  if (result)
    *(_BYTE *)(result + 73) = a2;
  return result;
}

uint64_t NEVirtualInterfaceGetReadAutomatically(uint64_t a1)
{
  uint64_t result;
  NSObject *v2;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (a1)
    return *(unsigned __int8 *)(a1 + 73);
  v2 = ne_log_obj();
  result = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    v3 = 136315394;
    v4 = "NEVirtualInterfaceGetReadAutomatically";
    v5 = 1024;
    v6 = 2537;
    _os_log_error_impl(&dword_19BD16000, v2, OS_LOG_TYPE_ERROR, "NEVirtualInterface Failure in %s at line %d.", (uint8_t *)&v3, 0x12u);
    return 0;
  }
  return result;
}

void NEVirtualInterfaceReadyToReadMultiple(uint64_t a1, unsigned int a2)
{
  NSObject *v2;
  NSObject *v3;
  _QWORD v4[5];
  unsigned int v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v2 = ne_log_obj();
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      return;
    *(_DWORD *)buf = 136315394;
    v7 = "NEVirtualInterfaceReadyToReadMultiple";
    v8 = 1024;
    v9 = 2546;
    goto LABEL_14;
  }
  if (*(_QWORD *)(a1 + 256) == 2)
  {
    v2 = ne_log_obj();
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      return;
    *(_DWORD *)buf = 136315394;
    v7 = "NEVirtualInterfaceReadyToReadMultiple";
    v8 = 1024;
    v9 = 2550;
LABEL_14:
    _os_log_error_impl(&dword_19BD16000, v2, OS_LOG_TYPE_ERROR, "NEVirtualInterface Failure in %s at line %d.", buf, 0x12u);
    return;
  }
  if (!a2)
  {
    v2 = ne_log_obj();
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      return;
    *(_DWORD *)buf = 136315394;
    v7 = "NEVirtualInterfaceReadyToReadMultiple";
    v8 = 1024;
    v9 = 2554;
    goto LABEL_14;
  }
  v3 = *(NSObject **)(a1 + 16);
  if (v3)
  {
    if (*(_QWORD *)(a1 + 64))
    {
      if (*(_BYTE *)(a1 + 74))
      {
        v4[0] = MEMORY[0x1E0C809B0];
        v4[1] = 0x40000000;
        v4[2] = __NEVirtualInterfaceReadyToReadMultiple_block_invoke;
        v4[3] = &__block_descriptor_tmp_22752;
        v4[4] = a1;
        v5 = a2;
        dispatch_async(v3, v4);
      }
    }
  }
  else
  {
    NEVirtualInterfaceReadMultiplePackets(a1, a2);
  }
}

void NEVirtualInterfaceReadyToRead(uint64_t a1)
{
  NEVirtualInterfaceReadyToReadMultiple(a1, 1u);
}

uint64_t NEVirtualInterfaceWriteIPPacket(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;

  v7 = a2;
  v5 = a4;
  v6 = a3;
  return NEVirtualInterfaceWriteMultipleIPPackets(a1, (uint64_t)&v7, (uint64_t)&v6, (uint64_t)&v5, 1u);
}

uint64_t NEVirtualInterfaceWriteMultipleIPPackets(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v6;
  NSObject *v7;
  unsigned int v12;
  _BOOL4 v13;
  int v14;
  int v15;
  int v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int *v20;
  int v21;
  uint64_t v22;
  _BOOL4 v23;
  int *v24;
  uint64_t v25;
  char *v26;
  unsigned __int8 **v27;
  char *v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  NSObject *v32;
  unsigned int v33;
  NSObject *v35;
  NSObject *v36;
  int *v37;
  char *v38;
  int *v39;
  unsigned int v40;
  _BOOL4 v41;
  uuid_t uu;
  uint8_t buf[4];
  const char *v44;
  __int16 v45;
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v7 = ne_log_obj();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v44 = "NEVirtualInterfaceWriteMultipleIPPackets";
      v45 = 1024;
      v46 = 2592;
      goto LABEL_58;
    }
    return 0;
  }
  v6 = *(_QWORD *)(a1 + 256);
  if (v6 == 2)
  {
    v7 = ne_log_obj();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v44 = "NEVirtualInterfaceWriteMultipleIPPackets";
      v45 = 1024;
      v46 = 2596;
LABEL_58:
      _os_log_error_impl(&dword_19BD16000, v7, OS_LOG_TYPE_ERROR, "NEVirtualInterface Failure in %s at line %d.", buf, 0x12u);
      return 0;
    }
    return 0;
  }
  if (!a2 && v6 == 1)
  {
    v7 = ne_log_obj();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v44 = "NEVirtualInterfaceWriteMultipleIPPackets";
      v45 = 1024;
      v46 = 2600;
      goto LABEL_58;
    }
    return 0;
  }
  if (!a3)
  {
    v7 = ne_log_obj();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v44 = "NEVirtualInterfaceWriteMultipleIPPackets";
      v45 = 1024;
      v46 = 2604;
      goto LABEL_58;
    }
    return 0;
  }
  if (!a4)
  {
    v7 = ne_log_obj();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v44 = "NEVirtualInterfaceWriteMultipleIPPackets";
      v45 = 1024;
      v46 = 2608;
      goto LABEL_58;
    }
    return 0;
  }
  if ((*(_DWORD *)(a1 + 296) & 0x80000000) != 0)
  {
    v7 = ne_log_obj();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v44 = "NEVirtualInterfaceWriteMultipleIPPackets";
      v45 = 1024;
      v46 = 2612;
      goto LABEL_58;
    }
    return 0;
  }
  if (!a5)
  {
    v7 = ne_log_obj();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v44 = "NEVirtualInterfaceWriteMultipleIPPackets";
      v45 = 1024;
      v46 = 2616;
      goto LABEL_58;
    }
    return 0;
  }
  v12 = *(_DWORD *)(a1 + 212);
  if (!v12)
  {
    NEVirtualInterfaceAdjustSendCount(a1, 0x10u);
    v12 = *(_DWORD *)(a1 + 212);
  }
  if (a2)
    v13 = *(_QWORD *)(a1 + 256) == 1;
  else
    v13 = 0;
  v14 = *(unsigned __int8 *)(a1 + 72);
  v41 = v13;
  if (*(_BYTE *)(a1 + 72))
    v15 = v13 + 1;
  else
    v15 = v13;
  v16 = v15 + 1;
  if (v12 <= a5)
  {
    v19 = (char *)malloc_type_malloc(16 * v16 * a5, 0x1080040FC6463CFuLL);
    if (!v19)
    {
      v7 = ne_log_obj();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v44 = "NEVirtualInterfaceWriteMultipleIPPackets";
        v45 = 1024;
        v46 = 2648;
        goto LABEL_58;
      }
      return 0;
    }
    v17 = v19;
    v40 = v12;
    v18 = a5;
    v20 = (int *)malloc_type_calloc(a5, 0x38uLL, 0x10A004053D910A2uLL);
    if (!v20)
    {
      v35 = ne_log_obj();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v44 = "NEVirtualInterfaceWriteMultipleIPPackets";
        v45 = 1024;
        v46 = 2653;
        _os_log_error_impl(&dword_19BD16000, v35, OS_LOG_TYPE_ERROR, "NEVirtualInterface Failure in %s at line %d.", buf, 0x12u);
      }
      free(v17);
      return 0;
    }
    v39 = v20;
  }
  else
  {
    v40 = v12;
    v17 = *(char **)(a1 + 216);
    v18 = a5;
    v39 = *(int **)(a1 + 224);
    bzero(v39, 56 * a5);
  }
  memset(uu, 0, sizeof(uu));
  uuid_clear(uu);
  v21 = 0;
  v22 = 0;
  if (a2)
    v23 = v41;
  else
    v23 = 0;
  v24 = v39 + 6;
  v25 = a2;
  do
  {
    if (!*(_QWORD *)(a3 + 8 * v22))
    {
      v30 = v39;
      v32 = ne_log_obj();
      if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
LABEL_52:
        v31 = 0;
        goto LABEL_53;
      }
      *(_DWORD *)buf = 136315394;
      v44 = "NEVirtualInterfaceWriteMultipleIPPackets";
      v45 = 1024;
      v46 = 2667;
LABEL_68:
      _os_log_error_impl(&dword_19BD16000, v32, OS_LOG_TYPE_ERROR, "NEVirtualInterface Failure in %s at line %d.", buf, 0x12u);
      goto LABEL_52;
    }
    if (!*(_QWORD *)(a4 + 8 * v22))
    {
      v30 = v39;
      v32 = ne_log_obj();
      if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        goto LABEL_52;
      *(_DWORD *)buf = 136315394;
      v44 = "NEVirtualInterfaceWriteMultipleIPPackets";
      v45 = 1024;
      v46 = 2672;
      goto LABEL_68;
    }
    v26 = &v17[16 * v21];
    *((_QWORD *)v24 - 1) = v26;
    *v24 = v16;
    if (v23)
    {
      *(_DWORD *)(a2 + 4 * v22) = bswap32(*(_DWORD *)(a2 + 4 * v22));
      *(_QWORD *)v26 = v25;
      *(_QWORD *)&v17[16 * v21 + 8] = 4;
    }
    if (v14)
    {
      v27 = (unsigned __int8 **)&v17[16 * v41 + 16 * v21];
      *v27 = uu;
      v27[1] = (unsigned __int8 *)16;
    }
    v28 = &v17[16 * v15 + 16 * v21];
    *(_QWORD *)v28 = *(_QWORD *)(a3 + 8 * v22);
    v29 = *(_QWORD *)(a4 + 8 * v22++);
    *((_QWORD *)v28 + 1) = v29;
    v25 += 4;
    v24 += 14;
    v21 += v16;
  }
  while (v18 != v22);
  v30 = v39;
  if (sendmsg_x() > 0)
  {
    v31 = 1;
LABEL_53:
    v33 = v40;
    goto LABEL_54;
  }
  v36 = ne_log_obj();
  v33 = v40;
  if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
  {
    v37 = __error();
    v38 = strerror(*v37);
    *(_DWORD *)buf = 136315138;
    v44 = v38;
    _os_log_error_impl(&dword_19BD16000, v36, OS_LOG_TYPE_ERROR, "User Tunnel write error: %s", buf, 0xCu);
  }
  v31 = 0;
LABEL_54:
  if (v33 <= a5)
  {
    free(v17);
    free(v30);
  }
  return v31;
}

uint64_t NEVirtualInterfaceWriteMultipleIPPayloads(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  return NEVirtualInterfaceWriteMultipleIPPayloadsInner(a1, a2, a3, a4, a5, a6, a7, 0);
}

uint64_t NEVirtualInterfaceWriteMultipleIPPayloadsInner(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, int a8)
{
  unsigned int v16;
  size_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  unsigned __int16 *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned __int16 *v37;
  int v38;
  int v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  unsigned int v45;
  NSObject *v46;
  char *v47;
  char *v48;
  char *v49;
  NSObject *v51;
  void *v52;
  char *v53;
  NSObject *v54;
  NSObject *v55;
  NSObject *v56;
  int *v57;
  char *v58;
  unsigned int v59;
  unsigned int v60;
  char *v61;
  char *v62;
  uint8_t buf[4];
  const char *v64;
  __int16 v65;
  int v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v46 = ne_log_obj();
    if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buf = 136315394;
    v64 = "NEVirtualInterfaceWriteMultipleIPPayloadsInner";
    v65 = 1024;
    v66 = 2716;
    goto LABEL_68;
  }
  if (*(_QWORD *)(a1 + 256) != 1)
  {
    v46 = ne_log_obj();
    if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buf = 136315394;
    v64 = "NEVirtualInterfaceWriteMultipleIPPayloadsInner";
    v65 = 1024;
    v66 = 2720;
    goto LABEL_68;
  }
  if (!a2)
  {
    v46 = ne_log_obj();
    if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buf = 136315394;
    v64 = "NEVirtualInterfaceWriteMultipleIPPayloadsInner";
    v65 = 1024;
    v66 = 2724;
    goto LABEL_68;
  }
  if (!a3)
  {
    v46 = ne_log_obj();
    if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buf = 136315394;
    v64 = "NEVirtualInterfaceWriteMultipleIPPayloadsInner";
    v65 = 1024;
    v66 = 2728;
    goto LABEL_68;
  }
  if (!a4)
  {
    v46 = ne_log_obj();
    if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buf = 136315394;
    v64 = "NEVirtualInterfaceWriteMultipleIPPayloadsInner";
    v65 = 1024;
    v66 = 2732;
    goto LABEL_68;
  }
  if (!a5)
  {
    v46 = ne_log_obj();
    if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buf = 136315394;
    v64 = "NEVirtualInterfaceWriteMultipleIPPayloadsInner";
    v65 = 1024;
    v66 = 2736;
    goto LABEL_68;
  }
  if (!a6)
  {
    v46 = ne_log_obj();
    if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buf = 136315394;
    v64 = "NEVirtualInterfaceWriteMultipleIPPayloadsInner";
    v65 = 1024;
    v66 = 2740;
    goto LABEL_68;
  }
  if ((*(_DWORD *)(a1 + 296) & 0x80000000) != 0)
  {
    v46 = ne_log_obj();
    if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buf = 136315394;
    v64 = "NEVirtualInterfaceWriteMultipleIPPayloadsInner";
    v65 = 1024;
    v66 = 2744;
    goto LABEL_68;
  }
  if (!a7)
  {
    v46 = ne_log_obj();
    if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buf = 136315394;
    v64 = "NEVirtualInterfaceWriteMultipleIPPayloadsInner";
    v65 = 1024;
    v66 = 2748;
    goto LABEL_68;
  }
  v16 = *(_DWORD *)(a1 + 212);
  if (!v16)
  {
    NEVirtualInterfaceAdjustSendCount(a1, 0x10u);
    v16 = *(_DWORD *)(a1 + 212);
  }
  if (*(_BYTE *)(a1 + 72))
    v17 = 60;
  else
    v17 = 44;
  if (v16 <= a7)
  {
    v47 = (char *)malloc_type_malloc(32 * a7, 0x1080040FC6463CFuLL);
    if (v47)
    {
      v60 = v16;
      v62 = v47;
      v19 = a7;
      v48 = (char *)malloc_type_calloc(a7, 0x38uLL, 0x10A004053D910A2uLL);
      if (v48)
      {
        v61 = v48;
        v49 = (char *)malloc_type_calloc(a7, v17, 0xE61603CuLL);
        if (v49)
        {
          v18 = v49;
          goto LABEL_17;
        }
        v55 = ne_log_obj();
        if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v64 = "NEVirtualInterfaceWriteMultipleIPPayloadsInner";
          v65 = 1024;
          v66 = 2777;
          _os_log_error_impl(&dword_19BD16000, v55, OS_LOG_TYPE_ERROR, "NEVirtualInterface Failure in %s at line %d.", buf, 0x12u);
        }
        free(v62);
        v52 = v61;
      }
      else
      {
        v51 = ne_log_obj();
        if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v64 = "NEVirtualInterfaceWriteMultipleIPPayloadsInner";
          v65 = 1024;
          v66 = 2771;
          _os_log_error_impl(&dword_19BD16000, v51, OS_LOG_TYPE_ERROR, "NEVirtualInterface Failure in %s at line %d.", buf, 0x12u);
        }
        v52 = v62;
      }
      free(v52);
      return 0;
    }
    v46 = ne_log_obj();
    if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buf = 136315394;
    v64 = "NEVirtualInterfaceWriteMultipleIPPayloadsInner";
    v65 = 1024;
    v66 = 2766;
LABEL_68:
    _os_log_error_impl(&dword_19BD16000, v46, OS_LOG_TYPE_ERROR, "NEVirtualInterface Failure in %s at line %d.", buf, 0x12u);
    return 0;
  }
  v60 = v16;
  v61 = *(char **)(a1 + 224);
  v62 = *(char **)(a1 + 216);
  v59 = v17;
  v18 = *(char **)(a1 + 232);
  v19 = a7;
  bzero(v61, 56 * a7);
  bzero(v18, v59 * (unint64_t)a7);
LABEL_17:
  v20 = 0;
  LODWORD(v21) = 0;
  do
  {
    if (a8)
      v21 = v21;
    else
      v21 = v20;
    if (!*(_QWORD *)(a5 + 8 * v20))
    {
      v53 = v18;
      v54 = ne_log_obj();
      if (!os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
        goto LABEL_85;
      *(_DWORD *)buf = 136315394;
      v64 = "NEVirtualInterfaceWriteMultipleIPPayloadsInner";
      v65 = 1024;
      v66 = 2796;
LABEL_84:
      _os_log_error_impl(&dword_19BD16000, v54, OS_LOG_TYPE_ERROR, "NEVirtualInterface Failure in %s at line %d.", buf, 0x12u);
      goto LABEL_85;
    }
    v22 = *(_QWORD *)(a6 + 8 * v20);
    if (!v22)
    {
      v53 = v18;
      v54 = ne_log_obj();
      if (!os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
        goto LABEL_85;
      *(_DWORD *)buf = 136315394;
      v64 = "NEVirtualInterfaceWriteMultipleIPPayloadsInner";
      v65 = 1024;
      v66 = 2801;
      goto LABEL_84;
    }
    v23 = *(_QWORD *)(a2 + 8 * v21);
    if (!v23)
    {
      v53 = v18;
      v54 = ne_log_obj();
      if (!os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
        goto LABEL_85;
      *(_DWORD *)buf = 136315394;
      v64 = "NEVirtualInterfaceWriteMultipleIPPayloadsInner";
      v65 = 1024;
      v66 = 2806;
      goto LABEL_84;
    }
    v24 = *(_QWORD *)(a3 + 8 * v21);
    if (!v24)
    {
      v53 = v18;
      v54 = ne_log_obj();
      if (!os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
        goto LABEL_85;
      *(_DWORD *)buf = 136315394;
      v64 = "NEVirtualInterfaceWriteMultipleIPPayloadsInner";
      v65 = 1024;
      v66 = 2811;
      goto LABEL_84;
    }
    if (*(unsigned __int8 *)(v23 + 1) != *(unsigned __int8 *)(v24 + 1))
    {
      v53 = v18;
      v54 = ne_log_obj();
      if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v64 = "NEVirtualInterfaceWriteMultipleIPPayloadsInner";
        v65 = 1024;
        v66 = 2816;
        goto LABEL_84;
      }
LABEL_85:
      v43 = 0;
      v44 = v62;
      v45 = v60;
      goto LABEL_86;
    }
    v25 = (2 * v20);
    v26 = &v62[16 * v25];
    v27 = &v61[56 * v20];
    *((_QWORD *)v27 + 2) = v26;
    *((_DWORD *)v27 + 6) = 2;
    v28 = &v18[v20];
    *(_QWORD *)v26 = &v18[v20];
    v29 = &v62[16 * ((2 * (_DWORD)v20) | 1)];
    *(_QWORD *)v29 = *(_QWORD *)(a5 + 8 * v20);
    *((_QWORD *)v29 + 1) = v22;
    v30 = *(_QWORD *)(a2 + 8 * v21);
    v31 = *(unsigned __int8 *)(v30 + 1);
    *(_DWORD *)&v18[v20] = v31 << 24;
    if (v31 == 30)
    {
      v39 = *(unsigned __int8 *)(a1 + 72);
      v40 = v28 + 4;
      if (*(_BYTE *)(a1 + 72))
        v40 = v28 + 20;
      *(_QWORD *)&v62[16 * v25 + 8] = 44;
      v41 = *(_QWORD *)(a3 + 8 * v21);
      *(_OWORD *)(v40 + 8) = *(_OWORD *)(v30 + 8);
      *(_OWORD *)(v40 + 24) = *(_OWORD *)(v41 + 8);
      if (v39)
        v42 = 20;
      else
        v42 = 4;
      *((_WORD *)v40 + 2) = bswap32(*(unsigned __int16 *)(a6 + 8 * v20)) >> 16;
      v40[6] = *(_BYTE *)(a4 + v21);
      v28[v42] |= 0x60u;
    }
    else if (v31 == 2)
    {
      v32 = 0;
      v33 = (unsigned __int16 *)(v28 + 4);
      if (*(_BYTE *)(a1 + 72))
      {
        v33 = (unsigned __int16 *)(v28 + 20);
        v34 = 20;
      }
      else
      {
        v34 = 4;
      }
      *(_QWORD *)&v62[16 * v25 + 8] = 24;
      v35 = *(_QWORD *)(a3 + 8 * v21);
      *((_DWORD *)v33 + 3) = *(_DWORD *)(v30 + 4);
      *((_DWORD *)v33 + 4) = *(_DWORD *)(v35 + 4);
      v33[1] = bswap32(*(unsigned __int16 *)(a6 + 8 * v20) + 20) >> 16;
      *((_BYTE *)v33 + 9) = *(_BYTE *)(a4 + v21);
      *((_BYTE *)v33 + 8) = 64;
      v28[v34] = 69;
      v33[5] = 0;
      v36 = 22;
      v37 = v33;
      do
      {
        v38 = *v37++;
        v32 += v38;
        v36 -= 2;
      }
      while (v36 > 3);
      v33[5] = ~(HIWORD(v32) + v32 + ((HIWORD(v32) + (unsigned __int16)v32) >> 16));
    }
    else
    {
      *(_QWORD *)&v62[16 * v25 + 8] = 4;
    }
    ++v20;
  }
  while (v20 != v19);
  if (sendmsg_x() > 0)
  {
    v43 = 1;
    v44 = v62;
    v45 = v60;
    goto LABEL_87;
  }
  v53 = v18;
  v56 = ne_log_obj();
  v45 = v60;
  if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
  {
    v57 = __error();
    v58 = strerror(*v57);
    *(_DWORD *)buf = 136315138;
    v64 = v58;
    _os_log_error_impl(&dword_19BD16000, v56, OS_LOG_TYPE_ERROR, "User Tunnel write error: %s", buf, 0xCu);
  }
  v43 = 0;
  v44 = v62;
LABEL_86:
  v18 = v53;
LABEL_87:
  if (v45 <= a7)
  {
    free(v44);
    free(v61);
    free(v18);
  }
  return v43;
}

uint64_t NEVirtualInterfaceWriteMultipleIPPayloadsFromArray(uint64_t a1, uint64_t a2, uint64_t a3, char a4, CFArrayRef theArray)
{
  unsigned int Count;
  size_t v8;
  void *v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  CFIndex i;
  const __CFData *ValueAtIndex;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v20 = a3;
  v21 = a2;
  v19 = a4;
  Count = CFArrayGetCount(theArray);
  v8 = 8 * Count;
  v9 = malloc_type_malloc(v8, 0x10040436913F5uLL);
  if (!v9)
  {
    v16 = ne_log_obj();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v23 = "NEVirtualInterfaceWriteMultipleIPPayloadsFromArray";
      v24 = 1024;
      v25 = 2901;
      _os_log_error_impl(&dword_19BD16000, v16, OS_LOG_TYPE_ERROR, "NEVirtualInterface Failure in %s at line %d.", buf, 0x12u);
    }
    return 0;
  }
  v10 = v9;
  v11 = malloc_type_malloc(v8, 0x100004000313F17uLL);
  if (!v11)
  {
    v17 = ne_log_obj();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v23 = "NEVirtualInterfaceWriteMultipleIPPayloadsFromArray";
      v24 = 1024;
      v25 = 2906;
      _os_log_error_impl(&dword_19BD16000, v17, OS_LOG_TYPE_ERROR, "NEVirtualInterface Failure in %s at line %d.", buf, 0x12u);
    }
    free(v10);
    return 0;
  }
  v12 = v11;
  if (Count)
  {
    for (i = 0; i != Count; v12[i++] = CFDataGetLength(ValueAtIndex))
    {
      ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(theArray, i);
      *((_QWORD *)v10 + i) = CFDataGetBytePtr(ValueAtIndex);
    }
  }
  v15 = NEVirtualInterfaceWriteMultipleIPPayloadsInner(a1, (uint64_t)&v21, (uint64_t)&v20, (uint64_t)&v19, (uint64_t)v10, (uint64_t)v12, Count, 1);
  free(v10);
  free(v12);
  return v15;
}

uint64_t NEVirtualInterfaceWriteIPPayload(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v10 = a3;
  v11 = a2;
  v9 = a4;
  v7 = a6;
  v8 = a5;
  return NEVirtualInterfaceWriteMultipleIPPayloadsInner(a1, (uint64_t)&v11, (uint64_t)&v10, (uint64_t)&v9, (uint64_t)&v8, (uint64_t)&v7, 1u, 1);
}

uint64_t NEVirtualInterfaceSetDelegateInterface(uint64_t result, const __CFString *a2)
{
  uint64_t v2;
  CFTypeID TypeID;
  CFIndex Length;
  char *v6;
  CFIndex v7;
  uint64_t v8;
  int v9;
  int v10;
  NSObject *v11;
  const void *v12;
  CFTypeID v13;
  int v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!result)
    return result;
  v2 = result;
  if (*(_BYTE *)(result + 264))
    return 0;
  TypeID = CFStringGetTypeID();
  if (a2 && CFGetTypeID(a2) == TypeID && CFStringGetLength(a2) >= 1)
  {
    Length = CFStringGetLength(a2);
    result = (uint64_t)malloc_type_malloc(Length + 1, 0x69E6CA00uLL);
    if (!result)
      return result;
    v6 = (char *)result;
    v7 = CFStringGetLength(a2);
    CFStringGetCString(a2, v6, v7 + 1, 0x600u);
    strlen(v6);
  }
  else
  {
    v6 = 0;
  }
  v8 = *(_QWORD *)(v2 + 256);
  if (v8 == 4)
  {
    v9 = NEHelperInterfaceSetDelegate();
    goto LABEL_16;
  }
  if (v8 == 2 || v8 == 1)
  {
    v9 = NEHelperInterfaceSetOption();
LABEL_16:
    v10 = v9;
    if (!v6)
      goto LABEL_18;
    goto LABEL_17;
  }
  v10 = 0;
  if (v6)
LABEL_17:
    free(v6);
LABEL_18:
  if (v10)
  {
    v11 = ne_log_obj();
    result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      v14 = 136315138;
      v15 = strerror(v10);
      _os_log_error_impl(&dword_19BD16000, v11, OS_LOG_TYPE_ERROR, "Could not set delegate interface: %s", (uint8_t *)&v14, 0xCu);
      return 0;
    }
  }
  else
  {
    v12 = *(const void **)(v2 + 480);
    if (v12)
    {
      CFRelease(v12);
      *(_QWORD *)(v2 + 480) = 0;
    }
    v13 = CFStringGetTypeID();
    if (a2)
    {
      if (CFGetTypeID(a2) == v13)
        *(_QWORD *)(v2 + 480) = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2);
    }
    NEVirtualInterfaceUpdateMTUWithDelegate(v2);
    return 1;
  }
  return result;
}

void NEVirtualInterfaceUpdateMTUWithDelegate(uint64_t a1)
{
  const void *v2;
  CFTypeID TypeID;
  CFIndex Length;
  char *v5;
  char *v6;
  const __CFString *v7;
  CFIndex v8;
  int v9;

  if (*(_DWORD *)(a1 + 300))
  {
    v2 = *(const void **)(a1 + 480);
    TypeID = CFStringGetTypeID();
    if (v2)
    {
      if (CFGetTypeID(v2) == TypeID && CFStringGetLength(*(CFStringRef *)(a1 + 480)) >= 1)
      {
        Length = CFStringGetLength(*(CFStringRef *)(a1 + 480));
        v5 = (char *)malloc_type_malloc(Length + 1, 0xC887A8E2uLL);
        if (v5)
        {
          v6 = v5;
          v7 = *(const __CFString **)(a1 + 480);
          v8 = CFStringGetLength(v7);
          CFStringGetCString(v7, v6, v8 + 1, 0x600u);
          v9 = 0;
          LODWORD(v7) = interface_get_mtu((uint64_t)v6, &v9, (int *)(a1 + 308));
          free(v6);
          if (!(_DWORD)v7)
            NEVirtualInterfaceSetMTU(a1, v9 - *(_DWORD *)(a1 + 300));
        }
      }
    }
  }
}

uint64_t NEVirtualInterfaceSetMTU(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v6;
  int v7;
  NSObject *v8;
  const char *v9;
  NSObject *v10;
  uint32_t v11;
  unsigned int v12;
  NSObject *v13;
  int v14;
  _DWORD v15[7];

  *(_QWORD *)&v15[5] = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v2 = result;
    if (*(_BYTE *)(result + 264))
      return 0;
    v3 = *(_QWORD *)(result + 256);
    if (v3 == 3)
      return 0;
    if (v3 != 1 || a2 < 16001)
    {
      v6 = NEHelperInterfaceSetMTU();
      if (v6)
      {
        v7 = v6;
        v8 = ne_log_obj();
        result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
        if ((_DWORD)result)
        {
          v14 = 136315138;
          *(_QWORD *)v15 = strerror(v7);
          v9 = "Failed to set MTU with NEHelper: %s\n";
          v10 = v8;
          v11 = 12;
LABEL_20:
          _os_log_error_impl(&dword_19BD16000, v10, OS_LOG_TYPE_ERROR, v9, (uint8_t *)&v14, v11);
          return 0;
        }
      }
      else
      {
        if (*(_QWORD *)(v2 + 256) == 1)
        {
          v12 = *(_DWORD *)(v2 + 96);
          if (v12)
            NEVirtualInterfaceAdjustReadBufferSize(v2, v12);
        }
        return 1;
      }
    }
    else
    {
      v13 = ne_log_obj();
      result = os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
      if ((_DWORD)result)
      {
        v14 = 67109376;
        v15[0] = a2;
        LOWORD(v15[1]) = 1024;
        *(_DWORD *)((char *)&v15[1] + 2) = 16000;
        v9 = "Requested MTU (%d) is larger than maximum allowed (%d)\n";
        v10 = v13;
        v11 = 14;
        goto LABEL_20;
      }
    }
  }
  return result;
}

CFStringRef NEVirtualInterfaceCopyDelegateInterfaceName(uint64_t a1)
{
  const __CFString *v2;

  if (a1 && !*(_BYTE *)(a1 + 264) && (v2 = *(const __CFString **)(a1 + 480)) != 0)
    return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v2);
  else
    return 0;
}

BOOL NEVirtualInterfaceSetDescription(uint64_t a1, CFStringRef theString)
{
  _BOOL8 result;
  int v4;
  int v5;
  NSObject *v6;
  int v7;
  char *v8;
  char buffer[16];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  result = 0;
  v17 = *MEMORY[0x1E0C80C00];
  if (a1 && theString)
  {
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    *(_OWORD *)buffer = 0u;
    v10 = 0u;
    CFStringGetCString(theString, buffer, 128, 0x8000100u);
    if (*(_QWORD *)(a1 + 256) == 4 && (v4 = NEHelperInterfaceSetDescription()) != 0)
    {
      v5 = v4;
      v6 = ne_log_obj();
      result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
      if (result)
      {
        v7 = 136315138;
        v8 = strerror(v5);
        _os_log_error_impl(&dword_19BD16000, v6, OS_LOG_TYPE_ERROR, "Could not set description on redirect interface: %s", (uint8_t *)&v7, 0xCu);
        return 0;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t NEVirtualInterfaceSetMTUOverhead(uint64_t result, int a2)
{
  if (result)
  {
    if (*(_BYTE *)(result + 264))
    {
      return 0;
    }
    else
    {
      *(_DWORD *)(result + 300) = a2;
      NEVirtualInterfaceUpdateMTUWithDelegate(result);
      return 1;
    }
  }
  return result;
}

BOOL NEVirtualInterfaceSetMaxPendingPackets(uint64_t a1, unsigned int a2)
{
  NSObject *v3;
  _BOOL8 result;
  const char *v5;
  unsigned int v6;
  int v7;
  int v8;
  uint8_t buf[4];
  _BYTE v11[14];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (*(_QWORD *)(a1 + 256) == 1)
    {
      if (*(_BYTE *)(a1 + 264))
      {
        v3 = ne_log_obj();
        result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
        if (result)
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)v11 = "NEVirtualInterfaceSetMaxPendingPackets";
          *(_WORD *)&v11[8] = 1024;
          *(_DWORD *)&v11[10] = 3110;
          v5 = "NEVirtualInterface Failure in %s at line %d.";
LABEL_24:
          _os_log_error_impl(&dword_19BD16000, v3, OS_LOG_TYPE_ERROR, v5, buf, 0x12u);
          return 0;
        }
      }
      else if (a2)
      {
        if (a2 >= 0x400)
          v6 = 1024;
        else
          v6 = a2;
        v7 = NEHelperInterfaceSetOption();
        if (v7)
        {
          v8 = v7;
          v3 = ne_log_obj();
          result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
          if (result)
          {
            *(_DWORD *)buf = 67109378;
            *(_DWORD *)v11 = a2;
            *(_WORD *)&v11[4] = 2080;
            *(_QWORD *)&v11[6] = strerror(v8);
            v5 = "Failed to set max pending packets to %u with NEHelper: %s\n";
            goto LABEL_24;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 48) && !*(_QWORD *)(a1 + 56))
            v6 = 1;
          return NEVirtualInterfaceAdjustReadBufferSize(a1, v6);
        }
      }
      else
      {
        v3 = ne_log_obj();
        result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
        if (result)
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)v11 = "NEVirtualInterfaceSetMaxPendingPackets";
          *(_WORD *)&v11[8] = 1024;
          *(_DWORD *)&v11[10] = 3114;
          v5 = "NEVirtualInterface Failure in %s at line %d.";
          goto LABEL_24;
        }
      }
    }
    else
    {
      v3 = ne_log_obj();
      result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)v11 = "NEVirtualInterfaceSetMaxPendingPackets";
        *(_WORD *)&v11[8] = 1024;
        *(_DWORD *)&v11[10] = 3106;
        v5 = "NEVirtualInterface Failure in %s at line %d.";
        goto LABEL_24;
      }
    }
  }
  else
  {
    v3 = ne_log_obj();
    result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)v11 = "NEVirtualInterfaceSetMaxPendingPackets";
      *(_WORD *)&v11[8] = 1024;
      *(_DWORD *)&v11[10] = 3102;
      v5 = "NEVirtualInterface Failure in %s at line %d.";
      goto LABEL_24;
    }
  }
  return result;
}

uint64_t NEVirtualInterfaceSetOutputTrafficClass(uint64_t result, int a2)
{
  int v2;
  int v3;
  NSObject *v4;
  uint8_t buf[4];
  int v7;
  __int16 v8;
  char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    if (*(_BYTE *)(result + 264) || *(_QWORD *)(result + 256) != 2)
      return 0;
    v2 = NEHelperInterfaceSetOption();
    if (!v2)
      return 1;
    v3 = v2;
    v4 = ne_log_obj();
    result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      *(_DWORD *)buf = 67109378;
      v7 = a2;
      v8 = 2080;
      v9 = strerror(v3);
      _os_log_error_impl(&dword_19BD16000, v4, OS_LOG_TYPE_ERROR, "Failed to set output traffic class to %d with NEHelper: %s\n", buf, 0x12u);
      return 0;
    }
  }
  return result;
}

uint64_t NEVirtualInterfaceSetDSCPMapping(uint64_t result, int a2)
{
  int v2;
  int v3;
  NSObject *v4;
  uint8_t buf[4];
  int v7;
  __int16 v8;
  char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    if (*(_BYTE *)(result + 264) || *(_QWORD *)(result + 256) != 2)
      return 0;
    v2 = NEHelperInterfaceSetOption();
    if (!v2)
      return 1;
    v3 = v2;
    v4 = ne_log_obj();
    result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      *(_DWORD *)buf = 67109378;
      v7 = a2;
      v8 = 2080;
      v9 = strerror(v3);
      _os_log_error_impl(&dword_19BD16000, v4, OS_LOG_TYPE_ERROR, "Failed to set output DSCP mapping to %d with NEHelper: %s\n", buf, 0x12u);
      return 0;
    }
  }
  return result;
}

uint64_t NEVirtualInterfaceSetVPNServerAddress(uint64_t result, const __CFString *a2)
{
  uint64_t v2;
  CFTypeID TypeID;
  CFTypeID v5;
  const void *v6;
  const void *v7;

  if (result)
  {
    v2 = result;
    if (*(_BYTE *)(result + 264))
      return 0;
    TypeID = CFStringGetTypeID();
    if (!a2)
    {
      v7 = *(const void **)(v2 + 472);
      if (v7)
      {
        CFRelease(v7);
        *(_QWORD *)(v2 + 472) = 0;
      }
      return 1;
    }
    if (CFGetTypeID(a2) != TypeID || (result = (uint64_t)NEGetAddressFamilyFromString(a2), (_DWORD)result))
    {
      v5 = CFStringGetTypeID();
      if (CFGetTypeID(a2) != v5)
        return 0;
      v6 = *(const void **)(v2 + 472);
      if (v6)
      {
        CFRelease(v6);
        *(_QWORD *)(v2 + 472) = 0;
      }
      *(_QWORD *)(v2 + 472) = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2);
      return 1;
    }
  }
  return result;
}

CFTypeRef NEVirtualInterfaceCopyVPNServerAddress(uint64_t a1)
{
  const void *v2;

  if (a1 && !*(_BYTE *)(a1 + 264) && (v2 = *(const void **)(a1 + 472)) != 0)
    return CFRetain(v2);
  else
    return 0;
}

uint64_t NEVirtualInterfaceSetAsPrimary(uint64_t result, int a2)
{
  char v2;

  if (result)
  {
    if (*(_BYTE *)(result + 264))
    {
      return 0;
    }
    else
    {
      v2 = *(_BYTE *)(result + 312);
      if ((v2 & 1) != a2)
        *(_BYTE *)(result + 312) = v2 & 0xFE | a2 & 1;
      return 1;
    }
  }
  return result;
}

uint64_t NEVirtualInterfaceIsPrimary(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 264))
      return 0;
    else
      return *(_BYTE *)(result + 312) & 1;
  }
  return result;
}

uint64_t NEVirtualInterfaceSetServiceID(uint64_t a1, CFStringRef theString)
{
  uint64_t result;
  const void *v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  result = 0;
  v10 = *MEMORY[0x1E0C80C00];
  if (a1 && theString)
  {
    v5 = *(const void **)(a1 + 488);
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(a1 + 488) = 0;
    }
    *(_QWORD *)(a1 + 488) = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theString);
    v6 = ne_log_obj();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(_QWORD *)(a1 + 488);
      v8 = 138412290;
      v9 = v7;
      _os_log_debug_impl(&dword_19BD16000, v6, OS_LOG_TYPE_DEBUG, "Reset serviceID for NEVirtualInterface (%@)\n", (uint8_t *)&v8, 0xCu);
    }
    return 1;
  }
  return result;
}

uint64_t NEVirtualInterfaceSetRankPrimaryEligible(uint64_t result, int a2)
{
  unsigned int v2;

  if (result)
  {
    if (*(_BYTE *)(result + 264))
    {
      return 0;
    }
    else
    {
      v2 = *(unsigned __int8 *)(result + 312);
      if (((v2 >> 1) & 1) != a2)
        *(_BYTE *)(result + 312) = v2 & 0xFD | (2 * (a2 & 1));
      return 1;
    }
  }
  return result;
}

uint64_t NEVirtualInterfaceSetRankLast(uint64_t result, int a2)
{
  unsigned int v2;

  if (result)
  {
    if (*(_BYTE *)(result + 264))
    {
      return 0;
    }
    else
    {
      v2 = *(unsigned __int8 *)(result + 312);
      if (((v2 >> 2) & 1) != a2)
        *(_BYTE *)(result + 312) = v2 & 0xFB | (4 * (a2 & 1));
      return 1;
    }
  }
  return result;
}

uint64_t NEVirtualInterfaceSetRankNever(uint64_t result, int a2)
{
  unsigned int v2;

  if (result)
  {
    if (*(_BYTE *)(result + 264))
    {
      return 0;
    }
    else
    {
      v2 = *(unsigned __int8 *)(result + 312);
      if (((v2 >> 3) & 1) != a2)
        *(_BYTE *)(result + 312) = v2 & 0xF7 | (8 * (a2 & 1));
      return 1;
    }
  }
  return result;
}

uint64_t NEVirtualInterfaceSetServiceIndex(uint64_t result, int a2)
{
  if (result)
  {
    if (*(_BYTE *)(result + 264))
    {
      return 0;
    }
    else
    {
      *(_DWORD *)(result + 316) = a2;
      return 1;
    }
  }
  return result;
}

uint64_t NEVirtualInterfaceSetIPv4Router(uint64_t result, const __CFString *a2)
{
  uint64_t v2;
  CFTypeID TypeID;
  const void *v5;
  const void *v6;

  if (result)
  {
    v2 = result;
    if (*(_BYTE *)(result + 264))
      return 0;
    if (a2)
    {
      TypeID = CFStringGetTypeID();
      if (CFGetTypeID(a2) != TypeID)
        return 0;
      v5 = *(const void **)(v2 + 456);
      if (v5)
      {
        CFRelease(v5);
        *(_QWORD *)(v2 + 456) = 0;
      }
      *(_QWORD *)(v2 + 456) = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2);
    }
    else
    {
      v6 = *(const void **)(result + 456);
      if (v6)
      {
        CFRelease(v6);
        *(_QWORD *)(v2 + 456) = 0;
      }
    }
    return 1;
  }
  return result;
}

uint64_t NEVirtualInterfaceSetIPv6Router(uint64_t result, const __CFString *a2)
{
  uint64_t v2;
  CFTypeID TypeID;
  const void *v5;
  const void *v6;

  if (result)
  {
    v2 = result;
    if (*(_BYTE *)(result + 264))
      return 0;
    if (a2)
    {
      TypeID = CFStringGetTypeID();
      if (CFGetTypeID(a2) != TypeID)
        return 0;
      v5 = *(const void **)(v2 + 464);
      if (v5)
      {
        CFRelease(v5);
        *(_QWORD *)(v2 + 464) = 0;
      }
      *(_QWORD *)(v2 + 464) = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2);
    }
    else
    {
      v6 = *(const void **)(result + 464);
      if (v6)
      {
        CFRelease(v6);
        *(_QWORD *)(v2 + 464) = 0;
      }
    }
    return 1;
  }
  return result;
}

CFStringRef NEVirtualInterfaceCopyIPv4Router(uint64_t a1)
{
  const __CFString *v2;

  if (a1 && !*(_BYTE *)(a1 + 264) && (v2 = *(const __CFString **)(a1 + 456)) != 0)
    return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v2);
  else
    return 0;
}

CFStringRef NEVirtualInterfaceCopyIPv6Router(uint64_t a1)
{
  const __CFString *v2;

  if (a1 && !*(_BYTE *)(a1 + 264) && (v2 = *(const __CFString **)(a1 + 464)) != 0)
    return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v2);
  else
    return 0;
}

uint64_t NEVirtualInterfaceSetIPv4ConfigurationMethod(uint64_t result, uint64_t a2)
{
  if (result)
  {
    if (*(_QWORD *)(result + 256) == 3)
    {
      *(_QWORD *)(result + 376) = a2;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t NEVirtualInterfaceGetIPv4ConfigurationMethod(uint64_t a1)
{
  if (a1)
    return *(_QWORD *)(a1 + 376);
  else
    return 1;
}

uint64_t NEVirtualInterfaceSetIPv6ConfigurationMethod(uint64_t result, uint64_t a2)
{
  if (result)
  {
    if (*(_QWORD *)(result + 256) == 3)
    {
      *(_QWORD *)(result + 384) = a2;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t NEVirtualInterfaceGetIPv6ConfigurationMethod(uint64_t a1)
{
  if (a1)
    return *(_QWORD *)(a1 + 384);
  else
    return 1;
}

uint64_t NEVirtualInterfaceAddAddressInternal(uint64_t a1, const __CFString *a2, const __CFString *a3, uint64_t a4)
{
  uint64_t v5;
  CFDataRef v9;
  const __CFData *v10;
  const __CFData *v11;
  NSObject *v12;
  const UInt8 *BytePtr;
  const UInt8 *v14;
  int v15;
  int v16;
  NSObject *v17;
  CFNumberRef v18;
  char *v20;
  int v21;
  int valuePtr;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v5 = 0;
  if (a2 && !*(_BYTE *)(a1 + 264))
  {
    v21 = 0;
    v9 = NECreateAddressStructDataFromString(a2, 0, &v21);
    v10 = v9;
    if (a3)
    {
      v11 = NECreateAddressStructDataFromString(a3, 0, 0);
      if (v10)
        goto LABEL_6;
    }
    else
    {
      v11 = 0;
      if (v9)
      {
LABEL_6:
        if (a4)
        {
          if (v21 != 30)
          {
            v12 = ne_log_obj();
            if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
            {
              LOWORD(valuePtr) = 0;
              _os_log_error_impl(&dword_19BD16000, v12, OS_LOG_TYPE_ERROR, "Error: trying to add lifetime with a non-IPv6 address\n", (uint8_t *)&valuePtr, 2u);
            }
          }
          BytePtr = CFDataGetBytePtr(v10);
          if (v11)
            v14 = CFDataGetBytePtr(v11);
          else
            v14 = 0;
          v15 = MEMORY[0x1A1ACDECC](a1 + 265, BytePtr, v14, a4);
        }
        else
        {
          CFDataGetBytePtr(v10);
          if (v11)
            CFDataGetBytePtr(v11);
          v15 = NEHelperInterfaceSetAddress();
        }
        v16 = v15;
        if (v15)
        {
          v17 = ne_log_obj();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            v20 = strerror(v16);
            valuePtr = 136315138;
            v23 = v20;
            _os_log_error_impl(&dword_19BD16000, v17, OS_LOG_TYPE_ERROR, "Failed to set address with NEHelper: %s\n", (uint8_t *)&valuePtr, 0xCu);
          }
          v5 = 0;
        }
        else
        {
          if (v21 == 30)
          {
            CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 328), a2);
            valuePtr = 64;
            if (a3)
              valuePtr = NEGetPrefixForIPv6NetmaskString(a3);
            v18 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
            CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 336), v18);
            if (v18)
              CFRelease(v18);
          }
          else if (v21 == 2)
          {
            CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 320), a2);
          }
          v5 = 1;
        }
        CFRelease(v10);
        if (v11)
        {
LABEL_34:
          CFRelease(v11);
          return v5;
        }
        return v5;
      }
    }
    v5 = 0;
    if (!v11)
      return v5;
    goto LABEL_34;
  }
  return v5;
}

uint64_t NEVirtualInterfaceAddAddress(uint64_t a1, const __CFString *a2, const __CFString *a3)
{
  return NEVirtualInterfaceAddAddressInternal(a1, a2, a3, 0);
}

uint64_t NEVirtualInterfaceRemoveAddress(uint64_t a1, const __CFString *a2)
{
  uint64_t v3;
  CFDataRef v5;
  CFTypeID TypeID;
  int v7;
  int v8;
  NSObject *v9;
  CFTypeID v10;
  int v11;
  const __CFArray *v12;
  CFIndex FirstIndexOfValue;
  CFIndex v14;
  __CFArray *v15;
  const __CFArray *v16;
  CFIndex v17;
  CFIndex v18;
  char *v20;
  int v21;
  uint8_t buf[4];
  char *v23;
  uint64_t v24;
  CFRange v25;
  CFRange v26;
  CFRange v27;
  CFRange v28;

  v24 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v3 = 0;
  if (a2 && !*(_BYTE *)(a1 + 264))
  {
    v21 = 0;
    v5 = NECreateAddressStructDataFromString(a2, 0, &v21);
    TypeID = CFDataGetTypeID();
    if (v5)
    {
      if (CFGetTypeID(v5) == TypeID && v21 == 2)
      {
        v3 = *(_QWORD *)(a1 + 320);
        if (!v3)
        {
LABEL_27:
          CFRelease(v5);
          return v3;
        }
        v25.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 320));
        v25.location = 0;
        if (!CFArrayContainsValue((CFArrayRef)v3, v25, a2))
          goto LABEL_20;
        CFDataGetBytePtr(v5);
        v7 = NEHelperInterfaceRemoveAddress();
        if (v7)
        {
          v8 = v7;
          v9 = ne_log_obj();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
            goto LABEL_29;
          goto LABEL_20;
        }
        v12 = *(const __CFArray **)(a1 + 320);
        v27.length = CFArrayGetCount(v12);
        v27.location = 0;
        FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v12, v27, a2);
        if (FirstIndexOfValue != -1)
        {
          v14 = FirstIndexOfValue;
          v15 = *(__CFArray **)(a1 + 320);
LABEL_25:
          CFArrayRemoveValueAtIndex(v15, v14);
        }
      }
      else
      {
        v10 = CFDataGetTypeID();
        v3 = 0;
        if (CFGetTypeID(v5) != v10)
          goto LABEL_27;
        if (v21 != 30)
          goto LABEL_27;
        v3 = *(_QWORD *)(a1 + 328);
        if (!v3)
          goto LABEL_27;
        v26.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 328));
        v26.location = 0;
        if (!CFArrayContainsValue((CFArrayRef)v3, v26, a2))
          goto LABEL_20;
        CFDataGetBytePtr(v5);
        v11 = NEHelperInterfaceRemoveAddress();
        if (v11)
        {
          v8 = v11;
          v9 = ne_log_obj();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
LABEL_29:
            v20 = strerror(v8);
            *(_DWORD *)buf = 136315138;
            v23 = v20;
            _os_log_error_impl(&dword_19BD16000, v9, OS_LOG_TYPE_ERROR, "Failed to remove address with NEHelper: %s\n", buf, 0xCu);
          }
LABEL_20:
          v3 = 0;
          goto LABEL_27;
        }
        v16 = *(const __CFArray **)(a1 + 328);
        v28.length = CFArrayGetCount(v16);
        v28.location = 0;
        v17 = CFArrayGetFirstIndexOfValue(v16, v28, a2);
        if (v17 != -1)
        {
          v18 = v17;
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 328), v17);
          v15 = *(__CFArray **)(a1 + 336);
          v14 = v18;
          goto LABEL_25;
        }
      }
      v3 = 1;
      goto LABEL_27;
    }
    CFDataGetTypeID();
    return 0;
  }
  return v3;
}

uint64_t NEVirtualInterfaceRemoveAllAddresses(uint64_t result)
{
  __CFArray **v1;
  const __CFArray *v2;
  CFIndex j;
  CFIndex v4;
  __CFArray *v5;
  const __CFString *v6;
  CFTypeID v7;
  const __CFData *v8;
  CFTypeID v9;
  const __CFArray *v10;
  CFIndex i;
  CFIndex Count;
  const __CFArray *v13;
  const __CFString *ValueAtIndex;
  CFTypeID TypeID;
  CFTypeID v16;

  if (!result)
    return result;
  v1 = (__CFArray **)result;
  if (*(_BYTE *)(result + 264))
    return 0;
  v2 = *(const __CFArray **)(result + 320);
  if (!v2)
  {
LABEL_15:
    v10 = v1[41];
    if (v10)
    {
      for (i = 0; ; ++i)
      {
        Count = CFArrayGetCount(v10);
        v13 = v1[41];
        if (i >= Count)
          break;
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v13, i);
        TypeID = CFStringGetTypeID();
        if (ValueAtIndex)
        {
          if (CFGetTypeID(ValueAtIndex) == TypeID)
          {
            v8 = NECreateAddressStructDataFromString(ValueAtIndex, 0, 0);
            v16 = CFDataGetTypeID();
            if (v8)
            {
              if (CFGetTypeID(v8) == v16)
              {
                CFDataGetBytePtr(v8);
                if (NEHelperInterfaceRemoveAddress())
                  goto LABEL_28;
              }
              CFRelease(v8);
            }
          }
        }
        v10 = v1[41];
      }
      CFArrayRemoveAllValues(v13);
      CFArrayRemoveAllValues(v1[42]);
    }
    return 1;
  }
  for (j = 0; ; ++j)
  {
    v4 = CFArrayGetCount(v2);
    v5 = v1[40];
    if (j >= v4)
    {
      CFArrayRemoveAllValues(v5);
      goto LABEL_15;
    }
    v6 = (const __CFString *)CFArrayGetValueAtIndex(v5, j);
    v7 = CFStringGetTypeID();
    if (v6)
    {
      if (CFGetTypeID(v6) == v7)
      {
        v8 = NECreateAddressStructDataFromString(v6, 0, 0);
        v9 = CFDataGetTypeID();
        if (v8)
          break;
      }
    }
LABEL_13:
    v2 = v1[40];
  }
  if (CFGetTypeID(v8) != v9 || (CFDataGetBytePtr(v8), !NEHelperInterfaceRemoveAddress()))
  {
    CFRelease(v8);
    goto LABEL_13;
  }
LABEL_28:
  CFRelease(v8);
  return 0;
}

__CFArray *NEVirtualInterfaceCopyAddresses(uint64_t a1)
{
  __CFArray *Mutable;
  const void *v3;
  CFTypeID TypeID;
  const __CFArray *v5;
  const void *v6;
  CFTypeID v7;
  const __CFArray *v8;
  CFRange v10;
  CFRange v11;

  if (!a1)
    return 0;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = *(const void **)(a1 + 320);
  TypeID = CFArrayGetTypeID();
  if (v3 && CFGetTypeID(v3) == TypeID)
  {
    v5 = *(const __CFArray **)(a1 + 320);
    v10.length = CFArrayGetCount(v5);
    v10.location = 0;
    CFArrayAppendArray(Mutable, v5, v10);
  }
  v6 = *(const void **)(a1 + 328);
  v7 = CFArrayGetTypeID();
  if (v6 && CFGetTypeID(v6) == v7)
  {
    v8 = *(const __CFArray **)(a1 + 328);
    v11.length = CFArrayGetCount(v8);
    v11.location = 0;
    CFArrayAppendArray(Mutable, v8, v11);
  }
  return Mutable;
}

uint64_t NEVirtualInterfaceRemoveRoute(uint64_t result, const __CFString *a2, int a3)
{
  uint64_t v3;
  CFTypeID TypeID;
  int v7;
  void **v8;
  void **v9;
  void *v10;
  CFTypeID v11;
  CFIndex v12;
  const void *v13;
  const __CFDictionary *ValueAtIndex;
  CFTypeID v15;
  const void *Value;
  NSObject *v17;
  const char *v18;
  int v19;
  uint64_t v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const __CFString *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (!result)
    return result;
  v3 = result;
  if (*(_BYTE *)(result + 264))
    return 0;
  TypeID = CFStringGetTypeID();
  if (!a2 || CFGetTypeID(a2) != TypeID)
    return 0;
  v7 = NEGetAddressFamilyFromString(a2);
  if (v7 != 30)
  {
    if (v7 == 2)
    {
      v8 = (void **)(v3 + 352);
      v9 = (void **)(v3 + 344);
      goto LABEL_11;
    }
    return 0;
  }
  v8 = (void **)(v3 + 368);
  v9 = (void **)(v3 + 360);
LABEL_11:
  if (!a3)
    v8 = v9;
  v10 = *v8;
  v11 = CFArrayGetTypeID();
  if (!v10 || CFGetTypeID(v10) != v11)
    return 0;
  v12 = 0;
  v13 = (const void *)*MEMORY[0x1E0CE8CF0];
  while (v12 < CFArrayGetCount((CFArrayRef)v10))
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)v10, v12);
    v15 = CFDictionaryGetTypeID();
    if (ValueAtIndex)
    {
      if (CFGetTypeID(ValueAtIndex) == v15)
      {
        Value = CFDictionaryGetValue(ValueAtIndex, v13);
        if (Value)
        {
          if (CFEqual(a2, Value))
          {
            CFArrayRemoveValueAtIndex((CFMutableArrayRef)v10, v12);
            break;
          }
        }
      }
    }
    ++v12;
  }
  if (nelog_is_extra_vpn_logging_enabled())
  {
    v17 = ne_log_obj();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      v19 = 136315650;
      v20 = v3 + 265;
      if (a3)
        v18 = "excluded ";
      else
        v18 = "";
      v21 = 2080;
      v22 = v18;
      v23 = 2112;
      v24 = a2;
      _os_log_debug_impl(&dword_19BD16000, v17, OS_LOG_TYPE_DEBUG, "%s: removed %s route to %@", (uint8_t *)&v19, 0x20u);
    }
  }
  return 1;
}

uint64_t NEVirtualInterfaceRemoveAllRoutes(uint64_t result, int a2, int a3)
{
  _QWORD *v3;
  __CFArray *v5;
  __CFArray *v6;
  __CFArray *v7;
  __CFArray *v8;

  if (result)
  {
    v3 = (_QWORD *)result;
    if (*(_BYTE *)(result + 264))
    {
      return 0;
    }
    else
    {
      if (a2)
      {
        v5 = *(__CFArray **)(result + 344);
        if (v5)
          CFArrayRemoveAllValues(v5);
        v6 = (__CFArray *)v3[45];
        if (v6)
          CFArrayRemoveAllValues(v6);
      }
      if (a3)
      {
        v7 = (__CFArray *)v3[44];
        if (v7)
          CFArrayRemoveAllValues(v7);
        v8 = (__CFArray *)v3[46];
        if (v8)
          CFArrayRemoveAllValues(v8);
      }
      return 1;
    }
  }
  return result;
}

__CFArray *NEVirtualInterfaceCopyRoutes(uint64_t a1, int a2)
{
  uint64_t v2;
  const __CFArray *v3;
  uint64_t v4;
  const __CFArray *v5;
  __CFArray *Mutable;
  CFTypeID TypeID;
  CFTypeID v8;
  CFRange v10;
  CFRange v11;

  if (!a1)
    return 0;
  v2 = 352;
  if (!a2)
    v2 = 344;
  v3 = *(const __CFArray **)(a1 + v2);
  v4 = 368;
  if (!a2)
    v4 = 360;
  v5 = *(const __CFArray **)(a1 + v4);
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  TypeID = CFArrayGetTypeID();
  if (v3 && CFGetTypeID(v3) == TypeID)
  {
    v10.length = CFArrayGetCount(v3);
    v10.location = 0;
    CFArrayAppendArray(Mutable, v3, v10);
  }
  v8 = CFArrayGetTypeID();
  if (v5 && CFGetTypeID(v5) == v8)
  {
    v11.length = CFArrayGetCount(v5);
    v11.location = 0;
    CFArrayAppendArray(Mutable, v5, v11);
  }
  return Mutable;
}

CFArrayRef NEVirtualInterfaceCopyIPv4Routes(uint64_t a1, int a2)
{
  uint64_t v2;
  const __CFArray *v3;

  if (!a1)
    return 0;
  v2 = 352;
  if (!a2)
    v2 = 344;
  v3 = *(const __CFArray **)(a1 + v2);
  if (v3)
    return CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v3);
  else
    return 0;
}

CFArrayRef NEVirtualInterfaceCopyIPv6Routes(uint64_t a1, int a2)
{
  uint64_t v2;
  const __CFArray *v3;

  if (!a1)
    return 0;
  v2 = 368;
  if (!a2)
    v2 = 360;
  v3 = *(const __CFArray **)(a1 + v2);
  if (v3)
    return CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v3);
  else
    return 0;
}

uint64_t NEVirtualInterfaceSetDNSDomain(uint64_t result, const __CFString *a2)
{
  uint64_t v2;
  CFTypeID TypeID;
  const void *v5;
  const void *v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  const __CFString *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v2 = result;
    if (*(_BYTE *)(result + 264))
      return 0;
    if (a2)
    {
      TypeID = CFStringGetTypeID();
      if (CFGetTypeID(a2) != TypeID)
        return 0;
      v5 = *(const void **)(v2 + 432);
      if (v5)
      {
        CFRelease(v5);
        *(_QWORD *)(v2 + 432) = 0;
      }
      *(_QWORD *)(v2 + 432) = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2);
    }
    else
    {
      v6 = *(const void **)(result + 432);
      if (v6)
      {
        CFRelease(v6);
        *(_QWORD *)(v2 + 432) = 0;
      }
    }
    if (nelog_is_extra_vpn_logging_enabled())
    {
      v7 = ne_log_obj();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        v8 = 136315394;
        v9 = v2 + 265;
        v10 = 2112;
        v11 = a2;
        _os_log_impl(&dword_19BD16000, v7, OS_LOG_TYPE_DEFAULT, "%s: set DNS domain to %@", (uint8_t *)&v8, 0x16u);
      }
    }
    return 1;
  }
  return result;
}

CFStringRef NEVirtualInterfaceCopyDNSDomain(uint64_t a1)
{
  const __CFString *v2;

  if (a1 && !*(_BYTE *)(a1 + 264) && (v2 = *(const __CFString **)(a1 + 432)) != 0)
    return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v2);
  else
    return 0;
}

uint64_t NEVirtualInterfaceSetDNSServers(uint64_t result, const void *a2)
{
  uint64_t v2;
  CFTypeID TypeID;
  const void *v5;
  const void *v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  const void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v2 = result;
    if (*(_BYTE *)(result + 264))
      return 0;
    if (a2)
    {
      TypeID = CFArrayGetTypeID();
      if (CFGetTypeID(a2) != TypeID)
        return 0;
      v5 = *(const void **)(v2 + 416);
      if (v5)
      {
        CFRelease(v5);
        *(_QWORD *)(v2 + 416) = 0;
      }
      *(_QWORD *)(v2 + 416) = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFArrayRef)a2);
    }
    else
    {
      v6 = *(const void **)(result + 416);
      if (v6)
      {
        CFRelease(v6);
        *(_QWORD *)(v2 + 416) = 0;
      }
    }
    if (nelog_is_extra_vpn_logging_enabled())
    {
      v7 = ne_log_obj();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        v8 = 136315394;
        v9 = v2 + 265;
        v10 = 2112;
        v11 = a2;
        _os_log_impl(&dword_19BD16000, v7, OS_LOG_TYPE_DEFAULT, "%s: set DNS servers to %@", (uint8_t *)&v8, 0x16u);
      }
    }
    return 1;
  }
  return result;
}

CFArrayRef NEVirtualInterfaceCopyDNSServers(uint64_t a1)
{
  const __CFArray *v2;

  if (a1 && !*(_BYTE *)(a1 + 264) && (v2 = *(const __CFArray **)(a1 + 416)) != 0)
    return CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v2);
  else
    return 0;
}

uint64_t NEVirtualInterfaceSetDNSSearchDomains(uint64_t result, const void *a2)
{
  uint64_t v2;
  CFTypeID TypeID;
  const void *v5;
  const void *v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  const void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v2 = result;
    if (*(_BYTE *)(result + 264))
      return 0;
    if (a2)
    {
      TypeID = CFArrayGetTypeID();
      if (CFGetTypeID(a2) != TypeID)
        return 0;
      v5 = *(const void **)(v2 + 424);
      if (v5)
      {
        CFRelease(v5);
        *(_QWORD *)(v2 + 424) = 0;
      }
      *(_QWORD *)(v2 + 424) = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFArrayRef)a2);
    }
    else
    {
      v6 = *(const void **)(result + 424);
      if (v6)
      {
        CFRelease(v6);
        *(_QWORD *)(v2 + 424) = 0;
      }
    }
    if (nelog_is_extra_vpn_logging_enabled())
    {
      v7 = ne_log_obj();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        v8 = 136315394;
        v9 = v2 + 265;
        v10 = 2112;
        v11 = a2;
        _os_log_impl(&dword_19BD16000, v7, OS_LOG_TYPE_DEFAULT, "%s: set DNS search domains to %@", (uint8_t *)&v8, 0x16u);
      }
    }
    return 1;
  }
  return result;
}

CFArrayRef NEVirtualInterfaceCopyDNSSearchDomains(uint64_t a1)
{
  const __CFArray *v2;

  if (a1 && !*(_BYTE *)(a1 + 264) && (v2 = *(const __CFArray **)(a1 + 424)) != 0)
    return CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v2);
  else
    return 0;
}

uint64_t NEVirtualInterfaceSetDNSSupplementalMatchDomains(uint64_t result, const void *a2)
{
  uint64_t v2;
  CFTypeID TypeID;
  const void *v5;
  const void *v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  const void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v2 = result;
    if (*(_BYTE *)(result + 264))
      return 0;
    if (a2)
    {
      TypeID = CFArrayGetTypeID();
      if (CFGetTypeID(a2) != TypeID)
        return 0;
      v5 = *(const void **)(v2 + 392);
      if (v5)
      {
        CFRelease(v5);
        *(_QWORD *)(v2 + 392) = 0;
      }
      *(_QWORD *)(v2 + 392) = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFArrayRef)a2);
    }
    else
    {
      v6 = *(const void **)(result + 392);
      if (v6)
      {
        CFRelease(v6);
        *(_QWORD *)(v2 + 392) = 0;
      }
    }
    if (nelog_is_extra_vpn_logging_enabled())
    {
      v7 = ne_log_large_obj();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        v8 = 136315394;
        v9 = v2 + 265;
        v10 = 2112;
        v11 = a2;
        _os_log_impl(&dword_19BD16000, v7, OS_LOG_TYPE_DEFAULT, "%s: set DNS supplemental match domains to %@", (uint8_t *)&v8, 0x16u);
      }
    }
    return 1;
  }
  return result;
}

CFArrayRef NEVirtualInterfaceCopyDNSSupplementalMatchDomains(uint64_t a1)
{
  const __CFArray *v2;

  if (a1 && !*(_BYTE *)(a1 + 264) && (v2 = *(const __CFArray **)(a1 + 392)) != 0)
    return CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v2);
  else
    return 0;
}

uint64_t NEVirtualInterfaceSetDNSSupplementalMatchOrders(uint64_t result, const void *a2)
{
  uint64_t v2;
  CFTypeID TypeID;
  const void *v5;
  const void *v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  const void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v2 = result;
    if (*(_BYTE *)(result + 264))
      return 0;
    if (a2)
    {
      TypeID = CFArrayGetTypeID();
      if (CFGetTypeID(a2) != TypeID)
        return 0;
      v5 = *(const void **)(v2 + 400);
      if (v5)
      {
        CFRelease(v5);
        *(_QWORD *)(v2 + 400) = 0;
      }
      *(_QWORD *)(v2 + 400) = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFArrayRef)a2);
    }
    else
    {
      v6 = *(const void **)(result + 400);
      if (v6)
      {
        CFRelease(v6);
        *(_QWORD *)(v2 + 400) = 0;
      }
    }
    if (nelog_is_extra_vpn_logging_enabled())
    {
      v7 = ne_log_obj();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        v8 = 136315394;
        v9 = v2 + 265;
        v10 = 2112;
        v11 = a2;
        _os_log_impl(&dword_19BD16000, v7, OS_LOG_TYPE_DEFAULT, "%s: set DNS supplemental match orders to %@", (uint8_t *)&v8, 0x16u);
      }
    }
    return 1;
  }
  return result;
}

CFArrayRef NEVirtualInterfaceCopyDNSSupplementalMatchOrders(uint64_t a1)
{
  const __CFArray *v2;

  if (a1 && !*(_BYTE *)(a1 + 264) && (v2 = *(const __CFArray **)(a1 + 400)) != 0)
    return CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v2);
  else
    return 0;
}

uint64_t NEVirtualInterfaceSetDNSSupplementalMatchDomainsNoSearch(uint64_t result, int a2)
{
  if (result)
  {
    if (*(_BYTE *)(result + 264))
    {
      return 0;
    }
    else
    {
      *(_DWORD *)(result + 408) = a2;
      return 1;
    }
  }
  return result;
}

uint64_t NEVirtualInterfaceGetDNSSupplementalMatchDomainsNoSearch(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 264))
      return 0;
    else
      return *(unsigned int *)(result + 408);
  }
  return result;
}

uint64_t NEVirtualInterfaceSetDNSServiceIdentifier(uint64_t result, int a2)
{
  if (result)
  {
    if (*(_BYTE *)(result + 264))
    {
      return 0;
    }
    else
    {
      *(_DWORD *)(result + 440) = a2;
      return 1;
    }
  }
  return result;
}

uint64_t NEVirtualInterfaceSetDNSPort(uint64_t result, int a2)
{
  if (result)
  {
    if (*(_BYTE *)(result + 264))
    {
      return 0;
    }
    else
    {
      *(_DWORD *)(result + 444) = a2;
      return 1;
    }
  }
  return result;
}

uint64_t NEVirtualInterfaceSetProxies(uint64_t result, const void *a2)
{
  uint64_t v2;
  CFTypeID TypeID;
  const void *v5;
  const void *v6;

  if (result)
  {
    v2 = result;
    if (*(_BYTE *)(result + 264))
      return 0;
    if (a2)
    {
      TypeID = CFDictionaryGetTypeID();
      if (CFGetTypeID(a2) != TypeID)
        return 0;
      v5 = *(const void **)(v2 + 448);
      if (v5)
      {
        CFRelease(v5);
        *(_QWORD *)(v2 + 448) = 0;
      }
      *(_QWORD *)(v2 + 448) = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFDictionaryRef)a2);
    }
    else
    {
      v6 = *(const void **)(result + 448);
      if (v6)
      {
        CFRelease(v6);
        *(_QWORD *)(v2 + 448) = 0;
      }
    }
    return 1;
  }
  return result;
}

CFDictionaryRef NEVirtualInterfaceCopyProxies(uint64_t a1)
{
  if (!a1 || *(_BYTE *)(a1 + 264) || *(_QWORD *)(a1 + 448))
    return 0;
  else
    return CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
}

uint64_t NEVirtualInterfaceGetType(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 256);
  return result;
}

uint64_t NEVirtualInterfaceDupSocket(uint64_t a1)
{
  if (a1)
    return dup(*(_DWORD *)(a1 + 296));
  else
    return 0xFFFFFFFFLL;
}

uint64_t NEVirtualInterfaceGetIndex(uint64_t a1)
{
  uint64_t result;
  NSObject *v2;
  int v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (a1)
    return *(unsigned int *)(a1 + 292);
  v2 = ne_log_obj();
  result = os_log_type_enabled(v2, OS_LOG_TYPE_FAULT);
  if ((_DWORD)result)
  {
    v3 = 136315138;
    v4 = "NEVirtualInterfaceGetIndex";
    _os_log_fault_impl(&dword_19BD16000, v2, OS_LOG_TYPE_FAULT, "%s called with null interface", (uint8_t *)&v3, 0xCu);
    return 0;
  }
  return result;
}

__CFDictionary *NEVirtualInterfaceCopyStatistics(uint64_t a1)
{
  __CFDictionary *Mutable;
  NSObject *v3;
  int *v5;
  char *v6;
  NSObject *v7;
  size_t v8;
  uint8_t buf[4];
  uint64_t v10;
  __int16 v11;
  char *v12;
  int v13[4];
  int v14;
  int v15;
  uint8_t v16[16];
  __int128 v17;
  __int128 v18;
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v19 = 0;
      v17 = 0u;
      v18 = 0u;
      *(_OWORD *)v16 = 0u;
      v20 = 0u;
      v21 = 0u;
      v22 = 0u;
      v23 = 0u;
      v24 = 0u;
      v25 = 0u;
      v26 = 0u;
      v27 = 0u;
      *(_OWORD *)v13 = xmmword_19BED7550;
      v14 = *(_DWORD *)(a1 + 292);
      v15 = 1;
      v8 = 180;
      if (sysctl(v13, 6u, v16, &v8, 0, 0) == -1)
      {
        v3 = ne_log_obj();
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        {
          v5 = __error();
          v6 = strerror(*v5);
          *(_DWORD *)buf = 136315394;
          v10 = a1 + 265;
          v11 = 2080;
          v12 = v6;
          _os_log_error_impl(&dword_19BD16000, v3, OS_LOG_TYPE_ERROR, "Failed to get statistics from interface %s: %s", buf, 0x16u);
        }
      }
      NEAddInt64ToDictionary(Mutable, CFSTR("BytesIn"), v24);
      NEAddInt64ToDictionary(Mutable, CFSTR("BytesOut"), *((uint64_t *)&v24 + 1));
      NEAddInt64ToDictionary(Mutable, CFSTR("PacketsIn"), *((uint64_t *)&v21 + 1));
      NEAddInt64ToDictionary(Mutable, CFSTR("PacketsOut"), *((uint64_t *)&v22 + 1));
      NEAddInt64ToDictionary(Mutable, CFSTR("ErrorsIn"), v22);
      NEAddInt64ToDictionary(Mutable, CFSTR("ErrorsOut"), v23);
    }
  }
  else
  {
    v7 = ne_log_obj();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v16 = 136315138;
      *(_QWORD *)&v16[4] = "NEVirtualInterfaceCopyStatistics";
      _os_log_fault_impl(&dword_19BD16000, v7, OS_LOG_TYPE_FAULT, "%s called with null interface", v16, 0xCu);
    }
    return 0;
  }
  return Mutable;
}

uint64_t NEVirtualInterfaceGetDelegateInterfaceFunctionalType(uint64_t result)
{
  uint64_t v1;
  const __CFString *v2;
  int v3;
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  NSObject *v7;
  uint32_t v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  int *v12;
  char *v13;
  int *v14;
  char *v15;
  char buffer[8];
  uint64_t v17;
  uint8_t v18[4];
  char *v19;
  uint8_t buf[16];
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v1 = result;
    v2 = *(const __CFString **)(result + 480);
    if (v2)
    {
      result = *(unsigned int *)(result + 304);
      if ((_DWORD)result)
        return result;
      *(_QWORD *)buffer = 0;
      v17 = 0;
      if (CFStringGetCString(v2, buffer, 16, 0x8000100u))
      {
        *(_OWORD *)buf = 0u;
        v21 = 0u;
        if (*(_DWORD *)(v1 + 308) == -1 && (v3 = socket(2, 2, 0), *(_DWORD *)(v1 + 308) = v3, v3 < 0))
        {
          v10 = ne_log_obj();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            v14 = __error();
            v15 = strerror(*v14);
            *(_DWORD *)v18 = 136315138;
            v19 = v15;
            _os_log_error_impl(&dword_19BD16000, v10, OS_LOG_TYPE_ERROR, "Failed to create ioctl socket to get functional type: %s", v18, 0xCu);
          }
        }
        else
        {
          __strlcpy_chk();
          LODWORD(v21) = 0;
          if ((ioctl(*(_DWORD *)(v1 + 308), 0xC02069ADuLL, buf) & 0x80000000) == 0)
          {
            result = v21;
LABEL_22:
            *(_DWORD *)(v1 + 304) = result;
            return result;
          }
          v9 = ne_log_obj();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            v12 = __error();
            v13 = strerror(*v12);
            *(_DWORD *)v18 = 136315138;
            v19 = v13;
            _os_log_error_impl(&dword_19BD16000, v9, OS_LOG_TYPE_ERROR, "SIOCGIFFUNCTIONALTYPE failed: %s", v18, 0xCu);
          }
          close(*(_DWORD *)(v1 + 308));
          *(_DWORD *)(v1 + 308) = -1;
        }
        if (!*__error())
        {
          result = 0;
          goto LABEL_22;
        }
        v11 = ne_log_obj();
        result = os_log_type_enabled(v11, OS_LOG_TYPE_FAULT);
        if (!(_DWORD)result)
          return result;
        *(_WORD *)buf = 0;
        v6 = "interface_get_functional_type failed";
        v7 = v11;
        v8 = 2;
      }
      else
      {
        v4 = ne_log_obj();
        result = os_log_type_enabled(v4, OS_LOG_TYPE_FAULT);
        if (!(_DWORD)result)
          return result;
        v5 = *(_QWORD *)(v1 + 480);
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v5;
        v6 = "CFStringGetCString(%@) failed";
        v7 = v4;
        v8 = 12;
      }
      _os_log_fault_impl(&dword_19BD16000, v7, OS_LOG_TYPE_FAULT, v6, buf, v8);
    }
    return 0;
  }
  return result;
}

__int128 *nw_utun_protocol_identifier()
{
  if (nw_utun_protocol_identifier_packetProtocolOnceToken != -1)
    dispatch_once(&nw_utun_protocol_identifier_packetProtocolOnceToken, &__block_literal_global_22852);
  return &g_nw_utun_protocol_identifier;
}

uint64_t __nw_utun_protocol_identifier_block_invoke()
{
  qword_1EE413658 = 0;
  g_nw_utun_protocol_identifier = 0u;
  unk_1EE413648 = 0u;
  g_nw_utun_protocol_callbacks = 0u;
  *(_OWORD *)algn_1EE413670 = 0u;
  xmmword_1EE413680 = 0u;
  unk_1EE413690 = 0u;
  xmmword_1EE4136A0 = 0u;
  *(_OWORD *)&qword_1EE4136B0 = 0u;
  xmmword_1EE4136C0 = 0u;
  unk_1EE4136D0 = 0u;
  xmmword_1EE4136E0 = 0u;
  unk_1EE4136F0 = 0u;
  xmmword_1EE413700 = 0u;
  unk_1EE413710 = 0u;
  xmmword_1EE413720 = 0u;
  unk_1EE413730 = 0u;
  xmmword_1EE413740 = 0u;
  unk_1EE413750 = 0u;
  xmmword_1EE413760 = 0u;
  __strlcpy_chk();
  qword_1EE413658 = 0x100000002;
  nw_protocol_set_default_one_to_one_callbacks();
  *(_QWORD *)&g_nw_utun_protocol_callbacks = nw_utun_protocol_add_input_handler;
  *((_QWORD *)&g_nw_utun_protocol_callbacks + 1) = nw_utun_protocol_remove_input_handler;
  qword_1EE4136B0 = (uint64_t)nw_utun_protocol_get_input_frames;
  unk_1EE4136B8 = nw_utun_protocol_get_output_frames;
  *(_QWORD *)&xmmword_1EE4136C0 = nw_utun_protocol_finalize_output_frames;
  return nw_protocol_register();
}

uint64_t nw_utun_protocol_add_input_handler(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 48) = a2;
  uuid_copy((unsigned __int8 *)a1, (const unsigned __int8 *)a2);
  *(_QWORD *)(a2 + 32) = a1;
  return 1;
}

BOOL nw_utun_protocol_remove_input_handler(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v7;

  *(_QWORD *)(a2 + 32) = 0;
  v4 = a1[6];
  if (v4 == a2)
  {
    v7 = a1[4];
    if (v7)
      (*(void (**)(void))(*(_QWORD *)(v7 + 24) + 8))();
    a1[6] = 0;
    if (a3)
      free(a1);
  }
  return v4 == a2;
}

uint64_t nw_utun_protocol_get_input_frames(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 80))();
  nw_frame_array_foreach();
  return v1;
}

uint64_t nw_utun_protocol_get_output_frames(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 88))();
  nw_frame_array_foreach();
  return v1;
}

uint64_t nw_utun_protocol_finalize_output_frames(uint64_t a1)
{
  nw_frame_array_foreach();
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 96))();
}

_QWORD *nw_utun_protocol_create()
{
  _QWORD *v0;
  _QWORD *v1;
  NSObject *v2;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v0 = malloc_type_calloc(1uLL, 0x40uLL, 0x10A0040C9AB51B7uLL);
  v1 = v0;
  if (v0)
  {
    v0[2] = &g_nw_utun_protocol_identifier;
    v0[3] = &g_nw_utun_protocol_callbacks;
    v0[5] = 0;
  }
  else
  {
    v2 = ne_log_obj();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
    {
      v4 = 134217984;
      v5 = 64;
      _os_log_fault_impl(&dword_19BD16000, v2, OS_LOG_TYPE_FAULT, "calloc(%zu) failed", (uint8_t *)&v4, 0xCu);
    }
  }
  return v1;
}

uint64_t __nw_utun_protocol_finalize_output_frames_block_invoke()
{
  char v0;
  _DWORD *v1;
  int v2;
  int v3;

  v0 = *(_BYTE *)nw_frame_unclaimed_bytes();
  nw_frame_unclaim();
  v1 = (_DWORD *)nw_frame_unclaimed_bytes();
  if ((v0 & 0xF0) == 0x60)
    v2 = 503316480;
  else
    v2 = 0;
  if ((v0 & 0xF0) == 0x40)
    v3 = 0x2000000;
  else
    v3 = v2;
  *v1 = v3;
  return 1;
}

uint64_t __nw_utun_protocol_get_output_frames_block_invoke()
{
  nw_frame_claim();
  return 1;
}

uint64_t __nw_utun_protocol_get_input_frames_block_invoke()
{
  nw_frame_claim();
  return 1;
}

uint64_t NEVirtualInterfaceDidPublish(uint64_t result)
{
  if (result)
    return (*(unsigned __int8 *)(result + 312) >> 6) & 1;
  return result;
}

void sub_19BEAC584(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BEAD4F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BEAD8A0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BEAD910(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t NEVPNConfigurationCreate()
{
  return 0;
}

uint64_t NEVPNConfigurationGetTunnelType()
{
  return 1;
}

uint64_t NEVPNConfigurationCopyAll()
{
  return 0;
}

uint64_t NEVPNConfigurationCopy()
{
  return 0;
}

uint64_t NEVPNConfigurationSet()
{
  return 0;
}

uint64_t NEVPNConfigurationRemove()
{
  return 0;
}

uint64_t NEVPNConfigurationSetName()
{
  return 0;
}

uint64_t NEVPNConfigurationGetName()
{
  return 0;
}

uint64_t NEVPNConfigurationSetEnabled()
{
  return 0;
}

uint64_t NEVPNConfigurationGetEnabled()
{
  return 0;
}

uint64_t NEVPNConfigurationEnableVPNType()
{
  return 0;
}

uint64_t NEVPNConfigurationIsVPNTypeEnabled()
{
  return 0;
}

uint64_t NEVPNConfigurationCopyVendorData()
{
  return 0;
}

uint64_t NEVPNConfigurationSetVendorData()
{
  return 0;
}

uint64_t NEVPNCopyLastError()
{
  return 0;
}

uint64_t NEVPNConfigurationSetCallback()
{
  return 0;
}

uint64_t NEVPNConfigurationSetMessageCallback()
{
  return 0;
}

uint64_t NEVPNConfigurationScheduleWithRunLoop()
{
  return 0;
}

uint64_t NEVPNConfigurationUnscheduleFromRunLoop()
{
  return 0;
}

uint64_t NEVPNConfigurationConnectionStart()
{
  return 0;
}

uint64_t NEVPNConfigurationConnectionStop()
{
  return 0;
}

uint64_t NEVPNConfigurationGetStatus()
{
  return 0xFFFFFFFFLL;
}

uint64_t NEVPNConfigurationSendMessage()
{
  return 0;
}

uint64_t NEVPNConfigurationCopyIdentities()
{
  return 0;
}

uint64_t NEVPNConfigurationCopyCertificate()
{
  return 0;
}

uint64_t NEVPNConfigurationCopyLastConnectionError()
{
  return 0;
}

uint64_t NEVPNConfigurationSetPersistentData()
{
  return 0;
}

uint64_t NEVPNConfigurationCopyPersistentData()
{
  return 0;
}

uint64_t NEVPNConfigurationValidateCertificate()
{
  return 3;
}

uint64_t NEVPNConfigurationCopyAppRuleIDs()
{
  return 0;
}

uint64_t NEVPNConfigurationCopyAppRule()
{
  return 0;
}

uint64_t NEVPNConfigurationRemoveAppRule()
{
  return 0;
}

uint64_t NEVPNConfigurationSetAppRule()
{
  return 0;
}

void sub_19BEADED4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BEADF90(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BEAEB0C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BEAFA1C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BEAFB0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_19BEAFC50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_19BEB10D4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BEB11DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BEB12BC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BEB1394(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BEB1474(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BEB153C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BEB1610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_19BEB16D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BEB17AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_19BEB181C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BEB1894(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BEB2010(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BEB2A38(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BEB2DE4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BEB377C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id obj, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  _Block_object_dispose(&a53, 8);
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__23590(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__23591(uint64_t a1)
{

}

void sub_19BEB5A00(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BEB5A98(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BEBAA40(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BEBAC34(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BEBADB0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BEBAE40(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BEBAED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_19BEBAF64(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BEBB008(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BEBB09C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BEBB140(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BEBB1D4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BEBB278(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BEBB30C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BEBB3B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BEBB434(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BEBB4C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BEBC314(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BEBC58C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BEBCA34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__24549(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__24550(uint64_t a1)
{

}

void sub_19BEBD7D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BEC1088(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BEC1110(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BEC1250(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19BEC12EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19BEC499C()
{
  return MEMORY[0x1E0CAE908]();
}

uint64_t sub_19BEC49A8()
{
  return MEMORY[0x1E0CAE910]();
}

uint64_t sub_19BEC49B4()
{
  return MEMORY[0x1E0CAF980]();
}

uint64_t sub_19BEC49C0()
{
  return MEMORY[0x1E0CB0140]();
}

uint64_t sub_19BEC49CC()
{
  return MEMORY[0x1E0CB01B0]();
}

uint64_t sub_19BEC49D8()
{
  return MEMORY[0x1E0CB01F0]();
}

uint64_t sub_19BEC49E4()
{
  return MEMORY[0x1E0CB0228]();
}

uint64_t sub_19BEC49F0()
{
  return MEMORY[0x1E0CB0298]();
}

uint64_t sub_19BEC49FC()
{
  return MEMORY[0x1E0D1BDF8]();
}

uint64_t sub_19BEC4A08()
{
  return MEMORY[0x1E0D1BE00]();
}

uint64_t sub_19BEC4A14()
{
  return MEMORY[0x1E0D1BE10]();
}

uint64_t sub_19BEC4A20()
{
  return MEMORY[0x1E0D1BE18]();
}

uint64_t sub_19BEC4A2C()
{
  return MEMORY[0x1E0D1BE20]();
}

uint64_t sub_19BEC4A38()
{
  return MEMORY[0x1E0D1BE28]();
}

uint64_t sub_19BEC4A44()
{
  return MEMORY[0x1E0D1BE30]();
}

uint64_t sub_19BEC4A50()
{
  return MEMORY[0x1E0D1BE38]();
}

uint64_t sub_19BEC4A5C()
{
  return MEMORY[0x1E0D1BE48]();
}

uint64_t sub_19BEC4A68()
{
  return MEMORY[0x1E0D1BE50]();
}

uint64_t sub_19BEC4A74()
{
  return MEMORY[0x1E0D1BE58]();
}

uint64_t sub_19BEC4A80()
{
  return MEMORY[0x1E0D1BE60]();
}

uint64_t sub_19BEC4A8C()
{
  return MEMORY[0x1E0D1BE68]();
}

uint64_t sub_19BEC4A98()
{
  return MEMORY[0x1E0CCE208]();
}

uint64_t sub_19BEC4AA4()
{
  return MEMORY[0x1E0CCE2A0]();
}

uint64_t sub_19BEC4AB0()
{
  return MEMORY[0x1E0CCE2B0]();
}

uint64_t sub_19BEC4ABC()
{
  return MEMORY[0x1E0CCE3A0]();
}

uint64_t sub_19BEC4AC8()
{
  return MEMORY[0x1E0CCE3C0]();
}

uint64_t sub_19BEC4AD4()
{
  return MEMORY[0x1E0CCE3D0]();
}

uint64_t sub_19BEC4AE0()
{
  return MEMORY[0x1E0CCE698]();
}

uint64_t sub_19BEC4AEC()
{
  return MEMORY[0x1E0CA91F8]();
}

uint64_t sub_19BEC4AF8()
{
  return MEMORY[0x1E0CA9200]();
}

uint64_t sub_19BEC4B04()
{
  return MEMORY[0x1E0CA9210]();
}

uint64_t sub_19BEC4B10()
{
  return MEMORY[0x1E0CA9228]();
}

uint64_t sub_19BEC4B1C()
{
  return MEMORY[0x1E0CA9230]();
}

uint64_t sub_19BEC4B28()
{
  return MEMORY[0x1E0CA9240]();
}

uint64_t sub_19BEC4B34()
{
  return MEMORY[0x1E0CA9248]();
}

uint64_t sub_19BEC4B40()
{
  return MEMORY[0x1E0CA9378]();
}

uint64_t sub_19BEC4B4C()
{
  return MEMORY[0x1E0CA9388]();
}

uint64_t sub_19BEC4B58()
{
  return MEMORY[0x1E0CA93A0]();
}

uint64_t sub_19BEC4B64()
{
  return MEMORY[0x1E0CA93B0]();
}

uint64_t sub_19BEC4B70()
{
  return MEMORY[0x1E0CA93C8]();
}

uint64_t sub_19BEC4B7C()
{
  return MEMORY[0x1E0D1BE78]();
}

uint64_t sub_19BEC4B88()
{
  return MEMORY[0x1E0CA93E8]();
}

uint64_t sub_19BEC4B94()
{
  return MEMORY[0x1E0CA9548]();
}

uint64_t sub_19BEC4BA0()
{
  return MEMORY[0x1E0CA9558]();
}

uint64_t sub_19BEC4BAC()
{
  return MEMORY[0x1E0CA9560]();
}

uint64_t sub_19BEC4BB8()
{
  return MEMORY[0x1E0CA95B8]();
}

uint64_t sub_19BEC4BC4()
{
  return MEMORY[0x1E0CA95C0]();
}

uint64_t sub_19BEC4BD0()
{
  return MEMORY[0x1E0CA95E8]();
}

uint64_t sub_19BEC4BDC()
{
  return MEMORY[0x1E0CA9600]();
}

uint64_t sub_19BEC4BE8()
{
  return MEMORY[0x1E0CA9618]();
}

uint64_t sub_19BEC4BF4()
{
  return MEMORY[0x1E0CA9620]();
}

uint64_t sub_19BEC4C00()
{
  return MEMORY[0x1E0CA9630]();
}

uint64_t sub_19BEC4C0C()
{
  return MEMORY[0x1E0CA9638]();
}

uint64_t sub_19BEC4C18()
{
  return MEMORY[0x1E0CA9640]();
}

uint64_t sub_19BEC4C24()
{
  return MEMORY[0x1E0CA9648]();
}

uint64_t sub_19BEC4C30()
{
  return MEMORY[0x1E0CA9658]();
}

uint64_t sub_19BEC4C3C()
{
  return MEMORY[0x1E0CA9660]();
}

uint64_t sub_19BEC4C48()
{
  return MEMORY[0x1E0CA9668]();
}

uint64_t sub_19BEC4C54()
{
  return MEMORY[0x1E0CA9690]();
}

uint64_t sub_19BEC4C60()
{
  return MEMORY[0x1E0CA96A8]();
}

uint64_t sub_19BEC4C6C()
{
  return MEMORY[0x1E0CA96C0]();
}

uint64_t sub_19BEC4C78()
{
  return MEMORY[0x1E0CA96D8]();
}

uint64_t sub_19BEC4C84()
{
  return MEMORY[0x1E0CA9768]();
}

uint64_t sub_19BEC4C90()
{
  return MEMORY[0x1E0CA9790]();
}

uint64_t sub_19BEC4C9C()
{
  return MEMORY[0x1E0CA97A8]();
}

uint64_t sub_19BEC4CA8()
{
  return MEMORY[0x1E0CA97B8]();
}

uint64_t sub_19BEC4CB4()
{
  return MEMORY[0x1E0CA97C8]();
}

uint64_t sub_19BEC4CC0()
{
  return MEMORY[0x1E0CA9870]();
}

uint64_t sub_19BEC4CCC()
{
  return MEMORY[0x1E0CA9880]();
}

uint64_t sub_19BEC4CD8()
{
  return MEMORY[0x1E0CA9898]();
}

uint64_t sub_19BEC4CE4()
{
  return MEMORY[0x1E0CA98A8]();
}

uint64_t sub_19BEC4CF0()
{
  return MEMORY[0x1E0CA98B8]();
}

uint64_t sub_19BEC4CFC()
{
  return MEMORY[0x1E0CA9990]();
}

uint64_t sub_19BEC4D08()
{
  return MEMORY[0x1E0CA99A0]();
}

uint64_t sub_19BEC4D14()
{
  return MEMORY[0x1E0CA99B8]();
}

uint64_t sub_19BEC4D20()
{
  return MEMORY[0x1E0CA99C8]();
}

uint64_t sub_19BEC4D2C()
{
  return MEMORY[0x1E0CA99D0]();
}

uint64_t sub_19BEC4D38()
{
  return MEMORY[0x1E0CA9A60]();
}

uint64_t sub_19BEC4D44()
{
  return MEMORY[0x1E0CA9A70]();
}

uint64_t sub_19BEC4D50()
{
  return MEMORY[0x1E0CA9A78]();
}

uint64_t sub_19BEC4D5C()
{
  return MEMORY[0x1E0CA9A88]();
}

uint64_t sub_19BEC4D68()
{
  return MEMORY[0x1E0CA9A90]();
}

uint64_t sub_19BEC4D74()
{
  return MEMORY[0x1E0CA9A98]();
}

uint64_t sub_19BEC4D80()
{
  return MEMORY[0x1E0CA9AA0]();
}

uint64_t sub_19BEC4D8C()
{
  return MEMORY[0x1E0CA9AA8]();
}

uint64_t sub_19BEC4D98()
{
  return MEMORY[0x1E0CA9AB8]();
}

uint64_t sub_19BEC4DA4()
{
  return MEMORY[0x1E0CA9AC0]();
}

uint64_t sub_19BEC4DB0()
{
  return MEMORY[0x1E0CA9AD0]();
}

uint64_t sub_19BEC4DBC()
{
  return MEMORY[0x1E0CA9AD8]();
}

uint64_t sub_19BEC4DC8()
{
  return MEMORY[0x1E0CA9AE0]();
}

uint64_t sub_19BEC4DD4()
{
  return MEMORY[0x1E0CA9AE8]();
}

uint64_t sub_19BEC4DE0()
{
  return MEMORY[0x1E0CB1988]();
}

uint64_t sub_19BEC4DEC()
{
  return MEMORY[0x1E0CB19F0]();
}

uint64_t sub_19BEC4DF8()
{
  return MEMORY[0x1E0CB1A18]();
}

uint64_t sub_19BEC4E04()
{
  return MEMORY[0x1E0CB1AC0]();
}

uint64_t sub_19BEC4E10()
{
  return MEMORY[0x1E0CB1AE8]();
}

uint64_t sub_19BEC4E1C()
{
  return MEMORY[0x1E0DEB940]();
}

uint64_t sub_19BEC4E28()
{
  return MEMORY[0x1E0DEC3E0]();
}

uint64_t sub_19BEC4E34()
{
  return MEMORY[0x1E0DEC660]();
}

uint64_t sub_19BEC4E40()
{
  return MEMORY[0x1E0DEC670]();
}

uint64_t sub_19BEC4E4C()
{
  return MEMORY[0x1E0DEC688]();
}

uint64_t sub_19BEC4E58()
{
  return MEMORY[0x1E0DEC6C0]();
}

uint64_t sub_19BEC4E64()
{
  return MEMORY[0x1E0DEC6C8]();
}

uint64_t sub_19BEC4E70()
{
  return MEMORY[0x1E0DECD18]();
}

uint64_t sub_19BEC4E7C()
{
  return MEMORY[0x1E0DEDB10]();
}

uint64_t sub_19BEC4E88()
{
  return MEMORY[0x1E0DEDB18]();
}

uint64_t sub_19BEC4E94()
{
  return MEMORY[0x1E0DEDB20]();
}

uint64_t sub_19BEC4EA0()
{
  return MEMORY[0x1E0DEDB28]();
}

uint64_t sub_19BEC4EAC()
{
  return MEMORY[0x1E0DEDEF8]();
}

uint64_t sub_19BEC4EB8()
{
  return MEMORY[0x1E0DEDF10]();
}

uint64_t sub_19BEC4EC4()
{
  return MEMORY[0x1E0DEDF40]();
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x1E0D15428]();
}

CCCryptorStatus CCCrypt(CCOperation op, CCAlgorithm alg, CCOptions options, const void *key, size_t keyLength, const void *iv, const void *dataIn, size_t dataInLength, void *dataOut, size_t dataOutAvailable, size_t *dataOutMoved)
{
  return MEMORY[0x1E0C80088](*(_QWORD *)&op, *(_QWORD *)&alg, *(_QWORD *)&options, key, keyLength, iv, dataIn, dataInLength);
}

CCCryptorStatus CCCryptorCreate(CCOperation op, CCAlgorithm alg, CCOptions options, const void *key, size_t keyLength, const void *iv, CCCryptorRef *cryptorRef)
{
  return MEMORY[0x1E0C80098](*(_QWORD *)&op, *(_QWORD *)&alg, *(_QWORD *)&options, key, keyLength, iv, cryptorRef);
}

CCCryptorStatus CCCryptorRelease(CCCryptorRef cryptorRef)
{
  return MEMORY[0x1E0C80108](cryptorRef);
}

CCCryptorStatus CCCryptorReset(CCCryptorRef cryptorRef, const void *iv)
{
  return MEMORY[0x1E0C80110](cryptorRef, iv);
}

CCCryptorStatus CCCryptorUpdate(CCCryptorRef cryptorRef, const void *dataIn, size_t dataInLength, void *dataOut, size_t dataOutAvailable, size_t *dataOutMoved)
{
  return MEMORY[0x1E0C80118](cryptorRef, dataIn, dataInLength, dataOut, dataOutAvailable, dataOutMoved);
}

uint64_t CCDeriveKey()
{
  return MEMORY[0x1E0C80120]();
}

uint64_t CCHKDFExpand()
{
  return MEMORY[0x1E0C801D0]();
}

void CCHmac(CCHmacAlgorithm algorithm, const void *key, size_t keyLength, const void *data, size_t dataLength, void *macOut)
{
  MEMORY[0x1E0C801D8](*(_QWORD *)&algorithm, key, keyLength, data, dataLength, macOut);
}

uint64_t CCHmacClone()
{
  return MEMORY[0x1E0C801E0]();
}

uint64_t CCHmacCreate()
{
  return MEMORY[0x1E0C801E8]();
}

uint64_t CCHmacDestroy()
{
  return MEMORY[0x1E0C801F0]();
}

void CCHmacFinal(CCHmacContext *ctx, void *macOut)
{
  MEMORY[0x1E0C801F8](ctx, macOut);
}

uint64_t CCHmacOutputSizeFromRef()
{
  return MEMORY[0x1E0C80210]();
}

void CCHmacUpdate(CCHmacContext *ctx, const void *data, size_t dataLength)
{
  MEMORY[0x1E0C80218](ctx, data, dataLength);
}

uint64_t CCKDFParametersCreateHkdf()
{
  return MEMORY[0x1E0C80228]();
}

uint64_t CCKDFParametersDestroy()
{
  return MEMORY[0x1E0C80230]();
}

unsigned __int8 *__cdecl CC_SHA1(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1E0C80328](data, *(_QWORD *)&len, md);
}

int CC_SHA1_Final(unsigned __int8 *md, CC_SHA1_CTX *c)
{
  return MEMORY[0x1E0C80330](md, c);
}

int CC_SHA1_Init(CC_SHA1_CTX *c)
{
  return MEMORY[0x1E0C80338](c);
}

int CC_SHA1_Update(CC_SHA1_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1E0C80340](c, data, *(_QWORD *)&len);
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1E0C80368](data, *(_QWORD *)&len, md);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C97C58]();
  return result;
}

void *__cdecl CFAllocatorAllocate(CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint)
{
  return (void *)MEMORY[0x1E0C97C98](allocator, size, hint);
}

void CFAllocatorDeallocate(CFAllocatorRef allocator, void *ptr)
{
  MEMORY[0x1E0C97CB0](allocator, ptr);
}

void CFArrayAppendArray(CFMutableArrayRef theArray, CFArrayRef otherArray, CFRange otherRange)
{
  MEMORY[0x1E0C97CE8](theArray, otherArray, otherRange.location, otherRange.length);
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x1E0C97CF8](theArray, value);
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1E0C97D10](theArray, range.location, range.length, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1E0C97D20](allocator, values, numValues, callBacks);
}

CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray)
{
  return (CFArrayRef)MEMORY[0x1E0C97D30](allocator, theArray);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D38](allocator, capacity, callBacks);
}

CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D50](allocator, capacity, theArray);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

CFIndex CFArrayGetFirstIndexOfValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1E0C97D78](theArray, range.location, range.length, value);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1E0C97D90]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97D98](theArray, idx);
}

void CFArrayRemoveAllValues(CFMutableArrayRef theArray)
{
  MEMORY[0x1E0C97DB8](theArray);
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
  MEMORY[0x1E0C97DC0](theArray, idx);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1E0C97FC8]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1E0C97FE0](BOOLean);
}

uint64_t CFBundleCopyLocalizedStringForLocalization()
{
  return MEMORY[0x1E0C98060]();
}

CFURLRef CFBundleCopyResourceURL(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName)
{
  return (CFURLRef)MEMORY[0x1E0C98080](bundle, resourceName, resourceType, subDirName);
}

CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL)
{
  return (CFBundleRef)MEMORY[0x1E0C980D0](allocator, bundleURL);
}

CFTypeRef CFBundleGetValueForInfoDictionaryKey(CFBundleRef bundle, CFStringRef key)
{
  return (CFTypeRef)MEMORY[0x1E0C98180](bundle, key);
}

CFCalendarRef CFCalendarCreateWithIdentifier(CFAllocatorRef allocator, CFCalendarIdentifier identifier)
{
  return (CFCalendarRef)MEMORY[0x1E0C98240](allocator, identifier);
}

Boolean CFCalendarDecomposeAbsoluteTime(CFCalendarRef calendar, CFAbsoluteTime at, const char *componentDesc, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, componentDesc);
  v3 = va_arg(va, _QWORD);
  return MEMORY[0x1E0C98248](calendar, v3, at);
}

CFStringRef CFCopyDescription(CFTypeRef cf)
{
  return (CFStringRef)MEMORY[0x1E0C98350](cf);
}

void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length)
{
  MEMORY[0x1E0C98390](theData, bytes, length);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1E0C983A0](allocator, bytes, length);
}

CFDataRef CFDataCreateCopy(CFAllocatorRef allocator, CFDataRef theData)
{
  return (CFDataRef)MEMORY[0x1E0C983B0](allocator, theData);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x1E0C983B8](allocator, capacity);
}

CFMutableDataRef CFDataCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDataRef theData)
{
  return (CFMutableDataRef)MEMORY[0x1E0C983C0](allocator, capacity, theData);
}

CFRange CFDataFind(CFDataRef theData, CFDataRef dataToFind, CFRange searchRange, CFDataSearchFlags compareOptions)
{
  CFIndex v4;
  CFIndex v5;
  CFRange result;

  v4 = MEMORY[0x1E0C983D8](theData, dataToFind, searchRange.location, searchRange.length, compareOptions);
  result.length = v5;
  result.location = v4;
  return result;
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1E0C983E0](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
  MEMORY[0x1E0C983F0](theData, range.location, range.length, buffer);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1E0C983F8](theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return (UInt8 *)MEMORY[0x1E0C98408](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1E0C98418]();
}

void CFDataReplaceBytes(CFMutableDataRef theData, CFRange range, const UInt8 *newBytes, CFIndex newLength)
{
  MEMORY[0x1E0C98428](theData, range.location, range.length, newBytes, newLength);
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
  MEMORY[0x1E0C98430](theData, length);
}

CFComparisonResult CFDateCompare(CFDateRef theDate, CFDateRef otherDate, void *context)
{
  return MEMORY[0x1E0C98440](theDate, otherDate, context);
}

CFDateRef CFDateCreate(CFAllocatorRef allocator, CFAbsoluteTime at)
{
  return (CFDateRef)MEMORY[0x1E0C98448](allocator, at);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98500](theDict, key, value);
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1E0C98518](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98530](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98538](allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98558](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1E0C98570](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
  MEMORY[0x1E0C985A0](theDict, keys, values);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1E0C985A8]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1E0C985B8](theDict, key);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
  MEMORY[0x1E0C985E8](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98610](theDict, key, value);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1E0C98620](cf1, cf2);
}

CFErrorRef CFErrorCreate(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, CFDictionaryRef userInfo)
{
  return (CFErrorRef)MEMORY[0x1E0C98650](allocator, domain, code, userInfo);
}

CFAllocatorRef CFGetAllocator(CFTypeRef cf)
{
  return (CFAllocatorRef)MEMORY[0x1E0C98718](cf);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

CFHashCode CFHash(CFTypeRef cf)
{
  return MEMORY[0x1E0C98758](cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1E0C98928](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1E0C989B8]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1E0C989C0](number, theType, valuePtr);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A60](key, applicationID, userName, hostName);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
  MEMORY[0x1E0C98BF8](rl, source, mode);
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x1E0C98C30]();
}

CFRunLoopRef CFRunLoopGetMain(void)
{
  return (CFRunLoopRef)MEMORY[0x1E0C98C40]();
}

void CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
  MEMORY[0x1E0C98C90](rl, source, mode);
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  MEMORY[0x1E0C98EF0](theString, formatOptions, format);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C98F10](theString1, theString2, compareOptions);
}

CFArrayRef CFStringCreateArrayBySeparatingStrings(CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString)
{
  return (CFArrayRef)MEMORY[0x1E0C98F58](alloc, theString, separatorString);
}

CFStringRef CFStringCreateByCombiningStrings(CFAllocatorRef alloc, CFArrayRef theArray, CFStringRef separatorString)
{
  return (CFStringRef)MEMORY[0x1E0C98F68](alloc, theArray, separatorString);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x1E0C98F78](alloc, theString);
}

CFDataRef CFStringCreateExternalRepresentation(CFAllocatorRef alloc, CFStringRef theString, CFStringEncoding encoding, UInt8 lossByte)
{
  return (CFDataRef)MEMORY[0x1E0C98F80](alloc, theString, *(_QWORD *)&encoding, lossByte);
}

CFStringRef CFStringCreateFromExternalRepresentation(CFAllocatorRef alloc, CFDataRef data, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98F88](alloc, data, *(_QWORD *)&encoding);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98F90](alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98F98](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x1E0C98FB8](alloc, bytes, numBytes, *(_QWORD *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98FD0](alloc, cStr, *(_QWORD *)&encoding);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1E0C99018](alloc, formatOptions, format);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99098](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1E0C990A0](theString, *(_QWORD *)&encoding);
}

SInt32 CFStringGetIntValue(CFStringRef str)
{
  return MEMORY[0x1E0C990F0](str);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1E0C99100](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99118](length, *(_QWORD *)&encoding);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1E0C99170]();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return MEMORY[0x1E0C99180](theString, prefix);
}

CFURLRef CFURLCreateFromFileSystemRepresentation(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1E0C993C8](allocator, buffer, bufLen, isDirectory);
}

Boolean CFURLGetFileSystemRepresentation(CFURLRef url, Boolean resolveAgainstBase, UInt8 *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x1E0C99490](url, resolveAgainstBase, buffer, maxBufLen);
}

CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc)
{
  return (CFUUIDRef)MEMORY[0x1E0C99518](alloc);
}

CFUUIDRef CFUUIDCreateFromUUIDBytes(CFAllocatorRef alloc, CFUUIDBytes bytes)
{
  return (CFUUIDRef)MEMORY[0x1E0C99530](alloc, *(_QWORD *)&bytes.byte0, *(_QWORD *)&bytes.byte8);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return (CFStringRef)MEMORY[0x1E0C99538](alloc, uuid);
}

CFUUIDBytes CFUUIDGetUUIDBytes(CFUUIDRef uuid)
{
  uint64_t v1;
  uint64_t v2;
  CFUUIDBytes result;

  v1 = MEMORY[0x1E0C99568](uuid);
  result.byte8 = v2;
  result.byte9 = BYTE1(v2);
  result.byte10 = BYTE2(v2);
  result.byte11 = BYTE3(v2);
  result.byte12 = BYTE4(v2);
  result.byte13 = BYTE5(v2);
  result.byte14 = BYTE6(v2);
  result.byte15 = HIBYTE(v2);
  result.byte0 = v1;
  result.byte1 = BYTE1(v1);
  result.byte2 = BYTE2(v1);
  result.byte3 = BYTE3(v1);
  result.byte4 = BYTE4(v1);
  result.byte5 = BYTE5(v1);
  result.byte6 = BYTE6(v1);
  result.byte7 = HIBYTE(v1);
  return result;
}

SInt32 CFUserNotificationCancel(CFUserNotificationRef userNotification)
{
  return MEMORY[0x1E0C995A0](userNotification);
}

CFUserNotificationRef CFUserNotificationCreate(CFAllocatorRef allocator, CFTimeInterval timeout, CFOptionFlags flags, SInt32 *error, CFDictionaryRef dictionary)
{
  return (CFUserNotificationRef)MEMORY[0x1E0C995A8](allocator, flags, error, dictionary, timeout);
}

CFRunLoopSourceRef CFUserNotificationCreateRunLoopSource(CFAllocatorRef allocator, CFUserNotificationRef userNotification, CFUserNotificationCallBack callout, CFIndex order)
{
  return (CFRunLoopSourceRef)MEMORY[0x1E0C995B8](allocator, userNotification, callout, order);
}

CFStringRef CFUserNotificationGetResponseValue(CFUserNotificationRef userNotification, CFStringRef key, CFIndex idx)
{
  return (CFStringRef)MEMORY[0x1E0C995E0](userNotification, key, idx);
}

uint64_t CNNetworkCreateWithSSIDAndBSSID()
{
  return MEMORY[0x1E0D0D1C0]();
}

uint64_t CNNetworkGetBSSID()
{
  return MEMORY[0x1E0D0D1C8]();
}

uint64_t CNNetworkGetSSIDString()
{
  return MEMORY[0x1E0D0D1D0]();
}

uint64_t CNNetworkGetSignalStrength()
{
  return MEMORY[0x1E0D0D1D8]();
}

uint64_t CNNetworkIsChosenPlugin()
{
  return MEMORY[0x1E0D0D1E0]();
}

uint64_t CNNetworkIsProtected()
{
  return MEMORY[0x1E0D0D1E8]();
}

uint64_t CNNetworkSetCaptive()
{
  return MEMORY[0x1E0D0D1F0]();
}

uint64_t CNNetworkSetConfidence()
{
  return MEMORY[0x1E0D0D1F8]();
}

uint64_t CNNetworkSetPassword()
{
  return MEMORY[0x1E0D0D200]();
}

uint64_t CNNetworkWasAutoJoined()
{
  return MEMORY[0x1E0D0D208]();
}

uint64_t CNNetworkWasJustJoined()
{
  return MEMORY[0x1E0D0D210]();
}

uint64_t CNPluginCommandCopyCurrentNetwork()
{
  return MEMORY[0x1E0D0D218]();
}

uint64_t CNPluginCommandCopyNetworkList()
{
  return MEMORY[0x1E0D0D220]();
}

uint64_t CNPluginCommandGetInterfaceName()
{
  return MEMORY[0x1E0D0D228]();
}

uint64_t CNPluginCommandGetType()
{
  return MEMORY[0x1E0D0D230]();
}

uint64_t CNPluginCopySupportedInterfaces()
{
  return MEMORY[0x1E0D0D238]();
}

uint64_t CNPluginLogoffNetwork()
{
  return MEMORY[0x1E0D0D240]();
}

uint64_t CNPluginRegister()
{
  return MEMORY[0x1E0D0D248]();
}

uint64_t CNPluginResponseCreate()
{
  return MEMORY[0x1E0D0D250]();
}

uint64_t CNPluginResponseDeliver()
{
  return MEMORY[0x1E0D0D258]();
}

uint64_t CNPluginResponseSetNetwork()
{
  return MEMORY[0x1E0D0D260]();
}

uint64_t CNPluginResponseSetNetworkList()
{
  return MEMORY[0x1E0D0D268]();
}

uint64_t EAPClientModuleAddBuiltinModule()
{
  return MEMORY[0x1E0D1DA88]();
}

uint64_t EAPClientModuleLookup()
{
  return MEMORY[0x1E0D1DA90]();
}

uint64_t EAPClientModulePluginFree()
{
  return MEMORY[0x1E0D1DA98]();
}

uint64_t EAPClientModulePluginFreePacket()
{
  return MEMORY[0x1E0D1DAA0]();
}

uint64_t EAPClientModulePluginInit()
{
  return MEMORY[0x1E0D1DAA8]();
}

uint64_t EAPClientModulePluginMasterSessionKeyCopyBytes()
{
  return MEMORY[0x1E0D1DAB0]();
}

uint64_t EAPClientModulePluginProcess()
{
  return MEMORY[0x1E0D1DAB8]();
}

uint64_t EAPPacketIsValid()
{
  return MEMORY[0x1E0D1DAC0]();
}

uint64_t IOPMGetLastWakeTime()
{
  return MEMORY[0x1E0CBB7B8]();
}

uint64_t NEFlowAsyncDatagramsCopyNext()
{
  return MEMORY[0x1E0DE7658]();
}

uint64_t NEFlowAsyncRead()
{
  return MEMORY[0x1E0DE7660]();
}

uint64_t NEFlowCopyError()
{
  return MEMORY[0x1E0DE7668]();
}

uint64_t NEFlowCopyProperty()
{
  return MEMORY[0x1E0DE7670]();
}

uint64_t NEFlowDirectorCreate()
{
  return MEMORY[0x1E0DE7678]();
}

uint64_t NEFlowDirectorDestroy()
{
  return MEMORY[0x1E0DE7688]();
}

uint64_t NEFlowDirectorFetchFlowStates()
{
  return MEMORY[0x1E0DE7690]();
}

uint64_t NEFlowDirectorGetMaxSendSize()
{
  return MEMORY[0x1E0DE7698]();
}

uint64_t NEFlowDirectorHandleMatchRulesResult()
{
  return MEMORY[0x1E0DE76A0]();
}

uint64_t NEFlowDirectorHandleNewControlSocket()
{
  return MEMORY[0x1E0DE76A8]();
}

uint64_t NEFlowDirectorSetDelegateInterface()
{
  return MEMORY[0x1E0DE76B0]();
}

uint64_t NEFlowDirectorSetMatchRulesCallback()
{
  return MEMORY[0x1E0DE76B8]();
}

uint64_t NEFlowDirectorSetMaxSendSize()
{
  return MEMORY[0x1E0DE76C0]();
}

uint64_t NEFlowDirectorSetNewFlowCallback()
{
  return MEMORY[0x1E0DE76C8]();
}

uint64_t NEFlowDirectorSetOpenControlSocketCallback()
{
  return MEMORY[0x1E0DE76D0]();
}

uint64_t NEFlowDirectorStart()
{
  return MEMORY[0x1E0DE76D8]();
}

uint64_t NEFlowGetFlowType()
{
  return MEMORY[0x1E0DE76E0]();
}

uint64_t NEFlowOpen()
{
  return MEMORY[0x1E0DE76E8]();
}

uint64_t NEFlowReadClose()
{
  return MEMORY[0x1E0DE76F0]();
}

uint64_t NEFlowSetDispatchQueue()
{
  return MEMORY[0x1E0DE76F8]();
}

uint64_t NEFlowSetEventHandler()
{
  return MEMORY[0x1E0DE7700]();
}

uint64_t NEFlowSetProperty()
{
  return MEMORY[0x1E0DE7708]();
}

uint64_t NEFlowTLVAdd()
{
  return MEMORY[0x1E0DE7710]();
}

uint64_t NEFlowTLVMsgCreate()
{
  return MEMORY[0x1E0DE7718]();
}

uint64_t NEFlowWrite()
{
  return MEMORY[0x1E0DE7720]();
}

uint64_t NEFlowWriteClose()
{
  return MEMORY[0x1E0DE7728]();
}

uint64_t NEHelperCacheCopyAppUUIDMapping()
{
  return MEMORY[0x1E0C804F8]();
}

uint64_t NEHelperCacheCopyAppUUIDMappingForUIDExtended()
{
  return MEMORY[0x1E0C80508]();
}

uint64_t NEHelperCacheCopySigningIdentifierMapping()
{
  return MEMORY[0x1E0C80510]();
}

uint64_t NEHelperCopyAggregatePathRules()
{
  return MEMORY[0x1E0C80518]();
}

uint64_t NEHelperCopyAppInfo()
{
  return MEMORY[0x1E0C80520]();
}

uint64_t NEHelperCopyCurrentNetworkAsync()
{
  return MEMORY[0x1E0C80528]();
}

uint64_t NEHelperGetIKESocket()
{
  return MEMORY[0x1E0C80548]();
}

uint64_t NEHelperGetKernelControlSocket()
{
  return MEMORY[0x1E0C80550]();
}

uint64_t NEHelperGetKernelControlSocketExtended()
{
  return MEMORY[0x1E0C80558]();
}

uint64_t NEHelperGetNECPSessionFD()
{
  return MEMORY[0x1E0C80560]();
}

uint64_t NEHelperGetPFKeySocket()
{
  return MEMORY[0x1E0C80568]();
}

uint64_t NEHelperInterfaceCreate()
{
  return MEMORY[0x1E0C80570]();
}

uint64_t NEHelperInterfaceDestroy()
{
  return MEMORY[0x1E0C80578]();
}

uint64_t NEHelperInterfaceRemoveAddress()
{
  return MEMORY[0x1E0C80580]();
}

uint64_t NEHelperInterfaceSetAddress()
{
  return MEMORY[0x1E0C80588]();
}

uint64_t NEHelperInterfaceSetAddressWithLifetime()
{
  return MEMORY[0x1E0C80590]();
}

uint64_t NEHelperInterfaceSetDelegate()
{
  return MEMORY[0x1E0C80598]();
}

uint64_t NEHelperInterfaceSetDescription()
{
  return MEMORY[0x1E0C805A0]();
}

uint64_t NEHelperInterfaceSetMTU()
{
  return MEMORY[0x1E0C805A8]();
}

uint64_t NEHelperInterfaceSetOption()
{
  return MEMORY[0x1E0C805B0]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1E0CB28A0](aClassName);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x1E0CB3190](aSelectorName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1E0CB3200](aClass);
}

CFErrorRef SCCopyLastError(void)
{
  return (CFErrorRef)MEMORY[0x1E0CE8728]();
}

CFPropertyListRef SCDynamicStoreCopyValue(SCDynamicStoreRef store, CFStringRef key)
{
  return (CFPropertyListRef)MEMORY[0x1E0CE8768](store, key);
}

SCDynamicStoreRef SCDynamicStoreCreateWithOptions(CFAllocatorRef allocator, CFStringRef name, CFDictionaryRef storeOptions, SCDynamicStoreCallBack callout, SCDynamicStoreContext *context)
{
  return (SCDynamicStoreRef)MEMORY[0x1E0CE8780](allocator, name, storeOptions, callout, context);
}

CFStringRef SCDynamicStoreKeyCreateNetworkServiceEntity(CFAllocatorRef allocator, CFStringRef domain, CFStringRef serviceID, CFStringRef entity)
{
  return (CFStringRef)MEMORY[0x1E0CE87B0](allocator, domain, serviceID, entity);
}

Boolean SCDynamicStoreSetMultiple(SCDynamicStoreRef store, CFDictionaryRef keysToSet, CFArrayRef keysToRemove, CFArrayRef keysToNotify)
{
  return MEMORY[0x1E0CE87D0](store, keysToSet, keysToRemove, keysToNotify);
}

int SCError(void)
{
  return MEMORY[0x1E0CE87E0]();
}

const char *__cdecl SCErrorString(int status)
{
  return (const char *)MEMORY[0x1E0CE87E8](*(_QWORD *)&status);
}

uint64_t SCNetworkConnectionCopyAllUserPreferences()
{
  return MEMORY[0x1E0CE87F8]();
}

uint64_t SCNetworkConnectionCopyCurrentUserPreferences()
{
  return MEMORY[0x1E0CE8800]();
}

uint64_t SCNetworkConnectionCreateUserPreferences()
{
  return MEMORY[0x1E0CE8808]();
}

SCNetworkConnectionRef SCNetworkConnectionCreateWithServiceID(CFAllocatorRef allocator, CFStringRef serviceID, SCNetworkConnectionCallBack callout, SCNetworkConnectionContext *context)
{
  return (SCNetworkConnectionRef)MEMORY[0x1E0CE8810](allocator, serviceID, callout, context);
}

SCNetworkInterfaceRef SCNetworkInterfaceCreateWithInterface(SCNetworkInterfaceRef interface, CFStringRef interfaceType)
{
  return (SCNetworkInterfaceRef)MEMORY[0x1E0CE8840](interface, interfaceType);
}

CFDictionaryRef SCNetworkInterfaceGetConfiguration(SCNetworkInterfaceRef interface)
{
  return (CFDictionaryRef)MEMORY[0x1E0CE8850](interface);
}

CFDictionaryRef SCNetworkInterfaceGetExtendedConfiguration(SCNetworkInterfaceRef interface, CFStringRef extendedType)
{
  return (CFDictionaryRef)MEMORY[0x1E0CE8858](interface, extendedType);
}

SCNetworkInterfaceRef SCNetworkInterfaceGetInterface(SCNetworkInterfaceRef interface)
{
  return (SCNetworkInterfaceRef)MEMORY[0x1E0CE8868](interface);
}

CFStringRef SCNetworkInterfaceGetInterfaceType(SCNetworkInterfaceRef interface)
{
  return (CFStringRef)MEMORY[0x1E0CE8870](interface);
}

Boolean SCNetworkInterfaceSetConfiguration(SCNetworkInterfaceRef interface, CFDictionaryRef config)
{
  return MEMORY[0x1E0CE8878](interface, config);
}

Boolean SCNetworkInterfaceSetExtendedConfiguration(SCNetworkInterfaceRef interface, CFStringRef extendedType, CFDictionaryRef config)
{
  return MEMORY[0x1E0CE8880](interface, extendedType, config);
}

CFDictionaryRef SCNetworkProtocolGetConfiguration(SCNetworkProtocolRef protocol)
{
  return (CFDictionaryRef)MEMORY[0x1E0CE8888](protocol);
}

Boolean SCNetworkProtocolSetConfiguration(SCNetworkProtocolRef protocol, CFDictionaryRef config)
{
  return MEMORY[0x1E0CE8898](protocol, config);
}

Boolean SCNetworkProtocolSetEnabled(SCNetworkProtocolRef protocol, Boolean enabled)
{
  return MEMORY[0x1E0CE88A0](protocol, enabled);
}

uint64_t SCNetworkProxiesCreateProxyAgentData()
{
  return MEMORY[0x1E0CE88B0]();
}

Boolean SCNetworkServiceAddProtocolType(SCNetworkServiceRef service, CFStringRef protocolType)
{
  return MEMORY[0x1E0CE8908](service, protocolType);
}

SCNetworkServiceRef SCNetworkServiceCopy(SCPreferencesRef prefs, CFStringRef serviceID)
{
  return (SCNetworkServiceRef)MEMORY[0x1E0CE8910](prefs, serviceID);
}

CFArrayRef SCNetworkServiceCopyAll(SCPreferencesRef prefs)
{
  return (CFArrayRef)MEMORY[0x1E0CE8918](prefs);
}

uint64_t SCNetworkServiceCopyExternalID()
{
  return MEMORY[0x1E0CE8920]();
}

SCNetworkProtocolRef SCNetworkServiceCopyProtocol(SCNetworkServiceRef service, CFStringRef protocolType)
{
  return (SCNetworkProtocolRef)MEMORY[0x1E0CE8928](service, protocolType);
}

SCNetworkServiceRef SCNetworkServiceCreate(SCPreferencesRef prefs, SCNetworkInterfaceRef interface)
{
  return (SCNetworkServiceRef)MEMORY[0x1E0CE8930](prefs, interface);
}

Boolean SCNetworkServiceEstablishDefaultConfiguration(SCNetworkServiceRef service)
{
  return MEMORY[0x1E0CE8938](service);
}

Boolean SCNetworkServiceGetEnabled(SCNetworkServiceRef service)
{
  return MEMORY[0x1E0CE8940](service);
}

SCNetworkInterfaceRef SCNetworkServiceGetInterface(SCNetworkServiceRef service)
{
  return (SCNetworkInterfaceRef)MEMORY[0x1E0CE8948](service);
}

CFStringRef SCNetworkServiceGetName(SCNetworkServiceRef service)
{
  return (CFStringRef)MEMORY[0x1E0CE8950](service);
}

CFStringRef SCNetworkServiceGetServiceID(SCNetworkServiceRef service)
{
  return (CFStringRef)MEMORY[0x1E0CE8958](service);
}

CFTypeID SCNetworkServiceGetTypeID(void)
{
  return MEMORY[0x1E0CE8960]();
}

Boolean SCNetworkServiceRemove(SCNetworkServiceRef service)
{
  return MEMORY[0x1E0CE8968](service);
}

Boolean SCNetworkServiceSetEnabled(SCNetworkServiceRef service, Boolean enabled)
{
  return MEMORY[0x1E0CE8970](service, enabled);
}

Boolean SCNetworkServiceSetName(SCNetworkServiceRef service, CFStringRef name)
{
  return MEMORY[0x1E0CE8978](service, name);
}

uint64_t SCNetworkServiceSetPrimaryRank()
{
  return MEMORY[0x1E0CE8980]();
}

Boolean SCNetworkSetAddService(SCNetworkSetRef set, SCNetworkServiceRef service)
{
  return MEMORY[0x1E0CE8988](set, service);
}

SCNetworkSetRef SCNetworkSetCopyCurrent(SCPreferencesRef prefs)
{
  return (SCNetworkSetRef)MEMORY[0x1E0CE8990](prefs);
}

Boolean SCPreferencesApplyChanges(SCPreferencesRef prefs)
{
  return MEMORY[0x1E0CE89B8](prefs);
}

Boolean SCPreferencesCommitChanges(SCPreferencesRef prefs)
{
  return MEMORY[0x1E0CE89C0](prefs);
}

SCPreferencesRef SCPreferencesCreate(CFAllocatorRef allocator, CFStringRef name, CFStringRef prefsID)
{
  return (SCPreferencesRef)MEMORY[0x1E0CE89C8](allocator, name, prefsID);
}

SCPreferencesRef SCPreferencesCreateWithAuthorization(CFAllocatorRef allocator, CFStringRef name, CFStringRef prefsID, AuthorizationRef authorization)
{
  return (SCPreferencesRef)MEMORY[0x1E0CE89D0](allocator, name, prefsID, authorization);
}

CFDataRef SCPreferencesGetSignature(SCPreferencesRef prefs)
{
  return (CFDataRef)MEMORY[0x1E0CE89D8](prefs);
}

CFPropertyListRef SCPreferencesGetValue(SCPreferencesRef prefs, CFStringRef key)
{
  return (CFPropertyListRef)MEMORY[0x1E0CE89E0](prefs, key);
}

Boolean SCPreferencesLock(SCPreferencesRef prefs, Boolean wait)
{
  return MEMORY[0x1E0CE89E8](prefs, wait);
}

Boolean SCPreferencesUnlock(SCPreferencesRef prefs)
{
  return MEMORY[0x1E0CE8A38](prefs);
}

uint64_t SCUserPreferencesCopyInterfaceTypeConfiguration()
{
  return MEMORY[0x1E0CE8A50]();
}

uint64_t SCUserPreferencesCopyName()
{
  return MEMORY[0x1E0CE8A58]();
}

uint64_t SCUserPreferencesCopyStartOptions()
{
  return MEMORY[0x1E0CE8A60]();
}

uint64_t SCUserPreferencesGetUniqueID()
{
  return MEMORY[0x1E0CE8A68]();
}

uint64_t SCUserPreferencesIsForced()
{
  return MEMORY[0x1E0CE8A70]();
}

uint64_t SCUserPreferencesRemove()
{
  return MEMORY[0x1E0CE8A78]();
}

uint64_t SCUserPreferencesSetCurrent()
{
  return MEMORY[0x1E0CE8A80]();
}

uint64_t SCUserPreferencesSetInterfaceTypeConfiguration()
{
  return MEMORY[0x1E0CE8A88]();
}

uint64_t SCUserPreferencesSetName()
{
  return MEMORY[0x1E0CE8A90]();
}

uint64_t SecCFAllocatorZeroize()
{
  return MEMORY[0x1E0CD5F00]();
}

uint64_t SecCertificateCopyCommonNames()
{
  return MEMORY[0x1E0CD5F50]();
}

CFDataRef SecCertificateCopyData(SecCertificateRef certificate)
{
  return (CFDataRef)MEMORY[0x1E0CD5F60](certificate);
}

uint64_t SecCertificateCopySHA256Digest()
{
  return MEMORY[0x1E0CD5FD0]();
}

uint64_t SecCertificateCopySubjectPublicKeyInfoSHA1Digest()
{
  return MEMORY[0x1E0CD5FE8]();
}

CFStringRef SecCertificateCopySubjectSummary(SecCertificateRef certificate)
{
  return (CFStringRef)MEMORY[0x1E0CD5FF8](certificate);
}

uint64_t SecCertificateCopySummaryProperties()
{
  return MEMORY[0x1E0CD6000]();
}

SecCertificateRef SecCertificateCreateWithData(CFAllocatorRef allocator, CFDataRef data)
{
  return (SecCertificateRef)MEMORY[0x1E0CD6010](allocator, data);
}

CFTypeID SecCertificateGetTypeID(void)
{
  return MEMORY[0x1E0CD6050]();
}

uint64_t SecCertificateNotValidAfter()
{
  return MEMORY[0x1E0CD6070]();
}

uint64_t SecCertificateNotValidBefore()
{
  return MEMORY[0x1E0CD6078]();
}

CFStringRef SecCopyErrorMessageString(OSStatus status, void *reserved)
{
  return (CFStringRef)MEMORY[0x1E0CD6218](*(_QWORD *)&status, reserved);
}

uint64_t SecDHComputeKey()
{
  return MEMORY[0x1E0CD6228]();
}

uint64_t SecDHCreate()
{
  return MEMORY[0x1E0CD6230]();
}

uint64_t SecDHDestroy()
{
  return MEMORY[0x1E0CD6238]();
}

uint64_t SecDHGenerateKeypair()
{
  return MEMORY[0x1E0CD6240]();
}

uint64_t SecDHGetMaxKeyLength()
{
  return MEMORY[0x1E0CD6248]();
}

OSStatus SecIdentityCopyCertificate(SecIdentityRef identityRef, SecCertificateRef *certificateRef)
{
  return MEMORY[0x1E0CD6270](identityRef, certificateRef);
}

OSStatus SecIdentityCopyPrivateKey(SecIdentityRef identityRef, SecKeyRef *privateKeyRef)
{
  return MEMORY[0x1E0CD6278](identityRef, privateKeyRef);
}

uint64_t SecIdentityCreate()
{
  return MEMORY[0x1E0CD6280]();
}

CFTypeID SecIdentityGetTypeID(void)
{
  return MEMORY[0x1E0CD6288]();
}

OSStatus SecItemAdd(CFDictionaryRef attributes, CFTypeRef *result)
{
  return MEMORY[0x1E0CD6290](attributes, result);
}

OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef *result)
{
  return MEMORY[0x1E0CD6298](query, result);
}

OSStatus SecItemDelete(CFDictionaryRef query)
{
  return MEMORY[0x1E0CD62A0](query);
}

OSStatus SecItemUpdate(CFDictionaryRef query, CFDictionaryRef attributesToUpdate)
{
  return MEMORY[0x1E0CD62D8](query, attributesToUpdate);
}

CFDataRef SecKeyCopyExternalRepresentation(SecKeyRef key, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1E0CD62F8](key, error);
}

uint64_t SecKeyCopyPublicKeyHash()
{
  return MEMORY[0x1E0CD6320]();
}

CFDataRef SecKeyCreateSignature(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef dataToSign, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1E0CD6390](key, algorithm, dataToSign, error);
}

size_t SecKeyGetBlockSize(SecKeyRef key)
{
  return MEMORY[0x1E0CD63D8](key);
}

CFTypeID SecKeyGetTypeID(void)
{
  return MEMORY[0x1E0CD63E8]();
}

Boolean SecKeyVerifySignature(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef signedData, CFDataRef signature, CFErrorRef *error)
{
  return MEMORY[0x1E0CD6418](key, algorithm, signedData, signature, error);
}

OSStatus SecPKCS12Import(CFDataRef pkcs12_data, CFDictionaryRef options, CFArrayRef *items)
{
  return MEMORY[0x1E0CD6420](pkcs12_data, options, items);
}

SecPolicyRef SecPolicyCreateBasicX509(void)
{
  return (SecPolicyRef)MEMORY[0x1E0CD64D8]();
}

SecPolicyRef SecPolicyCreateRevocation(CFOptionFlags revocationFlags)
{
  return (SecPolicyRef)MEMORY[0x1E0CD6510](revocationFlags);
}

SecPolicyRef SecPolicyCreateWithProperties(CFTypeRef policyIdentifier, CFDictionaryRef properties)
{
  return (SecPolicyRef)MEMORY[0x1E0CD6540](policyIdentifier, properties);
}

CFStringRef SecTaskCopySigningIdentifier(SecTaskRef task, CFErrorRef *error)
{
  return (CFStringRef)MEMORY[0x1E0CD65E0](task, error);
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x1E0CD65F0](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x1E0CD6610](allocator);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return (SecTaskRef)MEMORY[0x1E0CD6620](allocator, token);
}

SecKeyRef SecTrustCopyKey(SecTrustRef trust)
{
  return (SecKeyRef)MEMORY[0x1E0CD6670](trust);
}

CFArrayRef SecTrustCopyProperties(SecTrustRef trust)
{
  return (CFArrayRef)MEMORY[0x1E0CD6680](trust);
}

OSStatus SecTrustCreateWithCertificates(CFTypeRef certificates, CFTypeRef policies, SecTrustRef *trust)
{
  return MEMORY[0x1E0CD6698](certificates, policies, trust);
}

OSStatus SecTrustEvaluate(SecTrustRef trust, SecTrustResultType *result)
{
  return MEMORY[0x1E0CD66A8](trust, result);
}

SecCertificateRef SecTrustGetCertificateAtIndex(SecTrustRef trust, CFIndex ix)
{
  return (SecCertificateRef)MEMORY[0x1E0CD66D8](trust, ix);
}

CFIndex SecTrustGetCertificateCount(SecTrustRef trust)
{
  return MEMORY[0x1E0CD66E0](trust);
}

OSStatus SecTrustSetAnchorCertificates(SecTrustRef trust, CFArrayRef anchorCertificates)
{
  return MEMORY[0x1E0CD6710](trust, anchorCertificates);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x1E0C9A498]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x1E0C9A4B0]();
}

uint64_t _CFXPCCreateCFObjectFromXPCObject()
{
  return MEMORY[0x1E0C9A800]();
}

uint64_t _CFXPCCreateXPCObjectFromCFObject()
{
  return MEMORY[0x1E0C9A818]();
}

uint64_t _SCNetworkServiceCopyActive()
{
  return MEMORY[0x1E0CE8AD8]();
}

uint64_t _SCNetworkServiceIsVPN()
{
  return MEMORY[0x1E0CE8AE0]();
}

uint64_t _SCNetworkServiceSetServiceID()
{
  return MEMORY[0x1E0CE8AE8]();
}

uint64_t _SCPreferencesSystemKeychainPasswordItemCopy()
{
  return MEMORY[0x1E0CE8AF0]();
}

uint64_t _SCPreferencesSystemKeychainPasswordItemRemove()
{
  return MEMORY[0x1E0CE8AF8]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A58](a1, a2, *(_QWORD *)&a3, a4);
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1E0C80B50](*(_QWORD *)&a1, a2);
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1E0C80B68]();
}

uint64_t __memset_chk()
{
  return MEMORY[0x1E0C80B78]();
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x1E0C80C48]();
}

uint64_t __strncpy_chk()
{
  return MEMORY[0x1E0C80C58]();
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1E0C81010]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81020](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81040](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1E0DEEA40]();
}

void abort(void)
{
  MEMORY[0x1E0C813A8]();
}

uint32_t arc4random(void)
{
  return MEMORY[0x1E0C81570]();
}

void arc4random_buf(void *__buf, size_t __nbytes)
{
  MEMORY[0x1E0C81580](__buf, __nbytes);
}

int asprintf(char **a1, const char *a2, ...)
{
  return MEMORY[0x1E0C81608](a1, a2);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

uint64_t cc_cmp_safe()
{
  return MEMORY[0x1E0C81870]();
}

uint64_t ccaes_gcm_decrypt_mode()
{
  return MEMORY[0x1E0C818B0]();
}

uint64_t ccaes_gcm_encrypt_mode()
{
  return MEMORY[0x1E0C818B8]();
}

uint64_t ccchacha20poly1305_aad()
{
  return MEMORY[0x1E0C81938]();
}

uint64_t ccchacha20poly1305_decrypt()
{
  return MEMORY[0x1E0C81940]();
}

uint64_t ccchacha20poly1305_encrypt()
{
  return MEMORY[0x1E0C81948]();
}

uint64_t ccchacha20poly1305_finalize()
{
  return MEMORY[0x1E0C81950]();
}

uint64_t ccchacha20poly1305_info()
{
  return MEMORY[0x1E0C81958]();
}

uint64_t ccchacha20poly1305_init()
{
  return MEMORY[0x1E0C81960]();
}

uint64_t ccchacha20poly1305_reset()
{
  return MEMORY[0x1E0C81968]();
}

uint64_t ccchacha20poly1305_setnonce()
{
  return MEMORY[0x1E0C81970]();
}

uint64_t ccchacha20poly1305_verify()
{
  return MEMORY[0x1E0C81978]();
}

uint64_t ccgcm_aad()
{
  return MEMORY[0x1E0C81EC0]();
}

uint64_t ccgcm_context_size()
{
  return MEMORY[0x1E0C81EC8]();
}

uint64_t ccgcm_finalize()
{
  return MEMORY[0x1E0C81ED0]();
}

uint64_t ccgcm_inc_iv()
{
  return MEMORY[0x1E0C81EE0]();
}

uint64_t ccgcm_init()
{
  return MEMORY[0x1E0C81EE8]();
}

uint64_t ccgcm_init_with_iv()
{
  return MEMORY[0x1E0C81EF0]();
}

uint64_t ccgcm_reset()
{
  return MEMORY[0x1E0C81F00]();
}

uint64_t ccgcm_set_iv()
{
  return MEMORY[0x1E0C81F08]();
}

uint64_t ccgcm_update()
{
  return MEMORY[0x1E0C81F10]();
}

Class class_getSuperclass(Class cls)
{
  return (Class)MEMORY[0x1E0DE7AD8](cls);
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

uint64_t csr_check()
{
  return MEMORY[0x1E0C82B78]();
}

void dispatch_activate(dispatch_object_t object)
{
  MEMORY[0x1E0C82BC0](object);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82BC8](when, queue, block);
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
  MEMORY[0x1E0C82BE8](queue);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

dispatch_data_t dispatch_data_create(const void *buffer, size_t size, dispatch_queue_t queue, dispatch_block_t destructor)
{
  return (dispatch_data_t)MEMORY[0x1E0C82CB0](buffer, size, queue, destructor);
}

uint64_t dispatch_data_create_with_transform()
{
  return MEMORY[0x1E0C82CE0]();
}

void *__cdecl dispatch_get_context(dispatch_object_t object)
{
  return (void *)MEMORY[0x1E0C82CF0](object);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x1E0C82D28](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x1E0C82D30](group);
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D38](group, queue, block);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E28](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E38](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x1E0C82E98](object);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA0](object);
}

void dispatch_retain(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA8](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1E0C82EC8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82ED8](dsema, timeout);
}

void dispatch_set_context(dispatch_object_t object, void *context)
{
  MEMORY[0x1E0C82EE0](object, context);
}

void dispatch_set_finalizer_f(dispatch_object_t object, dispatch_function_t finalizer)
{
  MEMORY[0x1E0C82EE8](object, finalizer);
}

void dispatch_source_cancel(dispatch_source_t source)
{
  MEMORY[0x1E0C82F10](source);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1E0C82F20](type, handle, mask, queue);
}

uintptr_t dispatch_source_get_handle(dispatch_source_t source)
{
  return MEMORY[0x1E0C82F30](source);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F48](source, handler);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F58](source, handler);
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  MEMORY[0x1E0C82F78](source, start, interval, leeway);
}

intptr_t dispatch_source_testcancel(dispatch_source_t source)
{
  return MEMORY[0x1E0C82F80](source);
}

void dispatch_suspend(dispatch_object_t object)
{
  MEMORY[0x1E0C82F88](object);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

int dlclose(void *__handle)
{
  return MEMORY[0x1E0C83030](__handle);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1E0C83038]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1E0C83040](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

int dup(int a1)
{
  return MEMORY[0x1E0C83078](*(_QWORD *)&a1);
}

uint64_t dyld_get_program_sdk_version()
{
  return MEMORY[0x1E0C830B8]();
}

void exit(int a1)
{
  MEMORY[0x1E0C83278](*(_QWORD *)&a1);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83478](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

void freeaddrinfo(addrinfo *a1)
{
  MEMORY[0x1E0C834C0](a1);
}

void freeifaddrs(ifaddrs *a1)
{
  MEMORY[0x1E0C834D0](a1);
}

int getaddrinfo(const char *a1, const char *a2, const addrinfo *a3, addrinfo **a4)
{
  return MEMORY[0x1E0C835F8](a1, a2, a3, a4);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1E0C83660](a1);
}

uid_t geteuid(void)
{
  return MEMORY[0x1E0C83668]();
}

int getifaddrs(ifaddrs **a1)
{
  return MEMORY[0x1E0C836C8](a1);
}

int getpeername(int a1, sockaddr *a2, socklen_t *a3)
{
  return MEMORY[0x1E0C83748](*(_QWORD *)&a1, a2, a3);
}

pid_t getpid(void)
{
  return MEMORY[0x1E0C83760]();
}

passwd *__cdecl getpwnam(const char *a1)
{
  return (passwd *)MEMORY[0x1E0C83790](a1);
}

passwd *__cdecl getpwuid(uid_t a1)
{
  return (passwd *)MEMORY[0x1E0C837A0](*(_QWORD *)&a1);
}

int getsockopt(int a1, int a2, int a3, void *a4, socklen_t *a5)
{
  return MEMORY[0x1E0C83818](*(_QWORD *)&a1, *(_QWORD *)&a2, *(_QWORD *)&a3, a4, a5);
}

uid_t getuid(void)
{
  return MEMORY[0x1E0C83828]();
}

kern_return_t host_info(host_t host, host_flavor_t flavor, host_info_t host_info_out, mach_msg_type_number_t *host_info_outCnt)
{
  return MEMORY[0x1E0C838B8](*(_QWORD *)&host, *(_QWORD *)&flavor, host_info_out, host_info_outCnt);
}

char *__cdecl if_indextoname(unsigned int a1, char *a2)
{
  return (char *)MEMORY[0x1E0C83900](*(_QWORD *)&a1, a2);
}

unsigned int if_nametoindex(const char *a1)
{
  return MEMORY[0x1E0C83910](a1);
}

const char *__cdecl inet_ntop(int a1, const void *a2, char *a3, socklen_t a4)
{
  return (const char *)MEMORY[0x1E0C83968](*(_QWORD *)&a1, a2, a3, *(_QWORD *)&a4);
}

int inet_pton(int a1, const char *a2, void *a3)
{
  return MEMORY[0x1E0C83970](*(_QWORD *)&a1, a2, a3);
}

int ioctl(int a1, unint64_t a2, ...)
{
  return MEMORY[0x1E0C83980](*(_QWORD *)&a1, a2);
}

off_t lseek(int a1, off_t a2, int a3)
{
  return MEMORY[0x1E0C83C38](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

uint64_t mach_continuous_time(void)
{
  return MEMORY[0x1E0C83C70]();
}

char *__cdecl mach_error_string(mach_error_t error_value)
{
  return (char *)MEMORY[0x1E0C83C80](*(_QWORD *)&error_value);
}

mach_port_t mach_host_self(void)
{
  return MEMORY[0x1E0C83C90]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1E0C83DB8](info);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1E0C83E68](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1E0C83EE0](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F10](ptr, size, type_id);
}

int mbr_uid_to_uuid(uid_t uid, uuid_t uu)
{
  return MEMORY[0x1E0C84020](*(_QWORD *)&uid, uu);
}

int mbr_uuid_to_id(const uuid_t uu, id_t *uid_or_gid, int *id_type)
{
  return MEMORY[0x1E0C84028](uu, uid_or_gid, id_type);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

errno_t memset_s(void *__s, rsize_t __smax, int __c, rsize_t __n)
{
  return MEMORY[0x1E0C840D0](__s, __smax, *(_QWORD *)&__c, __n);
}

uint64_t ne_copy_signing_identifier_for_pid_with_audit_token()
{
  return MEMORY[0x1E0DE7778]();
}

uint64_t ne_filter_copy_connection()
{
  return MEMORY[0x1E0DE7780]();
}

uint64_t ne_filter_crypto_generate_client_key()
{
  return MEMORY[0x1E0DE7788]();
}

uint64_t ne_filter_crypto_init_master()
{
  return MEMORY[0x1E0DE7790]();
}

uint64_t ne_filter_crypto_validate_data()
{
  return MEMORY[0x1E0DE7798]();
}

uint64_t ne_filter_get_definition()
{
  return MEMORY[0x1E0DE77A0]();
}

uint64_t ne_filter_request_connection()
{
  return MEMORY[0x1E0DE77B0]();
}

uint64_t ne_filter_send_message()
{
  return MEMORY[0x1E0DE77B8]();
}

uint64_t ne_filter_sign_data()
{
  return MEMORY[0x1E0DE77C0]();
}

uint64_t ne_get_configuration_generation()
{
  return MEMORY[0x1E0DE77C8]();
}

uint64_t ne_log_large_obj()
{
  return MEMORY[0x1E0C84240]();
}

uint64_t ne_log_obj()
{
  return MEMORY[0x1E0C84248]();
}

uint64_t ne_session_address_matches_subnets()
{
  return MEMORY[0x1E0DE77D0]();
}

uint64_t ne_session_cancel()
{
  return MEMORY[0x1E0DE77D8]();
}

uint64_t ne_session_create()
{
  return MEMORY[0x1E0DE77E0]();
}

uint64_t ne_session_disable_restrictions()
{
  return MEMORY[0x1E0DE77E8]();
}

uint64_t ne_session_establish_ipc()
{
  return MEMORY[0x1E0DE77F0]();
}

uint64_t ne_session_get_configuration_id()
{
  return MEMORY[0x1E0DE77F8]();
}

uint64_t ne_session_get_info()
{
  return MEMORY[0x1E0DE7800]();
}

uint64_t ne_session_get_info2()
{
  return MEMORY[0x1E0DE7808]();
}

uint64_t ne_session_get_status()
{
  return MEMORY[0x1E0DE7810]();
}

uint64_t ne_session_release()
{
  return MEMORY[0x1E0DE7818]();
}

uint64_t ne_session_set_event_handler()
{
  return MEMORY[0x1E0DE7820]();
}

uint64_t ne_session_start()
{
  return MEMORY[0x1E0DE7828]();
}

uint64_t ne_session_start_with_options()
{
  return MEMORY[0x1E0DE7830]();
}

uint64_t ne_session_status_to_string()
{
  return MEMORY[0x1E0DE7838]();
}

uint64_t ne_session_stop()
{
  return MEMORY[0x1E0DE7840]();
}

uint64_t ne_session_stop_reason_to_string()
{
  return MEMORY[0x1E0DE7848]();
}

uint64_t ne_session_type_to_string()
{
  return MEMORY[0x1E0DE7850]();
}

uint64_t ne_trie_init()
{
  return MEMORY[0x1E0C84340]();
}

uint64_t ne_trie_insert()
{
  return MEMORY[0x1E0C84348]();
}

uint64_t ne_trie_search()
{
  return MEMORY[0x1E0C84350]();
}

uint64_t necp_session_action()
{
  return MEMORY[0x1E0C84368]();
}

uint64_t necp_session_open()
{
  return MEMORY[0x1E0C84370]();
}

uint64_t nelog_is_debug_logging_enabled()
{
  return MEMORY[0x1E0C84378]();
}

uint64_t nelog_is_extra_vpn_logging_enabled()
{
  return MEMORY[0x1E0C84380]();
}

uint64_t nelog_is_info_logging_enabled()
{
  return MEMORY[0x1E0C84388]();
}

uint64_t network_config_cellular_blocked_observer_cancel()
{
  return MEMORY[0x1E0CCED60]();
}

uint64_t network_config_cellular_blocked_observer_create()
{
  return MEMORY[0x1E0CCED68]();
}

uint64_t network_config_cellular_failed_observer_create()
{
  return MEMORY[0x1E0CCED70]();
}

uint64_t network_config_wifi_blocked_observer_create()
{
  return MEMORY[0x1E0CCEDA8]();
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1E0C843D8](*(_QWORD *)&token);
}

uint32_t notify_check(int token, int *check)
{
  return MEMORY[0x1E0C843E0](*(_QWORD *)&token, check);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x1E0C843E8](*(_QWORD *)&token, state64);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x1E0C843F8](name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return MEMORY[0x1E0C84400](name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1E0C84408](name, out_token, queue, handler);
}

uint32_t notify_set_state(int token, uint64_t state64)
{
  return MEMORY[0x1E0C84428](*(_QWORD *)&token, state64);
}

uint64_t nw_array_append()
{
  return MEMORY[0x1E0CCEE90]();
}

uint64_t nw_array_create()
{
  return MEMORY[0x1E0CCEEA0]();
}

uint64_t nw_channel_close()
{
  return MEMORY[0x1E0CCEF68]();
}

uint64_t nw_channel_create_with_nexus()
{
  return MEMORY[0x1E0CCEF78]();
}

uint64_t nw_channel_get_key()
{
  return MEMORY[0x1E0CCEF80]();
}

uint64_t nw_channel_get_nexus_instance()
{
  return MEMORY[0x1E0CCEF88]();
}

uint64_t nw_channel_get_protocol_handler()
{
  return MEMORY[0x1E0CCEF90]();
}

void nw_connection_cancel(nw_connection_t connection)
{
  MEMORY[0x1E0CCEFB8](connection);
}

uint64_t nw_connection_copy_connected_path()
{
  return MEMORY[0x1E0CCEFD8]();
}

nw_path_t nw_connection_copy_current_path(nw_connection_t connection)
{
  return (nw_path_t)MEMORY[0x1E0CCEFE8](connection);
}

nw_endpoint_t nw_connection_copy_endpoint(nw_connection_t connection)
{
  return (nw_endpoint_t)MEMORY[0x1E0CCEFF8](connection);
}

nw_parameters_t nw_connection_copy_parameters(nw_connection_t connection)
{
  return (nw_parameters_t)MEMORY[0x1E0CCF018](connection);
}

nw_protocol_metadata_t nw_connection_copy_protocol_metadata(nw_connection_t connection, nw_protocol_definition_t definition)
{
  return (nw_protocol_metadata_t)MEMORY[0x1E0CCF020](connection, definition);
}

nw_connection_t nw_connection_create(nw_endpoint_t endpoint, nw_parameters_t parameters)
{
  return (nw_connection_t)MEMORY[0x1E0CCF030](endpoint, parameters);
}

uint64_t nw_connection_create_with_connected_socket_and_parameters()
{
  return MEMORY[0x1E0CCF058]();
}

uint64_t nw_connection_get_connected_socket()
{
  return MEMORY[0x1E0CCF090]();
}

void nw_connection_receive_message(nw_connection_t connection, nw_connection_receive_completion_t completion)
{
  MEMORY[0x1E0CCF130](connection, completion);
}

void nw_connection_send(nw_connection_t connection, dispatch_data_t content, nw_content_context_t context, BOOL is_complete, nw_connection_send_completion_t completion)
{
  MEMORY[0x1E0CCF168](connection, content, context, is_complete, completion);
}

uint64_t nw_connection_set_event_handler()
{
  return MEMORY[0x1E0CCF190]();
}

void nw_connection_set_queue(nw_connection_t connection, dispatch_queue_t queue)
{
  MEMORY[0x1E0CCF1B0](connection, queue);
}

void nw_connection_start(nw_connection_t connection)
{
  MEMORY[0x1E0CCF1D8](connection);
}

uint64_t nw_connection_state_to_string()
{
  return MEMORY[0x1E0CCF1E8]();
}

uint64_t nw_context_copy_implicit_context()
{
  return MEMORY[0x1E0CCF280]();
}

uint64_t nw_context_get_globals_for_protocol()
{
  return MEMORY[0x1E0CCF298]();
}

nw_endpoint_t nw_endpoint_create_address(const sockaddr *address)
{
  return (nw_endpoint_t)MEMORY[0x1E0CCF388](address);
}

nw_endpoint_t nw_endpoint_create_host(const char *hostname, const char *port)
{
  return (nw_endpoint_t)MEMORY[0x1E0CCF3B0](hostname, port);
}

uint64_t nw_endpoint_create_host_with_numeric_port()
{
  return MEMORY[0x1E0CCF3B8]();
}

const sockaddr *__cdecl nw_endpoint_get_address(nw_endpoint_t endpoint)
{
  return (const sockaddr *)MEMORY[0x1E0CCF3D8](endpoint);
}

const char *__cdecl nw_endpoint_get_hostname(nw_endpoint_t endpoint)
{
  return (const char *)MEMORY[0x1E0CCF410](endpoint);
}

uint16_t nw_endpoint_get_port(nw_endpoint_t endpoint)
{
  return MEMORY[0x1E0CCF428](endpoint);
}

nw_endpoint_type_t nw_endpoint_get_type(nw_endpoint_t endpoint)
{
  return MEMORY[0x1E0CCF440](endpoint);
}

int nw_error_get_error_code(nw_error_t error)
{
  return MEMORY[0x1E0CCF468](error);
}

nw_error_domain_t nw_error_get_error_domain(nw_error_t error)
{
  return MEMORY[0x1E0CCF470](error);
}

uint64_t nw_frame_array_append()
{
  return MEMORY[0x1E0CCF4D8]();
}

uint64_t nw_frame_array_first()
{
  return MEMORY[0x1E0CCF4E8]();
}

uint64_t nw_frame_array_foreach()
{
  return MEMORY[0x1E0CCF4F0]();
}

uint64_t nw_frame_array_init()
{
  return MEMORY[0x1E0CCF4F8]();
}

uint64_t nw_frame_array_is_empty()
{
  return MEMORY[0x1E0CCF508]();
}

uint64_t nw_frame_array_next()
{
  return MEMORY[0x1E0CCF510]();
}

uint64_t nw_frame_array_remove()
{
  return MEMORY[0x1E0CCF520]();
}

uint64_t nw_frame_array_unclaimed_length()
{
  return MEMORY[0x1E0CCF528]();
}

uint64_t nw_frame_claim()
{
  return MEMORY[0x1E0CCF538]();
}

uint64_t nw_frame_create()
{
  return MEMORY[0x1E0CCF548]();
}

uint64_t nw_frame_finalize()
{
  return MEMORY[0x1E0CCF558]();
}

uint64_t nw_frame_get_buffer()
{
  return MEMORY[0x1E0CCF560]();
}

uint64_t nw_frame_reset()
{
  return MEMORY[0x1E0CCF580]();
}

uint64_t nw_frame_unclaim()
{
  return MEMORY[0x1E0CCF5B0]();
}

uint64_t nw_frame_unclaimed_bytes()
{
  return MEMORY[0x1E0CCF5B8]();
}

uint64_t nw_frame_unclaimed_length()
{
  return MEMORY[0x1E0CCF5C0]();
}

nw_protocol_definition_t nw_framer_create_definition(const char *identifier, uint32_t flags, nw_framer_start_handler_t start_handler)
{
  return (nw_protocol_definition_t)MEMORY[0x1E0CCF5E8](identifier, *(_QWORD *)&flags, start_handler);
}

nw_protocol_options_t nw_framer_create_options(nw_protocol_definition_t framer_definition)
{
  return (nw_protocol_options_t)MEMORY[0x1E0CCF5F0](framer_definition);
}

BOOL nw_framer_deliver_input_no_copy(nw_framer_t framer, size_t input_length, nw_framer_message_t message, BOOL is_complete)
{
  return MEMORY[0x1E0CCF5F8](framer, input_length, message, is_complete);
}

void nw_framer_mark_failed_with_error(nw_framer_t framer, int error_code)
{
  MEMORY[0x1E0CCF600](framer, *(_QWORD *)&error_code);
}

nw_framer_message_t nw_framer_message_create(nw_framer_t framer)
{
  return (nw_framer_message_t)MEMORY[0x1E0CCF618](framer);
}

BOOL nw_framer_parse_input(nw_framer_t framer, size_t minimum_incomplete_length, size_t maximum_length, uint8_t *temp_buffer, nw_framer_parse_completion_t parse)
{
  return MEMORY[0x1E0CCF628](framer, minimum_incomplete_length, maximum_length, temp_buffer, parse);
}

void nw_framer_set_input_handler(nw_framer_t framer, nw_framer_input_handler_t input_handler)
{
  MEMORY[0x1E0CCF650](framer, input_handler);
}

void nw_framer_set_output_handler(nw_framer_t framer, nw_framer_output_handler_t output_handler)
{
  MEMORY[0x1E0CCF658](framer, output_handler);
}

void nw_framer_write_output(nw_framer_t framer, const uint8_t *output_buffer, size_t output_length)
{
  MEMORY[0x1E0CCF670](framer, output_buffer, output_length);
}

BOOL nw_framer_write_output_no_copy(nw_framer_t framer, size_t output_length)
{
  return MEMORY[0x1E0CCF678](framer, output_length);
}

uint64_t nw_interface_create_with_index()
{
  return MEMORY[0x1E0CCF6F0]();
}

uint64_t nw_interface_create_with_name()
{
  return MEMORY[0x1E0CCF6F8]();
}

uint32_t nw_interface_get_index(nw_interface_t interface)
{
  return MEMORY[0x1E0CCF700](interface);
}

const char *__cdecl nw_interface_get_name(nw_interface_t interface)
{
  return (const char *)MEMORY[0x1E0CCF710](interface);
}

nw_interface_type_t nw_interface_get_type(nw_interface_t interface)
{
  return MEMORY[0x1E0CCF728](interface);
}

uint64_t nw_interpose_cancel()
{
  return MEMORY[0x1E0CCF758]();
}

uint64_t nw_interpose_client_claim()
{
  return MEMORY[0x1E0CCF760]();
}

uint64_t nw_interpose_set_flow_event_handler()
{
  return MEMORY[0x1E0CCF768]();
}

uint64_t nw_interpose_start()
{
  return MEMORY[0x1E0CCF770]();
}

void nw_ip_options_set_local_address_preference(nw_protocol_options_t options, nw_ip_local_address_preference_t preference)
{
  MEMORY[0x1E0CCF7B0](options, *(_QWORD *)&preference);
}

void nw_listener_cancel(nw_listener_t listener)
{
  MEMORY[0x1E0CCF7C8](listener);
}

nw_listener_t nw_listener_create(nw_parameters_t parameters)
{
  return (nw_listener_t)MEMORY[0x1E0CCF7D8](parameters);
}

void nw_listener_set_new_connection_handler(nw_listener_t listener, nw_listener_new_connection_handler_t handler)
{
  MEMORY[0x1E0CCF810](listener, handler);
}

void nw_listener_set_queue(nw_listener_t listener, dispatch_queue_t queue)
{
  MEMORY[0x1E0CCF820](listener, queue);
}

void nw_listener_set_state_changed_handler(nw_listener_t listener, nw_listener_state_changed_handler_t handler)
{
  MEMORY[0x1E0CCF828](listener, handler);
}

void nw_listener_start(nw_listener_t listener)
{
  MEMORY[0x1E0CCF830](listener);
}

uint64_t nw_nat64_copy_prefixes()
{
  return MEMORY[0x1E0CCF848]();
}

uint64_t nw_nat64_extract_v4()
{
  return MEMORY[0x1E0CCF860]();
}

uint64_t nw_nat64_synthesize_v6()
{
  return MEMORY[0x1E0CCF868]();
}

uint64_t nw_nexus_bind_client_port()
{
  return MEMORY[0x1E0CCF870]();
}

uint64_t nw_nexus_close()
{
  return MEMORY[0x1E0CCF878]();
}

uint64_t nw_nexus_close_channel_and_instance()
{
  return MEMORY[0x1E0CCF880]();
}

uint64_t nw_nexus_create()
{
  return MEMORY[0x1E0CCF888]();
}

uint64_t nw_nexus_create_channel_to_new_instance()
{
  return MEMORY[0x1E0CCF890]();
}

uint64_t nw_parameters_copy_context()
{
  return MEMORY[0x1E0CCF8C0]();
}

nw_protocol_stack_t nw_parameters_copy_default_protocol_stack(nw_parameters_t parameters)
{
  return (nw_protocol_stack_t)MEMORY[0x1E0CCF8C8](parameters);
}

uint64_t nw_parameters_copy_local_address()
{
  return MEMORY[0x1E0CCF8E0]();
}

uint64_t nw_parameters_create_legacy_tcp_socket()
{
  return MEMORY[0x1E0CCF950]();
}

nw_parameters_t nw_parameters_create_secure_tcp(nw_parameters_configure_protocol_block_t configure_tls, nw_parameters_configure_protocol_block_t configure_tcp)
{
  return (nw_parameters_t)MEMORY[0x1E0CCF980](configure_tls, configure_tcp);
}

nw_parameters_t nw_parameters_create_secure_udp(nw_parameters_configure_protocol_block_t configure_dtls, nw_parameters_configure_protocol_block_t configure_udp)
{
  return (nw_parameters_t)MEMORY[0x1E0CCF990](configure_dtls, configure_udp);
}

uint64_t nw_parameters_get_ip_protocol()
{
  return MEMORY[0x1E0CCF9C0]();
}

uint64_t nw_parameters_get_tls()
{
  return MEMORY[0x1E0CCFA18]();
}

void nw_parameters_require_interface(nw_parameters_t parameters, nw_interface_t interface)
{
  MEMORY[0x1E0CCFA48](parameters, interface);
}

uint64_t nw_parameters_set_data_mode()
{
  return MEMORY[0x1E0CCFA98]();
}

uint64_t nw_parameters_set_effective_bundle_id()
{
  return MEMORY[0x1E0CCFAD0]();
}

uint64_t nw_parameters_set_indefinite()
{
  return MEMORY[0x1E0CCFB10]();
}

uint64_t nw_parameters_set_local_address()
{
  return MEMORY[0x1E0CCFB30]();
}

void nw_parameters_set_local_endpoint(nw_parameters_t parameters, nw_endpoint_t local_endpoint)
{
  MEMORY[0x1E0CCFB38](parameters, local_endpoint);
}

uint64_t nw_parameters_set_metadata()
{
  return MEMORY[0x1E0CCFB40]();
}

uint64_t nw_parameters_set_required_interface_subtype()
{
  return MEMORY[0x1E0CCFBF0]();
}

void nw_parameters_set_reuse_local_address(nw_parameters_t parameters, BOOL reuse_local_address)
{
  MEMORY[0x1E0CCFC18](parameters, reuse_local_address);
}

uint64_t nw_parameters_set_use_awdl()
{
  return MEMORY[0x1E0CCFC80]();
}

nw_endpoint_t nw_path_copy_effective_local_endpoint(nw_path_t path)
{
  return (nw_endpoint_t)MEMORY[0x1E0CCFCB0](path);
}

uint64_t nw_path_copy_interface()
{
  return MEMORY[0x1E0CCFCD0]();
}

uint64_t nw_path_create_assign_message()
{
  return MEMORY[0x1E0CCFCF0]();
}

uint64_t nw_path_create_browse_result()
{
  return MEMORY[0x1E0CCFCF8]();
}

uint64_t nw_path_get_ipv4_network_signature()
{
  return MEMORY[0x1E0CCFD98]();
}

uint64_t nw_path_get_ipv6_network_signature()
{
  return MEMORY[0x1E0CCFDA0]();
}

BOOL nw_path_uses_interface_type(nw_path_t path, nw_interface_type_t interface_type)
{
  return MEMORY[0x1E0CCFE88](path, *(_QWORD *)&interface_type);
}

uint64_t nw_protocol_create()
{
  return MEMORY[0x1E0CCFEF0]();
}

uint64_t nw_protocol_register()
{
  return MEMORY[0x1E0CCFF90]();
}

uint64_t nw_protocol_register_extended()
{
  return MEMORY[0x1E0CCFF98]();
}

uint64_t nw_protocol_set_default_one_to_one_callbacks()
{
  return MEMORY[0x1E0CCFFB8]();
}

nw_protocol_options_t nw_protocol_stack_copy_internet_protocol(nw_protocol_stack_t stack)
{
  return (nw_protocol_options_t)MEMORY[0x1E0CCFFD0](stack);
}

uint64_t nw_protocol_stack_includes_protocol()
{
  return MEMORY[0x1E0CCFFE8]();
}

void nw_protocol_stack_prepend_application_protocol(nw_protocol_stack_t stack, nw_protocol_options_t protocol)
{
  MEMORY[0x1E0CCFFF8](stack, protocol);
}

void nw_protocol_stack_set_transport_protocol(nw_protocol_stack_t stack, nw_protocol_options_t protocol)
{
  MEMORY[0x1E0CD0000](stack, protocol);
}

uint64_t nw_protocols_are_equal()
{
  return MEMORY[0x1E0CD0060]();
}

uint64_t nw_proxy_config_copy_agent_data()
{
  return MEMORY[0x1E0CD0068]();
}

uint64_t nw_proxy_config_get_agent_domain()
{
  return MEMORY[0x1E0CD0070]();
}

uint64_t nw_proxy_config_get_agent_type()
{
  return MEMORY[0x1E0CD0078]();
}

uint64_t nw_proxy_config_set_identifier()
{
  return MEMORY[0x1E0CD0090]();
}

uint64_t nw_proxy_copy_shoes_definition()
{
  return MEMORY[0x1E0CD00A8]();
}

uint64_t nw_queue_activate_source()
{
  return MEMORY[0x1E0CD00E8]();
}

uint64_t nw_queue_cancel_source()
{
  return MEMORY[0x1E0CD00F0]();
}

uint64_t nw_queue_context_async()
{
  return MEMORY[0x1E0CD00F8]();
}

uint64_t nw_queue_context_async_if_needed()
{
  return MEMORY[0x1E0CD0100]();
}

uint64_t nw_queue_context_create_source()
{
  return MEMORY[0x1E0CD0108]();
}

uint64_t nw_queue_resume_source()
{
  return MEMORY[0x1E0CD0118]();
}

uint64_t nw_queue_suspend_source()
{
  return MEMORY[0x1E0CD0128]();
}

uint64_t nw_resolver_config_add_match_domain()
{
  return MEMORY[0x1E0CD0298]();
}

uint64_t nw_resolver_config_add_name_server()
{
  return MEMORY[0x1E0CD02A0]();
}

uint64_t nw_resolver_config_add_search_domain()
{
  return MEMORY[0x1E0CD02A8]();
}

uint64_t nw_resolver_config_copy_plist_data()
{
  return MEMORY[0x1E0CD02B0]();
}

uint64_t nw_resolver_config_create()
{
  return MEMORY[0x1E0CD02B8]();
}

uint64_t nw_resolver_config_set_class()
{
  return MEMORY[0x1E0CD02C0]();
}

uint64_t nw_resolver_config_set_identifier()
{
  return MEMORY[0x1E0CD02C8]();
}

uint64_t nw_resolver_config_set_identity_reference()
{
  return MEMORY[0x1E0CD02D0]();
}

uint64_t nw_resolver_config_set_protocol()
{
  return MEMORY[0x1E0CD02D8]();
}

uint64_t nw_resolver_config_set_provider_name()
{
  return MEMORY[0x1E0CD02E0]();
}

uint64_t nw_resolver_config_set_provider_path()
{
  return MEMORY[0x1E0CD02E8]();
}

uint64_t nw_resolver_config_set_proxy_agent()
{
  return MEMORY[0x1E0CD02F0]();
}

uint64_t nw_shoes_metadata_copy_remote_endpoint()
{
  return MEMORY[0x1E0CD0358]();
}

uint64_t nw_shoes_metadata_enumerate_resolved_endpoints()
{
  return MEMORY[0x1E0CD0360]();
}

nw_protocol_options_t nw_udp_create_options(void)
{
  return (nw_protocol_options_t)MEMORY[0x1E0CD0408]();
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1E0DE7BB0](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1E0DE7BF0](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7C38](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

void objc_end_catch(void)
{
  MEMORY[0x1E0DE7C80]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

void objc_exception_throw(id exception)
{
  MEMORY[0x1E0DE7CA0](exception);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1E0DE7CD0](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1E0DE7CE0](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1E0DE7D08](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D20](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F88](self, _cmd, newValue, offset);
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F90](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F98](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7FA0](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1E0DE7FB8](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1E0DE7FC8](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1E0DE7FD0](obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7FE0](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1E0C84480](a1, *(_QWORD *)&a2);
}

uint64_t os_buflet_get_data_offset()
{
  return MEMORY[0x1E0C84530]();
}

uint64_t os_buflet_get_object_address()
{
  return MEMORY[0x1E0C84538]();
}

uint64_t os_channel_advance_slot()
{
  return MEMORY[0x1E0C84548]();
}

uint64_t os_channel_attr_create()
{
  return MEMORY[0x1E0C84550]();
}

uint64_t os_channel_attr_destroy()
{
  return MEMORY[0x1E0C84558]();
}

uint64_t os_channel_attr_get()
{
  return MEMORY[0x1E0C84560]();
}

uint64_t os_channel_attr_set()
{
  return MEMORY[0x1E0C84568]();
}

uint64_t os_channel_attr_set_key()
{
  return MEMORY[0x1E0C84570]();
}

uint64_t os_channel_available_slot_count()
{
  return MEMORY[0x1E0C84578]();
}

uint64_t os_channel_create_extended()
{
  return MEMORY[0x1E0C84588]();
}

uint64_t os_channel_destroy()
{
  return MEMORY[0x1E0C84590]();
}

uint64_t os_channel_get_fd()
{
  return MEMORY[0x1E0C845C8]();
}

uint64_t os_channel_get_next_slot()
{
  return MEMORY[0x1E0C845E0]();
}

uint64_t os_channel_is_defunct()
{
  return MEMORY[0x1E0C845F0]();
}

uint64_t os_channel_packet_free()
{
  return MEMORY[0x1E0C84608]();
}

uint64_t os_channel_read_attr()
{
  return MEMORY[0x1E0C84618]();
}

uint64_t os_channel_rx_ring()
{
  return MEMORY[0x1E0C84638]();
}

uint64_t os_channel_slot_attach_packet()
{
  return MEMORY[0x1E0C84648]();
}

uint64_t os_channel_slot_detach_packet()
{
  return MEMORY[0x1E0C84650]();
}

uint64_t os_channel_slot_get_packet()
{
  return MEMORY[0x1E0C84658]();
}

uint64_t os_channel_sync()
{
  return MEMORY[0x1E0C84660]();
}

uint64_t os_channel_tx_ring()
{
  return MEMORY[0x1E0C84668]();
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

uint64_t os_packet_get_data_length()
{
  return MEMORY[0x1E0C84830]();
}

uint64_t os_packet_get_next_buflet()
{
  return MEMORY[0x1E0C84848]();
}

uint64_t os_transaction_create()
{
  return MEMORY[0x1E0C84970]();
}

void os_unfair_lock_assert_owner(const os_unfair_lock *lock)
{
  MEMORY[0x1E0C84990](lock);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

uint64_t os_variant_has_internal_content()
{
  return MEMORY[0x1E0C849F0]();
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x1E0C849F8]();
}

int proc_listallpids(void *buffer, int buffersize)
{
  return MEMORY[0x1E0C84C08](buffer, *(_QWORD *)&buffersize);
}

int proc_name(int pid, void *buffer, uint32_t buffersize)
{
  return MEMORY[0x1E0C84C20](*(_QWORD *)&pid, buffer, *(_QWORD *)&buffersize);
}

int proc_pidinfo(int pid, int flavor, uint64_t arg, void *buffer, int buffersize)
{
  return MEMORY[0x1E0C84C40](*(_QWORD *)&pid, *(_QWORD *)&flavor, arg, buffer, *(_QWORD *)&buffersize);
}

int proc_pidpath(int pid, void *buffer, uint32_t buffersize)
{
  return MEMORY[0x1E0C84C50](*(_QWORD *)&pid, buffer, *(_QWORD *)&buffersize);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1E0C85000](*(_QWORD *)&a1, a2, a3);
}

void *__cdecl reallocf(void *__ptr, size_t __size)
{
  return (void *)MEMORY[0x1E0C85030](__ptr, __size);
}

ssize_t recv(int a1, void *a2, size_t a3, int a4)
{
  return MEMORY[0x1E0C85060](*(_QWORD *)&a1, a2, a3, *(_QWORD *)&a4);
}

ssize_t recvmsg(int a1, msghdr *a2, int a3)
{
  return MEMORY[0x1E0C85070](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

uint64_t recvmsg_x()
{
  return MEMORY[0x1E0C85078]();
}

ssize_t send(int a1, const void *a2, size_t a3, int a4)
{
  return MEMORY[0x1E0C852F8](*(_QWORD *)&a1, a2, a3, *(_QWORD *)&a4);
}

ssize_t sendmsg(int a1, const msghdr *a2, int a3)
{
  return MEMORY[0x1E0C85300](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

uint64_t sendmsg_x()
{
  return MEMORY[0x1E0C85308]();
}

int setsockopt(int a1, int a2, int a3, const void *a4, socklen_t a5)
{
  return MEMORY[0x1E0C85388](*(_QWORD *)&a1, *(_QWORD *)&a2, *(_QWORD *)&a3, a4, *(_QWORD *)&a5);
}

int sigaction(int a1, const sigaction *a2, sigaction *a3)
{
  return MEMORY[0x1E0C853E0](*(_QWORD *)&a1, a2, a3);
}

int socket(int a1, int a2, int a3)
{
  return MEMORY[0x1E0C85450](*(_QWORD *)&a1, *(_QWORD *)&a2, *(_QWORD *)&a3);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1E0C85548](*(_QWORD *)&__errnum);
}

int strerror_r(int __errnum, char *__strerrbuf, size_t __buflen)
{
  return MEMORY[0x1E0C85550](*(_QWORD *)&__errnum, __strerrbuf, __buflen);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1E0C855A8](__s1, __s2, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x1E0C855C0](__s1, __n);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85658](__str, __endptr, *(_QWORD *)&__base);
}

uint64_t swift_allocError()
{
  return MEMORY[0x1E0DEEAA8]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1E0DEEAB0]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1E0DEEAE0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x1E0DEEAE8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x1E0DEEAF0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1E0DEEAF8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1E0DEEB08]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1E0DEEB18]();
}

uint64_t swift_continuation_await()
{
  return MEMORY[0x1E0DF0F88]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x1E0DF0F90]();
}

uint64_t swift_continuation_resume()
{
  return MEMORY[0x1E0DF0F98]();
}

uint64_t swift_continuation_throwingResume()
{
  return MEMORY[0x1E0DF0FA0]();
}

uint64_t swift_continuation_throwingResumeWithError()
{
  return MEMORY[0x1E0DF0FA8]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x1E0DEEB60]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x1E0DEEB68]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1E0DEEB80]();
}

uint64_t swift_dynamicCastObjCProtocolUnconditional()
{
  return MEMORY[0x1E0DEEBC0]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x1E0DEEBE0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1E0DEEBF0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1E0DEEBF8]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1E0DEEC78]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x1E0DEECC8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1E0DEECD8]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1E0DEECE0]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1E0DEECF8]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1E0DEED38]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1E0DEED50]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1E0DEEDD0]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x1E0DEEDE0]();
}

uint64_t swift_release()
{
  return MEMORY[0x1E0DEEE30]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1E0DEEE48]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1E0DEEE50]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x1E0DF1050]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1E0DEEEC0]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1E0DEEED0]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x1E0DEEF78]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1E0DEEFC0]();
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x1E0C85798](a1, *(_QWORD *)&a2, a3, a4, a5, a6);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1E0C857A0](a1, a2, a3, a4, a5);
}

kern_return_t task_for_pid(mach_port_name_t target_tport, int pid, mach_port_name_t *t)
{
  return MEMORY[0x1E0C85810](*(_QWORD *)&target_tport, *(_QWORD *)&pid, t);
}

kern_return_t task_info(task_name_t target_task, task_flavor_t flavor, task_info_t task_info_out, mach_msg_type_number_t *task_info_outCnt)
{
  return MEMORY[0x1E0C85838](*(_QWORD *)&target_task, *(_QWORD *)&flavor, task_info_out, task_info_outCnt);
}

time_t time(time_t *a1)
{
  return MEMORY[0x1E0C85950](a1);
}

void uuid_clear(uuid_t uu)
{
  MEMORY[0x1E0C85A00](uu);
}

int uuid_compare(const uuid_t uu1, const uuid_t uu2)
{
  return MEMORY[0x1E0C85A08](uu1, uu2);
}

void uuid_copy(uuid_t dst, const uuid_t src)
{
  MEMORY[0x1E0C85A10](dst, src);
}

int uuid_is_null(const uuid_t uu)
{
  return MEMORY[0x1E0C85A30](uu);
}

void uuid_unparse(const uuid_t uu, uuid_string_t out)
{
  MEMORY[0x1E0C85A40](uu, out);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x1E0C85D40](*(_QWORD *)&__fd, __buf, __nbyte);
}

void xpc_array_append_value(xpc_object_t xarray, xpc_object_t value)
{
  MEMORY[0x1E0C85DE0](xarray, value);
}

BOOL xpc_array_apply(xpc_object_t xarray, xpc_array_applier_t applier)
{
  return MEMORY[0x1E0C85DF8](xarray, applier);
}

xpc_object_t xpc_array_create(xpc_object_t *objects, size_t count)
{
  return (xpc_object_t)MEMORY[0x1E0C85E00](objects, count);
}

size_t xpc_array_get_count(xpc_object_t xarray)
{
  return MEMORY[0x1E0C85E30](xarray);
}

const char *__cdecl xpc_array_get_string(xpc_object_t xarray, size_t index)
{
  return (const char *)MEMORY[0x1E0C85E70](xarray, index);
}

BOOL xpc_BOOL_get_value(xpc_object_t xBOOL)
{
  return MEMORY[0x1E0C85F00](xBOOL);
}

void xpc_connection_cancel(xpc_connection_t connection)
{
  MEMORY[0x1E0C85F68](connection);
}

uint64_t xpc_connection_copy_entitlement_value()
{
  return MEMORY[0x1E0C85F78]();
}

xpc_connection_t xpc_connection_create(const char *name, dispatch_queue_t targetq)
{
  return (xpc_connection_t)MEMORY[0x1E0C85F90](name, targetq);
}

xpc_connection_t xpc_connection_create_from_endpoint(xpc_endpoint_t endpoint)
{
  return (xpc_connection_t)MEMORY[0x1E0C85FA0](endpoint);
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return (xpc_connection_t)MEMORY[0x1E0C85FB0](name, targetq, flags);
}

uint64_t xpc_connection_get_audit_token()
{
  return MEMORY[0x1E0C85FD0]();
}

uid_t xpc_connection_get_euid(xpc_connection_t connection)
{
  return MEMORY[0x1E0C85FF0](connection);
}

pid_t xpc_connection_get_pid(xpc_connection_t connection)
{
  return MEMORY[0x1E0C86008](connection);
}

void xpc_connection_resume(xpc_connection_t connection)
{
  MEMORY[0x1E0C86018](connection);
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
  MEMORY[0x1E0C86030](connection, message);
}

void xpc_connection_send_message_with_reply(xpc_connection_t connection, xpc_object_t message, dispatch_queue_t replyq, xpc_handler_t handler)
{
  MEMORY[0x1E0C86038](connection, message, replyq, handler);
}

xpc_object_t xpc_connection_send_message_with_reply_sync(xpc_connection_t connection, xpc_object_t message)
{
  return (xpc_object_t)MEMORY[0x1E0C86048](connection, message);
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
  MEMORY[0x1E0C86080](connection, handler);
}

void xpc_connection_set_target_queue(xpc_connection_t connection, dispatch_queue_t targetq)
{
  MEMORY[0x1E0C860C8](connection, targetq);
}

char *__cdecl xpc_copy_description(xpc_object_t object)
{
  return (char *)MEMORY[0x1E0C86108](object);
}

xpc_object_t xpc_data_create(const void *bytes, size_t length)
{
  return (xpc_object_t)MEMORY[0x1E0C86178](bytes, length);
}

const void *__cdecl xpc_data_get_bytes_ptr(xpc_object_t xdata)
{
  return (const void *)MEMORY[0x1E0C86198](xdata);
}

size_t xpc_data_get_length(xpc_object_t xdata)
{
  return MEMORY[0x1E0C861A8](xdata);
}

BOOL xpc_dictionary_apply(xpc_object_t xdict, xpc_dictionary_applier_t applier)
{
  return MEMORY[0x1E0C861F0](xdict, applier);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1E0C86208](keys, values, count);
}

xpc_object_t xpc_dictionary_create_reply(xpc_object_t original)
{
  return (xpc_object_t)MEMORY[0x1E0C86228](original);
}

int xpc_dictionary_dup_fd(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1E0C86230](xdict, key);
}

xpc_object_t xpc_dictionary_get_array(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1E0C86248](xdict, key);
}

uint64_t xpc_dictionary_get_audit_token()
{
  return MEMORY[0x1E0C86258]();
}

BOOL xpc_dictionary_get_BOOL(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1E0C86260](xdict, key);
}

const void *__cdecl xpc_dictionary_get_data(xpc_object_t xdict, const char *key, size_t *length)
{
  return (const void *)MEMORY[0x1E0C86278](xdict, key, length);
}

xpc_object_t xpc_dictionary_get_dictionary(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1E0C86288](xdict, key);
}

double xpc_dictionary_get_double(xpc_object_t xdict, const char *key)
{
  double result;

  MEMORY[0x1E0C86298](xdict, key);
  return result;
}

int64_t xpc_dictionary_get_int64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1E0C862A0](xdict, key);
}

xpc_connection_t xpc_dictionary_get_remote_connection(xpc_object_t xdict)
{
  return (xpc_connection_t)MEMORY[0x1E0C862B0](xdict);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return (const char *)MEMORY[0x1E0C862C8](xdict, key);
}

uint64_t xpc_dictionary_get_uint64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1E0C862D0](xdict, key);
}

const uint8_t *__cdecl xpc_dictionary_get_uuid(xpc_object_t xdict, const char *key)
{
  return (const uint8_t *)MEMORY[0x1E0C862D8](xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1E0C862E0](xdict, key);
}

uint64_t xpc_dictionary_send_reply()
{
  return MEMORY[0x1E0C862F8]();
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
  MEMORY[0x1E0C86310](xdict, key, value);
}

void xpc_dictionary_set_data(xpc_object_t xdict, const char *key, const void *bytes, size_t length)
{
  MEMORY[0x1E0C86330](xdict, key, bytes, length);
}

void xpc_dictionary_set_fd(xpc_object_t xdict, const char *key, int fd)
{
  MEMORY[0x1E0C86358](xdict, key, *(_QWORD *)&fd);
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
  MEMORY[0x1E0C86360](xdict, key, value);
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
  MEMORY[0x1E0C86390](xdict, key, string);
}

void xpc_dictionary_set_uint64(xpc_object_t xdict, const char *key, uint64_t value)
{
  MEMORY[0x1E0C86398](xdict, key, value);
}

void xpc_dictionary_set_uuid(xpc_object_t xdict, const char *key, const unsigned __int8 *uuid)
{
  MEMORY[0x1E0C863B0](xdict, key, uuid);
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
  MEMORY[0x1E0C863B8](xdict, key, value);
}

xpc_endpoint_t xpc_endpoint_create(xpc_connection_t connection)
{
  return (xpc_endpoint_t)MEMORY[0x1E0C863F0](connection);
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1E0C86520](object);
}

void xpc_release(xpc_object_t object)
{
  MEMORY[0x1E0C86658](object);
}

uint64_t xpc_set_event()
{
  return MEMORY[0x1E0C866E0]();
}

void xpc_set_event_stream_handler(const char *stream, dispatch_queue_t targetq, xpc_handler_t handler)
{
  MEMORY[0x1E0C866E8](stream, targetq, handler);
}

const char *__cdecl xpc_string_get_string_ptr(xpc_object_t xstring)
{
  return (const char *)MEMORY[0x1E0C86758](xstring);
}

uint64_t xpc_uint64_get_value(xpc_object_t xuint)
{
  return MEMORY[0x1E0C867B8](xuint);
}

xpc_object_t xpc_uuid_create(const unsigned __int8 *uuid)
{
  return (xpc_object_t)MEMORY[0x1E0C867E0](uuid);
}

const uint8_t *__cdecl xpc_uuid_get_bytes(xpc_object_t xuuid)
{
  return (const uint8_t *)MEMORY[0x1E0C867F8](xuuid);
}

