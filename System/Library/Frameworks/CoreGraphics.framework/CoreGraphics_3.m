unsigned int *get_base14_name(char *a1)
{
  char *v1;
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int *result;

  v1 = a1;
  v2 = strchr(a1, 43);
  if (v2)
  {
    v3 = v2;
    if (v2 - v1 == 6)
    {
      if (v2 <= v1)
      {
LABEL_10:
        v1 = v3 + 1;
      }
      else
      {
        v4 = 0;
        v5 = MEMORY[0x1E0C80978];
        while (1)
        {
          v6 = v1[v4];
          if (!((v6 & 0x80000000) != 0 ? __maskrune_l(v6, 0x8000uLL, 0) : *(_DWORD *)(v5 + 4 * v6 + 60) & 0x8000))
            break;
          if (++v4 == 6)
            goto LABEL_10;
        }
      }
    }
    if (!*v1)
      return 0;
  }
  result = (unsigned int *)bsearch(v1, &base14_font, 0x35uLL, 0x10uLL, (int (__cdecl *)(const void *, const void *))base14_name_compare);
  if (result)
    return (unsigned int *)result[2];
  return result;
}

uint64_t base14_name_compare(const char *a1, const char **a2)
{
  return strcmp(a1, *a2);
}

char *CGPDFBase14GetInfo(int a1)
{
  if ((a1 - 1) > 0xD)
    return 0;
  else
    return off_1E162FC40[a1 - 1];
}

BOOL CGPDFFontNameHasAlias(char *a1, char **a2)
{
  unsigned int base14_name;
  const char *v5;
  char *v6;
  _BOOL8 result;
  char *v8;

  base14_name = get_base14_name(a1);
  if (base14_name - 1 <= 0xD)
  {
    if (a2)
    {
      v5 = *(const char **)off_1E162FC40[base14_name - 1];
LABEL_7:
      v6 = strdup(v5);
LABEL_8:
      *a2 = v6;
      return 1;
    }
    return 1;
  }
  if (base14_name - 15 <= 0xB)
  {
    if (a2)
    {
      v5 = off_1E162FCB0[base14_name - 15];
      goto LABEL_7;
    }
    return 1;
  }
  v8 = strchr(a1, 44);
  result = v8 != 0;
  if (a2 && v8)
  {
    v6 = strdup(a1);
    if (v6)
      v6[v8 - a1] = 45;
    goto LABEL_8;
  }
  return result;
}

CFTypeRef CGCFRetain(CFTypeRef cf)
{
  if (cf)
    return CFRetain(cf);
  return cf;
}

void CGCFRelease(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

BOOL CGCFEqual(unint64_t cf1, unint64_t a2)
{
  _BOOL8 result;

  if (!(cf1 | a2))
    return 1;
  result = 0;
  if (cf1)
  {
    if (a2)
      return CFEqual((CFTypeRef)cf1, (CFTypeRef)a2) != 0;
  }
  return result;
}

CFMutableArrayRef CGCFArrayCreate()
{
  return CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
}

void CGCFArrayApplyBlock(const __CFArray *a1, void *a2)
{
  CFRange v4;

  v4.length = CFArrayGetCount(a1);
  v4.location = 0;
  CFArrayApplyFunction(a1, v4, (CFArrayApplierFunction)call_array_block, a2);
}

uint64_t call_array_block(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

const void *CGCFArrayGetLastValue(const __CFArray *a1)
{
  CFIndex Count;

  if (a1 && (Count = CFArrayGetCount(a1)) != 0)
    return CFArrayGetValueAtIndex(a1, Count - 1);
  else
    return 0;
}

void CGCFArrayAppendInteger(__CFArray *a1, int a2)
{
  CFNumberRef v3;
  CFNumberRef v4;
  int valuePtr;

  valuePtr = a2;
  if (a1)
  {
    v3 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v3)
    {
      v4 = v3;
      CFArrayAppendValue(a1, v3);
      CFRelease(v4);
    }
  }
}

void CGCFArrayAppendCGFloat(__CFArray *a1, double a2)
{
  CFNumberRef v3;
  CFNumberRef v4;
  double valuePtr;

  valuePtr = a2;
  if (a1)
  {
    v3 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
    if (v3)
    {
      v4 = v3;
      CFArrayAppendValue(a1, v3);
      CFRelease(v4);
    }
  }
}

void CGCFArrayAppendRect(__CFArray *a1, double a2, double a3, double a4, double a5)
{
  CFDataRef v6;
  CFDataRef v7;
  _QWORD v8[4];

  *(double *)v8 = a2;
  *(double *)&v8[1] = a3;
  *(double *)&v8[2] = a4;
  *(double *)&v8[3] = a5;
  if (a1)
  {
    v6 = CFDataCreate(0, (const UInt8 *)v8, 32);
    if (v6)
    {
      v7 = v6;
      CFArrayAppendValue(a1, v6);
      CFRelease(v7);
    }
  }
}

BOOL CGCFArrayGetRectAtIndex(const __CFArray *a1, CFIndex a2, UInt8 *a3)
{
  const __CFData *ValueAtIndex;
  const __CFData *v5;
  CFTypeID v6;

  if (a1
    && (ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(a1, a2)) != 0
    && (v5 = ValueAtIndex, v6 = CFGetTypeID(ValueAtIndex), v6 == CFDataGetTypeID()))
  {
    return get_value_from_data(v5, a3, 32);
  }
  else
  {
    return 0;
  }
}

CFMutableDictionaryRef CGCFDictionaryCreate()
{
  return CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
}

CFDictionaryRef CGCFDictionaryCreateWithKeyAndValue(void *a1, const void *a2)
{
  const void *v3;
  void *keys;

  v3 = a2;
  keys = a1;
  return CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&keys, &v3, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
}

CFMutableDictionaryRef CGCFDictionaryCreateCopy(CFDictionaryRef theDict)
{
  return CFDictionaryCreateMutableCopy(0, 0, theDict);
}

CFArrayRef CGCFDictionaryCopyKeys(const __CFDictionary *a1, const CFArrayCallBacks *a2)
{
  CFIndex Count;
  __n128 v5;
  unint64_t v6;
  uint64_t v7;
  const void **v8;
  const void **v9;
  CFArrayRef v10;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  Count = CFDictionaryGetCount(a1);
  MEMORY[0x1E0C80A78](Count, v5);
  v8 = (const void **)((char *)v12 - v7);
  if (v6 <= 0x1FFFFFFFFFFFFFFELL)
  {
    if (v6 > 0x100)
    {
      v9 = (const void **)malloc_type_calloc(8 * Count, 1uLL, 0x6BD02CD3uLL);
    }
    else
    {
      bzero((char *)v12 - v7, 8 * Count);
      v9 = v8;
    }
  }
  else
  {
    v9 = 0;
  }
  CFDictionaryGetKeysAndValues(a1, v9, 0);
  v10 = CFArrayCreate(0, v9, Count, a2);
  if (v9 != v8)
    free(v9);
  return v10;
}

CFArrayRef CGCFDictionaryCopyValues(const __CFDictionary *a1, const CFArrayCallBacks *a2)
{
  CFIndex Count;
  __n128 v5;
  unint64_t v6;
  uint64_t v7;
  const void **v8;
  const void **v9;
  CFArrayRef v10;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  Count = CFDictionaryGetCount(a1);
  MEMORY[0x1E0C80A78](Count, v5);
  v8 = (const void **)((char *)v12 - v7);
  if (v6 <= 0x1FFFFFFFFFFFFFFELL)
  {
    if (v6 > 0x100)
    {
      v9 = (const void **)malloc_type_calloc(8 * Count, 1uLL, 0x7EE311CCuLL);
    }
    else
    {
      bzero((char *)v12 - v7, 8 * Count);
      v9 = v8;
    }
  }
  else
  {
    v9 = 0;
  }
  CFDictionaryGetKeysAndValues(a1, 0, v9);
  v10 = CFArrayCreate(0, v9, Count, a2);
  if (v9 != v8)
    free(v9);
  return v10;
}

void CGCFDictionaryApplyBlock(const __CFDictionary *a1, void *context)
{
  CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)call_dict_block, context);
}

uint64_t call_dict_block(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, a1, a2);
}

void CGCFDictionarySetCString(__CFDictionary *a1, const void *a2, char *cStr)
{
  CFStringRef v5;
  CFStringRef v6;

  if (a1 && a2)
  {
    v5 = CFStringCreateWithCString(0, cStr, 0x8000100u);
    if (v5)
    {
      v6 = v5;
      CFDictionarySetValue(a1, a2, v5);
      CFRelease(v6);
    }
  }
}

void CGCFDictionarySetLongInteger(__CFDictionary *a1, const void *a2, uint64_t a3)
{
  CFNumberRef v5;
  CFNumberRef v6;
  uint64_t valuePtr;

  valuePtr = a3;
  if (a1 && a2)
  {
    v5 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
    if (v5)
    {
      v6 = v5;
      CFDictionarySetValue(a1, a2, v5);
      CFRelease(v6);
    }
  }
}

uint64_t CGCFDictionaryGetIntegerWithDefault(const __CFDictionary *a1, const void *a2, unsigned int a3)
{
  unsigned int v5;

  v5 = 0;
  if (CGCFDictionaryGetInteger(a1, a2, &v5))
    return v5;
  else
    return a3;
}

void CGCFDictionarySetBoolean(__CFDictionary *a1, const void *a2, int a3)
{
  const void **v3;

  if (a1 && a2)
  {
    v3 = (const void **)MEMORY[0x1E0C9AE50];
    if (!a3)
      v3 = (const void **)MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(a1, a2, *v3);
  }
}

uint64_t CGCFDictionaryGetBooleanWithDefault(const __CFDictionary *a1, const void *a2, unsigned int a3)
{
  BOOL v5;

  v5 = 0;
  if (CGCFDictionaryGetBoolean(a1, a2, &v5))
    return v5;
  else
    return a3;
}

uint64_t CGCFDictionaryGetFloatWithDefault(const __CFDictionary *a1, const void *a2)
{
  uint64_t v3;

  v3 = 0;
  return CGCFDictionaryGetFloat(a1, a2, &v3);
}

void CGCFDictionarySetNumber(__CFDictionary *a1, const void *a2, CFNumberType a3, void *valuePtr)
{
  CFNumberRef v6;
  CFNumberRef v7;

  if (a1 && a2 && valuePtr)
  {
    if ((a3 & 0xFFFFFFFFFFFFFFFELL) == 0x3E8)
    {
      a3 = kCFNumberLongType;
    }
    else if (a3 == -1)
    {
      return;
    }
    v6 = CFNumberCreate(0, a3, valuePtr);
    if (v6)
    {
      v7 = v6;
      CFDictionarySetValue(a1, a2, v6);
      CFRelease(v7);
    }
  }
}

BOOL CGCFDictionaryGetNumber(const __CFDictionary *a1, const void *a2, CFNumberType a3, void *a4)
{
  uint64_t v4;
  CFNumberType v6;
  const __CFNumber *Value;
  const __CFNumber *v8;
  CFTypeID v9;

  v4 = 0;
  if (a1 && a2 && a4)
  {
    v6 = a3;
    if ((a3 & 0xFFFFFFFFFFFFFFFELL) == 0x3E8)
    {
      v6 = kCFNumberLongType;
    }
    else if (a3 == -1)
    {
      return 0;
    }
    Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
    if (Value)
    {
      v8 = Value;
      v9 = CFGetTypeID(Value);
      if (v9 == CFNumberGetTypeID())
        return CFNumberGetValue(v8, v6, a4) != 0;
    }
    return 0;
  }
  return v4;
}

void CGCFDictionarySetCFTypeRef(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  if (theDict && key)
  {
    if (value)
      CFDictionarySetValue(theDict, key, value);
  }
}

void CGCFDictionarySetPoint(__CFDictionary *a1, const void *a2, double a3, double a4)
{
  CFDataRef v6;
  CFDataRef v7;
  _QWORD v8[2];

  *(double *)v8 = a3;
  *(double *)&v8[1] = a4;
  if (a1 && a2)
  {
    v6 = CFDataCreate(0, (const UInt8 *)v8, 16);
    if (v6)
    {
      v7 = v6;
      CFDictionarySetValue(a1, a2, v6);
      CFRelease(v7);
    }
  }
}

BOOL CGCFDictionaryGetPoint(const __CFDictionary *a1, const void *a2, UInt8 *a3)
{
  const __CFData *Value;
  const __CFData *v5;
  CFTypeID v6;

  if (a1
    && a2
    && (Value = (const __CFData *)CFDictionaryGetValue(a1, a2)) != 0
    && (v5 = Value, v6 = CFGetTypeID(Value), v6 == CFDataGetTypeID()))
  {
    return get_value_from_data(v5, a3, 16);
  }
  else
  {
    return 0;
  }
}

void CGCFDictionarySetSize(__CFDictionary *a1, const void *a2, double a3, double a4)
{
  CFDataRef v6;
  CFDataRef v7;
  _QWORD v8[2];

  *(double *)v8 = a3;
  *(double *)&v8[1] = a4;
  if (a1 && a2)
  {
    v6 = CFDataCreate(0, (const UInt8 *)v8, 16);
    if (v6)
    {
      v7 = v6;
      CFDictionarySetValue(a1, a2, v6);
      CFRelease(v7);
    }
  }
}

BOOL CGCFDictionaryGetSize(const __CFDictionary *a1, const void *a2, UInt8 *a3)
{
  const __CFData *Value;
  const __CFData *v5;
  CFTypeID v6;

  if (a1
    && a2
    && (Value = (const __CFData *)CFDictionaryGetValue(a1, a2)) != 0
    && (v5 = Value, v6 = CFGetTypeID(Value), v6 == CFDataGetTypeID()))
  {
    return get_value_from_data(v5, a3, 16);
  }
  else
  {
    return 0;
  }
}

__CFArray *CGCFArrayCreatePDFRect(CGFloat a1, CGFloat y, CGFloat a3, double height)
{
  const __CFAllocator *v8;
  __CFArray *Mutable;
  _BOOL4 v10;
  unint64_t v11;
  CGFloat v12;
  CGFloat v13;
  double v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  double v20;
  CFNumberRef v21;
  CFNumberRef v22;
  double valuePtr;
  CGRect v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;

  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 4, MEMORY[0x1E0C9B378]);
  v10 = height < 0.0 || a3 < 0.0;
  *(double *)&v11 = a1;
  if (v10)
  {
    v12 = y;
    v13 = a3;
    v14 = height;
    v11 = (unint64_t)CGRectStandardize(*(CGRect *)&v11);
  }
  valuePtr = *(double *)&v11;
  v15 = CFNumberCreate(v8, kCFNumberDoubleType, &valuePtr);
  CFArrayAppendValue(Mutable, v15);
  CFRelease(v15);
  if (v10)
  {
    v25.origin.x = a1;
    v25.origin.y = y;
    v25.size.width = a3;
    v25.size.height = height;
    v26 = CGRectStandardize(v25);
  }
  else
  {
    v26.origin.y = y;
  }
  valuePtr = v26.origin.y;
  v16 = CFNumberCreate(v8, kCFNumberDoubleType, &valuePtr);
  CFArrayAppendValue(Mutable, v16);
  CFRelease(v16);
  v17 = a1;
  if (v10)
  {
    v18 = y;
    v19 = a3;
    v20 = height;
    *(CGRect *)&v17 = CGRectStandardize(*(CGRect *)&v17);
  }
  else
  {
    v27.size.width = a3;
  }
  valuePtr = v17 + v27.size.width;
  v21 = CFNumberCreate(v8, kCFNumberDoubleType, &valuePtr);
  CFArrayAppendValue(Mutable, v21);
  CFRelease(v21);
  if (v10)
  {
    v28.origin.x = a1;
    v28.origin.y = y;
    v28.size.width = a3;
    v28.size.height = height;
    v29 = CGRectStandardize(v28);
    y = v29.origin.y;
    height = v29.size.height;
  }
  valuePtr = y + height;
  v22 = CFNumberCreate(v8, kCFNumberDoubleType, &valuePtr);
  CFArrayAppendValue(Mutable, v22);
  CFRelease(v22);
  return Mutable;
}

uint64_t CGCFDictionaryGetPDFRect(const __CFDictionary *a1, const void *a2, float64x2_t *a3)
{
  uint64_t v3;
  const __CFArray *Value;
  const __CFArray *v6;
  CFTypeID v7;
  CFIndex v9;
  const void *ValueAtIndex;
  CFTypeID v11;
  const __CFNumber *v12;
  const __CFNumber *v13;
  const __CFNumber *v14;
  const __CFNumber *v15;

  v3 = 0;
  if (a1 && a2 && a3)
  {
    Value = (const __CFArray *)CFDictionaryGetValue(a1, a2);
    if (Value)
    {
      v6 = Value;
      v7 = CFGetTypeID(Value);
      if (v7 == CFArrayGetTypeID() && CFArrayGetCount(v6) >= 4)
      {
        v9 = 0;
        while (1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v6, v9);
          v11 = CFGetTypeID(ValueAtIndex);
          if (v11 != CFNumberGetTypeID())
            break;
          if (++v9 == 4)
          {
            v12 = (const __CFNumber *)CFArrayGetValueAtIndex(v6, 0);
            CFNumberGetValue(v12, kCFNumberDoubleType, a3);
            v3 = 1;
            v13 = (const __CFNumber *)CFArrayGetValueAtIndex(v6, 1);
            CFNumberGetValue(v13, kCFNumberDoubleType, &a3->f64[1]);
            v14 = (const __CFNumber *)CFArrayGetValueAtIndex(v6, 2);
            CFNumberGetValue(v14, kCFNumberDoubleType, &a3[1]);
            v15 = (const __CFNumber *)CFArrayGetValueAtIndex(v6, 3);
            CFNumberGetValue(v15, kCFNumberDoubleType, &a3[1].f64[1]);
            a3[1] = vsubq_f64(a3[1], *a3);
            return v3;
          }
        }
      }
    }
    return 0;
  }
  return v3;
}

__CFData *CGCFURLCopyFileData(CFURLRef fileURL)
{
  __CFReadStream *v1;
  __CFReadStream *v2;
  __CFData *i;
  CFIndex v4;
  UInt8 buffer[1024];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = CFReadStreamCreateWithFile(0, fileURL);
  if (!v1)
    return 0;
  v2 = v1;
  if (CFReadStreamOpen(v1))
  {
    for (i = CFDataCreateMutable(0, 0); ; CFDataAppendBytes(i, buffer, v4))
    {
      v4 = CFReadStreamRead(v2, buffer, 1024);
      if (!v4)
        break;
    }
    CFReadStreamClose(v2);
  }
  else
  {
    i = 0;
  }
  CFRelease(v2);
  return i;
}

void add_keys_and_values(void *key, void *value, CFMutableDictionaryRef theDict)
{
  if (value && key)
  {
    if (theDict)
      CFDictionarySetValue(theDict, key, value);
  }
}

uint64_t (*__object_md5_creator_block_invoke_2())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileGetMD5");
  v1 = colorsync_smart_null;
  if (result)
    v1 = result;
  object_md5_creator_f_2 = (uint64_t (*)(_QWORD))v1;
  return result;
}

uint64_t colorsync_smart_null()
{
  return 0;
}

void PDFPatternRelease(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v10;
  uint64_t v11;

  if (a1)
  {
    if ((*(_DWORD *)a1)-- == 1)
    {
      v10 = (const void *)a1[3];
      if (v10)
        CFRelease(v10);
      v11 = a1[2];
      if (v11)
        PDFContentStreamRelease(v11, a2, a3, a4, a5, a6, a7, a8);
      free(a1);
    }
  }
}

uint64_t CPCopyObject(void *a1, NSZone *a2)
{
  objc_class *Class;
  uint64_t v5;

  if (!a1)
    return 0;
  Class = object_getClass(a1);
  v5 = objc_msgSend(NSAllocateObject(Class, 0, a2), "initSuper");
  if (v5)
    CPAssignVariables(Class, (uint64_t)a1, v5, (uint64_t)a2);
  return v5;
}

void CPAssignVariables(objc_class *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Class Superclass;
  Ivar *v9;
  unint64_t i;
  objc_ivar *v11;
  ptrdiff_t Offset;
  void *v13;
  unsigned int outCount;

  if (a1 && (objc_class *)objc_opt_class() != a1)
  {
    Superclass = class_getSuperclass(a1);
    CPAssignVariables(Superclass, a2, a3, a4);
    outCount = 0;
    v9 = class_copyIvarList(a1, &outCount);
    if (outCount)
    {
      for (i = 0; i < outCount; ++i)
      {
        v11 = v9[i];
        Offset = ivar_getOffset(v11);
        v13 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3B18], "allocWithZone:", a4), "initWithBytes:objCType:", a2 + Offset, ivar_getTypeEncoding(v11));
        objc_msgSend(v13, "getValue:", a3 + Offset);

      }
    }
    free(v9);
  }
}

void std::vector<applesauce::CF::ObjectRef<CGPath *>>::__destroy_vector::operator()[abi:se180100](void ***a1)
{
  void **v1;
  const void **v2;
  const void **v4;
  void *v5;

  v1 = *a1;
  v2 = (const void **)**a1;
  if (v2)
  {
    v4 = (const void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::__destroy_at[abi:se180100]<applesauce::CF::ObjectRef<CGPath *>,0>(--v4);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::__unordered_map_hasher<CGPDFFont *,std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::hash<CGPDFFont *>,std::equal_to<CGPDFFont *>,true>,std::__unordered_map_equal<CGPDFFont *,std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::equal_to<CGPDFFont *>,std::hash<CGPDFFont *>,true>,std::allocator<std::__hash_value_type<CGPDFFont *,std::pair<double,double>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__destroy_at[abi:se180100]<applesauce::CF::ObjectRef<CGPath *>,0>(const void **a1)
{
  const void *v1;

  if (a1)
  {
    v1 = *a1;
    if (v1)
      CFRelease(v1);
  }
  else
  {
    __break(1u);
  }
}

uint64_t std::__split_buffer<applesauce::CF::ObjectRef<CGPath *>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    std::__destroy_at[abi:se180100]<applesauce::CF::ObjectRef<CGPath *>,0>((const void **)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

const void **applesauce::CF::ObjectRef<CGPath *>::~ObjectRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **applesauce::CF::ObjectRef<CGDisplayList *>::~ObjectRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void PageLayoutFactory::ScannerContext::op_q(PageLayoutFactory::ScannerContext *this, int64x2_t *a2, void *a3)
{
  _QWORD *v4;
  uint64_t v5;
  CGMutablePathRef MutableCopy;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;

  if (a2[2].i8[0])
  {
  }
  else
  {
    CGPDFRStateGSave(a2[1].i64[0]);
    v4 = (_QWORD *)a2[1].i64[0];
    if (v4)
      v4 = (_QWORD *)*v4;
    a2[1].i64[1] = (uint64_t)v4;
    v5 = a2[11].i64[1];
    if (a2[11].i64[0] == v5)
    {
      __break(1u);
    }
    else
    {
      MutableCopy = CGPathCreateMutableCopy(*(CGPathRef *)(v5 - 8));
      v7 = a2[12].u64[0];
      v8 = (_QWORD *)a2[11].i64[1];
      if ((unint64_t)v8 >= v7)
      {
        v10 = a2[11].i64[0];
        v11 = ((uint64_t)v8 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61)
          std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
        v12 = v7 - v10;
        v13 = v12 >> 2;
        if (v12 >> 2 <= (unint64_t)(v11 + 1))
          v13 = v11 + 1;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        v27 = a2 + 12;
        if (v14)
        {
          v16 = std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(v14);
        }
        else
        {
          v16 = 0;
          v15 = 0;
        }
        v17 = (char *)&v16[v15];
        v26 = v17;
        v18 = std::construct_at[abi:se180100]<applesauce::CF::ObjectRef<CGPath *>,applesauce::CF::ObjectRef<CGPath *> const&,applesauce::CF::ObjectRef<CGPath *>*>(&v16[v11], MutableCopy);
        v9 = v18 + 1;
        v25.i64[1] = (uint64_t)(v18 + 1);
        v20 = (_QWORD *)a2[11].i64[0];
        v19 = (_QWORD *)a2[11].i64[1];
        if (v19 == v20)
        {
          v22 = vdupq_n_s64((unint64_t)v19);
        }
        else
        {
          do
          {
            v21 = *--v19;
            *--v18 = v21;
            *v19 = 0;
          }
          while (v19 != v20);
          v22 = a2[11];
          v9 = (_QWORD *)v25.i64[1];
          v17 = v26;
        }
        a2[11].i64[0] = (uint64_t)v18;
        a2[11].i64[1] = (uint64_t)v9;
        v25 = v22;
        v23 = a2[12].i64[0];
        a2[12].i64[0] = (uint64_t)v17;
        v26 = (char *)v23;
        v24 = v22.i64[0];
        std::__split_buffer<applesauce::CF::ObjectRef<CGPath *>>::~__split_buffer((uint64_t)&v24);
      }
      else
      {
        v9 = std::construct_at[abi:se180100]<applesauce::CF::ObjectRef<CGPath *>,applesauce::CF::ObjectRef<CGPath *> const&,applesauce::CF::ObjectRef<CGPath *>*>(v8, MutableCopy)+ 1;
      }
      a2[11].i64[1] = (uint64_t)v9;
      if (MutableCopy)
        CFRelease(MutableCopy);
    }
  }
}

void sub_184AC38C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  applesauce::CF::ObjectRef<CGPath *>::~ObjectRef(&a9);
  _Unwind_Resume(a1);
}

void PageLayoutFactory::ScannerContext::op_Q(PageLayoutFactory::ScannerContext *this, int64x2_t *a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  CGMutablePathRef Mutable;
  CGMutablePathRef v7;
  unint64_t v8;
  CGMutablePathRef *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  CGMutablePathRef *v18;
  _QWORD *v19;
  _QWORD *v20;
  CGPath *v21;
  int64x2_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  int64x2_t v26;
  uint64_t v27;
  int64x2_t *v28;

  if (a2[2].i8[0])
  {
    return;
  }
  v4 = a2[11].i64[1];
  if (v4 != a2[11].i64[0])
  {
    v5 = v4 - 8;
    std::__destroy_at[abi:se180100]<applesauce::CF::ObjectRef<CGPath *>,0>((const void **)(v4 - 8));
    a2[11].i64[1] = v5;
    if (a2[11].i64[0] != v5)
      goto LABEL_22;
  }
  pdf_error("warning: gstate path stack underflow.");
  Mutable = CGPathCreateMutable();
  v7 = Mutable;
  v8 = a2[12].u64[0];
  v9 = (CGMutablePathRef *)a2[11].i64[1];
  if ((unint64_t)v9 >= v8)
  {
    v11 = a2[11].i64[0];
    v12 = ((uint64_t)v9 - v11) >> 3;
    if ((unint64_t)(v12 + 1) >> 61)
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
    v13 = v8 - v11;
    v14 = v13 >> 2;
    if (v13 >> 2 <= (unint64_t)(v12 + 1))
      v14 = v12 + 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    v28 = a2 + 12;
    if (v15)
    {
      v16 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(v15);
      if (v16)
      {
        v18 = (CGMutablePathRef *)&v16[8 * v12];
        *v18 = v7;
        v10 = v18 + 1;
        v20 = (_QWORD *)a2[11].i64[0];
        v19 = (_QWORD *)a2[11].i64[1];
        if (v19 == v20)
        {
          v22 = vdupq_n_s64((unint64_t)v19);
        }
        else
        {
          do
          {
            v21 = (CGPath *)*--v19;
            *--v18 = v21;
            *v19 = 0;
          }
          while (v19 != v20);
          v22 = a2[11];
        }
        a2[11].i64[0] = (uint64_t)v18;
        a2[11].i64[1] = (uint64_t)v10;
        v26 = v22;
        v23 = a2[12].i64[0];
        a2[12].i64[0] = (uint64_t)&v16[8 * v17];
        v27 = v23;
        v25 = v22.i64[0];
        std::__split_buffer<applesauce::CF::ObjectRef<CGPath *>>::~__split_buffer((uint64_t)&v25);
        goto LABEL_21;
      }
    }
LABEL_26:
    __break(1u);
    return;
  }
  if (!v9)
    goto LABEL_26;
  *v9 = Mutable;
  v10 = v9 + 1;
LABEL_21:
  a2[11].i64[1] = (uint64_t)v10;
LABEL_22:
  CGPDFRStateGRestore(a2[1].i64[0]);
  v24 = (_QWORD *)a2[1].i64[0];
  if (v24)
    v24 = (_QWORD *)*v24;
  a2[1].i64[1] = (uint64_t)v24;
}

void sub_184AC3A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  applesauce::CF::ObjectRef<CGPath *>::~ObjectRef(&a9);
  _Unwind_Resume(a1);
}

double PageLayoutFactory::ScannerContext::op_cm(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  double result;
  double *v6;
  double v7[6];
  CGPDFReal value;
  CGPDFReal v9;
  CGPDFReal v10;
  CGPDFReal v11;
  CGPDFReal v12;
  CGPDFReal v13;

  v12 = 0.0;
  v13 = 0.0;
  v10 = 0.0;
  v11 = 0.0;
  value = 0.0;
  v9 = 0.0;
  if (CGPDFScannerPopNumber(this, &value)
    && CGPDFScannerPopNumber(this, &v9)
    && CGPDFScannerPopNumber(this, &v10)
    && CGPDFScannerPopNumber(this, &v11)
    && CGPDFScannerPopNumber(this, &v12)
    && CGPDFScannerPopNumber(this, &v13))
  {
    v6 = (double *)*((_QWORD *)a2 + 3);
    v7[0] = v13;
    v7[1] = v12;
    v7[2] = v11;
    v7[3] = v10;
    v7[4] = v9;
    v7[5] = value;
    return CGPDFGStateConcatCTM(v6, v7);
  }
  return result;
}

void PageLayoutFactory::ScannerContext::op_g(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  CGColorSpace *ColorSpace;
  CGColorSpace *v8;
  PageLayoutFactory::ScannerContext *ResolvedColorSpace;
  CGColorSpace *v10;

  v5 = *((_QWORD *)this + 7);
  if (v5)
  {
    v6 = *((_QWORD *)this + 7);
    while (1)
    {
      ColorSpace = CGPDFResourcesGetColorSpace(*(_QWORD *)(v6 + 32), "DeviceGray");
      if (ColorSpace)
        break;
      v6 = *(_QWORD *)(v6 + 40);
      if (!v6)
        goto LABEL_5;
    }
    v8 = ColorSpace;
  }
  else
  {
LABEL_5:
    v8 = 0;
  }
  ResolvedColorSpace = (PageLayoutFactory::ScannerContext *)CGPDFContentStreamCreateResolvedColorSpace(v5, v8);
  PageLayoutFactory::ScannerContext::set_color(this, a2, ResolvedColorSpace, v10);
  CGColorSpaceRelease(ResolvedColorSpace);
}

void PageLayoutFactory::ScannerContext::op_k(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  CGColorSpace *ColorSpace;
  CGColorSpace *v8;
  PageLayoutFactory::ScannerContext *ResolvedColorSpace;
  CGColorSpace *v10;

  v5 = *((_QWORD *)this + 7);
  if (v5)
  {
    v6 = *((_QWORD *)this + 7);
    while (1)
    {
      ColorSpace = CGPDFResourcesGetColorSpace(*(_QWORD *)(v6 + 32), "DeviceCMYK");
      if (ColorSpace)
        break;
      v6 = *(_QWORD *)(v6 + 40);
      if (!v6)
        goto LABEL_5;
    }
    v8 = ColorSpace;
  }
  else
  {
LABEL_5:
    v8 = 0;
  }
  ResolvedColorSpace = (PageLayoutFactory::ScannerContext *)CGPDFContentStreamCreateResolvedColorSpace(v5, v8);
  PageLayoutFactory::ScannerContext::set_color(this, a2, ResolvedColorSpace, v10);
  CGColorSpaceRelease(ResolvedColorSpace);
}

void PageLayoutFactory::ScannerContext::op_rg(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  CGColorSpace *ColorSpace;
  CGColorSpace *v8;
  PageLayoutFactory::ScannerContext *ResolvedColorSpace;
  CGColorSpace *v10;

  v5 = *((_QWORD *)this + 7);
  if (v5)
  {
    v6 = *((_QWORD *)this + 7);
    while (1)
    {
      ColorSpace = CGPDFResourcesGetColorSpace(*(_QWORD *)(v6 + 32), "DeviceRGB");
      if (ColorSpace)
        break;
      v6 = *(_QWORD *)(v6 + 40);
      if (!v6)
        goto LABEL_5;
    }
    v8 = ColorSpace;
  }
  else
  {
LABEL_5:
    v8 = 0;
  }
  ResolvedColorSpace = (PageLayoutFactory::ScannerContext *)CGPDFContentStreamCreateResolvedColorSpace(v5, v8);
  PageLayoutFactory::ScannerContext::set_color(this, a2, ResolvedColorSpace, v10);
  CGColorSpaceRelease(ResolvedColorSpace);
}

void PageLayoutFactory::ScannerContext::op_cs(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  CGColorSpace *ColorSpace;
  CGColorSpace *v9;
  CGColorSpace *ResolvedColorSpace;
  CGColorSpace *v11;
  CGColorSpace *v12;
  char *value;

  value = 0;
  if (CGPDFScannerPopName(this, (const char **)&value))
  {
    v5 = *((_QWORD *)this + 7);
    if (v5)
    {
      v6 = value;
      v7 = v5;
      while (1)
      {
        ColorSpace = CGPDFResourcesGetColorSpace(*(_QWORD *)(v7 + 32), v6);
        if (ColorSpace)
          break;
        v7 = *(_QWORD *)(v7 + 40);
        if (!v7)
          goto LABEL_6;
      }
      v9 = ColorSpace;
    }
    else
    {
LABEL_6:
      v9 = 0;
    }
    ResolvedColorSpace = (CGColorSpace *)CGPDFContentStreamCreateResolvedColorSpace(v5, v9);
    if (ResolvedColorSpace)
    {
      v11 = ResolvedColorSpace;
      v12 = CGColorSpaceCopyDefaultColor((uint64_t)ResolvedColorSpace);
      CGPDFGStateSetFillColor(*((_QWORD *)a2 + 3), v12);
      CGColorSpaceRelease(v11);
      if (v12)
        CFRelease(v12);
    }
  }
}

void PageLayoutFactory::ScannerContext::op_sc(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3, CGColorSpace *a4)
{
  PageLayoutFactory::ScannerContext::set_color(this, a2, 0, a4);
}

void PageLayoutFactory::ScannerContext::op_scn(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  unint64_t FillColor;
  uint64_t v6;
  uint64_t v7;
  CGColorSpace *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CGColorSpaceRef ColorSpace;

  FillColor = CGPDFGStateGetFillColor(*((_QWORD *)a2 + 3));
  if (FillColor)
  {
    if ((FillColor & 0x8000000000000000) != 0)
    {
      ColorSpace = CGTaggedColorGetColorSpace(FillColor, v6, v7, (uint64_t)v8, v9, v10, v11, v12);
      if (!ColorSpace)
        goto LABEL_8;
LABEL_7:
      if (*(_DWORD *)(*((_QWORD *)ColorSpace + 3) + 24) == 6)
        return;
      goto LABEL_8;
    }
    ColorSpace = *(CGColorSpaceRef *)(FillColor + 24);
    if (ColorSpace)
      goto LABEL_7;
  }
  else
  {
    ColorSpace = 0;
  }
LABEL_8:
  PageLayoutFactory::ScannerContext::set_color(this, a2, ColorSpace, v8);
}

BOOL PageLayoutFactory::ScannerContext::op_Tc(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  _BOOL8 result;
  uint64_t v5;
  CGPDFReal v6;
  CGPDFReal *v7;
  CGPDFReal value;

  value = 0.0;
  result = CGPDFScannerPopNumber(this, &value);
  if (result)
  {
    v5 = *((_QWORD *)a2 + 3);
    if (v5)
    {
      v6 = value;
      *(CGPDFReal *)(v5 + 72) = value;
      v7 = *(CGPDFReal **)(v5 + 272);
      if (v7)
        *v7 = v6;
    }
  }
  return result;
}

BOOL PageLayoutFactory::ScannerContext::op_Tw(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  _BOOL8 result;
  uint64_t v5;
  CGPDFReal v6;
  uint64_t v7;
  CGPDFReal value;

  value = 0.0;
  result = CGPDFScannerPopNumber(this, &value);
  if (result)
  {
    v5 = *((_QWORD *)a2 + 3);
    if (v5)
    {
      v6 = value;
      *(CGPDFReal *)(v5 + 80) = value;
      v7 = *(_QWORD *)(v5 + 272);
      if (v7)
        *(CGPDFReal *)(v7 + 8) = v6;
    }
  }
  return result;
}

BOOL PageLayoutFactory::ScannerContext::op_Tz(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  _BOOL8 result;
  uint64_t v5;
  CGPDFReal v6;
  uint64_t v7;
  CGPDFReal value;

  value = 0.0;
  result = CGPDFScannerPopNumber(this, &value);
  if (result)
  {
    v5 = *((_QWORD *)a2 + 3);
    if (v5)
    {
      v6 = value;
      *(CGPDFReal *)(v5 + 88) = value;
      v7 = *(_QWORD *)(v5 + 272);
      if (v7)
        *(CGPDFReal *)(v7 + 16) = v6;
    }
  }
  return result;
}

BOOL PageLayoutFactory::ScannerContext::op_TL(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  _BOOL8 result;
  uint64_t v5;
  CGPDFReal v6;
  uint64_t v7;
  CGPDFReal value;

  value = 0.0;
  result = CGPDFScannerPopNumber(this, &value);
  if (result)
  {
    v5 = *((_QWORD *)a2 + 3);
    if (v5)
    {
      v6 = value;
      *(CGPDFReal *)(v5 + 96) = value;
      v7 = *(_QWORD *)(v5 + 272);
      if (v7)
        *(CGPDFReal *)(v7 + 24) = v6;
    }
  }
  return result;
}

void PageLayoutFactory::ScannerContext::op_Tf(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  unint64_t v3;
  const void *Font;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint8x8_t v15;
  double **v16;
  double *v17;
  unint64_t v18;
  double *v19;
  _QWORD *v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  int8x8_t prime;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint8x8_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  double **v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint8x8_t v48;
  _QWORD *v49;
  _QWORD *i;
  unint64_t v51;
  _QWORD *v52;
  float v53;
  float v54;
  _BOOL8 v55;
  unint64_t v56;
  unint64_t v57;
  size_t v58;
  void *v59;
  uint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  unint64_t FontDescriptor;
  int v66;
  uint64_t *v67;
  id v68;
  char *v69;
  unint64_t v70;
  unint64_t v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  double *v78;
  char *v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  int v83;
  unint64_t CMap;
  void ***Advances;
  unint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(_QWORD, double **, uint64_t);
  int v89;
  double HorizontalAdvance;
  uint64_t v91;
  CGPDFReal v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  CGPDFReal value;
  void *__p[2];
  uint64_t v99;
  unint64_t v100;
  double *v101;
  char *v102;
  char *v103;
  double *v104;
  uint64_t *v105;

  v96 = 0;
  value = 0.0;
  if (!CGPDFScannerPopNumber(this, &value) || !CGPDFScannerPopName(this, (const char **)&v96))
    return;
  Font = CGPDFContentStreamGetFont(*((_QWORD *)this + 7), v96);
  if (!Font)
  {
    return;
  }
  v7 = (unint64_t)Font;
  v8 = (_QWORD *)CGPDFFontGetFont((uint64_t)Font);
  v9 = (unint64_t)v8;
  if (v8)
  {
    CFRetain(v8);
    v100 = v9;
    v10 = *(_QWORD *)a2;
    CFRetain((CFTypeRef)v9);
  }
  else
  {
    v100 = 0;
    v10 = *(_QWORD *)a2;
  }
  __p[0] = (void *)v9;
  __p[1] = (void *)0xBFF0000000000000;
  v11 = 0x9DDFEA08EB382D69 * (((8 * v9) + 8) ^ HIDWORD(v9));
  v12 = 0x9DDFEA08EB382D69 * (HIDWORD(v9) ^ (v11 >> 47) ^ v11);
  v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
  v14 = *(_QWORD *)(v10 + 72);
  if (!v14)
    goto LABEL_25;
  v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
  v15.i16[0] = vaddlv_u8(v15);
  if (v15.u32[0] > 1uLL)
  {
    v3 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
    if (v13 >= v14)
      v3 = v13 % v14;
  }
  else
  {
    v3 = v13 & (v14 - 1);
  }
  v16 = *(double ***)(*(_QWORD *)(v10 + 64) + 8 * v3);
  if (!v16 || (v17 = *v16) == 0)
  {
LABEL_25:
    v19 = (double *)operator new(0x20uLL);
    v20 = (_QWORD *)(v10 + 80);
    v101 = v19;
    v102 = (char *)(v10 + 80);
    *v19 = 0.0;
    *((_QWORD *)v19 + 1) = v13;
    if (v9)
      CFRetain((CFTypeRef)v9);
    *((_QWORD *)v19 + 2) = v9;
    v19[3] = -1.0;
    LOBYTE(v103) = 1;
    v21 = (float)(unint64_t)(*(_QWORD *)(v10 + 88) + 1);
    v22 = *(float *)(v10 + 96);
    if (v14 && (float)(v22 * (float)v14) >= v21)
    {
LABEL_73:
      v39 = *(double ***)(*(_QWORD *)(v10 + 64) + 8 * v3);
      v17 = v101;
      if (v39)
      {
        *(_QWORD *)v101 = *v39;
      }
      else
      {
        *v101 = *(double *)(v10 + 80);
        *(_QWORD *)(v10 + 80) = v17;
        *(_QWORD *)(*(_QWORD *)(v10 + 64) + 8 * v3) = v20;
        if (!*(_QWORD *)v17)
          goto LABEL_82;
        v40 = *(_QWORD *)(*(_QWORD *)v17 + 8);
        if ((v14 & (v14 - 1)) != 0)
        {
          if (v40 >= v14)
            v40 %= v14;
        }
        else
        {
          v40 &= v14 - 1;
        }
        v39 = (double **)(*(_QWORD *)(v10 + 64) + 8 * v40);
      }
      *v39 = v17;
LABEL_82:
      v101 = 0;
      ++*(_QWORD *)(v10 + 88);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<applesauce::CF::ObjectRef<CGFont *>,double>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<applesauce::CF::ObjectRef<CGFont *>,double>,void *>>>>::reset[abi:se180100]((uint64_t)&v101);
      v41 = 0;
      if (!v9)
        goto LABEL_84;
      goto LABEL_83;
    }
    v23 = 1;
    if (v14 >= 3)
      v23 = (v14 & (v14 - 1)) != 0;
    v24 = v23 | (2 * v14);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      prime = (int8x8_t)v25;
    else
      prime = (int8x8_t)v24;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v14 = *(_QWORD *)(v10 + 72);
    if (*(_QWORD *)&prime > v14)
      goto LABEL_39;
    if (*(_QWORD *)&prime < v14)
    {
      v33 = vcvtps_u32_f32((float)*(unint64_t *)(v10 + 88) / *(float *)(v10 + 96));
      if (v14 < 3 || (v34 = (uint8x8_t)vcnt_s8((int8x8_t)v14), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        v33 = std::__next_prime(v33);
      }
      else
      {
        v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2)
          v33 = v35;
      }
      if (*(_QWORD *)&prime <= v33)
        prime = (int8x8_t)v33;
      if (*(_QWORD *)&prime >= v14)
      {
        v14 = *(_QWORD *)(v10 + 72);
      }
      else
      {
        if (prime)
        {
LABEL_39:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:se180100]();
          v27 = operator new(8 * *(_QWORD *)&prime);
          v28 = *(void **)(v10 + 64);
          *(_QWORD *)(v10 + 64) = v27;
          if (v28)
            operator delete(v28);
          v29 = 0;
          *(int8x8_t *)(v10 + 72) = prime;
          do
            *(_QWORD *)(*(_QWORD *)(v10 + 64) + 8 * v29++) = 0;
          while (*(_QWORD *)&prime != v29);
          v30 = (_QWORD *)*v20;
          if (*v20)
          {
            v31 = v30[1];
            v32 = (uint8x8_t)vcnt_s8(prime);
            v32.i16[0] = vaddlv_u8(v32);
            if (v32.u32[0] > 1uLL)
            {
              if (v31 >= *(_QWORD *)&prime)
                v31 %= *(_QWORD *)&prime;
            }
            else
            {
              v31 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)(v10 + 64) + 8 * v31) = v20;
            v36 = (_QWORD *)*v30;
            if (*v30)
            {
              do
              {
                v37 = v36[1];
                if (v32.u32[0] > 1uLL)
                {
                  if (v37 >= *(_QWORD *)&prime)
                    v37 %= *(_QWORD *)&prime;
                }
                else
                {
                  v37 &= *(_QWORD *)&prime - 1;
                }
                if (v37 != v31)
                {
                  v38 = *(_QWORD *)(v10 + 64);
                  if (!*(_QWORD *)(v38 + 8 * v37))
                  {
                    *(_QWORD *)(v38 + 8 * v37) = v30;
                    goto LABEL_64;
                  }
                  *v30 = *v36;
                  *v36 = **(_QWORD **)(*(_QWORD *)(v10 + 64) + 8 * v37);
                  **(_QWORD **)(*(_QWORD *)(v10 + 64) + 8 * v37) = v36;
                  v36 = v30;
                }
                v37 = v31;
LABEL_64:
                v30 = v36;
                v36 = (_QWORD *)*v36;
                v31 = v37;
              }
              while (v36);
            }
          }
          v14 = (unint64_t)prime;
          goto LABEL_68;
        }
        v59 = *(void **)(v10 + 64);
        *(_QWORD *)(v10 + 64) = 0;
        if (v59)
          operator delete(v59);
        v14 = 0;
        *(_QWORD *)(v10 + 72) = 0;
      }
    }
LABEL_68:
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14)
        v3 = v13 % v14;
      else
        v3 = v13;
    }
    else
    {
      v3 = (v14 - 1) & v13;
    }
    goto LABEL_73;
  }
  while (1)
  {
    v18 = *((_QWORD *)v17 + 1);
    if (v18 == v13)
      break;
    if (v15.u32[0] > 1uLL)
    {
      if (v18 >= v14)
        v18 %= v14;
    }
    else
    {
      v18 &= v14 - 1;
    }
    if (v18 != v3)
      goto LABEL_25;
LABEL_24:
    v17 = *(double **)v17;
    if (!v17)
      goto LABEL_25;
  }
  if (*((_QWORD *)v17 + 2) != v9)
    goto LABEL_24;
  v41 = 1;
  if (v9)
LABEL_83:
    CFRelease((CFTypeRef)v9);
LABEL_84:
  if ((v41 & 1) != 0)
  {
LABEL_170:
    if (v9)
      CFRelease((CFTypeRef)v9);
    CGPDFGStateSetFont(*((_QWORD *)a2 + 3), (CFTypeRef)v7);
    v91 = *((_QWORD *)a2 + 3);
    if (v91)
    {
      v92 = value;
      *(CGPDFReal *)(v91 + 128) = value;
      v93 = *(_QWORD *)(v91 + 272);
      if (v93)
        *(CGPDFReal *)(v93 + 56) = v92;
    }
    return;
  }
  v42 = *(_QWORD *)a2;
  v94 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 248);
  v95 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 256);
  v43 = (uint64_t *)(*(_QWORD *)a2 + 104);
  v44 = 0x9DDFEA08EB382D69 * (((8 * v7) + 8) ^ HIDWORD(v7));
  v45 = 0x9DDFEA08EB382D69 * (HIDWORD(v7) ^ (v44 >> 47) ^ v44);
  v46 = 0x9DDFEA08EB382D69 * (v45 ^ (v45 >> 47));
  v47 = *(_QWORD *)(*(_QWORD *)a2 + 112);
  if (v47)
  {
    v48 = (uint8x8_t)vcnt_s8((int8x8_t)v47);
    v48.i16[0] = vaddlv_u8(v48);
    if (v48.u32[0] > 1uLL)
    {
      v14 = 0x9DDFEA08EB382D69 * (v45 ^ (v45 >> 47));
      if (v46 >= v47)
        v14 = v46 % v47;
    }
    else
    {
      v14 = v46 & (v47 - 1);
    }
    v49 = *(_QWORD **)(*v43 + 8 * v14);
    if (v49)
    {
      for (i = (_QWORD *)*v49; i; i = (_QWORD *)*i)
      {
        v51 = i[1];
        if (v51 == v46)
        {
          if (i[2] == v7)
            goto LABEL_135;
        }
        else
        {
          if (v48.u32[0] > 1uLL)
          {
            if (v51 >= v47)
              v51 %= v47;
          }
          else
          {
            v51 &= v47 - 1;
          }
          if (v51 != v14)
            break;
        }
      }
    }
  }
  v52 = operator new(0x20uLL);
  *v52 = 0;
  v52[1] = v46;
  v52[2] = v7;
  v52[3] = (v95 - v94) >> 5;
  v53 = (float)(unint64_t)(*(_QWORD *)(v42 + 128) + 1);
  v54 = *(float *)(v42 + 136);
  if (!v47 || (float)(v54 * (float)v47) < v53)
  {
    v55 = 1;
    if (v47 >= 3)
      v55 = (v47 & (v47 - 1)) != 0;
    v56 = v55 | (2 * v47);
    v57 = vcvtps_u32_f32(v53 / v54);
    if (v56 <= v57)
      v58 = v57;
    else
      v58 = v56;
    std::__hash_table<std::__hash_value_type<CGPDFFont *,unsigned long>,std::__unordered_map_hasher<CGPDFFont *,std::__hash_value_type<CGPDFFont *,unsigned long>,std::hash<CGPDFFont *>,std::equal_to<CGPDFFont *>,true>,std::__unordered_map_equal<CGPDFFont *,std::__hash_value_type<CGPDFFont *,unsigned long>,std::equal_to<CGPDFFont *>,std::hash<CGPDFFont *>,true>,std::allocator<std::__hash_value_type<CGPDFFont *,unsigned long>>>::__rehash<true>(v42 + 104, v58);
    v47 = *(_QWORD *)(v42 + 112);
    if ((v47 & (v47 - 1)) != 0)
    {
      if (v46 >= v47)
        v14 = v46 % v47;
      else
        v14 = v46;
    }
    else
    {
      v14 = (v47 - 1) & v46;
    }
  }
  v60 = *v43;
  v61 = *(_QWORD **)(*v43 + 8 * v14);
  if (v61)
  {
    *v52 = *v61;
    goto LABEL_133;
  }
  *v52 = *(_QWORD *)(v42 + 120);
  *(_QWORD *)(v42 + 120) = v52;
  *(_QWORD *)(v60 + 8 * v14) = v42 + 120;
  if (*v52)
  {
    v62 = *(_QWORD *)(*v52 + 8);
    if ((v47 & (v47 - 1)) != 0)
    {
      if (v62 >= v47)
        v62 %= v47;
    }
    else
    {
      v62 &= v47 - 1;
    }
    v61 = (_QWORD *)(*v43 + 8 * v62);
LABEL_133:
    *v61 = v52;
  }
  ++*(_QWORD *)(v42 + 128);
LABEL_135:
  if (v9)
    v63 = (void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)(v9 + 16) + 152))(*(_QWORD *)(v9 + 112));
  else
    v63 = 0;
  if ((unint64_t)objc_msgSend(v63, "length") >= 8
    && objc_msgSend(v63, "characterAtIndex:", 6) == 43)
  {
    objc_msgSend(v63, "substringFromIndex:", 7);
    v64 = objc_claimAutoreleasedReturnValue();

    v63 = (void *)v64;
  }
  FontDescriptor = CGPDFFontGetFontDescriptor(v7);
  if (FontDescriptor)
    v66 = *(_DWORD *)(FontDescriptor + 40);
  else
    v66 = 0;
  v67 = *(uint64_t **)(*(_QWORD *)a2 + 8);
  v68 = objc_retainAutorelease(v63);
  if (objc_msgSend(v68, "UTF8String"))
    v69 = (char *)objc_msgSend(objc_retainAutorelease(v68), "UTF8String");
  else
    v69 = "";
  std::string::basic_string[abi:se180100]<0>((char **)__p, v69);
  v70 = v67[32];
  v71 = v67[33];
  if (v70 >= v71)
  {
    v73 = v67[31];
    v74 = (uint64_t)(v70 - v73) >> 5;
    v75 = v74 + 1;
    if ((unint64_t)(v74 + 1) >> 59)
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
    v76 = v71 - v73;
    if (v76 >> 4 > v75)
      v75 = v76 >> 4;
    if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFE0)
      v77 = 0x7FFFFFFFFFFFFFFLL;
    else
      v77 = v75;
    v105 = v67 + 33;
    if (!v77)
      goto LABEL_178;
    v78 = (double *)std::__allocate_at_least[abi:se180100]<std::allocator<CGRect>>(v77);
    v79 = (char *)&v78[4 * v74];
    v101 = v78;
    v102 = v79;
    v104 = &v78[4 * v80];
    if (!v78)
      goto LABEL_178;
    v81 = *(_OWORD *)__p;
    *((_QWORD *)v79 + 2) = v99;
    *(_OWORD *)v79 = v81;
    __p[1] = 0;
    v99 = 0;
    __p[0] = 0;
    LODWORD(v78[4 * v74 + 3]) = v66;
    v103 = v79 + 32;
    std::vector<std::pair<std::string,unsigned int>>::__swap_out_circular_buffer(v67 + 31, &v101);
    v82 = v67[32];
    std::__split_buffer<std::pair<std::string,unsigned int>>::~__split_buffer((uint64_t)&v101);
    v83 = SHIBYTE(v99);
    v67[32] = v82;
    if (v83 < 0)
      operator delete(__p[0]);
LABEL_160:
    CMap = CGPDFFontGetCMap(v7);
    Advances = CGPDFFontGetAdvances((void ***)v7);
    v86 = 32;
    if (CMap)
    {
      v87 = CGPDFFontGetToUnicodeCMap(v7);
      LOWORD(v101) = 32;
      if (v87 && cmap_vtable && (v88 = *(uint64_t (**)(_QWORD, double **, uint64_t))(cmap_vtable + 72)) != 0)
      {
        v89 = v88(*(_QWORD *)(v87 + 16), &v101, 1);
        if (v89 == -1)
        {
LABEL_169:

          goto LABEL_170;
        }
        v86 = v89;
      }
      else
      {
        v86 = 0;
      }
    }
    HorizontalAdvance = CGPDFAdvancesGetHorizontalAdvance((uint64_t)Advances, v86);
    if (HorizontalAdvance != 0.0)
      v17[3] = HorizontalAdvance / 1000.0;
    goto LABEL_169;
  }
  if (v70)
  {
    v72 = *(_OWORD *)__p;
    *(_QWORD *)(v70 + 16) = v99;
    *(_OWORD *)v70 = v72;
    __p[1] = 0;
    v99 = 0;
    __p[0] = 0;
    *(_DWORD *)(v70 + 24) = v66;
    v67[32] = v70 + 32;
    goto LABEL_160;
  }
LABEL_178:
  __break(1u);
}

void sub_184AC4884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, const void *a20,__int16 a21,char a22,char a23)
{
  void *v23;

  operator delete(v23);
  applesauce::CF::ObjectRef<CGFont *>::~ObjectRef(&a20);
  _Unwind_Resume(a1);
}

void PageLayoutFactory::ScannerContext::op_Tr(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  CGPDFInteger value;

  value = 0;
  if (CGPDFScannerPopInteger(this, &value))
  {
    v4 = value;
    if ((unint64_t)value >= 8)
    {
      pdf_error("invalid text drawing mode: %ld.", value);
    }
    else
    {
      v5 = *((_QWORD *)a2 + 3);
      if (v5)
      {
        *(_DWORD *)(v5 + 112) = value;
        v6 = *(_QWORD *)(v5 + 272);
        if (v6)
          CGPDFTextObjectSetTextDrawingMode(v6, v4);
      }
    }
  }
}

BOOL PageLayoutFactory::ScannerContext::op_Ts(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  _BOOL8 result;
  uint64_t v5;
  CGPDFReal v6;
  uint64_t v7;
  CGPDFReal value;

  value = 0.0;
  result = CGPDFScannerPopNumber(this, &value);
  if (result)
  {
    v5 = *((_QWORD *)a2 + 3);
    if (v5)
    {
      v6 = value;
      *(CGPDFReal *)(v5 + 104) = value;
      v7 = *(_QWORD *)(v5 + 272);
      if (v7)
        *(CGPDFReal *)(v7 + 32) = v6;
    }
  }
  return result;
}

CGFloat PageLayoutFactory::ScannerContext::op_BT(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  CGFloat result;
  char *TextObject;

  if (*((_BYTE *)a2 + 32))
  {
    pdf_error("warning: already in a text object.");
  }
  else
  {
    *((_BYTE *)a2 + 32) = 1;
    TextObject = CGPDFGStateGetTextObject(*((_QWORD *)a2 + 3));
    result = CGAffineTransformIdentity.a;
    *(CGAffineTransform *)(TextObject + 72) = CGAffineTransformIdentity;
    *(CGAffineTransform *)(TextObject + 120) = CGAffineTransformIdentity;
  }
  return result;
}

void PageLayoutFactory::ScannerContext::op_ET(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  if (*((_BYTE *)a2 + 32))
    *((_BYTE *)a2 + 32) = 0;
  else
}

void PageLayoutFactory::ScannerContext::op_Td(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  char *TextObject;
  double v6;
  CGPDFReal value;

  v6 = 0.0;
  value = 0.0;
  if (CGPDFScannerPopNumber(this, &v6) && CGPDFScannerPopNumber(this, &value))
  {
    if (*((_BYTE *)a2 + 32))
    {
      TextObject = CGPDFGStateGetTextObject(*((_QWORD *)a2 + 3));
      CGPDFTextObjectMoveToNextLine((uint64_t)TextObject, value, v6);
    }
    else
    {
    }
  }
}

void PageLayoutFactory::ScannerContext::op_TD(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *TextObject;
  double v9;
  CGPDFReal value;

  v9 = 0.0;
  value = 0.0;
  if (CGPDFScannerPopNumber(this, &v9) && CGPDFScannerPopNumber(this, &value))
  {
    if (*((_BYTE *)a2 + 32))
    {
      v5 = *((_QWORD *)a2 + 3);
      if (v5)
      {
        v6 = -v9;
        *(double *)(v5 + 96) = -v9;
        v7 = *(_QWORD *)(v5 + 272);
        if (v7)
          *(double *)(v7 + 24) = v6;
      }
      TextObject = CGPDFGStateGetTextObject(*((_QWORD *)a2 + 3));
      CGPDFTextObjectMoveToNextLine((uint64_t)TextObject, value, v9);
    }
    else
    {
    }
  }
}

void PageLayoutFactory::ScannerContext::op_Tm(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  uint64_t v5;
  CGPDFReal v6;
  CGPDFReal v7;
  CGPDFReal v8;
  CGPDFReal v9;
  CGPDFReal v10;
  char *TextObject;
  uint64_t v12;
  CGPDFReal value;
  CGPDFReal v14;
  CGPDFReal v15;
  CGPDFReal v16;
  CGPDFReal v17;

  v16 = 0.0;
  v17 = 0.0;
  v14 = 0.0;
  v15 = 0.0;
  v12 = 0;
  value = 0.0;
  if (CGPDFScannerPopNumber(this, (CGPDFReal *)&v12)
    && CGPDFScannerPopNumber(this, &value)
    && CGPDFScannerPopNumber(this, &v14)
    && CGPDFScannerPopNumber(this, &v15)
    && CGPDFScannerPopNumber(this, &v16)
    && CGPDFScannerPopNumber(this, &v17))
  {
    if (*((_BYTE *)a2 + 32))
    {
      v5 = v12;
      v6 = value;
      v7 = v14;
      v8 = v15;
      v9 = v16;
      v10 = v17;
      TextObject = CGPDFGStateGetTextObject(*((_QWORD *)a2 + 3));
      *((CGPDFReal *)TextObject + 9) = v10;
      *((CGPDFReal *)TextObject + 10) = v9;
      *((CGPDFReal *)TextObject + 11) = v8;
      *((CGPDFReal *)TextObject + 12) = v7;
      *((CGPDFReal *)TextObject + 13) = v6;
      *((_QWORD *)TextObject + 14) = v5;
      *((CGPDFReal *)TextObject + 15) = v10;
      *((CGPDFReal *)TextObject + 16) = v9;
      *((CGPDFReal *)TextObject + 17) = v8;
      *((CGPDFReal *)TextObject + 18) = v7;
      *((CGPDFReal *)TextObject + 19) = v6;
      *((_QWORD *)TextObject + 20) = v5;
    }
    else
    {
    }
  }
}

double PageLayoutFactory::ScannerContext::op_Tstar(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  char *TextObject;
  uint64_t v5;
  double v6;
  double result;

  if (*((_BYTE *)a2 + 32))
  {
    TextObject = CGPDFGStateGetTextObject(*((_QWORD *)a2 + 3));
    v5 = *((_QWORD *)a2 + 3);
    if (v5)
      v6 = *(double *)(v5 + 96);
    else
      v6 = 0.0;
    *(_QWORD *)&result = CGPDFTextObjectMoveToNextLine((uint64_t)TextObject, 0.0, -v6).n128_u64[0];
  }
  else
  {
  }
  return result;
}

void PageLayoutFactory::ScannerContext::op_Tj(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  char *TextObject;
  __n128 v5;
  CGPDFStringRef value;

  value = 0;
  if (CGPDFScannerPopString(this, &value))
  {
    if (*((_BYTE *)a2 + 32))
    {
      TextObject = CGPDFGStateGetTextObject(*((_QWORD *)a2 + 3));
      v5.n128_f64[0] = CGPDFTextObjectAppendString((uint64_t)TextObject, (uint64_t)value);
      CGPDFTextLayoutDrawGlyphs(*((_QWORD **)TextObject + 21), (void (*)(uint64_t, uint64_t, __int128 *, uint64_t, uint64_t, char *, char *, _QWORD, uint64_t))PageLayoutFactory::ScannerContext::appendTextLayout(CGPDFTextLayout *)::{lambda(void *,CGPDFFont *,CGAffineTransform,CGPoint const*,double const*,unsigned short const*,unsigned short const*,unsigned char const*,unsigned long)#1}::__invoke, (uint64_t)a2, v5);
    }
    else
    {
    }
  }
}

void PageLayoutFactory::ScannerContext::op_singlequote(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  char *TextObject;
  uint64_t v5;
  uint64_t v6;
  double v7;
  __n128 v8;
  CGPDFStringRef value;

  value = 0;
  if (CGPDFScannerPopString(this, &value))
  {
    if (*((_BYTE *)a2 + 32))
    {
      TextObject = CGPDFGStateGetTextObject(*((_QWORD *)a2 + 3));
      v5 = (uint64_t)TextObject;
      v6 = *((_QWORD *)a2 + 3);
      if (v6)
        v7 = *(double *)(v6 + 96);
      else
        v7 = 0.0;
      CGPDFTextObjectMoveToNextLine((uint64_t)TextObject, 0.0, -v7);
      v8.n128_f64[0] = CGPDFTextObjectAppendString(v5, (uint64_t)value);
      CGPDFTextLayoutDrawGlyphs(*(_QWORD **)(v5 + 168), (void (*)(uint64_t, uint64_t, __int128 *, uint64_t, uint64_t, char *, char *, _QWORD, uint64_t))PageLayoutFactory::ScannerContext::appendTextLayout(CGPDFTextLayout *)::{lambda(void *,CGPDFFont *,CGAffineTransform,CGPoint const*,double const*,unsigned short const*,unsigned short const*,unsigned char const*,unsigned long)#1}::__invoke, (uint64_t)a2, v8);
    }
    else
    {
    }
  }
}

void PageLayoutFactory::ScannerContext::op_doublequote(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  uint64_t v5;
  CGPDFReal v6;
  CGPDFReal *v7;
  uint64_t v8;
  CGPDFReal v9;
  uint64_t v10;
  char *TextObject;
  uint64_t v12;
  uint64_t v13;
  double v14;
  __n128 v15;
  CGPDFReal v16;
  CGPDFReal v17;
  CGPDFStringRef value;

  v17 = 0.0;
  value = 0;
  v16 = 0.0;
  if (CGPDFScannerPopString(this, &value) && CGPDFScannerPopNumber(this, &v17) && CGPDFScannerPopNumber(this, &v16))
  {
    if (*((_BYTE *)a2 + 32))
    {
      v5 = *((_QWORD *)a2 + 3);
      if (v5)
      {
        v6 = v17;
        *(CGPDFReal *)(v5 + 72) = v17;
        v7 = *(CGPDFReal **)(v5 + 272);
        if (v7)
          *v7 = v6;
        v8 = *((_QWORD *)a2 + 3);
        if (v8)
        {
          v9 = v16;
          *(CGPDFReal *)(v8 + 80) = v16;
          v10 = *(_QWORD *)(v8 + 272);
          if (v10)
            *(CGPDFReal *)(v10 + 8) = v9;
        }
      }
      TextObject = CGPDFGStateGetTextObject(*((_QWORD *)a2 + 3));
      v12 = (uint64_t)TextObject;
      v13 = *((_QWORD *)a2 + 3);
      if (v13)
        v14 = *(double *)(v13 + 96);
      else
        v14 = 0.0;
      CGPDFTextObjectMoveToNextLine((uint64_t)TextObject, 0.0, -v14);
      v15.n128_f64[0] = CGPDFTextObjectAppendString(v12, (uint64_t)value);
      CGPDFTextLayoutDrawGlyphs(*(_QWORD **)(v12 + 168), (void (*)(uint64_t, uint64_t, __int128 *, uint64_t, uint64_t, char *, char *, _QWORD, uint64_t))PageLayoutFactory::ScannerContext::appendTextLayout(CGPDFTextLayout *)::{lambda(void *,CGPDFFont *,CGAffineTransform,CGPoint const*,double const*,unsigned short const*,unsigned short const*,unsigned char const*,unsigned long)#1}::__invoke, (uint64_t)a2, v15);
    }
    else
    {
    }
  }
}

void PageLayoutFactory::ScannerContext::op_TJ(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  char *TextObject;
  __n128 v5;
  CGPDFArrayRef value;

  value = 0;
  if (CGPDFScannerPopArray(this, &value))
  {
    if (*((_BYTE *)a2 + 32))
    {
      TextObject = CGPDFGStateGetTextObject(*((_QWORD *)a2 + 3));
      v5.n128_f64[0] = CGPDFTextObjectAppendStrings((uint64_t)TextObject, value);
      CGPDFTextLayoutDrawGlyphs(*((_QWORD **)TextObject + 21), (void (*)(uint64_t, uint64_t, __int128 *, uint64_t, uint64_t, char *, char *, _QWORD, uint64_t))PageLayoutFactory::ScannerContext::appendTextLayout(CGPDFTextLayout *)::{lambda(void *,CGPDFFont *,CGAffineTransform,CGPoint const*,double const*,unsigned short const*,unsigned short const*,unsigned char const*,unsigned long)#1}::__invoke, (uint64_t)a2, v5);
    }
    else
    {
    }
  }
}

void PageLayoutFactory::ScannerContext::op_Do(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  CGPDFContentStream *v5;
  char *v6;
  uint64_t v7;
  const void *v8;
  const void *v9;
  int v10;
  const CGAffineTransform *v11;
  __int128 v12;
  uint64_t v13;
  double v14;
  double v15;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  _QWORD *v20;
  CGRect *v21;
  unint64_t v22;
  CGRect *v23;
  uint64_t v24;
  CGPDFStream *v25;
  CGPDFDictionary *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  CGFloat *v35;
  char *v36;
  char *v37;
  __int128 v38;
  const CGAffineTransform *v39;
  __int128 v40;
  CGPDFContentStream *v41;
  CGPDFScanner *v42;
  _QWORD *v43;
  CGAffineTransform v44;
  char *value;
  _OWORD v46[3];
  CGRect v47;

  value = 0;
  if (CGPDFScannerPopName(this, (const char **)&value))
  {
    v5 = (CGPDFContentStream *)*((_QWORD *)this + 7);
    if (v5)
    {
      v6 = value;
      v7 = *((_QWORD *)this + 7);
      while (1)
      {
        v8 = CGPDFResourcesCopyXObject(*(_QWORD *)(v7 + 32), v6);
        if (v8)
          break;
        v7 = *(_QWORD *)(v7 + 40);
        if (!v7)
          return;
      }
      v9 = v8;
      v10 = *((_DWORD *)v8 + 4);
      if (v10 == 2)
      {
        v24 = CGPDFXObjectGetValue((uint64_t)v8);
        if (v24)
        {
          v25 = *(CGPDFStream **)v24;
          v26 = *(CGPDFDictionary **)(v24 + 88);
        }
        else
        {
          v25 = 0;
          v26 = 0;
        }
        v39 = (const CGAffineTransform *)(v24 + 40);
      }
      else
      {
        if (v10 != 1)
        {
          if (v10)
          {
            pdf_error("unrecognized or unsupported XObject subtype.");
LABEL_47:
            CFRelease(v9);
            return;
          }
          v11 = (const CGAffineTransform *)*((_QWORD *)a2 + 3);
          if (!v11)
            v11 = &CGAffineTransformIdentity;
          v12 = *(_OWORD *)&v11->c;
          *(_OWORD *)&v44.a = *(_OWORD *)&v11->a;
          *(_OWORD *)&v44.c = v12;
          *(_OWORD *)&v44.tx = *(_OWORD *)&v11->tx;
          v13 = 0;
          *(_QWORD *)&v12 = 0;
          v14 = 1.0;
          v15 = 1.0;
          v47 = CGRectApplyAffineTransform(*(CGRect *)((char *)&v12 - 8), &v44);
          x = v47.origin.x;
          y = v47.origin.y;
          width = v47.size.width;
          height = v47.size.height;
          v20 = *(_QWORD **)(*(_QWORD *)a2 + 8);
          v21 = (CGRect *)v20[52];
          v22 = v20[53];
          if ((unint64_t)v21 >= v22)
          {
            v27 = v20[51];
            v28 = ((uint64_t)v21 - v27) >> 5;
            v29 = v28 + 1;
            if ((unint64_t)(v28 + 1) >> 59)
              goto LABEL_50;
            v30 = v22 - v27;
            if (v30 >> 4 > v29)
              v29 = v30 >> 4;
            if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFE0)
              v31 = 0x7FFFFFFFFFFFFFFLL;
            else
              v31 = v29;
            if (v31)
            {
              v32 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<CGRect>>(v31);
              if (v32)
              {
                v34 = &v32[32 * v33];
                v35 = (CGFloat *)&v32[32 * v28];
                *v35 = x;
                v35[1] = y;
                v35[2] = width;
                v35[3] = height;
                v23 = (CGRect *)(v35 + 4);
                v37 = (char *)v20[51];
                v36 = (char *)v20[52];
                if (v36 != v37)
                {
                  do
                  {
                    v38 = *((_OWORD *)v36 - 1);
                    *((_OWORD *)v35 - 2) = *((_OWORD *)v36 - 2);
                    *((_OWORD *)v35 - 1) = v38;
                    v35 -= 4;
                    v36 -= 32;
                  }
                  while (v36 != v37);
                  v36 = (char *)v20[51];
                }
                v20[51] = v35;
                v20[52] = v23;
                v20[53] = v34;
                if (v36)
                  operator delete(v36);
                goto LABEL_33;
              }
            }
          }
          else if (v21)
          {
            *v21 = v47;
            v23 = v21 + 1;
LABEL_33:
            v20[52] = v23;
            goto LABEL_47;
          }
          __break(1u);
LABEL_50:
          std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
        }
        v24 = CGPDFXObjectGetValue((uint64_t)v8);
        if (v24)
        {
          v25 = *(CGPDFStream **)(v24 + 16);
          v26 = *(CGPDFDictionary **)(v24 + 104);
        }
        else
        {
          v25 = 0;
          v26 = 0;
        }
        v39 = (const CGAffineTransform *)(v24 + 56);
      }
      if (!v24)
        v39 = &CGAffineTransformIdentity;
      v40 = *(_OWORD *)&v39->c;
      v46[0] = *(_OWORD *)&v39->a;
      v46[1] = v40;
      v46[2] = *(_OWORD *)&v39->tx;
      CGPDFRStateGSave(*((_QWORD *)a2 + 2));
      CGPDFGStateConcatCTM(*((double **)a2 + 3), (double *)v46);
      v41 = CGPDFContentStreamCreateWithStream(v25, v26, v5);
      v42 = CGPDFScannerCreate(v41, *((CGPDFOperatorTableRef *)a2 + 1), a2);
      CGPDFScannerScan(v42);
      if (v42)
        CFRelease(v42);
      if (v41)
        CFRelease(v41);
      CGPDFRStateGRestore(*((_QWORD *)a2 + 2));
      v43 = (_QWORD *)*((_QWORD *)a2 + 2);
      if (v43)
        v43 = (_QWORD *)*v43;
      *((_QWORD *)a2 + 3) = v43;
      goto LABEL_47;
    }
  }
}

void PageLayoutFactory::ScannerContext::op_gs(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  CGPDFDictionary *ExtGState;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CGPDFDictionaryRef v11;
  CGPDFArrayRef array;
  char *value;

  value = 0;
  if (CGPDFScannerPopName(this, (const char **)&value))
  {
    ExtGState = (CGPDFDictionary *)CGPDFContentStreamGetExtGState(*((_QWORD *)this + 7), value);
    if (ExtGState)
    {
      array = 0;
      if (CGPDFDictionaryGetArray(ExtGState, "Font", &array))
      {
        v11 = 0;
        if (CGPDFArrayGetDictionary(array, 0, &v11))
        {
          v10 = 0;
          if (CGPDFArrayGetNumber(array, 1uLL, (CGPDFReal *)&v10))
          {
            v6 = (const void *)CGPDFFontCreate(v11);
            if (v6)
            {
              CGPDFGStateSetFont(*((_QWORD *)a2 + 3), v6);
              v7 = *((_QWORD *)a2 + 3);
              if (v7)
              {
                v8 = v10;
                *(_QWORD *)(v7 + 128) = v10;
                v9 = *(_QWORD *)(v7 + 272);
                if (v9)
                  *(_QWORD *)(v9 + 56) = v8;
              }
            }
          }
        }
      }
    }
  }
}

void PageLayoutFactory::ScannerContext::op_BDC(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  int v7;
  CGPDFDictionary *v8;
  const char *v9;
  char *v10;
  uint64_t v11;
  CGPDFDictionary *v12;
  CGPDFDictionary *v13;
  PageLayoutFactory::ScannerContext *v14;
  char *v15;
  char *__s1;
  CGPDFDictionaryRef v17;
  CGPDFDictionaryRef dict;
  CGPDFDictionaryRef value;

  v3 = *((_DWORD *)this + 18);
  if (v3 <= 0)
  {
    pdf_error("stack underflow.", a2, a3);
    return;
  }
  v4 = *((_QWORD *)this + 10);
  v5 = v3 - 1;
  *((_DWORD *)this + 18) = v5;
  if (!v4)
    return;
  v7 = *(_DWORD *)(v4 + 40 * v5 + 8);
  if (v7 == 8)
  {
    v9 = 0;
    v8 = *(CGPDFDictionary **)(v4 + 40 * v5 + 32);
  }
  else
  {
    if (v7 != 5)
      return;
    v8 = 0;
    v9 = *(const char **)(v4 + 40 * v5 + 32);
  }
  __s1 = 0;
  if (CGPDFScannerPopName(this, (const char **)&__s1))
  {
    v10 = __s1;
    if (!v9)
    {
      v14 = a2;
      v15 = __s1;
      v13 = v8;
      goto LABEL_17;
    }
    v11 = **(_QWORD **)a2;
    if (v11)
    {
      v12 = *(CGPDFDictionary **)(*(_QWORD *)(v11 + 40) + 16);
      if (v12)
      {
        value = 0;
        if (!CGPDFDictionaryGetDictionary(v12, "Resources", &value))
        {
          dict = 0;
          if (CGPDFDictionaryGetDictionary(value, "Properties", &dict))
          {
            v17 = 0;
            if (!CGPDFDictionaryGetDictionary(dict, v9, &v17))
            {
              v13 = v17;
              v14 = a2;
              v15 = v10;
LABEL_17:
              PageLayoutFactory::ScannerContext::beginMarkedContentSequence(v14, v15, v13);
            }
          }
        }
      }
    }
  }
}

void PageLayoutFactory::ScannerContext::op_BMC(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *i;
  uint64_t v18;
  char *value;

  value = 0;
  if (CGPDFScannerPopName(this, (const char **)&value))
  {
    v5 = (_QWORD *)*((_QWORD *)a2 + 10);
    v4 = *((_QWORD *)a2 + 11);
    if ((unint64_t)v5 >= v4)
    {
      v7 = *((_QWORD *)a2 + 9);
      v8 = ((uint64_t)v5 - v7) >> 3;
      if ((unint64_t)(v8 + 1) >> 61)
        goto LABEL_21;
      v9 = v4 - v7;
      v10 = v9 >> 2;
      if (v9 >> 2 <= (unint64_t)(v8 + 1))
        v10 = v8 + 1;
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v11 = v10;
      if (v11)
      {
        v12 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(v11);
        if (v12)
        {
          v14 = &v12[8 * v13];
          v15 = &v12[8 * v8];
          *(_QWORD *)v15 = -1;
          v6 = v15 + 8;
          v16 = (char *)*((_QWORD *)a2 + 9);
          for (i = (char *)*((_QWORD *)a2 + 10); i != v16; i -= 8)
          {
            v18 = *((_QWORD *)i - 1);
            *((_QWORD *)v15 - 1) = v18;
            v15 -= 8;
          }
          *((_QWORD *)a2 + 9) = v15;
          *((_QWORD *)a2 + 10) = v6;
          *((_QWORD *)a2 + 11) = v14;
          if (v16)
            operator delete(v16);
          goto LABEL_18;
        }
      }
    }
    else if (v5)
    {
      *v5 = -1;
      v6 = v5 + 1;
LABEL_18:
      *((_QWORD *)a2 + 10) = v6;
      return;
    }
    __break(1u);
LABEL_21:
    std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
  }
}

void PageLayoutFactory::ScannerContext::op_EMC(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v3 = *((_QWORD *)a2 + 9);
  v4 = *((_QWORD *)a2 + 10);
  if (v3 == v4)
  {
    v5 = *((_QWORD *)a2 + 9);
  }
  else
  {
    v5 = v4 - 8;
    *((_QWORD *)a2 + 10) = v5;
  }
  if (*((_QWORD *)a2 + 14) == (v5 - v3) >> 3)
  {
    *((_BYTE *)a2 + 96) = 0;
    v6 = (void *)*((_QWORD *)a2 + 13);
    *((_QWORD *)a2 + 13) = 0;

  }
}

void PageLayoutFactory::ScannerContext::op_m(PageLayoutFactory::ScannerContext *this, const CGAffineTransform **a2, void *a3)
{
  const CGAffineTransform *v5;
  __int128 v6;
  __int128 v7;
  const CGAffineTransform *v8;
  CGAffineTransform v9;
  CGPDFReal value;
  CGPDFReal v11;

  value = 0.0;
  v11 = 0.0;
  if (CGPDFScannerPopNumber(this, &value) && CGPDFScannerPopNumber(this, &v11))
  {
    PageLayoutFactory::ScannerContext::ensureCurrentPath((PageLayoutFactory::ScannerContext *)a2);
    v5 = &CGAffineTransformIdentity;
    if (a2[3])
      v5 = a2[3];
    v7 = *(_OWORD *)&v5->c;
    v6 = *(_OWORD *)&v5->tx;
    *(_OWORD *)&v9.a = *(_OWORD *)&v5->a;
    *(_OWORD *)&v9.c = v7;
    *(_OWORD *)&v9.tx = v6;
    v8 = a2[23];
    if (a2[22] == v8)
      __break(1u);
    else
      CGPathMoveToPoint(*(CGMutablePathRef *)&v8[-1].ty, &v9, v11, value);
  }
}

void PageLayoutFactory::ScannerContext::op_l(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const CGPath *v13;
  const CGAffineTransform *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  CGAffineTransform m;
  CGPDFReal value;
  CGPDFReal v20;

  value = 0.0;
  v20 = 0.0;
  if (CGPDFScannerPopNumber(this, &value) && CGPDFScannerPopNumber(this, &v20))
  {
    v12 = *((_QWORD *)a2 + 23);
    if (*((_QWORD *)a2 + 22) == v12)
      goto LABEL_12;
    v13 = *(const CGPath **)(v12 - 8);
    if (!v13 || CGPathIsEmpty(v13))
    {
      CGPostError((uint64_t)"%s: no current point.", v5, v6, v7, v8, v9, v10, v11, (char)"static void PageLayoutFactory::ScannerContext::op_l(CGPDFScannerRef, void *)");
      return;
    }
    v14 = &CGAffineTransformIdentity;
    if (*((_QWORD *)a2 + 3))
      v14 = (const CGAffineTransform *)*((_QWORD *)a2 + 3);
    v16 = *(_OWORD *)&v14->c;
    v15 = *(_OWORD *)&v14->tx;
    *(_OWORD *)&m.a = *(_OWORD *)&v14->a;
    *(_OWORD *)&m.c = v16;
    *(_OWORD *)&m.tx = v15;
    v17 = *((_QWORD *)a2 + 23);
    if (*((_QWORD *)a2 + 22) == v17)
LABEL_12:
      __break(1u);
    else
      CGPathAddLineToPoint(*(CGMutablePathRef *)(v17 - 8), &m, v20, value);
  }
}

void PageLayoutFactory::ScannerContext::op_c(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const CGPath *v13;
  const CGAffineTransform *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  CGAffineTransform m;
  CGPDFReal value;
  CGPDFReal v20;
  CGPDFReal v21;
  CGPDFReal v22;
  CGPDFReal v23;
  CGPDFReal v24;

  v23 = 0.0;
  v24 = 0.0;
  v21 = 0.0;
  v22 = 0.0;
  v20 = 0.0;
  value = 0.0;
  if (CGPDFScannerPopNumber(this, &value)
    && CGPDFScannerPopNumber(this, &v20)
    && CGPDFScannerPopNumber(this, &v21)
    && CGPDFScannerPopNumber(this, &v22)
    && CGPDFScannerPopNumber(this, &v23)
    && CGPDFScannerPopNumber(this, &v24))
  {
    v12 = *((_QWORD *)a2 + 23);
    if (*((_QWORD *)a2 + 22) == v12)
      goto LABEL_16;
    v13 = *(const CGPath **)(v12 - 8);
    if (!v13 || CGPathIsEmpty(v13))
    {
      CGPostError((uint64_t)"%s: no current point.", v5, v6, v7, v8, v9, v10, v11, (char)"static void PageLayoutFactory::ScannerContext::op_c(CGPDFScannerRef, void *)");
      return;
    }
    v14 = &CGAffineTransformIdentity;
    if (*((_QWORD *)a2 + 3))
      v14 = (const CGAffineTransform *)*((_QWORD *)a2 + 3);
    v16 = *(_OWORD *)&v14->c;
    v15 = *(_OWORD *)&v14->tx;
    *(_OWORD *)&m.a = *(_OWORD *)&v14->a;
    *(_OWORD *)&m.c = v16;
    *(_OWORD *)&m.tx = v15;
    v17 = *((_QWORD *)a2 + 23);
    if (*((_QWORD *)a2 + 22) == v17)
LABEL_16:
      __break(1u);
    else
      CGPathAddCurveToPoint(*(CGMutablePathRef *)(v17 - 8), &m, v24, v23, v22, v21, v20, value);
  }
}

void PageLayoutFactory::ScannerContext::op_v(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const CGPath *v13;
  double v14;
  CGFloat v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  CGPoint CurrentPoint;
  CGAffineTransform *v24;
  const CGAffineTransform *v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  CGPDFReal value;
  CGPDFReal v30;
  CGPDFReal v31;
  CGPDFReal v32;
  CGAffineTransform m;

  v31 = 0.0;
  v32 = 0.0;
  value = 0.0;
  v30 = 0.0;
  if (CGPDFScannerPopNumber(this, &value)
    && CGPDFScannerPopNumber(this, &v30)
    && CGPDFScannerPopNumber(this, &v31)
    && CGPDFScannerPopNumber(this, &v32))
  {
    v12 = *((_QWORD *)a2 + 23);
    if (*((_QWORD *)a2 + 22) == v12)
      goto LABEL_17;
    v13 = *(const CGPath **)(v12 - 8);
    if (v13 && !CGPathIsEmpty(*(CGPathRef *)(v12 - 8)))
    {
      CurrentPoint = CGPathGetCurrentPoint(v13);
      v24 = (CGAffineTransform *)*((_QWORD *)a2 + 3);
      if (!v24)
        v24 = (CGAffineTransform *)&CGAffineTransformIdentity;
      m = *v24;
      v14 = CGPointApplyInverseAffineTransform(&m.a, v16, v17, v18, v19, v20, v21, v22, CurrentPoint.x, CurrentPoint.y);
    }
    else
    {
      CGPostError((uint64_t)"%s: no current point.", v5, v6, v7, v8, v9, v10, v11, (char)"CGPoint PageLayoutFactory::ScannerContext::getPathCurrentPoint()");
      v14 = 0.0;
      v15 = 0.0;
    }
    v25 = (const CGAffineTransform *)*((_QWORD *)a2 + 3);
    if (!v25)
      v25 = &CGAffineTransformIdentity;
    v27 = *(_OWORD *)&v25->c;
    v26 = *(_OWORD *)&v25->tx;
    *(_OWORD *)&m.a = *(_OWORD *)&v25->a;
    *(_OWORD *)&m.c = v27;
    *(_OWORD *)&m.tx = v26;
    v28 = *((_QWORD *)a2 + 23);
    if (*((_QWORD *)a2 + 22) == v28)
LABEL_17:
      __break(1u);
    else
      CGPathAddCurveToPoint(*(CGMutablePathRef *)(v28 - 8), &m, v14, v15, v32, v31, v30, value);
  }
}

void PageLayoutFactory::ScannerContext::op_y(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const CGPath *v13;
  const CGAffineTransform *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  CGAffineTransform m;
  CGPDFReal value;
  CGPDFReal v20;
  CGPDFReal v21;
  CGPDFReal v22;

  v21 = 0.0;
  v22 = 0.0;
  value = 0.0;
  v20 = 0.0;
  if (CGPDFScannerPopNumber(this, &value)
    && CGPDFScannerPopNumber(this, &v20)
    && CGPDFScannerPopNumber(this, &v21)
    && CGPDFScannerPopNumber(this, &v22))
  {
    v12 = *((_QWORD *)a2 + 23);
    if (*((_QWORD *)a2 + 22) == v12)
      goto LABEL_14;
    v13 = *(const CGPath **)(v12 - 8);
    if (!v13 || CGPathIsEmpty(v13))
    {
      CGPostError((uint64_t)"%s: no current point.", v5, v6, v7, v8, v9, v10, v11, (char)"static void PageLayoutFactory::ScannerContext::op_y(CGPDFScannerRef, void *)");
      return;
    }
    v14 = &CGAffineTransformIdentity;
    if (*((_QWORD *)a2 + 3))
      v14 = (const CGAffineTransform *)*((_QWORD *)a2 + 3);
    v16 = *(_OWORD *)&v14->c;
    v15 = *(_OWORD *)&v14->tx;
    *(_OWORD *)&m.a = *(_OWORD *)&v14->a;
    *(_OWORD *)&m.c = v16;
    *(_OWORD *)&m.tx = v15;
    v17 = *((_QWORD *)a2 + 23);
    if (*((_QWORD *)a2 + 22) == v17)
LABEL_14:
      __break(1u);
    else
      CGPathAddCurveToPoint(*(CGMutablePathRef *)(v17 - 8), &m, v22, v21, v20, value, v20, value);
  }
}

void PageLayoutFactory::ScannerContext::op_h(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  const CGPath *v9;
  uint64_t v11;

  v8 = *((_QWORD *)a2 + 23);
  if (*((_QWORD *)a2 + 22) == v8)
    goto LABEL_7;
  v9 = *(const CGPath **)(v8 - 8);
  if (!v9 || CGPathIsEmpty(v9))
  {
    CGPostError((uint64_t)"%s: no current point.", (uint64_t)a2, a3, a4, a5, a6, a7, a8, (char)"static void PageLayoutFactory::ScannerContext::op_h(CGPDFScannerRef, void *)");
    return;
  }
  v11 = *((_QWORD *)a2 + 23);
  if (*((_QWORD *)a2 + 22) == v11)
LABEL_7:
    __break(1u);
  else
    CGPathCloseSubpath(*(CGMutablePathRef *)(v11 - 8));
}

void PageLayoutFactory::ScannerContext::op_re(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  const CGAffineTransform *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  CGPath *v9;
  CGPDFReal v10;
  CGPDFReal v11;
  CGPDFReal v12;
  CGPDFReal v13;
  CGAffineTransform v14;
  CGPDFReal value;
  CGPDFReal v16;
  CGPDFReal v17;
  CGPDFReal v18;

  v17 = 0.0;
  v18 = 0.0;
  v16 = 0.0;
  value = 0.0;
  if (CGPDFScannerPopNumber(this, &value)
    && CGPDFScannerPopNumber(this, &v16)
    && CGPDFScannerPopNumber(this, &v17)
    && CGPDFScannerPopNumber(this, &v18))
  {
    v5 = (const CGAffineTransform *)*((_QWORD *)a2 + 3);
    if (!v5)
      v5 = &CGAffineTransformIdentity;
    v7 = *(_OWORD *)&v5->c;
    v6 = *(_OWORD *)&v5->tx;
    *(_OWORD *)&v14.a = *(_OWORD *)&v5->a;
    *(_OWORD *)&v14.c = v7;
    *(_OWORD *)&v14.tx = v6;
    PageLayoutFactory::ScannerContext::ensureCurrentPath(a2);
    v8 = *((_QWORD *)a2 + 23);
    if (*((_QWORD *)a2 + 22) == v8)
    {
      __break(1u);
    }
    else
    {
      v9 = *(CGPath **)(v8 - 8);
      v11 = v16;
      v10 = v17;
      v12 = v18;
      if (v16 < 0.0 || (v13 = value, value < 0.0))
      {
        CGPathMoveToPoint(*(CGMutablePathRef *)(v8 - 8), &v14, v18, v17);
        CGPathAddLineToPoint(v9, &v14, v18 + v16, v17);
        CGPathAddLineToPoint(v9, &v14, v18 + v16, v17 + value);
        CGPathAddLineToPoint(v9, &v14, v18, v17 + value);
        CGPathCloseSubpath(v9);
      }
      else
      {
        CGPathAddRect(*(CGMutablePathRef *)(v8 - 8), &v14, *(CGRect *)&v12);
      }
    }
  }
}

void PageLayoutFactory::ScannerContext::op_n(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  uint64_t v3;
  const void *v4;

  v3 = *((_QWORD *)a2 + 23);
  if (*((_QWORD *)a2 + 22) == v3)
  {
    __break(1u);
  }
  else
  {
    v4 = *(const void **)(v3 - 8);
    *(_QWORD *)(v3 - 8) = 0;
    if (v4)
      CFRelease(v4);
  }
}

void PageLayoutFactory::ScannerContext::op_S(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  PageLayoutFactory::ScannerContext::addCurrentPath(a2, 0, a3, a4, a5, a6, a7, a8);
}

void PageLayoutFactory::ScannerContext::op_s(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  PageLayoutFactory::ScannerContext::addCurrentPath(a2, 1, a3, a4, a5, a6, a7, a8);
}

void PageLayoutFactory::ScannerContext::op_f(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  PageLayoutFactory::ScannerContext::addCurrentPath(a2, 0, a3, a4, a5, a6, a7, a8);
}

void PageLayoutFactory::ScannerContext::op_fstar(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  PageLayoutFactory::ScannerContext::addCurrentPath(a2, 0, a3, a4, a5, a6, a7, a8);
}

void PageLayoutFactory::ScannerContext::op_B(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  PageLayoutFactory::ScannerContext::addCurrentPath(a2, 0, a3, a4, a5, a6, a7, a8);
}

void PageLayoutFactory::ScannerContext::op_b(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  PageLayoutFactory::ScannerContext::addCurrentPath(a2, 1, a3, a4, a5, a6, a7, a8);
}

void PageLayoutFactory::ScannerContext::op_Bstar(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  PageLayoutFactory::ScannerContext::addCurrentPath(a2, 0, a3, a4, a5, a6, a7, a8);
}

void PageLayoutFactory::ScannerContext::op_bstar(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  PageLayoutFactory::ScannerContext::addCurrentPath(a2, 1, a3, a4, a5, a6, a7, a8);
}

void PageLayoutFactory::ScannerContext::op_W(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)a2 + 3);
  if (v3)
  {
    *(_WORD *)(v3 + 48) = 1;
    v4 = *((_QWORD *)a2 + 3);
    if (v4)
      *(_BYTE *)(v4 + 49) = 0;
  }
}

void PageLayoutFactory::ScannerContext::op_Wstar(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)a2 + 3);
  if (v3)
  {
    *(_BYTE *)(v3 + 48) = 0;
    v4 = *((_QWORD *)a2 + 3);
    if (v4)
      *(_WORD *)(v4 + 48) = 256;
  }
}

void PageLayoutFactory::ScannerContext::addCurrentPath(PageLayoutFactory::ScannerContext *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  CGPath *v10;
  uint64_t v11;
  uint64_t v12;
  const CGPath *v13;
  const CGPoint *v14;
  const CGPoint *v15;
  double v16;
  double v17;
  const CGPoint *v18;
  const CGPoint *v19;
  double height;
  CGFloat width;
  double y;
  double x;
  double v24;
  double v25;
  PageLayout **v26;
  double v27;
  PageLayout *v28;
  const CGPoint *v29;
  const CGPoint *v30;
  const CGPoint *v31;
  const CGPoint *v32;
  uint64_t v33;
  const void *v34;
  CGRect rect;
  __int128 v36;
  double v37;
  double v38;
  uint64_t v39;
  CGRect v40;

  v39 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a2)
  {
    v9 = *((_QWORD *)this + 23);
    if (*((_QWORD *)this + 22) == v9)
      goto LABEL_28;
    v10 = *(CGPath **)(v9 - 8);
    if (v10 && !CGPathIsEmpty(*(CGPathRef *)(v9 - 8)))
      CGPathCloseSubpath(v10);
    else
      CGPostError((uint64_t)"%s: no current point.", a2, a3, a4, a5, a6, a7, a8, (char)"void PageLayoutFactory::ScannerContext::closeCurrentPath()");
  }
  v11 = *((_QWORD *)this + 23);
  if (*((_QWORD *)this + 22) == v11)
LABEL_28:
    __break(1u);
  v12 = *(_QWORD *)this;
  v13 = *(const CGPath **)(v11 - 8);
  if (v13)
    CFRetain(*(CFTypeRef *)(v11 - 8));
  if (!CGPathIsLine((uint64_t)v13, &v36))
  {
    if (!CGPathIsRect(v13, &rect))
      goto LABEL_22;
    width = rect.size.width;
    height = rect.size.height;
    x = rect.origin.x;
    y = rect.origin.y;
    if (rect.size.width < 0.0 || rect.size.height < 0.0)
    {
      v40 = CGRectStandardize(rect);
      v17 = v40.origin.x + v40.size.width;
      v40.origin.x = x;
      v40.origin.y = y;
      v40.size.width = width;
      v40.size.height = height;
      *(CGRect *)(&v24 - 1) = CGRectStandardize(v40);
      height = v27;
    }
    else
    {
      v17 = rect.origin.x + rect.size.width;
      v24 = rect.origin.y;
    }
    v25 = v24 + height;
    v28 = *(PageLayout **)(v12 + 8);
    v26 = (PageLayout **)(v12 + 8);
    PageLayout::addVertEdge(v28, v18, v19, x, y, v25);
    PageLayout::addVertEdge(*v26, v29, v30, v17, rect.origin.y, v25);
    PageLayout::addHorzEdge(*v26, v31, v32, rect.origin.x, rect.origin.y, v17);
    v16 = rect.origin.x;
    goto LABEL_21;
  }
  v16 = *(double *)&v36;
  v17 = v37;
  if (*(double *)&v36 == v37)
  {
    PageLayout::addVertEdge(*(PageLayout **)(v12 + 8), v14, v15, *(double *)&v36, *((double *)&v36 + 1), v38);
    goto LABEL_22;
  }
  v25 = *((double *)&v36 + 1);
  if (*((double *)&v36 + 1) == v38)
  {
    v26 = (PageLayout **)(v12 + 8);
LABEL_21:
    PageLayout::addHorzEdge(*v26, v14, v15, v16, v25, v17);
  }
LABEL_22:
  if (v13)
    CFRelease(v13);
  v33 = *((_QWORD *)this + 23);
  if (*((_QWORD *)this + 22) == v33)
    goto LABEL_28;
  v34 = *(const void **)(v33 - 8);
  *(_QWORD *)(v33 - 8) = 0;
  if (v34)
    CFRelease(v34);
}

void sub_184AC5E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void PageLayoutFactory::ScannerContext::ensureCurrentPath(PageLayoutFactory::ScannerContext *this)
{
  uint64_t v1;
  CGMutablePathRef Mutable;
  uint64_t v4;
  const void *v5;

  v1 = *((_QWORD *)this + 23);
  if (*((_QWORD *)this + 22) == v1)
    goto LABEL_7;
  if (*(_QWORD *)(v1 - 8))
    return;
  Mutable = CGPathCreateMutable();
  v4 = *((_QWORD *)this + 23);
  if (*((_QWORD *)this + 22) == v4)
  {
LABEL_7:
    __break(1u);
    return;
  }
  v5 = *(const void **)(v4 - 8);
  *(_QWORD *)(v4 - 8) = Mutable;
  if (v5)
    CFRelease(v5);
}

void PageLayoutFactory::ScannerContext::beginMarkedContentSequence(PageLayoutFactory::ScannerContext *this, const char *__s1, CGPDFDictionaryRef dict)
{
  const __CFString *v5;
  const __CFString *v6;
  void *v7;
  _BOOL4 Integer;
  unint64_t v9;
  _QWORD *v10;
  CGPDFInteger v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  CGPDFInteger *v21;
  char *v22;
  char *j;
  CGPDFInteger v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  char *i;
  CGPDFInteger v33;
  CGPDFInteger v34;
  CGPDFStringRef value;

  value = 0;
  if (!*((_BYTE *)this + 96) && !strcmp(__s1, "Span") && CGPDFDictionaryGetString(dict, "ActualText", &value))
  {
    v5 = CGPDFStringCopyTextString(value);
    v34 = (CGPDFInteger)v5;
    if (v5)
    {
      v6 = v5;
      if (CFStringGetLength(v5) == 1)
      {
        *((_BYTE *)this + 96) = 1;
        v7 = (void *)*((_QWORD *)this + 13);
        *((_QWORD *)this + 13) = v6;

        *((_QWORD *)this + 14) = (uint64_t)(*((_QWORD *)this + 10) - *((_QWORD *)this + 9)) >> 3;
      }
      else
      {
        CFRelease(v6);
      }
    }
  }
  v34 = 0;
  Integer = CGPDFDictionaryGetInteger(dict, "MCID", &v34);
  v10 = (_QWORD *)*((_QWORD *)this + 10);
  v9 = *((_QWORD *)this + 11);
  if (!Integer || (v11 = v34, v34 < 0))
  {
    if ((unint64_t)v10 >= v9)
    {
      v25 = *((_QWORD *)this + 9);
      v26 = ((uint64_t)v10 - v25) >> 3;
      if ((unint64_t)(v26 + 1) >> 61)
        goto LABEL_42;
      v27 = v9 - v25;
      v28 = v27 >> 2;
      if (v27 >> 2 <= (unint64_t)(v26 + 1))
        v28 = v26 + 1;
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
        v29 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v29 = v28;
      if (v29)
      {
        v30 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(v29);
        if (v30)
        {
          v20 = &v30[8 * v31];
          v21 = (CGPDFInteger *)&v30[8 * v26];
          *v21 = -1;
          v12 = v21 + 1;
          v22 = (char *)*((_QWORD *)this + 9);
          for (i = (char *)*((_QWORD *)this + 10); i != v22; i -= 8)
          {
            v33 = *((_QWORD *)i - 1);
            *--v21 = v33;
          }
          goto LABEL_38;
        }
      }
    }
    else if (v10)
    {
      *v10 = -1;
      v12 = v10 + 1;
      goto LABEL_40;
    }
LABEL_41:
    __break(1u);
LABEL_42:
    std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
  }
  if ((unint64_t)v10 < v9)
  {
    if (v10)
    {
      *v10 = v34;
      v12 = v10 + 1;
      goto LABEL_40;
    }
    goto LABEL_41;
  }
  v13 = *((_QWORD *)this + 9);
  v14 = ((uint64_t)v10 - v13) >> 3;
  if ((unint64_t)(v14 + 1) >> 61)
    goto LABEL_42;
  v15 = v9 - v13;
  v16 = v15 >> 2;
  if (v15 >> 2 <= (unint64_t)(v14 + 1))
    v16 = v14 + 1;
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
    v17 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v17 = v16;
  if (!v17)
    goto LABEL_41;
  v18 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(v17);
  if (!v18)
    goto LABEL_41;
  v20 = &v18[8 * v19];
  v21 = (CGPDFInteger *)&v18[8 * v14];
  *v21 = v11;
  v12 = v21 + 1;
  v22 = (char *)*((_QWORD *)this + 9);
  for (j = (char *)*((_QWORD *)this + 10); j != v22; j -= 8)
  {
    v24 = *((_QWORD *)j - 1);
    *--v21 = v24;
  }
LABEL_38:
  *((_QWORD *)this + 9) = v21;
  *((_QWORD *)this + 10) = v12;
  *((_QWORD *)this + 11) = v20;
  if (v22)
    operator delete(v22);
LABEL_40:
  *((_QWORD *)this + 10) = v12;
}

void sub_184AC6094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  applesauce::CF::ObjectRef<__CFString const*>::~ObjectRef(&a9);
  _Unwind_Resume(a1);
}

const void **applesauce::CF::ObjectRef<__CFString const*>::~ObjectRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void PageLayoutFactory::ScannerContext::appendTextLayout(CGPDFTextLayout *)::{lambda(void *,CGPDFFont *,CGAffineTransform,CGPoint const*,double const*,unsigned short const*,unsigned short const*,unsigned char const*,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2, double *a3, uint64_t a4, uint64_t a5, const CGGlyph *a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  CGFont *Font;
  const CGAffineTransform *v19;
  double b;
  double c;
  double d;
  double ty;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  double rotation;
  unint64_t CMap;
  unsigned int (*v29)(_QWORD);
  const CGAffineTransform *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  unint64_t FontDescriptor;
  CGPDFDictionary *v36;
  _DWORD *font_info;
  int v38;
  double v39;
  double v40;
  BOOL v41;
  _DWORD *v43;
  int v44;
  _BOOL4 Number;
  double a;
  _DWORD *v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int8x8_t v52;
  uint8x8_t v53;
  unint64_t v54;
  double **v55;
  double *i;
  unint64_t v57;
  CGPDFDictionary *v58;
  _QWORD *Procedures;
  uint64_t v60;
  const CGRect *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  double v69;
  double y;
  CGPDFStream *v71;
  uint64_t CGDisplayList;
  const void *v73;
  CGContext *v74;
  const void *v75;
  uint64_t v76;
  __int128 v77;
  char *v78;
  CGFloat *p_height;
  CGFloat *p_y;
  CGSize *p_size;
  const CGRect *v82;
  double height;
  double x;
  double v85;
  double width;
  unint64_t v88;
  uint8x8_t v89;
  _QWORD *v90;
  _QWORD *j;
  unint64_t v92;
  double *v93;
  float v94;
  float v95;
  _BOOL8 v96;
  unint64_t v97;
  unint64_t v98;
  int8x8_t prime;
  void *v100;
  void *v101;
  uint64_t v102;
  _QWORD *v103;
  unint64_t v104;
  uint8x8_t v105;
  unint64_t v106;
  uint8x8_t v107;
  uint64_t v108;
  _QWORD *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  double **v113;
  unint64_t v114;
  __double2 v115;
  uint64_t v116;
  uint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint8x8_t v122;
  const char *v123;
  _QWORD **v124;
  _QWORD *k;
  unint64_t v126;
  float v127;
  float v128;
  _BOOL8 v129;
  unint64_t v130;
  unint64_t v131;
  size_t v132;
  uint64_t v133;
  _QWORD *v134;
  unint64_t v135;
  uint64_t v136;
  void *FillColor;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  int64x2_t *v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  _OWORD *v145;
  uint64_t v146;
  double v147;
  unint64_t v148;
  CGFloat v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  char *v154;
  CGFloat v155;
  _OWORD *v156;
  unint64_t v157;
  uint64_t v158;
  int64x2_t v159;
  CGFloat v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  size_t v171;
  CGFont *v172;
  void ***v173;
  CGFloat v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  char *v180;
  PageLayoutFactory::TextChunk *v181;
  CGFloat v182;
  unint64_t v183;
  uint64_t v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  int64x2_t v191;
  CGFloat v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  double *v196;
  uint64_t v197;
  uint64_t v198;
  float64x2_t *v199;
  float64x2_t v200;
  uint64_t v201;
  uint64_t v202;
  CGFloat *v203;
  _OWORD *v204;
  __int128 v205;
  CGFloat *v206;
  double v207;
  uint64_t v208;
  uint64_t v209;
  double v210;
  double v211;
  double v212;
  uint64_t v213;
  float64x2_t v214;
  _QWORD *v215;
  double v216;
  uint64_t v217;
  double v218;
  float64x2_t *v219;
  CGFloat *v220;
  void *v221;
  unint64_t v222;
  unint64_t *v223;
  unint64_t *v224;
  _BYTE *v225;
  uint64_t v226;
  void *v227;
  _QWORD *v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  uint8x8_t v232;
  _QWORD *v233;
  _QWORD *m;
  unint64_t v235;
  _QWORD *v236;
  float v237;
  _BOOL8 v238;
  unint64_t v239;
  unint64_t v240;
  size_t v241;
  void *v242;
  CGFloat v243;
  uint64_t v244;
  CGFloat v245;
  size_t v246;
  uint8x8_t v247;
  unint64_t v248;
  uint8x8_t v249;
  uint64_t v250;
  double v251;
  size_t v252;
  CGFloat v253;
  _QWORD *v254;
  unint64_t v255;
  _QWORD *v256;
  _QWORD **v257;
  CGFloat v258;
  _WORD *v259;
  _WORD *v260;
  _WORD *v261;
  CGFloat v262;
  unint64_t *Encoding;
  _QWORD *v264;
  uint64_t v265;
  unint64_t v266;
  _WORD *UnicodesForIndex;
  _QWORD *v268;
  _QWORD **v269;
  _WORD *v270;
  CGFloat v271;
  CGFloat v272;
  _OWORD *v273;
  _OWORD *v274;
  _OWORD *v275;
  CGFloat v276;
  _OWORD *v277;
  CGFloat v278;
  __int128 v279;
  _OWORD *v280;
  _OWORD *v281;
  _OWORD *v282;
  CGFloat v283;
  _OWORD *v284;
  CGFloat v285;
  __int128 v286;
  _QWORD *v287;
  _QWORD *v288;
  _QWORD *v289;
  CGFloat v290;
  _QWORD *v291;
  CGFloat v292;
  CGFloat v293;
  uint64_t ROSUnicodeCMap;
  _QWORD *v295;
  unint64_t v296;
  uint64_t (*v297)(_QWORD, _QWORD, CGAffineTransform *);
  uint64_t v298;
  _QWORD *v299;
  _QWORD **v300;
  int64x2_t *v301;
  uint64_t v302;
  uint64_t v303;
  void *v304;
  double v305;
  double v306;
  double v309;
  unint64_t *v311;
  float64x2_t v312;
  CGFont *v313;
  void ***Advances;
  uint64_t v316;
  unint64_t v317;
  float64x2_t v318;
  int v319;
  uint64_t v321;
  CGSize scale;
  _BOOL4 GlyphBBoxes;
  double v324;
  double v325;
  double v326;
  double v327;
  double v328;
  double v329;
  uint64_t v330[2];
  CGAffineTransform v331;
  CGAffineTransform v332;
  CGAffineTransform value;
  _QWORD **v334;
  _QWORD *v335;
  uint64_t v336;
  _QWORD v337[2];
  CFTypeRef cf;
  CGAffineTransformComponents v339;
  CGAffineTransform transform;
  uint64_t v341;
  CGRect v342;
  CGRect v343;
  CGRect v344;
  CGRect v345;
  CGRect v346;
  CGRect v347;
  CGRect v348;
  CGRect v349;

  v341 = *MEMORY[0x1E0C80C00];
  if (a9)
  {
    v12 = *a3;
    v13 = a3[1];
    v14 = a3[2];
    v15 = a3[3];
    v16 = a3[4];
    v17 = a3[5];
    Font = (CGFont *)CGPDFFontGetFont(a2);
    v19 = *(const CGAffineTransform **)(a1 + 24);
    if (!v19)
      v19 = &CGAffineTransformIdentity;
    b = v19->b;
    c = v19->c;
    d = v19->d;
    ty = v19->ty;
    v24 = v13 * c + v12 * v19->a;
    v25 = v15 * c + v14 * v19->a;
    v26 = v19->tx + c * v17 + v16 * v19->a;
    memset(&v339, 0, sizeof(v339));
    v328 = v13 * d + v12 * b;
    v329 = v24;
    transform.a = v24;
    transform.b = v328;
    v326 = v15 * d + v14 * b;
    v327 = v25;
    transform.c = v25;
    transform.d = v326;
    v324 = d * v17 + v16 * b + ty;
    v325 = v26;
    transform.tx = v26;
    transform.ty = v324;
    CGAffineTransformDecompose(&v339, &transform);
    if (v339.horizontalShear < 2.22044605e-16)
      v339.horizontalShear = 0.0;
    if (v339.scale.width >= 0.0)
    {
      rotation = v339.rotation;
    }
    else
    {
      rotation = v339.rotation + 3.14159265;
      v339.scale.width = -v339.scale.width;
      v339.rotation = v339.rotation + 3.14159265;
    }
    scale = v339.scale;
    CMap = CGPDFFontGetCMap(a2);
    if (CMap
      && cmap_vtable
      && (v29 = *(unsigned int (**)(_QWORD))(cmap_vtable + 40)) != 0
      && v29(*(_QWORD *)(CMap + 16)))
    {
      v319 = 0;
      rotation = rotation + -1.57079633;
      scale = (CGSize)vextq_s8((int8x16_t)scale, (int8x16_t)scale, 8uLL);
    }
    else
    {
      v319 = 1;
    }
    if (a2)
      v30 = (const CGAffineTransform *)(a2 + 56);
    else
      v30 = &CGAffineTransformIdentity;
    v31 = v30->d;
    v32 = fabs(v30->a);
    if (v30->a == 0.0)
      v32 = 0.001;
    *(double *)&v316 = v32;
    v33 = fabs(v31);
    if (v31 == 0.0)
      v34 = 0.001;
    else
      v34 = v33;
    FontDescriptor = CGPDFFontGetFontDescriptor(a2);
    if (FontDescriptor)
      v36 = *(CGPDFDictionary **)(FontDescriptor + 32);
    else
      v36 = 0;
    font_info = get_font_info(Font);
    if (font_info)
      v38 = font_info[2];
    else
      v38 = 0;
    v309 = (double)v38;
    if (v319)
    {
      transform.a = 0.0;
      v39 = 0.0;
      if (CGPDFDictionaryGetNumber(v36, "Ascent", &transform.a))
        v40 = v34 * transform.a;
      else
        v40 = 0.0;
      v41 = v40 != 0.0 || Font == 0;
      if (!v41 && v38 != 0)
      {
        v43 = get_font_info(Font);
        if (v43)
          v44 = v43[3];
        else
          v44 = 0;
        v40 = (double)v44 / v309;
      }
      if (CGPDFDictionaryGetNumber(v36, "Descent", &transform.a))
      {
        transform.a = fabs(transform.a);
        v39 = v34 * transform.a;
      }
      if (v39 == 0.0 && Font && v38)
      {
        v47 = get_font_info(Font);
        if (v47)
          v48 = v47[4];
        else
          v48 = 0;
        v39 = (double)-v48 / v309;
      }
    }
    else
    {
      transform.a = 0.0;
      Number = CGPDFDictionaryGetNumber(v36, "DW", &transform.a);
      a = transform.a;
      if (!Number)
        a = 1000.0;
      v40 = *(double *)&v316 * a * 0.5;
      v39 = v40;
    }
    v321 = a1;
    if (v40 == 0.0 || v39 == 0.0)
    {
      v49 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
      v50 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v49 >> 47) ^ v49);
      v51 = 0x9DDFEA08EB382D69 * (v50 ^ (v50 >> 47));
      v52 = *(int8x8_t *)(a1 + 128);
      if (v52)
      {
        v53 = (uint8x8_t)vcnt_s8(v52);
        v53.i16[0] = vaddlv_u8(v53);
        if (v53.u32[0] > 1uLL)
        {
          v54 = v51;
          if (v51 >= *(_QWORD *)&v52)
            v54 = v51 % *(_QWORD *)&v52;
        }
        else
        {
          v54 = v51 & (*(_QWORD *)&v52 - 1);
        }
        v55 = *(double ***)(*(_QWORD *)(a1 + 120) + 8 * v54);
        if (v55)
        {
          for (i = *v55; i; i = *(double **)i)
          {
            v57 = *((_QWORD *)i + 1);
            if (v57 == v51)
            {
              if (*((_QWORD *)i + 2) == a2)
              {
                v40 = i[3];
                v39 = i[4];
                goto LABEL_181;
              }
            }
            else
            {
              if (v53.u32[0] > 1uLL)
              {
                if (v57 >= *(_QWORD *)&v52)
                  v57 %= *(_QWORD *)&v52;
              }
              else
              {
                v57 &= *(_QWORD *)&v52 - 1;
              }
              if (v57 != v54)
                break;
            }
          }
        }
      }
      if (a2)
        v58 = *(CGPDFDictionary **)(a2 + 16);
      else
        v58 = 0;
      v317 = v51;
      value.a = 0.0;
      if (!CGPDFDictionaryGetDictionary(v58, "Resources", (CGPDFDictionaryRef *)&value))
        value.a = 0.0;
      Procedures = CGPDFFontGetProcedures(a2);
      if (Procedures)
      {
        v67 = (unint64_t)Procedures;
        v68 = 0;
        v69 = 2.22507386e-308;
        y = 1.79769313e308;
        v9 = (unint64_t)&CGRectNull;
        do
        {
          v71 = *(CGPDFStream **)(v67 + v68);
          if (v71)
          {
            if (!*(_QWORD *)(a1 + 160))
            {
              CGDisplayList = CG::DisplayList::createCGDisplayList(0, (const __CFDictionary *)&CGRectInfinite, v61, v62, v63, v64, v65, v66);
              v73 = *(const void **)(a1 + 160);
              *(_QWORD *)(a1 + 160) = CGDisplayList;
              if (v73)
                CFRelease(v73);
            }
            v74 = *(CGContext **)(a1 + 168);
            if (!v74)
            {
              v74 = (CGContext *)CGDisplayListContextCreate(*(const void **)(a1 + 160), v60, (uint64_t)v61, v62, v63, v64, v65, v66);
              v75 = *(const void **)(a1 + 168);
              *(_QWORD *)(a1 + 168) = v74;
              if (v75)
              {
                CFRelease(v75);
                v74 = *(CGContext **)(a1 + 168);
              }
            }
            v76 = *(_QWORD *)(a1 + 160);
            CGContextSaveGState(v74);
            v77 = *(_OWORD *)&v30->c;
            *(_OWORD *)&transform.a = *(_OWORD *)&v30->a;
            *(_OWORD *)&transform.c = v77;
            *(_OWORD *)&transform.tx = *(_OWORD *)&v30->tx;
            CGContextConcatCTM(v74, &transform);
            v78 = CGPDFDrawingContextCreateWithStream(v71, *(CGPDFDictionary **)&value.a, 0);
            CGPDFDrawingContextDrawGlyphStream((CGPDFContentStreamRef *)v78, v71, *(CGPDFDictionary **)&value.a, (uint64_t)v74);
            CGPDFDrawingContextRelease(v78);
            CGContextRestoreGState(v74);
            p_height = &CGRectNull.size.height;
            p_y = &CGRectNull.origin.y;
            p_size = &CGRectNull.size;
            if (v76)
            {
              v82 = (const CGRect *)(v76 + 88);
              if (*(_QWORD *)(v76 + 592) == *(_QWORD *)(v76 + 600))
              {
                v82 = &CGRectNull;
              }
              else
              {
                p_size = (CGSize *)(v76 + 104);
                p_y = (CGFloat *)(v76 + 96);
                p_height = (CGFloat *)(v76 + 112);
              }
            }
            else
            {
              v82 = &CGRectNull;
            }
            height = *p_height;
            x = v82->origin.x;
            v85 = *p_y;
            width = p_size->width;
            CGDisplayListReset(v76);
            a1 = v321;
            if (x != INFINITY && v85 != INFINITY)
            {
              if (width < 0.0 || height < 0.0)
              {
                v342.origin.x = x;
                v342.origin.y = v85;
                v342.size.width = width;
                v342.size.height = height;
                v343 = CGRectStandardize(v342);
                if (v343.origin.y < y)
                  y = v343.origin.y;
                v344.origin.x = x;
                v344.origin.y = v85;
                v344.size.width = width;
                v344.size.height = height;
                v345 = CGRectStandardize(v344);
                v85 = v345.origin.y;
                height = v345.size.height;
              }
              else if (v85 < y)
              {
                y = v85;
              }
              if (v69 < v85 + height)
                v69 = v85 + height;
            }
          }
          v68 += 8;
        }
        while (v68 != 2048);
        v40 = v69 * 1.05;
        v39 = y * -1.25;
        v88 = *(_QWORD *)(a1 + 128);
        if (v88)
        {
          v89 = (uint8x8_t)vcnt_s8((int8x8_t)v88);
          v89.i16[0] = vaddlv_u8(v89);
          if (v89.u32[0] > 1uLL)
          {
            v67 = v317;
            if (v317 >= v88)
              v67 = v317 % v88;
          }
          else
          {
            v67 = v317 & (v88 - 1);
          }
          v90 = *(_QWORD **)(*(_QWORD *)(a1 + 120) + 8 * v67);
          if (v90)
          {
            for (j = (_QWORD *)*v90; j; j = (_QWORD *)*j)
            {
              v92 = j[1];
              if (v92 == v317)
              {
                if (j[2] == a2)
                  goto LABEL_181;
              }
              else
              {
                if (v89.u32[0] > 1uLL)
                {
                  if (v92 >= v88)
                    v92 %= v88;
                }
                else
                {
                  v92 &= v88 - 1;
                }
                if (v92 != v67)
                  break;
              }
            }
          }
        }
        v93 = (double *)operator new(0x28uLL);
        *v93 = 0.0;
        *((_QWORD *)v93 + 1) = v317;
        *((_QWORD *)v93 + 2) = a2;
        v94 = (float)(unint64_t)(*(_QWORD *)(a1 + 144) + 1);
        v93[3] = v40;
        v93[4] = v39;
        v95 = *(float *)(a1 + 152);
        if ((((float)(v95 * (float)v88) >= v94) & ~(v88 == 0)) != 0)
        {
LABEL_171:
          v112 = *(_QWORD *)(a1 + 120);
          v113 = *(double ***)(v112 + 8 * v67);
          if (v113)
          {
            *(_QWORD *)v93 = *v113;
          }
          else
          {
            *v93 = *(double *)(a1 + 136);
            *(_QWORD *)(a1 + 136) = v93;
            *(_QWORD *)(v112 + 8 * v67) = a1 + 136;
            if (!*(_QWORD *)v93)
            {
LABEL_180:
              ++*(_QWORD *)(a1 + 144);
              goto LABEL_181;
            }
            v114 = *(_QWORD *)(*(_QWORD *)v93 + 8);
            if ((v88 & (v88 - 1)) != 0)
            {
              if (v114 >= v88)
                v114 %= v88;
            }
            else
            {
              v114 &= v88 - 1;
            }
            v113 = (double **)(*(_QWORD *)(a1 + 120) + 8 * v114);
          }
          *v113 = v93;
          goto LABEL_180;
        }
        v96 = 1;
        if (v88 >= 3)
          v96 = (v88 & (v88 - 1)) != 0;
        v97 = v96 | (2 * v88);
        v98 = vcvtps_u32_f32(v94 / v95);
        if (v97 <= v98)
          prime = (int8x8_t)v98;
        else
          prime = (int8x8_t)v97;
        if (*(_QWORD *)&prime == 1)
        {
          prime = (int8x8_t)2;
        }
        else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
        {
          prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
          v88 = *(_QWORD *)(a1 + 128);
        }
        if (*(_QWORD *)&prime > v88)
        {
LABEL_137:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:se180100]();
          v100 = operator new(8 * *(_QWORD *)&prime);
          v101 = *(void **)(a1 + 120);
          *(_QWORD *)(a1 + 120) = v100;
          if (v101)
            operator delete(v101);
          v102 = 0;
          *(int8x8_t *)(a1 + 128) = prime;
          do
            *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v102++) = 0;
          while (*(_QWORD *)&prime != v102);
          v103 = *(_QWORD **)(a1 + 136);
          if (v103)
          {
            v104 = v103[1];
            v105 = (uint8x8_t)vcnt_s8(prime);
            v105.i16[0] = vaddlv_u8(v105);
            if (v105.u32[0] > 1uLL)
            {
              if (v104 >= *(_QWORD *)&prime)
                v104 %= *(_QWORD *)&prime;
            }
            else
            {
              v104 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v104) = a1 + 136;
            v109 = (_QWORD *)*v103;
            if (*v103)
            {
              do
              {
                v110 = v109[1];
                if (v105.u32[0] > 1uLL)
                {
                  if (v110 >= *(_QWORD *)&prime)
                    v110 %= *(_QWORD *)&prime;
                }
                else
                {
                  v110 &= *(_QWORD *)&prime - 1;
                }
                if (v110 != v104)
                {
                  v111 = *(_QWORD *)(a1 + 120);
                  if (!*(_QWORD *)(v111 + 8 * v110))
                  {
                    *(_QWORD *)(v111 + 8 * v110) = v103;
                    goto LABEL_162;
                  }
                  *v103 = *v109;
                  *v109 = **(_QWORD **)(*(_QWORD *)(a1 + 120) + 8 * v110);
                  **(_QWORD **)(*(_QWORD *)(a1 + 120) + 8 * v110) = v109;
                  v109 = v103;
                }
                v110 = v104;
LABEL_162:
                v103 = v109;
                v109 = (_QWORD *)*v109;
                v104 = v110;
              }
              while (v109);
            }
          }
          v88 = (unint64_t)prime;
          goto LABEL_166;
        }
        if (*(_QWORD *)&prime < v88)
        {
          v106 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 144) / *(float *)(a1 + 152));
          if (v88 < 3 || (v107 = (uint8x8_t)vcnt_s8((int8x8_t)v88), v107.i16[0] = vaddlv_u8(v107), v107.u32[0] > 1uLL))
          {
            v106 = std::__next_prime(v106);
          }
          else
          {
            v108 = 1 << -(char)__clz(v106 - 1);
            if (v106 >= 2)
              v106 = v108;
          }
          if (*(_QWORD *)&prime <= v106)
            prime = (int8x8_t)v106;
          if (*(_QWORD *)&prime < v88)
          {
            if (!*(_QWORD *)&prime)
            {
              v304 = *(void **)(a1 + 120);
              *(_QWORD *)(a1 + 120) = 0;
              v67 = v317;
              if (v304)
                operator delete(v304);
              v88 = 0;
              *(_QWORD *)(a1 + 128) = 0;
              goto LABEL_167;
            }
            goto LABEL_137;
          }
          v88 = *(_QWORD *)(a1 + 128);
        }
LABEL_166:
        v67 = v317;
LABEL_167:
        if ((v88 & (v88 - 1)) != 0)
        {
          if (v67 >= v88)
            v67 %= v88;
        }
        else
        {
          v67 &= v88 - 1;
        }
        goto LABEL_171;
      }
    }
LABEL_181:
    if (v40 != 0.0 && v39 != 0.0)
    {
      v115 = __sincos_stret(rotation);
      v116 = *(_QWORD *)a1;
      v117 = (uint64_t *)(*(_QWORD *)a1 + 104);
      v311 = (unint64_t *)a2;
      v118 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
      v119 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v118 >> 47) ^ v118);
      v120 = 0x9DDFEA08EB382D69 * (v119 ^ (v119 >> 47));
      v121 = *(_QWORD *)(*(_QWORD *)a1 + 112);
      v313 = Font;
      if (v121)
      {
        v122 = (uint8x8_t)vcnt_s8((int8x8_t)v121);
        v122.i16[0] = vaddlv_u8(v122);
        if (v122.u32[0] > 1uLL)
        {
          v9 = 0x9DDFEA08EB382D69 * (v119 ^ (v119 >> 47));
          if (v120 >= v121)
            v9 = v120 % v121;
        }
        else
        {
          v9 = v120 & (v121 - 1);
        }
        v124 = *(_QWORD ***)(*v117 + 8 * v9);
        if (v124)
        {
          for (k = *v124; k; k = (_QWORD *)*k)
          {
            v126 = k[1];
            if (v126 == v120)
            {
              if ((unint64_t *)k[2] == v311)
                goto LABEL_225;
            }
            else
            {
              if (v122.u32[0] > 1uLL)
              {
                if (v126 >= v121)
                  v126 %= v121;
              }
              else
              {
                v126 &= v121 - 1;
              }
              if (v126 != v9)
                break;
            }
          }
        }
      }
      k = operator new(0x20uLL);
      *k = 0;
      k[1] = v120;
      k[2] = v311;
      k[3] = 0;
      v127 = (float)(unint64_t)(*(_QWORD *)(v116 + 128) + 1);
      v128 = *(float *)(v116 + 136);
      if ((((float)(v128 * (float)v121) >= v127) & ~(v121 == 0)) == 0)
      {
        v129 = 1;
        if (v121 >= 3)
          v129 = (v121 & (v121 - 1)) != 0;
        v130 = v129 | (2 * v121);
        v131 = vcvtps_u32_f32(v127 / v128);
        if (v130 <= v131)
          v132 = v131;
        else
          v132 = v130;
        std::__hash_table<std::__hash_value_type<CGPDFFont *,unsigned long>,std::__unordered_map_hasher<CGPDFFont *,std::__hash_value_type<CGPDFFont *,unsigned long>,std::hash<CGPDFFont *>,std::equal_to<CGPDFFont *>,true>,std::__unordered_map_equal<CGPDFFont *,std::__hash_value_type<CGPDFFont *,unsigned long>,std::equal_to<CGPDFFont *>,std::hash<CGPDFFont *>,true>,std::allocator<std::__hash_value_type<CGPDFFont *,unsigned long>>>::__rehash<true>((uint64_t)v117, v132);
        v121 = *(_QWORD *)(v116 + 112);
        if ((v121 & (v121 - 1)) != 0)
        {
          if (v120 >= v121)
            v9 = v120 % v121;
          else
            v9 = v120;
        }
        else
        {
          v9 = (v121 - 1) & v120;
        }
      }
      v133 = *v117;
      v134 = *(_QWORD **)(*v117 + 8 * v9);
      if (v134)
      {
        *k = *v134;
      }
      else
      {
        *k = *(_QWORD *)(v116 + 120);
        *(_QWORD *)(v116 + 120) = k;
        *(_QWORD *)(v133 + 8 * v9) = v116 + 120;
        if (!*k)
        {
LABEL_224:
          ++*(_QWORD *)(v116 + 128);
LABEL_225:
          v136 = k[3];
          FillColor = (void *)CGPDFGStateGetFillColor(*(_QWORD *)(a1 + 24));
          v138 = FillColor;
          v337[0] = v136;
          *(double *)&v337[1] = (scale.width + scale.height) * 0.5;
          if (FillColor)
            CFRetain(FillColor);
          cf = v138;
          v139 = *(_QWORD *)(a1 + 80);
          if (*(_QWORD *)(a1 + 72) == v139)
            v140 = -1;
          else
            v140 = *(_QWORD *)(v139 - 8);
          v141 = *(int64x2_t **)a1;
          v142 = *(_QWORD **)(*(_QWORD *)a1 + 8);
          v143 = v142[22];
          v144 = v142[23];
          if (v143 == v144)
          {
            v146 = v142[22];
            v145 = (_OWORD *)v146;
          }
          else
          {
            v145 = (_OWORD *)v142[23];
            v146 = v142[22];
            while (*(_QWORD *)v146 != v136
                 || *(double *)(v146 + 8) != (scale.width + scale.height) * 0.5
                 || !CGColorEqualToColor(*(CGColorRef *)(v146 + 16), (CGColorRef)v138))
            {
              v146 += 24;
              if (v146 == v144)
              {
                v146 = v144;
                break;
              }
            }
          }
          if ((_OWORD *)v146 == v145)
          {
            v148 = v142[24];
            if ((unint64_t)v145 >= v148)
            {
              v150 = 0xAAAAAAAAAAAAAAABLL * ((v144 - v143) >> 3) + 1;
              if (v150 > 0xAAAAAAAAAAAAAAALL)
                std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
              v151 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v148 - v143) >> 3);
              if (2 * v151 > v150)
                v150 = 2 * v151;
              if (v151 >= 0x555555555555555)
                v152 = 0xAAAAAAAAAAAAAAALL;
              else
                v152 = v150;
              *(_QWORD *)&transform.tx = v142 + 24;
              if (v152)
              {
                v154 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<std::vector<ClipperLib::IntPoint>>>(v152);
              }
              else
              {
                v154 = 0;
                v153 = 0;
              }
              *(_QWORD *)&v155 = &v154[24 * v153];
              transform.d = v155;
              v156 = std::construct_at[abi:se180100]<PageLayout::CharacterStyle,PageLayout::CharacterStyle const&,PageLayout::CharacterStyle*>(&v154[8 * ((v144 - v143) >> 3)], (uint64_t)v337);
              *(_QWORD *)&v149 = (char *)v156 + 24;
              *(_QWORD *)&transform.c = (char *)v156 + 24;
              v158 = v142[22];
              v157 = v142[23];
              if (v157 == v158)
              {
                v159 = vdupq_n_s64(v157);
              }
              else
              {
                do
                {
                  *(_OWORD *)((char *)v156 - 24) = *(_OWORD *)(v157 - 24);
                  *((_QWORD *)v156 - 1) = *(_QWORD *)(v157 - 8);
                  v156 = (_OWORD *)((char *)v156 - 24);
                  *(_QWORD *)(v157 - 8) = 0;
                  v157 -= 24;
                }
                while (v157 != v158);
                v159 = *((int64x2_t *)v142 + 11);
                v149 = transform.c;
                v155 = transform.d;
              }
              v142[22] = v156;
              *((CGFloat *)v142 + 23) = v149;
              *(int64x2_t *)&transform.b = v159;
              v160 = *((double *)v142 + 24);
              *((CGFloat *)v142 + 24) = v155;
              transform.d = v160;
              *(_QWORD *)&transform.a = v159.i64[0];
              std::__split_buffer<PageLayout::CharacterStyle>::~__split_buffer((uint64_t)&transform);
            }
            else
            {
              std::construct_at[abi:se180100]<PageLayout::CharacterStyle,PageLayout::CharacterStyle const&,PageLayout::CharacterStyle*>(v145, (uint64_t)v337);
              *(_QWORD *)&v149 = (char *)v145 + 24;
            }
            v147 = rotation;
            *((CGFloat *)v142 + 23) = v149;
            v146 = *(_QWORD *)&v149 - 24;
            v141 = *(int64x2_t **)a1;
          }
          else
          {
            v147 = rotation;
          }
          v161 = v115.__cosval * v324 - v325 * v115.__sinval + 0.0;
          v162 = (v326 * v115.__cosval - v327 * v115.__sinval) * 0.0
               + (v328 * v115.__cosval - v329 * v115.__sinval) * 0.0;
          v305 = v39;
          v306 = v40;
          v163 = vmuld_lane_f64(v40, (float64x2_t)scale, 1);
          v164 = vmuld_lane_f64(v39, (float64x2_t)scale, 1);
          v165 = v161 + v162;
          v166 = v161 + v162 - v164;
          v167 = v163 + v164;
          v168 = 0xAAAAAAAAAAAAAAABLL * ((v146 - v142[22]) >> 3);
          v169 = v141[10].u64[0];
          v170 = v141[9].u64[1];
          if (v170 >= v169)
          {
            v175 = v141[9].i64[0];
            v176 = 0x34F72C234F72C235 * ((uint64_t)(v170 - v175) >> 3);
            if ((unint64_t)(v176 + 1) > 0x11A7B9611A7B961)
              std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
            v177 = 0x34F72C234F72C235 * ((uint64_t)(v169 - v175) >> 3);
            v178 = 2 * v177;
            if (2 * v177 <= v176 + 1)
              v178 = v176 + 1;
            if (v177 >= 0x8D3DCB08D3DCB0)
              v179 = 0x11A7B9611A7B961;
            else
              v179 = v178;
            *(_QWORD *)&transform.tx = v141[10].i64;
            if (v179)
            {
              if (v179 > 0x11A7B9611A7B961)
                std::__throw_bad_array_new_length[abi:se180100]();
              v180 = (char *)operator new(232 * v179);
            }
            else
            {
              v180 = 0;
            }
            *(_QWORD *)&transform.a = v180;
            *(_QWORD *)&transform.b = &v180[232 * v176];
            transform.c = transform.b;
            *(_QWORD *)&transform.d = &v180[232 * v179];
            if (!v180)
              goto LABEL_524;
            v181 = (PageLayoutFactory::TextChunk *)&v180[232 * v176];
            v171 = a9;
            v172 = v313;
            PageLayoutFactory::TextChunk::TextChunk(v181, a9, v166, v167, v313, v147, v165, scale, v140, *(_BYTE *)(a1 + 96), v168);
            v182 = transform.b;
            *(_QWORD *)&v174 = *(_QWORD *)&transform.c + 232;
            *(_QWORD *)&transform.c += 232;
            v184 = v141[9].i64[0];
            v183 = v141[9].u64[1];
            if (v183 == v184)
            {
              v191 = vdupq_n_s64(v183);
            }
            else
            {
              do
              {
                *(_QWORD *)(*(_QWORD *)&v182 - 232) = 0;
                *(_QWORD *)(*(_QWORD *)&v182 - 224) = 0;
                *(_QWORD *)&v182 -= 232;
                *(_QWORD *)(*(_QWORD *)&v182 + 16) = 0;
                v185 = *(_OWORD *)(v183 - 232);
                v183 -= 232;
                **(_OWORD **)&v182 = v185;
                *(_QWORD *)(*(_QWORD *)&v182 + 16) = *(_QWORD *)(v183 + 16);
                *(_QWORD *)v183 = 0;
                *(_QWORD *)(v183 + 8) = 0;
                *(_QWORD *)(v183 + 16) = 0;
                *(_QWORD *)(*(_QWORD *)&v182 + 24) = 0;
                *(_QWORD *)(*(_QWORD *)&v182 + 32) = 0;
                *(_QWORD *)(*(_QWORD *)&v182 + 40) = 0;
                *(_OWORD *)(*(_QWORD *)&v182 + 24) = *(_OWORD *)(v183 + 24);
                *(_QWORD *)(*(_QWORD *)&v182 + 40) = *(_QWORD *)(v183 + 40);
                *(_QWORD *)(v183 + 24) = 0;
                *(_QWORD *)(v183 + 32) = 0;
                *(_QWORD *)(v183 + 40) = 0;
                *(_QWORD *)(*(_QWORD *)&v182 + 48) = 0;
                *(_QWORD *)(*(_QWORD *)&v182 + 56) = 0;
                *(_QWORD *)(*(_QWORD *)&v182 + 64) = 0;
                *(_OWORD *)(*(_QWORD *)&v182 + 48) = *(_OWORD *)(v183 + 48);
                *(_QWORD *)(*(_QWORD *)&v182 + 64) = *(_QWORD *)(v183 + 64);
                *(_QWORD *)(v183 + 48) = 0;
                *(_QWORD *)(v183 + 56) = 0;
                *(_QWORD *)(v183 + 64) = 0;
                *(_QWORD *)(*(_QWORD *)&v182 + 72) = 0;
                *(_QWORD *)(*(_QWORD *)&v182 + 80) = 0;
                *(_QWORD *)(*(_QWORD *)&v182 + 88) = 0;
                *(_OWORD *)(*(_QWORD *)&v182 + 72) = *(_OWORD *)(v183 + 72);
                *(_QWORD *)(*(_QWORD *)&v182 + 88) = *(_QWORD *)(v183 + 88);
                *(_QWORD *)(v183 + 72) = 0;
                *(_QWORD *)(v183 + 80) = 0;
                *(_QWORD *)(v183 + 88) = 0;
                *(_QWORD *)(*(_QWORD *)&v182 + 96) = 0;
                *(_QWORD *)(*(_QWORD *)&v182 + 104) = 0;
                *(_QWORD *)(*(_QWORD *)&v182 + 112) = 0;
                *(_OWORD *)(*(_QWORD *)&v182 + 96) = *(_OWORD *)(v183 + 96);
                *(_QWORD *)(*(_QWORD *)&v182 + 112) = *(_QWORD *)(v183 + 112);
                *(_QWORD *)(v183 + 104) = 0;
                *(_QWORD *)(v183 + 112) = 0;
                *(_QWORD *)(v183 + 96) = 0;
                v186 = *(_OWORD *)(v183 + 184);
                v187 = *(_OWORD *)(v183 + 200);
                v188 = *(_OWORD *)(v183 + 216);
                *(_OWORD *)(*(_QWORD *)&v182 + 168) = *(_OWORD *)(v183 + 168);
                *(_OWORD *)(*(_QWORD *)&v182 + 216) = v188;
                *(_OWORD *)(*(_QWORD *)&v182 + 200) = v187;
                *(_OWORD *)(*(_QWORD *)&v182 + 184) = v186;
                v189 = *(_OWORD *)(v183 + 136);
                v190 = *(_OWORD *)(v183 + 152);
                *(_OWORD *)(*(_QWORD *)&v182 + 120) = *(_OWORD *)(v183 + 120);
                *(_OWORD *)(*(_QWORD *)&v182 + 152) = v190;
                *(_OWORD *)(*(_QWORD *)&v182 + 136) = v189;
              }
              while (v183 != v184);
              v191 = v141[9];
              v174 = transform.c;
            }
            *(CGFloat *)v141[9].i64 = v182;
            *(CGFloat *)&v141[9].i64[1] = v174;
            *(int64x2_t *)&transform.b = v191;
            v192 = *(double *)v141[10].i64;
            v141[10].i64[0] = *(_QWORD *)&transform.d;
            transform.d = v192;
            *(_QWORD *)&transform.a = v191.i64[0];
            std::__split_buffer<PageLayoutFactory::TextChunk>::~__split_buffer((uint64_t)&transform);
            v173 = (void ***)v311;
          }
          else
          {
            v171 = a9;
            v172 = v313;
            if (!v170)
              goto LABEL_524;
            PageLayoutFactory::TextChunk::TextChunk((PageLayoutFactory::TextChunk *)v141[9].i64[1], a9, v161 + v162 - v164, v163 + v164, v313, v147, v165, scale, v140, *(_BYTE *)(a1 + 96), v168);
            v173 = (void ***)v311;
            *(_QWORD *)&v174 = v170 + 232;
            v141[9].i64[1] = v170 + 232;
          }
          *(CGFloat *)&v141[9].i64[1] = v174;
          v193 = *(_QWORD *)(*(_QWORD *)a1 + 152);
          if (*(_QWORD *)(*(_QWORD *)a1 + 144) == v193)
            goto LABEL_524;
          v335 = 0;
          v336 = 0;
          v334 = &v335;
          GlyphBBoxes = CGFontGetGlyphBBoxes(v172, a6, v171, *(CGRect **)(v193 - 208));
          Advances = CGPDFFontGetAdvances(v173);
          v194 = 0;
          v195 = 0;
          v312 = (float64x2_t)vdupq_lane_s64(v316, 0);
          v318 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v309, 0);
          if (v171 <= 1)
            v171 = 1;
          v196 = (double *)(a4 + 8);
          do
          {
            v197 = *(_QWORD *)(v193 - 208);
            if (v195 >= (*(_QWORD *)(v193 - 200) - v197) >> 5)
              goto LABEL_524;
            v198 = *(_QWORD *)(v193 - 184);
            if (v195 >= (*(_QWORD *)(v193 - 176) - v198) >> 5)
              goto LABEL_524;
            if (GlyphBBoxes)
            {
              v199 = (float64x2_t *)(v197 + v194);
              v200 = vdivq_f64(*(float64x2_t *)(v197 + v194 + 16), v318);
              *v199 = vdivq_f64(*(float64x2_t *)(v197 + v194), v318);
              v199[1] = v200;
            }
            else
            {
              v201 = *(_QWORD *)(a5 + 8 * v195);
              v202 = v197 + v194;
              *(_QWORD *)v202 = 0;
              *(double *)(v202 + 8) = -v305;
              *(_QWORD *)(v202 + 16) = v201;
              *(double *)(v202 + 24) = v306 + v305;
            }
            v203 = (CGFloat *)(v197 + v194);
            v204 = (_OWORD *)(v198 + v194);
            v205 = *(_OWORD *)(v197 + v194 + 16);
            *v204 = *(_OWORD *)(v197 + v194);
            v204[1] = v205;
            v206 = (CGFloat *)(v197 + v194);
            v207 = *(double *)(v197 + v194);
            *(_QWORD *)&v205 = *(_QWORD *)(v197 + v194 + 8);
            v208 = *(_QWORD *)(v197 + v194 + 16);
            v209 = *(_QWORD *)(v197 + v194 + 24);
            v210 = *(v196 - 1);
            v211 = *v196;
            value.a = v329;
            value.b = v328;
            value.c = v327;
            value.d = v326;
            value.tx = v325;
            value.ty = v324;
            v212 = v207 + v210;
            *(double *)&v205 = *(double *)&v205 + v211;
            v346 = CGRectApplyAffineTransform(*(CGRect *)((char *)&v205 - 8), &value);
            if (CGRectIntersectsRect(v346, *(CGRect *)(a1 + 40)))
            {
              std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t *)&v334, v195, v195);
              v213 = v198 + v194;
              *(float64x2_t *)(v198 + v194) = vaddq_f64(*(float64x2_t *)(v196 - 1), *(float64x2_t *)(v198 + v194));
              v214.f64[0] = *(v196 - 1);
              if (v319)
              {
                v215 = (_QWORD *)(v197 + v194);
                *v215 = *(_QWORD *)&v214.f64[0];
                v216 = *v196 + v206[1];
                v206[1] = v216;
                v217 = *(_QWORD *)(a5 + 8 * v195);
                v215[2] = v217;
                v218 = v206[3];
              }
              else
              {
                v219 = (float64x2_t *)(v197 + v194);
                v219->f64[0] = v214.f64[0] + v219->f64[0];
                v206[1] = *v196;
                v218 = *(double *)&v316
                     * CGPDFAdvancesGetVerticalAdvance((uint64_t)Advances, *(unsigned __int16 *)(a7 + 2 * v195), (uint64_t)&transform);
                v219[1].f64[1] = v218;
                v214 = vmlaq_f64(*v219, *(float64x2_t *)&transform.a, v312);
                *v219 = v214;
                v216 = v214.f64[1];
                v217 = *((_QWORD *)v206 + 2);
              }
              v332.a = v328 * v115.__sinval + v329 * v115.__cosval;
              v332.b = v328 * v115.__cosval - v329 * v115.__sinval;
              v332.c = v326 * v115.__sinval + v327 * v115.__cosval;
              v332.d = v326 * v115.__cosval - v327 * v115.__sinval;
              v332.tx = v115.__sinval * v324 + v325 * v115.__cosval + 0.0;
              v332.ty = v115.__cosval * v324 - v325 * v115.__sinval + 0.0;
              v347 = CGRectApplyAffineTransform(*(CGRect *)v214.f64, &v332);
              *v203 = v347.origin.x;
              v206[1] = v347.origin.y;
              v206[2] = v347.size.width;
              v206[3] = v347.size.height;
              v220 = (CGFloat *)(v198 + v194);
              v347.origin.x = *(CGFloat *)(v198 + v194);
              v347.origin.y = *(CGFloat *)(v213 + 8);
              v347.size.width = *(CGFloat *)(v198 + v194 + 16);
              v347.size.height = *(CGFloat *)(v198 + v194 + 24);
              v331.a = v328 * v115.__sinval + v329 * v115.__cosval;
              v331.b = v328 * v115.__cosval - v329 * v115.__sinval;
              v331.c = v326 * v115.__sinval + v327 * v115.__cosval;
              v331.d = v326 * v115.__cosval - v327 * v115.__sinval;
              v331.tx = v115.__sinval * v324 + v325 * v115.__cosval + 0.0;
              v331.ty = v115.__cosval * v324 - v325 * v115.__sinval + 0.0;
              v348 = CGRectApplyAffineTransform(v347, &v331);
              *v220 = v348.origin.x;
              *(CGFloat *)(v213 + 8) = v348.origin.y;
              v220[2] = v348.size.width;
              v220[3] = v348.size.height;
              v349.origin.x = *v203;
              v349.origin.y = v206[1];
              v349.size.width = v206[2];
              v349.size.height = v206[3];
              *(CGRect *)(v193 - 48) = CGRectUnion(*(CGRect *)(v193 - 48), v349);
              a1 = v321;
            }
            ++v195;
            v194 += 32;
            v196 += 2;
          }
          while (v171 != v195);
          if (v336)
          {
            v330[0] = a1;
            v330[1] = v193 - 232;
            if (*(_BYTE *)(a1 + 96))
            {
              v221 = *(void **)(a1 + 104);
              if (v221)
              {
                v222 = objc_msgSend(v221, "length");
                std::vector<unsigned short>::resize((char **)(v193 - 136), v222);
                objc_msgSend(*(id *)(a1 + 104), "getCharacters:", *(_QWORD *)(v193 - 136));
                v223 = *(unint64_t **)(v193 - 160);
                v224 = *(unint64_t **)(v193 - 152);
                if (v224 == v223)
                  goto LABEL_524;
                *v223 = v222;
                v225 = v223 + 1;
                v226 = (char *)v224 - v225;
                if (v226 >= 1)
                  bzero(v225, 8 * (((unint64_t)v226 >> 3) - ((unint64_t)v226 > 7)) + 8);
                v227 = *(void **)(a1 + 104);
                *(_QWORD *)(a1 + 104) = 0;

              }
              *(_BYTE *)(a1 + 96) = 0;
              goto LABEL_299;
            }
            Encoding = CGPDFFontGetEncoding(v311);
            if (Encoding)
            {
              v264 = v334;
              if (v334 != &v335)
              {
                v265 = (uint64_t)Encoding;
                do
                {
                  v266 = v264[4];
                  transform.a = 0.0;
                  UnicodesForIndex = (_WORD *)CGPDFEncodingGetUnicodesForIndex(v265, *(unsigned __int8 *)(a8 + v266), &transform);
                  PageLayoutFactory::ScannerContext::drawGlyphs(CGPDFFont *,CGAffineTransform,CGPoint const*,double const*,unsigned short const*,unsigned short const*,unsigned char const*,unsigned long)::{lambda(unsigned short const*,unsigned long,unsigned long)#1}::operator()(v330, UnicodesForIndex, v266, *(uint64_t *)&transform.a);
                  v268 = (_QWORD *)v264[1];
                  if (v268)
                  {
                    do
                    {
                      v269 = (_QWORD **)v268;
                      v268 = (_QWORD *)*v268;
                    }
                    while (v268);
                  }
                  else
                  {
                    do
                    {
                      v269 = (_QWORD **)v264[2];
                      v41 = *v269 == v264;
                      v264 = v269;
                    }
                    while (!v41);
                  }
                  v264 = v269;
                }
                while (v269 != &v335);
              }
LABEL_299:
              memmove(*(void **)(v193 - 232), a6, 2 * a9);
              if (v336 == (uint64_t)(*(_QWORD *)(v193 - 224) - *(_QWORD *)(v193 - 232)) >> 1)
                goto LABEL_507;
              v228 = v334;
              memset(&transform, 0, 32);
              LODWORD(transform.tx) = 1065353216;
              if (v334 != &v335)
              {
                v229 = 0;
                v230 = 0;
                while (1)
                {
                  v231 = v228[4];
                  if (v229)
                  {
                    v232 = (uint8x8_t)vcnt_s8((int8x8_t)v229);
                    v232.i16[0] = vaddlv_u8(v232);
                    if (v232.u32[0] > 1uLL)
                    {
                      v196 = (double *)v228[4];
                      if (v231 >= v229)
                        v196 = (double *)(v231 % v229);
                    }
                    else
                    {
                      v196 = (double *)((v229 - 1) & v231);
                    }
                    v233 = *(_QWORD **)(*(_QWORD *)&transform.a + 8 * (_QWORD)v196);
                    if (v233)
                    {
                      for (m = (_QWORD *)*v233; m; m = (_QWORD *)*m)
                      {
                        v235 = m[1];
                        if (v235 == v231)
                        {
                          if (m[2] == v231)
                            goto LABEL_374;
                        }
                        else
                        {
                          if (v232.u32[0] > 1uLL)
                          {
                            if (v235 >= v229)
                              v235 %= v229;
                          }
                          else
                          {
                            v235 &= v229 - 1;
                          }
                          if ((double *)v235 != v196)
                            break;
                        }
                      }
                    }
                  }
                  v236 = operator new(0x18uLL);
                  *v236 = 0;
                  v236[1] = v231;
                  v236[2] = v228[4];
                  v237 = (float)(unint64_t)(v230 + 1);
                  if (!v229 || (float)(*(float *)&transform.tx * (float)v229) < v237)
                    break;
LABEL_364:
                  v253 = transform.a;
                  v254 = *(_QWORD **)(*(_QWORD *)&transform.a + 8 * (_QWORD)v196);
                  if (v254)
                  {
                    *v236 = *v254;
                  }
                  else
                  {
                    *v236 = *(_QWORD *)&transform.c;
                    *(_QWORD *)&transform.c = v236;
                    *(_QWORD *)(*(_QWORD *)&v253 + 8 * (_QWORD)v196) = &transform.c;
                    if (!*v236)
                      goto LABEL_373;
                    v255 = *(_QWORD *)(*v236 + 8);
                    if ((v229 & (v229 - 1)) != 0)
                    {
                      if (v255 >= v229)
                        v255 %= v229;
                    }
                    else
                    {
                      v255 &= v229 - 1;
                    }
                    v254 = (_QWORD *)(*(_QWORD *)&transform.a + 8 * v255);
                  }
                  *v254 = v236;
LABEL_373:
                  v230 = ++*(_QWORD *)&transform.d;
LABEL_374:
                  v256 = (_QWORD *)v228[1];
                  if (v256)
                  {
                    do
                    {
                      v257 = (_QWORD **)v256;
                      v256 = (_QWORD *)*v256;
                    }
                    while (v256);
                  }
                  else
                  {
                    do
                    {
                      v257 = (_QWORD **)v228[2];
                      v41 = *v257 == v228;
                      v228 = v257;
                    }
                    while (!v41);
                  }
                  v228 = v257;
                  if (v257 == &v335)
                    goto LABEL_390;
                }
                v238 = (v229 & (v229 - 1)) != 0;
                if (v229 < 3)
                  v238 = 1;
                v239 = v238 | (2 * v229);
                v240 = vcvtps_u32_f32(v237 / *(float *)&transform.tx);
                if (v239 <= v240)
                  v241 = v240;
                else
                  v241 = v239;
                if (v241 == 1)
                {
                  v241 = 2;
                }
                else if ((v241 & (v241 - 1)) != 0)
                {
                  v241 = std::__next_prime(v241);
                  v229 = *(_QWORD *)&transform.b;
                }
                if (v241 > v229)
                  goto LABEL_330;
                if (v241 < v229)
                {
                  v248 = vcvtps_u32_f32((float)*(unint64_t *)&transform.d / *(float *)&transform.tx);
                  if (v229 < 3
                    || (v249 = (uint8x8_t)vcnt_s8((int8x8_t)v229), v249.i16[0] = vaddlv_u8(v249), v249.u32[0] > 1uLL))
                  {
                    v248 = std::__next_prime(v248);
                  }
                  else
                  {
                    v250 = 1 << -(char)__clz(v248 - 1);
                    if (v248 >= 2)
                      v248 = v250;
                  }
                  if (v241 <= v248)
                    v241 = v248;
                  if (v241 >= v229)
                  {
                    v229 = *(_QWORD *)&transform.b;
                  }
                  else
                  {
                    if (v241)
                    {
LABEL_330:
                      if (v241 >> 61)
                        std::__throw_bad_array_new_length[abi:se180100]();
                      v242 = operator new(8 * v241);
                      v243 = transform.a;
                      *(_QWORD *)&transform.a = v242;
                      if (v243 != 0.0)
                        operator delete(*(void **)&v243);
                      v244 = 0;
                      *(_QWORD *)&transform.b = v241;
                      do
                        *(_QWORD *)(*(_QWORD *)&transform.a + 8 * v244++) = 0;
                      while (v241 != v244);
                      v245 = transform.c;
                      if (*(_QWORD *)&transform.c)
                      {
                        v246 = *(_QWORD *)(*(_QWORD *)&transform.c + 8);
                        v247 = (uint8x8_t)vcnt_s8((int8x8_t)v241);
                        v247.i16[0] = vaddlv_u8(v247);
                        if (v247.u32[0] > 1uLL)
                        {
                          if (v246 >= v241)
                            v246 %= v241;
                        }
                        else
                        {
                          v246 &= v241 - 1;
                        }
                        *(_QWORD *)(*(_QWORD *)&transform.a + 8 * v246) = &transform.c;
                        v251 = **(double **)&v245;
                        if (**(_QWORD **)&v245)
                        {
                          do
                          {
                            v252 = *(_QWORD *)(*(_QWORD *)&v251 + 8);
                            if (v247.u32[0] > 1uLL)
                            {
                              if (v252 >= v241)
                                v252 %= v241;
                            }
                            else
                            {
                              v252 &= v241 - 1;
                            }
                            if (v252 != v246)
                            {
                              if (!*(_QWORD *)(*(_QWORD *)&transform.a + 8 * v252))
                              {
                                *(CGFloat *)(*(_QWORD *)&transform.a + 8 * v252) = v245;
                                goto LABEL_355;
                              }
                              **(_QWORD **)&v245 = **(_QWORD **)&v251;
                              **(_QWORD **)&v251 = **(_QWORD **)(*(_QWORD *)&transform.a + 8 * v252);
                              **(double **)(*(_QWORD *)&transform.a + 8 * v252) = v251;
                              v251 = v245;
                            }
                            v252 = v246;
LABEL_355:
                            v245 = v251;
                            v251 = **(double **)&v251;
                            v246 = v252;
                          }
                          while (v251 != 0.0);
                        }
                      }
                      v229 = v241;
                      goto LABEL_359;
                    }
                    v258 = transform.a;
                    transform.a = 0.0;
                    if (v258 != 0.0)
                      operator delete(*(void **)&v258);
                    v229 = 0;
                    transform.b = 0.0;
                  }
                }
LABEL_359:
                if ((v229 & (v229 - 1)) != 0)
                {
                  if (v231 >= v229)
                    v196 = (double *)(v231 % v229);
                  else
                    v196 = (double *)v231;
                }
                else
                {
                  v196 = (double *)((v229 - 1) & v231);
                }
                goto LABEL_364;
              }
LABEL_390:
              v260 = *(_WORD **)(v193 - 232);
              v259 = *(_WORD **)(v193 - 224);
              if (v260 == v259 || !*(_QWORD *)&transform.c)
              {
                v261 = *(_WORD **)(v193 - 232);
LABEL_410:
                if (v261 != v259)
                {
                  v270 = v261 + 1;
                  if (v261 + 1 != v259)
                  {
                    v271 = transform.c;
                    do
                    {
                      if (v271 != 0.0)
                      {
                        v272 = v271;
                        while (*(_QWORD *)(*(_QWORD *)&v272 + 16) != v270 - v260)
                        {
                          v272 = **(double **)&v272;
                          if (v272 == 0.0)
                            goto LABEL_419;
                        }
                        *v261++ = *v270;
                      }
LABEL_419:
                      ++v270;
                    }
                    while (v270 != v259);
                  }
                  if (v259 < v261)
                    goto LABEL_524;
                  if (v261 != v259)
                    *(_QWORD *)(v193 - 224) = v261;
                }
              }
              else
              {
                v261 = *(_WORD **)(v193 - 232);
                do
                {
                  v262 = transform.c;
                  while (*(_QWORD *)(*(_QWORD *)&v262 + 16) != v261 - v260)
                  {
                    v262 = **(double **)&v262;
                    if (v262 == 0.0)
                      goto LABEL_410;
                  }
                  ++v261;
                }
                while (v261 != v259);
              }
              v274 = *(_OWORD **)(v193 - 208);
              v273 = *(_OWORD **)(v193 - 200);
              if (v274 == v273 || !*(_QWORD *)&transform.c)
              {
LABEL_432:
                if (v274 != v273)
                {
                  v277 = v274 + 2;
                  if (v274 + 2 != v273)
                  {
                    do
                    {
                      v278 = transform.c;
                      if (*(_QWORD *)&transform.c)
                      {
                        while (*(_QWORD *)(*(_QWORD *)&v278 + 16) != ((uint64_t)v277 - *(_QWORD *)(v193 - 208)) >> 5)
                        {
                          v278 = **(double **)&v278;
                          if (v278 == 0.0)
                            goto LABEL_439;
                        }
                        v279 = v277[1];
                        *v274 = *v277;
                        v274[1] = v279;
                        v274 += 2;
                      }
LABEL_439:
                      v277 += 2;
                    }
                    while (v277 != v273);
                    v273 = *(_OWORD **)(v193 - 200);
                  }
                  if (v273 < v274)
                    goto LABEL_524;
                  if (v274 != v273)
                    *(_QWORD *)(v193 - 200) = v274;
                }
              }
              else
              {
                v275 = *(_OWORD **)(v193 - 208);
                do
                {
                  v276 = transform.c;
                  while (*(_QWORD *)(*(_QWORD *)&v276 + 16) != ((char *)v275 - (char *)v274) >> 5)
                  {
                    v276 = **(double **)&v276;
                    if (v276 == 0.0)
                    {
                      v274 = v275;
                      goto LABEL_432;
                    }
                  }
                  v275 += 2;
                }
                while (v275 != v273);
              }
              v281 = *(_OWORD **)(v193 - 184);
              v280 = *(_OWORD **)(v193 - 176);
              if (v281 == v280 || !*(_QWORD *)&transform.c)
              {
LABEL_453:
                if (v281 != v280)
                {
                  v284 = v281 + 2;
                  if (v281 + 2 != v280)
                  {
                    do
                    {
                      v285 = transform.c;
                      if (*(_QWORD *)&transform.c)
                      {
                        while (*(_QWORD *)(*(_QWORD *)&v285 + 16) != ((uint64_t)v284 - *(_QWORD *)(v193 - 184)) >> 5)
                        {
                          v285 = **(double **)&v285;
                          if (v285 == 0.0)
                            goto LABEL_460;
                        }
                        v286 = v284[1];
                        *v281 = *v284;
                        v281[1] = v286;
                        v281 += 2;
                      }
LABEL_460:
                      v284 += 2;
                    }
                    while (v284 != v280);
                    v280 = *(_OWORD **)(v193 - 176);
                  }
                  if (v280 < v281)
                    goto LABEL_524;
                  if (v281 != v280)
                    *(_QWORD *)(v193 - 176) = v281;
                }
              }
              else
              {
                v282 = *(_OWORD **)(v193 - 184);
                do
                {
                  v283 = transform.c;
                  while (*(_QWORD *)(*(_QWORD *)&v283 + 16) != ((char *)v282 - (char *)v281) >> 5)
                  {
                    v283 = **(double **)&v283;
                    if (v283 == 0.0)
                    {
                      v281 = v282;
                      goto LABEL_453;
                    }
                  }
                  v282 += 2;
                }
                while (v282 != v280);
              }
              v288 = *(_QWORD **)(v193 - 160);
              v287 = *(_QWORD **)(v193 - 152);
              if (v288 != v287 && *(_QWORD *)&transform.c)
              {
                v289 = *(_QWORD **)(v193 - 160);
                do
                {
                  v290 = transform.c;
                  while (*(_QWORD *)(*(_QWORD *)&v290 + 16) != v289 - v288)
                  {
                    v290 = **(double **)&v290;
                    if (v290 == 0.0)
                      goto LABEL_475;
                  }
                  ++v289;
                }
                while (v289 != v287);
                goto LABEL_488;
              }
              v289 = *(_QWORD **)(v193 - 160);
LABEL_475:
              if (v289 == v287)
              {
LABEL_488:
                std::__hash_table<std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::__unordered_map_hasher<CGPDFFont *,std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::hash<CGPDFFont *>,std::equal_to<CGPDFFont *>,true>,std::__unordered_map_equal<CGPDFFont *,std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::equal_to<CGPDFFont *>,std::hash<CGPDFFont *>,true>,std::allocator<std::__hash_value_type<CGPDFFont *,std::pair<double,double>>>>::~__hash_table((uint64_t)&transform);
                goto LABEL_507;
              }
              v291 = v289 + 1;
              if (v289 + 1 != v287)
              {
                v292 = transform.c;
                do
                {
                  if (v292 != 0.0)
                  {
                    v293 = v292;
                    while (*(_QWORD *)(*(_QWORD *)&v293 + 16) != v291 - v288)
                    {
                      v293 = **(double **)&v293;
                      if (v293 == 0.0)
                        goto LABEL_484;
                    }
                    *v289++ = *v291;
                  }
LABEL_484:
                  ++v291;
                }
                while (v291 != v287);
              }
              if (v287 >= v289)
              {
                if (v289 != v287)
                  *(_QWORD *)(v193 - 152) = v289;
                goto LABEL_488;
              }
LABEL_524:
              __break(1u);
              return;
            }
            if (a7)
            {
              ROSUnicodeCMap = CGPDFFontGetToUnicodeCMap((uint64_t)v311);
              if (!ROSUnicodeCMap)
                ROSUnicodeCMap = (uint64_t)CGPDFFontGetROSUnicodeCMap((char *)v311);
              v295 = v334;
              if (v334 != &v335)
              {
                do
                {
                  v296 = v295[4];
                  if (ROSUnicodeCMap
                    && cmap_vtable
                    && (v297 = *(uint64_t (**)(_QWORD, _QWORD, CGAffineTransform *))(cmap_vtable + 64)) != 0)
                  {
                    v298 = v297(*(_QWORD *)(ROSUnicodeCMap + 16), *(unsigned __int16 *)(a7 + 2 * v296), &transform);
                  }
                  else
                  {
                    v298 = 0;
                  }
                  PageLayoutFactory::ScannerContext::drawGlyphs(CGPDFFont *,CGAffineTransform,CGPoint const*,double const*,unsigned short const*,unsigned short const*,unsigned char const*,unsigned long)::{lambda(unsigned short const*,unsigned long,unsigned long)#1}::operator()(v330, &transform, v296, v298);
                  v299 = (_QWORD *)v295[1];
                  if (v299)
                  {
                    do
                    {
                      v300 = (_QWORD **)v299;
                      v299 = (_QWORD *)*v299;
                    }
                    while (v299);
                  }
                  else
                  {
                    do
                    {
                      v300 = (_QWORD **)v295[2];
                      v41 = *v300 == v295;
                      v295 = v300;
                    }
                    while (!v41);
                  }
                  v295 = v300;
                }
                while (v300 != &v335);
              }
              goto LABEL_299;
            }
          }
          v301 = *(int64x2_t **)a1;
          v302 = *(_QWORD *)(*(_QWORD *)a1 + 152);
          if (*(_QWORD *)(*(_QWORD *)a1 + 144) != v302)
          {
            v303 = v302 - 232;
            std::__destroy_at[abi:se180100]<PageLayoutFactory::TextChunk,0>(v302 - 232);
            v301[9].i64[1] = v303;
LABEL_507:
            std::__tree<unsigned long>::destroy(v335);
            if (cf)
              CFRelease(cf);
            return;
          }
          goto LABEL_524;
        }
        v135 = *(_QWORD *)(*k + 8);
        if ((v121 & (v121 - 1)) != 0)
        {
          if (v135 >= v121)
            v135 %= v121;
        }
        else
        {
          v135 &= v121 - 1;
        }
        v134 = (_QWORD *)(*v117 + 8 * v135);
      }
      *v134 = k;
      goto LABEL_224;
    }
    if (a2)
      v123 = *(const char **)(a2 + 32);
    else
      v123 = 0;
    pdf_error("Failed to determine ascent and decent for font: %s\n", v123);
  }
}

void sub_184AC7F04(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *PageLayoutFactory::TextChunk::TextChunk(PageLayoutFactory::TextChunk *this, unint64_t a2, double a3, double a4, CGFont *a5, double a6, double a7, CGSize a8, uint64_t a9, char a10, uint64_t a11)
{
  CGFloat height;
  CGFloat width;
  char *v23;
  char *result;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;

  height = a8.height;
  width = a8.width;
  v23 = std::vector<unsigned short>::vector(this, a2);
  std::vector<CGRect>::vector((_QWORD *)v23 + 3, a2);
  std::vector<CGRect>::vector((_QWORD *)this + 6, a2);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  if (a2)
  {
    result = std::vector<unsigned long>::__vallocate[abi:se180100]((_QWORD *)this + 9, a2);
    v25 = (_QWORD *)*((_QWORD *)this + 10);
    v26 = &v25[a2];
    v27 = 8 * a2;
    while (v25)
    {
      *v25++ = 0;
      v27 -= 8;
      if (!v27)
      {
        *((_QWORD *)this + 10) = v26;
        goto LABEL_6;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_6:
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 13) = 0;
    *((_QWORD *)this + 14) = 0;
    *((double *)this + 15) = a3;
    *((double *)this + 16) = a4;
    *((_QWORD *)this + 17) = a5;
    *((double *)this + 18) = a6;
    *((double *)this + 19) = a7;
    *((CGFloat *)this + 20) = width;
    *((CGFloat *)this + 21) = height;
    *((_QWORD *)this + 22) = a9;
    *(CGRect *)((char *)this + 184) = CGRectNull;
    *((_BYTE *)this + 216) = a10;
    *((_QWORD *)this + 28) = a11;
    std::vector<unsigned short>::reserve((void **)this + 12, a2);
    return (char *)this;
  }
  return result;
}

void sub_184AC80E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 80) = v6;
    operator delete(v6);
  }
  v7 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 56) = v7;
    operator delete(v7);
  }
  v8 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v8;
    operator delete(v8);
  }
  v9 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v9;
    operator delete(v9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;

  v4 = (uint64_t **)result;
  v6 = (uint64_t **)(result + 1);
  v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(result + 1);
LABEL_9:
    v9 = (uint64_t *)operator new(0x28uLL);
    v9[4] = a3;
    return std::__tree<unsigned long>::__insert_node_at(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

void std::__destroy_at[abi:se180100]<PageLayoutFactory::TextChunk,0>(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  if (a1)
  {
    v2 = *(void **)(a1 + 96);
    if (v2)
    {
      *(_QWORD *)(a1 + 104) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 72);
    if (v3)
    {
      *(_QWORD *)(a1 + 80) = v3;
      operator delete(v3);
    }
    v4 = *(void **)(a1 + 48);
    if (v4)
    {
      *(_QWORD *)(a1 + 56) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(a1 + 24);
    if (v5)
    {
      *(_QWORD *)(a1 + 32) = v5;
      operator delete(v5);
    }
    v6 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v6;
      operator delete(v6);
    }
  }
  else
  {
    __break(1u);
  }
}

void std::vector<unsigned short>::resize(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *i;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v5 = *a1;
  v4 = a1[1];
  v6 = (v4 - *a1) >> 1;
  if (a2 <= v6)
  {
    if (a2 < v6)
      a1[1] = &v5[2 * a2];
    return;
  }
  v7 = a1[2];
  if (a2 - v6 <= (v7 - v4) >> 1)
  {
    v21 = &v4[2 * (a2 - v6)];
    v22 = 2 * a2 - 2 * v6;
    while (v4)
    {
      *(_WORD *)v4 = 0;
      v4 += 2;
      v22 -= 2;
      if (!v22)
      {
        a1[1] = v21;
        return;
      }
    }
LABEL_25:
    __break(1u);
LABEL_26:
    std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
  }
  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_26;
  v8 = v7 - v5;
  if (v7 - v5 <= a2)
    v9 = a2;
  else
    v9 = v7 - v5;
  if (v8 >= 0x7FFFFFFFFFFFFFFELL)
    v10 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<unsigned short>>(v10);
  v12 = &v11[2 * v6];
  v14 = &v11[2 * v13];
  v15 = &v11[2 * a2];
  v16 = v12;
  v17 = 2 * a2 - 2 * v6;
  do
  {
    if (!v16)
      goto LABEL_25;
    *(_WORD *)v16 = 0;
    v16 += 2;
    v17 -= 2;
  }
  while (v17);
  v18 = *a1;
  for (i = a1[1]; i != v18; i -= 2)
  {
    v20 = *((_WORD *)i - 1);
    *((_WORD *)v12 - 1) = v20;
    v12 -= 2;
  }
  *a1 = v12;
  a1[1] = v15;
  a1[2] = v14;
  if (v18)
    operator delete(v18);
}

void PageLayoutFactory::ScannerContext::drawGlyphs(CGPDFFont *,CGAffineTransform,CGPoint const*,double const*,unsigned short const*,unsigned short const*,unsigned char const*,unsigned long)::{lambda(unsigned short const*,unsigned long,unsigned long)#1}::operator()(uint64_t *a1, _WORD *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  int v11;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  __int16 v16;
  _QWORD *v17;
  unint64_t v18;
  _WORD *v19;
  _WORD *v20;
  _QWORD *v21;
  unint64_t v22;
  _WORD *v23;
  _WORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *k;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *i;
  __int16 v48;
  _QWORD *v49;
  unint64_t v50;
  _WORD *v51;
  _WORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *j;
  __int16 v64;
  uint64_t v65;
  unint64_t v66;
  void **v67;

  if (a4)
  {
    v5 = a4;
    v6 = a2;
    v66 = a3;
    v7 = *a1;
    v8 = 2 * a4;
    v9 = 2 * a4;
    v10 = a2;
    while (1)
    {
      v11 = MEMORY[0x186DC3438](*v10);
      if (v11 == 1 || v11 == 13)
        break;
      ++v10;
      v9 -= 2;
      if (!v9)
      {
        v67 = (void **)(a1[1] + 96);
        do
        {
          std::back_insert_iterator<std::vector<unsigned short>>::operator=[abi:se180100](&v67, v6++);
          v8 -= 2;
        }
        while (v8);
        goto LABEL_71;
      }
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v7 + 8) + 8) = 1;
    v13 = v5 - 1;
    if ((int)v5 - 1 >= 0)
    {
      v14 = v5;
      do
      {
        if (v13
          && (v15 = v14 - 2, v16 = v6[v15], (v16 & 0xFC00) == 0xD800)
          && (v6[v13] & 0xFC00) == 0xDC00)
        {
          v17 = (_QWORD *)a1[1];
          v19 = (_WORD *)v17[13];
          v18 = v17[14];
          if ((unint64_t)v19 >= v18)
          {
            v37 = v17[12];
            v38 = (uint64_t)v19 - v37;
            if ((uint64_t)v19 - v37 <= -3)
              goto LABEL_77;
            v39 = v38 >> 1;
            v40 = v18 - v37;
            if (v40 <= (v38 >> 1) + 1)
              v41 = v39 + 1;
            else
              v41 = v40;
            if (v40 >= 0x7FFFFFFFFFFFFFFELL)
              v42 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v42 = v41;
            if (!v42)
              goto LABEL_76;
            v43 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<unsigned short>>(v42);
            if (!v43)
              goto LABEL_76;
            v45 = &v43[2 * v39];
            *(_WORD *)v45 = v6[v15];
            v20 = v45 + 2;
            v46 = (char *)v17[12];
            for (i = (char *)v17[13]; i != v46; i -= 2)
            {
              v48 = *((_WORD *)i - 1);
              *((_WORD *)v45 - 1) = v48;
              v45 -= 2;
            }
            v17[12] = v45;
            v17[13] = v20;
            v17[14] = &v43[2 * v44];
            if (v46)
              operator delete(v46);
          }
          else
          {
            if (!v19)
              goto LABEL_76;
            *v19 = v16;
            v20 = v19 + 1;
          }
          v17[13] = v20;
          v49 = (_QWORD *)a1[1];
          v51 = (_WORD *)v49[13];
          v50 = v49[14];
          if ((unint64_t)v51 >= v50)
          {
            v53 = v49[12];
            v54 = (uint64_t)v51 - v53;
            if ((uint64_t)v51 - v53 <= -3)
              goto LABEL_77;
            v55 = v54 >> 1;
            v56 = v50 - v53;
            if (v56 <= (v54 >> 1) + 1)
              v57 = v55 + 1;
            else
              v57 = v56;
            if (v56 >= 0x7FFFFFFFFFFFFFFELL)
              v58 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v58 = v57;
            if (!v58)
              goto LABEL_76;
            v59 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<unsigned short>>(v58);
            if (!v59)
              goto LABEL_76;
            v61 = &v59[2 * v55];
            *(_WORD *)v61 = v6[v13];
            v52 = v61 + 2;
            v62 = (char *)v49[12];
            for (j = (char *)v49[13]; j != v62; j -= 2)
            {
              v64 = *((_WORD *)j - 1);
              *((_WORD *)v61 - 1) = v64;
              v61 -= 2;
            }
            v49[12] = v61;
            v49[13] = v52;
            v49[14] = &v59[2 * v60];
            if (v62)
              operator delete(v62);
          }
          else
          {
            if (!v51)
              goto LABEL_76;
            *v51 = v6[v13];
            v52 = v51 + 1;
          }
          v49[13] = v52;
          v13 = v15;
        }
        else
        {
          v21 = (_QWORD *)a1[1];
          v23 = (_WORD *)v21[13];
          v22 = v21[14];
          if ((unint64_t)v23 >= v22)
          {
            v25 = v21[12];
            v26 = (uint64_t)v23 - v25;
            if ((uint64_t)v23 - v25 <= -3)
              goto LABEL_77;
            v27 = v26 >> 1;
            v28 = v22 - v25;
            if (v28 <= (v26 >> 1) + 1)
              v29 = v27 + 1;
            else
              v29 = v28;
            if (v28 >= 0x7FFFFFFFFFFFFFFELL)
              v30 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v30 = v29;
            if (!v30)
              goto LABEL_76;
            v31 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<unsigned short>>(v30);
            if (!v31)
              goto LABEL_76;
            v33 = &v31[2 * v27];
            *(_WORD *)v33 = v6[v13];
            v24 = v33 + 2;
            v34 = (char *)v21[12];
            for (k = (char *)v21[13]; k != v34; k -= 2)
            {
              v36 = *((_WORD *)k - 1);
              *((_WORD *)v33 - 1) = v36;
              v33 -= 2;
            }
            v21[12] = v33;
            v21[13] = v24;
            v21[14] = &v31[2 * v32];
            if (v34)
              operator delete(v34);
          }
          else
          {
            if (!v23)
              goto LABEL_76;
            *v23 = v6[v13];
            v24 = v23 + 1;
          }
          v21[13] = v24;
        }
        v14 = v13--;
      }
      while ((v13 & 0x80000000) == 0);
    }
LABEL_71:
    v65 = *(_QWORD *)(a1[1] + 72);
    a3 = v66;
    if (v66 >= (*(_QWORD *)(a1[1] + 80) - v65) >> 3)
    {
LABEL_76:
      __break(1u);
LABEL_77:
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
    }
  }
  else
  {
    v65 = *(_QWORD *)(a1[1] + 72);
    if (a3 >= (*(_QWORD *)(a1[1] + 80) - v65) >> 3)
      goto LABEL_76;
    v5 = 0;
  }
  *(_QWORD *)(v65 + 8 * a3) = v5;
}

void std::__tree<unsigned long>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<unsigned long>::destroy(*a1);
    std::__tree<unsigned long>::destroy(a1[1]);
    operator delete(a1);
  }
}

void *std::__allocate_at_least[abi:se180100]<std::allocator<unsigned short>>(uint64_t a1)
{
  if (a1 < 0)
    std::__throw_bad_array_new_length[abi:se180100]();
  return operator new(2 * a1);
}

void ***std::back_insert_iterator<std::vector<unsigned short>>::operator=[abi:se180100](void ***a1, _WORD *a2)
{
  void **v4;
  unint64_t v5;
  _WORD *v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *i;
  __int16 v19;

  v4 = *a1;
  v6 = (*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 < v5)
  {
    if (v6)
    {
      *v6 = *a2;
      v7 = v6 + 1;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v8 = (char *)v6 - (_BYTE *)*v4;
  if (v8 <= -3)
    goto LABEL_20;
  v9 = v8 >> 1;
  v10 = v5 - (_QWORD)*v4;
  if (v10 <= (v8 >> 1) + 1)
    v11 = v9 + 1;
  else
    v11 = v10;
  if (v10 >= 0x7FFFFFFFFFFFFFFELL)
    v12 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v12 = v11;
  if (!v12 || (v13 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<unsigned short>>(v12)) == 0)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
  }
  v15 = &v13[2 * v14];
  v16 = &v13[2 * v9];
  *(_WORD *)v16 = *a2;
  v7 = v16 + 2;
  v17 = (char *)*v4;
  for (i = (char *)v4[1]; i != v17; i -= 2)
  {
    v19 = *((_WORD *)i - 1);
    *((_WORD *)v16 - 1) = v19;
    v16 -= 2;
  }
  *v4 = v16;
  v4[1] = v7;
  v4[2] = v15;
  if (v17)
    operator delete(v17);
LABEL_18:
  v4[1] = v7;
  return a1;
}

uint64_t *std::__tree_balance_after_insert[abi:se180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t std::__split_buffer<PageLayoutFactory::TextChunk>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 232;
    std::__destroy_at[abi:se180100]<PageLayoutFactory::TextChunk,0>(i - 232);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *std::vector<unsigned short>::vector(_QWORD *a1, uint64_t a2)
{
  char *result;
  _WORD *v5;
  _WORD *v6;
  uint64_t v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (!a2)
    return (char *)a1;
  result = std::vector<unsigned short>::__vallocate[abi:se180100](a1, a2);
  v5 = (_WORD *)a1[1];
  v6 = &v5[a2];
  v7 = 2 * a2;
  while (v5)
  {
    *v5++ = 0;
    v7 -= 2;
    if (!v7)
    {
      a1[1] = v6;
      return (char *)a1;
    }
  }
  __break(1u);
  return result;
}

void sub_184AC8A24(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<CGRect>::vector(_QWORD *a1, unint64_t a2)
{
  char *result;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (!a2)
    return (char *)a1;
  result = std::vector<CGRect>::__vallocate[abi:se180100](a1, a2);
  v5 = (_OWORD *)a1[1];
  v6 = &v5[2 * a2];
  v7 = 32 * a2;
  while (v5)
  {
    *v5 = 0uLL;
    v5[1] = 0uLL;
    v5 += 2;
    v7 -= 32;
    if (!v7)
    {
      a1[1] = v6;
      return (char *)a1;
    }
  }
  __break(1u);
  return result;
}

void sub_184AC8AA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned short>::reserve(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  __int16 v11;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 1)
  {
    if ((a2 & 0x8000000000000000) != 0)
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<unsigned short>>(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFFELL];
    v7 = &v4[2 * v6];
    v8 = (char *)*a1;
    v9 = (char *)a1[1];
    v10 = v5;
    if (v9 != *a1)
    {
      v10 = v5;
      do
      {
        v11 = *((_WORD *)v9 - 1);
        v9 -= 2;
        *((_WORD *)v10 - 1) = v11;
        v10 -= 2;
      }
      while (v9 != v8);
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

char *std::vector<unsigned long>::__vallocate[abi:se180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
  result = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

char *std::vector<CGRect>::__vallocate[abi:se180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
  result = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<CGRect>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void *std::__allocate_at_least[abi:se180100]<std::allocator<CGRect>>(unint64_t a1)
{
  if (a1 >> 59)
    std::__throw_bad_array_new_length[abi:se180100]();
  return operator new(32 * a1);
}

char *std::vector<unsigned short>::__vallocate[abi:se180100](_QWORD *a1, uint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
  result = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<unsigned short>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

void std::__hash_table<std::__hash_value_type<CGPDFFont *,unsigned long>,std::__unordered_map_hasher<CGPDFFont *,std::__hash_value_type<CGPDFFont *,unsigned long>,std::hash<CGPDFFont *>,std::equal_to<CGPDFFont *>,true>,std::__unordered_map_equal<CGPDFFont *,std::__hash_value_type<CGPDFFont *,unsigned long>,std::equal_to<CGPDFFont *>,std::hash<CGPDFFont *>,true>,std::allocator<std::__hash_value_type<CGPDFFont *,unsigned long>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime >= *(_QWORD *)&v4)
      return;
    if (!prime)
    {
      v16 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v16)
        operator delete(v16);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:se180100]();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v9 = v8[1];
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime)
        v9 %= prime;
    }
    else
    {
      v9 &= prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = a1 + 16;
    v14 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime)
            v15 %= prime;
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v15))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *v8 = *v14;
          *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v15) = v14;
          v14 = v8;
        }
        v15 = v9;
LABEL_31:
        v8 = v14;
        v14 = (_QWORD *)*v14;
        v9 = v15;
      }
      while (v14);
    }
  }
}

const void **std::pair<applesauce::CF::ObjectRef<CGFont *> const,double>::~pair(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **applesauce::CF::ObjectRef<CGFont *>::~ObjectRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t *std::vector<std::pair<std::string,unsigned int>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 32;
      v6 = *(_OWORD *)(v3 - 32);
      *(_QWORD *)(v4 - 16) = *(_QWORD *)(v3 - 16);
      *(_OWORD *)(v4 - 32) = v6;
      *(_QWORD *)(v3 - 24) = 0;
      *(_QWORD *)(v3 - 16) = 0;
      *(_QWORD *)(v3 - 32) = 0;
      *(_DWORD *)(v4 - 8) = *(_DWORD *)(v3 - 8);
      v4 -= 32;
      v3 -= 32;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v7 = *result;
  *result = v5;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::pair<std::string,unsigned int>>::~__split_buffer(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 4;
      *(_QWORD *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v4);
        v4 = *(void ***)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<applesauce::CF::ObjectRef<CGFont *>,double>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<applesauce::CF::ObjectRef<CGFont *>,double>,void *>>>>::reset[abi:se180100](uint64_t a1)
{
  const void **v1;

  v1 = *(const void ***)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:se180100]<std::pair<applesauce::CF::ObjectRef<CGFont *> const,double>,0>(v1 + 2);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:se180100]<std::pair<applesauce::CF::ObjectRef<CGFont *> const,double>,0>(const void **a1)
{
  const void *v1;

  if (a1)
  {
    v1 = *a1;
    if (v1)
      CFRelease(v1);
  }
  else
  {
    __break(1u);
  }
}

void PageLayoutFactory::ScannerContext::set_color(PageLayoutFactory::ScannerContext *this, CGPDFScanner *a2, PageLayoutFactory::ScannerContext *a3, CGColorSpace *a4)
{
  CGColorSpaceRef ColorSpace;
  uint64_t v7;
  uint64_t v8;
  unint64_t FillColor;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CGFloat *v17;
  CGFloat *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  CGColorRef v22;
  CGPDFReal value;

  ColorSpace = a3;
  if (a3)
  {
LABEL_2:
    v7 = *(_QWORD *)(*((_QWORD *)ColorSpace + 3) + 40);
    v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) > 0x1FFFFFFFFFFFFFFELL)
      return;
    goto LABEL_12;
  }
  FillColor = CGPDFGStateGetFillColor(*((_QWORD *)a2 + 3));
  if (FillColor)
  {
    if ((FillColor & 0x8000000000000000) != 0)
    {
      ColorSpace = CGTaggedColorGetColorSpace(FillColor, v10, v11, v12, v13, v14, v15, v16);
      if (ColorSpace)
        goto LABEL_2;
    }
    else
    {
      ColorSpace = *(CGColorSpaceRef *)(FillColor + 24);
      if (ColorSpace)
        goto LABEL_2;
    }
    v7 = 0;
  }
  else
  {
    v7 = 0;
    ColorSpace = 0;
  }
  v8 = 1;
LABEL_12:
  v17 = (CGFloat *)malloc_type_malloc(8 * v8, 0xC68A489AuLL);
  if (v17)
  {
    v18 = v17;
    if (v7)
    {
      v19 = v7 - 1;
      while (1)
      {
        value = 0.0;
        if (!CGPDFScannerPopNumber(this, &value))
          break;
        v18[v19--] = value;
        if (v19 == -1)
          goto LABEL_17;
      }
      pdf_error("missing or invalid arguments for color operator.");
    }
    else
    {
LABEL_17:
      v20 = *((_QWORD *)a2 + 3);
      if (v20)
        v21 = *(double *)(v20 + 200);
      else
        v21 = 1.0;
      v18[v7] = v21;
      v22 = CGColorCreate(ColorSpace, v18);
      CGPDFGStateSetFillColor(*((_QWORD *)a2 + 3), v22);
      if (v22)
        CFRelease(v22);
    }
    free(v18);
  }
}

_QWORD *std::construct_at[abi:se180100]<applesauce::CF::ObjectRef<CGPath *>,applesauce::CF::ObjectRef<CGPath *> const&,applesauce::CF::ObjectRef<CGPath *>*>(_QWORD *result, CFTypeRef cf)
{
  _QWORD *v3;

  if (result)
  {
    v3 = result;
    if (cf)
      CFRetain(cf);
    *v3 = cf;
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t compareAnchorXIncreasingYDecreasing(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v9;
  double v10;

  v2 = *a1;
  v3 = *(double *)(*a1 + 96);
  v4 = *a2;
  v5 = *(double *)(*a2 + 96);
  if (v3 < v5)
    return 0xFFFFFFFFLL;
  if (v3 > v5)
    return 1;
  v6 = *(double *)(v2 + 104);
  v7 = *(double *)(v4 + 104);
  if (v6 > v7)
    return 0xFFFFFFFFLL;
  if (v6 < v7)
    return 1;
  v9 = *(double *)(v2 + 144);
  v10 = *(double *)(v4 + 144);
  if (v9 >= v10)
    return v9 > v10;
  else
    return 0xFFFFFFFFLL;
}

uint64_t compareAnchorYDecreasingXIncreasing(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v9;
  double v10;

  v2 = *a1;
  v3 = *(double *)(*a1 + 104);
  v4 = *a2;
  v5 = *(double *)(*a2 + 104);
  if (v3 > v5)
    return 0xFFFFFFFFLL;
  if (v3 < v5)
    return 1;
  v6 = *(double *)(v2 + 96);
  v7 = *(double *)(v4 + 96);
  if (v6 < v7)
    return 0xFFFFFFFFLL;
  if (v6 > v7)
    return 1;
  v9 = *(double *)(v2 + 144);
  v10 = *(double *)(v4 + 144);
  if (v9 >= v10)
    return v9 > v10;
  else
    return 0xFFFFFFFFLL;
}

uint64_t compareAnchorYDecreasingXIncreasingApprox(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v7;
  double v8;

  v2 = *(double *)(*(_QWORD *)a1 + 96);
  v3 = *(double *)(*(_QWORD *)a1 + 104);
  v4 = *(double *)(*(_QWORD *)a2 + 96);
  v5 = *(double *)(*(_QWORD *)a2 + 104);
  if (vabdd_f64(v3, v5) > 0.2)
  {
    if (v3 > v5)
      return 0xFFFFFFFFLL;
    if (v3 < v5)
      return 1;
  }
  if (v2 < v4)
    return 0xFFFFFFFFLL;
  if (v2 > v4)
    return 1;
  v7 = *(double *)(*(_QWORD *)a1 + 144);
  v8 = *(double *)(*(_QWORD *)a2 + 144);
  if (v7 < v8)
    return 0xFFFFFFFFLL;
  return v7 > v8;
}

void PDFShadingRelease(_QWORD *a1)
{
  const void *v3;

  if (a1)
  {
    if ((*(_DWORD *)a1)-- == 1)
    {
      v3 = (const void *)a1[2];
      if (v3)
        CFRelease(v3);
      free(a1);
    }
  }
}

_QWORD *CGFontGetGlyphBBoxesForStyle(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v11;
  _BYTE *font_info;

  if (result)
  {
    v11 = result;
    font_info = get_font_info(result);
    if (font_info)
    {
      if (font_info[104])
        a3 = a3 & 0xFFFFFFFE;
      else
        a3 = a3;
    }
    return (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11[2] + 312))(v11[14], a2, a3, a4, a5, a6);
  }
  return result;
}

double CGFontGetContainingBoundingBoxForGlyphs(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  CGFloat width;
  double x;
  uint64_t v5;
  CGFloat height;
  CGFloat y;
  _BYTE *font_info;
  _BOOL4 v11;
  CGRect v13;
  CGRect v14;
  CGRect v15;

  width = 0.0;
  x = INFINITY;
  if (a1)
  {
    v5 = a3;
    height = 0.0;
    if (a3)
    {
      memset(&v13, 0, sizeof(v13));
      y = INFINITY;
      x = INFINITY;
      do
      {
        font_info = get_font_info(a1);
        if (font_info)
          v11 = font_info[104] != 0;
        else
          v11 = 0;
        if ((*(unsigned int (**)(_QWORD, _QWORD, BOOL, uint64_t, uint64_t, CGRect *))(a1[2] + 312))(a1[14], 0, !v11, a2, 1, &v13))
        {
          v14.origin.x = x;
          v14.origin.y = y;
          v14.size.width = width;
          v14.size.height = height;
          v15 = CGRectUnion(v14, v13);
          x = v15.origin.x;
          y = v15.origin.y;
          width = v15.size.width;
          height = v15.size.height;
        }
        a2 += 2;
        --v5;
      }
      while (v5);
    }
  }
  return x;
}

uint64_t CGFontGetGlyphVerticalAdvances(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(result + 16) + 320))(*(_QWORD *)(result + 112));
  return result;
}

uint64_t CGFontGetGlyphVerticalOffsets(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(result + 16) + 328))(*(_QWORD *)(result + 112));
  return result;
}

CGGlyph CGFontGetGlyphWithGlyphName(CGFontRef font, CFStringRef name)
{
  CFIndex Length;
  CFIndex v5;
  void *v6;
  CGGlyph v8;
  void *v9;

  Length = CFStringGetLength(name);
  v5 = CFStringGetMaximumSizeForEncoding(Length, 0x600u) + 1;
  v6 = malloc_type_malloc(v5, 0x8E9959A7uLL);
  v9 = v6;
  if (CFStringGetCString(name, (char *)v6, v5, 0x600u))
  {
    v8 = 0;
    if (font)
    {
      (*(void (**)(_QWORD, void **, CGGlyph *, uint64_t))(*((_QWORD *)font + 2) + 280))(*((_QWORD *)font + 14), &v9, &v8, 1);
      v6 = v9;
    }
    free(v6);
    return v8;
  }
  else
  {
    free(v6);
    return 0;
  }
}

uint64_t CGFontGetGlyphsForGlyphNames(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(result + 16) + 280))(*(_QWORD *)(result + 112));
  return result;
}

CFStringRef CGFontCopyGlyphNameForGlyph(CGFontRef font, CGGlyph glyph)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v6;
  char *v7;

  if (!font)
  {
    v7 = (char *)malloc_type_malloc(1uLL, 0x1135AE3FuLL);
    goto LABEL_7;
  }
  v2 = glyph;
  v4 = (*(uint64_t (**)(_QWORD))(*((_QWORD *)font + 2) + 288))(*((_QWORD *)font + 14));
  v5 = v4 + 1;
  if (v4 != -1)
  {
    v7 = (char *)malloc_type_malloc(v4 + 1, 0x1135AE3FuLL);
    if ((*(unsigned int (**)(_QWORD, uint64_t, char *, uint64_t))(*((_QWORD *)font + 2) + 296))(*((_QWORD *)font + 14), v2, v7, v5))
    {
      v6 = CFStringCreateWithCString(0, v7, 0x600u);
LABEL_8:
      free(v7);
      return v6;
    }
LABEL_7:
    v6 = 0;
    goto LABEL_8;
  }
  return 0;
}

uint64_t CGFontGetGlyphNameMaxLength(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(result + 16) + 288))(*(_QWORD *)(result + 112));
  return result;
}

uint64_t CGFontGetGlyphNameForGlyph(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(result + 16) + 296))(*(_QWORD *)(result + 112));
  return result;
}

uint64_t CGFontGetGlyphForGlyphName(uint64_t result, uint64_t a2)
{
  unsigned __int16 v2;
  uint64_t v3;

  v3 = a2;
  v2 = 0;
  if (result)
  {
    (*(void (**)(_QWORD, uint64_t *, unsigned __int16 *, uint64_t))(*(_QWORD *)(result + 16) + 280))(*(_QWORD *)(result + 112), &v3, &v2, 1);
    return v2;
  }
  return result;
}

void PBPageLayoutPkg::PBRange::~PBRange(PBPageLayoutPkg::PBRange *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x186DC23C4);
}

uint64_t PBPageLayoutPkg::PBRange::readFrom(PBPageLayoutPkg::PBRange *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  uint64_t result;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unint64_t v38;
  char v39;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)a2 + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_30;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 24) |= 1u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v36 = 0;
          v37 = 0;
          v30 = 0;
          if (v2 <= v26)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v26)
            {
              v30 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_64;
            }
            v38 = v26 + 1;
            v39 = *(_BYTE *)(v27 + v26);
            *((_QWORD *)a2 + 1) = v38;
            v30 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0)
              break;
            v36 += 7;
            v26 = v38;
            v14 = v37++ > 8;
            if (v14)
            {
              v30 = 0;
              goto LABEL_63;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v30 = 0;
LABEL_63:
          v3 = v38;
        }
        else
        {
          v28 = 0;
          v29 = 0;
          v30 = 0;
          while (1)
          {
            v3 = v26 + 1;
            *((_QWORD *)a2 + 1) = v26 + 1;
            v31 = *(_BYTE *)(v27 + v26);
            v30 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v26 = v3;
            v14 = v29++ > 8;
            if (v14)
            {
              v30 = 0;
              break;
            }
          }
        }
LABEL_64:
        *((_QWORD *)this + 1) = v30;
      }
      else if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 24) |= 2u;
        v19 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v20 = *(_QWORD *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v2)
        {
          v32 = 0;
          v33 = 0;
          v23 = 0;
          if (v2 <= v19)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v19)
            {
              v23 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_60;
            }
            v34 = v19 + 1;
            v35 = *(_BYTE *)(v20 + v19);
            *((_QWORD *)a2 + 1) = v34;
            v23 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0)
              break;
            v32 += 7;
            v19 = v34;
            v14 = v33++ > 8;
            if (v14)
            {
              v23 = 0;
              goto LABEL_59;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v23 = 0;
LABEL_59:
          v3 = v34;
        }
        else
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          while (1)
          {
            v3 = v19 + 1;
            *((_QWORD *)a2 + 1) = v19 + 1;
            v24 = *(_BYTE *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0)
              break;
            v21 += 7;
            v19 = v3;
            v14 = v22++ > 8;
            if (v14)
            {
              v23 = 0;
              break;
            }
          }
        }
LABEL_60:
        *((_QWORD *)this + 2) = v23;
      }
      else
      {
LABEL_30:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_30;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t PBPageLayoutPkg::PBRange::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 24);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 24);
  }
  if ((v4 & 1) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t PBPageLayoutPkg::PBRange::formatText(PBPageLayoutPkg::PBRange *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "length");
    v5 = *((_BYTE *)this + 24);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "location");
  return PB::TextFormatter::endObject(a2);
}

char *color_space_state_create_lab(uint64_t a1, char *a2, __int128 *a3, const void *a4, const void *a5)
{
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t i;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __int128 *v18;
  CFTypeRef v19;
  CFTypeRef v20;
  CC_MD5_CTX *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t j;
  uint64_t k;
  __int128 v26;
  __int128 v28;
  unsigned __int8 md[24];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v10 = (char *)malloc_type_calloc(0x70uLL, 1uLL, 0xEAC61AC0uLL);
  v11 = v10;
  if (!v10)
    return v11;
  *(_DWORD *)v10 = 1;
  v10[12] = 1;
  *((_DWORD *)v10 + 2) = 0x10000;
  *(_QWORD *)(v10 + 20) = 0x300000005;
  *((_WORD *)v10 + 7) = 0;
  *((_QWORD *)v10 + 13) = color_space_state_create_lab_lab_vtable;
  *((_DWORD *)v10 + 7) = 3;
  *((_QWORD *)v10 + 9) = 0;
  *((_QWORD *)v10 + 10) = 0;
  *((_QWORD *)v10 + 4) = &xmmword_1850022A8;
  *((_QWORD *)v10 + 5) = 3;
  v12 = (char *)malloc_type_calloc(0x90uLL, 1uLL, 0x6888CC2CuLL);
  *((_QWORD *)v11 + 11) = v12;
  if (!v12)
  {
    free(v11);
    return 0;
  }
  v13 = v12;
  for (i = 0; i != 24; i += 8)
    *(_QWORD *)&v12[i] = *(_QWORD *)(a1 + i);
  v15 = 0;
  v16 = (char *)&default_black_point_17149;
  if (a2)
    v16 = a2;
  do
  {
    *(_QWORD *)&v12[v15 + 24] = *(_QWORD *)&v16[v15];
    v15 += 8;
  }
  while (v15 != 24);
  v17 = 0;
  v18 = &xmmword_185003350;
  if (a3)
    v18 = a3;
  do
  {
    *(_QWORD *)&v12[v17 + 48] = *(_QWORD *)((char *)v18 + v17);
    v17 += 8;
  }
  while (v17 != 32);
  if (a4)
    v19 = CFRetain(a4);
  else
    v19 = 0;
  *((_QWORD *)v13 + 10) = v19;
  if (a5)
    v20 = CFRetain(a5);
  else
    v20 = 0;
  *((_QWORD *)v13 + 11) = v20;
  memset(md, 0, 16);
  v21 = (CC_MD5_CTX *)malloc_type_malloc(0x5CuLL, 0x2062DE7BuLL);
  CC_MD5_Init(v21);
  if (v21)
    CC_MD5_Update(v21, v11 + 20, 4u);
  v22 = 0;
  v23 = *((_QWORD *)v11 + 11);
  do
  {
    if (v21)
      CC_MD5_Update(v21, (const void *)(v23 + v22), 8u);
    v22 += 8;
  }
  while (v22 != 24);
  for (j = 0; j != 24; j += 8)
  {
    if (v21)
      CC_MD5_Update(v21, (const void *)(v23 + 24 + j), 8u);
  }
  for (k = 0; k != 4; ++k)
  {
    while (v21)
    {
      CC_MD5_Update(v21, (const void *)(v23 + 8 * k++ + 48), 8u);
      if (k == 4)
      {
        CC_MD5_Final(md, v21);
        v26 = *(_OWORD *)md;
        goto LABEL_36;
      }
    }
  }
  v26 = 0uLL;
LABEL_36:
  v28 = v26;
  free(v21);
  *(_OWORD *)(v11 + 56) = v28;
  return v11;
}

void lab_finalize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  const void *v10;
  const void *v11;

  v8 = *(_DWORD *)(a1 + 20);
  if (v8 != 5)
    _CGHandleAssert("lab_finalize", 40, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/ColorSpaces/CGColorSpace_Lab.c", "state->type == kCGColorSpaceLAB", "Colorspace not of Lab type. type = %d", a6, a7, a8, v8);
  v9 = *(_QWORD *)(a1 + 88);
  if (v9)
  {
    v10 = *(const void **)(v9 + 80);
    if (v10)
      CFRelease(v10);
    v11 = *(const void **)(v9 + 88);
    if (v11)
      CFRelease(v11);
  }
}

uint64_t lab_get_descriptor(uint64_t a1)
{
  return *(_QWORD *)(a1 + 88);
}

CFTypeRef lab_create_icc_profile_description(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  CFTypeRef result;

  v8 = *(_QWORD *)(a1 + 24);
  if (*(_DWORD *)(v8 + 20) != 5)
    _CGHandleAssert("lab_create_icc_profile_description", 66, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/ColorSpaces/CGColorSpace_Lab.c", "space->state->type == kCGColorSpaceLAB", "Colorspace not of Lab type. type = %d", a6, a7, a8, *(_DWORD *)(v8 + 20));
  result = *(CFTypeRef *)(*(_QWORD *)(v8 + 88) + 88);
  if (result)
    return CFRetain(result);
  return result;
}

__CFString *lab_create_debug_description(_QWORD *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  _QWORD *v4;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  v4 = *(_QWORD **)(a1[3] + 88);
  CFStringAppendFormat(Mutable, 0, CFSTR("%@; white point [%.4f, %.4f, %.4f] range [%.1f %.1f, %.1f %.1f]"),
    v4[10],
    *v4,
    v4[1],
    v4[2],
    v4[6],
    v4[7],
    v4[8],
    v4[9]);
  return Mutable;
}

CGColorSpaceRef CGColorSpaceCreateLab(const CGFloat *whitePoint, const CGFloat *blackPoint, const CGFloat *range)
{
  double v3;
  double v4;
  uint64_t v5;
  unint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  unsigned int *lab;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  CGColorSpace *v24;
  unsigned int v25;
  unsigned int v26;

  if (*whitePoint > 0.9643)
    goto LABEL_30;
  if (*whitePoint < 0.9641)
    goto LABEL_30;
  v3 = whitePoint[1];
  if (v3 > 1.0001)
    goto LABEL_30;
  if (v3 < 0.9999)
    goto LABEL_30;
  v4 = whitePoint[2];
  if (v4 > 0.825 || v4 < 0.8248)
    goto LABEL_30;
  if (blackPoint)
  {
    if (*blackPoint > 0.0001 || *blackPoint < -0.0001)
      goto LABEL_30;
    v5 = 0;
    v6 = 2;
    while (v5 != 2)
    {
      v7 = blackPoint[++v5];
      if (v7 > 0.0001 || v7 < -0.0001)
      {
        v6 = v5 - 1;
        break;
      }
    }
    if (!range || v6 <= 1)
      goto LABEL_30;
  }
  else if (!range)
  {
    goto LABEL_30;
  }
  if (*range > -127.9999 || *range < -128.0001)
  {
LABEL_30:
    lab = (unsigned int *)color_space_state_create_lab((uint64_t)whitePoint, (char *)blackPoint, (__int128 *)range, CFSTR("Lab color space"), CFSTR("Lab Profile"));
    v24 = (CGColorSpace *)CGColorSpaceCreateWithState(lab, v17, v18, v19, v20, v21, v22, v23);
    if (lab)
    {
      do
      {
        v25 = __ldxr(lab);
        v26 = v25 - 1;
      }
      while (__stxr(v26, lab));
      if (!v26)
        color_space_state_dealloc((uint64_t)lab);
    }
    if (v24)
      *((_QWORD *)v24 + 3) = color_space_state_register(*((_BYTE **)v24 + 3));
    return v24;
  }
  v8 = 1;
  while (v8 != 4)
  {
    v9 = v8;
    v10 = range[v8];
    v11 = generic_lab_range[v8];
    v12 = v11 + 0.0001;
    v13 = v11 + -0.0001;
    ++v8;
    if (v10 > v12 || v10 < v13)
    {
      if ((unint64_t)(v9 - 1) < 3)
        goto LABEL_30;
      return CGColorSpaceCreateWithName(CFSTR("kCGColorSpaceGenericLab"));
    }
  }
  return CGColorSpaceCreateWithName(CFSTR("kCGColorSpaceGenericLab"));
}

__n128 CGColorSpaceGetLabData@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, _OWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;

  v5 = *(_QWORD *)(a1 + 24);
  if (*(_DWORD *)(v5 + 20) != 5)
    _CGHandleAssert("CGColorSpaceGetLabData", 209, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/ColorSpaces/CGColorSpace_Lab.c", "space->state->type == kCGColorSpaceLAB", "Colorspace not of Lab type. type = %d", a2, a3, a4, *(_DWORD *)(v5 + 20));
  v6 = *(_QWORD *)(v5 + 88);
  v7 = *(_OWORD *)(v6 + 48);
  a5[2] = *(_OWORD *)(v6 + 32);
  a5[3] = v7;
  v8 = *(_OWORD *)(v6 + 80);
  a5[4] = *(_OWORD *)(v6 + 64);
  a5[5] = v8;
  result = *(__n128 *)v6;
  v10 = *(_OWORD *)(v6 + 16);
  *a5 = *(_OWORD *)v6;
  a5[1] = v10;
  return result;
}

uint64_t cg_cmap_create_with_name(uint64_t a1)
{
  uint64_t (**v2)(uint64_t);

  v2 = (uint64_t (**)(uint64_t))cmap_vtable;
  if ((cmap_vtable
     || (pthread_once(&load_vtable_once, do_load_vtable), (v2 = (uint64_t (**)(uint64_t))cmap_vtable) != 0))
    && *v2)
  {
    return (*v2)(a1);
  }
  else
  {
    return 0;
  }
}

void do_load_vtable()
{
  uint64_t v0;
  const char **i;

  v0 = 0;
  for (i = (const char **)&links; strcmp("cg_cmap_library_link_symbol", *i); i += 2)
  {
    if (++v0 == 7)
    {
      pdf_error("no CMap library available.");
      return;
    }
  }
  cmap_vtable = ((uint64_t (*)(void))(&links)[2 * v0 + 1])();
}

double *CGPDFCharacterCreate(__int16 a1, __int16 a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  double *result;

  result = (double *)malloc_type_malloc(0x60uLL, 0x1000040FA0C22F2uLL);
  if (result)
  {
    *(_QWORD *)result = 1;
    *((_WORD *)result + 4) = a1;
    result[2] = a3;
    result[3] = a4;
    result[4] = a5;
    result[5] = a6;
    result[6] = a7;
    result[7] = a8;
    result[8] = a9;
    result[9] = a10;
    *((_WORD *)result + 40) = a2;
    *((_QWORD *)result + 11) = a17;
  }
  return result;
}

_QWORD *pdf_source_create_png_filter(const void *a1, CGPDFDictionary *a2)
{
  int64x2_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  _QWORD *result;
  CGPDFInteger value;

  v4 = (int64x2_t *)malloc_type_calloc(1uLL, 0x38uLL, 0x10300405CAD4B32uLL);
  v4->i32[2] = 1;
  v4[2].i64[0] = 8;
  v4[1] = vdupq_n_s64(1uLL);
  if (a2)
  {
    value = 0;
    if (CGPDFDictionaryGetInteger(a2, "Predictor", &value))
    {
      if ((unint64_t)(value - 10) >= 6 && (unint64_t)(value - 1) > 1)
        pdf_error("/%s is outside the range of allowed values.", "Predictor");
      else
        v4->i32[2] = value;
    }
    if (CGPDFDictionaryGetInteger(a2, "Colors", &value))
    {
      if (value < 1)
        pdf_error("/%s is outside the range of allowed values.", "Colors");
      else
        v4[1].i64[0] = value;
    }
    if (CGPDFDictionaryGetInteger(a2, "BitsPerComponent", &value))
    {
      if ((unint64_t)value <= 0x10 && ((1 << value) & 0x10116) != 0)
        v4[2].i64[0] = value;
      else
        pdf_error("/%s is outside the range of allowed values.", "BitsPerComponent");
    }
    if (CGPDFDictionaryGetInteger(a2, "Columns", &value))
    {
      if (value < 1)
      {
        pdf_error("/%s is outside the range of allowed values.", "Columns");
        if (!a1)
          goto LABEL_19;
        goto LABEL_18;
      }
      v4[1].i64[1] = value;
    }
  }
  if (a1)
LABEL_18:
    CFRetain(a1);
LABEL_19:
  v4->i64[0] = (uint64_t)a1;
  v5 = v4[1].u64[0];
  v6 = v4[2].u64[0];
  if (v5 <= 0xFFFFFFFFFFFFFFF8 / v6
    && (v7 = v6 * v5, v4[2].i64[1] = (v7 + 7) >> 3, v8 = v4[1].u64[1], v8 <= 0xFFFFFFFFFFFFFFF8 / v7)
    && (v9 = (v8 * v7 + 7) >> 3,
        v4[3].i64[0] = (uint64_t)malloc_type_calloc(1uLL, v9, 0x52B0FB7uLL),
        (result = CGPDFSourceCreateInternal(v9)) != 0))
  {
    *((_BYTE *)result + 209) = 1;
    *((_OWORD *)result + 3) = pdf_source_create_png_filter_callbacks;
    *((_OWORD *)result + 4) = *(_OWORD *)&off_1E162CD00;
    result[10] = v4;
  }
  else
  {
    png_filter_finalize((void **)v4);
    return 0;
  }
  return result;
}

void png_filter_finalize(void **a1)
{
  void *v2;

  if (a1)
  {
    v2 = *a1;
    if (v2)
      CFRelease(v2);
    free(a1[6]);
    free(a1);
  }
}

uint64_t png_filter_rewind(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return CGPDFSourceRewind(*a1, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t png_filter_refill(uint64_t a1, _BYTE *a2, size_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t result;
  char *v20;
  size_t v21;
  _BYTE *v22;
  size_t v23;
  _BYTE *v24;
  size_t v25;
  char v26;
  _BYTE *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  unsigned int v30;
  unsigned __int8 *v31;
  size_t v32;
  unint64_t v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;

  v11 = CGPDFSourceGetc(*(_QWORD *)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if (v11 == -1)
    return 0;
  v17 = v11;
  v18 = CGPDFSourceRead(*(_QWORD *)a1, (uint64_t)a2, a3, v12, v13, v14, v15, v16);
  result = 0;
  if (a2 && v18)
  {
    if (a3 > v18)
      bzero(&a2[v18], a3 - v18);
    v21 = *(_QWORD *)(a1 + 40);
    v20 = *(char **)(a1 + 48);
    switch(v17)
    {
      case 0:
        break;
      case 1:
        if (v21 < a3)
        {
          v22 = a2;
          v23 = a3;
          do
          {
            v22[v21] += *v22;
            --v23;
            ++v22;
          }
          while (v21 != v23);
        }
        break;
      case 2:
        if (a3)
        {
          v24 = a2;
          v25 = a3;
          do
          {
            v26 = *v20++;
            *v24++ += v26;
            --v25;
          }
          while (v25);
        }
        break;
      case 3:
        if (v21)
        {
          v27 = a2;
          v28 = *(unsigned __int8 **)(a1 + 48);
          v29 = *(_QWORD *)(a1 + 40);
          do
          {
            v30 = *v28++;
            *v27++ += v30 >> 1;
            --v29;
          }
          while (v29);
        }
        if (v21 < a3)
        {
          v31 = a2;
          v32 = a3;
          do
          {
            v31[v21] += (*v31 + v20[v21]) >> 1;
            --v32;
            ++v31;
            ++v20;
          }
          while (v21 != v32);
        }
        break;
      case 4:
        if (a3)
        {
          v33 = 0;
          do
          {
            if (v33 >= v21)
            {
              v34 = a2[v33 - v21];
              v35 = v20[v33 - v21];
            }
            else
            {
              v34 = 0;
              v35 = 0;
            }
            v36 = v20[v33];
            v37 = v36 - v35;
            if (v36 - v35 < 0)
              v37 = v35 - v36;
            v38 = v34 - v35;
            if (v34 - v35 < 0)
              v38 = v35 - v34;
            v39 = v34 + v36 - v35 - v35;
            if (v39 < 0)
              v39 = v35 - (v34 + v36 - v35);
            if (v38 <= v39)
              LOBYTE(v35) = v20[v33];
            if (v37 > v39 || v37 > v38)
              LOBYTE(v34) = v35;
            a2[v33++] += v34;
          }
          while (a3 != v33);
        }
        break;
      default:
        pdf_error("unrecognized PNG predictor: %d", v17);
        break;
    }
    memmove(*(void **)(a1 + 48), a2, a3);
    return v18;
  }
  return result;
}

uint64_t CGPDFShadingType5Init(_QWORD *a1, uint64_t *a2, _OWORD *a3)
{
  uint64_t result;
  _QWORD *v7;
  CGPDFDictionary *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  CGPDFStream *v12;
  CGPDFDataFormat format;
  CGPDFObjectRef v14;
  CGPDFInteger value;

  if (type5_info_getTypeID_onceToken != -1)
    dispatch_once(&type5_info_getTypeID_onceToken, &__block_literal_global_520);
  result = pdf_create_cftype();
  if (result)
  {
    v7 = (_QWORD *)result;
    v14 = 0;
    value = 0;
    format = CGPDFDataFormatRaw;
    *a2 = result;
    *a3 = CGPDFShadingType5Init_type5_callbacks;
    if (a1)
      v8 = (CGPDFDictionary *)a1[3];
    else
      v8 = 0;
    if (!CGPDFDictionaryGetInteger(v8, "BitsPerCoordinate", &value))
    {
      return 0;
    }
    if ((unint64_t)value > 0x20 || ((1 << value) & 0x101011116) == 0)
    {
      return 0;
    }
    v7[3] = value;
    if (!CGPDFDictionaryGetInteger(v8, "BitsPerComponent", &value))
    {
      return 0;
    }
    if ((unint64_t)value > 0x10 || ((1 << value) & 0x11116) == 0)
    {
      return 0;
    }
    v7[4] = value;
    if (!CGPDFDictionaryGetInteger(v8, "VerticesPerRow", &value))
    {
      return 0;
    }
    if ((unint64_t)(value - 0x40000000000000) <= 0xFFC0000000000001)
    {
      return 0;
    }
    v7[5] = value;
    v7[11] = 0;
    if (!CGPDFDictionaryGetObject(v8, "Function", &v14)
      || (result = (uint64_t)CGPDFShadingCreateShadingFunction((uint64_t)v14, 1uLL), (v7[11] = result) != 0))
    {
      if (a1)
        v9 = (_QWORD *)a1[5];
      else
        v9 = 0;
      if (v7[11] && CGColorSpaceGetType(v9) == 7)
      {
        return 0;
      }
      if (v9)
      {
        CFRetain(v9);
        v7[2] = v9;
        if (v7[11])
          v10 = 2;
        else
          v10 = 2 * *(_QWORD *)(v9[3] + 40);
      }
      else
      {
        v7[2] = 0;
        v10 = 2 * (v7[11] != 0);
      }
      v11 = malloc_type_malloc(8 * (v10 + 4), 0x566C45D1uLL);
      __CFSetLastAllocationEventName();
      if (!v11)
        return 0;
      if (!CGPDFDictionaryGetNumbers(v8, "Decode", (uint64_t)v11, (CGPDFArray *)(v10 + 4)))
      {
        free(v11);
        return 0;
      }
      v7[6] = *v11;
      v7[8] = v11[1];
      v7[7] = v11[2];
      v7[9] = v11[3];
      memmove(v11, v11 + 4, 8 * v10);
      v7[10] = v11;
      if (a1)
        v12 = (CGPDFStream *)a1[4];
      else
        v12 = 0;
      result = (uint64_t)CGPDFStreamCopyData(v12, &format);
      v7[12] = result;
      if (result)
      {
        if (format == CGPDFDataFormatRaw)
          return 1;
        pdf_error("invalid shading data format.");
        return 0;
      }
    }
  }
  return result;
}

uint64_t type5_create_shading(CGRect *a1, const void *a2)
{
  const CGRect *v3;
  CGFloat *p_height;
  CGFloat *p_y;
  CGSize *p_size;
  double v7;
  double x;
  double v9;
  double width;
  CGFloat y;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const CGFloat *Components;
  _BOOL4 v17;
  _BOOL4 v18;
  uint64_t result;
  _QWORD *v20;
  _QWORD v21[4];

  v3 = &CGRectNull;
  p_height = &CGRectNull.size.height;
  p_y = &CGRectNull.origin.y;
  p_size = &CGRectNull.size;
  if (a1)
  {
    p_size = &a1[2].size;
    p_y = &a1[2].origin.y;
    v3 = a1 + 2;
    p_height = &a1[2].size.height;
  }
  v7 = *p_height;
  x = v3->origin.x;
  v9 = *p_y;
  width = p_size->width;
  v21[0] = *(_QWORD *)&v3->origin.x;
  *(double *)&v21[1] = v9;
  *(double *)&v21[2] = width;
  *(double *)&v21[3] = v7;
  if (a1)
  {
    y = a1[1].origin.y;
    a1 = *(CGRect **)&a1[1].size.width;
  }
  else
  {
    y = 0.0;
  }
  Components = CGColorGetComponents((CGColorRef)a1);
  v17 = x == -8.98846567e307;
  if (v9 != -8.98846567e307)
    v17 = 0;
  if (width != 1.79769313e308)
    v17 = 0;
  v18 = v7 == 1.79769313e308 && v17;
  if (a2)
  {
    CFRetain(a2);
    if (y == 0.0)
      return 0;
  }
  else
  {
    result = 0;
    if (y == 0.0)
      return result;
  }
  if (v18)
    v20 = 0;
  else
    v20 = v21;
  result = CGShadingCreateEmpty(0, *(_QWORD **)&y, (uint64_t)Components, (uint64_t)v20, v12, v13, v14, v15);
  *(_QWORD *)(result + 80) = a2;
  *(_OWORD *)(result + 96) = type5_create_shading_type5_drawing_callbacks;
  *(_QWORD *)(result + 112) = cg_shading_type5_release;
  return result;
}

void type5_release_info(int a1, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

void cg_shading_type5_draw(uint64_t a1, CGContextRef c)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  const UInt8 *BytePtr;
  CFIndex Length;
  __n128 v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  unsigned int v24;
  const UInt8 *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  int v32;
  unint64_t v33;
  BOOL v34;
  int v35;
  unint64_t v36;
  int v37;
  unsigned int v38;
  double *v39;
  int v40;
  unint64_t v41;
  int v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  double *v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  int v50;
  unint64_t v51;
  int v52;
  unsigned int v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  _QWORD *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  __n128 v63;
  char *v64;
  char *v65;
  size_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  CGContext *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  CGSize size;
  CGPoint origin;
  char *v104;
  size_t width;
  double height;
  size_t v107;
  size_t v108;
  uint64_t v109;
  unint64_t v110;
  CGDataProvider *v111;
  CGImageRef v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  CGContextRef v117;
  uint64_t *v118;
  char *v119;
  char *v120;
  char *v121;
  _QWORD *v122;
  char *v123;
  char *v124;
  float64x2_t v125[3];
  const void *v126;
  CGRect v127;
  uint64_t v128;
  CGAffineTransform v129;
  char *v130;
  char *v131;
  char *v132;
  uint64_t v133;
  CGRect v134;
  CGRect v135;

  v133 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 40) > 0x1000000uLL)
    return;
  v3 = a1;
  v128 = 0;
  memset(&v127, 0, sizeof(v127));
  v126 = 0;
  v131 = 0;
  v132 = 0;
  v130 = 0;
  CGContextSetFillColorSpace(c, *(CGColorSpaceRef *)(a1 + 16));
  CGContextSetStrokeColorSpace(c, *(CGColorSpaceRef *)(v3 + 16));
  CGContextGetCTM(&v129, c);
  v125[0] = *(float64x2_t *)&v129.a;
  v125[1] = *(float64x2_t *)&v129.c;
  v125[2] = *(float64x2_t *)&v129.tx;
  v4 = CGTriangleMeshCreate(*(_QWORD **)(v3 + 16), *(const void **)(v3 + 88));
  v122 = v4;
  v117 = c;
  if (v4)
    v5 = v4[1];
  else
    v5 = 0;
  BytePtr = CFDataGetBytePtr(*(CFDataRef *)(v3 + 96));
  Length = CFDataGetLength(*(CFDataRef *)(v3 + 96));
  v118 = &v113;
  is_mul_ok(*(_QWORD *)(v3 + 40), 0x90uLL);
  v9 = (char *)MEMORY[0x1E0C80A78](Length, v8);
  v14 = (char *)&v113 - v13 - 15;
  if (v11 <= 0x1C71C71C71C71C6)
    v15 = v14;
  else
    v15 = 0;
  if (v11 - 0x1C71C71C71C71C7 >= 0xFE38E38E38E38E9ELL)
  {
    v9 = (char *)malloc_type_malloc(16 * v10, 0x2429D2AuLL);
    v15 = v9;
  }
  is_mul_ok(*(_QWORD *)(v3 + 40), 0x90uLL);
  MEMORY[0x1E0C80A78](v9, v12);
  v20 = (char *)&v113 - v19 - 15;
  if (v17 <= 0x1C71C71C71C71C6)
    v21 = v20;
  else
    v21 = 0;
  if (v17 - 0x1C71C71C71C71C7 >= 0xFE38E38E38E38E9ELL)
    v21 = (char *)malloc_type_malloc(16 * v16, 0xCCA3497AuLL);
  if (!v15)
    goto LABEL_84;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = &BytePtr[Length];
  v26 = v15;
  v123 = v15;
  v121 = v21;
  do
  {
    if (!v23 && BytePtr == v25)
      break;
    v27 = *(_QWORD *)(v3 + 40);
    if (!v27)
    {
      if (v22)
        goto LABEL_77;
      goto LABEL_80;
    }
    v28 = 0;
    v29 = *(_QWORD *)(v3 + 24);
    v30 = *(_QWORD *)(v3 + 32);
    v18.n128_f64[0] = (double)(0xFFFFFFFF >> -(char)v29);
    v31 = v29 - 24;
    do
    {
      if (v29 < 0x19)
      {
        v35 = 0;
        v36 = v29;
        if (!v29)
        {
          v38 = 0;
          goto LABEL_37;
        }
      }
      else
      {
        if (v23 > 0x17)
        {
          v33 = v23;
        }
        else
        {
          do
          {
            v24 <<= 8;
            if (BytePtr < v25)
            {
              v32 = *BytePtr++;
              v24 |= v32;
            }
            v33 = v23 + 8;
            v34 = v23 >= 0x10;
            v23 += 8;
          }
          while (!v34);
        }
        v23 = v33 - 24;
        v35 = ((v24 >> (v33 - 24)) & 0xFFFFFF) << v31;
        v36 = v29 - 24;
      }
      while (v23 < v36)
      {
        v24 <<= 8;
        if (BytePtr < v25)
        {
          v37 = *BytePtr++;
          v24 |= v37;
        }
        v23 += 8;
      }
      v23 -= v36;
      v38 = (v24 >> v23) & (0xFFFFFFFF >> -(char)v36);
LABEL_37:
      v39 = (double *)&v26[144 * v28];
      *v39 = *(double *)(v3 + 48)
           + (*(double *)(v3 + 64) - *(double *)(v3 + 48)) * (double)(v38 | v35) / v18.n128_f64[0];
      if (v29 < 0x19)
      {
        v42 = 0;
        v43 = v29;
        if (!v29)
          goto LABEL_53;
      }
      else
      {
        if (v23 > 0x17)
        {
          v41 = v23;
        }
        else
        {
          do
          {
            v24 <<= 8;
            if (BytePtr < v25)
            {
              v40 = *BytePtr++;
              v24 |= v40;
            }
            v41 = v23 + 8;
            v34 = v23 >= 0x10;
            v23 += 8;
          }
          while (!v34);
        }
        v23 = v41 - 24;
        v42 = ((v24 >> (v41 - 24)) & 0xFFFFFF) << v31;
        v43 = v29 - 24;
      }
      while (v23 < v43)
      {
        v24 <<= 8;
        if (BytePtr < v25)
        {
          v44 = *BytePtr++;
          v24 |= v44;
        }
        v23 += 8;
      }
      v23 -= v43;
      LODWORD(v43) = (v24 >> v23) & (0xFFFFFFFF >> -(char)v43);
LABEL_53:
      v39[1] = *(double *)(v3 + 56)
             + (*(double *)(v3 + 72) - *(double *)(v3 + 56)) * (double)(v43 | v42) / v18.n128_f64[0];
      if (v5)
      {
        v45 = 0;
        v46 = v39 + 2;
        v47 = *(_QWORD *)(v3 + 80);
        while (v30 < 0x19)
        {
          v50 = 0;
          v51 = v30;
          if (v30)
            goto LABEL_63;
          v53 = 0;
LABEL_71:
          *v46++ = *(double *)(v47 + 16 * v45)
                 + (*(double *)(v47 + 16 * v45 + 8) - *(double *)(v47 + 16 * v45))
                 * (double)(v53 | v50)
                 / (double)(0xFFFFFFFF >> -(char)v30);
          if (++v45 == v5)
            goto LABEL_72;
        }
        if (v23 > 0x17)
        {
          v49 = v23;
        }
        else
        {
          do
          {
            v24 <<= 8;
            if (BytePtr < v25)
            {
              v48 = *BytePtr++;
              v24 |= v48;
            }
            v49 = v23 + 8;
            v34 = v23 >= 0x10;
            v23 += 8;
          }
          while (!v34);
        }
        v23 = v49 - 24;
        v50 = ((v24 >> (v49 - 24)) & 0xFFFFFF) << (v30 - 24);
        v51 = v30 - 24;
LABEL_63:
        while (v23 < v51)
        {
          v24 <<= 8;
          if (BytePtr < v25)
          {
            v52 = *BytePtr++;
            v24 |= v52;
          }
          v23 += 8;
        }
        v23 -= v51;
        v53 = (v24 >> v23) & (0xFFFFFFFF >> -(char)v51);
        goto LABEL_71;
      }
LABEL_72:
      v23 &= 0xFFFFFFFFFFFFFFF8;
      ++v28;
    }
    while (v28 != v27);
    if (!v22 || v27 == 1)
      goto LABEL_80;
LABEL_77:
    v54 = 0;
    v124 = v26;
    v55 = v26;
    v56 = v3;
    v57 = (uint64_t)v122;
    do
    {
      ++v54;
      v130 = v22;
      v22 += 144;
      v131 = v22;
      v132 = v55;
      CGTriangleMeshAddTriangleWithTrianglePoints(v57, v125, (uint64_t)&v130);
      v130 = v22;
      v131 = v55;
      v55 += 144;
      v132 = v55;
      CGTriangleMeshAddTriangleWithTrianglePoints(v57, v125, (uint64_t)&v130);
    }
    while (v54 < *(_QWORD *)(v56 + 40) - 1);
    v3 = v56;
    v15 = v123;
    v21 = v121;
    v26 = v124;
LABEL_80:
    if (v26 == v15)
      v58 = v21;
    else
      v58 = v15;
    v22 = v26;
    v26 = v58;
  }
  while (v58);
LABEL_84:
  memset(&v129, 0, 24);
  v59 = v122;
  if (v122)
  {
    v60 = (char *)v122[9];
    if (v60)
    {
      MEMORY[0x1E0C80A78](v21, v18);
      v64 = (char *)&v113 - v61 - 15;
      if (v62 <= 0xFFFFFFFFFFFFFFELL)
        v65 = (char *)&v113 - v61 - 15;
      else
        v65 = 0;
      if (v62 - 0xFFFFFFFFFFFFFFFLL >= 0xF000000000000102)
        v65 = (char *)malloc_type_malloc(16 * (_QWORD)v60, 0x6681A47EuLL);
      is_mul_ok(3 * (_QWORD)v60, 0x48uLL);
      v66 = MEMORY[0x1E0C80A78](216 * (_QWORD)v60, v63);
      v69 = (char *)&v113 - v68;
      if (v67 <= 0x38E38E38E38E38DLL)
        v70 = (char *)&v113 - v68;
      else
        v70 = 0;
      if (v67 - 0x38E38E38E38E38ELL >= 0xFC71C71C71C71F73)
        v70 = (char *)malloc_type_malloc(v66, 0xB949159DuLL);
      v71 = *(_QWORD *)(v3 + 16);
      if (v71)
      {
        v72 = *(_QWORD *)(*(_QWORD *)(v71 + 24) + 40);
        if ((unint64_t)(v72 + 1) > 5)
        {
          CGTriangleMeshRelease((uint64_t)v59);
          if (v70 == v69)
            goto LABEL_127;
LABEL_126:
          free(v70);
          goto LABEL_127;
        }
        v114 = v72 + 1;
        v115 = v69;
        v116 = v64;
      }
      else
      {
        v115 = v69;
        v116 = v64;
        v72 = 0;
        v114 = 1;
      }
      v73 = 0;
      v74 = 0;
      v75 = 0;
      v119 = v70 + 32;
      v121 = v65;
      v120 = v60;
      do
      {
        v76 = &v65[16 * (_QWORD)v74];
        *((_DWORD *)v76 + 3) = 0;
        v77 = v59[9];
        v123 = v74;
        if (v77 > (unint64_t)v74)
        {
          v78 = 0;
          v79 = v59[4];
          v80 = v59[7];
          v81 = &v73[v59[10]];
          do
          {
            *(_QWORD *)((char *)&v129.a + v78) = v80 + v79 * *(_QWORD *)&v81[v78];
            v78 += 8;
          }
          while (v78 != 24);
        }
        v124 = v73;
        v82 = 0;
        v83 = &v119[72 * v75];
        do
        {
          v84 = v75;
          *(_DWORD *)&v76[4 * v82] = v75;
          v85 = *((_QWORD *)&v129.a + v82);
          v86 = &v70[72 * v75];
          *(_OWORD *)v86 = *(_OWORD *)v85;
          *((_QWORD *)v86 + 2) = 0;
          *((_QWORD *)v86 + 3) = 0;
          v87 = *(_QWORD *)(v3 + 88);
          if (v87)
          {
            v128 = *(_QWORD *)(v85 + 16);
            CGFunctionEvaluate(v87, (char *)&v128, (double *)&v70[72 * v75 + 32]);
          }
          else if (v72)
          {
            v88 = (uint64_t *)(v85 + 16);
            v89 = v83;
            v90 = v72;
            do
            {
              v91 = *v88++;
              *(_QWORD *)v89 = v91;
              v89 += 8;
              --v90;
            }
            while (v90);
          }
          ++v75;
          *(_QWORD *)&v70[72 * v84 + 32 + 8 * v72] = 0x3FF0000000000000;
          ++v82;
          v83 += 72;
        }
        while (v82 != 3);
        v74 = v123 + 1;
        v73 = v124 + 24;
        v92 = (int)v120;
        v59 = v122;
        v65 = v121;
      }
      while (v123 + 1 != v120);
      CGTriangleMeshRelease((uint64_t)v122);
      v93 = v114;
      if ((RenderTriangleMesh((double *)v70, v75, (int *)v65, v92, v114, (uint64_t *)&v126, &v127.origin.x) & 1) != 0)
      {
        v94 = v117;
        CGContextSaveGState(v117);
        CGContextResetCTM((uint64_t)v94, v95, v96, v97, v98, v99, v100, v101);
        size = v127.size;
        origin = v127.origin;
        v104 = v115;
        if (v127.size.width < 0.0 || v127.size.height < 0.0)
        {
          v134 = CGRectStandardize(v127);
          width = (unint64_t)v134.size.width;
          v134.origin = origin;
          v134.size = size;
          *(CGRect *)(&height - 3) = CGRectStandardize(v134);
        }
        else
        {
          width = (unint64_t)v127.size.width;
          height = v127.size.height;
        }
        v107 = (unint64_t)height;
        v108 = 8 * v93;
        v109 = (uint64_t)v126;
        v110 = ((v108 * width) >> 3) * (unint64_t)height;
        check_clients_buffer("CGDataProviderCreateWithData", v126, v110);
        v111 = CGDataProviderCreateWithDataInternal(0, v109, v110, (uint64_t)patch_data_release, 0);
        v112 = CGImageCreate(width, v107, 8uLL, v108, (v108 * width) >> 3, *(CGColorSpaceRef *)(v3 + 16), 3u, v111, 0, 0, kCGRenderingIntentDefault);
        CGDataProviderRelease(v111);
        CGImageSetCachingFlags(v112, 1);
        v135.origin = origin;
        v135.size = size;
        CGContextDrawImage(v94, v135, v112);
        CGContextRestoreGState(v94);
        if (v112)
          CFRelease(v112);
        v64 = v116;
        v65 = v121;
        if (v70 != v104)
          goto LABEL_126;
LABEL_127:
        if (v65 != v64)
LABEL_128:
          free(v65);
      }
      else
      {
        if (v70 != v115)
          free(v70);
        if (v65 != v116)
          goto LABEL_128;
      }
    }
  }
}

void cg_shading_type5_release(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

void patch_data_release(int a1, void *a2)
{
  free(a2);
}

uint64_t __type5_info_getTypeID_block_invoke()
{
  uint64_t result;

  result = pdf_register_cftype((uint64_t)&type5_info_getTypeID_class);
  type5_info_getTypeID_id = result;
  return result;
}

void type5_info_finalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 96);
  if (v2)
    CFRelease(v2);
  CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 16));
  v3 = *(const void **)(a1 + 88);
  if (v3)
    CFRelease(v3);
  free(*(void **)(a1 + 80));
}

double DECODE_RANGE(uint64_t a1, uint64_t a2, uint64_t a3, double result, double a5, double a6)
{
  double v6;
  double v7;
  float v8;
  float v9;
  double v10;
  uint64_t v11;
  double v12;
  _BYTE *v13;
  int v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  unsigned int v20;
  BOOL v21;
  double v22;
  unsigned int v23;
  int v24;

  if (!a3)
    a5 = 1.0;
  v6 = 0.0;
  if (a3)
    v6 = result;
  v7 = a5 - v6;
  v8 = v7;
  v9 = v6;
  *(float *)a1 = v9;
  *(float *)(a1 + 4) = v8;
  if (!a2)
  {
    *(_DWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    return result;
  }
  v10 = v7 * a6;
  if (!a3)
  {
    v15 = (double)~(-1 << a2);
    v16 = v10 / v15;
    v17 = a6 * 0.0;
    v18 = a6 * 0.0 + v16 * v15;
    v19 = fabs(v16);
    if (v19 <= (double)~(-1 << (30 - a2)))
    {
      v23 = __clz((int)v19) - 17;
      if ((int)v19 >= 0x8000)
        v20 = 0;
      else
        v20 = v23;
      v22 = (double)(1 << v20);
    }
    else
    {
      v20 = 0;
      v21 = v16 <= 0.0;
      v16 = -32768.0;
      if (!v21)
        v16 = 32767.0;
      v22 = 1.0;
    }
    if (v18 >= v17)
    {
      if (v17 <= 65535.0)
      {
        if (v18 < 0.0)
        {
LABEL_30:
          v20 = 0;
          v17 = 0.0;
          v16 = 0.0;
          v22 = 0.0;
        }
LABEL_31:
        v24 = (int)(v17 * v22);
        result = v16 * v22;
        *(_DWORD *)(a1 + 8) = v24;
        *(_DWORD *)(a1 + 12) = (int)(v16 * v22);
        *(_DWORD *)(a1 + 16) = v20;
        return result;
      }
    }
    else if (v18 <= 65535.0)
    {
      if (v17 >= 0.0)
        goto LABEL_31;
      goto LABEL_30;
    }
    v20 = 0;
    v22 = 1.0;
    v16 = 0.0;
    v17 = 65535.0;
    goto LABEL_31;
  }
  v11 = 1 << a2;
  v12 = v10 / (double)(unint64_t)(v11 - 1);
  *(_QWORD *)(a1 + 8) = 0;
  result = result * a6;
  *(_DWORD *)(a1 + 16) = 0;
  v13 = (_BYTE *)(a1 + 20);
  do
  {
    if (result >= 0.0)
    {
      v14 = (int)result;
      if (result > 255.0)
        LOBYTE(v14) = -1;
    }
    else
    {
      LOBYTE(v14) = 0;
    }
    *v13++ = v14;
    result = v12 + result;
    --v11;
  }
  while (v11);
  return result;
}

uint64_t decode_byte_8bpc_1(uint64_t result, int a2, int a3, uint64_t a4, int a5, _BYTE *a6, int a7, uint64_t a8, _QWORD *a9, int a10)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  int v16;

  v10 = a5 - (uint64_t)(a3 * (int)result);
  v11 = a7 - (uint64_t)(int)result;
  if (a8)
  {
    if (a8 == 2)
    {
      v15 = *a9 + 20;
      do
      {
        v16 = result + 1;
        do
        {
          *a6++ = *(_BYTE *)(v15 + *(unsigned __int8 *)(a4 + a10));
          a4 += a3;
          --v16;
        }
        while (v16 > 1);
        a4 += (int)v10;
        a6 += (int)v11;
        v13 = __OFSUB__(a2--, 1);
      }
      while (!((a2 < 0) ^ v13 | (a2 == 0)));
    }
    else if (a8 == 1)
    {
      do
      {
        v12 = result + 1;
        do
        {
          *a6++ = ~*(_BYTE *)(a4 + a10);
          a4 += a3;
          --v12;
        }
        while (v12 > 1);
        a4 += (int)v10;
        a6 += (int)v11;
        v13 = __OFSUB__(a2--, 1);
      }
      while (!((a2 < 0) ^ v13 | (a2 == 0)));
    }
  }
  else
  {
    do
    {
      v14 = result + 1;
      do
      {
        *a6++ = *(_BYTE *)(a4 + a10);
        a4 += a3;
        --v14;
      }
      while (v14 > 1);
      a4 += v10;
      a6 += v11;
      v13 = __OFSUB__(a2--, 1);
    }
    while (!((a2 < 0) ^ v13 | (a2 == 0)));
  }
  return result;
}

uint64_t decode_byte_8bpc_3a(uint64_t result, int a2, int a3, int a4, uint64_t a5, int a6, _BYTE *a7, int a8, _BYTE *a9, int a10, uint64_t a11, uint64_t a12, int a13, int a14)
{
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  BOOL v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  char v42;
  char v43;
  char v44;

  v15 = a6 - (uint64_t)(a3 * (int)result);
  v16 = -3 * result + a8;
  v17 = a10 - (uint64_t)(int)result;
  if (a11)
  {
    if (a11 == 2)
    {
      v31 = 8;
      v32 = 16;
      if (a13 > a14)
        v31 = 16;
      v33 = *(_QWORD *)(a12 + v31);
      v34 = 24;
      if (a13 > a14)
        v32 = 24;
      if (a14 <= a13)
        v34 = 0;
      v35 = *(_QWORD *)(a12 + v34);
      v36 = *(_QWORD *)(a12 + 8 * (a13 > a14)) + 20;
      v37 = a13 + (uint64_t)a4;
      v38 = 2 * a4;
      v39 = *(_QWORD *)(a12 + v32) + 20;
      v40 = v38 + a13;
      result = (result + 1);
      do
      {
        v41 = result;
        do
        {
          v42 = *(_BYTE *)(v36 + *(unsigned __int8 *)(a5 + a13));
          v43 = *(_BYTE *)(v33 + 20 + *(unsigned __int8 *)(a5 + v37));
          v44 = *(_BYTE *)(v39 + *(unsigned __int8 *)(a5 + v40));
          *a9++ = *(_BYTE *)(v35 + 20 + *(unsigned __int8 *)(a5 + a14));
          *a7 = v42;
          a7[1] = v43;
          a7[2] = v44;
          a5 += a3;
          a7 += 3;
          --v41;
        }
        while (v41 > 1);
        a5 += (int)v15;
        a7 += v16;
        a9 += (int)v17;
        v24 = __OFSUB__(a2--, 1);
      }
      while (!((a2 < 0) ^ v24 | (a2 == 0)));
    }
    else if (a11 == 1)
    {
      v18 = a13 + (uint64_t)a4;
      v19 = result + 1;
      v20 = 2 * a4 + a13;
      do
      {
        LODWORD(result) = v19;
        do
        {
          v21 = *(_BYTE *)(a5 + a13);
          v22 = *(_BYTE *)(a5 + v18);
          v23 = *(_BYTE *)(a5 + v20);
          *a9++ = ~*(_BYTE *)(a5 + a14);
          *a7 = ~v21;
          a7[1] = ~v22;
          a7[2] = ~v23;
          a5 += a3;
          a7 += 3;
          result = (result - 1);
        }
        while ((int)result > 1);
        a5 += (int)v15;
        a7 += v16;
        a9 += (int)v17;
        v24 = __OFSUB__(a2--, 1);
      }
      while (!((a2 < 0) ^ v24 | (a2 == 0)));
    }
  }
  else
  {
    v25 = a13 + (uint64_t)a4;
    v26 = result + 1;
    v27 = 2 * a4 + a13;
    do
    {
      LODWORD(result) = v26;
      do
      {
        v28 = *(_BYTE *)(a5 + a13);
        v29 = *(_BYTE *)(a5 + v25);
        v30 = *(_BYTE *)(a5 + v27);
        *a9++ = *(_BYTE *)(a5 + a14);
        *a7 = v28;
        a7[1] = v29;
        a7[2] = v30;
        a5 += a3;
        a7 += 3;
        result = (result - 1);
      }
      while ((int)result > 1);
      a5 += v15;
      a7 += v16;
      a9 += v17;
      v24 = __OFSUB__(a2--, 1);
    }
    while (!((a2 < 0) ^ v24 | (a2 == 0)));
  }
  return result;
}

uint64_t decode_byte_8bpc_4(uint64_t result, int a2, int a3, int a4, uint64_t a5, int a6, _BYTE *a7, int a8, uint64_t a9, _QWORD *a10, int a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  char v19;
  char v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  char v38;
  char v39;
  char v40;

  v11 = a6 - (uint64_t)(a3 * (int)result);
  v12 = a8 - 4 * (int)result;
  if (a9)
  {
    if (a9 == 2)
    {
      v30 = *a10 + 20;
      v31 = a10[1] + 20;
      v32 = a10[2] + 20;
      v33 = a10[3] + 20;
      v34 = a11 + (uint64_t)a4;
      v35 = 2 * a4 + a11;
      v36 = v35 + a4;
      result = (result + 1);
      do
      {
        v37 = result;
        do
        {
          v38 = *(_BYTE *)(v31 + *(unsigned __int8 *)(a5 + v34));
          v39 = *(_BYTE *)(v32 + *(unsigned __int8 *)(a5 + v35));
          v40 = *(_BYTE *)(v33 + *(unsigned __int8 *)(a5 + v36));
          *a7 = *(_BYTE *)(v30 + *(unsigned __int8 *)(a5 + a11));
          a7[1] = v38;
          a7[2] = v39;
          a5 += a3;
          a7[3] = v40;
          a7 += 4;
          --v37;
        }
        while (v37 > 1);
        a5 += (int)v11;
        a7 += (int)v12;
        v21 = __OFSUB__(a2--, 1);
      }
      while (!((a2 < 0) ^ v21 | (a2 == 0)));
    }
    else if (a9 == 1)
    {
      v13 = a11 + (uint64_t)a4;
      v14 = 2 * a4 + a11;
      v15 = a3;
      v16 = result + 1;
      v17 = v14 + a4;
      do
      {
        v18 = v16;
        do
        {
          result = *(unsigned __int8 *)(a5 + v13);
          v19 = *(_BYTE *)(a5 + v14);
          v20 = *(_BYTE *)(a5 + v17);
          *a7 = ~*(_BYTE *)(a5 + a11);
          a7[1] = ~(_BYTE)result;
          a7[2] = ~v19;
          a5 += v15;
          a7[3] = ~v20;
          a7 += 4;
          --v18;
        }
        while (v18 > 1);
        a5 += (int)v11;
        a7 += (int)v12;
        v21 = __OFSUB__(a2--, 1);
      }
      while (!((a2 < 0) ^ v21 | (a2 == 0)));
    }
  }
  else
  {
    v22 = a11 + (uint64_t)a4;
    v23 = 2 * a4 + a11;
    v24 = v23 + a4;
    v25 = a3;
    v26 = result + 1;
    do
    {
      v27 = v26;
      do
      {
        result = *(unsigned __int8 *)(a5 + v22);
        v28 = *(_BYTE *)(a5 + v23);
        v29 = *(_BYTE *)(a5 + v24);
        *a7 = *(_BYTE *)(a5 + a11);
        a7[1] = result;
        a7[2] = v28;
        a5 += v25;
        a7[3] = v29;
        a7 += 4;
        --v27;
      }
      while (v27 > 1);
      a5 += v11;
      a7 += v12;
      v21 = __OFSUB__(a2--, 1);
    }
    while (!((a2 < 0) ^ v21 | (a2 == 0)));
  }
  return result;
}

uint64_t decode_byte_8bpc_4a(uint64_t result, int a2, int a3, int a4, uint64_t a5, int a6, _BYTE *a7, int a8, _BYTE *a9, int a10, uint64_t a11, uint64_t a12, int a13, int a14)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  char v22;
  char v23;
  char v24;
  char v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  char v31;
  char v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  char v50;
  char v51;
  char v52;
  char v53;

  v15 = a6 - (uint64_t)(a3 * (int)result);
  v16 = a8 - 4 * (int)result;
  v17 = a10 - (uint64_t)(int)result;
  if (a11)
  {
    if (a11 == 2)
    {
      v35 = 8;
      v36 = 16;
      if (a13 > a14)
        v35 = 16;
      v37 = *(_QWORD *)(a12 + v35);
      v38 = 24;
      if (a13 > a14)
        v36 = 24;
      v39 = *(_QWORD *)(a12 + v36);
      if (a13 > a14)
        v38 = 32;
      v40 = a3;
      v41 = *(_QWORD *)(a12 + 8 * (a13 > a14)) + 20;
      v42 = v37 + 20;
      v43 = v39 + 20;
      v44 = *(_QWORD *)(a12 + v38) + 20;
      v45 = *(_QWORD *)(a12 + 32 * (a14 > a13)) + 20;
      result = (result + 1);
      v46 = a13 + (uint64_t)a4;
      v47 = 2 * a4 + a13;
      v48 = v47 + a4;
      do
      {
        v49 = result;
        do
        {
          v50 = *(_BYTE *)(v41 + *(unsigned __int8 *)(a5 + a13));
          v51 = *(_BYTE *)(v42 + *(unsigned __int8 *)(a5 + v46));
          v52 = *(_BYTE *)(v43 + *(unsigned __int8 *)(a5 + v47));
          v53 = *(_BYTE *)(v44 + *(unsigned __int8 *)(a5 + v48));
          *a9++ = *(_BYTE *)(v45 + *(unsigned __int8 *)(a5 + a14));
          *a7 = v50;
          a7[1] = v51;
          a7[2] = v52;
          a5 += v40;
          a7[3] = v53;
          a7 += 4;
          --v49;
        }
        while (v49 > 1);
        a5 += (int)v15;
        a7 += (int)v16;
        a9 += (int)v17;
        v26 = __OFSUB__(a2--, 1);
      }
      while (!((a2 < 0) ^ v26 | (a2 == 0)));
    }
    else if (a11 == 1)
    {
      v18 = 2 * a4 + a13;
      v19 = a3;
      v20 = result + 1;
      result = v18 + a4;
      do
      {
        v21 = v20;
        do
        {
          v22 = *(_BYTE *)(a5 + a13);
          v23 = *(_BYTE *)(a5 + a13 + (uint64_t)a4);
          v24 = *(_BYTE *)(a5 + v18);
          v25 = *(_BYTE *)(a5 + result);
          *a9++ = ~*(_BYTE *)(a5 + a14);
          *a7 = ~v22;
          a7[1] = ~v23;
          a7[2] = ~v24;
          a5 += v19;
          a7[3] = ~v25;
          a7 += 4;
          --v21;
        }
        while (v21 > 1);
        a5 += (int)v15;
        a7 += v16;
        a9 += v17;
        v26 = __OFSUB__(a2--, 1);
      }
      while (!((a2 < 0) ^ v26 | (a2 == 0)));
    }
  }
  else
  {
    v27 = 2 * a4 + a13;
    v28 = a3;
    v29 = result + 1;
    result = v27 + a4;
    do
    {
      v30 = v29;
      do
      {
        v31 = *(_BYTE *)(a5 + a13);
        v32 = *(_BYTE *)(a5 + a13 + (uint64_t)a4);
        v33 = *(_BYTE *)(a5 + v27);
        v34 = *(_BYTE *)(a5 + result);
        *a9++ = *(_BYTE *)(a5 + a14);
        *a7 = v31;
        a7[1] = v32;
        a7[2] = v33;
        a5 += v28;
        a7[3] = v34;
        a7 += 4;
        --v30;
      }
      while (v30 > 1);
      a5 += v15;
      a7 += (int)v16;
      a9 += (int)v17;
      v26 = __OFSUB__(a2--, 1);
    }
    while (!((a2 < 0) ^ v26 | (a2 == 0)));
  }
  return result;
}

_QWORD *decode_byte_nbpc_N(int a1, int a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, _QWORD *a8, int a9)
{
  int v9;
  int v10;
  int v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  int v15;
  _QWORD *result;
  char v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  int v23;

  v9 = 0;
  if (a2 >= 8)
    v10 = 8;
  else
    v10 = a2;
  v11 = a9 * a1;
  v12 = (unsigned __int8 *)(a4 + (a5 >> 3));
  v13 = *v12;
  v14 = 8 - (a5 & 7);
  v15 = a9 * a2 - a3;
  result = a8;
  do
  {
    v17 = v14 - v10;
    if (v14 - v10 < 0)
    {
      LODWORD(v18) = -v14 >> 3;
      v19 = -v14 & 0xFFFFFFF8;
      if (v14 >= -7)
        v18 = 0;
      else
        v18 = v18;
      v12 += v18;
      if (v14 >= -7)
        v19 = 0;
      v14 += v19;
      do
      {
        v20 = *++v12;
        v14 += 8;
        v13 = v20 | (v13 << 8);
      }
      while (v14 - v10 < 0);
      v17 = v14 - v10;
    }
    v21 = v9 + 1;
    *(_BYTE *)(a6 + v9) = *(_BYTE *)(*result + ((v13 >> v17) & ~(-1 << v10)) + 20);
    if (v9 + 1 >= a9)
      v9 = 0;
    else
      ++v9;
    if (v21 >= a9)
      v22 = v15;
    else
      v22 = 0;
    if (v21 >= a9)
      v23 = a7;
    else
      v23 = 0;
    v14 += v22 - a2;
    a6 += v23;
    result = &a8[v9];
    --v11;
  }
  while (v11);
  return result;
}

uint64_t decode_byte_nbpc_1(uint64_t result, int a2, int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  char v12;
  uint64_t v13;
  unsigned int v14;
  int v15;

  if (a2 >= 8)
    v7 = 8;
  else
    v7 = a2;
  v8 = a6 - 1;
  v9 = (unsigned __int8 *)(a4 + (a5 >> 3));
  v10 = 8 - (a5 & 7);
  v11 = *v9;
  do
  {
    v12 = v10 - v7;
    if (v10 - v7 < 0)
    {
      LODWORD(v13) = -v10 >> 3;
      v14 = -v10 & 0xFFFFFFF8;
      if (v10 >= -7)
        v13 = 0;
      else
        v13 = v13;
      v9 += v13;
      if (v10 >= -7)
        v14 = 0;
      v10 += v14;
      do
      {
        v15 = *++v9;
        v10 += 8;
        v11 = v15 | (v11 << 8);
      }
      while (v10 - v7 < 0);
      v12 = v10 - v7;
    }
    v10 -= a3;
    *(_BYTE *)++v8 = *(_BYTE *)(a7 + ((v11 >> v12) & ~(-1 << v7)) + 20);
    result = (result - 1);
  }
  while ((_DWORD)result);
  return result;
}

uint64_t decode_byte_16bpc(uint64_t result, int a2, uint64_t a3, int a4, uint64_t a5, int a6, int a7, int a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  char v13;
  char v14;
  _BYTE *v15;
  int v16;
  uint64_t v17;
  char *v18;
  _BYTE *v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  char v25;
  char v26;
  _BYTE *v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  _BYTE *v31;
  char *v32;
  char v33;

  v8 = a8 * result;
  v9 = a4;
  if (a7 == 1)
  {
    while (1)
    {
      v10 = a3 - 2;
      if (v8 >= 5)
        break;
      if (v8 > 0)
      {
        v17 = a5 - 1;
        v16 = v8;
LABEL_8:
        v18 = (char *)(v10 + 2);
        v19 = (_BYTE *)(v17 + 1);
        v20 = v16 + 1;
        do
        {
          v21 = *v18;
          v18 += 2;
          *v19++ = ~v21;
          --v20;
        }
        while (v20 > 1);
      }
      a3 += v9;
      a5 += a6;
      if (!--a2)
        return result;
    }
    v11 = 0;
    v12 = v8 + 4;
    do
    {
      v13 = *(_BYTE *)(v10 + 8);
      v10 += 8;
      v14 = ~*(_BYTE *)(v10 - 4);
      result = ~*(unsigned __int8 *)(v10 - 2);
      v15 = (_BYTE *)(a5 + v11);
      *v15 = ~*(_BYTE *)(v10 - 6);
      v15[1] = v14;
      v15[2] = result;
      v15[3] = ~v13;
      v11 += 4;
      v12 -= 4;
    }
    while (v12 > 8);
    v16 = v8 - v11;
    v17 = a5 + v11 - 1;
    goto LABEL_8;
  }
  do
  {
    v22 = a3 - 2;
    if (v8 < 5)
    {
      if (v8 <= 0)
        goto LABEL_20;
      v29 = a5 - 1;
      v28 = v8;
    }
    else
    {
      v23 = 0;
      v24 = v8 + 4;
      do
      {
        v25 = *(_BYTE *)(v22 + 8);
        v22 += 8;
        v26 = *(_BYTE *)(v22 - 4);
        result = *(unsigned __int8 *)(v22 - 2);
        v27 = (_BYTE *)(a5 + v23);
        *v27 = *(_BYTE *)(v22 - 6);
        v27[1] = v26;
        v27[2] = result;
        v27[3] = v25;
        v24 -= 4;
        v23 += 4;
      }
      while (v24 > 8);
      v28 = v8 - v23;
      v29 = a5 + v23 - 1;
    }
    v30 = v28 + 1;
    v31 = (_BYTE *)(v29 + 1);
    v32 = (char *)(v22 + 2);
    do
    {
      v33 = *v32;
      v32 += 2;
      *v31++ = v33;
      --v30;
    }
    while (v30 > 1);
LABEL_20:
    a3 += v9;
    a5 += a6;
    --a2;
  }
  while (a2);
  return result;
}

uint64_t decode_byte_8bpc_N(int a1, int a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t *a8, int a9)
{
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;

  v9 = 0;
  v10 = a9 * a1;
  v11 = (unsigned __int8 *)(a4 - a3);
  v12 = a6 - 1;
  LODWORD(result) = a5 - a9 * a1 * a3;
  switch(a9)
  {
    case 1:
      v9 = *a8;
      goto LABEL_3;
    case 2:
      v14 = *a8;
      v9 = a8[1];
      v15 = v9;
      v16 = *a8;
      break;
    case 3:
      goto LABEL_6;
    case 4:
      v9 = a8[3];
LABEL_6:
      v16 = *a8;
      v15 = a8[1];
      v14 = a8[2];
      break;
    default:
LABEL_3:
      v14 = v9;
      v15 = v9;
      v16 = v9;
      break;
  }
  v17 = 0;
  result = (int)result;
  do
  {
    if (v9)
    {
      if (v10 < 4)
      {
LABEL_18:
        v23 = v10;
      }
      else
      {
        v18 = v10;
        do
        {
          v19 = v11[a3];
          v20 = v11[2 * a3];
          v21 = v11[3 * a3];
          v11 += 4 * a3;
          v22 = *(_BYTE *)(v16 + v19 + 20);
          LOBYTE(v20) = *(_BYTE *)(v15 + v20 + 20);
          LOBYTE(v21) = *(_BYTE *)(v14 + v21 + 20);
          *(_BYTE *)(v12 + 4) = *(_BYTE *)(v9 + *v11 + 20);
          v12 += 4;
          v23 = v18 - 4;
          *(_BYTE *)(v12 - 3) = v22;
          *(_BYTE *)(v12 - 2) = v20;
          *(_BYTE *)(v12 - 1) = v21;
          v24 = v18 > 7;
          v18 -= 4;
        }
        while (v24);
      }
      v16 = a8[v17];
      if (v23 >= 1)
      {
        v28 = v23 + 1;
        do
        {
          v11 += a3;
          *(_BYTE *)++v12 = *(_BYTE *)(v16 + *v11 + 20);
          if (v17 + 1 < a9)
            ++v17;
          else
            v17 = 0;
          v16 = a8[v17];
          --v28;
        }
        while (v28 > 1);
      }
      goto LABEL_25;
    }
    if (!v14)
      goto LABEL_18;
    if (v10 >= 1)
    {
      v25 = v10 + 3;
      do
      {
        v26 = v11[a3];
        v27 = v11[2 * a3];
        v11 += 3 * a3;
        LOBYTE(v26) = *(_BYTE *)(v16 + v26 + 20);
        LOBYTE(v27) = *(_BYTE *)(v15 + v27 + 20);
        *(_BYTE *)(v12 + 3) = *(_BYTE *)(v14 + *v11 + 20);
        v12 += 3;
        *(_BYTE *)(v12 - 2) = v26;
        *(_BYTE *)(v12 - 1) = v27;
        v25 -= 3;
      }
      while (v25 > 3);
    }
LABEL_25:
    v11 += (int)result;
    v12 += a7 - v10;
    --a2;
  }
  while (a2);
  return result;
}

uint64_t decode_word_16bpc_1(uint64_t result, int a2, int a3, uint64_t a4, int a5, _WORD *a6, int a7, uint64_t a8, uint64_t a9, int a10)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;

  v10 = a5 - (uint64_t)(a3 * (int)result);
  v11 = a7 - 2 * (int)result;
  if (a8)
  {
    if (a8 == 2)
    {
      v16 = *(_DWORD *)(*(_QWORD *)a9 + 8);
      v15 = *(_DWORD *)(*(_QWORD *)a9 + 12);
      v17 = *(_DWORD *)(*(_QWORD *)a9 + 16);
      v18 = result + 1;
      do
      {
        v19 = v18;
        do
        {
          v20 = bswap32(*(unsigned __int16 *)(a4 + a10));
          a4 += a3;
          LODWORD(result) = ((int)(v16 + v15 * HIWORD(v20)) >> v17) & ~((int)(v16 + v15 * HIWORD(v20)) >> v17 >> 31);
          if (result >= 0xFFFF)
            result = 0xFFFFLL;
          else
            result = result;
          *a6++ = result;
          --v19;
        }
        while (v19 > 1);
        a4 += (int)v10;
        a6 = (_WORD *)((char *)a6 + (int)v11);
        v13 = __OFSUB__(a2--, 1);
      }
      while (!((a2 < 0) ^ v13 | (a2 == 0)));
    }
    else if (a8 == 1)
    {
      do
      {
        v12 = result + 1;
        do
        {
          *a6++ = bswap32(~*(unsigned __int16 *)(a4 + a10)) >> 16;
          a4 += a3;
          --v12;
        }
        while (v12 > 1);
        a4 += (int)v10;
        a6 = (_WORD *)((char *)a6 + (int)v11);
        v13 = __OFSUB__(a2--, 1);
      }
      while (!((a2 < 0) ^ v13 | (a2 == 0)));
    }
  }
  else
  {
    do
    {
      v14 = result + 1;
      do
      {
        *a6++ = bswap32(*(unsigned __int16 *)(a4 + a10)) >> 16;
        a4 += a3;
        --v14;
      }
      while (v14 > 1);
      a4 += v10;
      a6 = (_WORD *)((char *)a6 + v11);
      v13 = __OFSUB__(a2--, 1);
    }
    while (!((a2 < 0) ^ v13 | (a2 == 0)));
  }
  return result;
}

uint64_t decode_word_16bpc_3(uint64_t result, int a2, int a3, uint64_t a4, int a5, _WORD *a6, int a7, uint64_t a8, _QWORD *a9, int a10)
{
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;

  v10 = a5 - (uint64_t)(a3 * (int)result);
  v11 = a7 - 6 * result;
  if (a8)
  {
    if (a8 == 2)
    {
      v19 = (_DWORD *)a9[1];
      v20 = (_DWORD *)a9[2];
      v21 = a3;
      v23 = *(_DWORD *)(*a9 + 8);
      v22 = *(_DWORD *)(*a9 + 12);
      v25 = v19[2];
      v24 = v19[3];
      v27 = v20[2];
      v26 = v20[3];
      v28 = *(_DWORD *)(*a9 + 16);
      v29 = v19[4];
      v30 = v20[4];
      result = (result + 1);
      do
      {
        v31 = result;
        do
        {
          v32 = bswap32(*(unsigned __int16 *)(a4 + a10));
          v33 = bswap32(*(unsigned __int16 *)(a4 + a10 + 2));
          v34 = bswap32(*(unsigned __int16 *)(a4 + a10 + 4));
          a4 += v21;
          v35 = ((int)(v23 + v22 * HIWORD(v32)) >> v28) & ~((int)(v23 + v22 * HIWORD(v32)) >> v28 >> 31);
          v36 = ((int)(v25 + v24 * HIWORD(v33)) >> v29) & ~((int)(v25 + v24 * HIWORD(v33)) >> v29 >> 31);
          v37 = ((int)(v27 + v26 * HIWORD(v34)) >> v30) & ~((int)(v27 + v26 * HIWORD(v34)) >> v30 >> 31);
          if (v35 >= 0xFFFF)
            LOWORD(v35) = -1;
          if (v36 >= 0xFFFF)
            LOWORD(v36) = -1;
          if (v37 >= 0xFFFF)
            LOWORD(v37) = -1;
          *a6 = v35;
          a6[1] = v36;
          a6[2] = v37;
          a6 += 3;
          --v31;
        }
        while (v31 > 1);
        a4 += (int)v10;
        a6 = (_WORD *)((char *)a6 + v11);
        v15 = __OFSUB__(a2--, 1);
      }
      while (!((a2 < 0) ^ v15 | (a2 == 0)));
    }
    else if (a8 == 1)
    {
      do
      {
        v12 = result + 1;
        do
        {
          v13 = *(unsigned __int16 *)(a4 + a10 + 2);
          v14 = *(unsigned __int16 *)(a4 + a10 + 4);
          *a6 = bswap32(~*(unsigned __int16 *)(a4 + a10)) >> 16;
          a6[1] = bswap32(~v13) >> 16;
          a6[2] = bswap32(~v14) >> 16;
          a4 += a3;
          a6 += 3;
          --v12;
        }
        while (v12 > 1);
        a4 += (int)v10;
        a6 = (_WORD *)((char *)a6 + v11);
        v15 = __OFSUB__(a2--, 1);
      }
      while (!((a2 < 0) ^ v15 | (a2 == 0)));
    }
  }
  else
  {
    do
    {
      v16 = result + 1;
      do
      {
        v17 = bswap32(*(unsigned __int16 *)(a4 + a10 + 2));
        v18 = bswap32(*(unsigned __int16 *)(a4 + a10 + 4));
        *a6 = bswap32(*(unsigned __int16 *)(a4 + a10)) >> 16;
        a6[1] = HIWORD(v17);
        a6[2] = HIWORD(v18);
        a4 += a3;
        a6 += 3;
        --v16;
      }
      while (v16 > 1);
      a4 += v10;
      a6 = (_WORD *)((char *)a6 + v11);
      v15 = __OFSUB__(a2--, 1);
    }
    while (!((a2 < 0) ^ v15 | (a2 == 0)));
  }
  return result;
}

uint64_t decode_word_16bpc_4(uint64_t result, int a2, int a3, uint64_t a4, int a5, uint16x4_t *a6, int a7, uint64_t a8, _QWORD *a9, int a10)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int v24;
  uint64_t v25;

  v10 = a5 - (uint64_t)(a3 * (int)result);
  v11 = a7 - 8 * (int)result;
  if (a8)
  {
    if (a8 == 2)
    {
      v17 = (_DWORD *)a9[1];
      v18 = (_DWORD *)a9[2];
      v19 = (_DWORD *)a9[3];
      v20.i32[0] = *(_DWORD *)(*a9 + 8);
      v21.i32[0] = *(_DWORD *)(*a9 + 12);
      v20.i32[1] = v17[2];
      v20.i32[2] = v18[2];
      v20.i32[3] = v19[2];
      v21.i32[1] = v17[3];
      v21.i32[2] = v18[3];
      v21.i32[3] = v19[3];
      v22.i32[0] = *(_DWORD *)(*a9 + 16);
      v22.i32[1] = v17[4];
      v22.i32[2] = v18[4];
      v22.i32[3] = v19[4];
      v23 = vnegq_s32(v22);
      do
      {
        v24 = result + 1;
        do
        {
          v25 = a4 + a3;
          *a6++ = vqmovn_u32((uint32x4_t)vmaxq_s32(vshlq_s32(vmlaq_s32(v20, v21, (int32x4_t)vmovl_u16((uint16x4_t)vrev16_s8(*(int8x8_t *)(a4 + a10)))), v23), (int32x4_t)0));
          --v24;
          a4 = v25;
        }
        while (v24 > 1);
        a4 = v25 + (int)v10;
        a6 = (uint16x4_t *)((char *)a6 + (int)v11);
        v14 = __OFSUB__(a2--, 1);
      }
      while (!((a2 < 0) ^ v14 | (a2 == 0)));
    }
    else if (a8 == 1)
    {
      do
      {
        v12 = result + 1;
        do
        {
          v13 = a4 + a3;
          *a6++ = (uint16x4_t)vrev16_s8(vmvn_s8(*(int8x8_t *)(a4 + a10)));
          --v12;
          a4 = v13;
        }
        while (v12 > 1);
        a4 = v13 + (int)v10;
        a6 = (uint16x4_t *)((char *)a6 + (int)v11);
        v14 = __OFSUB__(a2--, 1);
      }
      while (!((a2 < 0) ^ v14 | (a2 == 0)));
    }
  }
  else
  {
    do
    {
      v15 = result + 1;
      do
      {
        v16 = a4 + a3;
        *a6++ = (uint16x4_t)vrev16_s8(*(int8x8_t *)(a4 + a10));
        --v15;
        a4 = v16;
      }
      while (v15 > 1);
      a4 = v16 + v10;
      a6 = (uint16x4_t *)((char *)a6 + v11);
      v14 = __OFSUB__(a2--, 1);
    }
    while (!((a2 < 0) ^ v14 | (a2 == 0)));
  }
  return result;
}

void append_tree_path_component(const ClipperLib::PolyNode *a1, CGPathRandomAccess *a2, CGAffineTransform *a3, CGAffineTransform *a4, __CFArray *a5)
{
  __n128 v10;
  float64x2_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  __n128 v16;
  float64x2_t v17;
  const ClipperLib::PolyNode **v18;
  const ClipperLib::PolyNode **v19;
  const ClipperLib::PolyNode *v20;
  __int128 v21;
  __int128 v22;
  CFTypeRef v23;
  CGAffineTransform v24;
  CGAffineTransform v25;
  float64x2_t v26[3];
  __n128 v27[3];
  float64x2_t v28[3];
  __n128 v29[3];
  CGMutablePathRef Mutable;
  __int128 v31;

  Mutable = CGPathCreateMutable();
  v31 = cgpoint_null;
  v10 = *(__n128 *)&a3->c;
  v29[0] = *(__n128 *)&a3->a;
  v29[1] = v10;
  v29[2] = *(__n128 *)&a3->tx;
  v11 = *(float64x2_t *)&a4->c;
  v28[0] = *(float64x2_t *)&a4->a;
  v28[1] = v11;
  v28[2] = *(float64x2_t *)&a4->tx;
  CGPathRandomAccess::recreate_path_from_clipper(a2, (uint64_t *)a1 + 1, v29, v28, (CGPathOutputFiltering *)&Mutable, 0);
  v13 = (_QWORD *)*((_QWORD *)a1 + 4);
  v12 = (_QWORD *)*((_QWORD *)a1 + 5);
  while (v13 != v12)
  {
    v14 = *v13;
    v15 = (uint64_t *)(*v13 + 8);
    v16 = *(__n128 *)&a3->c;
    v27[0] = *(__n128 *)&a3->a;
    v27[1] = v16;
    v27[2] = *(__n128 *)&a3->tx;
    v17 = *(float64x2_t *)&a4->c;
    v26[0] = *(float64x2_t *)&a4->a;
    v26[1] = v17;
    v26[2] = *(float64x2_t *)&a4->tx;
    CGPathRandomAccess::recreate_path_from_clipper(a2, v15, v27, v26, (CGPathOutputFiltering *)&Mutable, 0);
    v18 = *(const ClipperLib::PolyNode ***)(v14 + 32);
    v19 = *(const ClipperLib::PolyNode ***)(v14 + 40);
    while (v18 != v19)
    {
      v20 = *v18;
      v21 = *(_OWORD *)&a3->c;
      *(_OWORD *)&v25.a = *(_OWORD *)&a3->a;
      *(_OWORD *)&v25.c = v21;
      *(_OWORD *)&v25.tx = *(_OWORD *)&a3->tx;
      v22 = *(_OWORD *)&a4->c;
      *(_OWORD *)&v24.a = *(_OWORD *)&a4->a;
      *(_OWORD *)&v24.c = v22;
      *(_OWORD *)&v24.tx = *(_OWORD *)&a4->tx;
      append_tree_path_component(v20, a2, &v25, &v24, a5);
      ++v18;
    }
    ++v13;
  }
  v23 = CGPathOutputFiltering::cg_path((CGPathOutputFiltering *)&Mutable);
  CFArrayAppendValue(a5, v23);
  if (Mutable)
    CFRelease(Mutable);
}

void sub_184ACE0F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 - 104);
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

_QWORD *__Block_byref_object_copy_(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;

  v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  result[7] = a2[7];
  a2[5] = 0;
  a2[6] = 0;
  a2[7] = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 40);
  if (v1)
    operator delete(v1);
}

__n128 __Block_byref_object_copy__10(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__11(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ___ZNK25CGPathRandomAccessSubpath20append_range_to_pathEddbb7CGPoint17CGAffineTransformR21CGPathOutputFiltering_block_invoke_12(uint64_t a1, double a2, double a3)
{
  uint64_t *v6;
  _QWORD *v7;
  unint64_t v8;
  double *v9;
  double *v10;
  double *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  double *v18;
  unint64_t v19;
  char v20;

  v6 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v20 = 0;
  std::vector<BOOL>::push_back(v6, &v20);
  v7 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8);
  v9 = (double *)v7[6];
  v8 = v7[7];
  if ((unint64_t)v9 >= v8)
  {
    v11 = (double *)v7[5];
    v12 = ((char *)v9 - (char *)v11) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
    v14 = v8 - (_QWORD)v11;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    v15 = (unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0;
    v16 = 0xFFFFFFFFFFFFFFFLL;
    if (!v15)
      v16 = v13;
    if (v16)
    {
      v16 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<CGPoint>>(v16);
      v11 = (double *)v7[5];
      v9 = (double *)v7[6];
    }
    else
    {
      v17 = 0;
    }
    v18 = (double *)(v16 + 16 * v12);
    v19 = v16 + 16 * v17;
    *v18 = a2;
    v18[1] = a3;
    v10 = v18 + 2;
    if (v9 != v11)
    {
      do
      {
        *((_OWORD *)v18 - 1) = *((_OWORD *)v9 - 1);
        v18 -= 2;
        v9 -= 2;
      }
      while (v9 != v11);
      v11 = (double *)v7[5];
    }
    v7[5] = v18;
    v7[6] = v10;
    v7[7] = v19;
    if (v11)
      operator delete(v11);
  }
  else
  {
    *v9 = a2;
    v9[1] = a3;
    v10 = v9 + 2;
  }
  v7[6] = v10;
}

void ___ZNK25CGPathRandomAccessSubpath20append_range_to_pathEddbb7CGPoint17CGAffineTransformR21CGPathOutputFiltering_block_invoke_2_14(uint64_t a1, char *a2)
{
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *__p[5];

  v4 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  LOBYTE(__p[0]) = 1;
  std::vector<BOOL>::push_back(v4, __p);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(char **)(v5 + 48);
  v7 = (void *)(v5 + 56);
  v8 = *(_QWORD *)(v5 + 56);
  if (v8 - (uint64_t)v6 >= 64)
  {
    memmove(*(void **)(v5 + 48), a2, 0x40uLL);
    *(_QWORD *)(v5 + 48) = v6 + 64;
  }
  else
  {
    v11 = *(_QWORD *)(v5 + 40);
    v10 = (void **)(v5 + 40);
    v9 = v11;
    v12 = (uint64_t)&v6[-v11] >> 4;
    if ((unint64_t)(v12 + 4) >> 60)
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
    v13 = v8 - v9;
    v14 = v13 >> 3;
    if (v13 >> 3 <= (unint64_t)(v12 + 4))
      v14 = v12 + 4;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    __p[4] = v7;
    if (v15)
      v15 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<CGPoint>>(v15);
    else
      v16 = 0;
    v17 = 0;
    v18 = v15 + 16 * v12;
    __p[0] = (void *)v15;
    __p[1] = (void *)v18;
    __p[3] = (void *)(v15 + 16 * v16);
    do
    {
      *(_OWORD *)(v18 + v17) = *(_OWORD *)&a2[v17];
      v17 += 16;
    }
    while (v17 != 64);
    __p[2] = (void *)(v18 + 64);
    std::vector<CGPoint>::__swap_out_circular_buffer(v10, (uint64_t)__p, v6);
    if (__p[0])
      operator delete(__p[0]);
  }
}

void std::vector<BOOL>::push_back(uint64_t *a1, _BYTE *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a1[1];
  v5 = a1[2];
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0)
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
    v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64)
      v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v4 <= 0x3FFFFFFFFFFFFFFELL)
      v7 = v6;
    else
      v7 = 0x7FFFFFFFFFFFFFFFLL;
    std::vector<BOOL>::reserve((uint64_t)a1, v7);
    v4 = a1[1];
  }
  a1[1] = v4 + 1;
  v8 = *a1;
  v9 = v4 >> 6;
  v10 = 1 << v4;
  if (*a2)
    v11 = *(_QWORD *)(v8 + 8 * v9) | v10;
  else
    v11 = *(_QWORD *)(v8 + 8 * v9) & ~v10;
  *(_QWORD *)(v8 + 8 * v9) = v11;
}

void *std::__allocate_at_least[abi:se180100]<std::allocator<CGPoint>>(unint64_t a1)
{
  if (a1 >> 60)
    std::__throw_bad_array_new_length[abi:se180100]();
  return operator new(16 * a1);
}

void *std::vector<CGPoint>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  void *v5;
  char *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(void **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v9 = *(_QWORD *)(a2 + 8);
    do
    {
      v7 = (void *)(v9 - 16);
      *(_OWORD *)(v9 - 16) = *((_OWORD *)v8 - 1);
      v8 -= 16;
      v9 -= 16;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(void **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

void std::vector<BOOL>::reserve(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  _QWORD *v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  __int128 v8;
  unint64_t v9;
  int v10;
  int v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  if (a2 > *(_QWORD *)(a1 + 16) << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
    v3 = (uint64_t *)std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(((a2 - 1) >> 6) + 1);
    v4 = *(_QWORD **)a1;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = v5 & 0x3F;
    *(_QWORD *)&v8 = v5;
    *((_QWORD *)&v8 + 1) = v7;
    v9 = (v5 - 1) >> 6;
    if (v5 < 0x41)
      v9 = 0;
    v3[v9] = 0;
    if (v5 > 0x3F || (v5 & 0x3F) != 0)
    {
      v10 = 0;
      v11 = 0;
      v12 = &v4[v5 >> 6];
      v13 = v3;
      do
      {
        v14 = 1 << v10;
        if (((*v4 >> v11) & 1) != 0)
          v15 = *v13 | v14;
        else
          v15 = *v13 & ~v14;
        *v13 = v15;
        v4 += v11 == 63;
        if (v11 == 63)
          v11 = 0;
        else
          ++v11;
        v13 += v10 == 63;
        if (v10 == 63)
          v10 = 0;
        else
          ++v10;
      }
      while (v4 != v12 || v11 != v6);
    }
    v16 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v3;
    *(_OWORD *)(a1 + 8) = v8;
    if (v16)
      operator delete(v16);
  }
}

CGPathRef CGPathCreateCopyByNormalizing(CGPathRef path, BOOL evenOddFillRule)
{
  _BOOL4 v2;
  CFTypeID v4;
  const CGPath *v5;
  __n128 v7[3];
  __n128 v8;
  __n128 v9;
  __n128 v10;
  uint64_t *v11[3];
  _QWORD v12[3];

  if (!path)
    return 0;
  v2 = evenOddFillRule;
  if (!CGPathDisableTypeValidation)
  {
    v4 = CFGetTypeID(path);
    if (v4 != CGPathGetTypeID())
      return 0;
  }
  memset(v12, 0, sizeof(v12));
  memset(v11, 0, sizeof(v11));
  v9 = 0u;
  v10 = 0u;
  v8 = 0u;
  clip<std::vector<std::vector<ClipperLib::IntPoint>>>(&v8, 1, path, v2, 0, v2, 1, (CGPathRandomAccess *)v12, (uint64_t *)v11);
  v7[0] = v8;
  v7[1] = v9;
  v7[2] = v10;
  v5 = (const CGPath *)CGPathRandomAccess::new_cgpath_from_clipper(v12, v11, v7);
  v8.n128_u64[0] = (unint64_t)v11;
  std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:se180100]((void ***)&v8);
  v8.n128_u64[0] = (unint64_t)v12;
  std::vector<CGPathRandomAccessSubpath>::__destroy_vector::operator()[abi:se180100]((void ***)&v8);
  return v5;
}

void sub_184ACE7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  uint64_t v17;

  a17 = (void **)(v17 - 80);
  std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:se180100](&a17);
  a17 = (void **)(v17 - 56);
  std::vector<CGPathRandomAccessSubpath>::__destroy_vector::operator()[abi:se180100](&a17);
  _Unwind_Resume(a1);
}

void clip<std::vector<std::vector<ClipperLib::IntPoint>>>(_OWORD *a1, int a2, CGPathRef path, int a4, const CGPath *a5, int a6, int a7, CGPathRandomAccess *a8, uint64_t *a9)
{
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  __int128 v21;
  CFIndex v22;
  CFIndex v23;
  __int128 v24;
  CFIndex v25;
  uint64_t *v26;
  __int128 v27;
  CFIndex v28;
  CFIndex v29;
  __int128 v30;
  CFIndex v31;
  uint64_t *v32;
  uint64_t (**v33)(ClipperLib::Clipper *);
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  int v41;
  uint64_t (**v42)(ClipperLib::Clipper *__hidden);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t (**v51)(ClipperLib::Clipper *__hidden);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  char *v59;
  unint64_t v60;
  char *v61;
  __int128 *v62;
  __int128 v63;
  __int128 v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _OWORD *v68;
  __int128 v69;
  __int128 v70;
  unint64_t v71;
  __int128 v72;
  __int128 v73;
  char *v74;
  unint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char *v83;
  char **exception;
  CGAffineTransform v85;
  CGAffineTransform v86;
  CGAffineTransform v87;
  CGAffineTransform v88;
  uint64_t (**v89)(ClipperLib::Clipper *__hidden);
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 __p;
  uint64_t v94;
  _DWORD v95[2];
  _QWORD v96[4];
  char v97;
  int v98;
  int v99;
  char v100;
  char v101;
  char v102;
  void (*v103)(uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *);
  void *v104;
  __int128 v105;
  __int128 v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int16 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  unint64_t v120;
  void **v121;
  char *v122;
  char *v123;
  void **v124;
  _QWORD *v125;
  CFRange v126;
  CFRange v127;
  CGRect BoundingBox;
  CGRect v129;
  CGRect v130;
  CGRect v131;
  CGRect v132;

  BoundingBox = CGPathGetBoundingBox(path);
  x = BoundingBox.origin.x;
  y = BoundingBox.origin.y;
  width = BoundingBox.size.width;
  height = BoundingBox.size.height;
  if (a5)
  {
    v132 = CGPathGetBoundingBox(a5);
    v129.origin.x = x;
    v129.origin.y = y;
    v129.size.width = width;
    v129.size.height = height;
    v130 = CGRectUnion(v129, v132);
    x = v130.origin.x;
    y = v130.origin.y;
    width = v130.size.width;
    height = v130.size.height;
  }
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  v131.origin.x = x;
  v131.origin.y = y;
  v131.size.width = width;
  v131.size.height = height;
  transform_for_bounds(v131, (uint64_t)a1);
  v108 = 0;
  v109 = 0;
  v110 = 0;
  v112 = 0;
  v113 = 0;
  v114 = 0;
  v115 = 0;
  v116 = 0;
  v117 = 0;
  v105 = 0u;
  v106 = 0u;
  v90 = 0u;
  v91 = 0u;
  v92 = 0u;
  __p = 0u;
  v89 = &off_1E1628CD8;
  v94 = 0;
  v96[0] = v96;
  v96[1] = v96;
  v96[2] = 0;
  v97 = 0;
  v107 = 0;
  v100 = 0;
  v111 = 0;
  v103 = 0;
  v104 = &unk_1E1628D20;
  if (a7)
  {
    v103 = interpolate_intersection_metadata;
    LOBYTE(v111) = 1;
  }
  v102 = 0;
  v21 = a1[1];
  *(_OWORD *)&v88.a = *a1;
  *(_OWORD *)&v88.c = v21;
  *(_OWORD *)&v88.tx = a1[2];
  CGPathRandomAccess::add_path(a8, path, &v88, 1);
  v23 = v22;
  v24 = a1[1];
  *(_OWORD *)&v87.a = *a1;
  *(_OWORD *)&v87.c = v24;
  *(_OWORD *)&v87.tx = a1[2];
  v126.location = v25;
  v126.length = v23;
  v26 = CGPathRandomAccess::clipper_paths_for_subpath_range(a8, v126, &v87, 1);
  ClipperLib::ClipperBase::AddPaths((uint64_t)&v89 + (_QWORD)*(v89 - 3), v26, 0, 1);
  v121 = (void **)v26;
  std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:se180100](&v121);
  MEMORY[0x186DC23C4](v26, 0x20C40960023A9);
  if (a5)
  {
    v27 = a1[1];
    *(_OWORD *)&v86.a = *a1;
    *(_OWORD *)&v86.c = v27;
    *(_OWORD *)&v86.tx = a1[2];
    CGPathRandomAccess::add_path(a8, a5, &v86, 1);
    v29 = v28;
    v30 = a1[1];
    *(_OWORD *)&v85.a = *a1;
    *(_OWORD *)&v85.c = v30;
    *(_OWORD *)&v85.tx = a1[2];
    v127.location = v31;
    v127.length = v29;
    v32 = CGPathRandomAccess::clipper_paths_for_subpath_range(a8, v127, &v85, 1);
    ClipperLib::ClipperBase::AddPaths((uint64_t)&v89 + (_QWORD)*(v89 - 3), v32, 1, 1);
    v121 = (void **)v32;
    std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:se180100](&v121);
    MEMORY[0x186DC23C4](v32, 0x20C40960023A9);
  }
  if (!v97)
  {
    v33 = v89;
    if (*((_BYTE *)*(v89 - 3) + (_QWORD)&v94 + 1))
    {
      exception = (char **)__cxa_allocate_exception(0x20uLL);
      ClipperLib::clipperException::clipperException(exception, "Error: PolyTree struct is needed for open path clipping.");
    }
    v34 = a4 ^ 1;
    v35 = a6 ^ 1;
    v97 = 1;
    v37 = *a9;
    v36 = a9[1];
    if (v36 != *a9)
    {
      v38 = a9[1];
      do
      {
        v40 = *(void **)(v38 - 24);
        v38 -= 24;
        v39 = v40;
        if (v40)
        {
          *(_QWORD *)(v36 - 16) = v39;
          operator delete(v39);
        }
        v36 = v38;
      }
      while (v38 != v37);
      a9[1] = v37;
      v33 = v89;
    }
    v99 = v34;
    v98 = v35;
    v95[0] = a2;
    v101 = 0;
    v41 = (*v33)((ClipperLib::Clipper *)&v89);
    v42 = v89;
    v43 = (uint64_t)*(v89 - 3);
    if (v41)
    {
      v44 = *(_QWORD *)((char *)v95 + v43);
      v45 = *(_QWORD *)((char *)v96 + v43);
      v46 = v45 - v44;
      v47 = *a9;
      if (0xAAAAAAAAAAAAAAABLL * ((a9[2] - *a9) >> 3) < (v45 - v44) >> 3)
      {
        if ((unint64_t)v46 >= 0x5555555555555551)
          std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
        v48 = a9[1];
        v125 = a9 + 2;
        v121 = (void **)std::__allocate_at_least[abi:se180100]<std::allocator<std::vector<ClipperLib::IntPoint>>>(v46 >> 3);
        v122 = (char *)v121 + v48 - v47;
        v123 = v122;
        v124 = &v121[3 * v49];
        std::vector<std::vector<ClipperLib::IntPoint>>::__swap_out_circular_buffer(a9, &v121);
        std::__split_buffer<std::vector<ClipperLib::IntPoint>>::~__split_buffer((uint64_t)&v121);
        v42 = v89;
        v43 = (uint64_t)*(v89 - 3);
        v44 = *(_QWORD *)((char *)v95 + v43);
        v45 = *(_QWORD *)((char *)v96 + v43);
      }
      if (v45 != v44)
      {
        v50 = 0;
        v51 = v42 - 3;
        do
        {
          if (*(_QWORD *)(*(_QWORD *)(v44 + 8 * v50) + 24))
          {
            v118 = 0;
            v119 = 0;
            v120 = 0;
            v52 = *(_QWORD *)((char *)v95 + (_QWORD)*v51);
            if (v50 >= (*(_QWORD *)((char *)v96 + (_QWORD)*v51) - v52) >> 3)
            {
              __break(1u);
              return;
            }
            v53 = *(_QWORD *)(*(_QWORD *)(v52 + 8 * v50) + 24);
            v54 = *(_QWORD *)(v53 + 64);
            if (v54)
            {
              LODWORD(v55) = 0;
              v56 = *(_QWORD *)(v53 + 64);
              do
              {
                v57 = v55;
                v55 = (v55 + 1);
                v56 = *(_QWORD *)(v56 + 56);
              }
              while (v56 != v54);
              if (v57)
              {
                std::vector<ClipperLib::IntPoint>::reserve((void **)&v118, v55);
                v58 = 0;
                v59 = v119;
                v60 = v120;
                v61 = v118;
                do
                {
                  v62 = (__int128 *)(v54 + 8);
                  if ((unint64_t)v59 >= v60)
                  {
                    v65 = 0xAAAAAAAAAAAAAAABLL * ((v59 - v61) >> 4) + 1;
                    if (v65 > 0x555555555555555)
                    {
                      v118 = v61;
                      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
                    }
                    if (0x5555555555555556 * ((uint64_t)(v60 - (_QWORD)v61) >> 4) > v65)
                      v65 = 0x5555555555555556 * ((uint64_t)(v60 - (_QWORD)v61) >> 4);
                    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - (_QWORD)v61) >> 4) >= 0x2AAAAAAAAAAAAAALL)
                      v66 = 0x555555555555555;
                    else
                      v66 = v65;
                    if (v66)
                      v66 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<ClipperLib::IntPoint>>(v66);
                    else
                      v67 = 0;
                    v68 = (_OWORD *)(v66 + 16 * ((v59 - v61) >> 4));
                    v69 = *v62;
                    v70 = *(_OWORD *)(v54 + 40);
                    v68[1] = *(_OWORD *)(v54 + 24);
                    v68[2] = v70;
                    *v68 = v69;
                    if (v59 == v61)
                    {
                      v74 = (char *)(v66 + 16 * ((v59 - v61) >> 4));
                    }
                    else
                    {
                      v71 = v66 + 16 * ((v59 - v61) >> 4);
                      do
                      {
                        v72 = *((_OWORD *)v59 - 3);
                        v73 = *((_OWORD *)v59 - 1);
                        v74 = (char *)(v71 - 48);
                        *(_OWORD *)(v71 - 32) = *((_OWORD *)v59 - 2);
                        *(_OWORD *)(v71 - 16) = v73;
                        *(_OWORD *)(v71 - 48) = v72;
                        v59 -= 48;
                        v71 -= 48;
                      }
                      while (v59 != v61);
                    }
                    v60 = v66 + 48 * v67;
                    v59 = (char *)(v68 + 3);
                    if (v61)
                      operator delete(v61);
                    v61 = v74;
                  }
                  else
                  {
                    v63 = *v62;
                    v64 = *(_OWORD *)(v54 + 40);
                    *((_OWORD *)v59 + 1) = *(_OWORD *)(v54 + 24);
                    *((_OWORD *)v59 + 2) = v64;
                    *(_OWORD *)v59 = v63;
                    v59 += 48;
                  }
                  v54 = *(_QWORD *)(v54 + 64);
                  ++v58;
                }
                while (v58 != (_DWORD)v55);
                v119 = v59;
                v120 = v60;
                v118 = v61;
                v76 = (_QWORD *)a9[1];
                v75 = a9[2];
                if ((unint64_t)v76 >= v75)
                {
                  v78 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v76 - *a9) >> 3);
                  v79 = v78 + 1;
                  if (v78 + 1 > 0xAAAAAAAAAAAAAAALL)
                    std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
                  v80 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v75 - *a9) >> 3);
                  if (2 * v80 > v79)
                    v79 = 2 * v80;
                  if (v80 >= 0x555555555555555)
                    v81 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v81 = v79;
                  v125 = a9 + 2;
                  if (v81)
                    v81 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<std::vector<ClipperLib::IntPoint>>>(v81);
                  else
                    v82 = 0;
                  v83 = (char *)(v81 + 24 * v78);
                  v121 = (void **)v81;
                  v122 = v83;
                  v123 = v83;
                  v124 = (void **)(v81 + 24 * v82);
                  *(_QWORD *)v83 = 0;
                  *((_QWORD *)v83 + 1) = 0;
                  *((_QWORD *)v83 + 2) = 0;
                  std::vector<ClipperLib::IntPoint>::__init_with_size[abi:se180100]<ClipperLib::IntPoint*,ClipperLib::IntPoint*>(v83, v61, (uint64_t)v59, 0xAAAAAAAAAAAAAAABLL * ((v59 - v61) >> 4));
                  v123 += 24;
                  std::vector<std::vector<ClipperLib::IntPoint>>::__swap_out_circular_buffer(a9, &v121);
                  v77 = (_QWORD *)a9[1];
                  std::__split_buffer<std::vector<ClipperLib::IntPoint>>::~__split_buffer((uint64_t)&v121);
                }
                else
                {
                  *v76 = 0;
                  v76[1] = 0;
                  v76[2] = 0;
                  std::vector<ClipperLib::IntPoint>::__init_with_size[abi:se180100]<ClipperLib::IntPoint*,ClipperLib::IntPoint*>(v76, v61, (uint64_t)v59, 0xAAAAAAAAAAAAAAABLL * ((v59 - v61) >> 4));
                  v77 = v76 + 3;
                  a9[1] = (uint64_t)(v76 + 3);
                }
                a9[1] = (uint64_t)v77;
                if (v118)
                  operator delete(v118);
              }
            }
            v42 = v89;
          }
          v51 = v42 - 3;
          v43 = (uint64_t)*(v42 - 3);
          ++v50;
          v44 = *(_QWORD *)((char *)v95 + v43);
        }
        while (v50 < (*(_QWORD *)((char *)v96 + v43) - v44) >> 3);
      }
    }
    ClipperLib::ClipperBase::DisposeAllOutRecs((uint64_t)&v89 + v43);
    v97 = 0;
  }
  v89 = &off_1E1628CD8;
  v104 = &unk_1E1628D20;
  std::__list_imp<long long>::clear(v96);
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  if (*((_QWORD *)&v91 + 1))
  {
    *(_QWORD *)&v92 = *((_QWORD *)&v91 + 1);
    operator delete(*((void **)&v91 + 1));
  }
  if ((_QWORD)v90)
  {
    *((_QWORD *)&v90 + 1) = v90;
    operator delete((void *)v90);
  }
  ClipperLib::ClipperBase::~ClipperBase((ClipperLib::ClipperBase *)&v104);
}

void sub_184ACEFD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  void *v37;

  __cxa_free_exception(v37);
  ClipperLib::Clipper::~Clipper((ClipperLib::Clipper *)&a37);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:se180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (char *)v1[1];
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 3);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 2) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<CGPathRandomAccessSubpath>::__destroy_vector::operator()[abi:se180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::allocator<CGPathRandomAccessSubpath>::destroy[abi:se180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<CGPathRandomAccessSubpath>::destroy[abi:se180100](uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
}

void ClipperLib::Clipper::~Clipper(ClipperLib::Clipper *this)
{
  ClipperLib::ClipperBase *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_1E1628CD8;
  *((_QWORD *)this + 18) = &unk_1E1628D20;
  v2 = (ClipperLib::Clipper *)((char *)this + 144);
  std::__list_imp<long long>::clear((_QWORD *)this + 11);
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 8) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {
    *((_QWORD *)this + 2) = v5;
    operator delete(v5);
  }
  ClipperLib::ClipperBase::~ClipperBase(v2);
}

{
  ClipperLib::ClipperBase *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_1E1628CD8;
  *((_QWORD *)this + 18) = &unk_1E1628D20;
  v2 = (ClipperLib::Clipper *)((char *)this + 144);
  std::__list_imp<long long>::clear((_QWORD *)this + 11);
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 8) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {
    *((_QWORD *)this + 2) = v5;
    operator delete(v5);
  }
  ClipperLib::ClipperBase::~ClipperBase(v2);
  JUMPOUT(0x186DC23C4);
}

void *std::__allocate_at_least[abi:se180100]<std::allocator<std::vector<ClipperLib::IntPoint>>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:se180100]();
  return operator new(24 * a1);
}

void *std::__allocate_at_least[abi:se180100]<std::allocator<ClipperLib::IntPoint>>(unint64_t a1)
{
  if (a1 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:se180100]();
  return operator new(48 * a1);
}

__n128 __Block_byref_object_copy__24(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

__n128 __Block_byref_object_copy__17(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__18(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

__n128 __Block_byref_object_copy__20(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

void ___ZN18CGPathRandomAccess8add_pathEPK6CGPath17CGAffineTransformb_block_invoke_22(uint64_t a1, uint64_t a2)
{
  char **v4;
  char *v5;
  unint64_t v6;
  char *v7;
  _QWORD *v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CGPoint *v14;
  CGPoint *v15;
  __int128 v16;
  char **v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char **v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char v41;
  _QWORD *v42;
  float64x2_t *v43;
  float64x2_t *v44;
  float64x2_t v45;
  unint64_t v46;
  _OWORD *f64;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  char *v61;
  char *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  void **v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  BOOL v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  _BYTE *v100;
  _BYTE *v101;
  uint64_t v102;
  char v103;
  _QWORD *v104;
  _OWORD *v105;
  unint64_t v106;
  _OWORD *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  char **v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  char *v126;
  char *v127;
  char *v128;
  char *v129;
  uint64_t v130;
  char v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  char *v138;
  char *v139;
  char *v140;
  char *v141;
  _QWORD *v142;
  _OWORD *v143;
  unint64_t v144;
  _OWORD *v145;
  _OWORD *v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  float64x2_t *v153;
  unint64_t v154;
  _QWORD *v155;
  float64x2_t v156;
  unint64_t v157;
  char *v158;
  _OWORD *v159;
  char *v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  void *v165;
  uint64_t v166;
  float64x2_t *v167;
  unint64_t v168;
  unint64_t v169;
  _OWORD *v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  _OWORD *v177;
  unint64_t v178;
  char *v179;
  char *v180;
  _OWORD *v181;
  unint64_t v182;
  char *v183;
  char *v184;
  char *v185;
  float64x2_t v186;
  float64x2_t v187;
  CGAffineTransform v188;
  void *__p[5];
  CGPoint v190;
  CGPoint v191;
  CGPoint v192;

  switch(*(_DWORD *)a2)
  {
    case 0:
      v4 = *(char ***)(a1 + 56);
      v5 = v4[1];
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v5 - *v4) >> 3)) <= *(_QWORD *)(a1 + 64) || !*(_BYTE *)(a1 + 120))
        goto LABEL_6;
      if (*v4 == v5)
        goto LABEL_181;
      CGPathRandomAccessSubpath::close_if_needed((CGPathRandomAccessSubpath *)(v5 - 56));
      v5 = v4[1];
LABEL_6:
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v5 >= v6)
      {
        v73 = *v4;
        v74 = 0x6DB6DB6DB6DB6DB7 * ((v5 - *v4) >> 3);
        v75 = v74 + 1;
        if ((unint64_t)(v74 + 1) > 0x492492492492492)
          std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
        v76 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6 - (_QWORD)v73) >> 3);
        if (2 * v76 > v75)
          v75 = 2 * v76;
        if (v76 >= 0x249249249249249)
          v77 = 0x492492492492492;
        else
          v77 = v75;
        if (v77 > 0x492492492492492)
          std::__throw_bad_array_new_length[abi:se180100]();
        v78 = 56 * v77;
        v79 = (char *)operator new(56 * v77);
        v80 = &v79[56 * v74];
        v81 = &v79[v78];
        *((_QWORD *)v80 + 6) = 0;
        *(_OWORD *)v80 = 0u;
        *((_OWORD *)v80 + 1) = 0u;
        *((_OWORD *)v80 + 2) = 0u;
        v80[48] = 1;
        v7 = v80 + 56;
        if (v5 == v73)
        {
          *v4 = v80;
          v4[1] = v7;
          v4[2] = v81;
        }
        else
        {
          v82 = 0;
          do
          {
            v83 = &v80[v82];
            v84 = &v5[v82];
            *((_QWORD *)v83 - 7) = 0;
            *((_QWORD *)v83 - 6) = 0;
            *((_QWORD *)v83 - 5) = 0;
            *(_OWORD *)(v83 - 56) = *(_OWORD *)&v5[v82 - 56];
            *((_QWORD *)v83 - 5) = *(_QWORD *)&v5[v82 - 40];
            *((_QWORD *)v84 - 7) = 0;
            *((_QWORD *)v84 - 6) = 0;
            *((_QWORD *)v84 - 5) = 0;
            *((_QWORD *)v83 - 4) = 0;
            *((_QWORD *)v83 - 3) = 0;
            *((_QWORD *)v83 - 2) = 0;
            *((_OWORD *)v83 - 2) = *(_OWORD *)&v5[v82 - 32];
            *((_QWORD *)v83 - 2) = *(_QWORD *)&v5[v82 - 16];
            *((_QWORD *)v84 - 4) = 0;
            *((_QWORD *)v84 - 3) = 0;
            *((_QWORD *)v84 - 2) = 0;
            *(v83 - 8) = v5[v82 - 8];
            v82 -= 56;
          }
          while (&v5[v82] != v73);
          v5 = *v4;
          v85 = (uint64_t)v4[1];
          *v4 = &v80[v82];
          v4[1] = v7;
          v4[2] = v81;
          while ((char *)v85 != v5)
          {
            v85 -= 56;
            std::allocator<CGPathRandomAccessSubpath>::destroy[abi:se180100](v85);
          }
        }
        if (v5)
          operator delete(v5);
      }
      else
      {
        *((_QWORD *)v5 + 6) = 0;
        *((_OWORD *)v5 + 1) = 0u;
        *((_OWORD *)v5 + 2) = 0u;
        *(_OWORD *)v5 = 0u;
        v5[48] = 1;
        v7 = v5 + 56;
      }
      v4[1] = v7;
      if (*v4 == v7)
        goto LABEL_181;
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v7 - 56;
      v116 = ~*(_QWORD *)(a1 + 64) + 0x6DB6DB6DB6DB6DB7 * ((v4[1] - *v4) >> 3);
      v117 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
      if (v116 >= (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) - v117) >> 4)
        goto LABEL_181;
      v118 = (unint64_t *)(v117 + 16 * v116);
      v119 = *v118;
      v120 = v118[1];
      v121 = *(char ***)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      if (*v118 <= (v121[2] - *v121) >> 4)
        goto LABEL_114;
      if (v119 >> 60)
        goto LABEL_183;
      v122 = v121[1] - *v121;
      v123 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<CGPoint>>(v119);
      v124 = &v123[v122];
      v126 = &v123[16 * v125];
      v128 = *v121;
      v127 = v121[1];
      v129 = v124;
      if (v127 != *v121)
      {
        do
        {
          v130 = *((_QWORD *)v127 - 2);
          v127 -= 16;
          v131 = v127[8];
          *((_QWORD *)v129 - 2) = v130;
          v129 -= 16;
          v129[8] = v131;
        }
        while (v127 != v128);
        v127 = *v121;
      }
      *v121 = v129;
      v121[1] = v124;
      v121[2] = v126;
      if (v127)
        operator delete(v127);
LABEL_114:
      v132 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      v133 = v132[3];
      if (v120 <= (v132[5] - v133) >> 4)
        goto LABEL_121;
      if (v120 >> 60)
        goto LABEL_182;
      v134 = v132[4] - v133;
      v135 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<CGPoint>>(v120);
      v136 = &v135[v134 & 0xFFFFFFFFFFFFFFF0];
      v138 = &v135[16 * v137];
      v140 = (char *)v132[3];
      v139 = (char *)v132[4];
      v141 = v136;
      if (v139 != v140)
      {
        do
        {
          *((_OWORD *)v141 - 1) = *((_OWORD *)v139 - 1);
          v141 -= 16;
          v139 -= 16;
        }
        while (v139 != v140);
        v139 = (char *)v132[3];
      }
      v132[3] = v141;
      v132[4] = v136;
      v132[5] = v138;
      if (v139)
        operator delete(v139);
LABEL_121:
      *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40) = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v142 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      v143 = (_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
      v145 = (_OWORD *)v142[4];
      v144 = v142[5];
      if ((unint64_t)v145 < v144)
      {
        *v145 = *v143;
        v146 = v145 + 1;
LABEL_172:
        v142[4] = v146;
        return;
      }
      v147 = v142[3];
      v148 = ((uint64_t)v145 - v147) >> 4;
      v149 = v148 + 1;
      if (!((unint64_t)(v148 + 1) >> 60))
      {
        v150 = v144 - v147;
        if (v150 >> 3 > v149)
          v149 = v150 >> 3;
        if ((unint64_t)v150 >= 0x7FFFFFFFFFFFFFF0)
          v151 = 0xFFFFFFFFFFFFFFFLL;
        else
          v151 = v149;
        if (v151)
          v151 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<CGPoint>>(v151);
        else
          v152 = 0;
        v181 = (_OWORD *)(v151 + 16 * v148);
        v182 = v151 + 16 * v152;
        *v181 = *v143;
        v146 = v181 + 1;
        v184 = (char *)v142[3];
        v183 = (char *)v142[4];
        if (v183 != v184)
        {
          do
          {
            *--v181 = *((_OWORD *)v183 - 1);
            v183 -= 16;
          }
          while (v183 != v184);
          v183 = (char *)v142[3];
        }
        v142[3] = v181;
        v142[4] = v146;
        v142[5] = v182;
        if (v183)
          operator delete(v183);
        goto LABEL_172;
      }
      goto LABEL_182;
    case 1:
      v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      v9 = (_BYTE *)*v8;
      v10 = (_BYTE *)v8[1];
      v11 = (uint64_t)&v10[-*v8];
      if ((unint64_t)v11 < 0x11)
        goto LABEL_20;
      if (v9 == v10)
        goto LABEL_181;
      if (*(v10 - 8))
        goto LABEL_20;
      v12 = v8[3];
      v13 = v8[4];
      if ((unint64_t)(v13 - v12) <= 0x10 || v12 == v13)
        goto LABEL_181;
      v190 = *(CGPoint *)(v13 - 32);
      v191 = *(CGPoint *)(v13 - 16);
      v14 = (CGPoint *)(v13 - 16);
      v15 = *(CGPoint **)(a2 + 8);
      v192 = *v15;
      v16 = *(_OWORD *)(a1 + 88);
      *(_OWORD *)&v188.a = *(_OWORD *)(a1 + 72);
      *(_OWORD *)&v188.c = v16;
      *(_OWORD *)&v188.tx = *(_OWORD *)(a1 + 104);
      if (points_are_nearly_collinear(v190, v191, v192, &v188))
      {
        *v14 = *v15;
        return;
      }
LABEL_20:
      v27 = v8[2];
      v28 = ((uint64_t)(v8[4] - v8[3]) >> 4) - 1;
      if ((unint64_t)v10 < v27)
      {
        *(_QWORD *)v10 = v28;
        v10[8] = 0;
        v29 = v10 + 16;
        goto LABEL_88;
      }
      v93 = (v11 >> 4) + 1;
      if (!(v93 >> 60))
      {
        v94 = v27 - (_QWORD)v9;
        if (v94 >> 3 > v93)
          v93 = v94 >> 3;
        if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF0)
          v95 = 0xFFFFFFFFFFFFFFFLL;
        else
          v95 = v93;
        v96 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<CGPoint>>(v95);
        v97 = &v96[16 * (v11 >> 4)];
        v99 = &v96[16 * v98];
        *(_QWORD *)v97 = v28;
        v97[8] = 0;
        v29 = v97 + 16;
        v101 = (_BYTE *)*v8;
        v100 = (_BYTE *)v8[1];
        if (v100 != (_BYTE *)*v8)
        {
          do
          {
            v102 = *((_QWORD *)v100 - 2);
            v100 -= 16;
            v103 = v100[8];
            *((_QWORD *)v97 - 2) = v102;
            v97 -= 16;
            v97[8] = v103;
          }
          while (v100 != v101);
          v100 = (_BYTE *)*v8;
        }
        *v8 = v97;
        v8[1] = v29;
        v8[2] = v99;
        if (v100)
          operator delete(v100);
LABEL_88:
        v8[1] = v29;
        v104 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
        v105 = *(_OWORD **)(a2 + 8);
        v107 = (_OWORD *)v104[4];
        v106 = v104[5];
        if ((unint64_t)v107 >= v106)
        {
          v108 = v104[3];
          v109 = ((uint64_t)v107 - v108) >> 4;
          v110 = v109 + 1;
          if (!((unint64_t)(v109 + 1) >> 60))
          {
            v111 = v106 - v108;
            if (v111 >> 3 > v110)
              v110 = v111 >> 3;
            if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFF0)
              v112 = 0xFFFFFFFFFFFFFFFLL;
            else
              v112 = v110;
            if (v112)
              v112 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<CGPoint>>(v112);
            else
              v113 = 0;
            v177 = (_OWORD *)(v112 + 16 * v109);
            v178 = v112 + 16 * v113;
            *v177 = *v105;
            v170 = v177 + 1;
            v185 = (char *)v104[3];
            v179 = (char *)v104[4];
            if (v179 == v185)
              goto LABEL_177;
            do
            {
              *--v177 = *((_OWORD *)v179 - 1);
              v179 -= 16;
            }
            while (v179 != v185);
LABEL_176:
            v179 = (char *)v104[3];
LABEL_177:
            v104[3] = v177;
            v104[4] = v170;
            v104[5] = v178;
            if (v179)
              operator delete(v179);
            goto LABEL_179;
          }
          goto LABEL_182;
        }
        goto LABEL_153;
      }
      goto LABEL_183;
    case 2:
      v17 = *(char ***)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      v18 = ((v17[4] - v17[3]) >> 4) - 1;
      v20 = (unint64_t)v17[1];
      v19 = (unint64_t)v17[2];
      if (v20 < v19)
      {
        *(_QWORD *)v20 = v18;
        *(_BYTE *)(v20 + 8) = 1;
        v21 = (char *)(v20 + 16);
        goto LABEL_33;
      }
      v30 = (uint64_t)(v20 - (_QWORD)*v17) >> 4;
      v31 = v30 + 1;
      if (!((unint64_t)(v30 + 1) >> 60))
      {
        v32 = v19 - (_QWORD)*v17;
        if (v32 >> 3 > v31)
          v31 = v32 >> 3;
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0)
          v33 = 0xFFFFFFFFFFFFFFFLL;
        else
          v33 = v31;
        v34 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<CGPoint>>(v33);
        v35 = &v34[16 * v30];
        v37 = &v34[16 * v36];
        *(_QWORD *)v35 = v18;
        v35[8] = 1;
        v21 = v35 + 16;
        v39 = *v17;
        v38 = v17[1];
        if (v38 != *v17)
        {
          do
          {
            v40 = *((_QWORD *)v38 - 2);
            v38 -= 16;
            v41 = v38[8];
            *((_QWORD *)v35 - 2) = v40;
            v35 -= 16;
            v35[8] = v41;
          }
          while (v38 != v39);
          v38 = *v17;
        }
        *v17 = v35;
        v17[1] = v21;
        v17[2] = v37;
        if (v38)
          operator delete(v38);
LABEL_33:
        v17[1] = v21;
        v42 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
        v43 = (float64x2_t *)v42[3];
        v44 = (float64x2_t *)v42[4];
        if (v43 == v44)
        {
LABEL_181:
          __break(1u);
          goto LABEL_182;
        }
        v45 = vmlaq_f64(v44[-1], (float64x2_t)vdupq_n_s64(0x3FE5555555555555uLL), vsubq_f64(*(float64x2_t *)*(_QWORD *)(a2 + 8), v44[-1]));
        v46 = v42[5];
        if ((unint64_t)v44 >= v46)
        {
          v86 = v44 - v43;
          v87 = v86 + 1;
          if ((unint64_t)(v86 + 1) >> 60)
            goto LABEL_182;
          v88 = v46 - (_QWORD)v43;
          if (v88 >> 3 > v87)
            v87 = v88 >> 3;
          v89 = (unint64_t)v88 >= 0x7FFFFFFFFFFFFFF0;
          v90 = 0xFFFFFFFFFFFFFFFLL;
          if (!v89)
            v90 = v87;
          if (v90)
          {
            v186 = v45;
            v91 = std::__allocate_at_least[abi:se180100]<std::allocator<CGPoint>>(v90);
            v45 = v186;
            v90 = (unint64_t)v91;
            v43 = (float64x2_t *)v42[3];
            v44 = (float64x2_t *)v42[4];
          }
          else
          {
            v92 = 0;
          }
          v153 = (float64x2_t *)(v90 + 16 * v86);
          v154 = v90 + 16 * v92;
          *v153 = v45;
          f64 = (_OWORD *)v153[1].f64;
          if (v44 != v43)
          {
            do
            {
              v153[-1] = v44[-1];
              --v153;
              --v44;
            }
            while (v44 != v43);
            v43 = (float64x2_t *)v42[3];
          }
          v42[3] = v153;
          v42[4] = f64;
          v42[5] = v154;
          if (v43)
            operator delete(v43);
        }
        else
        {
          *v44 = v45;
          f64 = (_OWORD *)v44[1].f64;
        }
        v42[4] = f64;
        v155 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
        v156 = vmlaq_f64(*(float64x2_t *)(*(_QWORD *)(a2 + 8) + 16), (float64x2_t)vdupq_n_s64(0x3FE5555555555555uLL), vsubq_f64(*(float64x2_t *)*(_QWORD *)(a2 + 8), *(float64x2_t *)(*(_QWORD *)(a2 + 8) + 16)));
        v158 = (char *)v155[4];
        v157 = v155[5];
        if ((unint64_t)v158 >= v157)
        {
          v160 = (char *)v155[3];
          v161 = (v158 - v160) >> 4;
          v162 = v161 + 1;
          if ((unint64_t)(v161 + 1) >> 60)
            goto LABEL_182;
          v163 = v157 - (_QWORD)v160;
          if (v163 >> 3 > v162)
            v162 = v163 >> 3;
          v89 = (unint64_t)v163 >= 0x7FFFFFFFFFFFFFF0;
          v164 = 0xFFFFFFFFFFFFFFFLL;
          if (!v89)
            v164 = v162;
          if (v164)
          {
            v187 = v156;
            v165 = std::__allocate_at_least[abi:se180100]<std::allocator<CGPoint>>(v164);
            v156 = v187;
            v164 = (unint64_t)v165;
            v160 = (char *)v155[3];
            v158 = (char *)v155[4];
          }
          else
          {
            v166 = 0;
          }
          v167 = (float64x2_t *)(v164 + 16 * v161);
          v168 = v164 + 16 * v166;
          *v167 = v156;
          v159 = (_OWORD *)v167[1].f64;
          if (v158 != v160)
          {
            do
            {
              v167[-1] = *((float64x2_t *)v158 - 1);
              --v167;
              v158 -= 16;
            }
            while (v158 != v160);
            v160 = (char *)v155[3];
          }
          v155[3] = v167;
          v155[4] = v159;
          v155[5] = v168;
          if (v160)
            operator delete(v160);
        }
        else
        {
          *(float64x2_t *)v158 = v156;
          v159 = v158 + 16;
        }
        v155[4] = v159;
        v104 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
        v105 = (_OWORD *)(*(_QWORD *)(a2 + 8) + 16);
        v107 = (_OWORD *)v104[4];
        v169 = v104[5];
        if ((unint64_t)v107 >= v169)
        {
          v171 = v104[3];
          v172 = ((uint64_t)v107 - v171) >> 4;
          v173 = v172 + 1;
          if (!((unint64_t)(v172 + 1) >> 60))
          {
            v174 = v169 - v171;
            if (v174 >> 3 > v173)
              v173 = v174 >> 3;
            if ((unint64_t)v174 >= 0x7FFFFFFFFFFFFFF0)
              v175 = 0xFFFFFFFFFFFFFFFLL;
            else
              v175 = v173;
            if (v175)
              v175 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<CGPoint>>(v175);
            else
              v176 = 0;
            v177 = (_OWORD *)(v175 + 16 * v172);
            v178 = v175 + 16 * v176;
            *v177 = *v105;
            v170 = v177 + 1;
            v180 = (char *)v104[3];
            v179 = (char *)v104[4];
            if (v179 == v180)
              goto LABEL_177;
            do
            {
              *--v177 = *((_OWORD *)v179 - 1);
              v179 -= 16;
            }
            while (v179 != v180);
            goto LABEL_176;
          }
LABEL_182:
          std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
        }
LABEL_153:
        *v107 = *v105;
        v170 = v107 + 1;
LABEL_179:
        v104[4] = v170;
        return;
      }
      goto LABEL_183;
    case 3:
      v22 = *(char ***)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      v23 = ((v22[4] - v22[3]) >> 4) - 1;
      v25 = (unint64_t)v22[1];
      v24 = (unint64_t)v22[2];
      if (v25 >= v24)
      {
        v48 = (uint64_t)(v25 - (_QWORD)*v22) >> 4;
        v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 60)
LABEL_183:
          std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
        v50 = v24 - (_QWORD)*v22;
        if (v50 >> 3 > v49)
          v49 = v50 >> 3;
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0)
          v51 = 0xFFFFFFFFFFFFFFFLL;
        else
          v51 = v49;
        v52 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<CGPoint>>(v51);
        v53 = &v52[16 * v48];
        v55 = &v52[16 * v54];
        *(_QWORD *)v53 = v23;
        v53[8] = 1;
        v26 = v53 + 16;
        v57 = *v22;
        v56 = v22[1];
        if (v56 != *v22)
        {
          do
          {
            v58 = *((_QWORD *)v56 - 2);
            v56 -= 16;
            v59 = v56[8];
            *((_QWORD *)v53 - 2) = v58;
            v53 -= 16;
            v53[8] = v59;
          }
          while (v56 != v57);
          v56 = *v22;
        }
        *v22 = v53;
        v22[1] = v26;
        v22[2] = v55;
        if (v56)
          operator delete(v56);
      }
      else
      {
        *(_QWORD *)v25 = v23;
        *(_BYTE *)(v25 + 8) = 1;
        v26 = (char *)(v25 + 16);
      }
      v22[1] = v26;
      v60 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      v61 = *(char **)(v60 + 32);
      v62 = *(char **)(a2 + 8);
      v63 = (void *)(v60 + 40);
      v64 = *(_QWORD *)(v60 + 40);
      if (v64 - (uint64_t)v61 >= 48)
      {
        memmove(*(void **)(v60 + 32), v62, 0x30uLL);
        *(_QWORD *)(v60 + 32) = v61 + 48;
        return;
      }
      v67 = *(_QWORD *)(v60 + 24);
      v66 = (void **)(v60 + 24);
      v65 = v67;
      v68 = (uint64_t)&v61[-v67] >> 4;
      if ((unint64_t)(v68 + 3) >> 60)
        goto LABEL_182;
      v69 = v64 - v65;
      v70 = v69 >> 3;
      if (v69 >> 3 <= (unint64_t)(v68 + 3))
        v70 = v68 + 3;
      if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF0)
        v71 = 0xFFFFFFFFFFFFFFFLL;
      else
        v71 = v70;
      __p[4] = v63;
      if (v71)
        v71 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<CGPoint>>(v71);
      else
        v72 = 0;
      v114 = 0;
      v115 = v71 + 16 * v68;
      __p[0] = (void *)v71;
      __p[1] = (void *)v115;
      __p[3] = (void *)(v71 + 16 * v72);
      do
      {
        *(_OWORD *)(v115 + v114) = *(_OWORD *)&v62[v114];
        v114 += 16;
      }
      while (v114 != 48);
      __p[2] = (void *)(v115 + 48);
      std::vector<CGPoint>::__swap_out_circular_buffer(v66, (uint64_t)__p, v61);
      if (__p[0])
        operator delete(__p[0]);
      return;
    case 4:
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 48) = 0;
      CGPathRandomAccessSubpath::close_if_needed(*(CGPathRandomAccessSubpath **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)
                                                                               + 24));
      return;
    default:
      return;
  }
}

CGPathRef CGPathCreateCopyByUnioningPath(CGPathRef path, CGPathRef maskPath, BOOL evenOddFillRule)
{
  return (CGPathRef)pathCreateCopyByClippingWithPath(1, path, evenOddFillRule, maskPath, evenOddFillRule);
}

CGPathRef CGPathCreateCopyBySubtractingPath(CGPathRef path, CGPathRef maskPath, BOOL evenOddFillRule)
{
  return (CGPathRef)pathCreateCopyByClippingWithPath(2, path, evenOddFillRule, maskPath, evenOddFillRule);
}

CGPathRef CGPathCreateCopyBySymmetricDifferenceOfPath(CGPathRef path, CGPathRef maskPath, BOOL evenOddFillRule)
{
  return (CGPathRef)pathCreateCopyByClippingWithPath(3, path, evenOddFillRule, maskPath, evenOddFillRule);
}

BOOL CGPathIntersectsPath(CGPathRef path1, CGPathRef path2, BOOL evenOddFillRule)
{
  _BOOL4 v3;
  BOOL v6;
  CFTypeID v7;
  CFTypeID TypeID;
  CFTypeID v9;
  _OWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];

  if (!path1)
    return 0;
  v3 = evenOddFillRule;
  if (CGPathDisableTypeValidation)
  {
    if (!path2)
      return 0;
LABEL_9:
    memset(v15, 0, sizeof(v15));
    v12 = 0;
    v13 = 0;
    v14 = 0;
    clip<std::vector<std::vector<ClipperLib::IntPoint>>>(v11, 0, path1, v3, path2, v3, 0, (CGPathRandomAccess *)v15, &v12);
    v6 = v13 != v12;
    *(_QWORD *)&v11[0] = &v12;
    std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:se180100]((void ***)v11);
    *(_QWORD *)&v11[0] = v15;
    std::vector<CGPathRandomAccessSubpath>::__destroy_vector::operator()[abi:se180100]((void ***)v11);
    return v6;
  }
  v7 = CFGetTypeID(path1);
  TypeID = CGPathGetTypeID();
  v6 = 0;
  if (path2 && v7 == TypeID)
  {
    if (!CGPathDisableTypeValidation)
    {
      v9 = CFGetTypeID(path2);
      if (v9 != CGPathGetTypeID())
        return 0;
    }
    goto LABEL_9;
  }
  return v6;
}

void sub_184AD0078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:se180100]((void ***)va);
  std::vector<CGPathRandomAccessSubpath>::__destroy_vector::operator()[abi:se180100]((void ***)va);
  _Unwind_Resume(a1);
}

const CGPath *CGPathIntersectsRect(const CGPath *cf, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  const CGPath *v5;
  CFTypeID v10;
  const CGPath *v11;
  CGRect v13;

  v5 = cf;
  if (cf)
  {
    if (CGPathDisableTypeValidation || (v10 = CFGetTypeID(cf), v10 == CGPathGetTypeID()))
    {
      v13.origin.x = a2;
      v13.origin.y = a3;
      v13.size.width = a4;
      v13.size.height = a5;
      v11 = CGPathCreateWithRect(v13, 0);
      v5 = (const CGPath *)CGPathIntersectsPath(v5, v11, 1);
      if (v11)
        CFRelease(v11);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

uint64_t *pathCreateCopyByClippingLineWithPath(int a1, CGPathRef path, const void *a3, int a4)
{
  int64_t v4;
  CFTypeRef v9;
  CFTypeID TypeID;
  CFTypeID v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  BOOL v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t *result;
  uint64_t *v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  __int128 *v57;
  int64_t v58;
  char *v59;
  char *v60;
  char *v61;
  __int128 v62;
  __int128 v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  __int128 v69;
  __int128 v70;
  char *v71;
  char *v72;
  __int128 v73;
  __int128 v74;
  char *v75;
  _BYTE *v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint8x8_t v84;
  _QWORD *v85;
  _QWORD *i;
  unint64_t v87;
  _QWORD *v88;
  float v89;
  float v90;
  _BOOL8 v91;
  unint64_t v92;
  unint64_t v93;
  int8x8_t prime;
  int8x8_t v95;
  void *v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  unint64_t v100;
  uint8x8_t v101;
  unint64_t v102;
  uint8x8_t v103;
  uint64_t v104;
  _QWORD *v105;
  unint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  _QWORD *v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t *v114;
  unint64_t v115;
  _QWORD *v116;
  CFTypeRef v117;
  float64x2_t v118[3];
  __n128 v119[3];
  CFTypeRef cf;
  __int128 v121;
  _OWORD v122[2];
  int v123;
  __int128 v124;
  __int128 v125;
  double v126;
  CGAffineTransform v127;
  CGAffineTransform v128;
  CGAffineTransform v129;
  void (**v130)(ClipperLib::PolyTree *__hidden);
  __int128 v131;
  __int128 v132;
  _QWORD v133[8];
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;

  if (!path)
    return 0;
  if (CGPathDisableTypeValidation)
  {
    if (!a3)
      return 0;
  }
  else
  {
    v4 = CFGetTypeID(path);
    TypeID = CGPathGetTypeID();
    v9 = 0;
    if (!a3 || v4 != TypeID)
      return (uint64_t *)v9;
    if (!CGPathDisableTypeValidation)
    {
      v11 = CFGetTypeID(a3);
      if (v11 != CGPathGetTypeID())
        return 0;
    }
  }
  v134 = 0;
  v135 = 0;
  v136 = 0;
  memset(v133, 0, 29);
  v132 = 0u;
  v131 = 0u;
  v130 = &off_1E1628D78;
  memset(&v133[5], 0, 24);
  memset(&v129, 0, sizeof(v129));
  clip<ClipperLib::PolyTree>(&v129, a1, path, a4, 0, (const CGPath *)a3, a4, (CGPathRandomAccess *)&v134, (void **)&v130);
  v127 = v129;
  memset(&v128, 0, sizeof(v128));
  CGAffineTransformInvert(&v128, &v127);
  v12 = (uint64_t *)*((_QWORD *)&v132 + 1);
  v13 = (uint64_t *)v133[0];
  while (v12 != v13)
  {
    v14 = *v12;
    if (*(_BYTE *)(*v12 + 68))
    {
      v126 = 0.0;
      v124 = 0u;
      v125 = 0u;
      CGPathRandomAccess::state_at_point((uint64_t)&v124, &v134, *(_QWORD *)(v14 + 8), *(_QWORD *)(v14 + 16), 0, 0.0);
      if (*((double *)&v125 + 1) > v126)
      {
        v15 = *(_QWORD *)(v14 + 8);
        v16 = *(_QWORD *)(v14 + 16);
        v17 = (_OWORD *)(v16 - 48);
        if (v15 != v16 && (unint64_t)v17 > v15)
        {
          v19 = v15 + 48;
          do
          {
            v20 = *(_OWORD *)(v19 - 48);
            v21 = *(_OWORD *)(v19 - 32);
            v22 = *(_OWORD *)(v19 - 16);
            v24 = v17[1];
            v23 = v17[2];
            *(_OWORD *)(v19 - 48) = *v17;
            *(_OWORD *)(v19 - 32) = v24;
            *(_OWORD *)(v19 - 16) = v23;
            v17[1] = v21;
            v17[2] = v22;
            *v17 = v20;
            v17 -= 3;
            v25 = v19 >= (unint64_t)v17;
            v19 += 48;
          }
          while (!v25);
        }
      }
    }
    ++v12;
  }
  v26 = v134;
  v27 = (v135 - v134) / 56;
  if (v135 == v134)
  {
    v29 = 0;
    v31 = 0;
  }
  else
  {
    if (v27 >> 60)
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
    v28 = (char *)operator new(16 * v27);
    v29 = v28;
    v30 = 0;
    v31 = &v28[16 * v27];
    do
    {
      v32 = &v28[v30];
      *(_QWORD *)v32 = 0;
      *((_QWORD *)v32 + 1) = 0;
      v30 += 16;
    }
    while (16 * v27 != v30);
  }
  result = (uint64_t *)*((_QWORD *)&v132 + 1);
  v34 = (uint64_t *)v133[0];
  if (*((_QWORD *)&v132 + 1) == v133[0])
  {
LABEL_45:
    v124 = 0u;
    v125 = 0u;
    LODWORD(v126) = 1065353216;
    memset(v122, 0, sizeof(v122));
    v123 = 1065353216;
    if (v29 == v31)
      goto LABEL_167;
    v42 = v29;
    while (1)
    {
      v43 = *(_QWORD *)v42;
      if (!*(_QWORD *)v42)
        goto LABEL_165;
      v44 = *((_QWORD *)v42 + 1);
      if (!v44)
        goto LABEL_165;
      if (v43 == v44)
      {
        v57 = v122;
      }
      else
      {
        v46 = *(char **)(v43 + 8);
        v45 = *(char **)(v43 + 16);
        if (v45 - v46 >= 1)
        {
          v4 = (v45 - v46) / 48;
          v48 = *(char **)(v44 + 16);
          v47 = *(_QWORD *)(v44 + 24);
          if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v47 - (uint64_t)v48) >> 4)) < v4)
          {
            v49 = *(_QWORD *)(v44 + 8);
            v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v48[-v49] >> 4);
            v51 = v50 + v4;
            if (v50 + v4 > 0x555555555555555)
              std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
            v52 = 0xAAAAAAAAAAAAAAABLL * ((v47 - v49) >> 4);
            if (2 * v52 > v51)
              v51 = 2 * v52;
            if (v52 >= 0x2AAAAAAAAAAAAAALL)
              v53 = 0x555555555555555;
            else
              v53 = v51;
            if (v53)
            {
              v54 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<ClipperLib::IntPoint>>(v53);
              v56 = v55;
            }
            else
            {
              v54 = 0;
              v56 = 0;
            }
            v65 = &v54[48 * v50];
            v66 = 3 * v4;
            v4 = (int64_t)&v65[48 * v4];
            v67 = 16 * v66;
            v68 = v65;
            do
            {
              v69 = *(_OWORD *)v46;
              v70 = *((_OWORD *)v46 + 2);
              *((_OWORD *)v68 + 1) = *((_OWORD *)v46 + 1);
              *((_OWORD *)v68 + 2) = v70;
              *(_OWORD *)v68 = v69;
              v68 += 48;
              v46 += 48;
              v67 -= 48;
            }
            while (v67);
            v71 = *(char **)(v44 + 8);
            if (v71 == v48)
            {
              v75 = &v54[48 * v50];
            }
            else
            {
              v72 = v48;
              do
              {
                v73 = *((_OWORD *)v72 - 3);
                v74 = *((_OWORD *)v72 - 1);
                v75 = v65 - 48;
                *((_OWORD *)v65 - 2) = *((_OWORD *)v72 - 2);
                *((_OWORD *)v65 - 1) = v74;
                *((_OWORD *)v65 - 3) = v73;
                v72 -= 48;
                v65 -= 48;
              }
              while (v72 != v71);
            }
            v76 = *(_BYTE **)(v44 + 16);
            v77 = v76 - v48;
            if (v76 != v48)
              memmove((void *)v4, v48, v76 - v48);
            v78 = *(void **)(v44 + 8);
            *(_QWORD *)(v44 + 8) = v75;
            *(_QWORD *)(v44 + 16) = v4 + v77;
            *(_QWORD *)(v44 + 24) = &v54[48 * v56];
            if (v78)
              operator delete(v78);
LABEL_85:
            v57 = &v124;
            goto LABEL_86;
          }
          if (v4 > 0)
          {
            v58 = v45 - v46;
            if (v45 != v46)
              memmove(*(void **)(v44 + 16), v46, v45 - v46);
            *(_QWORD *)(v44 + 16) = &v48[v58];
            goto LABEL_85;
          }
          v59 = *(char **)(v44 + 16);
          v60 = &v59[-48 * v4];
          v61 = v59;
          while (v60 < v48)
          {
            v62 = *(_OWORD *)v60;
            v63 = *((_OWORD *)v60 + 2);
            *((_OWORD *)v61 + 1) = *((_OWORD *)v60 + 1);
            *((_OWORD *)v61 + 2) = v63;
            *(_OWORD *)v61 = v62;
            v61 += 48;
            v60 += 48;
          }
          v64 = &v48[48 * v4];
          *(_QWORD *)(v44 + 16) = v61;
          if (v59 != v64)
            memmove(&v48[48 * v4], v48, v59 - v64);
          if (&v46[48 * v4] != v46)
            memmove(v48, v46, 48 * v4);
        }
        v57 = &v124;
      }
LABEL_86:
      v79 = *(_QWORD *)v42;
      v80 = 0x9DDFEA08EB382D69 * ((8 * *(_QWORD *)v42 + 8) ^ HIDWORD(*(_QWORD *)v42));
      v81 = 0x9DDFEA08EB382D69 * (HIDWORD(*(_QWORD *)v42) ^ (v80 >> 47) ^ v80);
      v82 = 0x9DDFEA08EB382D69 * (v81 ^ (v81 >> 47));
      v83 = *((_QWORD *)v57 + 1);
      if (v83)
      {
        v84 = (uint8x8_t)vcnt_s8((int8x8_t)v83);
        v84.i16[0] = vaddlv_u8(v84);
        if (v84.u32[0] > 1uLL)
        {
          v4 = 0x9DDFEA08EB382D69 * (v81 ^ (v81 >> 47));
          if (v82 >= v83)
            v4 = v82 % v83;
        }
        else
        {
          v4 = v82 & (v83 - 1);
        }
        v85 = *(_QWORD **)(*(_QWORD *)v57 + 8 * v4);
        if (v85)
        {
          for (i = (_QWORD *)*v85; i; i = (_QWORD *)*i)
          {
            v87 = i[1];
            if (v87 == v82)
            {
              if (i[2] == v79)
                goto LABEL_165;
            }
            else
            {
              if (v84.u32[0] > 1uLL)
              {
                if (v87 >= v83)
                  v87 %= v83;
              }
              else
              {
                v87 &= v83 - 1;
              }
              if (v87 != v4)
                break;
            }
          }
        }
      }
      v88 = operator new(0x18uLL);
      *v88 = 0;
      v88[1] = v82;
      v88[2] = v79;
      v89 = (float)(unint64_t)(*((_QWORD *)v57 + 3) + 1);
      v90 = *((float *)v57 + 8);
      if (!v83 || (float)(v90 * (float)v83) < v89)
      {
        v91 = (v83 & (v83 - 1)) != 0;
        if (v83 < 3)
          v91 = 1;
        v92 = v91 | (2 * v83);
        v93 = vcvtps_u32_f32(v89 / v90);
        if (v92 <= v93)
          prime = (int8x8_t)v93;
        else
          prime = (int8x8_t)v92;
        if (*(_QWORD *)&prime == 1)
        {
          prime = (int8x8_t)2;
        }
        else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
        {
          prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
        }
        v95 = *(int8x8_t *)((char *)v57 + 8);
        if (*(_QWORD *)&prime > *(_QWORD *)&v95)
          goto LABEL_114;
        if (*(_QWORD *)&prime < *(_QWORD *)&v95)
        {
          v102 = vcvtps_u32_f32((float)*((unint64_t *)v57 + 3) / *((float *)v57 + 8));
          if (*(_QWORD *)&v95 < 3uLL
            || (v103 = (uint8x8_t)vcnt_s8(v95), v103.i16[0] = vaddlv_u8(v103), v103.u32[0] > 1uLL))
          {
            v102 = std::__next_prime(v102);
          }
          else
          {
            v104 = 1 << -(char)__clz(v102 - 1);
            if (v102 >= 2)
              v102 = v104;
          }
          if (*(_QWORD *)&prime <= v102)
            prime = (int8x8_t)v102;
          if (*(_QWORD *)&prime < *(_QWORD *)&v95)
          {
            if (prime)
            {
LABEL_114:
              if (*(_QWORD *)&prime >> 61)
                std::__throw_bad_array_new_length[abi:se180100]();
              v96 = operator new(8 * *(_QWORD *)&prime);
              v97 = *(_QWORD **)v57;
              *(_QWORD *)v57 = v96;
              if (v97)
                operator delete(v97);
              v98 = 0;
              *((int8x8_t *)v57 + 1) = prime;
              do
                *(_QWORD *)(*(_QWORD *)v57 + 8 * v98++) = 0;
              while (*(_QWORD *)&prime != v98);
              v99 = (_QWORD *)*((_QWORD *)v57 + 2);
              if (v99)
              {
                v100 = v99[1];
                v101 = (uint8x8_t)vcnt_s8(prime);
                v101.i16[0] = vaddlv_u8(v101);
                if (v101.u32[0] > 1uLL)
                {
                  if (v100 >= *(_QWORD *)&prime)
                    v100 %= *(_QWORD *)&prime;
                }
                else
                {
                  v100 &= *(_QWORD *)&prime - 1;
                }
                *(_QWORD *)(*(_QWORD *)v57 + 8 * v100) = v57 + 1;
                v105 = (_QWORD *)*v99;
                if (*v99)
                {
                  do
                  {
                    v106 = v105[1];
                    if (v101.u32[0] > 1uLL)
                    {
                      if (v106 >= *(_QWORD *)&prime)
                        v106 %= *(_QWORD *)&prime;
                    }
                    else
                    {
                      v106 &= *(_QWORD *)&prime - 1;
                    }
                    if (v106 != v100)
                    {
                      if (!*(_QWORD *)(*(_QWORD *)v57 + 8 * v106))
                      {
                        *(_QWORD *)(*(_QWORD *)v57 + 8 * v106) = v99;
                        goto LABEL_139;
                      }
                      *v99 = *v105;
                      *v105 = **(_QWORD **)(*(_QWORD *)v57 + 8 * v106);
                      **(_QWORD **)(*(_QWORD *)v57 + 8 * v106) = v105;
                      v105 = v99;
                    }
                    v106 = v100;
LABEL_139:
                    v99 = v105;
                    v105 = (_QWORD *)*v105;
                    v100 = v106;
                  }
                  while (v105);
                }
              }
            }
            else
            {
              v107 = *(_QWORD **)v57;
              *(_QWORD *)v57 = 0;
              if (v107)
                operator delete(v107);
              *((_QWORD *)v57 + 1) = 0;
            }
          }
        }
        v83 = *((_QWORD *)v57 + 1);
        if ((v83 & (v83 - 1)) != 0)
        {
          if (v82 >= v83)
            v4 = v82 % v83;
          else
            v4 = v82;
        }
        else
        {
          v4 = (v83 - 1) & v82;
        }
      }
      v108 = *(_QWORD **)v57;
      v109 = *(_QWORD **)(*(_QWORD *)v57 + 8 * v4);
      if (v109)
      {
        *v88 = *v109;
LABEL_163:
        *v109 = v88;
        goto LABEL_164;
      }
      *v88 = *((_QWORD *)v57 + 2);
      *((_QWORD *)v57 + 2) = v88;
      v108[v4] = v57 + 1;
      if (*v88)
      {
        v110 = *(_QWORD *)(*v88 + 8);
        if ((v83 & (v83 - 1)) != 0)
        {
          if (v110 >= v83)
            v110 %= v83;
        }
        else
        {
          v110 &= v83 - 1;
        }
        v109 = (_QWORD *)(*(_QWORD *)v57 + 8 * v110);
        goto LABEL_163;
      }
LABEL_164:
      ++*((_QWORD *)v57 + 3);
LABEL_165:
      v42 += 16;
      if (v42 == v31)
      {
        result = (uint64_t *)*((_QWORD *)&v132 + 1);
        v34 = (uint64_t *)v133[0];
LABEL_167:
        v111 = 126 - 2 * __clz(v34 - result);
        if (v34 == result)
          v112 = 0;
        else
          v112 = v111;
        std::__introsort<std::_ClassicAlgPolicy,pathCreateCopyByClippingLineWithPath(ClipperLib::ClipType,CGPath const*,CGPath const*,BOOL)::$_0 &,ClipperLib::PolyNode **,false>(result, v34, v112, 1);
        cf = CGPathCreateMutable();
        v121 = cgpoint_null;
        v113 = (unint64_t *)*((_QWORD *)&v132 + 1);
        v114 = (unint64_t *)v133[0];
        while (v113 != v114)
        {
          v115 = *v113;
          if (*(_BYTE *)(*v113 + 68)
            && !std::__hash_table<ClipperLib::PolyNode *,std::hash<ClipperLib::PolyNode *>,std::equal_to<ClipperLib::PolyNode *>,std::allocator<ClipperLib::PolyNode *>>::find<ClipperLib::PolyNode *>(v124, *((unint64_t *)&v124 + 1), *v113))
          {
            v119[0] = *(__n128 *)&v129.a;
            v119[1] = *(__n128 *)&v129.c;
            v119[2] = *(__n128 *)&v129.tx;
            v118[0] = *(float64x2_t *)&v128.a;
            v118[1] = *(float64x2_t *)&v128.c;
            v118[2] = *(float64x2_t *)&v128.tx;
            v116 = std::__hash_table<ClipperLib::PolyNode *,std::hash<ClipperLib::PolyNode *>,std::equal_to<ClipperLib::PolyNode *>,std::allocator<ClipperLib::PolyNode *>>::find<ClipperLib::PolyNode *>(*(uint64_t *)&v122[0], *((unint64_t *)&v122[0] + 1), v115);
            CGPathRandomAccess::recreate_path_from_clipper(&v134, (uint64_t *)(v115 + 8), v119, v118, (CGPathOutputFiltering *)&cf, v116 == 0);
          }
          ++v113;
        }
        v117 = CGPathOutputFiltering::cg_path((CGPathOutputFiltering *)&cf);
        v9 = v117;
        if (v117)
          CFRetain(v117);
        if (cf)
          CFRelease(cf);
        std::__hash_table<std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::__unordered_map_hasher<CGPDFFont *,std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::hash<CGPDFFont *>,std::equal_to<CGPDFFont *>,true>,std::__unordered_map_equal<CGPDFFont *,std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::equal_to<CGPDFFont *>,std::hash<CGPDFFont *>,true>,std::allocator<std::__hash_value_type<CGPDFFont *,std::pair<double,double>>>>::~__hash_table((uint64_t)v122);
        std::__hash_table<std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::__unordered_map_hasher<CGPDFFont *,std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::hash<CGPDFFont *>,std::equal_to<CGPDFFont *>,true>,std::__unordered_map_equal<CGPDFFont *,std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::equal_to<CGPDFFont *>,std::hash<CGPDFFont *>,true>,std::allocator<std::__hash_value_type<CGPDFFont *,std::pair<double,double>>>>::~__hash_table((uint64_t)&v124);
        if (v29)
          operator delete(v29);
        ClipperLib::PolyTree::~PolyTree((ClipperLib::PolyTree *)&v130);
        v130 = (void (**)(ClipperLib::PolyTree *__hidden))&v134;
        std::vector<CGPathRandomAccessSubpath>::__destroy_vector::operator()[abi:se180100]((void ***)&v130);
        return (uint64_t *)v9;
      }
    }
  }
  v35 = (v31 - v29) >> 4;
  v36 = (uint64_t *)*((_QWORD *)&v132 + 1);
  while (1)
  {
    v37 = *v36;
    if (!*(_BYTE *)(*v36 + 68))
      goto LABEL_44;
    v39 = *(_QWORD *)(v37 + 8);
    v38 = *(_QWORD *)(v37 + 16);
    if (v39 == v38)
      break;
    v40 = *(_QWORD *)(v39 + 16);
    if (v40 != -1)
    {
      if (v27 <= v40)
        break;
      if (!*(_BYTE *)(v26 + 56 * v40 + 48) && *(double *)(v39 + 24) == 0.0)
      {
        if (v35 <= v40)
          break;
        *(_QWORD *)&v29[16 * v40] = v37;
      }
    }
    v41 = *(_QWORD *)(v38 - 32);
    if (v41 == -1)
      goto LABEL_44;
    if (v27 <= v41)
      break;
    if (*(_BYTE *)(v26 + 56 * v41 + 48)
      || *(double *)(v38 - 24) != (double)(unint64_t)((uint64_t)(*(_QWORD *)(v26 + 56 * v41 + 8)
                                                                     - *(_QWORD *)(v26 + 56 * v41)) >> 4))
    {
      goto LABEL_44;
    }
    if (v35 <= v41)
      break;
    *(_QWORD *)&v29[16 * v41 + 8] = v37;
LABEL_44:
    if (++v36 == v34)
      goto LABEL_45;
  }
  __break(1u);
  return result;
}

void sub_184AD0BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,CFTypeRef cf,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  void *v57;
  uint64_t v58;

  std::__hash_table<std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::__unordered_map_hasher<CGPDFFont *,std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::hash<CGPDFFont *>,std::equal_to<CGPDFFont *>,true>,std::__unordered_map_equal<CGPDFFont *,std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::equal_to<CGPDFFont *>,std::hash<CGPDFFont *>,true>,std::allocator<std::__hash_value_type<CGPDFFont *,std::pair<double,double>>>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::__unordered_map_hasher<CGPDFFont *,std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::hash<CGPDFFont *>,std::equal_to<CGPDFFont *>,true>,std::__unordered_map_equal<CGPDFFont *,std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::equal_to<CGPDFFont *>,std::hash<CGPDFFont *>,true>,std::allocator<std::__hash_value_type<CGPDFFont *,std::pair<double,double>>>>::~__hash_table((uint64_t)&a33);
  if (v57)
    operator delete(v57);
  ClipperLib::PolyTree::~PolyTree((ClipperLib::PolyTree *)&a57);
  a57 = v58 - 168;
  std::vector<CGPathRandomAccessSubpath>::__destroy_vector::operator()[abi:se180100]((void ***)&a57);
  _Unwind_Resume(a1);
}

void clip<ClipperLib::PolyTree>(_OWORD *a1, int a2, CGPathRef path, int a4, uint64_t a5, const CGPath *a6, int a7, CGPathRandomAccess *a8, void **a9)
{
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  __int128 v21;
  CFIndex v22;
  CFIndex v23;
  __int128 v24;
  CFIndex v25;
  uint64_t *v26;
  __int128 v27;
  CFIndex v28;
  CFIndex v29;
  __int128 v30;
  CFIndex v31;
  uint64_t *v32;
  uint64_t (**v33)(ClipperLib::Clipper *);
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  void **v46;
  uint64_t *v47;
  uint64_t *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  char *v61;
  __int128 *v62;
  unint64_t v63;
  __int128 v64;
  __int128 v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  __int128 v72;
  __int128 v73;
  char *v74;
  char *v75;
  _OWORD *v76;
  __int128 v77;
  __int128 v78;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t (**v83)(ClipperLib::Clipper *);
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void **v88;
  _BYTE *v89;
  _QWORD *v90;
  uint64_t v91;
  _BYTE *v92;
  _QWORD *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char **v104;
  CGAffineTransform v105;
  CGAffineTransform v106;
  CGAffineTransform v107;
  CGAffineTransform v108;
  uint64_t (**v109)(ClipperLib::Clipper *);
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 __p;
  uint64_t v114;
  _DWORD v115[2];
  _QWORD v116[4];
  char v117;
  int v118;
  int v119;
  char v120;
  char v121;
  char v122;
  void (*v123)(uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *);
  void *v124;
  __int128 v125;
  __int128 v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  __int16 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void **v138[3];
  CFRange v139;
  CFRange v140;
  CGRect BoundingBox;
  CGRect v142;
  CGRect v143;
  CGRect v144;
  CGRect v145;

  BoundingBox = CGPathGetBoundingBox(path);
  x = BoundingBox.origin.x;
  y = BoundingBox.origin.y;
  width = BoundingBox.size.width;
  height = BoundingBox.size.height;
  if (a6)
  {
    v145 = CGPathGetBoundingBox(a6);
    v142.origin.x = x;
    v142.origin.y = y;
    v142.size.width = width;
    v142.size.height = height;
    v143 = CGRectUnion(v142, v145);
    x = v143.origin.x;
    y = v143.origin.y;
    width = v143.size.width;
    height = v143.size.height;
  }
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  v144.origin.x = x;
  v144.origin.y = y;
  v144.size.width = width;
  v144.size.height = height;
  transform_for_bounds(v144, (uint64_t)a1);
  v128 = 0;
  v129 = 0;
  v130 = 0;
  v132 = 0;
  v133 = 0;
  v134 = 0;
  v135 = 0;
  v136 = 0;
  v137 = 0;
  v125 = 0u;
  v126 = 0u;
  v110 = 0u;
  v111 = 0u;
  v112 = 0u;
  __p = 0u;
  v109 = &off_1E1628CD8;
  v114 = 0;
  v116[0] = v116;
  v116[1] = v116;
  v116[2] = 0;
  v117 = 0;
  v127 = 0;
  v120 = 0;
  v123 = interpolate_intersection_metadata;
  v124 = &unk_1E1628D20;
  v131 = 1;
  v122 = 0;
  v21 = a1[1];
  *(_OWORD *)&v108.a = *a1;
  *(_OWORD *)&v108.c = v21;
  *(_OWORD *)&v108.tx = a1[2];
  CGPathRandomAccess::add_path(a8, path, &v108, a5);
  v23 = v22;
  v24 = a1[1];
  *(_OWORD *)&v107.a = *a1;
  *(_OWORD *)&v107.c = v24;
  *(_OWORD *)&v107.tx = a1[2];
  v139.location = v25;
  v139.length = v23;
  v26 = CGPathRandomAccess::clipper_paths_for_subpath_range(a8, v139, &v107, a5);
  ClipperLib::ClipperBase::AddPaths((uint64_t)&v109 + (_QWORD)*(v109 - 3), v26, 0, a5);
  v138[0] = (void **)v26;
  std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:se180100](v138);
  MEMORY[0x186DC23C4](v26, 0x20C40960023A9);
  if (a6)
  {
    v27 = a1[1];
    *(_OWORD *)&v106.a = *a1;
    *(_OWORD *)&v106.c = v27;
    *(_OWORD *)&v106.tx = a1[2];
    CGPathRandomAccess::add_path(a8, a6, &v106, 1);
    v29 = v28;
    v30 = a1[1];
    *(_OWORD *)&v105.a = *a1;
    *(_OWORD *)&v105.c = v30;
    *(_OWORD *)&v105.tx = a1[2];
    v140.location = v31;
    v140.length = v29;
    v32 = CGPathRandomAccess::clipper_paths_for_subpath_range(a8, v140, &v105, 1);
    ClipperLib::ClipperBase::AddPaths((uint64_t)&v109 + (_QWORD)*(v109 - 3), v32, 1, 1);
    v138[0] = (void **)v32;
    std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:se180100](v138);
    MEMORY[0x186DC23C4](v32, 0x20C40960023A9);
  }
  if (!v117)
  {
    v117 = 1;
    v119 = a4 ^ 1;
    v118 = a7 ^ 1;
    v115[0] = a2;
    v121 = 1;
    if (((*v109)((ClipperLib::Clipper *)&v109) & 1) != 0)
    {
      ClipperLib::PolyTree::Clear(a9);
      v104 = (char **)(a9 + 10);
      std::vector<ClipperLib::PolyNode *>::reserve(a9 + 10, (uint64_t)(*(_QWORD *)((char *)v116 + (_QWORD)*(v109 - 3)) - *(_QWORD *)((char *)v115 + (_QWORD)*(v109 - 3))) >> 3);
      v33 = v109;
      v34 = *(_QWORD *)((char *)v115 + (_QWORD)*(v109 - 3));
      if (*(_QWORD *)((char *)v116 + (_QWORD)*(v109 - 3)) == v34)
      {
        v81 = 0;
      }
      else
      {
        v35 = 0;
        do
        {
          v36 = *(_QWORD *)(v34 + 8 * v35);
          v37 = *(_QWORD *)(v36 + 24);
          if (v37)
          {
            v38 = -1;
            v39 = *(_QWORD *)(v36 + 24);
            do
            {
              v40 = v38;
              v39 = *(_QWORD *)(v39 + 56);
              ++v38;
            }
            while (v39 != v37);
            v41 = *(_BYTE *)(v36 + 5) ? 1 : 2;
            if (v38 >= v41)
            {
              v42 = *(_QWORD *)(v36 + 8);
              if (v42)
              {
                v43 = *(unsigned __int8 *)(v36 + 4);
                if (v43 == *(unsigned __int8 *)(v42 + 4) || !*(_QWORD *)(v42 + 24))
                {
                  do
                  {
                    if (*(unsigned __int8 *)(v42 + 4) != v43 && *(_QWORD *)(v42 + 24))
                      break;
                    v42 = *(_QWORD *)(v42 + 8);
                  }
                  while (v42);
                  *(_QWORD *)(v36 + 8) = v42;
                }
              }
              v44 = operator new();
              v45 = v44;
              *(_QWORD *)v44 = &off_1E1628D58;
              *(_OWORD *)(v44 + 8) = 0u;
              v46 = (void **)(v44 + 8);
              *(_OWORD *)(v44 + 24) = 0u;
              *(_OWORD *)(v44 + 40) = 0u;
              *(_OWORD *)(v44 + 53) = 0u;
              v48 = (uint64_t *)a9[11];
              v47 = (uint64_t *)a9[12];
              if (v48 >= v47)
              {
                v50 = ((char *)v48 - *v104) >> 3;
                if ((unint64_t)(v50 + 1) >> 61)
LABEL_99:
                  std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
                v51 = (char *)v47 - *v104;
                v52 = v51 >> 2;
                if (v51 >> 2 <= (unint64_t)(v50 + 1))
                  v52 = v50 + 1;
                if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
                  v53 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v53 = v52;
                if (v53)
                  v53 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(v53);
                else
                  v54 = 0;
                v55 = (uint64_t *)(v53 + 8 * v50);
                *v55 = v45;
                v49 = v55 + 1;
                v57 = (char *)a9[10];
                v56 = (char *)a9[11];
                if (v56 != v57)
                {
                  do
                  {
                    v58 = *((_QWORD *)v56 - 1);
                    v56 -= 8;
                    *--v55 = v58;
                  }
                  while (v56 != v57);
                  v56 = *v104;
                }
                a9[10] = v55;
                a9[11] = v49;
                a9[12] = (void *)(v53 + 8 * v54);
                if (v56)
                  operator delete(v56);
              }
              else
              {
                *v48 = v44;
                v49 = v48 + 1;
              }
              a9[11] = v49;
              *(_QWORD *)(v36 + 16) = v45;
              *(_QWORD *)(v45 + 56) = 0;
              *(_DWORD *)(v45 + 64) = 0;
              std::vector<ClipperLib::IntPoint>::reserve(v46, v40 + 2);
              v59 = 0;
              v60 = *(_QWORD *)(v36 + 24);
              v61 = *(char **)(v45 + 16);
              do
              {
                v60 = *(_QWORD *)(v60 + 64);
                v62 = (__int128 *)(v60 + 8);
                v63 = *(_QWORD *)(v45 + 24);
                if ((unint64_t)v61 >= v63)
                {
                  v66 = 0xAAAAAAAAAAAAAAABLL * ((v61 - (_BYTE *)*v46) >> 4);
                  v67 = v66 + 1;
                  if (v66 + 1 > 0x555555555555555)
                    std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
                  v68 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - (_QWORD)*v46) >> 4);
                  if (2 * v68 > v67)
                    v67 = 2 * v68;
                  if (v68 >= 0x2AAAAAAAAAAAAAALL)
                    v69 = 0x555555555555555;
                  else
                    v69 = v67;
                  if (v69)
                    v69 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<ClipperLib::IntPoint>>(v69);
                  else
                    v70 = 0;
                  v71 = (_OWORD *)(v69 + 48 * v66);
                  v72 = *v62;
                  v73 = *(_OWORD *)(v60 + 40);
                  v71[1] = *(_OWORD *)(v60 + 24);
                  v71[2] = v73;
                  *v71 = v72;
                  v75 = *(char **)(v45 + 8);
                  v74 = *(char **)(v45 + 16);
                  v76 = v71;
                  if (v74 != v75)
                  {
                    do
                    {
                      v77 = *((_OWORD *)v74 - 3);
                      v78 = *((_OWORD *)v74 - 1);
                      *(v76 - 2) = *((_OWORD *)v74 - 2);
                      *(v76 - 1) = v78;
                      *(v76 - 3) = v77;
                      v76 -= 3;
                      v74 -= 48;
                    }
                    while (v74 != v75);
                    v74 = (char *)*v46;
                  }
                  v61 = (char *)(v71 + 3);
                  *(_QWORD *)(v45 + 8) = v76;
                  *(_QWORD *)(v45 + 16) = v71 + 3;
                  *(_QWORD *)(v45 + 24) = v69 + 48 * v70;
                  if (v74)
                    operator delete(v74);
                }
                else
                {
                  v64 = *v62;
                  v65 = *(_OWORD *)(v60 + 40);
                  *((_OWORD *)v61 + 1) = *(_OWORD *)(v60 + 24);
                  *((_OWORD *)v61 + 2) = v65;
                  *(_OWORD *)v61 = v64;
                  v61 += 48;
                }
                *(_QWORD *)(v45 + 16) = v61;
              }
              while (v59++ != v38);
              v33 = v109;
            }
          }
          ++v35;
          v34 = *(_QWORD *)((char *)v115 + (_QWORD)*(v33 - 3));
          v80 = *(_QWORD *)((char *)v116 + (_QWORD)*(v33 - 3)) - v34;
        }
        while (v35 < v80 >> 3);
        v81 = v80 >> 3;
      }
      std::vector<ClipperLib::PolyNode *>::reserve(a9 + 4, v81);
      v83 = v109;
      v82 = (uint64_t)*(v109 - 3);
      v84 = *(_QWORD *)((char *)v115 + v82);
      if (*(_QWORD *)((char *)v116 + v82) != v84)
      {
        v85 = 0;
        while (1)
        {
          v86 = *(_QWORD *)(v84 + 8 * v85);
          v87 = *(_QWORD *)(v86 + 16);
          if (v87)
            break;
LABEL_89:
          ++v85;
          v82 = (uint64_t)*(v83 - 3);
          v84 = *(_QWORD *)((char *)v115 + v82);
          if (v85 >= (*(_QWORD *)((char *)v116 + v82) - v84) >> 3)
            goto LABEL_90;
        }
        if (*(_BYTE *)(v86 + 5))
        {
          *(_BYTE *)(v87 + 68) = 1;
        }
        else
        {
          v99 = *(_QWORD *)(v86 + 8);
          if (v99)
          {
            v88 = *(void ***)(v99 + 16);
            if (v88)
              goto LABEL_69;
          }
        }
        v88 = a9;
LABEL_69:
        v89 = v88[4];
        v90 = v88[5];
        v91 = (char *)v90 - v89;
        v92 = v88[6];
        if (v90 >= (_QWORD *)v92)
        {
          v94 = (v91 >> 3) + 1;
          if (v94 >> 61)
            goto LABEL_99;
          v95 = v92 - v89;
          v96 = v95 >> 2;
          if (v95 >> 2 <= v94)
            v96 = (v91 >> 3) + 1;
          if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFF8)
            v97 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v97 = v96;
          if (v97)
            v97 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(v97);
          else
            v98 = 0;
          v100 = (_QWORD *)(v97 + 8 * (v91 >> 3));
          *v100 = v87;
          v93 = v100 + 1;
          v102 = (char *)v88[4];
          v101 = (char *)v88[5];
          if (v101 != v102)
          {
            do
            {
              v103 = *((_QWORD *)v101 - 1);
              v101 -= 8;
              *--v100 = v103;
            }
            while (v101 != v102);
            v101 = (char *)v88[4];
          }
          v88[4] = v100;
          v88[5] = v93;
          v88[6] = (void *)(v97 + 8 * v98);
          if (v101)
            operator delete(v101);
        }
        else
        {
          *v90 = v87;
          v93 = v90 + 1;
        }
        v88[5] = v93;
        *(_QWORD *)(v87 + 56) = v88;
        *(_DWORD *)(v87 + 64) = (unint64_t)v91 >> 3;
        v83 = v109;
        goto LABEL_89;
      }
    }
    else
    {
      v82 = (uint64_t)*(v109 - 3);
    }
LABEL_90:
    ClipperLib::ClipperBase::DisposeAllOutRecs((uint64_t)&v109 + v82);
    v117 = 0;
  }
  v109 = &off_1E1628CD8;
  v124 = &unk_1E1628D20;
  std::__list_imp<long long>::clear(v116);
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  if (*((_QWORD *)&v111 + 1))
  {
    *(_QWORD *)&v112 = *((_QWORD *)&v111 + 1);
    operator delete(*((void **)&v111 + 1));
  }
  if ((_QWORD)v110)
  {
    *((_QWORD *)&v110 + 1) = v110;
    operator delete((void *)v110);
  }
  ClipperLib::ClipperBase::~ClipperBase((ClipperLib::ClipperBase *)&v124);
}

void sub_184AD1438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  ClipperLib::Clipper::~Clipper((ClipperLib::Clipper *)&a38);
  _Unwind_Resume(a1);
}

uint64_t *std::__introsort<std::_ClassicAlgPolicy,pathCreateCopyByClippingLineWithPath(ClipperLib::ClipType,CGPath const*,CGPath const*,BOOL)::$_0 &,ClipperLib::PolyNode **,false>(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  double v26;
  double *v27;
  double *v28;
  double v29;
  uint64_t *i;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  double v40;
  double v41;
  double *v42;
  double *v43;
  double v44;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  double *v52;
  double *v53;
  double v54;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  double *v62;
  double *v63;
  double v64;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  double v75;
  double v76;
  double *v77;
  double v78;
  uint64_t *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  double *v84;
  double *v85;
  double v86;
  uint64_t *v88;
  char v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  double *v94;
  double *v95;
  uint64_t *v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  double *v102;
  double *v103;
  double v104;
  uint64_t *v106;
  uint64_t v107;
  uint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  double *v112;
  double *v113;
  double v114;
  uint64_t *v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  double *v121;
  double *v122;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  double v132;
  double v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  double *v137;
  double v138;
  double v139;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  double *v145;
  double *v146;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  double v158;
  double v159;
  double *v160;
  double *v161;
  uint64_t *v163;
  BOOL v164;
  char v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  double v178;
  double v179;
  double *v180;
  double *v181;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  double v193;
  double v194;
  double *v195;
  int64_t v197;
  int64_t v198;
  int64_t v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  double v211;
  double v212;
  double *v213;
  double *v214;
  uint64_t v216;
  uint64_t v217;
  uint64_t *v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  double v226;
  double v227;
  double *v228;
  double *v229;
  uint64_t *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  unint64_t v242;
  double v243;
  double v244;
  double *v245;
  double *v246;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t v252;
  unint64_t v253;
  unint64_t v254;
  double v255;
  double v256;
  double *v257;
  double *v258;
  BOOL v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t *v263;
  uint64_t *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  double v276;
  double v277;
  double *v278;
  double *v279;
  uint64_t v281;
  unint64_t v282;
  unint64_t v283;
  uint64_t *v284;
  uint64_t v285;
  unint64_t v286;
  unint64_t v287;
  uint64_t v288;
  unint64_t v289;
  unint64_t v290;
  uint64_t *v291;
  double v292;
  double v293;
  double *v294;
  double *v295;
  unint64_t v297;
  uint64_t v298;
  unint64_t v299;
  unint64_t v300;
  uint64_t v301;
  unint64_t v302;
  unint64_t v303;
  uint64_t *v304;
  double v305;
  double v306;
  double *v307;
  double *v308;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  unint64_t v320;
  unint64_t v321;
  uint64_t v322;
  unint64_t v323;
  unint64_t v324;
  unint64_t v325;
  double v326;
  double v327;
  double *v328;
  uint64_t v330;
  uint64_t *v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  unint64_t v335;
  uint64_t v336;
  unint64_t v337;
  unint64_t v338;
  uint64_t *v339;
  double v340;
  double v341;
  double *v342;
  double *v343;

  v7 = result;
LABEL_2:
  v8 = a2 - 1;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = a2 - v9;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v149 = *(_QWORD *)(*v8 + 8);
        if (*(_QWORD *)(*v8 + 16) == v149)
          goto LABEL_496;
        v150 = *v9;
        v151 = *(_QWORD *)(v149 + 16);
        v152 = *(_QWORD *)(v149 + 32);
        v153 = v151 >= v152 ? *(_QWORD *)(v149 + 32) : *(_QWORD *)(v149 + 16);
        v154 = *(_QWORD *)(v150 + 8);
        if (*(_QWORD *)(v150 + 16) == v154)
          goto LABEL_496;
        v155 = *(_QWORD *)(v154 + 16);
        v156 = *(_QWORD *)(v154 + 32);
        if (v155 >= v156)
          v157 = *(_QWORD *)(v154 + 32);
        else
          v157 = *(_QWORD *)(v154 + 16);
        if (v153 < v157)
          goto LABEL_247;
        v158 = *(double *)(v149 + 24);
        v159 = *(double *)(v149 + 40);
        v160 = (double *)(v154 + 24);
        v161 = (double *)(v154 + 40);
        if (v155 >= v156)
          v160 = v161;
        if (v151 >= v152)
          v158 = v159;
        if (v153 == v157 && v158 < *v160)
        {
LABEL_247:
          *v9 = *v8;
          *v8 = v150;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:se180100]<std::_ClassicAlgPolicy,pathCreateCopyByClippingLineWithPath(ClipperLib::ClipType,CGPath const*,CGPath const*,BOOL)::$_0 &,ClipperLib::PolyNode **>(v9, v9 + 1, a2 - 1);
      case 4uLL:
        return std::__sort4[abi:se180100]<std::_ClassicAlgPolicy,pathCreateCopyByClippingLineWithPath(ClipperLib::ClipType,CGPath const*,CGPath const*,BOOL)::$_0 &,ClipperLib::PolyNode **>(v9, v9 + 1, v9 + 2, a2 - 1);
      case 5uLL:
        return std::__sort5_maybe_branchless[abi:se180100]<std::_ClassicAlgPolicy,pathCreateCopyByClippingLineWithPath(ClipperLib::ClipType,CGPath const*,CGPath const*,BOOL)::$_0 &,ClipperLib::PolyNode **,0>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1);
      default:
        if (v10 <= 191)
        {
          v163 = v9 + 1;
          v164 = v9 == a2 || v163 == a2;
          v165 = v164;
          if ((a4 & 1) == 0)
          {
            if ((v165 & 1) == 0)
            {
              v311 = 0;
              v312 = -1;
              v313 = 1;
              v314 = v9;
              do
              {
                v315 = v313;
                v316 = *v163;
                v317 = *(_QWORD *)(*v163 + 8);
                if (*(_QWORD *)(*v163 + 16) == v317)
                  goto LABEL_496;
                v318 = *v314;
                v319 = *(_QWORD *)(v317 + 16);
                v320 = *(_QWORD *)(v317 + 32);
                v321 = v319 >= v320 ? *(_QWORD *)(v317 + 32) : *(_QWORD *)(v317 + 16);
                v322 = v318 + 8;
                result = *(uint64_t **)(v318 + 8);
                if (*(uint64_t **)(v322 + 8) == result)
                  goto LABEL_496;
                v323 = result[2];
                v324 = result[4];
                if (v323 >= v324)
                  v325 = result[4];
                else
                  v325 = result[2];
                if (v321 < v325)
                  goto LABEL_472;
                v326 = *(double *)(v317 + 24);
                v327 = *(double *)(v317 + 40);
                v328 = (double *)(result + 3);
                result += 5;
                if (v323 >= v324)
                  v328 = (double *)result;
                if (v319 >= v320)
                  v326 = v327;
                if (v321 == v325 && v326 < *v328)
                {
LABEL_472:
                  *v163 = v9[v311];
                  v330 = v312;
                  v331 = v314;
                  while (1)
                  {
                    v332 = *(_QWORD *)(v316 + 8);
                    if (*(_QWORD *)(v316 + 16) == v332)
                      goto LABEL_496;
                    v333 = *(v331 - 1);
                    v334 = *(_QWORD *)(v332 + 16);
                    v335 = *(_QWORD *)(v332 + 32);
                    result = v334 >= v335 ? *(uint64_t **)(v332 + 32) : *(uint64_t **)(v332 + 16);
                    v336 = *(_QWORD *)(v333 + 8);
                    if (*(_QWORD *)(v333 + 16) == v336)
                      goto LABEL_496;
                    v337 = *(_QWORD *)(v336 + 16);
                    v338 = *(_QWORD *)(v336 + 32);
                    v339 = v337 >= v338 ? *(uint64_t **)(v336 + 32) : *(uint64_t **)(v336 + 16);
                    if (result >= v339)
                    {
                      v340 = *(double *)(v332 + 24);
                      v341 = *(double *)(v332 + 40);
                      v342 = (double *)(v336 + 24);
                      v343 = (double *)(v336 + 40);
                      if (v337 >= v338)
                        v342 = v343;
                      if (v334 >= v335)
                        v340 = v341;
                      if (result != v339 || v340 >= *v342)
                        break;
                    }
                    *v331-- = v333;
                    if (__CFADD__(v330++, 1))
                      goto LABEL_496;
                  }
                  *v331 = v316;
                }
                ++v314;
                v313 = v315 + 1;
                v163 = &v9[v315 + 1];
                --v312;
                v311 = v315;
              }
              while (v163 != a2);
            }
            return result;
          }
          if ((v165 & 1) != 0)
            return result;
          v166 = 0;
          v167 = v9;
          while (1)
          {
            v168 = v163;
            v169 = v167[1];
            v170 = *(_QWORD *)(v169 + 8);
            if (*(_QWORD *)(v169 + 16) == v170)
              goto LABEL_496;
            v171 = *v167;
            v172 = *(_QWORD *)(v170 + 16);
            v173 = *(_QWORD *)(v170 + 32);
            v174 = v172 >= v173 ? *(uint64_t **)(v170 + 32) : *(uint64_t **)(v170 + 16);
            v175 = *(_QWORD *)(v171 + 8);
            result = *(uint64_t **)(v171 + 16);
            if (result == (uint64_t *)v175)
              goto LABEL_496;
            v176 = *(_QWORD *)(v175 + 16);
            v177 = *(_QWORD *)(v175 + 32);
            if (v176 >= v177)
              result = *(uint64_t **)(v175 + 32);
            else
              result = *(uint64_t **)(v175 + 16);
            if (v174 < result)
              goto LABEL_278;
            v178 = *(double *)(v170 + 24);
            v179 = *(double *)(v170 + 40);
            v180 = (double *)(v175 + 24);
            v181 = (double *)(v175 + 40);
            if (v176 >= v177)
              v180 = v181;
            if (v172 >= v173)
              v178 = v179;
            if (v174 == result && v178 < *v180)
            {
LABEL_278:
              v167[1] = v171;
              v183 = v9;
              if (v167 == v9)
                goto LABEL_300;
              v184 = v166;
              do
              {
                v185 = *(_QWORD *)(v169 + 8);
                if (*(_QWORD *)(v169 + 16) == v185)
                  goto LABEL_496;
                v186 = *(uint64_t *)((char *)v9 + v184 - 8);
                v187 = *(_QWORD *)(v185 + 16);
                v188 = *(_QWORD *)(v185 + 32);
                v189 = v187 >= v188 ? *(_QWORD *)(v185 + 32) : *(_QWORD *)(v185 + 16);
                result = *(uint64_t **)(v186 + 8);
                if (*(uint64_t **)(v186 + 16) == result)
                  goto LABEL_496;
                v190 = result[2];
                v191 = result[4];
                if (v190 >= v191)
                  v192 = result[4];
                else
                  v192 = result[2];
                if (v189 >= v192)
                {
                  v193 = *(double *)(v185 + 24);
                  v194 = *(double *)(v185 + 40);
                  v195 = (double *)(result + 3);
                  result += 5;
                  if (v190 >= v191)
                    v195 = (double *)result;
                  if (v187 >= v188)
                    v193 = v194;
                  if (v189 != v192 || v193 >= *v195)
                  {
                    v183 = (uint64_t *)((char *)v9 + v184);
                    goto LABEL_300;
                  }
                }
                *(uint64_t *)((char *)v9 + v184) = v186;
                v184 -= 8;
              }
              while (v184);
              v183 = v9;
LABEL_300:
              *v183 = v169;
            }
            v163 = v168 + 1;
            v166 += 8;
            v167 = v168;
            if (v168 + 1 == a2)
              return result;
          }
        }
        if (a3)
        {
          v12 = v11 >> 1;
          v13 = &v9[v11 >> 1];
          if ((unint64_t)v10 < 0x401)
          {
            result = std::__sort3[abi:se180100]<std::_ClassicAlgPolicy,pathCreateCopyByClippingLineWithPath(ClipperLib::ClipType,CGPath const*,CGPath const*,BOOL)::$_0 &,ClipperLib::PolyNode **>(&v7[v11 >> 1], v7, a2 - 1);
          }
          else
          {
            std::__sort3[abi:se180100]<std::_ClassicAlgPolicy,pathCreateCopyByClippingLineWithPath(ClipperLib::ClipType,CGPath const*,CGPath const*,BOOL)::$_0 &,ClipperLib::PolyNode **>(v7, &v7[v11 >> 1], a2 - 1);
            std::__sort3[abi:se180100]<std::_ClassicAlgPolicy,pathCreateCopyByClippingLineWithPath(ClipperLib::ClipType,CGPath const*,CGPath const*,BOOL)::$_0 &,ClipperLib::PolyNode **>(v7 + 1, v13 - 1, a2 - 2);
            std::__sort3[abi:se180100]<std::_ClassicAlgPolicy,pathCreateCopyByClippingLineWithPath(ClipperLib::ClipType,CGPath const*,CGPath const*,BOOL)::$_0 &,ClipperLib::PolyNode **>(v7 + 2, &v7[v12 + 1], a2 - 3);
            result = std::__sort3[abi:se180100]<std::_ClassicAlgPolicy,pathCreateCopyByClippingLineWithPath(ClipperLib::ClipType,CGPath const*,CGPath const*,BOOL)::$_0 &,ClipperLib::PolyNode **>(v13 - 1, v13, &v7[v12 + 1]);
            v14 = *v7;
            *v7 = *v13;
            *v13 = v14;
          }
          --a3;
          v15 = *v7;
          if ((a4 & 1) == 0)
          {
            v16 = *(v7 - 1);
            v17 = *(_QWORD *)(v16 + 8);
            if (*(_QWORD *)(v16 + 16) == v17)
              goto LABEL_496;
            v18 = *(_QWORD *)(v17 + 16);
            v19 = *(_QWORD *)(v17 + 32);
            v20 = v18 >= v19 ? *(_QWORD *)(v17 + 32) : *(_QWORD *)(v17 + 16);
            v21 = *(_QWORD *)(v15 + 8);
            if (*(_QWORD *)(v15 + 16) == v21)
              goto LABEL_496;
            v22 = *(_QWORD *)(v21 + 16);
            v23 = *(_QWORD *)(v21 + 32);
            v24 = v22 >= v23 ? *(_QWORD *)(v21 + 32) : *(_QWORD *)(v21 + 16);
            if (v20 >= v24)
            {
              v25 = *(double *)(v17 + 24);
              v26 = *(double *)(v17 + 40);
              v27 = (double *)(v21 + 24);
              v28 = (double *)(v21 + 40);
              if (v22 >= v23)
                v27 = v28;
              v29 = *v27;
              if (v18 >= v19)
                v25 = v26;
              if (v20 != v24 || v25 >= v29)
              {
                v90 = *(_QWORD *)(*v8 + 8);
                if (*(_QWORD *)(*v8 + 16) == v90)
                  goto LABEL_496;
                v91 = *(_QWORD *)(v90 + 16);
                v92 = *(_QWORD *)(v90 + 32);
                if (v91 >= v92)
                  v93 = *(_QWORD *)(v90 + 32);
                else
                  v93 = *(_QWORD *)(v90 + 16);
                if (v24 < v93)
                  goto LABEL_149;
                v94 = (double *)(v90 + 24);
                v95 = (double *)(v90 + 40);
                if (v91 < v92)
                  v95 = v94;
                if (v24 == v93 && v29 < *v95)
                {
LABEL_149:
                  v106 = v7 + 1;
                  while (v106 != a2)
                  {
                    v9 = v106;
                    v108 = (uint64_t *)(*v106 + 8);
                    v107 = *v108;
                    if (v108[1] == *v108)
                      break;
                    v109 = *(_QWORD *)(v107 + 16);
                    v110 = *(_QWORD *)(v107 + 32);
                    if (v109 >= v110)
                      v111 = *(_QWORD *)(v107 + 32);
                    else
                      v111 = *(_QWORD *)(v107 + 16);
                    if (v24 >= v111)
                    {
                      v112 = (double *)(v107 + 24);
                      v113 = (double *)(v107 + 40);
                      if (v109 < v110)
                        v113 = v112;
                      v114 = *v113;
                      v106 = v9 + 1;
                      if (v24 != v111 || v29 >= v114)
                        continue;
                    }
                    goto LABEL_163;
                  }
                  goto LABEL_496;
                }
                v97 = v7 + 1;
                do
                {
                  v9 = v97;
                  if (v97 >= a2)
                    break;
                  v98 = *(_QWORD *)(*v97 + 8);
                  if (*(_QWORD *)(*v9 + 16) == v98)
                    goto LABEL_496;
                  v99 = *(_QWORD *)(v98 + 16);
                  v100 = *(_QWORD *)(v98 + 32);
                  v101 = v99 >= v100 ? *(_QWORD *)(v98 + 32) : *(_QWORD *)(v98 + 16);
                  if (v24 < v101)
                    break;
                  v102 = (double *)(v98 + 24);
                  v103 = (double *)(v98 + 40);
                  if (v99 < v100)
                    v103 = v102;
                  v104 = *v103;
                  v97 = v9 + 1;
                }
                while (v24 != v101 || v29 >= v104);
LABEL_163:
                v116 = a2;
                if (v9 < a2)
                {
                  v116 = a2 - 1;
                  if (a2 != v7)
                  {
                    while (1)
                    {
                      v117 = *(_QWORD *)(*v116 + 8);
                      if (*(_QWORD *)(*v116 + 16) == v117)
                        break;
                      v118 = *(_QWORD *)(v117 + 16);
                      v119 = *(_QWORD *)(v117 + 32);
                      if (v118 >= v119)
                        v120 = *(_QWORD *)(v117 + 32);
                      else
                        v120 = *(_QWORD *)(v117 + 16);
                      if (v24 >= v120)
                      {
                        v121 = (double *)(v117 + 24);
                        v122 = (double *)(v117 + 40);
                        if (v118 < v119)
                          v122 = v121;
                        if (v24 != v120 || v29 >= *v122)
                          goto LABEL_180;
                      }
                      v164 = v116-- == v7;
                      if (v164)
                        goto LABEL_496;
                    }
                  }
                  goto LABEL_496;
                }
LABEL_180:
                if (v9 < v116)
                {
                  v124 = *v9;
                  v125 = *v116;
                  do
                  {
                    *v9 = v125;
                    *v116 = v124;
                    v126 = v9 + 1;
                    do
                    {
                      if (v126 == a2)
                        goto LABEL_496;
                      v127 = *(_QWORD *)(v15 + 8);
                      if (*(_QWORD *)(v15 + 16) == v127)
                        goto LABEL_496;
                      v9 = v126;
                      v124 = *v126;
                      v128 = *(_QWORD *)(v127 + 16);
                      v129 = *(_QWORD *)(v127 + 32);
                      v130 = v128 >= v129 ? *(_QWORD *)(v127 + 32) : *(_QWORD *)(v127 + 16);
                      v131 = *(_QWORD *)(v124 + 8);
                      if (*(_QWORD *)(v124 + 16) == v131)
                        goto LABEL_496;
                      v132 = *(double *)(v127 + 24);
                      v133 = *(double *)(v127 + 40);
                      v134 = *(_QWORD *)(v131 + 16);
                      v135 = *(_QWORD *)(v131 + 32);
                      if (v134 >= v135)
                        v136 = *(_QWORD *)(v131 + 32);
                      else
                        v136 = *(_QWORD *)(v131 + 16);
                      if (v130 < v136)
                        break;
                      result = (uint64_t *)(v131 + 24);
                      v137 = (double *)(v131 + 40);
                      if (v134 < v135)
                        v137 = (double *)result;
                      v138 = *v137;
                      v139 = v128 >= v129 ? v133 : v132;
                      v126 = v9 + 1;
                    }
                    while (v130 != v136 || v139 >= v138);
                    if (v116 == v7)
                      goto LABEL_496;
                    if (v128 >= v129)
                      v132 = v133;
                    --v116;
                    while (1)
                    {
                      v125 = *v116;
                      v141 = *(_QWORD *)(*v116 + 8);
                      if (*(_QWORD *)(*v116 + 16) == v141)
                        goto LABEL_496;
                      v142 = *(_QWORD *)(v141 + 16);
                      v143 = *(_QWORD *)(v141 + 32);
                      v144 = v142 >= v143 ? *(_QWORD *)(v141 + 32) : *(_QWORD *)(v141 + 16);
                      if (v130 >= v144)
                      {
                        v145 = (double *)(v141 + 24);
                        v146 = (double *)(v141 + 40);
                        if (v142 < v143)
                          v146 = v145;
                        if (v130 != v144 || v132 >= *v146)
                          break;
                      }
                      v164 = v116-- == v7;
                      if (v164)
                        goto LABEL_496;
                    }
                  }
                  while (v9 < v116);
                }
                v148 = v9 - 1;
                if (v9 - 1 != v7)
                  *v7 = *v148;
                a4 = 0;
                *v148 = v15;
                continue;
              }
            }
          }
          for (i = v7 + 1; ; ++i)
          {
            if (i == a2)
              goto LABEL_496;
            v32 = *i;
            v33 = *(_QWORD *)(*i + 8);
            if (*(_QWORD *)(*i + 16) == v33)
              goto LABEL_496;
            v34 = *(_QWORD *)(v33 + 16);
            v35 = *(_QWORD *)(v33 + 32);
            v36 = v34 >= v35 ? *(_QWORD *)(v33 + 32) : *(_QWORD *)(v33 + 16);
            v37 = *(_QWORD *)(v15 + 8);
            if (*(_QWORD *)(v15 + 16) == v37)
              goto LABEL_496;
            result = *(uint64_t **)(v37 + 16);
            v38 = *(_QWORD *)(v37 + 32);
            v39 = (unint64_t)result >= v38 ? *(_QWORD *)(v37 + 32) : *(_QWORD *)(v37 + 16);
            if (v36 >= v39)
            {
              v40 = *(double *)(v33 + 24);
              v41 = *(double *)(v33 + 40);
              v42 = (double *)(v37 + 24);
              v43 = (double *)(v37 + 40);
              if ((unint64_t)result >= v38)
                v42 = v43;
              v44 = *v42;
              if (v34 >= v35)
                v40 = v41;
              if (v36 != v39 || v40 >= v44)
                break;
            }
          }
          v46 = a2 - 1;
          if (i - 1 != v7)
          {
            while (1)
            {
              v47 = v46;
              if (v46 + 1 == v7)
                goto LABEL_496;
              v48 = *(_QWORD *)(*v46 + 8);
              if (*(_QWORD *)(*v47 + 16) == v48)
                goto LABEL_496;
              v49 = *(_QWORD *)(v48 + 16);
              v50 = *(_QWORD *)(v48 + 32);
              if (v49 >= v50)
                v51 = *(_QWORD *)(v48 + 32);
              else
                v51 = *(_QWORD *)(v48 + 16);
              if (v51 >= v39)
              {
                v52 = (double *)(v48 + 40);
                v53 = (double *)(v48 + 24);
                if (v49 >= v50)
                  v53 = v52;
                v54 = *v53;
                v46 = v47 - 1;
                if (v51 != v39 || v54 >= v44)
                  continue;
              }
              goto LABEL_80;
            }
          }
          v56 = a2 - 1;
          while (1)
          {
            v47 = v56;
            v57 = v56 + 1;
            if (i >= v57)
              break;
            v58 = *(_QWORD *)(*v47 + 8);
            if (*(_QWORD *)(*v47 + 16) == v58)
              goto LABEL_496;
            v59 = *(_QWORD *)(v58 + 16);
            v60 = *(_QWORD *)(v58 + 32);
            if (v59 >= v60)
              v61 = *(_QWORD *)(v58 + 32);
            else
              v61 = *(_QWORD *)(v58 + 16);
            if (v61 >= v39)
            {
              v62 = (double *)(v58 + 40);
              v63 = (double *)(v58 + 24);
              if (v59 >= v60)
                v63 = v62;
              v64 = *v63;
              v56 = v47 - 1;
              if (v61 != v39 || v64 >= v44)
                continue;
            }
            goto LABEL_80;
          }
          v47 = v57;
LABEL_80:
          v9 = i;
          if (i < v47)
          {
            v66 = *v47;
            v9 = i;
            v67 = v47;
            do
            {
              *v9++ = v66;
              *v67 = v32;
              while (1)
              {
                if (v9 == a2)
                  goto LABEL_496;
                v32 = *v9;
                v68 = *(_QWORD *)(*v9 + 8);
                if (*(_QWORD *)(*v9 + 16) == v68)
                  goto LABEL_496;
                v69 = *(_QWORD *)(v68 + 16);
                v70 = *(_QWORD *)(v68 + 32);
                v71 = v69 >= v70 ? *(_QWORD *)(v68 + 32) : *(_QWORD *)(v68 + 16);
                result = *(uint64_t **)(v15 + 8);
                if (*(uint64_t **)(v15 + 16) == result)
                  goto LABEL_496;
                v72 = result[2];
                v73 = result[4];
                v74 = v72 >= v73 ? result[4] : result[2];
                if (v71 >= v74)
                {
                  v75 = *(double *)(v68 + 24);
                  v76 = *(double *)(v68 + 40);
                  v77 = (double *)(result + 3);
                  result += 5;
                  if (v72 >= v73)
                    v77 = (double *)result;
                  v78 = *v77;
                  if (v69 >= v70)
                    v75 = v76;
                  if (v71 != v74 || v75 >= v78)
                    break;
                }
                ++v9;
              }
              v80 = v67 - 1;
              do
              {
                if (v80 + 1 == v7)
                  goto LABEL_496;
                v67 = v80;
                v66 = *v80;
                v81 = *(_QWORD *)(*v80 + 8);
                if (*(_QWORD *)(v66 + 16) == v81)
                  goto LABEL_496;
                v82 = *(_QWORD *)(v81 + 16);
                result = *(uint64_t **)(v81 + 32);
                if (v82 >= (unint64_t)result)
                  v83 = *(_QWORD *)(v81 + 32);
                else
                  v83 = *(_QWORD *)(v81 + 16);
                if (v83 < v74)
                  break;
                v84 = (double *)(v81 + 40);
                v85 = (double *)(v81 + 24);
                if (v82 >= (unint64_t)result)
                  v85 = v84;
                v86 = *v85;
                v80 = v67 - 1;
              }
              while (v83 != v74 || v86 >= v78);
            }
            while (v9 < v67);
          }
          v88 = v9 - 1;
          if (v9 - 1 != v7)
            *v7 = *v88;
          *v88 = v15;
          if (i < v47)
            goto LABEL_122;
          v89 = std::__insertion_sort_incomplete[abi:se180100]<std::_ClassicAlgPolicy,pathCreateCopyByClippingLineWithPath(ClipperLib::ClipType,CGPath const*,CGPath const*,BOOL)::$_0 &,ClipperLib::PolyNode **>(v7, v9 - 1);
          result = (uint64_t *)std::__insertion_sort_incomplete[abi:se180100]<std::_ClassicAlgPolicy,pathCreateCopyByClippingLineWithPath(ClipperLib::ClipType,CGPath const*,CGPath const*,BOOL)::$_0 &,ClipperLib::PolyNode **>(v9, a2);
          if (!(_DWORD)result)
          {
            if ((v89 & 1) != 0)
              continue;
LABEL_122:
            result = (uint64_t *)std::__introsort<std::_ClassicAlgPolicy,pathCreateCopyByClippingLineWithPath(ClipperLib::ClipType,CGPath const*,CGPath const*,BOOL)::$_0 &,ClipperLib::PolyNode **,false>(v7, v9 - 1, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v9 - 1;
          if ((v89 & 1) != 0)
            return result;
          goto LABEL_2;
        }
        if (v9 == a2)
          return result;
        v197 = (v11 - 2) >> 1;
        v198 = v197;
        do
        {
          v199 = v198;
          if (v197 >= v198)
          {
            v200 = (2 * v198) | 1;
            v201 = &v9[v200];
            if (2 * v199 + 2 < (uint64_t)v11)
            {
              v202 = *(_QWORD *)(*v201 + 8);
              if (*(_QWORD *)(*v201 + 16) == v202)
                goto LABEL_496;
              v203 = v201[1];
              v204 = *(_QWORD *)(v202 + 16);
              result = *(uint64_t **)(v202 + 32);
              v205 = v204 >= (unint64_t)result ? *(_QWORD *)(v202 + 32) : *(_QWORD *)(v202 + 16);
              v207 = v203 + 8;
              v206 = *(_QWORD *)(v203 + 8);
              if (*(_QWORD *)(v207 + 8) == v206)
                goto LABEL_496;
              v208 = *(_QWORD *)(v206 + 16);
              v209 = *(_QWORD *)(v206 + 32);
              if (v208 >= v209)
                v210 = *(_QWORD *)(v206 + 32);
              else
                v210 = *(_QWORD *)(v206 + 16);
              if (v205 < v210)
                goto LABEL_325;
              v211 = *(double *)(v202 + 24);
              v212 = *(double *)(v202 + 40);
              v213 = (double *)(v206 + 24);
              v214 = (double *)(v206 + 40);
              if (v208 >= v209)
                v213 = v214;
              if (v204 >= (unint64_t)result)
                v211 = v212;
              if (v205 == v210 && v211 < *v213)
              {
LABEL_325:
                ++v201;
                v200 = 2 * v199 + 2;
              }
            }
            v216 = *v201;
            v217 = *(_QWORD *)(*v201 + 8);
            if (*(_QWORD *)(*v201 + 16) == v217)
              goto LABEL_496;
            v218 = &v9[v199];
            v219 = *v218;
            result = *(uint64_t **)(v217 + 16);
            v220 = *(_QWORD *)(v217 + 32);
            v221 = (unint64_t)result >= v220 ? *(_QWORD *)(v217 + 32) : *(_QWORD *)(v217 + 16);
            v222 = *(_QWORD *)(v219 + 8);
            if (*(_QWORD *)(v219 + 16) == v222)
              goto LABEL_496;
            v223 = *(_QWORD *)(v222 + 16);
            v224 = *(_QWORD *)(v222 + 32);
            if (v223 >= v224)
              v225 = *(_QWORD *)(v222 + 32);
            else
              v225 = *(_QWORD *)(v222 + 16);
            if (v221 >= v225)
            {
              v226 = *(double *)(v217 + 24);
              v227 = *(double *)(v217 + 40);
              v228 = (double *)(v222 + 24);
              v229 = (double *)(v222 + 40);
              if (v223 >= v224)
                v228 = v229;
              if ((unint64_t)result >= v220)
                v226 = v227;
              if (v221 != v225 || v226 >= *v228)
              {
                do
                {
                  v231 = v201;
                  *v218 = v216;
                  if (v197 < v200)
                    break;
                  v232 = 2 * v200;
                  v200 = (2 * v200) | 1;
                  v201 = &v9[v200];
                  v233 = v232 + 2;
                  if (v233 < (uint64_t)v11)
                  {
                    result = *(uint64_t **)(*v201 + 8);
                    if (*(uint64_t **)(*v201 + 16) == result)
                      goto LABEL_496;
                    v234 = v201[1];
                    v235 = result[2];
                    v236 = result[4];
                    v237 = v235 >= v236 ? result[4] : result[2];
                    v239 = v234 + 8;
                    v238 = *(_QWORD *)(v234 + 8);
                    if (*(_QWORD *)(v239 + 8) == v238)
                      goto LABEL_496;
                    v240 = *(_QWORD *)(v238 + 16);
                    v241 = *(_QWORD *)(v238 + 32);
                    if (v240 >= v241)
                      v242 = *(_QWORD *)(v238 + 32);
                    else
                      v242 = *(_QWORD *)(v238 + 16);
                    if (v237 < v242)
                      goto LABEL_363;
                    v243 = *((double *)result + 3);
                    v244 = *((double *)result + 5);
                    v245 = (double *)(v238 + 24);
                    v246 = (double *)(v238 + 40);
                    if (v240 >= v241)
                      v245 = v246;
                    if (v235 >= v236)
                      v243 = v244;
                    if (v237 == v242 && v243 < *v245)
                    {
LABEL_363:
                      ++v201;
                      v200 = v233;
                    }
                  }
                  v216 = *v201;
                  v248 = *(_QWORD *)(*v201 + 8);
                  result = *(uint64_t **)(*v201 + 16);
                  if (result == (uint64_t *)v248)
                    goto LABEL_496;
                  result = *(uint64_t **)(v248 + 16);
                  v249 = *(_QWORD *)(v248 + 32);
                  v250 = (unint64_t)result >= v249 ? *(_QWORD *)(v248 + 32) : *(_QWORD *)(v248 + 16);
                  v251 = *(_QWORD *)(v219 + 8);
                  if (*(_QWORD *)(v219 + 16) == v251)
                    goto LABEL_496;
                  v252 = *(_QWORD *)(v251 + 16);
                  v253 = *(_QWORD *)(v251 + 32);
                  v254 = v252 >= v253 ? *(_QWORD *)(v251 + 32) : *(_QWORD *)(v251 + 16);
                  if (v250 < v254)
                    break;
                  v255 = *(double *)(v248 + 24);
                  v256 = *(double *)(v248 + 40);
                  v257 = (double *)(v251 + 24);
                  v258 = (double *)(v251 + 40);
                  if (v252 >= v253)
                    v257 = v258;
                  if ((unint64_t)result >= v249)
                    v255 = v256;
                  v259 = v250 == v254 && v255 < *v257;
                  v218 = v231;
                }
                while (!v259);
                *v231 = v219;
              }
            }
          }
          v198 = v199 - 1;
        }
        while (v199);
        v260 = (unint64_t)v10 >> 3;
        while (2)
        {
          v261 = 0;
          v262 = *v9;
          v263 = v9;
          do
          {
            v264 = v263;
            v263 += v261 + 1;
            v265 = 2 * v261;
            v261 = (2 * v261) | 1;
            v266 = v265 + 2;
            if (v266 < v260)
            {
              v267 = *(_QWORD *)(*v263 + 8);
              if (*(_QWORD *)(*v263 + 16) == v267)
                goto LABEL_496;
              v268 = v263[1];
              v269 = *(_QWORD *)(v267 + 16);
              result = *(uint64_t **)(v267 + 32);
              v270 = v269 >= (unint64_t)result ? *(_QWORD *)(v267 + 32) : *(_QWORD *)(v267 + 16);
              v272 = v268 + 8;
              v271 = *(_QWORD *)(v268 + 8);
              if (*(_QWORD *)(v272 + 8) == v271)
                goto LABEL_496;
              v273 = *(_QWORD *)(v271 + 16);
              v274 = *(_QWORD *)(v271 + 32);
              if (v273 >= v274)
                v275 = *(_QWORD *)(v271 + 32);
              else
                v275 = *(_QWORD *)(v271 + 16);
              if (v270 < v275)
                goto LABEL_405;
              v276 = *(double *)(v267 + 24);
              v277 = *(double *)(v267 + 40);
              v278 = (double *)(v271 + 24);
              v279 = (double *)(v271 + 40);
              if (v273 >= v274)
                v278 = v279;
              if (v269 >= (unint64_t)result)
                v276 = v277;
              if (v270 == v275 && v276 < *v278)
              {
LABEL_405:
                ++v263;
                v261 = v266;
              }
            }
            *v264 = *v263;
          }
          while (v261 <= (uint64_t)((unint64_t)(v260 - 2) >> 1));
          if (v263 == --a2)
            goto LABEL_448;
          *v263 = *a2;
          *a2 = v262;
          v281 = (char *)v263 - (char *)v9 + 8;
          if (v281 < 9)
            goto LABEL_449;
          v282 = ((unint64_t)v281 >> 3) - 2;
          v283 = v282 >> 1;
          v284 = &v9[v282 >> 1];
          v285 = *(_QWORD *)(*v284 + 8);
          if (*(_QWORD *)(*v284 + 16) == v285)
            goto LABEL_496;
          v262 = *v263;
          v286 = *(_QWORD *)(v285 + 16);
          v287 = *(_QWORD *)(v285 + 32);
          result = v286 >= v287 ? *(uint64_t **)(v285 + 32) : *(uint64_t **)(v285 + 16);
          v288 = *(_QWORD *)(v262 + 8);
          if (*(_QWORD *)(v262 + 16) == v288)
            goto LABEL_496;
          v289 = *(_QWORD *)(v288 + 16);
          v290 = *(_QWORD *)(v288 + 32);
          v291 = v289 >= v290 ? *(uint64_t **)(v288 + 32) : *(uint64_t **)(v288 + 16);
          if (result >= v291)
          {
            v292 = *(double *)(v285 + 24);
            v293 = *(double *)(v285 + 40);
            v294 = (double *)(v288 + 24);
            v295 = (double *)(v288 + 40);
            if (v289 >= v290)
              v294 = v295;
            if (v286 >= v287)
              v292 = v293;
            if (result != v291 || v292 >= *v294)
              goto LABEL_449;
          }
          *v263 = *v284;
          if (v282 < 2)
          {
LABEL_428:
            v263 = v284;
LABEL_448:
            *v263 = v262;
LABEL_449:
            if (v260-- <= 2)
              return result;
            continue;
          }
          break;
        }
        while (1)
        {
          v297 = v283 - 1;
          v283 = (v283 - 1) >> 1;
          v263 = &v9[v283];
          v298 = *(_QWORD *)(*v263 + 8);
          if (*(_QWORD *)(*v263 + 16) == v298)
            break;
          v299 = *(_QWORD *)(v298 + 16);
          v300 = *(_QWORD *)(v298 + 32);
          result = v299 >= v300 ? *(uint64_t **)(v298 + 32) : *(uint64_t **)(v298 + 16);
          v301 = *(_QWORD *)(v262 + 8);
          if (*(_QWORD *)(v262 + 16) == v301)
            break;
          v302 = *(_QWORD *)(v301 + 16);
          v303 = *(_QWORD *)(v301 + 32);
          if (v302 >= v303)
            v304 = *(uint64_t **)(v301 + 32);
          else
            v304 = *(uint64_t **)(v301 + 16);
          if (result >= v304)
          {
            v305 = *(double *)(v298 + 24);
            v306 = *(double *)(v298 + 40);
            v307 = (double *)(v301 + 24);
            v308 = (double *)(v301 + 40);
            if (v302 >= v303)
              v307 = v308;
            if (v299 >= v300)
              v305 = v306;
            if (result != v304 || v305 >= *v307)
              goto LABEL_428;
          }
          *v284 = *v263;
          v284 = &v9[v283];
          if (v297 <= 1)
            goto LABEL_448;
        }
LABEL_496:
        __break(1u);
        return result;
    }
  }
}

_QWORD *std::__hash_table<ClipperLib::PolyNode *,std::hash<ClipperLib::PolyNode *>,std::equal_to<ClipperLib::PolyNode *>,std::allocator<ClipperLib::PolyNode *>>::find<ClipperLib::PolyNode *>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  if (!a2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * (((8 * a3) + 8) ^ HIDWORD(a3));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a3) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= a2)
      v7 = v5 % a2;
  }
  else
  {
    v7 = v5 & (a2 - 1);
  }
  v8 = *(_QWORD **)(a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == a3)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= a2)
            v10 %= a2;
        }
        else
        {
          v10 &= a2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void ClipperLib::PolyTree::~PolyTree(ClipperLib::PolyTree *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E1628D78;
  ClipperLib::PolyTree::Clear(this);
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  ClipperLib::PolyNode::~PolyNode(this);
}

{
  ClipperLib::PolyTree::~PolyTree(this);
  JUMPOUT(0x186DC23C4);
}

void ClipperLib::PolyNode::~PolyNode(ClipperLib::PolyNode *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E1628D58;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

{
  ClipperLib::PolyNode::~PolyNode(this);
  JUMPOUT(0x186DC23C4);
}

uint64_t *std::__sort3[abi:se180100]<std::_ClassicAlgPolicy,pathCreateCopyByClippingLineWithPath(ClipperLib::ClipType,CGPath const*,CGPath const*,BOOL)::$_0 &,ClipperLib::PolyNode **>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  double *v15;
  double *v16;
  double v17;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  double *v23;
  double *v24;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  double v35;
  double v36;
  double *v37;
  double *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double *v45;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  double v55;
  double v56;
  double *v57;
  double *v58;

  v3 = *a2;
  v4 = *(_QWORD *)(*a2 + 8);
  if (*(_QWORD *)(*a2 + 16) == v4)
    goto LABEL_80;
  v5 = *result;
  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 32);
  v8 = v6 >= v7 ? *(_QWORD *)(v4 + 32) : *(_QWORD *)(v4 + 16);
  v9 = *(_QWORD *)(v5 + 8);
  if (*(_QWORD *)(v5 + 16) == v9)
    goto LABEL_80;
  v10 = *(double *)(v4 + 24);
  v11 = *(double *)(v4 + 40);
  v12 = *(_QWORD *)(v9 + 16);
  v13 = *(_QWORD *)(v9 + 32);
  if (v12 >= v13)
    v14 = *(_QWORD *)(v9 + 32);
  else
    v14 = *(_QWORD *)(v9 + 16);
  if (v8 >= v14)
  {
    v15 = (double *)(v9 + 24);
    v16 = (double *)(v9 + 40);
    if (v12 < v13)
      v16 = v15;
    v17 = v6 >= v7 ? v11 : v10;
    if (v8 != v14 || v17 >= *v16)
    {
      v19 = *(_QWORD *)(*a3 + 8);
      if (*(_QWORD *)(*a3 + 16) != v19)
      {
        v20 = *(_QWORD *)(v19 + 16);
        v21 = *(_QWORD *)(v19 + 32);
        if (v20 >= v21)
          v22 = *(_QWORD *)(v19 + 32);
        else
          v22 = *(_QWORD *)(v19 + 16);
        if (v22 >= v8)
        {
          v23 = (double *)(v19 + 40);
          v24 = (double *)(v19 + 24);
          if (v20 >= v21)
            v24 = v23;
          if (v22 != v8 || *v24 >= v17)
            return result;
        }
        *a2 = *a3;
        *a3 = v3;
        v26 = *(_QWORD *)(*a2 + 8);
        if (*(_QWORD *)(*a2 + 16) != v26)
        {
          v27 = *result;
          v28 = *(_QWORD *)(v26 + 16);
          v29 = *(_QWORD *)(v26 + 32);
          v30 = v28 >= v29 ? *(_QWORD *)(v26 + 32) : *(_QWORD *)(v26 + 16);
          v31 = *(_QWORD *)(v27 + 8);
          if (*(_QWORD *)(v27 + 16) != v31)
          {
            v32 = *(_QWORD *)(v31 + 16);
            v33 = *(_QWORD *)(v31 + 32);
            if (v32 >= v33)
              v34 = *(_QWORD *)(v31 + 32);
            else
              v34 = *(_QWORD *)(v31 + 16);
            if (v30 < v34)
              goto LABEL_46;
            v35 = *(double *)(v26 + 24);
            v36 = *(double *)(v26 + 40);
            v37 = (double *)(v31 + 24);
            v38 = (double *)(v31 + 40);
            if (v32 >= v33)
              v37 = v38;
            if (v28 >= v29)
              v35 = v36;
            if (v30 == v34 && v35 < *v37)
            {
LABEL_46:
              *result = *a2;
              *a2 = v27;
            }
            return result;
          }
        }
      }
LABEL_80:
      __break(1u);
      return result;
    }
  }
  v39 = *(_QWORD *)(*a3 + 8);
  if (*(_QWORD *)(*a3 + 16) == v39)
    goto LABEL_80;
  v40 = *(_QWORD *)(v39 + 16);
  v41 = *(_QWORD *)(v39 + 32);
  if (v40 >= v41)
    v42 = *(_QWORD *)(v39 + 32);
  else
    v42 = *(_QWORD *)(v39 + 16);
  if (v42 < v8)
    goto LABEL_77;
  v43 = v39 + 40;
  v44 = v39 + 24;
  if (v6 >= v7)
    v10 = v11;
  v45 = (double *)(v40 >= v41 ? v43 : v44);
  if (v42 == v8 && *v45 < v10)
  {
LABEL_77:
    *result = *a3;
    goto LABEL_78;
  }
  *result = v3;
  *a2 = v5;
  v47 = *(_QWORD *)(*a3 + 8);
  if (*(_QWORD *)(*a3 + 16) == v47)
    goto LABEL_80;
  v48 = *(_QWORD *)(v47 + 16);
  v49 = *(_QWORD *)(v47 + 32);
  v50 = v48 >= v49 ? *(_QWORD *)(v47 + 32) : *(_QWORD *)(v47 + 16);
  v51 = *(_QWORD *)(v5 + 8);
  if (*(_QWORD *)(v5 + 16) == v51)
    goto LABEL_80;
  v52 = *(_QWORD *)(v51 + 16);
  v53 = *(_QWORD *)(v51 + 32);
  if (v52 >= v53)
    v54 = *(_QWORD *)(v51 + 32);
  else
    v54 = *(_QWORD *)(v51 + 16);
  if (v50 < v54)
    goto LABEL_76;
  v55 = *(double *)(v47 + 24);
  v56 = *(double *)(v47 + 40);
  v57 = (double *)(v51 + 24);
  v58 = (double *)(v51 + 40);
  if (v52 >= v53)
    v57 = v58;
  if (v48 >= v49)
    v55 = v56;
  if (v50 == v54 && v55 < *v57)
  {
LABEL_76:
    *a2 = *a3;
LABEL_78:
    *a3 = v5;
  }
  return result;
}

uint64_t *std::__sort4[abi:se180100]<std::_ClassicAlgPolicy,pathCreateCopyByClippingLineWithPath(ClipperLib::ClipType,CGPath const*,CGPath const*,BOOL)::$_0 &,ClipperLib::PolyNode **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  double v18;
  double v19;
  double *v20;
  double *v21;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  double v32;
  double v33;
  double *v34;
  double *v35;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  double v46;
  double v47;
  double *v48;
  double *v49;

  result = std::__sort3[abi:se180100]<std::_ClassicAlgPolicy,pathCreateCopyByClippingLineWithPath(ClipperLib::ClipType,CGPath const*,CGPath const*,BOOL)::$_0 &,ClipperLib::PolyNode **>(a1, a2, a3);
  v9 = *(_QWORD *)(*a4 + 8);
  if (*(_QWORD *)(*a4 + 16) == v9)
    goto LABEL_54;
  v10 = *a3;
  v11 = *(_QWORD *)(v9 + 16);
  v12 = *(_QWORD *)(v9 + 32);
  v13 = v11 >= v12 ? *(_QWORD *)(v9 + 32) : *(_QWORD *)(v9 + 16);
  v14 = *(_QWORD *)(v10 + 8);
  if (*(_QWORD *)(v10 + 16) == v14)
    goto LABEL_54;
  v15 = *(_QWORD *)(v14 + 16);
  v16 = *(_QWORD *)(v14 + 32);
  if (v15 >= v16)
    v17 = *(_QWORD *)(v14 + 32);
  else
    v17 = *(_QWORD *)(v14 + 16);
  if (v13 < v17)
    goto LABEL_19;
  v18 = *(double *)(v9 + 24);
  v19 = *(double *)(v9 + 40);
  v20 = (double *)(v14 + 24);
  v21 = (double *)(v14 + 40);
  if (v15 >= v16)
    v20 = v21;
  if (v11 >= v12)
    v18 = v19;
  if (v13 == v17 && v18 < *v20)
  {
LABEL_19:
    *a3 = *a4;
    *a4 = v10;
    v23 = *(_QWORD *)(*a3 + 8);
    if (*(_QWORD *)(*a3 + 16) != v23)
    {
      v24 = *a2;
      v25 = *(_QWORD *)(v23 + 16);
      v26 = *(_QWORD *)(v23 + 32);
      v27 = v25 >= v26 ? *(_QWORD *)(v23 + 32) : *(_QWORD *)(v23 + 16);
      v28 = *(_QWORD *)(v24 + 8);
      if (*(_QWORD *)(v24 + 16) != v28)
      {
        v29 = *(_QWORD *)(v28 + 16);
        v30 = *(_QWORD *)(v28 + 32);
        if (v29 >= v30)
          v31 = *(_QWORD *)(v28 + 32);
        else
          v31 = *(_QWORD *)(v28 + 16);
        if (v27 >= v31)
        {
          v32 = *(double *)(v23 + 24);
          v33 = *(double *)(v23 + 40);
          v34 = (double *)(v28 + 24);
          v35 = (double *)(v28 + 40);
          if (v29 >= v30)
            v34 = v35;
          if (v25 >= v26)
            v32 = v33;
          if (v27 != v31 || v32 >= *v34)
            return result;
        }
        *a2 = *a3;
        *a3 = v24;
        v37 = *(_QWORD *)(*a2 + 8);
        if (*(_QWORD *)(*a2 + 16) != v37)
        {
          v38 = *a1;
          v39 = *(_QWORD *)(v37 + 16);
          v40 = *(_QWORD *)(v37 + 32);
          v41 = v39 >= v40 ? *(_QWORD *)(v37 + 32) : *(_QWORD *)(v37 + 16);
          v42 = *(_QWORD *)(v38 + 8);
          if (*(_QWORD *)(v38 + 16) != v42)
          {
            v43 = *(_QWORD *)(v42 + 16);
            v44 = *(_QWORD *)(v42 + 32);
            if (v43 >= v44)
              v45 = *(_QWORD *)(v42 + 32);
            else
              v45 = *(_QWORD *)(v42 + 16);
            if (v41 < v45)
              goto LABEL_52;
            v46 = *(double *)(v37 + 24);
            v47 = *(double *)(v37 + 40);
            v48 = (double *)(v42 + 24);
            v49 = (double *)(v42 + 40);
            if (v43 >= v44)
              v48 = v49;
            if (v39 >= v40)
              v46 = v47;
            if (v41 == v45 && v46 < *v48)
            {
LABEL_52:
              *a1 = *a2;
              *a2 = v38;
            }
            return result;
          }
        }
      }
    }
LABEL_54:
    __break(1u);
  }
  return result;
}

uint64_t *std::__sort5_maybe_branchless[abi:se180100]<std::_ClassicAlgPolicy,pathCreateCopyByClippingLineWithPath(ClipperLib::ClipType,CGPath const*,CGPath const*,BOOL)::$_0 &,ClipperLib::PolyNode **,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  double v20;
  double v21;
  double *v22;
  double *v23;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  double v34;
  double v35;
  double *v36;
  double *v37;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  double v48;
  double v49;
  double *v50;
  double *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  double v61;
  double v62;
  double *v63;
  double *v64;

  result = std::__sort4[abi:se180100]<std::_ClassicAlgPolicy,pathCreateCopyByClippingLineWithPath(ClipperLib::ClipType,CGPath const*,CGPath const*,BOOL)::$_0 &,ClipperLib::PolyNode **>(a1, a2, a3, a4);
  v11 = *(_QWORD *)(*a5 + 8);
  if (*(_QWORD *)(*a5 + 16) == v11)
    goto LABEL_69;
  v12 = *a4;
  v13 = *(_QWORD *)(v11 + 16);
  v14 = *(_QWORD *)(v11 + 32);
  v15 = v13 >= v14 ? *(_QWORD *)(v11 + 32) : *(_QWORD *)(v11 + 16);
  v16 = *(_QWORD *)(v12 + 8);
  if (*(_QWORD *)(v12 + 16) == v16)
    goto LABEL_69;
  v17 = *(_QWORD *)(v16 + 16);
  v18 = *(_QWORD *)(v16 + 32);
  if (v17 >= v18)
    v19 = *(_QWORD *)(v16 + 32);
  else
    v19 = *(_QWORD *)(v16 + 16);
  if (v15 < v19)
    goto LABEL_19;
  v20 = *(double *)(v11 + 24);
  v21 = *(double *)(v11 + 40);
  v22 = (double *)(v16 + 24);
  v23 = (double *)(v16 + 40);
  if (v17 >= v18)
    v22 = v23;
  if (v13 >= v14)
    v20 = v21;
  if (v15 == v19 && v20 < *v22)
  {
LABEL_19:
    *a4 = *a5;
    *a5 = v12;
    v25 = *(_QWORD *)(*a4 + 8);
    if (*(_QWORD *)(*a4 + 16) != v25)
    {
      v26 = *a3;
      v27 = *(_QWORD *)(v25 + 16);
      v28 = *(_QWORD *)(v25 + 32);
      v29 = v27 >= v28 ? *(_QWORD *)(v25 + 32) : *(_QWORD *)(v25 + 16);
      v30 = *(_QWORD *)(v26 + 8);
      if (*(_QWORD *)(v26 + 16) != v30)
      {
        v31 = *(_QWORD *)(v30 + 16);
        v32 = *(_QWORD *)(v30 + 32);
        if (v31 >= v32)
          v33 = *(_QWORD *)(v30 + 32);
        else
          v33 = *(_QWORD *)(v30 + 16);
        if (v29 >= v33)
        {
          v34 = *(double *)(v25 + 24);
          v35 = *(double *)(v25 + 40);
          v36 = (double *)(v30 + 24);
          v37 = (double *)(v30 + 40);
          if (v31 >= v32)
            v36 = v37;
          if (v27 >= v28)
            v34 = v35;
          if (v29 != v33 || v34 >= *v36)
            return result;
        }
        *a3 = *a4;
        *a4 = v26;
        v39 = *(_QWORD *)(*a3 + 8);
        if (*(_QWORD *)(*a3 + 16) != v39)
        {
          v40 = *a2;
          v41 = *(_QWORD *)(v39 + 16);
          v42 = *(_QWORD *)(v39 + 32);
          v43 = v41 >= v42 ? *(_QWORD *)(v39 + 32) : *(_QWORD *)(v39 + 16);
          v44 = *(_QWORD *)(v40 + 8);
          if (*(_QWORD *)(v40 + 16) != v44)
          {
            v45 = *(_QWORD *)(v44 + 16);
            v46 = *(_QWORD *)(v44 + 32);
            if (v45 >= v46)
              v47 = *(_QWORD *)(v44 + 32);
            else
              v47 = *(_QWORD *)(v44 + 16);
            if (v43 >= v47)
            {
              v48 = *(double *)(v39 + 24);
              v49 = *(double *)(v39 + 40);
              v50 = (double *)(v44 + 24);
              v51 = (double *)(v44 + 40);
              if (v45 >= v46)
                v50 = v51;
              if (v41 >= v42)
                v48 = v49;
              if (v43 != v47 || v48 >= *v50)
                return result;
            }
            *a2 = *a3;
            *a3 = v40;
            v52 = *(_QWORD *)(*a2 + 8);
            if (*(_QWORD *)(*a2 + 16) != v52)
            {
              v53 = *a1;
              v54 = *(_QWORD *)(v52 + 16);
              v55 = *(_QWORD *)(v52 + 32);
              v56 = v54 >= v55 ? *(_QWORD *)(v52 + 32) : *(_QWORD *)(v52 + 16);
              v57 = *(_QWORD *)(v53 + 8);
              if (*(_QWORD *)(v53 + 16) != v57)
              {
                v58 = *(_QWORD *)(v57 + 16);
                v59 = *(_QWORD *)(v57 + 32);
                if (v58 >= v59)
                  v60 = *(_QWORD *)(v57 + 32);
                else
                  v60 = *(_QWORD *)(v57 + 16);
                if (v56 < v60)
                  goto LABEL_67;
                v61 = *(double *)(v52 + 24);
                v62 = *(double *)(v52 + 40);
                v63 = (double *)(v57 + 24);
                v64 = (double *)(v57 + 40);
                if (v58 >= v59)
                  v63 = v64;
                if (v54 >= v55)
                  v61 = v62;
                if (v56 == v60 && v61 < *v63)
                {
LABEL_67:
                  *a1 = *a2;
                  *a2 = v53;
                }
                return result;
              }
            }
          }
        }
      }
    }
LABEL_69:
    __break(1u);
  }
  return result;
}

unint64_t std::__insertion_sort_incomplete[abi:se180100]<std::_ClassicAlgPolicy,pathCreateCopyByClippingLineWithPath(ClipperLib::ClipType,CGPath const*,CGPath const*,BOOL)::$_0 &,ClipperLib::PolyNode **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  double v16;
  double v17;
  double *v18;
  double *v19;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  double v34;
  double v35;
  double *v36;
  double *v37;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  double v49;
  double v50;
  double *v51;
  double *v52;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *(_QWORD *)(v6 + 8);
      if (*(_QWORD *)(v6 + 16) == v7)
        goto LABEL_71;
      v8 = *a1;
      v9 = *(_QWORD *)(v7 + 16);
      v10 = *(_QWORD *)(v7 + 32);
      v11 = v9 >= v10 ? *(_QWORD *)(v7 + 32) : *(_QWORD *)(v7 + 16);
      v12 = *(_QWORD *)(v8 + 8);
      if (*(_QWORD *)(v8 + 16) == v12)
        goto LABEL_71;
      v13 = *(_QWORD *)(v12 + 16);
      v14 = *(_QWORD *)(v12 + 32);
      if (v13 >= v14)
        v15 = *(_QWORD *)(v12 + 32);
      else
        v15 = *(_QWORD *)(v12 + 16);
      if (v11 < v15)
        goto LABEL_20;
      v16 = *(double *)(v7 + 24);
      v17 = *(double *)(v7 + 40);
      v18 = (double *)(v12 + 24);
      v19 = (double *)(v12 + 40);
      if (v13 >= v14)
        v18 = v19;
      if (v9 >= v10)
        v16 = v17;
      if (v11 == v15 && v16 < *v18)
      {
LABEL_20:
        *a1 = v6;
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:se180100]<std::_ClassicAlgPolicy,pathCreateCopyByClippingLineWithPath(ClipperLib::ClipType,CGPath const*,CGPath const*,BOOL)::$_0 &,ClipperLib::PolyNode **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:se180100]<std::_ClassicAlgPolicy,pathCreateCopyByClippingLineWithPath(ClipperLib::ClipType,CGPath const*,CGPath const*,BOOL)::$_0 &,ClipperLib::PolyNode **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:se180100]<std::_ClassicAlgPolicy,pathCreateCopyByClippingLineWithPath(ClipperLib::ClipType,CGPath const*,CGPath const*,BOOL)::$_0 &,ClipperLib::PolyNode **,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v21 = a1 + 2;
      result = (unint64_t)std::__sort3[abi:se180100]<std::_ClassicAlgPolicy,pathCreateCopyByClippingLineWithPath(ClipperLib::ClipType,CGPath const*,CGPath const*,BOOL)::$_0 &,ClipperLib::PolyNode **>(a1, a1 + 1, a1 + 2);
      v22 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v23 = 0;
      v24 = 0;
      break;
  }
  while (1)
  {
    v25 = *v22;
    v26 = *(_QWORD *)(*v22 + 8);
    if (*(_QWORD *)(*v22 + 16) == v26)
      break;
    v27 = *v21;
    v28 = *(_QWORD *)(v26 + 16);
    v29 = *(_QWORD *)(v26 + 32);
    v30 = v28 >= v29 ? *(_QWORD *)(v26 + 32) : *(_QWORD *)(v26 + 16);
    v31 = *(_QWORD *)(v27 + 8);
    result = *(_QWORD *)(v27 + 16);
    if (result == v31)
      break;
    v32 = *(_QWORD *)(v31 + 16);
    v33 = *(_QWORD *)(v31 + 32);
    if (v32 >= v33)
      result = *(_QWORD *)(v31 + 32);
    else
      result = *(_QWORD *)(v31 + 16);
    if (v30 < result)
      goto LABEL_41;
    v34 = *(double *)(v26 + 24);
    v35 = *(double *)(v26 + 40);
    v36 = (double *)(v31 + 24);
    v37 = (double *)(v31 + 40);
    if (v32 >= v33)
      v36 = v37;
    if (v28 >= v29)
      v34 = v35;
    if (v30 == result && v34 < *v36)
    {
LABEL_41:
      *v22 = v27;
      v39 = a1;
      if (v21 != a1)
      {
        v40 = v23;
        while (1)
        {
          v41 = *(_QWORD *)(v25 + 8);
          if (*(_QWORD *)(v25 + 16) == v41)
            goto LABEL_71;
          v42 = *(uint64_t *)((char *)a1 + v40 + 8);
          v43 = *(_QWORD *)(v41 + 16);
          v44 = *(_QWORD *)(v41 + 32);
          result = v43 >= v44 ? *(_QWORD *)(v41 + 32) : *(_QWORD *)(v41 + 16);
          v45 = *(_QWORD *)(v42 + 8);
          if (*(_QWORD *)(v42 + 16) == v45)
            goto LABEL_71;
          v46 = *(_QWORD *)(v45 + 16);
          v47 = *(_QWORD *)(v45 + 32);
          if (v46 >= v47)
            v48 = *(_QWORD *)(v45 + 32);
          else
            v48 = *(_QWORD *)(v45 + 16);
          if (result >= v48)
          {
            v49 = *(double *)(v41 + 24);
            v50 = *(double *)(v41 + 40);
            v51 = (double *)(v45 + 24);
            v52 = (double *)(v45 + 40);
            if (v46 >= v47)
              v51 = v52;
            if (v43 >= v44)
              v49 = v50;
            if (result != v48 || v49 >= *v51)
            {
              v39 = (uint64_t *)((char *)a1 + v40 + 16);
              break;
            }
          }
          *(uint64_t *)((char *)a1 + v40 + 16) = v42;
          v40 -= 8;
          if (v40 == -16)
          {
            v39 = a1;
            break;
          }
        }
      }
      *v39 = v25;
      if (++v24 == 8)
        return v22 + 1 == a2;
    }
    v21 = v22;
    v23 += 8;
    if (++v22 == a2)
      return 1;
  }
LABEL_71:
  __break(1u);
  return result;
}

CGPathRef CGPathCreateCopyOfLineBySubtractingPath(CGPathRef path, CGPathRef maskPath, BOOL evenOddFillRule)
{
  return (CGPathRef)pathCreateCopyByClippingLineWithPath(2, path, maskPath, evenOddFillRule);
}

CGPathRef CGPathCreateCopyOfLineByIntersectingPath(CGPathRef path, CGPathRef maskPath, BOOL evenOddFillRule)
{
  return (CGPathRef)pathCreateCopyByClippingLineWithPath(0, path, maskPath, evenOddFillRule);
}

CFArrayRef CGPathCreateSeparateComponents(CGPathRef path, BOOL evenOddFillRule)
{
  _BOOL4 v2;
  CFTypeID v4;
  __CFArray *Mutable;
  const ClipperLib::PolyNode **v6;
  const ClipperLib::PolyNode **v7;
  const ClipperLib::PolyNode *v8;
  void ***v9;
  CGAffineTransform v11;
  CGAffineTransform v12;
  CGAffineTransform v13;
  CGAffineTransform v14;
  CGAffineTransform v15;
  void (**v16)(ClipperLib::PolyTree *__hidden);
  __int128 v17;
  __int128 v18;
  _QWORD v19[8];
  _QWORD v20[3];

  if (!path)
    return 0;
  v2 = evenOddFillRule;
  if (!CGPathDisableTypeValidation)
  {
    v4 = CFGetTypeID(path);
    if (v4 != CGPathGetTypeID())
      return 0;
  }
  memset(v20, 0, sizeof(v20));
  memset(v19, 0, 29);
  v18 = 0u;
  v17 = 0u;
  v16 = &off_1E1628D78;
  memset(&v19[5], 0, 24);
  memset(&v15, 0, sizeof(v15));
  clip<ClipperLib::PolyTree>(&v15, 1, path, v2, 1, 0, v2, (CGPathRandomAccess *)v20, (void **)&v16);
  v13 = v15;
  memset(&v14, 0, sizeof(v14));
  CGAffineTransformInvert(&v14, &v13);
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v6 = (const ClipperLib::PolyNode **)*((_QWORD *)&v18 + 1);
  v7 = (const ClipperLib::PolyNode **)v19[0];
  while (v6 != v7)
  {
    v8 = *v6;
    v12 = v15;
    v11 = v14;
    append_tree_path_component(v8, (CGPathRandomAccess *)v20, &v12, &v11, Mutable);
    ++v6;
  }
  ClipperLib::PolyTree::~PolyTree((ClipperLib::PolyTree *)&v16);
  v16 = (void (**)(ClipperLib::PolyTree *__hidden))v20;
  std::vector<CGPathRandomAccessSubpath>::__destroy_vector::operator()[abi:se180100](v9);
  return Mutable;
}

void sub_184AD3030(_Unwind_Exception *a1)
{
  uint64_t v1;
  void ***v3;

  ClipperLib::PolyTree::~PolyTree((ClipperLib::PolyTree *)(v1 - 160));
  *(_QWORD *)(v1 - 160) = v1 - 56;
  std::vector<CGPathRandomAccessSubpath>::__destroy_vector::operator()[abi:se180100](v3);
  _Unwind_Resume(a1);
}

CGPathRef CGPathCreateCopyByFlattening(CGPathRef path, CGFloat flatteningThreshold)
{
  const CGPath *v2;
  CFTypeID v4;
  _QWORD v6[6];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  CGMutablePathRef Mutable;

  v2 = path;
  if (path)
  {
    if (CGPathDisableTypeValidation || (v4 = CFGetTypeID(path), v4 == CGPathGetTypeID()))
    {
      v7 = 0;
      v8 = &v7;
      v9 = 0x2000000000;
      Mutable = 0;
      Mutable = CGPathCreateMutable();
      v6[0] = MEMORY[0x1E0C809B0];
      v6[1] = 0x40000000;
      v6[2] = __CGPathCreateCopyByFlattening_block_invoke;
      v6[3] = &unk_1E16302A8;
      v6[4] = &v7;
      *(CGFloat *)&v6[5] = flatteningThreshold;
      CGPathApplyWithBlock(v2, v6);
      v2 = (const CGPath *)v8[3];
      _Block_object_dispose(&v7, 8);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void sub_184AD312C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t PDFMarkedContentItem::PDFMarkedContentItem(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_DWORD *)result = a2;
  if (a3)
    v3 = a3[2];
  else
    v3 = 0;
  *(_QWORD *)(result + 8) = v3;
  *(_QWORD *)(result + 32) = 0;
  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    v4 = -1;
  }
  else
  {
    v5 = a3[11];
    a3[11] = v5 + 1;
    *(_QWORD *)(result + 16) = v5;
    v4 = a3[12];
    if (v4 == -1)
    {
      v6 = a3[1];
      v4 = *(_QWORD *)(v6 + 592);
      *(_QWORD *)(v6 + 592) = v4 + 1;
      a3[12] = v4;
    }
  }
  *(_QWORD *)(result + 24) = v4;
  return result;
}

uint64_t (**cg_jbig2_library_link_symbol())(void)
{
  return cg_jbig2_vtable;
}

uint64_t get_version(void)
{
  return 1;
}

_QWORD *create_state(const void *a1, const void *a2)
{
  _QWORD *v4;

  if (!a1)
    return 0;
  v4 = (_QWORD *)operator new();
  CFRetain(a1);
  *v4 = a1;
  if (a2)
    CFRetain(a2);
  v4[1] = a2;
  v4[2] = 0;
  return v4;
}

uint64_t release_state(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  const void *v3;

  if (result)
  {
    v1 = result;
    v2 = *(_QWORD *)(result + 16);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    if (*(_QWORD *)v1)
      CFRelease(*(CFTypeRef *)v1);
    v3 = *(const void **)(v1 + 8);
    if (v3)
      CFRelease(v3);
    JUMPOUT(0x186DC23C4);
  }
  return result;
}

uint64_t read_bytes(_QWORD *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  void *v44;
  _QWORD *v45;
  uint64_t v46;
  int v47;
  BOOL v48;
  uint64_t v49;
  int v50;

  v5 = a1[2];
  if (!v5)
  {
    v7 = operator new();
    *(_DWORD *)(v7 + 8) = 1;
    *(_QWORD *)v7 = &off_1E1627FF8;
    *(_QWORD *)(v7 + 24) = v7 + 40;
    *(_QWORD *)(v7 + 32) = v7 + 40;
    v8 = a1[1];
    *(_QWORD *)(v7 + 16) = *a1;
    *(_QWORD *)(v7 + 4136) = 0;
    if (v8)
    {
      v9 = operator new();
      v10 = a1[1];
      *(_DWORD *)(v9 + 8) = 1;
      *(_QWORD *)v9 = &off_1E1627FF8;
      *(_QWORD *)(v9 + 24) = v9 + 40;
      *(_QWORD *)(v9 + 32) = v9 + 40;
      *(_QWORD *)(v9 + 16) = v10;
      *(_QWORD *)(v9 + 4136) = 0;
    }
    else
    {
      v9 = 0;
    }
    v11 = operator new();
    *(_DWORD *)(v11 + 8) = 1;
    *(_QWORD *)v11 = &off_1E1627E00;
    *(_QWORD *)(v11 + 16) = v7;
    *(_QWORD *)(v11 + 24) = 0;
    *(_QWORD *)(v11 + 48) = 0;
    v12 = operator new();
    *(_QWORD *)(v12 + 24) = 0;
    *(_QWORD *)(v12 + 32) = 0;
    *(_QWORD *)(v11 + 104) = v12;
    v13 = operator new();
    *(_DWORD *)(v13 + 8) = 2;
    v14 = gmalloc(2uLL);
    *(_QWORD *)v13 = v14;
    bzero(v14, *(int *)(v13 + 8));
    *(_QWORD *)(v11 + 112) = v13;
    v15 = operator new();
    *(_DWORD *)(v15 + 8) = 2;
    v16 = gmalloc(2uLL);
    *(_QWORD *)v15 = v16;
    bzero(v16, *(int *)(v15 + 8));
    *(_QWORD *)(v11 + 120) = v15;
    v17 = operator new();
    *(_DWORD *)(v17 + 8) = 512;
    v18 = gmalloc(0x200uLL);
    *(_QWORD *)v17 = v18;
    bzero(v18, *(int *)(v17 + 8));
    *(_QWORD *)(v11 + 128) = v17;
    v19 = operator new();
    *(_DWORD *)(v19 + 8) = 512;
    v20 = gmalloc(0x200uLL);
    *(_QWORD *)v19 = v20;
    bzero(v20, *(int *)(v19 + 8));
    *(_QWORD *)(v11 + 136) = v19;
    v21 = operator new();
    *(_DWORD *)(v21 + 8) = 512;
    v22 = gmalloc(0x200uLL);
    *(_QWORD *)v21 = v22;
    bzero(v22, *(int *)(v21 + 8));
    *(_QWORD *)(v11 + 144) = v21;
    v23 = operator new();
    *(_DWORD *)(v23 + 8) = 512;
    v24 = gmalloc(0x200uLL);
    *(_QWORD *)v23 = v24;
    bzero(v24, *(int *)(v23 + 8));
    *(_QWORD *)(v11 + 152) = v23;
    v25 = operator new();
    *(_DWORD *)(v25 + 8) = 512;
    v26 = gmalloc(0x200uLL);
    *(_QWORD *)v25 = v26;
    bzero(v26, *(int *)(v25 + 8));
    *(_QWORD *)(v11 + 160) = v25;
    v27 = operator new();
    *(_DWORD *)(v27 + 8) = 512;
    v28 = gmalloc(0x200uLL);
    *(_QWORD *)v27 = v28;
    bzero(v28, *(int *)(v27 + 8));
    *(_QWORD *)(v11 + 168) = v27;
    v29 = operator new();
    *(_DWORD *)(v29 + 8) = 512;
    v30 = gmalloc(0x200uLL);
    *(_QWORD *)v29 = v30;
    bzero(v30, *(int *)(v29 + 8));
    *(_QWORD *)(v11 + 176) = v29;
    v31 = operator new();
    *(_DWORD *)(v31 + 8) = 512;
    v32 = gmalloc(0x200uLL);
    *(_QWORD *)v31 = v32;
    bzero(v32, *(int *)(v31 + 8));
    *(_QWORD *)(v11 + 184) = v31;
    v33 = operator new();
    *(_DWORD *)(v33 + 8) = 512;
    v34 = gmalloc(0x200uLL);
    *(_QWORD *)v33 = v34;
    bzero(v34, *(int *)(v33 + 8));
    *(_QWORD *)(v11 + 192) = v33;
    v35 = operator new();
    *(_DWORD *)(v35 + 8) = 512;
    v36 = gmalloc(0x200uLL);
    *(_QWORD *)v35 = v36;
    bzero(v36, *(int *)(v35 + 8));
    *(_QWORD *)(v11 + 200) = v35;
    v37 = operator new();
    *(_DWORD *)(v37 + 8) = 512;
    v38 = gmalloc(0x200uLL);
    *(_QWORD *)v37 = v38;
    bzero(v38, *(int *)(v37 + 8));
    *(_QWORD *)(v11 + 208) = v37;
    v39 = operator new();
    *(_DWORD *)(v39 + 8) = 512;
    v40 = gmalloc(0x200uLL);
    *(_QWORD *)v39 = v40;
    bzero(v40, *(int *)(v39 + 8));
    *(_QWORD *)(v11 + 216) = v39;
    v41 = operator new();
    *(_DWORD *)(v41 + 8) = 512;
    v42 = gmalloc(0x200uLL);
    *(_QWORD *)v41 = v42;
    bzero(v42, *(int *)(v41 + 8));
    *(_QWORD *)(v11 + 224) = v41;
    v43 = operator new();
    *(_DWORD *)(v43 + 8) = 2;
    v44 = gmalloc(2uLL);
    *(_QWORD *)v43 = v44;
    bzero(v44, *(int *)(v43 + 8));
    *(_QWORD *)(v11 + 232) = v43;
    v45 = (_QWORD *)operator new();
    *v45 = 0;
    v45[1] = 0;
    *(_QWORD *)(v11 + 240) = v45;
    v46 = operator new();
    *(_QWORD *)v46 = 0;
    *(_QWORD *)(v46 + 8) = 0;
    *(_DWORD *)(v46 + 16) = 0;
    *(_QWORD *)(v11 + 248) = v46;
    *(_QWORD *)(v11 + 24) = v9;
    if (v9)
      ++*(_DWORD *)(v9 + 8);
    *(_QWORD *)(v11 + 96) = 0;
    *(_OWORD *)(v11 + 64) = 0u;
    *(_OWORD *)(v11 + 80) = 0u;
    a1[2] = v11;
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    if (v9)
    {
      v47 = *(_DWORD *)(v9 + 8) - 1;
      *(_DWORD *)(v9 + 8) = v47;
      if (!v47)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
    v5 = a1[2];
  }
  if (v5)
    v48 = a3 == 0;
  else
    v48 = 1;
  if (v48)
    return 0;
  v49 = 0;
  while (1)
  {
    v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
    if (v50 == -1)
      break;
    a2[v49++] = v50;
    if (a3 == v49)
      return a3;
  }
  return v49;
}

void sub_184AD3AAC(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x184AD3A5CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t rewind(_QWORD *a1)
{
  uint64_t result;

  result = a1[2];
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

void CGBufferStorage::FreeStorage(CGBufferStorage *this, void *a2, void *a3)
{
  free(a2);
}

uint64_t CGBufferStorage::UnMapStorage(uint64_t this, void *a2, void *a3)
{
  if (this)
    return munmap(*(void **)(this + 48), *(_QWORD *)(this + 56));
  return this;
}

char *CGBufferStorage::Create(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *result;
  char *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  char v28;
  void *memptr;

  v4 = 1 << a2;
  if ((unint64_t)(1 << a2) <= 8)
    v5 = 8;
  else
    v5 = 1 << a2;
  if ((a2 & 0x600) != 0)
    v6 = v4;
  else
    v6 = v5;
  memptr = 0;
  if ((a2 & 0x600) != 0)
  {
    v7 = (a2 << 53 >> 63) & (2 * *MEMORY[0x1E0C85AD8]);
    v8 = (((a1 + 127) & 0xFFFFFFFFFFFFFFE0) + *MEMORY[0x1E0C85AD8] - 1) & -*MEMORY[0x1E0C85AD8];
    v9 = v8 + v7;
    v10 = (char *)mmap(0, v8 + v7, 3, 4097, 905969664, 0);
    memptr = v10;
    if (v10 == (char *)-1)
      return 0;
    v18 = (unint64_t)(a2 & 0x200) >> 9;
    v19 = &v10[v7 >> 1];
    if ((a2 & 0x200) != 0)
      result = &v10[v9 - (v7 >> 1) - 96];
    else
      result = &v10[v7 >> 1];
    if ((a2 & 0x200) != 0)
      v21 = v19;
    else
      v21 = v19 + 96;
    v22 = v8 - 96;
    v23 = CGBufferStorage::UnMapStorage;
  }
  else
  {
    v24 = (v5 + 95) & -(uint64_t)v5;
    v25 = a1 + v5 + v24 - 1;
    v9 = v25 & -(uint64_t)v5;
    if (v5 == 16)
    {
      result = (char *)malloc_type_malloc(v25 & 0xFFFFFFFFFFFFFFF0, 0x797A1631uLL);
      memptr = result;
      if (!result)
        return result;
    }
    else
    {
      malloc_type_posix_memalign(&memptr, v5, v25 & -(uint64_t)v5, 0x3847BF77uLL);
      result = (char *)memptr;
      if (!memptr)
        return result;
    }
    LOBYTE(v18) = 0;
    v21 = &result[v24];
    v22 = v9 - v24;
    v23 = CGBufferStorage::FreeStorage;
  }
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 8) = 0u;
  atomic_store(1uLL, (unint64_t *)result);
  *((_QWORD *)result + 6) = memptr;
  *((_QWORD *)result + 7) = v9;
  *((_QWORD *)result + 1) = v6;
  *((_QWORD *)result + 2) = v21;
  *((_QWORD *)result + 3) = v22;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = v23;
  result[88] = v18 & 1;
  if (v22 < a1
    || (v18 & 1) == 0
    && (v27 = ((unint64_t)&v21[v22 - a1] & -(uint64_t)v6) >= (unint64_t)v21,
        v21 = (char *)((unint64_t)&v21[v22 - a1] & -(uint64_t)v6),
        !v27))
  {
    do
      v26 = __ldaxr((unint64_t *)result);
    while (__stlxr(v26 - 1, (unint64_t *)result));
    if (v26 <= 0)
      _CGHandleAssert("Release", 250, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/CGBlit/CGBuf.h", "oldVal >= 1", "CGBuf released with zero refcount", v15, v16, v17, v28);
    if (v26 == 1)
      CGBufferStorage::~CGBufferStorage((CGBufferStorage *)result, v11, v12, v13, v14, v15, v16, v17);
    return 0;
  }
  *((_QWORD *)result + 4) = v21;
  *((_QWORD *)result + 5) = a1;
  return result;
}

void CGBufferStorage::~CGBufferStorage(CGBufferStorage *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v10)(_QWORD, _QWORD);
  void (*v11)(CGBufferStorage *, _QWORD);
  char v12;

  if (atomic_load((unint64_t *)this))
    _CGHandleAssert("~CGBufferStorage", 206, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/CGBlit/CGBuf.h", "0 == atomic_load_explicit(&refCount, std::memory_order_acquire)", "CGBufferStorage destructed with non-zero reference count", a6, a7, a8, v12);
  v10 = (void (*)(_QWORD, _QWORD))*((_QWORD *)this + 9);
  if (v10)
    v10(*((_QWORD *)this + 10), *((_QWORD *)this + 2));
  v11 = (void (*)(CGBufferStorage *, _QWORD))*((_QWORD *)this + 8);
  if (v11)
    v11(this, *((_QWORD *)this + 6));
}

char *CGBufferStorage::CreateWithBuffer(uint64_t this, void *a2, uint64_t a3, void (*a4)(void *, void *), void *a5)
{
  char *result;

  result = CGBufferStorage::Create(0, 5);
  if (result)
  {
    *((_QWORD *)result + 1) = -this & this;
    *((_QWORD *)result + 2) = this;
    *((_QWORD *)result + 4) = this;
    *((_QWORD *)result + 5) = a2;
    *((_QWORD *)result + 3) = a2;
    *((_QWORD *)result + 9) = a3;
    *((_QWORD *)result + 10) = a4;
  }
  return result;
}

void CGBufferStorage::ReleaseImageBlockSet(uint64_t this, void *a2, void *a3)
{
  if (this)
    CGImageBlockSetRelease(this);
}

char *CGBufferStorage::CreateWithImageBlockSet(char *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  if (result)
  {
    v2 = (uint64_t)result;
    if (*((_QWORD *)result + 15) > a2)
    {
      v3 = *(uint64_t **)&result[8 * a2 + 128];
      if (v3)
      {
        v4 = (unint64_t)*((double *)result + 6);
        v5 = (unint64_t)*((double *)result + 7);
        if (v4 && v5 != 0)
        {
          v7 = v3[5];
          v8 = *((_QWORD *)result + 9);
          do
            v9 = __ldxr((unsigned int *)result);
          while (__stxr(v9 + 1, (unsigned int *)result));
          v10 = *v3;
          result = CGBufferStorage::Create(0, 5);
          if (result)
          {
            v11 = v8 * v4 + (v5 - 1) * v7;
            *((_QWORD *)result + 1) = -v10 & v10;
            *((_QWORD *)result + 2) = v10;
            *((_QWORD *)result + 4) = v10;
            *((_QWORD *)result + 5) = v11;
            *((_QWORD *)result + 3) = v11;
            *((_QWORD *)result + 9) = CGBufferStorage::ReleaseImageBlockSet;
            *((_QWORD *)result + 10) = v2;
            return result;
          }
          CGImageBlockSetRelease(v2);
        }
      }
    }
    return 0;
  }
  return result;
}

void CGBufferStorage::ReleaseCFData(CFTypeRef this, void *a2, void *a3)
{
  if (this)
    CFRelease(this);
}

char *CGBufferStorage::CreateWithCFData(CGBufferStorage *this, const __CFData *a2)
{
  uint64_t BytePtr;
  CFIndex Length;
  char *v5;
  char *v6;

  if (!this)
    return 0;
  BytePtr = (uint64_t)CFDataGetBytePtr(this);
  Length = CFDataGetLength(this);
  v5 = CGBufferStorage::Create(0, 5);
  v6 = v5;
  if (v5)
  {
    *((_QWORD *)v5 + 1) = -BytePtr & BytePtr;
    *((_QWORD *)v5 + 2) = BytePtr;
    *((_QWORD *)v5 + 4) = BytePtr;
    *((_QWORD *)v5 + 5) = Length;
    *((_QWORD *)v5 + 3) = Length;
    *((_QWORD *)v5 + 9) = CGBufferStorage::ReleaseCFData;
    *((_QWORD *)v5 + 10) = this;
    CFRetain(this);
  }
  return v6;
}

uint64_t CGBufferStorage::Resize(CGBufferStorage *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;

  v2 = *((_QWORD *)this + 3);
  v3 = v2 - a2;
  if (v2 < a2)
    return 0;
  v5 = *((_QWORD *)this + 2);
  if (!*((_BYTE *)this + 88))
  {
    v6 = (v3 + v5) & -*((_QWORD *)this + 1);
    v7 = v5 > v6;
    v5 = v6;
    if (v7)
      return 0;
  }
  *((_QWORD *)this + 4) = v5;
  *((_QWORD *)this + 5) = a2;
  return 1;
}

void CGBufferStorage::DataProviderReleaseInfoCallback(CGBufferStorage *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char vars0;

  if (this)
  {
    do
      v8 = __ldaxr((unint64_t *)this);
    while (__stlxr(v8 - 1, (unint64_t *)this));
    if (v8 <= 0)
      _CGHandleAssert("Release", 250, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/CGBlit/CGBuf.h", "oldVal >= 1", "CGBuf released with zero refcount", a6, a7, a8, vars0);
    if (v8 == 1)
      CGBufferStorage::~CGBufferStorage(this, a2, a3, a4, a5, a6, a7, a8);
  }
}

void CGBufferStorage::BitmapContextReleaseDataCallback(CGBufferStorage *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char vars0;

  if (this)
  {
    do
      v8 = __ldaxr((unint64_t *)this);
    while (__stlxr(v8 - 1, (unint64_t *)this));
    if (v8 <= 0)
      _CGHandleAssert("Release", 250, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/CGBlit/CGBuf.h", "oldVal >= 1", "CGBuf released with zero refcount", a6, a7, a8, vars0);
    if (v8 == 1)
      CGBufferStorage::~CGBufferStorage(this, a2, a3, a4, a5, a6, a7, a8);
  }
}

void CGBuf::CGBuf(CGBuf *this, CGContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  CGColorSpace *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;

  *((_QWORD *)this + 40) = 0;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  if (!a2)
    return;
  if (*((_DWORD *)a2 + 4) == 1129601108 && *((_DWORD *)a2 + 6) == 4)
  {
    v10 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8);
  }
  else
  {
    handle_invalid_context((char)"CGBitmapContextGetWidth", (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v10 = 0;
    if (*((_DWORD *)a2 + 4) != 1129601108)
      goto LABEL_8;
  }
  if (*((_DWORD *)a2 + 6) == 4)
  {
    v11 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 16);
    goto LABEL_9;
  }
LABEL_8:
  handle_invalid_context((char)"CGBitmapContextGetHeight", (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v11 = 0;
  if (*((_DWORD *)a2 + 4) != 1129601108)
    goto LABEL_11;
LABEL_9:
  if (*((_DWORD *)a2 + 6) != 4)
  {
LABEL_11:
    handle_invalid_context((char)"CGBitmapContextGetBitmapInfo", (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v12 = 0;
    if (*((_DWORD *)a2 + 4) != 1129601108)
      goto LABEL_14;
    goto LABEL_12;
  }
  v12 = *(_DWORD *)(*((_QWORD *)a2 + 4) + 40);
LABEL_12:
  if (*((_DWORD *)a2 + 6) == 4)
  {
    v13 = *(_DWORD *)(*((_QWORD *)a2 + 4) + 72);
    goto LABEL_15;
  }
LABEL_14:
  handle_invalid_context((char)"CGBitmapContextGetBitsPerPixel", (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v13 = 0;
  if (*((_DWORD *)a2 + 4) != 1129601108)
    goto LABEL_17;
LABEL_15:
  if (*((_DWORD *)a2 + 6) != 4)
  {
LABEL_17:
    handle_invalid_context((char)"CGBitmapContextGetBitsPerComponent", (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v14 = 0;
    if (*((_DWORD *)a2 + 4) != 1129601108)
      goto LABEL_20;
    goto LABEL_18;
  }
  v14 = *(_DWORD *)(*((_QWORD *)a2 + 4) + 80);
LABEL_18:
  if (*((_DWORD *)a2 + 6) == 4)
  {
    v15 = *(CGColorSpace **)(*((_QWORD *)a2 + 4) + 32);
    goto LABEL_21;
  }
LABEL_20:
  handle_invalid_context((char)"CGBitmapContextGetColorSpace", (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v15 = 0;
LABEL_21:
  CGBuf::Init((int8x8_t *)this, v10, v11, v12, v13, v14, v15, 0, 0, 4);
  if (*((_DWORD *)a2 + 4) == 1129601108 && *((_DWORD *)a2 + 6) == 4)
  {
    v22 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 64);
  }
  else
  {
    handle_invalid_context((char)"CGBitmapContextGetData", (uint64_t)a2, v16, v17, v18, v19, v20, v21);
    v22 = 0;
  }
  v24 = *((_QWORD *)this + 4);
  v23 = *((_QWORD *)this + 5);
  v25 = *((_QWORD *)this + 3);
  v26 = *((unsigned __int8 *)this + 324);
  v27 = CGBufferStorage::Create(0, 5);
  if (v27)
  {
    v28 = (v24 - 1) * v23 + ((unint64_t)(v25 * v26 + 7) >> 3);
    *((_QWORD *)v27 + 1) = -v22 & v22;
    *((_QWORD *)v27 + 2) = v22;
    *((_QWORD *)v27 + 4) = v22;
    *((_QWORD *)v27 + 5) = v28;
    *((_QWORD *)v27 + 3) = v28;
    *((_QWORD *)v27 + 9) = ReleaseCGContext;
    *((_QWORD *)v27 + 10) = a2;
  }
  *(_QWORD *)this = v27;
  CFRetain(a2);
  *((_QWORD *)this + 2) = a2;
}

{
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  CGColorSpace *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;

  *((_QWORD *)this + 40) = 0;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  if (!a2)
    return;
  if (*((_DWORD *)a2 + 4) == 1129601108 && *((_DWORD *)a2 + 6) == 4)
  {
    v10 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8);
  }
  else
  {
    handle_invalid_context((char)"CGBitmapContextGetWidth", (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v10 = 0;
    if (*((_DWORD *)a2 + 4) != 1129601108)
      goto LABEL_8;
  }
  if (*((_DWORD *)a2 + 6) == 4)
  {
    v11 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 16);
    goto LABEL_9;
  }
LABEL_8:
  handle_invalid_context((char)"CGBitmapContextGetHeight", (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v11 = 0;
  if (*((_DWORD *)a2 + 4) != 1129601108)
    goto LABEL_11;
LABEL_9:
  if (*((_DWORD *)a2 + 6) != 4)
  {
LABEL_11:
    handle_invalid_context((char)"CGBitmapContextGetBitmapInfo", (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v12 = 0;
    if (*((_DWORD *)a2 + 4) != 1129601108)
      goto LABEL_14;
    goto LABEL_12;
  }
  v12 = *(_DWORD *)(*((_QWORD *)a2 + 4) + 40);
LABEL_12:
  if (*((_DWORD *)a2 + 6) == 4)
  {
    v13 = *(_DWORD *)(*((_QWORD *)a2 + 4) + 72);
    goto LABEL_15;
  }
LABEL_14:
  handle_invalid_context((char)"CGBitmapContextGetBitsPerPixel", (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v13 = 0;
  if (*((_DWORD *)a2 + 4) != 1129601108)
    goto LABEL_17;
LABEL_15:
  if (*((_DWORD *)a2 + 6) != 4)
  {
LABEL_17:
    handle_invalid_context((char)"CGBitmapContextGetBitsPerComponent", (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v14 = 0;
    if (*((_DWORD *)a2 + 4) != 1129601108)
      goto LABEL_20;
    goto LABEL_18;
  }
  v14 = *(_DWORD *)(*((_QWORD *)a2 + 4) + 80);
LABEL_18:
  if (*((_DWORD *)a2 + 6) == 4)
  {
    v15 = *(CGColorSpace **)(*((_QWORD *)a2 + 4) + 32);
    goto LABEL_21;
  }
LABEL_20:
  handle_invalid_context((char)"CGBitmapContextGetColorSpace", (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v15 = 0;
LABEL_21:
  CGBuf::Init((int8x8_t *)this, v10, v11, v12, v13, v14, v15, 0, 0, 4);
  if (*((_DWORD *)a2 + 4) == 1129601108 && *((_DWORD *)a2 + 6) == 4)
  {
    v22 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 64);
  }
  else
  {
    handle_invalid_context((char)"CGBitmapContextGetData", (uint64_t)a2, v16, v17, v18, v19, v20, v21);
    v22 = 0;
  }
  v24 = *((_QWORD *)this + 4);
  v23 = *((_QWORD *)this + 5);
  v25 = *((_QWORD *)this + 3);
  v26 = *((unsigned __int8 *)this + 324);
  v27 = CGBufferStorage::Create(0, 5);
  if (v27)
  {
    v28 = (v24 - 1) * v23 + ((unint64_t)(v25 * v26 + 7) >> 3);
    *((_QWORD *)v27 + 1) = -v22 & v22;
    *((_QWORD *)v27 + 2) = v22;
    *((_QWORD *)v27 + 4) = v22;
    *((_QWORD *)v27 + 5) = v28;
    *((_QWORD *)v27 + 3) = v28;
    *((_QWORD *)v27 + 9) = ReleaseCGContext;
    *((_QWORD *)v27 + 10) = a2;
  }
  *(_QWORD *)this = v27;
  CFRetain(a2);
  *((_QWORD *)this + 2) = a2;
}

void sub_184AD43A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CGBuf *v8;

  CGBuf::~CGBuf(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void CGBuf::Init(int8x8_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6, CGColorSpace *cf, const void *a8, __int8 a9, uint64_t a10)
{
  CGColorSpace *v11;
  uint64_t v15;
  int8x8_t *v16;
  int v17;
  int v18;
  _BOOL4 v19;
  CGColorSpaceRef DeviceCMYK;
  __int32 v23;
  uint64_t v24;
  int v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int8x8_t v30;
  uint8x8_t v31;
  CGColorSpace *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;

  v11 = cf;
  v34 = a5;
  v35 = a4;
  v33 = a6;
  v32 = cf;
  if ((a10 & 0x800) != 0)
  {
    LegalizeForContext(&v35, &v34, &v33, &v32);
    a5 = v34;
    a4 = v35;
    a6 = v33;
    v11 = v32;
  }
  a1[3] = (int8x8_t)a2;
  a1[4] = (int8x8_t)a3;
  a1[40].i32[0] = a4;
  a1[40].i8[4] = a5;
  a1[40].i8[5] = a6;
  a1[40].i8[7] = a9;
  if (!v11)
  {
    v17 = a5 / a6;
    v18 = a5 % a6;
    a1[40].i8[6] = a5 / a6;
    v19 = (a4 & 0xF0000) != 0x20000 && (a5 != 16 || a6 != 5 || (a4 & 0x1F) != 0);
    if (v18 == 1)
      v18 = v19;
    if ((a4 & 0x1F) != 0 && !v18)
    {
      LOBYTE(v17) = v17 - 1;
      a1[40].i8[6] = v17;
    }
    switch(v17)
    {
      case 4u:
        DeviceCMYK = CGColorSpaceCreateDeviceCMYK();
        break;
      case 3u:
        DeviceCMYK = CGColorSpaceCreateDeviceRGB();
        break;
      case 1u:
        DeviceCMYK = CGColorSpaceCreateDeviceGray();
        break;
      default:
        DeviceCMYK = 0;
        break;
    }
    a1[6] = (int8x8_t)DeviceCMYK;
    if (a8)
      goto LABEL_5;
LABEL_32:
    a1[7] = 0;
    memset_pattern16(&a1[8], &xmmword_185000460, 0x100uLL);
    v16 = 0;
    goto LABEL_33;
  }
  CFRetain(v11);
  a1[6] = (int8x8_t)v11;
  a1[40].i8[6] = *(_QWORD *)(*((_QWORD *)v11 + 3) + 40);
  if (!a8)
    goto LABEL_32;
LABEL_5:
  v15 = a1[40].u8[6];
  if ((a1[40].i32[0] & 0x1Fu) - 1 < 4)
    ++v15;
  v16 = a1 + 8;
  a1[7] = (int8x8_t)&a1[8];
  memcpy(&a1[8], a8, 16 * v15);
LABEL_33:
  v23 = a1[40].i32[0];
  v24 = a1[40].u8[4];
  if ((v23 & 0xF0000) != 0)
    goto LABEL_46;
  v25 = a1[40].u8[5];
  if (v25 == 10)
  {
    if ((_DWORD)v24 == 32)
    {
      if (v16
        && !memcmp(v16, &InferPixelFormat(unsigned long,unsigned long,unsigned int,double const*)::kCIF10decode, 0x40uLL))
      {
        v26 = 0x40000;
      }
      else
      {
        v26 = 196608;
      }
      goto LABEL_45;
    }
  }
  else if (v25 == 5 && (_DWORD)v24 == 16)
  {
    if ((v23 & 0x1F) != 0)
      v26 = ((a1[40].i32[0] & 0x1F) != 7) << 16;
    else
      v26 = 0x20000;
    goto LABEL_45;
  }
  v26 = 0;
LABEL_45:
  a1[40].i32[0] = v26 | v23;
LABEL_46:
  v27 = *(_QWORD *)&a1[3] * v24 + 7;
  v28 = 8;
  if ((unint64_t)(1 << a10) > 8)
    v28 = 1 << a10;
  if ((a10 & 0x600) != 0)
    v29 = 1 << a10;
  else
    v29 = v28;
  a1[5] = (int8x8_t)((v29 + (v27 >> 3) - 1) & -(uint64_t)v29);
  if (GetCachelineSize(void)::onceToken != -1)
    dispatch_once(&GetCachelineSize(void)::onceToken, &__block_literal_global_559);
  if (GetCachelineSize(void)::cachelineSize > v29)
    v29 = GetCachelineSize(void)::cachelineSize;
  v30 = a1[5];
  if (*MEMORY[0x1E0C85AD8] < (unint64_t)(8 * *(_QWORD *)&v30) && v29 << 6 <= *MEMORY[0x1E0C85AD8])
  {
    v31 = (uint8x8_t)vcnt_s8(v30);
    v31.i16[0] = vaddlv_u8(v31);
    if (v31.u32[0] <= 1uLL)
    {
      do
        *(_QWORD *)&v30 += v29;
      while ((*(_QWORD *)&v30 & (*(_QWORD *)&v30 - 1)) == 0);
      a1[5] = v30;
    }
  }
}

void CGBuf::~CGBuf(CGBuf *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CGColorSpace *v9;
  unint64_t *v10;
  uint64_t v11;
  const void *v12;
  const void *v13;
  char v14;

  v9 = (CGColorSpace *)*((_QWORD *)this + 6);
  if (v9)
    CGColorSpaceRelease(v9);
  *((_QWORD *)this + 6) = 0;
  v10 = *(unint64_t **)this;
  if (*(_QWORD *)this)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (v11 <= 0)
      _CGHandleAssert("Release", 250, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/CGBlit/CGBuf.h", "oldVal >= 1", "CGBuf released with zero refcount", a6, a7, a8, v14);
    if (v11 == 1)
      CGBufferStorage::~CGBufferStorage((CGBufferStorage *)v10, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = 0;
  v12 = (const void *)*((_QWORD *)this + 1);
  if (v12)
    CFRelease(v12);
  *((_QWORD *)this + 1) = 0;
  v13 = (const void *)*((_QWORD *)this + 2);
  if (v13)
    CFRelease(v13);
  *((_QWORD *)this + 2) = 0;
}

void ReleaseCGContext(CFTypeRef cf, void *a2)
{
  if (cf)
    CFRelease(cf);
}

CGColorSpaceRef LegalizeForContext(unsigned int *a1, unsigned int *a2, unsigned int *a3, CGColorSpace **a4)
{
  unsigned int v5;
  unsigned int v6;
  int v7;
  _BOOL4 v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  BOOL v18;
  unsigned int v19;
  unsigned int v20;
  CGColorSpaceRef result;

  v5 = *a3;
  v6 = *a2 / *a3;
  v7 = 1 << *a1;
  v8 = (v7 & 0xFE) != 0;
  if (*a2 == v6 * *a3)
    LOBYTE(v9) = *a2 / *a3 - 1;
  else
    v9 = *a2 / *a3;
  if ((v7 & 0xFE) == 0)
    LOBYTE(v9) = v6;
  if (v5 < 9 || (*a1 & 0x1F) == 7)
  {
    *a3 = 8;
    v13 = *a1 & 0xFFFF8EFF;
  }
  else
  {
    if (v5 > 0xB)
    {
      if (v5 > 0x10)
      {
        *a3 = 32;
        v10 = *a1 & 0xFFFF8EE0;
        v11 = (*a1 & 0x1F) - (((1 << *a1) & 0x54) != 0);
        v12 = 8448;
        goto LABEL_15;
      }
    }
    else if ((*a1 & 0x100) == 0)
    {
      *a3 = 16;
      v10 = *a1 & 0xFFFF8EE0;
      v11 = (*a1 & 0x1F) - (((1 << *a1) & 0x54) != 0);
      v12 = 4352;
LABEL_15:
      v13 = v10 | v12 | v11;
      goto LABEL_16;
    }
    *a3 = 16;
    v13 = *a1 & 0xFFFF8FE0 | ((*a1 & 0x1F) - (((1 << *a1) & 0x54) != 0)) | 0x1000;
  }
LABEL_16:
  *a1 = v13;
  v14 = v9;
  if ((v9 & 0xFC) != 0)
    v9 = 4;
  else
    v9 = v9;
  if (v14 == 2)
    v15 = 3;
  else
    v15 = v9;
  switch(v15)
  {
    case 0:
      v15 = 0;
      *a1 = v13 & 0xFFFFFFE0 | 7;
      *a3 = 8;
      v20 = *a1 & 0xFFFF8EFF;
      v8 = 1;
      goto LABEL_32;
    case 1:
      v8 = 0;
      v20 = v13 & 0xFFFFFFE0;
      v15 = 1;
      goto LABEL_32;
    case 2:
    case 3:
      v16 = v7 & 0x61;
      v17 = (0x76521210u >> (4 * (v13 & 0x1F))) & 7;
      v18 = v16 == 0;
      if (v16)
        v19 = 5;
      else
        v19 = v13 & 0xFFFFFFE0;
      if (!v18)
        v17 = v13 & 0xFFFFFFE0;
      v20 = v17 | v19;
      v8 = 1;
      v15 = 3;
      goto LABEL_32;
    case 4:
      v8 = 0;
      v20 = v13 & 0xFFFFFFE0;
      v15 = 4;
LABEL_32:
      *a1 = v20;
      break;
    default:
      break;
  }
  *a2 = (v8 + v15) * *a3;
  result = *a4;
  if (*a4)
  {
    if (*(_QWORD *)(*((_QWORD *)result + 3) + 40) == v15)
      return result;
    CGColorSpaceRelease(result);
    *a4 = 0;
  }
  switch(v15)
  {
    case 4:
      result = CGColorSpaceCreateDeviceCMYK();
      break;
    case 3:
      result = CGColorSpaceCreateDeviceRGB();
      break;
    case 1:
      result = CGColorSpaceCreateDeviceGray();
      break;
    default:
      result = 0;
      break;
  }
  *a4 = result;
  return result;
}

uint64_t ___ZL16GetCachelineSizev_block_invoke()
{
  uint64_t result;
  uint64_t v1;
  size_t v2;
  uint64_t v3;

  v2 = 8;
  v3 = 0;
  result = sysctlbyname("hw.cachelinesize", &v3, &v2, 0, 0);
  if (v2 == 4)
    v1 = v3;
  else
    v1 = v3;
  if ((_DWORD)result)
    v1 = 32;
  GetCachelineSize(void)::cachelineSize = v1;
  return result;
}

void sub_184AD4CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CGBuf *v8;

  CGBuf::~CGBuf(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

uint64_t _FillBuffer<half>(uint64_t result, unint64_t a2, unsigned int *a3, double a4, double a5, float _S2)
{
  unint64_t v7;
  _WORD *v8;
  unint64_t i;
  int *v10;
  int v11;

  v7 = a2;
  v8 = (_WORD *)result;
  i = a2;
  v10 = (int *)result;
  if (a2 >= 4)
  {
    v10 = (int *)result;
    for (i = a2; i > 3; i -= 4)
    {
      v11 = rand_r(a3);
      result = rand_r(a3);
      *v10++ = v11 ^ ((_DWORD)result << 16);
    }
  }
  for (; i; --i)
  {
    result = rand_r(a3);
    *(_BYTE *)v10 = result;
    v10 = (int *)((char *)v10 + 1);
  }
  if (v7 >= 2)
  {
    do
    {
      LOWORD(_S2) = *v8;
      _S2 = (float)((float)LODWORD(_S2) * 0.000030518) + -0.25;
      __asm { FCVT            H2, S2 }
      *v8++ = LOWORD(_S2);
      v7 -= 2;
    }
    while (v7 > 1);
  }
  return result;
}

float *_FillBuffer<float>(float *result, unint64_t a2, unsigned int *a3)
{
  unint64_t v4;
  float *v5;
  unint64_t i;
  int *v7;
  int v8;

  v4 = a2;
  v5 = result;
  i = a2;
  v7 = (int *)result;
  if (a2 >= 4)
  {
    v7 = (int *)result;
    for (i = a2; i > 3; i -= 4)
    {
      v8 = rand_r(a3);
      result = (float *)rand_r(a3);
      *v7++ = v8 ^ ((_DWORD)result << 16);
    }
  }
  for (; i; --i)
  {
    result = (float *)rand_r(a3);
    *(_BYTE *)v7 = (_BYTE)result;
    v7 = (int *)((char *)v7 + 1);
  }
  if (v4 >= 4)
  {
    do
    {
      *v5 = (float)((float)*(unsigned int *)v5 * 3.4925e-10) + -0.25;
      ++v5;
      v4 -= 4;
    }
    while (v4 > 3);
  }
  return result;
}

uint64_t CGBuf::FillBuffer(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int *(*v4)(int *, unint64_t, unsigned int *);
  int *(*v5)(int *, unint64_t, unsigned int *);
  BOOL v6;
  int *(*v7)(int *, unint64_t, unsigned int *);
  int *(*v8)(int *, unint64_t, unsigned int *);
  unsigned int v10;

  v2 = *(unsigned __int8 *)(a1 + 325);
  if (v2 == 32)
  {
    v3 = *(_DWORD *)(a1 + 320);
    v4 = (int *(*)(int *, unint64_t, unsigned int *))_SwapBuffer<float>;
    v5 = (int *(*)(int *, unint64_t, unsigned int *))_FillBuffer<float>;
    v6 = (v3 & 0x7000) == 0x2000;
  }
  else
  {
    if (v2 != 16)
    {
      v8 = _FillBuffer<unsigned char>;
      goto LABEL_12;
    }
    v3 = *(_DWORD *)(a1 + 320);
    v4 = (int *(*)(int *, unint64_t, unsigned int *))_SwapBuffer<half>;
    v5 = (int *(*)(int *, unint64_t, unsigned int *))_FillBuffer<half>;
    v6 = (v3 & 0x7000) == 4096;
  }
  if (v6)
    v7 = v5;
  else
    v7 = v4;
  if ((v3 & 0x100) != 0)
    v8 = v7;
  else
    v8 = _FillBuffer<unsigned char>;
LABEL_12:
  v10 = (HIDWORD(a2) & 0xFF000000 | v2)
      + *(_DWORD *)(a1 + 24) * *(_DWORD *)(a1 + 32)
      + *(unsigned __int8 *)(a1 + 324)
      + *(unsigned __int8 *)(a1 + 326)
      + *(unsigned __int8 *)(a1 + 327);
  return (uint64_t)v8(*(int **)(*(_QWORD *)a1 + 32), *(_QWORD *)(*(_QWORD *)a1 + 40), &v10);
}

int *_FillBuffer<unsigned char>(int *result, unint64_t a2, unsigned int *a3)
{
  unint64_t v4;
  int *v5;
  int v6;

  v4 = a2;
  v5 = result;
  if (a2 >= 4)
  {
    do
    {
      v6 = rand_r(a3);
      result = (int *)rand_r(a3);
      *v5++ = v6 ^ ((_DWORD)result << 16);
      v4 -= 4;
    }
    while (v4 > 3);
  }
  for (; v4; --v4)
  {
    result = (int *)rand_r(a3);
    *(_BYTE *)v5 = (_BYTE)result;
    v5 = (int *)((char *)v5 + 1);
  }
  return result;
}

void *_SwapBuffer<half>(uint64_t a1, unint64_t a2, unsigned int *a3, double a4, double a5, float a6)
{
  size_t v6;
  int8x16_t *v7;
  void *result;
  int8x16_t v9;

  v6 = a2;
  v7 = (int8x16_t *)a1;
  result = (void *)_FillBuffer<half>(a1, a2, a3, a4, a5, a6);
  if (v6 >= 0x10)
  {
    do
    {
      *v7 = vqtbl1q_s8(*v7, (int8x16_t)xmmword_1850049C0);
      ++v7;
      v6 -= 16;
    }
    while (v6 > 0xF);
  }
  if (v6)
  {
    v9 = 0u;
    memcpy(&v9, v7, v6);
    v9 = vqtbl1q_s8(v9, (int8x16_t)xmmword_1850049C0);
    return memcpy(v7, &v9, v6);
  }
  return result;
}

float *_SwapBuffer<float>(float *a1, unint64_t a2, unsigned int *a3)
{
  size_t v3;
  int8x16_t *v4;
  float *result;
  int8x16_t v6;

  v3 = a2;
  v4 = (int8x16_t *)a1;
  result = _FillBuffer<float>(a1, a2, a3);
  if (v3 >= 0x10)
  {
    do
    {
      *v4 = vqtbl1q_s8(*v4, (int8x16_t)xmmword_1850049D0);
      ++v4;
      v3 -= 16;
    }
    while (v3 > 0xF);
  }
  if (v3)
  {
    v6 = 0u;
    memcpy(&v6, v4, v3);
    v6 = vqtbl1q_s8(v6, (int8x16_t)xmmword_1850049D0);
    return (float *)memcpy(v4, &v6, v3);
  }
  return result;
}

char *CGBuf::CreateBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  char *result;

  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 24) * *(unsigned __int8 *)(a1 + 324) + 7;
  if (v8 >= v9 >> 3)
  {
    result = CGBufferStorage::Create((v9 >> 3) + a3 + (*(_QWORD *)(a1 + 32) - 1) * v8, a2);
    *(_QWORD *)a1 = result;
    if (result)
    {
      if ((a2 & 0x100) != 0)
        CGBuf::FillBuffer(a1, a2);
      return (char *)1;
    }
  }
  else
  {
    CGPostError((uint64_t)"%s: rowBytes is too small", a2, a3, a4, a5, a6, a7, a8, (char)"CreateBuffer");
    return 0;
  }
  return result;
}

char *CGBuf::CreateBufferWithData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  char *result;
  uint64_t v16;
  uint64_t v17;

  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 24) * *(unsigned __int8 *)(a1 + 324) + 7;
  if (v8 >= v9 >> 3)
  {
    v16 = *(_QWORD *)(a1 + 32);
    result = CGBufferStorage::Create(0, 5);
    if (result)
    {
      *((_QWORD *)result + 1) = -a2 & a2;
      *((_QWORD *)result + 2) = a2;
      v17 = (v9 >> 3) + (v16 - 1) * v8;
      *((_QWORD *)result + 4) = a2;
      *((_QWORD *)result + 5) = v17;
      *((_QWORD *)result + 3) = v17;
      *((_QWORD *)result + 9) = a3;
      *((_QWORD *)result + 10) = a4;
      *(_QWORD *)a1 = result;
      if ((a5 & 0x100) != 0)
        CGBuf::FillBuffer(a1, a5);
      return (char *)1;
    }
    else
    {
      *(_QWORD *)a1 = 0;
    }
  }
  else
  {
    CGPostError((uint64_t)"%s: rowBytes is too small", a2, a3, a4, a5, a6, a7, a8, (char)"CreateBufferWithData");
    return 0;
  }
  return result;
}

uint64_t CGBuf::CGBuf(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6, CGColorSpace *a7, const void *a8, __int8 a9, uint64_t a10)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD v31[20];
  uint64_t v32;

  *(_QWORD *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  CGBuf::Init((int8x8_t *)a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  if ((CGBuf::CreateBuffer(a1, a10, 0, v11, v12, v13, v14, v15) & 1) == 0)
  {
    CGBuf::~CGBuf((CGBuf *)a1, v16, v17, v18, v19, v20, v21, v22);
    v32 = 0;
    memset(v31, 0, sizeof(v31));
    *(_QWORD *)(a1 + 320) = 0;
    *(_OWORD *)(a1 + 288) = 0u;
    *(_OWORD *)(a1 + 304) = 0u;
    *(_OWORD *)(a1 + 256) = 0u;
    *(_OWORD *)(a1 + 272) = 0u;
    *(_OWORD *)(a1 + 224) = 0u;
    *(_OWORD *)(a1 + 240) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(_OWORD *)(a1 + 208) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    CGBuf::~CGBuf((CGBuf *)v31, v23, v24, v25, v26, v27, v28, v29);
  }
  return a1;
}

{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD v31[20];
  uint64_t v32;

  *(_QWORD *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  CGBuf::Init((int8x8_t *)a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  if ((CGBuf::CreateBuffer(a1, a10, 0, v11, v12, v13, v14, v15) & 1) == 0)
  {
    CGBuf::~CGBuf((CGBuf *)a1, v16, v17, v18, v19, v20, v21, v22);
    v32 = 0;
    memset(v31, 0, sizeof(v31));
    *(_QWORD *)(a1 + 320) = 0;
    *(_OWORD *)(a1 + 288) = 0u;
    *(_OWORD *)(a1 + 304) = 0u;
    *(_OWORD *)(a1 + 256) = 0u;
    *(_OWORD *)(a1 + 272) = 0u;
    *(_OWORD *)(a1 + 224) = 0u;
    *(_OWORD *)(a1 + 240) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(_OWORD *)(a1 + 208) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    CGBuf::~CGBuf((CGBuf *)v31, v23, v24, v25, v26, v27, v28, v29);
  }
  return a1;
}

void sub_184AD5338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CGBuf *v8;

  CGBuf::~CGBuf(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void sub_184AD5440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CGBuf *v8;

  CGBuf::~CGBuf(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

uint64_t CGBuf::CGBuf(uint64_t a1, uint64_t *a2, unsigned int a3, unsigned int a4, unsigned int a5, uint64_t a6, uint64_t a7, CGColorSpace *cf, const void *a9, __int8 a10, uint64_t a11)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 BufferWithData;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD v36[20];
  uint64_t v37;

  *(_QWORD *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  CGBuf::Init((int8x8_t *)a1, a2[2], a2[2], a3, a4, a5, cf, a9, a10, a11);
  *(_QWORD *)(a1 + 40) = a2[3];
  if (*a2)
    BufferWithData = CGBuf::CreateBufferWithData(a1, *a2, a6, a7, a11, v17, v18, v19);
  else
    BufferWithData = CGBuf::CreateBuffer(a1, a11, 0, v15, v16, v17, v18, v19);
  if ((BufferWithData & 1) == 0)
  {
    CGBuf::~CGBuf((CGBuf *)a1, v21, v22, v23, v24, v25, v26, v27);
    v37 = 0;
    memset(v36, 0, sizeof(v36));
    *(_QWORD *)(a1 + 320) = 0;
    *(_OWORD *)(a1 + 288) = 0u;
    *(_OWORD *)(a1 + 304) = 0u;
    *(_OWORD *)(a1 + 256) = 0u;
    *(_OWORD *)(a1 + 272) = 0u;
    *(_OWORD *)(a1 + 224) = 0u;
    *(_OWORD *)(a1 + 240) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(_OWORD *)(a1 + 208) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    CGBuf::~CGBuf((CGBuf *)v36, v28, v29, v30, v31, v32, v33, v34);
  }
  return a1;
}

{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 BufferWithData;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD v36[20];
  uint64_t v37;

  *(_QWORD *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  CGBuf::Init((int8x8_t *)a1, a2[2], a2[2], a3, a4, a5, cf, a9, a10, a11);
  *(_QWORD *)(a1 + 40) = a2[3];
  if (*a2)
    BufferWithData = CGBuf::CreateBufferWithData(a1, *a2, a6, a7, a11, v17, v18, v19);
  else
    BufferWithData = CGBuf::CreateBuffer(a1, a11, 0, v15, v16, v17, v18, v19);
  if ((BufferWithData & 1) == 0)
  {
    CGBuf::~CGBuf((CGBuf *)a1, v21, v22, v23, v24, v25, v26, v27);
    v37 = 0;
    memset(v36, 0, sizeof(v36));
    *(_QWORD *)(a1 + 320) = 0;
    *(_OWORD *)(a1 + 288) = 0u;
    *(_OWORD *)(a1 + 304) = 0u;
    *(_OWORD *)(a1 + 256) = 0u;
    *(_OWORD *)(a1 + 272) = 0u;
    *(_OWORD *)(a1 + 224) = 0u;
    *(_OWORD *)(a1 + 240) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(_OWORD *)(a1 + 208) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    CGBuf::~CGBuf((CGBuf *)v36, v28, v29, v30, v31, v32, v33, v34);
  }
  return a1;
}

void sub_184AD55A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CGBuf *v8;

  CGBuf::~CGBuf(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void sub_184AD5708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CGBuf *v8;

  CGBuf::~CGBuf(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void CGBuf::CGBuf(CGBuf *this, unsigned int *cf)
{
  _QWORD *ImageProvider;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  uint64_t v15;
  CGColorSpace *Property;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  const CGFloat *Decode;
  __int8 RenderingIntent;
  CFDictionaryRef v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  double *v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  double v41;
  unint64_t v42;
  unint64_t v43;
  int8x8_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  size_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  CGBitmapInfo BitmapInfo;
  unsigned int v61;
  unsigned int v62;
  CGColorSpace *ColorSpace;
  const CGFloat *v64;
  __int8 v65;
  char *DataProviderInternal;
  const __CFData *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  CGBufferStorage *v74;
  CGBufferStorage *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;

  *((_QWORD *)this + 40) = 0;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  if (cf)
  {
    CFRetain(cf);
    *((_QWORD *)this + 1) = cf;
    ImageProvider = CGImageGetImageProvider(cf);
    if (ImageProvider)
    {
      v12 = (uint64_t)ImageProvider;
      {
        CGBuf::CGBuf(CGImage *)::keys = (uint64_t)CFSTR("kCGImageBlockSingletonRequest");
      }
      {
        CGBuf::CGBuf(CGImage *)::values = *MEMORY[0x1E0C9AE50];
      }
      *((_BYTE *)this + 324) = 8 * *(_BYTE *)(v12 + 48);
      *((_DWORD *)this + 80) = *(_DWORD *)(v12 + 36) & 0x1F;
      v15 = *(_QWORD *)(v12 + 120);
      if (!v15
        || (Property = (CGColorSpace *)CGPropertiesGetProperty(v15, CFSTR("kCGImageProviderColorSpaceChangedOnImageCopy"))) == 0)
      {
        Property = *(CGColorSpace **)(v12 + 40);
      }
      *((_QWORD *)this + 6) = Property;
      switch(*(_DWORD *)(v12 + 32))
      {
        case 1:
          v17 = 8;
          *((_BYTE *)this + 325) = 8;
          v18 = *((_DWORD *)this + 80);
          goto LABEL_16;
        case 2:
          v17 = 16;
          *((_BYTE *)this + 325) = 16;
          v18 = *((_DWORD *)this + 80) | 0x1000;
          goto LABEL_15;
        case 3:
          v17 = 32;
          *((_BYTE *)this + 325) = 32;
          v18 = *((_DWORD *)this + 80) | 0x2000;
          goto LABEL_15;
        case 4:
          v17 = 32;
          *((_BYTE *)this + 325) = 32;
          v19 = *((_DWORD *)this + 80);
          v20 = 8448;
          goto LABEL_14;
        case 5:
          v17 = 16;
          *((_BYTE *)this + 325) = 16;
          v19 = *((_DWORD *)this + 80);
          v20 = 4352;
LABEL_14:
          v18 = v19 | v20;
LABEL_15:
          *((_DWORD *)this + 80) = v18;
LABEL_16:
          v21 = *((_QWORD *)cf + 5);
          v22 = *((_QWORD *)cf + 6);
          v23 = *((unsigned __int8 *)this + 324);
          Decode = CGImageGetDecode((CGImageRef)cf);
          RenderingIntent = CGImageGetRenderingIntent((CGImageRef)cf);
          CGBuf::Init((int8x8_t *)this, v21, v22, v18, v23, v17, Property, Decode, RenderingIntent, 4);
          v26 = CFDictionaryCreate(0, (const void **)&CGBuf::CGBuf(CGImage *)::keys, (const void **)&CGBuf::CGBuf(CGImage *)::values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          v27 = CGImageProviderCopyImageBlockSetWithOptions(v12, (uint64_t)v26);
          if (v26)
            CFRelease(v26);
          if (!v27)
            goto LABEL_52;
          *(_QWORD *)this = 0;
          if (*(_QWORD *)(v27 + 120) != 1
            || (v28 = *(_QWORD *)(v27 + 128)) == 0
            || (v29 = CGBufferStorage::CreateWithImageBlockSet((char *)v27, 0),
                *(_QWORD *)this = v29,
                *((_QWORD *)this + 5) = *(_QWORD *)(v28 + 40),
                !v29))
          {
            v30 = CGBufferStorage::Create((*((_QWORD *)this + 4) - 1) * *((_QWORD *)this + 5)+ ((*((_QWORD *)this + 3) * (unint64_t)*((unsigned __int8 *)this + 324) + 7) >> 3), 4);
            *(_QWORD *)this = v30;
            if (v30)
            {
              v31 = *(_QWORD *)(v27 + 120);
              if (v31)
              {
                v32 = 0;
                v83 = *(_QWORD *)(v27 + 72);
                do
                {
                  if (*(_QWORD *)(v27 + 120) > v32)
                  {
                    v33 = *(double **)(v27 + 8 * v32 + 128);
                    if (v33)
                    {
                      v34 = 0;
                      v35 = (unint64_t)fmax(v33[1], 0.0);
                      v36 = (unint64_t)fmax(v33[2], 0.0);
                      v37 = (unint64_t)fmax(v33[3], 0.0);
                      v39 = *((_QWORD *)this + 3);
                      v38 = *((_QWORD *)this + 4);
                      v40 = v39 - v35;
                      if (v39 < v35)
                        v40 = 0;
                      if (v37 + v35 > v39)
                        v37 = v40;
                      v41 = fmax(v33[4], 0.0);
                      v42 = v38 - v36;
                      if (v38 < v36)
                        v42 = 0;
                      if ((unint64_t)v41 + v36 <= v38)
                        v43 = (unint64_t)v41;
                      else
                        v43 = v42;
                      if (v39 > v35)
                      {
                        if (v38 <= v36)
                        {
                          v46 = 0;
                        }
                        else
                        {
                          v44 = *(int8x8_t *)this;
                          if (*(_QWORD *)this)
                            v44 = *(int8x8_t *)(*(_QWORD *)&v44 + 32);
                          v45 = *((_QWORD *)this + 5) * v36;
                          if (!*(_QWORD *)&v44)
                            v45 = 0;
                          v46 = v45 + *(_QWORD *)&v44;
                        }
                        v47 = (*((unsigned __int8 *)this + 324) * v35) >> 3;
                        if (!v46)
                          v47 = 0;
                        v34 = (char *)(v47 + v46);
                      }
                      if (v43)
                      {
                        v48 = *(char **)v33;
                        v49 = (char *)*((_QWORD *)v33 + 5);
                        v50 = v37 * v83;
                        do
                        {
                          memcpy(v34, v48, v50);
                          v48 = &v48[(_QWORD)v49];
                          v34 += *((_QWORD *)this + 5);
                          --v43;
                        }
                        while (v43);
                      }
                    }
                  }
                  ++v32;
                }
                while (v32 != v31);
              }
            }
          }
          CGImageBlockSetRelease(v27);
          if (!*(_QWORD *)this)
            goto LABEL_52;
          return;
        default:
LABEL_52:
          CGBuf::~CGBuf(this, v5, v6, v7, v8, v9, v10, v11);
          v104 = 0;
          v102 = 0u;
          v103 = 0u;
          v100 = 0u;
          v101 = 0u;
          v98 = 0u;
          v99 = 0u;
          v96 = 0u;
          v97 = 0u;
          v94 = 0u;
          v95 = 0u;
          v92 = 0u;
          v93 = 0u;
          v90 = 0u;
          v91 = 0u;
          v88 = 0u;
          v89 = 0u;
          v86 = 0u;
          v87 = 0u;
          v84 = 0u;
          v85 = 0u;
          *((_QWORD *)this + 40) = 0;
          *((_OWORD *)this + 18) = 0u;
          *((_OWORD *)this + 19) = 0u;
          *((_OWORD *)this + 16) = 0u;
          *((_OWORD *)this + 17) = 0u;
          *((_OWORD *)this + 14) = 0u;
          *((_OWORD *)this + 15) = 0u;
          *((_OWORD *)this + 12) = 0u;
          *((_OWORD *)this + 13) = 0u;
          *((_OWORD *)this + 10) = 0u;
          *((_OWORD *)this + 11) = 0u;
          *((_OWORD *)this + 8) = 0u;
          *((_OWORD *)this + 9) = 0u;
          *((_OWORD *)this + 6) = 0u;
          *((_OWORD *)this + 7) = 0u;
          *((_OWORD *)this + 4) = 0u;
          *((_OWORD *)this + 5) = 0u;
          *((_OWORD *)this + 2) = 0u;
          *((_OWORD *)this + 3) = 0u;
          *(_OWORD *)this = 0u;
          *((_OWORD *)this + 1) = 0u;
          CGBuf::~CGBuf((CGBuf *)&v84, v51, v52, v53, v54, v55, v56, v57);
          break;
      }
    }
    v58 = *((_QWORD *)cf + 5);
    v59 = *((_QWORD *)cf + 6);
    BitmapInfo = CGImageGetBitmapInfo((CGImageRef)cf);
    v61 = cf[16];
    v62 = cf[14];
    ColorSpace = CGImageGetColorSpace((CGImageRef)cf);
    v64 = CGImageGetDecode((CGImageRef)cf);
    v65 = CGImageGetRenderingIntent((CGImageRef)cf);
    CGBuf::Init((int8x8_t *)this, v58, v59, BitmapInfo, v61, v62, ColorSpace, v64, v65, 4);
    DataProviderInternal = CGImageGetDataProviderInternal((char *)cf, 0);
    if (!DataProviderInternal
      || (v74 = CGDataProviderCopyData((CGDataProviderRef)DataProviderInternal)) == 0
      || (v75 = v74,
          *(_QWORD *)this = CGBufferStorage::CreateWithCFData(v74, v67),
          *((_QWORD *)this + 5) = *((_QWORD *)cf + 9),
          CFRelease(v75),
          !*(_QWORD *)this))
    {
      CGBuf::~CGBuf(this, (uint64_t)v67, v68, v69, v70, v71, v72, v73);
      v104 = 0;
      v102 = 0u;
      v103 = 0u;
      v100 = 0u;
      v101 = 0u;
      v98 = 0u;
      v99 = 0u;
      v96 = 0u;
      v97 = 0u;
      v94 = 0u;
      v95 = 0u;
      v92 = 0u;
      v93 = 0u;
      v90 = 0u;
      v91 = 0u;
      v88 = 0u;
      v89 = 0u;
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      *((_QWORD *)this + 40) = 0;
      *((_OWORD *)this + 18) = 0u;
      *((_OWORD *)this + 19) = 0u;
      *((_OWORD *)this + 16) = 0u;
      *((_OWORD *)this + 17) = 0u;
      *((_OWORD *)this + 14) = 0u;
      *((_OWORD *)this + 15) = 0u;
      *((_OWORD *)this + 12) = 0u;
      *((_OWORD *)this + 13) = 0u;
      *((_OWORD *)this + 10) = 0u;
      *((_OWORD *)this + 11) = 0u;
      *((_OWORD *)this + 8) = 0u;
      *((_OWORD *)this + 9) = 0u;
      *((_OWORD *)this + 6) = 0u;
      *((_OWORD *)this + 7) = 0u;
      *((_OWORD *)this + 4) = 0u;
      *((_OWORD *)this + 5) = 0u;
      *((_OWORD *)this + 2) = 0u;
      *((_OWORD *)this + 3) = 0u;
      *(_OWORD *)this = 0u;
      *((_OWORD *)this + 1) = 0u;
      CGBuf::~CGBuf((CGBuf *)&v84, v76, v77, v78, v79, v80, v81, v82);
    }
  }
}

{
  _QWORD *ImageProvider;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  uint64_t v15;
  CGColorSpace *Property;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  const CGFloat *Decode;
  __int8 RenderingIntent;
  CFDictionaryRef v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  double *v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  double v41;
  unint64_t v42;
  unint64_t v43;
  int8x8_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  size_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  CGBitmapInfo BitmapInfo;
  unsigned int v61;
  unsigned int v62;
  CGColorSpace *ColorSpace;
  const CGFloat *v64;
  __int8 v65;
  char *DataProviderInternal;
  const __CFData *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  CGBufferStorage *v74;
  CGBufferStorage *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;

  *((_QWORD *)this + 40) = 0;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  if (cf)
  {
    CFRetain(cf);
    *((_QWORD *)this + 1) = cf;
    ImageProvider = CGImageGetImageProvider(cf);
    if (ImageProvider)
    {
      v12 = (uint64_t)ImageProvider;
      {
        CGBuf::CGBuf(CGImage *)::keys = (uint64_t)CFSTR("kCGImageBlockSingletonRequest");
      }
      {
        CGBuf::CGBuf(CGImage *)::values = *MEMORY[0x1E0C9AE50];
      }
      *((_BYTE *)this + 324) = 8 * *(_BYTE *)(v12 + 48);
      *((_DWORD *)this + 80) = *(_DWORD *)(v12 + 36) & 0x1F;
      v15 = *(_QWORD *)(v12 + 120);
      if (!v15
        || (Property = (CGColorSpace *)CGPropertiesGetProperty(v15, CFSTR("kCGImageProviderColorSpaceChangedOnImageCopy"))) == 0)
      {
        Property = *(CGColorSpace **)(v12 + 40);
      }
      *((_QWORD *)this + 6) = Property;
      switch(*(_DWORD *)(v12 + 32))
      {
        case 1:
          v17 = 8;
          *((_BYTE *)this + 325) = 8;
          v18 = *((_DWORD *)this + 80);
          goto LABEL_16;
        case 2:
          v17 = 16;
          *((_BYTE *)this + 325) = 16;
          v18 = *((_DWORD *)this + 80) | 0x1000;
          goto LABEL_15;
        case 3:
          v17 = 32;
          *((_BYTE *)this + 325) = 32;
          v18 = *((_DWORD *)this + 80) | 0x2000;
          goto LABEL_15;
        case 4:
          v17 = 32;
          *((_BYTE *)this + 325) = 32;
          v19 = *((_DWORD *)this + 80);
          v20 = 8448;
          goto LABEL_14;
        case 5:
          v17 = 16;
          *((_BYTE *)this + 325) = 16;
          v19 = *((_DWORD *)this + 80);
          v20 = 4352;
LABEL_14:
          v18 = v19 | v20;
LABEL_15:
          *((_DWORD *)this + 80) = v18;
LABEL_16:
          v21 = *((_QWORD *)cf + 5);
          v22 = *((_QWORD *)cf + 6);
          v23 = *((unsigned __int8 *)this + 324);
          Decode = CGImageGetDecode((CGImageRef)cf);
          RenderingIntent = CGImageGetRenderingIntent((CGImageRef)cf);
          CGBuf::Init((int8x8_t *)this, v21, v22, v18, v23, v17, Property, Decode, RenderingIntent, 4);
          v26 = CFDictionaryCreate(0, (const void **)&CGBuf::CGBuf(CGImage *)::keys, (const void **)&CGBuf::CGBuf(CGImage *)::values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          v27 = CGImageProviderCopyImageBlockSetWithOptions(v12, (uint64_t)v26);
          if (v26)
            CFRelease(v26);
          if (!v27)
            goto LABEL_52;
          *(_QWORD *)this = 0;
          if (*(_QWORD *)(v27 + 120) != 1
            || (v28 = *(_QWORD *)(v27 + 128)) == 0
            || (v29 = CGBufferStorage::CreateWithImageBlockSet((char *)v27, 0),
                *(_QWORD *)this = v29,
                *((_QWORD *)this + 5) = *(_QWORD *)(v28 + 40),
                !v29))
          {
            v30 = CGBufferStorage::Create((*((_QWORD *)this + 4) - 1) * *((_QWORD *)this + 5)+ ((*((_QWORD *)this + 3) * (unint64_t)*((unsigned __int8 *)this + 324) + 7) >> 3), 4);
            *(_QWORD *)this = v30;
            if (v30)
            {
              v31 = *(_QWORD *)(v27 + 120);
              if (v31)
              {
                v32 = 0;
                v83 = *(_QWORD *)(v27 + 72);
                do
                {
                  if (*(_QWORD *)(v27 + 120) > v32)
                  {
                    v33 = *(double **)(v27 + 8 * v32 + 128);
                    if (v33)
                    {
                      v34 = 0;
                      v35 = (unint64_t)fmax(v33[1], 0.0);
                      v36 = (unint64_t)fmax(v33[2], 0.0);
                      v37 = (unint64_t)fmax(v33[3], 0.0);
                      v39 = *((_QWORD *)this + 3);
                      v38 = *((_QWORD *)this + 4);
                      v40 = v39 - v35;
                      if (v39 < v35)
                        v40 = 0;
                      if (v37 + v35 > v39)
                        v37 = v40;
                      v41 = fmax(v33[4], 0.0);
                      v42 = v38 - v36;
                      if (v38 < v36)
                        v42 = 0;
                      if ((unint64_t)v41 + v36 <= v38)
                        v43 = (unint64_t)v41;
                      else
                        v43 = v42;
                      if (v39 > v35)
                      {
                        if (v38 <= v36)
                        {
                          v46 = 0;
                        }
                        else
                        {
                          v44 = *(int8x8_t *)this;
                          if (*(_QWORD *)this)
                            v44 = *(int8x8_t *)(*(_QWORD *)&v44 + 32);
                          v45 = *((_QWORD *)this + 5) * v36;
                          if (!*(_QWORD *)&v44)
                            v45 = 0;
                          v46 = v45 + *(_QWORD *)&v44;
                        }
                        v47 = (*((unsigned __int8 *)this + 324) * v35) >> 3;
                        if (!v46)
                          v47 = 0;
                        v34 = (char *)(v47 + v46);
                      }
                      if (v43)
                      {
                        v48 = *(char **)v33;
                        v49 = (char *)*((_QWORD *)v33 + 5);
                        v50 = v37 * v83;
                        do
                        {
                          memcpy(v34, v48, v50);
                          v48 = &v48[(_QWORD)v49];
                          v34 += *((_QWORD *)this + 5);
                          --v43;
                        }
                        while (v43);
                      }
                    }
                  }
                  ++v32;
                }
                while (v32 != v31);
              }
            }
          }
          CGImageBlockSetRelease(v27);
          if (!*(_QWORD *)this)
            goto LABEL_52;
          return;
        default:
LABEL_52:
          CGBuf::~CGBuf(this, v5, v6, v7, v8, v9, v10, v11);
          v104 = 0;
          v102 = 0u;
          v103 = 0u;
          v100 = 0u;
          v101 = 0u;
          v98 = 0u;
          v99 = 0u;
          v96 = 0u;
          v97 = 0u;
          v94 = 0u;
          v95 = 0u;
          v92 = 0u;
          v93 = 0u;
          v90 = 0u;
          v91 = 0u;
          v88 = 0u;
          v89 = 0u;
          v86 = 0u;
          v87 = 0u;
          v84 = 0u;
          v85 = 0u;
          *((_QWORD *)this + 40) = 0;
          *((_OWORD *)this + 18) = 0u;
          *((_OWORD *)this + 19) = 0u;
          *((_OWORD *)this + 16) = 0u;
          *((_OWORD *)this + 17) = 0u;
          *((_OWORD *)this + 14) = 0u;
          *((_OWORD *)this + 15) = 0u;
          *((_OWORD *)this + 12) = 0u;
          *((_OWORD *)this + 13) = 0u;
          *((_OWORD *)this + 10) = 0u;
          *((_OWORD *)this + 11) = 0u;
          *((_OWORD *)this + 8) = 0u;
          *((_OWORD *)this + 9) = 0u;
          *((_OWORD *)this + 6) = 0u;
          *((_OWORD *)this + 7) = 0u;
          *((_OWORD *)this + 4) = 0u;
          *((_OWORD *)this + 5) = 0u;
          *((_OWORD *)this + 2) = 0u;
          *((_OWORD *)this + 3) = 0u;
          *(_OWORD *)this = 0u;
          *((_OWORD *)this + 1) = 0u;
          CGBuf::~CGBuf((CGBuf *)&v84, v51, v52, v53, v54, v55, v56, v57);
          break;
      }
    }
    v58 = *((_QWORD *)cf + 5);
    v59 = *((_QWORD *)cf + 6);
    BitmapInfo = CGImageGetBitmapInfo((CGImageRef)cf);
    v61 = cf[16];
    v62 = cf[14];
    ColorSpace = CGImageGetColorSpace((CGImageRef)cf);
    v64 = CGImageGetDecode((CGImageRef)cf);
    v65 = CGImageGetRenderingIntent((CGImageRef)cf);
    CGBuf::Init((int8x8_t *)this, v58, v59, BitmapInfo, v61, v62, ColorSpace, v64, v65, 4);
    DataProviderInternal = CGImageGetDataProviderInternal((char *)cf, 0);
    if (!DataProviderInternal
      || (v74 = CGDataProviderCopyData((CGDataProviderRef)DataProviderInternal)) == 0
      || (v75 = v74,
          *(_QWORD *)this = CGBufferStorage::CreateWithCFData(v74, v67),
          *((_QWORD *)this + 5) = *((_QWORD *)cf + 9),
          CFRelease(v75),
          !*(_QWORD *)this))
    {
      CGBuf::~CGBuf(this, (uint64_t)v67, v68, v69, v70, v71, v72, v73);
      v104 = 0;
      v102 = 0u;
      v103 = 0u;
      v100 = 0u;
      v101 = 0u;
      v98 = 0u;
      v99 = 0u;
      v96 = 0u;
      v97 = 0u;
      v94 = 0u;
      v95 = 0u;
      v92 = 0u;
      v93 = 0u;
      v90 = 0u;
      v91 = 0u;
      v88 = 0u;
      v89 = 0u;
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      *((_QWORD *)this + 40) = 0;
      *((_OWORD *)this + 18) = 0u;
      *((_OWORD *)this + 19) = 0u;
      *((_OWORD *)this + 16) = 0u;
      *((_OWORD *)this + 17) = 0u;
      *((_OWORD *)this + 14) = 0u;
      *((_OWORD *)this + 15) = 0u;
      *((_OWORD *)this + 12) = 0u;
      *((_OWORD *)this + 13) = 0u;
      *((_OWORD *)this + 10) = 0u;
      *((_OWORD *)this + 11) = 0u;
      *((_OWORD *)this + 8) = 0u;
      *((_OWORD *)this + 9) = 0u;
      *((_OWORD *)this + 6) = 0u;
      *((_OWORD *)this + 7) = 0u;
      *((_OWORD *)this + 4) = 0u;
      *((_OWORD *)this + 5) = 0u;
      *((_OWORD *)this + 2) = 0u;
      *((_OWORD *)this + 3) = 0u;
      *(_OWORD *)this = 0u;
      *((_OWORD *)this + 1) = 0u;
      CGBuf::~CGBuf((CGBuf *)&v84, v76, v77, v78, v79, v80, v81, v82);
    }
  }
}

void sub_184AD5CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CGBuf *v8;

  CGBuf::~CGBuf(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void sub_184AD62A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CGBuf *v8;

  CGBuf::~CGBuf(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

CGImageRef CGBuf::CreateCGImage(CGBuf *this, BOOL a2)
{
  uint64_t v2;
  const void *v5;
  unint64_t v6;
  CGDataProvider *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  CGDataProvider *v13;
  unint64_t v14;
  CGImageRef v15;
  char decode;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  v5 = *(const void **)(v2 + 32);
  v6 = (*((_QWORD *)this + 4) - 1) * *((_QWORD *)this + 5)
     + ((*((_QWORD *)this + 3) * (unint64_t)*((unsigned __int8 *)this + 324) + 7) >> 3);
  check_clients_buffer("CGDataProviderCreateWithData", v5, v6);
  v7 = CGDataProviderCreateWithDataInternal(v2, (uint64_t)v5, v6, (uint64_t)CGBufferStorage::DataProviderReleaseInfoCallback, 0);
  if (!v7)
    return 0;
  v11 = *(unint64_t **)this;
  v12 = atomic_load(*(unint64_t **)this);
  if (v12 < 1)
    _CGHandleAssert("Retain", 244, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/CGBlit/CGBuf.h", "0 < atomic_load_explicit(&refCount, std::memory_order_acquire)", "CGBuf retained with 0 refcount", v8, v9, v10, decode);
  v13 = v7;
  do
    v14 = __ldaxr(v11);
  while (__stlxr(v14 + 1, v11));
  v15 = CGImageCreate(*((_QWORD *)this + 3), *((_QWORD *)this + 4), *((unsigned __int8 *)this + 325), *((unsigned __int8 *)this + 324), *((_QWORD *)this + 5), *((CGColorSpaceRef *)this + 6), *((_DWORD *)this + 80), v7, *((const CGFloat **)this + 7), a2, (CGColorRenderingIntent)*((unsigned __int8 *)this + 327));
  CGDataProviderRelease(v13);
  return v15;
}

CGContextRef CGBuf::CreateCGBitmapContext(size_t *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  char releaseInfo;

  v8 = (unint64_t *)*this;
  if (!*this)
    return 0;
  v9 = atomic_load(v8);
  if (v9 < 1)
    _CGHandleAssert("Retain", 244, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/CGBlit/CGBuf.h", "0 < atomic_load_explicit(&refCount, std::memory_order_acquire)", "CGBuf retained with 0 refcount", a6, a7, a8, releaseInfo);
  do
    v10 = __ldaxr(v8);
  while (__stlxr(v10 + 1, v8));
  return CGBitmapContextCreateWithData(*(void **)(*this + 32), this[3], this[4], *((unsigned __int8 *)this + 325), this[5], (CGColorSpaceRef)this[6], *((_DWORD *)this + 80), (CGBitmapContextReleaseDataCallback)CGBufferStorage::BitmapContextReleaseDataCallback, (void *)*this);
}

uint64_t CGBuf::_GetAlphaData(CGBuf *this, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v11;

  *a2 = 0;
  v9 = *((_QWORD *)this + 2);
  if (!v9)
    return 0;
  if (*(_DWORD *)(v9 + 16) == 1129601108 && *(_DWORD *)(v9 + 24) == 4)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 136);
  }
  else
  {
    handle_invalid_context((char)"CGBitmapContextGetAlphaBytesPerRow", v9, a3, a4, a5, a6, a7, a8);
    v11 = 0;
    v9 = *((_QWORD *)this + 2);
  }
  *a2 = v11;
  return CGBitmapContextGetAlphaData(v9, v9, a3, a4, a5, a6, a7, a8);
}

void CGBuf::ReInit(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6, int a7, uint64_t a8, CGColorSpace *cf1, const void *a10, __int8 a11, uint64_t a12)
{
  CGColorSpaceRef v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v25;
  BOOL v27;
  unsigned __int8 v28;
  int v29;
  CGColorSpaceRef DeviceCMYK;
  const void *v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const void *v40;
  const void *v41;
  uint64_t v42;
  const void *v43;
  __int8 v44;
  const void *v45;
  int8x8_t v46;
  unint64_t v47;
  unint64_t v48;
  BOOL v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  BOOL v70;
  const void *v71;
  const void *v72;
  int v73;
  BOOL v74;
  int v75;
  int v76;
  int v77;
  char v78;
  int v79;
  unsigned int v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  _OWORD v85[20];
  uint64_t v86;

  v16 = cf1;
  v83 = a5;
  v84 = a4;
  v82 = a6;
  v17 = *(_DWORD *)(a1 + 320);
  v18 = *(unsigned __int8 *)(a1 + 325);
  v81 = a12;
  v79 = *(unsigned __int8 *)(a1 + 324);
  if ((a12 & 0x800) != 0)
  {
    LegalizeForContext(&v84, &v83, &v82, &cf1);
    v16 = cf1;
  }
  v80 = v17;
  if (!v16)
  {
    v20 = v84;
    v22 = v83 / v82;
    v21 = v84 & 0x1F;
    v25 = v83 != 16 || v82 != 5 || v21 != 0;
    if ((v84 & 0xF0000) == 0x20000)
      v25 = 0;
    if (v83 % v82 != 1)
      v25 = v83 % v82;
    v27 = (v84 & 0x1F) != 0 && v25 == 0;
    v28 = v22 - v27;
    v29 = (v22 - v27);
    switch(v29)
    {
      case 4:
        DeviceCMYK = CGColorSpaceCreateDeviceCMYK();
        break;
      case 3:
        DeviceCMYK = CGColorSpaceCreateDeviceRGB();
        break;
      case 1:
        DeviceCMYK = CGColorSpaceCreateDeviceGray();
        break;
      default:
        v16 = 0;
        goto LABEL_34;
    }
    v16 = DeviceCMYK;
LABEL_34:
    cf1 = v16;
    v19 = v28;
    goto LABEL_35;
  }
  v19 = *(_QWORD *)(a1 + 48);
  if (v19)
    v19 = *(_QWORD *)(*(_QWORD *)(v19 + 24) + 40);
  v20 = v84;
  LOBYTE(v21) = v84 & 0x1F;
LABEL_35:
  v31 = a10;
  if (((1 << v21) & 0x9E) != 0)
    v32 = v19 + 1;
  else
    v32 = v19;
  if (*(_QWORD *)(a1 + 24) != a2)
  {
    v33 = v82;
LABEL_56:
    v43 = *(const void **)(a1 + 8);
    if (v43)
      CFRelease(v43);
    v44 = a11;
    *(_QWORD *)(a1 + 8) = 0;
    v45 = *(const void **)(a1 + 16);
    if (v45)
      CFRelease(v45);
    *(_QWORD *)(a1 + 16) = 0;
    CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 48));
    *(_QWORD *)(a1 + 48) = 0;
    CGBuf::Init((int8x8_t *)a1, a2, a3, v20, v83, v33, v16, v31, v44, v81);
    goto LABEL_61;
  }
  v33 = v82;
  if (*(_QWORD *)(a1 + 32) != a3
    || v82 != *(unsigned __int8 *)(a1 + 325)
    || *(_DWORD *)(a1 + 320) != v20
    || v83 != *(unsigned __int8 *)(a1 + 324)
    || !CFEqual(v16, *(CFTypeRef *)(a1 + 48)))
  {
    goto LABEL_56;
  }
  v40 = v31 ? v31 : &CompareDecodes(double const*,double const*,unsigned long)::kDefaultDecode;
  v41 = *(_QWORD *)(a1 + 56)
      ? *(const void **)(a1 + 56)
      : &CompareDecodes(double const*,double const*,unsigned long)::kDefaultDecode;
  if (v40 != v41)
  {
    v42 = 16;
    if (v32 < 0x10)
      v42 = v32;
    if (memcmp(v40, v41, 16 * v42))
      goto LABEL_56;
  }
LABEL_61:
  v46 = *(int8x8_t *)a1;
  if (!*(_QWORD *)a1)
  {
LABEL_70:
    if ((CGBuf::CreateBuffer(a1, v81, a8, v35, v36, v37, v38, v39) & 1) == 0)
    {
      CGBuf::~CGBuf((CGBuf *)a1, v52, v53, v54, v55, v56, v57, v58);
      v86 = 0;
      memset(v85, 0, sizeof(v85));
      *(_QWORD *)(a1 + 320) = 0;
      *(_OWORD *)(a1 + 288) = 0u;
      *(_OWORD *)(a1 + 304) = 0u;
      *(_OWORD *)(a1 + 256) = 0u;
      *(_OWORD *)(a1 + 272) = 0u;
      *(_OWORD *)(a1 + 224) = 0u;
      *(_OWORD *)(a1 + 240) = 0u;
      *(_OWORD *)(a1 + 192) = 0u;
      *(_OWORD *)(a1 + 208) = 0u;
      *(_OWORD *)(a1 + 160) = 0u;
      *(_OWORD *)(a1 + 176) = 0u;
      *(_OWORD *)(a1 + 128) = 0u;
      *(_OWORD *)(a1 + 144) = 0u;
      *(_OWORD *)(a1 + 96) = 0u;
      *(_OWORD *)(a1 + 112) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      CGBuf::~CGBuf((CGBuf *)v85, v59, v60, v61, v62, v63, v64, v65);
    }
    return;
  }
  if (*(unsigned __int8 *)(a1 + 325) != v18)
    goto LABEL_120;
  if (((*(_DWORD *)(a1 + 320) ^ v80) & 0x100) != 0)
    goto LABEL_120;
  v47 = a8
      + (*(_QWORD *)(a1 + 32) - 1) * *(_QWORD *)(a1 + 40)
      + ((*(_QWORD *)(a1 + 24) * (unint64_t)*(unsigned __int8 *)(a1 + 324) + 7) >> 3);
  v48 = *(_QWORD *)(*(_QWORD *)&v46 + 24);
  v49 = v48 >= v47;
  v50 = v48 - v47;
  if (!v49
    || (v67 = *(_QWORD *)(*(_QWORD *)&v46 + 32),
        v66 = *(_QWORD *)(*(_QWORD *)&v46 + 40),
        v68 = *(_QWORD *)(*(_QWORD *)&v46 + 16),
        !*(_BYTE *)(*(_QWORD *)&v46 + 88))
    && (v69 = (v50 + v68) & -*(_QWORD *)(*(_QWORD *)&v46 + 8), v70 = v68 > v69, v68 = v69, v70))
  {
LABEL_120:
    do
      v51 = __ldaxr(*(unint64_t **)&v46);
    while (__stlxr(v51 - 1, *(unint64_t **)&v46));
    if (v51 <= 0)
      _CGHandleAssert("Release", 250, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/CGBlit/CGBuf.h", "oldVal >= 1", "CGBuf released with zero refcount", v37, v38, v39, v78);
    if (v51 == 1)
      CGBufferStorage::~CGBufferStorage(*(CGBufferStorage **)&v46, (uint64_t)v41, v34, v35, v36, v37, v38, v39);
    *(_QWORD *)a1 = 0;
    goto LABEL_70;
  }
  *(_QWORD *)(*(_QWORD *)&v46 + 32) = v68;
  *(_QWORD *)(*(_QWORD *)&v46 + 40) = v47;
  if (v67 != v68)
  {
    v71 = *(const void **)(a1 + 8);
    if (v71)
      CFRelease(v71);
    *(_QWORD *)(a1 + 8) = 0;
    v72 = *(const void **)(a1 + 16);
    if (v72)
      CFRelease(v72);
    *(_QWORD *)(a1 + 16) = 0;
  }
  if ((v81 & 0x100) == 0)
    return;
  if (v67 != v68 || v66 != *(_QWORD *)(*(_QWORD *)a1 + 40))
  {
LABEL_114:
    CGBuf::FillBuffer(a1, v81);
    return;
  }
  v73 = v80 & 0x7000;
  switch((v80 >> 12) & 7)
  {
    case 0u:
      if (v18 == 8)
        goto LABEL_98;
      if (v18 != 32 && v18 != 16)
      {
LABEL_117:
        __break(1u);
        return;
      }
      v75 = 0;
      goto LABEL_99;
    case 1u:
    case 3u:
      if (v18 != 16)
        goto LABEL_117;
      v74 = v73 == 4096;
      goto LABEL_89;
    case 2u:
    case 4u:
      if (v18 == 32)
      {
        v74 = v73 == 0x2000;
LABEL_89:
        v75 = v74;
      }
      else
      {
        if (v18 != 8 || v79 != 32)
          goto LABEL_116;
LABEL_98:
        v75 = 1;
      }
LABEL_99:
      v76 = *(unsigned __int8 *)(a1 + 325);
      switch((*(_DWORD *)(a1 + 320) >> 12) & 7)
      {
        case 0:
          if (v76 == 8)
            goto LABEL_113;
          if (v76 != 16 && v76 != 32)
            goto LABEL_117;
          if ((v75 & 1) != 0)
            goto LABEL_114;
          return;
        case 1:
        case 3:
          if (v76 != 16)
            goto LABEL_117;
          v77 = 4096;
          goto LABEL_104;
        case 2:
        case 4:
          if (v76 != 32)
          {
            if (v76 == 8 && *(_BYTE *)(a1 + 324) == 32)
            {
LABEL_113:
              if ((v75 & 1) != 0)
                return;
              goto LABEL_114;
            }
LABEL_116:
            __assert_rtn("IsFormatHostEndian", "CGBuf.cpp", 1074, "bitsPerComponent == 8 && bitsPerPixel == 32");
          }
          v77 = 0x2000;
LABEL_104:
          if (v75 != ((*(_DWORD *)(a1 + 320) & 0x7000) == v77))
            goto LABEL_114;
          return;
        default:
          goto LABEL_117;
      }
    default:
      goto LABEL_117;
  }
}

uint64_t _PrintChannel<unsigned char>(char **a1, unint64_t *a2, _QWORD *a3)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)(*a3)++;
  return StringPrint(a1, a2, "0x2.2x", *v3);
}

uint64_t StringPrint(char **a1, unint64_t *a2, const char *a3, ...)
{
  uint64_t result;
  size_t v6;
  size_t v7;
  va_list va;

  va_start(va, a3);
  result = vsnprintf(*a1, *a2, a3, va);
  v6 = (int)result;
  v7 = *a2;
  if (*a2 < (int)result)
    v6 = *a2;
  *a1 += v6;
  *a2 = v7 - v6;
  return result;
}

uint64_t _PrintChannel<unsigned short>(char **a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t v3;

  v3 = *(unsigned __int16 *)*a3;
  *a3 += 2;
  return StringPrint(a1, a2, "0x4.4x", v3);
}

uint64_t _PrintChannel<half>(char **a1, unint64_t *a2, _WORD **a3)
{
  __int16 v3;

  v3 = *(*a3)++;
  _H0 = v3;
  __asm { FCVT            D0, H0 }
  return StringPrint(a1, a2, "%f (0x4.4x)", _D0);
}

uint64_t _PrintChannel<float>(char **a1, unint64_t *a2, _DWORD **a3)
{
  float v3;

  v3 = *(float *)(*a3)++;
  return StringPrint(a1, a2, "%10.14f (%a)", v3, v3);
}

uint64_t _PrintChannel_WrongEndian<unsigned short>(char **a1, unint64_t *a2, _QWORD *a3)
{
  unsigned int v3;

  v3 = *(unsigned __int16 *)*a3;
  *a3 += 2;
  return StringPrint(a1, a2, "0x4.4x", bswap32(v3) >> 16);
}

uint64_t _PrintChannel_WrongEndian<half>(char **a1, unint64_t *a2, _QWORD *a3)
{
  unsigned int v3;

  v3 = *(unsigned __int16 *)*a3;
  *a3 += 2;
  _H0 = bswap32(v3) >> 16;
  __asm { FCVT            D0, H0 }
  return StringPrint(a1, a2, "%f (0x4.4x)", _D0);
}

uint64_t _PrintChannel_WrongEndian<float>(char **a1, unint64_t *a2, unsigned int **a3)
{
  double v4;

  v4 = COERCE_FLOAT(bswap32(**a3));
  return StringPrint(a1, a2, "%10.14f (%a)", v4, v4);
}

uint64_t UnsupportedFormat(char **a1, unint64_t *a2, void **a3)
{
  return StringPrint(a1, a2, "<Unhandled pixel format>");
}

uint64_t CGBuf::PrintPixel(CGBuf *this, char **a2, unint64_t *a3, unint64_t a4, unint64_t a5)
{
  int v7;
  uint64_t v8;
  _BOOL8 v9;
  uint64_t v10;
  int v11;
  uint64_t (*v12)(char **, unint64_t *, unsigned int **);
  uint64_t (*v13)(char **, unint64_t *, void **);
  uint64_t (*v14)(char **, unint64_t *, void **);
  uint64_t (*v15)(char **, unint64_t *, void **);
  uint64_t (*v16)(char **, unint64_t *, const void **);
  uint64_t v17;
  uint64_t v19;
  const void *v20;

  if (*((_QWORD *)this + 3) <= a4)
    return StringPrint(a2, a3, "<Out of bounds: x coordinate (%lu) >= width (%lu))>");
  if (*((_QWORD *)this + 4) <= a5)
    return StringPrint(a2, a3, "<Out of bounds: y coordinate (%lu) >= height (%lu))>");
  v7 = *((_DWORD *)this + 80);
  v8 = *((unsigned __int8 *)this + 326);
  v9 = (v7 & 0x1F) != 0;
  if ((v7 & 0x1F) != 0)
    v10 = v8 + 1;
  else
    v10 = *((unsigned __int8 *)this + 326);
  v11 = *((unsigned __int8 *)this + 325);
  v12 = _PrintChannel_WrongEndian<float>;
  if ((v7 & 0x7000) == 0x2000)
    v12 = _PrintChannel<float>;
  v13 = (uint64_t (*)(char **, unint64_t *, void **))_PrintChannel<unsigned short>;
  v14 = (uint64_t (*)(char **, unint64_t *, void **))_PrintChannel_WrongEndian<half>;
  if ((v7 & 0x7000) == 0x1000)
    v14 = (uint64_t (*)(char **, unint64_t *, void **))_PrintChannel<half>;
  else
    v13 = (uint64_t (*)(char **, unint64_t *, void **))_PrintChannel_WrongEndian<unsigned short>;
  if ((v7 & 0x100) != 0)
    v15 = v14;
  else
    v15 = v13;
  if (v11 != 16)
    v15 = UnsupportedFormat;
  if (v11 == 32)
    v15 = (uint64_t (*)(char **, unint64_t *, void **))v12;
  if (v11 == 8)
    v16 = (uint64_t (*)(char **, unint64_t *, const void **))_PrintChannel<unsigned char>;
  else
    v16 = (uint64_t (*)(char **, unint64_t *, const void **))v15;
  if (!v10)
    return StringPrint(a2, a3, "<no channels>");
  v20 = (const void *)(*(_QWORD *)this + *((_QWORD *)this + 5) * a5 + ((*((unsigned __int8 *)this + 324) * a4) >> 3));
  StringPrint(a2, a3, "%p { ", v20);
  v16(a2, a3, &v20);
  if (v10 != 1)
  {
    v17 = v9 + v8 - 1;
    do
    {
      StringPrint(a2, a3, ", ");
      v16(a2, a3, &v20);
      --v17;
    }
    while (v17);
  }
  return StringPrint(a2, a3, " }", v19);
}

uint64_t CGBuf::Print(CGBuf *this, char **a2, unint64_t *a3, const char *a4)
{
  uint64_t v4;
  const void *v5;
  int v6;
  const char *v7;
  const char *v8;
  unint64_t v9;
  const char *v10;
  const char *v11;

  v4 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v5 = *(const void **)(v4 + 32);
    v4 = *(_QWORD *)(v4 + 40);
  }
  else
  {
    v5 = 0;
  }
  v6 = *((_DWORD *)this + 80);
  if ((v6 & 0x1Fu) <= 7)
    v7 = off_1E165F5B8[v6 & 0x1F];
  else
    v7 = "<invalid alpha>";
  if ((unsigned __int16)(v6 & 0x7000) >> 12 <= 4u)
    v8 = *(char **)((char *)GetByteOrderName(CGImageByteOrderInfo)::kByteOrderNames
                  + ((unint64_t)(v6 & 0x7000) >> 9));
  else
    v8 = "<invalid byte order>";
  v9 = *((unsigned __int8 *)this + 327);
  if (v9 <= 4)
    v10 = GetRenderingIntentName(CGColorRenderingIntent)::kRenderingIntentNames[v9];
  else
    v10 = "<invalid rendering intent>";
  if ((v6 & 0x100) != 0)
    v11 = "float";
  else
    v11 = "unorm";
  return StringPrint(a2, a3, "%s%p CGBuf:\n%s\tbuffer:             %p  (%lu bytes)\n%s\tsize:               {%lu x %lu}\n%s\tbits per pixel:     %u\n%s\tcomponent type:     %s%u\n%s\talpha:              %s\n%s\tbyteOrder:          %s\n%s\trowBytes:           %lu\n%s\tcolorSpace:         %p\n%s\tCGImage:            %p\n%s\tcontext:            %p\n%s\tdecode:             %p\n%s\trendering intent:   %s\n", a4, this, a4, v5,
           v4,
           a4,
           *((_QWORD *)this + 3),
           *((_QWORD *)this + 4),
           a4,
           *((unsigned __int8 *)this + 324),
           a4,
           v11,
           *((unsigned __int8 *)this + 325),
           a4,
           v7,
           a4,
           v8,
           a4,
           *((_QWORD *)this + 5),
           a4,
           *((const void **)this + 6),
           a4,
           *((const void **)this + 1),
           a4,
           *((const void **)this + 2),
           a4,
           *((const void **)this + 7),
           a4,
           v10);
}

uint64_t CGBuf::Print(CGBuf *this, const CGBuf *a2, __n128 a3)
{
  CGBuf *v3;
  unint64_t v5;
  char *v6;
  char v7[4096];
  uint64_t v8;

  v3 = (CGBuf *)MEMORY[0x1E0C80A78](this, a3);
  v8 = *MEMORY[0x1E0C80C00];
  if (!v3)
    return puts("CGBuf <NULL>");
  v5 = 4096;
  v6 = v7;
  CGBuf::Print(v3, &v6, &v5, "");
  return printf("%s", v7);
}

double boundsForOverlap(void *a1, int a2, int a3)
{
  double v6;
  double v7;
  double v8;
  double v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  double v13;
  void *v14;
  double v15;
  double v16;
  double v17;
  BOOL v18;
  double v19;

  objc_msgSend(a1, "normalizedBounds");
  v7 = v6;
  v9 = v8;
  v10 = objc_msgSend(a1, "count");
  if (v10)
  {
    v11 = v10;
    v12 = 0;
    v13 = 0.0;
    while (1)
    {
      v14 = (void *)objc_msgSend(a1, "childAtIndex:", v12);
      if (objc_msgSend(v14, "leftSpacerIndex") != a2
        || objc_msgSend(v14, "rightSpacerIndex") != a3)
      {
        break;
      }
      objc_msgSend(v14, "normalizedBounds");
      v13 = v13 + v15;
      v12 = (v12 + 1);
      if (v11 == (_DWORD)v12)
      {
        v16 = v13 / (double)v11 * 6.0;
        v17 = (v16 - v9) * 0.5;
        v18 = v9 < v16;
        v19 = 0.0;
        if (v18)
          v19 = v17;
        return v7 - v19;
      }
    }
  }
  return v7;
}

uint64_t center_finalize(uint64_t a1)
{
  registry_release(*(_QWORD **)(a1 + 80));
  return pthread_mutex_destroy((pthread_mutex_t *)(a1 + 16));
}

uint64_t CGNotificationCenterRemoveCallback(uint64_t result, uint64_t a2, const __CFString *a3, const __CFString *a4)
{
  uint64_t v5;
  const __CFString *v6;
  const __CFString *v7;
  pthread_mutex_t *v8;
  uint64_t *i;
  uint64_t v10;

  if (a2)
  {
    v5 = result;
    if (a3)
      v6 = a3;
    else
      v6 = CFSTR("kCGNotificationAnyName");
    if (a4)
      v7 = a4;
    else
      v7 = CFSTR("kCGNotificationAnyObject");
    v8 = (pthread_mutex_t *)(result + 16);
    pthread_mutex_lock((pthread_mutex_t *)(result + 16));
    for (i = *(uint64_t **)(v5 + 80); i; *(_QWORD *)(v5 + 80) = i)
    {
      while (1)
      {
        v10 = *i;
        if (*(_QWORD *)(*i + 32) == a2
          && *(const __CFString **)(v10 + 24) == v7
          && CFEqual(v6, *(CFTypeRef *)(v10 + 16)))
        {
          break;
        }
        i = (uint64_t *)i[1];
        if (!i)
          return pthread_mutex_unlock(v8);
      }
      i = x_list_remove(*(_QWORD **)(v5 + 80), v10);
      registry_entry_release(v10);
    }
    return pthread_mutex_unlock(v8);
  }
  return result;
}

_QWORD *skip_comment(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;

  v8 = result;
  while (1)
  {
    v9 = v8[2];
    v10 = *(_QWORD *)(v9 + 120);
    if (!v10)
    {
      result = (_QWORD *)CGPDFSourceRefill(v8[2], a2, a3, a4, a5, a6, a7, a8);
      if (!(_DWORD)result)
        return result;
      v10 = *(_QWORD *)(v9 + 120);
    }
    v11 = *(unsigned __int8 **)(v9 + 128);
    *(_QWORD *)(v9 + 120) = v10 - 1;
    *(_QWORD *)(v9 + 128) = v11 + 1;
    v12 = *v11;
    if (v12 == 10)
      return result;
    if (v12 == 13)
    {
      v13 = v8[2];
      v14 = *(_QWORD *)(v13 + 120);
      if (v14)
      {
LABEL_10:
        v15 = *(unsigned __int8 **)(v13 + 128);
        *(_QWORD *)(v13 + 120) = v14 - 1;
        *(_QWORD *)(v13 + 128) = v15 + 1;
        v16 = *v15;
        if (v16 == 10)
          return result;
      }
      else
      {
        result = (_QWORD *)CGPDFSourceRefill(v8[2], a2, a3, a4, a5, a6, a7, a8);
        if ((_DWORD)result)
        {
          v14 = *(_QWORD *)(v13 + 120);
          goto LABEL_10;
        }
        v16 = -1;
      }
      return CGPDFSourceUngetc((_QWORD *)v8[2], v16);
    }
  }
}

_QWORD *skip_to_delimiter(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  unsigned __int8 *v12;
  unsigned int v13;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  size_t v19;
  char v20;

  while (1)
  {
    v9 = a1[2];
    v10 = *(_QWORD *)(v9 + 120);
    if (!v10)
    {
      result = (_QWORD *)CGPDFSourceRefill(a1[2], a2, a3, a4, a5, a6, a7, a8);
      if (!(_DWORD)result)
        return result;
      v10 = *(_QWORD *)(v9 + 120);
    }
    v12 = *(unsigned __int8 **)(v9 + 128);
    *(_QWORD *)(v9 + 120) = v10 - 1;
    *(_QWORD *)(v9 + 128) = v12 + 1;
    v13 = *v12;
    if (v13 <= 0x3E && ((1 << v13) & 0x5000832100003601) != 0)
      break;
    if (v13 - 91 <= 0x22 && ((1 << (v13 - 91)) & 0x500000005) != 0)
      break;
    v16 = a1[3];
    v17 = a1[4];
    v18 = (void *)a1[5];
    if (v16 >= v17)
    {
      v19 = 2 * v17 + 128;
      a1[4] = v19;
      v18 = malloc_type_realloc(v18, v19, 0x33EA2F66uLL);
      a1[5] = (uint64_t)v18;
      if (!v18)
        _CGHandleAssert("lex_grow_buffer", 55, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Reader/CGPDFLexer.c", "lexer->buffer != NULL", "lexer buffer missing", a6, a7, a8, v20);
      v16 = a1[3];
    }
    a1[3] = v16 + 1;
    *((_BYTE *)v18 + v16) = v13;
  }
  return CGPDFSourceUngetc((_QWORD *)a1[2], *v12);
}

char *create_image_stream(const void *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, unint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11, CGDataProvider *a12, CGDataProvider *a13, uint64_t *a14)
{
  unsigned int v18;
  char *v24;
  uint64_t *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  int v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  _BYTE *v41;
  _BOOL4 v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  int v47;
  _QWORD *v48;
  unint64_t v49;
  size_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  _QWORD *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  vImageConverterRef v70;
  vImage_CGImageFormat destFormat;
  _BYTE __dst[304];
  vImage_CGImageFormat srcFormat;

  if (a8 < a6)
    _CGHandleAssert("create_image_stream", 145, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageStream.c", "src_image_bytes_per_row >= image_data_bytes_per_row", "src image bpr: %lu  image bpr: %lu", a6, a7, a8, a8);
  if (a9 < a7)
    _CGHandleAssert("create_image_stream", 146, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageStream.c", "src_smask_bytes_per_row >= smask_data_bytes_per_row", "src mask bpr: %lu  mask bpr: %lu", a6, a7, a8, a9);
  v18 = *(_DWORD *)(a2 + 24);
  if (v18 >= 2 && v18 != 3)
    _CGHandleAssert("create_image_stream", 149, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageStream.c", "pixel_info.alpha_info == kCGImageAlphaNone || pixel_info.alpha_info == kCGImageAlphaLast || pixel_info.alpha_info == kCGImageAlphaPremultipliedLast", "alpha unsupported (%d)", a6, a7, a8, *(_DWORD *)(a2 + 24));
  v24 = (char *)malloc_type_calloc(1uLL, 0x518uLL, 0x10B0040ABF645E3uLL);
  if (v24)
  {
    v25 = a14;
    if (a1)
      CFRetain(a1);
    *(_QWORD *)v24 = a1;
    memcpy(v24 + 8, (const void *)a2, 0x130uLL);
    if (*(_QWORD *)(a2 + 40))
    {
      v26 = *(_DWORD *)(a2 + 24) - 1;
      if (v26 > 8)
        v27 = 0;
      else
        v27 = qword_184F7EB80[v26];
      v28 = v27 + *(_QWORD *)(a2 + 16);
      if (v28)
      {
        v29 = v24 + 64;
        v30 = (uint64_t *)(a2 + 56);
        do
        {
          *(v29 - 1) = *(v30 - 1);
          v31 = *v30;
          v30 += 2;
          *v29 = v31;
          v29 += 2;
          --v28;
        }
        while (v28);
      }
      *((_QWORD *)v24 + 6) = v24 + 56;
    }
    *((_QWORD *)v24 + 39) = a4;
    *((_QWORD *)v24 + 40) = a5;
    *((_QWORD *)v24 + 41) = a6;
    *((_QWORD *)v24 + 42) = a7;
    *((_QWORD *)v24 + 44) = a8;
    *((_QWORD *)v24 + 45) = a9;
    CGDataProviderRetain(a12);
    *((_QWORD *)v24 + 66) = a12;
    CGDataProviderRetain(a13);
    *((_QWORD *)v24 + 67) = a13;
    if (a13)
      v35 = a14 == 0;
    else
      v35 = 1;
    v36 = !v35;
    if ((a3 & 1) != 0)
      v36 = 0;
    v24[520] = v36;
    if (a14)
    {
      v37 = *(_QWORD *)(a2 + 16);
      if (v37)
      {
        v38 = v24 + 544;
        v39 = a14;
        do
        {
          v40 = *v39++;
          *v38++ = v40;
          --v37;
        }
        while (v37);
      }
    }
    if (*(_DWORD *)(a2 + 24))
    {
      v41 = v24 + 521;
      v42 = 1;
      v24[521] = 1;
    }
    else
    {
      v42 = a13 != 0;
      v41 = v24 + 521;
      v24[521] = v42;
      if (!a13)
      {
        v47 = 0;
LABEL_46:
        v48 = CGAccessSessionCreate(a12);
        *((_QWORD *)v24 + 84) = v48;
        if (!v48)
          goto LABEL_59;
        v49 = a6 > 0x10000 ? 1 : 0x10000 / a6;
        *((_QWORD *)v24 + 43) = v49;
        v50 = a10 + v49 * a6;
        v51 = malloc_type_calloc(1uLL, v50, 0xD1A5B1B7uLL);
        *((_QWORD *)v24 + 46) = v51;
        if (!v51)
          goto LABEL_59;
        if (*v41)
        {
          if (!a9)
            _CGHandleAssert("create_image_stream", 218, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageStream.c", "src_smask_bytes_per_row > 0", "bpr %lu", v52, v53, v54, 0);
          v55 = malloc_type_calloc(1uLL, a11 + v49 * a7, 0x387CD7CFuLL);
          *((_QWORD *)v24 + 47) = v55;
          if (!v55)
            goto LABEL_59;
        }
        if (a13)
        {
          v56 = CGAccessSessionCreate(a13);
          *((_QWORD *)v24 + 85) = v56;
          if (!v56)
            goto LABEL_59;
        }
        if (v47)
        {
          v57 = malloc_type_calloc(1uLL, v50, 0x965A843DuLL);
          *((_QWORD *)v24 + 48) = v57;
          if (!v57)
            goto LABEL_59;
          memcpy(v24 + 696, (const void *)a2, 0x130uLL);
          memcpy(v24 + 1000, (const void *)a2, 0x130uLL);
          *((_DWORD *)v24 + 180) = 5;
          *((_DWORD *)v24 + 256) = 0;
          memset(&srcFormat, 0, sizeof(srcFormat));
          memcpy(__dst, v24 + 696, sizeof(__dst));
          CGBitmapPixelInfoGet_vImageFormat((uint64_t)&srcFormat, (uint64_t)__dst, v58, v59, v60, v61, v62, v63);
          memset(&destFormat, 0, sizeof(destFormat));
          memcpy(__dst, v24 + 1000, sizeof(__dst));
          CGBitmapPixelInfoGet_vImageFormat((uint64_t)&destFormat, (uint64_t)__dst, v64, v65, v66, v67, v68, v69);
          v70 = vImageConverter_CreateWithCGImageFormat(&srcFormat, &destFormat, 0, 0x100u, 0);
          *((_QWORD *)v24 + 86) = v70;
          if (!v70)
          {
LABEL_59:
            CGImageStreamRelease(v24);
            return 0;
          }
        }
        return v24;
      }
    }
    if (v36)
    {
      if (!a13 || !a14)
        _CGHandleAssert("create_image_stream", 187, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageStream.c", "src_image_matte != NULL && src_smask_data_provider != NULL", "matte %p  provider %p", v32, v33, v34, (char)a14);
      v43 = *(_QWORD *)(a2 + 16);
      if (v43)
      {
        v44 = v24 + 392;
        do
        {
          v45 = *v25++;
          *v44++ = v45;
          --v43;
        }
        while (v43);
      }
    }
    v47 = v42 && a13 == 0;
    goto LABEL_46;
  }
  return v24;
}

void CGImageStreamRelease(_QWORD *a1)
{
  CGDataProvider *v2;
  uint64_t *v3;
  CGDataProvider *v4;
  uint64_t *v5;
  void *v6;
  void *v7;
  void *v8;
  vImageConverter *v9;

  v2 = (CGDataProvider *)a1[66];
  if (v2)
    CGDataProviderRelease(v2);
  v3 = (uint64_t *)a1[84];
  if (v3)
    CGAccessSessionRelease(v3);
  v4 = (CGDataProvider *)a1[67];
  if (v4)
    CGDataProviderRelease(v4);
  v5 = (uint64_t *)a1[85];
  if (v5)
    CGAccessSessionRelease(v5);
  v6 = (void *)a1[46];
  if (v6)
    free(v6);
  v7 = (void *)a1[47];
  if (v7)
    free(v7);
  v8 = (void *)a1[48];
  if (v8)
    free(v8);
  v9 = (vImageConverter *)a1[86];
  if (v9)
    vImageConverter_Release(v9);
  free(a1);
}

uint64_t CGColorTRCGetTypeID()
{
  if (CGColorTRCGetTypeID_cglibrarypredicate != -1)
    dispatch_once(&CGColorTRCGetTypeID_cglibrarypredicate, &__block_literal_global_742);
  return CGColorTRCGetTypeID_f();
}

uint64_t colorsync_smart_null_746()
{
  return 0;
}

uint64_t CGColorTRCPureGammaOriginal(uint64_t a1)
{
  if (CGColorTRCPureGammaOriginal_cglibrarypredicate != -1)
    dispatch_once(&CGColorTRCPureGammaOriginal_cglibrarypredicate, &__block_literal_global_9);
  return CGColorTRCPureGammaOriginal_f(a1);
}

uint64_t CGColorMatrixGetTypeID()
{
  if (CGColorMatrixGetTypeID_cglibrarypredicate != -1)
    dispatch_once(&CGColorMatrixGetTypeID_cglibrarypredicate, &__block_literal_global_12);
  return CGColorMatrixGetTypeID_f();
}

uint64_t CGColorNxMTransformGetTypeID()
{
  if (CGColorNxMTransformGetTypeID_cglibrarypredicate != -1)
    dispatch_once(&CGColorNxMTransformGetTypeID_cglibrarypredicate, &__block_literal_global_18);
  return CGColorNxMTransformGetTypeID_f();
}

uint64_t CGColorNxMLUTGetTypeID()
{
  if (CGColorNxMTransformGetTypeID_cglibrarypredicate != -1)
    dispatch_once(&CGColorNxMTransformGetTypeID_cglibrarypredicate, &__block_literal_global_18);
  return CGColorNxMTransformGetTypeID_f();
}

uint64_t (*__nxm_get_properties_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncNxMGetProperties");
  v1 = colorsync_smart_null_746;
  if (result)
    v1 = result;
  nxm_get_properties_f = (uint64_t)v1;
  return result;
}

uint64_t (*__nxm_get_input_range_block_invoke_2())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncNxMGetInputRange");
  v1 = colorsync_smart_null_746;
  if (result)
    v1 = result;
  nxm_get_input_range_f_64 = (uint64_t)v1;
  return result;
}

uint64_t (*__nxm_get_input_range_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncNxMGetInputRange");
  v1 = colorsync_smart_null_746;
  if (result)
    v1 = result;
  nxm_get_input_range_f = v1;
  return result;
}

uint64_t (*__nxm_get_output_range_block_invoke_2())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncNxMGetOutputRange");
  v1 = colorsync_smart_null_746;
  if (result)
    v1 = result;
  nxm_get_output_range_f_85 = (uint64_t)v1;
  return result;
}

uint64_t (*__nxm_get_output_range_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncNxMGetOutputRange");
  v1 = colorsync_smart_null_746;
  if (result)
    v1 = result;
  nxm_get_output_range_f = v1;
  return result;
}

uint64_t CGColorConversionInfoIterateColorSpaceFunctionsWithCallbacks(uint64_t a1, CGColorSpace *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, int a9)
{
  unsigned int Type;
  uint64_t v18;
  CGColorConversionInfoRef v19;
  CGColorConversionInfoRef v20;
  uint64_t v21;

  if (!a1 || !*(_BYTE *)(*(_QWORD *)(a1 + 24) + 10))
    return 0;
  Type = CGColorSpaceGetType(a2);
  v18 = 0;
  if (Type <= 0xB && ((1 << Type) & 0xC78) != 0)
  {
    v18 = 1;
    v19 = CGColorConversionInfoCreateFromList(0, a2, kCGColorConversionTransformFromSpace, kCGRenderingIntentDefault, a1, 1, 0, 0);
    if (v19)
    {
      v20 = v19;
      v21 = CGColorConversionInfoIterateFunctionsWithCallbacks(v19, a3, a4, a5, a6, a7, a8, a9);
      CFRelease(v20);
      return v21;
    }
  }
  return v18;
}

uint64_t CGColorConversionInfoIterateColorSpaceFunctionsWithCallbacksAndOptions(uint64_t a1, CGColorSpace *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9, CFDictionaryRef options)
{
  unsigned int Type;
  uint64_t v19;
  CGColorConversionInfoRef v20;
  CGColorConversionInfoRef v21;
  uint64_t v22;

  Type = CGColorSpaceGetType(a2);
  v19 = 0;
  if (Type > 0xB)
    return v19;
  if (((1 << Type) & 0xC78) == 0)
    return v19;
  v19 = 1;
  v20 = CGColorConversionInfoCreateFromList(options, a2, kCGColorConversionTransformFromSpace, kCGRenderingIntentDefault, a1, 1, 0, 0);
  if (!v20)
    return v19;
  v21 = v20;
  v22 = CGColorConversionInfoIterateFunctionsWithCallbacks(v20, a3, a4, a5, a6, a7, a8, a9);
  CFRelease(v21);
  return v22;
}

void CGFontDBRelease(char *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  if (a1)
  {
    v2 = *(const void **)a1;
    if (v2)
      CFRelease(v2);
    v3 = (const void *)*((_QWORD *)a1 + 1);
    if (v3)
      CFRelease(v3);
    v4 = (const void *)*((_QWORD *)a1 + 2);
    if (v4)
      CFRelease(v4);
    v5 = (const void *)*((_QWORD *)a1 + 3);
    if (v5)
      CFRelease(v5);
    pthread_mutex_destroy((pthread_mutex_t *)(a1 + 32));
    free(a1);
  }
}

uint64_t CGFontDBAddFont(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  pthread_mutex_t *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;

  if (result)
  {
    v3 = result;
    v4 = (pthread_mutex_t *)(result + 32);
    pthread_mutex_lock((pthread_mutex_t *)(result + 32));
    if (a2)
    {
      v5 = (const void *)(*(uint64_t (**)(_QWORD))(a2[2] + 152))(a2[14]);
      if (v5)
      {
        v6 = v5;
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(v3 + 8), v5, a2);
        CFRelease(v6);
      }
      v7 = (const void *)(*(uint64_t (**)(_QWORD))(a2[2] + 168))(a2[14]);
      if (v7)
      {
        v8 = v7;
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(v3 + 8), v7, a2);
        CFRelease(v8);
      }
    }
    return pthread_mutex_unlock(v4);
  }
  return result;
}

uint64_t CGFontDBRemoveFont(uint64_t result, uint64_t a2)
{
  CFArrayRef *v3;
  pthread_mutex_t *v4;
  void *v5;
  void *v6;

  if (result)
  {
    v3 = (CFArrayRef *)result;
    v4 = (pthread_mutex_t *)(result + 32);
    pthread_mutex_lock((pthread_mutex_t *)(result + 32));
    if (a2)
    {
      v5 = (void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)(a2 + 16) + 152))(*(_QWORD *)(a2 + 112));
      v6 = (void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)(a2 + 16) + 168))(*(_QWORD *)(a2 + 112));
      remove_font_names_locked(v3, v5, v6);
      if (v5)
        CFRelease(v5);
      if (v6)
        CFRelease(v6);
    }
    else
    {
      remove_font_names_locked(v3, 0, 0);
    }
    return pthread_mutex_unlock(v4);
  }
  return result;
}

void remove_font_names_locked(CFArrayRef *a1, void *key, void *a3)
{
  CFIndex Count;
  CFIndex v7;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v10;
  CFIndex v11;
  __CFDictionary *MutableCopy;
  __CFDictionary *v13;

  if (key)
    CFDictionaryRemoveValue(a1[1], key);
  if (a3)
    CFDictionaryRemoveValue(a1[1], a3);
  Count = CFArrayGetCount(*a1);
  if (Count)
  {
    v7 = Count;
    for (i = 0; i != v7; ++i)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*a1, i);
      v10 = ValueAtIndex;
      if (key && CFDictionaryContainsKey(ValueAtIndex, key) || a3 && CFDictionaryContainsKey(v10, a3))
      {
        v11 = CFDictionaryGetCount(v10);
        MutableCopy = CFDictionaryCreateMutableCopy(0, v11, v10);
        v13 = MutableCopy;
        if (key)
          CFDictionaryRemoveValue(MutableCopy, key);
        if (a3)
          CFDictionaryRemoveValue(v13, a3);
        CFArraySetValueAtIndex(*a1, i, v13);
        CFRelease(v13);
      }
    }
  }
}

uint64_t CGFontDBRemoveFontByName(uint64_t result, void *a2)
{
  CFArrayRef *v3;
  pthread_mutex_t *v4;

  if (result)
  {
    if (a2)
    {
      v3 = (CFArrayRef *)result;
      v4 = (pthread_mutex_t *)(result + 32);
      pthread_mutex_lock((pthread_mutex_t *)(result + 32));
      remove_font_names_locked(v3, a2, 0);
      return pthread_mutex_unlock(v4);
    }
  }
  return result;
}

uint64_t CGFontDBPurgeAllFonts(uint64_t result)
{
  uint64_t v1;
  pthread_mutex_t *v2;

  if (result)
  {
    v1 = result;
    v2 = (pthread_mutex_t *)(result + 32);
    pthread_mutex_lock((pthread_mutex_t *)(result + 32));
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(v1 + 8));
    return pthread_mutex_unlock(v2);
  }
  return result;
}

void CGFontDBAddFontReferencesAtPath(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __CFArray *FontsWithPath;
  const __CFArray *v11;
  pthread_mutex_t *v12;
  __CFDictionary *ValueAtIndex;
  CFIndex Count;
  CFIndex v15;
  CFIndex i;
  _QWORD *v17;
  _QWORD *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;

  if (a1)
  {
    if (a2)
    {
      FontsWithPath = CGFontCreateFontsWithPath((uint64_t)a2, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      if (FontsWithPath)
      {
        v11 = FontsWithPath;
        v12 = (pthread_mutex_t *)(a1 + 32);
        pthread_mutex_lock((pthread_mutex_t *)(a1 + 32));
        ValueAtIndex = (__CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)a1, 0);
        Count = CFArrayGetCount(v11);
        if (Count)
        {
          v15 = Count;
          for (i = 0; i != v15; ++i)
          {
            v17 = CFArrayGetValueAtIndex(v11, i);
            if (v17)
            {
              v18 = v17;
              v19 = (const void *)(*(uint64_t (**)(_QWORD))(v17[2] + 152))(v17[14]);
              if (v19)
              {
                v20 = v19;
                CFDictionarySetValue(ValueAtIndex, v19, a2);
                CFRelease(v20);
              }
              v21 = (const void *)(*(uint64_t (**)(_QWORD))(v18[2] + 168))(v18[14]);
              if (v21)
              {
                v22 = v21;
                CFDictionarySetValue(ValueAtIndex, v21, a2);
                CFRelease(v22);
              }
            }
          }
        }
        pthread_mutex_unlock(v12);
        CFRelease(v11);
      }
    }
  }
}

DIR *CGFontDBAddFontsInDirectory(uint64_t a1, CFStringRef string, int a3)
{
  DIR *result;
  stat v6;
  char buffer[1025];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  memset(&v6, 0, sizeof(v6));
  result = (DIR *)CFStringGetFileSystemRepresentation(string, buffer, 1025);
  if ((_DWORD)result)
  {
    result = (DIR *)stat(buffer, &v6);
    if (!(_DWORD)result && (v6.st_mode & 0xF000) == 0x4000)
      return activate_directory(a1, (uint64_t)buffer, a3);
  }
  return result;
}

DIR *activate_directory(uint64_t a1, uint64_t a2, int a3)
{
  size_t v5;
  size_t v6;
  DIR *result;
  DIR *v8;
  char *v9;
  size_t v10;
  dirent *v11;
  dirent *v12;
  const char *d_name;
  int d_type;
  CFStringRef v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CFStringRef v22;
  char __s[1025];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  __strcpy_chk();
  v5 = strlen(__s);
  v6 = v5;
  if (__s[v5 - 1] != 47)
  {
    *(_WORD *)&__s[v5] = 47;
    v6 = v5 + 1;
  }
  result = opendir(__s);
  if (result)
  {
    v8 = result;
    v9 = &__s[v6];
    v10 = 1024 - v6;
    while (1)
    {
      v11 = readdir(v8);
      if (!v11)
        break;
      v12 = v11;
      d_name = v11->d_name;
      if (strcmp(v11->d_name, ".") && strcmp(d_name, ".."))
      {
        strncpy(v9, d_name, v10);
        d_type = v12->d_type;
        if (d_type == 8)
        {
          v15 = CFStringCreateWithFileSystemRepresentation(0, __s);
          if (v15)
          {
            v22 = v15;
            CGFontDBAddFontReferencesAtPath(a1, v15, v16, v17, v18, v19, v20, v21);
            CFRelease(v22);
          }
        }
        else if (d_type == 4)
        {
          if (a3)
            activate_directory(a1, __s, 1);
        }
      }
    }
    return (DIR *)closedir(v8);
  }
  return result;
}

__CFDictionary *CGFontDBCreatePlist(CFArrayRef *a1)
{
  __CFDictionary *Mutable;
  CFMutableDictionaryRef v3;
  CFMutableDictionaryRef v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;

  if (!a1)
    return 0;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v3 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v3)
    {
      v4 = v3;
      Count = CFArrayGetCount(*a1);
      if (Count >= 1)
      {
        v6 = Count;
        for (i = 0; i != v6; ++i)
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*a1, i);
          CFDictionaryApplyFunction(ValueAtIndex, (CFDictionaryApplierFunction)append_to_dictionary, v4);
        }
      }
      CFDictionaryApplyFunction(a1[1], (CFDictionaryApplierFunction)get_names_and_paths, v4);
      CFDictionarySetValue(Mutable, CFSTR("Names"), v4);
    }
    else
    {
      v4 = Mutable;
      Mutable = 0;
    }
    CFRelease(v4);
  }
  return Mutable;
}

void append_to_dictionary(void *key, void *value, CFMutableDictionaryRef theDict)
{
  if (value)
    CFDictionarySetValue(theDict, key, value);
}

void get_names_and_paths(const void *a1, CFTypeRef cf, __CFDictionary *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CFTypeID v9;
  const void *v10;
  const void *v11;
  const char *v12;
  CFTypeID v13;
  const __CFString *v14;

  v9 = CFGetTypeID(cf);
  if (_block_invoke_once_3017 != -1)
    dispatch_once(&_block_invoke_once_3017, &__block_literal_global_7_3018);
  if (v9 != CGFontGetTypeID_font_type_id)
  {
    if (cf)
    {
      v13 = CFGetTypeID(cf);
      v14 = CFCopyTypeIDDescription(v13);
      LOBYTE(v12) = CFStringGetCStringPtr(v14, 0x8000100u);
    }
    else
    {
      v12 = "<NULL>";
    }
    _CGHandleAssert("get_names_and_paths", 460, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Fonts/CGFontDB.c", "CFGetTypeID(value) == CGFontGetTypeID()", "value is a %s", v6, v7, v8, (char)v12);
  }
  if (cf)
  {
    v10 = (const void *)(*(uint64_t (**)(_QWORD))(*((_QWORD *)cf + 2) + 224))(*((_QWORD *)cf + 14));
    if (v10)
    {
      v11 = v10;
      CFDictionarySetValue(a3, a1, v10);
      CFRelease(v11);
    }
  }
}

const void *CGFontDBGetFontWithName(uint64_t a1, const void *a2)
{
  uint64_t v3;
  const void *Value;
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  const __CFDictionary *ValueAtIndex;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFTypeRef v16;
  const void *v17;
  uint64_t v18;
  const void *v19;
  CFTypeRef v20;

  v3 = a1;
  if (a1)
  {
    if (a2)
      goto LABEL_3;
    return 0;
  }
  if (CGFontDBGetLocal_once != -1)
    dispatch_once_f(&CGFontDBGetLocal_once, 0, (dispatch_function_t)create_local_db);
  v3 = local_db;
  if (!a2)
    return 0;
LABEL_3:
  pthread_mutex_lock((pthread_mutex_t *)(v3 + 32));
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 8), a2);
  if (Value)
  {
LABEL_4:
    pthread_mutex_unlock((pthread_mutex_t *)(v3 + 32));
    return Value;
  }
  Count = CFArrayGetCount(*(CFArrayRef *)v3);
  if (Count >= 1)
  {
    v7 = Count;
    v8 = 0;
    while (1)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)v3, v8);
      v10 = CFDictionaryGetValue(ValueAtIndex, a2);
      if (v10)
        break;
      if (v7 == ++v8)
        goto LABEL_14;
    }
    add_fonts_at_path_locked(v3, (uint64_t)v10, a2, v11, v12, v13, v14, v15);
    v19 = CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 8), a2);
    Value = v19;
    if (v19)
    {
      v20 = CFRetain(v19);
      CFAutorelease(v20);
    }
    goto LABEL_4;
  }
LABEL_14:
  v16 = copy_aliased_font_name_locked(v3, a2);
  if (!v16)
  {
    Value = 0;
    goto LABEL_4;
  }
  v17 = v16;
  pthread_mutex_unlock((pthread_mutex_t *)(v3 + 32));
  v18 = CGFontDBGetFontWithName(v3, v17);
  CFRelease(v17);
  return (const void *)v18;
}

void CGFontDBApplyFunction(uint64_t a1, unsigned int (*a2)(const void *, uint64_t), uint64_t a3)
{
  uint64_t v5;

  if (a2)
  {
    v5 = a1;
    if (a1)
      goto LABEL_6;
    if (CGFontDBGetLocal_once != -1)
      dispatch_once_f(&CGFontDBGetLocal_once, 0, (dispatch_function_t)create_local_db);
    v5 = local_db;
    if (local_db)
    {
LABEL_6:
      pthread_mutex_lock((pthread_mutex_t *)(v5 + 32));
      apply_function_locked((CFArrayRef *)v5, a2, a3);
      pthread_mutex_unlock((pthread_mutex_t *)(v5 + 32));
    }
  }
}

void apply_function_locked(CFArrayRef *a1, unsigned int (*a2)(const void *, uint64_t), uint64_t a3)
{
  CFIndex Count;
  CFIndex v7;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  CFIndex v10;
  __n128 v11;
  unint64_t v12;
  uint64_t v13;
  const void **v14;
  const void **v15;
  CFMutableSetRef Mutable;
  __CFSet *v17;
  const void **v18;
  const void *v19;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  Count = CFArrayGetCount(*a1);
  if (Count >= 1)
  {
    v7 = Count;
    for (i = 0; i != v7; ++i)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*a1, i);
      fault_all_in_map_locked((uint64_t)a1, ValueAtIndex);
    }
  }
  v10 = CFDictionaryGetCount(a1[1]);
  MEMORY[0x1E0C80A78](v10, v11);
  v14 = (const void **)((char *)v20 - v13);
  if (v12 <= 0x1FFFFFFFFFFFFFFELL)
    v15 = (const void **)((char *)v20 - v13);
  else
    v15 = 0;
  if (v12 - 0x1FFFFFFFFFFFFFFFLL >= 0xE00000000000007ALL)
    v15 = (const void **)malloc_type_malloc(8 * v10, 0x446BBC51uLL);
  if (v15)
  {
    CFDictionaryGetKeysAndValues(a1[1], 0, v15);
    Mutable = CFSetCreateMutable(0, v10, MEMORY[0x1E0C9B3B0]);
    if (Mutable)
    {
      v17 = Mutable;
      if (v10)
      {
        v18 = v15;
        do
        {
          v19 = *v18;
          if (!CFSetContainsValue(v17, *v18))
          {
            if (a2(v19, a3))
              break;
            CFSetAddValue(v17, v19);
          }
          ++v18;
          --v10;
        }
        while (v10);
      }
      CFRelease(v17);
    }
    if (v15 != v14)
      free(v15);
  }
}

void fault_all_in_map_locked(uint64_t a1, CFDictionaryRef theDict)
{
  CFIndex Count;
  __n128 v5;
  CFIndex v6;
  uint64_t v7;
  unint64_t v8;
  const void **v9;
  const void **v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  if (theDict)
  {
    Count = CFDictionaryGetCount(theDict);
    if (Count)
    {
      v6 = Count;
      MEMORY[0x1E0C80A78](Count, v5);
      v9 = (const void **)((char *)&v17[-1] - v7 - 7);
      if (v8 <= 0x1FFFFFFFFFFFFFFELL)
        v10 = (const void **)((char *)&v17[-1] - v7 - 7);
      else
        v10 = 0;
      if (v8 - 0x1FFFFFFFFFFFFFFFLL >= 0xE00000000000007ALL)
        v10 = (const void **)malloc_type_malloc(16 * v6, 0xBD55515BuLL);
      if (v10)
      {
        CFDictionaryGetKeysAndValues(theDict, v10, &v10[v6]);
        for (i = 0; i != v6; ++i)
        {
          if (!CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 8), v10[i]))
            add_fonts_at_path_locked(a1, (uint64_t)*(&v10[v6] + i), v10[i], v12, v13, v14, v15, v16);
        }
        if (v10 != v9)
          free(v10);
      }
    }
  }
}

uint64_t CGPDFImageCreate(uint64_t a1)
{
  os_unfair_lock_s *v2;
  uint64_t mask;
  CGPDFDictionary *v4;
  CGPDFStreamRef v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  CGPDFStream *v9;
  uint64_t cftype;
  uint64_t DataProvider;
  CGPDFDictionary *v12;
  CGPDFArrayRef v13;
  char *v14;
  CGColorSpaceRef colorspace;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t smask;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  CGPDFBoolean value;
  CGPDFBoolean v26;
  CGPDFInteger v27;
  CGPDFDictionaryRef dict;
  CGPDFBoolean v29;
  int v30;
  CGPDFObjectRef v31;
  CGPDFArrayRef v32;
  CGPDFArrayRef array;
  CGPDFStreamRef v34[2];

  v34[1] = *(CGPDFStreamRef *)MEMORY[0x1E0C80C00];
  v2 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  mask = (uint64_t)CGPDFDictionaryCopyAssociation(*(_QWORD *)(a1 + 48), "Image");
  if (mask)
    goto LABEL_36;
  v4 = *(CGPDFDictionary **)(a1 + 48);
  value = CGPDFDictionaryGetBoolean(v4, "ImageMask", &value);
  array = 0;
  v34[0] = 0;
  if (CGPDFDictionaryGetName(v4, "Filter", (const char **)v34))
  {
    v5 = v34[0];
  }
  else if (CGPDFDictionaryGetArray(v4, "Filter", &array) && array && (v6 = *((_QWORD *)array + 2)) != 0)
  {
    if (CGPDFArrayGetName(array, v6 - 1, (const char **)v34))
      v5 = v34[0];
    else
      v5 = 0;
  }
  else
  {
    v5 = 0;
  }
  v7 = (void *)MEMORY[0x186DC2BD4]();
  if (CGAnalyticsSendCreatePDFImageEvent_onceToken == -1)
  {
    if (v5)
    {
LABEL_13:
      v8 = objc_msgSend((id)CGAnalyticsSendCreatePDFImageEvent_filterNameToEnumMapping, "objectForKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5));
      goto LABEL_16;
    }
  }
  else
  {
    dispatch_once(&CGAnalyticsSendCreatePDFImageEvent_onceToken, &__block_literal_global_14727);
    if (v5)
      goto LABEL_13;
  }
  v8 = 0;
LABEL_16:
  v9 = (CGPDFStream *)&unk_1E1674D50;
  if (v8)
    v9 = (CGPDFStream *)v8;
  array = (CGPDFArrayRef)CFSTR("filterName");
  v34[0] = v9;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v34, &array, 1);
  send_analytics_event((uint64_t)"com.apple.CoreGraphics.CreatePDFImage");
  objc_autoreleasePoolPop(v7);
  if (value)
  {
    mask = create_mask((_QWORD *)a1);
    goto LABEL_34;
  }
  v34[0] = (CGPDFStreamRef)a1;
  if (CGPDFImageGetTypeID_onceToken != -1)
    dispatch_once(&CGPDFImageGetTypeID_onceToken, &__block_literal_global_797);
  cftype = pdf_create_cftype();
  mask = cftype;
  if (!cftype)
    goto LABEL_34;
  pthread_mutex_init((pthread_mutex_t *)(cftype + 152), 0);
  *(_QWORD *)(mask + 24) = a1;
  *(_BYTE *)(mask + 16) = 0;
  DataProvider = CGPDFStreamCreateDataProvider((const void *)a1, (int *)(mask + 40));
  *(_QWORD *)(mask + 32) = DataProvider;
  if (!DataProvider)
    goto LABEL_33;
  v32 = 0;
  array = 0;
  v31 = 0;
  v30 = 0;
  v29 = 0;
  dict = 0;
  v12 = *(CGPDFDictionary **)(a1 + 48);
  if (!CGPDFDictionaryGetInteger(v12, "Width", (CGPDFInteger *)&array) || (uint64_t)array <= 0)
  {
LABEL_33:
    CFRelease((CFTypeRef)mask);
    mask = 0;
    goto LABEL_34;
  }
  *(_QWORD *)(mask + 48) = array;
  if (!CGPDFDictionaryGetInteger(v12, "Height", (CGPDFInteger *)&array) || (uint64_t)array <= 0)
  {
LABEL_32:
    pdf_error(v14);
    goto LABEL_33;
  }
  *(_QWORD *)(mask + 56) = array;
  if (*(_DWORD *)(mask + 40) == 2)
  {
    v13 = 0;
  }
  else
  {
    if (!CGPDFDictionaryGetInteger(v12, "BitsPerComponent", (CGPDFInteger *)&array))
    {
      goto LABEL_33;
    }
    v13 = array;
    if ((unint64_t)array > 0x10 || ((1 << (char)array) & 0x10116) == 0)
    {
      goto LABEL_33;
    }
  }
  *(_QWORD *)(mask + 64) = v13;
  set_image_rendering_intent(mask, v12);
  if (!CGPDFDictionaryGetObject(v12, "ColorSpace", &v31))
  {
    if (*(_DWORD *)(mask + 40) != 2)
    {
      goto LABEL_33;
    }
    v31 = 0;
    goto LABEL_47;
  }
  if (!v31)
  {
LABEL_47:
    *(_QWORD *)(mask + 72) = 0;
    goto LABEL_48;
  }
  colorspace = cg_create_colorspace((uint64_t)v31);
  *(_QWORD *)(mask + 72) = colorspace;
  if (!colorspace || CGColorSpaceGetType(colorspace) == 9)
  {
    goto LABEL_33;
  }
LABEL_48:
  *(_BYTE *)(mask + 84) = 0;
  if (CGPDFDictionaryGetBoolean(v12, "Interpolate", &v29))
    *(_BYTE *)(mask + 84) = v29 != 0;
  v17 = *(_QWORD *)(mask + 72);
  if (v17)
    v18 = *(_QWORD *)(*(_QWORD *)(v17 + 24) + 40);
  else
    v18 = 0;
  set_image_decode_array(mask, v12, v18, 0);
  if ((v19 & 1) == 0)
  {
    goto LABEL_33;
  }
  *(_DWORD *)(mask + 88) = v18 == 3;
  if (*(_DWORD *)(mask + 40) == 1)
  {
    if (CGPDFDictionaryGetDictionary(v12, "DecodeParms", &dict) || CGPDFDictionaryGetDictionary(v12, "DP", &dict))
    {
      if (dict && CGPDFDictionaryGetInteger(dict, "ColorTransform", (CGPDFInteger *)&array))
      {
        if ((unint64_t)array > 1)
        else
          *(_DWORD *)(mask + 88) = (_DWORD)array;
      }
    }
    else
    {
      dict = 0;
    }
  }
  v27 = 0;
  v26 = 0;
  if (CGPDFDictionaryGetInteger(v12, "SMaskInData", &v27) && v27
    || CGPDFDictionaryGetBoolean(v12, "SMaskInData", &v26) && v26)
  {
    *(_BYTE *)(mask + 120) = 1;
  }
  if (CGPDFDictionaryGetStream(v12, "SMask", v34))
  {
    smask = create_smask((_QWORD *)v34[0], v18);
    *(_QWORD *)(mask + 112) = smask;
    if (!smask)
      goto LABEL_33;
  }
  else if (CGPDFDictionaryGetStream(v12, "Mask", v34))
  {
    v21 = create_mask((_QWORD *)v34[0]);
    *(_QWORD *)(mask + 104) = v21;
    if (!v21)
      goto LABEL_33;
  }
  else if (CGPDFDictionaryGetArray(v12, "Mask", &v32))
  {
    v22 = 2 * v18;
    v23 = malloc_type_malloc(16 * v18, 0x566C45D1uLL);
    __CFSetLastAllocationEventName();
    *(_QWORD *)(mask + 128) = v23;
    if (!CGPDFArrayGetNumbers((uint64_t)v32, (uint64_t)v23, v22))
    {
      goto LABEL_33;
    }
  }
  if (CGPDFDictionaryGetStream(v12, "AAPL:EPSData", v34))
  {
    v24 = CGPDFStreamCreateDataProvider(v34[0], &v30);
    *(_QWORD *)(mask + 96) = v24;
    if (!v24 || v30)
      goto LABEL_32;
  }
LABEL_34:
  if (mask)
    mask = CGPDFDictionarySetAssociation(*(_QWORD *)(a1 + 48), (const void *)mask, "Image");
LABEL_36:
  os_unfair_lock_unlock(v2);
  return mask;
}

uint64_t create_mask(_QWORD *a1)
{
  uint64_t cftype;
  uint64_t v3;
  uint64_t DataProvider;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  double v9;
  char v10;
  _BOOL4 Integer;
  double v13;
  CGPDFBoolean value[2];
  CGPDFInteger v15;

  if (CGPDFImageGetTypeID_onceToken != -1)
    dispatch_once(&CGPDFImageGetTypeID_onceToken, &__block_literal_global_797);
  cftype = pdf_create_cftype();
  v3 = cftype;
  if (cftype)
  {
    pthread_mutex_init((pthread_mutex_t *)(cftype + 152), 0);
    *(_QWORD *)(v3 + 24) = a1;
    *(_BYTE *)(v3 + 16) = 1;
    DataProvider = CGPDFStreamCreateDataProvider(a1, (int *)(v3 + 40));
    *(_QWORD *)(v3 + 32) = DataProvider;
    if (!DataProvider)
    {
LABEL_22:
      CFRelease((CFTypeRef)v3);
      return 0;
    }
    v15 = 0;
    *(_WORD *)value = 0;
    if (a1)
      a1 = (_QWORD *)a1[6];
    if (!CGPDFDictionaryGetBoolean((CGPDFDictionaryRef)a1, "ImageMask", &value[1]) || !value[1])
    {
      goto LABEL_22;
    }
    if (!CGPDFDictionaryGetInteger((CGPDFDictionaryRef)a1, "Width", &v15) || v15 <= 0)
    {
      goto LABEL_22;
    }
    *(_QWORD *)(v3 + 48) = v15;
    if (!CGPDFDictionaryGetInteger((CGPDFDictionaryRef)a1, "Height", &v15) || v15 <= 0)
    {
      goto LABEL_22;
    }
    *(_QWORD *)(v3 + 56) = v15;
    if (*(_DWORD *)(v3 + 40) == 2)
    {
      v8 = 0;
    }
    else
    {
      Integer = CGPDFDictionaryGetInteger((CGPDFDictionaryRef)a1, "BitsPerComponent", &v15);
      v8 = 1;
      if (Integer && v15 != 1)
      {
        goto LABEL_22;
      }
    }
    *(_QWORD *)(v3 + 64) = v8;
    *(_QWORD *)(v3 + 72) = 0;
    *(_DWORD *)(v3 + 80) = 0;
    *(_BYTE *)(v3 + 84) = 0;
    if (CGPDFDictionaryGetBoolean((CGPDFDictionaryRef)a1, "Interpolate", value))
      *(_BYTE *)(v3 + 84) = value[0] != 0;
    v9 = set_image_decode_array(v3, (CGPDFDictionaryRef)a1, 1, 0);
    if ((v10 & 1) == 0)
    {
      goto LABEL_22;
    }
  }
  return v3;
}

void set_image_rendering_intent(uint64_t a1, CGPDFDictionaryRef dict)
{
  char *v3;
  int v4;
  char *value;

  value = 0;
  if (CGPDFDictionaryGetName(dict, "Intent", (const char **)&value))
  {
    v3 = value;
    if (!strcmp(value, "AbsoluteColorimetric"))
    {
      v4 = 1;
      goto LABEL_12;
    }
    if (!strcmp(v3, "RelativeColorimetric"))
    {
      v4 = 2;
      goto LABEL_12;
    }
    if (!strcmp(v3, "Saturation"))
    {
      v4 = 4;
      goto LABEL_12;
    }
    if (!strcmp(v3, "Perceptual"))
    {
      v4 = 3;
      goto LABEL_12;
    }
  }
  v4 = 0;
LABEL_12:
  *(_DWORD *)(a1 + 80) = v4;
}

CGPDFReal set_image_decode_array(uint64_t a1, CGPDFDictionaryRef dict, uint64_t a3, int a4)
{
  CGPDFReal result;
  CGPDFReal *v9;
  CGPDFArray *v10;
  uint64_t v11;
  size_t v12;
  CGPDFArrayRef array;
  CGPDFReal value;

  if ((*(_DWORD *)(a1 + 40) != 2 || CGPDFDictionaryGetObject(dict, "ColorSpace", 0) || *(_BYTE *)(a1 + 16))
    && ((array = 0, CGPDFDictionaryGetArray(dict, "Decode", &array))
     || a4 && CGPDFDictionaryGetArray(dict, "D", &array)))
  {
    v9 = (CGPDFReal *)malloc_type_malloc(16 * a3, 0x566C45D1uLL);
    __CFSetLastAllocationEventName();
    *(_QWORD *)(a1 + 136) = v9;
    v10 = array;
    if (array)
    {
      v11 = 2 * a3;
      if (*((_QWORD *)array + 2) >= (unint64_t)(2 * a3))
      {
        if (v11)
        {
          v12 = 0;
          value = 0.0;
          do
          {
            if (!CGPDFArrayGetNumber(v10, v12, &value))
              break;
            result = value;
            v9[v12++] = value;
          }
          while (v11 != v12);
        }
      }
    }
  }
  else
  {
    *(_QWORD *)(a1 + 136) = 0;
  }
  return result;
}

uint64_t create_smask(_QWORD *a1, uint64_t a2)
{
  uint64_t cftype;
  uint64_t v5;
  uint64_t DataProvider;
  CGPDFInteger v7;
  CGColorSpaceRef DeviceGray;
  char v10;
  void *v11;
  CGPDFBoolean value[2];
  CGPDFArrayRef array;
  char *__s1;
  CGPDFInteger v15;

  if (CGPDFImageGetTypeID_onceToken != -1)
    dispatch_once(&CGPDFImageGetTypeID_onceToken, &__block_literal_global_797);
  cftype = pdf_create_cftype();
  v5 = cftype;
  if (cftype)
  {
    pthread_mutex_init((pthread_mutex_t *)(cftype + 152), 0);
    *(_QWORD *)(v5 + 24) = a1;
    *(_BYTE *)(v5 + 16) = 0;
    DataProvider = CGPDFStreamCreateDataProvider(a1, (int *)(v5 + 40));
    *(_QWORD *)(v5 + 32) = DataProvider;
    if (DataProvider)
    {
      __s1 = 0;
      v15 = 0;
      array = 0;
      *(_WORD *)value = 0;
      if (a1)
        a1 = (_QWORD *)a1[6];
      if (CGPDFDictionaryGetBoolean((CGPDFDictionaryRef)a1, "ImageMask", &value[1]) && value[1])
      {
      }
      else if (CGPDFDictionaryGetInteger((CGPDFDictionaryRef)a1, "Width", &v15) && v15 > 0)
      {
        *(_QWORD *)(v5 + 48) = v15;
        if (CGPDFDictionaryGetInteger((CGPDFDictionaryRef)a1, "Height", &v15) && v15 > 0)
        {
          *(_QWORD *)(v5 + 56) = v15;
          if (*(_DWORD *)(v5 + 40) == 2)
          {
            v7 = 0;
          }
          else
          {
            if (!CGPDFDictionaryGetInteger((CGPDFDictionaryRef)a1, "BitsPerComponent", &v15))
            {
              goto LABEL_18;
            }
            v7 = v15;
            if ((unint64_t)v15 > 0x10 || ((1 << v15) & 0x10116) == 0)
            {
              goto LABEL_18;
            }
          }
          *(_QWORD *)(v5 + 64) = v7;
          if (CGPDFDictionaryGetName((CGPDFDictionaryRef)a1, "ColorSpace", (const char **)&__s1))
          {
            if (__s1)
            {
              if (strcmp(__s1, "DeviceGray"))
              {
                goto LABEL_18;
              }
              DeviceGray = CGColorSpaceCreateDeviceGray();
            }
            else
            {
              DeviceGray = 0;
            }
          }
          else
          {
            if (*(_DWORD *)(v5 + 40) != 2)
            {
              goto LABEL_18;
            }
            DeviceGray = 0;
            __s1 = 0;
          }
          *(_QWORD *)(v5 + 72) = DeviceGray;
          *(_BYTE *)(v5 + 84) = 0;
          if (CGPDFDictionaryGetBoolean((CGPDFDictionaryRef)a1, "Interpolate", value))
            *(_BYTE *)(v5 + 84) = value[0] != 0;
          set_image_decode_array(v5, (CGPDFDictionaryRef)a1, 1, 0);
          if ((v10 & 1) != 0)
          {
            *(_QWORD *)(v5 + 144) = 0;
            if (CGPDFDictionaryGetArray((CGPDFDictionaryRef)a1, "Matte", &array)
              && (v11 = malloc_type_malloc(8 * a2, 0x566C45D1uLL),
                  __CFSetLastAllocationEventName(),
                  *(_QWORD *)(v5 + 144) = v11,
                  (CGPDFArrayGetNumbers((uint64_t)array, (uint64_t)v11, a2) & 1) == 0))
            {
            }
            else if (CGPDFDictionaryGetObject((CGPDFDictionaryRef)a1, "Mask", 0))
            {
            }
            else
            {
              if (!CGPDFDictionaryGetStream((CGPDFDictionaryRef)a1, "SMask", 0))
                return v5;
            }
          }
          else
          {
          }
          goto LABEL_18;
        }
      }
      else
      {
      }
    }
LABEL_18:
    CFRelease((CFTypeRef)v5);
    return 0;
  }
  return v5;
}

uint64_t CGPDFImageFinalize(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = *(const void **)(a1 + 216);
  if (v2)
    CFRelease(v2);
  CGDataProviderRelease(*(CGDataProviderRef *)(a1 + 96));
  CGDataProviderRelease(*(CGDataProviderRef *)(a1 + 32));
  CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 72));
  v3 = *(const void **)(a1 + 112);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 104);
  if (v4)
    CFRelease(v4);
  free(*(void **)(a1 + 128));
  free(*(void **)(a1 + 136));
  free(*(void **)(a1 + 144));
  return pthread_mutex_destroy((pthread_mutex_t *)(a1 + 152));
}

uint64_t CGPDFImageCreateInline(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  CGPDFDictionary *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CGPDFInteger v8;
  _BOOL4 Integer;
  char *v10;
  CGPDFInteger v11;
  _BOOL4 v12;
  CGPDFInteger v13;
  uint64_t cftype;
  uint64_t DataProvider;
  double v16;
  double v17;
  CGPDFInteger v18;
  int v19;
  CGColorSpaceRef v20;
  CGColorSpaceRef v21;
  CGPDFArray *v22;
  const char *v23;
  CGColorSpaceRef inline_device_color_space;
  CGColorSpace *v25;
  CGPDFStringRef v26;
  CGPDFInteger v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  CGPDFInteger v31;
  char v32;
  const char *v33;
  CGColorSpace *ColorSpace;
  CGPDFStringRef v36;
  CGColorSpaceRef Indexed;
  CGPDFBoolean value;
  CGPDFBoolean v39;
  CGPDFDictionaryRef dict;
  CGPDFObjectRef v41;
  CGPDFInteger v42;
  CGPDFReal v43;
  CGPDFInteger v44;
  CGPDFStringRef v45;
  CGPDFInteger v46;

  v2 = (_QWORD *)a2;
  if (a2)
    v4 = *(CGPDFDictionary **)(a2 + 48);
  else
    v4 = 0;
  value = 0;
  if (!CGPDFDictionaryGetBoolean(v4, "ImageMask", &value) && !CGPDFDictionaryGetBoolean(v4, "IM", &value))
  {
    value = 0;
LABEL_24:
    if (CGPDFImageGetTypeID_onceToken != -1)
      dispatch_once(&CGPDFImageGetTypeID_onceToken, &__block_literal_global_797);
    cftype = pdf_create_cftype();
    v6 = cftype;
    if (!cftype)
      return v6;
    pthread_mutex_init((pthread_mutex_t *)(cftype + 152), 0);
    *(_QWORD *)(v6 + 24) = v2;
    *(_BYTE *)(v6 + 16) = 0;
    DataProvider = CGPDFStreamCreateDataProvider(v2, (int *)(v6 + 40));
    *(_QWORD *)(v6 + 32) = DataProvider;
    if (!DataProvider)
    {
LABEL_107:
      CFRelease((CFTypeRef)v6);
      return 0;
    }
    v42 = 0;
    v43 = 0.0;
    dict = 0;
    v41 = 0;
    v39 = 0;
    if (v2)
      v2 = (_QWORD *)v2[6];
    if (!CGPDFDictionaryGetNumber((CGPDFDictionaryRef)v2, "Width", &v43) || (v16 = v43, v43 < 1.0))
    {
      if (!CGPDFDictionaryGetNumber((CGPDFDictionaryRef)v2, "W", &v43) || (v16 = v43, v43 < 1.0))
      {
        goto LABEL_107;
      }
    }
    *(_QWORD *)(v6 + 48) = (unint64_t)v16;
    if (!CGPDFDictionaryGetNumber((CGPDFDictionaryRef)v2, "Height", &v43) || (v17 = v43, v43 < 1.0))
    {
      if (!CGPDFDictionaryGetNumber((CGPDFDictionaryRef)v2, "H", &v43) || (v17 = v43, v43 < 1.0))
      {
        goto LABEL_107;
      }
    }
    *(_QWORD *)(v6 + 56) = (unint64_t)v17;
    if (*(_DWORD *)(v6 + 40) == 2)
    {
      v18 = 0;
    }
    else
    {
      if (!CGPDFDictionaryGetInteger((CGPDFDictionaryRef)v2, "BitsPerComponent", &v42)
        && !CGPDFDictionaryGetInteger((CGPDFDictionaryRef)v2, "BPC", &v42))
      {
        goto LABEL_107;
      }
      v18 = v42;
      if ((unint64_t)v42 > 0x10 || ((1 << v42) & 0x10116) == 0)
      {
        return 0;
      }
    }
    *(_QWORD *)(v6 + 64) = v18;
    if (!CGPDFDictionaryGetObject((CGPDFDictionaryRef)v2, "ColorSpace", &v41)
      && !CGPDFDictionaryGetObject((CGPDFDictionaryRef)v2, "CS", &v41))
    {
      if (*(_DWORD *)(v6 + 40) != 2)
      {
        goto LABEL_107;
      }
      v21 = 0;
      v41 = 0;
      goto LABEL_60;
    }
    if (!v41)
    {
      v21 = 0;
      goto LABEL_60;
    }
    v45 = 0;
    v46 = 0;
    v44 = 0;
    v19 = *((_DWORD *)v41 + 2);
    if (v19 == 7)
    {
      v22 = (CGPDFArray *)*((_QWORD *)v41 + 4);
      if (v22)
      {
        if (*((_QWORD *)v22 + 2) == 4 && CGPDFArrayGetName(*((CGPDFArrayRef *)v41 + 4), 0, (const char **)&v46))
        {
          v23 = (const char *)v46;
          if ((!strcmp((const char *)v46, "Indexed") || !strcmp(v23, "I"))
            && CGPDFArrayGetName(v22, 1uLL, (const char **)&v46)
            && CGPDFArrayGetInteger(v22, 2uLL, &v44)
            && CGPDFArrayGetString(v22, 3uLL, &v45))
          {
            inline_device_color_space = create_inline_device_color_space((const char *)v46);
            if (inline_device_color_space)
            {
              v25 = inline_device_color_space;
              v26 = v45;
              v27 = *(_QWORD *)(*((_QWORD *)inline_device_color_space + 3) + 40)
                  + *(_QWORD *)(*((_QWORD *)inline_device_color_space + 3) + 40) * v44;
              if (v45)
              {
                if (*((_QWORD *)v45 + 3))
                  decrypt_string((uint64_t)v45);
                v28 = *((_QWORD *)v26 + 9);
              }
              else
              {
                v28 = 0;
              }
              if (v27 == v28)
              {
                v36 = v45;
                if (v45)
                {
                  if (*((_QWORD *)v45 + 3))
                    decrypt_string((uint64_t)v45);
                  Indexed = CGColorSpaceCreateIndexed(v25, v44, (const unsigned __int8 *)v36 + 80);
                  CGColorSpaceRelease(v25);
                  *(_QWORD *)(v6 + 72) = Indexed;
                  if (Indexed)
                    goto LABEL_61;
LABEL_105:
LABEL_106:
                  pdf_error(v10);
                  goto LABEL_107;
                }
              }
              CGColorSpaceRelease(v25);
            }
          }
        }
      }
    }
    else if (v19 == 5)
    {
      v46 = *((_QWORD *)v41 + 4);
      v20 = create_inline_device_color_space((const char *)v46);
      if (v20)
      {
        v21 = v20;
LABEL_60:
        *(_QWORD *)(v6 + 72) = v21;
LABEL_61:
        set_image_rendering_intent(v6, (CGPDFDictionaryRef)v2);
        *(_BYTE *)(v6 + 84) = (CGPDFDictionaryGetBoolean((CGPDFDictionaryRef)v2, "Interpolate", &v39)
                            || CGPDFDictionaryGetBoolean((CGPDFDictionaryRef)v2, "I", &v39))
                           && v39 != 0;
        v30 = *(_QWORD *)(v6 + 72);
        if (v30)
          v31 = *(_QWORD *)(*(_QWORD *)(v30 + 24) + 40);
        else
          v31 = 0;
        v42 = v31;
        set_image_decode_array(v6, (CGPDFDictionaryRef)v2, v31, 1);
        if ((v32 & 1) == 0)
        {
          goto LABEL_107;
        }
        *(_DWORD *)(v6 + 88) = v42 == 3;
        if (*(_DWORD *)(v6 + 40) == 1
          && (CGPDFDictionaryGetDictionary((CGPDFDictionaryRef)v2, "DecodeParms", &dict)
           || CGPDFDictionaryGetDictionary((CGPDFDictionaryRef)v2, "DP", &dict))
          && dict
          && CGPDFDictionaryGetInteger(dict, "ColorTransform", &v42))
        {
          if ((unint64_t)v42 > 1)
          else
            *(_DWORD *)(v6 + 88) = (int)v43;
        }
        return v6;
      }
      if (a1)
      {
        v33 = (const char *)v46;
        while (1)
        {
          ColorSpace = CGPDFResourcesGetColorSpace(*(_QWORD *)(a1 + 32), v33);
          if (ColorSpace)
            break;
          a1 = *(_QWORD *)(a1 + 40);
          if (!a1)
            goto LABEL_104;
        }
        v21 = ColorSpace;
        CFRetain(ColorSpace);
        goto LABEL_60;
      }
    }
LABEL_104:
    *(_QWORD *)(v6 + 72) = 0;
    goto LABEL_105;
  }
  if (!value)
    goto LABEL_24;
  if (CGPDFImageGetTypeID_onceToken != -1)
    dispatch_once(&CGPDFImageGetTypeID_onceToken, &__block_literal_global_797);
  v5 = pdf_create_cftype();
  v6 = v5;
  if (!v5)
    return v6;
  pthread_mutex_init((pthread_mutex_t *)(v5 + 152), 0);
  *(_QWORD *)(v6 + 24) = v2;
  *(_BYTE *)(v6 + 16) = 1;
  v7 = CGPDFStreamCreateDataProvider(v2, (int *)(v6 + 40));
  *(_QWORD *)(v6 + 32) = v7;
  if (!v7)
    goto LABEL_107;
  v46 = 0;
  LOBYTE(v45) = 0;
  if (v2)
    v2 = (_QWORD *)v2[6];
  if (!CGPDFDictionaryGetInteger((CGPDFDictionaryRef)v2, "Width", &v46) || (v8 = v46, v46 <= 0))
  {
    Integer = CGPDFDictionaryGetInteger((CGPDFDictionaryRef)v2, "W", &v46);
    if (!Integer)
      goto LABEL_106;
    v8 = v46;
    if (v46 < 1)
      goto LABEL_106;
  }
  *(_QWORD *)(v6 + 48) = v8;
  if (!CGPDFDictionaryGetInteger((CGPDFDictionaryRef)v2, "Height", &v46) || (v11 = v46, v46 <= 0))
  {
    v12 = CGPDFDictionaryGetInteger((CGPDFDictionaryRef)v2, "H", &v46);
    if (!v12)
      goto LABEL_106;
    v11 = v46;
    if (v46 < 1)
      goto LABEL_106;
  }
  *(_QWORD *)(v6 + 56) = v11;
  if (*(_DWORD *)(v6 + 40) == 2)
  {
    v13 = 0;
    goto LABEL_79;
  }
  if (!CGPDFDictionaryGetInteger((CGPDFDictionaryRef)v2, "BitsPerComponent", &v46)
    && !CGPDFDictionaryGetInteger((CGPDFDictionaryRef)v2, "BPC", &v46))
  {
    v13 = 1;
    v46 = 1;
    goto LABEL_79;
  }
  v13 = v46;
  if (v46 != 1)
  {
    goto LABEL_107;
  }
LABEL_79:
  *(_QWORD *)(v6 + 64) = v13;
  *(_BYTE *)(v6 + 84) = (CGPDFDictionaryGetBoolean((CGPDFDictionaryRef)v2, "Interpolate", (CGPDFBoolean *)&v45)
                      || CGPDFDictionaryGetBoolean((CGPDFDictionaryRef)v2, "I", (CGPDFBoolean *)&v45))
                     && (_BYTE)v45 != 0;
  set_image_decode_array(v6, (CGPDFDictionaryRef)v2, 1, 1);
  if ((v29 & 1) == 0)
  {
    goto LABEL_107;
  }
  return v6;
}

CGColorSpaceRef create_inline_device_color_space(const char *a1)
{
  if (!strcmp(a1, "G") || !strcmp(a1, "DeviceGray"))
    return CGColorSpaceCreateDeviceGray();
  if (!strcmp(a1, "RGB") || !strcmp(a1, "DeviceRGB"))
    return CGColorSpaceCreateDeviceRGB();
  if (!strcmp(a1, "CMYK") || !strcmp(a1, "DeviceCMYK"))
    return CGColorSpaceCreateDeviceCMYK();
  return 0;
}

CGImageRef CGPDFImageCreateImage(CGImage *a1, uint64_t a2)
{
  return CGPDFImageCreateImageForRenderingSize(a1, a2, 0.0, 0.0);
}

CGImageRef CGPDFImageCreateImageForRenderingSize(CGImageRef result, uint64_t a2, double a3, double a4)
{
  uint64_t v7;
  pthread_mutex_t *v8;
  int v9;
  double v10;
  CGColorSpace *ResolvedColorSpace;
  uint64_t v12;
  uint64_t v13;
  const __CFNumber *Property;
  const void *v15;
  const void *v16;
  CGImageRef image_for_image;
  __CFData *v18;
  CFNumberRef v19;
  CFNumberRef v20;
  int v21;
  int valuePtr;

  if (result)
  {
    v7 = (uint64_t)result;
    v8 = (pthread_mutex_t *)((char *)result + 152);
    pthread_mutex_lock((pthread_mutex_t *)((char *)result + 152));
    if (a3 == 0.0 && a4 == 0.0)
      goto LABEL_4;
    v10 = (double)*(unint64_t *)(v7 + 48) / a3;
    if (v10 >= (double)*(unint64_t *)(v7 + 56) / a4)
      v10 = (double)*(unint64_t *)(v7 + 56) / a4;
    if (v10 >= 16.0)
    {
      v9 = 16;
    }
    else if (v10 >= 8.0)
    {
      v9 = 8;
    }
    else if (v10 >= 4.0)
    {
      v9 = 4;
    }
    else
    {
      if (v10 < 2.0)
      {
LABEL_4:
        v9 = 1;
        goto LABEL_15;
      }
      v9 = 2;
    }
LABEL_15:
    if (!*(_BYTE *)(v7 + 16))
    {
      ResolvedColorSpace = (CGColorSpace *)CGPDFContentStreamCreateResolvedColorSpace(a2, *(_QWORD **)(v7 + 72));
      if (!CGColorSpaceEqualToColorSpace((uint64_t)ResolvedColorSpace, *(_QWORD *)(v7 + 72)))
      {
        image_for_image = create_image_for_image(v7, ResolvedColorSpace, v9);
        CGColorSpaceRelease(ResolvedColorSpace);
        pthread_mutex_unlock(v8);
        return image_for_image;
      }
      CGColorSpaceRelease(ResolvedColorSpace);
    }
    v12 = *(_QWORD *)(v7 + 216);
    if (!v12)
      goto LABEL_40;
    v13 = *(_QWORD *)(v12 + 216);
    if (v13)
    {
      Property = (const __CFNumber *)CGPropertiesGetProperty(v13, CFSTR("com.apple.CoreGraphics.SubsampleFactor"));
      if (Property)
      {
        valuePtr = 0;
        CFNumberGetValue(Property, kCFNumberIntType, &valuePtr);
        if (v9 < valuePtr)
        {
          pdf_log("CGPDFImage(%p): subsample_factor MISMATCH. existing = %d, requested = %d\n", (const void *)v7, valuePtr, v9);
          v15 = *(const void **)(v7 + 216);
          if (v15)
            CFRelease(v15);
          *(_QWORD *)(v7 + 216) = 0;
        }
      }
    }
    v16 = *(const void **)(v7 + 216);
    if (!v16)
    {
LABEL_40:
      if (*(_BYTE *)(v7 + 16))
      {
        if (*(_DWORD *)(v7 + 40))
        {
          *(_QWORD *)(v7 + 216) = 0;
LABEL_37:
          pthread_mutex_unlock(v8);
          return *(CGImageRef *)(v7 + 216);
        }
        v18 = mask_create(*(_QWORD *)(v7 + 48), *(_QWORD *)(v7 + 56), *(_QWORD *)(v7 + 64), *(_QWORD *)(v7 + 64), (unint64_t)(*(_QWORD *)(v7 + 48) * *(_QWORD *)(v7 + 64) + 7) >> 3, *(CGDataProviderRef *)(v7 + 32), *(double **)(v7 + 136), *(unsigned __int8 *)(v7 + 84), 4);
      }
      else
      {
        pdf_log("CGPDFImage(%p): Creating image with subsample_factor = %d\n", (const void *)v7, v9);
        v18 = create_image_for_image(v7, *(CGColorSpace **)(v7 + 72), v9);
      }
      *(_QWORD *)(v7 + 216) = v18;
      if (!v18)
        goto LABEL_37;
      v21 = *(_QWORD *)(v7 + 48) / *((_QWORD *)v18 + 5);
      v19 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &v21);
      if (v19)
      {
        v20 = v19;
        CGImageSetProperty(*(_QWORD *)(v7 + 216), CFSTR("com.apple.CoreGraphics.SubsampleFactor"), v19);
        CFRelease(v20);
      }
      v16 = *(const void **)(v7 + 216);
      if (!v16)
        goto LABEL_37;
    }
    CFRetain(v16);
    goto LABEL_37;
  }
  return result;
}

CGImageRef create_image_for_image(uint64_t a1, CGColorSpace *a2, int a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v13;
  double *v14;
  int v15;
  int v16;
  int v17;
  CGImageRef CopyWithColorSpace;
  const void *v19;
  __CFDictionary *Mutable;
  __CFDictionary *v21;
  CGImageRef Image;
  unint64_t v23;
  uint64_t v25;
  double *v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  const void *v31;
  const void *v32;
  __CFDictionary *v33;
  __CFDictionary *v34;
  uint64_t v35;
  uint64_t v36;
  size_t v37;
  uint64_t v38;
  void **v41;
  double *v42;
  const void *v43;
  const CGFloat *v44;
  uint64_t v45;
  const void *ImageForRenderingSize;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  CGDataProvider *v51;
  const void *v52;
  CGImage *v53;
  CGColorSpace *v54;
  CGContext *v55;
  CGRect v56;

  v5 = *(_DWORD *)(a1 + 40);
  if (v5 == 2)
  {
    v13 = *(_QWORD *)(a1 + 32);
    v14 = *(double **)(a1 + 136);
    v15 = *(unsigned __int8 *)(a1 + 84);
    v16 = *(_DWORD *)(a1 + 80);
    v17 = *(unsigned __int8 *)(a1 + 120);
    if (CGImageCreateWithJPEG2000DataProvider_predicate != -1)
      dispatch_once(&CGImageCreateWithJPEG2000DataProvider_predicate, &__block_literal_global_127);
    CopyWithColorSpace = (CGImageRef)CGImageCreateWithJPEG2000DataProvider_f(v13, 0);
    if (!CopyWithColorSpace)
      return CopyWithColorSpace;
    if (CGImageCreateWithJPEG2000DataProvider_predicate_129 != -1)
      dispatch_once(&CGImageCreateWithJPEG2000DataProvider_predicate_129, &__block_literal_global_131_4760);
    v19 = (const void *)CGImageCreateWithJPEG2000DataProvider_f_128(CopyWithColorSpace);
    if (!v19 || !CFEqual(v19, CFSTR("public.jpeg-2000")))
    {
      v36 = 0;
LABEL_96:
      CFRelease(CopyWithColorSpace);
      return (CGImageRef)v36;
    }
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v21 = Mutable;
    if (Mutable)
    {
      if (!v17)
        CFDictionaryAddValue(Mutable, CFSTR("kCGImageSourceSkipAlpha"), (const void *)*MEMORY[0x1E0C9AE50]);
      CFDictionaryAddValue(v21, CFSTR("kCGImageSourceShouldCache"), (const void *)*MEMORY[0x1E0C9AE40]);
    }
    if (CGImageCreateWithJPEG2000DataProvider_predicate_137 != -1)
      dispatch_once(&CGImageCreateWithJPEG2000DataProvider_predicate_137, &__block_literal_global_139_4763);
    Image = (CGImageRef)CGImageCreateWithJPEG2000DataProvider_f_136(CopyWithColorSpace, 0, v21);
    if (v21)
      CFRelease(v21);
    CFRelease(CopyWithColorSpace);
    if (!Image)
      return 0;
    *((_DWORD *)Image + 9) = ((v15 != 0) << 24) | (v16 << 8) | *((_DWORD *)Image + 9) & 0xFEFF00FF;
    if (a2)
    {
      CopyWithColorSpace = CGImageCreateCopyWithColorSpace(Image, a2);
      CFRelease(Image);
      if (!CopyWithColorSpace)
        return CopyWithColorSpace;
      v23 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 40);
      Image = CopyWithColorSpace;
    }
    else
    {
      v23 = 0;
    }
    v41 = (void **)Image;
    v42 = v14;
    goto LABEL_75;
  }
  if (v5 == 1)
  {
    v25 = *(_QWORD *)(a1 + 32);
    v26 = *(double **)(a1 + 136);
    v27 = *(unsigned __int8 *)(a1 + 84);
    v28 = *(_DWORD *)(a1 + 80);
    v29 = *(_DWORD *)(a1 + 88);
    if (CGImageCreateWithJPEGDataProvider3_predicate != -1)
      dispatch_once(&CGImageCreateWithJPEGDataProvider3_predicate, &__block_literal_global_89);
    v30 = CGImageCreateWithJPEGDataProvider3_f(v25, 0);
    if (!v30)
      return 0;
    v31 = (const void *)v30;
    if (CGImageCreateWithJPEGDataProvider3_predicate_91 != -1)
      dispatch_once(&CGImageCreateWithJPEGDataProvider3_predicate_91, &__block_literal_global_93);
    v32 = (const void *)CGImageCreateWithJPEGDataProvider3_f_90(v31);
    if (v32 && CFEqual(v32, CFSTR("public.jpeg")))
    {
      v33 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v34 = v33;
      if (v33)
      {
        if (*MEMORY[0x1E0C9AE40])
          CFDictionarySetValue(v33, CFSTR("kCGImageSourceShouldCache"), (const void *)*MEMORY[0x1E0C9AE40]);
        if ((v29 & 0x80000000) == 0)
        {
          CGCFDictionarySetInteger(v34, CFSTR("kCGImageSourceColorTransform"), v29);
          if (a2)
            CFDictionarySetValue(v34, CFSTR("kCGImageSourceColorTransformSpace"), a2);
        }
        if (a3 >= 2)
          CGCFDictionarySetInteger(v34, CFSTR("kCGImageSourceSubsampleFactor"), a3);
      }
      if (CGImageCreateWithJPEGDataProvider3_predicate_123 != -1)
        dispatch_once(&CGImageCreateWithJPEGDataProvider3_predicate_123, &__block_literal_global_125);
      v35 = CGImageCreateWithJPEGDataProvider3_f_122(v31, 0, v34);
      if (v35)
      {
        Image = (CGImageRef)v35;
        if (v34)
          CFRelease(v34);
        CFRelease(v31);
        *((_DWORD *)Image + 9) = ((v27 != 0) << 24) | (v28 << 8) | *((_DWORD *)Image + 9) & 0xFEFF00FF;
        if (a2)
        {
          cgimage_set_decode_array((void **)Image, v26, *(_QWORD *)(*((_QWORD *)a2 + 3) + 40));
          v31 = Image;
          Image = CGImageCreateCopyWithColorSpace(Image, a2);
LABEL_54:
          CFRelease(v31);
          goto LABEL_69;
        }
        v41 = (void **)Image;
        v42 = v26;
        v23 = 0;
LABEL_75:
        cgimage_set_decode_array(v41, v42, v23);
        goto LABEL_76;
      }
      if (v34)
        CFRelease(v34);
    }
    Image = 0;
    goto LABEL_54;
  }
  if (v5)
    return 0;
  if (!a2)
    return 0;
  v6 = *((_QWORD *)a2 + 3);
  v7 = *(_QWORD *)(v6 + 40);
  if (!v7)
    return 0;
  v8 = *(_QWORD *)(a1 + 64) * v7;
  v9 = *(_QWORD *)(a1 + 48);
  if (v9 >= 0xFFFFFFFFFFFFFFF7 / v8)
    return 0;
  v10 = v8 * v9 + 7;
  v11 = *(_QWORD **)(a1 + 72);
  if (v11)
  {
    v12 = CGColorSpaceGetType(v11) == 6;
    v6 = *((_QWORD *)a2 + 3);
  }
  else
  {
    v12 = 0;
  }
  v37 = v10 >> 3;
  if ((*(_DWORD *)(v6 + 24) - 5) > 1)
  {
    LOBYTE(v38) = 0;
  }
  else
  {
    v38 = **(_QWORD **)(v6 + 88);
    if (v38)
      LOBYTE(v38) = *(_DWORD *)(*(_QWORD *)(v38 + 24) + 24) != 0;
  }
  if (v7 != 1 || v8 != 1)
    v12 = 1;
  if (v12 || (v38 & 1) != 0 || *(_QWORD *)(a1 + 128))
  {
    Image = CGImageCreate(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), v8, v37, a2, 0, *(CGDataProviderRef *)(a1 + 32), *(const CGFloat **)(a1 + 136), *(_BYTE *)(a1 + 84), (CGColorRenderingIntent)*(_DWORD *)(a1 + 80));
  }
  else
  {
    pthread_mutex_lock(&imageCacheLock);
    v52 = *(const void **)(a1 + 216);
    if (v52)
    {
      CFRetain(v52);
      Image = *(CGImageRef *)(a1 + 216);
    }
    else
    {
      v53 = CGImageCreate(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), 1uLL, v37, a2, 0, *(CGDataProviderRef *)(a1 + 32), *(const CGFloat **)(a1 + 136), *(_BYTE *)(a1 + 84), (CGColorRenderingIntent)*(_DWORD *)(a1 + 80));
      v54 = CGColorSpaceCreateWithName(CFSTR("kCGColorSpaceGenericGrayGamma2_2"));
      v55 = CGBitmapContextCreateWithData(0, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), 8uLL, 0, v54, 0, 0, 0);
      v56.size.width = (double)*(unint64_t *)(a1 + 48);
      v56.size.height = (double)*(unint64_t *)(a1 + 56);
      v56.origin.x = 0.0;
      v56.origin.y = 0.0;
      CGContextDrawImage(v55, v56, v53);
      if (v53)
        CFRelease(v53);
      Image = CGBitmapContextCreateImage(v55);
      if (v55)
        CFRelease(v55);
      CGColorSpaceRelease(v54);
      CGImageSetProperty((uint64_t)Image, CFSTR("com.apple.CoreGraphics.Is1Bit1ChannelImage"), (const void *)*MEMORY[0x1E0C9AE50]);
      CGImageSetProperty((uint64_t)Image, CFSTR("com.apple.CoreGraphics.Is1Bit1ChannelImageColorSpace"), a2);
    }
    pthread_mutex_unlock(&imageCacheLock);
  }
LABEL_69:
  if (!Image)
    return 0;
LABEL_76:
  if (*(_BYTE *)(a1 + 120) && *(_DWORD *)(a1 + 40) == 2)
  {
    if ((*((_BYTE *)Image + 39) & 4) != 0)
    {
      v43 = *(const void **)(a1 + 112);
      if (v43)
        CFRelease(v43);
      *(_QWORD *)(a1 + 112) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 120) = 0;
    }
  }
  v44 = *(const CGFloat **)(a1 + 128);
  if (v44)
  {
    CopyWithColorSpace = CGImageCreateWithMaskingColors(Image, v44);
  }
  else
  {
    v45 = *(_QWORD *)(a1 + 112);
    if (v45)
    {
      ImageForRenderingSize = (const void *)CGPDFImageCreateImageForRenderingSize(v45, 0, 0.0, 0.0);
      v47 = *(uint64_t **)(a1 + 144);
      v48 = (uint64_t)Image;
      v49 = (uint64_t)ImageForRenderingSize;
    }
    else
    {
      v50 = *(_QWORD *)(a1 + 104);
      if (!v50)
      {
LABEL_93:
        CopyWithColorSpace = Image;
        goto LABEL_94;
      }
      ImageForRenderingSize = (const void *)CGPDFImageCreateImageForRenderingSize(v50, 0, 0.0, 0.0);
      v48 = (uint64_t)Image;
      v49 = (uint64_t)ImageForRenderingSize;
      v47 = 0;
    }
    CopyWithColorSpace = CGImageCreateWithMaskAndMatte(v48, v49, v47);
    if (ImageForRenderingSize)
      CFRelease(ImageForRenderingSize);
  }
  if (!CopyWithColorSpace)
    goto LABEL_93;
  CFRelease(Image);
LABEL_94:
  v51 = *(CGDataProvider **)(a1 + 96);
  if (v51)
  {
    v36 = CGImageCreateWithEPSDataProvider(v51, (uint64_t)CopyWithColorSpace);
    if (v36)
      goto LABEL_96;
  }
  return CopyWithColorSpace;
}

void CGContextDrawConicGradient(CGContextRef c, CGGradientRef gradient, CGPoint center, CGFloat angle)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  double y;
  double x;
  unsigned int (*v16)(__n128, __n128, double);
  _QWORD *v17;
  CGFunctionRef Function;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  CGShading *Conic;
  CGContextRef v26;

  if (!c)
  {
    v26 = 0;
LABEL_11:
    handle_invalid_context((char)"CGContextDrawConicGradient", (uint64_t)v26, v4, v5, v6, v7, v8, v9);
    return;
  }
  if (*((_DWORD *)c + 4) != 1129601108)
  {
    v26 = c;
    goto LABEL_11;
  }
  if (gradient)
  {
    v12 = *((_QWORD *)c + 5);
    if (v12)
    {
      y = center.y;
      x = center.x;
      v16 = *(unsigned int (**)(__n128, __n128, double))(v12 + 120);
      if (!v16 || v16((__n128)center, *(__n128 *)&center.y, angle) == 1006)
      {
        v17 = (_QWORD *)*((_QWORD *)gradient + 3);
        Function = CGGradientGetFunction((uint64_t)gradient, (uint64_t)gradient, v4, v5, v6, v7, v8, v9);
        Conic = (CGShading *)CGShadingCreateConic(v17, Function, x, y, angle, v19, v20, v21, v22, v23, v24);
        CGContextDrawShading(c, Conic);
        if (Conic)
          CFRelease(Conic);
      }
    }
  }
}

char *CGSScanconverterAddLineToPoint(char *result, double a2, double a3)
{
  double *v5;
  double v6;
  double v7;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  double v14;
  double v15;

  if (fabs(a2) != INFINITY && fabs(a3) != INFINITY)
  {
    v5 = (double *)result;
    v6 = *((double *)result + 1);
    v7 = *((double *)result + 2);
    if (v6 != a2 || v7 != a3)
    {
      if (v6 >= a2)
      {
        if (v6 <= a2)
        {
LABEL_16:
          v5[1] = a2;
          v5[2] = a3;
          v14 = fmin(v5[6], a3);
          v5[5] = fmin(v5[5], a2);
          v5[6] = v14;
          v15 = fmax(v5[8], a3);
          v5[7] = fmax(v5[7], a2);
          v5[8] = v15;
          return result;
        }
        v9 = 0.0;
        if (v6 - a2 >= 0.00001)
          v9 = (a3 - v7) / (a2 - v6);
        v10 = a2;
        v11 = v6;
        v12 = a3;
        v13 = -1.0;
      }
      else
      {
        v9 = 0.0;
        if (a2 - v6 >= 0.00001)
          v9 = (a3 - v7) / (a2 - v6);
        v10 = v6;
        v11 = a2;
        v12 = v7;
        v13 = 1.0;
      }
      result = add_quadratic((char **)result, v10, v11, v13, 0.0, v9, v12);
      goto LABEL_16;
    }
  }
  return result;
}

char *add_quadratic(char **a1, float a2, float a3, float a4, float a5, float a6, float a7)
{
  char *v14;
  unint64_t v15;
  unint64_t v16;
  char *result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float *v22;
  char v23;

  v14 = a1[10];
  v15 = (unint64_t)a1[11];
  v16 = (unint64_t)(v14 + 1);
  result = *a1;
  if (v15 < (unint64_t)(v14 + 1))
  {
    if (2 * v15 <= v16)
      v18 = (uint64_t)(v14 + 1);
    else
      v18 = 2 * v15;
    result = (char *)malloc_type_realloc(result, 24 * v18, 0x1000040504FFAC1uLL);
    *a1 = result;
    if (!result)
      _CGHandleAssert("grow", 98, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Fonts/CGSScanConverter.c", "sc->quadratics != NULL", "quadratics missing", v19, v20, v21, v23);
    a1[11] = (char *)v18;
    v14 = a1[10];
    v16 = (unint64_t)(v14 + 1);
  }
  a1[10] = (char *)v16;
  v22 = (float *)&result[24 * (_QWORD)v14];
  *v22 = a2;
  v22[1] = a3;
  v22[2] = a4;
  v22[3] = a5;
  v22[4] = a6;
  v22[5] = a7;
  return result;
}

char *approximateMonotonicCube(char *result, int a2, double a3, double a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8, double a9, double a10)
{
  double v10;
  double v12;
  double v13;
  double v14;
  double v15;
  char *v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  float v29;
  double v30;
  BOOL v31;
  double v32;
  double v33;
  double v39;
  double v40;
  double v41;
  double v42;
  BOOL v43;
  BOOL v44;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v70;
  float64x2_t v71;
  double v72;
  double v73;
  double v74;
  double v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  double *v81;
  double v82;
  float v83;
  double v84;
  double v85;
  double v86;
  BOOL v87;
  BOOL v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  float v94;
  float v95;
  BOOL v96;
  double v97;
  float v98;
  float v99;
  float v100;
  float v101;
  double v102;
  float v103;
  float v104;
  float v105;
  float v106;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  float64_t v118;

  if (a2 <= 500)
  {
    v10 = a10;
    v12 = a8.n128_f64[0];
    v13 = a7.n128_f64[0];
    v14 = a6.n128_f64[0];
    v15 = a5.n128_f64[0];
    v18 = result;
    v108 = a9 * a9;
    v19 = (a2 + 1);
    v20 = 0.5;
    v21 = 2.0;
    v22 = 0.25;
    v23 = 3.0;
    v24 = -3.0;
    v25 = 4.0;
    v26 = 12.0;
    v27 = 8.0;
    v28 = 6.0;
    while (1)
    {
      v29 = *((float *)v18 + 18);
      v30 = (float)(v29 * v29);
      v31 = (a4 + v14 * -2.0 + v12) * (a4 + v14 * -2.0 + v12) + (a3 + v15 * -2.0 + v13) * (a3 + v15 * -2.0 + v13) > v30
         || (v14 + v12 * -2.0 + v10) * (v14 + v12 * -2.0 + v10) + (v15 + v13 * -2.0 + a9) * (v15 + v13 * -2.0 + a9) > v30;
      if (!v31)
        break;
      if (vabdd_f64(a9, a3) + vabdd_f64(v10, a4) <= 60.0)
      {
        v46 = 1.0 / (a3 - a9);
        v117 = v14 + v12 * v21;
        v115 = v12 + v10;
        v47 = v46
            * (v46
             * (v46
              * ((a9 * (v117 + a4 * v24)
                - (v12 + v10 + a4 * -2.0) * v15
                - a3 * (v12 + v14 * v21 + v10 * v24)
                + v13 * (a4 + v14 + v10 * -2.0))
               * 0.9)));
        v48 = v46 * (a4 + v47 * (a9 * a9 - a3 * a3) - v10);
        v111 = v48 + v47 * a3;
        v49 = (v15 * v25 + a3 * v25 + v13) * 0.111111111;
        v112 = v15 * v26;
        v50 = (v15 * v26 + a3 * v27 + v13 * v28 + a9) * 0.037037037;
        v51 = (v14 * v25 + a4 * v25 + v12) * 0.111111111;
        v52 = v14 * v26;
        v53 = (v14 * v26 + a4 * v27 + v12 * 6.0 + v10) * 0.037037037;
        v109 = a4 - a3 * v111;
        v55 = v47 * -0.333333333;
        v110 = v48;
        v56 = v48 * -0.5;
        v57 = v29;
        if (fabs(((v50 * (a4 + v51 * 6.0 + v53 * 10.0 + (v14 + a4 * v21) * 0.333333333 * v23)- ((v14 + a4 * v21) * 0.333333333 * 6.0 + a4 * 10.0 + v51 * v23 + v53) * a3+ (v15 + a3 * v21) * 0.333333333 * v23 * (-(v51 - a4 * v21) - v53)+ v49 * -3.0 * (-((v14 + a4 * v21) * 0.333333333 - v53 * v21) - a4))* 0.05+ v47 * -0.333333333 * (a3 * -(a3 * a3) + v50 * v50 * v50)+ v48 * -0.5 * (v50 * v50 - a3 * a3)- v109 * (v50 - a3))/ sqrt((v53 - a4) * (v53 - a4) + (v50 - a3) * (v50 - a3))) <= v57)
        {
          v58 = (a3 + v15 * 6.0 + v13 * 12.0 + a9 * 8.0) * 0.037037037;
          v59 = (v14 + v12 * 4.0 + v10 * 4.0) * 0.111111111;
          v60 = (a4 + v14 * 6.0 + v12 * 12.0 + v10 * 8.0) * 0.037037037;
          v61 = (v12 + v10 * v21) * 0.333333333;
          v62 = a9 * (v60 + v61 * 6.0 + v10 * 10.0 + v59 * v23) - v58 * (v59 * 6.0 + v60 * 10.0 + v61 * 3.0 + v10);
          v23 = 3.0;
          v22 = 0.25;
          v63 = v62 + (v15 + v13 * 4.0 + a9 * 4.0) * 0.111111111 * 3.0 * (-(v61 - v60 * 2.0) - v10);
          v21 = 2.0;
          v64 = v63 + (v13 + a9 * 2.0) * 0.333333333 * -3.0 * (-(v59 - v10 * 2.0) - v60);
          v65 = (v52 + a4 * 4.0 + v12 * 9.0 + v10 * 2.0) * 0.037037037;
          v66 = (v14 * 9.0 + a4 * 2.0 + v12 * 12.0 + v10 * 4.0) * 0.037037037;
          v20 = 0.5;
          v67 = -(a4 + -a3 * v111);
          v54 = v50 * v50;
          v31 = fabs(((v58 * (v53 + v66 * 6.0 + v60 * 10.0 + v65 * 3.0)- v50 * (v60 + v65 * 6.0 + v53 * 10.0 + v66 * 3.0)+ (v112 + a3 * 4.0 + v13 * 9.0 + a9 * 2.0) * 0.037037037 * 3.0 * (-(v66 - v53 * 2.0) - v60)+ (v15 * 9.0 + a3 * 2.0 + v13 * 12.0 + a9 * 4.0) * 0.037037037 * -3.0 * (-(v65 - v60 * 2.0) - v53))* 0.05+ v55 * (v58 * v58 * v58 - v54 * v50)+ v56 * -(v54 - v58 * v58)+ v67 * (v58 - v50))/ sqrt((v60 - v53) * (v60 - v53) + (v58 - v50) * (v58 - v50))) <= v57;
          v68 = fabs((v64 * 0.05 + v55 * (v108 * a9 - v58 * v58 * v58) + v56 * -(v58 * v58 - a9 * a9) + v67 * (a9 - v58))/ sqrt((v10 - v60) * (v10 - v60) + (a9 - v58) * (a9 - v58)));
          if (v31 && v68 <= v57)
          {
            v85 = a9 - a3;
            v86 = v56 / v47;
            v87 = v56 / v47 > a3 && v86 < a9;
            if (v87 || (v86 > a9 ? (v88 = v86 < a3) : (v88 = 0), v89 = a4, v88))
              v89 = v109 + v86 * 0.5 * v110;
            v90 = fmin(a3, a9);
            v91 = fmax(a3, a9);
            v92 = fmin(fmin(a4, v10), v89);
            v93 = fmax(fmax(a4, v10), v89);
            v96 = v85 > 0.0;
            v87 = v85 < 0.0;
            v97 = 0.0;
            if (v87)
              v97 = -1.0;
            if (v96)
              v97 = 1.0;
            v98 = v97;
            v99 = v47;
            v100 = v110 + (v47 + v47) * v90;
            v101 = v109 + v90 * v47 * v90 + v110 * v90;
            v94 = v90;
            v95 = v91;
            result = add_quadratic((char **)v18, v94, v95, v98, v99, v100, v101);
            v102 = *((double *)v18 + 8);
            v81 = (double *)(v18 + 64);
            v103 = fmin(*(v81 - 3), v90);
            v104 = fmin(*(v81 - 2), v92);
            *(v81 - 3) = v103;
            *(v81 - 2) = v104;
            v105 = fmax(*(v81 - 1), v91);
            *(v81 - 1) = v105;
            v84 = fmax(v102, v93);
            goto LABEL_89;
          }
        }
        a5.n128_f64[0] = (a3 + v15) * v20;
        a7.n128_f64[0] = (a3 + v15 * v21 + v13) * v22;
        v32 = (a3 + v15 * v23 + v13 * v23 + a9) * 0.125;
        a6.n128_f64[0] = (a4 + v14) * v20;
        a8.n128_f64[0] = (a4 + v14 * v21 + v12) * v22;
        v33 = (a4 + v14 * v23 + v12 * v23 + v10) * 0.125;
        if (v33 != v10
          || v32 != a9
          || a5.n128_f64[0] != v15
          || a6.n128_f64[0] != v14
          || a7.n128_f64[0] != v13
          || a8.n128_f64[0] != v12)
        {
          v70 = (a3 + v15 * v23 + v13 * v23 + a9) * 0.125;
          v114 = v33;
          result = (char *)approximateMonotonicCube(v18, v19, a3, a4, a5, a6, a7, a8);
          v33 = v114;
          v32 = v70;
          v10 = a10;
          v23 = 3.0;
          v22 = 0.25;
          v21 = 2.0;
          v20 = 0.5;
        }
        v39 = (v15 + v13 * v21 + a9) * v22;
        v40 = (v13 + a9) * v20;
        v41 = (v117 + v10) * v22;
        v42 = v115 * v20;
        v24 = -3.0;
        if (v115 * v20 == v12 && v40 == v13)
        {
          v25 = 4.0;
          v26 = 12.0;
          v27 = 8.0;
          v28 = 6.0;
          if (v41 == v14 && v39 == v15 && v32 == a3 && v33 == a4)
            return result;
        }
        else
        {
          v25 = 4.0;
          v26 = 12.0;
          v27 = 8.0;
          v28 = 6.0;
        }
      }
      else
      {
        a5.n128_f64[0] = (a3 + v15) * v20;
        a7.n128_f64[0] = (a3 + v15 * v21 + v13) * v22;
        v32 = (a3 + v15 * v23 + v13 * v23 + a9) * 0.125;
        a6.n128_f64[0] = (a4 + v14) * v20;
        a8.n128_f64[0] = (a4 + v14 * v21 + v12) * v22;
        v33 = (a4 + v14 * v23 + v12 * v23 + v10) * 0.125;
        if (v33 != v10
          || v32 != a9
          || a5.n128_f64[0] != v15
          || a6.n128_f64[0] != v14
          || a7.n128_f64[0] != v13
          || a8.n128_f64[0] != v12)
        {
          v116 = (a3 + v15 * v23 + v13 * v23 + a9) * 0.125;
          v113 = (a4 + v14 * v23 + v12 * v23 + v10) * 0.125;
          result = (char *)approximateMonotonicCube(v18, v19, a3, a4, a5, a6, a7, a8);
          v33 = v113;
          v32 = v116;
          v28 = 6.0;
          v27 = 8.0;
          v26 = 12.0;
          v25 = 4.0;
          v24 = -3.0;
          v23 = 3.0;
          v22 = 0.25;
          v21 = 2.0;
          v20 = 0.5;
        }
        v39 = (v15 + v13 * v21 + a9) * v22;
        v40 = (v13 + a9) * v20;
        v41 = (v14 + v12 * v21 + v10) * v22;
        v42 = (v12 + v10) * v20;
        if (v42 == v12 && v40 == v13)
        {
          v43 = v41 == v14 && v39 == v15;
          v44 = v43 && v32 == a3;
          if (v44 && v33 == a4)
            return result;
        }
      }
      v19 = (v19 + 1);
      v12 = v42;
      v13 = v40;
      v14 = v41;
      v15 = v39;
      a4 = v33;
      a3 = v32;
      if ((_DWORD)v19 == 502)
        return result;
    }
    if (a3 != a9 || a4 != v10)
    {
      v71.f64[0] = fmin(a3, a9);
      v72 = fmax(a3, a9);
      v73 = 0.0;
      v74 = a9 - a3;
      if (a3 == a9)
        v75 = 0.0;
      else
        v75 = (v10 - a4) / (a9 - a3);
      if (v71.f64[0] != v72)
      {
        if (v74 < 0.0)
          v73 = -1.0;
        if (v74 > 0.0)
          v73 = 1.0;
        v78 = v73;
        v79 = v75;
        v80 = v10 - v75 * (a9 - v71.f64[0]);
        v118 = v71.f64[0];
        v76 = v71.f64[0];
        v77 = v72;
        result = add_quadratic((char **)v18, v76, v77, v78, 0.0, v79, v80);
        v71.f64[0] = v118;
      }
      v82 = *((double *)v18 + 8);
      v81 = (double *)(v18 + 64);
      v71.f64[1] = fmin(a4, v10);
      *(float64x2_t *)(v81 - 3) = vcvtq_f64_f32(vcvt_f32_f64(vminnmq_f64(*(float64x2_t *)(v81 - 3), v71)));
      v83 = fmax(*(v81 - 1), v72);
      *(v81 - 1) = v83;
      v84 = fmax(v82, fmax(a4, v10));
LABEL_89:
      v106 = v84;
      *v81 = v106;
    }
  }
  return result;
}

double *CGSScanconverterGetBoundingBox(double *result, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  double v5;
  double v6;
  double v7;
  double v8;
  unsigned int v9;
  unsigned int v10;

  v5 = result[7];
  v6 = result[5];
  if (v5 <= v6 || (v7 = result[8], v8 = result[6], v7 <= v8))
  {
    *a5 = 0;
    *a4 = 0;
    *a3 = 0;
    *a2 = 0;
  }
  else
  {
    v9 = vcvtmd_s64_f64(v6);
    v10 = vcvtmd_s64_f64(v8);
    *a2 = v9 - 1;
    *a3 = v10 - 2;
    *a4 = vcvtpd_s64_f64(v5) - v9 + 2;
    *a5 = vcvtpd_s64_f64(v7) - v10 + 3;
  }
  return result;
}

_WORD *delta_create(uint64_t a1, _DWORD *a2, _DWORD *a3, unint64_t *a4)
{
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unint64_t v14;
  size_t v15;
  _WORD *result;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  float *v23;
  float v24;
  float v25;
  int v26;
  signed int v27;
  float v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  char *v33;
  float v34;
  int v35;
  _WORD *v36;
  _WORD *v37;
  _WORD *v38;
  _WORD *v39;
  float v40;
  float v41;
  float v42;
  float v43;
  int v44;
  signed int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  int v50;
  uint64_t v51;
  int v52;
  _WORD *v53;
  _WORD *v54;
  int v55;
  int v56;
  int v57;
  unsigned int v60;
  int v61;
  _WORD *v62;
  _WORD *v63;
  _WORD *v64;
  _WORD *v67;
  uint64_t v68;
  uint64_t v69;
  int v71;
  uint64_t v72;
  int v73;
  _WORD *v74;
  _WORD *v75;
  int v76;
  int v77;
  int v78;
  int v81;
  _WORD *v82;
  _WORD *v83;
  _WORD *v84;
  _WORD *v85;
  int v86;
  _WORD *v87;
  _WORD *v88;
  _WORD *v89;
  _WORD *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  v96 = 0;
  v97 = 0;
  CGSScanconverterGetBoundingBox((double *)a1, (_DWORD *)&v97 + 1, &v97, (_DWORD *)&v96 + 1, &v96);
  v8 = HIDWORD(v96);
  if (SHIDWORD(v96) >= 0x8000)
    return 0;
  v9 = v96;
  if ((int)v96 >= 0x8000)
    return 0;
  v10 = SHIDWORD(v97);
  v11 = v97 >= 0 ? HIDWORD(v97) : -HIDWORD(v97);
  if (v11 > 0x8000)
    return 0;
  v12 = v97;
  v13 = (int)v97 >= 0 ? v97 : -(int)v97;
  if (v13 > 0x8000)
    return 0;
  v14 = (int)v96 + 2;
  v15 = (8 * SHIDWORD(v96) + 34) & 0xFFFFFFFFFFFFFFF0;
  if (v15 >= 0xFFFFFFFFFFFFFFFFLL / v14)
    return 0;
  v94 = (8 * SHIDWORD(v96) + 34) & 0xFFFFFFFFFFFFFFF0;
  result = malloc_type_calloc((int)v96 + 2, v15, 0xE69EAACEuLL);
  if (result)
  {
    v17 = *(_QWORD *)(a1 + 80);
    if (v17)
    {
      v18 = 0;
      v19 = (unint64_t)result + v94 * v14 - 2;
      v20 = *(double *)a1;
      v95 = -4 * v10;
      v21 = (uint64_t)(int)v94 >> 1;
      v93 = (uint64_t)&result[-4 * v10 + 7];
      v22 = 2 * ((int)v94 >> 1);
      do
      {
        v23 = (float *)(*(_QWORD *)&v20 + 24 * v18);
        v24 = v23[3];
        v25 = v23[4];
        v26 = vcvtps_s32_f32(*v23 * 4.0);
        v27 = vcvtps_s32_f32(v23[1] * 4.0);
        if (v24 == 0.0 && v25 == 0.0)
        {
          v28 = *(float *)(*(_QWORD *)&v20 + 24 * v18 + 20);
          if (v28 <= 16383.0)
          {
            v29 = vcvtmd_s64_f64(v28 * 65536.0 + 0.5);
            v30 = ((int)(v29 + 0x8000) >> 16) - 2;
            v31 = (uint64_t)&result[(v30 - v12) * (int)v21 + 7 + v26 + v95];
            v32 = v29 - (v30 << 16);
            v33 = (char *)&vKernel
                + 12 * (((int)(v32 + 512) >> 10) & 0x3F)
                + 2 * ((((int)(v32 + 512) >> 10) + 192) >> 6);
            v34 = *(float *)(*(_QWORD *)&v20 + 24 * v18 + 8);
            if ((v32 - 65024) >> 17)
            {
              v60 = (((int)(v32 + 512) >> 10) + 192) >> 6;
              if (v34 >= 0.0)
              {
                if (v26 < v27)
                {
                  do
                  {
                    v86 = 4;
                    v87 = (_WORD *)v31;
                    v88 = v33;
                    do
                    {
                      v89 = v87;
                      if (v60 + v86 - 4 <= 5 && v87 >= result && (unint64_t)v87 <= v19)
                        *v87 += *v88;
                      --v88;
                      v87 = (_WORD *)((char *)v87 + v22);
                      --v86;
                    }
                    while (v86);
                    v60 -= 4;
                    if (v60 <= 5)
                    {
                      v92 = &v89[v21];
                      if (v92 >= result && (unint64_t)v92 <= v19)
                        *v92 += *v88;
                    }
                    ++v26;
                    v31 += 2;
                  }
                  while (v26 != v27);
                }
              }
              else if (v26 < v27)
              {
                do
                {
                  v61 = 4;
                  v62 = (_WORD *)v31;
                  v63 = v33;
                  do
                  {
                    v64 = v62;
                    if (v60 + v61 - 4 <= 5 && v62 >= result && (unint64_t)v62 <= v19)
                      *v62 -= *v63;
                    --v63;
                    v62 = (_WORD *)((char *)v62 + v22);
                    --v61;
                  }
                  while (v61);
                  v60 -= 4;
                  if (v60 <= 5)
                  {
                    v67 = &v64[v21];
                    if (v67 >= result && (unint64_t)v67 <= v19)
                      *v67 -= *v63;
                  }
                  ++v26;
                  v31 += 2;
                }
                while (v26 != v27);
              }
            }
            else if (v34 >= 0.0)
            {
              if (v26 < v27)
              {
                do
                {
                  v81 = 4;
                  v82 = (_WORD *)v31;
                  v83 = v33;
                  do
                  {
                    v84 = v82;
                    if (v82 >= result && (unint64_t)v82 <= v19)
                      *v82 += *v83;
                    --v83;
                    v82 = (_WORD *)((char *)v82 + v22);
                    --v81;
                  }
                  while (v81);
                  v85 = &v84[v21];
                  if (v85 >= result && (unint64_t)v85 <= v19)
                    *v85 += *v83;
                  ++v26;
                  v31 += 2;
                }
                while (v26 != v27);
              }
            }
            else if (v26 < v27)
            {
              do
              {
                v35 = 4;
                v36 = (_WORD *)v31;
                v37 = v33;
                do
                {
                  v38 = v36;
                  if (v36 >= result && (unint64_t)v36 <= v19)
                    *v36 -= *v37;
                  --v37;
                  v36 = (_WORD *)((char *)v36 + v22);
                  --v35;
                }
                while (v35);
                v39 = &v38[v21];
                if (v39 >= result && (unint64_t)v39 <= v19)
                  *v39 -= *v37;
                ++v26;
                v31 += 2;
              }
              while (v26 != v27);
            }
          }
          goto LABEL_140;
        }
        v40 = -(float)(*v23 - (float)((float)v26 * 0.25));
        v41 = (float)((float)(v25 * v40) + (float)((float)(v40 * v40) * v24))
            + *(float *)(*(_QWORD *)&v20 + 24 * v18 + 20);
        if (v41 <= 16383.0)
        {
          v42 = v24 * 0.125;
          if ((float)(v24 * 0.125) <= 16383.0)
          {
            v43 = (float)((float)(v25 * 0.25) + (float)(v24 * 0.0625)) + (float)(v40 * (float)(v24 * 0.5));
            if (v43 <= 16383.0)
            {
              v44 = vcvtmd_s64_f64(v41 * 65536.0 + 0.5);
              v45 = vcvtmd_s64_f64(v43 * 65536.0 + 0.5);
              v46 = vcvtmd_s64_f64(v42 * 65536.0 + 0.5);
              if (*(float *)(*(_QWORD *)&v20 + 24 * v18 + 8) >= 0.0)
              {
                if (v26 >= v27)
                  goto LABEL_140;
                v68 = v26;
                v69 = v93 + 2 * v26;
                while (2)
                {
                  if (v44 > 0x3FFFFFFF || v45 > 0x3FFFFFFF)
                    goto LABEL_140;
                  v71 = ((v44 + 0x8000) >> 16) - 2;
                  v72 = (v71 - v12) * (int)v21;
                  v73 = v44 - (v71 << 16);
                  v74 = (_WORD *)((char *)&vKernel
                                + 12 * (((v73 + 512) >> 10) & 0x3F)
                                + 2 * ((((v73 + 512) >> 10) + 192) >> 6));
                  if ((v73 - 65024) < 0x20000)
                  {
                    v75 = (_WORD *)(v69 + 2 * v72);
                    v76 = 4;
                    do
                    {
                      if (v75 >= result && (unint64_t)v75 <= v19)
                        *v75 += *v74;
                      --v74;
                      v75 = (_WORD *)((char *)v75 + v22);
                      --v76;
                    }
                    while (v76);
                    goto LABEL_108;
                  }
                  v77 = (((v73 + 512) >> 10) + 192) >> 6;
                  v78 = 4;
                  v75 = (_WORD *)(v69 + 2 * v72);
                  do
                  {
                    if ((v77 + v78 - 4) <= 5 && v75 >= result && (unint64_t)v75 <= v19)
                      *v75 += *v74;
                    --v74;
                    v75 = (_WORD *)((char *)v75 + v22);
                    --v78;
                  }
                  while (v78);
                  if ((v77 - 10) >= 0xFFFFFFFA)
                  {
LABEL_108:
                    if (v75 >= result && (unint64_t)v75 <= v19)
                      *v75 += *v74;
                  }
                  ++v68;
                  v44 += v45;
                  v45 += v46;
                  v69 += 2;
                  if ((_DWORD)v68 == v27)
                    goto LABEL_140;
                  continue;
                }
              }
              if (v26 < v27)
              {
                v47 = v26;
                v48 = v93 + 2 * v26;
                do
                {
                  if (v44 > 0x3FFFFFFF || v45 > 0x3FFFFFFF)
                    break;
                  v50 = ((v44 + 0x8000) >> 16) - 2;
                  v51 = (v50 - v12) * (int)v21;
                  v52 = v44 - (v50 << 16);
                  v53 = (_WORD *)((char *)&vKernel
                                + 12 * (((v52 + 512) >> 10) & 0x3F)
                                + 2 * ((((v52 + 512) >> 10) + 192) >> 6));
                  if ((v52 - 65024) >= 0x20000)
                  {
                    v56 = (((v52 + 512) >> 10) + 192) >> 6;
                    v57 = 4;
                    v54 = (_WORD *)(v48 + 2 * v51);
                    do
                    {
                      if ((v56 + v57 - 4) <= 5 && v54 >= result && (unint64_t)v54 <= v19)
                        *v54 -= *v53;
                      --v53;
                      v54 = (_WORD *)((char *)v54 + v22);
                      --v57;
                    }
                    while (v57);
                    if ((v56 - 10) < 0xFFFFFFFA)
                      goto LABEL_63;
                  }
                  else
                  {
                    v54 = (_WORD *)(v48 + 2 * v51);
                    v55 = 4;
                    do
                    {
                      if (v54 >= result && (unint64_t)v54 <= v19)
                        *v54 -= *v53;
                      --v53;
                      v54 = (_WORD *)((char *)v54 + v22);
                      --v55;
                    }
                    while (v55);
                  }
                  if (v54 >= result && (unint64_t)v54 <= v19)
                    *v54 -= *v53;
LABEL_63:
                  ++v47;
                  v44 += v45;
                  v45 += v46;
                  v48 += 2;
                }
                while ((_DWORD)v47 != v27);
              }
            }
          }
        }
LABEL_140:
        ++v18;
      }
      while (v18 != v17);
    }
    *a2 = v8;
    *a3 = v9;
    *a4 = v94;
  }
  return result;
}

uint64_t *VEC::template_mark_pixelmask_row<(CGCompositeOperation)0,_RGBA16_t>(uint64_t *result, int8x16_t **a2, unint64_t *a3, char **a4, int a5, int a6, double a7, double a8, int8x8_t a9, double a10, double a11, double a12, uint32x4_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17)
{
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int8x16_t *v20;
  char *v21;
  uint64_t v22;
  int8x16_t v23;
  uint64_t v24;
  uint32x4_t v25;
  int32x4_t v26;
  unsigned __int32 v27;
  int8x16_t *v28;
  int8x16_t *v29;
  int8x16_t *v30;
  int8x16_t *v31;
  uint64_t v32;
  int64_t v33;
  unint64_t v34;
  uint16x8_t v35;
  uint16x8_t v36;
  uint32x4_t v37;
  uint32x4_t v38;
  int8x16_t *v39;
  int8x16_t *v40;
  int8x16_t *v41;
  int8x16_t *v42;
  int64_t v43;
  int64_t v44;
  uint64_t v45;
  uint32x4_t v46;
  int32x4_t v47;
  uint16x4_t v48;
  uint32x4_t v49;
  unint64_t v50;
  uint64_t v51;

  v17 = a17;
  v18 = *result;
  v19 = *a3;
  v20 = *a2;
  v21 = *a4;
  if (a17 < 2)
    goto LABEL_33;
  v22 = 2 * a6;
  v23.i64[0] = -1;
  v23.i64[1] = -1;
  v24 = 16 * a6;
  a9.i32[1] = 0;
  v25 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  v26.i64[0] = 0x800000008000;
  v26.i64[1] = 0x800000008000;
  while (1)
  {
    v27 = *(unsigned __int16 *)v21;
    if (!*(_WORD *)v21)
    {
      v39 = (int8x16_t *)&v21[v17];
      v40 = (int8x16_t *)v21;
      do
        v41 = v40++;
      while (v40 <= v39 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v41)) & 0x80) != 0);
      do
      {
        v42 = v41;
        v41 = (int8x16_t *)((char *)v41 + 4);
      }
      while (v41 <= v39 && !v42->i32[0]);
      if (v42 < v39)
      {
        while (!v42->i8[0])
        {
          v42 = (int8x16_t *)((char *)v42 + 1);
          if (v42 >= v39)
          {
            v42 = (int8x16_t *)&v21[v17];
            break;
          }
        }
      }
      v43 = (char *)v42 - v21;
      v44 = ((char *)v42 - v21) * a6;
      v18 += 8 * v44;
      v20 = (int8x16_t *)((char *)v20 + 8 * v44);
      v21 += v44;
      v17 -= v43;
      goto LABEL_30;
    }
    if (v27 != 0xFFFF)
      break;
    v28 = (int8x16_t *)&v21[v17];
    v29 = (int8x16_t *)v21;
    do
      v30 = v29++;
    while (v29 <= v28 && (vminvq_u8((uint8x16_t)vceqq_s8(*v30, v23)) & 0x80) != 0);
    do
    {
      v31 = v30;
      v30 = (int8x16_t *)((char *)v30 + 4);
    }
    while (v30 <= v28 && v31->i32[0] == -1);
    if (v31 < v28)
    {
      while (v31->u8[0] == 255)
      {
        v31 = (int8x16_t *)((char *)v31 + 1);
        if (v31 >= v28)
        {
          v31 = (int8x16_t *)&v21[v17];
          break;
        }
      }
    }
    v32 = 0;
    v33 = (char *)v31 - v21;
    v34 = (char *)v31 - v21;
    do
    {
      *(int8x16_t *)((char *)v20 + v32) = 0uLL;
      v21 += v22;
      v34 -= 2;
      v32 += v24;
    }
    while (v34 > 1);
    v20 = (int8x16_t *)((char *)v20 + v32);
    v18 += v32;
    v17 = v17 - v33 + v34;
LABEL_30:
    if (v17 <= 1)
      goto LABEL_33;
  }
  while (1)
  {
    v35 = (uint16x8_t)vrev16q_s8(*v20);
    a13.i32[0] = v27;
    v36 = (uint16x8_t)vqtbl1q_s8((int8x16_t)a13, (int8x16_t)xmmword_1850049E0);
    v37 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v35.i8, *(uint16x4_t *)v36.i8), v25), v26);
    v38 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16(v35, v36), v25), v26);
    a13 = vsraq_n_u32(v38, v38, 0x10uLL);
    *v20 = vrev16q_s8((int8x16_t)vqsubq_u16(v35, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v37, v37, 0x10uLL), 0x10uLL), a13, 0x10uLL)));
    v21 += v22;
    v17 -= 2;
    if (v17 < 2)
      break;
    v27 = *(unsigned __int16 *)v21;
    v18 += v24;
    v20 = (int8x16_t *)((char *)v20 + v24);
    if ((unsigned __int16)(v27 - 1) >= 0xFFFEu)
      goto LABEL_30;
  }
  v18 += v24;
  v20 = (int8x16_t *)((char *)v20 + v24);
LABEL_33:
  v45 = v17 + a16;
  if (v45)
  {
    v46 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v47.i64[0] = 0x800000008000;
    v47.i64[1] = 0x800000008000;
    do
    {
      if (*v21)
      {
        a9.i32[0] = *v21;
        v48 = (uint16x4_t)vrev16_s8(*(int8x8_t *)v20->i8);
        v49 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(v48, (uint16x4_t)vdup_lane_s8(a9, 0)), v46), v47);
        a9 = vrev16_s8((int8x8_t)vqsub_u16(v48, vqshrn_n_u32(vsraq_n_u32(v49, v49, 0x10uLL), 0x10uLL)));
        v20->i64[0] = *(uint64_t *)&a9;
      }
      v50 = v18 + 8 * a6;
      v21 += a6;
      if (v50 >= v19)
        v51 = -(uint64_t)a5;
      else
        v51 = 0;
      v18 = v50 + 8 * v51;
      v20 = (int8x16_t *)((char *)v20 + 8 * a6);
      --v45;
    }
    while (v45);
  }
  *result = v18;
  *a3 = v19;
  *a2 = v20;
  *a4 = v21;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)1,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, double a7, double a8, uint32x4_t a9, double a10, double a11, double a12, int8x16_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17)
{
  unint64_t v17;
  int8x8_t *v18;
  unint64_t v19;
  int8x8_t *v20;
  char *v21;
  uint64_t v22;
  int8x16_t v23;
  uint64_t v24;
  int32x4_t v25;
  unsigned __int32 v26;
  int8x16_t *v27;
  int8x16_t *v28;
  int8x16_t *v29;
  int8x16_t *v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  int8x16_t *v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  int64_t v38;
  int64_t v39;
  uint64_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  uint32x4_t v44;
  uint32x4_t v45;
  uint32x4_t v46;
  uint32x4_t v47;
  uint64_t v48;
  uint32x4_t v49;
  int32x4_t v50;
  int8x8_t v51;
  int8x8_t *v52;
  uint64_t v53;

  v17 = a17;
  v18 = *result;
  v19 = *a3;
  v20 = *a2;
  v21 = *a4;
  if (a17 < 2)
    goto LABEL_34;
  v22 = 2 * a6;
  v23.i64[0] = -1;
  v23.i64[1] = -1;
  v24 = 16 * a6;
  a9 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  v25.i64[0] = 0x800000008000;
  v25.i64[1] = 0x800000008000;
  while (1)
  {
    v26 = *(unsigned __int16 *)v21;
    if (!*(_WORD *)v21)
    {
      v34 = (int8x16_t *)&v21[v17];
      v35 = (int8x16_t *)v21;
      do
        v36 = v35++;
      while (v35 <= v34 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v36)) & 0x80) != 0);
      do
      {
        v37 = v36;
        v36 = (int8x16_t *)((char *)v36 + 4);
      }
      while (v36 <= v34 && !v37->i32[0]);
      if (v37 < v34)
      {
        while (!v37->i8[0])
        {
          v37 = (int8x16_t *)((char *)v37 + 1);
          if (v37 >= v34)
          {
            v37 = (int8x16_t *)&v21[v17];
            break;
          }
        }
      }
      v38 = (char *)v37 - v21;
      v39 = ((char *)v37 - v21) * a6;
      v18 += v39;
      v20 += v39;
      v21 += v39;
      v17 -= v38;
      goto LABEL_31;
    }
    if (v26 != 0xFFFF)
      break;
    v27 = (int8x16_t *)&v21[v17];
    v28 = (int8x16_t *)v21;
    do
      v29 = v28++;
    while (v28 <= v27 && (vminvq_u8((uint8x16_t)vceqq_s8(*v29, v23)) & 0x80) != 0);
    do
    {
      v30 = v29;
      v29 = (int8x16_t *)((char *)v29 + 4);
    }
    while (v29 <= v27 && v30->i32[0] == -1);
    if (v30 < v27)
    {
      while (v30->u8[0] == 255)
      {
        v30 = (int8x16_t *)((char *)v30 + 1);
        if (v30 >= v27)
        {
          v30 = (int8x16_t *)&v21[v17];
          break;
        }
      }
    }
    v31 = 0;
    v32 = (char *)v30 - v21;
    v33 = (char *)v30 - v21;
    do
    {
      *(_OWORD *)&v20->i8[v31] = *(_OWORD *)&v18->i8[v31];
      v21 += v22;
      v33 -= 2;
      v31 += v24;
    }
    while (v33 > 1);
    v20 = (int8x8_t *)((char *)v20 + v31);
    v18 = (int8x8_t *)((char *)v18 + v31);
    v17 = v17 - v32 + v33;
LABEL_31:
    if (v17 <= 1)
      goto LABEL_34;
  }
  v40 = 0;
  while (1)
  {
    v41 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)&v18->i8[v40]);
    v42 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)&v20->i8[v40]);
    a13.i32[0] = v26;
    a13 = vqtbl1q_s8(a13, (int8x16_t)xmmword_1850049E0);
    v43 = (uint16x8_t)vmvnq_s8(a13);
    v44 = vqaddq_u32(vmull_u16(*(uint16x4_t *)v41.i8, *(uint16x4_t *)a13.i8), vmull_u16(*(uint16x4_t *)v42.i8, *(uint16x4_t *)v43.i8));
    v45 = vqaddq_u32(vmull_high_u16(v41, (uint16x8_t)a13), vmull_high_u16(v42, v43));
    v46 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v44, a9), v25);
    v47 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v45, a9), v25);
    *(int8x16_t *)&v20->i8[v40] = vrev16q_s8((int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v46, v46, 0x10uLL), 0x10uLL), vsraq_n_u32(v47, v47, 0x10uLL), 0x10uLL));
    v21 += v22;
    v17 -= 2;
    if (v17 < 2)
      break;
    v26 = *(unsigned __int16 *)v21;
    v40 += v24;
    if ((unsigned __int16)(v26 - 1) >= 0xFFFEu)
    {
      v18 = (int8x8_t *)((char *)v18 + v40);
      v20 = (int8x8_t *)((char *)v20 + v40);
      goto LABEL_31;
    }
  }
  v18 = (int8x8_t *)((char *)v18 + v24 + v40);
  v20 = (int8x8_t *)((char *)v20 + v24 + v40);
LABEL_34:
  v48 = v17 + a16;
  if (v48)
  {
    v49 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v50.i64[0] = 0x800000008000;
    v50.i64[1] = 0x800000008000;
    do
    {
      if (*v21)
      {
        a9.i32[0] = *v21;
        v51 = vdup_lane_s8(*(int8x8_t *)a9.i8, 0);
        a9 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vmull_u16((uint16x4_t)vrev16_s8(*v18), (uint16x4_t)v51), vmull_u16((uint16x4_t)vrev16_s8(*v20), (uint16x4_t)vmvn_s8(v51))), v49), v50);
        *(int8x8_t *)a9.i8 = vrev16_s8((int8x8_t)vqshrn_n_u32(vsraq_n_u32(a9, a9, 0x10uLL), 0x10uLL));
        *v20 = *(int8x8_t *)a9.i8;
      }
      v52 = &v18[a6];
      v21 += a6;
      if ((unint64_t)v52 >= v19)
        v53 = -(uint64_t)a5;
      else
        v53 = 0;
      v18 = &v52[v53];
      v20 += a6;
      --v48;
    }
    while (v48);
  }
  *result = v18;
  *a3 = v19;
  *a2 = v20;
  *a4 = v21;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)2,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, double a7, double a8, int32x4_t a9, double a10, double a11, double a12, double a13, int8x16_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  unint64_t v18;
  int8x8_t *v19;
  unint64_t v20;
  int8x8_t *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint32x4_t v25;
  int8x16_t v26;
  unsigned __int32 v27;
  int8x16_t *v28;
  int8x16_t *v29;
  int8x16_t *v30;
  int8x16_t *v31;
  uint64_t v32;
  int64_t v33;
  unint64_t v34;
  int8x16_t v35;
  uint16x8_t v36;
  uint32x4_t v37;
  uint32x4_t v38;
  int8x16_t *v39;
  int8x16_t *v40;
  int8x16_t *v41;
  int8x16_t *v42;
  int64_t v43;
  int64_t v44;
  uint64_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  int16x8_t v49;
  uint32x4_t v50;
  uint32x4_t v51;
  uint32x4_t v52;
  uint32x4_t v53;
  int16x4_t v54;
  uint16x8_t v55;
  uint32x4_t v56;
  uint32x4_t v57;
  uint64_t v58;
  uint32x4_t v59;
  int32x4_t v60;
  uint32x4_t v61;
  uint16x4_t v62;
  uint16x4_t v63;
  int8x8_t *v64;
  uint64_t v65;

  v18 = a18;
  v19 = *result;
  v20 = *a3;
  v21 = *a2;
  v22 = *a4;
  if (a18 < 2)
    goto LABEL_34;
  v23 = 2 * a6;
  v24 = 16 * a6;
  v25 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  a9.i64[0] = 0x800000008000;
  a9.i64[1] = 0x800000008000;
  v26.i64[0] = -1;
  v26.i64[1] = -1;
  while (1)
  {
    v27 = *(unsigned __int16 *)v22;
    if (!*(_WORD *)v22)
    {
      v39 = (int8x16_t *)&v22[v18];
      v40 = (int8x16_t *)v22;
      do
        v41 = v40++;
      while (v40 <= v39 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v41)) & 0x80) != 0);
      do
      {
        v42 = v41;
        v41 = (int8x16_t *)((char *)v41 + 4);
      }
      while (v41 <= v39 && !v42->i32[0]);
      if (v42 < v39)
      {
        while (!v42->i8[0])
        {
          v42 = (int8x16_t *)((char *)v42 + 1);
          if (v42 >= v39)
          {
            v42 = (int8x16_t *)&v22[v18];
            break;
          }
        }
      }
      v43 = (char *)v42 - v22;
      v44 = ((char *)v42 - v22) * a6;
      v19 += v44;
      v21 += v44;
      v22 += v44;
      v18 -= v43;
      goto LABEL_31;
    }
    if (v27 != 0xFFFF)
      break;
    v28 = (int8x16_t *)&v22[v18];
    v29 = (int8x16_t *)v22;
    do
      v30 = v29++;
    while (v29 <= v28 && (vminvq_u8((uint8x16_t)vceqq_s8(*v30, v26)) & 0x80) != 0);
    do
    {
      v31 = v30;
      v30 = (int8x16_t *)((char *)v30 + 4);
    }
    while (v30 <= v28 && v31->i32[0] == -1);
    if (v31 < v28)
    {
      while (v31->u8[0] == 255)
      {
        v31 = (int8x16_t *)((char *)v31 + 1);
        if (v31 >= v28)
        {
          v31 = (int8x16_t *)&v22[v18];
          break;
        }
      }
    }
    v32 = 0;
    v33 = (char *)v31 - v22;
    v34 = (char *)v31 - v22;
    do
    {
      v35 = vrev16q_s8(*(int8x16_t *)&v19->i8[v32]);
      v36 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)&v21->i8[v32]);
      a14 = vbicq_s8(v35, (int8x16_t)vceqzq_s16((int16x8_t)vqtbl1q_s8(v35, (int8x16_t)xmmword_1850049F0)));
      v37 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*(uint16x4_t *)v36.i8, *(uint16x4_t *)v35.i8, 3), v25), a9);
      v38 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_laneq_u16(v36, (uint16x8_t)v35, 7), v25), a9);
      *(int8x16_t *)&v21->i8[v32] = vrev16q_s8((int8x16_t)vqaddq_u16((uint16x8_t)a14, vqsubq_u16(v36, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v37, v37, 0x10uLL), 0x10uLL), vsraq_n_u32(v38, v38, 0x10uLL), 0x10uLL))));
      v22 += v23;
      v34 -= 2;
      v32 += v24;
    }
    while (v34 > 1);
    v21 = (int8x8_t *)((char *)v21 + v32);
    v19 = (int8x8_t *)((char *)v19 + v32);
    v18 = v18 - v33 + v34;
LABEL_31:
    if (v18 <= 1)
      goto LABEL_34;
  }
  v45 = 0;
  while (1)
  {
    v46 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)&v19->i8[v45]);
    v47 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)&v21->i8[v45]);
    a14.i32[0] = v27;
    v48 = (uint16x8_t)vqtbl1q_s8(a14, (int8x16_t)xmmword_1850049E0);
    v49 = (int16x8_t)vmull_u16(*(uint16x4_t *)v46.i8, *(uint16x4_t *)v48.i8);
    v50 = vmull_high_u16(v46, v48);
    v51 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32((uint32x4_t)v49, v25), a9);
    *(uint16x4_t *)v51.i8 = vqshrn_n_u32(vsraq_n_u32(v51, v51, 0x10uLL), 0x10uLL);
    v52 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v50, v25), a9);
    v53 = vsraq_n_u32(v52, v52, 0x10uLL);
    *(int16x4_t *)v49.i8 = vdup_lane_s16(*(int16x4_t *)v51.i8, 3);
    v54 = (int16x4_t)vqshrn_n_u32(v53, 0x10uLL);
    v49.i64[1] = vdupq_lane_s16(v54, 3).u64[0];
    v55 = (uint16x8_t)vbicq_s8((int8x16_t)vqshrn_high_n_u32(*(uint16x4_t *)v51.i8, v53, 0x10uLL), (int8x16_t)vceqzq_s16(v49));
    v56 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*(uint16x4_t *)v47.i8, *(uint16x4_t *)v51.i8, 3), v25), a9);
    v57 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_lane_u16(v47, (uint16x4_t)v54, 3), v25), a9);
    a14 = (int8x16_t)vsraq_n_u32(v57, v57, 0x10uLL);
    *(int8x16_t *)&v21->i8[v45] = vrev16q_s8((int8x16_t)vqaddq_u16(v55, vqsubq_u16(v47, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v56, v56, 0x10uLL), 0x10uLL), (uint32x4_t)a14, 0x10uLL))));
    v22 += v23;
    v18 -= 2;
    if (v18 < 2)
      break;
    v27 = *(unsigned __int16 *)v22;
    v45 += v24;
    if ((unsigned __int16)(v27 - 1) >= 0xFFFEu)
    {
      v19 = (int8x8_t *)((char *)v19 + v45);
      v21 = (int8x8_t *)((char *)v21 + v45);
      goto LABEL_31;
    }
  }
  v19 = (int8x8_t *)((char *)v19 + v24 + v45);
  v21 = (int8x8_t *)((char *)v21 + v24 + v45);
LABEL_34:
  v58 = v18 + a17;
  if (v58)
  {
    v59 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v60.i64[0] = 0x800000008000;
    v60.i64[1] = 0x800000008000;
    do
    {
      if (*v22)
      {
        a9.i32[0] = *v22;
        v61 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vrev16_s8(*v19), (uint16x4_t)vdup_lane_s8(*(int8x8_t *)a9.i8, 0)), v59), v60);
        *(uint16x4_t *)v61.i8 = vqshrn_n_u32(vsraq_n_u32(v61, v61, 0x10uLL), 0x10uLL);
        v62 = (uint16x4_t)vrev16_s8(*v21);
        v63 = (uint16x4_t)vbic_s8(*(int8x8_t *)v61.i8, (int8x8_t)vceqz_s16(vdup_lane_s16(*(int16x4_t *)v61.i8, 3)));
        a9 = vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(v62, *(uint16x4_t *)v61.i8, 3), v59), v60);
        *(int8x8_t *)a9.i8 = vrev16_s8((int8x8_t)vqadd_u16(v63, vqsub_u16(v62, vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a9, (uint32x4_t)a9, 0x10uLL), 0x10uLL))));
        *v21 = *(int8x8_t *)a9.i8;
      }
      v64 = &v19[a6];
      v22 += a6;
      if ((unint64_t)v64 >= v20)
        v65 = -(uint64_t)a5;
      else
        v65 = 0;
      v19 = &v64[v65];
      v21 += a6;
      --v58;
    }
    while (v58);
  }
  *result = v19;
  *a3 = v20;
  *a2 = v21;
  *a4 = v22;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)3,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, double a8, double a9, double a10, int32x4_t a11, double a12, double a13, double a14, uint32x4_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  unint64_t v18;
  int8x8_t *v19;
  unint64_t v20;
  int8x8_t *v21;
  char *v22;
  unsigned int v23;
  int8x16_t v24;
  int8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  uint32x4_t v28;
  int32x4_t v29;
  unsigned __int32 v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  uint16x8_t v38;
  uint16x8_t v39;
  uint32x4_t v40;
  uint32x4_t v41;
  uint32x4_t v42;
  int8x16_t *v43;
  int8x16_t *v44;
  int8x16_t *v45;
  int8x16_t *v46;
  int64_t v47;
  int64_t v48;
  uint64_t v49;
  uint16x8_t v50;
  int8x16_t v51;
  uint16x8_t v52;
  uint32x4_t v53;
  uint32x4_t v54;
  uint16x8_t v55;
  uint32x4_t v56;
  uint32x4_t v57;
  uint32x4_t v58;
  uint32x4_t v59;
  uint64_t v60;
  int8x8_t v61;
  __int16 v62;
  uint32x4_t v63;
  int32x4_t v64;
  uint16x4_t v65;
  int8x8_t v66;
  uint32x4_t v67;
  int8x8_t *v68;
  uint64_t v69;

  v18 = a18;
  v19 = *result;
  v20 = *a3;
  v21 = *a2;
  v22 = *a4;
  if (a18 < 2)
    goto LABEL_37;
  if (a7)
    v23 = 0;
  else
    v23 = -1;
  v24.i64[0] = 0xFFFF000000000000;
  v24.i64[1] = 0xFFFF000000000000;
  v25 = vandq_s8((int8x16_t)vdupq_n_s16(v23), v24);
  v26 = 2 * a6;
  v27 = 16 * a6;
  v28 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  v29.i64[0] = 0x800000008000;
  v29.i64[1] = 0x800000008000;
  a11.i64[0] = -1;
  a11.i64[1] = -1;
  while (1)
  {
    v30 = *(unsigned __int16 *)v22;
    if (!*(_WORD *)v22)
    {
      v43 = (int8x16_t *)&v22[v18];
      v44 = (int8x16_t *)v22;
      do
        v45 = v44++;
      while (v44 <= v43 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v45)) & 0x80) != 0);
      do
      {
        v46 = v45;
        v45 = (int8x16_t *)((char *)v45 + 4);
      }
      while (v45 <= v43 && !v46->i32[0]);
      if (v46 < v43)
      {
        while (!v46->i8[0])
        {
          v46 = (int8x16_t *)((char *)v46 + 1);
          if (v46 >= v43)
          {
            v46 = (int8x16_t *)&v22[v18];
            break;
          }
        }
      }
      v47 = (char *)v46 - v22;
      v48 = ((char *)v46 - v22) * a6;
      v19 += v48;
      v21 += v48;
      v22 += v48;
      v18 -= v47;
      goto LABEL_34;
    }
    if (v30 != 0xFFFF)
      break;
    v31 = (int8x16_t *)&v22[v18];
    v32 = (int8x16_t *)v22;
    do
      v33 = v32++;
    while (v32 <= v31 && (vminvq_u8((uint8x16_t)vceqq_s8(*v33, (int8x16_t)a11)) & 0x80) != 0);
    do
    {
      v34 = v33;
      v33 = (int8x16_t *)((char *)v33 + 4);
    }
    while (v33 <= v31 && v34->i32[0] == -1);
    if (v34 < v31)
    {
      while (v34->u8[0] == 255)
      {
        v34 = (int8x16_t *)((char *)v34 + 1);
        if (v34 >= v31)
        {
          v34 = (int8x16_t *)&v22[v18];
          break;
        }
      }
    }
    v35 = 0;
    v36 = (char *)v34 - v22;
    v37 = (char *)v34 - v22;
    do
    {
      v38 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)&v21->i8[v35]);
      v39 = (uint16x8_t)vorrq_s8(v25, vrev16q_s8(*(int8x16_t *)&v19->i8[v35]));
      a15 = vmull_lane_u16(*(uint16x4_t *)v39.i8, *(uint16x4_t *)v38.i8, 3);
      v40 = vmull_high_laneq_u16(v39, v38, 7);
      v41 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(a15, v28), v29);
      v42 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v40, v28), v29);
      *(int8x16_t *)&v21->i8[v35] = vrev16q_s8((int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v41, v41, 0x10uLL), 0x10uLL), vsraq_n_u32(v42, v42, 0x10uLL), 0x10uLL));
      v22 += v26;
      v37 -= 2;
      v35 += v27;
    }
    while (v37 > 1);
    v21 = (int8x8_t *)((char *)v21 + v35);
    v19 = (int8x8_t *)((char *)v19 + v35);
    v18 = v18 - v36 + v37;
LABEL_34:
    if (v18 <= 1)
      goto LABEL_37;
  }
  v49 = 0;
  while (1)
  {
    v50 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)&v21->i8[v49]);
    a15.i32[0] = v30;
    v51 = vqtbl1q_s8((int8x16_t)a15, (int8x16_t)xmmword_1850049E0);
    v52 = (uint16x8_t)vorrq_s8(v25, vrev16q_s8(*(int8x16_t *)&v19->i8[v49]));
    v53 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v52.i8, *(uint16x4_t *)v51.i8), v28), v29);
    v54 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16(v52, (uint16x8_t)v51), v28), v29);
    v55 = (uint16x8_t)vmvnq_s8(v51);
    v56 = vqaddq_u32(vmull_u16(*(uint16x4_t *)v50.i8, *(uint16x4_t *)v55.i8), vmull_lane_u16(vqshrn_n_u32(vsraq_n_u32(v53, v53, 0x10uLL), 0x10uLL), *(uint16x4_t *)v50.i8, 3));
    a15 = vmull_high_u16(v50, v55);
    v57 = vqaddq_u32(a15, vmull_laneq_u16(vqshrn_n_u32(vsraq_n_u32(v54, v54, 0x10uLL), 0x10uLL), v50, 7));
    v58 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v56, v28), v29);
    v59 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v57, v28), v29);
    *(int8x16_t *)&v21->i8[v49] = vrev16q_s8((int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v58, v58, 0x10uLL), 0x10uLL), vsraq_n_u32(v59, v59, 0x10uLL), 0x10uLL));
    v22 += v26;
    v18 -= 2;
    if (v18 < 2)
      break;
    v30 = *(unsigned __int16 *)v22;
    v49 += v27;
    if ((unsigned __int16)(v30 - 1) >= 0xFFFEu)
    {
      v19 = (int8x8_t *)((char *)v19 + v49);
      v21 = (int8x8_t *)((char *)v21 + v49);
      goto LABEL_34;
    }
  }
  v19 = (int8x8_t *)((char *)v19 + v27 + v49);
  v21 = (int8x8_t *)((char *)v21 + v27 + v49);
LABEL_37:
  v60 = v18 + a17;
  if (v60)
  {
    v61.i32[0] = 0;
    v61.i16[2] = 0;
    if (a7)
      v62 = 0;
    else
      v62 = -1;
    v61.i16[3] = v62;
    v63 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v64.i64[0] = 0x800000008000;
    v64.i64[1] = 0x800000008000;
    do
    {
      if (*v22)
      {
        a11.i32[0] = *v22;
        v65 = (uint16x4_t)vrev16_s8(*v21);
        v66 = vdup_lane_s8(*(int8x8_t *)a11.i8, 0);
        v67 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(v61, vrev16_s8(*v19)), (uint16x4_t)v66), v63), v64);
        a11 = vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vmull_u16(v65, (uint16x4_t)vmvn_s8(v66)), vmull_lane_u16(vqshrn_n_u32(vsraq_n_u32(v67, v67, 0x10uLL), 0x10uLL), v65, 3)), v63), v64);
        *(int8x8_t *)a11.i8 = vrev16_s8((int8x8_t)vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a11, (uint32x4_t)a11, 0x10uLL), 0x10uLL));
        *v21 = *(int8x8_t *)a11.i8;
      }
      v68 = &v19[a6];
      v22 += a6;
      if ((unint64_t)v68 >= v20)
        v69 = -(uint64_t)a5;
      else
        v69 = 0;
      v19 = &v68[v69];
      v21 += a6;
      --v60;
    }
    while (v60);
  }
  *result = v19;
  *a3 = v20;
  *a2 = v21;
  *a4 = v22;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)4,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, double a8, double a9, double a10, int32x4_t a11, double a12, double a13, double a14, int8x16_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  unint64_t v18;
  int8x8_t *v19;
  unint64_t v20;
  int8x8_t *v21;
  char *v22;
  unsigned int v23;
  int8x16_t v24;
  int8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  uint32x4_t v28;
  int32x4_t v29;
  unsigned __int32 v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  uint16x8_t v38;
  uint16x8_t v39;
  uint32x4_t v40;
  uint32x4_t v41;
  int8x16_t *v42;
  int8x16_t *v43;
  int8x16_t *v44;
  int8x16_t *v45;
  int64_t v46;
  int64_t v47;
  uint64_t v48;
  int8x16_t v49;
  int8x16_t v50;
  uint16x8_t v51;
  uint32x4_t v52;
  uint32x4_t v53;
  uint16x8_t v54;
  uint32x4_t v55;
  uint32x4_t v56;
  uint32x4_t v57;
  uint64_t v58;
  int8x8_t v59;
  __int16 v60;
  uint32x4_t v61;
  int32x4_t v62;
  int8x8_t v63;
  int8x8_t v64;
  uint32x4_t v65;
  int8x8_t *v66;
  uint64_t v67;

  v18 = a18;
  v19 = *result;
  v20 = *a3;
  v21 = *a2;
  v22 = *a4;
  if (a18 < 2)
    goto LABEL_37;
  if (a7)
    v23 = 0;
  else
    v23 = -1;
  v24.i64[0] = 0xFFFF000000000000;
  v24.i64[1] = 0xFFFF000000000000;
  v25 = vandq_s8((int8x16_t)vdupq_n_s16(v23), v24);
  v26 = 2 * a6;
  v27 = 16 * a6;
  v28 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  v29.i64[0] = 0x800000008000;
  v29.i64[1] = 0x800000008000;
  a11.i64[0] = -1;
  a11.i64[1] = -1;
  while (1)
  {
    v30 = *(unsigned __int16 *)v22;
    if (!*(_WORD *)v22)
    {
      v42 = (int8x16_t *)&v22[v18];
      v43 = (int8x16_t *)v22;
      do
        v44 = v43++;
      while (v43 <= v42 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v44)) & 0x80) != 0);
      do
      {
        v45 = v44;
        v44 = (int8x16_t *)((char *)v44 + 4);
      }
      while (v44 <= v42 && !v45->i32[0]);
      if (v45 < v42)
      {
        while (!v45->i8[0])
        {
          v45 = (int8x16_t *)((char *)v45 + 1);
          if (v45 >= v42)
          {
            v45 = (int8x16_t *)&v22[v18];
            break;
          }
        }
      }
      v46 = (char *)v45 - v22;
      v47 = ((char *)v45 - v22) * a6;
      v19 += v47;
      v21 += v47;
      v22 += v47;
      v18 -= v46;
      goto LABEL_34;
    }
    if (v30 != 0xFFFF)
      break;
    v31 = (int8x16_t *)&v22[v18];
    v32 = (int8x16_t *)v22;
    do
      v33 = v32++;
    while (v32 <= v31 && (vminvq_u8((uint8x16_t)vceqq_s8(*v33, (int8x16_t)a11)) & 0x80) != 0);
    do
    {
      v34 = v33;
      v33 = (int8x16_t *)((char *)v33 + 4);
    }
    while (v33 <= v31 && v34->i32[0] == -1);
    if (v34 < v31)
    {
      while (v34->u8[0] == 255)
      {
        v34 = (int8x16_t *)((char *)v34 + 1);
        if (v34 >= v31)
        {
          v34 = (int8x16_t *)&v22[v18];
          break;
        }
      }
    }
    v35 = 0;
    v36 = (char *)v34 - v22;
    v37 = (char *)v34 - v22;
    do
    {
      v38 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)&v21->i8[v35]);
      v39 = (uint16x8_t)vorrq_s8(v25, vrev16q_s8(*(int8x16_t *)&v19->i8[v35]));
      v40 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*(uint16x4_t *)v39.i8, *(uint16x4_t *)v38.i8, 3), v28), v29);
      v41 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_laneq_u16(v39, v38, 7), v28), v29);
      a15 = (int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v40, v40, 0x10uLL), 0x10uLL), vsraq_n_u32(v41, v41, 0x10uLL), 0x10uLL);
      *(int8x16_t *)&v21->i8[v35] = vrev16q_s8((int8x16_t)vqsubq_u16(v39, (uint16x8_t)a15));
      v22 += v26;
      v37 -= 2;
      v35 += v27;
    }
    while (v37 > 1);
    v21 = (int8x8_t *)((char *)v21 + v35);
    v19 = (int8x8_t *)((char *)v19 + v35);
    v18 = v18 - v36 + v37;
LABEL_34:
    if (v18 <= 1)
      goto LABEL_37;
  }
  v48 = 0;
  while (1)
  {
    v49 = vrev16q_s8(*(int8x16_t *)&v21->i8[v48]);
    a15.i32[0] = v30;
    v50 = vqtbl1q_s8(a15, (int8x16_t)xmmword_1850049E0);
    v51 = (uint16x8_t)vorrq_s8(v25, vrev16q_s8(*(int8x16_t *)&v19->i8[v48]));
    v52 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v51.i8, *(uint16x4_t *)v50.i8), v28), v29);
    v53 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16(v51, (uint16x8_t)v50), v28), v29);
    a15 = vmvnq_s8(v50);
    v54 = (uint16x8_t)vmvnq_s8(v49);
    v55 = vqaddq_u32(vmull_high_u16((uint16x8_t)v49, (uint16x8_t)a15), vmull_laneq_u16(vqshrn_n_u32(vsraq_n_u32(v53, v53, 0x10uLL), 0x10uLL), v54, 7));
    v56 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vmull_u16(*(uint16x4_t *)v49.i8, *(uint16x4_t *)a15.i8), vmull_lane_u16(vqshrn_n_u32(vsraq_n_u32(v52, v52, 0x10uLL), 0x10uLL), *(uint16x4_t *)v54.i8, 3)), v28), v29);
    v57 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v55, v28), v29);
    *(int8x16_t *)&v21->i8[v48] = vrev16q_s8((int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v56, v56, 0x10uLL), 0x10uLL), vsraq_n_u32(v57, v57, 0x10uLL), 0x10uLL));
    v22 += v26;
    v18 -= 2;
    if (v18 < 2)
      break;
    v30 = *(unsigned __int16 *)v22;
    v48 += v27;
    if ((unsigned __int16)(v30 - 1) >= 0xFFFEu)
    {
      v19 = (int8x8_t *)((char *)v19 + v48);
      v21 = (int8x8_t *)((char *)v21 + v48);
      goto LABEL_34;
    }
  }
  v19 = (int8x8_t *)((char *)v19 + v27 + v48);
  v21 = (int8x8_t *)((char *)v21 + v27 + v48);
LABEL_37:
  v58 = v18 + a17;
  if (v58)
  {
    v59.i32[0] = 0;
    v59.i16[2] = 0;
    if (a7)
      v60 = 0;
    else
      v60 = -1;
    v59.i16[3] = v60;
    v61 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v62.i64[0] = 0x800000008000;
    v62.i64[1] = 0x800000008000;
    do
    {
      if (*v22)
      {
        a11.i32[0] = *v22;
        v63 = vrev16_s8(*v21);
        v64 = vdup_lane_s8(*(int8x8_t *)a11.i8, 0);
        v65 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(v59, vrev16_s8(*v19)), (uint16x4_t)v64), v61), v62);
        a11 = vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vmull_u16((uint16x4_t)v63, (uint16x4_t)vmvn_s8(v64)), vmull_lane_u16(vqshrn_n_u32(vsraq_n_u32(v65, v65, 0x10uLL), 0x10uLL), (uint16x4_t)vmvn_s8(v63), 3)), v61), v62);
        *(int8x8_t *)a11.i8 = vrev16_s8((int8x8_t)vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a11, (uint32x4_t)a11, 0x10uLL), 0x10uLL));
        *v21 = *(int8x8_t *)a11.i8;
      }
      v66 = &v19[a6];
      v22 += a6;
      if ((unint64_t)v66 >= v20)
        v67 = -(uint64_t)a5;
      else
        v67 = 0;
      v19 = &v66[v67];
      v21 += a6;
      --v58;
    }
    while (v58);
  }
  *result = v19;
  *a3 = v20;
  *a2 = v21;
  *a4 = v22;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)5,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, double a7, double a8, int32x4_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13)
{
  unint64_t v13;
  int8x8_t *v14;
  unint64_t v15;
  int8x8_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint32x4_t v20;
  int32x4_t v21;
  __int32 v22;
  int8x16_t *v23;
  int8x16_t *v24;
  int8x16_t *v25;
  int8x16_t *v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  uint32x4_t v32;
  uint32x4_t v33;
  uint16x8_t v34;
  uint32x4_t v35;
  uint32x4_t v36;
  uint32x4_t v37;
  uint32x4_t v38;
  int8x16_t *v39;
  int8x16_t *v40;
  int8x16_t *v41;
  int8x16_t *v42;
  int64_t v43;
  int64_t v44;
  uint64_t v45;
  int8x16_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint32x4_t v50;
  uint32x4_t v51;
  uint32x4_t v52;
  uint32x4_t v53;
  uint32x4_t v54;
  uint32x4_t v55;
  uint16x8_t v56;
  uint32x4_t v57;
  uint32x4_t v58;
  uint32x4_t v59;
  uint32x4_t v60;
  uint64_t v61;
  uint32x4_t v62;
  int32x4_t v63;
  uint16x4_t v64;
  uint32x4_t v65;
  uint32x4_t v66;
  int8x8_t *v67;
  uint64_t v68;

  v13 = a13;
  v14 = *result;
  v15 = *a3;
  v16 = *a2;
  v17 = *a4;
  if (a13 < 2)
    goto LABEL_34;
  v18 = 2 * a6;
  v19 = 16 * a6;
  v20 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  v21.i64[0] = 0x800000008000;
  v21.i64[1] = 0x800000008000;
  a9.i64[0] = -1;
  a9.i64[1] = -1;
  while (1)
  {
    v22 = *(unsigned __int16 *)v17;
    if (!*(_WORD *)v17)
    {
      v39 = (int8x16_t *)&v17[v13];
      v40 = (int8x16_t *)v17;
      do
        v41 = v40++;
      while (v40 <= v39 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v41)) & 0x80) != 0);
      do
      {
        v42 = v41;
        v41 = (int8x16_t *)((char *)v41 + 4);
      }
      while (v41 <= v39 && !v42->i32[0]);
      if (v42 < v39)
      {
        while (!v42->i8[0])
        {
          v42 = (int8x16_t *)((char *)v42 + 1);
          if (v42 >= v39)
          {
            v42 = (int8x16_t *)&v17[v13];
            break;
          }
        }
      }
      v43 = (char *)v42 - v17;
      v44 = ((char *)v42 - v17) * a6;
      v14 += v44;
      v16 += v44;
      v17 += v44;
      v13 -= v43;
      goto LABEL_31;
    }
    if (v22 != 0xFFFF)
      break;
    v23 = (int8x16_t *)&v17[v13];
    v24 = (int8x16_t *)v17;
    do
      v25 = v24++;
    while (v24 <= v23 && (vminvq_u8((uint8x16_t)vceqq_s8(*v25, (int8x16_t)a9)) & 0x80) != 0);
    do
    {
      v26 = v25;
      v25 = (int8x16_t *)((char *)v25 + 4);
    }
    while (v25 <= v23 && v26->i32[0] == -1);
    if (v26 < v23)
    {
      while (v26->u8[0] == 255)
      {
        v26 = (int8x16_t *)((char *)v26 + 1);
        if (v26 >= v23)
        {
          v26 = (int8x16_t *)&v17[v13];
          break;
        }
      }
    }
    v27 = 0;
    v28 = (char *)v26 - v17;
    v29 = (char *)v26 - v17;
    do
    {
      v30 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)&v14->i8[v27]);
      v31 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)&v16->i8[v27]);
      v32 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*(uint16x4_t *)v31.i8, *(uint16x4_t *)v30.i8, 3), v20), v21);
      v33 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_laneq_u16(v31, v30, 7), v20), v21);
      v34 = vqsubq_u16(v31, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v32, v32, 0x10uLL), 0x10uLL), vsraq_n_u32(v33, v33, 0x10uLL), 0x10uLL));
      v35 = vmull_lane_u16(*(uint16x4_t *)v30.i8, *(uint16x4_t *)v31.i8, 3);
      v36 = vmull_high_laneq_u16(v30, v31, 7);
      v37 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v35, v20), v21);
      v38 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v36, v20), v21);
      *(int8x16_t *)&v16->i8[v27] = vrev16q_s8((int8x16_t)vqaddq_u16(v34, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v37, v37, 0x10uLL), 0x10uLL), vsraq_n_u32(v38, v38, 0x10uLL), 0x10uLL)));
      v17 += v18;
      v29 -= 2;
      v27 += v19;
    }
    while (v29 > 1);
    v16 = (int8x8_t *)((char *)v16 + v27);
    v14 = (int8x8_t *)((char *)v14 + v27);
    v13 = v13 - v28 + v29;
LABEL_31:
    if (v13 <= 1)
      goto LABEL_34;
  }
  v45 = 0;
  while (1)
  {
    v46 = *(int8x16_t *)&v16->i8[v45];
    v47 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)&v14->i8[v45]);
    v48 = (uint16x8_t)vrev16q_s8(v46);
    v46.i32[0] = v22;
    v49 = (uint16x8_t)vqtbl1q_s8(v46, (int8x16_t)xmmword_1850049E0);
    v50 = vmull_u16(*(uint16x4_t *)v47.i8, *(uint16x4_t *)v49.i8);
    v51 = vmull_high_u16(v47, v49);
    v52 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v50, v20), v21);
    *(uint16x4_t *)v52.i8 = vqshrn_n_u32(vsraq_n_u32(v52, v52, 0x10uLL), 0x10uLL);
    v53 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v51, v20), v21);
    *(uint16x4_t *)v53.i8 = vqshrn_n_u32(vsraq_n_u32(v53, v53, 0x10uLL), 0x10uLL);
    v54 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*(uint16x4_t *)v48.i8, *(uint16x4_t *)v52.i8, 3), v20), v21);
    v55 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_lane_u16(v48, *(uint16x4_t *)v53.i8, 3), v20), v21);
    v56 = vqsubq_u16(v48, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v54, v54, 0x10uLL), 0x10uLL), vsraq_n_u32(v55, v55, 0x10uLL), 0x10uLL));
    v57 = vmull_lane_u16(*(uint16x4_t *)v52.i8, *(uint16x4_t *)v48.i8, 3);
    v58 = vmull_laneq_u16(*(uint16x4_t *)v53.i8, v48, 7);
    v59 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v57, v20), v21);
    v60 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v58, v20), v21);
    *(int8x16_t *)&v16->i8[v45] = vrev16q_s8((int8x16_t)vqaddq_u16(v56, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v59, v59, 0x10uLL), 0x10uLL), vsraq_n_u32(v60, v60, 0x10uLL), 0x10uLL)));
    v17 += v18;
    v13 -= 2;
    if (v13 < 2)
      break;
    v22 = *(unsigned __int16 *)v17;
    v45 += v19;
    if ((unsigned __int16)(v22 - 1) >= 0xFFFEu)
    {
      v14 = (int8x8_t *)((char *)v14 + v45);
      v16 = (int8x8_t *)((char *)v16 + v45);
      goto LABEL_31;
    }
  }
  v14 = (int8x8_t *)((char *)v14 + v19 + v45);
  v16 = (int8x8_t *)((char *)v16 + v19 + v45);
LABEL_34:
  v61 = v13 + a12;
  if (v61)
  {
    v62 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v63.i64[0] = 0x800000008000;
    v63.i64[1] = 0x800000008000;
    do
    {
      if (*v17)
      {
        a9.i32[0] = *v17;
        v64 = (uint16x4_t)vrev16_s8(*v16);
        v65 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vrev16_s8(*v14), (uint16x4_t)vdup_lane_s8(*(int8x8_t *)a9.i8, 0)), v62), v63);
        *(uint16x4_t *)v65.i8 = vqshrn_n_u32(vsraq_n_u32(v65, v65, 0x10uLL), 0x10uLL);
        v66 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(v64, *(uint16x4_t *)v65.i8, 3), v62), v63);
        a9 = vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*(uint16x4_t *)v65.i8, v64, 3), v62), v63);
        *(int8x8_t *)a9.i8 = vrev16_s8((int8x8_t)vqadd_u16(vqsub_u16(v64, vqshrn_n_u32(vsraq_n_u32(v66, v66, 0x10uLL), 0x10uLL)), vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a9, (uint32x4_t)a9, 0x10uLL), 0x10uLL)));
        *v16 = *(int8x8_t *)a9.i8;
      }
      v67 = &v14[a6];
      v17 += a6;
      if ((unint64_t)v67 >= v15)
        v68 = -(uint64_t)a5;
      else
        v68 = 0;
      v14 = &v67[v68];
      v16 += a6;
      --v61;
    }
    while (v61);
  }
  *result = v14;
  *a3 = v15;
  *a2 = v16;
  *a4 = v17;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)6,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, double a8, double a9, double a10, int32x4_t a11, uint64_t a12, uint64_t a13, unint64_t a14)
{
  int8x16_t v14;
  unint64_t v15;
  int8x8_t *v16;
  unint64_t v17;
  int8x8_t *v18;
  char *v19;
  unsigned int v20;
  int8x16_t v21;
  int8x16_t v22;
  uint64_t v23;
  uint64_t v24;
  uint32x4_t v25;
  int8x16_t v26;
  __int32 v27;
  int8x16_t *v28;
  int8x16_t *v29;
  int8x16_t *v30;
  int8x16_t *v31;
  uint64_t v32;
  int64_t v33;
  unint64_t v34;
  int8x16_t v35;
  uint16x8_t v36;
  int16x8_t v37;
  uint16x8_t v38;
  uint16x8_t v39;
  uint32x4_t v40;
  uint32x4_t v41;
  uint32x4_t v42;
  uint32x4_t v43;
  int8x16_t *v44;
  int8x16_t *v45;
  int8x16_t *v46;
  int8x16_t *v47;
  int64_t v48;
  int64_t v49;
  uint64_t v50;
  int8x16_t v51;
  int16x8_t v52;
  uint16x8_t v53;
  uint32x4_t v54;
  uint32x4_t v55;
  int16x8_t v56;
  uint16x8_t v57;
  int8x16_t v58;
  uint32x4_t v59;
  uint32x4_t v60;
  uint64_t v61;
  int8x8_t v62;
  __int16 v63;
  uint32x4_t v64;
  int32x4_t v65;
  int16x4_t v66;
  int16x4_t v67;
  uint32x4_t v68;
  int16x4_t v69;
  uint32x4_t v70;
  int8x8_t *v71;
  uint64_t v72;

  v15 = a14;
  v16 = *result;
  v17 = *a3;
  v18 = *a2;
  v19 = *a4;
  if (a14 < 2)
    goto LABEL_37;
  if (a7)
    v20 = 0;
  else
    v20 = -1;
  v21.i64[0] = 0xFFFF000000000000;
  v21.i64[1] = 0xFFFF000000000000;
  v22 = vandq_s8((int8x16_t)vdupq_n_s16(v20), v21);
  v23 = 2 * a6;
  v24 = 16 * a6;
  v25 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  a11.i64[0] = 0x800000008000;
  a11.i64[1] = 0x800000008000;
  v26.i64[0] = -1;
  v26.i64[1] = -1;
  while (1)
  {
    v27 = *(unsigned __int16 *)v19;
    if (!*(_WORD *)v19)
    {
      v44 = (int8x16_t *)&v19[v15];
      v45 = (int8x16_t *)v19;
      do
        v46 = v45++;
      while (v45 <= v44 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v46)) & 0x80) != 0);
      do
      {
        v47 = v46;
        v46 = (int8x16_t *)((char *)v46 + 4);
      }
      while (v46 <= v44 && !v47->i32[0]);
      if (v47 < v44)
      {
        while (!v47->i8[0])
        {
          v47 = (int8x16_t *)((char *)v47 + 1);
          if (v47 >= v44)
          {
            v47 = (int8x16_t *)&v19[v15];
            break;
          }
        }
      }
      v48 = (char *)v47 - v19;
      v49 = ((char *)v47 - v19) * a6;
      v16 += v49;
      v18 += v49;
      v19 += v49;
      v15 -= v48;
      goto LABEL_34;
    }
    if (v27 != 0xFFFF)
      break;
    v28 = (int8x16_t *)&v19[v15];
    v29 = (int8x16_t *)v19;
    do
      v30 = v29++;
    while (v29 <= v28 && (vminvq_u8((uint8x16_t)vceqq_s8(*v30, v26)) & 0x80) != 0);
    do
    {
      v31 = v30;
      v30 = (int8x16_t *)((char *)v30 + 4);
    }
    while (v30 <= v28 && v31->i32[0] == -1);
    if (v31 < v28)
    {
      while (v31->u8[0] == 255)
      {
        v31 = (int8x16_t *)((char *)v31 + 1);
        if (v31 >= v28)
        {
          v31 = (int8x16_t *)&v19[v15];
          break;
        }
      }
    }
    v32 = 0;
    v33 = (char *)v31 - v19;
    v34 = (char *)v31 - v19;
    do
    {
      v35 = vrev16q_s8(*(int8x16_t *)&v18->i8[v32]);
      v36 = (uint16x8_t)vorrq_s8(v22, vrev16q_s8(*(int8x16_t *)&v16->i8[v32]));
      v37 = (int16x8_t)vqtbl1q_s8(v35, (int8x16_t)xmmword_1850049F0);
      v38 = (uint16x8_t)vbicq_s8(v35, (int8x16_t)vceqzq_s16(v37));
      v39 = (uint16x8_t)vmvnq_s8((int8x16_t)v37);
      v40 = vmull_u16(*(uint16x4_t *)v36.i8, *(uint16x4_t *)v39.i8);
      v41 = vmull_high_u16(v36, v39);
      v42 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v40, v25), a11);
      v43 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v41, v25), a11);
      v14 = (int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v42, v42, 0x10uLL), 0x10uLL), vsraq_n_u32(v43, v43, 0x10uLL), 0x10uLL);
      *(int8x16_t *)&v18->i8[v32] = vrev16q_s8((int8x16_t)vqaddq_u16(v38, (uint16x8_t)v14));
      v19 += v23;
      v34 -= 2;
      v32 += v24;
    }
    while (v34 > 1);
    v18 = (int8x8_t *)((char *)v18 + v32);
    v16 = (int8x8_t *)((char *)v16 + v32);
    v15 = v15 - v33 + v34;
LABEL_34:
    if (v15 <= 1)
      goto LABEL_37;
  }
  v50 = 0;
  while (1)
  {
    v51 = vrev16q_s8(*(int8x16_t *)&v18->i8[v50]);
    v14.i32[0] = v27;
    v52 = (int16x8_t)vqtbl1q_s8(v14, (int8x16_t)xmmword_1850049E0);
    v53 = (uint16x8_t)vorrq_s8(v22, vrev16q_s8(*(int8x16_t *)&v16->i8[v50]));
    v54 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v53.i8, *(uint16x4_t *)v52.i8), v25), a11);
    v55 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16(v53, (uint16x8_t)v52), v25), a11);
    v56 = (int16x8_t)vqtbl1q_s8(v51, (int8x16_t)xmmword_1850049F0);
    v57 = (uint16x8_t)vbicq_s8(v51, (int8x16_t)vceqzq_s16(v56));
    v58 = vmvnq_s8((int8x16_t)v56);
    v59 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(vqshrn_n_u32(vsraq_n_u32(v54, v54, 0x10uLL), 0x10uLL), *(uint16x4_t *)v58.i8), v25), a11);
    v60 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(vqshrn_n_u32(vsraq_n_u32(v55, v55, 0x10uLL), 0x10uLL), (uint16x4_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL)), v25), a11);
    v14 = (int8x16_t)vceqzq_s16(v52);
    *(int8x16_t *)&v18->i8[v50] = vrev16q_s8(vbslq_s8(v14, v51, (int8x16_t)vqaddq_u16(v57, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v59, v59, 0x10uLL), 0x10uLL), vsraq_n_u32(v60, v60, 0x10uLL), 0x10uLL))));
    v19 += v23;
    v15 -= 2;
    if (v15 < 2)
      break;
    v27 = *(unsigned __int16 *)v19;
    v50 += v24;
    if ((unsigned __int16)(v27 - 1) >= 0xFFFEu)
    {
      v16 = (int8x8_t *)((char *)v16 + v50);
      v18 = (int8x8_t *)((char *)v18 + v50);
      goto LABEL_34;
    }
  }
  v16 = (int8x8_t *)((char *)v16 + v24 + v50);
  v18 = (int8x8_t *)((char *)v18 + v24 + v50);
LABEL_37:
  v61 = v15 + a13;
  if (v61)
  {
    v62.i32[0] = 0;
    v62.i16[2] = 0;
    if (a7)
      v63 = 0;
    else
      v63 = -1;
    v62.i16[3] = v63;
    v64 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v65.i64[0] = 0x800000008000;
    v65.i64[1] = 0x800000008000;
    do
    {
      if (*v19)
      {
        a11.i32[0] = *v19;
        v66 = (int16x4_t)vrev16_s8(*v18);
        v67 = (int16x4_t)vdup_lane_s8(*(int8x8_t *)a11.i8, 0);
        v68 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(v62, vrev16_s8(*v16)), (uint16x4_t)v67), v64), v65);
        v69 = vdup_lane_s16(v66, 3);
        v70 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(vqshrn_n_u32(vsraq_n_u32(v68, v68, 0x10uLL), 0x10uLL), (uint16x4_t)vmvn_s8((int8x8_t)v69)), v64), v65);
        *(int8x8_t *)a11.i8 = vrev16_s8(vbsl_s8((int8x8_t)vceqz_s16(v67), (int8x8_t)v66, (int8x8_t)vqadd_u16((uint16x4_t)vbic_s8((int8x8_t)v66, (int8x8_t)vceqz_s16(v69)), vqshrn_n_u32(vsraq_n_u32(v70, v70, 0x10uLL), 0x10uLL))));
        *v18 = *(int8x8_t *)a11.i8;
      }
      v71 = &v16[a6];
      v19 += a6;
      if ((unint64_t)v71 >= v17)
        v72 = -(uint64_t)a5;
      else
        v72 = 0;
      v16 = &v71[v72];
      v18 += a6;
      --v61;
    }
    while (v61);
  }
  *result = v16;
  *a3 = v17;
  *a2 = v18;
  *a4 = v19;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)7,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, double a7, double a8, int32x4_t a9, double a10, double a11, double a12, uint16x8_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17)
{
  unint64_t v17;
  int8x8_t *v18;
  unint64_t v19;
  int8x8_t *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint32x4_t v24;
  int32x4_t v25;
  unsigned __int32 v26;
  int8x16_t *v27;
  int8x16_t *v28;
  int8x16_t *v29;
  int8x16_t *v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  uint32x4_t v36;
  uint32x4_t v37;
  uint32x4_t v38;
  int8x16_t *v39;
  int8x16_t *v40;
  int8x16_t *v41;
  int8x16_t *v42;
  int64_t v43;
  int64_t v44;
  uint64_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint32x4_t v49;
  uint32x4_t v50;
  uint16x8_t v51;
  uint32x4_t v52;
  uint32x4_t v53;
  uint64_t v54;
  uint32x4_t v55;
  int32x4_t v56;
  uint16x4_t v57;
  uint16x4_t v58;
  uint32x4_t v59;
  int8x8_t *v60;
  uint64_t v61;

  v17 = a17;
  v18 = *result;
  v19 = *a3;
  v20 = *a2;
  v21 = *a4;
  if (a17 < 2)
    goto LABEL_34;
  v22 = 2 * a6;
  v23 = 16 * a6;
  v24 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  v25.i64[0] = 0x800000008000;
  v25.i64[1] = 0x800000008000;
  a9.i64[0] = -1;
  a9.i64[1] = -1;
  while (1)
  {
    v26 = *(unsigned __int16 *)v21;
    if (!*(_WORD *)v21)
    {
      v39 = (int8x16_t *)&v21[v17];
      v40 = (int8x16_t *)v21;
      do
        v41 = v40++;
      while (v40 <= v39 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v41)) & 0x80) != 0);
      do
      {
        v42 = v41;
        v41 = (int8x16_t *)((char *)v41 + 4);
      }
      while (v41 <= v39 && !v42->i32[0]);
      if (v42 < v39)
      {
        while (!v42->i8[0])
        {
          v42 = (int8x16_t *)((char *)v42 + 1);
          if (v42 >= v39)
          {
            v42 = (int8x16_t *)&v21[v17];
            break;
          }
        }
      }
      v43 = (char *)v42 - v21;
      v44 = ((char *)v42 - v21) * a6;
      v18 += v44;
      v20 += v44;
      v21 += v44;
      v17 -= v43;
      goto LABEL_31;
    }
    if (v26 != 0xFFFF)
      break;
    v27 = (int8x16_t *)&v21[v17];
    v28 = (int8x16_t *)v21;
    do
      v29 = v28++;
    while (v28 <= v27 && (vminvq_u8((uint8x16_t)vceqq_s8(*v29, (int8x16_t)a9)) & 0x80) != 0);
    do
    {
      v30 = v29;
      v29 = (int8x16_t *)((char *)v29 + 4);
    }
    while (v29 <= v27 && v30->i32[0] == -1);
    if (v30 < v27)
    {
      while (v30->u8[0] == 255)
      {
        v30 = (int8x16_t *)((char *)v30 + 1);
        if (v30 >= v27)
        {
          v30 = (int8x16_t *)&v21[v17];
          break;
        }
      }
    }
    v31 = 0;
    v32 = (char *)v30 - v21;
    v33 = (char *)v30 - v21;
    do
    {
      v34 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)&v18->i8[v31]);
      v35 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)&v20->i8[v31]);
      a13 = (uint16x8_t)vmull_lane_u16(*(uint16x4_t *)v35.i8, *(uint16x4_t *)v34.i8, 3);
      v36 = vmull_high_laneq_u16(v35, v34, 7);
      v37 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32((uint32x4_t)a13, v24), v25);
      v38 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v36, v24), v25);
      *(int8x16_t *)&v20->i8[v31] = vrev16q_s8((int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v37, v37, 0x10uLL), 0x10uLL), vsraq_n_u32(v38, v38, 0x10uLL), 0x10uLL));
      v21 += v22;
      v33 -= 2;
      v31 += v23;
    }
    while (v33 > 1);
    v20 = (int8x8_t *)((char *)v20 + v31);
    v18 = (int8x8_t *)((char *)v18 + v31);
    v17 = v17 - v32 + v33;
LABEL_31:
    if (v17 <= 1)
      goto LABEL_34;
  }
  v45 = 0;
  while (1)
  {
    v46 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)&v18->i8[v45]);
    v47 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)&v20->i8[v45]);
    a13.i32[0] = v26;
    v48 = (uint16x8_t)vqtbl1q_s8((int8x16_t)a13, (int8x16_t)xmmword_1850049E0);
    v49 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*(uint16x4_t *)v48.i8, *(uint16x4_t *)v46.i8, 3), v24), v25);
    v50 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_laneq_u16(v48, v46, 7), v24), v25);
    v51 = vqsubq_u16(v48, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v49, v49, 0x10uLL), 0x10uLL), vsraq_n_u32(v50, v50, 0x10uLL), 0x10uLL));
    v52 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v47.i8, *(uint16x4_t *)v51.i8), v24), v25);
    v53 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16(v47, v51), v24), v25);
    a13 = vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v52, v52, 0x10uLL), 0x10uLL), vsraq_n_u32(v53, v53, 0x10uLL), 0x10uLL);
    *(int8x16_t *)&v20->i8[v45] = vrev16q_s8((int8x16_t)vqsubq_u16(v47, a13));
    v21 += v22;
    v17 -= 2;
    if (v17 < 2)
      break;
    v26 = *(unsigned __int16 *)v21;
    v45 += v23;
    if ((unsigned __int16)(v26 - 1) >= 0xFFFEu)
    {
      v18 = (int8x8_t *)((char *)v18 + v45);
      v20 = (int8x8_t *)((char *)v20 + v45);
      goto LABEL_31;
    }
  }
  v18 = (int8x8_t *)((char *)v18 + v23 + v45);
  v20 = (int8x8_t *)((char *)v20 + v23 + v45);
LABEL_34:
  v54 = v17 + a16;
  if (v54)
  {
    v55 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v56.i64[0] = 0x800000008000;
    v56.i64[1] = 0x800000008000;
    do
    {
      if (*v21)
      {
        a9.i32[0] = *v21;
        v57 = (uint16x4_t)vrev16_s8(*v20);
        v58 = (uint16x4_t)vdup_lane_s8(*(int8x8_t *)a9.i8, 0);
        v59 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(v58, (uint16x4_t)vrev16_s8(*v18), 3), v55), v56);
        a9 = vaddq_s32((int32x4_t)vminq_u32(vmull_u16(v57, vqsub_u16(v58, vqshrn_n_u32(vsraq_n_u32(v59, v59, 0x10uLL), 0x10uLL))), v55), v56);
        *(int8x8_t *)a9.i8 = vrev16_s8((int8x8_t)vqsub_u16(v57, vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a9, (uint32x4_t)a9, 0x10uLL), 0x10uLL)));
        *v20 = *(int8x8_t *)a9.i8;
      }
      v60 = &v18[a6];
      v21 += a6;
      if ((unint64_t)v60 >= v19)
        v61 = -(uint64_t)a5;
      else
        v61 = 0;
      v18 = &v60[v61];
      v20 += a6;
      --v54;
    }
    while (v54);
  }
  *result = v18;
  *a3 = v19;
  *a2 = v20;
  *a4 = v21;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)8,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, double a7, double a8, int32x4_t a9, double a10, double a11, double a12, uint16x8_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17)
{
  unint64_t v17;
  int8x8_t *v18;
  unint64_t v19;
  int8x8_t *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint32x4_t v24;
  int32x4_t v25;
  unsigned __int32 v26;
  int8x16_t *v27;
  int8x16_t *v28;
  int8x16_t *v29;
  int8x16_t *v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  uint32x4_t v36;
  uint32x4_t v37;
  int8x16_t *v38;
  int8x16_t *v39;
  int8x16_t *v40;
  int8x16_t *v41;
  int64_t v42;
  int64_t v43;
  uint64_t v44;
  uint16x8_t v45;
  int8x16_t v46;
  uint16x8_t v47;
  uint32x4_t v48;
  uint32x4_t v49;
  uint32x4_t v50;
  uint32x4_t v51;
  uint32x4_t v52;
  uint32x4_t v53;
  uint64_t v54;
  uint32x4_t v55;
  int32x4_t v56;
  uint16x4_t v57;
  uint32x4_t v58;
  int8x8_t *v59;
  uint64_t v60;

  v17 = a17;
  v18 = *result;
  v19 = *a3;
  v20 = *a2;
  v21 = *a4;
  if (a17 < 2)
    goto LABEL_34;
  v22 = 2 * a6;
  v23 = 16 * a6;
  v24 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  v25.i64[0] = 0x800000008000;
  v25.i64[1] = 0x800000008000;
  a9.i64[0] = -1;
  a9.i64[1] = -1;
  while (1)
  {
    v26 = *(unsigned __int16 *)v21;
    if (!*(_WORD *)v21)
    {
      v38 = (int8x16_t *)&v21[v17];
      v39 = (int8x16_t *)v21;
      do
        v40 = v39++;
      while (v39 <= v38 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v40)) & 0x80) != 0);
      do
      {
        v41 = v40;
        v40 = (int8x16_t *)((char *)v40 + 4);
      }
      while (v40 <= v38 && !v41->i32[0]);
      if (v41 < v38)
      {
        while (!v41->i8[0])
        {
          v41 = (int8x16_t *)((char *)v41 + 1);
          if (v41 >= v38)
          {
            v41 = (int8x16_t *)&v21[v17];
            break;
          }
        }
      }
      v42 = (char *)v41 - v21;
      v43 = ((char *)v41 - v21) * a6;
      v18 += v43;
      v20 += v43;
      v21 += v43;
      v17 -= v42;
      goto LABEL_31;
    }
    if (v26 != 0xFFFF)
      break;
    v27 = (int8x16_t *)&v21[v17];
    v28 = (int8x16_t *)v21;
    do
      v29 = v28++;
    while (v28 <= v27 && (vminvq_u8((uint8x16_t)vceqq_s8(*v29, (int8x16_t)a9)) & 0x80) != 0);
    do
    {
      v30 = v29;
      v29 = (int8x16_t *)((char *)v29 + 4);
    }
    while (v29 <= v27 && v30->i32[0] == -1);
    if (v30 < v27)
    {
      while (v30->u8[0] == 255)
      {
        v30 = (int8x16_t *)((char *)v30 + 1);
        if (v30 >= v27)
        {
          v30 = (int8x16_t *)&v21[v17];
          break;
        }
      }
    }
    v31 = 0;
    v32 = (char *)v30 - v21;
    v33 = (char *)v30 - v21;
    do
    {
      v34 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)&v18->i8[v31]);
      v35 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)&v20->i8[v31]);
      v36 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*(uint16x4_t *)v35.i8, *(uint16x4_t *)v34.i8, 3), v24), v25);
      v37 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_laneq_u16(v35, v34, 7), v24), v25);
      a13 = vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v36, v36, 0x10uLL), 0x10uLL), vsraq_n_u32(v37, v37, 0x10uLL), 0x10uLL);
      *(int8x16_t *)&v20->i8[v31] = vrev16q_s8((int8x16_t)vqsubq_u16(v35, a13));
      v21 += v22;
      v33 -= 2;
      v31 += v23;
    }
    while (v33 > 1);
    v20 = (int8x8_t *)((char *)v20 + v31);
    v18 = (int8x8_t *)((char *)v18 + v31);
    v17 = v17 - v32 + v33;
LABEL_31:
    if (v17 <= 1)
      goto LABEL_34;
  }
  v44 = 0;
  while (1)
  {
    v45 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)&v18->i8[v44]);
    v46 = vrev16q_s8(*(int8x16_t *)&v20->i8[v44]);
    a13.i32[0] = v26;
    v47 = (uint16x8_t)vqtbl1q_s8((int8x16_t)a13, (int8x16_t)xmmword_1850049E0);
    v48 = vmull_lane_u16(*(uint16x4_t *)v47.i8, *(uint16x4_t *)v45.i8, 3);
    v49 = vmull_high_laneq_u16(v47, v45, 7);
    v50 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v48, v24), v25);
    v51 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v49, v24), v25);
    v52 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v46.i8, vqshrn_n_u32(vsraq_n_u32(v50, v50, 0x10uLL), 0x10uLL)), v24), v25);
    v53 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL), vqshrn_n_u32(vsraq_n_u32(v51, v51, 0x10uLL), 0x10uLL)), v24), v25);
    a13 = vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v52, v52, 0x10uLL), 0x10uLL), vsraq_n_u32(v53, v53, 0x10uLL), 0x10uLL);
    *(int8x16_t *)&v20->i8[v44] = vrev16q_s8((int8x16_t)vqsubq_u16((uint16x8_t)v46, a13));
    v21 += v22;
    v17 -= 2;
    if (v17 < 2)
      break;
    v26 = *(unsigned __int16 *)v21;
    v44 += v23;
    if ((unsigned __int16)(v26 - 1) >= 0xFFFEu)
    {
      v18 = (int8x8_t *)((char *)v18 + v44);
      v20 = (int8x8_t *)((char *)v20 + v44);
      goto LABEL_31;
    }
  }
  v18 = (int8x8_t *)((char *)v18 + v23 + v44);
  v20 = (int8x8_t *)((char *)v20 + v23 + v44);
LABEL_34:
  v54 = v17 + a16;
  if (v54)
  {
    v55 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v56.i64[0] = 0x800000008000;
    v56.i64[1] = 0x800000008000;
    do
    {
      if (*v21)
      {
        a9.i32[0] = *v21;
        v57 = (uint16x4_t)vrev16_s8(*v20);
        v58 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16((uint16x4_t)vdup_lane_s8(*(int8x8_t *)a9.i8, 0), (uint16x4_t)vrev16_s8(*v18), 3), v55), v56);
        a9 = vaddq_s32((int32x4_t)vminq_u32(vmull_u16(v57, vqshrn_n_u32(vsraq_n_u32(v58, v58, 0x10uLL), 0x10uLL)), v55), v56);
        *(int8x8_t *)a9.i8 = vrev16_s8((int8x8_t)vqsub_u16(v57, vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a9, (uint32x4_t)a9, 0x10uLL), 0x10uLL)));
        *v20 = *(int8x8_t *)a9.i8;
      }
      v59 = &v18[a6];
      v21 += a6;
      if ((unint64_t)v59 >= v19)
        v60 = -(uint64_t)a5;
      else
        v60 = 0;
      v18 = &v59[v60];
      v20 += a6;
      --v54;
    }
    while (v54);
  }
  *result = v18;
  *a3 = v19;
  *a2 = v20;
  *a4 = v21;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)9,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, double a7, double a8, int32x4_t a9, double a10, double a11, double a12, uint32x4_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17)
{
  unint64_t v17;
  int8x8_t *v18;
  unint64_t v19;
  int8x8_t *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint32x4_t v24;
  int32x4_t v25;
  unsigned __int32 v26;
  int8x16_t *v27;
  int8x16_t *v28;
  int8x16_t *v29;
  int8x16_t *v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  uint16x8_t v34;
  int8x16_t v35;
  uint16x8_t v36;
  uint32x4_t v37;
  uint32x4_t v38;
  uint32x4_t v39;
  uint32x4_t v40;
  int8x16_t *v41;
  int8x16_t *v42;
  int8x16_t *v43;
  int8x16_t *v44;
  int64_t v45;
  int64_t v46;
  uint64_t v47;
  uint16x8_t v48;
  int8x16_t v49;
  int8x16_t v50;
  uint32x4_t v51;
  uint32x4_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  uint32x4_t v55;
  uint32x4_t v56;
  uint32x4_t v57;
  uint32x4_t v58;
  uint64_t v59;
  uint32x4_t v60;
  int32x4_t v61;
  int8x8_t v62;
  int8x8_t v63;
  uint32x4_t v64;
  int8x8_t *v65;
  uint64_t v66;

  v17 = a17;
  v18 = *result;
  v19 = *a3;
  v20 = *a2;
  v21 = *a4;
  if (a17 < 2)
    goto LABEL_34;
  v22 = 2 * a6;
  v23 = 16 * a6;
  v24 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  v25.i64[0] = 0x800000008000;
  v25.i64[1] = 0x800000008000;
  a9.i64[0] = -1;
  a9.i64[1] = -1;
  while (1)
  {
    v26 = *(unsigned __int16 *)v21;
    if (!*(_WORD *)v21)
    {
      v41 = (int8x16_t *)&v21[v17];
      v42 = (int8x16_t *)v21;
      do
        v43 = v42++;
      while (v42 <= v41 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v43)) & 0x80) != 0);
      do
      {
        v44 = v43;
        v43 = (int8x16_t *)((char *)v43 + 4);
      }
      while (v43 <= v41 && !v44->i32[0]);
      if (v44 < v41)
      {
        while (!v44->i8[0])
        {
          v44 = (int8x16_t *)((char *)v44 + 1);
          if (v44 >= v41)
          {
            v44 = (int8x16_t *)&v21[v17];
            break;
          }
        }
      }
      v45 = (char *)v44 - v21;
      v46 = ((char *)v44 - v21) * a6;
      v18 += v46;
      v20 += v46;
      v21 += v46;
      v17 -= v45;
      goto LABEL_31;
    }
    if (v26 != 0xFFFF)
      break;
    v27 = (int8x16_t *)&v21[v17];
    v28 = (int8x16_t *)v21;
    do
      v29 = v28++;
    while (v28 <= v27 && (vminvq_u8((uint8x16_t)vceqq_s8(*v29, (int8x16_t)a9)) & 0x80) != 0);
    do
    {
      v30 = v29;
      v29 = (int8x16_t *)((char *)v29 + 4);
    }
    while (v29 <= v27 && v30->i32[0] == -1);
    if (v30 < v27)
    {
      while (v30->u8[0] == 255)
      {
        v30 = (int8x16_t *)((char *)v30 + 1);
        if (v30 >= v27)
        {
          v30 = (int8x16_t *)&v21[v17];
          break;
        }
      }
    }
    v31 = 0;
    v32 = (char *)v30 - v21;
    v33 = (char *)v30 - v21;
    do
    {
      v34 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)&v18->i8[v31]);
      v35 = vrev16q_s8(*(int8x16_t *)&v20->i8[v31]);
      v36 = (uint16x8_t)vmvnq_s8(v35);
      v37 = vqaddq_u32(vmull_lane_u16(*(uint16x4_t *)v34.i8, *(uint16x4_t *)v36.i8, 3), vmull_lane_u16(*(uint16x4_t *)v35.i8, *(uint16x4_t *)v34.i8, 3));
      a13 = vmull_high_laneq_u16(v34, v36, 7);
      v38 = vqaddq_u32(a13, vmull_high_laneq_u16((uint16x8_t)v35, v34, 7));
      v39 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v37, v24), v25);
      v40 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v38, v24), v25);
      *(int8x16_t *)&v20->i8[v31] = vrev16q_s8((int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v39, v39, 0x10uLL), 0x10uLL), vsraq_n_u32(v40, v40, 0x10uLL), 0x10uLL));
      v21 += v22;
      v33 -= 2;
      v31 += v23;
    }
    while (v33 > 1);
    v20 = (int8x8_t *)((char *)v20 + v31);
    v18 = (int8x8_t *)((char *)v18 + v31);
    v17 = v17 - v32 + v33;
LABEL_31:
    if (v17 <= 1)
      goto LABEL_34;
  }
  v47 = 0;
  while (1)
  {
    v48 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)&v18->i8[v47]);
    v49 = vrev16q_s8(*(int8x16_t *)&v20->i8[v47]);
    a13.i32[0] = v26;
    v50 = vqtbl1q_s8((int8x16_t)a13, (int8x16_t)xmmword_1850049E0);
    v51 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v48.i8, *(uint16x4_t *)v50.i8), v24), v25);
    *(uint16x4_t *)v51.i8 = vqshrn_n_u32(vsraq_n_u32(v51, v51, 0x10uLL), 0x10uLL);
    v52 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16(v48, (uint16x8_t)v50), v24), v25);
    *(uint16x4_t *)v52.i8 = vqshrn_n_u32(vsraq_n_u32(v52, v52, 0x10uLL), 0x10uLL);
    v53 = (uint16x8_t)vmvnq_s8(v49);
    v54 = (uint16x8_t)vmvnq_s8(v50);
    v55 = vmull_u16(*(uint16x4_t *)v49.i8, *(uint16x4_t *)v54.i8);
    a13 = vqaddq_u32(vmull_laneq_u16(*(uint16x4_t *)v52.i8, v53, 7), vmull_high_u16((uint16x8_t)v49, v54));
    v56 = vmull_high_lane_u16((uint16x8_t)v49, *(uint16x4_t *)v52.i8, 3);
    v57 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vmull_lane_u16(*(uint16x4_t *)v51.i8, *(uint16x4_t *)v53.i8, 3), v55), vmull_lane_u16(*(uint16x4_t *)v49.i8, *(uint16x4_t *)v51.i8, 3)), v24), v25);
    v58 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(a13, v56), v24), v25);
    *(int8x16_t *)&v20->i8[v47] = vrev16q_s8((int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v57, v57, 0x10uLL), 0x10uLL), vsraq_n_u32(v58, v58, 0x10uLL), 0x10uLL));
    v21 += v22;
    v17 -= 2;
    if (v17 < 2)
      break;
    v26 = *(unsigned __int16 *)v21;
    v47 += v23;
    if ((unsigned __int16)(v26 - 1) >= 0xFFFEu)
    {
      v18 = (int8x8_t *)((char *)v18 + v47);
      v20 = (int8x8_t *)((char *)v20 + v47);
      goto LABEL_31;
    }
  }
  v18 = (int8x8_t *)((char *)v18 + v23 + v47);
  v20 = (int8x8_t *)((char *)v20 + v23 + v47);
LABEL_34:
  v59 = v17 + a16;
  if (v59)
  {
    v60 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v61.i64[0] = 0x800000008000;
    v61.i64[1] = 0x800000008000;
    do
    {
      if (*v21)
      {
        a9.i32[0] = *v21;
        v62 = vrev16_s8(*v20);
        v63 = vdup_lane_s8(*(int8x8_t *)a9.i8, 0);
        v64 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vrev16_s8(*v18), (uint16x4_t)v63), v60), v61);
        *(uint16x4_t *)v64.i8 = vqshrn_n_u32(vsraq_n_u32(v64, v64, 0x10uLL), 0x10uLL);
        a9 = vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vmull_lane_u16(*(uint16x4_t *)v64.i8, (uint16x4_t)vmvn_s8(v62), 3), vmull_u16((uint16x4_t)v62, (uint16x4_t)vmvn_s8(v63))), vmull_lane_u16((uint16x4_t)v62, *(uint16x4_t *)v64.i8, 3)), v60), v61);
        *(int8x8_t *)a9.i8 = vrev16_s8((int8x8_t)vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a9, (uint32x4_t)a9, 0x10uLL), 0x10uLL));
        *v20 = *(int8x8_t *)a9.i8;
      }
      v65 = &v18[a6];
      v21 += a6;
      if ((unint64_t)v65 >= v19)
        v66 = -(uint64_t)a5;
      else
        v66 = 0;
      v18 = &v65[v66];
      v20 += a6;
      --v59;
    }
    while (v59);
  }
  *result = v18;
  *a3 = v19;
  *a2 = v20;
  *a4 = v21;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)10,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, double a7, double a8, int32x4_t a9, double a10, double a11, double a12, int8x16_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17)
{
  unint64_t v17;
  int8x8_t *v18;
  unint64_t v19;
  int8x8_t *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint32x4_t v24;
  int32x4_t v25;
  unsigned __int32 v26;
  int8x16_t *v27;
  int8x16_t *v28;
  int8x16_t *v29;
  int8x16_t *v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  int8x16_t v34;
  int8x16_t v35;
  uint16x8_t v36;
  uint32x4_t v37;
  uint32x4_t v38;
  uint32x4_t v39;
  uint32x4_t v40;
  int8x16_t *v41;
  int8x16_t *v42;
  int8x16_t *v43;
  int8x16_t *v44;
  int64_t v45;
  int64_t v46;
  uint64_t v47;
  uint16x8_t v48;
  int8x16_t v49;
  uint16x8_t v50;
  uint32x4_t v51;
  uint32x4_t v52;
  uint32x4_t v53;
  uint32x4_t v54;
  uint16x8_t v55;
  uint32x4_t v56;
  uint32x4_t v57;
  uint32x4_t v58;
  uint64_t v59;
  uint32x4_t v60;
  int32x4_t v61;
  int8x8_t v62;
  uint32x4_t v63;
  int8x8_t *v64;
  uint64_t v65;

  v17 = a17;
  v18 = *result;
  v19 = *a3;
  v20 = *a2;
  v21 = *a4;
  if (a17 < 2)
    goto LABEL_34;
  v22 = 2 * a6;
  v23 = 16 * a6;
  v24 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  v25.i64[0] = 0x800000008000;
  v25.i64[1] = 0x800000008000;
  a9.i64[0] = -1;
  a9.i64[1] = -1;
  while (1)
  {
    v26 = *(unsigned __int16 *)v21;
    if (!*(_WORD *)v21)
    {
      v41 = (int8x16_t *)&v21[v17];
      v42 = (int8x16_t *)v21;
      do
        v43 = v42++;
      while (v42 <= v41 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v43)) & 0x80) != 0);
      do
      {
        v44 = v43;
        v43 = (int8x16_t *)((char *)v43 + 4);
      }
      while (v43 <= v41 && !v44->i32[0]);
      if (v44 < v41)
      {
        while (!v44->i8[0])
        {
          v44 = (int8x16_t *)((char *)v44 + 1);
          if (v44 >= v41)
          {
            v44 = (int8x16_t *)&v21[v17];
            break;
          }
        }
      }
      v45 = (char *)v44 - v21;
      v46 = ((char *)v44 - v21) * a6;
      v18 += v46;
      v20 += v46;
      v21 += v46;
      v17 -= v45;
      goto LABEL_31;
    }
    if (v26 != 0xFFFF)
      break;
    v27 = (int8x16_t *)&v21[v17];
    v28 = (int8x16_t *)v21;
    do
      v29 = v28++;
    while (v28 <= v27 && (vminvq_u8((uint8x16_t)vceqq_s8(*v29, (int8x16_t)a9)) & 0x80) != 0);
    do
    {
      v30 = v29;
      v29 = (int8x16_t *)((char *)v29 + 4);
    }
    while (v29 <= v27 && v30->i32[0] == -1);
    if (v30 < v27)
    {
      while (v30->u8[0] == 255)
      {
        v30 = (int8x16_t *)((char *)v30 + 1);
        if (v30 >= v27)
        {
          v30 = (int8x16_t *)&v21[v17];
          break;
        }
      }
    }
    v31 = 0;
    v32 = (char *)v30 - v21;
    v33 = (char *)v30 - v21;
    do
    {
      v34 = vrev16q_s8(*(int8x16_t *)&v18->i8[v31]);
      v35 = vrev16q_s8(*(int8x16_t *)&v20->i8[v31]);
      a13 = vmvnq_s8(v35);
      v36 = (uint16x8_t)vmvnq_s8(v34);
      v37 = vqaddq_u32(vmull_lane_u16(*(uint16x4_t *)v34.i8, *(uint16x4_t *)a13.i8, 3), vmull_lane_u16(*(uint16x4_t *)v35.i8, *(uint16x4_t *)v36.i8, 3));
      v38 = vqaddq_u32(vmull_high_laneq_u16((uint16x8_t)v34, (uint16x8_t)a13, 7), vmull_high_laneq_u16((uint16x8_t)v35, v36, 7));
      v39 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v37, v24), v25);
      v40 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v38, v24), v25);
      *(int8x16_t *)&v20->i8[v31] = vrev16q_s8((int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v39, v39, 0x10uLL), 0x10uLL), vsraq_n_u32(v40, v40, 0x10uLL), 0x10uLL));
      v21 += v22;
      v33 -= 2;
      v31 += v23;
    }
    while (v33 > 1);
    v20 = (int8x8_t *)((char *)v20 + v31);
    v18 = (int8x8_t *)((char *)v18 + v31);
    v17 = v17 - v32 + v33;
LABEL_31:
    if (v17 <= 1)
      goto LABEL_34;
  }
  v47 = 0;
  while (1)
  {
    v48 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)&v18->i8[v47]);
    v49 = vrev16q_s8(*(int8x16_t *)&v20->i8[v47]);
    a13.i32[0] = v26;
    v50 = (uint16x8_t)vqtbl1q_s8(a13, (int8x16_t)xmmword_1850049E0);
    v51 = vmull_u16(*(uint16x4_t *)v48.i8, *(uint16x4_t *)v50.i8);
    v52 = vmull_high_u16(v48, v50);
    v53 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v51, v24), v25);
    *(uint16x4_t *)v53.i8 = vqshrn_n_u32(vsraq_n_u32(v53, v53, 0x10uLL), 0x10uLL);
    v54 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v52, v24), v25);
    *(uint16x4_t *)v54.i8 = vqshrn_n_u32(vsraq_n_u32(v54, v54, 0x10uLL), 0x10uLL);
    v55 = (uint16x8_t)vmvnq_s8(v49);
    a13 = (int8x16_t)vqaddq_u32(vmull_lane_u16(*(uint16x4_t *)v53.i8, *(uint16x4_t *)v55.i8, 3), vmull_u16(*(uint16x4_t *)v49.i8, (uint16x4_t)vmvn_s8((int8x8_t)vdup_lane_s16(*(int16x4_t *)v53.i8, 3))));
    v56 = vqaddq_u32(vmull_laneq_u16(*(uint16x4_t *)v54.i8, v55, 7), vmull_u16((uint16x4_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL), (uint16x4_t)vmvn_s8((int8x8_t)vdup_lane_s16(*(int16x4_t *)v54.i8, 3))));
    v57 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32((uint32x4_t)a13, v24), v25);
    v58 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v56, v24), v25);
    *(int8x16_t *)&v20->i8[v47] = vrev16q_s8((int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v57, v57, 0x10uLL), 0x10uLL), vsraq_n_u32(v58, v58, 0x10uLL), 0x10uLL));
    v21 += v22;
    v17 -= 2;
    if (v17 < 2)
      break;
    v26 = *(unsigned __int16 *)v21;
    v47 += v23;
    if ((unsigned __int16)(v26 - 1) >= 0xFFFEu)
    {
      v18 = (int8x8_t *)((char *)v18 + v47);
      v20 = (int8x8_t *)((char *)v20 + v47);
      goto LABEL_31;
    }
  }
  v18 = (int8x8_t *)((char *)v18 + v23 + v47);
  v20 = (int8x8_t *)((char *)v20 + v23 + v47);
LABEL_34:
  v59 = v17 + a16;
  if (v59)
  {
    v60 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v61.i64[0] = 0x800000008000;
    v61.i64[1] = 0x800000008000;
    do
    {
      if (*v21)
      {
        a9.i32[0] = *v21;
        v62 = vrev16_s8(*v20);
        v63 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vrev16_s8(*v18), (uint16x4_t)vdup_lane_s8(*(int8x8_t *)a9.i8, 0)), v60), v61);
        *(uint16x4_t *)v63.i8 = vqshrn_n_u32(vsraq_n_u32(v63, v63, 0x10uLL), 0x10uLL);
        a9 = vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vmull_lane_u16(*(uint16x4_t *)v63.i8, (uint16x4_t)vmvn_s8(v62), 3), vmull_lane_u16((uint16x4_t)v62, (uint16x4_t)vmvn_s8(*(int8x8_t *)v63.i8), 3)), v60), v61);
        *(int8x8_t *)a9.i8 = vrev16_s8((int8x8_t)vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a9, (uint32x4_t)a9, 0x10uLL), 0x10uLL));
        *v20 = *(int8x8_t *)a9.i8;
      }
      v64 = &v18[a6];
      v21 += a6;
      if ((unint64_t)v64 >= v19)
        v65 = -(uint64_t)a5;
      else
        v65 = 0;
      v18 = &v64[v65];
      v20 += a6;
      --v59;
    }
    while (v59);
  }
  *result = v18;
  *a3 = v19;
  *a2 = v20;
  *a4 = v21;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)11,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, double a12, int8x8_t a13, uint64_t a14, unint64_t a15)
{
  int8x16_t v15;
  unint64_t v16;
  int8x8_t *v17;
  unint64_t v18;
  int8x8_t *v19;
  char *v20;
  unsigned int v21;
  int8x16_t v22;
  int8x16_t v23;
  unsigned int v24;
  int8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  int8x16_t v28;
  uint32x4_t v29;
  int32x4_t v30;
  __int32 v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  int8x16_t *v35;
  uint64_t v36;
  int64_t v37;
  unint64_t v38;
  int8x16_t v39;
  int8x16_t v40;
  uint16x8_t v41;
  int8x16_t *v42;
  int8x16_t *v43;
  int8x16_t *v44;
  int8x16_t *v45;
  int64_t v46;
  int64_t v47;
  uint64_t v48;
  int8x16_t v49;
  int16x8_t v50;
  uint16x8_t v51;
  int8x16_t v52;
  int8x16_t v53;
  uint32x4_t v54;
  uint32x4_t v55;
  uint32x4_t v56;
  uint32x4_t v57;
  uint32x4_t v58;
  uint16x8_t v59;
  uint16x8_t v60;
  uint16x8_t v61;
  uint64_t v62;
  __int16 v63;
  int8x8_t v64;
  int8x8_t v65;
  __int16 v66;
  uint32x4_t v67;
  int32x4_t v68;
  int8x8_t v69;
  int16x4_t v70;
  int8x8_t v71;
  int16x4_t v72;
  uint32x4_t v73;
  uint16x4_t v74;
  uint16x4_t v75;
  int8x8_t *v76;
  uint64_t v77;

  v16 = a15;
  v17 = *result;
  v18 = *a3;
  v19 = *a2;
  v20 = *a4;
  if (a15 < 2)
    goto LABEL_40;
  if (a7)
    v21 = 0;
  else
    v21 = -1;
  v22.i64[0] = 0xFFFF000000000000;
  v22.i64[1] = 0xFFFF000000000000;
  v23 = vandq_s8((int8x16_t)vdupq_n_s16(v21), v22);
  if (a8)
    v24 = 0;
  else
    v24 = -1;
  v25 = vandq_s8((int8x16_t)vdupq_n_s16(v24), v22);
  v26 = 2 * a6;
  v27 = 16 * a6;
  v28.i64[0] = -1;
  v28.i64[1] = -1;
  a13.i32[1] = 0;
  v29 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  v30.i64[0] = 0x800000008000;
  v30.i64[1] = 0x800000008000;
  while (1)
  {
    v31 = *(unsigned __int16 *)v20;
    if (!*(_WORD *)v20)
    {
      v42 = (int8x16_t *)&v20[v16];
      v43 = (int8x16_t *)v20;
      do
        v44 = v43++;
      while (v43 <= v42 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v44)) & 0x80) != 0);
      do
      {
        v45 = v44;
        v44 = (int8x16_t *)((char *)v44 + 4);
      }
      while (v44 <= v42 && !v45->i32[0]);
      if (v45 < v42)
      {
        while (!v45->i8[0])
        {
          v45 = (int8x16_t *)((char *)v45 + 1);
          if (v45 >= v42)
          {
            v45 = (int8x16_t *)&v20[v16];
            break;
          }
        }
      }
      v46 = (char *)v45 - v20;
      v47 = ((char *)v45 - v20) * a6;
      v17 += v47;
      v19 += v47;
      v20 += v47;
      v16 -= v46;
      goto LABEL_37;
    }
    if (v31 != 0xFFFF)
      break;
    v32 = (int8x16_t *)&v20[v16];
    v33 = (int8x16_t *)v20;
    do
      v34 = v33++;
    while (v33 <= v32 && (vminvq_u8((uint8x16_t)vceqq_s8(*v34, v28)) & 0x80) != 0);
    do
    {
      v35 = v34;
      v34 = (int8x16_t *)((char *)v34 + 4);
    }
    while (v34 <= v32 && v35->i32[0] == -1);
    if (v35 < v32)
    {
      while (v35->u8[0] == 255)
      {
        v35 = (int8x16_t *)((char *)v35 + 1);
        if (v35 >= v32)
        {
          v35 = (int8x16_t *)&v20[v16];
          break;
        }
      }
    }
    v36 = 0;
    v37 = (char *)v35 - v20;
    v38 = (char *)v35 - v20;
    do
    {
      v39 = vorrq_s8(v23, vrev16q_s8(*(int8x16_t *)&v17->i8[v36]));
      v40 = vorrq_s8(v25, vrev16q_s8(*(int8x16_t *)&v19->i8[v36]));
      v15 = vqtbl1q_s8(v39, (int8x16_t)xmmword_1850049F0);
      v41 = (uint16x8_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_1850049F0);
      *(int8x16_t *)&v19->i8[v36] = vrev16q_s8((int8x16_t)vqsubq_u16(vqaddq_u16(v41, (uint16x8_t)v15), vqaddq_u16(vqsubq_u16((uint16x8_t)v15, (uint16x8_t)v39), vqsubq_u16(v41, (uint16x8_t)v40))));
      v20 += v26;
      v38 -= 2;
      v36 += v27;
    }
    while (v38 > 1);
    v19 = (int8x8_t *)((char *)v19 + v36);
    v17 = (int8x8_t *)((char *)v17 + v36);
    v16 = v16 - v37 + v38;
LABEL_37:
    if (v16 <= 1)
      goto LABEL_40;
  }
  v48 = 0;
  while (1)
  {
    v49 = vrev16q_s8(*(int8x16_t *)&v19->i8[v48]);
    v15.i32[0] = v31;
    v50 = (int16x8_t)vqtbl1q_s8(v15, (int8x16_t)xmmword_1850049E0);
    v51 = (uint16x8_t)vorrq_s8(v23, vrev16q_s8(*(int8x16_t *)&v17->i8[v48]));
    v52 = (int8x16_t)vceqzq_s16(v50);
    v53 = vorrq_s8(vbicq_s8(v25, v52), v49);
    v54 = vmull_u16(*(uint16x4_t *)v51.i8, *(uint16x4_t *)v50.i8);
    v55 = vmull_high_u16(v51, (uint16x8_t)v50);
    v56 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v54, v29), v30);
    *(uint16x4_t *)v56.i8 = vqshrn_n_u32(vsraq_n_u32(v56, v56, 0x10uLL), 0x10uLL);
    v57 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v55, v29), v30);
    v58 = vsraq_n_u32(v57, v57, 0x10uLL);
    *(int16x4_t *)v59.i8 = vdup_lane_s16(*(int16x4_t *)v56.i8, 3);
    v60 = vqshrn_high_n_u32(*(uint16x4_t *)v56.i8, v58, 0x10uLL);
    v59.u64[1] = (unint64_t)vdup_lane_s16((int16x4_t)vqshrn_n_u32(v58, 0x10uLL), 3);
    v61 = (uint16x8_t)vqtbl1q_s8(v53, (int8x16_t)xmmword_1850049F0);
    v15 = (int8x16_t)vqsubq_u16(v59, v60);
    *(int8x16_t *)&v19->i8[v48] = vrev16q_s8(vbslq_s8(v52, v49, (int8x16_t)vqsubq_u16(vqaddq_u16(v61, v59), vqaddq_u16((uint16x8_t)v15, vqsubq_u16(v61, (uint16x8_t)v53)))));
    v20 += v26;
    v16 -= 2;
    if (v16 < 2)
      break;
    v31 = *(unsigned __int16 *)v20;
    v48 += v27;
    if ((unsigned __int16)(v31 - 1) >= 0xFFFEu)
    {
      v17 = (int8x8_t *)((char *)v17 + v48);
      v19 = (int8x8_t *)((char *)v19 + v48);
      goto LABEL_37;
    }
  }
  v17 = (int8x8_t *)((char *)v17 + v27 + v48);
  v19 = (int8x8_t *)((char *)v19 + v27 + v48);
LABEL_40:
  v62 = v16 + a14;
  if (v62)
  {
    if (a7)
      v63 = 0;
    else
      v63 = -1;
    v64.i32[0] = 0;
    v64.i16[2] = 0;
    v64.i16[3] = v63;
    v65.i32[0] = 0;
    v65.i16[2] = 0;
    if (a8)
      v66 = 0;
    else
      v66 = -1;
    v65.i16[3] = v66;
    v67 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v68.i64[0] = 0x800000008000;
    v68.i64[1] = 0x800000008000;
    do
    {
      if (*v20)
      {
        a13.i32[0] = *v20;
        v69 = vrev16_s8(*v19);
        v70 = (int16x4_t)vdup_lane_s8(a13, 0);
        v71 = (int8x8_t)vceqz_s16(v70);
        v72 = (int16x4_t)vorr_s8(vbic_s8(v65, v71), v69);
        v73 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(v64, vrev16_s8(*v17)), (uint16x4_t)v70), v67), v68);
        *(uint16x4_t *)v73.i8 = vqshrn_n_u32(vsraq_n_u32(v73, v73, 0x10uLL), 0x10uLL);
        v74 = (uint16x4_t)vdup_lane_s16(*(int16x4_t *)v73.i8, 3);
        v75 = (uint16x4_t)vdup_lane_s16(v72, 3);
        a13 = vrev16_s8(vbsl_s8(v71, v69, (int8x8_t)vqsub_u16(vqadd_u16(v75, v74), vqadd_u16(vqsub_u16(v74, *(uint16x4_t *)v73.i8), vqsub_u16(v75, (uint16x4_t)v72)))));
        *v19 = a13;
      }
      v76 = &v17[a6];
      v20 += a6;
      if ((unint64_t)v76 >= v18)
        v77 = -(uint64_t)a5;
      else
        v77 = 0;
      v17 = &v76[v77];
      v19 += a6;
      --v62;
    }
    while (v62);
  }
  *result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)12,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, double a8, double a9, double a10, uint32x4_t a11, double a12, double a13, double a14, uint16x8_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  unint64_t v18;
  int8x8_t *v19;
  unint64_t v20;
  int8x8_t *v21;
  char *v22;
  unsigned int v23;
  int8x16_t v24;
  int8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  int8x16_t v28;
  int32x4_t v29;
  unsigned __int32 v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  int8x16_t *v38;
  int8x16_t *v39;
  int8x16_t *v40;
  int8x16_t *v41;
  int64_t v42;
  int64_t v43;
  uint64_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint32x4_t v47;
  uint32x4_t v48;
  uint32x4_t v49;
  uint32x4_t v50;
  uint64_t v51;
  int8x8_t v52;
  __int16 v53;
  uint32x4_t v54;
  int32x4_t v55;
  int8x8_t *v56;
  uint64_t v57;

  v18 = a18;
  v19 = *result;
  v20 = *a3;
  v21 = *a2;
  v22 = *a4;
  if (a18 < 2)
    goto LABEL_37;
  if (a7)
    v23 = 0;
  else
    v23 = -1;
  v24.i64[0] = 0xFFFF000000000000;
  v24.i64[1] = 0xFFFF000000000000;
  v25 = vandq_s8((int8x16_t)vdupq_n_s16(v23), v24);
  v26 = 2 * a6;
  v27 = 16 * a6;
  v28.i64[0] = -1;
  v28.i64[1] = -1;
  a11 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  v29.i64[0] = 0x800000008000;
  v29.i64[1] = 0x800000008000;
  while (1)
  {
    v30 = *(unsigned __int16 *)v22;
    if (!*(_WORD *)v22)
    {
      v38 = (int8x16_t *)&v22[v18];
      v39 = (int8x16_t *)v22;
      do
        v40 = v39++;
      while (v39 <= v38 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v40)) & 0x80) != 0);
      do
      {
        v41 = v40;
        v40 = (int8x16_t *)((char *)v40 + 4);
      }
      while (v40 <= v38 && !v41->i32[0]);
      if (v41 < v38)
      {
        while (!v41->i8[0])
        {
          v41 = (int8x16_t *)((char *)v41 + 1);
          if (v41 >= v38)
          {
            v41 = (int8x16_t *)&v22[v18];
            break;
          }
        }
      }
      v42 = (char *)v41 - v22;
      v43 = ((char *)v41 - v22) * a6;
      v19 += v43;
      v21 += v43;
      v22 += v43;
      v18 -= v42;
      goto LABEL_34;
    }
    if (v30 != 0xFFFF)
      break;
    v31 = (int8x16_t *)&v22[v18];
    v32 = (int8x16_t *)v22;
    do
      v33 = v32++;
    while (v32 <= v31 && (vminvq_u8((uint8x16_t)vceqq_s8(*v33, v28)) & 0x80) != 0);
    do
    {
      v34 = v33;
      v33 = (int8x16_t *)((char *)v33 + 4);
    }
    while (v33 <= v31 && v34->i32[0] == -1);
    if (v34 < v31)
    {
      while (v34->u8[0] == 255)
      {
        v34 = (int8x16_t *)((char *)v34 + 1);
        if (v34 >= v31)
        {
          v34 = (int8x16_t *)&v22[v18];
          break;
        }
      }
    }
    v35 = 0;
    v36 = (char *)v34 - v22;
    v37 = (char *)v34 - v22;
    do
    {
      *(int8x16_t *)&v21->i8[v35] = vrev16q_s8((int8x16_t)vqaddq_u16((uint16x8_t)vrev16q_s8(*(int8x16_t *)&v21->i8[v35]), (uint16x8_t)vorrq_s8(v25, vrev16q_s8(*(int8x16_t *)&v19->i8[v35]))));
      v22 += v26;
      v37 -= 2;
      v35 += v27;
    }
    while (v37 > 1);
    v21 = (int8x8_t *)((char *)v21 + v35);
    v19 = (int8x8_t *)((char *)v19 + v35);
    v18 = v18 - v36 + v37;
LABEL_34:
    if (v18 <= 1)
      goto LABEL_37;
  }
  v44 = 0;
  while (1)
  {
    a15.i32[0] = v30;
    v45 = (uint16x8_t)vqtbl1q_s8((int8x16_t)a15, (int8x16_t)xmmword_1850049E0);
    v46 = (uint16x8_t)vorrq_s8(v25, vrev16q_s8(*(int8x16_t *)&v19->i8[v44]));
    v47 = vmull_u16(*(uint16x4_t *)v46.i8, *(uint16x4_t *)v45.i8);
    v48 = vmull_high_u16(v46, v45);
    v49 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v47, a11), v29);
    v50 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v48, a11), v29);
    a15 = vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v49, v49, 0x10uLL), 0x10uLL), vsraq_n_u32(v50, v50, 0x10uLL), 0x10uLL);
    *(int8x16_t *)&v21->i8[v44] = vrev16q_s8((int8x16_t)vqaddq_u16((uint16x8_t)vrev16q_s8(*(int8x16_t *)&v21->i8[v44]), a15));
    v22 += v26;
    v18 -= 2;
    if (v18 < 2)
      break;
    v30 = *(unsigned __int16 *)v22;
    v44 += v27;
    if ((unsigned __int16)(v30 - 1) >= 0xFFFEu)
    {
      v19 = (int8x8_t *)((char *)v19 + v44);
      v21 = (int8x8_t *)((char *)v21 + v44);
      goto LABEL_34;
    }
  }
  v19 = (int8x8_t *)((char *)v19 + v27 + v44);
  v21 = (int8x8_t *)((char *)v21 + v27 + v44);
LABEL_37:
  v51 = v18 + a17;
  if (v51)
  {
    v52.i32[0] = 0;
    v52.i16[2] = 0;
    if (a7)
      v53 = 0;
    else
      v53 = -1;
    v52.i16[3] = v53;
    v54 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v55.i64[0] = 0x800000008000;
    v55.i64[1] = 0x800000008000;
    do
    {
      if (*v22)
      {
        a11.i32[0] = *v22;
        a11 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(v52, vrev16_s8(*v19)), (uint16x4_t)vdup_lane_s8(*(int8x8_t *)a11.i8, 0)), v54), v55);
        *(int8x8_t *)a11.i8 = vrev16_s8((int8x8_t)vqadd_u16((uint16x4_t)vrev16_s8(*v21), vqshrn_n_u32(vsraq_n_u32(a11, a11, 0x10uLL), 0x10uLL)));
        *v21 = *(int8x8_t *)a11.i8;
      }
      v56 = &v19[a6];
      v22 += a6;
      if ((unint64_t)v56 >= v20)
        v57 = -(uint64_t)a5;
      else
        v57 = 0;
      v19 = &v56[v57];
      v21 += a6;
      --v51;
    }
    while (v51);
  }
  *result = v19;
  *a3 = v20;
  *a2 = v21;
  *a4 = v22;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)13,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, double a12, int32x4_t a13, uint64_t a14, unint64_t a15)
{
  int8x16_t v15;
  unint64_t v16;
  int8x8_t *v17;
  unint64_t v18;
  int8x8_t *v19;
  char *v20;
  unsigned int v21;
  int8x16_t v22;
  int8x16_t v23;
  unsigned int v24;
  int8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  uint32x4_t v28;
  int8x16_t v29;
  __int32 v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int8x16_t v42;
  uint16x8_t v43;
  uint32x4_t v44;
  uint32x4_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint32x4_t v49;
  uint32x4_t v50;
  uint32x4_t v51;
  uint32x4_t v52;
  int8x16_t *v53;
  int8x16_t *v54;
  int8x16_t *v55;
  int8x16_t *v56;
  int64_t v57;
  int64_t v58;
  uint64_t v59;
  int16x8_t v60;
  uint16x8_t v61;
  int8x16_t v62;
  uint32x4_t v63;
  uint32x4_t v64;
  uint32x4_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int8x16_t v68;
  int8x16_t v69;
  uint32x4_t v70;
  int8x16_t v71;
  uint32x4_t v72;
  int8x16_t v73;
  uint32x4_t v74;
  uint32x4_t v75;
  uint32x4_t v76;
  uint32x4_t v77;
  uint32x4_t v78;
  int8x16_t v79;
  uint64_t v80;
  __int16 v81;
  int8x8_t v82;
  int8x8_t v83;
  __int16 v84;
  uint32x4_t v85;
  int32x4_t v86;
  int16x4_t v87;
  int16x4_t v88;
  int16x4_t v89;
  int16x4_t v90;
  int8x8_t v91;
  uint16x4_t v92;
  uint32x4_t v93;
  uint32x4_t v94;
  int8x8_t *v95;
  uint64_t v96;

  v16 = a15;
  v17 = *result;
  v18 = *a3;
  v19 = *a2;
  v20 = *a4;
  if (a15 < 2)
    goto LABEL_40;
  if (a7)
    v21 = 0;
  else
    v21 = -1;
  v22.i64[0] = 0xFFFF000000000000;
  v22.i64[1] = 0xFFFF000000000000;
  v23 = vandq_s8((int8x16_t)vdupq_n_s16(v21), v22);
  if (a8)
    v24 = 0;
  else
    v24 = -1;
  v25 = vandq_s8((int8x16_t)vdupq_n_s16(v24), v22);
  v26 = 2 * a6;
  v27 = 16 * a6;
  v28 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  a13.i64[0] = 0x800000008000;
  a13.i64[1] = 0x800000008000;
  v29.i64[0] = -1;
  v29.i64[1] = -1;
  while (1)
  {
    v30 = *(unsigned __int16 *)v20;
    if (!*(_WORD *)v20)
    {
      v53 = (int8x16_t *)&v20[v16];
      v54 = (int8x16_t *)v20;
      do
        v55 = v54++;
      while (v54 <= v53 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v55)) & 0x80) != 0);
      do
      {
        v56 = v55;
        v55 = (int8x16_t *)((char *)v55 + 4);
      }
      while (v55 <= v53 && !v56->i32[0]);
      if (v56 < v53)
      {
        while (!v56->i8[0])
        {
          v56 = (int8x16_t *)((char *)v56 + 1);
          if (v56 >= v53)
          {
            v56 = (int8x16_t *)&v20[v16];
            break;
          }
        }
      }
      v57 = (char *)v56 - v20;
      v58 = ((char *)v56 - v20) * a6;
      v17 += v58;
      v19 += v58;
      v20 += v58;
      v16 -= v57;
      goto LABEL_37;
    }
    if (v30 != 0xFFFF)
      break;
    v31 = (int8x16_t *)&v20[v16];
    v32 = (int8x16_t *)v20;
    do
      v33 = v32++;
    while (v32 <= v31 && (vminvq_u8((uint8x16_t)vceqq_s8(*v33, v29)) & 0x80) != 0);
    do
    {
      v34 = v33;
      v33 = (int8x16_t *)((char *)v33 + 4);
    }
    while (v33 <= v31 && v34->i32[0] == -1);
    if (v34 < v31)
    {
      while (v34->u8[0] == 255)
      {
        v34 = (int8x16_t *)((char *)v34 + 1);
        if (v34 >= v31)
        {
          v34 = (int8x16_t *)&v20[v16];
          break;
        }
      }
    }
    v35 = 0;
    v36 = (char *)v34 - v20;
    v37 = (char *)v34 - v20;
    do
    {
      v38 = vorrq_s8(v23, vrev16q_s8(*(int8x16_t *)&v17->i8[v35]));
      v39 = vorrq_s8(v25, vrev16q_s8(*(int8x16_t *)&v19->i8[v35]));
      v40 = (int16x8_t)vqtbl1q_s8(v38, (int8x16_t)xmmword_1850049F0);
      v41 = (int16x8_t)vqtbl1q_s8(v39, (int8x16_t)xmmword_1850049F0);
      v42 = (int8x16_t)vceqzq_s16(v41);
      v43 = (uint16x8_t)vbicq_s8(v39, v42);
      v44 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v38.i8, *(uint16x4_t *)v43.i8), v28), a13);
      v45 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16((uint16x8_t)v38, v43), v28), a13);
      v46 = vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v44, v44, 0x10uLL), 0x10uLL), vsraq_n_u32(v45, v45, 0x10uLL), 0x10uLL);
      v47 = (uint16x8_t)vmvnq_s8((int8x16_t)v41);
      v48 = (uint16x8_t)vmvnq_s8((int8x16_t)v40);
      v49 = vqaddq_u32(vmull_u16(*(uint16x4_t *)v38.i8, *(uint16x4_t *)v47.i8), vmull_u16(*(uint16x4_t *)v43.i8, *(uint16x4_t *)v48.i8));
      v50 = vqaddq_u32(vmull_high_u16((uint16x8_t)v38, v47), vmull_high_u16(v43, v48));
      v51 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v49, v28), a13);
      v52 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v50, v28), a13);
      v15 = (int8x16_t)vceqzq_s16(v40);
      *(int8x16_t *)&v19->i8[v35] = vrev16q_s8(vbslq_s8(v15, v39, vbslq_s8(v42, v38, (int8x16_t)vqaddq_u16(v46, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v51, v51, 0x10uLL), 0x10uLL), vsraq_n_u32(v52, v52, 0x10uLL), 0x10uLL)))));
      v20 += v26;
      v37 -= 2;
      v35 += v27;
    }
    while (v37 > 1);
    v19 = (int8x8_t *)((char *)v19 + v35);
    v17 = (int8x8_t *)((char *)v17 + v35);
    v16 = v16 - v36 + v37;
LABEL_37:
    if (v16 <= 1)
      goto LABEL_40;
  }
  v59 = 0;
  while (1)
  {
    v15.i32[0] = v30;
    v60 = (int16x8_t)vqtbl1q_s8(v15, (int8x16_t)xmmword_1850049E0);
    v61 = (uint16x8_t)vorrq_s8(v23, vrev16q_s8(*(int8x16_t *)&v17->i8[v59]));
    v62 = vorrq_s8(vbicq_s8(v25, (int8x16_t)vceqzq_s16(v60)), vrev16q_s8(*(int8x16_t *)&v19->i8[v59]));
    v63 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v61.i8, *(uint16x4_t *)v60.i8), v28), a13);
    *(uint16x4_t *)v63.i8 = vqshrn_n_u32(vsraq_n_u32(v63, v63, 0x10uLL), 0x10uLL);
    v64 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16(v61, (uint16x8_t)v60), v28), a13);
    v65 = vsraq_n_u32(v64, v64, 0x10uLL);
    *(uint16x4_t *)v61.i8 = vqshrn_n_u32(v65, 0x10uLL);
    *(int16x4_t *)v66.i8 = vdup_lane_s16(*(int16x4_t *)v63.i8, 3);
    v67 = (int16x8_t)vqtbl1q_s8(v62, (int8x16_t)xmmword_1850049F0);
    v68 = (int8x16_t)vceqzq_s16(v67);
    v69 = vbicq_s8(v62, v68);
    v70 = vmull_u16(*(uint16x4_t *)v63.i8, *(uint16x4_t *)v69.i8);
    v71 = vmvnq_s8((int8x16_t)v67);
    v72 = vmull_u16(*(uint16x4_t *)v63.i8, *(uint16x4_t *)v71.i8);
    v66.u64[1] = (unint64_t)vdup_lane_s16(*(int16x4_t *)v61.i8, 3);
    v73 = (int8x16_t)vqshrn_high_n_u32(*(uint16x4_t *)v63.i8, v65, 0x10uLL);
    v65.i64[0] = vextq_s8(v69, v69, 8uLL).u64[0];
    v74 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v70, v28), a13);
    v75 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v61.i8, *(uint16x4_t *)v65.i8), v28), a13);
    v76 = vqaddq_u32(vmull_u16(*(uint16x4_t *)v61.i8, (uint16x4_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL)), vmull_u16(*(uint16x4_t *)v65.i8, (uint16x4_t)vmvn_s8((int8x8_t)v66.u64[1])));
    v77 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(v72, vmull_u16(*(uint16x4_t *)v69.i8, (uint16x4_t)vmvn_s8(*(int8x8_t *)v66.i8))), v28), a13);
    v78 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v76, v28), a13);
    v79 = vbslq_s8(v68, v73, (int8x16_t)vqaddq_u16(vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v74, v74, 0x10uLL), 0x10uLL), vsraq_n_u32(v75, v75, 0x10uLL), 0x10uLL), vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v77, v77, 0x10uLL), 0x10uLL), vsraq_n_u32(v78, v78, 0x10uLL), 0x10uLL)));
    v15 = (int8x16_t)vceqzq_s16(v66);
    *(int8x16_t *)&v19->i8[v59] = vrev16q_s8(vbslq_s8(v15, v62, v79));
    v20 += v26;
    v16 -= 2;
    if (v16 < 2)
      break;
    v30 = *(unsigned __int16 *)v20;
    v59 += v27;
    if ((unsigned __int16)(v30 - 1) >= 0xFFFEu)
    {
      v17 = (int8x8_t *)((char *)v17 + v59);
      v19 = (int8x8_t *)((char *)v19 + v59);
      goto LABEL_37;
    }
  }
  v17 = (int8x8_t *)((char *)v17 + v27 + v59);
  v19 = (int8x8_t *)((char *)v19 + v27 + v59);
LABEL_40:
  v80 = v16 + a14;
  if (v80)
  {
    if (a7)
      v81 = 0;
    else
      v81 = -1;
    v82.i32[0] = 0;
    v82.i16[2] = 0;
    v82.i16[3] = v81;
    v83.i32[0] = 0;
    v83.i16[2] = 0;
    if (a8)
      v84 = 0;
    else
      v84 = -1;
    v83.i16[3] = v84;
    v85 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v86.i64[0] = 0x800000008000;
    v86.i64[1] = 0x800000008000;
    do
    {
      if (*v20)
      {
        a13.i32[0] = *v20;
        v87 = (int16x4_t)vdup_lane_s8(*(int8x8_t *)a13.i8, 0);
        v88 = (int16x4_t)vorr_s8(vbic_s8(v83, (int8x8_t)vceqz_s16(v87)), vrev16_s8(*v19));
        a13 = vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(v82, vrev16_s8(*v17)), (uint16x4_t)v87), v85), v86);
        *(uint16x4_t *)a13.i8 = vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a13, (uint32x4_t)a13, 0x10uLL), 0x10uLL);
        v89 = vdup_lane_s16(*(int16x4_t *)a13.i8, 3);
        v90 = vdup_lane_s16(v88, 3);
        v91 = (int8x8_t)vceqz_s16(v90);
        v92 = (uint16x4_t)vbic_s8((int8x8_t)v88, v91);
        v93 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)a13.i8, v92), v85), v86);
        v94 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vmull_u16(*(uint16x4_t *)a13.i8, (uint16x4_t)vmvn_s8((int8x8_t)v90)), vmull_u16(v92, (uint16x4_t)vmvn_s8((int8x8_t)v89))), v85), v86);
        *(int8x8_t *)a13.i8 = vrev16_s8(vbsl_s8((int8x8_t)vceqz_s16(v89), (int8x8_t)v88, vbsl_s8(v91, *(int8x8_t *)a13.i8, (int8x8_t)vqadd_u16(vqshrn_n_u32(vsraq_n_u32(v93, v93, 0x10uLL), 0x10uLL), vqshrn_n_u32(vsraq_n_u32(v94, v94, 0x10uLL), 0x10uLL)))));
        *v19 = *(int8x8_t *)a13.i8;
      }
      v95 = &v17[a6];
      v20 += a6;
      if ((unint64_t)v95 >= v18)
        v96 = -(uint64_t)a5;
      else
        v96 = 0;
      v17 = &v95[v96];
      v19 += a6;
      --v80;
    }
    while (v80);
  }
  *result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)14,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, double a12, int32x4_t a13, uint64_t a14, unint64_t a15)
{
  int8x16_t v15;
  unint64_t v16;
  int8x8_t *v17;
  unint64_t v18;
  int8x8_t *v19;
  char *v20;
  unsigned int v21;
  int8x16_t v22;
  int8x16_t v23;
  unsigned int v24;
  int8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  uint32x4_t v28;
  int8x16_t v29;
  __int32 v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  int8x16_t v38;
  int8x16_t v39;
  uint16x8_t v40;
  uint32x4_t v41;
  uint32x4_t v42;
  int8x16_t *v43;
  int8x16_t *v44;
  int8x16_t *v45;
  int8x16_t *v46;
  int64_t v47;
  int64_t v48;
  uint64_t v49;
  int16x8_t v50;
  uint16x8_t v51;
  int8x16_t v52;
  uint32x4_t v53;
  uint32x4_t v54;
  uint32x4_t v55;
  uint32x4_t v56;
  uint32x4_t v57;
  int16x8_t v58;
  int8x16_t v59;
  uint32x4_t v60;
  uint16x8_t v61;
  uint32x4_t v62;
  uint32x4_t v63;
  uint32x4_t v64;
  int8x16_t v65;
  uint64_t v66;
  __int16 v67;
  int8x8_t v68;
  int8x8_t v69;
  __int16 v70;
  uint32x4_t v71;
  int32x4_t v72;
  int16x4_t v73;
  int16x4_t v74;
  uint16x4_t v75;
  uint32x4_t v76;
  int8x8_t *v77;
  uint64_t v78;

  v16 = a15;
  v17 = *result;
  v18 = *a3;
  v19 = *a2;
  v20 = *a4;
  if (a15 < 2)
    goto LABEL_40;
  if (a7)
    v21 = 0;
  else
    v21 = -1;
  v22.i64[0] = 0xFFFF000000000000;
  v22.i64[1] = 0xFFFF000000000000;
  v23 = vandq_s8((int8x16_t)vdupq_n_s16(v21), v22);
  if (a8)
    v24 = 0;
  else
    v24 = -1;
  v25 = vandq_s8((int8x16_t)vdupq_n_s16(v24), v22);
  v26 = 2 * a6;
  v27 = 16 * a6;
  v28 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  a13.i64[0] = 0x800000008000;
  a13.i64[1] = 0x800000008000;
  v29.i64[0] = -1;
  v29.i64[1] = -1;
  while (1)
  {
    v30 = *(unsigned __int16 *)v20;
    if (!*(_WORD *)v20)
    {
      v43 = (int8x16_t *)&v20[v16];
      v44 = (int8x16_t *)v20;
      do
        v45 = v44++;
      while (v44 <= v43 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v45)) & 0x80) != 0);
      do
      {
        v46 = v45;
        v45 = (int8x16_t *)((char *)v45 + 4);
      }
      while (v45 <= v43 && !v46->i32[0]);
      if (v46 < v43)
      {
        while (!v46->i8[0])
        {
          v46 = (int8x16_t *)((char *)v46 + 1);
          if (v46 >= v43)
          {
            v46 = (int8x16_t *)&v20[v16];
            break;
          }
        }
      }
      v47 = (char *)v46 - v20;
      v48 = ((char *)v46 - v20) * a6;
      v17 += v48;
      v19 += v48;
      v20 += v48;
      v16 -= v47;
      goto LABEL_37;
    }
    if (v30 != 0xFFFF)
      break;
    v31 = (int8x16_t *)&v20[v16];
    v32 = (int8x16_t *)v20;
    do
      v33 = v32++;
    while (v32 <= v31 && (vminvq_u8((uint8x16_t)vceqq_s8(*v33, v29)) & 0x80) != 0);
    do
    {
      v34 = v33;
      v33 = (int8x16_t *)((char *)v33 + 4);
    }
    while (v33 <= v31 && v34->i32[0] == -1);
    if (v34 < v31)
    {
      while (v34->u8[0] == 255)
      {
        v34 = (int8x16_t *)((char *)v34 + 1);
        if (v34 >= v31)
        {
          v34 = (int8x16_t *)&v20[v16];
          break;
        }
      }
    }
    v35 = 0;
    v36 = (char *)v34 - v20;
    v37 = (char *)v34 - v20;
    do
    {
      v38 = vorrq_s8(v23, vrev16q_s8(*(int8x16_t *)&v17->i8[v35]));
      v39 = vorrq_s8(v25, vrev16q_s8(*(int8x16_t *)&v19->i8[v35]));
      v40 = (uint16x8_t)vbicq_s8(v39, (int8x16_t)vceqzq_s16((int16x8_t)vqtbl1q_s8(v39, (int8x16_t)xmmword_1850049F0)));
      v41 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v38.i8, *(uint16x4_t *)v40.i8), v28), a13);
      v42 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16((uint16x8_t)v38, v40), v28), a13);
      v15 = (int8x16_t)vceqzq_s16((int16x8_t)vqtbl1q_s8(v38, (int8x16_t)xmmword_1850049F0));
      *(int8x16_t *)&v19->i8[v35] = vrev16q_s8(vbslq_s8(v15, v39, (int8x16_t)vqaddq_u16(vqsubq_u16((uint16x8_t)v38, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v41, v41, 0x10uLL), 0x10uLL), vsraq_n_u32(v42, v42, 0x10uLL), 0x10uLL)), v40)));
      v20 += v26;
      v37 -= 2;
      v35 += v27;
    }
    while (v37 > 1);
    v19 = (int8x8_t *)((char *)v19 + v35);
    v17 = (int8x8_t *)((char *)v17 + v35);
    v16 = v16 - v36 + v37;
LABEL_37:
    if (v16 <= 1)
      goto LABEL_40;
  }
  v49 = 0;
  while (1)
  {
    v15.i32[0] = v30;
    v50 = (int16x8_t)vqtbl1q_s8(v15, (int8x16_t)xmmword_1850049E0);
    v51 = (uint16x8_t)vorrq_s8(v23, vrev16q_s8(*(int8x16_t *)&v17->i8[v49]));
    v52 = vorrq_s8(vbicq_s8(v25, (int8x16_t)vceqzq_s16(v50)), vrev16q_s8(*(int8x16_t *)&v19->i8[v49]));
    v53 = vmull_u16(*(uint16x4_t *)v51.i8, *(uint16x4_t *)v50.i8);
    v54 = vmull_high_u16(v51, (uint16x8_t)v50);
    v55 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v53, v28), a13);
    *(uint16x4_t *)v55.i8 = vqshrn_n_u32(vsraq_n_u32(v55, v55, 0x10uLL), 0x10uLL);
    v56 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v54, v28), a13);
    v57 = vsraq_n_u32(v56, v56, 0x10uLL);
    *(uint16x4_t *)v53.i8 = vqshrn_n_u32(v57, 0x10uLL);
    *(int16x4_t *)v58.i8 = vdup_lane_s16(*(int16x4_t *)v55.i8, 3);
    v59 = vbicq_s8(v52, (int8x16_t)vceqzq_s16((int16x8_t)vqtbl1q_s8(v52, (int8x16_t)xmmword_1850049F0)));
    v60 = vmull_u16(*(uint16x4_t *)v55.i8, *(uint16x4_t *)v59.i8);
    v61 = vqshrn_high_n_u32(*(uint16x4_t *)v55.i8, v57, 0x10uLL);
    v58.u64[1] = (unint64_t)vdup_lane_s16(*(int16x4_t *)v53.i8, 3);
    v62 = vmull_u16(*(uint16x4_t *)v53.i8, (uint16x4_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL));
    v63 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v60, v28), a13);
    v64 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v62, v28), a13);
    v65 = (int8x16_t)vqaddq_u16(vqsubq_u16(v61, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v63, v63, 0x10uLL), 0x10uLL), vsraq_n_u32(v64, v64, 0x10uLL), 0x10uLL)), (uint16x8_t)v59);
    v15 = (int8x16_t)vceqzq_s16(v58);
    *(int8x16_t *)&v19->i8[v49] = vrev16q_s8(vbslq_s8(v15, v52, v65));
    v20 += v26;
    v16 -= 2;
    if (v16 < 2)
      break;
    v30 = *(unsigned __int16 *)v20;
    v49 += v27;
    if ((unsigned __int16)(v30 - 1) >= 0xFFFEu)
    {
      v17 = (int8x8_t *)((char *)v17 + v49);
      v19 = (int8x8_t *)((char *)v19 + v49);
      goto LABEL_37;
    }
  }
  v17 = (int8x8_t *)((char *)v17 + v27 + v49);
  v19 = (int8x8_t *)((char *)v19 + v27 + v49);
LABEL_40:
  v66 = v16 + a14;
  if (v66)
  {
    if (a7)
      v67 = 0;
    else
      v67 = -1;
    v68.i32[0] = 0;
    v68.i16[2] = 0;
    v68.i16[3] = v67;
    v69.i32[0] = 0;
    v69.i16[2] = 0;
    if (a8)
      v70 = 0;
    else
      v70 = -1;
    v69.i16[3] = v70;
    v71 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v72.i64[0] = 0x800000008000;
    v72.i64[1] = 0x800000008000;
    do
    {
      if (*v20)
      {
        a13.i32[0] = *v20;
        v73 = (int16x4_t)vdup_lane_s8(*(int8x8_t *)a13.i8, 0);
        v74 = (int16x4_t)vorr_s8(vbic_s8(v69, (int8x8_t)vceqz_s16(v73)), vrev16_s8(*v19));
        a13 = vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(v68, vrev16_s8(*v17)), (uint16x4_t)v73), v71), v72);
        *(uint16x4_t *)a13.i8 = vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a13, (uint32x4_t)a13, 0x10uLL), 0x10uLL);
        v75 = (uint16x4_t)vbic_s8((int8x8_t)v74, (int8x8_t)vdup_lane_s16(vceqz_s16(v74), 3));
        v76 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)a13.i8, v75), v71), v72);
        *(int8x8_t *)a13.i8 = vrev16_s8(vbsl_s8((int8x8_t)vdup_lane_s16(vceqz_s16(*(int16x4_t *)a13.i8), 3), (int8x8_t)v74, (int8x8_t)vqadd_u16(vqsub_u16(*(uint16x4_t *)a13.i8, vqshrn_n_u32(vsraq_n_u32(v76, v76, 0x10uLL), 0x10uLL)), v75)));
        *v19 = *(int8x8_t *)a13.i8;
      }
      v77 = &v17[a6];
      v20 += a6;
      if ((unint64_t)v77 >= v18)
        v78 = -(uint64_t)a5;
      else
        v78 = 0;
      v17 = &v77[v78];
      v19 += a6;
      --v66;
    }
    while (v66);
  }
  *result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)15,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, double a12, double a13, int32x4_t a14, uint64_t a15, unint64_t a16)
{
  int8x16_t v16;
  unint64_t v17;
  int8x8_t *v18;
  unint64_t v19;
  int8x8_t *v20;
  char *v21;
  unsigned int v22;
  int8x16_t v23;
  int8x16_t v24;
  unsigned int v25;
  int8x16_t v26;
  uint64_t v27;
  uint64_t v28;
  uint32x4_t v29;
  int8x16_t v30;
  __int32 v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  int8x16_t *v35;
  uint64_t v36;
  int64_t v37;
  unint64_t v38;
  int16x8_t v39;
  int8x16_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  int16x8_t v47;
  int8x16_t v48;
  int8x16_t v49;
  uint32x4_t v50;
  uint32x4_t v51;
  int8x16_t *v52;
  int8x16_t *v53;
  int8x16_t *v54;
  int8x16_t *v55;
  int64_t v56;
  int64_t v57;
  uint64_t v58;
  int16x8_t v59;
  uint16x8_t v60;
  int8x16_t v61;
  uint32x4_t v62;
  uint32x4_t v63;
  uint32x4_t v64;
  uint16x8_t v65;
  uint16x4_t v66;
  int8x16_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  uint16x8_t v71;
  int8x16_t v72;
  uint32x4_t v73;
  uint32x4_t v74;
  int16x8_t v75;
  int8x16_t v76;
  int8x16_t v77;
  uint32x4_t v78;
  uint32x4_t v79;
  uint32x4_t v80;
  int8x16_t v81;
  uint64_t v82;
  __int16 v83;
  int8x8_t v84;
  __int16 v85;
  int8x8_t v86;
  uint32x4_t v87;
  int32x4_t v88;
  int16x4_t v89;
  int16x4_t v90;
  uint32x4_t v91;
  int16x4_t v92;
  int16x4_t v93;
  int16x4_t v94;
  int16x4_t v95;
  int8x16_t v96;
  uint32x4_t v97;
  int8x8_t *v98;
  uint64_t v99;

  v17 = a16;
  v18 = *result;
  v19 = *a3;
  v20 = *a2;
  v21 = *a4;
  if (a16 < 2)
    goto LABEL_40;
  if (a7)
    v22 = 0;
  else
    v22 = -1;
  v23.i64[0] = 0xFFFF000000000000;
  v23.i64[1] = 0xFFFF000000000000;
  v24 = vandq_s8((int8x16_t)vdupq_n_s16(v22), v23);
  if (a8)
    v25 = 0;
  else
    v25 = -1;
  v26 = vandq_s8((int8x16_t)vdupq_n_s16(v25), v23);
  v27 = 2 * a6;
  v28 = 16 * a6;
  v29 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  a14.i64[0] = 0x800000008000;
  a14.i64[1] = 0x800000008000;
  v30.i64[0] = -1;
  v30.i64[1] = -1;
  while (1)
  {
    v31 = *(unsigned __int16 *)v21;
    if (!*(_WORD *)v21)
    {
      v52 = (int8x16_t *)&v21[v17];
      v53 = (int8x16_t *)v21;
      do
        v54 = v53++;
      while (v53 <= v52 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v54)) & 0x80) != 0);
      do
      {
        v55 = v54;
        v54 = (int8x16_t *)((char *)v54 + 4);
      }
      while (v54 <= v52 && !v55->i32[0]);
      if (v55 < v52)
      {
        while (!v55->i8[0])
        {
          v55 = (int8x16_t *)((char *)v55 + 1);
          if (v55 >= v52)
          {
            v55 = (int8x16_t *)&v21[v17];
            break;
          }
        }
      }
      v56 = (char *)v55 - v21;
      v57 = ((char *)v55 - v21) * a6;
      v18 += v57;
      v20 += v57;
      v21 += v57;
      v17 -= v56;
      goto LABEL_37;
    }
    if (v31 != 0xFFFF)
      break;
    v32 = (int8x16_t *)&v21[v17];
    v33 = (int8x16_t *)v21;
    do
      v34 = v33++;
    while (v33 <= v32 && (vminvq_u8((uint8x16_t)vceqq_s8(*v34, v30)) & 0x80) != 0);
    do
    {
      v35 = v34;
      v34 = (int8x16_t *)((char *)v34 + 4);
    }
    while (v34 <= v32 && v35->i32[0] == -1);
    if (v35 < v32)
    {
      while (v35->u8[0] == 255)
      {
        v35 = (int8x16_t *)((char *)v35 + 1);
        if (v35 >= v32)
        {
          v35 = (int8x16_t *)&v21[v17];
          break;
        }
      }
    }
    v36 = 0;
    v37 = (char *)v35 - v21;
    v38 = (char *)v35 - v21;
    do
    {
      v39 = (int16x8_t)vorrq_s8(v24, vrev16q_s8(*(int8x16_t *)&v18->i8[v36]));
      v40 = vorrq_s8(v26, vrev16q_s8(*(int8x16_t *)&v20->i8[v36]));
      v41 = (int16x8_t)vqtbl1q_s8((int8x16_t)v39, (int8x16_t)xmmword_1850049F0);
      v42 = (int16x8_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_1850049F0);
      v43 = (int16x8_t)vminq_u16((uint16x8_t)v39, (uint16x8_t)v41);
      v44 = (int16x8_t)vminq_u16((uint16x8_t)v40, (uint16x8_t)v42);
      v45 = (uint16x8_t)vsubq_s16(v41, v43);
      v46 = (uint16x8_t)vsubq_s16(v42, v44);
      v47 = (int16x8_t)vcgtq_u16(vrhaddq_u16((uint16x8_t)v42, (uint16x8_t)0), (uint16x8_t)v44);
      v48 = (int8x16_t)vqaddq_u32(vmull_u16(*(uint16x4_t *)v45.i8, *(uint16x4_t *)v44.i8), vmull_u16(*(uint16x4_t *)v46.i8, *(uint16x4_t *)v43.i8));
      v49 = (int8x16_t)vqaddq_u32(vmull_high_u16(v45, (uint16x8_t)v44), vmull_high_u16(v46, (uint16x8_t)v43));
      v50 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32((uint32x4_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v47.i8), v48, (int8x16_t)vqsubq_u32(vmull_lane_u16((uint16x4_t)vdup_lane_s16(*(int16x4_t *)v39.i8, 3), *(uint16x4_t *)v40.i8, 3), (uint32x4_t)v48)), v29), a14);
      v51 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32((uint32x4_t)vbslq_s8((int8x16_t)vmovl_high_s16(v47), v49, (int8x16_t)vqsubq_u32(vmull_laneq_u16((uint16x4_t)vdup_laneq_s16(v39, 7), (uint16x8_t)v40, 7), (uint32x4_t)v49)), v29), a14);
      v16 = (int8x16_t)vceqzq_s16(v42);
      *(int8x16_t *)&v20->i8[v36] = vrev16q_s8(vbslq_s8((int8x16_t)vceqzq_s16(v41), v40, vbslq_s8(v16, (int8x16_t)v39, (int8x16_t)vsubq_s16(vaddq_s16(v44, v43), (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v50, v50, 0x10uLL), 0x10uLL), vsraq_n_u32(v51, v51, 0x10uLL), 0x10uLL)))));
      v21 += v27;
      v38 -= 2;
      v36 += v28;
    }
    while (v38 > 1);
    v20 = (int8x8_t *)((char *)v20 + v36);
    v18 = (int8x8_t *)((char *)v18 + v36);
    v17 = v17 - v37 + v38;
LABEL_37:
    if (v17 <= 1)
      goto LABEL_40;
  }
  v58 = 0;
  while (1)
  {
    v16.i32[0] = v31;
    v59 = (int16x8_t)vqtbl1q_s8(v16, (int8x16_t)xmmword_1850049E0);
    v60 = (uint16x8_t)vorrq_s8(v24, vrev16q_s8(*(int8x16_t *)&v18->i8[v58]));
    v61 = vorrq_s8(vbicq_s8(v26, (int8x16_t)vceqzq_s16(v59)), vrev16q_s8(*(int8x16_t *)&v20->i8[v58]));
    v62 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v60.i8, *(uint16x4_t *)v59.i8), v29), a14);
    *(uint16x4_t *)v62.i8 = vqshrn_n_u32(vsraq_n_u32(v62, v62, 0x10uLL), 0x10uLL);
    v63 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16(v60, (uint16x8_t)v59), v29), a14);
    v64 = vsraq_n_u32(v63, v63, 0x10uLL);
    *(uint16x4_t *)v59.i8 = vqshrn_n_u32(v64, 0x10uLL);
    *(int16x4_t *)v65.i8 = vdup_lane_s16(*(int16x4_t *)v62.i8, 3);
    v66 = vmin_u16(*(uint16x4_t *)v62.i8, *(uint16x4_t *)v65.i8);
    v67 = (int8x16_t)vqshrn_high_n_u32(*(uint16x4_t *)v62.i8, v64, 0x10uLL);
    v65.u64[1] = (unint64_t)vdup_lane_s16(*(int16x4_t *)v59.i8, 3);
    v68 = (int16x8_t)vqtbl1q_s8(v61, (int8x16_t)xmmword_1850049F0);
    v69 = (int16x8_t)vminq_u16((uint16x8_t)v67, v65);
    v70 = (int16x8_t)vminq_u16((uint16x8_t)v61, (uint16x8_t)v68);
    v71 = (uint16x8_t)vsubq_s16((int16x8_t)v65, v69);
    v72 = (int8x16_t)vsubq_s16(v68, v70);
    v73 = vmull_u16(*(uint16x4_t *)v72.i8, v66);
    v74 = vmull_u16((uint16x4_t)*(_OWORD *)&vextq_s8(v72, v72, 8uLL), vmin_u16(*(uint16x4_t *)v59.i8, (uint16x4_t)v65.u64[1]));
    v75 = (int16x8_t)vcgtq_u16(vrhaddq_u16((uint16x8_t)v68, (uint16x8_t)0), (uint16x8_t)v70);
    v76 = (int8x16_t)vqaddq_u32(vmull_u16(*(uint16x4_t *)v71.i8, *(uint16x4_t *)v70.i8), v73);
    v77 = (int8x16_t)vqaddq_u32(vmull_high_u16(v71, (uint16x8_t)v70), v74);
    v78 = (uint32x4_t)vbslq_s8((int8x16_t)vmovl_high_s16(v75), v77, (int8x16_t)vqsubq_u32(vmull_laneq_u16((uint16x4_t)v65.u64[1], (uint16x8_t)v61, 7), (uint32x4_t)v77));
    v79 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32((uint32x4_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v75.i8), v76, (int8x16_t)vqsubq_u32(vmull_lane_u16(*(uint16x4_t *)v65.i8, *(uint16x4_t *)v61.i8, 3), (uint32x4_t)v76)), v29), a14);
    v80 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v78, v29), a14);
    v81 = (int8x16_t)vsubq_s16(vaddq_s16(v70, v69), (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v79, v79, 0x10uLL), 0x10uLL), vsraq_n_u32(v80, v80, 0x10uLL), 0x10uLL));
    v16 = (int8x16_t)vceqzq_s16(v68);
    *(int8x16_t *)&v20->i8[v58] = vrev16q_s8(vbslq_s8((int8x16_t)vceqzq_s16((int16x8_t)v65), v61, vbslq_s8(v16, v67, v81)));
    v21 += v27;
    v17 -= 2;
    if (v17 < 2)
      break;
    v31 = *(unsigned __int16 *)v21;
    v58 += v28;
    if ((unsigned __int16)(v31 - 1) >= 0xFFFEu)
    {
      v18 = (int8x8_t *)((char *)v18 + v58);
      v20 = (int8x8_t *)((char *)v20 + v58);
      goto LABEL_37;
    }
  }
  v18 = (int8x8_t *)((char *)v18 + v28 + v58);
  v20 = (int8x8_t *)((char *)v20 + v28 + v58);
LABEL_40:
  v82 = v17 + a15;
  if (v82)
  {
    if (a7)
      v83 = 0;
    else
      v83 = -1;
    v84.i32[0] = 0;
    v84.i16[2] = 0;
    v84.i16[3] = v83;
    if (a8)
      v85 = 0;
    else
      v85 = -1;
    v86.i32[0] = 0;
    v86.i16[2] = 0;
    v86.i16[3] = v85;
    v87 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v88.i64[0] = 0x800000008000;
    v88.i64[1] = 0x800000008000;
    do
    {
      if (*v21)
      {
        a14.i32[0] = *v21;
        v89 = (int16x4_t)vdup_lane_s8(*(int8x8_t *)a14.i8, 0);
        v90 = (int16x4_t)vorr_s8(vbic_s8(v86, (int8x8_t)vceqz_s16(v89)), vrev16_s8(*v20));
        v91 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(v84, vrev16_s8(*v18)), (uint16x4_t)v89), v87), v88);
        *(uint16x4_t *)v91.i8 = vqshrn_n_u32(vsraq_n_u32(v91, v91, 0x10uLL), 0x10uLL);
        v92 = vdup_lane_s16(*(int16x4_t *)v91.i8, 3);
        v93 = vdup_lane_s16(v90, 3);
        v94 = (int16x4_t)vmin_u16(*(uint16x4_t *)v91.i8, (uint16x4_t)v92);
        v95 = (int16x4_t)vmin_u16((uint16x4_t)v90, (uint16x4_t)v93);
        v96 = (int8x16_t)vqaddq_u32(vmull_u16((uint16x4_t)vsub_s16(v92, v94), (uint16x4_t)v95), vmull_u16((uint16x4_t)vsub_s16(v93, v95), (uint16x4_t)v94));
        v97 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32((uint32x4_t)vbslq_s8((int8x16_t)vmovl_s16((int16x4_t)vcgt_u16(vrhadd_u16((uint16x4_t)v93, 0), (uint16x4_t)v95)), v96, (int8x16_t)vqsubq_u32(vmull_lane_u16((uint16x4_t)v92, (uint16x4_t)v90, 3), (uint32x4_t)v96)), v87), v88);
        *(int8x8_t *)a14.i8 = vrev16_s8(vbsl_s8((int8x8_t)vceqz_s16(v92), (int8x8_t)v90, vbsl_s8((int8x8_t)vceqz_s16(v93), *(int8x8_t *)v91.i8, (int8x8_t)vsub_s16(vadd_s16(v95, v94), (int16x4_t)vqshrn_n_u32(vsraq_n_u32(v97, v97, 0x10uLL), 0x10uLL)))));
        *v20 = *(int8x8_t *)a14.i8;
      }
      v98 = &v18[a6];
      v21 += a6;
      if ((unint64_t)v98 >= v19)
        v99 = -(uint64_t)a5;
      else
        v99 = 0;
      v18 = &v98[v99];
      v20 += a6;
      --v82;
    }
    while (v82);
  }
  *result = v18;
  *a3 = v19;
  *a2 = v20;
  *a4 = v21;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)16,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, double a12, int32x4_t a13, uint64_t a14, unint64_t a15)
{
  int8x16_t v15;
  unint64_t v16;
  int8x8_t *v17;
  unint64_t v18;
  int8x8_t *v19;
  char *v20;
  unsigned int v21;
  int8x16_t v22;
  int8x16_t v23;
  unsigned int v24;
  int8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  uint32x4_t v28;
  int8x16_t v29;
  __int32 v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int16x8_t v40;
  int16x8_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  uint32x4_t v44;
  uint16x8_t v45;
  uint32x4_t v46;
  uint16x8_t v47;
  uint32x4_t v48;
  uint32x4_t v49;
  uint32x4_t v50;
  int8x16_t *v51;
  int8x16_t *v52;
  int8x16_t *v53;
  int8x16_t *v54;
  int64_t v55;
  int64_t v56;
  uint64_t v57;
  int16x8_t v58;
  uint16x8_t v59;
  int16x8_t v60;
  uint32x4_t v61;
  int16x4_t v62;
  uint32x4_t v63;
  uint32x4_t v64;
  int16x4_t v65;
  int16x8_t v66;
  int8x16_t v67;
  uint16x4_t v68;
  uint32x4_t v69;
  int8x16_t v70;
  int8x16_t v71;
  uint16x4_t v72;
  uint16x4_t v73;
  int8x16_t v74;
  uint32x4_t v75;
  uint32x4_t v76;
  uint32x4_t v77;
  uint32x4_t v78;
  uint64_t v79;
  __int16 v80;
  int8x8_t v81;
  int8x8_t v82;
  __int16 v83;
  uint32x4_t v84;
  int32x4_t v85;
  int16x4_t v86;
  int8x8_t v87;
  int16x4_t v88;
  int16x4_t v89;
  int16x4_t v90;
  uint16x4_t v91;
  uint16x4_t v92;
  uint32x4_t v93;
  int8x8_t *v94;
  uint64_t v95;

  v16 = a15;
  v17 = *result;
  v18 = *a3;
  v19 = *a2;
  v20 = *a4;
  if (a15 < 2)
    goto LABEL_40;
  if (a7)
    v21 = 0;
  else
    v21 = -1;
  v22.i64[0] = 0xFFFF000000000000;
  v22.i64[1] = 0xFFFF000000000000;
  v23 = vandq_s8((int8x16_t)vdupq_n_s16(v21), v22);
  if (a8)
    v24 = 0;
  else
    v24 = -1;
  v25 = vandq_s8((int8x16_t)vdupq_n_s16(v24), v22);
  v26 = 2 * a6;
  v27 = 16 * a6;
  v28 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  a13.i64[0] = 0x800000008000;
  a13.i64[1] = 0x800000008000;
  v29.i64[0] = -1;
  v29.i64[1] = -1;
  while (1)
  {
    v30 = *(unsigned __int16 *)v20;
    if (!*(_WORD *)v20)
    {
      v51 = (int8x16_t *)&v20[v16];
      v52 = (int8x16_t *)v20;
      do
        v53 = v52++;
      while (v52 <= v51 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v53)) & 0x80) != 0);
      do
      {
        v54 = v53;
        v53 = (int8x16_t *)((char *)v53 + 4);
      }
      while (v53 <= v51 && !v54->i32[0]);
      if (v54 < v51)
      {
        while (!v54->i8[0])
        {
          v54 = (int8x16_t *)((char *)v54 + 1);
          if (v54 >= v51)
          {
            v54 = (int8x16_t *)&v20[v16];
            break;
          }
        }
      }
      v55 = (char *)v54 - v20;
      v56 = ((char *)v54 - v20) * a6;
      v17 += v56;
      v19 += v56;
      v20 += v56;
      v16 -= v55;
      goto LABEL_37;
    }
    if (v30 != 0xFFFF)
      break;
    v31 = (int8x16_t *)&v20[v16];
    v32 = (int8x16_t *)v20;
    do
      v33 = v32++;
    while (v32 <= v31 && (vminvq_u8((uint8x16_t)vceqq_s8(*v33, v29)) & 0x80) != 0);
    do
    {
      v34 = v33;
      v33 = (int8x16_t *)((char *)v33 + 4);
    }
    while (v33 <= v31 && v34->i32[0] == -1);
    if (v34 < v31)
    {
      while (v34->u8[0] == 255)
      {
        v34 = (int8x16_t *)((char *)v34 + 1);
        if (v34 >= v31)
        {
          v34 = (int8x16_t *)&v20[v16];
          break;
        }
      }
    }
    v35 = 0;
    v36 = (char *)v34 - v20;
    v37 = (char *)v34 - v20;
    do
    {
      v38 = vorrq_s8(v23, vrev16q_s8(*(int8x16_t *)&v17->i8[v35]));
      v39 = vorrq_s8(v25, vrev16q_s8(*(int8x16_t *)&v19->i8[v35]));
      v40 = (int16x8_t)vqtbl1q_s8(v38, (int8x16_t)xmmword_1850049F0);
      v41 = (int16x8_t)vqtbl1q_s8(v39, (int8x16_t)xmmword_1850049F0);
      v42 = vminq_u16((uint16x8_t)v38, (uint16x8_t)v40);
      v43 = vminq_u16((uint16x8_t)v39, (uint16x8_t)v41);
      v44 = vmull_lane_u16(*(uint16x4_t *)v42.i8, *(uint16x4_t *)v39.i8, 3);
      v45 = (uint16x8_t)vmvnq_s8((int8x16_t)v41);
      v46 = vmull_u16(*(uint16x4_t *)v42.i8, *(uint16x4_t *)v45.i8);
      v47 = (uint16x8_t)vmvnq_s8((int8x16_t)v40);
      v48 = vqaddq_u32(vqaddq_u32(vminq_u32(vmull_high_laneq_u16(v43, (uint16x8_t)v38, 7), vmull_high_laneq_u16(v42, (uint16x8_t)v39, 7)), vmull_high_u16(v42, v45)), vmull_high_u16(v43, v47));
      v49 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vminq_u32(vmull_lane_u16(*(uint16x4_t *)v43.i8, *(uint16x4_t *)v38.i8, 3), v44), v46), vmull_u16(*(uint16x4_t *)v43.i8, *(uint16x4_t *)v47.i8)), v28), a13);
      v50 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v48, v28), a13);
      v15 = vbslq_s8((int8x16_t)vceqzq_s16(v41), v38, (int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v49, v49, 0x10uLL), 0x10uLL), vsraq_n_u32(v50, v50, 0x10uLL), 0x10uLL));
      *(int8x16_t *)&v19->i8[v35] = vrev16q_s8(vbslq_s8((int8x16_t)vceqzq_s16(v40), v39, v15));
      v20 += v26;
      v37 -= 2;
      v35 += v27;
    }
    while (v37 > 1);
    v19 = (int8x8_t *)((char *)v19 + v35);
    v17 = (int8x8_t *)((char *)v17 + v35);
    v16 = v16 - v36 + v37;
LABEL_37:
    if (v16 <= 1)
      goto LABEL_40;
  }
  v57 = 0;
  while (1)
  {
    v15.i32[0] = v30;
    v58 = (int16x8_t)vqtbl1q_s8(v15, (int8x16_t)xmmword_1850049E0);
    v59 = (uint16x8_t)vorrq_s8(v23, vrev16q_s8(*(int8x16_t *)&v17->i8[v57]));
    v60 = (int16x8_t)vorrq_s8(vbicq_s8(v25, (int8x16_t)vceqzq_s16(v58)), vrev16q_s8(*(int8x16_t *)&v19->i8[v57]));
    v61 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v59.i8, *(uint16x4_t *)v58.i8), v28), a13);
    v62 = (int16x4_t)vqshrn_n_u32(vsraq_n_u32(v61, v61, 0x10uLL), 0x10uLL);
    v63 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16(v59, (uint16x8_t)v58), v28), a13);
    v64 = vsraq_n_u32(v63, v63, 0x10uLL);
    v65 = (int16x4_t)vqshrn_n_u32(v64, 0x10uLL);
    *(int16x4_t *)v58.i8 = vdup_lane_s16(v62, 3);
    v66 = (int16x8_t)vqtbl1q_s8((int8x16_t)v60, (int8x16_t)xmmword_1850049F0);
    v67 = (int8x16_t)vminq_u16((uint16x8_t)v60, (uint16x8_t)v66);
    v68 = vmin_u16((uint16x4_t)v62, *(uint16x4_t *)v58.i8);
    v69 = vmull_lane_u16(*(uint16x4_t *)v67.i8, (uint16x4_t)v62, 3);
    v70 = (int8x16_t)vqshrn_high_n_u32((uint16x4_t)v62, v64, 0x10uLL);
    v58.i64[1] = vdupq_lane_s16(v65, 3).u64[0];
    v71 = (int8x16_t)vdupq_laneq_s16(v60, 7);
    v72 = vmin_u16((uint16x4_t)v65, (uint16x4_t)v58.u64[1]);
    v73 = (uint16x4_t)vextq_s8(v67, v67, 8uLL).u64[0];
    v74 = vmvnq_s8((int8x16_t)v66);
    v75 = vqaddq_u32(vminq_u32(v69, vmull_lane_u16(v68, *(uint16x4_t *)v60.i8, 3)), vmull_u16(v68, *(uint16x4_t *)v74.i8));
    v76 = vqaddq_u32(vminq_u32(vmull_high_lane_u16((uint16x8_t)v67, (uint16x4_t)v65, 3), vmull_u16(v72, (uint16x4_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL))), vmull_u16(v72, (uint16x4_t)*(_OWORD *)&vextq_s8(v74, v74, 8uLL)));
    v77 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(v75, vmull_u16(*(uint16x4_t *)v67.i8, (uint16x4_t)vmvn_s8(*(int8x8_t *)v58.i8))), v28), a13);
    v78 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(v76, vmull_u16(v73, (uint16x4_t)vmvn_s8((int8x8_t)v58.u64[1]))), v28), a13);
    v15 = (int8x16_t)vceqzq_s16(v58);
    *(int8x16_t *)&v19->i8[v57] = vrev16q_s8(vbslq_s8(v15, (int8x16_t)v60, vbslq_s8((int8x16_t)vceqzq_s16(v66), v70, (int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v77, v77, 0x10uLL), 0x10uLL), vsraq_n_u32(v78, v78, 0x10uLL), 0x10uLL))));
    v20 += v26;
    v16 -= 2;
    if (v16 < 2)
      break;
    v30 = *(unsigned __int16 *)v20;
    v57 += v27;
    if ((unsigned __int16)(v30 - 1) >= 0xFFFEu)
    {
      v17 = (int8x8_t *)((char *)v17 + v57);
      v19 = (int8x8_t *)((char *)v19 + v57);
      goto LABEL_37;
    }
  }
  v17 = (int8x8_t *)((char *)v17 + v27 + v57);
  v19 = (int8x8_t *)((char *)v19 + v27 + v57);
LABEL_40:
  v79 = v16 + a14;
  if (v79)
  {
    if (a7)
      v80 = 0;
    else
      v80 = -1;
    v81.i32[0] = 0;
    v81.i16[2] = 0;
    v81.i16[3] = v80;
    v82.i32[0] = 0;
    v82.i16[2] = 0;
    if (a8)
      v83 = 0;
    else
      v83 = -1;
    v82.i16[3] = v83;
    v84 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v85.i64[0] = 0x800000008000;
    v85.i64[1] = 0x800000008000;
    do
    {
      if (*v20)
      {
        a13.i32[0] = *v20;
        v86 = (int16x4_t)vdup_lane_s8(*(int8x8_t *)a13.i8, 0);
        v87 = vbic_s8(v82, (int8x8_t)vceqz_s16(v86));
        a13 = vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(v81, vrev16_s8(*v17)), (uint16x4_t)v86), v84), v85);
        *(uint16x4_t *)a13.i8 = vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a13, (uint32x4_t)a13, 0x10uLL), 0x10uLL);
        v88 = vdup_lane_s16(*(int16x4_t *)a13.i8, 3);
        v89 = (int16x4_t)vorr_s8(v87, vrev16_s8(*v19));
        v90 = vdup_lane_s16(v89, 3);
        v91 = vmin_u16(*(uint16x4_t *)a13.i8, (uint16x4_t)v88);
        v92 = vmin_u16((uint16x4_t)v89, (uint16x4_t)v90);
        v93 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vminq_u32(vmull_lane_u16(v91, (uint16x4_t)v89, 3), vmull_lane_u16(v92, *(uint16x4_t *)a13.i8, 3)), vmull_u16(v91, (uint16x4_t)vmvn_s8((int8x8_t)v90))), vmull_u16(v92, (uint16x4_t)vmvn_s8((int8x8_t)v88))), v84), v85);
        *(int8x8_t *)a13.i8 = vrev16_s8(vbsl_s8((int8x8_t)vceqz_s16(v88), (int8x8_t)v89, vbsl_s8((int8x8_t)vceqz_s16(v90), *(int8x8_t *)a13.i8, (int8x8_t)vqshrn_n_u32(vsraq_n_u32(v93, v93, 0x10uLL), 0x10uLL))));
        *v19 = *(int8x8_t *)a13.i8;
      }
      v94 = &v17[a6];
      v20 += a6;
      if ((unint64_t)v94 >= v18)
        v95 = -(uint64_t)a5;
      else
        v95 = 0;
      v17 = &v94[v95];
      v19 += a6;
      --v79;
    }
    while (v79);
  }
  *result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)17,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, double a12, int32x4_t a13, uint64_t a14, unint64_t a15)
{
  int8x16_t v15;
  unint64_t v16;
  int8x8_t *v17;
  unint64_t v18;
  int8x8_t *v19;
  char *v20;
  unsigned int v21;
  int8x16_t v22;
  int8x16_t v23;
  unsigned int v24;
  int8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  uint32x4_t v28;
  int8x16_t v29;
  __int32 v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int16x8_t v40;
  int16x8_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  uint32x4_t v44;
  uint16x8_t v45;
  uint32x4_t v46;
  uint16x8_t v47;
  uint32x4_t v48;
  uint32x4_t v49;
  uint32x4_t v50;
  int8x16_t *v51;
  int8x16_t *v52;
  int8x16_t *v53;
  int8x16_t *v54;
  int64_t v55;
  int64_t v56;
  uint64_t v57;
  int16x8_t v58;
  uint16x8_t v59;
  int16x8_t v60;
  uint32x4_t v61;
  int16x4_t v62;
  uint32x4_t v63;
  uint32x4_t v64;
  int16x4_t v65;
  int16x8_t v66;
  int8x16_t v67;
  uint16x4_t v68;
  uint32x4_t v69;
  int8x16_t v70;
  int8x16_t v71;
  uint16x4_t v72;
  uint16x4_t v73;
  int8x16_t v74;
  uint32x4_t v75;
  uint32x4_t v76;
  uint32x4_t v77;
  uint32x4_t v78;
  uint64_t v79;
  __int16 v80;
  int8x8_t v81;
  int8x8_t v82;
  __int16 v83;
  uint32x4_t v84;
  int32x4_t v85;
  int16x4_t v86;
  int8x8_t v87;
  int16x4_t v88;
  int16x4_t v89;
  int16x4_t v90;
  uint16x4_t v91;
  uint16x4_t v92;
  uint32x4_t v93;
  int8x8_t *v94;
  uint64_t v95;

  v16 = a15;
  v17 = *result;
  v18 = *a3;
  v19 = *a2;
  v20 = *a4;
  if (a15 < 2)
    goto LABEL_40;
  if (a7)
    v21 = 0;
  else
    v21 = -1;
  v22.i64[0] = 0xFFFF000000000000;
  v22.i64[1] = 0xFFFF000000000000;
  v23 = vandq_s8((int8x16_t)vdupq_n_s16(v21), v22);
  if (a8)
    v24 = 0;
  else
    v24 = -1;
  v25 = vandq_s8((int8x16_t)vdupq_n_s16(v24), v22);
  v26 = 2 * a6;
  v27 = 16 * a6;
  v28 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  a13.i64[0] = 0x800000008000;
  a13.i64[1] = 0x800000008000;
  v29.i64[0] = -1;
  v29.i64[1] = -1;
  while (1)
  {
    v30 = *(unsigned __int16 *)v20;
    if (!*(_WORD *)v20)
    {
      v51 = (int8x16_t *)&v20[v16];
      v52 = (int8x16_t *)v20;
      do
        v53 = v52++;
      while (v52 <= v51 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v53)) & 0x80) != 0);
      do
      {
        v54 = v53;
        v53 = (int8x16_t *)((char *)v53 + 4);
      }
      while (v53 <= v51 && !v54->i32[0]);
      if (v54 < v51)
      {
        while (!v54->i8[0])
        {
          v54 = (int8x16_t *)((char *)v54 + 1);
          if (v54 >= v51)
          {
            v54 = (int8x16_t *)&v20[v16];
            break;
          }
        }
      }
      v55 = (char *)v54 - v20;
      v56 = ((char *)v54 - v20) * a6;
      v17 += v56;
      v19 += v56;
      v20 += v56;
      v16 -= v55;
      goto LABEL_37;
    }
    if (v30 != 0xFFFF)
      break;
    v31 = (int8x16_t *)&v20[v16];
    v32 = (int8x16_t *)v20;
    do
      v33 = v32++;
    while (v32 <= v31 && (vminvq_u8((uint8x16_t)vceqq_s8(*v33, v29)) & 0x80) != 0);
    do
    {
      v34 = v33;
      v33 = (int8x16_t *)((char *)v33 + 4);
    }
    while (v33 <= v31 && v34->i32[0] == -1);
    if (v34 < v31)
    {
      while (v34->u8[0] == 255)
      {
        v34 = (int8x16_t *)((char *)v34 + 1);
        if (v34 >= v31)
        {
          v34 = (int8x16_t *)&v20[v16];
          break;
        }
      }
    }
    v35 = 0;
    v36 = (char *)v34 - v20;
    v37 = (char *)v34 - v20;
    do
    {
      v38 = vorrq_s8(v23, vrev16q_s8(*(int8x16_t *)&v17->i8[v35]));
      v39 = vorrq_s8(v25, vrev16q_s8(*(int8x16_t *)&v19->i8[v35]));
      v40 = (int16x8_t)vqtbl1q_s8(v38, (int8x16_t)xmmword_1850049F0);
      v41 = (int16x8_t)vqtbl1q_s8(v39, (int8x16_t)xmmword_1850049F0);
      v42 = vminq_u16((uint16x8_t)v38, (uint16x8_t)v40);
      v43 = vminq_u16((uint16x8_t)v39, (uint16x8_t)v41);
      v44 = vmull_lane_u16(*(uint16x4_t *)v42.i8, *(uint16x4_t *)v39.i8, 3);
      v45 = (uint16x8_t)vmvnq_s8((int8x16_t)v41);
      v46 = vmull_u16(*(uint16x4_t *)v42.i8, *(uint16x4_t *)v45.i8);
      v47 = (uint16x8_t)vmvnq_s8((int8x16_t)v40);
      v48 = vqaddq_u32(vqaddq_u32(vmaxq_u32(vmull_high_laneq_u16(v42, (uint16x8_t)v39, 7), vmull_high_laneq_u16(v43, (uint16x8_t)v38, 7)), vmull_high_u16(v42, v45)), vmull_high_u16(v43, v47));
      v49 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vmaxq_u32(v44, vmull_lane_u16(*(uint16x4_t *)v43.i8, *(uint16x4_t *)v38.i8, 3)), v46), vmull_u16(*(uint16x4_t *)v43.i8, *(uint16x4_t *)v47.i8)), v28), a13);
      v50 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v48, v28), a13);
      v15 = vbslq_s8((int8x16_t)vceqzq_s16(v41), v38, (int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v49, v49, 0x10uLL), 0x10uLL), vsraq_n_u32(v50, v50, 0x10uLL), 0x10uLL));
      *(int8x16_t *)&v19->i8[v35] = vrev16q_s8(vbslq_s8((int8x16_t)vceqzq_s16(v40), v39, v15));
      v20 += v26;
      v37 -= 2;
      v35 += v27;
    }
    while (v37 > 1);
    v19 = (int8x8_t *)((char *)v19 + v35);
    v17 = (int8x8_t *)((char *)v17 + v35);
    v16 = v16 - v36 + v37;
LABEL_37:
    if (v16 <= 1)
      goto LABEL_40;
  }
  v57 = 0;
  while (1)
  {
    v15.i32[0] = v30;
    v58 = (int16x8_t)vqtbl1q_s8(v15, (int8x16_t)xmmword_1850049E0);
    v59 = (uint16x8_t)vorrq_s8(v23, vrev16q_s8(*(int8x16_t *)&v17->i8[v57]));
    v60 = (int16x8_t)vorrq_s8(vbicq_s8(v25, (int8x16_t)vceqzq_s16(v58)), vrev16q_s8(*(int8x16_t *)&v19->i8[v57]));
    v61 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v59.i8, *(uint16x4_t *)v58.i8), v28), a13);
    v62 = (int16x4_t)vqshrn_n_u32(vsraq_n_u32(v61, v61, 0x10uLL), 0x10uLL);
    v63 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16(v59, (uint16x8_t)v58), v28), a13);
    v64 = vsraq_n_u32(v63, v63, 0x10uLL);
    v65 = (int16x4_t)vqshrn_n_u32(v64, 0x10uLL);
    *(int16x4_t *)v58.i8 = vdup_lane_s16(v62, 3);
    v66 = (int16x8_t)vqtbl1q_s8((int8x16_t)v60, (int8x16_t)xmmword_1850049F0);
    v67 = (int8x16_t)vminq_u16((uint16x8_t)v60, (uint16x8_t)v66);
    v68 = vmin_u16((uint16x4_t)v62, *(uint16x4_t *)v58.i8);
    v69 = vmull_lane_u16(*(uint16x4_t *)v67.i8, (uint16x4_t)v62, 3);
    v70 = (int8x16_t)vqshrn_high_n_u32((uint16x4_t)v62, v64, 0x10uLL);
    v58.i64[1] = vdupq_lane_s16(v65, 3).u64[0];
    v71 = (int8x16_t)vdupq_laneq_s16(v60, 7);
    v72 = vmin_u16((uint16x4_t)v65, (uint16x4_t)v58.u64[1]);
    v73 = (uint16x4_t)vextq_s8(v67, v67, 8uLL).u64[0];
    v74 = vmvnq_s8((int8x16_t)v66);
    v75 = vqaddq_u32(vmaxq_u32(vmull_lane_u16(v68, *(uint16x4_t *)v60.i8, 3), v69), vmull_u16(v68, *(uint16x4_t *)v74.i8));
    v76 = vqaddq_u32(vmaxq_u32(vmull_u16(v72, (uint16x4_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL)), vmull_high_lane_u16((uint16x8_t)v67, (uint16x4_t)v65, 3)), vmull_u16(v72, (uint16x4_t)*(_OWORD *)&vextq_s8(v74, v74, 8uLL)));
    v77 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(v75, vmull_u16(*(uint16x4_t *)v67.i8, (uint16x4_t)vmvn_s8(*(int8x8_t *)v58.i8))), v28), a13);
    v78 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(v76, vmull_u16(v73, (uint16x4_t)vmvn_s8((int8x8_t)v58.u64[1]))), v28), a13);
    v15 = (int8x16_t)vceqzq_s16(v58);
    *(int8x16_t *)&v19->i8[v57] = vrev16q_s8(vbslq_s8(v15, (int8x16_t)v60, vbslq_s8((int8x16_t)vceqzq_s16(v66), v70, (int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v77, v77, 0x10uLL), 0x10uLL), vsraq_n_u32(v78, v78, 0x10uLL), 0x10uLL))));
    v20 += v26;
    v16 -= 2;
    if (v16 < 2)
      break;
    v30 = *(unsigned __int16 *)v20;
    v57 += v27;
    if ((unsigned __int16)(v30 - 1) >= 0xFFFEu)
    {
      v17 = (int8x8_t *)((char *)v17 + v57);
      v19 = (int8x8_t *)((char *)v19 + v57);
      goto LABEL_37;
    }
  }
  v17 = (int8x8_t *)((char *)v17 + v27 + v57);
  v19 = (int8x8_t *)((char *)v19 + v27 + v57);
LABEL_40:
  v79 = v16 + a14;
  if (v79)
  {
    if (a7)
      v80 = 0;
    else
      v80 = -1;
    v81.i32[0] = 0;
    v81.i16[2] = 0;
    v81.i16[3] = v80;
    v82.i32[0] = 0;
    v82.i16[2] = 0;
    if (a8)
      v83 = 0;
    else
      v83 = -1;
    v82.i16[3] = v83;
    v84 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v85.i64[0] = 0x800000008000;
    v85.i64[1] = 0x800000008000;
    do
    {
      if (*v20)
      {
        a13.i32[0] = *v20;
        v86 = (int16x4_t)vdup_lane_s8(*(int8x8_t *)a13.i8, 0);
        v87 = vbic_s8(v82, (int8x8_t)vceqz_s16(v86));
        a13 = vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(v81, vrev16_s8(*v17)), (uint16x4_t)v86), v84), v85);
        *(uint16x4_t *)a13.i8 = vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a13, (uint32x4_t)a13, 0x10uLL), 0x10uLL);
        v88 = vdup_lane_s16(*(int16x4_t *)a13.i8, 3);
        v89 = (int16x4_t)vorr_s8(v87, vrev16_s8(*v19));
        v90 = vdup_lane_s16(v89, 3);
        v91 = vmin_u16(*(uint16x4_t *)a13.i8, (uint16x4_t)v88);
        v92 = vmin_u16((uint16x4_t)v89, (uint16x4_t)v90);
        v93 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vmaxq_u32(vmull_lane_u16(v91, (uint16x4_t)v89, 3), vmull_lane_u16(v92, *(uint16x4_t *)a13.i8, 3)), vmull_u16(v91, (uint16x4_t)vmvn_s8((int8x8_t)v90))), vmull_u16(v92, (uint16x4_t)vmvn_s8((int8x8_t)v88))), v84), v85);
        *(int8x8_t *)a13.i8 = vrev16_s8(vbsl_s8((int8x8_t)vceqz_s16(v88), (int8x8_t)v89, vbsl_s8((int8x8_t)vceqz_s16(v90), *(int8x8_t *)a13.i8, (int8x8_t)vqshrn_n_u32(vsraq_n_u32(v93, v93, 0x10uLL), 0x10uLL))));
        *v19 = *(int8x8_t *)a13.i8;
      }
      v94 = &v17[a6];
      v20 += a6;
      if ((unint64_t)v94 >= v18)
        v95 = -(uint64_t)a5;
      else
        v95 = 0;
      v17 = &v94[v95];
      v19 += a6;
      --v79;
    }
    while (v79);
  }
  *result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)18,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, double a12, int32x4_t a13, uint64_t a14, unint64_t a15)
{
  int8x16_t v15;
  unint64_t v16;
  int8x8_t *v17;
  unint64_t v18;
  int8x8_t *v19;
  char *v20;
  unsigned int v21;
  int8x16_t v22;
  int8x16_t v23;
  unsigned int v24;
  int8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  uint32x4_t v28;
  int32x4_t v29;
  int8x16_t v30;
  __int32 v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  int8x16_t *v35;
  uint64_t v36;
  int64_t v37;
  unint64_t v38;
  int16x8_t v39;
  int8x16_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int8x16_t v43;
  int16x8_t v44;
  uint16x8_t v45;
  int16x8_t v46;
  int8x16_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint32x4_t v51;
  uint16x8_t v52;
  uint32x4_t v53;
  uint32x4_t v54;
  uint32x4_t v55;
  uint32x4_t v56;
  uint32x4_t v57;
  int8x16_t *v58;
  int8x16_t *v59;
  int8x16_t *v60;
  int8x16_t *v61;
  int64_t v62;
  int64_t v63;
  uint64_t v64;
  int16x8_t v65;
  uint16x8_t v66;
  int8x16_t v67;
  uint32x4_t v68;
  int16x4_t v69;
  uint32x4_t v70;
  uint32x4_t v71;
  int16x4_t v72;
  uint32x4_t v73;
  uint16x4_t v74;
  int8x16_t v75;
  int16x8_t v76;
  int16x8_t v77;
  uint16x8_t v78;
  int16x8_t v79;
  uint16x8_t v80;
  uint32x4_t v81;
  uint32x4_t v82;
  int8x16_t v83;
  uint32x4_t v84;
  uint32x4_t v85;
  uint32x4_t v86;
  uint16x8_t v87;
  uint64_t v88;
  __int16 v89;
  int8x8_t v90;
  int8x8_t v91;
  __int16 v92;
  uint32x4_t v93;
  int32x4_t v94;
  int16x4_t v95;
  int16x4_t v96;
  int16x4_t v97;
  int16x4_t v98;
  uint16x4_t v99;
  int16x4_t v100;
  uint32x4_t v101;
  uint32x4_t v102;
  int8x8_t *v103;
  uint64_t v104;

  v16 = a15;
  v17 = *result;
  v18 = *a3;
  v19 = *a2;
  v20 = *a4;
  if (a15 < 2)
    goto LABEL_40;
  if (a7)
    v21 = 0;
  else
    v21 = -1;
  v22.i64[0] = 0xFFFF000000000000;
  v22.i64[1] = 0xFFFF000000000000;
  v23 = vandq_s8((int8x16_t)vdupq_n_s16(v21), v22);
  if (a8)
    v24 = 0;
  else
    v24 = -1;
  v25 = vandq_s8((int8x16_t)vdupq_n_s16(v24), v22);
  v26 = 2 * a6;
  v27 = 16 * a6;
  v28 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  a13.i64[0] = 0xFFFFFFFFFFFFLL;
  a13.i64[1] = 0xFFFFFFFFFFFFLL;
  v29.i64[0] = 0x800000008000;
  v29.i64[1] = 0x800000008000;
  v30.i64[0] = -1;
  v30.i64[1] = -1;
  while (1)
  {
    v31 = *(unsigned __int16 *)v20;
    if (!*(_WORD *)v20)
    {
      v58 = (int8x16_t *)&v20[v16];
      v59 = (int8x16_t *)v20;
      do
        v60 = v59++;
      while (v59 <= v58 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v60)) & 0x80) != 0);
      do
      {
        v61 = v60;
        v60 = (int8x16_t *)((char *)v60 + 4);
      }
      while (v60 <= v58 && !v61->i32[0]);
      if (v61 < v58)
      {
        while (!v61->i8[0])
        {
          v61 = (int8x16_t *)((char *)v61 + 1);
          if (v61 >= v58)
          {
            v61 = (int8x16_t *)&v20[v16];
            break;
          }
        }
      }
      v62 = (char *)v61 - v20;
      v63 = ((char *)v61 - v20) * a6;
      v17 += v63;
      v19 += v63;
      v20 += v63;
      v16 -= v62;
      goto LABEL_37;
    }
    if (v31 != 0xFFFF)
      break;
    v32 = (int8x16_t *)&v20[v16];
    v33 = (int8x16_t *)v20;
    do
      v34 = v33++;
    while (v33 <= v32 && (vminvq_u8((uint8x16_t)vceqq_s8(*v34, v30)) & 0x80) != 0);
    do
    {
      v35 = v34;
      v34 = (int8x16_t *)((char *)v34 + 4);
    }
    while (v34 <= v32 && v35->i32[0] == -1);
    if (v35 < v32)
    {
      while (v35->u8[0] == 255)
      {
        v35 = (int8x16_t *)((char *)v35 + 1);
        if (v35 >= v32)
        {
          v35 = (int8x16_t *)&v20[v16];
          break;
        }
      }
    }
    v36 = 0;
    v37 = (char *)v35 - v20;
    v38 = (char *)v35 - v20;
    do
    {
      v39 = (int16x8_t)vorrq_s8(v23, vrev16q_s8(*(int8x16_t *)&v17->i8[v36]));
      v40 = vorrq_s8(v25, vrev16q_s8(*(int8x16_t *)&v19->i8[v36]));
      v41 = (int16x8_t)vqtbl1q_s8((int8x16_t)v39, (int8x16_t)xmmword_1850049F0);
      v42 = (int16x8_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_1850049F0);
      v43 = (int8x16_t)vminq_u16((uint16x8_t)v39, (uint16x8_t)v41);
      v44 = (int16x8_t)vminq_u16((uint16x8_t)v40, (uint16x8_t)v42);
      v45 = (uint16x8_t)vandq_s8(v43, (int8x16_t)a13);
      v46 = (int16x8_t)vbicq_s8((int8x16_t)vtstq_s16(v44, v44), (int8x16_t)vcgtq_u16((uint16x8_t)v41, v45));
      v47 = (int8x16_t)vmovl_high_s16(v46);
      v48 = (uint16x8_t)vorrq_s8((int8x16_t)vqsubq_u16((uint16x8_t)v41, v45), (int8x16_t)vceqzq_s16(v44));
      v49 = (uint16x8_t)vmvnq_s8((int8x16_t)v41);
      v50 = (uint16x8_t)vqaddq_u32((uint32x4_t)vorrq_s8((int8x16_t)vcvtnq_u32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v44.i8)), vcvtq_f32_u32(vmull_lane_u16((uint16x4_t)vdup_lane_s16(*(int16x4_t *)v39.i8, 3), *(uint16x4_t *)v39.i8, 3))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v48.i8)))), (int8x16_t)vmovl_s16(*(int16x4_t *)v46.i8)), vmull_u16(*(uint16x4_t *)v44.i8, *(uint16x4_t *)v49.i8));
      v51 = vqaddq_u32((uint32x4_t)vorrq_s8((int8x16_t)vcvtnq_u32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_high_u16((uint16x8_t)v44)), vcvtq_f32_u32(vmull_laneq_u16((uint16x4_t)vdup_laneq_s16(v39, 7), (uint16x8_t)v39, 7))), vcvtq_f32_u32(vmovl_high_u16(v48)))), v47), vmull_high_u16((uint16x8_t)v44, v49));
      v52 = (uint16x8_t)vmvnq_s8((int8x16_t)v42);
      v53 = vmull_u16(*(uint16x4_t *)v43.i8, *(uint16x4_t *)v52.i8);
      v54 = vqaddq_u32(v51, vmull_high_u16((uint16x8_t)v43, v52));
      v55 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32((uint32x4_t)v50, v53), v28), v29);
      *(uint16x4_t *)v55.i8 = vqshrn_n_u32(vsraq_n_u32(v55, v55, 0x10uLL), 0x10uLL);
      v56 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v54, v28), v29);
      v57 = vsraq_n_u32(v56, v56, 0x10uLL);
      *(int16x4_t *)v50.i8 = vdup_lane_s16(*(int16x4_t *)v55.i8, 3);
      v50.u64[1] = (unint64_t)vdup_lane_s16((int16x4_t)vqshrn_n_u32(v57, 0x10uLL), 3);
      v15 = vbslq_s8((int8x16_t)vceqzq_s16(v42), (int8x16_t)v39, (int8x16_t)vminq_u16(vqshrn_high_n_u32(*(uint16x4_t *)v55.i8, v57, 0x10uLL), v50));
      *(int8x16_t *)&v19->i8[v36] = vrev16q_s8(vbslq_s8((int8x16_t)vceqzq_s16(v41), v40, v15));
      v20 += v26;
      v38 -= 2;
      v36 += v27;
    }
    while (v38 > 1);
    v19 = (int8x8_t *)((char *)v19 + v36);
    v17 = (int8x8_t *)((char *)v17 + v36);
    v16 = v16 - v37 + v38;
LABEL_37:
    if (v16 <= 1)
      goto LABEL_40;
  }
  v64 = 0;
  while (1)
  {
    v15.i32[0] = v31;
    v65 = (int16x8_t)vqtbl1q_s8(v15, (int8x16_t)xmmword_1850049E0);
    v66 = (uint16x8_t)vorrq_s8(v23, vrev16q_s8(*(int8x16_t *)&v17->i8[v64]));
    v67 = vorrq_s8(vbicq_s8(v25, (int8x16_t)vceqzq_s16(v65)), vrev16q_s8(*(int8x16_t *)&v19->i8[v64]));
    v68 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v66.i8, *(uint16x4_t *)v65.i8), v28), v29);
    v69 = (int16x4_t)vqshrn_n_u32(vsraq_n_u32(v68, v68, 0x10uLL), 0x10uLL);
    v70 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16(v66, (uint16x8_t)v65), v28), v29);
    v71 = vsraq_n_u32(v70, v70, 0x10uLL);
    v72 = (int16x4_t)vqshrn_n_u32(v71, 0x10uLL);
    *(int16x4_t *)v65.i8 = vdup_lane_s16(v69, 3);
    v73 = vmull_lane_u16(*(uint16x4_t *)v65.i8, (uint16x4_t)v69, 3);
    v74 = vmin_u16((uint16x4_t)v69, *(uint16x4_t *)v65.i8);
    v65.u64[1] = (unint64_t)vdup_lane_s16(v72, 3);
    v75 = (int8x16_t)vqshrn_high_n_u32((uint16x4_t)v69, v71, 0x10uLL);
    v76 = (int16x8_t)vqtbl1q_s8(v67, (int8x16_t)xmmword_1850049F0);
    v77 = (int16x8_t)vminq_u16((uint16x8_t)v67, (uint16x8_t)v76);
    v78 = (uint16x8_t)vandq_s8((int8x16_t)vminq_u16((uint16x8_t)v75, (uint16x8_t)v65), (int8x16_t)a13);
    v79 = (int16x8_t)vbicq_s8((int8x16_t)vtstq_s16(v77, v77), (int8x16_t)vcgtq_u16((uint16x8_t)v65, v78));
    v80 = (uint16x8_t)vorrq_s8((int8x16_t)vqsubq_u16((uint16x8_t)v65, v78), (int8x16_t)vceqzq_s16(v77));
    v81 = vqaddq_u32((uint32x4_t)vorrq_s8((int8x16_t)vcvtnq_u32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v77.i8)), vcvtq_f32_u32(v73)), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v80.i8)))), (int8x16_t)vmovl_s16(*(int16x4_t *)v79.i8)), vmull_u16(*(uint16x4_t *)v77.i8, (uint16x4_t)vmvn_s8(*(int8x8_t *)v65.i8)));
    v82 = vqaddq_u32((uint32x4_t)vorrq_s8((int8x16_t)vcvtnq_u32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_high_u16((uint16x8_t)v77)), vcvtq_f32_u32(vmull_lane_u16((uint16x4_t)v65.u64[1], (uint16x4_t)v72, 3))), vcvtq_f32_u32(vmovl_high_u16(v80)))), (int8x16_t)vmovl_high_s16(v79)), vmull_u16((uint16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v77, (int8x16_t)v77, 8uLL), (uint16x4_t)vmvn_s8((int8x8_t)v65.u64[1])));
    v83 = vmvnq_s8((int8x16_t)v76);
    v84 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(v81, vmull_u16(v74, *(uint16x4_t *)v83.i8)), v28), v29);
    *(uint16x4_t *)v84.i8 = vqshrn_n_u32(vsraq_n_u32(v84, v84, 0x10uLL), 0x10uLL);
    v85 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(v82, vmull_u16(vmin_u16((uint16x4_t)v72, (uint16x4_t)v65.u64[1]), (uint16x4_t)*(_OWORD *)&vextq_s8(v83, v83, 8uLL))), v28), v29);
    v86 = vsraq_n_u32(v85, v85, 0x10uLL);
    *(int16x4_t *)v87.i8 = vdup_lane_s16(*(int16x4_t *)v84.i8, 3);
    v87.u64[1] = (unint64_t)vdup_lane_s16((int16x4_t)vqshrn_n_u32(v86, 0x10uLL), 3);
    v15 = (int8x16_t)vceqzq_s16(v65);
    *(int8x16_t *)&v19->i8[v64] = vrev16q_s8(vbslq_s8(v15, v67, vbslq_s8((int8x16_t)vceqzq_s16(v76), v75, (int8x16_t)vminq_u16(vqshrn_high_n_u32(*(uint16x4_t *)v84.i8, v86, 0x10uLL), v87))));
    v20 += v26;
    v16 -= 2;
    if (v16 < 2)
      break;
    v31 = *(unsigned __int16 *)v20;
    v64 += v27;
    if ((unsigned __int16)(v31 - 1) >= 0xFFFEu)
    {
      v17 = (int8x8_t *)((char *)v17 + v64);
      v19 = (int8x8_t *)((char *)v19 + v64);
      goto LABEL_37;
    }
  }
  v17 = (int8x8_t *)((char *)v17 + v27 + v64);
  v19 = (int8x8_t *)((char *)v19 + v27 + v64);
LABEL_40:
  v88 = v16 + a14;
  if (v88)
  {
    if (a7)
      v89 = 0;
    else
      v89 = -1;
    v90.i32[0] = 0;
    v90.i16[2] = 0;
    v90.i16[3] = v89;
    v91.i32[0] = 0;
    v91.i16[2] = 0;
    if (a8)
      v92 = 0;
    else
      v92 = -1;
    v91.i16[3] = v92;
    v93 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v94.i64[0] = 0x800000008000;
    v94.i64[1] = 0x800000008000;
    do
    {
      if (*v20)
      {
        a13.i32[0] = *v20;
        v95 = (int16x4_t)vdup_lane_s8(*(int8x8_t *)a13.i8, 0);
        v96 = (int16x4_t)vorr_s8(vbic_s8(v91, (int8x8_t)vceqz_s16(v95)), vrev16_s8(*v19));
        a13 = vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(v90, vrev16_s8(*v17)), (uint16x4_t)v95), v93), v94);
        *(uint16x4_t *)a13.i8 = vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a13, (uint32x4_t)a13, 0x10uLL), 0x10uLL);
        v97 = vdup_lane_s16(*(int16x4_t *)a13.i8, 3);
        v98 = vdup_lane_s16(v96, 3);
        v99 = vmin_u16(*(uint16x4_t *)a13.i8, (uint16x4_t)v97);
        v100 = (int16x4_t)vmin_u16((uint16x4_t)v96, (uint16x4_t)v98);
        v101 = vmull_u16(v99, (uint16x4_t)vmvn_s8((int8x8_t)v98));
        v99.i16[3] = 0;
        v102 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32((uint32x4_t)vorrq_s8((int8x16_t)vcvtnq_u32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)v100)), vcvtq_f32_u32(vmull_lane_u16((uint16x4_t)v97, *(uint16x4_t *)a13.i8, 3))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)vorr_s8((int8x8_t)vqsub_u16((uint16x4_t)v97, v99), (int8x8_t)vceqz_s16(v100)))))), (int8x16_t)vmovl_s16((int16x4_t)vbic_s8((int8x8_t)vtst_s16(v100, v100), (int8x8_t)vcgt_u16((uint16x4_t)v97, v99)))), vmull_u16((uint16x4_t)v100, (uint16x4_t)vmvn_s8((int8x8_t)v97))), v101),
                                          v93),
                             v94);
        *(uint16x4_t *)v102.i8 = vqshrn_n_u32(vsraq_n_u32(v102, v102, 0x10uLL), 0x10uLL);
        *(int8x8_t *)a13.i8 = vrev16_s8(vbsl_s8((int8x8_t)vceqz_s16(v97), (int8x8_t)v96, vbsl_s8((int8x8_t)vceqz_s16(v98), *(int8x8_t *)a13.i8, (int8x8_t)vmin_u16(*(uint16x4_t *)v102.i8, (uint16x4_t)vdup_lane_s16(*(int16x4_t *)v102.i8, 3)))));
        *v19 = *(int8x8_t *)a13.i8;
      }
      v103 = &v17[a6];
      v20 += a6;
      if ((unint64_t)v103 >= v18)
        v104 = -(uint64_t)a5;
      else
        v104 = 0;
      v17 = &v103[v104];
      v19 += a6;
      --v88;
    }
    while (v88);
  }
  *result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)19,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, double a12, double a13, int8x8_t a14, uint64_t a15, unint64_t a16)
{
  int8x16_t v16;
  unint64_t v17;
  int8x8_t *v18;
  unint64_t v19;
  int8x8_t *v20;
  char *v21;
  unsigned int v22;
  int8x16_t v23;
  int8x16_t v24;
  unsigned int v25;
  int8x16_t v26;
  uint64_t v27;
  uint64_t v28;
  float32x4_t v29;
  int8x16_t v30;
  uint32x4_t v31;
  int32x4_t v32;
  __int32 v33;
  int8x16_t *v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  int16x8_t v41;
  int8x16_t v42;
  int16x8_t v43;
  int16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  float32x4_t v48;
  float32x4_t v49;
  uint16x4_t v50;
  uint16x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  uint16x8_t v54;
  uint32x4_t v55;
  uint32x4_t v56;
  uint16x8_t v57;
  uint32x4_t v58;
  float32x4_t v59;
  int32x4_t v60;
  int8x16_t *v61;
  int8x16_t *v62;
  int8x16_t *v63;
  int8x16_t *v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  int16x8_t v68;
  uint16x8_t v69;
  int8x16_t v70;
  int16x8_t v71;
  int16x4_t v72;
  uint32x4_t v73;
  uint32x4_t v74;
  int16x4_t v75;
  uint32x4_t v76;
  uint16x4_t v77;
  int8x16_t v78;
  int16x8_t v79;
  int8x16_t v80;
  uint16x8_t v81;
  float32x4_t v82;
  float32x4_t v83;
  uint16x4_t v84;
  uint32x4_t v85;
  uint32x4_t v86;
  int8x16_t v87;
  int32x4_t v88;
  uint16x8_t v89;
  int8x16_t v90;
  uint64_t v91;
  __int16 v92;
  int8x8_t v93;
  int8x8_t v94;
  __int16 v95;
  uint32x4_t v96;
  int32x4_t v97;
  float32x4_t v98;
  int16x4_t v99;
  int16x4_t v100;
  uint32x4_t v101;
  int16x4_t v102;
  int16x4_t v103;
  uint16x4_t v104;
  uint16x4_t v105;
  float32x4_t v106;
  int16x4_t v107;
  int8x8_t *v108;
  uint64_t v109;

  v17 = a16;
  v18 = *result;
  v19 = *a3;
  v20 = *a2;
  v21 = *a4;
  if (a16 < 2)
    goto LABEL_40;
  if (a7)
    v22 = 0;
  else
    v22 = -1;
  v23.i64[0] = 0xFFFF000000000000;
  v23.i64[1] = 0xFFFF000000000000;
  v24 = vandq_s8((int8x16_t)vdupq_n_s16(v22), v23);
  if (a8)
    v25 = 0;
  else
    v25 = -1;
  v26 = vandq_s8((int8x16_t)vdupq_n_s16(v25), v23);
  v27 = 2 * a6;
  v28 = 16 * a6;
  v29 = (float32x4_t)vdupq_n_s32(0x37800080u);
  v30.i64[0] = -1;
  v30.i64[1] = -1;
  a14.i32[1] = 0;
  v31 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  v32.i64[0] = 0x800000008000;
  v32.i64[1] = 0x800000008000;
  while (1)
  {
    v33 = *(unsigned __int16 *)v21;
    if (!*(_WORD *)v21)
    {
      v61 = (int8x16_t *)&v21[v17];
      v62 = (int8x16_t *)v21;
      do
        v63 = v62++;
      while (v62 <= v61 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v63)) & 0x80) != 0);
      do
      {
        v64 = v63;
        v63 = (int8x16_t *)((char *)v63 + 4);
      }
      while (v63 <= v61 && !v64->i32[0]);
      if (v64 < v61)
      {
        while (!v64->i8[0])
        {
          v64 = (int8x16_t *)((char *)v64 + 1);
          if (v64 >= v61)
          {
            v64 = (int8x16_t *)&v21[v17];
            break;
          }
        }
      }
      v65 = (char *)v64 - v21;
      v66 = ((char *)v64 - v21) * a6;
      v18 += v66;
      v20 += v66;
      v21 += v66;
      v17 -= v65;
      goto LABEL_37;
    }
    if (v33 != 0xFFFF)
      break;
    v34 = (int8x16_t *)&v21[v17];
    v35 = (int8x16_t *)v21;
    do
      v36 = v35++;
    while (v35 <= v34 && (vminvq_u8((uint8x16_t)vceqq_s8(*v36, v30)) & 0x80) != 0);
    do
    {
      v37 = v36;
      v36 = (int8x16_t *)((char *)v36 + 4);
    }
    while (v36 <= v34 && v37->i32[0] == -1);
    if (v37 < v34)
    {
      while (v37->u8[0] == 255)
      {
        v37 = (int8x16_t *)((char *)v37 + 1);
        if (v37 >= v34)
        {
          v37 = (int8x16_t *)&v21[v17];
          break;
        }
      }
    }
    v38 = 0;
    v39 = (char *)v37 - v21;
    v40 = (char *)v37 - v21;
    do
    {
      v41 = (int16x8_t)vorrq_s8(v24, vrev16q_s8(*(int8x16_t *)&v18->i8[v38]));
      v42 = vorrq_s8(v26, vrev16q_s8(*(int8x16_t *)&v20->i8[v38]));
      v43 = (int16x8_t)vqtbl1q_s8((int8x16_t)v41, (int8x16_t)xmmword_1850049F0);
      v44 = (int16x8_t)vqtbl1q_s8(v42, (int8x16_t)xmmword_1850049F0);
      v45 = vminq_u16((uint16x8_t)v41, (uint16x8_t)v43);
      v46 = vminq_u16((uint16x8_t)v42, (uint16x8_t)v44);
      v47 = vqsubq_u16((uint16x8_t)v44, v46);
      v48 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v47.i8));
      v49 = vcvtq_f32_u32(vmovl_high_u16(v47));
      v50 = (uint16x4_t)vdup_lane_s16(*(int16x4_t *)v41.i8, 3);
      v51 = (uint16x4_t)vdup_laneq_s16(v41, 7);
      v52 = vcvtq_f32_u32(vmovl_high_u16(v45));
      v53 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v45.i8));
      v54 = (uint16x8_t)vmvnq_s8((int8x16_t)v43);
      v55 = vmull_u16(*(uint16x4_t *)v46.i8, *(uint16x4_t *)v54.i8);
      v56 = vmull_high_u16(v46, v54);
      v57 = (uint16x8_t)vmvnq_s8((int8x16_t)v44);
      v58 = vmull_u16(*(uint16x4_t *)v45.i8, *(uint16x4_t *)v57.i8);
      v59 = vaddq_f32(vcvtq_f32_u32(v56), vcvtq_f32_u32(vmull_high_u16(v45, v57)));
      *(int16x4_t *)v56.i8 = vqmovun_s32(vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(v55), vcvtq_f32_u32(v58)), vcvtq_f32_u32(vmull_lane_u16(v50, *(uint16x4_t *)v42.i8, 3))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v48, vcvtq_f32_u32(vmull_lane_u16(v50, *(uint16x4_t *)v41.i8, 3))), v53), (int8x16_t)vceqzq_f32(v48))), v29)));
      v60 = vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(v59, vcvtq_f32_u32(vmull_laneq_u16(v51, (uint16x8_t)v42, 7))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v49, vcvtq_f32_u32(vmull_laneq_u16(v51, (uint16x8_t)v41, 7))), v52), (int8x16_t)vceqzq_f32(v49))), v29));
      *(int16x4_t *)v48.f32 = vdup_lane_s16(*(int16x4_t *)v56.i8, 3);
      *(int16x4_t *)&v48.u32[2] = vdup_lane_s16(vqmovun_s32(v60), 3);
      v16 = (int8x16_t)vminq_u16((uint16x8_t)vqmovun_high_s32(*(int16x4_t *)v56.i8, v60), (uint16x8_t)v48);
      *(int8x16_t *)&v20->i8[v38] = vrev16q_s8(vbslq_s8((int8x16_t)vceqzq_s16(v43), v42, vbslq_s8((int8x16_t)vceqzq_s16(v44), (int8x16_t)v41, v16)));
      v21 += v27;
      v40 -= 2;
      v38 += v28;
    }
    while (v40 > 1);
    v20 = (int8x8_t *)((char *)v20 + v38);
    v18 = (int8x8_t *)((char *)v18 + v38);
    v17 = v17 - v39 + v40;
LABEL_37:
    if (v17 <= 1)
      goto LABEL_40;
  }
  v67 = 0;
  while (1)
  {
    v16.i32[0] = v33;
    v68 = (int16x8_t)vqtbl1q_s8(v16, (int8x16_t)xmmword_1850049E0);
    v69 = (uint16x8_t)vorrq_s8(v24, vrev16q_s8(*(int8x16_t *)&v18->i8[v67]));
    v70 = vorrq_s8(vbicq_s8(v26, (int8x16_t)vceqzq_s16(v68)), vrev16q_s8(*(int8x16_t *)&v20->i8[v67]));
    v71 = (int16x8_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v69.i8, *(uint16x4_t *)v68.i8), v31), v32);
    v72 = (int16x4_t)vqshrn_n_u32(vsraq_n_u32((uint32x4_t)v71, (uint32x4_t)v71, 0x10uLL), 0x10uLL);
    v73 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16(v69, (uint16x8_t)v68), v31), v32);
    v74 = vsraq_n_u32(v73, v73, 0x10uLL);
    v75 = (int16x4_t)vqshrn_n_u32(v74, 0x10uLL);
    *(int16x4_t *)v71.i8 = vdup_lane_s16(v72, 3);
    v76 = vmull_lane_u16(*(uint16x4_t *)v71.i8, (uint16x4_t)v72, 3);
    v77 = vmin_u16((uint16x4_t)v72, *(uint16x4_t *)v71.i8);
    v78 = (int8x16_t)vqshrn_high_n_u32((uint16x4_t)v72, v74, 0x10uLL);
    v71.u64[1] = (unint64_t)vdup_lane_s16(v75, 3);
    v79 = (int16x8_t)vqtbl1q_s8(v70, (int8x16_t)xmmword_1850049F0);
    v80 = (int8x16_t)vminq_u16((uint16x8_t)v70, (uint16x8_t)v79);
    v81 = vqsubq_u16((uint16x8_t)v79, (uint16x8_t)v80);
    v82 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v81.i8));
    v83 = vcvtq_f32_u32(vmovl_high_u16(v81));
    v84 = vmin_u16((uint16x4_t)v75, (uint16x4_t)v71.u64[1]);
    v85 = vmull_u16(*(uint16x4_t *)v80.i8, (uint16x4_t)vmvn_s8(*(int8x8_t *)v71.i8));
    v86 = vmull_u16((uint16x4_t)*(_OWORD *)&vextq_s8(v80, v80, 8uLL), (uint16x4_t)vmvn_s8((int8x8_t)v71.u64[1]));
    v87 = vmvnq_s8((int8x16_t)v79);
    *(int16x4_t *)v76.i8 = vqmovun_s32(vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(v85), vcvtq_f32_u32(vmull_u16(v77, *(uint16x4_t *)v87.i8))), vcvtq_f32_u32(vmull_lane_u16(*(uint16x4_t *)v71.i8, *(uint16x4_t *)v70.i8, 3))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v82, vcvtq_f32_u32(v76)), vcvtq_f32_u32(vmovl_u16(v77))), (int8x16_t)vceqzq_f32(v82))), v29)));
    v88 = vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(v86), vcvtq_f32_u32(vmull_u16(v84, (uint16x4_t)*(_OWORD *)&vextq_s8(v87, v87, 8uLL)))), vcvtq_f32_u32(vmull_laneq_u16((uint16x4_t)v71.u64[1], (uint16x8_t)v70, 7))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v83, vcvtq_f32_u32(vmull_lane_u16((uint16x4_t)v71.u64[1], (uint16x4_t)v75, 3))), vcvtq_f32_u32(vmovl_u16(v84))), (int8x16_t)vceqzq_f32(v83))), v29));
    *(int16x4_t *)v89.i8 = vdup_lane_s16(*(int16x4_t *)v76.i8, 3);
    v89.u64[1] = (unint64_t)vdup_lane_s16(vqmovun_s32(v88), 3);
    v90 = (int8x16_t)vminq_u16((uint16x8_t)vqmovun_high_s32(*(int16x4_t *)v76.i8, v88), v89);
    v16 = (int8x16_t)vceqzq_s16(v79);
    *(int8x16_t *)&v20->i8[v67] = vrev16q_s8(vbslq_s8((int8x16_t)vceqzq_s16(v71), v70, vbslq_s8(v16, v78, v90)));
    v21 += v27;
    v17 -= 2;
    if (v17 < 2)
      break;
    v33 = *(unsigned __int16 *)v21;
    v67 += v28;
    if ((unsigned __int16)(v33 - 1) >= 0xFFFEu)
    {
      v18 = (int8x8_t *)((char *)v18 + v67);
      v20 = (int8x8_t *)((char *)v20 + v67);
      goto LABEL_37;
    }
  }
  v18 = (int8x8_t *)((char *)v18 + v28 + v67);
  v20 = (int8x8_t *)((char *)v20 + v28 + v67);
LABEL_40:
  v91 = v17 + a15;
  if (v91)
  {
    if (a7)
      v92 = 0;
    else
      v92 = -1;
    v93.i32[0] = 0;
    v93.i16[2] = 0;
    v93.i16[3] = v92;
    v94.i32[0] = 0;
    v94.i16[2] = 0;
    if (a8)
      v95 = 0;
    else
      v95 = -1;
    v94.i16[3] = v95;
    v96 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v97.i64[0] = 0x800000008000;
    v97.i64[1] = 0x800000008000;
    v98 = (float32x4_t)vdupq_n_s32(0x37800080u);
    do
    {
      if (*v21)
      {
        a14.i32[0] = *v21;
        v99 = (int16x4_t)vdup_lane_s8(a14, 0);
        v100 = (int16x4_t)vorr_s8(vbic_s8(v94, (int8x8_t)vceqz_s16(v99)), vrev16_s8(*v20));
        v101 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(v93, vrev16_s8(*v18)), (uint16x4_t)v99), v96), v97);
        *(uint16x4_t *)v101.i8 = vqshrn_n_u32(vsraq_n_u32(v101, v101, 0x10uLL), 0x10uLL);
        v102 = vdup_lane_s16(*(int16x4_t *)v101.i8, 3);
        v103 = vdup_lane_s16(v100, 3);
        v104 = vmin_u16(*(uint16x4_t *)v101.i8, (uint16x4_t)v102);
        v105 = vmin_u16((uint16x4_t)v100, (uint16x4_t)v103);
        v106 = vcvtq_f32_u32(vmovl_u16(vqsub_u16((uint16x4_t)v103, v105)));
        v107 = vqmovun_s32(vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(vmull_u16(v105, (uint16x4_t)vmvn_s8((int8x8_t)v102))), vcvtq_f32_u32(vmull_u16(v104, (uint16x4_t)vmvn_s8((int8x8_t)v103)))), vcvtq_f32_u32(vmull_lane_u16((uint16x4_t)v102, (uint16x4_t)v100, 3))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v106, vcvtq_f32_u32(vmull_lane_u16((uint16x4_t)v102, *(uint16x4_t *)v101.i8, 3))), vcvtq_f32_u32(vmovl_u16(v104))), (int8x16_t)vceqzq_f32(v106))), v98)));
        a14 = vrev16_s8(vbsl_s8((int8x8_t)vceqz_s16(v102), (int8x8_t)v100, vbsl_s8((int8x8_t)vceqz_s16(v103), *(int8x8_t *)v101.i8, (int8x8_t)vmin_u16((uint16x4_t)v107, (uint16x4_t)vdup_lane_s16(v107, 3)))));
        *v20 = a14;
      }
      v108 = &v18[a6];
      v21 += a6;
      if ((unint64_t)v108 >= v19)
        v109 = -(uint64_t)a5;
      else
        v109 = 0;
      v18 = &v108[v109];
      v20 += a6;
      --v91;
    }
    while (v91);
  }
  *result = v18;
  *a3 = v19;
  *a2 = v20;
  *a4 = v21;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)20,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, double a12, int32x4_t a13, uint64_t a14, unint64_t a15)
{
  int8x16_t v15;
  unint64_t v16;
  int8x8_t *v17;
  unint64_t v18;
  int8x8_t *v19;
  char *v20;
  unsigned int v21;
  int8x16_t v22;
  int8x16_t v23;
  unsigned int v24;
  int8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  uint32x4_t v28;
  int8x16_t v29;
  __int32 v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int16x8_t v40;
  int16x8_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  int16x4_t v44;
  int32x4_t v45;
  uint32x4_t v46;
  uint16x8_t v47;
  uint32x4_t v48;
  uint32x4_t v49;
  uint32x4_t v50;
  uint32x4_t v51;
  uint16x8_t v52;
  uint32x4_t v53;
  uint32x4_t v54;
  uint16x8_t v55;
  uint32x4_t v56;
  uint16x8_t v57;
  uint32x4_t v58;
  uint32x4_t v59;
  uint32x4_t v60;
  uint32x4_t v61;
  uint32x4_t v62;
  int8x16_t *v63;
  int8x16_t *v64;
  int8x16_t *v65;
  int8x16_t *v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int8x16_t v72;
  uint32x4_t v73;
  int16x4_t v74;
  uint32x4_t v75;
  uint32x4_t v76;
  int16x4_t v77;
  int16x8_t v78;
  int8x16_t v79;
  int16x4_t v80;
  uint32x4_t v81;
  uint16x4_t v82;
  int8x16_t v83;
  int32x4_t v84;
  int8x16_t v85;
  uint32x4_t v86;
  uint16x4_t v87;
  uint32x4_t v88;
  uint32x4_t v89;
  int8x16_t v90;
  uint32x4_t v91;
  uint32x4_t v92;
  uint32x4_t v93;
  int8x16_t v94;
  uint64_t v95;
  __int16 v96;
  int8x8_t v97;
  int8x8_t v98;
  __int16 v99;
  uint32x4_t v100;
  int32x4_t v101;
  int16x4_t v102;
  int8x8_t v103;
  int16x4_t v104;
  int16x4_t v105;
  int16x4_t v106;
  uint16x4_t v107;
  uint16x4_t v108;
  uint16x4_t v109;
  uint32x4_t v110;
  uint32x4_t v111;
  uint32x4_t v112;
  int8x8_t *v113;
  uint64_t v114;

  v16 = a15;
  v17 = *result;
  v18 = *a3;
  v19 = *a2;
  v20 = *a4;
  if (a15 < 2)
    goto LABEL_40;
  if (a7)
    v21 = 0;
  else
    v21 = -1;
  v22.i64[0] = 0xFFFF000000000000;
  v22.i64[1] = 0xFFFF000000000000;
  v23 = vandq_s8((int8x16_t)vdupq_n_s16(v21), v22);
  if (a8)
    v24 = 0;
  else
    v24 = -1;
  v25 = vandq_s8((int8x16_t)vdupq_n_s16(v24), v22);
  v26 = 2 * a6;
  v27 = 16 * a6;
  v28 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  a13.i64[0] = 0x800000008000;
  a13.i64[1] = 0x800000008000;
  v29.i64[0] = -1;
  v29.i64[1] = -1;
  while (1)
  {
    v30 = *(unsigned __int16 *)v20;
    if (!*(_WORD *)v20)
    {
      v63 = (int8x16_t *)&v20[v16];
      v64 = (int8x16_t *)v20;
      do
        v65 = v64++;
      while (v64 <= v63 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v65)) & 0x80) != 0);
      do
      {
        v66 = v65;
        v65 = (int8x16_t *)((char *)v65 + 4);
      }
      while (v65 <= v63 && !v66->i32[0]);
      if (v66 < v63)
      {
        while (!v66->i8[0])
        {
          v66 = (int8x16_t *)((char *)v66 + 1);
          if (v66 >= v63)
          {
            v66 = (int8x16_t *)&v20[v16];
            break;
          }
        }
      }
      v67 = (char *)v66 - v20;
      v68 = ((char *)v66 - v20) * a6;
      v17 += v68;
      v19 += v68;
      v20 += v68;
      v16 -= v67;
      goto LABEL_37;
    }
    if (v30 != 0xFFFF)
      break;
    v31 = (int8x16_t *)&v20[v16];
    v32 = (int8x16_t *)v20;
    do
      v33 = v32++;
    while (v32 <= v31 && (vminvq_u8((uint8x16_t)vceqq_s8(*v33, v29)) & 0x80) != 0);
    do
    {
      v34 = v33;
      v33 = (int8x16_t *)((char *)v33 + 4);
    }
    while (v33 <= v31 && v34->i32[0] == -1);
    if (v34 < v31)
    {
      while (v34->u8[0] == 255)
      {
        v34 = (int8x16_t *)((char *)v34 + 1);
        if (v34 >= v31)
        {
          v34 = (int8x16_t *)&v20[v16];
          break;
        }
      }
    }
    v35 = 0;
    v36 = (char *)v34 - v20;
    v37 = (char *)v34 - v20;
    do
    {
      v38 = vorrq_s8(v23, vrev16q_s8(*(int8x16_t *)&v17->i8[v35]));
      v39 = vorrq_s8(v25, vrev16q_s8(*(int8x16_t *)&v19->i8[v35]));
      v40 = (int16x8_t)vqtbl1q_s8(v38, (int8x16_t)xmmword_1850049F0);
      v41 = (int16x8_t)vqtbl1q_s8(v39, (int8x16_t)xmmword_1850049F0);
      v42 = vminq_u16((uint16x8_t)v38, (uint16x8_t)v40);
      v43 = vminq_u16((uint16x8_t)v39, (uint16x8_t)v41);
      v44 = vqmovun_s32(vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmull_u16(*(uint16x4_t *)v43.i8, *(uint16x4_t *)v43.i8)), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v41.i8)))));
      v45 = vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmull_high_u16(v43, v43)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL)))));
      v46 = vmull_lane_u16((uint16x4_t)v44, *(uint16x4_t *)v38.i8, 3);
      v47 = vqsubq_u16(v43, (uint16x8_t)vqmovun_high_s32(v44, v45));
      v48 = vmull_u16(*(uint16x4_t *)v47.i8, *(uint16x4_t *)v42.i8);
      v49 = vmull_high_u16(v47, v42);
      v50 = vqaddq_u32(v46, vqaddq_u32(v48, v48));
      v51 = vqaddq_u32(vmull_laneq_u16((uint16x4_t)vqmovun_s32(v45), (uint16x8_t)v38, 7), vqaddq_u32(v49, v49));
      v52 = (uint16x8_t)vmvnq_s8((int8x16_t)v40);
      v53 = vmull_u16(*(uint16x4_t *)v43.i8, *(uint16x4_t *)v52.i8);
      v54 = vmull_high_u16(v43, v52);
      v55 = (uint16x8_t)vqaddq_u32(v50, v53);
      v56 = vqaddq_u32(v51, v54);
      v57 = (uint16x8_t)vmvnq_s8((int8x16_t)v41);
      v58 = vmull_u16(*(uint16x4_t *)v42.i8, *(uint16x4_t *)v57.i8);
      v59 = vqaddq_u32(v56, vmull_high_u16(v42, v57));
      v60 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32((uint32x4_t)v55, v58), v28), a13);
      *(uint16x4_t *)v60.i8 = vqshrn_n_u32(vsraq_n_u32(v60, v60, 0x10uLL), 0x10uLL);
      v61 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v59, v28), a13);
      v62 = vsraq_n_u32(v61, v61, 0x10uLL);
      *(int16x4_t *)v55.i8 = vdup_lane_s16(*(int16x4_t *)v60.i8, 3);
      v55.u64[1] = (unint64_t)vdup_lane_s16((int16x4_t)vqshrn_n_u32(v62, 0x10uLL), 3);
      v15 = vbslq_s8((int8x16_t)vceqzq_s16(v41), v38, (int8x16_t)vminq_u16(vqshrn_high_n_u32(*(uint16x4_t *)v60.i8, v62, 0x10uLL), v55));
      *(int8x16_t *)&v19->i8[v35] = vrev16q_s8(vbslq_s8((int8x16_t)vceqzq_s16(v40), v39, v15));
      v20 += v26;
      v37 -= 2;
      v35 += v27;
    }
    while (v37 > 1);
    v19 = (int8x8_t *)((char *)v19 + v35);
    v17 = (int8x8_t *)((char *)v17 + v35);
    v16 = v16 - v36 + v37;
LABEL_37:
    if (v16 <= 1)
      goto LABEL_40;
  }
  v69 = 0;
  while (1)
  {
    v15.i32[0] = v30;
    v70 = (int16x8_t)vqtbl1q_s8(v15, (int8x16_t)xmmword_1850049E0);
    v71 = (int16x8_t)vorrq_s8(v23, vrev16q_s8(*(int8x16_t *)&v17->i8[v69]));
    v72 = vorrq_s8(vbicq_s8(v25, (int8x16_t)vceqzq_s16(v70)), vrev16q_s8(*(int8x16_t *)&v19->i8[v69]));
    v73 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v71.i8, *(uint16x4_t *)v70.i8), v28), a13);
    v74 = (int16x4_t)vqshrn_n_u32(vsraq_n_u32(v73, v73, 0x10uLL), 0x10uLL);
    v75 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16((uint16x8_t)v71, (uint16x8_t)v70), v28), a13);
    v76 = vsraq_n_u32(v75, v75, 0x10uLL);
    v77 = (int16x4_t)vqshrn_n_u32(v76, 0x10uLL);
    *(int16x4_t *)v71.i8 = vdup_lane_s16(v74, 3);
    v78 = (int16x8_t)vqtbl1q_s8(v72, (int8x16_t)xmmword_1850049F0);
    v79 = (int8x16_t)vminq_u16((uint16x8_t)v72, (uint16x8_t)v78);
    v80 = vqmovun_s32(vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmull_u16(*(uint16x4_t *)v79.i8, *(uint16x4_t *)v79.i8)), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v78.i8)))));
    v81 = vmull_lane_u16((uint16x4_t)v80, (uint16x4_t)v74, 3);
    v82 = vmin_u16((uint16x4_t)v74, *(uint16x4_t *)v71.i8);
    v71.u64[1] = (unint64_t)vdup_lane_s16(v77, 3);
    v83 = (int8x16_t)vqshrn_high_n_u32((uint16x4_t)v74, v76, 0x10uLL);
    v84 = vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmull_high_u16((uint16x8_t)v79, (uint16x8_t)v79)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL)))));
    v85 = (int8x16_t)vqsubq_u16((uint16x8_t)v79, (uint16x8_t)vqmovun_high_s32(v80, v84));
    v86 = vmull_u16(*(uint16x4_t *)v85.i8, v82);
    v87 = vmin_u16((uint16x4_t)v77, (uint16x4_t)v71.u64[1]);
    v88 = vmull_u16((uint16x4_t)*(_OWORD *)&vextq_s8(v85, v85, 8uLL), v87);
    v89 = vqaddq_u32(vqaddq_u32(vmull_lane_u16((uint16x4_t)vqmovun_s32(v84), (uint16x4_t)v77, 3), vqaddq_u32(v88, v88)), vmull_u16((uint16x4_t)*(_OWORD *)&vextq_s8(v79, v79, 8uLL), (uint16x4_t)vmvn_s8((int8x8_t)v71.u64[1])));
    v90 = vmvnq_s8((int8x16_t)v78);
    v91 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vqaddq_u32(v81, vqaddq_u32(v86, v86)), vmull_u16(*(uint16x4_t *)v79.i8, (uint16x4_t)vmvn_s8(*(int8x8_t *)v71.i8))), vmull_u16(v82, *(uint16x4_t *)v90.i8)), v28), a13);
    *(uint16x4_t *)v91.i8 = vqshrn_n_u32(vsraq_n_u32(v91, v91, 0x10uLL), 0x10uLL);
    v92 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(v89, vmull_u16(v87, (uint16x4_t)*(_OWORD *)&vextq_s8(v90, v90, 8uLL))), v28), a13);
    v93 = vsraq_n_u32(v92, v92, 0x10uLL);
    *(int16x4_t *)v90.i8 = vdup_lane_s16(*(int16x4_t *)v91.i8, 3);
    v90.u64[1] = (unint64_t)vdup_lane_s16((int16x4_t)vqshrn_n_u32(v93, 0x10uLL), 3);
    v94 = vbslq_s8((int8x16_t)vceqzq_s16(v78), v83, (int8x16_t)vminq_u16(vqshrn_high_n_u32(*(uint16x4_t *)v91.i8, v93, 0x10uLL), (uint16x8_t)v90));
    v15 = (int8x16_t)vceqzq_s16(v71);
    *(int8x16_t *)&v19->i8[v69] = vrev16q_s8(vbslq_s8(v15, v72, v94));
    v20 += v26;
    v16 -= 2;
    if (v16 < 2)
      break;
    v30 = *(unsigned __int16 *)v20;
    v69 += v27;
    if ((unsigned __int16)(v30 - 1) >= 0xFFFEu)
    {
      v17 = (int8x8_t *)((char *)v17 + v69);
      v19 = (int8x8_t *)((char *)v19 + v69);
      goto LABEL_37;
    }
  }
  v17 = (int8x8_t *)((char *)v17 + v27 + v69);
  v19 = (int8x8_t *)((char *)v19 + v27 + v69);
LABEL_40:
  v95 = v16 + a14;
  if (v95)
  {
    if (a7)
      v96 = 0;
    else
      v96 = -1;
    v97.i32[0] = 0;
    v97.i16[2] = 0;
    v97.i16[3] = v96;
    v98.i32[0] = 0;
    v98.i16[2] = 0;
    if (a8)
      v99 = 0;
    else
      v99 = -1;
    v98.i16[3] = v99;
    v100 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v101.i64[0] = 0x800000008000;
    v101.i64[1] = 0x800000008000;
    do
    {
      if (*v20)
      {
        a13.i32[0] = *v20;
        v102 = (int16x4_t)vdup_lane_s8(*(int8x8_t *)a13.i8, 0);
        v103 = vbic_s8(v98, (int8x8_t)vceqz_s16(v102));
        a13 = vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(v97, vrev16_s8(*v17)), (uint16x4_t)v102), v100), v101);
        *(uint16x4_t *)a13.i8 = vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a13, (uint32x4_t)a13, 0x10uLL), 0x10uLL);
        v104 = vdup_lane_s16(*(int16x4_t *)a13.i8, 3);
        v105 = (int16x4_t)vorr_s8(v103, vrev16_s8(*v19));
        v106 = vdup_lane_s16(v105, 3);
        v107 = vmin_u16(*(uint16x4_t *)a13.i8, (uint16x4_t)v104);
        v108 = vmin_u16((uint16x4_t)v105, (uint16x4_t)v106);
        v109 = (uint16x4_t)vqmovun_s32(vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmull_u16(v108, v108)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v106)))));
        v110 = vmull_lane_u16(v109, *(uint16x4_t *)a13.i8, 3);
        v111 = vmull_u16(vqsub_u16(v108, v109), v107);
        v112 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vqaddq_u32(v110, vqaddq_u32(v111, v111)), vmull_u16(v108, (uint16x4_t)vmvn_s8((int8x8_t)v104))), vmull_u16(v107, (uint16x4_t)vmvn_s8((int8x8_t)v106))), v100), v101);
        *(uint16x4_t *)v112.i8 = vqshrn_n_u32(vsraq_n_u32(v112, v112, 0x10uLL), 0x10uLL);
        *(int8x8_t *)a13.i8 = vrev16_s8(vbsl_s8((int8x8_t)vceqz_s16(v104), (int8x8_t)v105, vbsl_s8((int8x8_t)vceqz_s16(v106), *(int8x8_t *)a13.i8, (int8x8_t)vmin_u16(*(uint16x4_t *)v112.i8, (uint16x4_t)vdup_lane_s16(*(int16x4_t *)v112.i8, 3)))));
        *v19 = *(int8x8_t *)a13.i8;
      }
      v113 = &v17[a6];
      v20 += a6;
      if ((unint64_t)v113 >= v18)
        v114 = -(uint64_t)a5;
      else
        v114 = 0;
      v17 = &v113[v114];
      v19 += a6;
      --v95;
    }
    while (v95);
  }
  *result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)21,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, double a12, double a13, int32x4_t a14, uint64_t a15, unint64_t a16)
{
  int8x16_t v16;
  int16x8_t v17;
  unint64_t v18;
  int8x8_t *v19;
  unint64_t v20;
  int8x8_t *v21;
  char *v22;
  unsigned int v23;
  int8x16_t v24;
  int8x16_t v25;
  unsigned int v26;
  int8x16_t v27;
  uint64_t v28;
  uint64_t v29;
  uint32x4_t v30;
  int8x16_t v31;
  __int32 v32;
  int8x16_t *v33;
  int8x16_t *v34;
  int8x16_t *v35;
  int8x16_t *v36;
  uint64_t v37;
  int64_t v38;
  unint64_t v39;
  int8x16_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  int16x8_t v46;
  int8x16_t v47;
  uint32x4_t v48;
  uint32x4_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint32x4_t v52;
  uint32x4_t v53;
  uint32x4_t v54;
  uint16x8_t v55;
  uint16x8_t v56;
  uint32x4_t v57;
  uint32x4_t v58;
  uint16x8_t v59;
  uint32x4_t v60;
  uint32x4_t v61;
  uint32x4_t v62;
  uint32x4_t v63;
  uint32x4_t v64;
  int8x16_t *v65;
  int8x16_t *v66;
  int8x16_t *v67;
  int8x16_t *v68;
  int64_t v69;
  int64_t v70;
  uint64_t v71;
  int16x8_t v72;
  uint16x8_t v73;
  int16x8_t v74;
  uint32x4_t v75;
  int16x4_t v76;
  uint32x4_t v77;
  uint32x4_t v78;
  int16x4_t v79;
  uint16x8_t v80;
  int8x16_t v81;
  int16x8_t v82;
  uint16x8_t v83;
  int8x16_t v84;
  int16x8_t v85;
  uint32x4_t v86;
  uint16x4_t v87;
  uint16x4_t v88;
  uint32x4_t v89;
  uint16x8_t v90;
  uint16x8_t v91;
  uint32x4_t v92;
  uint32x4_t v93;
  int8x16_t v94;
  uint32x4_t v95;
  uint32x4_t v96;
  uint32x4_t v97;
  int8x16_t v98;
  uint64_t v99;
  __int16 v100;
  int8x8_t v101;
  __int16 v102;
  int8x8_t v103;
  uint32x4_t v104;
  int32x4_t v105;
  int16x4_t v106;
  int8x8_t v107;
  int16x4_t v108;
  int16x4_t v109;
  int16x4_t v110;
  uint16x4_t v111;
  uint16x4_t v112;
  uint32x4_t v113;
  uint32x4_t v114;
  uint32x4_t v115;
  int8x8_t *v116;
  uint64_t v117;

  v18 = a16;
  v19 = *result;
  v20 = *a3;
  v21 = *a2;
  v22 = *a4;
  if (a16 < 2)
    goto LABEL_40;
  if (a7)
    v23 = 0;
  else
    v23 = -1;
  v24.i64[0] = 0xFFFF000000000000;
  v24.i64[1] = 0xFFFF000000000000;
  v25 = vandq_s8((int8x16_t)vdupq_n_s16(v23), v24);
  if (a8)
    v26 = 0;
  else
    v26 = -1;
  v27 = vandq_s8((int8x16_t)vdupq_n_s16(v26), v24);
  v28 = 2 * a6;
  v29 = 16 * a6;
  v30 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  a14.i64[0] = 0x800000008000;
  a14.i64[1] = 0x800000008000;
  v31.i64[0] = -1;
  v31.i64[1] = -1;
  while (1)
  {
    v32 = *(unsigned __int16 *)v22;
    if (!*(_WORD *)v22)
    {
      v65 = (int8x16_t *)&v22[v18];
      v66 = (int8x16_t *)v22;
      do
        v67 = v66++;
      while (v66 <= v65 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v67)) & 0x80) != 0);
      do
      {
        v68 = v67;
        v67 = (int8x16_t *)((char *)v67 + 4);
      }
      while (v67 <= v65 && !v68->i32[0]);
      if (v68 < v65)
      {
        while (!v68->i8[0])
        {
          v68 = (int8x16_t *)((char *)v68 + 1);
          if (v68 >= v65)
          {
            v68 = (int8x16_t *)&v22[v18];
            break;
          }
        }
      }
      v69 = (char *)v68 - v22;
      v70 = ((char *)v68 - v22) * a6;
      v19 += v70;
      v21 += v70;
      v22 += v70;
      v18 -= v69;
      goto LABEL_37;
    }
    if (v32 != 0xFFFF)
      break;
    v33 = (int8x16_t *)&v22[v18];
    v34 = (int8x16_t *)v22;
    do
      v35 = v34++;
    while (v34 <= v33 && (vminvq_u8((uint8x16_t)vceqq_s8(*v35, v31)) & 0x80) != 0);
    do
    {
      v36 = v35;
      v35 = (int8x16_t *)((char *)v35 + 4);
    }
    while (v35 <= v33 && v36->i32[0] == -1);
    if (v36 < v33)
    {
      while (v36->u8[0] == 255)
      {
        v36 = (int8x16_t *)((char *)v36 + 1);
        if (v36 >= v33)
        {
          v36 = (int8x16_t *)&v22[v18];
          break;
        }
      }
    }
    v37 = 0;
    v38 = (char *)v36 - v22;
    v39 = (char *)v36 - v22;
    do
    {
      v40 = vorrq_s8(v25, vrev16q_s8(*(int8x16_t *)&v19->i8[v37]));
      v41 = (int16x8_t)vorrq_s8(v27, vrev16q_s8(*(int8x16_t *)&v21->i8[v37]));
      v42 = (int16x8_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_1850049F0);
      v43 = (int16x8_t)vqtbl1q_s8((int8x16_t)v41, (int8x16_t)xmmword_1850049F0);
      v44 = vminq_u16((uint16x8_t)v40, (uint16x8_t)v42);
      v45 = vminq_u16((uint16x8_t)v41, (uint16x8_t)v43);
      v46 = (int16x8_t)vcgeq_u16(vrhaddq_u16((uint16x8_t)v42, (uint16x8_t)0), v44);
      v47 = (int8x16_t)vzip1q_s16(v46, v46);
      v48 = vmull_u16(*(uint16x4_t *)v44.i8, *(uint16x4_t *)v45.i8);
      v49 = vmull_high_u16(v44, v45);
      v50 = vqsubq_u16((uint16x8_t)v43, v45);
      v51 = vqsubq_u16((uint16x8_t)v42, v44);
      v52 = vmull_u16(*(uint16x4_t *)v50.i8, *(uint16x4_t *)v51.i8);
      v53 = vmull_high_u16(v50, v51);
      v54 = (uint32x4_t)vbslq_s8((int8x16_t)vzip2q_s16(v46, v46), (int8x16_t)vqaddq_u32(v49, v49), (int8x16_t)vqsubq_u32(vmull_laneq_u16((uint16x4_t)vdup_laneq_s16(v41, 7), (uint16x8_t)v40, 7), vqaddq_u32(v53, v53)));
      v55 = (uint16x8_t)vbslq_s8(v47, (int8x16_t)vqaddq_u32(v48, v48), (int8x16_t)vqsubq_u32(vmull_lane_u16((uint16x4_t)vdup_lane_s16(*(int16x4_t *)v41.i8, 3), *(uint16x4_t *)v40.i8, 3), vqaddq_u32(v52, v52)));
      v56 = (uint16x8_t)vmvnq_s8((int8x16_t)v42);
      v57 = vmull_u16(*(uint16x4_t *)v45.i8, *(uint16x4_t *)v56.i8);
      v58 = vqaddq_u32(v54, vmull_high_u16(v45, v56));
      v59 = (uint16x8_t)vmvnq_s8((int8x16_t)v43);
      v60 = vmull_u16(*(uint16x4_t *)v44.i8, *(uint16x4_t *)v59.i8);
      v61 = vqaddq_u32(v58, vmull_high_u16(v44, v59));
      v62 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32((uint32x4_t)v55, v57), v60), v30), a14);
      *(uint16x4_t *)v62.i8 = vqshrn_n_u32(vsraq_n_u32(v62, v62, 0x10uLL), 0x10uLL);
      v63 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v61, v30), a14);
      v64 = vsraq_n_u32(v63, v63, 0x10uLL);
      *(int16x4_t *)v55.i8 = vdup_lane_s16(*(int16x4_t *)v62.i8, 3);
      v55.u64[1] = (unint64_t)vdup_lane_s16((int16x4_t)vqshrn_n_u32(v64, 0x10uLL), 3);
      v17 = (int16x8_t)vminq_u16(vqshrn_high_n_u32(*(uint16x4_t *)v62.i8, v64, 0x10uLL), v55);
      v16 = vbslq_s8((int8x16_t)vceqzq_s16(v43), v40, (int8x16_t)v17);
      *(int8x16_t *)&v21->i8[v37] = vrev16q_s8(vbslq_s8((int8x16_t)vceqzq_s16(v42), (int8x16_t)v41, v16));
      v22 += v28;
      v39 -= 2;
      v37 += v29;
    }
    while (v39 > 1);
    v21 = (int8x8_t *)((char *)v21 + v37);
    v19 = (int8x8_t *)((char *)v19 + v37);
    v18 = v18 - v38 + v39;
LABEL_37:
    if (v18 <= 1)
      goto LABEL_40;
  }
  v71 = 0;
  while (1)
  {
    v16.i32[0] = v32;
    v72 = (int16x8_t)vqtbl1q_s8(v16, (int8x16_t)xmmword_1850049E0);
    v73 = (uint16x8_t)vorrq_s8(v25, vrev16q_s8(*(int8x16_t *)&v19->i8[v71]));
    v74 = (int16x8_t)vorrq_s8(vbicq_s8(v27, (int8x16_t)vceqzq_s16(v72)), vrev16q_s8(*(int8x16_t *)&v21->i8[v71]));
    v75 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v73.i8, *(uint16x4_t *)v72.i8), v30), a14);
    v76 = (int16x4_t)vqshrn_n_u32(vsraq_n_u32(v75, v75, 0x10uLL), 0x10uLL);
    v77 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16(v73, (uint16x8_t)v72), v30), a14);
    v78 = vsraq_n_u32(v77, v77, 0x10uLL);
    v79 = (int16x4_t)vqshrn_n_u32(v78, 0x10uLL);
    *(int16x4_t *)v72.i8 = vdup_lane_s16(v76, 3);
    *(uint16x4_t *)v73.i8 = vmin_u16((uint16x4_t)v76, *(uint16x4_t *)v72.i8);
    v80 = (uint16x8_t)vmull_lane_u16((uint16x4_t)vdup_lane_s16(*(int16x4_t *)v74.i8, 3), (uint16x4_t)v76, 3);
    v81 = (int8x16_t)vqshrn_high_n_u32((uint16x4_t)v76, v78, 0x10uLL);
    v72.u64[1] = (unint64_t)vdup_lane_s16(v79, 3);
    v82 = (int16x8_t)vqtbl1q_s8((int8x16_t)v74, (int8x16_t)xmmword_1850049F0);
    v83 = vminq_u16((uint16x8_t)v81, (uint16x8_t)v72);
    v84 = (int8x16_t)vminq_u16((uint16x8_t)v74, (uint16x8_t)v82);
    v85 = (int16x8_t)vcgeq_u16(vrhaddq_u16((uint16x8_t)v72, (uint16x8_t)0), v83);
    v86 = vmull_u16(*(uint16x4_t *)v73.i8, *(uint16x4_t *)v84.i8);
    v87 = vmin_u16((uint16x4_t)v79, (uint16x4_t)v72.u64[1]);
    v88 = (uint16x4_t)vextq_s8(v84, v84, 8uLL).u64[0];
    v89 = vmull_u16(v87, v88);
    v90 = vqsubq_u16((uint16x8_t)v82, (uint16x8_t)v84);
    v91 = vqsubq_u16((uint16x8_t)v72, v83);
    v92 = vmull_u16(*(uint16x4_t *)v90.i8, *(uint16x4_t *)v91.i8);
    v93 = vmull_high_u16(v90, v91);
    v94 = vmvnq_s8((int8x16_t)v82);
    v95 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32((uint32x4_t)vbslq_s8((int8x16_t)vzip1q_s16(v85, v85), (int8x16_t)vqaddq_u32(v86, v86), (int8x16_t)vqsubq_u32((uint32x4_t)v80, vqaddq_u32(v92, v92))), vmull_u16(*(uint16x4_t *)v84.i8, (uint16x4_t)vmvn_s8(*(int8x8_t *)v72.i8))), vmull_u16(*(uint16x4_t *)v73.i8, *(uint16x4_t *)v94.i8)), v30), a14);
    *(uint16x4_t *)v95.i8 = vqshrn_n_u32(vsraq_n_u32(v95, v95, 0x10uLL), 0x10uLL);
    v96 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32((uint32x4_t)vbslq_s8((int8x16_t)vzip2q_s16(v85, v85), (int8x16_t)vqaddq_u32(v89, v89), (int8x16_t)vqsubq_u32(vmull_lane_u16((uint16x4_t)vdup_laneq_s16(v74, 7), (uint16x4_t)v79, 3), vqaddq_u32(v93, v93))), vmull_u16(v88, (uint16x4_t)vmvn_s8((int8x8_t)v72.u64[1]))), vmull_u16(v87, (uint16x4_t)*(_OWORD *)&vextq_s8(v94, v94, 8uLL))), v30), a14);
    v97 = vsraq_n_u32(v96, v96, 0x10uLL);
    *(int16x4_t *)v80.i8 = vdup_lane_s16(*(int16x4_t *)v95.i8, 3);
    v80.u64[1] = (unint64_t)vdup_lane_s16((int16x4_t)vqshrn_n_u32(v97, 0x10uLL), 3);
    v98 = (int8x16_t)vminq_u16(vqshrn_high_n_u32(*(uint16x4_t *)v95.i8, v97, 0x10uLL), v80);
    v17 = vceqzq_s16(v82);
    v16 = (int8x16_t)vceqzq_s16(v72);
    *(int8x16_t *)&v21->i8[v71] = vrev16q_s8(vbslq_s8(v16, (int8x16_t)v74, vbslq_s8((int8x16_t)v17, v81, v98)));
    v22 += v28;
    v18 -= 2;
    if (v18 < 2)
      break;
    v32 = *(unsigned __int16 *)v22;
    v71 += v29;
    if ((unsigned __int16)(v32 - 1) >= 0xFFFEu)
    {
      v19 = (int8x8_t *)((char *)v19 + v71);
      v21 = (int8x8_t *)((char *)v21 + v71);
      goto LABEL_37;
    }
  }
  v19 = (int8x8_t *)((char *)v19 + v29 + v71);
  v21 = (int8x8_t *)((char *)v21 + v29 + v71);
LABEL_40:
  v99 = v18 + a15;
  if (v99)
  {
    if (a7)
      v100 = 0;
    else
      v100 = -1;
    v101.i32[0] = 0;
    v101.i16[2] = 0;
    v101.i16[3] = v100;
    if (a8)
      v102 = 0;
    else
      v102 = -1;
    v103.i32[0] = 0;
    v103.i16[2] = 0;
    v103.i16[3] = v102;
    v104 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v105.i64[0] = 0x800000008000;
    v105.i64[1] = 0x800000008000;
    do
    {
      if (*v22)
      {
        a14.i32[0] = *v22;
        v106 = (int16x4_t)vdup_lane_s8(*(int8x8_t *)a14.i8, 0);
        v107 = vbic_s8(v103, (int8x8_t)vceqz_s16(v106));
        a14 = vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(v101, vrev16_s8(*v19)), (uint16x4_t)v106), v104), v105);
        *(uint16x4_t *)a14.i8 = vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a14, (uint32x4_t)a14, 0x10uLL), 0x10uLL);
        v108 = vdup_lane_s16(*(int16x4_t *)a14.i8, 3);
        v109 = (int16x4_t)vorr_s8(v107, vrev16_s8(*v21));
        v110 = vdup_lane_s16(v109, 3);
        v111 = vmin_u16(*(uint16x4_t *)a14.i8, (uint16x4_t)v108);
        v112 = vmin_u16((uint16x4_t)v109, (uint16x4_t)v110);
        *(uint16x4_t *)v17.i8 = vcge_u16(vrhadd_u16((uint16x4_t)v108, 0), v111);
        v113 = vmull_u16(v111, v112);
        v114 = vmull_u16(vqsub_u16((uint16x4_t)v110, v112), vqsub_u16((uint16x4_t)v108, v111));
        v17 = (int16x8_t)vbslq_s8((int8x16_t)vzip1q_s16(v17, v17), (int8x16_t)vqaddq_u32(v113, v113), (int8x16_t)vqsubq_u32(vmull_lane_u16((uint16x4_t)v110, *(uint16x4_t *)a14.i8, 3), vqaddq_u32(v114, v114)));
        v115 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32((uint32x4_t)v17, vmull_u16(v112, (uint16x4_t)vmvn_s8((int8x8_t)v108))), vmull_u16(v111, (uint16x4_t)vmvn_s8((int8x8_t)v110))), v104), v105);
        *(uint16x4_t *)v115.i8 = vqshrn_n_u32(vsraq_n_u32(v115, v115, 0x10uLL), 0x10uLL);
        *(int8x8_t *)a14.i8 = vrev16_s8(vbsl_s8((int8x8_t)vceqz_s16(v108), (int8x8_t)v109, vbsl_s8((int8x8_t)vceqz_s16(v110), *(int8x8_t *)a14.i8, (int8x8_t)vmin_u16(*(uint16x4_t *)v115.i8, (uint16x4_t)vdup_lane_s16(*(int16x4_t *)v115.i8, 3)))));
        *v21 = *(int8x8_t *)a14.i8;
      }
      v116 = &v19[a6];
      v22 += a6;
      if ((unint64_t)v116 >= v20)
        v117 = -(uint64_t)a5;
      else
        v117 = 0;
      v19 = &v116[v117];
      v21 += a6;
      --v99;
    }
    while (v99);
  }
  *result = v19;
  *a3 = v20;
  *a2 = v21;
  *a4 = v22;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)22,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, double a12, int32x4_t a13, uint64_t a14, unint64_t a15)
{
  int8x16_t v15;
  unint64_t v16;
  int8x8_t *v17;
  unint64_t v18;
  int8x8_t *v19;
  char *v20;
  unsigned int v21;
  int8x16_t v22;
  int8x16_t v23;
  unsigned int v24;
  int8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  uint32x4_t v28;
  int8x16_t v29;
  __int32 v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int16x8_t v40;
  int16x8_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  uint32x4_t v44;
  uint32x4_t v45;
  uint32x4_t v46;
  uint32x4_t v47;
  uint16x8_t v48;
  uint32x4_t v49;
  uint32x4_t v50;
  uint16x8_t v51;
  uint32x4_t v52;
  uint32x4_t v53;
  uint32x4_t v54;
  uint32x4_t v55;
  uint32x4_t v56;
  int8x16_t *v57;
  int8x16_t *v58;
  int8x16_t *v59;
  int8x16_t *v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  int16x8_t v64;
  uint16x8_t v65;
  int16x8_t v66;
  uint32x4_t v67;
  int16x4_t v68;
  uint32x4_t v69;
  uint32x4_t v70;
  int16x4_t v71;
  int16x8_t v72;
  int8x16_t v73;
  uint16x4_t v74;
  uint32x4_t v75;
  int8x16_t v76;
  uint16x4_t v77;
  int8x16_t v78;
  uint16x4_t v79;
  uint32x4_t v80;
  uint32x4_t v81;
  int8x16_t v82;
  uint32x4_t v83;
  uint32x4_t v84;
  uint32x4_t v85;
  uint16x8_t v86;
  uint64_t v87;
  __int16 v88;
  int8x8_t v89;
  int8x8_t v90;
  __int16 v91;
  uint32x4_t v92;
  int32x4_t v93;
  int16x4_t v94;
  int16x4_t v95;
  uint32x4_t v96;
  int16x4_t v97;
  int16x4_t v98;
  uint16x4_t v99;
  uint16x4_t v100;
  uint32x4_t v101;
  uint32x4_t v102;
  int8x8_t *v103;
  uint64_t v104;

  v16 = a15;
  v17 = *result;
  v18 = *a3;
  v19 = *a2;
  v20 = *a4;
  if (a15 < 2)
    goto LABEL_40;
  if (a7)
    v21 = 0;
  else
    v21 = -1;
  v22.i64[0] = 0xFFFF000000000000;
  v22.i64[1] = 0xFFFF000000000000;
  v23 = vandq_s8((int8x16_t)vdupq_n_s16(v21), v22);
  if (a8)
    v24 = 0;
  else
    v24 = -1;
  v25 = vandq_s8((int8x16_t)vdupq_n_s16(v24), v22);
  v26 = 2 * a6;
  v27 = 16 * a6;
  v28 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  a13.i64[0] = 0x800000008000;
  a13.i64[1] = 0x800000008000;
  v29.i64[0] = -1;
  v29.i64[1] = -1;
  while (1)
  {
    v30 = *(unsigned __int16 *)v20;
    if (!*(_WORD *)v20)
    {
      v57 = (int8x16_t *)&v20[v16];
      v58 = (int8x16_t *)v20;
      do
        v59 = v58++;
      while (v58 <= v57 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v59)) & 0x80) != 0);
      do
      {
        v60 = v59;
        v59 = (int8x16_t *)((char *)v59 + 4);
      }
      while (v59 <= v57 && !v60->i32[0]);
      if (v60 < v57)
      {
        while (!v60->i8[0])
        {
          v60 = (int8x16_t *)((char *)v60 + 1);
          if (v60 >= v57)
          {
            v60 = (int8x16_t *)&v20[v16];
            break;
          }
        }
      }
      v61 = (char *)v60 - v20;
      v62 = ((char *)v60 - v20) * a6;
      v17 += v62;
      v19 += v62;
      v20 += v62;
      v16 -= v61;
      goto LABEL_37;
    }
    if (v30 != 0xFFFF)
      break;
    v31 = (int8x16_t *)&v20[v16];
    v32 = (int8x16_t *)v20;
    do
      v33 = v32++;
    while (v32 <= v31 && (vminvq_u8((uint8x16_t)vceqq_s8(*v33, v29)) & 0x80) != 0);
    do
    {
      v34 = v33;
      v33 = (int8x16_t *)((char *)v33 + 4);
    }
    while (v33 <= v31 && v34->i32[0] == -1);
    if (v34 < v31)
    {
      while (v34->u8[0] == 255)
      {
        v34 = (int8x16_t *)((char *)v34 + 1);
        if (v34 >= v31)
        {
          v34 = (int8x16_t *)&v20[v16];
          break;
        }
      }
    }
    v35 = 0;
    v36 = (char *)v34 - v20;
    v37 = (char *)v34 - v20;
    do
    {
      v38 = vorrq_s8(v23, vrev16q_s8(*(int8x16_t *)&v17->i8[v35]));
      v39 = vorrq_s8(v25, vrev16q_s8(*(int8x16_t *)&v19->i8[v35]));
      v40 = (int16x8_t)vqtbl1q_s8(v38, (int8x16_t)xmmword_1850049F0);
      v41 = (int16x8_t)vqtbl1q_s8(v39, (int8x16_t)xmmword_1850049F0);
      v42 = vminq_u16((uint16x8_t)v38, (uint16x8_t)v40);
      v43 = vminq_u16((uint16x8_t)v39, (uint16x8_t)v41);
      v44 = vmull_lane_u16(*(uint16x4_t *)v43.i8, *(uint16x4_t *)v38.i8, 3);
      v45 = vmull_high_laneq_u16(v43, (uint16x8_t)v38, 7);
      v44.i32[3] = 0;
      v46 = vabdq_u32(vmull_lane_u16(*(uint16x4_t *)v42.i8, *(uint16x4_t *)v39.i8, 3), v44);
      v45.i32[3] = 0;
      v47 = vabdq_u32(vmull_high_laneq_u16(v42, (uint16x8_t)v39, 7), v45);
      v48 = (uint16x8_t)vmvnq_s8((int8x16_t)v40);
      v49 = vmull_u16(*(uint16x4_t *)v43.i8, *(uint16x4_t *)v48.i8);
      v50 = vqaddq_u32(v47, vmull_high_u16(v43, v48));
      v51 = (uint16x8_t)vmvnq_s8((int8x16_t)v41);
      v52 = vmull_u16(*(uint16x4_t *)v42.i8, *(uint16x4_t *)v51.i8);
      v53 = vqaddq_u32(v50, vmull_high_u16(v42, v51));
      v54 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(v46, v49), v52), v28), a13);
      *(uint16x4_t *)v54.i8 = vqshrn_n_u32(vsraq_n_u32(v54, v54, 0x10uLL), 0x10uLL);
      v55 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v53, v28), a13);
      v56 = vsraq_n_u32(v55, v55, 0x10uLL);
      *(int16x4_t *)v51.i8 = vdup_lane_s16(*(int16x4_t *)v54.i8, 3);
      v51.u64[1] = (unint64_t)vdup_lane_s16((int16x4_t)vqshrn_n_u32(v56, 0x10uLL), 3);
      v15 = vbslq_s8((int8x16_t)vceqzq_s16(v41), v38, (int8x16_t)vminq_u16(vqshrn_high_n_u32(*(uint16x4_t *)v54.i8, v56, 0x10uLL), v51));
      *(int8x16_t *)&v19->i8[v35] = vrev16q_s8(vbslq_s8((int8x16_t)vceqzq_s16(v40), v39, v15));
      v20 += v26;
      v37 -= 2;
      v35 += v27;
    }
    while (v37 > 1);
    v19 = (int8x8_t *)((char *)v19 + v35);
    v17 = (int8x8_t *)((char *)v17 + v35);
    v16 = v16 - v36 + v37;
LABEL_37:
    if (v16 <= 1)
      goto LABEL_40;
  }
  v63 = 0;
  while (1)
  {
    v15.i32[0] = v30;
    v64 = (int16x8_t)vqtbl1q_s8(v15, (int8x16_t)xmmword_1850049E0);
    v65 = (uint16x8_t)vorrq_s8(v23, vrev16q_s8(*(int8x16_t *)&v17->i8[v63]));
    v66 = (int16x8_t)vorrq_s8(vbicq_s8(v25, (int8x16_t)vceqzq_s16(v64)), vrev16q_s8(*(int8x16_t *)&v19->i8[v63]));
    v67 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v65.i8, *(uint16x4_t *)v64.i8), v28), a13);
    v68 = (int16x4_t)vqshrn_n_u32(vsraq_n_u32(v67, v67, 0x10uLL), 0x10uLL);
    v69 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16(v65, (uint16x8_t)v64), v28), a13);
    v70 = vsraq_n_u32(v69, v69, 0x10uLL);
    v71 = (int16x4_t)vqshrn_n_u32(v70, 0x10uLL);
    *(int16x4_t *)v64.i8 = vdup_lane_s16(v68, 3);
    v72 = (int16x8_t)vqtbl1q_s8((int8x16_t)v66, (int8x16_t)xmmword_1850049F0);
    v73 = (int8x16_t)vminq_u16((uint16x8_t)v66, (uint16x8_t)v72);
    v74 = vmin_u16((uint16x4_t)v68, *(uint16x4_t *)v64.i8);
    v75 = vmull_lane_u16(*(uint16x4_t *)v73.i8, (uint16x4_t)v68, 3);
    v76 = (int8x16_t)vqshrn_high_n_u32((uint16x4_t)v68, v70, 0x10uLL);
    v64.i64[1] = vdupq_lane_s16(v71, 3).u64[0];
    v77 = vmin_u16((uint16x4_t)v71, (uint16x4_t)v64.u64[1]);
    v78 = (int8x16_t)vdupq_laneq_s16(v66, 7);
    v79 = (uint16x4_t)vextq_s8(v73, v73, 8uLL).u64[0];
    v80 = vmull_high_lane_u16((uint16x8_t)v73, (uint16x4_t)v71, 3);
    v75.i32[3] = 0;
    v80.i32[3] = 0;
    v81 = vqaddq_u32(vabdq_u32(vmull_lane_u16(v74, *(uint16x4_t *)v66.i8, 3), v75), vmull_u16(*(uint16x4_t *)v73.i8, (uint16x4_t)vmvn_s8(*(int8x8_t *)v64.i8)));
    v82 = vmvnq_s8((int8x16_t)v72);
    v83 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(v81, vmull_u16(v74, *(uint16x4_t *)v82.i8)), v28), a13);
    *(uint16x4_t *)v83.i8 = vqshrn_n_u32(vsraq_n_u32(v83, v83, 0x10uLL), 0x10uLL);
    v84 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vabdq_u32(vmull_u16(v77, (uint16x4_t)*(_OWORD *)&vextq_s8(v78, v78, 8uLL)), v80), vmull_u16(v79, (uint16x4_t)vmvn_s8((int8x8_t)v64.u64[1]))), vmull_u16(v77, (uint16x4_t)*(_OWORD *)&vextq_s8(v82, v82, 8uLL))), v28), a13);
    v85 = vsraq_n_u32(v84, v84, 0x10uLL);
    *(int16x4_t *)v86.i8 = vdup_lane_s16(*(int16x4_t *)v83.i8, 3);
    v86.u64[1] = (unint64_t)vdup_lane_s16((int16x4_t)vqshrn_n_u32(v85, 0x10uLL), 3);
    v15 = (int8x16_t)vceqzq_s16(v64);
    *(int8x16_t *)&v19->i8[v63] = vrev16q_s8(vbslq_s8(v15, (int8x16_t)v66, vbslq_s8((int8x16_t)vceqzq_s16(v72), v76, (int8x16_t)vminq_u16(vqshrn_high_n_u32(*(uint16x4_t *)v83.i8, v85, 0x10uLL), v86))));
    v20 += v26;
    v16 -= 2;
    if (v16 < 2)
      break;
    v30 = *(unsigned __int16 *)v20;
    v63 += v27;
    if ((unsigned __int16)(v30 - 1) >= 0xFFFEu)
    {
      v17 = (int8x8_t *)((char *)v17 + v63);
      v19 = (int8x8_t *)((char *)v19 + v63);
      goto LABEL_37;
    }
  }
  v17 = (int8x8_t *)((char *)v17 + v27 + v63);
  v19 = (int8x8_t *)((char *)v19 + v27 + v63);
LABEL_40:
  v87 = v16 + a14;
  if (v87)
  {
    if (a7)
      v88 = 0;
    else
      v88 = -1;
    v89.i32[0] = 0;
    v89.i16[2] = 0;
    v89.i16[3] = v88;
    v90.i32[0] = 0;
    v90.i16[2] = 0;
    if (a8)
      v91 = 0;
    else
      v91 = -1;
    v90.i16[3] = v91;
    v92 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v93.i64[0] = 0x800000008000;
    v93.i64[1] = 0x800000008000;
    do
    {
      if (*v20)
      {
        a13.i32[0] = *v20;
        v94 = (int16x4_t)vdup_lane_s8(*(int8x8_t *)a13.i8, 0);
        v95 = (int16x4_t)vorr_s8(vbic_s8(v90, (int8x8_t)vceqz_s16(v94)), vrev16_s8(*v19));
        v96 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(v89, vrev16_s8(*v17)), (uint16x4_t)v94), v92), v93);
        *(uint16x4_t *)v96.i8 = vqshrn_n_u32(vsraq_n_u32(v96, v96, 0x10uLL), 0x10uLL);
        v97 = vdup_lane_s16(*(int16x4_t *)v96.i8, 3);
        v98 = vdup_lane_s16(v95, 3);
        v99 = vmin_u16(*(uint16x4_t *)v96.i8, (uint16x4_t)v97);
        v100 = vmin_u16((uint16x4_t)v95, (uint16x4_t)v98);
        v101 = vmull_lane_u16(v100, *(uint16x4_t *)v96.i8, 3);
        v101.i32[3] = 0;
        v102 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vabdq_u32(vmull_lane_u16(v99, (uint16x4_t)v95, 3), v101), vmull_u16(v100, (uint16x4_t)vmvn_s8((int8x8_t)v97))), vmull_u16(v99, (uint16x4_t)vmvn_s8((int8x8_t)v98))), v92), v93);
        *(uint16x4_t *)v102.i8 = vqshrn_n_u32(vsraq_n_u32(v102, v102, 0x10uLL), 0x10uLL);
        *(int8x8_t *)a13.i8 = vrev16_s8(vbsl_s8((int8x8_t)vceqz_s16(v97), (int8x8_t)v95, vbsl_s8((int8x8_t)vceqz_s16(v98), *(int8x8_t *)v96.i8, (int8x8_t)vmin_u16(*(uint16x4_t *)v102.i8, (uint16x4_t)vdup_lane_s16(*(int16x4_t *)v102.i8, 3)))));
        *v19 = *(int8x8_t *)a13.i8;
      }
      v103 = &v17[a6];
      v20 += a6;
      if ((unint64_t)v103 >= v18)
        v104 = -(uint64_t)a5;
      else
        v104 = 0;
      v17 = &v103[v104];
      v19 += a6;
      --v87;
    }
    while (v87);
  }
  *result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)23,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, double a12, int32x4_t a13, uint64_t a14, unint64_t a15)
{
  int8x16_t v15;
  unint64_t v16;
  int8x8_t *v17;
  unint64_t v18;
  int8x8_t *v19;
  char *v20;
  unsigned int v21;
  int8x16_t v22;
  int8x16_t v23;
  unsigned int v24;
  int8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  uint32x4_t v28;
  int32x4_t v29;
  int8x16_t v30;
  __int32 v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  int8x16_t *v35;
  uint64_t v36;
  int64_t v37;
  unint64_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int16x8_t v41;
  int16x8_t v42;
  uint16x8_t v43;
  int8x16_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  int8x16_t v47;
  uint16x8_t v48;
  uint32x4_t v49;
  uint32x4_t v50;
  uint32x4_t v51;
  uint32x4_t v52;
  uint16x8_t v53;
  int8x16_t v54;
  int8x16_t *v55;
  int8x16_t *v56;
  int8x16_t *v57;
  int8x16_t *v58;
  int64_t v59;
  int64_t v60;
  uint64_t v61;
  int16x8_t v62;
  uint16x8_t v63;
  int8x16_t v64;
  int16x8_t v65;
  uint32x4_t v66;
  uint32x4_t v67;
  uint32x4_t v68;
  uint32x4_t v69;
  int16x4_t v70;
  uint16x4_t v71;
  int8x16_t v72;
  int16x8_t v73;
  int8x16_t v74;
  uint16x8_t v75;
  uint16x8_t v76;
  int8x16_t v77;
  int8x16_t v78;
  uint32x4_t v79;
  uint32x4_t v80;
  uint32x4_t v81;
  uint16x8_t v82;
  int8x16_t v83;
  int8x16_t v84;
  uint64_t v85;
  __int16 v86;
  int8x8_t v87;
  int8x8_t v88;
  __int16 v89;
  uint32x4_t v90;
  int32x4_t v91;
  int16x4_t v92;
  int16x4_t v93;
  int16x4_t v94;
  int16x4_t v95;
  int8x8_t v96;
  uint16x4_t v97;
  uint16x4_t v98;
  uint32x4_t v99;
  int8x8_t *v100;
  uint64_t v101;

  v16 = a15;
  v17 = *result;
  v18 = *a3;
  v19 = *a2;
  v20 = *a4;
  if (a15 < 2)
    goto LABEL_40;
  if (a7)
    v21 = 0;
  else
    v21 = -1;
  v22.i64[0] = 0xFFFF000000000000;
  v22.i64[1] = 0xFFFF000000000000;
  v23 = vandq_s8((int8x16_t)vdupq_n_s16(v21), v22);
  if (a8)
    v24 = 0;
  else
    v24 = -1;
  v25 = vandq_s8((int8x16_t)vdupq_n_s16(v24), v22);
  v26 = 2 * a6;
  v27 = 16 * a6;
  v28 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  a13.i64[0] = 0xFFFFFFFFFFFFLL;
  a13.i64[1] = 0xFFFFFFFFFFFFLL;
  v29.i64[0] = 0x800000008000;
  v29.i64[1] = 0x800000008000;
  v30.i64[0] = -1;
  v30.i64[1] = -1;
  while (1)
  {
    v31 = *(unsigned __int16 *)v20;
    if (!*(_WORD *)v20)
    {
      v55 = (int8x16_t *)&v20[v16];
      v56 = (int8x16_t *)v20;
      do
        v57 = v56++;
      while (v56 <= v55 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v57)) & 0x80) != 0);
      do
      {
        v58 = v57;
        v57 = (int8x16_t *)((char *)v57 + 4);
      }
      while (v57 <= v55 && !v58->i32[0]);
      if (v58 < v55)
      {
        while (!v58->i8[0])
        {
          v58 = (int8x16_t *)((char *)v58 + 1);
          if (v58 >= v55)
          {
            v58 = (int8x16_t *)&v20[v16];
            break;
          }
        }
      }
      v59 = (char *)v58 - v20;
      v60 = ((char *)v58 - v20) * a6;
      v17 += v60;
      v19 += v60;
      v20 += v60;
      v16 -= v59;
      goto LABEL_37;
    }
    if (v31 != 0xFFFF)
      break;
    v32 = (int8x16_t *)&v20[v16];
    v33 = (int8x16_t *)v20;
    do
      v34 = v33++;
    while (v33 <= v32 && (vminvq_u8((uint8x16_t)vceqq_s8(*v34, v30)) & 0x80) != 0);
    do
    {
      v35 = v34;
      v34 = (int8x16_t *)((char *)v34 + 4);
    }
    while (v34 <= v32 && v35->i32[0] == -1);
    if (v35 < v32)
    {
      while (v35->u8[0] == 255)
      {
        v35 = (int8x16_t *)((char *)v35 + 1);
        if (v35 >= v32)
        {
          v35 = (int8x16_t *)&v20[v16];
          break;
        }
      }
    }
    v36 = 0;
    v37 = (char *)v35 - v20;
    v38 = (char *)v35 - v20;
    do
    {
      v39 = vorrq_s8(v23, vrev16q_s8(*(int8x16_t *)&v17->i8[v36]));
      v40 = vorrq_s8(v25, vrev16q_s8(*(int8x16_t *)&v19->i8[v36]));
      v41 = (int16x8_t)vqtbl1q_s8(v39, (int8x16_t)xmmword_1850049F0);
      v42 = (int16x8_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_1850049F0);
      v43 = vminq_u16((uint16x8_t)v39, (uint16x8_t)v41);
      v44 = (int8x16_t)vminq_u16((uint16x8_t)v40, (uint16x8_t)v42);
      v45 = (uint16x8_t)vmvnq_s8(v44);
      v46 = (uint16x8_t)vandq_s8(v44, (int8x16_t)a13);
      v47 = (int8x16_t)vcgtq_u16(v46, v45);
      v48 = vabdq_u16(v45, v46);
      v49 = vmull_u16(*(uint16x4_t *)v43.i8, *(uint16x4_t *)v48.i8);
      v50 = vmull_high_u16(v43, v48);
      v51 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v49, v28), v29);
      v52 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v50, v28), v29);
      v53 = vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v51, v51, 0x10uLL), 0x10uLL), vsraq_n_u32(v52, v52, 0x10uLL), 0x10uLL);
      v54 = vbslq_s8(v47, (int8x16_t)vqsubq_u16((uint16x8_t)v44, v53), (int8x16_t)vqaddq_u16((uint16x8_t)v44, v53));
      v15 = (int8x16_t)vceqzq_s16(v41);
      *(int8x16_t *)&v19->i8[v36] = vrev16q_s8(vbslq_s8(v15, v40, vbslq_s8((int8x16_t)vceqzq_s16(v42), v39, (int8x16_t)vminq_u16((uint16x8_t)v54, (uint16x8_t)vqtbl1q_s8(v54, (int8x16_t)xmmword_1850049F0)))));
      v20 += v26;
      v38 -= 2;
      v36 += v27;
    }
    while (v38 > 1);
    v19 = (int8x8_t *)((char *)v19 + v36);
    v17 = (int8x8_t *)((char *)v17 + v36);
    v16 = v16 - v37 + v38;
LABEL_37:
    if (v16 <= 1)
      goto LABEL_40;
  }
  v61 = 0;
  while (1)
  {
    v15.i32[0] = v31;
    v62 = (int16x8_t)vqtbl1q_s8(v15, (int8x16_t)xmmword_1850049E0);
    v63 = (uint16x8_t)vorrq_s8(v23, vrev16q_s8(*(int8x16_t *)&v17->i8[v61]));
    v64 = vorrq_s8(vbicq_s8(v25, (int8x16_t)vceqzq_s16(v62)), vrev16q_s8(*(int8x16_t *)&v19->i8[v61]));
    v65 = (int16x8_t)vmull_u16(*(uint16x4_t *)v63.i8, *(uint16x4_t *)v62.i8);
    v66 = vmull_high_u16(v63, (uint16x8_t)v62);
    v67 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32((uint32x4_t)v65, v28), v29);
    *(uint16x4_t *)v67.i8 = vqshrn_n_u32(vsraq_n_u32(v67, v67, 0x10uLL), 0x10uLL);
    v68 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v66, v28), v29);
    v69 = vsraq_n_u32(v68, v68, 0x10uLL);
    *(int16x4_t *)v65.i8 = vdup_lane_s16(*(int16x4_t *)v67.i8, 3);
    v70 = (int16x4_t)vqshrn_n_u32(v69, 0x10uLL);
    v71 = vmin_u16(*(uint16x4_t *)v67.i8, *(uint16x4_t *)v65.i8);
    v72 = (int8x16_t)vqshrn_high_n_u32(*(uint16x4_t *)v67.i8, v69, 0x10uLL);
    v65.u64[1] = (unint64_t)vdup_lane_s16(v70, 3);
    v73 = (int16x8_t)vqtbl1q_s8(v64, (int8x16_t)xmmword_1850049F0);
    v74 = (int8x16_t)vminq_u16((uint16x8_t)v64, (uint16x8_t)v73);
    v75 = (uint16x8_t)vmvnq_s8(v74);
    v76 = (uint16x8_t)vandq_s8(v74, (int8x16_t)a13);
    v77 = (int8x16_t)vcgtq_u16(v76, v75);
    v78 = (int8x16_t)vabdq_u16(v75, v76);
    v79 = vmull_u16(vmin_u16((uint16x4_t)v70, (uint16x4_t)v65.u64[1]), (uint16x4_t)*(_OWORD *)&vextq_s8(v78, v78, 8uLL));
    v80 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(v71, *(uint16x4_t *)v78.i8), v28), v29);
    v81 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v79, v28), v29);
    v82 = vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v80, v80, 0x10uLL), 0x10uLL), vsraq_n_u32(v81, v81, 0x10uLL), 0x10uLL);
    v83 = vbslq_s8(v77, (int8x16_t)vqsubq_u16((uint16x8_t)v74, v82), (int8x16_t)vqaddq_u16((uint16x8_t)v74, v82));
    v84 = vbslq_s8((int8x16_t)vceqzq_s16(v73), v72, (int8x16_t)vminq_u16((uint16x8_t)v83, (uint16x8_t)vqtbl1q_s8(v83, (int8x16_t)xmmword_1850049F0)));
    v15 = (int8x16_t)vceqzq_s16(v65);
    *(int8x16_t *)&v19->i8[v61] = vrev16q_s8(vbslq_s8(v15, v64, v84));
    v20 += v26;
    v16 -= 2;
    if (v16 < 2)
      break;
    v31 = *(unsigned __int16 *)v20;
    v61 += v27;
    if ((unsigned __int16)(v31 - 1) >= 0xFFFEu)
    {
      v17 = (int8x8_t *)((char *)v17 + v61);
      v19 = (int8x8_t *)((char *)v19 + v61);
      goto LABEL_37;
    }
  }
  v17 = (int8x8_t *)((char *)v17 + v27 + v61);
  v19 = (int8x8_t *)((char *)v19 + v27 + v61);
LABEL_40:
  v85 = v16 + a14;
  if (v85)
  {
    if (a7)
      v86 = 0;
    else
      v86 = -1;
    v87.i32[0] = 0;
    v87.i16[2] = 0;
    v87.i16[3] = v86;
    v88.i32[0] = 0;
    v88.i16[2] = 0;
    if (a8)
      v89 = 0;
    else
      v89 = -1;
    v88.i16[3] = v89;
    v90 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v91.i64[0] = 0x800000008000;
    v91.i64[1] = 0x800000008000;
    do
    {
      if (*v20)
      {
        a13.i32[0] = *v20;
        v92 = (int16x4_t)vdup_lane_s8(*(int8x8_t *)a13.i8, 0);
        v93 = (int16x4_t)vorr_s8(vbic_s8(v88, (int8x8_t)vceqz_s16(v92)), vrev16_s8(*v19));
        a13 = vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(v87, vrev16_s8(*v17)), (uint16x4_t)v92), v90), v91);
        *(uint16x4_t *)a13.i8 = vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a13, (uint32x4_t)a13, 0x10uLL), 0x10uLL);
        v94 = vdup_lane_s16(*(int16x4_t *)a13.i8, 3);
        v95 = vdup_lane_s16(v93, 3);
        v96 = (int8x8_t)vmin_u16((uint16x4_t)v93, (uint16x4_t)v95);
        v97 = (uint16x4_t)vmvn_s8(v96);
        v98 = (uint16x4_t)v96;
        v98.i16[3] = 0;
        v99 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(vmin_u16(*(uint16x4_t *)a13.i8, (uint16x4_t)v94), vabd_u16(v97, v98)), v90), v91);
        *(uint16x4_t *)v99.i8 = vqshrn_n_u32(vsraq_n_u32(v99, v99, 0x10uLL), 0x10uLL);
        *(int8x8_t *)v99.i8 = vbsl_s8((int8x8_t)vcgt_u16(v98, v97), (int8x8_t)vqsub_u16((uint16x4_t)v96, *(uint16x4_t *)v99.i8), (int8x8_t)vqadd_u16((uint16x4_t)v96, *(uint16x4_t *)v99.i8));
        *(int8x8_t *)a13.i8 = vrev16_s8(vbsl_s8((int8x8_t)vceqz_s16(v94), (int8x8_t)v93, vbsl_s8((int8x8_t)vceqz_s16(v95), *(int8x8_t *)a13.i8, (int8x8_t)vmin_u16(*(uint16x4_t *)v99.i8, (uint16x4_t)vdup_lane_s16(*(int16x4_t *)v99.i8, 3)))));
        *v19 = *(int8x8_t *)a13.i8;
      }
      v100 = &v17[a6];
      v20 += a6;
      if ((unint64_t)v100 >= v18)
        v101 = -(uint64_t)a5;
      else
        v101 = 0;
      v17 = &v100[v101];
      v19 += a6;
      --v85;
    }
    while (v85);
  }
  *result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

uint64_t *VEC::template_mark_pixelshape_row<(CGCompositeOperation)0,_RGBA16_t>(uint64_t *result, _QWORD **a2, unint64_t *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t i;
  unint64_t v15;
  uint64_t v16;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 2)
  {
    v13 = 0;
    do
    {
      *(_OWORD *)&v12[v13] = 0uLL;
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    v12 = (_QWORD *)((char *)v12 + v13 * 8);
    v10 += v13 * 8;
  }
  for (i = v9 + a8; i; --i)
  {
    *v12 = 0;
    v15 = v10 + 8 * a5;
    if (v15 >= v11)
      v16 = -(uint64_t)a4;
    else
      v16 = 0;
    v10 = v15 + 8 * v16;
    v12 += a5;
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

_QWORD **VEC::template_mark_pixelshape_row<(CGCompositeOperation)1,_RGBA16_t>(_QWORD **result, _QWORD **a2, unint64_t *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t i;
  _QWORD *v15;
  uint64_t v16;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 2)
  {
    v13 = 0;
    do
    {
      *(_OWORD *)&v12[v13] = *(_OWORD *)&v10[v13];
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    v12 = (_QWORD *)((char *)v12 + v13 * 8);
    v10 = (_QWORD *)((char *)v10 + v13 * 8);
  }
  for (i = v9 + a8; i; --i)
  {
    *v12 = *v10;
    v15 = &v10[a5];
    if ((unint64_t)v15 >= v11)
      v16 = -(uint64_t)a4;
    else
      v16 = 0;
    v10 = &v15[v16];
    v12 += a5;
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)2,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  int8x8_t *v10;
  unint64_t v11;
  int8x8_t *v12;
  uint64_t v13;
  uint32x4_t v14;
  int32x4_t v15;
  int8x16_t v16;
  uint16x8_t v17;
  uint16x8_t v18;
  uint32x4_t v19;
  uint32x4_t v20;
  uint64_t v21;
  uint32x4_t v22;
  int32x4_t v23;
  int16x4_t v24;
  uint16x4_t v25;
  uint16x4_t v26;
  uint32x4_t v27;
  int8x8_t *v28;
  uint64_t v29;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 2)
  {
    v13 = 0;
    v14 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v15.i64[0] = 0x800000008000;
    v15.i64[1] = 0x800000008000;
    do
    {
      v16 = vrev16q_s8(*(int8x16_t *)v10[v13].i8);
      v17 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)v12[v13].i8);
      v18 = (uint16x8_t)vbicq_s8(v16, (int8x16_t)vceqzq_s16((int16x8_t)vqtbl1q_s8(v16, (int8x16_t)xmmword_1850049F0)));
      v19 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*(uint16x4_t *)v17.i8, *(uint16x4_t *)v16.i8, 3), v14), v15);
      v20 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_laneq_u16(v17, (uint16x8_t)v16, 7), v14), v15);
      *(int8x16_t *)v12[v13].i8 = vrev16q_s8((int8x16_t)vqaddq_u16(v18, vqsubq_u16(v17, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v19, v19, 0x10uLL), 0x10uLL), vsraq_n_u32(v20, v20, 0x10uLL), 0x10uLL))));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  v21 = v9 + a8;
  if (v21)
  {
    v22 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v23.i64[0] = 0x800000008000;
    v23.i64[1] = 0x800000008000;
    do
    {
      v24 = (int16x4_t)vrev16_s8(*v10);
      v25 = (uint16x4_t)vrev16_s8(*v12);
      v26 = (uint16x4_t)vbic_s8((int8x8_t)v24, (int8x8_t)vceqz_s16(vdup_lane_s16(v24, 3)));
      v27 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(v25, (uint16x4_t)v24, 3), v22), v23);
      *v12 = vrev16_s8((int8x8_t)vqadd_u16(v26, vqsub_u16(v25, vqshrn_n_u32(vsraq_n_u32(v27, v27, 0x10uLL), 0x10uLL))));
      v28 = &v10[a5];
      if ((unint64_t)v28 >= v11)
        v29 = -(uint64_t)a4;
      else
        v29 = 0;
      v10 = &v28[v29];
      v12 += a5;
      --v21;
    }
    while (v21);
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)3,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  int8x8_t *v10;
  unint64_t v11;
  int8x8_t *v12;
  uint64_t v13;
  unsigned int v14;
  int8x16_t v15;
  int8x16_t v16;
  uint32x4_t v17;
  int32x4_t v18;
  uint16x8_t v19;
  uint16x8_t v20;
  uint32x4_t v21;
  uint32x4_t v22;
  uint32x4_t v23;
  uint32x4_t v24;
  uint64_t v25;
  int8x8_t v26;
  __int16 v27;
  uint32x4_t v28;
  int32x4_t v29;
  uint32x4_t v30;
  int8x8_t *v31;
  uint64_t v32;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 2)
  {
    v13 = 0;
    if (a6)
      v14 = 0;
    else
      v14 = -1;
    v15.i64[0] = 0xFFFF000000000000;
    v15.i64[1] = 0xFFFF000000000000;
    v16 = vandq_s8((int8x16_t)vdupq_n_s16(v14), v15);
    v17 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v18.i64[0] = 0x800000008000;
    v18.i64[1] = 0x800000008000;
    do
    {
      v19 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)v12[v13].i8);
      v20 = (uint16x8_t)vorrq_s8(v16, vrev16q_s8(*(int8x16_t *)v10[v13].i8));
      v21 = vmull_lane_u16(*(uint16x4_t *)v20.i8, *(uint16x4_t *)v19.i8, 3);
      v22 = vmull_high_laneq_u16(v20, v19, 7);
      v23 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v21, v17), v18);
      v24 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v22, v17), v18);
      *(int8x16_t *)v12[v13].i8 = vrev16q_s8((int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v23, v23, 0x10uLL), 0x10uLL), vsraq_n_u32(v24, v24, 0x10uLL), 0x10uLL));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  v25 = v9 + a8;
  if (v25)
  {
    v26.i32[0] = 0;
    v26.i16[2] = 0;
    if (a6)
      v27 = 0;
    else
      v27 = -1;
    v26.i16[3] = v27;
    v28 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v29.i64[0] = 0x800000008000;
    v29.i64[1] = 0x800000008000;
    do
    {
      v30 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16((uint16x4_t)vorr_s8(v26, vrev16_s8(*v10)), (uint16x4_t)vrev16_s8(*v12), 3), v28), v29);
      *v12 = vrev16_s8((int8x8_t)vqshrn_n_u32(vsraq_n_u32(v30, v30, 0x10uLL), 0x10uLL));
      v31 = &v10[a5];
      if ((unint64_t)v31 >= v11)
        v32 = -(uint64_t)a4;
      else
        v32 = 0;
      v10 = &v31[v32];
      v12 += a5;
      --v25;
    }
    while (v25);
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)4,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  int8x8_t *v10;
  unint64_t v11;
  int8x8_t *v12;
  uint64_t v13;
  unsigned int v14;
  int8x16_t v15;
  int8x16_t v16;
  uint32x4_t v17;
  int32x4_t v18;
  uint16x8_t v19;
  uint16x8_t v20;
  uint32x4_t v21;
  uint32x4_t v22;
  uint64_t v23;
  int8x8_t v24;
  __int16 v25;
  uint32x4_t v26;
  int32x4_t v27;
  uint16x4_t v28;
  uint32x4_t v29;
  int8x8_t *v30;
  uint64_t v31;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 2)
  {
    v13 = 0;
    if (a6)
      v14 = 0;
    else
      v14 = -1;
    v15.i64[0] = 0xFFFF000000000000;
    v15.i64[1] = 0xFFFF000000000000;
    v16 = vandq_s8((int8x16_t)vdupq_n_s16(v14), v15);
    v17 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v18.i64[0] = 0x800000008000;
    v18.i64[1] = 0x800000008000;
    do
    {
      v19 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)v12[v13].i8);
      v20 = (uint16x8_t)vorrq_s8(v16, vrev16q_s8(*(int8x16_t *)v10[v13].i8));
      v21 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*(uint16x4_t *)v20.i8, *(uint16x4_t *)v19.i8, 3), v17), v18);
      v22 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_laneq_u16(v20, v19, 7), v17), v18);
      *(int8x16_t *)v12[v13].i8 = vrev16q_s8((int8x16_t)vqsubq_u16(v20, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v21, v21, 0x10uLL), 0x10uLL), vsraq_n_u32(v22, v22, 0x10uLL), 0x10uLL)));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  v23 = v9 + a8;
  if (v23)
  {
    v24.i32[0] = 0;
    v24.i16[2] = 0;
    if (a6)
      v25 = 0;
    else
      v25 = -1;
    v24.i16[3] = v25;
    v26 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v27.i64[0] = 0x800000008000;
    v27.i64[1] = 0x800000008000;
    do
    {
      v28 = (uint16x4_t)vorr_s8(v24, vrev16_s8(*v10));
      v29 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(v28, (uint16x4_t)vrev16_s8(*v12), 3), v26), v27);
      *v12 = vrev16_s8((int8x8_t)vqsub_u16(v28, vqshrn_n_u32(vsraq_n_u32(v29, v29, 0x10uLL), 0x10uLL)));
      v30 = &v10[a5];
      if ((unint64_t)v30 >= v11)
        v31 = -(uint64_t)a4;
      else
        v31 = 0;
      v10 = &v30[v31];
      v12 += a5;
      --v23;
    }
    while (v23);
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)5,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  int8x8_t *v10;
  unint64_t v11;
  int8x8_t *v12;
  uint64_t v13;
  uint32x4_t v14;
  int32x4_t v15;
  uint16x8_t v16;
  uint16x8_t v17;
  uint32x4_t v18;
  uint32x4_t v19;
  uint16x8_t v20;
  uint32x4_t v21;
  uint32x4_t v22;
  uint32x4_t v23;
  uint32x4_t v24;
  uint64_t v25;
  uint32x4_t v26;
  int32x4_t v27;
  uint16x4_t v28;
  uint16x4_t v29;
  uint32x4_t v30;
  uint32x4_t v31;
  int8x8_t *v32;
  uint64_t v33;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 2)
  {
    v13 = 0;
    v14 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v15.i64[0] = 0x800000008000;
    v15.i64[1] = 0x800000008000;
    do
    {
      v16 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)v10[v13].i8);
      v17 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)v12[v13].i8);
      v18 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*(uint16x4_t *)v17.i8, *(uint16x4_t *)v16.i8, 3), v14), v15);
      v19 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_laneq_u16(v17, v16, 7), v14), v15);
      v20 = vqsubq_u16(v17, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v18, v18, 0x10uLL), 0x10uLL), vsraq_n_u32(v19, v19, 0x10uLL), 0x10uLL));
      v21 = vmull_lane_u16(*(uint16x4_t *)v16.i8, *(uint16x4_t *)v17.i8, 3);
      v22 = vmull_high_laneq_u16(v16, v17, 7);
      v23 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v21, v14), v15);
      v24 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v22, v14), v15);
      *(int8x16_t *)v12[v13].i8 = vrev16q_s8((int8x16_t)vqaddq_u16(v20, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v23, v23, 0x10uLL), 0x10uLL), vsraq_n_u32(v24, v24, 0x10uLL), 0x10uLL)));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  v25 = v9 + a8;
  if (v25)
  {
    v26 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v27.i64[0] = 0x800000008000;
    v27.i64[1] = 0x800000008000;
    do
    {
      v28 = (uint16x4_t)vrev16_s8(*v10);
      v29 = (uint16x4_t)vrev16_s8(*v12);
      v30 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(v29, v28, 3), v26), v27);
      v31 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(v28, v29, 3), v26), v27);
      *v12 = vrev16_s8((int8x8_t)vqadd_u16(vqsub_u16(v29, vqshrn_n_u32(vsraq_n_u32(v30, v30, 0x10uLL), 0x10uLL)), vqshrn_n_u32(vsraq_n_u32(v31, v31, 0x10uLL), 0x10uLL)));
      v32 = &v10[a5];
      if ((unint64_t)v32 >= v11)
        v33 = -(uint64_t)a4;
      else
        v33 = 0;
      v10 = &v32[v33];
      v12 += a5;
      --v25;
    }
    while (v25);
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)6,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  int8x8_t *v10;
  unint64_t v11;
  int8x8_t *v12;
  uint64_t v13;
  unsigned int v14;
  int8x16_t v15;
  int8x16_t v16;
  uint32x4_t v17;
  int32x4_t v18;
  int8x16_t v19;
  uint16x8_t v20;
  int16x8_t v21;
  uint16x8_t v22;
  uint16x8_t v23;
  uint32x4_t v24;
  uint32x4_t v25;
  uint32x4_t v26;
  uint32x4_t v27;
  uint64_t v28;
  int8x8_t v29;
  __int16 v30;
  uint32x4_t v31;
  int32x4_t v32;
  int16x4_t v33;
  int16x4_t v34;
  uint32x4_t v35;
  int8x8_t *v36;
  uint64_t v37;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 2)
  {
    v13 = 0;
    if (a6)
      v14 = 0;
    else
      v14 = -1;
    v15.i64[0] = 0xFFFF000000000000;
    v15.i64[1] = 0xFFFF000000000000;
    v16 = vandq_s8((int8x16_t)vdupq_n_s16(v14), v15);
    v17 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v18.i64[0] = 0x800000008000;
    v18.i64[1] = 0x800000008000;
    do
    {
      v19 = vrev16q_s8(*(int8x16_t *)v12[v13].i8);
      v20 = (uint16x8_t)vorrq_s8(v16, vrev16q_s8(*(int8x16_t *)v10[v13].i8));
      v21 = (int16x8_t)vqtbl1q_s8(v19, (int8x16_t)xmmword_1850049F0);
      v22 = (uint16x8_t)vbicq_s8(v19, (int8x16_t)vceqzq_s16(v21));
      v23 = (uint16x8_t)vmvnq_s8((int8x16_t)v21);
      v24 = vmull_u16(*(uint16x4_t *)v20.i8, *(uint16x4_t *)v23.i8);
      v25 = vmull_high_u16(v20, v23);
      v26 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v24, v17), v18);
      v27 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v25, v17), v18);
      *(int8x16_t *)v12[v13].i8 = vrev16q_s8((int8x16_t)vqaddq_u16(v22, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v26, v26, 0x10uLL), 0x10uLL), vsraq_n_u32(v27, v27, 0x10uLL), 0x10uLL)));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  v28 = v9 + a8;
  if (v28)
  {
    v29.i32[0] = 0;
    v29.i16[2] = 0;
    if (a6)
      v30 = 0;
    else
      v30 = -1;
    v29.i16[3] = v30;
    v31 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v32.i64[0] = 0x800000008000;
    v32.i64[1] = 0x800000008000;
    do
    {
      v33 = (int16x4_t)vrev16_s8(*v12);
      v34 = vdup_lane_s16(v33, 3);
      v35 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(v29, vrev16_s8(*v10)), (uint16x4_t)vmvn_s8((int8x8_t)v34)), v31), v32);
      *v12 = vrev16_s8((int8x8_t)vqadd_u16((uint16x4_t)vbic_s8((int8x8_t)v33, (int8x8_t)vceqz_s16(v34)), vqshrn_n_u32(vsraq_n_u32(v35, v35, 0x10uLL), 0x10uLL)));
      v36 = &v10[a5];
      if ((unint64_t)v36 >= v11)
        v37 = -(uint64_t)a4;
      else
        v37 = 0;
      v10 = &v36[v37];
      v12 += a5;
      --v28;
    }
    while (v28);
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)7,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  int8x8_t *v10;
  unint64_t v11;
  int8x8_t *v12;
  uint64_t v13;
  uint32x4_t v14;
  int32x4_t v15;
  uint16x8_t v16;
  uint16x8_t v17;
  uint32x4_t v18;
  uint32x4_t v19;
  uint32x4_t v20;
  uint32x4_t v21;
  uint64_t v22;
  uint32x4_t v23;
  int32x4_t v24;
  uint32x4_t v25;
  int8x8_t *v26;
  uint64_t v27;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 2)
  {
    v13 = 0;
    v14 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v15.i64[0] = 0x800000008000;
    v15.i64[1] = 0x800000008000;
    do
    {
      v16 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)v10[v13].i8);
      v17 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)v12[v13].i8);
      v18 = vmull_lane_u16(*(uint16x4_t *)v17.i8, *(uint16x4_t *)v16.i8, 3);
      v19 = vmull_high_laneq_u16(v17, v16, 7);
      v20 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v18, v14), v15);
      v21 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v19, v14), v15);
      *(int8x16_t *)v12[v13].i8 = vrev16q_s8((int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v20, v20, 0x10uLL), 0x10uLL), vsraq_n_u32(v21, v21, 0x10uLL), 0x10uLL));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  v22 = v9 + a8;
  if (v22)
  {
    v23 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v24.i64[0] = 0x800000008000;
    v24.i64[1] = 0x800000008000;
    do
    {
      v25 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16((uint16x4_t)vrev16_s8(*v12), (uint16x4_t)vrev16_s8(*v10), 3), v23), v24);
      *v12 = vrev16_s8((int8x8_t)vqshrn_n_u32(vsraq_n_u32(v25, v25, 0x10uLL), 0x10uLL));
      v26 = &v10[a5];
      if ((unint64_t)v26 >= v11)
        v27 = -(uint64_t)a4;
      else
        v27 = 0;
      v10 = &v26[v27];
      v12 += a5;
      --v22;
    }
    while (v22);
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)8,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  int8x8_t *v10;
  unint64_t v11;
  int8x8_t *v12;
  uint64_t v13;
  uint32x4_t v14;
  int32x4_t v15;
  uint16x8_t v16;
  uint16x8_t v17;
  uint32x4_t v18;
  uint32x4_t v19;
  uint64_t v20;
  uint32x4_t v21;
  int32x4_t v22;
  uint16x4_t v23;
  uint32x4_t v24;
  int8x8_t *v25;
  uint64_t v26;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 2)
  {
    v13 = 0;
    v14 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v15.i64[0] = 0x800000008000;
    v15.i64[1] = 0x800000008000;
    do
    {
      v16 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)v10[v13].i8);
      v17 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)v12[v13].i8);
      v18 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*(uint16x4_t *)v17.i8, *(uint16x4_t *)v16.i8, 3), v14), v15);
      v19 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_laneq_u16(v17, v16, 7), v14), v15);
      *(int8x16_t *)v12[v13].i8 = vrev16q_s8((int8x16_t)vqsubq_u16(v17, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v18, v18, 0x10uLL), 0x10uLL), vsraq_n_u32(v19, v19, 0x10uLL), 0x10uLL)));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  v20 = v9 + a8;
  if (v20)
  {
    v21 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v22.i64[0] = 0x800000008000;
    v22.i64[1] = 0x800000008000;
    do
    {
      v23 = (uint16x4_t)vrev16_s8(*v12);
      v24 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(v23, (uint16x4_t)vrev16_s8(*v10), 3), v21), v22);
      *v12 = vrev16_s8((int8x8_t)vqsub_u16(v23, vqshrn_n_u32(vsraq_n_u32(v24, v24, 0x10uLL), 0x10uLL)));
      v25 = &v10[a5];
      if ((unint64_t)v25 >= v11)
        v26 = -(uint64_t)a4;
      else
        v26 = 0;
      v10 = &v25[v26];
      v12 += a5;
      --v20;
    }
    while (v20);
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)9,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  int8x8_t *v10;
  unint64_t v11;
  int8x8_t *v12;
  uint64_t v13;
  uint32x4_t v14;
  int32x4_t v15;
  uint16x8_t v16;
  uint16x8_t v17;
  uint32x4_t v18;
  uint32x4_t v19;
  uint16x8_t v20;
  uint32x4_t v21;
  uint32x4_t v22;
  uint32x4_t v23;
  uint32x4_t v24;
  uint64_t v25;
  uint32x4_t v26;
  int32x4_t v27;
  uint16x4_t v28;
  uint16x4_t v29;
  uint32x4_t v30;
  uint32x4_t v31;
  int8x8_t *v32;
  uint64_t v33;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 2)
  {
    v13 = 0;
    v14 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v15.i64[0] = 0x800000008000;
    v15.i64[1] = 0x800000008000;
    do
    {
      v16 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)v10[v13].i8);
      v17 = (uint16x8_t)vrev16q_s8(*(int8x16_t *)v12[v13].i8);
      v18 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*(uint16x4_t *)v16.i8, *(uint16x4_t *)v17.i8, 3), v14), v15);
      v19 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_laneq_u16(v16, v17, 7), v14), v15);
      v20 = vqsubq_u16(v16, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v18, v18, 0x10uLL), 0x10uLL), vsraq_n_u32(v19, v19, 0x10uLL), 0x10uLL));
      v21 = vmull_lane_u16(*(uint16x4_t *)v17.i8, *(uint16x4_t *)v16.i8, 3);
      v22 = vmull_high_laneq_u16(v17, v16, 7);
      v23 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v21, v14), v15);
      v24 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v22, v14), v15);
      *(int8x16_t *)v12[v13].i8 = vrev16q_s8((int8x16_t)vqaddq_u16(v20, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v23, v23, 0x10uLL), 0x10uLL), vsraq_n_u32(v24, v24, 0x10uLL), 0x10uLL)));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  v25 = v9 + a8;
  if (v25)
  {
    v26 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v27.i64[0] = 0x800000008000;
    v27.i64[1] = 0x800000008000;
    do
    {
      v28 = (uint16x4_t)vrev16_s8(*v10);
      v29 = (uint16x4_t)vrev16_s8(*v12);
      v30 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(v28, v29, 3), v26), v27);
      *(uint16x4_t *)v30.i8 = vqsub_u16(v28, vqshrn_n_u32(vsraq_n_u32(v30, v30, 0x10uLL), 0x10uLL));
      v31 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(v29, v28, 3), v26), v27);
      *v12 = vrev16_s8((int8x8_t)vqadd_u16(*(uint16x4_t *)v30.i8, vqshrn_n_u32(vsraq_n_u32(v31, v31, 0x10uLL), 0x10uLL)));
      v32 = &v10[a5];
      if ((unint64_t)v32 >= v11)
        v33 = -(uint64_t)a4;
      else
        v33 = 0;
      v10 = &v32[v33];
      v12 += a5;
      --v25;
    }
    while (v25);
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)10,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  int8x8_t *v10;
  unint64_t v11;
  int8x8_t *v12;
  uint64_t v13;
  uint32x4_t v14;
  int32x4_t v15;
  int8x16_t v16;
  int8x16_t v17;
  uint16x8_t v18;
  uint16x8_t v19;
  uint32x4_t v20;
  uint32x4_t v21;
  uint32x4_t v22;
  uint32x4_t v23;
  uint64_t v24;
  uint32x4_t v25;
  int32x4_t v26;
  int8x8_t v27;
  int8x8_t v28;
  uint32x4_t v29;
  int8x8_t *v30;
  uint64_t v31;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 2)
  {
    v13 = 0;
    v14 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v15.i64[0] = 0x800000008000;
    v15.i64[1] = 0x800000008000;
    do
    {
      v16 = vrev16q_s8(*(int8x16_t *)v10[v13].i8);
      v17 = vrev16q_s8(*(int8x16_t *)v12[v13].i8);
      v18 = (uint16x8_t)vmvnq_s8(v17);
      v19 = (uint16x8_t)vmvnq_s8(v16);
      v20 = vqaddq_u32(vmull_lane_u16(*(uint16x4_t *)v16.i8, *(uint16x4_t *)v18.i8, 3), vmull_lane_u16(*(uint16x4_t *)v17.i8, *(uint16x4_t *)v19.i8, 3));
      v21 = vqaddq_u32(vmull_high_laneq_u16((uint16x8_t)v16, v18, 7), vmull_high_laneq_u16((uint16x8_t)v17, v19, 7));
      v22 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v20, v14), v15);
      v23 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v21, v14), v15);
      *(int8x16_t *)v12[v13].i8 = vrev16q_s8((int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v22, v22, 0x10uLL), 0x10uLL), vsraq_n_u32(v23, v23, 0x10uLL), 0x10uLL));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  v24 = v9 + a8;
  if (v24)
  {
    v25 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v26.i64[0] = 0x800000008000;
    v26.i64[1] = 0x800000008000;
    do
    {
      v27 = vrev16_s8(*v10);
      v28 = vrev16_s8(*v12);
      v29 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vmull_lane_u16((uint16x4_t)v27, (uint16x4_t)vmvn_s8(v28), 3), vmull_lane_u16((uint16x4_t)v28, (uint16x4_t)vmvn_s8(v27), 3)), v25), v26);
      *v12 = vrev16_s8((int8x8_t)vqshrn_n_u32(vsraq_n_u32(v29, v29, 0x10uLL), 0x10uLL));
      v30 = &v10[a5];
      if ((unint64_t)v30 >= v11)
        v31 = -(uint64_t)a4;
      else
        v31 = 0;
      v10 = &v30[v31];
      v12 += a5;
      --v24;
    }
    while (v24);
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)11,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  int8x8_t *v10;
  unint64_t v11;
  int8x8_t *v12;
  uint64_t v13;
  unsigned int v14;
  int8x16_t v15;
  int8x16_t v16;
  unsigned int v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  uint16x8_t v22;
  uint16x8_t v23;
  uint64_t v24;
  int8x8_t v25;
  __int16 v26;
  int8x8_t v27;
  __int16 v28;
  int16x4_t v29;
  int16x4_t v30;
  uint16x4_t v31;
  uint16x4_t v32;
  int8x8_t *v33;
  uint64_t v34;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 2)
  {
    v13 = 0;
    if (a6)
      v14 = 0;
    else
      v14 = -1;
    v15 = (int8x16_t)vdupq_n_s16(v14);
    v16.i64[0] = 0xFFFF000000000000;
    v16.i64[1] = 0xFFFF000000000000;
    if (a7)
      v17 = 0;
    else
      v17 = -1;
    v18 = vandq_s8(v15, v16);
    v19 = vandq_s8((int8x16_t)vdupq_n_s16(v17), v16);
    do
    {
      v20 = vorrq_s8(v18, vrev16q_s8(*(int8x16_t *)v10[v13].i8));
      v21 = vorrq_s8(v19, vrev16q_s8(*(int8x16_t *)v12[v13].i8));
      v22 = (uint16x8_t)vqtbl1q_s8(v20, (int8x16_t)xmmword_1850049F0);
      v23 = (uint16x8_t)vqtbl1q_s8(v21, (int8x16_t)xmmword_1850049F0);
      *(int8x16_t *)v12[v13].i8 = vrev16q_s8((int8x16_t)vqsubq_u16(vqaddq_u16(v23, v22), vqaddq_u16(vqsubq_u16(v22, (uint16x8_t)v20), vqsubq_u16(v23, (uint16x8_t)v21))));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  v24 = v9 + a8;
  if (v24)
  {
    v25.i32[0] = 0;
    v25.i16[2] = 0;
    if (a6)
      v26 = 0;
    else
      v26 = -1;
    v27.i32[0] = 0;
    v27.i16[2] = 0;
    v27.i16[3] = v26;
    if (a7)
      v28 = 0;
    else
      v28 = -1;
    v25.i16[3] = v28;
    do
    {
      v29 = (int16x4_t)vorr_s8(v27, vrev16_s8(*v10));
      v30 = (int16x4_t)vorr_s8(v25, vrev16_s8(*v12));
      v31 = (uint16x4_t)vdup_lane_s16(v29, 3);
      v32 = (uint16x4_t)vdup_lane_s16(v30, 3);
      *v12 = vrev16_s8((int8x8_t)vqsub_u16(vqadd_u16(v32, v31), vqadd_u16(vqsub_u16(v31, (uint16x4_t)v29), vqsub_u16(v32, (uint16x4_t)v30))));
      v33 = &v10[a5];
      if ((unint64_t)v33 >= v11)
        v34 = -(uint64_t)a4;
      else
        v34 = 0;
      v10 = &v33[v34];
      v12 += a5;
      --v24;
    }
    while (v24);
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)12,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  int8x8_t *v10;
  unint64_t v11;
  int8x8_t *v12;
  uint64_t v13;
  unsigned int v14;
  int8x16_t v15;
  int8x16_t v16;
  uint64_t v17;
  int8x8_t v18;
  __int16 v19;
  int8x8_t *v20;
  uint64_t v21;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 2)
  {
    v13 = 0;
    if (a6)
      v14 = 0;
    else
      v14 = -1;
    v15.i64[0] = 0xFFFF000000000000;
    v15.i64[1] = 0xFFFF000000000000;
    v16 = vandq_s8((int8x16_t)vdupq_n_s16(v14), v15);
    do
    {
      *(int8x16_t *)v12[v13].i8 = vrev16q_s8((int8x16_t)vqaddq_u16((uint16x8_t)vrev16q_s8(*(int8x16_t *)v12[v13].i8), (uint16x8_t)vorrq_s8(v16, vrev16q_s8(*(int8x16_t *)v10[v13].i8))));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  v17 = v9 + a8;
  if (v17)
  {
    v18.i32[0] = 0;
    v18.i16[2] = 0;
    if (a6)
      v19 = 0;
    else
      v19 = -1;
    v18.i16[3] = v19;
    do
    {
      *v12 = vrev16_s8((int8x8_t)vqadd_u16((uint16x4_t)vrev16_s8(*v12), (uint16x4_t)vorr_s8(v18, vrev16_s8(*v10))));
      v20 = &v10[a5];
      if ((unint64_t)v20 >= v11)
        v21 = -(uint64_t)a4;
      else
        v21 = 0;
      v10 = &v20[v21];
      v12 += a5;
      --v17;
    }
    while (v17);
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)13,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  int8x8_t *v10;
  unint64_t v11;
  int8x8_t *v12;
  uint64_t v13;
  unsigned int v14;
  int8x16_t v15;
  int8x16_t v16;
  unsigned int v17;
  int8x16_t v18;
  uint32x4_t v19;
  int32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int8x16_t v25;
  uint16x8_t v26;
  uint32x4_t v27;
  uint32x4_t v28;
  uint16x8_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  uint32x4_t v32;
  uint32x4_t v33;
  uint32x4_t v34;
  uint32x4_t v35;
  uint64_t v36;
  __int16 v37;
  int8x8_t v38;
  int8x8_t v39;
  __int16 v40;
  uint32x4_t v41;
  int32x4_t v42;
  int16x4_t v43;
  int16x4_t v44;
  int16x4_t v45;
  int16x4_t v46;
  int8x8_t v47;
  uint16x4_t v48;
  uint32x4_t v49;
  uint32x4_t v50;
  int8x8_t *v51;
  uint64_t v52;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 2)
  {
    v13 = 0;
    if (a6)
      v14 = 0;
    else
      v14 = -1;
    v15.i64[0] = 0xFFFF000000000000;
    v15.i64[1] = 0xFFFF000000000000;
    v16 = vandq_s8((int8x16_t)vdupq_n_s16(v14), v15);
    if (a7)
      v17 = 0;
    else
      v17 = -1;
    v18 = vandq_s8((int8x16_t)vdupq_n_s16(v17), v15);
    v19 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v20.i64[0] = 0x800000008000;
    v20.i64[1] = 0x800000008000;
    do
    {
      v21 = vorrq_s8(v16, vrev16q_s8(*(int8x16_t *)v10[v13].i8));
      v22 = vorrq_s8(v18, vrev16q_s8(*(int8x16_t *)v12[v13].i8));
      v23 = (int16x8_t)vqtbl1q_s8(v21, (int8x16_t)xmmword_1850049F0);
      v24 = (int16x8_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_1850049F0);
      v25 = (int8x16_t)vceqzq_s16(v24);
      v26 = (uint16x8_t)vbicq_s8(v22, v25);
      v27 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v21.i8, *(uint16x4_t *)v26.i8), v19), v20);
      v28 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16((uint16x8_t)v21, v26), v19), v20);
      v29 = vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v27, v27, 0x10uLL), 0x10uLL), vsraq_n_u32(v28, v28, 0x10uLL), 0x10uLL);
      v30 = (uint16x8_t)vmvnq_s8((int8x16_t)v24);
      v31 = (uint16x8_t)vmvnq_s8((int8x16_t)v23);
      v32 = vqaddq_u32(vmull_u16(*(uint16x4_t *)v21.i8, *(uint16x4_t *)v30.i8), vmull_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v31.i8));
      v33 = vqaddq_u32(vmull_high_u16((uint16x8_t)v21, v30), vmull_high_u16(v26, v31));
      v34 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v32, v19), v20);
      v35 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v33, v19), v20);
      *(int8x16_t *)v12[v13].i8 = vrev16q_s8(vbslq_s8((int8x16_t)vceqzq_s16(v23), v22, vbslq_s8(v25, v21, (int8x16_t)vqaddq_u16(v29, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v34, v34, 0x10uLL), 0x10uLL), vsraq_n_u32(v35, v35, 0x10uLL), 0x10uLL)))));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  v36 = v9 + a8;
  if (v36)
  {
    if (a6)
      v37 = 0;
    else
      v37 = -1;
    v38.i32[0] = 0;
    v38.i16[2] = 0;
    v38.i16[3] = v37;
    v39.i32[0] = 0;
    v39.i16[2] = 0;
    if (a7)
      v40 = 0;
    else
      v40 = -1;
    v39.i16[3] = v40;
    v41 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v42.i64[0] = 0x800000008000;
    v42.i64[1] = 0x800000008000;
    do
    {
      v43 = (int16x4_t)vorr_s8(v38, vrev16_s8(*v10));
      v44 = (int16x4_t)vorr_s8(v39, vrev16_s8(*v12));
      v45 = vdup_lane_s16(v43, 3);
      v46 = vdup_lane_s16(v44, 3);
      v47 = (int8x8_t)vceqz_s16(v46);
      v48 = (uint16x4_t)vbic_s8((int8x8_t)v44, v47);
      v49 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)v43, v48), v41), v42);
      v50 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vmull_u16((uint16x4_t)v43, (uint16x4_t)vmvn_s8((int8x8_t)v46)), vmull_u16(v48, (uint16x4_t)vmvn_s8((int8x8_t)v45))), v41), v42);
      *v12 = vrev16_s8(vbsl_s8((int8x8_t)vceqz_s16(v45), (int8x8_t)v44, vbsl_s8(v47, (int8x8_t)v43, (int8x8_t)vqadd_u16(vqshrn_n_u32(vsraq_n_u32(v49, v49, 0x10uLL), 0x10uLL), vqshrn_n_u32(vsraq_n_u32(v50, v50, 0x10uLL), 0x10uLL)))));
      v51 = &v10[a5];
      if ((unint64_t)v51 >= v11)
        v52 = -(uint64_t)a4;
      else
        v52 = 0;
      v10 = &v51[v52];
      v12 += a5;
      --v36;
    }
    while (v36);
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)14,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  int8x8_t *v10;
  unint64_t v11;
  int8x8_t *v12;
  uint64_t v13;
  unsigned int v14;
  int8x16_t v15;
  int8x16_t v16;
  unsigned int v17;
  int8x16_t v18;
  uint32x4_t v19;
  int32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  uint16x8_t v23;
  uint32x4_t v24;
  uint32x4_t v25;
  uint64_t v26;
  __int16 v27;
  int8x8_t v28;
  int8x8_t v29;
  __int16 v30;
  uint32x4_t v31;
  int32x4_t v32;
  int16x4_t v33;
  int16x4_t v34;
  uint16x4_t v35;
  uint32x4_t v36;
  int8x8_t *v37;
  uint64_t v38;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 2)
  {
    v13 = 0;
    if (a6)
      v14 = 0;
    else
      v14 = -1;
    v15.i64[0] = 0xFFFF000000000000;
    v15.i64[1] = 0xFFFF000000000000;
    v16 = vandq_s8((int8x16_t)vdupq_n_s16(v14), v15);
    if (a7)
      v17 = 0;
    else
      v17 = -1;
    v18 = vandq_s8((int8x16_t)vdupq_n_s16(v17), v15);
    v19 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v20.i64[0] = 0x800000008000;
    v20.i64[1] = 0x800000008000;
    do
    {
      v21 = vorrq_s8(v16, vrev16q_s8(*(int8x16_t *)v10[v13].i8));
      v22 = vorrq_s8(v18, vrev16q_s8(*(int8x16_t *)v12[v13].i8));
      v23 = (uint16x8_t)vbicq_s8(v22, (int8x16_t)vceqzq_s16((int16x8_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_1850049F0)));
      v24 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v21.i8, *(uint16x4_t *)v23.i8), v19), v20);
      v25 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16((uint16x8_t)v21, v23), v19), v20);
      *(int8x16_t *)v12[v13].i8 = vrev16q_s8(vbslq_s8((int8x16_t)vceqzq_s16((int16x8_t)vqtbl1q_s8(v21, (int8x16_t)xmmword_1850049F0)), v22, (int8x16_t)vqaddq_u16(vqsubq_u16((uint16x8_t)v21, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v24, v24, 0x10uLL), 0x10uLL), vsraq_n_u32(v25, v25, 0x10uLL), 0x10uLL)), v23)));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  v26 = v9 + a8;
  if (v26)
  {
    if (a6)
      v27 = 0;
    else
      v27 = -1;
    v28.i32[0] = 0;
    v28.i16[2] = 0;
    v28.i16[3] = v27;
    v29.i32[0] = 0;
    v29.i16[2] = 0;
    if (a7)
      v30 = 0;
    else
      v30 = -1;
    v29.i16[3] = v30;
    v31 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v32.i64[0] = 0x800000008000;
    v32.i64[1] = 0x800000008000;
    do
    {
      v33 = (int16x4_t)vorr_s8(v28, vrev16_s8(*v10));
      v34 = (int16x4_t)vorr_s8(v29, vrev16_s8(*v12));
      v35 = (uint16x4_t)vbic_s8((int8x8_t)v34, (int8x8_t)vdup_lane_s16(vceqz_s16(v34), 3));
      v36 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)v33, v35), v31), v32);
      *v12 = vrev16_s8(vbsl_s8((int8x8_t)vdup_lane_s16(vceqz_s16(v33), 3), (int8x8_t)v34, (int8x8_t)vqadd_u16(vqsub_u16((uint16x4_t)v33, vqshrn_n_u32(vsraq_n_u32(v36, v36, 0x10uLL), 0x10uLL)), v35)));
      v37 = &v10[a5];
      if ((unint64_t)v37 >= v11)
        v38 = -(uint64_t)a4;
      else
        v38 = 0;
      v10 = &v37[v38];
      v12 += a5;
      --v26;
    }
    while (v26);
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)15,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  int8x8_t *v10;
  unint64_t v11;
  int8x8_t *v12;
  uint64_t v13;
  unsigned int v14;
  int8x16_t v15;
  int8x16_t v16;
  unsigned int v17;
  int8x16_t v18;
  uint32x4_t v19;
  int32x4_t v20;
  int16x8_t v21;
  int8x16_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  int16x8_t v29;
  int8x16_t v30;
  int8x16_t v31;
  uint32x4_t v32;
  uint32x4_t v33;
  uint64_t v34;
  __int16 v35;
  int8x8_t v36;
  __int16 v37;
  int8x8_t v38;
  uint32x4_t v39;
  int32x4_t v40;
  int16x4_t v41;
  int16x4_t v42;
  int16x4_t v43;
  int16x4_t v44;
  int16x4_t v45;
  int16x4_t v46;
  int8x16_t v47;
  uint32x4_t v48;
  int8x8_t *v49;
  uint64_t v50;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 2)
  {
    v13 = 0;
    if (a6)
      v14 = 0;
    else
      v14 = -1;
    v15.i64[0] = 0xFFFF000000000000;
    v15.i64[1] = 0xFFFF000000000000;
    v16 = vandq_s8((int8x16_t)vdupq_n_s16(v14), v15);
    if (a7)
      v17 = 0;
    else
      v17 = -1;
    v18 = vandq_s8((int8x16_t)vdupq_n_s16(v17), v15);
    v19 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v20.i64[0] = 0x800000008000;
    v20.i64[1] = 0x800000008000;
    do
    {
      v21 = (int16x8_t)vorrq_s8(v16, vrev16q_s8(*(int8x16_t *)v10[v13].i8));
      v22 = vorrq_s8(v18, vrev16q_s8(*(int8x16_t *)v12[v13].i8));
      v23 = (int16x8_t)vqtbl1q_s8((int8x16_t)v21, (int8x16_t)xmmword_1850049F0);
      v24 = (int16x8_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_1850049F0);
      v25 = (int16x8_t)vminq_u16((uint16x8_t)v21, (uint16x8_t)v23);
      v26 = (int16x8_t)vminq_u16((uint16x8_t)v22, (uint16x8_t)v24);
      v27 = (uint16x8_t)vsubq_s16(v23, v25);
      v28 = (uint16x8_t)vsubq_s16(v24, v26);
      v29 = (int16x8_t)vcgtq_u16(vrhaddq_u16((uint16x8_t)v24, (uint16x8_t)0), (uint16x8_t)v26);
      v30 = (int8x16_t)vqaddq_u32(vmull_u16(*(uint16x4_t *)v27.i8, *(uint16x4_t *)v26.i8), vmull_u16(*(uint16x4_t *)v28.i8, *(uint16x4_t *)v25.i8));
      v31 = (int8x16_t)vqaddq_u32(vmull_high_u16(v27, (uint16x8_t)v26), vmull_high_u16(v28, (uint16x8_t)v25));
      v32 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32((uint32x4_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v29.i8), v30, (int8x16_t)vqsubq_u32(vmull_lane_u16((uint16x4_t)vdup_lane_s16(*(int16x4_t *)v21.i8, 3), *(uint16x4_t *)v22.i8, 3), (uint32x4_t)v30)), v19), v20);
      v33 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32((uint32x4_t)vbslq_s8((int8x16_t)vmovl_high_s16(v29), v31, (int8x16_t)vqsubq_u32(vmull_laneq_u16((uint16x4_t)vdup_laneq_s16(v21, 7), (uint16x8_t)v22, 7), (uint32x4_t)v31)), v19), v20);
      *(int8x16_t *)v12[v13].i8 = vrev16q_s8(vbslq_s8((int8x16_t)vceqzq_s16(v23), v22, vbslq_s8((int8x16_t)vceqzq_s16(v24), (int8x16_t)v21, (int8x16_t)vsubq_s16(vaddq_s16(v26, v25), (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v32, v32, 0x10uLL), 0x10uLL), vsraq_n_u32(v33, v33, 0x10uLL), 0x10uLL)))));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  v34 = v9 + a8;
  if (v34)
  {
    if (a6)
      v35 = 0;
    else
      v35 = -1;
    v36.i32[0] = 0;
    v36.i16[2] = 0;
    v36.i16[3] = v35;
    if (a7)
      v37 = 0;
    else
      v37 = -1;
    v38.i32[0] = 0;
    v38.i16[2] = 0;
    v38.i16[3] = v37;
    v39 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v40.i64[0] = 0x800000008000;
    v40.i64[1] = 0x800000008000;
    do
    {
      v41 = (int16x4_t)vorr_s8(v36, vrev16_s8(*v10));
      v42 = (int16x4_t)vorr_s8(v38, vrev16_s8(*v12));
      v43 = vdup_lane_s16(v41, 3);
      v44 = vdup_lane_s16(v42, 3);
      v45 = (int16x4_t)vmin_u16((uint16x4_t)v41, (uint16x4_t)v43);
      v46 = (int16x4_t)vmin_u16((uint16x4_t)v42, (uint16x4_t)v44);
      v47 = (int8x16_t)vqaddq_u32(vmull_u16((uint16x4_t)vsub_s16(v43, v45), (uint16x4_t)v46), vmull_u16((uint16x4_t)vsub_s16(v44, v46), (uint16x4_t)v45));
      v48 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32((uint32x4_t)vbslq_s8((int8x16_t)vmovl_s16((int16x4_t)vcgt_u16(vrhadd_u16((uint16x4_t)v44, 0), (uint16x4_t)v46)), v47, (int8x16_t)vqsubq_u32(vmull_lane_u16((uint16x4_t)v43, (uint16x4_t)v42, 3), (uint32x4_t)v47)), v39), v40);
      *v12 = vrev16_s8(vbsl_s8((int8x8_t)vceqz_s16(v43), (int8x8_t)v42, vbsl_s8((int8x8_t)vceqz_s16(v44), (int8x8_t)v41, (int8x8_t)vsub_s16(vadd_s16(v46, v45), (int16x4_t)vqshrn_n_u32(vsraq_n_u32(v48, v48, 0x10uLL), 0x10uLL)))));
      v49 = &v10[a5];
      if ((unint64_t)v49 >= v11)
        v50 = -(uint64_t)a4;
      else
        v50 = 0;
      v10 = &v49[v50];
      v12 += a5;
      --v34;
    }
    while (v34);
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)16,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  int8x8_t *v10;
  unint64_t v11;
  int8x8_t *v12;
  uint64_t v13;
  unsigned int v14;
  int8x16_t v15;
  int8x16_t v16;
  unsigned int v17;
  int8x16_t v18;
  uint32x4_t v19;
  int32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int16x8_t v23;
  int16x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint32x4_t v27;
  uint16x8_t v28;
  uint32x4_t v29;
  uint16x8_t v30;
  uint32x4_t v31;
  uint32x4_t v32;
  uint32x4_t v33;
  uint64_t v34;
  __int16 v35;
  int8x8_t v36;
  int8x8_t v37;
  __int16 v38;
  uint32x4_t v39;
  int32x4_t v40;
  int16x4_t v41;
  int16x4_t v42;
  int16x4_t v43;
  int16x4_t v44;
  uint16x4_t v45;
  uint16x4_t v46;
  uint32x4_t v47;
  int8x8_t *v48;
  uint64_t v49;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 2)
  {
    v13 = 0;
    if (a6)
      v14 = 0;
    else
      v14 = -1;
    v15.i64[0] = 0xFFFF000000000000;
    v15.i64[1] = 0xFFFF000000000000;
    v16 = vandq_s8((int8x16_t)vdupq_n_s16(v14), v15);
    if (a7)
      v17 = 0;
    else
      v17 = -1;
    v18 = vandq_s8((int8x16_t)vdupq_n_s16(v17), v15);
    v19 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v20.i64[0] = 0x800000008000;
    v20.i64[1] = 0x800000008000;
    do
    {
      v21 = vorrq_s8(v16, vrev16q_s8(*(int8x16_t *)v10[v13].i8));
      v22 = vorrq_s8(v18, vrev16q_s8(*(int8x16_t *)v12[v13].i8));
      v23 = (int16x8_t)vqtbl1q_s8(v21, (int8x16_t)xmmword_1850049F0);
      v24 = (int16x8_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_1850049F0);
      v25 = vminq_u16((uint16x8_t)v21, (uint16x8_t)v23);
      v26 = vminq_u16((uint16x8_t)v22, (uint16x8_t)v24);
      v27 = vmull_lane_u16(*(uint16x4_t *)v25.i8, *(uint16x4_t *)v22.i8, 3);
      v28 = (uint16x8_t)vmvnq_s8((int8x16_t)v24);
      v29 = vmull_u16(*(uint16x4_t *)v25.i8, *(uint16x4_t *)v28.i8);
      v30 = (uint16x8_t)vmvnq_s8((int8x16_t)v23);
      v31 = vqaddq_u32(vqaddq_u32(vminq_u32(vmull_high_laneq_u16(v26, (uint16x8_t)v21, 7), vmull_high_laneq_u16(v25, (uint16x8_t)v22, 7)), vmull_high_u16(v25, v28)), vmull_high_u16(v26, v30));
      v32 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vminq_u32(vmull_lane_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v21.i8, 3), v27), v29), vmull_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v30.i8)), v19), v20);
      v33 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v31, v19), v20);
      *(int8x16_t *)v12[v13].i8 = vrev16q_s8(vbslq_s8((int8x16_t)vceqzq_s16(v23), v22, vbslq_s8((int8x16_t)vceqzq_s16(v24), v21, (int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v32, v32, 0x10uLL), 0x10uLL), vsraq_n_u32(v33, v33, 0x10uLL), 0x10uLL))));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  v34 = v9 + a8;
  if (v34)
  {
    if (a6)
      v35 = 0;
    else
      v35 = -1;
    v36.i32[0] = 0;
    v36.i16[2] = 0;
    v36.i16[3] = v35;
    v37.i32[0] = 0;
    v37.i16[2] = 0;
    if (a7)
      v38 = 0;
    else
      v38 = -1;
    v37.i16[3] = v38;
    v39 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v40.i64[0] = 0x800000008000;
    v40.i64[1] = 0x800000008000;
    do
    {
      v41 = (int16x4_t)vorr_s8(v36, vrev16_s8(*v10));
      v42 = vdup_lane_s16(v41, 3);
      v43 = (int16x4_t)vorr_s8(v37, vrev16_s8(*v12));
      v44 = vdup_lane_s16(v43, 3);
      v45 = vmin_u16((uint16x4_t)v41, (uint16x4_t)v42);
      v46 = vmin_u16((uint16x4_t)v43, (uint16x4_t)v44);
      v47 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vminq_u32(vmull_lane_u16(v45, (uint16x4_t)v43, 3), vmull_lane_u16(v46, (uint16x4_t)v41, 3)), vmull_u16(v45, (uint16x4_t)vmvn_s8((int8x8_t)v44))), vmull_u16(v46, (uint16x4_t)vmvn_s8((int8x8_t)v42))), v39), v40);
      *v12 = vrev16_s8(vbsl_s8((int8x8_t)vceqz_s16(v42), (int8x8_t)v43, vbsl_s8((int8x8_t)vceqz_s16(v44), (int8x8_t)v41, (int8x8_t)vqshrn_n_u32(vsraq_n_u32(v47, v47, 0x10uLL), 0x10uLL))));
      v48 = &v10[a5];
      if ((unint64_t)v48 >= v11)
        v49 = -(uint64_t)a4;
      else
        v49 = 0;
      v10 = &v48[v49];
      v12 += a5;
      --v34;
    }
    while (v34);
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)17,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  int8x8_t *v10;
  unint64_t v11;
  int8x8_t *v12;
  uint64_t v13;
  unsigned int v14;
  int8x16_t v15;
  int8x16_t v16;
  unsigned int v17;
  int8x16_t v18;
  uint32x4_t v19;
  int32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int16x8_t v23;
  int16x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint32x4_t v27;
  uint16x8_t v28;
  uint32x4_t v29;
  uint16x8_t v30;
  uint32x4_t v31;
  uint32x4_t v32;
  uint32x4_t v33;
  uint64_t v34;
  __int16 v35;
  int8x8_t v36;
  int8x8_t v37;
  __int16 v38;
  uint32x4_t v39;
  int32x4_t v40;
  int16x4_t v41;
  int16x4_t v42;
  int16x4_t v43;
  int16x4_t v44;
  uint16x4_t v45;
  uint16x4_t v46;
  uint32x4_t v47;
  int8x8_t *v48;
  uint64_t v49;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 2)
  {
    v13 = 0;
    if (a6)
      v14 = 0;
    else
      v14 = -1;
    v15.i64[0] = 0xFFFF000000000000;
    v15.i64[1] = 0xFFFF000000000000;
    v16 = vandq_s8((int8x16_t)vdupq_n_s16(v14), v15);
    if (a7)
      v17 = 0;
    else
      v17 = -1;
    v18 = vandq_s8((int8x16_t)vdupq_n_s16(v17), v15);
    v19 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v20.i64[0] = 0x800000008000;
    v20.i64[1] = 0x800000008000;
    do
    {
      v21 = vorrq_s8(v16, vrev16q_s8(*(int8x16_t *)v10[v13].i8));
      v22 = vorrq_s8(v18, vrev16q_s8(*(int8x16_t *)v12[v13].i8));
      v23 = (int16x8_t)vqtbl1q_s8(v21, (int8x16_t)xmmword_1850049F0);
      v24 = (int16x8_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_1850049F0);
      v25 = vminq_u16((uint16x8_t)v21, (uint16x8_t)v23);
      v26 = vminq_u16((uint16x8_t)v22, (uint16x8_t)v24);
      v27 = vmull_lane_u16(*(uint16x4_t *)v25.i8, *(uint16x4_t *)v22.i8, 3);
      v28 = (uint16x8_t)vmvnq_s8((int8x16_t)v24);
      v29 = vmull_u16(*(uint16x4_t *)v25.i8, *(uint16x4_t *)v28.i8);
      v30 = (uint16x8_t)vmvnq_s8((int8x16_t)v23);
      v31 = vqaddq_u32(vqaddq_u32(vmaxq_u32(vmull_high_laneq_u16(v25, (uint16x8_t)v22, 7), vmull_high_laneq_u16(v26, (uint16x8_t)v21, 7)), vmull_high_u16(v25, v28)), vmull_high_u16(v26, v30));
      v32 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vmaxq_u32(v27, vmull_lane_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v21.i8, 3)), v29), vmull_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v30.i8)), v19), v20);
      v33 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v31, v19), v20);
      *(int8x16_t *)v12[v13].i8 = vrev16q_s8(vbslq_s8((int8x16_t)vceqzq_s16(v23), v22, vbslq_s8((int8x16_t)vceqzq_s16(v24), v21, (int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v32, v32, 0x10uLL), 0x10uLL), vsraq_n_u32(v33, v33, 0x10uLL), 0x10uLL))));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  v34 = v9 + a8;
  if (v34)
  {
    if (a6)
      v35 = 0;
    else
      v35 = -1;
    v36.i32[0] = 0;
    v36.i16[2] = 0;
    v36.i16[3] = v35;
    v37.i32[0] = 0;
    v37.i16[2] = 0;
    if (a7)
      v38 = 0;
    else
      v38 = -1;
    v37.i16[3] = v38;
    v39 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v40.i64[0] = 0x800000008000;
    v40.i64[1] = 0x800000008000;
    do
    {
      v41 = (int16x4_t)vorr_s8(v36, vrev16_s8(*v10));
      v42 = vdup_lane_s16(v41, 3);
      v43 = (int16x4_t)vorr_s8(v37, vrev16_s8(*v12));
      v44 = vdup_lane_s16(v43, 3);
      v45 = vmin_u16((uint16x4_t)v41, (uint16x4_t)v42);
      v46 = vmin_u16((uint16x4_t)v43, (uint16x4_t)v44);
      v47 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vmaxq_u32(vmull_lane_u16(v45, (uint16x4_t)v43, 3), vmull_lane_u16(v46, (uint16x4_t)v41, 3)), vmull_u16(v45, (uint16x4_t)vmvn_s8((int8x8_t)v44))), vmull_u16(v46, (uint16x4_t)vmvn_s8((int8x8_t)v42))), v39), v40);
      *v12 = vrev16_s8(vbsl_s8((int8x8_t)vceqz_s16(v42), (int8x8_t)v43, vbsl_s8((int8x8_t)vceqz_s16(v44), (int8x8_t)v41, (int8x8_t)vqshrn_n_u32(vsraq_n_u32(v47, v47, 0x10uLL), 0x10uLL))));
      v48 = &v10[a5];
      if ((unint64_t)v48 >= v11)
        v49 = -(uint64_t)a4;
      else
        v49 = 0;
      v10 = &v48[v49];
      v12 += a5;
      --v34;
    }
    while (v34);
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)18,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  int8x8_t *v10;
  unint64_t v11;
  int8x8_t *v12;
  uint64_t v13;
  unsigned int v14;
  int8x16_t v15;
  int8x16_t v16;
  unsigned int v17;
  int8x16_t v18;
  uint32x4_t v19;
  int8x16_t v20;
  int32x4_t v21;
  int16x8_t v22;
  int8x16_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int8x16_t v26;
  int16x8_t v27;
  uint16x8_t v28;
  int16x8_t v29;
  int8x16_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  uint32x4_t v33;
  uint32x4_t v34;
  uint16x8_t v35;
  uint32x4_t v36;
  uint32x4_t v37;
  uint32x4_t v38;
  uint32x4_t v39;
  uint32x4_t v40;
  uint64_t v41;
  __int16 v42;
  int8x8_t v43;
  int8x8_t v44;
  __int16 v45;
  uint32x4_t v46;
  int32x4_t v47;
  int16x4_t v48;
  int16x4_t v49;
  int16x4_t v50;
  int16x4_t v51;
  uint16x4_t v52;
  int16x4_t v53;
  uint32x4_t v54;
  uint32x4_t v55;
  int8x8_t *v56;
  uint64_t v57;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 2)
  {
    v13 = 0;
    if (a6)
      v14 = 0;
    else
      v14 = -1;
    v15.i64[0] = 0xFFFF000000000000;
    v15.i64[1] = 0xFFFF000000000000;
    v16 = vandq_s8((int8x16_t)vdupq_n_s16(v14), v15);
    if (a7)
      v17 = 0;
    else
      v17 = -1;
    v18 = vandq_s8((int8x16_t)vdupq_n_s16(v17), v15);
    v19 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v20.i64[0] = 0xFFFFFFFFFFFFLL;
    v20.i64[1] = 0xFFFFFFFFFFFFLL;
    v21.i64[0] = 0x800000008000;
    v21.i64[1] = 0x800000008000;
    do
    {
      v22 = (int16x8_t)vorrq_s8(v16, vrev16q_s8(*(int8x16_t *)v10[v13].i8));
      v23 = vorrq_s8(v18, vrev16q_s8(*(int8x16_t *)v12[v13].i8));
      v24 = (int16x8_t)vqtbl1q_s8((int8x16_t)v22, (int8x16_t)xmmword_1850049F0);
      v25 = (int16x8_t)vqtbl1q_s8(v23, (int8x16_t)xmmword_1850049F0);
      v26 = (int8x16_t)vminq_u16((uint16x8_t)v22, (uint16x8_t)v24);
      v27 = (int16x8_t)vminq_u16((uint16x8_t)v23, (uint16x8_t)v25);
      v28 = (uint16x8_t)vandq_s8(v26, v20);
      v29 = (int16x8_t)vbicq_s8((int8x16_t)vtstq_s16(v27, v27), (int8x16_t)vcgtq_u16((uint16x8_t)v24, v28));
      v30 = (int8x16_t)vmovl_high_s16(v29);
      v31 = (uint16x8_t)vorrq_s8((int8x16_t)vqsubq_u16((uint16x8_t)v24, v28), (int8x16_t)vceqzq_s16(v27));
      v32 = (uint16x8_t)vmvnq_s8((int8x16_t)v24);
      v33 = vqaddq_u32((uint32x4_t)vorrq_s8((int8x16_t)vcvtnq_u32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v27.i8)), vcvtq_f32_u32(vmull_lane_u16((uint16x4_t)vdup_lane_s16(*(int16x4_t *)v22.i8, 3), *(uint16x4_t *)v22.i8, 3))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v31.i8)))), (int8x16_t)vmovl_s16(*(int16x4_t *)v29.i8)), vmull_u16(*(uint16x4_t *)v27.i8, *(uint16x4_t *)v32.i8));
      v34 = vqaddq_u32((uint32x4_t)vorrq_s8((int8x16_t)vcvtnq_u32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_high_u16((uint16x8_t)v27)), vcvtq_f32_u32(vmull_laneq_u16((uint16x4_t)vdup_laneq_s16(v22, 7), (uint16x8_t)v22, 7))), vcvtq_f32_u32(vmovl_high_u16(v31)))), v30), vmull_high_u16((uint16x8_t)v27, v32));
      v35 = (uint16x8_t)vmvnq_s8((int8x16_t)v25);
      v36 = vmull_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v35.i8);
      v37 = vqaddq_u32(v34, vmull_high_u16((uint16x8_t)v26, v35));
      v38 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(v33, v36), v19), v21);
      *(uint16x4_t *)v38.i8 = vqshrn_n_u32(vsraq_n_u32(v38, v38, 0x10uLL), 0x10uLL);
      v39 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v37, v19), v21);
      v40 = vsraq_n_u32(v39, v39, 0x10uLL);
      *(int16x4_t *)v35.i8 = vdup_lane_s16(*(int16x4_t *)v38.i8, 3);
      v35.u64[1] = (unint64_t)vdup_lane_s16((int16x4_t)vqshrn_n_u32(v40, 0x10uLL), 3);
      *(int8x16_t *)v12[v13].i8 = vrev16q_s8(vbslq_s8((int8x16_t)vceqzq_s16(v24), v23, vbslq_s8((int8x16_t)vceqzq_s16(v25), (int8x16_t)v22, (int8x16_t)vminq_u16(vqshrn_high_n_u32(*(uint16x4_t *)v38.i8, v40, 0x10uLL), v35))));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  v41 = v9 + a8;
  if (v41)
  {
    if (a6)
      v42 = 0;
    else
      v42 = -1;
    v43.i32[0] = 0;
    v43.i16[2] = 0;
    v43.i16[3] = v42;
    v44.i32[0] = 0;
    v44.i16[2] = 0;
    if (a7)
      v45 = 0;
    else
      v45 = -1;
    v44.i16[3] = v45;
    v46 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v47.i64[0] = 0x800000008000;
    v47.i64[1] = 0x800000008000;
    do
    {
      v48 = (int16x4_t)vorr_s8(v43, vrev16_s8(*v10));
      v49 = (int16x4_t)vorr_s8(v44, vrev16_s8(*v12));
      v50 = vdup_lane_s16(v48, 3);
      v51 = vdup_lane_s16(v49, 3);
      v52 = vmin_u16((uint16x4_t)v48, (uint16x4_t)v50);
      v53 = (int16x4_t)vmin_u16((uint16x4_t)v49, (uint16x4_t)v51);
      v54 = vmull_u16(v52, (uint16x4_t)vmvn_s8((int8x8_t)v51));
      v52.i16[3] = 0;
      v55 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32((uint32x4_t)vorrq_s8((int8x16_t)vcvtnq_u32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)v53)), vcvtq_f32_u32(vmull_lane_u16((uint16x4_t)v50, (uint16x4_t)v48, 3))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)vorr_s8((int8x8_t)vqsub_u16((uint16x4_t)v50, v52), (int8x8_t)vceqz_s16(v53)))))), (int8x16_t)vmovl_s16((int16x4_t)vbic_s8((int8x8_t)vtst_s16(v53, v53), (int8x8_t)vcgt_u16((uint16x4_t)v50, v52)))), vmull_u16((uint16x4_t)v53, (uint16x4_t)vmvn_s8((int8x8_t)v50))), v54),
                                       v46),
                          v47);
      *(uint16x4_t *)v55.i8 = vqshrn_n_u32(vsraq_n_u32(v55, v55, 0x10uLL), 0x10uLL);
      *v12 = vrev16_s8(vbsl_s8((int8x8_t)vceqz_s16(v50), (int8x8_t)v49, vbsl_s8((int8x8_t)vceqz_s16(v51), (int8x8_t)v48, (int8x8_t)vmin_u16(*(uint16x4_t *)v55.i8, (uint16x4_t)vdup_lane_s16(*(int16x4_t *)v55.i8, 3)))));
      v56 = &v10[a5];
      if ((unint64_t)v56 >= v11)
        v57 = -(uint64_t)a4;
      else
        v57 = 0;
      v10 = &v56[v57];
      v12 += a5;
      --v41;
    }
    while (v41);
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)19,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  int8x8_t *v10;
  unint64_t v11;
  int8x8_t *v12;
  uint64_t v13;
  unsigned int v14;
  int8x16_t v15;
  int8x16_t v16;
  unsigned int v17;
  int8x16_t v18;
  float32x4_t v19;
  int16x8_t v20;
  int8x16_t v21;
  int16x8_t v22;
  int16x8_t v23;
  uint16x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  float32x4_t v27;
  float32x4_t v28;
  uint16x4_t v29;
  uint16x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  uint16x8_t v33;
  uint32x4_t v34;
  uint32x4_t v35;
  uint16x8_t v36;
  uint32x4_t v37;
  float32x4_t v38;
  int32x4_t v39;
  uint64_t v40;
  int8x8_t v41;
  __int16 v42;
  int8x8_t v43;
  __int16 v44;
  float32x4_t v45;
  int16x4_t v46;
  int16x4_t v47;
  int16x4_t v48;
  int16x4_t v49;
  uint16x4_t v50;
  uint16x4_t v51;
  float32x4_t v52;
  int16x4_t v53;
  int8x8_t *v54;
  uint64_t v55;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 2)
  {
    v13 = 0;
    if (a6)
      v14 = 0;
    else
      v14 = -1;
    v15.i64[0] = 0xFFFF000000000000;
    v15.i64[1] = 0xFFFF000000000000;
    v16 = vandq_s8((int8x16_t)vdupq_n_s16(v14), v15);
    if (a7)
      v17 = 0;
    else
      v17 = -1;
    v18 = vandq_s8((int8x16_t)vdupq_n_s16(v17), v15);
    v19 = (float32x4_t)vdupq_n_s32(0x37800080u);
    do
    {
      v20 = (int16x8_t)vorrq_s8(v16, vrev16q_s8(*(int8x16_t *)v10[v13].i8));
      v21 = vorrq_s8(v18, vrev16q_s8(*(int8x16_t *)v12[v13].i8));
      v22 = (int16x8_t)vqtbl1q_s8((int8x16_t)v20, (int8x16_t)xmmword_1850049F0);
      v23 = (int16x8_t)vqtbl1q_s8(v21, (int8x16_t)xmmword_1850049F0);
      v24 = vminq_u16((uint16x8_t)v20, (uint16x8_t)v22);
      v25 = vminq_u16((uint16x8_t)v21, (uint16x8_t)v23);
      v26 = vqsubq_u16((uint16x8_t)v23, v25);
      v27 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v26.i8));
      v28 = vcvtq_f32_u32(vmovl_high_u16(v26));
      v29 = (uint16x4_t)vdup_lane_s16(*(int16x4_t *)v20.i8, 3);
      v30 = (uint16x4_t)vdup_laneq_s16(v20, 7);
      v31 = vcvtq_f32_u32(vmovl_high_u16(v24));
      v32 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v24.i8));
      v33 = (uint16x8_t)vmvnq_s8((int8x16_t)v22);
      v34 = vmull_u16(*(uint16x4_t *)v25.i8, *(uint16x4_t *)v33.i8);
      v35 = vmull_high_u16(v25, v33);
      v36 = (uint16x8_t)vmvnq_s8((int8x16_t)v23);
      v37 = vmull_u16(*(uint16x4_t *)v24.i8, *(uint16x4_t *)v36.i8);
      v38 = vaddq_f32(vcvtq_f32_u32(v35), vcvtq_f32_u32(vmull_high_u16(v24, v36)));
      *(int16x4_t *)v35.i8 = vqmovun_s32(vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(v34), vcvtq_f32_u32(v37)), vcvtq_f32_u32(vmull_lane_u16(v29, *(uint16x4_t *)v21.i8, 3))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v27, vcvtq_f32_u32(vmull_lane_u16(v29, *(uint16x4_t *)v20.i8, 3))), v32), (int8x16_t)vceqzq_f32(v27))), v19)));
      v39 = vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(v38, vcvtq_f32_u32(vmull_laneq_u16(v30, (uint16x8_t)v21, 7))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v28, vcvtq_f32_u32(vmull_laneq_u16(v30, (uint16x8_t)v20, 7))), v31), (int8x16_t)vceqzq_f32(v28))), v19));
      *(int16x4_t *)v28.f32 = vdup_lane_s16(*(int16x4_t *)v35.i8, 3);
      *(int16x4_t *)&v28.u32[2] = vdup_lane_s16(vqmovun_s32(v39), 3);
      *(int8x16_t *)v12[v13].i8 = vrev16q_s8(vbslq_s8((int8x16_t)vceqzq_s16(v22), v21, vbslq_s8((int8x16_t)vceqzq_s16(v23), (int8x16_t)v20, (int8x16_t)vminq_u16((uint16x8_t)vqmovun_high_s32(*(int16x4_t *)v35.i8, v39), (uint16x8_t)v28))));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  v40 = v9 + a8;
  if (v40)
  {
    v41.i32[0] = 0;
    v41.i16[2] = 0;
    if (a6)
      v42 = 0;
    else
      v42 = -1;
    v43.i32[0] = 0;
    v43.i16[2] = 0;
    v43.i16[3] = v42;
    if (a7)
      v44 = 0;
    else
      v44 = -1;
    v41.i16[3] = v44;
    v45 = (float32x4_t)vdupq_n_s32(0x37800080u);
    do
    {
      v46 = (int16x4_t)vorr_s8(v43, vrev16_s8(*v10));
      v47 = (int16x4_t)vorr_s8(v41, vrev16_s8(*v12));
      v48 = vdup_lane_s16(v46, 3);
      v49 = vdup_lane_s16(v47, 3);
      v50 = vmin_u16((uint16x4_t)v46, (uint16x4_t)v48);
      v51 = vmin_u16((uint16x4_t)v47, (uint16x4_t)v49);
      v52 = vcvtq_f32_u32(vmovl_u16(vqsub_u16((uint16x4_t)v49, v51)));
      v53 = vqmovun_s32(vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(vmull_u16(v51, (uint16x4_t)vmvn_s8((int8x8_t)v48))), vcvtq_f32_u32(vmull_u16(v50, (uint16x4_t)vmvn_s8((int8x8_t)v49)))), vcvtq_f32_u32(vmull_lane_u16((uint16x4_t)v48, (uint16x4_t)v47, 3))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v52, vcvtq_f32_u32(vmull_lane_u16((uint16x4_t)v48, (uint16x4_t)v46, 3))), vcvtq_f32_u32(vmovl_u16(v50))), (int8x16_t)vceqzq_f32(v52))), v45)));
      *v12 = vrev16_s8(vbsl_s8((int8x8_t)vceqz_s16(v48), (int8x8_t)v47, vbsl_s8((int8x8_t)vceqz_s16(v49), (int8x8_t)v46, (int8x8_t)vmin_u16((uint16x4_t)v53, (uint16x4_t)vdup_lane_s16(v53, 3)))));
      v54 = &v10[a5];
      if ((unint64_t)v54 >= v11)
        v55 = -(uint64_t)a4;
      else
        v55 = 0;
      v10 = &v54[v55];
      v12 += a5;
      --v40;
    }
    while (v40);
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)20,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  int8x8_t *v10;
  unint64_t v11;
  int8x8_t *v12;
  uint64_t v13;
  unsigned int v14;
  int8x16_t v15;
  int8x16_t v16;
  unsigned int v17;
  int8x16_t v18;
  uint32x4_t v19;
  int32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int16x8_t v23;
  int16x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  int16x4_t v27;
  int32x4_t v28;
  uint32x4_t v29;
  uint16x8_t v30;
  uint32x4_t v31;
  uint32x4_t v32;
  uint32x4_t v33;
  uint32x4_t v34;
  uint16x8_t v35;
  uint32x4_t v36;
  uint32x4_t v37;
  uint32x4_t v38;
  uint32x4_t v39;
  uint16x8_t v40;
  uint32x4_t v41;
  uint32x4_t v42;
  uint32x4_t v43;
  uint32x4_t v44;
  uint32x4_t v45;
  uint64_t v46;
  __int16 v47;
  int8x8_t v48;
  int8x8_t v49;
  __int16 v50;
  uint32x4_t v51;
  int32x4_t v52;
  int16x4_t v53;
  int16x4_t v54;
  int16x4_t v55;
  int16x4_t v56;
  uint16x4_t v57;
  uint16x4_t v58;
  uint16x4_t v59;
  uint32x4_t v60;
  uint32x4_t v61;
  uint32x4_t v62;
  int8x8_t *v63;
  uint64_t v64;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 2)
  {
    v13 = 0;
    if (a6)
      v14 = 0;
    else
      v14 = -1;
    v15.i64[0] = 0xFFFF000000000000;
    v15.i64[1] = 0xFFFF000000000000;
    v16 = vandq_s8((int8x16_t)vdupq_n_s16(v14), v15);
    if (a7)
      v17 = 0;
    else
      v17 = -1;
    v18 = vandq_s8((int8x16_t)vdupq_n_s16(v17), v15);
    v19 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v20.i64[0] = 0x800000008000;
    v20.i64[1] = 0x800000008000;
    do
    {
      v21 = vorrq_s8(v16, vrev16q_s8(*(int8x16_t *)v10[v13].i8));
      v22 = vorrq_s8(v18, vrev16q_s8(*(int8x16_t *)v12[v13].i8));
      v23 = (int16x8_t)vqtbl1q_s8(v21, (int8x16_t)xmmword_1850049F0);
      v24 = (int16x8_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_1850049F0);
      v25 = vminq_u16((uint16x8_t)v21, (uint16x8_t)v23);
      v26 = vminq_u16((uint16x8_t)v22, (uint16x8_t)v24);
      v27 = vqmovun_s32(vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmull_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v26.i8)), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v24.i8)))));
      v28 = vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmull_high_u16(v26, v26)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL)))));
      v29 = vmull_lane_u16((uint16x4_t)v27, *(uint16x4_t *)v21.i8, 3);
      v30 = vqsubq_u16(v26, (uint16x8_t)vqmovun_high_s32(v27, v28));
      v31 = vmull_u16(*(uint16x4_t *)v30.i8, *(uint16x4_t *)v25.i8);
      v32 = vmull_high_u16(v30, v25);
      v33 = vqaddq_u32(v29, vqaddq_u32(v31, v31));
      v34 = vqaddq_u32(vmull_laneq_u16((uint16x4_t)vqmovun_s32(v28), (uint16x8_t)v21, 7), vqaddq_u32(v32, v32));
      v35 = (uint16x8_t)vmvnq_s8((int8x16_t)v23);
      v36 = vmull_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v35.i8);
      v37 = vmull_high_u16(v26, v35);
      v38 = vqaddq_u32(v33, v36);
      v39 = vqaddq_u32(v34, v37);
      v40 = (uint16x8_t)vmvnq_s8((int8x16_t)v24);
      v41 = vmull_u16(*(uint16x4_t *)v25.i8, *(uint16x4_t *)v40.i8);
      v42 = vqaddq_u32(v39, vmull_high_u16(v25, v40));
      v43 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(v38, v41), v19), v20);
      *(uint16x4_t *)v43.i8 = vqshrn_n_u32(vsraq_n_u32(v43, v43, 0x10uLL), 0x10uLL);
      v44 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v42, v19), v20);
      v45 = vsraq_n_u32(v44, v44, 0x10uLL);
      *(int16x4_t *)v40.i8 = vdup_lane_s16(*(int16x4_t *)v43.i8, 3);
      v40.u64[1] = (unint64_t)vdup_lane_s16((int16x4_t)vqshrn_n_u32(v45, 0x10uLL), 3);
      *(int8x16_t *)v12[v13].i8 = vrev16q_s8(vbslq_s8((int8x16_t)vceqzq_s16(v23), v22, vbslq_s8((int8x16_t)vceqzq_s16(v24), v21, (int8x16_t)vminq_u16(vqshrn_high_n_u32(*(uint16x4_t *)v43.i8, v45, 0x10uLL), v40))));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  v46 = v9 + a8;
  if (v46)
  {
    if (a6)
      v47 = 0;
    else
      v47 = -1;
    v48.i32[0] = 0;
    v48.i16[2] = 0;
    v48.i16[3] = v47;
    v49.i32[0] = 0;
    v49.i16[2] = 0;
    if (a7)
      v50 = 0;
    else
      v50 = -1;
    v49.i16[3] = v50;
    v51 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v52.i64[0] = 0x800000008000;
    v52.i64[1] = 0x800000008000;
    do
    {
      v53 = (int16x4_t)vorr_s8(v48, vrev16_s8(*v10));
      v54 = vdup_lane_s16(v53, 3);
      v55 = (int16x4_t)vorr_s8(v49, vrev16_s8(*v12));
      v56 = vdup_lane_s16(v55, 3);
      v57 = vmin_u16((uint16x4_t)v53, (uint16x4_t)v54);
      v58 = vmin_u16((uint16x4_t)v55, (uint16x4_t)v56);
      v59 = (uint16x4_t)vqmovun_s32(vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmull_u16(v58, v58)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v56)))));
      v60 = vmull_lane_u16(v59, (uint16x4_t)v53, 3);
      v61 = vmull_u16(vqsub_u16(v58, v59), v57);
      v62 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vqaddq_u32(v60, vqaddq_u32(v61, v61)), vmull_u16(v58, (uint16x4_t)vmvn_s8((int8x8_t)v54))), vmull_u16(v57, (uint16x4_t)vmvn_s8((int8x8_t)v56))), v51), v52);
      *(uint16x4_t *)v62.i8 = vqshrn_n_u32(vsraq_n_u32(v62, v62, 0x10uLL), 0x10uLL);
      *v12 = vrev16_s8(vbsl_s8((int8x8_t)vceqz_s16(v54), (int8x8_t)v55, vbsl_s8((int8x8_t)vceqz_s16(v56), (int8x8_t)v53, (int8x8_t)vmin_u16(*(uint16x4_t *)v62.i8, (uint16x4_t)vdup_lane_s16(*(int16x4_t *)v62.i8, 3)))));
      v63 = &v10[a5];
      if ((unint64_t)v63 >= v11)
        v64 = -(uint64_t)a4;
      else
        v64 = 0;
      v10 = &v63[v64];
      v12 += a5;
      --v46;
    }
    while (v46);
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)21,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, unint64_t a9)
{
  int16x8_t v9;
  unint64_t v10;
  int8x8_t *v11;
  unint64_t v12;
  int8x8_t *v13;
  uint64_t v14;
  unsigned int v15;
  int8x16_t v16;
  int8x16_t v17;
  unsigned int v18;
  int8x16_t v19;
  uint32x4_t v20;
  int32x4_t v21;
  int8x16_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  int16x8_t v28;
  int8x16_t v29;
  uint32x4_t v30;
  uint32x4_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  uint32x4_t v34;
  uint32x4_t v35;
  uint32x4_t v36;
  uint32x4_t v37;
  uint16x8_t v38;
  uint32x4_t v39;
  uint32x4_t v40;
  uint16x8_t v41;
  uint32x4_t v42;
  uint32x4_t v43;
  uint32x4_t v44;
  uint32x4_t v45;
  uint32x4_t v46;
  uint64_t v47;
  __int16 v48;
  int8x8_t v49;
  __int16 v50;
  int8x8_t v51;
  uint32x4_t v52;
  int32x4_t v53;
  int16x4_t v54;
  int16x4_t v55;
  int16x4_t v56;
  int16x4_t v57;
  uint16x4_t v58;
  uint16x4_t v59;
  uint32x4_t v60;
  uint32x4_t v61;
  uint32x4_t v62;
  int8x8_t *v63;
  uint64_t v64;

  v10 = a9;
  v11 = *result;
  v12 = *a3;
  v13 = *a2;
  if (a9 >= 2)
  {
    v14 = 0;
    if (a6)
      v15 = 0;
    else
      v15 = -1;
    v16.i64[0] = 0xFFFF000000000000;
    v16.i64[1] = 0xFFFF000000000000;
    v17 = vandq_s8((int8x16_t)vdupq_n_s16(v15), v16);
    if (a7)
      v18 = 0;
    else
      v18 = -1;
    v19 = vandq_s8((int8x16_t)vdupq_n_s16(v18), v16);
    v20 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v21.i64[0] = 0x800000008000;
    v21.i64[1] = 0x800000008000;
    do
    {
      v22 = vorrq_s8(v17, vrev16q_s8(*(int8x16_t *)v11[v14].i8));
      v23 = (int16x8_t)vorrq_s8(v19, vrev16q_s8(*(int8x16_t *)v13[v14].i8));
      v24 = (int16x8_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_1850049F0);
      v25 = (int16x8_t)vqtbl1q_s8((int8x16_t)v23, (int8x16_t)xmmword_1850049F0);
      v26 = vminq_u16((uint16x8_t)v22, (uint16x8_t)v24);
      v27 = vminq_u16((uint16x8_t)v23, (uint16x8_t)v25);
      v28 = (int16x8_t)vcgeq_u16(vrhaddq_u16((uint16x8_t)v24, (uint16x8_t)0), v26);
      v29 = (int8x16_t)vzip1q_s16(v28, v28);
      v30 = vmull_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v27.i8);
      v31 = vmull_high_u16(v26, v27);
      v32 = vqsubq_u16((uint16x8_t)v25, v27);
      v33 = vqsubq_u16((uint16x8_t)v24, v26);
      v34 = vmull_u16(*(uint16x4_t *)v32.i8, *(uint16x4_t *)v33.i8);
      v35 = vmull_high_u16(v32, v33);
      v36 = (uint32x4_t)vbslq_s8((int8x16_t)vzip2q_s16(v28, v28), (int8x16_t)vqaddq_u32(v31, v31), (int8x16_t)vqsubq_u32(vmull_laneq_u16((uint16x4_t)vdup_laneq_s16(v23, 7), (uint16x8_t)v22, 7), vqaddq_u32(v35, v35)));
      v37 = (uint32x4_t)vbslq_s8(v29, (int8x16_t)vqaddq_u32(v30, v30), (int8x16_t)vqsubq_u32(vmull_lane_u16((uint16x4_t)vdup_lane_s16(*(int16x4_t *)v23.i8, 3), *(uint16x4_t *)v22.i8, 3), vqaddq_u32(v34, v34)));
      v38 = (uint16x8_t)vmvnq_s8((int8x16_t)v24);
      v39 = vmull_u16(*(uint16x4_t *)v27.i8, *(uint16x4_t *)v38.i8);
      v40 = vqaddq_u32(v36, vmull_high_u16(v27, v38));
      v41 = (uint16x8_t)vmvnq_s8((int8x16_t)v25);
      v42 = vmull_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v41.i8);
      v43 = vqaddq_u32(v40, vmull_high_u16(v26, v41));
      v44 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(v37, v39), v42), v20), v21);
      *(uint16x4_t *)v44.i8 = vqshrn_n_u32(vsraq_n_u32(v44, v44, 0x10uLL), 0x10uLL);
      v45 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v43, v20), v21);
      v46 = vsraq_n_u32(v45, v45, 0x10uLL);
      *(int16x4_t *)v41.i8 = vdup_lane_s16(*(int16x4_t *)v44.i8, 3);
      v41.u64[1] = (unint64_t)vdup_lane_s16((int16x4_t)vqshrn_n_u32(v46, 0x10uLL), 3);
      v9 = (int16x8_t)vqshrn_high_n_u32(*(uint16x4_t *)v44.i8, v46, 0x10uLL);
      *(int8x16_t *)v13[v14].i8 = vrev16q_s8(vbslq_s8((int8x16_t)vceqzq_s16(v24), (int8x16_t)v23, vbslq_s8((int8x16_t)vceqzq_s16(v25), v22, (int8x16_t)vminq_u16((uint16x8_t)v9, v41))));
      v10 -= 2;
      v14 += 2 * a5;
    }
    while (v10 > 1);
    v13 = (int8x8_t *)((char *)v13 + v14 * 8);
    v11 = (int8x8_t *)((char *)v11 + v14 * 8);
  }
  v47 = v10 + a8;
  if (v47)
  {
    if (a6)
      v48 = 0;
    else
      v48 = -1;
    v49.i32[0] = 0;
    v49.i16[2] = 0;
    v49.i16[3] = v48;
    if (a7)
      v50 = 0;
    else
      v50 = -1;
    v51.i32[0] = 0;
    v51.i16[2] = 0;
    v51.i16[3] = v50;
    v52 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v53.i64[0] = 0x800000008000;
    v53.i64[1] = 0x800000008000;
    do
    {
      v54 = (int16x4_t)vorr_s8(v49, vrev16_s8(*v11));
      v55 = vdup_lane_s16(v54, 3);
      v56 = (int16x4_t)vorr_s8(v51, vrev16_s8(*v13));
      v57 = vdup_lane_s16(v56, 3);
      v58 = vmin_u16((uint16x4_t)v54, (uint16x4_t)v55);
      v59 = vmin_u16((uint16x4_t)v56, (uint16x4_t)v57);
      *(uint16x4_t *)v9.i8 = vcge_u16(vrhadd_u16((uint16x4_t)v55, 0), v58);
      v60 = vmull_u16(v58, v59);
      v61 = vmull_u16(vqsub_u16((uint16x4_t)v57, v59), vqsub_u16((uint16x4_t)v55, v58));
      v9 = (int16x8_t)vbslq_s8((int8x16_t)vzip1q_s16(v9, v9), (int8x16_t)vqaddq_u32(v60, v60), (int8x16_t)vqsubq_u32(vmull_lane_u16((uint16x4_t)v57, (uint16x4_t)v54, 3), vqaddq_u32(v61, v61)));
      v62 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32((uint32x4_t)v9, vmull_u16(v59, (uint16x4_t)vmvn_s8((int8x8_t)v55))), vmull_u16(v58, (uint16x4_t)vmvn_s8((int8x8_t)v57))), v52), v53);
      *(uint16x4_t *)v62.i8 = vqshrn_n_u32(vsraq_n_u32(v62, v62, 0x10uLL), 0x10uLL);
      *v13 = vrev16_s8(vbsl_s8((int8x8_t)vceqz_s16(v55), (int8x8_t)v56, vbsl_s8((int8x8_t)vceqz_s16(v57), (int8x8_t)v54, (int8x8_t)vmin_u16(*(uint16x4_t *)v62.i8, (uint16x4_t)vdup_lane_s16(*(int16x4_t *)v62.i8, 3)))));
      v63 = &v11[a5];
      if ((unint64_t)v63 >= v12)
        v64 = -(uint64_t)a4;
      else
        v64 = 0;
      v11 = &v63[v64];
      v13 += a5;
      --v47;
    }
    while (v47);
  }
  *result = v11;
  *a3 = v12;
  *a2 = v13;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)22,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  int8x8_t *v10;
  unint64_t v11;
  int8x8_t *v12;
  uint64_t v13;
  unsigned int v14;
  int8x16_t v15;
  int8x16_t v16;
  unsigned int v17;
  int8x16_t v18;
  uint32x4_t v19;
  int32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int16x8_t v23;
  int16x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint32x4_t v27;
  uint32x4_t v28;
  uint16x8_t v29;
  uint32x4_t v30;
  uint16x8_t v31;
  uint32x4_t v32;
  uint32x4_t v33;
  uint16x8_t v34;
  uint32x4_t v35;
  uint32x4_t v36;
  uint32x4_t v37;
  uint32x4_t v38;
  uint32x4_t v39;
  uint64_t v40;
  __int16 v41;
  int8x8_t v42;
  int8x8_t v43;
  __int16 v44;
  uint32x4_t v45;
  int32x4_t v46;
  int16x4_t v47;
  int16x4_t v48;
  int16x4_t v49;
  int16x4_t v50;
  uint16x4_t v51;
  uint16x4_t v52;
  uint32x4_t v53;
  uint32x4_t v54;
  int8x8_t *v55;
  uint64_t v56;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 2)
  {
    v13 = 0;
    if (a6)
      v14 = 0;
    else
      v14 = -1;
    v15.i64[0] = 0xFFFF000000000000;
    v15.i64[1] = 0xFFFF000000000000;
    v16 = vandq_s8((int8x16_t)vdupq_n_s16(v14), v15);
    if (a7)
      v17 = 0;
    else
      v17 = -1;
    v18 = vandq_s8((int8x16_t)vdupq_n_s16(v17), v15);
    v19 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v20.i64[0] = 0x800000008000;
    v20.i64[1] = 0x800000008000;
    do
    {
      v21 = vorrq_s8(v16, vrev16q_s8(*(int8x16_t *)v10[v13].i8));
      v22 = vorrq_s8(v18, vrev16q_s8(*(int8x16_t *)v12[v13].i8));
      v23 = (int16x8_t)vqtbl1q_s8(v21, (int8x16_t)xmmword_1850049F0);
      v24 = (int16x8_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_1850049F0);
      v25 = vminq_u16((uint16x8_t)v21, (uint16x8_t)v23);
      v26 = vminq_u16((uint16x8_t)v22, (uint16x8_t)v24);
      v27 = vmull_lane_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v21.i8, 3);
      v27.i32[3] = 0;
      v28 = vmull_high_laneq_u16(v26, (uint16x8_t)v21, 7);
      v29 = (uint16x8_t)vabdq_u32(vmull_lane_u16(*(uint16x4_t *)v25.i8, *(uint16x4_t *)v22.i8, 3), v27);
      v28.i32[3] = 0;
      v30 = vabdq_u32(vmull_high_laneq_u16(v25, (uint16x8_t)v22, 7), v28);
      v31 = (uint16x8_t)vmvnq_s8((int8x16_t)v23);
      v32 = vmull_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v31.i8);
      v33 = vqaddq_u32(v30, vmull_high_u16(v26, v31));
      v34 = (uint16x8_t)vmvnq_s8((int8x16_t)v24);
      v35 = vmull_u16(*(uint16x4_t *)v25.i8, *(uint16x4_t *)v34.i8);
      v36 = vqaddq_u32(v33, vmull_high_u16(v25, v34));
      v37 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32((uint32x4_t)v29, v32), v35), v19), v20);
      *(uint16x4_t *)v37.i8 = vqshrn_n_u32(vsraq_n_u32(v37, v37, 0x10uLL), 0x10uLL);
      v38 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v36, v19), v20);
      v39 = vsraq_n_u32(v38, v38, 0x10uLL);
      *(int16x4_t *)v29.i8 = vdup_lane_s16(*(int16x4_t *)v37.i8, 3);
      v29.u64[1] = (unint64_t)vdup_lane_s16((int16x4_t)vqshrn_n_u32(v39, 0x10uLL), 3);
      *(int8x16_t *)v12[v13].i8 = vrev16q_s8(vbslq_s8((int8x16_t)vceqzq_s16(v23), v22, vbslq_s8((int8x16_t)vceqzq_s16(v24), v21, (int8x16_t)vminq_u16(vqshrn_high_n_u32(*(uint16x4_t *)v37.i8, v39, 0x10uLL), v29))));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  v40 = v9 + a8;
  if (v40)
  {
    if (a6)
      v41 = 0;
    else
      v41 = -1;
    v42.i32[0] = 0;
    v42.i16[2] = 0;
    v42.i16[3] = v41;
    v43.i32[0] = 0;
    v43.i16[2] = 0;
    if (a7)
      v44 = 0;
    else
      v44 = -1;
    v43.i16[3] = v44;
    v45 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v46.i64[0] = 0x800000008000;
    v46.i64[1] = 0x800000008000;
    do
    {
      v47 = (int16x4_t)vorr_s8(v42, vrev16_s8(*v10));
      v48 = (int16x4_t)vorr_s8(v43, vrev16_s8(*v12));
      v49 = vdup_lane_s16(v47, 3);
      v50 = vdup_lane_s16(v48, 3);
      v51 = vmin_u16((uint16x4_t)v47, (uint16x4_t)v49);
      v52 = vmin_u16((uint16x4_t)v48, (uint16x4_t)v50);
      v53 = vmull_lane_u16(v52, (uint16x4_t)v47, 3);
      v53.i32[3] = 0;
      v54 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vabdq_u32(vmull_lane_u16(v51, (uint16x4_t)v48, 3), v53), vmull_u16(v52, (uint16x4_t)vmvn_s8((int8x8_t)v49))), vmull_u16(v51, (uint16x4_t)vmvn_s8((int8x8_t)v50))), v45), v46);
      *(uint16x4_t *)v54.i8 = vqshrn_n_u32(vsraq_n_u32(v54, v54, 0x10uLL), 0x10uLL);
      *v12 = vrev16_s8(vbsl_s8((int8x8_t)vceqz_s16(v49), (int8x8_t)v48, vbsl_s8((int8x8_t)vceqz_s16(v50), (int8x8_t)v47, (int8x8_t)vmin_u16(*(uint16x4_t *)v54.i8, (uint16x4_t)vdup_lane_s16(*(int16x4_t *)v54.i8, 3)))));
      v55 = &v10[a5];
      if ((unint64_t)v55 >= v11)
        v56 = -(uint64_t)a4;
      else
        v56 = 0;
      v10 = &v55[v56];
      v12 += a5;
      --v40;
    }
    while (v40);
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)23,_RGBA16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  int8x8_t *v10;
  unint64_t v11;
  int8x8_t *v12;
  uint64_t v13;
  unsigned int v14;
  int8x16_t v15;
  int8x16_t v16;
  unsigned int v17;
  int8x16_t v18;
  uint32x4_t v19;
  int8x16_t v20;
  int32x4_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int16x8_t v24;
  int16x8_t v25;
  uint16x8_t v26;
  int8x16_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  int8x16_t v30;
  uint16x8_t v31;
  uint32x4_t v32;
  uint32x4_t v33;
  uint32x4_t v34;
  uint32x4_t v35;
  uint16x8_t v36;
  int8x16_t v37;
  uint64_t v38;
  __int16 v39;
  int8x8_t v40;
  int8x8_t v41;
  __int16 v42;
  uint32x4_t v43;
  int32x4_t v44;
  int16x4_t v45;
  int16x4_t v46;
  int16x4_t v47;
  int16x4_t v48;
  int8x8_t v49;
  uint16x4_t v50;
  uint16x4_t v51;
  uint32x4_t v52;
  int8x8_t *v53;
  uint64_t v54;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 2)
  {
    v13 = 0;
    if (a6)
      v14 = 0;
    else
      v14 = -1;
    v15.i64[0] = 0xFFFF000000000000;
    v15.i64[1] = 0xFFFF000000000000;
    v16 = vandq_s8((int8x16_t)vdupq_n_s16(v14), v15);
    if (a7)
      v17 = 0;
    else
      v17 = -1;
    v18 = vandq_s8((int8x16_t)vdupq_n_s16(v17), v15);
    v19 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v20.i64[0] = 0xFFFFFFFFFFFFLL;
    v20.i64[1] = 0xFFFFFFFFFFFFLL;
    v21.i64[0] = 0x800000008000;
    v21.i64[1] = 0x800000008000;
    do
    {
      v22 = vorrq_s8(v16, vrev16q_s8(*(int8x16_t *)v10[v13].i8));
      v23 = vorrq_s8(v18, vrev16q_s8(*(int8x16_t *)v12[v13].i8));
      v24 = (int16x8_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_1850049F0);
      v25 = (int16x8_t)vqtbl1q_s8(v23, (int8x16_t)xmmword_1850049F0);
      v26 = vminq_u16((uint16x8_t)v22, (uint16x8_t)v24);
      v27 = (int8x16_t)vminq_u16((uint16x8_t)v23, (uint16x8_t)v25);
      v28 = (uint16x8_t)vmvnq_s8(v27);
      v29 = (uint16x8_t)vandq_s8(v27, v20);
      v30 = (int8x16_t)vcgtq_u16(v29, v28);
      v31 = vabdq_u16(v28, v29);
      v32 = vmull_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v31.i8);
      v33 = vmull_high_u16(v26, v31);
      v34 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v32, v19), v21);
      v35 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v33, v19), v21);
      v36 = vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v34, v34, 0x10uLL), 0x10uLL), vsraq_n_u32(v35, v35, 0x10uLL), 0x10uLL);
      v37 = vbslq_s8(v30, (int8x16_t)vqsubq_u16((uint16x8_t)v27, v36), (int8x16_t)vqaddq_u16((uint16x8_t)v27, v36));
      *(int8x16_t *)v12[v13].i8 = vrev16q_s8(vbslq_s8((int8x16_t)vceqzq_s16(v24), v23, vbslq_s8((int8x16_t)vceqzq_s16(v25), v22, (int8x16_t)vminq_u16((uint16x8_t)v37, (uint16x8_t)vqtbl1q_s8(v37, (int8x16_t)xmmword_1850049F0)))));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  v38 = v9 + a8;
  if (v38)
  {
    if (a6)
      v39 = 0;
    else
      v39 = -1;
    v40.i32[0] = 0;
    v40.i16[2] = 0;
    v40.i16[3] = v39;
    v41.i32[0] = 0;
    v41.i16[2] = 0;
    if (a7)
      v42 = 0;
    else
      v42 = -1;
    v41.i16[3] = v42;
    v43 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v44.i64[0] = 0x800000008000;
    v44.i64[1] = 0x800000008000;
    do
    {
      v45 = (int16x4_t)vorr_s8(v40, vrev16_s8(*v10));
      v46 = (int16x4_t)vorr_s8(v41, vrev16_s8(*v12));
      v47 = vdup_lane_s16(v45, 3);
      v48 = vdup_lane_s16(v46, 3);
      v49 = (int8x8_t)vmin_u16((uint16x4_t)v46, (uint16x4_t)v48);
      v50 = (uint16x4_t)vmvn_s8(v49);
      v51 = (uint16x4_t)v49;
      v51.i16[3] = 0;
      v52 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(vmin_u16((uint16x4_t)v45, (uint16x4_t)v47), vabd_u16(v50, v51)), v43), v44);
      *(uint16x4_t *)v52.i8 = vqshrn_n_u32(vsraq_n_u32(v52, v52, 0x10uLL), 0x10uLL);
      *(int8x8_t *)v52.i8 = vbsl_s8((int8x8_t)vcgt_u16(v51, v50), (int8x8_t)vqsub_u16((uint16x4_t)v49, *(uint16x4_t *)v52.i8), (int8x8_t)vqadd_u16((uint16x4_t)v49, *(uint16x4_t *)v52.i8));
      *v12 = vrev16_s8(vbsl_s8((int8x8_t)vceqz_s16(v47), (int8x8_t)v46, vbsl_s8((int8x8_t)vceqz_s16(v48), (int8x8_t)v45, (int8x8_t)vmin_u16(*(uint16x4_t *)v52.i8, (uint16x4_t)vdup_lane_s16(*(int16x4_t *)v52.i8, 3)))));
      v53 = &v10[a5];
      if ((unint64_t)v53 >= v11)
        v54 = -(uint64_t)a4;
      else
        v54 = 0;
      v10 = &v53[v54];
      v12 += a5;
      --v38;
    }
    while (v38);
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

void Type1C::~Type1C(Type1C *this)
{
  SimpleFont::~SimpleFont(this);
  JUMPOUT(0x186DC23C4);
}

uint64_t Type1C::get_format(Type1C *this)
{
  return 3;
}

_QWORD *Type1C::create_subset(uint64_t a1, int a2)
{
  _QWORD *v4;
  void *v6[2];
  char v7;
  void *__p[2];
  char v9;

  v4 = (_QWORD *)operator new();
  std::string::basic_string[abi:se180100]<0>((char **)v6, "Tc");
  PDFFont::get_next_subset_name((uint64_t)__p, *(_QWORD *)(a1 + 8), (uint64_t)v6);
  FontSubset::FontSubset((uint64_t)v4, a1, (__int128 *)__p, a2);
  *v4 = &off_1E1627F08;
  if (v9 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  return v4;
}

void sub_184AE7014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  MEMORY[0x186DC23C4](v20, 0x10F3C4094E7248ELL);
  _Unwind_Resume(a1);
}

uint64_t cmap_csr_set_create()
{
  _WORD *v0;
  uint64_t v1;
  CFMutableArrayRef Mutable;

  v0 = malloc_type_calloc(1uLL, 0x18uLL, 0x10200404BE0E0E6uLL);
  v1 = (uint64_t)v0;
  if (v0)
  {
    *v0 = 8;
    Mutable = CFArrayCreateMutable(0, 0, 0);
    *(_QWORD *)(v1 + 8) = Mutable;
    if (!Mutable)
    {
      cmap_csr_set_release(v1);
      return 0;
    }
  }
  return v1;
}

void cmap_csr_set_release(uint64_t a1)
{
  const __CFArray *v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex i;
  void ***ValueAtIndex;

  if (a1)
  {
    v2 = *(const __CFArray **)(a1 + 8);
    if (v2)
    {
      Count = CFArrayGetCount(v2);
      if (Count)
      {
        v4 = Count;
        for (i = 0; i != v4; ++i)
        {
          ValueAtIndex = (void ***)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), i);
          cmap_cid_set_release(ValueAtIndex[2]);
          cmap_cid_set_release(ValueAtIndex[3]);
          free(ValueAtIndex);
        }
      }
      CFRelease(*(CFTypeRef *)(a1 + 8));
    }
    cmap_bf_set_release(*(_QWORD *)(a1 + 16));
    free((void *)a1);
  }
}

void cmap_csr_set_add_codespace_range(unsigned __int8 *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  _DWORD *v6;

  v6 = csr_create(a2, a3, a4);
  if (v6)
  {
    CFArrayAppendValue(*((CFMutableArrayRef *)a1 + 1), v6);
    if (*a1 > a2)
      *a1 = a2;
    if (a1[1] < a2)
      a1[1] = a2;
  }
}

_DWORD *csr_create(unsigned int a1, unsigned int a2, unsigned int a3)
{
  _DWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64x2_t v9;
  int64x2_t v10;
  char v11;
  int64x2_t v12;
  char v13;
  int32x2_t v14;
  uint64_t v15;
  int64x2_t v16;
  int64x2_t v17;
  char v18;
  int32x2_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  _DWORD *v24;
  _BYTE v25[8];

  if (!a1)
    return 0;
  result = malloc_type_calloc(1uLL, 0x20uLL, 0x102004001854A68uLL);
  if (result)
  {
    v7 = 0;
    v8 = ((_WORD)a1 + 1) & 0x1FE;
    v9 = (uint64x2_t)vdupq_n_s64((unint64_t)a1 - 1);
    v10 = (int64x2_t)xmmword_185004A00;
    v11 = 8 * a1 - 8;
    v12 = vdupq_n_s64(2uLL);
    v13 = v11;
    do
    {
      v14 = vmovn_s64((int64x2_t)vcgeq_u64(v9, (uint64x2_t)v10));
      if ((v14.i8[0] & 1) != 0)
        v25[v7 + 4] = a2 >> v13;
      if ((v14.i8[4] & 1) != 0)
        v25[v7 + 5] = a2 >> (8 * ((v7 ^ 0xFE) + a1));
      v7 += 2;
      v10 = vaddq_s64(v10, v12);
      v13 -= 16;
    }
    while (v8 != v7);
    v15 = 0;
    v16 = (int64x2_t)xmmword_185004A00;
    v17 = vdupq_n_s64(2uLL);
    v18 = 8 * a1 - 8;
    do
    {
      v19 = vmovn_s64((int64x2_t)vcgeq_u64(v9, (uint64x2_t)v16));
      if ((v19.i8[0] & 1) != 0)
        v25[v15] = a3 >> v18;
      if ((v19.i8[4] & 1) != 0)
        v25[v15 + 1] = a3 >> (8 * ((v15 ^ 0xFE) + a1));
      v15 += 2;
      v16 = vaddq_s64(v16, v17);
      v18 -= 16;
    }
    while (v8 != v15);
    v24 = result;
    v20 = 0;
    do
    {
      v21 = v25[v20 + 4];
      v22 = v25[v20];
      if (v21 > v22)
      {
        pdf_log("Incorrect start/end range ordering; fixing.");
        v23 = ((v22 ^ v21) << v11);
        a2 ^= v23;
        a3 ^= v23;
      }
      ++v20;
      v11 -= 8;
    }
    while (a1 != v20);
    result = v24;
    *(_BYTE *)v24 = a1;
    v24[1] = a2;
    v24[2] = a3;
  }
  return result;
}

BOOL check_dimension(_BOOL8 result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64x2_t v5;
  int64x2_t v6;
  char v7;
  int64x2_t v8;
  char v9;
  int32x2_t v10;
  uint64_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int32x2_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  BOOL v23;
  _BYTE v24[4];
  _BYTE v25[4];

  if ((result - 5) < 0xFFFFFFFC)
    return 0;
  v3 = 0;
  v4 = (result + 1) & 0x1FE;
  v5 = (uint64x2_t)vdupq_n_s64((unint64_t)result - 1);
  v6 = (int64x2_t)xmmword_185004A00;
  v7 = 8 * result - 8;
  v8 = vdupq_n_s64(2uLL);
  v9 = v7;
  do
  {
    v10 = vmovn_s64((int64x2_t)vcgeq_u64(v5, (uint64x2_t)v6));
    if ((v10.i8[0] & 1) != 0)
      v25[v3] = a2 >> v9;
    if ((v10.i8[4] & 1) != 0)
      v25[v3 + 1] = a2 >> (8 * ((v3 ^ 0xFE) + result));
    v3 += 2;
    v6 = vaddq_s64(v6, v8);
    v9 -= 16;
  }
  while (v4 != v3);
  v11 = 0;
  v12 = (int64x2_t)xmmword_185004A00;
  v13 = vdupq_n_s64(2uLL);
  do
  {
    v14 = vmovn_s64((int64x2_t)vcgeq_u64(v5, (uint64x2_t)v12));
    if ((v14.i8[0] & 1) != 0)
      v24[v11] = a3 >> v7;
    if ((v14.i8[4] & 1) != 0)
      v24[v11 + 1] = a3 >> (8 * ((v11 ^ 0xFE) + result));
    v11 += 2;
    v12 = vaddq_s64(v12, v13);
    v7 -= 16;
  }
  while (v4 != v11);
  if (result == 2 && !a2 && a3 == 0xFFFF)
    return 1;
  if (!result)
  {
    v15 = result - 1 - 1;
    v16 = v24;
    v17 = v25;
    do
    {
      v19 = *v17++;
      v18 = v19;
      v21 = *v16++;
      v20 = v21;
      v23 = v15-- != 0;
      result = v18 == v20;
    }
    while (v18 == v20 && v23);
  }
  return result;
}

unsigned __int8 *find_csr(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned __int8 *result;
  CFIndex v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int64x2_t v12;
  int32x2_t v13;
  uint64_t v14;
  char v15;
  int64x2_t v16;
  int32x2_t v17;
  uint64_t v18;
  unsigned int v19;
  char v20;
  int64x2_t v21;
  int32x2_t v22;
  uint64_t v23;
  unsigned int v24;
  char v25;
  int64x2_t v26;
  int32x2_t v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  int64x2_t v36;
  uint64x2_t v37;
  unsigned __int8 *v38;
  CFIndex v40;
  _BYTE v41[4];
  _BYTE v42[4];
  _BYTE v43[4];
  _BYTE v44[4];

  result = (unsigned __int8 *)CFArrayGetCount(*(CFArrayRef *)(a1 + 8));
  v38 = result;
  if (result)
  {
    v8 = 0;
    v37 = (uint64x2_t)vdupq_n_s64((unint64_t)a2 - 1);
    v9 = ((_WORD)a2 + 1) & 0x1FE;
    v36 = vdupq_n_s64(2uLL);
    do
    {
      v40 = v8;
      result = (unsigned __int8 *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), v8);
      if (*result == a2)
      {
        if (!a2)
          return result;
        v10 = 0;
        v11 = 8 * a2 - 8;
        v12 = (int64x2_t)xmmword_185004A00;
        do
        {
          v13 = vmovn_s64((int64x2_t)vcgeq_u64(v37, (uint64x2_t)v12));
          if ((v13.i8[0] & 1) != 0)
            v44[v10] = a3 >> v11;
          if ((v13.i8[4] & 1) != 0)
            v44[v10 + 1] = a3 >> (8 * ((v10 ^ 0xFE) + a2));
          v10 += 2;
          v12 = vaddq_s64(v12, v36);
          v11 -= 16;
        }
        while (v9 != v10);
        v14 = 0;
        v15 = 8 * a2 - 8;
        v16 = (int64x2_t)xmmword_185004A00;
        do
        {
          v17 = vmovn_s64((int64x2_t)vcgeq_u64(v37, (uint64x2_t)v16));
          if ((v17.i8[0] & 1) != 0)
            v43[v14] = a4 >> v15;
          if ((v17.i8[4] & 1) != 0)
            v43[v14 + 1] = a4 >> (8 * ((v14 ^ 0xFE) + a2));
          v14 += 2;
          v16 = vaddq_s64(v16, vdupq_n_s64(2uLL));
          v15 -= 16;
        }
        while (v9 != v14);
        v18 = 0;
        v19 = *((_DWORD *)result + 1);
        v20 = 8 * a2 - 8;
        v21 = (int64x2_t)xmmword_185004A00;
        do
        {
          v22 = vmovn_s64((int64x2_t)vcgeq_u64(v37, (uint64x2_t)v21));
          if ((v22.i8[0] & 1) != 0)
            v42[v18] = v19 >> v20;
          if ((v22.i8[4] & 1) != 0)
            v42[v18 + 1] = v19 >> (8 * ((v18 ^ 0xFE) + a2));
          v18 += 2;
          v21 = vaddq_s64(v21, vdupq_n_s64(2uLL));
          v20 -= 16;
        }
        while (v9 != v18);
        v23 = 0;
        v24 = *((_DWORD *)result + 2);
        v25 = 8 * a2 - 8;
        v26 = (int64x2_t)xmmword_185004A00;
        do
        {
          v27 = vmovn_s64((int64x2_t)vcgeq_u64(v37, (uint64x2_t)v26));
          if ((v27.i8[0] & 1) != 0)
            v41[v23] = v24 >> v25;
          if ((v27.i8[4] & 1) != 0)
            v41[v23 + 1] = v24 >> (8 * ((v23 ^ 0xFE) + a2));
          v23 += 2;
          v26 = vaddq_s64(v26, vdupq_n_s64(2uLL));
          v25 -= 16;
        }
        while (v9 != v23);
        v28 = v41;
        v29 = v44;
        v30 = v42;
        v31 = v43;
        v32 = a2;
        while (1)
        {
          v34 = *v31++;
          v33 = v34;
          v35 = *v30++;
          if (v33 < v35 || *v29 > *v28)
            break;
          ++v28;
          ++v29;
          if (!--v32)
            return result;
        }
      }
      v8 = v40 + 1;
    }
    while ((unsigned __int8 *)(v40 + 1) != v38);
    return 0;
  }
  return result;
}

uint64_t CGPDFMarkedContentItemCreate(void)
{
  if (CGPDFMarkedContentItemGetTypeID(void)::onceToken != -1)
    dispatch_once(&CGPDFMarkedContentItemGetTypeID(void)::onceToken, &__block_literal_global_918);
  return pdf_create_cftype();
}

uint64_t ___ZL31CGPDFMarkedContentItemGetTypeIDv_block_invoke()
{
  uint64_t result;

  result = pdf_register_cftype((uint64_t)&CGPDFMarkedContentItemGetTypeID(void)::CGPDFMarkedContentItemType);
  CGPDFMarkedContentItemGetTypeID(void)::typeID = result;
  return result;
}

CFTypeRef CGPDFMarkedContentItemRetain(CFTypeRef cf)
{
  if (cf)
    return CFRetain(cf);
  return cf;
}

void CGPDFMarkedContentItemRelease(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

void PDFInfoSetValue(uint64_t a1, const void *a2, const void *a3)
{
  const __CFDictionary *v6;
  __CFDictionary *MutableCopy;
  __CFDictionary *v8;
  const void *v9;

  v6 = *(const __CFDictionary **)(a1 + 8);
  if (v6)
    MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v6);
  else
    MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v8 = MutableCopy;
  if (MutableCopy)
  {
    CFDictionarySetValue(MutableCopy, a2, a3);
    v9 = *(const void **)(a1 + 8);
    if (v9)
      CFRelease(v9);
    *(_QWORD *)(a1 + 8) = v8;
  }
}

const __CFDictionary *PDFInfoGetString(const __CFDictionary *result, const void *a2, const void *a3)
{
  const __CFDictionary *v3;
  CFTypeID v5;
  void *value;

  if (result)
  {
    v3 = result;
    result = (const __CFDictionary *)*((_QWORD *)result + 1);
    if (result)
    {
      value = 0;
      if (CFDictionaryGetValueIfPresent(result, a2, (const void **)&value)
        || a3 && CFDictionaryGetValueIfPresent(*((CFDictionaryRef *)v3 + 1), a3, (const void **)&value))
      {
        result = (const __CFDictionary *)value;
        if (value)
        {
          v5 = CFGetTypeID(value);
          if (v5 == CFStringGetTypeID())
            return (const __CFDictionary *)value;
          else
            return 0;
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

const __CFDictionary *PDFInfoCopyProducer(const __CFDictionary **a1)
{
  const __CFDictionary *Mutable;
  const __CFDictionary *Value;
  const __CFDictionary *String;
  const __CFString *v4;
  const __CFString *v5;

  Mutable = (const __CFDictionary *)a1;
  if (a1)
  {
    Value = a1[1];
    if (Value)
      Value = (const __CFDictionary *)CFDictionaryGetValue(Value, CFSTR("CGPDFContextProducer"));
    if (Value == (const __CFDictionary *)*MEMORY[0x1E0C9B0D0])
    {
      return 0;
    }
    else
    {
      String = PDFInfoGetString(Mutable, CFSTR("CGPDFContextProducer"), 0);
      if (String)
      {
        Mutable = String;
        CFRetain(String);
      }
      else
      {
        Mutable = (const __CFDictionary *)CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
        CFStringAppend((CFMutableStringRef)Mutable, CFSTR("iOS "));
        v4 = (const __CFString *)CFCopySystemVersionString();
        if (v4)
        {
          v5 = v4;
          CFStringAppend((CFMutableStringRef)Mutable, v4);
          CFStringAppend((CFMutableStringRef)Mutable, CFSTR(" "));
          CFRelease(v5);
        }
        CFStringAppend((CFMutableStringRef)Mutable, CFSTR("Quartz PDFContext"));
      }
    }
  }
  return Mutable;
}

_QWORD *PDFInfoGetNowDate(_QWORD *result)
{
  _QWORD *v1;
  const __CFDictionary *v2;
  const void *Value;
  const void *v4;
  CFTypeID v5;
  const __CFAllocator *v6;
  CFAbsoluteTime Current;

  if (result)
  {
    v1 = result;
    result = (_QWORD *)result[3];
    if (!result)
    {
      v2 = (const __CFDictionary *)v1[1];
      if (v2)
      {
        Value = CFDictionaryGetValue(v2, CFSTR("CGPDFContextDate"));
        if (Value != (const void *)*MEMORY[0x1E0C9B0D0])
        {
          v4 = Value;
          if (Value)
          {
            v5 = CFGetTypeID(Value);
            if (v5 == CFDateGetTypeID())
            {
              result = CFRetain(v4);
LABEL_10:
              v1[3] = result;
              return result;
            }
          }
LABEL_9:
          v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          Current = CFAbsoluteTimeGetCurrent();
          result = CFDateCreate(v6, Current);
          goto LABEL_10;
        }
      }
      else if (*MEMORY[0x1E0C9B0D0])
      {
        goto LABEL_9;
      }
      return 0;
    }
  }
  return result;
}

CFStringRef PDFInfoCopyKeywordsString(uint64_t a1)
{
  const __CFDictionary *v1;
  const __CFString *Value;
  const __CFString *v3;
  CFTypeID v4;
  CFTypeID v6;
  CFIndex Count;
  uint64_t v8;
  const __CFAllocator *v9;
  const __CFArray *MutableCopy;
  CFIndex i;
  const __CFString *ValueAtIndex;
  CFTypeID v13;
  CFStringRef v14;

  if (a1)
  {
    v1 = *(const __CFDictionary **)(a1 + 8);
    if (v1)
    {
      Value = (const __CFString *)CFDictionaryGetValue(v1, CFSTR("kCGPDFContextKeywords"));
      if (Value)
      {
        v3 = Value;
        v4 = CFGetTypeID(Value);
        if (v4 == CFStringGetTypeID())
        {
          if (CFStringGetLength(v3) >= 1)
            return (CFStringRef)CFRetain(v3);
        }
        else
        {
          v6 = CFGetTypeID(v3);
          if (v6 == CFArrayGetTypeID())
          {
            Count = CFArrayGetCount((CFArrayRef)v3);
            if (Count)
            {
              v8 = Count;
              v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
              MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, (CFArrayRef)v3);
              if (v8 < 1)
                goto LABEL_16;
              for (i = 0; i < v8; ++i)
              {
                ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(MutableCopy, i);
                v13 = CFGetTypeID(ValueAtIndex);
                if (v13 != CFStringGetTypeID() || CFStringGetLength(ValueAtIndex) <= 0)
                {
                  CFArrayRemoveValueAtIndex(MutableCopy, i);
                  --v8;
                  --i;
                }
              }
              if (v8)
              {
LABEL_16:
                v14 = CFStringCreateByCombiningStrings(v9, MutableCopy, CFSTR(", "));
                CFRelease(MutableCopy);
                return v14;
              }
              CFRelease(MutableCopy);
            }
          }
        }
      }
    }
  }
  return 0;
}

void emit_key_string(uint64_t *a1, CFStringRef theString, const __CFString *a3)
{
  CFIndex Length;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (theString)
  {
    Length = CFStringGetLength(theString);
    if (a3)
    {
      if (Length >= 1 && CFStringGetLength(a3) >= 1)
        PDFDocumentPrintf(*a1, (uint64_t)"%/ %T", v7, v8, v9, v10, v11, v12, (uint64_t)theString);
    }
  }
}

BOOL compareBaseline(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 104) != *(double *)(a2 + 104);
}

uint64_t MinMax(uint64_t a1, unsigned int *a2)
{
  unsigned int v2;

  v2 = *(_DWORD *)(a1 + 68);
  if (v2 < *a2)
    *a2 = v2;
  if (v2 > a2[1])
    a2[1] = v2;
  return 1;
}

uint64_t graphicBetween(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGRect v14;
  CGRect v15;

  v4 = *(_DWORD *)(a1 + 68);
  v5 = *(_DWORD *)(a2 + 68);
  if (v4 + 1 >= v5)
  {
    v6 = *(_DWORD *)(a1 + 68);
    if (v5 + 1 >= v4)
      return 0;
  }
  else
  {
    v6 = *(_DWORD *)(a2 + 68);
    v5 = *(_DWORD *)(a1 + 68);
  }
  v7 = *(_QWORD *)(a3 + 2160);
  while (v7 < *(_QWORD *)(a3 + 2168))
  {
    v8 = *(_DWORD *)(v7 + 68);
    v7 += 184;
    if (v8 > v5)
    {
      if (v8 < v6)
      {
        v9 = *(double *)(v7 - 184);
        v10 = *(double *)(v7 - 176);
        v11 = *(double *)(v7 - 168);
        v12 = *(double *)(v7 - 160);
        v14.origin.x = v9;
        v14.origin.y = v10;
        v14.size.width = v11;
        v14.size.height = v12;
        if (CGRectIntersectsRect(*(CGRect *)a1, v14))
        {
          v15.origin.x = v9;
          v15.origin.y = v10;
          v15.size.width = v11;
          v15.size.height = v12;
          if (CGRectIntersectsRect(*(CGRect *)a2, v15))
            return 1;
        }
      }
      return 0;
    }
  }
  return 0;
}

uint64_t CGColorConverterIterateFunctionsWithCallbacks(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v9;
  unsigned int v14;

  v8 = a8;
  v9 = a7;
  v14 = a2;
  CGPostError((uint64_t)"%s: This function is deprected. Please use CGColorConversionInfoIterateFunctionsWithCallbacks", a2, a3, a4, a5, a6, a7, a8, (char)"CGColorConverterIterateFunctionsWithCallbacks");
  return CGColorConversionInfoIterateFunctionsWithCallbacks(a1, v14, a3, a4, a5, a6, v9, v8);
}

uint64_t CGColorConverterIterateColorSpaceFunctionsWithCallbacks(uint64_t a1, CGColorSpace *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  unsigned int v9;
  unsigned int v14;

  v9 = a8;
  v14 = a3;
  CGPostError((uint64_t)"%s: This function is deprected. Please use CGColorConversionInfoIterateColorSpaceFunctionsWithCallbacks", (uint64_t)a2, a3, a4, a5, a6, a7, a8, (char)"CGColorConverterIterateColorSpaceFunctionsWithCallbacks");
  return CGColorConversionInfoIterateColorSpaceFunctionsWithCallbacks(a1, a2, v14, a4, a5, a6, a7, v9, a9);
}

_DWORD *clipMaskRetain(uint64_t a1, _DWORD *a2)
{
  _DWORD *result;

  result = a2;
  if (a2)
    ++*a2;
  return result;
}

void clipMaskRelease(int a1, unsigned int **a2)
{
  PDFClipMaskRelease(a2);
}

BOOL clipMaskEqual(uint64_t a1, uint64_t a2)
{
  return PDFClipMaskEqualToClipMask(a1, a2);
}

uint64_t clipMaskHash(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

void emitClipMaskDefinition(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  int v5;
  _DWORD *v6;
  int v7;
  uint64_t v8;
  const CGRect **v9;
  CGFloat height;
  CGFloat y;
  CGFloat v12;
  CGFloat v13;
  const CGRect *v14;
  const CGRect *v15;
  CGFloat *p_height;
  CGFloat *p_y;
  CGSize *p_size;
  const CGRect *v19;
  CGFloat *v20;
  CGSize *v21;
  CGFloat *v22;
  uint64_t v23;
  CGFloat x;
  uint64_t v25;
  CGFloat width;
  const CGAffineTransform *v27;
  __int128 v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  CGColorSpace *DeviceGray;
  CGColorRef v164;
  unint64_t v165;
  _OWORD *v166;
  uint64_t v167;
  const CGAffineTransform *v168;
  __int128 v169;
  __int128 v170;
  CGFloat *v171;
  CGFloat *v172;
  const CGRect *v173;
  CGFloat *v174;
  CGFloat *v175;
  BOOL v176;
  CGSize *v177;
  const CGRect *v178;
  unint64_t v179;
  unint64_t v180;
  _QWORD *v181;
  const CGAffineTransform *v182;
  __int128 v183;
  __int128 v184;
  double v185;
  double v186;
  double v187;
  double v188;
  CGImage *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  CGAffineTransform v227;
  CGRect v228;
  CGRect v229;
  CGRect v230;
  CGRect v231;

  if (*(_BYTE *)(a1 + 24))
    goto LABEL_47;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_DWORD *)(v4 + 4);
  if (v5 <= 0)
  {
    *(_DWORD *)(v4 + 4) = 1;
    v6 = (_DWORD *)(v4 + 8);
  }
  else
  {
    if (v5 != 1)
      goto LABEL_8;
    v7 = *(_DWORD *)(v4 + 8);
    v6 = (_DWORD *)(v4 + 8);
    if (v7 > 3)
      goto LABEL_8;
  }
  *v6 = 4;
LABEL_8:
  v228 = CGRectNull;
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
  {
    v9 = (const CGRect **)(a1 + 40);
    height = 0.0;
    y = INFINITY;
    v12 = 0.0;
    v13 = INFINITY;
    do
    {
      v15 = *v9++;
      v14 = v15;
      p_height = &CGRectNull.size.height;
      p_y = &CGRectNull.origin.y;
      p_size = &CGRectNull.size;
      v19 = v15 + 2;
      v20 = &v15[2].origin.y;
      v21 = &v15[2].size;
      v22 = &v15[2].size.height;
      if (v15)
      {
        p_size = v21;
        p_y = v20;
        p_height = v22;
      }
      else
      {
        v19 = &CGRectNull;
      }
      v23 = *(_QWORD *)p_height;
      x = v19->origin.x;
      v25 = *(_QWORD *)p_y;
      width = p_size->width;
      if (v14)
        v27 = (const CGAffineTransform *)&v14->origin.y;
      else
        v27 = &CGAffineTransformIdentity;
      v28 = *(_OWORD *)&v27->c;
      *(_OWORD *)&v227.a = *(_OWORD *)&v27->a;
      *(_OWORD *)&v227.c = v28;
      *(_OWORD *)&v227.tx = *(_OWORD *)&v27->tx;
      v231 = CGRectApplyAffineTransform(*(CGRect *)&x, &v227);
      v229.origin.x = v13;
      v229.origin.y = y;
      v229.size.width = v12;
      v229.size.height = height;
      v230 = CGRectUnion(v229, v231);
      v13 = v230.origin.x;
      y = v230.origin.y;
      v12 = v230.size.width;
      height = v230.size.height;
      --v8;
    }
    while (v8);
    v228 = v230;
  }
  v29 = PDFContentStreamCreate(*(_QWORD *)(a1 + 8), &v228);
  v36 = (uint64_t *)v29;
  if (v29)
  {
    v37 = *((_QWORD *)v29 + 1);
    v38 = *((_QWORD *)v29 + 14);
  }
  else
  {
    v37 = 0;
    v38 = 0;
  }
  v40 = *(_QWORD *)(a1 + 8);
  v39 = *(_QWORD *)(a1 + 16);
  if (!v39)
  {
    v39 = PDFXRefTableAddObject(*(_QWORD **)(v40 + 464));
    *(_QWORD *)(a1 + 16) = v39;
  }
  PDFDocumentBeginObject(v40, v39, v30, v31, v32, v33, v34, v35);
  PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"<<", v41, v42, v43, v44, v45, v46, v211);
  PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/Type /Mask", v47, v48, v49, v50, v51, v52, v212);
  PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/S /Luminosity", v53, v54, v55, v56, v57, v58, v213);
  PDFDocumentPrintReference(*(_QWORD *)(a1 + 8), (uint64_t)"/G %R", v37, v59, v60, v61, v62, v63);
  PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)">>", v64, v65, v66, v67, v68, v69, v214);
  PDFDocumentEndObject(*(_QWORD *)(a1 + 8), v70, v71, v72, v73, v74, v75, v76);
  PDFContentStreamBegin((uint64_t)v36, v77, v78, v79, v80, v81, v82, v83, v215);
  PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/Type /XObject", v84, v85, v86, v87, v88, v89, v216);
  PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/Subtype /Form", v90, v91, v92, v93, v94, v95, v217);
  PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/FormType 1", v96, v97, v98, v99, v100, v101, v218);
  PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/BBox %r", v102, v103, v104, v105, v106, v107, (uint64_t)&v228);
  PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/Matrix [1 0 0 1 0 0]", v108, v109, v110, v111, v112, v113, v219);
  PDFDocumentPrintReference(*(_QWORD *)(a1 + 8), (uint64_t)"/Resources %R", *(_QWORD *)(v38 + 16), v114, v115, v116, v117, v118);
  PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/Group <<", v119, v120, v121, v122, v123, v124, v220);
  PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/S /Transparency", v125, v126, v127, v128, v129, v130, v221);
  PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/CS /DeviceGray", v131, v132, v133, v134, v135, v136, v222);
  PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/I true", v137, v138, v139, v140, v141, v142, v223);
  PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/K false", v143, v144, v145, v146, v147, v148, v224);
  PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)">>", v149, v150, v151, v152, v153, v154, v225);
  PDFContentStreamBeginData(v36, v155, v156, v157, v158, v159, v160, v161, v226);
  v162 = CGGStateCreate();
  DeviceGray = CGColorSpaceCreateDeviceGray();
  v164 = CGColorCreate(DeviceGray, dbl_184F8E0A0);
  CGColorSpaceRelease(DeviceGray);
  CGGStateSetFillColor((uint64_t)v162, v164);
  if (v164)
    CFRelease(v164);
  if (*(_QWORD *)(a1 + 32))
  {
    v165 = 0;
    v166 = v162 + 24;
    do
    {
      v167 = *(_QWORD *)(a1 + 40 + 8 * v165);
      v168 = (const CGAffineTransform *)(v167 + 8);
      if (!v167)
        v168 = &CGAffineTransformIdentity;
      v169 = *(_OWORD *)&v168->a;
      v170 = *(_OWORD *)&v168->tx;
      *(_OWORD *)(v162 + 40) = *(_OWORD *)&v168->c;
      *(_OWORD *)(v162 + 56) = v170;
      *v166 = v169;
      v171 = &CGRectNull.size.height;
      v172 = &CGRectNull.origin.y;
      v173 = (const CGRect *)(v167 + 64);
      v174 = (CGFloat *)(v167 + 72);
      v175 = (CGFloat *)(v167 + 88);
      v176 = v167 == 0;
      if (v167)
        v177 = (CGSize *)(v167 + 80);
      else
        v177 = &CGRectNull.size;
      if (v176)
      {
        v178 = &CGRectNull;
      }
      else
      {
        v172 = v174;
        v178 = v173;
      }
      if (!v176)
        v171 = v175;
      CGGStateClipToRect((uint64_t)v162, v178->origin.x, *v172, v177->width, *v171);
      ++v165;
      v179 = *(_QWORD *)(a1 + 32);
    }
    while (v165 < v179);
    if (v179)
    {
      v180 = 0;
      do
      {
        v181 = *(_QWORD **)(a1 + 40 + 8 * v180);
        v182 = (const CGAffineTransform *)(v181 + 1);
        if (!v181)
          v182 = &CGAffineTransformIdentity;
        v183 = *(_OWORD *)&v182->a;
        v184 = *(_OWORD *)&v182->tx;
        *(_OWORD *)(v162 + 40) = *(_OWORD *)&v182->c;
        *(_OWORD *)(v162 + 56) = v184;
        *v166 = v183;
        if (v181)
        {
          v185 = *((double *)v181 + 8);
          v186 = *((double *)v181 + 9);
          v187 = *((double *)v181 + 10);
          v188 = *((double *)v181 + 11);
          v189 = (CGImage *)v181[7];
        }
        else
        {
          v189 = 0;
          v187 = 0.0;
          v186 = INFINITY;
          v185 = INFINITY;
          v188 = 0.0;
        }
        PDFContentStreamDrawImage((uint64_t)v36, (uint64_t)v162, v189, v185, v186, v187, v188);
        CGGStateSetCompositeOperation((uint64_t)v162, 13);
        ++v180;
      }
      while (v180 < *(_QWORD *)(a1 + 32));
    }
  }
  CGGStateRelease((uint64_t)v162);
  PDFContentStreamEndData((uint64_t)v36, v190, v191, v192, v193, v194, v195, v196);
  PDFContentStreamEnd((CFDataRef *)v36);
  PDFResourceSetEmit(v38, v197, v198, v199, v200, v201, v202, v203);
  PDFContentStreamRelease((uint64_t)v36, v204, v205, v206, v207, v208, v209, v210);
  *(_BYTE *)(a1 + 24) = 1;
LABEL_47:
  *a2 = 1;
}

void CGPDFGStateRelease(_QWORD *a1)
{
  if (a1)
  {
    CGPDFGStateReleaseProperties(a1);
    free(a1);
  }
}

__n128 CGPDFGStateGetCTM@<Q0>(const CGAffineTransform *a1@<X0>, uint64_t a2@<X8>)
{
  const CGAffineTransform *v2;
  __int128 v3;
  __n128 result;

  v2 = &CGAffineTransformIdentity;
  if (a1)
    v2 = a1;
  v3 = *(_OWORD *)&v2->c;
  *(_OWORD *)a2 = *(_OWORD *)&v2->a;
  *(_OWORD *)(a2 + 16) = v3;
  result = *(__n128 *)&v2->tx;
  *(__n128 *)(a2 + 32) = result;
  return result;
}

__n128 CGPDFGStateSetCTM(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  if (a1)
  {
    result = *(__n128 *)a2;
    v3 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v3;
    *(__n128 *)a1 = result;
  }
  return result;
}

double CGPDFGStateConcatCTM(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double result;
  double v12;
  double v13;
  double v14;
  double v15;

  if (a1)
  {
    v2 = a2[1];
    v3 = a2[2];
    v4 = a2[3];
    v5 = a2[4];
    v6 = a2[5];
    v7 = a1[1];
    v8 = a1[2];
    v9 = a1[3];
    v10 = v2 * v8 + *a2 * *a1;
    result = v2 * v9 + *a2 * v7;
    v12 = v4 * v8 + v3 * *a1;
    v13 = v4 * v9 + v3 * v7;
    v14 = a1[4] + v8 * v6 + v5 * *a1;
    v15 = v9 * v6 + v5 * v7 + a1[5];
    *a1 = v10;
    a1[1] = result;
    a1[2] = v12;
    a1[3] = v13;
    a1[4] = v14;
    a1[5] = v15;
  }
  return result;
}

BOOL CGPDFGStateHasPendingClip(_BOOL8 result)
{
  if (result)
    return *(_BYTE *)(result + 48) != 0;
  return result;
}

uint64_t CGPDFGStateSetHasPendingClip(uint64_t result, int a2)
{
  if (result)
  {
    *(_BYTE *)(result + 48) = a2;
    if (a2)
      *(_BYTE *)(result + 49) = 0;
  }
  return result;
}

BOOL CGPDFGStateHasPendingEOClip(_BOOL8 result)
{
  if (result)
    return *(_BYTE *)(result + 49) != 0;
  return result;
}

uint64_t CGPDFGStateSetHasPendingEOClip(uint64_t result, int a2)
{
  if (result)
  {
    *(_BYTE *)(result + 49) = a2;
    if (a2)
      *(_BYTE *)(result + 48) = 0;
  }
  return result;
}

char *CGPDFGStateGetTextObject(uint64_t a1)
{
  char *v2;

  if (!a1)
    return 0;
  v2 = *(char **)(a1 + 272);
  if (!v2)
  {
    v2 = (char *)malloc_type_calloc(1uLL, 0xB8uLL, 0x33BCE901uLL);
    __CFSetLastAllocationEventName();
    if (v2)
    {
      *(_QWORD *)v2 = 0;
      *((_QWORD *)v2 + 1) = 0;
      *((_QWORD *)v2 + 3) = 0;
      *((_QWORD *)v2 + 4) = 0;
      *((_DWORD *)v2 + 10) = 0;
      *((_QWORD *)v2 + 6) = 0;
      *((_QWORD *)v2 + 7) = 0;
      v2[64] = 1;
      *(CGAffineTransform *)(v2 + 120) = CGAffineTransformIdentity;
      *(CGAffineTransform *)(v2 + 72) = CGAffineTransformIdentity;
      *((_QWORD *)v2 + 21) = 0;
      *((_QWORD *)v2 + 22) = 0;
      *(_OWORD *)v2 = *(_OWORD *)(a1 + 72);
      *((_OWORD *)v2 + 1) = *(_OWORD *)(a1 + 88);
      CGPDFTextObjectSetFont((uint64_t)v2, *(CFTypeRef *)(a1 + 120));
      *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 128);
      CGPDFTextObjectSetTextDrawingMode((uint64_t)v2, *(_DWORD *)(a1 + 112));
      *((_QWORD *)v2 + 4) = *(_QWORD *)(a1 + 104);
      v2[64] = *(_BYTE *)(a1 + 136);
      *(_QWORD *)(a1 + 272) = v2;
    }
  }
  return v2;
}

double CGPDFGStateGetCharacterSpacing(uint64_t a1)
{
  if (a1)
    return *(double *)(a1 + 72);
  else
    return 0.0;
}

uint64_t CGPDFGStateSetCharacterSpacing(uint64_t result, double a2)
{
  double *v2;

  if (result)
  {
    *(double *)(result + 72) = a2;
    v2 = *(double **)(result + 272);
    if (v2)
      *v2 = a2;
  }
  return result;
}

double CGPDFGStateGetWordSpacing(uint64_t a1)
{
  if (a1)
    return *(double *)(a1 + 80);
  else
    return 0.0;
}

uint64_t CGPDFGStateSetWordSpacing(uint64_t result, double a2)
{
  uint64_t v2;

  if (result)
  {
    *(double *)(result + 80) = a2;
    v2 = *(_QWORD *)(result + 272);
    if (v2)
      *(double *)(v2 + 8) = a2;
  }
  return result;
}

double CGPDFGStateGetHorizontalScale(uint64_t a1)
{
  if (a1)
    return *(double *)(a1 + 88);
  else
    return 100.0;
}

uint64_t CGPDFGStateSetHorizontalScale(uint64_t result, double a2)
{
  uint64_t v2;

  if (result)
  {
    *(double *)(result + 88) = a2;
    v2 = *(_QWORD *)(result + 272);
    if (v2)
      *(double *)(v2 + 16) = a2;
  }
  return result;
}

double CGPDFGStateGetLeading(uint64_t a1)
{
  if (a1)
    return *(double *)(a1 + 96);
  else
    return 0.0;
}

uint64_t CGPDFGStateSetLeading(uint64_t result, double a2)
{
  uint64_t v2;

  if (result)
  {
    *(double *)(result + 96) = a2;
    v2 = *(_QWORD *)(result + 272);
    if (v2)
      *(double *)(v2 + 24) = a2;
  }
  return result;
}

double CGPDFGStateGetTextRise(uint64_t a1)
{
  if (a1)
    return *(double *)(a1 + 104);
  else
    return 0.0;
}

uint64_t CGPDFGStateSetTextRise(uint64_t result, double a2)
{
  uint64_t v2;

  if (result)
  {
    *(double *)(result + 104) = a2;
    v2 = *(_QWORD *)(result + 272);
    if (v2)
      *(double *)(v2 + 32) = a2;
  }
  return result;
}

uint64_t CGPDFGStateGetTextDrawingMode(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 112);
  return result;
}

uint64_t CGPDFGStateSetTextDrawingMode(uint64_t result, int a2)
{
  if (result)
  {
    *(_DWORD *)(result + 112) = a2;
    result = *(_QWORD *)(result + 272);
    if (result)
      return CGPDFTextObjectSetTextDrawingMode(result, a2);
  }
  return result;
}

uint64_t CGPDFGStateGetFont(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 120);
  return result;
}

void CGPDFGStateSetFont(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v4;
  uint64_t v5;

  if (a1)
  {
    v4 = *(CFTypeRef *)(a1 + 120);
    if (v4 != cf)
    {
      if (v4)
        CFRelease(v4);
      if (cf)
        CFRetain(cf);
      *(_QWORD *)(a1 + 120) = cf;
      v5 = *(_QWORD *)(a1 + 272);
      if (v5)
        CGPDFTextObjectSetFont(v5, cf);
    }
  }
}

double CGPDFGStateGetFontSize(uint64_t a1)
{
  if (a1)
    return *(double *)(a1 + 128);
  else
    return 0.0;
}

uint64_t CGPDFGStateSetFontSize(uint64_t result, double a2)
{
  uint64_t v2;

  if (result)
  {
    *(double *)(result + 128) = a2;
    v2 = *(_QWORD *)(result + 272);
    if (v2)
      *(double *)(v2 + 56) = a2;
  }
  return result;
}

BOOL CGPDFGStateGetTextKnockout(uint64_t a1)
{
  return !a1 || *(_BYTE *)(a1 + 136) != 0;
}

uint64_t CGPDFGStateSetTextKnockout(uint64_t result, char a2)
{
  if (result)
    *(_BYTE *)(result + 136) = a2;
  return result;
}

double CGPDFGStateGetLineWidth(uint64_t a1)
{
  if (a1)
    return *(double *)(a1 + 144);
  else
    return 1.0;
}

uint64_t CGPDFGStateSetLineWidth(uint64_t result, double a2)
{
  if (result)
    *(double *)(result + 144) = a2;
  return result;
}

uint64_t CGPDFGStateGetLineCap(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 152);
  return result;
}

uint64_t CGPDFGStateSetLineCap(uint64_t result, int a2)
{
  if (result)
    *(_DWORD *)(result + 152) = a2;
  return result;
}

uint64_t CGPDFGStateGetLineJoin(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 156);
  return result;
}

uint64_t CGPDFGStateSetLineJoin(uint64_t result, int a2)
{
  if (result)
    *(_DWORD *)(result + 156) = a2;
  return result;
}

double CGPDFGStateGetMiterLimit(uint64_t a1)
{
  if (a1)
    return *(double *)(a1 + 160);
  else
    return 10.0;
}

uint64_t CGPDFGStateSetMiterLimit(uint64_t result, double a2)
{
  if (result)
    *(double *)(result + 160) = a2;
  return result;
}

uint64_t CGPDFGStateGetDash(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 168);
  return result;
}

void CGPDFGStateSetDash(uint64_t a1, unsigned int *a2)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;

  if (a1)
  {
    v4 = *(unsigned int **)(a1 + 168);
    if (v4 != a2)
    {
      if (v4)
      {
        do
        {
          v5 = __ldxr(v4);
          v6 = v5 - 1;
        }
        while (__stxr(v6, v4));
        if (!v6)
          free(v4);
      }
      if (a2)
      {
        do
          v7 = __ldxr(a2);
        while (__stxr(v7 + 1, a2));
      }
      *(_QWORD *)(a1 + 168) = a2;
    }
  }
}

uint64_t CGPDFGStateGetRenderingIntent(uint64_t a1)
{
  if (a1)
    return *(unsigned int *)(a1 + 176);
  else
    return 2;
}

uint64_t CGPDFGStateSetRenderingIntent(uint64_t result, int a2)
{
  if (result)
    *(_DWORD *)(result + 176) = a2;
  return result;
}

BOOL CGPDFGStateGetStrokeAdjust(_BOOL8 result)
{
  if (result)
    return *(_BYTE *)(result + 180) != 0;
  return result;
}

uint64_t CGPDFGStateSetStrokeAdjust(uint64_t result, char a2)
{
  if (result)
    *(_BYTE *)(result + 180) = a2;
  return result;
}

uint64_t CGPDFGStateGetBlendMode(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 184);
  return result;
}

uint64_t CGPDFGStateSetBlendMode(uint64_t result, int a2)
{
  if (result)
    *(_DWORD *)(result + 184) = a2;
  return result;
}

uint64_t CGPDFGStateSetBlendModeAsObject(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = result;
    result = CGPDFBlendModeFromCGPDFObject(a2);
    if ((_DWORD)result != -1)
      *(_DWORD *)(v2 + 184) = result;
  }
  return result;
}

uint64_t CGPDFBlendModeFromCGPDFObject(uint64_t a1)
{
  int v1;
  CGPDFArray *v3;
  uint64_t v4;
  size_t v5;
  char *value;

  if (!a1)
    return 0xFFFFFFFFLL;
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 != 7)
  {
    if (v1 == 5)
      return get_blend_mode_for_name(*(const char **)(a1 + 32));
    return 0xFFFFFFFFLL;
  }
  v3 = *(CGPDFArray **)(a1 + 32);
  if (!v3)
    return 0xFFFFFFFFLL;
  v4 = *((_QWORD *)v3 + 2);
  if (!v4)
    return 0xFFFFFFFFLL;
  v5 = 0;
  value = 0;
  while (!CGPDFArrayGetName(v3, v5, (const char **)&value))
  {
    if (v4 == ++v5)
      return 0xFFFFFFFFLL;
  }
  return get_blend_mode_for_name(value);
}

uint64_t get_blend_mode_for_name(const char *a1)
{
  uint64_t result;

  result = strcmp(a1, "Normal");
  if ((_DWORD)result)
  {
    result = strcmp(a1, "Compatible");
    if ((_DWORD)result)
    {
      if (!strcmp(a1, "Multiply"))
      {
        return 1;
      }
      else if (!strcmp(a1, "Screen"))
      {
        return 2;
      }
      else if (!strcmp(a1, "Overlay"))
      {
        return 3;
      }
      else if (!strcmp(a1, "Darken"))
      {
        return 4;
      }
      else if (!strcmp(a1, "Lighten"))
      {
        return 5;
      }
      else if (!strcmp(a1, "ColorDodge"))
      {
        return 6;
      }
      else if (!strcmp(a1, "ColorBurn"))
      {
        return 7;
      }
      else if (!strcmp(a1, "HardLight"))
      {
        return 8;
      }
      else if (!strcmp(a1, "SoftLight"))
      {
        return 9;
      }
      else if (!strcmp(a1, "Difference"))
      {
        return 10;
      }
      else if (!strcmp(a1, "Exclusion"))
      {
        return 11;
      }
      else if (!strcmp(a1, "Hue"))
      {
        return 12;
      }
      else if (!strcmp(a1, "Saturation"))
      {
        return 13;
      }
      else if (!strcmp(a1, "Color"))
      {
        return 14;
      }
      else if (!strcmp(a1, "Luminosity"))
      {
        return 15;
      }
      else
      {
        return 0xFFFFFFFFLL;
      }
    }
  }
  return result;
}

uint64_t CGPDFGStateGetSoftMask(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 192);
  return result;
}

void CGPDFGStateSetSoftMask(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v4;

  if (a1)
  {
    v4 = *(CFTypeRef *)(a1 + 192);
    if (v4 != cf)
    {
      if (v4)
        CFRelease(v4);
      if (cf)
        CFRetain(cf);
      *(_QWORD *)(a1 + 192) = cf;
    }
  }
}

double CGPDFGStateGetFillAlpha(uint64_t a1)
{
  if (a1)
    return *(double *)(a1 + 200);
  else
    return 1.0;
}

double CGPDFGStateGetStrokeAlpha(uint64_t a1)
{
  if (a1)
    return *(double *)(a1 + 208);
  else
    return 1.0;
}

BOOL CGPDFGStateGetAlphaIsShape(_BOOL8 result)
{
  if (result)
    return *(_BYTE *)(result + 216) != 0;
  return result;
}

uint64_t CGPDFGStateSetAlphaIsShape(uint64_t result, char a2)
{
  if (result)
    *(_BYTE *)(result + 216) = a2;
  return result;
}

BOOL CGPDFGStateGetFillOverprint(_BOOL8 result)
{
  if (result)
    return *(_BYTE *)(result + 217) != 0;
  return result;
}

uint64_t CGPDFGStateSetFillOverprint(uint64_t result, char a2)
{
  if (result)
    *(_BYTE *)(result + 217) = a2;
  return result;
}

BOOL CGPDFGStateGetStrokeOverprint(_BOOL8 result)
{
  if (result)
    return *(_BYTE *)(result + 218) != 0;
  return result;
}

uint64_t CGPDFGStateSetStrokeOverprint(uint64_t result, char a2)
{
  if (result)
    *(_BYTE *)(result + 218) = a2;
  return result;
}

uint64_t CGPDFGStateGetOverprintMode(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 220);
  return result;
}

uint64_t CGPDFGStateSetOverprintMode(uint64_t result, int a2)
{
  if (result)
    *(_DWORD *)(result + 220) = a2;
  return result;
}

uint64_t CGPDFGStateGetBlackGeneration(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 224);
  return result;
}

void CGPDFGStateSetBlackGeneration(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v4;

  if (a1)
  {
    v4 = *(CFTypeRef *)(a1 + 224);
    if (v4 != cf)
    {
      if (v4)
        CFRelease(v4);
      if (cf)
        CFRetain(cf);
      *(_QWORD *)(a1 + 224) = cf;
    }
  }
}

uint64_t CGPDFGStateGetUndercolorRemoval(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 232);
  return result;
}

void CGPDFGStateSetUndercolorRemoval(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v4;

  if (a1)
  {
    v4 = *(CFTypeRef *)(a1 + 232);
    if (v4 != cf)
    {
      if (v4)
        CFRelease(v4);
      if (cf)
        CFRetain(cf);
      *(_QWORD *)(a1 + 232) = cf;
    }
  }
}

uint64_t CGPDFGStateGetTransferFunctions(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 240);
  return result;
}

_QWORD *CGPDFGStateSetTransferFunctions(_QWORD *result, _QWORD *cf)
{
  _QWORD *v3;

  if (result)
  {
    v3 = result;
    if (!cf || (result = (_QWORD *)CFArrayGetCount((CFArrayRef)cf), result == (_QWORD *)4))
    {
      result = (_QWORD *)v3[30];
      if (result != cf)
      {
        if (result)
          CFRelease(result);
        if (cf)
          result = CFRetain(cf);
        else
          result = 0;
        v3[30] = result;
      }
    }
  }
  return result;
}

uint64_t CGPDFGStateGetHalftone()
{
  return 0;
}

double CGPDFGStateGetFlatness(uint64_t a1)
{
  if (a1)
    return *(double *)(a1 + 248);
  else
    return 0.0;
}

uint64_t CGPDFGStateSetFlatness(uint64_t result, double a2)
{
  if (result)
    *(double *)(result + 248) = a2;
  return result;
}

double CGPDFGStateGetSmoothness(uint64_t a1)
{
  if (a1)
    return *(double *)(a1 + 256);
  else
    return 0.0;
}

uint64_t CGPDFGStateSetSmoothness(uint64_t result, double a2)
{
  if (result)
    *(double *)(result + 256) = a2;
  return result;
}

uint64_t CGPDFGStateGetShadowStyle(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 264);
  return result;
}

void CGPDFGStateSetShadowStyle(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v4;

  if (a1)
  {
    v4 = *(CFTypeRef *)(a1 + 264);
    if (v4 != cf)
    {
      if (v4)
        CFRelease(v4);
      if (cf)
        CFRetain(cf);
      *(_QWORD *)(a1 + 264) = cf;
    }
  }
}

void ***std::back_insert_iterator<std::vector<std::pair<unsigned long,CFRange>>>::operator=[abi:se180100](void ***a1, __int128 *a2)
{
  void **v4;
  char *v5;
  char *v6;
  __int128 v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  char *v18;
  char *v19;
  __int128 v20;

  v4 = *a1;
  v5 = (char *)(*a1)[1];
  v6 = (char *)(*a1)[2];
  if (v5 < v6)
  {
    if (v5)
    {
      v7 = *a2;
      *((_QWORD *)v5 + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v5 = v7;
      v8 = v5 + 24;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*v4) >> 3);
  v10 = v9 + 1;
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_19;
  v11 = 0xAAAAAAAAAAAAAAABLL * ((v6 - (_BYTE *)*v4) >> 3);
  if (2 * v11 > v10)
    v10 = 2 * v11;
  if (v11 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v10;
  if (!v12
    || (v13 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<std::vector<ClipperLib::IntPoint>>>(v12)) == 0)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
  }
  v15 = &v13[24 * v14];
  v16 = &v13[24 * v9];
  v17 = *a2;
  *((_QWORD *)v16 + 2) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v16 = v17;
  v8 = v16 + 24;
  v19 = (char *)*v4;
  v18 = (char *)v4[1];
  if (v18 != *v4)
  {
    do
    {
      v20 = *(_OWORD *)(v18 - 24);
      *((_QWORD *)v16 - 1) = *((_QWORD *)v18 - 1);
      *(_OWORD *)(v16 - 24) = v20;
      v16 -= 24;
      v18 -= 24;
    }
    while (v18 != v19);
    v18 = (char *)*v4;
  }
  *v4 = v16;
  v4[1] = v8;
  v4[2] = v15;
  if (v18)
    operator delete(v18);
LABEL_17:
  v4[1] = v8;
  return a1;
}

void Selection::cacheRectsAndTransforms(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t *v5;
  int64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  double *v10;
  double v11;
  uint64_t v12;
  __double2 v13;
  double v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  BOOL v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t *v39;

  v2 = this + 23;
  os_unfair_lock_lock(this + 23);
  if (LOBYTE(this[22]._os_unfair_lock_opaque))
  {
    LOBYTE(this[22]._os_unfair_lock_opaque) = 0;
    if (*(_QWORD *)&this[4]._os_unfair_lock_opaque != *(_QWORD *)&this[6]._os_unfair_lock_opaque)
    {
      CGPDFPageCopyPageLayoutWithCTLD(*(_QWORD *)&this->_os_unfair_lock_opaque, 1);
      v4 = v3;
      v5 = *(unint64_t **)&this[4]._os_unfair_lock_opaque;
      v38 = *(unint64_t **)&this[6]._os_unfair_lock_opaque;
      if (v5 != v38)
      {
        while (2)
        {
          v7 = *v5;
          v6 = v5[1];
          v39 = v5;
          v8 = v5[2] + v6;
          do
          {
            v9 = v4[6];
            if (0x8E38E38E38E38E39 * ((v4[7] - v9) >> 3) <= v7)
              goto LABEL_37;
            v10 = (double *)(v9 + 72 * v7);
            v11 = *v10;
            v12 = *((_QWORD *)v10 + 1);
            v13 = __sincos_stret(v10[7]);
            v14 = -v13.__sinval;
            v15 = *(_QWORD *)&this[18]._os_unfair_lock_opaque;
            v16 = *(_QWORD *)&this[20]._os_unfair_lock_opaque;
            if (v15 >= v16)
            {
              v18 = *(_QWORD *)&this[16]._os_unfair_lock_opaque;
              v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v15 - v18) >> 4);
              v20 = v19 + 1;
              if (v19 + 1 > 0x333333333333333)
                std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
              v21 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v16 - v18) >> 4);
              if (2 * v21 > v20)
                v20 = 2 * v21;
              if (v21 >= 0x199999999999999)
                v22 = 0x333333333333333;
              else
                v22 = v20;
              if (!v22)
                goto LABEL_37;
              v23 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<std::pair<CGRect,CGAffineTransform>>>(v22);
              if (!v23)
                goto LABEL_37;
              v25 = &v23[80 * v19];
              *(CGRect *)v25 = CGRectNull;
              *((_QWORD *)v25 + 4) = *(_QWORD *)&v13.__cosval;
              *((_QWORD *)v25 + 5) = *(_QWORD *)&v13.__sinval;
              *((double *)v25 + 6) = v14;
              *((_QWORD *)v25 + 7) = *(_QWORD *)&v13.__cosval;
              *((_QWORD *)v25 + 8) = 0;
              *((_QWORD *)v25 + 9) = 0;
              v27 = *(char **)&this[16]._os_unfair_lock_opaque;
              v26 = *(char **)&this[18]._os_unfair_lock_opaque;
              v28 = v25;
              if (v26 != v27)
              {
                do
                {
                  *((_OWORD *)v28 - 5) = *((_OWORD *)v26 - 5);
                  v29 = *((_OWORD *)v26 - 4);
                  v30 = *((_OWORD *)v26 - 3);
                  v31 = *((_OWORD *)v26 - 1);
                  *((_OWORD *)v28 - 2) = *((_OWORD *)v26 - 2);
                  *((_OWORD *)v28 - 1) = v31;
                  *((_OWORD *)v28 - 4) = v29;
                  *((_OWORD *)v28 - 3) = v30;
                  v28 -= 80;
                  v26 -= 80;
                }
                while (v26 != v27);
                v26 = *(char **)&this[16]._os_unfair_lock_opaque;
              }
              v17 = v25 + 80;
              *(_QWORD *)&this[16]._os_unfair_lock_opaque = v28;
              *(_QWORD *)&this[18]._os_unfair_lock_opaque = v25 + 80;
              *(_QWORD *)&this[20]._os_unfair_lock_opaque = &v23[80 * v24];
              if (v26)
                operator delete(v26);
            }
            else
            {
              if (!v15)
                goto LABEL_37;
              *(CGRect *)v15 = CGRectNull;
              *(double *)(v15 + 32) = v13.__cosval;
              *(double *)(v15 + 40) = v13.__sinval;
              *(double *)(v15 + 48) = v14;
              *(double *)(v15 + 56) = v13.__cosval;
              *(_QWORD *)(v15 + 64) = 0;
              *(_QWORD *)(v15 + 72) = 0;
              v17 = (char *)(v15 + 80);
            }
            *(_QWORD *)&this[18]._os_unfair_lock_opaque = v17;
            v32 = v6 < v8;
            if (v6 < v8)
            {
              v33 = v12 + *(_QWORD *)&v11;
              if (v6 < v33)
              {
                v34 = v4[15];
                v35 = v4[16] - v34;
                if (v6 <= (unint64_t)(v35 >> 5))
                  v36 = v35 >> 5;
                else
                  v36 = v6;
                v37 = v34 + 32 * v6 + 16;
                while (v36 != v6)
                {
                  *(CGRect *)(v17 - 80) = CGRectUnion(*(CGRect *)(v17 - 80), *(CGRect *)(v37 - 16));
                  v32 = ++v6 < v8;
                  if (v6 < v8)
                  {
                    v37 += 32;
                    if (v6 < v33)
                      continue;
                  }
                  goto LABEL_31;
                }
LABEL_37:
                __break(1u);
                return;
              }
            }
LABEL_31:
            ++v7;
          }
          while (v32);
          v5 = v39 + 3;
          if (v39 + 3 != v38)
            continue;
          break;
        }
      }
      if (v4)
        CFRelease(v4);
    }
  }
  os_unfair_lock_unlock(v2);
}

void sub_184AE96CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, os_unfair_lock_t lock, uint64_t a10, uint64_t a11, const void *a12)
{
  applesauce::CF::ObjectRef<CGPDFPageLayout *>::~ObjectRef(&a12);
  os_unfair_lock_unlock(lock);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:se180100]<std::allocator<std::pair<CGRect,CGAffineTransform>>>(unint64_t a1)
{
  if (a1 >= 0x333333333333334)
    std::__throw_bad_array_new_length[abi:se180100]();
  return operator new(80 * a1);
}

const void **applesauce::CF::ObjectRef<CGPDFPageLayout *>::~ObjectRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void Selection::cacheStringRanges(Selection *this)
{
  void **v2;
  uint64_t v3;
  _QWORD *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27[2];
  _QWORD v28[7];
  __int128 v29;
  uint64_t v30;
  __n128 (*v31)(__n128 *, __n128 *);
  uint64_t (*v32)();
  const char *v33;
  __int128 v34;

  if (*((_QWORD *)this + 2) != *((_QWORD *)this + 3))
  {
    v2 = (void **)((char *)this + 40);
    if (*((_QWORD *)this + 6) == *((_QWORD *)this + 5))
    {
      CGPDFPageCopyPageLayoutWithCTLD(*(_QWORD *)this, 1);
      v4 = (_QWORD *)v3;
      v27[0] = v2;
      v27[1] = (void **)v3;
      if (!*(_BYTE *)(v3 + 24))
      {
        v19 = *((_QWORD *)this + 2);
        v20 = *((_QWORD *)this + 3);
        while (v19 != v20)
        {
          v21 = *(_QWORD *)(v19 + 8);
          v22 = v4[21];
          v23 = (v4[22] - v22) >> 3;
          if (v23 <= v21)
            std::vector<unsigned long>::__throw_out_of_range[abi:se180100]();
          v24 = *(_QWORD *)(v19 + 16) + v21;
          if (v23 <= v24)
            std::vector<unsigned long>::__throw_out_of_range[abi:se180100]();
          v25 = *(_QWORD *)(v22 + 8 * v21);
          v26 = *(_QWORD *)(v22 + 8 * v24) - v25;
          *(_QWORD *)&v29 = v25;
          *((_QWORD *)&v29 + 1) = v26;
          std::back_insert_iterator<std::vector<CFRange>>::operator=[abi:se180100](v27, &v29);
          v19 += 24;
        }
LABEL_34:
        CFRelease(v4);
        return;
      }
      v5 = objc_alloc_init(MEMORY[0x1E0CB3788]);
      v7 = *((_QWORD *)this + 2);
      v6 = *((_QWORD *)this + 3);
      while (v7 != v6)
      {
        v8 = *(_QWORD *)(v7 + 16);
        if (v8 >= 1)
        {
          v9 = *(_QWORD *)(v7 + 8);
          v10 = v8 + v9;
          v12 = v4[12];
          v11 = v4[13];
          while (1)
          {
            if (v9 >= (v11 - v12) >> 3)
              goto LABEL_27;
            if (*(_QWORD *)(v12 + 8 * v9))
              break;
LABEL_20:
            if ((uint64_t)++v9 >= v10)
              goto LABEL_21;
          }
          v13 = 0;
          while (1)
          {
            v14 = v4[21];
            if (v9 >= (v4[22] - v14) >> 3)
              std::vector<unsigned long>::__throw_out_of_range[abi:se180100]();
            v15 = (_QWORD *)v4[39];
            v16 = (_QWORD *)v4[40];
            if (v15 == v16)
            {
              v18 = (_QWORD *)v4[39];
            }
            else
            {
              v17 = *(_QWORD *)(v14 + 8 * v9) + v13;
              v18 = (_QWORD *)v4[39];
              while (*v18 != v17)
              {
                if (++v18 == v16)
                {
                  v18 = (_QWORD *)v4[40];
                  break;
                }
              }
            }
            objc_msgSend(v5, "addIndex:", v18 - v15);
            v12 = v4[12];
            v11 = v4[13];
            if (v9 >= (v11 - v12) >> 3)
              break;
            if ((unint64_t)++v13 >= *(_QWORD *)(v12 + 8 * v9))
              goto LABEL_20;
          }
LABEL_27:
          std::vector<unsigned long>::__throw_out_of_range[abi:se180100]();
        }
LABEL_21:
        v7 += 24;
      }
      *(_QWORD *)&v29 = 0;
      *((_QWORD *)&v29 + 1) = &v29;
      v30 = 0x4012000000;
      v31 = __Block_byref_object_copy__1045;
      v32 = __Block_byref_object_dispose__1046;
      v33 = "";
      v34 = xmmword_185004A10;
      v28[0] = MEMORY[0x1E0C809B0];
      v28[1] = 3221225472;
      v28[2] = ___ZNK10PageLayout31ConvertTextRangesToStringRangesIRNSt3__16ranges14transform_viewB10llvm18_nuaINS2_8ref_viewINS1_6vectorINS1_4pairIm7CFRangeEENS1_9allocatorIS8_EEEEEEZN9Selection17cacheStringRangesEvE3__0EENS1_20back_insert_iteratorINS5_IS7_NS9_IS7_EEEEEEEEvOT_OT0__block_invoke;
      v28[3] = &unk_1E165F018;
      v28[4] = &v29;
      v28[5] = v4 + 2;
      v28[6] = v27;
      objc_msgSend(v5, "enumerateRangesUsingBlock:", v28);
      if (*(_QWORD *)(*((_QWORD *)&v29 + 1) + 48) != -1)
        std::back_insert_iterator<std::vector<CFRange>>::operator=[abi:se180100](v27, (_OWORD *)(*((_QWORD *)&v29 + 1) + 48));
      _Block_object_dispose(&v29, 8);

      if (v4)
        goto LABEL_34;
    }
  }
}

void sub_184AE9A80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  JUMPOUT(0x184AE9A90);
}

void std::vector<unsigned long>::__throw_out_of_range[abi:se180100]()
{
  std::__throw_out_of_range[abi:se180100]("vector");
}

void ***std::back_insert_iterator<std::vector<CFRange>>::operator=[abi:se180100](void ***a1, _OWORD *a2)
{
  void **v4;
  _OWORD *v5;
  unint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;

  v4 = *a1;
  v5 = (*a1)[1];
  v6 = (unint64_t)(*a1)[2];
  if ((unint64_t)v5 < v6)
  {
    if (v5)
    {
      *v5 = *a2;
      v7 = v5 + 1;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  v8 = ((char *)v5 - (_BYTE *)*v4) >> 4;
  v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) >> 60)
    goto LABEL_19;
  v10 = v6 - (_QWORD)*v4;
  if (v10 >> 3 > v9)
    v9 = v10 >> 3;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
    v11 = 0xFFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (!v11 || (v12 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<CGPoint>>(v11)) == 0)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
  }
  v14 = &v12[16 * v13];
  v15 = &v12[16 * v8];
  *(_OWORD *)v15 = *a2;
  v7 = v15 + 16;
  v17 = (char *)*v4;
  v16 = (char *)v4[1];
  if (v16 != *v4)
  {
    do
    {
      *((_OWORD *)v15 - 1) = *((_OWORD *)v16 - 1);
      v15 -= 16;
      v16 -= 16;
    }
    while (v16 != v17);
    v16 = (char *)*v4;
  }
  *v4 = v15;
  v4[1] = v7;
  v4[2] = v14;
  if (v16)
    operator delete(v16);
LABEL_17:
  v4[1] = v7;
  return a1;
}

__n128 __Block_byref_object_copy__1045(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

void std::__throw_out_of_range[abi:se180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:se180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E1620B30, MEMORY[0x1E0DE42E0]);
}

void sub_184AE9C9C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:se180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

void Selection::Normalize(Selection *this)
{
  PageLayout **v2;
  PageLayout **v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  PageLayout *v11;
  unint64_t v12;
  uint64_t v13;
  PageLayout *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  PageLayout *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  PageLayout *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  unint64_t LineIndex;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  __int128 v42;
  void *__p;

  CGPDFPageCopyPageLayoutWithCTLD(*(_QWORD *)this, 1);
  v3 = v2;
  v6 = *((_QWORD *)this + 2);
  v5 = *((_QWORD *)this + 3);
  v4 = (_QWORD *)((char *)this + 16);
  if (v6 == v5)
  {
    __p = (void *)*((_QWORD *)this + 2);
    *v4 = 0;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
LABEL_53:
    if (__p)
      operator delete(__p);
    if (v3)
      CFRelease(v3);
  }
  else
  {
    v7 = (v2[16] - v2[15]) >> 5;
    v8 = *((_QWORD *)this + 2);
    while (1)
    {
      v9 = *(_QWORD *)(v8 + 8);
      v10 = v9 >= 1 && v9 < v7;
      if (v10)
        break;
LABEL_16:
      v16 = *(_QWORD *)(v8 + 16);
      v17 = v16 + v9;
      if (v16 + v9 < v7 && (v17 & 0x8000000000000000) == 0)
      {
        v18 = v2[12];
        if ((v2[13] - v18) >> 3 <= v17)
          v19 = v16 + v9;
        else
          v19 = (v2[13] - v18) >> 3;
        v20 = (32 * v17) | 0x10;
        v21 = (uint64_t)v18 + 8 * v9;
        v22 = v9 - v19;
        while (v22 + v16)
        {
          if (!*(_QWORD *)(v21 + 8 * v16))
            goto LABEL_62;
          v23 = v2[18];
          if (v9 + v16 >= (unint64_t)((v2[19] - v23) >> 5))
            goto LABEL_59;
          if (*(double *)((char *)v23 + v20) == 0.0)
          {
LABEL_62:
            *(_QWORD *)(v8 + 16) = ++v16;
            v20 += 32;
            if (v9 + v16 < v7)
              continue;
          }
          goto LABEL_27;
        }
        goto LABEL_59;
      }
LABEL_27:
      v8 += 24;
      if (v8 == v5)
      {
        v24 = 0;
        v25 = -1;
        *v4 = 0;
        *((_QWORD *)this + 3) = 0;
        *((_QWORD *)this + 4) = 0;
        __p = (void *)v6;
        while (1)
        {
          v27 = (_OWORD *)(v6 + 8);
          v26 = *(_QWORD *)(v6 + 8);
          if (v25 >= v26)
          {
            v31 = *(_QWORD *)(v6 + 16) + v26;
            if (v31 > v25)
            {
              if ((char *)*v4 == v24)
                goto LABEL_59;
              *((_QWORD *)v24 - 1) += v31 - *((_QWORD *)v24 - 2);
              v25 = v31;
            }
          }
          else
          {
            LineIndex = PageLayout::getLineIndex(v3[6], v3[7], v26);
            v29 = LineIndex;
            v30 = *((_QWORD *)this + 4);
            if ((unint64_t)v24 >= v30)
            {
              v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v24[-*v4] >> 3);
              v33 = v32 + 1;
              if (v32 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
              v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - *v4) >> 3);
              if (2 * v34 > v33)
                v33 = 2 * v34;
              if (v34 >= 0x555555555555555)
                v35 = 0xAAAAAAAAAAAAAAALL;
              else
                v35 = v33;
              if (!v35)
                goto LABEL_59;
              v36 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<std::vector<ClipperLib::IntPoint>>>(v35);
              if (!v36)
                goto LABEL_59;
              v38 = &v36[24 * v32];
              *(_QWORD *)v38 = v29;
              *(_OWORD *)(v38 + 8) = *v27;
              v40 = (char *)*((_QWORD *)this + 2);
              v39 = (char *)*((_QWORD *)this + 3);
              v41 = v38;
              if (v39 != v40)
              {
                do
                {
                  v42 = *(_OWORD *)(v39 - 24);
                  *((_QWORD *)v41 - 1) = *((_QWORD *)v39 - 1);
                  *(_OWORD *)(v41 - 24) = v42;
                  v41 -= 24;
                  v39 -= 24;
                }
                while (v39 != v40);
                v39 = (char *)*v4;
              }
              v24 = v38 + 24;
              *((_QWORD *)this + 2) = v41;
              *((_QWORD *)this + 3) = v38 + 24;
              *((_QWORD *)this + 4) = &v36[24 * v37];
              if (v39)
                operator delete(v39);
            }
            else
            {
              if (!v24)
                goto LABEL_59;
              *(_QWORD *)v24 = LineIndex;
              *(_OWORD *)(v24 + 8) = *v27;
              v24 += 24;
            }
            *((_QWORD *)this + 3) = v24;
          }
          v6 += 24;
          if (v6 == v5)
            goto LABEL_53;
        }
      }
    }
    v11 = v2[12];
    v12 = (v2[13] - v11) >> 3;
    v13 = (32 * v9) | 0x10;
    while (v12 > v9)
    {
      if (*((_QWORD *)v11 + v9))
      {
        v14 = v2[18];
        if (v9 >= (unint64_t)((v2[19] - v14) >> 5))
          break;
        if (*(double *)((char *)v14 + v13) != 0.0)
          goto LABEL_16;
      }
      v13 -= 32;
      v10 = v9-- <= 1;
      v15 = *(_QWORD *)(v8 + 16) + 1;
      *(_QWORD *)(v8 + 8) = v9;
      *(_QWORD *)(v8 + 16) = v15;
      if (v10)
      {
        v9 = 0;
        goto LABEL_16;
      }
    }
LABEL_59:
    __break(1u);
  }
}

void sub_184AE9FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, const void *a10)
{
  if (__p)
    operator delete(__p);
  applesauce::CF::ObjectRef<CGPDFPageLayout *>::~ObjectRef(&a10);
  _Unwind_Resume(a1);
}

void Selection::CreateSelectionsByLine(void)const::$_0::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const void **v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;

  if (**(_QWORD **)(a1 + 16) != a2)
  {
    v8 = *(const void ***)a1;
    v9 = **(void ***)(a1 + 8);
    objc_msgSend(**(id **)(a1 + 24), "addObject:", v9);

    **(_QWORD **)(a1 + 8) = CGPDFSelectionCreateWithPage(*v8);
    **(_QWORD **)(a1 + 16) = a2;
  }
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD **)v10;
  v12 = *(_QWORD **)(*(_QWORD *)v10 + 192);
  v13 = *(_QWORD *)(*(_QWORD *)v10 + 200);
  if ((unint64_t)v12 < v13)
  {
    if (v12)
    {
      *v12 = a2;
      v12[1] = a3;
      v14 = v12 + 3;
      v12[2] = a4;
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  v15 = v11[23];
  v16 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v12 - v15) >> 3);
  v17 = v16 + 1;
  if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_21;
  v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - v15) >> 3);
  if (2 * v18 > v17)
    v17 = 2 * v18;
  if (v18 >= 0x555555555555555)
    v19 = 0xAAAAAAAAAAAAAAALL;
  else
    v19 = v17;
  if (!v19
    || (v20 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<std::vector<ClipperLib::IntPoint>>>(v19)) == 0)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
  }
  v22 = &v20[24 * v21];
  v23 = &v20[24 * v16];
  *(_QWORD *)v23 = a2;
  *((_QWORD *)v23 + 1) = a3;
  *((_QWORD *)v23 + 2) = a4;
  v14 = v23 + 24;
  v25 = (char *)v11[23];
  v24 = (char *)v11[24];
  if (v24 != v25)
  {
    do
    {
      v26 = *(_OWORD *)(v24 - 24);
      *((_QWORD *)v23 - 1) = *((_QWORD *)v24 - 1);
      *(_OWORD *)(v23 - 24) = v26;
      v23 -= 24;
      v24 -= 24;
    }
    while (v24 != v25);
    v24 = (char *)v11[23];
  }
  v11[23] = v23;
  v11[24] = v14;
  v11[25] = v22;
  if (v24)
    operator delete(v24);
LABEL_19:
  v11[24] = v14;
}

void sub_184AEA174(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void PDFWritePath(uint64_t a1, _BYTE **a2, uint64_t a3, uint64_t a4, const CGPath *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  double v23;
  __int16 v24;
  double v25;
  double v26;
  int v27;
  int v28;
  int v29;
  double v30;
  double v31;
  uint64_t FillColor;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double Alpha;
  double v41;
  int v42;
  const CGAffineTransform *v43;
  float64x2_t v44;
  uint64_t StrokeColor;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const CGAffineTransform *v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  float64x2_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  CGAffineTransform v121;
  CGAffineTransform v122;
  float64x2_t v123;
  float64x2_t v124;
  __int128 v125;

  v9 = a4;
  PDFWriterAnnotate((uint64_t)a2, (uint64_t)"%s: BEGIN: %s", a3, a4, (uint64_t)a5, a6, a7, a8, (uint64_t)"PDFWritePath");
  if (a1)
    v13 = *(_QWORD *)(a1 + 104);
  else
    v13 = 0;
  PDFGStateSetClipStack(v13, *(__CFArray **)(a3 + 112));
  if (v9 < 2)
  {
    v21 = 0;
    v20 = 1;
    goto LABEL_20;
  }
  if (v9 - 3 >= 2)
  {
    v20 = 0;
    v21 = 0;
    if (v9 != 2)
      goto LABEL_20;
  }
  else
  {
    v20 = 1;
  }
  v22 = *(_QWORD *)(a3 + 128);
  v23 = *(double *)(v22 + 8);
  if (v23 == -1.0905473e16)
    v23 = 0.0;
  if (*(double *)(v13 + 48) != v23)
  {
    *(double *)(v13 + 48) = v23;
    addEmitFunction(v13, emitLineWidthChange);
    v22 = *(_QWORD *)(a3 + 128);
  }
  v24 = *(_WORD *)(v22 + 2);
  if (*(_DWORD *)(v13 + 56) != (char)v24)
  {
    *(_DWORD *)(v13 + 56) = (char)v24;
    addEmitFunction(v13, emitLineCapChange);
    v22 = *(_QWORD *)(a3 + 128);
    v24 = *(_WORD *)(v22 + 2);
  }
  if (*(_DWORD *)(v13 + 60) != v24 >> 8)
  {
    *(_DWORD *)(v13 + 60) = v24 >> 8;
    addEmitFunction(v13, emitLineJoinChange);
    v22 = *(_QWORD *)(a3 + 128);
  }
  v25 = *(double *)(v22 + 16);
  if (*(double *)(v13 + 64) != v25)
  {
    *(double *)(v13 + 64) = v25;
    addEmitFunction(v13, emitMiterLimitChange);
    v22 = *(_QWORD *)(a3 + 128);
  }
  PDFGStateSetLineDash(v13, *(unsigned int **)(v22 + 32));
  v21 = 1;
LABEL_20:
  v26 = *(double *)(*(_QWORD *)(a3 + 144) + 8);
  if (*(double *)(v13 + 88) != v26)
  {
    *(double *)(v13 + 88) = v26;
    addEmitFunction(v13, emitFlatnessChange);
  }
  v27 = *(unsigned __int8 *)(*(_QWORD *)(a3 + 128) + 1);
  if (*(unsigned __int8 *)(v13 + 96) != v27)
  {
    *(_BYTE *)(v13 + 96) = v27;
    addEmitFunction(v13, emitStrokeAdjustChange);
  }
  v28 = *(_DWORD *)(*(_QWORD *)(a3 + 120) + 4);
  if ((v28 & 0xF0000) != 0)
    v29 = v28 << 12 >> 28;
  else
    v29 = 2;
  if (*(_DWORD *)(v13 + 80) != v29)
  {
    *(_DWORD *)(v13 + 80) = v29;
    addEmitFunction(v13, emitRenderingIntentChange);
  }
  v30 = *(double *)(*(_QWORD *)(a3 + 144) + 16);
  if (*(double *)(v13 + 224) != v30)
  {
    *(double *)(v13 + 224) = v30;
    addEmitFunction(v13, emitSmoothnessChange);
  }
  v31 = *(double *)(*(_QWORD *)(a3 + 120) + 8);
  if (v20)
  {
    FillColor = CGGStateGetFillColor(a3);
    PDFGStateSetFillColor(v13, FillColor);
    if (FillColor)
    {
      if (FillColor < 0)
        Alpha = CGTaggedColorGetAlpha(FillColor, v33, v34, v35, v36, v37, v38, v39);
      else
        Alpha = *(double *)(FillColor + 8 * *(_QWORD *)(FillColor + 56) + 56);
    }
    else
    {
      Alpha = 0.0;
    }
    v41 = v31 * Alpha;
    if (*(double *)(v13 + 168) != v41)
    {
      *(double *)(v13 + 168) = v41;
      addEmitFunction(v13, emitNonStrokeAlphaChange);
    }
    v42 = *(unsigned __int8 *)(*(_QWORD *)(a3 + 144) + 24);
    if (*(unsigned __int8 *)(v13 + 200) != v42)
    {
      *(_BYTE *)(v13 + 200) = v42;
      addEmitFunction(v13, emitNonStrokeOverprintChange);
    }
    v43 = &CGAffineTransformIdentity;
    if (a1)
      v43 = (const CGAffineTransform *)(a1 + 120);
    v44 = *(float64x2_t *)&v43->c;
    v123 = *(float64x2_t *)&v43->a;
    v124 = v44;
    v125 = *(_OWORD *)&v43->tx;
    PDFGStateSetPatternMatrix(v13, (uint64_t)&v123, v34, v35, v36, v37, v38, v39, *(double *)(*(_QWORD *)(a3 + 120) + 24), *(double *)(*(_QWORD *)(a3 + 120) + 32));
  }
  if (v21)
  {
    StrokeColor = CGGStateGetStrokeColor(a3);
    PDFGStateSetStrokeColor(v13, StrokeColor);
    if (StrokeColor)
    {
      if (StrokeColor < 0)
        v53 = CGTaggedColorGetAlpha(StrokeColor, v46, v47, v48, v49, v50, v51, v52);
      else
        v53 = *(double *)(StrokeColor + 8 * *(_QWORD *)(StrokeColor + 56) + 56);
    }
    else
    {
      v53 = 0.0;
    }
    v54 = v31 * v53;
    if (*(double *)(v13 + 176) != v54)
    {
      *(double *)(v13 + 176) = v54;
      addEmitFunction(v13, emitStrokeAlphaChange);
    }
    PDFGStateSetStrokeOverprint(v13, *(unsigned __int8 *)(*(_QWORD *)(a3 + 144) + 25));
    v61 = &CGAffineTransformIdentity;
    if (a1)
      v61 = (const CGAffineTransform *)(a1 + 120);
    v62 = *(_OWORD *)&v61->c;
    *(_OWORD *)&v122.a = *(_OWORD *)&v61->a;
    *(_OWORD *)&v122.c = v62;
    *(_OWORD *)&v122.tx = *(_OWORD *)&v61->tx;
    PDFGStateSetPatternMatrix(v13, (uint64_t)&v122, v55, v56, v57, v58, v59, v60, *(double *)(*(_QWORD *)(a3 + 120) + 24), *(double *)(*(_QWORD *)(a3 + 120) + 32));
  }
  PDFGStateSetOverprintMode(v13, *(unsigned int *)(*(_QWORD *)(a3 + 144) + 28), v14, v15, v16, v17, v18, v19);
  PDFGStateSetBlackGeneration(v13, *(CFTypeRef *)(*(_QWORD *)(a3 + 144) + 32));
  PDFGStateSetUndercolorRemoval(v13, *(CFTypeRef *)(*(_QWORD *)(a3 + 144) + 40));
  PDFGStateSetStyle(v13, *(_QWORD *)(*(_QWORD *)(a3 + 120) + 16));
  PDFGStateSetSoftMask(v13, *(CFTypeRef *)(*(_QWORD *)(a3 + 120) + 40));
  v69 = (int)(*(_DWORD *)(*(_QWORD *)(a3 + 120) + 4) << 16) >> 24;
  if ((v69 - 13) >= 0xF)
    v69 = 2;
  if (*(_DWORD *)(v13 + 248) != v69)
  {
    *(_DWORD *)(v13 + 248) = v69;
    addEmitFunction(v13, emitBlendModeChange);
  }
  PDFWriterAnnotate((uint64_t)a2, (uint64_t)"  BEGIN: synchronizing gstate.", v63, v64, v65, v66, v67, v68, v115);
  PDFGStateEmit((CFArrayRef *)v13);
  PDFWriterAnnotate((uint64_t)a2, (uint64_t)"  END: synchronizing gstate.", v70, v71, v72, v73, v74, v75, v116);
  if (v9 - 2 > 2)
  {
    PDFWriterAnnotate((uint64_t)a2, (uint64_t)"  BEGIN: drawing path.", v76, v77, v78, v79, v80, v81, v117);
    write_path(a2, 0, a5);
    if (v9 > 4)
    {
      v96 = "n";
      goto LABEL_68;
    }
  }
  else
  {
    PDFWriterAnnotate((uint64_t)a2, (uint64_t)"  BEGIN: drawing path.", v76, v77, v78, v79, v80, v81, v117);
    v88 = *(_OWORD *)(a3 + 56);
    v89 = *(float64x2_t *)(a3 + 40);
    v123 = *(float64x2_t *)(a3 + 24);
    v124 = v89;
    v125 = v88;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(v123, (float64x2_t)xmmword_185004990), (int32x4_t)vceqq_f64(v89, (float64x2_t)xmmword_185004A20))))) & 1) != 0|| *(double *)&v125 != 0.0|| *((double *)&v125 + 1) != 0.0)
    {
      PDFWriterPrintf(a2, (uint64_t)"q %*m cm", v82, v83, v84, v85, v86, v87, (uint64_t)&v123);
      *(float64x2_t *)&v121.a = v123;
      *(float64x2_t *)&v121.c = v124;
      *(_OWORD *)&v121.tx = v125;
      CGAffineTransformInvert(&v122, &v121);
      v123 = *(float64x2_t *)&v122.a;
      v124 = *(float64x2_t *)&v122.c;
      v125 = *(_OWORD *)&v122.tx;
      write_path(a2, v123.f64, a5);
      PDFWriterPrintf(a2, (uint64_t)off_1E16309B0[v9], v97, v98, v99, v100, v101, v102, v119);
      v96 = "Q";
      goto LABEL_68;
    }
    write_path(a2, 0, a5);
  }
  v96 = off_1E16309B0[v9];
LABEL_68:
  PDFWriterPrintf(a2, (uint64_t)v96, v90, v91, v92, v93, v94, v95, v118);
  PDFWriterAnnotate((uint64_t)a2, (uint64_t)"  END: drawing path.", v103, v104, v105, v106, v107, v108, v120);
  PDFWriterAnnotate((uint64_t)a2, (uint64_t)"%s: END", v109, v110, v111, v112, v113, v114, (uint64_t)"PDFWritePath");
}

void write_path(_BYTE **a1, double *a2, CGPathRef path)
{
  const CGAffineTransform *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  CGAffineTransform v14;
  CGRect rect;
  _BYTE **info;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v21 = 0u;
  v20 = 0u;
  memset(&rect, 0, sizeof(rect));
  if (a2)
  {
    v5 = (const CGAffineTransform *)a2;
    if ((a2[1] == 0.0 && a2[2] == 0.0 || *a2 == 0.0 && a2[3] == 0.0) && CGPathIsRect(path, &rect))
    {
      v6 = *(_OWORD *)&v5->c;
      *(_OWORD *)&v14.a = *(_OWORD *)&v5->a;
      *(_OWORD *)&v14.c = v6;
      *(_OWORD *)&v14.tx = *(_OWORD *)&v5->tx;
      rect = CGRectApplyAffineTransform(rect, &v14);
LABEL_9:
      PDFWriterPrintf(a1, (uint64_t)"%*r re", v7, v8, v9, v10, v11, v12, (uint64_t)&rect);
      return;
    }
  }
  else
  {
    if (CGPathIsRect(path, &rect))
      goto LABEL_9;
    v5 = &CGAffineTransformIdentity;
  }
  info = a1;
  v13 = *(_OWORD *)&v5->c;
  v17 = *(_OWORD *)&v5->a;
  v18 = v13;
  v19 = *(_OWORD *)&v5->tx;
  CGPathApply(path, &info, (CGPathApplierFunction)write_path_element);
}

void write_path_element(_BYTE ***a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  float64x2_t v9;
  double *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  float64x2_t v25;
  float64x2_t v26;

  switch(*(_DWORD *)a2)
  {
    case 0:
      v25 = vaddq_f64(*(float64x2_t *)(a1 + 5), vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 3), *(double *)(*(_QWORD *)(a2 + 8) + 8)), *(float64x2_t *)(a1 + 1), **(double **)(a2 + 8)));
      PDFWriterPrintf(*a1, (uint64_t)"%f %f m", a3, a4, a5, a6, a7, a8, *(uint64_t *)&v25.f64[0]);
      *(float64x2_t *)(a1 + 7) = v25;
      goto LABEL_8;
    case 1:
      v26 = vaddq_f64(*(float64x2_t *)(a1 + 5), vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 3), *(double *)(*(_QWORD *)(a2 + 8) + 8)), *(float64x2_t *)(a1 + 1), **(double **)(a2 + 8)));
      PDFWriterPrintf(*a1, (uint64_t)"%f %f l", a3, a4, a5, a6, a7, a8, *(uint64_t *)&v26.f64[0]);
      v9 = v26;
      goto LABEL_9;
    case 2:
      v10 = *(double **)(a2 + 8);
      v11 = *((double *)a1 + 1);
      v12 = *((double *)a1 + 3);
      v13 = *((double *)a1 + 5);
      v14 = v10[2];
      v15 = v10[3];
      v16 = v13 + v12 * v15 + v11 * v14;
      v17 = *((double *)a1 + 6) + *((double *)a1 + 4) * v15 + *((double *)a1 + 2) * v14;
      PDFWriterPrintf(*a1, (uint64_t)"%f %f %f %f %f %f c", a3, a4, a5, a6, a7, a8, COERCE__INT64((*((double *)a1 + 9) + (v13 + v10[1] * v12 + v11 * *v10) * 2.0) / 3.0));
      goto LABEL_6;
    case 3:
      v18 = *(double **)(a2 + 8);
      v19 = *((double *)a1 + 1);
      v20 = *((double *)a1 + 3);
      v21 = *((double *)a1 + 5);
      v22 = v18[4];
      v23 = v18[5];
      v16 = v21 + v20 * v23 + v19 * v22;
      v17 = *((double *)a1 + 6) + *((double *)a1 + 4) * v23 + *((double *)a1 + 2) * v22;
      PDFWriterPrintf(*a1, (uint64_t)"%f %f %f %f %f %f c", a3, a4, a5, a6, a7, a8, COERCE__INT64(v21 + v18[1] * v20 + v19 * *v18));
LABEL_6:
      *((double *)a1 + 9) = v16;
      *((double *)a1 + 10) = v17;
      break;
    case 4:
      PDFWriterPrintf(*a1, (uint64_t)"h", a3, a4, a5, a6, a7, a8, v24);
LABEL_8:
      v9 = *(float64x2_t *)(a1 + 7);
LABEL_9:
      *(float64x2_t *)(a1 + 9) = v9;
      break;
    default:
      return;
  }
}

void PDFWriteClipPath(_BYTE **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const CGPath *ClipPath;
  const CGPath *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  const char *v19;
  uint64_t v20;

  ClipPath = (const CGPath *)CGClipCreateClipPath(a2, a2, a3, a4, a5, a6, a7, a8);
  if (ClipPath)
  {
    v11 = ClipPath;
    write_path(a1, 0, ClipPath);
    v18 = *(unsigned __int16 *)(a2 + 8);
    if (v18 > 0x2FF)
      v19 = "n";
    else
      v19 = off_1E1630998[(__int16)v18 >> 8];
    PDFWriterPrintf(a1, (uint64_t)v19, v12, v13, v14, v15, v16, v17, v20);
    CFRelease(v11);
  }
}

double medianDouble(uint64_t a1, int a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  int v13;
  double v14;
  double v16;
  double v17;

  if (!a2)
    return 0.0;
  v2 = a2 - 1;
  v3 = (a2 - 1) >> 1;
  if ((a2 - 1) < 2)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    LODWORD(v5) = 1;
    do
    {
      v6 = (v2 + v4) >> 1;
      v7 = *(double *)(a1 + 8 * v6);
      v8 = *(double *)(a1 + 8 * v2);
      if (v7 <= v8)
      {
        v7 = *(double *)(a1 + 8 * v2);
      }
      else
      {
        *(double *)(a1 + 8 * v6) = v8;
        *(double *)(a1 + 8 * v2) = v7;
      }
      v9 = *(double *)(a1 + 8 * v4);
      if (v9 > v7)
      {
        *(double *)(a1 + 8 * v4) = v7;
        *(double *)(a1 + 8 * v2) = v9;
        v9 = *(double *)(a1 + 8 * v4);
      }
      v10 = *(double *)(a1 + 8 * v6);
      if (v10 > v9)
      {
        *(double *)(a1 + 8 * v6) = v9;
        *(double *)(a1 + 8 * v4) = v10;
        v10 = *(double *)(a1 + 8 * v6);
      }
      *(_QWORD *)(a1 + 8 * v6) = *(_QWORD *)(a1 + 8 * v5);
      *(double *)(a1 + 8 * v5) = v10;
      v11 = *(double *)(a1 + 8 * v4);
      LODWORD(v6) = v2;
      while (1)
      {
        do
        {
          v5 = (v5 + 1);
          v12 = *(double *)(a1 + 8 * v5);
        }
        while (v12 < v11);
        do
        {
          v13 = v6;
          v6 = (v6 - 1);
          v14 = *(double *)(a1 + 8 * v6);
        }
        while (v14 > v11);
        if (v6 < v5)
          break;
        *(double *)(a1 + 8 * v5) = v14;
        *(double *)(a1 + 8 * v6) = v12;
      }
      *(double *)(a1 + 8 * v4) = v14;
      *(double *)(a1 + 8 * v6) = v11;
      if (v6 <= v3)
        v4 = v5;
      if (v6 >= v3)
        v2 = v13 - 2;
      LODWORD(v5) = v4 + 1;
    }
    while (v2 > v4 + 1);
  }
  if (v2 <= v4)
    return *(double *)(a1 + 8 * v3);
  v16 = *(double *)(a1 + 8 * v4);
  v17 = *(double *)(a1 + 8 * v2);
  if (v16 > v17)
  {
    *(double *)(a1 + 8 * v4) = v17;
    *(double *)(a1 + 8 * v2) = v16;
    v17 = v16;
    v16 = *(double *)(a1 + 8 * v4);
  }
  return (v16 + v17) * 0.5;
}

uint64_t compareDouble(double *a1, double *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a1 > *a2;
}

CFTypeID CGColorConversionInfoGetTypeID(void)
{
  if (CGColorConversionInfoGetTypeID_predicate != -1)
    dispatch_once(&CGColorConversionInfoGetTypeID_predicate, &__block_literal_global_1103);
  return kCGColorConverterRuntimeID;
}

uint64_t cg_color_conversion_info_equal(CFTypeRef *cf, CFTypeRef *a2)
{
  uint64_t result;
  CFTypeID v5;
  CFTypeID v6;
  CFTypeID v7;
  CFTypeID v8;

  if (cf == a2)
    return 1;
  result = 0;
  if (cf && a2)
  {
    v5 = CFGetTypeID(cf);
    if (CGColorConversionInfoGetTypeID_predicate != -1)
    {
      v7 = v5;
      dispatch_once(&CGColorConversionInfoGetTypeID_predicate, &__block_literal_global_1103);
      v5 = v7;
    }
    if (v5 != kCGColorConverterRuntimeID)
      return 0;
    v6 = CFGetTypeID(a2);
    if (CGColorConversionInfoGetTypeID_predicate != -1)
    {
      v8 = v6;
      dispatch_once(&CGColorConversionInfoGetTypeID_predicate, &__block_literal_global_1103);
      v6 = v8;
    }
    if (v6 == kCGColorConverterRuntimeID)
      return CFEqual(cf[2], a2[2]);
    else
      return 0;
  }
  return result;
}

CFStringRef cg_color_conversion_info_copy_format_description(const void *a1, const __CFDictionary *a2)
{
  const __CFAllocator *v4;

  v4 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v4, a2, CFSTR("<CGColorConversionInfo %p>"), a1);
}

CFStringRef cg_color_conversion_info_copy_debug_description(_QWORD *a1)
{
  const __CFAllocator *v2;
  const __CFAllocator *v4;

  if (a1)
  {
    v2 = CFGetAllocator(a1);
    return CFStringCreateWithFormat(v2, 0, CFSTR("<CGColorConversionInfo %p> transform:%@ options:%@\n"), a1, a1[2], a1[3]);
  }
  else
  {
    v4 = CFGetAllocator(0);
    return CFStringCreateWithFormat(v4, 0, CFSTR("<NULL CGColorConversionInfo>"));
  }
}

const __CFDictionary *CGColorConversionInfoOptionsFlexTRCRequested(const __CFDictionary *result)
{
  const __CFDictionary *v1;
  CFTypeID v2;
  CFTypeID v3;
  const __CFDictionary *v4;
  CFTypeID v5;

  if (result)
  {
    v1 = result;
    v2 = CFGetTypeID(result);
    if (v2 != CFDictionaryGetTypeID())
      return 0;
    if (CFDictionaryContainsKey(v1, CFSTR("kCGColorConversionInfoOptions")) == 1)
    {
      result = (const __CFDictionary *)CFDictionaryGetValue(v1, CFSTR("kCGColorConversionInfoOptions"));
      v1 = result;
      if (!result)
        return result;
    }
    v3 = CFGetTypeID(v1);
    if (v3 != CFDictionaryGetTypeID())
      return 0;
    result = (const __CFDictionary *)CFDictionaryGetValue(v1, CFSTR("kCGApplyFlexTRC"));
    if (result)
    {
      v4 = result;
      v5 = CFGetTypeID(result);
      return (const __CFDictionary *)(v5 == CFDictionaryGetTypeID() || v4 == (const __CFDictionary *)*MEMORY[0x1E0C9AE50]);
    }
  }
  return result;
}

const __CFDictionary *CGColorConversionInfoOptionsFlexLumaRequested(const __CFDictionary *result)
{
  const __CFDictionary *v1;
  CFTypeID v2;
  CFTypeID v3;
  const __CFDictionary *v4;
  CFTypeID v5;

  if (result)
  {
    v1 = result;
    v2 = CFGetTypeID(result);
    if (v2 != CFDictionaryGetTypeID())
      return 0;
    if (CFDictionaryContainsKey(v1, CFSTR("kCGColorConversionInfoOptions")) == 1)
    {
      result = (const __CFDictionary *)CFDictionaryGetValue(v1, CFSTR("kCGColorConversionInfoOptions"));
      v1 = result;
      if (!result)
        return result;
    }
    v3 = CFGetTypeID(v1);
    if (v3 != CFDictionaryGetTypeID())
      return 0;
    result = (const __CFDictionary *)CFDictionaryGetValue(v1, CFSTR("kCGApplyFlexLumaScaling"));
    if (result)
    {
      v4 = result;
      v5 = CFGetTypeID(result);
      return (const __CFDictionary *)(v5 == CFDictionaryGetTypeID() || v4 == (const __CFDictionary *)*MEMORY[0x1E0C9AE50]);
    }
  }
  return result;
}

void modify(const __CFDictionary *a1, __CFArray *a2)
{
  uint64_t Count;
  unint64_t v5;
  const void **v6;
  size_t v7;
  const void **v8;
  const void *v9;
  CFTypeRef *v10;
  const void **v11;
  uint64_t v12;
  CFDictionaryRef v13;
  CFDictionaryRef v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  if (CFDictionaryGetValue(a1, CFSTR("com.apple.cmm.ExtendedRange")) == (const void *)*MEMORY[0x1E0C9AE40])
  {
    Count = CFDictionaryGetCount(a1);
    MEMORY[0x1E0C80A78]();
    v5 = (8 * Count + 15) & 0xFFFFFFFFFFFFFFF0;
    v6 = (const void **)((char *)v15 - v5);
    if ((unint64_t)(8 * Count) >= 0x200)
      v7 = 512;
    else
      v7 = 8 * Count;
    bzero((char *)v15 - v5, v7);
    MEMORY[0x1E0C80A78]();
    v8 = (const void **)((char *)v15 - v5);
    bzero((char *)v15 - v5, v7);
    CFDictionaryGetKeysAndValues(a1, (const void **)((char *)v15 - v5), (const void **)((char *)v15 - v5));
    if (Count >= 1)
    {
      v9 = (const void *)*MEMORY[0x1E0C9AE50];
      v10 = (CFTypeRef *)((char *)v15 - v5);
      v11 = v8;
      v12 = Count;
      do
      {
        if (CFEqual(*v10, CFSTR("com.apple.cmm.ExtendedRange")))
          *v11 = v9;
        ++v11;
        ++v10;
        --v12;
      }
      while (v12);
    }
    v13 = CFDictionaryCreate(0, v6, v8, Count, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v13)
    {
      v14 = v13;
      CFArrayAppendValue(a2, v13);
      CFRelease(v14);
    }
  }
  else
  {
    CFArrayAppendValue(a2, a1);
  }
}

CFDictionaryRef create_new_transform_options(CFDictionaryRef theDict)
{
  CFIndex Count;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  size_t v7;
  char *v8;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  if (theDict)
    Count = CFDictionaryGetCount(theDict);
  else
    Count = 0;
  if (create_3DLUT_for_PQEETF_predicate != -1)
    dispatch_once(&create_3DLUT_for_PQEETF_predicate, &__block_literal_global_68);
  v3 = create_3DLUT_for_PQEETF_status;
  if (create_3DLUT_for_HLG_SceneReferredMapping_predicate != -1)
    dispatch_once(&create_3DLUT_for_HLG_SceneReferredMapping_predicate, &__block_literal_global_71);
  v4 = 8 * (Count + create_3DLUT_for_HLG_SceneReferredMapping_status + v3);
  MEMORY[0x1E0C80A78]();
  v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = (char *)v10 - v5;
  if (v4 >= 0x200)
    v7 = 512;
  else
    v7 = v4;
  bzero((char *)v10 - v5, v7);
  MEMORY[0x1E0C80A78]();
  v8 = (char *)v10 - v5;
  bzero((char *)v10 - v5, v7);
  if (!theDict
    || (CFDictionaryGetKeysAndValues(theDict, (const void **)((char *)v10 - v5), (const void **)((char *)v10 - v5)),
        !CFDictionaryContainsKey(theDict, CFSTR("kCGPQEETF3DLut"))))
  {
    if (create_3DLUT_for_PQEETF_predicate != -1)
      dispatch_once(&create_3DLUT_for_PQEETF_predicate, &__block_literal_global_68);
    if (create_3DLUT_for_PQEETF_status)
    {
      *(_QWORD *)&v6[8 * Count] = CFSTR("kCGPQEETF3DLut");
      *(_QWORD *)&v8[8 * Count++] = *MEMORY[0x1E0C9AE50];
    }
    if (!theDict)
      goto LABEL_19;
  }
  if (!CFDictionaryContainsKey(theDict, CFSTR("kCGPQEETF3DLut")))
  {
LABEL_19:
    if (create_3DLUT_for_HLG_SceneReferredMapping_predicate != -1)
      dispatch_once(&create_3DLUT_for_HLG_SceneReferredMapping_predicate, &__block_literal_global_71);
    if (create_3DLUT_for_HLG_SceneReferredMapping_status)
    {
      *(_QWORD *)&v6[8 * Count] = CFSTR("kCGHLGSceneMapping3DLut");
      *(_QWORD *)&v8[8 * Count++] = *MEMORY[0x1E0C9AE50];
    }
  }
  return CFDictionaryCreate(0, (const void **)((char *)v10 - v5), (const void **)((char *)v10 - v5), Count, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
}

uint64_t colorsync_smart_null_1115()
{
  return 0;
}

CGColorConversionInfoRef CGColorConversionInfoCreate(CGColorSpaceRef src, CGColorSpaceRef dst)
{
  return CGColorConversionInfoCreateFromList(0, src, kCGColorConversionTransformFromSpace, kCGRenderingIntentDefault, dst, 1, 0, 0);
}

CGColorConversionInfoRef CGColorConversionInfoCreateWithOptions(CGColorSpaceRef src, CGColorSpaceRef dst, CFDictionaryRef options)
{
  return CGColorConversionInfoCreateFromList(options, src, kCGColorConversionTransformFromSpace, kCGRenderingIntentDefault, dst, 1, 0, 0);
}

uint64_t profile_set_checker(const __CFDictionary *a1, uint64_t a2)
{
  const void *Value;
  uint64_t result;
  char v5;

  Value = CFDictionaryGetValue(a1, CFSTR("ColorSyncProfile"));
  if (profile_set_checker_cglibrarypredicate != -1)
    dispatch_once(&profile_set_checker_cglibrarypredicate, &__block_literal_global_56);
  if ((profile_set_checker_f(Value) & 1) != 0)
  {
    result = 1;
  }
  else
  {
    if (profile_set_checker_cglibrarypredicate_59 != -1)
      dispatch_once(&profile_set_checker_cglibrarypredicate_59, &__block_literal_global_61);
    result = profile_set_checker_f_58(Value);
  }
  if (*(_BYTE *)(a2 + 8))
    v5 = 1;
  else
    v5 = result;
  *(_BYTE *)(a2 + 8) = v5;
  return result;
}

uint64_t (*__profile_set_checker_block_invoke_2())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileIsHLGBased");
  v1 = colorsync_smart_null_1115;
  if (result)
    v1 = result;
  profile_set_checker_f_58 = v1;
  return result;
}

uint64_t (*__profile_set_checker_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileIsPQBased");
  v1 = colorsync_smart_null_1115;
  if (result)
    v1 = result;
  profile_set_checker_f = v1;
  return result;
}

uint64_t CGColorConversionInfoCreateWithColorSyncCodeFragment(const void *a1, const __CFDictionary *a2)
{
  CFTypeID v4;
  const __CFDictionary *ValueAtIndex;
  const __CFArray *Value;
  int v7;
  const __CFDictionary *new_transform_options;
  const __CFArray *v9;
  CFMutableArrayRef Mutable;
  const __CFDictionary *v11;
  const __CFArray *Retained;
  const __CFArray *v14;
  uint64_t v15;
  CFRange v16;
  CFRange v17;

  if (a1
    && (v4 = CFGetTypeID(a1), v4 == CFArrayGetTypeID())
    && (ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)a1, 0)) != 0)
  {
    Value = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, CFSTR("com.apple.cmm.ProfileSequnce"));
    v14 = Value;
    v15 = 0;
    v16.length = CFArrayGetCount(Value);
    v16.location = 0;
    CFArrayApplyFunction(Value, v16, (CFArrayApplierFunction)profile_set_checker, &v14);
    v7 = v15;
    if (Value)
      Value = (const __CFArray *)CFRetain(Value);
    if (v7)
    {
      if (create_3DLUT_for_PQEETF_predicate != -1)
        dispatch_once(&create_3DLUT_for_PQEETF_predicate, &__block_literal_global_68);
      if (create_3DLUT_for_PQEETF_status)
        goto LABEL_13;
      if (create_3DLUT_for_HLG_SceneReferredMapping_predicate != -1)
        dispatch_once(&create_3DLUT_for_HLG_SceneReferredMapping_predicate, &__block_literal_global_71);
      if (create_3DLUT_for_HLG_SceneReferredMapping_status)
      {
LABEL_13:
        new_transform_options = create_new_transform_options(a2);
LABEL_21:
        v11 = new_transform_options;
        goto LABEL_24;
      }
      goto LABEL_19;
    }
    v9 = Value;
  }
  else
  {
    v9 = 0;
  }
  if (linked_on_golden_gate_or_later() || (Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378])) == 0)
  {
    Value = v9;
    if (a2)
      goto LABEL_20;
    goto LABEL_23;
  }
  Value = Mutable;
  v17.length = CFArrayGetCount(v9);
  v17.location = 0;
  CFArrayApplyFunction(v9, v17, (CFArrayApplierFunction)modify, Value);
  if (v9)
    CFRelease(v9);
LABEL_19:
  if (a2)
  {
LABEL_20:
    new_transform_options = (const __CFDictionary *)CFRetain(a2);
    goto LABEL_21;
  }
LABEL_23:
  v11 = 0;
LABEL_24:
  Retained = CGColorSyncTransformCacheGetRetained(Value, v11);
  if (Value)
    CFRelease(Value);
  if (v11)
    CFRelease(v11);
  return create_conversion_info(Retained, a2);
}

CFDictionaryRef CGColorConversionInfoResolveOptions(uint64_t a1, __int16 a2, CFDictionaryRef theDict)
{
  const __CFDictionary *Value;
  const __CFDictionary *v6;
  const void *v7;
  const void *v8;
  _BYTE *v9;
  CFDictionaryRef ResolveReferenceWhiteToneMappingOptions;
  const __CFDictionary *v11;
  const void *v12;
  const __CFDictionary *v13;
  const __CFDictionary *v14;
  CFIndex Count;

  Value = theDict;
  if (!theDict)
    return Value;
  if (CFDictionaryContainsKey(theDict, CFSTR("kCGColorConversionInfoOptions")) == 1)
    Value = (const __CFDictionary *)CFDictionaryGetValue(Value, CFSTR("kCGColorConversionInfoOptions"));
  if (CFDictionaryContainsKey(Value, CFSTR("kCGApplyReferenceWhiteToneMapping"))
    || CFDictionaryContainsKey(Value, CFSTR("kCGImageExtendedRangeToneMappingInfo"))
    || CFDictionaryContainsKey(Value, CFSTR("kCGApplyFlexLumaScaling"))
    || CFDictionaryContainsKey(Value, CFSTR("kCGApplyFlexTRC")))
  {
    v6 = (const __CFDictionary *)CFDictionaryGetValue(Value, CFSTR("kCGApplyReferenceWhiteToneMapping"));
    v7 = CFDictionaryGetValue(Value, CFSTR("kCGApplyFlexTRC"));
    v8 = CFDictionaryGetValue(Value, CFSTR("kCGApplyFlexLumaScaling"));
    if (v6)
    {
      if (a1)
      {
        v9 = *(_BYTE **)(a1 + 24);
        if (!v9[16] && !v9[17])
        {
          Value = 0;
          if ((a2 & 0xF00) != 0x100 || !v9[13])
            return Value;
        }
        ResolveReferenceWhiteToneMappingOptions = CGColorTransformCreateResolveReferenceWhiteToneMappingOptions(v6);
        if (CFEqual(ResolveReferenceWhiteToneMappingOptions, v6) == 1)
        {
          v11 = v6;
LABEL_23:
          Value = (const __CFDictionary *)CFRetain(v11);
          goto LABEL_24;
        }
        return ResolveReferenceWhiteToneMappingOptions;
      }
      return 0;
    }
    v12 = v8;
    if (v8)
    {
      ResolveReferenceWhiteToneMappingOptions = CGColorTransformCreateResolveFlexLumaOptions(v8);
      if (CFEqual(ResolveReferenceWhiteToneMappingOptions, v12) == 1)
      {
        if (!v7)
        {
          Value = 0;
          goto LABEL_24;
        }
        goto LABEL_22;
      }
      return ResolveReferenceWhiteToneMappingOptions;
    }
    if (v7)
    {
      ResolveReferenceWhiteToneMappingOptions = CGColorTransformCreateResolveFlexTRCOptions(v7);
      if (CFEqual(ResolveReferenceWhiteToneMappingOptions, v7) == 1)
      {
LABEL_22:
        v11 = (const __CFDictionary *)v7;
        goto LABEL_23;
      }
      return ResolveReferenceWhiteToneMappingOptions;
    }
    if (a1 && *(_BYTE *)(*(_QWORD *)(a1 + 24) + 13))
    {
      v13 = (const __CFDictionary *)CFDictionaryGetValue(Value, CFSTR("kCGImageExtendedRangeToneMappingInfo"));
      if (v13)
      {
        v14 = v13;
        ResolveReferenceWhiteToneMappingOptions = CGColorTransformCreateResolveExtendedRangeToneMappingOptions(v13);
        if (CFEqual(ResolveReferenceWhiteToneMappingOptions, v14))
        {
          if (Value)
          {
            v11 = Value;
            goto LABEL_23;
          }
        }
        else
        {
          Count = CFDictionaryGetCount(Value);
          Value = CFDictionaryCreateMutableCopy(0, Count, Value);
          CFDictionarySetValue(Value, CFSTR("kCGImageExtendedRangeToneMappingInfo"), ResolveReferenceWhiteToneMappingOptions);
        }
LABEL_24:
        if (ResolveReferenceWhiteToneMappingOptions)
          CFRelease(ResolveReferenceWhiteToneMappingOptions);
        return Value;
      }
      return 0;
    }
  }
  if (!Value)
    return Value;
  return (CFDictionaryRef)CFRetain(Value);
}

uint64_t CGCreateSettingsForDefaultToneMapping(_QWORD *cf, _QWORD *a2, CFMutableDictionaryRef *a3, float a4, float a5, float a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t result;
  _BOOL4 v15;
  CFTypeID v19;
  CFTypeID v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  char v37;

  if (!a3)
    _CGHandleAssert("CGCreateSettingsForDefaultToneMapping", 1105, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "settings != NULL", "settings == NULL", a9, a10, a11, v37);
  result = 0;
  *a3 = 0;
  v15 = a4 >= 1.0;
  if (a4 == 0.0)
    v15 = 1;
  if (cf && v15)
  {
    v19 = CFGetTypeID(cf);
    if (kCGColorSpaceSceneReferredDerivative_block_invoke_once != -1)
      dispatch_once(&kCGColorSpaceSceneReferredDerivative_block_invoke_once, &__block_literal_global_77);
    result = 0;
    if (a2 && v19 == CGColorSpaceGetTypeID_type_id)
    {
      v20 = CFGetTypeID(a2);
      if (kCGColorSpaceSceneReferredDerivative_block_invoke_once != -1)
        dispatch_once(&kCGColorSpaceSceneReferredDerivative_block_invoke_once, &__block_literal_global_77);
      if (v20 == CGColorSpaceGetTypeID_type_id)
      {
        switch(conversion_type(cf, a2))
        {
          case 0u:
            if ((default_settings_edr_to_edr((uint64_t)cf, (uint64_t)a2, a3, a4, a5, a6, v22, v23, v24, v25, v26) & 1) != 0)return 1;
            goto LABEL_73;
          case 1u:
            if ((default_settings_edr_to_hdr((uint64_t)cf, (uint64_t)a2, a3, a4, a5, a6, v22, v23, v24, v25, v26) & 1) == 0)goto LABEL_73;
            return 1;
          case 2u:
            if (a4 == 0.0)
              v27 = 1.0;
            else
              v27 = a4;
            if (v27 != 1.0
              || (default_settings_edr_to_sdr((_BOOL8)cf, (uint64_t)a2, a3, a5, a6) & 1) == 0)
            {
              goto LABEL_73;
            }
            return 1;
          case 3u:
            if ((default_settings_hdr_to_edr((uint64_t)cf, a2, a3, a4, a5, a6, v22, v23, v24, v25, v26) & 1) == 0)
              goto LABEL_73;
            return 1;
          case 4u:
            if ((default_settings_hdr_to_hdr((uint64_t)cf, a2, a3, a4, a5, a6, v22, v23, v24, v25, v26) & 1) == 0)
              goto LABEL_73;
            return 1;
          case 5u:
            if (a4 == 0.0)
              v28 = 1.0;
            else
              v28 = a4;
            if (v28 != 1.0 || (default_settings_hdr_to_sdr((_BOOL8)cf, a2, a3, a5, a6) & 1) == 0)
              goto LABEL_73;
            return 1;
          case 6u:
            if (a5 == 0.0)
              v29 = 1.0;
            else
              v29 = a5;
            if (v29 != 1.0)
              goto LABEL_73;
            default_settings_sdr_to_edr((uint64_t)cf, (_BOOL8)a2, v21, v22, v23, v24, v25, v26);
            return 1;
          case 7u:
            if (a5 == 0.0)
              v30 = 1.0;
            else
              v30 = a5;
            if (v30 != 1.0)
              goto LABEL_73;
            default_settings_sdr_to_hdr((uint64_t)cf, (_BOOL8)a2, v21, v22, v23, v24, v25, v26);
            return 1;
          case 8u:
            v31 = cf[3];
            if (*(_BYTE *)(v31 + 13) || *(_BYTE *)(v31 + 16) || *(_BYTE *)(v31 + 17) || *(_DWORD *)(v31 + 24) != 1)
              _CGHandleAssert("CGCreateSettingsForDefaultToneMapping", 1196, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "color_space_is_sdr(target_color_space) == true", "Target color space is not SDR", v24, v25, v26, v37);
            v32 = a2[3];
            if (*(_BYTE *)(v32 + 13) || *(_BYTE *)(v32 + 16) || *(_BYTE *)(v32 + 17) || *(_DWORD *)(v32 + 24) != 1)
              _CGHandleAssert("CGCreateSettingsForDefaultToneMapping", 1197, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "color_space_is_sdr(source_color_space) == true", "Source color space is not SDR", v24, v25, v26, v37);
            if (a5 == 0.0)
              v33 = 1.0;
            else
              v33 = a5;
            if (a4 == 0.0)
              v34 = 1.0;
            else
              v34 = a4;
            if (v34 == 1.0 && v33 == 1.0)
              return 1;
            goto LABEL_73;
          case 9u:
            v35 = cf[3];
            if (*(_BYTE *)(v35 + 13)
              || *(_BYTE *)(v35 + 16)
              || !*(_BYTE *)(v35 + 17) && *(_DWORD *)(v35 + 24) == 1
              || *(_BYTE *)(v35 + 16)
              || *(_BYTE *)(v35 + 17))
            {
              v36 = a2[3];
              if (*(_BYTE *)(v36 + 13) || *(_BYTE *)(v36 + 16) || !*(_BYTE *)(v36 + 17) && *(_DWORD *)(v36 + 24) == 1)
                goto LABEL_73;
              if (*(_BYTE *)(v36 + 16) || *(_BYTE *)(v36 + 17))
                goto LABEL_73;
            }
            return 1;
          default:
LABEL_73:
            CGLog(2, (uint64_t)"%s failed for %s", v21, v22, v23, v24, v25, v26, (char)"CGCreateSettingsForDefaultToneMapping");
            return 0;
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t conversion_type(_QWORD *a1, _QWORD *a2)
{
  CFTypeID v4;
  _BYTE *v5;
  _BOOL4 v6;
  _BOOL4 v7;
  _BOOL4 is_sdr;
  CFTypeID v9;
  unsigned __int8 *v10;
  int v11;
  _BOOL4 v12;
  _BOOL4 v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;
  int v17;

  v4 = CFGetTypeID(a1);
  if (kCGColorSpaceSceneReferredDerivative_block_invoke_once != -1)
    dispatch_once(&kCGColorSpaceSceneReferredDerivative_block_invoke_once, &__block_literal_global_77);
  if (v4 == CGColorSpaceGetTypeID_type_id)
  {
    if (a1)
    {
      v5 = (_BYTE *)a1[3];
      v6 = v5[13] == 0;
      if (v5[16])
        v7 = 0;
      else
        v7 = v5[17] == 0;
    }
    else
    {
      v6 = 1;
      v7 = 1;
    }
    is_sdr = color_space_is_sdr((_BOOL8)a1);
  }
  else
  {
    is_sdr = 0;
    v6 = 1;
    v7 = 1;
  }
  v9 = CFGetTypeID(a2);
  if (kCGColorSpaceSceneReferredDerivative_block_invoke_once != -1)
    dispatch_once(&kCGColorSpaceSceneReferredDerivative_block_invoke_once, &__block_literal_global_77);
  if (v9 != CGColorSpaceGetTypeID_type_id)
    return 9;
  if (a2)
  {
    v10 = (unsigned __int8 *)a2[3];
    v11 = v10[13];
    if (v10[16])
      v12 = 0;
    else
      v12 = v10[17] == 0;
    v13 = color_space_is_sdr((_BOOL8)a2);
    v15 = !v6;
    if (!v11)
      v15 = 0;
    if (v15)
      return 0;
    v16 = !v7;
    if (!v11)
      v16 = 0;
    if (v16)
      return 1;
    v17 = !is_sdr;
    if (v11 && !v17)
      return 2;
    if (!v12 && !v6)
      return 3;
    if (!v12 && !v7)
      return 4;
    if ((v12 | v17) != 1)
      return 5;
  }
  else
  {
    v13 = color_space_is_sdr(0);
  }
  if (!v6 && v13)
    return 6;
  LODWORD(v14) = is_sdr ? 8 : 9;
  v14 = v7 ? v14 : 7;
  if (!v13)
    return 9;
  return v14;
}

CFMutableDictionaryRef default_settings_edr_to_edr(uint64_t a1, uint64_t a2, CFMutableDictionaryRef *a3, float a4, float a5, float a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char vars0;

  if (!a1 || !*(_BYTE *)(*(_QWORD *)(a1 + 24) + 13))
    _CGHandleAssert("default_settings_edr_to_edr", 987, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "CGColorSpaceUsesExtendedRange(target_color_space) == true", "Target color space is not extended", a9, a10, a11, vars0);
  if (!a2 || !*(_BYTE *)(*(_QWORD *)(a2 + 24) + 13))
    _CGHandleAssert("default_settings_edr_to_edr", 988, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "CGColorSpaceUsesExtendedRange(source_color_space) == true", "Source color space is not extended", a9, a10, a11, vars0);
  return default_rwtm_settings(a3, a4, a5, a6);
}

CFMutableDictionaryRef default_settings_edr_to_hdr(uint64_t a1, uint64_t a2, CFMutableDictionaryRef *a3, float a4, float a5, float a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  char vars0;

  if (!a1 || (v11 = *(_QWORD *)(a1 + 24), !*(_BYTE *)(v11 + 16)) && !*(_BYTE *)(v11 + 17))
    _CGHandleAssert("default_settings_edr_to_hdr", 1001, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "CGColorSpaceUsesITUR_2100TF(target_color_space) == true", "Target color space is not HDR", a9, a10, a11, vars0);
  if (!a2 || !*(_BYTE *)(*(_QWORD *)(a2 + 24) + 13))
    _CGHandleAssert("default_settings_edr_to_hdr", 1002, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "CGColorSpaceUsesExtendedRange(source_color_space) == true", "Source color space is not extended", a9, a10, a11, vars0);
  return default_rwtm_settings(a3, a4, a5, a6);
}

CFMutableDictionaryRef default_settings_edr_to_sdr(_BOOL8 a1, uint64_t a2, CFMutableDictionaryRef *a3, float a4, float a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;

  if (!color_space_is_sdr(a1))
    _CGHandleAssert("default_settings_edr_to_sdr", 1015, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "color_space_is_sdr(target_color_space) == true", "Target color space is not SDR", v9, v10, v11, v13);
  if (!a2 || !*(_BYTE *)(*(_QWORD *)(a2 + 24) + 13))
    _CGHandleAssert("default_settings_edr_to_sdr", 1016, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "CGColorSpaceUsesExtendedRange(source_color_space) == true", "Source color space is not extended", v9, v10, v11, v13);
  return default_rwtm_settings(a3, 1.0, a4, a5);
}

CFMutableDictionaryRef default_settings_hdr_to_edr(uint64_t a1, _QWORD *a2, CFMutableDictionaryRef *a3, float a4, float a5, float a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  char vars0;

  if (!a1 || !*(_BYTE *)(*(_QWORD *)(a1 + 24) + 13))
    _CGHandleAssert("default_settings_hdr_to_edr", 1030, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "CGColorSpaceUsesExtendedRange(target_color_space) == true", "Target color space is not extended", a9, a10, a11, vars0);
  if (!a2 || (v11 = a2[3], !*(_BYTE *)(v11 + 16)) && !*(_BYTE *)(v11 + 17))
    _CGHandleAssert("default_settings_hdr_to_edr", 1031, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "CGColorSpaceUsesITUR_2100TF(source_color_space) == true", "Source color space is not HDR", a9, a10, a11, vars0);
  return default_settings_hdr_to_any(a2, a3, a4, a5, a6);
}

CFMutableDictionaryRef default_settings_hdr_to_hdr(uint64_t a1, _QWORD *a2, CFMutableDictionaryRef *a3, float a4, float a5, float a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  char vars0;

  if (!a1 || (v11 = *(_QWORD *)(a1 + 24), !*(_BYTE *)(v11 + 16)) && !*(_BYTE *)(v11 + 17))
    _CGHandleAssert("default_settings_hdr_to_hdr", 1044, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "CGColorSpaceUsesITUR_2100TF(target_color_space) == true", "Target color space is not HDR", a9, a10, a11, vars0);
  if (!a2 || (v12 = a2[3], !*(_BYTE *)(v12 + 16)) && !*(_BYTE *)(v12 + 17))
    _CGHandleAssert("default_settings_hdr_to_hdr", 1045, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "CGColorSpaceUsesITUR_2100TF(source_color_space) == true", "Source color space is not HDR", a9, a10, a11, vars0);
  return default_settings_hdr_to_any(a2, a3, a4, a5, a6);
}

CFMutableDictionaryRef default_settings_hdr_to_sdr(_BOOL8 a1, _QWORD *a2, CFMutableDictionaryRef *a3, float a4, float a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;

  if (!color_space_is_sdr(a1))
    _CGHandleAssert("default_settings_hdr_to_sdr", 1058, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "color_space_is_sdr(target_color_space) == true", "Target color space is not SDR", v9, v10, v11, v14);
  if (!a2 || (v12 = a2[3], !*(_BYTE *)(v12 + 16)) && !*(_BYTE *)(v12 + 17))
    _CGHandleAssert("default_settings_hdr_to_sdr", 1059, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "CGColorSpaceUsesITUR_2100TF(source_color_space) == true", "Source color space is not HDR", v9, v10, v11, v14);
  return default_settings_hdr_to_any(a2, a3, 1.0, a4, a5);
}

BOOL default_settings_sdr_to_edr(uint64_t a1, _BOOL8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL8 result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char vars0;

  if (!a1 || !*(_BYTE *)(*(_QWORD *)(a1 + 24) + 13))
    _CGHandleAssert("default_settings_sdr_to_edr", 1073, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "CGColorSpaceUsesExtendedRange(target_color_space) == true", "Target color space is not extended", a6, a7, a8, vars0);
  result = color_space_is_sdr(a2);
  if (!result)
    _CGHandleAssert("default_settings_sdr_to_edr", 1074, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "color_space_is_sdr(source_color_space) == true", "Source color space is not DDR", v9, v10, v11, vars0);
  return result;
}

BOOL default_settings_sdr_to_hdr(uint64_t a1, _BOOL8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char vars0;

  if (!a1 || (v8 = *(_QWORD *)(a1 + 24), !*(_BYTE *)(v8 + 16)) && !*(_BYTE *)(v8 + 17))
    _CGHandleAssert("default_settings_sdr_to_hdr", 1088, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "CGColorSpaceUsesITUR_2100TF(target_color_space) == true", "Target color space is not HDR", a6, a7, a8, vars0);
  result = color_space_is_sdr(a2);
  if (!result)
    _CGHandleAssert("default_settings_sdr_to_hdr", 1089, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "color_space_is_sdr(source_color_space) == true", "Source color space is not DDR", v10, v11, v12, vars0);
  return result;
}

BOOL color_space_is_sdr(_BOOL8 result)
{
  uint64_t v1;

  if (result)
  {
    v1 = *(_QWORD *)(result + 24);
    return !*(_BYTE *)(v1 + 13) && !*(_BYTE *)(v1 + 16) && !*(_BYTE *)(v1 + 17) && *(_DWORD *)(v1 + 24) == 1;
  }
  return result;
}

CFMutableDictionaryRef default_settings_hdr_to_any(_QWORD *a1, CFMutableDictionaryRef *a2, float a3, float a4, float a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float HeadroomInfo;
  float v18;
  CFMutableDictionaryRef result;
  const __CFAllocator *v20;
  __CFDictionary *v21;
  const void *v22;
  __CFDictionary *v23;
  double v24;
  float valuePtr;

  if (!CGColorSpaceContainsFlexGTCInfo((_BOOL8)a1))
    return default_rwtm_settings(a2, a3, a4, a5);
  HeadroomInfo = CGColorSpaceGetHeadroomInfo(a1, 0);
  if (a4 == 0.0)
  {
    if (a3 < 1.0)
      return 0;
    goto LABEL_10;
  }
  v18 = vabds_f32(a4, HeadroomInfo);
  if (v18 > 0.00001)
  {
    v24 = a4;
    CGPostError((uint64_t)"Image headroom (%f) != Gain Map Preview headroom (%f)", v10, v11, v12, v13, v14, v15, v16, SLOBYTE(v24));
  }
  result = 0;
  if (a3 >= 1.0 && v18 <= 0.0001)
  {
LABEL_10:
    v20 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (result)
    {
      v21 = result;
      valuePtr = a3;
      result = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
      if (result)
      {
        v22 = result;
        CFDictionarySetValue(v21, CFSTR("kCGFlexGTCTargetHeadroom"), result);
        CFRelease(v22);
        result = CFDictionaryCreateMutable(v20, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (result)
        {
          v23 = result;
          CFDictionarySetValue(result, CFSTR("kCGApplyFlexLumaScaling"), v21);
          CFRelease(v21);
          *a2 = v23;
          return (CFMutableDictionaryRef)1;
        }
      }
    }
  }
  return result;
}

CFMutableDictionaryRef default_rwtm_settings(CFMutableDictionaryRef *a1, float a2, float a3, float a4)
{
  const __CFAllocator *v8;
  CFMutableDictionaryRef result;
  __CFDictionary *v10;
  const void *v11;
  const void *v12;
  CFMutableDictionaryRef v13;
  float valuePtr;
  float v15;

  if (a2 < 1.0)
    return 0;
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (result)
  {
    v10 = result;
    valuePtr = a2;
    result = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
    if (result)
    {
      v11 = result;
      CFDictionarySetValue(v10, CFSTR("kCGRWTMEDRHeadroom"), result);
      CFRelease(v11);
      v15 = a3 * a4;
      result = CFNumberCreate(0, kCFNumberFloatType, &v15);
      if (result)
      {
        v12 = result;
        CFDictionarySetValue(v10, CFSTR("kCGRWTMSourcePeak"), result);
        CFRelease(v12);
        result = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (result)
        {
          v13 = result;
          CFDictionarySetValue(result, CFSTR("kCGApplyReferenceWhiteToneMapping"), v10);
          CFRelease(v10);
          *a1 = v13;
          return (CFMutableDictionaryRef)1;
        }
      }
    }
  }
  return result;
}

uint64_t CGCreateToneMappingSettingForMethod(int a1, _QWORD *cf, _QWORD *a3, CFMutableDictionaryRef *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, float a10, float a11)
{
  CFTypeID v18;
  uint64_t result;
  CFTypeID v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  CFTypeID v32;
  CFTypeID v33;
  char v34;

  if (!a4)
    _CGHandleAssert("CGCreateToneMappingSettingForMethod", 1471, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "settings != NULL", "settings == NULL", a6, a7, a8, v34);
  *a4 = 0;
  if (!cf || !*(_BYTE *)(cf[3] + 10))
    return 0;
  if (!a1)
    return CGCreateSettingsForDefaultToneMapping(cf, a3, a4, a9, a10, a11, (uint64_t)a4, a5, a6, a7, a8);
  if (a9 < 1.0 && a9 != 0.0)
    return 0;
  v18 = CFGetTypeID(cf);
  if (kCGColorSpaceSceneReferredDerivative_block_invoke_once != -1)
  {
    v32 = v18;
    dispatch_once(&kCGColorSpaceSceneReferredDerivative_block_invoke_once, &__block_literal_global_77);
    v18 = v32;
  }
  result = 0;
  if (a3 && v18 == CGColorSpaceGetTypeID_type_id)
  {
    v20 = CFGetTypeID(a3);
    if (kCGColorSpaceSceneReferredDerivative_block_invoke_once != -1)
    {
      v33 = v20;
      dispatch_once(&kCGColorSpaceSceneReferredDerivative_block_invoke_once, &__block_literal_global_77);
      v20 = v33;
    }
    if (v20 == CGColorSpaceGetTypeID_type_id)
    {
      v27 = conversion_type(cf, a3);
      result = 0;
      switch(v27)
      {
        case 0:
          result = (uint64_t)settings_edr_to_edr(a1, (uint64_t)cf, (uint64_t)a3, a4, a9, a10, a11, v23, v24, v25, v26);
          break;
        case 1:
          result = settings_edr_to_hdr(a1, (uint64_t)cf, (uint64_t)a3, a4, a9, a10, a11, v23, v24, v25, v26);
          break;
        case 2:
          result = (uint64_t)settings_edr_to_sdr(a1, (_BOOL8)cf, (uint64_t)a3, a4, a9, a10, a11);
          break;
        case 3:
          result = (uint64_t)settings_hdr_to_edr(a1, cf, a3, a4, a9, a10, a11, v23, v24, v25, v26);
          break;
        case 4:
          result = settings_hdr_to_hdr(a1, (uint64_t)cf, a3, a4, a9, a10, a11, v23, v24, v25, v26);
          break;
        case 5:
          if (a9 == 0.0)
            v28 = 1.0;
          else
            v28 = a9;
          if (v28 != 1.0)
            return 0;
          result = (uint64_t)settings_hdr_to_sdr(a1, (_BOOL8)cf, a3, a4, a10, a11);
          break;
        case 7:
          if (a10 == 0.0)
            v29 = 1.0;
          else
            v29 = a10;
          if (v29 != 1.0)
            return 0;
          default_settings_sdr_to_hdr((uint64_t)cf, (_BOOL8)a3, v21, v22, v23, v24, v25, v26);
          result = 1;
          break;
        case 9:
          v30 = cf[3];
          if (*(_BYTE *)(v30 + 13)
            || *(_BYTE *)(v30 + 16)
            || !*(_BYTE *)(v30 + 17) && *(_DWORD *)(v30 + 24) == 1
            || *(_BYTE *)(v30 + 16)
            || *(_BYTE *)(v30 + 17))
          {
            v31 = a3[3];
            if (*(_BYTE *)(v31 + 13)
              || *(_BYTE *)(v31 + 16)
              || !*(_BYTE *)(v31 + 17) && *(_DWORD *)(v31 + 24) == 1
              || *(_BYTE *)(v31 + 16)
              || *(_BYTE *)(v31 + 17))
            {
              _CGHandleAssert("CGCreateToneMappingSettingForMethod", 1572, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "(color_space_is_sdr(target_color_space) == false && CGColorSpaceUsesExtendedRange(target_color_space) == false && CGColorSpaceUsesITUR_2100TF(target_color_space) == false) || (color_space_is_sdr(source_color_space) == false && CGColorSpaceUsesExtendedRange(source_color_space) == false && CGColorSpaceUsesITUR_2100TF(source_color_space) == false)", "color spaces are not unknown", v24, v25, v26, v34);
            }
          }
          return 0;
        default:
          return result;
      }
      return result;
    }
    return 0;
  }
  return result;
}

CFMutableDictionaryRef settings_edr_to_edr(int a1, uint64_t a2, uint64_t a3, __CFDictionary **a4, float a5, float a6, float a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char vars0;

  if (!a2 || !*(_BYTE *)(*(_QWORD *)(a2 + 24) + 13))
    _CGHandleAssert("settings_edr_to_edr", 1275, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "CGColorSpaceUsesExtendedRange(target_color_space) == true", "Target color space is not extended", a9, a10, a11, vars0);
  if (!a3 || !*(_BYTE *)(*(_QWORD *)(a3 + 24) + 13))
    _CGHandleAssert("settings_edr_to_edr", 1276, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "CGColorSpaceUsesExtendedRange(source_color_space) == true", "Source color space is not extended", a9, a10, a11, vars0);
  switch(a1)
  {
    case 5:
      return (CFMutableDictionaryRef)default_settings_for_no_tone_mapping(a4);
    case 4:
      if (fabsf(a5 + -1.0) < 0.00001)
        return default_settings_for_exr_gamma_mapping(a4);
      break;
    case 2:
      return default_rwtm_settings(a4, a5, a6, a7);
  }
  return 0;
}

uint64_t settings_edr_to_hdr(int a1, uint64_t a2, uint64_t a3, CFMutableDictionaryRef *a4, float a5, float a6, float a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  char vars0;

  if (!a2 || (v11 = *(_QWORD *)(a2 + 24), !*(_BYTE *)(v11 + 16)) && !*(_BYTE *)(v11 + 17))
    _CGHandleAssert("settings_edr_to_hdr", 1301, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "CGColorSpaceUsesITUR_2100TF(target_color_space) == true", "Target color space is not HDR", a9, a10, a11, vars0);
  if (!a3 || !*(_BYTE *)(*(_QWORD *)(a3 + 24) + 13))
    _CGHandleAssert("settings_edr_to_hdr", 1302, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "CGColorSpaceUsesExtendedRange(source_color_space) == true", "Source color space is not extended", a9, a10, a11, vars0);
  if (a1 == 3)
  {
    if (a5 == 0.0 && a6 == 0.0)
      return 1;
    else
      return a6 == 4.9261 && a5 == a6;
  }
  else if (a1 == 2)
  {
    return (uint64_t)default_rwtm_settings(a4, a5, a6, a7);
  }
  else
  {
    return 0;
  }
}

CFMutableDictionaryRef settings_edr_to_sdr(int a1, _BOOL8 a2, uint64_t a3, __CFDictionary **a4, float a5, float a6, float a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;

  if (!color_space_is_sdr(a2))
    _CGHandleAssert("settings_edr_to_sdr", 1328, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "color_space_is_sdr(target_color_space) == true", "Target color space is not SDR", v13, v14, v15, v17);
  if (!a3 || !*(_BYTE *)(*(_QWORD *)(a3 + 24) + 13))
    _CGHandleAssert("settings_edr_to_sdr", 1329, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "CGColorSpaceUsesExtendedRange(source_color_space) == true", "Source color space is not extended", v13, v14, v15, v17);
  if (a5 != 1.0)
    _CGHandleAssert("settings_edr_to_sdr", 1330, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "target_headroom == 1.0f", "Target headroom is not SDR", v13, v14, v15, v17);
  switch(a1)
  {
    case 5:
      return (CFMutableDictionaryRef)default_settings_for_no_tone_mapping(a4);
    case 4:
      return default_settings_for_exr_gamma_mapping(a4);
    case 2:
      return default_rwtm_settings(a4, 1.0, a6, a7);
  }
  return 0;
}

CFMutableDictionaryRef settings_hdr_to_edr(int a1, _QWORD *a2, _QWORD *a3, CFMutableDictionaryRef *a4, float a5, float a6, float a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  float v15;
  float HeadroomInfo;
  uint64_t v18;
  CFMutableDictionaryRef result;
  char v20;

  if (!a2 || !*(_BYTE *)(a2[3] + 13))
    _CGHandleAssert("settings_hdr_to_edr", 1352, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "CGColorSpaceUsesExtendedRange(target_color_space) == true", "Target color space is not extended", a9, a10, a11, v20);
  if (!a3 || (v15 = a6, HeadroomInfo = a5, v18 = a3[3], !*(_BYTE *)(v18 + 16)) && !*(_BYTE *)(v18 + 17))
    _CGHandleAssert("settings_hdr_to_edr", 1353, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "CGColorSpaceUsesITUR_2100TF(source_color_space) == true", "Source color space is not HDR", a9, a10, a11, v20);
  result = 0;
  switch(a1)
  {
    case 1:
      result = (CFMutableDictionaryRef)CGColorSpaceContainsFlexGTCInfo((_BOOL8)a3);
      if ((_DWORD)result)
        goto LABEL_8;
      break;
    case 2:
LABEL_8:
      if (HeadroomInfo == 0.0)
        HeadroomInfo = CGColorSpaceGetHeadroomInfo(a2, 0);
      if (v15 == 0.0)
        v15 = CGColorSpaceGetHeadroomInfo(a3, 0);
      result = default_settings_hdr_to_any(a3, a4, HeadroomInfo, v15, a7);
      break;
    case 3:
      if (a5 == 0.0 && a6 == 0.0)
      {
        result = (CFMutableDictionaryRef)1;
      }
      else if (a6 == 4.9261)
      {
        result = (CFMutableDictionaryRef)(a5 == a6);
      }
      else
      {
        result = 0;
      }
      break;
    case 5:
      result = (CFMutableDictionaryRef)default_settings_for_no_tone_mapping(a4);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t settings_hdr_to_hdr(int a1, uint64_t a2, _QWORD *a3, CFMutableDictionaryRef *a4, float a5, float a6, float a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;

  if (!a2 || (v16 = *(_QWORD *)(a2 + 24), !*(_BYTE *)(v16 + 16)) && !*(_BYTE *)(v16 + 17))
    _CGHandleAssert("settings_hdr_to_hdr", 1387, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "CGColorSpaceUsesITUR_2100TF(target_color_space) == true", "Target color space is not HDR", a9, a10, a11, v20);
  if (!a3 || (v17 = a3[3], !*(_BYTE *)(v17 + 16)) && !*(_BYTE *)(v17 + 17))
    _CGHandleAssert("settings_hdr_to_hdr", 1388, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "CGColorSpaceUsesITUR_2100TF(source_color_space) == true", "Source color space is not HDR", a9, a10, a11, v20);
  v18 = 0;
  switch(a1)
  {
    case 1:
      if (CGColorSpaceContainsFlexGTCInfo((_BOOL8)a3))
        return (uint64_t)default_settings_hdr_to_any(a3, a4, a5, a6, a7);
      return 0;
    case 2:
      return (uint64_t)default_settings_hdr_to_any(a3, a4, a5, a6, a7);
    case 3:
      if (a5 == 0.0 && a6 == 0.0)
        return 1;
      if (a6 == 4.9261)
        return a5 == a6;
      return 0;
    case 5:
      return default_settings_for_no_tone_mapping(a4);
    default:
      return v18;
  }
}

CFMutableDictionaryRef settings_hdr_to_sdr(int a1, _BOOL8 a2, _QWORD *a3, CFMutableDictionaryRef *a4, float a5, float a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFMutableDictionaryRef result;
  char v16;

  if (!color_space_is_sdr(a2))
    _CGHandleAssert("settings_hdr_to_sdr", 1418, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "color_space_is_sdr(target_color_space) == true", "Target color space is not SDR", v11, v12, v13, v16);
  if (!a3 || (v14 = a3[3], !*(_BYTE *)(v14 + 16)) && !*(_BYTE *)(v14 + 17))
    _CGHandleAssert("settings_hdr_to_sdr", 1419, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "CGColorSpaceUsesITUR_2100TF(source_color_space) == true", "Source color space is not HDR", v11, v12, v13, v16);
  result = 0;
  switch(a1)
  {
    case 1:
      result = (CFMutableDictionaryRef)CGColorSpaceContainsFlexGTCInfo((_BOOL8)a3);
      if ((_DWORD)result)
        goto LABEL_7;
      break;
    case 2:
LABEL_7:
      result = default_settings_hdr_to_any(a3, a4, 1.0, a5, a6);
      break;
    case 3:
      if (a5 == 0.0)
      {
        result = (CFMutableDictionaryRef)1;
      }
      else if (a5 == 4.9261)
      {
        result = (CFMutableDictionaryRef)(a5 == 1.0);
      }
      else
      {
        result = 0;
      }
      break;
    case 5:
      result = (CFMutableDictionaryRef)default_settings_for_no_tone_mapping(a4);
      break;
    default:
      return result;
  }
  return result;
}

BOOL default_settings_for_no_tone_mapping(__CFDictionary **a1)
{
  __CFDictionary *Mutable;
  __CFDictionary *v3;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v3 = Mutable;
  if (Mutable)
  {
    CFDictionarySetValue(Mutable, CFSTR("kCGSkipToneMappingForBT2100"), (const void *)*MEMORY[0x1E0C9AE50]);
    *a1 = v3;
  }
  return v3 != 0;
}

CFMutableDictionaryRef default_settings_for_exr_gamma_mapping(CFMutableDictionaryRef *a1)
{
  const __CFAllocator *v2;
  CFMutableDictionaryRef result;
  const void *v4;
  CFMutableDictionaryRef v5;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (result)
  {
    v4 = result;
    CFDictionarySetValue(result, CFSTR("kCGApplyEXRToneMappingGamma"), (const void *)*MEMORY[0x1E0C9AE50]);
    result = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (result)
    {
      v5 = result;
      CFDictionarySetValue(result, CFSTR("kCGImageExtendedRangeToneMappingInfo"), v4);
      *a1 = v5;
      return (CFMutableDictionaryRef)1;
    }
  }
  return result;
}

uint64_t CGToneMappingMethodFromString(const void *a1)
{
  CFTypeID v2;
  uint64_t result;

  v2 = CFGetTypeID(a1);
  if (v2 != CFStringGetTypeID())
    return 5;
  if (CFEqual(a1, CFSTR("kCGToneMappingDefault")) == 1)
    return 0;
  result = CFEqual(a1, CFSTR("kCGToneMappingImageSpecificLumaScaling"));
  if ((_DWORD)result != 1)
  {
    if (CFEqual(a1, CFSTR("kCGToneMappingReferenceWhiteBased")) == 1)
      return 2;
    if (CFEqual(a1, CFSTR("kCGToneMappingITURecommended")) == 1)
      return 3;
    if (CFEqual(a1, CFSTR("kCGToneMappingEXRGamma")) == 1)
      return 4;
    CFEqual(a1, CFSTR("kCGToneMappingNone"));
    return 5;
  }
  return result;
}

uint64_t CGCreateResolvedToneMappingSettingForMethod(unsigned int a1, _QWORD *a2, _QWORD *a3, const void *a4, CFMutableDictionaryRef *a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, float a10, float a11)
{
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __CFDictionary *Mutable;
  CFTypeID v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  const char *v32;
  uint64_t result;
  CFTypeID v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const void *Value;
  const void *v43;
  CFTypeID v44;
  CFTypeID TypeID;
  const void *v46;
  const void *v47;
  CFTypeID v48;
  CFTypeID v49;
  const void *v50;
  const void *v51;
  CFTypeID v52;
  CFTypeID v53;
  const void *v54;
  const void *v55;
  CFTypeID v56;
  CFTypeID v57;
  const void *v58;
  const void *v59;
  CFTypeID v60;
  CFTypeID v61;
  const __CFString *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const void *v70;
  const void *v71;
  CFTypeID v72;
  CFTypeID v73;
  const void *v74;
  CFTypeID v75;
  CFTypeID v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BOOL4 v84;
  CFTypeID v85;
  const __CFDictionary *v86;
  const __CFDictionary *v87;
  CFTypeID v88;
  const __CFDictionary *v89;
  const __CFDictionary *v90;
  CFTypeID v91;
  CFMutableDictionaryRef MutableCopy;
  __CFDictionary *v93;
  const void *v94;
  const void *v95;
  CFTypeID v96;
  const void *v97;
  const void *v98;
  CFTypeID v99;
  const void *v100;
  const void *v101;
  CFTypeID v102;
  const void *v103;
  const void *v104;
  CFTypeID v105;
  char v106;
  const __CFString *v107;
  const __CFString *v108;
  const __CFString *v109;
  const __CFString *v110;
  const __CFString *v111;
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  v14 = CGCreateToneMappingSettingForMethod(a1, a2, a3, a5, (uint64_t)a5, a6, a7, a8, a9, a10, a11);
  if (a4 && v14)
  {
    Mutable = *a5;
    if (!*a5)
    {
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      *a5 = Mutable;
    }
    switch(a1)
    {
      case 0u:
        v23 = CFGetTypeID(a4);
        if (v23 == CFDictionaryGetTypeID() && !CFDictionaryGetCount((CFDictionaryRef)a4))
          return 1;
        v31 = "No options are accepted for 'kCGToneMappingDefault' - ignored";
        goto LABEL_55;
      case 1u:
        v34 = CFGetTypeID(a4);
        if (v34 == CFDictionaryGetTypeID() && !CFDictionaryGetCount((CFDictionaryRef)a4))
          return 1;
        v31 = "No options are accepted for 'kCGToneMappingImageSpecificLumaScaling' - ignored";
        goto LABEL_55;
      case 2u:
        v107 = CFSTR("kCGRWTMSourcePeak");
        v108 = CFSTR("kCGRWTMSourceReferenceWhite");
        v109 = CFSTR("kCGRWTMEDRHeadroom");
        v110 = CFSTR("kCGRWTMTargetReferenceWhiteBase");
        v111 = CFSTR("kCGRWTMReferenceWhiteThreshold");
        if (!verify_options_dictionary((const __CFDictionary *)a4, (const void **)&v107, 5))
          CGPostError((uint64_t)"Unkonwn options for 'kCGToneMappingReferenceWhiteBased' will be ignored", v35, v36, v37, v38, v39, v40, v41, v106);
        Value = CFDictionaryGetValue((CFDictionaryRef)a4, CFSTR("kCGRWTMSourcePeak"));
        if (Value)
        {
          v43 = Value;
          v44 = CFGetTypeID(Value);
          TypeID = CFNumberGetTypeID();
          if (Mutable)
          {
            if (v44 == TypeID)
              CFDictionarySetValue(Mutable, CFSTR("kCGRWTMSourcePeak"), v43);
          }
        }
        v46 = CFDictionaryGetValue((CFDictionaryRef)a4, CFSTR("kCGRWTMSourceReferenceWhite"));
        if (v46)
        {
          v47 = v46;
          v48 = CFGetTypeID(v46);
          v49 = CFNumberGetTypeID();
          if (Mutable)
          {
            if (v48 == v49)
              CFDictionarySetValue(Mutable, CFSTR("kCGRWTMSourceReferenceWhite"), v47);
          }
        }
        v50 = CFDictionaryGetValue((CFDictionaryRef)a4, CFSTR("kCGRWTMEDRHeadroom"));
        if (v50)
        {
          v51 = v50;
          v52 = CFGetTypeID(v50);
          v53 = CFNumberGetTypeID();
          if (Mutable)
          {
            if (v52 == v53)
              CFDictionarySetValue(Mutable, CFSTR("kCGRWTMEDRHeadroom"), v51);
          }
        }
        v54 = CFDictionaryGetValue((CFDictionaryRef)a4, CFSTR("kCGRWTMTargetReferenceWhiteBase"));
        if (v54)
        {
          v55 = v54;
          v56 = CFGetTypeID(v54);
          v57 = CFNumberGetTypeID();
          if (Mutable)
          {
            if (v56 == v57)
              CFDictionarySetValue(Mutable, CFSTR("kCGRWTMTargetReferenceWhiteBase"), v55);
          }
        }
        v58 = CFDictionaryGetValue((CFDictionaryRef)a4, CFSTR("kCGRWTMReferenceWhiteThreshold"));
        if (!v58)
          return 1;
        v59 = v58;
        v60 = CFGetTypeID(v58);
        v61 = CFNumberGetTypeID();
        result = 1;
        if (!Mutable || v60 != v61)
          return result;
        v62 = CFSTR("kCGRWTMReferenceWhiteThreshold");
        goto LABEL_48;
      case 3u:
        v107 = CFSTR("kCGUse100nitsHLGOOTF");
        v108 = CFSTR("kCGUseBT1886ForCoreVideoGamma");
        v109 = CFSTR("kCGSkipBoostToHDR");
        if (!verify_options_dictionary((const __CFDictionary *)a4, (const void **)&v107, 3))
          CGPostError((uint64_t)"Unkonwn options for 'kCGToneMappingITURecommended' will be ignored", v63, v64, v65, v66, v67, v68, v69, v106);
        v70 = CFDictionaryGetValue((CFDictionaryRef)a4, CFSTR("kCGUse100nitsHLGOOTF"));
        if (v70)
        {
          v71 = v70;
          v72 = CFGetTypeID(v70);
          v73 = CFBooleanGetTypeID();
          if (Mutable)
          {
            if (v72 == v73)
              CFDictionarySetValue(Mutable, CFSTR("kCGUse100nitsHLGOOTF"), v71);
          }
        }
        v74 = CFDictionaryGetValue((CFDictionaryRef)a4, CFSTR("kCGUseBT1886ForCoreVideoGamma"));
        if (!v74)
          return 1;
        v59 = v74;
        v75 = CFGetTypeID(v74);
        v76 = CFBooleanGetTypeID();
        result = 1;
        if (!Mutable || v75 != v76)
          return result;
        v62 = CFSTR("kCGUseBT1886ForCoreVideoGamma");
LABEL_48:
        CFDictionarySetValue(Mutable, v62, v59);
        return 1;
      case 4u:
        v107 = CFSTR("kCGEXRToneMappingGammaDefog");
        v108 = CFSTR("kCGEXRToneMappingGammaExposure");
        v109 = CFSTR("kCGEXRToneMappingGammaKneeLow");
        v110 = CFSTR("kCGEXRToneMappingGammaKneeHigh");
        v84 = verify_options_dictionary((const __CFDictionary *)a4, (const void **)&v107, 4);
        if (v84)
        {
          if (!Mutable)
            return 1;
        }
        else
        {
          CGPostError((uint64_t)"Unkonwn options for 'kCGToneMappingEXRGamma' will be ignored", v77, v78, v79, v80, v81, v82, v83, v106);
          if (!Mutable)
            goto LABEL_11;
        }
        v86 = (const __CFDictionary *)CFDictionaryGetValue(Mutable, CFSTR("kCGImageExtendedRangeToneMappingInfo"));
        if (!v86)
          goto LABEL_82;
        v87 = v86;
        v88 = CFGetTypeID(v86);
        if (v88 != CFDictionaryGetTypeID())
          goto LABEL_82;
        v89 = (const __CFDictionary *)CFDictionaryGetValue(v87, CFSTR("kCGApplyEXRToneMappingGamma"));
        if (v89 && (v90 = v89, v91 = CFGetTypeID(v89), v91 == CFDictionaryGetTypeID()))
          MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v90);
        else
          MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v93 = MutableCopy;
        if (!MutableCopy)
          goto LABEL_78;
        v94 = CFDictionaryGetValue((CFDictionaryRef)a4, CFSTR("kCGEXRToneMappingGammaDefog"));
        if (v94)
        {
          v95 = v94;
          v96 = CFGetTypeID(v94);
          if (v96 == CFNumberGetTypeID())
          {
            CFDictionarySetValue(v93, CFSTR("kCGEXRToneMappingGammaDefog"), v95);
            v84 = 1;
          }
        }
        v97 = CFDictionaryGetValue((CFDictionaryRef)a4, CFSTR("kCGEXRToneMappingGammaExposure"));
        if (v97)
        {
          v98 = v97;
          v99 = CFGetTypeID(v97);
          if (v99 == CFNumberGetTypeID())
          {
            CFDictionarySetValue(v93, CFSTR("kCGEXRToneMappingGammaExposure"), v98);
            v84 = 1;
          }
        }
        v100 = CFDictionaryGetValue((CFDictionaryRef)a4, CFSTR("kCGEXRToneMappingGammaKneeLow"));
        if (v100)
        {
          v101 = v100;
          v102 = CFGetTypeID(v100);
          if (v102 == CFNumberGetTypeID())
          {
            CFDictionarySetValue(v93, CFSTR("kCGEXRToneMappingGammaKneeLow"), v101);
            v84 = 1;
          }
        }
        v103 = CFDictionaryGetValue((CFDictionaryRef)a4, CFSTR("kCGEXRToneMappingGammaKneeHigh"));
        if (v103 && (v104 = v103, v105 = CFGetTypeID(v103), v105 == CFNumberGetTypeID()))
        {
          CFDictionarySetValue(v93, CFSTR("kCGEXRToneMappingGammaKneeHigh"), v104);
        }
        else
        {
LABEL_78:
          if (!v84)
            goto LABEL_80;
        }
        CFDictionarySetValue(v87, CFSTR("kCGApplyEXRToneMappingGamma"), v93);
        v84 = 1;
LABEL_80:
        if (v93)
          CFRelease(v93);
LABEL_82:
        if (v84)
          return 1;
        v32 = "EXRGamma";
        break;
      case 5u:
        v85 = CFGetTypeID(a4);
        if (v85 == CFDictionaryGetTypeID() && !CFDictionaryGetCount((CFDictionaryRef)a4))
          return 1;
        v31 = "No options are accepted for 'kCGToneMappingNone' - ignored";
LABEL_55:
        CGPostError((uint64_t)v31, v24, v25, v26, v27, v28, v29, v30, v106);
        return 1;
      default:
        return 1;
    }
LABEL_12:
    CGPostError((uint64_t)"Resolving settings for tone mapping method %s failed", v15, v16, v17, v18, v19, v20, v21, (char)v32);
    return 0;
  }
  if ((v14 & 1) == 0)
  {
    if (a1 >= 6)
      _CGHandleAssert("method_name", 1927, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "false", "CGToneMapping name unkonwn", v19, v20, v21, v106);
LABEL_11:
    v32 = off_1E1630BE8[a1];
    goto LABEL_12;
  }
  return 1;
}

BOOL verify_options_dictionary(const __CFDictionary *a1, const void **a2, uint64_t a3)
{
  CFIndex Count;
  uint64_t v7;
  const void *v8;

  Count = CFDictionaryGetCount(a1);
  v7 = 0;
  do
  {
    v8 = *a2++;
    if (CFDictionaryContainsKey(a1, v8) == 1)
      ++v7;
    --a3;
  }
  while (a3);
  return Count == v7;
}

CFDictionaryRef CGColorConversionInfoCreateOptionsForToneMapping(unsigned int a1, _QWORD *a2, _QWORD *a3, const void *a4, float a5, float a6, float a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v11;
  CFDictionaryRef result;
  void *values;
  void *keys;
  CFDictionaryRef theDict;

  if (!a2)
    return 0;
  theDict = 0;
  v11 = CGCreateResolvedToneMappingSettingForMethod(a1, a2, a3, a4, &theDict, a9, a10, a11, a5, a6, a7);
  result = 0;
  if (v11 && theDict)
  {
    if (CFDictionaryGetCount(theDict) < 1)
    {
      result = 0;
      if ((v11 & 1) != 0)
        return result;
      goto LABEL_7;
    }
    values = theDict;
    keys = CFSTR("kCGColorConversionInfoOptions");
    result = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  }
  if ((v11 & 1) != 0)
    return result;
LABEL_7:
  if (CGColorConversionInfoCreateOptionsForToneMapping_predicate != -1)
    dispatch_once(&CGColorConversionInfoCreateOptionsForToneMapping_predicate, &__block_literal_global_40);
  result = (CFDictionaryRef)CGColorConversionInfoCreateOptionsForToneMapping_bad_color_conversion_info_options;
  if (CGColorConversionInfoCreateOptionsForToneMapping_bad_color_conversion_info_options)
    return (CFDictionaryRef)CFRetain((CFTypeRef)CGColorConversionInfoCreateOptionsForToneMapping_bad_color_conversion_info_options);
  return result;
}

CFDictionaryRef CGCreatePayloadForToneMapping(unsigned int a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFIndex v9;
  char v11;
  void *values[3];
  void *keys[2];
  const __CFString *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)keys = xmmword_1E1630A60;
  v14 = CFSTR("kCGToneMappingMethodOptions");
  if (a1 >= 6)
    _CGHandleAssert("CGToneMappingMethodString", 1874, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfo.c", "false", "CGToneMapping name unkonwn", a6, a7, a8, v11);
  values[0] = *((void **)&off_1E1630BB8 + a1);
  if (CGImageDefaultReferenceWhite_once != -1)
    dispatch_once(&CGImageDefaultReferenceWhite_once, &__block_literal_global_205);
  values[1] = (void *)CGImageDefaultReferenceWhite_media_white;
  values[2] = a2;
  if (a2)
    v9 = 3;
  else
    v9 = 2;
  return CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)values, v9, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
}

void low_memory_notification_callback(__CFNotificationCenter *a1, os_unfair_lock_s *a2, const __CFString *a3, const void *a4, const __CFDictionary *a5)
{
  os_unfair_lock_s *v6;
  uint64_t v7;

  if (a2)
  {
    v6 = a2 + 52;
    os_unfair_lock_lock(a2 + 52);
    v7 = *(_QWORD *)&a2[50]._os_unfair_lock_opaque;
    if (v7 && *(_QWORD *)(v7 + 16) >= 2uLL)
    {
      do
        LRUCache::pop_back((uint64_t **)v7);
      while (*(_QWORD *)(v7 + 16) > 1uLL);
    }
    os_unfair_lock_unlock(v6);
  }
}

void LRUCache::pop_back(uint64_t **this)
{
  uint64_t *v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v1 = this[2];
  if (v1
    && ((v3 = (*this)[2], !*((_BYTE *)this + 72))
     || (!v3 ? (v4 = 0) : (v4 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8)),
         printf("LRUCache: removing page: %lu\n", v4),
         (v1 = this[2]) != 0)))
  {
    v5 = *this;
    v6 = **this;
    *(_QWORD *)(v6 + 8) = (*this)[1];
    *(_QWORD *)v5[1] = v6;
    this[2] = (uint64_t *)((char *)v1 - 1);
    operator delete(v5);
    v7 = this + 3;
    v8 = std::__hash_table<std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>,std::__unordered_map_hasher<CGPDFPage *,std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>,std::hash<CGPDFPage *>,std::equal_to<CGPDFPage *>,true>,std::__unordered_map_equal<CGPDFPage *,std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>,std::equal_to<CGPDFPage *>,std::hash<CGPDFPage *>,true>,std::allocator<std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>>>::find<CGPDFPage *>(v7, v3);
    if (v8)
      std::__hash_table<std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>,std::__unordered_map_hasher<CGPDFPage *,std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>,std::hash<CGPDFPage *>,std::equal_to<CGPDFPage *>,true>,std::__unordered_map_equal<CGPDFPage *,std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>,std::equal_to<CGPDFPage *>,std::hash<CGPDFPage *>,true>,std::allocator<std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>>>::erase(v7, v8);
    CGPDFPagePurgeResources(v3);
  }
  else
  {
    __break(1u);
  }
}

void std::__hash_table<std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>,std::__unordered_map_hasher<CGPDFPage *,std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>,std::hash<CGPDFPage *>,std::equal_to<CGPDFPage *>,true>,std::__unordered_map_equal<CGPDFPage *,std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>,std::equal_to<CGPDFPage *>,std::hash<CGPDFPage *>,true>,std::allocator<std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>>>::erase(_QWORD *a1, _QWORD *__p)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  v3 = __p[1];
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    if (v3 >= *(_QWORD *)&v2)
      v3 %= *(_QWORD *)&v2;
  }
  else
  {
    v3 &= *(_QWORD *)&v2 - 1;
  }
  v5 = *(_QWORD **)(*a1 + 8 * v3);
  do
  {
    v6 = v5;
    v5 = (_QWORD *)*v5;
  }
  while (v5 != __p);
  if (v6 == a1 + 2)
    goto LABEL_18;
  v7 = v6[1];
  if (v4.u32[0] > 1uLL)
  {
    if (v7 >= *(_QWORD *)&v2)
      v7 %= *(_QWORD *)&v2;
  }
  else
  {
    v7 &= *(_QWORD *)&v2 - 1;
  }
  if (v7 != v3)
  {
LABEL_18:
    if (!*__p)
      goto LABEL_19;
    v8 = *(_QWORD *)(*__p + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v8 >= *(_QWORD *)&v2)
        v8 %= *(_QWORD *)&v2;
    }
    else
    {
      v8 &= *(_QWORD *)&v2 - 1;
    }
    if (v8 != v3)
LABEL_19:
      *(_QWORD *)(*a1 + 8 * v3) = 0;
  }
  v9 = *__p;
  if (*__p)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v10 >= *(_QWORD *)&v2)
        v10 %= *(_QWORD *)&v2;
    }
    else
    {
      v10 &= *(_QWORD *)&v2 - 1;
    }
    if (v10 != v3)
    {
      *(_QWORD *)(*a1 + 8 * v10) = v6;
      v9 = *__p;
    }
  }
  *v6 = v9;
  *__p = 0;
  --a1[3];
  operator delete(__p);
}

uint64_t CGPDFDocumentFinalize(char *a1)
{
  void *v2;
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  __CFNotificationCenter *LocalCenter;
  uint64_t *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  const void *v19;
  const void *v20;
  const void *v21;

  v2 = (void *)*((_QWORD *)a1 + 3);
  if (v2)
  {
    if (*((_QWORD *)a1 + 4))
    {
      v3 = 0;
      do
      {
        v4 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 8 * v3);
        if (v4)
        {
          if (*(_BYTE *)(v4 + 24)
            || (*(_QWORD *)(v4 + 16) = 0, (v4 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 8 * v3)) != 0))
          {
            CFRelease((CFTypeRef)v4);
          }
        }
        ++v3;
      }
      while (v3 < *((_QWORD *)a1 + 4));
      v2 = (void *)*((_QWORD *)a1 + 3);
    }
    free(v2);
  }
  v5 = (const void *)*((_QWORD *)a1 + 2);
  if (v5)
    CFRelease(v5);
  v6 = (const void *)*((_QWORD *)a1 + 5);
  if (v6)
    CFRelease(v6);
  v7 = (const void *)*((_QWORD *)a1 + 6);
  if (v7)
    CFRelease(v7);
  v8 = (const void *)*((_QWORD *)a1 + 24);
  if (v8)
    CFRelease(v8);
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveObserver(LocalCenter, a1, CFSTR("CGPDFDocumentLowMemoryNotificationName"), 0);
  os_unfair_lock_lock((os_unfair_lock_t)a1 + 52);
  v10 = (uint64_t *)*((_QWORD *)a1 + 25);
  if (v10)
  {
    v11 = (_QWORD *)v10[5];
    if (v11)
    {
      do
      {
        v12 = (_QWORD *)*v11;
        operator delete(v11);
        v11 = v12;
      }
      while (v12);
    }
    v13 = (void *)v10[3];
    v10[3] = 0;
    if (v13)
      operator delete(v13);
    if (v10[2])
    {
      v15 = *v10;
      v14 = (uint64_t *)v10[1];
      v16 = *v14;
      *(_QWORD *)(v16 + 8) = *(_QWORD *)(*v10 + 8);
      **(_QWORD **)(v15 + 8) = v16;
      v10[2] = 0;
      if (v14 != v10)
      {
        do
        {
          v17 = (uint64_t *)v14[1];
          operator delete(v14);
          v14 = v17;
        }
        while (v17 != v10);
      }
    }
    MEMORY[0x186DC23C4](v10, 0x10A0C404B5732FELL);
  }
  *((_QWORD *)a1 + 25) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)a1 + 52);
  os_unfair_lock_lock((os_unfair_lock_t)a1 + 53);
  v18 = *((_QWORD *)a1 + 27);
  if (v18)
  {
    CFRelease(*(CFTypeRef *)(v18 + 16));
    v19 = *(const void **)(v18 + 24);
    if (v19)
      CFRelease(v19);
    v20 = *(const void **)(v18 + 32);
    if (v20)
      CFRelease(v20);
    free((void *)v18);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1 + 53);
  os_unfair_lock_lock((os_unfair_lock_t)a1 + 56);
  v21 = (const void *)*((_QWORD *)a1 + 29);
  if (v21)
    CFRelease(v21);
  os_unfair_lock_unlock((os_unfair_lock_t)a1 + 56);
  pthread_mutex_destroy((pthread_mutex_t *)a1 + 2);
  return pthread_mutex_destroy((pthread_mutex_t *)(a1 + 56));
}

CFTypeID CGPDFDocumentGetTypeID(void)
{
  if (CGPDFDocumentGetTypeID::onceToken != -1)
    dispatch_once(&CGPDFDocumentGetTypeID::onceToken, &__block_literal_global_18_1239);
  return CGPDFDocumentGetTypeID::id;
}

void CGPDFDocumentRelease(CGPDFDocumentRef document)
{
  if (document)
    CFRelease(document);
}

BOOL CGPDFDocumentIsLinearized(_BOOL8 result)
{
  if (result)
    return *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(result + 16) + 16) + 24) != 0;
  return result;
}

BOOL CGPDFDocumentIsEncrypted(CGPDFDocumentRef document)
{
  if (document)
    LOBYTE(document) = *(_QWORD *)(**(_QWORD **)(*((_QWORD *)document + 2) + 16) + 40) != 0;
  return (char)document;
}

CGPDFDocumentRef CGPDFDocumentCreateWithURL(CFURLRef url)
{
  CGDataProviderRef v2;
  CGDataProvider *v3;
  CGPDFDocumentRef v4;
  uint64_t v5;
  const __CFNumber *Property;
  uint64_t v7;
  void *v8;
  const __CFString *v10;
  _QWORD valuePtr[2];

  valuePtr[1] = *MEMORY[0x1E0C80C00];
  if (!url)
    return 0;
  v2 = CGDataProviderCreateWithURL(url);
  if (!v2)
    return 0;
  v3 = v2;
  CGDataProviderSetProperty((uint64_t)v2, CFSTR("from_url"), (const void *)*MEMORY[0x1E0C9AE50]);
  v4 = CGPDFDocumentCreateWithProvider(v3);
  v5 = *((_QWORD *)v3 + 34);
  if (v5)
  {
    Property = (const __CFNumber *)CGPropertiesGetProperty(v5, CFSTR("CGDataProviderTrustToken"));
    CGDataProviderRelease(v3);
    if (Property)
    {
      LODWORD(valuePtr[0]) = 0;
      if (CFNumberGetValue(Property, kCFNumberIntType, valuePtr))
      {
        v7 = rootless_verify_trusted_by_self_token();
        goto LABEL_9;
      }
    }
  }
  else
  {
    CGDataProviderRelease(v3);
  }
  v7 = 0;
LABEL_9:
  v8 = (void *)MEMORY[0x186DC2BD4]();
  v10 = CFSTR("isTrustedURL");
  valuePtr[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v7);
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", valuePtr, &v10, 1);
  send_analytics_event((uint64_t)"com.apple.CoreGraphics.CGPDFDocumentCreateWithURL");
  objc_autoreleasePoolPop(v8);
  if (v4)
  {
    if (*(_QWORD *)(**(_QWORD **)(*((_QWORD *)v4 + 2) + 16) + 40) || CGPDFDocumentGetPage(v4, 1uLL))
    {
      *((_QWORD *)v4 + 5) = url;
      CFRetain(url);
      return v4;
    }
    CFRelease(v4);
    return 0;
  }
  return v4;
}

CGPDFDocumentRef CGPDFDocumentRetain(CGPDFDocumentRef document)
{
  if (document)
    CFRetain(document);
  return document;
}

void CGPDFDocumentGetVersion(CGPDFDocumentRef document, int *majorVersion, int *minorVersion)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  int v20;
  const char *v24;
  CGPDFDictionary *trailer;
  int v26;
  int v27;
  char *v28;
  _BYTE value[11];
  _BYTE v30[53];

  *(_QWORD *)&v30[45] = *MEMORY[0x1E0C80C00];
  if (!document)
  {
    *minorVersion = 0;
    *majorVersion = 0;
    return;
  }
  v10 = *(uint64_t **)(*((_QWORD *)document + 2) + 16);
  v11 = *(_QWORD *)*v10;
  CGPDFSourceSetPosition(v11, 0, (uint64_t)minorVersion, v3, v4, v5, v6, v7);
  for (i = 0; i != 63; ++i)
  {
    v20 = CGPDFSourceGetc(v11, v12, v13, v14, v15, v16, v17, v18);
    if ((v20 + 1) <= 0xE && ((1 << (v20 + 1)) & 0x4801) != 0)
      break;
    value[i] = v20;
  }
  v28 = 0;
  value[i] = 0;
  if (*(_DWORD *)value == 1178882085 && value[4] == 45)
  {
    v24 = &value[5];
  }
  else
  {
    if (*(_QWORD *)value != 0x6F64412D53502125 || *(_QWORD *)&value[3] != 0x2D65626F64412D53)
      return;
    v24 = v30;
  }
  if ((convert_version(v24, majorVersion, minorVersion) & 1) != 0)
  {
    *(_QWORD *)value = 0;
    trailer = (CGPDFDictionary *)pdf_xref_get_trailer(*v10);
    if (CGPDFDictionaryGetDictionary(trailer, "Root", (CGPDFDictionaryRef *)value))
    {
      if (*(_QWORD *)value)
      {
        if (CGPDFDictionaryGetName(*(CGPDFDictionaryRef *)value, "Version", (const char **)&v28))
        {
          *(_DWORD *)value = 0;
          v27 = 0;
          if (convert_version(v28, value, &v27))
          {
            if (*(int *)value <= *majorVersion)
            {
              if (*(_DWORD *)value != *majorVersion)
                return;
              v26 = v27;
              if (v27 <= *minorVersion)
                return;
            }
            else
            {
              *majorVersion = *(_DWORD *)value;
              v26 = v27;
            }
            *minorVersion = v26;
          }
        }
      }
    }
  }
}

BOOL CGPDFDocumentUnlockWithPassword(CGPDFDocumentRef document, const char *password)
{
  if (document)
    LOBYTE(document) = pdf_document_unlock_with_password(*(_QWORD *)(**(_QWORD **)(*((_QWORD *)document + 2) + 16) + 40), (char *)password);
  return (char)document;
}

BOOL CGPDFDocumentUnlockAsOwnerWithPassword(_BOOL8 result, char *__s)
{
  uint64_t v2;
  size_t v4;
  uint64_t v5;
  size_t v6;
  int v7;
  int v8;

  if (result)
  {
    v2 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(result + 16) + 16) + 40);
    if (v2)
    {
      v4 = strlen(__s);
      v5 = *(_QWORD *)(v2 + 16);
      if (v5 && ((v6 = v4, __s) || !v4))
      {
        pthread_mutex_lock(&lock);
        v7 = CGPDFSecurityHandlerAuthenticateOwnerPassword(v5, __s, v6);
        *(_BYTE *)(v5 + 184) = v7;
        if (v7)
          v8 = 4095;
        else
          v8 = 0;
        *(_BYTE *)(v5 + 185) = v7;
        *(_DWORD *)(v5 + 188) = v8;
        pthread_mutex_unlock(&lock);
        return *(_BYTE *)(v5 + 185) != 0;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

BOOL CGPDFDocumentIsUnlocked(CGPDFDocumentRef document)
{
  uint64_t v1;
  uint64_t v2;

  if (!document)
    return 1;
  v1 = *(_QWORD *)(**(_QWORD **)(*((_QWORD *)document + 2) + 16) + 40);
  if (!v1)
    return 1;
  v2 = *(_QWORD *)(v1 + 16);
  return v2 && *(_BYTE *)(v2 + 184) != 0;
}

BOOL CGPDFDocumentIsUnlockedAsOwner(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  if (!a1)
    return 1;
  v1 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 16) + 40);
  if (!v1)
    return 1;
  v2 = *(_QWORD *)(v1 + 16);
  return v2 && *(_BYTE *)(v2 + 185) != 0;
}

BOOL CGPDFDocumentAllowsPrinting(CGPDFDocumentRef document)
{
  return (CGPDFDocumentGetPermissions((uint64_t)document) & 3) != 0;
}

uint64_t CGPDFDocumentGetPermissions(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  if (result)
  {
    v1 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(result + 16) + 16) + 40);
    if (v1)
    {
      v2 = *(_QWORD *)(v1 + 16);
      if (v2)
        v3 = (unsigned int *)(v2 + 188);
      else
        v3 = (unsigned int *)&CGPDFPermissionsNone;
      v4 = *v3;
    }
    else
    {
      v4 = 4095;
    }
    return (v4 >> 1) & 4 | ((int)(v4 << 31) >> 31) & (v4 >> 1) & 3;
  }
  return result;
}

BOOL CGPDFDocumentAllowsCopying(CGPDFDocumentRef document)
{
  return CGPDFDocumentGetPermissions((uint64_t)document) > 3;
}

size_t CGPDFDocumentGetNumberOfPages(size_t document)
{
  size_t v1;

  if (document)
  {
    v1 = document;
    CGAnalyticsSendPDFDocumentGetNumberOfPagesEvent();
    return (size_t)pdf_reader_get_number_of_pages(*(uint64_t **)(*(_QWORD *)(v1 + 16) + 16));
  }
  return document;
}

uint64_t CGPDFDocumentGetPageNoCreate(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (result)
  {
    v3 = result;
    v4 = *(uint64_t **)(*(_QWORD *)(result + 16) + 16);
    v5 = *(_QWORD *)(*v4 + 40);
    if ((!v5 || (v6 = *(_QWORD *)(v5 + 16)) != 0 && *(_BYTE *)(v6 + 184))
      && a2 - 1 < (unint64_t)pdf_reader_get_number_of_pages(v4)
      && (v7 = *(_QWORD *)(v3 + 24)) != 0)
    {
      return *(_QWORD *)(v7 + 8 * (a2 - 1));
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CGPDFDocumentCopyPage(uint64_t a1, unint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  if (!a1)
    return 0;
  v4 = *(uint64_t **)(*(_QWORD *)(a1 + 16) + 16);
  v5 = *(_QWORD *)(*v4 + 40);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 16);
    if (!v6 || !*(_BYTE *)(v6 + 184))
      return 0;
  }
  if (a2 - 1 >= (unint64_t)pdf_reader_get_number_of_pages(v4))
    return 0;
  ensure_page_array_exists(a1);
  return CGPDFPageCreate2((CFTypeRef *)a1, a2, 1);
}

CGPDFDictionaryRef CGPDFDocumentGetCatalog(CGPDFDictionaryRef document)
{
  CGPDFDictionaryRef v1;

  if (document)
  {
    v1 = document;
    CGAnalyticsSendPDFDocumentGetCatalogEvent();
    return pdf_document_get_catalog(**(_QWORD **)(*((_QWORD *)v1 + 2) + 16));
  }
  return document;
}

CGPDFDictionaryRef CGPDFDocumentGetInfo(CGPDFDictionaryRef document)
{
  CGPDFDictionaryRef v1;
  void *v2;
  uint64_t *v3;
  CGPDFDictionary *trailer;
  CGPDFDictionaryRef value;

  if (document)
  {
    v1 = document;
    v2 = (void *)MEMORY[0x186DC2BD4]();
    send_analytics_event((uint64_t)"com.apple.CoreGraphics.CGPDFDocumentGetInfo");
    objc_autoreleasePoolPop(v2);
    v3 = *(uint64_t **)(*((_QWORD *)v1 + 2) + 16);
    value = 0;
    trailer = (CGPDFDictionary *)pdf_xref_get_trailer(*v3);
    if (CGPDFDictionaryGetDictionary(trailer, "Info", &value))
      return value;
    else
      return 0;
  }
  return document;
}

CGPDFArrayRef CGPDFDocumentGetID(CGPDFArrayRef document)
{
  if (document)
    return *(CGPDFArrayRef *)(**(_QWORD **)(*((_QWORD *)document + 2) + 16) + 48);
  return document;
}

uint64_t CGPDFDocumentGetDataProvider(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = ***(_QWORD ***)(*(_QWORD *)(result + 16) + 16);
    if (v1)
      return *(_QWORD *)(v1 + 40);
    else
      return 0;
  }
  return result;
}

_QWORD *CGPDFDocumentGetPageDictionary(_QWORD *result, unint64_t a2)
{
  if (result)
    return pdf_document_get_page_dictionary(*(_QWORD *)(result[2] + 16), a2);
  return result;
}

BOOL CGDataProviderContainsLinearizedPDF(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  CGPDFDictionary *linearization_dictionary;
  _BOOL8 v29;
  CGPDFDictionary *v30;
  char v32;
  _BYTE __dst[4];

  if (!a1)
    return 0;
  v8 = a1[4];
  if (v8 == -1)
  {
    CGPostError((uint64_t)"Invalid data provider size. Sequential data providers are not supported for linearized PDF.\n", (uint64_t)a2, -1, a4, a5, a6, a7, a8, v32);
    return 0;
  }
  v10 = CGPDFSourceCreate(a1, 0, v8);
  if (!v10)
    return 0;
  v11 = v10;
  v12 = v10[2];
  if (v12 >= 4096)
    v13 = 4096;
  else
    v13 = v10[2];
  if (v12 == -1)
    v14 = 4096;
  else
    v14 = v13;
  v10[12] = v14;
  free((void *)v10[11]);
  v15 = malloc_type_calloc(1uLL, v14, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  v11[11] = v15;
  v11[13] = 0;
  v11[14] = 0;
  v11[15] = 0;
  v11[16] = v15;
  CGPDFSourceRead((uint64_t)v11, (uint64_t)__dst, 4uLL, v16, v17, v18, v19, v20);
  linearization_dictionary = (CGPDFDictionary *)xref_read_linearization_dictionary(v11, v21, v22, v23, v24, v25, v26, v27);
  v29 = linearization_dictionary != 0;
  if (linearization_dictionary)
  {
    v30 = linearization_dictionary;
    if (a2)
      CGPDFDictionaryGetOffset(linearization_dictionary, "L", a2);
    CFRelease(v11);
    CFRelease(v30);
  }
  return v29;
}

uint64_t CGPDFDocumentGetLinearizedDictionary(uint64_t result)
{
  if (result)
    return *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(result + 16) + 16) + 24);
  return result;
}

uint64_t CGPDFDocumentCreateLinearizedRangesForPage(uint64_t result, unint64_t a2, uint64_t *a3, uint64_t *a4)
{
  if (result)
    return pdf_reader_get_linearized_page_ranges(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(result + 16) + 16) + 32), a2, a3, a4);
  return result;
}

uint64_t CGPDFDocumentPreloadLinearizedPageData(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  CFMutableArrayRef Mutable;
  __CFArray *v6;
  unint64_t v7;
  const void *v8;
  CFIndex v9;
  uint64_t v10;
  CFIndex v12;
  const void *ValueAtIndex;
  CFTypeID v14;
  BOOL v15;
  CFIndex capacity;
  void *v17;

  if (!a1)
    return 0;
  v2 = *(_QWORD *)(a1 + 16);
  capacity = 0;
  v17 = 0;
  if (!pdf_reader_get_linearized_page_ranges(*(_QWORD *)(**(_QWORD **)(v2 + 16) + 32), a2, (uint64_t *)&v17, &capacity)|| (v3 = ***(_QWORD ***)(v2 + 16)) == 0|| (v4 = *(_QWORD **)(v3 + 40)) == 0|| (Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], capacity, MEMORY[0x1E0C9B378])) == 0)
  {
    free(v17);
    return 0;
  }
  v6 = Mutable;
  if (capacity)
  {
    v7 = 0;
    v8 = (const void *)*MEMORY[0x1E0C9B0D0];
    do
    {
      CFArraySetValueAtIndex(v6, v7++, v8);
      v9 = capacity;
    }
    while (v7 < capacity);
  }
  else
  {
    v9 = 0;
  }
  CGDataProviderGetBytesInRanges(v4, v6, (uint64_t)v17, v9);
  if (capacity)
  {
    v12 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v6, v12);
      v14 = CFGetTypeID(ValueAtIndex);
      v15 = v14 == CFDataGetTypeID();
      v10 = v15;
      if (!v15)
        break;
      if (++v12 >= (unint64_t)capacity)
        goto LABEL_19;
    }
  }
  else
  {
LABEL_19:
    v10 = 1;
  }
  free(v17);
  CFRelease(v6);
  return v10;
}

uint64_t CGPDFDocumentGetLinearizedOutlineRange(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    v2 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(result + 16) + 16) + 32);
    if (v2 && (v3 = *(_QWORD *)(v2 + 80)) != 0)
    {
      v4 = *(unsigned int *)(v3 + 4);
      v5 = *(unsigned int *)(v3 + 12);
      *a2 = v4;
      a2[1] = v5;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CGPDFDocumentGetLinearizedNamedDestinationRange(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    v2 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(result + 16) + 16) + 32);
    if (v2 && (v3 = *(_QWORD *)(v2 + 88)) != 0)
    {
      v4 = *(unsigned int *)(v3 + 4);
      v5 = *(unsigned int *)(v3 + 12);
      *a2 = v4;
      a2[1] = v5;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

CGPDFDictionaryRef CGPDFDocumentGetDestination(CGPDFDictionaryRef result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  CGPDFDictionary *catalog;
  char v7;
  CGPDFDictionaryRef v8;
  CGPDFDictionaryRef value;

  if (result)
  {
    v3 = *((_QWORD *)result + 2);
    v4 = *(_QWORD *)(v3 + 24);
    if (v4)
    {
LABEL_12:
      result = *(CGPDFDictionaryRef *)v4;
      if (!*(_QWORD *)v4)
        return result;
      value = 0;
      if (*(_BYTE *)(v4 + 8))
      {
        if (a2 && *(_DWORD *)(a2 + 8) == 6)
          return CGPDFNameTreeGetValue(result, *(_QWORD *)(a2 + 32));
        return 0;
      }
      if (a2 && *(_DWORD *)(a2 + 8) == 5)
      {
        if (CGPDFDictionaryGetObject(result, *(const char **)(a2 + 32), &value))
          return value;
        else
          return 0;
      }
      return 0;
    }
    os_unfair_lock_lock((os_unfair_lock_t)(v3 + 64));
    if (*(_QWORD *)(v3 + 24))
    {
LABEL_11:
      os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 64));
      v4 = *(_QWORD *)(v3 + 24);
      if (!v4)
        return 0;
      goto LABEL_12;
    }
    v8 = 0;
    value = 0;
    v5 = malloc_type_calloc(1uLL, 0x10uLL, 0x33BCE901uLL);
    __CFSetLastAllocationEventName();
    *(_QWORD *)v5 = 0;
    catalog = pdf_document_get_catalog(**(_QWORD **)(v3 + 16));
    if (CGPDFDictionaryGetDictionary(catalog, "Names", &value))
    {
      if (CGPDFDictionaryGetDictionary(value, "Dests", &v8))
      {
        v7 = 1;
LABEL_9:
        *(_QWORD *)v5 = v8;
        v5[8] = v7;
      }
    }
    else if (CGPDFDictionaryGetDictionary(catalog, "Dests", &v8))
    {
      v7 = 0;
      goto LABEL_9;
    }
    *(_QWORD *)(v3 + 24) = v5;
    goto LABEL_11;
  }
  return result;
}

const void *CGPDFDocumentGetProperty(uint64_t a1, const void *a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32)) != 0)
    return CGPropertiesGetProperty(v2, a2);
  else
    return 0;
}

void CGPDFDocumentSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  _DWORD *v8;

  if (a1 && a2 && a3)
  {
    v5 = *(_QWORD *)(a1 + 16);
    v7 = *(_QWORD *)(v5 + 32);
    v6 = (unint64_t *)(v5 + 32);
    if (!v7)
    {
      v8 = CGPropertiesCreate();
      while (!__ldxr(v6))
      {
        if (!__stxr((unint64_t)v8, v6))
          goto LABEL_11;
      }
      __clrex();
      CGPropertiesRelease((uint64_t)v8);
    }
LABEL_11:
    CGPropertiesSetProperty(*v6, a2, a3);
  }
}

void CGPDFDocumentRemoveProperty(uint64_t a1, const void *a2)
{
  uint64_t v2;

  if (a1 && a2)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
    if (v2)
      CGPropertiesRemoveProperty(v2, a2);
  }
}

void CGPDFDocumentSetDeviceGrayColorSpace(uint64_t a1, CGColorSpace *a2)
{
  uint64_t v2;
  CGColorSpace *v3;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(CGColorSpace **)(v2 + 40);
  if (v3 != a2)
  {
    CGColorSpaceRelease(v3);
    if (a2)
      CFRetain(a2);
    *(_QWORD *)(v2 + 40) = a2;
  }
}

void CGPDFDocumentSetDeviceRGBColorSpace(uint64_t a1, CGColorSpace *a2)
{
  uint64_t v2;
  CGColorSpace *v3;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(CGColorSpace **)(v2 + 48);
  if (v3 != a2)
  {
    CGColorSpaceRelease(v3);
    if (a2)
      CFRetain(a2);
    *(_QWORD *)(v2 + 48) = a2;
  }
}

void CGPDFDocumentSetDeviceCMYKColorSpace(uint64_t a1, CGColorSpace *a2)
{
  uint64_t v2;
  CGColorSpace *v3;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(CGColorSpace **)(v2 + 56);
  if (v3 != a2)
  {
    CGColorSpaceRelease(v3);
    if (a2)
      CFRetain(a2);
    *(_QWORD *)(v2 + 56) = a2;
  }
}

uint64_t CGPDFDocumentAuthenticateUserPassword(uint64_t result, char *__s)
{
  uint64_t v2;
  size_t v4;

  if (result)
  {
    v2 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(result + 16) + 16) + 40);
    if (v2)
    {
      v4 = strlen(__s);
      return CGPDFSecurityHandlerAuthenticateUserPassword(*(_QWORD *)(v2 + 16), __s, v4);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t CGPDFDocumentAuthenticateOwnerPassword(uint64_t result, char *__s)
{
  uint64_t v2;
  size_t v4;

  if (result)
  {
    v2 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(result + 16) + 16) + 40);
    if (v2)
    {
      v4 = strlen(__s);
      return CGPDFSecurityHandlerAuthenticateOwnerPassword(*(_QWORD *)(v2 + 16), __s, v4);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

CGPDFAccessPermissions CGPDFDocumentGetAccessPermissions(CGPDFDocumentRef document)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  int v5;
  int v6;

  if (document)
  {
    v1 = *(_QWORD *)(**(_QWORD **)(*((_QWORD *)document + 2) + 16) + 40);
    if (v1)
    {
      v2 = *(_QWORD *)(v1 + 16);
      if (v2)
        v3 = (unsigned int *)(v2 + 188);
      else
        v3 = (unsigned int *)&CGPDFPermissionsNone;
      v4 = *v3;
    }
    else
    {
      v4 = 4095;
    }
    v5 = (v4 & 3) != 0;
    if ((v4 & 5) != 0)
      v5 |= 2u;
    v6 = (v4 >> 4) & 4 | (16 * ((v4 >> 3) & 3)) | v5;
    if ((v4 & 0x80) != 0)
      v6 |= 0xC0u;
    LODWORD(document) = (v4 >> 2) & 0xC0 | (v4 >> 7) & 8 | v6;
  }
  return document;
}

uint64_t CGPDFDocumentGetRawPermissions(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (result)
  {
    v1 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(result + 16) + 16) + 40);
    if (v1)
    {
      v2 = *(_QWORD *)(v1 + 16);
      if (v2)
        return *(unsigned int *)(v2 + 16);
      else
        return 0;
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

CFDataRef CGPDFDocumentCopyHashedOwnerPassword(uint64_t a1)
{
  uint64_t v1;
  _DWORD *v2;
  const UInt8 *v3;
  int v4;
  int v5;
  uint64_t v6;
  CFIndex v7;

  if (!a1)
    return 0;
  v1 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 16) + 40);
  if (!v1)
    return 0;
  v2 = *(_DWORD **)(v1 + 16);
  if (!v2)
    return 0;
  v5 = *v2;
  v3 = (const UInt8 *)(v2 + 28);
  v4 = v5;
  v6 = 48;
  if ((v5 - 5) >= 2)
    v6 = 0;
  if (v4 >= 5)
    v7 = v6;
  else
    v7 = 32;
  return CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v3, v7);
}

CFDataRef CGPDFDocumentCopyHashedUserPassword(uint64_t a1)
{
  uint64_t v1;
  int *v2;
  const UInt8 *v3;
  int v4;
  int v5;
  uint64_t v6;
  CFIndex v7;

  if (!a1)
    return 0;
  v1 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 16) + 40);
  if (!v1)
    return 0;
  v2 = *(int **)(v1 + 16);
  if (!v2)
    return 0;
  v5 = *v2;
  v3 = (const UInt8 *)v2 + 33;
  v4 = v5;
  v6 = 48;
  if ((v5 - 5) >= 2)
    v6 = 0;
  if (v4 >= 5)
    v7 = v6;
  else
    v7 = 32;
  return CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v3, v7);
}

CFDataRef CGPDFDocumentCopyEncryptionKey(CFDataRef result)
{
  _BOOL4 DecryptionKey;
  CFIndex length;
  UInt8 bytes[32];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    result = *(CFDataRef *)(**(_QWORD **)(*((_QWORD *)result + 2) + 16) + 40);
    if (result)
    {
      length = 0;
      DecryptionKey = CGPDFSecurityManagerGetDecryptionKey((uint64_t)result, bytes, &length);
      result = 0;
      if (DecryptionKey)
        return CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, length);
    }
  }
  return result;
}

uint64_t CGPDFDocumentGetEncryptMetadata(uint64_t result)
{
  uint64_t v1;
  _BOOL4 v2;
  CGPDFBoolean value;

  if (result)
  {
    v1 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(result + 16) + 16) + 40);
    if (v1)
    {
      result = *(_QWORD *)(v1 + 8);
      if (result)
      {
        value = 0;
        v2 = !CGPDFDictionaryGetBoolean((CGPDFDictionaryRef)result, "EncryptMetadata", &value);
        return value || v2;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CGPDFDocumentGetEncryptionVersion(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(result + 16) + 16) + 40);
    if (v1)
      return *(_QWORD *)(v1 + 48);
    else
      return 0;
  }
  return result;
}

uint64_t CGPDFDocumentGetNumberOfObjects(uint64_t result)
{
  if (result)
    return *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(result + 16) + 16) + 160);
  return result;
}

char *CGPDFDocumentGetObject(char *result, int a2, unsigned __int16 a3)
{
  if (result)
    return pdf_xref_resolve(**(_QWORD **)(*((_QWORD *)result + 2) + 16), a2, a3);
  return result;
}

uint64_t CGPDFDocumentGetURL(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

char *CGPDFDocumentPrintObject(char *result, int a2, unsigned __int16 a3, FILE *a4)
{
  if (result)
  {
    result = pdf_xref_resolve(**(_QWORD **)(*((_QWORD *)result + 2) + 16), a2, a3);
    if (result)
    {
      if (*((_DWORD *)result + 2) == 9)
        return (char *)stream_print(*((_QWORD *)result + 4), a4, 0, 1);
      else
        return (char *)CGPDFObjectPrintWithIndent((uint64_t)result, a4, 0);
    }
  }
  return result;
}

BOOL CGPDFDocumentIsTaggedPDF(uint64_t a1)
{
  _QWORD *v1;
  _QWORD **v2;
  _BOOL8 v3;

  if (!a1)
    return 0;
  CGPDFDocumentCopyTaggedContext(a1);
  if (!v1)
    return 0;
  v2 = (_QWORD **)v1[2];
  if (v2)
    v3 = **v2 != 0;
  else
    v3 = 0;
  CFRelease(v1);
  return v3;
}

void CGPDFDocumentCopyTaggedContext(uint64_t a1)
{
  os_unfair_lock_s *v2;
  const void *v3;
  uint64_t Instance;
  uint64_t v5;
  uint64_t v6;
  size_t NumberOfPages;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  __int128 v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37;
  void *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  __int128 v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  char *v134;
  uint64_t v135;
  os_unfair_lock_s *v136;
  uint64_t v137;
  CGPDFDictionary *dict;
  CGPDFDictionaryRef v139;
  CGPDFBoolean v140;
  CGPDFDictionaryRef value;
  void *__dst;
  __int128 v143;

  v2 = (os_unfair_lock_s *)(a1 + 224);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 224));
  v3 = *(const void **)(a1 + 232);
  if (v3 && CFRetain(v3))
  {
LABEL_196:
    os_unfair_lock_unlock(v2);
    return;
  }
  if (CGPDFTaggedContextGetTypeID(void)::onceToken != -1)
    dispatch_once(&CGPDFTaggedContextGetTypeID(void)::onceToken, &__block_literal_global_43_12844);
  Instance = _CFRuntimeCreateInstance();
  v5 = operator new();
  v6 = operator new();
  *(_QWORD *)(v6 + 32) = 850045863;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_QWORD *)(v6 + 88) = 0;
  *(_QWORD *)(v6 + 160) = 0;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_QWORD *)(v6 + 152) = v6 + 160;
  *(_QWORD *)(v6 + 192) = 0;
  *(_QWORD *)(v6 + 184) = 0;
  *(_QWORD *)(v6 + 168) = 0;
  *(_QWORD *)(v6 + 176) = v6 + 184;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_OWORD *)(v6 + 216) = 0u;
  *(_OWORD *)(v6 + 232) = 0u;
  *(_OWORD *)(v6 + 248) = 0u;
  *(_QWORD *)(v6 + 264) = 0;
  *(_QWORD *)v5 = v6;
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = 0;
  *(_WORD *)(v6 + 96) = 0;
  CGAnalyticsSendPDFDocumentGetCatalogEvent();
  dict = pdf_document_get_catalog(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 16));
  NumberOfPages = CGPDFDocumentGetNumberOfPages((CGPDFDocumentRef)a1);
  v8 = NumberOfPages;
  v9 = *(_QWORD **)v5;
  v11 = *(_QWORD *)(*(_QWORD *)v5 + 104);
  v10 = *(_QWORD **)(*(_QWORD *)v5 + 112);
  v12 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v10 - v11) >> 3);
  v13 = NumberOfPages - v12;
  if (NumberOfPages <= v12)
  {
    if (NumberOfPages < v12)
    {
      v19 = v5;
      v20 = (_QWORD *)(v11 + 24 * NumberOfPages);
      if (v10 != v20)
      {
        v21 = *(_QWORD **)(*(_QWORD *)v5 + 112);
        do
        {
          v23 = (void *)*(v21 - 3);
          v21 -= 3;
          v22 = v23;
          if (v23)
          {
            *(v10 - 2) = v22;
            operator delete(v22);
          }
          v10 = v21;
        }
        while (v21 != v20);
      }
      v9[14] = v20;
      v5 = v19;
    }
  }
  else
  {
    v14 = v9[15];
    if (0xAAAAAAAAAAAAAAABLL * ((v14 - (uint64_t)v10) >> 3) >= v13)
    {
      v24 = &v10[3 * v13];
      v25 = 24 * NumberOfPages - 24 * v12;
      do
      {
        if (!v10)
          goto LABEL_205;
        *v10 = 0;
        v10[1] = 0;
        v10[2] = 0;
        v10 += 3;
        v25 -= 24;
      }
      while (v25);
      v9[14] = v24;
    }
    else
    {
      if (NumberOfPages > 0xAAAAAAAAAAAAAAALL)
        std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
      v15 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v11) >> 3);
      v16 = 2 * v15;
      if (2 * v15 <= NumberOfPages)
        v16 = NumberOfPages;
      if (v15 >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v16;
      if (v17)
      {
        if (v17 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_199;
        v18 = (char *)operator new(24 * v17);
      }
      else
      {
        v18 = 0;
      }
      v26 = &v18[24 * v12];
      v27 = &v18[24 * v17];
      v28 = &v18[24 * v8];
      v29 = v26;
      v30 = 24 * v8 - 24 * v12;
      do
      {
        if (!v29)
          goto LABEL_205;
        *(_QWORD *)v29 = 0;
        *((_QWORD *)v29 + 1) = 0;
        *((_QWORD *)v29 + 2) = 0;
        v29 += 24;
        v30 -= 24;
      }
      while (v30);
      v32 = (_QWORD *)v9[13];
      v31 = (_QWORD *)v9[14];
      if (v31 == v32)
      {
        v9[13] = v26;
        v9[14] = v28;
        v9[15] = v27;
        if (v31)
LABEL_41:
          operator delete(v31);
      }
      else
      {
        v33 = v5;
        do
        {
          *((_QWORD *)v26 - 3) = 0;
          *((_QWORD *)v26 - 2) = 0;
          v26 -= 24;
          *((_QWORD *)v26 + 2) = 0;
          v34 = *(_OWORD *)(v31 - 3);
          v31 -= 3;
          *(_OWORD *)v26 = v34;
          *((_QWORD *)v26 + 2) = v31[2];
          *v31 = 0;
          v31[1] = 0;
          v31[2] = 0;
        }
        while (v31 != v32);
        v35 = (_QWORD *)v9[13];
        v31 = (_QWORD *)v9[14];
        v9[13] = v26;
        v9[14] = v28;
        v9[15] = v27;
        if (v31 != v35)
        {
          v36 = v31;
          do
          {
            v38 = (void *)*(v36 - 3);
            v36 -= 3;
            v37 = v38;
            if (v38)
            {
              *(v31 - 2) = v37;
              operator delete(v37);
            }
            v31 = v36;
          }
          while (v36 != v35);
          v31 = v35;
        }
        v5 = v33;
        if (v31)
          goto LABEL_41;
      }
    }
  }
  v39 = *(_QWORD **)v5;
  v41 = *(_QWORD *)(*(_QWORD *)v5 + 128);
  v40 = *(_QWORD **)(*(_QWORD *)v5 + 136);
  v42 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v40 - v41) >> 3);
  v43 = v8 - v42;
  if (v8 <= v42)
  {
    if (v8 < v42)
    {
      v49 = v5;
      v50 = (_QWORD *)(v41 + 24 * v8);
      if (v40 != v50)
      {
        do
        {
          v51 = v40 - 3;
          std::__tree<unsigned long>::destroy((_QWORD *)*(v40 - 2));
          v40 = v51;
        }
        while (v51 != v50);
      }
      v39[17] = v50;
      v5 = v49;
    }
  }
  else
  {
    v44 = v39[18];
    if (0xAAAAAAAAAAAAAAABLL * ((v44 - (uint64_t)v40) >> 3) >= v43)
    {
      v52 = &v40[3 * v43];
      do
      {
        if (!v40)
          goto LABEL_205;
        v40[2] = 0;
        v40[1] = 0;
        *v40 = v40 + 1;
        v40 += 3;
      }
      while (v40 != v52);
      v39[17] = v52;
    }
    else
    {
      if (v8 > 0xAAAAAAAAAAAAAAALL)
        std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
      v45 = 0xAAAAAAAAAAAAAAABLL * ((v44 - v41) >> 3);
      v46 = 2 * v45;
      if (2 * v45 <= v8)
        v46 = v8;
      if (v45 >= 0x555555555555555)
        v47 = 0xAAAAAAAAAAAAAAALL;
      else
        v47 = v46;
      if (v47)
      {
        if (v47 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_199;
        v48 = (char *)operator new(24 * v47);
      }
      else
      {
        v48 = 0;
      }
      v53 = &v48[24 * v42];
      v54 = &v48[24 * v47];
      v55 = &v48[24 * v8];
      v56 = v53;
      do
      {
        if (!v56)
          goto LABEL_205;
        *((_QWORD *)v56 + 2) = 0;
        *((_QWORD *)v56 + 1) = 0;
        *(_QWORD *)v56 = v56 + 8;
        v56 += 24;
      }
      while (v56 != v55);
      v58 = (char *)v39[16];
      v57 = (char *)v39[17];
      if (v57 == v58)
      {
        v39[16] = v53;
        v39[17] = v55;
        v39[18] = v54;
        if (v57)
LABEL_76:
          operator delete(v57);
      }
      else
      {
        v59 = 0;
        do
        {
          v60 = &v53[v59];
          *((_QWORD *)v60 - 3) = *(_QWORD *)&v57[v59 - 24];
          v61 = &v57[v59 - 16];
          v62 = *(_QWORD *)v61;
          *(_QWORD *)&v53[v59 - 16] = *(_QWORD *)v61;
          v63 = (uint64_t)&v53[v59 - 16];
          v64 = *(_QWORD *)&v57[v59 - 8];
          *((_QWORD *)v60 - 1) = v64;
          if (v64)
          {
            *(_QWORD *)(v62 + 16) = v63;
            *(_QWORD *)&v57[v59 - 24] = v61;
            *(_QWORD *)v61 = 0;
            *(_QWORD *)&v57[v59 - 8] = 0;
          }
          else
          {
            *((_QWORD *)v60 - 3) = v63;
          }
          v59 -= 24;
        }
        while (&v57[v59] != v58);
        v65 = (char *)v39[16];
        v57 = (char *)v39[17];
        v39[16] = &v53[v59];
        v39[17] = v55;
        v39[18] = v54;
        if (v57 != v65)
        {
          v66 = v5;
          do
          {
            v67 = v57 - 24;
            std::__tree<unsigned long>::destroy(*((_QWORD **)v57 - 2));
            v57 = v67;
          }
          while (v67 != v65);
          v57 = v65;
          v5 = v66;
        }
        if (v57)
          goto LABEL_76;
      }
    }
  }
  v68 = *(_QWORD **)v5;
  v69 = *(_QWORD *)(*(_QWORD *)v5 + 200);
  v70 = *(_QWORD **)(*(_QWORD *)v5 + 208);
  v71 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v70 - v69) >> 3);
  v72 = v8 - v71;
  if (v8 <= v71)
  {
    if (v8 < v71)
    {
      v78 = (_QWORD *)(v69 + 24 * v8);
      while (v70 != v78)
      {
        v70 -= 3;
        __dst = v70;
        std::vector<std::tuple<StructureElement *,unsigned long,applesauce::CF::ObjectRef<CGPDFDictionary *>>>::__destroy_vector::operator()[abi:se180100]((void ***)&__dst);
      }
      v68[26] = v78;
    }
  }
  else
  {
    v73 = v68[27];
    if (0xAAAAAAAAAAAAAAABLL * ((v73 - (uint64_t)v70) >> 3) >= v72)
    {
      v79 = &v70[3 * v72];
      v80 = 24 * v8 - 24 * v71;
      do
      {
        if (!v70)
          goto LABEL_205;
        *v70 = 0;
        v70[1] = 0;
        v70[2] = 0;
        v70 += 3;
        v80 -= 24;
      }
      while (v80);
      v68[26] = v79;
    }
    else
    {
      if (v8 > 0xAAAAAAAAAAAAAAALL)
        std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
      v74 = 0xAAAAAAAAAAAAAAABLL * ((v73 - v69) >> 3);
      v75 = 2 * v74;
      if (2 * v74 <= v8)
        v75 = v8;
      if (v74 >= 0x555555555555555)
        v76 = 0xAAAAAAAAAAAAAAALL;
      else
        v76 = v75;
      if (v76)
      {
        if (v76 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_199;
        v77 = (char *)operator new(24 * v76);
      }
      else
      {
        v77 = 0;
      }
      v81 = &v77[24 * v71];
      v82 = &v77[24 * v76];
      v83 = &v77[24 * v8];
      v84 = v81;
      v85 = 24 * v8 - 24 * v71;
      do
      {
        if (!v84)
          goto LABEL_205;
        *(_QWORD *)v84 = 0;
        *((_QWORD *)v84 + 1) = 0;
        *((_QWORD *)v84 + 2) = 0;
        v84 += 24;
        v85 -= 24;
      }
      while (v85);
      v86 = (_QWORD *)v68[25];
      v87 = (_QWORD *)v68[26];
      if (v87 == v86)
      {
        v68[25] = v81;
        v68[26] = v83;
        v68[27] = v82;
        if (v87)
LABEL_107:
          operator delete(v87);
      }
      else
      {
        do
        {
          *((_QWORD *)v81 - 3) = 0;
          *((_QWORD *)v81 - 2) = 0;
          v81 -= 24;
          *((_QWORD *)v81 + 2) = 0;
          v88 = *(_OWORD *)(v87 - 3);
          v87 -= 3;
          *(_OWORD *)v81 = v88;
          *((_QWORD *)v81 + 2) = v87[2];
          *v87 = 0;
          v87[1] = 0;
          v87[2] = 0;
        }
        while (v87 != v86);
        v89 = (_QWORD *)v68[25];
        v87 = (_QWORD *)v68[26];
        v68[25] = v81;
        v68[26] = v83;
        v68[27] = v82;
        if (v87 != v89)
        {
          do
          {
            v87 -= 3;
            __dst = v87;
            std::vector<std::tuple<StructureElement *,unsigned long,applesauce::CF::ObjectRef<CGPDFDictionary *>>>::__destroy_vector::operator()[abi:se180100]((void ***)&__dst);
          }
          while (v87 != v89);
          v87 = v89;
        }
        if (v87)
          goto LABEL_107;
      }
    }
  }
  v137 = a1;
  v90 = (_QWORD *)Instance;
  v91 = *(_QWORD **)v5;
  v92 = *(_QWORD *)(*(_QWORD *)v5 + 256);
  v93 = v8 - v92;
  if (v8 <= v92)
  {
    v91[32] = v8;
  }
  else
  {
    v94 = v91[33];
    if (v94 << 6 < v93 || v92 > (v94 << 6) - v93)
    {
      __dst = 0;
      v143 = 0uLL;
      if ((v8 & 0x8000000000000000) != 0)
        std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
      if ((unint64_t)(v94 << 6) > 0x3FFFFFFFFFFFFFFELL)
      {
        v97 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        v96 = v94 << 7;
        if (v96 <= ((v8 + 63) & 0xFFFFFFFFFFFFFFC0))
          v97 = (v8 + 63) & 0xFFFFFFFFFFFFFFC0;
        else
          v97 = v96;
      }
      v136 = v2;
      std::vector<BOOL>::reserve((uint64_t)&__dst, v97);
      v101 = (void *)v91[31];
      v100 = v91[32];
      *(_QWORD *)&v143 = v100 + v93;
      v102 = (char *)__dst;
      if (v100 < 1)
      {
        LODWORD(v99) = 0;
        v98 = (char *)__dst;
      }
      else
      {
        v135 = v5;
        v103 = v100 >> 6;
        if ((unint64_t)(v100 + 63) >= 0x7F)
          memmove(__dst, v101, 8 * v103);
        v99 = v100 - (v103 << 6);
        v98 = &v102[8 * v103];
        if (v99 < 1)
          LODWORD(v99) = 0;
        else
          *(_QWORD *)v98 = *(_QWORD *)v98 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v99) | *((_QWORD *)v101 + v103) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v99);
        v5 = v135;
        v101 = (void *)v91[31];
      }
      v91[31] = v102;
      *((_OWORD *)v91 + 16) = v143;
      if (v101)
        operator delete(v101);
      v2 = v136;
    }
    else
    {
      v98 = (char *)(v91[31] + 8 * (v92 >> 6));
      v99 = *(_QWORD *)(*(_QWORD *)v5 + 256) & 0x3FLL;
      v91[32] = v8;
    }
    if (v8 != v92)
    {
      if ((_DWORD)v99)
      {
        if ((64 - v99) >= v93)
          v104 = v8 - v92;
        else
          v104 = (64 - v99);
        *(_QWORD *)v98 &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v99 - v104)) & (-1 << v99));
        v98 += 8;
        v93 -= v104;
      }
      v105 = v93 >> 6;
      if (v93 >= 0x40)
        bzero(v98, 8 * v105);
      if ((v93 & 0x3F) != 0)
        *(_QWORD *)&v98[8 * v105] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v93 & 0x3F));
    }
  }
  v106 = *(_QWORD **)v5;
  v108 = *(_QWORD *)(*(_QWORD *)v5 + 224);
  v107 = *(_QWORD *)(*(_QWORD *)v5 + 232);
  v109 = 0xCCCCCCCCCCCCCCCDLL * ((v107 - v108) >> 3);
  v110 = v8 - v109;
  if (v8 <= v109)
  {
    v112 = v90;
    v113 = v137;
    if (v8 < v109)
    {
      v118 = v108 + 40 * v8;
      while (v107 != v118)
        v107 = std::__hash_table<std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::__unordered_map_hasher<CGPDFFont *,std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::hash<CGPDFFont *>,std::equal_to<CGPDFFont *>,true>,std::__unordered_map_equal<CGPDFFont *,std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::equal_to<CGPDFFont *>,std::hash<CGPDFFont *>,true>,std::allocator<std::__hash_value_type<CGPDFFont *,std::pair<double,double>>>>::~__hash_table(v107 - 40);
      v106[29] = v118;
    }
LABEL_186:
    value = 0;
    if (CGPDFDictionaryGetDictionary(dict, "StructTreeRoot", &value))
    {
      __dst = 0;
      if (CGPDFDictionaryGetName(value, "Type", (const char **)&__dst))
      {
        if (__dst)
        {
          if (!strcmp("StructTreeRoot", (const char *)__dst))
          {
            __dst = 0;
            if (CGPDFDictionaryGetDictionary(dict, "MarkInfo", (CGPDFDictionaryRef *)&__dst))
            {
              v140 = 0;
              if (CGPDFDictionaryGetBoolean((CGPDFDictionaryRef)__dst, "Marked", &v140))
              {
                if (v140)
                {
                  **(_QWORD **)v5 = value;
                  v139 = 0;
                  if (CGPDFDictionaryGetDictionary(value, "ParentTree", &v139))
                    *(_QWORD *)(*(_QWORD *)v5 + 8) = v139;
                }
              }
            }
          }
        }
      }
    }
    v112[2] = v5;
    *(_QWORD *)(v113 + 232) = v112;
    CFRetain(v112);
    goto LABEL_196;
  }
  v111 = v106[30];
  v112 = v90;
  if (0xCCCCCCCCCCCCCCCDLL * ((v111 - v107) >> 3) < v110)
  {
    v113 = v137;
    if (v8 > 0x666666666666666)
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
    v114 = 0xCCCCCCCCCCCCCCCDLL * ((v111 - v108) >> 3);
    v115 = 2 * v114;
    if (2 * v114 <= v8)
      v115 = v8;
    if (v114 >= 0x333333333333333)
      v116 = 0x666666666666666;
    else
      v116 = v115;
    if (!v116)
    {
      v117 = 0;
      goto LABEL_169;
    }
    if (v116 <= 0x666666666666666)
    {
      v117 = (char *)operator new(40 * v116);
LABEL_169:
      v120 = &v117[40 * v109];
      v121 = &v117[40 * v116];
      v122 = &v117[40 * v8];
      v123 = v120;
      do
      {
        if (!v123)
          goto LABEL_205;
        *(_OWORD *)v123 = 0uLL;
        *((_OWORD *)v123 + 1) = 0uLL;
        *((_DWORD *)v123 + 8) = 1065353216;
        v123 += 40;
      }
      while (v123 != v122);
      v125 = (char *)v106[28];
      v124 = (char *)v106[29];
      if (v124 == v125)
      {
        v106[28] = v120;
        v106[29] = v122;
        v106[30] = v121;
        if (v124)
        {
LABEL_185:
          operator delete(v124);
          goto LABEL_186;
        }
      }
      else
      {
        v126 = 0;
        do
        {
          v127 = &v120[v126];
          v128 = &v124[v126];
          v129 = *(_QWORD *)&v124[v126 - 40];
          *((_QWORD *)v128 - 5) = 0;
          *((_QWORD *)v127 - 5) = v129;
          *((_QWORD *)v127 - 4) = *(_QWORD *)&v124[v126 - 32];
          *((_QWORD *)v128 - 4) = 0;
          v130 = *(_QWORD *)&v124[v126 - 24];
          *(_QWORD *)&v120[v126 - 24] = v130;
          v131 = *(_QWORD *)&v124[v126 - 16];
          *((_QWORD *)v127 - 2) = v131;
          *((_DWORD *)v127 - 2) = *(_DWORD *)&v124[v126 - 8];
          if (v131)
          {
            v132 = *(_QWORD *)(v130 + 8);
            v133 = *((_QWORD *)v127 - 4);
            if ((v133 & (v133 - 1)) != 0)
            {
              if (v132 >= v133)
                v132 %= v133;
            }
            else
            {
              v132 &= v133 - 1;
            }
            *(_QWORD *)(v129 + 8 * v132) = &v120[v126 - 24];
            *(_QWORD *)&v124[v126 - 24] = 0;
            *(_QWORD *)&v124[v126 - 16] = 0;
          }
          v126 -= 40;
        }
        while (&v124[v126] != v125);
        v134 = (char *)v106[28];
        v124 = (char *)v106[29];
        v106[28] = &v120[v126];
        v106[29] = v122;
        v106[30] = v121;
        if (v124 != v134)
        {
          do
            v124 = (char *)std::__hash_table<std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::__unordered_map_hasher<CGPDFFont *,std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::hash<CGPDFFont *>,std::equal_to<CGPDFFont *>,true>,std::__unordered_map_equal<CGPDFFont *,std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::equal_to<CGPDFFont *>,std::hash<CGPDFFont *>,true>,std::allocator<std::__hash_value_type<CGPDFFont *,std::pair<double,double>>>>::~__hash_table((uint64_t)(v124 - 40));
          while (v124 != v134);
          v124 = v134;
        }
        if (v124)
          goto LABEL_185;
      }
      goto LABEL_186;
    }
LABEL_199:
    std::__throw_bad_array_new_length[abi:se180100]();
  }
  v119 = v107 + 40 * v110;
  v113 = v137;
  while (v107)
  {
    *(_OWORD *)v107 = 0uLL;
    *(_OWORD *)(v107 + 16) = 0uLL;
    *(_DWORD *)(v107 + 32) = 1065353216;
    v107 += 40;
    if (v107 == v119)
    {
      v106[29] = v119;
      goto LABEL_186;
    }
  }
LABEL_205:
  __break(1u);
}

void sub_184AF0674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  MEMORY[0x186DC23C4](v16, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t CGPDFDocumentIsSimpleSelectionEnabled()
{
  return 1;
}

uint64_t CGPDFDocumentIsLayoutWithCTLDEnabled()
{
  uint64_t result;
  BOOL v1;

  result = _os_feature_enabled_impl();
  if ((_DWORD)result)
  {
    v1 = 0;
    return !get_BOOLean_property("CGLayoutWithCTLD", (const void *(*)(const char *))copy_local_domain_value, &v1)|| v1;
  }
  return result;
}

CGRect CGPDFDocumentGetMediaBox(CGPDFDocumentRef document, int page)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CGPDFPage *v10;

  if ((CGPDFDocumentGetMediaBox::warned & 1) == 0)
  {
    CGPDFDocumentGetMediaBox::warned = 1;
  }
  v10 = CGPDFDocumentGetPage(document, page);
  return CGPDFPageGetBoxRect(v10, kCGPDFMediaBox);
}

CGRect CGPDFDocumentGetCropBox(CGPDFDocumentRef document, int page)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CGPDFPage *v10;

  if ((CGPDFDocumentGetCropBox::warned & 1) == 0)
  {
    CGPDFDocumentGetCropBox::warned = 1;
  }
  v10 = CGPDFDocumentGetPage(document, page);
  return CGPDFPageGetBoxRect(v10, kCGPDFCropBox);
}

CGRect CGPDFDocumentGetBleedBox(CGPDFDocumentRef document, int page)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CGPDFPage *v10;

  if ((CGPDFDocumentGetBleedBox::warned & 1) == 0)
  {
    CGPDFDocumentGetBleedBox::warned = 1;
  }
  v10 = CGPDFDocumentGetPage(document, page);
  return CGPDFPageGetBoxRect(v10, kCGPDFBleedBox);
}

CGRect CGPDFDocumentGetTrimBox(CGPDFDocumentRef document, int page)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CGPDFPage *v10;

  if ((CGPDFDocumentGetTrimBox::warned & 1) == 0)
  {
    CGPDFDocumentGetTrimBox::warned = 1;
  }
  v10 = CGPDFDocumentGetPage(document, page);
  return CGPDFPageGetBoxRect(v10, kCGPDFTrimBox);
}

CGRect CGPDFDocumentGetArtBox(CGPDFDocumentRef document, int page)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CGPDFPage *v10;

  if ((CGPDFDocumentGetArtBox::warned & 1) == 0)
  {
    CGPDFDocumentGetArtBox::warned = 1;
  }
  v10 = CGPDFDocumentGetPage(document, page);
  return CGPDFPageGetBoxRect(v10, kCGPDFArtBox);
}

int CGPDFDocumentGetRotationAngle(CGPDFDocumentRef document, int page)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CGPDFPage *v10;

  if ((CGPDFDocumentGetRotationAngle::warned & 1) == 0)
  {
    CGPDFDocumentGetRotationAngle::warned = 1;
  }
  v10 = CGPDFDocumentGetPage(document, page);
  return CGPDFPageGetRotationAngle(v10);
}

CGPDFPageRef CGPDFDocumentGetPageForPageDictionary(CGPDFDocument *a1, uint64_t a2)
{
  size_t PageNumberForPageDictionary;

  PageNumberForPageDictionary = CGPDFDocumentGetPageNumberForPageDictionary((uint64_t)a1, a2);
  if (PageNumberForPageDictionary == -1)
    return 0;
  else
    return CGPDFDocumentGetPage(a1, PageNumberForPageDictionary);
}

unint64_t CGPDFDocumentGetPageNumberForPageDictionary(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a1 && a2 && (v3 = *(_QWORD *)(a2 + 32), v4 = *(_QWORD *)(a2 + 40), v3 | (unsigned __int16)v4))
    return CGPDFDocumentGetPageNumberForPageReference(a1, v3, v4);
  else
    return -1;
}

unint64_t CGPDFDocumentGetPageNumberForPageReference(uint64_t a1, uint64_t a2, unsigned __int16 a3)
{
  pthread_mutex_t *v6;
  CFNumberRef v7;
  const void *Value;
  CFTypeID v9;
  unint64_t v10;
  CGPDFDictionary *number_of_pages;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CGPDFDictionary *v18;
  _QWORD *page_dictionary;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const __CFAllocator *v24;
  CFNumberRef v25;
  CFNumberRef v26;
  unint64_t valuePtr;

  v6 = (pthread_mutex_t *)(a1 + 128);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 128));
  if (!*(_QWORD *)(a1 + 192)
    || (valuePtr = a3 | (unint64_t)(a2 << 36),
        v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &valuePtr),
        Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 192), v7),
        CFRelease(v7),
        !Value)
    || (v9 = CFGetTypeID(Value), v9 != CFNumberGetTypeID()))
  {
    CGAnalyticsSendPDFDocumentGetNumberOfPagesEvent();
    number_of_pages = pdf_reader_get_number_of_pages(*(uint64_t **)(*(_QWORD *)(a1 + 16) + 16));
    v12 = **(_QWORD **)(*(_QWORD *)(a1 + 16) + 16);
    if (*(_QWORD *)(v12 + 24))
    {
      v13 = *(_QWORD *)(v12 + 32);
      if (!v13)
        goto LABEL_23;
      v14 = *(_QWORD *)(v13 + 64);
      v15 = *(_QWORD *)(v14 + 48);
      v16 = *(_QWORD *)(v14 + 56);
      if (v15 == v16)
        goto LABEL_23;
      v17 = v15;
      while (*(_QWORD *)(v17 + 56) != a2)
      {
        v17 += 64;
        if (v17 == v16)
          goto LABEL_23;
      }
      v22 = (v17 - v15) >> 6;
      v10 = v22 + 1;
      if (v22 == -1)
        goto LABEL_23;
    }
    else
    {
      v18 = number_of_pages;
      if (!number_of_pages)
      {
LABEL_23:
        v10 = -1;
LABEL_24:
        pthread_mutex_unlock(v6);
        return v10;
      }
      v10 = 1;
      while (1)
      {
        page_dictionary = pdf_document_get_page_dictionary(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16), v10);
        if (page_dictionary)
        {
          v21 = page_dictionary[4];
          v20 = page_dictionary[5];
        }
        else
        {
          v21 = 0;
          LOWORD(v20) = 0;
        }
        if (v21 | (unsigned __int16)v20 && v21 == a2 && (unsigned __int16)v20 == a3)
          break;
        if (++v10 > (unint64_t)v18)
          goto LABEL_23;
      }
    }
    if (v10 != -1)
    {
      v24 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      if (!*(_QWORD *)(a1 + 192))
        *(_QWORD *)(a1 + 192) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      valuePtr = a3 | (unint64_t)(a2 << 36);
      v25 = CFNumberCreate(v24, kCFNumberSInt64Type, &valuePtr);
      valuePtr = v10;
      v26 = CFNumberCreate(v24, kCFNumberSInt64Type, &valuePtr);
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 192), v25, v26);
      CFRelease(v26);
      CFRelease(v25);
    }
    goto LABEL_24;
  }
  valuePtr = 0;
  CFNumberGetValue((CFNumberRef)Value, kCFNumberSInt64Type, &valuePtr);
  pthread_mutex_unlock(v6);
  return valuePtr;
}

uint64_t CGPDFDocumentEnableTaggedStructureSerialization(uint64_t result, char a2)
{
  if (result)
    *(_BYTE *)(result + 120) = a2;
  return result;
}

CGPDFDictionaryRef CGPDFDocumentGetPageBoxes(CGPDFDictionaryRef result, CGRect *a2)
{
  CGPDFDictionaryRef v3;
  CGPDFDictionary *number_of_pages;
  BOOL v5;
  uint64_t v6;
  CGPDFDictionaryRef value;

  if (result && a2)
  {
    v3 = result;
    number_of_pages = pdf_reader_get_number_of_pages(*(uint64_t **)(*((_QWORD *)result + 2) + 16));
    result = pdf_document_get_catalog(**(_QWORD **)(*((_QWORD *)v3 + 2) + 16));
    if (number_of_pages)
      v5 = result == 0;
    else
      v5 = 1;
    if (!v5)
    {
      value = 0;
      result = (CGPDFDictionaryRef)CGPDFDictionaryGetDictionary(result, "Pages", &value);
      if ((_DWORD)result)
      {
        v6 = 1;
        return (CGPDFDictionaryRef)parse_page_nodes((uint64_t)&v6, (unint64_t)number_of_pages, a2, value);
      }
    }
  }
  return result;
}

uint64_t parse_page_nodes(uint64_t result, unint64_t a2, CGRect *a3, CGPDFDictionary *a4)
{
  unint64_t *v7;
  char *v8;
  uint64_t v9;
  size_t i;
  CGRect *v11;
  double *p_x;
  uint64_t v13;
  _OWORD *v14;
  CGPDFDictionaryRef dict;
  CGPDFArrayRef array;
  char *value;

  if (*(_QWORD *)result <= a2)
  {
    v7 = (unint64_t *)result;
    value = 0;
    result = CGPDFDictionaryGetName(a4, "Type", (const char **)&value);
    if ((_DWORD)result)
    {
      v8 = value;
      if (!strcmp(value, "Page"))
      {
        v11 = &a3[5 * *v7];
        p_x = &v11[-5].origin.x;
        v13 = 0x7FFFFFFFFFFFFFBLL;
        do
        {
          v14 = (_OWORD *)&v11[v13].origin.x;
          *v14 = 0uLL;
          v14[1] = 0uLL;
          ++v13;
        }
        while (v13 * 32);
        CGPDFDictionaryGetRect(a4, "MediaBox", &v11[-5].origin.x);
        CGPDFDictionaryGetRect(a4, "CropBox", p_x + 4);
        CGPDFDictionaryGetRect(a4, "BleedBox", p_x + 8);
        CGPDFDictionaryGetRect(a4, "TrimBox", p_x + 12);
        result = CGPDFDictionaryGetRect(a4, "ArtBox", p_x + 16);
        ++*v7;
      }
      else
      {
        result = strcmp(v8, "Pages");
        if (!(_DWORD)result)
        {
          array = 0;
          result = CGPDFDictionaryGetArray(a4, "Kids", &array);
          if ((_DWORD)result)
          {
            if (array)
            {
              v9 = *((_QWORD *)array + 2);
              if (v9)
              {
                for (i = 0; i != v9; ++i)
                {
                  dict = 0;
                  result = CGPDFArrayGetDictionary(array, i, &dict);
                  if ((_DWORD)result)
                  {
                    result = parse_page_nodes(v7, a2, a3, dict);
                    if (*v7 > a2)
                      break;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

__CFArray *CGPDFDocumentCopyIncrementalUpdatePositions(uint64_t a1)
{
  __CFArray *Mutable;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;

  if (!a1)
    return 0;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = ***(_QWORD ***)(*(_QWORD *)(a1 + 16) + 16);
  CGPDFSourceSetPosition(v3, 0, v4, v5, v6, v7, v8, v9);
  while (v3)
  {
    if (*(_BYTE *)(v3 + 208))
      break;
    v31 = 0;
    if ((CGPDFSourceForwardSearch((_QWORD *)v3, "startxref", "\n\r", &v31) & 1) == 0)
      break;
    v16 = v31;
    CGPDFSourceSetPosition(v3, v31 + 9, v10, v11, v12, v13, v14, v15);
    v32 = 0;
    if (!read_integer((_QWORD *)v3, (unint64_t *)&v32, v17, v18, v19, v20, v21, v22))
      break;
    if (v32 < 0)
      break;
    v32 = 0;
    if ((CGPDFSourceForwardSearch((_QWORD *)v3, "%%EOF", 0, &v32) & 1) == 0)
      break;
    v29 = v32;
    CGPDFSourceSetPosition(v3, v32 + 5, v23, v24, v25, v26, v27, v28);
    if (v29 - v16 - 9 <= 16)
      CGCFArrayAppendInteger(Mutable, v29 + 5);
  }
  return Mutable;
}

void std::list<CGPDFPage *>::erase(uint64_t *a1, uint64_t *__p)
{
  uint64_t v2;

  if (__p == a1)
  {
    __break(1u);
  }
  else
  {
    v2 = *__p;
    *(_QWORD *)(v2 + 8) = __p[1];
    *(_QWORD *)__p[1] = v2;
    --a1[2];
    operator delete(__p);
  }
}

uint64_t LRUCache::print(LRUCache *this)
{
  LRUCache *v2;
  unint64_t v3;
  uint64_t v4;

  putchar(91);
  v2 = (LRUCache *)*((_QWORD *)this + 1);
  if (v2 != this)
  {
    v3 = 1;
    do
    {
      v4 = *((_QWORD *)v2 + 2);
      if (v4)
        v4 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8);
      printf("%ld", v4);
      if (v3 < *((_QWORD *)this + 2))
        putchar(32);
      v2 = (LRUCache *)*((_QWORD *)v2 + 1);
      ++v3;
    }
    while (v2 != this);
  }
  return puts("]");
}

CFDictionaryRef CGPDFDocumentGetOutline(CGPDFDocumentRef document)
{
  uint64_t v2;
  uint64_t v3;
  const __CFDictionary *v4;
  CGPDFDictionary *catalog;
  CGPDFDictionary *v6;
  CGPDFDictionary **v8;
  CFMutableArrayRef Mutable;
  CGPDFDictionaryRef dict;
  char *__s1;
  CGPDFDictionaryRef value;
  CGPDFDictionaryRef v13;
  CGPDFInteger v14;
  char *v15;

  if (!document)
    return 0;
  v2 = *(_QWORD *)(**(_QWORD **)(*((_QWORD *)document + 2) + 16) + 40);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (!v3 || !*(_BYTE *)(v3 + 184))
      return 0;
  }
  pthread_mutex_lock((pthread_mutex_t *)((char *)document + 56));
  v4 = (const __CFDictionary *)*((_QWORD *)document + 6);
  if (!v4)
  {
    __s1 = 0;
    value = 0;
    CGAnalyticsSendPDFDocumentGetCatalogEvent();
    catalog = pdf_document_get_catalog(**(_QWORD **)(*((_QWORD *)document + 2) + 16));
    if (CGPDFDictionaryGetDictionary(catalog, "Outlines", &value)
      && (!CGPDFDictionaryGetName(value, "Type", (const char **)&__s1) || !strcmp(__s1, "Outlines")))
    {
      dict = 0;
      if (CGPDFDictionaryGetDictionary(catalog, "Pages", &dict))
      {
        v6 = dict;
        v15 = 0;
        if (CGPDFDictionaryGetName(dict, "Type", (const char **)&v15) && !strcmp(v15, "Pages"))
        {
          v14 = 0;
          if (CGPDFDictionaryGetInteger(v6, "Count", &v14) && v14 >= 1)
          {
            v8 = (CGPDFDictionary **)malloc_type_calloc(v14 + 1, 8uLL, 0x33BCE901uLL);
            __CFSetLastAllocationEventName();
            if (v8)
            {
              *v8 = (CGPDFDictionary *)(v14 + 1);
              v13 = (CGPDFDictionaryRef)1;
              populatePageMap(v6, v8, (unint64_t *)&v13);
              Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
              v14 = (CGPDFInteger)Mutable;
              v15 = CFSTR("Children");
              v4 = CFDictionaryCreate(0, (const void **)&v15, (const void **)&v14, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              CFRelease(Mutable);
              v13 = 0;
              if (CGPDFDictionaryGetDictionary(value, "First", &v13))
              {
                do
                  buildOutline(v13, Mutable, catalog, document);
                while (CGPDFDictionaryGetDictionary(v13, "Next", &v13));
              }
              free(v8);
              goto LABEL_6;
            }
          }
        }
      }
    }
    pthread_mutex_unlock((pthread_mutex_t *)((char *)document + 56));
    return 0;
  }
LABEL_6:
  pthread_mutex_unlock((pthread_mutex_t *)((char *)document + 56));
  return v4;
}

uint64_t populatePageMap(CGPDFDictionary *a1, CGPDFDictionary **a2, unint64_t *a3)
{
  uint64_t result;
  uint64_t v7;
  size_t i;
  char *v9;
  unint64_t v10;
  CGPDFDictionary *v11;
  CGPDFDictionaryRef dict;
  CGPDFArrayRef array;
  char *value;

  value = 0;
  if (CGPDFDictionaryGetName(a1, "Type", (const char **)&value) || (result = strcmp(value, "Pages"), !(_DWORD)result))
  {
    array = 0;
    result = CGPDFDictionaryGetArray(a1, "Kids", &array);
    if ((_DWORD)result)
    {
      if (array)
      {
        v7 = *((_QWORD *)array + 2);
        if (v7)
        {
          for (i = 0; i != v7; ++i)
          {
            dict = 0;
            result = CGPDFArrayGetDictionary(array, i, &dict);
            if ((_DWORD)result)
            {
              result = CGPDFDictionaryGetName(dict, "Type", (const char **)&value);
              if ((_DWORD)result)
              {
                v9 = value;
                if (!strcmp(value, "Pages"))
                {
                  result = populatePageMap(dict, a2, a3);
                }
                else
                {
                  result = strcmp(v9, "Page");
                  if (!(_DWORD)result)
                  {
                    v10 = *a3;
                    if (*a3 >= (unint64_t)*a2)
                      return result;
                    v11 = dict;
                    *a3 = v10 + 1;
                    a2[v10] = v11;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void buildOutline(CGPDFDictionary *a1, __CFArray *a2, CGPDFDictionary *a3, CGPDFDocument *a4)
{
  CGPDFObjectRef v8;
  int v9;
  int v10;
  const char *v11;
  CGPDFArray *v12;
  const char *v13;
  CFNumberRef v14;
  char *v15;
  CFDictionaryRef DictionaryRepresentation;
  int v17;
  CGPDFArray *v18;
  CGPDFStringRef v19;
  const UInt8 *v20;
  uint64_t v21;
  CGPDFDictionaryRef v22;
  CGPDFDictionaryRef v23;
  double v24;
  double v25;
  CFIndex v26;
  CFURLRef v27;
  CGPDFArray *v28;
  _BOOL4 Dictionary;
  CGPDFArray *Mutable;
  CGPDFArray *v31;
  CFIndex v32;
  CFDictionaryRef v33;
  CGPDFDictionary *v34;
  unint64_t valuePtr;
  char *__s1;
  CGPDFDictionaryRef v37;
  CGPDFStringRef v38;
  CGPDFDictionaryRef v39;
  CGPDFObjectRef v40;
  CGPDFStringRef value;
  CGPDFArrayRef array[2];
  CFDictionaryRef v43;
  uint64_t v44;
  CGPDFDictionaryRef dict[2];
  double v46[3];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  value = 0;
  if (!CGPDFDictionaryGetString(a1, "Title", &value))
    return;
  v39 = 0;
  v40 = 0;
  v38 = 0;
  if (!CGPDFDictionaryGetObject(a1, "Dest", &v40) && !CGPDFDictionaryGetDictionary(a1, "A", &v39))
    return;
  v8 = v40;
  if (!v40)
  {
    dict[0] = 0;
    if (!CGPDFDictionaryGetName(v39, "S", (const char **)dict))
      return;
    v13 = (const char *)dict[0];
    if (!strcmp((const char *)dict[0], "GoTo"))
    {
      if (!CGPDFDictionaryGetObject(v39, "D", &v40))
        return;
    }
    else if (strcmp(v13, "URI") || !CGPDFDictionaryGetString(v39, "URI", &v38))
    {
      return;
    }
    v8 = v40;
    if (!v40)
    {
      v19 = v38;
      if (v38)
      {
        if (!*((_QWORD *)v38 + 3))
        {
          v20 = (const UInt8 *)v38 + 80;
          goto LABEL_60;
        }
        decrypt_string((uint64_t)v38);
        v20 = (const UInt8 *)v19 + 80;
        if (v38)
        {
          v19 = v38;
LABEL_60:
          if (*((_QWORD *)v19 + 3))
            decrypt_string((uint64_t)v19);
          v26 = *((_QWORD *)v19 + 9);
          goto LABEL_63;
        }
      }
      else
      {
        v20 = 0;
      }
      v26 = 0;
LABEL_63:
      v27 = CFURLCreateWithBytes(0, v20, v26, 0x8000100u, 0);
      if (!v27)
        return;
      v18 = v27;
      v14 = 0;
      DictionaryRepresentation = 0;
      v17 = 1;
      goto LABEL_65;
    }
  }
  array[0] = 0;
  v9 = *((_DWORD *)v8 + 2);
  if (v9 == 12)
    v10 = 3;
  else
    v10 = *((_DWORD *)v8 + 2);
  if (v10 == 6)
  {
    dict[0] = 0;
    v37 = 0;
    if (!CGPDFDictionaryGetDictionary(a3, "Names", dict))
      return;
    if (!CGPDFDictionaryGetDictionary(dict[0], "Dests", &v37))
      return;
    if (!v40)
      return;
    if (*((_DWORD *)v40 + 2) != 6)
      return;
    v12 = nameTreeSearch(v37, *((CGPDFString **)v40 + 4));
    array[0] = v12;
    if (!v12)
      return;
  }
  else if (v10 == 5)
  {
    dict[0] = 0;
    if (!v8)
      return;
    if (v9 != 5)
      return;
    v11 = (const char *)*((_QWORD *)v8 + 4);
    if (!CGPDFDictionaryGetDictionary(a3, "Dests", dict) || !CGPDFDictionaryGetArray(dict[0], v11, array))
      return;
    v12 = array[0];
  }
  else
  {
    if (!v8 || v9 != 7)
      return;
    v12 = (CGPDFArray *)*((_QWORD *)v8 + 4);
    array[0] = v12;
  }
  __s1 = 0;
  v37 = 0;
  if (!CGPDFArrayGetDictionary(v12, 0, &v37))
    return;
  if (!CGPDFArrayGetName(array[0], 1uLL, (const char **)&__s1))
    return;
  valuePtr = CGPDFDocumentGetPageNumberForPageDictionary((uint64_t)a4, (uint64_t)v37);
  if (!valuePtr)
    return;
  v14 = CFNumberCreate(0, kCFNumberCFIndexType, &valuePtr);
  v15 = __s1;
  if (!strcmp(__s1, "FitR") && array[0] && *((_QWORD *)array[0] + 2) == 6)
  {
    v21 = 0;
    *(_OWORD *)dict = 0u;
    *(_OWORD *)v46 = 0u;
    while (CGPDFArrayGetNumber(array[0], 0, (CGPDFReal *)&dict[v21]))
    {
      if (++v21 == 4)
      {
        v22 = dict[0];
        v23 = dict[1];
        v24 = v46[0] - *(double *)dict;
        v25 = v46[1] - *(double *)&dict[1];
        goto LABEL_58;
      }
    }
    goto LABEL_34;
  }
  if (strcmp(v15, "XYZ") || !array[0] || *((_QWORD *)array[0] + 2) != 5)
    goto LABEL_34;
  dict[0] = 0;
  v34 = 0;
  DictionaryRepresentation = 0;
  if (!CGPDFArrayGetNumber(array[0], 2uLL, (CGPDFReal *)dict))
    goto LABEL_35;
  if (!CGPDFArrayGetNumber(array[0], 3uLL, (CGPDFReal *)&v34))
  {
LABEL_34:
    DictionaryRepresentation = 0;
    goto LABEL_35;
  }
  v22 = dict[0];
  v23 = v34;
  v24 = 0.0;
  v25 = 0.0;
LABEL_58:
  DictionaryRepresentation = CGRectCreateDictionaryRepresentation(*(CGRect *)&v22);
LABEL_35:
  if (v14)
  {
    v17 = 0;
    v18 = 0;
LABEL_65:
    v28 = (CGPDFArray *)CGPDFStringCopyTextString(value);
    v37 = 0;
    Dictionary = CGPDFDictionaryGetDictionary(a1, "First", &v37);
    Mutable = 0;
    if (Dictionary)
      Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    *(_OWORD *)v46 = 0uLL;
    v43 = 0;
    v44 = 0;
    dict[0] = (CGPDFDictionaryRef)CFSTR("Title");
    dict[1] = (CGPDFDictionaryRef)CFSTR("Destination");
    if (v17)
      v31 = v18;
    else
      v31 = v14;
    array[0] = v28;
    array[1] = v31;
    if (DictionaryRepresentation)
    {
      *(_QWORD *)&v46[0] = CFSTR("DestinationRect");
      v43 = DictionaryRepresentation;
      v32 = 3;
    }
    else
    {
      v32 = 2;
    }
    if (Mutable)
    {
      dict[v32] = (CGPDFDictionaryRef)CFSTR("Children");
      array[v32++] = Mutable;
    }
    v33 = CFDictionaryCreate(0, (const void **)dict, (const void **)array, v32, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFArrayAppendValue(a2, v33);
    CFRelease(v28);
    if ((v17 & 1) == 0)
      CFRelease(v14);
    if (DictionaryRepresentation)
      CFRelease(DictionaryRepresentation);
    if (Mutable)
      CFRelease(Mutable);
    if (v37)
    {
      do
        buildOutline(v37, Mutable, a3, a4);
      while (CGPDFDictionaryGetDictionary(v37, "Next", &v37));
    }
    return;
  }
  if (DictionaryRepresentation)
    CFRelease(DictionaryRepresentation);
}

CGPDFArrayRef nameTreeSearch(CGPDFDictionary *a1, CGPDFString *a2)
{
  const char *v4;
  const char *v5;
  const char *v6;
  size_t v7;
  size_t v8;
  CGPDFStringRef v9;
  _BOOL4 v10;
  CGPDFArrayRef result;
  uint64_t v12;
  size_t v13;
  CGPDFArrayRef v14;
  CGPDFDictionaryRef dict;
  CGPDFStringRef v16;
  CGPDFStringRef array;
  CGPDFArrayRef value;

  if (a2)
  {
    if (*((_QWORD *)a2 + 3))
      decrypt_string((uint64_t)a2);
    v4 = (char *)a2 + 80;
  }
  else
  {
    v4 = 0;
  }
  value = 0;
  if (CGPDFDictionaryGetArray(a1, "Limits", &value) && value && *((_QWORD *)value + 2) == 2)
  {
    v16 = 0;
    array = 0;
    if (!CGPDFArrayGetString(value, 0, &array) || !CGPDFArrayGetString(value, 1uLL, &v16))
      return 0;
    v5 = (const char *)array;
    if (array)
    {
      if (*((_QWORD *)array + 3))
        decrypt_string((uint64_t)array);
      v5 += 80;
    }
    v6 = (const char *)v16;
    if (v16)
    {
      if (*((_QWORD *)v16 + 3))
        decrypt_string((uint64_t)v16);
      v6 += 80;
    }
    if (!v5 || strcmp(v4, v5) < 0 || !v6 || strcmp(v4, v6) >= 1)
      return 0;
  }
  array = 0;
  if (!CGPDFDictionaryGetArray(a1, "Names", &array) || !array || (v7 = *((_QWORD *)array + 2)) == 0)
  {
LABEL_34:
    v16 = 0;
    v10 = CGPDFDictionaryGetArray(a1, "Kids", &v16);
    result = 0;
    if (!v10)
      return result;
    if (v16)
    {
      v12 = *((_QWORD *)v16 + 2);
      if (v12)
      {
        v13 = 0;
        while (1)
        {
          dict = 0;
          if (CGPDFArrayGetDictionary(v16, v13, &dict))
          {
            result = (CGPDFArrayRef)nameTreeSearch(dict, a2);
            if (result)
              break;
          }
          if (v12 == ++v13)
            return 0;
        }
        return result;
      }
    }
    return 0;
  }
  v8 = 0;
  while (1)
  {
    dict = 0;
    v16 = 0;
    v14 = 0;
    if (CGPDFArrayGetString(array, v8, &v16)
      && CGPDFArrayGetDictionary(array, v8 + 1, &dict)
      && CGPDFDictionaryGetArray(dict, "D", &v14))
    {
      v9 = v16;
      if (*((_QWORD *)v16 + 3))
        decrypt_string((uint64_t)v16);
      if (!strcmp(v4, (const char *)v9 + 80))
        return v14;
    }
    v8 += 2;
    if (v8 >= v7)
      goto LABEL_34;
  }
}

CGDataProvider *CGPDFDocumentAppendChanges(uint64_t a1)
{
  const __CFURL *v2;
  std::__fs::filesystem::path *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  CGDataProvider *v13;
  char *v14;
  char *v15;
  size_t v16;
  const char *v17;
  os_unfair_lock_s *v18;
  std::error_code *v19;
  int v20;
  std::__fs::filesystem::path buffer[42];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (a1 && *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 16) + 40))
    return 0;
  v2 = *(const __CFURL **)(a1 + 40);
  if (!v2 || !CFURLGetFileSystemRepresentation(v2, 1u, (UInt8 *)buffer, 1024))
    return 0;
  if (_xpc_runtime_is_app_sandboxed())
  {
    v3 = (std::__fs::filesystem::path *)_amkrtemp();
    if (v3)
      goto LABEL_17;
    v4 = open((const char *)buffer, 512, 448);
    if ((v4 & 0x80000000) == 0)
    {
      close(v4);
      v3 = (std::__fs::filesystem::path *)_amkrtemp();
      if (v3)
        goto LABEL_17;
    }
    __error();
    CGPostError((uint64_t)" _amkrtemp(\"%s\") failed.  errno = %d\n", v5, v6, v7, v8, v9, v10, v11, (char)buffer);
  }
  v12 = strlen((const char *)buffer);
  v3 = (std::__fs::filesystem::path *)malloc_type_malloc(v12 + 7, 0xDEE86E7uLL);
  strncpy((char *)v3, (const char *)buffer, v12 + 1);
  if ((_xpc_runtime_is_app_sandboxed() & 1) != 0)
  {
    if (!v3)
      return 0;
  }
  else
  {
    v14 = strrchr((char *)v3, 47);
    if (v14)
      v15 = v14 + 1;
    else
      v15 = (char *)v3;
    v16 = strlen(v15);
    memmove(v15 + 1, v15, v16 + 1);
    *v15 = 46;
    strcat((char *)v3, "-XXXX");
    mktemp((char *)v3);
  }
LABEL_17:
  v17 = CGDataConsumerCreateWithFilename((const char *)v3);
  v18 = (os_unfair_lock_s *)(a1 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 212));
  v13 = CGPDFAppenderWrite(*(_QWORD *)(a1 + 216), (uint64_t)v17);
  CFRelease(v17);
  os_unfair_lock_unlock(v18);
  if ((_DWORD)v13)
  {
    rename(v3, buffer, v19);
    v13 = (CGDataProvider *)(v20 == 0);
  }
  unlink((const char *)v3);
  free(v3);
  return v13;
}

CGDataProvider *CGPDFDocumentCopyToConsumerWithChanges(uint64_t a1, uint64_t a2)
{
  if (a1 && *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 16) + 40))
    return 0;
  else
    return CGPDFAppenderWrite(*(_QWORD *)(a1 + 216), a2);
}

void CGPDFDocumentAppendPage(uint64_t a1, CGPDFPage *a2)
{
  os_unfair_lock_s *v4;
  uint64_t PageObject;
  uint64_t v6;
  const void *v7;
  const __CFArray *v8;
  __CFDictionary *v9;
  int Count;
  CFMutableArrayRef theArray;
  __CFDictionary *v12;

  v4 = (os_unfair_lock_s *)(a1 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 212));
  theArray = 0;
  v12 = 0;
  AppendModeGetMutablePages((CGPDFDocument *)a1, &v12, &theArray);
  PageObject = CGPDFAppenderCreatePageObject(*(_QWORD *)(a1 + 216), a2);
  v7 = (const void *)CGPDFReferenceCreate(PageObject, v6);
  v8 = theArray;
  CFArrayAppendValue(theArray, v7);
  CFRelease(v7);
  v9 = v12;
  Count = CFArrayGetCount(v8);
  CGPDFAppenderDictionarySetInt32(v9, "Count", Count);
  os_unfair_lock_unlock(v4);
}

void AppendModeGetMutablePages(CGPDFDocument *a1, __CFDictionary **a2, __CFArray **a3)
{
  CGPDFDictionary *catalog;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const __CFDictionary *v11;
  const void *v12;
  __CFArray *MutableObject;
  CFIndex Count;
  CFIndex v15;
  CFIndex v16;
  unsigned __int16 *ValueAtIndex;
  CFTypeID v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  CGPDFDictionary *v22;
  CFIndex v23;
  CGPDFDictionary *v24;
  __CFArray *Mutable;
  __CFSet *v26;
  uint64_t v27;
  uint64_t v28;
  const void *v29;
  CFIndex i;
  _QWORD *v31;
  CFTypeID v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  CGPDFArrayRef v36;
  CGPDFDictionaryRef value;
  char *__s1;

  catalog = pdf_document_get_catalog(**(_QWORD **)(*((_QWORD *)a1 + 2) + 16));
  if (catalog)
  {
    value = 0;
    if (CGPDFDictionaryGetDictionary(catalog, "Pages", &value))
    {
      if (value)
      {
        v7 = *((_QWORD *)value + 4);
        v8 = *((_QWORD *)value + 5);
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
      *a2 = (__CFDictionary *)CGPDFAppenderGetMutableObject(*((char **)a1 + 27), v7, v8);
      v36 = 0;
      if (CGPDFDictionaryGetArray(value, "Kids", &v36))
      {
        if (v36)
        {
          v9 = *((_QWORD *)v36 + 5);
          v10 = *((_QWORD *)v36 + 6);
        }
        else
        {
          v9 = 0;
          v10 = 0;
        }
        if (v9 | (unsigned __int16)v10)
        {
          MutableObject = (__CFArray *)CGPDFAppenderGetMutableObject(*((char **)a1 + 27), v9, v10);
        }
        else
        {
          v11 = *a2;
          v12 = (const void *)CGPDFNameCreate("Kids");
          MutableObject = (__CFArray *)CFDictionaryGetValue(v11, v12);
          CFRelease(v12);
        }
        *a3 = MutableObject;
        Count = CFArrayGetCount(MutableObject);
        if (Count >= 1)
        {
          v15 = Count;
          v16 = 0;
          while (1)
          {
            ValueAtIndex = (unsigned __int16 *)CFArrayGetValueAtIndex(MutableObject, v16);
            v18 = CFGetTypeID(ValueAtIndex);
            if (CGPDFReferenceTypeID_onceToken != -1)
              dispatch_once(&CGPDFReferenceTypeID_onceToken, &__block_literal_global_18202);
            if (v18 == CGPDFReferenceTypeID_id)
            {
              if (ValueAtIndex)
              {
                v19 = *((_QWORD *)ValueAtIndex + 2);
                v20 = ValueAtIndex[12];
              }
              else
              {
                LODWORD(v19) = 0;
                v20 = 0;
              }
              v21 = pdf_xref_resolve(**(_QWORD **)(*((_QWORD *)a1 + 2) + 16), (int)v19, v20);
              if (v21)
              {
                if (*((_DWORD *)v21 + 2) == 8)
                {
                  v22 = (CGPDFDictionary *)*((_QWORD *)v21 + 4);
                  __s1 = 0;
                  if (!CGPDFDictionaryGetName(v22, "Type", (const char **)&__s1) || strcmp(__s1, "Page"))
                    break;
                }
              }
            }
            if (v15 == ++v16)
              return;
          }
          v23 = CFArrayGetCount(MutableObject);
          v24 = pdf_document_get_catalog(**(_QWORD **)(*((_QWORD *)a1 + 2) + 16));
          __s1 = 0;
          if (CGPDFDictionaryGetDictionary(v24, "Pages", (CGPDFDictionaryRef *)&__s1))
          {
            Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0]);
            AppendModeExtractPagesTree((CGPDFDocument *)__s1, MutableObject, Mutable, v26);
            CFRelease(Mutable);
          }
          if (v23 >= 1)
          {
            do
            {
              CFArrayRemoveValueAtIndex(MutableObject, 0);
              --v23;
            }
            while (v23);
          }
          if (__s1)
          {
            v27 = *((_QWORD *)__s1 + 4);
            v28 = *((_QWORD *)__s1 + 5);
          }
          else
          {
            v27 = 0;
            v28 = 0;
          }
          v29 = (const void *)CGPDFReferenceCreate(v27, v28);
          for (i = 0; i < CFArrayGetCount(MutableObject); ++i)
          {
            v31 = CFArrayGetValueAtIndex(MutableObject, i);
            v32 = CFGetTypeID(v31);
            if (CGPDFReferenceTypeID_onceToken != -1)
              dispatch_once(&CGPDFReferenceTypeID_onceToken, &__block_literal_global_18202);
            if (v32 == CGPDFReferenceTypeID_id)
            {
              if (v31)
              {
                v33 = v31[2];
                v34 = v31[3];
              }
              else
              {
                v33 = 0;
                v34 = 0;
              }
              v35 = CGPDFAppenderGetMutableObject(*((char **)a1 + 27), v33, v34);
              CGPDFAppenderDictionarySetValue((__CFDictionary *)v35, "Parent", v29);
            }
          }
        }
      }
      else
      {
        pdf_error("Error: Failed to retrieve /Kids from pages dictionary");
      }
    }
    else
    {
      pdf_error("Error: Failed to retrieve /Pages from document catalog for append-mode");
    }
  }
  else
  {
    pdf_error("Error: Failed to retrieve document catalog for append-mode");
  }
}

void AppendModeExtractPagesTree(CGPDFDocument *a1, CGPDFDictionary *a2, __CFArray *a3, __CFSet *a4)
{
  CGPDFDocument *v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  size_t i;
  char *v11;
  __CFSet *v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  char *__s1;
  CGPDFDictionaryRef dict;
  CGPDFArrayRef value;

  v6 = a1;
  if (a1)
  {
    a1 = (CGPDFDocument *)*((_QWORD *)a1 + 4);
    v7 = *((_QWORD *)v6 + 5);
  }
  else
  {
    v7 = 0;
  }
  v8 = (const void *)CGPDFReferenceCreate((uint64_t)a1, v7);
  if (CFSetContainsValue(a3, v8))
  {
    CFRelease(v8);
  }
  else
  {
    CFSetAddValue(a3, v8);
    CFRelease(v8);
    value = 0;
    if (CGPDFDictionaryGetArray(v6, "Kids", &value))
    {
      if (value)
      {
        v9 = *((_QWORD *)value + 2);
        if (v9)
        {
          for (i = 0; i != v9; ++i)
          {
            dict = 0;
            if (CGPDFArrayGetDictionary(value, i, &dict))
            {
              __s1 = 0;
              if (CGPDFDictionaryGetName(dict, "Type", (const char **)&__s1))
              {
                v11 = __s1;
                if (!strcmp(__s1, "Page"))
                {
                  if (dict)
                  {
                    v13 = *((_QWORD *)dict + 4);
                    v14 = *((_QWORD *)dict + 5);
                  }
                  else
                  {
                    v13 = 0;
                    v14 = 0;
                  }
                  v15 = (const void *)CGPDFReferenceCreate(v13, v14);
                  CFArrayAppendValue(a2, v15);
                  CFRelease(v15);
                }
                else if (!strcmp(v11, "Pages"))
                {
                  AppendModeExtractPagesTree(dict, a2, a3, v12);
                }
              }
            }
          }
        }
      }
    }
  }
}

void CGPDFDocumentInsertPageAtIndex(uint64_t a1, CGPDFPage *a2, uint64_t a3)
{
  os_unfair_lock_s *v6;
  __CFArray *v7;
  CFIndex Count;
  unint64_t v9;
  unint64_t v10;
  uint64_t PageObject;
  uint64_t v12;
  const void *v13;
  __CFDictionary *v14;
  int v15;
  CFArrayRef theArray;
  __CFDictionary *v17;

  v6 = (os_unfair_lock_s *)(a1 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 212));
  theArray = 0;
  v17 = 0;
  AppendModeGetMutablePages((CGPDFDocument *)a1, &v17, &theArray);
  v7 = theArray;
  Count = CFArrayGetCount(theArray);
  v9 = a3 - 1;
  if (v9 < Count + 1)
  {
    v10 = Count;
    PageObject = CGPDFAppenderCreatePageObject(*(_QWORD *)(a1 + 216), a2);
    v13 = (const void *)CGPDFReferenceCreate(PageObject, v12);
    if (v9 >= v10)
      CFArrayAppendValue(v7, v13);
    else
      CFArrayInsertValueAtIndex(v7, v9, v13);
    CFRelease(v13);
    v14 = v17;
    v15 = CFArrayGetCount(v7);
    CGPDFAppenderDictionarySetInt32(v14, "Count", v15);
  }
  os_unfair_lock_unlock(v6);
}

void CGPDFDocumentRemovePageAtIndex(os_unfair_lock_s *a1, CFIndex a2)
{
  os_unfair_lock_s *v4;
  __CFDictionary *v5;
  __CFArray *v6;
  BOOL v7;
  BOOL v8;
  int Count;
  __CFArray *v10;
  __CFDictionary *v11;

  v4 = a1 + 53;
  os_unfair_lock_lock(a1 + 53);
  v10 = 0;
  v11 = 0;
  AppendModeGetMutablePages((CGPDFDocument *)a1, &v11, &v10);
  v6 = v10;
  v5 = v11;
  if (v11)
    v7 = v10 == 0;
  else
    v7 = 1;
  v8 = v7 || a2 == 0;
  if (!v8 && CFArrayGetCount(v10) >= a2)
  {
    CFArrayRemoveValueAtIndex(v6, a2 - 1);
    Count = CFArrayGetCount(v6);
    CGPDFAppenderDictionarySetInt32(v5, "Count", Count);
  }
  os_unfair_lock_unlock(v4);
}

void CGPDFDocumentExchangePagesAtIndices(uint64_t a1, unint64_t a2, unint64_t a3)
{
  CGPDFDictionary *number_of_pages;
  __CFArray *v8;
  CFIndex KidsArrayPageIndex;
  CFIndex v10;
  __CFArray *v11;
  __CFDictionary *v12;

  number_of_pages = pdf_reader_get_number_of_pages(*(uint64_t **)(*(_QWORD *)(a1 + 16) + 16));
  if (a2 && a2 != a3 && (unint64_t)number_of_pages >= a2 && a3 - 1 < (unint64_t)number_of_pages)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 212));
    v11 = 0;
    v12 = 0;
    AppendModeGetMutablePages((CGPDFDocument *)a1, &v12, &v11);
    v8 = v11;
    KidsArrayPageIndex = AppendModeGetKidsArrayPageIndex((CGPDFDocument *)a1, v11, a2);
    v10 = AppendModeGetKidsArrayPageIndex((CGPDFDocument *)a1, v8, a3);
    if ((KidsArrayPageIndex & 0x8000000000000000) == 0 && (v10 & 0x8000000000000000) == 0)
      CFArrayExchangeValuesAtIndices(v8, KidsArrayPageIndex, v10);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 212));
  }
}

CFIndex AppendModeGetKidsArrayPageIndex(CGPDFDocument *a1, __CFArray *a2, unint64_t a3)
{
  _QWORD *page_dictionary;
  _QWORD *v5;
  uint64_t v6;
  CFIndex v7;
  const void *v9;
  CFIndex Count;
  CFIndex v11;
  const void *ValueAtIndex;

  if (!a1)
    return -1;
  page_dictionary = pdf_document_get_page_dictionary(*(_QWORD *)(*((_QWORD *)a1 + 2) + 16), a3);
  if (!page_dictionary)
    return -1;
  v5 = page_dictionary;
  v6 = page_dictionary[4];
  if (!(v6 | (unsigned __int16)v5[5]))
    return -1;
  v9 = (const void *)CGPDFReferenceCreate(v6, v5[5]);
  Count = CFArrayGetCount(a2);
  if (Count < 1)
  {
LABEL_10:
    v7 = -1;
  }
  else
  {
    v11 = Count;
    v7 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a2, v7);
      if (CFEqual(ValueAtIndex, v9))
        break;
      if (v11 == ++v7)
        goto LABEL_10;
    }
  }
  CFRelease(v9);
  return v7;
}

void CGPDFDocumentAppendMetadata(uint64_t a1, const __CFData *a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  const __CFData *v6;
  CFMutableDataRef MutableCopy;

  v4 = (os_unfair_lock_s *)(a1 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 212));
  v5 = *(_QWORD *)(a1 + 216);
  if (v5)
  {
    v6 = *(const __CFData **)(v5 + 24);
    if (v6 != a2)
    {
      if (v6)
        CFRelease(v6);
      if (a2)
        MutableCopy = CFDataCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a2);
      else
        MutableCopy = 0;
      *(_QWORD *)(v5 + 24) = MutableCopy;
    }
  }
  os_unfair_lock_unlock(v4);
}

void CGPDFDocumentAppendDocumentInfo(uint64_t a1, const void *a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  BOOL v6;
  const void *v7;

  v4 = (os_unfair_lock_s *)(a1 + 212);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 212));
  v5 = *(_QWORD *)(a1 + 216);
  if (v5)
    v6 = a2 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    v7 = *(const void **)(v5 + 32);
    if (v7 != a2)
    {
      if (v7)
        CFRelease(v7);
      *(_QWORD *)(v5 + 32) = a2;
      CFRetain(a2);
    }
  }
  os_unfair_lock_unlock(v4);
}

CGDataConsumerRef CGDataConsumerCreate(void *info, const CGDataConsumerCallbacks *cbks)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CGDataConsumerRef result;
  CGDataConsumerPutBytesCallback putBytes;
  CGDataConsumerCallbacks v12;
  CGDataConsumerCallbacks v13;

  if (!cbks)
    return 0;
  if (_block_invoke_once_1320 != -1)
    dispatch_once(&_block_invoke_once_1320, &__block_literal_global_7_1321);
  result = (CGDataConsumerRef)CGTypeCreateInstance(CGDataConsumerGetTypeID_data_consumer_type_id, 96, v2, v3, v4, v5, v6, v7);
  if (result)
  {
    *((_QWORD *)result + 2) = info;
    *(_OWORD *)((char *)result + 24) = 0u;
    *(_OWORD *)((char *)result + 40) = 0u;
    *((_BYTE *)result + 56) = 0;
    putBytes = cbks->putBytes;
    if (cbks->putBytes == (CGDataConsumerPutBytesCallback)1)
    {
      v12 = *cbks;
      v13 = cbks[2];
      *((CGDataConsumerCallbacks *)result + 5) = cbks[1];
      *((CGDataConsumerCallbacks *)result + 6) = v13;
      *((CGDataConsumerCallbacks *)result + 4) = v12;
    }
    else
    {
      *((_QWORD *)result + 8) = 0;
      if (putBytes)
      {
        *((_QWORD *)result + 9) = putBytes;
        *((_QWORD *)result + 11) = 0;
        *((_QWORD *)result + 12) = 0;
        *((_QWORD *)result + 10) = 0;
        *((_QWORD *)result + 13) = cbks->releaseConsumer;
      }
      else
      {
        *(CGDataConsumerCallbacks *)((char *)result + 72) = *(CGDataConsumerCallbacks *)&cbks->releaseConsumer;
        *((_QWORD *)result + 11) = 0;
        *((CGDataConsumerCallbacks *)result + 6) = *(const CGDataConsumerCallbacks *)((char *)cbks + 24);
      }
    }
  }
  return result;
}

CFStringRef data_consumer_copy_format_description(const void *a1, const __CFDictionary *a2)
{
  const __CFAllocator *v4;

  v4 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v4, a2, CFSTR("<CGDataConsumer %p>"), a1);
}

CFStringRef data_consumer_copy_debug_description(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CGDataConsumer %p>"), a1);
}

void data_consumer_reclaim(uint64_t a1)
{
  void (*v2)(_QWORD);

  CGDataConsumerClose(a1);
  v2 = *(void (**)(_QWORD))(a1 + 104);
  if (v2)
  {
    v2(*(_QWORD *)(a1 + 16));
    *(_QWORD *)(a1 + 104) = 0;
  }
  free(*(void **)(a1 + 24));
  *(_QWORD *)(a1 + 24) = 0;
}

uint64_t CGDataConsumerClose(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);
  void (*v3)(_QWORD);

  if (result)
  {
    v1 = result;
    if (!*(_BYTE *)(result + 56))
    {
      v2 = *(uint64_t (**)(_QWORD))(result + 96);
      if (v2)
      {
        v3 = *(void (**)(_QWORD))(result + 80);
        if (v3)
        {
          v3(*(_QWORD *)(result + 16));
          v2 = *(uint64_t (**)(_QWORD))(v1 + 96);
        }
        result = v2(*(_QWORD *)(v1 + 16));
        *(_BYTE *)(v1 + 56) = 1;
      }
    }
  }
  return result;
}

CFTypeID CGDataConsumerGetTypeID(void)
{
  if (_block_invoke_once_1320 != -1)
    dispatch_once(&_block_invoke_once_1320, &__block_literal_global_7_1321);
  return CGDataConsumerGetTypeID_data_consumer_type_id;
}

const char *CGDataConsumerCreateWithFilename(const char *result)
{
  FILE *v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CGDataConsumerCallbacks cbks;
  void (*v11)(FILE *);
  BOOL (*v12)(FILE *, uint64_t);
  void (*v13)(FILE *);
  uint64_t v14;

  if (result)
  {
    v1 = fopen(result, "wb");
    if (v1)
    {
      cbks.putBytes = (CGDataConsumerPutBytesCallback)1;
      cbks.releaseConsumer = (CGDataConsumerReleaseInfoCallback)file_put_bytes;
      v11 = file_flush_bytes;
      v12 = file_set_position;
      v13 = file_close;
      v14 = 0;
      return (const char *)CGDataConsumerCreate(v1, &cbks);
    }
    else
    {
      v2 = __error();
      strerror(*v2);
      return 0;
    }
  }
  return result;
}

size_t file_put_bytes(FILE *__stream, void *__ptr, size_t a3)
{
  return fwrite(__ptr, 1uLL, a3, __stream);
}

void file_flush_bytes(FILE *a1)
{
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (fflush(a1))
  {
    v1 = __error();
    strerror(*v1);
    CGPostError((uint64_t)"CGDataConsumer(%s): fflush failed: %s.", v2, v3, v4, v5, v6, v7, v8, (char)"file_flush_bytes");
  }
}

BOOL file_set_position(FILE *a1, uint64_t a2)
{
  int v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = fseek(a1, a2, 0);
  if (v2)
  {
    v3 = __error();
    strerror(*v3);
    CGPostError((uint64_t)"CGDataConsumer(%s): fseek failed: %s.", v4, v5, v6, v7, v8, v9, v10, (char)"file_set_position");
  }
  return v2 == 0;
}

void file_close(FILE *a1)
{
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (fclose(a1))
  {
    v1 = __error();
    strerror(*v1);
    CGPostError((uint64_t)"CGDataConsumer(%s): fclose failed: %s.", v2, v3, v4, v5, v6, v7, v8, (char)"file_close");
  }
}

CGDataConsumerRef CGDataConsumerCreateWithFile(CGDataConsumerRef result)
{
  CGDataConsumerCallbacks v1;
  void (*v2)(FILE *);
  BOOL (*v3)(FILE *, uint64_t);
  void (*v4)(FILE *);
  uint64_t v5;

  if (result)
  {
    v1.putBytes = (CGDataConsumerPutBytesCallback)1;
    v1.releaseConsumer = (CGDataConsumerReleaseInfoCallback)file_put_bytes;
    v2 = file_flush_bytes;
    v3 = file_set_position;
    v4 = file_close;
    v5 = 0;
    return CGDataConsumerCreate(result, &v1);
  }
  return result;
}

CGDataConsumerRef CGDataConsumerCreateWithURL(CGDataConsumerRef url)
{
  const __CFURL *v1;
  const __CFString *v2;
  const __CFString *v3;
  CFComparisonResult v4;
  _QWORD *v5;
  CFMutableDataRef Mutable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CGDataConsumerCallbacks cbks;
  uint64_t v15;
  BOOL (*v16)(uint64_t, CFIndex);
  void (*v17)(CFTypeRef *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (url)
  {
    v1 = url;
    v2 = CFURLCopyScheme(url);
    if (v2 && (v3 = v2, v4 = CFStringCompare(v2, CFSTR("file"), 0), CFRelease(v3), v4 == kCFCompareEqualTo))
    {
      if (CFURLGetFileSystemRepresentation(v1, 1u, (UInt8 *)&cbks, 1025))
        return (CGDataConsumerRef)CGDataConsumerCreateWithFilename((const char *)&cbks);
      CGPostError((uint64_t)"%s: failed to get file system representation of url.", v7, v8, v9, v10, v11, v12, v13, (char)"CGDataConsumerCreateWithURL");
    }
    else
    {
      v5 = malloc_type_malloc(0x18uLL, 0x2062DE7BuLL);
      Mutable = CFDataCreateMutable(0, 0);
      v5[1] = Mutable;
      if (Mutable)
      {
        *v5 = CFRetain(v1);
        v5[2] = 0;
        cbks.putBytes = (CGDataConsumerPutBytesCallback)1;
        cbks.releaseConsumer = (CGDataConsumerReleaseInfoCallback)url_put_bytes;
        v15 = 0;
        v16 = url_set_position;
        v17 = url_close;
        v18 = 0;
        return CGDataConsumerCreate(v5, &cbks);
      }
      free(v5);
    }
    return 0;
  }
  return url;
}

unint64_t url_put_bytes(uint64_t a1, const UInt8 *a2, unint64_t a3)
{
  CFIndex Length;
  CFRange v7;
  unint64_t v8;
  CFIndex v9;
  __CFData *v10;
  const UInt8 *v11;
  CFIndex v12;

  Length = CFDataGetLength(*(CFDataRef *)(a1 + 8));
  v7.location = *(_QWORD *)(a1 + 16);
  v8 = Length - v7.location;
  if (Length <= v7.location)
  {
    v10 = *(__CFData **)(a1 + 8);
    v11 = a2;
    v12 = a3;
    goto LABEL_8;
  }
  if (v8 >= a3)
    v9 = a3;
  else
    v9 = Length - v7.location;
  v7.length = v9;
  CFDataReplaceBytes(*(CFMutableDataRef *)(a1 + 8), v7, a2, v9);
  if (v8 < a3)
  {
    v10 = *(__CFData **)(a1 + 8);
    v11 = &a2[v9];
    v12 = a3 - v9;
LABEL_8:
    CFDataAppendBytes(v10, v11, v12);
  }
  *(_QWORD *)(a1 + 16) += a3;
  return a3;
}

BOOL url_set_position(uint64_t a1, CFIndex a2)
{
  CFIndex Length;

  Length = CFDataGetLength(*(CFDataRef *)(a1 + 8));
  if (Length >= a2)
    *(_QWORD *)(a1 + 16) = a2;
  return Length >= a2;
}

void url_close(CFTypeRef *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFURL *v9;
  CFTypeRef v10;
  CFTypeID v11;
  CFTypeID v12;
  CFTypeID v14;
  int v15;
  __CFWriteStream *v16;
  __CFWriteStream *v17;
  CFIndex Length;
  const UInt8 *BytePtr;
  CFIndex v20;
  const __CFAllocator *v21;
  __CFHTTPMessage *Request;
  CFIndex v23;
  const __CFString *v24;
  __CFHTTPMessage *v25;
  CFIndex ResponseStatusCode;

  v9 = (const __CFURL *)*a1;
  if (!*a1)
    goto LABEL_19;
  v10 = a1[1];
  v11 = CFGetTypeID(*a1);
  v12 = CFURLGetTypeID();
  if (!v10 || v11 != v12)
    goto LABEL_19;
  v14 = CFGetTypeID(v10);
  if (v14 != CFDataGetTypeID() || CFDataGetLength((CFDataRef)v10) < 1)
    goto LABEL_19;
  v15 = CGCFURLGetType(v9);
  if (v15 != 2)
  {
    if (v15 == 1)
    {
      v16 = CFWriteStreamCreateWithFTPURL(0, v9);
      if (v16)
      {
        v17 = v16;
        if (CFWriteStreamOpen(v16) == 1)
        {
          Length = CFDataGetLength((CFDataRef)v10);
          BytePtr = CFDataGetBytePtr((CFDataRef)v10);
          v20 = CFWriteStreamWrite(v17, BytePtr, Length);
          CFWriteStreamClose(v17);
          CFRelease(v17);
          if (v20 == Length)
            goto LABEL_20;
        }
        else
        {
          CFRelease(v17);
        }
      }
    }
    goto LABEL_19;
  }
  v21 = CFGetAllocator(v9);
  Request = CFHTTPMessageCreateRequest(v21, CFSTR("PUT"), v9, (CFStringRef)*MEMORY[0x1E0C930E0]);
  v23 = CFDataGetLength((CFDataRef)v10);
  v24 = CFStringCreateWithFormat(v21, 0, CFSTR("%ld"), v23);
  CFHTTPMessageSetHeaderFieldValue(Request, CFSTR("Content-Length"), v24);
  CFRelease(v24);
  v25 = http_message_send_request(Request);
  CFRelease(Request);
  if (!v25
    || (ResponseStatusCode = CFHTTPMessageGetResponseStatusCode(v25),
        CFRelease(v25),
        (unint64_t)(ResponseStatusCode - 200) >= 0x64))
  {
LABEL_19:
    CGPostError((uint64_t)"CGDataConsumer(%s): write failed.", a2, a3, a4, a5, a6, a7, a8, (char)"url_close");
  }
LABEL_20:
  CFRelease(a1[1]);
  CFRelease(*a1);
  free(a1);
}

CGDataConsumerRef CGDataConsumerCreateWithCFData(CGDataConsumerRef data)
{
  CGDataConsumerRef v1;
  _QWORD *v2;
  CFTypeRef v3;
  CGDataConsumerCallbacks v4;
  uint64_t v5;
  BOOL (*v6)(uint64_t, CFIndex);
  void (*v7)(CFTypeRef *);
  uint64_t v8;

  if (data)
  {
    v1 = data;
    v2 = malloc_type_malloc(0x10uLL, 0x2062DE7BuLL);
    v3 = CFRetain(v1);
    *v2 = v3;
    if (v3)
    {
      v2[1] = 0;
      v4.putBytes = (CGDataConsumerPutBytesCallback)1;
      v4.releaseConsumer = (CGDataConsumerReleaseInfoCallback)data_put_bytes;
      v5 = 0;
      v6 = data_set_position;
      v7 = data_release;
      v8 = 0;
      return CGDataConsumerCreate(v2, &v4);
    }
    else
    {
      free(v2);
      return 0;
    }
  }
  return data;
}

unint64_t data_put_bytes(uint64_t a1, const UInt8 *a2, unint64_t a3)
{
  CFIndex Length;
  CFRange v7;
  unint64_t v8;
  CFIndex v9;
  __CFData *v10;
  const UInt8 *v11;
  CFIndex v12;

  Length = CFDataGetLength(*(CFDataRef *)a1);
  v7.location = *(_QWORD *)(a1 + 8);
  v8 = Length - v7.location;
  if (Length <= v7.location)
  {
    v10 = *(__CFData **)a1;
    v11 = a2;
    v12 = a3;
    goto LABEL_8;
  }
  if (v8 >= a3)
    v9 = a3;
  else
    v9 = Length - v7.location;
  v7.length = v9;
  CFDataReplaceBytes(*(CFMutableDataRef *)a1, v7, a2, v9);
  if (v8 < a3)
  {
    v10 = *(__CFData **)a1;
    v11 = &a2[v9];
    v12 = a3 - v9;
LABEL_8:
    CFDataAppendBytes(v10, v11, v12);
  }
  *(_QWORD *)(a1 + 8) += a3;
  return a3;
}

BOOL data_set_position(uint64_t a1, CFIndex a2)
{
  CFIndex Length;

  Length = CFDataGetLength(*(CFDataRef *)a1);
  if (Length >= a2)
    *(_QWORD *)(a1 + 8) = a2;
  return Length >= a2;
}

void data_release(CFTypeRef *a1)
{
  CFRelease(*a1);
  free(a1);
}

CGDataConsumerRef CGDataConsumerRetain(CGDataConsumerRef consumer)
{
  if (consumer)
    CFRetain(consumer);
  return consumer;
}

void CGDataConsumerRelease(CGDataConsumerRef consumer)
{
  if (consumer)
    CFRelease(consumer);
}

uint64_t CGDataConsumerPutBytes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v4)(_QWORD);
  uint64_t v5;
  uint64_t v6;

  if (!a1)
    return 0;
  if (*(_BYTE *)(a1 + 56))
    return 0;
  v4 = *(uint64_t (**)(_QWORD))(a1 + 72);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48) + a3;
  *(_QWORD *)(a1 + 48) = v6;
  if (v6 > v5)
    *(_QWORD *)(a1 + 40) = v6;
  return v4(*(_QWORD *)(a1 + 16));
}

_BYTE *CGDataConsumerPrintf(_BYTE *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return CGDataConsumerVPrintf(a1, a2, &a9);
}

_BYTE *CGDataConsumerVPrintf(_BYTE *result, char *a2, va_list a3)
{
  uint64_t v3;
  unsigned int v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;

  if (result)
  {
    v3 = (uint64_t)result;
    if (result[56] || !*((_QWORD *)result + 9))
      return 0;
    if (*((_QWORD *)result + 3)
      || (*((_QWORD *)result + 4) = 1024,
          result = malloc_type_malloc(0x400uLL, 0x705560E0uLL),
          (*(_QWORD *)(v3 + 24) = result) != 0))
    {
      while (1)
      {
        v5 = vsnprintf_l(*(char **)(v3 + 24), *(_QWORD *)(v3 + 32), 0, a2, a3);
        if ((v5 & 0x80000000) != 0)
          break;
        if (*(_QWORD *)(v3 + 32) > (unint64_t)v5)
        {
          v7 = *(_QWORD *)(v3 + 40);
          v8 = *(_QWORD *)(v3 + 48) + v5;
          *(_QWORD *)(v3 + 48) = v8;
          if (v8 > v7)
            *(_QWORD *)(v3 + 40) = v8;
          return (_BYTE *)(*(uint64_t (**)(_QWORD, _QWORD))(v3 + 72))(*(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
        }
        v6 = v5 + 1;
        *(_QWORD *)(v3 + 32) = v6;
        *(_QWORD *)(v3 + 24) = malloc_type_realloc(*(void **)(v3 + 24), v6, 0x7492344AuLL);
      }
      return 0;
    }
  }
  return result;
}

uint64_t CGDataConsumerGetByteCount(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 40);
  return result;
}

uint64_t CGDataConsumerSetPosition(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD);

  if (result)
  {
    v2 = result;
    if (*(_BYTE *)(result + 56))
      return 0;
    v3 = *(uint64_t (**)(_QWORD))(result + 88);
    if (!v3)
    {
      return 0;
    }
    else
    {
      result = v3(*(_QWORD *)(result + 16));
      if ((_DWORD)result)
      {
        *(_QWORD *)(v2 + 48) = a2;
        return 1;
      }
    }
  }
  return result;
}

uint64_t CGDataConsumerGetPosition(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 48);
  return result;
}

uint64_t CGDataConsumerFlush(uint64_t result)
{
  uint64_t (*v1)(_QWORD);

  if (result && !*(_BYTE *)(result + 56))
  {
    v1 = *(uint64_t (**)(_QWORD))(result + 80);
    if (v1)
      return v1(*(_QWORD *)(result + 16));
  }
  return result;
}

uint64_t CGDataConsumerGetURL(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    if (*(unint64_t (**)(uint64_t, const UInt8 *, unint64_t))(result + 72) == url_put_bytes
      && (v1 = *(_QWORD *)(result + 16)) != 0)
    {
      return *(_QWORD *)v1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

_DWORD *propertyListRetain(uint64_t a1, _DWORD *a2)
{
  _DWORD *result;

  result = a2;
  if (a2)
    ++*a2;
  return result;
}

void propertyListRelease(uint64_t a1, _DWORD *a2)
{
  PDFPropertyListRelease(a2);
}

BOOL propertyListEqual(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  _BOOL8 result;

  if (a1 == a2)
    return 1;
  v4 = *(_DWORD *)(a1 + 44);
  if (v4 != *(_DWORD *)(a2 + 44))
    return 0;
  v5 = strcmp(*(const char **)(a1 + 104), *(const char **)(a2 + 104));
  if (v4 != 1 || v5 != 0)
    return 0;
  result = CGStyleEqualToStyle(*(_QWORD *)(a1 + 48), *(_QWORD *)(a2 + 48));
  if (result)
  {
    if (*(double *)(a1 + 56) == *(double *)(a2 + 56))
      return vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 64), *(float64x2_t *)(a2 + 64)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 80), *(float64x2_t *)(a2 + 80)))), 0xFuLL))) & (*(double *)(a1 + 96) == *(double *)(a2 + 96));
    return 0;
  }
  return result;
}

uint64_t propertyListHash(uint64_t a1)
{
  unsigned int v1;
  _BYTE *v2;
  int v3;
  unsigned __int8 *v4;
  int v5;

  v1 = *(_DWORD *)(a1 + 44);
  v2 = *(_BYTE **)(a1 + 104);
  v3 = *v2;
  if (*v2)
  {
    v4 = v2 + 1;
    do
    {
      v1 = 257 * v1 + v3;
      v5 = *v4++;
      v3 = v5;
    }
    while (v5);
  }
  return v1;
}

_BYTE *emitPropertyListDefinition(_BYTE *result, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  __double2 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  CGColorSpace *ColorSpace;
  const char *v75;
  PDFDocumentPrivate *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t NumberOfComponents;
  const CGFloat *Components;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;

  if (!result[40])
  {
    v9 = result;
    v11 = *((_QWORD *)result + 1);
    v10 = *((_QWORD *)result + 2);
    if (!v10)
    {
      v10 = PDFXRefTableAddObject(*(_QWORD **)(v11 + 464));
      *((_QWORD *)v9 + 2) = v10;
    }
    PDFDocumentBeginObject(v11, v10, a3, a4, a5, a6, a7, a8);
    PDFDocumentPrintf(*((_QWORD *)v9 + 1), (uint64_t)"<<", v12, v13, v14, v15, v16, v17, v115);
    PDFDocumentPrintf(*((_QWORD *)v9 + 1), (uint64_t)"/Type /PropertyList", v18, v19, v20, v21, v22, v23, v116);
    if (*((_DWORD *)v9 + 11) == 1)
    {
      PDFDocumentPrintf(*((_QWORD *)v9 + 1), (uint64_t)"/%s", v24, v25, v26, v27, v28, v29, *((_QWORD *)v9 + 13));
      v36 = (double *)*((_QWORD *)v9 + 6);
      v37 = *((_QWORD *)v9 + 1);
      if (v36)
      {
        PDFDocumentPrintf(v37, (uint64_t)"<<", v30, v31, v32, v33, v34, v35, v118);
        PDFDocumentPrintf(*((_QWORD *)v9 + 1), (uint64_t)"/Type /Style", v38, v39, v40, v41, v42, v43, v119);
        PDFDocumentPrintf(*((_QWORD *)v9 + 1), (uint64_t)"/Subtype /Shadow", v44, v45, v46, v47, v48, v49, v120);
        v50 = v36[8];
        v51 = __sincos_stret((v36[6] + -180.0) * 3.14159265 / 180.0);
        PDFDocumentPrintf(*((_QWORD *)v9 + 1), (uint64_t)"/Offset [ %f %f ]", v52, v53, v54, v55, v56, v57, COERCE__INT64(*((double *)v9 + 9) * (v50 * v51.__sinval) + *((double *)v9 + 7) * (v50 * v51.__cosval)));
        v58 = v36[9];
        if (v58 != 0.0)
        {
          v59 = *((double *)v9 + 7);
          v60 = *((double *)v9 + 8);
          v61 = *((double *)v9 + 9);
          v62 = *((double *)v9 + 10);
          v63 = sqrt((v62 * 0.0 + v60 * v58) * (v62 * 0.0 + v60 * v58) + (v61 * 0.0 + v59 * v58)
                                                                       * (v61 * 0.0 + v59 * v58));
          v64 = sqrt((v58 * v62 + v60 * 0.0) * (v58 * v62 + v60 * 0.0) + (v58 * v61 + v59 * 0.0)
                                                                       * (v58 * v61 + v59 * 0.0));
          if (v63 > v64)
            v64 = v63;
          PDFDocumentPrintf(*((_QWORD *)v9 + 1), (uint64_t)"/Radius %f", v30, v31, v32, v33, v34, v35, *(uint64_t *)&v64);
        }
        if (*((double *)v9 + 7) != 1.0
          || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*((float64x2_t *)v9 + 4)), (int32x4_t)vceqq_f64(*((float64x2_t *)v9 + 5), (float64x2_t)xmmword_185004990))))) & 1) != 0|| *((double *)v9 + 12) != 0.0)
        {
          PDFDocumentPrintf(*((_QWORD *)v9 + 1), (uint64_t)"/BMatrix %m", v30, v31, v32, v33, v34, v35, (uint64_t)(v9 + 56));
        }
        v65 = *((_QWORD *)v9 + 6);
        if (v65)
        {
          v66 = *(_QWORD *)(v65 + 24);
          if (v66)
          {
            PDFDocumentPrintf(*((_QWORD *)v9 + 1), (uint64_t)"/ColorSpace", v30, v31, v32, v33, v34, v35, v118);
            if ((v66 & 0x8000000000000000) != 0)
              ColorSpace = CGTaggedColorGetColorSpace(v66, v67, v68, v69, v70, v71, v72, v73);
            else
              ColorSpace = *(CGColorSpace **)(v66 + 24);
            v76 = PDFDocumentResolveColorSpace(*((_QWORD *)v9 + 1), ColorSpace);
            v77 = PDFDocumentAddColorSpace(*((_QWORD *)v9 + 1), v76);
            PDFColorSpaceEmitReference(v77, v78, v79, v80, v81, v82, v83, v84);
            PDFDocumentPrintf(*((_QWORD *)v9 + 1), (uint64_t)"/Color [", v85, v86, v87, v88, v89, v90, v121);
            if ((v66 & 0x8000000000000000) != 0)
              NumberOfComponents = CGTaggedColorGetNumberOfComponents(v66, v91, v92, v93, v94, v95, v96, v97);
            else
              NumberOfComponents = *(_QWORD *)(v66 + 56);
            Components = CGColorGetComponents((CGColorRef)v66);
            if (NumberOfComponents)
            {
              v106 = (uint64_t *)Components;
              do
              {
                v107 = *v106++;
                PDFDocumentPrintf(*((_QWORD *)v9 + 1), (uint64_t)"%f", v100, v101, v102, v103, v104, v105, v107);
                --NumberOfComponents;
              }
              while (NumberOfComponents);
            }
            PDFDocumentPrintf(*((_QWORD *)v9 + 1), (uint64_t)"]", v100, v101, v102, v103, v104, v105, v122);
          }
        }
        v37 = *((_QWORD *)v9 + 1);
        v75 = ">>";
      }
      else
      {
        v75 = "/None";
      }
      PDFDocumentPrintf(v37, (uint64_t)v75, v30, v31, v32, v33, v34, v35, v118);
    }
    PDFDocumentPrintf(*((_QWORD *)v9 + 1), (uint64_t)">>", v24, v25, v26, v27, v28, v29, v117);
    result = PDFDocumentEndObject(*((_QWORD *)v9 + 1), v108, v109, v110, v111, v112, v113, v114);
    v9[40] = 1;
  }
  *a2 = 1;
  return result;
}

_QWORD *CGIOSurfaceContextCreateWithOptions(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const void *a6, int a7, uint64_t a8)
{
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;

  if (!a1)
    return 0;
  if (iosurface_context_vtable_once != -1)
    dispatch_once_f(&iosurface_context_vtable_once, 0, (dispatch_function_t)load_iosurface_context_vtable);
  v16 = vtable;
  if (!vtable)
    return 0;
  v17 = malloc_type_malloc(0x38uLL, 0x2062DE7BuLL);
  *v17 = a2;
  v17[1] = a3;
  v17[2] = CFRetain(a1);
  v17[3] = a4;
  v17[4] = a5;
  if (a6)
    CFRetain(a6);
  v17[5] = a6;
  *((_DWORD *)v17 + 12) = a7;
  v20 = (_QWORD *)CGContextCreateWithDelegateAndInfo(0, 8, 0, 0, (uint64_t)v17, (uint64_t)iosurface_context_finalize, v18, v19);
  v21 = (*(uint64_t (**)(_QWORD *, uint64_t))(v16 + 8))(v17, a8);
  v20[5] = v21;
  if (!v21)
  {
    CFRelease(v20);
    return 0;
  }
  return v20;
}

void CGIOSurfaceContextSetDisplayMask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = a1;
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 8)
  {
    if (iosurface_context_vtable_once != -1)
    {
      dispatch_once_f(&iosurface_context_vtable_once, 0, (dispatch_function_t)load_iosurface_context_vtable);
      v8 = a1;
    }
    (*(void (**)(_QWORD))(vtable + 16))(*(_QWORD *)(v8 + 40));
  }
  else
  {
    handle_invalid_context((char)"CGIOSurfaceContextSetDisplayMask", a1, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t CGIOSurfaceContextGetDisplayMask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = a1;
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 8)
  {
    if (iosurface_context_vtable_once != -1)
    {
      dispatch_once_f(&iosurface_context_vtable_once, 0, (dispatch_function_t)load_iosurface_context_vtable);
      v8 = a1;
    }
    return (*(uint64_t (**)(_QWORD))(vtable + 24))(*(_QWORD *)(v8 + 40));
  }
  else
  {
    handle_invalid_context((char)"CGIOSurfaceContextGetDisplayMask", a1, a3, a4, a5, a6, a7, a8);
    return 0;
  }
}

void CGIOSurfaceContextSetGPURegistryID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = a1;
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 8)
  {
    if (iosurface_context_vtable_once != -1)
    {
      dispatch_once_f(&iosurface_context_vtable_once, 0, (dispatch_function_t)load_iosurface_context_vtable);
      v8 = a1;
    }
    if (*(int *)vtable >= 3)
      (*(void (**)(_QWORD))(vtable + 56))(*(_QWORD *)(v8 + 40));
  }
  else
  {
    handle_invalid_context((char)"CGIOSurfaceContextSetGPURegistryID", a1, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t CGIOSurfaceContextGetGPURegistryID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = a1;
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 8)
  {
    if (iosurface_context_vtable_once != -1)
    {
      dispatch_once_f(&iosurface_context_vtable_once, 0, (dispatch_function_t)load_iosurface_context_vtable);
      v8 = a1;
    }
    if (*(int *)vtable >= 3)
      return (*(uint64_t (**)(_QWORD))(vtable + 64))(*(_QWORD *)(v8 + 40));
  }
  else
  {
    handle_invalid_context((char)"CGIOSurfaceContextGetGPURegistryID", a1, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t CGIOSurfaceContextGetWidth(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 8)
    return **(_QWORD **)(a1 + 32);
  handle_invalid_context((char)"CGIOSurfaceContextGetWidth", a1, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t CGIOSurfaceContextGetHeight(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 8)
    return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  handle_invalid_context((char)"CGIOSurfaceContextGetHeight", a1, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t CGIOSurfaceContextGetSurface(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 8)
    return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
  handle_invalid_context((char)"CGIOSurfaceContextGetSurface", a1, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t CGIOSurfaceContextGetBitsPerComponent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 8)
    return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  handle_invalid_context((char)"CGIOSurfaceContextGetBitsPerComponent", a1, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t CGIOSurfaceContextGetBitsPerPixel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 8)
    return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
  handle_invalid_context((char)"CGIOSurfaceContextGetBitsPerPixel", a1, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t CGIOSurfaceContextGetColorSpace(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 8)
    return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40);
  handle_invalid_context((char)"CGIOSurfaceContextGetColorSpace", a1, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t CGIOSurfaceContextGetBitmapInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 8)
    return *(unsigned int *)(*(_QWORD *)(a1 + 32) + 48);
  handle_invalid_context((char)"CGIOSurfaceContextGetBitmapInfo", a1, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t CGIOSurfaceContextCreateImageReference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = a1;
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 8)
  {
    if (iosurface_context_vtable_once != -1)
    {
      dispatch_once_f(&iosurface_context_vtable_once, 0, (dispatch_function_t)load_iosurface_context_vtable);
      v8 = a1;
    }
    if (*(int *)vtable >= 1)
      return (*(uint64_t (**)(_QWORD, _QWORD))(vtable + 40))(*(_QWORD *)(v8 + 40), *(_QWORD *)(v8 + 32));
  }
  else
  {
    handle_invalid_context((char)"CGIOSurfaceContextCreateImageReference", a1, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t CGIOSurfaceContextGetSizeLimits(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 8)
  {
    if (iosurface_context_vtable_once != -1)
      dispatch_once_f(&iosurface_context_vtable_once, 0, (dispatch_function_t)load_iosurface_context_vtable);
    if (*(int *)vtable >= 2)
      return (*(uint64_t (**)(void))(vtable + 48))();
  }
  else
  {
    handle_invalid_context((char)"CGIOSurfaceContextGetSizeLimits", a1, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t *vec::template_mark_pixelmask_row<(CGCompositeOperation)0,_rgba8_t>(uint64_t *result, uint8x8_t **a2, unint64_t *a3, unsigned __int32 **a4, int a5, int a6, double a7, uint16x8_t a8, double a9, double a10, double a11, uint16x8_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16)
{
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint8x8_t *v19;
  unsigned __int32 *v20;
  uint64_t v21;
  uint64_t v22;
  uint16x8_t v23;
  unsigned __int32 v24;
  int8x16_t *v25;
  int8x16_t *v26;
  int8x16_t *v27;
  int8x16_t *v28;
  int64_t v29;
  int64_t v30;
  uint8x16_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  int8x16_t *v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  uint64_t v41;
  int8x16_t v42;
  uint16x8_t v43;
  unsigned int v44;
  uint16x8_t v45;
  unint64_t v46;
  uint64_t v47;

  v16 = a16;
  v17 = *result;
  v18 = *a3;
  v19 = *a2;
  v20 = *a4;
  if (a16 < 4)
    goto LABEL_33;
  v21 = 4 * a6;
  v22 = 16 * a6;
  a8.i64[0] = -1;
  a8.i64[1] = -1;
  v23 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  while (1)
  {
    v24 = *v20;
    if (*v20 == -1)
    {
      v34 = (int8x16_t *)((char *)v20 + v16);
      v35 = (int8x16_t *)v20;
      do
        v36 = v35++;
      while (v35 <= v34 && (vminvq_u8((uint8x16_t)vceqq_s8(*v36, (int8x16_t)a8)) & 0x80) != 0);
      do
      {
        v37 = v36;
        v36 = (int8x16_t *)((char *)v36 + 4);
      }
      while (v36 <= v34 && v37->i32[0] == -1);
      if (v37 < v34)
      {
        while (v37->u8[0] == 255)
        {
          v37 = (int8x16_t *)((char *)v37 + 1);
          if (v37 >= v34)
          {
            v37 = (int8x16_t *)((char *)v20 + v16);
            break;
          }
        }
      }
      v38 = 0;
      v39 = (char *)v37 - (char *)v20;
      v40 = (char *)v37 - (char *)v20;
      do
      {
        *(_OWORD *)&v19->i8[v38] = 0uLL;
        v20 = (unsigned __int32 *)((char *)v20 + v21);
        v40 -= 4;
        v38 += v22;
      }
      while (v40 > 3);
      v19 = (uint8x8_t *)((char *)v19 + v38);
      v17 += v38;
      v16 = v16 - v39 + v40;
      goto LABEL_30;
    }
    if (v24)
      break;
    v25 = (int8x16_t *)((char *)v20 + v16);
    v26 = (int8x16_t *)v20;
    do
      v27 = v26++;
    while (v26 <= v25 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v27)) & 0x80) != 0);
    do
    {
      v28 = v27;
      v27 = (int8x16_t *)((char *)v27 + 4);
    }
    while (v27 <= v25 && !v28->i32[0]);
    if (v28 < v25)
    {
      while (!v28->i8[0])
      {
        v28 = (int8x16_t *)((char *)v28 + 1);
        if (v28 >= v25)
        {
          v28 = (int8x16_t *)((char *)v20 + v16);
          break;
        }
      }
    }
    v29 = (char *)v28 - (char *)v20;
    v30 = ((char *)v28 - (char *)v20) * a6;
    v17 += 4 * v30;
    v19 = (uint8x8_t *)((char *)v19 + 4 * v30);
    v20 = (unsigned __int32 *)((char *)v20 + v30);
    v16 -= v29;
LABEL_30:
    if (v16 <= 3)
      goto LABEL_33;
  }
  while (1)
  {
    a12.i32[0] = v24;
    v31 = (uint8x16_t)vqtbl1q_s8((int8x16_t)a12, (int8x16_t)xmmword_185004A30);
    v32 = vminq_u16(vmull_u8(*v19, *(uint8x8_t *)v31.i8), v23);
    v33 = vminq_u16(vmull_high_u8(*(uint8x16_t *)v19->i8, v31), v23);
    a12 = vrsraq_n_u16(v33, v33, 8uLL);
    *(uint8x16_t *)v19->i8 = vqsubq_u8(*(uint8x16_t *)v19->i8, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v32, v32, 8uLL), 8uLL), a12, 8uLL));
    v20 = (unsigned __int32 *)((char *)v20 + v21);
    v16 -= 4;
    if (v16 < 4)
      break;
    v24 = *v20;
    v17 += v22;
    v19 = (uint8x8_t *)((char *)v19 + v22);
    if (*v20 - 1 >= 0xFFFFFFFE)
      goto LABEL_30;
  }
  v17 += v22;
  v19 = (uint8x8_t *)((char *)v19 + v22);
LABEL_33:
  v41 = v16 + a15;
  if (v41)
  {
    v42 = (int8x16_t)vdupq_n_s16(0xFE01u);
    do
    {
      a8.i32[0] = v19->i32[0];
      v43 = vmovl_u8(*(uint8x8_t *)a8.i8);
      LOBYTE(v44) = v43.i8[0];
      BYTE1(v44) = v43.i8[2];
      BYTE2(v44) = v43.i8[4];
      HIBYTE(v44) = v43.i8[6];
      v43.i8[0] = *(_BYTE *)v20;
      v43.i8[1] = *(_BYTE *)v20;
      v43.i8[2] = *(_BYTE *)v20;
      v43.i8[3] = *(_BYTE *)v20;
      v45 = vminq_u16(vmull_u8((uint8x8_t)v44, (uint8x8_t)v43.u32[0]), (uint16x8_t)v42);
      a8 = vrsraq_n_u16(v45, v45, 8uLL);
      *(uint8x8_t *)a8.i8 = vqsub_u8((uint8x8_t)v44, vqrshrn_n_u16(a8, 8uLL));
      *(int8x8_t *)a8.i8 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a8, v42));
      v19->i32[0] = a8.i32[0];
      v46 = v17 + 4 * a6;
      v20 = (unsigned __int32 *)((char *)v20 + a6);
      if (v46 >= v18)
        v47 = -(uint64_t)a5;
      else
        v47 = 0;
      v17 = v46 + 4 * v47;
      v19 = (uint8x8_t *)((char *)v19 + 4 * a6);
      --v41;
    }
    while (v41);
  }
  *result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

_DWORD **vec::template_mark_pixelmask_row<(CGCompositeOperation)1,_rgba8_t>(_DWORD **result, _DWORD **a2, unint64_t *a3, unsigned __int32 **a4, int a5, int a6, double a7, uint8x8_t a8, double a9, double a10, double a11, int8x16_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16)
{
  unint64_t v16;
  _DWORD *v17;
  unint64_t v18;
  _DWORD *v19;
  unsigned __int32 *v20;
  uint64_t v21;
  uint64_t v22;
  int8x16_t v23;
  uint16x8_t v24;
  unsigned __int32 v25;
  int8x16_t *v26;
  int8x16_t *v27;
  int8x16_t *v28;
  int8x16_t *v29;
  int64_t v30;
  int64_t v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  int8x16_t *v35;
  uint64_t v36;
  int64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint8x16_t v40;
  uint8x16_t v41;
  uint8x16_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint64_t v47;
  int8x16_t v48;
  uint16x8_t v49;
  unsigned int v50;
  uint16x8_t v51;
  unsigned int v52;
  uint16x8_t v53;
  int8x16_t v54;
  _DWORD *v55;
  uint64_t v56;

  v16 = a16;
  v17 = *result;
  v18 = *a3;
  v19 = *a2;
  v20 = *a4;
  if (a16 < 4)
    goto LABEL_34;
  v21 = 4 * a6;
  v22 = 16 * a6;
  v23.i64[0] = -1;
  v23.i64[1] = -1;
  a8.i32[1] = 16843009;
  v24 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  while (1)
  {
    v25 = *v20;
    if (*v20 == -1)
    {
      v32 = (int8x16_t *)((char *)v20 + v16);
      v33 = (int8x16_t *)v20;
      do
        v34 = v33++;
      while (v33 <= v32 && (vminvq_u8((uint8x16_t)vceqq_s8(*v34, v23)) & 0x80) != 0);
      do
      {
        v35 = v34;
        v34 = (int8x16_t *)((char *)v34 + 4);
      }
      while (v34 <= v32 && v35->i32[0] == -1);
      if (v35 < v32)
      {
        while (v35->u8[0] == 255)
        {
          v35 = (int8x16_t *)((char *)v35 + 1);
          if (v35 >= v32)
          {
            v35 = (int8x16_t *)((char *)v20 + v16);
            break;
          }
        }
      }
      v36 = 0;
      v37 = (char *)v35 - (char *)v20;
      v38 = (char *)v35 - (char *)v20;
      do
      {
        *(_OWORD *)((char *)v19 + v36) = *(_OWORD *)((char *)v17 + v36);
        v20 = (unsigned __int32 *)((char *)v20 + v21);
        v38 -= 4;
        v36 += v22;
      }
      while (v38 > 3);
      v19 = (_DWORD *)((char *)v19 + v36);
      v17 = (_DWORD *)((char *)v17 + v36);
      v16 = v16 - v37 + v38;
      goto LABEL_31;
    }
    if (v25)
      break;
    v26 = (int8x16_t *)((char *)v20 + v16);
    v27 = (int8x16_t *)v20;
    do
      v28 = v27++;
    while (v27 <= v26 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v28)) & 0x80) != 0);
    do
    {
      v29 = v28;
      v28 = (int8x16_t *)((char *)v28 + 4);
    }
    while (v28 <= v26 && !v29->i32[0]);
    if (v29 < v26)
    {
      while (!v29->i8[0])
      {
        v29 = (int8x16_t *)((char *)v29 + 1);
        if (v29 >= v26)
        {
          v29 = (int8x16_t *)((char *)v20 + v16);
          break;
        }
      }
    }
    v30 = (char *)v29 - (char *)v20;
    v31 = ((char *)v29 - (char *)v20) * a6;
    v17 += v31;
    v19 += v31;
    v20 = (unsigned __int32 *)((char *)v20 + v31);
    v16 -= v30;
LABEL_31:
    if (v16 <= 3)
      goto LABEL_34;
  }
  v39 = 0;
  while (1)
  {
    v40 = *(uint8x16_t *)((char *)v17 + v39);
    v41 = *(uint8x16_t *)((char *)v19 + v39);
    a12.i32[0] = v25;
    a12 = vqtbl1q_s8(a12, (int8x16_t)xmmword_185004A30);
    v42 = (uint8x16_t)vmvnq_s8(a12);
    v43 = vmlal_u8(vmull_u8(*(uint8x8_t *)v41.i8, *(uint8x8_t *)v42.i8), *(uint8x8_t *)v40.i8, *(uint8x8_t *)a12.i8);
    v44 = vmlal_high_u8(vmull_high_u8(v41, v42), v40, (uint8x16_t)a12);
    v45 = vminq_u16(v43, v24);
    v46 = vminq_u16(v44, v24);
    *(uint8x16_t *)((char *)v19 + v39) = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v45, v45, 8uLL), 8uLL), vrsraq_n_u16(v46, v46, 8uLL), 8uLL);
    v20 = (unsigned __int32 *)((char *)v20 + v21);
    v16 -= 4;
    if (v16 < 4)
      break;
    v25 = *v20;
    v39 += v22;
    if (*v20 - 1 >= 0xFFFFFFFE)
    {
      v17 = (_DWORD *)((char *)v17 + v39);
      v19 = (_DWORD *)((char *)v19 + v39);
      goto LABEL_31;
    }
  }
  v17 = (_DWORD *)((char *)v17 + v22 + v39);
  v19 = (_DWORD *)((char *)v19 + v22 + v39);
LABEL_34:
  v47 = v16 + a15;
  if (v47)
  {
    v48 = (int8x16_t)vdupq_n_s16(0xFE01u);
    do
    {
      a8.i32[0] = *v17;
      v49 = vmovl_u8(a8);
      LOBYTE(v50) = v49.i8[0];
      BYTE1(v50) = v49.i8[2];
      BYTE2(v50) = v49.i8[4];
      HIBYTE(v50) = v49.i8[6];
      v49.i32[0] = *v19;
      v51 = vmovl_u8(*(uint8x8_t *)v49.i8);
      LOBYTE(v52) = v51.i8[0];
      BYTE1(v52) = v51.i8[2];
      BYTE2(v52) = v51.i8[4];
      HIBYTE(v52) = v51.i8[6];
      v51.i8[0] = *(_BYTE *)v20;
      v51.i8[1] = *(_BYTE *)v20;
      v51.i8[2] = *(_BYTE *)v20;
      v51.i8[3] = *(_BYTE *)v20;
      v53 = vminq_u16(vmlal_u8(vmull_u8((uint8x8_t)v52, (uint8x8_t)vmvn_s8((int8x8_t)v51.u32[0])), (uint8x8_t)v50, (uint8x8_t)v51.u32[0]), (uint16x8_t)v48);
      v54 = (int8x16_t)vrsraq_n_u16(v53, v53, 8uLL);
      *(uint8x8_t *)v54.i8 = vqrshrn_n_u16((uint16x8_t)v54, 8uLL);
      a8 = (uint8x8_t)vmovn_s16((int16x8_t)vzip1q_s8(v54, v48));
      *v19 = a8.i32[0];
      v55 = &v17[a6];
      v20 = (unsigned __int32 *)((char *)v20 + a6);
      if ((unint64_t)v55 >= v18)
        v56 = -(uint64_t)a5;
      else
        v56 = 0;
      v17 = &v55[v56];
      v19 += a6;
      --v47;
    }
    while (v47);
  }
  *result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

unsigned __int32 **vec::template_mark_pixelmask_row<(CGCompositeOperation)3,_rgba8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, unsigned __int32 **a4, int a5, int a6, int a7, int8x16_t a8, double a9, double a10, uint16x8_t a11, double a12, double a13, double a14, uint16x8_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  unint64_t v18;
  unsigned __int32 *v19;
  unint64_t v20;
  _DWORD *v21;
  unsigned __int32 *v22;
  unsigned int v23;
  int8x16_t v24;
  uint64_t v25;
  uint64_t v26;
  uint16x8_t v27;
  unsigned __int32 v28;
  int8x16_t *v29;
  int8x16_t *v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int64_t v33;
  int64_t v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  int8x16_t *v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  uint8x16_t v42;
  uint8x16_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint64_t v47;
  int8x16_t v48;
  int8x16_t v49;
  uint8x16_t v50;
  int8x16_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint8x16_t v54;
  uint16x8_t v55;
  uint16x8_t v56;
  uint16x8_t v57;
  uint16x8_t v58;
  uint16x8_t v59;
  uint64_t v60;
  unsigned int v61;
  uint16x8_t v62;
  uint16x8_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  uint16x8_t v67;
  uint16x8_t v68;
  unsigned __int32 *v69;
  uint64_t v70;

  v18 = a18;
  v19 = *result;
  v20 = *a3;
  v21 = *a2;
  v22 = *a4;
  if (a18 < 4)
    goto LABEL_37;
  if (a7)
    v23 = 0;
  else
    v23 = -1;
  v24.i64[0] = 0xFF000000FF000000;
  v24.i64[1] = 0xFF000000FF000000;
  a8 = vandq_s8(vdupq_n_s8(v23), v24);
  v25 = 4 * a6;
  v26 = 16 * a6;
  v27 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a11.i64[0] = -1;
  a11.i64[1] = -1;
  while (1)
  {
    v28 = *v22;
    if (*v22 == -1)
    {
      v35 = (int8x16_t *)((char *)v22 + v18);
      v36 = (int8x16_t *)v22;
      do
        v37 = v36++;
      while (v36 <= v35 && (vminvq_u8((uint8x16_t)vceqq_s8(*v37, (int8x16_t)a11)) & 0x80) != 0);
      do
      {
        v38 = v37;
        v37 = (int8x16_t *)((char *)v37 + 4);
      }
      while (v37 <= v35 && v38->i32[0] == -1);
      if (v38 < v35)
      {
        while (v38->u8[0] == 255)
        {
          v38 = (int8x16_t *)((char *)v38 + 1);
          if (v38 >= v35)
          {
            v38 = (int8x16_t *)((char *)v22 + v18);
            break;
          }
        }
      }
      v39 = 0;
      v40 = (char *)v38 - (char *)v22;
      v41 = (char *)v38 - (char *)v22;
      do
      {
        v42 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v19 + v39), a8);
        v43 = (uint8x16_t)vqtbl1q_s8(*(int8x16_t *)((char *)v21 + v39), (int8x16_t)xmmword_185004A40);
        a15 = vmull_u8(*(uint8x8_t *)v42.i8, *(uint8x8_t *)v43.i8);
        v44 = vmull_high_u8(v42, v43);
        v45 = vminq_u16(a15, v27);
        v46 = vminq_u16(v44, v27);
        *(uint8x16_t *)((char *)v21 + v39) = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v45, v45, 8uLL), 8uLL), vrsraq_n_u16(v46, v46, 8uLL), 8uLL);
        v22 = (unsigned __int32 *)((char *)v22 + v25);
        v41 -= 4;
        v39 += v26;
      }
      while (v41 > 3);
      v21 = (_DWORD *)((char *)v21 + v39);
      v19 = (unsigned __int32 *)((char *)v19 + v39);
      v18 = v18 - v40 + v41;
      goto LABEL_34;
    }
    if (v28)
      break;
    v29 = (int8x16_t *)((char *)v22 + v18);
    v30 = (int8x16_t *)v22;
    do
      v31 = v30++;
    while (v30 <= v29 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v31)) & 0x80) != 0);
    do
    {
      v32 = v31;
      v31 = (int8x16_t *)((char *)v31 + 4);
    }
    while (v31 <= v29 && !v32->i32[0]);
    if (v32 < v29)
    {
      while (!v32->i8[0])
      {
        v32 = (int8x16_t *)((char *)v32 + 1);
        if (v32 >= v29)
        {
          v32 = (int8x16_t *)((char *)v22 + v18);
          break;
        }
      }
    }
    v33 = (char *)v32 - (char *)v22;
    v34 = ((char *)v32 - (char *)v22) * a6;
    v19 += v34;
    v21 += v34;
    v22 = (unsigned __int32 *)((char *)v22 + v34);
    v18 -= v33;
LABEL_34:
    if (v18 <= 3)
      goto LABEL_37;
  }
  v47 = 0;
  while (1)
  {
    v48 = *(int8x16_t *)((char *)v21 + v47);
    a15.i32[0] = v28;
    v49 = vqtbl1q_s8((int8x16_t)a15, (int8x16_t)xmmword_185004A30);
    v50 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v19 + v47), a8);
    v51 = vqtbl1q_s8(v48, (int8x16_t)xmmword_185004A40);
    v52 = vminq_u16(vmull_u8(*(uint8x8_t *)v50.i8, *(uint8x8_t *)v49.i8), v27);
    v53 = vminq_u16(vmull_high_u8(v50, (uint8x16_t)v49), v27);
    v54 = (uint8x16_t)vmvnq_s8(v49);
    v55 = vmull_u8(*(uint8x8_t *)v48.i8, *(uint8x8_t *)v54.i8);
    v56 = vmull_high_u8((uint8x16_t)v48, v54);
    a15 = vqaddq_u16(v55, vmull_u8(vqrshrn_n_u16(vrsraq_n_u16(v52, v52, 8uLL), 8uLL), *(uint8x8_t *)v51.i8));
    v57 = vqaddq_u16(v56, vmull_u8(vqrshrn_n_u16(vrsraq_n_u16(v53, v53, 8uLL), 8uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL)));
    v58 = vminq_u16(a15, v27);
    v59 = vminq_u16(v57, v27);
    *(uint8x16_t *)((char *)v21 + v47) = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v58, v58, 8uLL), 8uLL), vrsraq_n_u16(v59, v59, 8uLL), 8uLL);
    v22 = (unsigned __int32 *)((char *)v22 + v25);
    v18 -= 4;
    if (v18 < 4)
      break;
    v28 = *v22;
    v47 += v26;
    if (*v22 - 1 >= 0xFFFFFFFE)
    {
      v19 = (unsigned __int32 *)((char *)v19 + v47);
      v21 = (_DWORD *)((char *)v21 + v47);
      goto LABEL_34;
    }
  }
  v19 = (unsigned __int32 *)((char *)v19 + v26 + v47);
  v21 = (_DWORD *)((char *)v21 + v26 + v47);
LABEL_37:
  v60 = v18 + a17;
  if (v60)
  {
    if (a7)
      v61 = 0;
    else
      v61 = -1;
    *(int8x8_t *)a8.i8 = vand_s8(vdup_n_s8(v61), (int8x8_t)0xFF000000FF000000);
    v62 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a11.i32[0] = *v19;
      v63 = vmovl_u8(*(uint8x8_t *)a11.i8);
      LOBYTE(v64) = v63.i8[0];
      BYTE1(v64) = v63.i8[2];
      BYTE2(v64) = v63.i8[4];
      HIBYTE(v64) = v63.i8[6];
      v63.i32[0] = *v21;
      v63.i64[0] = vmovl_u8(*(uint8x8_t *)v63.i8).u64[0];
      LOBYTE(v65) = v63.i8[0];
      BYTE1(v65) = v63.i8[2];
      BYTE2(v65) = v63.i8[4];
      HIBYTE(v65) = v63.i8[6];
      LOBYTE(v66) = *(_BYTE *)v22;
      BYTE1(v66) = *(_BYTE *)v22;
      BYTE2(v66) = *(_BYTE *)v22;
      HIBYTE(v66) = *(_BYTE *)v22;
      v67 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v64, *(int8x8_t *)a8.i8), (uint8x8_t)v66), v62);
      v68 = vminq_u16(vqaddq_u16(vmull_u8((uint8x8_t)v65, (uint8x8_t)vmvn_s8((int8x8_t)v66)), vmull_u8(vqrshrn_n_u16(vrsraq_n_u16(v67, v67, 8uLL), 8uLL), (uint8x8_t)vqtbl1_s8(vdupq_lane_s8(*(int8x8_t *)v63.i8, 6), (int8x8_t)-4244438269))), v62);
      a11 = vrsraq_n_u16(v68, v68, 8uLL);
      *(uint8x8_t *)a11.i8 = vqrshrn_n_u16(a11, 8uLL);
      *(int8x8_t *)a11.i8 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a11, a8));
      *v21 = a11.i32[0];
      v69 = &v19[a6];
      v22 = (unsigned __int32 *)((char *)v22 + a6);
      if ((unint64_t)v69 >= v20)
        v70 = -(uint64_t)a5;
      else
        v70 = 0;
      v19 = &v69[v70];
      v21 += a6;
      --v60;
    }
    while (v60);
  }
  *result = v19;
  *a3 = v20;
  *a2 = v21;
  *a4 = v22;
  return result;
}

unsigned __int32 **vec::template_mark_pixelmask_row<(CGCompositeOperation)4,_rgba8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, unsigned __int32 **a4, int a5, int a6, int a7, int8x16_t a8, double a9, double a10, uint16x8_t a11, double a12, double a13, double a14, uint16x8_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  unint64_t v18;
  unsigned __int32 *v19;
  unint64_t v20;
  _DWORD *v21;
  unsigned __int32 *v22;
  unsigned int v23;
  int8x16_t v24;
  uint64_t v25;
  uint64_t v26;
  uint16x8_t v27;
  unsigned __int32 v28;
  int8x16_t *v29;
  int8x16_t *v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int64_t v33;
  int64_t v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  int8x16_t *v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  uint8x16_t v42;
  uint8x16_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint64_t v46;
  int8x16_t v47;
  int8x16_t v48;
  uint8x16_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint8x16_t v52;
  int8x16_t v53;
  uint16x8_t v54;
  uint16x8_t v55;
  uint16x8_t v56;
  uint16x8_t v57;
  uint16x8_t v58;
  uint64_t v59;
  unsigned int v60;
  uint16x8_t v61;
  uint16x8_t v62;
  unsigned int v63;
  uint16x8_t v64;
  unsigned int v65;
  uint16x8_t v66;
  int8x16_t v67;
  uint16x8_t v68;
  unsigned __int32 *v69;
  uint64_t v70;

  v18 = a18;
  v19 = *result;
  v20 = *a3;
  v21 = *a2;
  v22 = *a4;
  if (a18 < 4)
    goto LABEL_37;
  if (a7)
    v23 = 0;
  else
    v23 = -1;
  v24.i64[0] = 0xFF000000FF000000;
  v24.i64[1] = 0xFF000000FF000000;
  a8 = vandq_s8(vdupq_n_s8(v23), v24);
  v25 = 4 * a6;
  v26 = 16 * a6;
  v27 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a11.i64[0] = -1;
  a11.i64[1] = -1;
  while (1)
  {
    v28 = *v22;
    if (*v22 == -1)
    {
      v35 = (int8x16_t *)((char *)v22 + v18);
      v36 = (int8x16_t *)v22;
      do
        v37 = v36++;
      while (v36 <= v35 && (vminvq_u8((uint8x16_t)vceqq_s8(*v37, (int8x16_t)a11)) & 0x80) != 0);
      do
      {
        v38 = v37;
        v37 = (int8x16_t *)((char *)v37 + 4);
      }
      while (v37 <= v35 && v38->i32[0] == -1);
      if (v38 < v35)
      {
        while (v38->u8[0] == 255)
        {
          v38 = (int8x16_t *)((char *)v38 + 1);
          if (v38 >= v35)
          {
            v38 = (int8x16_t *)((char *)v22 + v18);
            break;
          }
        }
      }
      v39 = 0;
      v40 = (char *)v38 - (char *)v22;
      v41 = (char *)v38 - (char *)v22;
      do
      {
        v42 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v19 + v39), a8);
        v43 = (uint8x16_t)vqtbl1q_s8(*(int8x16_t *)((char *)v21 + v39), (int8x16_t)xmmword_185004A40);
        v44 = vminq_u16(vmull_u8(*(uint8x8_t *)v42.i8, *(uint8x8_t *)v43.i8), v27);
        v45 = vminq_u16(vmull_high_u8(v42, v43), v27);
        a15 = (uint16x8_t)vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v44, v44, 8uLL), 8uLL), vrsraq_n_u16(v45, v45, 8uLL), 8uLL);
        *(uint8x16_t *)((char *)v21 + v39) = vqsubq_u8(v42, (uint8x16_t)a15);
        v22 = (unsigned __int32 *)((char *)v22 + v25);
        v41 -= 4;
        v39 += v26;
      }
      while (v41 > 3);
      v21 = (_DWORD *)((char *)v21 + v39);
      v19 = (unsigned __int32 *)((char *)v19 + v39);
      v18 = v18 - v40 + v41;
      goto LABEL_34;
    }
    if (v28)
      break;
    v29 = (int8x16_t *)((char *)v22 + v18);
    v30 = (int8x16_t *)v22;
    do
      v31 = v30++;
    while (v30 <= v29 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v31)) & 0x80) != 0);
    do
    {
      v32 = v31;
      v31 = (int8x16_t *)((char *)v31 + 4);
    }
    while (v31 <= v29 && !v32->i32[0]);
    if (v32 < v29)
    {
      while (!v32->i8[0])
      {
        v32 = (int8x16_t *)((char *)v32 + 1);
        if (v32 >= v29)
        {
          v32 = (int8x16_t *)((char *)v22 + v18);
          break;
        }
      }
    }
    v33 = (char *)v32 - (char *)v22;
    v34 = ((char *)v32 - (char *)v22) * a6;
    v19 += v34;
    v21 += v34;
    v22 = (unsigned __int32 *)((char *)v22 + v34);
    v18 -= v33;
LABEL_34:
    if (v18 <= 3)
      goto LABEL_37;
  }
  v46 = 0;
  while (1)
  {
    v47 = *(int8x16_t *)((char *)v21 + v46);
    a15.i32[0] = v28;
    v48 = vqtbl1q_s8((int8x16_t)a15, (int8x16_t)xmmword_185004A30);
    v49 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v19 + v46), a8);
    v50 = vminq_u16(vmull_u8(*(uint8x8_t *)v49.i8, *(uint8x8_t *)v48.i8), v27);
    v51 = vminq_u16(vmull_high_u8(v49, (uint8x16_t)v48), v27);
    v52 = (uint8x16_t)vmvnq_s8(v48);
    v53 = vqtbl1q_s8(vmvnq_s8(v47), (int8x16_t)xmmword_185004A40);
    v54 = vmull_u8(*(uint8x8_t *)v47.i8, *(uint8x8_t *)v52.i8);
    v55 = vmull_high_u8((uint8x16_t)v47, v52);
    a15 = vqaddq_u16(v54, vmull_u8(vqrshrn_n_u16(vrsraq_n_u16(v50, v50, 8uLL), 8uLL), *(uint8x8_t *)v53.i8));
    v56 = vqaddq_u16(v55, vmull_u8(vqrshrn_n_u16(vrsraq_n_u16(v51, v51, 8uLL), 8uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL)));
    v57 = vminq_u16(a15, v27);
    v58 = vminq_u16(v56, v27);
    *(uint8x16_t *)((char *)v21 + v46) = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v57, v57, 8uLL), 8uLL), vrsraq_n_u16(v58, v58, 8uLL), 8uLL);
    v22 = (unsigned __int32 *)((char *)v22 + v25);
    v18 -= 4;
    if (v18 < 4)
      break;
    v28 = *v22;
    v46 += v26;
    if (*v22 - 1 >= 0xFFFFFFFE)
    {
      v19 = (unsigned __int32 *)((char *)v19 + v46);
      v21 = (_DWORD *)((char *)v21 + v46);
      goto LABEL_34;
    }
  }
  v19 = (unsigned __int32 *)((char *)v19 + v26 + v46);
  v21 = (_DWORD *)((char *)v21 + v26 + v46);
LABEL_37:
  v59 = v18 + a17;
  if (v59)
  {
    if (a7)
      v60 = 0;
    else
      v60 = -1;
    *(int8x8_t *)a8.i8 = vand_s8(vdup_n_s8(v60), (int8x8_t)0xFF000000FF000000);
    v61 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a11.i32[0] = *v19;
      v62 = vmovl_u8(*(uint8x8_t *)a11.i8);
      LOBYTE(v63) = v62.i8[0];
      BYTE1(v63) = v62.i8[2];
      BYTE2(v63) = v62.i8[4];
      HIBYTE(v63) = v62.i8[6];
      v62.i32[0] = *v21;
      v64 = vmovl_u8(*(uint8x8_t *)v62.i8);
      LOBYTE(v65) = v64.i8[0];
      BYTE1(v65) = v64.i8[2];
      BYTE2(v65) = v64.i8[4];
      HIBYTE(v65) = v64.i8[6];
      v64.i8[0] = *(_BYTE *)v22;
      v64.i8[1] = *(_BYTE *)v22;
      v64.i8[2] = *(_BYTE *)v22;
      v64.i8[3] = *(_BYTE *)v22;
      v66 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v63, *(int8x8_t *)a8.i8), (uint8x8_t)v64.u32[0]), v61);
      *(int8x8_t *)v67.i8 = vmvn_s8((int8x8_t)v65);
      v67.i64[1] = v67.i64[0];
      v68 = vminq_u16(vqaddq_u16(vmull_u8((uint8x8_t)v65, (uint8x8_t)vmvn_s8((int8x8_t)v64.u32[0])), vmull_u8(vqrshrn_n_u16(vrsraq_n_u16(v66, v66, 8uLL), 8uLL), (uint8x8_t)vqtbl1_s8(v67, (int8x8_t)0x707070703030303))), v61);
      a11 = vrsraq_n_u16(v68, v68, 8uLL);
      *(uint8x8_t *)a11.i8 = vqrshrn_n_u16(a11, 8uLL);
      *(int8x8_t *)a11.i8 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a11, a8));
      *v21 = a11.i32[0];
      v69 = &v19[a6];
      v22 = (unsigned __int32 *)((char *)v22 + a6);
      if ((unint64_t)v69 >= v20)
        v70 = -(uint64_t)a5;
      else
        v70 = 0;
      v19 = &v69[v70];
      v21 += a6;
      --v59;
    }
    while (v59);
  }
  *result = v19;
  *a3 = v20;
  *a2 = v21;
  *a4 = v22;
  return result;
}

_DWORD **vec::template_mark_pixelmask_row<(CGCompositeOperation)5,_rgba8_t>(_DWORD **result, _DWORD **a2, unint64_t *a3, unsigned __int32 **a4, int a5, int a6, double a7, double a8, double a9, uint8x8_t a10, double a11, double a12, double a13, uint16x8_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  uint8x16_t v18;
  unint64_t v19;
  _DWORD *v20;
  unint64_t v21;
  _DWORD *v22;
  unsigned __int32 *v23;
  uint64_t v24;
  uint64_t v25;
  uint16x8_t v26;
  int8x16_t v27;
  unsigned __int32 v28;
  int8x16_t *v29;
  int8x16_t *v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int64_t v33;
  int64_t v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  int8x16_t *v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  int8x16_t v42;
  int8x16_t v43;
  uint8x16_t v44;
  uint8x16_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint64_t v50;
  uint8x16_t v51;
  int8x16_t v52;
  uint8x16_t v53;
  uint16x8_t v54;
  uint16x8_t v55;
  uint16x8_t v56;
  uint16x8_t v57;
  uint8x16_t v58;
  int8x16_t v59;
  uint16x8_t v60;
  uint16x8_t v61;
  uint8x16_t v62;
  uint16x8_t v63;
  uint16x8_t v64;
  uint64_t v65;
  int8x16_t v66;
  uint16x8_t v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  uint16x8_t v71;
  uint16x8_t v72;
  uint8x8_t v73;
  uint16x8_t v74;
  uint16x8_t v75;
  int8x16_t v76;
  _DWORD *v77;
  uint64_t v78;

  v19 = a18;
  v20 = *result;
  v21 = *a3;
  v22 = *a2;
  v23 = *a4;
  if (a18 < 4)
    goto LABEL_34;
  v24 = 4 * a6;
  v25 = 16 * a6;
  v26 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  v27.i64[0] = -1;
  v27.i64[1] = -1;
  a10.i32[1] = 16843009;
  while (1)
  {
    v28 = *v23;
    if (*v23 == -1)
    {
      v35 = (int8x16_t *)((char *)v23 + v19);
      v36 = (int8x16_t *)v23;
      do
        v37 = v36++;
      while (v36 <= v35 && (vminvq_u8((uint8x16_t)vceqq_s8(*v37, v27)) & 0x80) != 0);
      do
      {
        v38 = v37;
        v37 = (int8x16_t *)((char *)v37 + 4);
      }
      while (v37 <= v35 && v38->i32[0] == -1);
      if (v38 < v35)
      {
        while (v38->u8[0] == 255)
        {
          v38 = (int8x16_t *)((char *)v38 + 1);
          if (v38 >= v35)
          {
            v38 = (int8x16_t *)((char *)v23 + v19);
            break;
          }
        }
      }
      v39 = 0;
      v40 = (char *)v38 - (char *)v23;
      v41 = (char *)v38 - (char *)v23;
      do
      {
        v42 = *(int8x16_t *)((char *)v20 + v39);
        v43 = *(int8x16_t *)((char *)v22 + v39);
        v44 = (uint8x16_t)vqtbl1q_s8(v42, (int8x16_t)xmmword_185004A40);
        v45 = (uint8x16_t)vqtbl1q_s8(v43, (int8x16_t)xmmword_185004A40);
        v46 = vminq_u16(vmull_u8(*(uint8x8_t *)v43.i8, *(uint8x8_t *)v44.i8), v26);
        v47 = vminq_u16(vmull_high_u8((uint8x16_t)v43, v44), v26);
        v18 = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v46, v46, 8uLL), 8uLL), vrsraq_n_u16(v47, v47, 8uLL), 8uLL);
        v48 = vminq_u16(vmull_u8(*(uint8x8_t *)v45.i8, *(uint8x8_t *)v42.i8), v26);
        v49 = vminq_u16(vmull_high_u8(v45, (uint8x16_t)v42), v26);
        a14 = (uint16x8_t)vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v48, v48, 8uLL), 8uLL), vrsraq_n_u16(v49, v49, 8uLL), 8uLL);
        *(uint8x16_t *)((char *)v22 + v39) = vqaddq_u8(vqsubq_u8((uint8x16_t)v43, v18), (uint8x16_t)a14);
        v23 = (unsigned __int32 *)((char *)v23 + v24);
        v41 -= 4;
        v39 += v25;
      }
      while (v41 > 3);
      v22 = (_DWORD *)((char *)v22 + v39);
      v20 = (_DWORD *)((char *)v20 + v39);
      v19 = v19 - v40 + v41;
      goto LABEL_31;
    }
    if (v28)
      break;
    v29 = (int8x16_t *)((char *)v23 + v19);
    v30 = (int8x16_t *)v23;
    do
      v31 = v30++;
    while (v30 <= v29 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v31)) & 0x80) != 0);
    do
    {
      v32 = v31;
      v31 = (int8x16_t *)((char *)v31 + 4);
    }
    while (v31 <= v29 && !v32->i32[0]);
    if (v32 < v29)
    {
      while (!v32->i8[0])
      {
        v32 = (int8x16_t *)((char *)v32 + 1);
        if (v32 >= v29)
        {
          v32 = (int8x16_t *)((char *)v23 + v19);
          break;
        }
      }
    }
    v33 = (char *)v32 - (char *)v23;
    v34 = ((char *)v32 - (char *)v23) * a6;
    v20 += v34;
    v22 += v34;
    v23 = (unsigned __int32 *)((char *)v23 + v34);
    v19 -= v33;
LABEL_31:
    if (v19 <= 3)
      goto LABEL_34;
  }
  v50 = 0;
  while (1)
  {
    v51 = *(uint8x16_t *)((char *)v20 + v50);
    v52 = *(int8x16_t *)((char *)v22 + v50);
    a14.i32[0] = v28;
    v53 = (uint8x16_t)vqtbl1q_s8((int8x16_t)a14, (int8x16_t)xmmword_185004A30);
    v54 = vmull_u8(*(uint8x8_t *)v51.i8, *(uint8x8_t *)v53.i8);
    v55 = vmull_high_u8(v51, v53);
    v56 = vminq_u16(v54, v26);
    v57 = vminq_u16(v55, v26);
    *(uint8x8_t *)v54.i8 = vqrshrn_n_u16(vrsraq_n_u16(v56, v56, 8uLL), 8uLL);
    *(uint8x8_t *)v18.i8 = vqrshrn_n_u16(vrsraq_n_u16(v57, v57, 8uLL), 8uLL);
    v58 = (uint8x16_t)vqtbl2q_s8(*(int8x16x2_t *)(&v18 - 1), (int8x16_t)xmmword_185004A50);
    v59 = vqtbl1q_s8(v52, (int8x16_t)xmmword_185004A40);
    v60 = vminq_u16(vmull_u8(*(uint8x8_t *)v52.i8, *(uint8x8_t *)v58.i8), v26);
    v61 = vminq_u16(vmull_high_u8((uint8x16_t)v52, v58), v26);
    v62 = vqsubq_u8((uint8x16_t)v52, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v60, v60, 8uLL), 8uLL), vrsraq_n_u16(v61, v61, 8uLL), 8uLL));
    v63 = vminq_u16(vmull_u8(*(uint8x8_t *)v59.i8, *(uint8x8_t *)v54.i8), v26);
    v64 = vminq_u16(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL), *(uint8x8_t *)v18.i8), v26);
    a14 = vrsraq_n_u16(v64, v64, 8uLL);
    *(uint8x16_t *)((char *)v22 + v50) = vqaddq_u8(v62, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v63, v63, 8uLL), 8uLL), a14, 8uLL));
    v23 = (unsigned __int32 *)((char *)v23 + v24);
    v19 -= 4;
    if (v19 < 4)
      break;
    v28 = *v23;
    v50 += v25;
    if (*v23 - 1 >= 0xFFFFFFFE)
    {
      v20 = (_DWORD *)((char *)v20 + v50);
      v22 = (_DWORD *)((char *)v22 + v50);
      goto LABEL_31;
    }
  }
  v20 = (_DWORD *)((char *)v20 + v25 + v50);
  v22 = (_DWORD *)((char *)v22 + v25 + v50);
LABEL_34:
  v65 = v19 + a17;
  if (v65)
  {
    v66 = (int8x16_t)vdupq_n_s16(0xFE01u);
    do
    {
      a10.i32[0] = *v20;
      v67 = vmovl_u8(a10);
      LOBYTE(v68) = v67.i8[0];
      BYTE1(v68) = v67.i8[2];
      BYTE2(v68) = v67.i8[4];
      HIBYTE(v68) = v67.i8[6];
      v67.i32[0] = *v22;
      v67.i64[0] = vmovl_u8(*(uint8x8_t *)v67.i8).u64[0];
      LOBYTE(v69) = v67.i8[0];
      BYTE1(v69) = v67.i8[2];
      BYTE2(v69) = v67.i8[4];
      HIBYTE(v69) = v67.i8[6];
      LOBYTE(v70) = *(_BYTE *)v23;
      BYTE1(v70) = *(_BYTE *)v23;
      BYTE2(v70) = *(_BYTE *)v23;
      HIBYTE(v70) = *(_BYTE *)v23;
      v71 = vminq_u16(vmull_u8((uint8x8_t)v68, (uint8x8_t)v70), (uint16x8_t)v66);
      v72 = vrsraq_n_u16(v71, v71, 8uLL);
      v73 = vqrshrn_n_u16(v72, 8uLL);
      v74 = vminq_u16(vmull_u8((uint8x8_t)v69, (uint8x8_t)vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16(v73, v72, 8uLL), (int8x8_t)0x707070703030303)), (uint16x8_t)v66);
      v75 = vminq_u16(vmull_u8((uint8x8_t)vqtbl1_s8(vdupq_lane_s8(*(int8x8_t *)v67.i8, 6), (int8x8_t)-4244438269), v73), (uint16x8_t)v66);
      v76 = (int8x16_t)vrsraq_n_u16(v75, v75, 8uLL);
      *(uint8x8_t *)v76.i8 = vqadd_u8(vqsub_u8((uint8x8_t)v69, vqrshrn_n_u16(vrsraq_n_u16(v74, v74, 8uLL), 8uLL)), vqrshrn_n_u16((uint16x8_t)v76, 8uLL));
      a10 = (uint8x8_t)vmovn_s16((int16x8_t)vzip1q_s8(v76, v66));
      *v22 = a10.i32[0];
      v77 = &v20[a6];
      v23 = (unsigned __int32 *)((char *)v23 + a6);
      if ((unint64_t)v77 >= v21)
        v78 = -(uint64_t)a5;
      else
        v78 = 0;
      v20 = &v77[v78];
      v22 += a6;
      --v65;
    }
    while (v65);
  }
  *result = v20;
  *a3 = v21;
  *a2 = v22;
  *a4 = v23;
  return result;
}

unsigned __int32 **vec::template_mark_pixelmask_row<(CGCompositeOperation)6,_rgba8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, unsigned __int32 **a4, int a5, int a6, int a7, int8x16_t a8, double a9, double a10, uint16x8_t a11, double a12, double a13, double a14, int8x16_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  unint64_t v18;
  unsigned __int32 *v19;
  unint64_t v20;
  _DWORD *v21;
  unsigned __int32 *v22;
  unsigned int v23;
  int8x16_t v24;
  uint64_t v25;
  uint64_t v26;
  uint16x8_t v27;
  unsigned __int32 v28;
  int8x16_t *v29;
  int8x16_t *v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int64_t v33;
  int64_t v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  int8x16_t *v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  int8x16_t v42;
  uint8x16_t v43;
  int8x16_t v44;
  uint8x16_t v45;
  uint8x16_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint64_t v51;
  int8x16_t v52;
  int8x16_t v53;
  uint8x16_t v54;
  uint16x8_t v55;
  uint16x8_t v56;
  int8x16_t v57;
  uint8x16_t v58;
  int8x16_t v59;
  uint16x8_t v60;
  uint16x8_t v61;
  uint64_t v62;
  unsigned int v63;
  uint16x8_t v64;
  uint16x8_t v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint16x8_t v69;
  uint8x8_t v70;
  uint16x8_t v71;
  unsigned __int32 *v72;
  uint64_t v73;

  v18 = a18;
  v19 = *result;
  v20 = *a3;
  v21 = *a2;
  v22 = *a4;
  if (a18 < 4)
    goto LABEL_37;
  if (a7)
    v23 = 0;
  else
    v23 = -1;
  v24.i64[0] = 0xFF000000FF000000;
  v24.i64[1] = 0xFF000000FF000000;
  a8 = vandq_s8(vdupq_n_s8(v23), v24);
  v25 = 4 * a6;
  v26 = 16 * a6;
  v27 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a11.i64[0] = -1;
  a11.i64[1] = -1;
  while (1)
  {
    v28 = *v22;
    if (*v22 == -1)
    {
      v35 = (int8x16_t *)((char *)v22 + v18);
      v36 = (int8x16_t *)v22;
      do
        v37 = v36++;
      while (v36 <= v35 && (vminvq_u8((uint8x16_t)vceqq_s8(*v37, (int8x16_t)a11)) & 0x80) != 0);
      do
      {
        v38 = v37;
        v37 = (int8x16_t *)((char *)v37 + 4);
      }
      while (v37 <= v35 && v38->i32[0] == -1);
      if (v38 < v35)
      {
        while (v38->u8[0] == 255)
        {
          v38 = (int8x16_t *)((char *)v38 + 1);
          if (v38 >= v35)
          {
            v38 = (int8x16_t *)((char *)v22 + v18);
            break;
          }
        }
      }
      v39 = 0;
      v40 = (char *)v38 - (char *)v22;
      v41 = (char *)v38 - (char *)v22;
      do
      {
        v42 = *(int8x16_t *)((char *)v21 + v39);
        v43 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v19 + v39), a8);
        v44 = vqtbl1q_s8(v42, (int8x16_t)xmmword_185004A40);
        v45 = (uint8x16_t)vbicq_s8(v42, vceqzq_s8(v44));
        v46 = (uint8x16_t)vmvnq_s8(v44);
        v47 = vmull_u8(*(uint8x8_t *)v43.i8, *(uint8x8_t *)v46.i8);
        v48 = vmull_high_u8(v43, v46);
        v49 = vminq_u16(v47, v27);
        v50 = vminq_u16(v48, v27);
        a15 = (int8x16_t)vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v49, v49, 8uLL), 8uLL), vrsraq_n_u16(v50, v50, 8uLL), 8uLL);
        *(uint8x16_t *)((char *)v21 + v39) = vqaddq_u8(v45, (uint8x16_t)a15);
        v22 = (unsigned __int32 *)((char *)v22 + v25);
        v41 -= 4;
        v39 += v26;
      }
      while (v41 > 3);
      v21 = (_DWORD *)((char *)v21 + v39);
      v19 = (unsigned __int32 *)((char *)v19 + v39);
      v18 = v18 - v40 + v41;
      goto LABEL_34;
    }
    if (v28)
      break;
    v29 = (int8x16_t *)((char *)v22 + v18);
    v30 = (int8x16_t *)v22;
    do
      v31 = v30++;
    while (v30 <= v29 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v31)) & 0x80) != 0);
    do
    {
      v32 = v31;
      v31 = (int8x16_t *)((char *)v31 + 4);
    }
    while (v31 <= v29 && !v32->i32[0]);
    if (v32 < v29)
    {
      while (!v32->i8[0])
      {
        v32 = (int8x16_t *)((char *)v32 + 1);
        if (v32 >= v29)
        {
          v32 = (int8x16_t *)((char *)v22 + v18);
          break;
        }
      }
    }
    v33 = (char *)v32 - (char *)v22;
    v34 = ((char *)v32 - (char *)v22) * a6;
    v19 += v34;
    v21 += v34;
    v22 = (unsigned __int32 *)((char *)v22 + v34);
    v18 -= v33;
LABEL_34:
    if (v18 <= 3)
      goto LABEL_37;
  }
  v51 = 0;
  while (1)
  {
    v52 = *(int8x16_t *)((char *)v21 + v51);
    a15.i32[0] = v28;
    v53 = vqtbl1q_s8(a15, (int8x16_t)xmmword_185004A30);
    v54 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v19 + v51), a8);
    v55 = vminq_u16(vmull_u8(*(uint8x8_t *)v54.i8, *(uint8x8_t *)v53.i8), v27);
    v56 = vminq_u16(vmull_high_u8(v54, (uint8x16_t)v53), v27);
    v57 = vqtbl1q_s8(v52, (int8x16_t)xmmword_185004A40);
    v58 = (uint8x16_t)vbicq_s8(v52, vceqzq_s8(v57));
    v59 = vmvnq_s8(v57);
    v60 = vminq_u16(vmull_u8(vqrshrn_n_u16(vrsraq_n_u16(v55, v55, 8uLL), 8uLL), *(uint8x8_t *)v59.i8), v27);
    v61 = vminq_u16(vmull_u8(vqrshrn_n_u16(vrsraq_n_u16(v56, v56, 8uLL), 8uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL)), v27);
    a15 = vceqzq_s8(v53);
    *(int8x16_t *)((char *)v21 + v51) = vbslq_s8(a15, v52, (int8x16_t)vqaddq_u8(v58, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v60, v60, 8uLL), 8uLL), vrsraq_n_u16(v61, v61, 8uLL), 8uLL)));
    v22 = (unsigned __int32 *)((char *)v22 + v25);
    v18 -= 4;
    if (v18 < 4)
      break;
    v28 = *v22;
    v51 += v26;
    if (*v22 - 1 >= 0xFFFFFFFE)
    {
      v19 = (unsigned __int32 *)((char *)v19 + v51);
      v21 = (_DWORD *)((char *)v21 + v51);
      goto LABEL_34;
    }
  }
  v19 = (unsigned __int32 *)((char *)v19 + v26 + v51);
  v21 = (_DWORD *)((char *)v21 + v26 + v51);
LABEL_37:
  v62 = v18 + a17;
  if (v62)
  {
    if (a7)
      v63 = 0;
    else
      v63 = -1;
    *(int8x8_t *)a8.i8 = vand_s8(vdup_n_s8(v63), (int8x8_t)0xFF000000FF000000);
    v64 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a11.i32[0] = *v19;
      v65 = vmovl_u8(*(uint8x8_t *)a11.i8);
      LOBYTE(v66) = v65.i8[0];
      BYTE1(v66) = v65.i8[2];
      BYTE2(v66) = v65.i8[4];
      HIBYTE(v66) = v65.i8[6];
      v65.i32[0] = *v21;
      v65.i64[0] = vmovl_u8(*(uint8x8_t *)v65.i8).u64[0];
      LOBYTE(v67) = v65.i8[0];
      BYTE1(v67) = v65.i8[2];
      BYTE2(v67) = v65.i8[4];
      HIBYTE(v67) = v65.i8[6];
      LOBYTE(v68) = *(_BYTE *)v22;
      BYTE1(v68) = *(_BYTE *)v22;
      BYTE2(v68) = *(_BYTE *)v22;
      HIBYTE(v68) = *(_BYTE *)v22;
      v69 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v66, *(int8x8_t *)a8.i8), (uint8x8_t)v68), v64);
      *(int8x8_t *)v65.i8 = vqtbl1_s8(vdupq_lane_s8(*(int8x8_t *)v65.i8, 6), (int8x8_t)-4244438269);
      v70 = (uint8x8_t)vbic_s8((int8x8_t)v67, vceqz_s8(*(int8x8_t *)v65.i8));
      v71 = vminq_u16(vmull_u8(vqrshrn_n_u16(vrsraq_n_u16(v69, v69, 8uLL), 8uLL), (uint8x8_t)vmvn_s8(*(int8x8_t *)v65.i8)), v64);
      a11 = vrsraq_n_u16(v71, v71, 8uLL);
      *(int8x8_t *)a11.i8 = vbsl_s8(vceqz_s8((int8x8_t)v68), (int8x8_t)v67, (int8x8_t)vqadd_u8(v70, vqrshrn_n_u16(a11, 8uLL)));
      *(int8x8_t *)a11.i8 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a11, a8));
      *v21 = a11.i32[0];
      v72 = &v19[a6];
      v22 = (unsigned __int32 *)((char *)v22 + a6);
      if ((unint64_t)v72 >= v20)
        v73 = -(uint64_t)a5;
      else
        v73 = 0;
      v19 = &v72[v73];
      v21 += a6;
      --v62;
    }
    while (v62);
  }
  *result = v19;
  *a3 = v20;
  *a2 = v21;
  *a4 = v22;
  return result;
}

unsigned __int32 **vec::template_mark_pixelmask_row<(CGCompositeOperation)7,_rgba8_t>(unsigned __int32 **result, unsigned __int32 **a2, unint64_t *a3, unsigned __int32 **a4, int a5, int a6, int8x16_t a7, double a8, uint16x8_t a9, double a10, __n128 a11, double a12, uint16x8_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17)
{
  unint64_t v17;
  unsigned __int32 *v18;
  unint64_t v19;
  unsigned __int32 *v20;
  unsigned __int32 *v21;
  uint64_t v22;
  uint64_t v23;
  uint16x8_t v24;
  unsigned __int32 v25;
  int8x16_t *v26;
  int8x16_t *v27;
  int8x16_t *v28;
  int8x16_t *v29;
  int64_t v30;
  int64_t v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  int8x16_t *v35;
  uint64_t v36;
  int64_t v37;
  unint64_t v38;
  uint8x16_t v39;
  uint8x16_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  uint64_t v44;
  uint8x16_t v45;
  uint8x16_t v46;
  uint8x16_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint8x16_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  uint64_t v53;
  uint16x8_t v54;
  uint16x8_t v55;
  unsigned int v56;
  uint16x8_t v57;
  unsigned __int32 *v58;
  uint64_t v59;

  v17 = a17;
  v18 = *result;
  v19 = *a3;
  v20 = *a2;
  v21 = *a4;
  if (a17 < 4)
    goto LABEL_34;
  v22 = 4 * a6;
  v23 = 16 * a6;
  a7.i64[1] = 0xF0F0F0F0B0B0B0BLL;
  v24 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a9.i64[0] = -1;
  a9.i64[1] = -1;
  while (1)
  {
    v25 = *v21;
    if (*v21 == -1)
    {
      v32 = (int8x16_t *)((char *)v21 + v17);
      v33 = (int8x16_t *)v21;
      do
        v34 = v33++;
      while (v33 <= v32 && (vminvq_u8((uint8x16_t)vceqq_s8(*v34, (int8x16_t)a9)) & 0x80) != 0);
      do
      {
        v35 = v34;
        v34 = (int8x16_t *)((char *)v34 + 4);
      }
      while (v34 <= v32 && v35->i32[0] == -1);
      if (v35 < v32)
      {
        while (v35->u8[0] == 255)
        {
          v35 = (int8x16_t *)((char *)v35 + 1);
          if (v35 >= v32)
          {
            v35 = (int8x16_t *)((char *)v21 + v17);
            break;
          }
        }
      }
      v36 = 0;
      v37 = (char *)v35 - (char *)v21;
      v38 = (char *)v35 - (char *)v21;
      do
      {
        v39 = *(uint8x16_t *)((char *)v20 + v36);
        v40 = (uint8x16_t)vqtbl1q_s8(*(int8x16_t *)((char *)v18 + v36), (int8x16_t)xmmword_185004A40);
        a13 = vmull_u8(*(uint8x8_t *)v39.i8, *(uint8x8_t *)v40.i8);
        v41 = vmull_high_u8(v39, v40);
        v42 = vminq_u16(a13, v24);
        v43 = vminq_u16(v41, v24);
        a11 = (__n128)vrsraq_n_u16(v43, v43, 8uLL);
        *(uint8x16_t *)((char *)v20 + v36) = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v42, v42, 8uLL), 8uLL), (uint16x8_t)a11, 8uLL);
        v21 = (unsigned __int32 *)((char *)v21 + v22);
        v38 -= 4;
        v36 += v23;
      }
      while (v38 > 3);
      v20 = (unsigned __int32 *)((char *)v20 + v36);
      v18 = (unsigned __int32 *)((char *)v18 + v36);
      v17 = v17 - v37 + v38;
      goto LABEL_31;
    }
    if (v25)
      break;
    v26 = (int8x16_t *)((char *)v21 + v17);
    v27 = (int8x16_t *)v21;
    do
    {
      v28 = v27++;
      if (v27 > v26)
        break;
      a11 = (__n128)vceqzq_s8(*v28);
    }
    while ((vminvq_u8((uint8x16_t)a11) & 0x80) != 0);
    do
    {
      v29 = v28;
      v28 = (int8x16_t *)((char *)v28 + 4);
    }
    while (v28 <= v26 && !v29->i32[0]);
    if (v29 < v26)
    {
      while (!v29->i8[0])
      {
        v29 = (int8x16_t *)((char *)v29 + 1);
        if (v29 >= v26)
        {
          v29 = (int8x16_t *)((char *)v21 + v17);
          break;
        }
      }
    }
    v30 = (char *)v29 - (char *)v21;
    v31 = ((char *)v29 - (char *)v21) * a6;
    v18 += v31;
    v20 += v31;
    v21 = (unsigned __int32 *)((char *)v21 + v31);
    v17 -= v30;
LABEL_31:
    if (v17 <= 3)
      goto LABEL_34;
  }
  v44 = 0;
  while (1)
  {
    v45 = *(uint8x16_t *)((char *)v20 + v44);
    a13.i32[0] = v25;
    v46 = (uint8x16_t)vqtbl1q_s8((int8x16_t)a13, (int8x16_t)xmmword_185004A30);
    v47 = (uint8x16_t)vqtbl1q_s8(*(int8x16_t *)((char *)v18 + v44), (int8x16_t)xmmword_185004A40);
    v48 = vminq_u16(vmull_u8(*(uint8x8_t *)v46.i8, *(uint8x8_t *)v47.i8), v24);
    v49 = vminq_u16(vmull_high_u8(v46, v47), v24);
    v50 = vqsubq_u8(v46, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v48, v48, 8uLL), 8uLL), vrsraq_n_u16(v49, v49, 8uLL), 8uLL));
    v51 = vminq_u16(vmull_u8(*(uint8x8_t *)v45.i8, *(uint8x8_t *)v50.i8), v24);
    v52 = vminq_u16(vmull_high_u8(v45, v50), v24);
    a13 = (uint16x8_t)vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v51, v51, 8uLL), 8uLL), vrsraq_n_u16(v52, v52, 8uLL), 8uLL);
    a11 = (__n128)vqsubq_u8(v45, (uint8x16_t)a13);
    *(__n128 *)((char *)v20 + v44) = a11;
    v21 = (unsigned __int32 *)((char *)v21 + v22);
    v17 -= 4;
    if (v17 < 4)
      break;
    v25 = *v21;
    v44 += v23;
    if (*v21 - 1 >= 0xFFFFFFFE)
    {
      v18 = (unsigned __int32 *)((char *)v18 + v44);
      v20 = (unsigned __int32 *)((char *)v20 + v44);
      goto LABEL_31;
    }
  }
  v18 = (unsigned __int32 *)((char *)v18 + v23 + v44);
  v20 = (unsigned __int32 *)((char *)v20 + v23 + v44);
LABEL_34:
  v53 = v17 + a16;
  if (v53)
  {
    a7.i64[0] = -4244438269;
    v54 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a9.i32[0] = *v20;
      v55 = vmovl_u8(*(uint8x8_t *)a9.i8);
      LOBYTE(v56) = v55.i8[0];
      BYTE1(v56) = v55.i8[2];
      BYTE2(v56) = v55.i8[4];
      HIBYTE(v56) = v55.i8[6];
      v55.i8[0] = *(_BYTE *)v21;
      v55.i8[1] = *(_BYTE *)v21;
      v55.i8[2] = *(_BYTE *)v21;
      v55.i8[3] = *(_BYTE *)v21;
      a11.n128_u32[0] = *v18;
      a11.n128_u64[1] = a11.n128_u64[0];
      a11 = (__n128)vminq_u16(vmull_u8((uint8x8_t)v55.u32[0], (uint8x8_t)vqtbl1_s8((int8x16_t)a11, (int8x8_t)-4244438269)), v54);
      a11.n128_u64[0] = (unint64_t)vqrshrn_n_u16(vrsraq_n_u16((uint16x8_t)a11, (uint16x8_t)a11, 8uLL), 8uLL);
      v57 = vminq_u16(vmull_u8((uint8x8_t)v56, vqsub_u8((uint8x8_t)v55.u32[0], (uint8x8_t)a11.n128_u64[0])), v54);
      a9 = vrsraq_n_u16(v57, v57, 8uLL);
      *(uint8x8_t *)a9.i8 = vqsub_u8((uint8x8_t)v56, vqrshrn_n_u16(a9, 8uLL));
      *(int8x8_t *)a9.i8 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a9, a7));
      *v20 = a9.i32[0];
      v58 = &v18[a6];
      v21 = (unsigned __int32 *)((char *)v21 + a6);
      if ((unint64_t)v58 >= v19)
        v59 = -(uint64_t)a5;
      else
        v59 = 0;
      v18 = &v58[v59];
      v20 += a6;
      --v53;
    }
    while (v53);
  }
  *result = v18;
  *a3 = v19;
  *a2 = v20;
  *a4 = v21;
  return result;
}

unsigned __int32 **vec::template_mark_pixelmask_row<(CGCompositeOperation)9,_rgba8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, unsigned __int32 **a4, int a5, int a6, double a7, double a8, uint16x8_t a9, double a10, double a11, double a12, double a13, uint16x8_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  uint16x8_t v18;
  unint64_t v19;
  unsigned __int32 *v20;
  unint64_t v21;
  _DWORD *v22;
  unsigned __int32 *v23;
  uint64_t v24;
  uint64_t v25;
  uint16x8_t v26;
  unsigned __int32 v27;
  int8x16_t *v28;
  int8x16_t *v29;
  int8x16_t *v30;
  int8x16_t *v31;
  int64_t v32;
  int64_t v33;
  int8x16_t *v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  int8x16_t v41;
  int8x16_t v42;
  uint8x16_t v43;
  uint8x16_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint64_t v51;
  uint8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  uint16x8_t v55;
  uint16x8_t v56;
  uint16x8_t v57;
  uint8x16_t v58;
  int8x16_t v59;
  uint16x8_t v60;
  uint16x8_t v61;
  uint8x16_t v62;
  uint16x8_t v63;
  uint16x8_t v64;
  uint16x8_t v65;
  uint16x8_t v66;
  uint64_t v67;
  int8x16_t v68;
  uint16x8_t v69;
  unsigned int v70;
  uint16x8_t v71;
  unsigned int v72;
  uint16x8_t v73;
  uint16x8_t v74;
  int8x16_t v75;
  uint8x8_t v76;
  uint16x8_t v77;
  unsigned __int32 *v78;
  uint64_t v79;

  v19 = a18;
  v20 = *result;
  v21 = *a3;
  v22 = *a2;
  v23 = *a4;
  if (a18 < 4)
    goto LABEL_34;
  v24 = 4 * a6;
  v25 = 16 * a6;
  v26 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a9.i64[0] = -1;
  a9.i64[1] = -1;
  while (1)
  {
    v27 = *v23;
    if (*v23 == -1)
    {
      v34 = (int8x16_t *)((char *)v23 + v19);
      v35 = (int8x16_t *)v23;
      do
        v36 = v35++;
      while (v35 <= v34 && (vminvq_u8((uint8x16_t)vceqq_s8(*v36, (int8x16_t)a9)) & 0x80) != 0);
      do
      {
        v37 = v36;
        v36 = (int8x16_t *)((char *)v36 + 4);
      }
      while (v36 <= v34 && v37->i32[0] == -1);
      if (v37 < v34)
      {
        while (v37->u8[0] == 255)
        {
          v37 = (int8x16_t *)((char *)v37 + 1);
          if (v37 >= v34)
          {
            v37 = (int8x16_t *)((char *)v23 + v19);
            break;
          }
        }
      }
      v38 = 0;
      v39 = (char *)v37 - (char *)v23;
      v40 = (char *)v37 - (char *)v23;
      do
      {
        v41 = *(int8x16_t *)((char *)v20 + v38);
        v42 = *(int8x16_t *)((char *)v22 + v38);
        v43 = (uint8x16_t)vqtbl1q_s8(v41, (int8x16_t)xmmword_185004A40);
        v44 = (uint8x16_t)vqtbl1q_s8(vmvnq_s8(v42), (int8x16_t)xmmword_185004A40);
        v18 = vmull_u8(*(uint8x8_t *)v41.i8, *(uint8x8_t *)v44.i8);
        v45 = vmull_high_u8((uint8x16_t)v41, v44);
        v46 = vmull_u8(*(uint8x8_t *)v42.i8, *(uint8x8_t *)v43.i8);
        v47 = vmull_high_u8((uint8x16_t)v42, v43);
        a14 = vqaddq_u16(v18, v46);
        v48 = vqaddq_u16(v45, v47);
        v49 = vminq_u16(a14, v26);
        v50 = vminq_u16(v48, v26);
        *(uint8x16_t *)((char *)v22 + v38) = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v49, v49, 8uLL), 8uLL), vrsraq_n_u16(v50, v50, 8uLL), 8uLL);
        v23 = (unsigned __int32 *)((char *)v23 + v24);
        v40 -= 4;
        v38 += v25;
      }
      while (v40 > 3);
      v22 = (_DWORD *)((char *)v22 + v38);
      v20 = (unsigned __int32 *)((char *)v20 + v38);
      v19 = v19 - v39 + v40;
      goto LABEL_31;
    }
    if (v27)
      break;
    v28 = (int8x16_t *)((char *)v23 + v19);
    v29 = (int8x16_t *)v23;
    do
      v30 = v29++;
    while (v29 <= v28 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v30)) & 0x80) != 0);
    do
    {
      v31 = v30;
      v30 = (int8x16_t *)((char *)v30 + 4);
    }
    while (v30 <= v28 && !v31->i32[0]);
    if (v31 < v28)
    {
      while (!v31->i8[0])
      {
        v31 = (int8x16_t *)((char *)v31 + 1);
        if (v31 >= v28)
        {
          v31 = (int8x16_t *)((char *)v23 + v19);
          break;
        }
      }
    }
    v32 = (char *)v31 - (char *)v23;
    v33 = ((char *)v31 - (char *)v23) * a6;
    v20 += v33;
    v22 += v33;
    v23 = (unsigned __int32 *)((char *)v23 + v33);
    v19 -= v32;
LABEL_31:
    if (v19 <= 3)
      goto LABEL_34;
  }
  v51 = 0;
  while (1)
  {
    v52 = *(uint8x16_t *)((char *)v20 + v51);
    v53 = *(int8x16_t *)((char *)v22 + v51);
    a14.i32[0] = v27;
    v54 = vqtbl1q_s8((int8x16_t)a14, (int8x16_t)xmmword_185004A30);
    v55 = vminq_u16(vmull_u8(*(uint8x8_t *)v52.i8, *(uint8x8_t *)v54.i8), v26);
    v56 = vminq_u16(vmull_high_u8(v52, (uint8x16_t)v54), v26);
    v57 = vrsraq_n_u16(v55, v55, 8uLL);
    *(uint8x8_t *)v57.i8 = vqrshrn_n_u16(v57, 8uLL);
    *(uint8x8_t *)v18.i8 = vqrshrn_n_u16(vrsraq_n_u16(v56, v56, 8uLL), 8uLL);
    v58 = (uint8x16_t)vqtbl2q_s8(*(int8x16x2_t *)(&v18 - 1), (int8x16_t)xmmword_185004A50);
    v59 = vqtbl1q_s8(vmvnq_s8(v53), (int8x16_t)xmmword_185004A40);
    v60 = vmull_u8(*(uint8x8_t *)v57.i8, *(uint8x8_t *)v59.i8);
    v61 = vmull_u8(*(uint8x8_t *)v18.i8, (uint8x8_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL));
    v62 = (uint8x16_t)vmvnq_s8(v54);
    v18 = vqaddq_u16(v60, vmull_u8(*(uint8x8_t *)v53.i8, *(uint8x8_t *)v62.i8));
    a14 = vqaddq_u16(v61, vmull_high_u8((uint8x16_t)v53, v62));
    v63 = vmull_u8(*(uint8x8_t *)v53.i8, *(uint8x8_t *)v58.i8);
    v64 = vmull_high_u8((uint8x16_t)v53, v58);
    v65 = vminq_u16(vqaddq_u16(v18, v63), v26);
    v66 = vminq_u16(vqaddq_u16(a14, v64), v26);
    *(uint8x16_t *)((char *)v22 + v51) = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v65, v65, 8uLL), 8uLL), vrsraq_n_u16(v66, v66, 8uLL), 8uLL);
    v23 = (unsigned __int32 *)((char *)v23 + v24);
    v19 -= 4;
    if (v19 < 4)
      break;
    v27 = *v23;
    v51 += v25;
    if (*v23 - 1 >= 0xFFFFFFFE)
    {
      v20 = (unsigned __int32 *)((char *)v20 + v51);
      v22 = (_DWORD *)((char *)v22 + v51);
      goto LABEL_31;
    }
  }
  v20 = (unsigned __int32 *)((char *)v20 + v25 + v51);
  v22 = (_DWORD *)((char *)v22 + v25 + v51);
LABEL_34:
  v67 = v19 + a17;
  if (v67)
  {
    v68 = (int8x16_t)vdupq_n_s16(0xFE01u);
    do
    {
      a9.i32[0] = *v20;
      v69 = vmovl_u8(*(uint8x8_t *)a9.i8);
      LOBYTE(v70) = v69.i8[0];
      BYTE1(v70) = v69.i8[2];
      BYTE2(v70) = v69.i8[4];
      HIBYTE(v70) = v69.i8[6];
      v69.i32[0] = *v22;
      v71 = vmovl_u8(*(uint8x8_t *)v69.i8);
      LOBYTE(v72) = v71.i8[0];
      BYTE1(v72) = v71.i8[2];
      BYTE2(v72) = v71.i8[4];
      HIBYTE(v72) = v71.i8[6];
      v71.i8[0] = *(_BYTE *)v23;
      v71.i8[1] = *(_BYTE *)v23;
      v71.i8[2] = *(_BYTE *)v23;
      v71.i8[3] = *(_BYTE *)v23;
      v73 = vminq_u16(vmull_u8((uint8x8_t)v70, (uint8x8_t)v71.u32[0]), (uint16x8_t)v68);
      v74 = vrsraq_n_u16(v73, v73, 8uLL);
      *(int8x8_t *)v75.i8 = vmvn_s8((int8x8_t)v72);
      v75.i64[1] = v75.i64[0];
      v76 = vqrshrn_n_u16(v74, 8uLL);
      v77 = vminq_u16(vqaddq_u16(vqaddq_u16(vmull_u8(v76, (uint8x8_t)vqtbl1_s8(v75, (int8x8_t)0x707070703030303)), vmull_u8((uint8x8_t)v72, (uint8x8_t)vmvn_s8((int8x8_t)v71.u32[0]))), vmull_u8((uint8x8_t)v72, (uint8x8_t)vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16(v76, v74, 8uLL), (int8x8_t)0x707070703030303))), (uint16x8_t)v68);
      a9 = vrsraq_n_u16(v77, v77, 8uLL);
      *(uint8x8_t *)a9.i8 = vqrshrn_n_u16(a9, 8uLL);
      *(int8x8_t *)a9.i8 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a9, v68));
      *v22 = a9.i32[0];
      v78 = &v20[a6];
      v23 = (unsigned __int32 *)((char *)v23 + a6);
      if ((unint64_t)v78 >= v21)
        v79 = -(uint64_t)a5;
      else
        v79 = 0;
      v20 = &v78[v79];
      v22 += a6;
      --v67;
    }
    while (v67);
  }
  *result = v20;
  *a3 = v21;
  *a2 = v22;
  *a4 = v23;
  return result;
}

unsigned __int32 **vec::template_mark_pixelmask_row<(CGCompositeOperation)10,_rgba8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, unsigned __int32 **a4, int a5, int a6, double a7, double a8, uint16x8_t a9, double a10, double a11, double a12, double a13, uint16x8_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  uint16x8_t v18;
  unint64_t v19;
  unsigned __int32 *v20;
  unint64_t v21;
  _DWORD *v22;
  unsigned __int32 *v23;
  uint64_t v24;
  uint64_t v25;
  uint16x8_t v26;
  unsigned __int32 v27;
  int8x16_t *v28;
  int8x16_t *v29;
  int8x16_t *v30;
  int8x16_t *v31;
  int64_t v32;
  int64_t v33;
  int8x16_t *v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  int8x16_t v41;
  int8x16_t v42;
  uint8x16_t v43;
  uint8x16_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint64_t v49;
  uint8x16_t v50;
  int8x16_t v51;
  uint8x16_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  uint16x8_t v55;
  uint16x8_t v56;
  int8x16_t v57;
  uint8x16_t v58;
  uint16x8_t v59;
  uint16x8_t v60;
  uint16x8_t v61;
  uint16x8_t v62;
  uint16x8_t v63;
  uint64_t v64;
  int8x16_t v65;
  uint16x8_t v66;
  unsigned int v67;
  uint16x8_t v68;
  unsigned int v69;
  uint16x8_t v70;
  int8x16_t v71;
  int8x16_t v72;
  uint16x8_t v73;
  unsigned __int32 *v74;
  uint64_t v75;

  v19 = a18;
  v20 = *result;
  v21 = *a3;
  v22 = *a2;
  v23 = *a4;
  if (a18 < 4)
    goto LABEL_34;
  v24 = 4 * a6;
  v25 = 16 * a6;
  v26 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a9.i64[0] = -1;
  a9.i64[1] = -1;
  while (1)
  {
    v27 = *v23;
    if (*v23 == -1)
    {
      v34 = (int8x16_t *)((char *)v23 + v19);
      v35 = (int8x16_t *)v23;
      do
        v36 = v35++;
      while (v35 <= v34 && (vminvq_u8((uint8x16_t)vceqq_s8(*v36, (int8x16_t)a9)) & 0x80) != 0);
      do
      {
        v37 = v36;
        v36 = (int8x16_t *)((char *)v36 + 4);
      }
      while (v36 <= v34 && v37->i32[0] == -1);
      if (v37 < v34)
      {
        while (v37->u8[0] == 255)
        {
          v37 = (int8x16_t *)((char *)v37 + 1);
          if (v37 >= v34)
          {
            v37 = (int8x16_t *)((char *)v23 + v19);
            break;
          }
        }
      }
      v38 = 0;
      v39 = (char *)v37 - (char *)v23;
      v40 = (char *)v37 - (char *)v23;
      do
      {
        v41 = *(int8x16_t *)((char *)v20 + v38);
        v42 = *(int8x16_t *)((char *)v22 + v38);
        v43 = (uint8x16_t)vqtbl1q_s8(vmvnq_s8(v42), (int8x16_t)xmmword_185004A40);
        v44 = (uint8x16_t)vqtbl1q_s8(vmvnq_s8(v41), (int8x16_t)xmmword_185004A40);
        v18 = vmull_u8(*(uint8x8_t *)v41.i8, *(uint8x8_t *)v43.i8);
        v45 = vmull_high_u8((uint8x16_t)v41, v43);
        a14 = vqaddq_u16(v18, vmull_u8(*(uint8x8_t *)v42.i8, *(uint8x8_t *)v44.i8));
        v46 = vqaddq_u16(v45, vmull_high_u8((uint8x16_t)v42, v44));
        v47 = vminq_u16(a14, v26);
        v48 = vminq_u16(v46, v26);
        *(uint8x16_t *)((char *)v22 + v38) = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v47, v47, 8uLL), 8uLL), vrsraq_n_u16(v48, v48, 8uLL), 8uLL);
        v23 = (unsigned __int32 *)((char *)v23 + v24);
        v40 -= 4;
        v38 += v25;
      }
      while (v40 > 3);
      v22 = (_DWORD *)((char *)v22 + v38);
      v20 = (unsigned __int32 *)((char *)v20 + v38);
      v19 = v19 - v39 + v40;
      goto LABEL_31;
    }
    if (v27)
      break;
    v28 = (int8x16_t *)((char *)v23 + v19);
    v29 = (int8x16_t *)v23;
    do
      v30 = v29++;
    while (v29 <= v28 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v30)) & 0x80) != 0);
    do
    {
      v31 = v30;
      v30 = (int8x16_t *)((char *)v30 + 4);
    }
    while (v30 <= v28 && !v31->i32[0]);
    if (v31 < v28)
    {
      while (!v31->i8[0])
      {
        v31 = (int8x16_t *)((char *)v31 + 1);
        if (v31 >= v28)
        {
          v31 = (int8x16_t *)((char *)v23 + v19);
          break;
        }
      }
    }
    v32 = (char *)v31 - (char *)v23;
    v33 = ((char *)v31 - (char *)v23) * a6;
    v20 += v33;
    v22 += v33;
    v23 = (unsigned __int32 *)((char *)v23 + v33);
    v19 -= v32;
LABEL_31:
    if (v19 <= 3)
      goto LABEL_34;
  }
  v49 = 0;
  while (1)
  {
    v50 = *(uint8x16_t *)((char *)v20 + v49);
    v51 = *(int8x16_t *)((char *)v22 + v49);
    a14.i32[0] = v27;
    v52 = (uint8x16_t)vqtbl1q_s8((int8x16_t)a14, (int8x16_t)xmmword_185004A30);
    v53 = vmull_u8(*(uint8x8_t *)v50.i8, *(uint8x8_t *)v52.i8);
    v54 = vmull_high_u8(v50, v52);
    v55 = vminq_u16(v53, v26);
    v56 = vminq_u16(v54, v26);
    *(uint8x8_t *)v53.i8 = vqrshrn_n_u16(vrsraq_n_u16(v55, v55, 8uLL), 8uLL);
    *(uint8x8_t *)v18.i8 = vqrshrn_n_u16(vrsraq_n_u16(v56, v56, 8uLL), 8uLL);
    v57 = vqtbl1q_s8(vmvnq_s8(v51), (int8x16_t)xmmword_185004A40);
    v58 = (uint8x16_t)vmvnq_s8(vqtbl2q_s8(*(int8x16x2_t *)(&v18 - 1), (int8x16_t)xmmword_185004A50));
    v59 = vmull_u8(*(uint8x8_t *)v53.i8, *(uint8x8_t *)v57.i8);
    a14 = vmull_u8(*(uint8x8_t *)v18.i8, (uint8x8_t)*(_OWORD *)&vextq_s8(v57, v57, 8uLL));
    v60 = vmull_u8(*(uint8x8_t *)v51.i8, *(uint8x8_t *)v58.i8);
    v61 = vmull_high_u8((uint8x16_t)v51, v58);
    v62 = vminq_u16(vqaddq_u16(v59, v60), v26);
    v63 = vminq_u16(vqaddq_u16(a14, v61), v26);
    *(uint8x16_t *)((char *)v22 + v49) = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v62, v62, 8uLL), 8uLL), vrsraq_n_u16(v63, v63, 8uLL), 8uLL);
    v23 = (unsigned __int32 *)((char *)v23 + v24);
    v19 -= 4;
    if (v19 < 4)
      break;
    v27 = *v23;
    v49 += v25;
    if (*v23 - 1 >= 0xFFFFFFFE)
    {
      v20 = (unsigned __int32 *)((char *)v20 + v49);
      v22 = (_DWORD *)((char *)v22 + v49);
      goto LABEL_31;
    }
  }
  v20 = (unsigned __int32 *)((char *)v20 + v25 + v49);
  v22 = (_DWORD *)((char *)v22 + v25 + v49);
LABEL_34:
  v64 = v19 + a17;
  if (v64)
  {
    v65 = (int8x16_t)vdupq_n_s16(0xFE01u);
    do
    {
      a9.i32[0] = *v20;
      v66 = vmovl_u8(*(uint8x8_t *)a9.i8);
      LOBYTE(v67) = v66.i8[0];
      BYTE1(v67) = v66.i8[2];
      BYTE2(v67) = v66.i8[4];
      HIBYTE(v67) = v66.i8[6];
      v66.i32[0] = *v22;
      v68 = vmovl_u8(*(uint8x8_t *)v66.i8);
      LOBYTE(v69) = v68.i8[0];
      BYTE1(v69) = v68.i8[2];
      BYTE2(v69) = v68.i8[4];
      HIBYTE(v69) = v68.i8[6];
      v68.i8[0] = *(_BYTE *)v23;
      v68.i8[1] = *(_BYTE *)v23;
      v68.i8[2] = *(_BYTE *)v23;
      v68.i8[3] = *(_BYTE *)v23;
      v70 = vminq_u16(vmull_u8((uint8x8_t)v67, (uint8x8_t)v68.u32[0]), (uint16x8_t)v65);
      *(uint8x8_t *)v70.i8 = vqrshrn_n_u16(vrsraq_n_u16(v70, v70, 8uLL), 8uLL);
      *(int8x8_t *)v71.i8 = vmvn_s8((int8x8_t)v69);
      v71.i64[1] = v71.i64[0];
      *(int8x8_t *)v72.i8 = vmvn_s8(*(int8x8_t *)v70.i8);
      v72.i64[1] = v72.i64[0];
      v73 = vminq_u16(vqaddq_u16(vmull_u8(*(uint8x8_t *)v70.i8, (uint8x8_t)vqtbl1_s8(v71, (int8x8_t)0x707070703030303)), vmull_u8((uint8x8_t)v69, (uint8x8_t)vqtbl1_s8(v72, (int8x8_t)0x707070703030303))), (uint16x8_t)v65);
      a9 = vrsraq_n_u16(v73, v73, 8uLL);
      *(uint8x8_t *)a9.i8 = vqrshrn_n_u16(a9, 8uLL);
      *(int8x8_t *)a9.i8 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a9, v65));
      *v22 = a9.i32[0];
      v74 = &v20[a6];
      v23 = (unsigned __int32 *)((char *)v23 + a6);
      if ((unint64_t)v74 >= v21)
        v75 = -(uint64_t)a5;
      else
        v75 = 0;
      v20 = &v74[v75];
      v22 += a6;
      --v64;
    }
    while (v64);
  }
  *result = v20;
  *a3 = v21;
  *a2 = v22;
  *a4 = v23;
  return result;
}

_DWORD **vec::template_mark_pixelmask_row<(CGCompositeOperation)11,_rgba8_t>(_DWORD **result, _DWORD **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, int8x16_t a9, double a10, double a11, double a12, uint8x8_t a13, uint64_t a14, unint64_t a15)
{
  int8x16_t v15;
  uint8x16_t v16;
  unint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  _DWORD *v20;
  char *v21;
  unsigned int v22;
  int8x16_t v23;
  unsigned int v24;
  int8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  int8x16_t v28;
  uint16x8_t v29;
  __int32 v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  int64_t v35;
  int64_t v36;
  int8x16_t *v37;
  int8x16_t *v38;
  int8x16_t *v39;
  int8x16_t *v40;
  uint64_t v41;
  int64_t v42;
  unint64_t v43;
  int8x16_t v44;
  int8x16_t v45;
  uint8x16_t v46;
  uint64_t v47;
  int8x16_t v48;
  int8x16_t v49;
  uint8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  uint16x8_t v55;
  uint16x8_t v56;
  uint16x8_t v57;
  uint8x16_t v58;
  uint8x16_t v59;
  uint8x16_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  int8x8_t v64;
  uint16x8_t v65;
  uint16x8_t v66;
  unsigned int v67;
  uint16x8_t v68;
  unsigned int v69;
  int8x8_t v70;
  uint8x8_t v71;
  uint16x8_t v72;
  int8x16_t v73;
  uint8x8_t v74;
  int8x16_t v75;
  _DWORD *v76;
  uint64_t v77;

  v17 = a15;
  v18 = *result;
  v19 = *a3;
  v20 = *a2;
  v21 = *a4;
  if (a15 < 4)
    goto LABEL_40;
  if (a7)
    v22 = 0;
  else
    v22 = -1;
  v23.i64[0] = 0xFF000000FF000000;
  v23.i64[1] = 0xFF000000FF000000;
  a9 = vandq_s8(vdupq_n_s8(v22), v23);
  if (a8)
    v24 = 0;
  else
    v24 = -1;
  v25 = vandq_s8(vdupq_n_s8(v24), v23);
  v26 = 4 * a6;
  v27 = 16 * a6;
  v28.i64[0] = -1;
  v28.i64[1] = -1;
  a13.i32[1] = 16843009;
  v29 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  while (1)
  {
    v30 = *(_DWORD *)v21;
    if (*(_DWORD *)v21 == -1)
    {
      v37 = (int8x16_t *)&v21[v17];
      v38 = (int8x16_t *)v21;
      do
        v39 = v38++;
      while (v38 <= v37 && (vminvq_u8((uint8x16_t)vceqq_s8(*v39, v28)) & 0x80) != 0);
      do
      {
        v40 = v39;
        v39 = (int8x16_t *)((char *)v39 + 4);
      }
      while (v39 <= v37 && v40->i32[0] == -1);
      if (v40 < v37)
      {
        while (v40->u8[0] == 255)
        {
          v40 = (int8x16_t *)((char *)v40 + 1);
          if (v40 >= v37)
          {
            v40 = (int8x16_t *)&v21[v17];
            break;
          }
        }
      }
      v41 = 0;
      v42 = (char *)v40 - v21;
      v43 = (char *)v40 - v21;
      do
      {
        v44 = vorrq_s8(*(int8x16_t *)((char *)v18 + v41), a9);
        v45 = vorrq_s8(*(int8x16_t *)((char *)v20 + v41), v25);
        v15 = vqtbl1q_s8(v44, (int8x16_t)xmmword_185004A40);
        v46 = (uint8x16_t)vqtbl1q_s8(v45, (int8x16_t)xmmword_185004A40);
        *(uint8x16_t *)((char *)v20 + v41) = vqsubq_u8(vqaddq_u8(v46, (uint8x16_t)v15), vqaddq_u8(vqsubq_u8((uint8x16_t)v15, (uint8x16_t)v44), vqsubq_u8(v46, (uint8x16_t)v45)));
        v21 += v26;
        v43 -= 4;
        v41 += v27;
      }
      while (v43 > 3);
      v20 = (_DWORD *)((char *)v20 + v41);
      v18 = (_DWORD *)((char *)v18 + v41);
      v17 = v17 - v42 + v43;
      goto LABEL_37;
    }
    if (v30)
      break;
    v31 = (int8x16_t *)&v21[v17];
    v32 = (int8x16_t *)v21;
    do
      v33 = v32++;
    while (v32 <= v31 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v33)) & 0x80) != 0);
    do
    {
      v34 = v33;
      v33 = (int8x16_t *)((char *)v33 + 4);
    }
    while (v33 <= v31 && !v34->i32[0]);
    if (v34 < v31)
    {
      while (!v34->i8[0])
      {
        v34 = (int8x16_t *)((char *)v34 + 1);
        if (v34 >= v31)
        {
          v34 = (int8x16_t *)&v21[v17];
          break;
        }
      }
    }
    v35 = (char *)v34 - v21;
    v36 = ((char *)v34 - v21) * a6;
    v18 += v36;
    v20 += v36;
    v21 += v36;
    v17 -= v35;
LABEL_37:
    if (v17 <= 3)
      goto LABEL_40;
  }
  v47 = 0;
  while (1)
  {
    v48 = *(int8x16_t *)((char *)v20 + v47);
    v15.i32[0] = v30;
    v49 = vqtbl1q_s8(v15, (int8x16_t)xmmword_185004A30);
    v50 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v18 + v47), a9);
    v51 = vceqzq_s8(v49);
    v52 = vorrq_s8(vbicq_s8(v25, v51), v48);
    v53 = vmull_u8(*(uint8x8_t *)v50.i8, *(uint8x8_t *)v49.i8);
    v54 = vmull_high_u8(v50, (uint8x16_t)v49);
    v55 = vminq_u16(v53, v29);
    v56 = vminq_u16(v54, v29);
    v57 = vrsraq_n_u16(v56, v56, 8uLL);
    *(uint8x8_t *)v53.i8 = vqrshrn_n_u16(vrsraq_n_u16(v55, v55, 8uLL), 8uLL);
    *(uint8x8_t *)v16.i8 = vqrshrn_n_u16(v57, 8uLL);
    v58 = (uint8x16_t)vqtbl2q_s8(*(int8x16x2_t *)(&v16 - 1), (int8x16_t)xmmword_185004A50);
    v59 = vqrshrn_high_n_u16(*(uint8x8_t *)v53.i8, v57, 8uLL);
    v60 = (uint8x16_t)vqtbl1q_s8(v52, (int8x16_t)xmmword_185004A40);
    v16 = vqaddq_u8(v60, v58);
    v15 = (int8x16_t)vqsubq_u8(v58, v59);
    *(int8x16_t *)((char *)v20 + v47) = vbslq_s8(v51, v48, (int8x16_t)vqsubq_u8(v16, vqaddq_u8((uint8x16_t)v15, vqsubq_u8(v60, (uint8x16_t)v52))));
    v21 += v26;
    v17 -= 4;
    if (v17 < 4)
      break;
    v30 = *(_DWORD *)v21;
    v47 += v27;
    if ((*(_DWORD *)v21 - 1) >= 0xFFFFFFFE)
    {
      v18 = (_DWORD *)((char *)v18 + v47);
      v20 = (_DWORD *)((char *)v20 + v47);
      goto LABEL_37;
    }
  }
  v18 = (_DWORD *)((char *)v18 + v27 + v47);
  v20 = (_DWORD *)((char *)v20 + v27 + v47);
LABEL_40:
  v61 = v17 + a14;
  if (v61)
  {
    if (a7)
      v62 = 0;
    else
      v62 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v62), (int8x8_t)0xFF000000FF000000);
    if (a8)
      v63 = 0;
    else
      v63 = -1;
    v64 = vand_s8(vdup_n_s8(v63), (int8x8_t)0xFF000000FF000000);
    v65 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a13.i32[0] = *v18;
      v66 = vmovl_u8(a13);
      LOBYTE(v67) = v66.i8[0];
      BYTE1(v67) = v66.i8[2];
      BYTE2(v67) = v66.i8[4];
      HIBYTE(v67) = v66.i8[6];
      v66.i32[0] = *v20;
      v68 = vmovl_u8(*(uint8x8_t *)v66.i8);
      LOBYTE(v69) = v68.i8[0];
      BYTE1(v69) = v68.i8[2];
      BYTE2(v69) = v68.i8[4];
      HIBYTE(v69) = v68.i8[6];
      v68.i8[0] = *v21;
      v68.i8[1] = *v21;
      v68.i8[2] = *v21;
      v68.i8[3] = *v21;
      v70 = vceqz_s8((int8x8_t)v68.u32[0]);
      v71 = (uint8x8_t)vorr_s8(vbic_s8(v64, v70), (int8x8_t)v69);
      v72 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v67, *(int8x8_t *)a9.i8), (uint8x8_t)v68.u32[0]), v65);
      v73 = (int8x16_t)vrsraq_n_u16(v72, v72, 8uLL);
      v74 = vqrshrn_n_u16((uint16x8_t)v73, 8uLL);
      v75 = (int8x16_t)vqrshrn_high_n_u16(v74, (uint16x8_t)v73, 8uLL);
      *(uint8x8_t *)v73.i8 = v71;
      v73.u64[1] = (unint64_t)v71;
      *(int8x8_t *)v75.i8 = vqtbl1_s8(v75, (int8x8_t)0x707070703030303);
      *(int8x8_t *)v73.i8 = vqtbl1_s8(v73, (int8x8_t)0x707070703030303);
      *(int8x8_t *)v73.i8 = vbsl_s8(v70, (int8x8_t)v69, (int8x8_t)vqsub_u8(vqadd_u8(*(uint8x8_t *)v73.i8, *(uint8x8_t *)v75.i8), vqadd_u8(vqsub_u8(*(uint8x8_t *)v75.i8, v74), vqsub_u8(*(uint8x8_t *)v73.i8, v71))));
      a13 = (uint8x8_t)vmovn_s16((int16x8_t)vzip1q_s8(v73, a9));
      *v20 = a13.i32[0];
      v76 = &v18[a6];
      v21 += a6;
      if ((unint64_t)v76 >= v19)
        v77 = -(uint64_t)a5;
      else
        v77 = 0;
      v18 = &v76[v77];
      v20 += a6;
      --v61;
    }
    while (v61);
  }
  *result = v18;
  *a3 = v19;
  *a2 = v20;
  *a4 = v21;
  return result;
}

_DWORD **vec::template_mark_pixelmask_row<(CGCompositeOperation)12,_rgba8_t>(_DWORD **result, _DWORD **a2, unint64_t *a3, unsigned __int32 **a4, int a5, int a6, int a7, int8x16_t a8, double a9, uint8x8_t a10, double a11, double a12, double a13, uint8x16_t a14, uint64_t a15, uint64_t a16, unint64_t a17)
{
  unint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  _DWORD *v20;
  unsigned __int32 *v21;
  unsigned int v22;
  int8x16_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x16_t v26;
  uint16x8_t v27;
  unsigned __int32 v28;
  int8x16_t *v29;
  int8x16_t *v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int64_t v33;
  int64_t v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  int8x16_t *v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint8x16_t v43;
  uint8x16_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint64_t v49;
  unsigned int v50;
  uint16x8_t v51;
  uint16x8_t v52;
  unsigned int v53;
  uint16x8_t v54;
  unsigned int v55;
  uint16x8_t v56;
  int8x16_t v57;
  _DWORD *v58;
  uint64_t v59;

  v17 = a17;
  v18 = *result;
  v19 = *a3;
  v20 = *a2;
  v21 = *a4;
  if (a17 < 4)
    goto LABEL_37;
  if (a7)
    v22 = 0;
  else
    v22 = -1;
  v23.i64[0] = 0xFF000000FF000000;
  v23.i64[1] = 0xFF000000FF000000;
  a8 = vandq_s8(vdupq_n_s8(v22), v23);
  v24 = 4 * a6;
  v25 = 16 * a6;
  v26.i64[0] = -1;
  v26.i64[1] = -1;
  a10.i32[1] = 16843009;
  v27 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  while (1)
  {
    v28 = *v21;
    if (*v21 == -1)
    {
      v35 = (int8x16_t *)((char *)v21 + v17);
      v36 = (int8x16_t *)v21;
      do
        v37 = v36++;
      while (v36 <= v35 && (vminvq_u8((uint8x16_t)vceqq_s8(*v37, v26)) & 0x80) != 0);
      do
      {
        v38 = v37;
        v37 = (int8x16_t *)((char *)v37 + 4);
      }
      while (v37 <= v35 && v38->i32[0] == -1);
      if (v38 < v35)
      {
        while (v38->u8[0] == 255)
        {
          v38 = (int8x16_t *)((char *)v38 + 1);
          if (v38 >= v35)
          {
            v38 = (int8x16_t *)((char *)v21 + v17);
            break;
          }
        }
      }
      v39 = 0;
      v40 = (char *)v38 - (char *)v21;
      v41 = (char *)v38 - (char *)v21;
      do
      {
        *(uint8x16_t *)((char *)v20 + v39) = vqaddq_u8(*(uint8x16_t *)((char *)v20 + v39), (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v18 + v39), a8));
        v21 = (unsigned __int32 *)((char *)v21 + v24);
        v41 -= 4;
        v39 += v25;
      }
      while (v41 > 3);
      v20 = (_DWORD *)((char *)v20 + v39);
      v18 = (_DWORD *)((char *)v18 + v39);
      v17 = v17 - v40 + v41;
      goto LABEL_34;
    }
    if (v28)
      break;
    v29 = (int8x16_t *)((char *)v21 + v17);
    v30 = (int8x16_t *)v21;
    do
      v31 = v30++;
    while (v30 <= v29 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v31)) & 0x80) != 0);
    do
    {
      v32 = v31;
      v31 = (int8x16_t *)((char *)v31 + 4);
    }
    while (v31 <= v29 && !v32->i32[0]);
    if (v32 < v29)
    {
      while (!v32->i8[0])
      {
        v32 = (int8x16_t *)((char *)v32 + 1);
        if (v32 >= v29)
        {
          v32 = (int8x16_t *)((char *)v21 + v17);
          break;
        }
      }
    }
    v33 = (char *)v32 - (char *)v21;
    v34 = ((char *)v32 - (char *)v21) * a6;
    v18 += v34;
    v20 += v34;
    v21 = (unsigned __int32 *)((char *)v21 + v34);
    v17 -= v33;
LABEL_34:
    if (v17 <= 3)
      goto LABEL_37;
  }
  v42 = 0;
  while (1)
  {
    a14.i32[0] = v28;
    v43 = (uint8x16_t)vqtbl1q_s8((int8x16_t)a14, (int8x16_t)xmmword_185004A30);
    v44 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v18 + v42), a8);
    v45 = vmull_u8(*(uint8x8_t *)v44.i8, *(uint8x8_t *)v43.i8);
    v46 = vmull_high_u8(v44, v43);
    v47 = vminq_u16(v45, v27);
    v48 = vminq_u16(v46, v27);
    a14 = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v47, v47, 8uLL), 8uLL), vrsraq_n_u16(v48, v48, 8uLL), 8uLL);
    *(uint8x16_t *)((char *)v20 + v42) = vqaddq_u8(*(uint8x16_t *)((char *)v20 + v42), a14);
    v21 = (unsigned __int32 *)((char *)v21 + v24);
    v17 -= 4;
    if (v17 < 4)
      break;
    v28 = *v21;
    v42 += v25;
    if (*v21 - 1 >= 0xFFFFFFFE)
    {
      v18 = (_DWORD *)((char *)v18 + v42);
      v20 = (_DWORD *)((char *)v20 + v42);
      goto LABEL_34;
    }
  }
  v18 = (_DWORD *)((char *)v18 + v25 + v42);
  v20 = (_DWORD *)((char *)v20 + v25 + v42);
LABEL_37:
  v49 = v17 + a16;
  if (v49)
  {
    if (a7)
      v50 = 0;
    else
      v50 = -1;
    *(int8x8_t *)a8.i8 = vand_s8(vdup_n_s8(v50), (int8x8_t)0xFF000000FF000000);
    v51 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a10.i32[0] = *v18;
      v52 = vmovl_u8(a10);
      LOBYTE(v53) = v52.i8[0];
      BYTE1(v53) = v52.i8[2];
      BYTE2(v53) = v52.i8[4];
      HIBYTE(v53) = v52.i8[6];
      v52.i32[0] = *v20;
      v54 = vmovl_u8(*(uint8x8_t *)v52.i8);
      LOBYTE(v55) = v54.i8[0];
      BYTE1(v55) = v54.i8[2];
      BYTE2(v55) = v54.i8[4];
      HIBYTE(v55) = v54.i8[6];
      v54.i8[0] = *(_BYTE *)v21;
      v54.i8[1] = *(_BYTE *)v21;
      v54.i8[2] = *(_BYTE *)v21;
      v54.i8[3] = *(_BYTE *)v21;
      v56 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v53, *(int8x8_t *)a8.i8), (uint8x8_t)v54.u32[0]), v51);
      v57 = (int8x16_t)vrsraq_n_u16(v56, v56, 8uLL);
      *(uint8x8_t *)v57.i8 = vqadd_u8((uint8x8_t)v55, vqrshrn_n_u16((uint16x8_t)v57, 8uLL));
      a10 = (uint8x8_t)vmovn_s16((int16x8_t)vzip1q_s8(v57, a8));
      *v20 = a10.i32[0];
      v58 = &v18[a6];
      v21 = (unsigned __int32 *)((char *)v21 + a6);
      if ((unint64_t)v58 >= v19)
        v59 = -(uint64_t)a5;
      else
        v59 = 0;
      v18 = &v58[v59];
      v20 += a6;
      --v49;
    }
    while (v49);
  }
  *result = v18;
  *a3 = v19;
  *a2 = v20;
  *a4 = v21;
  return result;
}

unsigned __int32 **vec::template_mark_pixelmask_row<(CGCompositeOperation)13,_rgba8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, int8x16_t a9, double a10, double a11, double a12, uint16x8_t a13, uint64_t a14, unint64_t a15)
{
  int8x16_t v15;
  unint64_t v16;
  unsigned __int32 *v17;
  unint64_t v18;
  _DWORD *v19;
  char *v20;
  unsigned int v21;
  int8x16_t v22;
  unsigned int v23;
  int8x16_t v24;
  uint64_t v25;
  uint64_t v26;
  uint16x8_t v27;
  __int32 v28;
  int8x16_t *v29;
  int8x16_t *v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int64_t v33;
  int64_t v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  int8x16_t *v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  uint8x16_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint8x16_t v50;
  uint8x16_t v51;
  uint8x16_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  uint16x8_t v55;
  uint16x8_t v56;
  uint64_t v57;
  int8x16_t v58;
  uint8x16_t v59;
  int8x16_t v60;
  uint16x8_t v61;
  uint16x8_t v62;
  uint16x8_t v63;
  uint16x8_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  uint16x8_t v69;
  int8x16_t v70;
  uint16x8_t v71;
  uint16x8_t v72;
  uint16x8_t v73;
  uint8x16_t v74;
  uint16x8_t v75;
  uint16x8_t v76;
  int8x16_t v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  int8x8_t v81;
  uint16x8_t v82;
  uint16x8_t v83;
  unsigned int v84;
  uint16x8_t v85;
  unsigned int v86;
  int8x8_t v87;
  uint16x8_t v88;
  int8x16_t v89;
  int8x8_t v90;
  int8x16_t v91;
  int8x8_t v92;
  uint8x8_t v93;
  uint16x8_t v94;
  uint16x8_t v95;
  unsigned __int32 *v96;
  uint64_t v97;
  int8x16x2_t v98;

  v16 = a15;
  v17 = *result;
  v18 = *a3;
  v19 = *a2;
  v20 = *a4;
  if (a15 < 4)
    goto LABEL_40;
  if (a7)
    v21 = 0;
  else
    v21 = -1;
  v22.i64[0] = 0xFF000000FF000000;
  v22.i64[1] = 0xFF000000FF000000;
  a9 = vandq_s8(vdupq_n_s8(v21), v22);
  if (a8)
    v23 = 0;
  else
    v23 = -1;
  v24 = vandq_s8(vdupq_n_s8(v23), v22);
  v25 = 4 * a6;
  v26 = 16 * a6;
  v27 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a13.i64[0] = -1;
  a13.i64[1] = -1;
  while (1)
  {
    v28 = *(_DWORD *)v20;
    if (*(_DWORD *)v20 == -1)
    {
      v35 = (int8x16_t *)&v20[v16];
      v36 = (int8x16_t *)v20;
      do
        v37 = v36++;
      while (v36 <= v35 && (vminvq_u8((uint8x16_t)vceqq_s8(*v37, (int8x16_t)a13)) & 0x80) != 0);
      do
      {
        v38 = v37;
        v37 = (int8x16_t *)((char *)v37 + 4);
      }
      while (v37 <= v35 && v38->i32[0] == -1);
      if (v38 < v35)
      {
        while (v38->u8[0] == 255)
        {
          v38 = (int8x16_t *)((char *)v38 + 1);
          if (v38 >= v35)
          {
            v38 = (int8x16_t *)&v20[v16];
            break;
          }
        }
      }
      v39 = 0;
      v40 = (char *)v38 - v20;
      v41 = (char *)v38 - v20;
      do
      {
        v42 = vorrq_s8(*(int8x16_t *)((char *)v17 + v39), a9);
        v43 = vorrq_s8(*(int8x16_t *)((char *)v19 + v39), v24);
        v44 = vqtbl1q_s8(v42, (int8x16_t)xmmword_185004A40);
        v45 = vqtbl1q_s8(v43, (int8x16_t)xmmword_185004A40);
        v46 = vceqzq_s8(v45);
        v47 = (uint8x16_t)vbicq_s8(v43, v46);
        v48 = vminq_u16(vmull_u8(*(uint8x8_t *)v42.i8, *(uint8x8_t *)v47.i8), v27);
        v49 = vminq_u16(vmull_high_u8((uint8x16_t)v42, v47), v27);
        v50 = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v48, v48, 8uLL), 8uLL), vrsraq_n_u16(v49, v49, 8uLL), 8uLL);
        v51 = (uint8x16_t)vmvnq_s8(v45);
        v52 = (uint8x16_t)vmvnq_s8(v44);
        v53 = vmull_u8(*(uint8x8_t *)v42.i8, *(uint8x8_t *)v51.i8);
        v54 = vqaddq_u16(vmull_high_u8((uint8x16_t)v42, v51), vmull_high_u8(v47, v52));
        v55 = vminq_u16(vqaddq_u16(v53, vmull_u8(*(uint8x8_t *)v47.i8, *(uint8x8_t *)v52.i8)), v27);
        v56 = vminq_u16(v54, v27);
        v15 = vceqzq_s8(v44);
        *(int8x16_t *)((char *)v19 + v39) = vbslq_s8(v15, v43, vbslq_s8(v46, v42, (int8x16_t)vqaddq_u8(v50, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v55, v55, 8uLL), 8uLL), vrsraq_n_u16(v56, v56, 8uLL), 8uLL))));
        v20 += v25;
        v41 -= 4;
        v39 += v26;
      }
      while (v41 > 3);
      v19 = (_DWORD *)((char *)v19 + v39);
      v17 = (unsigned __int32 *)((char *)v17 + v39);
      v16 = v16 - v40 + v41;
      goto LABEL_37;
    }
    if (v28)
      break;
    v29 = (int8x16_t *)&v20[v16];
    v30 = (int8x16_t *)v20;
    do
      v31 = v30++;
    while (v30 <= v29 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v31)) & 0x80) != 0);
    do
    {
      v32 = v31;
      v31 = (int8x16_t *)((char *)v31 + 4);
    }
    while (v31 <= v29 && !v32->i32[0]);
    if (v32 < v29)
    {
      while (!v32->i8[0])
      {
        v32 = (int8x16_t *)((char *)v32 + 1);
        if (v32 >= v29)
        {
          v32 = (int8x16_t *)&v20[v16];
          break;
        }
      }
    }
    v33 = (char *)v32 - v20;
    v34 = ((char *)v32 - v20) * a6;
    v17 += v34;
    v19 += v34;
    v20 += v34;
    v16 -= v33;
LABEL_37:
    if (v16 <= 3)
      goto LABEL_40;
  }
  v57 = 0;
  while (1)
  {
    v15.i32[0] = v28;
    v58 = vqtbl1q_s8(v15, (int8x16_t)xmmword_185004A30);
    v59 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v17 + v57), a9);
    v60 = vorrq_s8(vbicq_s8(v24, vceqzq_s8(v58)), *(int8x16_t *)((char *)v19 + v57));
    v98.val[1] = (int8x16_t)vmull_u8(*(uint8x8_t *)v59.i8, *(uint8x8_t *)v58.i8);
    v61 = vmull_high_u8(v59, (uint8x16_t)v58);
    v62 = vminq_u16((uint16x8_t)v98.val[1], v27);
    v63 = vminq_u16(v61, v27);
    v98.val[0] = (int8x16_t)vrsraq_n_u16(v62, v62, 8uLL);
    v64 = vrsraq_n_u16(v63, v63, 8uLL);
    *(uint8x8_t *)v98.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v98.val[0], 8uLL);
    *(uint8x8_t *)v98.val[1].i8 = vqrshrn_n_u16(v64, 8uLL);
    v65 = vqtbl2q_s8(v98, (int8x16_t)xmmword_185004A50);
    v66 = vqtbl1q_s8(v60, (int8x16_t)xmmword_185004A40);
    v67 = vceqzq_s8(v66);
    v68 = vbicq_s8(v60, v67);
    v69 = vmull_u8(*(uint8x8_t *)v98.val[0].i8, *(uint8x8_t *)v68.i8);
    v70 = vmvnq_s8(v66);
    v71 = vmull_u8(*(uint8x8_t *)v98.val[0].i8, *(uint8x8_t *)v70.i8);
    v72 = vmull_u8(*(uint8x8_t *)v98.val[1].i8, (uint8x8_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL));
    v98.val[0] = (int8x16_t)vqrshrn_high_n_u16(*(uint8x8_t *)v98.val[0].i8, v64, 8uLL);
    v73 = vminq_u16(v69, v27);
    v98.val[1] = (int8x16_t)vminq_u16(vmull_u8(*(uint8x8_t *)v98.val[1].i8, (uint8x8_t)*(_OWORD *)&vextq_s8(v68, v68, 8uLL)), v27);
    v74 = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v73, v73, 8uLL), 8uLL), vrsraq_n_u16((uint16x8_t)v98.val[1], (uint16x8_t)v98.val[1], 8uLL), 8uLL);
    v98.val[1] = vmvnq_s8(v65);
    v75 = vmull_u8(*(uint8x8_t *)v68.i8, *(uint8x8_t *)v98.val[1].i8);
    v98.val[1] = (int8x16_t)vqaddq_u16(v72, vmull_high_u8((uint8x16_t)v68, (uint8x16_t)v98.val[1]));
    v76 = vminq_u16(vqaddq_u16(v71, v75), v27);
    v98.val[1] = (int8x16_t)vminq_u16((uint16x8_t)v98.val[1], v27);
    v77 = vbslq_s8(v67, v98.val[0], (int8x16_t)vqaddq_u8(v74, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v76, v76, 8uLL), 8uLL), vrsraq_n_u16((uint16x8_t)v98.val[1], (uint16x8_t)v98.val[1], 8uLL), 8uLL)));
    v15 = vceqzq_s8(v65);
    *(int8x16_t *)((char *)v19 + v57) = vbslq_s8(v15, v60, v77);
    v20 += v25;
    v16 -= 4;
    if (v16 < 4)
      break;
    v28 = *(_DWORD *)v20;
    v57 += v26;
    if ((*(_DWORD *)v20 - 1) >= 0xFFFFFFFE)
    {
      v17 = (unsigned __int32 *)((char *)v17 + v57);
      v19 = (_DWORD *)((char *)v19 + v57);
      goto LABEL_37;
    }
  }
  v17 = (unsigned __int32 *)((char *)v17 + v26 + v57);
  v19 = (_DWORD *)((char *)v19 + v26 + v57);
LABEL_40:
  v78 = v16 + a14;
  if (v78)
  {
    if (a7)
      v79 = 0;
    else
      v79 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v79), (int8x8_t)0xFF000000FF000000);
    if (a8)
      v80 = 0;
    else
      v80 = -1;
    v81 = vand_s8(vdup_n_s8(v80), (int8x8_t)0xFF000000FF000000);
    v82 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a13.i32[0] = *v17;
      v83 = vmovl_u8(*(uint8x8_t *)a13.i8);
      LOBYTE(v84) = v83.i8[0];
      BYTE1(v84) = v83.i8[2];
      BYTE2(v84) = v83.i8[4];
      HIBYTE(v84) = v83.i8[6];
      v83.i32[0] = *v19;
      v85 = vmovl_u8(*(uint8x8_t *)v83.i8);
      LOBYTE(v86) = v85.i8[0];
      BYTE1(v86) = v85.i8[2];
      BYTE2(v86) = v85.i8[4];
      HIBYTE(v86) = v85.i8[6];
      v85.i8[0] = *v20;
      v85.i8[1] = *v20;
      v85.i8[2] = *v20;
      v85.i8[3] = *v20;
      v87 = vorr_s8(vbic_s8(v81, vceqz_s8((int8x8_t)v85.u32[0])), (int8x8_t)v86);
      v88 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v84, *(int8x8_t *)a9.i8), (uint8x8_t)v85.u32[0]), v82);
      v89 = (int8x16_t)vrsraq_n_u16(v88, v88, 8uLL);
      v90 = (int8x8_t)vqrshrn_n_u16((uint16x8_t)v89, 8uLL);
      v91 = (int8x16_t)vqrshrn_high_n_u16((uint8x8_t)v90, (uint16x8_t)v89, 8uLL);
      *(int8x8_t *)v89.i8 = v87;
      v89.u64[1] = (unint64_t)v87;
      *(int8x8_t *)v91.i8 = vqtbl1_s8(v91, (int8x8_t)0x707070703030303);
      *(int8x8_t *)v89.i8 = vqtbl1_s8(v89, (int8x8_t)0x707070703030303);
      v92 = vceqz_s8(*(int8x8_t *)v89.i8);
      v93 = (uint8x8_t)vbic_s8(v87, v92);
      v94 = vminq_u16(vmull_u8((uint8x8_t)v90, v93), v82);
      v95 = vminq_u16(vqaddq_u16(vmull_u8((uint8x8_t)v90, (uint8x8_t)vmvn_s8(*(int8x8_t *)v89.i8)), vmull_u8(v93, (uint8x8_t)vmvn_s8(*(int8x8_t *)v91.i8))), v82);
      a13 = vrsraq_n_u16(v95, v95, 8uLL);
      *(int8x8_t *)a13.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v91.i8), v87, vbsl_s8(v92, v90, (int8x8_t)vqadd_u8(vqrshrn_n_u16(vrsraq_n_u16(v94, v94, 8uLL), 8uLL), vqrshrn_n_u16(a13, 8uLL))));
      *(int8x8_t *)a13.i8 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a13, a9));
      *v19 = a13.i32[0];
      v96 = &v17[a6];
      v20 += a6;
      if ((unint64_t)v96 >= v18)
        v97 = -(uint64_t)a5;
      else
        v97 = 0;
      v17 = &v96[v97];
      v19 += a6;
      --v78;
    }
    while (v78);
  }
  *result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

unsigned __int32 **vec::template_mark_pixelmask_row<(CGCompositeOperation)14,_rgba8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, int8x16_t a9, double a10, double a11, double a12, uint16x8_t a13, uint64_t a14, unint64_t a15)
{
  int8x16_t v15;
  unint64_t v16;
  unsigned __int32 *v17;
  unint64_t v18;
  _DWORD *v19;
  char *v20;
  unsigned int v21;
  int8x16_t v22;
  unsigned int v23;
  int8x16_t v24;
  uint64_t v25;
  uint64_t v26;
  uint16x8_t v27;
  __int32 v28;
  int8x16_t *v29;
  int8x16_t *v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int64_t v33;
  int64_t v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  int8x16_t *v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  int8x16_t v42;
  int8x16_t v43;
  uint8x16_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint64_t v47;
  int8x16_t v48;
  uint8x16_t v49;
  int8x16_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  int8x16_t v55;
  int8x16_t v56;
  uint16x8_t v57;
  uint16x8_t v58;
  int8x16_t v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  int8x8_t v63;
  uint16x8_t v64;
  uint16x8_t v65;
  unsigned int v66;
  uint16x8_t v67;
  unsigned int v68;
  int8x8_t v69;
  uint16x8_t v70;
  uint8x8_t v71;
  int8x16_t v72;
  uint16x8_t v73;
  unsigned __int32 *v74;
  uint64_t v75;
  int8x16x2_t v76;

  v16 = a15;
  v17 = *result;
  v18 = *a3;
  v19 = *a2;
  v20 = *a4;
  if (a15 < 4)
    goto LABEL_40;
  if (a7)
    v21 = 0;
  else
    v21 = -1;
  v22.i64[0] = 0xFF000000FF000000;
  v22.i64[1] = 0xFF000000FF000000;
  a9 = vandq_s8(vdupq_n_s8(v21), v22);
  if (a8)
    v23 = 0;
  else
    v23 = -1;
  v24 = vandq_s8(vdupq_n_s8(v23), v22);
  v25 = 4 * a6;
  v26 = 16 * a6;
  v27 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a13.i64[0] = -1;
  a13.i64[1] = -1;
  while (1)
  {
    v28 = *(_DWORD *)v20;
    if (*(_DWORD *)v20 == -1)
    {
      v35 = (int8x16_t *)&v20[v16];
      v36 = (int8x16_t *)v20;
      do
        v37 = v36++;
      while (v36 <= v35 && (vminvq_u8((uint8x16_t)vceqq_s8(*v37, (int8x16_t)a13)) & 0x80) != 0);
      do
      {
        v38 = v37;
        v37 = (int8x16_t *)((char *)v37 + 4);
      }
      while (v37 <= v35 && v38->i32[0] == -1);
      if (v38 < v35)
      {
        while (v38->u8[0] == 255)
        {
          v38 = (int8x16_t *)((char *)v38 + 1);
          if (v38 >= v35)
          {
            v38 = (int8x16_t *)&v20[v16];
            break;
          }
        }
      }
      v39 = 0;
      v40 = (char *)v38 - v20;
      v41 = (char *)v38 - v20;
      do
      {
        v42 = vorrq_s8(*(int8x16_t *)((char *)v17 + v39), a9);
        v43 = vorrq_s8(*(int8x16_t *)((char *)v19 + v39), v24);
        v44 = (uint8x16_t)vbicq_s8(v43, vceqzq_s8(vqtbl1q_s8(v43, (int8x16_t)xmmword_185004A40)));
        v45 = vminq_u16(vmull_u8(*(uint8x8_t *)v42.i8, *(uint8x8_t *)v44.i8), v27);
        v46 = vminq_u16(vmull_high_u8((uint8x16_t)v42, v44), v27);
        v15 = vceqzq_s8(vqtbl1q_s8(v42, (int8x16_t)xmmword_185004A40));
        *(int8x16_t *)((char *)v19 + v39) = vbslq_s8(v15, v43, (int8x16_t)vqaddq_u8(vqsubq_u8((uint8x16_t)v42, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v45, v45, 8uLL), 8uLL), vrsraq_n_u16(v46, v46, 8uLL), 8uLL)), v44));
        v20 += v25;
        v41 -= 4;
        v39 += v26;
      }
      while (v41 > 3);
      v19 = (_DWORD *)((char *)v19 + v39);
      v17 = (unsigned __int32 *)((char *)v17 + v39);
      v16 = v16 - v40 + v41;
      goto LABEL_37;
    }
    if (v28)
      break;
    v29 = (int8x16_t *)&v20[v16];
    v30 = (int8x16_t *)v20;
    do
      v31 = v30++;
    while (v30 <= v29 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v31)) & 0x80) != 0);
    do
    {
      v32 = v31;
      v31 = (int8x16_t *)((char *)v31 + 4);
    }
    while (v31 <= v29 && !v32->i32[0]);
    if (v32 < v29)
    {
      while (!v32->i8[0])
      {
        v32 = (int8x16_t *)((char *)v32 + 1);
        if (v32 >= v29)
        {
          v32 = (int8x16_t *)&v20[v16];
          break;
        }
      }
    }
    v33 = (char *)v32 - v20;
    v34 = ((char *)v32 - v20) * a6;
    v17 += v34;
    v19 += v34;
    v20 += v34;
    v16 -= v33;
LABEL_37:
    if (v16 <= 3)
      goto LABEL_40;
  }
  v47 = 0;
  while (1)
  {
    v15.i32[0] = v28;
    v48 = vqtbl1q_s8(v15, (int8x16_t)xmmword_185004A30);
    v49 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v17 + v47), a9);
    v50 = vorrq_s8(vbicq_s8(v24, vceqzq_s8(v48)), *(int8x16_t *)((char *)v19 + v47));
    v76.val[1] = (int8x16_t)vmull_u8(*(uint8x8_t *)v49.i8, *(uint8x8_t *)v48.i8);
    v51 = vmull_high_u8(v49, (uint8x16_t)v48);
    v52 = vminq_u16((uint16x8_t)v76.val[1], v27);
    v53 = vminq_u16(v51, v27);
    v76.val[0] = (int8x16_t)vrsraq_n_u16(v52, v52, 8uLL);
    v54 = vrsraq_n_u16(v53, v53, 8uLL);
    *(uint8x8_t *)v76.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v76.val[0], 8uLL);
    *(uint8x8_t *)v76.val[1].i8 = vqrshrn_n_u16(v54, 8uLL);
    v55 = vqtbl2q_s8(v76, (int8x16_t)xmmword_185004A50);
    v56 = vbicq_s8(v50, vceqzq_s8(vqtbl1q_s8(v50, (int8x16_t)xmmword_185004A40)));
    v57 = vmull_u8(*(uint8x8_t *)v76.val[0].i8, *(uint8x8_t *)v56.i8);
    v76.val[0] = (int8x16_t)vqrshrn_high_n_u16(*(uint8x8_t *)v76.val[0].i8, v54, 8uLL);
    v58 = vminq_u16(v57, v27);
    v76.val[1] = (int8x16_t)vminq_u16(vmull_u8(*(uint8x8_t *)v76.val[1].i8, (uint8x8_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL)), v27);
    v59 = (int8x16_t)vqaddq_u8(vqsubq_u8((uint8x16_t)v76.val[0], vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v58, v58, 8uLL), 8uLL), vrsraq_n_u16((uint16x8_t)v76.val[1], (uint16x8_t)v76.val[1], 8uLL), 8uLL)), (uint8x16_t)v56);
    v15 = vceqzq_s8(v55);
    *(int8x16_t *)((char *)v19 + v47) = vbslq_s8(v15, v50, v59);
    v20 += v25;
    v16 -= 4;
    if (v16 < 4)
      break;
    v28 = *(_DWORD *)v20;
    v47 += v26;
    if ((*(_DWORD *)v20 - 1) >= 0xFFFFFFFE)
    {
      v17 = (unsigned __int32 *)((char *)v17 + v47);
      v19 = (_DWORD *)((char *)v19 + v47);
      goto LABEL_37;
    }
  }
  v17 = (unsigned __int32 *)((char *)v17 + v26 + v47);
  v19 = (_DWORD *)((char *)v19 + v26 + v47);
LABEL_40:
  v60 = v16 + a14;
  if (v60)
  {
    if (a7)
      v61 = 0;
    else
      v61 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v61), (int8x8_t)0xFF000000FF000000);
    if (a8)
      v62 = 0;
    else
      v62 = -1;
    v63 = vand_s8(vdup_n_s8(v62), (int8x8_t)0xFF000000FF000000);
    v64 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a13.i32[0] = *v17;
      v65 = vmovl_u8(*(uint8x8_t *)a13.i8);
      LOBYTE(v66) = v65.i8[0];
      BYTE1(v66) = v65.i8[2];
      BYTE2(v66) = v65.i8[4];
      HIBYTE(v66) = v65.i8[6];
      v65.i32[0] = *v19;
      v67 = vmovl_u8(*(uint8x8_t *)v65.i8);
      LOBYTE(v68) = v67.i8[0];
      BYTE1(v68) = v67.i8[2];
      BYTE2(v68) = v67.i8[4];
      HIBYTE(v68) = v67.i8[6];
      v67.i8[0] = *v20;
      v67.i8[1] = *v20;
      v67.i8[2] = *v20;
      v67.i8[3] = *v20;
      v69 = vorr_s8(vbic_s8(v63, vceqz_s8((int8x8_t)v67.u32[0])), (int8x8_t)v68);
      v70 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v66, *(int8x8_t *)a9.i8), (uint8x8_t)v67.u32[0]), v64);
      a13 = vrsraq_n_u16(v70, v70, 8uLL);
      v71 = vqrshrn_n_u16(a13, 8uLL);
      *(int8x8_t *)v72.i8 = v69;
      v72.u64[1] = (unint64_t)v69;
      *(int8x8_t *)v72.i8 = vbic_s8(v69, vceqz_s8(vqtbl1_s8(v72, (int8x8_t)0x707070703030303)));
      v73 = vminq_u16(vmull_u8(v71, *(uint8x8_t *)v72.i8), v64);
      *(int8x8_t *)a13.i8 = vbsl_s8(vceqz_s8(vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16(v71, a13, 8uLL), (int8x8_t)0x707070703030303)), v69, (int8x8_t)vqadd_u8(vqsub_u8(v71, vqrshrn_n_u16(vrsraq_n_u16(v73, v73, 8uLL), 8uLL)), *(uint8x8_t *)v72.i8));
      *(int8x8_t *)a13.i8 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a13, a9));
      *v19 = a13.i32[0];
      v74 = &v17[a6];
      v20 += a6;
      if ((unint64_t)v74 >= v18)
        v75 = -(uint64_t)a5;
      else
        v75 = 0;
      v17 = &v74[v75];
      v19 += a6;
      --v60;
    }
    while (v60);
  }
  *result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

unsigned __int32 **vec::template_mark_pixelmask_row<(CGCompositeOperation)15,_rgba8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, int8x16_t a9, double a10, double a11, double a12, double a13, uint16x8_t a14, uint64_t a15, unint64_t a16)
{
  int8x16_t v16;
  unint64_t v17;
  unsigned __int32 *v18;
  unint64_t v19;
  _DWORD *v20;
  char *v21;
  unsigned int v22;
  int8x16_t v23;
  unsigned int v24;
  int8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  uint16x8_t v28;
  __int32 v29;
  int8x16_t *v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int64_t v34;
  int64_t v35;
  int8x16_t *v36;
  int8x16_t *v37;
  int8x16_t *v38;
  int8x16_t *v39;
  uint64_t v40;
  int64_t v41;
  unint64_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  uint8x16_t v49;
  uint8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  uint16x8_t v54;
  uint16x8_t v55;
  uint64_t v56;
  int8x16_t v57;
  uint8x16_t v58;
  int8x16_t v59;
  uint16x8_t v60;
  uint16x8_t v61;
  uint16x8_t v62;
  uint16x8_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  uint8x16_t v67;
  uint8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  uint16x8_t v72;
  uint16x8_t v73;
  int8x16_t v74;
  uint64_t v75;
  unsigned int v76;
  int8x8_t v77;
  unsigned int v78;
  int8x8_t v79;
  uint16x8_t v80;
  uint16x8_t v81;
  unsigned int v82;
  uint16x8_t v83;
  unsigned int v84;
  int8x8_t v85;
  uint16x8_t v86;
  int8x8_t v87;
  int8x16_t v88;
  int8x8_t v89;
  int8x8_t v90;
  int8x16_t v91;
  uint16x8_t v92;
  unsigned __int32 *v93;
  uint64_t v94;
  int8x16x2_t v95;

  v17 = a16;
  v18 = *result;
  v19 = *a3;
  v20 = *a2;
  v21 = *a4;
  if (a16 < 4)
    goto LABEL_40;
  if (a7)
    v22 = 0;
  else
    v22 = -1;
  v23.i64[0] = 0xFF000000FF000000;
  v23.i64[1] = 0xFF000000FF000000;
  a9 = vandq_s8(vdupq_n_s8(v22), v23);
  if (a8)
    v24 = 0;
  else
    v24 = -1;
  v25 = vandq_s8(vdupq_n_s8(v24), v23);
  v26 = 4 * a6;
  v27 = 16 * a6;
  v28 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a14.i64[0] = -1;
  a14.i64[1] = -1;
  while (1)
  {
    v29 = *(_DWORD *)v21;
    if (*(_DWORD *)v21 == -1)
    {
      v36 = (int8x16_t *)&v21[v17];
      v37 = (int8x16_t *)v21;
      do
        v38 = v37++;
      while (v37 <= v36 && (vminvq_u8((uint8x16_t)vceqq_s8(*v38, (int8x16_t)a14)) & 0x80) != 0);
      do
      {
        v39 = v38;
        v38 = (int8x16_t *)((char *)v38 + 4);
      }
      while (v38 <= v36 && v39->i32[0] == -1);
      if (v39 < v36)
      {
        while (v39->u8[0] == 255)
        {
          v39 = (int8x16_t *)((char *)v39 + 1);
          if (v39 >= v36)
          {
            v39 = (int8x16_t *)&v21[v17];
            break;
          }
        }
      }
      v40 = 0;
      v41 = (char *)v39 - v21;
      v42 = (char *)v39 - v21;
      do
      {
        v43 = vorrq_s8(*(int8x16_t *)((char *)v18 + v40), a9);
        v44 = vorrq_s8(*(int8x16_t *)((char *)v20 + v40), v25);
        v45 = vqtbl1q_s8(v43, (int8x16_t)xmmword_185004A40);
        v46 = vqtbl1q_s8(v44, (int8x16_t)xmmword_185004A40);
        v47 = (int8x16_t)vminq_u8((uint8x16_t)v43, (uint8x16_t)v45);
        v48 = (int8x16_t)vminq_u8((uint8x16_t)v44, (uint8x16_t)v46);
        v49 = (uint8x16_t)vsubq_s8(v45, v47);
        v50 = (uint8x16_t)vsubq_s8(v46, v48);
        v51 = (int8x16_t)vcgtq_u8(vrhaddq_u8((uint8x16_t)v46, (uint8x16_t)0), (uint8x16_t)v48);
        v52 = (int8x16_t)vqaddq_u16(vmull_u8(*(uint8x8_t *)v49.i8, *(uint8x8_t *)v48.i8), vmull_u8(*(uint8x8_t *)v50.i8, *(uint8x8_t *)v47.i8));
        v53 = (int8x16_t)vqaddq_u16(vmull_high_u8(v49, (uint8x16_t)v48), vmull_high_u8(v50, (uint8x16_t)v47));
        v54 = vminq_u16((uint16x8_t)vbslq_s8((int8x16_t)vmovl_s8(*(int8x8_t *)v51.i8), v52, (int8x16_t)vqsubq_u16(vmull_u8(*(uint8x8_t *)v45.i8, *(uint8x8_t *)v46.i8), (uint16x8_t)v52)), v28);
        v55 = vminq_u16((uint16x8_t)vbslq_s8((int8x16_t)vmovl_high_s8(v51), v53, (int8x16_t)vqsubq_u16(vmull_high_u8((uint8x16_t)v45, (uint8x16_t)v46), (uint16x8_t)v53)), v28);
        v16 = vceqzq_s8(v45);
        *(int8x16_t *)((char *)v20 + v40) = vbslq_s8(v16, v44, vbslq_s8(vceqzq_s8(v46), v43, vsubq_s8(vaddq_s8(v48, v47), (int8x16_t)vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v54, v54, 8uLL), 8uLL), vrsraq_n_u16(v55, v55, 8uLL), 8uLL))));
        v21 += v26;
        v42 -= 4;
        v40 += v27;
      }
      while (v42 > 3);
      v20 = (_DWORD *)((char *)v20 + v40);
      v18 = (unsigned __int32 *)((char *)v18 + v40);
      v17 = v17 - v41 + v42;
      goto LABEL_37;
    }
    if (v29)
      break;
    v30 = (int8x16_t *)&v21[v17];
    v31 = (int8x16_t *)v21;
    do
      v32 = v31++;
    while (v31 <= v30 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v32)) & 0x80) != 0);
    do
    {
      v33 = v32;
      v32 = (int8x16_t *)((char *)v32 + 4);
    }
    while (v32 <= v30 && !v33->i32[0]);
    if (v33 < v30)
    {
      while (!v33->i8[0])
      {
        v33 = (int8x16_t *)((char *)v33 + 1);
        if (v33 >= v30)
        {
          v33 = (int8x16_t *)&v21[v17];
          break;
        }
      }
    }
    v34 = (char *)v33 - v21;
    v35 = ((char *)v33 - v21) * a6;
    v18 += v35;
    v20 += v35;
    v21 += v35;
    v17 -= v34;
LABEL_37:
    if (v17 <= 3)
      goto LABEL_40;
  }
  v56 = 0;
  while (1)
  {
    v16.i32[0] = v29;
    v57 = vqtbl1q_s8(v16, (int8x16_t)xmmword_185004A30);
    v58 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v18 + v56), a9);
    v59 = vorrq_s8(vbicq_s8(v25, vceqzq_s8(v57)), *(int8x16_t *)((char *)v20 + v56));
    v95.val[1] = (int8x16_t)vmull_u8(*(uint8x8_t *)v58.i8, *(uint8x8_t *)v57.i8);
    v60 = vmull_high_u8(v58, (uint8x16_t)v57);
    v61 = vminq_u16((uint16x8_t)v95.val[1], v28);
    v62 = vminq_u16(v60, v28);
    v95.val[0] = (int8x16_t)vrsraq_n_u16(v61, v61, 8uLL);
    v63 = vrsraq_n_u16(v62, v62, 8uLL);
    *(uint8x8_t *)v95.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v95.val[0], 8uLL);
    *(uint8x8_t *)v95.val[1].i8 = vqrshrn_n_u16(v63, 8uLL);
    v64 = vqtbl2q_s8(v95, (int8x16_t)xmmword_185004A50);
    v95.val[0] = (int8x16_t)vqrshrn_high_n_u16(*(uint8x8_t *)v95.val[0].i8, v63, 8uLL);
    v65 = vqtbl1q_s8(v59, (int8x16_t)xmmword_185004A40);
    v95.val[1] = (int8x16_t)vminq_u8((uint8x16_t)v95.val[0], (uint8x16_t)v64);
    v66 = (int8x16_t)vminq_u8((uint8x16_t)v59, (uint8x16_t)v65);
    v67 = (uint8x16_t)vsubq_s8(v64, v95.val[1]);
    v68 = (uint8x16_t)vsubq_s8(v65, v66);
    v69 = (int8x16_t)vcgtq_u8(vrhaddq_u8((uint8x16_t)v65, (uint8x16_t)0), (uint8x16_t)v66);
    v70 = (int8x16_t)vqaddq_u16(vmull_u8(*(uint8x8_t *)v67.i8, *(uint8x8_t *)v66.i8), vmull_u8(*(uint8x8_t *)v68.i8, *(uint8x8_t *)v95.val[1].i8));
    v71 = (int8x16_t)vqaddq_u16(vmull_high_u8(v67, (uint8x16_t)v66), vmull_high_u8(v68, (uint8x16_t)v95.val[1]));
    v72 = vminq_u16((uint16x8_t)vbslq_s8((int8x16_t)vmovl_s8(*(int8x8_t *)v69.i8), v70, (int8x16_t)vqsubq_u16(vmull_u8(*(uint8x8_t *)v64.i8, *(uint8x8_t *)v65.i8), (uint16x8_t)v70)), v28);
    v73 = vminq_u16((uint16x8_t)vbslq_s8((int8x16_t)vmovl_high_s8(v69), v71, (int8x16_t)vqsubq_u16(vmull_high_u8((uint8x16_t)v64, (uint8x16_t)v65), (uint16x8_t)v71)), v28);
    v74 = vbslq_s8(vceqzq_s8(v65), v95.val[0], vsubq_s8(vaddq_s8(v66, v95.val[1]), (int8x16_t)vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v72, v72, 8uLL), 8uLL), vrsraq_n_u16(v73, v73, 8uLL), 8uLL)));
    v16 = vceqzq_s8(v64);
    *(int8x16_t *)((char *)v20 + v56) = vbslq_s8(v16, v59, v74);
    v21 += v26;
    v17 -= 4;
    if (v17 < 4)
      break;
    v29 = *(_DWORD *)v21;
    v56 += v27;
    if ((*(_DWORD *)v21 - 1) >= 0xFFFFFFFE)
    {
      v18 = (unsigned __int32 *)((char *)v18 + v56);
      v20 = (_DWORD *)((char *)v20 + v56);
      goto LABEL_37;
    }
  }
  v18 = (unsigned __int32 *)((char *)v18 + v27 + v56);
  v20 = (_DWORD *)((char *)v20 + v27 + v56);
LABEL_40:
  v75 = v17 + a15;
  if (v75)
  {
    if (a7)
      v76 = 0;
    else
      v76 = -1;
    v77 = vdup_n_s8(v76);
    if (a8)
      v78 = 0;
    else
      v78 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(v77, (int8x8_t)0xFF000000FF000000);
    v79 = vand_s8(vdup_n_s8(v78), (int8x8_t)0xFF000000FF000000);
    v80 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a14.i32[0] = *v18;
      v81 = vmovl_u8(*(uint8x8_t *)a14.i8);
      LOBYTE(v82) = v81.i8[0];
      BYTE1(v82) = v81.i8[2];
      BYTE2(v82) = v81.i8[4];
      HIBYTE(v82) = v81.i8[6];
      v81.i32[0] = *v20;
      v83 = vmovl_u8(*(uint8x8_t *)v81.i8);
      LOBYTE(v84) = v83.i8[0];
      BYTE1(v84) = v83.i8[2];
      BYTE2(v84) = v83.i8[4];
      HIBYTE(v84) = v83.i8[6];
      v83.i8[0] = *v21;
      v83.i8[1] = *v21;
      v83.i8[2] = *v21;
      v83.i8[3] = *v21;
      v85 = vorr_s8(vbic_s8(v79, vceqz_s8((int8x8_t)v83.u32[0])), (int8x8_t)v84);
      v86 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v82, *(int8x8_t *)a9.i8), (uint8x8_t)v83.u32[0]), v80);
      a14 = vrsraq_n_u16(v86, v86, 8uLL);
      v87 = (int8x8_t)vqrshrn_n_u16(a14, 8uLL);
      *(int8x8_t *)a14.i8 = vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16((uint8x8_t)v87, a14, 8uLL), (int8x8_t)0x707070703030303);
      *(int8x8_t *)v88.i8 = v85;
      v88.u64[1] = (unint64_t)v85;
      *(int8x8_t *)v88.i8 = vqtbl1_s8(v88, (int8x8_t)0x707070703030303);
      v89 = (int8x8_t)vmin_u8((uint8x8_t)v87, *(uint8x8_t *)a14.i8);
      v90 = (int8x8_t)vmin_u8((uint8x8_t)v85, *(uint8x8_t *)v88.i8);
      v91 = (int8x16_t)vqaddq_u16(vmull_u8((uint8x8_t)vsub_s8(*(int8x8_t *)a14.i8, v89), (uint8x8_t)v90), vmull_u8((uint8x8_t)vsub_s8(*(int8x8_t *)v88.i8, v90), (uint8x8_t)v89));
      v92 = vminq_u16((uint16x8_t)vbslq_s8((int8x16_t)vmovl_s8((int8x8_t)vcgt_u8(vrhadd_u8(*(uint8x8_t *)v88.i8, 0), (uint8x8_t)v90)), v91, (int8x16_t)vqsubq_u16(vmull_u8(*(uint8x8_t *)a14.i8, *(uint8x8_t *)v88.i8), (uint16x8_t)v91)), v80);
      *(int8x8_t *)a14.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)a14.i8), v85, vbsl_s8(vceqz_s8(*(int8x8_t *)v88.i8), v87, vsub_s8(vadd_s8(v90, v89), (int8x8_t)vqrshrn_n_u16(vrsraq_n_u16(v92, v92, 8uLL), 8uLL))));
      *(int8x8_t *)a14.i8 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a14, a9));
      *v20 = a14.i32[0];
      v93 = &v18[a6];
      v21 += a6;
      if ((unint64_t)v93 >= v19)
        v94 = -(uint64_t)a5;
      else
        v94 = 0;
      v18 = &v93[v94];
      v20 += a6;
      --v75;
    }
    while (v75);
  }
  *result = v18;
  *a3 = v19;
  *a2 = v20;
  *a4 = v21;
  return result;
}

unsigned __int32 **vec::template_mark_pixelmask_row<(CGCompositeOperation)16,_rgba8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, int8x16_t a9, double a10, double a11, double a12, int8x16_t a13, uint64_t a14, unint64_t a15)
{
  int8x16_t v15;
  unint64_t v16;
  unsigned __int32 *v17;
  unint64_t v18;
  _DWORD *v19;
  char *v20;
  unsigned int v21;
  int8x16_t v22;
  unsigned int v23;
  int8x16_t v24;
  uint64_t v25;
  uint64_t v26;
  uint16x8_t v27;
  __int32 v28;
  int8x16_t *v29;
  int8x16_t *v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int64_t v33;
  int64_t v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  int8x16_t *v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  uint8x16_t v46;
  uint8x16_t v47;
  uint16x8_t v48;
  uint8x16_t v49;
  uint16x8_t v50;
  uint8x16_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  uint64_t v55;
  int8x16_t v56;
  uint8x16_t v57;
  int8x16_t v58;
  uint16x8_t v59;
  uint16x8_t v60;
  uint16x8_t v61;
  uint16x8_t v62;
  int8x16_t v63;
  int8x16_t v64;
  uint8x16_t v65;
  uint16x8_t v66;
  uint8x16_t v67;
  uint16x8_t v68;
  uint8x16_t v69;
  uint16x8_t v70;
  int8x16_t v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  int8x8_t v75;
  uint16x8_t v76;
  uint16x8_t v77;
  unsigned int v78;
  uint16x8_t v79;
  unsigned int v80;
  int8x8_t v81;
  uint16x8_t v82;
  uint16x8_t v83;
  int8x8_t v84;
  int8x16_t v85;
  uint8x8_t v86;
  uint8x8_t v87;
  uint16x8_t v88;
  unsigned __int32 *v89;
  uint64_t v90;
  int8x16x2_t v91;

  v16 = a15;
  v17 = *result;
  v18 = *a3;
  v19 = *a2;
  v20 = *a4;
  if (a15 < 4)
    goto LABEL_40;
  if (a7)
    v21 = 0;
  else
    v21 = -1;
  v22.i64[0] = 0xFF000000FF000000;
  v22.i64[1] = 0xFF000000FF000000;
  a9 = vandq_s8(vdupq_n_s8(v21), v22);
  if (a8)
    v23 = 0;
  else
    v23 = -1;
  v24 = vandq_s8(vdupq_n_s8(v23), v22);
  v25 = 4 * a6;
  v26 = 16 * a6;
  v27 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a13.i64[0] = -1;
  a13.i64[1] = -1;
  while (1)
  {
    v28 = *(_DWORD *)v20;
    if (*(_DWORD *)v20 == -1)
    {
      v35 = (int8x16_t *)&v20[v16];
      v36 = (int8x16_t *)v20;
      do
        v37 = v36++;
      while (v36 <= v35 && (vminvq_u8((uint8x16_t)vceqq_s8(*v37, a13)) & 0x80) != 0);
      do
      {
        v38 = v37;
        v37 = (int8x16_t *)((char *)v37 + 4);
      }
      while (v37 <= v35 && v38->i32[0] == -1);
      if (v38 < v35)
      {
        while (v38->u8[0] == 255)
        {
          v38 = (int8x16_t *)((char *)v38 + 1);
          if (v38 >= v35)
          {
            v38 = (int8x16_t *)&v20[v16];
            break;
          }
        }
      }
      v39 = 0;
      v40 = (char *)v38 - v20;
      v41 = (char *)v38 - v20;
      do
      {
        v42 = vorrq_s8(*(int8x16_t *)((char *)v17 + v39), a9);
        v43 = vorrq_s8(*(int8x16_t *)((char *)v19 + v39), v24);
        v44 = vqtbl1q_s8(v42, (int8x16_t)xmmword_185004A40);
        v45 = vqtbl1q_s8(v43, (int8x16_t)xmmword_185004A40);
        v46 = vminq_u8((uint8x16_t)v42, (uint8x16_t)v44);
        v47 = vminq_u8((uint8x16_t)v43, (uint8x16_t)v45);
        v48 = vmull_u8(*(uint8x8_t *)v46.i8, *(uint8x8_t *)v45.i8);
        v49 = (uint8x16_t)vmvnq_s8(v45);
        v50 = vmull_u8(*(uint8x8_t *)v46.i8, *(uint8x8_t *)v49.i8);
        v51 = (uint8x16_t)vmvnq_s8(v44);
        v52 = vqaddq_u16(vqaddq_u16(vminq_u16(vmull_high_u8(v47, (uint8x16_t)v44), vmull_high_u8(v46, (uint8x16_t)v45)), vmull_high_u8(v46, v49)), vmull_high_u8(v47, v51));
        v53 = vminq_u16(vqaddq_u16(vqaddq_u16(vminq_u16(vmull_u8(*(uint8x8_t *)v47.i8, *(uint8x8_t *)v44.i8), v48), v50), vmull_u8(*(uint8x8_t *)v47.i8, *(uint8x8_t *)v51.i8)), v27);
        v54 = vminq_u16(v52, v27);
        v15 = vceqzq_s8(v44);
        *(int8x16_t *)((char *)v19 + v39) = vbslq_s8(v15, v43, vbslq_s8(vceqzq_s8(v45), v42, (int8x16_t)vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v53, v53, 8uLL), 8uLL), vrsraq_n_u16(v54, v54, 8uLL), 8uLL)));
        v20 += v25;
        v41 -= 4;
        v39 += v26;
      }
      while (v41 > 3);
      v19 = (_DWORD *)((char *)v19 + v39);
      v17 = (unsigned __int32 *)((char *)v17 + v39);
      v16 = v16 - v40 + v41;
      goto LABEL_37;
    }
    if (v28)
      break;
    v29 = (int8x16_t *)&v20[v16];
    v30 = (int8x16_t *)v20;
    do
      v31 = v30++;
    while (v30 <= v29 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v31)) & 0x80) != 0);
    do
    {
      v32 = v31;
      v31 = (int8x16_t *)((char *)v31 + 4);
    }
    while (v31 <= v29 && !v32->i32[0]);
    if (v32 < v29)
    {
      while (!v32->i8[0])
      {
        v32 = (int8x16_t *)((char *)v32 + 1);
        if (v32 >= v29)
        {
          v32 = (int8x16_t *)&v20[v16];
          break;
        }
      }
    }
    v33 = (char *)v32 - v20;
    v34 = ((char *)v32 - v20) * a6;
    v17 += v34;
    v19 += v34;
    v20 += v34;
    v16 -= v33;
LABEL_37:
    if (v16 <= 3)
      goto LABEL_40;
  }
  v55 = 0;
  while (1)
  {
    v15.i32[0] = v28;
    v56 = vqtbl1q_s8(v15, (int8x16_t)xmmword_185004A30);
    v57 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v17 + v55), a9);
    v58 = vorrq_s8(vbicq_s8(v24, vceqzq_s8(v56)), *(int8x16_t *)((char *)v19 + v55));
    v91.val[1] = (int8x16_t)vmull_u8(*(uint8x8_t *)v57.i8, *(uint8x8_t *)v56.i8);
    v59 = vmull_high_u8(v57, (uint8x16_t)v56);
    v60 = vminq_u16((uint16x8_t)v91.val[1], v27);
    v61 = vminq_u16(v59, v27);
    v91.val[0] = (int8x16_t)vrsraq_n_u16(v60, v60, 8uLL);
    v62 = vrsraq_n_u16(v61, v61, 8uLL);
    *(uint8x8_t *)v91.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v91.val[0], 8uLL);
    *(uint8x8_t *)v91.val[1].i8 = vqrshrn_n_u16(v62, 8uLL);
    v63 = vqtbl2q_s8(v91, (int8x16_t)xmmword_185004A50);
    v91.val[0] = (int8x16_t)vqrshrn_high_n_u16(*(uint8x8_t *)v91.val[0].i8, v62, 8uLL);
    v64 = vqtbl1q_s8(v58, (int8x16_t)xmmword_185004A40);
    v91.val[1] = (int8x16_t)vminq_u8((uint8x16_t)v91.val[0], (uint8x16_t)v63);
    v65 = vminq_u8((uint8x16_t)v58, (uint8x16_t)v64);
    v66 = vmull_u8(*(uint8x8_t *)v91.val[1].i8, *(uint8x8_t *)v64.i8);
    v67 = (uint8x16_t)vmvnq_s8(v64);
    v68 = vmull_u8(*(uint8x8_t *)v91.val[1].i8, *(uint8x8_t *)v67.i8);
    v69 = (uint8x16_t)vmvnq_s8(v63);
    v91.val[1] = (int8x16_t)vqaddq_u16(vqaddq_u16(vminq_u16(vmull_high_u8(v65, (uint8x16_t)v63), vmull_high_u8((uint8x16_t)v91.val[1], (uint8x16_t)v64)), vmull_high_u8((uint8x16_t)v91.val[1], v67)), vmull_high_u8(v65, v69));
    v70 = vminq_u16(vqaddq_u16(vqaddq_u16(vminq_u16(vmull_u8(*(uint8x8_t *)v65.i8, *(uint8x8_t *)v63.i8), v66), v68), vmull_u8(*(uint8x8_t *)v65.i8, *(uint8x8_t *)v69.i8)), v27);
    v91.val[1] = (int8x16_t)vminq_u16((uint16x8_t)v91.val[1], v27);
    v71 = vbslq_s8(vceqzq_s8(v64), v91.val[0], (int8x16_t)vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v70, v70, 8uLL), 8uLL), vrsraq_n_u16((uint16x8_t)v91.val[1], (uint16x8_t)v91.val[1], 8uLL), 8uLL));
    v15 = vceqzq_s8(v63);
    *(int8x16_t *)((char *)v19 + v55) = vbslq_s8(v15, v58, v71);
    v20 += v25;
    v16 -= 4;
    if (v16 < 4)
      break;
    v28 = *(_DWORD *)v20;
    v55 += v26;
    if ((*(_DWORD *)v20 - 1) >= 0xFFFFFFFE)
    {
      v17 = (unsigned __int32 *)((char *)v17 + v55);
      v19 = (_DWORD *)((char *)v19 + v55);
      goto LABEL_37;
    }
  }
  v17 = (unsigned __int32 *)((char *)v17 + v26 + v55);
  v19 = (_DWORD *)((char *)v19 + v26 + v55);
LABEL_40:
  v72 = v16 + a14;
  if (v72)
  {
    if (a7)
      v73 = 0;
    else
      v73 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v73), (int8x8_t)0xFF000000FF000000);
    if (a8)
      v74 = 0;
    else
      v74 = -1;
    v75 = vand_s8(vdup_n_s8(v74), (int8x8_t)0xFF000000FF000000);
    v76 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a13.i32[0] = *v17;
      v77 = vmovl_u8(*(uint8x8_t *)a13.i8);
      LOBYTE(v78) = v77.i8[0];
      BYTE1(v78) = v77.i8[2];
      BYTE2(v78) = v77.i8[4];
      HIBYTE(v78) = v77.i8[6];
      v77.i32[0] = *v19;
      v79 = vmovl_u8(*(uint8x8_t *)v77.i8);
      LOBYTE(v80) = v79.i8[0];
      BYTE1(v80) = v79.i8[2];
      BYTE2(v80) = v79.i8[4];
      HIBYTE(v80) = v79.i8[6];
      v79.i8[0] = *v20;
      v79.i8[1] = *v20;
      v79.i8[2] = *v20;
      v79.i8[3] = *v20;
      v81 = vorr_s8(vbic_s8(v75, vceqz_s8((int8x8_t)v79.u32[0])), (int8x8_t)v80);
      v82 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v78, *(int8x8_t *)a9.i8), (uint8x8_t)v79.u32[0]), v76);
      v83 = vrsraq_n_u16(v82, v82, 8uLL);
      v84 = (int8x8_t)vqrshrn_n_u16(v83, 8uLL);
      v85 = (int8x16_t)vqrshrn_high_n_u16((uint8x8_t)v84, v83, 8uLL);
      *(int8x8_t *)v83.i8 = v81;
      a13.u64[1] = (unint64_t)v81;
      *(int8x8_t *)v85.i8 = vqtbl1_s8(v85, (int8x8_t)0x707070703030303);
      *(int8x8_t *)a13.i8 = vqtbl1_s8(a13, (int8x8_t)0x707070703030303);
      v86 = vmin_u8((uint8x8_t)v84, *(uint8x8_t *)v85.i8);
      v87 = vmin_u8((uint8x8_t)v81, *(uint8x8_t *)a13.i8);
      v88 = vminq_u16(vqaddq_u16(vqaddq_u16(vminq_u16(vmull_u8(v86, *(uint8x8_t *)a13.i8), vmull_u8(v87, *(uint8x8_t *)v85.i8)), vmull_u8(v86, (uint8x8_t)vmvn_s8(*(int8x8_t *)a13.i8))), vmull_u8(v87, (uint8x8_t)vmvn_s8(*(int8x8_t *)v85.i8))), v76);
      *(int8x8_t *)a13.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v85.i8), v81, vbsl_s8(vceqz_s8(*(int8x8_t *)a13.i8), v84, (int8x8_t)vqrshrn_n_u16(vrsraq_n_u16(v88, v88, 8uLL), 8uLL)));
      *(int8x8_t *)a13.i8 = vmovn_s16((int16x8_t)vzip1q_s8(a13, a9));
      *v19 = a13.i32[0];
      v89 = &v17[a6];
      v20 += a6;
      if ((unint64_t)v89 >= v18)
        v90 = -(uint64_t)a5;
      else
        v90 = 0;
      v17 = &v89[v90];
      v19 += a6;
      --v72;
    }
    while (v72);
  }
  *result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

unsigned __int32 **vec::template_mark_pixelmask_row<(CGCompositeOperation)17,_rgba8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, int8x16_t a9, double a10, double a11, double a12, int8x16_t a13, uint64_t a14, unint64_t a15)
{
  int8x16_t v15;
  unint64_t v16;
  unsigned __int32 *v17;
  unint64_t v18;
  _DWORD *v19;
  char *v20;
  unsigned int v21;
  int8x16_t v22;
  unsigned int v23;
  int8x16_t v24;
  uint64_t v25;
  uint64_t v26;
  uint16x8_t v27;
  __int32 v28;
  int8x16_t *v29;
  int8x16_t *v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int64_t v33;
  int64_t v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  int8x16_t *v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  uint8x16_t v46;
  uint8x16_t v47;
  uint16x8_t v48;
  uint8x16_t v49;
  uint16x8_t v50;
  uint8x16_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  uint64_t v55;
  int8x16_t v56;
  uint8x16_t v57;
  int8x16_t v58;
  uint16x8_t v59;
  uint16x8_t v60;
  uint16x8_t v61;
  uint16x8_t v62;
  int8x16_t v63;
  int8x16_t v64;
  uint8x16_t v65;
  uint16x8_t v66;
  uint8x16_t v67;
  uint16x8_t v68;
  uint8x16_t v69;
  uint16x8_t v70;
  int8x16_t v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  int8x8_t v75;
  uint16x8_t v76;
  uint16x8_t v77;
  unsigned int v78;
  uint16x8_t v79;
  unsigned int v80;
  int8x8_t v81;
  uint16x8_t v82;
  uint16x8_t v83;
  int8x8_t v84;
  int8x16_t v85;
  uint8x8_t v86;
  uint8x8_t v87;
  uint16x8_t v88;
  unsigned __int32 *v89;
  uint64_t v90;
  int8x16x2_t v91;

  v16 = a15;
  v17 = *result;
  v18 = *a3;
  v19 = *a2;
  v20 = *a4;
  if (a15 < 4)
    goto LABEL_40;
  if (a7)
    v21 = 0;
  else
    v21 = -1;
  v22.i64[0] = 0xFF000000FF000000;
  v22.i64[1] = 0xFF000000FF000000;
  a9 = vandq_s8(vdupq_n_s8(v21), v22);
  if (a8)
    v23 = 0;
  else
    v23 = -1;
  v24 = vandq_s8(vdupq_n_s8(v23), v22);
  v25 = 4 * a6;
  v26 = 16 * a6;
  v27 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a13.i64[0] = -1;
  a13.i64[1] = -1;
  while (1)
  {
    v28 = *(_DWORD *)v20;
    if (*(_DWORD *)v20 == -1)
    {
      v35 = (int8x16_t *)&v20[v16];
      v36 = (int8x16_t *)v20;
      do
        v37 = v36++;
      while (v36 <= v35 && (vminvq_u8((uint8x16_t)vceqq_s8(*v37, a13)) & 0x80) != 0);
      do
      {
        v38 = v37;
        v37 = (int8x16_t *)((char *)v37 + 4);
      }
      while (v37 <= v35 && v38->i32[0] == -1);
      if (v38 < v35)
      {
        while (v38->u8[0] == 255)
        {
          v38 = (int8x16_t *)((char *)v38 + 1);
          if (v38 >= v35)
          {
            v38 = (int8x16_t *)&v20[v16];
            break;
          }
        }
      }
      v39 = 0;
      v40 = (char *)v38 - v20;
      v41 = (char *)v38 - v20;
      do
      {
        v42 = vorrq_s8(*(int8x16_t *)((char *)v17 + v39), a9);
        v43 = vorrq_s8(*(int8x16_t *)((char *)v19 + v39), v24);
        v44 = vqtbl1q_s8(v42, (int8x16_t)xmmword_185004A40);
        v45 = vqtbl1q_s8(v43, (int8x16_t)xmmword_185004A40);
        v46 = vminq_u8((uint8x16_t)v42, (uint8x16_t)v44);
        v47 = vminq_u8((uint8x16_t)v43, (uint8x16_t)v45);
        v48 = vmull_u8(*(uint8x8_t *)v46.i8, *(uint8x8_t *)v45.i8);
        v49 = (uint8x16_t)vmvnq_s8(v45);
        v50 = vmull_u8(*(uint8x8_t *)v46.i8, *(uint8x8_t *)v49.i8);
        v51 = (uint8x16_t)vmvnq_s8(v44);
        v52 = vqaddq_u16(vqaddq_u16(vmaxq_u16(vmull_high_u8(v46, (uint8x16_t)v45), vmull_high_u8(v47, (uint8x16_t)v44)), vmull_high_u8(v46, v49)), vmull_high_u8(v47, v51));
        v53 = vminq_u16(vqaddq_u16(vqaddq_u16(vmaxq_u16(v48, vmull_u8(*(uint8x8_t *)v47.i8, *(uint8x8_t *)v44.i8)), v50), vmull_u8(*(uint8x8_t *)v47.i8, *(uint8x8_t *)v51.i8)), v27);
        v54 = vminq_u16(v52, v27);
        v15 = vceqzq_s8(v44);
        *(int8x16_t *)((char *)v19 + v39) = vbslq_s8(v15, v43, vbslq_s8(vceqzq_s8(v45), v42, (int8x16_t)vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v53, v53, 8uLL), 8uLL), vrsraq_n_u16(v54, v54, 8uLL), 8uLL)));
        v20 += v25;
        v41 -= 4;
        v39 += v26;
      }
      while (v41 > 3);
      v19 = (_DWORD *)((char *)v19 + v39);
      v17 = (unsigned __int32 *)((char *)v17 + v39);
      v16 = v16 - v40 + v41;
      goto LABEL_37;
    }
    if (v28)
      break;
    v29 = (int8x16_t *)&v20[v16];
    v30 = (int8x16_t *)v20;
    do
      v31 = v30++;
    while (v30 <= v29 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v31)) & 0x80) != 0);
    do
    {
      v32 = v31;
      v31 = (int8x16_t *)((char *)v31 + 4);
    }
    while (v31 <= v29 && !v32->i32[0]);
    if (v32 < v29)
    {
      while (!v32->i8[0])
      {
        v32 = (int8x16_t *)((char *)v32 + 1);
        if (v32 >= v29)
        {
          v32 = (int8x16_t *)&v20[v16];
          break;
        }
      }
    }
    v33 = (char *)v32 - v20;
    v34 = ((char *)v32 - v20) * a6;
    v17 += v34;
    v19 += v34;
    v20 += v34;
    v16 -= v33;
LABEL_37:
    if (v16 <= 3)
      goto LABEL_40;
  }
  v55 = 0;
  while (1)
  {
    v15.i32[0] = v28;
    v56 = vqtbl1q_s8(v15, (int8x16_t)xmmword_185004A30);
    v57 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v17 + v55), a9);
    v58 = vorrq_s8(vbicq_s8(v24, vceqzq_s8(v56)), *(int8x16_t *)((char *)v19 + v55));
    v91.val[1] = (int8x16_t)vmull_u8(*(uint8x8_t *)v57.i8, *(uint8x8_t *)v56.i8);
    v59 = vmull_high_u8(v57, (uint8x16_t)v56);
    v60 = vminq_u16((uint16x8_t)v91.val[1], v27);
    v61 = vminq_u16(v59, v27);
    v91.val[0] = (int8x16_t)vrsraq_n_u16(v60, v60, 8uLL);
    v62 = vrsraq_n_u16(v61, v61, 8uLL);
    *(uint8x8_t *)v91.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v91.val[0], 8uLL);
    *(uint8x8_t *)v91.val[1].i8 = vqrshrn_n_u16(v62, 8uLL);
    v63 = vqtbl2q_s8(v91, (int8x16_t)xmmword_185004A50);
    v91.val[0] = (int8x16_t)vqrshrn_high_n_u16(*(uint8x8_t *)v91.val[0].i8, v62, 8uLL);
    v64 = vqtbl1q_s8(v58, (int8x16_t)xmmword_185004A40);
    v91.val[1] = (int8x16_t)vminq_u8((uint8x16_t)v91.val[0], (uint8x16_t)v63);
    v65 = vminq_u8((uint8x16_t)v58, (uint8x16_t)v64);
    v66 = vmull_u8(*(uint8x8_t *)v91.val[1].i8, *(uint8x8_t *)v64.i8);
    v67 = (uint8x16_t)vmvnq_s8(v64);
    v68 = vmull_u8(*(uint8x8_t *)v91.val[1].i8, *(uint8x8_t *)v67.i8);
    v69 = (uint8x16_t)vmvnq_s8(v63);
    v91.val[1] = (int8x16_t)vqaddq_u16(vqaddq_u16(vmaxq_u16(vmull_high_u8((uint8x16_t)v91.val[1], (uint8x16_t)v64), vmull_high_u8(v65, (uint8x16_t)v63)), vmull_high_u8((uint8x16_t)v91.val[1], v67)), vmull_high_u8(v65, v69));
    v70 = vminq_u16(vqaddq_u16(vqaddq_u16(vmaxq_u16(v66, vmull_u8(*(uint8x8_t *)v65.i8, *(uint8x8_t *)v63.i8)), v68), vmull_u8(*(uint8x8_t *)v65.i8, *(uint8x8_t *)v69.i8)), v27);
    v91.val[1] = (int8x16_t)vminq_u16((uint16x8_t)v91.val[1], v27);
    v71 = vbslq_s8(vceqzq_s8(v64), v91.val[0], (int8x16_t)vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v70, v70, 8uLL), 8uLL), vrsraq_n_u16((uint16x8_t)v91.val[1], (uint16x8_t)v91.val[1], 8uLL), 8uLL));
    v15 = vceqzq_s8(v63);
    *(int8x16_t *)((char *)v19 + v55) = vbslq_s8(v15, v58, v71);
    v20 += v25;
    v16 -= 4;
    if (v16 < 4)
      break;
    v28 = *(_DWORD *)v20;
    v55 += v26;
    if ((*(_DWORD *)v20 - 1) >= 0xFFFFFFFE)
    {
      v17 = (unsigned __int32 *)((char *)v17 + v55);
      v19 = (_DWORD *)((char *)v19 + v55);
      goto LABEL_37;
    }
  }
  v17 = (unsigned __int32 *)((char *)v17 + v26 + v55);
  v19 = (_DWORD *)((char *)v19 + v26 + v55);
LABEL_40:
  v72 = v16 + a14;
  if (v72)
  {
    if (a7)
      v73 = 0;
    else
      v73 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v73), (int8x8_t)0xFF000000FF000000);
    if (a8)
      v74 = 0;
    else
      v74 = -1;
    v75 = vand_s8(vdup_n_s8(v74), (int8x8_t)0xFF000000FF000000);
    v76 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a13.i32[0] = *v17;
      v77 = vmovl_u8(*(uint8x8_t *)a13.i8);
      LOBYTE(v78) = v77.i8[0];
      BYTE1(v78) = v77.i8[2];
      BYTE2(v78) = v77.i8[4];
      HIBYTE(v78) = v77.i8[6];
      v77.i32[0] = *v19;
      v79 = vmovl_u8(*(uint8x8_t *)v77.i8);
      LOBYTE(v80) = v79.i8[0];
      BYTE1(v80) = v79.i8[2];
      BYTE2(v80) = v79.i8[4];
      HIBYTE(v80) = v79.i8[6];
      v79.i8[0] = *v20;
      v79.i8[1] = *v20;
      v79.i8[2] = *v20;
      v79.i8[3] = *v20;
      v81 = vorr_s8(vbic_s8(v75, vceqz_s8((int8x8_t)v79.u32[0])), (int8x8_t)v80);
      v82 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v78, *(int8x8_t *)a9.i8), (uint8x8_t)v79.u32[0]), v76);
      v83 = vrsraq_n_u16(v82, v82, 8uLL);
      v84 = (int8x8_t)vqrshrn_n_u16(v83, 8uLL);
      v85 = (int8x16_t)vqrshrn_high_n_u16((uint8x8_t)v84, v83, 8uLL);
      *(int8x8_t *)v83.i8 = v81;
      a13.u64[1] = (unint64_t)v81;
      *(int8x8_t *)v85.i8 = vqtbl1_s8(v85, (int8x8_t)0x707070703030303);
      *(int8x8_t *)a13.i8 = vqtbl1_s8(a13, (int8x8_t)0x707070703030303);
      v86 = vmin_u8((uint8x8_t)v84, *(uint8x8_t *)v85.i8);
      v87 = vmin_u8((uint8x8_t)v81, *(uint8x8_t *)a13.i8);
      v88 = vminq_u16(vqaddq_u16(vqaddq_u16(vmaxq_u16(vmull_u8(v86, *(uint8x8_t *)a13.i8), vmull_u8(v87, *(uint8x8_t *)v85.i8)), vmull_u8(v86, (uint8x8_t)vmvn_s8(*(int8x8_t *)a13.i8))), vmull_u8(v87, (uint8x8_t)vmvn_s8(*(int8x8_t *)v85.i8))), v76);
      *(int8x8_t *)a13.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v85.i8), v81, vbsl_s8(vceqz_s8(*(int8x8_t *)a13.i8), v84, (int8x8_t)vqrshrn_n_u16(vrsraq_n_u16(v88, v88, 8uLL), 8uLL)));
      *(int8x8_t *)a13.i8 = vmovn_s16((int16x8_t)vzip1q_s8(a13, a9));
      *v19 = a13.i32[0];
      v89 = &v17[a6];
      v20 += a6;
      if ((unint64_t)v89 >= v18)
        v90 = -(uint64_t)a5;
      else
        v90 = 0;
      v17 = &v89[v90];
      v19 += a6;
      --v72;
    }
    while (v72);
  }
  *result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

_DWORD **vec::template_mark_pixelmask_row<(CGCompositeOperation)18,_rgba8_t>(_DWORD **result, _DWORD **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, int8x16_t a9, double a10, double a11, double a12, uint8x8_t a13, uint64_t a14, unint64_t a15)
{
  int8x16_t v15;
  int8x16_t v16;
  uint8x16_t v17;
  unint64_t v18;
  _DWORD *v19;
  unint64_t v20;
  _DWORD *v21;
  char *v22;
  unsigned int v23;
  int8x16_t v24;
  unsigned int v25;
  int8x16_t v26;
  uint64_t v27;
  uint64_t v28;
  uint16x8_t v29;
  int8x16_t v30;
  __int32 v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  int8x16_t *v35;
  int64_t v36;
  int64_t v37;
  int8x16_t *v38;
  int8x16_t *v39;
  int8x16_t *v40;
  int8x16_t *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  uint8x16_t v49;
  int8x16_t v50;
  uint8x16_t v51;
  uint16x8_t v52;
  unsigned __int128 v53;
  int8x16_t v54;
  int8x16_t v55;
  uint64_t v56;
  uint64_t v57;
  uint16x8_t v58;
  uint16x8_t v59;
  int8x8_t v60;
  int8x16_t v61;
  int8x16_t v62;
  uint8x16_t v63;
  uint16x8_t v64;
  uint16x8_t v65;
  uint16x8_t v66;
  uint16x8_t v67;
  uint16x8_t v68;
  uint8x16_t v69;
  uint64_t v70;
  int8x16_t v71;
  uint8x16_t v72;
  int8x16_t v73;
  uint16x8_t v74;
  uint16x8_t v75;
  uint16x8_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  uint8x16_t v80;
  int8x16_t v81;
  uint8x16_t v82;
  uint16x8_t v83;
  unsigned __int128 v84;
  int8x16_t v85;
  int8x16_t v86;
  uint64_t v87;
  uint64_t v88;
  uint16x8_t v89;
  uint16x8_t v90;
  int8x8_t v91;
  int8x16_t v92;
  int8x16_t v93;
  uint8x16_t v94;
  uint16x8_t v95;
  uint16x8_t v96;
  uint16x8_t v97;
  uint16x8_t v98;
  uint16x8_t v99;
  uint8x16_t v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int v103;
  int8x8_t v104;
  uint16x8_t v105;
  uint16x8_t v106;
  unsigned int v107;
  int8x16_t v108;
  unsigned int v109;
  unsigned int v110;
  uint16x8_t v111;
  uint16x8_t v112;
  int8x8_t v113;
  int8x16_t v114;
  uint8x8_t v115;
  int8x8_t v116;
  uint16x8_t v117;
  int8x16_t v118;
  int8x8_t v119;
  uint16x8_t v120;
  uint16x8_t v121;
  uint16x8_t v122;
  uint8x8_t v123;
  _DWORD *v124;
  uint64_t v125;
  int8x16x2_t v126;
  int8x16x2_t v127;

  v18 = a15;
  v19 = *result;
  v20 = *a3;
  v21 = *a2;
  v22 = *a4;
  if (a15 < 4)
    goto LABEL_40;
  if (a7)
    v23 = 0;
  else
    v23 = -1;
  v24.i64[0] = 0xFF000000FF000000;
  v24.i64[1] = 0xFF000000FF000000;
  a9 = vandq_s8(vdupq_n_s8(v23), v24);
  if (a8)
    v25 = 0;
  else
    v25 = -1;
  v26 = vandq_s8(vdupq_n_s8(v25), v24);
  v27 = 4 * a6;
  v28 = 16 * a6;
  v29 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a13.i32[1] = 117901063;
  v30.i64[0] = -1;
  v30.i64[1] = -1;
  while (1)
  {
    v31 = *(_DWORD *)v22;
    if (*(_DWORD *)v22 == -1)
    {
      v38 = (int8x16_t *)&v22[v18];
      v39 = (int8x16_t *)v22;
      do
        v40 = v39++;
      while (v39 <= v38 && (vminvq_u8((uint8x16_t)vceqq_s8(*v40, v30)) & 0x80) != 0);
      do
      {
        v41 = v40;
        v40 = (int8x16_t *)((char *)v40 + 4);
      }
      while (v40 <= v38 && v41->i32[0] == -1);
      if (v41 < v38)
      {
        while (v41->u8[0] == 255)
        {
          v41 = (int8x16_t *)((char *)v41 + 1);
          if (v41 >= v38)
          {
            v41 = (int8x16_t *)&v22[v18];
            break;
          }
        }
      }
      v42 = 0;
      v43 = (char *)v41 - v22;
      v44 = v43;
      do
      {
        v45 = vorrq_s8(*(int8x16_t *)((char *)v19 + v42), a9);
        v46 = vorrq_s8(*(int8x16_t *)((char *)v21 + v42), v26);
        v47 = vqtbl1q_s8(v45, (int8x16_t)xmmword_185004A40);
        v48 = vqtbl1q_s8(v46, (int8x16_t)xmmword_185004A40);
        v49 = vminq_u8((uint8x16_t)v45, (uint8x16_t)v47);
        v50 = (int8x16_t)vminq_u8((uint8x16_t)v46, (uint8x16_t)v48);
        v51 = (uint8x16_t)vmvnq_s8(v48);
        v52 = vmull_u8(*(uint8x8_t *)v49.i8, *(uint8x8_t *)v51.i8);
        v126.val[1] = (int8x16_t)vmull_high_u8(v49, v51);
        v53 = *(_OWORD *)&v49 & __PAIR128__(0xFFFFFF00FFFFFFLL, 0xFFFFFF00FFFFFFLL);
        v54 = vbicq_s8(vtstq_s8(v50, v50), (int8x16_t)vcgtq_u8((uint8x16_t)v47, (uint8x16_t)v53));
        v55 = vorrq_s8((int8x16_t)vqsubq_u8((uint8x16_t)v47, (uint8x16_t)v53), vceqzq_s8(v50));
        v56 = *(_QWORD *)&vzip1_s8(*(int8x8_t *)v55.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
        v57 = *(_QWORD *)&vzip2_s8(*(int8x8_t *)v55.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
        v55.i64[0] = vextq_s8(v55, v55, 8uLL).u64[0];
        v58 = vmull_u8(*(uint8x8_t *)v47.i8, *(uint8x8_t *)v47.i8);
        v59 = vmull_high_u8((uint8x16_t)v47, (uint8x16_t)v47);
        v60 = (int8x8_t)vextq_s8(v50, v50, 8uLL).u64[0];
        v61 = (int8x16_t)vqmovun_high_s32(vqmovun_s32(vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(*(int8x8_t *)v50.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v58.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v56))))), vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(*(int8x8_t *)v50.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_high_u16(v58))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v57)))));
        v62 = (int8x16_t)vqmovun_high_s32(vqmovun_s32(vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(v60, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v59.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(*(int8x8_t *)v55.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))), vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(v60, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_high_u16(v59))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(*(int8x8_t *)v55.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))))));
        v63 = (uint8x16_t)vmvnq_s8(v47);
        v64 = vmull_u8(*(uint8x8_t *)v50.i8, *(uint8x8_t *)v63.i8);
        v65 = vmull_high_u8((uint8x16_t)v50, v63);
        v66 = vminq_u16(vqaddq_u16(vqaddq_u16((uint16x8_t)vorrq_s8(v61, (int8x16_t)vmovl_s8(*(int8x8_t *)v54.i8)), v64), v52), v29);
        v67 = vminq_u16(vqaddq_u16(vqaddq_u16((uint16x8_t)vorrq_s8(v62, (int8x16_t)vmovl_high_s8(v54)), v65), (uint16x8_t)v126.val[1]), v29);
        v126.val[0] = (int8x16_t)vrsraq_n_u16(v66, v66, 8uLL);
        v68 = vrsraq_n_u16(v67, v67, 8uLL);
        *(uint8x8_t *)v126.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v126.val[0], 8uLL);
        *(uint8x8_t *)v126.val[1].i8 = vqrshrn_n_u16(v68, 8uLL);
        v69 = (uint8x16_t)vqtbl2q_s8(v126, (int8x16_t)xmmword_185004A50);
        v17 = vqrshrn_high_n_u16(*(uint8x8_t *)v126.val[0].i8, v68, 8uLL);
        v16 = (int8x16_t)vminq_u8(v17, v69);
        v15 = vceqzq_s8(v47);
        *(int8x16_t *)((char *)v21 + v42) = vbslq_s8(v15, v46, vbslq_s8(vceqzq_s8(v48), v45, v16));
        v22 += v27;
        v44 -= 4;
        v42 += v28;
      }
      while (v44 > 3);
      v21 = (_DWORD *)((char *)v21 + v42);
      v19 = (_DWORD *)((char *)v19 + v42);
      v18 = v18 - v43 + v44;
      goto LABEL_37;
    }
    if (v31)
      break;
    v32 = (int8x16_t *)&v22[v18];
    v33 = (int8x16_t *)v22;
    do
      v34 = v33++;
    while (v33 <= v32 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v34)) & 0x80) != 0);
    do
    {
      v35 = v34;
      v34 = (int8x16_t *)((char *)v34 + 4);
    }
    while (v34 <= v32 && !v35->i32[0]);
    if (v35 < v32)
    {
      while (!v35->i8[0])
      {
        v35 = (int8x16_t *)((char *)v35 + 1);
        if (v35 >= v32)
        {
          v35 = (int8x16_t *)&v22[v18];
          break;
        }
      }
    }
    v36 = (char *)v35 - v22;
    v37 = ((char *)v35 - v22) * a6;
    v19 += v37;
    v21 += v37;
    v22 += v37;
    v18 -= v36;
LABEL_37:
    if (v18 <= 3)
      goto LABEL_40;
  }
  v70 = 0;
  while (1)
  {
    v15.i32[0] = v31;
    v71 = vqtbl1q_s8(v15, (int8x16_t)xmmword_185004A30);
    v72 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v19 + v70), a9);
    v73 = vorrq_s8(vbicq_s8(v26, vceqzq_s8(v71)), *(int8x16_t *)((char *)v21 + v70));
    v74 = vminq_u16(vmull_u8(*(uint8x8_t *)v72.i8, *(uint8x8_t *)v71.i8), v29);
    v75 = vminq_u16(vmull_high_u8(v72, (uint8x16_t)v71), v29);
    v76 = vrsraq_n_u16(v75, v75, 8uLL);
    *(uint8x8_t *)v16.i8 = vqrshrn_n_u16(vrsraq_n_u16(v74, v74, 8uLL), 8uLL);
    *(uint8x8_t *)v17.i8 = vqrshrn_n_u16(v76, 8uLL);
    v77 = vqtbl2q_s8(*(int8x16x2_t *)v16.i8, (int8x16_t)xmmword_185004A50);
    v78 = (int8x16_t)vqrshrn_high_n_u16(*(uint8x8_t *)v16.i8, v76, 8uLL);
    v79 = vqtbl1q_s8(v73, (int8x16_t)xmmword_185004A40);
    v80 = vminq_u8((uint8x16_t)v78, (uint8x16_t)v77);
    v81 = (int8x16_t)vminq_u8((uint8x16_t)v73, (uint8x16_t)v79);
    v82 = (uint8x16_t)vmvnq_s8(v79);
    v83 = vmull_u8(*(uint8x8_t *)v80.i8, *(uint8x8_t *)v82.i8);
    v127.val[1] = (int8x16_t)vmull_high_u8(v80, v82);
    v84 = *(_OWORD *)&v80 & __PAIR128__(0xFFFFFF00FFFFFFLL, 0xFFFFFF00FFFFFFLL);
    v85 = vbicq_s8(vtstq_s8(v81, v81), (int8x16_t)vcgtq_u8((uint8x16_t)v77, (uint8x16_t)v84));
    v86 = vorrq_s8((int8x16_t)vqsubq_u8((uint8x16_t)v77, (uint8x16_t)v84), vceqzq_s8(v81));
    v87 = *(_QWORD *)&vzip1_s8(*(int8x8_t *)v86.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
    v88 = *(_QWORD *)&vzip2_s8(*(int8x8_t *)v86.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
    v86.i64[0] = vextq_s8(v86, v86, 8uLL).u64[0];
    v89 = vmull_u8(*(uint8x8_t *)v77.i8, *(uint8x8_t *)v77.i8);
    v90 = vmull_high_u8((uint8x16_t)v77, (uint8x16_t)v77);
    v91 = (int8x8_t)vextq_s8(v81, v81, 8uLL).u64[0];
    v92 = (int8x16_t)vqmovun_high_s32(vqmovun_s32(vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(*(int8x8_t *)v81.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v89.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v87))))), vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(*(int8x8_t *)v81.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_high_u16(v89))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v88)))));
    v93 = (int8x16_t)vqmovun_high_s32(vqmovun_s32(vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(v91, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v90.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(*(int8x8_t *)v86.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))), vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(v91, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_high_u16(v90))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(*(int8x8_t *)v86.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))))));
    v94 = (uint8x16_t)vmvnq_s8(v77);
    v95 = vmull_u8(*(uint8x8_t *)v81.i8, *(uint8x8_t *)v94.i8);
    v96 = vmull_high_u8((uint8x16_t)v81, v94);
    v97 = vminq_u16(vqaddq_u16(vqaddq_u16((uint16x8_t)vorrq_s8(v92, (int8x16_t)vmovl_s8(*(int8x8_t *)v85.i8)), v95), v83), v29);
    v98 = vminq_u16(vqaddq_u16(vqaddq_u16((uint16x8_t)vorrq_s8(v93, (int8x16_t)vmovl_high_s8(v85)), v96), (uint16x8_t)v127.val[1]), v29);
    v127.val[0] = (int8x16_t)vrsraq_n_u16(v97, v97, 8uLL);
    v99 = vrsraq_n_u16(v98, v98, 8uLL);
    *(uint8x8_t *)v127.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v127.val[0], 8uLL);
    *(uint8x8_t *)v127.val[1].i8 = vqrshrn_n_u16(v99, 8uLL);
    v100 = (uint8x16_t)vqtbl2q_s8(v127, (int8x16_t)xmmword_185004A50);
    v17 = vqrshrn_high_n_u16(*(uint8x8_t *)v127.val[0].i8, v99, 8uLL);
    v16 = (int8x16_t)vminq_u8(v17, v100);
    v15 = vbslq_s8(vceqzq_s8(v79), v78, v16);
    *(int8x16_t *)((char *)v21 + v70) = vbslq_s8(vceqzq_s8(v77), v73, v15);
    v22 += v27;
    v18 -= 4;
    if (v18 < 4)
      break;
    v31 = *(_DWORD *)v22;
    v70 += v28;
    if ((*(_DWORD *)v22 - 1) >= 0xFFFFFFFE)
    {
      v19 = (_DWORD *)((char *)v19 + v70);
      v21 = (_DWORD *)((char *)v21 + v70);
      goto LABEL_37;
    }
  }
  v19 = (_DWORD *)((char *)v19 + v28 + v70);
  v21 = (_DWORD *)((char *)v21 + v28 + v70);
LABEL_40:
  v101 = v18 + a14;
  if (v101)
  {
    if (a7)
      v102 = 0;
    else
      v102 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v102), (int8x8_t)0xFF000000FF000000);
    if (a8)
      v103 = 0;
    else
      v103 = -1;
    v104 = vand_s8(vdup_n_s8(v103), (int8x8_t)0xFF000000FF000000);
    v105 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a13.i32[0] = *v19;
      v106 = vmovl_u8(a13);
      LOBYTE(v107) = v106.i8[0];
      BYTE1(v107) = v106.i8[2];
      BYTE2(v107) = v106.i8[4];
      HIBYTE(v107) = v106.i8[6];
      v106.i32[0] = *v21;
      v108 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v106.i8);
      LOBYTE(v109) = v108.i8[0];
      BYTE1(v109) = v108.i8[2];
      BYTE2(v109) = v108.i8[4];
      HIBYTE(v109) = v108.i8[6];
      LOBYTE(v110) = *v22;
      BYTE1(v110) = *v22;
      BYTE2(v110) = *v22;
      HIBYTE(v110) = *v22;
      *(int8x8_t *)v108.i8 = vorr_s8(vbic_s8(v104, vceqz_s8((int8x8_t)v110)), (int8x8_t)v109);
      v111 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v107, *(int8x8_t *)a9.i8), (uint8x8_t)v110), v105);
      v112 = vrsraq_n_u16(v111, v111, 8uLL);
      v113 = (int8x8_t)vqrshrn_n_u16(v112, 8uLL);
      *(int8x8_t *)v112.i8 = vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16((uint8x8_t)v113, v112, 8uLL), (int8x8_t)0x707070703030303);
      v114.i64[0] = v108.i64[0];
      v114.i64[1] = v108.i64[0];
      *(int8x8_t *)v114.i8 = vqtbl1_s8(v114, (int8x8_t)0x707070703030303);
      v115 = vmin_u8((uint8x8_t)v113, *(uint8x8_t *)v112.i8);
      v116 = (int8x8_t)vmin_u8(*(uint8x8_t *)v108.i8, *(uint8x8_t *)v114.i8);
      v117 = vmull_u8(v115, (uint8x8_t)vmvn_s8(*(int8x8_t *)v114.i8));
      *(_QWORD *)&v115 &= 0xFFFFFF00FFFFFFuLL;
      v118 = (int8x16_t)vmovl_s8(vbic_s8(vtst_s8(v116, v116), (int8x8_t)vcgt_u8(*(uint8x8_t *)v112.i8, v115)));
      v119 = vorr_s8((int8x8_t)vqsub_u8(*(uint8x8_t *)v112.i8, v115), vceqz_s8(v116));
      v120 = vmull_u8(*(uint8x8_t *)v112.i8, *(uint8x8_t *)v112.i8);
      v121 = vminq_u16(vqaddq_u16(vqaddq_u16((uint16x8_t)vorrq_s8((int8x16_t)vqmovun_high_s32(vqmovun_s32(vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(v116, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v120.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(v119, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))), vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(v116, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_high_u16(v120))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(v119, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))),
                                 v118),
                   vmull_u8((uint8x8_t)v116, (uint8x8_t)vmvn_s8(*(int8x8_t *)v112.i8))),
                 v117),
               v105);
      v122 = vrsraq_n_u16(v121, v121, 8uLL);
      v123 = vqrshrn_n_u16(v122, 8uLL);
      *(int8x8_t *)v108.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v112.i8), *(int8x8_t *)v108.i8, vbsl_s8(vceqz_s8(*(int8x8_t *)v114.i8), v113, (int8x8_t)vmin_u8(v123, (uint8x8_t)vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16(v123, v122, 8uLL), (int8x8_t)0x707070703030303))));
      a13 = (uint8x8_t)vmovn_s16((int16x8_t)vzip1q_s8(v108, a9));
      *v21 = a13.i32[0];
      v124 = &v19[a6];
      v22 += a6;
      if ((unint64_t)v124 >= v20)
        v125 = -(uint64_t)a5;
      else
        v125 = 0;
      v19 = &v124[v125];
      v21 += a6;
      --v101;
    }
    while (v101);
  }
  *result = v19;
  *a3 = v20;
  *a2 = v21;
  *a4 = v22;
  return result;
}

unsigned __int32 **vec::template_mark_pixelmask_row<(CGCompositeOperation)19,_rgba8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, int8x16_t a9, double a10, double a11, double a12, double a13, int8x16_t a14, uint64_t a15, unint64_t a16)
{
  int8x16_t v16;
  int8x16_t v17;
  int32x4_t v18;
  unint64_t v19;
  unsigned __int32 *v20;
  unint64_t v21;
  _DWORD *v22;
  char *v23;
  unsigned int v24;
  int8x16_t v25;
  unsigned int v26;
  int8x16_t v27;
  uint64_t v28;
  uint64_t v29;
  float32x4_t v30;
  __int32 v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  int8x16_t *v35;
  int64_t v36;
  int64_t v37;
  int8x16_t *v38;
  int8x16_t *v39;
  int8x16_t *v40;
  int8x16_t *v41;
  uint64_t v42;
  int64_t v43;
  unint64_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  uint8x16_t v50;
  int8x16_t v51;
  float32x4_t v52;
  float32x4_t v53;
  int8x8_t v54;
  float32x4_t v55;
  float32x4_t v56;
  uint16x8_t v57;
  uint16x8_t v58;
  int8x8_t v59;
  uint64_t v60;
  uint64_t v61;
  uint16x8_t v62;
  uint16x8_t v63;
  uint8x16_t v64;
  uint16x8_t v65;
  uint16x8_t v66;
  uint8x16_t v67;
  uint16x8_t v68;
  uint16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  uint64_t v72;
  int8x16_t v73;
  uint8x16_t v74;
  int8x16_t v75;
  uint16x8_t v76;
  uint16x8_t v77;
  uint16x8_t v78;
  uint16x8_t v79;
  uint16x8_t v80;
  uint16x8_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  uint8x16_t v86;
  int8x16_t v87;
  float32x4_t v88;
  float32x4_t v89;
  int8x8_t v90;
  float32x4_t v91;
  float32x4_t v92;
  uint16x8_t v93;
  uint16x8_t v94;
  int8x8_t v95;
  uint64_t v96;
  uint64_t v97;
  uint16x8_t v98;
  uint16x8_t v99;
  uint8x16_t v100;
  uint16x8_t v101;
  uint16x8_t v102;
  uint8x16_t v103;
  uint16x8_t v104;
  uint16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  uint64_t v108;
  unsigned int v109;
  unsigned int v110;
  int8x8_t v111;
  uint16x8_t v112;
  float32x4_t v113;
  uint16x8_t v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  uint16x8_t v118;
  uint16x8_t v119;
  int8x8_t v120;
  int8x16_t v121;
  int8x8_t v122;
  uint8x8_t v123;
  int8x8_t v124;
  float32x4_t v125;
  float32x4_t v126;
  uint16x8_t v127;
  uint64_t v128;
  uint64_t v129;
  uint16x8_t v130;
  uint16x8_t v131;
  uint16x8_t v132;
  int16x8_t v133;
  unsigned __int32 *v134;
  uint64_t v135;

  v19 = a16;
  v20 = *result;
  v21 = *a3;
  v22 = *a2;
  v23 = *a4;
  if (a16 < 4)
    goto LABEL_40;
  if (a7)
    v24 = 0;
  else
    v24 = -1;
  v25.i64[0] = 0xFF000000FF000000;
  v25.i64[1] = 0xFF000000FF000000;
  a9 = vandq_s8(vdupq_n_s8(v24), v25);
  if (a8)
    v26 = 0;
  else
    v26 = -1;
  v27 = vandq_s8(vdupq_n_s8(v26), v25);
  v28 = 4 * a6;
  v29 = 16 * a6;
  v30 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  a14.i64[0] = -1;
  a14.i64[1] = -1;
  while (1)
  {
    v31 = *(_DWORD *)v23;
    if (*(_DWORD *)v23 == -1)
    {
      v38 = (int8x16_t *)&v23[v19];
      v39 = (int8x16_t *)v23;
      do
        v40 = v39++;
      while (v39 <= v38 && (vminvq_u8((uint8x16_t)vceqq_s8(*v40, a14)) & 0x80) != 0);
      do
      {
        v41 = v40;
        v40 = (int8x16_t *)((char *)v40 + 4);
      }
      while (v40 <= v38 && v41->i32[0] == -1);
      if (v41 < v38)
      {
        while (v41->u8[0] == 255)
        {
          v41 = (int8x16_t *)((char *)v41 + 1);
          if (v41 >= v38)
          {
            v41 = (int8x16_t *)&v23[v19];
            break;
          }
        }
      }
      v42 = 0;
      v43 = (char *)v41 - v23;
      v44 = (char *)v41 - v23;
      do
      {
        v45 = vorrq_s8(*(int8x16_t *)((char *)v20 + v42), a9);
        v46 = vorrq_s8(*(int8x16_t *)((char *)v22 + v42), v27);
        v47 = vqtbl1q_s8(v45, (int8x16_t)xmmword_185004A40);
        v48 = vqtbl1q_s8(v46, (int8x16_t)xmmword_185004A40);
        v49 = (int8x16_t)vminq_u8((uint8x16_t)v45, (uint8x16_t)v47);
        v50 = vminq_u8((uint8x16_t)v46, (uint8x16_t)v48);
        v51 = (int8x16_t)vqsubq_u8((uint8x16_t)v48, v50);
        v52 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(*(int8x8_t *)v51.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)));
        v53 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(*(int8x8_t *)v51.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)));
        v54 = (int8x8_t)vextq_s8(v51, v51, 8uLL).u64[0];
        v55 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(v54, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)));
        v56 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(v54, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)));
        v57 = vmull_u8(*(uint8x8_t *)v47.i8, *(uint8x8_t *)v47.i8);
        v58 = vmull_high_u8((uint8x16_t)v47, (uint8x16_t)v47);
        v59 = (int8x8_t)vextq_s8(v49, v49, 8uLL).u64[0];
        v60 = *(_QWORD *)&vzip2_s8(*(int8x8_t *)v49.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
        v61 = *(_QWORD *)&vzip1_s8(*(int8x8_t *)v49.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
        v62 = vmull_u8(*(uint8x8_t *)v47.i8, *(uint8x8_t *)v48.i8);
        v63 = vmull_high_u8((uint8x16_t)v47, (uint8x16_t)v48);
        v64 = (uint8x16_t)vmvnq_s8(v47);
        v65 = vmull_u8(*(uint8x8_t *)v50.i8, *(uint8x8_t *)v64.i8);
        v66 = vmull_high_u8(v50, v64);
        v67 = (uint8x16_t)vmvnq_s8(v48);
        v68 = vmull_u8(*(uint8x8_t *)v49.i8, *(uint8x8_t *)v67.i8);
        v69 = vmull_high_u8((uint8x16_t)v49, v67);
        v18 = vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(v65)), vcvtq_f32_u32(vmovl_high_u16(v68))), vcvtq_f32_u32(vmovl_high_u16(v62))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v53, vcvtq_f32_u32(vmovl_high_u16(v57))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v60))), (int8x16_t)vceqzq_f32(v53))), v30));
        v70 = vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v65.i8)), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v68.i8))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v62.i8))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v52, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v57.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v61))), (int8x16_t)vceqzq_f32(v52))), v30))), v18);
        *(int8x8_t *)v70.i8 = vqmovun_s16(v70);
        v71 = vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v66.i8)), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v69.i8))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v63.i8))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v55, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v58.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(v59, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))), (int8x16_t)vceqzq_f32(v55))), v30))), vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(
                        vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(v66)), vcvtq_f32_u32(vmovl_high_u16(v69))),
                        vcvtq_f32_u32(vmovl_high_u16(v63))),
                      (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v56, vcvtq_f32_u32(vmovl_high_u16(v58))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(v59, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))), (int8x16_t)vceqzq_f32(v56))), v30)));
        *(int8x8_t *)v18.i8 = vqmovun_s16(v71);
        v17 = (int8x16_t)vminq_u8((uint8x16_t)vqmovun_high_s16(*(int8x8_t *)v70.i8, v71), (uint8x16_t)vqtbl2q_s8(*(int8x16x2_t *)(&v18 - 1), (int8x16_t)xmmword_185004A50));
        v16 = vceqzq_s8(v47);
        *(int8x16_t *)((char *)v22 + v42) = vbslq_s8(v16, v46, vbslq_s8(vceqzq_s8(v48), v45, v17));
        v23 += v28;
        v44 -= 4;
        v42 += v29;
      }
      while (v44 > 3);
      v22 = (_DWORD *)((char *)v22 + v42);
      v20 = (unsigned __int32 *)((char *)v20 + v42);
      v19 = v19 - v43 + v44;
      goto LABEL_37;
    }
    if (v31)
      break;
    v32 = (int8x16_t *)&v23[v19];
    v33 = (int8x16_t *)v23;
    do
      v34 = v33++;
    while (v33 <= v32 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v34)) & 0x80) != 0);
    do
    {
      v35 = v34;
      v34 = (int8x16_t *)((char *)v34 + 4);
    }
    while (v34 <= v32 && !v35->i32[0]);
    if (v35 < v32)
    {
      while (!v35->i8[0])
      {
        v35 = (int8x16_t *)((char *)v35 + 1);
        if (v35 >= v32)
        {
          v35 = (int8x16_t *)&v23[v19];
          break;
        }
      }
    }
    v36 = (char *)v35 - v23;
    v37 = ((char *)v35 - v23) * a6;
    v20 += v37;
    v22 += v37;
    v23 += v37;
    v19 -= v36;
LABEL_37:
    if (v19 <= 3)
      goto LABEL_40;
  }
  v72 = 0;
  while (1)
  {
    v16.i32[0] = v31;
    v73 = vqtbl1q_s8(v16, (int8x16_t)xmmword_185004A30);
    v74 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v20 + v72), a9);
    v75 = vorrq_s8(vbicq_s8(v27, vceqzq_s8(v73)), *(int8x16_t *)((char *)v22 + v72));
    v76 = vmull_u8(*(uint8x8_t *)v74.i8, *(uint8x8_t *)v73.i8);
    v77 = vmull_high_u8(v74, (uint8x16_t)v73);
    v78 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    v79 = vminq_u16(v76, v78);
    v80 = vminq_u16(v77, v78);
    v81 = vrsraq_n_u16(v80, v80, 8uLL);
    *(uint8x8_t *)v17.i8 = vqrshrn_n_u16(vrsraq_n_u16(v79, v79, 8uLL), 8uLL);
    *(uint8x8_t *)v18.i8 = vqrshrn_n_u16(v81, 8uLL);
    v82 = vqtbl2q_s8(*(int8x16x2_t *)v17.i8, (int8x16_t)xmmword_185004A50);
    v83 = (int8x16_t)vqrshrn_high_n_u16(*(uint8x8_t *)v17.i8, v81, 8uLL);
    v84 = vqtbl1q_s8(v75, (int8x16_t)xmmword_185004A40);
    v85 = (int8x16_t)vminq_u8((uint8x16_t)v83, (uint8x16_t)v82);
    v86 = vminq_u8((uint8x16_t)v75, (uint8x16_t)v84);
    v87 = (int8x16_t)vqsubq_u8((uint8x16_t)v84, v86);
    v88 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(*(int8x8_t *)v87.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)));
    *(int8x8_t *)v18.i8 = vzip2_s8(*(int8x8_t *)v87.i8, *(int8x8_t *)a9.i8);
    v18.i32[0] &= 0xFF00FFu;
    v18.i16[2] = v18.u8[4];
    v18.i16[3] = v18.u8[6];
    v89 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v18.i8));
    v90 = (int8x8_t)vextq_s8(v87, v87, 8uLL).u64[0];
    v91 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(v90, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)));
    v92 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(v90, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)));
    v93 = vmull_u8(*(uint8x8_t *)v82.i8, *(uint8x8_t *)v82.i8);
    v94 = vmull_high_u8((uint8x16_t)v82, (uint8x16_t)v82);
    v95 = (int8x8_t)vextq_s8(v85, v85, 8uLL).u64[0];
    v96 = *(_QWORD *)&vzip2_s8(*(int8x8_t *)v85.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
    v97 = *(_QWORD *)&vzip1_s8(*(int8x8_t *)v85.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
    v98 = vmull_u8(*(uint8x8_t *)v82.i8, *(uint8x8_t *)v84.i8);
    v99 = vmull_high_u8((uint8x16_t)v82, (uint8x16_t)v84);
    v100 = (uint8x16_t)vmvnq_s8(v82);
    v101 = vmull_u8(*(uint8x8_t *)v86.i8, *(uint8x8_t *)v100.i8);
    v102 = vmull_high_u8(v86, v100);
    v103 = (uint8x16_t)vmvnq_s8(v84);
    v104 = vmull_u8(*(uint8x8_t *)v85.i8, *(uint8x8_t *)v103.i8);
    v105 = vmull_high_u8((uint8x16_t)v85, v103);
    v18 = vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(v101)), vcvtq_f32_u32(vmovl_high_u16(v104))), vcvtq_f32_u32(vmovl_high_u16(v98))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v89, vcvtq_f32_u32(vmovl_high_u16(v93))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v96))), (int8x16_t)vceqzq_f32(v89))), v30));
    v106 = vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v101.i8)), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v104.i8))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v98.i8))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v88, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v93.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v97))), (int8x16_t)vceqzq_f32(v88))), v30))), v18);
    *(int8x8_t *)v106.i8 = vqmovun_s16(v106);
    v107 = vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v102.i8)), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v105.i8))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v99.i8))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v91, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v94.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(v95, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))), (int8x16_t)vceqzq_f32(v91))), v30))), vcvtnq_s32_f32(vmulq_f32(
                 vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(v102)), vcvtq_f32_u32(vmovl_high_u16(v105))), vcvtq_f32_u32(vmovl_high_u16(v99))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v92, vcvtq_f32_u32(vmovl_high_u16(v94))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(v95, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))), (int8x16_t)vceqzq_f32(v92))), v30)));
    *(int8x8_t *)v18.i8 = vqmovun_s16(v107);
    v17 = (int8x16_t)vminq_u8((uint8x16_t)vqmovun_high_s16(*(int8x8_t *)v106.i8, v107), (uint8x16_t)vqtbl2q_s8(*(int8x16x2_t *)(&v18 - 1), (int8x16_t)xmmword_185004A50));
    v16 = vbslq_s8(vceqzq_s8(v84), v83, v17);
    *(int8x16_t *)((char *)v22 + v72) = vbslq_s8(vceqzq_s8(v82), v75, v16);
    v23 += v28;
    v19 -= 4;
    if (v19 < 4)
      break;
    v31 = *(_DWORD *)v23;
    v72 += v29;
    if ((*(_DWORD *)v23 - 1) >= 0xFFFFFFFE)
    {
      v20 = (unsigned __int32 *)((char *)v20 + v72);
      v22 = (_DWORD *)((char *)v22 + v72);
      goto LABEL_37;
    }
  }
  v20 = (unsigned __int32 *)((char *)v20 + v29 + v72);
  v22 = (_DWORD *)((char *)v22 + v29 + v72);
LABEL_40:
  v108 = v19 + a15;
  if (v108)
  {
    if (a7)
      v109 = 0;
    else
      v109 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v109), (int8x8_t)0xFF000000FF000000);
    if (a8)
      v110 = 0;
    else
      v110 = -1;
    v111 = vand_s8(vdup_n_s8(v110), (int8x8_t)0xFF000000FF000000);
    v112 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    v113 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    do
    {
      a14.i32[0] = *v20;
      v114 = vmovl_u8(*(uint8x8_t *)a14.i8);
      LOBYTE(v115) = v114.i8[0];
      BYTE1(v115) = v114.i8[2];
      BYTE2(v115) = v114.i8[4];
      HIBYTE(v115) = v114.i8[6];
      v114.i32[0] = *v22;
      a14 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v114.i8);
      LOBYTE(v116) = a14.i8[0];
      BYTE1(v116) = a14.i8[2];
      BYTE2(v116) = a14.i8[4];
      HIBYTE(v116) = a14.i8[6];
      LOBYTE(v117) = *v23;
      BYTE1(v117) = *v23;
      BYTE2(v117) = *v23;
      HIBYTE(v117) = *v23;
      *(int8x8_t *)a14.i8 = vorr_s8(vbic_s8(v111, vceqz_s8((int8x8_t)v117)), (int8x8_t)v116);
      v118 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v115, *(int8x8_t *)a9.i8), (uint8x8_t)v117), v112);
      v119 = vrsraq_n_u16(v118, v118, 8uLL);
      v120 = (int8x8_t)vqrshrn_n_u16(v119, 8uLL);
      *(int8x8_t *)v119.i8 = vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16((uint8x8_t)v120, v119, 8uLL), (int8x8_t)0x707070703030303);
      v121.i64[0] = a14.i64[0];
      v121.i64[1] = a14.i64[0];
      *(int8x8_t *)v121.i8 = vqtbl1_s8(v121, (int8x8_t)0x707070703030303);
      v122 = (int8x8_t)vmin_u8((uint8x8_t)v120, *(uint8x8_t *)v119.i8);
      v123 = vmin_u8(*(uint8x8_t *)a14.i8, *(uint8x8_t *)v121.i8);
      v124 = (int8x8_t)vqsub_u8(*(uint8x8_t *)v121.i8, v123);
      v125 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(v124, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)));
      v126 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(v124, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)));
      v127 = vmull_u8(*(uint8x8_t *)v119.i8, *(uint8x8_t *)v119.i8);
      v128 = *(_QWORD *)&vzip2_s8(v122, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
      v129 = *(_QWORD *)&vzip1_s8(v122, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
      v130 = vmull_u8(*(uint8x8_t *)v119.i8, *(uint8x8_t *)v121.i8);
      v131 = vmull_u8(v123, (uint8x8_t)vmvn_s8(*(int8x8_t *)v119.i8));
      v132 = vmull_u8((uint8x8_t)v122, (uint8x8_t)vmvn_s8(*(int8x8_t *)v121.i8));
      v133 = vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v131.i8)), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v132.i8))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v130.i8))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v125, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v127.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v129))), (int8x16_t)vceqzq_f32(v125))), v113))), vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(
                       vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(v131)), vcvtq_f32_u32(vmovl_high_u16(v132))),
                       vcvtq_f32_u32(vmovl_high_u16(v130))),
                     (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v126, vcvtq_f32_u32(vmovl_high_u16(v127))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v128))), (int8x16_t)vceqzq_f32(v126))), v113)));
      *(int8x8_t *)v131.i8 = vqmovun_s16(v133);
      *(int8x8_t *)a14.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v119.i8), *(int8x8_t *)a14.i8, vbsl_s8(vceqz_s8(*(int8x8_t *)v121.i8), v120, (int8x8_t)vmin_u8(*(uint8x8_t *)v131.i8, (uint8x8_t)vqtbl1_s8(vqmovun_high_s16(*(int8x8_t *)v131.i8, v133), (int8x8_t)0x707070703030303))));
      *(int8x8_t *)a14.i8 = vmovn_s16((int16x8_t)vzip1q_s8(a14, a9));
      *v22 = a14.i32[0];
      v134 = &v20[a6];
      v23 += a6;
      if ((unint64_t)v134 >= v21)
        v135 = -(uint64_t)a5;
      else
        v135 = 0;
      v20 = &v134[v135];
      v22 += a6;
      --v108;
    }
    while (v108);
  }
  *result = v20;
  *a3 = v21;
  *a2 = v22;
  *a4 = v23;
  return result;
}

_DWORD **vec::template_mark_pixelmask_row<(CGCompositeOperation)20,_rgba8_t>(_DWORD **result, _DWORD **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, int8x16_t a9, double a10, double a11, double a12, uint8x8_t a13, uint64_t a14, unint64_t a15)
{
  int8x16_t v15;
  int8x16_t v16;
  uint8x16_t v17;
  unint64_t v18;
  _DWORD *v19;
  unint64_t v20;
  _DWORD *v21;
  char *v22;
  unsigned int v23;
  int8x16_t v24;
  unsigned int v25;
  int8x16_t v26;
  uint64_t v27;
  uint64_t v28;
  uint16x8_t v29;
  int8x16_t v30;
  __int32 v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  int8x16_t *v35;
  int64_t v36;
  int64_t v37;
  int8x16_t *v38;
  int8x16_t *v39;
  int8x16_t *v40;
  int8x16_t *v41;
  uint64_t v42;
  int64_t v43;
  unint64_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  uint8x16_t v49;
  uint8x16_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  int8x8_t v53;
  int16x8_t v54;
  uint16x8_t v55;
  uint16x8_t v56;
  uint8x16_t v57;
  uint16x8_t v58;
  uint16x8_t v59;
  uint16x8_t v60;
  uint16x8_t v61;
  uint8x16_t v62;
  uint16x8_t v63;
  uint16x8_t v64;
  uint16x8_t v65;
  uint16x8_t v66;
  uint8x16_t v67;
  uint16x8_t v68;
  uint16x8_t v69;
  uint16x8_t v70;
  uint16x8_t v71;
  uint16x8_t v72;
  uint16x8_t v73;
  uint8x16_t v74;
  uint64_t v75;
  int8x16_t v76;
  uint8x16_t v77;
  int8x16_t v78;
  uint16x8_t v79;
  uint16x8_t v80;
  uint16x8_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  uint8x16_t v85;
  uint8x16_t v86;
  uint16x8_t v87;
  uint16x8_t v88;
  int8x8_t v89;
  int16x8_t v90;
  uint16x8_t v91;
  uint16x8_t v92;
  uint8x16_t v93;
  uint16x8_t v94;
  uint16x8_t v95;
  uint16x8_t v96;
  uint16x8_t v97;
  uint8x16_t v98;
  uint16x8_t v99;
  uint16x8_t v100;
  uint16x8_t v101;
  uint16x8_t v102;
  uint8x16_t v103;
  uint16x8_t v104;
  uint16x8_t v105;
  uint16x8_t v106;
  uint16x8_t v107;
  uint16x8_t v108;
  uint16x8_t v109;
  uint8x16_t v110;
  uint64_t v111;
  unsigned int v112;
  unsigned int v113;
  int8x8_t v114;
  uint16x8_t v115;
  uint16x8_t v116;
  unsigned int v117;
  int8x16_t v118;
  unsigned int v119;
  unsigned int v120;
  uint16x8_t v121;
  uint16x8_t v122;
  int8x8_t v123;
  int8x16_t v124;
  uint8x8_t v125;
  uint8x8_t v126;
  uint16x8_t v127;
  uint16x8_t v128;
  uint16x8_t v129;
  uint16x8_t v130;
  uint16x8_t v131;
  uint8x8_t v132;
  _DWORD *v133;
  uint64_t v134;
  int8x16x2_t v135;
  int8x16x2_t v136;

  v18 = a15;
  v19 = *result;
  v20 = *a3;
  v21 = *a2;
  v22 = *a4;
  if (a15 < 4)
    goto LABEL_40;
  if (a7)
    v23 = 0;
  else
    v23 = -1;
  v24.i64[0] = 0xFF000000FF000000;
  v24.i64[1] = 0xFF000000FF000000;
  a9 = vandq_s8(vdupq_n_s8(v23), v24);
  if (a8)
    v25 = 0;
  else
    v25 = -1;
  v26 = vandq_s8(vdupq_n_s8(v25), v24);
  v27 = 4 * a6;
  v28 = 16 * a6;
  v29 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a13.i32[1] = 117901063;
  v30.i64[0] = -1;
  v30.i64[1] = -1;
  while (1)
  {
    v31 = *(_DWORD *)v22;
    if (*(_DWORD *)v22 == -1)
    {
      v38 = (int8x16_t *)&v22[v18];
      v39 = (int8x16_t *)v22;
      do
        v40 = v39++;
      while (v39 <= v38 && (vminvq_u8((uint8x16_t)vceqq_s8(*v40, v30)) & 0x80) != 0);
      do
      {
        v41 = v40;
        v40 = (int8x16_t *)((char *)v40 + 4);
      }
      while (v40 <= v38 && v41->i32[0] == -1);
      if (v41 < v38)
      {
        while (v41->u8[0] == 255)
        {
          v41 = (int8x16_t *)((char *)v41 + 1);
          if (v41 >= v38)
          {
            v41 = (int8x16_t *)&v22[v18];
            break;
          }
        }
      }
      v42 = 0;
      v43 = (char *)v41 - v22;
      v44 = (char *)v41 - v22;
      do
      {
        v45 = vorrq_s8(*(int8x16_t *)((char *)v19 + v42), a9);
        v46 = vorrq_s8(*(int8x16_t *)((char *)v21 + v42), v26);
        v47 = vqtbl1q_s8(v45, (int8x16_t)xmmword_185004A40);
        v48 = vqtbl1q_s8(v46, (int8x16_t)xmmword_185004A40);
        v49 = vminq_u8((uint8x16_t)v45, (uint8x16_t)v47);
        v50 = vminq_u8((uint8x16_t)v46, (uint8x16_t)v48);
        v51 = vmull_u8(*(uint8x8_t *)v50.i8, *(uint8x8_t *)v50.i8);
        v52 = vmull_high_u8(v50, v50);
        v53 = (int8x8_t)vextq_s8(v48, v48, 8uLL).u64[0];
        *(int8x8_t *)v51.i8 = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v51.i8)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(*(int8x8_t *)v48.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))), vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_high_u16(v51)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(*(int8x8_t *)v48.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))));
        v54 = vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v52.i8)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(v53, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))), vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_high_u16(v52)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(v53, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))))));
        v55 = vmull_u8(*(uint8x8_t *)v51.i8, *(uint8x8_t *)v47.i8);
        v56 = vmull_u8((uint8x8_t)vqmovun_s16(v54), (uint8x8_t)*(_OWORD *)&vextq_s8(v47, v47, 8uLL));
        v57 = vqsubq_u8(v50, (uint8x16_t)vqmovun_high_s16(*(int8x8_t *)v51.i8, v54));
        v58 = vmull_u8(*(uint8x8_t *)v57.i8, *(uint8x8_t *)v49.i8);
        v59 = vmull_high_u8(v57, v49);
        v60 = vqaddq_u16(v55, vqaddq_u16(v58, v58));
        v61 = vqaddq_u16(v56, vqaddq_u16(v59, v59));
        v62 = (uint8x16_t)vmvnq_s8(v47);
        v63 = vmull_u8(*(uint8x8_t *)v50.i8, *(uint8x8_t *)v62.i8);
        v64 = vmull_high_u8(v50, v62);
        v65 = vqaddq_u16(v60, v63);
        v66 = vqaddq_u16(v61, v64);
        v67 = (uint8x16_t)vmvnq_s8(v48);
        v68 = vmull_u8(*(uint8x8_t *)v49.i8, *(uint8x8_t *)v67.i8);
        v69 = vmull_high_u8(v49, v67);
        v135.val[1] = (int8x16_t)vqaddq_u16(v65, v68);
        v70 = vqaddq_u16(v66, v69);
        v71 = vminq_u16((uint16x8_t)v135.val[1], v29);
        v72 = vminq_u16(v70, v29);
        v135.val[0] = (int8x16_t)vrsraq_n_u16(v71, v71, 8uLL);
        v73 = vrsraq_n_u16(v72, v72, 8uLL);
        *(uint8x8_t *)v135.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v135.val[0], 8uLL);
        *(uint8x8_t *)v135.val[1].i8 = vqrshrn_n_u16(v73, 8uLL);
        v74 = (uint8x16_t)vqtbl2q_s8(v135, (int8x16_t)xmmword_185004A50);
        v17 = vqrshrn_high_n_u16(*(uint8x8_t *)v135.val[0].i8, v73, 8uLL);
        v16 = (int8x16_t)vminq_u8(v17, v74);
        v15 = vceqzq_s8(v47);
        *(int8x16_t *)((char *)v21 + v42) = vbslq_s8(v15, v46, vbslq_s8(vceqzq_s8(v48), v45, v16));
        v22 += v27;
        v44 -= 4;
        v42 += v28;
      }
      while (v44 > 3);
      v21 = (_DWORD *)((char *)v21 + v42);
      v19 = (_DWORD *)((char *)v19 + v42);
      v18 = v18 - v43 + v44;
      goto LABEL_37;
    }
    if (v31)
      break;
    v32 = (int8x16_t *)&v22[v18];
    v33 = (int8x16_t *)v22;
    do
      v34 = v33++;
    while (v33 <= v32 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v34)) & 0x80) != 0);
    do
    {
      v35 = v34;
      v34 = (int8x16_t *)((char *)v34 + 4);
    }
    while (v34 <= v32 && !v35->i32[0]);
    if (v35 < v32)
    {
      while (!v35->i8[0])
      {
        v35 = (int8x16_t *)((char *)v35 + 1);
        if (v35 >= v32)
        {
          v35 = (int8x16_t *)&v22[v18];
          break;
        }
      }
    }
    v36 = (char *)v35 - v22;
    v37 = ((char *)v35 - v22) * a6;
    v19 += v37;
    v21 += v37;
    v22 += v37;
    v18 -= v36;
LABEL_37:
    if (v18 <= 3)
      goto LABEL_40;
  }
  v75 = 0;
  while (1)
  {
    v15.i32[0] = v31;
    v76 = vqtbl1q_s8(v15, (int8x16_t)xmmword_185004A30);
    v77 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v19 + v75), a9);
    v78 = vorrq_s8(vbicq_s8(v26, vceqzq_s8(v76)), *(int8x16_t *)((char *)v21 + v75));
    v79 = vminq_u16(vmull_u8(*(uint8x8_t *)v77.i8, *(uint8x8_t *)v76.i8), v29);
    v80 = vminq_u16(vmull_high_u8(v77, (uint8x16_t)v76), v29);
    v81 = vrsraq_n_u16(v80, v80, 8uLL);
    *(uint8x8_t *)v16.i8 = vqrshrn_n_u16(vrsraq_n_u16(v79, v79, 8uLL), 8uLL);
    *(uint8x8_t *)v17.i8 = vqrshrn_n_u16(v81, 8uLL);
    v82 = vqtbl2q_s8(*(int8x16x2_t *)v16.i8, (int8x16_t)xmmword_185004A50);
    v83 = (int8x16_t)vqrshrn_high_n_u16(*(uint8x8_t *)v16.i8, v81, 8uLL);
    v84 = vqtbl1q_s8(v78, (int8x16_t)xmmword_185004A40);
    v85 = vminq_u8((uint8x16_t)v83, (uint8x16_t)v82);
    v86 = vminq_u8((uint8x16_t)v78, (uint8x16_t)v84);
    v87 = vmull_u8(*(uint8x8_t *)v86.i8, *(uint8x8_t *)v86.i8);
    v88 = vmull_high_u8(v86, v86);
    v89 = (int8x8_t)vextq_s8(v84, v84, 8uLL).u64[0];
    *(int8x8_t *)v87.i8 = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v87.i8)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(*(int8x8_t *)v84.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))), vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_high_u16(v87)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(*(int8x8_t *)v84.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))));
    v90 = vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v88.i8)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(v89, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))), vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_high_u16(v88)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(v89, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))))));
    v91 = vmull_u8(*(uint8x8_t *)v87.i8, *(uint8x8_t *)v82.i8);
    v92 = vmull_u8((uint8x8_t)vqmovun_s16(v90), (uint8x8_t)*(_OWORD *)&vextq_s8(v82, v82, 8uLL));
    v93 = vqsubq_u8(v86, (uint8x16_t)vqmovun_high_s16(*(int8x8_t *)v87.i8, v90));
    v94 = vmull_u8(*(uint8x8_t *)v93.i8, *(uint8x8_t *)v85.i8);
    v95 = vmull_high_u8(v93, v85);
    v96 = vqaddq_u16(v91, vqaddq_u16(v94, v94));
    v97 = vqaddq_u16(v92, vqaddq_u16(v95, v95));
    v98 = (uint8x16_t)vmvnq_s8(v82);
    v99 = vmull_u8(*(uint8x8_t *)v86.i8, *(uint8x8_t *)v98.i8);
    v100 = vmull_high_u8(v86, v98);
    v101 = vqaddq_u16(v96, v99);
    v102 = vqaddq_u16(v97, v100);
    v103 = (uint8x16_t)vmvnq_s8(v84);
    v104 = vmull_u8(*(uint8x8_t *)v85.i8, *(uint8x8_t *)v103.i8);
    v105 = vmull_high_u8(v85, v103);
    v136.val[1] = (int8x16_t)vqaddq_u16(v101, v104);
    v106 = vqaddq_u16(v102, v105);
    v107 = vminq_u16((uint16x8_t)v136.val[1], v29);
    v108 = vminq_u16(v106, v29);
    v136.val[0] = (int8x16_t)vrsraq_n_u16(v107, v107, 8uLL);
    v109 = vrsraq_n_u16(v108, v108, 8uLL);
    *(uint8x8_t *)v136.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v136.val[0], 8uLL);
    *(uint8x8_t *)v136.val[1].i8 = vqrshrn_n_u16(v109, 8uLL);
    v110 = (uint8x16_t)vqtbl2q_s8(v136, (int8x16_t)xmmword_185004A50);
    v17 = vqrshrn_high_n_u16(*(uint8x8_t *)v136.val[0].i8, v109, 8uLL);
    v16 = (int8x16_t)vminq_u8(v17, v110);
    v15 = vbslq_s8(vceqzq_s8(v84), v83, v16);
    *(int8x16_t *)((char *)v21 + v75) = vbslq_s8(vceqzq_s8(v82), v78, v15);
    v22 += v27;
    v18 -= 4;
    if (v18 < 4)
      break;
    v31 = *(_DWORD *)v22;
    v75 += v28;
    if ((*(_DWORD *)v22 - 1) >= 0xFFFFFFFE)
    {
      v19 = (_DWORD *)((char *)v19 + v75);
      v21 = (_DWORD *)((char *)v21 + v75);
      goto LABEL_37;
    }
  }
  v19 = (_DWORD *)((char *)v19 + v28 + v75);
  v21 = (_DWORD *)((char *)v21 + v28 + v75);
LABEL_40:
  v111 = v18 + a14;
  if (v111)
  {
    if (a7)
      v112 = 0;
    else
      v112 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v112), (int8x8_t)0xFF000000FF000000);
    if (a8)
      v113 = 0;
    else
      v113 = -1;
    v114 = vand_s8(vdup_n_s8(v113), (int8x8_t)0xFF000000FF000000);
    v115 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a13.i32[0] = *v19;
      v116 = vmovl_u8(a13);
      LOBYTE(v117) = v116.i8[0];
      BYTE1(v117) = v116.i8[2];
      BYTE2(v117) = v116.i8[4];
      HIBYTE(v117) = v116.i8[6];
      v116.i32[0] = *v21;
      v118 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v116.i8);
      LOBYTE(v119) = v118.i8[0];
      BYTE1(v119) = v118.i8[2];
      BYTE2(v119) = v118.i8[4];
      HIBYTE(v119) = v118.i8[6];
      LOBYTE(v120) = *v22;
      BYTE1(v120) = *v22;
      BYTE2(v120) = *v22;
      HIBYTE(v120) = *v22;
      *(int8x8_t *)v118.i8 = vorr_s8(vbic_s8(v114, vceqz_s8((int8x8_t)v120)), (int8x8_t)v119);
      v121 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v117, *(int8x8_t *)a9.i8), (uint8x8_t)v120), v115);
      v122 = vrsraq_n_u16(v121, v121, 8uLL);
      v123 = (int8x8_t)vqrshrn_n_u16(v122, 8uLL);
      *(int8x8_t *)v122.i8 = vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16((uint8x8_t)v123, v122, 8uLL), (int8x8_t)0x707070703030303);
      v124.i64[0] = v118.i64[0];
      v124.i64[1] = v118.i64[0];
      *(int8x8_t *)v124.i8 = vqtbl1_s8(v124, (int8x8_t)0x707070703030303);
      v125 = vmin_u8((uint8x8_t)v123, *(uint8x8_t *)v122.i8);
      v126 = vmin_u8(*(uint8x8_t *)v118.i8, *(uint8x8_t *)v124.i8);
      v127 = vmull_u8(v126, v126);
      *(int8x8_t *)v127.i8 = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v127.i8)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v118.u8[3]) & 0xFF00FF00FF00FFLL)))))), vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_high_u16(v127)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v118.u8[7]) & 0xFF00FF00FF00FFLL)))))));
      v128 = vmull_u8(*(uint8x8_t *)v127.i8, *(uint8x8_t *)v122.i8);
      v129 = vmull_u8(vqsub_u8(v126, *(uint8x8_t *)v127.i8), v125);
      v130 = vminq_u16(vqaddq_u16(vqaddq_u16(vqaddq_u16(v128, vqaddq_u16(v129, v129)), vmull_u8(v126, (uint8x8_t)vmvn_s8(*(int8x8_t *)v122.i8))), vmull_u8(v125, (uint8x8_t)vmvn_s8(*(int8x8_t *)v124.i8))), v115);
      v131 = vrsraq_n_u16(v130, v130, 8uLL);
      v132 = vqrshrn_n_u16(v131, 8uLL);
      *(int8x8_t *)v118.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v122.i8), *(int8x8_t *)v118.i8, vbsl_s8(vceqz_s8(*(int8x8_t *)v124.i8), v123, (int8x8_t)vmin_u8(v132, (uint8x8_t)vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16(v132, v131, 8uLL), (int8x8_t)0x707070703030303))));
      a13 = (uint8x8_t)vmovn_s16((int16x8_t)vzip1q_s8(v118, a9));
      *v21 = a13.i32[0];
      v133 = &v19[a6];
      v22 += a6;
      if ((unint64_t)v133 >= v20)
        v134 = -(uint64_t)a5;
      else
        v134 = 0;
      v19 = &v133[v134];
      v21 += a6;
      --v111;
    }
    while (v111);
  }
  *result = v19;
  *a3 = v20;
  *a2 = v21;
  *a4 = v22;
  return result;
}

_DWORD **vec::template_mark_pixelmask_row<(CGCompositeOperation)21,_rgba8_t>(_DWORD **result, _DWORD **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, int8x16_t a9, double a10, double a11, double a12, double a13, uint8x8_t a14, uint64_t a15, unint64_t a16)
{
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  unint64_t v19;
  _DWORD *v20;
  unint64_t v21;
  _DWORD *v22;
  char *v23;
  unsigned int v24;
  int8x16_t v25;
  unsigned int v26;
  int8x16_t v27;
  uint64_t v28;
  uint64_t v29;
  uint16x8_t v30;
  int8x16_t v31;
  __int32 v32;
  int8x16_t *v33;
  int8x16_t *v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int64_t v37;
  int64_t v38;
  int8x16_t *v39;
  int8x16_t *v40;
  int8x16_t *v41;
  int8x16_t *v42;
  uint64_t v43;
  int64_t v44;
  unint64_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  uint8x16_t v50;
  uint8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  uint16x8_t v54;
  uint16x8_t v55;
  uint8x16_t v56;
  uint8x16_t v57;
  uint16x8_t v58;
  uint16x8_t v59;
  uint16x8_t v60;
  uint16x8_t v61;
  uint8x16_t v62;
  uint16x8_t v63;
  uint16x8_t v64;
  uint8x16_t v65;
  uint16x8_t v66;
  uint16x8_t v67;
  uint16x8_t v68;
  uint16x8_t v69;
  uint16x8_t v70;
  uint16x8_t v71;
  uint64_t v72;
  int8x16_t v73;
  uint8x16_t v74;
  int8x16_t v75;
  uint16x8_t v76;
  uint16x8_t v77;
  uint16x8_t v78;
  int8x16_t v79;
  int8x16_t v80;
  uint8x16_t v81;
  uint8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  uint16x8_t v85;
  uint16x8_t v86;
  uint8x16_t v87;
  uint8x16_t v88;
  uint16x8_t v89;
  uint16x8_t v90;
  uint16x8_t v91;
  uint16x8_t v92;
  uint8x16_t v93;
  uint16x8_t v94;
  uint16x8_t v95;
  uint8x16_t v96;
  uint16x8_t v97;
  uint16x8_t v98;
  uint16x8_t v99;
  uint16x8_t v100;
  uint16x8_t v101;
  uint16x8_t v102;
  uint64_t v103;
  unsigned int v104;
  int8x8_t v105;
  unsigned int v106;
  int8x8_t v107;
  uint16x8_t v108;
  uint16x8_t v109;
  unsigned int v110;
  uint16x8_t v111;
  unsigned int v112;
  int8x8_t v113;
  uint16x8_t v114;
  int8x16_t v115;
  int8x8_t v116;
  int8x16_t v117;
  uint8x8_t v118;
  uint8x8_t v119;
  uint16x8_t v120;
  uint16x8_t v121;
  uint16x8_t v122;
  uint16x8_t v123;
  uint8x8_t v124;
  _DWORD *v125;
  uint64_t v126;
  int8x16x2_t v127;
  int8x16x2_t v128;

  v19 = a16;
  v20 = *result;
  v21 = *a3;
  v22 = *a2;
  v23 = *a4;
  if (a16 < 4)
    goto LABEL_40;
  if (a7)
    v24 = 0;
  else
    v24 = -1;
  v25.i64[0] = 0xFF000000FF000000;
  v25.i64[1] = 0xFF000000FF000000;
  a9 = vandq_s8(vdupq_n_s8(v24), v25);
  if (a8)
    v26 = 0;
  else
    v26 = -1;
  v27 = vandq_s8(vdupq_n_s8(v26), v25);
  v28 = 4 * a6;
  v29 = 16 * a6;
  v30 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a14.i32[1] = 117901063;
  v31.i64[0] = -1;
  v31.i64[1] = -1;
  while (1)
  {
    v32 = *(_DWORD *)v23;
    if (*(_DWORD *)v23 == -1)
    {
      v39 = (int8x16_t *)&v23[v19];
      v40 = (int8x16_t *)v23;
      do
        v41 = v40++;
      while (v40 <= v39 && (vminvq_u8((uint8x16_t)vceqq_s8(*v41, v31)) & 0x80) != 0);
      do
      {
        v42 = v41;
        v41 = (int8x16_t *)((char *)v41 + 4);
      }
      while (v41 <= v39 && v42->i32[0] == -1);
      if (v42 < v39)
      {
        while (v42->u8[0] == 255)
        {
          v42 = (int8x16_t *)((char *)v42 + 1);
          if (v42 >= v39)
          {
            v42 = (int8x16_t *)&v23[v19];
            break;
          }
        }
      }
      v43 = 0;
      v44 = (char *)v42 - v23;
      v45 = (char *)v42 - v23;
      do
      {
        v46 = vorrq_s8(*(int8x16_t *)((char *)v20 + v43), a9);
        v47 = vorrq_s8(*(int8x16_t *)((char *)v22 + v43), v27);
        v48 = vqtbl1q_s8(v46, (int8x16_t)xmmword_185004A40);
        v49 = vqtbl1q_s8(v47, (int8x16_t)xmmword_185004A40);
        v50 = vminq_u8((uint8x16_t)v46, (uint8x16_t)v48);
        v51 = vminq_u8((uint8x16_t)v47, (uint8x16_t)v49);
        v52 = (int8x16_t)vcgeq_u8(vrhaddq_u8((uint8x16_t)v48, (uint8x16_t)0), v50);
        v53 = vzip1q_s8(v52, v52);
        v54 = vmull_u8(*(uint8x8_t *)v50.i8, *(uint8x8_t *)v51.i8);
        v55 = vmull_high_u8(v50, v51);
        v56 = vqsubq_u8((uint8x16_t)v49, v51);
        v57 = vqsubq_u8((uint8x16_t)v48, v50);
        v58 = vmull_u8(*(uint8x8_t *)v56.i8, *(uint8x8_t *)v57.i8);
        v59 = vmull_high_u8(v56, v57);
        v60 = (uint16x8_t)vbslq_s8(vzip2q_s8(v52, v52), (int8x16_t)vqaddq_u16(v55, v55), (int8x16_t)vqsubq_u16(vmull_high_u8((uint8x16_t)v49, (uint8x16_t)v48), vqaddq_u16(v59, v59)));
        v61 = (uint16x8_t)vbslq_s8(v53, (int8x16_t)vqaddq_u16(v54, v54), (int8x16_t)vqsubq_u16(vmull_u8(*(uint8x8_t *)v49.i8, *(uint8x8_t *)v48.i8), vqaddq_u16(v58, v58)));
        v62 = (uint8x16_t)vmvnq_s8(v48);
        v63 = vmull_u8(*(uint8x8_t *)v51.i8, *(uint8x8_t *)v62.i8);
        v64 = vqaddq_u16(v60, vmull_high_u8(v51, v62));
        v65 = (uint8x16_t)vmvnq_s8(v49);
        v66 = vmull_u8(*(uint8x8_t *)v50.i8, *(uint8x8_t *)v65.i8);
        v67 = vmull_high_u8(v50, v65);
        v127.val[1] = (int8x16_t)vqaddq_u16(vqaddq_u16(v61, v63), v66);
        v68 = vqaddq_u16(v64, v67);
        v69 = vminq_u16((uint16x8_t)v127.val[1], v30);
        v70 = vminq_u16(v68, v30);
        v127.val[0] = (int8x16_t)vrsraq_n_u16(v69, v69, 8uLL);
        v71 = vrsraq_n_u16(v70, v70, 8uLL);
        *(uint8x8_t *)v127.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v127.val[0], 8uLL);
        *(uint8x8_t *)v127.val[1].i8 = vqrshrn_n_u16(v71, 8uLL);
        v18 = (int8x16_t)vminq_u8(vqrshrn_high_n_u16(*(uint8x8_t *)v127.val[0].i8, v71, 8uLL), (uint8x16_t)vqtbl2q_s8(v127, (int8x16_t)xmmword_185004A50));
        v17 = vceqzq_s8(v49);
        v16 = vceqzq_s8(v48);
        *(int8x16_t *)((char *)v22 + v43) = vbslq_s8(v16, v47, vbslq_s8(v17, v46, v18));
        v23 += v28;
        v45 -= 4;
        v43 += v29;
      }
      while (v45 > 3);
      v22 = (_DWORD *)((char *)v22 + v43);
      v20 = (_DWORD *)((char *)v20 + v43);
      v19 = v19 - v44 + v45;
      goto LABEL_37;
    }
    if (v32)
      break;
    v33 = (int8x16_t *)&v23[v19];
    v34 = (int8x16_t *)v23;
    do
      v35 = v34++;
    while (v34 <= v33 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v35)) & 0x80) != 0);
    do
    {
      v36 = v35;
      v35 = (int8x16_t *)((char *)v35 + 4);
    }
    while (v35 <= v33 && !v36->i32[0]);
    if (v36 < v33)
    {
      while (!v36->i8[0])
      {
        v36 = (int8x16_t *)((char *)v36 + 1);
        if (v36 >= v33)
        {
          v36 = (int8x16_t *)&v23[v19];
          break;
        }
      }
    }
    v37 = (char *)v36 - v23;
    v38 = ((char *)v36 - v23) * a6;
    v20 += v38;
    v22 += v38;
    v23 += v38;
    v19 -= v37;
LABEL_37:
    if (v19 <= 3)
      goto LABEL_40;
  }
  v72 = 0;
  while (1)
  {
    v16.i32[0] = v32;
    v73 = vqtbl1q_s8(v16, (int8x16_t)xmmword_185004A30);
    v74 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v20 + v72), a9);
    v75 = vorrq_s8(vbicq_s8(v27, vceqzq_s8(v73)), *(int8x16_t *)((char *)v22 + v72));
    v76 = vminq_u16(vmull_u8(*(uint8x8_t *)v74.i8, *(uint8x8_t *)v73.i8), v30);
    v77 = vminq_u16(vmull_high_u8(v74, (uint8x16_t)v73), v30);
    v78 = vrsraq_n_u16(v77, v77, 8uLL);
    *(uint8x8_t *)v74.i8 = vqrshrn_n_u16(vrsraq_n_u16(v76, v76, 8uLL), 8uLL);
    *(uint8x8_t *)v18.i8 = vqrshrn_n_u16(v78, 8uLL);
    v79 = vqtbl2q_s8(*(int8x16x2_t *)(&v18 - 1), (int8x16_t)xmmword_185004A50);
    v17 = (int8x16_t)vqrshrn_high_n_u16(*(uint8x8_t *)v74.i8, v78, 8uLL);
    v80 = vqtbl1q_s8(v75, (int8x16_t)xmmword_185004A40);
    v81 = vminq_u8((uint8x16_t)v17, (uint8x16_t)v79);
    v82 = vminq_u8((uint8x16_t)v75, (uint8x16_t)v80);
    v83 = (int8x16_t)vcgeq_u8(vrhaddq_u8((uint8x16_t)v79, (uint8x16_t)0), v81);
    v84 = vzip1q_s8(v83, v83);
    v85 = vmull_u8(*(uint8x8_t *)v81.i8, *(uint8x8_t *)v82.i8);
    v86 = vmull_high_u8(v81, v82);
    v87 = vqsubq_u8((uint8x16_t)v80, v82);
    v88 = vqsubq_u8((uint8x16_t)v79, v81);
    v89 = vmull_u8(*(uint8x8_t *)v87.i8, *(uint8x8_t *)v88.i8);
    v90 = vmull_high_u8(v87, v88);
    v91 = (uint16x8_t)vbslq_s8(vzip2q_s8(v83, v83), (int8x16_t)vqaddq_u16(v86, v86), (int8x16_t)vqsubq_u16(vmull_high_u8((uint8x16_t)v80, (uint8x16_t)v79), vqaddq_u16(v90, v90)));
    v92 = (uint16x8_t)vbslq_s8(v84, (int8x16_t)vqaddq_u16(v85, v85), (int8x16_t)vqsubq_u16(vmull_u8(*(uint8x8_t *)v80.i8, *(uint8x8_t *)v79.i8), vqaddq_u16(v89, v89)));
    v93 = (uint8x16_t)vmvnq_s8(v79);
    v94 = vmull_u8(*(uint8x8_t *)v82.i8, *(uint8x8_t *)v93.i8);
    v95 = vqaddq_u16(v91, vmull_high_u8(v82, v93));
    v96 = (uint8x16_t)vmvnq_s8(v80);
    v97 = vmull_u8(*(uint8x8_t *)v81.i8, *(uint8x8_t *)v96.i8);
    v98 = vmull_high_u8(v81, v96);
    v128.val[1] = (int8x16_t)vqaddq_u16(vqaddq_u16(v92, v94), v97);
    v99 = vqaddq_u16(v95, v98);
    v100 = vminq_u16((uint16x8_t)v128.val[1], v30);
    v101 = vminq_u16(v99, v30);
    v128.val[0] = (int8x16_t)vrsraq_n_u16(v100, v100, 8uLL);
    v102 = vrsraq_n_u16(v101, v101, 8uLL);
    *(uint8x8_t *)v128.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v128.val[0], 8uLL);
    *(uint8x8_t *)v128.val[1].i8 = vqrshrn_n_u16(v102, 8uLL);
    v18 = (int8x16_t)vminq_u8(vqrshrn_high_n_u16(*(uint8x8_t *)v128.val[0].i8, v102, 8uLL), (uint8x16_t)vqtbl2q_s8(v128, (int8x16_t)xmmword_185004A50));
    v16 = vbslq_s8(vceqzq_s8(v80), v17, v18);
    *(int8x16_t *)((char *)v22 + v72) = vbslq_s8(vceqzq_s8(v79), v75, v16);
    v23 += v28;
    v19 -= 4;
    if (v19 < 4)
      break;
    v32 = *(_DWORD *)v23;
    v72 += v29;
    if ((*(_DWORD *)v23 - 1) >= 0xFFFFFFFE)
    {
      v20 = (_DWORD *)((char *)v20 + v72);
      v22 = (_DWORD *)((char *)v22 + v72);
      goto LABEL_37;
    }
  }
  v20 = (_DWORD *)((char *)v20 + v29 + v72);
  v22 = (_DWORD *)((char *)v22 + v29 + v72);
LABEL_40:
  v103 = v19 + a15;
  if (v103)
  {
    if (a7)
      v104 = 0;
    else
      v104 = -1;
    v105 = vdup_n_s8(v104);
    if (a8)
      v106 = 0;
    else
      v106 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(v105, (int8x8_t)0xFF000000FF000000);
    v107 = vand_s8(vdup_n_s8(v106), (int8x8_t)0xFF000000FF000000);
    v108 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a14.i32[0] = *v20;
      v109 = vmovl_u8(a14);
      LOBYTE(v110) = v109.i8[0];
      BYTE1(v110) = v109.i8[2];
      BYTE2(v110) = v109.i8[4];
      HIBYTE(v110) = v109.i8[6];
      v109.i32[0] = *v22;
      v111 = vmovl_u8(*(uint8x8_t *)v109.i8);
      LOBYTE(v112) = v111.i8[0];
      BYTE1(v112) = v111.i8[2];
      BYTE2(v112) = v111.i8[4];
      HIBYTE(v112) = v111.i8[6];
      v111.i8[0] = *v23;
      v111.i8[1] = *v23;
      v111.i8[2] = *v23;
      v111.i8[3] = *v23;
      v113 = vorr_s8(vbic_s8(v107, vceqz_s8((int8x8_t)v111.u32[0])), (int8x8_t)v112);
      v114 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v110, *(int8x8_t *)a9.i8), (uint8x8_t)v111.u32[0]), v108);
      v115 = (int8x16_t)vrsraq_n_u16(v114, v114, 8uLL);
      v116 = (int8x8_t)vqrshrn_n_u16((uint16x8_t)v115, 8uLL);
      *(int8x8_t *)v115.i8 = vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16((uint8x8_t)v116, (uint16x8_t)v115, 8uLL), (int8x8_t)0x707070703030303);
      *(int8x8_t *)v117.i8 = v113;
      v117.u64[1] = (unint64_t)v113;
      *(int8x8_t *)v117.i8 = vqtbl1_s8(v117, (int8x8_t)0x707070703030303);
      v118 = vmin_u8((uint8x8_t)v116, *(uint8x8_t *)v115.i8);
      v119 = vmin_u8((uint8x8_t)v113, *(uint8x8_t *)v117.i8);
      *(uint8x8_t *)v17.i8 = vcge_u8(vrhadd_u8(*(uint8x8_t *)v115.i8, 0), v118);
      v120 = vmull_u8(v118, v119);
      v121 = vmull_u8(vqsub_u8(*(uint8x8_t *)v117.i8, v119), vqsub_u8(*(uint8x8_t *)v115.i8, v118));
      v122 = vminq_u16(vqaddq_u16(vqaddq_u16((uint16x8_t)vbslq_s8(vzip1q_s8(v17, v17), (int8x16_t)vqaddq_u16(v120, v120), (int8x16_t)vqsubq_u16(vmull_u8(*(uint8x8_t *)v117.i8, *(uint8x8_t *)v115.i8), vqaddq_u16(v121, v121))), vmull_u8(v119, (uint8x8_t)vmvn_s8(*(int8x8_t *)v115.i8))), vmull_u8(v118, (uint8x8_t)vmvn_s8(*(int8x8_t *)v117.i8))), v108);
      v123 = vrsraq_n_u16(v122, v122, 8uLL);
      v124 = vqrshrn_n_u16(v123, 8uLL);
      v17 = (int8x16_t)vqrshrn_high_n_u16(v124, v123, 8uLL);
      *(int8x8_t *)v115.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v115.i8), v113, vbsl_s8(vceqz_s8(*(int8x8_t *)v117.i8), v116, (int8x8_t)vmin_u8(v124, (uint8x8_t)vqtbl1_s8(v17, (int8x8_t)0x707070703030303))));
      a14 = (uint8x8_t)vmovn_s16((int16x8_t)vzip1q_s8(v115, a9));
      *v22 = a14.i32[0];
      v125 = &v20[a6];
      v23 += a6;
      if ((unint64_t)v125 >= v21)
        v126 = -(uint64_t)a5;
      else
        v126 = 0;
      v20 = &v125[v126];
      v22 += a6;
      --v103;
    }
    while (v103);
  }
  *result = v20;
  *a3 = v21;
  *a2 = v22;
  *a4 = v23;
  return result;
}

_DWORD **vec::template_mark_pixelmask_row<(CGCompositeOperation)22,_rgba8_t>(_DWORD **result, _DWORD **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, int8x16_t a9, double a10, double a11, double a12, double a13, uint8x8_t a14, uint64_t a15, unint64_t a16)
{
  int8x16_t v16;
  int8x16_t v17;
  unint64_t v18;
  _DWORD *v19;
  unint64_t v20;
  _DWORD *v21;
  char *v22;
  unsigned int v23;
  int8x16_t v24;
  unsigned int v25;
  int8x16_t v26;
  uint64_t v27;
  uint64_t v28;
  uint16x8_t v29;
  int8x16_t v30;
  int8x16_t v31;
  __int32 v32;
  int8x16_t *v33;
  int8x16_t *v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int64_t v37;
  int64_t v38;
  int8x16_t *v39;
  int8x16_t *v40;
  int8x16_t *v41;
  int8x16_t *v42;
  uint64_t v43;
  int64_t v44;
  unint64_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  uint8x16_t v50;
  uint8x16_t v51;
  uint8x16_t v52;
  uint8x16_t v53;
  uint16x8_t v54;
  uint16x8_t v55;
  uint16x8_t v56;
  uint16x8_t v57;
  uint64_t v58;
  int8x16_t v59;
  uint8x16_t v60;
  int8x16_t v61;
  uint16x8_t v62;
  uint16x8_t v63;
  uint16x8_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  uint8x16_t v68;
  uint8x16_t v69;
  uint8x16_t v70;
  uint8x16_t v71;
  uint16x8_t v72;
  uint16x8_t v73;
  uint16x8_t v74;
  uint16x8_t v75;
  uint64_t v76;
  unsigned int v77;
  int8x8_t v78;
  unsigned int v79;
  int8x8_t v80;
  uint16x8_t v81;
  int8x16_t v82;
  uint16x8_t v83;
  unsigned int v84;
  uint16x8_t v85;
  unsigned int v86;
  int8x8_t v87;
  uint16x8_t v88;
  int8x16_t v89;
  int8x8_t v90;
  int8x16_t v91;
  uint8x8_t v92;
  uint8x8_t v93;
  uint16x8_t v94;
  uint16x8_t v95;
  uint8x8_t v96;
  _DWORD *v97;
  uint64_t v98;
  int8x16x2_t v99;
  int8x16x2_t v100;

  v18 = a16;
  v19 = *result;
  v20 = *a3;
  v21 = *a2;
  v22 = *a4;
  if (a16 < 4)
    goto LABEL_40;
  if (a7)
    v23 = 0;
  else
    v23 = -1;
  v24.i64[0] = 0xFF000000FF000000;
  v24.i64[1] = 0xFF000000FF000000;
  a9 = vandq_s8(vdupq_n_s8(v23), v24);
  if (a8)
    v25 = 0;
  else
    v25 = -1;
  v26 = vandq_s8(vdupq_n_s8(v25), v24);
  v27 = 4 * a6;
  v28 = 16 * a6;
  v29 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  v30.i64[0] = 0xFFFFFFFFFFFFLL;
  v30.i64[1] = 0xFFFFFFFFFFFFLL;
  a14.i32[1] = 117901063;
  v31.i64[0] = -1;
  v31.i64[1] = -1;
  while (1)
  {
    v32 = *(_DWORD *)v22;
    if (*(_DWORD *)v22 == -1)
    {
      v39 = (int8x16_t *)&v22[v18];
      v40 = (int8x16_t *)v22;
      do
        v41 = v40++;
      while (v40 <= v39 && (vminvq_u8((uint8x16_t)vceqq_s8(*v41, v31)) & 0x80) != 0);
      do
      {
        v42 = v41;
        v41 = (int8x16_t *)((char *)v41 + 4);
      }
      while (v41 <= v39 && v42->i32[0] == -1);
      if (v42 < v39)
      {
        while (v42->u8[0] == 255)
        {
          v42 = (int8x16_t *)((char *)v42 + 1);
          if (v42 >= v39)
          {
            v42 = (int8x16_t *)&v22[v18];
            break;
          }
        }
      }
      v43 = 0;
      v44 = (char *)v42 - v22;
      v45 = (char *)v42 - v22;
      do
      {
        v46 = vorrq_s8(*(int8x16_t *)((char *)v19 + v43), a9);
        v47 = vorrq_s8(*(int8x16_t *)((char *)v21 + v43), v26);
        v48 = vqtbl1q_s8(v46, (int8x16_t)xmmword_185004A40);
        v49 = vqtbl1q_s8(v47, (int8x16_t)xmmword_185004A40);
        v50 = vminq_u8((uint8x16_t)v46, (uint8x16_t)v48);
        v51 = vminq_u8((uint8x16_t)v47, (uint8x16_t)v49);
        v52 = (uint8x16_t)vmvnq_s8(v48);
        v53 = (uint8x16_t)vmvnq_s8(v49);
        v99.val[1] = (int8x16_t)vqaddq_u16(vqaddq_u16(vabdq_u16(vmull_u8(*(uint8x8_t *)v50.i8, *(uint8x8_t *)v49.i8), (uint16x8_t)vandq_s8((int8x16_t)vmull_u8(*(uint8x8_t *)v51.i8, *(uint8x8_t *)v48.i8), v30)), vmull_u8(*(uint8x8_t *)v51.i8, *(uint8x8_t *)v52.i8)), vmull_u8(*(uint8x8_t *)v50.i8, *(uint8x8_t *)v53.i8));
        v54 = vqaddq_u16(vqaddq_u16(vabdq_u16(vmull_high_u8(v50, (uint8x16_t)v49), (uint16x8_t)vandq_s8((int8x16_t)vmull_high_u8(v51, (uint8x16_t)v48), v30)), vmull_high_u8(v51, v52)), vmull_high_u8(v50, v53));
        v55 = vminq_u16((uint16x8_t)v99.val[1], v29);
        v56 = vminq_u16(v54, v29);
        v99.val[0] = (int8x16_t)vrsraq_n_u16(v55, v55, 8uLL);
        v57 = vrsraq_n_u16(v56, v56, 8uLL);
        *(uint8x8_t *)v99.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v99.val[0], 8uLL);
        *(uint8x8_t *)v99.val[1].i8 = vqrshrn_n_u16(v57, 8uLL);
        v17 = (int8x16_t)vminq_u8(vqrshrn_high_n_u16(*(uint8x8_t *)v99.val[0].i8, v57, 8uLL), (uint8x16_t)vqtbl2q_s8(v99, (int8x16_t)xmmword_185004A50));
        v16 = vceqzq_s8(v48);
        *(int8x16_t *)((char *)v21 + v43) = vbslq_s8(v16, v47, vbslq_s8(vceqzq_s8(v49), v46, v17));
        v22 += v27;
        v45 -= 4;
        v43 += v28;
      }
      while (v45 > 3);
      v21 = (_DWORD *)((char *)v21 + v43);
      v19 = (_DWORD *)((char *)v19 + v43);
      v18 = v18 - v44 + v45;
      goto LABEL_37;
    }
    if (v32)
      break;
    v33 = (int8x16_t *)&v22[v18];
    v34 = (int8x16_t *)v22;
    do
      v35 = v34++;
    while (v34 <= v33 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v35)) & 0x80) != 0);
    do
    {
      v36 = v35;
      v35 = (int8x16_t *)((char *)v35 + 4);
    }
    while (v35 <= v33 && !v36->i32[0]);
    if (v36 < v33)
    {
      while (!v36->i8[0])
      {
        v36 = (int8x16_t *)((char *)v36 + 1);
        if (v36 >= v33)
        {
          v36 = (int8x16_t *)&v22[v18];
          break;
        }
      }
    }
    v37 = (char *)v36 - v22;
    v38 = ((char *)v36 - v22) * a6;
    v19 += v38;
    v21 += v38;
    v22 += v38;
    v18 -= v37;
LABEL_37:
    if (v18 <= 3)
      goto LABEL_40;
  }
  v58 = 0;
  while (1)
  {
    v16.i32[0] = v32;
    v59 = vqtbl1q_s8(v16, (int8x16_t)xmmword_185004A30);
    v60 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v19 + v58), a9);
    v61 = vorrq_s8(vbicq_s8(v26, vceqzq_s8(v59)), *(int8x16_t *)((char *)v21 + v58));
    v62 = vminq_u16(vmull_u8(*(uint8x8_t *)v60.i8, *(uint8x8_t *)v59.i8), v29);
    v63 = vminq_u16(vmull_high_u8(v60, (uint8x16_t)v59), v29);
    v64 = vrsraq_n_u16(v63, v63, 8uLL);
    *(uint8x8_t *)v60.i8 = vqrshrn_n_u16(vrsraq_n_u16(v62, v62, 8uLL), 8uLL);
    *(uint8x8_t *)v17.i8 = vqrshrn_n_u16(v64, 8uLL);
    v65 = vqtbl2q_s8(*(int8x16x2_t *)(&v17 - 1), (int8x16_t)xmmword_185004A50);
    v66 = (int8x16_t)vqrshrn_high_n_u16(*(uint8x8_t *)v60.i8, v64, 8uLL);
    v67 = vqtbl1q_s8(v61, (int8x16_t)xmmword_185004A40);
    v68 = vminq_u8((uint8x16_t)v66, (uint8x16_t)v65);
    v69 = vminq_u8((uint8x16_t)v61, (uint8x16_t)v67);
    v70 = (uint8x16_t)vmvnq_s8(v65);
    v71 = (uint8x16_t)vmvnq_s8(v67);
    v100.val[1] = (int8x16_t)vqaddq_u16(vqaddq_u16(vabdq_u16(vmull_u8(*(uint8x8_t *)v68.i8, *(uint8x8_t *)v67.i8), (uint16x8_t)vandq_s8((int8x16_t)vmull_u8(*(uint8x8_t *)v69.i8, *(uint8x8_t *)v65.i8), v30)), vmull_u8(*(uint8x8_t *)v69.i8, *(uint8x8_t *)v70.i8)), vmull_u8(*(uint8x8_t *)v68.i8, *(uint8x8_t *)v71.i8));
    v72 = vqaddq_u16(vqaddq_u16(vabdq_u16(vmull_high_u8(v68, (uint8x16_t)v67), (uint16x8_t)vandq_s8((int8x16_t)vmull_high_u8(v69, (uint8x16_t)v65), v30)), vmull_high_u8(v69, v70)), vmull_high_u8(v68, v71));
    v73 = vminq_u16((uint16x8_t)v100.val[1], v29);
    v74 = vminq_u16(v72, v29);
    v100.val[0] = (int8x16_t)vrsraq_n_u16(v73, v73, 8uLL);
    v75 = vrsraq_n_u16(v74, v74, 8uLL);
    *(uint8x8_t *)v100.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v100.val[0], 8uLL);
    *(uint8x8_t *)v100.val[1].i8 = vqrshrn_n_u16(v75, 8uLL);
    v17 = (int8x16_t)vminq_u8(vqrshrn_high_n_u16(*(uint8x8_t *)v100.val[0].i8, v75, 8uLL), (uint8x16_t)vqtbl2q_s8(v100, (int8x16_t)xmmword_185004A50));
    v16 = vbslq_s8(vceqzq_s8(v67), v66, v17);
    *(int8x16_t *)((char *)v21 + v58) = vbslq_s8(vceqzq_s8(v65), v61, v16);
    v22 += v27;
    v18 -= 4;
    if (v18 < 4)
      break;
    v32 = *(_DWORD *)v22;
    v58 += v28;
    if ((*(_DWORD *)v22 - 1) >= 0xFFFFFFFE)
    {
      v19 = (_DWORD *)((char *)v19 + v58);
      v21 = (_DWORD *)((char *)v21 + v58);
      goto LABEL_37;
    }
  }
  v19 = (_DWORD *)((char *)v19 + v28 + v58);
  v21 = (_DWORD *)((char *)v21 + v28 + v58);
LABEL_40:
  v76 = v18 + a15;
  if (v76)
  {
    if (a7)
      v77 = 0;
    else
      v77 = -1;
    v78 = vdup_n_s8(v77);
    if (a8)
      v79 = 0;
    else
      v79 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(v78, (int8x8_t)0xFF000000FF000000);
    v80 = vand_s8(vdup_n_s8(v79), (int8x8_t)0xFF000000FF000000);
    v81 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    v82.i64[0] = 0xFFFFFFFFFFFFLL;
    v82.i64[1] = 0xFFFFFFFFFFFFLL;
    do
    {
      a14.i32[0] = *v19;
      v83 = vmovl_u8(a14);
      LOBYTE(v84) = v83.i8[0];
      BYTE1(v84) = v83.i8[2];
      BYTE2(v84) = v83.i8[4];
      HIBYTE(v84) = v83.i8[6];
      v83.i32[0] = *v21;
      v85 = vmovl_u8(*(uint8x8_t *)v83.i8);
      LOBYTE(v86) = v85.i8[0];
      BYTE1(v86) = v85.i8[2];
      BYTE2(v86) = v85.i8[4];
      HIBYTE(v86) = v85.i8[6];
      v85.i8[0] = *v22;
      v85.i8[1] = *v22;
      v85.i8[2] = *v22;
      v85.i8[3] = *v22;
      v87 = vorr_s8(vbic_s8(v80, vceqz_s8((int8x8_t)v85.u32[0])), (int8x8_t)v86);
      v88 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v84, *(int8x8_t *)a9.i8), (uint8x8_t)v85.u32[0]), v81);
      v89 = (int8x16_t)vrsraq_n_u16(v88, v88, 8uLL);
      v90 = (int8x8_t)vqrshrn_n_u16((uint16x8_t)v89, 8uLL);
      *(int8x8_t *)v89.i8 = vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16((uint8x8_t)v90, (uint16x8_t)v89, 8uLL), (int8x8_t)0x707070703030303);
      *(int8x8_t *)v91.i8 = v87;
      v91.u64[1] = (unint64_t)v87;
      *(int8x8_t *)v91.i8 = vqtbl1_s8(v91, (int8x8_t)0x707070703030303);
      v92 = vmin_u8((uint8x8_t)v90, *(uint8x8_t *)v89.i8);
      v93 = vmin_u8((uint8x8_t)v87, *(uint8x8_t *)v91.i8);
      v94 = vminq_u16(vqaddq_u16(vqaddq_u16(vabdq_u16(vmull_u8(v92, *(uint8x8_t *)v91.i8), (uint16x8_t)vandq_s8((int8x16_t)vmull_u8(v93, *(uint8x8_t *)v89.i8), v82)), vmull_u8(v93, (uint8x8_t)vmvn_s8(*(int8x8_t *)v89.i8))), vmull_u8(v92, (uint8x8_t)vmvn_s8(*(int8x8_t *)v91.i8))), v81);
      v95 = vrsraq_n_u16(v94, v94, 8uLL);
      v96 = vqrshrn_n_u16(v95, 8uLL);
      *(int8x8_t *)v89.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v89.i8), v87, vbsl_s8(vceqz_s8(*(int8x8_t *)v91.i8), v90, (int8x8_t)vmin_u8(v96, (uint8x8_t)vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16(v96, v95, 8uLL), (int8x8_t)0x707070703030303))));
      a14 = (uint8x8_t)vmovn_s16((int16x8_t)vzip1q_s8(v89, a9));
      *v21 = a14.i32[0];
      v97 = &v19[a6];
      v22 += a6;
      if ((unint64_t)v97 >= v20)
        v98 = -(uint64_t)a5;
      else
        v98 = 0;
      v19 = &v97[v98];
      v21 += a6;
      --v76;
    }
    while (v76);
  }
  *result = v19;
  *a3 = v20;
  *a2 = v21;
  *a4 = v22;
  return result;
}

unsigned __int32 **vec::template_mark_pixelmask_row<(CGCompositeOperation)23,_rgba8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, int8x16_t a9, double a10, double a11, double a12, uint16x8_t a13, uint64_t a14, unint64_t a15)
{
  int8x16_t v15;
  unint64_t v16;
  unsigned __int32 *v17;
  unint64_t v18;
  _DWORD *v19;
  char *v20;
  unsigned int v21;
  int8x16_t v22;
  unsigned int v23;
  int8x16_t v24;
  uint64_t v25;
  uint64_t v26;
  uint16x8_t v27;
  __int32 v28;
  int8x16_t *v29;
  int8x16_t *v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int64_t v33;
  int64_t v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  int8x16_t *v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  uint8x16_t v46;
  int8x16_t v47;
  uint8x16_t v48;
  int8x16_t v49;
  uint8x16_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  uint8x16_t v55;
  int8x16_t v56;
  uint64_t v57;
  int8x16_t v58;
  uint8x16_t v59;
  int8x16_t v60;
  uint16x8_t v61;
  uint16x8_t v62;
  uint16x8_t v63;
  uint16x8_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  uint8x16_t v68;
  int8x16_t v69;
  uint8x16_t v70;
  uint16x8_t v71;
  uint16x8_t v72;
  uint8x16_t v73;
  int8x16_t v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  int8x8_t v78;
  uint16x8_t v79;
  uint16x8_t v80;
  unsigned int v81;
  uint16x8_t v82;
  unsigned int v83;
  int8x8_t v84;
  uint16x8_t v85;
  int8x8_t v86;
  int8x16_t v87;
  int8x8_t v88;
  uint8x8_t v89;
  uint16x8_t v90;
  int8x16_t v91;
  unsigned __int32 *v92;
  uint64_t v93;
  int8x16x2_t v94;

  v16 = a15;
  v17 = *result;
  v18 = *a3;
  v19 = *a2;
  v20 = *a4;
  if (a15 < 4)
    goto LABEL_40;
  if (a7)
    v21 = 0;
  else
    v21 = -1;
  v22.i64[0] = 0xFF000000FF000000;
  v22.i64[1] = 0xFF000000FF000000;
  a9 = vandq_s8(vdupq_n_s8(v21), v22);
  if (a8)
    v23 = 0;
  else
    v23 = -1;
  v24 = vandq_s8(vdupq_n_s8(v23), v22);
  v25 = 4 * a6;
  v26 = 16 * a6;
  v27 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a13.i64[0] = -1;
  a13.i64[1] = -1;
  while (1)
  {
    v28 = *(_DWORD *)v20;
    if (*(_DWORD *)v20 == -1)
    {
      v35 = (int8x16_t *)&v20[v16];
      v36 = (int8x16_t *)v20;
      do
        v37 = v36++;
      while (v36 <= v35 && (vminvq_u8((uint8x16_t)vceqq_s8(*v37, (int8x16_t)a13)) & 0x80) != 0);
      do
      {
        v38 = v37;
        v37 = (int8x16_t *)((char *)v37 + 4);
      }
      while (v37 <= v35 && v38->i32[0] == -1);
      if (v38 < v35)
      {
        while (v38->u8[0] == 255)
        {
          v38 = (int8x16_t *)((char *)v38 + 1);
          if (v38 >= v35)
          {
            v38 = (int8x16_t *)&v20[v16];
            break;
          }
        }
      }
      v39 = 0;
      v40 = (char *)v38 - v20;
      v41 = (char *)v38 - v20;
      do
      {
        v42 = vorrq_s8(*(int8x16_t *)((char *)v17 + v39), a9);
        v43 = vorrq_s8(*(int8x16_t *)((char *)v19 + v39), v24);
        v44 = vqtbl1q_s8(v42, (int8x16_t)xmmword_185004A40);
        v45 = vqtbl1q_s8(v43, (int8x16_t)xmmword_185004A40);
        v46 = vminq_u8((uint8x16_t)v42, (uint8x16_t)v44);
        v47 = (int8x16_t)vminq_u8((uint8x16_t)v43, (uint8x16_t)v45);
        v48 = (uint8x16_t)vmvnq_s8(v47);
        v49 = (int8x16_t)vcgtq_u8((uint8x16_t)(*(_OWORD *)&v47 & __PAIR128__(0xFFFFFF00FFFFFFLL, 0xFFFFFF00FFFFFFLL)), v48);
        v50 = vabdq_u8(v48, (uint8x16_t)(*(_OWORD *)&v47 & __PAIR128__(0xFFFFFF00FFFFFFLL, 0xFFFFFF00FFFFFFLL)));
        v51 = vmull_u8(*(uint8x8_t *)v46.i8, *(uint8x8_t *)v50.i8);
        v52 = vmull_high_u8(v46, v50);
        v53 = vminq_u16(v51, v27);
        v54 = vminq_u16(v52, v27);
        v55 = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v53, v53, 8uLL), 8uLL), vrsraq_n_u16(v54, v54, 8uLL), 8uLL);
        v56 = vbslq_s8(v49, (int8x16_t)vqsubq_u8((uint8x16_t)v47, v55), (int8x16_t)vqaddq_u8((uint8x16_t)v47, v55));
        v15 = vceqzq_s8(v44);
        *(int8x16_t *)((char *)v19 + v39) = vbslq_s8(v15, v43, vbslq_s8(vceqzq_s8(v45), v42, (int8x16_t)vminq_u8((uint8x16_t)v56, (uint8x16_t)vqtbl1q_s8(v56, (int8x16_t)xmmword_185004A40))));
        v20 += v25;
        v41 -= 4;
        v39 += v26;
      }
      while (v41 > 3);
      v19 = (_DWORD *)((char *)v19 + v39);
      v17 = (unsigned __int32 *)((char *)v17 + v39);
      v16 = v16 - v40 + v41;
      goto LABEL_37;
    }
    if (v28)
      break;
    v29 = (int8x16_t *)&v20[v16];
    v30 = (int8x16_t *)v20;
    do
      v31 = v30++;
    while (v30 <= v29 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v31)) & 0x80) != 0);
    do
    {
      v32 = v31;
      v31 = (int8x16_t *)((char *)v31 + 4);
    }
    while (v31 <= v29 && !v32->i32[0]);
    if (v32 < v29)
    {
      while (!v32->i8[0])
      {
        v32 = (int8x16_t *)((char *)v32 + 1);
        if (v32 >= v29)
        {
          v32 = (int8x16_t *)&v20[v16];
          break;
        }
      }
    }
    v33 = (char *)v32 - v20;
    v34 = ((char *)v32 - v20) * a6;
    v17 += v34;
    v19 += v34;
    v20 += v34;
    v16 -= v33;
LABEL_37:
    if (v16 <= 3)
      goto LABEL_40;
  }
  v57 = 0;
  while (1)
  {
    v15.i32[0] = v28;
    v58 = vqtbl1q_s8(v15, (int8x16_t)xmmword_185004A30);
    v59 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v17 + v57), a9);
    v60 = vorrq_s8(vbicq_s8(v24, vceqzq_s8(v58)), *(int8x16_t *)((char *)v19 + v57));
    v94.val[1] = (int8x16_t)vmull_u8(*(uint8x8_t *)v59.i8, *(uint8x8_t *)v58.i8);
    v61 = vmull_high_u8(v59, (uint8x16_t)v58);
    v62 = vminq_u16((uint16x8_t)v94.val[1], v27);
    v63 = vminq_u16(v61, v27);
    v94.val[0] = (int8x16_t)vrsraq_n_u16(v62, v62, 8uLL);
    v64 = vrsraq_n_u16(v63, v63, 8uLL);
    *(uint8x8_t *)v94.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v94.val[0], 8uLL);
    *(uint8x8_t *)v94.val[1].i8 = vqrshrn_n_u16(v64, 8uLL);
    v65 = vqtbl2q_s8(v94, (int8x16_t)xmmword_185004A50);
    v94.val[0] = (int8x16_t)vqrshrn_high_n_u16(*(uint8x8_t *)v94.val[0].i8, v64, 8uLL);
    v66 = vqtbl1q_s8(v60, (int8x16_t)xmmword_185004A40);
    v94.val[1] = (int8x16_t)vminq_u8((uint8x16_t)v94.val[0], (uint8x16_t)v65);
    v67 = (int8x16_t)vminq_u8((uint8x16_t)v60, (uint8x16_t)v66);
    v68 = (uint8x16_t)vmvnq_s8(v67);
    v69 = (int8x16_t)vcgtq_u8((uint8x16_t)(*(_OWORD *)&v67 & __PAIR128__(0xFFFFFF00FFFFFFLL, 0xFFFFFF00FFFFFFLL)), v68);
    v70 = vabdq_u8(v68, (uint8x16_t)(*(_OWORD *)&v67 & __PAIR128__(0xFFFFFF00FFFFFFLL, 0xFFFFFF00FFFFFFLL)));
    v71 = vmull_u8(*(uint8x8_t *)v94.val[1].i8, *(uint8x8_t *)v70.i8);
    v94.val[1] = (int8x16_t)vmull_high_u8((uint8x16_t)v94.val[1], v70);
    v72 = vminq_u16(v71, v27);
    v94.val[1] = (int8x16_t)vminq_u16((uint16x8_t)v94.val[1], v27);
    v73 = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v72, v72, 8uLL), 8uLL), vrsraq_n_u16((uint16x8_t)v94.val[1], (uint16x8_t)v94.val[1], 8uLL), 8uLL);
    v94.val[1] = vbslq_s8(v69, (int8x16_t)vqsubq_u8((uint8x16_t)v67, v73), (int8x16_t)vqaddq_u8((uint8x16_t)v67, v73));
    v74 = vbslq_s8(vceqzq_s8(v66), v94.val[0], (int8x16_t)vminq_u8((uint8x16_t)v94.val[1], (uint8x16_t)vqtbl1q_s8(v94.val[1], (int8x16_t)xmmword_185004A40)));
    v15 = vceqzq_s8(v65);
    *(int8x16_t *)((char *)v19 + v57) = vbslq_s8(v15, v60, v74);
    v20 += v25;
    v16 -= 4;
    if (v16 < 4)
      break;
    v28 = *(_DWORD *)v20;
    v57 += v26;
    if ((*(_DWORD *)v20 - 1) >= 0xFFFFFFFE)
    {
      v17 = (unsigned __int32 *)((char *)v17 + v57);
      v19 = (_DWORD *)((char *)v19 + v57);
      goto LABEL_37;
    }
  }
  v17 = (unsigned __int32 *)((char *)v17 + v26 + v57);
  v19 = (_DWORD *)((char *)v19 + v26 + v57);
LABEL_40:
  v75 = v16 + a14;
  if (v75)
  {
    if (a7)
      v76 = 0;
    else
      v76 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v76), (int8x8_t)0xFF000000FF000000);
    if (a8)
      v77 = 0;
    else
      v77 = -1;
    v78 = vand_s8(vdup_n_s8(v77), (int8x8_t)0xFF000000FF000000);
    v79 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a13.i32[0] = *v17;
      v80 = vmovl_u8(*(uint8x8_t *)a13.i8);
      LOBYTE(v81) = v80.i8[0];
      BYTE1(v81) = v80.i8[2];
      BYTE2(v81) = v80.i8[4];
      HIBYTE(v81) = v80.i8[6];
      v80.i32[0] = *v19;
      v82 = vmovl_u8(*(uint8x8_t *)v80.i8);
      LOBYTE(v83) = v82.i8[0];
      BYTE1(v83) = v82.i8[2];
      BYTE2(v83) = v82.i8[4];
      HIBYTE(v83) = v82.i8[6];
      v82.i8[0] = *v20;
      v82.i8[1] = *v20;
      v82.i8[2] = *v20;
      v82.i8[3] = *v20;
      v84 = vorr_s8(vbic_s8(v78, vceqz_s8((int8x8_t)v82.u32[0])), (int8x8_t)v83);
      v85 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v81, *(int8x8_t *)a9.i8), (uint8x8_t)v82.u32[0]), v79);
      a13 = vrsraq_n_u16(v85, v85, 8uLL);
      v86 = (int8x8_t)vqrshrn_n_u16(a13, 8uLL);
      *(int8x8_t *)a13.i8 = vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16((uint8x8_t)v86, a13, 8uLL), (int8x8_t)0x707070703030303);
      *(int8x8_t *)v87.i8 = v84;
      v87.u64[1] = (unint64_t)v84;
      *(int8x8_t *)v87.i8 = vqtbl1_s8(v87, (int8x8_t)0x707070703030303);
      v88 = (int8x8_t)vmin_u8((uint8x8_t)v84, *(uint8x8_t *)v87.i8);
      v89 = (uint8x8_t)vmvn_s8(v88);
      v90 = vminq_u16(vmull_u8(vmin_u8((uint8x8_t)v86, *(uint8x8_t *)a13.i8), vabd_u8(v89, (uint8x8_t)(*(_QWORD *)&v88 & 0xFFFFFF00FFFFFFLL))), v79);
      *(uint8x8_t *)v90.i8 = vqrshrn_n_u16(vrsraq_n_u16(v90, v90, 8uLL), 8uLL);
      *(int8x8_t *)v91.i8 = vbsl_s8((int8x8_t)vcgt_u8((uint8x8_t)(*(_QWORD *)&v88 & 0xFFFFFF00FFFFFFLL), v89), (int8x8_t)vqsub_u8((uint8x8_t)v88, *(uint8x8_t *)v90.i8), (int8x8_t)vqadd_u8((uint8x8_t)v88, *(uint8x8_t *)v90.i8));
      v91.i64[1] = v91.i64[0];
      *(int8x8_t *)a13.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)a13.i8), v84, vbsl_s8(vceqz_s8(*(int8x8_t *)v87.i8), v86, (int8x8_t)vmin_u8(*(uint8x8_t *)v91.i8, (uint8x8_t)vqtbl1_s8(v91, (int8x8_t)0x707070703030303))));
      *(int8x8_t *)a13.i8 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a13, a9));
      *v19 = a13.i32[0];
      v92 = &v17[a6];
      v20 += a6;
      if ((unint64_t)v92 >= v18)
        v93 = -(uint64_t)a5;
      else
        v93 = 0;
      v17 = &v92[v93];
      v19 += a6;
      --v75;
    }
    while (v75);
  }
  *result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

uint64_t *vec::template_mark_pixelshape_row<(CGCompositeOperation)0,_rgba8_t>(uint64_t *result, _DWORD **a2, unint64_t *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t i;
  unint64_t v15;
  uint64_t v16;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 4)
  {
    v13 = 0;
    do
    {
      *(_OWORD *)&v12[v13] = 0uLL;
      v9 -= 4;
      v13 += 4 * a5;
    }
    while (v9 > 3);
    v12 = (_DWORD *)((char *)v12 + v13 * 4);
    v10 += v13 * 4;
  }
  for (i = v9 + a8; i; --i)
  {
    *v12 = 0;
    v15 = v10 + 4 * a5;
    if (v15 >= v11)
      v16 = -(uint64_t)a4;
    else
      v16 = 0;
    v10 = v15 + 4 * v16;
    v12 += a5;
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

_DWORD **vec::template_mark_pixelshape_row<(CGCompositeOperation)1,_rgba8_t>(_DWORD **result, _DWORD **a2, unint64_t *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t i;
  _DWORD *v15;
  uint64_t v16;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 4)
  {
    v13 = 0;
    do
    {
      *(_OWORD *)&v12[v13] = *(_OWORD *)&v10[v13];
      v9 -= 4;
      v13 += 4 * a5;
    }
    while (v9 > 3);
    v12 = (_DWORD *)((char *)v12 + v13 * 4);
    v10 = (_DWORD *)((char *)v10 + v13 * 4);
  }
  for (i = v9 + a8; i; --i)
  {
    *v12 = *v10;
    v15 = &v10[a5];
    if ((unint64_t)v15 >= v11)
      v16 = -(uint64_t)a4;
    else
      v16 = 0;
    v10 = &v15[v16];
    v12 += a5;
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)2,_rgba8_t>(unsigned __int32 **result, unsigned __int32 **a2, unint64_t *a3, int a4, int a5, int8x16_t a6, double a7, __n128 a8, double a9, uint16x8_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14)
{
  unint64_t v14;
  unsigned __int32 *v15;
  unint64_t v16;
  unsigned __int32 *v17;
  uint64_t v18;
  uint16x8_t v19;
  int8x16_t v20;
  uint8x16_t v21;
  int8x16_t v22;
  uint8x16_t v23;
  uint16x8_t v24;
  uint16x8_t v25;
  uint64_t v26;
  uint16x8_t v27;
  int8x8_t v28;
  unsigned int v29;
  unsigned int v30;
  int8x8_t v31;
  uint16x8_t v32;
  unsigned __int32 *v33;
  uint64_t v34;

  v14 = a14;
  v15 = *result;
  v16 = *a3;
  v17 = *a2;
  if (a14 >= 4)
  {
    v18 = 0;
    a6.i64[1] = 0xF0F0F0F0B0B0B0BLL;
    v19 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      v20 = *(int8x16_t *)&v15[v18];
      v21 = *(uint8x16_t *)&v17[v18];
      v22 = vqtbl1q_s8(v20, (int8x16_t)xmmword_185004A40);
      v23 = (uint8x16_t)vbicq_s8(v20, vceqzq_s8(v22));
      v24 = vminq_u16(vmull_u8(*(uint8x8_t *)v21.i8, *(uint8x8_t *)v22.i8), v19);
      v25 = vminq_u16(vmull_high_u8(v21, (uint8x16_t)v22), v19);
      a10 = vrsraq_n_u16(v25, v25, 8uLL);
      a8 = (__n128)vqaddq_u8(v23, vqsubq_u8(v21, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v24, v24, 8uLL), 8uLL), a10, 8uLL)));
      *(__n128 *)&v17[v18] = a8;
      v14 -= 4;
      v18 += 4 * a5;
    }
    while (v14 > 3);
    v17 = (unsigned __int32 *)((char *)v17 + v18 * 4);
    v15 = (unsigned __int32 *)((char *)v15 + v18 * 4);
  }
  v26 = v14 + a13;
  if (v26)
  {
    a6.i64[0] = -4244438269;
    v27 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a8.n128_u32[0] = *v15;
      v28 = (int8x8_t)vmovl_u8((uint8x8_t)a8.n128_u64[0]).u64[0];
      LOBYTE(v29) = v28.i8[0];
      BYTE1(v29) = v28.i8[2];
      BYTE2(v29) = v28.i8[4];
      HIBYTE(v29) = v28.i8[6];
      a10.i32[0] = *v17;
      a10 = vmovl_u8(*(uint8x8_t *)a10.i8);
      LOBYTE(v30) = a10.i8[0];
      BYTE1(v30) = a10.i8[2];
      BYTE2(v30) = a10.i8[4];
      HIBYTE(v30) = a10.i8[6];
      v31 = vqtbl1_s8(vdupq_lane_s8(v28, 6), (int8x8_t)-4244438269);
      *(int8x8_t *)a10.i8 = vceqz_s8(v31);
      v32 = vminq_u16(vmull_u8((uint8x8_t)v30, (uint8x8_t)v31), v27);
      a8 = (__n128)vrsraq_n_u16(v32, v32, 8uLL);
      a8.n128_u64[0] = (unint64_t)vqadd_u8((uint8x8_t)vbic_s8((int8x8_t)v29, *(int8x8_t *)a10.i8), vqsub_u8((uint8x8_t)v30, vqrshrn_n_u16((uint16x8_t)a8, 8uLL)));
      a8.n128_u64[0] = (unint64_t)vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a8, a6));
      *v17 = a8.n128_u32[0];
      v33 = &v15[a5];
      if ((unint64_t)v33 >= v16)
        v34 = -(uint64_t)a4;
      else
        v34 = 0;
      v15 = &v33[v34];
      v17 += a5;
      --v26;
    }
    while (v26);
  }
  *result = v15;
  *a3 = v16;
  *a2 = v17;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)3,_rgba8_t>(unsigned __int32 **result, __int32 **a2, unint64_t *a3, int a4, int a5, int a6, int8x16_t a7, double a8, double a9, uint16x8_t a10, uint64_t a11, uint64_t a12, unint64_t a13)
{
  unint64_t v13;
  unsigned __int32 *v14;
  unint64_t v15;
  __int32 *v16;
  uint64_t v17;
  unsigned int v18;
  int8x16_t v19;
  uint16x8_t v20;
  uint8x16_t v21;
  uint8x16_t v22;
  uint16x8_t v23;
  uint16x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint64_t v27;
  unsigned int v28;
  uint16x8_t v29;
  uint16x8_t v30;
  int8x16_t v31;
  unsigned int v32;
  uint16x8_t v33;
  unsigned __int32 *v34;
  uint64_t v35;

  v13 = a13;
  v14 = *result;
  v15 = *a3;
  v16 = *a2;
  if (a13 >= 4)
  {
    v17 = 0;
    if (a6)
      v18 = 0;
    else
      v18 = -1;
    v19.i64[0] = 0xFF000000FF000000;
    v19.i64[1] = 0xFF000000FF000000;
    a7 = vandq_s8(vdupq_n_s8(v18), v19);
    v20 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      v21 = (uint8x16_t)vorrq_s8(*(int8x16_t *)&v14[v17], a7);
      v22 = (uint8x16_t)vqtbl1q_s8(*(int8x16_t *)&v16[v17], (int8x16_t)xmmword_185004A40);
      v23 = vmull_u8(*(uint8x8_t *)v21.i8, *(uint8x8_t *)v22.i8);
      v24 = vmull_high_u8(v21, v22);
      v25 = vminq_u16(v23, v20);
      v26 = vminq_u16(v24, v20);
      a10 = vrsraq_n_u16(v26, v26, 8uLL);
      *(uint8x16_t *)&v16[v17] = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v25, v25, 8uLL), 8uLL), a10, 8uLL);
      v13 -= 4;
      v17 += 4 * a5;
    }
    while (v13 > 3);
    v16 = (__int32 *)((char *)v16 + v17 * 4);
    v14 = (unsigned __int32 *)((char *)v14 + v17 * 4);
  }
  v27 = v13 + a12;
  if (v27)
  {
    if (a6)
      v28 = 0;
    else
      v28 = -1;
    *(int8x8_t *)a7.i8 = vand_s8(vdup_n_s8(v28), (int8x8_t)0xFF000000FF000000);
    v29 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a10.i32[0] = *v14;
      v30 = vmovl_u8(*(uint8x8_t *)a10.i8);
      v31.i32[1] = 0;
      LOBYTE(v32) = v30.i8[0];
      BYTE1(v32) = v30.i8[2];
      BYTE2(v32) = v30.i8[4];
      HIBYTE(v32) = v30.i8[6];
      *(int8x8_t *)v30.i8 = vorr_s8((int8x8_t)v32, *(int8x8_t *)a7.i8);
      v31.i32[0] = *v16;
      v31.i64[1] = *v16;
      v33 = vminq_u16(vmull_u8(*(uint8x8_t *)v30.i8, (uint8x8_t)vqtbl1_s8(v31, (int8x8_t)-4244438269)), v29);
      a10 = vrsraq_n_u16(v33, v33, 8uLL);
      *(uint8x8_t *)a10.i8 = vqrshrn_n_u16(a10, 8uLL);
      *(int8x8_t *)a10.i8 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a10, a7));
      *v16 = a10.i32[0];
      v34 = &v14[a5];
      if ((unint64_t)v34 >= v15)
        v35 = -(uint64_t)a4;
      else
        v35 = 0;
      v14 = &v34[v35];
      v16 += a5;
      --v27;
    }
    while (v27);
  }
  *result = v14;
  *a3 = v15;
  *a2 = v16;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)4,_rgba8_t>(unsigned __int32 **result, __int32 **a2, unint64_t *a3, int a4, int a5, int a6, int8x16_t a7, double a8, double a9, int8x16_t a10, uint64_t a11, uint64_t a12, unint64_t a13)
{
  unint64_t v13;
  unsigned __int32 *v14;
  unint64_t v15;
  __int32 *v16;
  uint64_t v17;
  unsigned int v18;
  int8x16_t v19;
  uint16x8_t v20;
  uint8x16_t v21;
  uint8x16_t v22;
  uint16x8_t v23;
  uint16x8_t v24;
  uint64_t v25;
  unsigned int v26;
  uint16x8_t v27;
  int8x16_t v28;
  unsigned int v29;
  uint16x8_t v30;
  unsigned __int32 *v31;
  uint64_t v32;

  v13 = a13;
  v14 = *result;
  v15 = *a3;
  v16 = *a2;
  if (a13 >= 4)
  {
    v17 = 0;
    if (a6)
      v18 = 0;
    else
      v18 = -1;
    v19.i64[0] = 0xFF000000FF000000;
    v19.i64[1] = 0xFF000000FF000000;
    a7 = vandq_s8(vdupq_n_s8(v18), v19);
    v20 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      v21 = (uint8x16_t)vorrq_s8(*(int8x16_t *)&v14[v17], a7);
      v22 = (uint8x16_t)vqtbl1q_s8(*(int8x16_t *)&v16[v17], (int8x16_t)xmmword_185004A40);
      v23 = vminq_u16(vmull_u8(*(uint8x8_t *)v21.i8, *(uint8x8_t *)v22.i8), v20);
      v24 = vminq_u16(vmull_high_u8(v21, v22), v20);
      a10 = (int8x16_t)vqsubq_u8(v21, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v23, v23, 8uLL), 8uLL), vrsraq_n_u16(v24, v24, 8uLL), 8uLL));
      *(int8x16_t *)&v16[v17] = a10;
      v13 -= 4;
      v17 += 4 * a5;
    }
    while (v13 > 3);
    v16 = (__int32 *)((char *)v16 + v17 * 4);
    v14 = (unsigned __int32 *)((char *)v14 + v17 * 4);
  }
  v25 = v13 + a12;
  if (v25)
  {
    if (a6)
      v26 = 0;
    else
      v26 = -1;
    *(int8x8_t *)a7.i8 = vand_s8(vdup_n_s8(v26), (int8x8_t)0xFF000000FF000000);
    v27 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a10.i32[0] = *v14;
      a10 = (int8x16_t)vmovl_u8(*(uint8x8_t *)a10.i8);
      v28.i32[1] = 0;
      LOBYTE(v29) = a10.i8[0];
      BYTE1(v29) = a10.i8[2];
      BYTE2(v29) = a10.i8[4];
      HIBYTE(v29) = a10.i8[6];
      *(int8x8_t *)a10.i8 = vorr_s8((int8x8_t)v29, *(int8x8_t *)a7.i8);
      v28.i32[0] = *v16;
      v28.i64[1] = *v16;
      v30 = vminq_u16(vmull_u8(*(uint8x8_t *)a10.i8, (uint8x8_t)vqtbl1_s8(v28, (int8x8_t)-4244438269)), v27);
      *(uint8x8_t *)a10.i8 = vqsub_u8(*(uint8x8_t *)a10.i8, vqrshrn_n_u16(vrsraq_n_u16(v30, v30, 8uLL), 8uLL));
      *(int8x8_t *)a10.i8 = vmovn_s16((int16x8_t)vzip1q_s8(a10, a7));
      *v16 = a10.i32[0];
      v31 = &v14[a5];
      if ((unint64_t)v31 >= v15)
        v32 = -(uint64_t)a4;
      else
        v32 = 0;
      v14 = &v31[v32];
      v16 += a5;
      --v25;
    }
    while (v25);
  }
  *result = v14;
  *a3 = v15;
  *a2 = v16;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)5,_rgba8_t>(unsigned __int32 **result, unsigned __int32 **a2, unint64_t *a3, int a4, int a5, int8x16_t a6, double a7, __n128 a8, double a9, uint8x16_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14)
{
  unint64_t v14;
  unsigned __int32 *v15;
  unint64_t v16;
  unsigned __int32 *v17;
  uint64_t v18;
  uint16x8_t v19;
  int8x16_t v20;
  int8x16_t v21;
  uint8x16_t v22;
  uint8x16_t v23;
  uint16x8_t v24;
  uint16x8_t v25;
  uint8x16_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint64_t v29;
  uint16x8_t v30;
  int8x8_t v31;
  unsigned int v32;
  int8x8_t v33;
  unsigned int v34;
  uint16x8_t v35;
  uint16x8_t v36;
  unsigned __int32 *v37;
  uint64_t v38;

  v14 = a14;
  v15 = *result;
  v16 = *a3;
  v17 = *a2;
  if (a14 >= 4)
  {
    v18 = 0;
    a6.i64[1] = 0xF0F0F0F0B0B0B0BLL;
    v19 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      v20 = *(int8x16_t *)&v15[v18];
      v21 = *(int8x16_t *)&v17[v18];
      v22 = (uint8x16_t)vqtbl1q_s8(v20, (int8x16_t)xmmword_185004A40);
      v23 = (uint8x16_t)vqtbl1q_s8(v21, (int8x16_t)xmmword_185004A40);
      v24 = vminq_u16(vmull_u8(*(uint8x8_t *)v21.i8, *(uint8x8_t *)v22.i8), v19);
      v25 = vminq_u16(vmull_high_u8((uint8x16_t)v21, v22), v19);
      v26 = vqsubq_u8((uint8x16_t)v21, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v24, v24, 8uLL), 8uLL), vrsraq_n_u16(v25, v25, 8uLL), 8uLL));
      v27 = vminq_u16(vmull_u8(*(uint8x8_t *)v23.i8, *(uint8x8_t *)v20.i8), v19);
      v28 = vminq_u16(vmull_high_u8(v23, (uint8x16_t)v20), v19);
      a10 = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v27, v27, 8uLL), 8uLL), vrsraq_n_u16(v28, v28, 8uLL), 8uLL);
      a8 = (__n128)vqaddq_u8(v26, a10);
      *(__n128 *)&v17[v18] = a8;
      v14 -= 4;
      v18 += 4 * a5;
    }
    while (v14 > 3);
    v17 = (unsigned __int32 *)((char *)v17 + v18 * 4);
    v15 = (unsigned __int32 *)((char *)v15 + v18 * 4);
  }
  v29 = v14 + a13;
  if (v29)
  {
    a6.i64[0] = -4244438269;
    v30 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a8.n128_u32[0] = *v15;
      v31 = (int8x8_t)vmovl_u8((uint8x8_t)a8.n128_u64[0]).u64[0];
      LOBYTE(v32) = v31.i8[0];
      BYTE1(v32) = v31.i8[2];
      BYTE2(v32) = v31.i8[4];
      HIBYTE(v32) = v31.i8[6];
      a10.i32[0] = *v17;
      v33 = (int8x8_t)vmovl_u8(*(uint8x8_t *)a10.i8).u64[0];
      LOBYTE(v34) = v33.i8[0];
      BYTE1(v34) = v33.i8[2];
      BYTE2(v34) = v33.i8[4];
      HIBYTE(v34) = v33.i8[6];
      *(int8x8_t *)a10.i8 = vqtbl1_s8(vdupq_lane_s8(v33, 6), (int8x8_t)-4244438269);
      v35 = vminq_u16(vmull_u8((uint8x8_t)v34, (uint8x8_t)vqtbl1_s8(vdupq_lane_s8(v31, 6), (int8x8_t)-4244438269)), v30);
      a8 = (__n128)vrsraq_n_u16(v35, v35, 8uLL);
      v36 = vminq_u16(vmull_u8(*(uint8x8_t *)a10.i8, (uint8x8_t)v32), v30);
      a8.n128_u64[0] = (unint64_t)vqadd_u8(vqsub_u8((uint8x8_t)v34, vqrshrn_n_u16((uint16x8_t)a8, 8uLL)), vqrshrn_n_u16(vrsraq_n_u16(v36, v36, 8uLL), 8uLL));
      a8.n128_u64[0] = (unint64_t)vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a8, a6));
      *v17 = a8.n128_u32[0];
      v37 = &v15[a5];
      if ((unint64_t)v37 >= v16)
        v38 = -(uint64_t)a4;
      else
        v38 = 0;
      v15 = &v37[v38];
      v17 += a5;
      --v29;
    }
    while (v29);
  }
  *result = v15;
  *a3 = v16;
  *a2 = v17;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)6,_rgba8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, int a4, int a5, int a6, int8x16_t a7, double a8, double a9, __n128 a10, uint64_t a11, uint64_t a12, unint64_t a13)
{
  unint64_t v13;
  unsigned __int32 *v14;
  unint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  unsigned int v18;
  int8x16_t v19;
  uint16x8_t v20;
  int8x16_t v21;
  uint8x16_t v22;
  int8x16_t v23;
  uint8x16_t v24;
  uint8x16_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  uint64_t v30;
  unsigned int v31;
  uint16x8_t v32;
  uint16x8_t v33;
  unsigned int v34;
  unsigned int v35;
  uint8x8_t v36;
  uint16x8_t v37;
  unsigned __int32 *v38;
  uint64_t v39;

  v13 = a13;
  v14 = *result;
  v15 = *a3;
  v16 = *a2;
  if (a13 >= 4)
  {
    v17 = 0;
    if (a6)
      v18 = 0;
    else
      v18 = -1;
    v19.i64[0] = 0xFF000000FF000000;
    v19.i64[1] = 0xFF000000FF000000;
    a7 = vandq_s8(vdupq_n_s8(v18), v19);
    v20 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      v21 = *(int8x16_t *)&v16[v17];
      v22 = (uint8x16_t)vorrq_s8(*(int8x16_t *)&v14[v17], a7);
      v23 = vqtbl1q_s8(v21, (int8x16_t)xmmword_185004A40);
      v24 = (uint8x16_t)vbicq_s8(v21, vceqzq_s8(v23));
      v25 = (uint8x16_t)vmvnq_s8(v23);
      v26 = vmull_u8(*(uint8x8_t *)v22.i8, *(uint8x8_t *)v25.i8);
      v27 = vmull_high_u8(v22, v25);
      v28 = vminq_u16(v26, v20);
      v29 = vminq_u16(v27, v20);
      a10 = (__n128)vqaddq_u8(v24, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v28, v28, 8uLL), 8uLL), vrsraq_n_u16(v29, v29, 8uLL), 8uLL));
      *(__n128 *)&v16[v17] = a10;
      v13 -= 4;
      v17 += 4 * a5;
    }
    while (v13 > 3);
    v16 = (_DWORD *)((char *)v16 + v17 * 4);
    v14 = (unsigned __int32 *)((char *)v14 + v17 * 4);
  }
  v30 = v13 + a12;
  if (v30)
  {
    if (a6)
      v31 = 0;
    else
      v31 = -1;
    *(int8x8_t *)a7.i8 = vand_s8(vdup_n_s8(v31), (int8x8_t)0xFF000000FF000000);
    v32 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a10.n128_u32[0] = *v14;
      v33 = vmovl_u8((uint8x8_t)a10.n128_u64[0]);
      LOBYTE(v34) = v33.i8[0];
      BYTE1(v34) = v33.i8[2];
      BYTE2(v34) = v33.i8[4];
      HIBYTE(v34) = v33.i8[6];
      v33.i32[0] = *v16;
      v33.i64[0] = vmovl_u8(*(uint8x8_t *)v33.i8).u64[0];
      LOBYTE(v35) = v33.i8[0];
      BYTE1(v35) = v33.i8[2];
      BYTE2(v35) = v33.i8[4];
      HIBYTE(v35) = v33.i8[6];
      *(int8x8_t *)v33.i8 = vqtbl1_s8(vdupq_lane_s8(*(int8x8_t *)v33.i8, 6), (int8x8_t)-4244438269);
      v36 = (uint8x8_t)vbic_s8((int8x8_t)v35, vceqz_s8(*(int8x8_t *)v33.i8));
      v37 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v34, *(int8x8_t *)a7.i8), (uint8x8_t)vmvn_s8(*(int8x8_t *)v33.i8)), v32);
      a10 = (__n128)vrsraq_n_u16(v37, v37, 8uLL);
      a10.n128_u64[0] = (unint64_t)vqadd_u8(v36, vqrshrn_n_u16((uint16x8_t)a10, 8uLL));
      a10.n128_u64[0] = (unint64_t)vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a10, a7));
      *v16 = a10.n128_u32[0];
      v38 = &v14[a5];
      if ((unint64_t)v38 >= v15)
        v39 = -(uint64_t)a4;
      else
        v39 = 0;
      v14 = &v38[v39];
      v16 += a5;
      --v30;
    }
    while (v30);
  }
  *result = v14;
  *a3 = v15;
  *a2 = v16;
  return result;
}

_DWORD **vec::template_mark_pixelshape_row<(CGCompositeOperation)8,_rgba8_t>(_DWORD **result, unsigned __int32 **a2, unint64_t *a3, int a4, int a5, int8x16_t a6, double a7, __n128 a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12)
{
  unint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  unsigned __int32 *v15;
  uint64_t v16;
  uint16x8_t v17;
  uint8x16_t v18;
  uint8x16_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  uint64_t v22;
  uint16x8_t v23;
  int8x16_t v24;
  unsigned int v25;
  uint16x8_t v26;
  _DWORD *v27;
  uint64_t v28;

  v12 = a12;
  v13 = *result;
  v14 = *a3;
  v15 = *a2;
  if (a12 >= 4)
  {
    v16 = 0;
    a6.i64[1] = 0xF0F0F0F0B0B0B0BLL;
    v17 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      v18 = *(uint8x16_t *)&v15[v16];
      v19 = (uint8x16_t)vqtbl1q_s8(*(int8x16_t *)&v13[v16], (int8x16_t)xmmword_185004A40);
      v20 = vminq_u16(vmull_u8(*(uint8x8_t *)v18.i8, *(uint8x8_t *)v19.i8), v17);
      v21 = vminq_u16(vmull_high_u8(v18, v19), v17);
      a8 = (__n128)vqsubq_u8(v18, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v20, v20, 8uLL), 8uLL), vrsraq_n_u16(v21, v21, 8uLL), 8uLL));
      *(__n128 *)&v15[v16] = a8;
      v12 -= 4;
      v16 += 4 * a5;
    }
    while (v12 > 3);
    v15 = (unsigned __int32 *)((char *)v15 + v16 * 4);
    v13 = (_DWORD *)((char *)v13 + v16 * 4);
  }
  v22 = v12 + a11;
  if (v22)
  {
    a6.i64[0] = -4244438269;
    v23 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a8.n128_u32[0] = *v15;
      v24 = (int8x16_t)vmovl_u8((uint8x8_t)a8.n128_u64[0]);
      LOBYTE(v25) = v24.i8[0];
      BYTE1(v25) = v24.i8[2];
      BYTE2(v25) = v24.i8[4];
      HIBYTE(v25) = v24.i8[6];
      v24.i32[0] = *v13;
      v24.i64[1] = v24.i64[0];
      v26 = vminq_u16(vmull_u8((uint8x8_t)v25, (uint8x8_t)vqtbl1_s8(v24, (int8x8_t)-4244438269)), v23);
      a8 = (__n128)vrsraq_n_u16(v26, v26, 8uLL);
      a8.n128_u64[0] = (unint64_t)vqsub_u8((uint8x8_t)v25, vqrshrn_n_u16((uint16x8_t)a8, 8uLL));
      a8.n128_u64[0] = (unint64_t)vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a8, a6));
      *v15 = a8.n128_u32[0];
      v27 = &v13[a5];
      if ((unint64_t)v27 >= v14)
        v28 = -(uint64_t)a4;
      else
        v28 = 0;
      v13 = &v27[v28];
      v15 += a5;
      --v22;
    }
    while (v22);
  }
  *result = v13;
  *a3 = v14;
  *a2 = v15;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)9,_rgba8_t>(unsigned __int32 **result, unsigned __int32 **a2, unint64_t *a3, int a4, int a5, int8x16_t a6, double a7, __n128 a8, double a9, uint16x8_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14)
{
  unint64_t v14;
  unsigned __int32 *v15;
  unint64_t v16;
  unsigned __int32 *v17;
  uint64_t v18;
  uint16x8_t v19;
  int8x16_t v20;
  int8x16_t v21;
  uint8x16_t v22;
  uint8x16_t v23;
  uint16x8_t v24;
  uint16x8_t v25;
  uint8x16_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  uint16x8_t v30;
  uint64_t v31;
  uint16x8_t v32;
  int8x8_t v33;
  unsigned int v34;
  int8x8_t v35;
  unsigned int v36;
  uint16x8_t v37;
  unsigned __int32 *v38;
  uint64_t v39;

  v14 = a14;
  v15 = *result;
  v16 = *a3;
  v17 = *a2;
  if (a14 >= 4)
  {
    v18 = 0;
    a6.i64[1] = 0xF0F0F0F0B0B0B0BLL;
    v19 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      v20 = *(int8x16_t *)&v15[v18];
      v21 = *(int8x16_t *)&v17[v18];
      v22 = (uint8x16_t)vqtbl1q_s8(v20, (int8x16_t)xmmword_185004A40);
      v23 = (uint8x16_t)vqtbl1q_s8(v21, (int8x16_t)xmmword_185004A40);
      v24 = vminq_u16(vmull_u8(*(uint8x8_t *)v20.i8, *(uint8x8_t *)v23.i8), v19);
      v25 = vminq_u16(vmull_high_u8((uint8x16_t)v20, v23), v19);
      v26 = vqsubq_u8((uint8x16_t)v20, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v24, v24, 8uLL), 8uLL), vrsraq_n_u16(v25, v25, 8uLL), 8uLL));
      v27 = vmull_u8(*(uint8x8_t *)v22.i8, *(uint8x8_t *)v21.i8);
      v28 = vmull_high_u8(v22, (uint8x16_t)v21);
      v29 = vminq_u16(v27, v19);
      v30 = vminq_u16(v28, v19);
      a10 = (uint16x8_t)vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v29, v29, 8uLL), 8uLL), vrsraq_n_u16(v30, v30, 8uLL), 8uLL);
      a8 = (__n128)vqaddq_u8(v26, (uint8x16_t)a10);
      *(__n128 *)&v17[v18] = a8;
      v14 -= 4;
      v18 += 4 * a5;
    }
    while (v14 > 3);
    v17 = (unsigned __int32 *)((char *)v17 + v18 * 4);
    v15 = (unsigned __int32 *)((char *)v15 + v18 * 4);
  }
  v31 = v14 + a13;
  if (v31)
  {
    a6.i64[0] = -4244438269;
    v32 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a8.n128_u32[0] = *v15;
      v33 = (int8x8_t)vmovl_u8((uint8x8_t)a8.n128_u64[0]).u64[0];
      LOBYTE(v34) = v33.i8[0];
      BYTE1(v34) = v33.i8[2];
      BYTE2(v34) = v33.i8[4];
      HIBYTE(v34) = v33.i8[6];
      a10.i32[0] = *v17;
      v35 = (int8x8_t)vmovl_u8(*(uint8x8_t *)a10.i8).u64[0];
      LOBYTE(v36) = v35.i8[0];
      BYTE1(v36) = v35.i8[2];
      BYTE2(v36) = v35.i8[4];
      HIBYTE(v36) = v35.i8[6];
      a10 = vminq_u16(vmull_u8((uint8x8_t)v34, (uint8x8_t)vqtbl1_s8(vdupq_lane_s8(v35, 6), (int8x8_t)-4244438269)), v32);
      *(uint8x8_t *)a10.i8 = vqrshrn_n_u16(vrsraq_n_u16(a10, a10, 8uLL), 8uLL);
      v37 = vminq_u16(vmull_u8((uint8x8_t)vqtbl1_s8(vdupq_lane_s8(v33, 6), (int8x8_t)-4244438269), (uint8x8_t)v36), v32);
      a8 = (__n128)vrsraq_n_u16(v37, v37, 8uLL);
      a8.n128_u64[0] = (unint64_t)vqadd_u8(vqsub_u8((uint8x8_t)v34, *(uint8x8_t *)a10.i8), vqrshrn_n_u16((uint16x8_t)a8, 8uLL));
      a8.n128_u64[0] = (unint64_t)vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a8, a6));
      *v17 = a8.n128_u32[0];
      v38 = &v15[a5];
      if ((unint64_t)v38 >= v16)
        v39 = -(uint64_t)a4;
      else
        v39 = 0;
      v15 = &v38[v39];
      v17 += a5;
      --v31;
    }
    while (v31);
  }
  *result = v15;
  *a3 = v16;
  *a2 = v17;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)10,_rgba8_t>(unsigned __int32 **result, unsigned __int32 **a2, unint64_t *a3, int a4, int a5, int8x16_t a6, double a7, uint16x8_t a8, double a9, uint16x8_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14)
{
  unint64_t v14;
  unsigned __int32 *v15;
  unint64_t v16;
  unsigned __int32 *v17;
  uint64_t v18;
  uint16x8_t v19;
  int8x16_t v20;
  int8x16_t v21;
  uint8x16_t v22;
  uint8x16_t v23;
  uint16x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint64_t v29;
  uint16x8_t v30;
  int8x8_t v31;
  unsigned int v32;
  int8x8_t v33;
  unsigned int v34;
  uint16x8_t v35;
  unsigned __int32 *v36;
  uint64_t v37;

  v14 = a14;
  v15 = *result;
  v16 = *a3;
  v17 = *a2;
  if (a14 >= 4)
  {
    v18 = 0;
    a6.i64[1] = 0xF0F0F0F0B0B0B0BLL;
    v19 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      v20 = *(int8x16_t *)&v15[v18];
      v21 = *(int8x16_t *)&v17[v18];
      v22 = (uint8x16_t)vqtbl1q_s8(vmvnq_s8(v21), (int8x16_t)xmmword_185004A40);
      v23 = (uint8x16_t)vqtbl1q_s8(vmvnq_s8(v20), (int8x16_t)xmmword_185004A40);
      v24 = vmull_u8(*(uint8x8_t *)v20.i8, *(uint8x8_t *)v22.i8);
      v25 = vmull_high_u8((uint8x16_t)v20, v22);
      a10 = vqaddq_u16(v24, vmull_u8(*(uint8x8_t *)v21.i8, *(uint8x8_t *)v23.i8));
      v26 = vqaddq_u16(v25, vmull_high_u8((uint8x16_t)v21, v23));
      v27 = vminq_u16(a10, v19);
      v28 = vminq_u16(v26, v19);
      a8 = vrsraq_n_u16(v28, v28, 8uLL);
      *(uint8x16_t *)&v17[v18] = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v27, v27, 8uLL), 8uLL), a8, 8uLL);
      v14 -= 4;
      v18 += 4 * a5;
    }
    while (v14 > 3);
    v17 = (unsigned __int32 *)((char *)v17 + v18 * 4);
    v15 = (unsigned __int32 *)((char *)v15 + v18 * 4);
  }
  v29 = v14 + a13;
  if (v29)
  {
    a6.i64[0] = -4244438269;
    v30 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a8.i32[0] = *v15;
      v31 = (int8x8_t)vmovl_u8(*(uint8x8_t *)a8.i8).u64[0];
      LOBYTE(v32) = v31.i8[0];
      BYTE1(v32) = v31.i8[2];
      BYTE2(v32) = v31.i8[4];
      HIBYTE(v32) = v31.i8[6];
      a10.i32[0] = *v17;
      v33 = (int8x8_t)vmovl_u8(*(uint8x8_t *)a10.i8).u64[0];
      LOBYTE(v34) = v33.i8[0];
      BYTE1(v34) = v33.i8[2];
      BYTE2(v34) = v33.i8[4];
      HIBYTE(v34) = v33.i8[6];
      *(int8x8_t *)a10.i8 = vmvn_s8(vqtbl1_s8(vdupq_lane_s8(v33, 6), (int8x8_t)-4244438269));
      v35 = vminq_u16(vqaddq_u16(vmull_u8((uint8x8_t)v32, *(uint8x8_t *)a10.i8), vmull_u8((uint8x8_t)v34, (uint8x8_t)vmvn_s8(vqtbl1_s8(vdupq_lane_s8(v31, 6), (int8x8_t)-4244438269)))), v30);
      a8 = vrsraq_n_u16(v35, v35, 8uLL);
      *(uint8x8_t *)a8.i8 = vqrshrn_n_u16(a8, 8uLL);
      *(int8x8_t *)a8.i8 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a8, a6));
      *v17 = a8.i32[0];
      v36 = &v15[a5];
      if ((unint64_t)v36 >= v16)
        v37 = -(uint64_t)a4;
      else
        v37 = 0;
      v15 = &v36[v37];
      v17 += a5;
      --v29;
    }
    while (v29);
  }
  *result = v15;
  *a3 = v16;
  *a2 = v17;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)11,_rgba8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, int8x16_t a9, double a10, double a11, int8x16_t a12, unint64_t a13)
{
  unint64_t v13;
  unsigned __int32 *v14;
  unint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  unsigned int v18;
  int8x16_t v19;
  int8x16_t v20;
  unsigned int v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  uint8x16_t v25;
  uint8x16_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  int8x8_t v30;
  uint16x8_t v31;
  unsigned int v32;
  unsigned int v33;
  uint8x8_t v34;
  int8x16_t v35;
  int8x16_t v36;
  unsigned __int32 *v37;
  uint64_t v38;

  v13 = a13;
  v14 = *result;
  v15 = *a3;
  v16 = *a2;
  if (a13 >= 4)
  {
    v17 = 0;
    if (a6)
      v18 = 0;
    else
      v18 = -1;
    v19 = vdupq_n_s8(v18);
    v20.i64[0] = 0xFF000000FF000000;
    v20.i64[1] = 0xFF000000FF000000;
    if (a7)
      v21 = 0;
    else
      v21 = -1;
    a9 = vandq_s8(v19, v20);
    v22 = vandq_s8(vdupq_n_s8(v21), v20);
    do
    {
      v23 = vorrq_s8(*(int8x16_t *)&v14[v17], a9);
      v24 = vorrq_s8(*(int8x16_t *)&v16[v17], v22);
      v25 = (uint8x16_t)vqtbl1q_s8(v23, (int8x16_t)xmmword_185004A40);
      v26 = (uint8x16_t)vqtbl1q_s8(v24, (int8x16_t)xmmword_185004A40);
      a12 = (int8x16_t)vqsubq_u8(vqaddq_u8(v26, v25), vqaddq_u8(vqsubq_u8(v25, (uint8x16_t)v23), vqsubq_u8(v26, (uint8x16_t)v24)));
      *(int8x16_t *)&v16[v17] = a12;
      v13 -= 4;
      v17 += 4 * a5;
    }
    while (v13 > 3);
    v16 = (_DWORD *)((char *)v16 + v17 * 4);
    v14 = (unsigned __int32 *)((char *)v14 + v17 * 4);
  }
  v27 = v13 + a8;
  if (v27)
  {
    if (a6)
      v28 = 0;
    else
      v28 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v28), (int8x8_t)0xFF000000FF000000);
    if (a7)
      v29 = 0;
    else
      v29 = -1;
    v30 = vand_s8(vdup_n_s8(v29), (int8x8_t)0xFF000000FF000000);
    do
    {
      a12.i32[0] = *v14;
      v31 = vmovl_u8(*(uint8x8_t *)a12.i8);
      LOBYTE(v32) = v31.i8[0];
      BYTE1(v32) = v31.i8[2];
      BYTE2(v32) = v31.i8[4];
      HIBYTE(v32) = v31.i8[6];
      v31.i32[0] = *v16;
      a12 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v31.i8);
      LOBYTE(v33) = a12.i8[0];
      BYTE1(v33) = a12.i8[2];
      BYTE2(v33) = a12.i8[4];
      HIBYTE(v33) = a12.i8[6];
      *(int8x8_t *)a12.i8 = vorr_s8((int8x8_t)v32, *(int8x8_t *)a9.i8);
      v34 = (uint8x8_t)vorr_s8((int8x8_t)v33, v30);
      v35.i64[0] = a12.i64[0];
      v35.i64[1] = a12.i64[0];
      *(int8x8_t *)v35.i8 = vqtbl1_s8(v35, (int8x8_t)0x707070703030303);
      *(uint8x8_t *)v36.i8 = v34;
      v36.u64[1] = (unint64_t)v34;
      *(int8x8_t *)v36.i8 = vqtbl1_s8(v36, (int8x8_t)0x707070703030303);
      *(uint8x8_t *)a12.i8 = vqsub_u8(vqadd_u8(*(uint8x8_t *)v36.i8, *(uint8x8_t *)v35.i8), vqadd_u8(vqsub_u8(*(uint8x8_t *)v35.i8, *(uint8x8_t *)a12.i8), vqsub_u8(*(uint8x8_t *)v36.i8, v34)));
      *(int8x8_t *)a12.i8 = vmovn_s16((int16x8_t)vzip1q_s8(a12, a9));
      *v16 = a12.i32[0];
      v37 = &v14[a5];
      if ((unint64_t)v37 >= v15)
        v38 = -(uint64_t)a4;
      else
        v38 = 0;
      v14 = &v37[v38];
      v16 += a5;
      --v27;
    }
    while (v27);
  }
  *result = v14;
  *a3 = v15;
  *a2 = v16;
  return result;
}

_DWORD **vec::template_mark_pixelshape_row<(CGCompositeOperation)12,_rgba8_t>(_DWORD **result, _DWORD **a2, unint64_t *a3, int a4, int a5, int a6, int8x16_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  unint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  unsigned int v15;
  int8x16_t v16;
  uint64_t v17;
  unsigned int v18;
  uint8x8_t v19;
  uint16x8_t v20;
  unsigned int v21;
  int8x16_t v22;
  unsigned int v23;
  _DWORD *v24;
  uint64_t v25;

  v10 = a10;
  v11 = *result;
  v12 = *a3;
  v13 = *a2;
  if (a10 >= 4)
  {
    v14 = 0;
    if (a6)
      v15 = 0;
    else
      v15 = -1;
    v16.i64[0] = 0xFF000000FF000000;
    v16.i64[1] = 0xFF000000FF000000;
    a7 = vandq_s8(vdupq_n_s8(v15), v16);
    do
    {
      *(uint8x16_t *)&v13[v14] = vqaddq_u8(*(uint8x16_t *)&v13[v14], (uint8x16_t)vorrq_s8(*(int8x16_t *)&v11[v14], a7));
      v10 -= 4;
      v14 += 4 * a5;
    }
    while (v10 > 3);
    v13 = (_DWORD *)((char *)v13 + v14 * 4);
    v11 = (_DWORD *)((char *)v11 + v14 * 4);
  }
  v17 = v10 + a9;
  if (v17)
  {
    if (a6)
      v18 = 0;
    else
      v18 = -1;
    v19.i32[1] = -16777216;
    *(int8x8_t *)a7.i8 = vand_s8(vdup_n_s8(v18), (int8x8_t)0xFF000000FF000000);
    do
    {
      v19.i32[0] = *v11;
      v20 = vmovl_u8(v19);
      LOBYTE(v21) = v20.i8[0];
      BYTE1(v21) = v20.i8[2];
      BYTE2(v21) = v20.i8[4];
      HIBYTE(v21) = v20.i8[6];
      v20.i32[0] = *v13;
      v22 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v20.i8);
      LOBYTE(v23) = v22.i8[0];
      BYTE1(v23) = v22.i8[2];
      BYTE2(v23) = v22.i8[4];
      HIBYTE(v23) = v22.i8[6];
      *(uint8x8_t *)v22.i8 = vqadd_u8((uint8x8_t)v23, (uint8x8_t)vorr_s8((int8x8_t)v21, *(int8x8_t *)a7.i8));
      v19 = (uint8x8_t)vmovn_s16((int16x8_t)vzip1q_s8(v22, a7));
      *v13 = v19.i32[0];
      v24 = &v11[a5];
      if ((unint64_t)v24 >= v12)
        v25 = -(uint64_t)a4;
      else
        v25 = 0;
      v11 = &v24[v25];
      v13 += a5;
      --v17;
    }
    while (v17);
  }
  *result = v11;
  *a3 = v12;
  *a2 = v13;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)13,_rgba8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, int8x16_t a9, double a10, double a11, double a12, int8x16_t a13, unint64_t a14)
{
  unint64_t v14;
  unsigned __int32 *v15;
  unint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  unsigned int v19;
  int8x16_t v20;
  unsigned int v21;
  int8x16_t v22;
  uint16x8_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  uint8x16_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  uint8x16_t v32;
  uint8x16_t v33;
  uint8x16_t v34;
  uint16x8_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  uint16x8_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  int8x8_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  unsigned int v45;
  unsigned int v46;
  int8x8_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x8_t v50;
  uint8x8_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  unsigned __int32 *v54;
  uint64_t v55;

  v14 = a14;
  v15 = *result;
  v16 = *a3;
  v17 = *a2;
  if (a14 >= 4)
  {
    v18 = 0;
    if (a6)
      v19 = 0;
    else
      v19 = -1;
    v20.i64[0] = 0xFF000000FF000000;
    v20.i64[1] = 0xFF000000FF000000;
    a9 = vandq_s8(vdupq_n_s8(v19), v20);
    if (a7)
      v21 = 0;
    else
      v21 = -1;
    v22 = vandq_s8(vdupq_n_s8(v21), v20);
    v23 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      v24 = vorrq_s8(*(int8x16_t *)&v15[v18], a9);
      v25 = vorrq_s8(*(int8x16_t *)&v17[v18], v22);
      v26 = vqtbl1q_s8(v24, (int8x16_t)xmmword_185004A40);
      v27 = vqtbl1q_s8(v25, (int8x16_t)xmmword_185004A40);
      v28 = vceqzq_s8(v27);
      v29 = (uint8x16_t)vbicq_s8(v25, v28);
      v30 = vminq_u16(vmull_u8(*(uint8x8_t *)v24.i8, *(uint8x8_t *)v29.i8), v23);
      v31 = vminq_u16(vmull_high_u8((uint8x16_t)v24, v29), v23);
      v32 = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v30, v30, 8uLL), 8uLL), vrsraq_n_u16(v31, v31, 8uLL), 8uLL);
      v33 = (uint8x16_t)vmvnq_s8(v27);
      v34 = (uint8x16_t)vmvnq_s8(v26);
      v35 = vmull_u8(*(uint8x8_t *)v24.i8, *(uint8x8_t *)v33.i8);
      v36 = vqaddq_u16(vmull_high_u8((uint8x16_t)v24, v33), vmull_high_u8(v29, v34));
      v37 = vminq_u16(vqaddq_u16(v35, vmull_u8(*(uint8x8_t *)v29.i8, *(uint8x8_t *)v34.i8)), v23);
      v38 = vminq_u16(v36, v23);
      a13 = vbslq_s8(vceqzq_s8(v26), v25, vbslq_s8(v28, v24, (int8x16_t)vqaddq_u8(v32, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v37, v37, 8uLL), 8uLL), vrsraq_n_u16(v38, v38, 8uLL), 8uLL))));
      *(int8x16_t *)&v17[v18] = a13;
      v14 -= 4;
      v18 += 4 * a5;
    }
    while (v14 > 3);
    v17 = (_DWORD *)((char *)v17 + v18 * 4);
    v15 = (unsigned __int32 *)((char *)v15 + v18 * 4);
  }
  v39 = v14 + a8;
  if (v39)
  {
    if (a6)
      v40 = 0;
    else
      v40 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v40), (int8x8_t)0xFF000000FF000000);
    if (a7)
      v41 = 0;
    else
      v41 = -1;
    v42 = vand_s8(vdup_n_s8(v41), (int8x8_t)0xFF000000FF000000);
    v43 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a13.i32[0] = *v15;
      v44 = vmovl_u8(*(uint8x8_t *)a13.i8);
      LOBYTE(v45) = v44.i8[0];
      BYTE1(v45) = v44.i8[2];
      BYTE2(v45) = v44.i8[4];
      HIBYTE(v45) = v44.i8[6];
      v44.i32[0] = *v17;
      a13 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v44.i8);
      LOBYTE(v46) = a13.i8[0];
      BYTE1(v46) = a13.i8[2];
      BYTE2(v46) = a13.i8[4];
      HIBYTE(v46) = a13.i8[6];
      *(int8x8_t *)a13.i8 = vorr_s8((int8x8_t)v45, *(int8x8_t *)a9.i8);
      v47 = vorr_s8((int8x8_t)v46, v42);
      v48.i64[0] = a13.i64[0];
      v48.i64[1] = a13.i64[0];
      *(int8x8_t *)v48.i8 = vqtbl1_s8(v48, (int8x8_t)0x707070703030303);
      *(int8x8_t *)v49.i8 = v47;
      v49.u64[1] = (unint64_t)v47;
      *(int8x8_t *)v49.i8 = vqtbl1_s8(v49, (int8x8_t)0x707070703030303);
      v50 = vceqz_s8(*(int8x8_t *)v49.i8);
      v51 = (uint8x8_t)vbic_s8(v47, v50);
      v52 = vminq_u16(vmull_u8(*(uint8x8_t *)a13.i8, v51), v43);
      v53 = vminq_u16(vqaddq_u16(vmull_u8(*(uint8x8_t *)a13.i8, (uint8x8_t)vmvn_s8(*(int8x8_t *)v49.i8)), vmull_u8(v51, (uint8x8_t)vmvn_s8(*(int8x8_t *)v48.i8))), v43);
      *(int8x8_t *)a13.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v48.i8), v47, vbsl_s8(v50, *(int8x8_t *)a13.i8, (int8x8_t)vqadd_u8(vqrshrn_n_u16(vrsraq_n_u16(v52, v52, 8uLL), 8uLL), vqrshrn_n_u16(vrsraq_n_u16(v53, v53, 8uLL), 8uLL))));
      *(int8x8_t *)a13.i8 = vmovn_s16((int16x8_t)vzip1q_s8(a13, a9));
      *v17 = a13.i32[0];
      v54 = &v15[a5];
      if ((unint64_t)v54 >= v16)
        v55 = -(uint64_t)a4;
      else
        v55 = 0;
      v15 = &v54[v55];
      v17 += a5;
      --v39;
    }
    while (v39);
  }
  *result = v15;
  *a3 = v16;
  *a2 = v17;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)14,_rgba8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, int8x16_t a9, double a10, double a11, double a12, int8x16_t a13, unint64_t a14)
{
  unint64_t v14;
  unsigned __int32 *v15;
  unint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  unsigned int v19;
  int8x16_t v20;
  unsigned int v21;
  int8x16_t v22;
  uint16x8_t v23;
  int8x16_t v24;
  int8x16_t v25;
  uint8x16_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  int8x8_t v32;
  uint16x8_t v33;
  uint16x8_t v34;
  unsigned int v35;
  uint16x8_t v36;
  unsigned int v37;
  int8x8_t v38;
  int8x16_t v39;
  uint16x8_t v40;
  unsigned __int32 *v41;
  uint64_t v42;

  v14 = a14;
  v15 = *result;
  v16 = *a3;
  v17 = *a2;
  if (a14 >= 4)
  {
    v18 = 0;
    if (a6)
      v19 = 0;
    else
      v19 = -1;
    v20.i64[0] = 0xFF000000FF000000;
    v20.i64[1] = 0xFF000000FF000000;
    a9 = vandq_s8(vdupq_n_s8(v19), v20);
    if (a7)
      v21 = 0;
    else
      v21 = -1;
    v22 = vandq_s8(vdupq_n_s8(v21), v20);
    v23 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      v24 = vorrq_s8(*(int8x16_t *)&v15[v18], a9);
      v25 = vorrq_s8(*(int8x16_t *)&v17[v18], v22);
      v26 = (uint8x16_t)vbicq_s8(v25, vceqzq_s8(vqtbl1q_s8(v25, (int8x16_t)xmmword_185004A40)));
      v27 = vminq_u16(vmull_u8(*(uint8x8_t *)v24.i8, *(uint8x8_t *)v26.i8), v23);
      v28 = vminq_u16(vmull_high_u8((uint8x16_t)v24, v26), v23);
      a13 = vbslq_s8(vceqzq_s8(vqtbl1q_s8(v24, (int8x16_t)xmmword_185004A40)), v25, (int8x16_t)vqaddq_u8(vqsubq_u8((uint8x16_t)v24, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v27, v27, 8uLL), 8uLL), vrsraq_n_u16(v28, v28, 8uLL), 8uLL)), v26));
      *(int8x16_t *)&v17[v18] = a13;
      v14 -= 4;
      v18 += 4 * a5;
    }
    while (v14 > 3);
    v17 = (_DWORD *)((char *)v17 + v18 * 4);
    v15 = (unsigned __int32 *)((char *)v15 + v18 * 4);
  }
  v29 = v14 + a8;
  if (v29)
  {
    if (a6)
      v30 = 0;
    else
      v30 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v30), (int8x8_t)0xFF000000FF000000);
    if (a7)
      v31 = 0;
    else
      v31 = -1;
    v32 = vand_s8(vdup_n_s8(v31), (int8x8_t)0xFF000000FF000000);
    v33 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a13.i32[0] = *v15;
      v34 = vmovl_u8(*(uint8x8_t *)a13.i8);
      LOBYTE(v35) = v34.i8[0];
      BYTE1(v35) = v34.i8[2];
      BYTE2(v35) = v34.i8[4];
      HIBYTE(v35) = v34.i8[6];
      v34.i32[0] = *v17;
      v36 = vmovl_u8(*(uint8x8_t *)v34.i8);
      LOBYTE(v37) = v36.i8[0];
      BYTE1(v37) = v36.i8[2];
      BYTE2(v37) = v36.i8[4];
      HIBYTE(v37) = v36.i8[6];
      *(int8x8_t *)v36.i8 = vorr_s8((int8x8_t)v35, *(int8x8_t *)a9.i8);
      v38 = vorr_s8((int8x8_t)v37, v32);
      *(int8x8_t *)v39.i8 = v38;
      v39.u64[1] = (unint64_t)v38;
      *(int8x8_t *)v39.i8 = vbic_s8(v38, vceqz_s8(vqtbl1_s8(v39, (int8x8_t)0x707070703030303)));
      v40 = vminq_u16(vmull_u8(*(uint8x8_t *)v36.i8, *(uint8x8_t *)v39.i8), v33);
      a13.i64[1] = v36.i64[0];
      *(int8x8_t *)a13.i8 = vbsl_s8(vceqz_s8(vqtbl1_s8(a13, (int8x8_t)0x707070703030303)), v38, (int8x8_t)vqadd_u8(vqsub_u8(*(uint8x8_t *)v36.i8, vqrshrn_n_u16(vrsraq_n_u16(v40, v40, 8uLL), 8uLL)), *(uint8x8_t *)v39.i8));
      *(int8x8_t *)a13.i8 = vmovn_s16((int16x8_t)vzip1q_s8(a13, a9));
      *v17 = a13.i32[0];
      v41 = &v15[a5];
      if ((unint64_t)v41 >= v16)
        v42 = -(uint64_t)a4;
      else
        v42 = 0;
      v15 = &v41[v42];
      v17 += a5;
      --v29;
    }
    while (v29);
  }
  *result = v15;
  *a3 = v16;
  *a2 = v17;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)16,_rgba8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, int8x16_t a9, double a10, double a11, double a12, int8x16_t a13, unint64_t a14)
{
  unint64_t v14;
  unsigned __int32 *v15;
  unint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  unsigned int v19;
  int8x16_t v20;
  unsigned int v21;
  int8x16_t v22;
  uint16x8_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  uint8x16_t v28;
  uint8x16_t v29;
  uint16x8_t v30;
  uint8x16_t v31;
  uint16x8_t v32;
  uint8x16_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  uint16x8_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  int8x8_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  unsigned int v43;
  unsigned int v44;
  int8x8_t v45;
  int8x16_t v46;
  int8x16_t v47;
  uint8x8_t v48;
  uint8x8_t v49;
  uint16x8_t v50;
  unsigned __int32 *v51;
  uint64_t v52;

  v14 = a14;
  v15 = *result;
  v16 = *a3;
  v17 = *a2;
  if (a14 >= 4)
  {
    v18 = 0;
    if (a6)
      v19 = 0;
    else
      v19 = -1;
    v20.i64[0] = 0xFF000000FF000000;
    v20.i64[1] = 0xFF000000FF000000;
    a9 = vandq_s8(vdupq_n_s8(v19), v20);
    if (a7)
      v21 = 0;
    else
      v21 = -1;
    v22 = vandq_s8(vdupq_n_s8(v21), v20);
    v23 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      v24 = vorrq_s8(*(int8x16_t *)&v15[v18], a9);
      v25 = vorrq_s8(*(int8x16_t *)&v17[v18], v22);
      v26 = vqtbl1q_s8(v24, (int8x16_t)xmmword_185004A40);
      v27 = vqtbl1q_s8(v25, (int8x16_t)xmmword_185004A40);
      v28 = vminq_u8((uint8x16_t)v24, (uint8x16_t)v26);
      v29 = vminq_u8((uint8x16_t)v25, (uint8x16_t)v27);
      v30 = vmull_u8(*(uint8x8_t *)v28.i8, *(uint8x8_t *)v27.i8);
      v31 = (uint8x16_t)vmvnq_s8(v27);
      v32 = vmull_u8(*(uint8x8_t *)v28.i8, *(uint8x8_t *)v31.i8);
      v33 = (uint8x16_t)vmvnq_s8(v26);
      v34 = vqaddq_u16(vqaddq_u16(vminq_u16(vmull_high_u8(v29, (uint8x16_t)v26), vmull_high_u8(v28, (uint8x16_t)v27)), vmull_high_u8(v28, v31)), vmull_high_u8(v29, v33));
      v35 = vminq_u16(vqaddq_u16(vqaddq_u16(vminq_u16(vmull_u8(*(uint8x8_t *)v29.i8, *(uint8x8_t *)v26.i8), v30), v32), vmull_u8(*(uint8x8_t *)v29.i8, *(uint8x8_t *)v33.i8)), v23);
      v36 = vminq_u16(v34, v23);
      a13 = vbslq_s8(vceqzq_s8(v26), v25, vbslq_s8(vceqzq_s8(v27), v24, (int8x16_t)vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v35, v35, 8uLL), 8uLL), vrsraq_n_u16(v36, v36, 8uLL), 8uLL)));
      *(int8x16_t *)&v17[v18] = a13;
      v14 -= 4;
      v18 += 4 * a5;
    }
    while (v14 > 3);
    v17 = (_DWORD *)((char *)v17 + v18 * 4);
    v15 = (unsigned __int32 *)((char *)v15 + v18 * 4);
  }
  v37 = v14 + a8;
  if (v37)
  {
    if (a6)
      v38 = 0;
    else
      v38 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v38), (int8x8_t)0xFF000000FF000000);
    if (a7)
      v39 = 0;
    else
      v39 = -1;
    v40 = vand_s8(vdup_n_s8(v39), (int8x8_t)0xFF000000FF000000);
    v41 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a13.i32[0] = *v15;
      v42 = vmovl_u8(*(uint8x8_t *)a13.i8);
      LOBYTE(v43) = v42.i8[0];
      BYTE1(v43) = v42.i8[2];
      BYTE2(v43) = v42.i8[4];
      HIBYTE(v43) = v42.i8[6];
      v42.i32[0] = *v17;
      a13 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v42.i8);
      LOBYTE(v44) = a13.i8[0];
      BYTE1(v44) = a13.i8[2];
      BYTE2(v44) = a13.i8[4];
      HIBYTE(v44) = a13.i8[6];
      *(int8x8_t *)a13.i8 = vorr_s8((int8x8_t)v43, *(int8x8_t *)a9.i8);
      v45 = vorr_s8((int8x8_t)v44, v40);
      v46.i64[0] = a13.i64[0];
      v46.i64[1] = a13.i64[0];
      *(int8x8_t *)v46.i8 = vqtbl1_s8(v46, (int8x8_t)0x707070703030303);
      *(int8x8_t *)v47.i8 = v45;
      v47.u64[1] = (unint64_t)v45;
      *(int8x8_t *)v47.i8 = vqtbl1_s8(v47, (int8x8_t)0x707070703030303);
      v48 = vmin_u8(*(uint8x8_t *)a13.i8, *(uint8x8_t *)v46.i8);
      v49 = vmin_u8((uint8x8_t)v45, *(uint8x8_t *)v47.i8);
      v50 = vminq_u16(vqaddq_u16(vqaddq_u16(vminq_u16(vmull_u8(v48, *(uint8x8_t *)v47.i8), vmull_u8(v49, *(uint8x8_t *)v46.i8)), vmull_u8(v48, (uint8x8_t)vmvn_s8(*(int8x8_t *)v47.i8))), vmull_u8(v49, (uint8x8_t)vmvn_s8(*(int8x8_t *)v46.i8))), v41);
      *(int8x8_t *)a13.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v46.i8), v45, vbsl_s8(vceqz_s8(*(int8x8_t *)v47.i8), *(int8x8_t *)a13.i8, (int8x8_t)vqrshrn_n_u16(vrsraq_n_u16(v50, v50, 8uLL), 8uLL)));
      *(int8x8_t *)a13.i8 = vmovn_s16((int16x8_t)vzip1q_s8(a13, a9));
      *v17 = a13.i32[0];
      v51 = &v15[a5];
      if ((unint64_t)v51 >= v16)
        v52 = -(uint64_t)a4;
      else
        v52 = 0;
      v15 = &v51[v52];
      v17 += a5;
      --v37;
    }
    while (v37);
  }
  *result = v15;
  *a3 = v16;
  *a2 = v17;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)17,_rgba8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, int8x16_t a9, double a10, double a11, double a12, int8x16_t a13, unint64_t a14)
{
  unint64_t v14;
  unsigned __int32 *v15;
  unint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  unsigned int v19;
  int8x16_t v20;
  unsigned int v21;
  int8x16_t v22;
  uint16x8_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  uint8x16_t v28;
  uint8x16_t v29;
  uint16x8_t v30;
  uint8x16_t v31;
  uint16x8_t v32;
  uint8x16_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  uint16x8_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  int8x8_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  unsigned int v43;
  unsigned int v44;
  int8x8_t v45;
  int8x16_t v46;
  int8x16_t v47;
  uint8x8_t v48;
  uint8x8_t v49;
  uint16x8_t v50;
  unsigned __int32 *v51;
  uint64_t v52;

  v14 = a14;
  v15 = *result;
  v16 = *a3;
  v17 = *a2;
  if (a14 >= 4)
  {
    v18 = 0;
    if (a6)
      v19 = 0;
    else
      v19 = -1;
    v20.i64[0] = 0xFF000000FF000000;
    v20.i64[1] = 0xFF000000FF000000;
    a9 = vandq_s8(vdupq_n_s8(v19), v20);
    if (a7)
      v21 = 0;
    else
      v21 = -1;
    v22 = vandq_s8(vdupq_n_s8(v21), v20);
    v23 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      v24 = vorrq_s8(*(int8x16_t *)&v15[v18], a9);
      v25 = vorrq_s8(*(int8x16_t *)&v17[v18], v22);
      v26 = vqtbl1q_s8(v24, (int8x16_t)xmmword_185004A40);
      v27 = vqtbl1q_s8(v25, (int8x16_t)xmmword_185004A40);
      v28 = vminq_u8((uint8x16_t)v24, (uint8x16_t)v26);
      v29 = vminq_u8((uint8x16_t)v25, (uint8x16_t)v27);
      v30 = vmull_u8(*(uint8x8_t *)v28.i8, *(uint8x8_t *)v27.i8);
      v31 = (uint8x16_t)vmvnq_s8(v27);
      v32 = vmull_u8(*(uint8x8_t *)v28.i8, *(uint8x8_t *)v31.i8);
      v33 = (uint8x16_t)vmvnq_s8(v26);
      v34 = vqaddq_u16(vqaddq_u16(vmaxq_u16(vmull_high_u8(v28, (uint8x16_t)v27), vmull_high_u8(v29, (uint8x16_t)v26)), vmull_high_u8(v28, v31)), vmull_high_u8(v29, v33));
      v35 = vminq_u16(vqaddq_u16(vqaddq_u16(vmaxq_u16(v30, vmull_u8(*(uint8x8_t *)v29.i8, *(uint8x8_t *)v26.i8)), v32), vmull_u8(*(uint8x8_t *)v29.i8, *(uint8x8_t *)v33.i8)), v23);
      v36 = vminq_u16(v34, v23);
      a13 = vbslq_s8(vceqzq_s8(v26), v25, vbslq_s8(vceqzq_s8(v27), v24, (int8x16_t)vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v35, v35, 8uLL), 8uLL), vrsraq_n_u16(v36, v36, 8uLL), 8uLL)));
      *(int8x16_t *)&v17[v18] = a13;
      v14 -= 4;
      v18 += 4 * a5;
    }
    while (v14 > 3);
    v17 = (_DWORD *)((char *)v17 + v18 * 4);
    v15 = (unsigned __int32 *)((char *)v15 + v18 * 4);
  }
  v37 = v14 + a8;
  if (v37)
  {
    if (a6)
      v38 = 0;
    else
      v38 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v38), (int8x8_t)0xFF000000FF000000);
    if (a7)
      v39 = 0;
    else
      v39 = -1;
    v40 = vand_s8(vdup_n_s8(v39), (int8x8_t)0xFF000000FF000000);
    v41 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a13.i32[0] = *v15;
      v42 = vmovl_u8(*(uint8x8_t *)a13.i8);
      LOBYTE(v43) = v42.i8[0];
      BYTE1(v43) = v42.i8[2];
      BYTE2(v43) = v42.i8[4];
      HIBYTE(v43) = v42.i8[6];
      v42.i32[0] = *v17;
      a13 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v42.i8);
      LOBYTE(v44) = a13.i8[0];
      BYTE1(v44) = a13.i8[2];
      BYTE2(v44) = a13.i8[4];
      HIBYTE(v44) = a13.i8[6];
      *(int8x8_t *)a13.i8 = vorr_s8((int8x8_t)v43, *(int8x8_t *)a9.i8);
      v45 = vorr_s8((int8x8_t)v44, v40);
      v46.i64[0] = a13.i64[0];
      v46.i64[1] = a13.i64[0];
      *(int8x8_t *)v46.i8 = vqtbl1_s8(v46, (int8x8_t)0x707070703030303);
      *(int8x8_t *)v47.i8 = v45;
      v47.u64[1] = (unint64_t)v45;
      *(int8x8_t *)v47.i8 = vqtbl1_s8(v47, (int8x8_t)0x707070703030303);
      v48 = vmin_u8(*(uint8x8_t *)a13.i8, *(uint8x8_t *)v46.i8);
      v49 = vmin_u8((uint8x8_t)v45, *(uint8x8_t *)v47.i8);
      v50 = vminq_u16(vqaddq_u16(vqaddq_u16(vmaxq_u16(vmull_u8(v48, *(uint8x8_t *)v47.i8), vmull_u8(v49, *(uint8x8_t *)v46.i8)), vmull_u8(v48, (uint8x8_t)vmvn_s8(*(int8x8_t *)v47.i8))), vmull_u8(v49, (uint8x8_t)vmvn_s8(*(int8x8_t *)v46.i8))), v41);
      *(int8x8_t *)a13.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v46.i8), v45, vbsl_s8(vceqz_s8(*(int8x8_t *)v47.i8), *(int8x8_t *)a13.i8, (int8x8_t)vqrshrn_n_u16(vrsraq_n_u16(v50, v50, 8uLL), 8uLL)));
      *(int8x8_t *)a13.i8 = vmovn_s16((int16x8_t)vzip1q_s8(a13, a9));
      *v17 = a13.i32[0];
      v51 = &v15[a5];
      if ((unint64_t)v51 >= v16)
        v52 = -(uint64_t)a4;
      else
        v52 = 0;
      v15 = &v51[v52];
      v17 += a5;
      --v37;
    }
    while (v37);
  }
  *result = v15;
  *a3 = v16;
  *a2 = v17;
  return result;
}

_DWORD **vec::template_mark_pixelshape_row<(CGCompositeOperation)18,_rgba8_t>(_DWORD **result, _DWORD **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, int8x16_t a9, double a10, double a11, double a12, uint8x8_t a13, unint64_t a14)
{
  unint64_t v14;
  _DWORD *v15;
  unint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  unsigned int v19;
  int8x16_t v20;
  unsigned int v21;
  int8x16_t v22;
  uint16x8_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  uint8x16_t v28;
  int8x16_t v29;
  uint8x16_t v30;
  uint16x8_t v31;
  unsigned __int128 v32;
  int8x16_t v33;
  int8x16_t v34;
  uint64_t v35;
  uint64_t v36;
  uint16x8_t v37;
  uint16x8_t v38;
  int8x8_t v39;
  int8x16_t v40;
  int8x16_t v41;
  uint8x16_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  int8x8_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  unsigned int v54;
  int8x16_t v55;
  unsigned int v56;
  int8x8_t v57;
  int8x16_t v58;
  int8x16_t v59;
  uint8x8_t v60;
  int8x8_t v61;
  uint16x8_t v62;
  int8x16_t v63;
  int8x8_t v64;
  uint16x8_t v65;
  uint16x8_t v66;
  uint16x8_t v67;
  uint8x8_t v68;
  _DWORD *v69;
  uint64_t v70;
  int8x16x2_t v71;

  v14 = a14;
  v15 = *result;
  v16 = *a3;
  v17 = *a2;
  if (a14 >= 4)
  {
    v18 = 0;
    if (a6)
      v19 = 0;
    else
      v19 = -1;
    v20.i64[0] = 0xFF000000FF000000;
    v20.i64[1] = 0xFF000000FF000000;
    a9 = vandq_s8(vdupq_n_s8(v19), v20);
    if (a7)
      v21 = 0;
    else
      v21 = -1;
    v22 = vandq_s8(vdupq_n_s8(v21), v20);
    v23 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    a13.i32[1] = 117901063;
    do
    {
      v24 = vorrq_s8(*(int8x16_t *)&v15[v18], a9);
      v25 = vorrq_s8(*(int8x16_t *)&v17[v18], v22);
      v26 = vqtbl1q_s8(v24, (int8x16_t)xmmword_185004A40);
      v27 = vqtbl1q_s8(v25, (int8x16_t)xmmword_185004A40);
      v28 = vminq_u8((uint8x16_t)v24, (uint8x16_t)v26);
      v29 = (int8x16_t)vminq_u8((uint8x16_t)v25, (uint8x16_t)v27);
      v30 = (uint8x16_t)vmvnq_s8(v27);
      v31 = vmull_u8(*(uint8x8_t *)v28.i8, *(uint8x8_t *)v30.i8);
      v71.val[1] = (int8x16_t)vmull_high_u8(v28, v30);
      v32 = *(_OWORD *)&v28 & __PAIR128__(0xFFFFFF00FFFFFFLL, 0xFFFFFF00FFFFFFLL);
      v33 = vbicq_s8(vtstq_s8(v29, v29), (int8x16_t)vcgtq_u8((uint8x16_t)v26, (uint8x16_t)v32));
      v34 = vorrq_s8((int8x16_t)vqsubq_u8((uint8x16_t)v26, (uint8x16_t)v32), vceqzq_s8(v29));
      v35 = *(_QWORD *)&vzip1_s8(*(int8x8_t *)v34.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
      v36 = *(_QWORD *)&vzip2_s8(*(int8x8_t *)v34.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
      v34.i64[0] = vextq_s8(v34, v34, 8uLL).u64[0];
      v37 = vmull_u8(*(uint8x8_t *)v26.i8, *(uint8x8_t *)v26.i8);
      v38 = vmull_high_u8((uint8x16_t)v26, (uint8x16_t)v26);
      v39 = (int8x8_t)vextq_s8(v29, v29, 8uLL).u64[0];
      v40 = (int8x16_t)vqmovun_high_s32(vqmovun_s32(vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(*(int8x8_t *)v29.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v37.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v35))))), vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(*(int8x8_t *)v29.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_high_u16(v37))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v36)))));
      v41 = (int8x16_t)vqmovun_high_s32(vqmovun_s32(vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(v39, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v38.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(*(int8x8_t *)v34.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))), vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(v39, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_high_u16(v38))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(*(int8x8_t *)v34.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))))));
      v42 = (uint8x16_t)vmvnq_s8(v26);
      v43 = vmull_u8(*(uint8x8_t *)v29.i8, *(uint8x8_t *)v42.i8);
      v44 = vmull_high_u8((uint8x16_t)v29, v42);
      v45 = vminq_u16(vqaddq_u16(vqaddq_u16((uint16x8_t)vorrq_s8(v40, (int8x16_t)vmovl_s8(*(int8x8_t *)v33.i8)), v43), v31), v23);
      v46 = vminq_u16(vqaddq_u16(vqaddq_u16((uint16x8_t)vorrq_s8(v41, (int8x16_t)vmovl_high_s8(v33)), v44), (uint16x8_t)v71.val[1]), v23);
      v71.val[0] = (int8x16_t)vrsraq_n_u16(v45, v45, 8uLL);
      v47 = vrsraq_n_u16(v46, v46, 8uLL);
      *(uint8x8_t *)v71.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v71.val[0], 8uLL);
      *(uint8x8_t *)v71.val[1].i8 = vqrshrn_n_u16(v47, 8uLL);
      *(int8x16_t *)&v17[v18] = vbslq_s8(vceqzq_s8(v26), v25, vbslq_s8(vceqzq_s8(v27), v24, (int8x16_t)vminq_u8(vqrshrn_high_n_u16(*(uint8x8_t *)v71.val[0].i8, v47, 8uLL), (uint8x16_t)vqtbl2q_s8(v71, (int8x16_t)xmmword_185004A50))));
      v14 -= 4;
      v18 += 4 * a5;
    }
    while (v14 > 3);
    v17 = (_DWORD *)((char *)v17 + v18 * 4);
    v15 = (_DWORD *)((char *)v15 + v18 * 4);
  }
  v48 = v14 + a8;
  if (v48)
  {
    if (a6)
      v49 = 0;
    else
      v49 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v49), (int8x8_t)0xFF000000FF000000);
    if (a7)
      v50 = 0;
    else
      v50 = -1;
    v51 = vand_s8(vdup_n_s8(v50), (int8x8_t)0xFF000000FF000000);
    v52 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a13.i32[0] = *v15;
      v53 = vmovl_u8(a13);
      LOBYTE(v54) = v53.i8[0];
      BYTE1(v54) = v53.i8[2];
      BYTE2(v54) = v53.i8[4];
      HIBYTE(v54) = v53.i8[6];
      v53.i32[0] = *v17;
      v55 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v53.i8);
      LOBYTE(v56) = v55.i8[0];
      BYTE1(v56) = v55.i8[2];
      BYTE2(v56) = v55.i8[4];
      HIBYTE(v56) = v55.i8[6];
      *(int8x8_t *)v55.i8 = vorr_s8((int8x8_t)v54, *(int8x8_t *)a9.i8);
      v57 = vorr_s8((int8x8_t)v56, v51);
      v58.i64[0] = v55.i64[0];
      v58.i64[1] = v55.i64[0];
      *(int8x8_t *)v58.i8 = vqtbl1_s8(v58, (int8x8_t)0x707070703030303);
      *(int8x8_t *)v59.i8 = v57;
      v59.u64[1] = (unint64_t)v57;
      *(int8x8_t *)v59.i8 = vqtbl1_s8(v59, (int8x8_t)0x707070703030303);
      v60 = vmin_u8(*(uint8x8_t *)v55.i8, *(uint8x8_t *)v58.i8);
      v61 = (int8x8_t)vmin_u8((uint8x8_t)v57, *(uint8x8_t *)v59.i8);
      v62 = vmull_u8(v60, (uint8x8_t)vmvn_s8(*(int8x8_t *)v59.i8));
      *(_QWORD *)&v60 &= 0xFFFFFF00FFFFFFuLL;
      v63 = (int8x16_t)vmovl_s8(vbic_s8(vtst_s8(v61, v61), (int8x8_t)vcgt_u8(*(uint8x8_t *)v58.i8, v60)));
      v64 = vorr_s8((int8x8_t)vqsub_u8(*(uint8x8_t *)v58.i8, v60), vceqz_s8(v61));
      v65 = vmull_u8(*(uint8x8_t *)v58.i8, *(uint8x8_t *)v58.i8);
      v66 = vminq_u16(vqaddq_u16(vqaddq_u16((uint16x8_t)vorrq_s8((int8x16_t)vqmovun_high_s32(vqmovun_s32(vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(v61, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v65.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(v64, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))), vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(v61, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_high_u16(v65))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(v64, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))),
                                v63),
                  vmull_u8((uint8x8_t)v61, (uint8x8_t)vmvn_s8(*(int8x8_t *)v58.i8))),
                v62),
              v52);
      v67 = vrsraq_n_u16(v66, v66, 8uLL);
      v68 = vqrshrn_n_u16(v67, 8uLL);
      *(int8x8_t *)v55.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v58.i8), v57, vbsl_s8(vceqz_s8(*(int8x8_t *)v59.i8), *(int8x8_t *)v55.i8, (int8x8_t)vmin_u8(v68, (uint8x8_t)vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16(v68, v67, 8uLL), (int8x8_t)0x707070703030303))));
      a13 = (uint8x8_t)vmovn_s16((int16x8_t)vzip1q_s8(v55, a9));
      *v17 = a13.i32[0];
      v69 = &v15[a5];
      if ((unint64_t)v69 >= v16)
        v70 = -(uint64_t)a4;
      else
        v70 = 0;
      v15 = &v69[v70];
      v17 += a5;
      --v48;
    }
    while (v48);
  }
  *result = v15;
  *a3 = v16;
  *a2 = v17;
  return result;
}

_DWORD **vec::template_mark_pixelshape_row<(CGCompositeOperation)19,_rgba8_t>(_DWORD **result, _DWORD **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, int8x16_t a9, double a10, double a11, double a12, uint8x8_t a13, unint64_t a14)
{
  unint64_t v14;
  _DWORD *v15;
  unint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  unsigned int v19;
  int8x16_t v20;
  unsigned int v21;
  int8x16_t v22;
  float32x4_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  uint8x16_t v29;
  int8x16_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int8x8_t v33;
  float32x4_t v34;
  float32x4_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  int8x8_t v38;
  uint64_t v39;
  uint64_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  uint8x16_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint8x16_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  int16x8_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  int8x8_t v53;
  float32x4_t v54;
  uint16x8_t v55;
  unsigned int v56;
  int8x16_t v57;
  unsigned int v58;
  int8x8_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x8_t v62;
  uint8x8_t v63;
  int8x8_t v64;
  float32x4_t v65;
  float32x4_t v66;
  uint16x8_t v67;
  uint64_t v68;
  uint64_t v69;
  uint16x8_t v70;
  uint16x8_t v71;
  uint16x8_t v72;
  int16x8_t v73;
  _DWORD *v74;
  uint64_t v75;
  int8x16x2_t v76;

  v14 = a14;
  v15 = *result;
  v16 = *a3;
  v17 = *a2;
  if (a14 >= 4)
  {
    v18 = 0;
    if (a6)
      v19 = 0;
    else
      v19 = -1;
    v20.i64[0] = 0xFF000000FF000000;
    v20.i64[1] = 0xFF000000FF000000;
    a9 = vandq_s8(vdupq_n_s8(v19), v20);
    if (a7)
      v21 = 0;
    else
      v21 = -1;
    v22 = vandq_s8(vdupq_n_s8(v21), v20);
    v23 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    a13.i32[1] = 117901063;
    do
    {
      v24 = vorrq_s8(*(int8x16_t *)&v15[v18], a9);
      v25 = vorrq_s8(*(int8x16_t *)&v17[v18], v22);
      v26 = vqtbl1q_s8(v24, (int8x16_t)xmmword_185004A40);
      v27 = vqtbl1q_s8(v25, (int8x16_t)xmmword_185004A40);
      v28 = (int8x16_t)vminq_u8((uint8x16_t)v24, (uint8x16_t)v26);
      v29 = vminq_u8((uint8x16_t)v25, (uint8x16_t)v27);
      v30 = (int8x16_t)vqsubq_u8((uint8x16_t)v27, v29);
      v31 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(*(int8x8_t *)v30.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)));
      v32 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(*(int8x8_t *)v30.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)));
      v33 = (int8x8_t)vextq_s8(v30, v30, 8uLL).u64[0];
      v34 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(v33, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)));
      v35 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(v33, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)));
      v36 = vmull_u8(*(uint8x8_t *)v26.i8, *(uint8x8_t *)v26.i8);
      v37 = vmull_high_u8((uint8x16_t)v26, (uint8x16_t)v26);
      v38 = (int8x8_t)vextq_s8(v28, v28, 8uLL).u64[0];
      v39 = *(_QWORD *)&vzip2_s8(*(int8x8_t *)v28.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
      v40 = *(_QWORD *)&vzip1_s8(*(int8x8_t *)v28.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
      v41 = vmull_u8(*(uint8x8_t *)v26.i8, *(uint8x8_t *)v27.i8);
      v42 = vmull_high_u8((uint8x16_t)v26, (uint8x16_t)v27);
      v43 = (uint8x16_t)vmvnq_s8(v26);
      v44 = vmull_u8(*(uint8x8_t *)v29.i8, *(uint8x8_t *)v43.i8);
      v45 = vmull_high_u8(v29, v43);
      v46 = (uint8x16_t)vmvnq_s8(v27);
      v47 = vmull_u8(*(uint8x8_t *)v28.i8, *(uint8x8_t *)v46.i8);
      v48 = vmull_high_u8((uint8x16_t)v28, v46);
      v76.val[1] = (int8x16_t)vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(v44)), vcvtq_f32_u32(vmovl_high_u16(v47))), vcvtq_f32_u32(vmovl_high_u16(v41))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v32, vcvtq_f32_u32(vmovl_high_u16(v36))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v39))), (int8x16_t)vceqzq_f32(v32))), v23));
      v76.val[0] = (int8x16_t)vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v44.i8)), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v47.i8))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v41.i8))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v31, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v36.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v40))), (int8x16_t)vceqzq_f32(v31))), v23))), (int32x4_t)v76.val[1]);
      *(int8x8_t *)v76.val[0].i8 = vqmovun_s16((int16x8_t)v76.val[0]);
      v49 = vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v45.i8)), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v48.i8))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v42.i8))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v34, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v37.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(v38, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))), (int8x16_t)vceqzq_f32(v34))), v23))), vcvtnq_s32_f32(vmulq_f32(
                  vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(v45)), vcvtq_f32_u32(vmovl_high_u16(v48))), vcvtq_f32_u32(vmovl_high_u16(v42))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v35, vcvtq_f32_u32(vmovl_high_u16(v37))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(v38, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))), (int8x16_t)vceqzq_f32(v35))), v23)));
      *(int8x8_t *)v76.val[1].i8 = vqmovun_s16(v49);
      *(int8x16_t *)&v17[v18] = vbslq_s8(vceqzq_s8(v26), v25, vbslq_s8(vceqzq_s8(v27), v24, (int8x16_t)vminq_u8((uint8x16_t)vqmovun_high_s16(*(int8x8_t *)v76.val[0].i8, v49), (uint8x16_t)vqtbl2q_s8(v76, (int8x16_t)xmmword_185004A50))));
      v14 -= 4;
      v18 += 4 * a5;
    }
    while (v14 > 3);
    v17 = (_DWORD *)((char *)v17 + v18 * 4);
    v15 = (_DWORD *)((char *)v15 + v18 * 4);
  }
  v50 = v14 + a8;
  if (v50)
  {
    if (a6)
      v51 = 0;
    else
      v51 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v51), (int8x8_t)0xFF000000FF000000);
    if (a7)
      v52 = 0;
    else
      v52 = -1;
    v53 = vand_s8(vdup_n_s8(v52), (int8x8_t)0xFF000000FF000000);
    v54 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    do
    {
      a13.i32[0] = *v15;
      v55 = vmovl_u8(a13);
      LOBYTE(v56) = v55.i8[0];
      BYTE1(v56) = v55.i8[2];
      BYTE2(v56) = v55.i8[4];
      HIBYTE(v56) = v55.i8[6];
      v55.i32[0] = *v17;
      v57 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v55.i8);
      LOBYTE(v58) = v57.i8[0];
      BYTE1(v58) = v57.i8[2];
      BYTE2(v58) = v57.i8[4];
      HIBYTE(v58) = v57.i8[6];
      v59 = vorr_s8((int8x8_t)v56, *(int8x8_t *)a9.i8);
      *(int8x8_t *)v57.i8 = vorr_s8((int8x8_t)v58, v53);
      *(int8x8_t *)v60.i8 = v59;
      v60.u64[1] = (unint64_t)v59;
      *(int8x8_t *)v60.i8 = vqtbl1_s8(v60, (int8x8_t)0x707070703030303);
      v61.i64[0] = v57.i64[0];
      v61.i64[1] = v57.i64[0];
      *(int8x8_t *)v61.i8 = vqtbl1_s8(v61, (int8x8_t)0x707070703030303);
      v62 = (int8x8_t)vmin_u8((uint8x8_t)v59, *(uint8x8_t *)v60.i8);
      v63 = vmin_u8(*(uint8x8_t *)v57.i8, *(uint8x8_t *)v61.i8);
      v64 = (int8x8_t)vqsub_u8(*(uint8x8_t *)v61.i8, v63);
      v65 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(v64, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)));
      v66 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(v64, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)));
      v67 = vmull_u8(*(uint8x8_t *)v60.i8, *(uint8x8_t *)v60.i8);
      v68 = *(_QWORD *)&vzip2_s8(v62, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
      v69 = *(_QWORD *)&vzip1_s8(v62, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
      v70 = vmull_u8(*(uint8x8_t *)v60.i8, *(uint8x8_t *)v61.i8);
      v71 = vmull_u8(v63, (uint8x8_t)vmvn_s8(*(int8x8_t *)v60.i8));
      v72 = vmull_u8((uint8x8_t)v62, (uint8x8_t)vmvn_s8(*(int8x8_t *)v61.i8));
      v73 = vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v71.i8)), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v72.i8))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v70.i8))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v65, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v67.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v69))), (int8x16_t)vceqzq_f32(v65))), v54))), vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(
                      vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(v71)), vcvtq_f32_u32(vmovl_high_u16(v72))),
                      vcvtq_f32_u32(vmovl_high_u16(v70))),
                    (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v66, vcvtq_f32_u32(vmovl_high_u16(v67))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v68))), (int8x16_t)vceqzq_f32(v66))), v54)));
      *(int8x8_t *)v71.i8 = vqmovun_s16(v73);
      *(int8x8_t *)v57.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v60.i8), *(int8x8_t *)v57.i8, vbsl_s8(vceqz_s8(*(int8x8_t *)v61.i8), v59, (int8x8_t)vmin_u8(*(uint8x8_t *)v71.i8, (uint8x8_t)vqtbl1_s8(vqmovun_high_s16(*(int8x8_t *)v71.i8, v73), (int8x8_t)0x707070703030303))));
      a13 = (uint8x8_t)vmovn_s16((int16x8_t)vzip1q_s8(v57, a9));
      *v17 = a13.i32[0];
      v74 = &v15[a5];
      if ((unint64_t)v74 >= v16)
        v75 = -(uint64_t)a4;
      else
        v75 = 0;
      v15 = &v74[v75];
      v17 += a5;
      --v50;
    }
    while (v50);
  }
  *result = v15;
  *a3 = v16;
  *a2 = v17;
  return result;
}

_DWORD **vec::template_mark_pixelshape_row<(CGCompositeOperation)20,_rgba8_t>(_DWORD **result, _DWORD **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, int8x16_t a9, double a10, double a11, double a12, uint8x8_t a13, unint64_t a14)
{
  unint64_t v14;
  _DWORD *v15;
  unint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  unsigned int v19;
  int8x16_t v20;
  unsigned int v21;
  int8x16_t v22;
  uint16x8_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  uint8x16_t v28;
  uint8x16_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  int8x8_t v32;
  int16x8_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  uint8x16_t v36;
  uint16x8_t v37;
  uint16x8_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  uint8x16_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint8x16_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  int8x8_t v56;
  uint16x8_t v57;
  uint16x8_t v58;
  unsigned int v59;
  int8x16_t v60;
  unsigned int v61;
  int8x8_t v62;
  int8x16_t v63;
  int8x16_t v64;
  uint8x8_t v65;
  uint8x8_t v66;
  uint16x8_t v67;
  uint16x8_t v68;
  uint16x8_t v69;
  uint16x8_t v70;
  uint16x8_t v71;
  uint8x8_t v72;
  _DWORD *v73;
  uint64_t v74;
  int8x16x2_t v75;

  v14 = a14;
  v15 = *result;
  v16 = *a3;
  v17 = *a2;
  if (a14 >= 4)
  {
    v18 = 0;
    if (a6)
      v19 = 0;
    else
      v19 = -1;
    v20.i64[0] = 0xFF000000FF000000;
    v20.i64[1] = 0xFF000000FF000000;
    a9 = vandq_s8(vdupq_n_s8(v19), v20);
    if (a7)
      v21 = 0;
    else
      v21 = -1;
    v22 = vandq_s8(vdupq_n_s8(v21), v20);
    v23 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    a13.i32[1] = 117901063;
    do
    {
      v24 = vorrq_s8(*(int8x16_t *)&v15[v18], a9);
      v25 = vorrq_s8(*(int8x16_t *)&v17[v18], v22);
      v26 = vqtbl1q_s8(v24, (int8x16_t)xmmword_185004A40);
      v27 = vqtbl1q_s8(v25, (int8x16_t)xmmword_185004A40);
      v28 = vminq_u8((uint8x16_t)v24, (uint8x16_t)v26);
      v29 = vminq_u8((uint8x16_t)v25, (uint8x16_t)v27);
      v30 = vmull_u8(*(uint8x8_t *)v29.i8, *(uint8x8_t *)v29.i8);
      v31 = vmull_high_u8(v29, v29);
      v32 = (int8x8_t)vextq_s8(v27, v27, 8uLL).u64[0];
      *(int8x8_t *)v30.i8 = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v30.i8)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(*(int8x8_t *)v27.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))), vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_high_u16(v30)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(*(int8x8_t *)v27.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))));
      v33 = vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v31.i8)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(v32, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))), vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_high_u16(v31)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(v32, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))))));
      v34 = vmull_u8(*(uint8x8_t *)v30.i8, *(uint8x8_t *)v26.i8);
      v35 = vmull_u8((uint8x8_t)vqmovun_s16(v33), (uint8x8_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL));
      v36 = vqsubq_u8(v29, (uint8x16_t)vqmovun_high_s16(*(int8x8_t *)v30.i8, v33));
      v37 = vmull_u8(*(uint8x8_t *)v36.i8, *(uint8x8_t *)v28.i8);
      v38 = vmull_high_u8(v36, v28);
      v39 = vqaddq_u16(v34, vqaddq_u16(v37, v37));
      v40 = vqaddq_u16(v35, vqaddq_u16(v38, v38));
      v41 = (uint8x16_t)vmvnq_s8(v26);
      v42 = vmull_u8(*(uint8x8_t *)v29.i8, *(uint8x8_t *)v41.i8);
      v43 = vmull_high_u8(v29, v41);
      v44 = vqaddq_u16(v39, v42);
      v45 = vqaddq_u16(v40, v43);
      v46 = (uint8x16_t)vmvnq_s8(v27);
      v47 = vmull_u8(*(uint8x8_t *)v28.i8, *(uint8x8_t *)v46.i8);
      v48 = vmull_high_u8(v28, v46);
      v75.val[1] = (int8x16_t)vqaddq_u16(v44, v47);
      v49 = vqaddq_u16(v45, v48);
      v50 = vminq_u16((uint16x8_t)v75.val[1], v23);
      v51 = vminq_u16(v49, v23);
      v75.val[0] = (int8x16_t)vrsraq_n_u16(v50, v50, 8uLL);
      v52 = vrsraq_n_u16(v51, v51, 8uLL);
      *(uint8x8_t *)v75.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v75.val[0], 8uLL);
      *(uint8x8_t *)v75.val[1].i8 = vqrshrn_n_u16(v52, 8uLL);
      *(int8x16_t *)&v17[v18] = vbslq_s8(vceqzq_s8(v26), v25, vbslq_s8(vceqzq_s8(v27), v24, (int8x16_t)vminq_u8(vqrshrn_high_n_u16(*(uint8x8_t *)v75.val[0].i8, v52, 8uLL), (uint8x16_t)vqtbl2q_s8(v75, (int8x16_t)xmmword_185004A50))));
      v14 -= 4;
      v18 += 4 * a5;
    }
    while (v14 > 3);
    v17 = (_DWORD *)((char *)v17 + v18 * 4);
    v15 = (_DWORD *)((char *)v15 + v18 * 4);
  }
  v53 = v14 + a8;
  if (v53)
  {
    if (a6)
      v54 = 0;
    else
      v54 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v54), (int8x8_t)0xFF000000FF000000);
    if (a7)
      v55 = 0;
    else
      v55 = -1;
    v56 = vand_s8(vdup_n_s8(v55), (int8x8_t)0xFF000000FF000000);
    v57 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a13.i32[0] = *v15;
      v58 = vmovl_u8(a13);
      LOBYTE(v59) = v58.i8[0];
      BYTE1(v59) = v58.i8[2];
      BYTE2(v59) = v58.i8[4];
      HIBYTE(v59) = v58.i8[6];
      v58.i32[0] = *v17;
      v60 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v58.i8);
      LOBYTE(v61) = v60.i8[0];
      BYTE1(v61) = v60.i8[2];
      BYTE2(v61) = v60.i8[4];
      HIBYTE(v61) = v60.i8[6];
      *(int8x8_t *)v60.i8 = vorr_s8((int8x8_t)v59, *(int8x8_t *)a9.i8);
      v62 = vorr_s8((int8x8_t)v61, v56);
      v63.i64[0] = v60.i64[0];
      v63.i64[1] = v60.i64[0];
      *(int8x8_t *)v63.i8 = vqtbl1_s8(v63, (int8x8_t)0x707070703030303);
      *(int8x8_t *)v64.i8 = v62;
      v64.u64[1] = (unint64_t)v62;
      *(int8x8_t *)v64.i8 = vqtbl1_s8(v64, (int8x8_t)0x707070703030303);
      v65 = vmin_u8(*(uint8x8_t *)v60.i8, *(uint8x8_t *)v63.i8);
      v66 = vmin_u8((uint8x8_t)v62, *(uint8x8_t *)v64.i8);
      v67 = vmull_u8(v66, v66);
      *(int8x8_t *)v67.i8 = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v67.i8)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v62.u8[3]) & 0xFF00FF00FF00FFLL)))))), vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_high_u16(v67)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v62.u8[7]) & 0xFF00FF00FF00FFLL)))))));
      v68 = vmull_u8(*(uint8x8_t *)v67.i8, *(uint8x8_t *)v63.i8);
      v69 = vmull_u8(vqsub_u8(v66, *(uint8x8_t *)v67.i8), v65);
      v70 = vminq_u16(vqaddq_u16(vqaddq_u16(vqaddq_u16(v68, vqaddq_u16(v69, v69)), vmull_u8(v66, (uint8x8_t)vmvn_s8(*(int8x8_t *)v63.i8))), vmull_u8(v65, (uint8x8_t)vmvn_s8(*(int8x8_t *)v64.i8))), v57);
      v71 = vrsraq_n_u16(v70, v70, 8uLL);
      v72 = vqrshrn_n_u16(v71, 8uLL);
      *(int8x8_t *)v60.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v63.i8), v62, vbsl_s8(vceqz_s8(*(int8x8_t *)v64.i8), *(int8x8_t *)v60.i8, (int8x8_t)vmin_u8(v72, (uint8x8_t)vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16(v72, v71, 8uLL), (int8x8_t)0x707070703030303))));
      a13 = (uint8x8_t)vmovn_s16((int16x8_t)vzip1q_s8(v60, a9));
      *v17 = a13.i32[0];
      v73 = &v15[a5];
      if ((unint64_t)v73 >= v16)
        v74 = -(uint64_t)a4;
      else
        v74 = 0;
      v15 = &v73[v74];
      v17 += a5;
      --v53;
    }
    while (v53);
  }
  *result = v15;
  *a3 = v16;
  *a2 = v17;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)21,_rgba8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, int8x16_t a9, double a10, double a11, double a12, double a13, int8x16_t a14, unint64_t a15)
{
  int8x16_t v15;
  unint64_t v16;
  unsigned __int32 *v17;
  unint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  unsigned int v21;
  int8x16_t v22;
  int8x16_t v23;
  unsigned int v24;
  int8x16_t v25;
  uint16x8_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  uint8x16_t v31;
  uint8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  uint16x8_t v35;
  uint16x8_t v36;
  uint8x16_t v37;
  uint8x16_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  uint8x16_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint8x16_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  uint8x16_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  int8x8_t v57;
  uint16x8_t v58;
  uint16x8_t v59;
  unsigned int v60;
  unsigned int v61;
  int8x8_t v62;
  int8x16_t v63;
  int8x16_t v64;
  uint8x8_t v65;
  uint8x8_t v66;
  uint16x8_t v67;
  uint16x8_t v68;
  uint16x8_t v69;
  uint16x8_t v70;
  uint8x8_t v71;
  unsigned __int32 *v72;
  uint64_t v73;
  int8x16x2_t v74;

  v16 = a15;
  v17 = *result;
  v18 = *a3;
  v19 = *a2;
  if (a15 >= 4)
  {
    v20 = 0;
    if (a6)
      v21 = 0;
    else
      v21 = -1;
    v22 = vdupq_n_s8(v21);
    v23.i64[0] = 0xFF000000FF000000;
    v23.i64[1] = 0xFF000000FF000000;
    if (a7)
      v24 = 0;
    else
      v24 = -1;
    a9 = vandq_s8(v22, v23);
    v25 = vandq_s8(vdupq_n_s8(v24), v23);
    v26 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    a14 = 0uLL;
    do
    {
      v27 = vorrq_s8(*(int8x16_t *)&v17[v20], a9);
      v28 = vorrq_s8(*(int8x16_t *)&v19[v20], v25);
      v29 = vqtbl1q_s8(v27, (int8x16_t)xmmword_185004A40);
      v30 = vqtbl1q_s8(v28, (int8x16_t)xmmword_185004A40);
      v31 = vminq_u8((uint8x16_t)v27, (uint8x16_t)v29);
      v32 = vminq_u8((uint8x16_t)v28, (uint8x16_t)v30);
      v33 = (int8x16_t)vcgeq_u8(vrhaddq_u8((uint8x16_t)v29, (uint8x16_t)0), v31);
      v34 = vzip1q_s8(v33, v33);
      v35 = vmull_u8(*(uint8x8_t *)v31.i8, *(uint8x8_t *)v32.i8);
      v36 = vmull_high_u8(v31, v32);
      v37 = vqsubq_u8((uint8x16_t)v30, v32);
      v38 = vqsubq_u8((uint8x16_t)v29, v31);
      v39 = vmull_u8(*(uint8x8_t *)v37.i8, *(uint8x8_t *)v38.i8);
      v40 = vmull_high_u8(v37, v38);
      v41 = (uint16x8_t)vbslq_s8(vzip2q_s8(v33, v33), (int8x16_t)vqaddq_u16(v36, v36), (int8x16_t)vqsubq_u16(vmull_high_u8((uint8x16_t)v30, (uint8x16_t)v29), vqaddq_u16(v40, v40)));
      v42 = (uint16x8_t)vbslq_s8(v34, (int8x16_t)vqaddq_u16(v35, v35), (int8x16_t)vqsubq_u16(vmull_u8(*(uint8x8_t *)v30.i8, *(uint8x8_t *)v29.i8), vqaddq_u16(v39, v39)));
      v43 = (uint8x16_t)vmvnq_s8(v29);
      v44 = vmull_u8(*(uint8x8_t *)v32.i8, *(uint8x8_t *)v43.i8);
      v45 = vqaddq_u16(v41, vmull_high_u8(v32, v43));
      v46 = (uint8x16_t)vmvnq_s8(v30);
      v47 = vmull_u8(*(uint8x8_t *)v31.i8, *(uint8x8_t *)v46.i8);
      v48 = vmull_high_u8(v31, v46);
      v74.val[1] = (int8x16_t)vqaddq_u16(vqaddq_u16(v42, v44), v47);
      v49 = vqaddq_u16(v45, v48);
      v50 = vminq_u16((uint16x8_t)v74.val[1], v26);
      v51 = vminq_u16(v49, v26);
      v74.val[0] = (int8x16_t)vrsraq_n_u16(v50, v50, 8uLL);
      v52 = vrsraq_n_u16(v51, v51, 8uLL);
      *(uint8x8_t *)v74.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v74.val[0], 8uLL);
      *(uint8x8_t *)v74.val[1].i8 = vqrshrn_n_u16(v52, 8uLL);
      v53 = (uint8x16_t)vqtbl2q_s8(v74, (int8x16_t)xmmword_185004A50);
      v15 = (int8x16_t)vqrshrn_high_n_u16(*(uint8x8_t *)v74.val[0].i8, v52, 8uLL);
      *(int8x16_t *)&v19[v20] = vbslq_s8(vceqzq_s8(v29), v28, vbslq_s8(vceqzq_s8(v30), v27, (int8x16_t)vminq_u8((uint8x16_t)v15, v53)));
      v16 -= 4;
      v20 += 4 * a5;
    }
    while (v16 > 3);
    v19 = (_DWORD *)((char *)v19 + v20 * 4);
    v17 = (unsigned __int32 *)((char *)v17 + v20 * 4);
  }
  v54 = v16 + a8;
  if (v54)
  {
    if (a6)
      v55 = 0;
    else
      v55 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v55), (int8x8_t)0xFF000000FF000000);
    if (a7)
      v56 = 0;
    else
      v56 = -1;
    v57 = vand_s8(vdup_n_s8(v56), (int8x8_t)0xFF000000FF000000);
    v58 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a14.i32[0] = *v17;
      v59 = vmovl_u8(*(uint8x8_t *)a14.i8);
      LOBYTE(v60) = v59.i8[0];
      BYTE1(v60) = v59.i8[2];
      BYTE2(v60) = v59.i8[4];
      HIBYTE(v60) = v59.i8[6];
      v59.i32[0] = *v19;
      a14 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v59.i8);
      LOBYTE(v61) = a14.i8[0];
      BYTE1(v61) = a14.i8[2];
      BYTE2(v61) = a14.i8[4];
      HIBYTE(v61) = a14.i8[6];
      *(int8x8_t *)a14.i8 = vorr_s8((int8x8_t)v60, *(int8x8_t *)a9.i8);
      v62 = vorr_s8((int8x8_t)v61, v57);
      v63.i64[0] = a14.i64[0];
      v63.i64[1] = a14.i64[0];
      *(int8x8_t *)v64.i8 = v62;
      v64.u64[1] = (unint64_t)v62;
      *(int8x8_t *)v63.i8 = vqtbl1_s8(v63, (int8x8_t)0x707070703030303);
      *(int8x8_t *)v64.i8 = vqtbl1_s8(v64, (int8x8_t)0x707070703030303);
      v65 = vmin_u8(*(uint8x8_t *)a14.i8, *(uint8x8_t *)v63.i8);
      v66 = vmin_u8((uint8x8_t)v62, *(uint8x8_t *)v64.i8);
      *(uint8x8_t *)v15.i8 = vcge_u8(vrhadd_u8(*(uint8x8_t *)v63.i8, 0), v65);
      v67 = vmull_u8(v65, v66);
      v68 = vmull_u8(vqsub_u8(*(uint8x8_t *)v64.i8, v66), vqsub_u8(*(uint8x8_t *)v63.i8, v65));
      v69 = vminq_u16(vqaddq_u16(vqaddq_u16((uint16x8_t)vbslq_s8(vzip1q_s8(v15, v15), (int8x16_t)vqaddq_u16(v67, v67), (int8x16_t)vqsubq_u16(vmull_u8(*(uint8x8_t *)v64.i8, *(uint8x8_t *)v63.i8), vqaddq_u16(v68, v68))), vmull_u8(v66, (uint8x8_t)vmvn_s8(*(int8x8_t *)v63.i8))), vmull_u8(v65, (uint8x8_t)vmvn_s8(*(int8x8_t *)v64.i8))), v58);
      v70 = vrsraq_n_u16(v69, v69, 8uLL);
      v71 = vqrshrn_n_u16(v70, 8uLL);
      v15 = (int8x16_t)vqrshrn_high_n_u16(v71, v70, 8uLL);
      *(int8x8_t *)a14.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v63.i8), v62, vbsl_s8(vceqz_s8(*(int8x8_t *)v64.i8), *(int8x8_t *)a14.i8, (int8x8_t)vmin_u8(v71, (uint8x8_t)vqtbl1_s8(v15, (int8x8_t)0x707070703030303))));
      *(int8x8_t *)a14.i8 = vmovn_s16((int16x8_t)vzip1q_s8(a14, a9));
      *v19 = a14.i32[0];
      v72 = &v17[a5];
      if ((unint64_t)v72 >= v18)
        v73 = -(uint64_t)a4;
      else
        v73 = 0;
      v17 = &v72[v73];
      v19 += a5;
      --v54;
    }
    while (v54);
  }
  *result = v17;
  *a3 = v18;
  *a2 = v19;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)22,_rgba8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, int8x16_t a9, double a10, double a11, double a12, double a13, int8x16_t a14, unint64_t a15)
{
  unint64_t v15;
  unsigned __int32 *v16;
  unint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  unsigned int v20;
  int8x16_t v21;
  int8x16_t v22;
  unsigned int v23;
  int8x16_t v24;
  uint16x8_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  uint8x16_t v30;
  uint8x16_t v31;
  uint8x16_t v32;
  uint8x16_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  int8x8_t v41;
  int8x16_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  unsigned int v45;
  unsigned int v46;
  int8x8_t v47;
  int8x16_t v48;
  int8x16_t v49;
  uint8x8_t v50;
  uint8x8_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint8x8_t v54;
  unsigned __int32 *v55;
  uint64_t v56;
  int8x16x2_t v57;

  v15 = a15;
  v16 = *result;
  v17 = *a3;
  v18 = *a2;
  if (a15 >= 4)
  {
    v19 = 0;
    if (a6)
      v20 = 0;
    else
      v20 = -1;
    v21 = vdupq_n_s8(v20);
    v22.i64[0] = 0xFF000000FF000000;
    v22.i64[1] = 0xFF000000FF000000;
    if (a7)
      v23 = 0;
    else
      v23 = -1;
    a9 = vandq_s8(v21, v22);
    v24 = vandq_s8(vdupq_n_s8(v23), v22);
    v25 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    a14.i64[0] = 0xFFFFFFFFFFFFLL;
    a14.i64[1] = 0xFFFFFFFFFFFFLL;
    do
    {
      v26 = vorrq_s8(*(int8x16_t *)&v16[v19], a9);
      v27 = vorrq_s8(*(int8x16_t *)&v18[v19], v24);
      v28 = vqtbl1q_s8(v26, (int8x16_t)xmmword_185004A40);
      v29 = vqtbl1q_s8(v27, (int8x16_t)xmmword_185004A40);
      v30 = vminq_u8((uint8x16_t)v26, (uint8x16_t)v28);
      v31 = vminq_u8((uint8x16_t)v27, (uint8x16_t)v29);
      v32 = (uint8x16_t)vmvnq_s8(v28);
      v33 = (uint8x16_t)vmvnq_s8(v29);
      v57.val[1] = (int8x16_t)vqaddq_u16(vqaddq_u16(vabdq_u16(vmull_u8(*(uint8x8_t *)v30.i8, *(uint8x8_t *)v29.i8), (uint16x8_t)vandq_s8((int8x16_t)vmull_u8(*(uint8x8_t *)v31.i8, *(uint8x8_t *)v28.i8), a14)), vmull_u8(*(uint8x8_t *)v31.i8, *(uint8x8_t *)v32.i8)), vmull_u8(*(uint8x8_t *)v30.i8, *(uint8x8_t *)v33.i8));
      v34 = vqaddq_u16(vqaddq_u16(vabdq_u16(vmull_high_u8(v30, (uint8x16_t)v29), (uint16x8_t)vandq_s8((int8x16_t)vmull_high_u8(v31, (uint8x16_t)v28), a14)), vmull_high_u8(v31, v32)), vmull_high_u8(v30, v33));
      v35 = vminq_u16((uint16x8_t)v57.val[1], v25);
      v36 = vminq_u16(v34, v25);
      v57.val[0] = (int8x16_t)vrsraq_n_u16(v35, v35, 8uLL);
      v37 = vrsraq_n_u16(v36, v36, 8uLL);
      *(uint8x8_t *)v57.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v57.val[0], 8uLL);
      *(uint8x8_t *)v57.val[1].i8 = vqrshrn_n_u16(v37, 8uLL);
      *(int8x16_t *)&v18[v19] = vbslq_s8(vceqzq_s8(v28), v27, vbslq_s8(vceqzq_s8(v29), v26, (int8x16_t)vminq_u8(vqrshrn_high_n_u16(*(uint8x8_t *)v57.val[0].i8, v37, 8uLL), (uint8x16_t)vqtbl2q_s8(v57, (int8x16_t)xmmword_185004A50))));
      v15 -= 4;
      v19 += 4 * a5;
    }
    while (v15 > 3);
    v18 = (_DWORD *)((char *)v18 + v19 * 4);
    v16 = (unsigned __int32 *)((char *)v16 + v19 * 4);
  }
  v38 = v15 + a8;
  if (v38)
  {
    if (a6)
      v39 = 0;
    else
      v39 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v39), (int8x8_t)0xFF000000FF000000);
    if (a7)
      v40 = 0;
    else
      v40 = -1;
    v41 = vand_s8(vdup_n_s8(v40), (int8x8_t)0xFF000000FF000000);
    v42.i64[0] = 0xFFFFFFFFFFFFLL;
    v42.i64[1] = 0xFFFFFFFFFFFFLL;
    v43 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a14.i32[0] = *v16;
      v44 = vmovl_u8(*(uint8x8_t *)a14.i8);
      LOBYTE(v45) = v44.i8[0];
      BYTE1(v45) = v44.i8[2];
      BYTE2(v45) = v44.i8[4];
      HIBYTE(v45) = v44.i8[6];
      v44.i32[0] = *v18;
      a14 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v44.i8);
      LOBYTE(v46) = a14.i8[0];
      BYTE1(v46) = a14.i8[2];
      BYTE2(v46) = a14.i8[4];
      HIBYTE(v46) = a14.i8[6];
      *(int8x8_t *)a14.i8 = vorr_s8((int8x8_t)v45, *(int8x8_t *)a9.i8);
      v47 = vorr_s8((int8x8_t)v46, v41);
      v48.i64[0] = a14.i64[0];
      v48.i64[1] = a14.i64[0];
      *(int8x8_t *)v48.i8 = vqtbl1_s8(v48, (int8x8_t)0x707070703030303);
      *(int8x8_t *)v49.i8 = v47;
      v49.u64[1] = (unint64_t)v47;
      *(int8x8_t *)v49.i8 = vqtbl1_s8(v49, (int8x8_t)0x707070703030303);
      v50 = vmin_u8(*(uint8x8_t *)a14.i8, *(uint8x8_t *)v48.i8);
      v51 = vmin_u8((uint8x8_t)v47, *(uint8x8_t *)v49.i8);
      v52 = vminq_u16(vqaddq_u16(vqaddq_u16(vabdq_u16(vmull_u8(v50, *(uint8x8_t *)v49.i8), (uint16x8_t)vandq_s8((int8x16_t)vmull_u8(v51, *(uint8x8_t *)v48.i8), v42)), vmull_u8(v51, (uint8x8_t)vmvn_s8(*(int8x8_t *)v48.i8))), vmull_u8(v50, (uint8x8_t)vmvn_s8(*(int8x8_t *)v49.i8))), v43);
      v53 = vrsraq_n_u16(v52, v52, 8uLL);
      v54 = vqrshrn_n_u16(v53, 8uLL);
      *(int8x8_t *)a14.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v48.i8), v47, vbsl_s8(vceqz_s8(*(int8x8_t *)v49.i8), *(int8x8_t *)a14.i8, (int8x8_t)vmin_u8(v54, (uint8x8_t)vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16(v54, v53, 8uLL), (int8x8_t)0x707070703030303))));
      *(int8x8_t *)a14.i8 = vmovn_s16((int16x8_t)vzip1q_s8(a14, a9));
      *v18 = a14.i32[0];
      v55 = &v16[a5];
      if ((unint64_t)v55 >= v17)
        v56 = -(uint64_t)a4;
      else
        v56 = 0;
      v16 = &v55[v56];
      v18 += a5;
      --v38;
    }
    while (v38);
  }
  *result = v16;
  *a3 = v17;
  *a2 = v18;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)23,_rgba8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, int8x16_t a9, double a10, double a11, double a12, int8x16_t a13, unint64_t a14)
{
  unint64_t v14;
  unsigned __int32 *v15;
  unint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  unsigned int v19;
  int8x16_t v20;
  unsigned int v21;
  int8x16_t v22;
  uint16x8_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  uint8x16_t v28;
  int8x16_t v29;
  uint8x16_t v30;
  int8x16_t v31;
  uint8x16_t v32;
  uint16x8_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  uint16x8_t v36;
  uint8x16_t v37;
  int8x16_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  int8x8_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  unsigned int v45;
  unsigned int v46;
  int8x8_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x8_t v50;
  uint8x8_t v51;
  uint16x8_t v52;
  int8x16_t v53;
  unsigned __int32 *v54;
  uint64_t v55;

  v14 = a14;
  v15 = *result;
  v16 = *a3;
  v17 = *a2;
  if (a14 >= 4)
  {
    v18 = 0;
    if (a6)
      v19 = 0;
    else
      v19 = -1;
    v20.i64[0] = 0xFF000000FF000000;
    v20.i64[1] = 0xFF000000FF000000;
    a9 = vandq_s8(vdupq_n_s8(v19), v20);
    if (a7)
      v21 = 0;
    else
      v21 = -1;
    v22 = vandq_s8(vdupq_n_s8(v21), v20);
    v23 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      v24 = vorrq_s8(*(int8x16_t *)&v15[v18], a9);
      v25 = vorrq_s8(*(int8x16_t *)&v17[v18], v22);
      v26 = vqtbl1q_s8(v24, (int8x16_t)xmmword_185004A40);
      v27 = vqtbl1q_s8(v25, (int8x16_t)xmmword_185004A40);
      v28 = vminq_u8((uint8x16_t)v24, (uint8x16_t)v26);
      v29 = (int8x16_t)vminq_u8((uint8x16_t)v25, (uint8x16_t)v27);
      v30 = (uint8x16_t)vmvnq_s8(v29);
      v31 = (int8x16_t)vcgtq_u8((uint8x16_t)(*(_OWORD *)&v29 & __PAIR128__(0xFFFFFF00FFFFFFLL, 0xFFFFFF00FFFFFFLL)), v30);
      v32 = vabdq_u8(v30, (uint8x16_t)(*(_OWORD *)&v29 & __PAIR128__(0xFFFFFF00FFFFFFLL, 0xFFFFFF00FFFFFFLL)));
      v33 = vmull_u8(*(uint8x8_t *)v28.i8, *(uint8x8_t *)v32.i8);
      v34 = vmull_high_u8(v28, v32);
      v35 = vminq_u16(v33, v23);
      v36 = vminq_u16(v34, v23);
      v37 = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v35, v35, 8uLL), 8uLL), vrsraq_n_u16(v36, v36, 8uLL), 8uLL);
      v38 = vbslq_s8(v31, (int8x16_t)vqsubq_u8((uint8x16_t)v29, v37), (int8x16_t)vqaddq_u8((uint8x16_t)v29, v37));
      a13 = vbslq_s8(vceqzq_s8(v26), v25, vbslq_s8(vceqzq_s8(v27), v24, (int8x16_t)vminq_u8((uint8x16_t)v38, (uint8x16_t)vqtbl1q_s8(v38, (int8x16_t)xmmword_185004A40))));
      *(int8x16_t *)&v17[v18] = a13;
      v14 -= 4;
      v18 += 4 * a5;
    }
    while (v14 > 3);
    v17 = (_DWORD *)((char *)v17 + v18 * 4);
    v15 = (unsigned __int32 *)((char *)v15 + v18 * 4);
  }
  v39 = v14 + a8;
  if (v39)
  {
    if (a6)
      v40 = 0;
    else
      v40 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v40), (int8x8_t)0xFF000000FF000000);
    if (a7)
      v41 = 0;
    else
      v41 = -1;
    v42 = vand_s8(vdup_n_s8(v41), (int8x8_t)0xFF000000FF000000);
    v43 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a13.i32[0] = *v15;
      v44 = vmovl_u8(*(uint8x8_t *)a13.i8);
      LOBYTE(v45) = v44.i8[0];
      BYTE1(v45) = v44.i8[2];
      BYTE2(v45) = v44.i8[4];
      HIBYTE(v45) = v44.i8[6];
      v44.i32[0] = *v17;
      a13 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v44.i8);
      LOBYTE(v46) = a13.i8[0];
      BYTE1(v46) = a13.i8[2];
      BYTE2(v46) = a13.i8[4];
      HIBYTE(v46) = a13.i8[6];
      *(int8x8_t *)a13.i8 = vorr_s8((int8x8_t)v45, *(int8x8_t *)a9.i8);
      v47 = vorr_s8((int8x8_t)v46, v42);
      v48.i64[0] = a13.i64[0];
      v48.i64[1] = a13.i64[0];
      *(int8x8_t *)v48.i8 = vqtbl1_s8(v48, (int8x8_t)0x707070703030303);
      *(int8x8_t *)v49.i8 = v47;
      v49.u64[1] = (unint64_t)v47;
      *(int8x8_t *)v49.i8 = vqtbl1_s8(v49, (int8x8_t)0x707070703030303);
      v50 = (int8x8_t)vmin_u8((uint8x8_t)v47, *(uint8x8_t *)v49.i8);
      v51 = (uint8x8_t)vmvn_s8(v50);
      v52 = vminq_u16(vmull_u8(vmin_u8(*(uint8x8_t *)a13.i8, *(uint8x8_t *)v48.i8), vabd_u8(v51, (uint8x8_t)(*(_QWORD *)&v50 & 0xFFFFFF00FFFFFFLL))), v43);
      *(uint8x8_t *)v52.i8 = vqrshrn_n_u16(vrsraq_n_u16(v52, v52, 8uLL), 8uLL);
      *(int8x8_t *)v53.i8 = vbsl_s8((int8x8_t)vcgt_u8((uint8x8_t)(*(_QWORD *)&v50 & 0xFFFFFF00FFFFFFLL), v51), (int8x8_t)vqsub_u8((uint8x8_t)v50, *(uint8x8_t *)v52.i8), (int8x8_t)vqadd_u8((uint8x8_t)v50, *(uint8x8_t *)v52.i8));
      v53.i64[1] = v53.i64[0];
      *(int8x8_t *)a13.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v48.i8), v47, vbsl_s8(vceqz_s8(*(int8x8_t *)v49.i8), *(int8x8_t *)a13.i8, (int8x8_t)vmin_u8(*(uint8x8_t *)v53.i8, (uint8x8_t)vqtbl1_s8(v53, (int8x8_t)0x707070703030303))));
      *(int8x8_t *)a13.i8 = vmovn_s16((int16x8_t)vzip1q_s8(a13, a9));
      *v17 = a13.i32[0];
      v54 = &v15[a5];
      if ((unint64_t)v54 >= v16)
        v55 = -(uint64_t)a4;
      else
        v55 = 0;
      v15 = &v54[v55];
      v17 += a5;
      --v39;
    }
    while (v39);
  }
  *result = v15;
  *a3 = v16;
  *a2 = v17;
  return result;
}

_QWORD *CGBitmapContextCreateWithAlpha(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t a8, double a9, double a10, uint64_t a11)
{
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a4 <= 7)
    _CGHandleAssert("CGBitmapContextCreateWithAlpha", 289, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/API/CGBitmapContext.c", "bits_per_component >= 8", "bpc: %zu", a4, (uint64_t)a7, a8, a4);
  v11 = 8;
  if ((a8 & 0xF0000) != 0x40000)
    v11 = a4;
  result = (_QWORD *)CGBitmapContextInfoCreate(a1, 0, 0, a2, a3, a4, a5, a6, a9, a10, a7, a8, v11, 0, 0);
  if (result)
    return bitmap_context_create((uint64_t)result, a11, (char)"CGBitmapContextCreateWithAlpha", v13, v14, v15, v16, v17);
  return result;
}

_QWORD *CGBitmapContextCreateWithPlanarAlpha(uint64_t a1, unint64_t a2, uint64_t a3, int a4, uint64_t a5, _QWORD *a6, int a7)
{
  unint64_t v7;
  uint64_t v8;

  if ((a4 - 1) > 5)
  {
    v7 = 0;
    if (a6)
      goto LABEL_3;
LABEL_5:
    v8 = 0;
    return CGBitmapContextCreateWithAlpha(a1, a2, a3, v7, v8 * v7 + 2 * (a4 == 6), a5, a6, a7 | (((a4 & 0xFFFFFFFE) == 4) << 8), 72.0, 72.0, 0);
  }
  v7 = qword_184F0C658[a4 - 1];
  if (!a6)
    goto LABEL_5;
LABEL_3:
  v8 = *(_QWORD *)(a6[3] + 40);
  return CGBitmapContextCreateWithAlpha(a1, a2, a3, v7, v8 * v7 + 2 * (a4 == 6), a5, a6, a7 | (((a4 & 0xFFFFFFFE) == 4) << 8), 72.0, 72.0, 0);
}

CGContextRef CGBitmapContextCreateWithShareableMappedData(size_t a1, size_t a2, CGColorSpace *a3, size_t *a4)
{
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  _BOOL4 v13;
  char v14;
  size_t v15;
  size_t v16;
  uint32_t v17;
  size_t v18;
  void *v19;

  if (!a3)
  {
    v9 = 0;
    v10 = 1;
    v13 = 1;
LABEL_10:
    v14 = 3;
    v15 = 8;
    goto LABEL_11;
  }
  v7 = *((_QWORD *)a3 + 3);
  v8 = *(unsigned __int8 *)(v7 + 14);
  if (*(_BYTE *)(v7 + 13))
    v9 = 4352;
  else
    v9 = 0;
  v10 = *(_QWORD *)(v7 + 40);
  v11 = *(_DWORD *)(v7 + 24);
  v12 = v11 == 2;
  v13 = v11 != 2;
  if (!v12)
    ++v10;
  if (!v8)
    goto LABEL_10;
  v14 = 4;
  v15 = 16;
LABEL_11:
  v16 = ((((v10 << v14) * a1) >> 3) + 31) & 0x3FFFFFFFFFFFFFE0;
  v17 = v9 | v13;
  v18 = (*MEMORY[0x1E0C85AD8] + v16 * a2 - 1) & -*MEMORY[0x1E0C85AD8];
  *a4 = v18;
  v19 = mmap(0, v18, 3, 4097, 872415232, 0);
  return CGBitmapContextCreateWithData(v19, a1, a2, v15, v16, a3, v17, 0, 0);
}

uint64_t CGBitmapContextDelegateCreateWithDictionary(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, int a8, double a9, double a10, uint64_t a11)
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  result = CGBitmapContextInfoCreate(a1, 0, 0, a2, a3, a4, a5, a6, a9, a10, a7, a8, 0, 0, 0);
  if (result)
  {
    v12 = result;
    v13 = bitmap_context_delegate_create(result, a11);
    CGBitmapContextInfoRelease(v12);
    return v13;
  }
  return result;
}

CGImageAlphaInfo CGBitmapContextGetAlphaInfo(CGContextRef context)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (context && *((_DWORD *)context + 4) == 1129601108 && *((_DWORD *)context + 6) == 4)
    return *(_DWORD *)(*((_QWORD *)context + 4) + 40) & 0x1F;
  handle_invalid_context((char)"CGBitmapContextGetAlphaInfo", (uint64_t)context, v1, v2, v3, v4, v5, v6);
  return 0;
}

uint64_t CGBitmapContextGetAlphaData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 4)
    return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 120);
  handle_invalid_context((char)"CGBitmapContextGetAlphaData", a1, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t CGBitmapContextGetAlphaBytesPerRow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 4)
    return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 136);
  handle_invalid_context((char)"CGBitmapContextGetAlphaBytesPerRow", a1, a3, a4, a5, a6, a7, a8);
  return 0;
}

__CFData *CGBitmapContextCopyData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __CFData *Mutable;
  __CFData *v12;
  const UInt8 *v13;

  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 4)
  {
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_QWORD *)(v8 + 16);
    v10 = *(_QWORD *)(v8 + 88);
    Mutable = CFDataCreateMutable(0, 0);
    v12 = Mutable;
    if (Mutable)
    {
      CFDataAppendBytes(Mutable, *(const UInt8 **)(v8 + 64), v10 * v9);
      v13 = *(const UInt8 **)(v8 + 120);
      if (v13)
        CFDataAppendBytes(v12, v13, *(_QWORD *)(v8 + 136) * *(_QWORD *)(v8 + 16));
    }
  }
  else
  {
    handle_invalid_context((char)"CGBitmapContextCopyData", a1, a3, a4, a5, a6, a7, a8);
    return 0;
  }
  return v12;
}

void *CGBitmapContextCreateForFlatteningImage(uint64_t a1, CGColorSpaceRef *a2, const __CFDictionary *a3)
{
  CFTypeID v6;
  CGColorSpaceRef ColorSpace;
  CGColorSpaceRef v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  CGColorSpaceRef v12;
  int Type;
  uint64_t v14;
  int v15;
  CGColorSpaceRef *v16;
  uint64_t v17;
  uint64_t v18;
  const __CFString *v19;
  void *v20;
  CGImageAlphaInfo AlphaInfo;
  int v22;
  unint64_t v23;
  size_t v24;
  int UpscaledComponentType;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t BitsPerComponent;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  size_t v37;
  int v38;
  int v39;
  void *v40;
  uint64_t v42;
  char releaseInfo;
  CGBitmapInfo v44;
  CGImageByteOrderInfo ByteOrderInfo;
  int v46;
  int v47;

  if (!a1)
    return 0;
  v6 = CFGetTypeID((CFTypeRef)a1);
  if (kCGDefaultHDRImageContentHeadroom_block_invoke_once != -1)
    dispatch_once(&kCGDefaultHDRImageContentHeadroom_block_invoke_once, &__block_literal_global_211);
  if (v6 != CGImageGetTypeID_image_type_id)
    return 0;
  ColorSpace = CGImageGetColorSpace((CGImageRef)a1);
  v8 = ColorSpace;
  v9 = *(_DWORD *)(a1 + 36);
  if (ColorSpace)
  {
    v10 = *((_QWORD *)ColorSpace + 3);
    if (*(_BYTE *)(v10 + 10))
    {
      if (*(_DWORD *)(v10 + 24) != 3)
        goto LABEL_31;
    }
  }
  while (1)
  {
    v12 = v8;
    Type = CGColorSpaceGetType(v8);
    if (Type != 7)
      break;
    v8 = 0;
    if (v12)
    {
      v8 = 0;
      v11 = *((_QWORD *)v12 + 3);
      if ((*(_DWORD *)(v11 + 24) - 5) <= 1)
        v8 = **(CGColorSpaceRef **)(v11 + 88);
    }
  }
  if (Type == 8)
  {
    if (!v8)
      goto LABEL_29;
    v14 = *((_QWORD *)v8 + 3);
    v15 = *(_DWORD *)(v14 + 20);
    switch(v15)
    {
      case 6:
        v16 = (CGColorSpaceRef *)(*(_QWORD *)(v14 + 88) + 56);
        break;
      case 10:
        v16 = (CGColorSpaceRef *)(*(_QWORD *)(v14 + 88) + 48);
        break;
      case 8:
        v16 = (CGColorSpaceRef *)(*(_QWORD *)(v14 + 88) + 8);
        break;
      default:
        v8 = 0;
        v12 = 0;
        goto LABEL_37;
    }
    v12 = *v16;
  }
  if (!v12)
    goto LABEL_29;
  v17 = *((_QWORD *)v12 + 3);
  if (!*(_BYTE *)(v17 + 10) || *(_DWORD *)(v17 + 24) == 3)
  {
    v18 = *(_QWORD *)(v17 + 40);
    switch(v18)
    {
      case 1:
        v19 = CFSTR("kCGColorSpaceGenericGrayGamma2_2");
        break;
      case 4:
        v19 = CFSTR("kCGColorSpaceGenericCMYK");
        break;
      case 3:
        v19 = CFSTR("kCGColorSpaceSRGB");
        break;
      default:
LABEL_29:
        v8 = 0;
        goto LABEL_37;
    }
    v8 = CGColorSpaceCreateWithName(v19);
    if (v8)
      goto LABEL_39;
LABEL_37:
    if ((v9 & 0x2000000) != 0)
      goto LABEL_39;
    return 0;
  }
  v8 = v12;
LABEL_31:
  CFRetain(v8);
  v12 = 0;
LABEL_39:
  AlphaInfo = CGImageGetAlphaInfo((CGImageRef)a1);
  ByteOrderInfo = CGImageGetByteOrderInfo((CGImageRef)a1);
  v22 = *(_DWORD *)(a1 + 36);
  v44 = CGImageGetBitmapInfo((CGImageRef)a1) & 0xF00;
  v23 = *(int *)(a1 + 40);
  v46 = 0;
  if (CGCFDictionaryGetInteger(a3, CFSTR("kCGImageWidth"), &v46))
    v23 = v46;
  v24 = *(int *)(a1 + 48);
  v47 = 0;
  if (CGCFDictionaryGetInteger(a3, CFSTR("kCGImageHeight"), &v47))
    v24 = v47;
  UpscaledComponentType = CGImageGetUpscaledComponentType((CGImage *)a1);
  BitsPerComponent = CGPixelComponentGetBitsPerComponent(UpscaledComponentType, v26, v27, v28, v29, v30, v31, v32);
  if (v8)
  {
    v37 = BitsPerComponent;
    v38 = 0;
    v34 = 0;
    v39 = v22 & 0xC000000;
    switch(*(_QWORD *)(*((_QWORD *)v8 + 3) + 40))
    {
      case 0:
        goto LABEL_45;
      case 1:
        v34 = (BitsPerComponent >> 3) * v23;
        if (!v39)
          goto LABEL_61;
        v42 = BitsPerComponent;
        goto LABEL_60;
      case 3:
        v34 = 4 * v23 * (BitsPerComponent >> 3);
        if (v39)
        {
          if ((*(_BYTE *)(a1 + 39) & 4) == 0)
          {
LABEL_57:
            v38 = 1;
            break;
          }
          if (AlphaInfo == kCGImageAlphaFirst)
          {
            v38 = 2;
          }
          else
          {
            if (AlphaInfo == kCGImageAlphaLast || AlphaInfo == kCGImageAlphaNone)
              goto LABEL_57;
            v38 = AlphaInfo;
          }
        }
        else
        {
          v38 = 5;
        }
        break;
      case 4:
        v34 = 4 * v23 * (BitsPerComponent >> 3);
        if (!v39)
        {
LABEL_61:
          v38 = 0;
          break;
        }
        v42 = 4 * BitsPerComponent;
LABEL_60:
        v40 = CGBitmapContextCreateWithAlpha(0, v23, v24, BitsPerComponent, v42, v34, v8, v44 | ByteOrderInfo, 72.0, 72.0, (uint64_t)a3);
        goto LABEL_48;
      default:
        break;
    }
  }
  else
  {
LABEL_45:
    if ((v9 & 0x2000000) == 0)
      _CGHandleAssert("CGBitmapContextCreateForFlatteningImage", 814, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/API/CGBitmapContext.c", "create_alpha_only == true", "", v34, v35, v36, releaseInfo);
    v34 = 0;
    v38 = 7;
    v37 = 8;
  }
  v40 = CGBitmapContextCreateWithData(0, v23, v24, v37, v34, v8, ByteOrderInfo | v38 | v44, 0, 0);
LABEL_48:
  v20 = v40;
  if (a2 && v12)
    *a2 = v12;
  CGColorSpaceRelease(v8);
  return v20;
}

char *CGPDFShadingType3Init(CGPDFDictionary *a1, _QWORD *a2, _OWORD *a3)
{
  CGPDFDictionary *v5;
  _OWORD *v6;
  __int128 v7;
  double v8;
  char *result;
  CGPDFObjectRef value;
  _OWORD v11[2];
  uint64_t v12;
  double v13;
  uint64_t v14;

  v5 = a1;
  v14 = *MEMORY[0x1E0C80C00];
  if (a1)
    a1 = (CGPDFDictionary *)*((_QWORD *)a1 + 5);
  if (CGColorSpaceGetType(a1) == 7)
  {
    return 0;
  }
  v6 = malloc_type_calloc(1uLL, 0x50uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  if (!v6)
    return 0;
  value = 0;
  *a2 = v6;
  *a3 = CGPDFShadingType3Init_type3_callbacks;
  if (v5)
    v5 = (CGPDFDictionary *)*((_QWORD *)v5 + 3);
  if (!CGPDFDictionaryGetNumbers(v5, "Coords", (uint64_t)v11, (CGPDFArray *)6))
  {
    return 0;
  }
  v7 = v11[1];
  *v6 = v11[0];
  v6[1] = v7;
  v8 = v13;
  *((_QWORD *)v6 + 4) = v12;
  *((double *)v6 + 5) = v8;
  if (*(double *)&v7 < 0.0 || v8 < 0.0)
  {
    return 0;
  }
  if (!CGPDFDictionaryGetNumbers(v5, "Domain", (uint64_t)(v6 + 3), (CGPDFArray *)2))
    v6[3] = xmmword_185004A20;
  if (!CGPDFDictionaryGetObject(v5, "Function", &value))
  {
    return 0;
  }
  result = CGPDFShadingCreateShadingFunction((uint64_t)value, 1uLL);
  *((_QWORD *)v6 + 8) = result;
  if (result)
  {
    if (!CGPDFDictionaryGetBooleans(v5, "Extend", (uint64_t)v6 + 72, (CGPDFArray *)2))
      *((_WORD *)v6 + 36) = 0;
    return (char *)1;
  }
  return result;
}

uint64_t type3_create_shading(CGRect *a1, uint64_t a2)
{
  const CGRect *v3;
  CGFloat *p_height;
  CGFloat *p_y;
  CGSize *p_size;
  double v7;
  double x;
  double v9;
  double width;
  CGFloat y;
  const CGFloat *Components;
  uint64_t v13;
  _QWORD *v17;
  _QWORD v19[4];

  v3 = &CGRectNull;
  p_height = &CGRectNull.size.height;
  p_y = &CGRectNull.origin.y;
  p_size = &CGRectNull.size;
  if (a1)
  {
    p_size = &a1[2].size;
    p_y = &a1[2].origin.y;
    v3 = a1 + 2;
    p_height = &a1[2].size.height;
  }
  v7 = *p_height;
  x = v3->origin.x;
  v9 = *p_y;
  width = p_size->width;
  v19[0] = *(_QWORD *)&v3->origin.x;
  *(double *)&v19[1] = v9;
  *(double *)&v19[2] = width;
  *(double *)&v19[3] = v7;
  if (a1)
  {
    y = a1[1].origin.y;
    a1 = *(CGRect **)&a1[1].size.width;
  }
  else
  {
    y = 0.0;
  }
  Components = CGColorGetComponents((CGColorRef)a1);
  if (v7 == 1.79769313e308 && width == 1.79769313e308 && v9 == -8.98846567e307 && x == -8.98846567e307)
    v17 = 0;
  else
    v17 = v19;
  return CGShadingCreateRadialInternal(*(_QWORD **)&y, (uint64_t)Components, (uint64_t)v17, (double *)(a2 + 48), *(_QWORD **)(a2 + 64), *(_BYTE *)(a2 + 72) != 0, *(_BYTE *)(a2 + 73) != 0, v13, *(double *)a2, *(double *)(a2 + 8), *(double *)(a2 + 16), *(double *)(a2 + 24), *(double *)(a2 + 32), *(double *)(a2 + 40));
}

void type3_release_info(int a1, _QWORD *a2)
{
  const void *v3;

  if (a2)
  {
    v3 = (const void *)a2[8];
    if (v3)
      CFRelease(v3);
    free(a2);
  }
}

uint64_t release_and_remove(void *a1, void *value)
{
  if (get_cache_predicate != -1)
    dispatch_once(&get_cache_predicate, &__block_literal_global_1410);
  cache_release_value(*(cache_t **)(get_cache_image_cache + 64), value);
  if (get_cache_predicate != -1)
    dispatch_once(&get_cache_predicate, &__block_literal_global_1410);
  return cache_remove(*(cache_t **)(get_cache_image_cache + 64), a1);
}

BOOL rip_image_data_key_is_equal(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  const void *v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_DWORD *)a1 != *(_DWORD *)a2)
    return 0;
  result = 0;
  if (*(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
    && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32)
    && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40)
    && *(_QWORD *)(a1 + 48) == *(_QWORD *)(a2 + 48)
    && *(_QWORD *)(a1 + 56) == *(_QWORD *)(a2 + 56))
  {
    v4 = *(const void **)(a1 + 64);
    v5 = *(const void **)(a2 + 64);
    if (a1 != a2 && *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12))
    {
      v7 = *(_QWORD *)(a1 + 16);
      v6 = *(_QWORD *)(a1 + 24);
      if (v7 != *(_QWORD *)(a2 + 16) || v6 != *(_QWORD *)(a2 + 24))
        return 0;
    }
    result = v4 == v5;
    if (v4 && v4 != v5)
    {
      if (v5)
        return CFEqual(v4, *(CFTypeRef *)(a2 + 64)) != 0;
    }
  }
  return result;
}

void rip_image_data_value_release(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;

  if (!a1)
    _CGHandleAssert("rip_image_data_value_release", 126, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/RIP/RIPImageCache.c", "data != NULL", "NULL data", a6, a7, a8, v8);
  RIPImageDataRelease(a1);
}

BOOL rip_image_data_make_nonpurgeable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char vars0;

  if (!a1)
    _CGHandleAssert("rip_image_data_make_nonpurgeable", 136, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/RIP/RIPImageCache.c", "data != NULL", "NULL data", a6, a7, a8, vars0);
  v8 = *(_QWORD *)(a1 + 104);
  return !v8 || !*(_BYTE *)(v8 + 8) || malloc_make_nonpurgeable(*(void **)(v8 + 16)) == 0;
}

uint64_t CGRIPImageCachePrint()
{
  if (get_cache_predicate != -1)
    dispatch_once(&get_cache_predicate, &__block_literal_global_1410);
  return cache_print();
}

uint64_t CGRIPImageCachePurge()
{
  if (get_cache_predicate != -1)
    dispatch_once(&get_cache_predicate, &__block_literal_global_1410);
  return cache_remove_all(*(cache_t **)(get_cache_image_cache + 64));
}

uint64_t colorsync_smart_null_1449()
{
  return 0;
}

uint64_t *__profile_can_be_used_as_destination_block_invoke_2()
{
  uint64_t *result;
  uint64_t v1;

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncGenericGrayGamma22Profile")) != 0)
  {
    v1 = *result;
  }
  else
  {
    v1 = 0;
  }
  profile_can_be_used_as_destination_s = v1;
  return result;
}

uint64_t (*__profile_can_be_used_as_destination_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileCreateWithName");
  v1 = colorsync_smart_null_1449;
  if (result)
    v1 = result;
  profile_can_be_used_as_destination_f = v1;
  return result;
}

uint64_t CGCMSUtilsCreateProfileForCalGray(uint64_t a1)
{
  float v1;
  uint64_t v2;
  float v3;
  const __CFAllocator *v4;
  CFArrayRef v5;
  uint64_t i;
  const void *v7;
  CFArrayRef v8;
  uint64_t j;
  const void *v10;
  CFArrayRef v11;
  uint64_t k;
  const void *v13;
  CFArrayRef v14;
  uint64_t m;
  const void *v16;
  CFDictionaryRef v17;
  uint64_t n;
  const void *v19;
  uint64_t ProfileForCalGray_f;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  void *v30[8];
  void *values;
  CFNumberRef v32;
  CFNumberRef v33;
  __int128 v34;
  __int128 v35;
  CFArrayRef v36;
  void *keys[2];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  float32x2_t v41;
  float v42;
  float32x2_t valuePtr;
  float v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  valuePtr = vcvt_f32_f64(*(float64x2_t *)a1);
  v1 = *(double *)(a1 + 16);
  v44 = v1;
  v41 = vcvt_f32_f64(*(float64x2_t *)(a1 + 24));
  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(double *)(a1 + 40);
  v42 = v3;
  *(_OWORD *)keys = xmmword_1E16310C0;
  v38 = *(_OWORD *)&off_1E16310D0;
  v39 = xmmword_1E16310E0;
  v40 = *(_OWORD *)off_1E16310F0;
  v36 = 0;
  v35 = 0u;
  v34 = 0u;
  values = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  v32 = CFNumberCreate(0, kCFNumberFloatType, (char *)&valuePtr + 4);
  v33 = CFNumberCreate(0, kCFNumberFloatType, &v44);
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v5 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&values, 3, MEMORY[0x1E0C9B378]);
  for (i = 0; i != 24; i += 8)
  {
    v7 = *(void **)((char *)&values + i);
    if (v7)
      CFRelease(v7);
  }
  values = CFNumberCreate(0, kCFNumberFloatType, &v41);
  v32 = CFNumberCreate(0, kCFNumberFloatType, (char *)&v41 + 4);
  v33 = CFNumberCreate(0, kCFNumberFloatType, &v42);
  v8 = CFArrayCreate(v4, (const void **)&values, 3, MEMORY[0x1E0C9B378]);
  for (j = 0; j != 24; j += 8)
  {
    v10 = *(void **)((char *)&values + j);
    if (v10)
      CFRelease(v10);
  }
  values = CFNumberCreate(0, kCFNumberSInt16Type, &CGCMSUtilsCreateProfileForCalGray_iccDate);
  v32 = CFNumberCreate(0, kCFNumberSInt16Type, &unk_184F0C71E);
  v33 = CFNumberCreate(0, kCFNumberSInt16Type, &unk_184F0C720);
  *(_QWORD *)&v34 = CFNumberCreate(0, kCFNumberSInt16Type, &unk_184F0C722);
  *((_QWORD *)&v34 + 1) = CFNumberCreate(0, kCFNumberSInt16Type, &unk_184F0C724);
  *(_QWORD *)&v35 = CFNumberCreate(0, kCFNumberSInt16Type, &unk_184F0C726);
  v11 = CFArrayCreate(v4, (const void **)&values, 6, MEMORY[0x1E0C9B378]);
  for (k = 0; k != 48; k += 8)
  {
    v13 = *(void **)((char *)&values + k);
    if (v13)
      CFRelease(v13);
  }
  v29 = 0;
  v28 = v2;
  v26 = 0;
  v27 = 0;
  v24 = 0;
  v25 = 0;
  v22 = 0;
  v23 = 0;
  v30[0] = CFNumberCreate(0, kCFNumberSInt16Type, &v29);
  v30[1] = CFNumberCreate(0, kCFNumberDoubleType, &v28);
  v30[2] = CFNumberCreate(0, kCFNumberDoubleType, &v27);
  v30[3] = CFNumberCreate(0, kCFNumberDoubleType, &v26);
  v30[4] = CFNumberCreate(0, kCFNumberDoubleType, &v25);
  v30[5] = CFNumberCreate(0, kCFNumberDoubleType, &v24);
  v30[6] = CFNumberCreate(0, kCFNumberDoubleType, &v23);
  v30[7] = CFNumberCreate(0, kCFNumberDoubleType, &v22);
  v14 = CFArrayCreate(0, (const void **)v30, 8, MEMORY[0x1E0C9B378]);
  for (m = 0; m != 8; ++m)
  {
    v16 = v30[m];
    if (v16)
      CFRelease(v16);
  }
  values = v5;
  v32 = v8;
  v33 = v14;
  *(_QWORD *)&v34 = CFSTR("CG Cal Gray");
  *((_QWORD *)&v34 + 1) = CFSTR("calGray");
  *(_QWORD *)&v35 = CFSTR("4.0");
  *((_QWORD *)&v35 + 1) = *MEMORY[0x1E0C9AE50];
  v36 = v11;
  v17 = CFDictionaryCreate(v4, (const void **)keys, (const void **)&values, 8, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  for (n = 0; n != 24; n += 8)
  {
    v19 = *(void **)((char *)&values + n);
    if (v19)
      CFRelease(v19);
  }
  if (v11)
    CFRelease(v11);
  if (CGCMSUtilsCreateProfileForCalGray_cglibrarypredicate != -1)
    dispatch_once(&CGCMSUtilsCreateProfileForCalGray_cglibrarypredicate, &__block_literal_global_112);
  ProfileForCalGray_f = CGCMSUtilsCreateProfileForCalGray_f(v17);
  if (v17)
    CFRelease(v17);
  return ProfileForCalGray_f;
}

uint64_t CGCMSUtilsCreateProfileForCalLab(char *valuePtr, uint64_t a2)
{
  const __CFAllocator *v4;
  const CFArrayCallBacks *v5;
  CFArrayRef v6;
  CFArrayRef v7;
  uint64_t i;
  const void *v9;
  const void *v10;
  CFDictionaryRef v11;
  uint64_t v12;
  char v13;
  char v14;
  const void *v15;
  uint64_t ProfileForCalLab_f;
  void *v18[3];
  void *keys[2];
  const __CFString *v20;
  void *v21[3];
  void *values[4];

  values[3] = *(void **)MEMORY[0x1E0C80C00];
  values[0] = CFNumberCreate(0, kCFNumberCGFloatType, valuePtr);
  values[1] = CFNumberCreate(0, kCFNumberCGFloatType, valuePtr + 8);
  values[2] = CFNumberCreate(0, kCFNumberCGFloatType, valuePtr + 16);
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v5 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  v6 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 3, MEMORY[0x1E0C9B378]);
  v21[0] = CFNumberCreate(0, kCFNumberCGFloatType, (const void *)a2);
  v21[1] = CFNumberCreate(0, kCFNumberCGFloatType, (const void *)(a2 + 8));
  v21[2] = CFNumberCreate(0, kCFNumberCGFloatType, (const void *)(a2 + 16));
  v7 = CFArrayCreate(v4, (const void **)v21, 3, v5);
  for (i = 0; i != 3; ++i)
  {
    v9 = values[i];
    if (v9)
      CFRelease(v9);
    v10 = v21[i];
    if (v10)
      CFRelease(v10);
  }
  *(_OWORD *)keys = xmmword_1E1631140;
  v20 = CFSTR("profileType");
  v18[0] = v6;
  v18[1] = v7;
  v18[2] = CFSTR("Lab");
  v11 = CFDictionaryCreate(v4, (const void **)keys, (const void **)v18, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v12 = 0;
  v13 = 1;
  do
  {
    v14 = v13;
    v15 = v18[v12];
    if (v15)
      CFRelease(v15);
    v13 = 0;
    v12 = 1;
  }
  while ((v14 & 1) != 0);
  if (CGCMSUtilsCreateProfileForCalLab_cglibrarypredicate != -1)
    dispatch_once(&CGCMSUtilsCreateProfileForCalLab_cglibrarypredicate, &__block_literal_global_118);
  ProfileForCalLab_f = CGCMSUtilsCreateProfileForCalLab_f(v11);
  if (v11)
    CFRelease(v11);
  return ProfileForCalLab_f;
}

CFTypeRef CGCMSUtilsCreateLinearITUR2020Profile()
{
  CFTypeRef result;

  if (CGCMSUtilsCreateLinearITUR2020Profile_once != -1)
    dispatch_once(&CGCMSUtilsCreateLinearITUR2020Profile_once, &__block_literal_global_215);
  result = (CFTypeRef)CGCMSUtilsCreateLinearITUR2020Profile_linear_profile;
  if (CGCMSUtilsCreateLinearITUR2020Profile_linear_profile)
    return CFRetain((CFTypeRef)CGCMSUtilsCreateLinearITUR2020Profile_linear_profile);
  return result;
}

uint64_t CGCMSUtilsCreateLinearizedProfile(uint64_t a1)
{
  uint64_t LinearizedProfile_f;
  const void *v3;
  const __CFData *LinearizedProfile_f_243;
  const __CFData *v5;
  const UInt8 *BytePtr;
  int LinearizedProfile_f_247;
  int LinearizedProfile_f_251;
  uint64_t LinearizedProfile_f_257;
  __CFData *MutableCopy;
  __CFData *v11;
  UInt8 *MutableBytePtr;
  const void *LinearizedProfile_f_267;
  CFDataRef v14;
  CFDataRef v15;
  const __CFString *v16;
  uint64_t *v17;
  const void *v18;
  const void *LinearizedProfile_f_276;
  const void *LinearizedProfile_f_280;
  const void *LinearizedProfile_f_284;
  const void *LinearizedProfile_f_322;
  CFStringRef v24;
  UInt8 bytes[8];
  int v26;
  __int16 v27;

  if (CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate != -1)
    dispatch_once(&CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate, &__block_literal_global_242);
  LinearizedProfile_f = CGCMSUtilsCreateLinearizedProfile_f(a1, 0);
  if (!LinearizedProfile_f)
    return 0;
  v3 = (const void *)LinearizedProfile_f;
  if (CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_244 != -1)
    dispatch_once(&CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_244, &__block_literal_global_246);
  LinearizedProfile_f_243 = (const __CFData *)CGCMSUtilsCreateLinearizedProfile_f_243(v3);
  if (!LinearizedProfile_f_243)
    goto LABEL_34;
  v5 = LinearizedProfile_f_243;
  BytePtr = CFDataGetBytePtr(LinearizedProfile_f_243);
  if (CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_248 != -1)
    dispatch_once(&CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_248, &__block_literal_global_250);
  LinearizedProfile_f_247 = CGCMSUtilsCreateLinearizedProfile_f_247(v3);
  if (*((_DWORD *)BytePtr + 5) == 1482250784 && *((_DWORD *)BytePtr + 4) == 1196573017)
  {
    if (CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_252 != -1)
      dispatch_once(&CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_252, &__block_literal_global_254);
    LinearizedProfile_f_251 = CGCMSUtilsCreateLinearizedProfile_f_251(v3, CFSTR("kTRC"));
  }
  else
  {
    LinearizedProfile_f_251 = 0;
  }
  if (((LinearizedProfile_f_247 | LinearizedProfile_f_251) & 1) == 0)
  {
LABEL_34:
    v18 = v3;
LABEL_35:
    CFRelease(v18);
    return 0;
  }
  if (CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_258 != -1)
    dispatch_once(&CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_258, &__block_literal_global_260);
  LinearizedProfile_f_257 = CGCMSUtilsCreateLinearizedProfile_f_257();
  if (!LinearizedProfile_f_257)
  {
    CFRelease(v3);
    CFRelease(v5);
    return LinearizedProfile_f_257;
  }
  MutableCopy = CFDataCreateMutableCopy(0, 0, v5);
  if (!MutableCopy)
  {
    CFRelease(v3);
    v18 = v5;
    goto LABEL_35;
  }
  v11 = MutableCopy;
  MutableBytePtr = CFDataGetMutableBytePtr(MutableCopy);
  *(_QWORD *)(MutableBytePtr + 92) = 0;
  *(_QWORD *)(MutableBytePtr + 84) = 0;
  if (CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_263 != -1)
    dispatch_once(&CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_263, &__block_literal_global_265);
  CGCMSUtilsCreateLinearizedProfile_f_262(LinearizedProfile_f_257, v11);
  CFRelease(v11);
  CFRelease(v5);
  if (CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_268 != -1)
    dispatch_once(&CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_268, &__block_literal_global_270);
  LinearizedProfile_f_267 = (const void *)CGCMSUtilsCreateLinearizedProfile_f_267(v3, CFSTR("wtpt"));
  if (CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_272 != -1)
    dispatch_once(&CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_272, &__block_literal_global_274);
  CGCMSUtilsCreateLinearizedProfile_f_271(LinearizedProfile_f_257, CFSTR("wtpt"), LinearizedProfile_f_267);
  if (LinearizedProfile_f_267)
    CFRelease(LinearizedProfile_f_267);
  *(_QWORD *)bytes = 1987212643;
  v26 = 0x1000000;
  v27 = 1;
  v14 = CFDataCreateWithBytesNoCopy(0, bytes, 14, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  if (!v14)
  {
    CFRelease(v3);
LABEL_78:
    v18 = (const void *)LinearizedProfile_f_257;
    goto LABEL_35;
  }
  v15 = v14;
  if (((LinearizedProfile_f_247 ^ 1 | LinearizedProfile_f_251) & 1) != 0)
  {
    if (!LinearizedProfile_f_251)
      goto LABEL_67;
    if (CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_319 != -1)
      dispatch_once(&CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_319, &__block_literal_global_321);
    v16 = CFSTR("kTRC");
    v17 = &CGCMSUtilsCreateLinearizedProfile_f_318;
  }
  else
  {
    if (CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_277 != -1)
      dispatch_once(&CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_277, &__block_literal_global_279);
    LinearizedProfile_f_276 = (const void *)CGCMSUtilsCreateLinearizedProfile_f_276(v3, CFSTR("rXYZ"));
    if (CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_281 != -1)
      dispatch_once(&CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_281, &__block_literal_global_283);
    LinearizedProfile_f_280 = (const void *)CGCMSUtilsCreateLinearizedProfile_f_280(v3, CFSTR("gXYZ"));
    if (CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_285 != -1)
      dispatch_once(&CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_285, &__block_literal_global_287);
    LinearizedProfile_f_284 = (const void *)CGCMSUtilsCreateLinearizedProfile_f_284(v3, CFSTR("bXYZ"));
    if (CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_289 != -1)
      dispatch_once(&CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_289, &__block_literal_global_291);
    CGCMSUtilsCreateLinearizedProfile_f_288(LinearizedProfile_f_257, CFSTR("rXYZ"), LinearizedProfile_f_276);
    if (CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_293 != -1)
      dispatch_once(&CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_293, &__block_literal_global_295);
    CGCMSUtilsCreateLinearizedProfile_f_292(LinearizedProfile_f_257, CFSTR("gXYZ"), LinearizedProfile_f_280);
    if (CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_297 != -1)
      dispatch_once(&CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_297, &__block_literal_global_299);
    CGCMSUtilsCreateLinearizedProfile_f_296(LinearizedProfile_f_257, CFSTR("bXYZ"), LinearizedProfile_f_284);
    if (LinearizedProfile_f_276)
      CFRelease(LinearizedProfile_f_276);
    if (LinearizedProfile_f_280)
      CFRelease(LinearizedProfile_f_280);
    if (LinearizedProfile_f_284)
      CFRelease(LinearizedProfile_f_284);
    if (CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_301 != -1)
      dispatch_once(&CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_301, &__block_literal_global_303);
    CGCMSUtilsCreateLinearizedProfile_f_300(LinearizedProfile_f_257, CFSTR("rTRC"), v15);
    if (CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_307 != -1)
      dispatch_once(&CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_307, &__block_literal_global_309);
    CGCMSUtilsCreateLinearizedProfile_f_306(LinearizedProfile_f_257, CFSTR("gTRC"), v15);
    if (CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_313 != -1)
      dispatch_once(&CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_313, &__block_literal_global_315);
    v16 = CFSTR("bTRC");
    v17 = &CGCMSUtilsCreateLinearizedProfile_f_312;
  }
  ((void (*)(uint64_t, const __CFString *, CFDataRef))*v17)(LinearizedProfile_f_257, v16, v15);
LABEL_67:
  if (CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_323 != -1)
    dispatch_once(&CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_323, &__block_literal_global_325);
  LinearizedProfile_f_322 = (const void *)CGCMSUtilsCreateLinearizedProfile_f_322(v3);
  v24 = CFStringCreateWithFormat(0, 0, CFSTR("%@ Linearized"), LinearizedProfile_f_322);
  if (CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_330 != -1)
    dispatch_once(&CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_330, &__block_literal_global_332);
  CGCMSUtilsCreateLinearizedProfile_f_329(LinearizedProfile_f_257, v24, 0);
  if (LinearizedProfile_f_322)
    CFRelease(LinearizedProfile_f_322);
  if (v24)
    CFRelease(v24);
  CFRelease(v15);
  CFRelease(v3);
  if (CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_335 != -1)
    dispatch_once(&CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_335, &__block_literal_global_337);
  if ((CGCMSUtilsCreateLinearizedProfile_f_334(LinearizedProfile_f_257, 0, 0) & 1) == 0)
    goto LABEL_78;
  return LinearizedProfile_f_257;
}

const __CFDictionary *copy_profile_dictionary_with_parameters(const __CFDictionary *result, void *a2, void *a3, void *a4, void *a5)
{
  const __CFDictionary *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t Count;
  uint64_t i;
  void *values[2];
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  void *keys[2];
  __int128 v20;
  __int128 v21;
  const __CFString *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v8 = result;
    Count = CFDictionaryGetCount(result);
    if (Count >= 8)
      _CGHandleAssert("copy_profile_dictionary_with_parameters", 1435, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSUtils.c", "count <= kPROFILE_DICT_COUNT", "count: %zu  dictionary count: %d", v9, v10, v11, Count);
    v22 = 0;
    v20 = 0u;
    v21 = 0u;
    *(_OWORD *)keys = 0u;
    v18 = 0;
    v16 = 0u;
    v17 = 0u;
    *(_OWORD *)values = 0u;
    CFDictionaryGetKeysAndValues(v8, (const void **)keys, (const void **)values);
    if (Count != 7)
      v22 = CFSTR("kCGColorSpace");
    for (i = 0; i != 7; ++i)
    {
      if (CFEqual(keys[i], CFSTR("ColorSyncTransformTag")))
        values[i] = a3;
      if (CFEqual(keys[i], CFSTR("ColorSyncRenderingIntent")))
        values[i] = a4;
      if (CFEqual(keys[i], CFSTR("ColorSyncBlackPointCompensation")))
        values[i] = a5;
      if (CFEqual(keys[i], CFSTR("kCGColorSpace")))
        values[i] = a2;
    }
    return CFDictionaryCreate(0, (const void **)keys, (const void **)values, 7, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  }
  return result;
}

CGPDFStreamRef get_font_stream(uint64_t a1)
{
  unint64_t FontDescriptor;
  CGPDFStreamRef v2;
  const char *v3;
  CGPDFStreamRef value;

  FontDescriptor = CGPDFFontGetFontDescriptor(a1);
  if (!FontDescriptor)
    return 0;
  value = 0;
  if (CGPDFDictionaryGetStream(*(CGPDFDictionaryRef *)(FontDescriptor + 32), "FontFile2", &value))
    v2 = value;
  else
    v2 = 0;
  if (v2)
  {
    value = 0;
    if (CGPDFDictionaryGetName(*((CGPDFDictionaryRef *)v2 + 6), "Subtype", (const char **)&value))
    {
      v3 = (const char *)value;
      if (strcmp((const char *)value, "OpenType"))
      {
        return 0;
      }
    }
  }
  return v2;
}

CGFontRef CGPDFFontFindTrueTypeOrCIDType2(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  int v5;
  CGFontRef v6;
  CGFontRef v7;
  char *v8;
  CGFontRef v9;
  const char *v10;
  char v11;
  uint64_t v12;
  const char **v13;
  const char *v14;
  CGFontRef font_with_variant;
  uint64_t v16;
  const char *v17;
  char *__s2;

  v1 = *(char **)(a1 + 32);
  if (!v1)
    return 0;
  v3 = 0;
  while (v1[v3] - 91 >= 0xFFFFFFE6)
  {
    if (++v3 == 6)
    {
      v4 = 7;
      if (v1[6] != 43)
        v4 = 0;
      v1 += v4;
      break;
    }
  }
  if (a1)
  {
    v5 = *(_DWORD *)(a1 + 200);
    v6 = CGFontCreateWithName(v1);
    if (!v6)
      goto LABEL_15;
    v7 = v6;
    if (v5 == 4)
      return v7;
  }
  else
  {
    v7 = CGFontCreateWithName(v1);
    v5 = 0;
    if (!v7)
      goto LABEL_15;
  }
  if ((CGPDFFontHasMatchingROS(a1, v7) & 1) != 0)
    return v7;
  CFRelease(v7);
LABEL_15:
  __s2 = 0;
  if (CGPDFFontNameHasAlias(v1, &__s2))
  {
    v8 = __s2;
    if (strcmp(v1, __s2))
    {
      v9 = CGFontCreateWithName(v8);
      v8 = __s2;
      if (v9)
      {
        v7 = v9;
        v10 = "CIDFontType2";
        if (v5 == 4)
          v10 = "TrueType";
        free(__s2);
        return v7;
      }
    }
    free(v8);
  }
  v11 = 0;
  v12 = 0;
  while (2)
  {
    v13 = (const char **)&variants[3 * v12];
    while (1)
    {
      v14 = *v13;
      if (font_name_contains_variant(v1, *v13))
        break;
      ++v12;
      v13 += 3;
      if (v12 == 8)
      {
        if ((v11 & 1) == 0)
          return 0;
        goto LABEL_31;
      }
    }
    font_with_variant = find_font_with_variant(v1, v14, variants[3 * v12 + 1], v5);
    if (font_with_variant)
      return font_with_variant;
    ++v12;
    v11 = 1;
    if (v12 != 8)
      continue;
    break;
  }
LABEL_31:
  v16 = 0;
  while (1)
  {
    v17 = variants[v16];
    if (font_name_contains_variant(v1, v17))
    {
      font_with_variant = find_font_with_variant(v1, v17, "", v5);
      if (font_with_variant)
        break;
    }
    v16 += 3;
    if (v16 == 24)
      return 0;
  }
  return font_with_variant;
}

BOOL font_name_contains_variant(const char *a1, const char *a2)
{
  size_t v4;
  size_t v5;

  v4 = strlen(a1);
  v5 = strlen(a2);
  return v4 >= v5 && !strcmp(&a1[v4 - v5], a2);
}

CGFontRef find_font_with_variant(const char *a1, const char *a2, const char *a3, int a4)
{
  size_t v8;
  size_t v9;
  char *v10;
  char *v11;
  char *v12;
  size_t v13;
  CGFontRef v14;
  char *printable_name;
  const char *v16;
  char *v17;
  const char *v18;

  v8 = strlen(a1);
  v9 = strlen(a3);
  v10 = (char *)malloc_type_malloc(v8 + v9 + 1, 0xE8456C36uLL);
  if (!v10)
    return 0;
  v11 = v10;
  strcpy(v10, a1);
  v12 = &v11[strlen(a1)];
  v13 = strlen(a2);
  strcpy(&v12[-v13], a3);
  v14 = CGFontCreateWithName(v11);
  if (v14)
  {
    if (pdf_is_verbose_onceToken[0] != -1)
      dispatch_once(pdf_is_verbose_onceToken, &__block_literal_global_4_5967);
    if (pdf_is_verbose_isVerbose)
    {
      printable_name = create_printable_name(a1);
      v16 = create_printable_name(v11);
      v17 = (char *)v16;
      v18 = "CIDFontType2";
      if (a4 == 4)
        v18 = "TrueType";
      free(v17);
      free(printable_name);
    }
  }
  free(v11);
  return v14;
}

_BYTE *create_printable_name(const char *a1)
{
  size_t v2;
  _BYTE *v3;
  char v4;
  uint64_t v5;
  unsigned __int8 *v6;
  char *v7;
  int v8;

  v2 = strlen(a1);
  v3 = malloc_type_malloc(3 * v2 + 1, 0x566C45D1uLL);
  __CFSetLastAllocationEventName();
  if (v3)
  {
    v4 = *a1;
    if (*a1)
    {
      v5 = 0;
      v6 = (unsigned __int8 *)(a1 + 1);
      do
      {
        v7 = &v3[v5];
        if ((v4 - 127) > 0xA1u)
        {
          ++v5;
          *v7 = v4;
        }
        else
        {
          sprintf_l(v7, 0, "#%02x", v4);
          v5 += 3;
        }
        v8 = *v6++;
        v4 = v8;
      }
      while (v8);
    }
    else
    {
      v5 = 0;
    }
    v3[v5] = 0;
  }
  return v3;
}

void TaggedParser::ScannerContext::op_q(TaggedParser::ScannerContext *this, CGContextRef *a2, void *a3)
{
  CGContextSaveGState(a2[9]);
}

void TaggedParser::ScannerContext::op_Q(TaggedParser::ScannerContext *this, CGContextRef *a2, void *a3)
{
  CGContextRestoreGState(a2[9]);
}

void TaggedParser::ScannerContext::op_cm(TaggedParser::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  CGContext *v5;
  CGAffineTransform v6;
  CGPDFReal value;
  CGPDFReal v8;
  CGPDFReal v9;
  CGPDFReal v10;
  CGPDFReal v11;
  CGPDFReal v12;

  v11 = 0.0;
  v12 = 0.0;
  v9 = 0.0;
  v10 = 0.0;
  value = 0.0;
  v8 = 0.0;
  if (CGPDFScannerPopNumber(this, &value)
    && CGPDFScannerPopNumber(this, &v8)
    && CGPDFScannerPopNumber(this, &v9)
    && CGPDFScannerPopNumber(this, &v10)
    && CGPDFScannerPopNumber(this, &v11)
    && CGPDFScannerPopNumber(this, &v12))
  {
    v5 = (CGContext *)*((_QWORD *)a2 + 9);
    v6.a = v12;
    v6.b = v11;
    v6.c = v10;
    v6.d = v9;
    v6.tx = v8;
    v6.ty = value;
    CGContextConcatCTM(v5, &v6);
  }
}

void TaggedParser::ScannerContext::op_j(TaggedParser::ScannerContext *this, CGContextRef *a2, void *a3)
{
  CGPDFInteger value;

  value = 0;
  if (CGPDFScannerPopInteger(this, &value))
  {
    if ((unint64_t)value >= 3)
      pdf_error("invalid line join: %ld.", value);
    else
      CGContextSetLineJoin(a2[9], (CGLineJoin)value);
  }
}

void TaggedParser::ScannerContext::op_J(TaggedParser::ScannerContext *this, CGContextRef *a2, void *a3)
{
  CGPDFInteger value;

  value = 0;
  if (CGPDFScannerPopInteger(this, &value))
  {
    if ((unint64_t)value >= 3)
      pdf_error("invalid line cap: %ld.", value);
    else
      CGContextSetLineCap(a2[9], (CGLineCap)value);
  }
}

void TaggedParser::ScannerContext::op_w(TaggedParser::ScannerContext *this, CGContextRef *a2, void *a3)
{
  CGPDFReal value;

  value = 0.0;
  if (CGPDFScannerPopNumber(this, &value))
  {
    if (value >= 0.0)
      CGContextSetLineWidth(a2[9], value);
    else
      pdf_error("invalid line width: %g.", value);
  }
}

void TaggedParser::ScannerContext::op_d(TaggedParser::ScannerContext *this, CGContextRef *a2, void *a3)
{
  size_t v5;
  CGFloat *v6;
  CGFloat *v7;
  CGPDFArrayRef array;
  CGPDFReal value;

  value = 0.0;
  if (CGPDFScannerPopNumber(this, &value))
  {
    array = 0;
    if (CGPDFScannerPopArray(this, &array))
    {
      if (array)
      {
        v5 = *((_QWORD *)array + 2);
        if (v5 - 0x1FFFFFFFFFFFFFFFLL >= 0xE000000000000002)
        {
          v6 = (CGFloat *)malloc_type_malloc(8 * v5, 0x6F779235uLL);
          if (v6)
          {
            v7 = v6;
            if ((CGPDFArrayGetNumbers((uint64_t)array, (uint64_t)v6, v5) & 1) != 0)
              CGContextSetLineDash(a2[9], value, v7, v5);
            else
              pdf_error("invalid dash array.");
            free(v7);
          }
        }
      }
    }
  }
}

void TaggedParser::ScannerContext::op_M(TaggedParser::ScannerContext *this, CGContextRef *a2, void *a3)
{
  CGPDFReal value;

  value = 0.0;
  if (CGPDFScannerPopNumber(this, &value))
  {
    if (value >= 1.0)
      CGContextSetMiterLimit(a2[9], value);
    else
      pdf_error("invalid miter limit: %g.", value);
  }
}

void TaggedParser::ScannerContext::op_i(TaggedParser::ScannerContext *this, CGContextRef *a2, void *a3)
{
  CGPDFReal value;

  value = 0.0;
  if (CGPDFScannerPopNumber(this, &value))
    CGContextSetFlatness(a2[9], value);
}

void TaggedParser::ScannerContext::op_m(TaggedParser::ScannerContext *this, CGContextRef *a2, void *a3)
{
  CGFloat v5;
  CGPDFReal value;

  v5 = 0.0;
  value = 0.0;
  if (CGPDFScannerPopNumber(this, &v5) && CGPDFScannerPopNumber(this, &value))
    CGContextMoveToPoint(a2[9], value, v5);
}

void TaggedParser::ScannerContext::op_l(TaggedParser::ScannerContext *this, CGContextRef *a2, void *a3)
{
  CGFloat v5;
  CGPDFReal value;

  v5 = 0.0;
  value = 0.0;
  if (CGPDFScannerPopNumber(this, &v5) && CGPDFScannerPopNumber(this, &value))
    CGContextAddLineToPoint(a2[9], value, v5);
}

void TaggedParser::ScannerContext::op_c(TaggedParser::ScannerContext *this, CGContextRef *a2, void *a3)
{
  CGFloat y;
  CGPDFReal value;
  CGPDFReal v7;
  CGPDFReal v8;
  CGPDFReal v9;
  CGPDFReal v10;

  v10 = 0.0;
  v8 = 0.0;
  v9 = 0.0;
  value = 0.0;
  v7 = 0.0;
  y = 0.0;
  if (CGPDFScannerPopNumber(this, &y)
    && CGPDFScannerPopNumber(this, &value)
    && CGPDFScannerPopNumber(this, &v7)
    && CGPDFScannerPopNumber(this, &v8)
    && CGPDFScannerPopNumber(this, &v9)
    && CGPDFScannerPopNumber(this, &v10))
  {
    CGContextAddCurveToPoint(a2[9], v10, v9, v8, v7, value, y);
  }
}

void TaggedParser::ScannerContext::op_v(TaggedParser::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  CGPoint PathCurrentPoint;
  CGFloat v6;
  CGPDFReal value;
  CGPDFReal v8;
  CGPDFReal v9;

  v8 = 0.0;
  v9 = 0.0;
  v6 = 0.0;
  value = 0.0;
  if (CGPDFScannerPopNumber(this, &v6)
    && CGPDFScannerPopNumber(this, &value)
    && CGPDFScannerPopNumber(this, &v8)
    && CGPDFScannerPopNumber(this, &v9))
  {
    PathCurrentPoint = CGContextGetPathCurrentPoint((CGContextRef)*((_QWORD *)a2 + 9));
    CGContextAddCurveToPoint(*((CGContextRef *)a2 + 9), PathCurrentPoint.x, PathCurrentPoint.y, v9, v8, value, v6);
  }
}

void TaggedParser::ScannerContext::op_y(TaggedParser::ScannerContext *this, CGContextRef *a2, void *a3)
{
  CGFloat v5;
  CGPDFReal value;
  CGPDFReal v7;
  CGPDFReal v8;

  v7 = 0.0;
  v8 = 0.0;
  v5 = 0.0;
  value = 0.0;
  if (CGPDFScannerPopNumber(this, &v5)
    && CGPDFScannerPopNumber(this, &value)
    && CGPDFScannerPopNumber(this, &v7)
    && CGPDFScannerPopNumber(this, &v8))
  {
    CGContextAddCurveToPoint(a2[9], v8, v7, value, v5, value, v5);
  }
}

void TaggedParser::ScannerContext::op_h(TaggedParser::ScannerContext *this, CGContextRef *a2, void *a3)
{
  CGContextClosePath(a2[9]);
}

void TaggedParser::ScannerContext::op_re(TaggedParser::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  CGPDFReal v5;
  CGPDFReal v6;
  CGContext *v7;
  CGPDFReal v8;
  double v9;
  double v10;
  CGPDFReal value;
  CGPDFReal y;
  CGPDFReal x;

  y = 0.0;
  x = 0.0;
  v10 = 0.0;
  value = 0.0;
  if (CGPDFScannerPopNumber(this, &v10)
    && CGPDFScannerPopNumber(this, &value)
    && CGPDFScannerPopNumber(this, &y)
    && CGPDFScannerPopNumber(this, &x))
  {
    v6 = value;
    v5 = y;
    v7 = (CGContext *)*((_QWORD *)a2 + 9);
    v8 = x;
    if (value < 0.0 || (v9 = v10, v10 < 0.0))
    {
      CGContextMoveToPoint(v7, x, y);
      CGContextAddLineToPoint(*((CGContextRef *)a2 + 9), x + value, y);
      CGContextAddLineToPoint(*((CGContextRef *)a2 + 9), x + value, y + v10);
      CGContextAddLineToPoint(*((CGContextRef *)a2 + 9), x, y + v10);
      CGContextClosePath(*((CGContextRef *)a2 + 9));
    }
    else
    {
      CGContextAddRect(v7, *(CGRect *)&v8);
    }
  }
}

void TaggedParser::ScannerContext::op_n(TaggedParser::ScannerContext *this, CGContextRef *a2, void *a3)
{
  CGContextBeginPath(a2[9]);
  TaggedParser::ScannerContext::handleClipPath((TaggedParser::ScannerContext *)a2);
}

double TaggedParser::ScannerContext::op_S(TaggedParser::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  return TaggedParser::ScannerContext::drawPath(a2, kCGPathStroke, 0);
}

double TaggedParser::ScannerContext::op_s(TaggedParser::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  return TaggedParser::ScannerContext::drawPath(a2, kCGPathStroke, 1);
}

double TaggedParser::ScannerContext::op_f(TaggedParser::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  return TaggedParser::ScannerContext::drawPath(a2, kCGPathFill, 0);
}

double TaggedParser::ScannerContext::op_fstar(TaggedParser::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  return TaggedParser::ScannerContext::drawPath(a2, kCGPathEOFill, 0);
}

double TaggedParser::ScannerContext::op_B(TaggedParser::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  return TaggedParser::ScannerContext::drawPath(a2, kCGPathFillStroke, 0);
}

double TaggedParser::ScannerContext::op_b(TaggedParser::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  return TaggedParser::ScannerContext::drawPath(a2, kCGPathFillStroke, 1);
}

double TaggedParser::ScannerContext::op_Bstar(TaggedParser::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  return TaggedParser::ScannerContext::drawPath(a2, kCGPathEOFillStroke, 0);
}

double TaggedParser::ScannerContext::op_bstar(TaggedParser::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  return TaggedParser::ScannerContext::drawPath(a2, kCGPathEOFillStroke, 1);
}

void TaggedParser::ScannerContext::op_W(TaggedParser::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  *((_DWORD *)a2 + 14) = 1;
}

void TaggedParser::ScannerContext::op_Wstar(TaggedParser::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  *((_DWORD *)a2 + 14) = 2;
}

void TaggedParser::ScannerContext::op_Do(TaggedParser::ScannerContext *this, CGPDFPage **a2, void *a3)
{
  CGPDFContentStream *v5;
  char *v6;
  uint64_t v7;
  const void *v8;
  const void *v9;
  int v10;
  uint64_t v11;
  CGPDFStream *v12;
  CGPDFDictionary *v13;
  const CGAffineTransform *v14;
  __int128 v15;
  CGPDFContentStream *v16;
  CGPDFScanner *v17;
  char *value;
  CGAffineTransform transform;

  value = 0;
  if (CGPDFScannerPopName(this, (const char **)&value))
  {
    v5 = (CGPDFContentStream *)*((_QWORD *)this + 7);
    if (v5)
    {
      v6 = value;
      v7 = *((_QWORD *)this + 7);
      while (1)
      {
        v8 = CGPDFResourcesCopyXObject(*(_QWORD *)(v7 + 32), v6);
        if (v8)
          break;
        v7 = *(_QWORD *)(v7 + 40);
        if (!v7)
          return;
      }
      v9 = v8;
      v10 = *((_DWORD *)v8 + 4);
      if (v10 == 2)
      {
        v11 = CGPDFXObjectGetValue((uint64_t)v8);
        if (v11)
        {
          v12 = *(CGPDFStream **)v11;
          v13 = *(CGPDFDictionary **)(v11 + 88);
        }
        else
        {
          v12 = 0;
          v13 = 0;
        }
        v14 = (const CGAffineTransform *)(v11 + 40);
      }
      else
      {
        if (v10 != 1)
        {
          if (v10)
          {
            pdf_error("unrecognized or unsupported XObject subtype.");
          }
          else
          {
            CGPDFXObjectGetValue((uint64_t)v8);
            TaggedParser::ScannerContext::drawImage(a2);
          }
LABEL_27:
          CFRelease(v9);
          return;
        }
        v11 = CGPDFXObjectGetValue((uint64_t)v8);
        if (v11)
        {
          v12 = *(CGPDFStream **)(v11 + 16);
          v13 = *(CGPDFDictionary **)(v11 + 104);
        }
        else
        {
          v12 = 0;
          v13 = 0;
        }
        v14 = (const CGAffineTransform *)(v11 + 56);
      }
      if (!v11)
        v14 = &CGAffineTransformIdentity;
      v15 = *(_OWORD *)&v14->c;
      *(_OWORD *)&transform.a = *(_OWORD *)&v14->a;
      *(_OWORD *)&transform.c = v15;
      *(_OWORD *)&transform.tx = *(_OWORD *)&v14->tx;
      CGContextSaveGState(a2[9]);
      CGContextConcatCTM(a2[9], &transform);
      v16 = CGPDFContentStreamCreateWithStream(v12, v13, v5);
      v17 = CGPDFScannerCreate(v16, a2[5], a2);
      CGPDFScannerScan(v17);
      if (v17)
        CFRelease(v17);
      if (v16)
        CFRelease(v16);
      CGContextRestoreGState(a2[9]);
      goto LABEL_27;
    }
  }
}

void TaggedParser::ScannerContext::op_EI(TaggedParser::ScannerContext *this, CGPDFPage **a2, void *a3)
{
  uint64_t Inline;
  const void *v6;
  CGPDFStreamRef value;

  value = 0;
  if (CGPDFScannerPopStream(this, &value))
  {
    Inline = CGPDFImageCreateInline(*((_QWORD *)this + 7), (uint64_t)value);
    if (Inline)
    {
      v6 = (const void *)Inline;
      TaggedParser::ScannerContext::drawImage(a2);
      CFRelease(v6);
    }
  }
}

void TaggedParser::ScannerContext::op_BDC(TaggedParser::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  int v7;
  CGPDFDictionary *v8;
  const char *v9;
  char *v10;
  TaggedParser *v11;
  CGPDFPage *v12;
  char *value;

  v3 = *((_DWORD *)this + 18);
  if (v3 <= 0)
  {
    pdf_error("stack underflow.", a2, a3);
  }
  else
  {
    v4 = *((_QWORD *)this + 10);
    v5 = v3 - 1;
    *((_DWORD *)this + 18) = v5;
    if (!v4)
      return;
    v7 = *(_DWORD *)(v4 + 40 * v5 + 8);
    if (v7 == 8)
    {
      v9 = 0;
      v8 = *(CGPDFDictionary **)(v4 + 40 * v5 + 32);
    }
    else
    {
      if (v7 != 5)
        return;
      v8 = 0;
      v9 = *(const char **)(v4 + 40 * v5 + 32);
    }
    value = 0;
    if (CGPDFScannerPopName(this, (const char **)&value))
    {
      v11 = (TaggedParser *)*((_QWORD *)a2 + 6);
      v12 = *(CGPDFPage **)a2;
      if (v9)
        TaggedParser::BeginMarkedContentSequence(v11, v12, v9, v10);
      else
        TaggedParser::BeginMarkedContentSequence(v11, v12, v8, (CGPDFDictionary *)v10);
    }
  }
}

void TaggedParser::ScannerContext::op_BMC(TaggedParser::ScannerContext *this, TaggedParser **a2, void *a3)
{
  CGPDFDictionary *v4;
  char *value;

  value = 0;
  if (CGPDFScannerPopName(this, (const char **)&value))
    TaggedParser::BeginMarkedContentSequence(a2[6], *a2, 0, v4);
}

uint64_t TaggedParser::ScannerContext::op_EMC(TaggedParser::ScannerContext *this, CGPDFScanner *a2, void *a3)
{
  return TaggedParser::EndMarkedContentSequence(**((_QWORD **)a2 + 6), *(CGPDFPage **)a2);
}

void TaggedParser::ScannerContext::drawImage(CGPDFPage **a1)
{
  CGAffineTransform v2;
  CGRect v3;
  CGRect v4;

  CGContextGetCTM(&v2, a1[9]);
  v3.origin.x = 0.0;
  v3.origin.y = 0.0;
  v3.size.width = 1.0;
  v3.size.height = 1.0;
  v4 = CGRectApplyAffineTransform(v3, &v2);
  TaggedParser::AddGraphicBounds(a1[6], *a1, v4, 1);
}

double TaggedParser::ScannerContext::drawPath(TaggedParser::ScannerContext *this, CGPathDrawingMode mode, int a3)
{
  uint64_t v5;
  const CGRect *v6;
  CGFloat *p_height;
  CGFloat *p_y;
  CGSize *p_size;
  BOOL v10;
  const CGRect *v11;
  CGFloat *v12;
  CGSize *v13;
  CGFloat *v14;
  CGRect v16;

  if (a3)
    CGContextClosePath(*((CGContextRef *)this + 9));
  CGContextDrawPath(*((CGContextRef *)this + 9), mode);
  TaggedParser::ScannerContext::handleClipPath(this);
  v5 = *((_QWORD *)this + 8);
  v6 = &CGRectNull;
  p_height = &CGRectNull.size.height;
  p_y = &CGRectNull.origin.y;
  p_size = &CGRectNull.size;
  if (v5)
  {
    v10 = *(_QWORD *)(v5 + 592) == *(_QWORD *)(v5 + 600);
    v11 = (const CGRect *)(v5 + 88);
    v12 = (CGFloat *)(v5 + 96);
    v13 = (CGSize *)(v5 + 104);
    v14 = (CGFloat *)(v5 + 112);
    if (!v10)
    {
      p_size = v13;
      p_y = v12;
      v6 = v11;
      p_height = v14;
    }
  }
  v16.size.height = *p_height;
  v16.origin.x = v6->origin.x;
  v16.origin.y = *p_y;
  v16.size.width = p_size->width;
  TaggedParser::AddGraphicBounds(*((TaggedParser **)this + 6), *(CGPDFPage **)this, v16, 0);
  return CGDisplayListReset(*((_QWORD *)this + 8));
}

void TaggedParser::ScannerContext::handleClipPath(TaggedParser::ScannerContext *this)
{
  int v1;
  const CGPath *v3;
  const CGPath *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *((_DWORD *)this + 14);
  if (v1)
  {
    *((_DWORD *)this + 14) = 0;
    v3 = CGContextCopyPath(*((CGContextRef *)this + 9));
    if (v3)
    {
      v4 = v3;
      CGContextAddPath(*((CGContextRef *)this + 9), v3);
      clip(*((_QWORD *)this + 9), v1 == 2, v5, v6, v7, v8, v9, v10);
      CFRelease(v4);
    }
  }
}

CGAffineTransform *__cdecl CGAffineTransformMake(CGAffineTransform *__return_ptr retstr, CGFloat a, CGFloat b, CGFloat c, CGFloat d, CGFloat tx, CGFloat ty)
{
  CGAffineTransform *result;

  retstr->a = a;
  retstr->b = b;
  retstr->c = c;
  retstr->d = d;
  retstr->tx = tx;
  retstr->ty = ty;
  return result;
}

BOOL CGAffineTransformIsRectilinear(double *a1)
{
  if (a1[1] == 0.0 && a1[2] == 0.0)
    return 1;
  if (*a1 == 0.0)
    return a1[3] == 0.0;
  return 0;
}

BOOL CGAffineTransformIsSingular(double *a1)
{
  return *a1 * a1[3] - a1[1] * a1[2] == 0.0;
}

void CGAffineTransformMakeWithRect(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  if (a4 < 0.0 || a5 < 0.0)
    *(CGRect *)&a2 = CGRectStandardize(*(CGRect *)&a2);
  *(double *)a1 = a4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(double *)(a1 + 24) = a5;
  *(double *)(a1 + 32) = a2;
  *(double *)(a1 + 40) = a3;
}

CGAffineTransformComponents *__cdecl CGAffineTransformDecompose(CGAffineTransformComponents *__return_ptr retstr, CGAffineTransform *transform)
{
  CGFloat b;
  double a;
  int8x16_t v6;
  CGAffineTransformComponents *result;
  int8x16_t v8;
  __double2 v9;
  double v10;
  double d;
  double c;
  double v13;
  double v14;
  double v15;
  float64x2_t v16;
  int8x16_t v17;

  a = transform->a;
  b = transform->b;
  *(double *)v6.i64 = atan2(b, transform->a);
  v17 = v6;
  v9 = __sincos_stret(*(double *)v6.i64);
  v10 = b / v9.__sinval;
  if (fabs(v9.__cosval) >= fabs(v9.__sinval))
    v10 = a / v9.__cosval;
  c = transform->c;
  d = transform->d;
  v13 = d * v9.__cosval - c * v9.__sinval;
  v14 = 0.0;
  if (v13 != 0.0)
    v14 = (v9.__sinval * d + c * v9.__cosval) / v13;
  if (v13 < 0.0)
  {
    v10 = -v10;
    v13 = -v13;
    v8.i64[0] = 0x400921FB54442D18;
    v16.f64[0] = NAN;
    v16.f64[1] = NAN;
    v15 = *(double *)v17.i64 - *(double *)vbslq_s8((int8x16_t)vnegq_f64(v16), v8, v17).i64;
  }
  else
  {
    v15 = *(double *)v17.i64;
  }
  retstr->scale.width = v10;
  retstr->scale.height = v13;
  retstr->horizontalShear = v14;
  retstr->rotation = v15;
  retstr->translation = *(CGVector *)&transform->tx;
  return result;
}

CGAffineTransform *__cdecl CGAffineTransformMakeWithComponents(CGAffineTransform *__return_ptr retstr, CGAffineTransformComponents *components)
{
  CGAffineTransform *result;
  __double2 v5;
  double height;
  double horizontalShear;
  CGFloat v8;

  v5 = __sincos_stret(components->rotation);
  height = components->scale.height;
  horizontalShear = components->horizontalShear;
  v8 = components->scale.width * v5.__sinval;
  retstr->a = components->scale.width * v5.__cosval;
  retstr->b = v8;
  retstr->c = height * horizontalShear * v5.__cosval - height * v5.__sinval;
  retstr->d = v5.__cosval * height + height * horizontalShear * v5.__sinval;
  *(CGVector *)&retstr->tx = components->translation;
  return result;
}

BOOL CGAffineTransformDecompose_SPI(_OWORD *a1, CGSize *a2, CGFloat *a3, BOOL *a4, CGVector *a5)
{
  __int128 v9;
  CGAffineTransform v11;
  CGAffineTransformComponents v12;

  v9 = a1[1];
  *(_OWORD *)&v11.a = *a1;
  *(_OWORD *)&v11.c = v9;
  *(_OWORD *)&v11.tx = a1[2];
  memset(&v12, 0, sizeof(v12));
  CGAffineTransformDecompose(&v12, &v11);
  if (a2)
    *a2 = v12.scale;
  if (a3)
    *a3 = v12.rotation;
  if (a4)
    *a4 = v12.scale.width < 0.0;
  if (a5)
    *a5 = v12.translation;
  return fabs(v12.horizontalShear) < 1.42108547e-14;
}

uint64_t colorsync_smart_null_1622()
{
  return 0;
}

uint64_t *__color_space_state_create_extended_display_p3_block_invoke_2()
{
  uint64_t *result;
  uint64_t v1;

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncDisplayP3Profile")) != 0)
  {
    v1 = *result;
  }
  else
  {
    v1 = 0;
  }
  color_space_state_create_extended_display_p3_s = v1;
  return result;
}

uint64_t (*__color_space_state_create_extended_display_p3_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileCreateWithName");
  v1 = colorsync_smart_null_1622;
  if (result)
    v1 = result;
  color_space_state_create_extended_display_p3_f = v1;
  return result;
}

uint64_t *__color_space_state_create_p3_709_block_invoke_2()
{
  uint64_t *result;
  uint64_t v1;

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncDisplayP3_709OETFProfile")) != 0)
  {
    v1 = *result;
  }
  else
  {
    v1 = 0;
  }
  color_space_state_create_p3_709_s = v1;
  return result;
}

uint64_t (*__color_space_state_create_p3_709_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileCreateWithName");
  v1 = colorsync_smart_null_1622;
  if (result)
    v1 = result;
  color_space_state_create_p3_709_f = v1;
  return result;
}

uint64_t *__color_space_state_create_acescg_linear_block_invoke_2()
{
  uint64_t *result;
  uint64_t v1;

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncACESCGLinearProfile")) != 0)
  {
    v1 = *result;
  }
  else
  {
    v1 = 0;
  }
  color_space_state_create_acescg_linear_s = v1;
  return result;
}

uint64_t (*__color_space_state_create_acescg_linear_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileCreateWithName");
  v1 = colorsync_smart_null_1622;
  if (result)
    v1 = result;
  color_space_state_create_acescg_linear_f = v1;
  return result;
}

uint64_t *__color_space_state_create_itur_709_pq_block_invoke_2()
{
  uint64_t *result;
  uint64_t v1;

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncITUR709_PQProfile")) != 0)
  {
    v1 = *result;
  }
  else
  {
    v1 = 0;
  }
  color_space_state_create_itur_709_pq_s = v1;
  return result;
}

uint64_t (*__color_space_state_create_itur_709_pq_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileCreateWithName");
  v1 = colorsync_smart_null_1622;
  if (result)
    v1 = result;
  color_space_state_create_itur_709_pq_f = v1;
  return result;
}

uint64_t *__color_space_state_create_itur_709_hlg_block_invoke_2()
{
  uint64_t *result;
  uint64_t v1;

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncITUR709_HLGProfile")) != 0)
  {
    v1 = *result;
  }
  else
  {
    v1 = 0;
  }
  color_space_state_create_itur_709_hlg_s = v1;
  return result;
}

uint64_t (*__color_space_state_create_itur_709_hlg_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileCreateWithName");
  v1 = colorsync_smart_null_1622;
  if (result)
    v1 = result;
  color_space_state_create_itur_709_hlg_f = v1;
  return result;
}

uint64_t *__color_space_state_create_extended_itur_2020_block_invoke_2()
{
  uint64_t *result;
  uint64_t v1;

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncITUR2020Profile")) != 0)
  {
    v1 = *result;
  }
  else
  {
    v1 = 0;
  }
  color_space_state_create_extended_itur_2020_s = v1;
  return result;
}

uint64_t (*__color_space_state_create_extended_itur_2020_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileCreateWithName");
  v1 = colorsync_smart_null_1622;
  if (result)
    v1 = result;
  color_space_state_create_extended_itur_2020_f = v1;
  return result;
}

uint64_t *__color_space_state_create_dci_p3_block_invoke_2()
{
  uint64_t *result;
  uint64_t v1;

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncDCIP3Profile")) != 0)
  {
    v1 = *result;
  }
  else
  {
    v1 = 0;
  }
  color_space_state_create_dci_p3_s = v1;
  return result;
}

uint64_t (*__color_space_state_create_dci_p3_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileCreateWithName");
  v1 = colorsync_smart_null_1622;
  if (result)
    v1 = result;
  color_space_state_create_dci_p3_f = v1;
  return result;
}

uint64_t *__color_space_state_create_perceptual_rgb_block_invoke_2()
{
  uint64_t *result;
  uint64_t v1;

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncPerceptualStandardRGBProfile")) != 0)
  {
    v1 = *result;
  }
  else
  {
    v1 = 0;
  }
  color_space_state_create_perceptual_rgb_s = v1;
  return result;
}

uint64_t (*__color_space_state_create_perceptual_rgb_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileCreateWithName");
  v1 = colorsync_smart_null_1622;
  if (result)
    v1 = result;
  color_space_state_create_perceptual_rgb_f = v1;
  return result;
}

uint64_t *__color_space_state_create_core_media_709_block_invoke_2()
{
  uint64_t *result;
  uint64_t v1;

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncCoreVideo709Profile")) != 0)
  {
    v1 = *result;
  }
  else
  {
    v1 = 0;
  }
  color_space_state_create_core_media_709_s = v1;
  return result;
}

uint64_t (*__color_space_state_create_core_media_709_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileCreateWithName");
  v1 = colorsync_smart_null_1622;
  if (result)
    v1 = result;
  color_space_state_create_core_media_709_f = v1;
  return result;
}

uint64_t CGPDFCIDToGlyphMapCreate(char *a1)
{
  char *v1;
  int v2;
  CGPDFDictionary *v4;
  CFDataRef v5;
  const UInt8 *BytePtr;
  unint64_t v7;
  int v8;
  unint64_t i;
  int v10;
  uint64_t Font;
  uint64_t v12;
  int v13;
  __int16 v14;
  char *v15;
  __int16 v16;
  __int16 v17;
  CGPDFDataFormat format;
  CGPDFStreamRef value;
  char *__s1;

  v1 = a1;
  if (!a1)
    return (uint64_t)v1;
  v2 = *((_DWORD *)a1 + 50);
  if (v2 != 7)
  {
    if (v2 == 6)
      return -1;
    else
      return 0;
  }
  value = 0;
  __s1 = 0;
  format = CGPDFDataFormatRaw;
  v4 = (CGPDFDictionary *)*((_QWORD *)a1 + 2);
  if (!CGPDFDictionaryGetStream(v4, "CIDToGIDMap", &value))
  {
    Font = CGPDFFontGetFont((uint64_t)v1);
    if (Font)
    {
      v12 = Font;
      pthread_mutex_lock((pthread_mutex_t *)(v1 + 136));
      v13 = v1[304];
      pthread_mutex_unlock((pthread_mutex_t *)(v1 + 136));
      if (v13)
      {
        v17 = 8226;
        v16 = 0;
        (*(void (**)(_QWORD, __int16 *, __int16 *, uint64_t))(*(_QWORD *)(v12 + 16) + 376))(*(_QWORD *)(v12 + 112), &v17, &v16, 1);
        v14 = v16;
        v1 = (char *)malloc_type_calloc(1uLL, 0x208uLL, 0x1080040036EC52CuLL);
        *(_WORD *)v1 = v14;
        return (uint64_t)v1;
      }
    }
    if (CGPDFFontIsEmbedded((uint64_t)v1))
    {
      if (!CGPDFDictionaryGetName(v4, "CIDToGIDMap", (const char **)&__s1))
        return -1;
      v15 = __s1;
      if (!strcmp(__s1, "Identity"))
        return -1;
    }
    else
    {
      pdf_log("missing or invalid CIDToGIDMap entry.");
    }
    return 0;
  }
  v5 = CGPDFStreamCopyData(value, &format);
  if (!v5 || format)
  {
    pdf_error("invalid CIDToGIDMap entry.");
    if (v5)
      CFRelease(v5);
    return 0;
  }
  v1 = (char *)malloc_type_calloc(1uLL, 0x208uLL, 0x1080040036EC52CuLL);
  *(_WORD *)v1 = 0;
  BytePtr = CFDataGetBytePtr(v5);
  v7 = CFDataGetLength(v5) & 0xFFFFFFFFFFFFFFFELL;
  if (v7)
  {
    v8 = 0;
    for (i = 0; i < v7; i += 2)
    {
      v10 = v8 + 1;
      CGFontIndexMapAddIndex((unsigned __int16 *)v1, (unsigned __int16)v8, bswap32(*(unsigned __int16 *)&BytePtr[i]) >> 16);
      v8 = v10;
    }
  }
  CFRelease(v5);
  return (uint64_t)v1;
}

BOOL CGCFDictionaryGetPointerAsNSValue(void *a1, uint64_t a2, _QWORD *a3)
{
  void *v4;
  void *v5;

  v4 = (void *)objc_msgSend(a1, "valueForKey:", a2);
  v5 = v4;
  if (v4)
    *a3 = objc_msgSend(v4, "pointerValue");
  return v5 != 0;
}

BOOL CGCFDictionaryGetRectAsNSValue(void *a1, uint64_t a2, _QWORD *a3)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = (void *)objc_msgSend(a1, "valueForKey:", a2);
  v5 = v4;
  if (v4)
  {
    objc_msgSend(v4, "rectValue");
    *a3 = v6;
    a3[1] = v7;
    a3[2] = v8;
    a3[3] = v9;
  }
  return v5 != 0;
}

void AddLazyPdfOperators(CGPDFOperatorTable *a1)
{
  CGPDFOperatorTableSetCallback(a1, "b", (CGPDFOperatorCallback)op_b);
  CGPDFOperatorTableSetCallback(a1, "B", (CGPDFOperatorCallback)op_B);
  CGPDFOperatorTableSetCallback(a1, "BDC", (CGPDFOperatorCallback)op_BDC);
  CGPDFOperatorTableSetCallback(a1, "BMC", (CGPDFOperatorCallback)op_BMC);
  CGPDFOperatorTableSetCallback(a1, "BT", (CGPDFOperatorCallback)op_BT);
  CGPDFOperatorTableSetCallback(a1, "b*", (CGPDFOperatorCallback)op_bstar);
  CGPDFOperatorTableSetCallback(a1, "B*", (CGPDFOperatorCallback)op_Bstar);
  CGPDFOperatorTableSetCallback(a1, "c", (CGPDFOperatorCallback)op_c);
  CGPDFOperatorTableSetCallback(a1, "cm", (CGPDFOperatorCallback)op_cm);
  CGPDFOperatorTableSetCallback(a1, "cs", (CGPDFOperatorCallback)op_cs);
  CGPDFOperatorTableSetCallback(a1, "CS", (CGPDFOperatorCallback)op_CS);
  CGPDFOperatorTableSetCallback(a1, "Do", (CGPDFOperatorCallback)op_Do);
  CGPDFOperatorTableSetCallback(a1, "d", (CGPDFOperatorCallback)op_d);
  CGPDFOperatorTableSetCallback(a1, "DP", (CGPDFOperatorCallback)op_DP);
  CGPDFOperatorTableSetCallback(a1, "d0", (CGPDFOperatorCallback)op_d0);
  CGPDFOperatorTableSetCallback(a1, "d1", (CGPDFOperatorCallback)op_d1);
  CGPDFOperatorTableSetCallback(a1, "EI", (CGPDFOperatorCallback)op_EI);
  CGPDFOperatorTableSetCallback(a1, "EMC", (CGPDFOperatorCallback)op_EMC);
  CGPDFOperatorTableSetCallback(a1, "ET", (CGPDFOperatorCallback)op_ET);
  CGPDFOperatorTableSetCallback(a1, "f", (CGPDFOperatorCallback)op_f);
  CGPDFOperatorTableSetCallback(a1, "F", (CGPDFOperatorCallback)op_f);
  CGPDFOperatorTableSetCallback(a1, "f*", (CGPDFOperatorCallback)op_fstar);
  CGPDFOperatorTableSetCallback(a1, "g", (CGPDFOperatorCallback)op_g);
  CGPDFOperatorTableSetCallback(a1, "G", (CGPDFOperatorCallback)op_G);
  CGPDFOperatorTableSetCallback(a1, "gs", (CGPDFOperatorCallback)op_gs);
  CGPDFOperatorTableSetCallback(a1, "h", (CGPDFOperatorCallback)op_h);
  CGPDFOperatorTableSetCallback(a1, "i", (CGPDFOperatorCallback)op_i);
  CGPDFOperatorTableSetCallback(a1, "j", (CGPDFOperatorCallback)op_j);
  CGPDFOperatorTableSetCallback(a1, "J", (CGPDFOperatorCallback)op_J);
  CGPDFOperatorTableSetCallback(a1, "k", (CGPDFOperatorCallback)op_k);
  CGPDFOperatorTableSetCallback(a1, "K", (CGPDFOperatorCallback)op_K);
  CGPDFOperatorTableSetCallback(a1, "l", (CGPDFOperatorCallback)op_l);
  CGPDFOperatorTableSetCallback(a1, "m", (CGPDFOperatorCallback)op_m);
  CGPDFOperatorTableSetCallback(a1, "M", (CGPDFOperatorCallback)op_M);
  CGPDFOperatorTableSetCallback(a1, "MP", (CGPDFOperatorCallback)op_MP);
  CGPDFOperatorTableSetCallback(a1, "n", (CGPDFOperatorCallback)op_n);
  CGPDFOperatorTableSetCallback(a1, "q", (CGPDFOperatorCallback)op_q);
  CGPDFOperatorTableSetCallback(a1, "Q", (CGPDFOperatorCallback)op_Q);
  CGPDFOperatorTableSetCallback(a1, "re", (CGPDFOperatorCallback)op_re);
  CGPDFOperatorTableSetCallback(a1, "RG", (CGPDFOperatorCallback)op_RG);
  CGPDFOperatorTableSetCallback(a1, "rg", (CGPDFOperatorCallback)op_rg);
  CGPDFOperatorTableSetCallback(a1, "ri", (CGPDFOperatorCallback)op_ri);
  CGPDFOperatorTableSetCallback(a1, "s", (CGPDFOperatorCallback)op_s);
  CGPDFOperatorTableSetCallback(a1, "S", (CGPDFOperatorCallback)op_S);
  CGPDFOperatorTableSetCallback(a1, "sc", (CGPDFOperatorCallback)op_sc);
  CGPDFOperatorTableSetCallback(a1, "SC", (CGPDFOperatorCallback)op_SC);
  CGPDFOperatorTableSetCallback(a1, "SCN", (CGPDFOperatorCallback)op_SCN);
  CGPDFOperatorTableSetCallback(a1, "scn", (CGPDFOperatorCallback)op_scn);
  CGPDFOperatorTableSetCallback(a1, "sh", (CGPDFOperatorCallback)op_sh);
  CGPDFOperatorTableSetCallback(a1, "Tc", (CGPDFOperatorCallback)op_Tc);
  CGPDFOperatorTableSetCallback(a1, "Td", (CGPDFOperatorCallback)op_Td);
  CGPDFOperatorTableSetCallback(a1, "TD", (CGPDFOperatorCallback)op_TD);
  CGPDFOperatorTableSetCallback(a1, "Tf", (CGPDFOperatorCallback)op_Tf);
  CGPDFOperatorTableSetCallback(a1, "Tj", (CGPDFOperatorCallback)op_Tj);
  CGPDFOperatorTableSetCallback(a1, "TJ", (CGPDFOperatorCallback)op_TJ);
  CGPDFOperatorTableSetCallback(a1, "TL", (CGPDFOperatorCallback)op_TL);
  CGPDFOperatorTableSetCallback(a1, "Tm", (CGPDFOperatorCallback)op_Tm);
  CGPDFOperatorTableSetCallback(a1, "Tr", (CGPDFOperatorCallback)op_Tr);
  CGPDFOperatorTableSetCallback(a1, "T*", (CGPDFOperatorCallback)op_Tstar);
  CGPDFOperatorTableSetCallback(a1, "Ts", (CGPDFOperatorCallback)op_Ts);
  CGPDFOperatorTableSetCallback(a1, "Tw", (CGPDFOperatorCallback)op_Tw);
  CGPDFOperatorTableSetCallback(a1, "Tz", (CGPDFOperatorCallback)op_Tz);
  CGPDFOperatorTableSetCallback(a1, "v", (CGPDFOperatorCallback)op_v);
  CGPDFOperatorTableSetCallback(a1, "W", (CGPDFOperatorCallback)op_W);
  CGPDFOperatorTableSetCallback(a1, "w", (CGPDFOperatorCallback)op_w);
  CGPDFOperatorTableSetCallback(a1, "W*", (CGPDFOperatorCallback)op_Wstar);
  CGPDFOperatorTableSetCallback(a1, "y", (CGPDFOperatorCallback)op_y);
  CGPDFOperatorTableSetCallback(a1, "'", (CGPDFOperatorCallback)op_quo);
  CGPDFOperatorTableSetCallback(a1, "\"", (CGPDFOperatorCallback)op_quoquo);
}

void op_b(uint64_t a1, CGPath *a2)
{
  if (!*((_BYTE *)a2 + 2336))
  {
    op_h(a1, (uint64_t)a2);
    if (!*((_BYTE *)a2 + 2336))
      CPPDFLazyContextAddShape(a2);
  }
}

CGMutablePathRef op_B(uint64_t a1, CGPath *a2)
{
  CGMutablePathRef result;

  if (!*((_BYTE *)a2 + 2336))
    return CPPDFLazyContextAddShape(a2);
  return result;
}

void op_bstar(uint64_t a1, CGPath *a2)
{
  if (!*((_BYTE *)a2 + 2336))
  {
    op_h(a1, (uint64_t)a2);
    if (!*((_BYTE *)a2 + 2336))
      CPPDFLazyContextAddShape(a2);
  }
}

CGMutablePathRef op_Bstar(uint64_t a1, CGPath *a2)
{
  CGMutablePathRef result;

  if (!*((_BYTE *)a2 + 2336))
    return CPPDFLazyContextAddShape(a2);
  return result;
}

void op_c(CGPDFScanner *a1, uint64_t a2)
{
  CGFloat y;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;

  if (!*(_BYTE *)(a2 + 2336))
  {
    v8 = 0.0;
    v6 = 0.0;
    v7 = 0.0;
    v4 = 0.0;
    v5 = 0.0;
    y = 0.0;
    if (common_ReadCGPathCurve(a1, &v8, &v7, &v6, &v5, &v4, &y)
      && !CGPathIsEmpty(*(CGPathRef *)(*(_QWORD *)(a2 + 40) + 64)))
    {
      CGPathAddCurveToPoint(*(CGMutablePathRef *)(*(_QWORD *)(a2 + 40) + 64), (const CGAffineTransform *)(*(_QWORD *)(a2 + 40) + 16), v8, v7, v6, v5, v4, y);
    }
  }
}

double op_cm(CGPDFScanner *a1, uint64_t a2)
{
  double result;
  CGAffineTransform v4;
  CGAffineTransform v5;

  if (!*(_BYTE *)(a2 + 2336))
  {
    v5 = CGAffineTransformIdentity;
    if (common_ReadCGAffineTransform(a1, &v5.a))
    {
      v4 = v5;
      return CPPDFContextConcatCTM(*(double **)(a2 + 40), &v4.a);
    }
  }
  return result;
}

void op_Do(CGPDFScanner *a1, uint64_t a2)
{
  const char *v3;
  CGPDFDictionary *v4;
  CGPDFReal v5;
  CGPDFReal value;
  CGPDFStream *v7;
  CGPDFDictionaryRef dict;
  const char *v9;

  if (!*(_BYTE *)(a2 + 2336))
  {
    v9 = 0;
    v7 = 0;
    dict = 0;
    if (common_op_Do(a1, &v9, &dict, (uint64_t)&v7))
    {
      v3 = v9;
      if (!strcmp(v9, "Image"))
      {
        v5 = 0.0;
        value = 0.0;
        v4 = dict;
        CGPDFDictionaryGetNumber(dict, "Width", &value);
        CGPDFDictionaryGetNumber(v4, "Height", &v5);
      }
      else if (!strcmp(v3, "Form"))
      {
        DoPdfForm(a2, v7, 1);
      }
    }
  }
}

void op_DP(CGPDFScanner *a1, uint64_t a2)
{
  int v2;
  char *value;

  if (!*(_BYTE *)(a2 + 2336))
  {
    value = 0;
    v2 = *((_DWORD *)a1 + 18);
    if (v2 <= 0)
    {
      pdf_error("stack underflow.");
    }
    else
    {
      *((_DWORD *)a1 + 18) = v2 - 1;
      CGPDFScannerPopName(a1, (const char **)&value);
    }
  }
}

CGMutablePathRef op_f(uint64_t a1, CGPath *a2)
{
  CGMutablePathRef result;

  if (!*((_BYTE *)a2 + 2336))
    return CPPDFLazyContextAddShape(a2);
  return result;
}

CGMutablePathRef op_fstar(uint64_t a1, CGPath *a2)
{
  CGMutablePathRef result;

  if (!*((_BYTE *)a2 + 2336))
    return CPPDFLazyContextAddShape(a2);
  return result;
}

void op_g(CGPDFScanner *a1, uint64_t a2)
{
  CGColorSpace *DeviceGray;
  CGColorRef v4;
  uint64_t v5;
  CGColorSpace *v6;
  const void *v7;
  CGPDFReal value[3];

  value[2] = *(CGPDFReal *)MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a2 + 2336))
  {
    value[1] = 1.0;
    if (CGPDFScannerPopNumber(a1, value))
    {
      DeviceGray = CGColorSpaceCreateDeviceGray();
      v4 = CGColorCreate(DeviceGray, value);
      v5 = *(_QWORD *)(a2 + 40);
      v6 = *(CGColorSpace **)(v5 + 264);
      if (v6)
      {
        CGColorSpaceRelease(v6);
        v5 = *(_QWORD *)(a2 + 40);
      }
      *(_QWORD *)(v5 + 264) = DeviceGray;
      v7 = *(const void **)(v5 + 256);
      if (v7)
      {
        CFRelease(v7);
        v5 = *(_QWORD *)(a2 + 40);
      }
      *(_QWORD *)(v5 + 256) = v4;
      *(_BYTE *)(v5 + 9) = 1;
    }
  }
}

void op_G(CGPDFScanner *a1, uint64_t a2)
{
  CGColorSpace *DeviceGray;
  CGColorRef v4;
  uint64_t v5;
  CGColorSpace *v6;
  const void *v7;
  CGPDFReal value[3];

  value[2] = *(CGPDFReal *)MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a2 + 2336))
  {
    value[1] = 1.0;
    if (CGPDFScannerPopNumber(a1, value))
    {
      DeviceGray = CGColorSpaceCreateDeviceGray();
      v4 = CGColorCreate(DeviceGray, value);
      v5 = *(_QWORD *)(a2 + 40);
      v6 = *(CGColorSpace **)(v5 + 280);
      if (v6)
      {
        CGColorSpaceRelease(v6);
        v5 = *(_QWORD *)(a2 + 40);
      }
      *(_QWORD *)(v5 + 280) = DeviceGray;
      v7 = *(const void **)(v5 + 272);
      if (v7)
      {
        CFRelease(v7);
        v5 = *(_QWORD *)(a2 + 40);
      }
      *(_QWORD *)(v5 + 272) = v4;
      *(_BYTE *)(v5 + 9) = 1;
    }
  }
}

CGPDFScanner *op_gs(CGPDFScanner *result, uint64_t a2)
{
  CGPDFScanner *v3;
  CGPDFDictionary *v4;
  uint64_t v5;
  CGPDFDictionaryRef v6;
  char *value;

  if (!*(_BYTE *)(a2 + 2336))
  {
    v3 = result;
    value = 0;
    result = (CGPDFScanner *)CGPDFScannerPopName(result, (const char **)&value);
    if ((_DWORD)result)
    {
      result = common_GetResourceDictionary(*((CGPDFObjectRef *)v3 + 7), "ExtGState", value);
      if (result)
      {
        v4 = result;
        result = (CGPDFScanner *)common_op_gs(a2, result);
        if ((_DWORD)result)
        {
          v6 = 0;
          result = (CGPDFScanner *)CGPDFDictionaryGetDictionary(v4, "SMask", &v6);
          v5 = *(_QWORD *)(a2 + 40);
          if ((result & 1) != 0)
            *(_QWORD *)(v5 + 368) = v6;
          *(_BYTE *)(v5 + 9) = 1;
        }
      }
    }
  }
  return result;
}

void op_h(uint64_t a1, uint64_t a2)
{
  if (!*(_BYTE *)(a2 + 2336) && !CGPathIsEmpty(*(CGPathRef *)(*(_QWORD *)(a2 + 40) + 64)))
    CGPathCloseSubpath(*(CGMutablePathRef *)(*(_QWORD *)(a2 + 40) + 64));
}

CGPDFReal op_i(CGPDFScanner *a1, uint64_t a2)
{
  CGPDFReal result;
  uint64_t v4;
  CGPDFReal value;

  if (!*(_BYTE *)(a2 + 2336))
  {
    value = 0.0;
    if (CGPDFScannerPopNumber(a1, &value))
    {
      result = value;
      v4 = *(_QWORD *)(a2 + 40);
      *(CGPDFReal *)(v4 + 312) = value;
      *(_BYTE *)(v4 + 9) = 1;
    }
  }
  return result;
}

BOOL op_j(_BOOL8 result, uint64_t a2)
{
  uint64_t v3;
  CGPDFInteger value;

  if (!*(_BYTE *)(a2 + 2336))
  {
    value = 0;
    result = CGPDFScannerPopInteger((CGPDFScannerRef)result, &value);
    if (result)
    {
      v3 = *(_QWORD *)(a2 + 40);
      *(_BYTE *)(v3 + 305) = value;
      *(_BYTE *)(v3 + 9) = 1;
    }
  }
  return result;
}

BOOL op_J(_BOOL8 result, uint64_t a2)
{
  uint64_t v3;
  CGPDFInteger value;

  if (!*(_BYTE *)(a2 + 2336))
  {
    value = 0;
    result = CGPDFScannerPopInteger((CGPDFScannerRef)result, &value);
    if (result)
    {
      v3 = *(_QWORD *)(a2 + 40);
      *(_BYTE *)(v3 + 304) = value;
      *(_BYTE *)(v3 + 9) = 1;
    }
  }
  return result;
}

void op_k(CGPDFScanner *a1, uint64_t a2)
{
  CGColorSpace *DeviceCMYK;
  CGColorRef v5;
  uint64_t v6;
  const void *v7;
  CGColorSpace *v8;

  if (!*(_BYTE *)(a2 + 2336))
  {
    DeviceCMYK = CGColorSpaceCreateDeviceCMYK();
    v5 = common_PopCMYKAlphaCGColorCreate(a1, DeviceCMYK);
    v6 = *(_QWORD *)(a2 + 40);
    v7 = *(const void **)(v6 + 256);
    if (v7)
    {
      CFRelease(v7);
      v6 = *(_QWORD *)(a2 + 40);
    }
    *(_QWORD *)(v6 + 256) = v5;
    v8 = *(CGColorSpace **)(v6 + 264);
    if (v8)
    {
      CGColorSpaceRelease(v8);
      v6 = *(_QWORD *)(a2 + 40);
    }
    *(_QWORD *)(v6 + 264) = DeviceCMYK;
    *(_BYTE *)(v6 + 9) = 1;
  }
}

void op_K(CGPDFScanner *a1, uint64_t a2)
{
  CGColorSpace *DeviceCMYK;
  CGColorRef v5;
  uint64_t v6;
  const void *v7;
  CGColorSpace *v8;

  if (!*(_BYTE *)(a2 + 2336))
  {
    DeviceCMYK = CGColorSpaceCreateDeviceCMYK();
    v5 = common_PopCMYKAlphaCGColorCreate(a1, DeviceCMYK);
    v6 = *(_QWORD *)(a2 + 40);
    v7 = *(const void **)(v6 + 272);
    if (v7)
    {
      CFRelease(v7);
      v6 = *(_QWORD *)(a2 + 40);
    }
    *(_QWORD *)(v6 + 272) = v5;
    v8 = *(CGColorSpace **)(v6 + 280);
    if (v8)
    {
      CGColorSpaceRelease(v8);
      v6 = *(_QWORD *)(a2 + 40);
    }
    *(_QWORD *)(v6 + 280) = DeviceCMYK;
    *(_BYTE *)(v6 + 9) = 1;
  }
}

void op_l(CGPDFScanner *a1, uint64_t a2)
{
  CGFloat v4;
  CGPDFReal value;

  if (!*(_BYTE *)(a2 + 2336))
  {
    v4 = 0.0;
    value = 0.0;
    if (!CGPDFScannerPopNumber(a1, &v4))
      v4 = 0.0;
    if (!CGPDFScannerPopNumber(a1, &value))
      value = 0.0;
    if (!CGPathIsEmpty(*(CGPathRef *)(*(_QWORD *)(a2 + 40) + 64)))
      CGPathAddLineToPoint(*(CGMutablePathRef *)(*(_QWORD *)(a2 + 40) + 64), (const CGAffineTransform *)(*(_QWORD *)(a2 + 40) + 16), value, v4);
  }
}

void op_m(CGPDFScanner *a1, uint64_t a2)
{
  CGFloat v4;
  CGFloat y;
  CGPDFReal value;

  if (!*(_BYTE *)(a2 + 2336))
  {
    y = 0.0;
    value = 0.0;
    if (!CGPDFScannerPopNumber(a1, &y))
      y = 0.0;
    if (CGPDFScannerPopNumber(a1, &value))
    {
      v4 = value;
    }
    else
    {
      value = 0.0;
      v4 = 0.0;
    }
    CGPathMoveToPoint(*(CGMutablePathRef *)(*(_QWORD *)(a2 + 40) + 64), (const CGAffineTransform *)(*(_QWORD *)(a2 + 40) + 16), v4, y);
  }
}

BOOL op_M(_BOOL8 result, uint64_t a2)
{
  if (!*(_BYTE *)(a2 + 2336))
  {
    result = CGPDFScannerPopNumber((CGPDFScannerRef)result, (CGPDFReal *)(*(_QWORD *)(a2 + 40) + 288));
    if (result)
      *(_BYTE *)(*(_QWORD *)(a2 + 40) + 9) = 1;
  }
  return result;
}

CGPDFScanner *op_MP(CGPDFScanner *result, uint64_t a2)
{
  char *value;

  if (!*(_BYTE *)(a2 + 2336))
  {
    value = 0;
    return (CGPDFScanner *)CGPDFScannerPopName(result, (const char **)&value);
  }
  return result;
}

void op_q(uint64_t a1, uint64_t a2)
{
  if (!*(_BYTE *)(a2 + 2336))
    CPPDFContextSaveGState(a2);
}

void op_Q(uint64_t a1, uint64_t a2)
{
  if (!*(_BYTE *)(a2 + 2336))
    CPPDFContextRestoreGState(a2);
}

void op_re(CGPDFScanner *a1, uint64_t a2)
{
  CGRect v3;

  if (!*(_BYTE *)(a2 + 2336))
  {
    memset(&v3, 0, sizeof(v3));
    if (common_ReadCGRect(a1, &v3.origin.x))
      CGPathAddRect(*(CGMutablePathRef *)(*(_QWORD *)(a2 + 40) + 64), (const CGAffineTransform *)(*(_QWORD *)(a2 + 40) + 16), v3);
  }
}

void op_RG(CGPDFScanner *a1, uint64_t a2)
{
  CGColorSpace *DeviceRGB;
  CGColorRef v5;
  uint64_t v6;
  const void *v7;
  CGColorSpace *v8;

  if (!*(_BYTE *)(a2 + 2336))
  {
    DeviceRGB = CGColorSpaceCreateDeviceRGB();
    v5 = common_PopRGBAlphaCGColorCreate(a1, DeviceRGB);
    v6 = *(_QWORD *)(a2 + 40);
    v7 = *(const void **)(v6 + 272);
    if (v7)
    {
      CFRelease(v7);
      v6 = *(_QWORD *)(a2 + 40);
    }
    *(_QWORD *)(v6 + 272) = v5;
    v8 = *(CGColorSpace **)(v6 + 280);
    if (v8)
    {
      CGColorSpaceRelease(v8);
      v6 = *(_QWORD *)(a2 + 40);
    }
    *(_QWORD *)(v6 + 280) = DeviceRGB;
    *(_BYTE *)(v6 + 9) = 1;
  }
}

void op_rg(CGPDFScanner *a1, uint64_t a2)
{
  CGColorSpace *DeviceRGB;
  CGColorRef v5;
  uint64_t v6;
  const void *v7;
  CGColorSpace *v8;

  if (!*(_BYTE *)(a2 + 2336))
  {
    DeviceRGB = CGColorSpaceCreateDeviceRGB();
    v5 = common_PopRGBAlphaCGColorCreate(a1, DeviceRGB);
    v6 = *(_QWORD *)(a2 + 40);
    v7 = *(const void **)(v6 + 256);
    if (v7)
    {
      CFRelease(v7);
      v6 = *(_QWORD *)(a2 + 40);
    }
    *(_QWORD *)(v6 + 256) = v5;
    v8 = *(CGColorSpace **)(v6 + 264);
    if (v8)
    {
      CGColorSpaceRelease(v8);
      v6 = *(_QWORD *)(a2 + 40);
    }
    *(_QWORD *)(v6 + 264) = DeviceRGB;
    *(_BYTE *)(v6 + 9) = 1;
  }
}

CGPDFScanner *op_ri(CGPDFScanner *a1, uint64_t a2)
{
  if (!*(_BYTE *)(a2 + 2336))
    return (CGPDFScanner *)common_op_ri(a1, a2);
  return a1;
}

void op_s(uint64_t a1, CGPath *a2)
{
  if (!*((_BYTE *)a2 + 2336))
  {
    op_h(a1, (uint64_t)a2);
    if (!*((_BYTE *)a2 + 2336))
      CPPDFLazyContextAddShape(a2);
  }
}

CGMutablePathRef op_S(uint64_t a1, CGPath *a2)
{
  CGMutablePathRef result;

  if (!*((_BYTE *)a2 + 2336))
    return CPPDFLazyContextAddShape(a2);
  return result;
}

void op_sh(CGPDFScanner *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  CGPath *v5;
  uint64_t v6;

  if (!*(_BYTE *)(a2 + 2336))
  {
    v5 = 0;
    v6 = 0;
    if (common_op_sh(a1, (double *)a2, &v6, &v5))
    {
      CPPDFContextSaveGState(a2);
      v3 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(v3 + 376) = v6;
      v4 = *(const void **)(v3 + 64);
      if (v4)
      {
        CFRelease(v4);
        v3 = *(_QWORD *)(a2 + 40);
      }
      *(_QWORD *)(v3 + 64) = v5;
      CPPDFLazyContextAddShape((CGMutablePathRef)a2);
      CPPDFContextRestoreGState(a2);
    }
  }
}

void op_v(CGPDFScanner *a1, uint64_t a2)
{
  CGPoint CurrentPoint;
  uint64_t v5;
  double v6;
  CGPDFReal v7;
  CGPDFReal value;
  CGPDFReal v9;

  value = 0.0;
  v9 = 0.0;
  v6 = 0.0;
  v7 = 0.0;
  if (CGPDFScannerPopNumber(a1, &value)
    && CGPDFScannerPopNumber(a1, &v9)
    && CGPDFScannerPopNumber(a1, &v6)
    && CGPDFScannerPopNumber(a1, &v7)
    && !CGPathIsEmpty(*(CGPathRef *)(*(_QWORD *)(a2 + 40) + 64)))
  {
    CurrentPoint = CGPathGetCurrentPoint((CGPathRef)*(_QWORD *)(*(_QWORD *)(a2 + 40) + 64));
    v5 = *(_QWORD *)(a2 + 40);
    CGPathAddCurveToPoint(*(CGMutablePathRef *)(v5 + 64), 0, CurrentPoint.x, CurrentPoint.y, *(double *)(v5 + 48) + v6 * *(double *)(v5 + 32) + *(double *)(v5 + 16) * v7, *(double *)(v5 + 56) + v6 * *(double *)(v5 + 40) + *(double *)(v5 + 24) * v7, *(double *)(v5 + 48) + *(double *)(v5 + 32) * value + *(double *)(v5 + 16) * v9, *(double *)(v5 + 56) + *(double *)(v5 + 40) * value + *(double *)(v5 + 24) * v9);
  }
}

CGMutablePathRef op_W(uint64_t a1, CGPath *a2)
{
  return CPPDFLazyContextAddShape(a2);
}

BOOL op_w(CGPDFScanner *a1, uint64_t a2)
{
  _BOOL8 result;

  result = CGPDFScannerPopNumber(a1, (CGPDFReal *)(*(_QWORD *)(a2 + 40) + 296));
  if (result)
    *(_BYTE *)(*(_QWORD *)(a2 + 40) + 9) = 1;
  return result;
}

CGMutablePathRef op_Wstar(uint64_t a1, CGPath *a2)
{
  return CPPDFLazyContextAddShape(a2);
}

void op_y(CGPDFScanner *a1, uint64_t a2)
{
  CGFloat v4;
  CGPDFReal v5;
  CGPDFReal value;
  CGPDFReal v7;

  value = 0.0;
  v7 = 0.0;
  v4 = 0.0;
  v5 = 0.0;
  if (CGPDFScannerPopNumber(a1, &value)
    && CGPDFScannerPopNumber(a1, &v7)
    && CGPDFScannerPopNumber(a1, &v4)
    && CGPDFScannerPopNumber(a1, &v5)
    && !CGPathIsEmpty(*(CGPathRef *)(*(_QWORD *)(a2 + 40) + 64)))
  {
    CGPathAddCurveToPoint(*(CGMutablePathRef *)(*(_QWORD *)(a2 + 40) + 64), (const CGAffineTransform *)(*(_QWORD *)(a2 + 40) + 16), v5, v4, v7, value, v7, value);
  }
}

uint64_t CGSRegionGetShape(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t CGSGetRegionData(_QWORD *a1, _QWORD *a2, _DWORD *a3)
{
  _DWORD *v6;
  int v7;
  unint64_t v8;
  uint64_t result;

  if (!a2)
  {
    result = 1001;
    if (!a3)
      return result;
    LODWORD(v8) = 0;
    goto LABEL_11;
  }
  *a2 = 0;
  if (!a3)
    return 1001;
  *a3 = 0;
  if (!region_check(a1))
    return 1001;
  v6 = (_DWORD *)a1[2];
  v7 = shape_length((uint64_t)v6);
  *a2 = v6;
  if (!v7)
    return 1001;
  v8 = 4 * v7;
  if (!(v8 >> 31) && shape_data_valid(v6, v8))
  {
    result = 0;
LABEL_11:
    *a3 = v8;
    return result;
  }
  return 1007;
}

unint64_t CGSGetRegionRectCount(_QWORD *a1)
{
  unint64_t result;
  _DWORD *v3;
  uint64_t v4;
  _DWORD *v5;

  result = (unint64_t)region_check(a1);
  if ((_DWORD)result)
  {
    v3 = (_DWORD *)(a1[2] + 4 * *(int *)(a1[2] + 4));
    if (*v3 == 0x7FFFFFFF)
      return 0;
    v4 = (int)v3[1];
    v5 = &v3[v4];
    if (*v5 == 0x7FFFFFFF)
    {
      return 0;
    }
    else
    {
      LODWORD(result) = 0;
      do
      {
        result = (result + (int)v4 / 2 - 1);
        v4 = (int)v5[1];
        v5 += v4;
      }
      while (*v5 != 0x7FFFFFFF);
    }
  }
  return result;
}

uint64_t CGSNewRegionWithData(_DWORD *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t result;
  unint64_t v6;
  _BOOL8 v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  *a3 = 0;
  result = 1001;
  if (a1 && a2)
  {
    v6 = a2;
    v7 = shape_data_valid(a1, a2);
    if (v7)
    {
      v8 = shape_alloc_data(v7, (uint64_t)a1, v6);
      v16 = region_create_with_shape(v8, v9, v10, v11, v12, v13, v14, v15);
      result = 0;
      *a3 = v16;
    }
    else
    {
      return 1007;
    }
  }
  return result;
}

_QWORD *CGSCreateRegionFromData(_DWORD *a1, unsigned int a2)
{
  unint64_t v3;
  _BOOL8 v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (!a1)
    return 0;
  if (!a2)
    return 0;
  v3 = a2;
  v4 = shape_data_valid(a1, a2);
  if (!v4)
    return 0;
  v5 = shape_alloc_data(v4, (uint64_t)a1, v3);
  return region_create_with_shape(v5, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t CGSRegionFromBitmap(unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11, _QWORD *a12)
{
  int *v13;
  _QWORD *v14;
  unsigned int v15;
  BOOL v16;
  int v18;
  int v19;
  unint64_t v23;
  int *v24;
  char *v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _DWORD *v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _DWORD *v39;
  char *v40;
  int *v41;
  int v42;
  uint64_t v43;
  unsigned __int8 *v44;
  unint64_t v45;
  int v46;
  int v47;
  char v48;
  unsigned int v49;
  unsigned int v50;
  BOOL v51;
  uint64_t v52;
  unsigned int v53;
  unint64_t v54;
  BOOL v55;
  int v56;
  int *v57;
  int *v58;
  _DWORD *v59;
  char *v60;
  int *v61;
  _DWORD *v62;
  uint64_t v63;
  _DWORD *v64;
  char *v65;
  int *v66;
  _DWORD *v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  int v73;
  int v74;
  unint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  char *v86;

  v13 = 0;
  v14 = a12;
  if (a3 + a2 <= a1)
  {
    v15 = a8;
    if (((a9 | a8) & 0x80000000) == 0)
    {
      if (a9)
        v16 = (_DWORD)a8 == 0;
      else
        v16 = 1;
      if (v16 || a10 == 0)
      {
        v13 = (int *)&the_empty_shape;
      }
      else
      {
        v18 = a7;
        v19 = a6;
        v23 = a2;
        v84 = a1;
        v13 = (int *)malloc_type_malloc(0x800uLL, 0x705560E0uLL);
        if (v13)
        {
          v24 = v13;
          *(_QWORD *)v13 = 0x280000000;
          v25 = (char *)(v13 + 2);
          if (a3 >= 0x20)
            v26 = 32;
          else
            v26 = a3;
          if (a3 > 0x20)
            v27 = -1;
          else
            v27 = ~(-1 << a3);
          if (a4 <= a5)
            v28 = a5;
          else
            v28 = a4;
          if (a4 >= a5)
            v29 = a5;
          else
            v29 = a4;
          if (v29 > v27)
            v29 = -1;
          if (v28 > v27)
            v28 = -1;
          if (a9 < 0)
          {
            a2 = 512;
LABEL_98:
            *(_DWORD *)v25 = 0x7FFFFFFF;
            v13 = final_check(v24, a2, ((v25 - (char *)v24) >> 2) + 1);
          }
          else
          {
            v30 = v29 & v27;
            v31 = v28 & v27;
            v32 = v13 + 1;
            v75 = v23 >> 3;
            v76 = v15;
            v74 = 8 - (v23 & 7);
            v33 = -v26;
            a2 = 512;
            v34 = v84;
            v35 = a9;
            v36 = a10;
            v82 = v27;
            v83 = v26;
            v80 = v28 & v27;
            v81 = v30;
            v73 = v19;
            while (1)
            {
              *((_DWORD *)v25 + 1) = 2;
              v37 = v25 + 4;
              *(_DWORD *)v25 = v18;
              v25 += 8;
              v78 = v35;
              if (v35)
                break;
LABEL_86:
              v68 = ((unint64_t)(v25 - v37) >> 2) + 1;
              *(_DWORD *)v37 = v68;
              if (v32 && v68 == *v32)
              {
                if (((unint64_t)(v25 - v37) >> 2) != 1)
                {
                  v69 = 1;
                  while (&v37[v69 * 4] != v25)
                  {
                    v70 = v32[v69];
                    v71 = *(_DWORD *)&v37[v69 * 4];
                    ++v69;
                    if (v70 != v71)
                      goto LABEL_93;
                  }
                }
                v25 = v37 - 4;
              }
              else
              {
LABEL_93:
                v32 = v37;
              }
              v35 = v78 - 1;
              ++v18;
              if (v78 <= 0)
                goto LABEL_98;
            }
            if (((v25 - (char *)v24) >> 2) + 4 > a2)
            {
              v38 = 2 * a2;
              v39 = v32;
              v40 = v37;
              v41 = (int *)malloc_type_realloc(v24, (8 * a2 + 511) & 0xFFFFFFFFFFFFFE00, 0x7492344AuLL);
              v31 = v80;
              v30 = v81;
              v27 = v82;
              v26 = v83;
              v34 = v84;
              if (v41 == v24)
              {
                v37 = v40;
              }
              else
              {
                v25 += (char *)v41 - (char *)v24;
                v37 = &v40[(char *)v41 - (char *)v24];
              }
              if (v41 == v24)
                v32 = v39;
              else
                v32 = (_DWORD *)((char *)v39 + (char *)v41 - (char *)v24);
              if (v41 != v24)
                v24 = v41;
              a2 = v38;
            }
            if (v24)
            {
              v77 = v18;
              v42 = 0;
              v79 = v36;
              v43 = v76;
              v44 = (unsigned __int8 *)(v36 + v75);
              v45 = *v44;
              v46 = v19;
              v47 = v74;
              while (1)
              {
                v48 = v47 - v26;
                if (v47 - v26 < 0)
                {
                  v49 = -v47 >> 3;
                  v50 = -v47 & 0xFFFFFFF8;
                  v51 = v47 < -7;
                  if (v47 >= -7)
                    v50 = 0;
                  v47 += v50;
                  if (v51)
                    v52 = v49;
                  else
                    v52 = 0;
                  v44 += v52;
                  do
                  {
                    v53 = *++v44;
                    v47 += 8;
                    v45 = v53 | (v45 << 8);
                  }
                  while (v33 + v47 < 0);
                  v48 = v33 + v47;
                }
                v54 = (v45 >> v48) & v27;
                v55 = v54 < v30 || v54 > v31;
                v56 = !v55;
                *(_DWORD *)v25 = v46;
                if (v42 != v56)
                {
                  v25 += 4;
                  if (((v25 - (char *)v24) >> 2) + 4 > a2)
                  {
                    v85 = 2 * a2;
                    v86 = v25;
                    v57 = v24;
                    v58 = v24;
                    v59 = v32;
                    v60 = v37;
                    v61 = (int *)malloc_type_realloc(v57, (8 * a2 + 511) & 0xFFFFFFFFFFFFFE00, 0x7492344AuLL);
                    v32 = v59;
                    v24 = v58;
                    a2 = v85;
                    v25 = v86;
                    v31 = v80;
                    v30 = v81;
                    v27 = v82;
                    v26 = v83;
                    v34 = v84;
                    v62 = (_DWORD *)((char *)v32 + (char *)v61 - (char *)v24);
                    if (!v32)
                      v62 = 0;
                    if (v61 == v24)
                    {
                      v37 = v60;
                    }
                    else
                    {
                      v25 = &v86[(char *)v61 - (char *)v24];
                      v37 = &v60[(char *)v61 - (char *)v24];
                    }
                    if (v61 != v24)
                    {
                      v32 = v62;
                      v24 = v61;
                    }
                  }
                  if (!v24)
                    break;
                }
                v47 -= v34;
                ++v46;
                v42 = v56;
                if (!--v43)
                {
                  v36 = v79 + a11;
                  if (!v56)
                  {
                    v18 = v77;
                    v19 = v73;
                    goto LABEL_86;
                  }
                  *(_DWORD *)v25 = v46;
                  v25 += 4;
                  if (((v25 - (char *)v24) >> 2) + 4 > a2)
                  {
                    v63 = 2 * a2;
                    v64 = v32;
                    v65 = v37;
                    v66 = (int *)malloc_type_realloc(v24, (8 * a2 + 511) & 0xFFFFFFFFFFFFFE00, 0x7492344AuLL);
                    v31 = v80;
                    v30 = v81;
                    v27 = v82;
                    v26 = v83;
                    v34 = v84;
                    v67 = (_DWORD *)((char *)v64 + (char *)v66 - (char *)v24);
                    if (!v64)
                      v67 = 0;
                    if (v66 == v24)
                    {
                      v37 = v65;
                    }
                    else
                    {
                      v25 += (char *)v66 - (char *)v24;
                      v37 = &v65[(char *)v66 - (char *)v24];
                    }
                    if (v66 == v24)
                      v32 = v64;
                    else
                      v32 = v67;
                    if (v66 != v24)
                      v24 = v66;
                    a2 = v63;
                  }
                  v18 = v77;
                  v19 = v73;
                  if (v24)
                    goto LABEL_86;
                  break;
                }
              }
            }
            v13 = 0;
          }
          v14 = a12;
        }
      }
    }
  }
  *v14 = region_create_with_shape(v13, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

CFTypeRef CGSRegionMergeFlushAndMoveRegions(unint64_t cf, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6, uint64_t a7, uint64_t a8, _QWORD *a9, _QWORD *a10, int *a11, int *a12)
{
  int v12;
  int v13;
  _QWORD *UnionWithRegion;
  _QWORD *v17;
  const void *v18;
  CFTypeRef v19;
  CFTypeRef result;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;

  v12 = a8;
  v13 = a7;
  if (cf | a2)
  {
    UnionWithRegion = (_QWORD *)cf;
    if (!a2)
    {
      if (cf)
      {
        UnionWithRegion = CFRetain((CFTypeRef)cf);
        if (a6)
          goto LABEL_19;
        goto LABEL_27;
      }
      goto LABEL_18;
    }
    v17 = CGRegionCreateWithOffset((_QWORD *)a2, (double)(int)a3, (double)(int)a4, a2, a3, a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
    v18 = v17;
    if (UnionWithRegion)
    {
      UnionWithRegion = CGRegionCreateUnionWithRegion(UnionWithRegion, v17);
      if (!v18)
      {
LABEL_18:
        if (a6)
          goto LABEL_19;
        goto LABEL_27;
      }
    }
    else
    {
      if (!v17)
      {
        UnionWithRegion = 0;
        if (a6)
        {
LABEL_19:
          v21 = CGRegionCreateWithOffset(a6, (double)v13, (double)v12, a2, a3, a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
          v22 = CGRegionCreateUnionWithRegion(v21, UnionWithRegion);
          if (v21)
            CFRelease(v21);
          if (UnionWithRegion)
            CFRelease(UnionWithRegion);
          if (a5)
            goto LABEL_24;
          goto LABEL_28;
        }
LABEL_27:
        v22 = UnionWithRegion;
        if (a5)
        {
LABEL_24:
          v23 = CGRegionCreateUnionWithRegion(a5, v22);
          if (v22)
            CFRelease(v22);
          goto LABEL_29;
        }
LABEL_28:
        v23 = v22;
LABEL_29:
        result = 0;
        v13 = 0;
        v12 = 0;
        *a9 = v23;
        goto LABEL_30;
      }
      UnionWithRegion = CFRetain(v17);
    }
    CFRelease(v18);
    goto LABEL_18;
  }
  if (a5)
    v19 = CFRetain(a5);
  else
    v19 = 0;
  *a9 = v19;
  if (a6)
    result = CFRetain(a6);
  else
    result = 0;
LABEL_30:
  *a10 = result;
  *a11 = v13;
  *a12 = v12;
  return result;
}

uint64_t sortTopDescending(void *a1, void *a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;

  objc_msgSend(a1, "normalizedBounds");
  v7 = v4;
  v8 = v6;
  if (v5 < 0.0 || v6 < 0.0)
  {
    *(CGRect *)&v3 = CGRectStandardize(*(CGRect *)&v3);
    v7 = v9;
    v8 = v10;
  }
  objc_msgSend(a2, "normalizedBounds", v3);
  if (v13 < 0.0 || v14 < 0.0)
    *(CGRect *)(&v12 - 1) = CGRectStandardize(*(CGRect *)&v11);
  v15 = v12 + v14;
  if (v7 + v8 > v15)
    return -1;
  else
    return v7 + v8 < v15;
}

BOOL sizeChange(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;

  v2 = *(double *)(*(_QWORD *)(a1 + 160) + 72);
  v3 = *(double *)(*(_QWORD *)(a2 + 160) + 72);
  return v2 > v3 + v3 || v3 > v2 + v2;
}

BOOL fits(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  _BOOL4 v12;
  double y;
  double height;
  double v15;
  double v16;
  double v17;
  _BOOL4 v18;
  double v19;
  double v20;
  double v21;
  int v22;
  CGFloat rect;
  CGRect v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;

  if (*(_BYTE *)(a3 + 16))
    v5 = fmax(*(double *)(a2 + 144) * 0.3, 1.0);
  else
    v5 = *(double *)(a3 + 8);
  v6 = *(double *)(a2 + 96);
  v7 = *(double *)(a1 + 96);
  if (v6 >= v7)
  {
    v8 = v7 + *(double *)(a1 + 144) - v6;
  }
  else
  {
    v5 = *(double *)a3;
    v8 = v6 + *(double *)(a2 + 144) - v7;
  }
  if (v8 >= v5)
  {
    v22 = *(_DWORD *)(a1 + 68) - *(_DWORD *)(a2 + 68);
    if (v22 < 0)
      v22 = *(_DWORD *)(a2 + 68) - *(_DWORD *)(a1 + 68);
    return v22 == 1;
  }
  else
  {
    v9 = *(double *)(a2 + 120);
    v10 = *(double *)(a2 + 128);
    v11 = *(double *)(a2 + 136);
    v12 = v11 < 0.0 || v10 < 0.0;
    y = *(double *)(a2 + 120);
    height = *(double *)(a2 + 136);
    if (v12)
    {
      v25 = CGRectStandardize(*(CGRect *)(a2 + 112));
      y = v25.origin.y;
      height = v25.size.height;
    }
    rect = v10;
    v15 = *(double *)(a1 + 120);
    v16 = *(double *)(a1 + 128);
    v17 = *(double *)(a1 + 136);
    v18 = v17 < 0.0 || v16 < 0.0;
    v19 = *(double *)(a1 + 120);
    if (v18)
    {
      v26 = CGRectStandardize(*(CGRect *)(a1 + 112));
      v19 = v26.origin.y;
    }
    v20 = y + height;
    if (v12)
    {
      v27.origin.x = *(CGFloat *)(a2 + 112);
      v27.origin.y = v9;
      v27.size.width = rect;
      v27.size.height = v11;
      v28 = CGRectStandardize(v27);
      v9 = v28.origin.y;
    }
    if (v19 <= v20)
    {
      if (v18)
      {
        v29.origin.x = *(CGFloat *)(a1 + 112);
        v29.origin.y = v15;
        v29.size.width = v16;
        v29.size.height = v17;
        v30 = CGRectStandardize(v29);
        v15 = v30.origin.y;
        v17 = v30.size.height;
      }
      v21 = v9 - v20;
      if (v9 <= v15 + v17)
        v21 = 0.0;
    }
    else
    {
      v21 = v19 - v20;
    }
    return v21 <= 0.0;
  }
}

uint64_t resample_byte_v_3cpp_ap(uint64_t result, uint64_t a2, unsigned __int8 a3, int a4, uint64_t a5, uint64_t *a6)
{
  unint64_t v6;
  unint64_t v7;
  int v8;
  __int16 *v9;
  _BYTE *v10;
  _BYTE *v11;
  int32x2_t v12;
  int v13;
  uint64_t *v14;
  int v15;
  __int16 *v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int32x2_t v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int32x2_t v26;

  v6 = (a3 * a4) & 0xFFFFFFFC;
  if ((int)v6 >= 1)
  {
    v7 = 0;
    v8 = *(_DWORD *)(result + 4);
    v9 = (__int16 *)(result + 8);
    v11 = *(_BYTE **)a5;
    v10 = *(_BYTE **)(a5 + 8);
    do
    {
      if (v8)
      {
        v12 = (int32x2_t)0x200000002000;
        v13 = 0x2000;
        v14 = a6;
        v15 = 0x2000;
        v16 = v9;
        v17 = v8;
        do
        {
          v19 = *v16++;
          v18 = v19;
          v20 = *v14++;
          v12 = vmla_s32(v12, *(int32x2_t *)(v20 + 4 * v7), vdup_n_s32(v18));
          v15 += *(_DWORD *)(v20 + 4 * (v7 | 2)) * v18;
          v13 += *(_DWORD *)(v20 + 4 * (v7 | 3)) * v18;
          --v17;
        }
        while (v17);
      }
      else
      {
        v12 = (int32x2_t)0x200000002000;
        v15 = 0x2000;
        v13 = 0x2000;
      }
      v21 = vshr_n_s32(v12, 0xEuLL);
      v22 = v15 >> 14;
      v23 = v13 >> 14;
      if (v22 >= 255)
        v22 = 255;
      v24 = v22 & ~(v22 >> 31);
      if (v23 >= 255)
        v23 = 255;
      v25 = v23 & ~(v23 >> 31);
      v26 = vmax_s32(vmin_s32(v21, (int32x2_t)0xFF000000FFLL), 0);
      result = v26.u32[0];
      if (v26.i32[0] > v25)
        v25 = v26.i32[0];
      if (v26.i32[1] > v25)
        v25 = v26.u32[1];
      if (v24 > v25)
        LOBYTE(v25) = v24;
      v11[1] = v26.i8[4];
      *v11 = v26.i8[0];
      v11[2] = v24;
      v11 += 3;
      *v10++ = v25;
      v7 += 4;
    }
    while (v7 < v6);
  }
  return result;
}

uint64_t resample_byte_v_Ncpp_ap(uint64_t a1, uint64_t a2, unsigned __int8 a3, int a4, _QWORD *a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  const __int16 *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;
  unsigned int v15;
  int32x4_t v16;
  uint64_t *v17;
  const __int16 *v18;
  int v19;
  uint64_t v20;
  int16x4_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  int v32;
  uint64_t *v33;
  const __int16 *v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;

  v6 = *a5 - 1;
  v7 = a5[1] - 1;
  v8 = *(_DWORD *)(a1 + 4);
  v9 = (const __int16 *)(a1 + 8);
  v10 = a3;
  v11 = a3 * a4;
  v12 = v11 & 0xFFFFFFFC;
  if ((int)v12 < 1)
  {
    LODWORD(v13) = 0;
    result = 0;
    v15 = a3;
  }
  else
  {
    v13 = 0;
    LODWORD(result) = 0;
    v15 = a3;
    do
    {
      v16.i64[0] = 0x200000002000;
      v16.i64[1] = 0x200000002000;
      if (v8)
      {
        v17 = a6;
        v18 = v9;
        v19 = v8;
        do
        {
          v20 = *v17++;
          v21 = vld1_dup_s16(v18++);
          v16 = vmlaq_s32(v16, *(int32x4_t *)(v20 + 4 * v13), vmovl_s16(v21));
          --v19;
        }
        while (v19);
      }
      v22 = v16.i32[0] >> 14;
      if (v16.i32[0] >> 14 >= 255)
        v22 = 255;
      v23 = v22 & ~(v22 >> 31);
      if (v16.i32[1] >> 14 >= 255)
        v24 = 255;
      else
        v24 = v16.i32[1] >> 14;
      if ((int)result <= v23)
        LODWORD(result) = v23;
      if ((v13 | 1) == v15)
      {
        *(_BYTE *)++v7 = result;
        v25 = v15 + v10;
        v15 += v10;
        LODWORD(result) = 0;
      }
      else
      {
        v25 = v15;
        *(_BYTE *)++v6 = v23;
      }
      v26 = v24 & ~(v24 >> 31);
      if (result <= v26)
        v27 = v24 & ~(v24 >> 31);
      else
        v27 = result;
      if ((v13 | 2) == v25)
      {
        *(_BYTE *)++v7 = v27;
        v25 = v15 + v10;
        v15 += v10;
        v27 = 0;
      }
      else
      {
        *(_BYTE *)++v6 = v26;
      }
      v28 = v16.i32[2] >> 14;
      if (v16.i32[2] >> 14 >= 255)
        v28 = 255;
      v29 = v28 & ~(v28 >> 31);
      if (v16.i32[3] >> 14 >= 255)
        v30 = 255;
      else
        v30 = v16.i32[3] >> 14;
      if (v27 <= v29)
        v27 = v29;
      if ((v13 | 3) == v25)
      {
        *(_BYTE *)++v7 = v27;
        v25 = v15 + v10;
        v15 += v10;
        v27 = 0;
      }
      else
      {
        *(_BYTE *)++v6 = v29;
      }
      v31 = v30 & ~(v30 >> 31);
      if (v27 <= v31)
        result = v31;
      else
        result = v27;
      v13 += 4;
      if (v13 == v25)
      {
        *(_BYTE *)++v7 = result;
        v15 += v10;
        result = 0;
      }
      else
      {
        *(_BYTE *)++v6 = v31;
      }
    }
    while (v13 < v12);
  }
  if ((int)v13 < (int)v11)
  {
    v13 = v13;
    do
    {
      v32 = 0x2000;
      if (v8)
      {
        v33 = a6;
        v34 = v9;
        v35 = v8;
        do
        {
          v37 = *v34++;
          v36 = v37;
          v38 = *v33++;
          v32 += *(_DWORD *)(v38 + 4 * v13) * v36;
          --v35;
        }
        while (v35);
      }
      v39 = v32 >> 14;
      if (v39 >= 255)
        v39 = 255;
      v40 = v39 & ~(v39 >> 31);
      if ((int)result <= v40)
        result = v40;
      else
        result = result;
      if (++v13 == v15)
      {
        *(_BYTE *)++v7 = result;
        v15 += v10;
        result = 0;
      }
      else
      {
        *(_BYTE *)++v6 = v40;
      }
    }
    while (v13 != v11);
  }
  return result;
}

int *resample_byte_h_4cpp_ap(int *result, unsigned int a2, double a3, double a4, double a5, uint8x8_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t *a10, int *a11, int a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int32x4_t v17;
  uint64_t v18;
  int32x4_t *v19;
  uint64_t v20;
  int v21;
  int *v22;
  int v23;
  uint64_t v24;
  __int16 *v25;
  __int32 *v26;
  unsigned __int8 *v27;
  int32x4_t v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int v33;
  __int32 v34;
  int32x4_t v35;
  int v36;

  if (a12 >= 1)
  {
    v12 = 0;
    v13 = *a10;
    v14 = a10[1];
    v15 = 2 * a2 + 8;
    v16 = a12;
    v17.i64[0] = 0xFF000000FFLL;
    v17.i64[1] = 0xFF000000FFLL;
    do
    {
      if (a8)
      {
        v18 = v13 + *a11 * (uint64_t)(int)v12;
        v19 = *(int32x4_t **)(a9 + 8 * v12);
        v20 = v14 + a11[1] * (uint64_t)(int)v12 + 1;
        v21 = a8;
        v22 = result;
        do
        {
          v23 = v22[1];
          if (v23)
          {
            v25 = (__int16 *)(v22 + 2);
            v24 = *v22;
            v26 = (__int32 *)(v18 + 4 * v24);
            v27 = (unsigned __int8 *)(v24 + v20 - 1);
            v28.i64[0] = 0x200000002000;
            v28.i64[1] = 0x200000002000;
            v29 = 0x2000;
            do
            {
              v31 = *v25++;
              v30 = v31;
              v33 = *v27++;
              v32 = v33;
              v34 = *v26++;
              a6.i32[0] = v34;
              a6 = (uint8x8_t)vmovl_u8(a6).u64[0];
              v28 = vmlal_s16(v28, vdup_n_s16(v30), (int16x4_t)a6);
              v29 += v32 * v30;
              --v23;
            }
            while (v23);
          }
          else
          {
            v28.i64[0] = 0x200000002000;
            v28.i64[1] = 0x200000002000;
            v29 = 0x2000;
          }
          v35 = vshrq_n_s32(v28, 0xEuLL);
          v36 = v29 >> 14;
          if (v29 >> 14 >= 255)
            v36 = 255;
          *v19 = vmaxq_s32(vminq_s32(v35, v17), (int32x4_t)0);
          v19[1].i32[0] = v36 & ~(v36 >> 31);
          v19 = (int32x4_t *)((char *)v19 + 20);
          v22 = (int *)((char *)v22 + v15);
          --v21;
        }
        while (v21);
      }
      ++v12;
    }
    while (v12 != v16);
  }
  return result;
}

int *resample_byte_h_Ncpp_ap(int *result, unsigned int a2, unsigned __int8 a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  int v18;
  int *v19;
  int v20;
  uint64_t v21;
  __int16 *v22;
  int v23;
  int v24;
  unsigned __int8 *v25;
  __int16 *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned __int8 *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;

  if (a8 >= 1)
  {
    v8 = 0;
    v9 = a3;
    v10 = a3 - 1;
    v11 = *a6;
    v12 = a6[1];
    v13 = 2 * a2 + 8;
    v14 = a8;
    do
    {
      if (a4)
      {
        v15 = v11 + *a7 * (uint64_t)(int)v8;
        v16 = *(int **)(a5 + 8 * v8);
        v17 = v12 + a7[1] * (uint64_t)(int)v8 + 1;
        v18 = a4;
        v19 = result;
        do
        {
          v20 = v19[1];
          v21 = *v19;
          v22 = (__int16 *)(v19 + 2);
          if (v9 >= 2)
          {
            v23 = 0;
            do
            {
              v24 = 0x2000;
              if (v20)
              {
                v25 = (unsigned __int8 *)(v15 + (int)v21 * (uint64_t)v10);
                v26 = (__int16 *)(v19 + 2);
                v27 = v20;
                do
                {
                  v28 = *v26++;
                  v29 = *v25;
                  v25 += v10;
                  v24 += v29 * v28;
                  --v27;
                }
                while (v27);
              }
              v30 = v24 >> 14;
              if (v30 >= 255)
                v30 = 255;
              *v16++ = v30 & ~(v30 >> 31);
              ++v23;
            }
            while (v23 != v10);
          }
          if (v20)
          {
            v31 = (unsigned __int8 *)(v21 + v17 - 1);
            v32 = 0x2000;
            do
            {
              v34 = *v22++;
              v33 = v34;
              v35 = *v31++;
              v32 += v35 * v33;
              --v20;
            }
            while (v20);
          }
          else
          {
            v32 = 0x2000;
          }
          v36 = v32 >> 14;
          if (v32 >> 14 >= 255)
            v36 = 255;
          *v16++ = v36 & ~(v36 >> 31);
          v19 = (int *)((char *)v19 + v13);
          --v18;
        }
        while (v18);
      }
      ++v8;
    }
    while (v8 != v14);
  }
  return result;
}

int *resample_byte_h_1cpp_ap(int *result, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  int *v17;
  int v18;
  int v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  __int16 *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;

  if (a8 >= 1)
  {
    v8 = 0;
    v9 = *a6;
    v10 = a6[1];
    v11 = 2 * a2 + 8;
    v12 = a8;
    while (!a4)
    {
LABEL_18:
      if (++v8 == v12)
        return result;
    }
    v13 = v9 + *a7 * (uint64_t)(int)v8;
    v14 = v10 + a7[1] * (uint64_t)(int)v8;
    v15 = *(int **)(a5 + 8 * v8);
    v16 = a4;
    v17 = result;
    while (1)
    {
      v18 = v17[1];
      v20 = v17 + 2;
      v19 = *((__int16 *)v17 + 4);
      v21 = *v17 - 1;
      v22 = v13 + v21;
      v23 = v14 + v21;
      if (v18 >= 2)
        break;
      v27 = 0x2000;
      v26 = 0x2000;
      if (v18)
        goto LABEL_11;
LABEL_13:
      v39 = v27 >> 14;
      v40 = v26 >> 14;
      if (v27 >> 14 >= 255)
        v39 = 255;
      v41 = v39 & ~(v39 >> 31);
      if (v40 >= 255)
        v40 = 255;
      *v15 = v41;
      v15[1] = v40 & ~(v40 >> 31);
      v15 += 2;
      v17 = (int *)((char *)v17 + v11);
      if (!--v16)
        goto LABEL_18;
    }
    v24 = 0;
    v25 = v18 + 2;
    v26 = 0x2000;
    v27 = 0x2000;
    do
    {
      v28 = v27 + v19 * *(unsigned __int8 *)(v22 + v24 + 1);
      v29 = v26 + v19 * *(unsigned __int8 *)(v23 + v24 + 1);
      v30 = *((__int16 *)v20++ + 2);
      v19 = v30;
      v31 = *((__int16 *)v20 - 1);
      v27 = v28 + v31 * *(unsigned __int8 *)(v22 + v24 + 2);
      v26 = v29 + *(unsigned __int8 *)(v23 + v24 + 2) * v31;
      v24 += 2;
      v25 -= 2;
    }
    while (v25 > 3);
    v23 += v24;
    v18 -= v24;
    v22 += v24;
    if (!v18)
      goto LABEL_13;
LABEL_11:
    v32 = (unsigned __int8 *)(v23 + 1);
    v33 = (unsigned __int8 *)(v22 + 1);
    v34 = (__int16 *)v20 + 1;
    do
    {
      v36 = *v33++;
      v35 = v36;
      v37 = *v32++;
      v27 += v19 * v35;
      v26 += v19 * v37;
      v38 = *v34++;
      v19 = v38;
      --v18;
    }
    while (v18);
    goto LABEL_13;
  }
  return result;
}

uint64_t resample_byte_v_Ncpp(uint64_t result, uint64_t a2, unsigned __int8 a3, int a4, _DWORD **a5, uint64_t *a6)
{
  _DWORD *v6;
  int v7;
  const __int16 *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int32x4_t v12;
  int32x4_t v13;
  uint64_t *v14;
  const __int16 *v15;
  int v16;
  uint64_t v17;
  int16x4_t v18;
  int16x8_t v19;
  int v20;
  uint64_t *v21;
  const __int16 *v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;

  v6 = *a5;
  v7 = *(_DWORD *)(result + 4);
  v8 = (const __int16 *)(result + 8);
  v9 = a3 * a4;
  v10 = v9 & 0xFFFFFFFC;
  if ((int)v10 < 1)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    v11 = 0;
    v12.i64[0] = 0xFF000000FFLL;
    v12.i64[1] = 0xFF000000FFLL;
    do
    {
      v13.i64[0] = 0x200000002000;
      v13.i64[1] = 0x200000002000;
      if (v7)
      {
        v14 = a6;
        v15 = v8;
        v16 = v7;
        do
        {
          v17 = *v14++;
          result = 4 * v11;
          v18 = vld1_dup_s16(v15++);
          v13 = vmlaq_s32(v13, *(int32x4_t *)(v17 + 4 * v11), vmovl_s16(v18));
          --v16;
        }
        while (v16);
      }
      v19 = (int16x8_t)vmaxq_s32(vminq_s32(vshrq_n_s32(v13, 0xEuLL), v12), (int32x4_t)0);
      *(int16x4_t *)v19.i8 = vmovn_s32((int32x4_t)v19);
      *v6++ = vmovn_s16(v19).u32[0];
      v11 += 4;
    }
    while (v11 < v10);
  }
  if ((int)v11 < (int)v9)
  {
    v11 = v11;
    do
    {
      v20 = 0x2000;
      if (v7)
      {
        v21 = a6;
        v22 = v8;
        v23 = v7;
        do
        {
          v24 = *v22++;
          result = v24;
          v25 = *v21++;
          v20 += *(_DWORD *)(v25 + 4 * v11) * result;
          --v23;
        }
        while (v23);
      }
      v26 = v20 >> 14;
      if (v26 >= 255)
        v26 = 255;
      *(_BYTE *)v6 = v26 & ~(v26 >> 31);
      v6 = (_DWORD *)((char *)v6 + 1);
      ++v11;
    }
    while (v11 != v9);
  }
  return result;
}

uint64_t *resample_byte_v_3cpp_af(uint64_t *result, uint64_t a2, unsigned __int8 a3, int a4, _BYTE **a5, uint64_t *a6)
{
  unint64_t v6;
  unint64_t v7;
  int v8;
  __int16 *v9;
  _BYTE *v10;
  int32x2_t v11;
  int v12;
  int v13;
  __int16 *v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  int32x2_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int32x2_t v24;

  v6 = (a3 * a4) & 0xFFFFFFFC;
  if ((int)v6 >= 1)
  {
    v7 = 0;
    v8 = *((_DWORD *)result + 1);
    v9 = (__int16 *)(result + 1);
    v10 = *a5;
    do
    {
      if (v8)
      {
        v11 = (int32x2_t)0x200000002000;
        v12 = 0x2000;
        result = a6;
        v13 = 0x2000;
        v14 = v9;
        v15 = v8;
        do
        {
          v17 = *v14++;
          v16 = v17;
          v18 = *result++;
          v13 += *(_DWORD *)(v18 + 4 * v7) * v16;
          v11 = vmla_s32(v11, *(int32x2_t *)(v18 + 4 * (v7 | 1)), vdup_n_s32(v16));
          v12 += *(_DWORD *)(v18 + 4 * (v7 | 3)) * v16;
          --v15;
        }
        while (v15);
      }
      else
      {
        v11 = (int32x2_t)0x200000002000;
        v13 = 0x2000;
        v12 = 0x2000;
      }
      v19 = v13 >> 14;
      v20 = vshr_n_s32(v11, 0xEuLL);
      if (v19 >= 255)
        v19 = 255;
      v21 = v19 & ~(v19 >> 31);
      v22 = v12 >> 14;
      if (v22 >= 255)
        v22 = 255;
      v23 = v22 & ~(v22 >> 31);
      v24 = vmax_s32(vmin_s32(v20, (int32x2_t)0xFF000000FFLL), 0);
      if (v24.i32[0] > v21)
        v21 = v24.i32[0];
      if (v24.i32[1] > v21)
        v21 = v24.u32[1];
      if (v23 > v21)
        LOBYTE(v21) = v23;
      *v10 = v21;
      v10[2] = v24.i8[4];
      v10[1] = v24.i8[0];
      v10[3] = v23;
      v10 += 4;
      v7 += 4;
    }
    while (v7 < v6);
  }
  return result;
}

uint64_t resample_byte_v_Ncpp_af(uint64_t result, uint64_t a2, unsigned __int8 a3, int a4, _QWORD *a5, uint64_t *a6)
{
  _BYTE *v6;
  int v7;
  const __int16 *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  int32x4_t v16;
  uint64_t *v17;
  const __int16 *v18;
  int v19;
  uint64_t v20;
  int16x4_t v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  uint64_t *v35;
  const __int16 *v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;

  v6 = (_BYTE *)(*a5 - 1);
  v7 = *(_DWORD *)(result + 4);
  v8 = (const __int16 *)(result + 8);
  v9 = a3;
  v10 = 2 - a3;
  v11 = a3 * a4;
  v12 = v11 & 0xFFFFFFFC;
  if ((int)v12 < 1)
  {
    LODWORD(v13) = 0;
    v14 = 0;
    v15 = a3;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    result = 255;
    v15 = a3;
    do
    {
      v16.i64[0] = 0x200000002000;
      v16.i64[1] = 0x200000002000;
      if (v7)
      {
        v17 = a6;
        v18 = v8;
        v19 = v7;
        do
        {
          v20 = *v17++;
          v21 = vld1_dup_s16(v18++);
          v16 = vmlaq_s32(v16, *(int32x4_t *)(v20 + 4 * v13), vmovl_s16(v21));
          --v19;
        }
        while (v19);
      }
      v22 = v16.i32[0] >> 14;
      v23 = v16.i32[1] >> 14;
      if (v16.i32[0] >> 14 >= 255)
        v22 = 255;
      v24 = v22 & ~(v22 >> 31);
      if (v23 >= 255)
        v23 = 255;
      if (v14 <= v24)
        v25 = v24;
      else
        v25 = v14;
      if ((v13 | 1) == v15)
      {
        v6[v10] = v25;
        v26 = v15 + v9;
        v15 += v9;
        v25 = 0;
      }
      else
      {
        v26 = v15;
      }
      v27 = v23 & ~(v23 >> 31);
      v6[1] = v24;
      if (v25 <= v27)
        v28 = v23 & ~(v23 >> 31);
      else
        v28 = v25;
      if ((v13 | 2) == v26)
      {
        v6[v10 + 1] = v28;
        v26 = v15 + v9;
        v15 += v9;
        v28 = 0;
      }
      v6[2] = v27;
      v29 = v16.i32[2] >> 14;
      v30 = v16.i32[3] >> 14;
      if (v16.i32[2] >> 14 >= 255)
        v29 = 255;
      v31 = v29 & ~(v29 >> 31);
      if (v30 >= 255)
        v30 = 255;
      if (v28 <= v31)
        v32 = v31;
      else
        v32 = v28;
      if ((v13 | 3) == v26)
      {
        v6[v10 + 2] = v32;
        v26 = v15 + v9;
        v15 += v9;
        v32 = 0;
      }
      v33 = v30 & ~(v30 >> 31);
      v6[3] = v31;
      if (v32 <= v33)
        v14 = v30 & ~(v30 >> 31);
      else
        v14 = v32;
      v13 += 4;
      if (v13 == v26)
      {
        v6[v10 + 3] = v14;
        v15 += v9;
        v14 = 0;
      }
      v6[4] = v33;
      v6 += 4;
    }
    while (v13 < v12);
  }
  if ((int)v13 < (int)v11)
  {
    v13 = v13;
    do
    {
      v34 = 0x2000;
      if (v7)
      {
        v35 = a6;
        v36 = v8;
        v37 = v7;
        do
        {
          v39 = *v36++;
          v38 = v39;
          v40 = *v35++;
          v34 += *(_DWORD *)(v40 + 4 * v13) * v38;
          --v37;
        }
        while (v37);
      }
      v41 = v34 >> 14;
      if (v41 >= 255)
        v41 = 255;
      result = v41 & ~(v41 >> 31);
      if (v14 <= (int)result)
        v14 = result;
      if (++v13 == v15)
      {
        v6[v10] = v14;
        v15 += v9;
        v14 = 0;
      }
      *++v6 = result;
    }
    while (v13 != v11);
  }
  return result;
}

uint64_t *resample_byte_v_3cpp_al(uint64_t *result, uint64_t a2, unsigned __int8 a3, int a4, _BYTE **a5, uint64_t *a6)
{
  unint64_t v6;
  unint64_t v7;
  int v8;
  __int16 *v9;
  _BYTE *v10;
  int32x2_t v11;
  int v12;
  int v13;
  __int16 *v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int32x2_t v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int32x2_t v24;

  v6 = (a3 * a4) & 0xFFFFFFFC;
  if ((int)v6 >= 1)
  {
    v7 = 0;
    v8 = *((_DWORD *)result + 1);
    v9 = (__int16 *)(result + 1);
    v10 = *a5;
    do
    {
      if (v8)
      {
        v11 = (int32x2_t)0x200000002000;
        v12 = 0x2000;
        result = a6;
        v13 = 0x2000;
        v14 = v9;
        v15 = v8;
        do
        {
          v17 = *v14++;
          v16 = v17;
          v18 = *result++;
          v11 = vmla_s32(v11, *(int32x2_t *)(v18 + 4 * v7), vdup_n_s32(v16));
          v13 += *(_DWORD *)(v18 + 4 * (v7 | 2)) * v16;
          v12 += *(_DWORD *)(v18 + 4 * (v7 | 3)) * v16;
          --v15;
        }
        while (v15);
      }
      else
      {
        v11 = (int32x2_t)0x200000002000;
        v13 = 0x2000;
        v12 = 0x2000;
      }
      v19 = vshr_n_s32(v11, 0xEuLL);
      v20 = v13 >> 14;
      v21 = v12 >> 14;
      if (v20 >= 255)
        v20 = 255;
      v22 = v20 & ~(v20 >> 31);
      if (v21 >= 255)
        v21 = 255;
      v23 = v21 & ~(v21 >> 31);
      v24 = vmax_s32(vmin_s32(v19, (int32x2_t)0xFF000000FFLL), 0);
      if (v24.i32[0] > v23)
        v23 = v24.i32[0];
      if (v24.i32[1] > v23)
        v23 = v24.u32[1];
      if (v22 > v23)
        LOBYTE(v23) = v22;
      v10[1] = v24.i8[4];
      *v10 = v24.i8[0];
      v10[2] = v22;
      v10[3] = v23;
      v10 += 4;
      v7 += 4;
    }
    while (v7 < v6);
  }
  return result;
}

uint64_t resample_byte_v_Ncpp_al(uint64_t result, uint64_t a2, unsigned __int8 a3, int a4, _QWORD *a5, uint64_t *a6)
{
  uint64_t v6;
  int v7;
  const __int16 *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  int32x4_t v14;
  int v15;
  int32x4_t v16;
  uint64_t *v17;
  const __int16 *v18;
  int v19;
  uint64_t v20;
  int16x4_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x16_t v26;
  int v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  unsigned __int32 v31;
  __int32 v32;
  BOOL v33;
  __int16 v34;
  int v35;
  uint64_t v36;
  unsigned __int32 v37;
  __int32 v38;
  BOOL v39;
  __int16 v40;
  int v41;
  uint64_t v42;
  unsigned __int32 v43;
  int v44;
  BOOL v45;
  __int16 v46;
  int v47;
  uint16x4_t v48;
  int8x16_t v49;
  int16x8_t v50;
  int v51;
  uint64_t *v52;
  const __int16 *v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  BOOL v60;
  int v61;

  v6 = *a5 - 1;
  v7 = *(_DWORD *)(result + 4);
  v8 = (const __int16 *)(result + 8);
  v9 = a3;
  v10 = a3 * a4;
  v11 = v10 & 0xFFFFFFFC;
  if ((int)v11 < 1)
  {
    LODWORD(v12) = 0;
    v13 = 0;
    v15 = a3;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v14.i64[0] = 0xFF000000FFLL;
    v14.i64[1] = 0xFF000000FFLL;
    v15 = a3;
    do
    {
      v16.i64[0] = 0x200000002000;
      v16.i64[1] = 0x200000002000;
      if (v7)
      {
        v17 = a6;
        v18 = v8;
        v19 = v7;
        do
        {
          v20 = *v17++;
          v21 = vld1_dup_s16(v18++);
          v16 = vmlaq_s32(v16, *(int32x4_t *)(v20 + 4 * v12), vmovl_s16(v21));
          --v19;
        }
        while (v19);
      }
      v22 = v12 | 1;
      v23 = v12 | 2;
      v24 = v12 | 3;
      v12 += 4;
      v25 = v6 + 4;
      v26 = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(v16, 0xEuLL), v14), (int32x4_t)0);
      v27 = v26.i32[0];
      if (v13 > v26.i32[0])
        v27 = v13;
      v28 = v22 == v15;
      result = v28;
      if (v28)
        v29 = v9;
      else
        v29 = 0;
      v30 = (v29 + v15);
      if (v28)
        v31 = 0;
      else
        v31 = v27;
      v32 = v26.i32[1];
      if (v31 > v26.i32[1])
        v32 = v31;
      v33 = v23 == v30;
      v34 = v23 == v30;
      if (v33)
        v35 = v9;
      else
        v35 = 0;
      v36 = (v35 + v30);
      if (v33)
        v37 = 0;
      else
        v37 = v32;
      v38 = v26.i32[2];
      if (v37 > v26.i32[2])
        v38 = v37;
      v39 = v24 == v36;
      v40 = v24 == v36;
      if (v39)
        v41 = v9;
      else
        v41 = 0;
      v42 = (v41 + v36);
      if (v39)
        v43 = 0;
      else
        v43 = v38;
      v44 = v26.i32[3];
      if (v43 > v26.i32[3])
        v44 = v43;
      v45 = v12 == v42;
      v46 = v12 == v42;
      if (v12 == v42)
        v47 = v9;
      else
        v47 = 0;
      v15 = v47 + v42;
      if (v45)
        v13 = 0;
      else
        v13 = v44;
      v48.i16[0] = result;
      v48.i16[1] = v34;
      v48.i16[2] = v40;
      v48.i16[3] = v46;
      v49.i64[0] = __PAIR64__(v32, v27);
      v49.i64[1] = __PAIR64__(v44, v38);
      v50 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16(v48), 0x1FuLL)), v49, v26);
      *(int16x4_t *)v50.i8 = vmovn_s32((int32x4_t)v50);
      *(_DWORD *)(v6 + 1) = vmovn_s16(v50).u32[0];
      v6 += 4;
    }
    while (v12 < v11);
    v6 = v25;
  }
  if ((int)v12 < (int)v10)
  {
    v12 = v12;
    do
    {
      v51 = 0x2000;
      if (v7)
      {
        v52 = a6;
        v53 = v8;
        v54 = v7;
        do
        {
          v56 = *v53++;
          v55 = v56;
          v57 = *v52++;
          v51 += *(_DWORD *)(v57 + 4 * v12) * v55;
          --v54;
        }
        while (v54);
      }
      v58 = v51 >> 14;
      if (v58 >= 255)
        v58 = 255;
      v59 = v58 & ~(v58 >> 31);
      if (v13 <= v59)
        result = v59;
      else
        result = v13;
      v60 = ++v12 == v15;
      if (v12 == v15)
        v61 = v9;
      else
        v61 = 0;
      v15 += v61;
      if (v60)
        v13 = 0;
      else
        v13 = result;
      if (v60)
        LOBYTE(v59) = result;
      *(_BYTE *)++v6 = v59;
    }
    while (v12 != v10);
  }
  return result;
}

int *resample_byte_h_4cpp(int *result, unsigned int a2, double a3, double a4, double a5, uint8x8_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t *a10, int *a11, int a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int32x4_t v15;
  uint64_t v16;
  int32x4_t *v17;
  int v18;
  int *v19;
  int v20;
  const __int16 *v21;
  __int32 *v22;
  int32x4_t v23;
  __int32 v24;
  int16x4_t v25;

  if (a12 >= 1)
  {
    v12 = 0;
    v13 = *a10;
    v14 = 2 * a2 + 8;
    v15.i64[0] = 0xFF000000FFLL;
    v15.i64[1] = 0xFF000000FFLL;
    do
    {
      if (a8)
      {
        v16 = v13 + *a11 * (uint64_t)(int)v12;
        v17 = *(int32x4_t **)(a9 + 8 * v12);
        v18 = a8;
        v19 = result;
        do
        {
          v20 = v19[1];
          if (v20)
          {
            v21 = (const __int16 *)(v19 + 2);
            v22 = (__int32 *)(v16 + 4 * *v19);
            v23.i64[0] = 0x200000002000;
            v23.i64[1] = 0x200000002000;
            do
            {
              v24 = *v22++;
              a6.i32[0] = v24;
              a6 = (uint8x8_t)vmovl_u8(a6).u64[0];
              v25 = vld1_dup_s16(v21++);
              v23 = vmlal_s16(v23, v25, (int16x4_t)a6);
              --v20;
            }
            while (v20);
          }
          else
          {
            v23.i64[0] = 0x200000002000;
            v23.i64[1] = 0x200000002000;
          }
          *v17++ = vmaxq_s32(vminq_s32(vshrq_n_s32(v23, 0xEuLL), v15), (int32x4_t)0);
          v19 = (int *)((char *)v19 + v14);
          --v18;
        }
        while (v18);
      }
      ++v12;
    }
    while (v12 != a12);
  }
  return result;
}

int *resample_byte_h_3cpp_ap(int *result, unsigned int a2, double a3, double a4, double a5, int32x4_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t *a10, int *a11, int a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int32x4_t v17;
  uint64_t v18;
  int32x4_t *v19;
  uint64_t v20;
  int v21;
  int *v22;
  int v23;
  const __int16 *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  int32x4_t v29;
  unsigned __int16 v30;
  int16x4_t v31;

  if (a12 >= 1)
  {
    v12 = 0;
    v13 = *a10;
    v14 = a10[1];
    v15 = 2 * a2 + 8;
    v16 = a12;
    v17.i64[0] = 0xFF000000FFLL;
    v17.i64[1] = 0xFF000000FFLL;
    do
    {
      if (a8)
      {
        v18 = v13 + *a11 * (uint64_t)(int)v12;
        v19 = *(int32x4_t **)(a9 + 8 * v12);
        v20 = v14 + a11[1] * (uint64_t)(int)v12 + 1;
        v21 = a8;
        v22 = result;
        do
        {
          v23 = v22[1];
          if (v23)
          {
            v24 = (const __int16 *)(v22 + 2);
            v25 = *v22;
            v26 = v25 + v20;
            v27 = (unsigned __int8 *)(v18 + 3 * v25);
            v28 = (unsigned __int8 *)(v26 - 1);
            v29.i64[0] = 0x200000002000;
            v29.i64[1] = 0x200000002000;
            do
            {
              a6.i8[0] = *v27;
              a6.i8[4] = v27[1];
              v30 = *v28++;
              a6.i16[1] = a6.i16[2];
              a6.i8[4] = v27[2];
              a6.i16[3] = v30;
              v31 = vld1_dup_s16(v24++);
              a6 = (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)a6.i8), (int8x16_t)v17);
              v29 = vmlaq_s32(v29, vmovl_s16(v31), a6);
              v27 += 3;
              --v23;
            }
            while (v23);
          }
          else
          {
            v29.i64[0] = 0x200000002000;
            v29.i64[1] = 0x200000002000;
          }
          *v19++ = vmaxq_s32(vminq_s32(vshrq_n_s32(v29, 0xEuLL), v17), (int32x4_t)0);
          v22 = (int *)((char *)v22 + v15);
          --v21;
        }
        while (v21);
      }
      ++v12;
    }
    while (v12 != v16);
  }
  return result;
}

int *resample_byte_h_Ncpp(int *result, unsigned int a2, unsigned __int8 a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  int v15;
  int *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int v21;
  __int16 *v22;
  int v23;
  int v24;
  int v25;

  if (a8 >= 1)
  {
    v8 = 0;
    v9 = a3;
    v10 = *a6;
    v11 = a3;
    v12 = 2 * a2 + 8;
    do
    {
      if (a4)
      {
        v13 = v10 + *a7 * (uint64_t)(int)v8;
        v14 = *(int **)(a5 + 8 * v8);
        v15 = a4;
        v16 = result;
        do
        {
          if (v9)
          {
            v17 = 0;
            v18 = v16[1];
            v19 = v13 + *v16 * (uint64_t)v9;
            do
            {
              if (v18)
              {
                v20 = (unsigned __int8 *)(v19 + v17);
                v21 = 0x2000;
                v22 = (__int16 *)(v16 + 2);
                v23 = v18;
                do
                {
                  v24 = *v22++;
                  v21 += *v20 * v24;
                  v20 += v11;
                  --v23;
                }
                while (v23);
              }
              else
              {
                v21 = 0x2000;
              }
              v25 = v21 >> 14;
              if (v25 >= 255)
                v25 = 255;
              *v14++ = v25 & ~(v25 >> 31);
              ++v17;
            }
            while (v17 != v11);
          }
          v16 = (int *)((char *)v16 + v12);
          --v15;
        }
        while (v15);
      }
      ++v8;
    }
    while (v8 != a8);
  }
  return result;
}

int *resample_byte_h_1cpp(int *result, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  int *v15;
  int v16;
  int v17;
  int *v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  BOOL v26;
  unsigned __int8 *v27;
  __int16 *v28;
  int v29;
  int v30;
  int v31;

  if (a8 >= 1)
  {
    v8 = 0;
    v9 = *a6;
    v10 = 2 * a2 + 8;
    v11 = a8;
    do
    {
      if (a4)
      {
        v12 = v9 + *a7 * (uint64_t)(int)v8;
        v13 = *(int **)(a5 + 8 * v8);
        v14 = a4;
        v15 = result;
        do
        {
          v16 = v15[1];
          v18 = v15 + 2;
          v17 = *((__int16 *)v15 + 4);
          v19 = *v15 + v12 - 1;
          v20 = 0x2000;
          if (v16 >= 4)
          {
            v21 = *((__int16 *)v15 + 4);
            v22 = v15[1];
            do
            {
              v24 = *(unsigned __int8 *)(v19 + 4);
              v19 += 4;
              v23 = v24;
              v16 = v22 - 4;
              v25 = *((__int16 *)v18 + 4);
              v18 += 2;
              v17 = v25;
              v20 += v21 * *(unsigned __int8 *)(v19 - 3)
                   + *(unsigned __int8 *)(v19 - 2) * *((__int16 *)v18 - 3)
                   + *(unsigned __int8 *)(v19 - 1) * *((__int16 *)v18 - 2)
                   + v23 * *((__int16 *)v18 - 1);
              v21 = v25;
              v26 = v22 > 7;
              v22 -= 4;
            }
            while (v26);
          }
          if (v16)
          {
            v27 = (unsigned __int8 *)(v19 + 1);
            v28 = (__int16 *)v18 + 1;
            do
            {
              v29 = *v27++;
              v20 += v17 * v29;
              v30 = *v28++;
              v17 = v30;
              --v16;
            }
            while (v16);
          }
          v31 = v20 >> 14;
          if (v20 >> 14 >= 255)
            v31 = 255;
          *v13++ = v31 & ~(v31 >> 31);
          v15 = (int *)((char *)v15 + v10);
          --v14;
        }
        while (v14);
      }
      ++v8;
    }
    while (v8 != v11);
  }
  return result;
}

int *resample_byte_h_3cpp(int *result, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int32x2_t *v11;
  uint64_t v12;
  int v13;
  int *v14;
  int v15;
  __int16 *v16;
  unsigned __int8 *v17;
  int32x2_t v18;
  int v19;
  unsigned int v20;
  int32x2_t v21;
  int32x2_t v22;
  int v23;

  if (a8 >= 1)
  {
    v8 = 0;
    v9 = *a6;
    v10 = 2 * a2 + 8;
    do
    {
      if (a4)
      {
        v11 = *(int32x2_t **)(a5 + 8 * v8);
        v12 = v9 + *a7 * (uint64_t)(int)v8 + 2;
        v13 = a4;
        v14 = result;
        do
        {
          v15 = v14[1];
          if (v15)
          {
            v16 = (__int16 *)(v14 + 2);
            v17 = (unsigned __int8 *)(v12 + 3 * *v14);
            v18 = (int32x2_t)0x200000002000;
            v19 = 0x2000;
            do
            {
              v20 = *v16++;
              v21.i32[0] = *(v17 - 2);
              v21.i32[1] = *(v17 - 1);
              v18 = vmla_s32(v18, vdup_n_s32(v20), v21);
              v19 += *v17 * v20;
              v17 += 3;
              --v15;
            }
            while (v15);
          }
          else
          {
            v18 = (int32x2_t)0x200000002000;
            v19 = 0x2000;
          }
          v22 = vshr_n_s32(v18, 0xEuLL);
          v23 = v19 >> 14;
          if (v19 >> 14 >= 255)
            v23 = 255;
          *v11 = vmax_s32(vmin_s32(v22, (int32x2_t)0xFF000000FFLL), 0);
          v11[1].i32[0] = v23 & ~(v23 >> 31);
          v11 = (int32x2_t *)((char *)v11 + 12);
          v14 = (int *)((char *)v14 + v10);
          --v13;
        }
        while (v13);
      }
      ++v8;
    }
    while (v8 != a8);
  }
  return result;
}

uint64_t CGReferenceWhiteToneMappingGetDefaultOptions()
{
  if (CGReferenceWhiteToneMappingGetDefaultOptions_predicate != -1)
    dispatch_once(&CGReferenceWhiteToneMappingGetDefaultOptions_predicate, &__block_literal_global_1873);
  return CGReferenceWhiteToneMappingGetDefaultOptions_options;
}

BOOL IsCGPDFTaggedNodeTypeContent(int a1)
{
  return a1 == 1 || a1 == 700;
}

BOOL IsCGPDFTaggedNodeTypeGroup(int a1)
{
  return (a1 - 100) < 0xC;
}

BOOL IsCGPDFTaggedNodeTypeHeader(int a1)
{
  return (a1 - 201) < 7;
}

BOOL IsCGPDFTaggedNodeTypeList(int a1)
{
  return (a1 & 0xFFFFFFFC) == 300;
}

BOOL IsCGPDFTaggedNodeTypeTable(int a1)
{
  return (a1 - 400) < 7;
}

BOOL IsCGPDFTaggedNodeTypeInline(int a1)
{
  return (a1 - 500) < 8;
}

BOOL IsCGPDFTaggedNodeTypeRuby(int a1)
{
  return (a1 - 600) < 7;
}

BOOL IsCGPDFTaggedNodeTypeIllustration(int a1)
{
  return (a1 - 700) < 3;
}

const char *CGPDFTaggedNodeTypeGetName(int a1)
{
  const char *result;

  if (a1 <= 399)
  {
    if (a1 > 199)
    {
      switch(a1)
      {
        case 200:
          result = "P";
          break;
        case 201:
          result = "H";
          break;
        case 202:
          result = "H1";
          break;
        case 203:
          result = "H2";
          break;
        case 204:
          result = "H3";
          break;
        case 205:
          result = "H4";
          break;
        case 206:
          result = "H5";
          break;
        case 207:
          result = "H6";
          break;
        default:
          switch(a1)
          {
            case 300:
              result = "L";
              break;
            case 301:
              result = "LI";
              break;
            case 302:
              result = "Lbl";
              break;
            case 303:
              result = "LBody";
              break;
            default:
              return "Unknown";
          }
          break;
      }
    }
    else
    {
      switch(a1)
      {
        case 'd':
          result = "Document";
          break;
        case 'e':
          result = "Part";
          break;
        case 'f':
          result = "Art";
          break;
        case 'g':
          result = "Sect";
          break;
        case 'h':
          result = "Div";
          break;
        case 'i':
          result = "BlockQuote";
          break;
        case 'j':
          result = "Caption";
          break;
        case 'k':
          result = "TOC";
          break;
        case 'l':
          result = "TOCI";
          break;
        case 'm':
          result = "Index";
          break;
        case 'n':
          result = "NonStruct";
          break;
        case 'o':
          result = "Private";
          break;
        default:
          if (a1 != 1)
            return "Unknown";
          result = "Word";
          break;
      }
    }
  }
  else if (a1 > 599)
  {
    if (a1 > 699)
    {
      if (a1 > 701)
      {
        if (a1 == 702)
        {
          return "Form";
        }
        else if (a1 == 800)
        {
          return "OBJR";
        }
        else
        {
          return "Unknown";
        }
      }
      else if (a1 == 700)
      {
        return "Figure";
      }
      else
      {
        return "Formula";
      }
    }
    else
    {
      switch(a1)
      {
        case 600:
          result = "Ruby";
          break;
        case 601:
          result = "RB";
          break;
        case 602:
          result = "RT";
          break;
        case 603:
          result = "RP";
          break;
        case 604:
          result = "Warichu";
          break;
        case 605:
          result = "WT";
          break;
        case 606:
          result = "WP";
          break;
        default:
          return "Unknown";
      }
    }
  }
  else
  {
    switch(a1)
    {
      case 500:
        result = "Span";
        break;
      case 501:
        result = "Quote";
        break;
      case 502:
        result = "Note";
        break;
      case 503:
        result = "Reference";
        break;
      case 504:
        result = "BibEntry";
        break;
      case 505:
        result = "Code";
        break;
      case 506:
        result = "Link";
        break;
      case 507:
        result = "Annot";
        break;
      default:
        switch(a1)
        {
          case 400:
            result = "Table";
            break;
          case 401:
            result = "TR";
            break;
          case 402:
            result = "TH";
            break;
          case 403:
            result = "TD";
            break;
          case 404:
            result = "THead";
            break;
          case 405:
            result = "TBody";
            break;
          case 406:
            result = "TFoot";
            break;
          default:
            return "Unknown";
        }
        break;
    }
  }
  return result;
}

CFStringRef converter_copy_format_description(CFTypeRef cf, const __CFDictionary *a2)
{
  CFIndex v4;
  const __CFAllocator *v5;

  if (cf)
    v4 = CFGetRetainCount(cf);
  else
    v4 = 0;
  v5 = CFGetAllocator(cf);
  return CFStringCreateWithFormat(v5, a2, CFSTR("<CGCMSConverter %p refCount = %ld>"), cf, v4);
}

CFStringRef converter_copy_debug_description(const void *a1)
{
  return converter_copy_format_description(a1, 0);
}

uint64_t convert_device(uint64_t a1, const std::__fs::filesystem::path *a2, const std::__fs::filesystem::path *a3, uint64_t a4)
{
  unsigned int Type;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  _OWORD v17[5];
  uint64_t v18;

  Type = CGColorSpaceGetType(*(_QWORD **)(a1 + 24));
  v9 = CGColorSpaceGetType(*(_QWORD **)(a1 + 32));
  if (v9 >= 3)
    _CGHandleAssert("convert_device", 3663, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "(int)srcType >= kCGColorSpaceDeviceGray && (int)srcType <= kCGColorSpaceDeviceCMYK", "invalid src colorspace type %d", v11, v12, v13, v9);
  if (Type >= 3)
    _CGHandleAssert("convert_device", 3664, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "(int)dstType >= kCGColorSpaceDeviceGray && (int)dstType <= kCGColorSpaceDeviceCMYK", "invalid dest colorspace type %d", v11, v12, v13, Type);
  v14 = *(_OWORD *)(a4 + 48);
  v17[2] = *(_OWORD *)(a4 + 32);
  v17[3] = v14;
  v17[4] = *(_OWORD *)(a4 + 64);
  v18 = *(_QWORD *)(a4 + 80);
  v15 = *(_OWORD *)(a4 + 16);
  v17[0] = *(_OWORD *)a4;
  v17[1] = v15;
  return convert_using_vImageConverter(a1, a2, a3, (vImageConverter ***)v17, v10, v11, v12, v13);
}

double null_buffer_converter_info@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 80) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t convert_Lab_to_device(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int Type;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  void *v29;
  uint64_t __dst[43];

  v8 = *(_DWORD *)(a2 + 40);
  if (v8 != *(_DWORD *)(a3 + 40) || v8 > 5 || ((1 << v8) & 0x36) == 0)
    _CGHandleAssert("convert_Lab_to_device", 3776, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "src_component == dst_component && (src_component == kCGPixelComponent8BitInteger || src_component == kCGPixelComponent16BitInteger || src_component == kCGPixelComponent16BitFloat || src_component == kCGPixelComponent32BitFloat)", "invalid src (%u) dest (%u) component types", a6, a7, a8, *(_DWORD *)(a2 + 40));
  Type = CGColorSpaceGetType(*(_QWORD **)(a1 + 24));
  if (Type != 1)
  {
    v15 = Type;
    memcpy(__dst, (const void *)a3, sizeof(__dst));
    v23 = *(_QWORD *)(a3 + 8);
    v24 = *(_QWORD *)(a3 + 16);
    if (!is_mul_ok(v23, v24)
      || (v25 = v23 * v24, !is_mul_ok(v25, 3uLL))
      || (v26 = 3 * v25, v27 = *(_QWORD *)(a3 + 48) >> 3, !is_mul_ok(v26, v27))
      || (v28 = malloc_type_calloc(v26 * v27, 1uLL, 0xBB772D68uLL)) == 0)
    {
      CGPostError((uint64_t)"%s : Unable to allocate", v16, v17, v18, v19, v20, v21, v22, (char)"convert_Lab_to_device");
      return 0;
    }
    v29 = v28;
    __dst[0] = (uint64_t)v28;
    Lab_to_rgb((uint64_t *)a2, __dst);
    if (v15 == 2)
    {
      rgb_to_cmyk(__dst, (uint64_t *)a3);
    }
    else
    {
      if (v15)
      {
        v14 = 0;
        goto LABEL_22;
      }
      rgb_to_gray(__dst, (_QWORD *)a3);
    }
    v14 = 1;
LABEL_22:
    free(v29);
    return v14;
  }
  Lab_to_rgb((uint64_t *)a2, (uint64_t *)a3);
  return 1;
}

uint64_t convert_deviceN(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v12;
  _QWORD *v13;
  unsigned int v14;
  char *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t BitsPerPixel;
  unint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t BitsPerComponent;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  float v49;
  float v50;
  size_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  int v66;
  int v67;
  char *v68;
  float v69;
  float v70;
  float v71;
  char v73;
  int v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unsigned int v79;
  _BOOL4 v80;
  uint64_t v81;
  BOOL v82;
  float v83;
  char v84;
  double v85;
  _BOOL4 v86;
  double v87;
  double v88;
  _WORD *v89;
  char *v90;
  uint64_t v91;
  unsigned __int8 *v92;
  unsigned __int8 *v93;
  char *v94;
  unsigned __int8 *v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  double v99;
  double *v100;
  unsigned __int8 *v101;
  unsigned int v102;
  float v103;
  float v104;
  double v105;
  char v106;
  unsigned int v108;
  float v109;
  unsigned int v111;
  float v112;
  unsigned int v117;
  uint64_t v118;
  float v119;
  char v121;
  char v122;
  BOOL v124;
  char v125;
  BOOL v127;
  double *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  double *v132;
  double *v133;
  float v134;
  float v135;
  double v136;
  double v137;
  float v138;
  double v139;
  double v140;
  int v141;
  _WORD *v142;
  char *v143;
  unsigned __int8 *v144;
  unsigned __int8 *v145;
  char *v146;
  unsigned __int8 *v147;
  double *v148;
  uint64_t v149;
  unint64_t v150;
  double v151;
  float v152;
  float v153;
  _WORD *v154;
  double *v155;
  char v156;
  float v159;
  float v160;
  double v161;
  float v162;
  char *v164;
  uint64_t (*v165)(uint64_t, _QWORD *, __int128 *, __int128 *);
  __int128 v166;
  __int128 v167;
  uint64_t v169;
  char *v170;
  _QWORD *v171;
  char *v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  unsigned __int8 *v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _BOOL4 v187;
  _BOOL4 v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t TintTransform;
  int Type;
  unsigned int v194;
  double *v195;
  unsigned __int8 *v196;
  char *v197;
  unsigned __int8 *v198;
  unsigned __int8 *v199;
  uint64_t v200;
  char *v201;
  _WORD *v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  _QWORD v215[38];
  __int128 v216;
  __int128 v217;
  _QWORD v218[40];
  _QWORD v219[46];

  v219[44] = *MEMORY[0x1E0C80C00];
  if (!a1)
    _CGHandleAssert("convert_deviceN", 4634, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "converter", "converter is NULL", a6, a7, a8, v169);
  v12 = *(_QWORD **)(a1 + 96);
  TintTransform = CGColorSpaceGetTintTransform((uint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD **)(a1 + 32);
  v14 = *(_DWORD *)(a2 + 64) - 1;
  if (v14 > 8)
    v15 = 0;
  else
    v15 = (char *)qword_184F7EB80[v14];
  v16 = (_DWORD *)(a2 + 40);
  v175 = a4;
  if (v13)
    v177 = *(_QWORD *)(v13[3] + 40);
  else
    v177 = 0;
  v202 = *(_WORD **)(a2 + 56);
  v183 = *(unsigned __int8 **)a2;
  v17 = *(_QWORD *)(a2 + 8);
  v176 = *(_QWORD *)(a2 + 16);
  v179 = *(_QWORD *)(a2 + 24);
  v180 = v17;
  v174 = *(_QWORD *)(a3 + 24);
  memcpy(v219, (const void *)(a2 + 40), 0x130uLL);
  BitsPerPixel = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)v219, v18, v19, v20, v21, v22, v23, v24);
  v26 = *(_QWORD *)(a2 + 48);
  v181 = *(_QWORD *)(a2 + 16);
  Type = CGColorSpaceGetType(v13);
  v27 = CGColorSpaceGetType(v12);
  if (TintTransform)
  {
    v189 = v27;
    v35 = *v16;
    if (v35 > 9 || ((1 << v35) & 0x3B6) == 0)
      _CGHandleAssert("convert_deviceN", 4664, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "src_component == kCGPixelComponent1BitInteger || src_component == kCGPixelComponent2BitInteger || src_component == kCGPixelComponent4BitInteger || src_component == kCGPixelComponent8BitInteger || src_component == kCGPixelComponent16BitInteger || src_component == kCGPixelComponent16BitFloat || src_component == kCGPixelComponent32BitFloat", "invalid src component type %u", v32, v33, v34, *v16);
    memset(&v215[34], 0, 32);
    if ((v35 - 7) < 3)
      v36 = 1;
    else
      v36 = v35;
    memset(v215, 0, 272);
    v37 = v35;
    BitsPerComponent = CGPixelComponentGetBitsPerComponent(v36, v28, v29, v30, v31, v32, v33, v34);
    v191 = v37;
    v171 = (_QWORD *)a3;
    if (v36 == (_DWORD)v37)
    {
      v39 = *(unsigned int *)(a2 + 64);
      if ((_DWORD)v39 == 9)
      {
        v39 = 3;
      }
      else if ((_DWORD)v39 == 8)
      {
        v39 = 1;
      }
    }
    else
    {
      v39 = 0;
    }
    v201 = v15;
    v41 = CGBitmapPixelInfoInitialize(v215, (char *)v215, v36, BitsPerComponent, v177, v39, *(unsigned int *)(a2 + 68), 0, *(_QWORD *)(a2 + 80));
    v190 = a2;
    v43 = *(_QWORD *)(a2 + 8);
    v44 = v215[2];
    if ((LODWORD(v215[3]) - 1) >= 9)
    {
      v45 = 0;
      v46 = v215[2] * v43;
    }
    else
    {
      v45 = qword_184F7EB80[LODWORD(v215[3]) - 1];
      v46 = (v45 + v215[2]) * v43;
    }
    v47 = v46 * (v215[1] >> 3);
    v173 = &v169;
    v48 = v191 & 0xFFFFFFFE;
    v42.n128_u32[0] = 1132396544;
    if ((v191 & 0xFFFFFFFE) == 4)
      v42.n128_f32[0] = 1.0;
    if (Type == 5)
      v49 = 65536.0;
    else
      v49 = 65535.0;
    if (v36 == 2)
      v50 = v49;
    else
      v50 = v42.n128_f32[0];
    MEMORY[0x1E0C80A78](v41, v42);
    v172 = (char *)&v169 - v58;
    if ((v59 & 1) != 0)
      goto LABEL_33;
    if (v51 > 0x400)
    {
      v68 = (char *)malloc_type_calloc(v51, 1uLL, 0x53DFBA16uLL);
      v66 = Type;
      v67 = v191;
      v170 = v68;
      if (!v68)
      {
LABEL_33:
        CGPostError((uint64_t)"%s : Unable to allocate", v51, v52, v53, v54, v55, v56, v57, (char)"convert_deviceN");
        return 0;
      }
    }
    else
    {
      LODWORD(v200) = v48;
      v60 = v44;
      v61 = v45;
      v62 = v26;
      v63 = BitsPerPixel;
      v64 = v47;
      v65 = v172;
      bzero(v172, v51);
      v170 = v65;
      v47 = v64;
      BitsPerPixel = v63;
      v26 = v62;
      v45 = v61;
      v44 = v60;
      v48 = v200;
      v66 = Type;
      v67 = v191;
    }
    v178 = v47;
    v169 = a1;
    v69 = 256.0;
    if (v66 != 5)
      v69 = 255.0;
    v70 = 1.0;
    if (v36 == 2)
      v70 = v49;
    v213 = 0u;
    v214 = 0u;
    v211 = 0u;
    v212 = 0u;
    if (v36 == 1)
      v71 = v69;
    else
      v71 = v70;
    v209 = 0uLL;
    v210 = 0uLL;
    if (v66 == 5)
    {
      CGColorSpaceGetLabData((uint64_t)v13, v55, v56, v57, &v209);
      v67 = v191;
      v66 = Type;
    }
    v194 = *(_DWORD *)(v190 + 64);
    _ZF = v194 == 2 || (v194 & 0xFFFFFFFD) == 4;
    v73 = _ZF;
    v74 = v189;
    if (v181)
    {
      v75 = v26;
      v76 = (uint64_t)v202 + (_QWORD)v201;
      v77 = v45 + v44;
      v78 = BitsPerPixel;
      v79 = v194 & 0xFFFFFFFB;
      v80 = v194 - 3 < 0xFFFFFFFE;
      v81 = (uint64_t)v202 + (_QWORD)v201 - 1;
      _ZF = v66 == 5;
      v82 = v66 != 5;
      if (_ZF)
        v83 = 100.0;
      else
        v83 = 1.0;
      v84 = v48 != 4 || v82;
      if (v48 == 4)
        v85 = 0.0;
      else
        v85 = 0.5;
      v86 = v76 == 1 || v194 - 3 < 0xFFFFFFFE;
      v87 = v71;
      v88 = v50;
      if (v77 == 1)
        v80 = 1;
      v187 = v80;
      v188 = v86;
      v195 = (double *)&v205 + 1;
      v185 = 2 * v77;
      v186 = 4 * v77;
      v184 = v78 / v75;
      v182 = v170;
      do
      {
        if (v180)
        {
          v89 = v182;
          v90 = v182;
          v91 = v180;
          v92 = v183;
          v93 = v183;
          v94 = v182;
          v95 = v183;
          do
          {
            v200 = v91;
            memset(v219, 0, 128);
            memset(v218, 0, 96);
            v216 = 0u;
            v217 = 0u;
            if (v76)
            {
              v96 = 0;
              v97 = 0;
              v98 = 0;
              v99 = 1.0;
              v100 = v195;
              v101 = v183;
              while (2)
              {
                v205 = v211;
                v206 = v212;
                v207 = v213;
                v208 = v214;
                v102 = v210;
                v103 = 1.0;
                v203 = v209;
                v204 = v210;
                v104 = 0.0;
                if (v74 == 5)
                {
                  if (v96)
                  {
                    if (v96 <= 2)
                    {
                      v104 = *(v100 - 1);
                      v103 = *v100;
                    }
                  }
                  else
                  {
                    v103 = 100.0;
                  }
                }
                v105 = v99;
                switch(v67)
                {
                  case 1:
                    if (v96)
                      v106 = 0;
                    else
                      v106 = v73;
                    _ZF = v79 == 1;
                    LOBYTE(v102) = v95[v96];
                    goto LABEL_90;
                  case 2:
                    if (v96)
                      v106 = 0;
                    else
                      v106 = v73;
                    _ZF = v79 == 1;
                    LOWORD(v102) = *(_WORD *)&v93[2 * v96];
LABEL_90:
                    _S3 = (float)v102;
                    goto LABEL_103;
                  case 3:
                  case 6:
                    goto LABEL_123;
                  case 4:
                    if (v96)
                      v106 = 0;
                    else
                      v106 = v73;
                    _ZF = v79 == 1;
                    _S3 = *(float *)&v92[4 * v96];
                    goto LABEL_103;
                  case 5:
                    if (v96)
                      v106 = 0;
                    else
                      v106 = v73;
                    _H3 = *(_WORD *)&v93[2 * v96];
                    __asm { FCVT            S3, H3 }
LABEL_103:
                    v109 = v104 + (float)((float)((float)(v103 - v104) * _S3) / v50);
                    goto LABEL_113;
                  case 7:
                    if (!(_DWORD)v97)
                    {
                      v117 = *v101++;
                      v98 = v117 | (v98 << 8);
                      LODWORD(v97) = 8;
                    }
                    v118 = (v97 - 1);
                    if (((v98 >> (v97 - 1)) & 1) != 0)
                      v119 = v104 + (float)((float)((float)(v103 - v104) * 255.0) / v50);
                    else
                      v119 = 0.0;
                    if (v96)
                      v125 = 0;
                    else
                      v125 = v73;
                    v105 = v119;
                    v127 = v79 == 1 && v81 == v96;
                    if ((v125 & 1) != 0)
                    {
                      v97 = v118;
                    }
                    else
                    {
                      v97 = v118;
                      if (!v127)
                      {
LABEL_121:
                        *(double *)&v219[v96] = v105;
                        v97 = v118;
LABEL_122:
                        v105 = v99;
                      }
                    }
LABEL_123:
                    ++v96;
                    v100 += 2;
                    v99 = v105;
                    if (v76 == v96)
                      goto LABEL_154;
                    continue;
                  case 8:
                    if (v97 <= 1)
                    {
                      v108 = *v101++;
                      v98 = v108 | (v98 << 8);
                      LODWORD(v97) = v97 + 8;
                    }
                    v97 = (v97 - 2);
                    if (((v98 >> v97) & 3) != 0)
                      v109 = v104 + (float)((float)((float)(v103 - v104) * (float)(int)(85 * ((v98 >> v97) & 3))) / v50);
                    else
                      v109 = 0.0;
                    if (v96)
                      v106 = 0;
                    else
                      v106 = v73;
                    _ZF = v79 == 1;
LABEL_113:
                    v105 = v109;
                    v121 = _ZF && v81 == v96;
                    if ((v106 & 1) == 0)
                    {
                      v118 = v97;
                      if ((v121 & 1) == 0)
                        goto LABEL_121;
                    }
                    goto LABEL_123;
                  case 9:
                    if (v97 <= 3)
                    {
                      v111 = *v101++;
                      v98 = v111 | (v98 << 8);
                      LODWORD(v97) = v97 + 8;
                    }
                    v97 = (v97 - 4);
                    if (((v98 >> v97) & 0xF) != 0)
                      v112 = v104
                           + (float)((float)((float)(v103 - v104)
                                           * (float)(int)((v98 >> v97) & 0xF | (16 * ((v98 >> v97) & 0xF))))
                                   / v50);
                    else
                      v112 = 0.0;
                    if (v96)
                      v122 = 0;
                    else
                      v122 = v73;
                    v105 = v112;
                    v124 = v79 == 1 && v81 == v96;
                    if ((v122 & 1) != 0)
                      goto LABEL_123;
                    v118 = v97;
                    if (v124)
                      goto LABEL_123;
                    goto LABEL_121;
                  default:
                    goto LABEL_122;
                }
              }
            }
            v105 = 1.0;
LABEL_154:
            if (!v188)
            {
              v128 = (double *)v219;
              v129 = v76 - 1;
              do
              {
                if (v105 == 0.0)
                {
                  *v128 = 0.0;
                }
                else if (v105 != 1.0)
                {
                  *v128 = *v128 / v105;
                }
                ++v128;
                --v129;
              }
              while (v129);
            }
            v196 = v95;
            v197 = v94;
            v198 = v93;
            v199 = v92;
            v201 = v90;
            v202 = v89;
            v130 = *(_QWORD *)(v190 + 80);
            if (v130)
            {
              if (v194 <= 6 && ((1 << v194) & 0x54) != 0 || (v131 = v76, v79 == 1))
                v131 = v76 - 1;
              if (v131)
              {
                v132 = (double *)(v130 + 8);
                v133 = (double *)v219;
                do
                {
                  v134 = *(v132 - 1);
                  v135 = *v132;
                  v136 = (*v133 - v134) / (float)(v135 - v134) + 0.0;
                  if (v136 < 1.0)
                    v137 = v136;
                  else
                    v137 = 1.0;
                  v138 = v137;
                  v139 = v138;
                  if (v136 >= 0.0)
                    v140 = v139;
                  else
                    v140 = 0.0;
                  *v133++ = v140;
                  v132 += 2;
                  --v131;
                }
                while (v131);
              }
            }
            CGFunctionEvaluate(TintTransform, (char *)v219, (double *)&v216);
            v141 = Type;
            v143 = v201;
            v142 = v202;
            v145 = v198;
            v144 = v199;
            v147 = v196;
            v146 = v197;
            if (!v187)
            {
              v148 = (double *)&v216;
              v149 = v77 - 1;
              do
              {
                if (v105 == 0.0)
                {
                  *v148 = 0.0;
                }
                else if (v105 != 1.0)
                {
                  *v148 = v105 * *v148;
                }
                ++v148;
                --v149;
              }
              while (v149);
            }
            v67 = v191;
            v74 = v189;
            if (v77)
            {
              v150 = 0;
              v151 = v105 * v87 + v85;
              v152 = v151;
              if (v151 > v88)
                v152 = v50;
              if (v151 >= 0.0)
                v153 = v152;
              else
                v153 = 0.0;
              v154 = v142;
              v155 = v195;
              do
              {
                if (v150)
                  v156 = 0;
                else
                  v156 = v73;
                if (v79 == 1 && v77 - 1 == v150)
                  v156 = 1;
                if ((v84 & 1) != 0)
                {
                  _S2 = v153;
                  if ((v156 & 1) == 0)
                  {
                    v205 = v211;
                    v206 = v212;
                    v207 = v213;
                    v208 = v214;
                    v159 = 0.0;
                    v203 = v209;
                    v204 = v210;
                    if (v141 == 5 && v150)
                    {
                      v160 = 1.0;
                      if (v150 <= 2)
                      {
                        v159 = *(v155 - 1);
                        v160 = *v155;
                      }
                    }
                    else
                    {
                      v160 = v83;
                    }
                    v161 = (*((double *)&v216 + v150) - v159) * v87 / (float)(v160 - v159) + v85;
                    v162 = v161;
                    if (v161 > v88)
                      v162 = v50;
                    if (v161 >= 0.0)
                      _S2 = v162;
                    else
                      _S2 = 0.0;
                  }
                }
                else
                {
                  _S2 = v105;
                  if ((v156 & 1) == 0)
                    _S2 = *((double *)&v216 + v150);
                }
                switch(v36)
                {
                  case 1:
                    v146[v150] = (int)_S2;
                    break;
                  case 2:
                    *v154 = (int)_S2;
                    break;
                  case 4:
                    *(float *)&v143[4 * v150] = _S2;
                    break;
                  case 5:
                    __asm { FCVT            H2, S2 }
                    *v154 = _H2;
                    break;
                }
                ++v150;
                v155 += 2;
                ++v154;
              }
              while (v77 != v150);
            }
            v95 = &v147[v184];
            v94 = &v146[v77];
            v93 = &v145[2 * v184];
            v90 = &v143[v186];
            v92 = &v144[4 * v184];
            v89 = &v142[(unint64_t)v185 / 2];
            v91 = v200 - 1;
          }
          while (v200 != 1);
        }
        v183 += v179;
        --v181;
        v182 += v178;
      }
      while (v181);
    }
    v219[4] = 0;
    v218[0] = 0;
    v164 = v170;
    v219[0] = v170;
    v219[1] = v180;
    v219[2] = v176;
    v219[3] = v178;
    memcpy(&v219[5], v215, 0x130uLL);
    v219[10] = 0;
    v219[7] = v177;
    LODWORD(v219[4]) = *(_DWORD *)(v169 + 84);
    *(_QWORD *)&v216 = *v171;
    *((_QWORD *)&v216 + 1) = v180;
    *(_QWORD *)&v217 = v176;
    *((_QWORD *)&v217 + 1) = v174;
    memcpy(&v218[1], v171 + 5, 0x130uLL);
    LODWORD(v218[0]) = v219[4];
    v165 = *(uint64_t (**)(uint64_t, _QWORD *, __int128 *, __int128 *))(v169 + 104);
    v166 = *(_OWORD *)(v175 + 48);
    v205 = *(_OWORD *)(v175 + 32);
    v206 = v166;
    v207 = *(_OWORD *)(v175 + 64);
    *(_QWORD *)&v208 = *(_QWORD *)(v175 + 80);
    v167 = *(_OWORD *)(v175 + 16);
    v203 = *(_OWORD *)v175;
    v204 = v167;
    v40 = v165(v169, v219, &v216, &v203);
    if (v164 != v172)
      free(v164);
  }
  else
  {
    CGPostError((uint64_t)"%s : Unable to complete color conversion", v28, v29, v30, v31, v32, v33, v34, (char)"convert_deviceN");
    return 0;
  }
  return v40;
}

uint64_t deviceN_converter_info@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t BitsPerComponent;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  vImage_Error *v29;
  _BYTE v30[344];
  _BYTE __dst[344];
  _QWORD __src[43];

  __src[4] = 0;
  v13 = *(_DWORD *)(a2 + 40);
  v14 = *(_QWORD *)(a1 + 32);
  if (v14)
    v15 = *(_QWORD *)(*(_QWORD *)(v14 + 24) + 40);
  else
    v15 = 0;
  if (v13 - 7 < 3)
    v16 = 1;
  else
    v16 = v13;
  BitsPerComponent = CGPixelComponentGetBitsPerComponent(v16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  if ((_DWORD)v16 == v13)
  {
    v21 = *(_DWORD *)(a2 + 64);
    if (v21 == 8)
      v22 = 1;
    else
      v22 = *(_DWORD *)(a2 + 64);
    if (v21 == 9)
      v23 = 3;
    else
      v23 = v22;
  }
  else
  {
    v23 = 0;
  }
  if (BitsPerComponent - 33 <= 0xFFFFFFFFFFFFFFDFLL)
    _CGHandleAssert("CGBitmapPixelInfoInitialize", 56, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGBitmapPixelInfo.c", "bits_per_component > 0 && bits_per_component <= 32", "bpc: %zu", v18, v19, v20, BitsPerComponent);
  v24 = *(_DWORD *)(a2 + 68);
  if ((v23 - 1) > 8)
    v25 = 0;
  else
    v25 = qword_184F7EB80[v23 - 1];
  v26 = *(_QWORD *)a2;
  v27 = (v25 + v15) * *(_QWORD *)(a2 + 8);
  *(_OWORD *)&__src[1] = *(_OWORD *)(a2 + 8);
  __src[0] = v26;
  __src[3] = v27 * (BitsPerComponent >> 3);
  __src[5] = v16;
  __src[6] = BitsPerComponent;
  __src[7] = v15;
  __src[8] = __PAIR64__(v24, v23);
  memset(&__src[9], 0, 272);
  LODWORD(__src[4]) = *(_DWORD *)(a1 + 84);
  *(_OWORD *)(a9 + 8) = 0u;
  *(_OWORD *)(a9 + 24) = 0u;
  *(_OWORD *)(a9 + 40) = 0u;
  *(_OWORD *)(a9 + 56) = 0u;
  *(_OWORD *)(a9 + 72) = 0u;
  result = (uint64_t)CGCMSConverterCreateCachedCGvImageConverter((_QWORD *)a1, __src, a3);
  *(_QWORD *)a9 = result;
  if (result)
  {
    v29 = (vImage_Error *)result;
    memcpy(__dst, __src, sizeof(__dst));
    memcpy(v30, a3, sizeof(v30));
    result = CGvImageConverterGetBufferSize(v29, (uint64_t)__dst, (uint64_t)v30);
    *(_QWORD *)(a9 + 16) = result;
  }
  return result;
}

void post_conversion_error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CGPostError((uint64_t)"%s - failed width = %d height = %d dst component = %s dstLayout = %s dstBytesPerRow = %d src component = %s srcLayout = %s srcBytesPerRow = %d", a2, a3, a4, a5, a6, a7, a8, a3);
}

uint64_t convert_indexed_float16(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t BitsPerPixel;
  BOOL v13;
  uint64_t CGPixelComponentType;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  float v55;
  float v65;
  uint64_t v79;
  uint64_t v80;
  __int128 v82[6];
  uint64_t pixel_ptr;
  unsigned __int8 v84;
  __int16 v85;
  uint64_t i;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int16 *v90;
  uint64_t v91;
  float v92;
  float v93;
  _OWORD __b[6];
  unsigned int Type;
  _DWORD v96[76];
  unsigned int v97;
  int v98;
  unsigned __int8 v99;
  uint64_t v100;
  uint64_t v101;
  _BYTE v102[304];
  unint64_t v103;
  _BYTE v104[304];
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int16 *v108;
  uint64_t v109;
  uint64_t v110;
  _DWORD v111[76];
  _QWORD v112[38];
  _BYTE v113[304];
  _DWORD v114[76];
  _QWORD v115[38];
  _BYTE __dst[304];
  double v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  char v122;

  v121 = a1;
  v120 = a2;
  v119 = a3;
  v118 = a4;
  v117 = a5;
  memcpy(__dst, (const void *)(a2 + 40), sizeof(__dst));
  BitsPerPixel = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v5, v6, v7, v8, v9, v10, v11);
  v13 = 0;
  if (BitsPerPixel == 16)
  {
    memcpy(v115, (const void *)(v120 + 40), sizeof(v115));
    CGPixelComponentType = CGBitmapPixelInfoGetCGPixelComponentType(v115[1]);
    v13 = 0;
    if (CGPixelComponentType == 16)
    {
      memcpy(v114, (const void *)(v120 + 40), sizeof(v114));
      v13 = CGBitmapPixelInfoGetCGPixelComponentType(v114[0]) == 5;
    }
  }
  if (!v13)
  {
    memcpy(v113, (const void *)(v120 + 40), sizeof(v113));
    v22 = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)v113, v15, v16, v17, v18, v19, v20, v21);
    memcpy(v112, (const void *)(v120 + 40), sizeof(v112));
    CGBitmapPixelInfoGetCGPixelComponentType(v112[1]);
    memcpy(v111, (const void *)(v120 + 40), sizeof(v111));
    CGBitmapPixelInfoGetCGPixelComponentType(v111[0]);
    _CGHandleAssert("convert_indexed_float16", 4346, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "CGBitmapPixelInfoGetBitsPerPixel(src->pixel_info) == 16 && CGBitmapPixelInfoGetBitsPerComponent(src->pixel_info) == 16 && CGBitmapPixelInfoGetCGPixelComponentType(src->pixel_info) == kCGPixelComponent16BitFloat", "bpp %lu  bpc %lu  type %u", v23, v24, v25, v22);
  }
  if (!v118)
    v118 = *(_QWORD *)(v121 + 216);
  v110 = 0;
  v110 = *(_QWORD *)(v120 + 8);
  v109 = 0;
  v109 = *(_QWORD *)(v120 + 16);
  v108 = 0;
  v108 = *(__int16 **)v120;
  v107 = 0;
  v107 = *v119;
  v106 = 0;
  v106 = *(_QWORD *)(v121 + 40);
  v105 = 0;
  memcpy(v104, (const void *)(v120 + 40), sizeof(v104));
  v105 = (unint64_t)CGBitmapPixelInfoGetBitsPerPixel((uint64_t)v104, v26, v27, v28, v29, v30, v31, v32) >> 4;
  v103 = 0;
  memcpy(v102, v119 + 5, sizeof(v102));
  v103 = (unint64_t)CGBitmapPixelInfoGetBitsPerPixel((uint64_t)v102, v33, v34, v35, v36, v37, v38, v39) >> 4;
  v101 = 0;
  v101 = *(_QWORD *)(v120 + 24);
  v100 = 0;
  v100 = v119[3];
  v99 = 0;
  v99 = *(_DWORD *)(v121 + 208) - 1;
  if (v118)
  {
    v97 = 0;
    memcpy(v96, v119 + 5, sizeof(v96));
    v97 = CGBitmapPixelInfoGetCGPixelComponentType(v96[0]);
    v50 = 1;
    if (v97 != 1)
    {
      v50 = 1;
      if (v97 != 2)
      {
        v50 = 1;
        if (v97 != 5)
          v50 = v97 == 4;
      }
    }
    if (!v50)
      _CGHandleAssert("convert_indexed_float16", 4371, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "dst_component == kCGPixelComponent8BitInteger || dst_component == kCGPixelComponent16BitInteger || dst_component == kCGPixelComponent16BitFloat || dst_component == kCGPixelComponent32BitFloat", "invalid destination component type %u", v47, v48, v49, v97);
    Type = 0;
    Type = CGColorSpaceGetType(*(_QWORD **)(v121 + 24));
    memset(__b, 0, sizeof(__b));
    if (Type == 5)
      CGColorSpaceGetLabData(*(_QWORD *)(v121 + 24), v51, v52, v53, __b);
    else
      memset(__b, 0, sizeof(__b));
    v93 = 0.0;
    v54 = 256.0;
    if (Type != 5)
      v54 = 255.0;
    v93 = v54;
    v55 = v117;
    v92 = v55;
    while (v109--)
    {
      v91 = v110;
      v90 = v108;
      v89 = v107;
      v88 = v107;
      v87 = v107;
      for (i = v107; v91--; increment_dest_pointer(v97, &v89, &v88, &v87, &i, v103, v79, v80))
      {
        v85 = 0;
        _H0 = *v90;
        __asm { FCVT            S0, H0 }
        _S0 = _S0 * 255.0;
        __asm { FCVT            H0, S0 }
        v85 = LOWORD(_S0);
        if (v92 != 1.0)
        {
          v65 = **(double **)(v120 + 80);
          _H1 = v85;
          __asm { FCVT            S1, H1 }
          _S0 = v65 + (float)((float)(_S1 * v92) + 0.5);
          __asm { FCVT            H0, S0 }
          v85 = LOWORD(_S0);
        }
        _H0 = v85;
        __asm { FCVT            S0, H0 }
        if (_S0 <= 0.0)
        {
          _S0 = 0.0;
        }
        else
        {
          _H0 = v85;
          __asm { FCVT            S0, H0 }
        }
        if (_S0 <= 255.0)
        {
          _H0 = v85;
          __asm { FCVT            S0, H0 }
          if (_S0 <= 0.0)
          {
            _S0 = 0;
          }
          else
          {
            _H0 = v85;
            __asm { FCVT            S0, H0 }
          }
        }
        else
        {
          _S0 = 1132396544;
        }
        __asm { FCVT            H0, S0 }
        v85 = _H0;
        __asm { FCVT            S0, H0 }
        v84 = (int)_S0;
        pixel_ptr = 0;
        pixel_ptr = get_pixel_ptr(v118, v84, v99, v106);
        memcpy(v82, __b, sizeof(v82));
        write_out_pixel(v97, v89, v88, v87, i, pixel_ptr, Type, v82, v93, v106);
        v90 += v105;
      }
      v108 = (__int16 *)((char *)v108 + v101);
      v107 += v100;
    }
    v122 = 1;
    v98 = 1;
  }
  else
  {
    CGPostError((uint64_t)"%s : Unable to complete color conversion", v40, v41, v42, v43, v44, v45, v46, (char)"convert_indexed_float16");
    v122 = 0;
    v98 = 1;
  }
  return v122 & 1;
}

uint64_t get_pixel_ptr(uint64_t a1, int a2, int a3, uint64_t a4)
{
  return a1 + (((a3 - a2) & ((a3 - a2) >> 31)) + a2) * a4;
}

uint64_t write_out_pixel(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __int128 *a8, float a9, uint64_t a10)
{
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  float v15;
  float v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  float v20;
  float v21;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  if (a10)
  {
    v10 = 0;
    v11 = 32;
    do
    {
      switch((int)result)
      {
        case 1:
          *(_BYTE *)(a2 + v10) = *(_BYTE *)(a6 + v10);
          break;
        case 2:
          *(_WORD *)(a3 + 2 * v10) = *(unsigned __int8 *)(a6 + v10) | (*(unsigned __int8 *)(a6 + v10) << 8);
          break;
        case 4:
          v12 = a8[3];
          v29 = a8[2];
          v30 = v12;
          v13 = a8[5];
          v31 = a8[4];
          v32 = v13;
          v14 = a8[1];
          v15 = 1.0;
          v27 = *a8;
          v28 = v14;
          v16 = 0.0;
          if ((_DWORD)a7 == 5)
          {
            if (v10)
            {
              if (v10 <= 2)
              {
                v16 = *(double *)((char *)&v27 + v11);
                v15 = *(double *)((char *)&v27 + v11 + 8);
              }
            }
            else
            {
              v15 = 100.0;
            }
          }
          LOBYTE(v14) = *(_BYTE *)(a6 + v10);
          *(float *)(a5 + 4 * v10) = v16 + (float)((float)((float)(v15 - v16) * (float)v14) / a9);
          break;
        case 5:
          v17 = a8[3];
          v29 = a8[2];
          v30 = v17;
          v18 = a8[5];
          v31 = a8[4];
          v32 = v18;
          v19 = a8[1];
          v20 = 1.0;
          v27 = *a8;
          v28 = v19;
          v21 = 0.0;
          if ((_DWORD)a7 == 5)
          {
            if (v10)
            {
              if (v10 <= 2)
              {
                v21 = *(double *)((char *)&v27 + v11);
                v20 = *(double *)((char *)&v27 + v11 + 8);
              }
            }
            else
            {
              v20 = 100.0;
            }
          }
          LOBYTE(v19) = *(_BYTE *)(a6 + v10);
          _S1 = v21 + (float)((float)((float)(v20 - v21) * (float)v19) / a9);
          __asm { FCVT            H1, S1 }
          *(_WORD *)(a4 + 2 * v10) = LOWORD(_S1);
          break;
        default:
          _CGHandleAssert("write_out_pixel", 3952, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "0", "unhandled component type %u", a6, a7, (uint64_t)a8, result);
      }
      ++v10;
      v11 += 16;
    }
    while (a10 != v10);
  }
  return result;
}

uint64_t increment_dest_pointer(uint64_t result, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch((int)result)
  {
    case 1:
      *a2 += a6;
      break;
    case 2:
      *a3 += a6 & 0xFFFFFFFFFFFFFFFELL;
      break;
    case 4:
      *a5 += a6 & 0xFFFFFFFFFFFFFFFCLL;
      break;
    case 5:
      *a4 += a6 & 0xFFFFFFFFFFFFFFFELL;
      break;
    default:
      _CGHandleAssert("increment_dest_pointer", 4101, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "0", "unhandled component type %u", a6, a7, a8, result);
  }
  return result;
}

uint64_t colorsync_alpha_info_from_conversion_format(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;

  v8 = *(_DWORD *)(a1 + 64);
  if (v8 == 9)
  {
    v8 = 3;
  }
  else if (v8 == 8)
  {
    v8 = 1;
  }
  else if (v8 >= 7)
  {
    CGPostError((uint64_t)"%s : Unable to complete color conversion", a2, a3, a4, a5, a6, a7, a8, (char)"colorsync_alpha_info_from_conversion_format");
    return 0;
  }
  return dword_184F732A0[v8];
}

const __CFDictionary *converter_does_tone_mapping(uint64_t a1)
{
  const __CFDictionary *result;

  result = *(const __CFDictionary **)(a1 + 72);
  if (result)
  {
    if (CFDictionaryContainsKey(result, CFSTR("kCGColorConversionInfoOptions")))
      return (const __CFDictionary *)1;
    else
      return (const __CFDictionary *)(CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 72), CFSTR("kCGImageExtendedRangeToneMappingInfo")) != 0);
  }
  return result;
}

uint64_t (*__convert_using_colorsync_transform_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncTransformConvert");
  v1 = colorsync_smart_null_1997;
  if (result)
    v1 = result;
  convert_using_colorsync_transform_f = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v1;
  return result;
}

uint64_t colorsync_smart_null_1997()
{
  return 0;
}

const void *__use_colorsync_for_flexTRC_from_defaults_block_invoke()
{
  return get_BOOLean_property("USE_COLORSYNC_FOR_FLEXTRC", (const void *(*)(const char *))copy_local_domain_value, (BOOL *)&use_colorsync_for_flexTRC_from_defaults_status);
}

const void *__use_colorsync_for_flexLuma_from_defaults_block_invoke()
{
  return get_BOOLean_property("USE_COLORSYNC_FOR_FLEXTRC", (const void *(*)(const char *))copy_local_domain_value, (BOOL *)&use_colorsync_for_flexLuma_from_defaults_status);
}

const void *__use_colorsync_for_reference_white_tone_mapping_from_defaults_block_invoke()
{
  return get_BOOLean_property("USE_COLORSYNC_FOR_REFERENCE_WHITE_TONEMAPPING", (const void *(*)(const char *))copy_local_domain_value, (BOOL *)&use_colorsync_for_reference_white_tone_mapping_from_defaults_status);
}

const void *__use_colorsync_for_exr_gamma_tone_mapping_from_defaults_block_invoke()
{
  return get_BOOLean_property("USE_COLORSYNC_FOR_EXR_TONEMAPPING", (const void *(*)(const char *))copy_local_domain_value, (BOOL *)&use_colorsync_for_exr_gamma_tone_mapping_from_defaults_status);
}

const void *__use_colorsync_for_scene_referred_tone_mapping_from_defaults_block_invoke()
{
  return get_BOOLean_property("USE_COLORSYNC_FOR_DISPLAY_REFERRED_TONEMAPPING", (const void *(*)(const char *))copy_local_domain_value, (BOOL *)&use_colorsync_for_scene_referred_tone_mapping_from_defaults_status);
}

const void *__use_colorsync_for_display_referred_tone_mapping_from_defaults_block_invoke()
{
  return get_BOOLean_property("USE_COLORSYNC_FOR_DISPLAY_REFERRED_TONEMAPPING", (const void *(*)(const char *))copy_local_domain_value, (BOOL *)&use_colorsync_for_display_referred_tone_mapping_from_defaults_status);
}

const void *__use_colorsync_for_hdr_from_defaults_block_invoke()
{
  return get_BOOLean_property("USE_COLORSYNC_FOR_HDR", (const void *(*)(const char *))copy_local_domain_value, (BOOL *)&use_colorsync_for_hdr_from_defaults_status);
}

void Lab_to_rgb(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t BitsPerPixel;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64x2_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float32x2_t v45;
  float v46;
  float __dst[76];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = a2 + 5;
  v5 = *a2;
  memcpy(__dst, a1 + 5, sizeof(__dst));
  BitsPerPixel = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v6, v7, v8, v9, v10, v11, v12);
  memcpy(__dst, v4, sizeof(__dst));
  v21 = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v14, v15, v16, v17, v18, v19, v20);
  v22 = a1[2];
  if (v22)
  {
    v23 = 0;
    v24 = a1[6];
    v25 = BitsPerPixel >> 3;
    v26 = v21 >> 3;
    v27 = a1[1];
    __asm { FMOV            V0.2D, #0.5 }
    v43 = (float64x2_t)vdupq_n_s64(0x40EFFFE000000000uLL);
    v44 = _Q0;
    v33 = vdupq_n_s64(0x406FE00000000000uLL);
    v42 = (float64x2_t)v33;
    do
    {
      if (v27)
      {
        v34 = 0;
        v35 = v5;
        v36 = v3;
        do
        {
          switch(v24)
          {
            case 32:
              pixel_Lab_to_rgb((float *)v35, (float *)v36);
              break;
            case 16:
              v33.i16[0] = *(_WORD *)v36;
              v39 = *(unsigned __int8 *)(v36 + 3) - 128;
              __dst[0] = (float)((float)v33.u32[0] * 100.0) / 65535.0;
              __dst[1] = (float)v39;
              __dst[2] = (float)v39;
              pixel_Lab_to_rgb((float *)&v45, __dst);
              *(int32x2_t *)v33.i8 = vmax_s32(vmin_s32(vmovn_s64(vcvtq_s64_f64(vmlaq_f64(v44, v43, vcvtq_f64_f32(v45)))), (int32x2_t)0xFF000000FFLL), 0);
              *(_WORD *)(v35 + 2) = v33.i16[2];
              *(_WORD *)v35 = v33.i16[0];
              *(double *)v33.i64 = v46 * 65535.0 + 0.5;
              v40 = (int)*(double *)v33.i64;
              if ((int)*(double *)v33.i64 >= 255)
                v40 = 255;
              *(_WORD *)(v35 + 4) = v40 & ~(unsigned __int16)(v40 >> 31);
              break;
            case 8:
              v33.i8[0] = *(_BYTE *)v36;
              v37 = *(unsigned __int8 *)(v36 + 1) - 128;
              __dst[0] = (float)((float)v33.u32[0] * 100.0) / 255.0;
              __dst[1] = (float)v37;
              __dst[2] = (float)v37;
              pixel_Lab_to_rgb((float *)&v45, __dst);
              *(int32x2_t *)v33.i8 = vmax_s32(vmin_s32(vmovn_s64(vcvtq_s64_f64(vmlaq_f64(v44, v42, vcvtq_f64_f32(v45)))), (int32x2_t)0xFF000000FFLL), 0);
              *(_BYTE *)(v35 + 1) = v33.i8[4];
              *(_BYTE *)v35 = v33.i8[0];
              *(double *)v33.i64 = v46 * 255.0 + 0.5;
              v38 = (int)*(double *)v33.i64;
              if ((int)*(double *)v33.i64 >= 255)
                v38 = 255;
              *(_BYTE *)(v35 + 2) = v38 & ~(v38 >> 31);
              break;
          }
          v36 += v25;
          v35 += v26;
          ++v34;
          v27 = a1[1];
        }
        while (v34 < v27);
        v22 = a1[2];
      }
      v3 += a1[3];
      v5 += a2[3];
      ++v23;
    }
    while (v23 < v22);
  }
}

unint64_t rgb_to_gray(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  const void *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t BitsPerPixel;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t result;
  double v23;
  double v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  float *v31;
  _DWORD *v32;
  unint64_t v33;
  double v34;
  int v35;
  unint64_t v36;
  double v37;
  int v38;
  _BYTE v39[304];

  v4 = *a1;
  v5 = a2 + 5;
  v6 = (_DWORD *)*a2;
  memcpy(v39, a1 + 5, sizeof(v39));
  BitsPerPixel = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)v39, v7, v8, v9, v10, v11, v12, v13);
  memcpy(v39, v5, sizeof(v39));
  result = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)v39, v15, v16, v17, v18, v19, v20, v21);
  v25 = a1[2];
  if (v25)
  {
    v26 = 0;
    v27 = a1[6];
    v28 = a1[1];
    v29 = v28;
    do
    {
      if (v29)
      {
        v30 = 0;
        v31 = (float *)(v4 + 4);
        v32 = v6;
        do
        {
          switch(v27)
          {
            case 32:
              v24 = v31[1];
              v23 = *v31 * 0.59 + *(v31 - 1) * 0.3 + v24 * 0.11;
              *(float *)&v23 = v23;
              if (*(float *)&v23 <= 1.0)
                *(float *)&v24 = *(float *)&v23;
              else
                *(float *)&v24 = 1.0;
              if (*(float *)&v23 >= 0.0)
                *(float *)&v23 = *(float *)&v24;
              else
                *(float *)&v23 = 0.0;
              *v32 = LODWORD(v23);
              break;
            case 16:
              LOWORD(v23) = *((_WORD *)v31 - 2);
              LOWORD(v24) = *((_WORD *)v31 - 1);
              *(double *)&v36 = (double)*(unint64_t *)&v24 * 0.59;
              v37 = *(double *)&v36 + (double)*(unint64_t *)&v23 * 0.3;
              LOWORD(v36) = *(_WORD *)v31;
              v24 = (double)v36;
              v23 = v37 + v24 * 0.11;
              v38 = v23;
              if ((int)v23 >= 255)
                v38 = 255;
              *(_WORD *)v32 = v38 & ~(unsigned __int16)(v38 >> 31);
              break;
            case 8:
              LOBYTE(v23) = *((_BYTE *)v31 - 4);
              LOBYTE(v24) = *((_BYTE *)v31 - 3);
              *(double *)&v33 = (double)*(unint64_t *)&v24 * 0.59;
              v34 = *(double *)&v33 + (double)*(unint64_t *)&v23 * 0.3;
              LOBYTE(v33) = *((_BYTE *)v31 - 2);
              v24 = (double)v33;
              v23 = v34 + v24 * 0.11;
              v35 = v23;
              if ((int)v23 >= 255)
                v35 = 255;
              *(_BYTE *)v32 = v35 & ~(v35 >> 31);
              v28 = a1[1];
              break;
          }
          v32 = (_DWORD *)((char *)v32 + (result >> 3));
          ++v30;
          v31 = (float *)((char *)v31 + (BitsPerPixel >> 3));
        }
        while (v30 < v28);
        v25 = a1[2];
        v29 = v28;
      }
      v4 += a1[3];
      v6 = (_DWORD *)((char *)v6 + a2[3]);
      ++v26;
    }
    while (v26 < v25);
  }
  return result;
}

unint64_t rgb_to_cmyk(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t BitsPerPixel;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t result;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  float *v30;
  float *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned __int8 v34;
  int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  int v40;
  int v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  _BYTE v64[304];

  v4 = *a1;
  v5 = a2 + 5;
  v6 = *a2;
  memcpy(v64, a1 + 5, sizeof(v64));
  BitsPerPixel = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)v64, v7, v8, v9, v10, v11, v12, v13);
  memcpy(v64, v5, sizeof(v64));
  result = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)v64, v15, v16, v17, v18, v19, v20, v21);
  v23 = a1[2];
  if (v23)
  {
    v24 = 0;
    v25 = a1[6];
    v26 = result >> 3;
    v27 = a1[1];
    v28 = v27;
    do
    {
      if (v28)
      {
        v29 = 0;
        v30 = (float *)(v6 + 12);
        v31 = (float *)(v4 + 4);
        do
        {
          switch(v25)
          {
            case 32:
              v42 = 1.0 - *(v31 - 1);
              v43 = 1.0 - *v31;
              v44 = 1.0 - v31[1];
              if (v43 <= v44)
                v45 = 1.0 - *v31;
              else
                v45 = 1.0 - v31[1];
              if (v42 <= v44)
                v44 = 1.0 - *(v31 - 1);
              if (v42 <= v43)
                v46 = v44;
              else
                v46 = v45;
              if (v42 <= 1.0)
                v47 = 1.0 - *(v31 - 1);
              else
                v47 = 1.0;
              if (v42 >= 0.0)
                v48 = v47;
              else
                v48 = 0.0;
              v49 = v48 - v46;
              if (v49 <= 1.0)
                v50 = v49;
              else
                v50 = 1.0;
              if (v49 >= 0.0)
                v51 = v50;
              else
                v51 = 0.0;
              *(v30 - 3) = v51;
              v52 = 1.0 - *v31;
              if (v52 <= 1.0)
                v53 = 1.0 - *v31;
              else
                v53 = 1.0;
              if (v52 >= 0.0)
                v54 = v53;
              else
                v54 = 0.0;
              v55 = v54 - v46;
              if (v55 <= 1.0)
                v56 = v55;
              else
                v56 = 1.0;
              if (v55 >= 0.0)
                v57 = v56;
              else
                v57 = 0.0;
              *(v30 - 2) = v57;
              v58 = 1.0 - v31[1];
              if (v58 <= 1.0)
                v59 = 1.0 - v31[1];
              else
                v59 = 1.0;
              if (v58 >= 0.0)
                v60 = v59;
              else
                v60 = 0.0;
              v61 = v60 - v46;
              if (v61 <= 1.0)
                v62 = v61;
              else
                v62 = 1.0;
              if (v61 >= 0.0)
                v63 = v62;
              else
                v63 = 0.0;
              *(v30 - 1) = v63;
              *v30 = v46;
              break;
            case 16:
              v37 = *((unsigned __int16 *)v31 - 2);
              v38 = *((unsigned __int16 *)v31 - 1);
              if (v38 <= v37)
                v38 = *((unsigned __int16 *)v31 - 2);
              if (v38 <= *(unsigned __int16 *)v31)
                v38 = *(unsigned __int16 *)v31;
              result = ~v38;
              v39 = v37 ^ 0xFFFF;
              if (v39 >= 255)
                v39 = 255;
              *((_WORD *)v30 - 6) = (v39 - result) & ~(unsigned __int16)((v39 - (unsigned __int16)result) >> 31);
              v40 = *((unsigned __int16 *)v31 - 1) ^ 0xFFFF;
              if (v40 >= 255)
                v40 = 255;
              *((_WORD *)v30 - 5) = (v40 - result) & ~(unsigned __int16)((v40 - (unsigned __int16)result) >> 31);
              v41 = *(unsigned __int16 *)v31 ^ 0xFFFF;
              if (v41 >= 255)
                v41 = 255;
              *((_WORD *)v30 - 4) = (v41 - result) & ~(unsigned __int16)((v41 - (unsigned __int16)result) >> 31);
              *((_WORD *)v30 - 3) = result;
              break;
            case 8:
              v32 = *((unsigned __int8 *)v31 - 4);
              v33 = *((unsigned __int8 *)v31 - 3);
              result = *((unsigned __int8 *)v31 - 2);
              if (v33 <= v32)
                v33 = *((unsigned __int8 *)v31 - 4);
              if (v33 <= result)
                LOBYTE(v33) = *((_BYTE *)v31 - 2);
              v34 = ~(_BYTE)v33;
              *((_BYTE *)v30 - 12) = (~(_BYTE)v32 - v34) & ~((int)((v32 ^ 0xFF) - v34) >> 31);
              v35 = (*((unsigned __int8 *)v31 - 3) ^ 0xFF) - v34;
              *((_BYTE *)v30 - 11) = v35 & ~(v35 >> 31);
              v36 = (*((unsigned __int8 *)v31 - 2) ^ 0xFF) - v34;
              *((_BYTE *)v30 - 10) = v36 & ~(v36 >> 31);
              *((_BYTE *)v30 - 9) = v34;
              v27 = a1[1];
              break;
          }
          ++v29;
          v30 = (float *)((char *)v30 + v26);
          v31 = (float *)((char *)v31 + (BitsPerPixel >> 3));
        }
        while (v29 < v27);
        v23 = a1[2];
        v28 = v27;
      }
      v4 += a1[3];
      v6 += a2[3];
      ++v24;
    }
    while (v24 < v23);
  }
  return result;
}

void pixel_Lab_to_rgb(float *a1, float *a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;

  v3 = (*a2 + 16.0) / 116.0;
  v4 = v3 + (float)(a2[1] * 0.002);
  v5 = v3 + (float)(a2[2] * -0.005);
  if (v4 <= 0.0008856)
    v6 = (float)(v4 + -0.13793) * 0.12842;
  else
    v6 = v4 * (float)(v4 * v4);
  v7 = (float)(v3 * v3) * v3;
  if (v3 <= 0.0008856)
    v7 = (float)(v3 + -0.13793) * 0.12842;
  v8 = v5 * (float)(v5 * v5);
  if (v5 <= 0.0008856)
    v8 = (float)(v5 + -0.13793) * 0.12842;
  v9 = v6 * 0.9642;
  v10 = (float)((float)(v7 * 1.9163) + (float)(v9 * -0.97879)) + (float)((float)(v8 * 0.8249) * 0.033455);
  v11 = (float)((float)(v7 * -0.22899) + (float)(v9 * 0.071983)) + (float)((float)(v8 * 0.8249) * 1.4054);
  v12 = powf((float)((float)(v7 * -1.6174) + (float)(v9 * 3.1341)) + (float)((float)(v8 * 0.8249) * -0.49063), 0.45455);
  if (v12 <= 1.0)
    v13 = v12;
  else
    v13 = 1.0;
  if (v12 >= 0.0)
    v14 = v13;
  else
    v14 = 0.0;
  *a1 = v14;
  v15 = powf(v10, 0.45455);
  if (v15 <= 1.0)
    v16 = v15;
  else
    v16 = 1.0;
  if (v15 >= 0.0)
    v17 = v16;
  else
    v17 = 0.0;
  a1[1] = v17;
  v18 = powf(v11, 0.45455);
  if (v18 <= 1.0)
    v19 = v18;
  else
    v19 = 1.0;
  if (v18 >= 0.0)
    v20 = v19;
  else
    v20 = 0.0;
  a1[2] = v20;
}

char *create_gray_to_RGBX8_texture(const __CFData *a1, uint64_t a2)
{
  uint64_t v2;
  char *v4;
  const UInt8 *BytePtr;
  _BYTE *v6;
  unsigned __int16 *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;

  v2 = a2;
  v4 = (char *)malloc_type_calloc(4 * a2, 1uLL, 0x9A8766DBuLL);
  if (v4)
  {
    BytePtr = CFDataGetBytePtr(a1);
    if (v2)
    {
      v6 = v4 + 3;
      v7 = (unsigned __int16 *)(BytePtr + 4);
      do
      {
        v8 = (*(v7 - 2) + 128) >> 8;
        if (v8 >= 0xFF)
          LOBYTE(v8) = -1;
        *(v6 - 3) = v8;
        v9 = (*(v7 - 1) + 128) >> 8;
        if (v9 >= 0xFF)
          LOBYTE(v9) = -1;
        *(v6 - 2) = v9;
        v10 = *v7;
        v7 += 3;
        v11 = (v10 + 128) >> 8;
        if (v11 >= 0xFF)
          LOBYTE(v11) = -1;
        *(v6 - 1) = v11;
        *v6 = -1;
        v6 += 4;
        --v2;
      }
      while (v2);
    }
  }
  return v4;
}

char *create_RGB_to_RGBX8_texture(const __CFData *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  const UInt8 *BytePtr;
  uint64_t v7;
  char *v8;
  const UInt8 *v9;
  uint64_t v10;
  const UInt8 *v11;
  _BYTE *v12;
  const UInt8 *v13;
  _BYTE *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;

  v4 = a2 * a2;
  v5 = (char *)malloc_type_calloc(4 * a2 * a2 * a2, 1uLL, 0xB7F1D4ECuLL);
  if (v5)
  {
    BytePtr = CFDataGetBytePtr(a1);
    if (a2)
    {
      v7 = 0;
      v8 = v5 + 3;
      v9 = BytePtr + 4;
      do
      {
        v10 = 0;
        v11 = v9;
        v12 = v8;
        do
        {
          v13 = v11;
          v14 = v12;
          v15 = a2;
          do
          {
            v16 = (*((unsigned __int16 *)v13 - 2) + 128) >> 8;
            if (v16 >= 0xFF)
              LOBYTE(v16) = -1;
            *(v14 - 3) = v16;
            v17 = (*((unsigned __int16 *)v13 - 1) + 128) >> 8;
            if (v17 >= 0xFF)
              LOBYTE(v17) = -1;
            *(v14 - 2) = v17;
            v18 = (*(unsigned __int16 *)v13 + 128) >> 8;
            if (v18 >= 0xFF)
              LOBYTE(v18) = -1;
            *(v14 - 1) = v18;
            *v14 = -1;
            v14 += 4;
            v13 += 6 * v4;
            --v15;
          }
          while (v15);
          ++v10;
          v12 += 4 * a2;
          v11 += 6 * a2;
        }
        while (v10 != a2);
        ++v7;
        v8 += 4 * v4;
        v9 += 6;
      }
      while (v7 != a2);
    }
  }
  return v5;
}

char *create_RGB_to_RGBX16_texture(const __CFData *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  const UInt8 *BytePtr;
  uint64_t v7;
  char *v8;
  const UInt8 *v9;
  uint64_t v10;
  const UInt8 *v11;
  _WORD *v12;
  const UInt8 *v13;
  _WORD *v14;
  uint64_t v15;

  v4 = a2 * a2;
  v5 = (char *)malloc_type_calloc(8 * a2 * a2 * a2, 1uLL, 0x8D6EA352uLL);
  if (v5)
  {
    BytePtr = CFDataGetBytePtr(a1);
    if (a2)
    {
      v7 = 0;
      v8 = v5 + 4;
      v9 = BytePtr + 4;
      do
      {
        v10 = 0;
        v11 = v9;
        v12 = v8;
        do
        {
          v13 = v11;
          v14 = v12;
          v15 = a2;
          do
          {
            *(v14 - 2) = *((_WORD *)v13 - 2);
            *(v14 - 1) = *((_WORD *)v13 - 1);
            *v14 = *(_WORD *)v13;
            v14[1] = -1;
            v14 += 4;
            v13 += 6 * v4;
            --v15;
          }
          while (v15);
          ++v10;
          v12 += 4 * a2;
          v11 += 6 * a2;
        }
        while (v10 != a2);
        ++v7;
        v8 += 8 * v4;
        v9 += 6;
      }
      while (v7 != a2);
    }
  }
  return v5;
}

char *create_RGB_to_RGBXF_texture(const __CFData *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  const UInt8 *BytePtr;
  int8x8_t v7;
  uint64_t v8;
  const UInt8 *v9;
  float32x2_t v10;
  char *v16;
  uint64_t v17;
  char *v18;
  const UInt8 *v19;
  char *v20;
  const UInt8 *v21;
  uint64_t v22;
  uint32x2_t v23;
  float32x2_t v24;

  v4 = a2 * a2;
  v5 = (char *)malloc_type_calloc(16 * a2 * a2 * a2, 1uLL, 0x2BB299AAuLL);
  if (v5)
  {
    BytePtr = CFDataGetBytePtr(a1);
    if (a2)
    {
      v8 = 0;
      v9 = BytePtr + 2;
      v10 = (float32x2_t)vdup_n_s32(0x477FFF00u);
      __asm { FMOV            V3.2S, #1.0 }
      v16 = v5;
      do
      {
        v17 = 0;
        v18 = v16;
        v19 = v9;
        do
        {
          v20 = v18;
          v21 = v19;
          v22 = a2;
          do
          {
            v7.i16[0] = *((_WORD *)v21 - 1);
            *(float *)v7.i32 = (float)v7.u32[0] / 65535.0;
            if (*(float *)v7.i32 > 1.0)
              *(float *)v7.i32 = 1.0;
            *(_DWORD *)v20 = v7.i32[0];
            v23.i32[0] = *(unsigned __int16 *)v21;
            v23.i32[1] = *((unsigned __int16 *)v21 + 1);
            v24 = vdiv_f32(vcvt_f32_u32(v23), v10);
            v7 = vbsl_s8((int8x8_t)vcgt_f32(v24, _D3), (int8x8_t)_D3, (int8x8_t)v24);
            *(int8x8_t *)(v20 + 4) = v7;
            *((_DWORD *)v20 + 3) = 1065353216;
            v21 += 6 * v4;
            v20 += 16;
            --v22;
          }
          while (v22);
          ++v17;
          v19 += 6 * a2;
          v18 += 16 * a2;
        }
        while (v17 != a2);
        ++v8;
        v9 += 6;
        v16 += 16 * v4;
      }
      while (v8 != a2);
    }
  }
  return v5;
}

uint64_t (*__create_calibrated_lookup_texture_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncTransformCopyProperty");
  v1 = colorsync_smart_null_1997;
  if (result)
    v1 = result;
  create_calibrated_lookup_texture_f = v1;
  return result;
}

uint64_t (*__create_calibrated_parametric_data_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncTransformCopyProperty");
  v1 = colorsync_smart_null_1997;
  if (result)
    v1 = result;
  create_calibrated_parametric_data_f = v1;
  return result;
}

uint64_t insertSpacesBefore(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v6;
  double v7;

  v6 = *(double *)(a2 + 16);
  v7 = rint((v6 - *(double *)(a4 + 16)) / *(double *)(a4 + 8));
  objc_msgSend(*(id *)a4, "setSpaces:beforeWordAtIndex:", (uint64_t)v7 & ~((uint64_t)v7 >> 63), a1);
  *(double *)(a4 + 16) = v6 + *(double *)(a2 + 32);
  return 1;
}

_QWORD *CGPDFSourceCreateForJBIG2(const void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  const void *v4;
  _BYTE *jbig2_filter;

  result = CGPDFSourceCreate(a1, a2, a3);
  if (result)
  {
    v4 = result;
    jbig2_filter = pdf_source_create_jbig2_filter(result, 0, 0);
    CFRelease(v4);
    return jbig2_filter;
  }
  return result;
}

_BYTE *pdf_source_create_jbig2_filter(const void *a1, CGPDFStream *a2, CGPDFDictionary *a3)
{
  _BYTE *result;
  _BYTE *v7;
  __CFSet *Mutable;
  CGPDFDictionary *v9;
  uint64_t v10;
  CFTypeRef v11;
  uint64_t (*v12)(CFTypeRef, uint64_t);
  uint64_t v13;
  uint64_t v14;
  CGPDFDictionaryRef dict;
  CGPDFStreamRef v16;
  int v17;
  CGPDFStreamRef value;

  result = malloc_type_calloc(1uLL, 0x20uLL, 0x10A0040169B3756uLL);
  if (result)
  {
    v7 = result;
    value = 0;
    v17 = 0;
    result[24] = 0;
    if (a1)
      CFRetain(a1);
    *(_QWORD *)v7 = a1;
    if (CGPDFDictionaryGetStream(a3, "JBIG2Globals", &value))
    {
      if (value)
      {
        Mutable = CFSetCreateMutable(0, 0, 0);
        v16 = a2;
        if (a2)
        {
          while (!CFSetContainsValue(Mutable, a2))
          {
            CFSetAddValue(Mutable, v16);
            if (v16)
              v9 = (CGPDFDictionary *)*((_QWORD *)v16 + 6);
            else
              v9 = 0;
            dict = 0;
            if (!CGPDFDictionaryGetDictionary(v9, "DecodeParms", &dict)
              && !CGPDFDictionaryGetDictionary(v9, "DP", &dict)
              || !dict
              || !CGPDFDictionaryGetStream(dict, "JBIG2Globals", &v16))
            {
              v16 = 0;
              goto LABEL_28;
            }
            a2 = v16;
            if (!v16)
              goto LABEL_28;
          }
          pdf_error("JBIG2Filter: JBIG2Globals reference loop");
          goto LABEL_32;
        }
LABEL_28:
        CFRelease(Mutable);
        v14 = CGPDFStreamCreateFilterChain(value, &v17);
        *((_QWORD *)v7 + 1) = v14;
        if (!v14 || v17)
        {
LABEL_32:
          jbig2_filter_finalize((CFTypeRef *)v7);
          return 0;
        }
        v10 = v14;
LABEL_19:
        v11 = *(CFTypeRef *)v7;
        if ((didLoadVTable & 1) == 0)
          pthread_once(&loadVTable_once, doLoadVTable);
        if (jbig2_vtable && (v12 = *(uint64_t (**)(CFTypeRef, uint64_t))(jbig2_vtable + 8)) != 0)
          v13 = v12(v11, v10);
        else
          v13 = 0;
        *((_QWORD *)v7 + 2) = v13;
        result = CGPDFSourceCreateInternal(0x1000uLL);
        if (result)
        {
          result[209] = 1;
          *((_OWORD *)result + 3) = pdf_source_create_jbig2_filter_callbacks;
          *((_OWORD *)result + 4) = *(_OWORD *)&off_1E162CCC0;
          *((_QWORD *)result + 10) = v7;
          return result;
        }
        goto LABEL_32;
      }
    }
    else
    {
      value = 0;
    }
    v10 = 0;
    *((_QWORD *)v7 + 1) = 0;
    goto LABEL_19;
  }
  return result;
}

void jbig2_filter_finalize(CFTypeRef *a1)
{
  CFTypeRef v2;
  void (*v3)(CFTypeRef);
  CFTypeRef v4;

  if (a1)
  {
    v2 = a1[2];
    if ((didLoadVTable & 1) == 0)
      pthread_once(&loadVTable_once, doLoadVTable);
    if (jbig2_vtable)
    {
      v3 = *(void (**)(CFTypeRef))(jbig2_vtable + 16);
      if (v3)
        v3(v2);
    }
    v4 = a1[1];
    if (v4)
      CFRelease(v4);
    if (*a1)
      CFRelease(*a1);
    free(a1);
  }
}

uint64_t jbig2_filter_rewind(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);

  *(_BYTE *)(a1 + 24) = 0;
  CGPDFSourceRewind(*(_QWORD *)a1, a2, a3, a4, a5, a6, a7, a8);
  result = CGPDFSourceRewind(*(_QWORD *)(a1 + 8), v9, v10, v11, v12, v13, v14, v15);
  v17 = *(_QWORD *)(a1 + 16);
  if ((didLoadVTable & 1) == 0)
    result = pthread_once(&loadVTable_once, doLoadVTable);
  if (jbig2_vtable)
  {
    v18 = *(uint64_t (**)(uint64_t))(jbig2_vtable + 32);
    if (v18)
      return v18(v17);
  }
  return result;
}

uint64_t jbig2_filter_refill(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  if (*(_BYTE *)(a1 + 24))
    return 0;
  v7 = *(_QWORD *)(a1 + 16);
  if ((didLoadVTable & 1) == 0)
    pthread_once(&loadVTable_once, doLoadVTable);
  if (!jbig2_vtable
    || (v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(jbig2_vtable + 24)) == 0
    || (result = v8(v7, a2, a3)) == 0)
  {
    result = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return result;
}

uint64_t rips_super()
{
  return 0;
}

uint64_t rips_size()
{
  return 80;
}

uint64_t rips_retain(uint64_t result)
{
  ++*(_DWORD *)(result + 8);
  return result;
}

void rips_release(void *a1)
{
  int v1;

  v1 = *((_DWORD *)a1 + 2) - 1;
  *((_DWORD *)a1 + 2) = v1;
  if (!v1)
    free(a1);
}

uint64_t rips_Growth()
{
  return 0;
}

uint64_t rips_ColorSpace()
{
  return 0;
}

_QWORD *rips_BltShape(uint64_t a1, int *a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, _DWORD *a7, uint64_t a8)
{
  return RIPLayerBltShape(a2, a3, a4, a5, a6, a7, a8, a8);
}

uint64_t (**rips_BltGlyph(uint64_t a1, _DWORD *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, uint64_t a6, _DWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10))()
{
  return RIPLayerBltGlyph(a2, a3, a4, a5, a6, a7, a8, a10);
}

uint64_t rips_BltImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return RIPLayerBltImage(a2, a3, a4, a5, a8, a6, a7, a8);
}

_QWORD *rips_BltShade(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return RIPLayerBltShade(a2, a3, a4, a5, a6, a8, a7, a8);
}

CFTypeRef CGPDFStringRetain(CFTypeRef cf)
{
  if (cf)
    CFRetain(cf);
  return cf;
}

void CGPDFStringRelease(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

size_t CGPDFStringGetLength(size_t string)
{
  size_t v1;

  if (string)
  {
    v1 = string;
    if (*(_QWORD *)(string + 24))
      decrypt_string(string);
    return *(_QWORD *)(v1 + 72);
  }
  return string;
}

void decrypt_string(uint64_t a1)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  size_t v14;
  BOOL v15;
  size_t v16;
  _QWORD *RC4;
  uint64_t v18;
  size_t v19;
  unsigned __int8 v20[32];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  if ((*(_BYTE *)(a1 + 64) & 1) == 0
    && (*(_QWORD *)(a1 + 32) | (unsigned __int16)*(_QWORD *)(a1 + 40)
     || *(_QWORD *)(a1 + 48) | *(unsigned __int16 *)(a1 + 56)))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 40);
    if (!v3)
      goto LABEL_25;
    v4 = *(_QWORD *)(a1 + 48) | (unsigned __int16)*(_QWORD *)(a1 + 56);
    v5 = v4 ? *(_QWORD *)(a1 + 48) : *(_QWORD *)(a1 + 32);
    v6 = v4 ? *(_QWORD *)(a1 + 56) : *(_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(v3 + 16);
    if (!v7)
      goto LABEL_25;
    if (!*(_BYTE *)(v7 + 184))
      goto LABEL_25;
    v8 = *(_QWORD *)(v3 + 40);
    if (!v8)
      goto LABEL_25;
    v9 = *(_QWORD *)(a1 + 72);
    if (!*(_BYTE *)(v8 + 12))
    {
      v19 = 0;
      if (!get_object_key(v8, v5, v6, v20, &v19))
        goto LABEL_25;
      v10 = *(_DWORD *)(v8 + 8);
      if ((v10 - 2) >= 2)
      {
        if (v10 != 1)
          goto LABEL_25;
        RC4 = CGCryptorCreateRC4(v20, v19);
        if (!RC4)
          goto LABEL_25;
        v18 = (uint64_t)RC4;
        CGCryptorProcessBytes((uint64_t)RC4, (const void *)(a1 + 80), v9, (void *)(a1 + 80), v9, 0);
        CGCryptorRelease(v18);
      }
      else
      {
        v11 = pdf_aes_create((uint64_t)v20, v19);
        if (!v11)
          goto LABEL_25;
        v12 = v11;
        v13 = pdf_aes_process_buffer((uint64_t)v11, (const void *)(a1 + 80), (void *)(a1 + 80), v9);
        pdf_aes_free(v12);
        if (!v13)
          goto LABEL_25;
        v14 = *(unsigned __int8 *)(v9 + a1 + 80 - 1);
        v15 = v9 >= v14;
        v16 = v9 - v14;
        if (v15)
          v9 = v16;
        else
          pdf_error("invalid AES padding.");
        if (v9 > 0xF)
        {
          v9 -= 16;
          memmove((void *)(a1 + 80), (const void *)(a1 + 96), v9);
        }
        else
        {
          pdf_error("invalid AES padding.");
          v9 = 0;
        }
      }
    }
    *(_QWORD *)(a1 + 72) = v9;
    *(_BYTE *)(a1 + v9 + 80) = 0;
LABEL_25:
    *(_BYTE *)(a1 + 64) |= 1u;
  }
  os_unfair_lock_unlock(v2);
}

const unsigned __int8 *__cdecl CGPDFStringGetBytePtr(const unsigned __int8 *string)
{
  const unsigned __int8 *v1;

  if (string)
  {
    v1 = string;
    if (*((_QWORD *)string + 3))
      decrypt_string((uint64_t)string);
    return v1 + 80;
  }
  return string;
}

uint64_t CGPDFStringPrint(uint64_t result, FILE *a2)
{
  uint64_t v2;
  FILE *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;

  if (result)
  {
    v2 = result;
    if (a2)
      v3 = a2;
    else
      v3 = (FILE *)*MEMORY[0x1E0C80C10];
    if (*(_QWORD *)(result + 24))
    {
      decrypt_string(result);
      if (*(_QWORD *)(v2 + 24))
        decrypt_string(v2);
    }
    v4 = *(_QWORD *)(v2 + 72);
    fputc(40, v3);
    if (v4)
    {
      v5 = (char *)(v2 + 80);
      v6 = MEMORY[0x1E0C80978];
      do
      {
        v7 = *v5++;
        v8 = v7;
        if (v7 < 0)
        {
          if (__maskrune(v8, 0x40000uLL))
          {
LABEL_12:
            if (v8 - 40 <= 0x34 && ((1 << (v8 - 40)) & 0x10000000000003) != 0)
              fputc(92, v3);
            fputc(v8, v3);
            goto LABEL_20;
          }
        }
        else if ((*(_DWORD *)(v6 + 4 * v8 + 60) & 0x40000) != 0)
        {
          goto LABEL_12;
        }
        fprintf(v3, "\\%03o", v8);
LABEL_20:
        --v4;
      }
      while (v4);
    }
    return fputc(41, v3);
  }
  return result;
}

void Type1CSubset::~Type1CSubset(Type1CSubset *this)
{
  FontSubset::~FontSubset(this);
  JUMPOUT(0x186DC23C4);
}

void Type1CSubset::emit_font_file(Type1CSubset *this, uint64_t a2)
{
  const __CFData *embedded_font_data;
  const __CFData *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const UInt8 *BytePtr;
  CFIndex Length;
  uint64_t v28;
  uint64_t v29;

  embedded_font_data = (const __CFData *)Type1Subset::create_embedded_font_data(this);
  if (embedded_font_data)
  {
    v5 = embedded_font_data;
    v6 = **(_QWORD **)(*((_QWORD *)this + 1) + 8);
    v7 = PDFStreamCreateWithObjectNumber(v6, a2);
    PDFDocumentBeginObject(*v7, v7[1], v8, v9, v10, v11, v12, v13);
    PDFDocumentPrintf(*v7, (uint64_t)"<<", v14, v15, v16, v17, v18, v19, v28);
    PDFDocumentPrintf(v6, (uint64_t)"/Subtype /Type1C", v20, v21, v22, v23, v24, v25, v29);
    PDFStreamBeginData((CGDataConsumerRef)v7);
    BytePtr = CFDataGetBytePtr(v5);
    Length = CFDataGetLength(v5);
    CGDataConsumerPutBytes(v7[3], (uint64_t)BytePtr, Length);
    PDFStreamEndData(v7);
    PDFStreamEnd((CFDataRef *)v7);
    PDFStreamRelease((uint64_t)v7);
    CFRelease(v5);
  }
}

void FontSubset::~FontSubset(FontSubset *this)
{
  *(_QWORD *)this = off_1E1627D68;
  std::__tree<unsigned long>::destroy(*((_QWORD **)this + 15));
  std::__tree<unsigned long>::destroy(*((_QWORD **)this + 12));
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
}

void CGPDFAssociationRelease(const void **a1)
{
  const void *v2;

  if (a1)
  {
    v2 = *a1;
    if (v2)
      CFRelease(v2);
    free(a1);
  }
}

CFMutableArrayRef CGPDFDocumentCopyOutputIntents(__CFArray *a1)
{
  CFMutableArrayRef Mutable;
  CGPDFDictionary *catalog;
  uint64_t v3;
  size_t v4;
  const CFDictionaryKeyCallBacks *v5;
  const CFDictionaryValueCallBacks *v6;
  CFMutableDictionaryRef v7;
  CGPDFDictionaryRef dict;
  CGPDFArrayRef value;

  Mutable = a1;
  if (a1)
  {
    dict = 0;
    value = 0;
    CGAnalyticsSendPDFDocumentGetCatalogEvent();
    catalog = pdf_document_get_catalog(**(_QWORD **)(*((_QWORD *)Mutable + 2) + 16));
    Mutable = 0;
    if (CGPDFDictionaryGetArray(catalog, "OutputIntents", &value))
    {
      if (value && (v3 = *((_QWORD *)value + 2)) != 0)
      {
        Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
        v4 = 0;
        v5 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
        v6 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
        do
        {
          if (CGPDFArrayGetDictionary(value, v4, &dict))
          {
            v7 = CFDictionaryCreateMutable(0, 0, v5, v6);
            CGPDFDictionaryApplyFunction(dict, (CGPDFDictionaryApplierFunction)build_output_intent, v7);
            CFArrayAppendValue(Mutable, v7);
            CFRelease(v7);
          }
          ++v4;
        }
        while (v3 != v4);
      }
      else
      {
        return 0;
      }
    }
  }
  return Mutable;
}

void build_output_intent(const char *a1, uint64_t a2, void *cf)
{
  int v5;
  CFStringRef v6;
  const char *v7;
  const __CFAllocator *v8;
  CFStringRef v9;
  CFDataRef v10;
  CFDataRef v11;
  const __CFAllocator *v12;
  CFStringRef v13;
  CFStringRef v14;
  CGPDFDataFormat format;

  if (!a2)
    return;
  v5 = *(_DWORD *)(a2 + 8);
  if (v5 == 5)
  {
    v7 = *(const char **)(a2 + 32);
    v8 = CFGetAllocator(cf);
    v6 = CFStringCreateWithCString(v8, v7, 0x600u);
LABEL_6:
    v9 = v6;
    if (!v6)
      return;
    goto LABEL_13;
  }
  if (v5 == 6)
  {
    v6 = CGPDFStringCopyTextString(*(CGPDFStringRef *)(a2 + 32));
    goto LABEL_6;
  }
  format = CGPDFDataFormatRaw;
  if (v5 == 9)
  {
    v10 = CGPDFStreamCopyData(*(CGPDFStreamRef *)(a2 + 32), &format);
    if (v10)
    {
      v11 = v10;
      v9 = format ? 0 : (CFStringRef)CGColorSpaceFromICCDataCacheGetRetained(v10);
      CFRelease(v11);
      if (v9)
      {
LABEL_13:
        v12 = CFGetAllocator(cf);
        v13 = CFStringCreateWithCString(v12, a1, 0x600u);
        if (v13)
        {
          v14 = v13;
          CFDictionarySetValue((CFMutableDictionaryRef)cf, v13, v9);
          CFRelease(v14);
        }
        CFRelease(v9);
      }
    }
  }
}

char *CGPDFFunctionCreateFunction(char *result)
{
  int v1;
  uint64_t v2;
  CGPDFDictionary **v3;
  CGPDFDictionary *v4;
  char *v5;
  CGPDFDictionary *v6;
  CGPDFReal *v7;
  CGPDFReal *v8;
  void *v9;
  CGPDFArray *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint8x8_t v14;
  CGPDFInteger v15;
  uint64_t v16;
  CGPDFDictionary *v17;
  CGPDFReal *v18;
  CGPDFReal *v19;
  _BYTE *v20;
  const void *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t *v30;
  _DWORD *v31;
  _DWORD *v32;
  void *v33;
  CGPDFArray *v34;
  uint64_t *v35;
  double v36;
  uint64_t v37;
  double v38;
  double v39;
  size_t v40;
  void *v41;
  void *v42;
  CGPDFArray *v43;
  uint64_t *v44;
  double *v45;
  uint64_t v46;
  void *v47;
  _BOOL4 Numbers;
  size_t v49;
  const CGFloat *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  CGPDFInteger value;
  unint64_t v56;
  int v57;
  CGPDFInteger v58[2];

  if (!result)
    return result;
  value = 0;
  v1 = *((_DWORD *)result + 2);
  if (v1 != 9)
  {
    if (v1 != 8)
    {
      pdf_error("invalid function: not a dictionary or stream.");
      return 0;
    }
    v2 = 0;
    v3 = (CGPDFDictionary **)(result + 32);
    goto LABEL_7;
  }
  v2 = *((_QWORD *)result + 4);
  if (v2)
  {
    v3 = (CGPDFDictionary **)(v2 + 48);
LABEL_7:
    v4 = *v3;
    goto LABEL_8;
  }
  v4 = 0;
LABEL_8:
  if (!CGPDFDictionaryGetInteger(v4, "FunctionType", &value))
  {
    return 0;
  }
  switch(value)
  {
    case 0:
      if (!v2)
      {
        pdf_error("invalid Type 0 function: not a stream.");
        return 0;
      }
      result = (char *)malloc_type_calloc(1uLL, 0x58uLL, 0x10900401C976371uLL);
      if (!result)
        return result;
      v5 = result;
      v58[0] = 0;
      v56 = 0;
      v6 = *(CGPDFDictionary **)(v2 + 48);
      v7 = pdf_dictionary_copy_numbers(v6, "Domain", &v56);
      *((_QWORD *)v5 + 1) = v7;
      if (!v7 || !v56 || (v56 & 1) != 0)
      {
        goto LABEL_97;
      }
      *(_QWORD *)v5 = v56 >> 1;
      v8 = pdf_dictionary_copy_numbers(v6, "Range", &v56);
      *((_QWORD *)v5 + 3) = v8;
      if (!v8 || !v56 || (v56 & 1) != 0)
      {
        goto LABEL_97;
      }
      *((_QWORD *)v5 + 2) = v56 >> 1;
      v9 = malloc_type_malloc(8 * *(_QWORD *)v5, 0x100004000313F17uLL);
      *((_QWORD *)v5 + 6) = v9;
      if (!v9)
        goto LABEL_97;
      if (!CGPDFDictionaryGetIntegers(v6, "Size", (uint64_t)v9, *(CGPDFArray **)v5))
      {
        goto LABEL_97;
      }
      v10 = *(CGPDFArray **)v5;
      if (*(_QWORD *)v5)
      {
        v11 = (uint64_t *)*((_QWORD *)v5 + 6);
        while (1)
        {
          v13 = *v11++;
          v12 = v13;
          if (v13 <= 0)
            break;
          if ((double)v12 > 9.00719925e15)
          {
            pdf_error("invalid function: sample count is out of range.");
            goto LABEL_97;
          }
          v10 = (CGPDFArray *)((char *)v10 - 1);
          if (!v10)
            goto LABEL_25;
        }
        pdf_error("invalid function: every domain of a sampling function must have at least one sample.");
LABEL_97:
        type0_release((void **)v5);
        return 0;
      }
LABEL_25:
      if (!CGPDFDictionaryGetInteger(v6, "BitsPerSample", v58)
        || v58[0] < 1
        || v58[0] > 32
        || (v14 = (uint8x8_t)vcnt_s8((int8x8_t)v58[0]), v14.i16[0] = vaddlv_u8(v14), v14.u32[0] >= 2uLL))
      {
        goto LABEL_97;
      }
      *((_QWORD *)v5 + 7) = v58[0];
      if (CGPDFDictionaryGetInteger(v6, "Order", v58))
      {
        v15 = v58[0];
        if ((v58[0] & 0xFFFFFFFFFFFFFFFDLL) != 1)
        {
          goto LABEL_97;
        }
      }
      else
      {
        v15 = 1;
      }
      *((_QWORD *)v5 + 8) = v15;
      v34 = *(CGPDFArray **)v5;
      if (*(_QWORD *)v5)
      {
        v35 = (uint64_t *)*((_QWORD *)v5 + 6);
        v36 = 1.0;
        do
        {
          v37 = *v35++;
          v36 = v36 * (double)v37;
          v34 = (CGPDFArray *)((char *)v34 - 1);
        }
        while (v34);
        v38 = v36 * 0.125;
      }
      else
      {
        v38 = 0.125;
      }
      v39 = ceil(v38 * (double)*((unint64_t *)v5 + 7) * (double)*((unint64_t *)v5 + 2));
      if (v39 > 1.12589991e15)
      {
        pdf_error("invalid function: arithmetic overflow.");
        goto LABEL_97;
      }
      v40 = (unint64_t)v39;
      v41 = malloc_type_malloc((unint64_t)v39, 0x4B1C5008uLL);
      *((_QWORD *)v5 + 10) = v41;
      if (!v41)
        goto LABEL_97;
      if (CGPDFStreamGetData(v2, (uint64_t)v41, v40) != v40)
      {
        pdf_error("invalid function: failed to read %zu bytes.");
        goto LABEL_97;
      }
      *((_QWORD *)v5 + 9) = v40;
      v42 = malloc_type_malloc(16 * *(_QWORD *)v5, 0x100004000313F17uLL);
      *((_QWORD *)v5 + 5) = v42;
      if (!v42)
        goto LABEL_97;
      if (!CGPDFDictionaryGetNumbers(v6, "Encode", (uint64_t)v42, (CGPDFArray *)(2 * *(_QWORD *)v5)))
      {
        v43 = *(CGPDFArray **)v5;
        if (*(_QWORD *)v5)
        {
          v44 = (uint64_t *)*((_QWORD *)v5 + 6);
          v45 = (double *)(*((_QWORD *)v5 + 5) + 8);
          do
          {
            *(v45 - 1) = 0.0;
            v46 = *v44++;
            *v45 = (double)(v46 - 1);
            v45 += 2;
            v43 = (CGPDFArray *)((char *)v43 - 1);
          }
          while (v43);
        }
      }
      v47 = malloc_type_malloc(16 * *((_QWORD *)v5 + 2), 0x100004000313F17uLL);
      *((_QWORD *)v5 + 4) = v47;
      if (!v47)
        goto LABEL_97;
      Numbers = CGPDFDictionaryGetNumbers(v6, "Decode", (uint64_t)v47, (CGPDFArray *)(2 * *((_QWORD *)v5 + 2)));
      v49 = *((_QWORD *)v5 + 2);
      if (Numbers)
      {
        v50 = (const CGFloat *)*((_QWORD *)v5 + 3);
      }
      else
      {
        v50 = (const CGFloat *)*((_QWORD *)v5 + 3);
        if (v49)
        {
          v51 = 0;
          v52 = *((_QWORD *)v5 + 4);
          v53 = *((_QWORD *)v5 + 2);
          do
          {
            v54 = (_QWORD *)(v52 + v51 * 8);
            *v54 = *(_QWORD *)&v50[v51];
            v54[1] = *(_QWORD *)&v50[v51 + 1];
            v51 += 2;
            --v53;
          }
          while (v53);
        }
      }
      result = (char *)CGFunctionCreate(v5, *(_QWORD *)v5, *((const CGFloat **)v5 + 1), v49, v50, &type0_callbacks);
      if (!result)
      {
        pdf_error("unable to create Type 0 function.");
        goto LABEL_97;
      }
      v33 = copy_pdf_description_18786;
      goto LABEL_73;
    case 2:
      if (v2)
        goto LABEL_39;
      return cg_function_type2_create(v4);
    case 3:
      if (v2)
      {
LABEL_39:
        pdf_error("invalid function: not a dictionary.");
        return 0;
      }
      return cg_function_type3_create(v4);
    case 4:
      if (!v2)
      {
        pdf_error("invalid Type 4 function: not a stream.");
        return 0;
      }
      result = (char *)malloc_type_calloc(1uLL, 0x38uLL, 0x10A00400F0CD34FuLL);
      if (!result)
        return result;
      v16 = (uint64_t)result;
      v56 = 0;
      v17 = *(CGPDFDictionary **)(v2 + 48);
      v18 = pdf_dictionary_copy_numbers(v17, "Domain", &v56);
      *(_QWORD *)(v16 + 8) = v18;
      if (!v18 || !v56 || (v56 & 1) != 0)
      {
LABEL_62:
        type4_release(v16);
        return 0;
      }
      *(_QWORD *)v16 = v56 >> 1;
      v19 = pdf_dictionary_copy_numbers(v17, "Range", &v56);
      *(_QWORD *)(v16 + 24) = v19;
      if (!v19 || !v56 || (v56 & 1) != 0)
      {
        goto LABEL_62;
      }
      *(_QWORD *)(v16 + 16) = v56 >> 1;
      v57 = 0;
      v20 = CGPDFStreamCreateFilterChain(v2, &v57);
      v21 = v20;
      if (!v20 || v57)
      {
        if (!v20)
        {
LABEL_65:
          *(_QWORD *)(v16 + 32) = 0;
          goto LABEL_62;
        }
LABEL_64:
        CFRelease(v21);
        goto LABEL_65;
      }
      v22 = malloc_type_malloc(0x20uLL, 0x103004057E7F81CuLL);
      if (!v22)
        goto LABEL_64;
      v29 = v22;
      v22[2] = 0;
      v22[3] = 0;
      *v22 = v21;
      v22[1] = 0;
      if (type4_lexer_scan((_QWORD **)v22, (uint64_t)v58, v23, v24, v25, v26, v27, v28) == 123)
      {
        v30 = scan((_QWORD **)v29);
      }
      else
      {
        v30 = 0;
      }
      free((void *)v29[1]);
      free(v29);
      CFRelease(v21);
      *(_QWORD *)(v16 + 32) = v30;
      if (!v30)
        goto LABEL_62;
      v31 = evaluation_create((_QWORD *)v16);
      *(_QWORD *)(v16 + 48) = v31;
      if (!v31)
        goto LABEL_62;
      v32 = evaluation_create((_QWORD *)v16);
      *(_QWORD *)(v16 + 40) = v32;
      if (!v32)
        goto LABEL_62;
      result = (char *)CGFunctionCreate((void *)v16, *(_QWORD *)v16, *(const CGFloat **)(v16 + 8), *(_QWORD *)(v16 + 16), *(const CGFloat **)(v16 + 24), &type4_callbacks);
      if (!result)
      {
        pdf_error("unable to create Type 4 function.");
        goto LABEL_62;
      }
      v33 = copy_pdf_description;
LABEL_73:
      *((_QWORD *)result + 11) = v33;
      return result;
    default:
      return 0;
  }
}

CGPDFReal *pdf_dictionary_copy_numbers(CGPDFDictionary *a1, const char *a2, _QWORD *a3)
{
  CGPDFReal *v4;
  uint64_t v5;
  size_t v6;
  CGPDFArrayRef array;
  CGPDFReal value;

  array = 0;
  value = 0.0;
  v4 = 0;
  if (!CGPDFDictionaryGetArray(a1, a2, &array))
    return v4;
  if (!array)
  {
    v5 = 0;
    if (!a3)
      goto LABEL_5;
    goto LABEL_4;
  }
  v5 = *((_QWORD *)array + 2);
  if (a3)
LABEL_4:
    *a3 = v5;
LABEL_5:
  v4 = (CGPDFReal *)malloc_type_malloc(8 * v5, 0x566C45D1uLL);
  __CFSetLastAllocationEventName();
  if (v4 && v5)
  {
    v6 = 0;
    while (CGPDFArrayGetNumber(array, v6, &value))
    {
      v4[v6++] = value;
      if (v5 == v6)
        return v4;
    }
    free(v4);
    return 0;
  }
  return v4;
}

double *CGPDFTextStyleCreate(const void *a1, const void *a2, const void *a3, double a4, double a5, double a6)
{
  double *v6;
  double *v14;
  double v15;

  v6 = 0;
  if (a1)
  {
    if (a4 >= 0.0 && a2 != 0)
    {
      v14 = (double *)malloc_type_malloc(0x38uLL, 0x1020040AA3C56B0uLL);
      v6 = v14;
      if (v14)
      {
        *(_QWORD *)v14 = 1;
        CFRetain(a1);
        *((_QWORD *)v6 + 1) = a1;
        v6[2] = round(a4);
        CFRetain(a2);
        *((_QWORD *)v6 + 3) = a2;
        if (a3)
          CFRetain(a3);
        *((_QWORD *)v6 + 4) = a3;
        v15 = round(a5 * 1000.0) / 1000.0;
        v6[5] = v15;
        v6[6] = round(a6);
        if (v15 < 0.001 || 6.28318531 - v15 < 0.001)
          v6[5] = 0.0;
      }
    }
  }
  return v6;
}

void CGPDFTextStyleRelease(_QWORD *a1)
{
  const void *v3;
  const void *v4;
  const void *v5;

  if (a1)
  {
    if ((*a1)-- == 1)
    {
      v3 = (const void *)a1[1];
      if (v3)
        CFRelease(v3);
      v4 = (const void *)a1[3];
      if (v4)
        CFRelease(v4);
      v5 = (const void *)a1[4];
      if (v5)
        CFRelease(v5);
      free(a1);
    }
  }
}

uint64_t CGPDFTextStyleEqualToPDFTextStyle(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a1 == a2)
    return 1;
  if (!a1 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8) || *(double *)(a1 + 16) != *(double *)(a2 + 16))
    return 0;
  result = CGColorEqualToColor(*(CGColorRef *)(a1 + 24), *(CGColorRef *)(a2 + 24));
  if ((_DWORD)result)
  {
    result = CGColorEqualToColor(*(CGColorRef *)(a1 + 32), *(CGColorRef *)(a2 + 32));
    if ((_DWORD)result)
      return *(double *)(a1 + 40) == *(double *)(a2 + 40) && *(double *)(a1 + 48) == *(double *)(a2 + 48);
  }
  return result;
}

void ccitt_fax_filter_finalize(CFTypeRef *a1)
{
  _QWORD *v2;
  void *v3;

  if (a1)
  {
    v2 = a1[4];
    if (v2)
    {
      v3 = (void *)v2[4];
      if (v3)
        free(v3);
      free(v2);
    }
    if (*a1)
      CFRelease(*a1);
    free(a1);
  }
}

uint64_t ccitt_fax_filter_refill(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _WORD *v8;
  unsigned __int16 *v9;
  int v10;
  unsigned __int16 *v11;
  int v12;
  signed int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  _WORD *v27;
  unsigned __int16 *v28;
  int v29;
  int v30;
  unint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  unsigned __int8 *v39;
  int v40;
  int v41;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  unsigned __int16 *v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  unsigned __int16 *v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  unsigned __int16 *v59;
  int v60;
  int v61;
  int v62;
  int v63;
  unsigned __int16 *v64;
  int v65;
  int v66;
  int v67;
  BOOL v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  unsigned __int16 *v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  uint64_t v85;
  unsigned __int8 *v86;
  int v87;
  int v88;
  char *v90;
  int v91;
  uint64_t v92;
  unint64_t v94;
  unsigned __int16 *v95;
  int v96;
  int v97;
  int v99;
  int v100;
  int k;
  int i;
  int v103;
  int v104;
  unsigned int v105;
  char v106;
  int v107;
  unsigned int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  unsigned int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  unsigned int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  unsigned int v131;
  uint64_t v132;
  int v133;
  unsigned int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  uint64_t v141;
  unsigned __int16 *v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  _BOOL4 v150;
  _WORD *v151;
  unsigned __int16 *v152;
  int v153;
  BOOL v154;
  unint64_t v155;
  int v156;
  int v157;
  int v158;
  _BOOL4 v159;
  _WORD *v160;
  unsigned __int16 *v161;
  int v162;
  BOOL v163;
  unint64_t v164;
  unint64_t v165;
  _WORD *v166;
  unsigned __int16 *v167;
  int v168;
  BOOL v169;
  int v170;
  unsigned int v171;
  unsigned int v172;
  int v173;
  int j;
  unsigned __int16 *v175;
  int v176;
  unsigned __int16 *v177;
  int v178;
  int v179;
  int v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  unsigned __int16 *v185;
  int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  uint64_t v192;
  unsigned __int8 *v193;
  int v194;
  int v195;
  int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  uint64_t v202;
  unsigned __int16 *v203;
  int v204;
  int v205;
  int v206;
  uint64_t v207;
  unsigned __int16 *v208;
  int v209;
  int v210;
  int v211;
  uint64_t v212;
  unsigned __int16 *v213;
  int v214;
  int v215;
  int v216;
  int v217;
  unsigned __int16 *v218;
  int v219;
  int v220;
  unint64_t v221;
  int v222;
  int v223;
  int v224;
  int v225;
  int v226;
  int v227;
  int v228;
  int v229;
  int v230;
  int v231;
  uint64_t v232;
  unsigned __int16 *v233;
  int v234;
  int v235;
  int v236;
  int v237;
  int v238;
  int v239;
  int v240;
  uint64_t v241;
  unsigned __int8 *v242;
  int v243;
  int v244;
  char *v246;
  int v247;
  uint64_t v248;
  unint64_t v250;
  unsigned __int16 *v251;
  int v252;
  int v253;
  int v255;
  int v256;
  int v257;
  int v258;
  int v259;
  uint64_t v260;
  int v261;
  int v262;
  int v263;
  int v264;
  int v265;
  int v266;
  int v267;
  uint64_t v268;
  unsigned __int16 *v269;
  int v270;
  int v271;
  int v272;
  int v273;
  _BOOL4 v274;
  _WORD *v275;
  unsigned __int16 *v276;
  int v277;
  BOOL v278;
  unint64_t v279;
  int v280;
  _WORD *v281;
  unsigned __int16 *v282;
  int v283;
  BOOL v284;
  unint64_t v285;
  unint64_t v286;
  _WORD *v287;
  int v288;
  BOOL v289;
  unint64_t v290;
  int v291;
  int v292;
  _BOOL4 v293;
  _WORD *v294;
  unsigned __int16 *v295;
  int v296;
  BOOL v297;
  unint64_t v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t v301;
  int v302;
  int v303;
  int v304;
  int v305;
  unsigned int v306;
  int v307;
  int v308;
  int v309;
  int v310;
  int v311;
  int v312;
  int v313;
  _WORD *v314;
  unsigned __int16 *v315;
  int v316;
  BOOL v317;
  unint64_t v318;
  unint64_t v319;
  char *v320;
  char *v321;
  uint64_t v322;
  uint64_t v324;
  _WORD *v325;

  if (*(_BYTE *)(a1 + 8))
    return 0;
  v6 = a1;
  v7 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)v7 != 4)
  {
    v99 = *(_DWORD *)(v7 + 4);
    if ((v99 & 6) == 4)
    {
      v100 = *(_DWORD *)(v7 + 20);
      if ((v100 & 7) != 0)
      {
        *(_DWORD *)(v7 + 16) >>= v100 & 7;
        *(_DWORD *)(v7 + 20) = v100 & 0xFFFFFFF8;
      }
    }
    if (*(_DWORD *)(v7 + 24))
    {
      k = *(_DWORD *)(v7 + 20);
LABEL_138:
      for (i = 1; ; i = *(_DWORD *)(v7 + 24) + 1)
      {
        *(_DWORD *)(v7 + 24) = i;
        while (1)
        {
          if (k <= 7)
          {
            v103 = (*(uint64_t (**)(_QWORD))(v7 + 64))(*(_QWORD *)(v7 + 72));
            if (v103 == -1)
            {
              if (!*(_DWORD *)(v7 + 20))
                goto LABEL_186;
              k = 8;
            }
            else
            {
              v104 = *(_DWORD *)(v7 + 20);
              *(_DWORD *)(v7 + 16) |= TIFFBitRevTable[v103] << v104;
              k = v104 + 8;
            }
          }
          v105 = *(_DWORD *)(v7 + 16);
          if ((_BYTE)v105)
            break;
          k -= 8;
          *(_DWORD *)(v7 + 16) = v105 >> 8;
          *(_DWORD *)(v7 + 20) = k;
        }
        if ((v105 & 1) == 0)
        {
          do
          {
            v106 = v105;
            --k;
            v105 >>= 1;
          }
          while ((v106 & 2) == 0);
        }
        v107 = k - 1;
        v108 = v105 >> 1;
        *(_DWORD *)(v7 + 16) = v108;
        *(_DWORD *)(v7 + 20) = k - 1;
        if ((*(_BYTE *)(v7 + 4) & 1) != 0)
          break;
        if (k <= 11)
        {
          v109 = (*(uint64_t (**)(_QWORD))(v7 + 64))(*(_QWORD *)(v7 + 72));
          if (v109 == -1)
          {
            if (!*(_DWORD *)(v7 + 20))
              goto LABEL_186;
            v108 = *(_DWORD *)(v7 + 16);
            goto LABEL_162;
          }
          v110 = *(_DWORD *)(v7 + 20);
          v108 = *(_DWORD *)(v7 + 16) | (TIFFBitRevTable[v109] << v110);
          v107 = v110 + 8;
          *(_DWORD *)(v7 + 16) = v108;
          *(_DWORD *)(v7 + 20) = v110 + 8;
          if (v110 <= 2)
          {
            v111 = (*(uint64_t (**)(_QWORD))(v7 + 64))(*(_QWORD *)(v7 + 72));
            v108 = *(_DWORD *)(v7 + 16);
            if (v111 != -1)
            {
              v112 = *(_DWORD *)(v7 + 20);
              v108 |= TIFFBitRevTable[v111] << v112;
              *(_DWORD *)(v7 + 16) = v108;
              v107 = v112 + 8;
LABEL_163:
              *(_DWORD *)(v7 + 20) = v107;
              goto LABEL_164;
            }
LABEL_162:
            v107 = 11;
            goto LABEL_163;
          }
        }
LABEL_164:
        if ((v108 & 0x7FF) != 0)
          goto LABEL_247;
        k = v107 - 11;
        *(_DWORD *)(v7 + 20) = v107 - 11;
        v117 = v108 >> 11;
LABEL_172:
        *(_DWORD *)(v7 + 16) = v117;
      }
      if (k <= 12)
      {
        v113 = (*(uint64_t (**)(_QWORD))(v7 + 64))(*(_QWORD *)(v7 + 72));
        if (v113 == -1)
        {
          if (!*(_DWORD *)(v7 + 20))
            goto LABEL_186;
          v108 = *(_DWORD *)(v7 + 16);
          goto LABEL_168;
        }
        v114 = *(_DWORD *)(v7 + 20);
        v108 = *(_DWORD *)(v7 + 16) | (TIFFBitRevTable[v113] << v114);
        v107 = v114 + 8;
        *(_DWORD *)(v7 + 16) = v108;
        *(_DWORD *)(v7 + 20) = v114 + 8;
        if (v114 <= 3)
        {
          v115 = (*(uint64_t (**)(_QWORD))(v7 + 64))(*(_QWORD *)(v7 + 72));
          v108 = *(_DWORD *)(v7 + 16);
          if (v115 != -1)
          {
            v116 = *(_DWORD *)(v7 + 20);
            v108 |= TIFFBitRevTable[v115] << v116;
            *(_DWORD *)(v7 + 16) = v108;
            v107 = v116 + 8;
            goto LABEL_169;
          }
LABEL_168:
          v107 = 12;
LABEL_169:
          *(_DWORD *)(v7 + 20) = v107;
        }
      }
      if ((v108 & 0xFFE) == 0)
      {
        k = v107 - 12;
        *(_DWORD *)(v7 + 20) = v107 - 12;
        v117 = v108 >> 12;
        goto LABEL_172;
      }
LABEL_247:
      v123 = *(_DWORD *)(v7 + 24);
      if (v123 >= 2 && v123 != 6)
      {
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "Line %d: bad RTC (%d EOLs)\n", *(_DWORD *)(v7 + 60), v123);
        v123 = *(_DWORD *)(v7 + 24);
      }
      if (v123 > 5)
        v123 = -1;
LABEL_187:
      if ((v99 & 1) == 0)
      {
        if (v123 < 0)
          goto LABEL_557;
        v321 = a2;
        v322 = a3;
        v124 = 0;
        *(_DWORD *)(v7 + 24) = 0;
        v8 = *(_WORD **)(v7 + 48);
        v13 = *(_DWORD *)(v7 + 12);
        v125 = *(_DWORD *)(v7 + 20);
        v27 = v8;
        while (1)
        {
          v126 = 0;
          while (2)
          {
            if (v125 <= 11)
            {
              v127 = (*(uint64_t (**)(_QWORD))(v7 + 64))(*(_QWORD *)(v7 + 72));
              if (v127 == -1)
              {
                if (!*(_DWORD *)(v7 + 20))
                {
LABEL_284:
                  if (v126
                    && (unint64_t)v27 < *(_QWORD *)(v7 + 48) + 2 * (unint64_t)*(unsigned int *)(v7 + 56))
                  {
                    *v27++ = v126;
                  }
                  if (v124 == v13)
                    goto LABEL_557;
                  v150 = v124 > v13;
                  if (v124 > v13 && v27 > v8)
                  {
                    v166 = v27 - 1;
                    v167 = v27 - 1;
                    do
                    {
                      v168 = *v167--;
                      v124 -= v168;
                      v150 = v124 > v13;
                      v169 = v124 > v13 && v166 > v8;
                      v166 = v167;
                    }
                    while (v169);
                    goto LABEL_518;
                  }
                  goto LABEL_519;
                }
              }
              else
              {
                v128 = *(_DWORD *)(v7 + 20);
                v125 = v128 + 8;
                *(_DWORD *)(v7 + 16) |= TIFFBitRevTable[v127] << v128;
                *(_DWORD *)(v7 + 20) = v128 + 8;
                if (v128 > 3)
                  goto LABEL_198;
                v129 = (*(uint64_t (**)(_QWORD))(v7 + 64))(*(_QWORD *)(v7 + 72));
                if (v129 != -1)
                {
                  v130 = *(_DWORD *)(v7 + 20);
                  *(_DWORD *)(v7 + 16) |= TIFFBitRevTable[v129] << v130;
                  v125 = v130 + 8;
                  goto LABEL_198;
                }
              }
              v125 = 12;
            }
LABEL_198:
            v131 = *(_DWORD *)(v7 + 16);
            v132 = v131 & 0xFFF;
            v133 = *((unsigned __int8 *)&pdf_TIFFFaxWhiteTable + 4 * v132 + 1);
            v125 -= v133;
            v134 = v131 >> v133;
            *(_DWORD *)(v7 + 16) = v134;
            *(_DWORD *)(v7 + 20) = v125;
            switch(4 * v132)
            {
              case 0:
              case 18:
                goto LABEL_257;
              case 1:
              case 10:
              case 22:
              case 24:
                v135 = *((unsigned __int16 *)&pdf_TIFFFaxWhiteTable + 2 * v132 + 1);
                v124 += v135;
                v126 += v135;
                continue;
              case 4:
              case 8:
              case 12:
              case 16:
              case 20:
                v136 = *((unsigned __int16 *)&pdf_TIFFFaxWhiteTable + 2 * v132 + 1);
                if ((unint64_t)v27 < *(_QWORD *)(v7 + 48) + 2 * (unint64_t)*(unsigned int *)(v7 + 56))
                  *v27++ = v136 + v126;
                v124 += v136;
                if (v124 >= v13)
                  goto LABEL_262;
                v126 = 0;
                break;
              default:
                goto LABEL_258;
            }
            break;
          }
          while (1)
          {
            if (v125 > 12)
              goto LABEL_212;
            v137 = (*(uint64_t (**)(_QWORD))(v7 + 64))(*(_QWORD *)(v7 + 72));
            if (v137 == -1)
            {
              if (!*(_DWORD *)(v7 + 20))
                goto LABEL_284;
              v134 = *(_DWORD *)(v7 + 16);
            }
            else
            {
              v138 = *(_DWORD *)(v7 + 20);
              v134 = *(_DWORD *)(v7 + 16) | (TIFFBitRevTable[v137] << v138);
              v125 = v138 + 8;
              *(_DWORD *)(v7 + 16) = v134;
              *(_DWORD *)(v7 + 20) = v138 + 8;
              if (v138 > 4)
                goto LABEL_212;
              v139 = (*(uint64_t (**)(_QWORD))(v7 + 64))(*(_QWORD *)(v7 + 72));
              v134 = *(_DWORD *)(v7 + 16);
              if (v139 != -1)
              {
                v140 = *(_DWORD *)(v7 + 20);
                v134 |= TIFFBitRevTable[v139] << v140;
                v125 = v140 + 8;
                goto LABEL_212;
              }
            }
            v125 = 13;
LABEL_212:
            v141 = v134 & 0x1FFF;
            v142 = &pdf_TIFFFaxBlackTable[2 * v141];
            v143 = *((unsigned __int8 *)v142 + 1);
            v125 -= v143;
            v134 >>= v143;
            *(_DWORD *)(v7 + 16) = v134;
            *(_DWORD *)(v7 + 20) = v125;
            v144 = *(unsigned __int8 *)v142;
            if ((v144 - 10) >= 2)
              break;
            v145 = pdf_TIFFFaxBlackTable[2 * v141 + 1];
            v124 += v145;
            v126 += v145;
          }
          if (v144 != 8)
          {
            if (v144 == 12)
LABEL_257:
              *(_DWORD *)(v7 + 24) = 1;
            else
LABEL_258:
              *(_DWORD *)(v7 + 28) = 1;
            if (v126 && (unint64_t)v27 < *(_QWORD *)(v7 + 48) + 2 * (unint64_t)*(unsigned int *)(v7 + 56))
              *v27++ = v126;
            goto LABEL_262;
          }
          v146 = pdf_TIFFFaxBlackTable[2 * v141 + 1];
          if ((unint64_t)v27 < *(_QWORD *)(v7 + 48) + 2 * (unint64_t)*(unsigned int *)(v7 + 56))
            *v27++ = v146 + v126;
          v124 += v146;
          if (v124 >= v13)
          {
LABEL_262:
            if (v124 != v13)
            {
              v159 = v124 > v13;
              if (v124 > v13 && v27 > v8)
              {
                v160 = v27 - 1;
                v161 = v27 - 1;
                do
                {
                  v162 = *v161--;
                  v124 -= v162;
                  v159 = v124 > v13;
                  v163 = v124 > v13 && v160 > v8;
                  v160 = v161;
                }
                while (v163);
                v27 = v161 + 1;
              }
              if (v124 >= v13)
              {
                if (v159)
                {
                  v165 = *(_QWORD *)(v7 + 48) + 2 * *(unsigned int *)(v7 + 56);
                  if ((unint64_t)v27 < v165)
                    *v27++ = v13;
                  if ((unint64_t)v27 < v165)
                    *v27++ = 0;
                }
              }
              else
              {
                v164 = *(_QWORD *)(v7 + 48) + 2 * *(unsigned int *)(v7 + 56);
                if ((((_DWORD)v27 - (_DWORD)v8) & 2) != 0 && (unint64_t)v27 < v164)
                  *v27++ = 0;
                if ((unint64_t)v27 < v164)
                  *v27++ = v13 - (v124 & ~(unsigned __int16)(v124 >> 31));
              }
            }
            if (*(_DWORD *)(v7 + 28))
              goto LABEL_557;
            fill_runs(v321, v8, v27, v13, *(_DWORD *)(v7 + 4) & 0x10);
            goto LABEL_563;
          }
        }
      }
      if (v123 < 0)
        goto LABEL_557;
      *(_DWORD *)(v7 + 24) = 0;
      v147 = *(_DWORD *)(v7 + 20);
      if (v147 <= 0)
      {
        v148 = (*(uint64_t (**)(_QWORD))(v7 + 64))(*(_QWORD *)(v7 + 72));
        if (v148 == -1)
        {
          if (!*(_DWORD *)(v7 + 20))
            goto LABEL_557;
          v147 = 1;
        }
        else
        {
          v149 = *(_DWORD *)(v7 + 20);
          *(_DWORD *)(v7 + 16) |= TIFFBitRevTable[v148] << v149;
          v147 = v149 + 8;
        }
      }
      v320 = a2;
      v322 = a3;
      v170 = v147 - 1;
      v13 = *(_DWORD *)(v7 + 12);
      v171 = *(_DWORD *)(v7 + 16);
      v172 = v171 >> 1;
      *(_DWORD *)(v7 + 16) = v171 >> 1;
      *(_DWORD *)(v7 + 20) = v170;
      v8 = *(_WORD **)(v7 + 48);
      if ((v171 & 1) == 0)
      {
        if (v13 < 1)
        {
          v173 = 0;
          v27 = *(_WORD **)(v7 + 48);
          goto LABEL_463;
        }
        v324 = v6;
        LOWORD(v6) = 0;
        v173 = 0;
        j = 0;
        v175 = *(unsigned __int16 **)(v7 + 40);
        v178 = *v175;
        v177 = v175 + 1;
        v176 = v178;
        v27 = *(_WORD **)(v7 + 48);
LABEL_301:
        if (v170 <= 6)
        {
          v179 = (*(uint64_t (**)(_QWORD))(v7 + 64))(*(_QWORD *)(v7 + 72));
          if (v179 == -1)
          {
            if (!*(_DWORD *)(v7 + 20))
            {
              v6 = v324;
LABEL_604:
              if (j)
                goto LABEL_605;
              goto LABEL_607;
            }
            v172 = *(_DWORD *)(v7 + 16);
            v170 = 7;
          }
          else
          {
            v180 = *(_DWORD *)(v7 + 20);
            v172 = *(_DWORD *)(v7 + 16) | (TIFFBitRevTable[v179] << v180);
            v170 = v180 + 8;
          }
        }
        v181 = v172 & 0x7F;
        v182 = *((unsigned __int8 *)&pdf_TIFFFaxMainTable + 4 * v181 + 1);
        v170 -= v182;
        v172 >>= v182;
        *(_DWORD *)(v7 + 16) = v172;
        *(_DWORD *)(v7 + 20) = v170;
        switch(4 * v181)
        {
          case 0:
          case 0x200:
          case 0x212:
            if ((unint64_t)v27 < *(_QWORD *)(v7 + 48) + 2 * (unint64_t)*(unsigned int *)(v7 + 56))
              *v27++ = v13 - v173;
            v6 = v324;
            if (v170 <= 3)
            {
              v312 = (*(uint64_t (**)(_QWORD))(v7 + 64))(*(_QWORD *)(v7 + 72));
              if (v312 == -1)
              {
                if (!*(_DWORD *)(v7 + 20))
                  goto LABEL_604;
                v172 = *(_DWORD *)(v7 + 16);
                v170 = 4;
              }
              else
              {
                v313 = *(_DWORD *)(v7 + 20);
                v172 = *(_DWORD *)(v7 + 16) | (TIFFBitRevTable[v312] << v313);
                v170 = v313 + 8;
              }
            }
            if ((v172 & 0xF) != 0)
              *(_DWORD *)(v7 + 28) = 1;
            result = 0;
            *(_DWORD *)(v7 + 16) = v172 >> 4;
            *(_DWORD *)(v7 + 20) = v170 - 4;
            *(_DWORD *)(v7 + 24) = 1;
            goto LABEL_558;
          case 4:
          case 9:
          case 0xCLL:
          case 0x11:
          case 0x14:
          case 0x19:
          case 0x1CLL:
          case 0x24:
          case 0x29:
          case 0x2CLL:
          case 0x31:
          case 0x34:
          case 0x39:
          case 0x3CLL:
          case 0x44:
          case 0x49:
          case 0x4CLL:
          case 0x51:
          case 0x54:
          case 0x59:
          case 0x5CLL:
          case 0x64:
          case 0x69:
          case 0x6CLL:
          case 0x71:
          case 0x74:
          case 0x79:
          case 0x7CLL:
          case 0x82:
          case 0x84:
          case 0x89:
          case 0x8CLL:
          case 0x91:
          case 0x94:
          case 0x99:
          case 0x9CLL:
          case 0xA4:
          case 0xA9:
          case 0xACLL:
          case 0xB1:
          case 0xB4:
          case 0xB9:
          case 0xBCLL:
          case 0xC4:
          case 0xC9:
          case 0xCCLL:
          case 0xD1:
          case 0xD4:
          case 0xD9:
          case 0xDCLL:
          case 0xE4:
          case 0xE9:
          case 0xECLL:
          case 0xF1:
          case 0xF4:
          case 0xF9:
          case 0xFCLL:
          case 0x104:
          case 0x109:
          case 0x10CLL:
          case 0x111:
          case 0x114:
          case 0x119:
          case 0x11CLL:
          case 0x124:
          case 0x129:
          case 0x12CLL:
          case 0x131:
          case 0x134:
          case 0x139:
          case 0x13CLL:
          case 0x144:
          case 0x149:
          case 0x14CLL:
          case 0x151:
          case 0x154:
          case 0x159:
          case 0x15CLL:
          case 0x164:
          case 0x169:
          case 0x16CLL:
          case 0x171:
          case 0x174:
          case 0x179:
          case 0x17CLL:
          case 0x182:
          case 0x184:
          case 0x189:
          case 0x18CLL:
          case 0x191:
          case 0x194:
          case 0x199:
          case 0x19CLL:
          case 0x1A4:
          case 0x1A9:
          case 0x1ACLL:
          case 0x1B1:
          case 0x1B4:
          case 0x1B9:
          case 0x1BCLL:
          case 0x1C4:
          case 0x1C9:
          case 0x1CCLL:
          case 0x1D1:
          case 0x1D4:
          case 0x1D9:
          case 0x1DCLL:
          case 0x1E4:
          case 0x1E9:
          case 0x1ECLL:
          case 0x1F1:
          case 0x1F4:
          case 0x1F9:
          case 0x1FCLL:
          case 0x206:
            v207 = *(unsigned int *)(v7 + 56);
            if (v27 != v8 && v176 <= v173)
            {
              v208 = v177 + 1;
              do
              {
                if ((unint64_t)v208 >= *(_QWORD *)(v7 + 40) + 2 * v207)
                  break;
                v209 = *(v208 - 1);
                v210 = *v208;
                v208 += 2;
                v176 += v209 + v210;
              }
              while (v176 <= v173);
              v177 = v208 - 1;
            }
            v173 = v176;
            if ((unint64_t)v27 < *(_QWORD *)(v7 + 48) + 2 * v207)
              *v27++ = j + v6 + v176;
            v6 = v324;
            if ((unint64_t)v177 >= *(_QWORD *)(v7 + 40) + 2 * v207)
              goto LABEL_463;
            j = 0;
            v211 = *v177++;
            v176 += v211;
            goto LABEL_373;
          case 5:
          case 0xALL:
          case 0xDLL:
          case 0x15:
          case 0x1ALL:
          case 0x1DLL:
          case 0x20:
          case 0x25:
          case 0x2ALL:
          case 0x2DLL:
          case 0x35:
          case 0x3ALL:
          case 0x3DLL:
          case 0x45:
          case 0x4ALL:
          case 0x4DLL:
          case 0x55:
          case 0x5ALL:
          case 0x5DLL:
          case 0x60:
          case 0x65:
          case 0x6ALL:
          case 0x6DLL:
          case 0x75:
          case 0x7ALL:
          case 0x7DLL:
          case 0x85:
          case 0x8ALL:
          case 0x8DLL:
          case 0x95:
          case 0x9ALL:
          case 0x9DLL:
          case 0xA0:
          case 0xA5:
          case 0xAALL:
          case 0xADLL:
          case 0xB5:
          case 0xBALL:
          case 0xBDLL:
          case 0xC5:
          case 0xCALL:
          case 0xCDLL:
          case 0xD5:
          case 0xDALL:
          case 0xDDLL:
          case 0xE0:
          case 0xE5:
          case 0xEALL:
          case 0xEDLL:
          case 0xF5:
          case 0xFALL:
          case 0xFDLL:
          case 0x105:
          case 0x10ALL:
          case 0x10DLL:
          case 0x115:
          case 0x11ALL:
          case 0x11DLL:
          case 0x120:
          case 0x125:
          case 0x12ALL:
          case 0x12DLL:
          case 0x135:
          case 0x13ALL:
          case 0x13DLL:
          case 0x145:
          case 0x14ALL:
          case 0x14DLL:
          case 0x155:
          case 0x15ALL:
          case 0x15DLL:
          case 0x160:
          case 0x165:
          case 0x16ALL:
          case 0x16DLL:
          case 0x175:
          case 0x17ALL:
          case 0x17DLL:
          case 0x185:
          case 0x18ALL:
          case 0x18DLL:
          case 0x195:
          case 0x19ALL:
          case 0x19DLL:
          case 0x1A0:
          case 0x1A5:
          case 0x1AALL:
          case 0x1ADLL:
          case 0x1B5:
          case 0x1BALL:
          case 0x1BDLL:
          case 0x1C5:
          case 0x1CALL:
          case 0x1CDLL:
          case 0x1D5:
          case 0x1DALL:
          case 0x1DDLL:
          case 0x1E0:
          case 0x1E5:
          case 0x1EALL:
          case 0x1EDLL:
          case 0x1F5:
          case 0x1FALL:
          case 0x1FDLL:
            v183 = *(_QWORD *)(v7 + 40);
            v184 = *(unsigned int *)(v7 + 56);
            if (v27 == v8 || v176 > v173)
            {
              v6 = v324;
            }
            else
            {
              v185 = v177 + 1;
              v6 = v324;
              do
              {
                if ((unint64_t)v185 >= v183 + 2 * v184)
                  break;
                v186 = *(v185 - 1);
                v187 = *v185;
                v185 += 2;
                v176 += v186 + v187;
              }
              while (v176 <= v173);
              v177 = v185 - 1;
            }
            v221 = v183 + 2 * v184;
            if ((unint64_t)v177 >= v221)
              goto LABEL_460;
            v222 = v176 + *v177;
            j += v222 - v173;
            if ((unint64_t)(v177 + 1) >= v221)
            {
              v173 = v176 + *v177;
              goto LABEL_460;
            }
            v223 = v177[1];
            v177 += 2;
            v176 = v222 + v223;
            v173 = v222;
            goto LABEL_373;
          case 8:
          case 0x28:
          case 0x40:
          case 0x48:
          case 0x68:
          case 0x80:
          case 0x88:
          case 0xA8:
          case 0xC8:
          case 0xE8:
          case 0x108:
          case 0x128:
          case 0x140:
          case 0x148:
          case 0x168:
          case 0x188:
          case 0x1A8:
          case 0x1C8:
          case 0x1E8:
          case 0x209:
          case 0x20ELL:
          case 0x215:
            if (v27 == v8 || v176 > v173)
            {
              v6 = v324;
            }
            else
            {
              v218 = v177 + 1;
              v6 = v324;
              do
              {
                if ((unint64_t)v218 >= *(_QWORD *)(v7 + 40) + 2 * (unint64_t)*(unsigned int *)(v7 + 56))
                  break;
                v219 = *(v218 - 1);
                v220 = *v218;
                v218 += 2;
                v176 += v219 + v220;
              }
              while (v176 <= v173);
              v177 = v218 - 1;
            }
            v224 = v173 + *((unsigned __int16 *)&pdf_TIFFFaxMainTable + 2 * v181 + 1);
            v68 = __OFSUB__(v176, v224);
            v225 = v176 - v224;
            if (v225 < 0 != v68)
              goto LABEL_460;
            if ((unint64_t)v27 < *(_QWORD *)(v7 + 48) + 2 * (unint64_t)*(unsigned int *)(v7 + 56))
              *v27++ = v225 + j;
            j = 0;
            v173 += v225;
            v226 = *--v177;
            v176 -= v226;
            goto LABEL_373;
          case 0x10:
          case 0x30:
          case 0x42:
          case 0x50:
          case 0x70:
          case 0x90:
          case 0xB0:
          case 0xC2:
          case 0xD0:
          case 0xF0:
          case 0x110:
          case 0x130:
          case 0x142:
          case 0x150:
          case 0x170:
          case 0x190:
          case 0x1B0:
          case 0x1C2:
          case 0x1D0:
          case 0x1F0:
            v6 = v324;
            if ((((_DWORD)v27 - (_DWORD)v8) & 2) == 0)
            {
              while (1)
              {
                if (v170 > 11)
                  goto LABEL_322;
                v188 = (*(uint64_t (**)(_QWORD))(v7 + 64))(*(_QWORD *)(v7 + 72));
                if (v188 == -1)
                {
                  if (!*(_DWORD *)(v7 + 20))
                    goto LABEL_604;
                  v172 = *(_DWORD *)(v7 + 16);
                }
                else
                {
                  v189 = *(_DWORD *)(v7 + 20);
                  v172 = *(_DWORD *)(v7 + 16) | (TIFFBitRevTable[v188] << v189);
                  v170 = v189 + 8;
                  *(_DWORD *)(v7 + 16) = v172;
                  *(_DWORD *)(v7 + 20) = v189 + 8;
                  if (v189 > 3)
                    goto LABEL_322;
                  v190 = (*(uint64_t (**)(_QWORD))(v7 + 64))(*(_QWORD *)(v7 + 72));
                  v172 = *(_DWORD *)(v7 + 16);
                  if (v190 != -1)
                  {
                    v191 = *(_DWORD *)(v7 + 20);
                    v172 |= TIFFBitRevTable[v190] << v191;
                    v170 = v191 + 8;
                    goto LABEL_322;
                  }
                }
                v170 = 12;
LABEL_322:
                v192 = v172 & 0xFFF;
                v193 = (unsigned __int8 *)&pdf_TIFFFaxWhiteTable + 4 * v192;
                v194 = v193[1];
                v170 -= v194;
                v172 >>= v194;
                *(_DWORD *)(v7 + 16) = v172;
                *(_DWORD *)(v7 + 20) = v170;
                v195 = *v193;
                if (v195 != 9 && v195 != 11)
                {
                  if (v195 != 7)
                    goto LABEL_459;
                  v227 = *((unsigned __int16 *)&pdf_TIFFFaxWhiteTable + 2 * v192 + 1);
                  if ((unint64_t)v27 < *(_QWORD *)(v7 + 48) + 2 * (unint64_t)*(unsigned int *)(v7 + 56))
                    *v27++ = v227 + j;
                  for (j = 0; ; j += v227)
                  {
                    v173 += v227;
                    if (v170 > 12)
                      goto LABEL_387;
                    v228 = (*(uint64_t (**)(_QWORD))(v7 + 64))(*(_QWORD *)(v7 + 72));
                    if (v228 == -1)
                    {
                      if (!*(_DWORD *)(v7 + 20))
                        goto LABEL_604;
                      v172 = *(_DWORD *)(v7 + 16);
                    }
                    else
                    {
                      v229 = *(_DWORD *)(v7 + 20);
                      v172 = *(_DWORD *)(v7 + 16) | (TIFFBitRevTable[v228] << v229);
                      v170 = v229 + 8;
                      *(_DWORD *)(v7 + 16) = v172;
                      *(_DWORD *)(v7 + 20) = v229 + 8;
                      if (v229 > 4)
                        goto LABEL_387;
                      v230 = (*(uint64_t (**)(_QWORD))(v7 + 64))(*(_QWORD *)(v7 + 72));
                      v172 = *(_DWORD *)(v7 + 16);
                      if (v230 != -1)
                      {
                        v231 = *(_DWORD *)(v7 + 20);
                        v172 |= TIFFBitRevTable[v230] << v231;
                        v170 = v231 + 8;
                        goto LABEL_387;
                      }
                    }
                    v170 = 13;
LABEL_387:
                    v232 = v172 & 0x1FFF;
                    v233 = &pdf_TIFFFaxBlackTable[2 * v232];
                    v234 = *((unsigned __int8 *)v233 + 1);
                    v170 -= v234;
                    v172 >>= v234;
                    *(_DWORD *)(v7 + 16) = v172;
                    *(_DWORD *)(v7 + 20) = v170;
                    v235 = *(unsigned __int8 *)v233;
                    if ((v235 - 10) >= 2)
                    {
                      if (v235 == 8)
                      {
                        v246 = (char *)&pdf_TIFFFaxBlackTable[2 * v232];
                        goto LABEL_411;
                      }
LABEL_459:
                      *(_DWORD *)(v7 + 28) = 1;
LABEL_460:
                      if (j)
                      {
LABEL_461:
                        if ((unint64_t)v27 < *(_QWORD *)(v7 + 48)
                                                   + 2 * (unint64_t)*(unsigned int *)(v7 + 56))
                          *v27++ = j;
                      }
LABEL_463:
                      if (v173 == v13)
                        goto LABEL_560;
                      v274 = v173 > v13;
                      if (v173 > v13 && v27 > v8)
                      {
                        v275 = v27 - 1;
                        v276 = v27 - 1;
                        do
                        {
                          v277 = *v276--;
                          v173 -= v277;
                          v274 = v173 > v13;
                          v278 = v173 > v13 && v275 > v8;
                          v275 = v276;
                        }
                        while (v278);
                        v27 = v276 + 1;
                      }
                      if (v173 < v13)
                      {
                        v279 = *(_QWORD *)(v7 + 48) + 2 * *(unsigned int *)(v7 + 56);
                        if ((((_DWORD)v27 - (_DWORD)v8) & 2) != 0 && (unint64_t)v27 < v279)
                          *v27++ = 0;
                        if ((unint64_t)v27 >= v279)
                          goto LABEL_560;
                        v280 = v173 & ~(v173 >> 31);
                        goto LABEL_499;
                      }
                      goto LABEL_500;
                    }
                    v227 = pdf_TIFFFaxBlackTable[2 * v232 + 1];
                  }
                }
                v197 = *((unsigned __int16 *)&pdf_TIFFFaxWhiteTable + 2 * v192 + 1);
                j += v197;
                v173 += v197;
              }
            }
            break;
          case 0x18:
          case 0x21:
          case 0x38:
          case 0x58:
          case 0x61:
          case 0x78:
          case 0x98:
          case 0xA1:
          case 0xB8:
          case 0xC0:
          case 0xD8:
          case 0xE1:
          case 0xF8:
          case 0x118:
          case 0x121:
          case 0x138:
          case 0x158:
          case 0x161:
          case 0x178:
          case 0x180:
          case 0x198:
          case 0x1A1:
          case 0x1B8:
          case 0x1C0:
          case 0x1D8:
          case 0x1E1:
          case 0x1F8:
          case 0x205:
          case 0x20DLL:
            v212 = *(unsigned int *)(v7 + 56);
            if (v27 != v8 && v176 <= v173)
            {
              v213 = v177 + 1;
              do
              {
                if ((unint64_t)v213 >= *(_QWORD *)(v7 + 40) + 2 * v212)
                  break;
                v214 = *(v213 - 1);
                v215 = *v213;
                v213 += 2;
                v176 += v214 + v215;
              }
              while (v176 <= v173);
              v177 = v213 - 1;
            }
            v216 = *((unsigned __int16 *)&pdf_TIFFFaxMainTable + 2 * v181 + 1);
            if ((unint64_t)v27 < *(_QWORD *)(v7 + 48) + 2 * v212)
              *v27++ = v216 + j + v6 + v176;
            v6 = v324;
            v173 = v176 + v216;
            if ((unint64_t)v177 >= *(_QWORD *)(v7 + 40) + 2 * v212)
              goto LABEL_463;
            j = 0;
            v217 = *v177++;
            v176 += v217;
            goto LABEL_373;
          case 0x41:
          case 0xC1:
          case 0x100:
          case 0x141:
          case 0x1C1:
          case 0x211:
          case 0x219:
            if ((unint64_t)v27 < *(_QWORD *)(v7 + 48) + 2 * (unint64_t)*(unsigned int *)(v7 + 56))
              *v27++ = v13 - v173;
            goto LABEL_596;
          default:
            *(_DWORD *)(v7 + 28) = 1;
LABEL_596:
            v6 = v324;
            goto LABEL_460;
        }
        while (1)
        {
          if (v170 > 12)
            goto LABEL_336;
          v198 = (*(uint64_t (**)(_QWORD))(v7 + 64))(*(_QWORD *)(v7 + 72));
          if (v198 == -1)
          {
            if (!*(_DWORD *)(v7 + 20))
              goto LABEL_604;
            v172 = *(_DWORD *)(v7 + 16);
          }
          else
          {
            v199 = *(_DWORD *)(v7 + 20);
            v172 = *(_DWORD *)(v7 + 16) | (TIFFBitRevTable[v198] << v199);
            v170 = v199 + 8;
            *(_DWORD *)(v7 + 16) = v172;
            *(_DWORD *)(v7 + 20) = v199 + 8;
            if (v199 > 4)
              goto LABEL_336;
            v200 = (*(uint64_t (**)(_QWORD))(v7 + 64))(*(_QWORD *)(v7 + 72));
            v172 = *(_DWORD *)(v7 + 16);
            if (v200 != -1)
            {
              v201 = *(_DWORD *)(v7 + 20);
              v172 |= TIFFBitRevTable[v200] << v201;
              v170 = v201 + 8;
              goto LABEL_336;
            }
          }
          v170 = 13;
LABEL_336:
          v202 = v172 & 0x1FFF;
          v203 = &pdf_TIFFFaxBlackTable[2 * v202];
          v204 = *((unsigned __int8 *)v203 + 1);
          v170 -= v204;
          v172 >>= v204;
          *(_DWORD *)(v7 + 16) = v172;
          *(_DWORD *)(v7 + 20) = v170;
          v205 = *(unsigned __int8 *)v203;
          if ((v205 - 10) >= 2)
          {
            if (v205 != 8)
              goto LABEL_459;
            v236 = pdf_TIFFFaxBlackTable[2 * v202 + 1];
            if ((unint64_t)v27 < *(_QWORD *)(v7 + 48) + 2 * (unint64_t)*(unsigned int *)(v7 + 56))
              *v27++ = v236 + j;
            for (j = 0; ; j += v236)
            {
              v173 += v236;
              if (v170 > 11)
                goto LABEL_401;
              v237 = (*(uint64_t (**)(_QWORD))(v7 + 64))(*(_QWORD *)(v7 + 72));
              if (v237 == -1)
              {
                if (!*(_DWORD *)(v7 + 20))
                  goto LABEL_604;
                v172 = *(_DWORD *)(v7 + 16);
              }
              else
              {
                v238 = *(_DWORD *)(v7 + 20);
                v172 = *(_DWORD *)(v7 + 16) | (TIFFBitRevTable[v237] << v238);
                v170 = v238 + 8;
                *(_DWORD *)(v7 + 16) = v172;
                *(_DWORD *)(v7 + 20) = v238 + 8;
                if (v238 > 3)
                  goto LABEL_401;
                v239 = (*(uint64_t (**)(_QWORD))(v7 + 64))(*(_QWORD *)(v7 + 72));
                v172 = *(_DWORD *)(v7 + 16);
                if (v239 != -1)
                {
                  v240 = *(_DWORD *)(v7 + 20);
                  v172 |= TIFFBitRevTable[v239] << v240;
                  v170 = v240 + 8;
                  goto LABEL_401;
                }
              }
              v170 = 12;
LABEL_401:
              v241 = v172 & 0xFFF;
              v242 = (unsigned __int8 *)&pdf_TIFFFaxWhiteTable + 4 * v241;
              v243 = v242[1];
              v170 -= v243;
              v172 >>= v243;
              *(_DWORD *)(v7 + 16) = v172;
              *(_DWORD *)(v7 + 20) = v170;
              v244 = *v242;
              if (v244 != 9 && v244 != 11)
              {
                if (v244 != 7)
                  goto LABEL_459;
                v246 = (char *)&pdf_TIFFFaxWhiteTable + 4 * v241;
LABEL_411:
                v247 = *((unsigned __int16 *)v246 + 1);
                v248 = *(unsigned int *)(v7 + 56);
                if ((unint64_t)v27 < *(_QWORD *)(v7 + 48) + 2 * v248)
                  *v27++ = v247 + j;
                v173 += v247;
                if (v27 == v8)
                {
                  j = 0;
                  v27 = v8;
                }
                else if (v176 <= v173 && v176 < v13)
                {
                  v250 = *(_QWORD *)(v7 + 40) + 2 * v248;
                  v251 = v177 + 1;
                  do
                  {
                    if ((unint64_t)v251 >= v250)
                      break;
                    v252 = *(v251 - 1);
                    v253 = *v251;
                    v251 += 2;
                    v176 += v252 + v253;
                  }
                  while (v176 <= v173 && v176 < v13);
                  j = 0;
                  v177 = v251 - 1;
                }
                else
                {
                  j = 0;
                }
LABEL_373:
                LODWORD(v6) = -v173;
                if (v173 >= v13)
                {
                  if (!j)
                  {
                    v6 = v324;
                    goto LABEL_463;
                  }
                  v6 = v324;
                  if (v170 > 0)
                  {
LABEL_630:
                    if ((v172 & 1) != 0)
                    {
                      *(_DWORD *)(v7 + 16) = v172 >> 1;
                      *(_DWORD *)(v7 + 20) = v170 - 1;
                    }
                    else
                    {
                      *(_DWORD *)(v7 + 28) = 1;
                    }
                    goto LABEL_461;
                  }
                  v304 = (*(uint64_t (**)(_QWORD))(v7 + 64))(*(_QWORD *)(v7 + 72));
                  if (v304 != -1)
                  {
                    v305 = *(_DWORD *)(v7 + 20);
                    v172 = *(_DWORD *)(v7 + 16) | (TIFFBitRevTable[v304] << v305);
                    v170 = v305 + 8;
                    *(_DWORD *)(v7 + 16) = v172;
                    *(_DWORD *)(v7 + 20) = v170;
                    goto LABEL_630;
                  }
                  if (*(_DWORD *)(v7 + 20))
                  {
                    v170 = 1;
                    *(_DWORD *)(v7 + 20) = 1;
                    v172 = *(_DWORD *)(v7 + 16);
                    goto LABEL_630;
                  }
LABEL_605:
                  if ((unint64_t)v27 < *(_QWORD *)(v7 + 48) + 2 * (unint64_t)*(unsigned int *)(v7 + 56))
                    *v27++ = j;
LABEL_607:
                  if (v173 == v13)
                    goto LABEL_557;
                  v150 = v173 > v13;
                  if (v173 > v13 && v27 > v8)
                  {
                    v314 = v27 - 1;
                    v315 = v27 - 1;
                    do
                    {
                      v316 = *v315--;
                      v173 -= v316;
                      v150 = v173 > v13;
                      v317 = v173 > v13 && v314 > v8;
                      v314 = v315;
                    }
                    while (v317);
                    v27 = v315 + 1;
                  }
                  if (v173 < v13)
                  {
                    v318 = *(_QWORD *)(v7 + 48) + 2 * *(unsigned int *)(v7 + 56);
                    if ((((_DWORD)v27 - (_DWORD)v8) & 2) != 0 && (unint64_t)v27 < v318)
                      *v27++ = 0;
                    if ((unint64_t)v27 >= v318)
                      goto LABEL_557;
                    result = 0;
                    v156 = v173 & ~(v173 >> 31);
                    goto LABEL_622;
                  }
                  goto LABEL_623;
                }
                goto LABEL_301;
              }
              v236 = *((unsigned __int16 *)&pdf_TIFFFaxWhiteTable + 2 * v241 + 1);
            }
          }
          v206 = pdf_TIFFFaxBlackTable[2 * v202 + 1];
          j += v206;
          v173 += v206;
        }
      }
      v124 = 0;
      v27 = *(_WORD **)(v7 + 48);
LABEL_428:
      v255 = 0;
      while (2)
      {
        if (v170 > 11)
          goto LABEL_437;
        v256 = (*(uint64_t (**)(_QWORD))(v7 + 64))(*(_QWORD *)(v7 + 72));
        if (v256 == -1)
        {
          if (!*(_DWORD *)(v7 + 20))
          {
LABEL_507:
            if (v255 && (unint64_t)v27 < *(_QWORD *)(v7 + 48) + 2 * (unint64_t)*(unsigned int *)(v7 + 56))
              *v27++ = v255;
            if (v124 == v13)
              goto LABEL_557;
            v150 = v124 > v13;
            if (v124 > v13 && v27 > v8)
            {
              v287 = v27 - 1;
              v167 = v27 - 1;
              do
              {
                v288 = *v167--;
                v124 -= v288;
                v150 = v124 > v13;
                v289 = v124 > v13 && v287 > v8;
                v287 = v167;
              }
              while (v289);
LABEL_518:
              v27 = v167 + 1;
            }
LABEL_519:
            if (v124 < v13)
            {
              v290 = *(_QWORD *)(v7 + 48) + 2 * *(unsigned int *)(v7 + 56);
              if ((((_DWORD)v27 - (_DWORD)v8) & 2) != 0 && (unint64_t)v27 < v290)
                *v27++ = 0;
              if ((unint64_t)v27 >= v290)
                goto LABEL_557;
              result = 0;
              v156 = v124 & ~(v124 >> 31);
              goto LABEL_622;
            }
LABEL_623:
            if (!v150)
              goto LABEL_557;
            v319 = *(_QWORD *)(v7 + 48) + 2 * *(unsigned int *)(v7 + 56);
            if ((unint64_t)v27 < v319)
              *v27++ = v13;
            if ((unint64_t)v27 >= v319)
              goto LABEL_557;
            result = 0;
            *v27 = 0;
            goto LABEL_558;
          }
          v172 = *(_DWORD *)(v7 + 16);
        }
        else
        {
          v257 = *(_DWORD *)(v7 + 20);
          v172 = *(_DWORD *)(v7 + 16) | (TIFFBitRevTable[v256] << v257);
          v170 = v257 + 8;
          *(_DWORD *)(v7 + 16) = v172;
          *(_DWORD *)(v7 + 20) = v257 + 8;
          if (v257 > 3)
            goto LABEL_437;
          v258 = (*(uint64_t (**)(_QWORD))(v7 + 64))(*(_QWORD *)(v7 + 72));
          v172 = *(_DWORD *)(v7 + 16);
          if (v258 != -1)
          {
            v259 = *(_DWORD *)(v7 + 20);
            v172 |= TIFFBitRevTable[v258] << v259;
            v170 = v259 + 8;
            goto LABEL_437;
          }
        }
        v170 = 12;
LABEL_437:
        v260 = v172 & 0xFFF;
        v261 = *((unsigned __int8 *)&pdf_TIFFFaxWhiteTable + 4 * v260 + 1);
        v170 -= v261;
        v172 >>= v261;
        *(_DWORD *)(v7 + 16) = v172;
        *(_DWORD *)(v7 + 20) = v170;
        switch(4 * v260)
        {
          case 0:
          case 0x12:
            goto LABEL_479;
          case 1:
          case 0xALL:
          case 0x16:
          case 0x18:
            v262 = *((unsigned __int16 *)&pdf_TIFFFaxWhiteTable + 2 * v260 + 1);
            v124 += v262;
            v255 += v262;
            continue;
          case 4:
          case 8:
          case 0xCLL:
          case 0x10:
          case 0x14:
            v263 = *((unsigned __int16 *)&pdf_TIFFFaxWhiteTable + 2 * v260 + 1);
            if ((unint64_t)v27 < *(_QWORD *)(v7 + 48) + 2 * (unint64_t)*(unsigned int *)(v7 + 56))
              *v27++ = v263 + v255;
            v124 += v263;
            if (v124 >= v13)
              goto LABEL_484;
            v255 = 0;
            break;
          default:
            goto LABEL_480;
        }
        break;
      }
      while (1)
      {
        if (v170 > 12)
          goto LABEL_451;
        v264 = (*(uint64_t (**)(_QWORD))(v7 + 64))(*(_QWORD *)(v7 + 72));
        if (v264 == -1)
        {
          if (!*(_DWORD *)(v7 + 20))
            goto LABEL_507;
          v172 = *(_DWORD *)(v7 + 16);
        }
        else
        {
          v265 = *(_DWORD *)(v7 + 20);
          v172 = *(_DWORD *)(v7 + 16) | (TIFFBitRevTable[v264] << v265);
          v170 = v265 + 8;
          *(_DWORD *)(v7 + 16) = v172;
          *(_DWORD *)(v7 + 20) = v265 + 8;
          if (v265 > 4)
            goto LABEL_451;
          v266 = (*(uint64_t (**)(_QWORD))(v7 + 64))(*(_QWORD *)(v7 + 72));
          v172 = *(_DWORD *)(v7 + 16);
          if (v266 != -1)
          {
            v267 = *(_DWORD *)(v7 + 20);
            v172 |= TIFFBitRevTable[v266] << v267;
            v170 = v267 + 8;
            goto LABEL_451;
          }
        }
        v170 = 13;
LABEL_451:
        v268 = v172 & 0x1FFF;
        v269 = &pdf_TIFFFaxBlackTable[2 * v268];
        v270 = *((unsigned __int8 *)v269 + 1);
        v170 -= v270;
        v172 >>= v270;
        *(_DWORD *)(v7 + 16) = v172;
        *(_DWORD *)(v7 + 20) = v170;
        v271 = *(unsigned __int8 *)v269;
        if ((v271 - 10) >= 2)
        {
          if (v271 != 8)
          {
            if (v271 == 12)
LABEL_479:
              *(_DWORD *)(v7 + 24) = 1;
            else
LABEL_480:
              *(_DWORD *)(v7 + 28) = 1;
            if (v255 && (unint64_t)v27 < *(_QWORD *)(v7 + 48) + 2 * (unint64_t)*(unsigned int *)(v7 + 56))
              *v27++ = v255;
LABEL_484:
            if (v124 == v13)
              goto LABEL_560;
            v274 = v124 > v13;
            if (v124 > v13 && v27 > v8)
            {
              v281 = v27 - 1;
              v282 = v27 - 1;
              do
              {
                v283 = *v282--;
                v124 -= v283;
                v274 = v124 > v13;
                v284 = v124 > v13 && v281 > v8;
                v281 = v282;
              }
              while (v284);
              v27 = v282 + 1;
            }
            if (v124 < v13)
            {
              v285 = *(_QWORD *)(v7 + 48) + 2 * *(unsigned int *)(v7 + 56);
              if ((((_DWORD)v27 - (_DWORD)v8) & 2) != 0 && (unint64_t)v27 < v285)
                *v27++ = 0;
              if ((unint64_t)v27 >= v285)
                goto LABEL_560;
              v280 = v124 & ~(v124 >> 31);
LABEL_499:
              *v27++ = v13 - v280;
              goto LABEL_560;
            }
LABEL_500:
            if (v274)
            {
              v286 = *(_QWORD *)(v7 + 48) + 2 * *(unsigned int *)(v7 + 56);
              if ((unint64_t)v27 < v286)
                *v27++ = v13;
              if ((unint64_t)v27 < v286)
                *v27++ = 0;
            }
            goto LABEL_560;
          }
          v273 = pdf_TIFFFaxBlackTable[2 * v268 + 1];
          if ((unint64_t)v27 < *(_QWORD *)(v7 + 48) + 2 * (unint64_t)*(unsigned int *)(v7 + 56))
            *v27++ = v273 + v255;
          v124 += v273;
          if (v124 >= v13)
            goto LABEL_484;
          goto LABEL_428;
        }
        v272 = pdf_TIFFFaxBlackTable[2 * v268 + 1];
        v124 += v272;
        v255 += v272;
      }
    }
    for (k = *(_DWORD *)(v7 + 20); ; *(_DWORD *)(v7 + 20) = k)
    {
      if (k > 10)
        goto LABEL_183;
      v118 = (*(uint64_t (**)(_QWORD))(v7 + 64))(*(_QWORD *)(v7 + 72));
      if (v118 == -1)
        break;
      v119 = *(_DWORD *)(v7 + 20);
      k = v119 + 8;
      *(_DWORD *)(v7 + 16) |= TIFFBitRevTable[v118] << v119;
      *(_DWORD *)(v7 + 20) = v119 + 8;
      if (v119 > 2)
        goto LABEL_183;
      v120 = (*(uint64_t (**)(_QWORD))(v7 + 64))(*(_QWORD *)(v7 + 72));
      if (v120 == -1)
        goto LABEL_181;
      v121 = *(_DWORD *)(v7 + 20);
      *(_DWORD *)(v7 + 16) |= TIFFBitRevTable[v120] << v121;
      k = v121 + 8;
LABEL_182:
      *(_DWORD *)(v7 + 20) = k;
LABEL_183:
      v122 = *(_DWORD *)(v7 + 16);
      if ((v122 & 0x7FF) == 0)
        goto LABEL_138;
      if ((*(_BYTE *)(v7 + 4) & 2) == 0)
      {
        v123 = 0;
        goto LABEL_187;
      }
      --k;
      *(_DWORD *)(v7 + 16) = v122 >> 1;
    }
    if (!*(_DWORD *)(v7 + 20))
    {
LABEL_186:
      v123 = -1;
      goto LABEL_187;
    }
LABEL_181:
    k = 11;
    goto LABEL_182;
  }
  v320 = a2;
  v322 = a3;
  v9 = *(unsigned __int16 **)(v7 + 40);
  v8 = *(_WORD **)(v7 + 48);
  v12 = *v9;
  v11 = v9 + 1;
  v10 = v12;
  v13 = *(_DWORD *)(v7 + 12);
  if ((*(_BYTE *)(v7 + 4) & 4) != 0)
  {
    v14 = *(_DWORD *)(v7 + 20);
    if ((v14 & 7) != 0)
    {
      *(_DWORD *)(v7 + 16) >>= v14 & 7;
      *(_DWORD *)(v7 + 20) = v14 & 0xFFFFFFF8;
    }
  }
  if (v13 < 1)
  {
    v16 = 0;
    v27 = v8;
    goto LABEL_536;
  }
  v325 = v8;
  LOWORD(v15) = 0;
  v16 = 0;
  v17 = 0;
  v18 = *(_DWORD *)(v7 + 20);
LABEL_9:
  if (v18 <= 6)
  {
    v19 = (*(uint64_t (**)(_QWORD))(v7 + 64))(*(_QWORD *)(v7 + 72));
    if (v19 == -1)
    {
      if (!*(_DWORD *)(v7 + 20))
      {
        v27 = v8;
        v6 = a1;
        v8 = v325;
LABEL_229:
        if (v17)
          goto LABEL_230;
        goto LABEL_232;
      }
      v18 = 7;
    }
    else
    {
      v20 = *(_DWORD *)(v7 + 20);
      *(_DWORD *)(v7 + 16) |= TIFFBitRevTable[v19] << v20;
      v18 = v20 + 8;
    }
  }
  v21 = *(_DWORD *)(v7 + 16);
  v22 = v21 & 0x7F;
  v23 = *((unsigned __int8 *)&pdf_TIFFFaxMainTable + 4 * v22 + 1);
  v18 -= v23;
  v24 = v21 >> v23;
  *(_DWORD *)(v7 + 16) = v24;
  *(_DWORD *)(v7 + 20) = v18;
  switch(4 * v22)
  {
    case 0:
    case 512:
    case 530:
      v27 = v8;
      if ((unint64_t)v8 < *(_QWORD *)(v7 + 48) + 2 * (unint64_t)*(unsigned int *)(v7 + 56))
      {
        *v8 = v13 - v16;
        v27 = v8 + 1;
      }
      v6 = a1;
      v8 = v325;
      if (v18 <= 3)
      {
        v291 = (*(uint64_t (**)(_QWORD))(v7 + 64))(*(_QWORD *)(v7 + 72));
        if (v291 == -1)
        {
          if (!*(_DWORD *)(v7 + 20))
            goto LABEL_229;
          v24 = *(_DWORD *)(v7 + 16);
          v18 = 4;
        }
        else
        {
          v292 = *(_DWORD *)(v7 + 20);
          v24 = *(_DWORD *)(v7 + 16) | (TIFFBitRevTable[v291] << v292);
          v18 = v292 + 8;
        }
      }
      if ((v24 & 0xF) != 0)
        *(_DWORD *)(v7 + 28) = 1;
      v306 = v24 >> 4;
      *(_DWORD *)(v7 + 16) = v306;
      *(_DWORD *)(v7 + 20) = v18 - 4;
      *(_DWORD *)(v7 + 24) = 1;
      if (v18 > 16)
        goto LABEL_591;
      v307 = (*(uint64_t (**)(_QWORD))(v7 + 64))(*(_QWORD *)(v7 + 72));
      if (v307 == -1)
      {
        if (!*(_DWORD *)(v7 + 20))
          goto LABEL_557;
        v306 = *(_DWORD *)(v7 + 16);
      }
      else
      {
        v308 = *(_DWORD *)(v7 + 20);
        v306 = *(_DWORD *)(v7 + 16) | (TIFFBitRevTable[v307] << v308);
        *(_DWORD *)(v7 + 16) = v306;
        *(_DWORD *)(v7 + 20) = v308 + 8;
        if (v308 > 4)
        {
LABEL_591:
          if ((v306 & 0x1FFF) == 0x1001)
            goto LABEL_557;
          result = 0;
          *(_DWORD *)(v7 + 28) = 1;
          goto LABEL_558;
        }
        v309 = (*(uint64_t (**)(_QWORD))(v7 + 64))(*(_QWORD *)(v7 + 72));
        v306 = *(_DWORD *)(v7 + 16);
        if (v309 != -1)
        {
          v310 = *(_DWORD *)(v7 + 20);
          v306 |= TIFFBitRevTable[v309] << v310;
          *(_DWORD *)(v7 + 16) = v306;
          v311 = v310 + 8;
LABEL_590:
          *(_DWORD *)(v7 + 20) = v311;
          goto LABEL_591;
        }
      }
      v311 = 13;
      goto LABEL_590;
    case 4:
    case 9:
    case 12:
    case 17:
    case 20:
    case 25:
    case 28:
    case 36:
    case 41:
    case 44:
    case 49:
    case 52:
    case 57:
    case 60:
    case 68:
    case 73:
    case 76:
    case 81:
    case 84:
    case 89:
    case 92:
    case 100:
    case 105:
    case 108:
    case 113:
    case 116:
    case 121:
    case 124:
    case 130:
    case 132:
    case 137:
    case 140:
    case 145:
    case 148:
    case 153:
    case 156:
    case 164:
    case 169:
    case 172:
    case 177:
    case 180:
    case 185:
    case 188:
    case 196:
    case 201:
    case 204:
    case 209:
    case 212:
    case 217:
    case 220:
    case 228:
    case 233:
    case 236:
    case 241:
    case 244:
    case 249:
    case 252:
    case 260:
    case 265:
    case 268:
    case 273:
    case 276:
    case 281:
    case 284:
    case 292:
    case 297:
    case 300:
    case 305:
    case 308:
    case 313:
    case 316:
    case 324:
    case 329:
    case 332:
    case 337:
    case 340:
    case 345:
    case 348:
    case 356:
    case 361:
    case 364:
    case 369:
    case 372:
    case 377:
    case 380:
    case 386:
    case 388:
    case 393:
    case 396:
    case 401:
    case 404:
    case 409:
    case 412:
    case 420:
    case 425:
    case 428:
    case 433:
    case 436:
    case 441:
    case 444:
    case 452:
    case 457:
    case 460:
    case 465:
    case 468:
    case 473:
    case 476:
    case 484:
    case 489:
    case 492:
    case 497:
    case 500:
    case 505:
    case 508:
    case 518:
      v53 = *(unsigned int *)(v7 + 56);
      if (v8 != v325 && v10 <= v16)
      {
        v54 = v11 + 1;
        do
        {
          if ((unint64_t)v54 >= *(_QWORD *)(v7 + 40) + 2 * v53)
            break;
          v55 = *(v54 - 1);
          v56 = *v54;
          v54 += 2;
          v10 += v55 + v56;
        }
        while (v10 <= v16);
        v11 = v54 - 1;
      }
      v16 = v10;
      if ((unint64_t)v8 < *(_QWORD *)(v7 + 48) + 2 * v53)
        *v8++ = v17 + v15 + v10;
      v27 = v8;
      if ((unint64_t)v11 >= *(_QWORD *)(v7 + 40) + 2 * v53)
        goto LABEL_506;
      v17 = 0;
      v57 = *v11++;
      v10 += v57;
      goto LABEL_79;
    case 5:
    case 10:
    case 13:
    case 21:
    case 26:
    case 29:
    case 32:
    case 37:
    case 42:
    case 45:
    case 53:
    case 58:
    case 61:
    case 69:
    case 74:
    case 77:
    case 85:
    case 90:
    case 93:
    case 96:
    case 101:
    case 106:
    case 109:
    case 117:
    case 122:
    case 125:
    case 133:
    case 138:
    case 141:
    case 149:
    case 154:
    case 157:
    case 160:
    case 165:
    case 170:
    case 173:
    case 181:
    case 186:
    case 189:
    case 197:
    case 202:
    case 205:
    case 213:
    case 218:
    case 221:
    case 224:
    case 229:
    case 234:
    case 237:
    case 245:
    case 250:
    case 253:
    case 261:
    case 266:
    case 269:
    case 277:
    case 282:
    case 285:
    case 288:
    case 293:
    case 298:
    case 301:
    case 309:
    case 314:
    case 317:
    case 325:
    case 330:
    case 333:
    case 341:
    case 346:
    case 349:
    case 352:
    case 357:
    case 362:
    case 365:
    case 373:
    case 378:
    case 381:
    case 389:
    case 394:
    case 397:
    case 405:
    case 410:
    case 413:
    case 416:
    case 421:
    case 426:
    case 429:
    case 437:
    case 442:
    case 445:
    case 453:
    case 458:
    case 461:
    case 469:
    case 474:
    case 477:
    case 480:
    case 485:
    case 490:
    case 493:
    case 501:
    case 506:
    case 509:
      v25 = *(_QWORD *)(v7 + 40);
      v26 = *(unsigned int *)(v7 + 56);
      v27 = v8;
      if (v8 != v325 && v10 <= v16)
      {
        v28 = v11 + 1;
        do
        {
          if ((unint64_t)v28 >= v25 + 2 * v26)
            break;
          v29 = *(v28 - 1);
          v30 = *v28;
          v28 += 2;
          v10 += v29 + v30;
        }
        while (v10 <= v16);
        v11 = v28 - 1;
      }
      v31 = v25 + 2 * v26;
      if ((unint64_t)v11 >= v31)
        goto LABEL_534;
      v32 = v10 + *v11;
      v17 += v32 - v16;
      if ((unint64_t)(v11 + 1) >= v31)
      {
        v16 = v10 + *v11;
LABEL_534:
        v6 = a1;
LABEL_535:
        v8 = v325;
        if (v17)
          goto LABEL_225;
        goto LABEL_536;
      }
      v33 = v11[1];
      v11 += 2;
      v10 = v32 + v33;
      v16 = v32;
      goto LABEL_79;
    case 8:
    case 40:
    case 64:
    case 72:
    case 104:
    case 128:
    case 136:
    case 168:
    case 200:
    case 232:
    case 264:
    case 296:
    case 320:
    case 328:
    case 360:
    case 392:
    case 424:
    case 456:
    case 488:
    case 521:
    case 526:
    case 533:
      v27 = v8;
      v8 = v325;
      if (v27 != v325 && v10 <= v16)
      {
        v64 = v11 + 1;
        do
        {
          if ((unint64_t)v64 >= *(_QWORD *)(v7 + 40) + 2 * (unint64_t)*(unsigned int *)(v7 + 56))
            break;
          v65 = *(v64 - 1);
          v66 = *v64;
          v64 += 2;
          v10 += v65 + v66;
        }
        while (v10 <= v16);
        v11 = v64 - 1;
      }
      v67 = v16 + *((unsigned __int16 *)&pdf_TIFFFaxMainTable + 2 * v22 + 1);
      v68 = __OFSUB__(v10, v67);
      v69 = v10 - v67;
      if (v69 < 0 != v68)
        goto LABEL_224;
      if ((unint64_t)v27 < *(_QWORD *)(v7 + 48) + 2 * (unint64_t)*(unsigned int *)(v7 + 56))
        *v27++ = v69 + v17;
      v8 = v27;
      v17 = 0;
      v16 += v69;
      v70 = *--v11;
      v10 -= v70;
      goto LABEL_79;
    case 16:
    case 48:
    case 66:
    case 80:
    case 112:
    case 144:
    case 176:
    case 194:
    case 208:
    case 240:
    case 272:
    case 304:
    case 322:
    case 336:
    case 368:
    case 400:
    case 432:
    case 450:
    case 464:
    case 496:
      v27 = v8;
      v8 = v325;
      if ((((_DWORD)v27 - (_DWORD)v325) & 2) != 0)
      {
        while (1)
        {
          if (v18 > 12)
            goto LABEL_47;
          v44 = (*(uint64_t (**)(_QWORD))(v7 + 64))(*(_QWORD *)(v7 + 72));
          if (v44 == -1)
          {
            if (!*(_DWORD *)(v7 + 20))
            {
LABEL_228:
              v6 = a1;
              goto LABEL_229;
            }
            v24 = *(_DWORD *)(v7 + 16);
          }
          else
          {
            v45 = *(_DWORD *)(v7 + 20);
            v24 = *(_DWORD *)(v7 + 16) | (TIFFBitRevTable[v44] << v45);
            v18 = v45 + 8;
            *(_DWORD *)(v7 + 16) = v24;
            *(_DWORD *)(v7 + 20) = v45 + 8;
            if (v45 > 4)
              goto LABEL_47;
            v46 = (*(uint64_t (**)(_QWORD))(v7 + 64))(*(_QWORD *)(v7 + 72));
            v24 = *(_DWORD *)(v7 + 16);
            if (v46 != -1)
            {
              v47 = *(_DWORD *)(v7 + 20);
              v24 |= TIFFBitRevTable[v46] << v47;
              v18 = v47 + 8;
              goto LABEL_47;
            }
          }
          v18 = 13;
LABEL_47:
          v48 = v24 & 0x1FFF;
          v49 = &pdf_TIFFFaxBlackTable[2 * v48];
          v50 = *((unsigned __int8 *)v49 + 1);
          v18 -= v50;
          v24 >>= v50;
          *(_DWORD *)(v7 + 16) = v24;
          *(_DWORD *)(v7 + 20) = v18;
          v51 = *(unsigned __int8 *)v49;
          if ((v51 - 10) >= 2)
          {
            if (v51 != 8)
              goto LABEL_223;
            v80 = pdf_TIFFFaxBlackTable[2 * v48 + 1];
            if ((unint64_t)v27 < *(_QWORD *)(v7 + 48) + 2 * (unint64_t)*(unsigned int *)(v7 + 56))
              *v27++ = v80 + v17;
            v17 = 0;
            while (2)
            {
              v16 += v80;
              if (v18 > 11)
                goto LABEL_107;
              v81 = (*(uint64_t (**)(_QWORD))(v7 + 64))(*(_QWORD *)(v7 + 72));
              if (v81 == -1)
              {
                if (!*(_DWORD *)(v7 + 20))
                  goto LABEL_228;
                v24 = *(_DWORD *)(v7 + 16);
              }
              else
              {
                v82 = *(_DWORD *)(v7 + 20);
                v24 = *(_DWORD *)(v7 + 16) | (TIFFBitRevTable[v81] << v82);
                v18 = v82 + 8;
                *(_DWORD *)(v7 + 16) = v24;
                *(_DWORD *)(v7 + 20) = v82 + 8;
                if (v82 > 3)
                  goto LABEL_107;
                v83 = (*(uint64_t (**)(_QWORD))(v7 + 64))(*(_QWORD *)(v7 + 72));
                v24 = *(_DWORD *)(v7 + 16);
                if (v83 != -1)
                {
                  v84 = *(_DWORD *)(v7 + 20);
                  v24 |= TIFFBitRevTable[v83] << v84;
                  v18 = v84 + 8;
                  goto LABEL_107;
                }
              }
              v18 = 12;
LABEL_107:
              v85 = v24 & 0xFFF;
              v86 = (unsigned __int8 *)&pdf_TIFFFaxWhiteTable + 4 * v85;
              v87 = v86[1];
              v18 -= v87;
              v24 >>= v87;
              *(_DWORD *)(v7 + 16) = v24;
              *(_DWORD *)(v7 + 20) = v18;
              v88 = *v86;
              if (v88 == 9 || v88 == 11)
              {
                v80 = *((unsigned __int16 *)&pdf_TIFFFaxWhiteTable + 2 * v85 + 1);
                v17 += v80;
                continue;
              }
              break;
            }
            if (v88 != 7)
              goto LABEL_223;
            v90 = (char *)&pdf_TIFFFaxWhiteTable + 4 * v85;
LABEL_117:
            v91 = *((unsigned __int16 *)v90 + 1);
            v92 = *(unsigned int *)(v7 + 56);
            if ((unint64_t)v27 < *(_QWORD *)(v7 + 48) + 2 * v92)
              *v27++ = v91 + v17;
            v16 += v91;
            if (v27 == v325)
            {
LABEL_125:
              v17 = 0;
            }
            else
            {
              if (v10 > v16 || v10 >= v13)
              {
                v8 = v27;
                goto LABEL_125;
              }
              v94 = *(_QWORD *)(v7 + 40) + 2 * v92;
              v95 = v11 + 1;
              do
              {
                if ((unint64_t)v95 >= v94)
                  break;
                v96 = *(v95 - 1);
                v97 = *v95;
                v95 += 2;
                v10 += v96 + v97;
              }
              while (v10 <= v16 && v10 < v13);
              v8 = v27;
              v17 = 0;
              v11 = v95 - 1;
            }
LABEL_79:
            v15 = -v16;
            if (v16 >= v13)
            {
              if (!v17)
              {
                v27 = v8;
LABEL_506:
                v6 = a1;
                v8 = v325;
                goto LABEL_536;
              }
              v27 = v8;
              v6 = a1;
              v8 = v325;
              if (v18 > 0)
                goto LABEL_574;
              v157 = (*(uint64_t (**)(_QWORD))(v7 + 64))(*(_QWORD *)(v7 + 72));
              if (v157 != -1)
              {
                v158 = *(_DWORD *)(v7 + 20);
                v24 = *(_DWORD *)(v7 + 16) | (TIFFBitRevTable[v157] << v158);
                *(_DWORD *)(v7 + 16) = v24;
                v18 = v158 + 8;
                goto LABEL_573;
              }
              if (*(_DWORD *)(v7 + 20))
              {
                v24 = *(_DWORD *)(v7 + 16);
                v18 = 1;
LABEL_573:
                *(_DWORD *)(v7 + 20) = v18;
LABEL_574:
                if ((v24 & 1) != 0)
                {
                  *(_DWORD *)(v7 + 16) = v24 >> 1;
                  *(_DWORD *)(v7 + 20) = v18 - 1;
                }
                else
                {
                  *(_DWORD *)(v7 + 28) = 1;
                }
                goto LABEL_225;
              }
LABEL_230:
              if ((unint64_t)v27 < *(_QWORD *)(v7 + 48) + 2 * (unint64_t)*(unsigned int *)(v7 + 56))
                *v27++ = v17;
LABEL_232:
              if (v16 == v13)
                goto LABEL_557;
              v150 = v16 > v13;
              if (v16 > v13 && v27 > v8)
              {
                v151 = v27 - 1;
                v152 = v27 - 1;
                do
                {
                  v153 = *v152--;
                  v16 -= v153;
                  v150 = v16 > v13;
                  v154 = v16 > v13 && v151 > v8;
                  v151 = v152;
                }
                while (v154);
                v27 = v152 + 1;
              }
              if (v16 < v13)
              {
                v155 = *(_QWORD *)(v7 + 48) + 2 * *(unsigned int *)(v7 + 56);
                if ((((_DWORD)v27 - (_DWORD)v8) & 2) != 0 && (unint64_t)v27 < v155)
                  *v27++ = 0;
                if ((unint64_t)v27 >= v155)
                  goto LABEL_557;
                result = 0;
                v156 = v16 & ~(v16 >> 31);
LABEL_622:
                *v27 = v13 - v156;
                goto LABEL_558;
              }
              goto LABEL_623;
            }
            goto LABEL_9;
          }
          v52 = pdf_TIFFFaxBlackTable[2 * v48 + 1];
          v17 += v52;
          v16 += v52;
        }
      }
      while (1)
      {
        if (v18 > 11)
          goto LABEL_33;
        v34 = (*(uint64_t (**)(_QWORD))(v7 + 64))(*(_QWORD *)(v7 + 72));
        if (v34 == -1)
        {
          if (!*(_DWORD *)(v7 + 20))
            goto LABEL_228;
          v24 = *(_DWORD *)(v7 + 16);
        }
        else
        {
          v35 = *(_DWORD *)(v7 + 20);
          v24 = *(_DWORD *)(v7 + 16) | (TIFFBitRevTable[v34] << v35);
          v18 = v35 + 8;
          *(_DWORD *)(v7 + 16) = v24;
          *(_DWORD *)(v7 + 20) = v35 + 8;
          if (v35 > 3)
            goto LABEL_33;
          v36 = (*(uint64_t (**)(_QWORD))(v7 + 64))(*(_QWORD *)(v7 + 72));
          v24 = *(_DWORD *)(v7 + 16);
          if (v36 != -1)
          {
            v37 = *(_DWORD *)(v7 + 20);
            v24 |= TIFFBitRevTable[v36] << v37;
            v18 = v37 + 8;
            goto LABEL_33;
          }
        }
        v18 = 12;
LABEL_33:
        v38 = v24 & 0xFFF;
        v39 = (unsigned __int8 *)&pdf_TIFFFaxWhiteTable + 4 * v38;
        v40 = v39[1];
        v18 -= v40;
        v24 >>= v40;
        *(_DWORD *)(v7 + 16) = v24;
        *(_DWORD *)(v7 + 20) = v18;
        v41 = *v39;
        if (v41 != 9 && v41 != 11)
          break;
        v43 = *((unsigned __int16 *)&pdf_TIFFFaxWhiteTable + 2 * v38 + 1);
        v17 += v43;
        v16 += v43;
      }
      if (v41 != 7)
        goto LABEL_223;
      v71 = *((unsigned __int16 *)&pdf_TIFFFaxWhiteTable + 2 * v38 + 1);
      if ((unint64_t)v27 < *(_QWORD *)(v7 + 48) + 2 * (unint64_t)*(unsigned int *)(v7 + 56))
        *v27++ = v71 + v17;
      v17 = 0;
      while (2)
      {
        v16 += v71;
        if (v18 > 12)
          goto LABEL_93;
        v72 = (*(uint64_t (**)(_QWORD))(v7 + 64))(*(_QWORD *)(v7 + 72));
        if (v72 == -1)
        {
          if (!*(_DWORD *)(v7 + 20))
            goto LABEL_228;
          v24 = *(_DWORD *)(v7 + 16);
        }
        else
        {
          v73 = *(_DWORD *)(v7 + 20);
          v24 = *(_DWORD *)(v7 + 16) | (TIFFBitRevTable[v72] << v73);
          v18 = v73 + 8;
          *(_DWORD *)(v7 + 16) = v24;
          *(_DWORD *)(v7 + 20) = v73 + 8;
          if (v73 > 4)
            goto LABEL_93;
          v74 = (*(uint64_t (**)(_QWORD))(v7 + 64))(*(_QWORD *)(v7 + 72));
          v24 = *(_DWORD *)(v7 + 16);
          if (v74 != -1)
          {
            v75 = *(_DWORD *)(v7 + 20);
            v24 |= TIFFBitRevTable[v74] << v75;
            v18 = v75 + 8;
            goto LABEL_93;
          }
        }
        v18 = 13;
LABEL_93:
        v76 = v24 & 0x1FFF;
        v77 = &pdf_TIFFFaxBlackTable[2 * v76];
        v78 = *((unsigned __int8 *)v77 + 1);
        v18 -= v78;
        v24 >>= v78;
        *(_DWORD *)(v7 + 16) = v24;
        *(_DWORD *)(v7 + 20) = v18;
        v79 = *(unsigned __int8 *)v77;
        if ((v79 - 10) < 2)
        {
          v71 = pdf_TIFFFaxBlackTable[2 * v76 + 1];
          v17 += v71;
          continue;
        }
        break;
      }
      if (v79 == 8)
      {
        v90 = (char *)&pdf_TIFFFaxBlackTable[2 * v76];
        goto LABEL_117;
      }
LABEL_223:
      *(_DWORD *)(v7 + 28) = 1;
LABEL_224:
      v6 = a1;
      if (v17)
      {
LABEL_225:
        if ((unint64_t)v27 < *(_QWORD *)(v7 + 48) + 2 * (unint64_t)*(unsigned int *)(v7 + 56))
          *v27++ = v17;
      }
LABEL_536:
      if (v16 != v13)
      {
        v293 = v16 > v13;
        if (v16 > v13 && v27 > v8)
        {
          v294 = v27 - 1;
          v295 = v27 - 1;
          do
          {
            v296 = *v295--;
            v16 -= v296;
            v293 = v16 > v13;
            v297 = v16 > v13 && v294 > v8;
            v294 = v295;
          }
          while (v297);
          v27 = v295 + 1;
        }
        if (v16 >= v13)
        {
          if (v293)
          {
            v299 = *(_QWORD *)(v7 + 48) + 2 * *(unsigned int *)(v7 + 56);
            if ((unint64_t)v27 < v299)
              *v27++ = v13;
            if ((unint64_t)v27 < v299)
              *v27++ = 0;
          }
        }
        else
        {
          v298 = *(_QWORD *)(v7 + 48) + 2 * *(unsigned int *)(v7 + 56);
          if ((((_DWORD)v27 - (_DWORD)v8) & 2) != 0 && (unint64_t)v27 < v298)
            *v27++ = 0;
          if ((unint64_t)v27 < v298)
            *v27++ = v13 - (v16 & ~(unsigned __int16)(v16 >> 31));
        }
      }
      if (*(int *)(v7 + 24) > 0)
      {
LABEL_557:
        result = 0;
        goto LABEL_558;
      }
LABEL_560:
      fill_runs(v320, v8, v27, v13, *(_DWORD *)(v7 + 4) & 0x10);
      v300 = *(_QWORD *)(v7 + 48);
      if ((unint64_t)v27 < v300 + 2 * (unint64_t)*(unsigned int *)(v7 + 56))
        *v27 = 0;
      v301 = *(_QWORD *)(v7 + 40);
      *(_QWORD *)(v7 + 40) = v300;
      *(_QWORD *)(v7 + 48) = v301;
LABEL_563:
      result = v322;
      ++*(_DWORD *)(v7 + 60);
      v302 = *(_DWORD *)(v6 + 16);
      v68 = __OFSUB__(v302, 1);
      v303 = v302 - 1;
      if (v303 < 0 == v68)
      {
        *(_DWORD *)(v6 + 16) = v303;
        if (!v303)
LABEL_558:
          *(_BYTE *)(v6 + 8) = 1;
      }
      return result;
    case 24:
    case 33:
    case 56:
    case 88:
    case 97:
    case 120:
    case 152:
    case 161:
    case 184:
    case 192:
    case 216:
    case 225:
    case 248:
    case 280:
    case 289:
    case 312:
    case 344:
    case 353:
    case 376:
    case 384:
    case 408:
    case 417:
    case 440:
    case 448:
    case 472:
    case 481:
    case 504:
    case 517:
    case 525:
      v58 = *(unsigned int *)(v7 + 56);
      if (v8 != v325 && v10 <= v16)
      {
        v59 = v11 + 1;
        do
        {
          if ((unint64_t)v59 >= *(_QWORD *)(v7 + 40) + 2 * v58)
            break;
          v60 = *(v59 - 1);
          v61 = *v59;
          v59 += 2;
          v10 += v60 + v61;
        }
        while (v10 <= v16);
        v11 = v59 - 1;
      }
      v62 = *((unsigned __int16 *)&pdf_TIFFFaxMainTable + 2 * v22 + 1);
      if ((unint64_t)v8 < *(_QWORD *)(v7 + 48) + 2 * v58)
        *v8++ = v62 + v17 + v15 + v10;
      v27 = v8;
      v16 = v10 + v62;
      if ((unint64_t)v11 >= *(_QWORD *)(v7 + 40) + 2 * v58)
        goto LABEL_506;
      v17 = 0;
      v63 = *v11++;
      v10 += v63;
      goto LABEL_79;
    case 65:
    case 193:
    case 256:
    case 321:
    case 449:
    case 529:
    case 537:
      v27 = v8;
      if ((unint64_t)v8 < *(_QWORD *)(v7 + 48) + 2 * (unint64_t)*(unsigned int *)(v7 + 56))
      {
        *v8 = v13 - v16;
        v27 = v8 + 1;
      }
      goto LABEL_534;
    default:
      *(_DWORD *)(v7 + 28) = 1;
      v6 = a1;
      v27 = v8;
      goto LABEL_535;
  }
}

CFTypeID CGLayerGetTypeID(void)
{
  if (_block_invoke_once_2085 != -1)
    dispatch_once(&_block_invoke_once_2085, &__block_literal_global_4_2086);
  return CGLayerGetTypeID_layer_type_id;
}

CGLayerRef CGLayerRetain(CGLayerRef layer)
{
  if (layer)
    CFRetain(layer);
  return layer;
}

void CGLayerRelease(CGLayerRef layer)
{
  if (layer)
    CFRelease(layer);
}

CGSize CGLayerGetSize(CGLayerRef layer)
{
  const CGSize *v1;
  CGFloat *p_height;
  double v3;
  double width;
  CGSize result;

  v1 = (const CGSize *)((char *)layer + 24);
  p_height = (CGFloat *)((char *)layer + 32);
  if (!layer)
  {
    v1 = &CGSizeZero;
    p_height = &CGSizeZero.height;
  }
  v3 = *p_height;
  width = v1->width;
  result.height = v3;
  result.width = width;
  return result;
}

void CGContextDrawLayerInRect(CGContextRef context, CGRect rect, CGLayerRef layer)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(__n128, __n128, __n128, __n128);
  CGContextRef v12;

  if (!context)
  {
    v12 = 0;
LABEL_9:
    handle_invalid_context((char)"CGContextDrawLayerInRect", (uint64_t)v12, v3, v4, v5, v6, v7, v8);
    return;
  }
  if (*((_DWORD *)context + 4) != 1129601108)
  {
    v12 = context;
    goto LABEL_9;
  }
  if (layer)
  {
    v9 = *((_QWORD *)layer + 2);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 40);
      if (v10)
      {
        v11 = *(void (**)(__n128, __n128, __n128, __n128))(v10 + 216);
        if (v11)
          v11((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
      }
    }
  }
}

uint64_t rip_auto_context_get_transform@<X0>(uint64_t a1@<X0>, CGAffineTransform *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(void);

  if (a1)
    v3 = *(_QWORD *)(a1 + 288);
  else
    v3 = 0;
  *a2 = CGAffineTransformIdentity;
  pthread_mutex_lock((pthread_mutex_t *)(v3 + 112));
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 88);
    if (v4 || (v4 = *(_QWORD *)(v3 + 80)) != 0)
    {
      v5 = *(_QWORD *)(v4 + 40);
      if (v5 && (v6 = *(void (**)(void))(v5 + 40)) != 0)
        v6();
      else
        *a2 = CGAffineTransformIdentity;
    }
  }
  return pthread_mutex_unlock((pthread_mutex_t *)(v3 + 112));
}

double rip_auto_context_get_bounds(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double (*v5)(void);
  double v6;
  unint64_t v7;

  if (!a1)
  {
    v2 = 112;
    pthread_mutex_lock((pthread_mutex_t *)0x70);
    goto LABEL_9;
  }
  v1 = *(_QWORD *)(a1 + 288);
  v2 = v1 + 112;
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 112));
  if (!v1)
    goto LABEL_9;
  v3 = *(_QWORD *)(v1 + 88);
  if (!v3)
  {
    v3 = *(_QWORD *)(v1 + 80);
    if (!v3)
      goto LABEL_9;
  }
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    v7 = 0x7FF0000000000000;
    goto LABEL_10;
  }
  v5 = *(double (**)(void))(v4 + 48);
  if (!v5)
  {
LABEL_9:
    v7 = 0xFFDFFFFFFFFFFFFFLL;
LABEL_10:
    v6 = *(double *)&v7;
    goto LABEL_11;
  }
  v6 = v5();
LABEL_11:
  pthread_mutex_unlock((pthread_mutex_t *)v2);
  return v6;
}

uint64_t rip_auto_context_draw_lines(uint64_t a1, uint64_t a2, uint64_t a3, const CGPoint *a4, unint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!a1)
  {
    v10 = 112;
    pthread_mutex_lock((pthread_mutex_t *)0x70);
    goto LABEL_6;
  }
  v9 = *(_QWORD *)(a1 + 288);
  v10 = v9 + 112;
  pthread_mutex_lock((pthread_mutex_t *)(v9 + 112));
  if (!v9)
  {
LABEL_6:
    rip_auto_context_update_content_info_from_GState(0, a3);
    return pthread_mutex_unlock((pthread_mutex_t *)v10);
  }
  v11 = *(_QWORD *)(v9 + 88);
  if (v11)
  {
    rip_auto_context_update_content_info_from_GState(v9, a3);
LABEL_8:
    CGContextDelegateDrawLines(*(_QWORD *)(v11 + 40), a2, a3, a4, a5);
    *(_BYTE *)(v9 + 105) |= rip_auto_context_contains_transparency(v9, v12, v13, v14, v15, v16, v17, v18);
    return pthread_mutex_unlock((pthread_mutex_t *)v10);
  }
  v11 = *(_QWORD *)(v9 + 80);
  rip_auto_context_update_content_info_from_GState(v9, a3);
  if (v11)
    goto LABEL_8;
  return pthread_mutex_unlock((pthread_mutex_t *)v10);
}

uint64_t rip_auto_context_draw_images(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CGImage **a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  CGImage **v19;
  uint64_t v20;
  CGImage *v21;
  uint64_t v22;
  uint64_t (*v23)(void);
  uint64_t v24;

  if (!a1)
  {
    v10 = 112;
    pthread_mutex_lock((pthread_mutex_t *)0x70);
    v9 = 0;
    goto LABEL_6;
  }
  v9 = *(_QWORD *)(a1 + 288);
  v10 = v9 + 112;
  pthread_mutex_lock((pthread_mutex_t *)(v9 + 112));
  if (!v9)
  {
LABEL_6:
    v18 = 0;
    goto LABEL_7;
  }
  v18 = *(_QWORD *)(v9 + 88);
  if (!v18)
    v18 = *(_QWORD *)(v9 + 80);
LABEL_7:
  if (a7)
  {
    v19 = a5;
    v20 = a7;
    do
    {
      v21 = *v19++;
      rip_auto_context_update_content_info_from_image(v9, v21);
      --v20;
    }
    while (v20);
  }
  if (v18)
  {
    v22 = *(_QWORD *)(v18 + 40);
    if (v22)
    {
      v23 = *(uint64_t (**)(void))(v22 + 136);
      if (v23)
        v24 = v23();
      else
        v24 = 1006;
    }
    else
    {
      v24 = 0;
    }
    *(_BYTE *)(v9 + 105) |= rip_auto_context_contains_transparency(v9, v11, v12, v13, v14, v15, v16, v17);
  }
  else
  {
    v24 = 0;
  }
  pthread_mutex_unlock((pthread_mutex_t *)v10);
  return v24;
}

void rip_auto_context_draw_display_list(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  if (a1)
  {
    v4 = *(_QWORD *)(a1 + 288);
    v5 = v4 + 112;
  }
  else
  {
    v4 = 0;
    v5 = 112;
  }
  pthread_mutex_lock((pthread_mutex_t *)v5);
  rip_auto_context_update_content_info_from_GState(v4, a3);
  _CGHandleAssert("rip_auto_context_draw_display_list", 774, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/AutomaticBitmapContext/RIPAutomaticContext.c", "0", "function automatically fails", v6, v7, v8, v9);
}

uint64_t rip_auto_context_begin_layer(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(double, double, double, double);
  void *FillColor;
  void *v20;
  CGColorRef ConstantColor;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (!a1)
  {
    v15 = 112;
    pthread_mutex_lock((pthread_mutex_t *)0x70);
    goto LABEL_6;
  }
  v14 = *(_QWORD *)(a1 + 288);
  v15 = v14 + 112;
  pthread_mutex_lock((pthread_mutex_t *)(v14 + 112));
  if (!v14)
  {
LABEL_6:
    rip_auto_context_update_content_info_from_GState(0, a3);
    goto LABEL_19;
  }
  v16 = *(_QWORD *)(v14 + 88);
  if (v16)
  {
    rip_auto_context_update_content_info_from_GState(v14, a3);
  }
  else
  {
    v16 = *(_QWORD *)(v14 + 80);
    rip_auto_context_update_content_info_from_GState(v14, a3);
    if (!v16)
      goto LABEL_19;
  }
  v17 = *(_QWORD *)(v16 + 40);
  if (v17)
  {
    v18 = *(void (**)(double, double, double, double))(v17 + 192);
    if (v18)
      v18(a4, a5, a6, a7);
  }
  FillColor = (void *)CGGStateGetFillColor(a3);
  v20 = FillColor;
  if (FillColor)
    CFRetain(FillColor);
  ConstantColor = CGColorGetConstantColor(CFSTR("kCGColorClear"));
  CGGStateSetFillColor(a3, ConstantColor);
  v22 = *(_QWORD *)(v16 + 40);
  if (v22)
  {
    v23 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v22 + 64);
    if (v23)
      v23(v22, a2, a3, 0);
  }
  CGGStateSetFillColor(a3, v20);
  if (v20)
    CFRelease(v20);
  *(_BYTE *)(v14 + 105) |= rip_auto_context_contains_transparency(v14, v24, v25, v26, v27, v28, v29, v30);
LABEL_19:
  pthread_mutex_unlock((pthread_mutex_t *)v15);
  return a1;
}

uint64_t rip_auto_context_end_layer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(void);

  if (!a1)
  {
    v6 = 112;
    pthread_mutex_lock((pthread_mutex_t *)0x70);
    goto LABEL_6;
  }
  v5 = *(_QWORD *)(a1 + 288);
  v6 = v5 + 112;
  pthread_mutex_lock((pthread_mutex_t *)(v5 + 112));
  if (!v5)
  {
LABEL_6:
    rip_auto_context_update_content_info_from_GState(0, a3);
    goto LABEL_12;
  }
  v7 = *(_QWORD *)(v5 + 88);
  if (v7)
  {
    rip_auto_context_update_content_info_from_GState(v5, a3);
  }
  else
  {
    v7 = *(_QWORD *)(v5 + 80);
    rip_auto_context_update_content_info_from_GState(v5, a3);
    if (!v7)
      goto LABEL_12;
  }
  v15 = *(_QWORD *)(v7 + 40);
  if (v15)
  {
    v16 = *(void (**)(void))(v15 + 200);
    if (v16)
      v16();
  }
  *(_BYTE *)(v5 + 105) |= rip_auto_context_contains_transparency(v5, v8, v9, v10, v11, v12, v13, v14);
LABEL_12:
  pthread_mutex_unlock((pthread_mutex_t *)v6);
  return a1;
}

uint64_t rip_auto_context_get_layer(uint64_t a1, double a2, double a3, double a4, double a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(double, double, double, double);

  v8 = a1;
  if (!a1)
  {
    v14 = 112;
    pthread_mutex_lock((pthread_mutex_t *)0x70);
    goto LABEL_6;
  }
  v13 = *(_QWORD *)(a1 + 288);
  v14 = v13 + 112;
  pthread_mutex_lock((pthread_mutex_t *)(v13 + 112));
  if (!v13)
  {
LABEL_6:
    rip_auto_context_update_content_info_from_GState(0, a7);
    goto LABEL_13;
  }
  v15 = *(_QWORD *)(v13 + 88);
  if (v15)
  {
    rip_auto_context_update_content_info_from_GState(v13, a7);
  }
  else
  {
    v15 = *(_QWORD *)(v13 + 80);
    rip_auto_context_update_content_info_from_GState(v13, a7);
    if (!v15)
      goto LABEL_13;
  }
  v23 = *(_QWORD *)(v15 + 40);
  if (v23 && (v24 = *(uint64_t (**)(double, double, double, double))(v23 + 208)) != 0)
    v8 = v24(a2, a3, a4, a5);
  else
    v8 = 0;
  *(_BYTE *)(v13 + 105) |= rip_auto_context_contains_transparency(v13, v16, v17, v18, v19, v20, v21, v22);
LABEL_13:
  pthread_mutex_unlock((pthread_mutex_t *)v14);
  return v8;
}

uint64_t rip_auto_context_draw_layer(uint64_t a1, double a2, double a3, double a4, double a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(double, double, double, double);

  if (!a1)
  {
    v13 = 112;
    pthread_mutex_lock((pthread_mutex_t *)0x70);
    goto LABEL_6;
  }
  v12 = *(_QWORD *)(a1 + 288);
  v13 = v12 + 112;
  pthread_mutex_lock((pthread_mutex_t *)(v12 + 112));
  if (!v12)
  {
LABEL_6:
    rip_auto_context_update_content_info_from_GState(0, a7);
    goto LABEL_7;
  }
  v14 = *(_QWORD *)(v12 + 88);
  if (!v14)
  {
    v14 = *(_QWORD *)(v12 + 80);
    rip_auto_context_update_content_info_from_GState(v12, a7);
    if (v14)
      goto LABEL_9;
LABEL_7:
    v22 = 0;
    goto LABEL_15;
  }
  rip_auto_context_update_content_info_from_GState(v12, a7);
LABEL_9:
  v23 = *(_QWORD *)(v14 + 40);
  if (v23)
  {
    v24 = *(uint64_t (**)(double, double, double, double))(v23 + 216);
    if (v24)
      v22 = v24(a2, a3, a4, a5);
    else
      v22 = 1006;
  }
  else
  {
    v22 = 0;
  }
  *(_BYTE *)(v12 + 105) |= rip_auto_context_contains_transparency(v12, v15, v16, v17, v18, v19, v20, v21);
LABEL_15:
  pthread_mutex_unlock((pthread_mutex_t *)v13);
  return v22;
}

const char *rip_auto_context_get_name()
{
  return "CGAutomaticBitmapContext";
}

BOOL rip_auto_context_serialize_display_list(uint64_t a1, char *a2)
{
  uint64_t v2;

  return a2 && a1 && (v2 = *(_QWORD *)(a1 + 288)) != 0 && CGDisplayListDumpToFile(*(_QWORD *)(v2 + 72), a2);
}

void rip_auto_context_release_bitmap_context_data(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CGBufferUnlockBytePtr(*(_QWORD *)(a1 + 256), a2, a3, a4, a5, a6, a7, a8);
}

void SimpleFont::add_glyphs_to_layout(SimpleFont *this, _QWORD *a2, unsigned __int16 **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 *v8;
  unsigned __int16 **v9;
  SimpleFont *v10;
  unsigned __int16 *v11;
  unsigned __int16 *v12;
  uint64_t *subset_for_glyph;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t **v17;
  __int16 v18;
  uint64_t v19;
  size_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char v25;
  char *v27;
  uint64_t *v31;

  v8 = *a3;
  if (*a3 != a3[1])
  {
    v9 = a3;
    v10 = this;
    do
    {
      v11 = v8;
      v12 = v8 + 1;
      subset_for_glyph = SimpleFont::get_subset_for_glyph(v10, *v8, (uint64_t)a3, a4, a5, a6, a7, a8);
      do
      {
        v8 = v12;
        if (v12 == v9[1])
          break;
        ++v12;
      }
      while (SimpleFont::get_subset_for_glyph(v10, *v8, (uint64_t)a3, a4, a5, a6, a7, a8) == subset_for_glyph);
      if (subset_for_glyph)
      {
        if (v11 == v8)
          goto LABEL_37;
        v14 = 0;
        v15 = 0;
        v16 = 0;
        v31 = subset_for_glyph;
        v17 = (uint64_t **)(subset_for_glyph + 11);
        do
        {
          v18 = *((_WORD *)std::__tree<std::__value_type<unsigned short,unsigned short>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,unsigned short>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,unsigned short>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v17, *v11, v11)+ 14);
          if (v16 >= v15)
          {
            v19 = (uint64_t)&v16[-v14 + 1];
            if (v19 < 0)
              std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
            if (2 * (uint64_t)&v15[-v14] > (unint64_t)v19)
              v19 = 2 * (_QWORD)&v15[-v14];
            if ((unint64_t)&v15[-v14] >= 0x3FFFFFFFFFFFFFFFLL)
              v20 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v20 = v19;
            if (v20)
              v21 = (char *)operator new(v20);
            else
              v21 = 0;
            v22 = &v16[(_QWORD)v21 - v14];
            *v22 = v18;
            v23 = v22 + 1;
            if (v16 != (char *)v14)
            {
              v24 = &v16[~v14];
              do
              {
                v25 = *--v16;
                (v24--)[(_QWORD)v21] = v25;
              }
              while (v16 != (char *)v14);
              v22 = v21;
            }
            v15 = &v21[v20];
            if (v14)
              operator delete((void *)v14);
            v14 = (unint64_t)v22;
            v16 = v23;
          }
          else
          {
            *v16++ = v18;
          }
        }
        while (v11++ != v8 - 1);
        if (v16 == (char *)v14)
        {
LABEL_37:
          __break(1u);
          return;
        }
        v27 = (char *)(v31 + 2);
        v10 = this;
        v9 = a3;
        if (*((char *)v31 + 39) < 0)
          v27 = *(char **)v27;
        layout_append_data(a2, v27, 1, (const void *)v14, (uint64_t)&v16[-v14]);
        if (v14)
          operator delete((void *)v14);
      }
    }
    while (v8 != v9[1]);
  }
}

void sub_184B0D818(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void SimpleFont::emit_references(SimpleFont *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t *i;
  uint64_t v10;
  _QWORD *v11;

  v8 = (uint64_t *)*((_QWORD *)this + 8);
  for (i = (uint64_t *)*((_QWORD *)this + 9); v8 != i; ++v8)
  {
    v10 = *v8;
    if (*(_QWORD *)(*v8 + 104))
    {
      v11 = (_QWORD *)(v10 + 16);
      if (*(char *)(v10 + 39) < 0)
        v11 = (_QWORD *)*v11;
      PDFDocumentPrintNameReferencePair(**(_QWORD **)(*(_QWORD *)(v10 + 8) + 8), (uint64_t)"/%N %R", (uint64_t)v11, *(_QWORD *)(v10 + 48), a5, a6, a7, a8);
    }
  }
}

uint64_t SimpleFont::emit_definitions(uint64_t this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(uint64_t **)(this + 64);
  v2 = *(uint64_t **)(this + 72);
  while (v1 != v2)
  {
    v3 = *v1++;
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  }
  return this;
}

uint64_t *SimpleFont::get_subset_for_glyph(SimpleFont *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char **v10;
  uint64_t **v11;
  uint64_t **v12;
  unsigned int v13;
  BOOL v14;
  char **v15;
  FontSubset **v16;
  FontSubset **v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  FontSubset **v34;
  FontSubset *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  FontSubset **v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  FontSubset **v48;
  unint64_t v49;
  char *v50;
  char *v51;
  FontSubset *v52;
  uint64_t *v53;
  unsigned int v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  char v58;

  if (a2 == 0xFFFF)
    return 0;
  v11 = (uint64_t **)((char *)this + 96);
  v10 = (char **)*((_QWORD *)this + 12);
  if (!v10)
    goto LABEL_13;
  v12 = (uint64_t **)((char *)this + 96);
  do
  {
    v13 = *((unsigned __int16 *)v10 + 16);
    v14 = v13 >= a2;
    if (v13 >= a2)
      v15 = v10;
    else
      v15 = v10 + 1;
    if (v14)
      v12 = (uint64_t **)v10;
    v10 = (char **)*v15;
  }
  while (*v15);
  if (v12 == v11 || *((unsigned __int16 *)v12 + 16) > a2)
  {
LABEL_13:
    v16 = (FontSubset **)*((_QWORD *)this + 8);
    v17 = (FontSubset **)*((_QWORD *)this + 9);
    if (v16 == v17)
    {
      v18 = (*(uint64_t (**)(SimpleFont *, uint64_t))(*(_QWORD *)this + 48))(this, 1);
      v19 = v18;
      v21 = (uint64_t *)*((_QWORD *)this + 9);
      v20 = *((_QWORD *)this + 10);
      if ((unint64_t)v21 >= v20)
      {
        v23 = *((_QWORD *)this + 8);
        v24 = ((uint64_t)v21 - v23) >> 3;
        if ((unint64_t)(v24 + 1) >> 61)
          goto LABEL_72;
        v25 = v20 - v23;
        v26 = v25 >> 2;
        if (v25 >> 2 <= (unint64_t)(v24 + 1))
          v26 = v24 + 1;
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
          v27 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v27 = v26;
        if (v27)
          v27 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(v27);
        else
          v28 = 0;
        v29 = (uint64_t *)(v27 + 8 * v24);
        v30 = v27 + 8 * v28;
        *v29 = v19;
        v17 = (FontSubset **)(v29 + 1);
        v32 = (char *)*((_QWORD *)this + 8);
        v31 = (char *)*((_QWORD *)this + 9);
        if (v31 != v32)
        {
          do
          {
            v33 = *((_QWORD *)v31 - 1);
            v31 -= 8;
            *--v29 = v33;
          }
          while (v31 != v32);
          v31 = (char *)*((_QWORD *)this + 8);
        }
        *((_QWORD *)this + 8) = v29;
        *((_QWORD *)this + 9) = v17;
        *((_QWORD *)this + 10) = v30;
        if (v31)
          operator delete(v31);
      }
      else
      {
        *v21 = v18;
        v17 = (FontSubset **)(v21 + 1);
      }
      *((_QWORD *)this + 9) = v17;
      v16 = (FontSubset **)*((_QWORD *)this + 8);
    }
    if (v16 == v17)
      goto LABEL_70;
    if (FontSubset::add_glyph(*v16, a2))
    {
      v34 = (FontSubset **)*((_QWORD *)this + 8);
      if (v34 != *((FontSubset ***)this + 9))
      {
        v35 = *v34;
        goto LABEL_59;
      }
      goto LABEL_70;
    }
    v37 = *((_QWORD *)this + 8);
    v36 = *((_QWORD *)this + 9);
    if ((unint64_t)(v36 - v37) >= 9)
    {
      if (v37 == v36)
        goto LABEL_70;
      if (FontSubset::add_glyph(*(FontSubset **)(v36 - 8), a2))
      {
        v38 = *((_QWORD *)this + 9);
        if (*((_QWORD *)this + 8) != v38)
        {
          v35 = *(FontSubset **)(v38 - 8);
          goto LABEL_59;
        }
LABEL_70:
        __break(1u);
LABEL_71:
        _CGHandleAssert("add_glyph", 65, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/PDF/Fonts/SimpleFont.cc", "subset->add_glyph(glyph)", "glyph addition failed", a6, a7, a8, v58);
      }
    }
    v35 = (FontSubset *)(*(uint64_t (**)(SimpleFont *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
    if ((FontSubset::add_glyph(v35, a2) & 1) == 0)
      goto LABEL_71;
    v40 = (FontSubset **)*((_QWORD *)this + 9);
    v39 = *((_QWORD *)this + 10);
    if ((unint64_t)v40 < v39)
    {
      *v40 = v35;
      v41 = v40 + 1;
LABEL_58:
      *((_QWORD *)this + 9) = v41;
LABEL_59:
      v53 = *v11;
      v12 = v11;
      if (*v11)
      {
        while (1)
        {
          while (1)
          {
            v12 = (uint64_t **)v53;
            v54 = *((unsigned __int16 *)v53 + 16);
            if (v54 <= a2)
              break;
            v53 = *v12;
            v11 = v12;
            if (!*v12)
              goto LABEL_66;
          }
          if (v54 >= a2)
            break;
          v53 = v12[1];
          if (!v53)
          {
            v11 = v12 + 1;
            goto LABEL_66;
          }
        }
      }
      else
      {
LABEL_66:
        v55 = (uint64_t *)v12;
        v12 = (uint64_t **)operator new(0x30uLL);
        *((_WORD *)v12 + 16) = a2;
        v12[5] = (uint64_t *)v35;
        *v12 = 0;
        v12[1] = 0;
        v12[2] = v55;
        *v11 = (uint64_t *)v12;
        v56 = **((_QWORD **)this + 11);
        v57 = (uint64_t *)v12;
        if (v56)
        {
          *((_QWORD *)this + 11) = v56;
          v57 = *v11;
        }
        std::__tree_balance_after_insert[abi:se180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 12), v57);
        ++*((_QWORD *)this + 13);
      }
      return v12[5];
    }
    v42 = *((_QWORD *)this + 8);
    v43 = ((uint64_t)v40 - v42) >> 3;
    if (!((unint64_t)(v43 + 1) >> 61))
    {
      v44 = v39 - v42;
      v45 = v44 >> 2;
      if (v44 >> 2 <= (unint64_t)(v43 + 1))
        v45 = v43 + 1;
      if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
        v46 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v46 = v45;
      if (v46)
        v46 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(v46);
      else
        v47 = 0;
      v48 = (FontSubset **)(v46 + 8 * v43);
      v49 = v46 + 8 * v47;
      *v48 = v35;
      v41 = v48 + 1;
      v51 = (char *)*((_QWORD *)this + 8);
      v50 = (char *)*((_QWORD *)this + 9);
      if (v50 != v51)
      {
        do
        {
          v52 = (FontSubset *)*((_QWORD *)v50 - 1);
          v50 -= 8;
          *--v48 = v52;
        }
        while (v50 != v51);
        v50 = (char *)*((_QWORD *)this + 8);
      }
      *((_QWORD *)this + 8) = v48;
      *((_QWORD *)this + 9) = v41;
      *((_QWORD *)this + 10) = v49;
      if (v50)
        operator delete(v50);
      goto LABEL_58;
    }
LABEL_72:
    std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
  }
  return v12[5];
}

uint64_t **std::__tree<std::__value_type<unsigned short,unsigned short>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,unsigned short>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,unsigned short>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t **a1, unsigned __int16 a2, unsigned __int16 *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  char *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((unsigned __int16 *)v5 + 13);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (char *)operator new(0x20uLL);
    *(_DWORD *)(v9 + 26) = *a3;
    std::__tree<unsigned long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void SimpleFont::~SimpleFont(SimpleFont *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  *(_QWORD *)this = off_1E1627D90;
  v2 = (_QWORD *)*((_QWORD *)this + 8);
  v3 = (_QWORD *)*((_QWORD *)this + 9);
  while (v2 != v3)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    ++v2;
  }
  std::__tree<unsigned long>::destroy(*((_QWORD **)this + 12));
  v4 = (void *)*((_QWORD *)this + 8);
  if (v4)
  {
    *((_QWORD *)this + 9) = v4;
    operator delete(v4);
  }
  PDFFont::~PDFFont(this);
}

_QWORD *PDFWriterCreate(const void *a1)
{
  _QWORD *v2;

  v2 = malloc_type_calloc(1uLL, 0x20uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  if (v2)
  {
    if (a1)
    {
      CFRetain(a1);
      *v2 = a1;
      v2[1] = 0;
      v2[3] = 0;
      *((_WORD *)v2 + 8) = 0;
    }
    else
    {
      free(v2);
      return 0;
    }
  }
  return v2;
}

void PDFWriterPrintf(_BYTE **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
    PDFWriterVPrintf(a1, a2, (uint64_t)&a9, a4, a5, a6, a7, a8);
}

void PDFWriterVPrintf(_BYTE **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  _BYTE *v10;
  const __CFAllocator *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  double **v15;
  CFIndex v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const __CFString *v22;
  uint64_t v23;
  const __CFData *v24;
  uint64_t v25;
  double **v26;
  char *v27;
  _BYTE *v28;
  double ***v29;
  double **v30;
  CFStringRef *v31;
  const __CFString *v32;
  CFIndex v33;
  CFIndex v34;
  char *v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t i;
  char *v51;
  uint64_t v52;
  double *v53;
  double **v54;
  double *v55;
  _BYTE *v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _BYTE *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _BYTE *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _BYTE *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _BYTE *v140;
  double **v141;
  double *v142;
  double *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  __int16 v150;
  unsigned __int8 **v151;
  double **v152;
  double **v153;
  const __CFString **v154;
  CFStringRef *v155;
  const __CFString *v156;
  CFDataRef ExternalRepresentation;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  const __CFData *v163;
  CFURLRef *v164;
  const __CFURL *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  const __CFData *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  double **v177;
  CFIndex v178;
  double **v179;
  double *v180;
  const CGRect *v182;
  _BYTE *v183;
  double x;
  double width;
  double height;
  CGFloat y;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _BYTE *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _BYTE *v202;
  double v203;
  double v204;
  double v205;
  CGFloat v206;
  _BYTE *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  _BYTE *v221;
  _BYTE *v222;
  double v223;
  double v224;
  CGFloat v225;
  CGFloat v226;
  _BYTE *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  _BYTE *v241;
  _BYTE *v242;
  double v243;
  double v244;
  CGFloat v245;
  CGFloat v246;
  double **v247;
  _BYTE *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  _BYTE *v256;
  double v257;
  double v258;
  double v259;
  CGFloat v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  _BYTE *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  _BYTE *v275;
  double v276;
  double v277;
  double v278;
  CGFloat v279;
  _BYTE *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  _BYTE *v294;
  _BYTE *v295;
  double v296;
  double v297;
  double v298;
  CGFloat v299;
  unint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  _BYTE *v314;
  _BYTE *v315;
  double v316;
  double v317;
  double v318;
  CGFloat v319;
  _BYTE *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  CFIndex Length;
  CFIndex v328;
  UniChar *v329;
  UniChar *v330;
  __CFData *Mutable;
  UniChar *v332;
  unsigned int v333;
  double *v334;
  char v335;
  char v336;
  char v337;
  char v338;
  char v339;
  char v340;
  char v341;
  char v342;
  char v343;
  char v344;
  char v345;
  char v346;
  char v347;
  char v348;
  char v349;
  char v350;
  char v351;
  char v352;
  char v353;
  char v354;
  char v355;
  char v356;
  char v357;
  char v358;
  _BYTE *v359;
  _BYTE *v360;
  _BYTE *v361;
  _BYTE *v362;
  _BYTE *v363;
  const __CFAllocator *v364;
  const __CFAllocator *bytesDeallocator;
  char v366;
  double **v367;
  UInt8 bytes[2];
  CFRange v369;

  v367 = (double **)a3;
  if (a1)
  {
    v8 = (char *)a2;
    v10 = *a1;
    if ((unint64_t)a1[3] > 0x48 || *((_BYTE *)a1 + 16))
      emit_whitespace(a1, a2, a3, a4, a5, a6, a7, a8);
    v366 = 0;
    v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v364 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    bytesDeallocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
    while (1)
    {
      while (1)
      {
        v12 = *v8;
        if (v12 > 0x1F)
          break;
        if (v12 == 10)
        {
          *((_BYTE *)a1 + 17) = 0;
          emit_newline(a1, a2, a3, a4, a5, a6, a7, a8);
          ++v8;
        }
        else
        {
          if (!*v8)
            return;
LABEL_15:
          v366 = *v8;
          a1[3] += CGDataConsumerPutBytes((uint64_t)v10, (uint64_t)&v366, 1);
          *((_BYTE *)a1 + 16) = 1;
          ++v8;
        }
      }
      if (v12 == 32)
      {
        emit_whitespace(a1, a2, a3, a4, a5, a6, a7, a8);
        ++v8;
      }
      else
      {
        if (v12 != 37)
          goto LABEL_15;
        v13 = v8[1];
        if ((_DWORD)v13 == 42)
        {
          v14 = v8[2];
          v8 += 3;
        }
        else
        {
          v8 += 2;
          v14 = v13;
        }
        if ((int)v14 > 97)
        {
          if ((int)v14 > 113)
          {
            if ((_DWORD)v14 == 114)
            {
              v179 = v367++;
              v180 = *v179;
              if (v180[1] == INFINITY || *v180 == INFINITY)
                v182 = &CGRectZero;
              else
                v182 = (const CGRect *)v180;
              v183 = *a1;
              if ((_DWORD)v13 == 42)
              {
                x = v182->origin.x;
                width = v182->size.width;
                height = v182->size.height;
                if (width < 0.0 || height < 0.0)
                {
                  y = v182->origin.y;
                  *(_QWORD *)&x = (unint64_t)CGRectStandardize(*(CGRect *)&x);
                }
                v362 = PDFWriteNumber(v183, x, a2, a3, a4, a5, a6, a7, a8, (char)v334);
                v194 = CGDataConsumerPrintf(*a1, " ", v188, v189, v190, v191, v192, v193, v345);
                v202 = *a1;
                v203 = v182->origin.y;
                v204 = v182->size.width;
                v205 = v182->size.height;
                v360 = v194;
                if (v204 < 0.0 || v205 < 0.0)
                {
                  v206 = v182->origin.x;
                  *(CGRect *)(&v203 - 1) = CGRectStandardize(*(CGRect *)(&v203 - 1));
                }
                v207 = PDFWriteNumber(v202, v203, v195, v196, v197, v198, v199, v200, v201, v346);
                v221 = CGDataConsumerPrintf(*a1, " ", v208, v209, v210, v211, v212, v213, v347);
                v222 = *a1;
                v223 = v182->size.width;
                v224 = v182->size.height;
                if (v223 < 0.0 || v224 < 0.0)
                {
                  v225 = v182->origin.x;
                  v226 = v182->origin.y;
                  *(CGRect *)(&v223 - 2) = CGRectStandardize(*(CGRect *)(&v223 - 2));
                }
                v227 = PDFWriteNumber(v222, v223, v214, v215, v216, v217, v218, v219, v220, v348);
                v241 = CGDataConsumerPrintf(*a1, " ", v228, v229, v230, v231, v232, v233, v349);
                v242 = *a1;
                v243 = v182->size.width;
                v244 = v182->size.height;
                if (v243 < 0.0 || v244 < 0.0)
                {
                  v245 = v182->origin.x;
                  v246 = v182->origin.y;
                  *(CGRect *)(&v244 - 3) = CGRectStandardize(*(CGRect *)(&v243 - 2));
                }
                i = (uint64_t)&v362[(_QWORD)v360
                                 + (unint64_t)&v221[(_QWORD)v207]
                                 + (unint64_t)&v241[(_QWORD)v227]
                                 + (unint64_t)PDFWriteNumber(v242, v244, v234, v235, v236, v237, v238, v239, v240, v350)];
              }
              else
              {
                v248 = CGDataConsumerPrintf(*a1, "[", a3, a4, a5, a6, a7, a8, (char)v334);
                v256 = *a1;
                v257 = v182->origin.x;
                v258 = v182->size.width;
                v259 = v182->size.height;
                v363 = v248;
                if (v258 < 0.0 || v259 < 0.0)
                {
                  v260 = v182->origin.y;
                  *(_QWORD *)&v257 = (unint64_t)CGRectStandardize(*(CGRect *)&v257);
                }
                v361 = PDFWriteNumber(v256, v257, v249, v250, v251, v252, v253, v254, v255, v351);
                v267 = CGDataConsumerPrintf(*a1, " ", v261, v262, v263, v264, v265, v266, v352);
                v275 = *a1;
                v276 = v182->origin.y;
                v277 = v182->size.width;
                v278 = v182->size.height;
                v359 = v267;
                if (v277 < 0.0 || v278 < 0.0)
                {
                  v279 = v182->origin.x;
                  *(CGRect *)(&v276 - 1) = CGRectStandardize(*(CGRect *)(&v276 - 1));
                }
                v280 = PDFWriteNumber(v275, v276, v268, v269, v270, v271, v272, v273, v274, v353);
                v294 = CGDataConsumerPrintf(*a1, " ", v281, v282, v283, v284, v285, v286, v354);
                v295 = *a1;
                v296 = v182->origin.x;
                v297 = v182->size.width;
                v298 = v182->size.height;
                if (v297 < 0.0 || v298 < 0.0)
                {
                  v299 = v182->origin.y;
                  *(CGRect *)&v296 = CGRectStandardize(*(CGRect *)&v296);
                }
                v300 = (unint64_t)PDFWriteNumber(v295, v296 + v297, v287, v288, v289, v290, v291, v292, v293, v355);
                v314 = CGDataConsumerPrintf(*a1, " ", v301, v302, v303, v304, v305, v306, v356);
                v315 = *a1;
                v316 = v182->origin.y;
                v317 = v182->size.width;
                v318 = v182->size.height;
                if (v317 < 0.0 || v318 < 0.0)
                {
                  v319 = v182->origin.x;
                  *(CGRect *)(&v316 - 1) = CGRectStandardize(*(CGRect *)(&v316 - 1));
                }
                v320 = PDFWriteNumber(v315, v316 + v318, v307, v308, v309, v310, v311, v312, v313, v357);
                i = (uint64_t)&v361[(unint64_t)&v359[(_QWORD)v363]
                                 + (unint64_t)&v294[(_QWORD)v280]
                                 + (_QWORD)v314
                                 + v300
                                 + (unint64_t)&CGDataConsumerPrintf(*a1, "]", v321, v322, v323, v324, v325, v326, v358)[(_QWORD)v320]];
              }
              v11 = v364;
            }
            else
            {
              if ((_DWORD)v14 == 115)
              {
                v247 = v367++;
                v334 = *v247;
                v28 = v10;
                v27 = "%s";
LABEL_84:
                v52 = (uint64_t)CGDataConsumerPrintf(v28, v27, a3, a4, a5, a6, a7, a8, (char)v334);
              }
              else if ((_DWORD)v14 == 122)
              {
                v29 = (double ***)v367++;
                v30 = *v29;
LABEL_37:
                v52 = (uint64_t)CGDataConsumerPrintf(v10, "%d", a3, a4, a5, a6, a7, a8, (char)v30);
              }
              else
              {
LABEL_86:
                v366 = v14;
LABEL_88:
                v52 = CGDataConsumerPutBytes((uint64_t)v10, (uint64_t)&v366, 1);
              }
LABEL_89:
              i = v52;
            }
          }
          else
          {
            switch((int)v14)
            {
              case 'b':
                v26 = v367++;
                if (*(_DWORD *)v26)
                  v27 = "true";
                else
                  v27 = "false";
                v28 = v10;
                goto LABEL_84;
              case 'c':
                v51 = (char *)v367++;
                v52 = (uint64_t)CGDataConsumerPrintf(v10, "%c", a3, a4, a5, a6, a7, a8, *v51);
                goto LABEL_89;
              case 'd':
                v30 = v367++;
                LODWORD(v30) = *(_DWORD *)v30;
                goto LABEL_37;
              case 'f':
                v53 = (double *)v367++;
                v52 = (uint64_t)PDFWriteNumber(v10, *v53, a2, a3, a4, a5, a6, a7, a8, (char)v334);
                goto LABEL_89;
              case 'm':
                v54 = v367++;
                v55 = *v54;
                v56 = *a1;
                if ((_DWORD)v13 != 42)
                {
                  CGDataConsumerPrintf(v56, "[", a3, a4, a5, a6, a7, a8, (char)v334);
                  v56 = *a1;
                }
                v57 = PDFWriteNumber(v56, *v55, a2, a3, a4, a5, a6, a7, a8, (char)v334);
                v64 = &v57[(_QWORD)CGDataConsumerPrintf(*a1, " ", v58, v59, v60, v61, v62, v63, v335)];
                v72 = PDFWriteNumber(*a1, v55[1], v65, v66, v67, v68, v69, v70, v71, v336);
                v79 = &v64[(unint64_t)&CGDataConsumerPrintf(*a1, " ", v73, v74, v75, v76, v77, v78, v337)[(_QWORD)v72]];
                v87 = PDFWriteNumber(*a1, v55[2], v80, v81, v82, v83, v84, v85, v86, v338);
                v94 = &CGDataConsumerPrintf(*a1, " ", v88, v89, v90, v91, v92, v93, v339)[(_QWORD)v87];
                v102 = &v79[(unint64_t)&PDFWriteNumber(*a1, v55[3], v95, v96, v97, v98, v99, v100, v101, v340)[(_QWORD)v94]];
                v109 = CGDataConsumerPrintf(*a1, " ", v103, v104, v105, v106, v107, v108, v341);
                v117 = &PDFWriteNumber(*a1, v55[4], v110, v111, v112, v113, v114, v115, v116, v342)[(_QWORD)v109];
                v124 = &CGDataConsumerPrintf(*a1, " ", v118, v119, v120, v121, v122, v123, v343)[(_QWORD)v117];
                i = (uint64_t)&v102[(unint64_t)&PDFWriteNumber(*a1, v55[5], v125, v126, v127, v128, v129, v130, v131, v344)[(_QWORD)v124]];
                if ((_DWORD)v13 != 42)
                {
                  v132 = (uint64_t)CGDataConsumerPrintf(*a1, "]", a3, a4, a5, a6, a7, a8, (char)v334);
LABEL_47:
                  i += v132;
                }
                break;
              default:
                goto LABEL_86;
            }
          }
        }
        else
        {
          switch((int)v14)
          {
            case 'A':
              v15 = v367++;
              v16 = (CFIndex)*v15;
              v367 = v15 + 2;
              v22 = (const __CFString *)CFDataCreateWithBytesNoCopy(v11, (const UInt8 *)v15[1], v16, bytesDeallocator);
              v23 = (uint64_t)a1;
              v24 = (const __CFData *)v22;
              v25 = 0;
              goto LABEL_60;
            case 'B':
            case 'C':
            case 'E':
            case 'F':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'P':
            case 'Q':
            case 'V':
            case 'W':
              goto LABEL_86;
            case 'D':
              v133 = (uint64_t *)v367++;
              v22 = (const __CFString *)PDFCreateDateString(*v133);
              v140 = print_ascii_string((uint64_t)a1, v22, v134, v135, v136, v137, v138, v139, (char)v334);
              goto LABEL_61;
            case 'G':
              v141 = v367++;
              v142 = *v141;
              v367 = v141 + 2;
              v143 = v141[1];
              for (i = CGDataConsumerPutBytes((uint64_t)v10, (uint64_t)"<", 1); v142; v142 = (double *)((char *)v142 - 1))
              {
                v150 = *(_WORD *)v143;
                v143 = (double *)((char *)v143 + 2);
                i += (uint64_t)CGDataConsumerPrintf(v10, "%04x", v144, v145, v146, v147, v148, v149, v150);
              }
              v132 = CGDataConsumerPutBytes((uint64_t)v10, (uint64_t)">", 1);
              goto LABEL_47;
            case 'N':
              v151 = (unsigned __int8 **)v367++;
              v52 = print_name(a1, *v151, a3, a4, a5, a6, a7, a8);
              goto LABEL_89;
            case 'O':
              v152 = v367++;
              v52 = (uint64_t)CGDataConsumerPrintf(v10, "%llu", a3, a4, a5, a6, a7, a8, (char)*v152);
              goto LABEL_89;
            case 'R':
              v153 = v367++;
              v52 = (uint64_t)CGDataConsumerPrintf(v10, "%lu 0 R", a3, a4, a5, a6, a7, a8, (char)*v153);
              goto LABEL_89;
            case 'S':
              v154 = (const __CFString **)v367++;
              v52 = (uint64_t)print_ascii_string((uint64_t)a1, *v154, a3, a4, a5, a6, a7, a8, (char)v334);
              goto LABEL_89;
            case 'T':
              v155 = (CFStringRef *)v367++;
              v156 = *v155;
              if (!*v155)
                goto LABEL_117;
              ExternalRepresentation = CFStringCreateExternalRepresentation(v11, *v155, 0x600u, 0);
              if (ExternalRepresentation)
              {
                v163 = ExternalRepresentation;
LABEL_55:
                i = (uint64_t)print_data((uint64_t)a1, v163, 0, v158, v159, v160, v161, v162, (char)v334);
                CFRelease(v163);
                break;
              }
              Length = CFStringGetLength(v156);
              if (Length)
              {
                v328 = Length;
                v329 = (UniChar *)malloc_type_malloc(2 * Length, 0x1000040BDFB0063uLL);
                if (v329)
                {
                  v330 = v329;
                  v369.location = 0;
                  v369.length = v328;
                  CFStringGetCharacters(v156, v369, v329);
                  Mutable = CFDataCreateMutable(v11, 0);
                  if (Mutable)
                  {
                    v163 = Mutable;
                    *(_WORD *)bytes = -2;
                    CFDataAppendBytes(Mutable, bytes, 2);
                    if (v328 >= 1)
                    {
                      v332 = v330;
                      do
                      {
                        v333 = *v332++;
                        *(_WORD *)bytes = bswap32(v333) >> 16;
                        CFDataAppendBytes(v163, bytes, 2);
                        --v328;
                      }
                      while (v328);
                    }
                    free(v330);
                    goto LABEL_55;
                  }
                  free(v330);
                }
              }
LABEL_117:
              i = (uint64_t)print_data((uint64_t)a1, 0, 0, a4, a5, a6, a7, a8, (char)v334);
              break;
            case 'U':
              v164 = (CFURLRef *)v367++;
              v165 = CFURLCopyAbsoluteURL(*v164);
              if (!v165)
              {
                v52 = (uint64_t)print_data((uint64_t)a1, 0, 0, v166, v167, v168, v169, v170, (char)v334);
                goto LABEL_89;
              }
              v22 = (const __CFString *)v165;
              v171 = CFURLCreateData(v11, v165, 0x8000100u, 0);
              i = (uint64_t)print_data((uint64_t)a1, v171, 0, v172, v173, v174, v175, v176, (char)v334);
              if (v171)
                CFRelease(v171);
LABEL_62:
              CFRelease(v22);
              break;
            case 'X':
              v177 = v367++;
              v178 = (CFIndex)*v177;
              v367 = v177 + 2;
              v22 = (const __CFString *)CFDataCreateWithBytesNoCopy(v11, (const UInt8 *)v177[1], v178, bytesDeallocator);
              v23 = (uint64_t)a1;
              v24 = (const __CFData *)v22;
              v25 = 1;
LABEL_60:
              v140 = print_data(v23, v24, v25, v17, v18, v19, v20, v21, (char)v334);
LABEL_61:
              i = (uint64_t)v140;
              if (v22)
                goto LABEL_62;
              break;
            default:
              if ((_DWORD)v14 == 37)
              {
                v366 = 37;
                *((_BYTE *)a1 + 17) = 1;
                goto LABEL_88;
              }
              if ((_DWORD)v14 != 47)
                goto LABEL_86;
              v31 = (CFStringRef *)v367++;
              v32 = *v31;
              v33 = CFStringGetLength(*v31);
              v34 = CFStringGetMaximumSizeForEncoding(v33, 0x8000100u) + 1;
              v35 = (char *)malloc_type_malloc(v34, 0xE59A9ED3uLL);
              if (v35)
              {
                v36 = (unsigned __int8 *)v35;
                if (CFStringGetCString(v32, v35, v34, 0x8000100u))
                {
                  v43 = CGDataConsumerPrintf(*a1, "/", v37, v38, v39, v40, v41, v42, (char)v334);
                  i = (uint64_t)&v43[print_name(a1, v36 + 1, v44, v45, v46, v47, v48, v49)];
                }
                else
                {
                  i = 0;
                }
                free(v36);
              }
              else
              {
                i = 0;
              }
              break;
          }
        }
        a1[3] += i;
        *((_BYTE *)a1 + 16) = 1;
      }
    }
  }
}

_BYTE *emit_whitespace(_BYTE **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *result;
  char v10;

  if ((unint64_t)a1[3] >= 0x49)
    return emit_newline(a1, a2, a3, a4, a5, a6, a7, a8);
  result = CGDataConsumerPrintf(*a1, " ", a3, a4, a5, a6, a7, a8, v10);
  a1[3] = &result[(_QWORD)a1[3]];
  *((_BYTE *)a1 + 16) = 0;
  return result;
}

_BYTE *print_ascii_string(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  const __CFData *ExternalRepresentation;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const __CFData *v16;
  _BYTE *v17;
  char v19;

  v9 = a1;
  if (a2)
  {
    ExternalRepresentation = CFStringCreateExternalRepresentation((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x600u, 0);
    if (ExternalRepresentation)
    {
      v16 = ExternalRepresentation;
      v17 = print_data(v9, ExternalRepresentation, 0, v11, v12, v13, v14, v15, v19);
      CFRelease(v16);
      return v17;
    }
    pdf_error("Warning: can't convert string to ASCII.");
    a1 = v9;
  }
  return print_data(a1, 0, 0, a4, a5, a6, a7, a8, a9);
}

uint64_t print_name(_BYTE **a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t i;
  uint64_t v11;
  unsigned int v12;
  _BYTE *v14;
  _BYTE *v15;

  for (i = 0; ; i += (uint64_t)v15)
  {
    v12 = *a2++;
    v11 = v12;
    if (v12 <= 0x3E)
    {
      if (((1 << v11) & 0x5000832800000000) != 0)
        goto LABEL_9;
      if (!v11)
        break;
    }
    if ((v11 - 91) <= 0x22 && ((1 << (v11 - 91)) & 0x500000005) != 0)
    {
LABEL_9:
      v14 = *a1;
LABEL_10:
      v15 = CGDataConsumerPrintf(v14, "#%02x", a3, a4, a5, a6, a7, a8, v11);
      continue;
    }
    v14 = *a1;
    if ((v11 - 127) <= 0xFFFFFFA1)
      goto LABEL_10;
    v15 = CGDataConsumerPrintf(v14, "%c", a3, a4, a5, a6, a7, a8, v11);
  }
  return i;
}

_BYTE *print_data(uint64_t a1, CFDataRef theData, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  const __CFData *v10;
  uint64_t v12;
  uint64_t v13;
  CFIndex Length;
  const void *Value;
  const void *v16;
  size_t v17;
  int v18;
  _BYTE *v19;
  __CFData *Mutable;
  __CFData *v21;
  UInt8 *MutableBytePtr;
  UInt8 *v23;
  uint64_t v24;
  char *pdf_cryptor;
  const UInt8 *BytePtr;
  CFIndex v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  size_t v35;
  size_t v36;

  v10 = theData;
  v12 = *(_QWORD *)(a1 + 8);
  if (!v12)
  {
    v19 = *(_BYTE **)a1;
    return PDFWriteCFData(v19, theData, a3, a4, a5, a6, a7, a8, a9);
  }
  if (!theData)
    goto LABEL_13;
  v13 = *(_QWORD *)(*(_QWORD *)v12 + 280);
  if (!v13)
    goto LABEL_13;
  Length = CFDataGetLength(theData);
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v12 + 16), CFSTR("kCGPDFContextEncryptionCipher"));
  if (Value
    && ((v16 = Value, CFEqual(Value, CFSTR("kCGPDFContextEncryptionCipherAESv2")))
     || CFEqual(v16, CFSTR("kCGPDFContextEncryptionCipherAESv3"))))
  {
    v17 = Length + 32;
    v18 = 1;
  }
  else
  {
    v18 = 0;
    v17 = Length;
  }
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v17);
  if (!Mutable)
  {
LABEL_13:
    v19 = *(_BYTE **)a1;
    theData = 0;
    return PDFWriteCFData(v19, theData, a3, a4, a5, a6, a7, a8, a9);
  }
  v21 = Mutable;
  v35 = Length;
  MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
  v23 = MutableBytePtr;
  if (v18)
  {
    *(_OWORD *)MutableBytePtr = *(_OWORD *)(v12 + 108);
    v23 = MutableBytePtr + 16;
    v17 -= 16;
    v24 = 16;
  }
  else
  {
    v24 = 0;
  }
  pdf_cryptor = get_pdf_cryptor(v12, v13);
  v36 = 0;
  BytePtr = CFDataGetBytePtr(v10);
  CGCryptorProcessBytes((uint64_t)pdf_cryptor, BytePtr, v35, v23, v17, &v36);
  v28 = v36 + v24;
  if (v18)
  {
    CGCryptorDrain((uint64_t)pdf_cryptor, &v23[v36], v17 - v36, &v36);
    v28 += v36;
  }
  CFDataSetLength(v21, v28);
  CGCryptorRelease((uint64_t)pdf_cryptor);
  v34 = PDFWriteCFData(*(_BYTE **)a1, v21, a3, v29, v30, v31, v32, v33, v35);
  CFRelease(v21);
  return v34;
}

_BYTE *emit_newline(_BYTE **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;

  result = CGDataConsumerPrintf(*a1, "\n", a3, a4, a5, a6, a7, a8, v16);
  if (*((_BYTE *)a1 + 17))
    result = CGDataConsumerPrintf(*a1, "%%%% ", v10, v11, v12, v13, v14, v15, v17);
  *((_BYTE *)a1 + 16) = 0;
  a1[3] = 0;
  return result;
}

uint64_t *PDFWriterBeginObject(uint64_t *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  if (result)
  {
    v9 = a2;
    v10 = result;
    if (result[3])
      emit_newline((_BYTE **)result, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v11 = *v10;
    if (a3)
    {
      if (v11)
        v12 = *(_QWORD *)(v11 + 48);
      else
        v12 = 0;
      *a3 = v12;
    }
    return (uint64_t *)CGDataConsumerPrintf((_BYTE *)v11, "%lu 0 obj\n", (uint64_t)a3, a4, a5, a6, a7, a8, v9);
  }
  return result;
}

_BYTE *PDFWriterEndObject(_BYTE *result, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE **v9;
  uint64_t v10;
  char v11;

  if (result)
  {
    v9 = (_BYTE **)result;
    if (*((_QWORD *)result + 3))
      emit_newline((_BYTE **)result, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    result = CGDataConsumerPrintf(*v9, "endobj\n", a3, a4, a5, a6, a7, a8, v11);
    if (a2)
    {
      v10 = (uint64_t)*v9;
      if (*v9)
        v10 = *(_QWORD *)(v10 + 48);
      *a2 = v10;
    }
  }
  return result;
}

void PDFWriterAnnotate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a1)
  {
    if ((didHandleDefaults & 1) == 0)
      pthread_once(&once_15012, (void (*)(void))handleDefaults);
    if (shouldAnnotate)
    {
      if (*(_QWORD *)(a1 + 24))
        PDFWriterPrintf((_BYTE **)a1, (uint64_t)"\n", a3, a4, a5, a6, a7, a8, v22);
      PDFWriterPrintf((_BYTE **)a1, (uint64_t)"%%%% ", a3, a4, a5, a6, a7, a8, v22);
      PDFWriterVPrintf((_BYTE **)a1, a2, (uint64_t)&a9, v11, v12, v13, v14, v15);
      PDFWriterPrintf((_BYTE **)a1, (uint64_t)"\n", v16, v17, v18, v19, v20, v21, v23);
    }
  }
}

unint64_t CGTaggedColorCreate_Float32BPC(unsigned int a1, unsigned int a2, unsigned int a3)
{
  unint64_t result;
  unint64_t v7;

  if (CGTaggedColorCreate_predicate != -1)
    dispatch_once(&CGTaggedColorCreate_predicate, &__block_literal_global_26_2178);
  result = ((unint64_t)a1 << 11) | (32 * a2) | ((unint64_t)a3 << 23) | 0x850000000000000FLL;
  v7 = *MEMORY[0x1E0DE7C58] ^ result;
  if ((~v7 & 0xC000000000000007) != 0)
    return v7 & 0xFFFFFFFFFFFFFFF8 | *(unsigned __int8 *)(MEMORY[0x1E0DE7C48] + (v7 & 7));
  return result;
}

__CFString *color_copy_format_description(unint64_t a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CGColorSpaceRef ColorSpace;
  CFStringRef v12;
  const __CFString *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const CGFloat *Components;
  unint64_t v22;
  unint64_t NumberOfComponents;

  v2 = CFGetAllocator((CFTypeRef)a1);
  Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<CGColor %p> "), a1);
  if (a1)
  {
    if ((a1 & 0x8000000000000000) != 0)
      ColorSpace = CGTaggedColorGetColorSpace(a1, v4, v5, v6, v7, v8, v9, v10);
    else
      ColorSpace = *(CGColorSpaceRef *)(a1 + 24);
  }
  else
  {
    ColorSpace = 0;
  }
  v12 = CFCopyDescription(ColorSpace);
  if (v12)
  {
    v13 = v12;
    CFStringAppend(Mutable, CFSTR("["));
    CFStringAppend(Mutable, v13);
    CFStringAppend(Mutable, CFSTR("] "));
    CFRelease(v13);
  }
  CFStringAppend(Mutable, CFSTR("( "));
  Components = CGColorGetComponents((CGColorRef)a1);
  v22 = 0;
  if (!a1)
    goto LABEL_11;
LABEL_9:
  if ((a1 & 0x8000000000000000) != 0)
    NumberOfComponents = CGTaggedColorGetNumberOfComponents(a1, v14, v15, v16, v17, v18, v19, v20);
  else
    NumberOfComponents = *(_QWORD *)(a1 + 56);
  while (v22 < NumberOfComponents)
  {
    CFStringAppendFormat(Mutable, 0, CFSTR("%g "), *(_QWORD *)&Components[v22++]);
    if (a1)
      goto LABEL_9;
LABEL_11:
    NumberOfComponents = 0;
  }
  CFStringAppend(Mutable, CFSTR(")"));
  return Mutable;
}

CGColorSpaceRef CGTaggedColorGetColorSpace(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  int v11;
  CGColorSpaceRef v12;
  const __CFString *v13;
  unsigned int v14;
  uint64_t v15;
  CGColorSpaceRef DeviceRGB;

  v8 = *MEMORY[0x1E0DE7C58];
  if ((a1 & 0xC000000000000007) == 0xC000000000000007)
    v9 = 7;
  else
    v9 = *MEMORY[0x1E0DE7C58];
  v10 = v9 ^ a1;
  if ((v10 & 0x18) == 8)
  {
    v11 = (v10 >> 5) & 0x3F;
    v12 = 0;
    switch(v11)
    {
      case 0:
        return v12;
      case 1:
        goto LABEL_11;
      case 2:
        goto LABEL_13;
      case 4:
        goto LABEL_12;
      case 5:
        goto LABEL_18;
      case 7:
        v13 = CFSTR("kCGColorSpaceSRGB");
        goto LABEL_14;
      case 8:
        v13 = CFSTR("kCGColorSpaceAdobeRGB1998");
        goto LABEL_14;
      case 9:
        v13 = CFSTR("kCGColorSpaceGenericGrayGamma2_2");
        goto LABEL_14;
      case 12:
        v13 = CFSTR("kCGColorSpaceDisplayP3");
        goto LABEL_14;
      case 13:
        v13 = CFSTR("kCGColorSpaceDCIP3");
        goto LABEL_14;
      case 14:
        v13 = CFSTR("kCGColorSpaceExtendedSRGB");
        goto LABEL_14;
      case 15:
        v13 = CFSTR("kCGColorSpaceExtendedGray");
        goto LABEL_14;
      case 16:
        v13 = CFSTR("kCGColorSpaceLinearSRGB");
        goto LABEL_14;
      case 17:
        v13 = CFSTR("kCGColorSpaceExtendedLinearSRGB");
        goto LABEL_14;
      default:
        _CGHandleAssert("CGTaggedColorGetColorSpace", 36, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorTaggedPointerInternal.h", "0", "Unexpected color space %d", a6, a7, a8, v11);
    }
  }
  if ((a1 & 0xC000000000000007) == 0xC000000000000007)
    v8 = 0;
  v14 = v8 ^ a1;
  v15 = ((v8 ^ a1) >> 3) & 3;
  if (v15)
    _CGHandleAssert("CGTaggedColorGetPlainSpace", 348, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorTaggedPointer.h", "TAGGED_PAYLOAD_COLOR_TYPE(payload) == kCGTaggedColorTypePlain", "invalid tagged color payload %llu", a6, a7, a8, v15);
  switch((v14 >> 5) & 0x3F)
  {
    case 0u:
LABEL_11:
      v13 = CFSTR("kCGColorSpaceGenericRGB");
      goto LABEL_14;
    case 1u:
LABEL_12:
      DeviceRGB = CGColorSpaceCreateDeviceRGB();
      break;
    case 2u:
LABEL_13:
      v13 = CFSTR("kCGColorSpaceGenericGray");
LABEL_14:
      DeviceRGB = CGColorSpaceCreateWithName(v13);
      break;
    case 3u:
LABEL_18:
      DeviceRGB = CGColorSpaceCreateDeviceGray();
      break;
    default:
      _CGHandleAssert("CGTaggedColorGetColorSpace", 45, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorTaggedPointerInternal.h", "0", "Unexpected color space %d", a6, a7, a8, (v10 >> 5) & 0x3F);
  }
  v12 = DeviceRGB;
  if (DeviceRGB)
    CFAutorelease(DeviceRGB);
  return v12;
}

uint64_t CGTaggedColorGetNumberOfComponents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v9;

  v8 = *MEMORY[0x1E0DE7C58];
  if ((~a1 & 0xC000000000000007) == 0)
    LOWORD(v8) = 7;
  v9 = (unsigned __int16)(v8 ^ a1) >> 11;
  if (v9 >= 0x10 || ((0xFF0Fu >> v9) & 1) == 0)
    _CGHandleAssert("CGTaggedColorGetNumberOfComponents", 376, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorTaggedPointer.h", "0", "invalid tagged payload storage flavor (%u)", a6, a7, a8, v9);
  return qword_184F732F0[v9];
}

double CGTaggedColorGetComponents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  int8x8_t v14;
  uint64x2_t v15;
  double result;
  unsigned int v17;
  double v18;
  double v19;

  v8 = *MEMORY[0x1E0DE7C58];
  if ((~a1 & 0xC000000000000007) == 0)
    v8 = 0;
  v9 = v8 ^ a1;
  v10 = 0xFFFFFFFFFF00000;
  if ((~(_BYTE)v9 & 7) == 0)
    v10 = 0xFFFFFFFF00000;
  v11 = ((v9 >> 3) >> 8) & 0x1F;
  v12 = v10 & (v9 >> 3);
  v13 = v12 >> 20;
  switch(v11)
  {
    case 0u:
      *(double *)a2 = (double)BYTE3(v13) / 255.0;
      v14 = vand_s8((int8x8_t)vmovn_s64((int64x2_t)vshlq_u64((uint64x2_t)vdupq_n_s64(v9), (uint64x2_t)xmmword_185004A80)), (int8x8_t)0xFF000000FFLL);
      v15.i64[0] = v14.u32[0];
      v15.i64[1] = v14.u32[1];
      *(float64x2_t *)(a2 + 8) = vdivq_f64(vcvtq_f64_u64(v15), (float64x2_t)vdupq_n_s64(0x406FE00000000000uLL));
      result = (double)(v12 >> 20) / 255.0;
      goto LABEL_15;
    case 1u:
      v17 = (unsigned __int16)(v12 >> 20);
      v18 = (double)(unsigned __int16)(v9 >> 39);
      v19 = 65535.0;
      goto LABEL_10;
    case 2u:
      result = (double)(unsigned __int16)(v9 >> 39) / 65535.0;
      *(double *)a2 = result;
      *(double *)(a2 + 8) = result;
      *(double *)(a2 + 16) = result;
      *(double *)(a2 + 24) = (double)(unsigned __int16)(v12 >> 20) / 65535.0;
      return result;
    case 3u:
      v17 = (unsigned __int16)(v12 >> 20);
      v18 = (double)(unsigned __int16)(v9 >> 39);
      v19 = 100.0;
LABEL_10:
      result = v18 / v19;
      *(double *)a2 = result;
      *(double *)(a2 + 8) = (double)v17 / v19;
      return result;
    case 8u:
      result = *(float *)&v13 / 100.0;
      *(double *)(a2 + 8) = result;
      *(double *)(a2 + 16) = result;
      *(double *)a2 = result;
      *(_QWORD *)(a2 + 24) = 0;
      return result;
    case 9u:
      result = *(float *)&v13 / 100.0;
      *(double *)(a2 + 8) = result;
      *(double *)(a2 + 16) = result;
      *(double *)a2 = result;
      *(_QWORD *)(a2 + 24) = 0x3FF0000000000000;
      return result;
    case 0xAu:
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      result = *(float *)&v13 / 100.0;
      *(_QWORD *)(a2 + 16) = 0;
      goto LABEL_15;
    case 0xBu:
      *(_QWORD *)(a2 + 16) = 0x3FF0000000000000;
      __asm { FMOV            V0.2D, #1.0 }
      *(_OWORD *)a2 = _Q0;
      result = *(float *)&v13 / 100.0;
LABEL_15:
      *(double *)(a2 + 24) = result;
      return result;
    case 0xCu:
      result = *(float *)&v13 / 100.0;
      *(double *)a2 = result;
      *(_QWORD *)(a2 + 8) = 0;
      return result;
    case 0xDu:
      result = *(float *)&v13 / 100.0;
      *(double *)a2 = result;
      *(_QWORD *)(a2 + 8) = 0x3FF0000000000000;
      return result;
    case 0xEu:
      *(_QWORD *)a2 = 0;
      goto LABEL_20;
    case 0xFu:
      *(_QWORD *)a2 = 0x3FF0000000000000;
LABEL_20:
      result = *(float *)&v13 / 100.0;
      *(double *)(a2 + 8) = result;
      return result;
    default:
      _CGHandleAssert("CGTaggedColorGetComponents", 459, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorTaggedPointer.h", "0", "invalid tagged payload storage flavor (%u)", a6, a7, a8, v11);
  }
}

CGColorRef CGColorCreateGenericGray(CGFloat gray, CGFloat alpha)
{
  CGColorSpace *v2;
  CGColor *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CGFloat components[3];

  components[2] = *(CGFloat *)MEMORY[0x1E0C80C00];
  components[0] = gray;
  components[1] = alpha;
  v2 = CGColorSpaceCreateWithName(CFSTR("kCGColorSpaceGenericGray"));
  v3 = CGColorCreate(v2, components);
  CGColorSpaceRelease(v2);
  if (!v3)
    CGPostError((uint64_t)"Color creation failed for generic gray colorspace %p, {%f, %f}", v4, v5, v6, v7, v8, v9, v10, (char)v2);
  return v3;
}

CGColorRef CGColorCreateGenericRGB(CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
  CGColorSpace *v4;
  CGColor *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CGFloat components[2];
  CGFloat v15;
  CGFloat v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  components[0] = red;
  components[1] = green;
  v15 = blue;
  v16 = alpha;
  v4 = CGColorSpaceCreateWithName(CFSTR("kCGColorSpaceGenericRGB"));
  v5 = CGColorCreate(v4, components);
  CGColorSpaceRelease(v4);
  if (!v5)
    CGPostError((uint64_t)"Color creation failed for RGB colorspace %p, {%f, %f, %f %f}", v6, v7, v8, v9, v10, v11, v12, (char)v4);
  return v5;
}

CGColorRef CGColorCreateGenericCMYK(CGFloat cyan, CGFloat magenta, CGFloat yellow, CGFloat black, CGFloat alpha)
{
  CGColorSpace *v5;
  CGColor *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CGFloat components[2];
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  components[0] = cyan;
  components[1] = magenta;
  v16 = yellow;
  v17 = black;
  v18 = alpha;
  v5 = CGColorSpaceCreateWithName(CFSTR("kCGColorSpaceGenericCMYK"));
  v6 = CGColorCreate(v5, components);
  CGColorSpaceRelease(v5);
  if (!v6)
    CGPostError((uint64_t)"Color creation failed for CMYK colorspace %p, {%f, %f, %f %f, %f}", v7, v8, v9, v10, v11, v12, v13, (char)v5);
  return v6;
}

double CGTaggedColorGetAlpha(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t NumberOfComponents;
  size_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  NumberOfComponents = CGTaggedColorGetNumberOfComponents(a1, a2, a3, a4, a5, a6, a7, a8);
  MEMORY[0x1E0C80A78]();
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v11, v10);
  CGTaggedColorGetComponents(a1, (uint64_t)v11, v12, v13, v14, v15, v16, v17);
  return *(double *)&v11[8 * NumberOfComponents - 8];
}

CGColorSpaceRef __create_resolved_device_space_block_invoke()
{
  CGColorSpaceRef result;

  create_resolved_device_space_gray = (uint64_t)CGColorSpaceCreateWithName(CFSTR("kCGColorSpaceGenericGrayGamma2_2"));
  create_resolved_device_space_sRGB = (uint64_t)CGColorSpaceCreateWithName(CFSTR("kCGColorSpaceSRGB"));
  result = CGColorSpaceCreateWithName(CFSTR("kCGColorSpaceGenericCMYK"));
  create_resolved_device_space_cmyk = (uint64_t)result;
  return result;
}

__CFDictionary *CGColorCopyPropertyList(CGColorSpaceRef *a1)
{
  CFTypeID v2;
  __CFDictionary *Mutable;
  CFPropertyListRef v4;
  const void *v5;
  CFMutableArrayRef v6;
  CFMutableArrayRef v7;
  CGColorSpaceRef v8;
  uint64_t v9;
  const CGFloat *Components;
  const CGFloat *v11;
  uint64_t v12;
  CFNumberRef v13;
  CFNumberRef v14;
  uint64_t valuePtr;

  if (!a1)
    return 0;
  v2 = CFGetTypeID(a1);
  if (kCGColorComponents_block_invoke_once != -1)
    dispatch_once(&kCGColorComponents_block_invoke_once, &__block_literal_global_24_2179);
  if (v2 != CGColorGetTypeID_color_type_id)
    return 0;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v4 = CGColorSpaceCopyPropertyList(a1[3]);
    if (!v4)
      goto LABEL_16;
    v5 = v4;
    CFDictionarySetValue(Mutable, CFSTR("kCGColorSpace"), v4);
    CFRelease(v5);
    v6 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    if (!v6
      || (v7 = v6, CFDictionarySetValue(Mutable, CFSTR("kCGColorComponents"), v6), CFRelease(v7), (v8 = a1[3]) == 0)
      || (v9 = *(_QWORD *)(*((_QWORD *)v8 + 3) + 40)) == 0
      || (Components = CGColorGetComponents((CGColorRef)a1)) == 0)
    {
LABEL_16:
      CFRelease(Mutable);
      return 0;
    }
    if (v9 != -1)
    {
      v11 = Components;
      v12 = v9 + 1;
      while (1)
      {
        valuePtr = *(_QWORD *)v11;
        v13 = CFNumberCreate(0, kCFNumberCGFloatType, &valuePtr);
        if (!v13)
          break;
        v14 = v13;
        CFArrayAppendValue(v7, v13);
        CFRelease(v14);
        ++v11;
        if (!--v12)
          return Mutable;
      }
      goto LABEL_16;
    }
  }
  return Mutable;
}

const __CFDictionary *CGColorCreateWithPropertyList(const __CFDictionary *cf)
{
  const __CFDictionary *v1;
  CFTypeID v2;
  const void *v3;
  CGColorSpaceRef v4;
  CGColorSpace *v5;
  uint64_t v6;
  const __CFDictionary *Value;
  CFTypeID v8;
  uint64_t v9;
  CFIndex v10;
  _OWORD *v11;
  const __CFNumber *ValueAtIndex;
  _OWORD v14[8];
  uint64_t v15;

  v1 = cf;
  v15 = *MEMORY[0x1E0C80C00];
  if (cf)
  {
    v2 = CFGetTypeID(cf);
    if (v2 == CFDictionaryGetTypeID()
      && (v3 = CFDictionaryGetValue(v1, CFSTR("kCGColorSpace")), (v4 = CGColorSpaceCreateWithPropertyList(v3)) != 0))
    {
      v5 = v4;
      v6 = *(_QWORD *)(*((_QWORD *)v4 + 3) + 40);
      Value = (const __CFDictionary *)CFDictionaryGetValue(v1, CFSTR("kCGColorComponents"));
      v1 = Value;
      if (Value)
      {
        v8 = CFGetTypeID(Value);
        if (v8 == CFArrayGetTypeID() && (v9 = v6 + 1, CFArrayGetCount(v1) == v6 + 1))
        {
          memset(v14, 0, sizeof(v14));
          if (v6 != -1)
          {
            v10 = 0;
            v11 = v14;
            do
            {
              ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v1, v10);
              CFNumberGetValue(ValueAtIndex, kCFNumberCGFloatType, v11);
              ++v10;
              v11 = (_OWORD *)((char *)v11 + 8);
            }
            while (v9 != v10);
          }
          v1 = CGColorCreate(v5, (const CGFloat *)v14);
        }
        else
        {
          v1 = 0;
        }
      }
      CGColorSpaceRelease(v5);
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

uint64_t CGDisplayListEntryStateGetClipStack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char vars0;

  if (!a1)
    _CGHandleAssert("CGDisplayListEntryStateGetClipStack", 20, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  v8 = *(_QWORD *)(a1 + 48);
  if (v8 && !*(_QWORD *)(v8 + 8))
    return MEMORY[0x10];
  else
    return 0;
}

uint64_t CGDisplayListEntryStateGetSoftMask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  char vars0;

  if (!a1)
    _CGHandleAssert("CGDisplayListEntryStateGetSoftMask", 34, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  v8 = *(_QWORD *)(a1 + 48);
  if (v8 && (v9 = *(_QWORD *)(v8 + 16)) != 0)
    return *(_QWORD *)(v9 + 16);
  else
    return 0;
}

uint64_t CGDisplayListEntryStateGetStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  char vars0;

  if (!a1)
    _CGHandleAssert("CGDisplayListEntryStateGetStyle", 48, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  v8 = *(_QWORD *)(a1 + 48);
  if (v8 && (v9 = *(_QWORD *)(v8 + 24)) != 0)
    return *(_QWORD *)(v9 + 16);
  else
    return 0;
}

uint64_t CGDisplayListEntryStateGetBlackGeneration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  char vars0;

  if (!a1)
    _CGHandleAssert("CGDisplayListEntryStateGetBlackGeneration", 62, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  v8 = *(_QWORD *)(a1 + 48);
  if (v8 && (v9 = *(_QWORD *)(v8 + 32)) != 0)
    return *(_QWORD *)(v9 + 16);
  else
    return 0;
}

uint64_t CGDisplayListEntryStateGetUndercolorRemoval(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  char vars0;

  if (!a1)
    _CGHandleAssert("CGDisplayListEntryStateGetUndercolorRemoval", 76, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  v8 = *(_QWORD *)(a1 + 48);
  if (v8 && (v9 = *(_QWORD *)(v8 + 40)) != 0)
    return *(_QWORD *)(v9 + 16);
  else
    return 0;
}

double CGDisplayListEntryStateGetFlatness(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char vars0;

  if (!a1)
    _CGHandleAssert("CGDisplayListEntryStateGetFlatness", 90, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  v8 = *(_QWORD *)(a1 + 48);
  if (v8)
    return *(double *)(v8 + 48);
  else
    return 0.0;
}

double CGDisplayListEntryStateGetAlpha(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char vars0;

  if (!a1)
    _CGHandleAssert("CGDisplayListEntryStateGetAlpha", 100, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  v8 = *(_QWORD *)(a1 + 48);
  if (v8)
    return *(double *)(v8 + 56);
  else
    return 1.0;
}

uint64_t CGDisplayListEntryStateGetCompositeOperation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char vars0;

  if (!a1)
    _CGHandleAssert("CGDisplayListEntryStateGetCompositeOperation", 110, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  v8 = *(_QWORD *)(a1 + 48);
  if (v8)
    return ((int)(*(_DWORD *)(v8 + 96) << 26) >> 26);
  else
    return 0xFFFFFFFFLL;
}

uint64_t CGDisplayListEntryStateGetAntialias(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char vars0;

  if (!a1)
    _CGHandleAssert("CGDisplayListEntryStateGetAntialias", 120, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  v8 = *(_QWORD *)(a1 + 48);
  if (v8)
    return (*(unsigned __int8 *)(v8 + 96) >> 6) & 1;
  else
    return 0;
}

uint64_t CGDisplayListEntryStateGetAlphaIsShape(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char vars0;

  if (!a1)
    _CGHandleAssert("CGDisplayListEntryStateGetAlphaIsShape", 130, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  v8 = *(_QWORD *)(a1 + 48);
  if (v8)
    return *(unsigned __int8 *)(v8 + 96) >> 7;
  else
    return 0;
}

uint64_t CGDisplayListEntryStateGetColorRenderingIntent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char vars0;

  if (!a1)
    _CGHandleAssert("CGDisplayListEntryStateGetColorRenderingIntent", 140, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  v8 = *(_QWORD *)(a1 + 48);
  if (v8)
    return ((int)(*(_DWORD *)(v8 + 96) << 18) >> 26);
  else
    return 0;
}

uint64_t CGDisplayListEntryStateGetFillOverprint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char vars0;

  if (!a1)
    _CGHandleAssert("CGDisplayListEntryStateGetFillOverprint", 150, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  v8 = *(_QWORD *)(a1 + 48);
  if (v8)
    return (*(unsigned __int8 *)(v8 + 97) >> 6) & 1;
  else
    return 0;
}

uint64_t CGDisplayListEntryStateGetStrokeOverprint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char vars0;

  if (!a1)
    _CGHandleAssert("CGDisplayListEntryStateGetStrokeOverprint", 160, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  v8 = *(_QWORD *)(a1 + 48);
  if (v8)
    return *(unsigned __int8 *)(v8 + 97) >> 7;
  else
    return 0;
}

uint64_t CGDisplayListEntryStateGetOverprintMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char vars0;

  if (!a1)
    _CGHandleAssert("CGDisplayListEntryStateGetOverprintMode", 170, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  v8 = *(_QWORD *)(a1 + 48);
  if (v8)
    return *(unsigned int *)(v8 + 100);
  else
    return 0;
}

uint64_t CGDisplayListEntryStateGetFillColor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  char vars0;

  if (!a1)
    _CGHandleAssert("CGDisplayListEntryStateGetFillColor", 181, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  v8 = *(_QWORD *)(a1 + 56);
  if (v8 && (v9 = *(_QWORD *)(v8 + 8)) != 0)
    return *(_QWORD *)(v9 + 16);
  else
    return 0;
}

uint64_t CGDisplayListEntryStateGetStrokeColor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  char vars0;

  if (!a1)
    _CGHandleAssert("CGDisplayListEntryStateGetStrokeColor", 196, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  v8 = *(_QWORD *)(a1 + 64);
  if (v8 && (v9 = *(_QWORD *)(v8 + 8)) != 0)
    return *(_QWORD *)(v9 + 16);
  else
    return 0;
}

double CGDisplayListEntryStateGetStrokeWidth(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char vars0;

  if (!a1)
    _CGHandleAssert("CGDisplayListEntryStateGetStrokeWidth", 210, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  v8 = *(_QWORD *)(a1 + 64);
  if (v8)
    return *(double *)(v8 + 16);
  else
    return 0.0;
}

double CGDisplayListEntryStateGetStrokeWidthThreshold(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char vars0;

  if (!a1)
    _CGHandleAssert("CGDisplayListEntryStateGetStrokeWidthThreshold", 220, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  v8 = *(_QWORD *)(a1 + 64);
  if (v8)
    return *(double *)(v8 + 24);
  else
    return 0.0;
}

double CGDisplayListEntryStateGetStrokeLimit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char vars0;

  if (!a1)
    _CGHandleAssert("CGDisplayListEntryStateGetStrokeLimit", 230, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  v8 = *(_QWORD *)(a1 + 64);
  if (v8)
    return *(double *)(v8 + 32);
  else
    return 0.0;
}

uint64_t CGDisplayListEntryStateGetStrokeDash(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  char vars0;

  if (!a1)
    _CGHandleAssert("CGDisplayListEntryStateGetStrokeDash", 240, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  v8 = *(_QWORD *)(a1 + 64);
  if (v8 && (v9 = *(_QWORD *)(v8 + 40)) != 0)
    return *(_QWORD *)(v9 + 16);
  else
    return 0;
}

uint64_t CGDisplayListEntryStateGetLineCap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char vars0;

  if (!a1)
    _CGHandleAssert("CGDisplayListEntryStateGetLineCap", 254, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  v8 = *(_QWORD *)(a1 + 64);
  if (v8)
    return *(char *)(v8 + 48);
  else
    return 0;
}

uint64_t CGDisplayListEntryStateGetLineJoin(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char vars0;

  if (!a1)
    _CGHandleAssert("CGDisplayListEntryStateGetLineJoin", 264, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  v8 = *(_QWORD *)(a1 + 64);
  if (v8)
    return *(char *)(v8 + 49);
  else
    return 0;
}

BOOL CGDisplayListEntryStateGetStrokeAdjust(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char vars0;

  if (!a1)
    _CGHandleAssert("CGDisplayListEntryStateGetStrokeAdjust", 274, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  v8 = *(_QWORD *)(a1 + 64);
  return v8 && *(_BYTE *)(v8 + 50) != 0;
}

__n128 CGDisplayListEntryStateGetBaseCTM@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v5;
  const CGAffineTransform *v6;
  __int128 v7;
  __n128 result;
  char vars0;

  if (!a1)
    _CGHandleAssert("CGDisplayListEntryStateGetBaseCTM", 285, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a2, a3, a4, vars0);
  v5 = *(_QWORD *)(a1 + 72);
  if (v5)
    v6 = (const CGAffineTransform *)(v5 + 8);
  else
    v6 = &CGAffineTransformIdentity;
  v7 = *(_OWORD *)&v6->c;
  *(_OWORD *)a5 = *(_OWORD *)&v6->a;
  *(_OWORD *)(a5 + 16) = v7;
  result = *(__n128 *)&v6->tx;
  *(__n128 *)(a5 + 32) = result;
  return result;
}

CGFloat CGDisplayListEntryStateGetPatternPhase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  const CGSize *v9;
  char vars0;

  if (!a1)
    _CGHandleAssert("CGDisplayListEntryStateGetPatternPhase", 295, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  v8 = *(_QWORD *)(a1 + 72);
  if (v8)
    v9 = (const CGSize *)(v8 + 56);
  else
    v9 = &CGSizeZero;
  return v9->width;
}

double CGDisplayListEntryStateGetSmoothness(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char vars0;

  if (!a1)
    _CGHandleAssert("CGDisplayListEntryStateGetSmoothness", 305, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DisplayList/CGDisplayListEntryState.cpp", "entry != nullptr", "entry argument is NULL", a6, a7, a8, vars0);
  v8 = *(_QWORD *)(a1 + 72);
  if (v8)
    return *(double *)(v8 + 72);
  else
    return 0.0;
}

BOOL CGPDFBase14InfoGetAdvances(int a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  _DWORD *v9;
  int v10;

  v3 = a1 - 1;
  if ((a1 - 1) <= 0xD)
  {
    v6 = 0;
    v7 = (uint64_t)*(&off_1E1643560 + v3);
    while (1)
    {
      v8 = *(const char **)(a2 + v6);
      if (!v8)
        goto LABEL_7;
      v9 = bsearch(*(const void **)(a2 + v6), *(const void **)(v7 + 8), *(_QWORD *)v7, 0x10uLL, (int (__cdecl *)(const void *, const void *))name_compare);
      if (!v9)
        break;
      v10 = v9[2];
LABEL_8:
      *(double *)(a3 + v6) = (double)v10;
      v6 += 8;
      if (v6 == 2048)
        return v3 < 0xE;
    }
LABEL_7:
    v10 = 0;
    goto LABEL_8;
  }
  return v3 < 0xE;
}

uint64_t name_compare(const char *a1, const char **a2)
{
  return strcmp(a1, *a2);
}

void *gmalloc(size_t size)
{
  void *result;
  void *exception;

  if ((size & 0x80000000) != 0)
  {
LABEL_4:
    exception = __cxa_allocate_exception(1uLL);
  }
  if (!(_DWORD)size)
    return 0;
  result = malloc_type_malloc(size, 0x3E121FE2uLL);
  if (!result)
    goto LABEL_4;
  return result;
}

void *grealloc(void *a1, size_t size)
{
  void *result;
  void *exception;

  if ((size & 0x80000000) != 0)
  {
LABEL_9:
    exception = __cxa_allocate_exception(1uLL);
  }
  if ((_DWORD)size)
  {
    if (a1)
    {
      result = malloc_type_realloc(a1, size, 0x2F69A696uLL);
      if (!result)
        goto LABEL_9;
    }
    else
    {
      result = malloc_type_malloc(size, 0xCE875C48uLL);
      if (!result)
        goto LABEL_9;
    }
  }
  else
  {
    free(a1);
    return 0;
  }
  return result;
}

void *gmallocn(unsigned int a1, unsigned int a2)
{
  void *exception;

  if (!a1)
    return 0;
  if ((a1 & 0x80000000) != 0 || 0x7FFFFFFF / a2 <= a1)
  {
    exception = __cxa_allocate_exception(1uLL);
  }
  return gmalloc(a2 * a1);
}

void *greallocn(void *a1, unsigned int a2, unsigned int a3)
{
  void *exception;

  if (a2)
  {
    if ((a2 & 0x80000000) != 0 || 0x7FFFFFFF / a3 <= a2)
    {
      exception = __cxa_allocate_exception(1uLL);
    }
    return grealloc(a1, a3 * a2);
  }
  else
  {
    free(a1);
    return 0;
  }
}

uint64_t CPRangeUnion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a2 <= 0)
    v4 = a1 + a2;
  else
    v4 = a1;
  if (a4 <= 0)
    v5 = a3 + a4;
  else
    v5 = a3;
  if (v5 < v4)
    v4 = v5;
  if (a4)
  {
    v6 = a3;
  }
  else
  {
    v4 = a1;
    v6 = 0;
  }
  if (a2)
    return v4;
  else
    return v6;
}

uint64_t CPRangeIntersection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1 + a2;
  if (a2 <= 0)
    v5 = a1 + a2;
  else
    v5 = a1;
  if (a2 <= 0)
    v4 = a1;
  v6 = a3 + a4;
  if (a4 <= 0)
    v7 = a3 + a4;
  else
    v7 = a3;
  if (a4 <= 0)
    v6 = a3;
  if (v5 <= v7)
    v5 = v7;
  if (v4 >= v6)
    v4 = v6;
  if (v4 <= v5)
    v5 = 0;
  if (!a4)
    v5 = 0;
  if (a2)
    return v5;
  else
    return 0;
}

void ***CGPDFAdvancesCreate(uint64_t a1)
{
  int v2;
  void ***v3;
  unint64_t FontDescriptor;
  _BOOL4 Number;
  double v7;
  CGPDFDictionary *v8;
  uint64_t v9;
  uint64_t v10;
  int64x2_t v11;
  CGPDFDictionary *v12;
  int v13;
  char *v14;
  unint64_t *Encoding;
  uint64_t v16;
  unint64_t i;
  const CGGlyph *GlyphVector;
  const CGGlyph *v19;
  CGFont *Font;
  CGFont *v21;
  _DWORD *font_info;
  unint64_t v23;
  double v24;
  unint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _BYTE *v29;
  int v30;
  uint64_t v31;
  int64x2_t v32;
  size_t v33;
  size_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  size_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  CGPDFArrayRef v53;
  CGPDFArrayRef v54;
  size_t v55;
  size_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int64_t v64;
  uint64_t v65;
  size_t v66;
  size_t v67;
  size_t v68;
  size_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t *v80;
  __int128 v81;
  int64x2_t v82;
  float64x2_t v83;
  CGPDFInteger v84;
  CGPDFInteger v85;
  uint64_t v86;
  CGPDFArrayRef v87;
  CGPDFArrayRef v88;
  CGPDFArrayRef v89;
  CGPDFInteger v90;
  CGPDFInteger v91;
  CGPDFArrayRef array;
  int advances[2];
  CGPDFReal value[2];
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;

  v126 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v2 = *(_DWORD *)(a1 + 200);
  if (v2 == 1)
    return 0;
  v3 = (void ***)malloc_type_calloc(1uLL, 0x828uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  if (!v3)
    return v3;
  if ((v2 - 2) >= 4)
  {
    if ((v2 - 6) >= 2)
    {
      CGPDFAdvancesRelease(v3);
      return 0;
    }
    v8 = *(CGPDFDictionary **)(a1 + 16);
    value[0] = 0.0;
    array = 0;
    *(_QWORD *)advances = 0;
    v90 = 0;
    v91 = 0;
    if (CGPDFDictionaryGetNumber(v8, "DW", value))
    {
      v9 = *(_QWORD *)&value[0];
    }
    else
    {
      value[0] = 1000.0;
      v9 = 0x408F400000000000;
    }
    v31 = 0;
    v3[256] = (void **)v9;
    v32 = vdupq_lane_s64(v9, 0);
    do
    {
      *(int64x2_t *)&v3[v31] = v32;
      v31 += 2;
    }
    while (v31 != 256);
    if (CGPDFDictionaryGetArray(v8, "W", (CGPDFArrayRef *)advances))
    {
      if (*(_QWORD *)advances)
      {
        v33 = *(_QWORD *)(*(_QWORD *)advances + 16);
        if (v33)
        {
          v34 = 0;
          while (CGPDFArrayGetInteger(*(CGPDFArrayRef *)advances, v34, &v91))
          {
            if (CGPDFArrayGetInteger(*(CGPDFArrayRef *)advances, v34 + 1, &v90))
            {
              if (!CGPDFArrayGetNumber(*(CGPDFArrayRef *)advances, v34 + 2, value))
                break;
              v41 = v91;
              if (v91 <= v90)
              {
                do
                {
                  add_horizontal_advance((uint64_t)v3, v41, value[0], v35, v36, v37, v38, v39, v40);
                  v42 = v41++ < v90;
                }
                while (v42);
              }
              v43 = 3;
            }
            else
            {
              if (!CGPDFArrayGetArray(*(CGPDFArrayRef *)advances, v34 + 1, &array))
                break;
              if (array)
              {
                v44 = *((_QWORD *)array + 2);
                if (v44)
                {
                  v45 = 0;
                  while (CGPDFArrayGetNumber(array, v45, value))
                  {
                    add_horizontal_advance((uint64_t)v3, v45 + v91, value[0], v46, v47, v48, v49, v50, v51);
                    if (v44 == ++v45)
                      goto LABEL_60;
                  }
                  break;
                }
              }
LABEL_60:
              v43 = 2;
            }
            v34 += v43;
            if (v34 >= v33)
              goto LABEL_75;
          }
        }
      }
    }
LABEL_75:
    value[0] = 0.0;
    v90 = 0;
    v91 = 0;
    v88 = 0;
    v89 = 0;
    v87 = 0;
    *(_QWORD *)advances = 0x408B800000000000;
    array = (CGPDFArrayRef)0xC08F400000000000;
    if (CGPDFDictionaryGetArray(v8, "DW2", &v87))
    {
      if (!v87
        || *((_QWORD *)v87 + 2) != 2
        || !CGPDFArrayGetNumber(v87, 0, (CGPDFReal *)advances)
        || !CGPDFArrayGetNumber(v87, 1uLL, (CGPDFReal *)&array))
      {
        goto LABEL_107;
      }
      v53 = array;
      v54 = *(CGPDFArrayRef *)advances;
    }
    else
    {
      v53 = (CGPDFArrayRef)0xC08F400000000000;
      v54 = (CGPDFArrayRef)0x408B800000000000;
    }
    v3[258] = (void **)v53;
    v3[259] = (void **)v54;
    if (!CGPDFDictionaryGetArray(v8, "W2", &v88))
      return v3;
    if (!v88)
      return v3;
    v55 = *((_QWORD *)v88 + 2);
    if (!v55)
      return v3;
    v56 = 0;
    while (CGPDFArrayGetInteger(v88, v56, &v91))
    {
      if (CGPDFArrayGetInteger(v88, v56 + 1, &v90))
      {
        if (!CGPDFArrayGetNumber(v88, v56 + 2, (CGPDFReal *)&array)
          || !CGPDFArrayGetNumber(v88, v56 + 3, value)
          || !CGPDFArrayGetNumber(v88, v56 + 4, (CGPDFReal *)advances))
        {
          break;
        }
        v64 = v91;
        if (v91 <= v90)
        {
          do
          {
            add_vertical_advance((uint64_t)v3, v64, *(double *)&array, value[0], *(double *)advances, v58, v59, v60, v61, v62, v63);
            v42 = v64++ < v90;
          }
          while (v42);
        }
        v65 = 5;
      }
      else
      {
        if (!CGPDFArrayGetArray(v88, v56 + 1, &v89))
          break;
        if (v89)
        {
          v66 = *((_QWORD *)v89 + 2);
          if (0xAAAAAAAAAAAAAAABLL * v66 > 0x5555555555555555)
            break;
          if (v66)
          {
            v67 = 0;
            while (CGPDFArrayGetNumber(v89, v67, (CGPDFReal *)&array))
            {
              v68 = v67 + 1;
              if (!CGPDFArrayGetNumber(v89, v68, value))
                break;
              v69 = v68 + 1;
              if (!CGPDFArrayGetNumber(v89, v69, (CGPDFReal *)advances))
                break;
              v76 = v91++;
              add_vertical_advance((uint64_t)v3, v76, *(double *)&array, value[0], *(double *)advances, v70, v71, v72, v73, v74, v75);
              v67 = v69 + 1;
              if (v67 >= v66)
                goto LABEL_103;
            }
            break;
          }
        }
LABEL_103:
        v65 = 2;
      }
      v56 += v65;
      if (v56 >= v55)
        return v3;
    }
LABEL_107:
    pdf_error(v57);
    return v3;
  }
  *(_QWORD *)advances = 0;
  FontDescriptor = CGPDFFontGetFontDescriptor(a1);
  if (FontDescriptor)
  {
    value[0] = 0.0;
    Number = CGPDFDictionaryGetNumber(*(CGPDFDictionaryRef *)(FontDescriptor + 32), "MissingWidth", value);
    v7 = value[0];
    if (!Number)
      v7 = 0.0;
    *(double *)advances = v7;
  }
  else
  {
    v7 = 0.0;
  }
  v10 = 0;
  v11 = vdupq_lane_s64(*(uint64_t *)&v7, 0);
  do
  {
    *(int64x2_t *)&v3[v10] = v11;
    v10 += 2;
  }
  while (v10 != 256);
  v91 = 0;
  array = 0;
  v90 = 0;
  v12 = *(CGPDFDictionary **)(a1 + 16);
  if (!CGPDFDictionaryGetInteger(v12, "FirstChar", &v91))
  {
    v13 = *(_DWORD *)(a1 + 40);
    if (v13)
      goto LABEL_24;
LABEL_22:
    pdf_error(v14);
    goto LABEL_23;
  }
  if ((unint64_t)v91 > 0xFF)
  {
LABEL_23:
    v13 = *(_DWORD *)(a1 + 40);
    goto LABEL_24;
  }
  if (!CGPDFDictionaryGetInteger(v12, "LastChar", &v90))
  {
    v13 = *(_DWORD *)(a1 + 40);
    if (v13)
      goto LABEL_24;
    goto LABEL_23;
  }
  if ((unint64_t)v90 > 0xFF || v91 > v90)
    goto LABEL_22;
  if (CGPDFDictionaryGetArray(v12, "Widths", &array))
  {
    if (array)
      v52 = *((_QWORD *)array + 2);
    else
      v52 = 0;
    v84 = v90;
    v85 = v91;
    if (v52 != v90 - v91 + 1)
    {
      v85 = v91;
      v86 = v91 + v52;
      if (v91 + v52 >= 256)
        v86 = 256;
      v84 = v86 - 1;
      v90 = v84;
    }
    if (v85 <= v84)
    {
      do
      {
        if (CGPDFArrayGetNumber(array, v85 - v91, (CGPDFReal *)advances))
          v3[v85] = *(void ***)advances;
        v42 = v85++ < v90;
      }
      while (v42);
    }
    return v3;
  }
  v13 = *(_DWORD *)(a1 + 40);
  if (!v13)
  {
    goto LABEL_23;
  }
LABEL_24:
  v125 = 0u;
  v124 = 0u;
  v123 = 0u;
  v122 = 0u;
  v121 = 0u;
  v120 = 0u;
  v119 = 0u;
  v118 = 0u;
  v117 = 0u;
  v116 = 0u;
  v115 = 0u;
  v114 = 0u;
  v113 = 0u;
  v112 = 0u;
  v111 = 0u;
  v110 = 0u;
  v109 = 0u;
  v108 = 0u;
  v107 = 0u;
  v106 = 0u;
  v105 = 0u;
  v104 = 0u;
  v103 = 0u;
  v102 = 0u;
  v101 = 0u;
  v100 = 0u;
  v99 = 0u;
  v98 = 0u;
  v97 = 0u;
  v96 = 0u;
  v95 = 0u;
  *(_OWORD *)value = 0u;
  Encoding = CGPDFFontGetEncoding((unint64_t *)a1);
  v16 = (uint64_t)Encoding;
  if (v13)
  {
    if (Encoding)
    {
      for (i = 0; i != 256; ++i)
        *(_QWORD *)&value[i] = CGPDFEncodingGetNameForIndex(v16, i);
      if (CGPDFBase14InfoGetAdvances(v13, (uint64_t)value, (uint64_t)v3))
        return v3;
    }
  }
  else
  {
    GlyphVector = (const CGGlyph *)CGPDFEncodingGetGlyphVector((size_t)Encoding);
    if (GlyphVector)
    {
      v19 = GlyphVector;
      Font = (CGFont *)CGPDFFontGetFont(a1);
      if (Font)
      {
        v21 = Font;
        CGFontGetGlyphAdvances(Font, v19, 0x100uLL, advances);
        font_info = get_font_info(v21);
        if (font_info)
        {
          LODWORD(v23) = font_info[2];
          v24 = (double)v23;
        }
        else
        {
          v24 = 0.0;
        }
        v77 = 0;
        v78 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v24, 0);
        v79 = (float64x2_t)vdupq_n_s64(0x408F400000000000uLL);
        v80 = (float64x2_t *)v3;
        do
        {
          v81 = *(_OWORD *)&advances[v77];
          v82.i64[0] = (int)v81;
          v82.i64[1] = SDWORD1(v81);
          v83 = vcvtq_f64_s64(v82);
          v82.i64[0] = SDWORD2(v81);
          v82.i64[1] = SHIDWORD(v81);
          *v80 = vdivq_f64(vmulq_f64(v83, v79), v78);
          v80[1] = vdivq_f64(vmulq_f64(vcvtq_f64_s64(v82), v79), v78);
          v80 += 2;
          v77 += 4;
        }
        while (v77 != 256);
        return v3;
      }
    }
  }
  v25 = CGPDFFontGetEncoding((unint64_t *)a1);
  if (v25)
  {
    v26 = (uint64_t)v25;
    v27 = 0;
    v125 = 0u;
    v124 = 0u;
    v123 = 0u;
    v122 = 0u;
    v121 = 0u;
    v120 = 0u;
    v119 = 0u;
    v118 = 0u;
    v117 = 0u;
    v116 = 0u;
    v115 = 0u;
    v114 = 0u;
    v113 = 0u;
    v112 = 0u;
    v111 = 0u;
    v110 = 0u;
    v109 = 0u;
    v108 = 0u;
    v107 = 0u;
    v106 = 0u;
    v105 = 0u;
    v104 = 0u;
    v103 = 0u;
    v102 = 0u;
    v101 = 0u;
    v100 = 0u;
    v99 = 0u;
    v98 = 0u;
    v97 = 0u;
    v96 = 0u;
    v95 = 0u;
    *(_OWORD *)value = 0u;
    do
    {
      *(_QWORD *)&value[v27] = CGPDFEncodingGetNameForIndex(v26, v27);
      ++v27;
    }
    while (v27 != 256);
    v28 = (_QWORD *)CGPDFFontGetFont(a1);
    v29 = get_font_info(v28);
    if (v29 && v29[48])
      v30 = 1;
    else
      v30 = 5;
    CGPDFBase14InfoGetAdvances(v30, (uint64_t)value, (uint64_t)v3);
  }
  else
  {
    memset_pattern16(v3, &unk_1850051D0, 0x800uLL);
  }
  return v3;
}

uint64_t add_horizontal_advance(uint64_t result, unint64_t a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  double *v12;

  v11 = result;
  if (a2 > 0xFF)
  {
    result = add_advance(*(_QWORD *)(result + 2056), a2, 0, a3, a5, a6, a7, a8, a9);
    if ((result & 1) == 0)
    {
      v12 = (double *)malloc_type_calloc(1uLL, 0x40uLL, 0x33BCE901uLL);
      result = __CFSetLastAllocationEventName();
      if (v12)
      {
        *((_QWORD *)v12 + 2) = a2;
        v12[3] = a3;
        v12[4] = 0.0;
        v12[7] = 0.0;
        *v12 = *(double *)(v11 + 2056);
        *((_QWORD *)v12 + 1) = a2;
        *(_QWORD *)(v11 + 2056) = v12;
      }
    }
  }
  else
  {
    *(double *)(result + 8 * a2) = a3;
  }
  return result;
}

uint64_t add_vertical_advance(uint64_t a1, unint64_t a2, double a3, double a4, double a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t result;
  char *v15;
  __int128 v16;

  *(double *)&v16 = a4;
  *((double *)&v16 + 1) = a5;
  result = add_advance(*(_QWORD *)(a1 + 2080), a2, (double *)&v16, a3, a7, a8, a9, a10, a11);
  if ((result & 1) == 0)
  {
    v15 = (char *)malloc_type_calloc(1uLL, 0x40uLL, 0x33BCE901uLL);
    result = __CFSetLastAllocationEventName();
    if (v15)
    {
      *((_QWORD *)v15 + 2) = a2;
      *((double *)v15 + 3) = a3;
      *(_OWORD *)(v15 + 40) = v16;
      *((_QWORD *)v15 + 4) = 0;
      *((_QWORD *)v15 + 7) = 0;
      *(_QWORD *)v15 = *(_QWORD *)(a1 + 2080);
      *((_QWORD *)v15 + 1) = a2;
      *(_QWORD *)(a1 + 2080) = v15;
    }
  }
  return result;
}

void CGPDFAdvancesRelease(void ***a1)
{
  if (a1)
  {
    advance_subset_release(a1[257]);
    advance_subset_release(a1[260]);
    free(a1);
  }
}

void advance_subset_release(void **a1)
{
  void **v1;
  void **v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (void **)*v1;
      free(v1[4]);
      free(v1[7]);
      free(v1);
      v1 = v2;
    }
    while (v2);
  }
}

uint64_t add_advance(uint64_t result, unint64_t a2, double *a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  double *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  double *v22;
  uint64_t i;
  unint64_t v24;
  _OWORD *v25;
  uint64_t j;

  if (result)
  {
    v12 = 0;
    do
    {
      v13 = *(_QWORD *)(result + 8);
      v14 = a2 >= v13;
      v15 = a2 - v13;
      if (!v14)
        break;
      v16 = *(_QWORD *)(result + 16);
      if (v16 >= a2)
      {
        v21 = *(_QWORD *)(result + 32);
        v22 = (double *)(v21 + 8 * v15);
        if (!v21)
          v22 = (double *)(result + 24);
        if (*v22 != a4)
        {
          pdf_error("advance for index %zu already specified.", a2);
          return 0;
        }
        return 1;
      }
      if (v16 + 1 == a2)
        v12 = result;
      result = *(_QWORD *)result;
    }
    while (result);
    if (!v12)
      return 0;
    v17 = *(_QWORD *)(v12 + 16);
    if (v17 + 1 != a2)
      _CGHandleAssert("add_advance_to_subset", 418, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Text/Advances/CGPDFAdvances.c", "index == subset->last + 1", "index: %zu  last: %zu", a7, a8, a9, a2);
    v18 = *(double **)(v12 + 32);
    if (v18)
    {
      v20 = (uint64_t *)(v12 + 8);
      v19 = *(_QWORD *)(v12 + 8);
      if ((unint64_t)(v17 - v19 - 255) < 0xFFFFFFFFFFFFFEFFLL)
        return 0;
    }
    else
    {
      if (*(double *)(v12 + 24) == a4
        && (!a3 || !*(_QWORD *)(v12 + 56) && *(double *)(v12 + 40) == *a3 && *(double *)(v12 + 48) == a3[1]))
      {
        *(_QWORD *)(v12 + 16) = a2;
        return 1;
      }
      v20 = (uint64_t *)(v12 + 8);
      if ((unint64_t)(v17 - *(_QWORD *)(v12 + 8) - 255) < 0xFFFFFFFFFFFFFEFFLL)
        return 0;
      result = (uint64_t)malloc_type_malloc(0x800uLL, 0x100004000313F17uLL);
      if (!result)
        return result;
      v18 = (double *)result;
      for (i = 0; i != 2048; i += 8)
        *(_QWORD *)(result + i) = *(_QWORD *)(v12 + 24);
      v19 = *v20;
    }
    v24 = a2 - v19;
    v18[a2 - v19] = a4;
    v25 = *(_OWORD **)(v12 + 56);
    if (a3)
    {
      if (!v25)
      {
        v25 = malloc_type_malloc(0x1000uLL, 0x1000040451B5BE8uLL);
        if (!v25)
        {
          free(v18);
          return 0;
        }
        for (j = 0; j != 256; ++j)
          v25[j] = *(_OWORD *)(v12 + 40);
        v24 = a2 - *v20;
      }
      v25[v24] = *(_OWORD *)a3;
    }
    *(_QWORD *)(v12 + 32) = v18;
    *(_QWORD *)(v12 + 56) = v25;
    ++*(_QWORD *)(v12 + 16);
    return 1;
  }
  return result;
}

double CGPDFAdvancesGetHorizontalAdvance(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  if (a2 > 0xFF)
  {
    v3 = *(_QWORD **)(a1 + 2056);
    if (v3)
    {
      while (1)
      {
        v4 = v3[1];
        v5 = a2 >= v4;
        v6 = a2 - v4;
        if (v5 && v3[2] >= a2)
          break;
        v3 = (_QWORD *)*v3;
        if (!v3)
          goto LABEL_8;
      }
      v7 = v3[4];
      v8 = (_QWORD *)(v7 + 8 * v6);
      v2 = v3 + 3;
      if (v7)
        v2 = v8;
    }
    else
    {
LABEL_8:
      v2 = (_QWORD *)(a1 + 2048);
    }
  }
  else
  {
    v2 = (_QWORD *)(a1 + 8 * a2);
  }
  return *(double *)v2;
}

double CGPDFAdvancesGetVerticalAdvance(uint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  double HorizontalAdvance;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;

  v5 = *(_QWORD **)(a1 + 2080);
  if (v5)
  {
    while (1)
    {
      v6 = v5[1];
      v7 = a2 >= v6;
      v8 = a2 - v6;
      if (v7 && v5[2] >= a2)
        break;
      v5 = (_QWORD *)*v5;
      if (!v5)
        goto LABEL_6;
    }
    v13 = v5[7];
    v14 = (_OWORD *)(v13 + 16 * v8);
    if (!v13)
      v14 = v5 + 5;
    *(_OWORD *)a3 = *v14;
    v15 = v5[4];
    if (v15)
      v11 = (_QWORD *)(v15 + 8 * (a2 - v5[1]));
    else
      v11 = v5 + 3;
  }
  else
  {
LABEL_6:
    HorizontalAdvance = CGPDFAdvancesGetHorizontalAdvance(a1, a2);
    v10 = *(_QWORD *)(a1 + 2072);
    *(double *)a3 = HorizontalAdvance * 0.5;
    *(_QWORD *)(a3 + 8) = v10;
    v11 = (_QWORD *)(a1 + 2064);
  }
  return *(double *)v11;
}

uint64_t CGPDFAdvancesValidate(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  v1 = result;
  v2 = *(_QWORD *)(result + 2056);
  if (v2)
  {
    v3 = 0;
    v4 = 0;
    do
    {
      v5 = (uint64_t *)v2;
      result = validate_subset(72, v4++, v2, v3);
      v2 = *v5;
      v3 = (uint64_t)v5;
    }
    while (*v5);
  }
  v6 = *(_QWORD *)(v1 + 2080);
  if (v6)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = (uint64_t *)v6;
      result = validate_subset(86, v8++, v6, v7);
      v6 = *v9;
      v7 = (uint64_t)v9;
    }
    while (*v9);
  }
  return result;
}

uint64_t validate_subset(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = *(_QWORD *)(a3 + 8);
  if (v8 <= 0xFF)
  {
    result = fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s: subset %zu (%c): first = %zu; last = %zu\n",
               "CGPDFAdvancesValidate",
               a2,
               result,
               *(_QWORD *)(a3 + 8),
               *(_QWORD *)(a3 + 16));
    v8 = *(_QWORD *)(a3 + 8);
  }
  v9 = *(_QWORD *)(a3 + 16);
  if (v8 > v9)
    result = fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s: subset %zu (%c): first = %zu; last = %zu\n",
               "CGPDFAdvancesValidate",
               a2,
               v7,
               v8,
               v9);
  if (a4)
  {
    v10 = *(_QWORD *)(a4 + 16);
    if (v10 >= *(_QWORD *)(a3 + 8))
      return fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s: subset %zu (%c): first = %zu, last = %zu; subset %zu (%c): first = %zu, last = %zu\n",
               "CGPDFAdvancesValidate",
               a2 - 1,
               v7,
               *(_QWORD *)(a4 + 8),
               v10,
               a2,
               v7,
               *(_QWORD *)(a3 + 8),
               *(_QWORD *)(a3 + 16));
  }
  return result;
}

uint64_t CGPDFAdvancesPrint(uint64_t a1, FILE *__stream)
{
  uint64_t i;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  fwrite("Subset 0:\n", 0xAuLL, 1uLL, __stream);
  for (i = 0; i != 256; ++i)
    result = fprintf(__stream, "%lu: %g\n", i, *(double *)(a1 + 8 * i));
  v6 = *(_QWORD **)(a1 + 2056);
  if (v6)
  {
    v7 = 1;
    do
    {
      v8 = v7 + 1;
      result = print_subset(__stream, 72, v6, v7);
      v6 = (_QWORD *)*v6;
      v7 = v8;
    }
    while (v6);
  }
  v9 = *(_QWORD **)(a1 + 2080);
  if (v9)
  {
    v10 = 0;
    do
    {
      v11 = v10 + 1;
      result = print_subset(__stream, 86, v9, v10);
      v9 = (_QWORD *)*v9;
      v10 = v11;
    }
    while (v9);
  }
  return result;
}

uint64_t print_subset(FILE *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  int v5;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double *v17;
  char v18;

  v5 = a2;
  result = fprintf(a1, "Subset %zu (%c):\n", a4, a2);
  v11 = a3[4];
  if (v5 == 72)
  {
    v12 = a3[1];
    if (v11)
    {
      for (; v12 <= a3[2]; ++v12)
        result = fprintf(a1, "%zu: %g\n", v12, *(double *)(a3[4] - 8 * a3[1] + 8 * v12));
    }
    else
    {
      return fprintf(a1, "%zu - %zu: %g\n");
    }
  }
  else if (v11)
  {
    v13 = a3[1];
    if (v13 <= a3[2])
    {
      v14 = 16 * v13;
      do
      {
        v15 = a3[1];
        v16 = *(double *)(a3[4] - 8 * v15 + 8 * v13);
        v17 = (double *)(a3[7] - 16 * v15 + v14);
        result = fprintf(a1, "%zu: %g (%g %g)\n", v13++, v16, *v17, v17[1]);
        v14 += 16;
      }
      while (v13 <= a3[2]);
    }
  }
  else
  {
    if (a3[7])
      _CGHandleAssert("print_subset", 233, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Text/Advances/CGPDFAdvances.c", "s->offsets == NULL", "NULL offsets", v8, v9, v10, v18);
    return fprintf(a1, "%zu - %zu: %g (%g %g)\n");
  }
  return result;
}

void CGColorConversionInfoShowSteps(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  show_steps(a1, 0, a3, a4, a5, a6, a7, a8);
}

void show_steps(_QWORD *cf, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeID v10;
  uint64_t color_conversion_step_info;
  const void *v12;

  if (!cf)
    goto LABEL_7;
  v10 = CFGetTypeID(cf);
  if (CGColorConversionInfoGetTypeID_predicate != -1)
    dispatch_once(&CGColorConversionInfoGetTypeID_predicate, &__block_literal_global_1103);
  if (v10 == kCGColorConverterRuntimeID
    && (color_conversion_step_info = create_color_conversion_step_info(cf, a2)) != 0)
  {
    v12 = (const void *)color_conversion_step_info;
    CGLog(4, (uint64_t)"%@", a3, a4, a5, a6, a7, a8, color_conversion_step_info);
    CFRelease(v12);
  }
  else
  {
LABEL_7:
    CGLog(4, (uint64_t)"Nothing to show for <%p> CGColorConversionInfo", a3, a4, a5, a6, a7, a8, (char)cf);
  }
}

uint64_t create_color_conversion_step_info(_QWORD *a1, unsigned int a2)
{
  uint64_t *v2;
  const __CFString *v3;
  CFIndex Length;
  const void *v5;
  uint64_t v6;
  _QWORD v8[5];
  _QWORD v9[5];
  _QWORD v10[5];
  _QWORD v11[6];
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v13 = 0;
  v14 = &v13;
  v15 = 0x2000000000;
  v16 = 0;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 0x40000000;
  v11[2] = __create_color_conversion_step_info_block_invoke;
  v11[3] = &unk_1E1643608;
  v11[4] = &v13;
  v11[5] = a1;
  v12 = a2;
  v9[4] = &v13;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 0x40000000;
  v10[2] = __create_color_conversion_step_info_block_invoke_2;
  v10[3] = &unk_1E1643630;
  v10[4] = &v13;
  v8[4] = &v13;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = __create_color_conversion_step_info_block_invoke_3;
  v9[3] = &unk_1E1643658;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = __create_color_conversion_step_info_block_invoke_4;
  v8[3] = &unk_1E1643680;
  if ((CGColorConversionInfoIterateFunctionsWithCallbacks(a1, a2, (uint64_t)v11, (uint64_t)v10, (uint64_t)v9, (uint64_t)v8, 2u, 0) & 1) != 0)
  {
    v2 = v14;
    v3 = (const __CFString *)v14[3];
    if (v3)
    {
      Length = CFStringGetLength(v3);
      v2 = v14;
      if (Length >= 1)
      {
        CFStringAppend((CFMutableStringRef)v14[3], CFSTR("*********************************************************************************\n"));
        v2 = v14;
      }
    }
  }
  else
  {
    fwrite("CGColorConversionInfoIterateFunctionsWithCallbacks failed!\n", 0x3BuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    v2 = v14;
    v5 = (const void *)v14[3];
    if (v5)
    {
      CFRelease(v5);
      v2 = v14;
    }
    v2[3] = 0;
  }
  v6 = v2[3];
  _Block_object_dispose(&v13, 8);
  return v6;
}

__CFString *__create_color_conversion_step_info_block_invoke(uint64_t a1, uint64_t a2, const void *a3)
{
  const __CFAllocator *v6;
  __CFString *result;
  uint64_t v8;
  const char *v9;
  CFStringRef v10;
  __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CFStringRef v18;

  v6 = CFGetAllocator(*(CFTypeRef *)(a1 + 40));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFStringCreateMutable(v6, 0);
  result = *(__CFString **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (result)
  {
    CFStringAppend(result, CFSTR("\n*************************************************************************\n"));
    v8 = *(unsigned int *)(a1 + 48);
    if (v8 > 2)
      v9 = "(?)";
    else
      v9 = off_1E16436A0[v8];
    CFStringAppendFormat(*(CFMutableStringRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), 0, CFSTR("CGColorConversionInfo show steps for %s\n"), v9);
    CFStringAppend(*(CFMutableStringRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), CFSTR("*************************************************************************\n"));
    v10 = CFCopyDescription(*(CFTypeRef *)(a1 + 40));
    CFStringAppendFormat(*(CFMutableStringRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), 0, CFSTR("CGColorConversionInfo info:\n %@"), v10);
    CFRelease(v10);
    v11 = *(__CFString **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v12 = *(_QWORD *)(a2 + 4);
    v13 = *(_QWORD *)(a2 + 12);
    v14 = *(_QWORD *)(a2 + 20);
    v15 = *(_QWORD *)(a2 + 28);
    v16 = *(_QWORD *)(a2 + 36);
    v17 = *(_QWORD *)(a2 + 44);
    CFStringAppendFormat(v11, 0, CFSTR("    %d stages\n"), v12);
    CFStringAppendFormat(v11, 0, CFSTR("    %d input components\n"), v13);
    CFStringAppendFormat(v11, 0, CFSTR("    %d output components\n"), v14);
    CFStringAppendFormat(v11, 0, CFSTR("    %d TRCs\n"), v15);
    CFStringAppendFormat(v11, 0, CFSTR("    %d Matrices\n"), v16);
    CFStringAppendFormat(v11, 0, CFSTR("    %d NxM Transforms\n"), v17);
    v18 = CFCopyDescription(a3);
    CFStringAppendFormat(*(CFMutableStringRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), 0, CFSTR("ColorSync Profile Sequence info:\n%@\n"), v18);
    CFRelease(v18);
    CFStringAppend(*(CFMutableStringRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), CFSTR("----------------------------------------\n"));
    CFStringAppend(*(CFMutableStringRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), CFSTR("               STAGES \n"));
    CFStringAppend(*(CFMutableStringRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), CFSTR("----------------------------------------\n"));
    return (__CFString *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) != 0);
  }
  return result;
}

uint64_t __create_color_conversion_step_info_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  _BOOL4 v14;
  const char *v15;
  char Properties;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  float v27;

  v7 = *(__CFString **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  v8 = *(_QWORD *)(a2 + 52);
  CFStringAppendFormat(v7, 0, CFSTR("Stage = %ld, %ld TRCs\n"), a3, a4);
  if (a4 >= 1)
  {
    v9 = 0;
    do
    {
      v27 = 0.0;
      v25 = 0u;
      v26 = 0u;
      CGColorTRCGetFunction(*(_QWORD *)(v8 + 8 * *(_QWORD *)(a5 + 8 * v9)), (uint64_t)&v25);
      v10 = *(_QWORD *)(v8 + 8 * *(_QWORD *)(a5 + 8 * v9));
      if (CGColorTRCGetGammaID_cglibrarypredicate != -1)
        dispatch_once(&CGColorTRCGetGammaID_cglibrarypredicate, &__block_literal_global_6);
      v11 = CGColorTRCGetGammaID_f(v10);
      v12 = v25;
      v14 = v25 < 5 || (v25 - 6) < 5;
      if ((_DWORD)v25 == -1)
        CFStringAppend(v7, CFSTR("kCGColorTRCParametricInv709_1886_EOTF_Type: handled\n"));
      if (v11 >= 0x12)
        __assert_rtn("gamma_id_by_name", "CGColorConversionInfoShow.c", 210, "0");
      v15 = "NO";
      if (v14)
        v15 = "YES";
      CFStringAppendFormat(v7, 0, CFSTR("    TRC channel %d --> TRCs[%ld], parametric = %s gammaID = %s\n"), v9, *(_QWORD *)(a5 + 8 * v9), v15, off_1E16436B8[v11]);
      Properties = CGColorFunctionGetProperties(*(const void **)(v8 + 8 * *(_QWORD *)(a5 + 8 * v9)));
      switch(v12)
      {
        case 0:
          CFStringAppendFormat(v7, 0, CFSTR("\t\tType0: Y = X^% 3.10f \n"), *((float *)&v25 + 1), v18, v19, v20, v21, v22, v23, v24);
          break;
        case 1:
          CFStringAppendFormat(v7, 0, CFSTR("\t\tType1: Y = (%g*X+%g)^%g [X >= %g],  Y = 0 [X < %g]\n"), *((float *)&v25 + 2), *((float *)&v25 + 3), *((float *)&v25 + 1), (float)((float)-*((float *)&v25 + 3) / *((float *)&v25 + 2)), (float)((float)-*((float *)&v25 + 3) / *((float *)&v25 + 2)), v22, v23, v24);
          break;
        case 2:
          CFStringAppendFormat(v7, 0, CFSTR("\t\tType2: Y = (%g*X+%g)^%g + % 3.10f [X >= %g],  Y = %g [X < %g]\n"), *((float *)&v25 + 2), *((float *)&v25 + 3), *((float *)&v25 + 1), *(float *)&v26, (float)((float)-*((float *)&v25 + 3) / *((float *)&v25 + 2)), *(float *)&v26, (float)((float)-*((float *)&v25 + 3) / *((float *)&v25 + 2)), v24);
          break;
        case 3:
          CFStringAppendFormat(v7, 0, CFSTR("\t\tType3: Y = (%g*X+%g)^%g [X >= %g],  Y = %g*X [X < %g]\n"), *((float *)&v25 + 2), *((float *)&v25 + 3), *((float *)&v25 + 1), *((float *)&v26 + 1), *(float *)&v26, *((float *)&v26 + 1), v23, v24);
          break;
        case 4:
          CFStringAppendFormat(v7, 0, CFSTR("\t\tType4: Y = (%g*X+%g)^%g + %g [X >= %g], Y = %g*X + %g [X < %g]\n"), *((float *)&v25 + 2), *((float *)&v25 + 3), *((float *)&v25 + 1), *((float *)&v26 + 2), *((float *)&v26 + 1), *(float *)&v26, *((float *)&v26 + 3), *((float *)&v26 + 1));
          break;
        case 5:
          CFStringAppendFormat(v7, 0, CFSTR("\t\tTable: entries = %zu\n"), *(_QWORD *)((char *)&v25 + 4));
          CFStringAppendFormat(v7, 0, CFSTR("\t\t\tColorSyncBoundaryExtension neg: slope = %g intercept = %g\n"), *((float *)&v26 + 3), v27);
          CFStringAppendFormat(v7, 0, CFSTR("\t\t\tColorSyncBoundaryExtension pos: slope = %g intercept = %g\n"), *((float *)&v26 + 1), *((float *)&v26 + 2), v19, v20, v21, v22, v23, v24);
          break;
        case 6:
          CFStringAppendFormat(v7, 0, CFSTR("\t\tPQ_EOTF_Type: Y = Reference_PQ_EOTF(X)  [a = %g, b = %g, c = %g, d = %g, e = %g, f = %g]\n"), *((float *)&v25 + 2), *((float *)&v25 + 3), *(float *)&v26, *((float *)&v26 + 1), *((float *)&v26 + 2), *((float *)&v26 + 3), v23, v24);
          break;
        case 7:
          CFStringAppendFormat(v7, 0, CFSTR("\t\tPQ_InvEOTF_Type: Y = Reference_PQ_InvEOTF(X)  [a = %g, b = %g, c = %g, d = %g, e = %g, f = %g, g = %g]\n"), *((float *)&v25 + 2), *((float *)&v25 + 3), *(float *)&v26, *((float *)&v26 + 1), *((float *)&v26 + 2), *((float *)&v26 + 3), v27, v24);
          break;
        case 8:
          CFStringAppendFormat(v7, 0, CFSTR("\t\tHLG_InvOETF_Type: Y = Reference_HLG_InvOETF(X)  [a = %g, b = %g, c = %g, d = %g, e = %g, f = %g]\n"), *((float *)&v25 + 2), *((float *)&v25 + 3), *(float *)&v26, *((float *)&v26 + 1), *((float *)&v26 + 2), *((float *)&v26 + 3), v23, v24);
          break;
        case 9:
          CFStringAppendFormat(v7, 0, CFSTR("\t\tHLG_OETF_Type: Y = Reference_HLG_OETF(X)  [a = %g, b = %g, c = %g, d = %g e = %g]\n"), *((float *)&v25 + 2), *((float *)&v25 + 3), *(float *)&v26, *((float *)&v26 + 1), *((float *)&v26 + 2), v22, v23, v24);
          break;
        case 10:
          CFStringAppendFormat(v7, 0, CFSTR("\t\tEXRToneMap_Type: Y = EXR Tone Mapping Gamma(X)  [defog = %g, exposure_scale = %g, kneeLow = %g, kneeHigh = %g, intermediate_gamma = %g, intensity_scale = %g]\n"), *((float *)&v25 + 2), *((float *)&v25 + 3), *(float *)&v26, *((float *)&v26 + 1), *((float *)&v26 + 2), *((float *)&v26 + 3), v23, v24);
          break;
        default:
          break;
      }
      append_properties_info(v7, Properties);
      append_range_info(v7, *(const void **)(v8 + 8 * *(_QWORD *)(a5 + 8 * v9++)));
    }
    while (a4 != v9);
  }
  return 1;
}

uint64_t __create_color_conversion_step_info_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __CFString *v6;
  uint64_t v7;
  _OWORD *v8;
  char Properties;
  uint64_t i;
  uint64_t j;
  _OWORD v13[3];

  v6 = *(__CFString **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  v7 = *(_QWORD *)(a2 + 60);
  memset(v13, 0, sizeof(v13));
  v8 = v13;
  CGColorMatrixGetMatrix(*(_QWORD *)(v7 + 8 * a4), v13);
  Properties = CGColorFunctionGetProperties(*(const void **)(v7 + 8 * a4));
  CFStringAppendFormat(v6, 0, CFSTR("Stage = %ld, matrix index = %ld\n"), a3, a4);
  for (i = 0; i != 3; ++i)
  {
    CFStringAppend(v6, CFSTR("\t"));
    for (j = 0; j != 16; j += 4)
      CFStringAppendFormat(v6, 0, CFSTR("% 3.10f "), *(float *)((char *)v8 + j));
    CFStringAppend(v6, CFSTR("\n"));
    ++v8;
  }
  append_properties_info(v6, Properties);
  append_range_info(v6, *(const void **)(v7 + 8 * a4));
  return 1;
}

uint64_t __create_color_conversion_step_info_block_invoke_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __CFString *v6;
  uint64_t v7;
  char Properties;
  unsigned int v9;
  const char *v10;
  int v11;
  const char *v12;
  const char *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  const __CFString *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  _OWORD v37[3];

  v6 = *(__CFString **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  v7 = *(_QWORD *)(a2 + 68);
  memset(v37, 0, 36);
  CGColorNxMTransformGetTransform(*(_QWORD *)(v7 + 8 * a4), (uint64_t)v37);
  Properties = CGColorFunctionGetProperties(*(const void **)(v7 + 8 * a4));
  v9 = v37[0];
  v10 = "?";
  if (LODWORD(v37[0]) <= 0xB)
    v10 = off_1E1643748[LODWORD(v37[0])];
  CFStringAppendFormat(v6, 0, CFSTR("Stage = %ld, %zu inputs x %zu outputs %s index = %ld\n"), a3, *(_OWORD *)((char *)v37 + 4), v10, a4);
  switch(v9)
  {
    case 7u:
      v11 = *(_DWORD *)(*(_QWORD *)((char *)&v37[1] + 12) + 24);
      v12 = "HLG Inverted OOTF";
      if (v11 != 1)
        v12 = "?";
      if (v11)
        v13 = v12;
      else
        v13 = "HLG OOTF";
      CFStringAppendFormat(v6, 0, CFSTR("\tHLG Luminance scaling (%s) params: \n\t\tgamma = % 3.10f gain = % 3.10f\n\t\tparams->luminance_coefficients[0] = % 3.10f\n\t\tparams->luminance_coefficients[1] = % 3.10f\n\t\tparams->luminance_coefficients[2] = % 3.10f\n\t\tparams->luminance_coefficients[3] = % 3.10f\n"), v13, **(float **)((char *)&v37[1] + 12), *(float *)(*(_QWORD *)((char *)&v37[1] + 12) + 4), *(float *)(*(_QWORD *)((char *)&v37[1] + 12) + 8), *(float *)(*(_QWORD *)((char *)&v37[1] + 12) + 12), *(float *)(*(_QWORD *)((char *)&v37[1] + 12) + 16), *(float *)(*(_QWORD *)((char *)&v37[1] + 12) + 20));
      break;
    case 8u:
      CFStringAppendFormat(v6, 0, CFSTR("\tHLG Scene Referred Mapping params: \n\t\tgamma = % 3.10f gain = % 3.10f\n\t\tparams->luminance_coefficients[0] = % 3.10f\n\t\tparams->luminance_coefficients[1] = % 3.10f\n\t\tparams->luminance_coefficients[2] = % 3.10f\n\t\tparams->luminance_coefficients[3] = % 3.10f\n"), **(float **)((char *)&v37[1] + 12), *(float *)(*(_QWORD *)((char *)&v37[1] + 12) + 4), *(float *)(*(_QWORD *)((char *)&v37[1] + 12) + 8), *(float *)(*(_QWORD *)((char *)&v37[1] + 12) + 12), *(float *)(*(_QWORD *)((char *)&v37[1] + 12) + 16), *(float *)(*(_QWORD *)((char *)&v37[1] + 12) + 20));
      break;
    case 9u:
      v14 = **(float **)((char *)&v37[1] + 12);
      v15 = *(float *)(*(_QWORD *)((char *)&v37[1] + 12) + 4);
      v16 = *(float *)(*(_QWORD *)((char *)&v37[1] + 12) + 8);
      v17 = *(float *)(*(_QWORD *)((char *)&v37[1] + 12) + 12);
      v35 = *(float *)(*(_QWORD *)((char *)&v37[1] + 12) + 64);
      v36 = *(float *)(*(_QWORD *)((char *)&v37[1] + 12) + 68);
      v33 = *(float *)(*(_QWORD *)((char *)&v37[1] + 12) + 56);
      v34 = *(float *)(*(_QWORD *)((char *)&v37[1] + 12) + 60);
      v31 = *(float *)(*(_QWORD *)((char *)&v37[1] + 12) + 40);
      v32 = *(float *)(*(_QWORD *)((char *)&v37[1] + 12) + 44);
      v29 = *(float *)(*(_QWORD *)((char *)&v37[1] + 12) + 32);
      v30 = *(float *)(*(_QWORD *)((char *)&v37[1] + 12) + 36);
      v27 = *(float *)(*(_QWORD *)((char *)&v37[1] + 12) + 24);
      v28 = *(float *)(*(_QWORD *)((char *)&v37[1] + 12) + 28);
      v25 = *(float *)(*(_QWORD *)((char *)&v37[1] + 12) + 16);
      v26 = *(float *)(*(_QWORD *)((char *)&v37[1] + 12) + 20);
      v18 = CFSTR("\tPQ tone mapping params:\n\t\tparams->pq_eotf.m1 = % 3.10f\n\t\tparams->pq_eotf.m2 = % 3.10f\n\n\t\tparams->pq_eotf.c1 = % 3.10f\n\t\tparams->pq_eotf.c2 = % 3.10f\n\t\tparams->pq_eotf.c3 = % 3.10f\n\n\t\tparams->pq_eetf.masterPeakInv = % 3.10f\n\t\tparams->pq_eetf.masterBlackInv = % 3.10f\n\t\tparams->pq_eetf.maxLum = % 3.10f\n\t\tparams->pq_eetf.minLum = % 3.10f\n\t\tparams->pq_eetf.KneeStart = % 3.10f\n\t\tparams->pq_eetf.KneeStartScale = % 3.10f\n\t\tparams->pq_eetf.optical_scale = % 3.10f\n\t\tparams->luminance_coefficients[0] = % 3.10f\n\t\tparams->luminance_coefficients[1] = % 3.10f\n\t\tparams->luminance_coefficients[2] = % 3.10f\n\t\tparams->luminance_coefficients[3] = % 3.10f\n");
      goto LABEL_14;
    case 0xAu:
      v14 = **(float **)((char *)&v37[1] + 12);
      v15 = *(float *)(*(_QWORD *)((char *)&v37[1] + 12) + 4);
      v16 = *(float *)(*(_QWORD *)((char *)&v37[1] + 12) + 8);
      v17 = *(float *)(*(_QWORD *)((char *)&v37[1] + 12) + 12);
      v28 = *(float *)(*(_QWORD *)((char *)&v37[1] + 12) + 32);
      v29 = *(float *)(*(_QWORD *)((char *)&v37[1] + 12) + 36);
      v26 = *(float *)(*(_QWORD *)((char *)&v37[1] + 12) + 24);
      v27 = *(float *)(*(_QWORD *)((char *)&v37[1] + 12) + 28);
      v25 = *(float *)(*(_QWORD *)((char *)&v37[1] + 12) + 20);
      v18 = CFSTR("\tReference White Tone Mapping params:\n\t\tluminance scale = % 3.10f\n\t\tadjusted source headroom = % 3.10f\n\t\ttarget headroom = % 3.10f\n\t\ttarget reference white = % 3.10f\n\t\tcofficient a = % 3.10f\n\t\tcofficient b = % 3.10f\n\t\tcofficient c = % 3.10f\n\t\tcofficient d = % 3.10f\n\t\tcofficient e = % 3.10f\n");
      goto LABEL_14;
    case 0xBu:
      v14 = **(float **)((char *)&v37[1] + 12);
      v15 = *(float *)(*(_QWORD *)((char *)&v37[1] + 12) + 4);
      v16 = *(float *)(*(_QWORD *)((char *)&v37[1] + 12) + 8);
      v17 = *(float *)(*(_QWORD *)((char *)&v37[1] + 12) + 12);
      v28 = *(double *)(*(_QWORD *)((char *)&v37[1] + 12) + 28);
      *(_QWORD *)&v29 = *(_QWORD *)((char *)&v37[1] + 12) + 36;
      v26 = *(float *)(*(_QWORD *)((char *)&v37[1] + 12) + 20);
      v27 = *(float *)(*(_QWORD *)((char *)&v37[1] + 12) + 24);
      v25 = *(float *)(*(_QWORD *)((char *)&v37[1] + 12) + 16);
      v18 = CFSTR("\tFlex Luminance Scaling params:\n\t\tsource headroom = % 3.10f\n\t\ttarget headroom = % 3.10f\n\t\tcoefficients[0] = % 3.10f\n\t\tcoefficients[1] = % 3.10f\n\t\tcoefficients[2] = % 3.10f\n\t\tcoefficients[3] = % 3.10f\n\t\tcoefficients[4] = % 3.10f\n\t\tFlexGTCTableCount = %zu\n\t\tFlexGTCTable = %p\n");
LABEL_14:
      CFStringAppendFormat(v6, 0, v18, *(_QWORD *)&v14, *(_QWORD *)&v15, *(_QWORD *)&v16, *(_QWORD *)&v17, *(_QWORD *)&v25, *(_QWORD *)&v26, *(_QWORD *)&v27, *(_QWORD *)&v28, *(_QWORD *)&v29, *(_QWORD *)&v30, *(_QWORD *)&v31, *(_QWORD *)&v32, *(_QWORD *)&v33, *(_QWORD *)&v34, *(_QWORD *)&v35, *(_QWORD *)&v36);
      break;
    case 0xCu:
      CFStringAppendFormat(v6, 0, CFSTR("\tLuminance scaling params: \n\t\tgamma = % 3.10f\n\t\tparams->luminance_coefficients[0] = % 3.10f\n\t\tparams->luminance_coefficients[1] = % 3.10f\n\t\tparams->luminance_coefficients[2] = % 3.10f\n\t\tparams->luminance_coefficients[3] = % 3.10f\n"), **(float **)((char *)&v37[1] + 12), *(float *)(*(_QWORD *)((char *)&v37[1] + 12) + 4), *(float *)(*(_QWORD *)((char *)&v37[1] + 12) + 8), *(float *)(*(_QWORD *)((char *)&v37[1] + 12) + 12), *(float *)(*(_QWORD *)((char *)&v37[1] + 12) + 16));
      break;
    default:
      if (v9 > 6)
        CFStringAppendFormat(v6, 0, CFSTR("\t\tUnknown format\n\n"), v20, v21, v22, v23, v24);
      else
        CFStringAppendFormat(v6, 0, CFSTR("\t\tGrid point count = %zu\n\n"), *(_QWORD *)((char *)&v37[1] + 4), v21, v22, v23, v24);
      break;
  }
  append_properties_info(v6, Properties);
  append_range_info(v6, *(const void **)(v7 + 8 * a4));
  return 1;
}

void append_properties_info(__CFString *a1, char a2)
{
  const char *v2;
  const char *v3;
  const char *v4;
  const char *v5;
  const char *v6;

  v2 = "Yes";
  if ((a2 & 1) != 0)
    v3 = "Yes";
  else
    v3 = "No";
  if ((a2 & 2) != 0)
    v4 = "Yes";
  else
    v4 = "No";
  if ((a2 & 4) != 0)
    v5 = "Yes";
  else
    v5 = "No";
  if ((a2 & 0x10) != 0)
    v6 = "Yes";
  else
    v6 = "No";
  if ((a2 & 8) == 0)
    v2 = "No";
  CFStringAppendFormat(a1, 0, CFSTR("\t\tProperties:\n\t\t\t\tkCGColorFunctionSignedReflectionTRC   = %s\n\t\t\t\tkCGColorFunctionOutputClamp           = %s\n\t\t\t\tkCGColorFunctionInputClamp            = %s\n\t\t\t\tkCGColorMatrixOnlyFirstChannelOutput  = %s\n\t\t\t\tkCGColorMatrixOnlyFirstChannelInput   = %s\n\n"), v3, v4, v5, v6, v2);
}

void append_range_info(__CFString *a1, const void *a2)
{
  float InputRange;
  float v5;
  float v6;
  float OutputRange;
  float v8;

  InputRange = CGColorFunctionGetInputRange(a2);
  v6 = v5;
  OutputRange = CGColorFunctionGetOutputRange(a2);
  CFStringAppendFormat(a1, 0, CFSTR("\t\tInput range: [%+g, %+g] Output range: [%+g, %+g]\n"), InputRange, v6, OutputRange, v8);
}

void CGColorConversionInfoShowCompactedSteps(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  show_steps(a1, 1u, a3, a4, a5, a6, a7, a8);
}

void CGColorConversionInfoShowSimplifiedSteps(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  show_steps(a1, 2u, a3, a4, a5, a6, a7, a8);
}

void CGColorConversionInfoDumpStepsToFile(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  dump_steps_to_file(a1, 0, a2, (uint64_t)"CGColorConversionInfoDumpStepsToFile", a5, a6, a7, a8);
}

void dump_steps_to_file(_QWORD *cf, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char *v9;
  CFTypeID v12;
  uint64_t color_conversion_step_info;
  const __CFString *v14;
  const char *CStringPtr;
  const char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  FILE *v26;
  FILE *v27;
  size_t v28;
  const char *v29;
  char __str[1025];
  uint64_t v31;

  v8 = a4;
  v9 = (char *)a3;
  v31 = *MEMORY[0x1E0C80C00];
  if (!cf)
    goto LABEL_14;
  v12 = CFGetTypeID(cf);
  if (CGColorConversionInfoGetTypeID_predicate != -1)
    dispatch_once(&CGColorConversionInfoGetTypeID_predicate, &__block_literal_global_1103);
  if (v12 == kCGColorConverterRuntimeID
    && (color_conversion_step_info = create_color_conversion_step_info(cf, a2)) != 0)
  {
    v14 = (const __CFString *)color_conversion_step_info;
    if (v9 && strlen(v9) > 2)
    {
      bzero(__str, 0x401uLL);
      if (!strncmp(v9, "*/", 2uLL))
      {
        if (CGGetTempDirPath_predicate != -1)
          dispatch_once(&CGGetTempDirPath_predicate, &__block_literal_global_113);
        v29 = v9 + 2;
        v9 = __str;
        snprintf(__str, 0x400uLL, "%s%s", &CGGetTempDirPath_tempDirPath, v29);
      }
      CStringPtr = CFStringGetCStringPtr(v14, 0x8000100u);
      if (CStringPtr)
      {
        v16 = CStringPtr;
        v17 = 0;
      }
      else
      {
        Length = CFStringGetLength(v14);
        MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
        v17 = (char *)malloc_type_calloc(MaximumSizeForEncoding, 1uLL, 0xF6497A91uLL);
        if (v17 && CFStringGetCString(v14, v17, MaximumSizeForEncoding, 0x8000100u))
          v16 = v17;
        else
          v16 = "";
      }
      v26 = fopen(v9, "w");
      if (v26)
      {
        v27 = v26;
        v28 = strlen(v16);
        fwrite(v16, 1uLL, v28, v27);
        fclose(v27);
      }
      if (v17)
        free(v17);
    }
    CGLog(1, (uint64_t)"%s %s %s", a3, a4, a5, a6, a7, a8, v8);
    CFRelease(v14);
  }
  else
  {
LABEL_14:
    CGLog(1, (uint64_t)"Nothing to show for <%p> CGColorConversionInfo", a3, a4, a5, a6, a7, a8, (char)cf);
    CGLog(1, (uint64_t)"%s %s %s", v18, v19, v20, v21, v22, v23, v8);
  }
}

void CGColorConversionInfoDumpCompactedStepsToFile(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  dump_steps_to_file(a1, 1u, a2, (uint64_t)"CGColorConversionInfoDumpCompactedStepsToFile", a5, a6, a7, a8);
}

void CGColorConversionInfoDumpSimplifiedStepsToFile(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  dump_steps_to_file(a1, 2u, a2, (uint64_t)"CGColorConversionInfoDumpSimplifiedStepsToFile", a5, a6, a7, a8);
}

BOOL has_crypt_filter(CGPDFDictionary *a1, char a2)
{
  CGPDFObject *v2;
  CGPDFObject *v3;
  _BOOL8 result;
  int v5;
  CGPDFArray *v6;
  uint64_t v7;
  size_t v8;
  char *__s1;
  CGPDFObjectRef value[7];

  if ((a2 & 1) != 0)
    return 0;
  value[5] = v2;
  value[6] = v3;
  __s1 = 0;
  value[0] = 0;
  if (!CGPDFDictionaryGetObject(a1, "Filter", value) || !value[0])
    return 0;
  v5 = *((_DWORD *)value[0] + 2);
  if (v5 != 7)
  {
    if (v5 == 5)
      return strcmp(*((const char **)value[0] + 4), "Crypt") == 0;
    return 0;
  }
  v6 = (CGPDFArray *)*((_QWORD *)value[0] + 4);
  if (!v6)
    return 0;
  v7 = *((_QWORD *)v6 + 2);
  if (!v7)
    return 0;
  v8 = 0;
  while (!CGPDFArrayGetName(v6, v8, (const char **)&__s1) || strcmp(__s1, "Crypt"))
  {
    result = 0;
    if (v7 == ++v8)
      return result;
  }
  return 1;
}

CGPDFObjectRef get_filter_object(CGPDFDictionary *a1, int a2)
{
  CGPDFObjectRef value;

  value = 0;
  if (CGPDFDictionaryGetObject(a1, "Filter", &value))
    return value;
  if (!a2)
    return 0;
  if (CGPDFDictionaryGetObject(a1, "F", &value))
    return value;
  return 0;
}

uint64_t filter_kind_from_name(const char *a1)
{
  if (!a1)
  {
    pdf_error("filter name cannot be null.");
    return 0;
  }
  if (!strcmp(a1, "ASCIIHexDecode") || !strcmp(a1, "AHx"))
    return 1;
  if (!strcmp(a1, "ASCII85Decode") || !strcmp(a1, "A85"))
    return 2;
  if (!strcmp(a1, "CCITTFaxDecode") || !strcmp(a1, "CCF"))
    return 3;
  if (!strcmp(a1, "DCTDecode") || !strcmp(a1, "DCT"))
    return 4;
  if (!strcmp(a1, "FlateDecode") || !strcmp(a1, "Fl"))
    return 5;
  if (!strcmp(a1, "JBIG2Decode"))
    return 6;
  if (!strcmp(a1, "LZWDecode") || !strcmp(a1, "LZW"))
    return 7;
  if (!strcmp(a1, "RunLengthDecode") || !strcmp(a1, "RL"))
    return 8;
  if (!strcmp(a1, "JPXDecode"))
    return 9;
  if (strcmp(a1, "Crypt"))
  {
    return 0;
  }
  return 10;
}

__CFArray *pdf_filter_chain_create_description(uint64_t a1, int a2)
{
  __CFArray *Mutable;
  CGPDFDictionary *v5;
  uint64_t v6;
  CGPDFObjectRef filter_object;
  int v8;
  CGPDFArray *v9;
  uint64_t v10;
  size_t i;
  int v12;
  int v13;
  char *value;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (a1)
  {
    v5 = *(CGPDFDictionary **)(a1 + 48);
    v6 = *(_QWORD *)(a1 + 16);
    if (v6 && !*(_BYTE *)(a1 + 41) && *(_QWORD *)(v6 + 40) && !has_crypt_filter(*(CGPDFDictionary **)(a1 + 48), a2))
      CGCFArrayAppendInteger(Mutable, 10);
  }
  else
  {
    v5 = 0;
  }
  filter_object = get_filter_object(v5, a2);
  if (filter_object)
  {
    value = 0;
    v8 = *((_DWORD *)filter_object + 2);
    if (v8 == 5)
    {
      v13 = filter_kind_from_name(*((const char **)filter_object + 4));
      if (v13)
        CGCFArrayAppendInteger(Mutable, v13);
    }
    else if (v8 == 7)
    {
      v9 = (CGPDFArray *)*((_QWORD *)filter_object + 4);
      if (v9)
      {
        v10 = *((_QWORD *)v9 + 2);
        if (v10)
        {
          for (i = 0; i != v10; ++i)
          {
            if (!CGPDFArrayGetName(v9, i, (const char **)&value))
              break;
            v12 = filter_kind_from_name(value);
            if (v12)
              CGCFArrayAppendInteger(Mutable, v12);
          }
        }
      }
    }
  }
  return Mutable;
}

__n128 CGUpdateConvolveKernelRed(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  __n128 result;

  if (redConvolveKernel)
    free((void *)redConvolveKernel);
  v2 = (char *)malloc_type_malloc(0x26uLL, 0x72F94193uLL);
  redConvolveKernel = (uint64_t)v2;
  v3 = *(_QWORD *)(a1 + 30);
  result = *(__n128 *)(a1 + 16);
  *(_OWORD *)v2 = *(_OWORD *)a1;
  *((__n128 *)v2 + 1) = result;
  *(_QWORD *)(v2 + 30) = v3;
  return result;
}

__n128 CGUpdateConvolveKernelGreen(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  __n128 result;

  if (greenConvolveKernel)
    free((void *)greenConvolveKernel);
  v2 = (char *)malloc_type_malloc(0x26uLL, 0x51BB910DuLL);
  greenConvolveKernel = (uint64_t)v2;
  v3 = *(_QWORD *)(a1 + 30);
  result = *(__n128 *)(a1 + 16);
  *(_OWORD *)v2 = *(_OWORD *)a1;
  *((__n128 *)v2 + 1) = result;
  *(_QWORD *)(v2 + 30) = v3;
  return result;
}

__n128 CGUpdateConvolveKernelBlue(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  __n128 result;

  if (blueConvolveKernel)
    free((void *)blueConvolveKernel);
  v2 = (char *)malloc_type_malloc(0x26uLL, 0x307CD5C0uLL);
  blueConvolveKernel = (uint64_t)v2;
  v3 = *(_QWORD *)(a1 + 30);
  result = *(__n128 *)(a1 + 16);
  *(_OWORD *)v2 = *(_OWORD *)a1;
  *((__n128 *)v2 + 1) = result;
  *(_QWORD *)(v2 + 30) = v3;
  return result;
}

__n128 CGUpdateConvolveKernelMonochrome(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  __n128 result;

  if (monochromeConvolveKernel)
    free((void *)monochromeConvolveKernel);
  v2 = (char *)malloc_type_malloc(0x26uLL, 0xD6C5F0CFuLL);
  monochromeConvolveKernel = (uint64_t)v2;
  v3 = *(_QWORD *)(a1 + 30);
  result = *(__n128 *)(a1 + 16);
  *(_OWORD *)v2 = *(_OWORD *)a1;
  *((__n128 *)v2 + 1) = result;
  *(_QWORD *)(v2 + 30) = v3;
  return result;
}

uint64_t get_password(const __CFString *a1, UInt8 *a2)
{
  CFIndex Length;
  CFIndex v5;
  CFIndex Bytes;
  CFRange v8;

  Length = CFStringGetLength(a1);
  if (Length)
  {
    v5 = Length;
    if (Length >= 33)
    {
      pdf_error("password truncated to 32 bytes.");
      v5 = 32;
    }
    v8.location = 0;
    v8.length = v5;
    Bytes = CFStringGetBytes(a1, v8, 0x600u, 0, 0, a2, 32, 0);
    if (Bytes < v5)
    {
      pdf_error("password cannot be converted to ASCII.");
      return 0;
    }
    a2[Bytes] = 0;
  }
  else
  {
    *a2 = 0;
  }
  return 1;
}

CGDataConsumerRef PDFSecurityHandlerCreateEncryptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  _QWORD *v6;
  char *pdf_cryptor;
  const void *Value;
  const void *v9;

  if (!a3)
    return 0;
  v3 = a3;
  v6 = malloc_type_calloc(1uLL, 0x30uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  if (!v6)
    return 0;
  *v6 = a2;
  pdf_cryptor = get_pdf_cryptor(a1, v3);
  v6[5] = pdf_cryptor;
  if (!pdf_cryptor)
  {
    encryptor_close((uint64_t)v6);
    return 0;
  }
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), CFSTR("kCGPDFContextEncryptionCipher"));
  if (Value
    && ((v9 = Value, CFEqual(Value, CFSTR("kCGPDFContextEncryptionCipherAESv2")))
     || CFEqual(v9, CFSTR("kCGPDFContextEncryptionCipherAESv3"))))
  {
    v6[3] = 16;
    *((_BYTE *)v6 + 32) = 1;
  }
  else
  {
    v6[3] = 0;
  }
  return CGDataConsumerCreate(v6, (const CGDataConsumerCallbacks *)&PDFSecurityHandlerCreateEncryptor_callbacks);
}

char *get_pdf_cryptor(uint64_t a1, int a2)
{
  const void *Value;
  int v5;
  _BOOL4 v6;
  uint64_t v7;
  unint64_t v8;
  char *result;
  char *v10;
  size_t v11;
  char *v12;
  unint64_t v13;
  size_t v14;
  unsigned __int8 v15[16];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), CFSTR("kCGPDFContextEncryptionCipher"));
  if (Value)
  {
    v5 = CFEqual(Value, CFSTR("kCGPDFContextEncryptionCipherAESv2"));
    v6 = v5 != 0;
    v7 = 5;
    if (v5)
      v7 = 9;
  }
  else
  {
    v6 = 0;
    v7 = 5;
  }
  v8 = *(_QWORD *)(a1 + 128);
  result = (char *)malloc_type_malloc(v7 + (v8 >> 3), 0x100004077774924uLL);
  if (result)
  {
    v10 = result;
    v11 = v8 >> 3;
    memcpy(result, (const void *)(a1 + 92), v11);
    v12 = &v10[v11];
    *(_WORD *)v12 = a2;
    v12[2] = BYTE2(a2);
    *(_WORD *)(v12 + 3) = 0;
    v13 = v11 + 5;
    if (v6)
    {
      *(_DWORD *)&v10[v13] = 1416380787;
      v13 = v11 + 9;
    }
    CGGetMD5DigestOfBytes(v15, v10, v13);
    free(v10);
    if (v6)
    {
      return (char *)CGCryptorCreateAES(v15, 0x10uLL, (_OWORD *)(a1 + 108), 1);
    }
    else
    {
      if (v13 >= 0x10)
        v14 = 16;
      else
        v14 = v13;
      return (char *)CGCryptorCreateRC4(v15, v14);
    }
  }
  return result;
}

void encryptor_close(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(_QWORD);
  uint64_t v5;
  _QWORD v6[3];

  v6[2] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 40);
    if (!*(_DWORD *)(v2 + 32))
    {
      v6[0] = 0;
      v6[1] = 0;
      v5 = 0;
      CGCryptorDrain(v2, v6, 0x10uLL, (size_t *)&v5);
      CGDataConsumerPutBytes(*(_QWORD *)a1, (uint64_t)v6, v5);
    }
    v3 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 && !*(_BYTE *)(v3 + 56))
    {
      v4 = *(void (**)(_QWORD))(v3 + 80);
      if (v4)
        v4(*(_QWORD *)(v3 + 16));
    }
    CGCryptorRelease(*(_QWORD *)(a1 + 40));
    free(*(void **)(a1 + 8));
    free((void *)a1);
  }
}

size_t encryptor_write(uint64_t a1, const void *a2, size_t a3)
{
  size_t v3;
  size_t v6;
  void *v7;
  void *v8;
  uint64_t v10;

  if (!a1)
    return 0;
  v3 = a3;
  v6 = *(_QWORD *)(a1 + 24) + a3;
  v7 = *(void **)(a1 + 8);
  if (*(_QWORD *)(a1 + 16) < v6)
  {
    v8 = malloc_type_realloc(*(void **)(a1 + 8), v6, 0xD52F2160uLL);
    *(_QWORD *)(a1 + 8) = v8;
    if (!v8)
    {
      v3 = 0;
      *(_QWORD *)(a1 + 16) = 0;
      return v3;
    }
    v7 = v8;
    *(_QWORD *)(a1 + 16) = v6;
  }
  v10 = 0;
  CGCryptorProcessBytes(*(_QWORD *)(a1 + 40), a2, v3, v7, v6, (size_t *)&v10);
  if (*(_BYTE *)(a1 + 32))
  {
    CGDataConsumerPutBytes(*(_QWORD *)a1, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 40), 16);
    *(_BYTE *)(a1 + 32) = 0;
  }
  CGDataConsumerPutBytes(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), v10);
  return v3;
}

uint64_t *encryptor_flush(uint64_t *result)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  if (result)
  {
    v1 = *result;
    if (*result)
    {
      if (!*(_BYTE *)(v1 + 56))
      {
        v2 = *(uint64_t (**)(_QWORD))(v1 + 80);
        if (v2)
          return (uint64_t *)v2(*(_QWORD *)(v1 + 16));
      }
    }
  }
  return result;
}

void add_bf_range(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, unint64_t *a6)
{
  unint64_t v8;
  BOOL v9;
  unsigned __int16 *v11;
  unint64_t v12;
  uint64_t v13;
  _WORD *v14;
  uint64_t v15;
  uint64_t v16;

  if (a2 == a4)
  {
    v8 = *a6;
    v9 = !*a6 || a3 > a5;
    if (!v9 && (*a6 & 1) == 0)
    {
      v11 = (unsigned __int16 *)a6[1];
      v12 = v8 >> 1;
      if (v8 >= 2)
      {
        if (v12 <= 1)
          v13 = 1;
        else
          v13 = v8 >> 1;
        v14 = (_WORD *)a6[1];
        do
        {
          *v14 = bswap32((unsigned __int16)*v14) >> 16;
          ++v14;
          --v13;
        }
        while (v13);
      }
      v15 = *(_QWORD *)(a1 + 48);
      if (v15 && (a2 - 3) >= 0xFEu && check_dimension(a2, a3, a5))
      {
        v16 = *(_QWORD *)(v15 + 16);
        if (!v16)
        {
          v16 = operator new();
          *(_DWORD *)v16 = 0;
          *(_OWORD *)(v16 + 8) = 0u;
          *(_OWORD *)(v16 + 24) = 0u;
          *(_OWORD *)(v16 + 40) = 0u;
          *(_OWORD *)(v16 + 56) = 0u;
          *(_QWORD *)(v16 + 72) = 0;
          *(_DWORD *)(v16 + 80) = 1065353216;
          *(_QWORD *)(v15 + 16) = v16;
        }
        cmap_bf_set_add_range(v16, a3, a5, v12, v11);
      }
    }
  }
}

uint64_t yy_stack_print(__int16 *a1, unint64_t a2)
{
  FILE **v4;
  int v5;

  v4 = (FILE **)MEMORY[0x1E0C80C10];
  fwrite("Stack now", 9uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
  while ((unint64_t)a1 <= a2)
  {
    v5 = *a1++;
    fprintf(*v4, " %d", v5);
  }
  return fputc(10, *v4);
}

uint64_t yysyntax_error(_BYTE *a1, int a2, unsigned int a3)
{
  int v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  const char *v17;
  int v18;
  char *v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL4 v25;
  int v27;
  char *i;
  int v29;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  char v35[64];
  char *v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v3 = yypact[a2];
  if (v3 >= -30)
  {
    if (a3 > 0x126)
      v5 = 2;
    else
      v5 = yytranslate[a3];
    v7 = yytname[v5];
    v8 = yytnamerr(0, v7);
    v38 = 0u;
    v37 = 0u;
    v9 = 115 - v3;
    v36 = v7;
    strcpy(v35, "syntax error, unexpected %s");
    v10 = -v3 & (v3 >> 31);
    if (115 - v3 >= 42)
      v9 = 42;
    if (v10 < v9)
    {
      v11 = 0;
      v12 = v3;
      v13 = &v35[27];
      v14 = v10;
      v15 = v9;
      v16 = v8;
      v17 = ", expecting %s";
      v18 = 1;
      v34 = v8;
      while (1)
      {
        if (v14 == 1 || (_DWORD)v14 != yycheck[v14 + v12])
        {
          v20 = v16;
        }
        else
        {
          if (v18 == 5)
          {
            v35[27] = 0;
            v18 = 1;
            v20 = v34;
            goto LABEL_21;
          }
          v19 = yytname[v14];
          (&v36)[v18] = v19;
          v20 = yytnamerr(0, v19) + v16;
          --v13;
          do
          {
            v21 = *(unsigned __int8 *)v17++;
            *++v13 = v21;
          }
          while (v21);
          ++v18;
          v11 |= v20 < v16;
          v17 = " or %s";
        }
        ++v14;
        v16 = v20;
        if (v14 == v15)
          goto LABEL_21;
      }
    }
    v11 = 0;
    v18 = 1;
    v20 = v8;
LABEL_21:
    v22 = 0;
    do
      v23 = v22;
    while (v35[v22++]);
    v6 = v23 + v20;
    v25 = __CFADD__(v23, v20);
    if (v11 | v25)
      return -1;
    if (!a1)
      return v6;
    v27 = 0;
    for (i = v35; ; i += v32)
    {
      v29 = *i;
      *a1 = v29;
      if (v29 != 37)
        break;
      if (i[1] != 115 || v27 >= v18)
        goto LABEL_38;
      v33 = v27 + 1;
      v31 = yytnamerr((uint64_t)a1, (&v36)[v27]);
      v32 = 2;
      v27 = v33;
LABEL_40:
      a1 += v31;
    }
    if (!v29)
      return v6;
LABEL_38:
    v31 = 1;
    v32 = 1;
    goto LABEL_40;
  }
  return 0;
}

void yydestruct(const char *a1, int a2, void **a3)
{
  const char *v5;
  FILE **v6;
  FILE *v7;

  if (cmap_yydebug)
  {
    v5 = "Deleting";
    if (a1)
      v5 = a1;
    v6 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s ", v5);
    v7 = *v6;
    if (a2 >= 42)
      fprintf(v7, "nterm %s (");
    else
      fprintf(v7, "token %s (");
    fputc(41, v7);
    fputc(10, *v6);
  }
  if (a2 <= 0x27 && ((1 << a2) & 0xB000000000) != 0)
    free(*a3);
}

uint64_t yytnamerr(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  _BYTE *v3;
  _BYTE *i;
  int v5;
  int v6;
  char v7;
  _BYTE *v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  if (*a2 != 34)
  {
LABEL_13:
    if (a1)
    {
      v10 = a1 - 1;
      do
      {
        v11 = *a2++;
        *(_BYTE *)++v10 = v11;
      }
      while (v11);
      return v10 - a1;
    }
    else
    {
      v12 = 0;
      while (a2[v12++])
        ;
      return v12 - 1;
    }
  }
  v2 = 0;
  v3 = a2;
  for (i = a2; ; v3 = i)
  {
    v6 = (char)*++i;
    v5 = v6;
    v7 = v6;
    if (v6 > 91)
    {
      if (v5 == 92)
      {
        v9 = v3[2];
        v8 = v3 + 2;
        if (v9 != 92)
          goto LABEL_13;
        v7 = 92;
        i = v8;
      }
      goto LABEL_10;
    }
    if (v5 == 34)
      break;
    if (v5 == 39 || v5 == 44)
      goto LABEL_13;
LABEL_10:
    if (a1)
      *(_BYTE *)(a1 + v2) = v7;
    ++v2;
  }
  if (a1)
    *(_BYTE *)(a1 + v2) = 0;
  return v2;
}

uint64_t decomposes(unsigned int a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t result;
  __int16 __key;

  result = 0;
  __key = a1;
  if (a1 >= 0xA0 && a1 != 65292)
  {
    result = (uint64_t)bsearch(&__key, &rows, 0xF0EuLL, 0xCuLL, (int (__cdecl *)(const void *, const void *))compare);
    if (result)
    {
      *a2 = *(_DWORD *)(result + 8);
      *a3 = *(_DWORD *)(result + 4);
      return 1;
    }
  }
  return result;
}

uint64_t compare(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  _BOOL4 v5;

  v2 = *a1;
  v3 = *a2;
  v4 = v2 >= v3;
  v5 = v2 != v3;
  if (v4)
    return v5;
  else
    return 0xFFFFFFFFLL;
}

_QWORD *PDFStreamCreateWithObjectNumber(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = malloc_type_calloc(1uLL, 0x50uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  if (v4)
  {
    *v4 = a1;
    v4[1] = a2;
    v4[3] = 0;
    v4[9] = 0;
    v4[6] = 0;
    v4[7] = 0;
    *((_WORD *)v4 + 32) = 0;
    if (*(_BYTE *)(a1 + 73))
      PDFStreamSetFilter((uint64_t)v4, "FlateDecode");
  }
  return v4;
}

void PDFStreamSetFilter(uint64_t a1, char *__s)
{
  void *v4;
  size_t v5;
  char *v6;

  v4 = *(void **)(a1 + 72);
  if (v4)
    free(v4);
  if (__s)
  {
    v5 = strlen(__s);
    v6 = (char *)malloc_type_malloc(v5 + 1, 0x566C45D1uLL);
    __CFSetLastAllocationEventName();
    *(_QWORD *)(a1 + 72) = v6;
    if (v6)
    {
      strcpy(v6, __s);
      *(_BYTE *)(a1 + 64) = strcmp(__s, "FlateDecode") == 0;
      return;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 72) = 0;
  }
  *(_BYTE *)(a1 + 64) = 0;
}

void PDFStreamRelease(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  if (a1)
  {
    v2 = *(const void **)(a1 + 40);
    if (v2)
      CFRelease(v2);
    v3 = *(const void **)(a1 + 32);
    if (v3)
      CFRelease(v3);
    v4 = *(const void **)(a1 + 48);
    if (v4)
      CFRelease(v4);
    v5 = *(const void **)(a1 + 56);
    if (v5)
      CFRelease(v5);
    free(*(void **)(a1 + 72));
    free((void *)a1);
  }
}

CGDataConsumerRef PDFStreamBeginData(CGDataConsumerRef result)
{
  CGDataConsumerRef v1;
  __CFData *Mutable;
  CGDataConsumerRef v3;

  if (result)
  {
    v1 = result;
    Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    *((_QWORD *)v1 + 4) = Mutable;
    v3 = CGDataConsumerCreateWithCFData(Mutable);
    *((_QWORD *)v1 + 5) = v3;
    *((_QWORD *)v1 + 3) = v3;
    *((_QWORD *)v1 + 7) = 0;
    result = *(CGDataConsumerRef *)(*(_QWORD *)v1 + 56);
    if (result && (!*((_BYTE *)v1 + 65) || *((_BYTE *)result + 136)))
    {
      result = PDFSecurityHandlerCreateEncryptor((uint64_t)result, (uint64_t)v3, *((_QWORD *)v1 + 1));
      v3 = result;
      *((_QWORD *)v1 + 7) = result;
      *((_QWORD *)v1 + 3) = result;
    }
    *((_QWORD *)v1 + 6) = 0;
    if (*((_BYTE *)v1 + 64))
    {
      result = CGDataConsumerCreateFlateEncoder(v3);
      *((_QWORD *)v1 + 6) = result;
      *((_QWORD *)v1 + 3) = result;
    }
  }
  return result;
}

uint64_t PDFStreamEndData(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;

  CGDataConsumerClose(a1[6]);
  result = CGDataConsumerClose(a1[7]);
  v3 = a1[3];
  if (v3)
    v3 = *(_QWORD *)(v3 + 40);
  a1[2] = v3;
  return result;
}

_BYTE *PDFStreamEnd(CFDataRef *a1)
{
  uint64_t v2;
  uint64_t v3;
  CFIndex Length;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const UInt8 *BytePtr;
  CFIndex v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v2 = (uint64_t)*a1;
  v3 = *((_QWORD *)*a1 + 3);
  Length = CFDataGetLength(a1[4]);
  PDFDocumentPrintf(v2, (uint64_t)"/Length %O", v5, v6, v7, v8, v9, v10, Length);
  if (a1[9])
    PDFDocumentPrintf((uint64_t)*a1, (uint64_t)"/Filter /%N", v11, v12, v13, v14, v15, v16, (uint64_t)a1[9]);
  PDFDocumentPrintf((uint64_t)*a1, (uint64_t)">>\n", v11, v12, v13, v14, v15, v16, v45);
  PDFDocumentPrintf((uint64_t)*a1, (uint64_t)"stream\n", v17, v18, v19, v20, v21, v22, v46);
  BytePtr = CFDataGetBytePtr(a1[4]);
  v24 = CFDataGetLength(a1[4]);
  CGDataConsumerPutBytes(v3, (uint64_t)BytePtr, v24);
  PDFDocumentPrintf((uint64_t)*a1, (uint64_t)"\n", v25, v26, v27, v28, v29, v30, v47);
  PDFDocumentPrintf((uint64_t)*a1, (uint64_t)"endstream\n", v31, v32, v33, v34, v35, v36, v48);
  return PDFDocumentEndObject((uint64_t)*a1, v37, v38, v39, v40, v41, v42, v43);
}

uint64_t CGPrivateAPIVersion()
{
  return 251658246;
}

unsigned int *color_space_retain(uint64_t a1, unsigned int *a2)
{
  unsigned int *result;
  unsigned int v3;

  result = a2;
  if (a2)
  {
    do
      v3 = __ldxr(a2);
    while (__stxr(v3 + 1, a2));
  }
  return result;
}

void color_space_release(uint64_t a1, uint64_t a2)
{
  PDFColorSpaceRelease(a2);
}

uint64_t PDFColorSpaceSetEmitDefinitions(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  const __CFArray *v3;
  CFRange v4;

  if (result)
  {
    v1 = result;
    v2 = *(_QWORD *)(result + 16);
    if (v2)
    {
      do
      {
        *(_QWORD *)(v1 + 16) = 0;
        v3 = *(const __CFArray **)(v2 + 8);
        v4.length = CFArrayGetCount(v3);
        v4.location = 0;
        CFArrayApplyFunction(v3, v4, (CFArrayApplierFunction)emit_color_space_definition, 0);
        CGOrderedSetRelease((const void **)v2);
        v2 = *(_QWORD *)(v1 + 16);
      }
      while (v2);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void emit_color_space_definition(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  void **v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  CGColorSpace *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *Names;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  CGColorSpace *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  PDFDocumentPrivate *v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  PDFDocumentPrivate *v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  const __CFData *v185;
  uint64_t v186;
  CFIndex Length;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  _QWORD *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  double *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  __int128 *v208;
  double *v209;
  uint64_t v210;
  const __CFData *v211;
  const UInt8 *BytePtr;
  CFIndex v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  double v234;
  double v235;
  uint64_t v236;
  uint64_t v237;
  double v238;
  double v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  CGColorSpace **v257;
  CGColorSpace *v258;
  PDFDocumentPrivate *v259;
  _QWORD *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t TintTransform;
  _QWORD *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  _OWORD v305[4];
  uint64_t v306;

  v306 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    switch(CGColorSpaceGetType(*(_QWORD **)(a1 + 24)))
    {
      case 3u:
        v42 = *(_QWORD *)(a1 + 16);
        if (!v42)
          _CGHandleAssert("emit_CalGray", 137, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/PDF/ColorSpaces/PDFColorSpace.c", "cs->object_number != PDFObjectNumberInvalid", "invalid PDF object number", v5, v6, v7, v291);
        PDFDocumentBeginObject(*(_QWORD *)(a1 + 8), v42, v2, v3, v4, v5, v6, v7);
        *(_QWORD *)&v303 = 0;
        v301 = 0u;
        v302 = 0u;
        v300 = 0u;
        CGColorSpaceGetCalibratedGrayData(*(_QWORD *)(a1 + 24), v43, v44, v45, (uint64_t)&v300);
        PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"[/CalGray <<", v46, v47, v48, v49, v50, v51, v291);
        emit_array(*(_QWORD *)(a1 + 8), (uint64_t)"/WhitePoint", (uint64_t)&v300, 3, v52, v53, v54, v55, v293);
        if (*((double *)&v301 + 1) != 0.0 || *(double *)&v302 != 0.0 || *((double *)&v302 + 1) != 0.0)
          emit_array(*(_QWORD *)(a1 + 8), (uint64_t)"/BlackPoint", (uint64_t)&v301 + 8, 3, v58, v59, v60, v61, v294);
        if (*(double *)&v303 != 1.0)
          PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/Gamma %f", v56, v57, v58, v59, v60, v61, v303);
        v62 = *(_QWORD *)(a1 + 8);
        v63 = ">>]";
        goto LABEL_40;
      case 4u:
        v64 = *(_QWORD *)(a1 + 16);
        if (!v64)
          _CGHandleAssert("emit_CalRGB", 165, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/PDF/ColorSpaces/PDFColorSpace.c", "cs->object_number != PDFObjectNumberInvalid", "invalid PDF object number", v5, v6, v7, v291);
        PDFDocumentBeginObject(*(_QWORD *)(a1 + 8), v64, v2, v3, v4, v5, v6, v7);
        memset(v305, 0, sizeof(v305));
        v303 = 0u;
        v304 = 0u;
        v301 = 0u;
        v302 = 0u;
        v300 = 0u;
        CGColorSpaceGetCalibratedRGBData(*(_QWORD *)(a1 + 24), v65, v66, v67, (uint64_t)&v300);
        PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"[ /CalRGB <<", v68, v69, v70, v71, v72, v73, v291);
        emit_array(*(_QWORD *)(a1 + 8), (uint64_t)"/WhitePoint", (uint64_t)&v300, 3, v74, v75, v76, v77, v295);
        if (*((double *)&v301 + 1) != 0.0 || *(double *)&v302 != 0.0 || *((double *)&v302 + 1) != 0.0)
          emit_array(*(_QWORD *)(a1 + 8), (uint64_t)"/BlackPoint", (uint64_t)&v301 + 8, 3, v58, v59, v60, v61, v294);
        if (*(double *)&v303 != 1.0 || *((double *)&v303 + 1) != 1.0 || *(double *)&v304 != 1.0)
          emit_array(*(_QWORD *)(a1 + 8), (uint64_t)"/Gamma", (uint64_t)&v303, 3, v58, v59, v60, v61, v294);
        if (*((double *)&v304 + 1) != 1.0)
          goto LABEL_30;
        v232 = 0;
        while (v232 != 8)
        {
          v233 = v232 + 1;
          v234 = *((double *)v305 + v232);
          v235 = *(double *)&color_space_state_create_calibrated_rgb_default_matrix[++v232];
          if (v234 != v235)
          {
            if ((unint64_t)(v233 - 1) <= 7)
            {
LABEL_30:
              v78 = (char *)&v304 + 8;
              v79 = *(_QWORD *)(a1 + 8);
              v80 = "/Matrix";
              v81 = 9;
              goto LABEL_38;
            }
            goto LABEL_39;
          }
        }
        goto LABEL_39;
      case 5u:
        v82 = *(_QWORD *)(a1 + 16);
        if (!v82)
          _CGHandleAssert("emit_Lab", 194, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/PDF/ColorSpaces/PDFColorSpace.c", "cs->object_number != PDFObjectNumberInvalid", "invalid PDF object number", v5, v6, v7, v291);
        PDFDocumentBeginObject(*(_QWORD *)(a1 + 8), v82, v2, v3, v4, v5, v6, v7);
        v304 = 0u;
        v305[0] = 0u;
        v302 = 0u;
        v303 = 0u;
        v300 = 0u;
        v301 = 0u;
        CGColorSpaceGetLabData(*(_QWORD *)(a1 + 24), v83, v84, v85, &v300);
        PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"[ /Lab <<", v86, v87, v88, v89, v90, v91, v291);
        emit_array(*(_QWORD *)(a1 + 8), (uint64_t)"/WhitePoint", (uint64_t)&v300, 3, v92, v93, v94, v95, v296);
        if (*((double *)&v301 + 1) != 0.0 || *(double *)&v302 != 0.0 || *((double *)&v302 + 1) != 0.0)
          emit_array(*(_QWORD *)(a1 + 8), (uint64_t)"/BlackPoint", (uint64_t)&v301 + 8, 3, v58, v59, v60, v61, v294);
        if (*(double *)&v303 != -100.0)
          goto LABEL_37;
        v236 = 0;
        while (v236 != 3)
        {
          v237 = v236 + 1;
          v238 = *((double *)&v303 + v236 + 1);
          v239 = *((double *)&xmmword_185003350 + ++v236);
          if (v238 != v239)
          {
            if ((unint64_t)(v237 - 1) <= 2)
            {
LABEL_37:
              v78 = (char *)&v303;
              v79 = *(_QWORD *)(a1 + 8);
              v80 = "/Range";
              v81 = 4;
LABEL_38:
              emit_array(v79, (uint64_t)v80, (uint64_t)v78, v81, v58, v59, v60, v61, v294);
            }
            break;
          }
        }
LABEL_39:
        v62 = *(_QWORD *)(a1 + 8);
        v63 = ">> ]";
LABEL_40:
        PDFDocumentPrintf(v62, (uint64_t)v63, v56, v57, v58, v59, v60, v61, v294);
        PDFDocumentEndObject(*(_QWORD *)(a1 + 8), v96, v97, v98, v99, v100, v101, v102);
        return;
      case 6u:
      case 0xAu:
      case 0xBu:
        *(_QWORD *)&v300 = 0;
        *(_QWORD *)&v301 = 0;
        *((_QWORD *)&v300 + 1) = 0x3FF0000000000000;
        *((_QWORD *)&v301 + 1) = 0x3FF0000000000000;
        *(_QWORD *)&v302 = 0;
        *((_QWORD *)&v302 + 1) = 0x3FF0000000000000;
        if (!*(_QWORD *)(a1 + 16))
          _CGHandleAssert("emit_ICCBased", 225, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/PDF/ColorSpaces/PDFColorSpace.c", "cs->object_number != PDFObjectNumberInvalid", "invalid PDF object number", v5, v6, v7, v291);
        v8 = *(_QWORD *)(a1 + 8);
        v9 = PDFXRefTableAddObject(*(_QWORD **)(v8 + 464));
        v10 = PDFStreamCreateWithObjectNumber(v8, v9);
        PDFDocumentBeginObject(*v10, v10[1], v11, v12, v13, v14, v15, v16);
        PDFDocumentPrintf(*v10, (uint64_t)"<<", v17, v18, v19, v20, v21, v22, v291);
        v29 = *(_QWORD *)(a1 + 24);
        if (v29)
          v30 = *(_QWORD *)(*(_QWORD *)(v29 + 24) + 40);
        else
          v30 = 0;
        PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/N %z", v23, v24, v25, v26, v27, v28, v30);
        v38 = *(_QWORD *)(a1 + 24);
        if (!v38)
          goto LABEL_65;
        v39 = *(_QWORD *)(v38 + 24);
        v40 = *(_DWORD *)(v39 + 20);
        switch(v40)
        {
          case 6:
            v41 = (void **)(*(_QWORD *)(v39 + 88) + 56);
            break;
          case 10:
            v41 = (void **)(*(_QWORD *)(v39 + 88) + 48);
            break;
          case 8:
            v41 = (void **)(*(_QWORD *)(v39 + 88) + 8);
            break;
          default:
            goto LABEL_65;
        }
        v31 = *v41;
        if (*v41)
        {
          v194 = PDFDocumentAddColorSpace(*(_QWORD *)(a1 + 8), v31);
          if (v194)
          {
            v195 = v194;
            PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/Alternate", v32, v33, v34, v35, v36, v37, v292);
            PDFColorSpaceEmitReference(v195, v196, v197, v198, v199, v200, v201, v202);
          }
        }
LABEL_65:
        v203 = (double *)CGColorSpaceICCGetRange(*(_QWORD *)(a1 + 24), (uint64_t)v31, v32, v33, v34, v35, v36, v37);
        if (!v30)
          goto LABEL_76;
        v208 = (__int128 *)v203;
        if (v30 == 3 && *v203 == -INFINITY && v203[1] == INFINITY)
          v208 = &v300;
        v209 = (double *)v208 + 1;
        v210 = v30;
        break;
      case 7u:
        if (!*(_QWORD *)(a1 + 16))
          _CGHandleAssert("emit_Indexed", 278, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/PDF/ColorSpaces/PDFColorSpace.c", "cs->object_number != PDFObjectNumberInvalid", "invalid PDF object number", v5, v6, v7, v291);
        v103 = *(_QWORD *)(a1 + 24);
        if (v103 && (v104 = *(_QWORD *)(v103 + 24), (*(_DWORD *)(v104 + 24) - 5) <= 1))
          v105 = **(CGColorSpace ***)(v104 + 88);
        else
          v105 = 0;
        v155 = PDFDocumentResolveColorSpace(*(_QWORD *)(a1 + 8), v105);
        v156 = PDFDocumentAddColorSpace(*(_QWORD *)(a1 + 8), v155);
        PDFDocumentBeginObject(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), v157, v158, v159, v160, v161, v162);
        PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"[ /Indexed", v163, v164, v165, v166, v167, v168, v291);
        PDFColorSpaceEmitReference(v156, v169, v170, v171, v172, v173, v174, v175);
        v182 = *(_QWORD *)(a1 + 24);
        if (v182 && (v183 = *(_QWORD *)(v182 + 24), *(_DWORD *)(v183 + 24) == 5))
          v184 = *(_QWORD *)(*(_QWORD *)(v183 + 88) + 8);
        else
          v184 = -1;
        PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"%z", v176, v177, v178, v179, v180, v181, v184);
        v185 = CGColorSpaceCopyColorTable(*(_QWORD *)(a1 + 24));
        v186 = *(_QWORD *)(a1 + 8);
        Length = CFDataGetLength(v185);
        CFDataGetBytePtr(v185);
        PDFDocumentPrintf(v186, (uint64_t)"%X", v188, v189, v190, v191, v192, v193, Length);
        CFRelease(v185);
        goto LABEL_105;
      case 8u:
        v106 = *(_QWORD *)(a1 + 16);
        if (!v106)
          _CGHandleAssert("emit_DeviceN", 301, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/PDF/ColorSpaces/PDFColorSpace.c", "cs->object_number != PDFObjectNumberInvalid", "invalid PDF object number", v5, v6, v7, v291);
        PDFDocumentBeginObject(*(_QWORD *)(a1 + 8), v106, v2, v3, v4, v5, v6, v7);
        Names = (uint64_t *)CGColorSpaceGetNames(*(_QWORD *)(a1 + 24), v107, v108, v109, v110, v111, v112, v113);
        v121 = *(_QWORD *)(a1 + 24);
        if (v121)
        {
          v122 = *(_QWORD *)(*(_QWORD *)(v121 + 24) + 40);
          v123 = *(_QWORD *)(a1 + 8);
          if (v122 == 1)
          {
            PDFDocumentPrintf(v123, (uint64_t)"[ /Separation", v114, v115, v116, v117, v118, v119, v291);
            PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/%N", v124, v125, v126, v127, v128, v129, *Names);
            goto LABEL_93;
          }
        }
        else
        {
          v122 = 0;
          v123 = *(_QWORD *)(a1 + 8);
        }
        PDFDocumentPrintf(v123, (uint64_t)"[ /DeviceN", v114, v115, v116, v117, v118, v119, v291);
        PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"[ ", v240, v241, v242, v243, v244, v245, v298);
        if (v122)
        {
          v252 = v122;
          do
          {
            v253 = *Names++;
            PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"/%N", v246, v247, v248, v249, v250, v251, v253);
            --v252;
          }
          while (v252);
        }
        PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"]", v246, v247, v248, v249, v250, v251, v299);
LABEL_93:
        v254 = *(_QWORD *)(a1 + 24);
        if (!v254)
          goto LABEL_98;
        v255 = *(_QWORD *)(v254 + 24);
        v256 = *(_DWORD *)(v255 + 20);
        switch(v256)
        {
          case 6:
            v257 = (CGColorSpace **)(*(_QWORD *)(v255 + 88) + 56);
            break;
          case 10:
            v257 = (CGColorSpace **)(*(_QWORD *)(v255 + 88) + 48);
            break;
          case 8:
            v257 = (CGColorSpace **)(*(_QWORD *)(v255 + 88) + 8);
            break;
          default:
LABEL_98:
            v258 = 0;
            goto LABEL_102;
        }
        v258 = *v257;
LABEL_102:
        v259 = PDFDocumentResolveColorSpace(*(_QWORD *)(a1 + 8), v258);
        v260 = PDFDocumentAddColorSpace(*(_QWORD *)(a1 + 8), v259);
        PDFColorSpaceEmitReference(v260, v261, v262, v263, v264, v265, v266, v267);
        v268 = *(_QWORD *)(a1 + 8);
        TintTransform = CGColorSpaceGetTintTransform(*(_QWORD *)(a1 + 24), v269, v270, v271, v272, v273, v274, v275);
        v277 = PDFDocumentAddFunction(v268, TintTransform);
        PDFDocumentPrintReference(*(_QWORD *)(a1 + 8), (uint64_t)"%R", v277[6], v278, v279, v280, v281, v282);
        v283 = *(_QWORD *)(a1 + 8);
        if (v122 >= 2 && *(_BYTE *)(v283 + 91))
        {
          PDFDocumentPrintf(v283, (uint64_t)"<< >>", v149, v150, v151, v152, v153, v154, v297);
LABEL_105:
          v283 = *(_QWORD *)(a1 + 8);
        }
        PDFDocumentPrintf(v283, (uint64_t)"]", v149, v150, v151, v152, v153, v154, v297);
        PDFDocumentEndObject(*(_QWORD *)(a1 + 8), v284, v285, v286, v287, v288, v289, v290);
        return;
      case 9u:
        v130 = *(_QWORD *)(a1 + 16);
        if (!v130)
          _CGHandleAssert("emit_Pattern", 341, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/PDF/ColorSpaces/PDFColorSpace.c", "cs->object_number != PDFObjectNumberInvalid", "invalid PDF object number", v5, v6, v7, v291);
        v131 = *(_QWORD *)(a1 + 24);
        if (!v131)
          return;
        v132 = *(_QWORD *)(v131 + 24);
        if ((*(_DWORD *)(v132 + 24) - 5) > 1)
          return;
        v133 = **(CGColorSpace ***)(v132 + 88);
        if (!v133)
          return;
        PDFDocumentBeginObject(*(_QWORD *)(a1 + 8), v130, v2, v3, v4, v5, v6, v7);
        PDFDocumentPrintf(*(_QWORD *)(a1 + 8), (uint64_t)"[ /Pattern", v134, v135, v136, v137, v138, v139, v291);
        v140 = PDFDocumentResolveColorSpace(*(_QWORD *)(a1 + 8), v133);
        v141 = PDFDocumentAddColorSpace(*(_QWORD *)(a1 + 8), v140);
        PDFColorSpaceEmitReference(v141, v142, v143, v144, v145, v146, v147, v148);
        goto LABEL_105;
      default:
        return;
    }
    while (*(v209 - 1) == 0.0 && *v209 == 1.0)
    {
      v209 += 2;
      if (!--v210)
        goto LABEL_76;
    }
    emit_array(*(_QWORD *)(a1 + 8), (uint64_t)"/Range", (uint64_t)v208, 2 * v30, v204, v205, v206, v207, v292);
LABEL_76:
    PDFStreamBeginData((CGDataConsumerRef)v10);
    v211 = CGColorSpaceCopyICCData(*(CGColorSpaceRef *)(a1 + 24));
    BytePtr = CFDataGetBytePtr(v211);
    v213 = CFDataGetLength(v211);
    CGDataConsumerPutBytes(v10[3], (uint64_t)BytePtr, v213);
    CFRelease(v211);
    PDFStreamEndData(v10);
    PDFStreamEnd((CFDataRef *)v10);
    PDFDocumentBeginObject(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), v214, v215, v216, v217, v218, v219);
    PDFDocumentPrintReference(*(_QWORD *)(a1 + 8), (uint64_t)"[ /ICCBased %R ]", v10[1], v220, v221, v222, v223, v224);
    PDFDocumentEndObject(*(_QWORD *)(a1 + 8), v225, v226, v227, v228, v229, v230, v231);
    PDFStreamRelease((uint64_t)v10);
  }
}

__CFString *font_copy_format_description(_QWORD *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  const __CFString *v4;
  const __CFString *v5;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<CGFont (%p): "), a1);
  if (a1)
  {
    v4 = (const __CFString *)(*(uint64_t (**)(_QWORD))(a1[2] + 152))(a1[14]);
    if (v4)
    {
      v5 = v4;
      CFStringAppend(Mutable, v4);
      CFRelease(v5);
    }
  }
  CFStringAppend(Mutable, CFSTR(">"));
  return Mutable;
}

CGFontRef CGFontCreateWithPlatformFont(void *platformFontReference)
{
  return (CGFontRef)CGFontCreateWithPlatformFontAndVariation((uint64_t)platformFontReference, 0);
}

_QWORD *CGFontCreateWithPlatformFontAndVariation(uint64_t a1, uint64_t a2)
{
  uint64_t Default;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t VTable;
  uint64_t v22;

  if (!a1)
    return 0;
  Default = CGFontFinderGetDefault();
  if (!Default
    || (Default = (uint64_t)CGFontFinderCreateFontWithPlatformFont(Default, a1), (v12 = (_QWORD *)Default) == 0))
  {
    v13 = CGFontCreate(Default, v5, v6, v7, v8, v9, v10, v11);
    v12 = (_QWORD *)v13;
    if (v13)
    {
      VTable = CGFontGetVTable(v13, v14, v15, v16, v17, v18, v19, v20);
      v22 = (*(uint64_t (**)(uint64_t, uint64_t))(VTable + 16))(a1, a2);
      v12[14] = v22;
      if (!v22)
      {
        CFRelease(v12);
        return 0;
      }
    }
  }
  return v12;
}

_QWORD *CGFontCreateWithParserFont(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t VTable;
  uint64_t v19;

  if (!a1)
    return 0;
  v9 = CGFontCreate(a1, a2, a3, a4, a5, a6, a7, a8);
  v17 = (_QWORD *)v9;
  if (v9)
  {
    VTable = CGFontGetVTable(v9, v10, v11, v12, v13, v14, v15, v16);
    v19 = (*(uint64_t (**)(uint64_t))(VTable + 8))(a1);
    v17[14] = v19;
    if (!v19)
    {
      CFRelease(v17);
      return 0;
    }
  }
  return v17;
}

CGFontRef CGFontCreateWithName(char *cStr)
{
  const __CFString *v1;
  const __CFString *v2;
  CGFontRef v3;

  if (!cStr)
    return 0;
  v1 = CFStringCreateWithCString(0, cStr, 0x600u);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = CGFontCreateWithFontName(v1);
  CFRelease(v2);
  return v3;
}

CFTypeRef CGFontCreateMatchingFont(const char *a1, const char *a2, int a3, int a4, double a5)
{
  CFTypeRef v5;
  CGFontRef v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t VTable;
  const __CFURL *v20;
  __CFDictionary *FontsWithURL;
  const __CFArray *v22;
  const void *ValueAtIndex;
  char **v24;

  v5 = 0;
  if (a1 && a2 && (a3 & 0x80000000) == 0)
  {
    if (strcmp(a1, "Adobe"))
      return 0;
    v11 = (CGFontRef)strcmp(a2, "Japan1");
    if ((_DWORD)v11)
      goto LABEL_8;
    v24 = &(&Japanese_serifed)[2 * (a5 >= 102.5)];
    if (!a4)
      v24 = &(&Japanese_sans_serifed)[2 * (a5 >= 103.0)];
    v11 = CGFontCreateWithName(*v24);
    v5 = v11;
    if (!v11)
    {
LABEL_8:
      VTable = CGFontGetVTable((uint64_t)v11, v12, v13, v14, v15, v16, v17, v18);
      v20 = (const __CFURL *)(*(uint64_t (**)(const char *, const char *))(VTable + 192))(a1, a2);
      if (!v20)
        return 0;
      FontsWithURL = CGFontCreateFontsWithURL(v20);
      if (!FontsWithURL)
        return 0;
      v22 = FontsWithURL;
      if (CFArrayGetCount(FontsWithURL))
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v22, 0);
        v5 = CFRetain(ValueAtIndex);
      }
      else
      {
        v5 = 0;
      }
      CFRelease(v22);
    }
  }
  return v5;
}

_QWORD *CGFontCreateCopy(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
    return 0;
  v9 = (_QWORD *)CGFontCreate((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
  if (v9)
  {
    v10 = (*(uint64_t (**)(_QWORD))(a1[2] + 80))(a1[14]);
    v9[14] = v10;
    if (v10)
    {
      v11 = atomic_load(a1 + 4);
      CGFontSetEncodingVector((uint64_t)v9, v11);
      return v9;
    }
    CFRelease(v9);
    return 0;
  }
  return v9;
}

__CFArray *CGFontCreateFontsFromData(uint64_t a1)
{
  _BOOL8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t VTable;
  const __CFArray *v11;
  const __CFArray *v12;
  __CFArray *fonts_with_private_data_array;
  char v15;

  v2 = CGIsInLockdownModeForFonts();
  if (v2)
  {
    CGPostError((uint64_t)"Attempt to create CGFont from data in Lockdown Mode for Fonts", v3, v4, v5, v6, v7, v8, v9, v15);
  }
  else
  {
    VTable = CGFontGetVTable(v2, v3, v4, v5, v6, v7, v8, v9);
    v11 = (const __CFArray *)(*(uint64_t (**)(uint64_t))(VTable + 56))(a1);
    if (v11)
    {
      v12 = v11;
      fonts_with_private_data_array = create_fonts_with_private_data_array(v11, 1);
      CFRelease(v12);
      return fonts_with_private_data_array;
    }
  }
  return 0;
}

void CGFontApplyFunction(uint64_t (*a1)(const void *, uint64_t), uint64_t a2)
{
  uint64_t Default;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t (*)(const void *, uint64_t), uint64_t);

  if (a1)
  {
    initialize_font_database_once();
    Default = CGFontFinderGetDefault();
    if (Default)
    {
      CGFontFinderApplyFunction(Default, a1, a2);
    }
    else
    {
      CGFontDBApplyFunction(0, (unsigned int (*)(const void *, uint64_t))a1, a2);
      v13 = *(void (**)(uint64_t (*)(const void *, uint64_t), uint64_t))(CGFontGetVTable(v5, v6, v7, v8, v9, v10, v11, v12)+ 72);
      v13(a1, a2);
    }
  }
}

uint64_t rgb555_sample_W8(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  unsigned int v41;
  unint64_t v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  unsigned int v45;
  int v46;
  int v47;
  unsigned __int8 *v48;
  unsigned int v49;
  unint64_t v50;
  unsigned __int8 *v51;
  unsigned int v52;
  unsigned __int8 *v53;
  unsigned int v54;
  unsigned __int8 *v55;
  unint64_t v56;
  unint64_t v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  int v60;
  char v61;
  unsigned int v62;
  unsigned __int8 *v63;
  unsigned int v64;
  unsigned __int8 *v65;
  int v66;
  char v67;
  unsigned int v68;
  unsigned int v69;
  unsigned __int8 *v70;
  unsigned int v71;
  unsigned __int8 *v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unsigned __int8 *v81;
  uint64_t v82;
  unsigned __int8 *v83;
  unsigned __int8 *v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;

  v4 = *(_QWORD *)(result + 32);
  v5 = *(_QWORD *)(result + 40);
  v6 = *(_DWORD *)(result + 24);
  v7 = *(_QWORD *)(result + 176);
  v88 = *(_QWORD *)(result + 88);
  v89 = *(_QWORD *)(result + 80);
  v9 = *(_QWORD *)(result + 112);
  v8 = *(_QWORD *)(result + 120);
  v90 = *(_QWORD *)(result + 144) - 1;
  v91 = *(_QWORD *)(result + 152) - 4;
  if (v5)
    v10 = 0;
  else
    v10 = -16777216;
  v11 = *(_DWORD *)(result + 260) - 1;
  v12 = *(unsigned int *)(result + 256);
  v92 = *(_DWORD *)(result + 28);
  v85 = *(_DWORD *)(result + 188);
  v13 = (unsigned __int8 *)(v5 + (v12 - 1) + (v11 * v92));
  v14 = v4 + v12 + (v11 * v6) - 1;
  v86 = *(_QWORD *)(result + 64);
  v87 = *(_QWORD *)(result + 72);
  while (1)
  {
LABEL_5:
    if (a3 >= v87)
    {
      if (a3 <= v88)
      {
        v23 = ((unint64_t)a3 >> 22) & 0x3C0;
        v24 = 0x3FFFFFFF;
        v25 = a3;
        v26 = v86;
        v27 = v89;
      }
      else
      {
        v19 = *(_QWORD *)(result + 216);
        v20 = *(_QWORD *)(result + 224) + v88;
        v21 = v20 - a3 + (v19 >> 1);
        if (v21 < 1)
          goto LABEL_43;
        if (v21 >= v19)
          LODWORD(v22) = 0x3FFFFFFF;
        else
          v22 = (unint64_t)(*(_QWORD *)(result + 232) * v21) >> 32;
        v26 = v86;
        v27 = v89;
        v24 = v85 | v22;
        v25 = v20 - 0x1000000;
        v23 = 448;
      }
    }
    else
    {
      v15 = *(_QWORD *)(result + 216);
      v16 = v87 - *(_QWORD *)(result + 224);
      v17 = a3 - v16 + (v15 >> 1);
      if (v17 < 1)
        goto LABEL_43;
      if (v17 >= v15)
        LODWORD(v18) = 0x3FFFFFFF;
      else
        v18 = (unint64_t)(*(_QWORD *)(result + 232) * v17) >> 32;
      v26 = v86;
      v27 = v89;
      v24 = v85 | v18;
      v25 = v16 + 0x1000000;
      v23 = 512;
    }
    if (a2 >= v26)
      break;
    v28 = *(_QWORD *)(result + 192);
    v29 = v26 - *(_QWORD *)(result + 200);
    v30 = a2 - v29 + (v28 >> 1);
    if (v30 >= 1)
    {
      if (v30 < v28)
        v24 = ((v24 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v30) >> 32) >> 15)) | v85;
      v31 = v29 + 0x1000000;
      v32 = 32;
      goto LABEL_29;
    }
LABEL_43:
    --a4;
    a2 += v9;
    a3 += v8;
    v91 += 4;
    *(_BYTE *)++v90 = 0;
    if (!a4)
      return result;
  }
  if (a2 <= v27)
  {
    v32 = ((unint64_t)a2 >> 26) & 0x3C;
    v31 = a2;
    goto LABEL_29;
  }
  v33 = *(_QWORD *)(result + 192);
  v34 = *(_QWORD *)(result + 200) + v27;
  v35 = v34 - a2 + (v33 >> 1);
  if (v35 < 1)
    goto LABEL_43;
  if (v35 < v33)
    v24 = ((v24 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v35) >> 32) >> 15)) | v85;
  v31 = v34 - 0x1000000;
  v32 = 28;
LABEL_29:
  if (v24 < 0x400000)
    goto LABEL_43;
  v36 = v25 >> 32;
  v37 = v4 + (int)v36 * (uint64_t)v6;
  v38 = v37 + (v31 >> 32);
  v39 = *(unsigned __int8 **)(result + 32);
  if (v14 >= v38)
    v40 = (unsigned __int8 *)(v37 + (v31 >> 32));
  else
    v40 = (unsigned __int8 *)v14;
  if (v40 < v39)
    v40 = *(unsigned __int8 **)(result + 32);
  v41 = *v40;
  if (!v5)
  {
    v42 = 0;
    if (!v7)
      goto LABEL_103;
LABEL_46:
    v45 = *(_DWORD *)(v7 + (v32 | v23));
LABEL_48:
    v46 = v45 & 0xF;
    v47 = HIBYTE(v45) & 3;
    if (v46 == 1)
    {
      v63 = (unsigned __int8 *)(v38 + SBYTE1(v45) * (uint64_t)v6);
      if (v14 < (unint64_t)v63)
        v63 = (unsigned __int8 *)v14;
      if (v63 < v39)
        v63 = v39;
      v64 = *v63;
      if (v5)
      {
        v65 = (unsigned __int8 *)(v42 + SBYTE1(v45) * (uint64_t)v92);
        if (v13 < v65)
          v65 = v13;
        if ((unint64_t)v65 < *(_QWORD *)(result + 40))
          v65 = *(unsigned __int8 **)(result + 40);
        v64 |= *v65 << 24;
      }
      v66 = interpolate_8888_19472[v47];
      v67 = v47 + 1;
      v68 = v41 - ((v66 & v41) >> v67);
      v69 = (v66 & v64) >> v67;
    }
    else
    {
      if (v46 != 2)
      {
        if (v46 == 3)
        {
          v48 = (unsigned __int8 *)(v38 + SBYTE2(v45));
          if (v14 < (unint64_t)v48)
            v48 = (unsigned __int8 *)v14;
          if (v48 < v39)
            v48 = v39;
          v49 = *v48;
          v50 = v38 + SBYTE1(v45) * (uint64_t)v6;
          if (v14 >= v50)
            v51 = (unsigned __int8 *)(v38 + SBYTE1(v45) * (uint64_t)v6);
          else
            v51 = (unsigned __int8 *)v14;
          if (v51 < v39)
            v51 = v39;
          v52 = *v51;
          v53 = (unsigned __int8 *)(v50 + SBYTE2(v45));
          if (v14 < (unint64_t)v53)
            v53 = (unsigned __int8 *)v14;
          if (v53 < v39)
            v53 = v39;
          v54 = *v53;
          if (v5)
          {
            v55 = (unsigned __int8 *)(v42 + SBYTE2(v45));
            v56 = *(_QWORD *)(result + 40);
            if (v13 < v55)
              v55 = v13;
            if ((unint64_t)v55 < v56)
              v55 = *(unsigned __int8 **)(result + 40);
            v49 |= *v55 << 24;
            v57 = v42 + SBYTE1(v45) * (uint64_t)v92;
            if ((unint64_t)v13 >= v57)
              v58 = (unsigned __int8 *)(v42 + SBYTE1(v45) * (uint64_t)v92);
            else
              v58 = v13;
            if ((unint64_t)v58 < v56)
              v58 = *(unsigned __int8 **)(result + 40);
            v52 |= *v58 << 24;
            v59 = (unsigned __int8 *)(v57 + SBYTE2(v45));
            if (v13 < v59)
              v59 = v13;
            if ((unint64_t)v59 < v56)
              v59 = *(unsigned __int8 **)(result + 40);
            v54 |= *v59 << 24;
          }
          v60 = interpolate_8888_19472[v47];
          v61 = v47 + 1;
          v62 = v41 - ((v60 & v41) >> v61) + ((v60 & v52) >> v61);
          v41 = v62
              - ((v62 & interpolate_8888_19472[(v45 >> 28) & 3]) >> (((v45 >> 28) & 3) + 1))
              + (((v49 - ((v60 & v49) >> v61) + ((v60 & v54) >> v61)) & interpolate_8888_19472[(v45 >> 28) & 3]) >> (((v45 >> 28) & 3) + 1));
        }
        goto LABEL_103;
      }
      v70 = (unsigned __int8 *)(v38 + SBYTE2(v45));
      if (v14 < (unint64_t)v70)
        v70 = (unsigned __int8 *)v14;
      if (v70 < v39)
        v70 = v39;
      v71 = *v70;
      if (v5)
      {
        v72 = (unsigned __int8 *)(v42 + SBYTE2(v45));
        if (v13 < v72)
          v72 = v13;
        if ((unint64_t)v72 < *(_QWORD *)(result + 40))
          v72 = *(unsigned __int8 **)(result + 40);
        v71 |= *v72 << 24;
      }
      v73 = (v45 >> 28) & 3;
      v74 = interpolate_8888_19472[v73];
      LOBYTE(v73) = v73 + 1;
      v68 = v41 - ((v74 & v41) >> v73);
      v69 = (v74 & v71) >> v73;
    }
    v41 = v68 + v69;
    goto LABEL_103;
  }
  v42 = v5 + (int)v36 * (uint64_t)v92 + (v31 >> 32);
  v43 = *(unsigned __int8 **)(result + 40);
  if ((unint64_t)v13 >= v42)
    v44 = (unsigned __int8 *)v42;
  else
    v44 = v13;
  if (v44 >= v43)
    v43 = v44;
  v41 |= *v43 << 24;
  if (v7)
    goto LABEL_46;
LABEL_103:
  v75 = 0;
  v76 = 0;
  a3 += v8;
  v77 = v88 - a3;
  a2 += v9;
  v78 = v89 - a2;
  while (1)
  {
    HIDWORD(v79) = v41;
    LODWORD(v79) = v41 | v10;
    *(_DWORD *)(v91 + 4 + 4 * v75) = (4 * v41) & 0x3E0 | (v41 >> 3 << 10) | ((v79 >> 24) >> 11) & 0xFFFFFF | (((v79 >> 24) >> 3) << 27) | (((v41 | v10) >> 24) >> 5 << 24);
    *(_BYTE *)(v90 + 1 + v75) = v24 >> 22;
    if (a4 - 1 == (_DWORD)v75)
      return result;
    if ((v77 | v78 | (a3 - v87) | (a2 - v86)) < 0)
    {
      v91 = v91 - v76 + 4;
      v90 += v75 + 1;
      a4 += ~(_DWORD)v75;
      if (a4)
        goto LABEL_5;
      return result;
    }
    v80 = v4 + SHIDWORD(a3) * (uint64_t)v6;
    v38 = v80 + (a2 >> 32);
    v39 = *(unsigned __int8 **)(result + 32);
    if (v14 >= v38)
      v81 = (unsigned __int8 *)(v80 + (a2 >> 32));
    else
      v81 = (unsigned __int8 *)v14;
    if (v81 < v39)
      v81 = *(unsigned __int8 **)(result + 32);
    v41 = *v81;
    if (v5)
    {
      v82 = v5 + SHIDWORD(a3) * (uint64_t)v92;
      v42 = v82 + (a2 >> 32);
      v83 = *(unsigned __int8 **)(result + 40);
      if ((unint64_t)v13 >= v42)
        v84 = (unsigned __int8 *)(v82 + (a2 >> 32));
      else
        v84 = v13;
      if (v84 >= v83)
        v83 = v84;
      v41 |= *v83 << 24;
    }
    if (v7)
    {
      v45 = *(_DWORD *)(v7 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      if ((v45 & 0xF) != 0)
      {
        v91 = v91 - v76 + 4;
        v90 += v75 + 1;
        a4 += ~(_DWORD)v75;
        v24 = -1;
        goto LABEL_48;
      }
    }
    v76 -= 4;
    ++v75;
    a3 += v8;
    v77 -= v8;
    a2 += v9;
    v78 -= v9;
    v24 = -1;
  }
}

uint64_t rgb555_sample_RGB555(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unsigned __int16 *v50;
  unsigned __int16 *v51;
  unsigned int v52;
  unint64_t v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  int v56;
  unsigned int v57;
  int v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int16 *v72;
  unsigned int v73;
  unint64_t v74;
  unsigned __int16 *v75;
  unsigned int v76;
  unsigned __int16 *v77;
  unsigned int v78;
  unsigned __int8 *v79;
  unint64_t v80;
  unsigned __int8 *v81;
  unsigned __int8 *v82;
  unsigned __int8 *v83;
  int v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int16 *v91;
  unsigned int v92;
  unsigned __int8 *v93;
  int v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  int64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned __int16 *v102;
  unsigned int v103;
  unsigned __int8 *v104;
  unsigned int v105;
  int v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned __int16 *v120;
  unsigned __int8 *v121;
  unsigned __int8 *v122;
  uint64_t v123;
  int v124;
  unsigned int v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;

  v4 = *(_DWORD *)(result + 24);
  v133 = *(_DWORD *)(result + 28);
  v5 = *(_QWORD *)(result + 112);
  v6 = *(_QWORD *)(result + 48);
  v7 = *(_QWORD *)(result + 56);
  if (v6)
  {
    v132 = *(_QWORD *)(result + 112);
    if (v5 > v6)
      v132 = v5 % v6;
  }
  else
  {
    v132 = 0;
  }
  v8 = *(_QWORD *)(result + 176);
  v9 = *(_QWORD *)(result + 40);
  v134 = *(_QWORD *)(result + 32);
  v10 = *(_QWORD *)(result + 120);
  if (v7)
  {
    v11 = v10 % v7;
    if (v10 <= v7)
      v11 = *(_QWORD *)(result + 120);
    v131 = v11;
  }
  else
  {
    v131 = 0;
  }
  v127 = *(_QWORD *)(result + 80);
  v129 = *(_QWORD *)(result + 88);
  v12 = *(_QWORD *)(result + 152) - 4;
  v13 = *(_QWORD *)(result + 144) - 1;
  if (v9)
    v14 = 0;
  else
    v14 = -16777216;
  v15 = *(_DWORD *)(result + 260) - 1;
  v16 = *(unsigned int *)(result + 256);
  v126 = *(_DWORD *)(result + 188);
  v17 = (unsigned __int8 *)(v9 + (v16 - 1) + (v15 * v133));
  v18 = v134 + (v15 * v4) + 2 * v16 - 4;
  v128 = *(_QWORD *)(result + 64);
  v130 = *(_QWORD *)(result + 72);
  while (1)
  {
    if (a3 < v130)
    {
      v19 = *(_QWORD *)(result + 216);
      v20 = v130 - *(_QWORD *)(result + 224);
      v21 = a3 - v20 + (v19 >> 1);
      v22 = a4;
      if (v21 < 1)
        goto LABEL_61;
      if (v21 >= v19)
        LODWORD(v23) = 0x3FFFFFFF;
      else
        v23 = (unint64_t)(*(_QWORD *)(result + 232) * v21) >> 32;
      v30 = v126 | v23;
      v31 = v20 + 0x1000000;
      v28 = a3 - v31;
      v29 = 512;
      goto LABEL_25;
    }
    if (a3 <= v129)
    {
      v28 = 0;
      v29 = ((unint64_t)a3 >> 22) & 0x3C0;
      v30 = 0x3FFFFFFF;
      v31 = a3;
      v22 = a4;
LABEL_25:
      v32 = v128;
      goto LABEL_28;
    }
    v24 = *(_QWORD *)(result + 216);
    v25 = *(_QWORD *)(result + 224) + v129;
    v26 = v25 - a3 + (v24 >> 1);
    v22 = a4;
    if (v26 < 1)
      goto LABEL_61;
    if (v26 >= v24)
      LODWORD(v27) = 0x3FFFFFFF;
    else
      v27 = (unint64_t)(*(_QWORD *)(result + 232) * v26) >> 32;
    v32 = v128;
    v30 = v126 | v27;
    v31 = v25 - 0x1000000;
    v28 = a3 - v31;
    v29 = 448;
LABEL_28:
    if (a2 >= v32)
      break;
    v33 = *(_QWORD *)(result + 192);
    v34 = v32 - *(_QWORD *)(result + 200);
    v35 = a2 - v34 + (v33 >> 1);
    if (v35 >= 1)
    {
      if (v35 < v33)
        v30 = ((v30 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v35) >> 32) >> 15)) | v126;
      v36 = v34 + 0x1000000;
      v37 = a2 - (v34 + 0x1000000);
      v38 = 32;
      goto LABEL_39;
    }
LABEL_61:
    v56 = v22 - 1;
    a2 += v5;
    a3 += v10;
    v12 += 4;
    *(_BYTE *)++v13 = 0;
LABEL_62:
    a4 = v56;
    if (!v56)
      return result;
  }
  if (a2 <= v127)
  {
    v37 = 0;
    v38 = ((unint64_t)a2 >> 26) & 0x3C;
    v36 = a2;
    goto LABEL_39;
  }
  v39 = *(_QWORD *)(result + 192);
  v40 = *(_QWORD *)(result + 200) + v127;
  v41 = v40 - a2 + (v39 >> 1);
  if (v41 < 1)
    goto LABEL_61;
  if (v41 < v39)
    v30 = ((v30 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v41) >> 32) >> 15)) | v126;
  v36 = v40 - 0x1000000;
  v37 = a2 - (v40 - 0x1000000);
  v38 = 28;
LABEL_39:
  if (v30 < 0x400000)
    goto LABEL_61;
  if (v6)
  {
    v42 = (v7 & ((v31 % v7) >> 63)) + v31 % v7;
    v43 = (v6 & ((v36 % v6) >> 63)) + v36 % v6;
    if (v42 >= v7)
      v44 = v7;
    else
      v44 = 0;
    v31 = v42 - v44;
    if (v43 >= v6)
      v45 = v6;
    else
      v45 = 0;
    v36 = v43 - v45;
    v28 += v31;
    v37 += v36;
  }
  v46 = v31 >> 32;
  v47 = v36 >> 32;
  v48 = v134 + (int)v46 * (uint64_t)v4;
  v49 = v48 + 2 * v47;
  v50 = *(unsigned __int16 **)(result + 32);
  if (v18 >= v49)
    v51 = (unsigned __int16 *)(v48 + 2 * v47);
  else
    v51 = (unsigned __int16 *)v18;
  if (v51 < v50)
    v51 = *(unsigned __int16 **)(result + 32);
  v52 = bswap32(*v51) >> 16;
  if (!v9)
  {
    v53 = 0;
    if (!v8)
      goto LABEL_140;
LABEL_65:
    v57 = *(_DWORD *)(v8 + (v38 | v29));
LABEL_67:
    v58 = v57 & 0xF;
    v59 = v57 >> 8;
    v60 = HIBYTE(v57) & 3;
    if (v58 == 1)
    {
      LODWORD(v86) = SBYTE1(v57);
      if (v6)
      {
        v87 = v59 << 56;
        v88 = v28 + (v87 >> 24);
        v89 = v7 & (v88 >> 63);
        if (v89 + v88 >= v7)
          v90 = v7;
        else
          v90 = 0;
        v86 = (v89 + (v87 >> 24) - v90) >> 32;
      }
      v91 = (unsigned __int16 *)(v49 + (int)v86 * (uint64_t)v4);
      if (v18 < (unint64_t)v91)
        v91 = (unsigned __int16 *)v18;
      if (v91 < v50)
        v91 = v50;
      v92 = bswap32(*v91) >> 16;
      if (v9)
      {
        v93 = (unsigned __int8 *)(v53 + (int)v86 * (uint64_t)v133);
        if (v17 < v93)
          v93 = v17;
        if ((unint64_t)v93 < *(_QWORD *)(result + 40))
          v93 = *(unsigned __int8 **)(result + 40);
        v92 |= *v93 << 24;
      }
      v94 = interpolate_8555_19473[v60];
      v95 = v52 - ((v94 & v52) >> (v60 + 1));
      v96 = (v94 & v92) >> (v60 + 1);
    }
    else
    {
      if (v58 != 2)
      {
        if (v58 == 3)
        {
          v61 = HIBYTE(v57) & 3;
          v125 = v30;
          v124 = v22;
          LODWORD(v62) = SBYTE1(v57);
          v63 = SBYTE2(v57);
          if (v6)
          {
            v64 = v59 << 56;
            v65 = v28 + (v64 >> 24);
            v66 = v37 + ((uint64_t)SBYTE2(v57) << 32);
            v67 = v7 & (v65 >> 63);
            v68 = v6 & (v66 >> 63);
            v69 = v68 + v66;
            if (v67 + v65 >= v7)
              v70 = v7;
            else
              v70 = 0;
            if (v69 >= v6)
              v71 = v6;
            else
              v71 = 0;
            v62 = (v67 + (v64 >> 24) - v70) >> 32;
            v63 = (v68 + ((uint64_t)((unint64_t)HIWORD(v57) << 56) >> 24) - v71) >> 32;
          }
          v72 = (unsigned __int16 *)(v49 + 2 * v63);
          if (v18 < (unint64_t)v72)
            v72 = (unsigned __int16 *)v18;
          if (v72 < v50)
            v72 = v50;
          v73 = bswap32(*v72) >> 16;
          v74 = v49 + (int)v62 * (uint64_t)v4;
          if (v18 >= v74)
            v75 = (unsigned __int16 *)(v49 + (int)v62 * (uint64_t)v4);
          else
            v75 = (unsigned __int16 *)v18;
          if (v75 < v50)
            v75 = v50;
          v76 = bswap32(*v75) >> 16;
          v77 = (unsigned __int16 *)(v74 + 2 * v63);
          if (v18 < (unint64_t)v77)
            v77 = (unsigned __int16 *)v18;
          if (v77 >= v50)
            v50 = v77;
          v78 = bswap32(*v50) >> 16;
          if (v9)
          {
            v79 = (unsigned __int8 *)(v53 + v63);
            v80 = *(_QWORD *)(result + 40);
            if ((unint64_t)v17 < v53 + v63)
              v79 = v17;
            if ((unint64_t)v79 < v80)
              v79 = *(unsigned __int8 **)(result + 40);
            v73 |= *v79 << 24;
            v81 = (unsigned __int8 *)(v53 + (int)v62 * (uint64_t)v133);
            if (v17 >= v81)
              v82 = v81;
            else
              v82 = v17;
            if ((unint64_t)v82 < v80)
              v82 = *(unsigned __int8 **)(result + 40);
            v76 |= *v82 << 24;
            v83 = &v81[v63];
            if (v17 < v83)
              v83 = v17;
            if ((unint64_t)v83 < v80)
              v83 = *(unsigned __int8 **)(result + 40);
            v78 |= *v83 << 24;
          }
          v84 = interpolate_8555_19473[v61];
          v85 = v52 - ((v84 & v52) >> (v61 + 1)) + ((v84 & v76) >> (v61 + 1));
          v52 = v85
              - ((v85 & interpolate_8555_19473[(v57 >> 28) & 3]) >> (((v57 >> 28) & 3) + 1))
              + (((v73 - ((v84 & v73) >> (v61 + 1)) + ((v84 & v78) >> (v61 + 1))) & interpolate_8555_19473[(v57 >> 28) & 3]) >> (((v57 >> 28) & 3) + 1));
          v22 = v124;
          v30 = v125;
        }
        goto LABEL_140;
      }
      v97 = SBYTE2(v57);
      if (v6)
      {
        v98 = (unint64_t)HIWORD(v57) << 56;
        v99 = v37 + (v98 >> 24);
        v100 = v6 & (v99 >> 63);
        if (v100 + v99 >= v6)
          v101 = v6;
        else
          v101 = 0;
        v97 = (v100 + (v98 >> 24) - v101) >> 32;
      }
      v102 = (unsigned __int16 *)(v49 + 2 * v97);
      if (v18 < (unint64_t)v102)
        v102 = (unsigned __int16 *)v18;
      if (v102 < v50)
        v102 = v50;
      v103 = bswap32(*v102) >> 16;
      if (v9)
      {
        v104 = (unsigned __int8 *)(v53 + v97);
        if (v17 < v104)
          v104 = v17;
        if ((unint64_t)v104 < *(_QWORD *)(result + 40))
          v104 = *(unsigned __int8 **)(result + 40);
        v103 |= *v104 << 24;
      }
      v105 = (v57 >> 28) & 3;
      v106 = interpolate_8555_19473[v105];
      LOBYTE(v105) = v105 + 1;
      v95 = v52 - ((v106 & v52) >> v105);
      v96 = (v106 & v103) >> v105;
    }
    v52 = v95 + v96;
    goto LABEL_140;
  }
  v53 = v9 + (int)v46 * (uint64_t)v133 + v47;
  v54 = *(unsigned __int8 **)(result + 40);
  if ((unint64_t)v17 >= v53)
    v55 = (unsigned __int8 *)v53;
  else
    v55 = v17;
  if (v55 >= v54)
    v54 = v55;
  v52 |= *v54 << 24;
  if (v8)
    goto LABEL_65;
LABEL_140:
  *(_DWORD *)(v12 + 4) = v14 | (v52 >> 29 << 24) | v52;
  *(_BYTE *)(v13 + 1) = v30 >> 22;
  if (v22 != 1)
  {
    v107 = v22;
    v108 = 0;
    a2 += v5;
    v109 = v127 - a2;
    a3 += v10;
    v110 = v129 - a3;
    v111 = -4;
    while (((v110 | v109 | (a3 - v130) | (a2 - v128)) & 0x8000000000000000) == 0)
    {
      if (v6)
      {
        v112 = (v7 & ((v28 + v131) >> 63)) + v28 + v131;
        v113 = (v6 & ((v37 + v132) >> 63)) + v37 + v132;
        if (v112 >= v7)
          v114 = v7;
        else
          v114 = 0;
        v115 = v112 - v114;
        if (v113 >= v6)
          v116 = v6;
        else
          v116 = 0;
        v117 = v113 - v116;
        v37 = v117;
        v28 = v115;
      }
      else
      {
        v117 = a2;
        v115 = a3;
      }
      v118 = v115 >> 32;
      v119 = v117 >> 32;
      v49 = v134 + SHIDWORD(v115) * (uint64_t)v4 + 2 * (v117 >> 32);
      v50 = *(unsigned __int16 **)(result + 32);
      if (v18 >= v49)
        v120 = (unsigned __int16 *)v49;
      else
        v120 = (unsigned __int16 *)v18;
      if (v120 < v50)
        v120 = *(unsigned __int16 **)(result + 32);
      v52 = bswap32(*v120) >> 16;
      if (v9)
      {
        v53 = v9 + (int)v118 * (uint64_t)v133 + v119;
        v121 = *(unsigned __int8 **)(result + 40);
        if ((unint64_t)v17 >= v53)
          v122 = (unsigned __int8 *)v53;
        else
          v122 = v17;
        if (v122 >= v121)
          v121 = v122;
        v52 |= *v121 << 24;
      }
      if (v8)
      {
        v57 = *(_DWORD *)(v8 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
        if ((v57 & 0xF) != 0)
        {
          v13 += v108 + 1;
          v12 -= v111;
          v22 = ~(_DWORD)v108 + v107;
          v30 = -1;
          goto LABEL_67;
        }
      }
      *(_DWORD *)(v12 + 4 * v108 + 8) = v14 | (v52 >> 29 << 24) | v52;
      v123 = v13 + v108++;
      v111 -= 4;
      *(_BYTE *)(v123 + 2) = -1;
      a2 += v5;
      v109 -= v5;
      a3 += v10;
      v110 -= v10;
      if (v107 - 1 == (_DWORD)v108)
        return result;
    }
    v13 += v108 + 1;
    v12 -= v111;
    v56 = ~(_DWORD)v108 + v107;
    goto LABEL_62;
  }
  return result;
}

uint64_t rgb555_sample_rgb555(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unsigned __int16 *v50;
  unsigned __int16 *v51;
  unsigned int v52;
  unint64_t v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  int v56;
  unsigned int v57;
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int16 *v72;
  unsigned int v73;
  unint64_t v74;
  unsigned __int16 *v75;
  unsigned int v76;
  unsigned __int16 *v77;
  unsigned int v78;
  unsigned __int8 *v79;
  unint64_t v80;
  unsigned __int8 *v81;
  unsigned __int8 *v82;
  unsigned __int8 *v83;
  int v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int16 *v91;
  unsigned int v92;
  unsigned __int8 *v93;
  int v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  int64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned __int16 *v102;
  unsigned int v103;
  unsigned __int8 *v104;
  int v105;
  int v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned __int16 *v120;
  unsigned __int8 *v121;
  unsigned __int8 *v122;
  uint64_t v123;
  int v124;
  unsigned int v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;

  v4 = *(_DWORD *)(result + 24);
  v133 = *(_DWORD *)(result + 28);
  v5 = *(_QWORD *)(result + 112);
  v6 = *(_QWORD *)(result + 48);
  v7 = *(_QWORD *)(result + 56);
  if (v6)
  {
    v132 = *(_QWORD *)(result + 112);
    if (v5 > v6)
      v132 = v5 % v6;
  }
  else
  {
    v132 = 0;
  }
  v8 = *(_QWORD *)(result + 176);
  v9 = *(_QWORD *)(result + 40);
  v134 = *(_QWORD *)(result + 32);
  v10 = *(_QWORD *)(result + 120);
  if (v7)
  {
    v11 = v10 % v7;
    if (v10 <= v7)
      v11 = *(_QWORD *)(result + 120);
    v131 = v11;
  }
  else
  {
    v131 = 0;
  }
  v127 = *(_QWORD *)(result + 80);
  v129 = *(_QWORD *)(result + 88);
  v12 = *(_QWORD *)(result + 152) - 4;
  v13 = *(_QWORD *)(result + 144) - 1;
  if (v9)
    v14 = 0;
  else
    v14 = -16777216;
  v15 = *(_DWORD *)(result + 260) - 1;
  v16 = *(unsigned int *)(result + 256);
  v126 = *(_DWORD *)(result + 188);
  v17 = (unsigned __int8 *)(v9 + (v16 - 1) + (v15 * v133));
  v18 = v134 + (v15 * v4) + 2 * v16 - 4;
  v128 = *(_QWORD *)(result + 64);
  v130 = *(_QWORD *)(result + 72);
  while (1)
  {
    if (a3 < v130)
    {
      v19 = *(_QWORD *)(result + 216);
      v20 = v130 - *(_QWORD *)(result + 224);
      v21 = a3 - v20 + (v19 >> 1);
      v22 = a4;
      if (v21 < 1)
        goto LABEL_61;
      if (v21 >= v19)
        LODWORD(v23) = 0x3FFFFFFF;
      else
        v23 = (unint64_t)(*(_QWORD *)(result + 232) * v21) >> 32;
      v30 = v126 | v23;
      v31 = v20 + 0x1000000;
      v28 = a3 - v31;
      v29 = 512;
      goto LABEL_25;
    }
    if (a3 <= v129)
    {
      v28 = 0;
      v29 = ((unint64_t)a3 >> 22) & 0x3C0;
      v30 = 0x3FFFFFFF;
      v31 = a3;
      v22 = a4;
LABEL_25:
      v32 = v128;
      goto LABEL_28;
    }
    v24 = *(_QWORD *)(result + 216);
    v25 = *(_QWORD *)(result + 224) + v129;
    v26 = v25 - a3 + (v24 >> 1);
    v22 = a4;
    if (v26 < 1)
      goto LABEL_61;
    if (v26 >= v24)
      LODWORD(v27) = 0x3FFFFFFF;
    else
      v27 = (unint64_t)(*(_QWORD *)(result + 232) * v26) >> 32;
    v32 = v128;
    v30 = v126 | v27;
    v31 = v25 - 0x1000000;
    v28 = a3 - v31;
    v29 = 448;
LABEL_28:
    if (a2 >= v32)
      break;
    v33 = *(_QWORD *)(result + 192);
    v34 = v32 - *(_QWORD *)(result + 200);
    v35 = a2 - v34 + (v33 >> 1);
    if (v35 >= 1)
    {
      if (v35 < v33)
        v30 = ((v30 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v35) >> 32) >> 15)) | v126;
      v36 = v34 + 0x1000000;
      v37 = a2 - (v34 + 0x1000000);
      v38 = 32;
      goto LABEL_39;
    }
LABEL_61:
    v56 = v22 - 1;
    a2 += v5;
    a3 += v10;
    v12 += 4;
    *(_BYTE *)++v13 = 0;
LABEL_62:
    a4 = v56;
    if (!v56)
      return result;
  }
  if (a2 <= v127)
  {
    v37 = 0;
    v38 = ((unint64_t)a2 >> 26) & 0x3C;
    v36 = a2;
    goto LABEL_39;
  }
  v39 = *(_QWORD *)(result + 192);
  v40 = *(_QWORD *)(result + 200) + v127;
  v41 = v40 - a2 + (v39 >> 1);
  if (v41 < 1)
    goto LABEL_61;
  if (v41 < v39)
    v30 = ((v30 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v41) >> 32) >> 15)) | v126;
  v36 = v40 - 0x1000000;
  v37 = a2 - (v40 - 0x1000000);
  v38 = 28;
LABEL_39:
  if (v30 < 0x400000)
    goto LABEL_61;
  if (v6)
  {
    v42 = (v7 & ((v31 % v7) >> 63)) + v31 % v7;
    v43 = (v6 & ((v36 % v6) >> 63)) + v36 % v6;
    if (v42 >= v7)
      v44 = v7;
    else
      v44 = 0;
    v31 = v42 - v44;
    if (v43 >= v6)
      v45 = v6;
    else
      v45 = 0;
    v36 = v43 - v45;
    v28 += v31;
    v37 += v36;
  }
  v46 = v31 >> 32;
  v47 = v36 >> 32;
  v48 = v134 + (int)v46 * (uint64_t)v4;
  v49 = v48 + 2 * v47;
  v50 = *(unsigned __int16 **)(result + 32);
  if (v18 >= v49)
    v51 = (unsigned __int16 *)(v48 + 2 * v47);
  else
    v51 = (unsigned __int16 *)v18;
  if (v51 < v50)
    v51 = *(unsigned __int16 **)(result + 32);
  v52 = *v51;
  if (!v9)
  {
    v53 = 0;
    if (!v8)
      goto LABEL_140;
LABEL_65:
    v57 = *(_DWORD *)(v8 + (v38 | v29));
LABEL_67:
    v58 = v57 & 0xF;
    v59 = v57 >> 8;
    v60 = HIBYTE(v57) & 3;
    if (v58 == 1)
    {
      LODWORD(v86) = SBYTE1(v57);
      if (v6)
      {
        v87 = v59 << 56;
        v88 = v28 + (v87 >> 24);
        v89 = v7 & (v88 >> 63);
        if (v89 + v88 >= v7)
          v90 = v7;
        else
          v90 = 0;
        v86 = (v89 + (v87 >> 24) - v90) >> 32;
      }
      v91 = (unsigned __int16 *)(v49 + (int)v86 * (uint64_t)v4);
      if (v18 < (unint64_t)v91)
        v91 = (unsigned __int16 *)v18;
      if (v91 < v50)
        v91 = v50;
      v92 = *v91;
      if (v9)
      {
        v93 = (unsigned __int8 *)(v53 + (int)v86 * (uint64_t)v133);
        if (v17 < v93)
          v93 = v17;
        if ((unint64_t)v93 < *(_QWORD *)(result + 40))
          v93 = *(unsigned __int8 **)(result + 40);
        v92 |= *v93 << 24;
      }
      v94 = interpolate_8555_19473[v60];
      v95 = v52 - ((v94 & v52) >> (v60 + 1));
      v96 = (v94 & v92) >> (v60 + 1);
    }
    else
    {
      if (v58 != 2)
      {
        if (v58 == 3)
        {
          v61 = HIBYTE(v57) & 3;
          v125 = v30;
          v124 = v22;
          LODWORD(v62) = SBYTE1(v57);
          v63 = SBYTE2(v57);
          if (v6)
          {
            v64 = v59 << 56;
            v65 = v28 + (v64 >> 24);
            v66 = v37 + ((uint64_t)SBYTE2(v57) << 32);
            v67 = v7 & (v65 >> 63);
            v68 = v6 & (v66 >> 63);
            v69 = v68 + v66;
            if (v67 + v65 >= v7)
              v70 = v7;
            else
              v70 = 0;
            if (v69 >= v6)
              v71 = v6;
            else
              v71 = 0;
            v62 = (v67 + (v64 >> 24) - v70) >> 32;
            v63 = (v68 + ((uint64_t)((unint64_t)HIWORD(v57) << 56) >> 24) - v71) >> 32;
          }
          v72 = (unsigned __int16 *)(v49 + 2 * v63);
          if (v18 < (unint64_t)v72)
            v72 = (unsigned __int16 *)v18;
          if (v72 < v50)
            v72 = v50;
          v73 = *v72;
          v74 = v49 + (int)v62 * (uint64_t)v4;
          if (v18 >= v74)
            v75 = (unsigned __int16 *)(v49 + (int)v62 * (uint64_t)v4);
          else
            v75 = (unsigned __int16 *)v18;
          if (v75 < v50)
            v75 = v50;
          v76 = *v75;
          v77 = (unsigned __int16 *)(v74 + 2 * v63);
          if (v18 < (unint64_t)v77)
            v77 = (unsigned __int16 *)v18;
          if (v77 >= v50)
            v50 = v77;
          v78 = *v50;
          if (v9)
          {
            v79 = (unsigned __int8 *)(v53 + v63);
            v80 = *(_QWORD *)(result + 40);
            if ((unint64_t)v17 < v53 + v63)
              v79 = v17;
            if ((unint64_t)v79 < v80)
              v79 = *(unsigned __int8 **)(result + 40);
            v73 |= *v79 << 24;
            v81 = (unsigned __int8 *)(v53 + (int)v62 * (uint64_t)v133);
            if (v17 >= v81)
              v82 = v81;
            else
              v82 = v17;
            if ((unint64_t)v82 < v80)
              v82 = *(unsigned __int8 **)(result + 40);
            v76 |= *v82 << 24;
            v83 = &v81[v63];
            if (v17 < v83)
              v83 = v17;
            if ((unint64_t)v83 < v80)
              v83 = *(unsigned __int8 **)(result + 40);
            v78 |= *v83 << 24;
          }
          v84 = interpolate_8555_19473[v61];
          v85 = v52 - ((v84 & v52) >> (v61 + 1)) + ((v84 & v76) >> (v61 + 1));
          v52 = v85
              - ((v85 & interpolate_8555_19473[(v57 >> 28) & 3]) >> (((v57 >> 28) & 3) + 1))
              + (((v73 - ((v84 & v73) >> (v61 + 1)) + ((v84 & v78) >> (v61 + 1))) & interpolate_8555_19473[(v57 >> 28) & 3]) >> (((v57 >> 28) & 3) + 1));
          v22 = v124;
          v30 = v125;
        }
        goto LABEL_140;
      }
      v97 = SBYTE2(v57);
      if (v6)
      {
        v98 = (unint64_t)HIWORD(v57) << 56;
        v99 = v37 + (v98 >> 24);
        v100 = v6 & (v99 >> 63);
        if (v100 + v99 >= v6)
          v101 = v6;
        else
          v101 = 0;
        v97 = (v100 + (v98 >> 24) - v101) >> 32;
      }
      v102 = (unsigned __int16 *)(v49 + 2 * v97);
      if (v18 < (unint64_t)v102)
        v102 = (unsigned __int16 *)v18;
      if (v102 < v50)
        v102 = v50;
      v103 = *v102;
      if (v9)
      {
        v104 = (unsigned __int8 *)(v53 + v97);
        if (v17 < v104)
          v104 = v17;
        if ((unint64_t)v104 < *(_QWORD *)(result + 40))
          v104 = *(unsigned __int8 **)(result + 40);
        v103 |= *v104 << 24;
      }
      v105 = (v57 >> 28) & 3;
      v106 = interpolate_8555_19473[v105];
      LOBYTE(v105) = v105 + 1;
      v95 = v52 - ((v106 & v52) >> v105);
      v96 = (v106 & v103) >> v105;
    }
    v52 = v95 + v96;
    goto LABEL_140;
  }
  v53 = v9 + (int)v46 * (uint64_t)v133 + v47;
  v54 = *(unsigned __int8 **)(result + 40);
  if ((unint64_t)v17 >= v53)
    v55 = (unsigned __int8 *)v53;
  else
    v55 = v17;
  if (v55 >= v54)
    v54 = v55;
  v52 |= *v54 << 24;
  if (v8)
    goto LABEL_65;
LABEL_140:
  *(_DWORD *)(v12 + 4) = v14 | (v52 >> 29 << 24) | v52;
  *(_BYTE *)(v13 + 1) = v30 >> 22;
  if (v22 != 1)
  {
    v107 = v22;
    v108 = 0;
    a2 += v5;
    v109 = v127 - a2;
    a3 += v10;
    v110 = v129 - a3;
    v111 = -4;
    while (((v110 | v109 | (a3 - v130) | (a2 - v128)) & 0x8000000000000000) == 0)
    {
      if (v6)
      {
        v112 = (v7 & ((v28 + v131) >> 63)) + v28 + v131;
        v113 = (v6 & ((v37 + v132) >> 63)) + v37 + v132;
        if (v112 >= v7)
          v114 = v7;
        else
          v114 = 0;
        v115 = v112 - v114;
        if (v113 >= v6)
          v116 = v6;
        else
          v116 = 0;
        v117 = v113 - v116;
        v37 = v117;
        v28 = v115;
      }
      else
      {
        v117 = a2;
        v115 = a3;
      }
      v118 = v115 >> 32;
      v119 = v117 >> 32;
      v49 = v134 + SHIDWORD(v115) * (uint64_t)v4 + 2 * (v117 >> 32);
      v50 = *(unsigned __int16 **)(result + 32);
      if (v18 >= v49)
        v120 = (unsigned __int16 *)v49;
      else
        v120 = (unsigned __int16 *)v18;
      if (v120 < v50)
        v120 = *(unsigned __int16 **)(result + 32);
      v52 = *v120;
      if (v9)
      {
        v53 = v9 + (int)v118 * (uint64_t)v133 + v119;
        v121 = *(unsigned __int8 **)(result + 40);
        if ((unint64_t)v17 >= v53)
          v122 = (unsigned __int8 *)v53;
        else
          v122 = v17;
        if (v122 >= v121)
          v121 = v122;
        v52 |= *v121 << 24;
      }
      if (v8)
      {
        v57 = *(_DWORD *)(v8 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
        if ((v57 & 0xF) != 0)
        {
          v13 += v108 + 1;
          v12 -= v111;
          v22 = ~(_DWORD)v108 + v107;
          v30 = -1;
          goto LABEL_67;
        }
      }
      *(_DWORD *)(v12 + 4 * v108 + 8) = v14 | (v52 >> 29 << 24) | v52;
      v123 = v13 + v108++;
      v111 -= 4;
      *(_BYTE *)(v123 + 2) = -1;
      a2 += v5;
      v109 -= v5;
      a3 += v10;
      v110 -= v10;
      if (v107 - 1 == (_DWORD)v108)
        return result;
    }
    v13 += v108 + 1;
    v12 -= v111;
    v56 = ~(_DWORD)v108 + v107;
    goto LABEL_62;
  }
  return result;
}

uint64_t rgb555_sample_RGB24(uint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  int v44;
  uint64_t v45;
  unsigned __int8 *v46;
  int v47;
  unint64_t v48;
  unsigned __int8 *v49;
  int v50;
  unsigned __int8 *v51;
  unsigned int v52;
  char v53;
  unsigned int v54;
  int v55;
  int v56;
  unsigned int v57;
  char v58;
  unsigned int v59;
  unsigned __int8 *v60;
  unsigned int v61;
  char v62;
  unsigned int v63;
  unsigned __int8 *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int8 *v72;
  int v73;
  uint64_t v74;

  v4 = *(_QWORD *)(result + 32);
  v5 = *(_DWORD *)(result + 24);
  v6 = *(_QWORD *)(result + 176);
  v7 = *(_QWORD *)(result + 72);
  v8 = *(_QWORD *)(result + 80);
  v9 = *(_QWORD *)(result + 88);
  v10 = *(_QWORD *)(result + 112);
  v11 = *(_QWORD *)(result + 120);
  v12 = *(_QWORD *)(result + 152) - 4;
  v13 = *(_QWORD *)(result + 144) - 1;
  v73 = *(_DWORD *)(result + 188);
  v14 = v4 + (3 * *(_DWORD *)(result + 256)) + ((*(_DWORD *)(result + 260) - 1) * v5) - 3;
  v74 = *(_QWORD *)(result + 64);
  while (1)
  {
LABEL_2:
    if ((uint64_t)a3 >= v7)
    {
      if ((uint64_t)a3 <= v9)
      {
        v24 = (a3 >> 22) & 0x3C0;
        v25 = 0x3FFFFFFF;
        HIDWORD(v26) = HIDWORD(a3);
        v27 = v8;
        v18 = v74;
      }
      else
      {
        v20 = *(_QWORD *)(result + 216);
        v21 = *(_QWORD *)(result + 224) + v9;
        v22 = v21 - a3 + (v20 >> 1);
        v18 = v74;
        if (v22 < 1)
          goto LABEL_34;
        if (v22 >= v20)
          LODWORD(v23) = 0x3FFFFFFF;
        else
          v23 = (unint64_t)(*(_QWORD *)(result + 232) * v22) >> 32;
        v27 = v8;
        v25 = v73 | v23;
        v26 = v21 - 0x1000000;
        v24 = 448;
      }
    }
    else
    {
      v15 = *(_QWORD *)(result + 216);
      v16 = v7 - *(_QWORD *)(result + 224);
      v17 = a3 - v16 + (v15 >> 1);
      v18 = v74;
      if (v17 < 1)
        goto LABEL_34;
      if (v17 >= v15)
        LODWORD(v19) = 0x3FFFFFFF;
      else
        v19 = (unint64_t)(*(_QWORD *)(result + 232) * v17) >> 32;
      v27 = v8;
      v25 = v73 | v19;
      v26 = v16 + 0x1000000;
      v24 = 512;
    }
    if (a2 >= v18)
      break;
    v28 = *(_QWORD *)(result + 192);
    v29 = v18 - *(_QWORD *)(result + 200);
    v30 = a2 - v29 + (v28 >> 1);
    if (v30 >= 1)
    {
      if (v30 < v28)
        v25 = ((v25 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v30) >> 32) >> 15)) | v73;
      v31 = v29 + 0x1000000;
      v32 = 32;
      goto LABEL_26;
    }
LABEL_34:
    --a4;
    a2 += v10;
    a3 += v11;
    v12 += 4;
    *(_BYTE *)++v13 = 0;
    if (!a4)
      return result;
  }
  if (a2 <= v27)
  {
    v32 = ((unint64_t)a2 >> 26) & 0x3C;
    v31 = a2;
    goto LABEL_26;
  }
  v33 = *(_QWORD *)(result + 192);
  v34 = *(_QWORD *)(result + 200) + v27;
  v35 = v34 - a2 + (v33 >> 1);
  if (v35 < 1)
    goto LABEL_34;
  if (v35 < v33)
    v25 = ((v25 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v35) >> 32) >> 15)) | v73;
  v31 = v34 - 0x1000000;
  v32 = 28;
LABEL_26:
  if (v25 < 0x400000)
    goto LABEL_34;
  v36 = v4 + SHIDWORD(v26) * (uint64_t)v5;
  v37 = 3 * (v31 >> 32);
  v38 = v36 + v37;
  v39 = *(unsigned __int8 **)(result + 32);
  if (v14 >= v36 + v37)
    v40 = (unsigned __int8 *)(v36 + v37);
  else
    v40 = (unsigned __int8 *)v14;
  if (v40 < v39)
    v40 = *(unsigned __int8 **)(result + 32);
  v41 = (v40[1] << 16) | (*v40 << 24) | (v40[2] << 8) | 0xFF;
  if (!v6)
    goto LABEL_66;
  v42 = *(_DWORD *)(v6 + (v32 | v24));
LABEL_37:
  v43 = v42 & 0xF;
  v44 = HIBYTE(v42) & 3;
  switch(v43)
  {
    case 1:
      v60 = (unsigned __int8 *)(v38 + SBYTE1(v42) * (uint64_t)v5);
      if (v14 < (unint64_t)v60)
        v60 = (unsigned __int8 *)v14;
      if (v60 < v39)
        v60 = v39;
      v61 = interpolate_8888_19472[v44];
      v62 = v44 + 1;
      v59 = v41 - ((v61 & v41) >> v62);
      v63 = (((v60[1] << 16) | (*v60 << 24) | (v60[2] << 8) | 0xFF) & v61) >> v62;
LABEL_65:
      v41 = v59 + v63;
      break;
    case 2:
      v64 = (unsigned __int8 *)(v38 + 3 * SBYTE2(v42));
      if (v14 < (unint64_t)v64)
        v64 = (unsigned __int8 *)v14;
      if (v64 < v39)
        v64 = v39;
      v55 = (v64[1] << 16) | (*v64 << 24) | (v64[2] << 8) | 0xFF;
      v65 = (v42 >> 28) & 3;
      v57 = interpolate_8888_19472[v65];
      v58 = v65 + 1;
      v59 = v41 - ((v57 & v41) >> v58);
LABEL_64:
      v63 = (v55 & v57) >> v58;
      goto LABEL_65;
    case 3:
      v45 = 3 * SBYTE2(v42);
      v46 = (unsigned __int8 *)(v38 + v45);
      if (v14 < v38 + v45)
        v46 = (unsigned __int8 *)v14;
      if (v46 < v39)
        v46 = v39;
      v47 = (v46[1] << 16) | (*v46 << 24) | (v46[2] << 8) | 0xFF;
      v48 = v38 + SBYTE1(v42) * (uint64_t)v5;
      if (v14 >= v48)
        v49 = (unsigned __int8 *)(v38 + SBYTE1(v42) * (uint64_t)v5);
      else
        v49 = (unsigned __int8 *)v14;
      if (v49 < v39)
        v49 = v39;
      v50 = (v49[1] << 16) | (*v49 << 24) | (v49[2] << 8) | 0xFF;
      v51 = (unsigned __int8 *)(v48 + v45);
      if (v14 < (unint64_t)v51)
        v51 = (unsigned __int8 *)v14;
      if (v51 < v39)
        v51 = v39;
      v52 = interpolate_8888_19472[v44];
      v53 = v44 + 1;
      v54 = v41 - ((v52 & v41) >> v53) + ((v50 & v52) >> v53);
      v55 = v47 - ((v52 & v47) >> v53) + ((((v51[1] << 16) | (*v51 << 24) | (v51[2] << 8) | 0xFF) & v52) >> v53);
      v56 = (v42 >> 28) & 3;
      v57 = interpolate_8888_19472[v56];
      v58 = v56 + 1;
      v59 = v54 - ((v54 & v57) >> v58);
      goto LABEL_64;
  }
LABEL_66:
  v66 = 0;
  v67 = 0;
  a3 += v11;
  v68 = v9 - a3;
  a2 += v10;
  v69 = v8 - a2;
  while (1)
  {
    *(_DWORD *)(v12 + 4 + 4 * v67) = (v41 >> 17) & 0x7C00 | (v41 >> 14) & 0x3E0 | ((unsigned __int16)v41 >> 11) & 0xFFFFFF | ((v41 >> 3) << 27) | (v41 >> 5 << 24);
    *(_BYTE *)(v13 + 1 + v67) = v25 >> 22;
    if (a4 - 1 == (_DWORD)v67)
      return result;
    if (((v68 | v69 | (a3 - v7) | (a2 - v74)) & 0x8000000000000000) != 0)
    {
      v13 += v67 + 1;
      v12 = v12 - v66 + 4;
      a4 += ~(_DWORD)v67;
      if (a4)
        goto LABEL_2;
      return result;
    }
    v70 = v4 + SHIDWORD(a3) * (uint64_t)v5;
    v71 = 3 * (a2 >> 32);
    v38 = v70 + v71;
    v39 = *(unsigned __int8 **)(result + 32);
    if (v14 >= v70 + v71)
      v72 = (unsigned __int8 *)(v70 + v71);
    else
      v72 = (unsigned __int8 *)v14;
    if (v72 < v39)
      v72 = *(unsigned __int8 **)(result + 32);
    v41 = (v72[1] << 16) | (*v72 << 24) | (v72[2] << 8) | 0xFF;
    if (v6)
    {
      v42 = *(_DWORD *)(v6 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
      if ((v42 & 0xF) != 0)
      {
        v13 += v67 + 1;
        v12 = v12 - v66 + 4;
        a4 += ~(_DWORD)v67;
        v25 = -1;
        goto LABEL_37;
      }
    }
    ++v67;
    v66 -= 4;
    a3 += v11;
    v68 -= v11;
    a2 += v10;
    v69 -= v10;
    v25 = -1;
  }
}

uint64_t rgb555_sample_RGBA32(uint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  int v42;
  int64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  int v50;
  char v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  int v55;
  char v56;
  unsigned int v57;
  unsigned int *v58;
  int v59;
  char v60;
  unsigned int v61;
  unsigned int *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;

  v4 = *(_DWORD *)(result + 24);
  v5 = *(_QWORD *)(result + 176);
  v6 = *(_QWORD *)(result + 72);
  v7 = *(_QWORD *)(result + 88);
  v72 = *(_QWORD *)(result + 80);
  v8 = *(_QWORD *)(result + 112);
  v9 = *(_QWORD *)(result + 120);
  v70 = *(_DWORD *)(result + 188);
  v10 = *(_QWORD *)(result + 152) - 4;
  v11 = *(_QWORD *)(result + 144) - 1;
  v12 = *(_QWORD *)(result + 32);
  if (*(_QWORD *)(result + 40))
    v13 = 0;
  else
    v13 = 255;
  v14 = v12 + ((*(_DWORD *)(result + 260) - 1) * v4) + 4 * *(unsigned int *)(result + 256) - 4;
  v71 = *(_QWORD *)(result + 64);
  while (1)
  {
LABEL_5:
    if ((uint64_t)a3 >= v6)
    {
      if ((uint64_t)a3 <= v7)
      {
        v23 = (a3 >> 22) & 0x3C0;
        v24 = 0x3FFFFFFF;
        HIDWORD(v25) = HIDWORD(a3);
      }
      else
      {
        v19 = *(_QWORD *)(result + 216);
        v20 = *(_QWORD *)(result + 224) + v7;
        v21 = v20 - a3 + (v19 >> 1);
        if (v21 < 1)
          goto LABEL_37;
        if (v21 >= v19)
          LODWORD(v22) = 0x3FFFFFFF;
        else
          v22 = (unint64_t)(*(_QWORD *)(result + 232) * v21) >> 32;
        v24 = v70 | v22;
        v25 = v20 - 0x1000000;
        v23 = 448;
      }
    }
    else
    {
      v15 = *(_QWORD *)(result + 216);
      v16 = v6 - *(_QWORD *)(result + 224);
      v17 = a3 - v16 + (v15 >> 1);
      if (v17 < 1)
        goto LABEL_37;
      if (v17 >= v15)
        LODWORD(v18) = 0x3FFFFFFF;
      else
        v18 = (unint64_t)(*(_QWORD *)(result + 232) * v17) >> 32;
      v24 = v70 | v18;
      v25 = v16 + 0x1000000;
      v23 = 512;
    }
    if (a2 >= v71)
      break;
    v26 = *(_QWORD *)(result + 192);
    v27 = v71 - *(_QWORD *)(result + 200);
    v28 = a2 - v27 + (v26 >> 1);
    if (v28 >= 1)
    {
      if (v28 < v26)
        v24 = ((v24 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v28) >> 32) >> 15)) | v70;
      v29 = v27 + 0x1000000;
      v30 = 32;
      goto LABEL_29;
    }
LABEL_37:
    --a4;
    a2 += v8;
    a3 += v9;
    v10 += 4;
    *(_BYTE *)++v11 = 0;
    if (!a4)
      return result;
  }
  if (a2 <= v72)
  {
    v30 = ((unint64_t)a2 >> 26) & 0x3C;
    v29 = a2;
    goto LABEL_29;
  }
  v31 = *(_QWORD *)(result + 192);
  v32 = *(_QWORD *)(result + 200) + v72;
  v33 = v32 - a2 + (v31 >> 1);
  if (v33 < 1)
    goto LABEL_37;
  if (v33 < v31)
    v24 = ((v24 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v33) >> 32) >> 15)) | v70;
  v29 = v32 - 0x1000000;
  v30 = 28;
LABEL_29:
  if (v24 < 0x400000)
    goto LABEL_37;
  v34 = v12 + SHIDWORD(v25) * (uint64_t)v4;
  v35 = v29 >> 32;
  v36 = v34 + 4 * v35;
  v37 = *(unsigned int **)(result + 32);
  if (v14 >= v36)
    v38 = (unsigned int *)(v34 + 4 * v35);
  else
    v38 = (unsigned int *)v14;
  if (v38 < v37)
    v38 = *(unsigned int **)(result + 32);
  v39 = bswap32(*v38);
  if (!v5)
    goto LABEL_69;
  v40 = *(_DWORD *)(v5 + (v30 | v23));
LABEL_40:
  v41 = v40 & 0xF;
  v42 = HIBYTE(v40) & 3;
  switch(v41)
  {
    case 1:
      v58 = (unsigned int *)(v36 + SBYTE1(v40) * (uint64_t)v4);
      if (v14 < (unint64_t)v58)
        v58 = (unsigned int *)v14;
      if (v58 < v37)
        v58 = v37;
      v59 = interpolate_8888_19472[v42];
      v60 = v42 + 1;
      v57 = v39 - ((v59 & v39) >> v60);
      v61 = (bswap32(*v58) & v59) >> v60;
LABEL_68:
      v39 = v57 + v61;
      break;
    case 2:
      v62 = (unsigned int *)(v36 + ((uint64_t)((unint64_t)HIWORD(v40) << 56) >> 54));
      if (v14 < (unint64_t)v62)
        v62 = (unsigned int *)v14;
      if (v62 < v37)
        v62 = v37;
      v53 = bswap32(*v62);
      v63 = (v40 >> 28) & 3;
      v55 = interpolate_8888_19472[v63];
      v56 = v63 + 1;
      v57 = v39 - ((v55 & v39) >> v56);
LABEL_67:
      v61 = (v53 & v55) >> v56;
      goto LABEL_68;
    case 3:
      v43 = (unint64_t)HIWORD(v40) << 56;
      v44 = (unsigned int *)(v36 + (v43 >> 54));
      if (v14 < (unint64_t)v44)
        v44 = (unsigned int *)v14;
      if (v44 < v37)
        v44 = v37;
      v45 = bswap32(*v44);
      v46 = v36 + SBYTE1(v40) * (uint64_t)v4;
      if (v14 >= v46)
        v47 = (unsigned int *)(v36 + SBYTE1(v40) * (uint64_t)v4);
      else
        v47 = (unsigned int *)v14;
      if (v47 < v37)
        v47 = v37;
      v48 = bswap32(*v47);
      v49 = (unsigned int *)(v46 + (v43 >> 54));
      if (v14 < (unint64_t)v49)
        v49 = (unsigned int *)v14;
      if (v49 < v37)
        v49 = v37;
      v50 = interpolate_8888_19472[v42];
      v51 = v42 + 1;
      v52 = v39 - ((v50 & v39) >> v51) + ((v50 & v48) >> v51);
      v53 = v45 - ((v50 & v45) >> v51) + ((bswap32(*v49) & v50) >> v51);
      v54 = (v40 >> 28) & 3;
      v55 = interpolate_8888_19472[v54];
      v56 = v54 + 1;
      v57 = v52 - ((v52 & v55) >> v56);
      goto LABEL_67;
  }
LABEL_69:
  v64 = 0;
  v65 = 0;
  a3 += v9;
  v66 = v7 - a3;
  a2 += v8;
  v67 = v72 - a2;
  while (1)
  {
    *(_DWORD *)(v10 + 4 + 4 * v64) = (v39 >> 17) & 0x7C00 | (v39 >> 14) & 0x3E0 | ((unsigned __int16)v39 >> 11) & 0xFFFFFF | (((v39 | v13) >> 3) << 27) | ((((v39 | v13) >> 5) & 7) << 24);
    *(_BYTE *)(v11 + 1 + v64) = v24 >> 22;
    if (a4 - 1 == (_DWORD)v64)
      return result;
    if (((v66 | v67 | (a3 - v6) | (a2 - v71)) & 0x8000000000000000) != 0)
    {
      v10 = v10 - v65 + 4;
      v11 += v64 + 1;
      a4 += ~(_DWORD)v64;
      if (a4)
        goto LABEL_5;
      return result;
    }
    v68 = v12 + SHIDWORD(a3) * (uint64_t)v4;
    v36 = v68 + 4 * (a2 >> 32);
    v37 = *(unsigned int **)(result + 32);
    if (v14 >= v36)
      v69 = (unsigned int *)(v68 + 4 * (a2 >> 32));
    else
      v69 = (unsigned int *)v14;
    if (v69 < v37)
      v69 = *(unsigned int **)(result + 32);
    v39 = bswap32(*v69);
    if (v5)
    {
      v40 = *(_DWORD *)(v5 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
      if ((v40 & 0xF) != 0)
      {
        v10 = v10 - v65 + 4;
        v11 += v64 + 1;
        a4 += ~(_DWORD)v64;
        v24 = -1;
        goto LABEL_40;
      }
    }
    v65 -= 4;
    ++v64;
    a3 += v9;
    v66 -= v9;
    a2 += v8;
    v67 -= v8;
    v24 = -1;
  }
}

uint64_t rgb555_sample_rgba32(uint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  int v42;
  int64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  char v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  int v55;
  char v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  char v61;
  unsigned int v62;
  unsigned int *v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;

  v4 = *(_DWORD *)(result + 24);
  v5 = *(_QWORD *)(result + 176);
  v6 = *(_QWORD *)(result + 72);
  v7 = *(_QWORD *)(result + 88);
  v74 = *(_QWORD *)(result + 80);
  v8 = *(_QWORD *)(result + 112);
  v9 = *(_QWORD *)(result + 120);
  v72 = *(_DWORD *)(result + 188);
  v10 = *(_QWORD *)(result + 152) - 4;
  v11 = *(_QWORD *)(result + 144) - 1;
  v12 = *(_QWORD *)(result + 32);
  if (*(_QWORD *)(result + 40))
    v13 = 0;
  else
    v13 = 255;
  v14 = v12 + ((*(_DWORD *)(result + 260) - 1) * v4) + 4 * *(unsigned int *)(result + 256) - 4;
  v73 = *(_QWORD *)(result + 64);
  while (1)
  {
LABEL_5:
    if ((uint64_t)a3 >= v6)
    {
      if ((uint64_t)a3 <= v7)
      {
        v23 = (a3 >> 22) & 0x3C0;
        v24 = 0x3FFFFFFF;
        HIDWORD(v25) = HIDWORD(a3);
      }
      else
      {
        v19 = *(_QWORD *)(result + 216);
        v20 = *(_QWORD *)(result + 224) + v7;
        v21 = v20 - a3 + (v19 >> 1);
        if (v21 < 1)
          goto LABEL_37;
        if (v21 >= v19)
          LODWORD(v22) = 0x3FFFFFFF;
        else
          v22 = (unint64_t)(*(_QWORD *)(result + 232) * v21) >> 32;
        v24 = v72 | v22;
        v25 = v20 - 0x1000000;
        v23 = 448;
      }
    }
    else
    {
      v15 = *(_QWORD *)(result + 216);
      v16 = v6 - *(_QWORD *)(result + 224);
      v17 = a3 - v16 + (v15 >> 1);
      if (v17 < 1)
        goto LABEL_37;
      if (v17 >= v15)
        LODWORD(v18) = 0x3FFFFFFF;
      else
        v18 = (unint64_t)(*(_QWORD *)(result + 232) * v17) >> 32;
      v24 = v72 | v18;
      v25 = v16 + 0x1000000;
      v23 = 512;
    }
    if (a2 >= v73)
      break;
    v26 = *(_QWORD *)(result + 192);
    v27 = v73 - *(_QWORD *)(result + 200);
    v28 = a2 - v27 + (v26 >> 1);
    if (v28 >= 1)
    {
      if (v28 < v26)
        v24 = ((v24 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v28) >> 32) >> 15)) | v72;
      v29 = v27 + 0x1000000;
      v30 = 32;
      goto LABEL_29;
    }
LABEL_37:
    --a4;
    a2 += v8;
    a3 += v9;
    v10 += 4;
    *(_BYTE *)++v11 = 0;
    if (!a4)
      return result;
  }
  if (a2 <= v74)
  {
    v30 = ((unint64_t)a2 >> 26) & 0x3C;
    v29 = a2;
    goto LABEL_29;
  }
  v31 = *(_QWORD *)(result + 192);
  v32 = *(_QWORD *)(result + 200) + v74;
  v33 = v32 - a2 + (v31 >> 1);
  if (v33 < 1)
    goto LABEL_37;
  if (v33 < v31)
    v24 = ((v24 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v33) >> 32) >> 15)) | v72;
  v29 = v32 - 0x1000000;
  v30 = 28;
LABEL_29:
  if (v24 < 0x400000)
    goto LABEL_37;
  v34 = v12 + SHIDWORD(v25) * (uint64_t)v4;
  v35 = v29 >> 32;
  v36 = v34 + 4 * v35;
  v37 = *(unsigned int **)(result + 32);
  if (v14 >= v36)
    v38 = (unsigned int *)(v34 + 4 * v35);
  else
    v38 = (unsigned int *)v14;
  if (v38 < v37)
    v38 = *(unsigned int **)(result + 32);
  v39 = *v38;
  if (!v5)
    goto LABEL_69;
  v40 = *(_DWORD *)(v5 + (v30 | v23));
LABEL_40:
  v41 = v40 & 0xF;
  v42 = HIBYTE(v40) & 3;
  switch(v41)
  {
    case 1:
      v59 = (unsigned int *)(v36 + SBYTE1(v40) * (uint64_t)v4);
      if (v14 < (unint64_t)v59)
        v59 = (unsigned int *)v14;
      if (v59 < v37)
        v59 = v37;
      v60 = interpolate_8888_19472[v42];
      v61 = v42 + 1;
      v57 = v39 - ((v60 & v39) >> v61);
      v62 = (v60 & *v59) >> v61;
LABEL_68:
      v39 = v57 + v62;
      break;
    case 2:
      v63 = (unsigned int *)(v36 + ((uint64_t)((unint64_t)HIWORD(v40) << 56) >> 54));
      if (v14 < (unint64_t)v63)
        v63 = (unsigned int *)v14;
      if (v63 < v37)
        v63 = v37;
      v64 = (v40 >> 28) & 3;
      v65 = interpolate_8888_19472[v64];
      v56 = v64 + 1;
      v57 = v39 - ((v65 & v39) >> v56);
      v58 = v65 & *v63;
LABEL_67:
      v62 = v58 >> v56;
      goto LABEL_68;
    case 3:
      v43 = (unint64_t)HIWORD(v40) << 56;
      v44 = (unsigned int *)(v36 + (v43 >> 54));
      if (v14 < (unint64_t)v44)
        v44 = (unsigned int *)v14;
      if (v44 < v37)
        v44 = v37;
      v45 = *v44;
      v46 = v36 + SBYTE1(v40) * (uint64_t)v4;
      if (v14 >= v46)
        v47 = (unsigned int *)(v36 + SBYTE1(v40) * (uint64_t)v4);
      else
        v47 = (unsigned int *)v14;
      if (v47 < v37)
        v47 = v37;
      v48 = *v47;
      v49 = (unsigned int *)(v46 + (v43 >> 54));
      if (v14 < (unint64_t)v49)
        v49 = (unsigned int *)v14;
      if (v49 < v37)
        v49 = v37;
      v50 = interpolate_8888_19472[v42];
      v51 = v42 + 1;
      v52 = v39 - ((v50 & v39) >> v51) + ((v50 & v48) >> v51);
      v53 = v45 - ((v50 & v45) >> v51) + ((v50 & *v49) >> v51);
      v54 = (v40 >> 28) & 3;
      v55 = interpolate_8888_19472[v54];
      v56 = v54 + 1;
      v57 = v52 - ((v52 & v55) >> v56);
      v58 = v53 & v55;
      goto LABEL_67;
  }
LABEL_69:
  v66 = 0;
  v67 = 0;
  a3 += v9;
  v68 = v7 - a3;
  a2 += v8;
  v69 = v74 - a2;
  while (1)
  {
    *(_DWORD *)(v10 + 4 + 4 * v66) = (v39 >> 17) & 0x7C00 | (v39 >> 14) & 0x3E0 | ((unsigned __int16)v39 >> 11) & 0xFFFFFF | (((v39 | v13) >> 3) << 27) | ((((v39 | v13) >> 5) & 7) << 24);
    *(_BYTE *)(v11 + 1 + v66) = v24 >> 22;
    if (a4 - 1 == (_DWORD)v66)
      return result;
    if (((v68 | v69 | (a3 - v6) | (a2 - v73)) & 0x8000000000000000) != 0)
    {
      v10 = v10 - v67 + 4;
      v11 += v66 + 1;
      a4 += ~(_DWORD)v66;
      if (a4)
        goto LABEL_5;
      return result;
    }
    v70 = v12 + SHIDWORD(a3) * (uint64_t)v4;
    v36 = v70 + 4 * (a2 >> 32);
    v37 = *(unsigned int **)(result + 32);
    if (v14 >= v36)
      v71 = (unsigned int *)(v70 + 4 * (a2 >> 32));
    else
      v71 = (unsigned int *)v14;
    if (v71 < v37)
      v71 = *(unsigned int **)(result + 32);
    v39 = *v71;
    if (v5)
    {
      v40 = *(_DWORD *)(v5 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
      if ((v40 & 0xF) != 0)
      {
        v10 = v10 - v67 + 4;
        v11 += v66 + 1;
        a4 += ~(_DWORD)v66;
        v24 = -1;
        goto LABEL_40;
      }
    }
    v67 -= 4;
    ++v66;
    a3 += v9;
    v68 -= v9;
    a2 += v8;
    v69 -= v8;
    v24 = -1;
  }
}

uint64_t rgb555_sample_ARGB32(uint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  int v42;
  int64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  int v50;
  char v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  int v55;
  char v56;
  unsigned int v57;
  unsigned int *v58;
  int v59;
  char v60;
  unsigned int v61;
  unsigned int *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;

  v4 = *(_DWORD *)(result + 24);
  v5 = *(_QWORD *)(result + 176);
  v6 = *(_QWORD *)(result + 72);
  v7 = *(_QWORD *)(result + 88);
  v72 = *(_QWORD *)(result + 80);
  v8 = *(_QWORD *)(result + 112);
  v9 = *(_QWORD *)(result + 120);
  v70 = *(_DWORD *)(result + 188);
  v10 = *(_QWORD *)(result + 152) - 4;
  v11 = *(_QWORD *)(result + 144) - 1;
  v12 = *(_QWORD *)(result + 32);
  if (*(_QWORD *)(result + 40))
    v13 = 0;
  else
    v13 = -16777216;
  v14 = v12 + ((*(_DWORD *)(result + 260) - 1) * v4) + 4 * *(unsigned int *)(result + 256) - 4;
  v71 = *(_QWORD *)(result + 64);
  while (1)
  {
LABEL_5:
    if ((uint64_t)a3 >= v6)
    {
      if ((uint64_t)a3 <= v7)
      {
        v23 = (a3 >> 22) & 0x3C0;
        v24 = 0x3FFFFFFF;
        HIDWORD(v25) = HIDWORD(a3);
      }
      else
      {
        v19 = *(_QWORD *)(result + 216);
        v20 = *(_QWORD *)(result + 224) + v7;
        v21 = v20 - a3 + (v19 >> 1);
        if (v21 < 1)
          goto LABEL_37;
        if (v21 >= v19)
          LODWORD(v22) = 0x3FFFFFFF;
        else
          v22 = (unint64_t)(*(_QWORD *)(result + 232) * v21) >> 32;
        v24 = v70 | v22;
        v25 = v20 - 0x1000000;
        v23 = 448;
      }
    }
    else
    {
      v15 = *(_QWORD *)(result + 216);
      v16 = v6 - *(_QWORD *)(result + 224);
      v17 = a3 - v16 + (v15 >> 1);
      if (v17 < 1)
        goto LABEL_37;
      if (v17 >= v15)
        LODWORD(v18) = 0x3FFFFFFF;
      else
        v18 = (unint64_t)(*(_QWORD *)(result + 232) * v17) >> 32;
      v24 = v70 | v18;
      v25 = v16 + 0x1000000;
      v23 = 512;
    }
    if (a2 >= v71)
      break;
    v26 = *(_QWORD *)(result + 192);
    v27 = v71 - *(_QWORD *)(result + 200);
    v28 = a2 - v27 + (v26 >> 1);
    if (v28 >= 1)
    {
      if (v28 < v26)
        v24 = ((v24 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v28) >> 32) >> 15)) | v70;
      v29 = v27 + 0x1000000;
      v30 = 32;
      goto LABEL_29;
    }
LABEL_37:
    --a4;
    a2 += v8;
    a3 += v9;
    v10 += 4;
    *(_BYTE *)++v11 = 0;
    if (!a4)
      return result;
  }
  if (a2 <= v72)
  {
    v30 = ((unint64_t)a2 >> 26) & 0x3C;
    v29 = a2;
    goto LABEL_29;
  }
  v31 = *(_QWORD *)(result + 192);
  v32 = *(_QWORD *)(result + 200) + v72;
  v33 = v32 - a2 + (v31 >> 1);
  if (v33 < 1)
    goto LABEL_37;
  if (v33 < v31)
    v24 = ((v24 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v33) >> 32) >> 15)) | v70;
  v29 = v32 - 0x1000000;
  v30 = 28;
LABEL_29:
  if (v24 < 0x400000)
    goto LABEL_37;
  v34 = v12 + SHIDWORD(v25) * (uint64_t)v4;
  v35 = v29 >> 32;
  v36 = v34 + 4 * v35;
  v37 = *(unsigned int **)(result + 32);
  if (v14 >= v36)
    v38 = (unsigned int *)(v34 + 4 * v35);
  else
    v38 = (unsigned int *)v14;
  if (v38 < v37)
    v38 = *(unsigned int **)(result + 32);
  v39 = bswap32(*v38);
  if (!v5)
    goto LABEL_69;
  v40 = *(_DWORD *)(v5 + (v30 | v23));
LABEL_40:
  v41 = v40 & 0xF;
  v42 = HIBYTE(v40) & 3;
  switch(v41)
  {
    case 1:
      v58 = (unsigned int *)(v36 + SBYTE1(v40) * (uint64_t)v4);
      if (v14 < (unint64_t)v58)
        v58 = (unsigned int *)v14;
      if (v58 < v37)
        v58 = v37;
      v59 = interpolate_8888_19472[v42];
      v60 = v42 + 1;
      v57 = v39 - ((v59 & v39) >> v60);
      v61 = (bswap32(*v58) & v59) >> v60;
LABEL_68:
      v39 = v57 + v61;
      break;
    case 2:
      v62 = (unsigned int *)(v36 + ((uint64_t)((unint64_t)HIWORD(v40) << 56) >> 54));
      if (v14 < (unint64_t)v62)
        v62 = (unsigned int *)v14;
      if (v62 < v37)
        v62 = v37;
      v53 = bswap32(*v62);
      v63 = (v40 >> 28) & 3;
      v55 = interpolate_8888_19472[v63];
      v56 = v63 + 1;
      v57 = v39 - ((v55 & v39) >> v56);
LABEL_67:
      v61 = (v53 & v55) >> v56;
      goto LABEL_68;
    case 3:
      v43 = (unint64_t)HIWORD(v40) << 56;
      v44 = (unsigned int *)(v36 + (v43 >> 54));
      if (v14 < (unint64_t)v44)
        v44 = (unsigned int *)v14;
      if (v44 < v37)
        v44 = v37;
      v45 = bswap32(*v44);
      v46 = v36 + SBYTE1(v40) * (uint64_t)v4;
      if (v14 >= v46)
        v47 = (unsigned int *)(v36 + SBYTE1(v40) * (uint64_t)v4);
      else
        v47 = (unsigned int *)v14;
      if (v47 < v37)
        v47 = v37;
      v48 = bswap32(*v47);
      v49 = (unsigned int *)(v46 + (v43 >> 54));
      if (v14 < (unint64_t)v49)
        v49 = (unsigned int *)v14;
      if (v49 < v37)
        v49 = v37;
      v50 = interpolate_8888_19472[v42];
      v51 = v42 + 1;
      v52 = v39 - ((v50 & v39) >> v51) + ((v50 & v48) >> v51);
      v53 = v45 - ((v50 & v45) >> v51) + ((bswap32(*v49) & v50) >> v51);
      v54 = (v40 >> 28) & 3;
      v55 = interpolate_8888_19472[v54];
      v56 = v54 + 1;
      v57 = v52 - ((v52 & v55) >> v56);
      goto LABEL_67;
  }
LABEL_69:
  v64 = 0;
  v65 = 0;
  a3 += v9;
  v66 = v7 - a3;
  a2 += v8;
  v67 = v72 - a2;
  while (1)
  {
    *(_DWORD *)(v10 + 4 + 4 * v64) = (v39 | v13) & 0xF8000000 | (v39 >> 9) & 0x7C00 | ((unsigned __int16)v39 >> 6) & 0xFFE0 | (v39 >> 3) | ((v39 | v13) >> 29 << 24);
    *(_BYTE *)(v11 + 1 + v64) = v24 >> 22;
    if (a4 - 1 == (_DWORD)v64)
      return result;
    if (((v66 | v67 | (a3 - v6) | (a2 - v71)) & 0x8000000000000000) != 0)
    {
      v10 = v10 - v65 + 4;
      v11 += v64 + 1;
      a4 += ~(_DWORD)v64;
      if (a4)
        goto LABEL_5;
      return result;
    }
    v68 = v12 + SHIDWORD(a3) * (uint64_t)v4;
    v36 = v68 + 4 * (a2 >> 32);
    v37 = *(unsigned int **)(result + 32);
    if (v14 >= v36)
      v69 = (unsigned int *)(v68 + 4 * (a2 >> 32));
    else
      v69 = (unsigned int *)v14;
    if (v69 < v37)
      v69 = *(unsigned int **)(result + 32);
    v39 = bswap32(*v69);
    if (v5)
    {
      v40 = *(_DWORD *)(v5 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
      if ((v40 & 0xF) != 0)
      {
        v10 = v10 - v65 + 4;
        v11 += v64 + 1;
        a4 += ~(_DWORD)v64;
        v24 = -1;
        goto LABEL_40;
      }
    }
    v65 -= 4;
    ++v64;
    a3 += v9;
    v66 -= v9;
    a2 += v8;
    v67 -= v8;
    v24 = -1;
  }
}

uint64_t rgb555_sample_argb32(uint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  int v42;
  int64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  char v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  int v55;
  char v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  char v61;
  unsigned int v62;
  unsigned int *v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;

  v4 = *(_DWORD *)(result + 24);
  v5 = *(_QWORD *)(result + 176);
  v6 = *(_QWORD *)(result + 72);
  v7 = *(_QWORD *)(result + 88);
  v74 = *(_QWORD *)(result + 80);
  v8 = *(_QWORD *)(result + 112);
  v9 = *(_QWORD *)(result + 120);
  v72 = *(_DWORD *)(result + 188);
  v10 = *(_QWORD *)(result + 152) - 4;
  v11 = *(_QWORD *)(result + 144) - 1;
  v12 = *(_QWORD *)(result + 32);
  if (*(_QWORD *)(result + 40))
    v13 = 0;
  else
    v13 = -16777216;
  v14 = v12 + ((*(_DWORD *)(result + 260) - 1) * v4) + 4 * *(unsigned int *)(result + 256) - 4;
  v73 = *(_QWORD *)(result + 64);
  while (1)
  {
LABEL_5:
    if ((uint64_t)a3 >= v6)
    {
      if ((uint64_t)a3 <= v7)
      {
        v23 = (a3 >> 22) & 0x3C0;
        v24 = 0x3FFFFFFF;
        HIDWORD(v25) = HIDWORD(a3);
      }
      else
      {
        v19 = *(_QWORD *)(result + 216);
        v20 = *(_QWORD *)(result + 224) + v7;
        v21 = v20 - a3 + (v19 >> 1);
        if (v21 < 1)
          goto LABEL_37;
        if (v21 >= v19)
          LODWORD(v22) = 0x3FFFFFFF;
        else
          v22 = (unint64_t)(*(_QWORD *)(result + 232) * v21) >> 32;
        v24 = v72 | v22;
        v25 = v20 - 0x1000000;
        v23 = 448;
      }
    }
    else
    {
      v15 = *(_QWORD *)(result + 216);
      v16 = v6 - *(_QWORD *)(result + 224);
      v17 = a3 - v16 + (v15 >> 1);
      if (v17 < 1)
        goto LABEL_37;
      if (v17 >= v15)
        LODWORD(v18) = 0x3FFFFFFF;
      else
        v18 = (unint64_t)(*(_QWORD *)(result + 232) * v17) >> 32;
      v24 = v72 | v18;
      v25 = v16 + 0x1000000;
      v23 = 512;
    }
    if (a2 >= v73)
      break;
    v26 = *(_QWORD *)(result + 192);
    v27 = v73 - *(_QWORD *)(result + 200);
    v28 = a2 - v27 + (v26 >> 1);
    if (v28 >= 1)
    {
      if (v28 < v26)
        v24 = ((v24 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v28) >> 32) >> 15)) | v72;
      v29 = v27 + 0x1000000;
      v30 = 32;
      goto LABEL_29;
    }
LABEL_37:
    --a4;
    a2 += v8;
    a3 += v9;
    v10 += 4;
    *(_BYTE *)++v11 = 0;
    if (!a4)
      return result;
  }
  if (a2 <= v74)
  {
    v30 = ((unint64_t)a2 >> 26) & 0x3C;
    v29 = a2;
    goto LABEL_29;
  }
  v31 = *(_QWORD *)(result + 192);
  v32 = *(_QWORD *)(result + 200) + v74;
  v33 = v32 - a2 + (v31 >> 1);
  if (v33 < 1)
    goto LABEL_37;
  if (v33 < v31)
    v24 = ((v24 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v33) >> 32) >> 15)) | v72;
  v29 = v32 - 0x1000000;
  v30 = 28;
LABEL_29:
  if (v24 < 0x400000)
    goto LABEL_37;
  v34 = v12 + SHIDWORD(v25) * (uint64_t)v4;
  v35 = v29 >> 32;
  v36 = v34 + 4 * v35;
  v37 = *(unsigned int **)(result + 32);
  if (v14 >= v36)
    v38 = (unsigned int *)(v34 + 4 * v35);
  else
    v38 = (unsigned int *)v14;
  if (v38 < v37)
    v38 = *(unsigned int **)(result + 32);
  v39 = *v38;
  if (!v5)
    goto LABEL_69;
  v40 = *(_DWORD *)(v5 + (v30 | v23));
LABEL_40:
  v41 = v40 & 0xF;
  v42 = HIBYTE(v40) & 3;
  switch(v41)
  {
    case 1:
      v59 = (unsigned int *)(v36 + SBYTE1(v40) * (uint64_t)v4);
      if (v14 < (unint64_t)v59)
        v59 = (unsigned int *)v14;
      if (v59 < v37)
        v59 = v37;
      v60 = interpolate_8888_19472[v42];
      v61 = v42 + 1;
      v57 = v39 - ((v60 & v39) >> v61);
      v62 = (v60 & *v59) >> v61;
LABEL_68:
      v39 = v57 + v62;
      break;
    case 2:
      v63 = (unsigned int *)(v36 + ((uint64_t)((unint64_t)HIWORD(v40) << 56) >> 54));
      if (v14 < (unint64_t)v63)
        v63 = (unsigned int *)v14;
      if (v63 < v37)
        v63 = v37;
      v64 = (v40 >> 28) & 3;
      v65 = interpolate_8888_19472[v64];
      v56 = v64 + 1;
      v57 = v39 - ((v65 & v39) >> v56);
      v58 = v65 & *v63;
LABEL_67:
      v62 = v58 >> v56;
      goto LABEL_68;
    case 3:
      v43 = (unint64_t)HIWORD(v40) << 56;
      v44 = (unsigned int *)(v36 + (v43 >> 54));
      if (v14 < (unint64_t)v44)
        v44 = (unsigned int *)v14;
      if (v44 < v37)
        v44 = v37;
      v45 = *v44;
      v46 = v36 + SBYTE1(v40) * (uint64_t)v4;
      if (v14 >= v46)
        v47 = (unsigned int *)(v36 + SBYTE1(v40) * (uint64_t)v4);
      else
        v47 = (unsigned int *)v14;
      if (v47 < v37)
        v47 = v37;
      v48 = *v47;
      v49 = (unsigned int *)(v46 + (v43 >> 54));
      if (v14 < (unint64_t)v49)
        v49 = (unsigned int *)v14;
      if (v49 < v37)
        v49 = v37;
      v50 = interpolate_8888_19472[v42];
      v51 = v42 + 1;
      v52 = v39 - ((v50 & v39) >> v51) + ((v50 & v48) >> v51);
      v53 = v45 - ((v50 & v45) >> v51) + ((v50 & *v49) >> v51);
      v54 = (v40 >> 28) & 3;
      v55 = interpolate_8888_19472[v54];
      v56 = v54 + 1;
      v57 = v52 - ((v52 & v55) >> v56);
      v58 = v53 & v55;
      goto LABEL_67;
  }
LABEL_69:
  v66 = 0;
  v67 = 0;
  a3 += v9;
  v68 = v7 - a3;
  a2 += v8;
  v69 = v74 - a2;
  while (1)
  {
    *(_DWORD *)(v10 + 4 + 4 * v66) = (v39 | v13) & 0xF8000000 | (v39 >> 9) & 0x7C00 | ((unsigned __int16)v39 >> 6) & 0xFFE0 | (v39 >> 3) | ((v39 | v13) >> 29 << 24);
    *(_BYTE *)(v11 + 1 + v66) = v24 >> 22;
    if (a4 - 1 == (_DWORD)v66)
      return result;
    if (((v68 | v69 | (a3 - v6) | (a2 - v73)) & 0x8000000000000000) != 0)
    {
      v10 = v10 - v67 + 4;
      v11 += v66 + 1;
      a4 += ~(_DWORD)v66;
      if (a4)
        goto LABEL_5;
      return result;
    }
    v70 = v12 + SHIDWORD(a3) * (uint64_t)v4;
    v36 = v70 + 4 * (a2 >> 32);
    v37 = *(unsigned int **)(result + 32);
    if (v14 >= v36)
      v71 = (unsigned int *)(v70 + 4 * (a2 >> 32));
    else
      v71 = (unsigned int *)v14;
    if (v71 < v37)
      v71 = *(unsigned int **)(result + 32);
    v39 = *v71;
    if (v5)
    {
      v40 = *(_DWORD *)(v5 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
      if ((v40 & 0xF) != 0)
      {
        v10 = v10 - v67 + 4;
        v11 += v66 + 1;
        a4 += ~(_DWORD)v66;
        v24 = -1;
        goto LABEL_40;
      }
    }
    v67 -= 4;
    ++v66;
    a3 += v9;
    v68 -= v9;
    a2 += v8;
    v69 -= v8;
    v24 = -1;
  }
}

uint64_t rgb555_sample_CMYK32(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  int v42;
  unsigned int v43;
  int v44;
  int v45;
  int64_t v46;
  unsigned int *v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int *v50;
  unint64_t v51;
  unsigned int *v52;
  unint64_t v53;
  unsigned __int8 *v54;
  unint64_t v55;
  unint64_t v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  uint64_t v59;
  char v60;
  unint64_t v61;
  int v62;
  unint64_t v63;
  char v64;
  unint64_t v65;
  unint64_t v66;
  unsigned int *v67;
  unint64_t v68;
  unsigned __int8 *v69;
  uint64_t v70;
  char v71;
  unint64_t v72;
  unsigned int *v73;
  uint64_t v74;
  unsigned __int8 *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int *v82;
  unsigned __int8 *v83;
  unint64_t v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  int v93;
  unsigned __int8 *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v6 = *(_QWORD *)(result + 40);
  v7 = *(_QWORD *)(result + 176);
  v87 = *(_QWORD *)(result + 80);
  v88 = *(_QWORD *)(result + 88);
  v101 = *(_QWORD *)(result + 120);
  v102 = *(_QWORD *)(result + 112);
  v8 = (unsigned int *)(*(_QWORD *)(result + 152) - 4);
  v91 = *(_QWORD *)(result + 144) - 1;
  v9 = 0xFF00000000;
  if (v6)
    v9 = 0;
  v96 = v9;
  v10 = *(_DWORD *)(result + 260) - 1;
  v99 = *(_DWORD *)(result + 24);
  v95 = *(_QWORD *)(result + 32);
  v11 = *(unsigned int *)(result + 256);
  v86 = *(_DWORD *)(result + 188);
  v93 = *(_DWORD *)(result + 28);
  v94 = (unsigned __int8 *)(v6 + (v11 - 1) + (v10 * v93));
  v100 = v95 + (v10 * v99) + 4 * v11 - 8;
  v89 = *(_QWORD *)(result + 64);
  v90 = *(_QWORD *)(result + 72);
  v97 = *(_QWORD *)(result + 40);
  v98 = result;
  while (1)
  {
    if (a3 >= v90)
    {
      if (a3 <= v88)
      {
        v22 = ((unint64_t)a3 >> 22) & 0x3C0;
        v23 = 0x3FFFFFFF;
        v24 = a3;
        v15 = a4;
        v16 = v89;
      }
      else
      {
        v18 = *(_QWORD *)(result + 216);
        v19 = *(_QWORD *)(result + 224) + v88;
        v20 = v19 - a3 + (v18 >> 1);
        v15 = a4;
        v16 = v89;
        if (v20 < 1)
          goto LABEL_40;
        if (v20 >= v18)
          LODWORD(v21) = 0x3FFFFFFF;
        else
          v21 = (unint64_t)(*(_QWORD *)(result + 232) * v20) >> 32;
        v23 = v86 | v21;
        v24 = v19 - 0x1000000;
        v22 = 448;
      }
    }
    else
    {
      v12 = *(_QWORD *)(result + 216);
      v13 = v90 - *(_QWORD *)(result + 224);
      v14 = a3 - v13 + (v12 >> 1);
      v15 = a4;
      v16 = v89;
      if (v14 < 1)
        goto LABEL_40;
      if (v14 >= v12)
        LODWORD(v17) = 0x3FFFFFFF;
      else
        v17 = (unint64_t)(*(_QWORD *)(result + 232) * v14) >> 32;
      v23 = v86 | v17;
      v24 = v13 + 0x1000000;
      v22 = 512;
    }
    if (a2 >= v16)
    {
      if (a2 <= v87)
      {
        v29 = ((unint64_t)a2 >> 26) & 0x3C;
        v28 = a2;
      }
      else
      {
        v30 = *(_QWORD *)(result + 192);
        v31 = *(_QWORD *)(result + 200) + v87;
        v32 = v31 - a2 + (v30 >> 1);
        if (v32 < 1)
          goto LABEL_40;
        if (v32 < v30)
          v23 = ((v23 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v32) >> 32) >> 15)) | v86;
        v28 = v31 - 0x1000000;
        v29 = 28;
      }
    }
    else
    {
      v25 = *(_QWORD *)(result + 192);
      v26 = v16 - *(_QWORD *)(result + 200);
      v27 = a2 - v26 + (v25 >> 1);
      if (v27 < 1)
        goto LABEL_40;
      if (v27 < v25)
        v23 = ((v23 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v27) >> 32) >> 15)) | v86;
      v28 = v26 + 0x1000000;
      v29 = 32;
    }
    if (v23 >= 0x400000)
      break;
LABEL_40:
    v42 = v15 - 1;
    a2 += v102;
    a3 += v101;
    ++v8;
    *(_BYTE *)++v91 = 0;
LABEL_41:
    a4 = v42;
    if (!v42)
      return result;
  }
  v33 = v24 >> 32;
  v34 = v28 >> 32;
  v35 = v95 + SHIDWORD(v24) * (uint64_t)v99 + 4 * (v28 >> 32);
  v36 = *(unsigned int **)(result + 32);
  v37 = (unsigned int *)v100;
  if (v100 >= v35)
    v37 = (unsigned int *)v35;
  if (v37 < v36)
    v37 = *(unsigned int **)(result + 32);
  v38 = bswap32(*v37);
  if (v6)
  {
    v39 = v6 + (int)v33 * (uint64_t)v93 + v34;
    v40 = *(unsigned __int8 **)(result + 40);
    v41 = v94;
    v92 = v39;
    if ((unint64_t)v94 >= v39)
      v41 = (unsigned __int8 *)v39;
    if (v41 >= v40)
      v40 = v41;
    v38 |= (unint64_t)*v40 << 32;
    if (!v7)
      goto LABEL_102;
  }
  else
  {
    v92 = 0;
    if (!v7)
      goto LABEL_102;
  }
  v43 = *(_DWORD *)(v7 + (v29 | v22));
LABEL_46:
  v44 = v43 & 0xF;
  v45 = HIBYTE(v43) & 3;
  if (v44 == 1)
  {
    v67 = (unsigned int *)(v35 + SBYTE1(v43) * (uint64_t)v99);
    if (v100 < (unint64_t)v67)
      v67 = (unsigned int *)v100;
    if (v67 >= v36)
      v36 = v67;
    v68 = bswap32(*v36);
    if (v6)
    {
      v69 = (unsigned __int8 *)(v92 + SBYTE1(v43) * (uint64_t)v93);
      if (v94 < v69)
        v69 = v94;
      if ((unint64_t)v69 < *(_QWORD *)(result + 40))
        v69 = *(unsigned __int8 **)(result + 40);
      v68 |= (unint64_t)*v69 << 32;
    }
    v70 = interpolate_cif10a[v45];
    v71 = v45 + 1;
    v65 = v38 - ((v70 & v38) >> v71);
    v72 = (v70 & v68) >> v71;
  }
  else
  {
    if (v44 == 2)
    {
      v73 = (unsigned int *)(v35 + ((uint64_t)((unint64_t)HIWORD(v43) << 56) >> 54));
      if (v100 < (unint64_t)v73)
        v73 = (unsigned int *)v100;
      if (v73 >= v36)
        v36 = v73;
      v74 = bswap32(*v36);
      if (v6)
      {
        v75 = (unsigned __int8 *)(v92 + SBYTE2(v43));
        if (v94 < v75)
          v75 = v94;
        if ((unint64_t)v75 < *(_QWORD *)(result + 40))
          v75 = *(unsigned __int8 **)(result + 40);
        v74 |= (unint64_t)*v75 << 32;
      }
      v76 = (v43 >> 28) & 3;
      v77 = interpolate_cif10a[v76];
      v64 = v76 + 1;
      v65 = v38 - ((v77 & v38) >> v64);
      v66 = v77 & v74;
    }
    else
    {
      if (v44 != 3)
        goto LABEL_102;
      v46 = (unint64_t)HIWORD(v43) << 56;
      v47 = (unsigned int *)(v35 + (v46 >> 54));
      if (v100 < (unint64_t)v47)
        v47 = (unsigned int *)v100;
      if (v47 < v36)
        v47 = v36;
      v48 = bswap32(*v47);
      v49 = v35 + SBYTE1(v43) * (uint64_t)v99;
      if (v100 >= v49)
        v50 = (unsigned int *)(v35 + SBYTE1(v43) * (uint64_t)v99);
      else
        v50 = (unsigned int *)v100;
      if (v50 < v36)
        v50 = v36;
      v51 = bswap32(*v50);
      v52 = (unsigned int *)(v49 + (v46 >> 54));
      if (v100 < (unint64_t)v52)
        v52 = (unsigned int *)v100;
      if (v52 >= v36)
        v36 = v52;
      v53 = bswap32(*v36);
      if (v6)
      {
        v54 = (unsigned __int8 *)(v92 + SBYTE2(v43));
        v55 = *(_QWORD *)(result + 40);
        if (v94 < v54)
          v54 = v94;
        if ((unint64_t)v54 < v55)
          v54 = *(unsigned __int8 **)(result + 40);
        v48 |= (unint64_t)*v54 << 32;
        v56 = v92 + SBYTE1(v43) * (uint64_t)v93;
        if ((unint64_t)v94 >= v56)
          v57 = (unsigned __int8 *)(v92 + SBYTE1(v43) * (uint64_t)v93);
        else
          v57 = v94;
        if ((unint64_t)v57 < v55)
          v57 = *(unsigned __int8 **)(result + 40);
        v51 |= (unint64_t)*v57 << 32;
        v58 = (unsigned __int8 *)(v56 + SBYTE2(v43));
        if (v94 < v58)
          v58 = v94;
        if ((unint64_t)v58 < v55)
          v58 = *(unsigned __int8 **)(result + 40);
        v53 |= (unint64_t)*v58 << 32;
      }
      v59 = interpolate_cif10a[v45];
      v60 = v45 + 1;
      v61 = v38 - ((v59 & v38) >> v60) + ((v59 & v51) >> v60);
      v62 = (v43 >> 28) & 3;
      v63 = interpolate_cif10a[v62];
      v64 = v62 + 1;
      v65 = v61 - ((v61 & v63) >> v64);
      v66 = (v48 - ((v59 & v48) >> v60) + ((v59 & v53) >> v60)) & v63;
    }
    v72 = v66 >> v64;
  }
  v38 = v65 + v72;
LABEL_102:
  v78 = 0;
  ++v8;
  v85 = v15;
  v79 = v15 - 1;
  a3 += v101;
  v80 = v88 - a3;
  a2 += v102;
  v81 = v87 - a2;
  while (1)
  {
    CMYK32(v8, v38 | v96);
    *(_BYTE *)(v91 + 1 + v78) = v23 >> 22;
    v6 = v97;
    result = v98;
    if (v79 == (_DWORD)v78)
      return result;
    if ((v80 | v81 | (a3 - v90) | (a2 - v89)) < 0)
    {
      v91 += v78 + 1;
      v42 = ~(_DWORD)v78 + v85;
      goto LABEL_41;
    }
    v35 = v95 + SHIDWORD(a3) * (uint64_t)v99 + 4 * (a2 >> 32);
    v36 = *(unsigned int **)(v98 + 32);
    v82 = (unsigned int *)v100;
    if (v100 >= v35)
      v82 = (unsigned int *)(v95 + SHIDWORD(a3) * (uint64_t)v99 + 4 * (a2 >> 32));
    if (v82 < v36)
      v82 = *(unsigned int **)(v98 + 32);
    v38 = bswap32(*v82);
    if (v97)
    {
      v83 = *(unsigned __int8 **)(v98 + 40);
      v84 = (unint64_t)v94;
      v92 = v97 + SHIDWORD(a3) * (uint64_t)v93 + (a2 >> 32);
      if ((unint64_t)v94 >= v92)
        v84 = v97 + SHIDWORD(a3) * (uint64_t)v93 + (a2 >> 32);
      if (v84 >= (unint64_t)v83)
        v83 = (unsigned __int8 *)v84;
      v38 |= (unint64_t)*v83 << 32;
    }
    if (v7)
    {
      v43 = *(_DWORD *)(v7 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      if ((v43 & 0xF) != 0)
      {
        v91 += v78 + 1;
        v15 = ~(_DWORD)v78 + v85;
        v23 = -1;
        goto LABEL_46;
      }
    }
    ++v8;
    ++v78;
    a3 += v101;
    v80 -= v101;
    a2 += v102;
    v81 -= v102;
    v23 = -1;
  }
}

uint64_t rgb555_sample_cmyk32(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  int v42;
  unsigned int v43;
  int v44;
  int v45;
  int64_t v46;
  unsigned int *v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int *v50;
  unint64_t v51;
  unsigned int *v52;
  unint64_t v53;
  unsigned __int8 *v54;
  unint64_t v55;
  unint64_t v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  uint64_t v59;
  char v60;
  unint64_t v61;
  int v62;
  unint64_t v63;
  char v64;
  unint64_t v65;
  unint64_t v66;
  unsigned int *v67;
  unint64_t v68;
  unsigned __int8 *v69;
  uint64_t v70;
  char v71;
  unint64_t v72;
  unsigned int *v73;
  uint64_t v74;
  unsigned __int8 *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int *v82;
  unsigned __int8 *v83;
  unint64_t v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  int v93;
  unsigned __int8 *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v6 = *(_QWORD *)(result + 40);
  v7 = *(_QWORD *)(result + 176);
  v87 = *(_QWORD *)(result + 80);
  v88 = *(_QWORD *)(result + 88);
  v101 = *(_QWORD *)(result + 120);
  v102 = *(_QWORD *)(result + 112);
  v8 = (unsigned int *)(*(_QWORD *)(result + 152) - 4);
  v91 = *(_QWORD *)(result + 144) - 1;
  v9 = 0xFF00000000;
  if (v6)
    v9 = 0;
  v96 = v9;
  v10 = *(_DWORD *)(result + 260) - 1;
  v99 = *(_DWORD *)(result + 24);
  v95 = *(_QWORD *)(result + 32);
  v11 = *(unsigned int *)(result + 256);
  v86 = *(_DWORD *)(result + 188);
  v93 = *(_DWORD *)(result + 28);
  v94 = (unsigned __int8 *)(v6 + (v11 - 1) + (v10 * v93));
  v100 = v95 + (v10 * v99) + 4 * v11 - 8;
  v89 = *(_QWORD *)(result + 64);
  v90 = *(_QWORD *)(result + 72);
  v97 = *(_QWORD *)(result + 40);
  v98 = result;
  while (1)
  {
    if (a3 >= v90)
    {
      if (a3 <= v88)
      {
        v22 = ((unint64_t)a3 >> 22) & 0x3C0;
        v23 = 0x3FFFFFFF;
        v24 = a3;
        v15 = a4;
        v16 = v89;
      }
      else
      {
        v18 = *(_QWORD *)(result + 216);
        v19 = *(_QWORD *)(result + 224) + v88;
        v20 = v19 - a3 + (v18 >> 1);
        v15 = a4;
        v16 = v89;
        if (v20 < 1)
          goto LABEL_40;
        if (v20 >= v18)
          LODWORD(v21) = 0x3FFFFFFF;
        else
          v21 = (unint64_t)(*(_QWORD *)(result + 232) * v20) >> 32;
        v23 = v86 | v21;
        v24 = v19 - 0x1000000;
        v22 = 448;
      }
    }
    else
    {
      v12 = *(_QWORD *)(result + 216);
      v13 = v90 - *(_QWORD *)(result + 224);
      v14 = a3 - v13 + (v12 >> 1);
      v15 = a4;
      v16 = v89;
      if (v14 < 1)
        goto LABEL_40;
      if (v14 >= v12)
        LODWORD(v17) = 0x3FFFFFFF;
      else
        v17 = (unint64_t)(*(_QWORD *)(result + 232) * v14) >> 32;
      v23 = v86 | v17;
      v24 = v13 + 0x1000000;
      v22 = 512;
    }
    if (a2 >= v16)
    {
      if (a2 <= v87)
      {
        v29 = ((unint64_t)a2 >> 26) & 0x3C;
        v28 = a2;
      }
      else
      {
        v30 = *(_QWORD *)(result + 192);
        v31 = *(_QWORD *)(result + 200) + v87;
        v32 = v31 - a2 + (v30 >> 1);
        if (v32 < 1)
          goto LABEL_40;
        if (v32 < v30)
          v23 = ((v23 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v32) >> 32) >> 15)) | v86;
        v28 = v31 - 0x1000000;
        v29 = 28;
      }
    }
    else
    {
      v25 = *(_QWORD *)(result + 192);
      v26 = v16 - *(_QWORD *)(result + 200);
      v27 = a2 - v26 + (v25 >> 1);
      if (v27 < 1)
        goto LABEL_40;
      if (v27 < v25)
        v23 = ((v23 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v27) >> 32) >> 15)) | v86;
      v28 = v26 + 0x1000000;
      v29 = 32;
    }
    if (v23 >= 0x400000)
      break;
LABEL_40:
    v42 = v15 - 1;
    a2 += v102;
    a3 += v101;
    ++v8;
    *(_BYTE *)++v91 = 0;
LABEL_41:
    a4 = v42;
    if (!v42)
      return result;
  }
  v33 = v24 >> 32;
  v34 = v28 >> 32;
  v35 = v95 + SHIDWORD(v24) * (uint64_t)v99 + 4 * (v28 >> 32);
  v36 = *(unsigned int **)(result + 32);
  v37 = (unsigned int *)v100;
  if (v100 >= v35)
    v37 = (unsigned int *)v35;
  if (v37 < v36)
    v37 = *(unsigned int **)(result + 32);
  v38 = *v37;
  if (v6)
  {
    v39 = v6 + (int)v33 * (uint64_t)v93 + v34;
    v40 = *(unsigned __int8 **)(result + 40);
    v41 = v94;
    v92 = v39;
    if ((unint64_t)v94 >= v39)
      v41 = (unsigned __int8 *)v39;
    if (v41 >= v40)
      v40 = v41;
    v38 |= (unint64_t)*v40 << 32;
    if (!v7)
      goto LABEL_102;
  }
  else
  {
    v92 = 0;
    if (!v7)
      goto LABEL_102;
  }
  v43 = *(_DWORD *)(v7 + (v29 | v22));
LABEL_46:
  v44 = v43 & 0xF;
  v45 = HIBYTE(v43) & 3;
  if (v44 == 1)
  {
    v67 = (unsigned int *)(v35 + SBYTE1(v43) * (uint64_t)v99);
    if (v100 < (unint64_t)v67)
      v67 = (unsigned int *)v100;
    if (v67 >= v36)
      v36 = v67;
    v68 = *v36;
    if (v6)
    {
      v69 = (unsigned __int8 *)(v92 + SBYTE1(v43) * (uint64_t)v93);
      if (v94 < v69)
        v69 = v94;
      if ((unint64_t)v69 < *(_QWORD *)(result + 40))
        v69 = *(unsigned __int8 **)(result + 40);
      v68 |= (unint64_t)*v69 << 32;
    }
    v70 = interpolate_cif10a[v45];
    v71 = v45 + 1;
    v65 = v38 - ((v70 & v38) >> v71);
    v72 = (v70 & v68) >> v71;
  }
  else
  {
    if (v44 == 2)
    {
      v73 = (unsigned int *)(v35 + ((uint64_t)((unint64_t)HIWORD(v43) << 56) >> 54));
      if (v100 < (unint64_t)v73)
        v73 = (unsigned int *)v100;
      if (v73 >= v36)
        v36 = v73;
      v74 = *v36;
      if (v6)
      {
        v75 = (unsigned __int8 *)(v92 + SBYTE2(v43));
        if (v94 < v75)
          v75 = v94;
        if ((unint64_t)v75 < *(_QWORD *)(result + 40))
          v75 = *(unsigned __int8 **)(result + 40);
        v74 |= (unint64_t)*v75 << 32;
      }
      v76 = (v43 >> 28) & 3;
      v77 = interpolate_cif10a[v76];
      v64 = v76 + 1;
      v65 = v38 - ((v77 & v38) >> v64);
      v66 = v77 & v74;
    }
    else
    {
      if (v44 != 3)
        goto LABEL_102;
      v46 = (unint64_t)HIWORD(v43) << 56;
      v47 = (unsigned int *)(v35 + (v46 >> 54));
      if (v100 < (unint64_t)v47)
        v47 = (unsigned int *)v100;
      if (v47 < v36)
        v47 = v36;
      v48 = *v47;
      v49 = v35 + SBYTE1(v43) * (uint64_t)v99;
      if (v100 >= v49)
        v50 = (unsigned int *)(v35 + SBYTE1(v43) * (uint64_t)v99);
      else
        v50 = (unsigned int *)v100;
      if (v50 < v36)
        v50 = v36;
      v51 = *v50;
      v52 = (unsigned int *)(v49 + (v46 >> 54));
      if (v100 < (unint64_t)v52)
        v52 = (unsigned int *)v100;
      if (v52 >= v36)
        v36 = v52;
      v53 = *v36;
      if (v6)
      {
        v54 = (unsigned __int8 *)(v92 + SBYTE2(v43));
        v55 = *(_QWORD *)(result + 40);
        if (v94 < v54)
          v54 = v94;
        if ((unint64_t)v54 < v55)
          v54 = *(unsigned __int8 **)(result + 40);
        v48 |= (unint64_t)*v54 << 32;
        v56 = v92 + SBYTE1(v43) * (uint64_t)v93;
        if ((unint64_t)v94 >= v56)
          v57 = (unsigned __int8 *)(v92 + SBYTE1(v43) * (uint64_t)v93);
        else
          v57 = v94;
        if ((unint64_t)v57 < v55)
          v57 = *(unsigned __int8 **)(result + 40);
        v51 |= (unint64_t)*v57 << 32;
        v58 = (unsigned __int8 *)(v56 + SBYTE2(v43));
        if (v94 < v58)
          v58 = v94;
        if ((unint64_t)v58 < v55)
          v58 = *(unsigned __int8 **)(result + 40);
        v53 |= (unint64_t)*v58 << 32;
      }
      v59 = interpolate_cif10a[v45];
      v60 = v45 + 1;
      v61 = v38 - ((v59 & v38) >> v60) + ((v59 & v51) >> v60);
      v62 = (v43 >> 28) & 3;
      v63 = interpolate_cif10a[v62];
      v64 = v62 + 1;
      v65 = v61 - ((v61 & v63) >> v64);
      v66 = (v48 - ((v59 & v48) >> v60) + ((v59 & v53) >> v60)) & v63;
    }
    v72 = v66 >> v64;
  }
  v38 = v65 + v72;
LABEL_102:
  v78 = 0;
  ++v8;
  v85 = v15;
  v79 = v15 - 1;
  a3 += v101;
  v80 = v88 - a3;
  a2 += v102;
  v81 = v87 - a2;
  while (1)
  {
    CMYK32(v8, v38 | v96);
    *(_BYTE *)(v91 + 1 + v78) = v23 >> 22;
    v6 = v97;
    result = v98;
    if (v79 == (_DWORD)v78)
      return result;
    if ((v80 | v81 | (a3 - v90) | (a2 - v89)) < 0)
    {
      v91 += v78 + 1;
      v42 = ~(_DWORD)v78 + v85;
      goto LABEL_41;
    }
    v35 = v95 + SHIDWORD(a3) * (uint64_t)v99 + 4 * (a2 >> 32);
    v36 = *(unsigned int **)(v98 + 32);
    v82 = (unsigned int *)v100;
    if (v100 >= v35)
      v82 = (unsigned int *)(v95 + SHIDWORD(a3) * (uint64_t)v99 + 4 * (a2 >> 32));
    if (v82 < v36)
      v82 = *(unsigned int **)(v98 + 32);
    v38 = *v82;
    if (v97)
    {
      v83 = *(unsigned __int8 **)(v98 + 40);
      v84 = (unint64_t)v94;
      v92 = v97 + SHIDWORD(a3) * (uint64_t)v93 + (a2 >> 32);
      if ((unint64_t)v94 >= v92)
        v84 = v97 + SHIDWORD(a3) * (uint64_t)v93 + (a2 >> 32);
      if (v84 >= (unint64_t)v83)
        v83 = (unsigned __int8 *)v84;
      v38 |= (unint64_t)*v83 << 32;
    }
    if (v7)
    {
      v43 = *(_DWORD *)(v7 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      if ((v43 & 0xF) != 0)
      {
        v91 += v78 + 1;
        v15 = ~(_DWORD)v78 + v85;
        v23 = -1;
        goto LABEL_46;
      }
    }
    ++v8;
    ++v78;
    a3 += v101;
    v80 -= v101;
    a2 += v102;
    v81 -= v102;
    v23 = -1;
  }
}

unsigned int *CMYK32(unsigned int *result, uint64_t a2)
{
  int v2;
  int v3;

  v2 = BYTE4(a2) - (BYTE3(a2) + a2);
  v3 = BYTE4(a2) - (BYTE2(a2) + a2);
  *result = ((v2 & ~(v2 >> 31)) << 7) & 0x7C00 | (HIDWORD(a2) << 24) | (32
                                                                      * (((v3 & ~(v3 >> 31)) >> 3) & 0x1F)) | (((BYTE4(a2) - (BYTE1(a2) + a2)) & ~((BYTE4(a2) - (BYTE1(a2) + a2)) >> 31)) >> 3);
  return result;
}

_QWORD *rgb555_pattern(uint64_t a1, _QWORD *a2, unsigned int a3, int a4, float *a5, int a6, float a7)
{
  float *v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  uint64_t v49;
  char *v50;
  unsigned int v51;

  v11 = *(float **)(*(_QWORD *)a1 + 64);
  v12 = *v11;
  v13 = v11[1];
  v14 = v11[3];
  if (a2 && a3 > 7 || (a2 = malloc_type_malloc(0x38uLL, 0x705560E0uLL)) != 0)
  {
    v15 = v13;
    if (v13 >= a7)
    {
      v15 = a7;
      if (v12 > a7)
        v15 = v12;
    }
    v16 = v15 * v11[2];
    if (a5)
      v17 = a4;
    else
      v17 = 0;
    if (v17 == 1)
    {
      if (*a5 < v12)
        v30 = v12;
      else
        v30 = *a5;
      if (*a5 <= v13)
        v31 = v30;
      else
        v31 = v13;
      v18 = (int)(float)(v14 + (float)(v31 * v16));
      v19 = (int)(float)(v14 + (float)(v31 * v16));
      v20 = v19;
      goto LABEL_74;
    }
    if (v17 == 4)
    {
      v32 = a5[4];
      v33 = *a5;
      v34 = a5[1];
      v35 = a5[2];
      if (v32 < v12)
        v36 = v12;
      else
        v36 = a5[4];
      if (v32 <= v13)
        v37 = v36;
      else
        v37 = v13;
      if (v33 < v12)
        v38 = v12;
      else
        v38 = *a5;
      if (v33 <= v13)
        v39 = v38;
      else
        v39 = v13;
      if (v34 < v12)
        v40 = v12;
      else
        v40 = a5[1];
      if (v34 <= v13)
        v41 = v40;
      else
        v41 = v13;
      if (v35 < v12)
        v42 = v12;
      else
        v42 = a5[2];
      if (v35 <= v13)
        v43 = v42;
      else
        v43 = v13;
      v44 = (float)(v13 - v39) - v37;
      v45 = (float)(v13 - v41) - v37;
      v46 = (float)(v13 - v43) - v37;
      if (v44 >= v12)
        v47 = v14 + (float)(v44 * v16);
      else
        v47 = v12;
      if (v45 >= v12)
        v48 = v14 + (float)(v45 * v16);
      else
        v48 = v12;
      if (v46 >= v12)
        v29 = v14 + (float)(v46 * v16);
      else
        v29 = v12;
      v18 = (int)v47;
      v19 = (int)v48;
    }
    else
    {
      v18 = 0;
      v19 = 0;
      v20 = 0;
      if (v17 != 3)
      {
LABEL_74:
        v49 = (int)(float)(v14 + v16);
        if (a6 && (v18 | v49) | (v19 | v20))
        {
          *(_OWORD *)a2 = xmmword_185004A90;
          a2[2] = 0x2000000010;
          a2[6] = (v18 << 32) | (v49 << 48) | ((uint64_t)v19 << 16) | v20;
          *((_DWORD *)a2 + 6) = 16 * ((int)v49 < 7936);
          if ((int)v49 >= 7936)
            v50 = 0;
          else
            v50 = (char *)(a2 + 6);
          a2[4] = a2 + 6;
          a2[5] = v50;
        }
        else
        {
          v51 = (4 * (_WORD)v18 + 512) & 0x7C00 | ((v19 + 128) >> 3) & 0x3E0 | ((v20 + 128) >> 8) & 0x1F;
          *(_OWORD *)a2 = xmmword_185004AA0;
          *((_DWORD *)a2 + 6) = 0;
          a2[2] = 1;
          *((_DWORD *)a2 + 12) = v51 | (v51 << 16);
          a2[4] = a2 + 6;
          if ((int)v49 > 7807)
          {
            a2[5] = 0;
          }
          else
          {
            *((_DWORD *)a2 + 13) = 16843009
                                 * (((v49 + 128) >> 5) & 0xF8 | ((v49 + 128) >> 10) & 7);
            a2[5] = (char *)a2 + 52;
          }
        }
        return a2;
      }
      v21 = a5[1];
      v22 = a5[2];
      if (*a5 < v12)
        v23 = v12;
      else
        v23 = *a5;
      if (*a5 <= v13)
        v24 = v23;
      else
        v24 = v13;
      if (v21 < v12)
        v25 = v12;
      else
        v25 = a5[1];
      if (v21 <= v13)
        v26 = v25;
      else
        v26 = v13;
      if (v22 < v12)
        v27 = v12;
      else
        v27 = a5[2];
      if (v22 <= v13)
        v28 = v27;
      else
        v28 = v13;
      v18 = (int)(float)(v14 + (float)(v24 * v16));
      v19 = (int)(float)(v14 + (float)(v26 * v16));
      v29 = v14 + (float)(v28 * v16);
    }
    v20 = (int)v29;
    goto LABEL_74;
  }
  return a2;
}

uint64_t rgb555_mark(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v3;
  int8x16_t v4;
  int v5;
  unsigned __int8 *v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint16x4_t *v15;
  int v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  size_t v28;
  _BYTE *v29;
  _BYTE *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  unint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  unint64_t v57;
  char v58;
  char v59;
  unint64_t v60;
  uint64_t v61;
  void *v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  int v73;
  int v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  char *v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  int *v88;
  signed int v89;
  char *v90;
  int v91;
  int *v92;
  uint64_t v93;
  int v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  unsigned int v100;
  int v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  int v110;
  int v111;
  int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  unsigned int v129;
  int v130;
  int v131;
  unsigned int v132;
  int v133;
  int v134;
  unsigned int v135;
  int v136;
  int v137;
  unsigned int v138;
  int v139;
  int v140;
  unsigned int v141;
  int v142;
  int v143;
  unsigned int v144;
  int v145;
  int v146;
  unsigned int v147;
  int v148;
  int v149;
  unsigned int v150;
  int v151;
  int v152;
  unsigned int v153;
  int v154;
  int v155;
  unsigned int v156;
  int v157;
  int v158;
  unsigned int v159;
  int v160;
  int v161;
  unsigned int v162;
  int v163;
  int v164;
  unsigned int v165;
  int v166;
  int v167;
  unsigned int v168;
  int v169;
  int v170;
  unsigned int v171;
  int v172;
  uint64_t v173;
  int v174;
  unsigned int v175;
  int v176;
  unsigned int v177;
  unint64_t v178;
  int v179;
  unint64_t v180;
  int v181;
  int v182;
  unint64_t v183;
  int v184;
  int v185;
  unint64_t v186;
  int v187;
  int v188;
  int v189;
  unsigned int v190;
  uint64_t v191;
  _BYTE *v192;
  unsigned int v193;
  uint64_t v194;
  char *v195;
  int v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  uint8x8_t v202;
  int v203;
  unsigned int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  unsigned int v209;
  unsigned int v210;
  unint64_t v211;
  unsigned int v212;
  __int16 *v213;
  uint64_t v214;
  __int16 *v215;
  BOOL v216;
  uint64_t v217;
  __int16 *v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  int v224;
  unsigned int v225;
  unsigned int v226;
  unsigned int v227;
  uint64_t v228;
  unint64_t v229;
  unsigned int v230;
  __int16 *v231;
  uint64_t v232;
  __int16 *v233;
  BOOL v234;
  uint64_t v235;
  __int16 *v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  unsigned int v242;
  unsigned int v243;
  char v244;
  unsigned int v245;
  __int16 *v246;
  uint64_t v247;
  __int16 *v248;
  BOOL v249;
  uint64_t v250;
  __int16 *v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  int v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  char *v262;
  __int16 *v263;
  uint64_t v264;
  __int16 *v265;
  BOOL v266;
  uint64_t v267;
  __int16 *v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  int v273;
  unsigned int v274;
  unsigned int v275;
  char v276;
  unsigned int v277;
  __int16 *v278;
  uint64_t v279;
  __int16 *v280;
  BOOL v281;
  uint64_t v282;
  __int16 *v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  int v289;
  unsigned int v290;
  unsigned int v291;
  unint64_t v292;
  unsigned int v293;
  __int16 *v294;
  uint64_t v295;
  __int16 *v296;
  BOOL v297;
  uint64_t v298;
  __int16 *v299;
  unint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  int v305;
  unsigned int v306;
  unsigned int v307;
  unint64_t v308;
  unsigned int v309;
  __int16 *v310;
  uint64_t v311;
  __int16 *v312;
  BOOL v313;
  uint64_t v314;
  __int16 *v315;
  unint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  int v320;
  unint64_t v321;
  uint64_t v322;
  __int16 *v323;
  uint64_t v324;
  __int16 *v325;
  BOOL v326;
  uint64_t v327;
  __int16 *v328;
  unint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  int v334;
  int v335;
  unint64_t v336;
  uint64_t v337;
  uint64_t v338;
  __int16 *v339;
  uint64_t v340;
  __int16 *v341;
  BOOL v342;
  uint64_t v343;
  __int16 *v344;
  unint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  int v349;
  unint64_t v350;
  unsigned int v351;
  uint64_t v352;
  __int16 *v353;
  uint64_t v354;
  __int16 *v355;
  BOOL v356;
  uint64_t v357;
  __int16 *v358;
  unint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  int v363;
  unint64_t v364;
  unsigned int v365;
  uint64_t v366;
  __int16 *v367;
  uint64_t v368;
  __int16 *v369;
  BOOL v370;
  uint64_t v371;
  __int16 *v372;
  unint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  int v377;
  unsigned int v378;
  unsigned int v379;
  __int16 v380;
  int v381;
  __int16 *v382;
  uint64_t v383;
  __int16 *v384;
  BOOL v385;
  uint64_t v386;
  __int16 *v387;
  unint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  int v392;
  unsigned int v393;
  unsigned int v394;
  __int16 v395;
  int v396;
  __int16 *v397;
  uint64_t v398;
  __int16 *v399;
  BOOL v400;
  uint64_t v401;
  __int16 *v402;
  unint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  int v407;
  unsigned int v408;
  unsigned int v409;
  __int16 v410;
  int v411;
  __int16 *v412;
  uint64_t v413;
  __int16 *v414;
  BOOL v415;
  uint64_t v416;
  __int16 *v417;
  unint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  int v422;
  unsigned int v423;
  unsigned int v424;
  __int16 v425;
  int v426;
  __int16 *v427;
  uint64_t v428;
  __int16 *v429;
  BOOL v430;
  uint64_t v431;
  __int16 *v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  int v437;
  unsigned int v438;
  unsigned int v439;
  __int16 v440;
  int v441;
  __int16 *v442;
  uint64_t v443;
  __int16 *v444;
  BOOL v445;
  uint64_t v446;
  __int16 *v447;
  unint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  int v452;
  unsigned int v453;
  unsigned int v454;
  __int16 v455;
  int v456;
  __int16 *v457;
  uint64_t v458;
  __int16 *v459;
  BOOL v460;
  uint64_t v461;
  __int16 *v462;
  unint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  int v467;
  unsigned int v468;
  unsigned int v469;
  __int16 v470;
  int v471;
  __int16 *v472;
  uint64_t v473;
  __int16 *v474;
  BOOL v475;
  uint64_t v476;
  __int16 *v477;
  unint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  int v482;
  unsigned int v483;
  unsigned int v484;
  __int16 v485;
  int v486;
  __int16 *v487;
  uint64_t v488;
  __int16 *v489;
  BOOL v490;
  uint64_t v491;
  __int16 *v492;
  unint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  int v497;
  unsigned int v498;
  unsigned int v499;
  __int16 v500;
  int v501;
  __int16 *v502;
  uint64_t v503;
  __int16 *v504;
  BOOL v505;
  uint64_t v506;
  __int16 *v507;
  unint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  int v512;
  unsigned int v513;
  unsigned int v514;
  __int16 v515;
  int v516;
  __int16 *v517;
  uint64_t v518;
  __int16 *v519;
  BOOL v520;
  uint64_t v521;
  __int16 *v522;
  unint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  int v527;
  unsigned int v528;
  unsigned int v529;
  __int16 v530;
  int v531;
  __int16 *v532;
  uint64_t v533;
  __int16 *v534;
  BOOL v535;
  uint64_t v536;
  __int16 *v537;
  unint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  int v542;
  unsigned int v543;
  unsigned int v544;
  __int16 v545;
  int v546;
  __int16 *v547;
  uint64_t v548;
  __int16 *v549;
  BOOL v550;
  uint64_t v551;
  __int16 *v552;
  unint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  int v557;
  unsigned int v558;
  unsigned int v559;
  __int16 v560;
  int v561;
  __int16 *v562;
  uint64_t v563;
  __int16 *v564;
  BOOL v565;
  uint64_t v566;
  __int16 *v567;
  unint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  int v572;
  unsigned int v573;
  unsigned int v574;
  unsigned int v575;
  __int16 v576;
  int v577;
  __int16 *v578;
  uint64_t v579;
  __int16 *v580;
  BOOL v581;
  uint64_t v582;
  __int16 *v583;
  unint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  int v588;
  unsigned int v589;
  unsigned int v590;
  __int16 v591;
  int v592;
  __int16 *v593;
  uint64_t v594;
  __int16 *v595;
  BOOL v596;
  uint64_t v597;
  __int16 *v598;
  unint64_t v599;
  uint64_t v600;
  unint64_t v601;
  unsigned __int8 *v602;
  uint64_t v603;
  int v604;
  __int16 *v605;
  uint64_t v606;
  _BYTE *v607;
  int v608;
  uint64_t v609;
  char *v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  int v616;
  __int16 *v617;
  uint64_t v618;
  __int16 *v619;
  BOOL v620;
  uint64_t v621;
  __int16 *v622;
  unint64_t v623;
  uint64_t v624;
  uint64_t v625;
  int v626;
  int v627;
  unsigned int v628;
  __int16 v629;
  unint64_t v630;
  __int16 *v631;
  uint64_t v632;
  __int16 *v633;
  BOOL v634;
  uint64_t v635;
  __int16 *v636;
  unint64_t v637;
  uint64_t v638;
  int v639;
  int v640;
  unsigned int v641;
  unsigned int v642;
  unint64_t v643;
  __int16 *v644;
  uint64_t v645;
  __int16 *v646;
  BOOL v647;
  uint64_t v648;
  __int16 *v649;
  unint64_t v650;
  uint64_t v651;
  uint64_t v652;
  __int16 *v653;
  uint64_t v654;
  unsigned __int8 *v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  int v660;
  int v661;
  unsigned int v662;
  __int16 v663;
  unint64_t v664;
  __int16 *v665;
  uint64_t v666;
  __int16 *v667;
  BOOL v668;
  uint64_t v669;
  __int16 *v670;
  unint64_t v671;
  uint64_t v672;
  uint64_t v673;
  int v674;
  int v675;
  unsigned int v676;
  __int16 v677;
  unint64_t v678;
  __int16 *v679;
  uint64_t v680;
  __int16 *v681;
  BOOL v682;
  uint64_t v683;
  __int16 *v684;
  unint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  int v690;
  int v691;
  unint64_t v692;
  unsigned int v693;
  __int16 *v694;
  uint64_t v695;
  __int16 *v696;
  BOOL v697;
  uint64_t v698;
  __int16 *v699;
  unint64_t v700;
  uint64_t v701;
  int v702;
  uint64_t v703;
  int v704;
  unsigned int v705;
  __int16 *v706;
  uint64_t v707;
  __int16 *v708;
  BOOL v709;
  uint64_t v710;
  __int16 *v711;
  unint64_t v712;
  uint64_t v713;
  uint64_t v714;
  int v715;
  uint64_t v716;
  int v717;
  __int16 *v718;
  uint64_t v719;
  __int16 *v720;
  BOOL v721;
  uint64_t v722;
  __int16 *v723;
  unint64_t v724;
  uint64_t v725;
  int v726;
  __int16 *v727;
  uint64_t v728;
  __int16 *v729;
  BOOL v730;
  uint64_t v731;
  __int16 *v732;
  unint64_t v733;
  uint64_t v734;
  uint64_t v735;
  char *v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  char *v740;
  uint64_t v741;
  uint64_t v742;
  char *v743;
  uint64_t v744;
  uint64_t v745;
  int v746;
  int v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  int v780;
  int v781;
  int v782;
  unint64_t v783;
  uint64_t v784;
  char *v785;
  uint64_t v786;
  int v787;
  int v788;
  unint64_t v789;
  unsigned __int8 *v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  unint64_t v794;
  int v795;
  int v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  unint64_t v819;
  unint64_t v820;
  unsigned int v821;
  unint64_t v822;
  uint64_t v823;
  int v824;
  uint64_t v825;
  unint64_t v826;
  uint64_t v827;
  __int16 *v828;
  unsigned int v829;
  char *v830;
  char *v831;
  uint64_t v832;
  uint64_t v833;
  unint64_t v834;
  uint64_t v835;
  unint64_t v836;
  char *v837;
  unint64_t v838;
  char *v839;
  unint64_t v840;
  unint64_t v841;
  unint64_t v842;
  unint64_t v843;
  unint64_t v844;
  unint64_t v845;
  unint64_t v846;
  unint64_t v847;
  unint64_t v848;
  unint64_t v849;
  unint64_t v850;
  unint64_t v851;
  unint64_t v852;
  unint64_t v853;
  unint64_t v854;
  uint64_t v855;
  int v856;
  __int16 *v857;
  unint64_t v858;
  uint64_t v859;
  int v860;
  _BYTE *v861;
  uint64_t v862;
  int v863[4];
  __int128 v864;
  __int128 v865;
  __int128 v866;
  __int128 v867;
  __int128 v868;
  __int128 v869;
  __int128 v870;
  __int128 v871;
  __int128 v872;
  _DWORD v873[1024];
  uint64_t v874;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v874 = *MEMORY[0x1E0C80C00];
  v5 = *(_DWORD *)v3;
  v6 = *(unsigned __int8 **)(v3 + 96);
  v7 = *(_QWORD *)(v3 + 48);
  v8 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 56)
                 + 16 * *(_DWORD *)v3
                 + 8 * (v6 == 0)
                 + 4 * (v7 == 0));
  if (v8 > 27)
    return 0xFFFFFFFFLL;
  v10 = v3;
  v11 = *(unsigned int *)(v3 + 4);
  v12 = v11 - 1;
  if ((int)v11 < 1)
    return 0;
  v13 = *(_DWORD *)(v3 + 8);
  v14 = (v13 - 1);
  if (v13 < 1)
    return 0;
  v15 = *(uint16x4_t **)(v3 + 136);
  v788 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 56)
                   + 16 * *(_DWORD *)v3
                   + 8 * (v6 == 0)
                   + 4 * (v7 == 0));
  if ((v5 & 0xFF0000) == 0x50000 || !v15)
  {
    v786 = v3;
    if ((*(_DWORD *)v3 & 0xFF00) == 0x400)
    {
      v873[0] = *(_DWORD *)(v3 + 4);
      v863[0] = v13;
      if (v6)
        v17 = *v6;
      else
        v17 = 255;
      v31 = **(unsigned __int16 **)(v3 + 88);
      v33 = *(int *)(v3 + 12);
      v32 = *(int *)(v3 + 16);
      v34 = (unint64_t)*(int *)(v3 + 28) >> 1;
      if (v7)
      {
        v833 = *(int *)(v3 + 32);
        v831 = (char *)(v7 + v33 + (int)v833 * (uint64_t)(int)v32);
        v829 = 1;
      }
      else
      {
        v831 = 0;
        v833 = 0;
        v829 = 0;
      }
      v43 = ~(_BYTE)v17;
      v44 = *(_QWORD *)(v3 + 40) + 2 * (v33 + v32 * v34);
      v827 = v44;
      if (v15)
      {
        shape_enum_clip_alloc(v2, v3, (int *)v15, 1, 1, 1, *(_DWORD *)(v3 + 104), *(_DWORD *)(v3 + 108), v11, v13);
        v46 = v45;
        v47 = v831;
        v859 = v833;
        v48 = v44;
        if (v45)
          goto LABEL_317;
        return 1;
      }
      v855 = 0;
      if (v7)
        v49 = v11;
      else
        v49 = 0;
      v47 = v831;
      v859 = v833 - v49;
      v50 = (char *)v44;
      v51 = v11;
      v48 = v44;
LABEL_76:
      v858 = v34 - v51;
      v796 = v11;
      switch(v8)
      {
        case 0:
          v78 = v858 + (int)v11;
          v79 = v863[0];
          v80 = v863[0] - 1;
          v81 = &v50[2 * ((v78 * v80) & (v78 >> 63))];
          if (v78 < 0)
            v78 = -v78;
          v82 = v11;
          CGBlt_fillBytes(2 * v11, v863[0], 0, v81, 2 * v78);
          if (v7)
          {
            v83 = v859 + v82;
            v47 += (v83 * v80) & (v83 >> 63);
            if (v83 >= 0)
              v84 = v859 + v82;
            else
              v84 = -v83;
            v859 = v84;
            CGBlt_fillBytes(v82, v79, 0, v47, v84);
          }
          goto LABEL_351;
        case 1:
          v85 = v858 + (int)v11;
          v823 = (int)v11;
          if (v85 < 0)
          {
            v50 += 2 * v85 * (v863[0] - 1);
            v85 = -v85;
          }
          v86 = v48;
          v87 = 0;
          v88 = *(int **)(v786 + 88);
          if (v88)
            v87 = *v88;
          v89 = v863[0];
          v90 = v50;
          v91 = v11;
          CGBlt_fillBytes(2 * v11, v863[0], v87, v90, 2 * v85);
          if (v7)
          {
            v92 = *(int **)(v786 + 96);
            if (!v92)
              v92 = (int *)&PIXELALPHAPLANARCONSTANT_15938;
            v47 += ((v859 + v823) * (v89 - 1)) & ((v859 + v823) >> 63);
            if (v859 + v823 >= 0)
              v93 = v859 + v823;
            else
              v93 = -(v859 + v823);
            v859 = v93;
            CGBlt_fillBytes(v91, v89, *v92, v47, v93);
          }
          v48 = v86;
          goto LABEL_315;
        case 2:
          v826 = v34;
          if (v7)
          {
            do
            {
              v94 = v873[0];
              if (v873[0] >= 4)
              {
                v95 = (v873[0] >> 2) + 1;
                do
                {
                  v96 = PDAplusDAM(v31, v17, *(unsigned __int16 *)v50, *v47, ~(_BYTE)v17);
                  *(_WORD *)v50 = v96;
                  *v47 = BYTE3(v96);
                  v97 = PDAplusDAM(v31, v17, *((unsigned __int16 *)v50 + 1), v47[1], ~(_BYTE)v17);
                  *((_WORD *)v50 + 1) = v97;
                  v47[1] = BYTE3(v97);
                  v98 = PDAplusDAM(v31, v17, *((unsigned __int16 *)v50 + 2), v47[2], ~(_BYTE)v17);
                  *((_WORD *)v50 + 2) = v98;
                  v47[2] = BYTE3(v98);
                  v99 = PDAplusDAM(v31, v17, *((unsigned __int16 *)v50 + 3), v47[3], ~(_BYTE)v17);
                  *((_WORD *)v50 + 3) = v99;
                  v47[3] = HIBYTE(v99);
                  v50 += 8;
                  v47 += 4 * v829;
                  --v95;
                }
                while (v95 > 1);
                v94 = v873[0] & 3;
                v34 = v826;
              }
              if (v94 >= 1)
              {
                v100 = v94 + 1;
                do
                {
                  v101 = PDAplusDAM(v31, v17, *(unsigned __int16 *)v50, *v47, ~(_BYTE)v17);
                  *(_WORD *)v50 = v101;
                  v50 += 2;
                  *v47 = HIBYTE(v101);
                  v47 += v829;
                  --v100;
                }
                while (v100 > 1);
              }
              v50 += 2 * v858;
              v47 += v859;
              --v863[0];
            }
            while (v863[0]);
            v8 = v788;
            goto LABEL_351;
          }
          v174 = v863[0];
          v824 = v11 & 3;
          v821 = (v11 >> 2) + 1;
          do
          {
            if ((int)v11 < 4)
            {
              v176 = v11;
            }
            else
            {
              v175 = v821;
              do
              {
                *(_WORD *)v50 = PDplusDM(v31, *(unsigned __int16 *)v50, ~(_BYTE)v17);
                *((_WORD *)v50 + 1) = PDplusDM(v31, *((unsigned __int16 *)v50 + 1), ~(_BYTE)v17);
                *((_WORD *)v50 + 2) = PDplusDM(v31, *((unsigned __int16 *)v50 + 2), ~(_BYTE)v17);
                *((_WORD *)v50 + 3) = PDplusDM(v31, *((unsigned __int16 *)v50 + 3), ~(_BYTE)v17);
                v50 += 8;
                v47 += 4 * v829;
                --v175;
              }
              while (v175 > 1);
              v176 = v824;
              v48 = v827;
              LODWORD(v11) = v796;
            }
            if (v176 >= 1)
            {
              v177 = v176 + 1;
              do
              {
                *(_WORD *)v50 = PDplusDM(v31, *(unsigned __int16 *)v50, ~(_BYTE)v17);
                v50 += 2;
                --v177;
              }
              while (v177 > 1);
              v47 += v176 * v829;
              v48 = v827;
              LODWORD(v11) = v796;
            }
            v50 += 2 * v858;
            v47 += v859;
            --v174;
          }
          while (v174);
          v863[0] = 0;
          v8 = v788;
          goto LABEL_315;
        case 3:
          do
          {
            v102 = v873[0];
            do
            {
              v103 = *v47;
              if (v103 > 7)
              {
                if (v103 < 0xF8)
                {
                  v105 = PDAM(v31, v17, v103);
                  *(_WORD *)v50 = v105;
                  v104 = HIBYTE(v105);
                }
                else
                {
                  *(_WORD *)v50 = v31;
                  LOBYTE(v104) = v17;
                }
              }
              else
              {
                LOBYTE(v104) = 0;
                *(_WORD *)v50 = 0;
              }
              *v47 = v104;
              v50 += 2;
              v47 += v829;
              --v102;
            }
            while (v102);
            v50 += 2 * v858;
            v47 += v859;
            --v863[0];
          }
          while (v863[0]);
          goto LABEL_314;
        case 4:
          do
          {
            v106 = v873[0];
            do
            {
              v107 = *v47;
              if (v107 < 0xF8)
              {
                if (v107 > 7)
                {
                  v109 = PDAM(v31, v17, ~(_BYTE)v107);
                  *(_WORD *)v50 = v109;
                  v108 = HIBYTE(v109);
                }
                else
                {
                  *(_WORD *)v50 = v31;
                  LOBYTE(v108) = v17;
                }
              }
              else
              {
                LOBYTE(v108) = 0;
                *(_WORD *)v50 = 0;
              }
              *v47 = v108;
              v50 += 2;
              v47 += v829;
              --v106;
            }
            while (v106);
            v50 += 2 * v858;
            v47 += v859;
            --v863[0];
          }
          while (v863[0]);
          goto LABEL_314;
        case 5:
          do
          {
            v110 = v873[0];
            do
            {
              v111 = PDAMplusDAM(v31, v17, *v47, *(unsigned __int16 *)v50, *v47, ~(_BYTE)v17);
              *(_WORD *)v50 = v111;
              v50 += 2;
              *v47 = HIBYTE(v111);
              v47 += v829;
              --v110;
            }
            while (v110);
            v50 += 2 * v858;
            v47 += v859;
            --v863[0];
          }
          while (v863[0]);
          goto LABEL_314;
        case 6:
          goto LABEL_128;
        case 7:
          if (v7)
          {
            do
            {
              v116 = v873[0];
              do
              {
                v117 = PDAM(*(unsigned __int16 *)v50, *v47, v17);
                *(_WORD *)v50 = v117;
                v50 += 2;
                *v47 = HIBYTE(v117);
                v47 += v829;
                --v116;
              }
              while (v116);
              v50 += 2 * v858;
              v47 += v859;
              --v863[0];
            }
            while (v863[0]);
            goto LABEL_314;
          }
          v178 = v34;
          v179 = v863[0];
          v180 = v829 + v829 * (unint64_t)(v11 - 1);
          do
          {
            v181 = v11;
            do
            {
              *(_WORD *)v50 = PDM(*(unsigned __int16 *)v50, v17);
              v50 += 2;
              --v181;
            }
            while (v181);
            v50 += 2 * v858;
            v47 += v180 + v859;
            --v179;
            LODWORD(v11) = v796;
          }
          while (v179);
          goto LABEL_350;
        case 8:
          if (v7)
          {
            do
            {
              v118 = v873[0];
              do
              {
                v119 = PDAM(*(unsigned __int16 *)v50, *v47, v43);
                *(_WORD *)v50 = v119;
                v50 += 2;
                *v47 = HIBYTE(v119);
                v47 += v829;
                --v118;
              }
              while (v118);
              v50 += 2 * v858;
              v47 += v859;
              --v863[0];
            }
            while (v863[0]);
            goto LABEL_314;
          }
          v178 = v34;
          v182 = v863[0];
          v183 = v829 + v829 * (unint64_t)(v11 - 1);
          do
          {
            v184 = v11;
            do
            {
              *(_WORD *)v50 = PDM(*(unsigned __int16 *)v50, v43);
              v50 += 2;
              --v184;
            }
            while (v184);
            v50 += 2 * v858;
            v47 += v183 + v859;
            --v182;
            LODWORD(v11) = v796;
          }
          while (v182);
          goto LABEL_350;
        case 9:
          do
          {
            v120 = v873[0];
            do
            {
              v121 = PDAMplusDAM(v31, v17, *v47 ^ 0xFFu, *(unsigned __int16 *)v50, *v47, v17);
              *(_WORD *)v50 = v121;
              v50 += 2;
              *v47 = HIBYTE(v121);
              v47 += v829;
              --v120;
            }
            while (v120);
            v50 += 2 * v858;
            v47 += v859;
            --v863[0];
          }
          while (v863[0]);
          goto LABEL_314;
        case 10:
          do
          {
            v122 = v873[0];
            do
            {
              v123 = PDAMplusDAM(v31, v17, *v47 ^ 0xFFu, *(unsigned __int16 *)v50, *v47, ~(_BYTE)v17);
              *(_WORD *)v50 = v123;
              v50 += 2;
              *v47 = HIBYTE(v123);
              v47 += v829;
              --v122;
            }
            while (v122);
            v50 += 2 * v858;
            v47 += v859;
            --v863[0];
          }
          while (v863[0]);
          goto LABEL_314;
        case 11:
          if (v7)
          {
            do
            {
              v124 = v873[0];
              do
              {
                v125 = PDAplusdDA(*(_WORD *)v50, *v47, v31, v17);
                *(_WORD *)v50 = v125;
                v50 += 2;
                *v47 = HIBYTE(v125);
                v47 += v829;
                --v124;
              }
              while (v124);
              v50 += 2 * v858;
              v47 += v859;
              --v863[0];
            }
            while (v863[0]);
            goto LABEL_314;
          }
          v178 = v34;
          v185 = v863[0];
          v186 = v829 + v829 * (unint64_t)(v11 - 1);
          do
          {
            v187 = v11;
            do
            {
              *(_WORD *)v50 = PDplusdDA(*(unsigned __int16 *)v50, v31, v17);
              v50 += 2;
              --v187;
            }
            while (v187);
            v50 += 2 * v858;
            v47 += v186 + v859;
            --v185;
            LODWORD(v11) = v796;
          }
          while (v185);
LABEL_350:
          v863[0] = 0;
          v8 = v788;
          v34 = v178;
LABEL_351:
          v48 = v827;
          goto LABEL_315;
        case 12:
          if (v7)
          {
            do
            {
              v126 = v873[0];
              do
              {
                v127 = PDApluslDA(*(unsigned __int16 *)v50, *v47, v31, v17);
                *(_WORD *)v50 = v127;
                v50 += 2;
                *v47 = HIBYTE(v127);
                v47 += v829;
                --v126;
              }
              while (v126);
              v50 += 2 * v858;
              v47 += v859;
              --v863[0];
            }
            while (v863[0]);
            goto LABEL_314;
          }
          v188 = v863[0];
          do
          {
            v189 = v11;
            do
            {
              v190 = ((*(unsigned __int16 *)v50 | (*(unsigned __int16 *)v50 << 15)) & 0x1F07C1F)
                   + ((v31 | (v31 << 15)) & 0x1F07C1F);
              *(_WORD *)v50 = (((15 * ((v190 >> 5) & 0x100401)) | v190 | (30 * ((v190 >> 5) & 0x100401))) >> 15) & 0x3E0 | ((15 * ((v190 >> 5) & 0x401)) | v190 | (30 * ((v190 >> 5) & 0x401))) & 0x7C1F;
              v50 += 2;
              --v189;
            }
            while (v189);
            v50 += 2 * v858;
            v47 += v829 + v829 * (unint64_t)(v11 - 1) + v859;
            --v188;
          }
          while (v188);
          v863[0] = 0;
          goto LABEL_315;
        case 13:
          if (v17 < 8)
            goto LABEL_315;
          do
          {
            v128 = v873[0];
            do
            {
              if (v7)
              {
                v129 = *v47;
                if (v129 > 7)
                {
                  v130 = PDAmultiplyPDA(*(unsigned __int16 *)v50, v129, v31, v17, v4);
                  *(_WORD *)v50 = v130;
                  *v47 = HIBYTE(v130);
                }
                else
                {
                  *(_WORD *)v50 = v31;
                  *v47 = v17;
                }
              }
              else
              {
                *(_WORD *)v50 = PDAmultiplyPDA(*(unsigned __int16 *)v50, 0xFFu, v31, v17, v4);
              }
              v50 += 2;
              v47 += v829;
              --v128;
            }
            while (v128);
            v50 += 2 * v858;
            v47 += v859;
            --v863[0];
          }
          while (v863[0]);
          goto LABEL_314;
        case 14:
          if (v17 < 8)
            goto LABEL_315;
          do
          {
            v131 = v873[0];
            do
            {
              if (v7)
              {
                v132 = *v47;
                if (v132 > 7)
                {
                  v133 = PDAscreenPDA(*(unsigned __int16 *)v50, v132, v31, v17);
                  *(_WORD *)v50 = v133;
                  *v47 = HIBYTE(v133);
                }
                else
                {
                  *(_WORD *)v50 = v31;
                  *v47 = v17;
                }
              }
              else
              {
                *(_WORD *)v50 = PDAscreenPDA(*(unsigned __int16 *)v50, 0xFFu, v31, v17);
              }
              v50 += 2;
              v47 += v829;
              --v131;
            }
            while (v131);
            v50 += 2 * v858;
            v47 += v859;
            --v863[0];
          }
          while (v863[0]);
          goto LABEL_314;
        case 15:
          if (v17 < 8)
            goto LABEL_315;
          do
          {
            v134 = v873[0];
            do
            {
              if (v7)
              {
                v135 = *v47;
                if (v135 > 7)
                {
                  v136 = PDAoverlayPDA(*(unsigned __int16 *)v50, v135, v31, v17);
                  *(_WORD *)v50 = v136;
                  *v47 = HIBYTE(v136);
                }
                else
                {
                  *(_WORD *)v50 = v31;
                  *v47 = v17;
                }
              }
              else
              {
                *(_WORD *)v50 = PDAoverlayPDA(*(unsigned __int16 *)v50, 0xFFu, v31, v17);
              }
              v50 += 2;
              v47 += v829;
              --v134;
            }
            while (v134);
            v50 += 2 * v858;
            v47 += v859;
            --v863[0];
          }
          while (v863[0]);
          goto LABEL_314;
        case 16:
          if (v17 < 8)
            goto LABEL_315;
          do
          {
            v137 = v873[0];
            do
            {
              if (v7)
              {
                v138 = *v47;
                if (v138 > 7)
                {
                  v139 = PDAdarkenPDA(*(unsigned __int16 *)v50, v138, v31, v17);
                  *(_WORD *)v50 = v139;
                  *v47 = HIBYTE(v139);
                }
                else
                {
                  *(_WORD *)v50 = v31;
                  *v47 = v17;
                }
              }
              else
              {
                *(_WORD *)v50 = PDAdarkenPDA(*(unsigned __int16 *)v50, 0xFFu, v31, v17);
              }
              v50 += 2;
              v47 += v829;
              --v137;
            }
            while (v137);
            v50 += 2 * v858;
            v47 += v859;
            --v863[0];
          }
          while (v863[0]);
          goto LABEL_314;
        case 17:
          if (v17 < 8)
            goto LABEL_315;
          do
          {
            v140 = v873[0];
            do
            {
              if (v7)
              {
                v141 = *v47;
                if (v141 > 7)
                {
                  v142 = PDAlightenPDA(*(unsigned __int16 *)v50, v141, v31, v17);
                  *(_WORD *)v50 = v142;
                  *v47 = HIBYTE(v142);
                }
                else
                {
                  *(_WORD *)v50 = v31;
                  *v47 = v17;
                }
              }
              else
              {
                *(_WORD *)v50 = PDAlightenPDA(*(unsigned __int16 *)v50, 0xFFu, v31, v17);
              }
              v50 += 2;
              v47 += v829;
              --v140;
            }
            while (v140);
            v50 += 2 * v858;
            v47 += v859;
            --v863[0];
          }
          while (v863[0]);
          goto LABEL_314;
        case 18:
          if (v17 < 8)
            goto LABEL_315;
          do
          {
            v143 = v873[0];
            do
            {
              if (v7)
              {
                v144 = *v47;
                if (v144 > 7)
                {
                  v145 = PDAcolordodgePDA(*(unsigned __int16 *)v50, v144, v31, v17);
                  *(_WORD *)v50 = v145;
                  *v47 = HIBYTE(v145);
                }
                else
                {
                  *(_WORD *)v50 = v31;
                  *v47 = v17;
                }
              }
              else
              {
                *(_WORD *)v50 = PDAcolordodgePDA(*(unsigned __int16 *)v50, 0xFFu, v31, v17);
              }
              v50 += 2;
              v47 += v829;
              --v143;
            }
            while (v143);
            v50 += 2 * v858;
            v47 += v859;
            --v863[0];
          }
          while (v863[0]);
          goto LABEL_314;
        case 19:
          if (v17 < 8)
            goto LABEL_315;
          do
          {
            v146 = v873[0];
            do
            {
              if (v7)
              {
                v147 = *v47;
                if (v147 > 7)
                {
                  v148 = PDAcolorburnPDA(*(unsigned __int16 *)v50, v147, v31, v17);
                  *(_WORD *)v50 = v148;
                  *v47 = HIBYTE(v148);
                }
                else
                {
                  *(_WORD *)v50 = v31;
                  *v47 = v17;
                }
              }
              else
              {
                *(_WORD *)v50 = PDAcolorburnPDA(*(unsigned __int16 *)v50, 0xFFu, v31, v17);
              }
              v50 += 2;
              v47 += v829;
              --v146;
            }
            while (v146);
            v50 += 2 * v858;
            v47 += v859;
            --v863[0];
          }
          while (v863[0]);
          goto LABEL_314;
        case 20:
          if (v17 < 8)
            goto LABEL_315;
          do
          {
            v149 = v873[0];
            do
            {
              if (v7)
              {
                v150 = *v47;
                if (v150 > 7)
                {
                  v151 = PDAsoftlightPDA(*(unsigned __int16 *)v50, v150, v31, v17);
                  *(_WORD *)v50 = v151;
                  *v47 = HIBYTE(v151);
                }
                else
                {
                  *(_WORD *)v50 = v31;
                  *v47 = v17;
                }
              }
              else
              {
                *(_WORD *)v50 = PDAsoftlightPDA(*(unsigned __int16 *)v50, 0xFFu, v31, v17);
              }
              v50 += 2;
              v47 += v829;
              --v149;
            }
            while (v149);
            v50 += 2 * v858;
            v47 += v859;
            --v863[0];
          }
          while (v863[0]);
          goto LABEL_314;
        case 21:
          if (v17 < 8)
            goto LABEL_315;
          do
          {
            v152 = v873[0];
            do
            {
              if (v7)
              {
                v153 = *v47;
                if (v153 > 7)
                {
                  v154 = PDAhardlightPDA(*(unsigned __int16 *)v50, v153, v31, v17);
                  *(_WORD *)v50 = v154;
                  *v47 = HIBYTE(v154);
                }
                else
                {
                  *(_WORD *)v50 = v31;
                  *v47 = v17;
                }
              }
              else
              {
                *(_WORD *)v50 = PDAhardlightPDA(*(unsigned __int16 *)v50, 0xFFu, v31, v17);
              }
              v50 += 2;
              v47 += v829;
              --v152;
            }
            while (v152);
            v50 += 2 * v858;
            v47 += v859;
            --v863[0];
          }
          while (v863[0]);
          goto LABEL_314;
        case 22:
          if (v17 < 8)
            goto LABEL_315;
          do
          {
            v155 = v873[0];
            do
            {
              if (v7)
              {
                v156 = *v47;
                if (v156 > 7)
                {
                  v157 = PDAdifferencePDA(*(unsigned __int16 *)v50, v156, v31, v17);
                  *(_WORD *)v50 = v157;
                  *v47 = HIBYTE(v157);
                }
                else
                {
                  *(_WORD *)v50 = v31;
                  *v47 = v17;
                }
              }
              else
              {
                *(_WORD *)v50 = PDAdifferencePDA(*(unsigned __int16 *)v50, 0xFFu, v31, v17);
              }
              v50 += 2;
              v47 += v829;
              --v155;
            }
            while (v155);
            v50 += 2 * v858;
            v47 += v859;
            --v863[0];
          }
          while (v863[0]);
          goto LABEL_314;
        case 23:
          if (v17 < 8)
            goto LABEL_315;
          do
          {
            v158 = v873[0];
            do
            {
              if (v7)
              {
                v159 = *v47;
                if (v159 > 7)
                {
                  v160 = PDAexclusionPDA(*(unsigned __int16 *)v50, v159, v31, v17);
                  *(_WORD *)v50 = v160;
                  *v47 = HIBYTE(v160);
                }
                else
                {
                  *(_WORD *)v50 = v31;
                  *v47 = v17;
                }
              }
              else
              {
                *(_WORD *)v50 = PDAexclusionPDA(*(unsigned __int16 *)v50, 0xFFu, v31, v17);
              }
              v50 += 2;
              v47 += v829;
              --v158;
            }
            while (v158);
            v50 += 2 * v858;
            v47 += v859;
            --v863[0];
          }
          while (v863[0]);
          goto LABEL_314;
        case 24:
          if (v17 < 8)
            goto LABEL_315;
          do
          {
            v161 = v873[0];
            do
            {
              if (v7)
              {
                v162 = *v47;
                if (v162 > 7)
                {
                  v163 = PDAhuePDA(*(unsigned __int16 *)v50, v162, v31, v17);
                  *(_WORD *)v50 = v163;
                  *v47 = HIBYTE(v163);
                }
                else
                {
                  *(_WORD *)v50 = v31;
                  *v47 = v17;
                }
              }
              else
              {
                *(_WORD *)v50 = PDAhuePDA(*(unsigned __int16 *)v50, 0xFFu, v31, v17);
              }
              v50 += 2;
              v47 += v829;
              --v161;
            }
            while (v161);
            v50 += 2 * v858;
            v47 += v859;
            --v863[0];
          }
          while (v863[0]);
          goto LABEL_314;
        case 25:
          if (v17 < 8)
            goto LABEL_315;
          do
          {
            v164 = v873[0];
            do
            {
              if (v7)
              {
                v165 = *v47;
                if (v165 > 7)
                {
                  v166 = PDAsaturationPDA(*(unsigned __int16 *)v50, v165, v31, v17);
                  *(_WORD *)v50 = v166;
                  *v47 = HIBYTE(v166);
                }
                else
                {
                  *(_WORD *)v50 = v31;
                  *v47 = v17;
                }
              }
              else
              {
                *(_WORD *)v50 = PDAsaturationPDA(*(unsigned __int16 *)v50, 0xFFu, v31, v17);
              }
              v50 += 2;
              v47 += v829;
              --v164;
            }
            while (v164);
            v50 += 2 * v858;
            v47 += v859;
            --v863[0];
          }
          while (v863[0]);
          goto LABEL_314;
        case 26:
          if (v17 < 8)
            goto LABEL_315;
          do
          {
            v167 = v873[0];
            do
            {
              if (v7)
              {
                v168 = *v47;
                if (v168 > 7)
                {
                  v169 = PDAluminosityPDA(v31, v17, *(unsigned __int16 *)v50, v168);
                  *(_WORD *)v50 = v169;
                  *v47 = HIBYTE(v169);
                }
                else
                {
                  *(_WORD *)v50 = v31;
                  *v47 = v17;
                }
              }
              else
              {
                *(_WORD *)v50 = PDAluminosityPDA(v31, v17, *(unsigned __int16 *)v50, 0xFFu);
              }
              v50 += 2;
              v47 += v829;
              --v167;
            }
            while (v167);
            v50 += 2 * v858;
            v47 += v859;
            --v863[0];
          }
          while (v863[0]);
          goto LABEL_314;
        case 27:
          if (v17 < 8)
            goto LABEL_315;
          do
          {
            v170 = v873[0];
            do
            {
              if (v7)
              {
                v171 = *v47;
                if (v171 > 7)
                {
                  v172 = PDAluminosityPDA(*(unsigned __int16 *)v50, v171, v31, v17);
                  *(_WORD *)v50 = v172;
                  *v47 = HIBYTE(v172);
                }
                else
                {
                  *(_WORD *)v50 = v31;
                  *v47 = v17;
                }
              }
              else
              {
                *(_WORD *)v50 = PDAluminosityPDA(*(unsigned __int16 *)v50, 0xFFu, v31, v17);
              }
              v50 += 2;
              v47 += v829;
              --v170;
            }
            while (v170);
            v50 += 2 * v858;
            v47 += v859;
            --v863[0];
          }
          while (v863[0]);
          goto LABEL_314;
        default:
          goto LABEL_315;
      }
      while (1)
      {
LABEL_128:
        v112 = v873[0];
        do
        {
          v113 = *v47;
          if (v113 > 7)
          {
            if (v113 > 0xF7)
              goto LABEL_134;
            v115 = PDAplusDAM(*(unsigned __int16 *)v50, v113, v31, v17, ~(_BYTE)v113);
            *(_WORD *)v50 = v115;
            v114 = HIBYTE(v115);
          }
          else
          {
            *(_WORD *)v50 = v31;
            LOBYTE(v114) = v17;
          }
          *v47 = v114;
LABEL_134:
          v50 += 2;
          v47 += v829;
          --v112;
        }
        while (v112);
        v50 += 2 * v858;
        v47 += v859;
        if (!--v863[0])
        {
LABEL_314:
          v8 = v788;
LABEL_315:
          v46 = v855;
          if (v855)
          {
            v862 = 0;
LABEL_317:
            if (shape_enum_clip_next(v46, (int *)&v862 + 1, &v862, v873, v863))
            {
              v855 = v46;
              v50 = (char *)(v48 + 2 * v34 * (int)v862 + 2 * SHIDWORD(v862));
              v51 = v873[0];
              if (v7)
                v47 = &v831[(int)v833 * (uint64_t)(int)v862 + SHIDWORD(v862)];
              v173 = v859;
              if (v7)
                v173 = v833 - v873[0];
              v859 = v173;
              LODWORD(v11) = v873[0];
              goto LABEL_76;
            }
            v62 = (void *)v46;
LABEL_1042:
            free(v62);
          }
          return 1;
        }
      }
    }
    v873[0] = *(_DWORD *)(v3 + 4);
    v863[0] = v13;
    v18 = *(int *)(v3 + 28);
    v19 = *(_QWORD *)(v3 + 40);
    v20 = *(_QWORD *)(v3 + 88);
    v22 = *(int *)(v10 + 12);
    v21 = *(int *)(v10 + 16);
    v23 = v18 >> 1;
    if (v7)
    {
      v784 = *(int *)(v10 + 32);
      v785 = (char *)(v7 + v22 + (int)v784 * (uint64_t)(int)v21);
      v24 = 0xFFFFFFFFLL;
    }
    else
    {
      v784 = 0;
      v785 = 0;
      v24 = 0;
    }
    v783 = v19 + 2 * (v22 + v21 * v23);
    v35 = *(_DWORD *)(v10 + 104);
    v36 = *(_DWORD *)(v10 + 108);
    v37 = *(_DWORD *)(v10 + 56);
    v38 = BYTE1(v5);
    v746 = v37;
    v747 = *(_DWORD *)(v10 + 60);
    if (v38 == 3)
    {
      v860 = *(_DWORD *)(v10 + 104);
      v57 = v11;
      v58 = v24;
      v2 = rgb555_colorlookup(3, (unsigned __int16 *)v20, v6);
      if (v6)
      {
        v59 = 0;
        v20 = v2;
        v6 = (unsigned __int8 *)(v2 + 512);
        v42 = 1;
        v60 = 16;
        v61 = 16;
        v825 = 16;
      }
      else
      {
        v20 = v2;
        v825 = 0;
        v42 = 0;
        v60 = 16;
        v59 = 1;
        v61 = 16;
      }
      LODWORD(v794) = 16;
      LOBYTE(v24) = v58;
      v39 = v23;
      v11 = v57;
      v35 = v860;
    }
    else
    {
      v39 = v18 >> 1;
      if (v38 == 1)
      {
        v40 = *(int *)(v10 + 60);
        v794 = (unint64_t)*(int *)(v10 + 76) >> 1;
        if (v6)
        {
          v41 = *(int *)(v10 + 80);
          v6 += v37 + (int)v41 * (uint64_t)(int)v40;
          v42 = -1;
        }
        else
        {
          v41 = 0;
          v42 = 0;
        }
        v857 = (__int16 *)(v20 + 2 * (v37 + v40 * v794));
        if (v794 == v23 && (uint64_t)(v783 - (_QWORD)v857) >= 1)
        {
          if (v11 >= (v783 - (unint64_t)v857) >> 1)
          {
            v783 += 2 * v12;
            v785 += v24 & v12;
            v6 += v42 & v12;
            v63 = -1;
            v794 = v23;
            v857 += v12;
            goto LABEL_52;
          }
          if (v783 <= (unint64_t)&v857[v23 * v14 + v12])
          {
            v39 = -(uint64_t)v23;
            v77 = &v785[v784 * v14];
            v784 = -v784;
            v785 = v77;
            v24 &= 1u;
            v6 += v41 * v14;
            v41 = -v41;
            v42 &= 1u;
            v63 = 1;
            v857 += v23 * v14;
            v794 = -(uint64_t)v23;
            v783 += 2 * v23 * v14;
            goto LABEL_52;
          }
        }
        v24 &= 1u;
        v42 &= 1u;
        v63 = 1;
LABEL_52:
        if (v15)
        {
          v856 = v42;
          v832 = v24;
          v825 = v41;
          v828 = 0;
          v20 = -1;
          v820 = 0;
          v822 = v794;
          goto LABEL_60;
        }
        v787 = v63;
        v64 = v63 * (int)v11;
        v818 = v784 - (int)v24 * (int)v11;
        v65 = -1;
        v66 = v41;
        v67 = v794;
LABEL_73:
        v793 = 0;
        v820 = 0;
        v822 = v67 - v64;
        v795 = v11;
        v825 = v66 - v42 * (int)v11;
        v828 = 0;
        v70 = (uint64_t)v857;
        v71 = (char *)v6;
        v830 = (char *)v6;
        v72 = v785;
        v861 = (_BYTE *)v783;
        goto LABEL_358;
      }
      LODWORD(v794) = *(_DWORD *)(v10 + 64);
      v61 = *(unsigned int *)(v10 + 68);
      v60 = (unint64_t)*(int *)(v10 + 76) >> 1;
      if (v6)
      {
        v59 = 0;
        v825 = *(int *)(v10 + 80);
        v42 = 1;
      }
      else
      {
        v825 = 0;
        v42 = 0;
        v59 = 1;
      }
    }
    v41 = v61;
    v820 = v20 + 2 * v60 * (int)v61;
    v822 = v60;
    v24 &= 1u;
    if (v15)
    {
      v856 = v42;
      v857 = (__int16 *)v20;
      v832 = v24;
      v63 = 1;
      v828 = (__int16 *)v20;
LABEL_60:
      v834 = v20;
      v787 = v63;
      shape_enum_clip_alloc(v2, v20, (int *)v15, v63, v39, 1, v35, v36, v11, v13);
      v69 = v68;
      v70 = (uint64_t)v857;
      v71 = (char *)v6;
      v830 = (char *)v6;
      v72 = v785;
      v818 = v784;
      if (!v68)
        return 1;
      goto LABEL_1015;
    }
    v818 = v784 - (v24 * v11);
    if (!v20)
    {
      v857 = 0;
      v65 = 0;
      v787 = 1;
      v64 = v11;
      v67 = v60;
      v66 = v825;
      goto LABEL_73;
    }
    v70 = v20;
    v73 = v747 % (int)v61;
    v74 = v746 % (int)v794;
    v75 = v20 + 2 * v60 * v73;
    v65 = v75 + 2 * (int)v794;
    v787 = 1;
    if ((v59 & 1) == 0)
      v42 = 1;
    v793 = 0;
    if ((v59 & 1) != 0)
      v71 = (char *)v6;
    else
      v71 = (char *)&v6[(int)v825 * (uint64_t)v73 + v74];
    if ((v59 & 1) != 0)
      v76 = (uint64_t)v6;
    else
      v76 = (uint64_t)&v6[(int)v825 * (uint64_t)v73 + v74];
    v828 = (__int16 *)(v75 + 2 * v74);
    v830 = (char *)v76;
    v72 = v785;
    v857 = v828;
    v861 = (_BYTE *)v783;
    v795 = v11;
    v64 = v11;
LABEL_357:
    v746 = v74;
    v747 = v73;
LABEL_358:
    v832 = v24;
    v856 = v42;
    v819 = v39 - v64;
    v789 = v39;
    v790 = v6;
    v791 = v70;
    v792 = v41;
    switch(v8)
    {
      case 0:
        v834 = v65;
        v191 = v819 - v795;
        v192 = &v861[-2 * v795 + 2];
        if (v787 >= 0)
        {
          v192 = v861;
          v191 = v819 + v795;
        }
        v193 = v863[0];
        v194 = v863[0] - 1;
        v195 = &v192[2 * ((v191 * v194) & (v191 >> 63))];
        if (v191 < 0)
          v191 = -v191;
        v196 = v24;
        CGBlt_fillBytes(2 * v795, v863[0], 0, v195, 2 * v191);
        if (v196)
        {
          v197 = v818 - v795;
          v198 = &v72[-v795 + 1];
          if (v787 >= 0)
          {
            v198 = v72;
            v197 = v818 + v795;
          }
          v199 = (v197 * v194) & (v197 >> 63);
          if (v197 >= 0)
            v200 = v197;
          else
            v200 = -v197;
          v72 = &v198[v199];
          v818 = v200;
          CGBlt_fillBytes(v795, v193, 0, &v198[v199], v200);
        }
        goto LABEL_1011;
      case 1:
        v201 = *(unsigned __int8 *)(v10 + 1);
        if ((v201 - 2) < 2)
        {
          if (v795 >= 16 && (2 * v794) <= 0x40)
          {
            v4.i32[0] = 2 * v794;
            v202 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v4.i8);
            v202.i16[0] = vaddlv_u8(v202);
            if (v202.i32[0] <= 1u)
            {
              v834 = v65;
              v203 = v863[0];
              CGSFillDRAM64(v861, 2 * (v795 + v819), 2 * v795, v863[0], v70, 2 * v822, 2 * v794, v41, 2 * v746, v747);
              if (!(_DWORD)v832)
                goto LABEL_1013;
              v204 = v203;
              v69 = v793;
              if (v856)
              {
                CGSFillDRAM64(v72, v795 + v818, v795, v204, (uint64_t)v6, v825, v794, v41, v746, v747);
                if (!v793)
                  return 1;
              }
              else
              {
                CGBlt_fillBytes(v795, v204, -1, v72, v795 + v818);
                if (!v793)
                  return 1;
              }
              goto LABEL_1014;
            }
          }
LABEL_953:
          if ((_DWORD)v24)
          {
            v615 = (int)v24;
            if (v42)
            {
              do
              {
                v616 = v873[0];
                do
                {
                  *(_WORD *)v861 = *v857;
                  *v72 = *v71;
                  v72 += v615;
                  v617 = &v857[v787];
                  if ((unint64_t)v617 >= v65)
                    v618 = -(uint64_t)(int)v794;
                  else
                    v618 = 0;
                  v71 += v42 + v618;
                  v857 = &v617[v618];
                  v861 += 2 * v787;
                  --v616;
                }
                while (v616);
                if (v820)
                {
                  v619 = &v828[v822];
                  v620 = (unint64_t)v619 >= v820;
                  if ((unint64_t)v619 >= v820)
                    v621 = -(uint64_t)(v822 * (int)v41);
                  else
                    v621 = 0;
                  v622 = &v619[v621];
                  v623 = v65 + 2 * v621;
                  if (v620)
                    v624 = -(v825 * (int)v41);
                  else
                    v624 = 0;
                  v65 = v623 + 2 * v822;
                  v857 = v622;
                  v828 = v622;
                  v830 += v825 + v624;
                  v71 = v830;
                }
                else
                {
                  v857 += v822;
                  v71 += v825;
                }
                v861 += 2 * v819;
                v72 += v818;
                --v863[0];
              }
              while (v863[0]);
            }
            else
            {
              do
              {
                v726 = v873[0];
                do
                {
                  *(_WORD *)v861 = *v857;
                  *v72 = -1;
                  v72 += v615;
                  v727 = &v857[v787];
                  if ((unint64_t)v727 >= v65)
                    v728 = -(uint64_t)(int)v794;
                  else
                    v728 = 0;
                  v71 += v728;
                  v857 = &v727[v728];
                  v861 += 2 * v787;
                  --v726;
                }
                while (v726);
                if (v820)
                {
                  v729 = &v828[v822];
                  v730 = (unint64_t)v729 >= v820;
                  if ((unint64_t)v729 >= v820)
                    v731 = -(uint64_t)(v822 * (int)v41);
                  else
                    v731 = 0;
                  v732 = &v729[v731];
                  v733 = v65 + 2 * v731;
                  if (v730)
                    v734 = -(v825 * (int)v41);
                  else
                    v734 = 0;
                  v65 = v733 + 2 * v822;
                  v857 = v732;
                  v828 = v732;
                  v830 += v825 + v734;
                  v71 = v830;
                }
                else
                {
                  v857 += v822;
                  v71 += v825;
                }
                v861 += 2 * v819;
                v72 += v818;
                --v863[0];
              }
              while (v863[0]);
            }
LABEL_1153:
            v834 = v65;
          }
          else
          {
            v714 = v42;
            v715 = v863[0];
            v716 = (v863[0] - 1) + 1;
            do
            {
              v717 = v795;
              do
              {
                *(_WORD *)v861 = *v857;
                v718 = &v857[v787];
                if ((unint64_t)v718 >= v65)
                  v719 = -(uint64_t)(int)v794;
                else
                  v719 = 0;
                v71 += v714 + v719;
                v857 = &v718[v719];
                v861 += 2 * v787;
                --v717;
              }
              while (v717);
              if (v820)
              {
                v720 = &v828[v822];
                v721 = (unint64_t)v720 >= v820;
                if ((unint64_t)v720 >= v820)
                  v722 = -(uint64_t)(v822 * (int)v41);
                else
                  v722 = 0;
                v723 = &v720[v722];
                v724 = v65 + 2 * v722;
                if (v721)
                  v725 = -(v825 * (int)v41);
                else
                  v725 = 0;
                v65 = v724 + 2 * v822;
                v857 = v723;
                v828 = v723;
                v830 += v825 + v725;
                v71 = v830;
              }
              else
              {
                v857 += v822;
                v71 += v825;
              }
              v861 += 2 * v819;
              --v715;
            }
            while (v715);
            v834 = v65;
            v72 += v818 * v716;
LABEL_1137:
            v863[0] = 0;
          }
          goto LABEL_1013;
        }
        if (v201 != 1)
          goto LABEL_953;
        v834 = v65;
        v601 = v39;
        v602 = v6;
        v603 = v822 - v795;
        v604 = v795 - 1;
        v605 = &v857[-v795 + 1];
        v606 = v819 - v795;
        v607 = &v861[-2 * v795 + 2];
        if (v787 >= 0)
        {
          v605 = v857;
          v607 = v861;
          v603 = v822 + v795;
          v606 = v819 + v795;
        }
        v608 = v863[0];
        v609 = v863[0] - 1;
        v610 = (char *)&v605[(v603 * v609) & (v603 >> 63)];
        if (v603 >= 0)
          v611 = v603;
        else
          v611 = -v603;
        if (v606 >= 0)
          LODWORD(v612) = v606;
        else
          v612 = -v606;
        v822 = v611;
        CGBlt_copyBytes(2 * v795, v863[0], v610, &v607[2 * ((v606 * v609) & (v606 >> 63))], 2 * v611, 2 * v612);
        if (!(_DWORD)v832)
          goto LABEL_1160;
        if (v856)
        {
          if (v787 < 0)
          {
            v613 = v825 - v795;
            v71 -= v604;
            v614 = v818 - v795;
            v72 -= v604;
          }
          else
          {
            v613 = v825 + v795;
            v614 = v818 + v795;
          }
          v6 = v602;
          v739 = (v613 * v609) & (v613 >> 63);
          v740 = &v71[v739];
          if (v613 >= 0)
            v741 = v613;
          else
            v741 = -v613;
          v742 = (v614 * v609) & (v614 >> 63);
          v743 = &v72[v742];
          if (v614 >= 0)
            v744 = v614;
          else
            v744 = -v614;
          v71 += v739;
          v72 += v742;
          v825 = v741;
          v818 = v744;
          CGBlt_copyBytes(v795, v608, v740, v743, v741, v744);
          v10 = v786;
        }
        else
        {
          v735 = v818 - v795;
          v736 = &v72[-v604];
          if (v787 >= 0)
          {
            v736 = v72;
            v735 = v818 + v795;
          }
          v737 = (v735 * v609) & (v735 >> 63);
          if (v735 >= 0)
            v738 = v735;
          else
            v738 = -v735;
          v72 = &v736[v737];
          v818 = v738;
          CGBlt_fillBytes(v795, v608, -1, &v736[v737], v738);
LABEL_1160:
          v10 = v786;
          v6 = v602;
        }
        v39 = v601;
        goto LABEL_1012;
      case 2:
        v205 = v787;
        v752 = -(v825 * (int)v41);
        v757 = -(uint64_t)(v822 * (int)v41);
        if ((_DWORD)v24)
        {
          v206 = (int)v24;
          v207 = v42;
          while (1)
          {
            v208 = v873[0];
            do
            {
              v209 = *v71;
              if (v209 < 0xF8)
              {
                if (v209 < 8)
                  goto LABEL_386;
                v211 = v65;
                v212 = PDAplusDAM((unsigned __int16)*v857, v209, *(unsigned __int16 *)v861, *v72, v209 ^ 0xFF);
                v205 = v787;
                v65 = v211;
                *(_WORD *)v861 = v212;
                v210 = HIBYTE(v212);
              }
              else
              {
                *(_WORD *)v861 = *v857;
                LOBYTE(v210) = *v71;
              }
              *v72 = v210;
LABEL_386:
              v72 += v206;
              v213 = &v857[v205];
              if ((unint64_t)v213 >= v65)
                v214 = -(uint64_t)(int)v794;
              else
                v214 = 0;
              v71 += v207 + v214;
              v857 = &v213[v214];
              v861 += 2 * v787;
              --v208;
            }
            while (v208);
            if (v820)
            {
              v215 = &v828[v822];
              v216 = (unint64_t)v215 >= v820;
              v217 = v757;
              if ((unint64_t)v215 < v820)
                v217 = 0;
              v218 = &v215[v217];
              v219 = v65 + 2 * v217;
              v220 = v752;
              if (!v216)
                v220 = 0;
              v65 = v219 + 2 * v822;
              v857 = v218;
              v828 = v218;
              v830 += v825 + v220;
              v71 = v830;
            }
            else
            {
              v857 += v822;
              v71 += v825;
            }
            v861 += 2 * v819;
            v72 += v818;
            if (!--v863[0])
              goto LABEL_1009;
          }
        }
        v625 = v42;
        v626 = v863[0];
        v751 = (v863[0] - 1) + 1;
LABEL_972:
        v627 = v795;
        while (1)
        {
          v628 = *v71;
          if (v628 >= 0xF8)
            break;
          if (v628 >= 8)
          {
            v630 = v65;
            v629 = PDplusDM(*v857, *(unsigned __int16 *)v861, v628 ^ 0xFF);
            v205 = v787;
            v65 = v630;
            goto LABEL_977;
          }
LABEL_978:
          v631 = &v857[v205];
          if ((unint64_t)v631 >= v65)
            v632 = -(uint64_t)(int)v794;
          else
            v632 = 0;
          v71 += v625 + v632;
          v857 = &v631[v632];
          v861 += 2 * v787;
          if (!--v627)
          {
            if (v820)
            {
              v633 = &v828[v822];
              v634 = (unint64_t)v633 >= v820;
              v635 = v757;
              if ((unint64_t)v633 < v820)
                v635 = 0;
              v636 = &v633[v635];
              v637 = v65 + 2 * v635;
              v638 = v752;
              if (!v634)
                v638 = 0;
              v65 = v637 + 2 * v822;
              v857 = v636;
              v828 = v636;
              v830 += v825 + v638;
              v71 = v830;
            }
            else
            {
              v857 += v822;
              v71 += v825;
            }
            v861 += 2 * v819;
            v863[0] = --v626;
            if (!v626)
            {
LABEL_1101:
              v834 = v65;
              v687 = v818;
              v688 = v751;
LABEL_1102:
              v72 += v687 * v688;
LABEL_1010:
              v8 = v788;
LABEL_1011:
              v10 = v786;
              v39 = v789;
              v6 = v790;
LABEL_1012:
              v70 = v791;
              v41 = v792;
LABEL_1013:
              v69 = v793;
              if (!v793)
                return 1;
LABEL_1014:
              v862 = 0;
LABEL_1015:
              if (!shape_enum_clip_next(v69, (int *)&v862 + 1, &v862, v873, v863))
              {
                v62 = (void *)v69;
                goto LABEL_1042;
              }
              v793 = v69;
              if (v820)
              {
                v861 = (_BYTE *)(v783 + 2 * v39 * (int)v862 + 2 * SHIDWORD(v862));
                v73 = ((int)v862 + *(_DWORD *)(v10 + 60)) % (int)v41;
                v64 = v873[0];
                v74 = (HIDWORD(v862) + *(_DWORD *)(v10 + 56)) % (int)v794;
                v652 = v70 + 2 * v822 * v73;
                v653 = (__int16 *)(v652 + 2 * v74);
                v65 = v652 + 2 * (int)v794;
                v24 = v832;
                if ((_DWORD)v832)
                  v72 = &v785[v784 * (int)v862 + SHIDWORD(v862)];
                v654 = v818;
                if ((_DWORD)v832)
                  v654 = v784 - v873[0];
                v818 = v654;
                if (v856)
                  v42 = v856;
                else
                  v42 = 0;
                if (v856)
                  v71 = (char *)&v6[v825 * v73 + v74];
                v655 = (unsigned __int8 *)v830;
                if (v856)
                  v655 = &v6[v825 * v73 + v74];
                v828 = v653;
                v830 = (char *)v655;
                v795 = v873[0];
                v857 = v653;
                goto LABEL_357;
              }
              v656 = SHIDWORD(v862) * (uint64_t)v787;
              v795 = v873[0];
              v861 = (_BYTE *)(v783 + 2 * v39 * (int)v862 + 2 * v656);
              v64 = v873[0] * v787;
              v857 = (__int16 *)(v70 + 2 * (int)v862 * (int)v794 + 2 * v656);
              v822 = (int)v794 - v873[0] * v787;
              v24 = v832;
              v65 = v834;
              if ((_DWORD)v832)
                v72 = &v785[v784 * (int)v862 + SHIDWORD(v862) * (uint64_t)v787];
              v657 = v818;
              if ((_DWORD)v832)
                v657 = v784 - v873[0] * v787;
              v818 = v657;
              if (v856)
                v42 = v856;
              else
                v42 = 0;
              v820 = 0;
              if (v856)
                v71 = (char *)&v6[(int)v862 * (int)v41 + v656];
              v658 = v825;
              if (v856)
                v658 = (int)v41 - (int)v64;
              v825 = v658;
              goto LABEL_358;
            }
            goto LABEL_972;
          }
        }
        v629 = *v857;
LABEL_977:
        *(_WORD *)v861 = v629;
        goto LABEL_978;
      case 3:
        v221 = v787;
        v222 = (int)v24;
        v748 = -(v825 * (int)v41);
        v753 = -(uint64_t)(v822 * (int)v41);
        if (v42)
        {
          v223 = v42;
          v835 = (int)v24;
          do
          {
            v224 = v873[0];
            do
            {
              v225 = *v72;
              if (v225 > 7)
              {
                v227 = (unsigned __int16)*v857;
                if (v225 < 0xF8)
                {
                  v228 = v221;
                  v229 = v65;
                  v230 = PDAM(v227, *v71, v225);
                  v65 = v229;
                  v221 = v228;
                  v222 = v835;
                  *(_WORD *)v861 = v230;
                  v226 = HIBYTE(v230);
                }
                else
                {
                  *(_WORD *)v861 = v227;
                  LOBYTE(v226) = *v71;
                }
              }
              else
              {
                LOBYTE(v226) = 0;
                *(_WORD *)v861 = 0;
              }
              *v72 = v226;
              v72 += v222;
              v231 = &v857[v221];
              if ((unint64_t)v231 >= v65)
                v232 = -(uint64_t)(int)v794;
              else
                v232 = 0;
              v71 += v223 + v232;
              v857 = &v231[v232];
              v861 += 2 * v787;
              --v224;
            }
            while (v224);
            if (v820)
            {
              v233 = &v828[v822];
              v234 = (unint64_t)v233 >= v820;
              v235 = v753;
              if ((unint64_t)v233 < v820)
                v235 = 0;
              v236 = &v233[v235];
              v237 = v65 + 2 * v235;
              v238 = v748;
              if (!v234)
                v238 = 0;
              v65 = v237 + 2 * v822;
              v857 = v236;
              v828 = v236;
              v830 += v825 + v238;
              v71 = v830;
            }
            else
            {
              v857 += v822;
              v71 += v825;
            }
            v861 += 2 * v819;
            v72 += v818;
            --v863[0];
          }
          while (v863[0]);
        }
        else
        {
          v639 = v863[0];
          do
          {
            v780 = v639;
            v640 = v795;
            do
            {
              v641 = *v72;
              if (v641 >= 8)
              {
                v642 = (unsigned __int16)*v857;
                if (v641 <= 0xF7)
                {
                  v643 = v65;
                  LOWORD(v642) = PDM(v642, v641);
                  v65 = v643;
                }
              }
              else
              {
                LOWORD(v642) = 0;
              }
              *(_WORD *)v861 = v642;
              v72 += v222;
              v644 = &v857[v787];
              if ((unint64_t)v644 >= v65)
                v645 = -(uint64_t)(int)v794;
              else
                v645 = 0;
              v71 += v645;
              v857 = &v644[v645];
              v861 += 2 * v787;
              --v640;
            }
            while (v640);
            if (v820)
            {
              v646 = &v828[v822];
              v647 = (unint64_t)v646 >= v820;
              v648 = v753;
              if ((unint64_t)v646 < v820)
                v648 = 0;
              v649 = &v646[v648];
              v650 = v65 + 2 * v648;
              v651 = v748;
              if (!v647)
                v651 = 0;
              v65 = v650 + 2 * v822;
              v857 = v649;
              v828 = v649;
              v830 += v825 + v651;
              v71 = v830;
            }
            else
            {
              v857 += v822;
              v71 += v825;
            }
            v861 += 2 * v819;
            v72 += v818;
            v639 = v780 - 1;
            v863[0] = v780 - 1;
          }
          while (v780 != 1);
        }
        goto LABEL_1009;
      case 4:
        v239 = (int)v24;
        v240 = v42;
        v797 = -(uint64_t)(v822 * (int)v41);
        v758 = -(v825 * (int)v41);
        do
        {
          v241 = v873[0];
          v836 = v65;
          do
          {
            v242 = *v72;
            if (v242 < 0xF8)
            {
              if (v242 > 7)
              {
                if (v42)
                  v244 = *v71;
                else
                  v244 = -1;
                v245 = PDAM((unsigned __int16)*v857, v244, ~(_BYTE)v242);
                *(_WORD *)v861 = v245;
                v243 = HIBYTE(v245);
                v65 = v836;
                v42 = v856;
              }
              else if (v42)
              {
                LOBYTE(v243) = *v71;
              }
              else
              {
                LOBYTE(v243) = -1;
              }
            }
            else
            {
              LOBYTE(v243) = 0;
              *(_WORD *)v861 = 0;
            }
            *v72 = v243;
            v72 += v239;
            v246 = &v857[v787];
            if ((unint64_t)v246 >= v65)
              v247 = -(uint64_t)(int)v794;
            else
              v247 = 0;
            v71 += v240 + v247;
            v857 = &v246[v247];
            v861 += 2 * v787;
            --v241;
          }
          while (v241);
          if (v820)
          {
            v248 = &v828[v822];
            v249 = (unint64_t)v248 >= v820;
            v250 = v797;
            if ((unint64_t)v248 < v820)
              v250 = 0;
            v251 = &v248[v250];
            v252 = v65 + 2 * v250;
            v253 = v758;
            if (!v249)
              v253 = 0;
            v65 = v252 + 2 * v822;
            v857 = v251;
            v828 = v251;
            v830 += v825 + v253;
            v71 = v830;
          }
          else
          {
            v857 += v822;
            v71 += v825;
          }
          v861 += 2 * v819;
          v72 += v818;
          --v863[0];
        }
        while (v863[0]);
        goto LABEL_1009;
      case 5:
        v254 = (int)v24;
        v255 = v42;
        v798 = -(uint64_t)(v822 * (int)v41);
        v759 = -(v825 * (int)v41);
        v256 = -(uint64_t)(int)v794;
        do
        {
          v257 = v873[0];
          do
          {
            v837 = v71;
            v258 = *v71;
            v259 = v65;
            v260 = v256;
            v261 = PDAMplusDAM((unsigned __int16)*v857, v258, *v72, *(unsigned __int16 *)v861, *v72, v258 ^ 0xFFu);
            v256 = v260;
            v65 = v259;
            *(_WORD *)v861 = v261;
            *v72 = BYTE3(v261);
            v262 = &v72[v254];
            v263 = &v857[v787];
            v72 += v254;
            if ((unint64_t)v263 >= v259)
              v264 = v260;
            else
              v264 = 0;
            v71 = &v837[v255 + v264];
            v857 = &v263[v264];
            v861 += 2 * v787;
            --v257;
          }
          while (v257);
          if (v820)
          {
            v265 = &v828[v822];
            v266 = (unint64_t)v265 >= v820;
            v267 = v798;
            if ((unint64_t)v265 < v820)
              v267 = 0;
            v268 = &v265[v267];
            v269 = v259 + 2 * v267;
            v270 = v759;
            if (!v266)
              v270 = 0;
            v65 = v269 + 2 * v822;
            v857 = v268;
            v828 = v268;
            v830 += v825 + v270;
            v71 = v830;
          }
          else
          {
            v857 += v822;
            v71 += v825;
          }
          v861 += 2 * v819;
          v72 = &v262[v818];
          --v863[0];
        }
        while (v863[0]);
        goto LABEL_1009;
      case 6:
        v271 = (int)v24;
        v272 = v42;
        v799 = -(uint64_t)(v822 * (int)v41);
        v760 = -(v825 * (int)v41);
        while (1)
        {
          v273 = v873[0];
          v838 = v65;
          do
          {
            v274 = *v72;
            if (v274 > 7)
            {
              if (v274 > 0xF7)
                goto LABEL_472;
              if (v42)
                v276 = *v71;
              else
                v276 = -1;
              v277 = PDAplusDAM(*(unsigned __int16 *)v861, v274, (unsigned __int16)*v857, v276, ~(_BYTE)v274);
              *(_WORD *)v861 = v277;
              v275 = HIBYTE(v277);
              v65 = v838;
              v42 = v856;
            }
            else
            {
              *(_WORD *)v861 = *v857;
              if (v42)
                LOBYTE(v275) = *v71;
              else
                LOBYTE(v275) = -1;
            }
            *v72 = v275;
LABEL_472:
            v72 += v271;
            v278 = &v857[v787];
            if ((unint64_t)v278 >= v65)
              v279 = -(uint64_t)(int)v794;
            else
              v279 = 0;
            v71 += v272 + v279;
            v857 = &v278[v279];
            v861 += 2 * v787;
            --v273;
          }
          while (v273);
          if (v820)
          {
            v280 = &v828[v822];
            v281 = (unint64_t)v280 >= v820;
            v282 = v799;
            if ((unint64_t)v280 < v820)
              v282 = 0;
            v283 = &v280[v282];
            v284 = v65 + 2 * v282;
            v285 = v760;
            if (!v281)
              v285 = 0;
            v65 = v284 + 2 * v822;
            v857 = v283;
            v828 = v283;
            v830 += v825 + v285;
            v71 = v830;
          }
          else
          {
            v857 += v822;
            v71 += v825;
          }
          v861 += 2 * v819;
          v72 += v818;
          if (!--v863[0])
          {
LABEL_1009:
            v834 = v65;
            goto LABEL_1010;
          }
        }
      case 7:
        v286 = v787;
        v749 = -(v825 * (int)v41);
        v754 = -(uint64_t)(v822 * (int)v41);
        if ((_DWORD)v24)
        {
          v287 = (int)v24;
          v288 = v42;
          while (1)
          {
            v289 = v873[0];
            do
            {
              v290 = *v71;
              if (v290 > 7)
              {
                if (v290 > 0xF7)
                  goto LABEL_493;
                v292 = v65;
                v293 = PDAM(*(unsigned __int16 *)v861, *v72, v290);
                v65 = v292;
                v286 = v787;
                *(_WORD *)v861 = v293;
                v291 = HIBYTE(v293);
              }
              else
              {
                LOBYTE(v291) = 0;
                *(_WORD *)v861 = 0;
              }
              *v72 = v291;
LABEL_493:
              v72 += v287;
              v294 = &v857[v286];
              if ((unint64_t)v294 >= v65)
                v295 = -(uint64_t)(int)v794;
              else
                v295 = 0;
              v71 += v288 + v295;
              v857 = &v294[v295];
              v861 += 2 * v787;
              --v289;
            }
            while (v289);
            if (v820)
            {
              v296 = &v828[v822];
              v297 = (unint64_t)v296 >= v820;
              v298 = v754;
              if ((unint64_t)v296 < v820)
                v298 = 0;
              v299 = &v296[v298];
              v300 = v65 + 2 * v298;
              v301 = v749;
              if (!v297)
                v301 = 0;
              v65 = v300 + 2 * v822;
              v857 = v299;
              v828 = v299;
              v830 += v825 + v301;
              v71 = v830;
            }
            else
            {
              v857 += v822;
              v71 += v825;
            }
            v861 += 2 * v819;
            v72 += v818;
            if (!--v863[0])
              goto LABEL_1009;
          }
        }
        v659 = v42;
        v660 = v863[0];
        v745 = (v863[0] - 1) + 1;
LABEL_1045:
        v781 = v660;
        v661 = v795;
        while (1)
        {
          v662 = *v71;
          if (v662 < 8)
            break;
          if (v662 <= 0xF7)
          {
            v664 = v65;
            v663 = PDM(*(unsigned __int16 *)v861, v662);
            v65 = v664;
            goto LABEL_1050;
          }
LABEL_1051:
          v665 = &v857[v787];
          if ((unint64_t)v665 >= v65)
            v666 = -(uint64_t)(int)v794;
          else
            v666 = 0;
          v71 += v659 + v666;
          v857 = &v665[v666];
          v861 += 2 * v787;
          if (!--v661)
          {
            if (v820)
            {
              v667 = &v828[v822];
              v668 = (unint64_t)v667 >= v820;
              v669 = v754;
              if ((unint64_t)v667 < v820)
                v669 = 0;
              v670 = &v667[v669];
              v671 = v65 + 2 * v669;
              v672 = v749;
              if (!v668)
                v672 = 0;
              v65 = v671 + 2 * v822;
              v857 = v670;
              v828 = v670;
              v830 += v825 + v672;
              v71 = v830;
            }
            else
            {
              v857 += v822;
              v71 += v825;
            }
            v861 += 2 * v819;
            v660 = v781 - 1;
            v863[0] = v781 - 1;
            if (v781 == 1)
            {
LABEL_1083:
              v834 = v65;
              v687 = v818;
              v688 = v745;
              goto LABEL_1102;
            }
            goto LABEL_1045;
          }
        }
        v663 = 0;
LABEL_1050:
        *(_WORD *)v861 = v663;
        goto LABEL_1051;
      case 8:
        v302 = v787;
        v750 = -(v825 * (int)v41);
        v755 = -(uint64_t)(v822 * (int)v41);
        if ((_DWORD)v24)
        {
          v303 = (int)v24;
          v304 = v42;
          while (1)
          {
            v305 = v873[0];
            do
            {
              v306 = *v71;
              if (v306 < 0xF8)
              {
                if (v306 < 8)
                  goto LABEL_514;
                v308 = v65;
                v309 = PDAM(*(unsigned __int16 *)v861, *v72, ~(_BYTE)v306);
                v65 = v308;
                v302 = v787;
                *(_WORD *)v861 = v309;
                v307 = HIBYTE(v309);
              }
              else
              {
                LOBYTE(v307) = 0;
                *(_WORD *)v861 = 0;
              }
              *v72 = v307;
LABEL_514:
              v72 += v303;
              v310 = &v857[v302];
              if ((unint64_t)v310 >= v65)
                v311 = -(uint64_t)(int)v794;
              else
                v311 = 0;
              v71 += v304 + v311;
              v857 = &v310[v311];
              v861 += 2 * v787;
              --v305;
            }
            while (v305);
            if (v820)
            {
              v312 = &v828[v822];
              v313 = (unint64_t)v312 >= v820;
              v314 = v755;
              if ((unint64_t)v312 < v820)
                v314 = 0;
              v315 = &v312[v314];
              v316 = v65 + 2 * v314;
              v317 = v750;
              if (!v313)
                v317 = 0;
              v65 = v316 + 2 * v822;
              v857 = v315;
              v828 = v315;
              v830 += v825 + v317;
              v71 = v830;
            }
            else
            {
              v857 += v822;
              v71 += v825;
            }
            v861 += 2 * v819;
            v72 += v818;
            if (!--v863[0])
              goto LABEL_1009;
          }
        }
        v673 = v42;
        v674 = v863[0];
        v745 = (v863[0] - 1) + 1;
LABEL_1065:
        v782 = v674;
        v675 = v795;
        while (1)
        {
          v676 = *v71;
          if (v676 > 0xF7)
            break;
          if (v676 >= 8)
          {
            v678 = v65;
            v677 = PDM(*(unsigned __int16 *)v861, ~(_BYTE)v676);
            v65 = v678;
            goto LABEL_1070;
          }
LABEL_1071:
          v679 = &v857[v787];
          if ((unint64_t)v679 >= v65)
            v680 = -(uint64_t)(int)v794;
          else
            v680 = 0;
          v71 += v673 + v680;
          v857 = &v679[v680];
          v861 += 2 * v787;
          if (!--v675)
          {
            if (v820)
            {
              v681 = &v828[v822];
              v682 = (unint64_t)v681 >= v820;
              v683 = v755;
              if ((unint64_t)v681 < v820)
                v683 = 0;
              v684 = &v681[v683];
              v685 = v65 + 2 * v683;
              v686 = v750;
              if (!v682)
                v686 = 0;
              v65 = v685 + 2 * v822;
              v857 = v684;
              v828 = v684;
              v830 += v825 + v686;
              v71 = v830;
            }
            else
            {
              v857 += v822;
              v71 += v825;
            }
            v861 += 2 * v819;
            v674 = v782 - 1;
            v863[0] = v782 - 1;
            if (v782 == 1)
              goto LABEL_1083;
            goto LABEL_1065;
          }
        }
        v677 = 0;
LABEL_1070:
        *(_WORD *)v861 = v677;
        goto LABEL_1071;
      case 9:
        v318 = (int)v24;
        v319 = v42;
        v800 = -(uint64_t)(v822 * (int)v41);
        v761 = -(v825 * (int)v41);
        do
        {
          v320 = v873[0];
          do
          {
            v321 = v65;
            v322 = PDAMplusDAM((unsigned __int16)*v857, *v71, *v72 ^ 0xFFu, *(unsigned __int16 *)v861, *v72, *v71);
            v65 = v321;
            *(_WORD *)v861 = v322;
            *v72 = BYTE3(v322);
            v72 += v318;
            v323 = &v857[v787];
            if ((unint64_t)v323 >= v321)
              v324 = -(uint64_t)(int)v794;
            else
              v324 = 0;
            v71 += v319 + v324;
            v857 = &v323[v324];
            v861 += 2 * v787;
            --v320;
          }
          while (v320);
          if (v820)
          {
            v325 = &v828[v822];
            v326 = (unint64_t)v325 >= v820;
            v327 = v800;
            if ((unint64_t)v325 < v820)
              v327 = 0;
            v328 = &v325[v327];
            v329 = v321 + 2 * v327;
            v330 = v761;
            if (!v326)
              v330 = 0;
            v65 = v329 + 2 * v822;
            v857 = v328;
            v828 = v328;
            v830 += v825 + v330;
            v71 = v830;
          }
          else
          {
            v857 += v822;
            v71 += v825;
          }
          v861 += 2 * v819;
          v72 += v818;
          --v863[0];
        }
        while (v863[0]);
        goto LABEL_1009;
      case 10:
        v331 = (int)v24;
        v332 = v42;
        v801 = -(uint64_t)(v822 * (int)v41);
        v762 = -(v825 * (int)v41);
        v333 = -(uint64_t)(int)v794;
        do
        {
          v334 = v873[0];
          do
          {
            v839 = v71;
            v335 = *v71;
            v336 = v65;
            v337 = v333;
            v338 = PDAMplusDAM((unsigned __int16)*v857, v335, *v72 ^ 0xFFu, *(unsigned __int16 *)v861, *v72, v335 ^ 0xFFu);
            v333 = v337;
            v65 = v336;
            *(_WORD *)v861 = v338;
            *v72 = BYTE3(v338);
            v72 += v331;
            v339 = &v857[v787];
            if ((unint64_t)v339 >= v336)
              v340 = v337;
            else
              v340 = 0;
            v71 = &v839[v332 + v340];
            v857 = &v339[v340];
            v861 += 2 * v787;
            --v334;
          }
          while (v334);
          if (v820)
          {
            v341 = &v828[v822];
            v342 = (unint64_t)v341 >= v820;
            v343 = v801;
            if ((unint64_t)v341 < v820)
              v343 = 0;
            v344 = &v341[v343];
            v345 = v336 + 2 * v343;
            v346 = v762;
            if (!v342)
              v346 = 0;
            v65 = v345 + 2 * v822;
            v857 = v344;
            v828 = v344;
            v830 += v825 + v346;
            v71 = v830;
          }
          else
          {
            v857 += v822;
            v71 += v825;
          }
          v861 += 2 * v819;
          v72 += v818;
          --v863[0];
        }
        while (v863[0]);
        goto LABEL_1009;
      case 11:
        v756 = -(v825 * (int)v41);
        v763 = -(uint64_t)(v822 * (int)v41);
        if ((_DWORD)v24)
        {
          v347 = (int)v24;
          v348 = v42;
          do
          {
            v349 = v873[0];
            v350 = v65;
            do
            {
              if (v42)
                v351 = *v71;
              else
                v351 = 255;
              v352 = PDAplusdDA(*(_WORD *)v861, *v72, *v857, v351);
              *(_WORD *)v861 = v352;
              *v72 = BYTE3(v352);
              v72 += v347;
              v42 = v856;
              v353 = &v857[v787];
              if ((unint64_t)v353 >= v350)
                v354 = -(uint64_t)(int)v794;
              else
                v354 = 0;
              v71 += v348 + v354;
              v857 = &v353[v354];
              v861 += 2 * v787;
              --v349;
            }
            while (v349);
            v65 = v350;
            if (v820)
            {
              v355 = &v828[v822];
              v356 = (unint64_t)v355 >= v820;
              v357 = v763;
              if ((unint64_t)v355 < v820)
                v357 = 0;
              v358 = &v355[v357];
              v359 = v350 + 2 * v357;
              v360 = v756;
              if (!v356)
                v360 = 0;
              v65 = v359 + 2 * v822;
              v857 = v358;
              v828 = v358;
              v830 += v825 + v360;
              v71 = v830;
            }
            else
            {
              v857 += v822;
              v71 += v825;
            }
            v861 += 2 * v819;
            v72 += v818;
            --v863[0];
          }
          while (v863[0]);
          goto LABEL_1009;
        }
        v689 = v42;
        v690 = v863[0];
        v751 = (v863[0] - 1) + 1;
        do
        {
          v691 = v795;
          v692 = v65;
          do
          {
            if (v42)
              v693 = *v71;
            else
              v693 = 255;
            *(_WORD *)v861 = PDplusdDA(*(unsigned __int16 *)v861, *v857, v693);
            v42 = v856;
            v694 = &v857[v787];
            if ((unint64_t)v694 >= v692)
              v695 = -(uint64_t)(int)v794;
            else
              v695 = 0;
            v71 += v689 + v695;
            v857 = &v694[v695];
            v861 += 2 * v787;
            --v691;
          }
          while (v691);
          v65 = v692;
          if (v820)
          {
            v696 = &v828[v822];
            v697 = (unint64_t)v696 >= v820;
            v698 = v763;
            if ((unint64_t)v696 < v820)
              v698 = 0;
            v699 = &v696[v698];
            v700 = v692 + 2 * v698;
            v701 = v756;
            if (!v697)
              v701 = 0;
            v65 = v700 + 2 * v822;
            v857 = v699;
            v828 = v699;
            v830 += v825 + v701;
            v71 = v830;
          }
          else
          {
            v857 += v822;
            v71 += v825;
          }
          v861 += 2 * v819;
          v863[0] = --v690;
        }
        while (v690);
        goto LABEL_1101;
      case 12:
        if (!(_DWORD)v24)
        {
          v702 = v863[0];
          v703 = (v863[0] - 1) + 1;
          do
          {
            v704 = v795;
            do
            {
              v705 = (((unsigned __int16)*v857 | ((unsigned __int16)*v857 << 15)) & 0x1F07C1F)
                   + ((*(unsigned __int16 *)v861 | (*(unsigned __int16 *)v861 << 15)) & 0x1F07C1F);
              *(_WORD *)v861 = (((15 * ((v705 >> 5) & 0x100401)) | v705 | (30 * ((v705 >> 5) & 0x100401))) >> 15) & 0x3E0 | ((15 * ((v705 >> 5) & 0x401)) | v705 | (30 * ((v705 >> 5) & 0x401))) & 0x7C1F;
              v706 = &v857[v787];
              if ((unint64_t)v706 >= v65)
                v707 = -(uint64_t)(int)v794;
              else
                v707 = 0;
              v71 += v42 + v707;
              v857 = &v706[v707];
              v861 += 2 * v787;
              --v704;
            }
            while (v704);
            if (v820)
            {
              v708 = &v828[v822];
              v709 = (unint64_t)v708 >= v820;
              if ((unint64_t)v708 >= v820)
                v710 = -(uint64_t)(v822 * (int)v41);
              else
                v710 = 0;
              v711 = &v708[v710];
              v712 = v65 + 2 * v710;
              if (v709)
                v713 = -(v825 * (int)v41);
              else
                v713 = 0;
              v65 = v712 + 2 * v822;
              v857 = v711;
              v828 = v711;
              v830 += v825 + v713;
              v71 = v830;
            }
            else
            {
              v857 += v822;
              v71 += v825;
            }
            v861 += 2 * v819;
            --v702;
          }
          while (v702);
          v834 = v65;
          v72 += v818 * v703;
          goto LABEL_1137;
        }
        v361 = (int)v24;
        v362 = v42;
        v802 = -(uint64_t)(v822 * (int)v41);
        v764 = -(v825 * (int)v41);
        do
        {
          v363 = v873[0];
          v364 = v65;
          do
          {
            if (v42)
              v365 = *v71;
            else
              v365 = 255;
            v366 = PDApluslDA(*(unsigned __int16 *)v861, *v72, (unsigned __int16)*v857, v365);
            *(_WORD *)v861 = v366;
            *v72 = BYTE3(v366);
            v72 += v361;
            v42 = v856;
            v367 = &v857[v787];
            if ((unint64_t)v367 >= v364)
              v368 = -(uint64_t)(int)v794;
            else
              v368 = 0;
            v71 += v362 + v368;
            v857 = &v367[v368];
            v861 += 2 * v787;
            --v363;
          }
          while (v363);
          v65 = v364;
          if (v820)
          {
            v369 = &v828[v822];
            v370 = (unint64_t)v369 >= v820;
            v371 = v802;
            if ((unint64_t)v369 < v820)
              v371 = 0;
            v372 = &v369[v371];
            v373 = v364 + 2 * v371;
            v374 = v764;
            if (!v370)
              v374 = 0;
            v65 = v373 + 2 * v822;
            v857 = v372;
            v828 = v372;
            v830 += v825 + v374;
            v71 = v830;
          }
          else
          {
            v857 += v822;
            v71 += v825;
          }
          v861 += 2 * v819;
          v72 += v818;
          --v863[0];
        }
        while (v863[0]);
        goto LABEL_1009;
      case 13:
        v375 = (int)v24;
        v376 = v42;
        v803 = -(uint64_t)(v822 * (int)v41);
        v765 = -(v825 * (int)v41);
        while (1)
        {
          v377 = v873[0];
          v840 = v65;
          do
          {
            if (v42)
            {
              v378 = *v71;
              if (v378 < 8)
                goto LABEL_605;
              if ((_DWORD)v24)
                goto LABEL_600;
            }
            else
            {
              v378 = 255;
              if ((_DWORD)v24)
              {
LABEL_600:
                v379 = *v72;
                if (v379 > 7)
                {
                  v381 = PDAmultiplyPDA(*(unsigned __int16 *)v861, v379, (unsigned __int16)*v857, v378, v4);
                  v65 = v840;
                  v42 = v856;
                  LODWORD(v24) = v832;
                  *(_WORD *)v861 = v381;
                  *v72 = HIBYTE(v381);
                }
                else
                {
                  *(_WORD *)v861 = *v857;
                  *v72 = v378;
                }
                goto LABEL_605;
              }
            }
            v380 = PDAmultiplyPDA(*(unsigned __int16 *)v861, 0xFFu, (unsigned __int16)*v857, v378, v4);
            v65 = v840;
            v42 = v856;
            LODWORD(v24) = v832;
            *(_WORD *)v861 = v380;
LABEL_605:
            v72 += v375;
            v382 = &v857[v787];
            if ((unint64_t)v382 >= v65)
              v383 = -(uint64_t)(int)v794;
            else
              v383 = 0;
            v71 += v376 + v383;
            v857 = &v382[v383];
            v861 += 2 * v787;
            --v377;
          }
          while (v377);
          if (v820)
          {
            v384 = &v828[v822];
            v385 = (unint64_t)v384 >= v820;
            v386 = v803;
            if ((unint64_t)v384 < v820)
              v386 = 0;
            v387 = &v384[v386];
            v388 = v65 + 2 * v386;
            v389 = v765;
            if (!v385)
              v389 = 0;
            v65 = v388 + 2 * v822;
            v857 = v387;
            v828 = v387;
            v830 += v825 + v389;
            v71 = v830;
          }
          else
          {
            v857 += v822;
            v71 += v825;
          }
          v861 += 2 * v819;
          v72 += v818;
          if (!--v863[0])
            goto LABEL_1009;
        }
      case 14:
        v390 = (int)v24;
        v391 = v42;
        v804 = -(uint64_t)(v822 * (int)v41);
        v766 = -(v825 * (int)v41);
        while (1)
        {
          v392 = v873[0];
          v841 = v65;
          do
          {
            if (v42)
            {
              v393 = *v71;
              if (v393 < 8)
                goto LABEL_628;
              if ((_DWORD)v24)
                goto LABEL_623;
            }
            else
            {
              v393 = 255;
              if ((_DWORD)v24)
              {
LABEL_623:
                v394 = *v72;
                if (v394 > 7)
                {
                  v396 = PDAscreenPDA(*(unsigned __int16 *)v861, v394, (unsigned __int16)*v857, v393);
                  v65 = v841;
                  v42 = v856;
                  LODWORD(v24) = v832;
                  *(_WORD *)v861 = v396;
                  *v72 = HIBYTE(v396);
                }
                else
                {
                  *(_WORD *)v861 = *v857;
                  *v72 = v393;
                }
                goto LABEL_628;
              }
            }
            v395 = PDAscreenPDA(*(unsigned __int16 *)v861, 0xFFu, (unsigned __int16)*v857, v393);
            v65 = v841;
            v42 = v856;
            LODWORD(v24) = v832;
            *(_WORD *)v861 = v395;
LABEL_628:
            v72 += v390;
            v397 = &v857[v787];
            if ((unint64_t)v397 >= v65)
              v398 = -(uint64_t)(int)v794;
            else
              v398 = 0;
            v71 += v391 + v398;
            v857 = &v397[v398];
            v861 += 2 * v787;
            --v392;
          }
          while (v392);
          if (v820)
          {
            v399 = &v828[v822];
            v400 = (unint64_t)v399 >= v820;
            v401 = v804;
            if ((unint64_t)v399 < v820)
              v401 = 0;
            v402 = &v399[v401];
            v403 = v65 + 2 * v401;
            v404 = v766;
            if (!v400)
              v404 = 0;
            v65 = v403 + 2 * v822;
            v857 = v402;
            v828 = v402;
            v830 += v825 + v404;
            v71 = v830;
          }
          else
          {
            v857 += v822;
            v71 += v825;
          }
          v861 += 2 * v819;
          v72 += v818;
          if (!--v863[0])
            goto LABEL_1009;
        }
      case 15:
        v405 = (int)v24;
        v406 = v42;
        v805 = -(uint64_t)(v822 * (int)v41);
        v767 = -(v825 * (int)v41);
        while (1)
        {
          v407 = v873[0];
          v842 = v65;
          do
          {
            if (v42)
            {
              v408 = *v71;
              if (v408 < 8)
                goto LABEL_651;
              if ((_DWORD)v24)
                goto LABEL_646;
            }
            else
            {
              v408 = 255;
              if ((_DWORD)v24)
              {
LABEL_646:
                v409 = *v72;
                if (v409 > 7)
                {
                  v411 = PDAoverlayPDA(*(unsigned __int16 *)v861, v409, (unsigned __int16)*v857, v408);
                  v65 = v842;
                  v42 = v856;
                  LODWORD(v24) = v832;
                  *(_WORD *)v861 = v411;
                  *v72 = HIBYTE(v411);
                }
                else
                {
                  *(_WORD *)v861 = *v857;
                  *v72 = v408;
                }
                goto LABEL_651;
              }
            }
            v410 = PDAoverlayPDA(*(unsigned __int16 *)v861, 0xFFu, (unsigned __int16)*v857, v408);
            v65 = v842;
            v42 = v856;
            LODWORD(v24) = v832;
            *(_WORD *)v861 = v410;
LABEL_651:
            v72 += v405;
            v412 = &v857[v787];
            if ((unint64_t)v412 >= v65)
              v413 = -(uint64_t)(int)v794;
            else
              v413 = 0;
            v71 += v406 + v413;
            v857 = &v412[v413];
            v861 += 2 * v787;
            --v407;
          }
          while (v407);
          if (v820)
          {
            v414 = &v828[v822];
            v415 = (unint64_t)v414 >= v820;
            v416 = v805;
            if ((unint64_t)v414 < v820)
              v416 = 0;
            v417 = &v414[v416];
            v418 = v65 + 2 * v416;
            v419 = v767;
            if (!v415)
              v419 = 0;
            v65 = v418 + 2 * v822;
            v857 = v417;
            v828 = v417;
            v830 += v825 + v419;
            v71 = v830;
          }
          else
          {
            v857 += v822;
            v71 += v825;
          }
          v861 += 2 * v819;
          v72 += v818;
          if (!--v863[0])
            goto LABEL_1009;
        }
      case 16:
        v420 = (int)v24;
        v421 = v42;
        v806 = -(uint64_t)(v822 * (int)v41);
        v768 = -(v825 * (int)v41);
        while (1)
        {
          v422 = v873[0];
          v843 = v65;
          do
          {
            if (v42)
            {
              v423 = *v71;
              if (v423 < 8)
                goto LABEL_674;
              if ((_DWORD)v24)
                goto LABEL_669;
            }
            else
            {
              v423 = 255;
              if ((_DWORD)v24)
              {
LABEL_669:
                v424 = *v72;
                if (v424 > 7)
                {
                  v426 = PDAdarkenPDA(*(unsigned __int16 *)v861, v424, (unsigned __int16)*v857, v423);
                  v65 = v843;
                  v42 = v856;
                  LODWORD(v24) = v832;
                  *(_WORD *)v861 = v426;
                  *v72 = HIBYTE(v426);
                }
                else
                {
                  *(_WORD *)v861 = *v857;
                  *v72 = v423;
                }
                goto LABEL_674;
              }
            }
            v425 = PDAdarkenPDA(*(unsigned __int16 *)v861, 0xFFu, (unsigned __int16)*v857, v423);
            v65 = v843;
            v42 = v856;
            LODWORD(v24) = v832;
            *(_WORD *)v861 = v425;
LABEL_674:
            v72 += v420;
            v427 = &v857[v787];
            if ((unint64_t)v427 >= v65)
              v428 = -(uint64_t)(int)v794;
            else
              v428 = 0;
            v71 += v421 + v428;
            v857 = &v427[v428];
            v861 += 2 * v787;
            --v422;
          }
          while (v422);
          if (v820)
          {
            v429 = &v828[v822];
            v430 = (unint64_t)v429 >= v820;
            v431 = v806;
            if ((unint64_t)v429 < v820)
              v431 = 0;
            v432 = &v429[v431];
            v433 = v65 + 2 * v431;
            v434 = v768;
            if (!v430)
              v434 = 0;
            v65 = v433 + 2 * v822;
            v857 = v432;
            v828 = v432;
            v830 += v825 + v434;
            v71 = v830;
          }
          else
          {
            v857 += v822;
            v71 += v825;
          }
          v861 += 2 * v819;
          v72 += v818;
          if (!--v863[0])
            goto LABEL_1009;
        }
      case 17:
        v435 = (int)v24;
        v436 = v42;
        v807 = -(uint64_t)(v822 * (int)v41);
        v769 = -(v825 * (int)v41);
        while (1)
        {
          v437 = v873[0];
          v844 = v65;
          do
          {
            if (v42)
            {
              v438 = *v71;
              if (v438 < 8)
                goto LABEL_697;
              if ((_DWORD)v24)
                goto LABEL_692;
            }
            else
            {
              v438 = 255;
              if ((_DWORD)v24)
              {
LABEL_692:
                v439 = *v72;
                if (v439 > 7)
                {
                  v441 = PDAlightenPDA(*(unsigned __int16 *)v861, v439, (unsigned __int16)*v857, v438);
                  v65 = v844;
                  v42 = v856;
                  LODWORD(v24) = v832;
                  *(_WORD *)v861 = v441;
                  *v72 = HIBYTE(v441);
                }
                else
                {
                  *(_WORD *)v861 = *v857;
                  *v72 = v438;
                }
                goto LABEL_697;
              }
            }
            v440 = PDAlightenPDA(*(unsigned __int16 *)v861, 0xFFu, (unsigned __int16)*v857, v438);
            v65 = v844;
            v42 = v856;
            LODWORD(v24) = v832;
            *(_WORD *)v861 = v440;
LABEL_697:
            v72 += v435;
            v442 = &v857[v787];
            if ((unint64_t)v442 >= v65)
              v443 = -(uint64_t)(int)v794;
            else
              v443 = 0;
            v71 += v436 + v443;
            v857 = &v442[v443];
            v861 += 2 * v787;
            --v437;
          }
          while (v437);
          if (v820)
          {
            v444 = &v828[v822];
            v445 = (unint64_t)v444 >= v820;
            v446 = v807;
            if ((unint64_t)v444 < v820)
              v446 = 0;
            v447 = &v444[v446];
            v448 = v65 + 2 * v446;
            v449 = v769;
            if (!v445)
              v449 = 0;
            v65 = v448 + 2 * v822;
            v857 = v447;
            v828 = v447;
            v830 += v825 + v449;
            v71 = v830;
          }
          else
          {
            v857 += v822;
            v71 += v825;
          }
          v861 += 2 * v819;
          v72 += v818;
          if (!--v863[0])
            goto LABEL_1009;
        }
      case 18:
        v450 = (int)v24;
        v451 = v42;
        v808 = -(uint64_t)(v822 * (int)v41);
        v770 = -(v825 * (int)v41);
        while (1)
        {
          v452 = v873[0];
          v845 = v65;
          do
          {
            if (v42)
            {
              v453 = *v71;
              if (v453 < 8)
                goto LABEL_720;
              if ((_DWORD)v24)
                goto LABEL_715;
            }
            else
            {
              v453 = 255;
              if ((_DWORD)v24)
              {
LABEL_715:
                v454 = *v72;
                if (v454 > 7)
                {
                  v456 = PDAcolordodgePDA(*(unsigned __int16 *)v861, v454, (unsigned __int16)*v857, v453);
                  v65 = v845;
                  v42 = v856;
                  LODWORD(v24) = v832;
                  *(_WORD *)v861 = v456;
                  *v72 = HIBYTE(v456);
                }
                else
                {
                  *(_WORD *)v861 = *v857;
                  *v72 = v453;
                }
                goto LABEL_720;
              }
            }
            v455 = PDAcolordodgePDA(*(unsigned __int16 *)v861, 0xFFu, (unsigned __int16)*v857, v453);
            v65 = v845;
            v42 = v856;
            LODWORD(v24) = v832;
            *(_WORD *)v861 = v455;
LABEL_720:
            v72 += v450;
            v457 = &v857[v787];
            if ((unint64_t)v457 >= v65)
              v458 = -(uint64_t)(int)v794;
            else
              v458 = 0;
            v71 += v451 + v458;
            v857 = &v457[v458];
            v861 += 2 * v787;
            --v452;
          }
          while (v452);
          if (v820)
          {
            v459 = &v828[v822];
            v460 = (unint64_t)v459 >= v820;
            v461 = v808;
            if ((unint64_t)v459 < v820)
              v461 = 0;
            v462 = &v459[v461];
            v463 = v65 + 2 * v461;
            v464 = v770;
            if (!v460)
              v464 = 0;
            v65 = v463 + 2 * v822;
            v857 = v462;
            v828 = v462;
            v830 += v825 + v464;
            v71 = v830;
          }
          else
          {
            v857 += v822;
            v71 += v825;
          }
          v861 += 2 * v819;
          v72 += v818;
          if (!--v863[0])
            goto LABEL_1009;
        }
      case 19:
        v465 = (int)v24;
        v466 = v42;
        v809 = -(uint64_t)(v822 * (int)v41);
        v771 = -(v825 * (int)v41);
        while (1)
        {
          v467 = v873[0];
          v846 = v65;
          do
          {
            if (v42)
            {
              v468 = *v71;
              if (v468 < 8)
                goto LABEL_743;
              if ((_DWORD)v24)
                goto LABEL_738;
            }
            else
            {
              v468 = 255;
              if ((_DWORD)v24)
              {
LABEL_738:
                v469 = *v72;
                if (v469 > 7)
                {
                  v471 = PDAcolorburnPDA(*(unsigned __int16 *)v861, v469, (unsigned __int16)*v857, v468);
                  v65 = v846;
                  v42 = v856;
                  LODWORD(v24) = v832;
                  *(_WORD *)v861 = v471;
                  *v72 = HIBYTE(v471);
                }
                else
                {
                  *(_WORD *)v861 = *v857;
                  *v72 = v468;
                }
                goto LABEL_743;
              }
            }
            v470 = PDAcolorburnPDA(*(unsigned __int16 *)v861, 0xFFu, (unsigned __int16)*v857, v468);
            v65 = v846;
            v42 = v856;
            LODWORD(v24) = v832;
            *(_WORD *)v861 = v470;
LABEL_743:
            v72 += v465;
            v472 = &v857[v787];
            if ((unint64_t)v472 >= v65)
              v473 = -(uint64_t)(int)v794;
            else
              v473 = 0;
            v71 += v466 + v473;
            v857 = &v472[v473];
            v861 += 2 * v787;
            --v467;
          }
          while (v467);
          if (v820)
          {
            v474 = &v828[v822];
            v475 = (unint64_t)v474 >= v820;
            v476 = v809;
            if ((unint64_t)v474 < v820)
              v476 = 0;
            v477 = &v474[v476];
            v478 = v65 + 2 * v476;
            v479 = v771;
            if (!v475)
              v479 = 0;
            v65 = v478 + 2 * v822;
            v857 = v477;
            v828 = v477;
            v830 += v825 + v479;
            v71 = v830;
          }
          else
          {
            v857 += v822;
            v71 += v825;
          }
          v861 += 2 * v819;
          v72 += v818;
          if (!--v863[0])
            goto LABEL_1009;
        }
      case 20:
        v480 = (int)v24;
        v481 = v42;
        v810 = -(uint64_t)(v822 * (int)v41);
        v772 = -(v825 * (int)v41);
        while (1)
        {
          v482 = v873[0];
          v847 = v65;
          do
          {
            if (v42)
            {
              v483 = *v71;
              if (v483 < 8)
                goto LABEL_766;
              if ((_DWORD)v24)
                goto LABEL_761;
            }
            else
            {
              v483 = 255;
              if ((_DWORD)v24)
              {
LABEL_761:
                v484 = *v72;
                if (v484 > 7)
                {
                  v486 = PDAsoftlightPDA(*(unsigned __int16 *)v861, v484, (unsigned __int16)*v857, v483);
                  v65 = v847;
                  v42 = v856;
                  LODWORD(v24) = v832;
                  *(_WORD *)v861 = v486;
                  *v72 = HIBYTE(v486);
                }
                else
                {
                  *(_WORD *)v861 = *v857;
                  *v72 = v483;
                }
                goto LABEL_766;
              }
            }
            v485 = PDAsoftlightPDA(*(unsigned __int16 *)v861, 0xFFu, (unsigned __int16)*v857, v483);
            v65 = v847;
            v42 = v856;
            LODWORD(v24) = v832;
            *(_WORD *)v861 = v485;
LABEL_766:
            v72 += v480;
            v487 = &v857[v787];
            if ((unint64_t)v487 >= v65)
              v488 = -(uint64_t)(int)v794;
            else
              v488 = 0;
            v71 += v481 + v488;
            v857 = &v487[v488];
            v861 += 2 * v787;
            --v482;
          }
          while (v482);
          if (v820)
          {
            v489 = &v828[v822];
            v490 = (unint64_t)v489 >= v820;
            v491 = v810;
            if ((unint64_t)v489 < v820)
              v491 = 0;
            v492 = &v489[v491];
            v493 = v65 + 2 * v491;
            v494 = v772;
            if (!v490)
              v494 = 0;
            v65 = v493 + 2 * v822;
            v857 = v492;
            v828 = v492;
            v830 += v825 + v494;
            v71 = v830;
          }
          else
          {
            v857 += v822;
            v71 += v825;
          }
          v861 += 2 * v819;
          v72 += v818;
          if (!--v863[0])
            goto LABEL_1009;
        }
      case 21:
        v495 = (int)v24;
        v496 = v42;
        v811 = -(uint64_t)(v822 * (int)v41);
        v773 = -(v825 * (int)v41);
        while (1)
        {
          v497 = v873[0];
          v848 = v65;
          do
          {
            if (v42)
            {
              v498 = *v71;
              if (v498 < 8)
                goto LABEL_789;
              if ((_DWORD)v24)
                goto LABEL_784;
            }
            else
            {
              v498 = 255;
              if ((_DWORD)v24)
              {
LABEL_784:
                v499 = *v72;
                if (v499 > 7)
                {
                  v501 = PDAhardlightPDA(*(unsigned __int16 *)v861, v499, (unsigned __int16)*v857, v498);
                  v65 = v848;
                  v42 = v856;
                  LODWORD(v24) = v832;
                  *(_WORD *)v861 = v501;
                  *v72 = HIBYTE(v501);
                }
                else
                {
                  *(_WORD *)v861 = *v857;
                  *v72 = v498;
                }
                goto LABEL_789;
              }
            }
            v500 = PDAhardlightPDA(*(unsigned __int16 *)v861, 0xFFu, (unsigned __int16)*v857, v498);
            v65 = v848;
            v42 = v856;
            LODWORD(v24) = v832;
            *(_WORD *)v861 = v500;
LABEL_789:
            v72 += v495;
            v502 = &v857[v787];
            if ((unint64_t)v502 >= v65)
              v503 = -(uint64_t)(int)v794;
            else
              v503 = 0;
            v71 += v496 + v503;
            v857 = &v502[v503];
            v861 += 2 * v787;
            --v497;
          }
          while (v497);
          if (v820)
          {
            v504 = &v828[v822];
            v505 = (unint64_t)v504 >= v820;
            v506 = v811;
            if ((unint64_t)v504 < v820)
              v506 = 0;
            v507 = &v504[v506];
            v508 = v65 + 2 * v506;
            v509 = v773;
            if (!v505)
              v509 = 0;
            v65 = v508 + 2 * v822;
            v857 = v507;
            v828 = v507;
            v830 += v825 + v509;
            v71 = v830;
          }
          else
          {
            v857 += v822;
            v71 += v825;
          }
          v861 += 2 * v819;
          v72 += v818;
          if (!--v863[0])
            goto LABEL_1009;
        }
      case 22:
        v510 = (int)v24;
        v511 = v42;
        v812 = -(uint64_t)(v822 * (int)v41);
        v774 = -(v825 * (int)v41);
        while (1)
        {
          v512 = v873[0];
          v849 = v65;
          do
          {
            if (v42)
            {
              v513 = *v71;
              if (v513 < 8)
                goto LABEL_812;
              if ((_DWORD)v24)
                goto LABEL_807;
            }
            else
            {
              v513 = 255;
              if ((_DWORD)v24)
              {
LABEL_807:
                v514 = *v72;
                if (v514 > 7)
                {
                  v516 = PDAdifferencePDA(*(unsigned __int16 *)v861, v514, (unsigned __int16)*v857, v513);
                  v65 = v849;
                  v42 = v856;
                  LODWORD(v24) = v832;
                  *(_WORD *)v861 = v516;
                  *v72 = HIBYTE(v516);
                }
                else
                {
                  *(_WORD *)v861 = *v857;
                  *v72 = v513;
                }
                goto LABEL_812;
              }
            }
            v515 = PDAdifferencePDA(*(unsigned __int16 *)v861, 0xFFu, (unsigned __int16)*v857, v513);
            v65 = v849;
            v42 = v856;
            LODWORD(v24) = v832;
            *(_WORD *)v861 = v515;
LABEL_812:
            v72 += v510;
            v517 = &v857[v787];
            if ((unint64_t)v517 >= v65)
              v518 = -(uint64_t)(int)v794;
            else
              v518 = 0;
            v71 += v511 + v518;
            v857 = &v517[v518];
            v861 += 2 * v787;
            --v512;
          }
          while (v512);
          if (v820)
          {
            v519 = &v828[v822];
            v520 = (unint64_t)v519 >= v820;
            v521 = v812;
            if ((unint64_t)v519 < v820)
              v521 = 0;
            v522 = &v519[v521];
            v523 = v65 + 2 * v521;
            v524 = v774;
            if (!v520)
              v524 = 0;
            v65 = v523 + 2 * v822;
            v857 = v522;
            v828 = v522;
            v830 += v825 + v524;
            v71 = v830;
          }
          else
          {
            v857 += v822;
            v71 += v825;
          }
          v861 += 2 * v819;
          v72 += v818;
          if (!--v863[0])
            goto LABEL_1009;
        }
      case 23:
        v525 = (int)v24;
        v526 = v42;
        v813 = -(uint64_t)(v822 * (int)v41);
        v775 = -(v825 * (int)v41);
        while (1)
        {
          v527 = v873[0];
          v850 = v65;
          do
          {
            if (v42)
            {
              v528 = *v71;
              if (v528 < 8)
                goto LABEL_835;
              if ((_DWORD)v24)
                goto LABEL_830;
            }
            else
            {
              v528 = 255;
              if ((_DWORD)v24)
              {
LABEL_830:
                v529 = *v72;
                if (v529 > 7)
                {
                  v531 = PDAexclusionPDA(*(unsigned __int16 *)v861, v529, (unsigned __int16)*v857, v528);
                  v65 = v850;
                  v42 = v856;
                  LODWORD(v24) = v832;
                  *(_WORD *)v861 = v531;
                  *v72 = HIBYTE(v531);
                }
                else
                {
                  *(_WORD *)v861 = *v857;
                  *v72 = v528;
                }
                goto LABEL_835;
              }
            }
            v530 = PDAexclusionPDA(*(unsigned __int16 *)v861, 0xFFu, (unsigned __int16)*v857, v528);
            v65 = v850;
            v42 = v856;
            LODWORD(v24) = v832;
            *(_WORD *)v861 = v530;
LABEL_835:
            v72 += v525;
            v532 = &v857[v787];
            if ((unint64_t)v532 >= v65)
              v533 = -(uint64_t)(int)v794;
            else
              v533 = 0;
            v71 += v526 + v533;
            v857 = &v532[v533];
            v861 += 2 * v787;
            --v527;
          }
          while (v527);
          if (v820)
          {
            v534 = &v828[v822];
            v535 = (unint64_t)v534 >= v820;
            v536 = v813;
            if ((unint64_t)v534 < v820)
              v536 = 0;
            v537 = &v534[v536];
            v538 = v65 + 2 * v536;
            v539 = v775;
            if (!v535)
              v539 = 0;
            v65 = v538 + 2 * v822;
            v857 = v537;
            v828 = v537;
            v830 += v825 + v539;
            v71 = v830;
          }
          else
          {
            v857 += v822;
            v71 += v825;
          }
          v861 += 2 * v819;
          v72 += v818;
          if (!--v863[0])
            goto LABEL_1009;
        }
      case 24:
        v540 = (int)v24;
        v541 = v42;
        v814 = -(uint64_t)(v822 * (int)v41);
        v776 = -(v825 * (int)v41);
        while (1)
        {
          v542 = v873[0];
          v851 = v65;
          do
          {
            if (v42)
            {
              v543 = *v71;
              if (v543 < 8)
                goto LABEL_858;
              if ((_DWORD)v24)
                goto LABEL_853;
            }
            else
            {
              v543 = 255;
              if ((_DWORD)v24)
              {
LABEL_853:
                v544 = *v72;
                if (v544 > 7)
                {
                  v546 = PDAhuePDA(*(unsigned __int16 *)v861, v544, (unsigned __int16)*v857, v543);
                  v65 = v851;
                  v42 = v856;
                  LODWORD(v24) = v832;
                  *(_WORD *)v861 = v546;
                  *v72 = HIBYTE(v546);
                }
                else
                {
                  *(_WORD *)v861 = *v857;
                  *v72 = v543;
                }
                goto LABEL_858;
              }
            }
            v545 = PDAhuePDA(*(unsigned __int16 *)v861, 0xFFu, (unsigned __int16)*v857, v543);
            v65 = v851;
            v42 = v856;
            LODWORD(v24) = v832;
            *(_WORD *)v861 = v545;
LABEL_858:
            v72 += v540;
            v547 = &v857[v787];
            if ((unint64_t)v547 >= v65)
              v548 = -(uint64_t)(int)v794;
            else
              v548 = 0;
            v71 += v541 + v548;
            v857 = &v547[v548];
            v861 += 2 * v787;
            --v542;
          }
          while (v542);
          if (v820)
          {
            v549 = &v828[v822];
            v550 = (unint64_t)v549 >= v820;
            v551 = v814;
            if ((unint64_t)v549 < v820)
              v551 = 0;
            v552 = &v549[v551];
            v553 = v65 + 2 * v551;
            v554 = v776;
            if (!v550)
              v554 = 0;
            v65 = v553 + 2 * v822;
            v857 = v552;
            v828 = v552;
            v830 += v825 + v554;
            v71 = v830;
          }
          else
          {
            v857 += v822;
            v71 += v825;
          }
          v861 += 2 * v819;
          v72 += v818;
          if (!--v863[0])
            goto LABEL_1009;
        }
      case 25:
        v555 = (int)v24;
        v556 = v42;
        v815 = -(uint64_t)(v822 * (int)v41);
        v777 = -(v825 * (int)v41);
        while (1)
        {
          v557 = v873[0];
          v852 = v65;
          do
          {
            if (v42)
            {
              v558 = *v71;
              if (v558 < 8)
                goto LABEL_881;
              if ((_DWORD)v24)
                goto LABEL_876;
            }
            else
            {
              v558 = 255;
              if ((_DWORD)v24)
              {
LABEL_876:
                v559 = *v72;
                if (v559 > 7)
                {
                  v561 = PDAsaturationPDA(*(unsigned __int16 *)v861, v559, (unsigned __int16)*v857, v558);
                  v65 = v852;
                  v42 = v856;
                  LODWORD(v24) = v832;
                  *(_WORD *)v861 = v561;
                  *v72 = HIBYTE(v561);
                }
                else
                {
                  *(_WORD *)v861 = *v857;
                  *v72 = v558;
                }
                goto LABEL_881;
              }
            }
            v560 = PDAsaturationPDA(*(unsigned __int16 *)v861, 0xFFu, (unsigned __int16)*v857, v558);
            v65 = v852;
            v42 = v856;
            LODWORD(v24) = v832;
            *(_WORD *)v861 = v560;
LABEL_881:
            v72 += v555;
            v562 = &v857[v787];
            if ((unint64_t)v562 >= v65)
              v563 = -(uint64_t)(int)v794;
            else
              v563 = 0;
            v71 += v556 + v563;
            v857 = &v562[v563];
            v861 += 2 * v787;
            --v557;
          }
          while (v557);
          if (v820)
          {
            v564 = &v828[v822];
            v565 = (unint64_t)v564 >= v820;
            v566 = v815;
            if ((unint64_t)v564 < v820)
              v566 = 0;
            v567 = &v564[v566];
            v568 = v65 + 2 * v566;
            v569 = v777;
            if (!v565)
              v569 = 0;
            v65 = v568 + 2 * v822;
            v857 = v567;
            v828 = v567;
            v830 += v825 + v569;
            v71 = v830;
          }
          else
          {
            v857 += v822;
            v71 += v825;
          }
          v861 += 2 * v819;
          v72 += v818;
          if (!--v863[0])
            goto LABEL_1009;
        }
      case 26:
        v570 = (int)v24;
        v571 = v42;
        v816 = -(uint64_t)(v822 * (int)v41);
        v778 = -(v825 * (int)v41);
        while (1)
        {
          v572 = v873[0];
          v853 = v65;
          do
          {
            if (v42)
            {
              v573 = *v71;
              if (v573 < 8)
                goto LABEL_904;
              if ((_DWORD)v24)
                goto LABEL_899;
            }
            else
            {
              v573 = 255;
              if ((_DWORD)v24)
              {
LABEL_899:
                v574 = *v72;
                v575 = (unsigned __int16)*v857;
                if (v574 > 7)
                {
                  v577 = PDAluminosityPDA(v575, v573, *(unsigned __int16 *)v861, v574);
                  v65 = v853;
                  v42 = v856;
                  LODWORD(v24) = v832;
                  *(_WORD *)v861 = v577;
                  *v72 = HIBYTE(v577);
                }
                else
                {
                  *(_WORD *)v861 = v575;
                  *v72 = v573;
                }
                goto LABEL_904;
              }
            }
            v576 = PDAluminosityPDA((unsigned __int16)*v857, v573, *(unsigned __int16 *)v861, 0xFFu);
            v65 = v853;
            v42 = v856;
            LODWORD(v24) = v832;
            *(_WORD *)v861 = v576;
LABEL_904:
            v72 += v570;
            v578 = &v857[v787];
            if ((unint64_t)v578 >= v65)
              v579 = -(uint64_t)(int)v794;
            else
              v579 = 0;
            v71 += v571 + v579;
            v857 = &v578[v579];
            v861 += 2 * v787;
            --v572;
          }
          while (v572);
          if (v820)
          {
            v580 = &v828[v822];
            v581 = (unint64_t)v580 >= v820;
            v582 = v816;
            if ((unint64_t)v580 < v820)
              v582 = 0;
            v583 = &v580[v582];
            v584 = v65 + 2 * v582;
            v585 = v778;
            if (!v581)
              v585 = 0;
            v65 = v584 + 2 * v822;
            v857 = v583;
            v828 = v583;
            v830 += v825 + v585;
            v71 = v830;
          }
          else
          {
            v857 += v822;
            v71 += v825;
          }
          v861 += 2 * v819;
          v72 += v818;
          if (!--v863[0])
            goto LABEL_1009;
        }
      case 27:
        v586 = (int)v24;
        v587 = v42;
        v817 = -(uint64_t)(v822 * (int)v41);
        v779 = -(v825 * (int)v41);
        break;
      default:
        goto LABEL_1153;
    }
LABEL_918:
    v588 = v873[0];
    v854 = v65;
    while (1)
    {
      if (v42)
      {
        v589 = *v71;
        if (v589 < 8)
          goto LABEL_927;
        if (!(_DWORD)v24)
          goto LABEL_925;
      }
      else
      {
        v589 = 255;
        if (!(_DWORD)v24)
        {
LABEL_925:
          v591 = PDAluminosityPDA(*(unsigned __int16 *)v861, 0xFFu, (unsigned __int16)*v857, v589);
          v65 = v854;
          v42 = v856;
          LODWORD(v24) = v832;
          *(_WORD *)v861 = v591;
          goto LABEL_927;
        }
      }
      v590 = *v72;
      if (v590 > 7)
      {
        v592 = PDAluminosityPDA(*(unsigned __int16 *)v861, v590, (unsigned __int16)*v857, v589);
        v65 = v854;
        v42 = v856;
        LODWORD(v24) = v832;
        *(_WORD *)v861 = v592;
        *v72 = HIBYTE(v592);
      }
      else
      {
        *(_WORD *)v861 = *v857;
        *v72 = v589;
      }
LABEL_927:
      v72 += v586;
      v593 = &v857[v787];
      if ((unint64_t)v593 >= v65)
        v594 = -(uint64_t)(int)v794;
      else
        v594 = 0;
      v71 += v587 + v594;
      v857 = &v593[v594];
      v861 += 2 * v787;
      if (!--v588)
      {
        if (v820)
        {
          v595 = &v828[v822];
          v596 = (unint64_t)v595 >= v820;
          v597 = v817;
          if ((unint64_t)v595 < v820)
            v597 = 0;
          v598 = &v595[v597];
          v599 = v65 + 2 * v597;
          v600 = v779;
          if (!v596)
            v600 = 0;
          v65 = v599 + 2 * v822;
          v857 = v598;
          v828 = v598;
          v830 += v825 + v600;
          v71 = v830;
        }
        else
        {
          v857 += v822;
          v71 += v825;
        }
        v861 += 2 * v819;
        v72 += v818;
        if (!--v863[0])
          goto LABEL_1009;
        goto LABEL_918;
      }
    }
  }
  v16 = *(_DWORD *)(v3 + 128);
  if ((v16 | 8) == 8)
  {
    if ((*(_DWORD *)v3 & 0xFF00) == 0x400)
      rgb555_mark_constmask(v3, v8);
    else
      rgb555_mark_pixelmask(v3, v8);
  }
  else
  {
    v25 = *(_DWORD *)(v3 + 112);
    v26 = *(_DWORD *)(v3 + 116);
    v27 = (v25 + 15) & 0xFFFFFFF0;
    v28 = v27 * v26;
    if ((int)v28 <= 4096)
    {
      v30 = v873;
    }
    else
    {
      v29 = malloc_type_malloc(v28, 0x8303D2FuLL);
      if (!v29)
        return 1;
      v30 = v29;
      v15 = *(uint16x4_t **)(v10 + 136);
      v16 = *(_DWORD *)(v10 + 128);
    }
    CGSConvertBitsToMask(v15, *(_DWORD *)(v10 + 124), v30, v27, v25, v26, v16);
    v52 = *(_OWORD *)(v10 + 112);
    v869 = *(_OWORD *)(v10 + 96);
    v870 = v52;
    v53 = *(_OWORD *)(v10 + 144);
    v871 = *(_OWORD *)(v10 + 128);
    v872 = v53;
    v54 = *(_OWORD *)(v10 + 48);
    v865 = *(_OWORD *)(v10 + 32);
    v866 = v54;
    v55 = *(_OWORD *)(v10 + 80);
    v867 = *(_OWORD *)(v10 + 64);
    v868 = v55;
    v56 = *(_OWORD *)(v10 + 16);
    *(_OWORD *)v863 = *(_OWORD *)v10;
    v864 = v56;
    HIDWORD(v870) = (v25 + 15) & 0xFFFFFFF0;
    *((_QWORD *)&v871 + 1) = v30;
    if (BYTE1(v863[0]) << 8 == 1024)
      rgb555_mark_constmask((uint64_t)v863, v788);
    else
      rgb555_mark_pixelmask((uint64_t)v863, v788);
    if (v30 != (_BYTE *)v873)
    {
      v62 = v30;
      goto LABEL_1042;
    }
  }
  return 1;
}

uint64_t rgb555_image(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL4 v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  int v21;
  unsigned int v22;
  int *v23;
  int v24;
  unint64_t v25;
  uint64_t (*v26)(uint64_t, int *, int, int, int, int);
  uint64_t v27;
  int v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _OWORD v47[64];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v30 = 0u;
  memset(v47, 0, 512);
  if (*((_QWORD *)a2 + 12))
    v7 = 0;
  else
    v7 = *(float *)(a3 + 8) >= 1.0;
  v8 = *(_DWORD *)(*(_QWORD *)(v6 + 56) + 16 * *a2 + 8 * v7 + 4 * (*((_QWORD *)a2 + 6) == 0));
  if (v8 > 28)
    return 0xFFFFFFFFLL;
  if (*((int *)a2 + 1) < 1 || *((int *)a2 + 2) < 1)
    return 0;
  if ((int)_blt_image_initialize((uint64_t)a2, a3, (uint64_t)&v30, (uint64_t)v47) < 1)
    return 0xFFFFFFFFLL;
  v18 = *(_DWORD *)a3;
  *((_QWORD *)&v30 + 1) = __PAIR64__(*(_DWORD *)v6, *(_DWORD *)a3);
  if (v18 != 67449684)
  {
    v19 = SAMPLEINDEX(v18, v10, v11, v12, v13, v14, v15, v16);
    if (!v19)
      return 0xFFFFFFFFLL;
    if (v19 > 0xB)
    {
LABEL_20:
      v21 = 255;
      v20 = 1;
    }
    else
    {
      v20 = 0;
      v21 = 0;
      switch(v19)
      {
        case 2u:
          if (*((_QWORD *)a2 + 12))
            goto LABEL_20;
          v20 = 0;
          v21 = 16;
          break;
        case 5u:
          v20 = 0;
          v21 = 24;
          break;
        case 6u:
          break;
        case 7u:
          v20 = 0;
          v21 = 32;
          break;
        case 8u:
          v20 = 0;
          v21 = 8;
          break;
        case 9u:
          v20 = 0;
          v21 = 40;
          break;
        default:
          goto LABEL_20;
      }
    }
    *(_QWORD *)&v30 = rgb555_image_sample[v19 + 1];
    if ((_QWORD)v30)
    {
      if (!*(_BYTE *)(a3 + 5) || (v22 = *(_DWORD *)a3, (HIWORD(*(_DWORD *)a3) & 0x3Fu) <= (*(_WORD *)(v6 + 2) & 0x3Fu)))
      {
        DWORD2(v30) = 67449684;
        goto LABEL_37;
      }
    }
    else
    {
      v22 = *(_DWORD *)a3;
    }
    if ((HIWORD(v22) & 0x3F) > 8u)
    {
      if ((v22 & 0x3F0000) >> 16 > 0x10)
      {
LABEL_32:
        v23 = RGBF_image_sample;
        *(_QWORD *)&v30 = *(_QWORD *)&RGBF_image_sample[2 * v19 + 2];
        if ((_QWORD)v30)
        {
          v24 = 16;
          goto LABEL_34;
        }
        return 0xFFFFFFFFLL;
      }
    }
    else
    {
      v23 = RGB8_image_sample;
      *(_QWORD *)&v30 = *(_QWORD *)&RGB8_image_sample[2 * v19 + 2];
      if ((_QWORD)v30)
        goto LABEL_35;
    }
    v23 = RGB16_image_sample;
    *(_QWORD *)&v30 = *(_QWORD *)&RGB16_image_sample[2 * v19 + 2];
    if ((_QWORD)v30)
    {
      v24 = 8;
LABEL_34:
      LODWORD(v31) = v24;
LABEL_35:
      DWORD2(v30) = *v23;
      if (*(_BYTE *)(a3 + 5))
        *((_QWORD *)&v40 + 1) = pixel_dither_noise;
LABEL_37:
      if ((v20 & 1) == 0
        && (v8 - 1) <= 1
        && (BYTE4(v31) & 7) == 3
        && (a2[2] == 5 || !a2[2])
        && v19 <= 0xB)
      {
        HIDWORD(v25) = v21;
        LODWORD(v25) = v21;
        switch((v25 >> 3))
        {
          case 0u:
            DWORD2(v30) = *(_DWORD *)a3;
            v26 = rgb555_image_mark_RGB32;
            goto LABEL_59;
          case 1u:
            DWORD2(v30) = *(_DWORD *)a3;
            v26 = rgb555_image_mark_RGB32;
            goto LABEL_61;
          case 2u:
            DWORD2(v30) = *(_DWORD *)a3;
            v26 = rgb555_image_mark_W8;
            goto LABEL_59;
          case 3u:
            DWORD2(v30) = *(_DWORD *)a3;
            v26 = rgb555_image_mark_RGB24;
            goto LABEL_59;
          case 4u:
            DWORD2(v30) = *(_DWORD *)a3;
            v26 = rgb555_image_mark_rgb32;
LABEL_59:
            v27 = (uint64_t)a2;
            v28 = v8;
            v29 = 0;
            break;
          case 5u:
            DWORD2(v30) = *(_DWORD *)a3;
            v26 = rgb555_image_mark_rgb32;
LABEL_61:
            v27 = (uint64_t)a2;
            v28 = v8;
            v29 = 8;
            break;
          default:
            goto LABEL_38;
        }
        rgb555_image_mark_image(v27, (uint64_t)&v30, v28, v29, (void (*)(_QWORD, _QWORD))v26);
        return 1;
      }
      goto LABEL_38;
    }
    goto LABEL_32;
  }
  if (!(_QWORD)v41 && (~DWORD1(v31) & 0xC3) == 0)
  {
    v17.n128_u32[0] = *(_DWORD *)(a3 + 8);
    if (v17.n128_f32[0] >= 1.0 && !*(_QWORD *)(a3 + 24))
    {
      if ((BYTE4(v31) & 4) != 0)
      {
        v17.n128_u64[0] = *(_QWORD *)(a3 + 32);
        *((_QWORD *)a2 + 8) = v17.n128_u64[0];
      }
      rgb555_mark((uint64_t)a1, v17);
      return 1;
    }
  }
  *(_QWORD *)&v30 = rgb555_sample_rgb555;
LABEL_38:
  rgb555_image_mark((uint64_t)a2, (uint64_t)&v30, v8, v17);
  return 1;
}

uint64_t rgb555_shade(uint64_t a1, __n128 a2)
{
  uint64_t *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __n128 v13;
  void *v14;
  unint64_t v15;
  _BYTE *v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  void *v38[2];
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  _OWORD v42[2];
  int v43;
  _BYTE v44[16];
  uint64_t v45;
  _BYTE v46[40];
  uint64_t v47;

  v2 = (uint64_t *)MEMORY[0x1E0C80A78](a1, a2);
  v5 = v4;
  v6 = (uint64_t)v3;
  v7 = 0;
  v47 = *MEMORY[0x1E0C80C00];
  v8 = *v2;
  v41 = 0;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  *(_OWORD *)v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v18 = 0u;
  memset(v17, 0, sizeof(v17));
  v9 = *(_QWORD *)(v8 + 56);
  v10 = *v3;
  if (!*((_QWORD *)v3 + 12))
  {
    if (*(_QWORD *)(v4 + 72))
      v7 = 0;
    else
      v7 = *(float *)(v4 + 4) >= 1.0;
  }
  v43 = 0;
  memset(v42, 0, sizeof(v42));
  v11 = *(_DWORD *)(v9 + 16 * v10 + 8 * v7 + 4 * (*((_QWORD *)v3 + 6) == 0));
  if (v11 > 27)
    return 0xFFFFFFFFLL;
  if (*((int *)v3 + 1) < 1 || *((int *)v3 + 2) < 1)
    return 0;
  if ((int)_blt_shade_initialize((uint64_t)v3, v4, (uint64_t)v17, (uint64_t)v42) < 1)
    return 0xFFFFFFFFLL;
  if ((*(_DWORD *)v5 & 0xF000000) == 0x3000000)
  {
    if (*(_QWORD *)(v5 + 16))
    {
      v14 = rgb555_shade_radial_RGB;
    }
    else if (*(_QWORD *)(v5 + 24))
    {
      v14 = rgb555_shade_conic_RGB;
    }
    else if (*((uint64_t *)&v19 + 1) < 2)
    {
      v14 = rgb555_shade_axial_RGB;
    }
    else
    {
      v14 = rgb555_shade_custom_RGB;
    }
    *(_QWORD *)&v17[0] = v14;
    if ((_QWORD)v40)
    {
      *((_QWORD *)&v39 + 1) = v46;
      _blt_shade_samples_16((uint64_t)v46, 1, 3, (float *)v40, *((float **)&v40 + 1), 1uLL);
    }
    v15 = *((_QWORD *)&v19 + 1) * v19;
    if ((uint64_t)(*((_QWORD *)&v19 + 1) * v19) <= 480)
    {
      v16 = v44;
      v38[1] = v44;
LABEL_27:
      _blt_shade_samples_16((uint64_t)v16, 1, 3, (float *)v18, *((float **)&v18 + 1), v15);
      if (*(_BYTE *)(v5 + 1))
        *(_QWORD *)&v39 = &_blt_shade_samples_noise;
      goto LABEL_29;
    }
    v16 = malloc_type_malloc(8 * v15 + 32, 0x54320A8DuLL);
    if (v16)
    {
      v38[1] = v16;
      v15 = *((_QWORD *)&v19 + 1) * v19;
      goto LABEL_27;
    }
    return 0xFFFFFFFFLL;
  }
  if (!*(_QWORD *)&v17[0])
    return 0xFFFFFFFFLL;
LABEL_29:
  DWORD2(v17[0]) = *(_DWORD *)v8;
  HIDWORD(v17[0]) = DWORD2(v17[0]);
  rgb555_image_mark(v6, (uint64_t)v17, v11, v13);
  if (v38[1] && (v38[1] < v44 || &v45 < v38[1]))
    free(v38[1]);
  return 1;
}

void rgb555_shade_radial_RGB(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  int8x8_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float *v13;
  float v14;
  float v15;
  float v16;
  float v17;
  int v18;
  float v19;
  float v20;
  float v21;
  float v22;
  _BYTE *v23;
  int8x8_t *v24;
  uint64_t v25;
  unsigned __int16 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  float v37;
  float v38;
  int v39;
  int v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  BOOL v57;
  float v58;
  BOOL v59;
  int v60;
  float v61;
  uint16x4_t *v62;
  uint32x4_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x8_t v67;
  float v68;
  float v69;
  float v70;
  unsigned __int16 *v71;
  int v72;
  float v73;
  float v74;
  float v75;
  float v77;
  float v78;
  float v79;
  int v80;
  int v81;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  int v87;
  unsigned __int16 *v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  unsigned int v94;
  unsigned int v95;
  int v96;
  uint32x4_t v97;
  int v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x8_t v102;
  uint16x4_t *v103;
  int v104;
  int v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  int v109;
  char v110;
  uint32x4_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x8_t v115;
  uint64_t v116;
  unsigned __int16 *v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  unsigned __int16 *v123;
  unsigned __int16 *v124;
  int32x2_t v125;
  int32x2_t v126;
  int32x2_t v127;
  int32x2_t v128;
  int v129;
  int8x8_t v130;
  __int8 *v131;
  int32x2_t v132;
  int32x2_t v133;
  uint32x2_t v134;
  uint32x2_t v135;
  uint32x2_t v136;
  int8x8_t v137;
  int32x2_t v138;
  int32x2_t v139;
  uint32x2_t v140;
  uint32x2_t v141;
  uint32x2_t v142;

  v5 = *(float *)(a1 + 280);
  v6 = *(float *)(a1 + 284);
  v7 = *(float *)(*(_QWORD *)(a1 + 272) + 4);
  v8 = v7 * (float)a2;
  v9 = v7 * (float)(uint64_t)a3;
  v10 = *(float *)(a1 + 296) + (float)((float)(*(float *)(a1 + 288) * v9) + (float)(v5 * v8));
  v11 = *(float *)(a1 + 300) + (float)((float)(v9 * *(float *)(a1 + 292)) + (float)(v6 * v8));
  v13 = *(float **)(a1 + 400);
  v14 = *(float *)(a1 + 336);
  v15 = *(float *)(a1 + 344);
  v16 = *(float *)(a1 + 304);
  v17 = *(float *)(a1 + 308);
  v18 = *(_DWORD *)(a1 + 324);
  v19 = v13[2];
  v20 = v13[4];
  v21 = v13[5];
  v22 = v13[7];
  v25 = a1 + 144;
  v23 = *(_BYTE **)(a1 + 144);
  v24 = *(int8x8_t **)(v25 + 8);
  v26 = *(unsigned __int16 **)(a1 + 376);
  v27 = *(_QWORD *)(a1 + 360);
  v28 = ((unint64_t)a2 >> 8) & 0xF;
  if (v19 != 0.0 || v22 != 0.0 || v6 != 0.0)
  {
    v40 = *(_DWORD *)(a1 + 320);
    v41 = v13[3];
    v42 = v13[6];
    v43 = v13[8];
    v44 = a1 + 368;
    v45 = *(_QWORD *)(a1 + 368);
    v46 = v45 + ((a3 >> 4) & 0xF0);
    v32 = v45 == 0;
    v47 = 15;
    if (v32)
    {
      v47 = 0;
      v28 = 0;
    }
    else
    {
      v44 = v46;
    }
    v48 = -v42;
    v49 = v17 - v16;
    while (1)
    {
      v50 = v48 + (float)((float)(v10 + v10) * v19);
      v51 = (float)((float)(v11 * v11) + (float)(v10 * v10)) - v22;
      if (v21 == 0.0)
      {
        v58 = v51 / v50;
      }
      else
      {
        v52 = (float)((float)(v21 * -4.0) * v51) + (float)(v50 * v50);
        if (v52 < 0.0)
          goto LABEL_54;
        v53 = sqrtf(v52);
        v54 = v43 * (float)(v50 - v53);
        v55 = v50 + v53;
        v56 = v43 * v55;
        v57 = (float)(v43 * v55) <= v54;
        if ((float)(v43 * v55) <= v54)
          v58 = v43 * v55;
        else
          v58 = v54;
        if (v57)
          v56 = v54;
        if (v56 < 0.0)
        {
          v59 = v56 < v41;
LABEL_40:
          v60 = v40;
          if (v59)
            goto LABEL_54;
LABEL_41:
          if ((v60 & 0x80000000) == 0)
            goto LABEL_53;
          goto LABEL_54;
        }
        if (v56 <= 1.0)
        {
          v61 = v16 + (float)(v56 * v49);
          goto LABEL_52;
        }
        if ((v18 & 0x80000000) == 0)
        {
          v60 = v18;
          if (v56 <= v20)
          {
LABEL_53:
            v62 = (uint16x4_t *)(v27 + 8 * v60);
LABEL_55:
            v63 = vaddw_u16((uint32x4_t)vdupq_n_s32(*(unsigned __int8 *)(v44 + v28)), *v62);
            v64 = (int8x16_t)vshlq_u32(v63, (uint32x4_t)xmmword_185004AB0);
            v65 = vextq_s8(v64, (int8x16_t)vshlq_u32(v63, (uint32x4_t)xmmword_185004AC0), 0xCuLL);
            v65.i32[1] = v64.i32[0];
            LODWORD(v62) = (v63.i32[3] << 14) & 0x7000000;
            v66 = vandq_s8(v65, (int8x16_t)xmmword_185004AD0);
            v67 = vorr_s8(*(int8x8_t *)v66.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v66, v66, 8uLL));
            v24->i32[0] = v67.i32[0] | v62 | v67.i32[1];
            LOBYTE(v62) = -1;
            goto LABEL_56;
          }
        }
      }
      if (v58 < 0.0)
      {
        v59 = v58 < v41;
        goto LABEL_40;
      }
      if (v58 > 1.0)
      {
        v60 = v18;
        if (v58 > v20)
          goto LABEL_54;
        goto LABEL_41;
      }
      v61 = v16 + (float)(v58 * v49);
LABEL_52:
      v60 = (int)(float)(v15 * (float)(v61 - v14));
      if ((v60 & 0x80000000) == 0)
        goto LABEL_53;
LABEL_54:
      v62 = (uint16x4_t *)v26;
      if (v26)
        goto LABEL_55;
LABEL_56:
      v28 = ((_DWORD)v28 + 1) & v47;
      v10 = v5 + v10;
      v11 = v6 + v11;
      v24 = (int8x8_t *)((char *)v24 + 4);
      *v23++ = (_BYTE)v62;
      if (!--a4)
        return;
    }
  }
  v29 = a1 + 368;
  v30 = *(_QWORD *)(a1 + 368);
  v31 = (BYTE1(a2) + 1) & 0xF;
  v32 = v30 == 0;
  if (v30)
    v33 = v30 + ((a3 >> 4) & 0xF0);
  else
    v33 = v29;
  if (v32)
    LODWORD(v34) = 0;
  else
    LODWORD(v34) = v31;
  if (v32)
    LODWORD(v35) = 0;
  else
    LODWORD(v35) = v28;
  if (v32)
    v36 = 0;
  else
    v36 = 15;
  v37 = v11 * v11;
  v38 = -v21;
  if (v37 <= (float)-v21)
  {
    v68 = fabsf(v13[8]);
    v69 = v21 * -4.0;
    v70 = v17 - v16;
    v71 = (unsigned __int16 *)(v27 + 8 * v18);
    v72 = a4 + 2;
    while (1)
    {
      v73 = v37 + (float)(v10 * v10);
      v74 = v5 + v10;
      v75 = v37 + (float)(v74 * v74);
      if (v73 > v38 && v75 > v38)
      {
        if (v18 < 0)
        {
          if (!v26)
          {
            v110 = 0;
            LOBYTE(v103) = 0;
            goto LABEL_80;
          }
          v84 = *v26;
          v85 = v26[1];
          v86 = v26[2];
          v87 = v26[3];
        }
        else
        {
          v84 = *v71;
          v85 = v71[1];
          v86 = v71[2];
          v87 = v71[3];
        }
        v104 = *(unsigned __int8 *)(v33 + v35);
        v105 = v104 + v84;
        v106 = v104 + v85;
        v107 = v104 + v86;
        v108 = v104 + v87;
        v109 = *(unsigned __int8 *)(v33 + v34);
        v93 = v109 + v84;
        v94 = v109 + v85;
        v95 = v109 + v86;
        v96 = v109 + v87;
        LODWORD(v103) = (v108 << 14) & 0x7000000 | (BYTE1(v108) << 27) | (4 * v105) & 0x7C00 | (v106 >> 3) & 0x3E0 | (v107 >> 8) & 0x1F;
        goto LABEL_78;
      }
      v77 = sqrtf(v69 * v75);
      v78 = v68 * sqrtf(v69 * v73);
      v79 = v68 * v77;
      v80 = (int)(float)(v15 * (float)((float)(v16 + (float)(v78 * v70)) - v14));
      v81 = (int)(float)(v15 * (float)((float)(v16 + (float)((float)(v68 * v77) * v70)) - v14));
      if (v78 <= 1.0 && v79 <= 1.0)
      {
        v88 = (unsigned __int16 *)(v27 + 8 * v81);
        v89 = v88[1];
        v90 = v88[2];
        v91 = v88[3];
        v92 = *(unsigned __int8 *)(v33 + v34);
        v93 = v92 + *v88;
        v94 = v92 + v89;
        v95 = v92 + v90;
        v96 = v92 + v91;
        v97 = vaddw_u16((uint32x4_t)vdupq_n_s32(*(unsigned __int8 *)(v33 + v35)), *(uint16x4_t *)(v27 + 8 * v80));
        v98 = (v97.i32[3] << 14) & 0x7000000;
        v99 = (int8x16_t)vshlq_u32(v97, (uint32x4_t)xmmword_185004AB0);
        v100 = vextq_s8(v99, (int8x16_t)vshlq_u32(v97, (uint32x4_t)xmmword_185004AC0), 0xCuLL);
        v100.i32[1] = v99.i32[0];
        v101 = vandq_s8(v100, (int8x16_t)xmmword_185004AD0);
        v102 = vorr_s8(*(int8x8_t *)v101.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v101, v101, 8uLL));
        LODWORD(v103) = v102.i32[0] | v98 | v102.i32[1];
LABEL_78:
        v24->i32[0] = (int)v103;
        LOBYTE(v103) = -1;
        goto LABEL_79;
      }
      if (v78 <= 1.0)
      {
        if ((v80 & 0x80000000) == 0)
        {
          v83 = 4 * v80;
LABEL_84:
          v103 = (uint16x4_t *)(v27 + 2 * v83);
LABEL_86:
          v111 = vaddw_u16((uint32x4_t)vdupq_n_s32(*(unsigned __int8 *)(v33 + v35)), *v103);
          v112 = (int8x16_t)vshlq_u32(v111, (uint32x4_t)xmmword_185004AB0);
          v113 = vextq_s8(v112, (int8x16_t)vshlq_u32(v111, (uint32x4_t)xmmword_185004AC0), 0xCuLL);
          v113.i32[1] = v112.i32[0];
          LODWORD(v103) = (v111.i32[3] << 14) & 0x7000000;
          v114 = vandq_s8(v113, (int8x16_t)xmmword_185004AD0);
          v115 = vorr_s8(*(int8x8_t *)v114.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v114, v114, 8uLL));
          v24->i32[0] = v115.i32[0] | v103 | v115.i32[1];
          LOBYTE(v103) = -1;
          goto LABEL_87;
        }
      }
      else if (v78 <= v20)
      {
        v83 = 4 * v18;
        if ((v18 & 0x80000000) == 0)
          goto LABEL_84;
      }
      v103 = (uint16x4_t *)v26;
      if (v26)
        goto LABEL_86;
LABEL_87:
      if (v79 <= 1.0)
      {
        if (v81 < 0)
          goto LABEL_94;
        v116 = 4 * v81;
      }
      else if (v79 > v20 || (v116 = 4 * v18, v18 < 0))
      {
LABEL_94:
        if (!v26)
        {
          v110 = 0;
          goto LABEL_80;
        }
        v122 = *(unsigned __int8 *)(v33 + v34);
        v93 = v122 + *v26;
        v94 = v122 + v26[1];
        v95 = v122 + v26[2];
        v96 = v122 + v26[3];
        goto LABEL_79;
      }
      v117 = (unsigned __int16 *)(v27 + 2 * v116);
      v118 = v117[1];
      v119 = *(unsigned __int8 *)(v33 + v34);
      v120 = v117[2];
      v121 = v117[3];
      v93 = v119 + *v117;
      v94 = v119 + v118;
      v95 = v119 + v120;
      v96 = v119 + v121;
LABEL_79:
      v24->i32[1] = (v96 << 14) & 0x7000000 | (BYTE1(v96) << 27) | (4 * v93) & 0x7C00 | (v94 >> 3) & 0x3E0 | (v95 >> 8) & 0x1F;
      v110 = -1;
LABEL_80:
      v10 = v5 + v74;
      LOBYTE(v35) = (v35 + 1) & v36;
      LOBYTE(v34) = (v34 + 1) & v36;
      ++v24;
      *v23 = (_BYTE)v103;
      v23[1] = v110;
      v23 += 2;
      v72 -= 2;
      if (v72 <= 2)
        return;
    }
  }
  if (v26 || (v18 & 0x80000000) == 0)
  {
    v123 = (unsigned __int16 *)(v27 + 8 * v18);
    if (v18 >= 0)
      v124 = v123;
    else
      v124 = v26;
    v125 = vdup_n_s32(v124[3]);
    v126 = vdup_n_s32(*v124);
    v127 = vdup_n_s32(v124[1]);
    v128 = vdup_n_s32(v124[2]);
    v129 = a4 + 4;
    v130 = (int8x8_t)vdup_n_s32(0x3E0u);
    do
    {
      v131 = (__int8 *)(v33 + v35);
      v35 = ((_DWORD)v35 + 1) & v36;
      v4.i8[0] = *v131;
      v4.i8[4] = *(_BYTE *)(v33 + v34);
      v132 = (int32x2_t)vand_s8(v4, (int8x8_t)0xFF000000FFLL);
      v133 = vadd_s32(v126, v132);
      v134 = (uint32x2_t)vadd_s32(v127, v132);
      v135 = (uint32x2_t)vadd_s32(v128, v132);
      v136 = (uint32x2_t)vadd_s32(v125, v132);
      v137 = vorr_s8(vorr_s8(vorr_s8(vand_s8((int8x8_t)vshl_u32(v136, (uint32x2_t)0x130000000ELL), (int8x8_t)0xF800000007000000), vand_s8((int8x8_t)vshl_u32(v136, (uint32x2_t)0xE00000013), (int8x8_t)0x7000000F8000000)), vorr_s8(vand_s8((int8x8_t)vshl_n_s32(v133, 2uLL), (int8x8_t)0x7C0000007C00), vand_s8((int8x8_t)vshr_n_u32(v134, 3uLL), v130))), vand_s8((int8x8_t)vshr_n_u32(v135, 8uLL), (int8x8_t)0x1F0000001FLL));
      *v24 = v137;
      v34 = ((_DWORD)v34 + 1) & v36;
      v137.i8[0] = *(_BYTE *)(v33 + v35);
      v137.i8[4] = *(_BYTE *)(v33 + v34);
      v138 = (int32x2_t)vand_s8(v137, (int8x8_t)0xFF000000FFLL);
      v139 = vadd_s32(v126, v138);
      v140 = (uint32x2_t)vadd_s32(v127, v138);
      v141 = (uint32x2_t)vadd_s32(v128, v138);
      v142 = (uint32x2_t)vadd_s32(v125, v138);
      v4 = vorr_s8(vorr_s8(vorr_s8(vand_s8((int8x8_t)vshl_u32(v142, (uint32x2_t)0x130000000ELL), (int8x8_t)0xF800000007000000), vand_s8((int8x8_t)vshl_u32(v142, (uint32x2_t)0xE00000013), (int8x8_t)0x7000000F8000000)), vorr_s8(vand_s8((int8x8_t)vshl_n_s32(v139, 2uLL), (int8x8_t)0x7C0000007C00), vand_s8((int8x8_t)vshr_n_u32(v140, 3uLL), v130))), vand_s8((int8x8_t)vshr_n_u32(v141, 8uLL), (int8x8_t)0x1F0000001FLL));
      v24[1] = v4;
      *(_DWORD *)v23 = -1;
      v23 += 4;
      v129 -= 4;
      v24 += 2;
    }
    while (v129 > 4);
  }
  else
  {
    if (a4 >= 4)
      v39 = 4;
    else
      v39 = a4;
    bzero(v23, ((a4 - v39 + 3) & 0xFFFFFFFC) + 4);
  }
}

void rgb555_shade_conic_RGB(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  float v12;
  float v13;
  float v15;
  uint64_t v16;
  __int32 *v17;
  _BYTE *v18;
  uint64_t v19;
  float v20;
  float v21;
  unsigned int v22;
  float v23;
  float v24;
  unsigned int v25;
  float v26;
  float v27;
  uint32x4_t v28;
  __int32 v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  float v33;
  float v34;

  v4 = *(float *)(a1 + 280);
  v5 = *(float *)(*(_QWORD *)(a1 + 272) + 4);
  v6 = v5 * (float)a2;
  v7 = v5 * (float)a3;
  v8 = *(float *)(a1 + 296) + (float)((float)(*(float *)(a1 + 288) * v7) + (float)(v4 * v6));
  v9 = *(_QWORD *)(a1 + 368);
  if (v9)
    v10 = v9 + (((unint64_t)a3 >> 4) & 0xF0);
  else
    v10 = a1 + 368;
  if (v9)
    v11 = 15;
  else
    v11 = 0;
  v12 = *(float *)(a1 + 284);
  v13 = *(float *)(a1 + 300) + (float)((float)(v7 * *(float *)(a1 + 292)) + (float)(v12 * v6));
  v33 = *(float *)(a1 + 336);
  v34 = *(float *)(a1 + 304);
  v15 = *(float *)(a1 + 344);
  v16 = *(_QWORD *)(a1 + 360);
  v18 = *(_BYTE **)(a1 + 144);
  v17 = *(__int32 **)(a1 + 152);
  if (v9)
    v19 = ((unint64_t)a2 >> 8) & 0xF;
  else
    v19 = 0;
  v20 = *(float *)(a1 + 308) - *(float *)(a1 + 304);
  do
  {
    v21 = v15 * (float)((float)(v34 + (float)((float)((float)(atan2f(v13, v8) * 0.15915) + 0.5) * v20)) - v33);
    v22 = vcvtms_s32_f32(v21);
    v23 = ceilf(v21);
    v24 = (float)((float)(v21 - (float)(int)floorf(v21)) * 255.0) + 0.5;
    v25 = vcvtms_s32_f32(v15 + v21);
    v26 = ceilf(v21 - v15);
    if (v21 < 0.0)
      v22 = v25;
    if (v21 <= v15)
      v27 = v23;
    else
      v27 = v26;
    v28 = vsraq_n_u32((uint32x4_t)vdupq_n_s32(*(unsigned __int8 *)(v10 + v19)), (uint32x4_t)vmlaq_s32(vmulq_s32(vdupq_n_s32((int)v24), (int32x4_t)vmovl_u16(*(uint16x4_t *)(v16 + 8 * (int)v27))), vdupq_n_s32(255 - (int)v24), (int32x4_t)vmovl_u16(*(uint16x4_t *)(v16 + 2 * (int)(4 * v22)))), 8uLL);
    v29 = v28.i32[3] << 14;
    v30 = (int8x16_t)vshlq_u32(v28, (uint32x4_t)xmmword_185004AB0);
    v31 = vextq_s8(v30, (int8x16_t)vshlq_u32(v28, (uint32x4_t)xmmword_185004AC0), 0xCuLL);
    v31.i32[1] = v30.i32[0];
    v32 = vandq_s8(v31, (int8x16_t)xmmword_185004AD0);
    *(int8x8_t *)v32.i8 = vorr_s8(*(int8x8_t *)v32.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL));
    *v17++ = v32.i32[0] | v29 & 0x7000000 | v32.i32[1];
    v19 = ((_DWORD)v19 + 1) & v11;
    v8 = v4 + v8;
    v13 = v12 + v13;
    *v18++ = -1;
    --a4;
  }
  while (a4);
}

uint64_t rgb555_shade_custom_RGB(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint16x4_t *v22;
  uint64_t v23;
  int v24;
  unsigned __int32 *v25;
  _BYTE *v26;
  uint64_t v27;
  uint16x4_t *v31;
  uint32x4_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x8_t v36;

  v4 = *(float *)(result + 280);
  v5 = *(float *)(*(_QWORD *)(result + 272) + 4);
  v6 = v5 * (float)a2;
  v7 = v5 * (float)a3;
  v8 = *(float *)(result + 296) + (float)((float)(*(float *)(result + 288) * v7) + (float)(v4 * v6));
  v9 = result + 368;
  v10 = *(_QWORD *)(result + 368);
  v11 = 15;
  if (v10)
    v9 = v10 + (((unint64_t)a3 >> 4) & 0xF0);
  else
    v11 = 0;
  v12 = *(float *)(result + 284);
  v13 = *(float *)(result + 300) + (float)((float)(v7 * *(float *)(result + 292)) + (float)(v12 * v6));
  v14 = *(float *)(result + 304);
  v15 = *(float *)(result + 308);
  v16 = *(float *)(result + 312);
  v17 = *(float *)(result + 316);
  v18 = *(float *)(result + 336);
  v19 = *(float *)(result + 348);
  v20 = *(float *)(result + 344);
  v21 = *(float *)(result + 356);
  v22 = *(uint16x4_t **)(result + 376);
  v23 = *(_QWORD *)(result + 360);
  v24 = 4 * *(_DWORD *)(result + 48);
  v26 = *(_BYTE **)(result + 144);
  v25 = *(unsigned __int32 **)(result + 152);
  if (v10)
    v27 = ((unint64_t)a2 >> 8) & 0xF;
  else
    v27 = 0;
  do
  {
    if (v8 >= v14 && v13 >= v16 && v8 <= v15 && v13 <= v17)
    {
      v31 = (uint16x4_t *)(v23
                         + 2 * v24 * (int)(float)(v21 * (float)(v13 - v19))
                         + 8 * (int)(float)(v20 * (float)(v8 - v18)));
LABEL_20:
      v32 = vaddw_u16((uint32x4_t)vdupq_n_s32(*(unsigned __int8 *)(v9 + v27)), *v31);
      v33 = (int8x16_t)vshlq_u32(v32, (uint32x4_t)xmmword_185004AB0);
      v34 = vextq_s8(v33, (int8x16_t)vshlq_u32(v32, (uint32x4_t)xmmword_185004AC0), 0xCuLL);
      v34.i32[1] = v33.i32[0];
      LODWORD(v31) = (v32.i32[3] << 14) & 0x7000000;
      v35 = vandq_s8(v34, (int8x16_t)xmmword_185004AD0);
      v36 = vorr_s8(*(int8x8_t *)v35.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL));
      result = HIDWORD(*(_QWORD *)&v36);
      *v25 = v36.i32[0] | v31 | v36.i32[1];
      LOBYTE(v31) = -1;
      goto LABEL_21;
    }
    v31 = v22;
    if (v22)
      goto LABEL_20;
LABEL_21:
    v27 = ((_DWORD)v27 + 1) & v11;
    v8 = v4 + v8;
    v13 = v12 + v13;
    ++v25;
    *v26++ = (_BYTE)v31;
    --a4;
  }
  while (a4);
  return result;
}

void rgb555_shade_axial_RGB(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int8x8_t v4;
  float v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  float v14;
  float v15;
  float v16;
  float v17;
  int v18;
  int v19;
  _DWORD *v20;
  int8x8_t *v21;
  uint64_t v22;
  uint16x4_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  uint16x4_t *v32;
  uint32x4_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x8_t v37;
  unsigned __int16 *v38;
  unsigned __int16 *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  int32x2_t v44;
  int32x2_t v45;
  int32x2_t v46;
  int32x2_t v47;
  int v48;
  int8x8_t v49;
  __int8 *v50;
  int32x2_t v51;
  int32x2_t v52;
  uint32x2_t v53;
  uint32x2_t v54;
  uint32x2_t v55;
  int8x8_t v56;
  int32x2_t v57;
  int32x2_t v58;
  uint32x2_t v59;
  uint32x2_t v60;
  uint32x2_t v61;
  int32x4_t v62;
  int v63;

  v5 = *(float *)(a1 + 280);
  v6 = *(float *)(a1 + 296)
     + (float)((float)(*(float *)(a1 + 288) * (float)(*(float *)(*(_QWORD *)(a1 + 272) + 4) * (float)a3))
             + (float)(v5 * (float)(*(float *)(*(_QWORD *)(a1 + 272) + 4) * (float)a2)));
  v7 = a1 + 368;
  v8 = *(_QWORD *)(a1 + 368);
  v9 = ((unint64_t)a3 >> 4) & 0xF0;
  v10 = v8 + v9;
  if (v8)
    v11 = v8 + v9;
  else
    v11 = a1 + 368;
  if (v8)
    v12 = 15;
  else
    v12 = 0;
  v14 = *(float *)(a1 + 336);
  v15 = *(float *)(a1 + 344);
  v16 = *(float *)(a1 + 304);
  v17 = *(float *)(a1 + 308);
  v18 = *(_DWORD *)(a1 + 320);
  v19 = *(_DWORD *)(a1 + 324);
  v22 = a1 + 144;
  v20 = *(_DWORD **)(a1 + 144);
  v21 = *(int8x8_t **)(v22 + 8);
  v23 = *(uint16x4_t **)(a1 + 376);
  v24 = *(_QWORD *)(a1 + 360);
  if (v5 != 0.0)
  {
    if (v8)
      v30 = (a2 >> 8) & 0xF;
    else
      LOBYTE(v30) = 0;
    while (1)
    {
      v31 = v18;
      if (v6 >= v16)
      {
        v31 = v19;
        if (v6 <= v17)
          v31 = (int)(float)(v15 * (float)(v6 - v14));
      }
      if ((v31 & 0x80000000) == 0)
        break;
      v32 = v23;
      if (v23)
        goto LABEL_38;
LABEL_39:
      LOBYTE(v30) = (v30 + 1) & v12;
      v6 = v5 + v6;
      v21 = (int8x8_t *)((char *)v21 + 4);
      *(_BYTE *)v20 = (_BYTE)v32;
      v20 = (_DWORD *)((char *)v20 + 1);
      if (!--a4)
        return;
    }
    v32 = (uint16x4_t *)(v24 + 8 * v31);
LABEL_38:
    v33 = vaddw_u16((uint32x4_t)vdupq_n_s32(*(unsigned __int8 *)(v11 + v30)), *v32);
    v34 = (int8x16_t)vshlq_u32(v33, (uint32x4_t)xmmword_185004AB0);
    v35 = vextq_s8(v34, (int8x16_t)vshlq_u32(v33, (uint32x4_t)xmmword_185004AC0), 0xCuLL);
    v35.i32[1] = v34.i32[0];
    LODWORD(v32) = (v33.i32[3] << 14) & 0x7000000;
    v36 = vandq_s8(v35, (int8x16_t)xmmword_185004AD0);
    v37 = vorr_s8(*(int8x8_t *)v36.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL));
    v21->i32[0] = v37.i32[0] | v32 | v37.i32[1];
    LOBYTE(v32) = -1;
    goto LABEL_39;
  }
  if (v8)
    v25 = v10;
  else
    v25 = v7;
  if (v8)
    LODWORD(v26) = ((a2 >> 8) + 1) & 0xF;
  else
    LODWORD(v26) = 0;
  if (v8)
    LODWORD(v27) = (a2 >> 8) & 0xF;
  else
    LODWORD(v27) = 0;
  if (v8)
    v28 = 15;
  else
    v28 = 0;
  if (v6 >= v16)
  {
    v18 = v19;
    if (v6 <= v17)
      v18 = (int)(float)(v15 * (float)(v6 - v14));
  }
  if ((v18 & 0x80000000) == 0 || v23)
  {
    v38 = (unsigned __int16 *)(v24 + 8 * v18);
    if (v18 < 0)
      v39 = (unsigned __int16 *)v23;
    else
      v39 = v38;
    v40 = *v39;
    v41 = v39[3];
    v42 = v39[2];
    v43 = v39[1];
    if (v8)
    {
      v44 = vdup_n_s32(v40);
      v45 = vdup_n_s32(v43);
      v46 = vdup_n_s32(v42);
      v47 = vdup_n_s32(v41);
      v48 = a4 + 4;
      v49 = (int8x8_t)vdup_n_s32(0x3E0u);
      do
      {
        v50 = (__int8 *)(v25 + v27);
        v27 = ((_DWORD)v27 + 1) & v28;
        v4.i8[0] = *v50;
        v4.i8[4] = *(_BYTE *)(v25 + v26);
        v51 = (int32x2_t)vand_s8(v4, (int8x8_t)0xFF000000FFLL);
        v52 = vadd_s32(v44, v51);
        v53 = (uint32x2_t)vadd_s32(v45, v51);
        v54 = (uint32x2_t)vadd_s32(v46, v51);
        v55 = (uint32x2_t)vadd_s32(v47, v51);
        v56 = vorr_s8(vorr_s8(vorr_s8(vand_s8((int8x8_t)vshl_u32(v55, (uint32x2_t)0x130000000ELL), (int8x8_t)0xF800000007000000), vand_s8((int8x8_t)vshl_u32(v55, (uint32x2_t)0xE00000013), (int8x8_t)0x7000000F8000000)), vorr_s8(vand_s8((int8x8_t)vshl_n_s32(v52, 2uLL), (int8x8_t)0x7C0000007C00), vand_s8((int8x8_t)vshr_n_u32(v53, 3uLL), v49))), vand_s8((int8x8_t)vshr_n_u32(v54, 8uLL), (int8x8_t)0x1F0000001FLL));
        *v21 = v56;
        v26 = ((_DWORD)v26 + 1) & v28;
        v56.i8[0] = *(_BYTE *)(v25 + v27);
        v56.i8[4] = *(_BYTE *)(v25 + v26);
        v57 = (int32x2_t)vand_s8(v56, (int8x8_t)0xFF000000FFLL);
        v58 = vadd_s32(v44, v57);
        v59 = (uint32x2_t)vadd_s32(v45, v57);
        v60 = (uint32x2_t)vadd_s32(v46, v57);
        v61 = (uint32x2_t)vadd_s32(v47, v57);
        v4 = vorr_s8(vorr_s8(vorr_s8(vand_s8((int8x8_t)vshl_u32(v61, (uint32x2_t)0x130000000ELL), (int8x8_t)0xF800000007000000), vand_s8((int8x8_t)vshl_u32(v61, (uint32x2_t)0xE00000013), (int8x8_t)0x7000000F8000000)), vorr_s8(vand_s8((int8x8_t)vshl_n_s32(v58, 2uLL), (int8x8_t)0x7C0000007C00), vand_s8((int8x8_t)vshr_n_u32(v59, 3uLL), v49))), vand_s8((int8x8_t)vshr_n_u32(v60, 8uLL), (int8x8_t)0x1F0000001FLL));
        v21[1] = v4;
        *v20++ = -1;
        v48 -= 4;
        v21 += 2;
      }
      while (v48 > 4);
    }
    else
    {
      v62 = vdupq_n_s32((4 * v40) & 0x7C00 | (((v41 >> 10) & 7) << 24) & 0x7FFFFE0 | (BYTE1(v41) << 27) | (v42 >> 8) & 0x1F | (v43 >> 3) & 0x3E0);
      v63 = a4 + 4;
      do
      {
        *(int32x4_t *)v21->i8 = v62;
        v21 += 2;
        *v20++ = -1;
        v63 -= 4;
      }
      while (v63 > 4);
    }
  }
  else
  {
    if (a4 >= 4)
      v29 = 4;
    else
      v29 = a4;
    bzero(v20, ((a4 - v29 + 3) & 0xFFFFFFFC) + 4);
  }
}

void rgb555_image_mark(uint64_t a1, uint64_t a2, int a3, __n128 a4)
{
  unint64_t v4;
  uint64_t v5;
  float v6;
  int *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  __int16 *v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  unsigned __int8 *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  int32x2_t v54;
  void *v55;
  void (*v56)(_QWORD *, uint64_t, uint64_t, uint64_t);
  int32x4_t v57;
  unsigned __int16 *v58;
  unsigned __int8 *v59;
  unsigned int v60;
  int v61;
  unsigned __int8 *v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  unsigned int v68;
  BOOL v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  float *v74;
  float v75;
  float v76;
  float v77;
  float v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  unsigned int v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  float *v97;
  float v98;
  float v99;
  float v100;
  int v101;
  float v102;
  int v103;
  int v104;
  int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  unsigned __int32 v109;
  unsigned int v110;
  int8x16_t v111;
  uint64_t v112;
  float *v113;
  float v114;
  float v115;
  float v116;
  float v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  unsigned __int8 *v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  uint64_t v132;
  _BYTE *v133;
  __int16 *v134;
  unsigned int v135;
  int v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  _BYTE *v140;
  __int16 *v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  char v147;
  unsigned int v148;
  uint64_t v149;
  unsigned __int8 *v150;
  unsigned int v151;
  int v152;
  unsigned int v153;
  int v154;
  int v155;
  unsigned __int8 *v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  int v160;
  unsigned int v161;
  unsigned int v162;
  int v163;
  uint64_t v164;
  int v165;
  unsigned __int8 *v166;
  unsigned int v167;
  int v168;
  unsigned int v169;
  uint64_t v170;
  int v171;
  unsigned int v172;
  int v173;
  unsigned int v174;
  unsigned __int8 *v175;
  unsigned int v176;
  int v177;
  uint64_t v178;
  int v179;
  unsigned __int8 *v180;
  unsigned int v181;
  int v182;
  unsigned int v183;
  int v184;
  uint64_t v185;
  unsigned int v186;
  unsigned int v187;
  int v188;
  uint64_t v189;
  unsigned int v190;
  unsigned int v191;
  int v192;
  int v193;
  int v194;
  unsigned int v195;
  unsigned int v196;
  int8x16_t v197;
  unsigned int v198;
  unsigned int v199;
  int v200;
  int v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  int v206;
  int v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  unsigned int v211;
  int v212;
  int v213;
  unsigned int v214;
  unsigned int v215;
  unsigned int v216;
  unsigned int v217;
  int v218;
  int v219;
  unsigned int v220;
  unsigned int v221;
  unsigned int v222;
  unsigned int v223;
  int v224;
  int v225;
  unsigned int v226;
  unsigned int v227;
  unsigned int v228;
  unsigned int v229;
  int v230;
  int v231;
  unsigned int v232;
  unsigned int v233;
  unsigned int v234;
  unsigned int v235;
  int v236;
  int v237;
  unsigned int v238;
  unsigned int v239;
  unsigned int v240;
  unsigned int v241;
  int v242;
  int v243;
  unsigned int v244;
  unsigned int v245;
  unsigned int v246;
  unsigned int v247;
  int v248;
  int v249;
  unsigned int v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int v253;
  int v254;
  int v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  int v260;
  int v261;
  unsigned int v262;
  unsigned int v263;
  unsigned int v264;
  unsigned int v265;
  int v266;
  int v267;
  unsigned int v268;
  unsigned int v269;
  unsigned int v270;
  unsigned int v271;
  int v272;
  int v273;
  unsigned int v274;
  unsigned int v275;
  unsigned int v276;
  unsigned int v277;
  int v278;
  int v279;
  unsigned int v280;
  unsigned int v281;
  unsigned int v282;
  unsigned int v283;
  uint64_t v284;
  float *v285;
  float v286;
  float v287;
  float v288;
  float v289;
  int v290;
  int v291;
  int v292;
  int v293;
  unsigned int v294;
  uint64_t v295;
  unint64_t v296;
  uint64_t v297;
  unsigned int v298;
  int v299;
  unsigned int v300;
  __int16 v301;
  unsigned __int8 *v302;
  unsigned int v303;
  __int16 *v304;
  __int16 *v305;
  int v306;
  unsigned int v307;
  unsigned __int8 *v308;
  __int16 *v309;
  unsigned int v310;
  unsigned int v311;
  unsigned int v312;
  unsigned int v313;
  int v314;
  unsigned int v315;
  __int16 v316;
  unsigned int v317;
  int v318;
  unsigned int v319;
  __int16 v320;
  unsigned int v321;
  unsigned int v322;
  unsigned int v323;
  unsigned int v324;
  int v325;
  unsigned int v326;
  uint64_t v327;
  unsigned __int8 *v328;
  int v329;
  int v330;
  unsigned int v331;
  unsigned __int8 *v332;
  int v333;
  unsigned int v334;
  unsigned int v335;
  unsigned int v336;
  char v337;
  unsigned int v338;
  unsigned int v339;
  __int16 *v340;
  unsigned __int8 *v341;
  __int16 *v342;
  int v343;
  unsigned int v344;
  unsigned __int8 *v345;
  int v346;
  unsigned int v347;
  unsigned int v348;
  unsigned int v349;
  unint64_t v350;
  uint64_t v351;
  void *v352;
  uint64_t v353;
  uint64_t v354;
  unint64_t v355;
  uint64_t v356;
  int v357;
  int8x16_t v358;
  uint32x4_t v359;
  uint32x4_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  _QWORD *v365;
  void *v366;
  uint64_t v367;
  int v368;
  uint64_t v369;
  uint64_t v370;
  int *v371;
  unsigned int v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;

  v357 = a3;
  v375 = *MEMORY[0x1E0C80C00];
  v363 = a1;
  v373 = *(unsigned int *)(a1 + 4);
  v356 = (int)v373;
  v4 = ((int)v373 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if ((int)v4 <= 0x1FFFFFF)
  {
    v5 = *(_QWORD *)(v363 + 40);
    v6 = *(float *)(a2 + 184);
    v7 = *(int **)(v363 + 136);
    v370 = *(_QWORD *)(v363 + 48);
    v371 = v7;
    v8 = *(_QWORD *)(a2 + 96);
    v369 = *(_QWORD *)(a2 + 104);
    v10 = *(int *)(v363 + 24);
    v9 = *(int *)(v363 + 28);
    v11 = *(int *)(v363 + 16);
    v12 = *(int *)(v363 + 20);
    v13 = *(int *)(v363 + 12);
    v368 = *(_DWORD *)(v363 + 8);
    v365 = (_QWORD *)a2;
    v14 = *(int *)(a2 + 16);
    v15 = (v14 + 6) * v4;
    if (v15 > 65439)
    {
      v18 = (char *)malloc_type_calloc(1uLL, v15 + 96, 0x3023562EuLL);
      v17 = v18;
      v20 = v18;
      v21 = v365;
      if (!v18)
        return;
    }
    else
    {
      MEMORY[0x1E0C80A78](a1, a4);
      v17 = (char *)&v350 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v17, v16);
      v20 = 0;
      v21 = v365;
    }
    v22 = v12;
    v352 = v20;
    v367 = v8;
    v372 = (int)(float)((float)(v6 * 255.0) + 0.5);
    v23 = (unint64_t)(v17 + 15) & 0xFFFFFFFFFFFFFFF0;
    v24 = v23 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
    v21[20] = v24;
    if ((_DWORD)v14)
      v25 = 4 * v4;
    else
      v25 = 0;
    v26 = v24 + v25;
    v27 = v5 + (v10 - 1) * v9;
    v28 = v9 >> 1;
    v21[18] = v23;
    v21[19] = v26;
    if (v370)
    {
      v29 = v363;
      v30 = *(int *)(v363 + 32);
      v31 = (char *)(v370 + v13 + (int)v30 * (uint64_t)(int)v11);
      v364 = v30 - v356;
      v32 = v356;
      v374 = 1;
    }
    else
    {
      v31 = 0;
      v364 = 0;
      v374 = 0;
      v29 = v363;
      v32 = v356;
    }
    v33 = v371;
    v34 = v27 + 2 * v22;
    v35 = (__int16 *)(v5 + 2 * (v13 + v28 * v11));
    v362 = v28 - v32;
    v36 = *(int *)(v29 + 104);
    v37 = *(_DWORD *)(v29 + 108);
    v38 = *(unsigned __int8 *)(v29 + 2);
    v39 = v357;
    if (v38 == 6 || v38 == 1)
    {
      v40 = v365;
      v41 = v373;
      v42 = v367;
      v43 = v369;
      if (v371)
      {
        v350 = v28;
        v44 = 0;
        LODWORD(v371) = 0;
        v45 = *(int *)(v29 + 124);
        v46 = (unsigned __int8 *)v33 + v36 + (int)v45 * (uint64_t)v37;
        v32 = v356;
        v361 = v45 - v356;
        goto LABEL_31;
      }
      goto LABEL_668;
    }
    v41 = v373;
    if (v371)
    {
      v351 = v34;
      shape_enum_clip_alloc((uint64_t)v18, v19, v371, 1, 1, 1, v36, v37, v373, v368);
      if (v47)
      {
        v44 = v47;
        v350 = v28;
        LODWORD(v371) = 0;
        v48 = (int)((v14 * v4 + 15) & 0xFFFFFFF0);
        if (!(_DWORD)v14)
          v48 = 4 * v4;
        v49 = v356;
        v361 = -v356;
        v46 = (unsigned __int8 *)(v26 + v48 + 16);
        v42 = v367;
        v43 = v369;
        goto LABEL_21;
      }
LABEL_668:
      if (v352)
        free(v352);
      return;
    }
    v350 = v28;
    v46 = 0;
    v44 = 0;
    v361 = 0;
    LODWORD(v371) = 0;
    v40 = v365;
    v42 = v367;
    v43 = v369;
LABEL_31:
    v54 = vdup_n_s32(v372);
    v354 = (v41 - 1) + 1;
    v353 = -v32;
    v351 = v34;
    v355 = v34 - 2;
    v360 = (uint32x4_t)xmmword_185004AE0;
    v359 = (uint32x4_t)xmmword_185004AF0;
    v358 = (int8x16_t)xmmword_185004B00;
    v55 = v44;
LABEL_32:
    v366 = v55;
    v367 = v42;
    v56 = (void (*)(_QWORD *, uint64_t, uint64_t, uint64_t))*v40;
    v369 = v43;
    v56(v40, v42, v43, v41);
    v58 = (unsigned __int16 *)v40[20];
    v59 = (unsigned __int8 *)v40[18];
    v60 = *((_DWORD *)v40 + 2);
    if (v60 == *((_DWORD *)v40 + 3))
    {
      if (v372 > 0xF7)
        goto LABEL_162;
      v61 = v41;
      v62 = v59;
      do
      {
        if (*v62 >= 8u)
          *(_DWORD *)v58 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v372);
        ++v62;
        v58 += 2;
        --v61;
      }
      while (v61);
      v58 += 2 * v353;
      v59 += v354 + v353;
      goto LABEL_161;
    }
    v63 = v40[19];
    v64 = *(_DWORD *)(v363 + 12);
    v65 = *(_DWORD *)(v363 + 16) + (_DWORD)v371;
    v66 = HIWORD(v60) & 0x3F;
    if (v66 == 16)
    {
      v84 = v40[21];
      if (v84)
      {
        if (v64 <= 0)
          v85 = -(-v64 & 0xF);
        else
          v85 = *(_DWORD *)(v363 + 12) & 0xF;
        v69 = -v65 < 0;
        v86 = -v65 & 0xF;
        v87 = v65 & 0xF;
        if (!v69)
          v87 = -v86;
        v88 = v84 + 16 * v87;
        if (v372 >= 0xF8)
        {
          v123 = 0;
          do
          {
            if (v59[v123] >= 8u)
              *(_DWORD *)&v58[2 * v123] = DITHERRGBA32((HIBYTE(*(_QWORD *)(v63 + 8 * v123)) | (BYTE3(*(_QWORD *)(v63 + 8 * v123)) << 16)) & 0xFFFFFF | (BYTE1(*(_QWORD *)(v63 + 8 * v123)) << 24) | HIDWORD(*(_QWORD *)(v63 + 8 * v123)) & 0xFF00, *(unsigned __int8 *)(v88 + v85));
            v85 = ((_BYTE)v85 + 1) & 0xF;
            ++v123;
          }
          while ((_DWORD)v373 != (_DWORD)v123);
        }
        else
        {
          v89 = 0;
          do
          {
            if (v59[v89] >= 8u)
              *(_DWORD *)&v58[2 * v89] = DITHERRGBA32M((HIBYTE(*(_QWORD *)(v63 + 8 * v89)) | (BYTE3(*(_QWORD *)(v63 + 8 * v89)) << 16)) & 0xFFFFFF | (BYTE1(*(_QWORD *)(v63 + 8 * v89)) << 24) | HIDWORD(*(_QWORD *)(v63 + 8 * v89)) & 0xFF00, *(unsigned __int8 *)(v88 + v85), v372);
            v85 = ((_BYTE)v85 + 1) & 0xF;
            ++v89;
          }
          while ((_DWORD)v373 != (_DWORD)v89);
        }
        goto LABEL_155;
      }
      if (v372 < 0xF8)
      {
        v107 = 0;
        do
        {
          if (v59[v107] >= 8u)
            *(_DWORD *)&v58[2 * v107] = PDAM((*(_QWORD *)(v63 + 8 * v107) >> 1) & 0x7C00 | (32 * (*(_QWORD *)(v63 + 8 * v107) >> 27)) | (*(_QWORD *)(v63 + 8 * v107) >> 43) & 0x1F, HIBYTE(*(_QWORD *)(v63 + 8 * v107)), v372);
          ++v107;
        }
        while ((_DWORD)v41 != (_DWORD)v107);
        goto LABEL_161;
      }
      v295 = 0;
      do
      {
        if (v59[v295] >= 8u)
        {
          v296 = *(_QWORD *)(v63 + 8 * v295);
          *(_DWORD *)&v58[2 * v295] = (v296 >> 1) & 0x7C00 | (32 * (v296 >> 27)) & 0xFFFFFF | (v296 >> 43) & 0x1F | (HIBYTE(v296) >> 3 << 27) | (((HIBYTE(v296) >> 5) & 7) << 24);
        }
        ++v295;
      }
      while ((_DWORD)v41 != (_DWORD)v295);
    }
    else if (v66 == 32)
    {
      v67 = v40[21];
      if (v67)
      {
        if (v64 <= 0)
          v68 = -(-v64 & 0xF);
        else
          v68 = *(_DWORD *)(v363 + 12) & 0xF;
        v69 = -v65 < 0;
        v70 = -v65 & 0xF;
        v71 = v65 & 0xF;
        if (!v69)
          v71 = -v70;
        v72 = v67 + 16 * v71;
        if (v372 >= 0xF8)
        {
          v112 = 0;
          v113 = (float *)(v63 + 8);
          do
          {
            if (v59[v112] >= 8u)
            {
              v114 = v113[1];
              if (v114 <= 0.0)
              {
                v122 = 0;
              }
              else
              {
                v115 = *(v113 - 2);
                v116 = *(v113 - 1);
                v117 = *v113;
                v118 = (int)(float)((float)(v114 * 255.0) + 0.5);
                if (v114 > 1.0)
                {
                  v118 = 255;
                  v114 = 1.0;
                }
                v119 = (int)(float)((float)(v115 * 255.0) + 0.5);
                if (v115 < 0.0)
                  v119 = 0;
                if (v115 > v114)
                  v119 = v118;
                v120 = (int)(float)((float)(v116 * 255.0) + 0.5);
                if (v116 < 0.0)
                  v120 = 0;
                if (v116 > v114)
                  v120 = v118;
                v121 = (int)(float)((float)(v117 * 255.0) + 0.5);
                if (v117 < 0.0)
                  v121 = 0;
                if (v117 > v114)
                  v121 = v118;
                v122 = DITHERRGBA32((v119 << 24) | (v120 << 16) | (v121 << 8) | v118, *(unsigned __int8 *)(v72 + v68));
              }
              *(_DWORD *)&v58[2 * v112] = v122;
            }
            v68 = ((_BYTE)v68 + 1) & 0xF;
            ++v112;
            v113 += 4;
          }
          while ((_DWORD)v373 != (_DWORD)v112);
        }
        else
        {
          v73 = 0;
          v74 = (float *)(v63 + 8);
          do
          {
            if (v59[v73] >= 8u)
            {
              v75 = v74[1];
              if (v75 <= 0.0)
              {
                v83 = 0;
              }
              else
              {
                v76 = *(v74 - 2);
                v77 = *(v74 - 1);
                v78 = *v74;
                v79 = (int)(float)((float)(v75 * 255.0) + 0.5);
                if (v75 > 1.0)
                {
                  v79 = 255;
                  v75 = 1.0;
                }
                v80 = (int)(float)((float)(v76 * 255.0) + 0.5);
                if (v76 < 0.0)
                  v80 = 0;
                if (v76 > v75)
                  v80 = v79;
                v81 = (int)(float)((float)(v77 * 255.0) + 0.5);
                if (v77 < 0.0)
                  v81 = 0;
                if (v77 > v75)
                  v81 = v79;
                v82 = (int)(float)((float)(v78 * 255.0) + 0.5);
                if (v78 < 0.0)
                  v82 = 0;
                if (v78 > v75)
                  v82 = v79;
                v83 = DITHERRGBA32M((v80 << 24) | (v81 << 16) | (v82 << 8) | v79, *(unsigned __int8 *)(v72 + v68), v372);
              }
              *(_DWORD *)&v58[2 * v73] = v83;
            }
            v68 = ((_BYTE)v68 + 1) & 0xF;
            ++v73;
            v74 += 4;
          }
          while ((_DWORD)v373 != (_DWORD)v73);
        }
LABEL_155:
        v40 = v365;
        v41 = v373;
        goto LABEL_162;
      }
      if (v372 < 0xF8)
      {
        v96 = 0;
        v97 = (float *)(v63 + 8);
        do
        {
          if (v59[v96] >= 8u)
          {
            v98 = v97[1];
            if (v98 <= 0.0)
            {
              v106 = 0;
            }
            else
            {
              v99 = *(v97 - 2);
              v100 = *(v97 - 1);
              v101 = (int)(float)((float)(v98 * 255.0) + 0.5);
              v102 = *v97;
              if (v98 > 1.0)
              {
                v101 = 255;
                v98 = 1.0;
              }
              v103 = (int)(float)((float)(v99 * 255.0) + 0.5);
              if (v99 < 0.0)
                v103 = 0;
              if (v99 > v98)
                v103 = v101;
              v104 = (int)(float)((float)(v100 * 255.0) + 0.5);
              if (v100 < 0.0)
                LOWORD(v104) = 0;
              if (v100 > v98)
                LOWORD(v104) = v101;
              v105 = (int)(float)((float)(v102 * 255.0) + 0.5);
              if (v102 < 0.0)
                LOBYTE(v105) = 0;
              if (v102 > v98)
                LOBYTE(v105) = v101;
              v106 = PDAM((v103 << 7) & 0x7C00 | (4 * (_WORD)v104) & 0x3E0 | (v105 >> 3), v101, v372);
            }
            *(_DWORD *)&v58[2 * v96] = v106;
          }
          ++v96;
          v97 += 4;
        }
        while ((_DWORD)v41 != (_DWORD)v96);
LABEL_161:
        v40 = v365;
        goto LABEL_162;
      }
      v284 = 0;
      v285 = (float *)(v63 + 8);
      do
      {
        if (v59[v284] >= 8u)
        {
          v286 = v285[1];
          if (v286 <= 0.0)
          {
            v294 = 0;
          }
          else
          {
            v287 = *(v285 - 2);
            v288 = *(v285 - 1);
            v289 = *v285;
            v290 = (int)(float)((float)(v286 * 255.0) + 0.5);
            if (v286 > 1.0)
            {
              v286 = 1.0;
              v290 = 255;
            }
            v291 = (int)(float)((float)(v287 * 255.0) + 0.5);
            if (v287 < 0.0)
              v291 = 0;
            if (v287 > v286)
              v291 = v290;
            v292 = (int)(float)((float)(v288 * 255.0) + 0.5);
            if (v288 < 0.0)
              v292 = 0;
            if (v288 > v286)
              v292 = v290;
            v293 = (int)(float)((float)(v289 * 255.0) + 0.5);
            if (v289 < 0.0)
              LOBYTE(v293) = 0;
            if (v289 > v286)
              LOBYTE(v293) = v290;
            v294 = (v290 << 24) & 0xF8000000 | (v290 >> 5 << 24) | (v291 << 7) & 0x7C00 | (4 * v292) & 0x3E0 | (v293 >> 3);
          }
          *(_DWORD *)&v58[2 * v284] = v294;
        }
        ++v284;
        v285 += 4;
      }
      while ((_DWORD)v41 != (_DWORD)v284);
    }
    else
    {
      v90 = v40[21];
      if (v90)
      {
        if (v64 <= 0)
          v91 = -(-v64 & 0xF);
        else
          v91 = *(_DWORD *)(v363 + 12) & 0xF;
        v69 = -v65 < 0;
        v92 = -v65 & 0xF;
        v93 = v65 & 0xF;
        if (!v69)
          v93 = -v92;
        v94 = v90 + 16 * v93;
        if (v372 >= 0xF8)
        {
          v124 = 0;
          do
          {
            if (v59[v124] >= 8u)
              *(_DWORD *)&v58[2 * v124] = DITHERRGBA32(*(_DWORD *)(v63 + 4 * v124), *(unsigned __int8 *)(v94 + v91));
            v91 = (v91 + 1) & 0xF;
            ++v124;
          }
          while ((_DWORD)v41 != (_DWORD)v124);
        }
        else
        {
          v95 = 0;
          do
          {
            if (v59[v95] >= 8u)
              *(_DWORD *)&v58[2 * v95] = DITHERRGBA32M(*(_DWORD *)(v63 + 4 * v95), *(unsigned __int8 *)(v94 + v91), v372);
            v91 = (v91 + 1) & 0xF;
            ++v95;
          }
          while ((_DWORD)v41 != (_DWORD)v95);
        }
        v39 = v357;
        goto LABEL_161;
      }
      if (v372 >= 0xF8)
      {
        v297 = 0;
        do
        {
          if (v59[v297] >= 8u)
          {
            v298 = *(_DWORD *)(v63 + 4 * v297);
            *(_DWORD *)&v58[2 * v297] = (v298 >> 17) & 0x7C00 | (v298 >> 14) & 0x3E0 | ((unsigned __int16)v298 >> 11) & 0xFFFFFF | ((v298 >> 3) << 27) | (v298 >> 5 << 24);
          }
          ++v297;
        }
        while ((_DWORD)v41 != (_DWORD)v297);
      }
      else
      {
        v108 = 0;
        do
        {
          if (v59[v108] >= 8u)
          {
            v57.i16[0] = *(_DWORD *)(v63 + 4 * v108);
            v57.i16[1] = BYTE2(*(_DWORD *)(v63 + 4 * v108));
            v57.i16[2] = BYTE1(*(_DWORD *)(v63 + 4 * v108));
            v57.i16[3] = (*(_DWORD *)(v63 + 4 * v108) >> 8 >> 16);
            *(int32x2_t *)v57.i8 = vmul_s32(*(int32x2_t *)v57.i8, v54);
            *(int32x2_t *)v57.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v57.i8, (int32x2_t)0x1000100010001), (int32x2_t)(*(_QWORD *)&vshr_n_u32(*(uint32x2_t *)v57.i8, 8uLL) & 0xFFFF00FFFFFF00FFLL));
            v109 = vshlq_u32((uint32x4_t)v57, v360).u32[0];
            v110 = (unsigned __int32)v57.i32[0] >> 11;
            v111 = (int8x16_t)vshlq_u32((uint32x4_t)vzip1q_s32(v57, v57), v359);
            v111.i32[0] = v109;
            v57 = (int32x4_t)vandq_s8(v111, v358);
            *(int8x8_t *)v57.i8 = vorr_s8(*(int8x8_t *)v57.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL));
            *(_DWORD *)&v58[2 * v108] = v57.i32[0] | v57.i32[1] | (v110 << 27);
          }
          ++v108;
        }
        while ((_DWORD)v41 != (_DWORD)v108);
      }
    }
LABEL_162:
    switch(v39)
    {
      case 0:
        v125 = v46 != 0;
        if (v370)
        {
          v126 = v41;
          v127 = v46;
          while (1)
          {
            v128 = *v59;
            if (*v59)
            {
              if (v46)
                v128 = (*v127 * v128 + ((*v127 * v128) >> 8) + 1) >> 8;
              if (v128 >= 0xF8u)
              {
                LOBYTE(v129) = 0;
                *v35 = 0;
LABEL_172:
                *v31 = v129;
                goto LABEL_173;
              }
              if (v128 >= 8u)
              {
                v130 = PDAM((unsigned __int16)*v35, *v31, ~(_BYTE)v128);
                *v35 = v130;
                v129 = HIBYTE(v130);
                goto LABEL_172;
              }
            }
LABEL_173:
            ++v59;
            v127 += v125;
            ++v35;
            ++v31;
            if (!--v126)
              goto LABEL_539;
          }
        }
        v299 = v41;
        v127 = v46;
        while (1)
        {
          v300 = *v59;
          if (*v59)
          {
            if (v46)
              v300 = (*v127 * v300 + ((*v127 * v300) >> 8) + 1) >> 8;
            if (v300 > 0xF7u)
            {
              v301 = 0;
LABEL_537:
              *v35 = v301;
              goto LABEL_538;
            }
            if (v300 >= 8u)
            {
              v301 = PDM((unsigned __int16)*v35, ~(_BYTE)v300);
              goto LABEL_537;
            }
          }
LABEL_538:
          ++v59;
          v127 += v125;
          ++v35;
          if (!--v299)
          {
LABEL_539:
            v46 = &v127[v361];
            v35 += v362;
            v40 = v365;
            v31 += v364;
            goto LABEL_611;
          }
        }
      case 1:
        v131 = *v59;
        if (v370)
        {
          if (v46)
          {
            v132 = 0;
            v133 = v59 + 1;
            v134 = v35 - 1;
            v44 = v366;
            while (1)
            {
              if (v131)
              {
                v135 = v131 * v46[v132] + ((v131 * v46[v132]) >> 8) + 1;
                if (BYTE1(v135) >= 0xF8u)
                {
                  v136 = *(_DWORD *)&v58[2 * v132];
LABEL_183:
                  v35[v132] = v136;
                  v31[v132] = HIBYTE(v136);
                  goto LABEL_184;
                }
                if (BYTE1(v135) >= 8u)
                {
                  v136 = PDAMplusDAM((unsigned __int16)*(_DWORD *)&v58[2 * v132], HIBYTE(*(_DWORD *)&v58[2 * v132]), BYTE1(v135), (unsigned __int16)v35[v132], v31[v132], ~(v135 >> 8));
                  goto LABEL_183;
                }
              }
LABEL_184:
              v131 = v133[v132++];
              ++v134;
              if ((_DWORD)v373 == (_DWORD)v132)
              {
                v137 = (uint64_t)&v31[v132 - 1];
                v46 += v132 + v361;
LABEL_623:
                v35 = &v134[v362 + 1];
                v31 = (char *)(v137 + v364 + 1);
                goto LABEL_652;
              }
            }
          }
          v328 = v59 + 1;
          v137 = (uint64_t)(v31 - 1);
          v134 = v35 - 1;
          v329 = v373;
          v44 = v366;
          while (v131 < 0xF8)
          {
            if (v131 >= 8)
            {
              v330 = PDAMplusDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v131, (unsigned __int16)v134[1], *(_BYTE *)(v137 + 1), ~(_BYTE)v131);
              goto LABEL_620;
            }
LABEL_621:
            v331 = *v328++;
            v131 = v331;
            v58 += 2;
            ++v137;
            ++v134;
            if (!--v329)
            {
              v46 = 0;
              goto LABEL_623;
            }
          }
          v330 = *(_DWORD *)v58;
LABEL_620:
          v134[1] = v330;
          *(_BYTE *)(v137 + 1) = HIBYTE(v330);
          goto LABEL_621;
        }
        if (v46)
        {
          v302 = v59 + 1;
          v44 = v366;
          while (1)
          {
            if (v131)
            {
              v303 = v131 * *v46 + ((v131 * *v46) >> 8) + 1;
              v304 = (__int16 *)v355;
              if (v355 >= (unint64_t)v35)
                v304 = v35;
              if ((unint64_t)v304 >= *(_QWORD *)(v363 + 40))
                v305 = v304;
              else
                v305 = *(__int16 **)(v363 + 40);
              if (BYTE1(v303) >= 0xF8u)
              {
                v306 = *(_DWORD *)v58;
LABEL_553:
                *v305 = v306;
                goto LABEL_554;
              }
              if (BYTE1(v303) >= 8u)
              {
                LOWORD(v306) = PDMplusDM(*v58, BYTE1(v303), (unsigned __int16)*v305, ~(v303 >> 8));
                goto LABEL_553;
              }
            }
            else
            {
              v305 = v35;
            }
LABEL_554:
            v307 = *v302++;
            v131 = v307;
            v58 += 2;
            ++v46;
            v35 = v305 + 1;
            LODWORD(v41) = v41 - 1;
            if (!(_DWORD)v41)
            {
              v46 += v361;
LABEL_651:
              v35 = &v305[v362 + 1];
              v31 += v364;
LABEL_652:
              v40 = v365;
              v41 = v373;
LABEL_665:
              v327 = v367;
LABEL_612:
              if (!--v368)
              {
LABEL_666:
                if (v44)
                  free(v44);
                goto LABEL_668;
              }
              v55 = 0;
              LODWORD(v371) = (_DWORD)v371 + 1;
              v42 = v40[16] + v327;
              v43 = v40[17] + v369;
              if (v44)
              {
                v49 = v356;
LABEL_21:
                v50 = v364 + v49;
                while (1)
                {
                  while (1)
                  {
                    v51 = *((_DWORD *)v46 - 4);
                    v52 = v51 - (_DWORD)v371;
                    if (v51 <= (int)v371)
                      break;
                    v368 -= v52;
                    if (v368 < 1)
                      goto LABEL_666;
                    v42 += v365[16] * v52;
                    v43 += v365[17] * v52;
                    v35 += v350 * v52;
                    v53 = v50 * v52;
                    if (!v370)
                      v53 = 0;
                    v31 += v53;
                    LODWORD(v371) = v51;
                  }
                  if ((int)v371 < *((_DWORD *)v46 - 3) + v51)
                    break;
                  if (!shape_enum_clip_scan((uint64_t)v44, (_DWORD *)v46 - 4))
                    goto LABEL_666;
                }
                v40 = v365;
                v32 = v356;
                v34 = v351;
                goto LABEL_31;
              }
              goto LABEL_32;
            }
          }
        }
        v340 = *(__int16 **)(v363 + 40);
        v341 = v59 + 1;
        v44 = v366;
        while (1)
        {
          v342 = (__int16 *)v355;
          if (v355 >= (unint64_t)v35)
            v342 = v35;
          v305 = v342 >= v340 ? v342 : v340;
          if (v131 >= 0xF8)
            break;
          if (v131 >= 8)
          {
            LOWORD(v343) = PDMplusDM(*v58, v131, (unsigned __int16)*v305, ~(_BYTE)v131);
            goto LABEL_648;
          }
LABEL_649:
          v344 = *v341++;
          v131 = v344;
          v58 += 2;
          v35 = v305 + 1;
          LODWORD(v41) = v41 - 1;
          if (!(_DWORD)v41)
          {
            v46 = 0;
            goto LABEL_651;
          }
        }
        v343 = *(_DWORD *)v58;
LABEL_648:
        *v305 = v343;
        goto LABEL_649;
      case 2:
        v138 = *v59;
        if (v370)
        {
          if (v46)
          {
            v139 = 0;
            v140 = v59 + 1;
            v141 = v35 - 1;
            while (1)
            {
              if (v138)
              {
                v142 = ((unsigned __int16)(v138 * v46[v139] + ((v138 * v46[v139]) >> 8) + 1) >> 8);
                if (v142 < 0xF8)
                {
                  if (v142 < 8)
                    goto LABEL_200;
                  v145 = PDAM((unsigned __int16)*(_DWORD *)&v58[2 * v139], HIBYTE(*(_DWORD *)&v58[2 * v139]), v142);
                  v144 = HIBYTE(v145);
                  if (HIBYTE(v145) < 8u)
                    goto LABEL_200;
                  v146 = (unsigned __int16)v35[v139];
                  v147 = v31[v139];
                  v145 = (unsigned __int16)v145;
LABEL_198:
                  v148 = PDAplusDAM(v145, v144, v146, v147, v144 ^ 0xFF);
                  v35[v139] = v148;
                  v144 = HIBYTE(v148);
LABEL_199:
                  v31[v139] = v144;
                  goto LABEL_200;
                }
                v143 = *(_DWORD *)&v58[2 * v139];
                v144 = HIBYTE(v143);
                if (HIBYTE(v143) >= 0xF8u)
                {
                  v35[v139] = v143;
                  goto LABEL_199;
                }
                if (v144 >= 8)
                {
                  v146 = (unsigned __int16)v35[v139];
                  v147 = v31[v139];
                  v145 = (unsigned __int16)*(_DWORD *)&v58[2 * v139];
                  goto LABEL_198;
                }
              }
LABEL_200:
              v138 = v140[v139++];
              ++v141;
              if ((_DWORD)v373 == (_DWORD)v139)
              {
                v149 = (uint64_t)&v31[v139 - 1];
                v46 += v139 + v361;
                v41 = v373;
LABEL_637:
                v35 = &v141[v362 + 1];
                v31 = (char *)(v149 + v364 + 1);
                goto LABEL_611;
              }
            }
          }
          v332 = v59 + 1;
          v149 = (uint64_t)(v31 - 1);
          v141 = v35 - 1;
          v333 = v41;
          while (v138 >= 0xF8)
          {
            v334 = HIBYTE(*(_DWORD *)v58);
            if (v334 >= 0xF8)
            {
              v141[1] = *(_DWORD *)v58;
              goto LABEL_634;
            }
            if (v334 >= 8)
            {
              v336 = (unsigned __int16)v141[1];
              v337 = *(_BYTE *)(v149 + 1);
              v335 = (unsigned __int16)*(_DWORD *)v58;
              goto LABEL_633;
            }
LABEL_635:
            v339 = *v332++;
            v138 = v339;
            v58 += 2;
            ++v149;
            ++v141;
            if (!--v333)
            {
              v46 = 0;
              v40 = v365;
              goto LABEL_637;
            }
          }
          if (v138 < 8)
            goto LABEL_635;
          v335 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v138);
          v334 = HIBYTE(v335);
          if (HIBYTE(v335) < 8u)
            goto LABEL_635;
          v336 = (unsigned __int16)v141[1];
          v337 = *(_BYTE *)(v149 + 1);
          v335 = (unsigned __int16)v335;
LABEL_633:
          v338 = PDAplusDAM(v335, v334, v336, v337, v334 ^ 0xFF);
          v141[1] = v338;
          v334 = HIBYTE(v338);
LABEL_634:
          *(_BYTE *)(v149 + 1) = v334;
          goto LABEL_635;
        }
        if (v46)
        {
          v308 = v59 + 1;
          v309 = v35 - 1;
          v44 = v366;
          while (1)
          {
            if (v138)
            {
              v310 = ((unsigned __int16)(v138 * *v46 + ((v138 * *v46) >> 8) + 1) >> 8);
              if (v310 < 0xF8)
              {
                if (v310 < 8)
                  goto LABEL_567;
                v311 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v310);
                v312 = HIBYTE(v311);
              }
              else
              {
                v311 = *(_DWORD *)v58;
                v312 = HIBYTE(*(_DWORD *)v58);
                if (v312 >= 0xF8)
                  goto LABEL_566;
              }
              if (v312 >= 8)
              {
                LOWORD(v311) = PDplusDM(v311, (unsigned __int16)v309[1], ~v311 >> 24);
LABEL_566:
                v309[1] = v311;
              }
            }
LABEL_567:
            v313 = *v308++;
            v138 = v313;
            v58 += 2;
            ++v46;
            ++v309;
            LODWORD(v41) = v41 - 1;
            if (!(_DWORD)v41)
            {
              v46 += v361;
              v41 = v373;
LABEL_664:
              v35 = &v309[v362 + 1];
              v31 += v364;
              goto LABEL_665;
            }
          }
        }
        v345 = v59 + 1;
        v309 = v35 - 1;
        v346 = v41;
        v44 = v366;
        while (1)
        {
          if (v138 < 0xF8)
          {
            if (v138 < 8)
              goto LABEL_662;
            v347 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v138);
            v348 = HIBYTE(v347);
          }
          else
          {
            v347 = *(_DWORD *)v58;
            v348 = HIBYTE(*(_DWORD *)v58);
            if (v348 >= 0xF8)
              goto LABEL_661;
          }
          if (v348 >= 8)
          {
            LOWORD(v347) = PDplusDM(v347, (unsigned __int16)v309[1], ~v347 >> 24);
LABEL_661:
            v309[1] = v347;
          }
LABEL_662:
          v349 = *v345++;
          v138 = v349;
          v58 += 2;
          ++v309;
          if (!--v346)
          {
            v46 = 0;
            v40 = v365;
            goto LABEL_664;
          }
        }
      case 3:
        v150 = v46;
        while (1)
        {
          v151 = *v59;
          if (*v59)
          {
            if (v46)
              v151 = (*v150 * v151 + ((*v150 * v151) >> 8) + 1) >> 8;
            if (v151 >= 0xF8u)
            {
              v152 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), *v31);
LABEL_210:
              *v35 = v152;
              *v31 = HIBYTE(v152);
              goto LABEL_211;
            }
            if (v151 >= 8u)
            {
              v152 = PDAMplusDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), ((unsigned __int16)(*v31 * v151+ ((*v31 * v151) >> 8)+ 1) >> 8), (unsigned __int16)*v35, *v31, ~(_BYTE)v151);
              goto LABEL_210;
            }
          }
LABEL_211:
          ++v59;
          v58 += 2;
          v150 += v46 != 0;
          ++v35;
          v31 += v374;
          LODWORD(v41) = v41 - 1;
          if (!(_DWORD)v41)
            goto LABEL_243;
        }
      case 4:
        v150 = v46;
        while (1)
        {
          v153 = *v59;
          if (*v59)
          {
            if (v46)
              v153 = (*v150 * v153 + ((*v150 * v153) >> 8) + 1) >> 8;
            if (v153 >= 0xF8u)
            {
              v154 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), ~*v31);
LABEL_221:
              *v35 = v154;
              *v31 = HIBYTE(v154);
              goto LABEL_222;
            }
            if (v153 >= 8u)
            {
              v154 = PDAMplusDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), ((unsigned __int16)((*v31 ^ 0xFF) * v153+ (((*v31 ^ 0xFF)* v153) >> 8)+ 1) >> 8), (unsigned __int16)*v35, *v31, ~(_BYTE)v153);
              goto LABEL_221;
            }
          }
LABEL_222:
          ++v59;
          v58 += 2;
          v150 += v46 != 0;
          ++v35;
          v31 += v374;
          LODWORD(v41) = v41 - 1;
          if (!(_DWORD)v41)
            goto LABEL_243;
        }
      case 5:
        v155 = v41;
        v156 = v46;
        do
        {
          v157 = *v59;
          if (*v59)
          {
            if (v46)
              v157 = (*v156 * v157 + ((*v156 * v157) >> 8) + 1) >> 8;
            if (v157 >= 8u)
            {
              v158 = *v31;
              v159 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v157);
              v160 = PDAMplusDAM((unsigned __int16)v159, SHIBYTE(v159), v158, (unsigned __int16)*v35, v158, HIBYTE(v159) ^ 0xFF);
              *v35 = v160;
              *v31 = HIBYTE(v160);
            }
          }
          ++v59;
          v58 += 2;
          v156 += v46 != 0;
          ++v35;
          v31 += v374;
          --v155;
        }
        while (v155);
        v46 = &v156[v361];
        goto LABEL_608;
      case 6:
        v150 = v46;
        while (1)
        {
          v161 = *v59;
          if (!*v59)
            goto LABEL_242;
          if (v46)
            v161 = (*v150 * v161 + ((*v150 * v161) >> 8) + 1) >> 8;
          if (v161 < 8u)
            goto LABEL_242;
          v162 = *v31;
          if (v162 <= 7)
            break;
          if (v162 <= 0xF7)
          {
            v163 = PDAplusDAM((unsigned __int16)*v35, v162, (unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), ((unsigned __int16)(~(_BYTE)v162 * v161+ ((~(_BYTE)v162* v161) >> 8)+ 1) >> 8));
            goto LABEL_241;
          }
LABEL_242:
          ++v59;
          v58 += 2;
          v150 += v46 != 0;
          ++v35;
          v31 += v374;
          LODWORD(v41) = v41 - 1;
          if (!(_DWORD)v41)
          {
LABEL_243:
            v46 = &v150[v361];
LABEL_591:
            v35 += v362;
            v31 += v364;
LABEL_610:
            v41 = v373;
LABEL_611:
            v44 = v366;
            v327 = v367;
            goto LABEL_612;
          }
        }
        v163 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v161);
LABEL_241:
        *v35 = v163;
        *v31 = HIBYTE(v163);
        goto LABEL_242;
      case 7:
        v164 = v46 != 0;
        if (v370)
        {
          v165 = v41;
          v166 = v46;
          while (1)
          {
            v167 = *v59;
            if (*v59)
            {
              if (v46)
                v167 = (*v166 * v167 + ((*v166 * v167) >> 8) + 1) >> 8;
              if (v167 >= 0xF8u)
              {
                v168 = PDAM((unsigned __int16)*v35, *v31, *((_BYTE *)v58 + 3));
LABEL_253:
                *v35 = v168;
                *v31 = HIBYTE(v168);
                goto LABEL_254;
              }
              if (v167 >= 8u)
              {
                v169 = *((unsigned __int8 *)v58 + 3) * v167;
                v168 = PDAMplusDAM((unsigned __int16)*v35, *v31, ((unsigned __int16)(v169 + (v169 >> 8) + 1) >> 8), (unsigned __int16)*v35, *v31, ~(_BYTE)v167);
                goto LABEL_253;
              }
            }
LABEL_254:
            ++v59;
            v58 += 2;
            v166 += v164;
            ++v35;
            ++v31;
            if (!--v165)
              goto LABEL_590;
          }
        }
        v314 = v41;
        v166 = v46;
        while (1)
        {
          v315 = *v59;
          if (*v59)
          {
            if (v46)
              v315 = (*v166 * v315 + ((*v166 * v315) >> 8) + 1) >> 8;
            if (v315 >= 0xF8u)
            {
              v316 = PDM((unsigned __int16)*v35, *((_BYTE *)v58 + 3));
LABEL_577:
              *v35 = v316;
              goto LABEL_578;
            }
            if (v315 >= 8u)
            {
              v317 = *((unsigned __int8 *)v58 + 3) * v315;
              v316 = PDMplusDM((unsigned __int16)*v35, ((unsigned __int16)(v317 + (v317 >> 8) + 1) >> 8), (unsigned __int16)*v35, ~(_BYTE)v315);
              goto LABEL_577;
            }
          }
LABEL_578:
          ++v59;
          v58 += 2;
          v166 += v164;
          ++v35;
          if (!--v314)
            goto LABEL_590;
        }
      case 8:
        v170 = v46 != 0;
        if (v370)
        {
          v171 = v41;
          v166 = v46;
          while (1)
          {
            v172 = *v59;
            if (*v59)
            {
              if (v46)
                v172 = (*v166 * v172 + ((*v166 * v172) >> 8) + 1) >> 8;
              if (v172 >= 0xF8u)
              {
                v173 = PDAM((unsigned __int16)*v35, *v31, ~*((_BYTE *)v58 + 3));
LABEL_265:
                *v35 = v173;
                *v31 = HIBYTE(v173);
                goto LABEL_266;
              }
              if (v172 >= 8u)
              {
                v174 = (~*(_DWORD *)v58 >> 24) * v172;
                v173 = PDAMplusDAM((unsigned __int16)*v35, *v31, ((unsigned __int16)(v174 + (v174 >> 8) + 1) >> 8), (unsigned __int16)*v35, *v31, ~(_BYTE)v172);
                goto LABEL_265;
              }
            }
LABEL_266:
            ++v59;
            v58 += 2;
            v166 += v170;
            ++v35;
            ++v31;
            if (!--v171)
              goto LABEL_590;
          }
        }
        v318 = v41;
        v166 = v46;
        break;
      case 9:
        v175 = v46;
        do
        {
          v176 = *v59;
          if (*v59)
          {
            if (v46)
              v176 = (*v175 * v176 + ((*v175 * v176) >> 8) + 1) >> 8;
            if (v176 >= 8u)
            {
              v177 = *v31;
              v178 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v176);
              v179 = PDAMplusDAM((unsigned __int16)v178, SBYTE3(v178), v177 ^ 0xFFu, (unsigned __int16)*v35, v177, (~(_BYTE)v176 + BYTE3(v178)));
              *v35 = v179;
              *v31 = HIBYTE(v179);
            }
          }
          ++v59;
          v58 += 2;
          v175 += v46 != 0;
          ++v35;
          v31 += v374;
          LODWORD(v41) = v41 - 1;
        }
        while ((_DWORD)v41);
        v46 = &v175[v361];
        v35 += v362;
        v31 += v364;
        v39 = v357;
        goto LABEL_609;
      case 10:
        v180 = v46;
        do
        {
          v181 = *v59;
          if (*v59)
          {
            if (v46)
              v181 = (*v180 * v181 + ((*v180 * v181) >> 8) + 1) >> 8;
            if (v181 >= 8u)
            {
              v182 = *v31;
              v183 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v181);
              v184 = PDAMplusDAM((unsigned __int16)v183, SHIBYTE(v183), v182 ^ 0xFFu, (unsigned __int16)*v35, v182, HIBYTE(v183) ^ 0xFF);
              *v35 = v184;
              *v31 = HIBYTE(v184);
            }
          }
          ++v59;
          v58 += 2;
          v180 += v46 != 0;
          ++v35;
          v31 += v374;
          LODWORD(v41) = v41 - 1;
        }
        while ((_DWORD)v41);
        goto LABEL_607;
      case 11:
        v185 = v46 != 0;
        if (v370)
        {
          v180 = v46;
          do
          {
            v186 = *v59;
            if (*v59)
            {
              if (v46)
                v186 = (*v180 * v186 + ((*v180 * v186) >> 8) + 1) >> 8;
              if (v186 >= 8u)
              {
                v187 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v186);
                v188 = PDAplusdDA(*v35, *v31, v187, HIBYTE(v187));
                *v35 = v188;
                *v31 = HIBYTE(v188);
              }
            }
            ++v59;
            v58 += 2;
            v180 += v185;
            ++v35;
            ++v31;
            LODWORD(v41) = v41 - 1;
          }
          while ((_DWORD)v41);
        }
        else
        {
          v180 = v46;
          do
          {
            v322 = *v59;
            if (*v59)
            {
              if (v46)
                v322 = (*v180 * v322 + ((*v180 * v322) >> 8) + 1) >> 8;
              if (v322 >= 8u)
              {
                v323 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v322);
                *v35 = PDplusdDA((unsigned __int16)*v35, v323, HIBYTE(v323));
              }
            }
            ++v59;
            v58 += 2;
            v180 += v185;
            ++v35;
            LODWORD(v41) = v41 - 1;
          }
          while ((_DWORD)v41);
        }
        goto LABEL_607;
      case 12:
        v189 = v46 != 0;
        if (v370)
        {
          v180 = v46;
          do
          {
            v190 = *v59;
            if (*v59)
            {
              if (v46)
                v190 = (*v180 * v190 + ((*v180 * v190) >> 8) + 1) >> 8;
              if (v190 >= 8u)
              {
                v191 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v190);
                v192 = PDApluslDA((unsigned __int16)*v35, *v31, (unsigned __int16)v191, HIBYTE(v191));
                *v35 = v192;
                *v31 = HIBYTE(v192);
              }
            }
            ++v59;
            v58 += 2;
            v180 += v189;
            ++v35;
            ++v31;
            LODWORD(v41) = v41 - 1;
          }
          while ((_DWORD)v41);
        }
        else
        {
          v180 = v46;
          do
          {
            v324 = *v59;
            if (*v59)
            {
              if (v46)
                v324 = (*v180 * v324 + ((*v180 * v324) >> 8) + 1) >> 8;
              if (v324 >= 8u)
              {
                v325 = PDM(*v58, v324);
                v326 = (((unsigned __int16)*v35 | ((unsigned __int16)*v35 << 15)) & 0x1F07C1F)
                     + ((v325 | (v325 << 15)) & 0x1F07C1F);
                *v35 = (((30 * ((v326 >> 5) & 0x100401)) | (15 * ((v326 >> 5) & 0x100401)) | v326) >> 15) & 0x3E0 | ((30 * ((v326 >> 5) & 0x401)) | (15 * ((v326 >> 5) & 0x401)) | v326) & 0x7C1F;
              }
            }
            ++v59;
            v58 += 2;
            v180 += v189;
            ++v35;
            LODWORD(v41) = v41 - 1;
          }
          while ((_DWORD)v41);
        }
LABEL_607:
        v46 = &v180[v361];
LABEL_608:
        v35 += v362;
        v31 += v364;
LABEL_609:
        v40 = v365;
        goto LABEL_610;
      case 13:
        v193 = v41;
        v166 = v46;
        v194 = v193;
        do
        {
          v195 = *v59;
          if (*v59)
          {
            if (v46)
              v195 = (*v166 * v195 + ((*v166 * v195) >> 8) + 1) >> 8;
            if (v195 >= 8u)
            {
              v196 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v195);
              v198 = HIBYTE(v196);
              if (HIBYTE(v196) >= 8u)
              {
                if (v370)
                {
                  v199 = *v31;
                  if (v199 >= 8)
                  {
                    v196 = PDAmultiplyPDA((unsigned __int16)*v35, v199, (unsigned __int16)v196, v198, v197);
                    v198 = HIBYTE(v196);
                  }
                  *v35 = v196;
                  *v31 = v198;
                }
                else
                {
                  *v35 = PDAmultiplyPDA((unsigned __int16)*v35, 0xFFu, (unsigned __int16)v196, v198, v197);
                }
              }
            }
          }
          ++v59;
          v58 += 2;
          v166 += v46 != 0;
          ++v35;
          v31 += v374;
          --v194;
        }
        while (v194);
        goto LABEL_590;
      case 14:
        v200 = v41;
        v166 = v46;
        v201 = v200;
        do
        {
          v202 = *v59;
          if (*v59)
          {
            if (v46)
              v202 = (*v166 * v202 + ((*v166 * v202) >> 8) + 1) >> 8;
            if (v202 >= 8u)
            {
              v203 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v202);
              v204 = HIBYTE(v203);
              if (HIBYTE(v203) >= 8u)
              {
                if (v370)
                {
                  v205 = *v31;
                  if (v205 >= 8)
                  {
                    v203 = PDAscreenPDA((unsigned __int16)*v35, v205, (unsigned __int16)v203, v204);
                    v204 = HIBYTE(v203);
                  }
                  *v35 = v203;
                  *v31 = v204;
                }
                else
                {
                  *v35 = PDAscreenPDA((unsigned __int16)*v35, 0xFFu, (unsigned __int16)v203, v204);
                }
              }
            }
          }
          ++v59;
          v58 += 2;
          v166 += v46 != 0;
          ++v35;
          v31 += v374;
          --v201;
        }
        while (v201);
        goto LABEL_590;
      case 15:
        v206 = v41;
        v166 = v46;
        v207 = v206;
        do
        {
          v208 = *v59;
          if (*v59)
          {
            if (v46)
              v208 = (*v166 * v208 + ((*v166 * v208) >> 8) + 1) >> 8;
            if (v208 >= 8u)
            {
              v209 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v208);
              v210 = HIBYTE(v209);
              if (HIBYTE(v209) >= 8u)
              {
                if (v370)
                {
                  v211 = *v31;
                  if (v211 >= 8)
                  {
                    v209 = PDAoverlayPDA((unsigned __int16)*v35, v211, (unsigned __int16)v209, v210);
                    v210 = HIBYTE(v209);
                  }
                  *v35 = v209;
                  *v31 = v210;
                }
                else
                {
                  *v35 = PDAoverlayPDA((unsigned __int16)*v35, 0xFFu, (unsigned __int16)v209, v210);
                }
              }
            }
          }
          ++v59;
          v58 += 2;
          v166 += v46 != 0;
          ++v35;
          v31 += v374;
          --v207;
        }
        while (v207);
        goto LABEL_590;
      case 16:
        v212 = v41;
        v166 = v46;
        v213 = v212;
        do
        {
          v214 = *v59;
          if (*v59)
          {
            if (v46)
              v214 = (*v166 * v214 + ((*v166 * v214) >> 8) + 1) >> 8;
            if (v214 >= 8u)
            {
              v215 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v214);
              v216 = HIBYTE(v215);
              if (HIBYTE(v215) >= 8u)
              {
                if (v370)
                {
                  v217 = *v31;
                  if (v217 >= 8)
                  {
                    v215 = PDAdarkenPDA((unsigned __int16)*v35, v217, (unsigned __int16)v215, v216);
                    v216 = HIBYTE(v215);
                  }
                  *v35 = v215;
                  *v31 = v216;
                }
                else
                {
                  *v35 = PDAdarkenPDA((unsigned __int16)*v35, 0xFFu, (unsigned __int16)v215, v216);
                }
              }
            }
          }
          ++v59;
          v58 += 2;
          v166 += v46 != 0;
          ++v35;
          v31 += v374;
          --v213;
        }
        while (v213);
        goto LABEL_590;
      case 17:
        v218 = v41;
        v166 = v46;
        v219 = v218;
        do
        {
          v220 = *v59;
          if (*v59)
          {
            if (v46)
              v220 = (*v166 * v220 + ((*v166 * v220) >> 8) + 1) >> 8;
            if (v220 >= 8u)
            {
              v221 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v220);
              v222 = HIBYTE(v221);
              if (HIBYTE(v221) >= 8u)
              {
                if (v370)
                {
                  v223 = *v31;
                  if (v223 >= 8)
                  {
                    v221 = PDAlightenPDA((unsigned __int16)*v35, v223, (unsigned __int16)v221, v222);
                    v222 = HIBYTE(v221);
                  }
                  *v35 = v221;
                  *v31 = v222;
                }
                else
                {
                  *v35 = PDAlightenPDA((unsigned __int16)*v35, 0xFFu, (unsigned __int16)v221, v222);
                }
              }
            }
          }
          ++v59;
          v58 += 2;
          v166 += v46 != 0;
          ++v35;
          v31 += v374;
          --v219;
        }
        while (v219);
        goto LABEL_590;
      case 18:
        v224 = v41;
        v166 = v46;
        v225 = v224;
        do
        {
          v226 = *v59;
          if (*v59)
          {
            if (v46)
              v226 = (*v166 * v226 + ((*v166 * v226) >> 8) + 1) >> 8;
            if (v226 >= 8u)
            {
              v227 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v226);
              v228 = HIBYTE(v227);
              if (HIBYTE(v227) >= 8u)
              {
                if (v370)
                {
                  v229 = *v31;
                  if (v229 >= 8)
                  {
                    v227 = PDAcolordodgePDA((unsigned __int16)*v35, v229, (unsigned __int16)v227, v228);
                    v228 = HIBYTE(v227);
                  }
                  *v35 = v227;
                  *v31 = v228;
                }
                else
                {
                  *v35 = PDAcolordodgePDA((unsigned __int16)*v35, 0xFFu, (unsigned __int16)v227, v228);
                }
              }
            }
          }
          ++v59;
          v58 += 2;
          v166 += v46 != 0;
          ++v35;
          v31 += v374;
          --v225;
        }
        while (v225);
        goto LABEL_590;
      case 19:
        v230 = v41;
        v166 = v46;
        v231 = v230;
        do
        {
          v232 = *v59;
          if (*v59)
          {
            if (v46)
              v232 = (*v166 * v232 + ((*v166 * v232) >> 8) + 1) >> 8;
            if (v232 >= 8u)
            {
              v233 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v232);
              v234 = HIBYTE(v233);
              if (HIBYTE(v233) >= 8u)
              {
                if (v370)
                {
                  v235 = *v31;
                  if (v235 >= 8)
                  {
                    v233 = PDAcolorburnPDA((unsigned __int16)*v35, v235, (unsigned __int16)v233, v234);
                    v234 = HIBYTE(v233);
                  }
                  *v35 = v233;
                  *v31 = v234;
                }
                else
                {
                  *v35 = PDAcolorburnPDA((unsigned __int16)*v35, 0xFFu, (unsigned __int16)v233, v234);
                }
              }
            }
          }
          ++v59;
          v58 += 2;
          v166 += v46 != 0;
          ++v35;
          v31 += v374;
          --v231;
        }
        while (v231);
        goto LABEL_590;
      case 20:
        v236 = v41;
        v166 = v46;
        v237 = v236;
        do
        {
          v238 = *v59;
          if (*v59)
          {
            if (v46)
              v238 = (*v166 * v238 + ((*v166 * v238) >> 8) + 1) >> 8;
            if (v238 >= 8u)
            {
              v239 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v238);
              v240 = HIBYTE(v239);
              if (HIBYTE(v239) >= 8u)
              {
                if (v370)
                {
                  v241 = *v31;
                  if (v241 >= 8)
                  {
                    v239 = PDAsoftlightPDA((unsigned __int16)*v35, v241, (unsigned __int16)v239, v240);
                    v240 = HIBYTE(v239);
                  }
                  *v35 = v239;
                  *v31 = v240;
                }
                else
                {
                  *v35 = PDAsoftlightPDA((unsigned __int16)*v35, 0xFFu, (unsigned __int16)v239, v240);
                }
              }
            }
          }
          ++v59;
          v58 += 2;
          v166 += v46 != 0;
          ++v35;
          v31 += v374;
          --v237;
        }
        while (v237);
        goto LABEL_590;
      case 21:
        v242 = v41;
        v166 = v46;
        v243 = v242;
        do
        {
          v244 = *v59;
          if (*v59)
          {
            if (v46)
              v244 = (*v166 * v244 + ((*v166 * v244) >> 8) + 1) >> 8;
            if (v244 >= 8u)
            {
              v245 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v244);
              v246 = HIBYTE(v245);
              if (HIBYTE(v245) >= 8u)
              {
                if (v370)
                {
                  v247 = *v31;
                  if (v247 >= 8)
                  {
                    v245 = PDAhardlightPDA((unsigned __int16)*v35, v247, (unsigned __int16)v245, v246);
                    v246 = HIBYTE(v245);
                  }
                  *v35 = v245;
                  *v31 = v246;
                }
                else
                {
                  *v35 = PDAhardlightPDA((unsigned __int16)*v35, 0xFFu, (unsigned __int16)v245, v246);
                }
              }
            }
          }
          ++v59;
          v58 += 2;
          v166 += v46 != 0;
          ++v35;
          v31 += v374;
          --v243;
        }
        while (v243);
        goto LABEL_590;
      case 22:
        v248 = v41;
        v166 = v46;
        v249 = v248;
        do
        {
          v250 = *v59;
          if (*v59)
          {
            if (v46)
              v250 = (*v166 * v250 + ((*v166 * v250) >> 8) + 1) >> 8;
            if (v250 >= 8u)
            {
              v251 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v250);
              v252 = HIBYTE(v251);
              if (HIBYTE(v251) >= 8u)
              {
                if (v370)
                {
                  v253 = *v31;
                  if (v253 >= 8)
                  {
                    v251 = PDAdifferencePDA((unsigned __int16)*v35, v253, (unsigned __int16)v251, v252);
                    v252 = HIBYTE(v251);
                  }
                  *v35 = v251;
                  *v31 = v252;
                }
                else
                {
                  *v35 = PDAdifferencePDA((unsigned __int16)*v35, 0xFFu, (unsigned __int16)v251, v252);
                }
              }
            }
          }
          ++v59;
          v58 += 2;
          v166 += v46 != 0;
          ++v35;
          v31 += v374;
          --v249;
        }
        while (v249);
        goto LABEL_590;
      case 23:
        v254 = v41;
        v166 = v46;
        v255 = v254;
        do
        {
          v256 = *v59;
          if (*v59)
          {
            if (v46)
              v256 = (*v166 * v256 + ((*v166 * v256) >> 8) + 1) >> 8;
            if (v256 >= 8u)
            {
              v257 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v256);
              v258 = HIBYTE(v257);
              if (HIBYTE(v257) >= 8u)
              {
                if (v370)
                {
                  v259 = *v31;
                  if (v259 >= 8)
                  {
                    v257 = PDAexclusionPDA((unsigned __int16)*v35, v259, (unsigned __int16)v257, v258);
                    v258 = HIBYTE(v257);
                  }
                  *v35 = v257;
                  *v31 = v258;
                }
                else
                {
                  *v35 = PDAexclusionPDA((unsigned __int16)*v35, 0xFFu, (unsigned __int16)v257, v258);
                }
              }
            }
          }
          ++v59;
          v58 += 2;
          v166 += v46 != 0;
          ++v35;
          v31 += v374;
          --v255;
        }
        while (v255);
        goto LABEL_590;
      case 24:
        v260 = v41;
        v166 = v46;
        v261 = v260;
        do
        {
          v262 = *v59;
          if (*v59)
          {
            if (v46)
              v262 = (*v166 * v262 + ((*v166 * v262) >> 8) + 1) >> 8;
            if (v262 >= 8u)
            {
              v263 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v262);
              v264 = HIBYTE(v263);
              if (HIBYTE(v263) >= 8u)
              {
                if (v370)
                {
                  v265 = *v31;
                  if (v265 >= 8)
                  {
                    v263 = PDAhuePDA((unsigned __int16)*v35, v265, (unsigned __int16)v263, v264);
                    v264 = HIBYTE(v263);
                  }
                  *v35 = v263;
                  *v31 = v264;
                }
                else
                {
                  *v35 = PDAhuePDA((unsigned __int16)*v35, 0xFFu, (unsigned __int16)v263, v264);
                }
              }
            }
          }
          ++v59;
          v58 += 2;
          v166 += v46 != 0;
          ++v35;
          v31 += v374;
          --v261;
        }
        while (v261);
        goto LABEL_590;
      case 25:
        v266 = v41;
        v166 = v46;
        v267 = v266;
        do
        {
          v268 = *v59;
          if (*v59)
          {
            if (v46)
              v268 = (*v166 * v268 + ((*v166 * v268) >> 8) + 1) >> 8;
            if (v268 >= 8u)
            {
              v269 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v268);
              v270 = HIBYTE(v269);
              if (HIBYTE(v269) >= 8u)
              {
                if (v370)
                {
                  v271 = *v31;
                  if (v271 >= 8)
                  {
                    v269 = PDAsaturationPDA((unsigned __int16)*v35, v271, (unsigned __int16)v269, v270);
                    v270 = HIBYTE(v269);
                  }
                  *v35 = v269;
                  *v31 = v270;
                }
                else
                {
                  *v35 = PDAsaturationPDA((unsigned __int16)*v35, 0xFFu, (unsigned __int16)v269, v270);
                }
              }
            }
          }
          ++v59;
          v58 += 2;
          v166 += v46 != 0;
          ++v35;
          v31 += v374;
          --v267;
        }
        while (v267);
        goto LABEL_590;
      case 26:
        v272 = v41;
        v166 = v46;
        v273 = v272;
        do
        {
          v274 = *v59;
          if (*v59)
          {
            if (v46)
              v274 = (*v166 * v274 + ((*v166 * v274) >> 8) + 1) >> 8;
            if (v274 >= 8u)
            {
              v275 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v274);
              v276 = HIBYTE(v275);
              if (HIBYTE(v275) >= 8u)
              {
                if (v370)
                {
                  v277 = *v31;
                  if (v277 >= 8)
                  {
                    v275 = PDAluminosityPDA((unsigned __int16)v275, v276, (unsigned __int16)*v35, v277);
                    v276 = HIBYTE(v275);
                  }
                  *v35 = v275;
                  *v31 = v276;
                }
                else
                {
                  *v35 = PDAluminosityPDA((unsigned __int16)v275, v276, (unsigned __int16)*v35, 0xFFu);
                }
              }
            }
          }
          ++v59;
          v58 += 2;
          v166 += v46 != 0;
          ++v35;
          v31 += v374;
          --v273;
        }
        while (v273);
        goto LABEL_590;
      case 27:
        v278 = v41;
        v166 = v46;
        v279 = v278;
        do
        {
          v280 = *v59;
          if (*v59)
          {
            if (v46)
              v280 = (*v166 * v280 + ((*v166 * v280) >> 8) + 1) >> 8;
            if (v280 >= 8u)
            {
              v281 = PDAM((unsigned __int16)*(_DWORD *)v58, HIBYTE(*(_DWORD *)v58), v280);
              v282 = HIBYTE(v281);
              if (HIBYTE(v281) >= 8u)
              {
                if (v370)
                {
                  v283 = *v31;
                  if (v283 >= 8)
                  {
                    v281 = PDAluminosityPDA((unsigned __int16)*v35, v283, (unsigned __int16)v281, v282);
                    v282 = HIBYTE(v281);
                  }
                  *v35 = v281;
                  *v31 = v282;
                }
                else
                {
                  *v35 = PDAluminosityPDA((unsigned __int16)*v35, 0xFFu, (unsigned __int16)v281, v282);
                }
              }
            }
          }
          ++v59;
          v58 += 2;
          v166 += v46 != 0;
          ++v35;
          v31 += v374;
          --v279;
        }
        while (v279);
        goto LABEL_590;
      default:
        goto LABEL_611;
    }
    while (1)
    {
      v319 = *v59;
      if (*v59)
      {
        if (v46)
          v319 = (*v166 * v319 + ((*v166 * v319) >> 8) + 1) >> 8;
        if (v319 >= 0xF8u)
        {
          v320 = PDM((unsigned __int16)*v35, ~*((_BYTE *)v58 + 3));
LABEL_588:
          *v35 = v320;
          goto LABEL_589;
        }
        if (v319 >= 8u)
        {
          v321 = (~*(_DWORD *)v58 >> 24) * v319;
          v320 = PDMplusDM((unsigned __int16)*v35, ((unsigned __int16)(v321 + (v321 >> 8) + 1) >> 8), (unsigned __int16)*v35, ~(_BYTE)v319);
          goto LABEL_588;
        }
      }
LABEL_589:
      ++v59;
      v58 += 2;
      v166 += v170;
      ++v35;
      if (!--v318)
      {
LABEL_590:
        v46 = &v166[v361];
        goto LABEL_591;
      }
    }
  }
}

uint64_t DITHERRGBA32M(unsigned int a1, int a2, int a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;

  v3 = ((a1 >> 8) & 0xFF00FF) * a3 + 65537 + (((((a1 >> 8) & 0xFF00FF) * a3) >> 8) & 0xFF00FF);
  v4 = (a1 & 0xFF00FF) * a3 + 65537 + ((((a1 & 0xFF00FF) * a3) >> 8) & 0xFF00FF);
  v5 = *(unsigned __int16 *)((char *)&pixel_dither_lookup + ((v4 >> 7) & 0x1FELL)) + a2;
  return (4 * (*(unsigned __int16 *)((char *)&pixel_dither_lookup + ((v3 >> 23) & 0x1FELL)) + a2)) & 0x7C00 | ((*(unsigned __int16 *)((char *)&pixel_dither_lookup + ((v3 >> 7) & 0x1FELL)) + a2) >> 8) & 0x1F | (((v5 >> 10) & 7) << 24) & 0x7FFFFFF | (BYTE1(v5) << 27) | ((*(unsigned __int16 *)((char *)&pixel_dither_lookup + ((v4 >> 23) & 0x1FELL)) + a2) >> 3) & 0x3E0;
}

uint64_t DITHERRGBA32(unsigned int a1, int a2)
{
  unsigned int v2;

  v2 = pixel_dither_lookup[a1] + a2;
  return (4 * (*(unsigned __int16 *)((char *)pixel_dither_lookup + ((a1 >> 23) & 0x1FELL)) + a2)) & 0x7C00 | ((*(unsigned __int16 *)((char *)pixel_dither_lookup + ((a1 >> 15) & 0x1FELL)) + a2) >> 3) & 0x3E0 | ((*(unsigned __int16 *)((char *)pixel_dither_lookup + ((a1 >> 7) & 0x1FELL)) + a2) >> 8) & 0x1F | (BYTE1(v2) << 27) | (((v2 >> 10) & 7) << 24);
}

uint64_t PDAM(unsigned int a1, char a2, char a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;

  v3 = ~a3 >> 3;
  v4 = ((a1 | (a1 << 11)) & 0x1F001F) * v3;
  v5 = (((a2 & 0xF8) << 13) | (a1 >> 10) & 0x1F) * v3;
  v6 = (a1 & 0x7FFFFFF | ((a2 & 0xF8) >> 3 << 27))
     - (((v4 + 65537 + ((v4 >> 5) & 0x1F001F)) >> 16) & 0x3E0 | ((v4 + 65537 + ((v4 >> 5) & 0x1F001F)) >> 5) & 0x1F | ((((v5 + 65537 + ((v5 >> 5) & 0x1F001F)) >> 5) & 0x1F) << 10) & 0x7FFFFFF | (((v5 + 65537 + ((v5 >> 5) & 0x1F001F)) >> 21) << 27));
  return v6 | (v6 >> 29 << 24);
}

uint64_t PDM(unsigned int a1, char a2)
{
  int v2;
  unsigned int v3;

  v2 = ~a2 >> 3;
  v3 = ((a1 | (a1 << 11)) & 0x1F001F) * v2;
  return (unsigned __int16)(a1
                          - ((33 * ((a1 >> 10) & 0x1F) * v2 + 32) & 0x7C00 | ((v3 + 65537 + ((v3 >> 5) & 0x1F001F)) >> 16) & 0x3E0 | ((v3 + 65537 + ((v3 >> 5) & 0x1F001F)) >> 5) & 0x1F));
}

uint64_t PDAMplusDAM(unsigned int a1, char a2, unsigned int a3, unsigned int a4, char a5, unsigned int a6)
{
  unsigned int v6;
  unsigned int v7;

  v6 = ((a1 | (a1 << 11)) & 0x1F001F) * (a3 >> 3) + ((a4 | (a4 << 11)) & 0x1F001F) * (a6 >> 3);
  v7 = (((a2 & 0xF8) << 13) | (a1 >> 10) & 0x1F) * (a3 >> 3) + (((a5 & 0xF8) << 13) | (a4 >> 10) & 0x1F) * (a6 >> 3);
  return ((v6 + 65537 + ((v6 >> 5) & 0x1F001F)) >> 16) & 0x3E0 | ((v6 + 65537 + ((v6 >> 5) & 0x1F001F)) >> 5) & 0x1F | ((((v7 + 65537 + ((v7 >> 5) & 0x1F001F)) >> 5) & 0x1F) << 10) & 0xFFFFFF | (((v7 + 65537 + ((v7 >> 5) & 0x1F001F)) >> 21) << 27) | ((((v7 + 65537 + ((v7 >> 5) & 0x1F001F)) >> 23) & 7) << 24);
}

uint64_t PDMplusDM(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  int v5;

  v4 = ((a1 | (a1 << 11)) & 0x1F001F) * (a2 >> 3) + ((a3 | (a3 << 11)) & 0x1F001F) * (a4 >> 3);
  v5 = ((a1 >> 10) & 0x1F) * (a2 >> 3) + ((a3 >> 10) & 0x1F) * (a4 >> 3);
  return ((v5 & 0x3E0) + 32 * v5 + 32) & 0x7C00 | ((v4 + 65537 + ((v4 >> 5) & 0x1F001F)) >> 16) & 0x3E0 | ((v4 + 65537 + ((v4 >> 5) & 0x1F001F)) >> 5) & 0x1F;
}

uint64_t PDAplusDAM(int a1, char a2, unsigned int a3, char a4, unsigned int a5)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;

  v5 = ((a3 | (a3 << 11)) & 0x1F001F) * (a5 >> 3);
  v6 = (((a4 & 0xF8) << 13) | (a3 >> 10) & 0x1F) * (a5 >> 3);
  v7 = (a1 & 0x7FFFFFF | ((a2 & 0xF8) >> 3 << 27))
     + (((v5 + 65537 + ((v5 >> 5) & 0x1F001F)) >> 16) & 0x3E0 | ((v5 + 65537 + ((v5 >> 5) & 0x1F001F)) >> 5) & 0x1F | ((((v6 + 65537 + ((v6 >> 5) & 0x1F001F)) >> 5) & 0x1F) << 10) & 0x7FFFFFF | (((v6 + 65537 + ((v6 >> 5) & 0x1F001F)) >> 21) << 27));
  return v7 | (v7 >> 29 << 24);
}

uint64_t PDplusDM(__int16 a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;

  v3 = ((a2 | (a2 << 11)) & 0x1F001F) * (a3 >> 3);
  return (unsigned __int16)(((33 * ((a2 >> 10) & 0x1F) * (a3 >> 3) + 32) & 0x7C00 | ((v3 + 65537 + ((v3 >> 5) & 0x1F001F)) >> 16) & 0x3E0 | ((v3 + 65537 + ((v3 >> 5) & 0x1F001F)) >> 5) & 0x1F)
                          + a1);
}

uint64_t PDAplusdDA(__int16 a1, unsigned int a2, __int16 a3, unsigned int a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;

  v4 = 1057 * (a2 >> 3) - (a1 & 0x7FFF);
  v5 = v4 >> 5;
  v6 = 1057 * (a4 >> 3) - (a3 & 0x7FFF);
  v7 = (v6 & 0x7C1F) + (v4 & 0x7C1F);
  v8 = ((a4 >> 3) & 0xFFFF83FF | (((v6 >> 5) & 0x1F) << 10)) + ((a2 >> 3) & 0xFFFF83FF | ((v5 & 0x1F) << 10));
  v9 = (30 * ((v8 >> 5) & 0xFFFFFC1F | v7 & 0x8020)) | (15 * ((v8 >> 5) & 0xFFFFFC1F | v7 & 0x8020));
  return (1057 * ((v9 | v8) & 0x1F) - (((v9 | v8) >> 5) & 0x3E0 | (v7 | (v9 >> 5)) & 0x7C1F)) | ((((v9 | v8) >> 2) & 7) << 24) | ((v9 | v8) << 27);
}

uint64_t PDplusdDA(int a1, __int16 a2, unsigned int a3)
{
  unsigned int v3;

  v3 = ((1057 * (a3 >> 3) - (a2 & 0x7FFF)) & 0x7C1F | ((1057 * (a3 >> 3) - (a2 & 0x7FFF)) << 15) & 0x1F07C1F)
     + ((a1 ^ 0x7FFF | ((a1 ^ 0x7FFF) << 15)) & 0x1F07C1F);
  return ((((15 * ((v3 >> 5) & 0x100401)) | v3 | (30 * ((v3 >> 5) & 0x100401))) >> 15) & 0x3E0 | ((15
                                                                                                 * ((v3 >> 5) & 0x100401)) | v3 | (30 * ((v3 >> 5) & 0x100401))) & 0x7C1F) ^ 0x7FFF;
}

uint64_t PDApluslDA(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  int v4;
  unsigned int v5;
  unsigned int v6;

  v4 = (a3 & 0x7C1F) + (a1 & 0x7C1F);
  v5 = ((a4 >> 3) & 0xFFFF83FF | (((a3 >> 5) & 0x1F) << 10)) + ((a2 >> 3) & 0xFFFF83FF | (((a1 >> 5) & 0x1F) << 10));
  v6 = (v5 >> 5) & 0xFFFFFC1F | v4 & 0x8020;
  return (v4 | (((30 * v6) | (15 * v6)) >> 5)) & 0x7C1F | (((30 * v6) | (15 * v6) | v5) >> 5) & 0x3E0 | (((30 * v6) | (15 * v6) | v5) << 27) | (((((30 * v6) | (15 * v6) | v5) >> 2) & 7) << 24);
}

uint64_t PDAmultiplyPDA(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4, int8x16_t a5)
{
  int v5;
  int v6;
  int v7;
  uint32x2_t v8;
  uint32x2_t v9;
  int32x2_t v10;
  int v11;
  double v12;
  int v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  unsigned __int16 v18;
  int32x4_t v19;
  int32x4_t v20;
  uint32x4_t v21;
  uint32x4_t v22;
  unsigned int v23;
  int8x16_t v24;
  int8x16_t v25;

  v5 = a2 & 0xF8 | (a2 >> 5);
  v6 = (a3 >> 2) & 7 | (8 * (a3 & 0x1F));
  v7 = a4 & 0xF8 | (a4 >> 5);
  v8 = (uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(a1), (int8x8_t)0x3E000007C00);
  v9 = (uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(a3), (int8x8_t)0x3E000007C00);
  v10 = (int32x2_t)vorr_s8((int8x8_t)vshl_u32(v9, (uint32x2_t)0xFFFFFFFEFFFFFFF9), (int8x8_t)vshl_u32(v9, (uint32x2_t)0xFFFFFFF9FFFFFFF4));
  v11 = ((v7 ^ 0xFF) + v6) * ((a1 >> 2) & 7 | (8 * (a1 & 0x1F)));
  *(int32x2_t *)a5.i8 = vmul_s32(vadd_s32(vdup_n_s32(v7 ^ 0xFFu), v10), (int32x2_t)vorr_s8((int8x8_t)vshl_u32(v8, (uint32x2_t)0xFFFFFFFEFFFFFFF9), (int8x8_t)vshl_u32(v8, (uint32x2_t)0xFFFFFFF9FFFFFFF4)));
  v12 = COERCE_DOUBLE(vmla_s32(*(int32x2_t *)a5.i8, v10, vdup_n_s32(v5 ^ 0xFFu)));
  v13 = v11 + v6 * (v5 ^ 0xFF);
  if (v5 != 255)
  {
    v11 = v13;
    *(double *)a5.i64 = v12;
  }
  v14 = (int32x4_t)vextq_s8(a5, a5, 0xCuLL);
  v14.i32[0] = 255 * (v7 + v5) - v7 * v5;
  v14.i32[3] = v11;
  v15.i64[0] = 0x8000000080;
  v15.i64[1] = 0x8000000080;
  v16 = vaddq_s32(v14, v15);
  v17 = vdupq_n_s32(0xFE80u);
  v18 = vmovn_s32(vcgtq_s32(v17, v14)).u16[0];
  *(int16x4_t *)v14.i8 = vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)v17, (uint32x4_t)v14));
  v14.i16[0] = v18;
  v19 = (int32x4_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v14.i8), (int8x16_t)v16, (int8x16_t)v17);
  v16.i32[1] = 8;
  v16.i64[1] = 0x800000008;
  v16.i32[0] = v19.i32[0] >> 8;
  v17.i32[0] = vaddq_s32(v19, v16).u32[0];
  v20 = (int32x4_t)vshlq_u32((uint32x4_t)v19, (uint32x4_t)vnegq_s32(v16));
  v21 = (uint32x4_t)vaddq_s32(v20, v19);
  v20.i32[0] = v17.i32[0];
  v19.i32[0] = 8;
  v22 = (uint32x4_t)vshlq_s32(v20, vnegq_s32(v19));
  v20.i32[0] = vshlq_u32(v22, (uint32x4_t)xmmword_185004B10).u32[0];
  v23 = (unsigned __int32)v22.i32[0] >> 3;
  v24 = (int8x16_t)vshlq_u32(v21, (uint32x4_t)xmmword_185004B20);
  v24.i32[0] = v20.i32[0];
  v25 = vandq_s8(v24, (int8x16_t)xmmword_185004B30);
  *(int8x8_t *)v25.i8 = vorr_s8(*(int8x8_t *)v25.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL));
  return v25.i32[0] | v25.i32[1] | (v23 << 27);
}

uint64_t PDAscreenPDA(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint32x2_t v10;
  int32x2_t v11;
  uint32x2_t v12;
  int32x2_t v13;
  int8x8_t v14;
  uint32x2_t v15;
  int32x2_t v16;

  v4 = (a1 >> 2) & 7 | (8 * (a1 & 0x1F));
  v5 = ((a3 >> 2) & 7 | (8 * (a3 & 0x1F))) * (v4 ^ 0xFF) - v4 + (v4 << 8);
  v6 = 255 * ((a4 & 0xF8 | (a4 >> 5)) + (a2 & 0xF8 | (a2 >> 5))) - (a4 & 0xF8 | (a4 >> 5)) * (a2 & 0xF8 | (a2 >> 5));
  v7 = v5 + 128;
  if (v5 >> 7 >= 0x1FD)
    v7 = 65152;
  v8 = v7 + (v7 >> 8);
  if (v6 >= 65152)
    v9 = 65152;
  else
    v9 = v6 + 128;
  v10 = (uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(a1), (int8x8_t)0x3E000007C00);
  v11 = (int32x2_t)vorr_s8((int8x8_t)vshl_u32(v10, (uint32x2_t)0xFFFFFFFEFFFFFFF9), (int8x8_t)vshl_u32(v10, (uint32x2_t)0xFFFFFFF9FFFFFFF4));
  v12 = (uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(a3), (int8x8_t)0x3E000007C00);
  v13 = vmla_s32(vmul_s32(v11, (int32x2_t)0xFF000000FFLL), (int32x2_t)vorr_s8((int8x8_t)vshl_u32(v12, (uint32x2_t)0xFFFFFFFEFFFFFFF9), (int8x8_t)vshl_u32(v12, (uint32x2_t)0xFFFFFFF9FFFFFFF4)), (int32x2_t)veor_s8((int8x8_t)v11, (int8x8_t)0xFF000000FFLL));
  v14 = (int8x8_t)vdup_n_s32(0xFE80u);
  v15 = (uint32x2_t)vbsl_s8((int8x8_t)vcgt_u32((uint32x2_t)v14, (uint32x2_t)v13), (int8x8_t)vadd_s32(v13, (int32x2_t)0x8000000080), v14);
  v16 = (int32x2_t)vand_s8((int8x8_t)vshl_u32(vsra_n_u32(v15, v15, 8uLL), (uint32x2_t)0xFFFFFFFAFFFFFFFFLL), (int8x8_t)0x3E000007C00);
  return vorr_s8((int8x8_t)v16, (int8x8_t)vdup_lane_s32(v16, 1)).u32[0] | ((unsigned __int16)v8 >> 11) | (((v9 + (v9 >> 8)) >> 8) >> 3 << 27) | ((v9 + (v9 >> 8)) >> 8 << 19) & 0x7000000;
}

uint64_t PDAoverlayPDA(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  int8x8_t v31;
  int32x2_t v32;
  int8x8_t v33;
  int v34;
  uint32x2_t v35;
  int8x8_t v36;

  v4 = ((unsigned __int16)(a1 & 0x7C00) >> 7) & 0xFFFFFFF8 | (a1 >> 12) & 7;
  v5 = ((unsigned __int16)(a1 & 0x3E0) >> 2) & 0xFFFFFFF8 | (a1 >> 7) & 7;
  v6 = (a1 >> 2) & 7 | (8 * (a1 & 0x1F));
  v7 = a2 & 0xF8 | (a2 >> 5);
  v8 = ((unsigned __int16)(a3 & 0x7C00) >> 7) & 0xFFFFFFF8 | (a3 >> 12) & 7;
  v9 = ((unsigned __int16)(a3 & 0x3E0) >> 2) & 0xFFFFFFF8 | (a3 >> 7) & 7;
  v10 = (a3 >> 2) & 7 | (8 * (a3 & 0x1F));
  v11 = a4 & 0xF8 | (a4 >> 5);
  if (v8 >= v11)
    v8 = a4 & 0xF8 | (a4 >> 5);
  if (v4 >= v7)
    v4 = a2 & 0xF8 | (a2 >> 5);
  v12 = 2 * v4 * v8;
  if (v9 >= v11)
    v9 = a4 & 0xF8 | (a4 >> 5);
  if (v5 >= v7)
    v5 = a2 & 0xF8 | (a2 >> 5);
  v13 = 2 * v5 * v9;
  if (v10 >= v11)
    v10 = a4 & 0xF8 | (a4 >> 5);
  if (v6 >= v7)
    v6 = a2 & 0xF8 | (a2 >> 5);
  v14 = 2 * v6 * v10;
  v15 = v11 * v7;
  v16 = (v7 + 1) >> 1;
  v17 = v11 + 255;
  v18 = v7 + 255;
  v19 = (v11 + 255) * v4 + v8 * (v7 + 255) - (v11 * v7 + v12);
  v20 = v11 ^ 0xFF;
  v21 = v7 ^ 0xFF;
  v22 = v8 * (v7 ^ 0xFF) + (v11 ^ 0xFF) * v4 + v12;
  if (v4 < v16)
    v23 = v22;
  else
    v23 = v19;
  v24 = v17 * v5 + v9 * v18 - (v15 + v13);
  v25 = v9 * v21 + v20 * v5 + v13;
  if (v5 < v16)
    v26 = v25;
  else
    v26 = v24;
  if (v6 < v16)
    v27 = v10 * v21 + v20 * v6 + v14;
  else
    v27 = v17 * v6 + v10 * v18 - (v15 + v14);
  v28 = 255 * (v11 + v7) - v15;
  if (v23 >= 65152)
    v29 = 65152;
  else
    v29 = v23 + 128;
  v30 = v29 + (v29 >> 8);
  v31 = (int8x8_t)vadd_s32((int32x2_t)__PAIR64__(v27, v26), (int32x2_t)0x8000000080);
  v32 = vdup_n_s32(0xFE80u);
  v33 = (int8x8_t)vcgt_s32(v32, (int32x2_t)__PAIR64__(v27, v26));
  if (v28 >= 65152)
    v34 = 65152;
  else
    v34 = v28 + 128;
  v35 = (uint32x2_t)vbsl_s8(v33, v31, (int8x8_t)v32);
  v36 = vand_s8((int8x8_t)vshl_u32(vsra_n_u32(v35, v35, 8uLL), (uint32x2_t)0xFFFFFFF5FFFFFFFALL), (int8x8_t)0x1F000003E0);
  return ((v34 + (v34 >> 8)) >> 8 << 24) & 0xF8000000 | (((unsigned __int16)(v34 + (v34 >> 8)) >> 8) >> 5 << 24) | (v30 >> 1) & 0x7C00 | v36.i32[0] | v36.i32[1];
}

uint64_t PDAlightenPDA(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint32x2_t v8;
  uint32x2_t v9;
  int32x2_t v10;
  int32x2_t v11;
  int32x2_t v12;
  int32x2_t v13;
  double v14;
  int v15;
  double v16;
  __int32 v17;
  int32x2_t v18;
  double v19;
  __int32 v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  __int16 v25;
  int32x4_t v26;
  int32x4_t v27;
  uint32x4_t v28;
  uint32x4_t v29;
  unsigned int v30;
  int8x16_t v31;
  int8x16_t v32;

  v4 = (a1 >> 2) & 7 | (8 * (a1 & 0x1F));
  v5 = a2 & 0xF8 | (a2 >> 5);
  v6 = (a3 >> 2) & 7 | (8 * (a3 & 0x1F));
  v7 = a4 & 0xF8 | (a4 >> 5);
  v8 = (uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(a1), (int8x8_t)0x7C00000003E0);
  v9 = (uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(a3), (int8x8_t)0x7C00000003E0);
  v10 = vdup_n_s32(v7);
  v11 = (int32x2_t)vmin_u32((uint32x2_t)vorr_s8((int8x8_t)vshl_u32(v9, (uint32x2_t)0xFFFFFFF9FFFFFFFELL), (int8x8_t)vshl_u32(v9, (uint32x2_t)0xFFFFFFF4FFFFFFF9)), (uint32x2_t)v10);
  v12 = vdup_n_s32(v5);
  v13 = (int32x2_t)vmin_u32((uint32x2_t)vorr_s8((int8x8_t)vshl_u32(v8, (uint32x2_t)0xFFFFFFF9FFFFFFFELL), (int8x8_t)vshl_u32(v8, (uint32x2_t)0xFFFFFFF4FFFFFFF9)), (uint32x2_t)v12);
  v14 = COERCE_DOUBLE(vmax_u32((uint32x2_t)vmul_s32(v11, v12), (uint32x2_t)vmul_s32(v10, v13)));
  if (v6 >= v7)
    v6 = a4 & 0xF8 | (a4 >> 5);
  if (v4 >= v5)
    v4 = a2 & 0xF8 | (a2 >> 5);
  v15 = v7 * v4;
  if (v6 * v5 > v7 * v4)
    v15 = v6 * v5;
  v16 = COERCE_DOUBLE(vmla_s32(*(int32x2_t *)&v14, vdup_n_s32(v7 ^ 0xFF), v13));
  v17 = v15 + (v7 ^ 0xFF) * v4;
  if (v7 == 255)
  {
    v17 = v15;
    *(double *)&v18 = v14;
  }
  else
  {
    *(double *)&v18 = v16;
  }
  v19 = COERCE_DOUBLE(vmla_s32(v18, v11, vdup_n_s32(v5 ^ 0xFF)));
  v20 = v17 + v6 * (v5 ^ 0xFF);
  if (v5 != 255)
  {
    v17 = v20;
    *(double *)&v18 = v19;
  }
  v21.u64[1] = (unint64_t)v18;
  v21.i32[0] = 255 * (v7 + v5) - v7 * v5;
  v21.i32[1] = v17;
  v22.i64[0] = 0x8000000080;
  v22.i64[1] = 0x8000000080;
  v23 = vaddq_s32(v21, v22);
  v24 = vdupq_n_s32(0xFE80u);
  v25 = vmovn_s32(vcgtq_s32(v24, v21)).u16[0];
  *(int16x4_t *)v21.i8 = vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)v24, (uint32x4_t)v21));
  v21.i16[0] = v25;
  v26 = (int32x4_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v21.i8), (int8x16_t)v23, (int8x16_t)v24);
  v23.i32[1] = 8;
  v23.i64[1] = 0x800000008;
  v23.i32[0] = v26.i32[0] >> 8;
  v24.i32[0] = vaddq_s32(v26, v23).u32[0];
  v27 = (int32x4_t)vshlq_u32((uint32x4_t)v26, (uint32x4_t)vnegq_s32(v23));
  v28 = (uint32x4_t)vaddq_s32(v27, v26);
  v27.i32[0] = v24.i32[0];
  v26.i32[0] = 8;
  v29 = (uint32x4_t)vshlq_s32(v27, vnegq_s32(v26));
  v27.i32[0] = vshlq_u32(v29, (uint32x4_t)xmmword_185004B40).u32[0];
  v30 = (unsigned __int32)v29.i32[0] >> 3;
  v31 = (int8x16_t)vshlq_u32(v28, (uint32x4_t)xmmword_185004B50);
  v31.i32[0] = v27.i32[0];
  v32 = vandq_s8(v31, (int8x16_t)xmmword_185004B60);
  *(int8x8_t *)v32.i8 = vorr_s8(*(int8x8_t *)v32.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL));
  return v32.i32[0] | v32.i32[1] | (v30 << 27);
}

uint64_t PDAdarkenPDA(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint32x2_t v8;
  uint32x2_t v9;
  int32x2_t v10;
  int32x2_t v11;
  int32x2_t v12;
  int32x2_t v13;
  double v14;
  int v15;
  double v16;
  __int32 v17;
  int32x2_t v18;
  double v19;
  __int32 v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  __int16 v25;
  int32x4_t v26;
  int32x4_t v27;
  uint32x4_t v28;
  uint32x4_t v29;
  unsigned int v30;
  int8x16_t v31;
  int8x16_t v32;

  v4 = (a1 >> 2) & 7 | (8 * (a1 & 0x1F));
  v5 = a2 & 0xF8 | (a2 >> 5);
  v6 = (a3 >> 2) & 7 | (8 * (a3 & 0x1F));
  v7 = a4 & 0xF8 | (a4 >> 5);
  v8 = (uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(a1), (int8x8_t)0x7C00000003E0);
  v9 = (uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(a3), (int8x8_t)0x7C00000003E0);
  v10 = vdup_n_s32(v7);
  v11 = (int32x2_t)vmin_u32((uint32x2_t)vorr_s8((int8x8_t)vshl_u32(v9, (uint32x2_t)0xFFFFFFF9FFFFFFFELL), (int8x8_t)vshl_u32(v9, (uint32x2_t)0xFFFFFFF4FFFFFFF9)), (uint32x2_t)v10);
  v12 = vdup_n_s32(v5);
  v13 = (int32x2_t)vmin_u32((uint32x2_t)vorr_s8((int8x8_t)vshl_u32(v8, (uint32x2_t)0xFFFFFFF9FFFFFFFELL), (int8x8_t)vshl_u32(v8, (uint32x2_t)0xFFFFFFF4FFFFFFF9)), (uint32x2_t)v12);
  v14 = COERCE_DOUBLE(vmin_u32((uint32x2_t)vmul_s32(v11, v12), (uint32x2_t)vmul_s32(v10, v13)));
  if (v6 >= v7)
    v6 = a4 & 0xF8 | (a4 >> 5);
  if (v4 >= v5)
    v4 = a2 & 0xF8 | (a2 >> 5);
  v15 = v7 * v4;
  if (v6 * v5 < v7 * v4)
    v15 = v6 * v5;
  v16 = COERCE_DOUBLE(vmla_s32(*(int32x2_t *)&v14, vdup_n_s32(v7 ^ 0xFF), v13));
  v17 = v15 + (v7 ^ 0xFF) * v4;
  if (v7 == 255)
  {
    v17 = v15;
    *(double *)&v18 = v14;
  }
  else
  {
    *(double *)&v18 = v16;
  }
  v19 = COERCE_DOUBLE(vmla_s32(v18, v11, vdup_n_s32(v5 ^ 0xFF)));
  v20 = v17 + v6 * (v5 ^ 0xFF);
  if (v5 != 255)
  {
    v17 = v20;
    *(double *)&v18 = v19;
  }
  v21.u64[1] = (unint64_t)v18;
  v21.i32[0] = 255 * (v7 + v5) - v7 * v5;
  v21.i32[1] = v17;
  v22.i64[0] = 0x8000000080;
  v22.i64[1] = 0x8000000080;
  v23 = vaddq_s32(v21, v22);
  v24 = vdupq_n_s32(0xFE80u);
  v25 = vmovn_s32(vcgtq_s32(v24, v21)).u16[0];
  *(int16x4_t *)v21.i8 = vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)v24, (uint32x4_t)v21));
  v21.i16[0] = v25;
  v26 = (int32x4_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v21.i8), (int8x16_t)v23, (int8x16_t)v24);
  v23.i32[1] = 8;
  v23.i64[1] = 0x800000008;
  v23.i32[0] = v26.i32[0] >> 8;
  v24.i32[0] = vaddq_s32(v26, v23).u32[0];
  v27 = (int32x4_t)vshlq_u32((uint32x4_t)v26, (uint32x4_t)vnegq_s32(v23));
  v28 = (uint32x4_t)vaddq_s32(v27, v26);
  v27.i32[0] = v24.i32[0];
  v26.i32[0] = 8;
  v29 = (uint32x4_t)vshlq_s32(v27, vnegq_s32(v26));
  v27.i32[0] = vshlq_u32(v29, (uint32x4_t)xmmword_185004B40).u32[0];
  v30 = (unsigned __int32)v29.i32[0] >> 3;
  v31 = (int8x16_t)vshlq_u32(v28, (uint32x4_t)xmmword_185004B50);
  v31.i32[0] = v27.i32[0];
  v32 = vandq_s8(v31, (int8x16_t)xmmword_185004B60);
  *(int8x8_t *)v32.i8 = vorr_s8(*(int8x8_t *)v32.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL));
  return v32.i32[0] | v32.i32[1] | (v30 << 27);
}

uint64_t PDAcolordodgePDA(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  signed int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;

  v4 = a2 & 0xF8 | (a2 >> 5);
  v5 = ((unsigned __int16)(a3 & 0x7C00) >> 7) & 0xFFFFFFF8 | (a3 >> 12) & 7;
  v6 = ((unsigned __int16)(a3 & 0x3E0) >> 2) & 0xFFFFFFF8 | (a3 >> 7) & 7;
  v7 = a4 & 0xF8 | (a4 >> 5);
  v8 = v7 * v7;
  if ((((unsigned __int16)(a1 & 0x7C00) >> 7) & 0xFFFFFFF8 | (a1 >> 12) & 7) >= v4)
    v9 = v4;
  else
    v9 = ((unsigned __int16)(a1 & 0x7C00) >> 7) & 0xFFFFFFF8 | (a1 >> 12) & 7;
  if (v5 >= v7)
    v10 = a4 & 0xF8 | (a4 >> 5);
  else
    v10 = ((unsigned __int16)(a3 & 0x7C00) >> 7) & 0xFFFFFFF8 | (a3 >> 12) & 7;
  if (v9)
  {
    if (v5 >= v7)
      v11 = 65025;
    else
      v11 = (int)(v8 * v9) / (int)(v7 - v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = (a1 >> 2) & 7 | (8 * (a1 & 0x1F));
  v13 = (a3 >> 2) & 7 | (8 * (a3 & 0x1F));
  if ((((unsigned __int16)(a1 & 0x3E0) >> 2) & 0xFFFFFFF8 | (a1 >> 7) & 7) >= v4)
    v14 = v4;
  else
    v14 = ((unsigned __int16)(a1 & 0x3E0) >> 2) & 0xFFFFFFF8 | (a1 >> 7) & 7;
  if (v6 >= v7)
    v15 = a4 & 0xF8 | (a4 >> 5);
  else
    v15 = ((unsigned __int16)(a3 & 0x3E0) >> 2) & 0xFFFFFFF8 | (a3 >> 7) & 7;
  if (v14)
  {
    if (v6 >= v7)
      v16 = 65025;
    else
      v16 = (int)(v8 * v14) / (int)(v7 - v15);
  }
  else
  {
    v16 = 0;
  }
  if (v12 >= v4)
    v17 = v4;
  else
    v17 = v12;
  if (v13 >= v7)
    v18 = a4 & 0xF8 | (a4 >> 5);
  else
    v18 = (a3 >> 2) & 7 | (8 * (a3 & 0x1F));
  if (v17)
  {
    if (v13 >= v7)
      v19 = 65025;
    else
      v19 = (int)(v8 * v17) / (int)(v7 - v18);
  }
  else
  {
    v19 = 0;
  }
  v20 = v11 + (v7 ^ 0xFF) * v9;
  v21 = v16 + (v7 ^ 0xFF) * v14;
  if (v7 == 255)
  {
    v22 = v16;
  }
  else
  {
    v19 += (v7 ^ 0xFF) * v17;
    v22 = v21;
  }
  if (v7 == 255)
    v20 = v11;
  v23 = v20 + v10 * (v4 ^ 0xFF);
  v24 = v22 + v15 * (v4 ^ 0xFF);
  v25 = v19 + v18 * (v4 ^ 0xFF);
  if (v4 == 255)
  {
    v25 = v19;
    v26 = v22;
  }
  else
  {
    v26 = v24;
  }
  if (v4 == 255)
    v23 = v20;
  v27 = 255 * (v7 + v4) - v7 * v4;
  if (v23 >= v27)
    v28 = v27;
  else
    v28 = v23;
  if (v26 >= v27)
    v29 = v27;
  else
    v29 = v26;
  if (v25 >= v27)
    v30 = v27;
  else
    v30 = v25;
  if (v29 >= 65152)
    v31 = 65152;
  else
    v31 = v29 + 128;
  v32 = v31 + (v31 >> 8);
  if (v28 >= 65152)
    v33 = 65152;
  else
    v33 = v28 + 128;
  v34 = v33 + (v33 >> 8);
  if (v30 >= 65152)
    v35 = 65152;
  else
    v35 = v30 + 128;
  v36 = v35 + (v35 >> 8);
  if (v27 >= 65152)
    v37 = 65152;
  else
    v37 = v27 + 128;
  return ((v37 + (v37 >> 8)) >> 8 << 24) & 0xF8000000 | (((unsigned __int16)(v37 + (v37 >> 8)) >> 8) >> 5 << 24) | ((unsigned __int16)v36 >> 11) | (v32 >> 6) & 0x3E0 | (v34 >> 1) & 0x7C00;
}

uint64_t PDAcolorburnPDA(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  signed int v12;
  unsigned int v13;
  signed int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int8x8_t v24;
  int8x8_t v25;
  int8x8_t v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  uint32x2_t v30;
  int8x8_t v31;

  v4 = ((unsigned __int16)(a1 & 0x7C00) >> 7) & 0xFFFFFFF8 | (a1 >> 12) & 7;
  v5 = ((unsigned __int16)(a1 & 0x3E0) >> 2) & 0xFFFFFFF8 | (a1 >> 7) & 7;
  v6 = (a1 >> 2) & 7 | (8 * (a1 & 0x1F));
  v7 = a2 & 0xF8 | (a2 >> 5);
  v8 = ((unsigned __int16)(a3 & 0x3E0) >> 2) & 0xFFFFFFF8 | (a3 >> 7) & 7;
  v9 = (a3 >> 2) & 7 | (8 * (a3 & 0x1F));
  v10 = a4 & 0xF8 | (a4 >> 5);
  v11 = v10 * v7;
  if ((((unsigned __int16)(a3 & 0x7C00) >> 7) & 0xFFFFFFF8 | (a3 >> 12) & 7) >= v10)
    v12 = a4 & 0xF8 | (a4 >> 5);
  else
    v12 = ((unsigned __int16)(a3 & 0x7C00) >> 7) & 0xFFFFFFF8 | (a3 >> 12) & 7;
  if (v4 >= v7)
    v13 = a2 & 0xF8 | (a2 >> 5);
  else
    v13 = ((unsigned __int16)(a1 & 0x7C00) >> 7) & 0xFFFFFFF8 | (a1 >> 12) & 7;
  if (v8 >= v10)
    v14 = v10;
  else
    v14 = v8;
  if (v5 >= v7)
    v15 = a2 & 0xF8 | (a2 >> 5);
  else
    v15 = v5;
  if (v9 >= v10)
    v9 = v10;
  if (v6 >= v7)
    v16 = v7;
  else
    v16 = v6;
  v17 = v11 + (v10 ^ 0xFF) * v15;
  v18 = v11 + (v10 ^ 0xFF) * v16;
  if (v10 == 255)
  {
    v18 = v10 * v7;
    v17 = 255 * v7;
    v19 = 255 * v7;
  }
  else
  {
    v19 = v11 + (v10 ^ 0xFF) * v13;
  }
  if (v7 == 255)
  {
    v20 = v17;
  }
  else
  {
    v18 += v9 * (v7 ^ 0xFF);
    v20 = v17 + v14 * (v7 ^ 0xFF);
  }
  if (v7 == 255)
    v21 = v19;
  else
    v21 = v19 + v12 * (v7 ^ 0xFF);
  if (v7 > v4)
  {
    if (v12)
      v21 = (v21 - (int)(v10 * v10 * (v7 - v13)) / v12) & ~((v21 - (int)(v10 * v10 * (v7 - v13)) / v12) >> 31);
    else
      v21 = 0;
  }
  if (v7 > v5)
  {
    if (v14)
      v20 = (v20 - (int)(v10 * v10 * (v7 - v15)) / v14) & ~((v20 - (int)(v10 * v10 * (v7 - v15)) / v14) >> 31);
    else
      v20 = 0;
  }
  if (v7 > v6)
  {
    if (v9)
    {
      v22 = v18 - (int)(v10 * v10 * (v7 - v16)) / v9;
      v18 = v22 & ~(v22 >> 31);
    }
    else
    {
      v18 = 0;
    }
  }
  v23 = 255 * (v10 + v7) - v11;
  v24 = (int8x8_t)vadd_s32((int32x2_t)__PAIR64__(v20, v21), (int32x2_t)0x8000000080);
  v25 = (int8x8_t)vdup_n_s32(0xFE80u);
  v26 = (int8x8_t)vcgt_u32((uint32x2_t)v25, (uint32x2_t)__PAIR64__(v20, v21));
  v27 = v18 + 128;
  if (v18 >> 7 >= 0x1FD)
    v27 = 65152;
  v28 = v27 + (v27 >> 8);
  if (v23 >= 65152)
    v29 = 65152;
  else
    v29 = v23 + 128;
  v30 = (uint32x2_t)vbsl_s8(v26, v24, v25);
  v31 = vand_s8((int8x8_t)vshl_u32(vsra_n_u32(v30, v30, 8uLL), (uint32x2_t)0xFFFFFFFAFFFFFFFFLL), (int8x8_t)0x3E000007C00);
  return ((v29 + (v29 >> 8)) >> 8 << 24) & 0xF8000000 | (((unsigned __int16)(v29 + (v29 >> 8)) >> 8) >> 5 << 24) | v31.i32[0] | v31.i32[1] | (v28 >> 11);
}

uint64_t PDAhardlightPDA(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int8x8_t v30;
  int32x2_t v31;
  int8x8_t v32;
  int v33;
  uint32x2_t v34;
  int8x8_t v35;

  v4 = ((unsigned __int16)(a1 & 0x7C00) >> 7) & 0xFFFFFFF8 | (a1 >> 12) & 7;
  v5 = ((unsigned __int16)(a1 & 0x3E0) >> 2) & 0xFFFFFFF8 | (a1 >> 7) & 7;
  v6 = (a1 >> 2) & 7 | (8 * (a1 & 0x1F));
  v7 = a2 & 0xF8 | (a2 >> 5);
  v8 = ((unsigned __int16)(a3 & 0x7C00) >> 7) & 0xFFFFFFF8 | (a3 >> 12) & 7;
  v9 = ((unsigned __int16)(a3 & 0x3E0) >> 2) & 0xFFFFFFF8 | (a3 >> 7) & 7;
  v10 = (a3 >> 2) & 7 | (8 * (a3 & 0x1F));
  v11 = a4 & 0xF8 | (a4 >> 5);
  if (v8 >= v11)
    v8 = a4 & 0xF8 | (a4 >> 5);
  if (v4 >= v7)
    v4 = a2 & 0xF8 | (a2 >> 5);
  v12 = 2 * v4 * v8;
  if (v9 >= v11)
    v9 = a4 & 0xF8 | (a4 >> 5);
  if (v5 >= v7)
    v5 = a2 & 0xF8 | (a2 >> 5);
  v13 = 2 * v5 * v9;
  if (v10 >= v11)
    v10 = a4 & 0xF8 | (a4 >> 5);
  if (v6 >= v7)
    v6 = a2 & 0xF8 | (a2 >> 5);
  v14 = 2 * v6 * v10;
  v15 = v11 * v7;
  v16 = (v11 + 1) >> 1;
  v17 = v11 ^ 0xFF;
  v18 = v7 ^ 0xFF;
  v19 = v8 * (v7 ^ 0xFF) + (v11 ^ 0xFF) * v4 + v12;
  v20 = v11 + 255;
  v21 = v7 + 255;
  v22 = (v11 + 255) * v4 + v8 * (v7 + 255) - (v11 * v7 + v12);
  if (v8 <= v16)
    v22 = v19;
  v23 = v9 * v18 + v17 * v5 + v13;
  v24 = v20 * v5 + v9 * v21 - (v15 + v13);
  if (v9 <= v16)
    v24 = v23;
  v25 = v10 * v18 + v17 * v6 + v14;
  v26 = v20 * v6 + v10 * v21 - (v15 + v14);
  if (v10 <= v16)
    v26 = v25;
  v27 = 255 * (v11 + v7) - v15;
  if (v22 >= 65152)
    v28 = 65152;
  else
    v28 = v22 + 128;
  v29 = v28 + (v28 >> 8);
  v30 = (int8x8_t)vadd_s32((int32x2_t)__PAIR64__(v26, v24), (int32x2_t)0x8000000080);
  v31 = vdup_n_s32(0xFE80u);
  v32 = (int8x8_t)vcgt_s32(v31, (int32x2_t)__PAIR64__(v26, v24));
  if (v27 >= 65152)
    v33 = 65152;
  else
    v33 = v27 + 128;
  v34 = (uint32x2_t)vbsl_s8(v32, v30, (int8x8_t)v31);
  v35 = vand_s8((int8x8_t)vshl_u32(vsra_n_u32(v34, v34, 8uLL), (uint32x2_t)0xFFFFFFF5FFFFFFFALL), (int8x8_t)0x1F000003E0);
  return ((v33 + (v33 >> 8)) >> 8 << 24) & 0xF8000000 | (((unsigned __int16)(v33 + (v33 >> 8)) >> 8) >> 5 << 24) | (v29 >> 1) & 0x7C00 | v35.i32[0] | v35.i32[1];
}

uint64_t PDAsoftlightPDA(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;

  v4 = ((unsigned __int16)(a1 & 0x7C00) >> 7) & 0xFFFFFFF8 | (a1 >> 12) & 7;
  v5 = a2 & 0xF8 | (a2 >> 5);
  v6 = ((unsigned __int16)(a3 & 0x7C00) >> 7) & 0xFFFFFFF8 | (a3 >> 12) & 7;
  v7 = ((unsigned __int16)(a3 & 0x3E0) >> 2) & 0xFFFFFFF8 | (a3 >> 7) & 7;
  v8 = (a3 >> 2) & 7 | (8 * (a3 & 0x1F));
  v9 = a4 & 0xF8 | (a4 >> 5);
  if (v6 >= v9)
    v6 = a4 & 0xF8 | (a4 >> 5);
  if (v4 >= v5)
    v4 = a2 & 0xF8 | (a2 >> 5);
  if (v5)
  {
    v10 = (a1 >> 2) & 7 | (8 * (a1 & 0x1F));
    v11 = ((unsigned __int16)(a1 & 0x3E0) >> 2) & 0xFFFFFFF8 | (a1 >> 7) & 7;
    v12 = (int)(v4 * v4 * (2 * v6 - v9)) / v5;
    v13 = (2 * v4 * v6 - v12) & ~((int)(2 * v4 * v6 - v12) >> 31);
    if (v7 >= v9)
      v7 = a4 & 0xF8 | (a4 >> 5);
    if (v11 >= v5)
      v11 = a2 & 0xF8 | (a2 >> 5);
    v14 = (int)(v11 * v11 * (2 * v7 - v9)) / v5;
    v15 = (2 * v11 * v7 - v14) & ~((int)(2 * v11 * v7 - v14) >> 31);
    if (v8 >= v9)
      v8 = a4 & 0xF8 | (a4 >> 5);
    if (v10 >= v5)
      v10 = a2 & 0xF8 | (a2 >> 5);
    v16 = (int)(v10 * v10 * (2 * v8 - v9)) / v5;
    v17 = (2 * v10 * v8 - v16) & ~((int)(2 * v10 * v8 - v16) >> 31);
  }
  else
  {
    v10 = 0;
    v15 = 0;
    v13 = 0;
    v11 = 0;
    v17 = 0;
    if (v7 >= v9)
      v7 = a4 & 0xF8 | (a4 >> 5);
    if (v8 >= v9)
      v8 = a4 & 0xF8 | (a4 >> 5);
  }
  v18 = v13 + (v9 ^ 0xFF) * v4;
  v19 = v15 + v11 * (v9 ^ 0xFF);
  v20 = v17 + v10 * (v9 ^ 0xFF);
  if (v9 == 255)
  {
    v20 = v17;
    v19 = v15;
    v18 = v13;
  }
  v21 = v18 + v6 * (v5 ^ 0xFF);
  v22 = v19 + v7 * (v5 ^ 0xFF);
  v23 = v20 + v8 * (v5 ^ 0xFF);
  if (v5 == 255)
  {
    v23 = v20;
    v22 = v19;
    v21 = v18;
  }
  v24 = 255 * (v9 + v5) - v9 * v5;
  v25 = v21 + 128;
  if (v21 >> 7 >= 0x1FD)
    v25 = 65152;
  v26 = v25 + (v25 >> 8);
  v27 = v22 + 128;
  if (v22 >> 7 >= 0x1FD)
    v27 = 65152;
  v28 = v27 + (v27 >> 8);
  if (v23 >> 7 >= 0x1FD)
    v29 = 65152;
  else
    v29 = v23 + 128;
  v30 = v29 + (v29 >> 8);
  if (v24 >= 65152)
    v31 = 65152;
  else
    v31 = v24 + 128;
  return ((v31 + (v31 >> 8)) >> 8 << 24) & 0xF8000000 | (((unsigned __int16)(v31 + (v31 >> 8)) >> 8) >> 5 << 24) | ((unsigned __int16)v30 >> 11) | (v28 >> 6) & 0x3E0 | (v26 >> 1) & 0x7C00;
}

