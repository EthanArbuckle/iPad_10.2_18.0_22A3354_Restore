uint64_t W8_mark_pixelmask(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  _BYTE *v23;
  int v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  int v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  unsigned int v68;
  int v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  _BYTE *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _BYTE *v104;
  uint64_t v105;
  int v106;
  int v107;
  int v108;
  int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  uint64_t v114;
  _BYTE *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _BYTE *v124;
  uint64_t v125;
  int v126;
  int v127;
  int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  int v132;
  uint64_t v133;
  _BYTE *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _BYTE *v144;
  uint64_t v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  uint64_t v155;
  _BYTE *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _BYTE *v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  int v167;
  int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  uint64_t v173;
  _BYTE *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _BYTE *v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  int v185;
  int v186;
  int v187;
  unsigned int v188;
  unsigned int v189;
  uint64_t v190;
  _BYTE *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  _BYTE *v201;
  uint64_t v202;
  int v203;
  char v204;
  int v205;
  int v206;
  char v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  int v211;
  uint64_t v212;
  _BYTE *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  _BYTE *v222;
  uint64_t v223;
  int v224;
  int v225;
  int v226;
  unsigned int v227;
  unsigned int v228;
  unsigned int v229;
  int v230;
  uint64_t v231;
  _BYTE *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  _BYTE *v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  int v243;
  int v244;
  unsigned int v245;
  unsigned int v246;
  unsigned int v247;
  int v248;
  uint64_t v249;
  _BYTE *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  _BYTE *v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  int v261;
  int v262;
  unsigned int v263;
  unsigned int v264;
  unsigned int v265;
  int v266;
  uint64_t v267;
  _BYTE *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  int v276;
  int v277;
  int v278;
  unsigned int v279;
  unsigned int v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  int v289;
  int v290;
  int v291;
  unsigned int v292;
  unsigned int v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  int v302;
  int v303;
  int v304;
  unsigned int v305;
  unsigned int v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  int v315;
  int v316;
  int v317;
  unsigned int v318;
  unsigned int v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  int v328;
  int v329;
  int v330;
  unsigned int v331;
  unsigned int v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  int v341;
  int v342;
  int v343;
  unsigned int v344;
  unsigned int v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  int v354;
  int v355;
  int v356;
  unsigned int v357;
  unsigned int v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  int v367;
  int v368;
  int v369;
  unsigned int v370;
  unsigned int v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  int v380;
  int v381;
  int v382;
  unsigned int v383;
  unsigned int v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  int v393;
  int v394;
  int v395;
  unsigned int v396;
  unsigned int v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  int v406;
  int v407;
  int v408;
  unsigned int v409;
  unsigned int v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  int v419;
  int v420;
  int v421;
  unsigned int v422;
  unsigned int v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  int v432;
  int v433;
  int v434;
  unsigned int v435;
  unsigned int v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  int v445;
  int v446;
  int v447;
  unsigned int v448;
  unsigned int v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  int v458;
  int v459;
  int v460;
  unsigned int v461;
  unsigned int v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  int v469;
  int v470;
  unsigned int v471;
  uint64_t v472;
  _BYTE *v473;
  uint64_t v474;
  _BYTE *v475;
  unint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  _BYTE *v481;
  uint64_t v482;
  int v483;
  int v484;
  int v485;
  unsigned int v486;
  int v487;
  int v488;
  unsigned int v489;
  unsigned int v490;
  uint64_t v491;
  _BYTE *v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  _BYTE *v499;
  uint64_t v500;
  int v501;
  int v502;
  unsigned int v503;
  unsigned int v504;
  _BYTE *v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  _BYTE *v512;
  uint64_t v513;
  int v514;
  int v515;
  unsigned int v516;
  _BYTE *v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  _BYTE *v524;
  uint64_t v525;
  int v526;
  int v527;
  int v528;
  unsigned int v529;
  unsigned int v530;
  char v531;
  uint64_t v532;
  _BYTE *v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  int v539;
  unsigned int v540;
  uint64_t v541;
  _BYTE *v542;
  uint64_t v543;
  _BYTE *v544;
  unint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  int v549;
  int v550;
  unsigned int v551;
  unsigned int v552;
  unsigned int v553;
  uint64_t v554;
  _BYTE *v555;
  uint64_t v556;
  _BYTE *v557;
  unint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  _BYTE *v589;
  _BYTE *v590;
  _BYTE *v591;
  _BYTE *v592;
  _BYTE *v593;
  _BYTE *v594;
  _BYTE *v595;
  _BYTE *v596;
  _BYTE *v597;
  _BYTE *v598;
  _BYTE *v599;
  _BYTE *v600;
  _BYTE *v601;
  _BYTE *v602;
  _BYTE *v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  unint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  int v624;
  int v625;
  int v626;
  int v627;
  int v628;
  int v629;
  int v630;
  int v631;
  int v632;
  int v633;
  int v634;
  int v635;
  int v636;
  int v637;
  int v638;
  int v639;
  uint64_t v640;
  _BYTE *v641;
  int v642;
  int v643;
  unint64_t v644;
  unint64_t v645;
  unint64_t v646;
  unint64_t v647;
  unint64_t v648;
  unint64_t v649;
  unint64_t v650;
  unint64_t v651;
  unint64_t v652;
  unint64_t v653;
  unint64_t v654;
  unint64_t v655;
  unint64_t v656;
  unint64_t v657;
  unint64_t v658;

  v2 = *(_QWORD *)(result + 48);
  v3 = *(_QWORD *)(result + 136);
  v5 = *(int *)(result + 12);
  v4 = *(_DWORD *)(result + 16);
  if (v2)
  {
    v6 = *(int *)(result + 32);
    v7 = (_BYTE *)(v2 + v5 + (int)v6 * (uint64_t)v4);
    v8 = -1;
    if (!v3)
      return result;
  }
  else
  {
    v7 = 0;
    v6 = 0;
    v8 = 0;
    if (!v3)
      return result;
  }
  v9 = *(_DWORD *)(result + 4);
  v10 = *(_DWORD *)(result + 8);
  v11 = *(int *)(result + 28);
  v13 = *(_BYTE **)(result + 88);
  v12 = *(_BYTE **)(result + 96);
  v14 = *(_QWORD *)(result + 40) + v5 + v4 * (uint64_t)(int)v11;
  v15 = *(int *)(result + 124);
  v16 = v3 + *(int *)(result + 104) + *(int *)(result + 108) * (uint64_t)(int)v15;
  v17 = *(int *)(result + 56);
  v18 = *(_DWORD *)(result + 60);
  v640 = *(int *)(result + 76);
  if ((*(_DWORD *)result & 0xFF00) != 0x100)
  {
    v20 = *(_DWORD *)(result + 64);
    v21 = *(_DWORD *)(result + 68);
    if (v12)
    {
      v623 = *(int *)(result + 80);
      v19 = 1;
    }
    else
    {
      v623 = 0;
      v19 = 0;
    }
    result = (uint64_t)&v13[*(int *)(result + 68) * (uint64_t)(int)v640];
    v8 &= 1u;
    v24 = 1;
    v25 = (unint64_t)v13;
    v641 = v13;
    goto LABEL_19;
  }
  if (v12)
  {
    v623 = *(int *)(result + 80);
    v12 += v17 + (int)v623 * (uint64_t)v18;
    v19 = -1;
  }
  else
  {
    v623 = 0;
    v19 = 0;
  }
  v13 += v17 + v18 * (uint64_t)(int)v640;
  if ((_DWORD)v640 == (_DWORD)v11 && (uint64_t)(v14 - (_QWORD)v13) >= 1)
  {
    if ((uint64_t)(v14 - (_QWORD)v13) <= v9)
    {
      v14 += v9 - 1;
      v13 += v9 - 1;
      v16 += v9 - 1;
      v7 += v8 & (v9 - 1);
      v12 += v19 & (v9 - 1);
      v24 = -1;
      goto LABEL_16;
    }
    v22 = v10 - 1;
    v23 = &v13[v640 * v22];
    if (v14 <= (unint64_t)&v23[v9 - 1])
    {
      v14 += v11 * v22;
      v11 = -v11;
      v640 = -v640;
      v16 += v15 * v22;
      v15 = -v15;
      v7 += v6 * v22;
      v6 = -v6;
      v8 &= 1u;
      v12 += v623 * v22;
      v623 = -v623;
      v19 &= 1u;
      v24 = 1;
      v13 = v23;
      goto LABEL_16;
    }
  }
  v8 &= 1u;
  v19 &= 1u;
  v24 = 1;
LABEL_16:
  v641 = 0;
  result = 0;
  v25 = -1;
  v21 = v623;
  v20 = v640;
LABEL_19:
  v26 = v24 * v9;
  v624 = v9;
  v620 = result;
  if (result)
  {
    v27 = v18 % v21;
    v28 = &v13[v640 * v27];
    result = (int)v17 % v20;
    v13 = &v28[result];
    v25 = (unint64_t)&v28[v20];
    if ((v19 & 1) != 0)
      v12 += v623 * v27 + result;
    v641 = &v28[(int)v17 % v20];
  }
  else
  {
    v640 -= v26;
    v623 -= v19 * v9;
  }
  v621 = v11 - v26;
  v622 = v15 - v26;
  v619 = v6 - v8 * v624;
  v643 = v19;
  v642 = v8;
  switch(a2)
  {
    case 0:
      v29 = v24;
      if (v8)
      {
        do
        {
          v30 = 0;
          v31 = v624;
          do
          {
            v32 = *(unsigned __int8 *)(v16 + v30);
            if (*(_BYTE *)(v16 + v30))
            {
              if (v32 == 255)
              {
                LOBYTE(v33) = 0;
                *(_BYTE *)(v14 + v30) = 0;
              }
              else
              {
                v34 = *(unsigned __int8 *)(v14 + v30);
                v35 = *v7;
                v36 = (v34 | (v35 << 16)) * v32 + 65537 + ((((v34 | (v35 << 16)) * v32) >> 8) & 0xFF00FF);
                v37 = v34 | (v35 << 24);
                *(_BYTE *)(v14 + v30) = v37 - BYTE1(v36);
                v33 = (v37 - (v36 & 0xFF000000 | BYTE1(v36))) >> 24;
              }
              *v7 = v33;
            }
            v7 += v8;
            v30 += v29;
            --v31;
          }
          while (v31);
          v16 += v30 + v622;
          v14 += v30 + v621;
          v7 += v619;
          --v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v38 = 0;
          v39 = v624;
          do
          {
            v40 = *(unsigned __int8 *)(v16 + v38);
            if (*(_BYTE *)(v16 + v38))
            {
              if (v40 == 255)
                LOBYTE(v41) = 0;
              else
                v41 = *(unsigned __int8 *)(v14 + v38)
                    - ((*(unsigned __int8 *)(v14 + v38) * v40
                      + ((*(unsigned __int8 *)(v14 + v38) * v40) >> 8)
                      + 1) >> 8);
              *(_BYTE *)(v14 + v38) = v41;
            }
            v38 += v24;
            --v39;
          }
          while (v39);
          v16 += v38 + v622;
          v14 += v38 + v621;
          --v10;
        }
        while (v10);
      }
      return result;
    case 1:
      if (v8)
      {
        v42 = v24;
        if (v19)
        {
          v43 = -(uint64_t)v20;
          v44 = v21;
          v45 = -(v640 * v21);
          v46 = -(v623 * v44);
          v47 = v12;
          do
          {
            v48 = 0;
            v49 = v624;
            do
            {
              v50 = *(unsigned __int8 *)(v16 + v48);
              if (*(_BYTE *)(v16 + v48))
              {
                if (v50 == 255)
                {
                  *(_BYTE *)(v14 + v48) = *v13;
                  LOBYTE(v51) = *v12;
                }
                else
                {
                  v52 = (*v13 | (*v12 << 16)) * v50
                      + (*(unsigned __int8 *)(v14 + v48) | (*v7 << 16)) * (v50 ^ 0xFF);
                  v53 = v52 + 65537 + ((v52 >> 8) & 0xFF00FF);
                  *(_BYTE *)(v14 + v48) = BYTE1(v53);
                  v51 = HIBYTE(v53);
                }
                *v7 = v51;
              }
              v7 += v8;
              if ((unint64_t)&v13[v42] >= v25)
                v54 = v43;
              else
                v54 = 0;
              v12 += v19 + v54;
              v13 += v42 + v54;
              v48 += v42;
              --v49;
            }
            while (v49);
            if (v620)
            {
              v55 = &v47[v623];
              if ((unint64_t)&v641[v640] >= v620)
                v56 = v45;
              else
                v56 = 0;
              v13 = &v641[v640 + v56];
              if ((unint64_t)&v641[v640] >= v620)
                v57 = v46;
              else
                v57 = 0;
              v12 = &v55[v57];
              v25 += v640 + v56;
              v47 = &v55[v57];
              v641 += v640 + v56;
            }
            else
            {
              v13 += v640;
              v12 += v623;
            }
            result = v14 + v48;
            v16 += v48 + v622;
            v14 += v48 + v621;
            v7 += v619;
            --v10;
          }
          while (v10);
        }
        else
        {
          v546 = -(uint64_t)v20;
          v547 = -(v640 * v21);
          do
          {
            v548 = 0;
            v549 = v624;
            do
            {
              v550 = *(unsigned __int8 *)(v16 + v548);
              if (*(_BYTE *)(v16 + v548))
              {
                if (v550 == 255)
                {
                  *(_BYTE *)(v14 + v548) = *v13;
                  LOBYTE(v551) = -1;
                }
                else
                {
                  v552 = (*v13 | 0xFF0000) * v550
                       + (*(unsigned __int8 *)(v14 + v548) | (*v7 << 16)) * (v550 ^ 0xFF);
                  v553 = v552 + 65537 + ((v552 >> 8) & 0xFF00FF);
                  *(_BYTE *)(v14 + v548) = BYTE1(v553);
                  v551 = HIBYTE(v553);
                }
                *v7 = v551;
              }
              v7 += v8;
              if ((unint64_t)&v13[v42] >= v25)
                v554 = v546;
              else
                v554 = 0;
              v13 += v42 + v554;
              v548 += v42;
              --v549;
            }
            while (v549);
            v16 += v548 + v622;
            result = v620;
            v14 += v548 + v621;
            v7 += v619;
            v555 = v641;
            if ((unint64_t)&v641[v640] >= v620)
              v556 = v547;
            else
              v556 = 0;
            v557 = &v641[v640 + v556];
            v558 = v25 + v640 + v556;
            if (v620)
              v555 = v557;
            v641 = v555;
            if (v620)
            {
              v25 = v558;
              v13 = v557;
            }
            else
            {
              v13 += v640;
            }
            --v10;
          }
          while (v10);
        }
      }
      else
      {
        v466 = -(uint64_t)v20;
        v467 = -(v640 * v21);
        do
        {
          v468 = 0;
          v469 = v624;
          do
          {
            v470 = *(unsigned __int8 *)(v16 + v468);
            if (*(_BYTE *)(v16 + v468))
            {
              if (v470 == 255)
                LOBYTE(v471) = *v13;
              else
                v471 = (*v13 * v470
                      + *(unsigned __int8 *)(v14 + v468) * (v470 ^ 0xFF)
                      + ((*v13 * v470 + *(unsigned __int8 *)(v14 + v468) * (v470 ^ 0xFFu)) >> 8)
                      + 1) >> 8;
              *(_BYTE *)(v14 + v468) = v471;
            }
            if ((unint64_t)&v13[v24] >= v25)
              v472 = v466;
            else
              v472 = 0;
            v13 += v24 + v472;
            v468 += v24;
            --v469;
          }
          while (v469);
          v16 += v468 + v622;
          v14 += v468 + v621;
          v473 = v641;
          if ((unint64_t)&v641[v640] >= v620)
            v474 = v467;
          else
            v474 = 0;
          v475 = &v641[v640 + v474];
          v476 = v25 + v640 + v474;
          if (v620)
            v473 = v475;
          v641 = v473;
          if (v620)
          {
            v25 = v476;
            v13 = v475;
          }
          else
          {
            v13 += v640;
          }
          --v10;
        }
        while (v10);
      }
      return result;
    case 2:
      v58 = v24;
      if (v8)
      {
        v59 = v21;
        v60 = -(v640 * v21);
        v61 = -(v623 * v59);
        v62 = v12;
        v63 = -(uint64_t)v20;
        while (1)
        {
          v64 = 0;
          v65 = v624;
          do
          {
            v66 = *(unsigned __int8 *)(v16 + v64);
            if (!*(_BYTE *)(v16 + v64))
              goto LABEL_83;
            if (v66 != 255)
            {
              v69 = *v13;
              v70 = *v12;
              v71 = (v69 | (v70 << 16)) * (v66 ^ 0xFF)
                  + 65537
                  + ((((v69 | (v70 << 16)) * (v66 ^ 0xFFu)) >> 8) & 0xFF00FF);
              v72 = (v69 | (v70 << 24)) - (v71 & 0xFF000000 | BYTE1(v71));
              if (!HIBYTE(v72))
                goto LABEL_83;
              v73 = (*(unsigned __int8 *)(v14 + v64) | (*v7 << 16)) * (~v72 >> 24);
              v74 = ((v73 + 65537 + ((v73 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v73 + 1 + BYTE1(v73)) >> 8))
                  + (v72 & 0xFF0000FF);
              goto LABEL_81;
            }
            v67 = *v12;
            if (!*v12)
              goto LABEL_83;
            if (v67 != 255)
            {
              v75 = (*(unsigned __int8 *)(v14 + v64) | (*v7 << 16)) * (v67 ^ 0xFF);
              v74 = ((v75 + 65537 + ((v75 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v75 + 1 + BYTE1(v75)) >> 8))
                  + (*v13 | (v67 << 24));
LABEL_81:
              *(_BYTE *)(v14 + v64) = v74;
              v68 = HIBYTE(v74);
              goto LABEL_82;
            }
            *(_BYTE *)(v14 + v64) = *v13;
            LOBYTE(v68) = -1;
LABEL_82:
            *v7 = v68;
LABEL_83:
            v7 += v8;
            if ((unint64_t)&v13[v58] >= v25)
              v76 = v63;
            else
              v76 = 0;
            v12 += v19 + v76;
            v13 += v58 + v76;
            v64 += v58;
            --v65;
          }
          while (v65);
          if (v620)
          {
            v77 = &v62[v623];
            if ((unint64_t)&v641[v640] >= v620)
              v78 = v60;
            else
              v78 = 0;
            v13 = &v641[v640 + v78];
            if ((unint64_t)&v641[v640] >= v620)
              v79 = v61;
            else
              v79 = 0;
            v12 = &v77[v79];
            v25 += v640 + v78;
            v62 = &v77[v79];
            v641 += v640 + v78;
          }
          else
          {
            v13 += v640;
            v12 += v623;
          }
          result = v14 + v64;
          v16 += v64 + v622;
          v14 += v64 + v621;
          v7 += v619;
          if (!--v10)
            return result;
        }
      }
      v477 = -(uint64_t)v20;
      v478 = v21;
      v479 = -(v640 * v21);
      v480 = -(v623 * v478);
      v481 = v12;
      break;
    case 3:
      v80 = v24;
      v81 = v21;
      v82 = -(v640 * v21);
      v83 = -(uint64_t)v20;
      v84 = -(v623 * v81);
      v85 = v12;
      do
      {
        v86 = 0;
        v87 = v624;
        do
        {
          v88 = *(unsigned __int8 *)(v16 + v86);
          if (*(_BYTE *)(v16 + v86))
          {
            if (v88 == 255)
            {
              if (v19)
                v89 = *v12;
              else
                v89 = 255;
              v93 = *v13;
              v91 = (v93 | (v89 << 16)) * (*v7 ^ 0xFF);
              v92 = (v93 | (v89 << 24))
                  - ((v91 + 65537 + ((v91 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v91 + 1 + BYTE1(v91)) >> 8));
              HIBYTE(v93) = HIBYTE(v92);
            }
            else
            {
              if (v19)
                v90 = *v12;
              else
                v90 = 255;
              v94 = (*v13 | (v90 << 16))
                  * ((*v7 * v88 + ((*v7 * v88) >> 8) + 1) >> 8)
                  + (*(unsigned __int8 *)(v14 + v86) | (*v7 << 16)) * (v88 ^ 0xFF);
              v93 = v94 + 65537 + ((v94 >> 8) & 0xFF00FF);
              v92 = v93 >> 8;
            }
            *(_BYTE *)(v14 + v86) = v92;
            *v7 = HIBYTE(v93);
          }
          v7 += v8;
          if ((unint64_t)&v13[v80] >= v25)
            v95 = v83;
          else
            v95 = 0;
          v12 += v19 + v95;
          v13 += v80 + v95;
          v86 += v80;
          --v87;
        }
        while (v87);
        if (v620)
        {
          v96 = &v85[v623];
          if ((unint64_t)&v641[v640] >= v620)
            v97 = v82;
          else
            v97 = 0;
          v13 = &v641[v640 + v97];
          if ((unint64_t)&v641[v640] >= v620)
            v98 = v84;
          else
            v98 = 0;
          v12 = &v96[v98];
          v25 += v640 + v97;
          v85 = &v96[v98];
          v641 += v640 + v97;
        }
        else
        {
          v13 += v640;
          v12 += v623;
        }
        result = v14 + v86;
        v16 += v86 + v622;
        v14 += v86 + v621;
        v7 += v619;
        --v10;
      }
      while (v10);
      return result;
    case 4:
      v99 = v24;
      v100 = v21;
      v101 = -(v640 * v21);
      v102 = -(uint64_t)v20;
      v103 = -(v623 * v100);
      v104 = v12;
      do
      {
        v105 = 0;
        v106 = v624;
        do
        {
          v107 = *(unsigned __int8 *)(v16 + v105);
          if (*(_BYTE *)(v16 + v105))
          {
            if (v107 == 255)
            {
              if (v19)
                v108 = *v12;
              else
                v108 = 255;
              v112 = *v13;
              v110 = (v112 | (v108 << 16)) * *v7;
              v111 = (v112 | (v108 << 24))
                   - ((v110 + 65537 + ((v110 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v110 + 1 + BYTE1(v110)) >> 8));
              HIBYTE(v112) = HIBYTE(v111);
            }
            else
            {
              if (v19)
                v109 = *v12;
              else
                v109 = 255;
              v113 = (*v13 | (v109 << 16))
                   * (((*v7 ^ 0xFF) * v107 + (((*v7 ^ 0xFFu) * v107) >> 8) + 1) >> 8)
                   + (*(unsigned __int8 *)(v14 + v105) | (*v7 << 16)) * (v107 ^ 0xFF);
              v112 = v113 + 65537 + ((v113 >> 8) & 0xFF00FF);
              v111 = v112 >> 8;
            }
            *(_BYTE *)(v14 + v105) = v111;
            *v7 = HIBYTE(v112);
          }
          v7 += v8;
          if ((unint64_t)&v13[v99] >= v25)
            v114 = v102;
          else
            v114 = 0;
          v12 += v19 + v114;
          v13 += v99 + v114;
          v105 += v99;
          --v106;
        }
        while (v106);
        if (v620)
        {
          v115 = &v104[v623];
          if ((unint64_t)&v641[v640] >= v620)
            v116 = v101;
          else
            v116 = 0;
          v13 = &v641[v640 + v116];
          if ((unint64_t)&v641[v640] >= v620)
            v117 = v103;
          else
            v117 = 0;
          v12 = &v115[v117];
          v25 += v640 + v116;
          v104 = &v115[v117];
          v641 += v640 + v116;
        }
        else
        {
          v13 += v640;
          v12 += v623;
        }
        result = v14 + v105;
        v16 += v105 + v622;
        v14 += v105 + v621;
        v7 += v619;
        --v10;
      }
      while (v10);
      return result;
    case 5:
      v118 = v24;
      v119 = v8;
      v120 = v21;
      v121 = -(v640 * v21);
      v122 = -(uint64_t)v20;
      v123 = -(v623 * v120);
      v124 = v12;
      do
      {
        v125 = 0;
        v126 = v624;
        do
        {
          if (*(_BYTE *)(v16 + v125))
          {
            v127 = *v13;
            v128 = *v12;
            v129 = (v127 | (v128 << 16)) * (*(unsigned __int8 *)(v16 + v125) ^ 0xFF)
                 + 65537
                 + ((((v127 | (v128 << 16)) * (*(unsigned __int8 *)(v16 + v125) ^ 0xFFu)) >> 8) & 0xFF00FF);
            v130 = (v127 | (v128 << 24)) - (v129 & 0xFF000000 | BYTE1(v129));
            v131 = (HIBYTE(v130) ^ 0xFF) * (*(unsigned __int8 *)(v14 + v125) | (*v7 << 16))
                 + (v130 | (HIBYTE(v130) << 16)) * *v7;
            v132 = v131 + 65537 + ((v131 >> 8) & 0xFF00FF);
            *(_BYTE *)(v14 + v125) = BYTE1(v132);
            *v7 = HIBYTE(v132);
          }
          v7 += v119;
          if ((unint64_t)&v13[v118] >= v25)
            v133 = v122;
          else
            v133 = 0;
          v12 += v19 + v133;
          v13 += v118 + v133;
          v125 += v118;
          --v126;
        }
        while (v126);
        if (v620)
        {
          v134 = &v124[v623];
          if ((unint64_t)&v641[v640] >= v620)
            v135 = v121;
          else
            v135 = 0;
          v13 = &v641[v640 + v135];
          if ((unint64_t)&v641[v640] >= v620)
            v136 = v123;
          else
            v136 = 0;
          v12 = &v134[v136];
          v25 += v640 + v135;
          v124 = &v134[v136];
          v641 += v640 + v135;
        }
        else
        {
          v13 += v640;
          v12 += v623;
        }
        result = v14 + v125;
        v16 += v125 + v622;
        v14 += v125 + v621;
        v7 += v619;
        --v10;
      }
      while (v10);
      return result;
    case 6:
      v137 = v24;
      v138 = v8;
      v139 = v19;
      v140 = v21;
      v141 = -(v640 * v21);
      v142 = -(uint64_t)v20;
      v143 = -(v623 * v140);
      v144 = v12;
      do
      {
        v145 = 0;
        v146 = v624;
        do
        {
          v147 = *(unsigned __int8 *)(v16 + v145);
          if (*(_BYTE *)(v16 + v145))
          {
            v148 = *v7;
            if ((_BYTE)v148 != 0xFF)
            {
              if (~(_BYTE)v148 == 255)
              {
                if (v19)
                  v149 = *v12;
                else
                  v149 = 255;
                v151 = *v13;
                v152 = (v151 | (v149 << 16)) * (v147 ^ 0xFF)
                     + 65537
                     + ((((v151 | (v149 << 16)) * (v147 ^ 0xFFu)) >> 8) & 0xFF00FF);
                v153 = (v151 | (v149 << 24)) - (v152 & 0xFF000000 | BYTE1(v152));
              }
              else
              {
                if (v19)
                  v150 = *v12;
                else
                  v150 = 255;
                v154 = (*v13 | (v150 << 16))
                     * ((~(_BYTE)v148 * v147
                       + ((~(_BYTE)v148 * v147) >> 8)
                       + 1) >> 8);
                v153 = ((v154 + 65537 + ((v154 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v154 + 1 + BYTE1(v154)) >> 8))
                     + (*(unsigned __int8 *)(v14 + v145) | (v148 << 24));
                v19 = v643;
              }
              *(_BYTE *)(v14 + v145) = v153;
              *v7 = HIBYTE(v153);
            }
          }
          v7 += v138;
          if ((unint64_t)&v13[v137] >= v25)
            v155 = v142;
          else
            v155 = 0;
          v12 += v139 + v155;
          v13 += v137 + v155;
          v145 += v137;
          --v146;
        }
        while (v146);
        if (v620)
        {
          v156 = &v144[v623];
          if ((unint64_t)&v641[v640] >= v620)
            v157 = v141;
          else
            v157 = 0;
          v13 = &v641[v640 + v157];
          if ((unint64_t)&v641[v640] >= v620)
            v158 = v143;
          else
            v158 = 0;
          v12 = &v156[v158];
          v25 += v640 + v157;
          v144 = &v156[v158];
          v641 += v640 + v157;
        }
        else
        {
          v13 += v640;
          v12 += v623;
        }
        v16 += v145 + v622;
        v14 += v145 + v621;
        result = v619;
        v7 += v619;
        --v10;
      }
      while (v10);
      return result;
    case 7:
      v159 = v24;
      if (v8)
      {
        v160 = v21;
        v161 = -(v640 * v21);
        v162 = -(v623 * v160);
        v163 = v12;
        v164 = -(uint64_t)v20;
        do
        {
          v165 = 0;
          v166 = v624;
          do
          {
            v167 = *(unsigned __int8 *)(v16 + v165);
            if (*(_BYTE *)(v16 + v165))
            {
              if (v167 == 255)
              {
                v168 = *(unsigned __int8 *)(v14 + v165);
                v171 = *v7;
                v169 = (v168 | (v171 << 16)) * (*v12 ^ 0xFF);
                v170 = (v168 | (v171 << 24))
                     - ((v169 + 65537 + ((v169 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v169 + 1 + BYTE1(v169)) >> 8));
                HIBYTE(v171) = HIBYTE(v170);
              }
              else
              {
                v172 = ((v167 ^ 0xFF)
                      + ((*v12 * v167 + ((*v12 * v167) >> 8) + 1) >> 8))
                     * (*(unsigned __int8 *)(v14 + v165) | (*v7 << 16));
                v171 = v172 + 65537 + ((v172 >> 8) & 0xFF00FF);
                v170 = v171 >> 8;
              }
              *(_BYTE *)(v14 + v165) = v170;
              *v7 = HIBYTE(v171);
            }
            v7 += v8;
            if ((unint64_t)&v13[v159] >= v25)
              v173 = v164;
            else
              v173 = 0;
            v12 += v19 + v173;
            v13 += v159 + v173;
            v165 += v159;
            --v166;
          }
          while (v166);
          if (v620)
          {
            v174 = &v163[v623];
            if ((unint64_t)&v641[v640] >= v620)
              v175 = v161;
            else
              v175 = 0;
            v13 = &v641[v640 + v175];
            if ((unint64_t)&v641[v640] >= v620)
              v176 = v162;
            else
              v176 = 0;
            v12 = &v174[v176];
            v25 += v640 + v175;
            v163 = &v174[v176];
            v641 += v640 + v175;
          }
          else
          {
            v13 += v640;
            v12 += v623;
          }
          result = v14 + v165;
          v16 += v165 + v622;
          v14 += v165 + v621;
          v7 += v619;
          --v10;
        }
        while (v10);
      }
      else
      {
        v495 = -(uint64_t)v20;
        v496 = v21;
        v497 = -(v640 * v21);
        v498 = -(v623 * v496);
        v499 = v12;
        do
        {
          v500 = 0;
          v501 = v624;
          do
          {
            v502 = *(unsigned __int8 *)(v16 + v500);
            if (*(_BYTE *)(v16 + v500))
            {
              if (v502 == 255)
              {
                v503 = *(unsigned __int8 *)(v14 + v500)
                     - (((*v12 ^ 0xFF) * *(unsigned __int8 *)(v14 + v500)
                       + (((*v12 ^ 0xFF) * *(unsigned __int8 *)(v14 + v500)) >> 8)
                       + 1) >> 8);
              }
              else
              {
                v504 = *v12 * v502 + ((*v12 * v502) >> 8) + 1;
                v503 = (((v502 ^ 0xFF) + (v504 >> 8)) * *(unsigned __int8 *)(v14 + v500)
                      + ((((v502 ^ 0xFF) + (v504 >> 8)) * *(unsigned __int8 *)(v14 + v500)) >> 8)
                      + 1) >> 8;
              }
              *(_BYTE *)(v14 + v500) = v503;
            }
            if ((unint64_t)&v13[v159] >= v25)
              result = v495;
            else
              result = 0;
            v12 += v19 + result;
            v13 += v159 + result;
            v500 += v159;
            --v501;
          }
          while (v501);
          if (v620)
          {
            result = v623;
            v505 = &v499[v623];
            if ((unint64_t)&v641[v640] >= v620)
              v506 = v497;
            else
              v506 = 0;
            v13 = &v641[v640 + v506];
            if ((unint64_t)&v641[v640] >= v620)
              v507 = v498;
            else
              v507 = 0;
            v12 = &v505[v507];
            v25 += v640 + v506;
            v499 = &v505[v507];
            v641 += v640 + v506;
          }
          else
          {
            v13 += v640;
            v12 += v623;
          }
          v16 += v500 + v622;
          v14 += v500 + v621;
          --v10;
        }
        while (v10);
      }
      return result;
    case 8:
      v177 = v24;
      if (v8)
      {
        v178 = v21;
        v179 = -(v640 * v21);
        v180 = -(v623 * v178);
        v181 = v12;
        v182 = -(uint64_t)v20;
        do
        {
          v183 = 0;
          v184 = v624;
          do
          {
            v185 = *(unsigned __int8 *)(v16 + v183);
            if (*(_BYTE *)(v16 + v183))
            {
              v186 = *(unsigned __int8 *)(v14 + v183);
              v187 = *v7;
              if (v185 == 255)
                v188 = (v186 | (v187 << 16)) * *v12;
              else
                v188 = ((*v12 * v185 + ((*v12 * v185) >> 8) + 1) >> 8)
                     * (v186 | (v187 << 16));
              v189 = (v186 | (v187 << 24))
                   - ((v188 + 65537 + ((v188 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v188 + 1 + BYTE1(v188)) >> 8));
              *(_BYTE *)(v14 + v183) = v189;
              *v7 = HIBYTE(v189);
            }
            v7 += v8;
            if ((unint64_t)&v13[v177] >= v25)
              v190 = v182;
            else
              v190 = 0;
            v12 += v19 + v190;
            v13 += v177 + v190;
            v183 += v177;
            --v184;
          }
          while (v184);
          if (v620)
          {
            v191 = &v181[v623];
            if ((unint64_t)&v641[v640] >= v620)
              v192 = v179;
            else
              v192 = 0;
            v13 = &v641[v640 + v192];
            if ((unint64_t)&v641[v640] >= v620)
              v193 = v180;
            else
              v193 = 0;
            v12 = &v191[v193];
            v25 += v640 + v192;
            v181 = &v191[v193];
            v641 += v640 + v192;
          }
          else
          {
            v13 += v640;
            v12 += v623;
          }
          result = v14 + v183;
          v16 += v183 + v622;
          v14 += v183 + v621;
          v7 += v619;
          --v10;
        }
        while (v10);
      }
      else
      {
        v508 = -(uint64_t)v20;
        v509 = v21;
        v510 = -(v640 * v21);
        v511 = -(v623 * v509);
        v512 = v12;
        do
        {
          v513 = 0;
          v514 = v624;
          do
          {
            v515 = *(unsigned __int8 *)(v16 + v513);
            if (*(_BYTE *)(v16 + v513))
            {
              if (v515 == 255)
                v516 = *v12;
              else
                v516 = (*v12 * v515 + ((*v12 * v515) >> 8) + 1) >> 8;
              *(_BYTE *)(v14 + v513) -= (unsigned __int16)(v516 * *(unsigned __int8 *)(v14 + v513)
                                                         + ((v516 * *(unsigned __int8 *)(v14 + v513)) >> 8)
                                                         + 1) >> 8;
            }
            if ((unint64_t)&v13[v177] >= v25)
              result = v508;
            else
              result = 0;
            v12 += v19 + result;
            v13 += v177 + result;
            v513 += v177;
            --v514;
          }
          while (v514);
          if (v620)
          {
            result = v623;
            v517 = &v512[v623];
            if ((unint64_t)&v641[v640] >= v620)
              v518 = v510;
            else
              v518 = 0;
            v13 = &v641[v640 + v518];
            if ((unint64_t)&v641[v640] >= v620)
              v519 = v511;
            else
              v519 = 0;
            v12 = &v517[v519];
            v25 += v640 + v518;
            v512 = &v517[v519];
            v641 += v640 + v518;
          }
          else
          {
            v13 += v640;
            v12 += v623;
          }
          v16 += v513 + v622;
          v14 += v513 + v621;
          --v10;
        }
        while (v10);
      }
      return result;
    case 9:
      v194 = v24;
      v195 = v8;
      v196 = v19;
      v197 = v21;
      v198 = -(v640 * v21);
      v199 = -(uint64_t)v20;
      v200 = -(v623 * v197);
      v201 = v12;
      do
      {
        v202 = 0;
        v203 = v624;
        do
        {
          v204 = *(_BYTE *)(v16 + v202);
          if (v204)
          {
            v205 = *v13;
            v206 = *v12;
            v207 = ~v204;
            v208 = (v205 | (v206 << 16)) * ~v204;
            v209 = (v205 | (v206 << 24))
                 - ((v208 + 65537 + ((v208 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v208 + 1 + BYTE1(v208)) >> 8));
            v210 = (v209 | (HIBYTE(v209) << 16)) * (*v7 ^ 0xFF)
                 + (*(unsigned __int8 *)(v14 + v202) | (*v7 << 16))
                 * (v207 + HIBYTE(v209));
            v211 = v210 + 65537 + ((v210 >> 8) & 0xFF00FF);
            *(_BYTE *)(v14 + v202) = BYTE1(v211);
            *v7 = HIBYTE(v211);
          }
          v7 += v195;
          if ((unint64_t)&v13[v194] >= v25)
            v212 = v199;
          else
            v212 = 0;
          v12 += v196 + v212;
          v13 += v194 + v212;
          v202 += v194;
          --v203;
        }
        while (v203);
        if (v620)
        {
          v213 = &v201[v623];
          if ((unint64_t)&v641[v640] >= v620)
            v214 = v198;
          else
            v214 = 0;
          v13 = &v641[v640 + v214];
          if ((unint64_t)&v641[v640] >= v620)
            v215 = v200;
          else
            v215 = 0;
          v12 = &v213[v215];
          v25 += v640 + v214;
          v201 = &v213[v215];
          v641 += v640 + v214;
        }
        else
        {
          v13 += v640;
          v12 += v623;
        }
        v16 += v202 + v622;
        v14 += v202 + v621;
        result = v619;
        v7 += v619;
        --v10;
      }
      while (v10);
      return result;
    case 10:
      v216 = v24;
      v217 = v8;
      v218 = v21;
      v219 = -(v640 * v21);
      v220 = -(uint64_t)v20;
      v221 = -(v623 * v218);
      v222 = v12;
      do
      {
        v223 = 0;
        v224 = v624;
        do
        {
          if (*(_BYTE *)(v16 + v223))
          {
            v225 = *v13;
            v226 = *v12;
            v227 = (v225 | (v226 << 16)) * (*(unsigned __int8 *)(v16 + v223) ^ 0xFF)
                 + 65537
                 + ((((v225 | (v226 << 16)) * (*(unsigned __int8 *)(v16 + v223) ^ 0xFFu)) >> 8) & 0xFF00FF);
            v228 = (v225 | (v226 << 24)) - (v227 & 0xFF000000 | BYTE1(v227));
            v229 = (HIBYTE(v228) ^ 0xFF) * (*(unsigned __int8 *)(v14 + v223) | (*v7 << 16))
                 + (v228 | (HIBYTE(v228) << 16)) * (*v7 ^ 0xFF);
            v230 = v229 + 65537 + ((v229 >> 8) & 0xFF00FF);
            *(_BYTE *)(v14 + v223) = BYTE1(v230);
            *v7 = HIBYTE(v230);
          }
          v7 += v217;
          if ((unint64_t)&v13[v216] >= v25)
            v231 = v220;
          else
            v231 = 0;
          v12 += v19 + v231;
          v13 += v216 + v231;
          v223 += v216;
          --v224;
        }
        while (v224);
        if (v620)
        {
          v232 = &v222[v623];
          if ((unint64_t)&v641[v640] >= v620)
            v233 = v219;
          else
            v233 = 0;
          v13 = &v641[v640 + v233];
          if ((unint64_t)&v641[v640] >= v620)
            v234 = v221;
          else
            v234 = 0;
          v12 = &v232[v234];
          v25 += v640 + v233;
          v222 = &v232[v234];
          v641 += v640 + v233;
        }
        else
        {
          v13 += v640;
          v12 += v623;
        }
        result = v14 + v223;
        v16 += v223 + v622;
        v14 += v223 + v621;
        v7 += v619;
        --v10;
      }
      while (v10);
      return result;
    case 11:
      v235 = v24;
      if (v8)
      {
        v236 = v21;
        v237 = -(v640 * v21);
        v238 = -(v623 * v236);
        v239 = v12;
        v240 = -(uint64_t)v20;
        do
        {
          v241 = 0;
          v242 = v624;
          do
          {
            if (*(_BYTE *)(v16 + v241))
            {
              if (v19)
                v243 = *v12;
              else
                v243 = 255;
              v244 = *v13;
              v245 = (v244 | (v243 << 16)) * (*(unsigned __int8 *)(v16 + v241) ^ 0xFF)
                   + 65537
                   + ((((v244 | (v243 << 16)) * (*(unsigned __int8 *)(v16 + v241) ^ 0xFFu)) >> 8) & 0xFF00FF);
              v246 = (v244 | (v243 << 24)) - (v245 & 0xFF000000 | BYTE1(v245));
              v247 = ((*v7 - *(_BYTE *)(v14 + v241)) | (*v7 << 16))
                   + (HIBYTE(v246) << 16)
                   + (HIBYTE(v246) - v246);
              v248 = (255 * ((v247 >> 8) & 0x10001)) | v247;
              *(_BYTE *)(v14 + v241) = BYTE2(v248) - v248;
              *v7 = BYTE2(v248);
            }
            v7 += v8;
            if ((unint64_t)&v13[v235] >= v25)
              v249 = v240;
            else
              v249 = 0;
            v12 += v19 + v249;
            v13 += v235 + v249;
            v241 += v235;
            --v242;
          }
          while (v242);
          if (v620)
          {
            v250 = &v239[v623];
            if ((unint64_t)&v641[v640] >= v620)
              v251 = v237;
            else
              v251 = 0;
            v13 = &v641[v640 + v251];
            if ((unint64_t)&v641[v640] >= v620)
              v252 = v238;
            else
              v252 = 0;
            v12 = &v250[v252];
            v25 += v640 + v251;
            v239 = &v250[v252];
            v641 += v640 + v251;
          }
          else
          {
            v13 += v640;
            v12 += v623;
          }
          result = v14 + v241;
          v16 += v241 + v622;
          v14 += v241 + v621;
          v7 += v619;
          --v10;
        }
        while (v10);
      }
      else
      {
        v520 = -(uint64_t)v20;
        v521 = v21;
        v522 = -(v640 * v21);
        v523 = -(v623 * v521);
        v524 = v12;
        do
        {
          v525 = 0;
          v526 = v624;
          do
          {
            if (*(_BYTE *)(v16 + v525))
            {
              if (v19)
                v527 = *v12;
              else
                v527 = 255;
              v528 = *v13;
              v529 = (v528 | (v527 << 16)) * (*(unsigned __int8 *)(v16 + v525) ^ 0xFF)
                   + 65537
                   + ((((v528 | (v527 << 16)) * (*(unsigned __int8 *)(v16 + v525) ^ 0xFFu)) >> 8) & 0xFF00FF);
              v530 = (*(unsigned __int8 *)(v14 + v525) ^ 0xFF)
                   - (v528 - BYTE1(v529))
                   + (((v528 | (v527 << 24)) - (v529 & 0xFF000000 | BYTE1(v529))) >> 24);
              v531 = BYTE1(v530) | (2 * BYTE1(v530)) | (4 * (BYTE1(v530) | (2 * BYTE1(v530))));
              *(_BYTE *)(v14 + v525) = ~(v530 | (16 * v531) | v531);
            }
            if ((unint64_t)&v13[v235] >= v25)
              v532 = v520;
            else
              v532 = 0;
            v12 += v19 + v532;
            v13 += v235 + v532;
            v525 += v235;
            --v526;
          }
          while (v526);
          if (v620)
          {
            v533 = &v524[v623];
            if ((unint64_t)&v641[v640] >= v620)
              v534 = v522;
            else
              v534 = 0;
            v13 = &v641[v640 + v534];
            if ((unint64_t)&v641[v640] >= v620)
              v535 = v523;
            else
              v535 = 0;
            v12 = &v533[v535];
            v25 += v640 + v534;
            v524 = &v533[v535];
            v641 += v640 + v534;
          }
          else
          {
            v13 += v640;
            v12 += v623;
          }
          result = v622;
          v16 += v525 + v622;
          v14 += v525 + v621;
          --v10;
        }
        while (v10);
      }
      return result;
    case 12:
      v253 = v24;
      if (v8)
      {
        v254 = v21;
        v255 = -(v640 * v21);
        v256 = -(v623 * v254);
        v257 = v12;
        v258 = -(uint64_t)v20;
        do
        {
          v259 = 0;
          v260 = v624;
          do
          {
            if (*(_BYTE *)(v16 + v259))
            {
              if (v19)
                v261 = *v12;
              else
                v261 = 255;
              v262 = *v13;
              v263 = (v262 | (v261 << 16)) * (*(unsigned __int8 *)(v16 + v259) ^ 0xFF)
                   + 65537
                   + ((((v262 | (v261 << 16)) * (*(unsigned __int8 *)(v16 + v259) ^ 0xFFu)) >> 8) & 0xFF00FF);
              v264 = (v262 | (v261 << 24)) - (v263 & 0xFF000000 | BYTE1(v263));
              v265 = (*(unsigned __int8 *)(v14 + v259) | (*v7 << 16))
                   + v264
                   + (HIBYTE(v264) << 16);
              v266 = (255 * ((v265 >> 8) & 0x10001)) | v265;
              *(_BYTE *)(v14 + v259) = v266;
              *v7 = BYTE2(v266);
            }
            v7 += v8;
            if ((unint64_t)&v13[v253] >= v25)
              v267 = v258;
            else
              v267 = 0;
            v12 += v19 + v267;
            v13 += v253 + v267;
            v259 += v253;
            --v260;
          }
          while (v260);
          if (v620)
          {
            v268 = &v257[v623];
            if ((unint64_t)&v641[v640] >= v620)
              v269 = v255;
            else
              v269 = 0;
            v13 = &v641[v640 + v269];
            if ((unint64_t)&v641[v640] >= v620)
              v270 = v256;
            else
              v270 = 0;
            v12 = &v268[v270];
            v25 += v640 + v269;
            v257 = &v268[v270];
            v641 += v640 + v269;
          }
          else
          {
            v13 += v640;
            v12 += v623;
          }
          result = v14 + v259;
          v16 += v259 + v622;
          v14 += v259 + v621;
          v7 += v619;
          --v10;
        }
        while (v10);
      }
      else
      {
        v536 = -(uint64_t)v20;
        v537 = -(v640 * v21);
        do
        {
          v538 = 0;
          v539 = v624;
          do
          {
            if (*(_BYTE *)(v16 + v538))
            {
              v540 = *(unsigned __int8 *)(v14 + v538)
                   + (*v13
                                     - ((unsigned __int16)(*v13
                                                         * (*(unsigned __int8 *)(v16 + v538) ^ 0xFF)
                                                         + ((*v13
                                                           * (*(unsigned __int8 *)(v16 + v538) ^ 0xFFu)) >> 8)
                                                         + 1) >> 8));
              *(_BYTE *)(v14 + v538) = -(v540 >> 8) | v540;
            }
            if ((unint64_t)&v13[v24] >= v25)
              v541 = v536;
            else
              v541 = 0;
            v13 += v24 + v541;
            v538 += v24;
            --v539;
          }
          while (v539);
          v16 += v538 + v622;
          v14 += v538 + v621;
          v542 = v641;
          if ((unint64_t)&v641[v640] >= v620)
            v543 = v537;
          else
            v543 = 0;
          v544 = &v641[v640 + v543];
          v545 = v25 + v640 + v543;
          if (v620)
            v542 = v544;
          v641 = v542;
          if (v620)
          {
            v25 = v545;
            v13 = v544;
          }
          else
          {
            v13 += v640;
          }
          --v10;
        }
        while (v10);
      }
      return result;
    case 13:
      v271 = v24;
      v272 = v8;
      v273 = v19;
      v274 = -(uint64_t)v20;
      v559 = -(v623 * v21);
      v574 = -(v640 * v21);
      v589 = v12;
      v604 = v8;
      do
      {
        v625 = v10;
        v275 = 0;
        v276 = v624;
        v644 = v14;
        do
        {
          if (*(_BYTE *)(v16 + v275))
          {
            v277 = v19 ? *v12 : 255;
            v278 = *v13;
            v279 = (v278 | (v277 << 16)) * (*(unsigned __int8 *)(v16 + v275) ^ 0xFF)
                 + 65537
                 + ((((v278 | (v277 << 16)) * (*(unsigned __int8 *)(v16 + v275) ^ 0xFFu)) >> 8) & 0xFF00FF);
            result = (v278 | (v277 << 24)) - (v279 & 0xFF000000 | BYTE1(v279));
            v280 = BYTE3(result);
            if (BYTE3(result))
            {
              if (v8)
              {
                if (*v7)
                {
                  result = PDAmultiplyPDA_15922(*(unsigned __int8 *)(v14 + v275), *v7, (v278- ((unsigned __int16)(v278 * (*(unsigned __int8 *)(v16 + v275) ^ 0xFF)+ 1+ ((unsigned __int16)(v278 * (*(unsigned __int8 *)(v16 + v275) ^ 0xFF)) >> 8)) >> 8)), v280);
                  v272 = v604;
                  v8 = v642;
                  v19 = v643;
                  v14 = v644;
                  v280 = BYTE3(result);
                }
                *(_BYTE *)(v14 + v275) = result;
                *v7 = v280;
              }
              else
              {
                result = PDAmultiplyPDA_15922(*(unsigned __int8 *)(v14 + v275), 255, (v278- ((unsigned __int16)(v278 * (*(unsigned __int8 *)(v16 + v275) ^ 0xFF)+ 1+ ((unsigned __int16)(v278 * (*(unsigned __int8 *)(v16 + v275) ^ 0xFF)) >> 8)) >> 8)), v280);
                v272 = v604;
                v8 = v642;
                v19 = v643;
                v14 = v644;
                *(_BYTE *)(v644 + v275) = result;
              }
            }
          }
          v7 += v272;
          if ((unint64_t)&v13[v271] >= v25)
            v281 = v274;
          else
            v281 = 0;
          v12 += v273 + v281;
          v13 += v271 + v281;
          v275 += v271;
          --v276;
        }
        while (v276);
        if (v620)
        {
          v282 = v574;
          if ((unint64_t)&v641[v640] < v620)
            v282 = 0;
          v13 = &v641[v640 + v282];
          v283 = v559;
          if ((unint64_t)&v641[v640] < v620)
            v283 = 0;
          v12 = &v589[v623 + v283];
          v25 += v640 + v282;
          v589 = v12;
          v641 += v640 + v282;
        }
        else
        {
          v13 += v640;
          v12 += v623;
        }
        v16 += v275 + v622;
        v14 += v275 + v621;
        v7 += v619;
        v10 = v625 - 1;
      }
      while (v625 != 1);
      return result;
    case 14:
      v284 = v24;
      v285 = v8;
      v286 = v19;
      v287 = -(uint64_t)v20;
      v560 = -(v623 * v21);
      v575 = -(v640 * v21);
      v590 = v12;
      v605 = v8;
      do
      {
        v626 = v10;
        v288 = 0;
        v289 = v624;
        v645 = v14;
        do
        {
          if (*(_BYTE *)(v16 + v288))
          {
            v290 = v19 ? *v12 : 255;
            v291 = *v13;
            v292 = (v291 | (v290 << 16)) * (*(unsigned __int8 *)(v16 + v288) ^ 0xFF)
                 + 65537
                 + ((((v291 | (v290 << 16)) * (*(unsigned __int8 *)(v16 + v288) ^ 0xFFu)) >> 8) & 0xFF00FF);
            result = (v291 | (v290 << 24)) - (v292 & 0xFF000000 | BYTE1(v292));
            v293 = BYTE3(result);
            if (BYTE3(result))
            {
              if (v8)
              {
                if (*v7)
                {
                  result = PDAscreenPDA_15923(*(unsigned __int8 *)(v14 + v288), *v7, (v291- ((unsigned __int16)(v291 * (*(unsigned __int8 *)(v16 + v288) ^ 0xFF)+ 1+ ((unsigned __int16)(v291 * (*(unsigned __int8 *)(v16 + v288) ^ 0xFF)) >> 8)) >> 8)), v293);
                  v285 = v605;
                  v8 = v642;
                  v19 = v643;
                  v14 = v645;
                  v293 = BYTE3(result);
                }
                *(_BYTE *)(v14 + v288) = result;
                *v7 = v293;
              }
              else
              {
                result = PDAscreenPDA_15923(*(unsigned __int8 *)(v14 + v288), 255, (v291- ((unsigned __int16)(v291 * (*(unsigned __int8 *)(v16 + v288) ^ 0xFF)+ 1+ ((unsigned __int16)(v291 * (*(unsigned __int8 *)(v16 + v288) ^ 0xFF)) >> 8)) >> 8)), v293);
                v285 = v605;
                v8 = v642;
                v19 = v643;
                v14 = v645;
                *(_BYTE *)(v645 + v288) = result;
              }
            }
          }
          v7 += v285;
          if ((unint64_t)&v13[v284] >= v25)
            v294 = v287;
          else
            v294 = 0;
          v12 += v286 + v294;
          v13 += v284 + v294;
          v288 += v284;
          --v289;
        }
        while (v289);
        if (v620)
        {
          v295 = v575;
          if ((unint64_t)&v641[v640] < v620)
            v295 = 0;
          v13 = &v641[v640 + v295];
          v296 = v560;
          if ((unint64_t)&v641[v640] < v620)
            v296 = 0;
          v12 = &v590[v623 + v296];
          v25 += v640 + v295;
          v590 = v12;
          v641 += v640 + v295;
        }
        else
        {
          v13 += v640;
          v12 += v623;
        }
        v16 += v288 + v622;
        v14 += v288 + v621;
        v7 += v619;
        v10 = v626 - 1;
      }
      while (v626 != 1);
      return result;
    case 15:
      v297 = v24;
      v298 = v8;
      v299 = v19;
      v300 = -(uint64_t)v20;
      v561 = -(v623 * v21);
      v576 = -(v640 * v21);
      v591 = v12;
      v606 = v8;
      do
      {
        v627 = v10;
        v301 = 0;
        v302 = v624;
        v646 = v14;
        do
        {
          if (*(_BYTE *)(v16 + v301))
          {
            v303 = v19 ? *v12 : 255;
            v304 = *v13;
            v305 = (v304 | (v303 << 16)) * (*(unsigned __int8 *)(v16 + v301) ^ 0xFF)
                 + 65537
                 + ((((v304 | (v303 << 16)) * (*(unsigned __int8 *)(v16 + v301) ^ 0xFFu)) >> 8) & 0xFF00FF);
            result = (v304 | (v303 << 24)) - (v305 & 0xFF000000 | BYTE1(v305));
            v306 = BYTE3(result);
            if (BYTE3(result))
            {
              if (v8)
              {
                if (*v7)
                {
                  result = PDAoverlayPDA_15924(*(unsigned __int8 *)(v14 + v301), *v7, (v304- ((unsigned __int16)(v304 * (*(unsigned __int8 *)(v16 + v301) ^ 0xFF)+ 1+ ((unsigned __int16)(v304 * (*(unsigned __int8 *)(v16 + v301) ^ 0xFF)) >> 8)) >> 8)), v306);
                  v298 = v606;
                  v8 = v642;
                  v19 = v643;
                  v14 = v646;
                  v306 = BYTE3(result);
                }
                *(_BYTE *)(v14 + v301) = result;
                *v7 = v306;
              }
              else
              {
                result = PDAoverlayPDA_15924(*(unsigned __int8 *)(v14 + v301), 0xFFu, (v304- ((unsigned __int16)(v304 * (*(unsigned __int8 *)(v16 + v301) ^ 0xFF)+ 1+ ((unsigned __int16)(v304 * (*(unsigned __int8 *)(v16 + v301) ^ 0xFF)) >> 8)) >> 8)), v306);
                v298 = v606;
                v8 = v642;
                v19 = v643;
                v14 = v646;
                *(_BYTE *)(v646 + v301) = result;
              }
            }
          }
          v7 += v298;
          if ((unint64_t)&v13[v297] >= v25)
            v307 = v300;
          else
            v307 = 0;
          v12 += v299 + v307;
          v13 += v297 + v307;
          v301 += v297;
          --v302;
        }
        while (v302);
        if (v620)
        {
          v308 = v576;
          if ((unint64_t)&v641[v640] < v620)
            v308 = 0;
          v13 = &v641[v640 + v308];
          v309 = v561;
          if ((unint64_t)&v641[v640] < v620)
            v309 = 0;
          v12 = &v591[v623 + v309];
          v25 += v640 + v308;
          v591 = v12;
          v641 += v640 + v308;
        }
        else
        {
          v13 += v640;
          v12 += v623;
        }
        v16 += v301 + v622;
        v14 += v301 + v621;
        v7 += v619;
        v10 = v627 - 1;
      }
      while (v627 != 1);
      return result;
    case 16:
      v310 = v24;
      v311 = v8;
      v312 = v19;
      v313 = -(uint64_t)v20;
      v562 = -(v623 * v21);
      v577 = -(v640 * v21);
      v592 = v12;
      v607 = v8;
      do
      {
        v628 = v10;
        v314 = 0;
        v315 = v624;
        v647 = v14;
        do
        {
          if (*(_BYTE *)(v16 + v314))
          {
            v316 = v19 ? *v12 : 255;
            v317 = *v13;
            v318 = (v317 | (v316 << 16)) * (*(unsigned __int8 *)(v16 + v314) ^ 0xFF)
                 + 65537
                 + ((((v317 | (v316 << 16)) * (*(unsigned __int8 *)(v16 + v314) ^ 0xFFu)) >> 8) & 0xFF00FF);
            result = (v317 | (v316 << 24)) - (v318 & 0xFF000000 | BYTE1(v318));
            v319 = BYTE3(result);
            if (BYTE3(result))
            {
              if (v8)
              {
                if (*v7)
                {
                  result = PDAdarkenPDA_15926(*(unsigned __int8 *)(v14 + v314), *v7, (v317- ((unsigned __int16)(v317 * (*(unsigned __int8 *)(v16 + v314) ^ 0xFF)+ 1+ ((unsigned __int16)(v317 * (*(unsigned __int8 *)(v16 + v314) ^ 0xFF)) >> 8)) >> 8)), v319);
                  v311 = v607;
                  v8 = v642;
                  v19 = v643;
                  v14 = v647;
                  v319 = BYTE3(result);
                }
                *(_BYTE *)(v14 + v314) = result;
                *v7 = v319;
              }
              else
              {
                result = PDAdarkenPDA_15926(*(unsigned __int8 *)(v14 + v314), 0xFFu, (v317- ((unsigned __int16)(v317 * (*(unsigned __int8 *)(v16 + v314) ^ 0xFF)+ 1+ ((unsigned __int16)(v317 * (*(unsigned __int8 *)(v16 + v314) ^ 0xFF)) >> 8)) >> 8)), v319);
                v311 = v607;
                v8 = v642;
                v19 = v643;
                v14 = v647;
                *(_BYTE *)(v647 + v314) = result;
              }
            }
          }
          v7 += v311;
          if ((unint64_t)&v13[v310] >= v25)
            v320 = v313;
          else
            v320 = 0;
          v12 += v312 + v320;
          v13 += v310 + v320;
          v314 += v310;
          --v315;
        }
        while (v315);
        if (v620)
        {
          v321 = v577;
          if ((unint64_t)&v641[v640] < v620)
            v321 = 0;
          v13 = &v641[v640 + v321];
          v322 = v562;
          if ((unint64_t)&v641[v640] < v620)
            v322 = 0;
          v12 = &v592[v623 + v322];
          v25 += v640 + v321;
          v592 = v12;
          v641 += v640 + v321;
        }
        else
        {
          v13 += v640;
          v12 += v623;
        }
        v16 += v314 + v622;
        v14 += v314 + v621;
        v7 += v619;
        v10 = v628 - 1;
      }
      while (v628 != 1);
      return result;
    case 17:
      v323 = v24;
      v324 = v8;
      v325 = v19;
      v326 = -(uint64_t)v20;
      v563 = -(v623 * v21);
      v578 = -(v640 * v21);
      v593 = v12;
      v608 = v8;
      do
      {
        v629 = v10;
        v327 = 0;
        v328 = v624;
        v648 = v14;
        do
        {
          if (*(_BYTE *)(v16 + v327))
          {
            v329 = v19 ? *v12 : 255;
            v330 = *v13;
            v331 = (v330 | (v329 << 16)) * (*(unsigned __int8 *)(v16 + v327) ^ 0xFF)
                 + 65537
                 + ((((v330 | (v329 << 16)) * (*(unsigned __int8 *)(v16 + v327) ^ 0xFFu)) >> 8) & 0xFF00FF);
            result = (v330 | (v329 << 24)) - (v331 & 0xFF000000 | BYTE1(v331));
            v332 = BYTE3(result);
            if (BYTE3(result))
            {
              if (v8)
              {
                if (*v7)
                {
                  result = PDAlightenPDA_15925(*(unsigned __int8 *)(v14 + v327), *v7, (v330- ((unsigned __int16)(v330 * (*(unsigned __int8 *)(v16 + v327) ^ 0xFF)+ 1+ ((unsigned __int16)(v330 * (*(unsigned __int8 *)(v16 + v327) ^ 0xFF)) >> 8)) >> 8)), v332);
                  v324 = v608;
                  v8 = v642;
                  v19 = v643;
                  v14 = v648;
                  v332 = BYTE3(result);
                }
                *(_BYTE *)(v14 + v327) = result;
                *v7 = v332;
              }
              else
              {
                result = PDAlightenPDA_15925(*(unsigned __int8 *)(v14 + v327), 0xFFu, (v330- ((unsigned __int16)(v330 * (*(unsigned __int8 *)(v16 + v327) ^ 0xFF)+ 1+ ((unsigned __int16)(v330 * (*(unsigned __int8 *)(v16 + v327) ^ 0xFF)) >> 8)) >> 8)), v332);
                v324 = v608;
                v8 = v642;
                v19 = v643;
                v14 = v648;
                *(_BYTE *)(v648 + v327) = result;
              }
            }
          }
          v7 += v324;
          if ((unint64_t)&v13[v323] >= v25)
            v333 = v326;
          else
            v333 = 0;
          v12 += v325 + v333;
          v13 += v323 + v333;
          v327 += v323;
          --v328;
        }
        while (v328);
        if (v620)
        {
          v334 = v578;
          if ((unint64_t)&v641[v640] < v620)
            v334 = 0;
          v13 = &v641[v640 + v334];
          v335 = v563;
          if ((unint64_t)&v641[v640] < v620)
            v335 = 0;
          v12 = &v593[v623 + v335];
          v25 += v640 + v334;
          v593 = v12;
          v641 += v640 + v334;
        }
        else
        {
          v13 += v640;
          v12 += v623;
        }
        v16 += v327 + v622;
        v14 += v327 + v621;
        v7 += v619;
        v10 = v629 - 1;
      }
      while (v629 != 1);
      return result;
    case 18:
      v336 = v24;
      v337 = v8;
      v338 = v19;
      v339 = -(uint64_t)v20;
      v564 = -(v623 * v21);
      v579 = -(v640 * v21);
      v594 = v12;
      v609 = v8;
      do
      {
        v630 = v10;
        v340 = 0;
        v341 = v624;
        v649 = v14;
        do
        {
          if (*(_BYTE *)(v16 + v340))
          {
            v342 = v19 ? *v12 : 255;
            v343 = *v13;
            v344 = (v343 | (v342 << 16)) * (*(unsigned __int8 *)(v16 + v340) ^ 0xFF)
                 + 65537
                 + ((((v343 | (v342 << 16)) * (*(unsigned __int8 *)(v16 + v340) ^ 0xFFu)) >> 8) & 0xFF00FF);
            result = (v343 | (v342 << 24)) - (v344 & 0xFF000000 | BYTE1(v344));
            v345 = BYTE3(result);
            if (BYTE3(result))
            {
              if (v8)
              {
                if (*v7)
                {
                  result = PDAcolordodgePDA_15927(*(unsigned __int8 *)(v14 + v340), *v7, (v343- ((unsigned __int16)(v343 * (*(unsigned __int8 *)(v16 + v340) ^ 0xFF)+ 1+ ((unsigned __int16)(v343 * (*(unsigned __int8 *)(v16 + v340) ^ 0xFF)) >> 8)) >> 8)), v345);
                  v337 = v609;
                  v8 = v642;
                  v19 = v643;
                  v14 = v649;
                  v345 = BYTE3(result);
                }
                *(_BYTE *)(v14 + v340) = result;
                *v7 = v345;
              }
              else
              {
                result = PDAcolordodgePDA_15927(*(unsigned __int8 *)(v14 + v340), 0xFFu, (v343- ((unsigned __int16)(v343 * (*(unsigned __int8 *)(v16 + v340) ^ 0xFF)+ 1+ ((unsigned __int16)(v343 * (*(unsigned __int8 *)(v16 + v340) ^ 0xFF)) >> 8)) >> 8)), v345);
                v337 = v609;
                v8 = v642;
                v19 = v643;
                v14 = v649;
                *(_BYTE *)(v649 + v340) = result;
              }
            }
          }
          v7 += v337;
          if ((unint64_t)&v13[v336] >= v25)
            v346 = v339;
          else
            v346 = 0;
          v12 += v338 + v346;
          v13 += v336 + v346;
          v340 += v336;
          --v341;
        }
        while (v341);
        if (v620)
        {
          v347 = v579;
          if ((unint64_t)&v641[v640] < v620)
            v347 = 0;
          v13 = &v641[v640 + v347];
          v348 = v564;
          if ((unint64_t)&v641[v640] < v620)
            v348 = 0;
          v12 = &v594[v623 + v348];
          v25 += v640 + v347;
          v594 = v12;
          v641 += v640 + v347;
        }
        else
        {
          v13 += v640;
          v12 += v623;
        }
        v16 += v340 + v622;
        v14 += v340 + v621;
        v7 += v619;
        v10 = v630 - 1;
      }
      while (v630 != 1);
      return result;
    case 19:
      v349 = v24;
      v350 = v8;
      v351 = v19;
      v352 = -(uint64_t)v20;
      v565 = -(v623 * v21);
      v580 = -(v640 * v21);
      v595 = v12;
      v610 = v8;
      do
      {
        v631 = v10;
        v353 = 0;
        v354 = v624;
        v650 = v14;
        do
        {
          if (*(_BYTE *)(v16 + v353))
          {
            v355 = v19 ? *v12 : 255;
            v356 = *v13;
            v357 = (v356 | (v355 << 16)) * (*(unsigned __int8 *)(v16 + v353) ^ 0xFF)
                 + 65537
                 + ((((v356 | (v355 << 16)) * (*(unsigned __int8 *)(v16 + v353) ^ 0xFFu)) >> 8) & 0xFF00FF);
            result = (v356 | (v355 << 24)) - (v357 & 0xFF000000 | BYTE1(v357));
            v358 = BYTE3(result);
            if (BYTE3(result))
            {
              if (v8)
              {
                if (*v7)
                {
                  result = PDAcolorburnPDA_15928(*(unsigned __int8 *)(v14 + v353), *v7, (v356- ((unsigned __int16)(v356 * (*(unsigned __int8 *)(v16 + v353) ^ 0xFF)+ 1+ ((unsigned __int16)(v356 * (*(unsigned __int8 *)(v16 + v353) ^ 0xFF)) >> 8)) >> 8)), v358);
                  v350 = v610;
                  v8 = v642;
                  v19 = v643;
                  v14 = v650;
                  v358 = BYTE3(result);
                }
                *(_BYTE *)(v14 + v353) = result;
                *v7 = v358;
              }
              else
              {
                result = PDAcolorburnPDA_15928(*(unsigned __int8 *)(v14 + v353), 0xFFu, (v356- ((unsigned __int16)(v356 * (*(unsigned __int8 *)(v16 + v353) ^ 0xFF)+ 1+ ((unsigned __int16)(v356 * (*(unsigned __int8 *)(v16 + v353) ^ 0xFF)) >> 8)) >> 8)), v358);
                v350 = v610;
                v8 = v642;
                v19 = v643;
                v14 = v650;
                *(_BYTE *)(v650 + v353) = result;
              }
            }
          }
          v7 += v350;
          if ((unint64_t)&v13[v349] >= v25)
            v359 = v352;
          else
            v359 = 0;
          v12 += v351 + v359;
          v13 += v349 + v359;
          v353 += v349;
          --v354;
        }
        while (v354);
        if (v620)
        {
          v360 = v580;
          if ((unint64_t)&v641[v640] < v620)
            v360 = 0;
          v13 = &v641[v640 + v360];
          v361 = v565;
          if ((unint64_t)&v641[v640] < v620)
            v361 = 0;
          v12 = &v595[v623 + v361];
          v25 += v640 + v360;
          v595 = v12;
          v641 += v640 + v360;
        }
        else
        {
          v13 += v640;
          v12 += v623;
        }
        v16 += v353 + v622;
        v14 += v353 + v621;
        v7 += v619;
        v10 = v631 - 1;
      }
      while (v631 != 1);
      return result;
    case 20:
      v362 = v24;
      v363 = v8;
      v364 = v19;
      v365 = -(uint64_t)v20;
      v566 = -(v623 * v21);
      v581 = -(v640 * v21);
      v596 = v12;
      v611 = v8;
      do
      {
        v632 = v10;
        v366 = 0;
        v367 = v624;
        v651 = v14;
        do
        {
          if (*(_BYTE *)(v16 + v366))
          {
            v368 = v19 ? *v12 : 255;
            v369 = *v13;
            v370 = (v369 | (v368 << 16)) * (*(unsigned __int8 *)(v16 + v366) ^ 0xFF)
                 + 65537
                 + ((((v369 | (v368 << 16)) * (*(unsigned __int8 *)(v16 + v366) ^ 0xFFu)) >> 8) & 0xFF00FF);
            result = (v369 | (v368 << 24)) - (v370 & 0xFF000000 | BYTE1(v370));
            v371 = BYTE3(result);
            if (BYTE3(result))
            {
              if (v8)
              {
                if (*v7)
                {
                  result = PDAsoftlightPDA_15930(*(unsigned __int8 *)(v14 + v366), *v7, (v369- ((unsigned __int16)(v369 * (*(unsigned __int8 *)(v16 + v366) ^ 0xFF)+ 1+ ((unsigned __int16)(v369 * (*(unsigned __int8 *)(v16 + v366) ^ 0xFF)) >> 8)) >> 8)), v371);
                  v363 = v611;
                  v8 = v642;
                  v19 = v643;
                  v14 = v651;
                  v371 = BYTE3(result);
                }
                *(_BYTE *)(v14 + v366) = result;
                *v7 = v371;
              }
              else
              {
                result = PDAsoftlightPDA_15930(*(unsigned __int8 *)(v14 + v366), 0xFFu, (v369- ((unsigned __int16)(v369 * (*(unsigned __int8 *)(v16 + v366) ^ 0xFF)+ 1+ ((unsigned __int16)(v369 * (*(unsigned __int8 *)(v16 + v366) ^ 0xFF)) >> 8)) >> 8)), v371);
                v363 = v611;
                v8 = v642;
                v19 = v643;
                v14 = v651;
                *(_BYTE *)(v651 + v366) = result;
              }
            }
          }
          v7 += v363;
          if ((unint64_t)&v13[v362] >= v25)
            v372 = v365;
          else
            v372 = 0;
          v12 += v364 + v372;
          v13 += v362 + v372;
          v366 += v362;
          --v367;
        }
        while (v367);
        if (v620)
        {
          v373 = v581;
          if ((unint64_t)&v641[v640] < v620)
            v373 = 0;
          v13 = &v641[v640 + v373];
          v374 = v566;
          if ((unint64_t)&v641[v640] < v620)
            v374 = 0;
          v12 = &v596[v623 + v374];
          v25 += v640 + v373;
          v596 = v12;
          v641 += v640 + v373;
        }
        else
        {
          v13 += v640;
          v12 += v623;
        }
        v16 += v366 + v622;
        v14 += v366 + v621;
        v7 += v619;
        v10 = v632 - 1;
      }
      while (v632 != 1);
      return result;
    case 21:
      v375 = v24;
      v376 = v8;
      v377 = v19;
      v378 = -(uint64_t)v20;
      v567 = -(v623 * v21);
      v582 = -(v640 * v21);
      v597 = v12;
      v612 = v8;
      do
      {
        v633 = v10;
        v379 = 0;
        v380 = v624;
        v652 = v14;
        do
        {
          if (*(_BYTE *)(v16 + v379))
          {
            v381 = v19 ? *v12 : 255;
            v382 = *v13;
            v383 = (v382 | (v381 << 16)) * (*(unsigned __int8 *)(v16 + v379) ^ 0xFF)
                 + 65537
                 + ((((v382 | (v381 << 16)) * (*(unsigned __int8 *)(v16 + v379) ^ 0xFFu)) >> 8) & 0xFF00FF);
            result = (v382 | (v381 << 24)) - (v383 & 0xFF000000 | BYTE1(v383));
            v384 = BYTE3(result);
            if (BYTE3(result))
            {
              if (v8)
              {
                if (*v7)
                {
                  result = PDAhardlightPDA_15929(*(unsigned __int8 *)(v14 + v379), *v7, (v382- ((unsigned __int16)(v382 * (*(unsigned __int8 *)(v16 + v379) ^ 0xFF)+ 1+ ((unsigned __int16)(v382 * (*(unsigned __int8 *)(v16 + v379) ^ 0xFF)) >> 8)) >> 8)), v384);
                  v376 = v612;
                  v8 = v642;
                  v19 = v643;
                  v14 = v652;
                  v384 = BYTE3(result);
                }
                *(_BYTE *)(v14 + v379) = result;
                *v7 = v384;
              }
              else
              {
                result = PDAhardlightPDA_15929(*(unsigned __int8 *)(v14 + v379), 0xFFu, (v382- ((unsigned __int16)(v382 * (*(unsigned __int8 *)(v16 + v379) ^ 0xFF)+ 1+ ((unsigned __int16)(v382 * (*(unsigned __int8 *)(v16 + v379) ^ 0xFF)) >> 8)) >> 8)), v384);
                v376 = v612;
                v8 = v642;
                v19 = v643;
                v14 = v652;
                *(_BYTE *)(v652 + v379) = result;
              }
            }
          }
          v7 += v376;
          if ((unint64_t)&v13[v375] >= v25)
            v385 = v378;
          else
            v385 = 0;
          v12 += v377 + v385;
          v13 += v375 + v385;
          v379 += v375;
          --v380;
        }
        while (v380);
        if (v620)
        {
          v386 = v582;
          if ((unint64_t)&v641[v640] < v620)
            v386 = 0;
          v13 = &v641[v640 + v386];
          v387 = v567;
          if ((unint64_t)&v641[v640] < v620)
            v387 = 0;
          v12 = &v597[v623 + v387];
          v25 += v640 + v386;
          v597 = v12;
          v641 += v640 + v386;
        }
        else
        {
          v13 += v640;
          v12 += v623;
        }
        v16 += v379 + v622;
        v14 += v379 + v621;
        v7 += v619;
        v10 = v633 - 1;
      }
      while (v633 != 1);
      return result;
    case 22:
      v388 = v24;
      v389 = v8;
      v390 = v19;
      v391 = -(uint64_t)v20;
      v568 = -(v623 * v21);
      v583 = -(v640 * v21);
      v598 = v12;
      v613 = v8;
      do
      {
        v634 = v10;
        v392 = 0;
        v393 = v624;
        v653 = v14;
        do
        {
          if (*(_BYTE *)(v16 + v392))
          {
            v394 = v19 ? *v12 : 255;
            v395 = *v13;
            v396 = (v395 | (v394 << 16)) * (*(unsigned __int8 *)(v16 + v392) ^ 0xFF)
                 + 65537
                 + ((((v395 | (v394 << 16)) * (*(unsigned __int8 *)(v16 + v392) ^ 0xFFu)) >> 8) & 0xFF00FF);
            result = (v395 | (v394 << 24)) - (v396 & 0xFF000000 | BYTE1(v396));
            v397 = BYTE3(result);
            if (BYTE3(result))
            {
              if (v8)
              {
                if (*v7)
                {
                  result = PDAdifferencePDA_15931(*(unsigned __int8 *)(v14 + v392), *v7, (v395- ((unsigned __int16)(v395 * (*(unsigned __int8 *)(v16 + v392) ^ 0xFF)+ 1+ ((unsigned __int16)(v395 * (*(unsigned __int8 *)(v16 + v392) ^ 0xFF)) >> 8)) >> 8)), v397);
                  v389 = v613;
                  v8 = v642;
                  v19 = v643;
                  v14 = v653;
                  v397 = BYTE3(result);
                }
                *(_BYTE *)(v14 + v392) = result;
                *v7 = v397;
              }
              else
              {
                result = PDAdifferencePDA_15931(*(unsigned __int8 *)(v14 + v392), 0xFFu, (v395- ((unsigned __int16)(v395 * (*(unsigned __int8 *)(v16 + v392) ^ 0xFF)+ 1+ ((unsigned __int16)(v395 * (*(unsigned __int8 *)(v16 + v392) ^ 0xFF)) >> 8)) >> 8)), v397);
                v389 = v613;
                v8 = v642;
                v19 = v643;
                v14 = v653;
                *(_BYTE *)(v653 + v392) = result;
              }
            }
          }
          v7 += v389;
          if ((unint64_t)&v13[v388] >= v25)
            v398 = v391;
          else
            v398 = 0;
          v12 += v390 + v398;
          v13 += v388 + v398;
          v392 += v388;
          --v393;
        }
        while (v393);
        if (v620)
        {
          v399 = v583;
          if ((unint64_t)&v641[v640] < v620)
            v399 = 0;
          v13 = &v641[v640 + v399];
          v400 = v568;
          if ((unint64_t)&v641[v640] < v620)
            v400 = 0;
          v12 = &v598[v623 + v400];
          v25 += v640 + v399;
          v598 = v12;
          v641 += v640 + v399;
        }
        else
        {
          v13 += v640;
          v12 += v623;
        }
        v16 += v392 + v622;
        v14 += v392 + v621;
        v7 += v619;
        v10 = v634 - 1;
      }
      while (v634 != 1);
      return result;
    case 23:
      v401 = v24;
      v402 = v8;
      v403 = v19;
      v404 = -(uint64_t)v20;
      v569 = -(v623 * v21);
      v584 = -(v640 * v21);
      v599 = v12;
      v614 = v8;
      do
      {
        v635 = v10;
        v405 = 0;
        v406 = v624;
        v654 = v14;
        do
        {
          if (*(_BYTE *)(v16 + v405))
          {
            v407 = v19 ? *v12 : 255;
            v408 = *v13;
            v409 = (v408 | (v407 << 16)) * (*(unsigned __int8 *)(v16 + v405) ^ 0xFF)
                 + 65537
                 + ((((v408 | (v407 << 16)) * (*(unsigned __int8 *)(v16 + v405) ^ 0xFFu)) >> 8) & 0xFF00FF);
            result = (v408 | (v407 << 24)) - (v409 & 0xFF000000 | BYTE1(v409));
            v410 = BYTE3(result);
            if (BYTE3(result))
            {
              if (v8)
              {
                if (*v7)
                {
                  result = PDAexclusionPDA_15932(*(unsigned __int8 *)(v14 + v405), *v7, (v408- ((unsigned __int16)(v408 * (*(unsigned __int8 *)(v16 + v405) ^ 0xFF)+ 1+ ((unsigned __int16)(v408 * (*(unsigned __int8 *)(v16 + v405) ^ 0xFF)) >> 8)) >> 8)), v410);
                  v402 = v614;
                  v8 = v642;
                  v19 = v643;
                  v14 = v654;
                  v410 = BYTE3(result);
                }
                *(_BYTE *)(v14 + v405) = result;
                *v7 = v410;
              }
              else
              {
                result = PDAexclusionPDA_15932(*(unsigned __int8 *)(v14 + v405), 0xFFu, (v408- ((unsigned __int16)(v408 * (*(unsigned __int8 *)(v16 + v405) ^ 0xFF)+ 1+ ((unsigned __int16)(v408 * (*(unsigned __int8 *)(v16 + v405) ^ 0xFF)) >> 8)) >> 8)), v410);
                v402 = v614;
                v8 = v642;
                v19 = v643;
                v14 = v654;
                *(_BYTE *)(v654 + v405) = result;
              }
            }
          }
          v7 += v402;
          if ((unint64_t)&v13[v401] >= v25)
            v411 = v404;
          else
            v411 = 0;
          v12 += v403 + v411;
          v13 += v401 + v411;
          v405 += v401;
          --v406;
        }
        while (v406);
        if (v620)
        {
          v412 = v584;
          if ((unint64_t)&v641[v640] < v620)
            v412 = 0;
          v13 = &v641[v640 + v412];
          v413 = v569;
          if ((unint64_t)&v641[v640] < v620)
            v413 = 0;
          v12 = &v599[v623 + v413];
          v25 += v640 + v412;
          v599 = v12;
          v641 += v640 + v412;
        }
        else
        {
          v13 += v640;
          v12 += v623;
        }
        v16 += v405 + v622;
        v14 += v405 + v621;
        v7 += v619;
        v10 = v635 - 1;
      }
      while (v635 != 1);
      return result;
    case 24:
      v414 = v24;
      v415 = v8;
      v416 = v19;
      v417 = -(uint64_t)v20;
      v570 = -(v623 * v21);
      v585 = -(v640 * v21);
      v600 = v12;
      v615 = v8;
      do
      {
        v636 = v10;
        v418 = 0;
        v419 = v624;
        v655 = v14;
        do
        {
          if (*(_BYTE *)(v16 + v418))
          {
            v420 = v19 ? *v12 : 255;
            v421 = *v13;
            v422 = (v421 | (v420 << 16)) * (*(unsigned __int8 *)(v16 + v418) ^ 0xFF)
                 + 65537
                 + ((((v421 | (v420 << 16)) * (*(unsigned __int8 *)(v16 + v418) ^ 0xFFu)) >> 8) & 0xFF00FF);
            result = (v421 | (v420 << 24)) - (v422 & 0xFF000000 | BYTE1(v422));
            v423 = BYTE3(result);
            if (BYTE3(result))
            {
              if (v8)
              {
                if (*v7)
                {
                  result = PDAhuePDA_15933(*(unsigned __int8 *)(v14 + v418), *v7, (v421- ((unsigned __int16)(v421 * (*(unsigned __int8 *)(v16 + v418) ^ 0xFF)+ 1+ ((unsigned __int16)(v421 * (*(unsigned __int8 *)(v16 + v418) ^ 0xFF)) >> 8)) >> 8)), v423);
                  v415 = v615;
                  v8 = v642;
                  v19 = v643;
                  v14 = v655;
                  v423 = BYTE3(result);
                }
                *(_BYTE *)(v14 + v418) = result;
                *v7 = v423;
              }
              else
              {
                result = PDAhuePDA_15933(*(unsigned __int8 *)(v14 + v418), 0xFFu, (v421- ((unsigned __int16)(v421 * (*(unsigned __int8 *)(v16 + v418) ^ 0xFF)+ 1+ ((unsigned __int16)(v421 * (*(unsigned __int8 *)(v16 + v418) ^ 0xFF)) >> 8)) >> 8)), v423);
                v415 = v615;
                v8 = v642;
                v19 = v643;
                v14 = v655;
                *(_BYTE *)(v655 + v418) = result;
              }
            }
          }
          v7 += v415;
          if ((unint64_t)&v13[v414] >= v25)
            v424 = v417;
          else
            v424 = 0;
          v12 += v416 + v424;
          v13 += v414 + v424;
          v418 += v414;
          --v419;
        }
        while (v419);
        if (v620)
        {
          v425 = v585;
          if ((unint64_t)&v641[v640] < v620)
            v425 = 0;
          v13 = &v641[v640 + v425];
          v426 = v570;
          if ((unint64_t)&v641[v640] < v620)
            v426 = 0;
          v12 = &v600[v623 + v426];
          v25 += v640 + v425;
          v600 = v12;
          v641 += v640 + v425;
        }
        else
        {
          v13 += v640;
          v12 += v623;
        }
        v16 += v418 + v622;
        v14 += v418 + v621;
        v7 += v619;
        v10 = v636 - 1;
      }
      while (v636 != 1);
      return result;
    case 25:
      v427 = v24;
      v428 = v8;
      v429 = v19;
      v430 = -(uint64_t)v20;
      v571 = -(v623 * v21);
      v586 = -(v640 * v21);
      v601 = v12;
      v616 = v8;
      do
      {
        v637 = v10;
        v431 = 0;
        v432 = v624;
        v656 = v14;
        do
        {
          if (*(_BYTE *)(v16 + v431))
          {
            v433 = v19 ? *v12 : 255;
            v434 = *v13;
            v435 = (v434 | (v433 << 16)) * (*(unsigned __int8 *)(v16 + v431) ^ 0xFF)
                 + 65537
                 + ((((v434 | (v433 << 16)) * (*(unsigned __int8 *)(v16 + v431) ^ 0xFFu)) >> 8) & 0xFF00FF);
            result = (v434 | (v433 << 24)) - (v435 & 0xFF000000 | BYTE1(v435));
            v436 = BYTE3(result);
            if (BYTE3(result))
            {
              if (v8)
              {
                if (*v7)
                {
                  result = PDAhuePDA_15933(*(unsigned __int8 *)(v14 + v431), *v7, (v434- ((unsigned __int16)(v434 * (*(unsigned __int8 *)(v16 + v431) ^ 0xFF)+ 1+ ((unsigned __int16)(v434 * (*(unsigned __int8 *)(v16 + v431) ^ 0xFF)) >> 8)) >> 8)), v436);
                  v428 = v616;
                  v8 = v642;
                  v19 = v643;
                  v14 = v656;
                  v436 = BYTE3(result);
                }
                *(_BYTE *)(v14 + v431) = result;
                *v7 = v436;
              }
              else
              {
                result = PDAhuePDA_15933(*(unsigned __int8 *)(v14 + v431), 0xFFu, (v434- ((unsigned __int16)(v434 * (*(unsigned __int8 *)(v16 + v431) ^ 0xFF)+ 1+ ((unsigned __int16)(v434 * (*(unsigned __int8 *)(v16 + v431) ^ 0xFF)) >> 8)) >> 8)), v436);
                v428 = v616;
                v8 = v642;
                v19 = v643;
                v14 = v656;
                *(_BYTE *)(v656 + v431) = result;
              }
            }
          }
          v7 += v428;
          if ((unint64_t)&v13[v427] >= v25)
            v437 = v430;
          else
            v437 = 0;
          v12 += v429 + v437;
          v13 += v427 + v437;
          v431 += v427;
          --v432;
        }
        while (v432);
        if (v620)
        {
          v438 = v586;
          if ((unint64_t)&v641[v640] < v620)
            v438 = 0;
          v13 = &v641[v640 + v438];
          v439 = v571;
          if ((unint64_t)&v641[v640] < v620)
            v439 = 0;
          v12 = &v601[v623 + v439];
          v25 += v640 + v438;
          v601 = v12;
          v641 += v640 + v438;
        }
        else
        {
          v13 += v640;
          v12 += v623;
        }
        v16 += v431 + v622;
        v14 += v431 + v621;
        v7 += v619;
        v10 = v637 - 1;
      }
      while (v637 != 1);
      return result;
    case 26:
      v440 = v24;
      v441 = v8;
      v442 = v19;
      v443 = -(uint64_t)v20;
      v572 = -(v623 * v21);
      v587 = -(v640 * v21);
      v602 = v12;
      v617 = v8;
      do
      {
        v638 = v10;
        v444 = 0;
        v445 = v624;
        v657 = v14;
        do
        {
          if (*(_BYTE *)(v16 + v444))
          {
            v446 = v19 ? *v12 : 255;
            v447 = *v13;
            v448 = (v447 | (v446 << 16)) * (*(unsigned __int8 *)(v16 + v444) ^ 0xFF)
                 + 65537
                 + ((((v447 | (v446 << 16)) * (*(unsigned __int8 *)(v16 + v444) ^ 0xFFu)) >> 8) & 0xFF00FF);
            result = (v447 | (v446 << 24)) - (v448 & 0xFF000000 | BYTE1(v448));
            v449 = BYTE3(result);
            if (BYTE3(result))
            {
              if (v8)
              {
                if (*v7)
                {
                  result = PDAluminosityPDA_15935((v447- ((unsigned __int16)(v447 * (*(unsigned __int8 *)(v16 + v444) ^ 0xFF)+ 1+ ((unsigned __int16)(v447 * (*(unsigned __int8 *)(v16 + v444) ^ 0xFF)) >> 8)) >> 8)), v449, *(unsigned __int8 *)(v14 + v444), *v7);
                  v441 = v617;
                  v8 = v642;
                  v19 = v643;
                  v14 = v657;
                  v449 = BYTE3(result);
                }
                *(_BYTE *)(v14 + v444) = result;
                *v7 = v449;
              }
              else
              {
                result = PDAluminosityPDA_15935((v447- ((unsigned __int16)(v447 * (*(unsigned __int8 *)(v16 + v444) ^ 0xFF)+ 1+ ((unsigned __int16)(v447 * (*(unsigned __int8 *)(v16 + v444) ^ 0xFF)) >> 8)) >> 8)), v449, *(unsigned __int8 *)(v14 + v444), 0xFFu);
                v441 = v617;
                v8 = v642;
                v19 = v643;
                v14 = v657;
                *(_BYTE *)(v657 + v444) = result;
              }
            }
          }
          v7 += v441;
          if ((unint64_t)&v13[v440] >= v25)
            v450 = v443;
          else
            v450 = 0;
          v12 += v442 + v450;
          v13 += v440 + v450;
          v444 += v440;
          --v445;
        }
        while (v445);
        if (v620)
        {
          v451 = v587;
          if ((unint64_t)&v641[v640] < v620)
            v451 = 0;
          v13 = &v641[v640 + v451];
          v452 = v572;
          if ((unint64_t)&v641[v640] < v620)
            v452 = 0;
          v12 = &v602[v623 + v452];
          v25 += v640 + v451;
          v602 = v12;
          v641 += v640 + v451;
        }
        else
        {
          v13 += v640;
          v12 += v623;
        }
        v16 += v444 + v622;
        v14 += v444 + v621;
        v7 += v619;
        v10 = v638 - 1;
      }
      while (v638 != 1);
      return result;
    case 27:
      v453 = v24;
      v454 = v8;
      v455 = v19;
      v588 = -(v640 * v21);
      v603 = v12;
      v573 = -(v623 * v21);
      v456 = -(uint64_t)v20;
      v618 = v8;
      do
      {
        v639 = v10;
        v457 = 0;
        v458 = v624;
        v658 = v14;
        do
        {
          if (*(_BYTE *)(v16 + v457))
          {
            v459 = v19 ? *v12 : 255;
            v460 = *v13;
            v461 = (v460 | (v459 << 16)) * (*(unsigned __int8 *)(v16 + v457) ^ 0xFF)
                 + 65537
                 + ((((v460 | (v459 << 16)) * (*(unsigned __int8 *)(v16 + v457) ^ 0xFFu)) >> 8) & 0xFF00FF);
            result = (v460 | (v459 << 24)) - (v461 & 0xFF000000 | BYTE1(v461));
            v462 = BYTE3(result);
            if (BYTE3(result))
            {
              if (v8)
              {
                if (*v7)
                {
                  result = PDAluminosityPDA_15935(*(unsigned __int8 *)(v14 + v457), *v7, (v460- ((unsigned __int16)(v460 * (*(unsigned __int8 *)(v16 + v457) ^ 0xFF)+ 1+ ((unsigned __int16)(v460 * (*(unsigned __int8 *)(v16 + v457) ^ 0xFF)) >> 8)) >> 8)), v462);
                  v454 = v618;
                  v8 = v642;
                  v19 = v643;
                  v14 = v658;
                  v462 = BYTE3(result);
                }
                *(_BYTE *)(v14 + v457) = result;
                *v7 = v462;
              }
              else
              {
                result = PDAluminosityPDA_15935(*(unsigned __int8 *)(v14 + v457), 0xFFu, (v460- ((unsigned __int16)(v460 * (*(unsigned __int8 *)(v16 + v457) ^ 0xFF)+ 1+ ((unsigned __int16)(v460 * (*(unsigned __int8 *)(v16 + v457) ^ 0xFF)) >> 8)) >> 8)), v462);
                v454 = v618;
                v8 = v642;
                v19 = v643;
                v14 = v658;
                *(_BYTE *)(v658 + v457) = result;
              }
            }
          }
          v7 += v454;
          if ((unint64_t)&v13[v453] >= v25)
            v463 = v456;
          else
            v463 = 0;
          v12 += v455 + v463;
          v13 += v453 + v463;
          v457 += v453;
          --v458;
        }
        while (v458);
        if (v620)
        {
          v464 = v588;
          if ((unint64_t)&v641[v640] < v620)
            v464 = 0;
          v13 = &v641[v640 + v464];
          v465 = v573;
          if ((unint64_t)&v641[v640] < v620)
            v465 = 0;
          v12 = &v603[v623 + v465];
          v25 += v640 + v464;
          v603 = v12;
          v641 += v640 + v464;
        }
        else
        {
          v13 += v640;
          v12 += v623;
        }
        v16 += v457 + v622;
        v14 += v457 + v621;
        v7 += v619;
        v10 = v639 - 1;
      }
      while (v639 != 1);
      return result;
    default:
      return result;
  }
  do
  {
    v482 = 0;
    v483 = v624;
    do
    {
      v484 = *(unsigned __int8 *)(v16 + v482);
      if (!*(_BYTE *)(v16 + v482))
        goto LABEL_739;
      if (v484 == 255)
      {
        v485 = *v12;
        if (!*v12)
          goto LABEL_739;
        if (v485 == 255)
          LOBYTE(v486) = *v13;
        else
          v486 = *v13
               + ((*(unsigned __int8 *)(v14 + v482) * (v485 ^ 0xFF)
                 + ((*(unsigned __int8 *)(v14 + v482) * (v485 ^ 0xFFu)) >> 8)
                 + 1) >> 8);
      }
      else
      {
        v487 = *v13;
        v488 = *v12;
        v489 = (v487 | (v488 << 16)) * (v484 ^ 0xFF)
             + 65537
             + ((((v487 | (v488 << 16)) * (v484 ^ 0xFFu)) >> 8) & 0xFF00FF);
        v490 = (v487 | (v488 << 24)) - (v489 & 0xFF000000 | BYTE1(v489));
        if (!HIBYTE(v490))
          goto LABEL_739;
        v486 = v490
             + (((~v490 >> 24) * *(unsigned __int8 *)(v14 + v482)
               + (((~v490 >> 24) * *(unsigned __int8 *)(v14 + v482)) >> 8)
               + 1) >> 8);
      }
      *(_BYTE *)(v14 + v482) = v486;
LABEL_739:
      if ((unint64_t)&v13[v58] >= v25)
        v491 = v477;
      else
        v491 = 0;
      v12 += v19 + v491;
      v13 += v58 + v491;
      v482 += v58;
      --v483;
    }
    while (v483);
    if (v620)
    {
      v492 = &v481[v623];
      if ((unint64_t)&v641[v640] >= v620)
        v493 = v479;
      else
        v493 = 0;
      v13 = &v641[v640 + v493];
      if ((unint64_t)&v641[v640] >= v620)
        v494 = v480;
      else
        v494 = 0;
      v12 = &v492[v494];
      v25 += v640 + v493;
      v481 = &v492[v494];
      v641 += v640 + v493;
    }
    else
    {
      v13 += v640;
      v12 += v623;
    }
    result = v622;
    v16 += v482 + v622;
    v14 += v482 + v621;
    --v10;
  }
  while (v10);
  return result;
}

uint64_t CGPathIsRectWithTransform(char *cf, CGRect *a2, CGAffineTransform *a3)
{
  CFTypeID v6;

  if (cf && (CGPathDisableTypeValidation || (v6 = CFGetTypeID(cf), v6 == CGPathGetTypeID())))
    return CG::Path::is_rect((CG::Path *)(cf + 16), a2, a3);
  else
    return 0;
}

uint64_t CGPathIsEllipseWithTransform(char *cf, CGRect *a2, BOOL *a3, uint64_t a4, CGAffineTransform *a5)
{
  CFTypeID v8;

  if (cf && (CGPathDisableTypeValidation || (v8 = CFGetTypeID(cf), v8 == CGPathGetTypeID())))
    return CG::Path::is_ellipse((CG::Path *)(cf + 16), a2, 0, a3, a5);
  else
    return 0;
}

uint64_t CGImageTextureDataCreate(uint64_t a1, const void *a2, uint64_t a3, _OWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t Instance;
  __int128 v13;
  const __CFNumber *Value;
  const __CFNumber *v15;
  const __CFNumber *v16;
  const __CFNumber *v17;
  const __CFNumber *v18;
  const void *v19;
  const __CFNumber *v20;
  const __CFNumber *v21;
  const void *v22;
  const void **v23;
  const void *v24;
  uint64_t v26;
  uint64_t valuePtr;

  v8 = 0;
  if (a2 && a4)
  {
    if (_block_invoke_once_8092 != -1)
      dispatch_once(&_block_invoke_once_8092, &__block_literal_global_23_8093);
    Instance = CGTypeCreateInstance(CGImageTextureDataGetTypeID_texture_data_type_id, 128, a3, (uint64_t)a4, a5, a6, a7, a8);
    v8 = Instance;
    if (Instance)
    {
      *(_QWORD *)(Instance + 24) = a3;
      *(_QWORD *)(Instance + 16) = CFRetain(a2);
      v13 = a4[1];
      *(_OWORD *)(v8 + 32) = *a4;
      *(_OWORD *)(v8 + 48) = v13;
      v26 = 0;
      valuePtr = 0;
      *(_OWORD *)(v8 + 72) = 0u;
      *(_OWORD *)(v8 + 88) = 0u;
      *(_OWORD *)(v8 + 104) = 0u;
      *(_OWORD *)(v8 + 120) = 0u;
      *(_WORD *)(v8 + 136) = 0;
      Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("width"));
      if (Value)
      {
        CFNumberGetValue(Value, kCFNumberLongType, &valuePtr);
        *(double *)(v8 + 72) = (double)valuePtr;
      }
      v15 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("height"));
      if (v15)
      {
        CFNumberGetValue(v15, kCFNumberLongType, &valuePtr);
        *(double *)(v8 + 80) = (double)valuePtr;
      }
      v16 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("rowBytes"));
      if (v16)
      {
        CFNumberGetValue(v16, kCFNumberLongType, &valuePtr);
        *(_QWORD *)(v8 + 88) = valuePtr;
      }
      v17 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("mipmapLevelCount"));
      if (v17)
      {
        CFNumberGetValue(v17, kCFNumberLongType, &valuePtr);
        *(_QWORD *)(v8 + 120) = valuePtr;
      }
      v18 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("faceCount"));
      if (v18)
      {
        CFNumberGetValue(v18, kCFNumberLongType, &valuePtr);
        *(_QWORD *)(v8 + 128) = valuePtr;
      }
      v19 = CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("colorSpace"));
      if (v19)
        *(_QWORD *)(v8 + 96) = CFRetain(v19);
      v20 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("pixelFormatMetal"));
      if (v20)
      {
        CFNumberGetValue(v20, kCFNumberSInt64Type, &v26);
        *(_QWORD *)(v8 + 104) = v26;
      }
      v21 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("pixelFormatGL"));
      if (v21)
      {
        CFNumberGetValue(v21, kCFNumberSInt64Type, &v26);
        *(_QWORD *)(v8 + 112) = v26;
      }
      v22 = CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("isCompressed"));
      v23 = (const void **)MEMORY[0x1E0C9AE50];
      if (v22)
        *(_BYTE *)(v8 + 136) = v22 == (const void *)*MEMORY[0x1E0C9AE50];
      v24 = CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("supportsTiledLayout"));
      if (v24)
        *(_BYTE *)(v8 + 137) = v24 == *v23;
    }
  }
  return v8;
}

uint64_t __cg_create_colorspace_block_invoke()
{
  return pthread_key_create((pthread_key_t *)&cg_colorspaces_key, (void (__cdecl *)(void *))cg_build_colorspace_destroy);
}

void __get_locale_mapping_block_invoke()
{
  __CFDictionary *Mutable;
  CFLocaleRef System;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  get_locale_mapping_locale_mapping = (uint64_t)Mutable;
  System = CFLocaleGetSystem();
  CFDictionarySetValue(Mutable, System, (const void *)*MEMORY[0x1E0C9B0D0]);
}

void rgba32_image_mark(uint64_t a1, uint64_t a2, int a3, __n128 a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  int *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __n128 v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  void *v34;
  int v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  _QWORD *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  void *v45;
  void (*v46)(_QWORD *, uint64_t, uint64_t, uint64_t, __n128);
  unsigned int *v47;
  _BYTE *v48;
  int v49;
  unsigned int v50;
  int v51;
  _BYTE *v52;
  int v53;
  int v54;
  unsigned __int8 *v55;
  unsigned int v56;
  unsigned int v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  float v63;
  float v64;
  float v65;
  int v66;
  int v67;
  int v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  float v75;
  float v76;
  float v77;
  int v78;
  int v79;
  int v80;
  int v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  float v87;
  float v88;
  float v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  float v99;
  float v100;
  float v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned __int8 v110;
  unsigned __int8 *v111;
  int v112;
  unsigned int v113;
  unsigned int *v114;
  unsigned int *v115;
  unsigned __int8 v116;
  unsigned __int8 v117;
  unsigned __int8 *v118;
  int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned __int8 v123;
  int v124;
  unsigned __int8 *v125;
  unsigned int v126;
  unsigned int v127;
  int v128;
  unsigned int v129;
  unsigned int v130;
  int v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  int v135;
  unsigned int v136;
  unsigned int v137;
  int v138;
  unsigned int v139;
  unsigned int v140;
  int v141;
  unsigned int v142;
  unsigned int v143;
  int v144;
  unsigned __int8 *v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  int v153;
  unsigned int v154;
  unsigned int v155;
  int v156;
  uint64x2_t v157;
  unsigned __int8 v158;
  int v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  int v163;
  int v164;
  unsigned __int8 *v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  int v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int v174;
  unsigned int v175;
  unsigned int v176;
  int v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int v182;
  int v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  int v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int v194;
  int v195;
  unsigned int v196;
  unsigned int v197;
  unsigned int v198;
  unsigned int v199;
  unsigned int v200;
  int v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int v206;
  int v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v212;
  int v213;
  unsigned int v214;
  unsigned int v215;
  unsigned int v216;
  unsigned int v217;
  unsigned int v218;
  int v219;
  unsigned int v220;
  unsigned int v221;
  unsigned int v222;
  unsigned int v223;
  unsigned int v224;
  int v225;
  unsigned int v226;
  unsigned int v227;
  unsigned int v228;
  unsigned int v229;
  unsigned int v230;
  int v231;
  unsigned int v232;
  unsigned int v233;
  unsigned int v234;
  unsigned int v235;
  unsigned int v236;
  int v237;
  unsigned int v238;
  unsigned int v239;
  unsigned int v240;
  unsigned int v241;
  unsigned int v242;
  int v243;
  unsigned int v244;
  unsigned int v245;
  unsigned int v246;
  unsigned int v247;
  int v248;
  unsigned int v249;
  unsigned int v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int v253;
  int v254;
  unsigned int v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  int v260;
  unsigned int v261;
  unsigned int v262;
  unsigned int v263;
  unsigned int v264;
  unsigned int v265;
  int v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int v269;
  unsigned int v270;
  int v271;
  unsigned int v272;
  unsigned int v273;
  unsigned int v274;
  unsigned int v275;
  unsigned int v276;
  uint64_t v277;
  unsigned int *v278;
  unsigned __int8 v279;
  unsigned __int8 *v280;
  int v281;
  unsigned int v282;
  unsigned int v283;
  unsigned __int8 v284;
  unint64_t v285;
  uint64_t v286;
  void *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  unint64_t v295;
  _QWORD *v296;
  int v297;
  void *v298;
  int v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;

  v297 = a3;
  v303 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned int *)(a1 + 4);
  v5 = ((int)v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if ((int)v5 > 0x1FFFFFF)
    return;
  v7 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v8 = *(float *)(a2 + 184);
  v9 = *(int **)(a1 + 136);
  v300 = *(_QWORD *)(a2 + 96);
  v289 = *(_QWORD *)(a2 + 104);
  v11 = *(int *)(a1 + 24);
  v10 = *(int *)(a1 + 28);
  v12 = *(int *)(a1 + 20);
  v301 = *(int *)(a1 + 16);
  v302 = v6;
  v299 = *(_DWORD *)(a1 + 8);
  v292 = a1;
  v298 = (void *)*(int *)(a1 + 12);
  v296 = (_QWORD *)a2;
  v13 = *(int *)(a2 + 16);
  v14 = (v13 + 6) * v5;
  if (v14 > 65439)
  {
    v17 = (char *)malloc_type_calloc(1uLL, v14 + 96, 0x3023562EuLL);
    v16 = v17;
    v20 = v17;
    v21 = v296;
    v22 = v292;
    if (!v17)
      return;
  }
  else
  {
    MEMORY[0x1E0C80A78](a1, a4);
    v16 = (char *)&v285 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v16, v15);
    v20 = 0;
    v21 = v296;
    v22 = v292;
  }
  v287 = v20;
  v19.n128_f32[0] = (float)(v8 * 255.0) + 0.5;
  v23 = (int)v19.n128_f32[0];
  v286 = v7 + (v11 - 1) * v10 + 4 * v12;
  v24 = v10 >> 2;
  v25 = (unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0;
  v26 = v25 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((_DWORD)v13)
    v27 = 4 * v5;
  else
    v27 = 0;
  v28 = v26 + v27;
  v21[18] = v25;
  v21[19] = v26 + v27;
  v21[20] = v26;
  v29 = (unsigned int *)(v7 + 4 * ((_QWORD)v298 + v24 * v301));
  v288 = (int)v4;
  v285 = v24;
  v295 = v24 - (int)v4;
  v30 = *(int *)(v22 + 104);
  v31 = *(_DWORD *)(v22 + 108);
  v32 = *(unsigned __int8 *)(v22 + 2);
  if (v32 == 6 || v32 == 1)
  {
    v33 = v300;
    if (!v9)
      goto LABEL_609;
    v34 = 0;
    v35 = 0;
    v36 = *(int *)(v22 + 124);
    v37 = (unsigned __int8 *)v9 + v30 + (int)v36 * (uint64_t)v31;
    v38 = v288;
    v294 = v36 - v288;
    v39 = v296;
    goto LABEL_25;
  }
  if (!v9)
  {
    v37 = 0;
    v34 = 0;
    v294 = 0;
    v35 = 0;
    v39 = v296;
    v38 = v288;
    v33 = v300;
LABEL_25:
    v42 = v289;
    goto LABEL_26;
  }
  v19.n128_f64[0] = shape_enum_clip_alloc((uint64_t)v17, v18, v9, 1, 1, 1, v30, v31, v4, v299);
  if (!v40)
    goto LABEL_609;
  v35 = 0;
  v41 = (int)((v13 * v5 + 15) & 0xFFFFFFF0);
  if (!(_DWORD)v13)
    v41 = 4 * v5;
  v42 = v289;
  v294 = -v288;
  v37 = (unsigned __int8 *)(v28 + v41 + 16);
  v39 = v296;
  v33 = v300;
  v34 = v40;
  while (1)
  {
    while (1)
    {
      v43 = *((_DWORD *)v37 - 4);
      v44 = v43 - v35;
      if (v43 > v35)
        break;
      if (v35 < *((_DWORD *)v37 - 3) + v43)
      {
        v38 = v288;
LABEL_26:
        v290 = -v38;
        v291 = (v4 - 1) + 1;
        v293 = v286 - 4;
        v45 = v34;
LABEL_27:
        v298 = v45;
        v46 = (void (*)(_QWORD *, uint64_t, uint64_t, uint64_t, __n128))*v39;
        v300 = v33;
        v46(v39, v33, v42, v4, v19);
        v47 = (unsigned int *)v39[20];
        v48 = (_BYTE *)v39[18];
        v50 = *((_DWORD *)v39 + 2);
        v49 = *((_DWORD *)v39 + 3);
        LODWORD(v301) = v35;
        if (v50 == v49)
        {
          if (v23 != 255)
          {
            v51 = v4;
            v52 = v48;
            do
            {
              if (*v52)
                *v47 = PDM_19476(*v47, v23);
              ++v52;
              ++v47;
              --v51;
            }
            while (v51);
            v47 += v290;
            v48 += v291 + v290;
            goto LABEL_34;
          }
          v53 = v297;
        }
        else
        {
          v59 = v39[19];
          v60 = HIWORD(v50) & 0x3F;
          if (v60 == 16)
          {
            if (v49 == 134755144)
            {
              if (v23 == 255)
              {
                v95 = 0;
                v53 = v297;
                do
                {
                  if (v48[v95])
                    v47[v95] = *(_DWORD *)(v59 + 8 * v95) & 0xFF00 | HIBYTE(*(_QWORD *)(v59 + 8 * v95)) | (*(_QWORD *)(v59 + 8 * v95) >> 16) & 0xFF000000 | (BYTE3(*(_QWORD *)(v59 + 8 * v95)) << 16);
                  ++v95;
                }
                while ((_DWORD)v4 != (_DWORD)v95);
                goto LABEL_35;
              }
              v71 = 0;
              do
              {
                if (v48[v71])
                  v47[v71] = PDM_19476(*(_DWORD *)(v59 + 8 * v71) & 0xFF00 | HIBYTE(*(_QWORD *)(v59 + 8 * v71)) | (*(_QWORD *)(v59 + 8 * v71) >> 16) & 0xFF000000 | (BYTE3(*(_QWORD *)(v59 + 8 * v71)) << 16), v23);
                ++v71;
              }
              while ((_DWORD)v4 != (_DWORD)v71);
            }
            else
            {
              if (v23 == 255)
              {
                v107 = 0;
                v53 = v297;
                do
                {
                  if (v48[v107])
                    v47[v107] = HIBYTE(*(_QWORD *)(v59 + 8 * v107)) | (BYTE1(*(_QWORD *)(v59 + 8 * v107)) << 24) | (BYTE3(*(_QWORD *)(v59 + 8 * v107)) << 16) | HIDWORD(*(_QWORD *)(v59 + 8 * v107)) & 0xFF00;
                  ++v107;
                }
                while ((_DWORD)v4 != (_DWORD)v107);
                goto LABEL_35;
              }
              v83 = 0;
              do
              {
                if (v48[v83])
                  v47[v83] = PDM_19476(HIBYTE(*(_QWORD *)(v59 + 8 * v83)) | (BYTE1(*(_QWORD *)(v59 + 8 * v83)) << 24) | (BYTE3(*(_QWORD *)(v59 + 8 * v83)) << 16) | HIDWORD(*(_QWORD *)(v59 + 8 * v83)) & 0xFF00, v23);
                ++v83;
              }
              while ((_DWORD)v4 != (_DWORD)v83);
            }
            goto LABEL_34;
          }
          if (v60 != 32)
          {
            if (v49 == 134755144)
            {
              if (v23 == 255)
              {
                v96 = 0;
                v53 = v297;
                do
                {
                  if (v48[v96])
                    v47[v96] = *(_DWORD *)(v59 + 4 * v96) & 0xFF00FF | (HIBYTE(*(_DWORD *)(v59 + 4 * v96)) << 8) & 0xFFFFFF | (BYTE1(*(_DWORD *)(v59 + 4 * v96)) << 24);
                  ++v96;
                }
                while ((_DWORD)v4 != (_DWORD)v96);
                goto LABEL_35;
              }
              v72 = 0;
              do
              {
                if (v48[v72])
                  v47[v72] = PDM_19476(*(_DWORD *)(v59 + 4 * v72) & 0xFF00FF | (HIBYTE(*(_DWORD *)(v59 + 4 * v72)) << 8) & 0xFFFFFF | (BYTE1(*(_DWORD *)(v59 + 4 * v72)) << 24), v23);
                ++v72;
              }
              while ((_DWORD)v4 != (_DWORD)v72);
            }
            else
            {
              if (v23 == 255)
              {
                v108 = 0;
                v53 = v297;
                do
                {
                  if (v48[v108])
                    v47[v108] = *(_DWORD *)(v59 + 4 * v108);
                  ++v108;
                }
                while ((_DWORD)v4 != (_DWORD)v108);
                goto LABEL_35;
              }
              v84 = 0;
              do
              {
                if (v48[v84])
                  v47[v84] = PDM_19476(*(_DWORD *)(v59 + 4 * v84), v23);
                ++v84;
              }
              while ((_DWORD)v4 != (_DWORD)v84);
            }
LABEL_34:
            v53 = v297;
LABEL_35:
            v35 = v301;
            goto LABEL_36;
          }
          if (v49 == 134755144)
          {
            if (v23 != 255)
            {
              v61 = 0;
              v62 = v59 + 8;
              do
              {
                if (v48[v61])
                {
                  v19.n128_u32[0] = *(_DWORD *)(v62 + 4);
                  if (v19.n128_f32[0] <= 0.0)
                  {
                    v70 = 0;
                  }
                  else
                  {
                    v63 = *(float *)(v62 - 8);
                    v64 = *(float *)(v62 - 4);
                    v65 = *(float *)v62;
                    v66 = (int)(float)((float)(v19.n128_f32[0] * 255.0) + 0.5);
                    if (v19.n128_f32[0] > 1.0)
                    {
                      v66 = 255;
                      v19.n128_f32[0] = 1.0;
                    }
                    v67 = (int)(float)((float)(v63 * 255.0) + 0.5);
                    if (v63 < 0.0)
                      v67 = 0;
                    if (v63 > v19.n128_f32[0])
                      v67 = v66;
                    v68 = (int)(float)((float)(v64 * 255.0) + 0.5);
                    if (v64 < 0.0)
                      v68 = 0;
                    if (v64 > v19.n128_f32[0])
                      v68 = v66;
                    v69 = (int)(float)((float)(v65 * 255.0) + 0.5);
                    if (v65 < 0.0)
                      v69 = 0;
                    if (v65 > v19.n128_f32[0])
                      v69 = v66;
                    v70 = PDM_19476((v67 << 8) | (v68 << 16) | (v69 << 24) | v66, v23);
                  }
                  v47[v61] = v70;
                }
                ++v61;
                v62 += 16;
              }
              while ((_DWORD)v4 != (_DWORD)v61);
              goto LABEL_34;
            }
            v85 = 0;
            v86 = v59 + 8;
            v53 = v297;
            v35 = v301;
            do
            {
              if (v48[v85])
              {
                v19.n128_u32[0] = *(_DWORD *)(v86 + 4);
                if (v19.n128_f32[0] <= 0.0)
                {
                  v94 = 0;
                }
                else
                {
                  v87 = *(float *)(v86 - 8);
                  v88 = *(float *)(v86 - 4);
                  v89 = *(float *)v86;
                  v90 = (int)(float)((float)(v19.n128_f32[0] * 255.0) + 0.5);
                  if (v19.n128_f32[0] > 1.0)
                  {
                    v90 = 255;
                    v19.n128_f32[0] = 1.0;
                  }
                  v91 = (int)(float)((float)(v87 * 255.0) + 0.5);
                  if (v87 < 0.0)
                    v91 = 0;
                  if (v87 > v19.n128_f32[0])
                    v91 = v90;
                  v92 = (int)(float)((float)(v88 * 255.0) + 0.5);
                  if (v88 < 0.0)
                    v92 = 0;
                  if (v88 > v19.n128_f32[0])
                    v92 = v90;
                  v93 = (int)(float)((float)(v89 * 255.0) + 0.5);
                  if (v89 < 0.0)
                    v93 = 0;
                  if (v89 > v19.n128_f32[0])
                    v93 = v90;
                  v94 = (v91 << 8) | (v92 << 16) | (v93 << 24) | v90;
                }
                v47[v85] = v94;
              }
              ++v85;
              v86 += 16;
            }
            while ((_DWORD)v4 != (_DWORD)v85);
          }
          else
          {
            if (v23 != 255)
            {
              v73 = 0;
              v74 = v59 + 8;
              do
              {
                if (v48[v73])
                {
                  v19.n128_u32[0] = *(_DWORD *)(v74 + 4);
                  if (v19.n128_f32[0] <= 0.0)
                  {
                    v82 = 0;
                  }
                  else
                  {
                    v75 = *(float *)(v74 - 8);
                    v76 = *(float *)(v74 - 4);
                    v77 = *(float *)v74;
                    v78 = (int)(float)((float)(v19.n128_f32[0] * 255.0) + 0.5);
                    if (v19.n128_f32[0] > 1.0)
                    {
                      v78 = 255;
                      v19.n128_f32[0] = 1.0;
                    }
                    v79 = (int)(float)((float)(v75 * 255.0) + 0.5);
                    if (v75 < 0.0)
                      v79 = 0;
                    if (v75 > v19.n128_f32[0])
                      v79 = v78;
                    v80 = (int)(float)((float)(v76 * 255.0) + 0.5);
                    if (v76 < 0.0)
                      v80 = 0;
                    if (v76 > v19.n128_f32[0])
                      v80 = v78;
                    v81 = (int)(float)((float)(v77 * 255.0) + 0.5);
                    if (v77 < 0.0)
                      v81 = 0;
                    if (v77 > v19.n128_f32[0])
                      v81 = v78;
                    v82 = PDM_19476((v79 << 24) | (v80 << 16) | (v81 << 8) | v78, v23);
                  }
                  v47[v73] = v82;
                }
                ++v73;
                v74 += 16;
              }
              while ((_DWORD)v4 != (_DWORD)v73);
              goto LABEL_34;
            }
            v97 = 0;
            v98 = v59 + 8;
            v53 = v297;
            v35 = v301;
            do
            {
              if (v48[v97])
              {
                v19.n128_u32[0] = *(_DWORD *)(v98 + 4);
                if (v19.n128_f32[0] <= 0.0)
                {
                  v106 = 0;
                }
                else
                {
                  v99 = *(float *)(v98 - 8);
                  v100 = *(float *)(v98 - 4);
                  v101 = *(float *)v98;
                  v102 = (int)(float)((float)(v19.n128_f32[0] * 255.0) + 0.5);
                  if (v19.n128_f32[0] > 1.0)
                  {
                    v19.n128_f32[0] = 1.0;
                    v102 = 255;
                  }
                  v103 = (int)(float)((float)(v99 * 255.0) + 0.5);
                  if (v99 < 0.0)
                    v103 = 0;
                  if (v99 > v19.n128_f32[0])
                    v103 = v102;
                  v104 = (int)(float)((float)(v100 * 255.0) + 0.5);
                  if (v100 < 0.0)
                    v104 = 0;
                  if (v100 > v19.n128_f32[0])
                    v104 = v102;
                  v105 = (int)(float)((float)(v101 * 255.0) + 0.5);
                  if (v101 < 0.0)
                    v105 = 0;
                  if (v101 > v19.n128_f32[0])
                    v105 = v102;
                  v106 = (v103 << 24) | (v104 << 16) | (v105 << 8) | v102;
                }
                v47[v97] = v106;
              }
              ++v97;
              v98 += 16;
            }
            while ((_DWORD)v4 != (_DWORD)v97);
          }
        }
LABEL_36:
        switch(v53)
        {
          case 0:
            v54 = v4;
            v55 = v37;
            do
            {
              v56 = *v48;
              if (*v48)
              {
                if (v37)
                  v56 = (*v55 * v56 + ((*v55 * v56) >> 8) + 1) >> 8;
                if ((_BYTE)v56)
                {
                  if (v56 == 255)
                    v57 = 0;
                  else
                    v57 = PDM_19476(*v29, ~(_BYTE)v56);
                  *v29 = v57;
                }
              }
              ++v48;
              v55 += v37 != 0;
              ++v29;
              --v54;
            }
            while (v54);
            v37 = &v55[v294];
            v58 = v295;
            goto LABEL_577;
          case 1:
            v110 = *v48;
            v111 = v48 + 1;
            v112 = v4;
            if (v37)
            {
              do
              {
                if (v110)
                {
                  v113 = *v37 * v110 + ((*v37 * v110) >> 8) + 1;
                  v114 = (unsigned int *)v293;
                  if (v293 >= (unint64_t)v29)
                    v114 = v29;
                  if ((unint64_t)v114 >= *(_QWORD *)(v292 + 40))
                    v115 = v114;
                  else
                    v115 = *(unsigned int **)(v292 + 40);
                  if (BYTE1(v113))
                  {
                    if (BYTE1(v113) == 255)
                      *v115 = *v47;
                    else
                      DMplusDM_19477(v115, *v47, BYTE1(v113), *v115, ~(v113 >> 8));
                  }
                }
                else
                {
                  v115 = v29;
                }
                v116 = *v111++;
                v110 = v116;
                ++v47;
                ++v37;
                v29 = v115 + 1;
                --v112;
              }
              while (v112);
              v37 += v294;
            }
            else
            {
              v277 = v292;
              do
              {
                v278 = (unsigned int *)v293;
                if (v293 >= (unint64_t)v29)
                  v278 = v29;
                if ((unint64_t)v278 >= *(_QWORD *)(v277 + 40))
                  v115 = v278;
                else
                  v115 = *(unsigned int **)(v277 + 40);
                if (v110)
                {
                  if (v110 == 255)
                    *v115 = *v47;
                  else
                    DMplusDM_19477(v115, *v47, v110, *v115, ~v110);
                }
                v279 = *v111++;
                v110 = v279;
                ++v47;
                v29 = v115 + 1;
                --v112;
              }
              while (v112);
              v37 = 0;
            }
            goto LABEL_606;
          case 2:
            v117 = *v48;
            if (v37)
            {
              v118 = v48 + 1;
              v119 = v4;
              while (1)
              {
                v115 = v29;
                if (!v117)
                  goto LABEL_214;
                v120 = *v37 * v117 + ((*v37 * v117) >> 8) + 1;
                if (!BYTE1(v120))
                  goto LABEL_214;
                if (BYTE1(v120) == 255)
                {
                  v121 = *v47;
                  if (*v47)
                  {
                    if (*v47 != 255)
                      goto LABEL_213;
                    *v29 = v121;
                  }
                }
                else
                {
                  v122 = PDM_19476(*v47, BYTE1(v120));
                  if ((_BYTE)v122)
                  {
                    v121 = v122;
LABEL_213:
                    DplusDM_19478(v29, v121, *v29, ~(_BYTE)v121);
                  }
                }
LABEL_214:
                v123 = *v118++;
                v117 = v123;
                ++v47;
                ++v37;
                ++v29;
                if (!--v119)
                {
                  v37 += v294;
                  v39 = v296;
                  goto LABEL_606;
                }
              }
            }
            v280 = v48 + 1;
            v281 = v4;
            do
            {
              if (!v117)
                goto LABEL_604;
              if (v117 == 255)
              {
                v282 = *v47;
                if (!*v47)
                  goto LABEL_604;
                if (*v47 == 255)
                {
                  *v29 = v282;
                  goto LABEL_604;
                }
              }
              else
              {
                v283 = PDM_19476(*v47, v117);
                if (!(_BYTE)v283)
                  goto LABEL_604;
                v282 = v283;
              }
              DplusDM_19478(v29, v282, *v29, ~(_BYTE)v282);
LABEL_604:
              v284 = *v280++;
              v117 = v284;
              ++v47;
              ++v29;
              --v281;
            }
            while (v281);
            v37 = 0;
            v115 = v29 - 1;
LABEL_606:
            v29 = &v115[v295 + 1];
LABEL_578:
            v109 = v300;
LABEL_579:
            v34 = v298;
            v35 = v301;
LABEL_580:
            if (v299 == 1)
              goto LABEL_607;
            --v299;
            v45 = 0;
            ++v35;
            v33 = v39[16] + v109;
            v42 += v39[17];
            if (v34)
              continue;
            goto LABEL_27;
          case 3:
            v124 = v4;
            v125 = v37;
            do
            {
              v126 = *v48;
              if (*v48)
              {
                if (v37)
                  v126 = (*v125 * v126 + ((*v125 * v126) >> 8) + 1) >> 8;
                if ((_BYTE)v126)
                {
                  if (v126 == 255)
                  {
                    *v29 = PDM_19476(*v47, *(unsigned __int8 *)v29);
                  }
                  else
                  {
                    v127 = *v29 * v126 + 128;
                    DMplusDM_19477(v29, *v47, (unsigned __int16)(v127 + (v127 >> 8)) >> 8, *v29, ~(_BYTE)v126);
                  }
                }
              }
              ++v48;
              ++v47;
              v125 += v37 != 0;
              ++v29;
              --v124;
            }
            while (v124);
            goto LABEL_575;
          case 4:
            v128 = v4;
            v125 = v37;
            do
            {
              v129 = *v48;
              if (*v48)
              {
                if (v37)
                  v129 = (*v125 * v129 + ((*v125 * v129) >> 8) + 1) >> 8;
                if ((_BYTE)v129)
                {
                  if (v129 == 255)
                  {
                    *v29 = PDM_19476(*v47, *(unsigned __int8 *)v29 ^ 0xFFu);
                  }
                  else
                  {
                    v130 = ~*(_BYTE *)v29 * v129 + 128;
                    DMplusDM_19477(v29, *v47, (unsigned __int16)(v130 + (v130 >> 8)) >> 8, *v29, ~(_BYTE)v129);
                  }
                }
              }
              ++v48;
              ++v47;
              v125 += v37 != 0;
              ++v29;
              --v128;
            }
            while (v128);
            goto LABEL_575;
          case 5:
            v131 = v4;
            v125 = v37;
            while (1)
            {
              v132 = *v48;
              if (*v48)
              {
                if (!v37)
                  goto LABEL_241;
                v133 = *v125 * v132 + ((*v125 * v132) >> 8) + 1;
                if (BYTE1(v133))
                  break;
              }
LABEL_242:
              ++v48;
              ++v47;
              v125 += v37 != 0;
              ++v29;
              if (!--v131)
                goto LABEL_575;
            }
            v132 = v133 >> 8;
LABEL_241:
            v134 = PDM_19476(*v47, v132);
            DMplusDM_19477(v29, v134, *v29, *v29, ~(_BYTE)v134);
            goto LABEL_242;
          case 6:
            v135 = v4;
            v125 = v37;
            while (1)
            {
              v136 = *v48;
              if (*v48)
              {
                if (!v37)
                  goto LABEL_249;
                v137 = *v125 * v136 + ((*v125 * v136) >> 8) + 1;
                if (BYTE1(v137))
                  break;
              }
LABEL_253:
              ++v48;
              ++v47;
              v125 += v37 != 0;
              ++v29;
              if (!--v135)
                goto LABEL_575;
            }
            v136 = v137 >> 8;
LABEL_249:
            if (*(_BYTE *)v29 != 0xFF)
            {
              if (~*(_BYTE *)v29 == 255)
                *v29 = PDM_19476(*v47, v136);
              else
                DplusDM_19478(v29, *v29, *v47, (unsigned __int16)(~*(_BYTE *)v29 * v136+ 128+ ((~*(_BYTE *)v29 * v136 + 128) >> 8)) >> 8);
            }
            goto LABEL_253;
          case 7:
            v138 = v4;
            v125 = v37;
            do
            {
              v139 = *v48;
              if (*v48)
              {
                if (v37)
                  v139 = (*v125 * v139 + ((*v125 * v139) >> 8) + 1) >> 8;
                if ((_BYTE)v139)
                {
                  if (v139 == 255)
                  {
                    *v29 = PDM_19476(*v29, *(unsigned __int8 *)v47);
                  }
                  else
                  {
                    v140 = *(unsigned __int8 *)v47 * v139 + 128;
                    DMplusDM_19477(v29, *v29, (unsigned __int16)(v140 + (v140 >> 8)) >> 8, *v29, ~(_BYTE)v139);
                  }
                }
              }
              ++v48;
              ++v47;
              v125 += v37 != 0;
              ++v29;
              --v138;
            }
            while (v138);
            goto LABEL_575;
          case 8:
            v141 = v4;
            v125 = v37;
            do
            {
              v142 = *v48;
              if (*v48)
              {
                if (v37)
                  v142 = (*v125 * v142 + ((*v125 * v142) >> 8) + 1) >> 8;
                if ((_BYTE)v142)
                {
                  if (v142 == 255)
                  {
                    *v29 = PDM_19476(*v29, *(unsigned __int8 *)v47 ^ 0xFFu);
                  }
                  else
                  {
                    v143 = (*(unsigned __int8 *)v47 ^ 0xFF) * v142 + 128;
                    DMplusDM_19477(v29, *v29, (unsigned __int16)(v143 + (v143 >> 8)) >> 8, *v29, ~(_BYTE)v142);
                  }
                }
              }
              ++v48;
              ++v47;
              v125 += v37 != 0;
              ++v29;
              --v141;
            }
            while (v141);
            goto LABEL_575;
          case 9:
            v289 = v42;
            v144 = v4;
            v145 = v37;
            while (1)
            {
              v146 = *v48;
              if (*v48)
              {
                if (!v37)
                  goto LABEL_280;
                v147 = *v145 * v146 + ((*v145 * v146) >> 8) + 1;
                if (BYTE1(v147))
                  break;
              }
LABEL_281:
              ++v48;
              ++v47;
              v145 += v37 != 0;
              ++v29;
              if (!--v144)
              {
                v37 = &v145[v294];
                v39 = v296;
                v29 += v295;
                v109 = v300;
                v42 = v289;
                goto LABEL_579;
              }
            }
            v146 = v147 >> 8;
LABEL_280:
            v148 = PDM_19476(*v47, v146);
            DMplusDM_19477(v29, v148, ~*(_BYTE *)v29, *v29, (v148 + ~(_BYTE)v146));
            goto LABEL_281;
          case 10:
            v149 = v4;
            v125 = v37;
            while (1)
            {
              v150 = *v48;
              if (*v48)
              {
                if (!v37)
                  goto LABEL_288;
                v151 = *v125 * v150 + ((*v125 * v150) >> 8) + 1;
                if (BYTE1(v151))
                  break;
              }
LABEL_289:
              ++v48;
              ++v47;
              v125 += v37 != 0;
              ++v29;
              if (!--v149)
                goto LABEL_575;
            }
            v150 = v151 >> 8;
LABEL_288:
            v152 = PDM_19476(*v47, v150);
            DMplusDM_19477(v29, v152, ~*(_BYTE *)v29, *v29, ~(_BYTE)v152);
            goto LABEL_289;
          case 11:
            v153 = v4;
            v125 = v37;
            while (1)
            {
              v154 = *v48;
              if (*v48)
              {
                if (!v37)
                  goto LABEL_296;
                v155 = *v125 * v154 + ((*v125 * v154) >> 8) + 1;
                if (BYTE1(v155))
                  break;
              }
LABEL_300:
              ++v48;
              ++v47;
              v125 += v37 != 0;
              ++v29;
              if (!--v153)
                goto LABEL_575;
            }
            v154 = v155 >> 8;
LABEL_296:
            v156 = PDM_19476(*v47, v154);
            if (v302)
              v158 = *v29;
            else
              v158 = -1;
            v19.n128_u64[0] = (unint64_t)DAplusdDA_19479(v29, *v29, v158, v156, v156, v157);
            goto LABEL_300;
          case 12:
            v159 = v4;
            v125 = v37;
            while (1)
            {
              v160 = *v48;
              if (*v48)
              {
                if (!v37)
                  goto LABEL_307;
                v161 = *v125 * v160 + ((*v125 * v160) >> 8) + 1;
                if (BYTE1(v161))
                  break;
              }
LABEL_308:
              ++v48;
              ++v47;
              v125 += v37 != 0;
              ++v29;
              if (!--v159)
                goto LABEL_575;
            }
            v160 = v161 >> 8;
LABEL_307:
            v162 = PDM_19476(*v47, v160);
            v163 = ((*v29 >> 8) & 0xFF00FF) + ((v162 >> 8) & 0xFF00FF);
            *v29 = (v163 << 8) & 0xFF00FF00 | ((*v29 & 0xFF00FF) + (v162 & 0xFF00FF)) & 0xFF00FF | (15
                                                                                                  * (v163 & 0x1000100 | (((*v29 & 0xFF00FF) + (v162 & 0xFF00FF)) >> 8) & 0x10001)) | (240 * (v163 & 0x1000100 | (((*v29 & 0xFF00FF) + (v162 & 0xFF00FF)) >> 8) & 0x10001));
            goto LABEL_308;
          case 13:
            v164 = v4;
            v165 = v37;
            while (1)
            {
              v166 = *v48;
              if (*v48)
              {
                if (v37)
                {
                  v167 = *v165 * v166 + ((*v165 * v166) >> 8) + 1;
                  if (!BYTE1(v167))
                    goto LABEL_322;
                  v166 = v167 >> 8;
                }
                v168 = PDM_19476(*v47, v166);
                if ((_BYTE)v168)
                {
                  v169 = v168;
                  if (v302)
                  {
                    v170 = *v29;
                    if (!*v29)
                      goto LABEL_321;
                  }
                  else
                  {
                    LOBYTE(v170) = -1;
                  }
                  v169 = PDAmultiplyPDA_19480(*v29, v170, v168, v168);
LABEL_321:
                  *v29 = v169;
                }
              }
LABEL_322:
              ++v48;
              ++v47;
              v165 += v37 != 0;
              ++v29;
              if (!--v164)
                goto LABEL_393;
            }
          case 14:
            v171 = v4;
            v165 = v37;
            while (1)
            {
              v172 = *v48;
              if (*v48)
              {
                if (v37)
                {
                  v173 = *v165 * v172 + ((*v165 * v172) >> 8) + 1;
                  if (!BYTE1(v173))
                    goto LABEL_336;
                  v172 = v173 >> 8;
                }
                v174 = PDM_19476(*v47, v172);
                if ((_BYTE)v174)
                {
                  v175 = v174;
                  if (v302)
                  {
                    v176 = *v29;
                    if (!*v29)
                      goto LABEL_335;
                  }
                  else
                  {
                    LOBYTE(v176) = -1;
                  }
                  v175 = PDAscreenPDA_19481(*v29, v176, v174, v174);
LABEL_335:
                  *v29 = v175;
                }
              }
LABEL_336:
              ++v48;
              ++v47;
              v165 += v37 != 0;
              ++v29;
              if (!--v171)
                goto LABEL_393;
            }
          case 15:
            v177 = v4;
            v165 = v37;
            while (1)
            {
              v178 = *v48;
              if (*v48)
              {
                if (v37)
                {
                  v179 = *v165 * v178 + ((*v165 * v178) >> 8) + 1;
                  if (!BYTE1(v179))
                    goto LABEL_350;
                  v178 = v179 >> 8;
                }
                v180 = PDM_19476(*v47, v178);
                if ((_BYTE)v180)
                {
                  v181 = v180;
                  if (v302)
                  {
                    v182 = *v29;
                    if (!*v29)
                      goto LABEL_349;
                  }
                  else
                  {
                    LOBYTE(v182) = -1;
                  }
                  v181 = PDAoverlayPDA_19482(*v29, v182, v180, v180);
LABEL_349:
                  *v29 = v181;
                }
              }
LABEL_350:
              ++v48;
              ++v47;
              v165 += v37 != 0;
              ++v29;
              if (!--v177)
                goto LABEL_393;
            }
          case 16:
            v183 = v4;
            v165 = v37;
            while (1)
            {
              v184 = *v48;
              if (*v48)
              {
                if (v37)
                {
                  v185 = *v165 * v184 + ((*v165 * v184) >> 8) + 1;
                  if (!BYTE1(v185))
                    goto LABEL_364;
                  v184 = v185 >> 8;
                }
                v186 = PDM_19476(*v47, v184);
                if ((_BYTE)v186)
                {
                  v187 = v186;
                  if (v302)
                  {
                    v188 = *v29;
                    if (!*v29)
                      goto LABEL_363;
                  }
                  else
                  {
                    LOBYTE(v188) = -1;
                  }
                  v187 = PDAdarkenPDA_19484(*v29, v188, v186, v186);
LABEL_363:
                  *v29 = v187;
                }
              }
LABEL_364:
              ++v48;
              ++v47;
              v165 += v37 != 0;
              ++v29;
              if (!--v183)
                goto LABEL_393;
            }
          case 17:
            v189 = v4;
            v165 = v37;
            while (1)
            {
              v190 = *v48;
              if (*v48)
              {
                if (v37)
                {
                  v191 = *v165 * v190 + ((*v165 * v190) >> 8) + 1;
                  if (!BYTE1(v191))
                    goto LABEL_378;
                  v190 = v191 >> 8;
                }
                v192 = PDM_19476(*v47, v190);
                if ((_BYTE)v192)
                {
                  v193 = v192;
                  if (v302)
                  {
                    v194 = *v29;
                    if (!*v29)
                      goto LABEL_377;
                  }
                  else
                  {
                    LOBYTE(v194) = -1;
                  }
                  v193 = PDAlightenPDA_19483(*v29, v194, v192, v192);
LABEL_377:
                  *v29 = v193;
                }
              }
LABEL_378:
              ++v48;
              ++v47;
              v165 += v37 != 0;
              ++v29;
              if (!--v189)
                goto LABEL_393;
            }
          case 18:
            v195 = v4;
            v165 = v37;
            while (1)
            {
              v196 = *v48;
              if (*v48)
              {
                if (v37)
                {
                  v197 = *v165 * v196 + ((*v165 * v196) >> 8) + 1;
                  if (!BYTE1(v197))
                    goto LABEL_392;
                  v196 = v197 >> 8;
                }
                v198 = PDM_19476(*v47, v196);
                if ((_BYTE)v198)
                {
                  v199 = v198;
                  if (v302)
                  {
                    v200 = *v29;
                    if (!*v29)
                      goto LABEL_391;
                  }
                  else
                  {
                    LOBYTE(v200) = -1;
                  }
                  v199 = PDAcolordodgePDA_19485(*v29, v200, v198, v198);
LABEL_391:
                  *v29 = v199;
                }
              }
LABEL_392:
              ++v48;
              ++v47;
              v165 += v37 != 0;
              ++v29;
              if (!--v195)
              {
LABEL_393:
                v37 = &v165[v294];
                goto LABEL_576;
              }
            }
          case 19:
            v125 = v37;
            v201 = v4;
            while (1)
            {
              v202 = *v48;
              if (*v48)
              {
                if (v37)
                {
                  v203 = *v125 * v202 + ((*v125 * v202) >> 8) + 1;
                  if (!BYTE1(v203))
                    goto LABEL_406;
                  v202 = v203 >> 8;
                }
                v204 = PDM_19476(*v47, v202);
                if ((_BYTE)v204)
                {
                  v205 = v204;
                  if (v302)
                  {
                    v206 = *v29;
                    if (!*v29)
                      goto LABEL_405;
                  }
                  else
                  {
                    LOBYTE(v206) = -1;
                  }
                  v205 = PDAcolorburnPDA_19486(*v29, v206, v204, v204);
LABEL_405:
                  *v29 = v205;
                }
              }
LABEL_406:
              ++v48;
              ++v47;
              v125 += v37 != 0;
              ++v29;
              if (!--v201)
                goto LABEL_575;
            }
          case 20:
            v125 = v37;
            v207 = v4;
            while (1)
            {
              v208 = *v48;
              if (*v48)
              {
                if (v37)
                {
                  v209 = *v125 * v208 + ((*v125 * v208) >> 8) + 1;
                  if (!BYTE1(v209))
                    goto LABEL_420;
                  v208 = v209 >> 8;
                }
                v210 = PDM_19476(*v47, v208);
                if ((_BYTE)v210)
                {
                  v211 = v210;
                  if (v302)
                  {
                    v212 = *v29;
                    if (!*v29)
                      goto LABEL_419;
                  }
                  else
                  {
                    LOBYTE(v212) = -1;
                  }
                  v211 = PDAsoftlightPDA_19488(*v29, v212, v210, v210);
LABEL_419:
                  *v29 = v211;
                }
              }
LABEL_420:
              ++v48;
              ++v47;
              v125 += v37 != 0;
              ++v29;
              if (!--v207)
                goto LABEL_575;
            }
          case 21:
            v125 = v37;
            v213 = v4;
            while (1)
            {
              v214 = *v48;
              if (*v48)
              {
                if (v37)
                {
                  v215 = *v125 * v214 + ((*v125 * v214) >> 8) + 1;
                  if (!BYTE1(v215))
                    goto LABEL_434;
                  v214 = v215 >> 8;
                }
                v216 = PDM_19476(*v47, v214);
                if ((_BYTE)v216)
                {
                  v217 = v216;
                  if (v302)
                  {
                    v218 = *v29;
                    if (!*v29)
                      goto LABEL_433;
                  }
                  else
                  {
                    LOBYTE(v218) = -1;
                  }
                  v217 = PDAhardlightPDA_19487(*v29, v218, v216, v216);
LABEL_433:
                  *v29 = v217;
                }
              }
LABEL_434:
              ++v48;
              ++v47;
              v125 += v37 != 0;
              ++v29;
              if (!--v213)
                goto LABEL_575;
            }
          case 22:
            v125 = v37;
            v219 = v4;
            while (1)
            {
              v220 = *v48;
              if (*v48)
              {
                if (v37)
                {
                  v221 = *v125 * v220 + ((*v125 * v220) >> 8) + 1;
                  if (!BYTE1(v221))
                    goto LABEL_448;
                  v220 = v221 >> 8;
                }
                v222 = PDM_19476(*v47, v220);
                if ((_BYTE)v222)
                {
                  v223 = v222;
                  if (v302)
                  {
                    v224 = *v29;
                    if (!*v29)
                      goto LABEL_447;
                  }
                  else
                  {
                    LOBYTE(v224) = -1;
                  }
                  v223 = PDAdifferencePDA_19489(*v29, v224, v222, v222);
LABEL_447:
                  *v29 = v223;
                }
              }
LABEL_448:
              ++v48;
              ++v47;
              v125 += v37 != 0;
              ++v29;
              if (!--v219)
                goto LABEL_575;
            }
          case 23:
            v125 = v37;
            v225 = v4;
            while (1)
            {
              v226 = *v48;
              if (*v48)
              {
                if (v37)
                {
                  v227 = *v125 * v226 + ((*v125 * v226) >> 8) + 1;
                  if (!BYTE1(v227))
                    goto LABEL_462;
                  v226 = v227 >> 8;
                }
                v228 = PDM_19476(*v47, v226);
                if ((_BYTE)v228)
                {
                  v229 = v228;
                  if (v302)
                  {
                    v230 = *v29;
                    if (!*v29)
                      goto LABEL_461;
                  }
                  else
                  {
                    LOBYTE(v230) = -1;
                  }
                  v229 = PDAexclusionPDA_19490(*v29, v230, v228, v228);
LABEL_461:
                  *v29 = v229;
                }
              }
LABEL_462:
              ++v48;
              ++v47;
              v125 += v37 != 0;
              ++v29;
              if (!--v225)
                goto LABEL_575;
            }
          case 24:
            v125 = v37;
            v231 = v4;
            while (1)
            {
              v232 = *v48;
              if (*v48)
              {
                if (v37)
                {
                  v233 = *v125 * v232 + ((*v125 * v232) >> 8) + 1;
                  if (!BYTE1(v233))
                    goto LABEL_476;
                  v232 = v233 >> 8;
                }
                v234 = PDM_19476(*v47, v232);
                if ((_BYTE)v234)
                {
                  v235 = v234;
                  if (v302)
                  {
                    v236 = *v29;
                    if (!*v29)
                      goto LABEL_475;
                  }
                  else
                  {
                    LOBYTE(v236) = -1;
                  }
                  v235 = PDAhuePDA_19491(*v29, v236, v234, v234);
LABEL_475:
                  *v29 = v235;
                }
              }
LABEL_476:
              ++v48;
              ++v47;
              v125 += v37 != 0;
              ++v29;
              if (!--v231)
                goto LABEL_575;
            }
          case 25:
            v125 = v37;
            v237 = v4;
            while (1)
            {
              v238 = *v48;
              if (*v48)
              {
                if (v37)
                {
                  v239 = *v125 * v238 + ((*v125 * v238) >> 8) + 1;
                  if (!BYTE1(v239))
                    goto LABEL_490;
                  v238 = v239 >> 8;
                }
                v240 = PDM_19476(*v47, v238);
                if ((_BYTE)v240)
                {
                  v241 = v240;
                  if (v302)
                  {
                    v242 = *v29;
                    if (!*v29)
                      goto LABEL_489;
                  }
                  else
                  {
                    LOBYTE(v242) = -1;
                  }
                  v241 = PDAsaturationPDA_19492(*v29, v242, v240, v240);
LABEL_489:
                  *v29 = v241;
                }
              }
LABEL_490:
              ++v48;
              ++v47;
              v125 += v37 != 0;
              ++v29;
              if (!--v237)
                goto LABEL_575;
            }
          case 26:
            v125 = v37;
            v243 = v4;
            while (1)
            {
              v244 = *v48;
              if (*v48)
              {
                if (v37)
                {
                  v245 = *v125 * v244 + ((*v125 * v244) >> 8) + 1;
                  if (!BYTE1(v245))
                    goto LABEL_504;
                  v244 = v245 >> 8;
                }
                v246 = PDM_19476(*v47, v244);
                if ((_BYTE)v246)
                {
                  if (v302)
                  {
                    v247 = *v29;
                    if (!*v29)
                      goto LABEL_503;
                  }
                  else
                  {
                    LOBYTE(v247) = -1;
                  }
                  v246 = PDAluminosityPDA_19493(v246, v246, *v29, v247);
LABEL_503:
                  *v29 = v246;
                }
              }
LABEL_504:
              ++v48;
              ++v47;
              v125 += v37 != 0;
              ++v29;
              if (!--v243)
                goto LABEL_575;
            }
          case 27:
            v125 = v37;
            v248 = v4;
            while (1)
            {
              v249 = *v48;
              if (*v48)
              {
                if (v37)
                {
                  v250 = *v125 * v249 + ((*v125 * v249) >> 8) + 1;
                  if (!BYTE1(v250))
                    goto LABEL_518;
                  v249 = v250 >> 8;
                }
                v251 = PDM_19476(*v47, v249);
                if ((_BYTE)v251)
                {
                  v252 = v251;
                  if (v302)
                  {
                    v253 = *v29;
                    if (!*v29)
                      goto LABEL_517;
                  }
                  else
                  {
                    LOBYTE(v253) = -1;
                  }
                  v252 = PDAluminosityPDA_19493(*v29, v253, v251, v251);
LABEL_517:
                  *v29 = v252;
                }
              }
LABEL_518:
              ++v48;
              ++v47;
              v125 += v37 != 0;
              ++v29;
              if (!--v248)
                goto LABEL_575;
            }
          case 28:
            v125 = v37;
            v254 = v4;
            while (1)
            {
              v255 = *v48;
              if (*v48)
              {
                if (v37)
                {
                  v256 = *v125 * v255 + ((*v125 * v255) >> 8) + 1;
                  if (!BYTE1(v256))
                    goto LABEL_532;
                  v255 = v256 >> 8;
                }
                v257 = PDM_19476(*v47, v255);
                if ((_BYTE)v257)
                {
                  v258 = v257;
                  if (v302)
                  {
                    v259 = *v29;
                    if (!*v29)
                      goto LABEL_531;
                  }
                  else
                  {
                    LOBYTE(v259) = -1;
                  }
                  v258 = PDAtranspose_huePDA_19494(*v29, v259, v257, v257);
LABEL_531:
                  *v29 = v258;
                }
              }
LABEL_532:
              ++v48;
              ++v47;
              v125 += v37 != 0;
              ++v29;
              if (!--v254)
                goto LABEL_575;
            }
          case 29:
            v125 = v37;
            v260 = v4;
            while (1)
            {
              v261 = *v48;
              if (*v48)
              {
                if (v37)
                {
                  v262 = *v125 * v261 + ((*v125 * v261) >> 8) + 1;
                  if (!BYTE1(v262))
                    goto LABEL_546;
                  v261 = v262 >> 8;
                }
                v263 = PDM_19476(*v47, v261);
                if ((_BYTE)v263)
                {
                  v264 = v263;
                  if (v302)
                  {
                    v265 = *v29;
                    if (!*v29)
                      goto LABEL_545;
                  }
                  else
                  {
                    LOBYTE(v265) = -1;
                  }
                  v264 = PDAtranspose_saturationPDA_19495(*v29, v265, v263, v263);
LABEL_545:
                  *v29 = v264;
                }
              }
LABEL_546:
              ++v48;
              ++v47;
              v125 += v37 != 0;
              ++v29;
              if (!--v260)
                goto LABEL_575;
            }
          case 30:
            v125 = v37;
            v266 = v4;
            while (1)
            {
              v267 = *v48;
              if (*v48)
              {
                if (v37)
                {
                  v268 = *v125 * v267 + ((*v125 * v267) >> 8) + 1;
                  if (!BYTE1(v268))
                    goto LABEL_560;
                  v267 = v268 >> 8;
                }
                v269 = PDM_19476(*v47, v267);
                if ((_BYTE)v269)
                {
                  if (v302)
                  {
                    v270 = *v29;
                    if (!*v29)
                      goto LABEL_559;
                  }
                  else
                  {
                    LOBYTE(v270) = -1;
                  }
                  v269 = PDAtranspose_luminosityPDA_19496(v269, v269, *v29, v270);
LABEL_559:
                  *v29 = v269;
                }
              }
LABEL_560:
              ++v48;
              ++v47;
              v125 += v37 != 0;
              ++v29;
              if (!--v266)
                goto LABEL_575;
            }
          case 31:
            v125 = v37;
            v271 = v4;
            break;
          default:
            v109 = v300;
            v34 = v298;
            goto LABEL_580;
        }
        while (1)
        {
          v272 = *v48;
          if (*v48)
          {
            if (v37)
            {
              v273 = *v125 * v272 + ((*v125 * v272) >> 8) + 1;
              if (!BYTE1(v273))
                goto LABEL_574;
              v272 = v273 >> 8;
            }
            v274 = PDM_19476(*v47, v272);
            if ((_BYTE)v274)
            {
              v275 = v274;
              if (v302)
              {
                v276 = *v29;
                if (!*v29)
                  goto LABEL_573;
              }
              else
              {
                LOBYTE(v276) = -1;
              }
              v275 = PDAtranspose_luminosityPDA_19496(*v29, v276, v274, v274);
LABEL_573:
              *v29 = v275;
            }
          }
LABEL_574:
          ++v48;
          ++v47;
          v125 += v37 != 0;
          ++v29;
          if (!--v271)
          {
LABEL_575:
            v37 = &v125[v294];
LABEL_576:
            v58 = v295;
            v39 = v296;
LABEL_577:
            v29 += v58;
            goto LABEL_578;
          }
        }
      }
      if (!shape_enum_clip_scan((uint64_t)v34, (_DWORD *)v37 - 4))
        goto LABEL_607;
    }
    v299 -= v44;
    if (v299 < 1)
      break;
    v33 += v39[16] * v44;
    v42 += v39[17] * v44;
    v29 += v285 * v44;
    v35 = v43;
  }
LABEL_607:
  if (v34)
    free(v34);
LABEL_609:
  if (v287)
    free(v287);
}

void rgba32_shade_axial_RGB(uint64_t a1, uint64_t a2, uint64_t a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, int8x8_t a12)
{
  float v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  float v21;
  float v22;
  float v23;
  float v24;
  int v25;
  int v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int16 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  unsigned __int16 *v39;
  unsigned __int16 v40;
  int v41;
  int v42;
  unsigned __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  char v49;
  unsigned __int16 *v50;
  unsigned __int16 *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  int32x2_t v56;
  int32x2_t v57;
  int v58;
  int32x2_t v59;
  int32x2_t v60;
  __int8 *v61;
  int32x2_t v62;
  int8x8_t v63;
  int32x2_t v64;
  int32x4_t v65;
  int v66;

  v12 = *(float *)(a1 + 280);
  v13 = *(float *)(a1 + 296)
      + (float)((float)(*(float *)(a1 + 288) * (float)(*(float *)(*(_QWORD *)(a1 + 272) + 4) * (float)a3))
              + (float)(v12 * (float)(*(float *)(*(_QWORD *)(a1 + 272) + 4) * (float)a2)));
  v14 = a1 + 368;
  v15 = *(_QWORD *)(a1 + 368);
  v16 = ((unint64_t)a3 >> 4) & 0xF0;
  v17 = v15 + v16;
  if (v15)
    v18 = v15 + v16;
  else
    v18 = a1 + 368;
  if (v15)
    v19 = 15;
  else
    v19 = 0;
  v21 = *(float *)(a1 + 336);
  v22 = *(float *)(a1 + 344);
  v23 = *(float *)(a1 + 304);
  v24 = *(float *)(a1 + 308);
  v25 = *(_DWORD *)(a1 + 320);
  v26 = *(_DWORD *)(a1 + 324);
  v29 = a1 + 144;
  v27 = *(_DWORD **)(a1 + 144);
  v28 = *(_QWORD *)(v29 + 8);
  v30 = *(unsigned __int16 **)(a1 + 376);
  v31 = *(_QWORD *)(a1 + 360);
  if (v12 != 0.0)
  {
    if (v15)
      v37 = (a2 >> 8) & 0xF;
    else
      LOBYTE(v37) = 0;
    while (1)
    {
      v38 = v25;
      if (v13 >= v23)
      {
        v38 = v26;
        if (v13 <= v24)
          v38 = (int)(float)(v22 * (float)(v13 - v21));
      }
      if (v38 < 0)
      {
        if (!v30)
        {
          v49 = 0;
          goto LABEL_40;
        }
        v48 = *(unsigned __int8 *)(v18 + v37);
        v44 = v48 + *v30;
        v45 = v48 + v30[1];
        v46 = v48 + v30[2];
        v47 = v48 + v30[3];
      }
      else
      {
        v39 = (unsigned __int16 *)(v31 + 8 * v38);
        v40 = v39[1];
        v41 = *(unsigned __int8 *)(v18 + v37);
        v42 = v39[2];
        v43 = v39[3];
        v44 = v41 + *v39;
        v45 = v41 + v40;
        v46 = v41 + v42;
        v47 = v41 + v43;
      }
      *(_DWORD *)v28 = (v46 | (v44 << 16)) & 0xFF00FF00 | (HIBYTE(v45) << 16) | HIBYTE(v47);
      v49 = -1;
LABEL_40:
      LOBYTE(v37) = (v37 + 1) & v19;
      v13 = v12 + v13;
      v28 += 4;
      *(_BYTE *)v27 = v49;
      v27 = (_DWORD *)((char *)v27 + 1);
      if (!--a4)
        return;
    }
  }
  if (v15)
    v32 = v17;
  else
    v32 = v14;
  if (v15)
    LODWORD(v33) = ((a2 >> 8) + 1) & 0xF;
  else
    LODWORD(v33) = 0;
  if (v15)
    LODWORD(v34) = (a2 >> 8) & 0xF;
  else
    LODWORD(v34) = 0;
  if (v15)
    v35 = 15;
  else
    v35 = 0;
  if (v13 >= v23)
  {
    v25 = v26;
    if (v13 <= v24)
      v25 = (int)(float)(v22 * (float)(v13 - v21));
  }
  if ((v25 & 0x80000000) == 0 || v30)
  {
    v50 = (unsigned __int16 *)(v31 + 8 * v25);
    if (v25 < 0)
      v51 = v30;
    else
      v51 = v50;
    v52 = *v51;
    v53 = v51[3];
    v54 = v51[2];
    v55 = v51[1];
    if (v15)
    {
      v56 = vdup_n_s32(v52);
      v57 = vdup_n_s32(v55);
      v58 = a4 + 4;
      v59 = vdup_n_s32(v54);
      v60 = vdup_n_s32(v53);
      do
      {
        v61 = (__int8 *)(v32 + v34);
        v34 = ((_DWORD)v34 + 1) & v35;
        a12.i8[0] = *v61;
        a12.i8[4] = *(_BYTE *)(v32 + v33);
        v62 = (int32x2_t)vand_s8(a12, (int8x8_t)0xFF000000FFLL);
        v63 = vorr_s8(vorr_s8((int8x8_t)(*(_QWORD *)&vshl_n_s32(vadd_s32(v56, v62), 0x10uLL) & 0xFF00FFFFFF00FFFFLL), vand_s8((int8x8_t)vadd_s32(v59, v62), (int8x8_t)0xFF000000FF00)), vorr_s8(vand_s8((int8x8_t)vshl_n_s32(vadd_s32(v57, v62), 8uLL), (int8x8_t)0xFF000000FF0000), (int8x8_t)(*(_QWORD *)&vshr_n_u32((uint32x2_t)vadd_s32(v60, v62), 8uLL) & 0xFFFFFEFFFFFFFEFFLL)));
        *(int8x8_t *)v28 = v63;
        v33 = ((_DWORD)v33 + 1) & v35;
        v63.i8[0] = *(_BYTE *)(v32 + v34);
        v63.i8[4] = *(_BYTE *)(v32 + v33);
        v64 = (int32x2_t)vand_s8(v63, (int8x8_t)0xFF000000FFLL);
        a12 = vorr_s8(vorr_s8((int8x8_t)(*(_QWORD *)&vshl_n_s32(vadd_s32(v56, v64), 0x10uLL) & 0xFF00FFFFFF00FFFFLL), vand_s8((int8x8_t)vadd_s32(v59, v64), (int8x8_t)0xFF000000FF00)), vorr_s8(vand_s8((int8x8_t)vshl_n_s32(vadd_s32(v57, v64), 8uLL), (int8x8_t)0xFF000000FF0000), (int8x8_t)(*(_QWORD *)&vshr_n_u32((uint32x2_t)vadd_s32(v60, v64), 8uLL) & 0xFFFFFEFFFFFFFEFFLL)));
        *(double *)(v28 + 8) = *(double *)&a12;
        *v27++ = -1;
        v58 -= 4;
        v28 += 16;
      }
      while (v58 > 4);
    }
    else
    {
      v65 = vdupq_n_s32((v52 << 16) & 0xFF000000 | (v53 >> 8) & 0xFF00FFFF | v54 & 0xFF00 | (BYTE1(v55) << 16));
      v66 = a4 + 4;
      do
      {
        *(int32x4_t *)v28 = v65;
        v28 += 16;
        *v27++ = -1;
        v66 -= 4;
      }
      while (v66 > 4);
    }
  }
  else
  {
    if (a4 >= 4)
      v36 = 4;
    else
      v36 = a4;
    bzero(v27, ((a4 - v36 + 3) & 0xFFFFFFFC) + 4);
  }
}

uint64_t (*__colorspace_with_name_from_icc_data_block_invoke_4())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncVerifyDisplayP3");
  v1 = colorsync_smart_null_6743;
  if (result)
    v1 = result;
  colorspace_with_name_from_icc_data_f_63 = (uint64_t (*)(_QWORD))v1;
  return result;
}

uint64_t (*__colorspace_with_name_from_icc_data_block_invoke_3())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncVerifyGenericGrayGamma2_2");
  v1 = colorsync_smart_null_6743;
  if (result)
    v1 = result;
  colorspace_with_name_from_icc_data_f_58 = (uint64_t (*)(_QWORD))v1;
  return result;
}

uint64_t (*__colorspace_with_name_from_icc_data_block_invoke_2())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileContainsTag");
  v1 = colorsync_smart_null_6743;
  if (result)
    v1 = result;
  colorspace_with_name_from_icc_data_f_54 = (uint64_t (*)(_QWORD, _QWORD))v1;
  return result;
}

uint64_t (*__colorspace_with_name_from_icc_data_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileCreate");
  v1 = colorsync_smart_null_6743;
  if (result)
    v1 = result;
  colorspace_with_name_from_icc_data_f = (uint64_t (*)(_QWORD, _QWORD))v1;
  return result;
}

const void *__pdf_page_draw_in_context_block_invoke()
{
  return get_BOOLean_property("CGPDFHighlightContent", copy_preference_value, (BOOL *)&pdf_page_draw_in_context_highlight_content);
}

uint64_t CGIOSurfaceContextCreateImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = a1;
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 8)
  {
    if (iosurface_context_vtable_once != -1)
    {
      dispatch_once_f(&iosurface_context_vtable_once, 0, (dispatch_function_t)load_iosurface_context_vtable);
      v8 = a1;
    }
    return (*(uint64_t (**)(_QWORD, _QWORD))(vtable + 32))(*(_QWORD *)(v8 + 40), *(_QWORD *)(v8 + 32));
  }
  else
  {
    handle_invalid_context((char)"CGIOSurfaceContextCreateImage", a1, a3, a4, a5, a6, a7, a8);
    return 0;
  }
}

uint64_t *__color_space_state_create_itur_709_block_invoke_2()
{
  uint64_t *result;
  uint64_t v1;

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncITUR709Profile")) != 0)
  {
    v1 = *result;
  }
  else
  {
    v1 = 0;
  }
  color_space_state_create_itur_709_s = v1;
  return result;
}

uint64_t (*__color_space_state_create_itur_709_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileCreateWithName");
  v1 = colorsync_smart_null_1622;
  if (result)
    v1 = result;
  color_space_state_create_itur_709_f = v1;
  return result;
}

void pattern_finalize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v9;
  const void *v10;
  void (*v11)(_QWORD);
  char v12;

  if (!*(_BYTE *)(a1 + 72))
    _CGHandleAssert("pattern_finalize", 480, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/API/CGPattern.c", "pattern->should_free", "Method to free pattern missing", a6, a7, a8, v12);
  v9 = *(const void **)(a1 + 88);
  if (v9)
    CFRelease(v9);
  v10 = *(const void **)(a1 + 96);
  if (v10)
    CFRelease(v10);
  if (pattern_notification_center)
    CGNotificationCenterPostNotification(pattern_notification_center, CFSTR("kCGPatternWillDeallocate"), (__CFString *)a1);
  v11 = *(void (**)(_QWORD))(a1 + 176);
  if (v11)
    v11(*(_QWORD *)(a1 + 80));
}

uint64_t (*__colorspace_with_name_from_icc_data_block_invoke_26())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncVerifyProfileByName");
  v1 = colorsync_smart_null_6743;
  if (result)
    v1 = result;
  colorspace_with_name_from_icc_data_f_165 = v1;
  return result;
}

uint64_t (*__colorspace_with_name_from_icc_data_block_invoke_24())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncVerifyProfileByName");
  v1 = colorsync_smart_null_6743;
  if (result)
    v1 = result;
  colorspace_with_name_from_icc_data_f_156 = v1;
  return result;
}

uint64_t (*__colorspace_with_name_from_icc_data_block_invoke_22())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncVerifyProfileByName");
  v1 = colorsync_smart_null_6743;
  if (result)
    v1 = result;
  colorspace_with_name_from_icc_data_f_147 = v1;
  return result;
}

uint64_t (*__colorspace_with_name_from_icc_data_block_invoke_20())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncVerifyProfileByName");
  v1 = colorsync_smart_null_6743;
  if (result)
    v1 = result;
  colorspace_with_name_from_icc_data_f_138 = v1;
  return result;
}

uint64_t (*__colorspace_with_name_from_icc_data_block_invoke_18())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncVerifyProfileByName");
  v1 = colorsync_smart_null_6743;
  if (result)
    v1 = result;
  colorspace_with_name_from_icc_data_f_129 = v1;
  return result;
}

uint64_t (*__colorspace_with_name_from_icc_data_block_invoke_16())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncVerifyProfileByName");
  v1 = colorsync_smart_null_6743;
  if (result)
    v1 = result;
  colorspace_with_name_from_icc_data_f_120 = v1;
  return result;
}

uint64_t (*__colorspace_with_name_from_icc_data_block_invoke_14())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncVerifyProfileByName");
  v1 = colorsync_smart_null_6743;
  if (result)
    v1 = result;
  colorspace_with_name_from_icc_data_f_111 = v1;
  return result;
}

uint64_t (*__colorspace_with_name_from_icc_data_block_invoke_12())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncVerifyProfileByName");
  v1 = colorsync_smart_null_6743;
  if (result)
    v1 = result;
  colorspace_with_name_from_icc_data_f_102 = v1;
  return result;
}

uint64_t (*__colorspace_with_name_from_icc_data_block_invoke_10())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncVerifyProfileByName");
  v1 = colorsync_smart_null_6743;
  if (result)
    v1 = result;
  colorspace_with_name_from_icc_data_f_93 = v1;
  return result;
}

uint64_t *__color_space_state_create_romm_rgb_block_invoke_2()
{
  uint64_t *result;
  uint64_t v1;

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncROMMRGBProfile")) != 0)
  {
    v1 = *result;
  }
  else
  {
    v1 = 0;
  }
  color_space_state_create_romm_rgb_s = v1;
  return result;
}

uint64_t *__color_space_state_create_itur_2020_sRGB_gamma_block_invoke_2()
{
  uint64_t *result;
  uint64_t v1;

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncITUR2020_sRGBGammaProfile")) != 0)
  {
    v1 = *result;
  }
  else
  {
    v1 = 0;
  }
  color_space_state_create_itur_2020_sRGB_gamma_s = v1;
  return result;
}

uint64_t *__color_space_state_create_itur_2020_block_invoke_2()
{
  uint64_t *result;
  uint64_t v1;

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncITUR2020Profile")) != 0)
  {
    v1 = *result;
  }
  else
  {
    v1 = 0;
  }
  color_space_state_create_itur_2020_s = v1;
  return result;
}

uint64_t *__color_space_state_create_adobe_rgb_1998_block_invoke_2()
{
  uint64_t *result;
  uint64_t v1;

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncAdobeRGB1998Profile")) != 0)
  {
    v1 = *result;
  }
  else
  {
    v1 = 0;
  }
  color_space_state_create_adobe_rgb_1998_s = v1;
  return result;
}

CFDictionaryRef __get_masking_options_block_invoke()
{
  CFDictionaryRef result;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  keys[0] = CFSTR("kCGColorTransformCreateMask");
  values = (void *)*MEMORY[0x1E0C9AE50];
  result = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  get_masking_options_options = (uint64_t)result;
  return result;
}

uint64_t (*__colorspace_with_name_from_icc_data_block_invoke_9())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncVerifyDisplayP3ITU709");
  v1 = colorsync_smart_null_6743;
  if (result)
    v1 = result;
  colorspace_with_name_from_icc_data_f_88 = (uint64_t (*)(_QWORD))v1;
  return result;
}

uint64_t (*__colorspace_with_name_from_icc_data_block_invoke_8())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncVerifyCoreVideo709");
  v1 = colorsync_smart_null_6743;
  if (result)
    v1 = result;
  colorspace_with_name_from_icc_data_f_83 = (uint64_t (*)(_QWORD))v1;
  return result;
}

uint64_t (*__colorspace_with_name_from_icc_data_block_invoke_7())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncVerifyGenericLab");
  v1 = colorsync_smart_null_6743;
  if (result)
    v1 = result;
  colorspace_with_name_from_icc_data_f_78 = (uint64_t (*)(_QWORD))v1;
  return result;
}

uint64_t (*__colorspace_with_name_from_icc_data_block_invoke_6())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncVerifyAdobeRGB");
  v1 = colorsync_smart_null_6743;
  if (result)
    v1 = result;
  colorspace_with_name_from_icc_data_f_73 = (uint64_t (*)(_QWORD))v1;
  return result;
}

uint64_t (*__colorspace_with_name_from_icc_data_block_invoke_5())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncVerifySRGB");
  v1 = colorsync_smart_null_6743;
  if (result)
    v1 = result;
  colorspace_with_name_from_icc_data_f_68 = (uint64_t (*)(_QWORD))v1;
  return result;
}

uint64_t *__colorspace_with_name_from_icc_data_block_invoke_25()
{
  uint64_t *result;
  uint64_t v1;

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncITUR709_HLGProfile")) != 0)
  {
    v1 = *result;
  }
  else
  {
    v1 = 0;
  }
  colorspace_with_name_from_icc_data_s_160 = v1;
  return result;
}

uint64_t *__colorspace_with_name_from_icc_data_block_invoke_23()
{
  uint64_t *result;
  uint64_t v1;

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncITUR709_PQProfile")) != 0)
  {
    v1 = *result;
  }
  else
  {
    v1 = 0;
  }
  colorspace_with_name_from_icc_data_s_151 = v1;
  return result;
}

uint64_t *__colorspace_with_name_from_icc_data_block_invoke_21()
{
  uint64_t *result;
  uint64_t v1;

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncITUR2100_PQProfile")) != 0)
  {
    v1 = *result;
  }
  else
  {
    v1 = 0;
  }
  colorspace_with_name_from_icc_data_s_142 = v1;
  return result;
}

uint64_t *__colorspace_with_name_from_icc_data_block_invoke_19()
{
  uint64_t *result;
  uint64_t v1;

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncITUR2020_PQProfile")) != 0)
  {
    v1 = *result;
  }
  else
  {
    v1 = 0;
  }
  colorspace_with_name_from_icc_data_s_133 = v1;
  return result;
}

uint64_t *__colorspace_with_name_from_icc_data_block_invoke_17()
{
  uint64_t *result;
  uint64_t v1;

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncDisplayP3_PQProfile")) != 0)
  {
    v1 = *result;
  }
  else
  {
    v1 = 0;
  }
  colorspace_with_name_from_icc_data_s_124 = v1;
  return result;
}

uint64_t *__colorspace_with_name_from_icc_data_block_invoke_15()
{
  uint64_t *result;
  uint64_t v1;

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncDisplayP3_HLGProfile")) != 0)
  {
    v1 = *result;
  }
  else
  {
    v1 = 0;
  }
  colorspace_with_name_from_icc_data_s_115 = v1;
  return result;
}

uint64_t *__colorspace_with_name_from_icc_data_block_invoke_13()
{
  uint64_t *result;
  uint64_t v1;

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncITUR2100_HLGProfile")) != 0)
  {
    v1 = *result;
  }
  else
  {
    v1 = 0;
  }
  colorspace_with_name_from_icc_data_s_106 = v1;
  return result;
}

uint64_t *__colorspace_with_name_from_icc_data_block_invoke_11()
{
  uint64_t *result;
  uint64_t v1;

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncITUR2020_HLGProfile")) != 0)
  {
    v1 = *result;
  }
  else
  {
    v1 = 0;
  }
  colorspace_with_name_from_icc_data_s = v1;
  return result;
}

uint64_t (*__color_space_state_create_romm_rgb_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileCreateWithName");
  v1 = colorsync_smart_null_1622;
  if (result)
    v1 = result;
  color_space_state_create_romm_rgb_f = v1;
  return result;
}

uint64_t (*__color_space_state_create_itur_2020_sRGB_gamma_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileCreateWithName");
  v1 = colorsync_smart_null_1622;
  if (result)
    v1 = result;
  color_space_state_create_itur_2020_sRGB_gamma_f = v1;
  return result;
}

uint64_t (*__color_space_state_create_itur_2020_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileCreateWithName");
  v1 = colorsync_smart_null_1622;
  if (result)
    v1 = result;
  color_space_state_create_itur_2020_f = v1;
  return result;
}

uint64_t (*__color_space_state_create_icc_with_data_block_invoke_3())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncCreateOutputPoppyProfile");
  v1 = colorsync_smart_null_6743;
  if (result)
    v1 = result;
  color_space_state_create_icc_with_data_f_15 = (uint64_t (*)(_QWORD))v1;
  return result;
}

uint64_t (*__color_space_state_create_icc_with_data_block_invoke_2())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileVerify");
  v1 = colorsync_smart_null_6743;
  if (result)
    v1 = result;
  color_space_state_create_icc_with_data_f_10 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v1;
  return result;
}

uint64_t (*__color_space_state_create_icc_with_data_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileCreate");
  v1 = colorsync_smart_null_6743;
  if (result)
    v1 = result;
  color_space_state_create_icc_with_data_f = (uint64_t (*)(_QWORD, _QWORD))v1;
  return result;
}

uint64_t (*__color_space_state_create_adobe_rgb_1998_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileCreateWithName");
  v1 = colorsync_smart_null_1622;
  if (result)
    v1 = result;
  color_space_state_create_adobe_rgb_1998_f = v1;
  return result;
}

uint64_t CGPDFScannerScanInit()
{
  pthread_key_create((pthread_key_t *)&scanner_frame_key, 0);
  return pthread_key_create((pthread_key_t *)&scanner_bailout_key, 0);
}

int CGFontGetDescent(CGFontRef font)
{
  _DWORD *font_info;

  font_info = get_font_info(font);
  if (font_info)
    LODWORD(font_info) = font_info[4];
  return (int)font_info;
}

BOOL CGClipStackIsInfinite(uint64_t a1)
{
  CGRect v2;

  if (!a1)
    return 1;
  if (*(_QWORD *)(a1 + 120))
    return 0;
  v2.origin.x = -8.98846567e307;
  v2.size.width = 1.79769313e308;
  v2.origin.y = -8.98846567e307;
  v2.size.height = 1.79769313e308;
  return CGRectEqualToRect(*(CGRect *)(a1 + 16), v2);
}

CFDictionaryRef __img_blocks_options_block_invoke()
{
  void *v0;
  CFDictionaryRef result;
  void *values[2];
  void *keys[3];

  keys[2] = *(void **)MEMORY[0x1E0C80C00];
  keys[0] = CFSTR("kCGImageBlockFormatRequest");
  keys[1] = CFSTR("kCGImageBlockSingletonRequest");
  v0 = (void *)*MEMORY[0x1E0C9AE50];
  values[0] = CFSTR("kCGImageBlockFormatBGRx8");
  values[1] = v0;
  result = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  img_blocks_options_options_singleton = (uint64_t)result;
  return result;
}

void RGBAf16_image_mark(uint64_t a1, uint64_t a2, unsigned int a3, __n128 a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int *v7;
  unint64_t v8;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  void *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  void *v39;
  void (*v40)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float16x4_t *v44;
  uint64_t v45;
  unsigned int v46;
  float v47;
  int v48;
  _BYTE *v49;
  int v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  int v55;
  BOOL v56;
  int v57;
  int v58;
  char v59[8];
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __n128 v71;
  int v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned int *)(a1 + 4);
  v72 = *(_DWORD *)(a1 + 8);
  v5 = *(int *)(a1 + 28);
  v6 = *(_QWORD *)(a1 + 40);
  v77 = *(_QWORD *)(a1 + 48);
  a4.n128_u32[0] = *(_DWORD *)(a2 + 184);
  v7 = *(int **)(a1 + 136);
  v73 = *(_QWORD *)(a2 + 96);
  v75 = *(_QWORD *)(a2 + 104);
  v78 = 0;
  *(_QWORD *)(a2 + 264) = &v78;
  v66 = (int)v4;
  v8 = ((int)v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if ((int)v8 <= 0x1FFFFFF)
  {
    v71 = a4;
    v76 = *(int *)(a1 + 16);
    v74 = (void *)*(int *)(a1 + 12);
    v12 = *(int *)(a2 + 16);
    v13 = (v12 + 10) * v8;
    if (v13 > 65439)
    {
      v16 = (char *)malloc_type_calloc(1uLL, v13 + 96, 0x7656A993uLL);
      v15 = v16;
      v18 = v16;
      if (!v16)
        return;
    }
    else
    {
      MEMORY[0x1E0C80A78](a1, a4);
      v15 = &v59[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
      bzero(v15, v14);
      v18 = 0;
    }
    v63 = v18;
    v67 = a3;
    v19 = v5 >> 3;
    v20 = (unint64_t)(v15 + 15) & 0xFFFFFFFFFFFFFFF0;
    v21 = v20 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    if ((_DWORD)v12)
      v22 = 8 * v8;
    else
      v22 = 0;
    v23 = v21 + v22;
    *(_QWORD *)(a2 + 144) = v20;
    *(_QWORD *)(a2 + 152) = v21 + v22;
    *(_QWORD *)(a2 + 160) = v21;
    v24 = v6 + 8 * ((_QWORD)v74 + v19 * v76);
    v25 = v66;
    v62 = v5 >> 3;
    v69 = v19 - v66;
    v26 = *(int *)(a1 + 104);
    v27 = *(_DWORD *)(a1 + 108);
    v28 = *(unsigned __int8 *)(a1 + 2);
    if (v28 == 6 || v28 == 1)
    {
      v29 = v73;
      if (v7)
      {
        v30 = 0;
        LODWORD(v76) = 0;
        v31 = *(int *)(a1 + 124);
        v32 = (uint64_t)v7 + v26 + (int)v31 * (uint64_t)v27;
        v61 = v31;
        v68 = v31 - v66;
        v33 = v67;
        v34 = v72;
LABEL_18:
        v38 = v75;
LABEL_19:
        v65 = (v4 - 1) + 1;
        v64 = -v25;
        v60 = 8 * v25;
        v70 = v33;
        v39 = v30;
        while (1)
        {
          v74 = v39;
          *(_DWORD *)(a2 + 240) = v34;
          v40 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))a2;
          v75 = v38;
          v40(a2, v29, v38, v4);
          v44 = *(float16x4_t **)(a2 + 160);
          v45 = *(_QWORD *)(a2 + 144);
          v46 = *(_DWORD *)(a2 + 8);
          if (v46 == *(_DWORD *)(a2 + 12))
          {
            v47 = v71.n128_f32[0];
            if (v71.n128_f32[0] < 1.0)
            {
              v48 = v4;
              v49 = *(_BYTE **)(a2 + 144);
              do
              {
                if (*v49)
                  *v44 = vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(*v44), v47));
                ++v49;
                ++v44;
                --v48;
              }
              while (v48);
            }
          }
          else
          {
            v50 = HIWORD(v46) & 0x3F;
            v51 = v71.n128_f32[0];
            if (v50 != 32)
            {
              if (v50 == 16)
                _CGHandleAssert("RGBAf16_image_pixel", 10426, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt_float16/blt_rgba_float16.cc", "", "Unimplemented", v41, v42, v43, v59[0]);
              _CGHandleAssert("RGBAf16_image_pixel", 10476, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt_float16/blt_rgba_float16.cc", "", "Unimplemented", v41, v42, v43, v59[0]);
            }
            v52 = *(_QWORD *)(a2 + 152);
            v53 = 0;
            if (v71.n128_f32[0] >= 1.0)
            {
              do
              {
                if (*(_BYTE *)(v45 + v53))
                  v44[v53] = *(float16x4_t *)(v52 + 8 * v53);
                ++v53;
              }
              while ((_DWORD)v4 != (_DWORD)v53);
            }
            else
            {
              do
              {
                if (*(_BYTE *)(v45 + v53))
                  v44[v53] = vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(*(float16x4_t *)(v52 + 8 * v53)), v51));
                ++v53;
              }
              while ((_DWORD)v4 != (_DWORD)v53);
            }
          }
          if (v33 <= 0x1B)
            __asm { BR              X8 }
          v30 = v74;
          if (!--v34)
            break;
          v39 = 0;
          LODWORD(v76) = v76 + 1;
          v29 += *(_QWORD *)(a2 + 128);
          v38 = *(_QWORD *)(a2 + 136) + v75;
          if (v74)
          {
            v37 = v76;
            goto LABEL_41;
          }
        }
LABEL_50:
        if (v30)
          free(v30);
      }
    }
    else
    {
      if (!v7)
      {
        v68 = 0;
        v61 = 0;
        v30 = 0;
        v32 = 0;
        LODWORD(v76) = 0;
        v33 = v67;
        v34 = v72;
        v29 = v73;
        goto LABEL_18;
      }
      v34 = v72;
      shape_enum_clip_alloc((uint64_t)v16, v17, v7, 1, 1, 1, v26, v27, v4, v72);
      if (v35)
      {
        v61 = 0;
        v36 = (int)((v12 * v8 + 15) & 0xFFFFFFF0);
        if (!(_DWORD)v12)
          v36 = 8 * v8;
        v68 = -v66;
        v37 = 0;
        v32 = v23 + v36 + 16;
        v33 = v67;
        v29 = v73;
        v38 = v75;
        v30 = v35;
LABEL_41:
        v54 = (int *)(v32 - 16);
LABEL_42:
        LODWORD(v76) = v37;
        while (1)
        {
          v55 = v37;
          v56 = __OFSUB__(*v54, v37);
          v57 = *v54 - v37;
          if (!((v57 < 0) ^ v56 | (v57 == 0)))
          {
            v34 -= v57;
            if (v34 < 1)
              goto LABEL_50;
            v29 += *(_QWORD *)(a2 + 128) * v57;
            v38 += *(_QWORD *)(a2 + 136) * v57;
            v24 += 8 * v62 * v57;
            v37 = *v54;
            goto LABEL_42;
          }
          if (v55 < *(_DWORD *)(v32 - 12) + *v54)
            break;
          v58 = shape_enum_clip_scan((uint64_t)v30, (_DWORD *)(v32 - 16));
          v37 = v76;
          if (!v58)
            goto LABEL_50;
        }
        v25 = v66;
        goto LABEL_19;
      }
    }
    if (v63)
      free(v63);
  }
}

uint64_t RGBAf16_sample_RGBAf_inner(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int16x4_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int16x4_t *v45;
  int16x4_t *v46;
  float16x4_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int16x4_t *v65;
  float16x4_t v66;
  unint64_t v67;
  int16x4_t *v68;
  float16x4_t v69;
  int16x4_t *v70;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int16x4_t *v88;
  float16x4_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int16x4_t *v95;
  float32x4_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int16x4_t *v115;
  unsigned int v116;
  unsigned int *v117;
  unsigned int v118;
  int v120;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;

  v4 = *(_DWORD *)(result + 24);
  v5 = *(_QWORD *)(result + 112);
  v6 = *(_QWORD *)(result + 48);
  v7 = *(_QWORD *)(result + 56);
  if (v6)
  {
    v129 = *(_QWORD *)(result + 112);
    if (v5 > v6)
      v129 = v5 % v6;
  }
  else
  {
    v129 = 0;
  }
  v8 = *(_QWORD *)(result + 176);
  v9 = *(_QWORD *)(result + 32);
  v10 = *(_QWORD *)(result + 120);
  if (v7)
  {
    v11 = v10 % v7;
    if (v10 <= v7)
      v11 = *(_QWORD *)(result + 120);
    v128 = v11;
  }
  else
  {
    v128 = 0;
  }
  v124 = *(_QWORD *)(result + 80);
  v125 = *(_QWORD *)(result + 88);
  v122 = *(_DWORD *)(result + 188);
  v12 = *(_QWORD *)(result + 152) - 8;
  v127 = *(_QWORD *)(result + 144) - 1;
  v13 = (int16x4_t)vbsl_s8((int8x8_t)vceqd_s64(*(_QWORD *)(result + 40), 0), (int8x8_t)0x3C00800080008000, (int8x8_t)0x800080008000);
  v120 = *(_DWORD *)(result + 240);
  v14 = v9
      + ((*(_DWORD *)(result + 260) - 1) * v4)
      + 2 * (4 * *(_DWORD *)(result + 256))
      - 8;
  v126 = *(_QWORD *)(result + 72);
  v123 = *(_QWORD *)(result + 64);
  v15 = a4;
  while (1)
  {
    if (a3 >= v126)
    {
      if (a3 <= v125)
      {
        v24 = 0;
        v25 = ((unint64_t)a3 >> 22) & 0x3C0;
        v26 = 0x3FFFFFFF;
        v27 = a3;
        v28 = v123;
      }
      else
      {
        v20 = *(_QWORD *)(result + 216);
        v21 = *(_QWORD *)(result + 224) + v125;
        v22 = v21 - a3 + (v20 >> 1);
        if (v22 < 1)
          goto LABEL_51;
        if (v22 >= v20)
          LODWORD(v23) = 0x3FFFFFFF;
        else
          v23 = (unint64_t)(*(_QWORD *)(result + 232) * v22) >> 32;
        v28 = v123;
        v26 = v122 | v23;
        v27 = v21 - 0x1000000;
        v24 = a3 - (v21 - 0x1000000);
        v25 = 448;
      }
    }
    else
    {
      v16 = *(_QWORD *)(result + 216);
      v17 = v126 - *(_QWORD *)(result + 224);
      v18 = a3 - v17 + (v16 >> 1);
      if (v18 < 1)
        goto LABEL_51;
      if (v18 >= v16)
        LODWORD(v19) = 0x3FFFFFFF;
      else
        v19 = (unint64_t)(*(_QWORD *)(result + 232) * v18) >> 32;
      v28 = v123;
      v26 = v122 | v19;
      v27 = v17 + 0x1000000;
      v24 = a3 - (v17 + 0x1000000);
      v25 = 512;
    }
    if (a2 >= v28)
    {
      if (a2 <= v124)
      {
        v33 = 0;
        v34 = ((unint64_t)a2 >> 26) & 0x3C;
        v32 = a2;
      }
      else
      {
        v35 = *(_QWORD *)(result + 192);
        v36 = *(_QWORD *)(result + 200) + v124;
        v37 = v36 - a2 + (v35 >> 1);
        if (v37 < 1)
          goto LABEL_51;
        if (v37 < v35)
          v26 = ((v26 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v37) >> 32) >> 15)) | v122;
        v32 = v36 - 0x1000000;
        v33 = a2 - (v36 - 0x1000000);
        v34 = 28;
      }
    }
    else
    {
      v29 = *(_QWORD *)(result + 192);
      v30 = v28 - *(_QWORD *)(result + 200);
      v31 = a2 - v30 + (v29 >> 1);
      if (v31 < 1)
        goto LABEL_51;
      if (v31 < v29)
        v26 = ((v26 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v31) >> 32) >> 15)) | v122;
      v32 = v30 + 0x1000000;
      v33 = a2 - (v30 + 0x1000000);
      v34 = 32;
    }
    if (v26 >= 0x400000)
      break;
LABEL_51:
    --v15;
    a2 += v5;
    a3 += v10;
    v12 += 8;
    *(_BYTE *)(v127 + 1) = 0;
    v50 = v127 + 1;
LABEL_52:
    v127 = v50;
    if (!v15)
      return result;
  }
  if (v6)
  {
    v38 = (v7 & ((v27 % v7) >> 63)) + v27 % v7;
    v39 = (v6 & ((v32 % v6) >> 63)) + v32 % v6;
    if (v38 >= v7)
      v40 = v7;
    else
      v40 = 0;
    v27 = v38 - v40;
    if (v39 >= v6)
      v41 = v6;
    else
      v41 = 0;
    v32 = v39 - v41;
    v24 += v27;
    v33 += v32;
  }
  v42 = v9 + SHIDWORD(v27) * (uint64_t)v4;
  v43 = v32 >> 32;
  v44 = v42 + 8 * v43;
  v45 = *(int16x4_t **)(result + 32);
  if (v14 >= v44)
    v46 = (int16x4_t *)(v42 + 8 * v43);
  else
    v46 = (int16x4_t *)v14;
  if (v46 < v45)
    v46 = *(int16x4_t **)(result + 32);
  v47 = (float16x4_t)vmin_s16(vmax_s16(*v46, v13), (int16x4_t)0x3C007FFF7FFF7FFFLL);
  v48 = v124;
  if (!v8)
    goto LABEL_54;
  v49 = *(_DWORD *)(v8 + (v34 | v25));
LABEL_55:
  v52 = v49 & 0xF;
  v53 = v49 >> 8;
  v54 = HIBYTE(v49) & 3;
  if (v52 == 1)
  {
    LODWORD(v82) = SBYTE1(v49);
    if (v6)
    {
      v83 = v53 << 56;
      v84 = v24 + (v83 >> 24);
      v85 = v7 & (v84 >> 63);
      if (v85 + v84 >= v7)
        v86 = v7;
      else
        v86 = 0;
      v87 = v85 + (v83 >> 24);
      v48 = v124;
      v82 = (v87 - v86) >> 32;
    }
    v88 = (int16x4_t *)(v44 + (int)v82 * (uint64_t)v4);
    if (v14 < (unint64_t)v88)
      v88 = (int16x4_t *)v14;
    if (v88 < v45)
      v88 = v45;
    v89 = (float16x4_t)vmin_s16(vmax_s16(*v88, v13), (int16x4_t)0x3C007FFF7FFF7FFFLL);
    v90 = (char *)&interpolate_rgbaf16[4 * v54];
    goto LABEL_100;
  }
  if (v52 == 2)
  {
    v91 = SBYTE2(v49);
    if (v6)
    {
      v92 = v33 + ((uint64_t)SBYTE2(v49) << 32);
      v93 = v6 & (v92 >> 63);
      if (v93 + v92 >= v6)
        v94 = v6;
      else
        v94 = 0;
      v91 = (v93 + ((uint64_t)((unint64_t)HIWORD(v49) << 56) >> 24) - v94) >> 32;
    }
    v95 = (int16x4_t *)(v44 + 8 * v91);
    if (v14 < (unint64_t)v95)
      v95 = (int16x4_t *)v14;
    if (v95 < v45)
      v95 = v45;
    v89 = (float16x4_t)vmin_s16(vmax_s16(*v95, v13), (int16x4_t)0x3C007FFF7FFF7FFFLL);
    v90 = (char *)&interpolate_rgbaf16[4 * ((v49 >> 28) & 3)];
LABEL_100:
    _H6 = *((_WORD *)v90 + 3);
    __asm { FCVT            S6, H6 }
    v98 = vcvtq_f32_f16(v47);
    v81 = vmlaq_n_f32(v98, vsubq_f32(vcvtq_f32_f16(v89), v98), _S6);
    goto LABEL_101;
  }
  if (v52 != 3)
  {
LABEL_54:
    v51 = v125;
    goto LABEL_102;
  }
  LODWORD(v55) = SBYTE1(v49);
  v56 = SBYTE2(v49);
  if (v6)
  {
    v57 = v53 << 56;
    v58 = v24 + (v57 >> 24);
    v59 = v33 + ((uint64_t)SBYTE2(v49) << 32);
    v60 = v7 & (v58 >> 63);
    v61 = v6 & (v59 >> 63);
    v62 = v61 + v59;
    if (v60 + v58 >= v7)
      v63 = v7;
    else
      v63 = 0;
    if (v62 >= v6)
      v64 = v6;
    else
      v64 = 0;
    v55 = (v60 + (v57 >> 24) - v63) >> 32;
    v56 = (v61 + ((uint64_t)((unint64_t)HIWORD(v49) << 56) >> 24) - v64) >> 32;
  }
  v65 = (int16x4_t *)(v44 + 8 * v56);
  if (v14 < (unint64_t)v65)
    v65 = (int16x4_t *)v14;
  if (v65 < v45)
    v65 = v45;
  v66 = (float16x4_t)vmin_s16(vmax_s16(*v65, v13), (int16x4_t)0x3C007FFF7FFF7FFFLL);
  v67 = v44 + (int)v55 * (uint64_t)v4;
  if (v14 >= v67)
    v68 = (int16x4_t *)(v44 + (int)v55 * (uint64_t)v4);
  else
    v68 = (int16x4_t *)v14;
  if (v68 < v45)
    v68 = v45;
  v69 = (float16x4_t)vmin_s16(vmax_s16(*v68, v13), (int16x4_t)0x3C007FFF7FFF7FFFLL);
  v70 = (int16x4_t *)(v67 + 8 * v56);
  if (v14 < (unint64_t)v70)
    v70 = (int16x4_t *)v14;
  if (v70 < v45)
    v70 = v45;
  _H16 = interpolate_rgbaf16[4 * v54 + 3];
  __asm { FCVT            S16, H16 }
  _H17 = interpolate_rgbaf16[4 * ((v49 >> 28) & 3) + 3];
  __asm { FCVT            S17, H17 }
  v78 = vcvtq_f32_f16(v47);
  v79 = vmaxnmq_f32(vminnmq_f32(vmlaq_n_f32(v78, vsubq_f32(vcvtq_f32_f16(v66), v78), _S17), (float32x4_t)xmmword_1850048F0), (float32x4_t)xmmword_185005160);
  v80 = vcvtq_f32_f16(v69);
  v81 = vmlaq_n_f32(v79, vsubq_f32(vmaxnmq_f32(vminnmq_f32(vmlaq_n_f32(v80, vsubq_f32(vcvtq_f32_f16((float16x4_t)vmin_s16(vmax_s16(*v70, v13), (int16x4_t)0x3C007FFF7FFF7FFFLL)), v80), _S17), (float32x4_t)xmmword_1850048F0), (float32x4_t)xmmword_185005160), v79), _S16);
  v48 = v124;
LABEL_101:
  v51 = v125;
  v47 = vcvt_f16_f32(vmaxnmq_f32(vminnmq_f32(v81, (float32x4_t)xmmword_1850048F0), (float32x4_t)xmmword_185005160));
LABEL_102:
  v99 = 0;
  v100 = v127 + 1;
  v101 = v12 + 8;
  v102 = v15 - 1;
  a3 += v10;
  v103 = v51 - a3;
  a2 += v5;
  v104 = v48 - a2;
  v12 += 8;
  while (1)
  {
    v105 = v15;
    *(float16x4_t *)(v101 + 8 * v99) = v47;
    v106 = v100 + v99;
    *(_BYTE *)(v100 + v99) = v26 >> 22;
    if (v102 == (_DWORD)v99)
      return result;
    --v15;
    if ((v103 | v104 | (a3 - v126) | (a2 - v123)) < 0)
    {
      v50 = v127 + v99 + 1;
      goto LABEL_52;
    }
    if (v6)
    {
      v107 = (v7 & ((v24 + v128) >> 63)) + v24 + v128;
      v108 = (v6 & ((v33 + v129) >> 63)) + v33 + v129;
      if (v107 >= v7)
        v109 = v7;
      else
        v109 = 0;
      v24 = v107 - v109;
      if (v108 >= v6)
        v110 = v6;
      else
        v110 = 0;
      v33 = v108 - v110;
      v111 = HIDWORD(v24);
      v112 = v33;
    }
    else
    {
      v111 = HIDWORD(a3);
      v112 = a2;
    }
    v113 = v9 + v111 * (uint64_t)v4;
    v114 = v112 >> 32;
    v44 = v113 + 8 * v114;
    v45 = *(int16x4_t **)(result + 32);
    if (v14 >= v44)
      v115 = (int16x4_t *)(v113 + 8 * v114);
    else
      v115 = (int16x4_t *)v14;
    if (v115 < v45)
      v115 = *(int16x4_t **)(result + 32);
    v47 = (float16x4_t)vmin_s16(vmax_s16(*v115, v13), (int16x4_t)0x3C007FFF7FFF7FFFLL);
    if (v8)
    {
      v49 = *(_DWORD *)(v8 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      v116 = v49 & 0xF;
      if ((v49 & 0xF) != 0)
      {
        v117 = *(unsigned int **)(result + 264);
        v118 = *v117;
        if (v105 == a4)
        {
          v48 = v124;
        }
        else
        {
          v48 = v124;
          if (v15 != 1 && v120 != 1 && v118 == 3 && v116 < 3)
            v49 |= 3u;
        }
        v26 = -1;
        if (v118 < v116)
          *v117 = v116;
        v127 = v106;
        goto LABEL_55;
      }
    }
    ++v99;
    v12 += 8;
    a3 += v10;
    v103 -= v10;
    a2 += v5;
    v104 -= v5;
    v26 = -1;
  }
}

void *CGGlyphLockCreate()
{
  return malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
}

uint64_t RGBAf16_image(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 v7;
  signed int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  float32x4_t v20;
  float32x4_t v21;
  double v22;
  float32x4_t v23;
  float32x4_t v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t, int);
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  _OWORD v37[64];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  memset(v37, 0, 512);
  if (*((_QWORD *)a2 + 12))
    v7 = 0;
  else
    v7 = *(float *)(a3 + 8) >= 1.0;
  v8 = *(_DWORD *)(*(_QWORD *)(v6 + 56) + 16 * *a2 + 8 * v7 + 4 * (*((_QWORD *)a2 + 6) == 0));
  if (v8 > 28)
    return 0xFFFFFFFFLL;
  if (*((int *)a2 + 1) < 1 || *((int *)a2 + 2) < 1)
    return 0;
  if ((int)_blt_image_initialize((uint64_t)a2, a3, (uint64_t)&v31, (uint64_t)v37) < 1)
    return 0xFFFFFFFFLL;
  v25 = *(_DWORD *)v6;
  v26 = *(_DWORD *)a3;
  v32 = v26;
  v33 = v25;
  if (v26 != 269497257)
  {
    v27 = SAMPLEINDEX(v26, v10, v11, v12, v13, v14, v15, v16);
    if (v27)
    {
      if (v27 <= 0x1B)
        _CGHandleAssert("RGBAf16_image_inner", 13907, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt_float16/blt_rgba_float16.cc", "index > SAMPLEF", "index = %u", v28, v29, v30, v27);
      v31 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int))RGBF16_image_sample[v27 + 1];
      if (v31)
      {
        v32 = 269497257;
        goto LABEL_20;
      }
      if ((HIWORD(*(_DWORD *)a3) & 0x3Fu) > 8)
      {
        if ((*(_DWORD *)a3 & 0x3F0000u) >> 16 > 0x10)
          return 0xFFFFFFFFLL;
      }
      else
      {
        v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, int))&RGB8_image_sample[2 * v27 + 2];
        if (v31)
        {
          v34 = 4;
          v32 = 134755224;
          goto LABEL_20;
        }
      }
      v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, int))&RGB16_image_sample[2 * v27 + 2];
      if (v31)
      {
        v32 = 269497256;
        goto LABEL_20;
      }
    }
    return 0xFFFFFFFFLL;
  }
  if (!v36 && (~v35 & 0xC3) == 0)
  {
    v17.n128_u32[0] = *(_DWORD *)(a3 + 8);
    v18.n128_u32[0] = 1.0;
    if (v17.n128_f32[0] >= 1.0 && !*(_QWORD *)(a3 + 24))
    {
      if ((v35 & 4) != 0)
      {
        v17.n128_u64[0] = *(_QWORD *)(a3 + 32);
        *((_QWORD *)a2 + 8) = v17.n128_u64[0];
      }
      RGBAf16_mark_inner(a1, (uint64_t)a2, v17, v18, v19, v20, v21, v22, v23, v24, v11, v12, v13, v14, v15, v16);
      return 1;
    }
  }
  v31 = RGBAf16_sample_RGBAf_inner;
LABEL_20:
  RGBAf16_image_mark((uint64_t)a2, (uint64_t)&v31, v8, v17);
  return 1;
}

uint64_t RGBAf16_mark_inner(uint64_t *a1, uint64_t a2, __n128 _Q0, __n128 _Q1, __n128 a5, float32x4_t _Q3, float32x4_t a7, double _D5, float32x4_t _Q6, float32x4_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  unsigned __int32 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  int *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  uint64_t v50;
  _BOOL4 v51;
  unint64_t v52;
  unint64_t v53;
  int v54;
  float16x4_t *v55;
  int v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  __n128 v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  int v77;
  int v78;
  uint64_t v79;
  unsigned int v80;
  int v81;
  float32x4_t v84;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unsigned int v93;
  int v94;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unsigned int v114;
  int v115;
  float v118;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unsigned int v136;
  int v137;
  float32x4_t v138;
  float32x4_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unsigned int v146;
  int v147;
  float v150;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unsigned int v172;
  int v173;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unsigned int v181;
  int v182;
  float v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  unsigned int v192;
  int v193;
  float32x4_t v194;
  float32x4_t v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  unsigned int v202;
  int v203;
  float32x4_t v204;
  float32x4_t v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  unsigned int v212;
  int v213;
  float v229;
  float v231;
  float v241;
  unint64_t v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  unsigned int v253;
  int v254;
  unint64_t v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t v281;
  unsigned int v282;
  int v283;
  unint64_t v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t v292;
  unsigned int v293;
  int v294;
  unint64_t v317;
  uint64_t v318;
  unint64_t v319;
  uint64_t v320;
  unint64_t v321;
  uint64_t v322;
  unsigned int v323;
  int v324;
  unint64_t v328;
  uint64_t v329;
  unint64_t v330;
  uint64_t v331;
  unint64_t v332;
  uint64_t v333;
  unsigned int v334;
  int v335;
  unint64_t v339;
  uint64_t v340;
  unint64_t v341;
  uint64_t v342;
  unint64_t v343;
  uint64_t v344;
  unsigned int v345;
  int v346;
  unint64_t v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  unint64_t v354;
  uint64_t v355;
  unsigned int v356;
  int v357;
  unint64_t v361;
  uint64_t v362;
  unint64_t v363;
  uint64_t v364;
  unint64_t v365;
  uint64_t v366;
  unsigned int v367;
  int v368;
  unint64_t v372;
  uint64_t v373;
  unint64_t v374;
  uint64_t v375;
  unint64_t v376;
  uint64_t v377;
  unsigned int v378;
  int v379;
  unint64_t v383;
  uint64_t v384;
  unint64_t v385;
  uint64_t v386;
  unint64_t v387;
  uint64_t v388;
  unsigned int v389;
  int v390;
  unint64_t v394;
  uint64_t v395;
  unint64_t v396;
  uint64_t v397;
  unint64_t v398;
  uint64_t v399;
  unsigned int v400;
  int v401;
  unint64_t v405;
  uint64_t v406;
  unint64_t v407;
  uint64_t v408;
  unint64_t v409;
  uint64_t v410;
  unsigned int v411;
  int v412;
  unint64_t v416;
  uint64_t v417;
  unint64_t v418;
  uint64_t v419;
  unint64_t v420;
  uint64_t v421;
  unsigned int v422;
  int v423;
  unint64_t v427;
  uint64_t v428;
  unint64_t v429;
  uint64_t v430;
  unint64_t v431;
  uint64_t v432;
  unsigned int v433;
  int v434;
  unint64_t v438;
  uint64_t v439;
  unint64_t v440;
  uint64_t v441;
  unint64_t v442;
  uint64_t v443;
  unsigned int v444;
  unint64_t v448;
  uint64_t v449;
  unint64_t v450;
  uint64_t v451;
  unint64_t v452;
  uint64_t v453;
  unsigned int v454;
  int v455;
  unint64_t v459;
  uint64_t v460;
  unint64_t v461;
  uint64_t v462;
  unint64_t v463;
  uint64_t v464;
  void *v465;
  uint8x8_t v466;
  int v467;
  uint64_t v468;
  int v469;
  unint64_t v470;
  unint64_t v471;
  int v472;
  unint64_t v473;
  uint64_t v474;
  unint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  int v479;
  unint64_t v480;
  unint64_t v481;
  int v482;
  unint64_t v483;
  uint64_t v484;
  unint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  int v489;
  unint64_t v490;
  unint64_t v491;
  int v492;
  unint64_t v493;
  uint64_t v494;
  unint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  char *v502;
  uint64_t v503;
  unint64_t v504;
  unsigned int v505;
  int v506;
  uint64_t v507;
  int v508;
  int v509;
  float16x4_t v510;
  float32x4_t v511;
  int v512;
  int v516;
  float32x4_t v517;
  int v518;
  float v521;
  int v524;
  float32x4_t v525;
  int v526;
  float32x4_t v527;
  int v534;
  int v535;
  float v538;
  int v548;
  float32x4_t v549;
  int v550;
  int v551;
  int v552;
  int v555;
  float32x4_t v556;
  int v557;
  float32x4_t v558;
  int v561;
  float32x4_t v562;
  int v563;
  float32x4_t v564;
  float v568;
  float v571;
  float v573;
  int v574;
  int v575;
  float v583;
  float v589;
  int v593;
  int v599;
  __n128 v612;
  int v613;
  int v614;
  int v622;
  int v623;
  __n128 v636;
  int v637;
  int v638;
  __n128 v640;
  int v641;
  int v642;
  __n128 v644;
  int v645;
  int v646;
  __n128 v648;
  int v649;
  int v650;
  __n128 v652;
  int v653;
  int v654;
  __n128 v656;
  int v657;
  int v658;
  __n128 v660;
  int v661;
  int v662;
  __n128 v664;
  int v665;
  int v666;
  __n128 v668;
  int v669;
  int v670;
  __n128 v672;
  int v673;
  int v674;
  __n128 v676;
  int v677;
  int v678;
  int v680;
  int v681;
  __int16 v683;
  __int16 v684;
  __int16 v685;
  __n128 v686;
  int v687;
  int v688;
  float32x4_t v691;
  float32x4_t v693;
  unsigned int v694;
  int v695;
  float v696;
  int v698;
  int v699;
  unint64_t v700;
  unint64_t v701;
  int v702;
  int v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  unint64_t v707;
  unint64_t v708;
  int32x2_t v709;
  unsigned int v710;
  unsigned int v711;
  unsigned int v712;
  unsigned int v713;
  unsigned int v714;
  unsigned int v715;
  unsigned int v716;
  unsigned int v717;
  unsigned int v718;
  unsigned int v719;
  unsigned int v720;
  unsigned int v721;
  unsigned int v722;
  unsigned int v723;
  unsigned int v724;
  unsigned int v725;
  float v726;
  int v727;
  __n128 v728;
  unint64_t v729;
  __n128 v730;
  unint64_t v731;
  __n128 v732;
  unint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  unsigned __int32 v739;
  unsigned __int16 v740;
  unsigned __int16 v741;
  uint64_t v742;
  unsigned int v743;
  _DWORD *v744;
  int64x2_t v745;
  uint64_t v746;
  __int128 v747;
  __int128 v748;
  __int128 v749;
  _OWORD v750[3];
  uint64_t v751;

  v751 = *MEMORY[0x1E0C80C00];
  v17 = *(_DWORD *)a2;
  v18 = *(_QWORD *)(a2 + 96);
  v19 = *(_QWORD *)(a2 + 48);
  v20 = *(unsigned int *)(*(_QWORD *)(*a1 + 56)
                        + 16 * *(_DWORD *)a2
                        + 8 * (v18 == 0)
                        + 4 * (v19 == 0));
  if ((int)v20 > 27)
    return 0xFFFFFFFFLL;
  v22 = a2;
  v23 = *(unsigned int *)(a2 + 4);
  v24 = v23 - 1;
  if ((int)v23 < 1)
    return 0;
  v25 = *(_DWORD *)(a2 + 8);
  if (v25 < 1)
    return 0;
  v26 = *(int **)(a2 + 136);
  if ((v17 & 0xFF0000) != 0x50000 && v26)
  {
    v27 = *(_DWORD *)(a2 + 128);
    if ((v27 | 8) == 8)
    {
      if ((*(_DWORD *)a2 & 0xFF00) == 0x400)
        RGBAf16_mark_constmask(a2, v20, (uint64_t)v26, a12, _Q0.n128_f64[0], _Q1, a5, *(double *)_Q3.i64, *(double *)a7.i64, _D5, *(double *)_Q6.i64, *(double *)a10.i64, a13, a14, a15, a16);
      else
        RGBAf16_mark_pixelmask((_DWORD *)*a1, (int *)a2, v20, _Q0, _Q1, a5, *(double *)_Q3.i64, a7, _D5, _Q6, *(double *)a10.i64);
    }
    else
    {
      v49 = *(_DWORD *)a2 & 0xFF00;
      if ((v20 - 1) <= 1 && v49 == 1024 && v27 == 16)
      {
        if (v19)
        {
          v50 = *(_QWORD *)(a2 + 152);
          if (v50 && *(double *)(a2 + 144) == 2.0)
          {
            v749 = 0u;
            memset(v750, 0, sizeof(v750));
            v747 = 0u;
            v748 = 0u;
            RGBAf16_pattern((uint64_t)a1, &v747, 8u, *(_DWORD *)v50, *(float **)(v50 + 8), *(float *)(v50 + 16));
            RGBAf16_mark_const_deep_mask_BGColorARGB(v22, v20, (float16x4_t *)v750, v67, v68, v69, v70, v71, v72, v73, v62, v63, v64, v65, v66);
          }
          else
          {
            RGBAf16_mark_const_deep_mask_ARGB(a2, v20, (uint64_t)v26, a12, a13, a14, a15, a16);
          }
        }
        else
        {
          RGBAf16_mark_const_deep_mask_XRGB(a2, v20, (uint64_t)v26, a12, a13, a14, a15, a16);
        }
      }
      else if ((v20 - 1) > 1 || v49 == 1024 || v27 != 16)
      {
        RGBAf16_mark_bits(*a1, _Q0);
      }
      else
      {
        RGBAf16_mark_deep_pixel(a2, v20, _Q0.n128_f64[0], _Q1.n128_f64[0], a5.n128_f64[0], *(double *)_Q3.i64, *(double *)a7.i64, _D5, _Q6, a10, (uint64_t)v26, a12, a13, a14, a15, a16);
      }
    }
    return 1;
  }
  v703 = *(_DWORD *)(*(_QWORD *)(*a1 + 56) + 16 * *(_DWORD *)a2 + 8 * (v18 == 0) + 4 * (v19 == 0));
  if ((*(_DWORD *)a2 & 0xFF00) != 0x400)
  {
    v739 = *(_DWORD *)(a2 + 4);
    v743 = v25;
    v40 = *(_QWORD *)(a2 + 88);
    v41 = (unint64_t)*(int *)(a2 + 28) >> 3;
    v42 = *(_QWORD *)(a2 + 40) + 8 * (*(int *)(a2 + 12) + v41 * *(int *)(a2 + 16));
    v43 = *(unsigned int *)(a2 + 104);
    v44 = *(unsigned int *)(a2 + 108);
    v45 = *(_DWORD *)(a2 + 56);
    v46 = *(_DWORD *)(a2 + 60);
    v47 = (unint64_t)*(int *)(a2 + 76) >> 3;
    if ((v17 & 0xFF00) != 0x100)
    {
      LODWORD(v708) = *(_DWORD *)(a2 + 64);
      v704 = *(int *)(a2 + 68);
      v731 = v40 + 8 * v47 * v704;
      v51 = v18 != 0;
      if (v26)
      {
        v733 = (unint64_t)*(int *)(a2 + 76) >> 3;
        v698 = *(_DWORD *)(a2 + 60);
        v699 = *(_DWORD *)(a2 + 56);
        LODWORD(a12) = 1;
        v52 = *(_QWORD *)(a2 + 88);
        v53 = v52;
        goto LABEL_45;
      }
      if (v40)
      {
        v705 = 0;
        v706 = *(_QWORD *)(a2 + 88);
        v56 = v45 % (int)v708;
        v733 = (unint64_t)*(int *)(a2 + 76) >> 3;
        v57 = v40 + 8 * v47 * (v46 % (int)v704);
        v52 = v57 + 8 * v56;
        v53 = v57 + 8 * (int)v708;
        v702 = 1;
        v40 = v52;
        v58 = *(_QWORD *)(a2 + 40) + 8 * (*(int *)(a2 + 12) + v41 * *(int *)(a2 + 16));
        v59 = v23;
        v698 = v46 % (int)v704;
        v699 = v56;
        goto LABEL_51;
      }
      v698 = *(_DWORD *)(a2 + 60);
      v699 = *(_DWORD *)(a2 + 56);
      v53 = 0;
      v702 = 1;
      v59 = v23;
      goto LABEL_49;
    }
    v40 += 8 * (v45 + v47 * v46);
    if (v47 == v41)
    {
      if ((uint64_t)(v42 - v40) >= 1)
      {
        if (v23 >= (v42 - v40) >> 3)
        {
          v42 += 8 * v24;
          a12 = 0xFFFFFFFFLL;
          v708 = (unint64_t)*(int *)(a2 + 28) >> 3;
          v40 += 8 * v24;
          goto LABEL_43;
        }
        v48 = v41 * (v25 - 1);
        if (v42 <= v40 + 8 * v48 + 8 * v24)
        {
          v42 += 8 * v48;
          v41 = -(uint64_t)v41;
          v40 += 8 * v48;
        }
      }
      a12 = 1;
      v708 = v41;
    }
    else
    {
      a12 = 1;
      v708 = (unint64_t)*(int *)(a2 + 76) >> 3;
    }
LABEL_43:
    v698 = *(_DWORD *)(a2 + 60);
    v699 = *(_DWORD *)(a2 + 56);
    v51 = v18 != 0;
    if (v26)
    {
      LODWORD(v704) = 0;
      v52 = 0;
      v731 = 0;
      v53 = -1;
      v733 = v708;
LABEL_45:
      v702 = a12;
      shape_enum_clip_alloc((uint64_t)a1, a2, v26, a12, v41, 1, v43, v44, v23, v25);
      v61 = v60;
      if (!v60)
        return 1;
      goto LABEL_584;
    }
    LODWORD(v704) = 0;
    v702 = a12;
    v59 = (int)a12 * (int)v23;
    v53 = -1;
    v47 = v708;
LABEL_49:
    v731 = 0;
    v705 = 0;
    v706 = v40;
    v52 = 0;
    v733 = v47 - v59;
    v58 = v42;
LABEL_51:
    v729 = v41 - v59;
    switch(v703)
    {
      case 0:
        v74 = v58 - 8 * ((int)v23 - 1);
        v75 = v729 + (int)v23;
        if (v702 < 0)
          v75 = v729 - (int)v23;
        else
          v74 = v58;
        v76 = (char *)(v74 + 8 * ((v75 * ((int)v743 - 1)) & (v75 >> 63)));
        if (v75 < 0)
          v75 = -v75;
        CGBlt_fillBytes(8 * v23, v743, 0, v76, 8 * v75);
        goto LABEL_581;
      case 1:
        v77 = *(unsigned __int8 *)(v22 + 1);
        v701 = v41;
        if (v77 == 2)
        {
          if ((int)v23 >= 4 && (8 * v708) <= 0x40)
          {
            _Q0.n128_u32[0] = 8 * v708;
            v466 = (uint8x8_t)vcnt_s8((int8x8_t)_Q0.n128_u64[0]);
            v466.i16[0] = vaddlv_u8(v466);
            if (v466.i32[0] <= 1u)
            {
              v40 = v706;
              CGSFillDRAM64((_BYTE *)v58, 8 * (v23 + v729), 8 * v23, v743, v706, 8 * v733, 8 * v708, v704, 8 * v699, v698);
              goto LABEL_582;
            }
          }
        }
        else if (v77 == 1)
        {
          v78 = v743;
          v79 = (int)v743;
          if (use_vImage_fp16_compositing(void)::predicate != -1)
          {
            v725 = v743;
            dispatch_once(&use_vImage_fp16_compositing(void)::predicate, &__block_literal_global_19551);
            v78 = v725;
          }
          if ((v702 & 0x80000000) == 0 && use_vImage_fp16_compositing(void)::status)
          {
LABEL_597:
            LODWORD(v735) = 66051;
            *(_QWORD *)&v747 = v58;
            *((_QWORD *)&v747 + 1) = v79;
            *(_QWORD *)&v748 = (int)v23;
            *((_QWORD *)&v748 + 1) = 8 * (v729 + (int)v23);
            v744 = (_DWORD *)v40;
            v745.i64[0] = v79;
            v745.i64[1] = (int)v23;
            v746 = 8 * (v733 + (int)v23);
            vImageCGCompositePixelShape_ARGB16F();
            goto LABEL_580;
          }
          if (!v19 || v51)
          {
            if (v702 < 0)
            {
              v499 = v733 - (int)v23;
              v40 -= 8 * ((int)v23 - 1);
              v500 = v729 - (int)v23;
              v58 -= 8 * ((int)v23 - 1);
            }
            else
            {
              v499 = v733 + (int)v23;
              v500 = v729 + (int)v23;
            }
            if (v499 >= 0)
              LODWORD(v501) = v499;
            else
              v501 = -v499;
            v502 = (char *)(v40 + 8 * ((v499 * (v79 - 1)) & (v499 >> 63)));
            v503 = (v500 * (v79 - 1)) & (v500 >> 63);
            if (v500 < 0)
              v500 = -v500;
            CGBlt_copyBytes(8 * v23, v78, v502, (char *)(v58 + 8 * v503), 8 * v501, 8 * v500);
            goto LABEL_580;
          }
          v479 = v23 + 1;
          v480 = v53;
          v481 = v52;
          v41 = v701;
          v61 = v705;
          do
          {
            v482 = v479;
            do
            {
              *(_DWORD *)v58 = *(_DWORD *)v40;
              *(_WORD *)(v58 + 4) = *(_WORD *)(v40 + 4);
              *(_WORD *)(v58 + 6) = 15360;
              v483 = v40 + 8 * v702;
              if (v483 >= v480)
                v484 = -(uint64_t)(int)v708;
              else
                v484 = 0;
              v40 = v483 + 8 * v484;
              v58 += 8 * v702;
              --v482;
            }
            while (v482 > 1);
            v58 += 8 * v729;
            v485 = v481 + 8 * v733;
            if (v485 >= v731)
              v486 = -(uint64_t)(v733 * (int)v704);
            else
              v486 = 0;
            v487 = v485 + 8 * v486;
            v488 = v480 + 8 * v486 + 8 * v733;
            if (v731)
            {
              v480 = v488;
              v481 = v487;
              v40 = v487;
            }
            else
            {
              v40 += 8 * v733;
            }
            _VF = __OFSUB__(v78--, 1);
          }
          while (!((v78 < 0) ^ _VF | (v78 == 0)));
LABEL_646:
          v40 = v706;
          if (!v61)
            return 1;
          goto LABEL_583;
        }
        v467 = v743;
        v79 = (int)v743;
        if (use_vImage_fp16_compositing(void)::predicate != -1)
        {
          v724 = v743;
          dispatch_once(&use_vImage_fp16_compositing(void)::predicate, &__block_literal_global_19551);
          v467 = v724;
        }
        if (use_vImage_fp16_compositing(void)::status)
          goto LABEL_597;
        v468 = 8 * v702;
        if (v19 && !v51)
        {
          v469 = v23 + 1;
          v470 = v53;
          v471 = v52;
          v41 = v701;
          v61 = v705;
          do
          {
            v472 = v469;
            do
            {
              *(_DWORD *)v58 = *(_DWORD *)v40;
              *(_WORD *)(v58 + 4) = *(_WORD *)(v40 + 4);
              *(_WORD *)(v58 + 6) = 15360;
              v473 = v40 + 8 * v702;
              if (v473 >= v470)
                v474 = -(uint64_t)(int)v708;
              else
                v474 = 0;
              v40 = v473 + 8 * v474;
              v58 += v468;
              --v472;
            }
            while (v472 > 1);
            v58 += 8 * v729;
            v475 = v471 + 8 * v733;
            if (v475 >= v731)
              v476 = -(uint64_t)(v733 * (int)v704);
            else
              v476 = 0;
            v477 = v475 + 8 * v476;
            v478 = v470 + 8 * v476 + 8 * v733;
            if (v731)
            {
              v470 = v478;
              v471 = v477;
              v40 = v477;
            }
            else
            {
              v40 += 8 * v733;
            }
            _VF = __OFSUB__(v467--, 1);
          }
          while (!((v467 < 0) ^ _VF | (v467 == 0)));
        }
        else
        {
          v489 = v23 + 1;
          v490 = v53;
          v491 = v52;
          v41 = v701;
          v61 = v705;
          do
          {
            v492 = v489;
            do
            {
              *(_QWORD *)v58 = *(_QWORD *)v40;
              v493 = v40 + 8 * v702;
              if (v493 >= v490)
                v494 = -(uint64_t)v733;
              else
                v494 = 0;
              v40 = v493 + 8 * v494;
              v58 += v468;
              --v492;
            }
            while (v492 > 1);
            v58 += 8 * v729;
            v495 = v491 + 8 * v733;
            if (v495 >= v731)
              v496 = -(uint64_t)(v733 * (int)v704);
            else
              v496 = 0;
            v497 = v495 + 8 * v496;
            v498 = v490 + 8 * v496 + 8 * v733;
            if (v731)
            {
              v490 = v498;
              v491 = v497;
              v40 = v497;
            }
            else
            {
              v40 += 8 * v733;
            }
            _VF = __OFSUB__(v467--, 1);
          }
          while (!((v467 < 0) ^ _VF | (v467 == 0)));
        }
        goto LABEL_646;
      case 2:
        v80 = v743;
        do
        {
          v81 = v23;
          do
          {
            _H2 = *(_WORD *)(v40 + 6);
            __asm { FCVT            S1, H2 }
            if (_S1 >= 1.0)
            {
              *(_DWORD *)v58 = *(_DWORD *)v40;
              *(_WORD *)(v58 + 4) = *(_WORD *)(v40 + 4);
              *(_WORD *)(v58 + 6) = _H2;
            }
            else if (_S1 > 0.0)
            {
              _Q3.i32[0] = *(_DWORD *)v40;
              v84.i64[0] = vcvtq_f32_f16(*(float16x4_t *)_Q3.f32).u64[0];
              _H4 = *(_WORD *)(v40 + 4);
              __asm { FCVT            S4, H4 }
              v84.i64[1] = __PAIR64__(LODWORD(_S1), _S4);
              _Q3 = vmlaq_n_f32(v84, vcvtq_f32_f16(*(float16x4_t *)v58), 1.0 - _S1);
              *(float16x4_t *)v58 = vcvt_f16_f32(_Q3);
            }
            v87 = v40 + 8 * v702;
            if (v87 >= v53)
              v88 = -(uint64_t)(int)v708;
            else
              v88 = 0;
            v40 = v87 + 8 * v88;
            v58 += 8 * v702;
            --v81;
          }
          while (v81);
          v58 += 8 * v729;
          v89 = v52 + 8 * v733;
          if (v89 >= v731)
            v90 = -(uint64_t)(v733 * (int)v704);
          else
            v90 = 0;
          v91 = v89 + 8 * v90;
          v92 = v53 + 8 * v90 + 8 * v733;
          if (v731)
          {
            v53 = v92;
            v52 = v91;
            v40 = v91;
          }
          else
          {
            v40 += 8 * v733;
          }
          --v80;
        }
        while (v80);
        goto LABEL_319;
      case 3:
        v93 = v743;
        do
        {
          v94 = v23;
          do
          {
            _H2 = *(_WORD *)(v58 + 6);
            __asm { FCVT            S2, H2 }
            if (_S2 <= 0.0)
            {
              *(_QWORD *)v58 = 0;
            }
            else
            {
              _H3 = *(_WORD *)v40;
              if (_S2 >= 1.0)
              {
                *(_WORD *)v58 = _H3;
                *(_DWORD *)(v58 + 2) = *(_DWORD *)(v40 + 2);
                _H2 = 15360;
                if (v51)
                  _H2 = *(_WORD *)(v40 + 6);
              }
              else
              {
                __asm { FCVT            S3, H3 }
                _S3 = _S2 * _S3;
                __asm { FCVT            H3, S3 }
                *(_WORD *)v58 = LOWORD(_S3);
                LOWORD(_S3) = *(_WORD *)(v40 + 2);
                __asm { FCVT            S3, H3 }
                _S3 = _S2 * _S3;
                __asm { FCVT            H3, S3 }
                *(_WORD *)(v58 + 2) = LOWORD(_S3);
                LOWORD(_S3) = *(_WORD *)(v40 + 4);
                __asm { FCVT            S3, H3 }
                _S3 = _S2 * _S3;
                __asm { FCVT            H3, S3 }
                *(_WORD *)(v58 + 4) = LOWORD(_S3);
                _S3 = 1.0;
                if (v51)
                {
                  _H3 = *(_WORD *)(v40 + 6);
                  __asm { FCVT            S3, H3 }
                }
                _S2 = _S3 * _S2;
                __asm { FCVT            H2, S2 }
              }
              *(_WORD *)(v58 + 6) = _H2;
            }
            v108 = v40 + 8 * v702;
            if (v108 >= v53)
              v109 = -(uint64_t)(int)v708;
            else
              v109 = 0;
            v40 = v108 + 8 * v109;
            v58 += 8 * v702;
            --v94;
          }
          while (v94);
          v58 += 8 * v729;
          v110 = v52 + 8 * v733;
          if (v110 >= v731)
            v111 = -(uint64_t)(v733 * (int)v704);
          else
            v111 = 0;
          v112 = v110 + 8 * v111;
          v113 = v53 + 8 * v111 + 8 * v733;
          if (v731)
          {
            v53 = v113;
            v52 = v112;
            v40 = v112;
          }
          else
          {
            v40 += 8 * v733;
          }
          --v93;
        }
        while (v93);
        goto LABEL_319;
      case 4:
        v114 = v743;
        do
        {
          v115 = v23;
          do
          {
            _H2 = *(_WORD *)(v58 + 6);
            __asm { FCVT            S2, H2 }
            v118 = 1.0 - _S2;
            if (v118 <= 0.0)
            {
              *(_QWORD *)v58 = 0;
            }
            else
            {
              _H3 = *(_WORD *)v40;
              if (v118 >= 1.0)
              {
                *(_WORD *)v58 = _H3;
                *(_DWORD *)(v58 + 2) = *(_DWORD *)(v40 + 2);
                _H2 = 15360;
                if (v51)
                  _H2 = *(_WORD *)(v40 + 6);
              }
              else
              {
                __asm { FCVT            S3, H3 }
                _S3 = v118 * _S3;
                __asm { FCVT            H3, S3 }
                *(_WORD *)v58 = LOWORD(_S3);
                LOWORD(_S3) = *(_WORD *)(v40 + 2);
                __asm { FCVT            S3, H3 }
                _S3 = v118 * _S3;
                __asm { FCVT            H3, S3 }
                *(_WORD *)(v58 + 2) = LOWORD(_S3);
                LOWORD(_S3) = *(_WORD *)(v40 + 4);
                __asm { FCVT            S3, H3 }
                _S3 = v118 * _S3;
                __asm { FCVT            H3, S3 }
                *(_WORD *)(v58 + 4) = LOWORD(_S3);
                _S3 = 1.0;
                if (v51)
                {
                  _H3 = *(_WORD *)(v40 + 6);
                  __asm { FCVT            S3, H3 }
                }
                _S2 = v118 * _S3;
                __asm { FCVT            H2, S2 }
              }
              *(_WORD *)(v58 + 6) = _H2;
            }
            v130 = v40 + 8 * v702;
            if (v130 >= v53)
              v131 = -(uint64_t)(int)v708;
            else
              v131 = 0;
            v40 = v130 + 8 * v131;
            v58 += 8 * v702;
            --v115;
          }
          while (v115);
          v58 += 8 * v729;
          v132 = v52 + 8 * v733;
          if (v132 >= v731)
            v133 = -(uint64_t)(v733 * (int)v704);
          else
            v133 = 0;
          v134 = v132 + 8 * v133;
          v135 = v53 + 8 * v133 + 8 * v733;
          if (v731)
          {
            v53 = v135;
            v52 = v134;
            v40 = v134;
          }
          else
          {
            v40 += 8 * v733;
          }
          --v114;
        }
        while (v114);
        goto LABEL_319;
      case 5:
        v136 = v743;
        do
        {
          v137 = v23;
          do
          {
            v138 = vcvtq_f32_f16(*(float16x4_t *)v40);
            v139 = vcvtq_f32_f16(*(float16x4_t *)v58);
            *(float16x4_t *)v58 = vcvt_f16_f32(vmlaq_laneq_f32(vmulq_n_f32(v139, 1.0 - v138.f32[3]), v138, v139, 3));
            v140 = v40 + 8 * v702;
            if (v140 >= v53)
              v141 = -(uint64_t)(int)v708;
            else
              v141 = 0;
            v40 = v140 + 8 * v141;
            v58 += 8 * v702;
            --v137;
          }
          while (v137);
          v58 += 8 * v729;
          v142 = v52 + 8 * v733;
          if (v142 >= v731)
            v143 = -(uint64_t)(v733 * (int)v704);
          else
            v143 = 0;
          v144 = v142 + 8 * v143;
          v145 = v53 + 8 * v143 + 8 * v733;
          if (v731)
          {
            v53 = v145;
            v52 = v144;
            v40 = v144;
          }
          else
          {
            v40 += 8 * v733;
          }
          --v136;
        }
        while (v136);
        goto LABEL_319;
      case 6:
        v146 = v743;
        while (1)
        {
          v147 = v23;
          do
          {
            _H2 = *(_WORD *)(v58 + 6);
            __asm { FCVT            S2, H2 }
            v150 = 1.0 - _S2;
            if ((float)(1.0 - _S2) >= 1.0)
            {
              *(_DWORD *)v58 = *(_DWORD *)v40;
              *(_WORD *)(v58 + 4) = *(_WORD *)(v40 + 4);
              _H2 = 15360;
              if (v51)
                _H2 = *(_WORD *)(v40 + 6);
            }
            else
            {
              if (v150 <= 0.0)
                goto LABEL_153;
              _H4 = *(_WORD *)v58;
              __asm { FCVT            S4, H4 }
              _H5 = *(_WORD *)v40;
              __asm { FCVT            S5, H5 }
              _S4 = _S4 + (float)(_S5 * v150);
              __asm { FCVT            H4, S4 }
              *(_WORD *)v58 = LOWORD(_S4);
              LOWORD(_S4) = *(_WORD *)(v58 + 2);
              __asm { FCVT            S4, H4 }
              LOWORD(_S5) = *(_WORD *)(v40 + 2);
              __asm { FCVT            S5, H5 }
              _S4 = _S4 + (float)(_S5 * v150);
              __asm { FCVT            H4, S4 }
              *(_WORD *)(v58 + 2) = LOWORD(_S4);
              LOWORD(_S4) = *(_WORD *)(v58 + 4);
              __asm { FCVT            S4, H4 }
              LOWORD(_S5) = *(_WORD *)(v40 + 4);
              __asm { FCVT            S5, H5 }
              _S4 = _S4 + (float)(_S5 * v150);
              __asm { FCVT            H4, S4 }
              *(_WORD *)(v58 + 4) = LOWORD(_S4);
              _S4 = 1.0;
              if (v51)
              {
                _H4 = *(_WORD *)(v40 + 6);
                __asm { FCVT            S4, H4 }
              }
              _S2 = _S2 + (float)(_S4 * v150);
              __asm { FCVT            H2, S2 }
            }
            *(_WORD *)(v58 + 6) = _H2;
LABEL_153:
            v166 = v40 + 8 * v702;
            if (v166 >= v53)
              v167 = -(uint64_t)(int)v708;
            else
              v167 = 0;
            v40 = v166 + 8 * v167;
            v58 += 8 * v702;
            --v147;
          }
          while (v147);
          v58 += 8 * v729;
          v168 = v52 + 8 * v733;
          if (v168 >= v731)
            v169 = -(uint64_t)(v733 * (int)v704);
          else
            v169 = 0;
          v170 = v168 + 8 * v169;
          v171 = v53 + 8 * v169 + 8 * v733;
          if (v731)
          {
            v53 = v171;
            v52 = v170;
            v40 = v170;
          }
          else
          {
            v40 += 8 * v733;
          }
          if (!--v146)
          {
LABEL_319:
            v743 = 0;
            goto LABEL_581;
          }
        }
      case 7:
        v172 = v743;
        do
        {
          v173 = v23;
          do
          {
            _Q1.n128_u16[0] = *(_WORD *)(v40 + 6);
            __asm { FCVT            S2, H1 }
            if (_S2 <= 0.0)
            {
              *(_QWORD *)v58 = 0;
            }
            else if (_S2 < 1.0)
            {
              _Q1.n128_u64[0] = (unint64_t)vcvt_f16_f32(vmulq_f32(vcvtq_f32_f16((float16x4_t)vdup_lane_s16((int16x4_t)_Q1.n128_u64[0], 0)), vcvtq_f32_f16(*(float16x4_t *)v58)));
              *(_QWORD *)v58 = _Q1.n128_u64[0];
            }
            v175 = v40 + 8 * v702;
            if (v175 >= v53)
              v176 = -(uint64_t)(int)v708;
            else
              v176 = 0;
            v40 = v175 + 8 * v176;
            v58 += 8 * v702;
            --v173;
          }
          while (v173);
          v58 += 8 * v729;
          v177 = v52 + 8 * v733;
          if (v177 >= v731)
            v178 = -(uint64_t)(v733 * (int)v704);
          else
            v178 = 0;
          v179 = v177 + 8 * v178;
          v180 = v53 + 8 * v178 + 8 * v733;
          if (v731)
          {
            v53 = v180;
            v52 = v179;
            v40 = v179;
          }
          else
          {
            v40 += 8 * v733;
          }
          --v172;
        }
        while (v172);
        goto LABEL_319;
      case 8:
        v181 = v743;
        do
        {
          v182 = v23;
          do
          {
            _H1 = *(_WORD *)(v40 + 6);
            __asm { FCVT            S1, H1 }
            v185 = 1.0 - _S1;
            if (v185 <= 0.0)
            {
              *(_QWORD *)v58 = 0;
            }
            else if (v185 < 1.0)
            {
              *(float16x4_t *)v58 = vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(*(float16x4_t *)v58), v185));
            }
            v186 = v40 + 8 * v702;
            if (v186 >= v53)
              v187 = -(uint64_t)(int)v708;
            else
              v187 = 0;
            v40 = v186 + 8 * v187;
            v58 += 8 * v702;
            --v182;
          }
          while (v182);
          v58 += 8 * v729;
          v188 = v52 + 8 * v733;
          if (v188 >= v731)
            v189 = -(uint64_t)(v733 * (int)v704);
          else
            v189 = 0;
          v190 = v188 + 8 * v189;
          v191 = v53 + 8 * v189 + 8 * v733;
          if (v731)
          {
            v53 = v191;
            v52 = v190;
            v40 = v190;
          }
          else
          {
            v40 += 8 * v733;
          }
          --v181;
        }
        while (v181);
        goto LABEL_319;
      case 9:
        v192 = v743;
        do
        {
          v193 = v23;
          do
          {
            v194 = vcvtq_f32_f16(*(float16x4_t *)v58);
            v195 = vcvtq_f32_f16(*(float16x4_t *)v40);
            *(float16x4_t *)v58 = vcvt_f16_f32(vmlaq_n_f32(vmulq_laneq_f32(v194, v195, 3), v195, 1.0 - v194.f32[3]));
            v196 = v40 + 8 * v702;
            if (v196 >= v53)
              v197 = -(uint64_t)(int)v708;
            else
              v197 = 0;
            v40 = v196 + 8 * v197;
            v58 += 8 * v702;
            --v193;
          }
          while (v193);
          v58 += 8 * v729;
          v198 = v52 + 8 * v733;
          if (v198 >= v731)
            v199 = -(uint64_t)(v733 * (int)v704);
          else
            v199 = 0;
          v200 = v198 + 8 * v199;
          v201 = v53 + 8 * v199 + 8 * v733;
          if (v731)
          {
            v53 = v201;
            v52 = v200;
            v40 = v200;
          }
          else
          {
            v40 += 8 * v733;
          }
          --v192;
        }
        while (v192);
        goto LABEL_319;
      case 10:
        v202 = v743;
        do
        {
          v203 = v23;
          do
          {
            v204 = vcvtq_f32_f16(*(float16x4_t *)v58);
            v205 = vcvtq_f32_f16(*(float16x4_t *)v40);
            *(float16x4_t *)v58 = vcvt_f16_f32(vmlaq_n_f32(vmulq_n_f32(v204, 1.0 - v205.f32[3]), v205, 1.0 - v204.f32[3]));
            v206 = v40 + 8 * v702;
            if (v206 >= v53)
              v207 = -(uint64_t)(int)v708;
            else
              v207 = 0;
            v40 = v206 + 8 * v207;
            v58 += 8 * v702;
            --v203;
          }
          while (v203);
          v58 += 8 * v729;
          v208 = v52 + 8 * v733;
          if (v208 >= v731)
            v209 = -(uint64_t)(v733 * (int)v704);
          else
            v209 = 0;
          v210 = v208 + 8 * v209;
          v211 = v53 + 8 * v209 + 8 * v733;
          if (v731)
          {
            v53 = v211;
            v52 = v210;
            v40 = v210;
          }
          else
          {
            v40 += 8 * v733;
          }
          --v202;
        }
        while (v202);
        goto LABEL_319;
      case 11:
        v212 = v743;
        do
        {
          v213 = v23;
          do
          {
            _S0 = 1.0;
            _S1 = 1.0;
            if (v19)
            {
              _H1 = *(_WORD *)(v58 + 6);
              __asm { FCVT            S1, H1 }
            }
            if (v51)
            {
              _H0 = *(_WORD *)(v40 + 6);
              __asm { FCVT            S0, H0 }
            }
            _S3 = 1.0;
            _S4 = 1.0;
            if (v19)
            {
              _H2 = *(_WORD *)(v58 + 6);
              __asm { FCVT            S4, H2 }
            }
            if (v51)
            {
              _H2 = *(_WORD *)(v40 + 6);
              __asm { FCVT            S3, H2 }
            }
            _S0 = _S1 + _S0;
            _S1 = 1.0;
            if (_S0 > 1.0)
              _S0 = 1.0;
            _S2 = 1.0;
            if (v19)
            {
              _H2 = *(_WORD *)(v58 + 6);
              __asm { FCVT            S2, H2 }
            }
            if (v51)
            {
              _H1 = *(_WORD *)(v40 + 6);
              __asm { FCVT            S1, H1 }
            }
            _H5 = *(_WORD *)v58;
            __asm { FCVT            S5, H5 }
            v229 = _S4 - _S5;
            LOWORD(_S5) = *(_WORD *)v40;
            __asm { FCVT            S5, H5 }
            v231 = v229 + (float)(_S3 - _S5);
            _H5 = *(_WORD *)(v58 + 2);
            _H4 = *(_WORD *)(v40 + 2);
            _S3 = _S0 - v231;
            __asm { FCVT            H3, S3 }
            *(_WORD *)v58 = LOWORD(_S3);
            _S3 = 1.0;
            _S6 = 1.0;
            if (v19)
            {
              _H6 = *(_WORD *)(v58 + 6);
              __asm { FCVT            S6, H6 }
            }
            if (v51)
            {
              _H3 = *(_WORD *)(v40 + 6);
              __asm { FCVT            S3, H3 }
            }
            __asm
            {
              FCVT            S5, H5
              FCVT            S4, H4
            }
            v241 = (float)(_S2 - _S5) + (float)(_S1 - _S4);
            _H2 = *(_WORD *)(v58 + 4);
            __asm { FCVT            S2, H2 }
            LOWORD(_S4) = *(_WORD *)(v40 + 4);
            __asm { FCVT            S4, H4 }
            _S1 = _S0 - v241;
            __asm { FCVT            H1, S1 }
            *(_WORD *)(v58 + 2) = LOWORD(_S1);
            __asm { FCVT            H1, S0 }
            *(_WORD *)(v58 + 6) = LOWORD(_S1);
            _S0 = _S0 - (float)((float)(_S6 - _S2) + (float)(_S3 - _S4));
            __asm { FCVT            H0, S0 }
            *(_WORD *)(v58 + 4) = LOWORD(_S0);
            v247 = v40 + 8 * v702;
            if (v247 >= v53)
              v248 = -(uint64_t)(int)v708;
            else
              v248 = 0;
            v40 = v247 + 8 * v248;
            v58 += 8 * v702;
            --v213;
          }
          while (v213);
          v58 += 8 * v729;
          v249 = v52 + 8 * v733;
          if (v249 >= v731)
            v250 = -(uint64_t)(v733 * (int)v704);
          else
            v250 = 0;
          v251 = v249 + 8 * v250;
          v252 = v53 + 8 * v250 + 8 * v733;
          if (v731)
          {
            v53 = v252;
            v52 = v251;
            v40 = v251;
          }
          else
          {
            v40 += 8 * v733;
          }
          --v212;
        }
        while (v212);
        goto LABEL_319;
      case 12:
        v253 = v743;
        do
        {
          v254 = v23;
          do
          {
            _H1 = *(_WORD *)v58;
            _H2 = *(_WORD *)v40;
            _H3 = *(_WORD *)(v58 + 2);
            _H4 = *(_WORD *)(v40 + 2);
            __asm
            {
              FCVT            S2, H2
              FCVT            S1, H1
            }
            _S1 = _S1 + _S2;
            __asm { FCVT            H1, S1 }
            *(_WORD *)v58 = LOWORD(_S1);
            __asm
            {
              FCVT            S1, H4
              FCVT            S2, H3
            }
            _S1 = _S2 + _S1;
            __asm { FCVT            H1, S1 }
            *(_WORD *)(v58 + 2) = LOWORD(_S1);
            _S1 = 1.0;
            if (v51)
            {
              _H1 = *(_WORD *)(v40 + 6);
              __asm { FCVT            S1, H1 }
            }
            _H2 = *(_WORD *)(v58 + 6);
            __asm { FCVT            S2, H2 }
            _S1 = _S1 + _S2;
            _H2 = *(_WORD *)(v58 + 4);
            _H3 = *(_WORD *)(v40 + 4);
            if (_S1 > 1.0)
              _S1 = 1.0;
            __asm
            {
              FCVT            S3, H3
              FCVT            S2, H2
            }
            _S2 = _S2 + _S3;
            __asm { FCVT            H2, S2 }
            *(_WORD *)(v58 + 4) = LOWORD(_S2);
            __asm { FCVT            H1, S1 }
            *(_WORD *)(v58 + 6) = _H1;
            v276 = v40 + 8 * v702;
            if (v276 >= v53)
              v277 = -(uint64_t)(int)v708;
            else
              v277 = 0;
            v40 = v276 + 8 * v277;
            v58 += 8 * v702;
            --v254;
          }
          while (v254);
          v58 += 8 * v729;
          v278 = v52 + 8 * v733;
          if (v278 >= v731)
            v279 = -(uint64_t)(v733 * (int)v704);
          else
            v279 = 0;
          v280 = v278 + 8 * v279;
          v281 = v53 + 8 * v279 + 8 * v733;
          if (v731)
          {
            v53 = v281;
            v52 = v280;
            v40 = v280;
          }
          else
          {
            v40 += 8 * v733;
          }
          --v253;
        }
        while (v253);
        goto LABEL_319;
      case 13:
        v700 = v42;
        v701 = v41;
        v282 = v743;
        while (1)
        {
          v710 = v282;
          v283 = v23;
          do
          {
            LODWORD(_D5) = 1.0;
            if (v51)
            {
              _H0 = *(_WORD *)(v40 + 6);
              __asm { FCVT            S5, H0 }
              if (*(float *)&_D5 <= 0.0)
                goto LABEL_288;
            }
            if (v19)
            {
              _Q3.i16[0] = *(_WORD *)(v58 + 6);
              __asm { FCVT            S4, H3 }
              if (_S4 <= 0.0)
              {
                *(_DWORD *)v58 = *(_DWORD *)v40;
                *(_WORD *)(v58 + 4) = *(_WORD *)(v40 + 4);
                __asm { FCVT            H0, S5 }
                *(_WORD *)(v58 + 6) = _H0;
                goto LABEL_288;
              }
            }
            else
            {
              _Q3.i16[0] = *(_WORD *)(v58 + 6);
              _S4 = 1.0;
            }
            _Q0.n128_u16[0] = *(_WORD *)v58;
            _Q1.n128_u16[0] = *(_WORD *)(v58 + 2);
            a5.n128_u16[0] = *(_WORD *)(v58 + 4);
            *(_WORD *)v58 = PDAmultiplyPDA(_Q0, _Q1, a5, *(double *)_Q3.i64, _S4, _D5, *(double *)_Q6.i64, *(double *)a10.i64, (uint64_t)a1, a2, (uint64_t)v26, a12, a13, a14, v43, v44, *(_DWORD *)v40, HIWORD(*(_DWORD *)v40), *(_DWORD *)(v40 + 4),
                              *(float *)&_D5);
            *(_WORD *)(v58 + 2) = _Q1.n128_u16[0];
            *(_WORD *)(v58 + 4) = a5.n128_u16[0];
            *(_WORD *)(v58 + 6) = _Q3.i16[0];
LABEL_288:
            v287 = v40 + 8 * v702;
            if (v287 >= v53)
              v288 = -(uint64_t)(int)v708;
            else
              v288 = 0;
            v40 = v287 + 8 * v288;
            v58 += 8 * v702;
            --v283;
          }
          while (v283);
          v58 += 8 * v729;
          v289 = v52 + 8 * v733;
          v290 = -(uint64_t)(v733 * (int)v704);
          if (v289 < v731)
            v290 = 0;
          v291 = v289 + 8 * v290;
          v292 = v53 + 8 * v290 + 8 * v733;
          if (v731)
          {
            v53 = v292;
            v52 = v291;
            v40 = v291;
          }
          else
          {
            v40 += 8 * v733;
          }
          v282 = v710 - 1;
          if (v710 == 1)
            goto LABEL_579;
        }
      case 14:
        v293 = v743;
        do
        {
          v294 = v23;
          do
          {
            _S2 = 1.0;
            _S1 = 1.0;
            if (!v51)
              goto LABEL_928;
            _H1 = *(_WORD *)(v40 + 6);
            __asm { FCVT            S1, H1 }
            if (_S1 > 0.0)
            {
              if (!v19)
                goto LABEL_305;
LABEL_928:
              _H2 = *(_WORD *)(v58 + 6);
              __asm { FCVT            S2, H2 }
              if (_S2 <= 0.0)
              {
                *(_DWORD *)v58 = *(_DWORD *)v40;
                *(_WORD *)(v58 + 4) = *(_WORD *)(v40 + 4);
                __asm { FCVT            H1, S1 }
              }
              else
              {
LABEL_305:
                _H3 = *(_WORD *)v58;
                _H4 = *(_WORD *)(v58 + 2);
                _H5 = *(_WORD *)(v58 + 4);
                _H6 = *(_WORD *)v40;
                _H7 = *(_WORD *)(v40 + 2);
                _H16 = *(_WORD *)(v40 + 4);
                __asm
                {
                  FCVT            S3, H3
                  FCVT            S4, H4
                  FCVT            S5, H5
                  FCVT            S6, H6
                  FCVT            S7, H7
                  FCVT            S16, H16
                }
                _S3 = _S3 + (float)(_S6 * (float)(1.0 - _S3));
                _S4 = _S4 + (float)(_S7 * (float)(1.0 - _S4));
                _S5 = _S5 + (float)(_S16 * (float)(1.0 - _S5));
                _S1 = (float)(_S1 + _S2) - (float)(_S2 * _S1);
                __asm
                {
                  FCVT            H2, S3
                  FCVT            H3, S4
                  FCVT            H4, S5
                }
                *(_WORD *)v58 = _H2;
                *(_WORD *)(v58 + 2) = LOWORD(_S3);
                __asm { FCVT            H1, S1 }
                *(_WORD *)(v58 + 4) = LOWORD(_S4);
              }
              *(_WORD *)(v58 + 6) = _H1;
            }
            v317 = v40 + 8 * v702;
            if (v317 >= v53)
              v318 = -(uint64_t)(int)v708;
            else
              v318 = 0;
            v40 = v317 + 8 * v318;
            v58 += 8 * v702;
            --v294;
          }
          while (v294);
          v58 += 8 * v729;
          v319 = v52 + 8 * v733;
          if (v319 >= v731)
            v320 = -(uint64_t)(v733 * (int)v704);
          else
            v320 = 0;
          v321 = v319 + 8 * v320;
          v322 = v53 + 8 * v320 + 8 * v733;
          if (v731)
          {
            v53 = v322;
            v52 = v321;
            v40 = v321;
          }
          else
          {
            v40 += 8 * v733;
          }
          --v293;
        }
        while (v293);
        goto LABEL_319;
      case 15:
        v700 = v42;
        v701 = v41;
        v323 = v743;
        while (1)
        {
          v711 = v323;
          v324 = v23;
          do
          {
            LODWORD(_D5) = 1.0;
            if (v51)
            {
              _H0 = *(_WORD *)(v40 + 6);
              __asm { FCVT            S5, H0 }
              if (*(float *)&_D5 <= 0.0)
                goto LABEL_329;
            }
            if (v19)
            {
              _Q3.i16[0] = *(_WORD *)(v58 + 6);
              __asm { FCVT            S4, H3 }
              if (_S4 <= 0.0)
              {
                *(_DWORD *)v58 = *(_DWORD *)v40;
                *(_WORD *)(v58 + 4) = *(_WORD *)(v40 + 4);
                __asm { FCVT            H0, S5 }
                *(_WORD *)(v58 + 6) = _H0;
                goto LABEL_329;
              }
            }
            else
            {
              _Q3.i16[0] = *(_WORD *)(v58 + 6);
              _S4 = 1.0;
            }
            _Q0.n128_u16[0] = *(_WORD *)v58;
            _Q1.n128_u16[0] = *(_WORD *)(v58 + 2);
            a5.n128_u16[0] = *(_WORD *)(v58 + 4);
            *(_WORD *)v58 = PDAoverlayPDA(_Q0, _Q1, a5, *(double *)_Q3.i64, _S4, _D5, *(double *)_Q6.i64, *(double *)a10.i64, (uint64_t)a1, a2, (uint64_t)v26, a12, a13, a14, v43, v44, *(_DWORD *)v40, HIWORD(*(_DWORD *)v40), *(_DWORD *)(v40 + 4),
                              *(float *)&_D5);
            *(_WORD *)(v58 + 2) = _Q1.n128_u16[0];
            *(_WORD *)(v58 + 4) = a5.n128_u16[0];
            *(_WORD *)(v58 + 6) = _Q3.i16[0];
LABEL_329:
            v328 = v40 + 8 * v702;
            if (v328 >= v53)
              v329 = -(uint64_t)(int)v708;
            else
              v329 = 0;
            v40 = v328 + 8 * v329;
            v58 += 8 * v702;
            --v324;
          }
          while (v324);
          v58 += 8 * v729;
          v330 = v52 + 8 * v733;
          v331 = -(uint64_t)(v733 * (int)v704);
          if (v330 < v731)
            v331 = 0;
          v332 = v330 + 8 * v331;
          v333 = v53 + 8 * v331 + 8 * v733;
          if (v731)
          {
            v53 = v333;
            v52 = v332;
            v40 = v332;
          }
          else
          {
            v40 += 8 * v733;
          }
          v323 = v711 - 1;
          if (v711 == 1)
            goto LABEL_579;
        }
      case 16:
        v700 = v42;
        v701 = v41;
        v334 = v743;
        while (1)
        {
          v712 = v334;
          v335 = v23;
          do
          {
            LODWORD(_D5) = 1.0;
            if (v51)
            {
              _H0 = *(_WORD *)(v40 + 6);
              __asm { FCVT            S5, H0 }
              if (*(float *)&_D5 <= 0.0)
                goto LABEL_349;
            }
            if (v19)
            {
              _Q3.i16[0] = *(_WORD *)(v58 + 6);
              __asm { FCVT            S4, H3 }
              if (_S4 <= 0.0)
              {
                *(_DWORD *)v58 = *(_DWORD *)v40;
                *(_WORD *)(v58 + 4) = *(_WORD *)(v40 + 4);
                __asm { FCVT            H0, S5 }
                *(_WORD *)(v58 + 6) = _H0;
                goto LABEL_349;
              }
            }
            else
            {
              _Q3.i16[0] = *(_WORD *)(v58 + 6);
              _S4 = 1.0;
            }
            _Q0.n128_u16[0] = *(_WORD *)v58;
            _Q1.n128_u16[0] = *(_WORD *)(v58 + 2);
            a5.n128_u16[0] = *(_WORD *)(v58 + 4);
            *(_WORD *)v58 = PDAdarkenPDA(_Q0, _Q1, a5, *(double *)_Q3.i64, _S4, _D5, *(double *)_Q6.i64, *(double *)a10.i64, (uint64_t)a1, a2, (uint64_t)v26, a12, a13, a14, v43, v44, *(_DWORD *)v40, HIWORD(*(_DWORD *)v40), *(_DWORD *)(v40 + 4),
                              *(float *)&_D5);
            *(_WORD *)(v58 + 2) = _Q1.n128_u16[0];
            *(_WORD *)(v58 + 4) = a5.n128_u16[0];
            *(_WORD *)(v58 + 6) = _Q3.i16[0];
LABEL_349:
            v339 = v40 + 8 * v702;
            if (v339 >= v53)
              v340 = -(uint64_t)(int)v708;
            else
              v340 = 0;
            v40 = v339 + 8 * v340;
            v58 += 8 * v702;
            --v335;
          }
          while (v335);
          v58 += 8 * v729;
          v341 = v52 + 8 * v733;
          v342 = -(uint64_t)(v733 * (int)v704);
          if (v341 < v731)
            v342 = 0;
          v343 = v341 + 8 * v342;
          v344 = v53 + 8 * v342 + 8 * v733;
          if (v731)
          {
            v53 = v344;
            v52 = v343;
            v40 = v343;
          }
          else
          {
            v40 += 8 * v733;
          }
          v334 = v712 - 1;
          if (v712 == 1)
            goto LABEL_579;
        }
      case 17:
        v700 = v42;
        v701 = v41;
        v345 = v743;
        while (1)
        {
          v713 = v345;
          v346 = v23;
          do
          {
            LODWORD(_D5) = 1.0;
            if (v51)
            {
              _H0 = *(_WORD *)(v40 + 6);
              __asm { FCVT            S5, H0 }
              if (*(float *)&_D5 <= 0.0)
                goto LABEL_369;
            }
            if (v19)
            {
              _Q3.i16[0] = *(_WORD *)(v58 + 6);
              __asm { FCVT            S4, H3 }
              if (_S4 <= 0.0)
              {
                *(_DWORD *)v58 = *(_DWORD *)v40;
                *(_WORD *)(v58 + 4) = *(_WORD *)(v40 + 4);
                __asm { FCVT            H0, S5 }
                *(_WORD *)(v58 + 6) = _H0;
                goto LABEL_369;
              }
            }
            else
            {
              _Q3.i16[0] = *(_WORD *)(v58 + 6);
              _S4 = 1.0;
            }
            _Q0.n128_u16[0] = *(_WORD *)v58;
            _Q1.n128_u16[0] = *(_WORD *)(v58 + 2);
            a5.n128_u16[0] = *(_WORD *)(v58 + 4);
            *(_WORD *)v58 = PDAlightenPDA(_Q0, _Q1, a5, *(double *)_Q3.i64, _S4, _D5, *(double *)_Q6.i64, *(double *)a10.i64, (uint64_t)a1, a2, (uint64_t)v26, a12, a13, a14, v43, v44, *(_DWORD *)v40, HIWORD(*(_DWORD *)v40), *(_DWORD *)(v40 + 4),
                              *(float *)&_D5);
            *(_WORD *)(v58 + 2) = _Q1.n128_u16[0];
            *(_WORD *)(v58 + 4) = a5.n128_u16[0];
            *(_WORD *)(v58 + 6) = _Q3.i16[0];
LABEL_369:
            v350 = v40 + 8 * v702;
            if (v350 >= v53)
              v351 = -(uint64_t)(int)v708;
            else
              v351 = 0;
            v40 = v350 + 8 * v351;
            v58 += 8 * v702;
            --v346;
          }
          while (v346);
          v58 += 8 * v729;
          v352 = v52 + 8 * v733;
          v353 = -(uint64_t)(v733 * (int)v704);
          if (v352 < v731)
            v353 = 0;
          v354 = v352 + 8 * v353;
          v355 = v53 + 8 * v353 + 8 * v733;
          if (v731)
          {
            v53 = v355;
            v52 = v354;
            v40 = v354;
          }
          else
          {
            v40 += 8 * v733;
          }
          v345 = v713 - 1;
          if (v713 == 1)
            goto LABEL_579;
        }
      case 18:
        v700 = v42;
        v701 = v41;
        v356 = v743;
        while (1)
        {
          v714 = v356;
          v357 = v23;
          do
          {
            LODWORD(_D5) = 1.0;
            if (v51)
            {
              _H0 = *(_WORD *)(v40 + 6);
              __asm { FCVT            S5, H0 }
              if (*(float *)&_D5 <= 0.0)
                goto LABEL_389;
            }
            if (v19)
            {
              _Q3.i16[0] = *(_WORD *)(v58 + 6);
              __asm { FCVT            S4, H3 }
              if (_S4 <= 0.0)
              {
                *(_DWORD *)v58 = *(_DWORD *)v40;
                *(_WORD *)(v58 + 4) = *(_WORD *)(v40 + 4);
                __asm { FCVT            H0, S5 }
                *(_WORD *)(v58 + 6) = _H0;
                goto LABEL_389;
              }
            }
            else
            {
              _Q3.i16[0] = *(_WORD *)(v58 + 6);
              _S4 = 1.0;
            }
            _Q0.n128_u16[0] = *(_WORD *)v58;
            _Q1.n128_u16[0] = *(_WORD *)(v58 + 2);
            a5.n128_u16[0] = *(_WORD *)(v58 + 4);
            *(_WORD *)v58 = PDAcolordodgePDA(_Q0, _Q1, a5, *(double *)_Q3.i64, _S4, _D5, *(double *)_Q6.i64, *(double *)a10.i64, (uint64_t)a1, a2, (uint64_t)v26, a12, a13, a14, v43, v44, *(_DWORD *)v40, HIWORD(*(_DWORD *)v40), *(_DWORD *)(v40 + 4),
                              *(float *)&_D5);
            *(_WORD *)(v58 + 2) = _Q1.n128_u16[0];
            *(_WORD *)(v58 + 4) = a5.n128_u16[0];
            *(_WORD *)(v58 + 6) = _Q3.i16[0];
LABEL_389:
            v361 = v40 + 8 * v702;
            if (v361 >= v53)
              v362 = -(uint64_t)(int)v708;
            else
              v362 = 0;
            v40 = v361 + 8 * v362;
            v58 += 8 * v702;
            --v357;
          }
          while (v357);
          v58 += 8 * v729;
          v363 = v52 + 8 * v733;
          v364 = -(uint64_t)(v733 * (int)v704);
          if (v363 < v731)
            v364 = 0;
          v365 = v363 + 8 * v364;
          v366 = v53 + 8 * v364 + 8 * v733;
          if (v731)
          {
            v53 = v366;
            v52 = v365;
            v40 = v365;
          }
          else
          {
            v40 += 8 * v733;
          }
          v356 = v714 - 1;
          if (v714 == 1)
            goto LABEL_579;
        }
      case 19:
        v700 = v42;
        v701 = v41;
        v367 = v743;
        while (1)
        {
          v715 = v367;
          v368 = v23;
          do
          {
            LODWORD(_D5) = 1.0;
            if (v51)
            {
              _H0 = *(_WORD *)(v40 + 6);
              __asm { FCVT            S5, H0 }
              if (*(float *)&_D5 <= 0.0)
                goto LABEL_409;
            }
            if (v19)
            {
              _Q3.i16[0] = *(_WORD *)(v58 + 6);
              __asm { FCVT            S4, H3 }
              if (_S4 <= 0.0)
              {
                *(_DWORD *)v58 = *(_DWORD *)v40;
                *(_WORD *)(v58 + 4) = *(_WORD *)(v40 + 4);
                __asm { FCVT            H0, S5 }
                *(_WORD *)(v58 + 6) = _H0;
                goto LABEL_409;
              }
            }
            else
            {
              _Q3.i16[0] = *(_WORD *)(v58 + 6);
              _S4 = 1.0;
            }
            _Q0.n128_u16[0] = *(_WORD *)v58;
            _Q1.n128_u16[0] = *(_WORD *)(v58 + 2);
            a5.n128_u16[0] = *(_WORD *)(v58 + 4);
            *(_WORD *)v58 = PDAcolorburnPDA(_Q0, _Q1, a5, *(double *)_Q3.i64, _S4, _D5, *(double *)_Q6.i64, *(double *)a10.i64, (uint64_t)a1, a2, (uint64_t)v26, a12, a13, a14, v43, v44, *(_DWORD *)v40, HIWORD(*(_DWORD *)v40), *(_DWORD *)(v40 + 4),
                              *(float *)&_D5);
            *(_WORD *)(v58 + 2) = _Q1.n128_u16[0];
            *(_WORD *)(v58 + 4) = a5.n128_u16[0];
            *(_WORD *)(v58 + 6) = _Q3.i16[0];
LABEL_409:
            v372 = v40 + 8 * v702;
            if (v372 >= v53)
              v373 = -(uint64_t)(int)v708;
            else
              v373 = 0;
            v40 = v372 + 8 * v373;
            v58 += 8 * v702;
            --v368;
          }
          while (v368);
          v58 += 8 * v729;
          v374 = v52 + 8 * v733;
          v375 = -(uint64_t)(v733 * (int)v704);
          if (v374 < v731)
            v375 = 0;
          v376 = v374 + 8 * v375;
          v377 = v53 + 8 * v375 + 8 * v733;
          if (v731)
          {
            v53 = v377;
            v52 = v376;
            v40 = v376;
          }
          else
          {
            v40 += 8 * v733;
          }
          v367 = v715 - 1;
          if (v715 == 1)
            goto LABEL_579;
        }
      case 20:
        v700 = v42;
        v701 = v41;
        v378 = v743;
        while (1)
        {
          v716 = v378;
          v379 = v23;
          do
          {
            LODWORD(_D5) = 1.0;
            if (v51)
            {
              _H0 = *(_WORD *)(v40 + 6);
              __asm { FCVT            S5, H0 }
              if (*(float *)&_D5 <= 0.0)
                goto LABEL_429;
            }
            if (v19)
            {
              _Q3.i16[0] = *(_WORD *)(v58 + 6);
              __asm { FCVT            S4, H3 }
              if (_S4 <= 0.0)
              {
                *(_DWORD *)v58 = *(_DWORD *)v40;
                *(_WORD *)(v58 + 4) = *(_WORD *)(v40 + 4);
                __asm { FCVT            H0, S5 }
                *(_WORD *)(v58 + 6) = _H0;
                goto LABEL_429;
              }
            }
            else
            {
              _Q3.i16[0] = *(_WORD *)(v58 + 6);
              _S4 = 1.0;
            }
            _Q0.n128_u16[0] = *(_WORD *)v58;
            _Q1.n128_u16[0] = *(_WORD *)(v58 + 2);
            a5.n128_u16[0] = *(_WORD *)(v58 + 4);
            *(_WORD *)v58 = PDAsoftlightPDA(_Q0, _Q1, a5, *(double *)_Q3.i64, _S4, _D5, *(double *)_Q6.i64, *(double *)a10.i64, (uint64_t)a1, a2, (uint64_t)v26, a12, a13, a14, v43, v44, *(_DWORD *)v40, HIWORD(*(_DWORD *)v40), *(_DWORD *)(v40 + 4),
                              *(float *)&_D5);
            *(_WORD *)(v58 + 2) = _Q1.n128_u16[0];
            *(_WORD *)(v58 + 4) = a5.n128_u16[0];
            *(_WORD *)(v58 + 6) = _Q3.i16[0];
LABEL_429:
            v383 = v40 + 8 * v702;
            if (v383 >= v53)
              v384 = -(uint64_t)(int)v708;
            else
              v384 = 0;
            v40 = v383 + 8 * v384;
            v58 += 8 * v702;
            --v379;
          }
          while (v379);
          v58 += 8 * v729;
          v385 = v52 + 8 * v733;
          v386 = -(uint64_t)(v733 * (int)v704);
          if (v385 < v731)
            v386 = 0;
          v387 = v385 + 8 * v386;
          v388 = v53 + 8 * v386 + 8 * v733;
          if (v731)
          {
            v53 = v388;
            v52 = v387;
            v40 = v387;
          }
          else
          {
            v40 += 8 * v733;
          }
          v378 = v716 - 1;
          if (v716 == 1)
            goto LABEL_579;
        }
      case 21:
        v700 = v42;
        v701 = v41;
        v389 = v743;
        while (1)
        {
          v717 = v389;
          v390 = v23;
          do
          {
            LODWORD(_D5) = 1.0;
            if (v51)
            {
              _H0 = *(_WORD *)(v40 + 6);
              __asm { FCVT            S5, H0 }
              if (*(float *)&_D5 <= 0.0)
                goto LABEL_449;
            }
            if (v19)
            {
              _Q3.i16[0] = *(_WORD *)(v58 + 6);
              __asm { FCVT            S4, H3 }
              if (_S4 <= 0.0)
              {
                *(_DWORD *)v58 = *(_DWORD *)v40;
                *(_WORD *)(v58 + 4) = *(_WORD *)(v40 + 4);
                __asm { FCVT            H0, S5 }
                *(_WORD *)(v58 + 6) = _H0;
                goto LABEL_449;
              }
            }
            else
            {
              _Q3.i16[0] = *(_WORD *)(v58 + 6);
              _S4 = 1.0;
            }
            _Q0.n128_u16[0] = *(_WORD *)v58;
            _Q1.n128_u16[0] = *(_WORD *)(v58 + 2);
            a5.n128_u16[0] = *(_WORD *)(v58 + 4);
            *(_WORD *)v58 = PDAhardlightPDA(_Q0, _Q1, a5, *(double *)_Q3.i64, _S4, _D5, *(double *)_Q6.i64, *(double *)a10.i64, (uint64_t)a1, a2, (uint64_t)v26, a12, a13, a14, v43, v44, *(_DWORD *)v40, HIWORD(*(_DWORD *)v40), *(_DWORD *)(v40 + 4),
                              *(float *)&_D5);
            *(_WORD *)(v58 + 2) = _Q1.n128_u16[0];
            *(_WORD *)(v58 + 4) = a5.n128_u16[0];
            *(_WORD *)(v58 + 6) = _Q3.i16[0];
LABEL_449:
            v394 = v40 + 8 * v702;
            if (v394 >= v53)
              v395 = -(uint64_t)(int)v708;
            else
              v395 = 0;
            v40 = v394 + 8 * v395;
            v58 += 8 * v702;
            --v390;
          }
          while (v390);
          v58 += 8 * v729;
          v396 = v52 + 8 * v733;
          v397 = -(uint64_t)(v733 * (int)v704);
          if (v396 < v731)
            v397 = 0;
          v398 = v396 + 8 * v397;
          v399 = v53 + 8 * v397 + 8 * v733;
          if (v731)
          {
            v53 = v399;
            v52 = v398;
            v40 = v398;
          }
          else
          {
            v40 += 8 * v733;
          }
          v389 = v717 - 1;
          if (v717 == 1)
            goto LABEL_579;
        }
      case 22:
        v700 = v42;
        v701 = v41;
        v400 = v743;
        while (1)
        {
          v718 = v400;
          v401 = v23;
          do
          {
            LODWORD(_D5) = 1.0;
            if (v51)
            {
              _H0 = *(_WORD *)(v40 + 6);
              __asm { FCVT            S5, H0 }
              if (*(float *)&_D5 <= 0.0)
                goto LABEL_469;
            }
            if (v19)
            {
              _Q3.i16[0] = *(_WORD *)(v58 + 6);
              __asm { FCVT            S4, H3 }
              if (_S4 <= 0.0)
              {
                *(_DWORD *)v58 = *(_DWORD *)v40;
                *(_WORD *)(v58 + 4) = *(_WORD *)(v40 + 4);
                __asm { FCVT            H0, S5 }
                *(_WORD *)(v58 + 6) = _H0;
                goto LABEL_469;
              }
            }
            else
            {
              _Q3.i16[0] = *(_WORD *)(v58 + 6);
              _S4 = 1.0;
            }
            _Q0.n128_u16[0] = *(_WORD *)v58;
            _Q1.n128_u16[0] = *(_WORD *)(v58 + 2);
            a5.n128_u16[0] = *(_WORD *)(v58 + 4);
            *(_WORD *)v58 = PDAdifferencePDA(_Q0, _Q1.n128_f64[0], a5.n128_f64[0], *(double *)_Q3.i64, _S4, _D5, *(double *)_Q6.i64, *(double *)a10.i64, (uint64_t)a1, a2, (uint64_t)v26, a12, a13, a14, v43, v44, *(_DWORD *)v40, *(_DWORD *)(v40 + 4), *(float *)&_D5);
            *(_WORD *)(v58 + 2) = _Q1.n128_u16[0];
            *(_WORD *)(v58 + 4) = a5.n128_u16[0];
            *(_WORD *)(v58 + 6) = _Q3.i16[0];
LABEL_469:
            v405 = v40 + 8 * v702;
            if (v405 >= v53)
              v406 = -(uint64_t)(int)v708;
            else
              v406 = 0;
            v40 = v405 + 8 * v406;
            v58 += 8 * v702;
            --v401;
          }
          while (v401);
          v58 += 8 * v729;
          v407 = v52 + 8 * v733;
          v408 = -(uint64_t)(v733 * (int)v704);
          if (v407 < v731)
            v408 = 0;
          v409 = v407 + 8 * v408;
          v410 = v53 + 8 * v408 + 8 * v733;
          if (v731)
          {
            v53 = v410;
            v52 = v409;
            v40 = v409;
          }
          else
          {
            v40 += 8 * v733;
          }
          v400 = v718 - 1;
          if (v718 == 1)
            goto LABEL_579;
        }
      case 23:
        v700 = v42;
        v701 = v41;
        v411 = v743;
        while (1)
        {
          v719 = v411;
          v412 = v23;
          do
          {
            LODWORD(_D5) = 1.0;
            if (v51)
            {
              _H0 = *(_WORD *)(v40 + 6);
              __asm { FCVT            S5, H0 }
              if (*(float *)&_D5 <= 0.0)
                goto LABEL_489;
            }
            if (v19)
            {
              _Q3.i16[0] = *(_WORD *)(v58 + 6);
              __asm { FCVT            S4, H3 }
              if (_S4 <= 0.0)
              {
                *(_DWORD *)v58 = *(_DWORD *)v40;
                *(_WORD *)(v58 + 4) = *(_WORD *)(v40 + 4);
                __asm { FCVT            H0, S5 }
                *(_WORD *)(v58 + 6) = _H0;
                goto LABEL_489;
              }
            }
            else
            {
              _Q3.i16[0] = *(_WORD *)(v58 + 6);
              _S4 = 1.0;
            }
            _Q0.n128_u16[0] = *(_WORD *)v58;
            _Q1.n128_u16[0] = *(_WORD *)(v58 + 2);
            a5.n128_u16[0] = *(_WORD *)(v58 + 4);
            *(_WORD *)v58 = PDAexclusionPDA(_Q0, _Q1, a5, *(double *)_Q3.i64, _S4, _D5, *(double *)_Q6.i64, *(double *)a10.i64, (uint64_t)a1, a2, (uint64_t)v26, a12, a13, a14, v43, v44, *(_DWORD *)v40, HIWORD(*(_DWORD *)v40), *(_DWORD *)(v40 + 4),
                              *(float *)&_D5);
            *(_WORD *)(v58 + 2) = _Q1.n128_u16[0];
            *(_WORD *)(v58 + 4) = a5.n128_u16[0];
            *(_WORD *)(v58 + 6) = _Q3.i16[0];
LABEL_489:
            v416 = v40 + 8 * v702;
            if (v416 >= v53)
              v417 = -(uint64_t)(int)v708;
            else
              v417 = 0;
            v40 = v416 + 8 * v417;
            v58 += 8 * v702;
            --v412;
          }
          while (v412);
          v58 += 8 * v729;
          v418 = v52 + 8 * v733;
          v419 = -(uint64_t)(v733 * (int)v704);
          if (v418 < v731)
            v419 = 0;
          v420 = v418 + 8 * v419;
          v421 = v53 + 8 * v419 + 8 * v733;
          if (v731)
          {
            v53 = v421;
            v52 = v420;
            v40 = v420;
          }
          else
          {
            v40 += 8 * v733;
          }
          v411 = v719 - 1;
          if (v719 == 1)
            goto LABEL_579;
        }
      case 24:
        v700 = v42;
        v701 = v41;
        v422 = v743;
        while (1)
        {
          v720 = v422;
          v423 = v23;
          do
          {
            LODWORD(_D5) = 1.0;
            if (v51)
            {
              _H0 = *(_WORD *)(v40 + 6);
              __asm { FCVT            S5, H0 }
              if (*(float *)&_D5 <= 0.0)
                goto LABEL_509;
            }
            if (v19)
            {
              _Q3.i16[0] = *(_WORD *)(v58 + 6);
              __asm { FCVT            S4, H3 }
              if (_S4 <= 0.0)
              {
                *(_DWORD *)v58 = *(_DWORD *)v40;
                *(_WORD *)(v58 + 4) = *(_WORD *)(v40 + 4);
                __asm { FCVT            H0, S5 }
                *(_WORD *)(v58 + 6) = _H0;
                goto LABEL_509;
              }
            }
            else
            {
              _Q3.i16[0] = *(_WORD *)(v58 + 6);
              _S4 = 1.0;
            }
            _Q0.n128_u16[0] = *(_WORD *)v58;
            _Q1.n128_u16[0] = *(_WORD *)(v58 + 2);
            a5.n128_u16[0] = *(_WORD *)(v58 + 4);
            *(_WORD *)v58 = PDAhuePDA(_Q0, _Q1, a5, *(double *)_Q3.i64, _S4, _D5, *(double *)_Q6.i64, *(double *)a10.i64, (uint64_t)a1, a2, (uint64_t)v26, a12, a13, a14, v43, v44, *(_DWORD *)v40, HIWORD(*(_DWORD *)v40), *(_DWORD *)(v40 + 4),
                              *(float *)&_D5);
            *(_WORD *)(v58 + 2) = _Q1.n128_u16[0];
            *(_WORD *)(v58 + 4) = a5.n128_u16[0];
            *(_WORD *)(v58 + 6) = _Q3.i16[0];
LABEL_509:
            v427 = v40 + 8 * v702;
            if (v427 >= v53)
              v428 = -(uint64_t)(int)v708;
            else
              v428 = 0;
            v40 = v427 + 8 * v428;
            v58 += 8 * v702;
            --v423;
          }
          while (v423);
          v58 += 8 * v729;
          v429 = v52 + 8 * v733;
          v430 = -(uint64_t)(v733 * (int)v704);
          if (v429 < v731)
            v430 = 0;
          v431 = v429 + 8 * v430;
          v432 = v53 + 8 * v430 + 8 * v733;
          if (v731)
          {
            v53 = v432;
            v52 = v431;
            v40 = v431;
          }
          else
          {
            v40 += 8 * v733;
          }
          v422 = v720 - 1;
          if (v720 == 1)
            goto LABEL_579;
        }
      case 25:
        v700 = v42;
        v701 = v41;
        v433 = v743;
        while (1)
        {
          v721 = v433;
          v434 = v23;
          do
          {
            LODWORD(_D5) = 1.0;
            if (v51)
            {
              _H0 = *(_WORD *)(v40 + 6);
              __asm { FCVT            S5, H0 }
              if (*(float *)&_D5 <= 0.0)
                goto LABEL_529;
            }
            if (v19)
            {
              _Q3.i16[0] = *(_WORD *)(v58 + 6);
              __asm { FCVT            S4, H3 }
              if (_S4 <= 0.0)
              {
                *(_DWORD *)v58 = *(_DWORD *)v40;
                *(_WORD *)(v58 + 4) = *(_WORD *)(v40 + 4);
                __asm { FCVT            H0, S5 }
                *(_WORD *)(v58 + 6) = _H0;
                goto LABEL_529;
              }
            }
            else
            {
              _Q3.i16[0] = *(_WORD *)(v58 + 6);
              _S4 = 1.0;
            }
            _Q0.n128_u16[0] = *(_WORD *)v58;
            _Q1.n128_u16[0] = *(_WORD *)(v58 + 2);
            a5.n128_u16[0] = *(_WORD *)(v58 + 4);
            *(_WORD *)v58 = PDAsaturationPDA(_Q0, _Q1, a5, *(double *)_Q3.i64, _S4, _D5, *(double *)_Q6.i64, *(double *)a10.i64, (uint64_t)a1, a2, (uint64_t)v26, a12, a13, a14, v43, v44, *(_DWORD *)v40, HIWORD(*(_DWORD *)v40), *(_DWORD *)(v40 + 4),
                              *(float *)&_D5);
            *(_WORD *)(v58 + 2) = _Q1.n128_u16[0];
            *(_WORD *)(v58 + 4) = a5.n128_u16[0];
            *(_WORD *)(v58 + 6) = _Q3.i16[0];
LABEL_529:
            v438 = v40 + 8 * v702;
            if (v438 >= v53)
              v439 = -(uint64_t)(int)v708;
            else
              v439 = 0;
            v40 = v438 + 8 * v439;
            v58 += 8 * v702;
            --v434;
          }
          while (v434);
          v58 += 8 * v729;
          v440 = v52 + 8 * v733;
          v441 = -(uint64_t)(v733 * (int)v704);
          if (v440 < v731)
            v441 = 0;
          v442 = v440 + 8 * v441;
          v443 = v53 + 8 * v441 + 8 * v733;
          if (v731)
          {
            v53 = v443;
            v52 = v442;
            v40 = v442;
          }
          else
          {
            v40 += 8 * v733;
          }
          v433 = v721 - 1;
          if (v721 == 1)
            goto LABEL_579;
        }
      case 26:
        v700 = v42;
        v701 = v41;
        v444 = v743;
        v727 = v23;
        while (1)
        {
          v722 = v444;
          do
          {
            _S4 = 1.0;
            if (v51)
            {
              _H0 = *(_WORD *)(v40 + 6);
              __asm { FCVT            S4, H0 }
              if (_S4 <= 0.0)
                goto LABEL_549;
            }
            if (v19)
            {
              LOWORD(_D5) = *(_WORD *)(v58 + 6);
              __asm { FCVT            S6, H5 }
              if (_Q6.f32[0] <= 0.0)
              {
                *(_DWORD *)v58 = *(_DWORD *)v40;
                *(_WORD *)(v58 + 4) = *(_WORD *)(v40 + 4);
                __asm { FCVT            H0, S4 }
                *(_WORD *)(v58 + 6) = _H0;
                goto LABEL_549;
              }
            }
            else
            {
              LOWORD(_D5) = *(_WORD *)(v58 + 6);
              _Q6.i32[0] = 1.0;
            }
            _Q0.n128_u16[0] = *(_WORD *)v40;
            _Q1.n128_u16[0] = *(_WORD *)(v40 + 2);
            a5.n128_u16[0] = *(_WORD *)(v40 + 4);
            _Q3.i16[0] = *(_WORD *)(v40 + 6);
            a10.i16[0] = *(_WORD *)v58;
            *(_WORD *)v58 = PDAluminosityPDA(_Q0, _Q1, a5, *(double *)_Q3.i64, _S4, _D5, *(double *)_Q6.i64, *(double *)a10.i64, (uint64_t)a1, a2, (uint64_t)v26, a12, a13, a14, v43, v44, *(_WORD *)v58, *(_DWORD *)(v58 + 2), HIWORD(*(_DWORD *)(v58 + 2)),
                              _Q6.f32[0]);
            *(_WORD *)(v58 + 2) = _Q1.n128_u16[0];
            *(_WORD *)(v58 + 4) = a5.n128_u16[0];
            *(_WORD *)(v58 + 6) = _Q3.i16[0];
LABEL_549:
            v448 = v40 + 8 * v702;
            if (v448 >= v53)
              v449 = -(uint64_t)(int)v708;
            else
              v449 = 0;
            v40 = v448 + 8 * v449;
            v58 += 8 * v702;
            LODWORD(v23) = v23 - 1;
          }
          while ((_DWORD)v23);
          v58 += 8 * v729;
          v450 = v52 + 8 * v733;
          v451 = -(uint64_t)(v733 * (int)v704);
          if (v450 < v731)
            v451 = 0;
          v452 = v450 + 8 * v451;
          v453 = v53 + 8 * v451 + 8 * v733;
          if (v731)
          {
            v53 = v453;
            v52 = v452;
            v40 = v452;
          }
          else
          {
            v40 += 8 * v733;
          }
          v444 = v722 - 1;
          LODWORD(v23) = v727;
          if (v722 == 1)
            goto LABEL_579;
        }
      case 27:
        v700 = v42;
        v701 = v41;
        v454 = v743;
        break;
      default:
        goto LABEL_581;
    }
LABEL_561:
    v723 = v454;
    v455 = v23;
    while (1)
    {
      LODWORD(_D5) = 1.0;
      if (!v51)
        goto LABEL_564;
      _H0 = *(_WORD *)(v40 + 6);
      __asm { FCVT            S5, H0 }
      if (*(float *)&_D5 > 0.0)
      {
LABEL_564:
        if (!v19)
        {
          _Q3.i16[0] = *(_WORD *)(v58 + 6);
          _S4 = 1.0;
LABEL_568:
          _Q0.n128_u16[0] = *(_WORD *)v58;
          _Q1.n128_u16[0] = *(_WORD *)(v58 + 2);
          a5.n128_u16[0] = *(_WORD *)(v58 + 4);
          *(_WORD *)v58 = PDAluminosityPDA(_Q0, _Q1, a5, *(double *)_Q3.i64, _S4, _D5, *(double *)_Q6.i64, *(double *)a10.i64, (uint64_t)a1, a2, (uint64_t)v26, a12, a13, a14, v43, v44, *(_DWORD *)v40, HIWORD(*(_DWORD *)v40), *(_DWORD *)(v40 + 4),
                            *(float *)&_D5);
          *(_WORD *)(v58 + 2) = _Q1.n128_u16[0];
          *(_WORD *)(v58 + 4) = a5.n128_u16[0];
          *(_WORD *)(v58 + 6) = _Q3.i16[0];
          goto LABEL_569;
        }
        _Q3.i16[0] = *(_WORD *)(v58 + 6);
        __asm { FCVT            S4, H3 }
        if (_S4 > 0.0)
          goto LABEL_568;
        *(_DWORD *)v58 = *(_DWORD *)v40;
        *(_WORD *)(v58 + 4) = *(_WORD *)(v40 + 4);
        __asm { FCVT            H0, S5 }
        *(_WORD *)(v58 + 6) = _H0;
      }
LABEL_569:
      v459 = v40 + 8 * v702;
      if (v459 >= v53)
        v460 = -(uint64_t)(int)v708;
      else
        v460 = 0;
      v40 = v459 + 8 * v460;
      v58 += 8 * v702;
      if (!--v455)
      {
        v58 += 8 * v729;
        v461 = v52 + 8 * v733;
        v462 = -(uint64_t)(v733 * (int)v704);
        if (v461 < v731)
          v462 = 0;
        v463 = v461 + 8 * v462;
        v464 = v53 + 8 * v462 + 8 * v733;
        if (v731)
        {
          v53 = v464;
          v52 = v463;
          v40 = v463;
        }
        else
        {
          v40 += 8 * v733;
        }
        v454 = v723 - 1;
        if (v723 == 1)
        {
LABEL_579:
          v743 = 0;
          v22 = a2;
          v42 = v700;
LABEL_580:
          v41 = v701;
LABEL_581:
          v40 = v706;
LABEL_582:
          v61 = v705;
          if (!v705)
            return 1;
LABEL_583:
          v742 = 0;
LABEL_584:
          a1 = (uint64_t *)shape_enum_clip_next(v61, (int *)&v742 + 1, &v742, &v739, &v743);
          if (!(_DWORD)a1)
          {
            v465 = (void *)v61;
            goto LABEL_914;
          }
          v705 = v61;
          v706 = v40;
          if (v731)
          {
            v58 = v42 + 8 * v41 * (int)v742 + 8 * SHIDWORD(v742);
            LODWORD(v23) = v739;
            v59 = v40 + 8 * v733 * (((int)v742 + *(_DWORD *)(v22 + 60)) % (int)v704);
            v52 = v59 + 8 * ((HIDWORD(v742) + *(_DWORD *)(v22 + 56)) % (int)v708);
            v53 = v59 + 8 * (int)v708;
            v40 = v52;
            LODWORD(v59) = v739;
            v698 = ((int)v742 + *(_DWORD *)(v22 + 60)) % (int)v704;
            v699 = (HIDWORD(v742) + *(_DWORD *)(v22 + 56)) % (int)v708;
          }
          else
          {
            LODWORD(v23) = v739;
            LODWORD(v59) = v739 * v702;
            v58 = v42 + 8 * v41 * (int)v742 + 8 * HIDWORD(v742) * v702;
            v40 += 8 * (int)v742 * (int)v708 + 8 * HIDWORD(v742) * v702;
            v733 = (int)(v708 - v739 * v702);
          }
          v59 = (int)v59;
          goto LABEL_51;
        }
        goto LABEL_561;
      }
    }
  }
  LODWORD(v742) = *(_DWORD *)(a2 + 8);
  HIDWORD(v742) = v23;
  v28 = *(_QWORD *)(a2 + 40);
  v29 = *(_QWORD *)(a2 + 88);
  _Q0.n128_u32[0] = *(_DWORD *)v29;
  v732 = _Q0;
  _Q0.n128_u16[0] = *(_WORD *)(v29 + 4);
  v730 = _Q0;
  _Q0.n128_u16[0] = *(_WORD *)(v29 + 6);
  v728 = _Q0;
  __asm { FCVT            S18, H0 }
  _Q0.n128_f32[0] = 1.0 - _S18;
  v709 = (int32x2_t)_Q0.n128_u64[0];
  v726 = _S18;
  v707 = *(int *)(a2 + 28);
  v35 = v707 >> 3;
  v36 = *(int *)(a2 + 12) + (v707 >> 3) * *(int *)(a2 + 16);
  v37 = v28 + 8 * v36;
  if (v26)
  {
    shape_enum_clip_alloc((uint64_t)a1, a2, v26, 1, 1, 1, *(_DWORD *)(a2 + 104), *(_DWORD *)(a2 + 108), v23, v25);
    v39 = v38;
    if (!v38)
      return 1;
    goto LABEL_911;
  }
  v54 = v23;
  v39 = 0;
  v55 = (float16x4_t *)(v28 + 8 * v36);
LABEL_657:
  v504 = v35 - v54;
  switch((int)v20)
  {
    case 0:
      v505 = v742;
      v506 = 8 * v54;
      goto LABEL_917;
    case 1:
      v507 = *(_QWORD *)(v22 + 88);
      if (v507)
      {
        CGSFillDRAM64(v55, v707 & 0xFFFFFFF8, 8 * v54, v742, v507, 8, 8, 1, 0, 0);
        if (!v39)
          return 1;
        goto LABEL_910;
      }
      v506 = 8 * v54;
      v505 = v742;
LABEL_917:
      CGBlt_fillBytes(v506, v505, 0, (char *)v55, v707 & 0xFFFFFFF8);
      if (v39)
        goto LABEL_910;
      return 1;
    case 2:
      v508 = v742;
      v739 = v732.n128_u32[0];
      v740 = v730.n128_u16[0];
      v741 = v728.n128_u16[0];
      if (use_vImage_fp16_compositing(void)::predicate != -1)
      {
        dispatch_once(&use_vImage_fp16_compositing(void)::predicate, &__block_literal_global_19551);
        _S18 = v726;
      }
      if (use_vImage_fp16_compositing(void)::status)
      {
        v743 = 66051;
        *(_QWORD *)&v747 = v55;
        *((_QWORD *)&v747 + 1) = v508;
        *(_QWORD *)&v748 = v54;
        *((_QWORD *)&v748 + 1) = v707 & 0xFFFFFFFFFFFFFFF8;
        v744 = &v739;
        v745 = vdupq_n_s64(1uLL);
        v746 = 8;
        v735 = v39;
        v736 = v508;
        v737 = v54;
        v738 = v54;
        vImageCGCompositeConstShape_ARGB16F();
        v22 = a2;
      }
      else
      {
        _H2 = v730.n128_u16[0];
        v693.i64[0] = vcvtq_f32_f16((float16x4_t)v732.n128_u64[0]).u64[0];
        v691 = (float32x4_t)vdupq_lane_s32(v709, 0);
        __asm { FCVT            S2, H2 }
        v693.i64[1] = __PAIR64__(LODWORD(_S18), _S2);
        v22 = a2;
        do
        {
          if (v54 >= 1)
          {
            v694 = v54 + 1;
            do
            {
              *v55 = vcvt_f16_f32(vmlaq_f32(v693, v691, vcvtq_f32_f16(*v55)));
              ++v55;
              --v694;
            }
            while (v694 > 1);
          }
          v55 += v504;
          _VF = __OFSUB__(v508--, 1);
        }
        while (!((v508 < 0) ^ _VF | (v508 == 0)));
      }
      goto LABEL_908;
    case 3:
      v509 = v742;
      v510.i32[0] = v732.n128_u32[0];
      v510.i16[2] = v730.n128_u16[0];
      v510.i16[3] = v728.n128_u16[0];
      v511 = vcvtq_f32_f16(v510);
      do
      {
        v512 = v54;
        do
        {
          _Q3.i16[0] = v55->i16[3];
          __asm { FCVT            S4, H3 }
          if (_S4 <= 0.0)
          {
            *v55 = 0;
          }
          else if (_S4 >= 1.0)
          {
            v55->i32[0] = v732.n128_u32[0];
            v55->i16[2] = v730.n128_u16[0];
            _Q3.i64[0] = v728.n128_u64[0];
            v55->i16[3] = v728.n128_u16[0];
          }
          else
          {
            *(float16x4_t *)_Q3.f32 = vcvt_f16_f32(vmulq_f32(v511, vcvtq_f32_f16((float16x4_t)vdup_lane_s16(*(int16x4_t *)_Q3.f32, 0))));
            *v55 = *(float16x4_t *)_Q3.f32;
          }
          ++v55;
          --v512;
        }
        while (v512);
        v55 += v504;
        --v509;
      }
      while (v509);
      goto LABEL_763;
    case 4:
      _H2 = v730.n128_u16[0];
      v517.i64[0] = vcvtq_f32_f16((float16x4_t)v732.n128_u64[0]).u64[0];
      __asm { FCVT            S2, H2 }
      v516 = v742;
      v517.i64[1] = __PAIR64__(LODWORD(_S18), _S2);
      do
      {
        v518 = v54;
        do
        {
          _H3 = v55->i16[3];
          __asm { FCVT            S3, H3 }
          v521 = 1.0 - _S3;
          if (v521 <= 0.0)
          {
            *v55 = 0;
          }
          else if (v521 >= 1.0)
          {
            v55->i32[0] = v732.n128_u32[0];
            v55->i16[2] = v730.n128_u16[0];
            v55->i16[3] = v728.n128_u16[0];
          }
          else
          {
            *v55 = vcvt_f16_f32(vmulq_n_f32(v517, v521));
          }
          ++v55;
          --v518;
        }
        while (v518);
        v55 += v504;
        --v516;
      }
      while (v516);
      goto LABEL_763;
    case 5:
      _H1 = v730.n128_u16[0];
      v525.i64[0] = vcvtq_f32_f16((float16x4_t)v732.n128_u64[0]).u64[0];
      __asm { FCVT            S1, H1 }
      v524 = v742;
      v525.i64[1] = __PAIR64__(LODWORD(_S18), _S1);
      do
      {
        v526 = v54;
        do
        {
          v527 = vcvtq_f32_f16(*v55);
          *v55++ = vcvt_f16_f32(vmlaq_laneq_f32(vmulq_n_f32(v527, *(float *)v709.i32), v525, v527, 3));
          --v526;
        }
        while (v526);
        v55 += v504;
        --v524;
      }
      while (v524);
      goto LABEL_763;
    case 6:
      _H3 = v730.n128_u16[0];
      _H1 = v732.n128_u16[0];
      __asm { FCVT            S0, H1 }
      _H1 = v732.n128_u16[1];
      __asm
      {
        FCVT            S2, H1
        FCVT            S3, H3
      }
      v534 = v742;
      while (1)
      {
        v535 = v54;
        do
        {
          _H5 = v55->i16[3];
          __asm { FCVT            S5, H5 }
          v538 = 1.0 - _S5;
          if ((float)(1.0 - _S5) >= 1.0)
          {
            v55->i32[0] = v732.n128_u32[0];
            _H5 = v728.n128_u16[0];
            v55->i16[2] = v730.n128_u16[0];
          }
          else
          {
            if (v538 <= 0.0)
              goto LABEL_698;
            _H7 = v55->i16[0];
            __asm { FCVT            S7, H7 }
            _S7 = _S7 + (float)(_S0 * v538);
            __asm { FCVT            H7, S7 }
            v55->i16[0] = LOWORD(_S7);
            LOWORD(_S7) = v55->i16[1];
            __asm { FCVT            S7, H7 }
            _S7 = _S7 + (float)(_S2 * v538);
            __asm { FCVT            H7, S7 }
            v55->i16[1] = LOWORD(_S7);
            LOWORD(_S7) = v55->i16[2];
            __asm { FCVT            S7, H7 }
            _S7 = _S7 + (float)(_S3 * v538);
            __asm { FCVT            H7, S7 }
            v55->i16[2] = LOWORD(_S7);
            _S5 = _S5 + (float)(_S18 * v538);
            __asm { FCVT            H5, S5 }
          }
          v55->i16[3] = _H5;
LABEL_698:
          ++v55;
          --v535;
        }
        while (v535);
        v55 += v504;
        if (!--v534)
        {
LABEL_763:
          LODWORD(v742) = 0;
          if (!v39)
            return 1;
LABEL_910:
          v734 = 0;
LABEL_911:
          a1 = (uint64_t *)shape_enum_clip_next(v39, (int *)&v734 + 1, &v734, (_DWORD *)&v742 + 1, &v742);
          if ((_DWORD)a1)
          {
            v55 = (float16x4_t *)(v37 + 8 * v35 * (int)v734 + 8 * SHIDWORD(v734));
            v54 = HIDWORD(v742);
            _S18 = v726;
            goto LABEL_657;
          }
          v465 = (void *)v39;
LABEL_914:
          free(v465);
          return 1;
        }
      }
    case 7:
      v548 = v742;
      v549 = vcvtq_f32_f16((float16x4_t)vdup_lane_s16((int16x4_t)v728.n128_u64[0], 0));
      do
      {
        v550 = v54;
        do
        {
          *v55 = vcvt_f16_f32(vmulq_f32(v549, vcvtq_f32_f16(*v55)));
          ++v55;
          --v550;
        }
        while (v550);
        v55 += v504;
        --v548;
      }
      while (v548);
      goto LABEL_763;
    case 8:
      v551 = v742;
      do
      {
        v552 = v54;
        do
        {
          *v55 = vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(*v55), *(float *)v709.i32));
          ++v55;
          --v552;
        }
        while (v552);
        v55 += v504;
        --v551;
      }
      while (v551);
      goto LABEL_763;
    case 9:
      _H1 = v730.n128_u16[0];
      v556.i64[0] = vcvtq_f32_f16((float16x4_t)v732.n128_u64[0]).u64[0];
      __asm { FCVT            S1, H1 }
      v555 = v742;
      v556.i64[1] = __PAIR64__(LODWORD(_S18), _S1);
      do
      {
        v557 = v54;
        do
        {
          v558 = vcvtq_f32_f16(*v55);
          *v55++ = vcvt_f16_f32(vmlaq_n_f32(vmulq_n_f32(v558, _S18), v556, 1.0 - v558.f32[3]));
          --v557;
        }
        while (v557);
        v55 += v504;
        --v555;
      }
      while (v555);
      goto LABEL_763;
    case 10:
      _H1 = v730.n128_u16[0];
      v562.i64[0] = vcvtq_f32_f16((float16x4_t)v732.n128_u64[0]).u64[0];
      __asm { FCVT            S1, H1 }
      v561 = v742;
      v562.i64[1] = __PAIR64__(LODWORD(_S18), _S1);
      do
      {
        v563 = v54;
        do
        {
          v564 = vcvtq_f32_f16(*v55);
          *v55++ = vcvt_f16_f32(vmlaq_n_f32(vmulq_n_f32(v564, *(float *)v709.i32), v562, 1.0 - v564.f32[3]));
          --v563;
        }
        while (v563);
        v55 += v504;
        --v561;
      }
      while (v561);
      goto LABEL_763;
    case 11:
      _H2 = v730.n128_u16[0];
      _H1 = v732.n128_u16[0];
      __asm { FCVT            S0, H1 }
      v568 = _S18 - _S0;
      _H1 = v732.n128_u16[1];
      __asm { FCVT            S1, H1 }
      v571 = _S18 - _S1;
      __asm { FCVT            S2, H2 }
      v573 = _S18 - _S2;
      v574 = v742;
      do
      {
        v575 = v54;
        do
        {
          _S4 = 1.0;
          _S5 = 1.0;
          if (v19)
          {
            _H3 = v55->i16[3];
            __asm { FCVT            S5, H3 }
          }
          _S3 = _S5 + _S18;
          if ((float)(_S5 + _S18) > 1.0)
            _S3 = 1.0;
          if (v19)
          {
            _H4 = v55->i16[3];
            __asm { FCVT            S4, H4 }
          }
          _H6 = v55->i16[0];
          __asm { FCVT            S6, H6 }
          v583 = v568 + (float)(_S5 - _S6);
          _H5 = v55->i16[1];
          _S6 = _S3 - v583;
          __asm { FCVT            H6, S6 }
          v55->i16[0] = LOWORD(_S6);
          if (v19)
          {
            _H6 = v55->i16[3];
            __asm { FCVT            S6, H6 }
          }
          else
          {
            _S6 = 1.0;
          }
          __asm { FCVT            S5, H5 }
          v589 = v571 + (float)(_S4 - _S5);
          LOWORD(_S5) = v55->i16[2];
          __asm { FCVT            S5, H5 }
          _S4 = _S3 - v589;
          __asm { FCVT            H4, S4 }
          v55->i16[1] = LOWORD(_S4);
          __asm { FCVT            H4, S3 }
          v55->i16[3] = LOWORD(_S4);
          _S3 = _S3 - (float)(v573 + (float)(_S6 - _S5));
          __asm { FCVT            H3, S3 }
          v55->i16[2] = LOWORD(_S3);
          ++v55;
          --v575;
        }
        while (v575);
        v55 += v504;
        --v574;
      }
      while (v574);
      goto LABEL_763;
    case 12:
      v593 = v742;
      _H3 = v730.n128_u16[0];
      _KR00_4 = v732.n128_u32[0];
      __asm
      {
        FCVT            S0, H0
        FCVT            S1, H1
        FCVT            S3, H3
      }
      do
      {
        v599 = v54;
        do
        {
          _H4 = v55->i16[0];
          _H5 = v55->i16[1];
          __asm { FCVT            S4, H4 }
          _S4 = _S0 + _S4;
          __asm { FCVT            H4, S4 }
          v55->i16[0] = LOWORD(_S4);
          __asm { FCVT            S4, H5 }
          _S4 = _S1 + _S4;
          __asm { FCVT            H4, S4 }
          v55->i16[1] = LOWORD(_S4);
          LOWORD(_S4) = v55->i16[3];
          __asm { FCVT            S4, H4 }
          _S4 = _S18 + _S4;
          _H5 = v55->i16[2];
          if (_S4 > 1.0)
            _S4 = 1.0;
          __asm { FCVT            S5, H5 }
          _S5 = _S3 + _S5;
          __asm { FCVT            H5, S5 }
          v55->i16[2] = LOWORD(_S5);
          __asm { FCVT            H4, S4 }
          v55->i16[3] = _H4;
          ++v55;
          --v599;
        }
        while (v599);
        v55 += v504;
        --v593;
      }
      while (v593);
      goto LABEL_763;
    case 13:
      if (_S18 <= 0.0)
        goto LABEL_909;
      v612 = v732;
      v613 = v742;
      while (1)
      {
        v614 = v54;
        do
        {
          if (v19)
          {
            _Q3.i16[0] = v55->i16[3];
            __asm { FCVT            S4, H3 }
            if (_S4 <= 0.0)
            {
              v55->i32[0] = v732.n128_u32[0];
              v55->i16[2] = v730.n128_u16[0];
              v612 = v728;
              v55->i16[3] = v728.n128_u16[0];
              goto LABEL_750;
            }
          }
          else
          {
            _Q3.i16[0] = v55->i16[3];
            _S4 = 1.0;
          }
          v612.n128_u16[0] = v55->i16[0];
          _Q1.n128_u16[0] = v55->u16[1];
          a5.n128_u16[0] = v55->u16[2];
          v612.n128_u16[0] = PDAmultiplyPDA(v612, _Q1, a5, *(double *)_Q3.i64, _S4, v732.n128_f64[0], *(double *)_Q6.i64, *(double *)a10.i64, (uint64_t)a1, a2, (uint64_t)v26, a12, a13, a14, a15, a16, v732.n128_i16[0], v732.n128_i16[1], v730.n128_i16[0],
                               _S18);
          _S18 = v726;
          v55->i16[0] = v612.n128_u16[0];
          v55->i16[1] = _Q1.n128_u16[0];
          v55->i16[2] = a5.n128_u16[0];
          v55->i16[3] = _Q3.i16[0];
LABEL_750:
          ++v55;
          --v614;
        }
        while (v614);
        v55 += v504;
        if (!--v613)
          goto LABEL_907;
      }
    case 14:
      if (_S18 <= 0.0)
        goto LABEL_909;
      _H3 = v730.n128_u16[0];
      _H1 = v732.n128_u16[0];
      __asm { FCVT            S0, H1 }
      _H1 = v732.n128_u16[1];
      __asm
      {
        FCVT            S2, H1
        FCVT            S3, H3
      }
      v622 = v742;
      while (1)
      {
        v623 = v54;
        do
        {
          if (v19)
          {
            _H5 = v55->i16[3];
            __asm { FCVT            S5, H5 }
            if (_S5 <= 0.0)
            {
              v55->i32[0] = v732.n128_u32[0];
              v55->i16[2] = v730.n128_u16[0];
              v55->i16[3] = v728.n128_u16[0];
              goto LABEL_761;
            }
          }
          else
          {
            _S5 = 1.0;
          }
          _H6 = v55->i16[0];
          _H7 = v55->i16[1];
          _H16 = v55->i16[2];
          __asm
          {
            FCVT            S6, H6
            FCVT            S7, H7
            FCVT            S16, H16
          }
          _S6 = _S6 + (float)(_S0 * (float)(1.0 - _S6));
          _S7 = _S7 + (float)(_S2 * (float)(1.0 - _S7));
          _S16 = _S16 + (float)(_S3 * (float)(1.0 - _S16));
          _S5 = (float)(_S5 + _S18) - (float)(_S5 * _S18);
          __asm
          {
            FCVT            H6, S6
            FCVT            H7, S7
            FCVT            H16, S16
          }
          v55->i16[0] = LOWORD(_S6);
          v55->i16[1] = LOWORD(_S7);
          __asm { FCVT            H5, S5 }
          v55->i16[2] = LOWORD(_S16);
          v55->i16[3] = LOWORD(_S5);
LABEL_761:
          ++v55;
          --v623;
        }
        while (v623);
        v55 += v504;
        if (!--v622)
          goto LABEL_763;
      }
    case 15:
      if (_S18 <= 0.0)
        goto LABEL_909;
      v636 = v732;
      v637 = v742;
      while (1)
      {
        v638 = v54;
        do
        {
          if (v19)
          {
            _Q3.i16[0] = v55->i16[3];
            __asm { FCVT            S4, H3 }
            if (_S4 <= 0.0)
            {
              v55->i32[0] = v732.n128_u32[0];
              v55->i16[2] = v730.n128_u16[0];
              v636 = v728;
              v55->i16[3] = v728.n128_u16[0];
              goto LABEL_773;
            }
          }
          else
          {
            _Q3.i16[0] = v55->i16[3];
            _S4 = 1.0;
          }
          v636.n128_u16[0] = v55->i16[0];
          _Q1.n128_u16[0] = v55->u16[1];
          a5.n128_u16[0] = v55->u16[2];
          v636.n128_u16[0] = PDAoverlayPDA(v636, _Q1, a5, *(double *)_Q3.i64, _S4, v732.n128_f64[0], *(double *)_Q6.i64, *(double *)a10.i64, (uint64_t)a1, a2, (uint64_t)v26, a12, a13, a14, a15, a16, v732.n128_i16[0], v732.n128_i16[1], v730.n128_i16[0],
                               _S18);
          _S18 = v726;
          v55->i16[0] = v636.n128_u16[0];
          v55->i16[1] = _Q1.n128_u16[0];
          v55->i16[2] = a5.n128_u16[0];
          v55->i16[3] = _Q3.i16[0];
LABEL_773:
          ++v55;
          --v638;
        }
        while (v638);
        v55 += v504;
        if (!--v637)
          goto LABEL_907;
      }
    case 16:
      if (_S18 <= 0.0)
        goto LABEL_909;
      v640 = v732;
      v641 = v742;
      while (1)
      {
        v642 = v54;
        do
        {
          if (v19)
          {
            _Q3.i16[0] = v55->i16[3];
            __asm { FCVT            S4, H3 }
            if (_S4 <= 0.0)
            {
              v55->i32[0] = v732.n128_u32[0];
              v55->i16[2] = v730.n128_u16[0];
              v640 = v728;
              v55->i16[3] = v728.n128_u16[0];
              goto LABEL_784;
            }
          }
          else
          {
            _Q3.i16[0] = v55->i16[3];
            _S4 = 1.0;
          }
          v640.n128_u16[0] = v55->i16[0];
          _Q1.n128_u16[0] = v55->u16[1];
          a5.n128_u16[0] = v55->u16[2];
          v640.n128_u16[0] = PDAdarkenPDA(v640, _Q1, a5, *(double *)_Q3.i64, _S4, v732.n128_f64[0], *(double *)_Q6.i64, *(double *)a10.i64, (uint64_t)a1, a2, (uint64_t)v26, a12, a13, a14, a15, a16, v732.n128_i16[0], v732.n128_i16[1], v730.n128_i16[0],
                               _S18);
          _S18 = v726;
          v55->i16[0] = v640.n128_u16[0];
          v55->i16[1] = _Q1.n128_u16[0];
          v55->i16[2] = a5.n128_u16[0];
          v55->i16[3] = _Q3.i16[0];
LABEL_784:
          ++v55;
          --v642;
        }
        while (v642);
        v55 += v504;
        if (!--v641)
          goto LABEL_907;
      }
    case 17:
      if (_S18 <= 0.0)
        goto LABEL_909;
      v644 = v732;
      v645 = v742;
      while (1)
      {
        v646 = v54;
        do
        {
          if (v19)
          {
            _Q3.i16[0] = v55->i16[3];
            __asm { FCVT            S4, H3 }
            if (_S4 <= 0.0)
            {
              v55->i32[0] = v732.n128_u32[0];
              v55->i16[2] = v730.n128_u16[0];
              v644 = v728;
              v55->i16[3] = v728.n128_u16[0];
              goto LABEL_795;
            }
          }
          else
          {
            _Q3.i16[0] = v55->i16[3];
            _S4 = 1.0;
          }
          v644.n128_u16[0] = v55->i16[0];
          _Q1.n128_u16[0] = v55->u16[1];
          a5.n128_u16[0] = v55->u16[2];
          v644.n128_u16[0] = PDAlightenPDA(v644, _Q1, a5, *(double *)_Q3.i64, _S4, v732.n128_f64[0], *(double *)_Q6.i64, *(double *)a10.i64, (uint64_t)a1, a2, (uint64_t)v26, a12, a13, a14, a15, a16, v732.n128_i16[0], v732.n128_i16[1], v730.n128_i16[0],
                               _S18);
          _S18 = v726;
          v55->i16[0] = v644.n128_u16[0];
          v55->i16[1] = _Q1.n128_u16[0];
          v55->i16[2] = a5.n128_u16[0];
          v55->i16[3] = _Q3.i16[0];
LABEL_795:
          ++v55;
          --v646;
        }
        while (v646);
        v55 += v504;
        if (!--v645)
          goto LABEL_907;
      }
    case 18:
      if (_S18 <= 0.0)
        goto LABEL_909;
      v648 = v732;
      v649 = v742;
      while (1)
      {
        v650 = v54;
        do
        {
          if (v19)
          {
            _Q3.i16[0] = v55->i16[3];
            __asm { FCVT            S4, H3 }
            if (_S4 <= 0.0)
            {
              v55->i32[0] = v732.n128_u32[0];
              v55->i16[2] = v730.n128_u16[0];
              v648 = v728;
              v55->i16[3] = v728.n128_u16[0];
              goto LABEL_806;
            }
          }
          else
          {
            _Q3.i16[0] = v55->i16[3];
            _S4 = 1.0;
          }
          v648.n128_u16[0] = v55->i16[0];
          _Q1.n128_u16[0] = v55->u16[1];
          a5.n128_u16[0] = v55->u16[2];
          v648.n128_u16[0] = PDAcolordodgePDA(v648, _Q1, a5, *(double *)_Q3.i64, _S4, v732.n128_f64[0], *(double *)_Q6.i64, *(double *)a10.i64, (uint64_t)a1, a2, (uint64_t)v26, a12, a13, a14, a15, a16, v732.n128_i16[0], v732.n128_i16[1], v730.n128_i16[0],
                               _S18);
          _S18 = v726;
          v55->i16[0] = v648.n128_u16[0];
          v55->i16[1] = _Q1.n128_u16[0];
          v55->i16[2] = a5.n128_u16[0];
          v55->i16[3] = _Q3.i16[0];
LABEL_806:
          ++v55;
          --v650;
        }
        while (v650);
        v55 += v504;
        if (!--v649)
          goto LABEL_907;
      }
    case 19:
      if (_S18 <= 0.0)
        goto LABEL_909;
      v652 = v732;
      v653 = v742;
      while (1)
      {
        v654 = v54;
        do
        {
          if (v19)
          {
            _Q3.i16[0] = v55->i16[3];
            __asm { FCVT            S4, H3 }
            if (_S4 <= 0.0)
            {
              v55->i32[0] = v732.n128_u32[0];
              v55->i16[2] = v730.n128_u16[0];
              v652 = v728;
              v55->i16[3] = v728.n128_u16[0];
              goto LABEL_817;
            }
          }
          else
          {
            _Q3.i16[0] = v55->i16[3];
            _S4 = 1.0;
          }
          v652.n128_u16[0] = v55->i16[0];
          _Q1.n128_u16[0] = v55->u16[1];
          a5.n128_u16[0] = v55->u16[2];
          v652.n128_u16[0] = PDAcolorburnPDA(v652, _Q1, a5, *(double *)_Q3.i64, _S4, v732.n128_f64[0], *(double *)_Q6.i64, *(double *)a10.i64, (uint64_t)a1, a2, (uint64_t)v26, a12, a13, a14, a15, a16, v732.n128_i16[0], v732.n128_i16[1], v730.n128_i16[0],
                               _S18);
          _S18 = v726;
          v55->i16[0] = v652.n128_u16[0];
          v55->i16[1] = _Q1.n128_u16[0];
          v55->i16[2] = a5.n128_u16[0];
          v55->i16[3] = _Q3.i16[0];
LABEL_817:
          ++v55;
          --v654;
        }
        while (v654);
        v55 += v504;
        if (!--v653)
          goto LABEL_907;
      }
    case 20:
      if (_S18 <= 0.0)
        goto LABEL_909;
      v656 = v732;
      v657 = v742;
      while (1)
      {
        v658 = v54;
        do
        {
          if (v19)
          {
            _Q3.i16[0] = v55->i16[3];
            __asm { FCVT            S4, H3 }
            if (_S4 <= 0.0)
            {
              v55->i32[0] = v732.n128_u32[0];
              v55->i16[2] = v730.n128_u16[0];
              v656 = v728;
              v55->i16[3] = v728.n128_u16[0];
              goto LABEL_828;
            }
          }
          else
          {
            _Q3.i16[0] = v55->i16[3];
            _S4 = 1.0;
          }
          v656.n128_u16[0] = v55->i16[0];
          _Q1.n128_u16[0] = v55->u16[1];
          a5.n128_u16[0] = v55->u16[2];
          v656.n128_u16[0] = PDAsoftlightPDA(v656, _Q1, a5, *(double *)_Q3.i64, _S4, v732.n128_f64[0], *(double *)_Q6.i64, *(double *)a10.i64, (uint64_t)a1, a2, (uint64_t)v26, a12, a13, a14, a15, a16, v732.n128_i16[0], v732.n128_i16[1], v730.n128_i16[0],
                               _S18);
          _S18 = v726;
          v55->i16[0] = v656.n128_u16[0];
          v55->i16[1] = _Q1.n128_u16[0];
          v55->i16[2] = a5.n128_u16[0];
          v55->i16[3] = _Q3.i16[0];
LABEL_828:
          ++v55;
          --v658;
        }
        while (v658);
        v55 += v504;
        if (!--v657)
          goto LABEL_907;
      }
    case 21:
      if (_S18 <= 0.0)
        goto LABEL_909;
      v660 = v732;
      v661 = v742;
      while (1)
      {
        v662 = v54;
        do
        {
          if (v19)
          {
            _Q3.i16[0] = v55->i16[3];
            __asm { FCVT            S4, H3 }
            if (_S4 <= 0.0)
            {
              v55->i32[0] = v732.n128_u32[0];
              v55->i16[2] = v730.n128_u16[0];
              v660 = v728;
              v55->i16[3] = v728.n128_u16[0];
              goto LABEL_839;
            }
          }
          else
          {
            _Q3.i16[0] = v55->i16[3];
            _S4 = 1.0;
          }
          v660.n128_u16[0] = v55->i16[0];
          _Q1.n128_u16[0] = v55->u16[1];
          a5.n128_u16[0] = v55->u16[2];
          v660.n128_u16[0] = PDAhardlightPDA(v660, _Q1, a5, *(double *)_Q3.i64, _S4, v732.n128_f64[0], *(double *)_Q6.i64, *(double *)a10.i64, (uint64_t)a1, a2, (uint64_t)v26, a12, a13, a14, a15, a16, v732.n128_i16[0], v732.n128_i16[1], v730.n128_i16[0],
                               _S18);
          _S18 = v726;
          v55->i16[0] = v660.n128_u16[0];
          v55->i16[1] = _Q1.n128_u16[0];
          v55->i16[2] = a5.n128_u16[0];
          v55->i16[3] = _Q3.i16[0];
LABEL_839:
          ++v55;
          --v662;
        }
        while (v662);
        v55 += v504;
        if (!--v661)
          goto LABEL_907;
      }
    case 22:
      if (_S18 <= 0.0)
        goto LABEL_909;
      v664 = v732;
      v665 = v742;
      while (1)
      {
        v666 = v54;
        do
        {
          if (v19)
          {
            _Q3.i16[0] = v55->i16[3];
            __asm { FCVT            S4, H3 }
            if (_S4 <= 0.0)
            {
              v55->i32[0] = v732.n128_u32[0];
              v55->i16[2] = v730.n128_u16[0];
              v664 = v728;
              v55->i16[3] = v728.n128_u16[0];
              goto LABEL_850;
            }
          }
          else
          {
            _Q3.i16[0] = v55->i16[3];
            _S4 = 1.0;
          }
          v664.n128_u16[0] = v55->i16[0];
          _Q1.n128_u16[0] = v55->u16[1];
          a5.n128_u16[0] = v55->u16[2];
          HIWORD(v695) = v728.n128_u16[0];
          LOWORD(v695) = v730.n128_u16[0];
          v664.n128_u16[0] = PDAdifferencePDA(v664, _Q1.n128_f64[0], a5.n128_f64[0], *(double *)_Q3.i64, _S4, v732.n128_f64[0], *(double *)_Q6.i64, *(double *)a10.i64, (uint64_t)a1, a2, (uint64_t)v26, a12, a13, a14, a15, a16, v732.n128_i16[0], v695, _S18);
          _S18 = v726;
          v55->i16[0] = v664.n128_u16[0];
          v55->i16[1] = _Q1.n128_u16[0];
          v55->i16[2] = a5.n128_u16[0];
          v55->i16[3] = _Q3.i16[0];
LABEL_850:
          ++v55;
          --v666;
        }
        while (v666);
        v55 += v504;
        if (!--v665)
          goto LABEL_907;
      }
    case 23:
      if (_S18 <= 0.0)
        goto LABEL_909;
      v668 = v732;
      v669 = v742;
      while (1)
      {
        v670 = v54;
        do
        {
          if (v19)
          {
            _Q3.i16[0] = v55->i16[3];
            __asm { FCVT            S4, H3 }
            if (_S4 <= 0.0)
            {
              v55->i32[0] = v732.n128_u32[0];
              v55->i16[2] = v730.n128_u16[0];
              v668 = v728;
              v55->i16[3] = v728.n128_u16[0];
              goto LABEL_861;
            }
          }
          else
          {
            _Q3.i16[0] = v55->i16[3];
            _S4 = 1.0;
          }
          v668.n128_u16[0] = v55->i16[0];
          _Q1.n128_u16[0] = v55->u16[1];
          a5.n128_u16[0] = v55->u16[2];
          v668.n128_u16[0] = PDAexclusionPDA(v668, _Q1, a5, *(double *)_Q3.i64, _S4, v732.n128_f64[0], *(double *)_Q6.i64, *(double *)a10.i64, (uint64_t)a1, a2, (uint64_t)v26, a12, a13, a14, a15, a16, v732.n128_i16[0], v732.n128_i16[1], v730.n128_i16[0],
                               _S18);
          _S18 = v726;
          v55->i16[0] = v668.n128_u16[0];
          v55->i16[1] = _Q1.n128_u16[0];
          v55->i16[2] = a5.n128_u16[0];
          v55->i16[3] = _Q3.i16[0];
LABEL_861:
          ++v55;
          --v670;
        }
        while (v670);
        v55 += v504;
        if (!--v669)
          goto LABEL_907;
      }
    case 24:
      if (_S18 <= 0.0)
        goto LABEL_909;
      v672 = v732;
      v673 = v742;
      while (1)
      {
        v674 = v54;
        do
        {
          if (v19)
          {
            _Q3.i16[0] = v55->i16[3];
            __asm { FCVT            S4, H3 }
            if (_S4 <= 0.0)
            {
              v55->i32[0] = v732.n128_u32[0];
              v55->i16[2] = v730.n128_u16[0];
              v672 = v728;
              v55->i16[3] = v728.n128_u16[0];
              goto LABEL_872;
            }
          }
          else
          {
            _Q3.i16[0] = v55->i16[3];
            _S4 = 1.0;
          }
          v672.n128_u16[0] = v55->i16[0];
          _Q1.n128_u16[0] = v55->u16[1];
          a5.n128_u16[0] = v55->u16[2];
          v672.n128_u16[0] = PDAhuePDA(v672, _Q1, a5, *(double *)_Q3.i64, _S4, v732.n128_f64[0], *(double *)_Q6.i64, *(double *)a10.i64, (uint64_t)a1, a2, (uint64_t)v26, a12, a13, a14, a15, a16, v732.n128_i16[0], v732.n128_i16[1], v730.n128_i16[0],
                               _S18);
          _S18 = v726;
          v55->i16[0] = v672.n128_u16[0];
          v55->i16[1] = _Q1.n128_u16[0];
          v55->i16[2] = a5.n128_u16[0];
          v55->i16[3] = _Q3.i16[0];
LABEL_872:
          ++v55;
          --v674;
        }
        while (v674);
        v55 += v504;
        if (!--v673)
          goto LABEL_907;
      }
    case 25:
      if (_S18 <= 0.0)
        goto LABEL_909;
      v676 = v732;
      v677 = v742;
      while (1)
      {
        v678 = v54;
        do
        {
          if (v19)
          {
            _Q3.i16[0] = v55->i16[3];
            __asm { FCVT            S4, H3 }
            if (_S4 <= 0.0)
            {
              v55->i32[0] = v732.n128_u32[0];
              v55->i16[2] = v730.n128_u16[0];
              v676 = v728;
              v55->i16[3] = v728.n128_u16[0];
              goto LABEL_883;
            }
          }
          else
          {
            _Q3.i16[0] = v55->i16[3];
            _S4 = 1.0;
          }
          v676.n128_u16[0] = v55->i16[0];
          _Q1.n128_u16[0] = v55->u16[1];
          a5.n128_u16[0] = v55->u16[2];
          v676.n128_u16[0] = PDAsaturationPDA(v676, _Q1, a5, *(double *)_Q3.i64, _S4, v732.n128_f64[0], *(double *)_Q6.i64, *(double *)a10.i64, (uint64_t)a1, a2, (uint64_t)v26, a12, a13, a14, a15, a16, v732.n128_i16[0], v732.n128_i16[1], v730.n128_i16[0],
                               _S18);
          _S18 = v726;
          v55->i16[0] = v676.n128_u16[0];
          v55->i16[1] = _Q1.n128_u16[0];
          v55->i16[2] = a5.n128_u16[0];
          v55->i16[3] = _Q3.i16[0];
LABEL_883:
          ++v55;
          --v678;
        }
        while (v678);
        v55 += v504;
        if (!--v677)
          goto LABEL_907;
      }
    case 26:
      if (_S18 <= 0.0)
        goto LABEL_909;
      LOWORD(v16) = v732.n128_u16[1];
      v680 = v742;
      do
      {
        v681 = v54;
        do
        {
          if (v19)
          {
            _H0 = v55->i16[3];
            __asm { FCVT            S1, H0 }
            if (_Q1.n128_f32[0] <= 0.0)
            {
              v55->i32[0] = v732.n128_u32[0];
              v55->i16[2] = v730.n128_u16[0];
              v55->i16[3] = v728.n128_u16[0];
              goto LABEL_894;
            }
          }
          else
          {
            _Q1.n128_u32[0] = 1.0;
          }
          v696 = _Q1.n128_f32[0];
          _Q1.n128_u32[0] = v16;
          v683 = PDAluminosityPDA(v732, _Q1, v730, v728.n128_f64[0], _S18, _D5, *(double *)_Q6.i64, *(double *)a10.i64, (uint64_t)a1, a2, (uint64_t)v26, a12, a13, a14, a15, a16, v55->i16[0], *(__int32 *)((char *)v55->i32 + 2), HIWORD(*(unsigned __int32 *)((char *)v55->i32 + 2)),
                   v696);
          _S18 = v726;
          v55->i16[0] = v683;
          v55->i16[1] = _Q1.n128_u16[0];
          v55->i16[2] = v684;
          v55->i16[3] = v685;
LABEL_894:
          ++v55;
          --v681;
        }
        while (v681);
        v55 += v504;
        --v680;
      }
      while (v680);
LABEL_907:
      LODWORD(v742) = 0;
LABEL_908:
      LODWORD(v20) = v703;
LABEL_909:
      if (v39)
        goto LABEL_910;
      return 1;
    case 27:
      if (_S18 <= 0.0)
        goto LABEL_909;
      v686 = v732;
      v687 = v742;
      break;
    default:
      goto LABEL_909;
  }
LABEL_899:
  v688 = v54;
  while (v19)
  {
    _Q3.i16[0] = v55->i16[3];
    __asm { FCVT            S4, H3 }
    if (_S4 > 0.0)
      goto LABEL_904;
    v55->i32[0] = v732.n128_u32[0];
    v55->i16[2] = v730.n128_u16[0];
    v686 = v728;
    v55->i16[3] = v728.n128_u16[0];
LABEL_905:
    ++v55;
    if (!--v688)
    {
      v55 += v504;
      if (!--v687)
        goto LABEL_907;
      goto LABEL_899;
    }
  }
  _Q3.i16[0] = v55->i16[3];
  _S4 = 1.0;
LABEL_904:
  v686.n128_u16[0] = v55->i16[0];
  _Q1.n128_u16[0] = v55->u16[1];
  a5.n128_u16[0] = v55->u16[2];
  v686.n128_u16[0] = PDAluminosityPDA(v686, _Q1, a5, *(double *)_Q3.i64, _S4, v732.n128_f64[0], *(double *)_Q6.i64, *(double *)a10.i64, (uint64_t)a1, a2, (uint64_t)v26, a12, a13, a14, a15, a16, v732.n128_i16[0], v732.n128_i16[1], v730.n128_i16[0],
                       _S18);
  _S18 = v726;
  v55->i16[0] = v686.n128_u16[0];
  v55->i16[1] = _Q1.n128_u16[0];
  v55->i16[2] = a5.n128_u16[0];
  v55->i16[3] = _Q3.i16[0];
  goto LABEL_905;
}

void RGBAf16_mark_constmask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, __n128 _Q1, __n128 _Q2, double _D3, double a9, double _D5, double _D6, double _D7, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  int v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  float16x4_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  float32x4_t v39;
  float32x4_t v40;
  int v41;
  unsigned int v42;
  const __int16 *v43;
  float16x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v48;
  int v49;
  unsigned int v50;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v56;
  int v57;
  float32x4_t v58;
  float32x4_t v59;
  int v64;
  unsigned int v65;
  float v68;
  float v69;
  float v86;
  float32x4_t v91;
  int v92;
  unsigned int v93;
  float32x4_t v94;
  int v95;
  unsigned int v96;
  float v100;
  float32x4_t v111;
  int v112;
  float v113;
  float v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v118;
  int v119;
  float32x4_t v120;
  float32x4_t v121;
  int v126;
  float v127;
  float v141;
  float v148;
  float v150;
  float v153;
  int v160;
  float v161;
  int v185;
  float v186;
  __n128 v188;
  double v189;
  __int16 v192;
  int v197;
  float v198;
  int v225;
  float v226;
  __n128 v228;
  double v229;
  __int16 v232;
  int v235;
  float v236;
  __n128 v238;
  double v239;
  __int16 v242;
  int v245;
  float v246;
  __n128 v248;
  double v249;
  __int16 v252;
  int v255;
  float v256;
  __n128 v258;
  double v259;
  __int16 v262;
  int v265;
  float v266;
  __n128 v268;
  double v269;
  __int16 v272;
  int v275;
  float v276;
  __n128 v278;
  double v279;
  __int16 v282;
  int v285;
  float v286;
  __n128 v288;
  double v289;
  __int16 v292;
  int v295;
  float v296;
  float32x4_t v298;
  double v299;
  __int16 v302;
  int v305;
  float v306;
  __n128 v308;
  double v309;
  __int16 v312;
  int v315;
  float v316;
  __n128 v318;
  double v319;
  __int16 v322;
  int v325;
  float v326;
  __n128 v328;
  double v329;
  __int16 v332;
  int v334;
  float v335;
  __n128 v338;
  __int16 v339;
  int v342;
  float v343;
  __n128 v345;
  double v346;
  __int16 v349;
  int v350;
  unsigned int v351;
  unint64_t v352;
  unsigned int v353;
  unsigned int v354;
  unsigned int v355;
  uint64_t v356;
  unint64_t v357;
  float32x4_t v359;
  unsigned int v360;
  int v361;
  unsigned int v362;
  unsigned int v363;
  int v364;
  int v365;
  unsigned int v366;
  unint64_t v367;
  unsigned int v368;
  unsigned int v369;
  unsigned int v370;
  uint64_t v371;
  unint64_t v372;
  unint64_t v373;
  float32x4_t v375;
  float32x4_t v376;
  unsigned int v377;
  int v378;
  unsigned int v379;
  float32x4_t v389;
  float32x4_t v390;
  float32x4_t v391;
  unsigned int v392;
  float v393;
  int v411;
  int v412;
  __int16 v413;
  float16x4_t v414;
  float16x4_t v415;
  __int16 v416;
  __int16 v417;
  __n128 v418;
  __n128 v419;
  __n128 v420;
  __n128 v421;
  __n128 v422;
  __n128 v423;
  __n128 v424;
  __n128 v425;
  __n128 v426;
  __n128 v427;
  __n128 v428;
  __n128 v429;
  float32x4_t v430;
  __n128 v431;
  float v432;

  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 136);
  v20 = v18 != 0;
  if (v19)
  {
    v22 = *(_DWORD *)(a1 + 4);
    v21 = *(_DWORD *)(a1 + 8);
    v23 = *(int *)(a1 + 28);
    v24 = *(_QWORD *)(a1 + 88);
    _D16.i32[0] = *(_DWORD *)v24;
    _H7 = *(_WORD *)(v24 + 4);
    _D17.i16[0] = *(_WORD *)(v24 + 6);
    __asm { FCVT            S22, H17 }
    v31 = (float16x4_t *)(*(_QWORD *)(a1 + 40) + 8 * (*(int *)(a1 + 12) + (v23 >> 3) * *(int *)(a1 + 16)));
    v32 = *(int *)(a1 + 124);
    v33 = v19 + *(int *)(a1 + 104) + *(int *)(a1 + 108) * (uint64_t)(int)v32;
    v34 = v32 - v22;
    v35 = (v23 >> 3) - v22;
    v432 = _S22;
    switch((int)a2)
    {
      case 0:
        do
        {
          v36 = v22;
          do
          {
            v37 = *(unsigned __int8 *)v33;
            if (*(_BYTE *)v33)
            {
              if (v37 == 255)
                *v31 = 0;
              else
                *v31 = vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(*v31), (float)(v37 ^ 0xFFu) * 0.0039216));
            }
            ++v33;
            ++v31;
            --v36;
          }
          while (v36);
          v33 += v34;
          v31 += v35;
          --v21;
        }
        while (v21);
        return;
      case 1:
        if (use_vImage_fp16_compositing(void)::predicate != -1)
        {
          v414 = _D16;
          v416 = *(_WORD *)(v24 + 4);
          v413 = *(_WORD *)(v24 + 6);
          dispatch_once(&use_vImage_fp16_compositing(void)::predicate, &__block_literal_global_19551);
          _D17.i16[0] = v413;
          _D16 = v414;
          _H7 = v416;
          _S22 = v432;
        }
        if (use_vImage_fp16_compositing(void)::status)
          goto LABEL_18;
        v350 = -1;
        v351 = v33 & 3;
        if ((v33 & 3) != 0)
        {
          v22 += v351;
          v350 = -1 << (8 * v351);
          v352 = v33 & 3;
          v33 &= 0xFFFFFFFFFFFFFFFCLL;
          v31 -= v352;
        }
        v353 = ((_BYTE)v22 + (_BYTE)v33) & 3;
        if ((((_BYTE)v22 + (_BYTE)v33) & 3) != 0)
        {
          v354 = 4 - v353;
          v351 += v354;
          v355 = 0xFFFFFFFF >> (8 * v354);
          if (v22 >= 4)
            v353 = 0xFFFFFFFF >> (8 * v354);
          else
            v353 = 0;
          if (v22 >= 4)
            v355 = -1;
          v350 &= v355;
        }
        v356 = v34 - v351;
        v357 = v35 - v351;
        v359.i64[0] = vcvtq_f32_f16(_D16).u64[0];
        __asm { FCVT            S2, H7 }
        v359.i64[1] = __PAIR64__(LODWORD(_S22), _S2);
        do
        {
          v360 = *(_DWORD *)v33 & v350;
          v361 = v22 >> 2;
          v362 = v353;
          if (!v360)
            goto LABEL_325;
LABEL_307:
          if (v360 == -1)
          {
            v31->i32[0] = _D16.i32[0];
            v31->i16[2] = _H7;
            v31->i16[3] = _D17.i16[0];
            v31[1].i32[0] = _D16.i32[0];
            v31[1].i16[2] = _H7;
            v31[1].i16[3] = _D17.i16[0];
            v31[2].i32[0] = _D16.i32[0];
            v31[2].i16[2] = _H7;
            v31[2].i16[3] = _D17.i16[0];
LABEL_322:
            v31[3].i32[0] = _D16.i32[0];
            v31[3].i16[2] = _H7;
            v31[3].i16[3] = _D17.i16[0];
            goto LABEL_325;
          }
          while (1)
          {
            if ((_BYTE)v360)
            {
              if (v360 == 255)
              {
                v31->i32[0] = _D16.i32[0];
                v31->i16[2] = _H7;
                v31->i16[3] = _D17.i16[0];
              }
              else
              {
                *v31 = vcvt_f16_f32(vmlaq_n_f32(vcvtq_f32_f16(vcvt_f16_f32(vmulq_n_f32(v359, (float)v360 * 0.0039216))), vcvtq_f32_f16(*v31), 1.0 - (float)((float)v360 * 0.0039216)));
              }
            }
            if (BYTE1(v360))
            {
              if (BYTE1(v360) == 255)
              {
                v31[1].i32[0] = _D16.i32[0];
                v31[1].i16[2] = _H7;
                v31[1].i16[3] = _D17.i16[0];
              }
              else
              {
                v31[1] = vcvt_f16_f32(vmlaq_n_f32(vcvtq_f32_f16(vcvt_f16_f32(vmulq_n_f32(v359, (float)BYTE1(v360) * 0.0039216))), vcvtq_f32_f16(v31[1]), 1.0 - (float)((float)BYTE1(v360) * 0.0039216)));
              }
            }
            if (BYTE2(v360))
            {
              if (BYTE2(v360) == 255)
              {
                v31[2].i32[0] = _D16.i32[0];
                v31[2].i16[2] = _H7;
                v31[2].i16[3] = _D17.i16[0];
              }
              else
              {
                v31[2] = vcvt_f16_f32(vmlaq_n_f32(vcvtq_f32_f16(vcvt_f16_f32(vmulq_n_f32(v359, (float)BYTE2(v360) * 0.0039216))), vcvtq_f32_f16(v31[2]), 1.0 - (float)((float)BYTE2(v360) * 0.0039216)));
              }
            }
            v363 = HIBYTE(v360);
            if (v363 == 255)
              goto LABEL_322;
            if (v363)
              v31[3] = vcvt_f16_f32(vmlaq_n_f32(vcvtq_f32_f16(vcvt_f16_f32(vmulq_n_f32(v359, (float)v363 * 0.0039216))), vcvtq_f32_f16(v31[3]), 1.0 - (float)((float)v363 * 0.0039216)));
LABEL_325:
            while (1)
            {
              v364 = v361;
              v31 += 4;
              --v361;
              v33 += 4;
              if (v364 < 2)
                break;
              v360 = *(_DWORD *)v33;
              if (*(_DWORD *)v33)
                goto LABEL_307;
            }
            if (!v362)
              break;
            v362 = 0;
            v360 = *(_DWORD *)v33 & v353;
          }
          v33 += v356;
          v31 += v357;
          --v21;
        }
        while (v21);
        return;
      case 2:
        if (use_vImage_fp16_compositing(void)::predicate != -1)
        {
          v415 = _D16;
          v417 = *(_WORD *)(v24 + 4);
          dispatch_once(&use_vImage_fp16_compositing(void)::predicate, &__block_literal_global_19551);
          _D16 = v415;
          _H7 = v417;
          _S22 = v432;
        }
        if (use_vImage_fp16_compositing(void)::status)
        {
LABEL_18:
          vImageCGCompositeConstMask_ARGB16F();
          return;
        }
        v365 = -1;
        v366 = v33 & 3;
        if ((v33 & 3) != 0)
        {
          v22 += v366;
          v365 = -1 << (8 * v366);
          v367 = v33 & 3;
          v33 &= 0xFFFFFFFFFFFFFFFCLL;
          v31 -= v367;
        }
        *(float *)&a5 = 1.0 - _S22;
        v368 = ((_BYTE)v22 + (_BYTE)v33) & 3;
        if ((((_BYTE)v22 + (_BYTE)v33) & 3) != 0)
        {
          v369 = 4 - v368;
          v366 += v369;
          v370 = 0xFFFFFFFF >> (8 * v369);
          if (v22 >= 4)
            v368 = 0xFFFFFFFF >> (8 * v369);
          else
            v368 = 0;
          if (v22 >= 4)
            v370 = -1;
          v365 &= v370;
        }
        v371 = v34 - v366;
        v372 = v35 - v366;
        v373 = vcvtq_f32_f16(_D16).u64[0];
        __asm { FCVT            S2, H7 }
        v375.i64[0] = v373;
        v375.i64[1] = __PAIR64__(LODWORD(_S22), LODWORD(_S2));
        v376 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a5, 0);
        while (1)
        {
          v377 = *(_DWORD *)v33 & v365;
          v378 = v22 >> 2;
          v379 = v368;
          if (!v377)
            goto LABEL_354;
LABEL_343:
          if (v377 == -1)
            break;
          while (1)
          {
            if ((_BYTE)v377)
            {
              v389 = vcvtq_f32_f16(vcvt_f16_f32(vmulq_n_f32(v375, (float)v377 * 0.0039216)));
              *v31 = vcvt_f16_f32(vmlaq_n_f32(v389, vcvtq_f32_f16(*v31), 1.0 - v389.f32[3]));
            }
            if ((v377 & 0xFF00) != 0)
            {
              v390 = vcvtq_f32_f16(vcvt_f16_f32(vmulq_n_f32(v375, (float)BYTE1(v377) * 0.0039216)));
              v31[1] = vcvt_f16_f32(vmlaq_n_f32(v390, vcvtq_f32_f16(v31[1]), 1.0 - v390.f32[3]));
            }
            if ((v377 & 0xFF0000) != 0)
            {
              v391 = vcvtq_f32_f16(vcvt_f16_f32(vmulq_n_f32(v375, (float)BYTE2(v377) * 0.0039216)));
              v31[2] = vcvt_f16_f32(vmlaq_n_f32(v391, vcvtq_f32_f16(v31[2]), 1.0 - v391.f32[3]));
            }
            v392 = HIBYTE(v377);
            if (v392)
            {
              v393 = (float)v392 * 0.0039216;
              _S17 = v393 * *(float *)&v373;
              __asm { FCVT            H17, S17 }
              _S18 = v393 * *((float *)&v373 + 1);
              __asm { FCVT            H18, S18 }
              _S19 = v393 * _S2;
              __asm { FCVT            H19, S19 }
              _S16 = v393 * _S22;
              __asm
              {
                FCVT            H16, S16
                FCVT            S16, H16
                FCVT            S17, H17
              }
              _H21 = v31[3].i16[0];
              __asm { FCVT            S21, H21 }
              _S17 = _S17 + (float)(_S21 * (float)(1.0 - _S16));
              __asm { FCVT            H17, S17 }
              v31[3].i16[0] = LOWORD(_S17);
              __asm { FCVT            S17, H18 }
              LOWORD(_S18) = v31[3].i16[1];
              __asm { FCVT            S18, H18 }
              _S17 = _S17 + (float)(_S18 * (float)(1.0 - _S16));
              __asm { FCVT            H17, S17 }
              v31[3].i16[1] = LOWORD(_S17);
              __asm { FCVT            S17, H19 }
              LOWORD(_S18) = v31[3].i16[2];
              __asm { FCVT            S18, H18 }
              _S17 = _S17 + (float)(_S18 * (float)(1.0 - _S16));
              __asm { FCVT            H17, S17 }
              v31[3].i16[2] = LOWORD(_S17);
              LOWORD(_S17) = v31[3].i16[3];
              __asm { FCVT            S17, H17 }
              _S16 = _S16 + (float)(_S17 * (float)(1.0 - _S16));
              goto LABEL_353;
            }
LABEL_354:
            while (1)
            {
              v411 = v378;
              v31 += 4;
              --v378;
              v33 += 4;
              if (v411 < 2)
                break;
              v377 = *(_DWORD *)v33;
              if (*(_DWORD *)v33)
                goto LABEL_343;
            }
            if (!v379)
              break;
            v379 = 0;
            v377 = *(_DWORD *)v33 & v368;
          }
          v33 += v371;
          v31 += v372;
          if (!--v21)
            return;
        }
        *(float16x8_t *)v31->i8 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(v375, v376, vcvtq_f32_f16(*v31))), vmlaq_f32(v375, v376, vcvt_hight_f32_f16(*(float16x8_t *)v31->i8)));
        v31[2] = vcvt_f16_f32(vmlaq_f32(v375, v376, vcvtq_f32_f16(v31[2])));
        _H16 = v31[3].i16[0];
        __asm { FCVT            S16, H16 }
        _S16 = *(float *)&v373 + (float)(_S16 * *(float *)&a5);
        __asm { FCVT            H16, S16 }
        v31[3].i16[0] = LOWORD(_S16);
        LOWORD(_S16) = v31[3].i16[1];
        __asm { FCVT            S16, H16 }
        _S16 = *((float *)&v373 + 1) + (float)(_S16 * *(float *)&a5);
        __asm { FCVT            H16, S16 }
        v31[3].i16[1] = LOWORD(_S16);
        LOWORD(_S16) = v31[3].i16[2];
        __asm { FCVT            S16, H16 }
        _S16 = _S2 + (float)(_S16 * *(float *)&a5);
        __asm { FCVT            H16, S16 }
        v31[3].i16[2] = LOWORD(_S16);
        LOWORD(_S16) = v31[3].i16[3];
        __asm { FCVT            S16, H16 }
        _S16 = _S22 + (float)(_S16 * *(float *)&a5);
LABEL_353:
        __asm { FCVT            H16, S16 }
        v31[3].i16[3] = _H16;
        goto LABEL_354;
      case 3:
        v39.i64[0] = vcvtq_f32_f16(_D16).u64[0];
        __asm { FCVT            S1, H7 }
        _D16.i16[2] = *(_WORD *)(v24 + 4);
        _D16.i16[3] = *(_WORD *)(v24 + 6);
        v39.i64[1] = __PAIR64__(LODWORD(_S22), _S1);
        v40 = vcvtq_f32_f16(_D16);
        do
        {
          v41 = v22;
          do
          {
            v42 = *(unsigned __int8 *)v33;
            if (*(_BYTE *)v33)
            {
              if (v42 == 255)
              {
                v43 = (const __int16 *)v31 + 3;
                v44 = (float16x4_t)vld1_dup_s16(v43);
                v45 = vmulq_f32(v40, vcvtq_f32_f16(v44));
              }
              else
              {
                v46 = vcvtq_f32_f16(*v31);
                v45 = vmlaq_n_f32(vcvtq_f32_f16(vcvt_f16_f32(vmulq_n_f32(v39, vmuls_lane_f32((float)v42 * 0.0039216, v46, 3)))), v46, 1.0 - (float)((float)v42 * 0.0039216));
              }
              *v31 = vcvt_f16_f32(v45);
            }
            ++v33;
            ++v31;
            --v41;
          }
          while (v41);
          v33 += v34;
          v31 += v35;
          --v21;
        }
        while (v21);
        return;
      case 4:
        v48.i64[0] = vcvtq_f32_f16(_D16).u64[0];
        __asm { FCVT            S1, H7 }
        v48.i64[1] = __PAIR64__(LODWORD(_S22), _S1);
        do
        {
          v49 = v22;
          do
          {
            v50 = *(unsigned __int8 *)v33;
            if (*(_BYTE *)v33)
            {
              if (v50 == 255)
              {
                _H3 = v31->i16[3];
                __asm { FCVT            S3, H3 }
                v53 = vmulq_n_f32(v48, 1.0 - _S3);
              }
              else
              {
                v54 = vcvtq_f32_f16(*v31);
                v53 = vmlaq_n_f32(vcvtq_f32_f16(vcvt_f16_f32(vmulq_n_f32(v48, (float)((float)v50 * 0.0039216) * (float)(1.0 - v54.f32[3])))), v54, 1.0 - (float)((float)v50 * 0.0039216));
              }
              *v31 = vcvt_f16_f32(v53);
            }
            ++v33;
            ++v31;
            --v49;
          }
          while (v49);
          v33 += v34;
          v31 += v35;
          --v21;
        }
        while (v21);
        return;
      case 5:
        v56.i64[0] = vcvtq_f32_f16(_D16).u64[0];
        __asm { FCVT            S1, H7 }
        v56.i64[1] = __PAIR64__(LODWORD(_S22), _S1);
        do
        {
          v57 = v22;
          do
          {
            if (*(_BYTE *)v33)
            {
              v58 = vcvtq_f32_f16(vcvt_f16_f32(vmulq_n_f32(v56, (float)*(unsigned __int8 *)v33 * 0.0039216)));
              v59 = vcvtq_f32_f16(*v31);
              *v31 = vcvt_f16_f32(vmlaq_laneq_f32(vmulq_n_f32(v59, 1.0 - v58.f32[3]), v58, v59, 3));
            }
            ++v33;
            ++v31;
            --v57;
          }
          while (v57);
          v33 += v34;
          v31 += v35;
          --v21;
        }
        while (v21);
        return;
      case 6:
        __asm { FCVT            S0, H16; jumptable 0000000184A6DB4C case 6 }
        _H1 = HIWORD(*(_DWORD *)v24);
        __asm
        {
          FCVT            S1, H1
          FCVT            S2, H7
        }
        while (1)
        {
          v64 = v22;
          do
          {
            v65 = *(unsigned __int8 *)v33;
            if (!*(_BYTE *)v33)
              goto LABEL_54;
            _H5 = v31->i16[3];
            __asm { FCVT            S5, H5 }
            v68 = 1.0 - _S5;
            if ((float)(1.0 - _S5) >= 1.0)
            {
              v86 = (float)v65 * 0.0039216;
              _S6 = v86 * _S0;
              __asm { FCVT            H6, S6 }
              _S7 = v86 * _S1;
              __asm { FCVT            H7, S7 }
              _S16 = v86 * _S2;
              __asm { FCVT            H16, S16 }
              v31->i16[0] = LOWORD(_S6);
              _S5 = v86 * _S22;
              v31->i16[1] = LOWORD(_S7);
              v31->i16[2] = LOWORD(_S16);
            }
            else
            {
              if (v68 <= 0.0)
                goto LABEL_54;
              v69 = (float)v65 * 0.0039216;
              _S16 = v69 * _S0;
              __asm { FCVT            H16, S16 }
              _S17 = v69 * _S1;
              __asm { FCVT            H17, S17 }
              _S18 = v69 * _S2;
              __asm { FCVT            H18, S18 }
              _S7 = v69 * _S22;
              __asm { FCVT            H7, S7 }
              _H19 = v31->i16[0];
              __asm
              {
                FCVT            S19, H19
                FCVT            S16, H16
              }
              _S16 = _S19 + (float)(_S16 * v68);
              __asm { FCVT            H16, S16 }
              v31->i16[0] = LOWORD(_S16);
              LOWORD(_S16) = v31->i16[1];
              __asm
              {
                FCVT            S16, H16
                FCVT            S17, H17
              }
              _S16 = _S16 + (float)(_S17 * v68);
              __asm { FCVT            H16, S16 }
              v31->i16[1] = LOWORD(_S16);
              LOWORD(_S16) = v31->i16[2];
              __asm
              {
                FCVT            S16, H16
                FCVT            S17, H18
              }
              _S16 = _S16 + (float)(_S17 * v68);
              __asm { FCVT            H16, S16 }
              v31->i16[2] = LOWORD(_S16);
              __asm { FCVT            S7, H7 }
              _S5 = _S5 + (float)(_S7 * v68);
            }
            __asm { FCVT            H5, S5 }
            v31->i16[3] = _H5;
LABEL_54:
            ++v33;
            ++v31;
            --v64;
          }
          while (v64);
          v33 += v34;
          v31 += v35;
          if (!--v21)
            return;
        }
      case 7:
        v91 = vcvtq_f32_f16((float16x4_t)vdup_lane_s16(_D17, 0));
        do
        {
          v92 = v22;
          do
          {
            v93 = *(unsigned __int8 *)v33;
            if (*(_BYTE *)v33)
            {
              if (v93 == 255)
                v94 = vmulq_f32(v91, vcvtq_f32_f16(*v31));
              else
                v94 = vmulq_n_f32(vcvtq_f32_f16(*v31), (float)((float)((float)v93 * 0.0039216) * _S22) + (float)(1.0 - (float)((float)v93 * 0.0039216)));
              *v31 = vcvt_f16_f32(v94);
            }
            ++v33;
            ++v31;
            --v92;
          }
          while (v92);
          v33 += v34;
          v31 += v35;
          --v21;
        }
        while (v21);
        return;
      case 8:
        do
        {
          v95 = v22;
          do
          {
            v96 = *(unsigned __int8 *)v33;
            if (*(_BYTE *)v33)
            {
              _H3 = v31->i16[0];
              if (v96 == 255)
              {
                __asm { FCVT            S3, H3 }
                _S4 = (float)(1.0 - _S22) * _S3;
                v100 = 1.0 - _S22;
              }
              else
              {
                __asm { FCVT            S4, H3 }
                v100 = (float)((float)((float)v96 * -0.0039216) * _S22) + 1.0;
                _S4 = v100 * _S4;
              }
              __asm { FCVT            H4, S4 }
              v31->i16[0] = _H4;
              _H4 = v31->i16[1];
              __asm { FCVT            S4, H4 }
              _S4 = v100 * _S4;
              __asm { FCVT            H4, S4 }
              v31->i16[1] = LOWORD(_S4);
              LOWORD(_S4) = v31->i16[2];
              __asm { FCVT            S4, H4 }
              _S4 = v100 * _S4;
              __asm { FCVT            H4, S4 }
              v31->i16[2] = LOWORD(_S4);
              LOWORD(_S4) = v31->i16[3];
              __asm { FCVT            S4, H4 }
              _S3 = v100 * _S4;
              __asm { FCVT            H3, S3 }
              v31->i16[3] = LOWORD(_S3);
            }
            ++v33;
            ++v31;
            --v95;
          }
          while (v95);
          v33 += v34;
          v31 += v35;
          --v21;
        }
        while (v21);
        return;
      case 9:
        v111.i64[0] = vcvtq_f32_f16(_D16).u64[0];
        __asm { FCVT            S1, H7 }
        v111.i64[1] = __PAIR64__(LODWORD(_S22), _S1);
        do
        {
          v112 = v22;
          do
          {
            if (*(_BYTE *)v33)
            {
              v113 = (float)*(unsigned __int8 *)v33 * 0.0039216;
              v114 = 1.0 - v113;
              v115 = vcvtq_f32_f16(*v31);
              v116 = vcvtq_f32_f16(vcvt_f16_f32(vmulq_n_f32(v111, v113)));
              *v31 = vcvt_f16_f32(vmlaq_n_f32(vmulq_n_f32(v115, v114 + v116.f32[3]), v116, 1.0 - v115.f32[3]));
            }
            ++v33;
            ++v31;
            --v112;
          }
          while (v112);
          v33 += v34;
          v31 += v35;
          --v21;
        }
        while (v21);
        return;
      case 10:
        v118.i64[0] = vcvtq_f32_f16(_D16).u64[0];
        __asm { FCVT            S1, H7 }
        v118.i64[1] = __PAIR64__(LODWORD(_S22), _S1);
        do
        {
          v119 = v22;
          do
          {
            if (*(_BYTE *)v33)
            {
              v120 = vcvtq_f32_f16(*v31);
              v121 = vcvtq_f32_f16(vcvt_f16_f32(vmulq_n_f32(v118, (float)*(unsigned __int8 *)v33 * 0.0039216)));
              *v31 = vcvt_f16_f32(vmlaq_n_f32(vmulq_n_f32(v120, 1.0 - v121.f32[3]), v121, 1.0 - v120.f32[3]));
            }
            ++v33;
            ++v31;
            --v119;
          }
          while (v119);
          v33 += v34;
          v31 += v35;
          --v21;
        }
        while (v21);
        return;
      case 11:
        __asm { FCVT            S0, H16; jumptable 0000000184A6DB4C case 11 }
        _H1 = HIWORD(*(_DWORD *)v24);
        __asm
        {
          FCVT            S1, H1
          FCVT            S2, H7
        }
        do
        {
          v126 = v22;
          do
          {
            if (*(_BYTE *)v33)
            {
              v127 = (float)*(unsigned __int8 *)v33 * 0.0039216;
              _S4 = v127 * _S22;
              __asm { FCVT            H4, S4 }
              if (v18)
              {
                _H6 = v31->i16[3];
                __asm
                {
                  FCVT            S17, H6
                  FCVT            S4, H4
                }
              }
              else
              {
                __asm { FCVT            S4, H4 }
                _S17 = 1.0;
              }
              _S6 = _S4 + _S17;
              _S7 = 1.0;
              if ((float)(_S4 + _S17) > 1.0)
                _S6 = 1.0;
              _S16 = 1.0;
              if (v18)
              {
                _H16 = v31->i16[3];
                __asm { FCVT            S16, H16 }
              }
              _S18 = v127 * _S0;
              __asm { FCVT            H18, S18 }
              _H19 = v31->i16[0];
              __asm
              {
                FCVT            S19, H19
                FCVT            S18, H18
              }
              v141 = (float)(_S4 - _S18) + (float)(_S17 - _S19);
              _H17 = v31->i16[1];
              _S18 = _S6 - v141;
              __asm { FCVT            H18, S18 }
              v31->i16[0] = LOWORD(_S18);
              if (v18)
              {
                _H7 = v31->i16[3];
                __asm { FCVT            S7, H7 }
              }
              _S18 = v127 * _S1;
              __asm { FCVT            H18, S18 }
              _S5 = v127 * _S2;
              __asm
              {
                FCVT            H5, S5
                FCVT            S17, H17
              }
              v148 = _S16 - _S17;
              __asm { FCVT            S17, H18 }
              v150 = (float)(_S4 - _S17) + v148;
              LOWORD(_S17) = v31->i16[2];
              __asm
              {
                FCVT            S17, H17
                FCVT            S5, H5
              }
              v153 = (float)(_S4 - _S5) + (float)(_S7 - _S17);
              _S5 = _S6 - v150;
              __asm { FCVT            H5, S5 }
              v31->i16[1] = LOWORD(_S5);
              __asm { FCVT            H5, S6 }
              v31->i16[3] = LOWORD(_S5);
              _S4 = _S6 - v153;
              __asm { FCVT            H4, S4 }
              v31->i16[2] = LOWORD(_S4);
            }
            ++v33;
            ++v31;
            --v126;
          }
          while (v126);
          v33 += v34;
          v31 += v35;
          --v21;
        }
        while (v21);
        return;
      case 12:
        __asm { FCVT            S0, H16; jumptable 0000000184A6DB4C case 12 }
        _H1 = HIWORD(*(_DWORD *)v24);
        __asm
        {
          FCVT            S1, H1
          FCVT            S2, H7
        }
        do
        {
          v160 = v22;
          do
          {
            if (*(_BYTE *)v33)
            {
              v161 = (float)*(unsigned __int8 *)v33 * 0.0039216;
              _S6 = v161 * _S0;
              __asm { FCVT            H6, S6 }
              _S7 = v161 * _S1;
              __asm { FCVT            H7, S7 }
              _S16 = v161 * _S2;
              __asm { FCVT            H16, S16 }
              _S5 = v161 * _S22;
              __asm { FCVT            H5, S5 }
              _H17 = v31->i16[0];
              _H18 = v31->i16[1];
              __asm
              {
                FCVT            S6, H6
                FCVT            S17, H17
              }
              _S6 = _S17 + _S6;
              __asm { FCVT            H6, S6 }
              v31->i16[0] = LOWORD(_S6);
              __asm
              {
                FCVT            S6, H7
                FCVT            S7, H18
              }
              _S6 = _S7 + _S6;
              __asm { FCVT            H6, S6 }
              v31->i16[1] = LOWORD(_S6);
              LOWORD(_S6) = v31->i16[3];
              __asm
              {
                FCVT            S6, H6
                FCVT            S5, H5
              }
              _S5 = _S5 + _S6;
              _H6 = v31->i16[2];
              if (_S5 > 1.0)
                _S5 = 1.0;
              __asm
              {
                FCVT            S7, H16
                FCVT            S6, H6
              }
              _S6 = _S6 + _S7;
              __asm { FCVT            H6, S6 }
              v31->i16[2] = LOWORD(_S6);
              __asm { FCVT            H5, S5 }
              v31->i16[3] = _H5;
            }
            ++v33;
            ++v31;
            --v160;
          }
          while (v160);
          v33 += v34;
          v31 += v35;
          --v21;
        }
        while (v21);
        return;
      case 13:
        _Q0 = (__n128)vcvtq_f32_f16(_D16);
        v418 = _Q0;
        __asm { FCVT            S8, H7 }
        while (1)
        {
          v185 = v22;
          do
          {
            if (*(_BYTE *)v33)
            {
              v186 = (float)*(unsigned __int8 *)v33 * 0.0039216;
              _S1 = v186 * _S22;
              __asm
              {
                FCVT            H5, S1
                FCVT            S7, H5
              }
              if (*(float *)&_D7 > 0.0)
              {
                v188.n128_u64[1] = v418.n128_u64[1];
                v188.n128_u64[0] = (unint64_t)vmul_n_f32((float32x2_t)v418.n128_u64[0], v186);
                v189 = COERCE_DOUBLE(vcvt_f16_f32((float32x4_t)v188));
                _Q0.n128_f32[0] = v186 * _S8;
                __asm { FCVT            H16, S0 }
                if (v18)
                {
                  LOWORD(_D3) = v31->i16[3];
                  __asm { FCVT            S4, H3 }
                  if (_S4 <= 0.0)
                  {
                    v31->i32[0] = LODWORD(v189);
                    v31->i16[2] = _H16;
                    v31->i16[3] = LOWORD(_D5);
                    goto LABEL_124;
                  }
                }
                else
                {
                  LOWORD(_D3) = v31->i16[3];
                  _S4 = 1.0;
                }
                _Q0.n128_u16[0] = v31->i16[0];
                v188.n128_u16[0] = v31->u16[1];
                _Q2.n128_u16[0] = v31->u16[2];
                _Q0.n128_u16[0] = PDAmultiplyPDA(_Q0, v188, _Q2, _D3, _S4, _D5, v189, _D7, a1, a2, a3, a4, v20, a14, a15, a16, SLOWORD(v189), SWORD1(v189), _H16,
                                    *(float *)&_D7);
                _S22 = v432;
                v31->i16[0] = _Q0.n128_u16[0];
                v31->i16[1] = v192;
                v31->i16[2] = _Q2.n128_u16[0];
                v31->i16[3] = LOWORD(_D3);
              }
            }
LABEL_124:
            ++v33;
            ++v31;
            --v185;
          }
          while (v185);
          v33 += v34;
          v31 += v35;
          if (!--v21)
            return;
        }
      case 14:
        __asm { FCVT            S0, H16; jumptable 0000000184A6DB4C case 14 }
        _H1 = HIWORD(*(_DWORD *)v24);
        __asm
        {
          FCVT            S1, H1
          FCVT            S2, H7
        }
        while (1)
        {
          v197 = v22;
          do
          {
            if (*(_BYTE *)v33)
            {
              v198 = (float)*(unsigned __int8 *)v33 * 0.0039216;
              _S5 = v198 * _S22;
              __asm
              {
                FCVT            H18, S5
                FCVT            S5, H18
              }
              if (_S5 > 0.0)
              {
                _S6 = v198 * _S0;
                __asm { FCVT            H6, S6 }
                _S7 = v198 * _S1;
                __asm { FCVT            H7, S7 }
                _S16 = v198 * _S2;
                __asm { FCVT            H16, S16 }
                if (v18)
                {
                  _H17 = v31->i16[3];
                  __asm { FCVT            S17, H17 }
                  if (_S17 <= 0.0)
                  {
                    v31->i16[0] = _H6;
                    v31->i16[1] = _H7;
                    v31->i16[2] = _H16;
                    v31->i16[3] = _H18;
                    goto LABEL_136;
                  }
                }
                else
                {
                  _S17 = 1.0;
                }
                _H18 = v31->i16[0];
                _H19 = v31->i16[1];
                _H20 = v31->i16[2];
                __asm
                {
                  FCVT            S18, H18
                  FCVT            S19, H19
                  FCVT            S20, H20
                  FCVT            S6, H6
                  FCVT            S7, H7
                  FCVT            S16, H16
                }
                _S6 = _S18 + (float)(_S6 * (float)(1.0 - _S18));
                _S7 = _S19 + (float)(_S7 * (float)(1.0 - _S19));
                _S16 = _S20 + (float)(_S16 * (float)(1.0 - _S20));
                _S5 = (float)(_S17 + _S5) - (float)(_S17 * _S5);
                __asm
                {
                  FCVT            H6, S6
                  FCVT            H7, S7
                  FCVT            H16, S16
                }
                v31->i16[0] = LOWORD(_S6);
                v31->i16[1] = LOWORD(_S7);
                __asm { FCVT            H5, S5 }
                v31->i16[2] = LOWORD(_S16);
                v31->i16[3] = LOWORD(_S5);
              }
            }
LABEL_136:
            ++v33;
            ++v31;
            --v197;
          }
          while (v197);
          v33 += v34;
          v31 += v35;
          if (!--v21)
            return;
        }
      case 15:
        _Q0 = (__n128)vcvtq_f32_f16(_D16);
        v419 = _Q0;
        __asm { FCVT            S8, H7 }
        while (1)
        {
          v225 = v22;
          do
          {
            if (*(_BYTE *)v33)
            {
              v226 = (float)*(unsigned __int8 *)v33 * 0.0039216;
              _S1 = v226 * _S22;
              __asm
              {
                FCVT            H5, S1
                FCVT            S7, H5
              }
              if (*(float *)&_D7 > 0.0)
              {
                v228.n128_u64[1] = v419.n128_u64[1];
                v228.n128_u64[0] = (unint64_t)vmul_n_f32((float32x2_t)v419.n128_u64[0], v226);
                v229 = COERCE_DOUBLE(vcvt_f16_f32((float32x4_t)v228));
                _Q0.n128_f32[0] = v226 * _S8;
                __asm { FCVT            H16, S0 }
                if (v18)
                {
                  LOWORD(_D3) = v31->i16[3];
                  __asm { FCVT            S4, H3 }
                  if (_S4 <= 0.0)
                  {
                    v31->i32[0] = LODWORD(v229);
                    v31->i16[2] = _H16;
                    v31->i16[3] = LOWORD(_D5);
                    goto LABEL_148;
                  }
                }
                else
                {
                  LOWORD(_D3) = v31->i16[3];
                  _S4 = 1.0;
                }
                _Q0.n128_u16[0] = v31->i16[0];
                v228.n128_u16[0] = v31->u16[1];
                _Q2.n128_u16[0] = v31->u16[2];
                _Q0.n128_u16[0] = PDAoverlayPDA(_Q0, v228, _Q2, _D3, _S4, _D5, v229, _D7, a1, a2, a3, a4, v20, a14, a15, a16, SLOWORD(v229), SWORD1(v229), _H16,
                                    *(float *)&_D7);
                _S22 = v432;
                v31->i16[0] = _Q0.n128_u16[0];
                v31->i16[1] = v232;
                v31->i16[2] = _Q2.n128_u16[0];
                v31->i16[3] = LOWORD(_D3);
              }
            }
LABEL_148:
            ++v33;
            ++v31;
            --v225;
          }
          while (v225);
          v33 += v34;
          v31 += v35;
          if (!--v21)
            return;
        }
      case 16:
        _Q0 = (__n128)vcvtq_f32_f16(_D16);
        v420 = _Q0;
        __asm { FCVT            S8, H7 }
        while (1)
        {
          v235 = v22;
          do
          {
            if (*(_BYTE *)v33)
            {
              v236 = (float)*(unsigned __int8 *)v33 * 0.0039216;
              _S1 = v236 * _S22;
              __asm
              {
                FCVT            H5, S1
                FCVT            S7, H5
              }
              if (*(float *)&_D7 > 0.0)
              {
                v238.n128_u64[1] = v420.n128_u64[1];
                v238.n128_u64[0] = (unint64_t)vmul_n_f32((float32x2_t)v420.n128_u64[0], v236);
                v239 = COERCE_DOUBLE(vcvt_f16_f32((float32x4_t)v238));
                _Q0.n128_f32[0] = v236 * _S8;
                __asm { FCVT            H16, S0 }
                if (v18)
                {
                  LOWORD(_D3) = v31->i16[3];
                  __asm { FCVT            S4, H3 }
                  if (_S4 <= 0.0)
                  {
                    v31->i32[0] = LODWORD(v239);
                    v31->i16[2] = _H16;
                    v31->i16[3] = LOWORD(_D5);
                    goto LABEL_160;
                  }
                }
                else
                {
                  LOWORD(_D3) = v31->i16[3];
                  _S4 = 1.0;
                }
                _Q0.n128_u16[0] = v31->i16[0];
                v238.n128_u16[0] = v31->u16[1];
                _Q2.n128_u16[0] = v31->u16[2];
                _Q0.n128_u16[0] = PDAdarkenPDA(_Q0, v238, _Q2, _D3, _S4, _D5, v239, _D7, a1, a2, a3, a4, v20, a14, a15, a16, SLOWORD(v239), SWORD1(v239), _H16,
                                    *(float *)&_D7);
                _S22 = v432;
                v31->i16[0] = _Q0.n128_u16[0];
                v31->i16[1] = v242;
                v31->i16[2] = _Q2.n128_u16[0];
                v31->i16[3] = LOWORD(_D3);
              }
            }
LABEL_160:
            ++v33;
            ++v31;
            --v235;
          }
          while (v235);
          v33 += v34;
          v31 += v35;
          if (!--v21)
            return;
        }
      case 17:
        _Q0 = (__n128)vcvtq_f32_f16(_D16);
        v421 = _Q0;
        __asm { FCVT            S8, H7 }
        while (1)
        {
          v245 = v22;
          do
          {
            if (*(_BYTE *)v33)
            {
              v246 = (float)*(unsigned __int8 *)v33 * 0.0039216;
              _S1 = v246 * _S22;
              __asm
              {
                FCVT            H5, S1
                FCVT            S7, H5
              }
              if (*(float *)&_D7 > 0.0)
              {
                v248.n128_u64[1] = v421.n128_u64[1];
                v248.n128_u64[0] = (unint64_t)vmul_n_f32((float32x2_t)v421.n128_u64[0], v246);
                v249 = COERCE_DOUBLE(vcvt_f16_f32((float32x4_t)v248));
                _Q0.n128_f32[0] = v246 * _S8;
                __asm { FCVT            H16, S0 }
                if (v18)
                {
                  LOWORD(_D3) = v31->i16[3];
                  __asm { FCVT            S4, H3 }
                  if (_S4 <= 0.0)
                  {
                    v31->i32[0] = LODWORD(v249);
                    v31->i16[2] = _H16;
                    v31->i16[3] = LOWORD(_D5);
                    goto LABEL_172;
                  }
                }
                else
                {
                  LOWORD(_D3) = v31->i16[3];
                  _S4 = 1.0;
                }
                _Q0.n128_u16[0] = v31->i16[0];
                v248.n128_u16[0] = v31->u16[1];
                _Q2.n128_u16[0] = v31->u16[2];
                _Q0.n128_u16[0] = PDAlightenPDA(_Q0, v248, _Q2, _D3, _S4, _D5, v249, _D7, a1, a2, a3, a4, v20, a14, a15, a16, SLOWORD(v249), SWORD1(v249), _H16,
                                    *(float *)&_D7);
                _S22 = v432;
                v31->i16[0] = _Q0.n128_u16[0];
                v31->i16[1] = v252;
                v31->i16[2] = _Q2.n128_u16[0];
                v31->i16[3] = LOWORD(_D3);
              }
            }
LABEL_172:
            ++v33;
            ++v31;
            --v245;
          }
          while (v245);
          v33 += v34;
          v31 += v35;
          if (!--v21)
            return;
        }
      case 18:
        _Q0 = (__n128)vcvtq_f32_f16(_D16);
        v422 = _Q0;
        __asm { FCVT            S8, H7 }
        while (1)
        {
          v255 = v22;
          do
          {
            if (*(_BYTE *)v33)
            {
              v256 = (float)*(unsigned __int8 *)v33 * 0.0039216;
              _S1 = v256 * _S22;
              __asm
              {
                FCVT            H5, S1
                FCVT            S7, H5
              }
              if (*(float *)&_D7 > 0.0)
              {
                v258.n128_u64[1] = v422.n128_u64[1];
                v258.n128_u64[0] = (unint64_t)vmul_n_f32((float32x2_t)v422.n128_u64[0], v256);
                v259 = COERCE_DOUBLE(vcvt_f16_f32((float32x4_t)v258));
                _Q0.n128_f32[0] = v256 * _S8;
                __asm { FCVT            H16, S0 }
                if (v18)
                {
                  LOWORD(_D3) = v31->i16[3];
                  __asm { FCVT            S4, H3 }
                  if (_S4 <= 0.0)
                  {
                    v31->i32[0] = LODWORD(v259);
                    v31->i16[2] = _H16;
                    v31->i16[3] = LOWORD(_D5);
                    goto LABEL_184;
                  }
                }
                else
                {
                  LOWORD(_D3) = v31->i16[3];
                  _S4 = 1.0;
                }
                _Q0.n128_u16[0] = v31->i16[0];
                v258.n128_u16[0] = v31->u16[1];
                _Q2.n128_u16[0] = v31->u16[2];
                _Q0.n128_u16[0] = PDAcolordodgePDA(_Q0, v258, _Q2, _D3, _S4, _D5, v259, _D7, a1, a2, a3, a4, v20, a14, a15, a16, SLOWORD(v259), SWORD1(v259), _H16,
                                    *(float *)&_D7);
                _S22 = v432;
                v31->i16[0] = _Q0.n128_u16[0];
                v31->i16[1] = v262;
                v31->i16[2] = _Q2.n128_u16[0];
                v31->i16[3] = LOWORD(_D3);
              }
            }
LABEL_184:
            ++v33;
            ++v31;
            --v255;
          }
          while (v255);
          v33 += v34;
          v31 += v35;
          if (!--v21)
            return;
        }
      case 19:
        _Q0 = (__n128)vcvtq_f32_f16(_D16);
        v423 = _Q0;
        __asm { FCVT            S8, H7 }
        while (1)
        {
          v265 = v22;
          do
          {
            if (*(_BYTE *)v33)
            {
              v266 = (float)*(unsigned __int8 *)v33 * 0.0039216;
              _S1 = v266 * _S22;
              __asm
              {
                FCVT            H5, S1
                FCVT            S7, H5
              }
              if (*(float *)&_D7 > 0.0)
              {
                v268.n128_u64[1] = v423.n128_u64[1];
                v268.n128_u64[0] = (unint64_t)vmul_n_f32((float32x2_t)v423.n128_u64[0], v266);
                v269 = COERCE_DOUBLE(vcvt_f16_f32((float32x4_t)v268));
                _Q0.n128_f32[0] = v266 * _S8;
                __asm { FCVT            H16, S0 }
                if (v18)
                {
                  LOWORD(_D3) = v31->i16[3];
                  __asm { FCVT            S4, H3 }
                  if (_S4 <= 0.0)
                  {
                    v31->i32[0] = LODWORD(v269);
                    v31->i16[2] = _H16;
                    v31->i16[3] = LOWORD(_D5);
                    goto LABEL_196;
                  }
                }
                else
                {
                  LOWORD(_D3) = v31->i16[3];
                  _S4 = 1.0;
                }
                _Q0.n128_u16[0] = v31->i16[0];
                v268.n128_u16[0] = v31->u16[1];
                _Q2.n128_u16[0] = v31->u16[2];
                _Q0.n128_u16[0] = PDAcolorburnPDA(_Q0, v268, _Q2, _D3, _S4, _D5, v269, _D7, a1, a2, a3, a4, v20, a14, a15, a16, SLOWORD(v269), SWORD1(v269), _H16,
                                    *(float *)&_D7);
                _S22 = v432;
                v31->i16[0] = _Q0.n128_u16[0];
                v31->i16[1] = v272;
                v31->i16[2] = _Q2.n128_u16[0];
                v31->i16[3] = LOWORD(_D3);
              }
            }
LABEL_196:
            ++v33;
            ++v31;
            --v265;
          }
          while (v265);
          v33 += v34;
          v31 += v35;
          if (!--v21)
            return;
        }
      case 20:
        _Q0 = (__n128)vcvtq_f32_f16(_D16);
        v424 = _Q0;
        __asm { FCVT            S8, H7 }
        while (1)
        {
          v275 = v22;
          do
          {
            if (*(_BYTE *)v33)
            {
              v276 = (float)*(unsigned __int8 *)v33 * 0.0039216;
              _S1 = v276 * _S22;
              __asm
              {
                FCVT            H5, S1
                FCVT            S7, H5
              }
              if (*(float *)&_D7 > 0.0)
              {
                v278.n128_u64[1] = v424.n128_u64[1];
                v278.n128_u64[0] = (unint64_t)vmul_n_f32((float32x2_t)v424.n128_u64[0], v276);
                v279 = COERCE_DOUBLE(vcvt_f16_f32((float32x4_t)v278));
                _Q0.n128_f32[0] = v276 * _S8;
                __asm { FCVT            H16, S0 }
                if (v18)
                {
                  LOWORD(_D3) = v31->i16[3];
                  __asm { FCVT            S4, H3 }
                  if (_S4 <= 0.0)
                  {
                    v31->i32[0] = LODWORD(v279);
                    v31->i16[2] = _H16;
                    v31->i16[3] = LOWORD(_D5);
                    goto LABEL_208;
                  }
                }
                else
                {
                  LOWORD(_D3) = v31->i16[3];
                  _S4 = 1.0;
                }
                _Q0.n128_u16[0] = v31->i16[0];
                v278.n128_u16[0] = v31->u16[1];
                _Q2.n128_u16[0] = v31->u16[2];
                _Q0.n128_u16[0] = PDAsoftlightPDA(_Q0, v278, _Q2, _D3, _S4, _D5, v279, _D7, a1, a2, a3, a4, v20, a14, a15, a16, SLOWORD(v279), SWORD1(v279), _H16,
                                    *(float *)&_D7);
                _S22 = v432;
                v31->i16[0] = _Q0.n128_u16[0];
                v31->i16[1] = v282;
                v31->i16[2] = _Q2.n128_u16[0];
                v31->i16[3] = LOWORD(_D3);
              }
            }
LABEL_208:
            ++v33;
            ++v31;
            --v275;
          }
          while (v275);
          v33 += v34;
          v31 += v35;
          if (!--v21)
            return;
        }
      case 21:
        _Q0 = (__n128)vcvtq_f32_f16(_D16);
        v425 = _Q0;
        __asm { FCVT            S8, H7 }
        while (1)
        {
          v285 = v22;
          do
          {
            if (*(_BYTE *)v33)
            {
              v286 = (float)*(unsigned __int8 *)v33 * 0.0039216;
              _S1 = v286 * _S22;
              __asm
              {
                FCVT            H5, S1
                FCVT            S7, H5
              }
              if (*(float *)&_D7 > 0.0)
              {
                v288.n128_u64[1] = v425.n128_u64[1];
                v288.n128_u64[0] = (unint64_t)vmul_n_f32((float32x2_t)v425.n128_u64[0], v286);
                v289 = COERCE_DOUBLE(vcvt_f16_f32((float32x4_t)v288));
                _Q0.n128_f32[0] = v286 * _S8;
                __asm { FCVT            H16, S0 }
                if (v18)
                {
                  LOWORD(_D3) = v31->i16[3];
                  __asm { FCVT            S4, H3 }
                  if (_S4 <= 0.0)
                  {
                    v31->i32[0] = LODWORD(v289);
                    v31->i16[2] = _H16;
                    v31->i16[3] = LOWORD(_D5);
                    goto LABEL_220;
                  }
                }
                else
                {
                  LOWORD(_D3) = v31->i16[3];
                  _S4 = 1.0;
                }
                _Q0.n128_u16[0] = v31->i16[0];
                v288.n128_u16[0] = v31->u16[1];
                _Q2.n128_u16[0] = v31->u16[2];
                _Q0.n128_u16[0] = PDAhardlightPDA(_Q0, v288, _Q2, _D3, _S4, _D5, v289, _D7, a1, a2, a3, a4, v20, a14, a15, a16, SLOWORD(v289), SWORD1(v289), _H16,
                                    *(float *)&_D7);
                _S22 = v432;
                v31->i16[0] = _Q0.n128_u16[0];
                v31->i16[1] = v292;
                v31->i16[2] = _Q2.n128_u16[0];
                v31->i16[3] = LOWORD(_D3);
              }
            }
LABEL_220:
            ++v33;
            ++v31;
            --v285;
          }
          while (v285);
          v33 += v34;
          v31 += v35;
          if (!--v21)
            return;
        }
      case 22:
        _Q0 = (__n128)vcvtq_f32_f16(_D16);
        v426 = _Q0;
        __asm { FCVT            S8, H7 }
        while (1)
        {
          v295 = v22;
          do
          {
            if (*(_BYTE *)v33)
            {
              v296 = (float)*(unsigned __int8 *)v33 * 0.0039216;
              _S1 = v296 * _S22;
              __asm
              {
                FCVT            H5, S1
                FCVT            S7, H5
              }
              if (*(float *)&_D7 > 0.0)
              {
                v298.i64[1] = v426.n128_i64[1];
                *(float32x2_t *)v298.f32 = vmul_n_f32((float32x2_t)v426.n128_u64[0], v296);
                v299 = COERCE_DOUBLE(vcvt_f16_f32(v298));
                _Q0.n128_f32[0] = v296 * _S8;
                __asm { FCVT            H16, S0 }
                if (v18)
                {
                  LOWORD(_D3) = v31->i16[3];
                  __asm { FCVT            S4, H3 }
                  if (_S4 <= 0.0)
                  {
                    v31->i32[0] = LODWORD(v299);
                    v31->i16[2] = _H16;
                    v31->i16[3] = LOWORD(_D5);
                    goto LABEL_232;
                  }
                }
                else
                {
                  LOWORD(_D3) = v31->i16[3];
                  _S4 = 1.0;
                }
                _Q0.n128_u16[0] = v31->i16[0];
                v298.i16[0] = v31->i16[1];
                _Q2.n128_u16[0] = v31->u16[2];
                HIWORD(v412) = LOWORD(_D5);
                LOWORD(v412) = _H16;
                _Q0.n128_u16[0] = PDAdifferencePDA(_Q0, *(double *)v298.i64, _Q2.n128_f64[0], _D3, _S4, _D5, v299, _D7, a1, a2, a3, a4, v20, a14, a15, a16, SLOWORD(v299), v412, *(float *)&_D7);
                _S22 = v432;
                v31->i16[0] = _Q0.n128_u16[0];
                v31->i16[1] = v302;
                v31->i16[2] = _Q2.n128_u16[0];
                v31->i16[3] = LOWORD(_D3);
              }
            }
LABEL_232:
            ++v33;
            ++v31;
            --v295;
          }
          while (v295);
          v33 += v34;
          v31 += v35;
          if (!--v21)
            return;
        }
      case 23:
        _Q0 = (__n128)vcvtq_f32_f16(_D16);
        v427 = _Q0;
        __asm { FCVT            S8, H7 }
        while (1)
        {
          v305 = v22;
          do
          {
            if (*(_BYTE *)v33)
            {
              v306 = (float)*(unsigned __int8 *)v33 * 0.0039216;
              _S1 = v306 * _S22;
              __asm
              {
                FCVT            H5, S1
                FCVT            S7, H5
              }
              if (*(float *)&_D7 > 0.0)
              {
                v308.n128_u64[1] = v427.n128_u64[1];
                v308.n128_u64[0] = (unint64_t)vmul_n_f32((float32x2_t)v427.n128_u64[0], v306);
                v309 = COERCE_DOUBLE(vcvt_f16_f32((float32x4_t)v308));
                _Q0.n128_f32[0] = v306 * _S8;
                __asm { FCVT            H16, S0 }
                if (v18)
                {
                  LOWORD(_D3) = v31->i16[3];
                  __asm { FCVT            S4, H3 }
                  if (_S4 <= 0.0)
                  {
                    v31->i32[0] = LODWORD(v309);
                    v31->i16[2] = _H16;
                    v31->i16[3] = LOWORD(_D5);
                    goto LABEL_244;
                  }
                }
                else
                {
                  LOWORD(_D3) = v31->i16[3];
                  _S4 = 1.0;
                }
                _Q0.n128_u16[0] = v31->i16[0];
                v308.n128_u16[0] = v31->u16[1];
                _Q2.n128_u16[0] = v31->u16[2];
                _Q0.n128_u16[0] = PDAexclusionPDA(_Q0, v308, _Q2, _D3, _S4, _D5, v309, _D7, a1, a2, a3, a4, v20, a14, a15, a16, SLOWORD(v309), SWORD1(v309), _H16,
                                    *(float *)&_D7);
                _S22 = v432;
                v31->i16[0] = _Q0.n128_u16[0];
                v31->i16[1] = v312;
                v31->i16[2] = _Q2.n128_u16[0];
                v31->i16[3] = LOWORD(_D3);
              }
            }
LABEL_244:
            ++v33;
            ++v31;
            --v305;
          }
          while (v305);
          v33 += v34;
          v31 += v35;
          if (!--v21)
            return;
        }
      case 24:
        _Q0 = (__n128)vcvtq_f32_f16(_D16);
        v428 = _Q0;
        __asm { FCVT            S8, H7 }
        while (1)
        {
          v315 = v22;
          do
          {
            if (*(_BYTE *)v33)
            {
              v316 = (float)*(unsigned __int8 *)v33 * 0.0039216;
              _S1 = v316 * _S22;
              __asm
              {
                FCVT            H5, S1
                FCVT            S7, H5
              }
              if (*(float *)&_D7 > 0.0)
              {
                v318.n128_u64[1] = v428.n128_u64[1];
                v318.n128_u64[0] = (unint64_t)vmul_n_f32((float32x2_t)v428.n128_u64[0], v316);
                v319 = COERCE_DOUBLE(vcvt_f16_f32((float32x4_t)v318));
                _Q0.n128_f32[0] = v316 * _S8;
                __asm { FCVT            H16, S0 }
                if (v18)
                {
                  LOWORD(_D3) = v31->i16[3];
                  __asm { FCVT            S4, H3 }
                  if (_S4 <= 0.0)
                  {
                    v31->i32[0] = LODWORD(v319);
                    v31->i16[2] = _H16;
                    v31->i16[3] = LOWORD(_D5);
                    goto LABEL_256;
                  }
                }
                else
                {
                  LOWORD(_D3) = v31->i16[3];
                  _S4 = 1.0;
                }
                _Q0.n128_u16[0] = v31->i16[0];
                v318.n128_u16[0] = v31->u16[1];
                _Q2.n128_u16[0] = v31->u16[2];
                _Q0.n128_u16[0] = PDAhuePDA(_Q0, v318, _Q2, _D3, _S4, _D5, v319, _D7, a1, a2, a3, a4, v20, a14, a15, a16, SLOWORD(v319), SWORD1(v319), _H16,
                                    *(float *)&_D7);
                _S22 = v432;
                v31->i16[0] = _Q0.n128_u16[0];
                v31->i16[1] = v322;
                v31->i16[2] = _Q2.n128_u16[0];
                v31->i16[3] = LOWORD(_D3);
              }
            }
LABEL_256:
            ++v33;
            ++v31;
            --v315;
          }
          while (v315);
          v33 += v34;
          v31 += v35;
          if (!--v21)
            return;
        }
      case 25:
        _Q0 = (__n128)vcvtq_f32_f16(_D16);
        v429 = _Q0;
        __asm { FCVT            S8, H7 }
        while (1)
        {
          v325 = v22;
          do
          {
            if (*(_BYTE *)v33)
            {
              v326 = (float)*(unsigned __int8 *)v33 * 0.0039216;
              _S1 = v326 * _S22;
              __asm
              {
                FCVT            H5, S1
                FCVT            S7, H5
              }
              if (*(float *)&_D7 > 0.0)
              {
                v328.n128_u64[1] = v429.n128_u64[1];
                v328.n128_u64[0] = (unint64_t)vmul_n_f32((float32x2_t)v429.n128_u64[0], v326);
                v329 = COERCE_DOUBLE(vcvt_f16_f32((float32x4_t)v328));
                _Q0.n128_f32[0] = v326 * _S8;
                __asm { FCVT            H16, S0 }
                if (v18)
                {
                  LOWORD(_D3) = v31->i16[3];
                  __asm { FCVT            S4, H3 }
                  if (_S4 <= 0.0)
                  {
                    v31->i32[0] = LODWORD(v329);
                    v31->i16[2] = _H16;
                    v31->i16[3] = LOWORD(_D5);
                    goto LABEL_268;
                  }
                }
                else
                {
                  LOWORD(_D3) = v31->i16[3];
                  _S4 = 1.0;
                }
                _Q0.n128_u16[0] = v31->i16[0];
                v328.n128_u16[0] = v31->u16[1];
                _Q2.n128_u16[0] = v31->u16[2];
                _Q0.n128_u16[0] = PDAsaturationPDA(_Q0, v328, _Q2, _D3, _S4, _D5, v329, _D7, a1, a2, a3, a4, v20, a14, a15, a16, SLOWORD(v329), SWORD1(v329), _H16,
                                    *(float *)&_D7);
                _S22 = v432;
                v31->i16[0] = _Q0.n128_u16[0];
                v31->i16[1] = v332;
                v31->i16[2] = _Q2.n128_u16[0];
                v31->i16[3] = LOWORD(_D3);
              }
            }
LABEL_268:
            ++v33;
            ++v31;
            --v325;
          }
          while (v325);
          v33 += v34;
          v31 += v35;
          if (!--v21)
            return;
        }
      case 26:
        v430 = vcvtq_f32_f16(_D16);
        __asm { FCVT            S8, H7 }
        while (1)
        {
          v334 = v22;
          do
          {
            if (*(_BYTE *)v33)
            {
              v335 = (float)*(unsigned __int8 *)v33 * 0.0039216;
              _S0 = v335 * _S22;
              __asm
              {
                FCVT            H3, S0
                FCVT            S4, H3
              }
              if (_S4 > 0.0)
              {
                v338.n128_u64[1] = v430.u64[1];
                v338.n128_u64[0] = (unint64_t)vmul_n_f32(*(float32x2_t *)v430.f32, v335);
                v338.n128_u64[0] = (unint64_t)vcvt_f16_f32((float32x4_t)v338);
                _Q1.n128_f32[0] = v335 * _S8;
                __asm { FCVT            H2, S1 }
                if (v18)
                {
                  LOWORD(_D5) = v31->i16[3];
                  __asm { FCVT            S6, H5 }
                  if (*(float *)&_D6 <= 0.0)
                  {
                    v31->i32[0] = v338.n128_u32[0];
LABEL_280:
                    v31->i16[2] = _Q2.n128_u16[0];
                    v31->i16[3] = LOWORD(_D3);
                    goto LABEL_281;
                  }
                }
                else
                {
                  LOWORD(_D5) = v31->i16[3];
                  LODWORD(_D6) = 1.0;
                }
                LOWORD(_D7) = v31->i16[0];
                _Q1.n128_u16[0] = v338.n128_u16[1];
                v339 = PDAluminosityPDA(v338, _Q1, _Q2, _D3, _S4, _D5, _D6, _D7, a1, a2, a3, a4, v20, a14, a15, a16, v31->i16[0], *(__int32 *)((char *)v31->i32 + 2), HIWORD(*(unsigned __int32 *)((char *)v31->i32 + 2)),
                         *(float *)&_D6);
                _S22 = v432;
                v31->i16[0] = v339;
                v31->i16[1] = _Q1.n128_u16[0];
                goto LABEL_280;
              }
            }
LABEL_281:
            ++v33;
            ++v31;
            --v334;
          }
          while (v334);
          v33 += v34;
          v31 += v35;
          if (!--v21)
            return;
        }
      case 27:
        _Q0 = (__n128)vcvtq_f32_f16(_D16);
        v431 = _Q0;
        __asm { FCVT            S8, H7 }
        break;
      default:
        return;
    }
LABEL_285:
    v342 = v22;
    while (1)
    {
      if (!*(_BYTE *)v33)
        goto LABEL_293;
      v343 = (float)*(unsigned __int8 *)v33 * 0.0039216;
      _S1 = v343 * _S22;
      __asm
      {
        FCVT            H5, S1
        FCVT            S7, H5
      }
      if (*(float *)&_D7 <= 0.0)
        goto LABEL_293;
      v345.n128_u64[1] = v431.n128_u64[1];
      v345.n128_u64[0] = (unint64_t)vmul_n_f32((float32x2_t)v431.n128_u64[0], v343);
      v346 = COERCE_DOUBLE(vcvt_f16_f32((float32x4_t)v345));
      _Q0.n128_f32[0] = v343 * _S8;
      __asm { FCVT            H16, S0 }
      if (!v18)
        break;
      LOWORD(_D3) = v31->i16[3];
      __asm { FCVT            S4, H3 }
      if (_S4 > 0.0)
        goto LABEL_292;
      v31->i32[0] = LODWORD(v346);
      v31->i16[2] = _H16;
      v31->i16[3] = LOWORD(_D5);
LABEL_293:
      ++v33;
      ++v31;
      if (!--v342)
      {
        v33 += v34;
        v31 += v35;
        if (!--v21)
          return;
        goto LABEL_285;
      }
    }
    LOWORD(_D3) = v31->i16[3];
    _S4 = 1.0;
LABEL_292:
    _Q0.n128_u16[0] = v31->i16[0];
    v345.n128_u16[0] = v31->u16[1];
    _Q2.n128_u16[0] = v31->u16[2];
    _Q0.n128_u16[0] = PDAluminosityPDA(_Q0, v345, _Q2, _D3, _S4, _D5, v346, _D7, a1, a2, a3, a4, v20, a14, a15, a16, SLOWORD(v346), SWORD1(v346), _H16,
                        *(float *)&_D7);
    _S22 = v432;
    v31->i16[0] = _Q0.n128_u16[0];
    v31->i16[1] = v349;
    v31->i16[2] = _Q2.n128_u16[0];
    v31->i16[3] = LOWORD(_D3);
    goto LABEL_293;
  }
}

void *load_iosurface_context_vtable()
{
  void *result;

  result = dlopen("/System/Library/Frameworks/QuartzCore.framework/QuartzCore", 1);
  if (result)
  {
    result = dlsym(result, "CAIOSurfaceContextVTable");
    vtable = (uint64_t)result;
  }
  return result;
}

uint64_t rip_image_data_key_hash(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[10];

  v3[9] = *MEMORY[0x1E0C80C00];
  memset(&v3[1], 0, 32);
  v3[0] = *(_QWORD *)a1;
  LODWORD(v3[1]) = *(_DWORD *)(a1 + 8);
  *(_OWORD *)&v3[2] = *(_OWORD *)(a1 + 16);
  LODWORD(v3[4]) = *(_DWORD *)(a1 + 32);
  *(_OWORD *)&v3[5] = *(_OWORD *)(a1 + 40);
  v1 = *(_QWORD *)(a1 + 64);
  v3[7] = 0;
  v3[8] = v1;
  return MEMORY[0x186DC26D0](v3, 56);
}

uint64_t CGPathIsUnevenCornersRoundedRectWithTransform(uint64_t cf, uint64_t a2, _OWORD *a3, _OWORD *a4)
{
  uint64_t v7;
  CFTypeID v8;
  int v9;
  uint64_t i;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  float64x2_t v24;
  float64x2_t v25;
  const double *v26;
  int64x2_t v27;
  int64x2_t v28;
  float64x2_t *v29;
  uint64_t j;
  _OWORD *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t k;
  CGAffineTransform v38;
  CGAffineTransform v39;
  uint64_t v40;
  float64x2x2_t v41;

  v40 = *MEMORY[0x1E0C80C00];
  if (cf)
  {
    v7 = cf;
    if (CGPathDisableTypeValidation || (v8 = CFGetTypeID((CFTypeRef)cf), v8 == CGPathGetTypeID()))
    {
      v9 = *(_DWORD *)(v7 + 16);
      if (v9 == 2)
      {
        if (a4)
        {
          if (a2)
            *(CGRect *)a2 = unit_rect;
          if (a3)
          {
            a3[3] = *(_OWORD *)(v7 + 72);
            v11 = *(_OWORD *)(v7 + 72);
            a3[1] = v11;
            a3[2] = v11;
            *a3 = v11;
          }
          goto LABEL_18;
        }
        v31 = (_OWORD *)(v7 + 24);
        if (*(double *)(v7 + 32) == 0.0 && *(double *)(v7 + 40) == 0.0
          || *(double *)v31 == 0.0 && *(double *)(v7 + 48) == 0.0)
        {
          if (a2)
          {
            v32 = *(_OWORD *)(v7 + 40);
            *(_OWORD *)&v39.a = *v31;
            *(_OWORD *)&v39.c = v32;
            *(_OWORD *)&v39.tx = *(_OWORD *)(v7 + 56);
            *(double *)a2 = transform_unit_rect(&v39);
            *(_QWORD *)(a2 + 8) = v33;
            *(_QWORD *)(a2 + 16) = v34;
            *(_QWORD *)(a2 + 24) = v35;
          }
          if (a3)
          {
            a3[3] = vabsq_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(v7 + 40), *(double *)(v7 + 80)), *(float64x2_t *)(v7 + 24), *(double *)(v7 + 72)));
            v36 = a3[3];
            a3[1] = v36;
            a3[2] = v36;
            *a3 = v36;
          }
          return 1;
        }
      }
      else if (v9 == 3)
      {
        if (a4)
        {
          if (a2)
            *(CGRect *)a2 = unit_rect;
          if (a3)
          {
            for (i = 0; i != 4; ++i)
              a3[i] = *(_OWORD *)(v7 + 72 + i * 16);
          }
LABEL_18:
          v12 = *(_OWORD *)(v7 + 24);
          v13 = *(_OWORD *)(v7 + 56);
          a4[1] = *(_OWORD *)(v7 + 40);
          a4[2] = v13;
          *a4 = v12;
          return 1;
        }
        v14 = (_OWORD *)(v7 + 24);
        if (*(double *)(v7 + 32) == 0.0 && *(double *)(v7 + 40) == 0.0
          || *(double *)v14 == 0.0 && *(double *)(v7 + 48) == 0.0)
        {
          if (a2)
          {
            v15 = *(_OWORD *)(v7 + 40);
            *(_OWORD *)&v38.a = *v14;
            *(_OWORD *)&v38.c = v15;
            *(_OWORD *)&v38.tx = *(_OWORD *)(v7 + 56);
            *(double *)a2 = transform_unit_rect(&v38);
            *(_QWORD *)(a2 + 8) = v16;
            *(_QWORD *)(a2 + 16) = v17;
            *(_QWORD *)(a2 + 24) = v18;
          }
          if (a3)
          {
            v19 = 0;
            v20 = *(uint64_t *)(v7 + 24);
            v21 = *(uint64_t *)(v7 + 32);
            v22 = *(double *)(v7 + 40);
            v23 = *(double *)(v7 + 48);
            v24 = (float64x2_t)vdupq_lane_s64(v20, 0);
            v25 = (float64x2_t)vdupq_lane_s64(v21, 0);
            do
            {
              v26 = (const double *)(v7 + 72 + v19);
              v41 = vld2q_f64(v26);
              v27 = (int64x2_t)vmlaq_f64(vmulq_n_f64(v41.val[1], v22), v41.val[0], v24);
              v28 = (int64x2_t)vmlaq_f64(vmulq_n_f64(v41.val[1], v23), v41.val[0], v25);
              v29 = (float64x2_t *)((char *)&v39 + v19);
              *v29 = vabsq_f64((float64x2_t)vzip1q_s64(v27, v28));
              v29[1] = vabsq_f64((float64x2_t)vzip2q_s64(v27, v28));
              v19 += 32;
            }
            while (v19 != 64);
            if (*(double *)&v20 == 0.0 && v23 == 0.0)
            {
              for (j = 0; j != 4; ++j)
                *a3++ = *((_OWORD *)&v39.a
                        + CG::Path::is_uneven_rounded_rect(CGRect *,CGSize *,CGAffineTransform *)const::permute[((4 * (v22 >= 0.0)) | (8 * (*(double *)&v21 >= 0.0))) + j]);
            }
            else
            {
              for (k = 0; k != 4; ++k)
                *a3++ = *((_OWORD *)&v39.a
                        + CG::Path::is_uneven_rounded_rect(CGRect *,CGSize *,CGAffineTransform *)const::permute[((4 * (v23 >= 0.0)) | (8 * (*(double *)&v20 >= 0.0))) + k]);
            }
          }
          return 1;
        }
      }
    }
    return 0;
  }
  return cf;
}

uint64_t CGPatternNotificationCenter()
{
  if (CGPatternNotificationCenter_once != -1)
    dispatch_once_f(&CGPatternNotificationCenter_once, 0, (dispatch_function_t)pattern_notification_center_create);
  return pattern_notification_center;
}

_QWORD *rip_image_data_key_retain(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  result = malloc_type_malloc(0x48uLL, 0x106004019ECFB16uLL);
  if (result)
  {
    *(_OWORD *)result = *(_OWORD *)a1;
    v5 = *(_OWORD *)(a1 + 16);
    v6 = *(_OWORD *)(a1 + 32);
    v7 = *(_OWORD *)(a1 + 48);
    result[8] = *(_QWORD *)(a1 + 64);
    *((_OWORD *)result + 2) = v6;
    *((_OWORD *)result + 3) = v7;
    *((_OWORD *)result + 1) = v5;
  }
  *a2 = result;
  return result;
}

void rip_image_data_make_purgeable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char vars0;

  if (!a1)
    _CGHandleAssert("rip_image_data_make_purgeable", 146, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/RIP/RIPImageCache.c", "data != NULL", "NULL data", a6, a7, a8, vars0);
  v8 = *(_QWORD *)(a1 + 104);
  if (v8)
  {
    if (*(_BYTE *)(v8 + 8))
      malloc_make_purgeable(*(void **)(v8 + 16));
  }
}

uint64_t *__color_space_state_create_generic_xyz_block_invoke_2()
{
  uint64_t *result;
  uint64_t v1;

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncGenericXYZProfile")) != 0)
  {
    v1 = *result;
  }
  else
  {
    v1 = 0;
  }
  color_space_state_create_generic_xyz_s = v1;
  return result;
}

uint64_t *__color_space_state_create_generic_gray_block_invoke_2()
{
  uint64_t *result;
  uint64_t v1;

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncGenericGrayProfile")) != 0)
  {
    v1 = *result;
  }
  else
  {
    v1 = 0;
  }
  color_space_state_create_generic_gray_s = v1;
  return result;
}

uint64_t (*__color_space_state_create_generic_xyz_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileCreateWithName");
  v1 = colorsync_smart_null_1622;
  if (result)
    v1 = result;
  color_space_state_create_generic_xyz_f = v1;
  return result;
}

uint64_t (*__color_space_state_create_generic_gray_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileCreateWithName");
  v1 = colorsync_smart_null_1622;
  if (result)
    v1 = result;
  color_space_state_create_generic_gray_f = v1;
  return result;
}

_QWORD *CGPDFResourcesFinalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  _QWORD *result;
  _QWORD *v10;

  v2 = (const void *)a1[3];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[4];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[5];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[6];
  if (v5)
    CFRelease(v5);
  v6 = (const void *)a1[7];
  if (v6)
    CFRelease(v6);
  v7 = (const void *)a1[8];
  if (v7)
    CFRelease(v7);
  v8 = (const void *)a1[9];
  if (v8)
    CFRelease(v8);
  result = (_QWORD *)a1[2];
  if (result)
  {
    do
    {
      v10 = (_QWORD *)*result;
      free(result);
      result = v10;
    }
    while (v10);
  }
  return result;
}

double shape_enum_clip_alloc(uint64_t a1, uint64_t a2, int *a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  int *v10;
  uint64_t v11;
  BOOL v18;
  _BOOL4 v19;
  char v20;
  double result;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  _DWORD *v27;
  int i;
  uint64_t v29;

  if (a3)
  {
    v10 = a3;
    if (*a3 == 0x80000000)
    {
      v11 = a3[1];
      if ((int)v11 >= 1)
      {
        v18 = a9 < 1 || a10 < 1;
        if (a3 == (int *)&the_empty_shape)
        {
          v19 = 1;
          if (v18)
            return shape_enum_allocate(a3, 2, a5);
        }
        else
        {
          v19 = a3[v11] == 0x7FFFFFFF;
          if (v18)
            return shape_enum_allocate(a3, 2, a5);
        }
        v20 = !v19;
        if (a6 < 1)
          v20 = 1;
        if ((v20 & 1) == 0)
          return shape_enum_allocate(a3, 2, a5);
        if (v19)
        {
          if (a6 >= 0)
            v22 = 3;
          else
            v22 = 4;
          result = shape_enum_allocate(a3, v22, a5);
          *(_DWORD *)(v23 + 4) = 0;
          *(_DWORD *)(v23 + 12) = a7;
          *(_DWORD *)(v23 + 16) = a8;
          *(_DWORD *)(v23 + 20) = a9 + a7;
          *(_DWORD *)(v23 + 24) = a10 + a8;
          *(_QWORD *)(v23 + 32) = &the_empty_shape;
          *(_QWORD *)(v23 + 40) = &the_empty_shape;
        }
        else
        {
          if (a6)
            v24 = 4;
          else
            v24 = 3;
          if (a6 <= 0)
            v25 = v24;
          else
            v25 = 2;
          result = shape_enum_allocate(a3, v25, a5);
          *(_DWORD *)(v26 + 4) = a4;
          *(_DWORD *)(v26 + 12) = a7;
          *(_DWORD *)(v26 + 16) = a8;
          *(_DWORD *)(v26 + 20) = a9 + a7;
          *(_DWORD *)(v26 + 24) = a10 + a8;
          if (a5 < 0)
          {
            v27 = (_DWORD *)(v26 + 56);
            for (i = *v10; i != 0x7FFFFFFF; i = *v10)
            {
              v29 = v10[1];
              *v27++ = -(int)v29;
              v10 += v29;
            }
            *(_QWORD *)(v26 + 40) = v10;
            if (a6 < 1)
            {
              *(_QWORD *)(v26 + 32) = v10;
            }
            else
            {
              *(_QWORD *)(v26 + 32) = v10 - 2;
              --v27;
            }
            *(_QWORD *)(v26 + 48) = v27;
          }
          else
          {
            *(_QWORD *)(v26 + 32) = v10;
            *(_QWORD *)(v26 + 40) = &v10[2 * (a6 > 0)];
          }
        }
      }
    }
  }
  return result;
}

double shape_enum_allocate(_DWORD *a1, int a2, int a3)
{
  size_t v4;
  uint64_t v5;
  char *v6;
  double result;

  if (a3 < 0 && *a1 != 0x7FFFFFFF)
  {
    v5 = 0;
    do
    {
      ++v5;
      a1 += (int)a1[1];
    }
    while (*a1 != 0x7FFFFFFF);
    v4 = 4 * v5 + 56;
  }
  else
  {
    v4 = 56;
  }
  v6 = (char *)malloc_type_malloc(v4, 0xEB07EEC6uLL);
  *(_DWORD *)v6 = a2;
  *(_QWORD *)&result = 1;
  *(_OWORD *)(v6 + 4) = xmmword_185004E30;
  *(int32x2_t *)(v6 + 20) = vdup_n_s32(0x7FFFFFFEu);
  *((_QWORD *)v6 + 5) = 0;
  *((_QWORD *)v6 + 6) = 0;
  *((_QWORD *)v6 + 4) = 0;
  return result;
}

void ClipperLib::ClipperBase::Reset(ClipperLib::ClipperBase *this)
{
  uint64_t v2;
  unint64_t v3;
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;

  v2 = *((_QWORD *)this + 2);
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 1) = v2;
  if (v2 != v3)
  {
    std::__introsort<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *,false>(v2, v3, 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - v2) >> 3)), 1);
    v4 = (void *)*((_QWORD *)this + 14);
    if (v4)
    {
      *((_QWORD *)this + 15) = v4;
      operator delete(v4);
    }
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 15) = 0;
    *((_QWORD *)this + 16) = 0;
    v5 = (uint64_t *)*((_QWORD *)this + 2);
    if (v5 != *((uint64_t **)this + 3))
    {
      do
      {
        std::priority_queue<long long>::push((uint64_t)this + 112, *v5);
        v6 = v5[1];
        if (v6)
        {
          v7 = *(_OWORD *)(v6 + 16);
          *(_OWORD *)(v6 + 48) = *(_OWORD *)v6;
          *(_OWORD *)(v6 + 64) = v7;
          *(_OWORD *)(v6 + 80) = *(_OWORD *)(v6 + 32);
          *(_DWORD *)(v6 + 156) = 1;
          *(_DWORD *)(v6 + 172) = -1;
        }
        v8 = v5[2];
        if (v8)
        {
          v9 = *(_OWORD *)(v8 + 16);
          *(_OWORD *)(v8 + 48) = *(_OWORD *)v8;
          *(_OWORD *)(v8 + 64) = v9;
          *(_OWORD *)(v8 + 80) = *(_OWORD *)(v8 + 32);
          *(_DWORD *)(v8 + 156) = 2;
          *(_DWORD *)(v8 + 172) = -1;
        }
        v5 += 3;
      }
      while (v5 != *((uint64_t **)this + 3));
      v5 = (uint64_t *)*((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 13) = 0;
    *((_QWORD *)this + 1) = v5;
  }
}

void std::__introsort<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  __int128 *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  BOOL v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  _QWORD *v44;
  BOOL v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  int64_t v55;
  int64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;

LABEL_1:
  v8 = (__int128 *)(a2 - 24);
  v9 = a1;
  while (2)
  {
    a1 = v9;
    v10 = a2 - v9;
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v9) >> 3);
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*(_QWORD *)v9 < *(_QWORD *)v8)
        {
          v104 = *(_QWORD *)(v9 + 16);
          v96 = *(_OWORD *)v9;
          v43 = *v8;
          *(_QWORD *)(v9 + 16) = *(_QWORD *)(a2 - 8);
          *(_OWORD *)v9 = v43;
          *(_QWORD *)(a2 - 8) = v104;
          *v8 = v96;
        }
        return;
      case 3:
        std::__sort3[abi:se180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>((__int128 *)v9, (uint64_t *)(v9 + 24), (uint64_t *)(a2 - 24));
        return;
      case 4:
        std::__sort4[abi:se180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>(v9, (uint64_t *)(v9 + 24), (uint64_t *)(v9 + 48), a2 - 24);
        return;
      case 5:
        std::__sort5[abi:se180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>((__n128 *)v9, (uint64_t *)(v9 + 24), (uint64_t *)(v9 + 48), (__n128 *)(v9 + 72), (__n128 *)(a2 - 24));
        return;
      default:
        if (v10 <= 575)
        {
          v44 = (_QWORD *)(v9 + 24);
          v46 = v9 == a2 || v44 == (_QWORD *)a2;
          if ((a4 & 1) != 0)
          {
            if (!v46)
            {
              v47 = 0;
              v48 = v9;
              do
              {
                v49 = v44;
                v50 = *v44;
                if (*(_QWORD *)v48 < v50)
                {
                  v97 = *(_OWORD *)(v48 + 32);
                  v51 = v47;
                  while (1)
                  {
                    v52 = v9 + v51;
                    *(_OWORD *)(v52 + 24) = *(_OWORD *)(v9 + v51);
                    *(_QWORD *)(v52 + 40) = *(_QWORD *)(v9 + v51 + 16);
                    if (!v51)
                      break;
                    v51 -= 24;
                    if (*(_QWORD *)(v52 - 24) >= v50)
                    {
                      v53 = v9 + v51 + 24;
                      goto LABEL_79;
                    }
                  }
                  v53 = v9;
LABEL_79:
                  *(_QWORD *)v53 = v50;
                  *(_OWORD *)(v53 + 8) = v97;
                }
                v44 = v49 + 3;
                v47 += 24;
                v48 = (unint64_t)v49;
              }
              while (v49 + 3 != (_QWORD *)a2);
            }
          }
          else if (!v46)
          {
            v81 = -2;
            v82 = 1;
            v83 = v9;
            while (1)
            {
              v84 = *v44;
              if (*(_QWORD *)v83 < *v44)
                break;
LABEL_125:
              v83 = v9 + 24 * v82++;
              v44 += 3;
              --v81;
              if (v44 == (_QWORD *)a2)
                return;
            }
            v100 = *(_OWORD *)(v83 + 32);
            v85 = v81;
            v86 = v44;
            while (1)
            {
              *(_OWORD *)v86 = *(_OWORD *)(v86 - 3);
              v86[2] = *(v86 - 1);
              if (__CFADD__(v85++, 1))
                break;
              v88 = v86 - 3;
              v89 = *(v86 - 6);
              v86 -= 3;
              if (v89 >= v84)
              {
                *v88 = v84;
                *(_OWORD *)(v88 + 1) = v100;
                goto LABEL_125;
              }
            }
LABEL_127:
            __break(1u);
          }
          return;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            v54 = (unint64_t)(v11 - 2) >> 1;
            v55 = v54;
            do
            {
              v56 = v55;
              if (v54 >= v55)
              {
                v57 = (2 * v55) | 1;
                v58 = (_QWORD *)(v9 + 24 * v57);
                if (2 * v56 + 2 >= v11)
                {
                  v59 = *v58;
                }
                else
                {
                  v59 = v58[3];
                  if (v59 < *v58)
                  {
                    v58 += 3;
                    v57 = 2 * v56 + 2;
                  }
                  else
                  {
                    v59 = *v58;
                  }
                }
                v60 = (_QWORD *)(v9 + 24 * v56);
                v61 = *v60;
                if (*v60 >= v59)
                {
                  v98 = *(_OWORD *)(v60 + 1);
                  do
                  {
                    v62 = v60;
                    v60 = v58;
                    v63 = *(_OWORD *)v58;
                    v62[2] = v58[2];
                    *(_OWORD *)v62 = v63;
                    if (v54 < v57)
                      break;
                    v64 = (2 * v57) | 1;
                    v58 = (_QWORD *)(v9 + 24 * v64);
                    v57 = 2 * v57 + 2;
                    if (v57 >= v11)
                    {
                      v65 = *v58;
                      v57 = v64;
                    }
                    else
                    {
                      v65 = v58[3];
                      if (v65 < *v58)
                      {
                        v58 += 3;
                      }
                      else
                      {
                        v65 = *v58;
                        v57 = v64;
                      }
                    }
                  }
                  while (v61 >= v65);
                  *v60 = v61;
                  *(_OWORD *)(v60 + 1) = v98;
                }
              }
              v55 = v56 - 1;
            }
            while (v56);
            v66 = v10 / 0x18uLL;
            do
            {
              v67 = 0;
              v105 = *(_QWORD *)(v9 + 16);
              v99 = *(_OWORD *)v9;
              v68 = v9;
              do
              {
                v69 = v68 + 24 * v67 + 24;
                v70 = (2 * v67) | 1;
                v71 = 2 * v67 + 2;
                if (v71 < v66 && *(_QWORD *)(v69 + 24) < *(_QWORD *)v69)
                {
                  v69 += 24;
                  v70 = v71;
                }
                v72 = *(_OWORD *)v69;
                *(_QWORD *)(v68 + 16) = *(_QWORD *)(v69 + 16);
                *(_OWORD *)v68 = v72;
                v68 = v69;
                v67 = v70;
              }
              while (v70 <= (uint64_t)((unint64_t)(v66 - 2) >> 1));
              a2 -= 24;
              if (v69 == a2)
              {
                *(_QWORD *)(v69 + 16) = v105;
                *(_OWORD *)v69 = v99;
              }
              else
              {
                v73 = *(_OWORD *)a2;
                *(_QWORD *)(v69 + 16) = *(_QWORD *)(a2 + 16);
                *(_OWORD *)v69 = v73;
                *(_QWORD *)(a2 + 16) = v105;
                *(_OWORD *)a2 = v99;
                v74 = v69 - v9 + 24;
                if (v74 >= 25)
                {
                  v75 = (unint64_t)(-2 - 0x5555555555555555 * (v74 >> 3)) >> 1;
                  v76 = v9 + 24 * v75;
                  v77 = *(_QWORD *)v69;
                  if (*(_QWORD *)v69 < *(_QWORD *)v76)
                  {
                    v92 = *(_OWORD *)(v69 + 8);
                    do
                    {
                      v78 = v69;
                      v69 = v76;
                      v79 = *(_OWORD *)v76;
                      *(_QWORD *)(v78 + 16) = *(_QWORD *)(v76 + 16);
                      *(_OWORD *)v78 = v79;
                      if (!v75)
                        break;
                      v75 = (v75 - 1) >> 1;
                      v76 = v9 + 24 * v75;
                    }
                    while (v77 < *(_QWORD *)v76);
                    *(_QWORD *)v69 = v77;
                    *(_OWORD *)(v69 + 8) = v92;
                  }
                }
              }
            }
            while (v66-- > 2);
          }
          return;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = (uint64_t *)(v9 + 24 * ((unint64_t)v11 >> 1));
        if ((unint64_t)v10 < 0xC01)
        {
          std::__sort3[abi:se180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>((__int128 *)(a1 + 24 * v12), (uint64_t *)a1, (uint64_t *)(a2 - 24));
        }
        else
        {
          std::__sort3[abi:se180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>((__int128 *)a1, (uint64_t *)(a1 + 24 * v12), (uint64_t *)(a2 - 24));
          v14 = 3 * v12;
          v15 = (uint64_t *)(a1 + 24 * v12 - 24);
          std::__sort3[abi:se180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>((__int128 *)(a1 + 24), v15, (uint64_t *)(a2 - 48));
          v16 = (uint64_t *)(a1 + 24 + 8 * v14);
          std::__sort3[abi:se180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>((__int128 *)(a1 + 48), v16, (uint64_t *)(a2 - 72));
          std::__sort3[abi:se180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>((__int128 *)v15, v13, v16);
          v101 = *(_QWORD *)(a1 + 16);
          v93 = *(_OWORD *)a1;
          v17 = v13[2];
          *(_OWORD *)a1 = *(_OWORD *)v13;
          *(_QWORD *)(a1 + 16) = v17;
          v13[2] = v101;
          *(_OWORD *)v13 = v93;
        }
        --a3;
        v18 = *(_QWORD *)a1;
        if ((a4 & 1) == 0 && v18 >= *(_QWORD *)(a1 - 24))
        {
          v91 = *(_OWORD *)(a1 + 8);
          if (*(_QWORD *)v8 >= v18)
          {
            v35 = a1 + 24;
            do
            {
              v9 = v35;
              if (v35 >= a2)
                break;
              v35 += 24;
            }
            while (*(_QWORD *)v9 >= v18);
          }
          else
          {
            v33 = (uint64_t *)(a1 + 24);
            do
            {
              if (v33 == (uint64_t *)a2)
                goto LABEL_127;
              v34 = *v33;
              v33 += 3;
            }
            while (v34 >= v18);
            v9 = (unint64_t)(v33 - 3);
          }
          v36 = a2;
          if (v9 < a2)
          {
            v36 = a2;
            while (v36 != a1)
            {
              v37 = *(_QWORD *)(v36 - 24);
              v36 -= 24;
              if (v37 >= v18)
                goto LABEL_52;
            }
            goto LABEL_127;
          }
LABEL_52:
          if (v9 < v36)
          {
            v103 = *(_QWORD *)(v9 + 16);
            v95 = *(_OWORD *)v9;
            v38 = *(_OWORD *)v36;
            *(_QWORD *)(v9 + 16) = *(_QWORD *)(v36 + 16);
            *(_OWORD *)v9 = v38;
            *(_QWORD *)(v36 + 16) = v103;
            *(_OWORD *)v36 = v95;
            v39 = (uint64_t *)(v9 + 24);
            while (v39 != (uint64_t *)a2)
            {
              v9 = (unint64_t)v39;
              v40 = *v39;
              v39 += 3;
              if (v40 < v18)
              {
                while (v36 != a1)
                {
                  v41 = *(_QWORD *)(v36 - 24);
                  v36 -= 24;
                  if (v41 >= v18)
                    goto LABEL_52;
                }
                goto LABEL_127;
              }
            }
            goto LABEL_127;
          }
          if (v9 - 24 != a1)
          {
            v42 = *(_OWORD *)(v9 - 24);
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v9 - 8);
            *(_OWORD *)a1 = v42;
          }
          a4 = 0;
          *(_QWORD *)(v9 - 24) = v18;
          *(_OWORD *)(v9 - 16) = v91;
          continue;
        }
        v90 = *(_OWORD *)(a1 + 8);
        v19 = (uint64_t *)(a1 + 24);
        do
        {
          if (v19 == (uint64_t *)a2)
            goto LABEL_127;
          v20 = v19;
          v21 = v19 - 3;
          v22 = *v19;
          v19 += 3;
        }
        while (v18 < v22);
        v23 = a2;
        if (v21 != (uint64_t *)a1)
        {
          while (v23 != a1)
          {
            v24 = *(_QWORD *)(v23 - 24);
            v23 -= 24;
            if (v18 < v24)
              goto LABEL_20;
          }
          goto LABEL_127;
        }
        v23 = a2;
        do
        {
          if ((unint64_t)v20 >= v23)
            break;
          v25 = *(_QWORD *)(v23 - 24);
          v23 -= 24;
        }
        while (v18 >= v25);
LABEL_20:
        v9 = (unint64_t)v20;
        if ((unint64_t)v20 < v23)
        {
          v26 = v23;
          do
          {
            v102 = *(_QWORD *)(v9 + 16);
            v94 = *(_OWORD *)v9;
            v27 = *(_OWORD *)v26;
            *(_QWORD *)(v9 + 16) = *(_QWORD *)(v26 + 16);
            *(_OWORD *)v9 = v27;
            *(_QWORD *)(v26 + 16) = v102;
            *(_OWORD *)v26 = v94;
            v28 = (uint64_t *)(v9 + 24);
            do
            {
              if (v28 == (uint64_t *)a2)
                goto LABEL_127;
              v9 = (unint64_t)v28;
              v29 = *v28;
              v28 += 3;
            }
            while (v18 < v29);
            do
            {
              if (v26 == a1)
                goto LABEL_127;
              v30 = *(_QWORD *)(v26 - 24);
              v26 -= 24;
            }
            while (v18 >= v30);
          }
          while (v9 < v26);
        }
        if (v9 - 24 != a1)
        {
          v31 = *(_OWORD *)(v9 - 24);
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v9 - 8);
          *(_OWORD *)a1 = v31;
        }
        *(_QWORD *)(v9 - 24) = v18;
        *(_OWORD *)(v9 - 16) = v90;
        if ((unint64_t)v20 < v23)
        {
LABEL_33:
          std::__introsort<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *,false>(a1, v9 - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v32 = std::__insertion_sort_incomplete[abi:se180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>(a1, v9 - 24);
        if (!std::__insertion_sort_incomplete[abi:se180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>(v9, a2))
        {
          if (v32)
            continue;
          goto LABEL_33;
        }
        a2 = v9 - 24;
        if (!v32)
          goto LABEL_1;
        return;
    }
  }
}

  while (1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v2 = (void *)objc_msgSend(a1, "anchoringTextLine");
      if (v2)
      {
        v3 = v2;
        v4 = objc_msgSend(v2, "inlineList");
        if (v4)
        {
          v5 = (unsigned int *)v4;
          while (*((void **)v5 + 1) != a1)
          {
            v5 = (unsigned int *)*((_QWORD *)v5 + 2);
            if (!v5)
              goto LABEL_15;
          }
          v6 = (void *)objc_msgSend(v3, "charSequence");
          v7 = objc_msgSend(v6, "length");
          if (v7)
          {
            v8 = v7;
            v9 = *v5;
            if (v9 >= objc_msgSend(v3, "wordCount"))
            {
              v11 = (v8 - 1);
            }
            else
            {
              v10 = (_DWORD *)objc_msgSend(v3, "wordAtIndex:", *v5);
              v11 = *v10 ? (*v10 - 1) : 0;
            }
            result = (void *)objc_msgSend(v6, "charAtIndex:", v11);
            if (result)
              return result;
          }
        }
      }
    }
LABEL_15:
    result = (void *)objc_msgSend(a1, "parent");
    if (!result)
      return result;
    v13 = result;
    v14 = objc_msgSend(result, "indexOf:", a1);
    v15 = objc_msgSend(v13, "count");
    v16 = v15;
    if (v14 == 0x7FFFFFFFFFFFFFFFLL)
      v17 = 0;
    else
      v17 = v14;
    v18 = v17 != 0;
    v19 = (v17 + 1);
    v20 = v19 < v15;
    if (!v17)
    {
      a1 = v13;
      if (v19 >= v15)
        continue;
    }
    LODWORD(v21) = v17;
    while (1)
    {
      if (v18)
      {
        v21 = (v21 - 1);
        result = (void *)rightDescendantCharacter((void *)objc_msgSend(v13, "childAtIndex:", v21));
        if (result)
          return result;
        if (v20)
        {
LABEL_27:
          result = (void *)leftDescendantCharacter((void *)objc_msgSend(v13, "childAtIndex:", v19));
          v17 = v19;
          if (result)
            return result;
        }
      }
      else
      {
        LODWORD(v21) = 0;
        if (v20)
          goto LABEL_27;
      }
      v18 = (_DWORD)v21 != 0;
      v19 = (v17 + 1);
      v20 = v19 < v16;
      if (!(_DWORD)v21 && v19 >= v16)
      {
        a1 = v13;
        goto LABEL_1;
      }
    }
  }
}

  while (1)
  {
    byte = read_byte(a1, a2, a3, a4, a5, a6, a7, a8);
    if (byte == 10 || byte == 13)
      break;
    if (byte == -1)
      return 0;
  }
  do
  {
    do
      v10 = read_byte(a1, a2, a3, a4, a5, a6, a7, a8);
    while (v10 == 10);
  }
  while (v10 == 13);
  if (v10 == -1)
    return 0;
  v11 = 0;
  *a1 = v10;
  while (v11 != 14)
  {
    v12 = aBoundingbox_0[v11];
    v13 = read_byte(a1, a2, a3, a4, a5, a6, a7, a8);
    ++v11;
    if (v13 == -1 || v13 != v12)
      goto LABEL_1;
  }
  return 1;
}

uint64_t rgba32_image(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  int v23;
  unint64_t v24;
  unint64_t (*v25)(unint64_t, int *, int, int, int, int);
  uint64_t v26;
  int v27;
  int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _OWORD v46[64];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v29 = 0u;
  memset(v46, 0, 512);
  if (*((_QWORD *)a2 + 12))
    v7 = 0;
  else
    v7 = *(float *)(a3 + 8) >= 1.0;
  v8 = *(unsigned int *)(*(_QWORD *)(v6 + 56) + 16 * *a2 + 8 * v7 + 4 * (*((_QWORD *)a2 + 6) == 0));
  if ((int)v8 > 28)
    return 0xFFFFFFFFLL;
  if (*((int *)a2 + 1) < 1 || *((int *)a2 + 2) < 1)
    return 0;
  if ((int)_blt_image_initialize((uint64_t)a2, a3, (uint64_t)&v29, (uint64_t)v46) < 1)
    return 0xFFFFFFFFLL;
  v18 = 134755224;
  v19 = *(_DWORD *)a3;
  *((_QWORD *)&v29 + 1) = __PAIR64__(*(_DWORD *)v6, *(_DWORD *)a3);
  if (v19 != 134755224)
  {
    v20 = SAMPLEINDEX(v19, v10, v11, v12, v13, v14, v15, v16);
    if (!v20)
      return 0xFFFFFFFFLL;
    if (v20 <= 0xB)
    {
      LOBYTE(v21) = 0;
      v22 = 0;
      switch(v20)
      {
        case 2u:
          v21 = *((_QWORD *)a2 + 12);
          if (v21)
            goto LABEL_34;
          v22 = 16;
          break;
        case 5u:
          LOBYTE(v21) = 0;
          v22 = 24;
          break;
        case 6u:
          goto LABEL_35;
        case 7u:
          LOBYTE(v21) = 0;
          v22 = 32;
          break;
        case 8u:
          LOBYTE(v21) = 0;
          v22 = 8;
          break;
        case 9u:
          LOBYTE(v21) = 0;
          v22 = 40;
          break;
        default:
          goto LABEL_34;
      }
      goto LABEL_35;
    }
    if (v20 <= 0x13)
    {
      if (v20 - 14 < 4)
      {
        LOBYTE(v21) = 0;
LABEL_27:
        v22 = 0;
LABEL_35:
        *(_QWORD *)&v29 = *(_QWORD *)&RGB8_image_sample[2 * v20 + 2];
        if ((_QWORD)v29)
          goto LABEL_42;
        if ((HIWORD(*(_DWORD *)a3) & 0x3Fu) <= 0x10)
        {
          *(_QWORD *)&v29 = *(_QWORD *)&RGB16_image_sample[2 * v20 + 2];
          if ((_QWORD)v29)
          {
            v18 = 269497256;
            v23 = 8;
LABEL_41:
            LODWORD(v30) = v23;
LABEL_42:
            DWORD2(v29) = v18;
            if ((v21 & 1) != 0)
              goto LABEL_60;
            goto LABEL_43;
          }
        }
        *(_QWORD *)&v29 = *(_QWORD *)&RGBF_image_sample[2 * v20 + 2];
        if ((_QWORD)v29)
        {
          v18 = 538981289;
          v23 = 16;
          goto LABEL_41;
        }
        return 0xFFFFFFFFLL;
      }
      if (v20 == 13 || v20 == 12)
      {
        v21 = *((_QWORD *)a2 + 12);
        if (!v21)
          goto LABEL_27;
      }
    }
LABEL_34:
    v22 = 255;
    LOBYTE(v21) = 1;
    goto LABEL_35;
  }
  if ((_QWORD)v40 || (~DWORD1(v30) & 0xC3) != 0)
    goto LABEL_30;
  v17.n128_u32[0] = *(_DWORD *)(a3 + 8);
  if ((v8 - 1) > 1 || (BYTE4(v30) & 4) != 0 || v17.n128_f32[0] != 1.0)
  {
    if (v17.n128_f32[0] >= 1.0)
      goto LABEL_29;
LABEL_30:
    *(_QWORD *)&v29 = rgba32_sample_rgba32;
    v20 = 7;
    v22 = 32;
LABEL_43:
    if ((BYTE4(v30) & 7) == 3 && (v8 - 1) <= 1 && (a2[2] == 5 || !a2[2]))
    {
      if (v20 <= 0xB)
      {
        HIDWORD(v24) = v22;
        LODWORD(v24) = v22;
        switch((v24 >> 3))
        {
          case 0u:
            if ((~DWORD1(v30) & 0x70) == 0 && !(_QWORD)v40 && *(float *)(a3 + 8) == 1.0)
            {
              rgba32_mark_image_RGBX32((uint64_t)a2, v8, (uint64_t)v35 >> SBYTE6(v30), *((uint64_t *)&v35 + 1) >> SBYTE7(v30), *((uint64_t *)&v37 + 1) >> SBYTE7(v30), v14, v15, v16);
              return 1;
            }
            DWORD2(v29) = *(_DWORD *)a3;
            v25 = rgba32_image_mark_RGB32;
            goto LABEL_127;
          case 1u:
            if ((~DWORD1(v30) & 0x70) == 0 && !(_QWORD)v40 && *(float *)(a3 + 8) == 1.0)
            {
              rgba32_mark_image_XRGB32((uint64_t)a2, v8, (uint64_t)v35 >> SBYTE6(v30), *((uint64_t *)&v35 + 1) >> SBYTE7(v30), *((uint64_t *)&v37 + 1) >> SBYTE7(v30), v14, v15, v16);
              return 1;
            }
            DWORD2(v29) = *(_DWORD *)a3;
            v25 = rgba32_image_mark_RGB32;
            goto LABEL_97;
          case 2u:
            if ((_DWORD)v8 == 1 && (BYTE4(v30) & 0x70) == 0x70 && !(_QWORD)v40 && *(float *)(a3 + 8) == 1.0)
            {
              rgba32_mark_image_W8((uint64_t)a2, (uint64_t)v35 >> SBYTE6(v30), *((uint64_t *)&v35 + 1) >> SBYTE7(v30), *((uint64_t *)&v37 + 1) >> SBYTE7(v30), v13, v14, v15, v16);
              return 1;
            }
            DWORD2(v29) = *(_DWORD *)a3;
            v25 = rgba32_image_mark_W8;
            goto LABEL_127;
          case 3u:
            if ((_DWORD)v8 == 1 && (BYTE4(v30) & 0x70) == 0x70 && !(_QWORD)v40 && *(float *)(a3 + 8) == 1.0)
            {
              rgba32_mark_image_RGB24((uint64_t)a2, (uint64_t)v35 >> SBYTE6(v30), *((uint64_t *)&v35 + 1) >> SBYTE7(v30), *((uint64_t *)&v37 + 1) >> SBYTE7(v30), v13, v14, v15, v16);
              return 1;
            }
            DWORD2(v29) = *(_DWORD *)a3;
            v25 = rgba32_image_mark_RGB24;
            goto LABEL_127;
          case 4u:
            if ((~DWORD1(v30) & 0x70) == 0 && !(_QWORD)v40 && *(float *)(a3 + 8) == 1.0)
            {
              rgba32_mark_image_rgbx32((uint64_t)a2, v8, (uint64_t)v35 >> SBYTE6(v30), *((uint64_t *)&v35 + 1) >> SBYTE7(v30), *((uint64_t *)&v37 + 1) >> SBYTE7(v30), v14, v15, v16);
              return 1;
            }
            DWORD2(v29) = *(_DWORD *)a3;
            v25 = rgba32_image_mark_rgba32;
            goto LABEL_127;
          case 5u:
            if ((~DWORD1(v30) & 0x70) == 0 && !(_QWORD)v40 && *(float *)(a3 + 8) == 1.0)
            {
              rgba32_mark_image_xrgb32((uint64_t)a2, v8, (uint64_t)v35 >> SBYTE6(v30), *((uint64_t *)&v35 + 1) >> SBYTE7(v30), *((uint64_t *)&v37 + 1) >> SBYTE7(v30), v14, v15, v16);
              return 1;
            }
            DWORD2(v29) = *(_DWORD *)a3;
            v25 = rgba32_image_mark_rgb32;
LABEL_97:
            v26 = (uint64_t)a2;
            v27 = v8;
            v28 = 8;
            break;
          default:
            goto LABEL_60;
        }
LABEL_128:
        argb32_image_mark_image(v26, (uint64_t)&v29, v27, v28, (void (*)(_QWORD, _QWORD))v25);
        return 1;
      }
      if (v20 <= 0x13)
      {
        switch(v20)
        {
          case 0xCu:
            if ((_DWORD)v8 == 1 && (BYTE4(v30) & 0x70) == 0x70 && !(_QWORD)v40 && *(float *)(a3 + 8) == 1.0)
            {
              rgba32_mark_image_W16((uint64_t)a2, (uint64_t)v35 >> SBYTE6(v30), *((uint64_t *)&v35 + 1) >> SBYTE7(v30), *((uint64_t *)&v37 + 1) >> SBYTE7(v30), v13, v14, v15, v16);
              return 1;
            }
            DWORD2(v29) = *(_DWORD *)a3;
            v25 = rgba32_image_mark_W16;
            goto LABEL_127;
          case 0xDu:
            if ((_DWORD)v8 == 1 && (BYTE4(v30) & 0x70) == 0x70 && !(_QWORD)v40 && *(float *)(a3 + 8) == 1.0)
            {
              rgba32_mark_image_w16((uint64_t)a2, (uint64_t)v35 >> SBYTE6(v30), *((uint64_t *)&v35 + 1) >> SBYTE7(v30), *((uint64_t *)&v37 + 1) >> SBYTE7(v30), v13, v14, v15, v16);
              return 1;
            }
            DWORD2(v29) = *(_DWORD *)a3;
            v25 = rgba32_image_mark_w16;
            goto LABEL_127;
          case 0xEu:
            if ((_DWORD)v8 == 1 && (BYTE4(v30) & 0x70) == 0x70 && !(_QWORD)v40 && *(float *)(a3 + 8) == 1.0)
            {
              rgba32_mark_image_RGB48((uint64_t)a2, (uint64_t)v35 >> SBYTE6(v30), *((uint64_t *)&v35 + 1) >> SBYTE7(v30), *((uint64_t *)&v37 + 1) >> SBYTE7(v30), v13, v14, v15, v16);
              return 1;
            }
            DWORD2(v29) = *(_DWORD *)a3;
            v25 = rgba32_image_mark_RGB48;
            goto LABEL_127;
          case 0xFu:
            if ((_DWORD)v8 == 1 && (BYTE4(v30) & 0x70) == 0x70 && !(_QWORD)v40 && *(float *)(a3 + 8) == 1.0)
            {
              rgba32_mark_image_rgb48((uint64_t)a2, (uint64_t)v35 >> SBYTE6(v30), *((uint64_t *)&v35 + 1) >> SBYTE7(v30), *((uint64_t *)&v37 + 1) >> SBYTE7(v30), v13, v14, v15, v16);
              return 1;
            }
            DWORD2(v29) = *(_DWORD *)a3;
            v25 = rgba32_image_mark_rgb48;
            goto LABEL_127;
          case 0x10u:
            if ((~DWORD1(v30) & 0x70) == 0 && !(_QWORD)v40 && *(float *)(a3 + 8) == 1.0)
            {
              rgba32_mark_image_RGBA64((uint64_t)a2, v8, (uint64_t)v35 >> SBYTE6(v30), *((uint64_t *)&v35 + 1) >> SBYTE7(v30), *((uint64_t *)&v37 + 1) >> SBYTE7(v30), v14, v15, v16);
              return 1;
            }
            DWORD2(v29) = *(_DWORD *)a3;
            v25 = rgba32_image_mark_RGBA64;
            goto LABEL_127;
          case 0x11u:
            if ((~DWORD1(v30) & 0x70) == 0 && !(_QWORD)v40 && *(float *)(a3 + 8) == 1.0)
            {
              rgba32_mark_image_rgba64((uint64_t)a2, v8, (uint64_t)v35 >> SBYTE6(v30), *((uint64_t *)&v35 + 1) >> SBYTE7(v30), *((uint64_t *)&v37 + 1) >> SBYTE7(v30), v14, v15, v16);
              return 1;
            }
            DWORD2(v29) = *(_DWORD *)a3;
            v25 = rgba32_image_mark_rgba64;
LABEL_127:
            v26 = (uint64_t)a2;
            v27 = v8;
            v28 = 0;
            break;
          default:
            goto LABEL_60;
        }
        goto LABEL_128;
      }
    }
LABEL_60:
    rgba32_image_mark((uint64_t)a2, (uint64_t)&v29, v8, v17);
    return 1;
  }
  if (a2[2] != 5 && a2[2])
  {
LABEL_29:
    if (!*(_QWORD *)(a3 + 24))
    {
      if ((BYTE4(v30) & 4) != 0)
      {
        v17.n128_u64[0] = *(_QWORD *)(a3 + 32);
        *((_QWORD *)a2 + 8) = v17.n128_u64[0];
      }
      rgba32_mark((uint64_t)a1, v17);
      return 1;
    }
    goto LABEL_30;
  }
  rgba32_mark_image((uint64_t)a2, v8, (uint64_t)v35 >> SBYTE6(v30), *((uint64_t *)&v35 + 1) >> SBYTE7(v30), *((uint64_t *)&v37 + 1) >> SBYTE7(v30), v14, v15, v16);
  return 1;
}

uint64_t xt_copy_url_for_name(uint64_t a1, const __CFString *a2)
{
  CFStringRef Copy;
  uint64_t v3;

  Copy = CFStringCreateCopy(0, a2);
  if (xt_copy_url_for_name_predicate != -1)
    dispatch_once(&xt_copy_url_for_name_predicate, &__block_literal_global_6989);
  v3 = xt_copy_url_for_name_f(Copy, 7, 0);
  CFRelease(Copy);
  return v3;
}

uint64_t rgba32_shade(uint64_t a1, __n128 a2)
{
  uint64_t *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __n128 v13;
  void *v14;
  unint64_t v15;
  _BYTE *v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  void *v38[2];
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  _OWORD v42[2];
  int v43;
  _BYTE v44[16];
  uint64_t v45;
  _BYTE v46[40];
  uint64_t v47;

  v2 = (uint64_t *)MEMORY[0x1E0C80A78](a1, a2);
  v5 = v4;
  v6 = (uint64_t)v3;
  v7 = 0;
  v47 = *MEMORY[0x1E0C80C00];
  v8 = *v2;
  v41 = 0;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  *(_OWORD *)v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v18 = 0u;
  memset(v17, 0, sizeof(v17));
  v9 = *(_QWORD *)(v8 + 56);
  v10 = *v3;
  if (!*((_QWORD *)v3 + 12))
  {
    if (*(_QWORD *)(v4 + 72))
      v7 = 0;
    else
      v7 = *(float *)(v4 + 4) >= 1.0;
  }
  v43 = 0;
  memset(v42, 0, sizeof(v42));
  v11 = *(_DWORD *)(v9 + 16 * v10 + 8 * v7 + 4 * (*((_QWORD *)v3 + 6) == 0));
  if (v11 > 27)
    return 0xFFFFFFFFLL;
  if (*((int *)v3 + 1) < 1 || *((int *)v3 + 2) < 1)
    return 0;
  if ((int)_blt_shade_initialize((uint64_t)v3, v4, (uint64_t)v17, (uint64_t)v42) < 1)
    return 0xFFFFFFFFLL;
  if ((*(_DWORD *)v5 & 0xF000000) == 0x3000000)
  {
    if (*(_QWORD *)(v5 + 16))
    {
      v14 = rgba32_shade_radial_RGB;
    }
    else if (*(_QWORD *)(v5 + 24))
    {
      v14 = rgba32_shade_conic_RGB;
    }
    else if (*((uint64_t *)&v19 + 1) < 2)
    {
      v14 = rgba32_shade_axial_RGB;
    }
    else
    {
      v14 = rgba32_shade_custom_RGB;
    }
    *(_QWORD *)&v17[0] = v14;
    if ((_QWORD)v40)
    {
      *((_QWORD *)&v39 + 1) = v46;
      _blt_shade_samples_16((uint64_t)v46, 2, 3, (float *)v40, *((float **)&v40 + 1), 1uLL);
    }
    v15 = *((_QWORD *)&v19 + 1) * v19;
    if ((uint64_t)(*((_QWORD *)&v19 + 1) * v19) <= 480)
    {
      v16 = v44;
      v38[1] = v44;
LABEL_27:
      _blt_shade_samples_16((uint64_t)v16, 2, 3, (float *)v18, *((float **)&v18 + 1), v15);
      if (*(_BYTE *)(v5 + 1))
        *(_QWORD *)&v39 = &_blt_shade_samples_noise;
      goto LABEL_29;
    }
    v16 = malloc_type_malloc(8 * v15 + 32, 0x54320A8DuLL);
    if (v16)
    {
      v38[1] = v16;
      v15 = *((_QWORD *)&v19 + 1) * v19;
      goto LABEL_27;
    }
    return 0xFFFFFFFFLL;
  }
  if (!*(_QWORD *)&v17[0])
    return 0xFFFFFFFFLL;
LABEL_29:
  DWORD2(v17[0]) = *(_DWORD *)v8;
  HIDWORD(v17[0]) = DWORD2(v17[0]);
  rgba32_image_mark(v6, (uint64_t)v17, v11, v13);
  if (v38[1] && (v38[1] < v44 || &v45 < v38[1]))
    free(v38[1]);
  return 1;
}

uint64_t get_font_finder()
{
  return font_finder;
}

uint64_t crossing_count(float64x2_t *a1, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double *v17;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  float64x2_t *v22;
  double v23;
  _BOOL4 v24;
  double v25;
  __n128 v27;
  int v28;
  __n128 v29;
  double *f64;
  double v31;
  double v32;
  double v33;
  double v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int32 v39;
  unsigned __int32 v40;
  double v41;
  double v42;
  float64x2_t v44[4];
  float64x2_t v45[4];
  double v46[3];

  v46[2] = *(double *)MEMORY[0x1E0C80C00];
  v12 = a1->f64[0];
  v11 = a1->f64[1];
  v13 = v11;
  v14 = v11;
  v15 = a1->f64[0];
  v16 = a1->f64[0];
  if ((unint64_t)(a2 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v17 = &a1[1].f64[1];
    v18 = a2;
    v16 = a1->f64[0];
    v15 = a1->f64[0];
    v14 = a1->f64[1];
    v13 = v14;
    do
    {
      v19 = *(v17 - 1);
      if (v19 > v15)
        v20 = *(v17 - 1);
      else
        v20 = v15;
      if (v19 < v16)
        v16 = *(v17 - 1);
      else
        v15 = v20;
      if (*v17 >= v14)
      {
        if (*v17 > v13)
          v13 = *v17;
      }
      else
      {
        v14 = *v17;
      }
      v17 += 2;
      --v18;
    }
    while (v18);
  }
  v21 = 0;
  if (v14 > 0.0 || v13 < 0.0 || v15 < 0.0)
    return v21;
  if (v16 > 0.0)
  {
    v22 = &a1[a2];
    if (v11 >= 0.0)
    {
      v25 = v22->f64[1];
      if (v11 <= 0.0 || (v21 = v25 <= 0.0) != 0)
      {
        if (v25 >= 0.0)
          return 0;
        else
          return 0xFFFFFFFFLL;
      }
    }
    else
    {
      v23 = v22->f64[1];
      v24 = v11 <= 0.0 || v23 <= 0.0;
      return v23 >= 0.0 && v24;
    }
    return v21;
  }
  if (v14 == v13)
    goto LABEL_26;
  if (a2 != 1)
  {
    if (a2 == 2 ? get_y_inflections_2(a1, v46, 0) : get_y_inflections_3(a1, v46, 0))
    {
      v27.n128_f64[0] = subdivide(a1, a2, v45, v44, v46[0]);
      v28 = crossing_count(v45, a2, a3, v27);
      return crossing_count(v44, a2, a3, v29) + v28;
    }
  }
  f64 = a1[a2].f64;
  v31 = f64[1];
  v21 = 0;
  if (v11 <= v31)
  {
    if (v11 > 0.0 || v31 < 0.0)
      return v21;
  }
  else if (v11 < 0.0 || v31 > 0.0)
  {
    return v21;
  }
  if (v11 == 0.0 && v12 == 0.0 || v31 == 0.0 && *f64 == 0.0)
    goto LABEL_26;
  if (a2 == 1)
  {
    if ((v14 != v11 || v13 != v31) && (v14 != v31 || v13 != v11))
      _CGHandleAssert("crossing_count", 170, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Paths/path-crossing.c", "(min.y == p[0].y && max.y == p[order].y) || (min.y == p[order].y && max.y == p[0].y)", "unexpected path order: min{%f,%f}, max{%f,%f}, p[%lu]{%f,%f}", a6, a7, a8, SLOBYTE(v16));
    v32 = a1[1].f64[1];
    v33 = v12 * v32;
    v34 = a1[1].f64[0] * v11;
    if (v12 * v32 != v34)
    {
      if (v11 < 0.0 && v11 < v32 && v33 > v34)
        return 1;
      if (v33 >= v34 || v32 >= 0.0 || v11 <= v32)
        return 0;
      return 0xFFFFFFFFLL;
    }
LABEL_26:
    v21 = 0;
    *a3 = 1;
    return v21;
  }
  subdivide(a1, a2, v45, v44, 0.5);
  if (!a2)
    return 1;
  v36 = 0;
  v37 = 2;
  if ((unint64_t)(a2 + 1) > 2)
    v37 = a2 + 1;
  v38 = v37 - 1;
  LOBYTE(v39) = 1;
  LOBYTE(v40) = 1;
  do
  {
    if ((v40 & 1) != 0)
    {
      v35 = (__n128)vceqq_f64(v45[v36], v45[v36 + 1]);
      v35.n128_u64[0] = (unint64_t)vmovn_s64((int64x2_t)v35);
      v40 = v35.n128_u32[0] & v35.n128_u32[1];
      if ((v39 & 1) == 0)
        goto LABEL_67;
    }
    else
    {
      v40 = 0;
      if ((v39 & 1) == 0)
      {
LABEL_67:
        v39 = 0;
        goto LABEL_70;
      }
    }
    v35 = (__n128)vceqq_f64(v44[v36], v44[v36 + 1]);
    v35.n128_u64[0] = (unint64_t)vmovn_s64((int64x2_t)v35);
    v39 = v35.n128_u32[0] & v35.n128_u32[1];
LABEL_70:
    ++v36;
  }
  while (v38 != v36);
  if (((v39 | v40) & 1) != 0)
    return 1;
  v35.n128_u64[0] = *(_QWORD *)&v45[0].f64[1];
  v41 = v45[a2].f64[1];
  if (v45[0].f64[1] <= 0.0 && v41 >= 0.0 || (v21 = 0, v45[0].f64[1] >= 0.0) && v41 <= 0.0)
    v21 = crossing_count(v45, a2, a3, v35);
  v35.n128_u64[0] = *(_QWORD *)&v44[0].f64[1];
  v42 = v44[a2].f64[1];
  if (v44[0].f64[1] <= 0.0 && v42 >= 0.0 || v44[0].f64[1] >= 0.0 && v42 <= 0.0)
    return crossing_count(v44, a2, a3, v35) + v21;
  return v21;
}

uint64_t create_private_data_with_name()
{
  return 0;
}

CFTypeRef copy_aliased_font_name_locked(uint64_t a1, const void *a2)
{
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  const __CFArray *v10;
  CFIndex v11;
  CFIndex v12;
  CFIndex v13;
  const __CFDictionary *v14;

  if (!a1)
    return 0;
  v4 = *(const __CFArray **)(a1 + 16);
  if (v4)
  {
    Count = CFArrayGetCount(v4);
    if (Count >= 1)
    {
      v6 = Count;
      v7 = 0;
      do
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), v7);
        Value = CFDictionaryGetValue(ValueAtIndex, a2);
        if (Value)
          return CFRetain(Value);
      }
      while (v6 != ++v7);
    }
  }
  v10 = *(const __CFArray **)(a1 + 24);
  if (!v10)
    return 0;
  v11 = CFArrayGetCount(v10);
  if (v11 < 1)
    return 0;
  v12 = v11;
  v13 = 0;
  while (1)
  {
    v14 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v13);
    Value = CFDictionaryGetValue(v14, a2);
    if (Value)
      break;
    if (v12 == ++v13)
      return 0;
  }
  return CFRetain(Value);
}

void argb32_mark_image_RGB24(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v10;
  int v11;
  int v12;
  int *v13;
  int v14;
  void *v15;
  void *v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  size_t v27;
  size_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t i;
  char *v33;
  int v34;
  char *v35;
  char v36;
  char v37;
  int v39;
  int v41;
  int v42;
  uint64_t v43;
  vImage_Buffer v44;
  vImage_Buffer v45;

  v8 = a4;
  v39 = a2;
  v10 = *(_DWORD *)(a1 + 28);
  v11 = *(_DWORD *)(a1 + 4);
  v12 = *(_DWORD *)(a1 + 8);
  v41 = v12;
  v42 = v11;
  v13 = *(int **)(a1 + 136);
  if (v13)
  {
    v14 = *(_DWORD *)(a1 + 104);
    LODWORD(v43) = *(_DWORD *)(a1 + 108);
    HIDWORD(v43) = v14;
    shape_enum_clip_alloc(a1, a2, v13, 1, 1, 1, v14, v43, v11, v12);
    v16 = v15;
    if (v15)
      goto LABEL_28;
  }
  v17 = 0;
  v18 = 0;
  v16 = 0;
  v43 = 0;
  if (v11 < 0)
LABEL_4:
    _CGHandleAssert("CGSConvertBGR888toRGBA8888", 195, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "width >= 0", "width (%d) < 0", a6, a7, a8, v11);
  while (1)
  {
    if (v12 < 0)
      _CGHandleAssert("CGSConvertBGR888toRGBA8888", 195, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "height >= 0", "height (%d) < 0", a6, a7, a8, v12);
    v19 = *(_DWORD *)(a1 + 76);
    v20 = *(_QWORD *)(a1 + 88) + v19 * (uint64_t)(a3 + v18 * v8) + 3 * (v17 + v39);
    v21 = *(_QWORD *)(a1 + 40) + (*(int *)(a1 + 16) + (uint64_t)v18) * v10 + 4 * (*(_DWORD *)(a1 + 12) + v17);
    v22 = v19 * (uint64_t)v8;
    v23 = v12 - 1;
    v24 = v20 + (int)v23 * v22;
    v25 = v21 + v23 * v10;
    v26 = (char *)(v10 < 0 ? v25 : v21);
    v27 = v10 >= 0 ? v10 : -v10;
    v28 = v10 >= 0 ? v22 : -(int)v22;
    v29 = (char *)(v10 < 0 ? v24 : v20);
    if ((v28 & 0x80000000) != 0)
    {
      v30 = (char *)malloc_type_malloc((int)v27 * v12, 0x52337FB7uLL);
      v31 = v30;
      if (v12 >= 1)
      {
        for (i = 0; i != v12; ++i)
        {
          if (v11 >= 1)
          {
            v33 = &v30[i * v27];
            v34 = v11;
            v35 = &v29[i * (int)v28];
            do
            {
              v36 = *v35;
              v37 = v35[1];
              *v33 = v35[2];
              v33[1] = v37;
              v33[2] = v36;
              v33[3] = -1;
              v35 += 3;
              v33 += 4;
              --v34;
            }
            while (v34);
          }
        }
      }
      CGBlt_copyBytes(4 * v11, v12, v30, v26, v27, v27);
      free(v31);
      v8 = a4;
      if (!v16)
        return;
    }
    else
    {
      v45.data = v29;
      v45.height = v12;
      v45.width = v11;
      v45.rowBytes = v28;
      v44.data = v26;
      v44.height = v12;
      v44.width = v11;
      v44.rowBytes = v27;
      vImageConvert_RGB888toBGRA8888(&v45, 0, 0xFFu, &v44, 0, 0);
      if (!v16)
        return;
    }
LABEL_28:
    if (!shape_enum_clip_next((uint64_t)v16, (int *)&v43 + 1, &v43, &v42, &v41))
      break;
    v18 = v43;
    v17 = HIDWORD(v43);
    v12 = v41;
    v11 = v42;
    if (v42 < 0)
      goto LABEL_4;
  }
  free(v16);
}

uint64_t (*__xt_copy_url_for_name_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadlibFontRegistryDYLD_once != -1)
    dispatch_once(&CGLibraryLoadlibFontRegistryDYLD_once, &__block_literal_global_10_19715);
  result = (uint64_t (*)())CGLibraryLoadlibFontRegistryDYLD_handle;
  if (CGLibraryLoadlibFontRegistryDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadlibFontRegistryDYLD_handle, "XTCopyFontWithName");
  v1 = font_registry_smart_null;
  if (result)
    v1 = result;
  xt_copy_url_for_name_f = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v1;
  return result;
}

void ___ZNK25CGPathRandomAccessSubpath20append_range_to_pathEddbb7CGPoint17CGAffineTransformR21CGPathOutputFiltering_block_invoke(uint64_t a1, double a2, double a3)
{
  CGPathOutputFiltering *v3;
  __int128 v4;
  CGAffineTransform v5;

  v3 = *(CGPathOutputFiltering **)(a1 + 32);
  v4 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)&v5.a = *(_OWORD *)(a1 + 40);
  *(_OWORD *)&v5.c = v4;
  *(_OWORD *)&v5.tx = *(_OWORD *)(a1 + 72);
  CGPathOutputFiltering::add_line_to_point(v3, a2, a3, &v5);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListResourceGradient *,std::shared_ptr<CG::DisplayListResourceGradient>::__shared_ptr_default_delete<CG::DisplayListResourceGradient,CG::DisplayListResourceGradient>,std::allocator<CG::DisplayListResourceGradient>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

BOOL CG::Path::contains_point(CG::Path *this, const CGPoint *a2, _BOOL4 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  __int128 v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double y;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float64x2_t *v25;
  float64x2_t v26;
  CGPoint *v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  CGPoint v33;
  _BYTE v34[4];
  int v35;
  float64x2_t v36;
  CGAffineTransform v37;
  CGPoint v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v11 = 0;
  switch(*(_DWORD *)this)
  {
    case 0:
      return v11;
    case 1:
      if (*((double *)this + 2) != 0.0 || *((double *)this + 3) != 0.0)
        goto LABEL_12;
      v12 = *(_OWORD *)((char *)this + 24);
      *(_OWORD *)&v37.a = *(_OWORD *)((char *)this + 8);
      *(_OWORD *)&v37.c = v12;
      *(_OWORD *)&v37.tx = *(_OWORD *)((char *)this + 40);
      v13 = transform_unit_rect(&v37);
      v17 = v13 + v16;
      if (a2->x < v13 || a2->x > v17)
        return 0;
      y = a2->y;
      return y >= v14 && y <= v14 + v15;
    case 8:
      if (!*((_WORD *)this + 5))
        return 0;
      goto LABEL_12;
    case 9:
      if (!*((_QWORD *)this + 2))
        return 0;
      v20 = 0;
      v21 = 0;
      v34[0] = 0;
      v35 = 0;
      v36 = *(float64x2_t *)a2;
      v33 = (CGPoint)0;
      v22 = -1;
      break;
    default:
LABEL_12:
      CG::Path::Path((CG::Path *)&v38, this);
      if (LODWORD(v38.x) != 9)
        CG::Path::convert_to_huge_((CG::Path *)&v38);
      v11 = CG::Path::contains_point((CG::Path *)&v38, a2, a3);
      CG::Path::~Path((void **)&v38);
      return v11;
  }
  do
  {
    v23 = *((_QWORD *)this + 4);
    switch(*(_BYTE *)(v23 + *((_QWORD *)this + 3) + v22))
    {
      case 0:
        v24 = 0;
        v38 = (CGPoint)vsubq_f64(*(float64x2_t *)(v23 + 16 * v20), v36);
        break;
      case 1:
      case 4:
        v38 = v33;
        v39 = vsubq_f64(*(float64x2_t *)(v23 + 16 * v20), v36);
        v24 = 1;
        break;
      case 2:
        v38 = v33;
        v26 = *(float64x2_t *)(v23 + 16 * v20++);
        v39 = vsubq_f64(v26, v36);
        v40 = vsubq_f64(*(float64x2_t *)(v23 + 16 * v20), v36);
        v24 = 2;
        break;
      case 3:
        v38 = v33;
        v25 = (float64x2_t *)(v23 + 16 * v20);
        v39 = vsubq_f64(*v25, v36);
        v20 += 2;
        v40 = vsubq_f64(v25[1], v36);
        v41 = vsubq_f64(*(float64x2_t *)(v23 + 16 * v20), v36);
        v24 = 3;
        break;
      default:
        abort();
    }
    v27 = &v38 + v24;
    v33 = *v27;
    if (v34[0])
      return 1;
    ++v20;
    ++v21;
    v28 = *((_QWORD *)this + 2);
    --v22;
  }
  while (v21 < v28);
  v29 = *((_QWORD *)this + 4);
  if (*(_BYTE *)(v29 + *((_QWORD *)this + 3) - v28) == 4
    || (v38 = *v27,
        v39 = vsubq_f64(*(float64x2_t *)(v29 + 16 * *((_QWORD *)this + 9)), v36),
        v11 = 1,
        !v34[0]))
  {
    v30 = v35;
    v31 = v35 & 1;
    if (v35 < 0)
      v31 = -v31;
    if (a3)
      v30 = v31;
    return v30 != 0;
  }
  return v11;
}

void sub_184A73CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  CG::Path::~Path((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *CGPathRandomAccessSubpath::append_sections_to_path(uint64_t *result, unint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v13 = result;
  v14 = (result[1] - *result) >> 4;
  v15 = a2 % v14;
  while (1)
  {
    v16 = *v13;
    v17 = (v13[1] - *v13) >> 4;
    if (v17 <= v15)
      break;
    v18 = v16 + 16 * v15;
    if (*(_BYTE *)(v18 + 8))
    {
      v19 = v13[3];
      if (*(_QWORD *)v18 >= (unint64_t)((v13[4] - v19) >> 4))
        break;
      result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a7 + 16))(a7, v19 + 16 * *(_QWORD *)v18);
    }
    else
    {
      if (a5)
      {
        if (v15 == a2 && (a4 & 1) != 0)
          goto LABEL_15;
        v20 = *(_QWORD *)v18;
      }
      else
      {
        v21 = v15 + 1;
        if (a4 && v21 % v14 == a3)
          goto LABEL_15;
        v20 = *(_QWORD *)(v16 + 16 * (v21 % v17));
      }
      v22 = v13[3];
      if (v20 >= (v13[4] - v22) >> 4)
        break;
      result = (uint64_t *)(*(uint64_t (**)(uint64_t, double, double))(a6 + 16))(a6, *(double *)(v22 + 16 * v20), *(double *)(v22 + 16 * v20 + 8));
    }
LABEL_15:
    if (v15 + 1 == v14)
      v15 = 0;
    else
      ++v15;
    if (v15 == a3)
      return result;
  }
  __break(1u);
  return result;
}

void CG::Path::append_uneven_rounded_rect(CG::Path *this, const CGRect *a2, const CGSize *a3, float64x2_t *a4)
{
  __n128 v8;
  const CGAffineTransform *v9;
  float64x2_t v10;
  const CGAffineTransform *v11;
  double width;
  float64x2_t v13;
  const CGAffineTransform *v14;
  float64x2_t v15;
  const CGAffineTransform *v16;
  double height;
  float64x2_t v18;
  const CGAffineTransform *v19;
  float64x2_t v20;
  const CGAffineTransform *v21;
  double v22;
  float64x2_t v23;
  const CGAffineTransform *v24;
  float64x2_t v25;
  const CGAffineTransform *v26;
  double v27;
  float64x2_t v28;
  const CGAffineTransform *v29;
  CGPoint origin;
  float64x2_t v34;
  double v41;
  uint64_t v42;
  float64x2_t v44;
  CGFloat v45;
  double x;
  CGFloat v47;
  double y;
  CGPoint v49;
  CGPoint v50;

  if (*(_DWORD *)this)
  {
    CG::Path::reserve_space(this, 18, 10);
    x = a2->origin.x;
    v47 = a2->origin.x + a2->size.width;
    y = a2->origin.y;
    v45 = y + a2->size.height;
    v8.n128_f64[0] = v47;
    v8.n128_f64[1] = (v45 + y + a3[2].height - a3[1].height) * 0.5;
    CG::Path::move_to_point(this, a4, v9, v8);
    v10.f64[0] = v47;
    v10.f64[1] = v45 - a3[1].height;
    CG::Path::add_line_to_point(this, a4, v11, v10);
    width = a3[1].width;
    v13.f64[0] = v47;
    v13.f64[1] = v45 - a3[1].height * 0.44771525;
    v50.x = v47 - width * 0.44771525;
    v50.y = v45;
    v49.x = v47 - width;
    v49.y = v45;
    CG::Path::add_curve_to_point(this, (float64x2_t *)&v50, (float64x2_t *)&v49, a4, v14, v13);
    v15.f64[0] = x + a3->width;
    v15.f64[1] = v45;
    CG::Path::add_line_to_point(this, a4, v16, v15);
    height = a3->height;
    v18.f64[0] = x + a3->width * 0.44771525;
    v18.f64[1] = v45;
    v50.x = x;
    v50.y = v45 - height * 0.44771525;
    v49.x = x;
    v49.y = v45 - height;
    CG::Path::add_curve_to_point(this, (float64x2_t *)&v50, (float64x2_t *)&v49, a4, v19, v18);
    v20.f64[0] = x;
    v20.f64[1] = y + a3[3].height;
    CG::Path::add_line_to_point(this, a4, v21, v20);
    v22 = a3[3].width;
    v23.f64[0] = x;
    v23.f64[1] = y + a3[3].height * 0.44771525;
    v50.x = x + v22 * 0.44771525;
    v50.y = y;
    v49.x = x + v22;
    v49.y = y;
    CG::Path::add_curve_to_point(this, (float64x2_t *)&v50, (float64x2_t *)&v49, a4, v24, v23);
    v25.f64[0] = v47 - a3[2].width;
    v25.f64[1] = y;
    CG::Path::add_line_to_point(this, a4, v26, v25);
    v27 = a3[2].height;
    v28.f64[0] = v47 - a3[2].width * 0.44771525;
    v28.f64[1] = y;
    v50.x = v47;
    v50.y = y + v27 * 0.44771525;
    v49.x = v47;
    v49.y = y + v27;
    CG::Path::add_curve_to_point(this, (float64x2_t *)&v50, (float64x2_t *)&v49, a4, v29, v28);
    CG::Path::close_subpath(this);
  }
  else
  {
    *(_DWORD *)this = 3;
    origin = a2->origin;
    _D2 = a2->size.width;
    _D1 = a2->size.height;
    if (a4)
    {
      _Q5 = *a4;
      v34 = a4[1];
      _D16 = 0;
      __asm { FMLA            D4, D2, V5.D[1] }
      v41 = vmlad_n_f64(_D1 * v34.f64[0], 0.0, a4->f64[0]);
      __asm { FMLA            D1, D16, V5.D[1] }
      origin = (CGPoint)vaddq_f64(a4[2], vmlaq_n_f64(vmulq_laneq_f64(v34, (float64x2_t)origin, 1), *a4, origin.x));
      _D2 = vmlad_n_f64(0.0 * v34.f64[0], _D2, a4->f64[0]);
    }
    else
    {
      v41 = 0.0;
      _D4 = 0;
    }
    v42 = 0;
    *((double *)this + 1) = _D2;
    *((_QWORD *)this + 2) = _D4;
    *((double *)this + 3) = v41;
    *((double *)this + 4) = _D1;
    *(CGPoint *)((char *)this + 40) = origin;
    __asm { FMOV            V1.2D, #1.0 }
    v44 = vdivq_f64(_Q1, (float64x2_t)a2->size);
    do
    {
      *(float64x2_t *)((char *)this + v42 * 16 + 56) = vmulq_f64(v44, (float64x2_t)a3[v42]);
      ++v42;
    }
    while (v42 != 4);
  }
}

void CG::DisplayListResourceGradient::~DisplayListResourceGradient(CG::DisplayListResourceGradient *this)
{
  const void *v1;

  *(_QWORD *)this = &off_1E16294E8;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
  JUMPOUT(0x186DC23C4);
}

{
  const void *v1;

  *(_QWORD *)this = &off_1E16294E8;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

void CG::DisplayListEntryGradient::~DisplayListEntryGradient(CG::DisplayListEntryGradient *this)
{
  JUMPOUT(0x186DC23C4);
}

uint64_t CG::DisplayListRecorder::DrawGradient(CFArrayRef *a1, uint64_t a2, uint64_t a3, CGGradient *a4, int a5, int *a6)
{
  double *v11;
  double *v12;
  uint64_t result;
  __int128 v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD *EntryDrawingState;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t EntryPatternState;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  __int128 v44;
  const CGRect *v45;
  CGSize v46;
  __int128 v47;
  __int128 v48;
  uint64_t v53;
  int v54;
  uint64_t v55;
  const CGRect *v56;
  CGSize size;
  __int128 v58;
  __int128 v59;
  const CGRect *v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  CGSize v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  CGRect v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;

  v11 = (double *)CG::DisplayListRecorder::currentDisplayList(a1);
  if (!v11)
    return 1000;
  v12 = v11;
  _ZF = v11[5] == INFINITY || v11[6] == INFINITY;
  if (_ZF)
    return 0;
  result = 0;
  if (v12[7] != 0.0 && v12[8] != 0.0)
  {
    v15 = *(_OWORD *)(a3 + 40);
    v70 = *(_OWORD *)(a3 + 24);
    v71 = v15;
    v72 = *(_OWORD *)(a3 + 56);
    if (!*((_BYTE *)v12 + 73))
      goto LABEL_17;
    v69 = CGRectInfinite;
    CG::DisplayListRecorder::intersectRectWithClipConsideringStyle(&v69.origin.x, a2, *(double **)(a3 + 112), *(_QWORD *)(*(_QWORD *)(a3 + 120) + 16));
    v69.origin.x = v19;
    v69.origin.y = v16;
    v69.size.width = v17;
    v69.size.height = v18;
    if (v19 == INFINITY || v16 == INFINITY)
      return 0;
    result = 0;
    if (v17 != 0.0 && v18 != 0.0)
    {
LABEL_17:
      v21 = CG::DisplayList::gradientResourceForGradient((CG::DisplayList *)(v12 + 2), a4);
      if (v21)
      {
        v22 = v21;
        EntryDrawingState = (_QWORD *)CG::DisplayList::getEntryDrawingState((uint64_t *)v12 + 2, a3, a2);
        v31 = EntryDrawingState[1];
        if (v31)
        {
          v32 = EntryDrawingState;
          v33 = *(_DWORD *)(v31 + 8);
          v34 = EntryDrawingState[2];
          if (v34)
            v33 |= *(_DWORD *)(v34 + 8);
          v35 = v33 & 0x1000;
          v36 = EntryDrawingState[3];
          if (v36)
            v35 |= *(_DWORD *)(v36 + 8) & 0x3400;
          v37 = *(_QWORD *)(a3 + 120);
          if (*(double *)(v37 + 8) >= 1.0)
            v38 = *(_DWORD *)(v22 + 8) & 0x1000 | v35;
          else
            v38 = v35 | 0x1000;
          if ((v38 & 0x1000) == 0 && (((int)(*(_DWORD *)(v37 + 4) << 16) >> 24) - 3) < 0xFFFFFFFE)
            v38 |= 0x1000u;
          if ((v38 & 0x3000) != 0)
            *((_DWORD *)v12 + 20) |= v38 & 0x3000;
          if (!*((_BYTE *)v12 + 74))
            return 0;
          if ((v38 & 0x400) != 0)
            EntryPatternState = CG::DisplayList::getEntryPatternState((_QWORD *)v12 + 2, a3, a2);
          else
            EntryPatternState = 0;
          v40 = *a6;
          if (*a6 == 2)
          {
            v53 = operator new();
            v42 = v53;
            v54 = *((unsigned __int8 *)v12 + 73);
            v55 = *((_QWORD *)a6 + 3);
            *(_DWORD *)(v53 + 8) = (v38 << 8) | 6;
            _ZF = v54 == 0;
            v56 = &v69;
            if (_ZF)
              v56 = &CGRectInfinite;
            size = v56->size;
            *(CGPoint *)(v53 + 16) = v56->origin;
            *(CGSize *)(v53 + 32) = size;
            v58 = v71;
            *(_OWORD *)(v53 + 88) = v70;
            v59 = *(_OWORD *)(a6 + 2);
            *(_QWORD *)(v53 + 48) = v32;
            *(_QWORD *)(v53 + 56) = 0;
            *(_QWORD *)(v53 + 64) = 0;
            *(_QWORD *)(v53 + 72) = EntryPatternState;
            *(_QWORD *)v53 = &off_1E16292B8;
            *(_QWORD *)(v53 + 80) = v22;
            *(_OWORD *)(v53 + 104) = v58;
            *(_OWORD *)(v53 + 120) = v72;
            *(_QWORD *)(v53 + 136) = 3;
            *(_OWORD *)(v53 + 144) = 0u;
            *(_OWORD *)(v53 + 160) = 0u;
            *(_OWORD *)(v53 + 176) = 0u;
            *(_OWORD *)(v53 + 192) = 0u;
            __asm { FMOV            V2.2D, #-1.0 }
            *(_OWORD *)(v53 + 208) = _Q2;
            *(_OWORD *)(v53 + 224) = v59;
            goto LABEL_48;
          }
          if (v40 == 1)
          {
            v41 = operator new();
            v42 = v41;
            v61 = &CGRectInfinite;
            v62 = *((_QWORD *)a6 + 3);
            _ZF = *((_BYTE *)v12 + 73) == 0;
            v63 = *((_QWORD *)a6 + 6);
            *(_DWORD *)(v41 + 8) = (v38 << 8) | 6;
            if (!_ZF)
              v61 = &v69;
            v64 = *(_OWORD *)(a6 + 2);
            v65 = v61->size;
            *(CGPoint *)(v41 + 16) = v61->origin;
            *(CGSize *)(v41 + 32) = v65;
            *(_QWORD *)(v41 + 48) = v32;
            *(_QWORD *)(v41 + 56) = 0;
            *(_QWORD *)(v41 + 64) = 0;
            *(_QWORD *)(v41 + 72) = EntryPatternState;
            *(_QWORD *)v41 = &off_1E16292B8;
            *(_QWORD *)(v41 + 80) = v22;
            v66 = v70;
            v67 = v71;
            *(_OWORD *)(v41 + 120) = v72;
            *(_OWORD *)(v41 + 104) = v67;
            *(_OWORD *)(v41 + 88) = v66;
            *(_DWORD *)(v41 + 136) = 2;
            *(_DWORD *)(v41 + 140) = a5;
            *(_OWORD *)(v41 + 144) = 0u;
            *(_OWORD *)(v41 + 160) = 0u;
            v68 = *((_OWORD *)a6 + 2);
            *(_OWORD *)(v41 + 176) = v64;
            *(_OWORD *)(v41 + 192) = v68;
            *(_QWORD *)(v41 + 208) = v62;
            *(_QWORD *)(v41 + 216) = v63;
            goto LABEL_47;
          }
          if (!v40)
          {
            v41 = operator new();
            v42 = v41;
            v43 = *((unsigned __int8 *)v12 + 73);
            *(_DWORD *)(v41 + 8) = (v38 << 8) | 6;
            v44 = *(_OWORD *)(a6 + 2);
            _ZF = v43 == 0;
            v45 = &v69;
            if (_ZF)
              v45 = &CGRectInfinite;
            v46 = v45->size;
            *(CGPoint *)(v41 + 16) = v45->origin;
            *(CGSize *)(v41 + 32) = v46;
            v47 = v71;
            *(_OWORD *)(v41 + 88) = v70;
            v48 = *(_OWORD *)(a6 + 6);
            *(_QWORD *)(v41 + 48) = v32;
            *(_QWORD *)(v41 + 56) = 0;
            *(_QWORD *)(v41 + 64) = 0;
            *(_QWORD *)(v41 + 72) = EntryPatternState;
            *(_QWORD *)v41 = &off_1E16292B8;
            *(_QWORD *)(v41 + 80) = v22;
            *(_OWORD *)(v41 + 104) = v47;
            *(_OWORD *)(v41 + 120) = v72;
            *(_DWORD *)(v41 + 136) = 1;
            *(_DWORD *)(v41 + 140) = a5;
            *(_OWORD *)(v41 + 144) = v44;
            *(_OWORD *)(v41 + 160) = v48;
            *(_OWORD *)(v41 + 176) = 0u;
            *(_OWORD *)(v41 + 192) = 0u;
            __asm { FMOV            V0.2D, #-1.0 }
            *(_OWORD *)(v41 + 208) = _Q0;
LABEL_47:
            v55 = 0;
            *(_QWORD *)(v41 + 224) = 0;
            *(_QWORD *)(v41 + 232) = 0;
LABEL_48:
            *(_QWORD *)(v42 + 240) = v55;
            CG::DisplayList::appendEntry((int64x2_t *)v12 + 1, v42);
            return 0;
          }
          CGPostError((uint64_t)"Invalid GradientType argument", v24, v25, v26, v27, v28, v29, v30, SLOBYTE(v69.origin.x));
        }
      }
      return 1000;
    }
  }
  return result;
}

uint64_t CG::DisplayList::gradientResourceForGradient(CG::DisplayList *this, CGGradient *a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t **v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  char v37;

  if (!a2)
    return 0;
  ++*((_QWORD *)this + 89);
  v4 = (char *)this + 304;
  v5 = *((_QWORD *)this + 38);
  v6 = (char *)this + 304;
  if (!v5)
    goto LABEL_35;
  v6 = (char *)this + 304;
  do
  {
    v7 = *(_QWORD *)(v5 + 32);
    v8 = *(std::__shared_weak_count **)(v5 + 40);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = *(_QWORD *)(v7 + 16);
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    else
    {
      v11 = *(_QWORD *)(v7 + 16);
    }
    v13 = (uint64_t *)(v5 + 8);
    if (v11 >= (unint64_t)a2)
    {
      v13 = (uint64_t *)v5;
      v6 = (char *)v5;
    }
    v5 = *v13;
  }
  while (*v13);
  if (v4 == v6)
    goto LABEL_35;
  v14 = *((_QWORD *)v6 + 4);
  v15 = (std::__shared_weak_count *)*((_QWORD *)v6 + 5);
  v16 = (uint64_t *)(v6 + 32);
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  if (*(_QWORD *)(v14 + 16) >= (unint64_t)a2)
  {
    v21 = *((_QWORD *)v6 + 4);
    v22 = (std::__shared_weak_count *)*((_QWORD *)v6 + 5);
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
      v19 = *(_QWORD *)(v21 + 16) <= (unint64_t)a2;
      do
        v25 = __ldaxr(v23);
      while (__stlxr(v25 - 1, v23));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    else
    {
      v19 = *(_QWORD *)(v21 + 16) <= (unint64_t)a2;
    }
  }
  else
  {
    v19 = 0;
  }
  if (!v15)
    goto LABEL_34;
  v26 = (unint64_t *)&v15->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (!v19)
      goto LABEL_35;
  }
  else
  {
LABEL_34:
    if (!v19)
    {
LABEL_35:
      v28 = operator new();
      v29 = *(_QWORD *)(*(_QWORD *)this - 136);
      *(_DWORD *)(v28 + 8) = 218103808;
      *(_QWORD *)v28 = &off_1E16294E8;
      *(_QWORD *)(v28 + 16) = 0;
      *(_QWORD *)(v28 + 24) = 0;
      CFRetain(a2);
      *(_QWORD *)(v28 + 16) = a2;
      if (*((_QWORD *)a2 + 3))
        *(_QWORD *)(v28 + 24) = (*(uint64_t (**)(char *))(*(_QWORD *)((char *)this + v29) + 16))((char *)this + v29);
      v30 = (uint64_t *)operator new(0x30uLL);
      v36[0] = v30;
      v36[1] = v4;
      std::shared_ptr<CG::DisplayListResourceGradient>::shared_ptr[abi:se180100]<CG::DisplayListResourceGradient,void>(v30 + 4, v28);
      v31 = (uint64_t **)((char *)this + 296);
      v37 = 1;
      v32 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,CG::CompareResourceCFTypeRef,std::allocator<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>(v31, v6, &v35, &v34, v30 + 4);
      v33 = *v32;
      if (!*v32)
      {
        std::__tree<unsigned long>::__insert_node_at(v31, v35, v32, v30);
        v36[0] = 0;
        v33 = v30;
      }
      std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)v36);
      v16 = v33 + 4;
    }
  }
  return *v16;
}

void sub_184A747CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DC23C4](v1, 0x10E1C40E3985EEBLL);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::Crossings::evaluate_crossings(uint64_t this, uint64_t a2, float64x2_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  CGFloat *v9;
  uint64_t v10;

  if (!*(_BYTE *)this)
  {
    v8 = this;
    v9 = &a3->f64[1];
    v10 = -1;
    while ((*(_QWORD *)(v9 - 1) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
         && (*(_QWORD *)v9 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      v9 += 2;
      if (a2 == ++v10)
      {
        if (a2)
        {
          this = crossing_count(a3, a2, (_BYTE *)this, a4, a5, a6, a7, a8);
          *(_DWORD *)(v8 + 4) += this;
        }
        return this;
      }
    }
  }
  return this;
}

CGFloat `anonymous namespace'::standardize_uneven_corners(float64x2_t *this, const CGRect *a2, const CGSize *a3, CGSize *a4)
{
  uint64_t i;
  float64x2_t v5;
  double v6;
  double width;
  double height;
  CGFloat result;
  double v10;

  for (i = 0; i != 4; ++i)
  {
    v5 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(this[1], *(float64x2_t *)((char *)&a2->origin + i * 16)), *(int8x16_t *)((char *)&a2->origin + i * 16), (int8x16_t)this[1]);
    a3[i] = (const CGSize)vbicq_s8((int8x16_t)v5, (int8x16_t)vcltzq_f64(v5));
  }
  v6 = this[1].f64[0];
  if (a3->width + a3[1].width > v6)
  {
    a3[1].width = v6 - a3->width;
    v6 = this[1].f64[0];
  }
  width = a3[2].width;
  if (width + a3[3].width > v6)
    a3[3].width = v6 - width;
  height = a3[1].height;
  result = this[1].f64[1];
  if (height + a3[2].height > result)
  {
    a3[2].height = result - height;
    result = this[1].f64[1];
  }
  v10 = a3->height;
  if (v10 + a3[3].height > result)
  {
    result = result - v10;
    a3[3].height = result;
  }
  return result;
}

void RGBAf16_mark_pixelmask(_DWORD *a1, int *a2, uint64_t a3, __n128 a4, __n128 a5, __n128 _Q2, double _D3, float32x4_t a8, double _D5, float32x4_t _Q6, double _D7)
{
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  float16x4_t *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  float16x4_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  float16x4_t *v35;
  uint64_t v36;
  _BOOL8 v37;
  int v38;
  float16x4_t *v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  double v47;
  __int16 v55;
  float16x4_t *v56;
  uint64_t v57;
  float16x4_t *v58;
  uint64_t v59;
  float16x4_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  double v67;
  __int16 v71;
  float16x4_t *v72;
  uint64_t v73;
  float16x4_t *v74;
  uint64_t v75;
  float16x4_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  unsigned int v82;
  double v83;
  __int16 v87;
  float16x4_t *v88;
  uint64_t v89;
  float16x4_t *v90;
  uint64_t v91;
  float16x4_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  unsigned int v98;
  __n128 v99;
  float16x4_t *v102;
  uint64_t v103;
  float16x4_t *v104;
  uint64_t v105;
  float16x4_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  unsigned int v112;
  double v113;
  __int16 v117;
  float16x4_t *v118;
  uint64_t v119;
  float16x4_t *v120;
  uint64_t v121;
  float16x4_t *v122;
  uint64_t v123;
  _WORD *v124;
  int v125;
  unsigned int v126;
  float v138;
  float v142;
  float v147;
  _WORD *v157;
  float16x4_t *v159;
  uint64_t v160;
  float16x4_t *v161;
  uint64_t v162;
  float16x4_t *v163;
  uint64_t v164;
  _WORD *v165;
  int v166;
  unsigned int v167;
  float v173;
  _WORD *v180;
  float v182;
  float v186;
  float v191;
  float16x4_t *v201;
  uint64_t v202;
  float16x4_t *v203;
  uint64_t v204;
  float16x4_t *v205;
  uint64_t v206;
  int v207;
  float32x4_t v208;
  float32x4_t v209;
  float16x4_t *v210;
  uint64_t v211;
  float16x4_t *v212;
  uint64_t v213;
  float16x4_t *v214;
  uint64_t v215;
  int v216;
  unsigned int v217;
  float v220;
  float v225;
  float v237;
  float16x4_t *v247;
  uint64_t v248;
  float16x4_t *v249;
  uint64_t v250;
  float16x4_t *v251;
  uint64_t v252;
  int v253;
  unsigned int v254;
  const __int16 *v255;
  float16x4_t v256;
  float32x4_t v257;
  float32x4_t v260;
  float16x4_t *v261;
  uint64_t v262;
  float16x4_t *v263;
  uint64_t v264;
  float16x4_t *v265;
  uint64_t v266;
  int v267;
  unsigned int v268;
  float v273;
  float16x4_t *v283;
  uint64_t v284;
  float16x4_t *v285;
  uint64_t v286;
  float16x4_t *v287;
  uint64_t v288;
  int v289;
  float v290;
  float v291;
  float32x4_t v292;
  float32x4_t v293;
  float16x4_t *v294;
  uint64_t v295;
  float16x4_t *v296;
  uint64_t v297;
  float16x4_t *v298;
  uint64_t v299;
  int v300;
  float32x4_t v301;
  float32x4_t v302;
  float16x4_t *v303;
  uint64_t v304;
  float16x4_t *v305;
  uint64_t v306;
  float16x4_t *v307;
  uint64_t v308;
  int v309;
  unsigned int v310;
  float v311;
  float v332;
  float v341;
  float v343;
  float v346;
  float16x4_t *v349;
  uint64_t v350;
  float16x4_t *v351;
  uint64_t v352;
  float16x4_t *v353;
  uint64_t v354;
  int v355;
  float v356;
  float16x4_t *v386;
  uint64_t v387;
  float16x4_t *v388;
  uint64_t v389;
  float16x4_t *v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  int v395;
  unsigned int v396;
  double v397;
  __int16 v401;
  float16x4_t *v402;
  uint64_t v403;
  float16x4_t *v404;
  uint64_t v405;
  float16x4_t *v406;
  uint64_t v407;
  int v408;
  unsigned int v409;
  float v410;
  float16x4_t *v443;
  uint64_t v444;
  float16x4_t *v445;
  uint64_t v446;
  float16x4_t *v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  int v452;
  unsigned int v453;
  double v454;
  __int16 v458;
  float16x4_t *v459;
  uint64_t v460;
  float16x4_t *v461;
  uint64_t v462;
  float16x4_t *v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  int v468;
  unsigned int v469;
  double v470;
  __int16 v474;
  float16x4_t *v475;
  uint64_t v476;
  float16x4_t *v477;
  uint64_t v478;
  float16x4_t *v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  int v484;
  unsigned int v485;
  double v486;
  __int16 v490;
  float16x4_t *v491;
  uint64_t v492;
  float16x4_t *v493;
  uint64_t v494;
  float16x4_t *v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  int v500;
  unsigned int v501;
  double v502;
  __int16 v506;
  float16x4_t *v507;
  uint64_t v508;
  float16x4_t *v509;
  uint64_t v510;
  float16x4_t *v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  int v516;
  unsigned int v517;
  double v518;
  __int16 v522;
  float16x4_t *v523;
  uint64_t v524;
  float16x4_t *v525;
  uint64_t v526;
  float16x4_t *v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  int v532;
  unsigned int v533;
  double v534;
  __int16 v538;
  float16x4_t *v539;
  uint64_t v540;
  float16x4_t *v541;
  uint64_t v542;
  float16x4_t *v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  int v548;
  unsigned int v549;
  double v550;
  __int16 v554;
  float16x4_t *v555;
  uint64_t v556;
  float16x4_t *v557;
  uint64_t v558;
  float16x4_t *v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  int v564;
  unsigned int v565;
  double v566;
  __int16 v570;
  float16x4_t *v571;
  uint64_t v572;
  float16x4_t *v573;
  uint64_t v574;
  float16x4_t *v575;
  uint64_t v576;
  int v577;
  unsigned int v578;
  float v581;
  float32x4_t v582;
  float16x4_t *v583;
  uint64_t v584;
  float16x4_t *v585;
  uint64_t v586;
  float16x4_t *v587;
  uint64_t v588;
  BOOL v589;
  int v590;
  unsigned int v591;
  float16x4_t v592;
  float16x4_t *v593;
  uint64_t v594;
  float16x4_t *v595;
  uint64_t v596;
  float16x4_t *v597;
  uint64_t v598;
  uint64_t v599;
  int v600;
  int v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  int v616;
  unint64_t v617;
  unint64_t v618;
  uint64_t v619;
  uint64_t v620;
  float16x4_t *v621;
  float16x4_t *v622;
  float16x4_t *v623;
  float16x4_t *v624;
  float16x4_t *v625;
  float16x4_t *v626;
  float16x4_t *v627;
  float16x4_t *v628;
  float16x4_t *v629;
  float16x4_t *v630;
  float16x4_t *v631;
  float16x4_t *v632;
  float16x4_t *v633;
  float16x4_t *v634;
  float16x4_t *v635;
  int v636;
  int v637;

  v637 = a2[2];
  v13 = a2[7];
  v14 = *((_QWORD *)a2 + 5);
  v15 = *((_QWORD *)a2 + 6);
  v16 = *((_QWORD *)a2 + 11);
  v17 = *((_QWORD *)a2 + 12);
  v18 = *((_QWORD *)a2 + 17);
  v19 = *a2;
  v636 = a2[1];
  if (CGPreferencesCheck<CGImageMarkAllowTemplateMethodFP>(void)::onceToken != -1)
  {
    v599 = a3;
    dispatch_once(&CGPreferencesCheck<CGImageMarkAllowTemplateMethodFP>(void)::onceToken, &__block_literal_global_6_12441);
    a3 = v599;
  }
  v20 = v15 != 0;
  if (v18)
  {
    v21 = v636;
    v22 = v637;
    v23 = v13 >> 3;
    v24 = (float16x4_t *)(v14 + 8 * (a2[3] + (v13 >> 3) * a2[4]));
    v25 = a2[31];
    v26 = (char *)(v18 + a2[26] + a2[27] * (uint64_t)(int)v25);
    v27 = a2[14];
    v28 = a2[15];
    v29 = (unint64_t)a2[19] >> 3;
    if ((v19 & 0xFF00) != 0x100)
    {
      v33 = a2[16];
      v34 = v16 + 8 * v29 * a2[17];
      v32 = 1;
      v35 = (float16x4_t *)v16;
      v30 = (float16x4_t *)v16;
      v36 = a2[17];
      goto LABEL_15;
    }
    v30 = (float16x4_t *)(v16 + 8 * (v27 + v29 * v28));
    if (v29 != v23)
    {
      v32 = 1;
LABEL_14:
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v16 = -1;
      v33 = v29;
LABEL_15:
      v37 = v17 != 0;
      v38 = v32 * v636;
      if (v34)
      {
        v39 = &v30[v29 * ((int)v28 % (int)v36)];
        v35 = &v39[(int)v27 % (int)v33];
        v16 = (unint64_t)&v39[(int)v33];
        v30 = v35;
      }
      else
      {
        v29 -= v38;
      }
      v618 = v29;
      v619 = v25 - v38;
      v620 = v23 - v38;
      v617 = v34;
      switch((int)a3)
      {
        case 0:
          do
          {
            v40 = v636;
            do
            {
              v41 = *v26;
              if (*v26)
              {
                if (v41 == 255)
                  *v24 = 0;
                else
                  *v24 = vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(*v24), (float)((float)v41 * -0.0039216) + 1.0));
              }
              v26 += (int)v32;
              v24 += (int)v32;
              --v40;
            }
            while (v40);
            v26 += v619;
            v24 += v620;
            --v637;
          }
          while (v637);
          return;
        case 1:
          if (use_vImage_fp16_compositing(void)::predicate != -1)
          {
            v616 = v36;
            v600 = v33;
            v635 = v35;
            v601 = v32;
            dispatch_once(&use_vImage_fp16_compositing(void)::predicate, &__block_literal_global_19551);
            LODWORD(v32) = v601;
            v34 = v617;
            v29 = v618;
            v35 = v635;
            LODWORD(v33) = v600;
            LODWORD(v36) = v616;
          }
          if (use_vImage_fp16_compositing(void)::status)
          {
            vImageCGCompositePixelMask_ARGB16F();
          }
          else if (!v15 || v17)
          {
            do
            {
              v590 = v636 + 1;
              do
              {
                v591 = *v26;
                if (*v26)
                {
                  if (v591 == 255)
                    v592 = *v30;
                  else
                    v592 = vcvt_f16_f32(vmlaq_n_f32(vmulq_n_f32(vcvtq_f32_f16(*v24), 1.0 - (float)((float)v591 * 0.0039216)), vcvtq_f32_f16(*v30), (float)v591 * 0.0039216));
                  *v24 = v592;
                }
                v26 += (int)v32;
                v593 = &v30[(int)v32];
                if ((unint64_t)v593 >= v16)
                  v594 = -(uint64_t)(int)v33;
                else
                  v594 = 0;
                v30 = &v593[v594];
                --v590;
                v24 += (int)v32;
              }
              while (v590 > 1);
              v26 += v619;
              v24 += v620;
              v595 = &v35[v29];
              if ((unint64_t)v595 >= v34)
                v596 = -(uint64_t)(v29 * (int)v36);
              else
                v596 = 0;
              v597 = &v595[v596];
              v598 = v16 + 8 * v596 + 8 * v29;
              if (v34)
              {
                v16 = v598;
                v35 = v597;
                v30 = v597;
              }
              else
              {
                v30 += v29;
              }
              v589 = v637-- <= 1;
            }
            while (!v589);
          }
          else
          {
            do
            {
              v577 = v636 + 1;
              do
              {
                v578 = *v26;
                if (*v26)
                {
                  if (v578 == 255)
                  {
                    v24->i32[0] = v30->i32[0];
                    v24->i16[2] = v30->i16[2];
                    v24->i16[3] = 15360;
                  }
                  else
                  {
                    _H4 = v30->i16[2];
                    __asm { FCVT            S4, H4 }
                    v581 = (float)v578 * 0.0039216;
                    _Q6.i32[0] = v30->i32[0];
                    *(float32x2_t *)v582.f32 = vmul_n_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)_Q6.f32), v581);
                    v582.f32[2] = v581 * _S4;
                    v582.f32[3] = v581;
                    _Q6 = vmlaq_n_f32(v582, vcvtq_f32_f16(*v24), 1.0 - v581);
                    *v24 = vcvt_f16_f32(_Q6);
                  }
                }
                v26 += (int)v32;
                v583 = &v30[(int)v32];
                if ((unint64_t)v583 >= v16)
                  v584 = -(uint64_t)(int)v33;
                else
                  v584 = 0;
                v30 = &v583[v584];
                --v577;
                v24 += (int)v32;
              }
              while (v577 > 1);
              v26 += v619;
              v24 += v620;
              v585 = &v35[v29];
              if ((unint64_t)v585 >= v34)
                v586 = -(uint64_t)(v29 * (int)v36);
              else
                v586 = 0;
              v587 = &v585[v586];
              v588 = v16 + 8 * v586 + 8 * v29;
              if (v34)
              {
                v16 = v588;
                v35 = v587;
                v30 = v587;
              }
              else
              {
                v30 += v29;
              }
              v589 = v637-- <= 1;
            }
            while (!v589);
          }
          return;
        case 2:
          if (CGPreferencesCheck<CGImageMarkAllowTemplateMethodFP>(void)::result && a2[33] >= 2)
            composite_pixelmask<(CGCompositeOperation)2,_rgbaf16_t>(v24, v620, v30, v29, v35, v36, v33, v16, v34, v26, v619, v636, v637, v32, *a1);
          else
            composite_pixelmask_SOVER(v24, v620, (unint64_t)v30, v29, (unint64_t)v35, v36, v33, v16, a4.n128_f64[0], a5.n128_f64[0], (float16x4_t)_Q2.n128_u64[0], _D3, a8, v34, v26, v619, v636, v637, v32);
          return;
        case 3:
          if (CGPreferencesCheck<CGImageMarkAllowTemplateMethodFP>(void)::result && a2[33])
          {
            composite_pixelmask<(CGCompositeOperation)3,_rgbaf16_t>(v24, v620, (int8x8_t *)v30, v29, (int8x8_t *)v35, v36, v33, v16, v34, v26, v619, v636, v637, v32, v37, *a1);
          }
          else
          {
            do
            {
              v124 = (_WORD *)v24 + 3;
              v125 = v636;
              do
              {
                v126 = *v26;
                if (*v26)
                {
                  if (v126 == 255)
                  {
                    _H1 = v30->i16[0];
                    _H2 = *v124;
                    __asm
                    {
                      FCVT            S3, H1
                      FCVT            S1, H2
                    }
                    _S2 = _S3 * _S1;
                    __asm { FCVT            H2, S2 }
                    *(v124 - 3) = LOWORD(_S2);
                    LOWORD(_S2) = v30->i16[1];
                    __asm { FCVT            S2, H2 }
                    _S2 = _S1 * _S2;
                    __asm { FCVT            H2, S2 }
                    *(v124 - 2) = LOWORD(_S2);
                    LOWORD(_S2) = v30->i16[2];
                    __asm { FCVT            S2, H2 }
                    _S2 = _S1 * _S2;
                    __asm { FCVT            H2, S2 }
                    *(v124 - 1) = LOWORD(_S2);
                    if (v17)
                    {
                      _H2 = v30->i16[3];
                      __asm { FCVT            S2, H2 }
                    }
                    else
                    {
                      _S2 = 1.0;
                    }
                    v157 = (_WORD *)v24 + 3;
                    _S1 = _S2 * _S1;
                  }
                  else
                  {
                    v138 = (float)v126 * 0.0039216;
                    _H1 = *(v124 - 3);
                    __asm { FCVT            S5, H1 }
                    _S2 = 1.0;
                    v142 = 1.0 - v138;
                    _H3 = v30->i16[0];
                    __asm { FCVT            S6, H3 }
                    _H3 = *v124;
                    __asm { FCVT            S3, H3 }
                    v147 = v138 * _S3;
                    _S5 = (float)(v147 * _S6) + (float)(_S5 * v142);
                    __asm { FCVT            H5, S5 }
                    *(v124 - 3) = LOWORD(_S5);
                    LOWORD(_S5) = *(v124 - 2);
                    __asm { FCVT            S5, H5 }
                    LOWORD(_S6) = v30->i16[1];
                    __asm { FCVT            S6, H6 }
                    _S5 = (float)(v147 * _S6) + (float)(_S5 * v142);
                    __asm { FCVT            H5, S5 }
                    *(v124 - 2) = LOWORD(_S5);
                    LOWORD(_S5) = *(v124 - 1);
                    __asm { FCVT            S5, H5 }
                    LOWORD(_S6) = v30->i16[2];
                    __asm { FCVT            S6, H6 }
                    _S5 = (float)(v147 * _S6) + (float)(_S5 * v142);
                    __asm { FCVT            H5, S5 }
                    *(v124 - 1) = LOWORD(_S5);
                    if (v17)
                    {
                      _H2 = v30->i16[3];
                      __asm { FCVT            S2, H2 }
                    }
                    _S1 = (float)(v147 * _S2) + (float)(_S3 * v142);
                    v157 = v124;
                  }
                  __asm { FCVT            H1, S1 }
                  *v157 = _H1;
                }
                v26 += (int)v32;
                v24 += (int)v32;
                v159 = &v30[(int)v32];
                if ((unint64_t)v159 >= v16)
                  v160 = -(uint64_t)(int)v33;
                else
                  v160 = 0;
                v30 = &v159[v160];
                v124 += 4 * (int)v32;
                --v125;
              }
              while (v125);
              v26 += v619;
              v24 = (float16x4_t *)&v124[4 * v620 - 3];
              v161 = &v35[v29];
              if ((unint64_t)v161 >= v34)
                v162 = -(uint64_t)(v29 * (int)v36);
              else
                v162 = 0;
              v163 = &v161[v162];
              v164 = v16 + 8 * v162 + 8 * v29;
              if (v34)
              {
                v16 = v164;
                v35 = v163;
                v30 = v163;
              }
              else
              {
                v30 += v29;
              }
              --v637;
            }
            while (v637);
          }
          return;
        case 4:
          if (CGPreferencesCheck<CGImageMarkAllowTemplateMethodFP>(void)::result && a2[33])
          {
            composite_pixelmask<(CGCompositeOperation)4,_rgbaf16_t>(v24, v620, (int8x8_t *)v30, v29, (int8x8_t *)v35, v36, v33, v16, v34, v26, v619, v636, v637, v32, v37, *a1);
          }
          else
          {
            do
            {
              v165 = (_WORD *)v24 + 3;
              v166 = v636;
              do
              {
                v167 = *v26;
                if (*v26)
                {
                  if (v167 == 255)
                  {
                    _H1 = v30->i16[0];
                    __asm { FCVT            S3, H1 }
                    _H1 = *v165;
                    __asm { FCVT            S1, H1 }
                    _S2 = 1.0;
                    v173 = 1.0 - _S1;
                    _S3 = v173 * _S3;
                    __asm { FCVT            H3, S3 }
                    *(v165 - 3) = LOWORD(_S3);
                    LOWORD(_S3) = v30->i16[1];
                    __asm { FCVT            S3, H3 }
                    _S3 = v173 * _S3;
                    __asm { FCVT            H3, S3 }
                    *(v165 - 2) = LOWORD(_S3);
                    LOWORD(_S3) = v30->i16[2];
                    __asm { FCVT            S3, H3 }
                    _S3 = v173 * _S3;
                    __asm { FCVT            H3, S3 }
                    *(v165 - 1) = LOWORD(_S3);
                    if (v17)
                    {
                      _H2 = v30->i16[3];
                      __asm { FCVT            S2, H2 }
                    }
                    v180 = (_WORD *)v24 + 3;
                    _S1 = v173 * _S2;
                  }
                  else
                  {
                    v182 = (float)v167 * 0.0039216;
                    _H1 = *(v165 - 3);
                    __asm { FCVT            S5, H1 }
                    _S2 = 1.0;
                    v186 = 1.0 - v182;
                    _H3 = v30->i16[0];
                    __asm { FCVT            S6, H3 }
                    _H3 = *v165;
                    __asm { FCVT            S3, H3 }
                    v191 = v182 * (float)(1.0 - _S3);
                    _S5 = (float)(v191 * _S6) + (float)(_S5 * v186);
                    __asm { FCVT            H5, S5 }
                    *(v165 - 3) = LOWORD(_S5);
                    LOWORD(_S5) = *(v165 - 2);
                    __asm { FCVT            S5, H5 }
                    LOWORD(_S6) = v30->i16[1];
                    __asm { FCVT            S6, H6 }
                    _S5 = (float)(v191 * _S6) + (float)(_S5 * v186);
                    __asm { FCVT            H5, S5 }
                    *(v165 - 2) = LOWORD(_S5);
                    LOWORD(_S5) = *(v165 - 1);
                    __asm { FCVT            S5, H5 }
                    LOWORD(_S6) = v30->i16[2];
                    __asm { FCVT            S6, H6 }
                    _S5 = (float)(v191 * _S6) + (float)(_S5 * v186);
                    __asm { FCVT            H5, S5 }
                    *(v165 - 1) = LOWORD(_S5);
                    if (v17)
                    {
                      _H2 = v30->i16[3];
                      __asm { FCVT            S2, H2 }
                    }
                    _S1 = (float)(v191 * _S2) + (float)(_S3 * v186);
                    v180 = v165;
                  }
                  __asm { FCVT            H1, S1 }
                  *v180 = _H1;
                }
                v26 += (int)v32;
                v24 += (int)v32;
                v201 = &v30[(int)v32];
                if ((unint64_t)v201 >= v16)
                  v202 = -(uint64_t)(int)v33;
                else
                  v202 = 0;
                v30 = &v201[v202];
                v165 += 4 * (int)v32;
                --v166;
              }
              while (v166);
              v26 += v619;
              v24 = (float16x4_t *)&v165[4 * v620 - 3];
              v203 = &v35[v29];
              if ((unint64_t)v203 >= v34)
                v204 = -(uint64_t)(v29 * (int)v36);
              else
                v204 = 0;
              v205 = &v203[v204];
              v206 = v16 + 8 * v204 + 8 * v29;
              if (v34)
              {
                v16 = v206;
                v35 = v205;
                v30 = v205;
              }
              else
              {
                v30 += v29;
              }
              --v637;
            }
            while (v637);
          }
          return;
        case 5:
          if (CGPreferencesCheck<CGImageMarkAllowTemplateMethodFP>(void)::result && a2[33])
          {
            composite_pixelmask<(CGCompositeOperation)5,_rgbaf16_t>(v24, v620, v30, v29, v35, v36, v33, v16, v34, v26, v619, v636, v637, v32, *a1);
          }
          else
          {
            do
            {
              v207 = v636;
              do
              {
                if (*v26)
                {
                  v208 = vcvtq_f32_f16(vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(*v30), (float)*v26 * 0.0039216)));
                  v209 = vcvtq_f32_f16(*v24);
                  *v24 = vcvt_f16_f32(vmlaq_laneq_f32(vmulq_n_f32(v209, 1.0 - v208.f32[3]), v208, v209, 3));
                }
                v26 += (int)v32;
                v210 = &v30[(int)v32];
                if ((unint64_t)v210 >= v16)
                  v211 = -(uint64_t)(int)v33;
                else
                  v211 = 0;
                v30 = &v210[v211];
                v24 += (int)v32;
                --v207;
              }
              while (v207);
              v26 += v619;
              v24 += v620;
              v212 = &v35[v29];
              if ((unint64_t)v212 >= v34)
                v213 = -(uint64_t)(v29 * (int)v36);
              else
                v213 = 0;
              v214 = &v212[v213];
              v215 = v16 + 8 * v213 + 8 * v29;
              if (v34)
              {
                v16 = v215;
                v35 = v214;
                v30 = v214;
              }
              else
              {
                v30 += v29;
              }
              --v637;
            }
            while (v637);
          }
          return;
        case 6:
          if (CGPreferencesCheck<CGImageMarkAllowTemplateMethodFP>(void)::result && a2[33])
          {
            composite_pixelmask<(CGCompositeOperation)6,_rgbaf16_t>(v24, v620, (int8x8_t *)v30, v29, (int8x8_t *)v35, v36, v33, v16, v34, v26, v619, v636, v637, v32, v37, *a1);
            return;
          }
          while (1)
          {
            v216 = v636;
            do
            {
              v217 = *v26;
              if (!*v26)
                goto LABEL_284;
              _H2 = v24->i16[3];
              __asm { FCVT            S2, H2 }
              v220 = 1.0 - _S2;
              if ((float)(1.0 - _S2) >= 1.0)
              {
                _H2 = v30->i16[0];
                __asm { FCVT            S3, H2 }
                v237 = (float)v217 * 0.0039216;
                _S3 = v237 * _S3;
                __asm { FCVT            H3, S3 }
                v24->i16[0] = LOWORD(_S3);
                LOWORD(_S3) = v30->i16[1];
                __asm { FCVT            S3, H3 }
                _S3 = v237 * _S3;
                __asm { FCVT            H3, S3 }
                v24->i16[1] = LOWORD(_S3);
                LOWORD(_S3) = v30->i16[2];
                __asm { FCVT            S3, H3 }
                _S3 = v237 * _S3;
                __asm { FCVT            H3, S3 }
                v24->i16[2] = LOWORD(_S3);
                if (v17)
                {
                  _H3 = v30->i16[3];
                  __asm { FCVT            S3, H3 }
                }
                else
                {
                  _S3 = 1.0;
                }
                _S2 = v237 * _S3;
              }
              else
              {
                if (v220 <= 0.0)
                  goto LABEL_284;
                _H4 = v24->i16[0];
                __asm { FCVT            S4, H4 }
                _H5 = v30->i16[0];
                __asm { FCVT            S5, H5 }
                v225 = (float)((float)v217 * 0.0039216) * v220;
                _S4 = _S4 + (float)(_S5 * v225);
                __asm { FCVT            H4, S4 }
                v24->i16[0] = LOWORD(_S4);
                LOWORD(_S4) = v24->i16[1];
                __asm { FCVT            S4, H4 }
                LOWORD(_S5) = v30->i16[1];
                __asm { FCVT            S5, H5 }
                _S4 = _S4 + (float)(_S5 * v225);
                __asm { FCVT            H4, S4 }
                v24->i16[1] = LOWORD(_S4);
                LOWORD(_S4) = v24->i16[2];
                __asm { FCVT            S4, H4 }
                LOWORD(_S5) = v30->i16[2];
                __asm { FCVT            S5, H5 }
                _S4 = _S4 + (float)(_S5 * v225);
                __asm { FCVT            H4, S4 }
                v24->i16[2] = LOWORD(_S4);
                if (v17)
                {
                  _H4 = v30->i16[3];
                  __asm { FCVT            S4, H4 }
                }
                else
                {
                  _S4 = 1.0;
                }
                _S2 = _S2 + (float)(_S4 * v225);
              }
              __asm { FCVT            H2, S2 }
              v24->i16[3] = _H2;
LABEL_284:
              v26 += (int)v32;
              v247 = &v30[(int)v32];
              if ((unint64_t)v247 >= v16)
                v248 = -(uint64_t)(int)v33;
              else
                v248 = 0;
              v30 = &v247[v248];
              v24 += (int)v32;
              --v216;
            }
            while (v216);
            v26 += v619;
            v24 += v620;
            v249 = &v35[v29];
            if ((unint64_t)v249 >= v34)
              v250 = -(uint64_t)(v29 * (int)v36);
            else
              v250 = 0;
            v251 = &v249[v250];
            v252 = v16 + 8 * v250 + 8 * v29;
            if (v34)
            {
              v16 = v252;
              v35 = v251;
              v30 = v251;
            }
            else
            {
              v30 += v29;
            }
            if (!--v637)
              return;
          }
        case 7:
          if (CGPreferencesCheck<CGImageMarkAllowTemplateMethodFP>(void)::result && a2[33])
          {
            composite_pixelmask<(CGCompositeOperation)7,_rgbaf16_t>(v24, v620, v30, v29, v35, v36, v33, v16, v34, v26, v619, v636, v637, v32, *a1);
          }
          else
          {
            do
            {
              v253 = v636;
              do
              {
                v254 = *v26;
                if (*v26)
                {
                  if (v254 == 255)
                  {
                    v255 = (const __int16 *)v30 + 3;
                    v256 = (float16x4_t)vld1_dup_s16(v255);
                    v257 = vmulq_f32(vcvtq_f32_f16(v256), vcvtq_f32_f16(*v24));
                  }
                  else
                  {
                    _H3 = v30->i16[3];
                    __asm { FCVT            S3, H3 }
                    v260 = vcvtq_f32_f16(*v24);
                    v257 = vmlaq_n_f32(vmulq_n_f32(v260, 1.0 - (float)((float)v254 * 0.0039216)), v260, (float)((float)v254 * 0.0039216) * _S3);
                  }
                  *v24 = vcvt_f16_f32(v257);
                }
                v26 += (int)v32;
                v261 = &v30[(int)v32];
                if ((unint64_t)v261 >= v16)
                  v262 = -(uint64_t)(int)v33;
                else
                  v262 = 0;
                v30 = &v261[v262];
                v24 += (int)v32;
                --v253;
              }
              while (v253);
              v26 += v619;
              v24 += v620;
              v263 = &v35[v29];
              if ((unint64_t)v263 >= v34)
                v264 = -(uint64_t)(v29 * (int)v36);
              else
                v264 = 0;
              v265 = &v263[v264];
              v266 = v16 + 8 * v264 + 8 * v29;
              if (v34)
              {
                v16 = v266;
                v35 = v265;
                v30 = v265;
              }
              else
              {
                v30 += v29;
              }
              --v637;
            }
            while (v637);
          }
          return;
        case 8:
          if (CGPreferencesCheck<CGImageMarkAllowTemplateMethodFP>(void)::result && a2[33])
          {
            composite_pixelmask<(CGCompositeOperation)8,_rgbaf16_t>(v24, v620, v30, v29, v35, v36, v33, v16, v34, v26, v619, v636, v637, v32, *a1);
          }
          else
          {
            do
            {
              v267 = v636;
              do
              {
                v268 = *v26;
                if (*v26)
                {
                  _H2 = v24->i16[0];
                  if (v268 == 255)
                  {
                    __asm { FCVT            S3, H2 }
                    _H2 = v30->i16[3];
                    __asm { FCVT            S2, H2 }
                    v273 = 1.0 - _S2;
                  }
                  else
                  {
                    __asm { FCVT            S3, H2 }
                    _H2 = v30->i16[3];
                    __asm { FCVT            S2, H2 }
                    v273 = (float)((float)((float)v268 * -0.0039216) * _S2) + 1.0;
                  }
                  _S3 = v273 * _S3;
                  __asm { FCVT            H3, S3 }
                  v24->i16[0] = LOWORD(_S3);
                  LOWORD(_S3) = v24->i16[1];
                  __asm { FCVT            S3, H3 }
                  _S3 = v273 * _S3;
                  __asm { FCVT            H3, S3 }
                  v24->i16[1] = LOWORD(_S3);
                  LOWORD(_S3) = v24->i16[2];
                  __asm { FCVT            S3, H3 }
                  _S3 = v273 * _S3;
                  __asm { FCVT            H3, S3 }
                  v24->i16[2] = LOWORD(_S3);
                  LOWORD(_S3) = v24->i16[3];
                  __asm { FCVT            S3, H3 }
                  _S2 = v273 * _S3;
                  __asm { FCVT            H2, S2 }
                  v24->i16[3] = LOWORD(_S2);
                }
                v26 += (int)v32;
                v283 = &v30[(int)v32];
                if ((unint64_t)v283 >= v16)
                  v284 = -(uint64_t)(int)v33;
                else
                  v284 = 0;
                v30 = &v283[v284];
                v24 += (int)v32;
                --v267;
              }
              while (v267);
              v26 += v619;
              v24 += v620;
              v285 = &v35[v29];
              if ((unint64_t)v285 >= v34)
                v286 = -(uint64_t)(v29 * (int)v36);
              else
                v286 = 0;
              v287 = &v285[v286];
              v288 = v16 + 8 * v286 + 8 * v29;
              if (v34)
              {
                v16 = v288;
                v35 = v287;
                v30 = v287;
              }
              else
              {
                v30 += v29;
              }
              --v637;
            }
            while (v637);
          }
          return;
        case 9:
          if (CGPreferencesCheck<CGImageMarkAllowTemplateMethodFP>(void)::result && a2[33])
          {
            composite_pixelmask<(CGCompositeOperation)9,_rgbaf16_t>(v24, v620, v30, v29, v35, v36, v33, v16, v34, v26, v619, v636, v637, v32, *a1);
          }
          else
          {
            do
            {
              v289 = v636;
              do
              {
                if (*v26)
                {
                  v290 = (float)*v26 * 0.0039216;
                  v291 = 1.0 - v290;
                  v292 = vcvtq_f32_f16(*v24);
                  v293 = vcvtq_f32_f16(vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(*v30), v290)));
                  *v24 = vcvt_f16_f32(vmlaq_n_f32(vmulq_n_f32(v292, v291 + v293.f32[3]), v293, 1.0 - v292.f32[3]));
                }
                v26 += (int)v32;
                v294 = &v30[(int)v32];
                if ((unint64_t)v294 >= v16)
                  v295 = -(uint64_t)(int)v33;
                else
                  v295 = 0;
                v30 = &v294[v295];
                v24 += (int)v32;
                --v289;
              }
              while (v289);
              v26 += v619;
              v24 += v620;
              v296 = &v35[v29];
              if ((unint64_t)v296 >= v34)
                v297 = -(uint64_t)(v29 * (int)v36);
              else
                v297 = 0;
              v298 = &v296[v297];
              v299 = v16 + 8 * v297 + 8 * v29;
              if (v34)
              {
                v16 = v299;
                v35 = v298;
                v30 = v298;
              }
              else
              {
                v30 += v29;
              }
              --v637;
            }
            while (v637);
          }
          return;
        case 10:
          if (CGPreferencesCheck<CGImageMarkAllowTemplateMethodFP>(void)::result && a2[33])
          {
            composite_pixelmask<(CGCompositeOperation)10,_rgbaf16_t>(v24, v620, v30, v29, v35, v36, v33, v16, v34, v26, v619, v636, v637, v32, *a1);
          }
          else
          {
            do
            {
              v300 = v636;
              do
              {
                if (*v26)
                {
                  v301 = vcvtq_f32_f16(*v24);
                  v302 = vcvtq_f32_f16(vcvt_f16_f32(vmulq_n_f32(vcvtq_f32_f16(*v30), (float)*v26 * 0.0039216)));
                  *v24 = vcvt_f16_f32(vmlaq_n_f32(vmulq_n_f32(v301, 1.0 - v302.f32[3]), v302, 1.0 - v301.f32[3]));
                }
                v26 += (int)v32;
                v303 = &v30[(int)v32];
                if ((unint64_t)v303 >= v16)
                  v304 = -(uint64_t)(int)v33;
                else
                  v304 = 0;
                v30 = &v303[v304];
                v24 += (int)v32;
                --v300;
              }
              while (v300);
              v26 += v619;
              v24 += v620;
              v305 = &v35[v29];
              if ((unint64_t)v305 >= v34)
                v306 = -(uint64_t)(v29 * (int)v36);
              else
                v306 = 0;
              v307 = &v305[v306];
              v308 = v16 + 8 * v306 + 8 * v29;
              if (v34)
              {
                v16 = v308;
                v35 = v307;
                v30 = v307;
              }
              else
              {
                v30 += v29;
              }
              --v637;
            }
            while (v637);
          }
          return;
        case 11:
          if (CGPreferencesCheck<CGImageMarkAllowTemplateMethodFP>(void)::result && a2[33])
          {
            composite_pixelmask<(CGCompositeOperation)11,_rgbaf16_t>((int8x8_t *)v24, v620, (int8x8_t *)v30, v29, (int8x8_t *)v35, v36, v33, v16, v34, v26, v619, v636, v637, v32, v20, v37, *a1);
          }
          else
          {
            do
            {
              v309 = v636;
              do
              {
                v310 = *v26;
                if (*v26)
                {
                  v311 = (float)v310 * 0.0039216;
                  _H2 = v30->i16[3];
                  __asm { FCVT            S2, H2 }
                  _S2 = v311 * _S2;
                  __asm { FCVT            H2, S2 }
                  if (v15)
                  {
                    _H3 = v24->i16[3];
                    __asm
                    {
                      FCVT            S6, H3
                      FCVT            S2, H2
                    }
                    if (!v17)
                      _S2 = (float)v310 * 0.0039216;
                  }
                  else
                  {
                    __asm { FCVT            S2, H2 }
                    if (!v17)
                      _S2 = (float)v310 * 0.0039216;
                    _S6 = 1.0;
                  }
                  _S3 = _S2 + _S6;
                  _S4 = 1.0;
                  if ((float)(_S2 + _S6) > 1.0)
                    _S3 = 1.0;
                  _S5 = 1.0;
                  if (v15)
                  {
                    _H5 = v24->i16[3];
                    __asm { FCVT            S5, H5 }
                  }
                  _H7 = v30->i16[0];
                  __asm { FCVT            S7, H7 }
                  _S7 = v311 * _S7;
                  __asm { FCVT            H17, S7 }
                  _H16 = v30->i16[1];
                  _H7 = v30->i16[2];
                  _H18 = v24->i16[0];
                  __asm
                  {
                    FCVT            S18, H18
                    FCVT            S17, H17
                  }
                  v332 = (float)(_S2 - _S17) + (float)(_S6 - _S18);
                  _H6 = v24->i16[1];
                  _S17 = _S3 - v332;
                  __asm { FCVT            H17, S17 }
                  v24->i16[0] = LOWORD(_S17);
                  if (v15)
                  {
                    _H4 = v24->i16[3];
                    __asm { FCVT            S4, H4 }
                  }
                  __asm { FCVT            S16, H16 }
                  _S16 = v311 * _S16;
                  __asm
                  {
                    FCVT            H16, S16
                    FCVT            S7, H7
                  }
                  _S1 = v311 * _S7;
                  __asm
                  {
                    FCVT            H1, S1
                    FCVT            S6, H6
                  }
                  v341 = _S5 - _S6;
                  __asm { FCVT            S6, H16 }
                  v343 = (float)(_S2 - _S6) + v341;
                  LOWORD(_S6) = v24->i16[2];
                  __asm
                  {
                    FCVT            S6, H6
                    FCVT            S1, H1
                  }
                  v346 = (float)(_S2 - _S1) + (float)(_S4 - _S6);
                  _S2 = _S3 - v343;
                  __asm { FCVT            H2, S2 }
                  v24->i16[1] = LOWORD(_S2);
                  __asm { FCVT            H2, S3 }
                  v24->i16[3] = LOWORD(_S2);
                  _S1 = _S3 - v346;
                  __asm { FCVT            H1, S1 }
                  v24->i16[2] = LOWORD(_S1);
                }
                v26 += (int)v32;
                v349 = &v30[(int)v32];
                if ((unint64_t)v349 >= v16)
                  v350 = -(uint64_t)(int)v33;
                else
                  v350 = 0;
                v30 = &v349[v350];
                v24 += (int)v32;
                --v309;
              }
              while (v309);
              v26 += v619;
              v24 += v620;
              v351 = &v35[v29];
              if ((unint64_t)v351 >= v34)
                v352 = -(uint64_t)(v29 * (int)v36);
              else
                v352 = 0;
              v353 = &v351[v352];
              v354 = v16 + 8 * v352 + 8 * v29;
              if (v34)
              {
                v16 = v354;
                v35 = v353;
                v30 = v353;
              }
              else
              {
                v30 += v29;
              }
              --v637;
            }
            while (v637);
          }
          return;
        case 12:
          if (CGPreferencesCheck<CGImageMarkAllowTemplateMethodFP>(void)::result && a2[33])
          {
            composite_pixelmask<(CGCompositeOperation)12,_rgbaf16_t>(v24, v620, (int8x8_t *)v30, v29, (int8x8_t *)v35, v36, v33, v16, v34, v26, v619, v636, v637, v32, v37, *a1);
          }
          else
          {
            do
            {
              v355 = v636;
              do
              {
                if (*v26)
                {
                  v356 = (float)*v26 * 0.0039216;
                  _H3 = v30->i16[0];
                  __asm { FCVT            S3, H3 }
                  _S3 = v356 * _S3;
                  __asm { FCVT            H3, S3 }
                  _H4 = v30->i16[1];
                  __asm { FCVT            S4, H4 }
                  _S4 = v356 * _S4;
                  __asm { FCVT            H4, S4 }
                  _H5 = v30->i16[2];
                  __asm { FCVT            S5, H5 }
                  _S5 = v356 * _S5;
                  __asm { FCVT            H5, S5 }
                  _H6 = v30->i16[3];
                  __asm { FCVT            S6, H6 }
                  _S6 = v356 * _S6;
                  __asm { FCVT            H6, S6 }
                  _H7 = v24->i16[0];
                  _H16 = v24->i16[1];
                  __asm
                  {
                    FCVT            S3, H3
                    FCVT            S7, H7
                  }
                  _S3 = _S7 + _S3;
                  __asm { FCVT            H3, S3 }
                  v24->i16[0] = LOWORD(_S3);
                  __asm
                  {
                    FCVT            S3, H4
                    FCVT            S4, H16
                  }
                  _S3 = _S4 + _S3;
                  __asm { FCVT            H3, S3 }
                  v24->i16[1] = LOWORD(_S3);
                  LOWORD(_S3) = v24->i16[3];
                  __asm
                  {
                    FCVT            S3, H3
                    FCVT            S4, H6
                  }
                  if (v17)
                    v356 = _S4;
                  _S2 = v356 + _S3;
                  _H3 = v24->i16[2];
                  if (_S2 > 1.0)
                    _S2 = 1.0;
                  __asm
                  {
                    FCVT            S4, H5
                    FCVT            S3, H3
                  }
                  _S3 = _S3 + _S4;
                  __asm { FCVT            H3, S3 }
                  v24->i16[2] = LOWORD(_S3);
                  __asm { FCVT            H2, S2 }
                  v24->i16[3] = _H2;
                }
                v26 += (int)v32;
                v386 = &v30[(int)v32];
                if ((unint64_t)v386 >= v16)
                  v387 = -(uint64_t)(int)v33;
                else
                  v387 = 0;
                v30 = &v386[v387];
                v24 += (int)v32;
                --v355;
              }
              while (v355);
              v26 += v619;
              v24 += v620;
              v388 = &v35[v29];
              if ((unint64_t)v388 >= v34)
                v389 = -(uint64_t)(v29 * (int)v36);
              else
                v389 = 0;
              v390 = &v388[v389];
              v391 = v16 + 8 * v389 + 8 * v29;
              if (v34)
              {
                v16 = v391;
                v35 = v390;
                v30 = v390;
              }
              else
              {
                v30 += v29;
              }
              --v637;
            }
            while (v637);
          }
          return;
        case 13:
          if (CGPreferencesCheck<CGImageMarkAllowTemplateMethodFP>(void)::result && a2[33])
          {
            composite_pixelmask<(CGCompositeOperation)13,_rgbaf16_t>((int8x8_t *)v24, v620, (int8x8_t *)v30, v29, (int8x8_t *)v35, v36, v33, v16, v34, v26, v619, v636, v637, v32, v20, v37, *a1);
            return;
          }
          v392 = (int)v32;
          v393 = -(uint64_t)(int)v33;
          v607 = -(uint64_t)(v29 * (int)v36);
          v394 = 8 * (int)v32;
          while (1)
          {
            v626 = v35;
            v395 = v636;
            do
            {
              v396 = *v26;
              if (*v26)
              {
                a4.n128_f32[0] = (float)v396 * 0.0039216;
                _Q1 = (__n128)vmulq_n_f32(vcvtq_f32_f16(*v30), a4.n128_f32[0]);
                v397 = COERCE_DOUBLE(vcvt_f16_f32((float32x4_t)_Q1));
                LOWORD(_D7) = HIWORD(v397);
                __asm { FCVT            S1, H7 }
                _Q6.f32[0] = v17 ? _Q1.n128_f32[0] : (float)v396 * 0.0039216;
                if (_Q6.f32[0] > 0.0)
                {
                  if (v15)
                  {
                    LOWORD(_D3) = v24->i16[3];
                    __asm { FCVT            S4, H3 }
                    if (_S4 <= 0.0)
                    {
                      v24->i32[0] = LODWORD(v397);
                      v24->i16[2] = WORD2(v397);
                      __asm { FCVT            H0, S6 }
                      v24->i16[3] = _H0;
                      goto LABEL_421;
                    }
                  }
                  else
                  {
                    LOWORD(_D3) = v24->i16[3];
                    _S4 = 1.0;
                  }
                  a4.n128_u16[0] = v24->i16[0];
                  _Q1.n128_u16[0] = v24->u16[1];
                  _Q2.n128_u16[0] = v24->u16[2];
                  v24->i16[0] = PDAmultiplyPDA(a4, _Q1, _Q2, _D3, _S4, v397, *(double *)_Q6.i64, _D7, v21, v22, a3, v32, v37, v36, v33, (uint64_t)v35, SLOWORD(v397), SWORD1(v397), SWORD2(v397),
                                  _Q6.f32[0]);
                  v24->i16[1] = v401;
                  v24->i16[2] = _Q2.n128_u16[0];
                  v24->i16[3] = LOWORD(_D3);
                }
              }
LABEL_421:
              v26 += v392;
              v402 = &v30[v392];
              if ((unint64_t)v402 >= v16)
                v403 = v393;
              else
                v403 = 0;
              v30 = &v402[v403];
              v24 = (float16x4_t *)((char *)v24 + v394);
              --v395;
            }
            while (v395);
            v26 += v619;
            v35 = v626;
            v24 += v620;
            v404 = &v626[v618];
            v405 = v607;
            if ((unint64_t)v404 < v617)
              v405 = 0;
            v406 = &v404[v405];
            v407 = v16 + 8 * v405 + 8 * v618;
            if (v617)
            {
              v16 = v407;
              v35 = v406;
              v30 = v406;
            }
            else
            {
              v30 += v618;
            }
            if (!--v637)
              return;
          }
        case 14:
          if (CGPreferencesCheck<CGImageMarkAllowTemplateMethodFP>(void)::result && a2[33])
          {
            composite_pixelmask<(CGCompositeOperation)14,_rgbaf16_t>((int8x8_t *)v24, v620, (int8x8_t *)v30, v29, (int8x8_t *)v35, v36, v33, v16, v34, v26, v619, v636, v637, v32, v20, v37, *a1);
            return;
          }
          while (1)
          {
            v408 = v636;
            do
            {
              v409 = *v26;
              if (*v26)
              {
                v410 = (float)v409 * 0.0039216;
                _H2 = v30->i16[3];
                __asm { FCVT            S2, H2 }
                _S2 = v410 * _S2;
                __asm
                {
                  FCVT            H2, S2
                  FCVT            S2, H2
                }
                if (!v17)
                  _S2 = (float)v409 * 0.0039216;
                if (_S2 > 0.0)
                {
                  _H3 = v30->i16[0];
                  __asm { FCVT            S3, H3 }
                  _S3 = v410 * _S3;
                  __asm { FCVT            H3, S3 }
                  _H4 = v30->i16[1];
                  __asm { FCVT            S4, H4 }
                  _S4 = v410 * _S4;
                  __asm { FCVT            H4, S4 }
                  _H6 = v30->i16[2];
                  __asm { FCVT            S6, H6 }
                  _S5 = v410 * _S6;
                  __asm { FCVT            H5, S5 }
                  if (v15)
                  {
                    _H6 = v24->i16[3];
                    __asm { FCVT            S6, H6 }
                    if (_S6 <= 0.0)
                    {
                      v24->i16[0] = _H3;
                      v24->i16[1] = _H4;
                      v24->i16[2] = _H5;
                      __asm { FCVT            H2, S2 }
LABEL_442:
                      v24->i16[3] = _H2;
                      goto LABEL_443;
                    }
                  }
                  else
                  {
                    _S6 = 1.0;
                  }
                  _H7 = v24->i16[0];
                  _H16 = v24->i16[1];
                  _H17 = v24->i16[2];
                  __asm
                  {
                    FCVT            S7, H7
                    FCVT            S16, H16
                    FCVT            S17, H17
                    FCVT            S3, H3
                    FCVT            S4, H4
                    FCVT            S5, H5
                  }
                  _S3 = _S7 + (float)(_S3 * (float)(1.0 - _S7));
                  _S4 = _S16 + (float)(_S4 * (float)(1.0 - _S16));
                  _S5 = _S17 + (float)(_S5 * (float)(1.0 - _S17));
                  _S2 = (float)(_S2 + _S6) - (float)(_S6 * _S2);
                  __asm
                  {
                    FCVT            H3, S3
                    FCVT            H4, S4
                    FCVT            H5, S5
                  }
                  v24->i16[0] = LOWORD(_S3);
                  v24->i16[1] = LOWORD(_S4);
                  __asm { FCVT            H2, S2 }
                  v24->i16[2] = LOWORD(_S5);
                  goto LABEL_442;
                }
              }
LABEL_443:
              v26 += (int)v32;
              v443 = &v30[(int)v32];
              if ((unint64_t)v443 >= v16)
                v444 = -(uint64_t)(int)v33;
              else
                v444 = 0;
              v30 = &v443[v444];
              v24 += (int)v32;
              --v408;
            }
            while (v408);
            v26 += v619;
            v24 += v620;
            v445 = &v35[v29];
            if ((unint64_t)v445 >= v34)
              v446 = -(uint64_t)(v29 * (int)v36);
            else
              v446 = 0;
            v447 = &v445[v446];
            v448 = v16 + 8 * v446 + 8 * v29;
            if (v34)
            {
              v16 = v448;
              v35 = v447;
              v30 = v447;
            }
            else
            {
              v30 += v29;
            }
            if (!--v637)
              return;
          }
        case 15:
          if (CGPreferencesCheck<CGImageMarkAllowTemplateMethodFP>(void)::result && a2[33])
          {
            composite_pixelmask<(CGCompositeOperation)15,_rgbaf16_t>((int8x8_t *)v24, v620, (int8x8_t *)v30, v29, (int8x8_t *)v35, v36, v33, v16, v34, v26, v619, v636, v637, v32, v20, v37, *a1);
            return;
          }
          v449 = (int)v32;
          v450 = -(uint64_t)(int)v33;
          v608 = -(uint64_t)(v29 * (int)v36);
          v451 = 8 * (int)v32;
          while (1)
          {
            v627 = v35;
            v452 = v636;
            do
            {
              v453 = *v26;
              if (*v26)
              {
                a4.n128_f32[0] = (float)v453 * 0.0039216;
                _Q1 = (__n128)vmulq_n_f32(vcvtq_f32_f16(*v30), a4.n128_f32[0]);
                v454 = COERCE_DOUBLE(vcvt_f16_f32((float32x4_t)_Q1));
                LOWORD(_D7) = HIWORD(v454);
                __asm { FCVT            S1, H7 }
                _Q6.f32[0] = v17 ? _Q1.n128_f32[0] : (float)v453 * 0.0039216;
                if (_Q6.f32[0] > 0.0)
                {
                  if (v15)
                  {
                    LOWORD(_D3) = v24->i16[3];
                    __asm { FCVT            S4, H3 }
                    if (_S4 <= 0.0)
                    {
                      v24->i32[0] = LODWORD(v454);
                      v24->i16[2] = WORD2(v454);
                      __asm { FCVT            H0, S6 }
                      v24->i16[3] = _H0;
                      goto LABEL_467;
                    }
                  }
                  else
                  {
                    LOWORD(_D3) = v24->i16[3];
                    _S4 = 1.0;
                  }
                  a4.n128_u16[0] = v24->i16[0];
                  _Q1.n128_u16[0] = v24->u16[1];
                  _Q2.n128_u16[0] = v24->u16[2];
                  v24->i16[0] = PDAoverlayPDA(a4, _Q1, _Q2, _D3, _S4, v454, *(double *)_Q6.i64, _D7, v21, v22, a3, v32, v37, v36, v33, (uint64_t)v35, SLOWORD(v454), SWORD1(v454), SWORD2(v454),
                                  _Q6.f32[0]);
                  v24->i16[1] = v458;
                  v24->i16[2] = _Q2.n128_u16[0];
                  v24->i16[3] = LOWORD(_D3);
                }
              }
LABEL_467:
              v26 += v449;
              v459 = &v30[v449];
              if ((unint64_t)v459 >= v16)
                v460 = v450;
              else
                v460 = 0;
              v30 = &v459[v460];
              v24 = (float16x4_t *)((char *)v24 + v451);
              --v452;
            }
            while (v452);
            v26 += v619;
            v35 = v627;
            v24 += v620;
            v461 = &v627[v618];
            v462 = v608;
            if ((unint64_t)v461 < v617)
              v462 = 0;
            v463 = &v461[v462];
            v464 = v16 + 8 * v462 + 8 * v618;
            if (v617)
            {
              v16 = v464;
              v35 = v463;
              v30 = v463;
            }
            else
            {
              v30 += v618;
            }
            if (!--v637)
              return;
          }
        case 16:
          if (CGPreferencesCheck<CGImageMarkAllowTemplateMethodFP>(void)::result && a2[33])
          {
            composite_pixelmask<(CGCompositeOperation)16,_rgbaf16_t>((int8x8_t *)v24, v620, (int8x8_t *)v30, v29, (int8x8_t *)v35, v36, v33, v16, v34, v26, v619, v636, v637, v32, v20, v37, *a1);
            return;
          }
          v465 = (int)v32;
          v466 = -(uint64_t)(int)v33;
          v609 = -(uint64_t)(v29 * (int)v36);
          v467 = 8 * (int)v32;
          while (1)
          {
            v628 = v35;
            v468 = v636;
            do
            {
              v469 = *v26;
              if (*v26)
              {
                a4.n128_f32[0] = (float)v469 * 0.0039216;
                _Q1 = (__n128)vmulq_n_f32(vcvtq_f32_f16(*v30), a4.n128_f32[0]);
                v470 = COERCE_DOUBLE(vcvt_f16_f32((float32x4_t)_Q1));
                LOWORD(_D7) = HIWORD(v470);
                __asm { FCVT            S1, H7 }
                _Q6.f32[0] = v17 ? _Q1.n128_f32[0] : (float)v469 * 0.0039216;
                if (_Q6.f32[0] > 0.0)
                {
                  if (v15)
                  {
                    LOWORD(_D3) = v24->i16[3];
                    __asm { FCVT            S4, H3 }
                    if (_S4 <= 0.0)
                    {
                      v24->i32[0] = LODWORD(v470);
                      v24->i16[2] = WORD2(v470);
                      __asm { FCVT            H0, S6 }
                      v24->i16[3] = _H0;
                      goto LABEL_490;
                    }
                  }
                  else
                  {
                    LOWORD(_D3) = v24->i16[3];
                    _S4 = 1.0;
                  }
                  a4.n128_u16[0] = v24->i16[0];
                  _Q1.n128_u16[0] = v24->u16[1];
                  _Q2.n128_u16[0] = v24->u16[2];
                  v24->i16[0] = PDAdarkenPDA(a4, _Q1, _Q2, _D3, _S4, v470, *(double *)_Q6.i64, _D7, v21, v22, a3, v32, v37, v36, v33, (uint64_t)v35, SLOWORD(v470), SWORD1(v470), SWORD2(v470),
                                  _Q6.f32[0]);
                  v24->i16[1] = v474;
                  v24->i16[2] = _Q2.n128_u16[0];
                  v24->i16[3] = LOWORD(_D3);
                }
              }
LABEL_490:
              v26 += v465;
              v475 = &v30[v465];
              if ((unint64_t)v475 >= v16)
                v476 = v466;
              else
                v476 = 0;
              v30 = &v475[v476];
              v24 = (float16x4_t *)((char *)v24 + v467);
              --v468;
            }
            while (v468);
            v26 += v619;
            v35 = v628;
            v24 += v620;
            v477 = &v628[v618];
            v478 = v609;
            if ((unint64_t)v477 < v617)
              v478 = 0;
            v479 = &v477[v478];
            v480 = v16 + 8 * v478 + 8 * v618;
            if (v617)
            {
              v16 = v480;
              v35 = v479;
              v30 = v479;
            }
            else
            {
              v30 += v618;
            }
            if (!--v637)
              return;
          }
        case 17:
          if (CGPreferencesCheck<CGImageMarkAllowTemplateMethodFP>(void)::result && a2[33])
          {
            composite_pixelmask<(CGCompositeOperation)17,_rgbaf16_t>((int8x8_t *)v24, v620, (int8x8_t *)v30, v29, (int8x8_t *)v35, v36, v33, v16, v34, v26, v619, v636, v637, v32, v20, v37, *a1);
            return;
          }
          v481 = (int)v32;
          v482 = -(uint64_t)(int)v33;
          v610 = -(uint64_t)(v29 * (int)v36);
          v483 = 8 * (int)v32;
          while (1)
          {
            v629 = v35;
            v484 = v636;
            do
            {
              v485 = *v26;
              if (*v26)
              {
                a4.n128_f32[0] = (float)v485 * 0.0039216;
                _Q1 = (__n128)vmulq_n_f32(vcvtq_f32_f16(*v30), a4.n128_f32[0]);
                v486 = COERCE_DOUBLE(vcvt_f16_f32((float32x4_t)_Q1));
                LOWORD(_D7) = HIWORD(v486);
                __asm { FCVT            S1, H7 }
                _Q6.f32[0] = v17 ? _Q1.n128_f32[0] : (float)v485 * 0.0039216;
                if (_Q6.f32[0] > 0.0)
                {
                  if (v15)
                  {
                    LOWORD(_D3) = v24->i16[3];
                    __asm { FCVT            S4, H3 }
                    if (_S4 <= 0.0)
                    {
                      v24->i32[0] = LODWORD(v486);
                      v24->i16[2] = WORD2(v486);
                      __asm { FCVT            H0, S6 }
                      v24->i16[3] = _H0;
                      goto LABEL_513;
                    }
                  }
                  else
                  {
                    LOWORD(_D3) = v24->i16[3];
                    _S4 = 1.0;
                  }
                  a4.n128_u16[0] = v24->i16[0];
                  _Q1.n128_u16[0] = v24->u16[1];
                  _Q2.n128_u16[0] = v24->u16[2];
                  v24->i16[0] = PDAlightenPDA(a4, _Q1, _Q2, _D3, _S4, v486, *(double *)_Q6.i64, _D7, v21, v22, a3, v32, v37, v36, v33, (uint64_t)v35, SLOWORD(v486), SWORD1(v486), SWORD2(v486),
                                  _Q6.f32[0]);
                  v24->i16[1] = v490;
                  v24->i16[2] = _Q2.n128_u16[0];
                  v24->i16[3] = LOWORD(_D3);
                }
              }
LABEL_513:
              v26 += v481;
              v491 = &v30[v481];
              if ((unint64_t)v491 >= v16)
                v492 = v482;
              else
                v492 = 0;
              v30 = &v491[v492];
              v24 = (float16x4_t *)((char *)v24 + v483);
              --v484;
            }
            while (v484);
            v26 += v619;
            v35 = v629;
            v24 += v620;
            v493 = &v629[v618];
            v494 = v610;
            if ((unint64_t)v493 < v617)
              v494 = 0;
            v495 = &v493[v494];
            v496 = v16 + 8 * v494 + 8 * v618;
            if (v617)
            {
              v16 = v496;
              v35 = v495;
              v30 = v495;
            }
            else
            {
              v30 += v618;
            }
            if (!--v637)
              return;
          }
        case 18:
          v42 = (int)v32;
          v43 = -(uint64_t)(int)v33;
          v602 = -(uint64_t)(v29 * (int)v36);
          v44 = 8 * (int)v32;
          while (1)
          {
            v621 = v35;
            v45 = v636;
            do
            {
              v46 = *v26;
              if (*v26)
              {
                a4.n128_f32[0] = (float)v46 * 0.0039216;
                _Q1 = (__n128)vmulq_n_f32(vcvtq_f32_f16(*v30), a4.n128_f32[0]);
                v47 = COERCE_DOUBLE(vcvt_f16_f32((float32x4_t)_Q1));
                LOWORD(_D7) = HIWORD(v47);
                __asm { FCVT            S1, H7 }
                _Q6.f32[0] = v17 ? _Q1.n128_f32[0] : (float)v46 * 0.0039216;
                if (_Q6.f32[0] > 0.0)
                {
                  if (v15)
                  {
                    LOWORD(_D3) = v24->i16[3];
                    __asm { FCVT            S4, H3 }
                    if (_S4 <= 0.0)
                    {
                      v24->i32[0] = LODWORD(v47);
                      v24->i16[2] = WORD2(v47);
                      __asm { FCVT            H0, S6 }
                      v24->i16[3] = _H0;
                      goto LABEL_92;
                    }
                  }
                  else
                  {
                    LOWORD(_D3) = v24->i16[3];
                    _S4 = 1.0;
                  }
                  a4.n128_u16[0] = v24->i16[0];
                  _Q1.n128_u16[0] = v24->u16[1];
                  _Q2.n128_u16[0] = v24->u16[2];
                  v24->i16[0] = PDAcolordodgePDA(a4, _Q1, _Q2, _D3, _S4, v47, *(double *)_Q6.i64, _D7, v21, v22, a3, v32, v37, v36, v33, (uint64_t)v35, SLOWORD(v47), SWORD1(v47), SWORD2(v47),
                                  _Q6.f32[0]);
                  v24->i16[1] = v55;
                  v24->i16[2] = _Q2.n128_u16[0];
                  v24->i16[3] = LOWORD(_D3);
                }
              }
LABEL_92:
              v26 += v42;
              v56 = &v30[v42];
              if ((unint64_t)v56 >= v16)
                v57 = v43;
              else
                v57 = 0;
              v30 = &v56[v57];
              v24 = (float16x4_t *)((char *)v24 + v44);
              --v45;
            }
            while (v45);
            v26 += v619;
            v35 = v621;
            v24 += v620;
            v58 = &v621[v618];
            v59 = v602;
            if ((unint64_t)v58 < v617)
              v59 = 0;
            v60 = &v58[v59];
            v61 = v16 + 8 * v59 + 8 * v618;
            if (v617)
            {
              v16 = v61;
              v35 = v60;
              v30 = v60;
            }
            else
            {
              v30 += v618;
            }
            if (!--v637)
              return;
          }
        case 19:
          if (CGPreferencesCheck<CGImageMarkAllowTemplateMethodFP>(void)::result && a2[33])
          {
            composite_pixelmask<(CGCompositeOperation)19,_rgbaf16_t>((int8x8_t *)v24, v620, (int8x8_t *)v30, v29, (int8x8_t *)v35, v36, v33, v16, v34, v26, v619, v636, v637, v32, v20, v37, *a1);
            return;
          }
          v497 = (int)v32;
          v498 = -(uint64_t)(int)v33;
          v611 = -(uint64_t)(v29 * (int)v36);
          v499 = 8 * (int)v32;
          while (1)
          {
            v630 = v35;
            v500 = v636;
            do
            {
              v501 = *v26;
              if (*v26)
              {
                a4.n128_f32[0] = (float)v501 * 0.0039216;
                _Q1 = (__n128)vmulq_n_f32(vcvtq_f32_f16(*v30), a4.n128_f32[0]);
                v502 = COERCE_DOUBLE(vcvt_f16_f32((float32x4_t)_Q1));
                LOWORD(_D7) = HIWORD(v502);
                __asm { FCVT            S1, H7 }
                _Q6.f32[0] = v17 ? _Q1.n128_f32[0] : (float)v501 * 0.0039216;
                if (_Q6.f32[0] > 0.0)
                {
                  if (v15)
                  {
                    LOWORD(_D3) = v24->i16[3];
                    __asm { FCVT            S4, H3 }
                    if (_S4 <= 0.0)
                    {
                      v24->i32[0] = LODWORD(v502);
                      v24->i16[2] = WORD2(v502);
                      __asm { FCVT            H0, S6 }
                      v24->i16[3] = _H0;
                      goto LABEL_536;
                    }
                  }
                  else
                  {
                    LOWORD(_D3) = v24->i16[3];
                    _S4 = 1.0;
                  }
                  a4.n128_u16[0] = v24->i16[0];
                  _Q1.n128_u16[0] = v24->u16[1];
                  _Q2.n128_u16[0] = v24->u16[2];
                  v24->i16[0] = PDAcolorburnPDA(a4, _Q1, _Q2, _D3, _S4, v502, *(double *)_Q6.i64, _D7, v21, v22, a3, v32, v37, v36, v33, (uint64_t)v35, SLOWORD(v502), SWORD1(v502), SWORD2(v502),
                                  _Q6.f32[0]);
                  v24->i16[1] = v506;
                  v24->i16[2] = _Q2.n128_u16[0];
                  v24->i16[3] = LOWORD(_D3);
                }
              }
LABEL_536:
              v26 += v497;
              v507 = &v30[v497];
              if ((unint64_t)v507 >= v16)
                v508 = v498;
              else
                v508 = 0;
              v30 = &v507[v508];
              v24 = (float16x4_t *)((char *)v24 + v499);
              --v500;
            }
            while (v500);
            v26 += v619;
            v35 = v630;
            v24 += v620;
            v509 = &v630[v618];
            v510 = v611;
            if ((unint64_t)v509 < v617)
              v510 = 0;
            v511 = &v509[v510];
            v512 = v16 + 8 * v510 + 8 * v618;
            if (v617)
            {
              v16 = v512;
              v35 = v511;
              v30 = v511;
            }
            else
            {
              v30 += v618;
            }
            if (!--v637)
              return;
          }
        case 20:
          if (CGPreferencesCheck<CGImageMarkAllowTemplateMethodFP>(void)::result && a2[33])
          {
            composite_pixelmask<(CGCompositeOperation)20,_rgbaf16_t>((int8x8_t *)v24, v620, (int8x8_t *)v30, v29, (int8x8_t *)v35, v36, v33, v16, v34, v26, v619, v636, v637, v32, v20, v37, *a1);
            return;
          }
          v513 = (int)v32;
          v514 = -(uint64_t)(int)v33;
          v612 = -(uint64_t)(v29 * (int)v36);
          v515 = 8 * (int)v32;
          while (1)
          {
            v631 = v35;
            v516 = v636;
            do
            {
              v517 = *v26;
              if (*v26)
              {
                a4.n128_f32[0] = (float)v517 * 0.0039216;
                _Q1 = (__n128)vmulq_n_f32(vcvtq_f32_f16(*v30), a4.n128_f32[0]);
                v518 = COERCE_DOUBLE(vcvt_f16_f32((float32x4_t)_Q1));
                LOWORD(_D7) = HIWORD(v518);
                __asm { FCVT            S1, H7 }
                _Q6.f32[0] = v17 ? _Q1.n128_f32[0] : (float)v517 * 0.0039216;
                if (_Q6.f32[0] > 0.0)
                {
                  if (v15)
                  {
                    LOWORD(_D3) = v24->i16[3];
                    __asm { FCVT            S4, H3 }
                    if (_S4 <= 0.0)
                    {
                      v24->i32[0] = LODWORD(v518);
                      v24->i16[2] = WORD2(v518);
                      __asm { FCVT            H0, S6 }
                      v24->i16[3] = _H0;
                      goto LABEL_559;
                    }
                  }
                  else
                  {
                    LOWORD(_D3) = v24->i16[3];
                    _S4 = 1.0;
                  }
                  a4.n128_u16[0] = v24->i16[0];
                  _Q1.n128_u16[0] = v24->u16[1];
                  _Q2.n128_u16[0] = v24->u16[2];
                  v24->i16[0] = PDAsoftlightPDA(a4, _Q1, _Q2, _D3, _S4, v518, *(double *)_Q6.i64, _D7, v21, v22, a3, v32, v37, v36, v33, (uint64_t)v35, SLOWORD(v518), SWORD1(v518), SWORD2(v518),
                                  _Q6.f32[0]);
                  v24->i16[1] = v522;
                  v24->i16[2] = _Q2.n128_u16[0];
                  v24->i16[3] = LOWORD(_D3);
                }
              }
LABEL_559:
              v26 += v513;
              v523 = &v30[v513];
              if ((unint64_t)v523 >= v16)
                v524 = v514;
              else
                v524 = 0;
              v30 = &v523[v524];
              v24 = (float16x4_t *)((char *)v24 + v515);
              --v516;
            }
            while (v516);
            v26 += v619;
            v35 = v631;
            v24 += v620;
            v525 = &v631[v618];
            v526 = v612;
            if ((unint64_t)v525 < v617)
              v526 = 0;
            v527 = &v525[v526];
            v528 = v16 + 8 * v526 + 8 * v618;
            if (v617)
            {
              v16 = v528;
              v35 = v527;
              v30 = v527;
            }
            else
            {
              v30 += v618;
            }
            if (!--v637)
              return;
          }
        case 21:
          if (CGPreferencesCheck<CGImageMarkAllowTemplateMethodFP>(void)::result && a2[33])
          {
            composite_pixelmask<(CGCompositeOperation)21,_rgbaf16_t>((int8x8_t *)v24, v620, (int8x8_t *)v30, v29, (int8x8_t *)v35, v36, v33, v16, v34, v26, v619, v636, v637, v32, v20, v37, *a1);
            return;
          }
          v529 = (int)v32;
          v530 = -(uint64_t)(int)v33;
          v613 = -(uint64_t)(v29 * (int)v36);
          v531 = 8 * (int)v32;
          while (1)
          {
            v632 = v35;
            v532 = v636;
            do
            {
              v533 = *v26;
              if (*v26)
              {
                a4.n128_f32[0] = (float)v533 * 0.0039216;
                _Q1 = (__n128)vmulq_n_f32(vcvtq_f32_f16(*v30), a4.n128_f32[0]);
                v534 = COERCE_DOUBLE(vcvt_f16_f32((float32x4_t)_Q1));
                LOWORD(_D7) = HIWORD(v534);
                __asm { FCVT            S1, H7 }
                _Q6.f32[0] = v17 ? _Q1.n128_f32[0] : (float)v533 * 0.0039216;
                if (_Q6.f32[0] > 0.0)
                {
                  if (v15)
                  {
                    LOWORD(_D3) = v24->i16[3];
                    __asm { FCVT            S4, H3 }
                    if (_S4 <= 0.0)
                    {
                      v24->i32[0] = LODWORD(v534);
                      v24->i16[2] = WORD2(v534);
                      __asm { FCVT            H0, S6 }
                      v24->i16[3] = _H0;
                      goto LABEL_582;
                    }
                  }
                  else
                  {
                    LOWORD(_D3) = v24->i16[3];
                    _S4 = 1.0;
                  }
                  a4.n128_u16[0] = v24->i16[0];
                  _Q1.n128_u16[0] = v24->u16[1];
                  _Q2.n128_u16[0] = v24->u16[2];
                  v24->i16[0] = PDAhardlightPDA(a4, _Q1, _Q2, _D3, _S4, v534, *(double *)_Q6.i64, _D7, v21, v22, a3, v32, v37, v36, v33, (uint64_t)v35, SLOWORD(v534), SWORD1(v534), SWORD2(v534),
                                  _Q6.f32[0]);
                  v24->i16[1] = v538;
                  v24->i16[2] = _Q2.n128_u16[0];
                  v24->i16[3] = LOWORD(_D3);
                }
              }
LABEL_582:
              v26 += v529;
              v539 = &v30[v529];
              if ((unint64_t)v539 >= v16)
                v540 = v530;
              else
                v540 = 0;
              v30 = &v539[v540];
              v24 = (float16x4_t *)((char *)v24 + v531);
              --v532;
            }
            while (v532);
            v26 += v619;
            v35 = v632;
            v24 += v620;
            v541 = &v632[v618];
            v542 = v613;
            if ((unint64_t)v541 < v617)
              v542 = 0;
            v543 = &v541[v542];
            v544 = v16 + 8 * v542 + 8 * v618;
            if (v617)
            {
              v16 = v544;
              v35 = v543;
              v30 = v543;
            }
            else
            {
              v30 += v618;
            }
            if (!--v637)
              return;
          }
        case 22:
          if (CGPreferencesCheck<CGImageMarkAllowTemplateMethodFP>(void)::result && a2[33])
          {
            composite_pixelmask<(CGCompositeOperation)22,_rgbaf16_t>((int8x8_t *)v24, v620, (int8x8_t *)v30, v29, (int8x8_t *)v35, v36, v33, v16, v34, v26, v619, v636, v637, v32, v20, v37, *a1);
            return;
          }
          v545 = (int)v32;
          v546 = -(uint64_t)(int)v33;
          v614 = -(uint64_t)(v29 * (int)v36);
          v547 = 8 * (int)v32;
          while (1)
          {
            v633 = v35;
            v548 = v636;
            do
            {
              v549 = *v26;
              if (*v26)
              {
                a4.n128_f32[0] = (float)v549 * 0.0039216;
                _Q1 = vmulq_n_f32(vcvtq_f32_f16(*v30), a4.n128_f32[0]);
                v550 = COERCE_DOUBLE(vcvt_f16_f32(_Q1));
                LOWORD(_D7) = HIWORD(v550);
                __asm { FCVT            S1, H7 }
                _Q6.f32[0] = v17 ? _Q1.f32[0] : (float)v549 * 0.0039216;
                if (_Q6.f32[0] > 0.0)
                {
                  if (v15)
                  {
                    LOWORD(_D3) = v24->i16[3];
                    __asm { FCVT            S4, H3 }
                    if (_S4 <= 0.0)
                    {
                      v24->i32[0] = LODWORD(v550);
                      v24->i16[2] = WORD2(v550);
                      __asm { FCVT            H0, S6 }
                      v24->i16[3] = _H0;
                      goto LABEL_605;
                    }
                  }
                  else
                  {
                    LOWORD(_D3) = v24->i16[3];
                    _S4 = 1.0;
                  }
                  a4.n128_u16[0] = v24->i16[0];
                  _Q1.i16[0] = v24->i16[1];
                  _Q2.n128_u16[0] = v24->u16[2];
                  v24->i16[0] = PDAdifferencePDA(a4, *(double *)_Q1.i64, _Q2.n128_f64[0], _D3, _S4, v550, *(double *)_Q6.i64, _D7, v21, v22, a3, v32, v37, v36, v33, (uint64_t)v35, SLOWORD(v550), SHIDWORD(v550), _Q6.f32[0]);
                  v24->i16[1] = v554;
                  v24->i16[2] = _Q2.n128_u16[0];
                  v24->i16[3] = LOWORD(_D3);
                }
              }
LABEL_605:
              v26 += v545;
              v555 = &v30[v545];
              if ((unint64_t)v555 >= v16)
                v556 = v546;
              else
                v556 = 0;
              v30 = &v555[v556];
              v24 = (float16x4_t *)((char *)v24 + v547);
              --v548;
            }
            while (v548);
            v26 += v619;
            v35 = v633;
            v24 += v620;
            v557 = &v633[v618];
            v558 = v614;
            if ((unint64_t)v557 < v617)
              v558 = 0;
            v559 = &v557[v558];
            v560 = v16 + 8 * v558 + 8 * v618;
            if (v617)
            {
              v16 = v560;
              v35 = v559;
              v30 = v559;
            }
            else
            {
              v30 += v618;
            }
            if (!--v637)
              return;
          }
        case 23:
          if (CGPreferencesCheck<CGImageMarkAllowTemplateMethodFP>(void)::result && a2[33])
          {
            composite_pixelmask<(CGCompositeOperation)23,_rgbaf16_t>((int8x8_t *)v24, v620, (int8x8_t *)v30, v29, (int8x8_t *)v35, v36, v33, v16, v34, v26, v619, v636, v637, v32, v20, v37, *a1);
            return;
          }
          v561 = (int)v32;
          v562 = -(uint64_t)(int)v33;
          v615 = -(uint64_t)(v29 * (int)v36);
          v563 = 8 * (int)v32;
          while (1)
          {
            v634 = v35;
            v564 = v636;
            do
            {
              v565 = *v26;
              if (*v26)
              {
                a4.n128_f32[0] = (float)v565 * 0.0039216;
                _Q1 = (__n128)vmulq_n_f32(vcvtq_f32_f16(*v30), a4.n128_f32[0]);
                v566 = COERCE_DOUBLE(vcvt_f16_f32((float32x4_t)_Q1));
                LOWORD(_D7) = HIWORD(v566);
                __asm { FCVT            S1, H7 }
                _Q6.f32[0] = v17 ? _Q1.n128_f32[0] : (float)v565 * 0.0039216;
                if (_Q6.f32[0] > 0.0)
                {
                  if (v15)
                  {
                    LOWORD(_D3) = v24->i16[3];
                    __asm { FCVT            S4, H3 }
                    if (_S4 <= 0.0)
                    {
                      v24->i32[0] = LODWORD(v566);
                      v24->i16[2] = WORD2(v566);
                      __asm { FCVT            H0, S6 }
                      v24->i16[3] = _H0;
                      goto LABEL_628;
                    }
                  }
                  else
                  {
                    LOWORD(_D3) = v24->i16[3];
                    _S4 = 1.0;
                  }
                  a4.n128_u16[0] = v24->i16[0];
                  _Q1.n128_u16[0] = v24->u16[1];
                  _Q2.n128_u16[0] = v24->u16[2];
                  v24->i16[0] = PDAexclusionPDA(a4, _Q1, _Q2, _D3, _S4, v566, *(double *)_Q6.i64, _D7, v21, v22, a3, v32, v37, v36, v33, (uint64_t)v35, SLOWORD(v566), SWORD1(v566), SWORD2(v566),
                                  _Q6.f32[0]);
                  v24->i16[1] = v570;
                  v24->i16[2] = _Q2.n128_u16[0];
                  v24->i16[3] = LOWORD(_D3);
                }
              }
LABEL_628:
              v26 += v561;
              v571 = &v30[v561];
              if ((unint64_t)v571 >= v16)
                v572 = v562;
              else
                v572 = 0;
              v30 = &v571[v572];
              v24 = (float16x4_t *)((char *)v24 + v563);
              --v564;
            }
            while (v564);
            v26 += v619;
            v35 = v634;
            v24 += v620;
            v573 = &v634[v618];
            v574 = v615;
            if ((unint64_t)v573 < v617)
              v574 = 0;
            v575 = &v573[v574];
            v576 = v16 + 8 * v574 + 8 * v618;
            if (v617)
            {
              v16 = v576;
              v35 = v575;
              v30 = v575;
            }
            else
            {
              v30 += v618;
            }
            if (!--v637)
              return;
          }
        case 24:
          v62 = (int)v32;
          v63 = -(uint64_t)(int)v33;
          v603 = -(uint64_t)(v29 * (int)v36);
          v64 = 8 * (int)v32;
          while (1)
          {
            v622 = v35;
            v65 = v636;
            do
            {
              v66 = *v26;
              if (*v26)
              {
                a4.n128_f32[0] = (float)v66 * 0.0039216;
                _Q1 = (__n128)vmulq_n_f32(vcvtq_f32_f16(*v30), a4.n128_f32[0]);
                v67 = COERCE_DOUBLE(vcvt_f16_f32((float32x4_t)_Q1));
                LOWORD(_D7) = HIWORD(v67);
                __asm { FCVT            S1, H7 }
                _Q6.f32[0] = v17 ? _Q1.n128_f32[0] : (float)v66 * 0.0039216;
                if (_Q6.f32[0] > 0.0)
                {
                  if (v15)
                  {
                    LOWORD(_D3) = v24->i16[3];
                    __asm { FCVT            S4, H3 }
                    if (_S4 <= 0.0)
                    {
                      v24->i32[0] = LODWORD(v67);
                      v24->i16[2] = WORD2(v67);
                      __asm { FCVT            H0, S6 }
                      v24->i16[3] = _H0;
                      goto LABEL_130;
                    }
                  }
                  else
                  {
                    LOWORD(_D3) = v24->i16[3];
                    _S4 = 1.0;
                  }
                  a4.n128_u16[0] = v24->i16[0];
                  _Q1.n128_u16[0] = v24->u16[1];
                  _Q2.n128_u16[0] = v24->u16[2];
                  v24->i16[0] = PDAhuePDA(a4, _Q1, _Q2, _D3, _S4, v67, *(double *)_Q6.i64, _D7, v21, v22, a3, v32, v37, v36, v33, (uint64_t)v35, SLOWORD(v67), SWORD1(v67), SWORD2(v67),
                                  _Q6.f32[0]);
                  v24->i16[1] = v71;
                  v24->i16[2] = _Q2.n128_u16[0];
                  v24->i16[3] = LOWORD(_D3);
                }
              }
LABEL_130:
              v26 += v62;
              v72 = &v30[v62];
              if ((unint64_t)v72 >= v16)
                v73 = v63;
              else
                v73 = 0;
              v30 = &v72[v73];
              v24 = (float16x4_t *)((char *)v24 + v64);
              --v65;
            }
            while (v65);
            v26 += v619;
            v35 = v622;
            v24 += v620;
            v74 = &v622[v618];
            v75 = v603;
            if ((unint64_t)v74 < v617)
              v75 = 0;
            v76 = &v74[v75];
            v77 = v16 + 8 * v75 + 8 * v618;
            if (v617)
            {
              v16 = v77;
              v35 = v76;
              v30 = v76;
            }
            else
            {
              v30 += v618;
            }
            if (!--v637)
              return;
          }
        case 25:
          v78 = (int)v32;
          v79 = -(uint64_t)(int)v33;
          v604 = -(uint64_t)(v29 * (int)v36);
          v80 = 8 * (int)v32;
          while (1)
          {
            v623 = v35;
            v81 = v636;
            do
            {
              v82 = *v26;
              if (*v26)
              {
                a4.n128_f32[0] = (float)v82 * 0.0039216;
                _Q1 = (__n128)vmulq_n_f32(vcvtq_f32_f16(*v30), a4.n128_f32[0]);
                v83 = COERCE_DOUBLE(vcvt_f16_f32((float32x4_t)_Q1));
                LOWORD(_D7) = HIWORD(v83);
                __asm { FCVT            S1, H7 }
                _Q6.f32[0] = v17 ? _Q1.n128_f32[0] : (float)v82 * 0.0039216;
                if (_Q6.f32[0] > 0.0)
                {
                  if (v15)
                  {
                    LOWORD(_D3) = v24->i16[3];
                    __asm { FCVT            S4, H3 }
                    if (_S4 <= 0.0)
                    {
                      v24->i32[0] = LODWORD(v83);
                      v24->i16[2] = WORD2(v83);
                      __asm { FCVT            H0, S6 }
                      v24->i16[3] = _H0;
                      goto LABEL_153;
                    }
                  }
                  else
                  {
                    LOWORD(_D3) = v24->i16[3];
                    _S4 = 1.0;
                  }
                  a4.n128_u16[0] = v24->i16[0];
                  _Q1.n128_u16[0] = v24->u16[1];
                  _Q2.n128_u16[0] = v24->u16[2];
                  v24->i16[0] = PDAsaturationPDA(a4, _Q1, _Q2, _D3, _S4, v83, *(double *)_Q6.i64, _D7, v21, v22, a3, v32, v37, v36, v33, (uint64_t)v35, SLOWORD(v83), SWORD1(v83), SWORD2(v83),
                                  _Q6.f32[0]);
                  v24->i16[1] = v87;
                  v24->i16[2] = _Q2.n128_u16[0];
                  v24->i16[3] = LOWORD(_D3);
                }
              }
LABEL_153:
              v26 += v78;
              v88 = &v30[v78];
              if ((unint64_t)v88 >= v16)
                v89 = v79;
              else
                v89 = 0;
              v30 = &v88[v89];
              v24 = (float16x4_t *)((char *)v24 + v80);
              --v81;
            }
            while (v81);
            v26 += v619;
            v35 = v623;
            v24 += v620;
            v90 = &v623[v618];
            v91 = v604;
            if ((unint64_t)v90 < v617)
              v91 = 0;
            v92 = &v90[v91];
            v93 = v16 + 8 * v91 + 8 * v618;
            if (v617)
            {
              v16 = v93;
              v35 = v92;
              v30 = v92;
            }
            else
            {
              v30 += v618;
            }
            if (!--v637)
              return;
          }
        case 26:
          v94 = (int)v32;
          v95 = -(uint64_t)(int)v33;
          v605 = -(uint64_t)(v29 * (int)v36);
          v96 = 8 * (int)v32;
          while (1)
          {
            v624 = v35;
            v97 = v636;
            do
            {
              v98 = *v26;
              if (*v26)
              {
                a5.n128_f32[0] = (float)v98 * 0.0039216;
                v99 = (__n128)vmulq_n_f32(vcvtq_f32_f16(*v30), a5.n128_f32[0]);
                v99.n128_u64[0] = (unint64_t)vcvt_f16_f32((float32x4_t)v99);
                LOWORD(_D3) = v99.n128_u16[3];
                __asm { FCVT            S2, H3 }
                _S4 = v17 ? _Q2.n128_f32[0] : (float)v98 * 0.0039216;
                if (_S4 > 0.0)
                {
                  if (v15)
                  {
                    LOWORD(_D5) = v24->i16[3];
                    __asm { FCVT            S6, H5 }
                    if (_Q6.f32[0] <= 0.0)
                    {
                      v24->i32[0] = v99.n128_u32[0];
                      v24->i16[2] = v99.n128_i16[2];
                      __asm { FCVT            H0, S4 }
                      v24->i16[3] = _H0;
                      goto LABEL_176;
                    }
                  }
                  else
                  {
                    LOWORD(_D5) = v24->i16[3];
                    _Q6.i32[0] = 1.0;
                  }
                  LOWORD(_D7) = v24->i16[0];
                  a5.n128_u16[0] = v99.n128_u16[1];
                  _Q2.n128_u16[0] = v99.n128_u16[2];
                  v24->i16[0] = PDAluminosityPDA(v99, a5, _Q2, _D3, _S4, _D5, *(double *)_Q6.i64, _D7, v21, v22, a3, v32, v37, v36, v33, (uint64_t)v35, v24->i16[0], *(__int32 *)((char *)v24->i32 + 2), HIWORD(*(unsigned __int32 *)((char *)v24->i32 + 2)),
                                  _Q6.f32[0]);
                  v24->i16[1] = a5.n128_u16[0];
                  v24->i16[2] = _Q2.n128_u16[0];
                  v24->i16[3] = LOWORD(_D3);
                }
              }
LABEL_176:
              v26 += v94;
              v102 = &v30[v94];
              if ((unint64_t)v102 >= v16)
                v103 = v95;
              else
                v103 = 0;
              v30 = &v102[v103];
              v24 = (float16x4_t *)((char *)v24 + v96);
              --v97;
            }
            while (v97);
            v26 += v619;
            v35 = v624;
            v24 += v620;
            v104 = &v624[v618];
            v105 = v605;
            if ((unint64_t)v104 < v617)
              v105 = 0;
            v106 = &v104[v105];
            v107 = v16 + 8 * v105 + 8 * v618;
            if (v617)
            {
              v16 = v107;
              v35 = v106;
              v30 = v106;
            }
            else
            {
              v30 += v618;
            }
            if (!--v637)
              return;
          }
        case 27:
          v108 = (int)v32;
          v109 = -(uint64_t)(int)v33;
          v606 = -(uint64_t)(v29 * (int)v36);
          v110 = 8 * (int)v32;
          break;
        default:
          return;
      }
LABEL_188:
      v625 = v35;
      v111 = v636;
      while (1)
      {
        v112 = *v26;
        if (!*v26)
          goto LABEL_199;
        a4.n128_f32[0] = (float)v112 * 0.0039216;
        _Q1 = (__n128)vmulq_n_f32(vcvtq_f32_f16(*v30), a4.n128_f32[0]);
        v113 = COERCE_DOUBLE(vcvt_f16_f32((float32x4_t)_Q1));
        LOWORD(_D7) = HIWORD(v113);
        __asm { FCVT            S1, H7 }
        _Q6.f32[0] = v17 ? _Q1.n128_f32[0] : (float)v112 * 0.0039216;
        if (_Q6.f32[0] <= 0.0)
          goto LABEL_199;
        if (!v15)
          break;
        LOWORD(_D3) = v24->i16[3];
        __asm { FCVT            S4, H3 }
        if (_S4 > 0.0)
          goto LABEL_198;
        v24->i32[0] = LODWORD(v113);
        v24->i16[2] = WORD2(v113);
        __asm { FCVT            H0, S6 }
        v24->i16[3] = _H0;
LABEL_199:
        v26 += v108;
        v118 = &v30[v108];
        if ((unint64_t)v118 >= v16)
          v119 = v109;
        else
          v119 = 0;
        v30 = &v118[v119];
        v24 = (float16x4_t *)((char *)v24 + v110);
        if (!--v111)
        {
          v26 += v619;
          v35 = v625;
          v24 += v620;
          v120 = &v625[v618];
          v121 = v606;
          if ((unint64_t)v120 < v617)
            v121 = 0;
          v122 = &v120[v121];
          v123 = v16 + 8 * v121 + 8 * v618;
          if (v617)
          {
            v16 = v123;
            v35 = v122;
            v30 = v122;
          }
          else
          {
            v30 += v618;
          }
          if (!--v637)
            return;
          goto LABEL_188;
        }
      }
      LOWORD(_D3) = v24->i16[3];
      _S4 = 1.0;
LABEL_198:
      a4.n128_u16[0] = v24->i16[0];
      _Q1.n128_u16[0] = v24->u16[1];
      _Q2.n128_u16[0] = v24->u16[2];
      v24->i16[0] = PDAluminosityPDA(a4, _Q1, _Q2, _D3, _S4, v113, *(double *)_Q6.i64, _D7, v21, v22, a3, v32, v37, v36, v33, (uint64_t)v35, SLOWORD(v113), SWORD1(v113), SWORD2(v113),
                      _Q6.f32[0]);
      v24->i16[1] = v117;
      v24->i16[2] = _Q2.n128_u16[0];
      v24->i16[3] = LOWORD(_D3);
      goto LABEL_199;
    }
    if ((char *)v24 - (char *)v30 >= 1)
    {
      if (v636 >= (uint64_t)((unint64_t)((char *)v24 - (char *)v30) >> 3))
      {
        v24 += v636 - 1;
        v30 += v636 - 1;
        v26 += v636 - 1;
        v32 = 0xFFFFFFFFLL;
        goto LABEL_13;
      }
      v31 = v23 * (v637 - 1);
      if (v24 <= &v30[v31 - 1 + v636])
      {
        v24 += v31;
        v29 = -(uint64_t)v23;
        v26 += v25 * (v637 - 1);
        v25 = -v25;
        v32 = 1;
        v30 += v31;
        v23 = -(uint64_t)v23;
        goto LABEL_14;
      }
    }
    v32 = 1;
LABEL_13:
    v29 = v23;
    goto LABEL_14;
  }
}

uint64_t dlRecorder_DrawLinearGradient(uint64_t a1, uint64_t a2, uint64_t a3, CGGradient *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12)
{
  CFArrayRef *v12;
  int v14;
  double v15;
  double v16;
  double v17;
  double v18;

  if (a1 && (v12 = *(CFArrayRef **)(a1 + 288)) != 0)
  {
    v14 = 0;
    v15 = a9;
    v16 = a10;
    v17 = a11;
    v18 = a12;
    return CG::DisplayListRecorder::DrawGradient(v12, a2, a3, a4, a5, &v14);
  }
  else
  {
    CGPostError((uint64_t)"%s: CGContextDelegateGetInfo() returned NULL", a2, a3, (uint64_t)a4, a5, a6, a7, a8, (char)"dlRecorder_DrawLinearGradient");
    return 1000;
  }
}

float16x4_t *composite_pixelmask<(CGCompositeOperation)2,_rgbaf16_t>(float16x4_t *result, uint64_t a2, float16x4_t *a3, uint64_t a4, float16x4_t *a5, int a6, int a7, unint64_t a8, unint64_t a9, char *a10, uint64_t a11, int a12, int a13, int a14, char a15)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int8x16_t v26;
  float32x4_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  float16x8_t v38;
  float16x8_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int8x16_t *v46;
  int8x16_t *v47;
  int8x16_t *v48;
  int8x16_t *v49;
  int64_t v50;
  int64_t v51;
  uint64_t v52;
  float16x8_t v53;
  float16x8_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  unint64_t i;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float16x4_t *v66;
  uint64_t v67;
  float16x4_t *v68;
  uint64_t v69;
  float16x4_t *v70;
  uint64_t v71;
  int8x16_t v72;
  float32x4_t v73;
  unint64_t v74;
  unint64_t v75;
  int v76;
  int8x16_t *v77;
  int8x16_t *v78;
  int8x16_t *v79;
  int8x16_t *v80;
  uint64_t v81;
  int64_t v82;
  unint64_t v83;
  float16x8_t v84;
  float16x8_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  int8x16_t *v92;
  int8x16_t *v93;
  int8x16_t *v94;
  int8x16_t *v95;
  int64_t v96;
  int64_t v97;
  uint64_t v98;
  float16x8_t v99;
  float16x8_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  unint64_t j;
  float16x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float16x4_t *v113;
  uint64_t v114;
  float16x4_t *v115;
  uint64_t v116;
  float16x4_t *v117;
  uint64_t v118;

  v17 = 2 * a14;
  v18 = -(a6 * a4);
  v19 = 16 * a14;
  v20 = 8 * a14;
  __asm { FMOV            V0.4S, #1.0 }
  if ((a15 & 0x30) != 0)
  {
    v26.i64[0] = -1;
    v26.i64[1] = -1;
    v27 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    while (1)
    {
      v28 = (a8 - (unint64_t)a3) >> 3;
      if (v28 >= a12)
        v28 = a12;
      v29 = v28;
      if (v28 < 2)
        goto LABEL_37;
      while (1)
      {
        v30 = *(unsigned __int16 *)a10;
        if (!*(_WORD *)a10)
        {
          v46 = (int8x16_t *)&a10[v29];
          v47 = (int8x16_t *)a10;
          do
            v48 = v47++;
          while (v47 <= v46 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v48)) & 0x80) != 0);
          do
          {
            v49 = v48;
            v48 = (int8x16_t *)((char *)v48 + 4);
          }
          while (v48 <= v46 && !v49->i32[0]);
          if (v49 < v46)
          {
            while (!v49->i8[0])
            {
              v49 = (int8x16_t *)((char *)v49 + 1);
              if (v49 >= v46)
              {
                v49 = (int8x16_t *)&a10[v29];
                break;
              }
            }
          }
          v50 = (char *)v49 - a10;
          v51 = ((char *)v49 - a10) * a14;
          a3 += v51;
          result += v51;
          a10 += v51;
          v29 -= v50;
          goto LABEL_34;
        }
        if (v30 != 0xFFFF)
          break;
        v31 = (int8x16_t *)&a10[v29];
        v32 = (int8x16_t *)a10;
        do
          v33 = v32++;
        while (v32 <= v31 && (vminvq_u8((uint8x16_t)vceqq_s8(*v33, v26)) & 0x80) != 0);
        do
        {
          v34 = v33;
          v33 = (int8x16_t *)((char *)v33 + 4);
        }
        while (v33 <= v31 && v34->i32[0] == -1);
        if (v34 < v31)
        {
          while (v34->u8[0] == 255)
          {
            v34 = (int8x16_t *)((char *)v34 + 1);
            if (v34 >= v31)
            {
              v34 = (int8x16_t *)&a10[v29];
              break;
            }
          }
        }
        v35 = 0;
        v36 = (char *)v34 - a10;
        v37 = (char *)v34 - a10;
        do
        {
          v38 = *(float16x8_t *)&a3->i8[v35];
          v39 = *(float16x8_t *)&result->i8[v35];
          v40 = vcvt_hight_f32_f16(v38);
          v41 = vcvtq_f32_f16(*(float16x4_t *)v38.i8);
          v42 = vcvt_hight_f32_f16(v39);
          v43 = vcvtq_f32_f16(*(float16x4_t *)v39.i8);
          v44 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v41, 3);
          v45 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 3);
          *(int8x16_t *)&result->i8[v35] = vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v44), (int16x8_t)vcgtzq_f32(v45)), (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vmlsq_f32(v43, vmaxnmq_f32(vminnmq_f32(v44, _Q0), (float32x4_t)0), v43), v41)), vaddq_f32(vmlsq_f32(v42, vmaxnmq_f32(vminnmq_f32(v45, _Q0), (float32x4_t)0), v42), v40)),
                                             (int8x16_t)v39);
          a10 += v17;
          v37 -= 2;
          v35 += v19;
        }
        while (v37 > 1);
        a3 = (float16x4_t *)((char *)a3 + v35);
        result = (float16x4_t *)((char *)result + v35);
        v29 = v29 - v36 + v37;
LABEL_34:
        if (v29 <= 1)
          goto LABEL_37;
      }
      v52 = 0;
      while (1)
      {
        v53 = *(float16x8_t *)&a3->i8[v52];
        v54 = *(float16x8_t *)&result->i8[v52];
        v55 = vcvtq_f32_f16(*(float16x4_t *)v53.i8);
        v56 = vcvt_hight_f32_f16(v54);
        v57 = vcvtq_f32_f16(*(float16x4_t *)v54.i8);
        v58 = vmulq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(BYTE1(v30)) & 0xFF00FF00FF00FFLL))), v27), vcvt_hight_f32_f16(v53));
        v59 = vmulq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v30) & 0xFF00FF00FF00FFLL))), v27), v55);
        v60 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v59, 3);
        v61 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v58, 3);
        *(int8x16_t *)&result->i8[v52] = vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v60), (int16x8_t)vcgtzq_f32(v61)), (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(v59, vmlsq_f32(v57, vmaxnmq_f32(vminnmq_f32(v60, _Q0), (float32x4_t)0), v57))), vaddq_f32(v58, vmlsq_f32(v56, vmaxnmq_f32(vminnmq_f32(v61, _Q0), (float32x4_t)0), v56))), (int8x16_t)v54);
        a10 += v17;
        v29 -= 2;
        if (v29 < 2)
          break;
        LOWORD(v30) = *(_WORD *)a10;
        v52 += v19;
        if ((unsigned __int16)(*(_WORD *)a10 - 1) >= 0xFFFEu)
        {
          result = (float16x4_t *)((char *)result + v52);
          a3 = (float16x4_t *)((char *)a3 + v52);
          goto LABEL_34;
        }
      }
      result = (float16x4_t *)((char *)result + v19 + v52);
      a3 = (float16x4_t *)((char *)a3 + v19 + v52);
LABEL_37:
      for (i = a12 - v28 + v29; i; --i)
      {
        if (*a10)
        {
          v63 = vcvtq_f32_f16(*result);
          v64 = vmulq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)vdup_n_s16(*a10))), v27), vcvtq_f32_f16(*a3));
          v65 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v64, 3);
          *result = (float16x4_t)vbsl_s8((int8x8_t)vmovn_s32(vcgtzq_f32(v65)), (int8x8_t)vcvt_f16_f32(vaddq_f32(v64, vmlsq_f32(v63, vmaxnmq_f32(vminnmq_f32(v65, _Q0), (float32x4_t)0), v63))), (int8x8_t)*result);
        }
        v66 = &a3[a14];
        a10 += a14;
        if ((unint64_t)v66 >= a8)
          v67 = -(uint64_t)a7;
        else
          v67 = 0;
        a3 = &v66[v67];
        result = (float16x4_t *)((char *)result + v20);
      }
      a10 += a11;
      result += a2;
      v68 = &a5[a4];
      if ((unint64_t)v68 >= a9)
        v69 = v18;
      else
        v69 = 0;
      v70 = &v68[v69];
      v71 = a8 + 8 * v69 + 8 * a4;
      a3 += a4;
      if (a9)
      {
        a3 = v70;
        a8 = v71;
        a5 = v70;
      }
      _VF = __OFSUB__(a13--, 1);
      if ((a13 < 0) ^ _VF | (a13 == 0))
        return result;
    }
  }
  v72.i64[0] = -1;
  v72.i64[1] = -1;
  v73 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  while (2)
  {
    v74 = (a8 - (unint64_t)a3) >> 3;
    if (v74 >= a12)
      v74 = a12;
    v75 = v74;
    if (v74 < 2)
      goto LABEL_87;
    while (1)
    {
      v76 = *(unsigned __int16 *)a10;
      if (!*(_WORD *)a10)
      {
        v92 = (int8x16_t *)&a10[v75];
        v93 = (int8x16_t *)a10;
        do
          v94 = v93++;
        while (v93 <= v92 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v94)) & 0x80) != 0);
        do
        {
          v95 = v94;
          v94 = (int8x16_t *)((char *)v94 + 4);
        }
        while (v94 <= v92 && !v95->i32[0]);
        if (v95 < v92)
        {
          while (!v95->i8[0])
          {
            v95 = (int8x16_t *)((char *)v95 + 1);
            if (v95 >= v92)
            {
              v95 = (int8x16_t *)&a10[v75];
              break;
            }
          }
        }
        v96 = (char *)v95 - a10;
        v97 = ((char *)v95 - a10) * a14;
        a3 += v97;
        result += v97;
        a10 += v97;
        v75 -= v96;
        goto LABEL_84;
      }
      if (v76 != 0xFFFF)
        break;
      v77 = (int8x16_t *)&a10[v75];
      v78 = (int8x16_t *)a10;
      do
        v79 = v78++;
      while (v78 <= v77 && (vminvq_u8((uint8x16_t)vceqq_s8(*v79, v72)) & 0x80) != 0);
      do
      {
        v80 = v79;
        v79 = (int8x16_t *)((char *)v79 + 4);
      }
      while (v79 <= v77 && v80->i32[0] == -1);
      if (v80 < v77)
      {
        while (v80->u8[0] == 255)
        {
          v80 = (int8x16_t *)((char *)v80 + 1);
          if (v80 >= v77)
          {
            v80 = (int8x16_t *)&a10[v75];
            break;
          }
        }
      }
      v81 = 0;
      v82 = (char *)v80 - a10;
      v83 = (char *)v80 - a10;
      do
      {
        v84 = (float16x8_t)vrev16q_s8(*(int8x16_t *)&a3->i8[v81]);
        v85 = (float16x8_t)vrev16q_s8(*(int8x16_t *)&result->i8[v81]);
        v86 = vcvt_hight_f32_f16(v84);
        v87 = vcvtq_f32_f16(*(float16x4_t *)v84.i8);
        v88 = vcvt_hight_f32_f16(v85);
        v89 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v87, 3);
        v90 = vcvtq_f32_f16(*(float16x4_t *)v85.i8);
        v91 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v86, 3);
        *(int8x16_t *)&result->i8[v81] = vrev16q_s8(vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v89), (int16x8_t)vcgtzq_f32(v91)), (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vmlsq_f32(v90, vmaxnmq_f32(vminnmq_f32(v89, _Q0), (float32x4_t)0), v90), v87)), vaddq_f32(vmlsq_f32(v88, vmaxnmq_f32(vminnmq_f32(v91, _Q0), (float32x4_t)0), v88),
                                                            v86)),
                                             (int8x16_t)v85));
        a10 += v17;
        v83 -= 2;
        v81 += v19;
      }
      while (v83 > 1);
      a3 = (float16x4_t *)((char *)a3 + v81);
      result = (float16x4_t *)((char *)result + v81);
      v75 = v75 - v82 + v83;
LABEL_84:
      if (v75 <= 1)
        goto LABEL_87;
    }
    v98 = 0;
    while (1)
    {
      v99 = (float16x8_t)vrev16q_s8(*(int8x16_t *)&a3->i8[v98]);
      v100 = (float16x8_t)vrev16q_s8(*(int8x16_t *)&result->i8[v98]);
      v101 = vcvtq_f32_f16(*(float16x4_t *)v99.i8);
      v102 = vcvt_hight_f32_f16(v100);
      v103 = vcvtq_f32_f16(*(float16x4_t *)v100.i8);
      v104 = vmulq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(BYTE1(v76)) & 0xFF00FF00FF00FFLL))), v73), vcvt_hight_f32_f16(v99));
      v105 = vmulq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v76) & 0xFF00FF00FF00FFLL))), v73), v101);
      v106 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v105, 3);
      v107 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v104, 3);
      *(int8x16_t *)&result->i8[v98] = vrev16q_s8(vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v106), (int16x8_t)vcgtzq_f32(v107)), (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(v105, vmlsq_f32(v103, vmaxnmq_f32(vminnmq_f32(v106, _Q0), (float32x4_t)0), v103))), vaddq_f32(v104, vmlsq_f32(v102, vmaxnmq_f32(vminnmq_f32(v107, _Q0), (float32x4_t)0),
                                                            v102))),
                                           (int8x16_t)v100));
      a10 += v17;
      v75 -= 2;
      if (v75 < 2)
        break;
      LOWORD(v76) = *(_WORD *)a10;
      v98 += v19;
      if ((unsigned __int16)(*(_WORD *)a10 - 1) >= 0xFFFEu)
      {
        result = (float16x4_t *)((char *)result + v98);
        a3 = (float16x4_t *)((char *)a3 + v98);
        goto LABEL_84;
      }
    }
    result = (float16x4_t *)((char *)result + v19 + v98);
    a3 = (float16x4_t *)((char *)a3 + v19 + v98);
LABEL_87:
    for (j = a12 - v74 + v75; j; --j)
    {
      if (*a10)
      {
        v109 = (float16x4_t)vrev16_s8((int8x8_t)*result);
        v110 = vcvtq_f32_f16(v109);
        v111 = vmulq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)vdup_n_s16(*a10))), v73), vcvtq_f32_f16((float16x4_t)vrev16_s8((int8x8_t)*a3)));
        v112 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v111, 3);
        *result = (float16x4_t)vrev16_s8(vbsl_s8((int8x8_t)vmovn_s32(vcgtzq_f32(v112)), (int8x8_t)vcvt_f16_f32(vaddq_f32(vmlsq_f32(v110, vmaxnmq_f32(vminnmq_f32(v112, _Q0), (float32x4_t)0), v110), v111)), (int8x8_t)v109));
      }
      v113 = &a3[a14];
      a10 += a14;
      if ((unint64_t)v113 >= a8)
        v114 = -(uint64_t)a7;
      else
        v114 = 0;
      a3 = &v113[v114];
      result = (float16x4_t *)((char *)result + v20);
    }
    a10 += a11;
    result += a2;
    v115 = &a5[a4];
    if ((unint64_t)v115 >= a9)
      v116 = v18;
    else
      v116 = 0;
    v117 = &v115[v116];
    v118 = a8 + 8 * v116 + 8 * a4;
    a3 += a4;
    if (a9)
    {
      a3 = v117;
      a8 = v118;
      a5 = v117;
    }
    _VF = __OFSUB__(a13--, 1);
    if (!((a13 < 0) ^ _VF | (a13 == 0)))
      continue;
    return result;
  }
}

void CGvImage_converter_data_key_release(CGColorSpaceRef *a1)
{
  if (a1)
  {
    CGColorSpaceRelease(a1[5]);
    CGColorSpaceRelease(a1[10]);
    free(a1);
  }
}

void CGvImageConverterDeallocate(char *a1)
{
  vImageConverter *v2;

  v2 = *(vImageConverter **)a1;
  if (v2)
    vImageConverter_Release(v2);
  if (!pthread_mutex_destroy((pthread_mutex_t *)(a1 + 8)))
    pthread_cond_destroy((pthread_cond_t *)(a1 + 72));
  free(a1);
}

BOOL CGPathContainsPoint(CGPathRef path, const CGAffineTransform *m, CGPoint point, BOOL eoFill)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  CGPathRef v11;
  CFTypeID v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double y;
  double x;
  CGPoint v21;

  v21 = point;
  if (path)
  {
    v9 = eoFill;
    v11 = path;
    y = point.y;
    x = point.x;
    if (CGPathDisableTypeValidation || (v12 = CFGetTypeID(path), v12 == CGPathGetTypeID()))
    {
      if ((_DWORD)path)
      {
        if (m)
          v21 = (CGPoint)vaddq_f64(*(float64x2_t *)&m->tx, vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&m->c, y), *(float64x2_t *)&m->a, x));
        LOBYTE(path) = CG::Path::contains_point((CGPathRef)((char *)v11 + 16), &v21, v9, v13, v14, v15, v16, v17);
      }
    }
    else
    {
      LOBYTE(path) = 0;
    }
  }
  return (char)path;
}

void CGPathAddUnevenCornersRoundedRect(char *cf, _anonymous_namespace_ *this, const CGRect *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12)
{
  CFTypeID v19;
  _BOOL4 is_valid;
  CGSize *v21;
  CGFloat width;
  CGFloat height;
  BOOL v24;
  CG::Path *v25;
  CGRect v26;
  CGSize v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  CGRect v35;

  v34 = *MEMORY[0x1E0C80C00];
  if (cf)
  {
    if (CGPathDisableTypeValidation || (v19 = CFGetTypeID(cf), v19 == CGPathGetTypeID()))
    {
      if (a3)
      {
        if (is_valid)
        {
          v35.origin.x = a9;
          v35.origin.y = a10;
          v35.size.width = a11;
          v35.size.height = a12;
          v26 = CGRectStandardize(v35);
          width = v27.width;
          height = v27.height;
          v24 = v27.width == v28 && v27.height == v29;
          if (v24 && v27.width == v30 && v27.height == v31 && v27.width == v32 && v27.height == v33)
          {
            v25 = (CG::Path *)(cf + 16);
            if (v27.width == 0.0 || v27.height == 0.0)
              CG::Path::append_rect(v25, &v26, (float64x2_t *)this);
            else
              CG::Path::append_rounded_rect(v25, &v26, *(CGSize *)&width, (const CGAffineTransform *)this);
          }
          else
          {
            CG::Path::append_uneven_rounded_rect((CG::Path *)(cf + 16), &v26, &v27, (float64x2_t *)this);
          }
        }
      }
    }
  }
}

const UInt8 *CGGradientApplyWithBlock(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const UInt8 *result;
  unint64_t v7;
  const UInt8 *v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    v5 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 40) + 2;
  else
    v5 = 2;
  result = CFDataGetBytePtr(*(CFDataRef *)(a1 + 40));
  if (*(_QWORD *)(a1 + 48))
  {
    v7 = 0;
    v8 = result + 8;
    v9 = 8 * v5;
    do
    {
      result = (const UInt8 *)(*(uint64_t (**)(uint64_t, const UInt8 *, double))(a2 + 16))(a2, v8, *((double *)v8 - 1));
      ++v7;
      v8 += v9;
    }
    while (v7 < *(_QWORD *)(a1 + 48));
  }
  return result;
}

uint64_t CGFontFinderGetDefault()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (**VTable)(void);

  v0 = pthread_mutex_lock(&default_font_finder_mutex);
  v8 = default_font_finder;
  if (!default_font_finder)
  {
    VTable = (uint64_t (**)(void))CGFontGetVTable(v0, v1, v2, v3, v4, v5, v6, v7);
    v8 = (*VTable)();
  }
  pthread_mutex_unlock(&default_font_finder_mutex);
  return v8;
}

CFTypeRef CGFontFinderCreateFontWithName(uint64_t a1, uint64_t a2)
{
  CFTypeRef v2;
  uint64_t (*v3)(_QWORD);
  const __CFURL *v4;
  const __CFURL *v5;
  __CFDictionary *FontsWithURL;
  const __CFArray *v7;
  const void *ValueAtIndex;
  char Count;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = 0;
  if (a1 && a2)
  {
    v3 = *(uint64_t (**)(_QWORD))(a1 + 24);
    if (v3 && (v4 = (const __CFURL *)v3(*(_QWORD *)(a1 + 8))) != 0)
    {
      v5 = v4;
      FontsWithURL = CGFontCreateFontsWithURL(v4);
      if (FontsWithURL)
      {
        v7 = FontsWithURL;
        if (CFArrayGetCount(FontsWithURL) != 1)
        {
          Count = CFArrayGetCount(v7);
          _CGHandleAssert("CGFontFinderCreateFontWithName", 104, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Fonts/CGFontFinder.c", "CFArrayGetCount(fonts) == 1", "count = %ld", v11, v12, v13, Count);
        }
        CFRelease(v5);
        ValueAtIndex = CFArrayGetValueAtIndex(v7, 0);
        v2 = CFRetain(ValueAtIndex);
        v5 = v7;
      }
      else
      {
        v2 = 0;
      }
      CFRelease(v5);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

CFTypeRef CGFontDBCopyFontWithName(uint64_t a1, const void *a2)
{
  uint64_t v3;
  const void *Value;
  CFTypeRef v5;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  const __CFDictionary *ValueAtIndex;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CFTypeRef v17;
  const void *v18;
  uint64_t v19;
  const void *v20;

  v3 = a1;
  if (a1)
  {
    if (a2)
      goto LABEL_3;
    return 0;
  }
  if (CGFontDBGetLocal_once != -1)
    dispatch_once_f(&CGFontDBGetLocal_once, 0, (dispatch_function_t)create_local_db);
  v3 = local_db;
  if (!a2)
    return 0;
LABEL_3:
  pthread_mutex_lock((pthread_mutex_t *)(v3 + 32));
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 8), a2);
  if (Value)
  {
    v5 = Value;
    CFRetain(Value);
LABEL_5:
    pthread_mutex_unlock((pthread_mutex_t *)(v3 + 32));
    return v5;
  }
  Count = CFArrayGetCount(*(CFArrayRef *)v3);
  if (Count >= 1)
  {
    v8 = Count;
    v9 = 0;
    while (1)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)v3, v9);
      v11 = CFDictionaryGetValue(ValueAtIndex, a2);
      if (v11)
        break;
      if (v8 == ++v9)
        goto LABEL_15;
    }
    add_fonts_at_path_locked(v3, (uint64_t)v11, a2, v12, v13, v14, v15, v16);
    v20 = CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 8), a2);
    if (v20)
    {
      v5 = CFRetain(v20);
      goto LABEL_5;
    }
LABEL_19:
    v5 = 0;
    goto LABEL_5;
  }
LABEL_15:
  v17 = copy_aliased_font_name_locked(v3, a2);
  if (!v17)
    goto LABEL_19;
  v18 = v17;
  pthread_mutex_unlock((pthread_mutex_t *)(v3 + 32));
  v19 = CGFontDBCopyFontWithName(v3, v18);
  CFRelease(v18);
  return (CFTypeRef)v19;
}

CGFontRef CGFontCreateWithFontName(CFStringRef name)
{
  uint64_t Default;
  CGFont *FontWithName;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t VTable;
  uint64_t v20;
  CFIndex Length;
  CFIndex v22;
  void *v23;
  uint64_t v24;
  const char **v25;

  initialize_font_database_once();
  if (!name)
    return 0;
  Default = CGFontFinderGetDefault();
  if (Default)
  {
    FontWithName = (CGFont *)CGFontFinderCreateFontWithName(Default, (uint64_t)name);
    if (FontWithName)
      return FontWithName;
  }
  FontWithName = (CGFont *)CGFontDBCopyFontWithName(0, name);
  if (FontWithName)
    return FontWithName;
  v11 = CGFontCreate(0, v4, v5, v6, v7, v8, v9, v10);
  FontWithName = (CGFont *)v11;
  if (!v11)
    return FontWithName;
  VTable = CGFontGetVTable(v11, v12, v13, v14, v15, v16, v17, v18);
  v20 = (*(uint64_t (**)(CFStringRef))(VTable + 24))(name);
  *((_QWORD *)FontWithName + 14) = v20;
  if (v20)
    return FontWithName;
  CFRelease(FontWithName);
  Length = CFStringGetLength(name);
  v22 = CFStringGetMaximumSizeForEncoding(Length, 0x600u) + 1;
  v23 = malloc_type_malloc(v22, 0x7EC2A73uLL);
  if (!CFStringGetCString(name, (char *)v23, v22, 0x600u))
  {
LABEL_11:
    free(v23);
    return 0;
  }
  v24 = 0;
  v25 = (const char **)substitution_fonts;
  while (strcmp((const char *)v23, *v25))
  {
    ++v24;
    v25 += 3;
    if (v24 == 5)
      goto LABEL_11;
  }
  free(v23);
  return (CGFontRef)CGFontCreateWithName(substitution_fonts[3 * v24 + 1]);
}

uint64_t CGDataProviderSequentialGetBytesInternal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v8;
  unint64_t v9;

  if (a3 < 1 || *(_BYTE *)(a1 + 261))
    return 0;
  v6 = a3;
  v4 = 0;
  while (1)
  {
    v8 = (*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(a1 + 40))(*(_QWORD *)(a1 + 24), a2, v6);
    if (!v8)
      break;
    if (v8 >= v6)
      v9 = v6;
    else
      v9 = v8;
    v4 += v9;
    a2 += v9;
    v6 -= v9;
    if (!v6)
      return v4;
  }
  *(_BYTE *)(a1 + 261) = 1;
  return v4;
}

uint64_t CGDashCompare(uint64_t a1, uint64_t a2)
{
  double v3;
  double v4;
  unint64_t v5;
  unint64_t v6;
  int v7;

  if (a1 == a2)
    return 0;
  if (a1 && !a2)
    return 1;
  if (!a1 && a2)
    return -1;
  v3 = *(double *)(a1 + 8);
  v4 = *(double *)(a2 + 8);
  if (v3 > v4)
    return 1;
  if (v3 < v4)
    return -1;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a2 + 16);
  if (v5 > v6)
    return 1;
  if (v5 < v6)
    return -1;
  v7 = memcmp((const void *)(a1 + 24), (const void *)(a2 + 24), 8 * v5);
  if (v7 > 0)
    return 1;
  if (v7)
    return -1;
  return 0;
}

uint64_t CGContextDelegateDrawLinearGradient(uint64_t result)
{
  uint64_t (*v1)(void);

  if (result)
  {
    v1 = *(uint64_t (**)(void))(result + 104);
    if (v1)
      return v1();
    else
      return 1006;
  }
  return result;
}

double CGColorNxMTransformGetTransform@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int v8;

  if (CGColorNxMTransformGetTransform_cglibrarypredicate != -1)
    dispatch_once(&CGColorNxMTransformGetTransform_cglibrarypredicate, &__block_literal_global_21);
  v8 = 0;
  v6 = 0u;
  v7 = 0u;
  CGColorNxMTransformGetTransform_f(&v6, a1);
  result = *(double *)&v6;
  v5 = v7;
  *(_OWORD *)a2 = v6;
  *(_OWORD *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 32) = v8;
  return result;
}

uint64_t static Region.Builder.buildArray(_:)@<X0>(uint64_t result@<X0>, int64x2_t *a2@<X8>)
{
  int64x2_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  int64x2_t v9;
  int64x2_t v10;
  _OWORD v11[2];
  __n128 v12;
  uint64_t v13;
  int64x2_t v14;
  int64x2_t v15;
  int64x2_t v16;
  uint64_t v17;

  v3 = vdupq_n_s64(0x7FF8000000000000uLL);
  v14 = v3;
  v15 = v3;
  v4 = MEMORY[0x1E0DEE9D8];
  v16.i64[0] = MEMORY[0x1E0DEE9D8];
  v16.i64[1] = MEMORY[0x1E0DEE9D8];
  v17 = MEMORY[0x1E0DEE9D8];
  v5 = *(_QWORD *)(result + 16);
  if (v5)
  {
    v6 = (_QWORD *)(swift_bridgeObjectRetain() + 80);
    do
    {
      v7 = *v6;
      v8 = *((_OWORD *)v6 - 2);
      v11[0] = *((_OWORD *)v6 - 3);
      v11[1] = v8;
      v12 = *((__n128 *)v6 - 1);
      v13 = v7;
      Region.formUnion(_:)((uint64_t)v11, v12);
      v6 += 7;
      --v5;
    }
    while (v5);
    result = swift_bridgeObjectRelease();
    v3 = v14;
    v9 = v15;
    v10 = v16;
    v4 = v17;
  }
  else
  {
    v10 = vdupq_n_s64(MEMORY[0x1E0DEE9D8]);
    v9 = v3;
  }
  *a2 = v3;
  a2[1] = v9;
  a2[2] = v10;
  a2[3].i64[0] = v4;
  return result;
}

int64x2_t static Region.Builder.buildBlock()@<Q0>(int64x2_t *a1@<X8>)
{
  int64x2_t result;
  uint64_t v2;

  result = vdupq_n_s64(0x7FF8000000000000uLL);
  *a1 = result;
  a1[1] = result;
  v2 = MEMORY[0x1E0DEE9D8];
  a1[2].i64[0] = MEMORY[0x1E0DEE9D8];
  a1[2].i64[1] = v2;
  a1[3].i64[0] = v2;
  return result;
}

void static Region.Builder.buildExpression(_:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v10;

  v5 = a2 + a4;
  if (v5 <= a2)
  {
    v6 = a2;
    if (v5 >= a2)
      goto LABEL_12;
  }
  else
  {
    v6 = v5;
    v5 = a2;
  }
  v7 = a3 + a5;
  if (a3 + a5 > a3)
  {
    v8 = a3 + a5;
    v7 = a3;
    goto LABEL_7;
  }
  v8 = a3;
  if (v7 >= a3)
  {
LABEL_12:
    v5 = NAN;
    v6 = NAN;
    v7 = NAN;
    v8 = NAN;
    goto LABEL_13;
  }
LABEL_7:
  if (v5 >= v6 || v7 >= v8)
  {
    __break(1u);
    goto LABEL_12;
  }
LABEL_13:
  *(double *)a1 = v5;
  *(double *)(a1 + 8) = v6;
  *(double *)(a1 + 16) = v7;
  *(double *)(a1 + 24) = v8;
  v10 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 32) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v10;
}

uint64_t static Region.Builder.buildOptional(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v2 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = MEMORY[0x1E0DEE9D8];
  v8 = 0x7FF8000000000000;
  if (v6)
    v9 = *a1;
  else
    v9 = 0x7FF8000000000000;
  if (v6)
    v10 = a1[1];
  else
    v10 = 0x7FF8000000000000;
  if (v6)
    v11 = a1[2];
  else
    v11 = 0x7FF8000000000000;
  if (v6)
  {
    v8 = a1[3];
    v12 = a1[4];
  }
  else
  {
    v12 = MEMORY[0x1E0DEE9D8];
  }
  if (v6)
    v13 = a1[5];
  else
    v13 = MEMORY[0x1E0DEE9D8];
  if (v6)
    v7 = a1[6];
  *a2 = v9;
  a2[1] = v10;
  a2[2] = v11;
  a2[3] = v8;
  a2[4] = v12;
  a2[5] = v13;
  a2[6] = v7;
  return sub_184A789B8(v3, v2, v4, v5, v6);
}

__n128 _s12CoreGraphics6RegionV7BuilderV11buildEither5firstA2Cn_tFZ_0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v3;
  __n128 result;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v3;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 32) = result;
  *(_QWORD *)(a2 + 48) = v2;
  return result;
}

uint64_t static Region.Builder.buildPartialBlock(accumulated:next:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _OWORD v8[2];
  __n128 v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_OWORD *)(a3 + 16) = v4;
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a3 + 48) = v3;
  v5 = *(_QWORD *)(a2 + 48);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  v9 = *(__n128 *)(a2 + 32);
  v10 = v5;
  return Region.formUnion(_:)((uint64_t)v8, v9);
}

__n128 Region.init(builder:)@<Q0>(void (*a1)(_OWORD *__return_ptr)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __n128 result;
  __int128 v5;
  _OWORD v6[3];
  uint64_t v7;

  a1(v6);
  v3 = v7;
  v5 = v6[1];
  result = (__n128)v6[2];
  *(_OWORD *)a2 = v6[0];
  *(_OWORD *)(a2 + 16) = v5;
  *(__n128 *)(a2 + 32) = result;
  *(_QWORD *)(a2 + 48) = v3;
  return result;
}

uint64_t sub_184A789B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a5)
  {
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

ValueMetadata *type metadata accessor for Region.Builder()
{
  return &type metadata for Region.Builder;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for CGVector(uint64_t a1)
{
  sub_184A78D0C(a1, &qword_1EDD197A0);
}

void type metadata accessor for CGColor(uint64_t a1)
{
  sub_184A78D0C(a1, &qword_1EDD197A8);
}

__n128 __swift_memcpy20_4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t sub_184A78A50(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 20))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_184A78A70(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 20) = v3;
  return result;
}

void type metadata accessor for shape_bounds_t(uint64_t a1)
{
  sub_184A78D0C(a1, &qword_1EDD197B0);
}

uint64_t initializeBufferWithCopyOfBuffer for Bounds(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_184A78AF4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_184A78B14(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 48) = v3;
  return result;
}

void type metadata accessor for CGAffineTransform(uint64_t a1)
{
  sub_184A78D0C(a1, &qword_1EDD197B8);
}

void type metadata accessor for CGPath(uint64_t a1)
{
  sub_184A78D0C(a1, &qword_1EDD197C0);
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for Bounds(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Bounds(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
  sub_184A78D0C(a1, &qword_1EDD196D0);
}

uint64_t getEnumTagSinglePayload for Region.UnsafeRectSpans(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Region.UnsafeRectSpans(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_184A78D0C(a1, &qword_1EDD19718);
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_184A78D0C(a1, &qword_1EDD19710);
}

uint64_t sub_184A78C50(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)(a1 + 8))
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t sub_184A78C94(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 2)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = 0;
  }
  return result;
}

void type metadata accessor for CGPathElement(uint64_t a1)
{
  sub_184A78D0C(a1, &qword_1EDD197C8);
}

void type metadata accessor for ComparisonResult(uint64_t a1)
{
  sub_184A78D0C(a1, &qword_1EDD197D0);
}

void type metadata accessor for CGPathElementType(uint64_t a1)
{
  sub_184A78D0C(a1, qword_1EDD197D8);
}

void sub_184A78D0C(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_184A78D5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v5[2];

  v3 = *(_QWORD *)(*(_QWORD *)(a3 - 16) + 8);
  v5[0] = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8);
  v5[1] = v3;
  return MEMORY[0x186DC3348](&unk_184E372E0, a1, v5);
}

uint64_t sub_184A78D98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_184A78DB0(a1, a2, a3, MEMORY[0x1E0DEA210]);
}

uint64_t sub_184A78DA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_184A78DB0(a1, a2, a3, MEMORY[0x1E0DEDE28]);
}

uint64_t sub_184A78DB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  int8x16_t v8;

  v8 = vextq_s8(*(int8x16_t *)(a3 - 16), *(int8x16_t *)(a3 - 16), 8uLL);
  v7 = MEMORY[0x186DC3348](&unk_184E37268, a2, &v8);
  return MEMORY[0x186DC3348](a4, a1, &v7);
}

void sub_184A78E08(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t AssociatedTypeWitness;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, _QWORD, uint64_t);
  uint64_t v22;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;

  v25 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  v24 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](a1, a3);
  v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[1] = *(_QWORD *)(v5 + 40);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v10, v13);
  v15 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = swift_getAssociatedTypeWitness();
  v17 = sub_184E30B00();
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)v23 - v19;
  v21 = *(void (**)(char *, _QWORD, uint64_t))(v12 + 16);
  v22 = v23[0];
  v21(v15, v23[0], v11);
  sub_184E309D4();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v20, 0, 1, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v7, v22 + *(int *)(a1 + 52), v4);
  sub_184E309D4();
  sub_184A78FF8((uint64_t)v20, v25);
}

void sub_184A78FF8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  swift_getAssociatedTypeWitness();
  v4 = sub_184E30B00();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  type metadata accessor for BothSequence.Iterator();
}

uint64_t sub_184A79090(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;

  v3 = v2 + *(int *)(a1 + 52);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v3, v1, AssociatedTypeWitness);
}

uint64_t sub_184A790E8@<X0>(uint64_t a1@<X8>)
{
  char *v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t result;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t AssociatedTypeWitness;
  uint64_t v26;

  v26 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = sub_184E30B00();
  v22 = *(_QWORD *)(v2 - 8);
  v23 = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v24 = (char *)&v19 - v4;
  v5 = swift_getAssociatedTypeWitness();
  v6 = sub_184E30B00();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v19 - v9;
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))((char *)&v19 - v9, v1, v6);
  v21 = *(_QWORD *)(v5 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  v12 = v11(v10, 1, v5);
  v13 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v14 = v26;
  v20 = v13;
  v13((uint64_t)v10, v6);
  if (v12 == 1)
    goto LABEL_5;
  result = v11(v1, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_getAssociatedConformanceWitness();
    v16 = v24;
    sub_184E30B0C();
    v17 = AssociatedTypeWitness;
    v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v23);
      v20((uint64_t)v1, v6);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v1, 1, 1, v5);
LABEL_5:
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      return sub_184E30B0C();
    }
    (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v14, v16, v17);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 56))(v14, 0, 1, v17);
  }
  return result;
}

void sub_184A79390(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  sub_184A78E08(a1, a2, a3);
}

uint64_t sub_184A793A4()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v1, v0);
}

uint64_t sub_184A793C0()
{
  return 0;
}

uint64_t sub_184A793C8()
{
  return 2;
}

uint64_t sub_184A793D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = sub_184A7AEBC(v2, a1, a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v2, a1);
  return v4;
}

uint64_t sub_184A79424()
{
  return sub_184E309EC();
}

void sub_184A79444(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a2, a1, AssociatedTypeWitness);
  _s5IndexVMa();
}

uint64_t sub_184A794D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;

  v3 = v2 + *(int *)(a1 + 52);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v3, v1, AssociatedTypeWitness);
}

void sub_184A79528(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t, uint64_t)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  v18 = a5;
  v9 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v11);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v17 - v15;
  a4(v12, a2);
  a4(v9, a3);
  sub_184A79444((uint64_t)v16, v18);
}

void sub_184A7965C(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, char *, uint64_t);
  void (*v26)(char *, uint64_t);
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v28 = a5;
  v29 = *(_QWORD *)(a2 + 24);
  v30 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v31 = (char *)v27 - v10;
  v27[1] = a2;
  v11 = *(_QWORD *)(a2 + 16);
  v12 = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(v12 - 8);
  v15 = MEMORY[0x1E0C80A78](v12, v14);
  v17 = (char *)v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v15, v18);
  v21 = (char *)v27 - v20;
  MEMORY[0x1E0C80A78](v19, v22);
  v24 = (char *)v27 - v23;
  v25 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v27[0] = a1;
  v25((char *)v27 - v23, a1, v12);
  sub_184E30A7C();
  swift_getAssociatedConformanceWitness();
  if ((sub_184E309B0() & 1) != 0)
  {
    v25(v17, v21, v12);
    v32 = v11;
    v33 = v29;
    v34 = a3;
    v35 = v30;
    _s5IndexVMa();
  }
  sub_184E30A4C();
  sub_184E30A40();
  v26 = *(void (**)(char *, uint64_t))(v13 + 8);
  v26(v21, v12);
  v26(v24, v12);
  sub_184A79444((uint64_t)v17, v28);
}

uint64_t sub_184A798BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v26 = a1;
  v7 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v29 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v30 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v11 = (char *)&v24 - v10;
  v12 = *(_QWORD *)(a2 + 16);
  v13 = swift_getAssociatedTypeWitness();
  v27 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v18);
  v31 = (char *)&v24 - v19;
  sub_184E30A40();
  v28 = v11;
  v24 = v7;
  v25 = a4;
  sub_184E30A40();
  sub_184E30A7C();
  swift_getAssociatedConformanceWitness();
  if ((sub_184E309B0() & 1) != 0)
  {
    sub_184E30A70();
    v32 = v12;
    v33 = v24;
    v34 = a3;
    v35 = v25;
    _s5IndexVMa();
  }
  v20 = v31;
  v21 = sub_184E30A70();
  v22 = *(void (**)(char *, uint64_t))(v27 + 8);
  v22(v17, v13);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v28, v30);
  v22(v20, v13);
  return v21;
}

void sub_184A79B48(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  __n128 v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  char *v38;
  uint64_t AssociatedTypeWitness;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v48 = a4;
  v43 = a1;
  v40 = a5;
  v6 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v45 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v7);
  v44 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v37 - v11;
  v13 = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(v13 - 8);
  v46 = v13;
  v47 = v14;
  v16 = MEMORY[0x1E0C80A78](v13, v15);
  v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v16, v19);
  v22 = (char *)&v37 - v21;
  MEMORY[0x1E0C80A78](v20, v23);
  v25 = (char *)&v37 - v24;
  sub_184E30A40();
  v41 = v6;
  v42 = v12;
  sub_184E30A40();
  sub_184E30A7C();
  v26 = sub_184E30A70();
  v27 = v43;
  if (v26 > v43)
  {
    sub_184E30A58();
    v28 = v46;
    v29 = *(void (**)(char *, uint64_t))(v47 + 8);
    v29(v22, v46);
    v29(v25, v28);
    (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v44, v42, AssociatedTypeWitness);
    v30 = (uint64_t)v18;
    goto LABEL_5;
  }
  v31 = v26;
  v37 = a3;
  v38 = v18;
  v32 = v42;
  v33 = v45;
  v34 = v18;
  v35 = v46;
  (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v34, v22, v46);
  if (!__OFSUB__(v27, v31))
  {
    sub_184E30A58();
    v36 = *(void (**)(char *, uint64_t))(v47 + 8);
    v36(v22, v35);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v32, AssociatedTypeWitness);
    v36(v25, v35);
    v30 = (uint64_t)v38;
LABEL_5:
    sub_184A79444(v30, v40);
  }
  __break(1u);
}

void sub_184A79E20(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v11 = sub_184A798BC(a1, a3, a4, a5);
  v12 = __OFADD__(v11, a2);
  v13 = v11 + a2;
  if (!v12)
    sub_184A79B48(v13, a3, a4, a5, a6);
  __break(1u);
}

uint64_t sub_184A79E88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t result;

  v9 = sub_184A798BC(a2, a3, a4, a5);
  v10 = sub_184A798BC(a1, a3, a4, a5);
  v11 = __OFSUB__(v9, v10);
  result = v9 - v10;
  if (v11)
    __break(1u);
  return result;
}

uint64_t sub_184A79EF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, uint64_t, uint64_t);
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  void (*v21)(_QWORD *, _QWORD);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[4];

  v27 = a4;
  v28 = a5;
  v8 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v11);
  v14 = (char *)v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v15);
  v17 = (char *)v26 - v16;
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v26[1] = a1;
  v18((char *)v26 - v16, a1, AssociatedTypeWitness);
  sub_184E30A7C();
  swift_getAssociatedConformanceWitness();
  LOBYTE(a1) = sub_184E309B0();
  v19 = *(void (**)(char *, uint64_t))(v10 + 8);
  v19(v14, AssociatedTypeWitness);
  if ((a1 & 1) != 0)
  {
    v20 = *(_QWORD *)(a2 + 24);
    v29[0] = v8;
    v29[1] = v20;
    v29[2] = a3;
    v29[3] = v27;
    _s5IndexVMa();
  }
  v21 = (void (*)(_QWORD *, _QWORD))sub_184E30AE8();
  v23 = v22;
  v24 = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v28, v23, v24);
  v21(v29, 0);
  return ((uint64_t (*)(char *, uint64_t))v19)(v17, AssociatedTypeWitness);
}

void sub_184A7A0E8()
{
  _s5IndexVMa();
}

uint64_t sub_184A7A130(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  __n128 v9;
  uint64_t v10;
  _BYTE *v11;
  char v12;
  void (*v13)(_BYTE *, uint64_t, uint64_t);
  char v14;
  void (*v15)(_BYTE *, uint64_t);
  _BYTE v17[96];

  v5 = *(_QWORD *)(a1 - 8);
  v6 = MEMORY[0x1E0C80A78](a1, a2);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = &v17[-v10];
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v12 = sub_184E309B0();
  v13 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16);
  v13(v11, v3, a1);
  v13(v8, v2, a1);
  if ((v12 & 1) != 0)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    v14 = sub_184E309B0();
  }
  else
  {
    v14 = 0;
  }
  v15 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
  v15(v8, a1);
  v15(v11, a1);
  return v14 & 1;
}

uint64_t sub_184A7A2B8()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  if ((sub_184E309B0() & 1) != 0)
  {
    swift_getAssociatedTypeWitness();
    _s5IndexVMa();
  }
  return sub_184E30974() & 1;
}

uint64_t sub_184A7A3F8()
{
  return sub_184A7A2B8();
}

void sub_184A7A414()
{
  sub_184A7A0E8();
}

void sub_184A7A424(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_184A79528(a1, *(_QWORD *)(a2 - 8), *(_QWORD *)(a2 - 16), (void (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB528], a3);
}

void sub_184A7A448(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_184A79528(a1, *(_QWORD *)(a2 - 8), *(_QWORD *)(a2 - 16), (void (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB5A8], a3);
}

void (*sub_184A7A46C(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4))(_QWORD *a1)
{
  uint64_t *v8;

  v8 = (uint64_t *)malloc(0x28uLL);
  *a1 = v8;
  v8[4] = (uint64_t)sub_184A7A4FC(v8, a2, a3, *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16));
  return sub_184A7A4D0;
}

void sub_184A7A4D0(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

void (*sub_184A7A4FC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(_QWORD *a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  void *v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *a1 = AssociatedTypeWitness;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  a1[1] = v11;
  v12 = malloc(*(_QWORD *)(v11 + 64));
  a1[2] = (uint64_t)v12;
  sub_184A79EF8(a2, a3, a4, a5, (uint64_t)v12);
  return sub_184A7A5A0;
}

void sub_184A7A5A0(_QWORD *a1)
{
  void *v1;

  v1 = (void *)a1[2];
  (*(void (**)(void *, _QWORD))(a1[1] + 8))(v1, *a1);
  free(v1);
}

void sub_184A7A5E4()
{
  _s5IndexVMa();
}

uint64_t sub_184A7A614()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_184E30B00();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v0, 1, 1, v1);
}

void sub_184A7A64C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  sub_184A79E20(a1, a2, a3, *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16), a5);
}

uint64_t sub_184A7A65C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_184A79E88(a1, a2, a3, *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16));
}

uint64_t sub_184A7A668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_184A7AD10(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x1E0DEA3C0]);
}

uint64_t sub_184A7A68C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_184A7AD10(a1, a2, a3, a4, MEMORY[0x1E0DEA4B0], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x1E0DEA3D0]);
}

void sub_184A7A6B4(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_184A7965C(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16), a4);
}

void sub_184A7A6C0()
{
  _s5IndexVMa();
}

void sub_184A7A700(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  MEMORY[0x1E0C80A78](a1, a2);
  sub_184A7965C(v3, v2, v4, v5, (uint64_t)&v7 - v6);
}

void sub_184A7A784(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  __n128 v19;
  _QWORD v20[14];

  v20[6] = a4;
  v20[2] = a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v20[5] = (char *)v20 - v10;
  v20[3] = a3;
  v11 = *(_QWORD *)(a3 + 8);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = swift_getAssociatedTypeWitness();
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v20[9] = (char *)v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15, v17);
  MEMORY[0x1E0C80A78](v18, v19);
  v20[7] = v7;
  v20[8] = v6;
  v20[10] = v7;
  v20[11] = v12;
  v20[12] = v6;
  v20[13] = v11;
  _s5IndexVMa();
}

void sub_184A7A8C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v7 = *(int *)(a1 + 52);
  *(_QWORD *)(v6 - 184) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v5, v1 + v7, v4);
  sub_184E30A40();
  swift_getAssociatedConformanceWitness();
  if ((sub_184E309B0() & 1) != 0)
  {
    v8 = *(_QWORD *)(v6 - 152);
    sub_184E3095C();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v4);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(*(_QWORD *)(v6 - 120), v2, v4);
  }
  else
  {
    v8 = *(_QWORD *)(v6 - 152);
    sub_184E30A7C();
    sub_184E3095C();
    v9 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v9(v2, v4);
    v9(v5, v4);
  }
  sub_184A79444(v8, *(_QWORD *)(v6 - 144));
}

void sub_184A7AA04(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  sub_184A7A784(a1, *(_QWORD *)(a2 - 8), *(_QWORD *)(a2 - 16), a3);
}

void sub_184A7AA10()
{
  _s5IndexVMa();
}

void sub_184A7AA58(uint64_t a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  MEMORY[0x1E0C80A78](a1, a2);
  sub_184A7A784(v10, v11, v12, (uint64_t)&a10 - v13);
}

uint64_t sub_184A7AA9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v0, v2, v1);
}

void sub_184A7AADC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  sub_184A79E20(a1, a2, a3, *(_QWORD *)(*(_QWORD *)(a4 - 8) + 8), *(_QWORD *)(*(_QWORD *)(a4 - 16) + 8), a5);
}

uint64_t sub_184A7AAF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_184A79E88(a1, a2, a3, *(_QWORD *)(*(_QWORD *)(a4 - 8) + 8), *(_QWORD *)(*(_QWORD *)(a4 - 16) + 8));
}

void sub_184A7AB00()
{
  JUMPOUT(0x186DC3348);
}

void sub_184A7AB10()
{
  JUMPOUT(0x186DC3348);
}

void sub_184A7AB20()
{
  JUMPOUT(0x186DC3348);
}

void sub_184A7AB30()
{
  JUMPOUT(0x186DC3348);
}

void sub_184A7AB40()
{
  JUMPOUT(0x186DC3348);
}

void sub_184A7AB50()
{
  JUMPOUT(0x186DC3348);
}

uint64_t sub_184A7AB60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  char v13;
  void (*v14)(char *, uint64_t, uint64_t);
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t result;
  void (*v18)(char *, uint64_t);
  uint64_t v19;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v4 = sub_184E30AF4();
  v5 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x1E0C80A78](v4, v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v10);
  v12 = (char *)&v19 - v11;
  v13 = sub_184E30980();
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v14(v12, a1, v4);
  v14(v9, a2, v4);
  if ((v13 & 1) == 0)
  {
    v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v9, v4);
    result = ((uint64_t (*)(char *, uint64_t))v18)(v12, v4);
    goto LABEL_5;
  }
  v15 = sub_184E30980();
  v16 = *(void (**)(char *, uint64_t))(v5 + 8);
  v16(v9, v4);
  result = ((uint64_t (*)(char *, uint64_t))v16)(v12, v4);
  if ((v15 & 1) == 0)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t sub_184A7ACE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_184A7AD10(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x1E0DEA3C0]);
}

uint64_t sub_184A7ACFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_184A7AD10(a1, a2, a3, a4, MEMORY[0x1E0DEA4B0], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x1E0DEA3D0]);
}

uint64_t sub_184A7AD10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t), uint64_t (*a6)(char *, char *, uint64_t, uint64_t))
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  char v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  uint64_t (*v25)(char *, char *, uint64_t, uint64_t);

  v25 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v11 = a5(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  v12 = *(_QWORD *)(v11 - 8);
  v14 = MEMORY[0x1E0C80A78](v11, v13);
  v16 = (char *)&v24 - v15;
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v14, v18);
  v20 = (char *)&v24 - v19;
  v21 = sub_184E30980();
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v16, a2, v11);
  if ((v21 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
    result = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v20, AssociatedTypeWitness);
    goto LABEL_5;
  }
  v22 = v25(v20, &v16[*(int *)(v11 + 36)], AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
  result = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v20, AssociatedTypeWitness);
  if ((v22 & 1) == 0)
LABEL_5:
    __break(1u);
  return result;
}

void type metadata accessor for BothSequence.Iterator()
{
  JUMPOUT(0x186DC32F4);
}

void _s5IndexVMa()
{
  JUMPOUT(0x186DC32F4);
}

uint64_t sub_184A7AED8()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_184A7AEE0()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  swift_getAssociatedTypeWitness();
  result = sub_184E30B00();
  if (v1 <= 0x3F)
  {
    result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_184A7AFA0(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_DWORD *)(v5 + 84))
    v6 = *(_QWORD *)(v5 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64) + 1;
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = v6 + v9;
  v11 = (*(_BYTE *)(v5 + 80) | *(_BYTE *)(v8 + 80));
  if (v11 > 7
    || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0
    || ((v6 + v9) & ~v9) + *(_QWORD *)(v8 + 64) > 0x18)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v11 + 16) & ~v11));
    swift_retain();
  }
  else
  {
    v15 = v7;
    v16 = ~v9;
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v5 + 48))(a2, 1, AssociatedTypeWitness))
    {
      memcpy(a1, a2, v6);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, AssociatedTypeWitness);
    }
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)a1 + v10) & v16, ((unint64_t)a2 + v10) & v16, v15);
  }
  return a1;
}

uint64_t sub_184A7B114(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, AssociatedTypeWitness))
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
  v4 = *(_DWORD *)(v3 + 84);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = swift_getAssociatedTypeWitness();
  v7 = v5 + a1;
  if (!v4)
    ++v7;
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))((v7 + *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80), v6);
}

void *sub_184A7B1D8(void *a1, const void *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  int v6;
  size_t v7;
  size_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, AssociatedTypeWitness))
  {
    v6 = *(_DWORD *)(v5 + 84);
    v7 = *(_QWORD *)(v5 + 64);
    if (v6)
      v8 = v7;
    else
      v8 = v7 + 1;
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, AssociatedTypeWitness);
    v6 = *(_DWORD *)(v5 + 84);
    v7 = *(_QWORD *)(v5 + 64);
  }
  if (v6)
    v9 = v7;
  else
    v9 = v7 + 1;
  v10 = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 16))(((unint64_t)a1 + v9 + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), ((unint64_t)a2 + v9 + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), v10);
  return a1;
}

void *sub_184A7B2F4(void *a1, void *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t (*v6)(void *, uint64_t, uint64_t);
  int v7;
  int v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 1, AssociatedTypeWitness);
  v8 = v6(a2, 1, AssociatedTypeWitness);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, AssociatedTypeWitness);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v5 + 84))
    v9 = *(_QWORD *)(v5 + 64);
  else
    v9 = *(_QWORD *)(v5 + 64) + 1;
  memcpy(a1, a2, v9);
LABEL_10:
  if (*(_DWORD *)(v5 + 84))
    v10 = *(_QWORD *)(v5 + 64);
  else
    v10 = *(_QWORD *)(v5 + 64) + 1;
  v11 = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(v11 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v12 + 24))(((unint64_t)a1 + v10 + *(unsigned __int8 *)(v12 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80), ((unint64_t)a2 + v10 + *(unsigned __int8 *)(v12 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80), v11);
  return a1;
}

void *sub_184A7B45C(void *a1, const void *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  int v6;
  size_t v7;
  size_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, AssociatedTypeWitness))
  {
    v6 = *(_DWORD *)(v5 + 84);
    v7 = *(_QWORD *)(v5 + 64);
    if (v6)
      v8 = v7;
    else
      v8 = v7 + 1;
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, AssociatedTypeWitness);
    v6 = *(_DWORD *)(v5 + 84);
    v7 = *(_QWORD *)(v5 + 64);
  }
  if (v6)
    v9 = v7;
  else
    v9 = v7 + 1;
  v10 = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 32))(((unint64_t)a1 + v9 + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), ((unint64_t)a2 + v9 + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), v10);
  return a1;
}

void *sub_184A7B578(void *a1, void *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t (*v6)(void *, uint64_t, uint64_t);
  int v7;
  int v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 1, AssociatedTypeWitness);
  v8 = v6(a2, 1, AssociatedTypeWitness);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, AssociatedTypeWitness);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v5 + 84))
    v9 = *(_QWORD *)(v5 + 64);
  else
    v9 = *(_QWORD *)(v5 + 64) + 1;
  memcpy(a1, a2, v9);
LABEL_10:
  if (*(_DWORD *)(v5 + 84))
    v10 = *(_QWORD *)(v5 + 64);
  else
    v10 = *(_QWORD *)(v5 + 64) + 1;
  v11 = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(v11 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v12 + 40))(((unint64_t)a1 + v10 + *(unsigned __int8 *)(v12 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80), ((unint64_t)a2 + v10 + *(unsigned __int8 *)(v12 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80), v11);
  return a1;
}

uint64_t sub_184A7B6E0(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if ((_DWORD)v6)
    v7 = v6 - 1;
  else
    v7 = 0;
  v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= v7)
    v10 = v7;
  else
    v10 = *(_DWORD *)(v8 + 84);
  if ((_DWORD)v6)
    v11 = *(_QWORD *)(v5 + 64);
  else
    v11 = *(_QWORD *)(v5 + 64) + 1;
  if (!a2)
    return 0;
  v12 = *(unsigned __int8 *)(v8 + 80);
  v13 = v11 + v12;
  if (a2 <= v10)
    goto LABEL_29;
  v14 = (v13 & ~v12) + *(_QWORD *)(v8 + 64);
  v15 = 8 * v14;
  if (v14 <= 3)
  {
    v17 = ((a2 - v10 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v17))
    {
      v16 = *(_DWORD *)(a1 + v14);
      if (!v16)
        goto LABEL_29;
      goto LABEL_20;
    }
    if (v17 > 0xFF)
    {
      v16 = *(unsigned __int16 *)(a1 + v14);
      if (!*(_WORD *)(a1 + v14))
        goto LABEL_29;
      goto LABEL_20;
    }
    if (v17 < 2)
    {
LABEL_29:
      if (v10)
      {
        if (v7 < v9)
          return (*(uint64_t (**)(uint64_t))(v8 + 48))((v13 + a1) & ~v12);
        v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, AssociatedTypeWitness);
        if (v20 >= 2)
          return v20 - 1;
        else
          return 0;
      }
      return 0;
    }
  }
  v16 = *(unsigned __int8 *)(a1 + v14);
  if (!*(_BYTE *)(a1 + v14))
    goto LABEL_29;
LABEL_20:
  v18 = (v16 - 1) << v15;
  if (v14 > 3)
    v18 = 0;
  if ((_DWORD)v14)
  {
    if (v14 <= 3)
      v19 = v14;
    else
      v19 = 4;
    __asm { BR              X12 }
  }
  return v10 + v18 + 1;
}

void sub_184A7B8EC(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  size_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7)
    v8 = v7 - 1;
  else
    v8 = 0;
  v9 = 0u;
  v10 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v10 + 84) <= v8)
    v11 = v8;
  else
    v11 = *(_DWORD *)(v10 + 84);
  if (v7)
    v12 = *(_QWORD *)(v6 + 64);
  else
    v12 = *(_QWORD *)(v6 + 64) + 1;
  v13 = ((v12 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))
      + *(_QWORD *)(v10 + 64);
  if (a3 > v11)
  {
    if (v13 > 3)
    {
      v9 = 1u;
      if (v11 >= a2)
LABEL_26:
        __asm { BR              X13 }
LABEL_19:
      v15 = ~v11 + a2;
      if (v13 < 4)
      {
        if ((_DWORD)v13)
        {
          v16 = v15 & ~(-1 << (8 * v13));
          bzero(a1, v13);
          if ((_DWORD)v13 == 3)
          {
            *(_WORD *)a1 = v16;
            a1[2] = BYTE2(v16);
          }
          else if ((_DWORD)v13 == 2)
          {
            *(_WORD *)a1 = v16;
          }
          else
          {
            *a1 = v16;
          }
        }
      }
      else
      {
        bzero(a1, v13);
        *(_DWORD *)a1 = v15;
      }
      __asm { BR              X10 }
    }
    v14 = ((a3 - v11 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
    if (HIWORD(v14))
    {
      v9 = 4u;
      if (v11 >= a2)
        goto LABEL_26;
      goto LABEL_19;
    }
    if (v14 >= 0x100)
      v9 = 2;
    else
      v9 = v14 > 1;
  }
  if (v11 >= a2)
    goto LABEL_26;
  goto LABEL_19;
}

void sub_184A7BB98()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
}

void sub_184A7BBA0()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
}

void sub_184A7BBC8()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_184A7BBD8()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_184A7BBE0()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t sub_184A7BBEC()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_184A7BCA0(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = v6 + v9;
  v11 = (*(_BYTE *)(v5 + 80) | *(_BYTE *)(v8 + 80));
  if (v11 > 7
    || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0
    || ((v6 + v9) & (unint64_t)~v9) + *(_QWORD *)(v8 + 64) > 0x18)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v11 + 16) & ~v11));
    swift_retain();
  }
  else
  {
    v15 = v7;
    v16 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)a1 + v10) & v16, ((unint64_t)a2 + v10) & v16, v15);
  }
  return a1;
}

uint64_t sub_184A7BDBC(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
  v4 = *(_QWORD *)(v3 + 64) + a1;
  v5 = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))((v4 + *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80), v5);
}

uint64_t sub_184A7BE60(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t sub_184A7BF1C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t sub_184A7BFD8(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t sub_184A7C094(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t sub_184A7C150(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int *)(v8 + 84);
  if (v9 <= v6)
    v10 = v6;
  else
    v10 = *(_DWORD *)(v8 + 84);
  if (!a2)
    return 0;
  v11 = *(unsigned __int8 *)(v8 + 80);
  v12 = *(_QWORD *)(v5 + 64) + v11;
  if (a2 <= v10)
    goto LABEL_23;
  v13 = (v12 & ~v11) + *(_QWORD *)(v8 + 64);
  v14 = 8 * v13;
  if (v13 <= 3)
  {
    v16 = ((a2 - v10 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      v15 = *(_DWORD *)(a1 + v13);
      if (!v15)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      v15 = *(unsigned __int16 *)(a1 + v13);
      if (!*(_WORD *)(a1 + v13))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_23:
      if (v10)
      {
        if (v6 >= v9)
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, AssociatedTypeWitness);
        else
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))((v12 + a1) & ~v11, v9, v7);
      }
      return 0;
    }
  }
  v15 = *(unsigned __int8 *)(a1 + v13);
  if (!*(_BYTE *)(a1 + v13))
    goto LABEL_23;
LABEL_14:
  v17 = (v15 - 1) << v14;
  if (v13 > 3)
    v17 = 0;
  if ((_DWORD)v13)
  {
    if (v13 <= 3)
      v18 = v13;
    else
      v18 = 4;
    __asm { BR              X12 }
  }
  return v10 + v17 + 1;
}

void sub_184A7C330(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  size_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v8 + 84) <= v7)
    v9 = v7;
  else
    v9 = *(_DWORD *)(v8 + 84);
  v10 = ((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
      + *(_QWORD *)(v8 + 64);
  if (a3 <= v9)
  {
    v11 = 0u;
  }
  else if (v10 <= 3)
  {
    v13 = ((a3 - v9 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v11 = 4u;
    }
    else if (v13 >= 0x100)
    {
      v11 = 2;
    }
    else
    {
      v11 = v13 > 1;
    }
  }
  else
  {
    v11 = 1u;
  }
  if (v9 < a2)
  {
    v12 = ~v9 + a2;
    if (v10 < 4)
    {
      if ((_DWORD)v10)
      {
        v14 = v12 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if ((_DWORD)v10 == 3)
        {
          *(_WORD *)a1 = v14;
          a1[2] = BYTE2(v14);
        }
        else if ((_DWORD)v10 == 2)
        {
          *(_WORD *)a1 = v14;
        }
        else
        {
          *a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t sub_184A7C594()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_184A7C620(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (*(_BYTE *)(v6 + 80) | *(_BYTE *)(v7 + 80));
  if (v10 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || (v9 & (unint64_t)~v8) + *(_QWORD *)(v7 + 64) > 0x18)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v10 + 16) & ~v10));
    swift_retain();
  }
  else
  {
    v14 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(((unint64_t)v4 + v9) & v14, ((unint64_t)a2 + v9) & v14, v5);
  }
  return v4;
}

uint64_t sub_184A7C6F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((*(_QWORD *)(v4 + 64) + a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

uint64_t sub_184A7C748(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 16))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_184A7C7B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_184A7C820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_184A7C88C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_184A7C8F8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_184A7C9D4 + 4 * byte_184E37258[v17 - 1]))();
}

void sub_184A7CA50(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

void type metadata accessor for BothSequence()
{
  JUMPOUT(0x186DC32F4);
}

uint64_t sub_184A7CC5C()
{
  return MEMORY[0x1E0DEDBE0];
}

uint64_t sub_184A7CC68()
{
  return MEMORY[0x1E0DEE110];
}

unint64_t sub_184A7CC74(uint64_t a1)
{
  unint64_t result;

  result = sub_184A7CC98();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_184A7CC98()
{
  unint64_t result;

  result = qword_1EDD19960;
  if (!qword_1EDD19960)
  {
    result = MEMORY[0x186DC3348](MEMORY[0x1E0DEB190], MEMORY[0x1E0DEB188]);
    atomic_store(result, (unint64_t *)&qword_1EDD19960);
  }
  return result;
}

uint64_t sub_184A7CCDC()
{
  return MEMORY[0x1E0DEDC78];
}

uint64_t sub_184A7CCE8()
{
  return MEMORY[0x1E0DEE1A8];
}

unint64_t sub_184A7CCF4(uint64_t a1)
{
  unint64_t result;

  result = sub_184A7CD18();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_184A7CD18()
{
  unint64_t result;

  result = qword_1EDD19968;
  if (!qword_1EDD19968)
  {
    result = MEMORY[0x186DC3348](MEMORY[0x1E0DEB078], MEMORY[0x1E0DEB070]);
    atomic_store(result, (unint64_t *)&qword_1EDD19968);
  }
  return result;
}

uint64_t sub_184A7CD5C()
{
  return MEMORY[0x1E0DEB430];
}

uint64_t sub_184A7CD68()
{
  return MEMORY[0x1E0DEBBB0];
}

unint64_t sub_184A7CD74(uint64_t a1)
{
  unint64_t result;

  result = sub_184A7CD98();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_184A7CD98()
{
  unint64_t result;

  result = qword_1EDD19970;
  if (!qword_1EDD19970)
  {
    result = MEMORY[0x186DC3348](MEMORY[0x1E0DEF048], MEMORY[0x1E0DEF040]);
    atomic_store(result, (unint64_t *)&qword_1EDD19970);
  }
  return result;
}

BOOL static CGAffineTransform.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3] && a1[4] == a2[4] && a1[5] == a2[5];
}

BOOL sub_184A7CE48(float64x2_t *a1, float64x2_t *a2)
{
  _BOOL8 result;

  result = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*a1, *a2), (int32x4_t)vceqq_f64(a1[1], a2[1]))), 0xFuLL))) & 1) != 0&& a1[2].f64[0] == a2[2].f64[0])
  {
    return a1[2].f64[1] == a2[2].f64[1];
  }
  return result;
}

uint64_t sub_184A7CEA0()
{
  sub_184E30C38();
  sub_184E30C38();
  sub_184E30C38();
  sub_184E30C38();
  sub_184E30C38();
  return sub_184E30C38();
}

uint64_t sub_184A7CF20()
{
  sub_184E30C5C();
  sub_184A7CEA0();
  return sub_184E30C44();
}

uint64_t sub_184A7CF90()
{
  return sub_184A7CEA0();
}

uint64_t sub_184A7CFC8()
{
  sub_184E30C20();
  sub_184A7CEA0();
  return sub_184E30C50();
}

const CGFloat *CGColorRef.components.getter()
{
  CGColor *v0;
  const CGFloat *result;
  const CGFloat *v2;
  size_t NumberOfComponents;

  result = CGColorGetComponents(v0);
  if (result)
  {
    v2 = result;
    NumberOfComponents = CGColorGetNumberOfComponents(v0);
    return (const CGFloat *)sub_184A7F3E0(v2, NumberOfComponents);
  }
  return result;
}

uint64_t _CGColorInitTrampoline.init(_colorLiteralRed:green:blue:alpha:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, float a4@<S0>, float a5@<S1>, float a6@<S2>, float a7@<S3>)
{
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  _BYTE *v17;
  CGColorSpaceRef v18;
  void (*v19)(void);
  CGColorSpace *v20;
  uint64_t v21;
  uint64_t result;
  _BYTE v23[32];
  double v24;
  double v25;
  double v26;
  double v27;

  v14 = sub_184E30B00();
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = &v23[-v16];
  v18 = CGColorSpaceCreateWithName(CFSTR("kCGColorSpaceSRGB"));
  if (v18)
  {
    v24 = a4;
    v25 = a5;
    v26 = a6;
    v27 = a7;
    v19 = *(void (**)(void))(a2 + 8);
    v20 = v18;
    v19();
    v21 = *(_QWORD *)(a1 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v21 + 48))(v17, 1, a1) != 1)
    {

      return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v21 + 32))(a3, v17, a1);
    }
    __break(1u);
  }
  result = sub_184E30B30();
  __break(1u);
  return result;
}

void sub_184A7D1CC(CGColorSpace *a1@<X0>, const CGFloat *a2@<X1>, CGColorRef *a3@<X8>)
{
  CGColorRef v5;

  v5 = CGColorCreate(a1, a2);

  *a3 = v5;
}

uint64_t sub_184A7D204@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>, float a4@<S1>, float a5@<S2>, float a6@<S3>)
{
  return _CGColorInitTrampoline.init(_colorLiteralRed:green:blue:alpha:)(a1, (uint64_t)&protocol witness table for CGColorRef, a2, a3, a4, a5, a6);
}

int64_t CGColorSpaceRef.colorTable.getter()
{
  CGColorSpace *v0;
  CGColorSpace *v1;
  CGColorSpace *v2;
  int64_t NumberOfComponents;
  uint64_t v4;
  int64_t result;
  size_t v6;

  if (CGColorSpaceGetModel(v0) != kCGColorSpaceModelIndexed)
    return 0;
  v1 = CGColorSpaceGetBaseColorSpace(v0);
  if (v1)
  {
    v2 = v1;
    NumberOfComponents = CGColorSpaceGetNumberOfComponents(v1);

  }
  else
  {
    NumberOfComponents = 1;
  }
  result = CGColorSpaceGetColorTableCount(v0);
  v6 = result * NumberOfComponents;
  if ((unsigned __int128)(result * (__int128)NumberOfComponents) >> 64 == (result * NumberOfComponents) >> 63)
  {
    if ((v6 & 0x8000000000000000) == 0)
    {
      if (v6)
      {
        v4 = sub_184E30A10();
        *(_QWORD *)(v4 + 16) = v6;
        bzero((void *)(v4 + 32), v6);
      }
      else
      {
        v4 = MEMORY[0x1E0DEE9D8];
      }
      CGColorSpaceGetColorTable(v0, (uint8_t *)(v4 + 32));
      return v4;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void CGContextRef.setLineDash(phase:lengths:)(uint64_t a1, CGFloat a2)
{
  CGContext *v2;

  CGContextSetLineDash(v2, a2, (const CGFloat *)(a1 + 32), *(_QWORD *)(a1 + 16));
}

Swift::Void __swiftcall CGContextRef.move(to:)(CGPoint to)
{
  CGContext *v1;

  CGContextMoveToPoint(v1, to.x, to.y);
}

Swift::Void __swiftcall CGContextRef.addLine(to:)(CGPoint to)
{
  CGContext *v1;

  CGContextAddLineToPoint(v1, to.x, to.y);
}

Swift::Void __swiftcall CGContextRef.addCurve(to:control1:control2:)(CGPoint to, CGPoint control1, CGPoint control2)
{
  CGContext *v3;

  CGContextAddCurveToPoint(v3, control1.x, control1.y, control2.x, control2.y, to.x, to.y);
}

Swift::Void __swiftcall CGContextRef.addQuadCurve(to:control:)(CGPoint to, CGPoint control)
{
  CGContext *v2;

  CGContextAddQuadCurveToPoint(v2, control.x, control.y, to.x, to.y);
}

Swift::Void __swiftcall CGContextRef.addRects(_:)(Swift::OpaquePointer a1)
{
  CGContext *v1;

  CGContextAddRects(v1, (const CGRect *)a1._rawValue + 1, *((_QWORD *)a1._rawValue + 2));
}

Swift::Void __swiftcall CGContextRef.addLines(between:)(Swift::OpaquePointer between)
{
  CGContext *v1;

  CGContextAddLines(v1, (const CGPoint *)between._rawValue + 2, *((_QWORD *)between._rawValue + 2));
}

void CGContextRef.addArc(center:radius:startAngle:endAngle:clockwise:)(char a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  CGContext *v6;

  CGContextAddArc(v6, a2, a3, a4, a5, a6, a1 & 1);
}

void CGContextRef.addArc(tangent1End:tangent2End:radius:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  CGContext *v5;

  CGContextAddArcToPoint(v5, a1, a2, a3, a4, a5);
}

Swift::Void __swiftcall CGContextRef.fillPath(using:)(CoreGraphics::CGPathFillRule using)
{
  sub_184A7D3A0((_BYTE *)using, (uint64_t (*)(uint64_t))CGContextFillPath, (uint64_t (*)(uint64_t))CGContextEOFillPath);
}

Swift::Void __swiftcall CGContextRef.clip(using:)(CoreGraphics::CGPathFillRule using)
{
  sub_184A7D3A0((_BYTE *)using, (uint64_t (*)(uint64_t))CGContextClip, (uint64_t (*)(uint64_t))CGContextEOClip);
}

uint64_t sub_184A7D3A0(_BYTE *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(uint64_t))
{
  uint64_t v3;

  if (*a1)
    a2 = a3;
  return a2(v3);
}

Swift::Void __swiftcall CGContextRef.fill(_:)(Swift::OpaquePointer a1)
{
  CGContext *v1;

  CGContextFillRects(v1, (const CGRect *)a1._rawValue + 1, *((_QWORD *)a1._rawValue + 2));
}

Swift::Void __swiftcall CGContextRef.strokeLineSegments(between:)(Swift::OpaquePointer between)
{
  CGContext *v1;

  CGContextStrokeLineSegments(v1, (const CGPoint *)between._rawValue + 2, *((_QWORD *)between._rawValue + 2));
}

Swift::Void __swiftcall CGContextRef.clip(to:)(Swift::OpaquePointer to)
{
  CGContext *v1;

  CGContextClipToRects(v1, (const CGRect *)to._rawValue + 1, *((_QWORD *)to._rawValue + 2));
}

Swift::Void __swiftcall CGContextRef.draw(_:in:byTiling:)(CGImageRef _, __C::CGRect in, Swift::Bool byTiling)
{
  CGContext *v3;

  if (byTiling)
    CGContextDrawTiledImage(v3, (CGRect)in, _);
  else
    CGContextDrawImage(v3, (CGRect)in, _);
}

uint64_t CGContextRef.draw(_:in:by:options:)(CGImageRef image, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  CGContext *v12;

  return CGContextDrawImageApplyingToneMapping(v12, image, a2, a3, a9, a10, a11, a12, a4, a5, a6, a7);
}

double CGContextRef.textPosition.getter()
{
  CGContext *v0;
  double result;

  *(_QWORD *)&result = *(_OWORD *)&CGContextGetTextPosition(v0);
  return result;
}

void CGContextRef.textPosition.setter(CGFloat a1, CGFloat a2)
{
  CGContext *v2;

  CGContextSetTextPosition(v2, a1, a2);
}

void (*CGContextRef.textPosition.modify(uint64_t a1))(uint64_t a1)
{
  CGContext *v1;

  *(_QWORD *)(a1 + 16) = v1;
  *(CGPoint *)a1 = CGContextGetTextPosition(v1);
  return sub_184A7D46C;
}

void sub_184A7D46C(uint64_t a1)
{
  CGContextSetTextPosition(*(CGContextRef *)(a1 + 16), *(CGFloat *)a1, *(CGFloat *)(a1 + 8));
}

Swift::Void __swiftcall CGContextRef.showGlyphs(_:at:)(Swift::OpaquePointer _, Swift::OpaquePointer at)
{
  CGContext *v2;
  size_t v3;

  v3 = *((_QWORD *)_._rawValue + 2);
  if (v3 == *((_QWORD *)at._rawValue + 2))
    CGContextShowGlyphsAtPositions(v2, (const CGGlyph *)_._rawValue + 16, (const CGPoint *)at._rawValue + 2, v3);
  else
    __break(1u);
}

double static CGPoint.zero.getter()
{
  return 0.0;
}

CGPoint_optional __swiftcall CGPoint.init(dictionaryRepresentation:)(CFDictionaryRef dictionaryRepresentation)
{
  char v1;
  double v2;
  double v3;
  CGPoint_optional result;

  v1 = sub_184A7D780(dictionaryRepresentation, (uint64_t (*)(void *, _QWORD *))CGPointMakeWithDictionaryRepresentation);
  result.value.y = v3;
  result.value.x = v2;
  result.is_nil = v1;
  return result;
}

uint64_t CGPoint.customMirror.getter(double a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v4 = sub_184E30C74();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD19978);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(double *)v19 = a1;
  *(double *)&v19[1] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD19980);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_184E375F0;
  *(_QWORD *)(v13 + 32) = 120;
  *(_QWORD *)(v13 + 40) = 0xE100000000000000;
  v14 = MEMORY[0x1E0DEF040];
  *(double *)(v13 + 48) = a1;
  *(_QWORD *)(v13 + 72) = v14;
  *(_QWORD *)(v13 + 80) = 121;
  *(_QWORD *)(v13 + 88) = 0xE100000000000000;
  *(_QWORD *)(v13 + 120) = v14;
  *(double *)(v13 + 96) = a2;
  v15 = *MEMORY[0x1E0DEDFB8];
  v16 = sub_184E30C68();
  v17 = *(_QWORD *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 104))(v12, v15, v16);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v12, 0, 1, v16);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v8, *MEMORY[0x1E0DEDFE8], v4);
  type metadata accessor for CGPoint(0);
  return sub_184E30C80();
}

uint64_t sub_184A7D6A0()
{
  double *v0;

  return CGPoint.customMirror.getter(*v0, v0[1]);
}

void CGPoint.customPlaygroundQuickLook.getter(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(_BYTE *)(a1 + 32) = 11;
}

__n128 sub_184A7D6B8@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  a1[2].n128_u8[0] = 11;
  return result;
}

double CGPoint.init(from:)(_QWORD *a1)
{
  return sub_184A7F570(a1);
}

uint64_t CGPoint.encode(to:)(_QWORD *a1, double a2, double a3)
{
  return sub_184A7DCEC(a1, a2, a3);
}

void sub_184A7D704(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_184A7DB0C(a1, a2);
}

double static CGSize.zero.getter()
{
  return 0.0;
}

CGSize __swiftcall CGSize.init(width:height:)(Swift::Int width, Swift::Int height)
{
  double v2;
  double v3;
  CGSize result;

  v2 = (double)width;
  v3 = (double)height;
  result.height = v3;
  result.width = v2;
  return result;
}

CGSize_optional __swiftcall CGSize.init(dictionaryRepresentation:)(CFDictionaryRef dictionaryRepresentation)
{
  char v1;
  double v2;
  double v3;
  CGSize_optional result;

  v1 = sub_184A7D780(dictionaryRepresentation, (uint64_t (*)(void *, _QWORD *))CGSizeMakeWithDictionaryRepresentation);
  result.value.height = v3;
  result.value.width = v2;
  result.is_nil = v1;
  return result;
}

uint64_t sub_184A7D780(void *a1, uint64_t (*a2)(void *, _QWORD *))
{
  int v3;
  _QWORD v5[3];

  v5[2] = *MEMORY[0x1E0C80C00];
  v5[0] = 0;
  v5[1] = 0;
  v3 = a2(a1, v5);

  if (v3)
    return v5[0];
  else
    return 0;
}

uint64_t CGSize.customMirror.getter(double a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v4 = sub_184E30C74();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD19978);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(double *)v19 = a1;
  *(double *)&v19[1] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD19980);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_184E375F0;
  v14 = MEMORY[0x1E0DEF040];
  *(_QWORD *)(v13 + 32) = 0x6874646977;
  *(_QWORD *)(v13 + 40) = 0xE500000000000000;
  *(double *)(v13 + 48) = a1;
  *(_QWORD *)(v13 + 72) = v14;
  *(_QWORD *)(v13 + 80) = 0x746867696568;
  *(_QWORD *)(v13 + 88) = 0xE600000000000000;
  *(_QWORD *)(v13 + 120) = v14;
  *(double *)(v13 + 96) = a2;
  v15 = *MEMORY[0x1E0DEDFB8];
  v16 = sub_184E30C68();
  v17 = *(_QWORD *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 104))(v12, v15, v16);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v12, 0, 1, v16);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v8, *MEMORY[0x1E0DEDFE8], v4);
  type metadata accessor for CGSize(0);
  return sub_184E30C80();
}

uint64_t sub_184A7D9B4()
{
  double *v0;

  return CGSize.customMirror.getter(*v0, v0[1]);
}

void CGSize.customPlaygroundQuickLook.getter(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(_BYTE *)(a1 + 32) = 12;
}

__n128 sub_184A7D9CC@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  a1[2].n128_u8[0] = 12;
  return result;
}

BOOL static CGSize.== infix(_:_:)(double a1, double a2, double a3, double a4)
{
  return a2 == a4 && a1 == a3;
}

BOOL sub_184A7D9F8(double *a1, double *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

uint64_t sub_184A7DA14()
{
  sub_184E30C5C();
  sub_184A7DB58();
  return sub_184E30C44();
}

uint64_t sub_184A7DA80()
{
  return sub_184A7DB58();
}

uint64_t sub_184A7DA98()
{
  sub_184E30C20();
  sub_184A7DB58();
  return sub_184E30C50();
}

double CGSize.init(from:)(_QWORD *a1)
{
  return sub_184A7F570(a1);
}

uint64_t CGSize.encode(to:)(_QWORD *a1, double a2, double a3)
{
  return sub_184A7DCEC(a1, a2, a3);
}

void sub_184A7DB0C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double v4;
  uint64_t v5;

  v4 = sub_184A7F570(a1);
  if (!v2)
  {
    *(double *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v5;
  }
}

uint64_t sub_184A7DB34(_QWORD *a1)
{
  double *v1;

  return CGSize.encode(to:)(a1, *v1, v1[1]);
}

double static CGVector.zero.getter()
{
  return 0.0;
}

uint64_t sub_184A7DB58()
{
  sub_184E30C38();
  return sub_184E30C38();
}

uint64_t _sSo7CGPointV12CoreGraphicsE16debugDescriptionSSvg_0()
{
  sub_184E30A1C();
  sub_184E309C8();
  swift_bridgeObjectRelease();
  sub_184E309C8();
  sub_184E30A1C();
  sub_184E309C8();
  swift_bridgeObjectRelease();
  sub_184E309C8();
  return 40;
}

uint64_t sub_184A7DC34()
{
  sub_184E30A1C();
  sub_184E309C8();
  swift_bridgeObjectRelease();
  sub_184E309C8();
  sub_184E30A1C();
  sub_184E309C8();
  swift_bridgeObjectRelease();
  sub_184E309C8();
  return 40;
}

double CGVector.init(from:)(_QWORD *a1)
{
  return sub_184A7F570(a1);
}

uint64_t CGVector.encode(to:)(_QWORD *a1, double a2, double a3)
{
  return sub_184A7DCEC(a1, a2, a3);
}

uint64_t sub_184A7DCEC(_QWORD *a1, double a2, double a3)
{
  uint64_t v3;
  _BYTE v7[24];
  uint64_t v8;
  double v9;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_184E30CA4();
  v9 = a2;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v7, v8);
  sub_184A7F50C();
  sub_184E30BB4();
  if (!v3)
  {
    v9 = a3;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v7, v8);
    sub_184E30BB4();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
}

double static CGRect.zero.getter()
{
  return 0.0;
}

__C::CGRect __swiftcall CGRect.init(x:y:width:height:)(Swift::Int x, Swift::Int y, Swift::Int width, Swift::Int height)
{
  double v4;
  double v5;
  double v6;
  double v7;
  __C::CGRect result;

  v4 = (double)x;
  v5 = (double)y;
  v6 = (double)width;
  v7 = (double)height;
  result.size.height = v7;
  result.size.width = v6;
  result.origin.y = v5;
  result.origin.x = v4;
  return result;
}

void __swiftcall CGRect.init(dictionaryRepresentation:)(__C::CGRect_optional *__return_ptr retstr, CFDictionaryRef dictionaryRepresentation)
{
  _BOOL4 v4;
  unint64_t v5;
  int8x16_t v6;
  CGSize v7;
  CGRect v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  memset(&v8, 0, sizeof(v8));
  v4 = CGRectMakeWithDictionaryRepresentation(dictionaryRepresentation, &v8);

  if (v4)
    v5 = -1;
  else
    v5 = 0;
  v6 = (int8x16_t)vdupq_n_s64(v5);
  v7 = (CGSize)vandq_s8((int8x16_t)v8.size, v6);
  retstr->value.origin = (CGPoint)vandq_s8((int8x16_t)v8.origin, v6);
  retstr->value.size = v7;
  retstr->is_nil = !v4;
}

__n128 CGRect.divided(atDistance:from:)@<Q0>(CGRectEdge edge@<W0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>, CGFloat a7@<D4>)
{
  __n128 result;
  CGSize size;
  CGSize v11;
  CGRect v12;
  CGRect slice;
  uint64_t v14;
  CGRect v15;

  v14 = *MEMORY[0x1E0C80C00];
  memset(&slice, 0, sizeof(slice));
  memset(&v12, 0, sizeof(v12));
  v15.origin.x = a4;
  v15.origin.y = a5;
  v15.size.width = a6;
  v15.size.height = a7;
  CGRectDivide(v15, &slice, &v12, a3, edge);
  result = (__n128)v12.origin;
  size = v12.size;
  v11 = slice.size;
  *(CGPoint *)a2 = slice.origin;
  *(CGSize *)(a2 + 16) = v11;
  *(__n128 *)(a2 + 32) = result;
  *(CGSize *)(a2 + 48) = size;
  return result;
}

uint64_t CGRect.x.getter()
{
  return sub_184A7DF50(CGRectGetMinX);
}

uint64_t CGRect.y.getter()
{
  return sub_184A7DF50(CGRectGetMinY);
}

uint64_t CGRect.customMirror.getter(double a1, double a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[4];

  v8 = sub_184E30C74();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD19978);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(double *)v24 = a1;
  *(double *)&v24[1] = a2;
  *(double *)&v24[2] = a3;
  *(double *)&v24[3] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD19980);
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_184E375F0;
  *(_QWORD *)(v17 + 32) = 0x6E696769726FLL;
  *(_QWORD *)(v17 + 40) = 0xE600000000000000;
  type metadata accessor for CGPoint(0);
  *(double *)(v17 + 48) = a1;
  *(double *)(v17 + 56) = a2;
  *(_QWORD *)(v17 + 72) = v18;
  *(_QWORD *)(v17 + 80) = 1702521203;
  *(_QWORD *)(v17 + 88) = 0xE400000000000000;
  type metadata accessor for CGSize(0);
  *(_QWORD *)(v17 + 120) = v19;
  *(double *)(v17 + 96) = a3;
  *(double *)(v17 + 104) = a4;
  v20 = *MEMORY[0x1E0DEDFB8];
  v21 = sub_184E30C68();
  v22 = *(_QWORD *)(v21 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 104))(v16, v20, v21);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v16, 0, 1, v21);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v12, *MEMORY[0x1E0DEDFE8], v8);
  type metadata accessor for CGRect(0);
  return sub_184E30C80();
}

uint64_t sub_184A7E124()
{
  double *v0;

  return CGRect.customMirror.getter(*v0, v0[1], v0[2], v0[3]);
}

void CGRect.customPlaygroundQuickLook.getter(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 24) = a5;
  *(_BYTE *)(a1 + 32) = 10;
}

__n128 sub_184A7E144@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)v1;
  v3 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 32) = 10;
  return result;
}

uint64_t CGRect.debugDescription.getter()
{
  sub_184E30B24();
  swift_bridgeObjectRelease();
  sub_184E30A1C();
  sub_184E309C8();
  swift_bridgeObjectRelease();
  sub_184E309C8();
  sub_184E30A1C();
  sub_184E309C8();
  swift_bridgeObjectRelease();
  sub_184E309C8();
  sub_184E30A1C();
  sub_184E309C8();
  swift_bridgeObjectRelease();
  sub_184E309C8();
  sub_184E30A1C();
  sub_184E309C8();
  swift_bridgeObjectRelease();
  sub_184E309C8();
  return 40;
}

uint64_t sub_184A7E274()
{
  return CGRect.debugDescription.getter();
}

BOOL static CGRect.== infix(_:_:)(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  return CGRectEqualToRect(*(CGRect *)&a1, *(CGRect *)&a5);
}

BOOL sub_184A7E294(CGRect *a1, CGRect *a2)
{
  return CGRectEqualToRect(*a1, *a2);
}

uint64_t sub_184A7E2B8(double a1, double a2, double a3, double a4)
{
  CGRectStandardize(*(CGRect *)&a1);
  sub_184E30C38();
  sub_184E30C38();
  sub_184E30C38();
  return sub_184E30C38();
}

uint64_t sub_184A7E334()
{
  double *v0;
  double v1;
  double v2;
  double v3;
  double v4;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  sub_184E30C5C();
  sub_184A7E2B8(v1, v2, v3, v4);
  return sub_184E30C44();
}

uint64_t sub_184A7E3B4()
{
  double *v0;

  return sub_184A7E2B8(*v0, v0[1], v0[2], v0[3]);
}

uint64_t sub_184A7E3C0()
{
  double *v0;
  double v1;
  double v2;
  double v3;
  double v4;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  sub_184E30C20();
  sub_184A7E2B8(v1, v2, v3, v4);
  return sub_184E30C50();
}

double CGRect.init(from:)(_QWORD *a1)
{
  return sub_184A7F69C(a1);
}

uint64_t CGRect.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[24];
  uint64_t v4;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_184E30CA4();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  type metadata accessor for CGPoint(0);
  sub_184A7FDB4(&qword_1EDD196F0, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, (uint64_t)&protocol conformance descriptor for CGPoint);
  sub_184E30BB4();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    type metadata accessor for CGSize(0);
    sub_184A7FDB4(&qword_1EDD19708, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, (uint64_t)&protocol conformance descriptor for CGSize);
    sub_184E30BB4();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

void sub_184A7E58C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = sub_184A7F69C(a1);
  if (!v2)
  {
    *(double *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
    *(_QWORD *)(a2 + 24) = v7;
  }
}

uint64_t sub_184A7E5B8(_QWORD *a1)
{
  return CGRect.encode(to:)(a1);
}

void static CGAffineTransform.identity.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0x3FF0000000000000;
  a1[4] = 0;
  a1[5] = 0;
}

double CGAffineTransform.init(from:)@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  sub_184A7F830(a1, v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t CGAffineTransform.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[24];
  uint64_t v4;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_184E30CA4();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  sub_184A7F50C();
  sub_184E30BB4();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    sub_184E30BB4();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    sub_184E30BB4();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    sub_184E30BB4();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    sub_184E30BB4();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    sub_184E30BB4();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

double sub_184A7E828@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  sub_184A7F830(a1, v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_184A7E868(_QWORD *a1)
{
  return CGAffineTransform.encode(to:)(a1);
}

CGImageRef_optional __swiftcall CGImageRef.copy(maskingColorComponents:)(Swift::OpaquePointer maskingColorComponents)
{
  CGImage *v1;

  return (CGImageRef_optional)CGImageCreateWithMaskingColors(v1, (const CGFloat *)maskingColorComponents._rawValue + 4);
}

Swift::Void __swiftcall CGContextRef.draw(_:in:)(CGLayerRef _, __C::CGRect in)
{
  CGContext *v2;

  CGContextDrawLayerInRect(v2, (CGRect)in, _);
}

Swift::Void __swiftcall CGContextRef.draw(_:at:)(CGLayerRef _, CGPoint at)
{
  CGContext *v2;

  CGContextDrawLayerAtPoint(v2, at, _);
}

CoreGraphics::CGPathFillRule_optional __swiftcall CGPathFillRule.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  if (rawValue == 1)
    v2 = 1;
  else
    v2 = 2;
  if (!rawValue)
    v2 = 0;
  *v1 = v2;
  return (CoreGraphics::CGPathFillRule_optional)rawValue;
}

uint64_t CGPathFillRule.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

BOOL sub_184A7E8C4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_184A7E8DC()
{
  sub_184E30C20();
  sub_184E30C2C();
  return sub_184E30C50();
}

uint64_t sub_184A7E920()
{
  return sub_184E30C2C();
}

uint64_t sub_184A7E948()
{
  sub_184E30C20();
  sub_184E30C2C();
  return sub_184E30C50();
}

_QWORD *sub_184A7E988@<X0>(_QWORD *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (*result)
    v3 = v2;
  else
    v3 = 0;
  *a2 = v3;
  return result;
}

void sub_184A7E9A8(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

CGPathRef CGPathRef.copy(dashingWithPhase:lengths:transform:)(uint64_t a1, _OWORD *a2, CGFloat a3)
{
  const CGPath *v3;
  __int128 v4;
  CGPathRef result;
  CGAffineTransform v6;

  v4 = a2[1];
  *(_OWORD *)&v6.a = *a2;
  *(_OWORD *)&v6.c = v4;
  *(_OWORD *)&v6.tx = a2[2];
  result = CGPathCreateCopyByDashingPath(v3, &v6, a3, (const CGFloat *)(a1 + 32), *(_QWORD *)(a1 + 16));
  if (!result)
    __break(1u);
  return result;
}

CGPathRef CGPathRef.copy(strokingWithWidth:lineCap:lineJoin:miterLimit:transform:)(CGLineCap lineCap, CGLineJoin lineJoin, _OWORD *a3, CGFloat a4, CGFloat a5)
{
  const CGPath *v5;
  __int128 v6;
  CGPathRef result;
  CGAffineTransform v8;

  v6 = a3[1];
  *(_OWORD *)&v8.a = *a3;
  *(_OWORD *)&v8.c = v6;
  *(_OWORD *)&v8.tx = a3[2];
  result = CGPathCreateCopyByStrokingPath(v5, &v8, a4, lineCap, lineJoin, a5);
  if (!result)
    __break(1u);
  return result;
}

Swift::Bool __swiftcall CGPathRef.contains(_:using:transform:)(CGPoint _, CoreGraphics::CGPathFillRule using, CGAffineTransform *transform)
{
  const CGPath *v3;
  char v4;
  __int128 v5;
  CGAffineTransform v7;

  v4 = *(_BYTE *)using;
  v5 = *(_OWORD *)&transform->c;
  *(_OWORD *)&v7.a = *(_OWORD *)&transform->a;
  *(_OWORD *)&v7.c = v5;
  *(_OWORD *)&v7.tx = *(_OWORD *)&transform->tx;
  return CGPathContainsPoint(v3, &v7, _, v4);
}

void CGMutablePathRef.addRoundedRect(in:cornerWidth:cornerHeight:transform:)(_OWORD *a1, double a2, double a3, double a4, double a5, CGFloat a6, CGFloat a7)
{
  CGPath *v7;
  __int128 v8;
  CGAffineTransform v9;

  v8 = a1[1];
  *(_OWORD *)&v9.a = *a1;
  *(_OWORD *)&v9.c = v8;
  *(_OWORD *)&v9.tx = a1[2];
  CGPathAddRoundedRect(v7, &v9, *(CGRect *)&a2, a6, a7);
}

Swift::Void __swiftcall CGMutablePathRef.move(to:transform:)(CGPoint to, CGAffineTransform *transform)
{
  CGPath *v2;
  __int128 v3;
  CGAffineTransform v4;

  v3 = *(_OWORD *)&transform->c;
  *(_OWORD *)&v4.a = *(_OWORD *)&transform->a;
  *(_OWORD *)&v4.c = v3;
  *(_OWORD *)&v4.tx = *(_OWORD *)&transform->tx;
  CGPathMoveToPoint(v2, &v4, to.x, to.y);
}

Swift::Void __swiftcall CGMutablePathRef.addLine(to:transform:)(CGPoint to, CGAffineTransform *transform)
{
  CGPath *v2;
  __int128 v3;
  CGAffineTransform v4;

  v3 = *(_OWORD *)&transform->c;
  *(_OWORD *)&v4.a = *(_OWORD *)&transform->a;
  *(_OWORD *)&v4.c = v3;
  *(_OWORD *)&v4.tx = *(_OWORD *)&transform->tx;
  CGPathAddLineToPoint(v2, &v4, to.x, to.y);
}

Swift::Void __swiftcall CGMutablePathRef.addQuadCurve(to:control:transform:)(CGPoint to, CGPoint control, CGAffineTransform *transform)
{
  CGPath *v3;
  CGFloat y;
  __int128 v5;
  CGAffineTransform v6;

  y = to.y;
  v5 = *(_OWORD *)&transform->c;
  *(_OWORD *)&v6.a = *(_OWORD *)&transform->a;
  *(_OWORD *)&v6.c = v5;
  *(_OWORD *)&v6.tx = *(_OWORD *)&transform->tx;
  CGPathAddQuadCurveToPoint(v3, &v6, control.x, control.y, to.x, y);
}

Swift::Void __swiftcall CGMutablePathRef.addCurve(to:control1:control2:transform:)(CGPoint to, CGPoint control1, CGPoint control2, CGAffineTransform *transform)
{
  CGPath *v4;
  CGFloat y;
  __int128 v6;
  CGAffineTransform v7;

  y = to.y;
  v6 = *(_OWORD *)&transform->c;
  *(_OWORD *)&v7.a = *(_OWORD *)&transform->a;
  *(_OWORD *)&v7.c = v6;
  *(_OWORD *)&v7.tx = *(_OWORD *)&transform->tx;
  CGPathAddCurveToPoint(v4, &v7, control1.x, control1.y, control2.x, control2.y, to.x, y);
}

Swift::Void __swiftcall CGMutablePathRef.addRect(_:transform:)(__C::CGRect _, CGAffineTransform *transform)
{
  sub_184A7EC54(transform, (uint64_t (*)(uint64_t, _OWORD *))CGPathAddRect);
}

Swift::Void __swiftcall CGMutablePathRef.addRects(_:transform:)(Swift::OpaquePointer _, CGAffineTransform *transform)
{
  sub_184A7EC00((uint64_t)_._rawValue, transform, (uint64_t (*)(uint64_t, _OWORD *, uint64_t, _QWORD))CGPathAddRects);
}

Swift::Void __swiftcall CGMutablePathRef.addLines(between:transform:)(Swift::OpaquePointer between, CGAffineTransform *transform)
{
  sub_184A7EC00((uint64_t)between._rawValue, transform, (uint64_t (*)(uint64_t, _OWORD *, uint64_t, _QWORD))CGPathAddLines);
}

uint64_t sub_184A7EC00(uint64_t a1, _OWORD *a2, uint64_t (*a3)(uint64_t, _OWORD *, uint64_t, _QWORD))
{
  uint64_t v3;
  __int128 v4;
  _OWORD v6[3];

  v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  v6[2] = a2[2];
  return a3(v3, v6, a1 + 32, *(_QWORD *)(a1 + 16));
}

Swift::Void __swiftcall CGMutablePathRef.addEllipse(in:transform:)(__C::CGRect in, CGAffineTransform *transform)
{
  sub_184A7EC54(transform, (uint64_t (*)(uint64_t, _OWORD *))CGPathAddEllipseInRect);
}

uint64_t sub_184A7EC54(_OWORD *a1, uint64_t (*a2)(uint64_t, _OWORD *))
{
  uint64_t v2;
  __int128 v3;
  _OWORD v5[3];

  v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  v5[2] = a1[2];
  return a2(v2, v5);
}

uint64_t CGMutablePathRef.addRelativeArc(center:radius:startAngle:delta:transform:)(_OWORD *a1)
{
  return sub_184A7ECE8(a1, (uint64_t (*)(uint64_t, _OWORD *))CGPathAddRelativeArc);
}

void CGMutablePathRef.addArc(center:radius:startAngle:endAngle:clockwise:transform:)(char a1, _OWORD *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  CGPath *v7;
  __int128 v8;
  CGAffineTransform v9;

  v8 = a2[1];
  *(_OWORD *)&v9.a = *a2;
  *(_OWORD *)&v9.c = v8;
  *(_OWORD *)&v9.tx = a2[2];
  CGPathAddArc(v7, &v9, a3, a4, a5, a6, a7, a1 & 1);
}

uint64_t CGMutablePathRef.addArc(tangent1End:tangent2End:radius:transform:)(_OWORD *a1)
{
  return sub_184A7ECE8(a1, (uint64_t (*)(uint64_t, _OWORD *))CGPathAddArcToPoint);
}

uint64_t sub_184A7ECE8(_OWORD *a1, uint64_t (*a2)(uint64_t, _OWORD *))
{
  uint64_t v2;
  __int128 v3;
  _OWORD v5[3];

  v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  v5[2] = a1[2];
  return a2(v2, v5);
}

Swift::Void __swiftcall CGMutablePathRef.addPath(_:transform:)(CGPathRef _, CGAffineTransform *transform)
{
  CGPath *v2;
  __int128 v3;
  CGAffineTransform v4;

  v3 = *(_OWORD *)&transform->c;
  *(_OWORD *)&v4.a = *(_OWORD *)&transform->a;
  *(_OWORD *)&v4.c = v3;
  *(_OWORD *)&v4.tx = *(_OWORD *)&transform->tx;
  CGPathAddPath(v2, &v4, _);
}

CGPathRef __swiftcall CGPathRef.union(_:using:)(CGPathRef _, CoreGraphics::CGPathFillRule using)
{
  return (CGPathRef)sub_184A7EDAC((uint64_t)_, (unsigned __int8 *)using, (uint64_t (*)(uint64_t, uint64_t, _QWORD))CGPathCreateCopyByUnioningPath);
}

CGPathRef __swiftcall CGPathRef.intersection(_:using:)(CGPathRef _, CoreGraphics::CGPathFillRule using)
{
  return (CGPathRef)sub_184A7EDAC((uint64_t)_, (unsigned __int8 *)using, (uint64_t (*)(uint64_t, uint64_t, _QWORD))CGPathCreateCopyByIntersectingPath);
}

CGPathRef __swiftcall CGPathRef.subtracting(_:using:)(CGPathRef _, CoreGraphics::CGPathFillRule using)
{
  return (CGPathRef)sub_184A7EDAC((uint64_t)_, (unsigned __int8 *)using, (uint64_t (*)(uint64_t, uint64_t, _QWORD))CGPathCreateCopyBySubtractingPath);
}

CGPathRef __swiftcall CGPathRef.symmetricDifference(_:using:)(CGPathRef _, CoreGraphics::CGPathFillRule using)
{
  return (CGPathRef)sub_184A7EDAC((uint64_t)_, (unsigned __int8 *)using, (uint64_t (*)(uint64_t, uint64_t, _QWORD))CGPathCreateCopyBySymmetricDifferenceOfPath);
}

CGPathRef __swiftcall CGPathRef.lineSubtracting(_:using:)(CGPathRef _, CoreGraphics::CGPathFillRule using)
{
  return (CGPathRef)sub_184A7EDAC((uint64_t)_, (unsigned __int8 *)using, (uint64_t (*)(uint64_t, uint64_t, _QWORD))CGPathCreateCopyOfLineBySubtractingPath);
}

CGPathRef __swiftcall CGPathRef.lineIntersection(_:using:)(CGPathRef _, CoreGraphics::CGPathFillRule using)
{
  return (CGPathRef)sub_184A7EDAC((uint64_t)_, (unsigned __int8 *)using, (uint64_t (*)(uint64_t, uint64_t, _QWORD))CGPathCreateCopyOfLineByIntersectingPath);
}

uint64_t sub_184A7EDAC(uint64_t a1, unsigned __int8 *a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD))
{
  uint64_t v3;
  uint64_t result;

  result = a3(v3, a1, *a2);
  if (!result)
    __break(1u);
  return result;
}

CGPathRef __swiftcall CGPathRef.normalized(using:)(CoreGraphics::CGPathFillRule using)
{
  const CGPath *v1;
  CGPathRef result;

  result = CGPathCreateCopyByNormalizing(v1, *(_BYTE *)using);
  if (!result)
    __break(1u);
  return result;
}

CGPathRef CGPathRef.flattened(threshold:)(CGFloat a1)
{
  const CGPath *v1;
  CGPathRef result;

  result = CGPathCreateCopyByFlattening(v1, a1);
  if (!result)
    __break(1u);
  return result;
}

Swift::Bool __swiftcall CGPathRef.intersects(_:using:)(CGPathRef _, CoreGraphics::CGPathFillRule using)
{
  const CGPath *v2;

  return CGPathIntersectsPath(v2, _, *(_BYTE *)using);
}

uint64_t CGPathRef.componentsSeparated(using:)(BOOL *a1)
{
  const CGPath *v1;
  uint64_t result;

  result = (uint64_t)CGPathCreateSeparateComponents(v1, *a1);
  if (result)
  {
    type metadata accessor for CGPath(0);
    result = sub_184E30A04();
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

char *sub_184A7EEAC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD199B8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  v15 = 32 * v8;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v15);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_184A7EFA0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECDA5B50);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

_QWORD *sub_184A7F098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  int64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD v12[4];

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD199C0);
  v7 = (_QWORD *)swift_allocObject();
  v8 = _swift_stdlib_malloc_size(v7);
  v9 = v8 - 32;
  if (v8 < 32)
    v9 = v8 - 17;
  v7[2] = v3;
  v7[3] = 2 * (v9 >> 4);
  v10 = sub_184A98988(v12, v7 + 4, v3, a1, a2, a3);
  swift_retain();
  swift_release();
  if (v10 != (_QWORD *)v3)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v7;
}

_QWORD *sub_184A7F164(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  _QWORD *result;
  _QWORD v8[3];

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD199C0);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 17;
  v4[2] = 2;
  v4[3] = 2 * (v6 >> 4);
  result = sub_184A98928(v8, v4 + 4, 2, a1, a2);
  if (result == (_QWORD *)2)
    return v4;
  __break(1u);
  return result;
}

_QWORD *sub_184A7F1F8(_QWORD *result, uint64_t a2, int64_t a3)
{
  int64_t v3;
  uint64_t v7;
  _QWORD *v8;
  int64_t v9;
  uint64_t v10;
  _QWORD v11[4];

  v3 = a2 + a3;
  if (__OFADD__(a2, a3))
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v3 < a3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (__OFSUB__(v3, a3))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (!a2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v7 = (uint64_t)result;
  if (a2 <= 0)
  {
    v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD199B0);
    v8 = (_QWORD *)swift_allocObject();
    v9 = _swift_stdlib_malloc_size(v8);
    v10 = v9 - 32;
    if (v9 < 32)
      v10 = v9 - 17;
    v8[2] = a2;
    v8[3] = 2 * (v10 >> 4);
  }
  result = sub_184A98858(v11, (uint64_t)(v8 + 4), a2, v7, a2, a3);
  if (result == (_QWORD *)a2)
    return v8;
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_184A7F2E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t result;
  uint64_t v13;

  v3 = *(_QWORD *)(a3 + 16);
  if (v3 <= 1)
    return MEMORY[0x1E0DEE9D8];
  v8 = v3 >> 1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD199A8);
  v4 = swift_allocObject();
  v9 = _swift_stdlib_malloc_size((const void *)v4);
  v10 = v9 - 32;
  if (v9 < 32)
    v10 = v9 - 1;
  *(_QWORD *)(v4 + 16) = v8;
  *(_QWORD *)(v4 + 24) = 2 * (v10 >> 5);
  v11 = sub_184A986A0(&v13, (double *)(v4 + 32), v8, a1, a2, a3);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  result = swift_release();
  if (v11 == (_QWORD *)v8)
    return v4;
  __break(1u);
  return result;
}

_QWORD *sub_184A7F3E0(const void *a1, uint64_t a2)
{
  size_t v4;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;

  if (!a2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (a2 <= 0)
  {
    v4 = 8 * a2;
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECDA5B50);
    v4 = 8 * a2;
    v5 = (_QWORD *)swift_allocObject();
    v6 = _swift_stdlib_malloc_size(v5);
    v7 = v6 - 32;
    if (v6 < 32)
      v7 = v6 - 25;
    v5[2] = a2;
    v5[3] = 2 * (v7 >> 3);
  }
  memcpy(v5 + 4, a1, v4);
  return v5;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x186DC3330]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

unint64_t sub_184A7F50C()
{
  unint64_t result;

  result = qword_1ECDA5AE0;
  if (!qword_1ECDA5AE0)
  {
    result = MEMORY[0x186DC3348](MEMORY[0x1E0DEF050], MEMORY[0x1E0DEF040]);
    atomic_store(result, (unint64_t *)&qword_1ECDA5AE0);
  }
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

double sub_184A7F570(_QWORD *a1)
{
  uint64_t v1;
  double v2;
  double v5;
  _BYTE v6[24];
  uint64_t v7;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_184E30C8C();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v6, v7);
    sub_184A7FD70();
    sub_184E30B90();
    v2 = v5;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v6, v7);
    sub_184E30B90();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v2;
}

double sub_184A7F69C(_QWORD *a1)
{
  uint64_t v1;
  double v2;
  double v5;
  _BYTE v6[24];
  uint64_t v7;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_184E30C8C();
  if (!v1)
  {
    type metadata accessor for CGPoint(0);
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v6, v7);
    sub_184A7FDB4(&qword_1EDD19700, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, (uint64_t)&protocol conformance descriptor for CGPoint);
    sub_184E30B90();
    v2 = v5;
    type metadata accessor for CGSize(0);
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v6, v7);
    sub_184A7FDB4(&qword_1EDD196F8, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, (uint64_t)&protocol conformance descriptor for CGSize);
    sub_184E30B90();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v2;
}

uint64_t sub_184A7F830@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];
  uint64_t v13;
  uint64_t v14;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_184E30C8C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v12, v13);
  sub_184A7FD70();
  sub_184E30B90();
  v5 = v14;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v12, v13);
  sub_184E30B90();
  v6 = v14;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v12, v13);
  sub_184E30B90();
  v7 = v14;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v12, v13);
  sub_184E30B90();
  v8 = v14;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v12, v13);
  sub_184E30B90();
  v9 = v14;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v12, v13);
  sub_184E30B90();
  v10 = v14;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  *a2 = v5;
  a2[1] = v6;
  a2[2] = v7;
  a2[3] = v8;
  a2[4] = v9;
  a2[5] = v10;
  return result;
}

uint64_t sub_184A7FA8C()
{
  return sub_184A7FDB4(&qword_1EDD19988, (uint64_t (*)(uint64_t))type metadata accessor for CGAffineTransform, (uint64_t)&protocol conformance descriptor for CGAffineTransform);
}

uint64_t sub_184A7FAB8()
{
  return sub_184A7FDB4(&qword_1EDD19990, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, (uint64_t)&protocol conformance descriptor for CGPoint);
}

uint64_t sub_184A7FAE4()
{
  return sub_184A7FDB4(&qword_1EDD193F0, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, (uint64_t)&protocol conformance descriptor for CGSize);
}

uint64_t sub_184A7FB10()
{
  return sub_184A7FDB4(&qword_1EDD19998, (uint64_t (*)(uint64_t))type metadata accessor for CGVector, (uint64_t)&protocol conformance descriptor for CGVector);
}

uint64_t sub_184A7FB3C()
{
  return sub_184A7FDB4(&qword_1EDD196D8, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
}

unint64_t sub_184A7FB6C()
{
  unint64_t result;

  result = qword_1EDD199A0;
  if (!qword_1EDD199A0)
  {
    result = MEMORY[0x186DC3348](&protocol conformance descriptor for CGPathFillRule, &type metadata for CGPathFillRule);
    atomic_store(result, (unint64_t *)&qword_1EDD199A0);
  }
  return result;
}

void sub_184A7FBB0(CGContextRef *a1@<X0>, CGPoint *a2@<X8>)
{
  *a2 = CGContextGetTextPosition(*a1);
}

void sub_184A7FBD8(CGFloat *a1, CGContextRef *a2)
{
  CGContextSetTextPosition(*a2, *a1, a1[1]);
}

uint64_t dispatch thunk of _CGColorInitTrampoline.init(colorSpace:components:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CGPathFillRule(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CGPathFillRule(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_184A7FCD4 + 4 * byte_184E37605[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_184A7FD08 + 4 * byte_184E37600[v4]))();
}

uint64_t sub_184A7FD08(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_184A7FD10(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x184A7FD18);
  return result;
}

uint64_t sub_184A7FD24(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x184A7FD2CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_184A7FD30(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_184A7FD38(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_184A7FD44(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_184A7FD50(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for CGPathFillRule()
{
  return &type metadata for CGPathFillRule;
}

unint64_t sub_184A7FD70()
{
  unint64_t result;

  result = qword_1EDD19760;
  if (!qword_1EDD19760)
  {
    result = MEMORY[0x186DC3348](MEMORY[0x1E0DEF078], MEMORY[0x1E0DEF040]);
    atomic_store(result, (unint64_t *)&qword_1EDD19760);
  }
  return result;
}

uint64_t sub_184A7FDB4(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x186DC3348](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_184A7FE18(_QWORD *a1)
{
  return sub_184A7DB34(a1);
}

ValueMetadata *type metadata accessor for Bounds()
{
  return &type metadata for Bounds;
}

unint64_t sub_184A7FE40()
{
  unint64_t result;

  result = qword_1EDD199C8[0];
  if (!qword_1EDD199C8[0])
  {
    result = MEMORY[0x186DC3348](&unk_184E37D20, &type metadata for Bounds);
    atomic_store(result, qword_1EDD199C8);
  }
  return result;
}

double *sub_184A7FE84@<X0>(double *result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  double v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  BOOL v20;
  double v21;
  double v22;
  double v23;
  double v24;

  v6 = result[1];
  if (v6 == 0.0 && result[2] == 0.0)
    v7 = 2;
  else
    v7 = 4;
  v8 = 0;
  v9 = NAN;
  v10 = NAN;
  v11 = NAN;
  v12 = NAN;
  while (2)
  {
    v13 = a5;
    v14 = a3;
    switch(v8)
    {
      case 0:
        goto LABEL_13;
      case 1:
        v13 = a6;
        goto LABEL_11;
      case 2:
        v13 = a5;
LABEL_11:
        v14 = a4;
        goto LABEL_13;
      case 3:
        v13 = a6;
        v14 = a3;
LABEL_13:
        v15 = result[4] + *result * v14 + result[2] * v13;
        v16 = result[5] + v6 * v14 + result[3] * v13;
        if ((*(_QWORD *)&v15 & 0xFFFFFFFFFFFFFLL) != 0)
          v17 = v12;
        else
          v17 = v15;
        if ((~*(_QWORD *)&v15 & 0x7FF0000000000000) != 0)
          v17 = v15;
        if (v12 > v15)
          v12 = v17;
        if ((*(_QWORD *)&v16 & 0xFFFFFFFFFFFFFLL) != 0)
          v18 = v11;
        else
          v18 = v16;
        if ((~*(_QWORD *)&v16 & 0x7FF0000000000000) != 0)
          v18 = v16;
        if (v11 > v16)
          v11 = v18;
        if ((*(_QWORD *)&v15 & 0xFFFFFFFFFFFFFLL) != 0)
          v19 = v10;
        else
          v19 = v15;
        if ((~*(_QWORD *)&v15 & 0x7FF0000000000000) != 0)
          v19 = v15;
        if (v15 >= v10)
          v10 = v19;
        if (v16 >= v9)
        {
          if ((~*(_QWORD *)&v16 & 0x7FF0000000000000) != 0)
          {
            v9 = v16;
          }
          else if ((*(_QWORD *)&v16 & 0xFFFFFFFFFFFFFLL) == 0)
          {
            v9 = v16;
          }
        }
        if (v7 != ++v8)
          continue;
        v20 = v12 >= v10;
        if (v11 >= v9)
          v20 = 1;
        v21 = 0.0;
        if (v20)
          v22 = 0.0;
        else
          v22 = v12;
        if (v20)
          v23 = 0.0;
        else
          v23 = v10;
        if (v20)
          v24 = 0.0;
        else
          v24 = v11;
        if (!v20)
          v21 = v9;
        *(double *)a2 = v22;
        *(double *)(a2 + 8) = v23;
        *(double *)(a2 + 16) = v24;
        *(double *)(a2 + 24) = v21;
        *(_BYTE *)(a2 + 32) = v20;
        return result;
      default:
        result = (double *)sub_184E30B30();
        __break(1u);
        return result;
    }
  }
}

uint64_t sub_184A80030()
{
  sub_184E30C38();
  sub_184E30C38();
  sub_184E30C38();
  return sub_184E30C38();
}

double sub_184A800A8(double result, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;

  v8 = result;
  v9 = result;
  if ((*(_QWORD *)&result & 0xFFFFFFFFFFFFFLL) != 0)
    result = a5;
  if ((~*(_QWORD *)&v9 & 0x7FF0000000000000) != 0)
    result = v8;
  if (v8 < a5)
    result = a5;
  if ((*(_QWORD *)&a3 & 0xFFFFFFFFFFFFFLL) != 0)
    v10 = a7;
  else
    v10 = a3;
  if ((~*(_QWORD *)&a3 & 0x7FF0000000000000) != 0)
    v10 = a3;
  if (a3 >= a7)
    v11 = v10;
  else
    v11 = a7;
  if ((*(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL) != 0)
    v12 = a6;
  else
    v12 = a2;
  if ((~*(_QWORD *)&a2 & 0x7FF0000000000000) != 0)
    v12 = a2;
  if (a6 <= a2)
    v13 = a6;
  else
    v13 = v12;
  if ((*(_QWORD *)&a4 & 0xFFFFFFFFFFFFFLL) != 0)
    v14 = a8;
  else
    v14 = a4;
  if ((~*(_QWORD *)&a4 & 0x7FF0000000000000) != 0)
    v14 = a4;
  if (a8 <= a4)
    v15 = a8;
  else
    v15 = v14;
  if (result >= v13
    || v11 >= v15
    || (~*(_QWORD *)&a5 & 0x7FF0000000000000) == 0 && (*(_QWORD *)&a5 & 0xFFFFFFFFFFFFFLL) != 0
    || (~*(_QWORD *)&v8 & 0x7FF0000000000000) == 0 && (*(_QWORD *)&v8 & 0xFFFFFFFFFFFFFLL) != 0)
  {
    return NAN;
  }
  return result;
}

uint64_t sub_184A80178(double *a1, double *a2)
{
  return sub_184A8025C(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

uint64_t sub_184A8018C()
{
  sub_184E30C20();
  sub_184A80030();
  return sub_184E30C50();
}

uint64_t sub_184A801F0()
{
  return sub_184A80030();
}

uint64_t sub_184A801FC()
{
  sub_184E30C20();
  sub_184A80030();
  return sub_184E30C50();
}

uint64_t sub_184A8025C(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  _BOOL4 v11;

  if (a1 == a5 && a2 == a6 && a3 == a7 && a4 == a8)
    return 1;
  if ((~*(_QWORD *)&a1 & 0x7FF0000000000000) != 0)
    return 0;
  v11 = (~*(_QWORD *)&a5 & 0x7FF0000000000000) == 0 && (*(_QWORD *)&a5 & 0xFFFFFFFFFFFFFLL) != 0;
  return (*(_QWORD *)&a1 & 0xFFFFFFFFFFFFFLL) != 0 && v11;
}

uint64_t sub_184A802B4()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_184A8033C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = (*(_BYTE *)(v5 + 80) | *(_BYTE *)(v4 + 80));
  if (v7 <= 7
    && (unint64_t)(v6 + 1) <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) == 0)
  {
    v11 = *((unsigned __int8 *)a2 + v6);
    if (v11 >= 2)
    {
      if (v6 <= 3)
        v12 = v6;
      else
        v12 = 4;
      __asm { BR              X15 }
    }
    if (v11 == 1)
    {
      (*(void (**)(uint64_t *))(v5 + 16))(a1);
      *((_BYTE *)v3 + v6) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *))(v4 + 16))(a1);
      *((_BYTE *)v3 + v6) = 0;
    }
  }
  else
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v3;
}

uint64_t sub_184A80468(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(v2 - 8);
  if (*(_QWORD *)(v5 + 64) > v4)
    v4 = *(_QWORD *)(v5 + 64);
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (v6 < 2)
  {
    if (v6 == 1)
      v3 = *(_QWORD *)(v2 - 8);
    return (*(uint64_t (**)(void))(v3 + 8))();
  }
  else
  {
    if (v4 <= 3)
      v7 = v4;
    else
      v7 = 4;
    return ((uint64_t (*)(void))((char *)&loc_184A804B4 + 4 * byte_184E37D4D[v7]))();
  }
}

uint64_t sub_184A80508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v4 - 8);
  if (*(_QWORD *)(v6 + 64) <= *(_QWORD *)(v5 + 64))
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(a2 + v7);
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X16 }
  }
  v10 = v8 == 1;
  if (v8 == 1)
    v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t))(v5 + 16))(a1);
  *(_BYTE *)(a1 + v7) = v10;
  return a1;
}

uint64_t sub_184A805DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
      v9 = *(_QWORD *)(v7 + 64);
    else
      v9 = *(_QWORD *)(v8 + 64);
    v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
      v12 = *(_QWORD *)(v6 - 8);
    else
      v12 = *(_QWORD *)(v5 - 8);
    if (v10 == 1)
      v13 = *(_QWORD *)(a3 + 24);
    else
      v13 = *(_QWORD *)(a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    v14 = *(unsigned __int8 *)(a2 + v9);
    if (v14 >= 2)
    {
      if (v9 <= 3)
        v15 = v9;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    v16 = v14 == 1;
    if (v14 == 1)
      v17 = v8;
    else
      v17 = v7;
    if (v14 == 1)
      v18 = v6;
    else
      v18 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(a1, a2, v18);
    *(_BYTE *)(a1 + v9) = v16;
  }
  return a1;
}

uint64_t sub_184A80758(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v4 - 8);
  if (*(_QWORD *)(v6 + 64) <= *(_QWORD *)(v5 + 64))
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(a2 + v7);
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X16 }
  }
  v10 = v8 == 1;
  if (v8 == 1)
    v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t))(v5 + 32))(a1);
  *(_BYTE *)(a1 + v7) = v10;
  return a1;
}

uint64_t sub_184A8082C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
      v9 = *(_QWORD *)(v7 + 64);
    else
      v9 = *(_QWORD *)(v8 + 64);
    v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
      v12 = *(_QWORD *)(v6 - 8);
    else
      v12 = *(_QWORD *)(v5 - 8);
    if (v10 == 1)
      v13 = *(_QWORD *)(a3 + 24);
    else
      v13 = *(_QWORD *)(a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    v14 = *(unsigned __int8 *)(a2 + v9);
    if (v14 >= 2)
    {
      if (v9 <= 3)
        v15 = v9;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    v16 = v14 == 1;
    if (v14 == 1)
      v17 = v8;
    else
      v17 = v7;
    if (v14 == 1)
      v18 = v6;
    else
      v18 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(a1, a2, v18);
    *(_BYTE *)(a1 + v9) = v16;
  }
  return a1;
}

uint64_t sub_184A809A8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
  if (v3 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64))
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 255);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_184A80A70 + 4 * byte_184E37D70[(v4 - 1)]))();
}

void sub_184A80ABC(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64);
  v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    v7 = 0u;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t sub_184A80C68(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 64);
  if (v2 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64))
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 2u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_184A80CB4 + 4 * byte_184E37D7E[v3]))();
}

void sub_184A80CFC(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4;
  size_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;

  if (a2 > 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64) <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16)
                                                                                              - 8)
                                                                                  + 64))
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    else
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
    v6 = a2 - 2;
    if (v5 < 4)
    {
      v7 = v6 >> (8 * v5);
      v8 = v6 & ~(-1 << (8 * v5));
      a1[v5] = v7 + 2;
      bzero(a1, v5);
      if ((_DWORD)v5 == 3)
      {
        *(_WORD *)a1 = v8;
        a1[2] = BYTE2(v8);
      }
      else if ((_DWORD)v5 == 2)
      {
        *(_WORD *)a1 = v8;
      }
      else
      {
        *a1 = v8;
      }
    }
    else
    {
      a1[v5] = 2;
      bzero(a1, v5);
      *(_DWORD *)a1 = v6;
    }
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
    if (v4 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64))
      v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    a1[v4] = a2;
  }
}

void type metadata accessor for EitherSequence()
{
  JUMPOUT(0x186DC32F4);
}

void sub_184A80DF0()
{
  JUMPOUT(0x186DC3348);
}

void sub_184A80E00(_QWORD *a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  __n128 v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v31[1] = a2;
  v4 = a1[3];
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](a1, a3);
  v8 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v6, v9);
  v12 = (char *)v31 - v11;
  v13 = *(_QWORD *)(v10 + 16);
  v14 = *(_QWORD *)(v13 - 8);
  v16 = MEMORY[0x1E0C80A78](v10, v15);
  v18 = (char *)v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v16, v19);
  v22 = (char *)v31 - v21;
  MEMORY[0x1E0C80A78](v20, v23);
  v25 = (char *)v31 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v26 + 16))(v25);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v12, v25, v4);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v12, v4);
    v27 = a1[5];
    sub_184E309D4();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);
    v28 = a1[4];
    v32 = v13;
    v33 = v4;
    v34 = v28;
    v35 = v27;
    type metadata accessor for EitherSequence.Iterator();
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v22, v25, v13);
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v18, v22, v13);
  v29 = a1[4];
  sub_184E309D4();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v22, v13);
  v30 = a1[5];
  v32 = v13;
  v33 = v4;
  v34 = v29;
  v35 = v30;
  type metadata accessor for EitherSequence.Iterator();
}

void sub_184A80FF4()
{
  JUMPOUT(0x184A80FFCLL);
}

uint64_t sub_184A81024(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;

  MEMORY[0x1E0C80A78](a1, a2);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v5, v2, a1);
  swift_getEnumCaseMultiPayload();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v2, v5, AssociatedTypeWitness);
  swift_getAssociatedConformanceWitness();
  sub_184E30B0C();
  return swift_storeEnumTagMultiPayload();
}

void sub_184A811B8(_QWORD *a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  sub_184A80E00(a1, a2, a3);
}

uint64_t sub_184A811CC()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v1, v0);
}

uint64_t sub_184A811E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_184A8370C(a1, a2, a3, (uint64_t)&unk_184E37EF4);
}

uint64_t sub_184A811F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_184A8376C(a1, a2, a3, (uint64_t)&unk_184E37E8C, MEMORY[0x1E0DEA220]);
}

uint64_t sub_184A81208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_184A8376C(a1, a2, a3, (uint64_t)&unk_184E37E8C, MEMORY[0x1E0DEDE40]);
}

void sub_184A8121C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t), __n128 a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v24 = a4;
  v25 = a3;
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](a1, a5);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v9 + 16);
  v13 = *(_QWORD *)(v12 - 8);
  v15 = MEMORY[0x1E0C80A78](v9, v14);
  v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v18);
  v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v20, v22, a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v20, v7);
    v23 = v25;
    v24(v7, v25);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    v26 = v12;
    v27 = v7;
    v28 = a2;
    v29 = v23;
    _s5IndexOMa();
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v17, v20, v12);
  v24(v12, a2);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v17, v12);
  v26 = v12;
  v27 = v7;
  v28 = a2;
  v29 = v25;
  _s5IndexOMa();
}

void sub_184A813B0()
{
  JUMPOUT(0x184A813B8);
}

void sub_184A813E0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  __n128 v24;
  _QWORD v25[20];

  v25[12] = a1;
  v25[14] = a5;
  v8 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v25[7] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v25[8] = AssociatedTypeWitness;
  v11 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v10);
  v25[5] = (char *)v25 - v12;
  v25[6] = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v25[4] = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a2 + 16);
  v16 = swift_getAssociatedTypeWitness();
  v25[1] = *(_QWORD *)(v16 - 8);
  v25[2] = v16;
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v25[0] = (char *)v25 - v19;
  v25[3] = *(_QWORD *)(v15 - 8);
  v21 = MEMORY[0x1E0C80A78](v18, v20);
  v23 = MEMORY[0x1E0C80A78](v21, v22);
  MEMORY[0x1E0C80A78](v23, v24);
  v25[15] = v15;
  v25[16] = v8;
  v25[9] = a3;
  v25[10] = a4;
  v25[17] = a3;
  v25[18] = a4;
  _s5IndexOMa();
}

uint64_t sub_184A81580(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  void (*v16)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t result;
  _BYTE v29[80];

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v12 = MEMORY[0x1E0C80A78](TupleTypeMetadata2, v11);
  v14 = &v29[-v13];
  v15 = &v29[*(int *)(v12 + 48) - v13];
  *(_QWORD *)(v8 - 136) = v4;
  v16 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v4 + 16);
  v16(&v29[-v13], *(_BYTE **)(v8 - 152), v1);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v15, *(_QWORD *)(v8 - 144), a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v16(v5, v14, v1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v17 = *(_QWORD *)(v8 - 192);
      v18 = *(_QWORD *)(v8 - 208);
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v17 + 32))(v18, v5, v3);
      v19 = *(_QWORD *)(v8 - 184);
      v20 = *(_QWORD *)(v8 - 200);
      v21 = v15;
      v22 = *(_QWORD *)(v8 - 176);
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v19 + 32))(v20, v21, v22);
      sub_184E30A4C();
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v20, v22);
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v18, v3);
LABEL_6:
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)(v8 - 136) + 8))(v14, v1);
    }
    *(_QWORD *)(v8 - 216) = *(_QWORD *)(v8 - 192);
    v6 = v3;
    v7 = v5;
  }
  else
  {
    v16(v7, v14, v1);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v23 = *(_QWORD *)(v8 - 216);
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v23 + 32))(v2, v7, v6);
      v25 = *(_QWORD *)(v8 - 240);
      v24 = *(_QWORD *)(v8 - 232);
      v26 = v15;
      v27 = *(_QWORD *)(v8 - 224);
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v24 + 32))(v25, v26, v27);
      sub_184E30A4C();
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v25, v27);
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v2, v6);
      goto LABEL_6;
    }
  }
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v8 - 216) + 8))(v7, v6);
  result = sub_184E30B30();
  __break(1u);
  return result;
}

void sub_184A817FC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  __n128 v25;
  _QWORD v26[22];

  v26[13] = a1;
  v26[15] = a2;
  v26[16] = a6;
  v9 = *(_QWORD *)(a3 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v26[8] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v26[9] = AssociatedTypeWitness;
  v12 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v11);
  v26[6] = (char *)v26 - v13;
  v26[7] = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v26[5] = (char *)v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a3 + 16);
  v17 = swift_getAssociatedTypeWitness();
  v26[2] = *(_QWORD *)(v17 - 8);
  v26[3] = v17;
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v26[1] = (char *)v26 - v20;
  v26[4] = *(_QWORD *)(v16 - 8);
  v22 = MEMORY[0x1E0C80A78](v19, v21);
  v24 = MEMORY[0x1E0C80A78](v22, v23);
  MEMORY[0x1E0C80A78](v24, v25);
  v26[17] = v16;
  v26[18] = v9;
  v26[10] = a4;
  v26[11] = a5;
  v26[19] = a4;
  v26[20] = a5;
  _s5IndexOMa();
}

uint64_t sub_184A8199C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  void (*v16)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t result;
  _BYTE v29[80];

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v12 = MEMORY[0x1E0C80A78](TupleTypeMetadata2, v11);
  v14 = &v29[-v13];
  v15 = &v29[*(int *)(v12 + 48) - v13];
  *(_QWORD *)(v8 - 144) = v4;
  v16 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v4 + 16);
  v16(&v29[-v13], *(_BYTE **)(v8 - 160), v1);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v15, *(_QWORD *)(v8 - 152), a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v16(v5, v14, v1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v17 = *(_QWORD *)(v8 - 200);
      v18 = *(_QWORD *)(v8 - 216);
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v17 + 32))(v18, v5, v3);
      v19 = *(_QWORD *)(v8 - 192);
      v20 = *(_QWORD *)(v8 - 208);
      v21 = v15;
      v22 = *(_QWORD *)(v8 - 184);
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v19 + 32))(v20, v21, v22);
      sub_184E30A58();
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v20, v22);
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v18, v3);
LABEL_6:
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)(v8 - 144) + 8))(v14, v1);
    }
    *(_QWORD *)(v8 - 224) = *(_QWORD *)(v8 - 200);
    v6 = v3;
    v7 = v5;
  }
  else
  {
    v16(v7, v14, v1);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v23 = *(_QWORD *)(v8 - 224);
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v23 + 32))(v2, v7, v6);
      v25 = *(_QWORD *)(v8 - 248);
      v24 = *(_QWORD *)(v8 - 240);
      v26 = v15;
      v27 = *(_QWORD *)(v8 - 232);
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v24 + 32))(v25, v26, v27);
      sub_184E30A58();
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v25, v27);
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v2, v6);
      goto LABEL_6;
    }
  }
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v8 - 224) + 8))(v7, v6);
  result = sub_184E30B30();
  __break(1u);
  return result;
}

void sub_184A81C18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  _QWORD v27[8];
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v35 = a1;
  v36 = a2;
  v8 = *(_QWORD *)(a3 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v30 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v31 = AssociatedTypeWitness;
  v11 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v10);
  v29 = (char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v11, v13);
  v27[7] = (char *)v27 - v15;
  v38 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v27[4] = (char *)v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(a3 + 16);
  v28 = swift_getAssociatedTypeWitness();
  v27[6] = *(_QWORD *)(v28 - 8);
  v20 = MEMORY[0x1E0C80A78](v28, v19);
  v27[5] = (char *)v27 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v20, v22);
  v27[2] = (char *)v27 - v24;
  v37 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v23, v25);
  v27[1] = (char *)v27 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27[3] = v18;
  v39 = v18;
  v40 = v8;
  v33 = a5;
  v34 = v8;
  v32 = a4;
  v41 = a4;
  v42 = a5;
  _s5IndexOMa();
}

uint64_t sub_184A81DDC(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  __n128 v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t TupleTypeMetadata3;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  _BYTE *v26;
  void (*v27)(_BYTE *, _BYTE *, uint64_t);
  void (*v28)(_BYTE *, _BYTE *, uint64_t);
  int EnumCaseMultiPayload;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, _BYTE *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  _BYTE *v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, _BYTE *, uint64_t);
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  uint64_t result;
  _BYTE v53[80];

  v5 = *(_QWORD *)(a1 - 8);
  v6 = MEMORY[0x1E0C80A78](a1, a2);
  v8 = &v53[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = MEMORY[0x1E0C80A78](v6, v9);
  *(_QWORD *)(v3 - 304) = &v53[-v11];
  v12 = *(_QWORD *)(v2 - 8);
  v14 = MEMORY[0x1E0C80A78](v10, v13);
  v16 = &v53[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v14, v17);
  v19 = &v53[-v18];
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v22 = MEMORY[0x1E0C80A78](TupleTypeMetadata3, v21);
  v24 = &v53[-v23];
  v25 = &v53[*(int *)(v22 + 48) - v23];
  v26 = &v53[*(int *)(v22 + 64) - v23];
  *(_QWORD *)(v3 - 136) = v12;
  v27 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 16);
  v27(&v53[-v23], *(_BYTE **)(v3 - 128), v2);
  *(_QWORD *)(v3 - 128) = v5;
  v28 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 16);
  v28(v25, *(_BYTE **)(v3 - 184), a1);
  v28(v26, *(_BYTE **)(v3 - 176), a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  *(_QWORD *)(v3 - 160) = v25;
  *(_QWORD *)(v3 - 152) = v2;
  if (EnumCaseMultiPayload == 1)
  {
    v27(v16, v24, v2);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v30 = v8;
      v28(v8, v25, a1);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v31 = *(_QWORD *)(v3 - 272);
        v32 = *(_QWORD *)(v3 - 192);
        (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(v3 - 144) + 32))(v31, v16, v32);
        v33 = *(_QWORD *)(v3 - 224);
        v34 = *(_QWORD *)(v3 - 216);
        v35 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v33 + 32);
        v36 = *(_QWORD *)(v3 - 248);
        v35(v36, v30, v34);
        v37 = *(_QWORD *)(v3 - 232);
        v35(v37, v26, v34);
        v38 = sub_184E30A70();
        v39 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
        v39(v37, v34);
        v39(v36, v34);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 144) + 8))(v31, v32);
LABEL_8:
        v51 = *(_QWORD *)(v3 - 152);
        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v3 - 128) + 8))(*(_QWORD *)(v3 - 160), a1);
        (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v3 - 136) + 8))(v24, v51);
        return v38;
      }
      *(_QWORD *)(v3 - 256) = *(_QWORD *)(v3 - 224);
      *(_QWORD *)(v3 - 240) = *(_QWORD *)(v3 - 216);
      *(_QWORD *)(v3 - 304) = v8;
      *(_QWORD *)(v3 - 168) = *(_QWORD *)(v3 - 144);
      *(_QWORD *)(v3 - 280) = *(_QWORD *)(v3 - 192);
LABEL_11:
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v3 - 256) + 8))(*(_QWORD *)(v3 - 304), *(_QWORD *)(v3 - 240));
      goto LABEL_12;
    }
    *(_QWORD *)(v3 - 168) = *(_QWORD *)(v3 - 144);
    *(_QWORD *)(v3 - 280) = *(_QWORD *)(v3 - 192);
  }
  else
  {
    v27(v19, v24, v2);
    v16 = v19;
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v40 = *(_BYTE **)(v3 - 304);
      v28(v40, v25, a1);
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        v41 = *(_QWORD *)(v3 - 296);
        v42 = v16;
        v43 = *(_QWORD *)(v3 - 280);
        (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(v3 - 168) + 32))(v41, v42, v43);
        v44 = *(_QWORD *)(v3 - 256);
        v45 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v44 + 32);
        v46 = *(_QWORD *)(v3 - 288);
        v47 = v40;
        v48 = *(_QWORD *)(v3 - 240);
        v45(v46, v47, v48);
        v49 = *(_QWORD *)(v3 - 264);
        v45(v49, v26, v48);
        v38 = sub_184E30A70();
        v50 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
        v50(v49, v48);
        v50(v46, v48);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 168) + 8))(v41, v43);
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
LABEL_12:
  (*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)(v3 - 168) + 8))(v16, *(_QWORD *)(v3 - 280));
  result = sub_184E30B30();
  __break(1u);
  return result;
}

void sub_184A8222C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  __n128 v24;
  _QWORD v25[20];

  v25[9] = a1;
  v25[14] = a5;
  v8 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v25[6] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v25[7] = AssociatedTypeWitness;
  v11 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v10);
  v25[5] = (char *)v25 - v12;
  v25[11] = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v25[4] = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a2 + 16);
  v16 = swift_getAssociatedTypeWitness();
  v25[1] = *(_QWORD *)(v16 - 8);
  v25[2] = v16;
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v25[0] = (char *)v25 - v19;
  v25[10] = *(_QWORD *)(v15 - 8);
  v21 = MEMORY[0x1E0C80A78](v18, v20);
  v23 = MEMORY[0x1E0C80A78](v21, v22);
  MEMORY[0x1E0C80A78](v23, v24);
  v25[15] = v15;
  v25[16] = v8;
  v25[12] = a3;
  v25[17] = a3;
  v25[18] = a4;
  v25[3] = a4;
  _s5IndexOMa();
}

uint64_t sub_184A823D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  void (*v16)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, _QWORD);
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedTypeWitness;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, _QWORD);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  _BYTE v33[80];

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v12 = MEMORY[0x1E0C80A78](TupleTypeMetadata2, v11);
  v14 = &v33[-v13];
  v15 = &v33[*(int *)(v12 + 48) - v13];
  *(_QWORD *)(v8 - 136) = v6;
  v16 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16);
  v16(&v33[-v13], *(_BYTE **)(v8 - 176), v1);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v15, *(_QWORD *)(v8 - 168), a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v16(v7, v14, v1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v17 = *(_QWORD *)(v8 - 208);
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(v8 - 152) + 32))(v17, v7, v5);
      v19 = *(_QWORD *)(v8 - 200);
      v18 = *(_QWORD *)(v8 - 192);
      v20 = *(_QWORD *)(v8 - 184);
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v18 + 32))(v19, v15, v20);
      v21 = (void (*)(uint64_t, _QWORD))sub_184E30AE8();
      v23 = v22;
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(*(_QWORD *)(v8 - 128), v23, AssociatedTypeWitness);
      v21(v8 - 120, 0);
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v19, v20);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 152) + 8))(v17, v5);
      return (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)(v8 - 136) + 8))(v14, v1);
    }
    *(_QWORD *)(v8 - 160) = *(_QWORD *)(v8 - 152);
    v4 = v5;
    v3 = v7;
  }
  else
  {
    v16(v3, v14, v1);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(v8 - 160) + 32))(v2, v3, v4);
      v25 = *(_QWORD *)(v8 - 240);
      v26 = *(_QWORD *)(v8 - 232);
      v27 = *(_QWORD *)(v8 - 224);
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v26 + 32))(v25, v15, v27);
      v28 = (void (*)(uint64_t, _QWORD))sub_184E30AE8();
      v30 = v29;
      v31 = swift_getAssociatedTypeWitness();
      (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(*(_QWORD *)(v8 - 128), v30, v31);
      v28(v8 - 120, 0);
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 160) + 8))(v2, v4);
      return (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)(v8 - 136) + 8))(v14, v1);
    }
  }
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v8 - 160) + 8))(v3, v4);
  result = sub_184E30B30();
  __break(1u);
  return result;
}

void sub_184A826D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedTypeWitness;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  __n128 v19;
  _QWORD v20[16];

  v20[9] = a1;
  v20[10] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v20[8] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v11);
  v20[3] = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v14);
  v20[2] = (char *)v20 - v15;
  v16 = swift_getAssociatedTypeWitness();
  v20[1] = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  MEMORY[0x1E0C80A78](v18, v19);
  v20[4] = a3;
  v20[5] = a5;
  v20[12] = a3;
  v20[13] = a4;
  v20[6] = a4;
  v20[7] = a6;
  v20[14] = a5;
  v20[15] = a6;
  _s5IndexOMa();
}

uint64_t sub_184A82808(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  __n128 v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t TupleTypeMetadata2;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  void (*v21)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v22;
  void (*v23)(uint64_t, _BYTE *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  void (*v29)(uint64_t, _BYTE *, uint64_t);
  void (*v30)(uint64_t, uint64_t);
  uint64_t result;
  _BYTE v32[80];

  v8 = *(_QWORD *)(a1 - 8);
  v9 = MEMORY[0x1E0C80A78](a1, a2);
  v11 = &v32[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v9, v12);
  v14 = &v32[-v13];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v17 = MEMORY[0x1E0C80A78](TupleTypeMetadata2, v16);
  v19 = &v32[-v18];
  v20 = &v32[*(int *)(v17 + 48) - v18];
  *(_QWORD *)(v6 - 120) = v8;
  v21 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16);
  v21(&v32[-v18], *(_BYTE **)(v6 - 136), a1);
  v21(v20, *(_BYTE **)(v6 - 128), a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v21(v11, v19, a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v22 = *(_QWORD *)(v6 - 144);
      v23 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v22 + 32);
      v24 = *(_QWORD *)(v6 - 192);
      v23(v24, v11, v2);
      v25 = *(_QWORD *)(v6 - 184);
      v23(v25, v20, v2);
      swift_getAssociatedConformanceWitness();
      v26 = sub_184E309B0();
      v27 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
      v27(v25, v2);
      v27(v24, v2);
LABEL_6:
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v6 - 120) + 8))(v19, a1);
      return v26 & 1;
    }
    *(_QWORD *)(v6 - 200) = *(_QWORD *)(v6 - 144);
    v5 = v2;
    v14 = v11;
  }
  else
  {
    v21(v14, v19, a1);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v28 = *(_QWORD *)(v6 - 200);
      v29 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v28 + 32);
      v29(v4, v14, v5);
      v29(v3, v20, v5);
      swift_getAssociatedConformanceWitness();
      v26 = sub_184E309B0();
      v30 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
      v30(v3, v5);
      v30(v4, v5);
      goto LABEL_6;
    }
  }
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v6 - 200) + 8))(v14, v5);
  result = sub_184E30B30();
  __break(1u);
  return result;
}

void sub_184A82AD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedTypeWitness;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  __n128 v19;
  _QWORD v20[16];

  v20[9] = a1;
  v20[10] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v20[8] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v11);
  v20[3] = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v14);
  v20[2] = (char *)v20 - v15;
  v16 = swift_getAssociatedTypeWitness();
  v20[1] = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  MEMORY[0x1E0C80A78](v18, v19);
  v20[4] = a3;
  v20[5] = a5;
  v20[12] = a3;
  v20[13] = a4;
  v20[6] = a4;
  v20[7] = a6;
  v20[14] = a5;
  v20[15] = a6;
  _s5IndexOMa();
}

uint64_t sub_184A82C08(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  __n128 v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t TupleTypeMetadata2;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  void (*v21)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v22;
  void (*v23)(uint64_t, _BYTE *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  void (*v29)(uint64_t, _BYTE *, uint64_t);
  void (*v30)(uint64_t, uint64_t);
  uint64_t result;
  _BYTE v32[80];

  v8 = *(_QWORD *)(a1 - 8);
  v9 = MEMORY[0x1E0C80A78](a1, a2);
  v11 = &v32[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v9, v12);
  v14 = &v32[-v13];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v17 = MEMORY[0x1E0C80A78](TupleTypeMetadata2, v16);
  v19 = &v32[-v18];
  v20 = &v32[*(int *)(v17 + 48) - v18];
  *(_QWORD *)(v6 - 120) = v8;
  v21 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16);
  v21(&v32[-v18], *(_BYTE **)(v6 - 136), a1);
  v21(v20, *(_BYTE **)(v6 - 128), a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v21(v11, v19, a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v22 = *(_QWORD *)(v6 - 144);
      v23 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v22 + 32);
      v24 = *(_QWORD *)(v6 - 192);
      v23(v24, v11, v2);
      v25 = *(_QWORD *)(v6 - 184);
      v23(v25, v20, v2);
      swift_getAssociatedConformanceWitness();
      v26 = sub_184E30974();
      v27 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
      v27(v25, v2);
      v27(v24, v2);
LABEL_6:
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v6 - 120) + 8))(v19, a1);
      return v26 & 1;
    }
    *(_QWORD *)(v6 - 200) = *(_QWORD *)(v6 - 144);
    v5 = v2;
    v14 = v11;
  }
  else
  {
    v21(v14, v19, a1);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v28 = *(_QWORD *)(v6 - 200);
      v29 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v28 + 32);
      v29(v4, v14, v5);
      v29(v3, v20, v5);
      swift_getAssociatedConformanceWitness();
      v26 = sub_184E30974();
      v30 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
      v30(v3, v5);
      v30(v4, v5);
      goto LABEL_6;
    }
  }
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v6 - 200) + 8))(v14, v5);
  result = sub_184E30B30();
  __break(1u);
  return result;
}

void sub_184A82ED0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_184A82AD0(a1, a2, a3[2], a3[3], a3[4], a3[5]);
}

void sub_184A82EE0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_184A826D0(a1, a2, a3[2], a3[3], a3[4], a3[5]);
}

void sub_184A82EF0(uint64_t a1, uint64_t a2, __n128 a3)
{
  sub_184A8121C(a1, *(_QWORD *)(a2 - 8), *(_QWORD *)(a2 - 16), (void (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB528], a3);
}

void sub_184A82F14(uint64_t a1, uint64_t a2, __n128 a3)
{
  sub_184A8121C(a1, *(_QWORD *)(a2 - 8), *(_QWORD *)(a2 - 16), (void (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB5A8], a3);
}

void sub_184A82F38(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;

  v8 = (uint64_t *)malloc(0x28uLL);
  *a1 = v8;
  sub_184A82F9C(v8, a2, a3, *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16));
}

void (*sub_184A82F7C(uint64_t a1))(_QWORD *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = a1;
  return sub_184A7A4D0;
}

void sub_184A82F9C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  void *v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *a1 = AssociatedTypeWitness;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  a1[1] = v11;
  v12 = malloc(*(_QWORD *)(v11 + 64));
  a1[2] = (uint64_t)v12;
  sub_184A8222C(a2, a3, a4, a5, (uint64_t)v12);
}

void (*sub_184A8301C())(_QWORD *a1)
{
  return sub_184A7A5A0;
}

void sub_184A83044()
{
  _s5IndexOMa();
}

uint64_t sub_184A83074()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_184E30B00();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v0, 1, 1, v1);
}

void sub_184A830AC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  sub_184A817FC(a1, a2, a3, *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16), a5);
}

void sub_184A830B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_184A81C18(a1, a2, a3, *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16));
}

void sub_184A830CC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_184A813E0(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16), a4);
}

void sub_184A830D8()
{
  _s5IndexOMa();
}

void sub_184A83118(uint64_t a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  MEMORY[0x1E0C80A78](a1, a2);
  sub_184A813E0(v11, v10, v12, v13, (uint64_t)&a10 - v14);
}

uint64_t sub_184A8315C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v0, v2, v1);
}

void sub_184A8319C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  __n128 v25;
  _QWORD v26[20];

  v26[10] = a1;
  v26[14] = a5;
  v26[8] = a4;
  v7 = *(_QWORD *)(a4 + 8);
  v8 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v26[5] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v26[6] = AssociatedTypeWitness;
  v11 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v10);
  v26[4] = (char *)v26 - v12;
  v26[12] = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v26[3] = (char *)v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[7] = a3;
  v15 = *(_QWORD *)(a3 + 8);
  v16 = *(_QWORD *)(a2 + 16);
  v17 = swift_getAssociatedTypeWitness();
  v26[1] = *(_QWORD *)(v17 - 8);
  v26[2] = v17;
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v26[0] = (char *)v26 - v20;
  v26[11] = *(_QWORD *)(v16 - 8);
  v22 = MEMORY[0x1E0C80A78](v19, v21);
  v24 = MEMORY[0x1E0C80A78](v22, v23);
  MEMORY[0x1E0C80A78](v24, v25);
  v26[15] = v16;
  v26[16] = v8;
  v26[17] = v15;
  v26[18] = v7;
  _s5IndexOMa();
}

uint64_t sub_184A8334C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  void (*v16)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  _BYTE v27[80];

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v12 = MEMORY[0x1E0C80A78](TupleTypeMetadata2, v11);
  v14 = &v27[-v13];
  v15 = &v27[*(int *)(v12 + 48) - v13];
  *(_QWORD *)(v8 - 136) = v5;
  v16 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 16);
  v16(&v27[-v13], *(_BYTE **)(v8 - 168), v1);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v15, *(_QWORD *)(v8 - 160), a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v16(v4, v14, v1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v17 = *(_QWORD *)(v8 - 216);
      v18 = v3;
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(v8 - 144) + 32))(v17, v4, v3);
      v19 = *(_QWORD *)(v8 - 208);
      v20 = *(_QWORD *)(v8 - 200);
      v21 = *(_QWORD *)(v8 - 192);
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v20 + 32))(v19, v15, v21);
      sub_184E3095C();
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 144) + 8))(v17, v18);
LABEL_6:
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)(v8 - 136) + 8))(v14, v1);
    }
    *(_QWORD *)(v8 - 152) = *(_QWORD *)(v8 - 144);
    v6 = v3;
    v7 = v4;
  }
  else
  {
    v16(v7, v14, v1);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v22 = v6;
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(v8 - 152) + 32))(v2, v7, v6);
      v23 = *(_QWORD *)(v8 - 240);
      v24 = *(_QWORD *)(v8 - 232);
      v25 = *(_QWORD *)(v8 - 224);
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v24 + 32))(v23, v15, v25);
      sub_184E3095C();
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 152) + 8))(v2, v22);
      goto LABEL_6;
    }
  }
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v8 - 152) + 8))(v7, v6);
  result = sub_184E30B30();
  __break(1u);
  return result;
}

void sub_184A835D4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_184A8319C(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16), a4);
}

void sub_184A835E0()
{
  _s5IndexOMa();
}

void sub_184A83628(uint64_t a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  MEMORY[0x1E0C80A78](a1, a2);
  sub_184A8319C(v11, v10, v12, v13, (uint64_t)&a10 - v14);
}

uint64_t sub_184A8366C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v0, v2, v1);
}

void sub_184A836AC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  sub_184A817FC(a1, a2, a3, *(_QWORD *)(*(_QWORD *)(a4 - 8) + 8), *(_QWORD *)(*(_QWORD *)(a4 - 16) + 8), a5);
}

void sub_184A836BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_184A81C18(a1, a2, a3, *(_QWORD *)(*(_QWORD *)(a4 - 8) + 8), *(_QWORD *)(*(_QWORD *)(a4 - 16) + 8));
}

void sub_184A836CC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  sub_184A817FC(a1, a2, a3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 - 8) + 8) + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 - 16) + 8) + 8), a5);
}

void sub_184A836E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_184A81C18(a1, a2, a3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 - 8) + 8) + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 - 16) + 8) + 8));
}

uint64_t sub_184A83700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_184A8370C(a1, a2, a3, (uint64_t)&unk_184E37F6C);
}

uint64_t sub_184A8370C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v6[2];

  v4 = *(_QWORD *)(*(_QWORD *)(a3 - 16) + 8);
  v6[0] = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8);
  v6[1] = v4;
  return MEMORY[0x186DC3348](a4, a1, v6);
}

uint64_t sub_184A83744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_184A8376C(a1, a2, a3, (uint64_t)&unk_184E37EF4, MEMORY[0x1E0DEA210]);
}

uint64_t sub_184A83758(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_184A8376C(a1, a2, a3, (uint64_t)&unk_184E37EF4, MEMORY[0x1E0DEDE28]);
}

uint64_t sub_184A8376C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  int8x16_t v9;

  v9 = vextq_s8(*(int8x16_t *)(a3 - 16), *(int8x16_t *)(a3 - 16), 8uLL);
  v8 = MEMORY[0x186DC3348](a4, a2, &v9);
  return MEMORY[0x186DC3348](a5, a1, &v8);
}

void sub_184A837C0()
{
  JUMPOUT(0x186DC3348);
}

void sub_184A837D0()
{
  JUMPOUT(0x186DC3348);
}

void sub_184A837E0()
{
  JUMPOUT(0x186DC3348);
}

void _s5IndexOMa()
{
  JUMPOUT(0x186DC32F4);
}

void type metadata accessor for EitherSequence.Iterator()
{
  JUMPOUT(0x186DC32F4);
}

uint64_t sub_184A83808()
{
  return sub_184A838F8();
}

uint64_t *sub_184A8381C(uint64_t *a1, uint64_t *a2)
{
  return sub_184A839B4(a1, a2);
}

uint64_t sub_184A83830(uint64_t a1)
{
  return sub_184A83B48(a1);
}

uint64_t sub_184A83844(uint64_t a1, uint64_t a2)
{
  return sub_184A83C6C(a1, a2);
}

uint64_t sub_184A83858(uint64_t a1, uint64_t a2)
{
  return sub_184A83DA0(a1, a2);
}

uint64_t sub_184A8386C(uint64_t a1, uint64_t a2)
{
  return sub_184A83F68(a1, a2);
}

uint64_t sub_184A83880(uint64_t a1, uint64_t a2)
{
  return sub_184A8409C(a1, a2);
}

uint64_t sub_184A83894(uint64_t a1, unsigned int a2)
{
  return sub_184A84264(a1, a2);
}

void sub_184A838A8(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  sub_184A843E8(a1, a2, a3);
}

uint64_t sub_184A838BC(uint64_t a1)
{
  return sub_184A845F0(a1);
}

void sub_184A838D0(_BYTE *a1, unsigned int a2)
{
  sub_184A846F4(a1, a2);
}

uint64_t sub_184A838E4()
{
  return sub_184A838F8();
}

uint64_t sub_184A838F8()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_184A839A0(uint64_t *a1, uint64_t *a2)
{
  return sub_184A839B4(a1, a2);
}

uint64_t *sub_184A839B4(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_QWORD *)(v8 + 64) <= v6)
    v9 = v6;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = (*(_BYTE *)(v8 + 80) | *(_BYTE *)(v5 + 80));
  if (v10 <= 7 && v9 + 1 <= 0x18 && ((*(_DWORD *)(v8 + 80) | *(_DWORD *)(v5 + 80)) & 0x100000) == 0)
  {
    v14 = *((unsigned __int8 *)a2 + v9);
    if (v14 >= 2)
    {
      if (v9 <= 3)
        v15 = v9;
      else
        v15 = 4;
      __asm { BR              X13 }
    }
    if (v14 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      *((_BYTE *)a1 + v9) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      *((_BYTE *)a1 + v9) = 0;
    }
  }
  else
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v10 + 16) & ~v10));
    swift_retain();
  }
  return a1;
}

uint64_t sub_184A83B34(uint64_t a1)
{
  return sub_184A83B48(a1);
}

uint64_t sub_184A83B48(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  if (v7 <= v4)
    v7 = v4;
  v8 = *(unsigned __int8 *)(a1 + v7);
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X14 }
  }
  if (v8 == 1)
  {
    v10 = v5;
  }
  else
  {
    v6 = v3;
    v10 = AssociatedTypeWitness;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, v10);
}

uint64_t sub_184A83C58(uint64_t a1, uint64_t a2)
{
  return sub_184A83C6C(a1, a2);
}

uint64_t sub_184A83C6C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_QWORD *)(v8 + 64) <= v6)
    v9 = v6;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = *(unsigned __int8 *)(a2 + v9);
  if (v10 >= 2)
  {
    if (v9 <= 3)
      v11 = v9;
    else
      v11 = 4;
    __asm { BR              X13 }
  }
  v12 = v10 == 1;
  if (v10 == 1)
  {
    v13 = v7;
  }
  else
  {
    v8 = v5;
    v13 = AssociatedTypeWitness;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a1, a2, v13);
  *(_BYTE *)(a1 + v9) = v12;
  return a1;
}

uint64_t sub_184A83D8C(uint64_t a1, uint64_t a2)
{
  return sub_184A83DA0(a1, a2);
}

uint64_t sub_184A83DA0(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v6 = *(_QWORD *)(v5 + 64);
    v7 = swift_getAssociatedTypeWitness();
    v8 = v7;
    v9 = *(_QWORD *)(v7 - 8);
    if (*(_QWORD *)(v9 + 64) <= v6)
      v10 = v6;
    else
      v10 = *(_QWORD *)(v9 + 64);
    v11 = *(unsigned __int8 *)(a1 + v10);
    if (v11 >= 2)
    {
      if (v10 <= 3)
        v12 = v10;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
      v13 = *(_QWORD *)(v7 - 8);
    else
      v13 = v5;
    if (v11 == 1)
      v14 = v7;
    else
      v14 = AssociatedTypeWitness;
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v14);
    v15 = *(unsigned __int8 *)(a2 + v10);
    if (v15 >= 2)
    {
      if (v10 <= 3)
        v16 = v10;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    v17 = v15 == 1;
    if (v15 == 1)
      v18 = v9;
    else
      v18 = v5;
    if (v15 == 1)
      v19 = v8;
    else
      v19 = AssociatedTypeWitness;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(a1, a2, v19);
    *(_BYTE *)(a1 + v10) = v17;
  }
  return a1;
}

uint64_t sub_184A83F54(uint64_t a1, uint64_t a2)
{
  return sub_184A83F68(a1, a2);
}

uint64_t sub_184A83F68(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_QWORD *)(v8 + 64) <= v6)
    v9 = v6;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = *(unsigned __int8 *)(a2 + v9);
  if (v10 >= 2)
  {
    if (v9 <= 3)
      v11 = v9;
    else
      v11 = 4;
    __asm { BR              X13 }
  }
  v12 = v10 == 1;
  if (v10 == 1)
  {
    v13 = v7;
  }
  else
  {
    v8 = v5;
    v13 = AssociatedTypeWitness;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(a1, a2, v13);
  *(_BYTE *)(a1 + v9) = v12;
  return a1;
}

uint64_t sub_184A84088(uint64_t a1, uint64_t a2)
{
  return sub_184A8409C(a1, a2);
}

uint64_t sub_184A8409C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v6 = *(_QWORD *)(v5 + 64);
    v7 = swift_getAssociatedTypeWitness();
    v8 = v7;
    v9 = *(_QWORD *)(v7 - 8);
    if (*(_QWORD *)(v9 + 64) <= v6)
      v10 = v6;
    else
      v10 = *(_QWORD *)(v9 + 64);
    v11 = *(unsigned __int8 *)(a1 + v10);
    if (v11 >= 2)
    {
      if (v10 <= 3)
        v12 = v10;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
      v13 = *(_QWORD *)(v7 - 8);
    else
      v13 = v5;
    if (v11 == 1)
      v14 = v7;
    else
      v14 = AssociatedTypeWitness;
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v14);
    v15 = *(unsigned __int8 *)(a2 + v10);
    if (v15 >= 2)
    {
      if (v10 <= 3)
        v16 = v10;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    v17 = v15 == 1;
    if (v15 == 1)
      v18 = v9;
    else
      v18 = v5;
    if (v15 == 1)
      v19 = v8;
    else
      v19 = AssociatedTypeWitness;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(a1, a2, v19);
    *(_BYTE *)(a1 + v10) = v17;
  }
  return a1;
}

uint64_t sub_184A84250(uint64_t a1, unsigned int a2)
{
  return sub_184A84264(a1, a2);
}

uint64_t sub_184A84264(uint64_t a1, unsigned int a2)
{
  unint64_t v4;
  uint64_t AssociatedTypeWitness;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v9;
  unsigned int v11;
  int v12;
  unsigned int v13;

  v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) <= v4)
    v6 = v4;
  else
    v6 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_22;
  v7 = v6 + 1;
  v8 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    v11 = ((a2 + ~(-1 << v8) - 254) >> v8) + 1;
    if (HIWORD(v11))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v11 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v11 < 2)
    {
LABEL_22:
      v13 = *(unsigned __int8 *)(a1 + v6);
      if (v13 >= 2)
        return (v13 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_22;
LABEL_15:
  v12 = (v9 - 1) << v8;
  if (v7 > 3)
    v12 = 0;
  if ((_DWORD)v7)
  {
    if (v7 > 3)
      LODWORD(v7) = 4;
    __asm { BR              X11 }
  }
  return (v12 + 255);
}

void sub_184A843D4(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  sub_184A843E8(a1, a2, a3);
}

void sub_184A843E8(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v6 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v7 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v7 <= v6)
    v7 = v6;
  v8 = v7 + 1;
  if (a3 < 0xFF)
  {
    v9 = 0u;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 + ~(-1 << (8 * v8)) - 254) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v10 = a2 - 255;
  if (v8 < 4)
  {
    if ((_DWORD)v7 != -1)
    {
      v12 = v10 & ~(-1 << (8 * v8));
      bzero(a1, v8);
      if ((_DWORD)v8 == 3)
      {
        *(_WORD *)a1 = v12;
        a1[2] = BYTE2(v12);
      }
      else if ((_DWORD)v8 == 2)
      {
        *(_WORD *)a1 = v12;
      }
      else
      {
        *a1 = v12;
      }
    }
  }
  else
  {
    bzero(a1, v7 + 1);
    *(_DWORD *)a1 = v10;
  }
  __asm { BR              X10 }
}

uint64_t sub_184A845DC(uint64_t a1)
{
  return sub_184A845F0(a1);
}

uint64_t sub_184A845F0(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v3 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v3 <= v2)
    v3 = v2;
  result = *(unsigned __int8 *)(a1 + v3);
  if (result >= 2)
  {
    if (v3 <= 3)
      v5 = v3;
    else
      v5 = 4;
    __asm { BR              X12 }
  }
  return result;
}

void sub_184A846E0(_BYTE *a1, unsigned int a2)
{
  sub_184A846F4(a1, a2);
}

void sub_184A846F4(_BYTE *a1, unsigned int a2)
{
  unint64_t v4;
  unint64_t v5;
  size_t v6;
  uint64_t AssociatedTypeWitness;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;

  if (a2 > 1)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) <= v6)
      v8 = v6;
    else
      v8 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
    v9 = a2 - 2;
    if (v8 < 4)
    {
      v10 = v9 >> (8 * v8);
      v11 = v9 & ~(-1 << (8 * v8));
      a1[v8] = v10 + 2;
      bzero(a1, v8);
      if ((_DWORD)v8 == 3)
      {
        *(_WORD *)a1 = v11;
        a1[2] = BYTE2(v11);
      }
      else if ((_DWORD)v8 == 2)
      {
        *(_WORD *)a1 = v11;
      }
      else
      {
        *a1 = v11;
      }
    }
    else
    {
      a1[v8] = 2;
      bzero(a1, v8);
      *(_DWORD *)a1 = v9;
    }
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
    v5 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
    if (v4 > v5)
      v5 = v4;
    a1[v5] = a2;
  }
}

void sub_184A8484C()
{
  JUMPOUT(0x186DC3348);
}

void sub_184A8485C()
{
  JUMPOUT(0x186DC3348);
}

uint64_t sub_184A8486C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t AssociatedTypeWitness;
  __n128 v19;
  uint64_t v20;
  char *v21;
  uint64_t v23;
  uint64_t v24;

  v4 = v3;
  v24 = a2;
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](a1, a3);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = *(_QWORD *)(v11 - 8);
  v14 = MEMORY[0x1E0C80A78](v8, v13);
  v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v14 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v19);
  v21 = (char *)&v23 - v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v16, v4, v11);
  sub_184E309D4();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v4 + *(int *)(a1 + 44), v6);
  sub_184A849D4((uint64_t)v21, (uint64_t)v10, *(_QWORD *)(v4 + *(int *)(a1 + 48)), *(_QWORD *)(v4 + *(int *)(a1 + 48) + 8), v11, v6, v17, v24);
  return swift_retain();
}

uint64_t sub_184A849D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t result;
  _QWORD *v19;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a8, a1, AssociatedTypeWitness);
  v17 = type metadata accessor for ReduceSequence.Iterator(0, a5, a6, a7);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32))(a8 + *(int *)(v17 + 44), a2, a6);
  v19 = (_QWORD *)(a8 + *(int *)(v17 + 48));
  *v19 = a3;
  v19[1] = a4;
  return result;
}

uint64_t sub_184A84A9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = a2;
  v31 = *(_QWORD *)(a1 + 24);
  v30 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](a1, a3);
  v29 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = sub_184E30B00();
  v27 = *(_QWORD *)(v7 - 8);
  v28 = v7;
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v27 - v10;
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v9, v13);
  v15 = (char *)&v27 - v14;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  sub_184E30B0C();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v28);
    v16 = 1;
    v18 = v31;
    v17 = v32;
    v19 = v30;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v11, AssociatedTypeWitness);
    v20 = v3 + *(int *)(a1 + 44);
    v21 = v29;
    (*(void (**)(uint64_t, char *))(v3 + *(int *)(a1 + 48)))(v20, v15);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, AssociatedTypeWitness);
    v22 = v30;
    v23 = v21;
    v24 = v31;
    (*(void (**)(uint64_t, char *, uint64_t))(v30 + 40))(v20, v23, v31);
    v25 = v32;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v32, v20, v24);
    v16 = 0;
    v18 = v24;
    v17 = v25;
    v19 = v22;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v17, v16, 1, v18);
}

uint64_t sub_184A84CD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v3;

  sub_184A8486C(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v3, a1);
}

uint64_t sub_184A84D08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  __n128 v24;
  uint64_t v25;
  char *v26;
  void (*v27)(char *, char *, uint64_t);
  char v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  void (*v37)(char *, _QWORD);
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v42[2];
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char v51[32];

  v4 = v3;
  v50 = a3;
  v7 = *(_QWORD *)(a1 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v45 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v46 = AssociatedTypeWitness;
  v10 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v44 = (char *)v42 - v11;
  v49 = *(_QWORD *)(a1 + 24);
  v43 = *(_QWORD *)(v49 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v48 = (char *)v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v17, v20);
  v23 = (char *)v42 - v22;
  MEMORY[0x1E0C80A78](v21, v24);
  v26 = (char *)v42 - v25;
  sub_184E30A40();
  v27 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  v47 = v23;
  v27(v23, v26, v14);
  sub_184E30A7C();
  swift_getAssociatedConformanceWitness();
  v28 = sub_184E309B0();
  v29 = *(void (**)(char *, uint64_t))(v15 + 8);
  v29(v19, v14);
  if ((v28 & 1) != 0)
  {
    v29(v26, v14);
    v30 = v4 + *(int *)(a1 + 44);
    v32 = (uint64_t)v48;
    v31 = v49;
    (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v48, v30, v49);
    v33 = v31;
  }
  else
  {
    v34 = *(int *)(a1 + 44);
    v35 = (uint64_t *)(v4 + *(int *)(a1 + 48));
    v36 = *v35;
    v42[1] = v35[1];
    v43 = v36;
    v42[0] = v4 + v34;
    v37 = (void (*)(char *, _QWORD))sub_184E30AE8();
    v38 = v44;
    v39 = v45;
    v40 = v46;
    (*(void (**)(char *))(v45 + 16))(v44);
    v37(v51, 0);
    v32 = (uint64_t)v48;
    ((void (*)(_QWORD, char *))v43)(v42[0], v38);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v38, v40);
    v29(v26, v14);
    v33 = v49;
  }
  return sub_184A84FD4((uint64_t)v47, v32, v7, v33, a2, v50);
}

uint64_t sub_184A84FD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a6, a1, AssociatedTypeWitness);
  v13 = a6 + *(int *)(_s5IndexVMa_0(0, a3, a4, a5) + 44);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(v13, a2, a4);
}

uint64_t sub_184A85074@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;

  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](a1, a4);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v10 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v15);
  v17 = (char *)&v19 - v16;
  sub_184E30A7C();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v4 + *(int *)(a1 + 44), v8);
  return sub_184A84FD4((uint64_t)v17, (uint64_t)v12, v13, v8, a2, a3);
}

uint64_t sub_184A85178@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  __n128 v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, _QWORD);
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char v51[32];

  v5 = v4;
  v49 = a4;
  v9 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v45 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v46 = AssociatedTypeWitness;
  v12 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v11);
  v44 = (char *)&v41 - v13;
  v50 = *(_QWORD *)(a2 + 24);
  v42 = *(_QWORD *)(v50 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v48 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = swift_getAssociatedTypeWitness();
  v17 = *(_QWORD *)(v16 - 8);
  v19 = MEMORY[0x1E0C80A78](v16, v18);
  v21 = (char *)&v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v19, v22);
  v25 = (char *)&v41 - v24;
  MEMORY[0x1E0C80A78](v23, v26);
  v28 = (char *)&v41 - v27;
  v43 = a1;
  sub_184E30A4C();
  v29 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
  v47 = v25;
  v29(v25, v28, v16);
  sub_184E30A7C();
  swift_getAssociatedConformanceWitness();
  LOBYTE(a1) = sub_184E309B0();
  v30 = *(void (**)(char *, uint64_t))(v17 + 8);
  v30(v21, v16);
  if ((a1 & 1) != 0)
  {
    v30(v28, v16);
    v31 = v5 + *(int *)(a2 + 44);
    v32 = (uint64_t)v48;
    (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v48, v31, v50);
  }
  else
  {
    v33 = (uint64_t *)(v5 + *(int *)(a2 + 48));
    v34 = *v33;
    v41 = v33[1];
    v42 = v34;
    v35 = _s5IndexVMa_0(0, v9, v50, a3);
    v43 += *(int *)(v35 + 44);
    v36 = (void (*)(char *, _QWORD))sub_184E30AE8();
    v38 = v44;
    v37 = v45;
    v39 = v46;
    (*(void (**)(char *))(v45 + 16))(v44);
    v36(v51, 0);
    v32 = (uint64_t)v48;
    ((void (*)(uint64_t, char *))v42)(v43, v38);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v39);
    v30(v28, v16);
  }
  return sub_184A84FD4((uint64_t)v47, v32, v9, v50, a3, v49);
}

uint64_t sub_184A85468()
{
  return sub_184E30A70();
}

uint64_t sub_184A85470()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return sub_184E309B0() & 1;
}

uint64_t sub_184A85504()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return sub_184E30974() & 1;
}

uint64_t sub_184A85598()
{
  return sub_184A85504();
}

uint64_t sub_184A855A8()
{
  return sub_184A85470();
}

uint64_t sub_184A855B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_184A84D08(a1, *(_QWORD *)(a2 - 8), a3);
}

uint64_t sub_184A855C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  return sub_184A85074(a1, *(_QWORD *)(a2 - 8), a3, a4);
}

void (*sub_184A855C8(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4))(_QWORD *a1)
{
  uint64_t *v8;

  v8 = (uint64_t *)malloc(0x28uLL);
  *a1 = v8;
  v8[4] = (uint64_t)sub_184A8562C(v8, a2, a3, *(_QWORD *)(a4 - 8));
  return sub_184A7A4D0;
}

void (*sub_184A8562C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4))(_QWORD *a1)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;

  v8 = *(_QWORD *)(a3 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  *a1 = v8;
  a1[1] = v9;
  v10 = malloc(*(_QWORD *)(v9 + 64));
  a1[2] = (uint64_t)v10;
  v11 = _s5IndexVMa_0(0, *(_QWORD *)(a3 + 16), v8, a4);
  (*(void (**)(void *, uint64_t, uint64_t))(v9 + 16))(v10, a2 + *(int *)(v11 + 44), v8);
  return sub_184A7A5A0;
}

uint64_t sub_184A856C4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;

  _s5IndexVMa_0(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a2 - 8));
  v4 = sub_184E30B00();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a3, 1, 1, v4);
}

uint64_t sub_184A8571C()
{
  return sub_184A85468();
}

uint64_t sub_184A85724@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_184A85178(a1, a2, *(_QWORD *)(a3 - 8), a4);
}

uint64_t sub_184A8572C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = _s5IndexVMa_0(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), v5);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v12 - v9;
  sub_184A85178(a1, a2, v5, (uint64_t)&v12 - v9);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v10, v6);
}

void sub_184A857E4()
{
  JUMPOUT(0x186DC3348);
}

void sub_184A857F4()
{
  JUMPOUT(0x186DC3348);
}

uint64_t type metadata accessor for ReduceSequence.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ReduceSequence.Iterator);
}

uint64_t _s5IndexVMa_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s5IndexVMn_0);
}

uint64_t sub_184A8581C()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_184A858C8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(_QWORD *)(a3 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = *(_QWORD *)(v7 + 64) + v10;
  v12 = *(_QWORD *)(v9 + 64) + 7;
  v13 = v10 | *(_DWORD *)(v7 + 80) & 0xF8;
  if (v13 > 7
    || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || ((v12 + (v11 & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + (((v13 | 7) + 16) & ~(unint64_t)(v13 | 7)));
  }
  else
  {
    v17 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, AssociatedTypeWitness);
    v18 = ((unint64_t)a2 + v11) & v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v11) & v17, v18, v8);
    v19 = (_QWORD *)((v12 + v18) & 0xFFFFFFFFFFFFFFF8);
    v20 = v19[1];
    v21 = (_QWORD *)((v12 + (((unint64_t)a1 + v11) & v17)) & 0xFFFFFFFFFFFFFFF8);
    *v21 = *v19;
    v21[1] = v20;
  }
  swift_retain();
  return a1;
}

uint64_t sub_184A859F4(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((*(_QWORD *)(v5 + 64)
                                                                                            + a1
                                                                                            + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
  return swift_release();
}

uint64_t sub_184A85A8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, AssociatedTypeWitness);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = v8 + v10;
  v12 = (v11 + a1) & ~v10;
  v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v9 + 16))(v12, v13);
  v14 = *(_QWORD *)(v9 + 64) + 7;
  v15 = (_QWORD *)((v14 + v12) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_QWORD *)((v14 + v13) & 0xFFFFFFFFFFFFFFF8);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  swift_retain();
  return a1;
}

uint64_t sub_184A85B4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(a1, a2, AssociatedTypeWitness);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = v8 + v10;
  v12 = (v11 + a1) & ~v10;
  v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v9 + 24))(v12, v13);
  v14 = *(_QWORD *)(v9 + 64) + 7;
  v15 = (_QWORD *)((v14 + v12) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_QWORD *)((v14 + v13) & 0xFFFFFFFFFFFFFFF8);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_184A85C18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, AssociatedTypeWitness);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = v8 + v10;
  v12 = (v11 + a1) & ~v10;
  v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v9 + 32))(v12, v13);
  *(_OWORD *)((*(_QWORD *)(v9 + 64) + 7 + v12) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v9 + 64) + 7 + v13) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_184A85CD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40))(a1, a2, AssociatedTypeWitness);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = v8 + v10;
  v12 = (v11 + a1) & ~v10;
  v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v9 + 40))(v12, v13);
  *(_OWORD *)((*(_QWORD *)(v9 + 64) + 7 + v12) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v9 + 64) + 7 + v13) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_184A85D98(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  unint64_t v23;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(a3 + 24);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int *)(v10 + 84);
  if (v11 <= v8)
    v12 = *(_DWORD *)(v7 + 84);
  else
    v12 = *(_DWORD *)(v10 + 84);
  if (v12 <= 0x7FFFFFFF)
    v12 = 0x7FFFFFFF;
  if (!a2)
    return 0;
  v13 = AssociatedTypeWitness;
  v14 = *(unsigned __int8 *)(v10 + 80);
  v15 = *(_QWORD *)(v7 + 64) + v14;
  v16 = *(_QWORD *)(v10 + 64) + 7;
  if (v12 < a2)
  {
    if (((((v16 + (v15 & ~v14)) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v17 = 2;
    else
      v17 = a2 - v12 + 1;
    if (v17 >= 0x10000)
      v18 = 4;
    else
      v18 = 2;
    if (v17 < 0x100)
      v18 = 1;
    if (v17 >= 2)
      v19 = v18;
    else
      v19 = 0;
    __asm { BR              X4 }
  }
  if (v8 == v12)
  {
    v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v22 = a1;
    v11 = *(unsigned int *)(v7 + 84);
    v9 = v13;
    return v21(v22, v11, v9);
  }
  v22 = (v15 + a1) & ~v14;
  if ((_DWORD)v11 == v12)
  {
    v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v21(v22, v11, v9);
  }
  v23 = *(_QWORD *)((v16 + v22) & 0xFFFFFFFFFFFFF8);
  if (v23 >= 0xFFFFFFFF)
    LODWORD(v23) = -1;
  return (v23 + 1);
}

void sub_184A85F38(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;

  v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v9 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v9 + 84) <= *(_DWORD *)(v8 + 84))
    v10 = *(_DWORD *)(v8 + 84);
  else
    v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 >= a3)
  {
    v14 = 0u;
    if (a2 <= v10)
      goto LABEL_19;
  }
  else
  {
    if (((*(_DWORD *)(v9 + 64) + 7 + ((*(_DWORD *)(v8 + 64) + (_DWORD)v11) & ~(_DWORD)v11)) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v12 = a3 - v10 + 1;
    else
      v12 = 2;
    if (v12 >= 0x10000)
      v13 = 4;
    else
      v13 = 2;
    if (v12 < 0x100)
      v13 = 1;
    if (v12 >= 2)
      v14 = v13;
    else
      v14 = 0;
    if (a2 <= v10)
LABEL_19:
      __asm { BR              X0 }
  }
  if (((*(_DWORD *)(v9 + 64) + 7 + ((*(_DWORD *)(v8 + 64) + (_DWORD)v11) & ~(_DWORD)v11)) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v15 = ~v10 + a2;
    bzero(a1, ((*(_QWORD *)(v9 + 64) + 7 + ((*(_QWORD *)(v8 + 64) + v11) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v15;
  }
  __asm { BR              X10 }
}

void sub_184A86080()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x184A86118);
}

void sub_184A86088()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x184A86090);
  JUMPOUT(0x184A86118);
}

void sub_184A860DC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x184A86118);
}

void sub_184A860E4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x184A86118);
}

uint64_t sub_184A860EC@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_WORD *)(v13 + v15) = 0;
  if (!(_DWORD)v14)
    JUMPOUT(0x184A86118);
  if ((_DWORD)v7 == v10)
  {
    v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v4 = v13;
    v5 = v14;
    a1 = v7;
    a2 = a3;
  }
  else
  {
    v4 = (v11 + v13) & v12;
    if ((_DWORD)a1 != v10)
      JUMPOUT(0x184A860F8);
    v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
    v5 = v14;
  }
  return v3(v4, v5, a1, a2);
}

uint64_t sub_184A86130()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_184A861C8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = *(_QWORD *)(v7 + 64) + 7;
  v11 = v8 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v11 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || ((v10 + (v9 & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + (((v11 | 7) + 16) & ~(unint64_t)(v11 | 7)));
  }
  else
  {
    v15 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    v16 = ((unint64_t)a2 + v9) & v15;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(((unint64_t)v4 + v9) & v15, v16, v5);
    v17 = (_QWORD *)((v10 + v16) & 0xFFFFFFFFFFFFFFF8);
    v18 = v17[1];
    v19 = (_QWORD *)((v10 + (((unint64_t)v4 + v9) & v15)) & 0xFFFFFFFFFFFFFFF8);
    *v19 = *v17;
    v19[1] = v18;
  }
  swift_retain();
  return v4;
}

uint64_t sub_184A862D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((*(_QWORD *)(v4 + 64)
                                                                                            + a1
                                                                                            + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
  return swift_release();
}

uint64_t sub_184A86348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64) + 7;
  v14 = (_QWORD *)((v13 + v11) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_QWORD *)((v13 + v12) & 0xFFFFFFFFFFFFFFF8);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  swift_retain();
  return a1;
}

uint64_t sub_184A863E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64) + 7;
  v14 = (_QWORD *)((v13 + v11) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_QWORD *)((v13 + v12) & 0xFFFFFFFFFFFFFFF8);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_184A86484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v11, v12);
  *(_OWORD *)((*(_QWORD *)(v8 + 64) + 7 + v11) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v8 + 64) + 7 + v12) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_184A86518(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v11, v12);
  *(_OWORD *)((*(_QWORD *)(v8 + 64) + 7 + v11) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v8 + 64) + 7 + v12) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_184A865B4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= v6)
    v9 = *(_DWORD *)(v5 + 84);
  else
    v9 = *(_DWORD *)(v7 + 84);
  if (v9 <= 0x7FFFFFFF)
    v9 = 0x7FFFFFFF;
  if (!a2)
    return 0;
  v10 = *(unsigned __int8 *)(v7 + 80);
  v11 = *(_QWORD *)(v5 + 64) + v10;
  v12 = *(_QWORD *)(v7 + 64) + 7;
  if (v9 >= a2)
  {
    if (v6 == v9)
    {
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v5 + 48))(a1, *(unsigned int *)(v5 + 84), v4);
    }
    else
    {
      v17 = (v11 + a1) & ~v10;
      if (v8 == v9)
      {
        return (*(uint64_t (**)(uint64_t))(v7 + 48))(v17);
      }
      else
      {
        v18 = *(_QWORD *)((v12 + v17) & 0xFFFFFFFFFFFFF8);
        if (v18 >= 0xFFFFFFFF)
          LODWORD(v18) = -1;
        return (v18 + 1);
      }
    }
  }
  else
  {
    if (((((v12 + (v11 & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v13 = 2;
    else
      v13 = a2 - v9 + 1;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v15 = v14;
    else
      v15 = 0;
    return ((uint64_t (*)(void))((char *)&loc_184A86654 + 4 * byte_184E3810F[v15]))();
  }
}

void sub_184A866FC(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  v8 = *(unsigned __int8 *)(v6 + 80);
  if (v7 >= a3)
  {
    v11 = 0u;
    if (a2 <= v7)
      goto LABEL_19;
  }
  else
  {
    if (((*(_DWORD *)(v6 + 64) + 7 + ((*(_DWORD *)(v5 + 64) + (_DWORD)v8) & ~(_DWORD)v8)) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v9 = a3 - v7 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_19:
      __asm { BR              X0 }
  }
  if (((*(_DWORD *)(v6 + 64) + 7 + ((*(_DWORD *)(v5 + 64) + (_DWORD)v8) & ~(_DWORD)v8)) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + 7 + ((*(_QWORD *)(v5 + 64) + v8) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_184A86818()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x184A868A8);
}

void sub_184A86820(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x184A86828);
  JUMPOUT(0x184A868A8);
}

void sub_184A8686C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x184A868A8);
}

void sub_184A86874()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x184A868A8);
}

uint64_t sub_184A8687C(uint64_t a1, int a2, int a3)
{
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_WORD *)(v12 + v13) = 0;
  if (!a2)
    JUMPOUT(0x184A868A8);
  if (v6 == v9)
  {
    v3 = *(uint64_t (**)(uint64_t))(v10 + 56);
    v4 = v12;
  }
  else
  {
    v4 = (v11 + v12) & v7;
    if (a3 != v9)
      JUMPOUT(0x184A86888);
    v3 = *(uint64_t (**)(uint64_t))(v8 + 56);
  }
  return v3(v4);
}

uint64_t type metadata accessor for ReduceSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ReduceSequence);
}

uint64_t sub_184A868CC()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_184A868D4()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_184A86974(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(_QWORD *)(a3 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = *(_QWORD *)(v7 + 64) + v10;
  v12 = (*(_BYTE *)(v7 + 80) | *(_BYTE *)(v9 + 80));
  if (v12 > 7
    || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || (v11 & (unint64_t)~v10) + *(_QWORD *)(v9 + 64) > 0x18)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain();
  }
  else
  {
    v16 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, AssociatedTypeWitness);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v11) & v16, ((unint64_t)a2 + v11) & v16, v8);
  }
  return a1;
}

uint64_t sub_184A86A64(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((*(_QWORD *)(v5 + 64) + a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

uint64_t sub_184A86AE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, AssociatedTypeWitness);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 16))((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t sub_184A86B74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(a1, a2, AssociatedTypeWitness);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t sub_184A86C08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, AssociatedTypeWitness);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 32))((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t sub_184A86C9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40))(a1, a2, AssociatedTypeWitness);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 40))((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t sub_184A86D30(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = *(_QWORD *)(a3 + 24);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 84);
  if (v11 <= v8)
    v12 = *(_DWORD *)(v7 + 84);
  else
    v12 = *(_DWORD *)(v10 + 84);
  if (!a2)
    return 0;
  v13 = *(unsigned __int8 *)(v10 + 80);
  v14 = *(_QWORD *)(v7 + 64) + v13;
  if (a2 <= v12)
    goto LABEL_23;
  v15 = (v14 & ~v13) + *(_QWORD *)(v10 + 64);
  v16 = 8 * v15;
  if (v15 <= 3)
  {
    v18 = ((a2 - v12 + ~(-1 << v16)) >> v16) + 1;
    if (HIWORD(v18))
    {
      v17 = *(_DWORD *)(a1 + v15);
      if (!v17)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v18 > 0xFF)
    {
      v17 = *(unsigned __int16 *)(a1 + v15);
      if (!*(_WORD *)(a1 + v15))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v18 < 2)
    {
LABEL_23:
      if (v12)
      {
        if (v8 >= v11)
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, v8, AssociatedTypeWitness);
        else
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v10 + 48))((v14 + a1) & ~v13, *(unsigned int *)(v10 + 84), v9);
      }
      return 0;
    }
  }
  v17 = *(unsigned __int8 *)(a1 + v15);
  if (!*(_BYTE *)(a1 + v15))
    goto LABEL_23;
LABEL_14:
  v19 = (v17 - 1) << v16;
  if (v15 > 3)
    v19 = 0;
  if ((_DWORD)v15)
  {
    if (v15 <= 3)
      v20 = (v14 & ~(_DWORD)v13) + *(_DWORD *)(v10 + 64);
    else
      v20 = 4;
    __asm { BR              X12 }
  }
  return v12 + v19 + 1;
}

void sub_184A86ED8(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v9 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v9 + 84) <= *(_DWORD *)(v8 + 84))
    v10 = *(_DWORD *)(v8 + 84);
  else
    v10 = *(_DWORD *)(v9 + 84);
  v11 = *(unsigned __int8 *)(v9 + 80);
  v12 = ((*(_QWORD *)(v8 + 64) + v11) & ~v11) + *(_QWORD *)(v9 + 64);
  if (a3 <= v10)
  {
    v13 = 0u;
  }
  else if (v12 <= 3)
  {
    v15 = ((a3 - v10 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v13 = 4u;
    }
    else if (v15 >= 0x100)
    {
      v13 = 2;
    }
    else
    {
      v13 = v15 > 1;
    }
  }
  else
  {
    v13 = 1u;
  }
  if (v10 < a2)
  {
    v14 = ~v10 + a2;
    if (v12 < 4)
    {
      if ((_DWORD)v12)
      {
        v16 = v14 & ~(-1 << (8 * v12));
        bzero(a1, ((*(_QWORD *)(v8 + 64) + v11) & ~v11) + *(_QWORD *)(v9 + 64));
        if ((_DWORD)v12 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if ((_DWORD)v12 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, ((*(_QWORD *)(v8 + 64) + v11) & ~v11) + *(_QWORD *)(v9 + 64));
      *(_DWORD *)a1 = v14;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x186DC32F4](a1, v6, a5);
}

void sub_184A87130()
{
  JUMPOUT(0x186DC3348);
}

void sub_184A87140()
{
  JUMPOUT(0x186DC3348);
}

void sub_184A87150(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t AssociatedTypeWitness;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  v23 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1, a3);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v9, v12);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v21 - v17;
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v20 = v22;
  v19(v14, v22, v10);
  sub_184E309D4();
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v6, v20 + *(int *)(a1 + 68), v4);
  sub_184E309D4();
  sub_184A87314((uint64_t)v18, v24);
}

void sub_184A87314(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a2, a1, AssociatedTypeWitness);
  type metadata accessor for MergeSequence.Iterator();
}

void sub_184A873A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;

  v3 = v2 + *(int *)(a1 + 68);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v3, v1, AssociatedTypeWitness);
  type metadata accessor for MergeSequence.Iterator.EitherElement();
}

uint64_t sub_184A87408()
{
  return swift_storeEnumTagMultiPayload();
}

void sub_184A87438(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[7];
  uint64_t TupleTypeMetadata2;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v29 = a2;
  v3 = a1[6];
  v4 = a1[3];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v25 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v6);
  v23[1] = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v9);
  v23[3] = (char *)v23 - v10;
  v11 = a1[5];
  v12 = a1[2];
  v13 = swift_getAssociatedTypeWitness();
  v30 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v23[0] = (char *)v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v17);
  v23[2] = (char *)v23 - v18;
  v31 = v19;
  sub_184E30B00();
  v27 = AssociatedTypeWitness;
  sub_184E30B00();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v20);
  v21 = a1[4];
  v22 = a1[7];
  v23[4] = v12;
  v32 = v12;
  v33 = v4;
  v23[5] = v4;
  v28 = v21;
  v34 = v21;
  v35 = v11;
  v36 = v3;
  v37 = v22;
  v26 = v22;
  type metadata accessor for MergeSequence.Iterator.EitherElement();
}

uint64_t sub_184A87628(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int EnumCaseMultiPayload;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t result;
  _BYTE v65[96];

  v9 = MEMORY[0x1E0C80A78](a1, a2);
  v11 = &v65[-v10];
  *(_QWORD *)(v7 - 160) = v2;
  *(_QWORD *)(v7 - 184) = *(_QWORD *)(v2 - 8);
  v13 = MEMORY[0x1E0C80A78](v9, v12);
  *(_QWORD *)(v7 - 176) = &v65[-v14];
  *(_QWORD *)(v7 - 192) = v4;
  v15 = *(_QWORD *)(v4 - 8);
  v17 = MEMORY[0x1E0C80A78](v13, v16);
  v19 = &v65[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v17, v20);
  *(_QWORD *)(v7 - 168) = &v65[-v21];
  v22 = v6 + *(int *)(v5 + 72);
  *(_QWORD *)(v7 - 256) = v23;
  *(_QWORD *)(v7 - 248) = v22;
  (*(void (**)(_BYTE *))(v23 + 16))(v11);
  *(_QWORD *)(v7 - 240) = a1;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v25 = *(_QWORD *)(v7 - 184);
      v26 = *(_QWORD *)(v7 - 176);
      (*(void (**)(uint64_t, _BYTE *, _QWORD))(v25 + 32))(v26, v11, *(_QWORD *)(v7 - 160));
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      v27 = *(_QWORD *)(v7 - 168);
      sub_184E30B0C();
      v28 = *(_QWORD *)(v7 - 216);
      v29 = *(_QWORD *)(v7 - 192);
    }
    else
    {
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      v27 = *(_QWORD *)(v7 - 168);
      sub_184E30B0C();
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      v26 = *(_QWORD *)(v7 - 176);
      sub_184E30B0C();
      v28 = *(_QWORD *)(v7 - 216);
      v29 = *(_QWORD *)(v7 - 192);
      v25 = *(_QWORD *)(v7 - 184);
    }
  }
  else
  {
    v29 = *(_QWORD *)(v7 - 192);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v15 + 32))(v19, v11, v29);
    v27 = *(_QWORD *)(v7 - 168);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v15 + 16))(v27, v19, v29);
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    v26 = *(_QWORD *)(v7 - 176);
    sub_184E30B0C();
    (*(void (**)(_BYTE *, uint64_t))(v15 + 8))(v19, v29);
    v28 = *(_QWORD *)(v7 - 216);
    v25 = *(_QWORD *)(v7 - 184);
  }
  v30 = v3 + *(int *)(*(_QWORD *)(v7 - 264) + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v3, v27, v29);
  v31 = *(_QWORD *)(v7 - 160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v30, v26, v31);
  v32 = v3;
  v33 = v3;
  v34 = v26;
  v35 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v7 - 152) + 48))(v33, 1, *(_QWORD *)(v7 - 144));
  v36 = *(_QWORD *)(v7 - 232);
  if (v35 == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v34, v31);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v27, v29);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v30, 1, v28) == 1)
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v7 - 256) + 8))(*(_QWORD *)(v7 - 248), *(_QWORD *)(v7 - 240));
      swift_storeEnumTagMultiPayload();
      v37 = 1;
      v39 = *(_QWORD *)(v7 - 208);
      v38 = *(_QWORD *)(v7 - 200);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v38, v37, 1, v39);
    }
    v45 = *(_QWORD *)(v7 - 312);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 32))(v45, v30, v28);
    v46 = *(_QWORD *)(v7 - 248);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 256) + 8))(v46, *(_QWORD *)(v7 - 240));
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v7 - 152) + 56))(v46, 1, 1, *(_QWORD *)(v7 - 144));
    swift_storeEnumTagMultiPayload();
    v43 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 224) + 40);
    v38 = *(_QWORD *)(v7 - 200);
    v44 = v45;
    goto LABEL_12;
  }
  v40 = v28;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v30, 1, v28) == 1)
  {
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v7 - 184) + 8))(*(_QWORD *)(v7 - 176), v31);
    (*(void (**)(_QWORD, uint64_t))(v15 + 8))(*(_QWORD *)(v7 - 168), v29);
    v41 = *(_QWORD *)(v7 - 320);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v7 - 152) + 32))(v41, v32, *(_QWORD *)(v7 - 144));
    v42 = *(_QWORD *)(v7 - 248);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 256) + 8))(v42, *(_QWORD *)(v7 - 240));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56))(v42, 1, 1, v28);
    swift_storeEnumTagMultiPayload();
    v43 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 224) + 32);
    v38 = *(_QWORD *)(v7 - 200);
    v44 = v41;
LABEL_12:
    v39 = *(_QWORD *)(v7 - 208);
LABEL_20:
    v43(v44, v39);
    goto LABEL_21;
  }
  *(_QWORD *)(v7 - 216) = v15;
  v48 = *(_QWORD *)(v7 - 152);
  v47 = *(_QWORD *)(v7 - 144);
  v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 32);
  v50 = *(_QWORD *)(v7 - 304);
  v49(v50, v32, v47);
  v51 = v36;
  v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 32);
  v53 = *(_QWORD *)(v7 - 296);
  v52(v53, v30, v40);
  v39 = *(_QWORD *)(v7 - 208);
  v54 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 224) + 24))(v50, v53, v39);
  if (v54 == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v7 - 184) + 8))(*(_QWORD *)(v7 - 176), *(_QWORD *)(v7 - 160));
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v7 - 216) + 8))(*(_QWORD *)(v7 - 168), *(_QWORD *)(v7 - 192));
    v60 = *(_QWORD *)(v7 - 248);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 256) + 8))(v60, *(_QWORD *)(v7 - 240));
    v49(v60, *(_QWORD *)(v7 - 304), v47);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v48 + 56))(v60, 0, 1, v47);
    swift_storeEnumTagMultiPayload();
    v61 = *(_QWORD *)(v7 - 312);
    v52(v61, *(_QWORD *)(v7 - 296), v40);
    v43 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 224) + 40);
LABEL_19:
    v38 = *(_QWORD *)(v7 - 200);
    v44 = v61;
    goto LABEL_20;
  }
  v55 = v54;
  if (!v54)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v7 - 256) + 8))(*(_QWORD *)(v7 - 248), *(_QWORD *)(v7 - 240));
    swift_storeEnumTagMultiPayload();
    v56 = *(_QWORD *)(v7 - 320);
    v57 = *(_QWORD *)(v7 - 304);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16))(v56, v57, v47);
    v58 = *(_QWORD *)(v7 - 312);
    v59 = *(_QWORD *)(v7 - 296);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16))(v58, v59, v40);
    v38 = *(_QWORD *)(v7 - 200);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 224) + 48))(v56, v58, v39);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v59, v40);
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v57, v47);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v7 - 184) + 8))(*(_QWORD *)(v7 - 176), *(_QWORD *)(v7 - 160));
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v7 - 216) + 8))(*(_QWORD *)(v7 - 168), *(_QWORD *)(v7 - 192));
LABEL_21:
    v37 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v38, v37, 1, v39);
  }
  v62 = *(_QWORD *)(v7 - 192);
  if (v54 == -1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v7 - 184) + 8))(*(_QWORD *)(v7 - 176), *(_QWORD *)(v7 - 160));
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v7 - 216) + 8))(*(_QWORD *)(v7 - 168), v62);
    v63 = *(_QWORD *)(v7 - 248);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 256) + 8))(v63, *(_QWORD *)(v7 - 240));
    v52(v63, *(_QWORD *)(v7 - 296), v40);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v51 + 56))(v63, 0, 1, v40);
    swift_storeEnumTagMultiPayload();
    v61 = *(_QWORD *)(v7 - 320);
    v49(v61, *(_QWORD *)(v7 - 304), v47);
    v43 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 224) + 32);
    goto LABEL_19;
  }
  type metadata accessor for ComparisonResult(0);
  *(_QWORD *)(v7 - 136) = v55;
  result = sub_184E30BE4();
  __break(1u);
  return result;
}

void sub_184A87E38(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  sub_184A87150(a1, a2, a3);
}

uint64_t sub_184A87E4C()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v1, v0);
}

uint64_t sub_184A87E68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(_BYTE *, _QWORD);
  char *v31;
  uint64_t v32;
  void (*v33)(_BYTE *, _QWORD);
  uint64_t v34;
  char *v35;
  uint64_t v36;
  _QWORD v38[3];
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE v51[40];

  v6 = v5;
  v49 = a2;
  v50 = a1;
  v46 = a5;
  v8 = *(_QWORD *)(a3 + 24);
  v48 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v43 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v44 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v11);
  v42 = (char *)v38 - v12;
  v13 = *(_QWORD *)(a3 + 16);
  v41 = swift_getAssociatedTypeWitness();
  v45 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41, v14);
  v39 = (char *)v38 - v15;
  v16 = swift_getAssociatedTypeWitness();
  v47 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)v38 - v18;
  v20 = swift_getAssociatedTypeWitness();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v22);
  v24 = (char *)v38 - v23;
  sub_184E30A7C();
  v38[2] = a4;
  v38[0] = v13;
  swift_getAssociatedConformanceWitness();
  LOBYTE(a4) = sub_184E309B0();
  v25 = v48;
  (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v20);
  v26 = v25;
  v38[1] = v6;
  sub_184E30A7C();
  v40 = v8;
  swift_getAssociatedConformanceWitness();
  v27 = sub_184E309B0();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v19, v16);
  if ((a4 & 1) != 0)
    return ~v27 & 1;
  if ((v27 & 1) != 0)
    return -1;
  v29 = *(_QWORD *)(v26 + 32);
  v30 = (void (*)(_BYTE *, _QWORD))sub_184E30AE8();
  v31 = v39;
  v32 = v41;
  (*(void (**)(char *))(v45 + 16))(v39);
  v30(v51, 0);
  v33 = (void (*)(_BYTE *, _QWORD))sub_184E30AE8();
  v35 = v42;
  v34 = v43;
  v36 = v44;
  (*(void (**)(char *))(v43 + 16))(v42);
  v33(v51, 0);
  v28 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 + 56) + 24))(v31, v35, v29);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v36);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v31, v32);
  return v28;
}

void sub_184A881E0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[3];
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v27 = a3;
  v30 = a4;
  v25[1] = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v28 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v29 = AssociatedTypeWitness;
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v7);
  v26 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)v25 - v11;
  v25[2] = *(_QWORD *)(a1 + 16);
  v31 = swift_getAssociatedTypeWitness();
  v25[0] = *(_QWORD *)(v31 - 8);
  v13 = v25[0];
  v15 = MEMORY[0x1E0C80A78](v31, v14);
  v17 = (char *)v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v18);
  v20 = (char *)v25 - v19;
  v21 = a2;
  sub_184E30A40();
  v22 = v27;
  sub_184E30A40();
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v17, v20, v31);
  v23 = v28;
  v24 = v29;
  (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v26, v12, v29);
  sub_184A87E68((uint64_t)v20, (uint64_t)v12, a1, v21, v22);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v12, v24);
  (*(void (**)(char *, uint64_t))(v25[0] + 8))(v20, v31);
  sub_184A883FC((uint64_t)v17, v30);
}

void sub_184A883FC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a2, a1, AssociatedTypeWitness);
  _s5IndexVMa_1();
}

uint64_t sub_184A88494(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t result;

  v5 = v3 + *(int *)(a1 + 68);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v5, v2, AssociatedTypeWitness);
  *(_QWORD *)(v3 + *(int *)(a1 + 72)) = v1;
  return result;
}

void sub_184A88500(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  __n128 v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v3);
  v4 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v8 - v6;
  sub_184E30A7C();
  sub_184E30A7C();
  sub_184A883FC((uint64_t)v7, a1);
}

void sub_184A88640(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[22];

  v27[12] = a5;
  v9 = a2[3];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v11);
  v27[10] = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v14);
  v15 = a2[2];
  v16 = swift_getAssociatedTypeWitness();
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v27[7] = (char *)v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v20);
  v27[5] = v21;
  v22 = *(void (**)(char *, uint64_t))(v21 + 16);
  v27[8] = v24;
  v27[2] = v22;
  v22((char *)v27 - v23, a1);
  v25 = a2[4];
  v27[6] = a2;
  v26 = a2[7];
  v27[13] = v15;
  v27[14] = v9;
  v27[15] = v15;
  v27[16] = v9;
  v27[4] = v25;
  v27[17] = v25;
  v27[18] = a3;
  v27[19] = a4;
  v27[20] = v26;
  _s5IndexVMa_1();
}

void sub_184A887A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v11 = v1 + *(int *)(a1 + 68);
  *(_QWORD *)(v9 - 184) = v5;
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v13 = v7;
  v12(v4, v11, v7);
  v14 = *(_QWORD *)(v1 + *(int *)(a1 + 72));
  *(_QWORD *)(v9 - 232) = v6;
  *(_QWORD *)(v9 - 256) = v12;
  *(_QWORD *)(v9 - 248) = v2;
  switch(v14)
  {
    case 1:
      v15 = *(_QWORD *)(v9 - 208);
      goto LABEL_5;
    case 0:
      sub_184E30A88();
      v15 = *(_QWORD *)(v9 - 208);
LABEL_5:
      v16 = v8;
      sub_184E30A88();
      goto LABEL_8;
    case -1:
      v16 = v8;
      sub_184E30A88();
      v15 = *(_QWORD *)(v9 - 208);
LABEL_8:
      v18 = *(_QWORD *)(v9 - 200);
      v17 = *(_QWORD *)(v9 - 192);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 - 240))(v18, v3, v17);
      (*(void (**)(_QWORD, uint64_t, uint64_t))(v9 - 256))(*(_QWORD *)(v9 - 176), v4, v13);
      sub_184A87E68(v3, v4, v15, *(_QWORD *)(v9 - 248), v16);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 184) + 8))(v4, v13);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 216) + 8))(v3, v17);
      sub_184A883FC(v18, *(_QWORD *)(v9 - 160));
  }
  type metadata accessor for ComparisonResult(0);
  *(_QWORD *)(v9 - 136) = v14;
  sub_184E30BE4();
  __break(1u);
}

void sub_184A88950(_QWORD *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[16];
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v42 = a4;
  v7 = a1[3];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v31 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v32 = AssociatedTypeWitness;
  v10 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v29 = &v26[-v11];
  v30 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v28 = &v26[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = a1[2];
  v27 = swift_getAssociatedTypeWitness();
  v34 = *(_QWORD *)(v27 - 8);
  v16 = MEMORY[0x1E0C80A78](v27, v15);
  v33 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  v18 = swift_getAssociatedTypeWitness();
  v35 = *(_QWORD *)(v18 - 8);
  v36 = v18;
  MEMORY[0x1E0C80A78](v18, v19);
  v37 = &v26[-v20];
  v21 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v21, v22);
  v38 = a3;
  v39 = &v26[-v23];
  v24 = a1[4];
  v25 = a1[7];
  v43 = v14;
  v44 = v7;
  v40 = v24;
  v41 = v25;
  v45 = v24;
  v46 = a2;
  v47 = a3;
  v48 = v25;
  _s5IndexVMa_1();
}

uint64_t sub_184A88B5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  void (*v12)(uint64_t, _QWORD, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, _QWORD);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, _QWORD);
  uint64_t v23;
  uint64_t result;
  void (*v25)(uint64_t, _QWORD);
  uint64_t v26;
  void (*v27)(uint64_t, _QWORD);
  void (*v28)(uint64_t);
  uint64_t v29;

  v9 = v7;
  v11 = *(_QWORD *)(v9 + *(int *)(a1 + 72));
  if (v11 == 1)
  {
    v25 = (void (*)(uint64_t, _QWORD))sub_184E30AE8();
    v26 = *(_QWORD *)(v8 - 192);
    (*(void (**)(uint64_t))(*(_QWORD *)(v8 - 208) + 16))(v26);
    v25(v8 - 136, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 - 160) + 40))(v26);
  }
  else if (v11)
  {
    if (v11 == -1)
    {
      v27 = (void (*)(uint64_t, _QWORD))sub_184E30AE8();
      v28 = *(void (**)(uint64_t))(v1 + 16);
      v29 = *(_QWORD *)(v8 - 176);
      v28(v29);
      v27(v8 - 136, 0);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 - 160) + 32))(v29);
    }
    else
    {
      type metadata accessor for ComparisonResult(0);
      *(_QWORD *)(v8 - 136) = v11;
      result = sub_184E30BE4();
      __break(1u);
    }
  }
  else
  {
    v12 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v8 - 224) + 16);
    v13 = v9;
    *(_QWORD *)(v8 - 280) = v9;
    v12(v2, *(_QWORD *)(v8 - 144), v5);
    v14 = v13;
    v15 = *(_QWORD *)(v8 - 272);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 216) + 16))(v4, v14, v15);
    v16 = (void (*)(uint64_t, _QWORD))sub_184E30AE8();
    (*(void (**)(_QWORD))(v1 + 16))(*(_QWORD *)(v8 - 176));
    v16(v8 - 136, 0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 216) + 8))(v4, v15);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 224) + 8))(v2, v5);
    v17 = *(_QWORD *)(v8 - 248);
    v18 = *(_QWORD *)(v8 - 264);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v17 + 16))(v18, *(_QWORD *)(v8 - 144) + *(int *)(v6 + 68), v3);
    v20 = *(_QWORD *)(v8 - 240);
    v19 = *(_QWORD *)(v8 - 232);
    v21 = *(_QWORD *)(v8 - 256);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v20 + 16))(v21, *(_QWORD *)(v8 - 280) + *(int *)(a1 + 68), v19);
    v22 = (void (*)(uint64_t, _QWORD))sub_184E30AE8();
    v23 = *(_QWORD *)(v8 - 192);
    (*(void (**)(uint64_t))(*(_QWORD *)(v8 - 208) + 16))(v23);
    v22(v8 - 136, 0);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v21, v19);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v18, v3);
    return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v8 - 160) + 48))(*(_QWORD *)(v8 - 176), v23);
  }
  return result;
}

void sub_184A88DD4()
{
  _s5IndexVMa_1();
}

uint64_t sub_184A88E20(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  __n128 v9;
  uint64_t v10;
  _BYTE *v11;
  char v12;
  void (*v13)(_BYTE *, uint64_t, uint64_t);
  char v14;
  void (*v15)(_BYTE *, uint64_t);
  _BYTE v17[96];

  v5 = *(_QWORD *)(a1 - 8);
  v6 = MEMORY[0x1E0C80A78](a1, a2);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = &v17[-v10];
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v12 = sub_184E309B0();
  v13 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16);
  v13(v11, v3, a1);
  v13(v8, v2, a1);
  if ((v12 & 1) != 0)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    v14 = sub_184E309B0();
  }
  else
  {
    v14 = 0;
  }
  v15 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
  v15(v8, a1);
  v15(v11, a1);
  return v14 & 1;
}

uint64_t sub_184A88FA8()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  if ((sub_184E309B0() & 1) != 0)
  {
    swift_getAssociatedTypeWitness();
    _s5IndexVMa_1();
  }
  return sub_184E30974() & 1;
}

uint64_t sub_184A890FC(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  return sub_184A89114(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_184A88FA8);
}

uint64_t sub_184A89108(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  return sub_184A89114(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_184A88DD4);
}

uint64_t sub_184A89114(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  return a5(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], a3[7]);
}

void sub_184A8912C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_184A881E0(a1, *(_QWORD *)(a2 - 8), *(_QWORD *)(a2 - 16), a3);
}

void sub_184A89138(uint64_t a1@<X8>)
{
  sub_184A88500(a1);
}

void sub_184A89144(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v8;

  v8 = malloc(0x28uLL);
  *a1 = v8;
  sub_184A891A8(v8, a2, a3, *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16));
}

void (*sub_184A89188(uint64_t a1))(_QWORD *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = a1;
  return sub_184A7A4D0;
}

void sub_184A891A8(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v9 = a3[4];
  v10 = *(_QWORD *)(v9 - 8);
  *a1 = v9;
  a1[1] = v10;
  v11 = malloc(*(_QWORD *)(v10 + 64));
  a1[2] = v11;
  sub_184A88950(a3, a4, a5, (uint64_t)v11);
}

void (*sub_184A89208())(_QWORD *a1)
{
  return sub_184A7A5A0;
}

void sub_184A89230()
{
  _s5IndexVMa_1();
}

uint64_t sub_184A89274()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_184E30B00();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v0, 1, 1, v1);
}

void sub_184A892B0(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_184A88640(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16), a4);
}

void sub_184A892BC()
{
  _s5IndexVMa_1();
}

void sub_184A89308(uint64_t a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  MEMORY[0x1E0C80A78](a1, a2);
  sub_184A88640(v11, v10, v12, v13, (uint64_t)&a10 - v14);
}

uint64_t sub_184A8934C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v0, v2, v1);
}

void sub_184A8938C()
{
  JUMPOUT(0x186DC3348);
}

void sub_184A8939C()
{
  JUMPOUT(0x186DC3348);
}

void type metadata accessor for MergeSequence.Iterator.EitherElement()
{
  JUMPOUT(0x186DC32F4);
}

uint64_t sub_184A893B8(double *a1, double *a2)
{
  if (*a1 < *a2)
    return -1;
  else
    return *a2 < *a1;
}

void type metadata accessor for MergeSequence.Iterator()
{
  JUMPOUT(0x186DC32F4);
}

void _s5IndexVMa_1()
{
  JUMPOUT(0x186DC32F4);
}

uint64_t sub_184A893EC()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_184A893F4()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  swift_getAssociatedTypeWitness();
  result = sub_184E30B00();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    result = sub_184E30B00();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_184A894BC(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_DWORD *)(v5 + 84))
    v6 = *(_QWORD *)(v5 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64) + 1;
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  if (*(_DWORD *)(v8 + 84))
    v10 = *(_QWORD *)(v8 + 64);
  else
    v10 = *(_QWORD *)(v8 + 64) + 1;
  if (v10 <= v6)
    v11 = v6;
  else
    v11 = v10;
  v12 = (v9 | *(_BYTE *)(v5 + 80));
  if (v12 > 7 || ((v9 | *(_DWORD *)(v5 + 80)) & 0x100000) != 0 || v11 + 1 > 0x18)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain();
  }
  else
  {
    v16 = v7;
    v17 = *((unsigned __int8 *)a2 + v11);
    if (v17 >= 2)
    {
      if (v11 <= 3)
        v18 = v11;
      else
        v18 = 4;
      __asm { BR              X12 }
    }
    if (v17 == 1)
    {
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
      {
        memcpy(a1, a2, v10);
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v16);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v16);
      }
      *((_BYTE *)a1 + v11) = 1;
    }
    else
    {
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v5 + 48))(a2, 1, AssociatedTypeWitness))
      {
        memcpy(a1, a2, v6);
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, AssociatedTypeWitness);
      }
      *((_BYTE *)a1 + v11) = 0;
    }
  }
  return a1;
}

uint64_t sub_184A8970C(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t result;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_DWORD *)(v3 + 84))
    v4 = *(_QWORD *)(v3 + 64);
  else
    v4 = *(_QWORD *)(v3 + 64) + 1;
  v5 = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84))
    v7 = *(_QWORD *)(v6 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64) + 1;
  if (v7 <= v4)
    v7 = v4;
  v8 = *(unsigned __int8 *)(a1 + v7);
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X13 }
  }
  if (v8 != 1)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, AssociatedTypeWitness);
    if ((_DWORD)result)
      return result;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5);
  v3 = v6;
  AssociatedTypeWitness = v5;
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
  return result;
}

void *sub_184A89894(void *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  size_t v10;
  unsigned int v11;
  uint64_t v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_DWORD *)(v5 + 84))
    v6 = *(_QWORD *)(v5 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64) + 1;
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_DWORD *)(v8 + 84))
    v9 = *(_QWORD *)(v8 + 64);
  else
    v9 = *(_QWORD *)(v8 + 64) + 1;
  if (v9 <= v6)
    v10 = v6;
  else
    v10 = v9;
  v11 = a2[v10];
  if (v11 >= 2)
  {
    if (v10 <= 3)
      v12 = v10;
    else
      v12 = 4;
    __asm { BR              X12 }
  }
  if (v11 == 1)
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, v9);
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    *((_BYTE *)a1 + v10) = 1;
  }
  else
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(a2, 1, AssociatedTypeWitness))
    {
      memcpy(a1, a2, v6);
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, AssociatedTypeWitness);
    }
    *((_BYTE *)a1 + v10) = 0;
  }
  return a1;
}

unsigned __int8 *sub_184A89AA8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  size_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;

  if (a1 == a2)
    return a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_DWORD *)(v5 + 84))
    v6 = *(_QWORD *)(v5 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64) + 1;
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_DWORD *)(v8 + 84))
    v9 = *(_QWORD *)(v8 + 64);
  else
    v9 = *(_QWORD *)(v8 + 64) + 1;
  if (v9 <= v6)
    v10 = v6;
  else
    v10 = v9;
  v11 = a1[v10];
  if (v11 >= 2)
  {
    if (v10 <= 3)
      v12 = v10;
    else
      v12 = 4;
    __asm { BR              X12 }
  }
  if (v11 == 1)
  {
    v16 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v8 + 48))(a1, 1, v7);
    v14 = v8;
    v15 = v7;
    if (!v16)
LABEL_20:
      (*(void (**)(unsigned __int8 *, uint64_t))(v14 + 8))(a1, v15);
  }
  else
  {
    v13 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(a1, 1, AssociatedTypeWitness);
    v14 = v5;
    v15 = AssociatedTypeWitness;
    if (!v13)
      goto LABEL_20;
  }
  v17 = a2[v10];
  if (v17 >= 2)
  {
    if (v10 <= 3)
      v18 = v10;
    else
      v18 = 4;
    __asm { BR              X12 }
  }
  if (v17 == 1)
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, v9);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(unsigned __int8 *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    a1[v10] = 1;
  }
  else
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(a2, 1, AssociatedTypeWitness))
    {
      memcpy(a1, a2, v6);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      (*(void (**)(unsigned __int8 *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, AssociatedTypeWitness);
    }
    a1[v10] = 0;
  }
  return a1;
}

void *sub_184A89D90(void *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  size_t v10;
  unsigned int v11;
  uint64_t v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_DWORD *)(v5 + 84))
    v6 = *(_QWORD *)(v5 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64) + 1;
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_DWORD *)(v8 + 84))
    v9 = *(_QWORD *)(v8 + 64);
  else
    v9 = *(_QWORD *)(v8 + 64) + 1;
  if (v9 <= v6)
    v10 = v6;
  else
    v10 = v9;
  v11 = a2[v10];
  if (v11 >= 2)
  {
    if (v10 <= 3)
      v12 = v10;
    else
      v12 = 4;
    __asm { BR              X12 }
  }
  if (v11 == 1)
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, v9);
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v8 + 32))(a1, a2, v7);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    *((_BYTE *)a1 + v10) = 1;
  }
  else
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(a2, 1, AssociatedTypeWitness))
    {
      memcpy(a1, a2, v6);
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, AssociatedTypeWitness);
    }
    *((_BYTE *)a1 + v10) = 0;
  }
  return a1;
}

unsigned __int8 *sub_184A89FA4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  size_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;

  if (a1 == a2)
    return a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_DWORD *)(v5 + 84))
    v6 = *(_QWORD *)(v5 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64) + 1;
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_DWORD *)(v8 + 84))
    v9 = *(_QWORD *)(v8 + 64);
  else
    v9 = *(_QWORD *)(v8 + 64) + 1;
  if (v9 <= v6)
    v10 = v6;
  else
    v10 = v9;
  v11 = a1[v10];
  if (v11 >= 2)
  {
    if (v10 <= 3)
      v12 = v10;
    else
      v12 = 4;
    __asm { BR              X12 }
  }
  if (v11 == 1)
  {
    v16 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v8 + 48))(a1, 1, v7);
    v14 = v8;
    v15 = v7;
    if (!v16)
LABEL_20:
      (*(void (**)(unsigned __int8 *, uint64_t))(v14 + 8))(a1, v15);
  }
  else
  {
    v13 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(a1, 1, AssociatedTypeWitness);
    v14 = v5;
    v15 = AssociatedTypeWitness;
    if (!v13)
      goto LABEL_20;
  }
  v17 = a2[v10];
  if (v17 >= 2)
  {
    if (v10 <= 3)
      v18 = v10;
    else
      v18 = 4;
    __asm { BR              X12 }
  }
  if (v17 == 1)
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, v9);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v8 + 32))(a1, a2, v7);
      (*(void (**)(unsigned __int8 *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    a1[v10] = 1;
  }
  else
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(a2, 1, AssociatedTypeWitness))
    {
      memcpy(a1, a2, v6);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      (*(void (**)(unsigned __int8 *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, AssociatedTypeWitness);
    }
    a1[v10] = 0;
  }
  return a1;
}

uint64_t sub_184A8A28C(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  int v14;
  unsigned int v16;
  int v17;
  unsigned int v18;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(v4 + 64);
  if (v5)
    v7 = v6;
  else
    v7 = v6 + 1;
  v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v9 = *(_DWORD *)(v8 + 84);
  v10 = *(_QWORD *)(v8 + 64);
  if (!v9)
    ++v10;
  if (v10 <= v7)
    v11 = v7;
  else
    v11 = v10;
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_27;
  v12 = v11 + 1;
  v13 = 8 * (v11 + 1);
  if ((v11 + 1) <= 3)
  {
    v16 = ((a2 + ~(-1 << v13) - 253) >> v13) + 1;
    if (HIWORD(v16))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_27;
      goto LABEL_20;
    }
    if (v16 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_27;
      goto LABEL_20;
    }
    if (v16 < 2)
    {
LABEL_27:
      v18 = *(unsigned __int8 *)(a1 + v11);
      if (v18 >= 3)
        return (v18 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_27;
LABEL_20:
  v17 = (v14 - 1) << v13;
  if (v12 > 3)
    v17 = 0;
  if ((_DWORD)v12)
  {
    if (v12 > 3)
      LODWORD(v12) = 4;
    __asm { BR              X11 }
  }
  return (v17 + 254);
}

void sub_184A8A424(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  size_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  if (v7)
    v9 = v8;
  else
    v9 = v8 + 1;
  v10 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v11 = *(_DWORD *)(v10 + 84);
  v12 = *(_QWORD *)(v10 + 64);
  if (!v11)
    ++v12;
  if (v12 <= v9)
    v12 = v9;
  v13 = v12 + 1;
  if (a3 < 0xFE)
  {
    v14 = 0u;
  }
  else if (v13 <= 3)
  {
    v16 = ((a3 + ~(-1 << (8 * v13)) - 253) >> (8 * v13)) + 1;
    if (HIWORD(v16))
    {
      v14 = 4u;
    }
    else if (v16 >= 0x100)
    {
      v14 = 2;
    }
    else
    {
      v14 = v16 > 1;
    }
  }
  else
  {
    v14 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v15 = a2 - 254;
  if (v13 < 4)
  {
    if ((_DWORD)v12 != -1)
    {
      v17 = v15 & ~(-1 << (8 * v13));
      bzero(a1, v13);
      if ((_DWORD)v13 == 3)
      {
        *(_WORD *)a1 = v17;
        a1[2] = BYTE2(v17);
      }
      else if ((_DWORD)v13 == 2)
      {
        *(_WORD *)a1 = v17;
      }
      else
      {
        *a1 = v17;
      }
    }
  }
  else
  {
    bzero(a1, v12 + 1);
    *(_DWORD *)a1 = v15;
  }
  __asm { BR              X10 }
}

uint64_t sub_184A8A638(uint64_t a1)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;

  v2 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v3 = *(_DWORD *)(v2 + 84);
  v4 = *(_QWORD *)(v2 + 64);
  if (v3)
    v5 = v4;
  else
    v5 = v4 + 1;
  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  if (!v7)
    ++v8;
  if (v8 <= v5)
    v8 = v5;
  result = *(unsigned __int8 *)(a1 + v8);
  if (result >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X12 }
  }
  return result;
}

uint64_t sub_184A8A748(_BYTE *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  size_t v6;
  size_t v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  size_t v11;
  size_t v12;
  char v13;
  int v14;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(v4 + 64);
  if (v5)
    v7 = v6;
  else
    v7 = v6 + 1;
  result = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(result - 8);
  v10 = *(_DWORD *)(v9 + 84);
  v11 = *(_QWORD *)(v9 + 64);
  if (!v10)
    ++v11;
  if (v11 <= v7)
    v12 = v7;
  else
    v12 = v11;
  if (a2 > 1)
  {
    if (v12 <= 3)
      v13 = ((a2 - 2) >> (8 * v12)) + 2;
    else
      v13 = 2;
    a1[v12] = v13;
    if (v12 >= 4)
      v14 = 4;
    else
      v14 = v12;
    bzero(a1, v12);
    __asm { BR              X10 }
  }
  a1[v12] = a2;
  return result;
}

uint64_t sub_184A8A880()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_184A8A888()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
      type metadata accessor for MergeSequence.Iterator.EitherElement();
  }
  return result;
}

uint64_t *sub_184A8A990(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  size_t v14;
  size_t v15;
  size_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  unsigned __int8 *v29;
  unsigned int v30;
  uint64_t v31;
  size_t __n;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t AssociatedTypeWitness;
  uint64_t v40;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = *(_QWORD *)(v2 + 64);
  v4 = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v36 = v3 + v6;
  v37 = v5;
  v38 = v4;
  v7 = *(_QWORD *)(v5 + 64);
  v35 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v35 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_DWORD *)(v11 + 80) | v9;
  v13 = (*(_BYTE *)(v11 + 80) | v9);
  v40 = v8;
  v14 = *(_QWORD *)(v8 + 64);
  if (!*(_DWORD *)(v8 + 84))
    ++v14;
  if (*(_DWORD *)(v11 + 84))
    v15 = *(_QWORD *)(v11 + 64);
  else
    v15 = *(_QWORD *)(v11 + 64) + 1;
  if (v15 <= v14)
    v16 = v14;
  else
    v16 = v15;
  v17 = v6 | *(_DWORD *)(v2 + 80) | v12;
  v18 = (v6 | *(_BYTE *)(v2 + 80) | v12);
  v19 = v17 & 0x100000;
  if (v18 > 7
    || v19 != 0
    || v16 + 1 + ((v7 + (v36 & ~(unint64_t)v6) + v13) & ~v13) > 0x18)
  {
    v22 = *a2;
    *a1 = *a2;
    v23 = v22 + ((v18 + 16) & ~v18);
    swift_retain();
  }
  else
  {
    __n = v14;
    v34 = v10;
    v24 = ~v13;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 + 16))(a1, a2, AssociatedTypeWitness);
    v25 = ((unint64_t)a1 + v36) & ~(unint64_t)v6;
    v26 = ((unint64_t)a2 + v36) & ~(unint64_t)v6;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v37 + 16))(v25, v26, v38);
    v27 = v26 + v7;
    v28 = (void *)((v25 + v7 + v13) & v24);
    v29 = (unsigned __int8 *)((v27 + v13) & v24);
    v30 = v29[v16];
    if (v30 >= 2)
    {
      if (v16 <= 3)
        v31 = v16;
      else
        v31 = 4;
      __asm { BR              X12 }
    }
    if (v30 == 1)
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v11 + 48))(v29, 1, v34))
      {
        memcpy(v28, v29, v15);
      }
      else
      {
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v11 + 16))(v28, v29, v34);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v28, 0, 1, v34);
      }
      *((_BYTE *)v28 + v16) = 1;
    }
    else
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v40 + 48))(v29, 1, v35))
      {
        memcpy(v28, v29, __n);
      }
      else
      {
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v40 + 16))(v28, v29, v35);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v28, 0, 1, v35);
      }
      *((_BYTE *)v28 + v16) = 0;
    }
    return a1;
  }
  return (uint64_t *)v23;
}

uint64_t sub_184A8AD08(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t result;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
  v4 = *(_QWORD *)(v3 + 64) + a1;
  v5 = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v7, v5);
  v8 = v7 + *(_QWORD *)(v6 + 64);
  v9 = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned __int8 *)(v13 + 80) | v11;
  v15 = (v8 + v14) & ~v14;
  if (*(_DWORD *)(v10 + 84))
    v16 = *(_QWORD *)(v10 + 64);
  else
    v16 = *(_QWORD *)(v10 + 64) + 1;
  if (*(_DWORD *)(v13 + 84))
    v17 = *(_QWORD *)(v13 + 64);
  else
    v17 = *(_QWORD *)(v13 + 64) + 1;
  if (v17 > v16)
    v16 = v17;
  v18 = *(unsigned __int8 *)(v15 + v16);
  if (v18 >= 2)
  {
    if (v16 <= 3)
      v19 = v16;
    else
      v19 = 4;
    __asm { BR              X13 }
  }
  if (v18 != 1)
  {
    result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 48))(v15, 1, v9);
    if ((_DWORD)result)
      return result;
    return (*(uint64_t (**)(unint64_t, uint64_t))(v10 + 8))(v15, v9);
  }
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v13 + 48))(v15, 1, v12);
  v10 = v13;
  v9 = v12;
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v10 + 8))(v15, v9);
  return result;
}

uint64_t sub_184A8AF3C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unsigned __int8 *v19;
  size_t v20;
  size_t v21;
  size_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v26;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v6 + v9 + a1) & ~v9;
  v11 = (v6 + v9 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v10, v11, v7);
  v12 = *(_QWORD *)(v8 + 64);
  v26 = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(v26 - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned __int8 *)(v16 + 80) | v14;
  v18 = (void *)((v12 + v17 + v10) & ~v17);
  v19 = (unsigned __int8 *)((v12 + v17 + v11) & ~v17);
  if (*(_DWORD *)(v13 + 84))
    v20 = *(_QWORD *)(v13 + 64);
  else
    v20 = *(_QWORD *)(v13 + 64) + 1;
  if (*(_DWORD *)(v16 + 84))
    v21 = *(_QWORD *)(v16 + 64);
  else
    v21 = *(_QWORD *)(v16 + 64) + 1;
  if (v21 <= v20)
    v22 = v20;
  else
    v22 = v21;
  v23 = v19[v22];
  if (v23 >= 2)
  {
    if (v22 <= 3)
      v24 = v22;
    else
      v24 = 4;
    __asm { BR              X12 }
  }
  if (v23 == 1)
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v16 + 48))(v19, 1, v15))
    {
      memcpy(v18, v19, v21);
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v16 + 16))(v18, v19, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v18, 0, 1, v15);
    }
    *((_BYTE *)v18 + v22) = 1;
  }
  else
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v13 + 48))(v19, 1, v26))
    {
      memcpy(v18, v19, v20);
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v13 + 16))(v18, v19, v26);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v18, 0, 1, v26);
    }
    *((_BYTE *)v18 + v22) = 0;
  }
  return a1;
}

uint64_t sub_184A8B218(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  size_t v20;
  size_t v21;
  size_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v33 = a1;
  v10 = (v6 + v9 + a1) & ~v9;
  v11 = (v6 + v9 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(v10, v11, v7);
  v12 = *(_QWORD *)(v8 + 64);
  v32 = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(v32 - 8);
  LODWORD(v8) = *(unsigned __int8 *)(v13 + 80);
  v14 = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80) | v8;
  v17 = (unsigned __int8 *)((v12 + v16 + v10) & ~v16);
  v18 = (unsigned __int8 *)((v12 + v16 + v11) & ~v16);
  if (v17 == v18)
    return v33;
  v19 = v14;
  if (*(_DWORD *)(v13 + 84))
    v20 = *(_QWORD *)(v13 + 64);
  else
    v20 = *(_QWORD *)(v13 + 64) + 1;
  if (*(_DWORD *)(v15 + 84))
    v21 = *(_QWORD *)(v15 + 64);
  else
    v21 = *(_QWORD *)(v15 + 64) + 1;
  if (v21 <= v20)
    v22 = v20;
  else
    v22 = v21;
  v23 = v17[v22];
  if (v23 >= 2)
  {
    if (v22 <= 3)
      v24 = v22;
    else
      v24 = 4;
    __asm { BR              X12 }
  }
  if (v23 == 1)
  {
    v28 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v15 + 48))(v17, 1, v14);
    v27 = v15;
    v25 = v19;
    if (!v28)
LABEL_20:
      (*(void (**)(unsigned __int8 *, uint64_t))(v27 + 8))(v17, v25);
  }
  else
  {
    v25 = v32;
    v26 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v13 + 48))(v17, 1, v32);
    v27 = v13;
    if (!v26)
      goto LABEL_20;
  }
  v29 = v18[v22];
  if (v29 >= 2)
  {
    if (v22 <= 3)
      v30 = v22;
    else
      v30 = 4;
    __asm { BR              X12 }
  }
  if (v29 == 1)
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v15 + 48))(v18, 1, v19))
    {
      memcpy(v17, v18, v21);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v15 + 16))(v17, v18, v19);
      (*(void (**)(unsigned __int8 *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v17, 0, 1, v19);
    }
    v17[v22] = 1;
  }
  else
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v13 + 48))(v18, 1, v32))
    {
      memcpy(v17, v18, v20);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v13 + 16))(v17, v18, v32);
      (*(void (**)(unsigned __int8 *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v17, 0, 1, v32);
    }
    v17[v22] = 0;
  }
  return v33;
}

uint64_t sub_184A8B5CC(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unsigned __int8 *v19;
  size_t v20;
  size_t v21;
  size_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v26;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v6 + v9 + a1) & ~v9;
  v11 = (v6 + v9 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v10, v11, v7);
  v12 = *(_QWORD *)(v8 + 64);
  v26 = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(v26 - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned __int8 *)(v16 + 80) | v14;
  v18 = (void *)((v12 + v17 + v10) & ~v17);
  v19 = (unsigned __int8 *)((v12 + v17 + v11) & ~v17);
  if (*(_DWORD *)(v13 + 84))
    v20 = *(_QWORD *)(v13 + 64);
  else
    v20 = *(_QWORD *)(v13 + 64) + 1;
  if (*(_DWORD *)(v16 + 84))
    v21 = *(_QWORD *)(v16 + 64);
  else
    v21 = *(_QWORD *)(v16 + 64) + 1;
  if (v21 <= v20)
    v22 = v20;
  else
    v22 = v21;
  v23 = v19[v22];
  if (v23 >= 2)
  {
    if (v22 <= 3)
      v24 = v22;
    else
      v24 = 4;
    __asm { BR              X12 }
  }
  if (v23 == 1)
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v16 + 48))(v19, 1, v15))
    {
      memcpy(v18, v19, v21);
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v16 + 32))(v18, v19, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v18, 0, 1, v15);
    }
    *((_BYTE *)v18 + v22) = 1;
  }
  else
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v13 + 48))(v19, 1, v26))
    {
      memcpy(v18, v19, v20);
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v13 + 32))(v18, v19, v26);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v18, 0, 1, v26);
    }
    *((_BYTE *)v18 + v22) = 0;
  }
  return a1;
}

uint64_t sub_184A8B8A8(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  size_t v20;
  size_t v21;
  size_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v33 = a1;
  v10 = (v6 + v9 + a1) & ~v9;
  v11 = (v6 + v9 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))(v10, v11, v7);
  v12 = *(_QWORD *)(v8 + 64);
  v32 = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(v32 - 8);
  LODWORD(v8) = *(unsigned __int8 *)(v13 + 80);
  v14 = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80) | v8;
  v17 = (unsigned __int8 *)((v12 + v16 + v10) & ~v16);
  v18 = (unsigned __int8 *)((v12 + v16 + v11) & ~v16);
  if (v17 == v18)
    return v33;
  v19 = v14;
  if (*(_DWORD *)(v13 + 84))
    v20 = *(_QWORD *)(v13 + 64);
  else
    v20 = *(_QWORD *)(v13 + 64) + 1;
  if (*(_DWORD *)(v15 + 84))
    v21 = *(_QWORD *)(v15 + 64);
  else
    v21 = *(_QWORD *)(v15 + 64) + 1;
  if (v21 <= v20)
    v22 = v20;
  else
    v22 = v21;
  v23 = v17[v22];
  if (v23 >= 2)
  {
    if (v22 <= 3)
      v24 = v22;
    else
      v24 = 4;
    __asm { BR              X12 }
  }
  if (v23 == 1)
  {
    v28 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v15 + 48))(v17, 1, v14);
    v27 = v15;
    v25 = v19;
    if (!v28)
LABEL_20:
      (*(void (**)(unsigned __int8 *, uint64_t))(v27 + 8))(v17, v25);
  }
  else
  {
    v25 = v32;
    v26 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v13 + 48))(v17, 1, v32);
    v27 = v13;
    if (!v26)
      goto LABEL_20;
  }
  v29 = v18[v22];
  if (v29 >= 2)
  {
    if (v22 <= 3)
      v30 = v22;
    else
      v30 = 4;
    __asm { BR              X12 }
  }
  if (v29 == 1)
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v15 + 48))(v18, 1, v19))
    {
      memcpy(v17, v18, v21);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v15 + 32))(v17, v18, v19);
      (*(void (**)(unsigned __int8 *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v17, 0, 1, v19);
    }
    v17[v22] = 1;
  }
  else
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v13 + 48))(v18, 1, v32))
    {
      memcpy(v17, v18, v20);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v13 + 32))(v17, v18, v32);
      (*(void (**)(unsigned __int8 *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v17, 0, 1, v32);
    }
    v17[v22] = 0;
  }
  return v33;
}

uint64_t sub_184A8BC5C(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int v19;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t (*v24)(uint64_t);
  unsigned int v25;
  unsigned int v26;

  v2 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v3 = *(_DWORD *)(v2 + 84);
  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v26 = *(_DWORD *)(v4 + 84);
  if (v26 <= v3)
    v5 = v3;
  else
    v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84))
    v7 = *(_QWORD *)(v6 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64) + 1;
  v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v8 + 84))
    v9 = *(_QWORD *)(v8 + 64);
  else
    v9 = *(_QWORD *)(v8 + 64) + 1;
  if (v9 <= v7)
    v10 = v7;
  else
    v10 = v9;
  if (v5 <= 0xFD)
    v11 = 253;
  else
    v11 = v5;
  if (!a2)
    return 0;
  v12 = *(unsigned __int8 *)(v4 + 80);
  v13 = *(_QWORD *)(v2 + 64) + v12;
  v14 = *(_QWORD *)(v4 + 64);
  v15 = *(unsigned __int8 *)(v8 + 80) | *(unsigned __int8 *)(v6 + 80);
  v16 = a1;
  if (a2 <= v11)
    goto LABEL_36;
  v17 = v10 + ((v14 + (v13 & ~v12) + v15) & ~v15) + 1;
  v18 = 8 * v17;
  if (v17 > 3)
    goto LABEL_19;
  v21 = ((a2 - v11 + ~(-1 << v18)) >> v18) + 1;
  if (HIWORD(v21))
  {
    v19 = *(_DWORD *)(a1 + v17);
    if (v19)
      goto LABEL_27;
  }
  else
  {
    if (v21 <= 0xFF)
    {
      if (v21 < 2)
        goto LABEL_36;
LABEL_19:
      v19 = *(unsigned __int8 *)(a1 + v17);
      if (!*(_BYTE *)(a1 + v17))
        goto LABEL_36;
LABEL_27:
      v22 = (v19 - 1) << v18;
      if (v17 > 3)
        v22 = 0;
      if ((_DWORD)v17)
      {
        if (v17 <= 3)
          v23 = v17;
        else
          v23 = 4;
        __asm { BR              X12 }
      }
      return v11 + v22 + 1;
    }
    v19 = *(unsigned __int16 *)(a1 + v17);
    if (*(_WORD *)(a1 + v17))
      goto LABEL_27;
  }
LABEL_36:
  if (v3 == v11)
  {
    v24 = *(uint64_t (**)(uint64_t))(v2 + 48);
    return v24(v16);
  }
  v16 = (v13 + a1) & ~v12;
  if (v26 == v11)
  {
    v24 = *(uint64_t (**)(uint64_t))(v4 + 48);
    return v24(v16);
  }
  v25 = *(unsigned __int8 *)(((v16 + v14 + v15) & ~v15) + v10);
  if (v25 >= 3)
    return (v25 ^ 0xFF) + 1;
  else
    return 0;
}

void sub_184A8BF30(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  size_t v13;
  _BYTE *v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;

  v3 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v4 = *(_DWORD *)(v3 + 84);
  v5 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v5 + 84) <= v4)
    v6 = v4;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v7 + 84))
    v8 = *(_QWORD *)(v7 + 64);
  else
    v8 = *(_QWORD *)(v7 + 64) + 1;
  v9 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v9 + 84))
    v10 = *(_QWORD *)(v9 + 64);
  else
    v10 = *(_QWORD *)(v9 + 64) + 1;
  if (v10 <= v8)
    v10 = v8;
  if (v6 <= 0xFD)
    v11 = 253;
  else
    v11 = v6;
  v12 = *(unsigned __int8 *)(v9 + 80) | *(unsigned __int8 *)(v7 + 80);
  v13 = ((*(_QWORD *)(v5 + 64)
        + ((*(_QWORD *)(v3 + 64) + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
        + v12) & ~v12)
      + v10
      + 1;
  if (a3 <= v11)
  {
    v16 = 0u;
    v14 = a1;
    v15 = a2;
  }
  else
  {
    v14 = a1;
    v15 = a2;
    if (v13 <= 3)
    {
      v18 = ((a3 - v11 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
      if (HIWORD(v18))
      {
        v16 = 4u;
      }
      else if (v18 >= 0x100)
      {
        v16 = 2;
      }
      else
      {
        v16 = v18 > 1;
      }
    }
    else
    {
      v16 = 1u;
    }
  }
  if (v11 < v15)
  {
    v17 = ~v11 + v15;
    if (v13 < 4)
    {
      if ((_DWORD)v13)
      {
        v19 = v17 & ~(-1 << (8 * v13));
        bzero(v14, v13);
        if ((_DWORD)v13 == 3)
        {
          *(_WORD *)v14 = v19;
          v14[2] = BYTE2(v19);
        }
        else if ((_DWORD)v13 == 2)
        {
          *(_WORD *)v14 = v19;
        }
        else
        {
          *v14 = v19;
        }
      }
    }
    else
    {
      bzero(v14, v13);
      *(_DWORD *)v14 = v17;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X17 }
}

uint64_t sub_184A8C2F0()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_184A8C37C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_184A8C458 + 4 * byte_184E383F5[v17 - 1]))();
}

void sub_184A8C4D4(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

void type metadata accessor for MergeSequence()
{
  JUMPOUT(0x186DC32F4);
}

uint64_t sub_184A8C6E0()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_184A8C7A0(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = v6 + v9;
  v11 = *(_QWORD *)(v8 + 64) + 7;
  v12 = v9 | *(_DWORD *)(v5 + 80) & 0xF8;
  if (v12 > 7
    || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0
    || ((v11 + (v10 & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + (((v12 | 7) + 16) & ~(unint64_t)(v12 | 7)));
    swift_retain();
  }
  else
  {
    v16 = v7;
    v17 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    v18 = ((unint64_t)a2 + v10) & v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)a1 + v10) & v17, v18, v16);
    *(_QWORD *)((v11 + (((unint64_t)a1 + v10) & v17)) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v11 + v18) & 0xFFFFFFFFFFFFF8);
  }
  return a1;
}

uint64_t sub_184A8C8F8(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
  v4 = *(_QWORD *)(v3 + 64) + a1;
  v5 = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))((v4 + *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80), v5);
}

uint64_t sub_184A8C99C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v6 + v9 + a1) & ~v9;
  v11 = (v6 + v9 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v10, v11, v7);
  *(_QWORD *)((*(_QWORD *)(v8 + 64) + 7 + v10) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v8 + 64) + 7 + v11) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_184A8CA80(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v6 + v9 + a1) & ~v9;
  v11 = (v6 + v9 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(v10, v11, v7);
  *(_QWORD *)((*(_QWORD *)(v8 + 64) + 7 + v10) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v8 + 64) + 7 + v11) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_184A8CB64(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v6 + v9 + a1) & ~v9;
  v11 = (v6 + v9 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v10, v11, v7);
  *(_QWORD *)((*(_QWORD *)(v8 + 64) + 7 + v10) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v8 + 64) + 7 + v11) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_184A8CC48(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v6 + v9 + a1) & ~v9;
  v11 = (v6 + v9 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))(v10, v11, v7);
  *(_QWORD *)((*(_QWORD *)(v8 + 64) + 7 + v10) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v8 + 64) + 7 + v11) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_184A8CD2C(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int *)(v8 + 84);
  if (v9 <= v6)
    v10 = v6;
  else
    v10 = *(_DWORD *)(v8 + 84);
  if (!a2)
    return 0;
  v11 = *(unsigned __int8 *)(v8 + 80);
  v12 = *(_QWORD *)(v5 + 64) + v11;
  if (v10 < a2)
  {
    if (((((*(_QWORD *)(v8 + 64) + (v12 & ~v11) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v13 = 2;
    else
      v13 = a2 - v10 + 1;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v15 = v14;
    else
      v15 = 0;
    __asm { BR              X16 }
  }
  if (!v10)
    return 0;
  if (v6 >= v9)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))((v12 + a1) & ~v11, v9, v7);
}

void sub_184A8CED4(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v8 + 84) <= v7)
    v9 = v7;
  else
    v9 = *(_DWORD *)(v8 + 84);
  if (v9 >= a3)
  {
    v12 = 0u;
    if (a2 <= v9)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v8 + 64)
         + ((*(_DWORD *)(v6 + 64) + *(unsigned __int8 *)(v8 + 80)) & ~*(unsigned __int8 *)(v8 + 80))
         + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v10 = a3 - v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    if (a2 <= v9)
LABEL_17:
      __asm { BR              X13 }
  }
  if (((*(_DWORD *)(v8 + 64)
       + ((*(_DWORD *)(v6 + 64) + *(unsigned __int8 *)(v8 + 80)) & ~*(unsigned __int8 *)(v8 + 80))
       + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v13 = ~v9 + a2;
    bzero(a1, ((*(_QWORD *)(v8 + 64)+ ((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ 7) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *a1 = v13;
  }
  __asm { BR              X10 }
}

void sub_184A8D038()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
}

void sub_184A8D040()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x184A8D048);
}

void sub_184A8D094()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
}

void sub_184A8D09C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = v1;
}

uint64_t sub_184A8D0A4@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_WORD *)(v5 + v8) = 0;
  if (!(_DWORD)v6)
    JUMPOUT(0x184A8D0ACLL);
  if (v7 >= a1)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 56))(v5, v6, v7);
  else
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a2 + 56))((v3 + v5) & v4, v6, a1);
}

uint64_t Region.hash(into:)()
{
  sub_184E30C38();
  sub_184E30C38();
  sub_184E30C38();
  sub_184E30C38();
  sub_184E30C2C();
  return sub_184E30C2C();
}

uint64_t Region.hashValue.getter()
{
  sub_184E30C20();
  Region.hash(into:)();
  return sub_184E30C50();
}

uint64_t sub_184A8D1EC()
{
  sub_184E30C20();
  Region.hash(into:)();
  return sub_184E30C50();
}

uint64_t sub_184A8D248()
{
  sub_184E30C20();
  Region.hash(into:)();
  return sub_184E30C50();
}

uint64_t _s12CoreGraphics6RegionV2eeoiySbAC_ACtFZ_0(float64x2_t *a1, uint64_t a2)
{
  float64_t v2;
  float64_t v3;
  float64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float64x2_t v8;
  float64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v15;
  _BOOL4 v16;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  BOOL v21;
  double *v22;
  double *v23;
  uint64_t v24;
  int *v25;
  int *v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  double *v31;
  double *v32;
  uint64_t v33;
  double v34;
  double v35;
  double v36;
  double v37;
  BOOL v39;

  v3 = a1[2].f64[0];
  v2 = a1[2].f64[1];
  v4 = a1[3].f64[0];
  v6 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(float64x2_t *)a2;
  v9 = a1->f64[0];
  v10 = *(_QWORD *)&a1->f64[0] & 0x7FF0000000000000;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*a1, *(float64x2_t *)a2), (int32x4_t)vceqq_f64(a1[1], *(float64x2_t *)(a2 + 16)))), 0xFuLL))) & 1) == 0)
  {
    if (v10 != 0x7FF0000000000000 || (*(_QWORD *)&v9 & 0xFFFFFFFFFFFFFLL) == 0)
      return 0;
    if ((~*(_QWORD *)&v8.f64[0] & 0x7FF0000000000000) != 0 || (*(_QWORD *)&v8.f64[0] & 0xFFFFFFFFFFFFFLL) == 0)
      return 0;
    goto LABEL_20;
  }
  v13 = *(_QWORD *)&v9 & 0xFFFFFFFFFFFFFLL;
  if (v10 == 0x7FF0000000000000 && v13 != 0)
  {
LABEL_20:
    if ((~*(_QWORD *)&v8.f64[0] & 0x7FF0000000000000) == 0 && (*(_QWORD *)&v8.f64[0] & 0xFFFFFFFFFFFFFLL) != 0)
      goto LABEL_28;
    v16 = 0;
    goto LABEL_26;
  }
  v15 = *(_QWORD *)(*(_QWORD *)&v3 + 16);
  v16 = v15 == 0;
  if ((~*(_QWORD *)&v8.f64[0] & 0x7FF0000000000000) != 0 || (*(_QWORD *)&v8.f64[0] & 0xFFFFFFFFFFFFFLL) == 0)
  {
LABEL_26:
    v18 = *(_QWORD *)(v6 + 16);
    result = v16 ^ (v18 == 0) ^ 1u;
    if (v16 || !v18)
      return result;
    goto LABEL_28;
  }
  if (!v15)
    return 0;
LABEL_28:
  v20 = *(_QWORD *)(*(_QWORD *)&v3 + 16);
  if (v20 != *(_QWORD *)(v6 + 16))
    return 0;
  if (v20)
    v21 = *(_QWORD *)&v3 == v6;
  else
    v21 = 1;
  if (!v21)
  {
    v22 = (double *)(*(_QWORD *)&v3 + 32);
    v23 = (double *)(v6 + 32);
    while (*v22 == *v23)
    {
      ++v23;
      ++v22;
      if (!--v20)
        goto LABEL_36;
    }
    return 0;
  }
LABEL_36:
  v24 = *(_QWORD *)(*(_QWORD *)&v2 + 16);
  if (v24 != *(_QWORD *)(v5 + 16))
    return 0;
  if (v24 && *(_QWORD *)&v2 != v5)
  {
    v25 = (int *)(*(_QWORD *)&v2 + 32);
    v26 = (int *)(v5 + 32);
    do
    {
      v28 = *v25++;
      v27 = v28;
      v29 = *v26++;
      if (v27 != v29)
        return 0;
    }
    while (--v24);
  }
  v30 = *(_QWORD *)(*(_QWORD *)&v4 + 16);
  if (v30 != *(_QWORD *)(v7 + 16))
    return 0;
  if (!v30 || *(_QWORD *)&v4 == v7)
    return 1;
  v31 = (double *)(*(_QWORD *)&v4 + 32);
  v32 = (double *)(v7 + 32);
  v33 = v30 - 1;
  do
  {
    v34 = *v31++;
    v35 = v34;
    v36 = *v32++;
    v37 = v36;
    v39 = v33-- != 0;
    result = v35 == v37;
  }
  while (v35 == v37 && v39);
  return result;
}

unint64_t sub_184A8D468()
{
  unint64_t result;

  result = qword_1EDD19ED0;
  if (!qword_1EDD19ED0)
  {
    result = MEMORY[0x186DC3348](&protocol conformance descriptor for Region, &type metadata for Region);
    atomic_store(result, (unint64_t *)&qword_1EDD19ED0);
  }
  return result;
}

double Region.init<A>(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int64x2_t *a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t AssociatedTypeWitness;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64x2_t v23;
  int64x2_t *v24;
  double result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64x2_t *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  uint64_t v43;

  v31 = a3;
  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a4);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v27 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v10);
  v12 = (char *)&v26 - v11;
  v40 = vdupq_n_s64(0x7FF8000000000000uLL);
  v41 = v40;
  v42.i64[0] = MEMORY[0x1E0DEE9D8];
  v42.i64[1] = MEMORY[0x1E0DEE9D8];
  v43 = MEMORY[0x1E0DEE9D8];
  v28 = v6;
  v29 = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
  sub_184E309D4();
  v30 = a2;
  swift_getAssociatedConformanceWitness();
  v32 = v12;
  v13 = AssociatedTypeWitness;
  sub_184E30B0C();
  v15 = v37;
  if (v37)
  {
    v16 = v33;
    v17 = v34;
    v19 = v35;
    v18 = v36;
    v20 = v38;
    v21 = v39;
    do
    {
      v33 = v16;
      v34 = v17;
      v35 = v19;
      v36 = v18;
      v37 = v15;
      v38 = v20;
      v39 = v21;
      Region.formUnion(_:)((uint64_t)&v33, v14);
      sub_184A8E8C4(v16, v17, v19, v18, v15);
      sub_184E30B0C();
      v16 = v33;
      v17 = v34;
      v19 = v35;
      v18 = v36;
      v15 = v37;
      v20 = v38;
      v21 = v39;
    }
    while (v37);
  }
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v29, v30);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v32, v13);
  v22 = v43;
  v23 = v41;
  v24 = v31;
  *v31 = v40;
  v24[1] = v23;
  result = *(double *)v42.i64;
  v24[2] = v42;
  v24[3].i64[0] = v22;
  return result;
}

int64x2_t Region.init()@<Q0>(int64x2_t *a1@<X8>)
{
  int64x2_t result;
  uint64_t v2;

  result = vdupq_n_s64(0x7FF8000000000000uLL);
  *a1 = result;
  a1[1] = result;
  v2 = MEMORY[0x1E0DEE9D8];
  a1[2].i64[0] = MEMORY[0x1E0DEE9D8];
  a1[2].i64[1] = v2;
  a1[3].i64[0] = v2;
  return result;
}

uint64_t Region.formUnion(_:)(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v3;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  double v21;
  unint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)();
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BOOL4 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  double *v96;
  int64_t v97;
  uint64_t v98;
  int64_t v99;
  uint64_t v100;
  uint64_t (*v101)();
  int64_t v102;
  uint64_t v103;
  int64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t (*v107)();
  uint64_t v108;
  double *v109;
  int64_t v110;
  uint64_t v111;
  uint64_t v112;
  int64_t v113;
  int64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t (*v118)();
  int64_t v119;
  uint64_t v120;
  int64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  double *v125;
  int64_t v126;
  int64_t v127;
  uint64_t v128;
  uint64_t v129;
  int64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int64_t v139;
  uint64_t (*v140)();
  int64_t v141;
  int64_t v142;
  uint64_t (*v143)();
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  double *v147;
  uint64_t (*v148)();
  uint64_t v149;
  uint64_t v150;
  uint64_t (*v151)();
  uint64_t v152;
  uint64_t v153;
  uint64_t (*v154)();
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int64_t v158;
  int64_t v159;
  int64_t v160;
  int64_t v161;
  int64_t v162;
  int64_t v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  _QWORD *v172;
  __int128 v173;
  uint64_t (*v174)();
  __int128 v175;
  uint64_t v176;
  int v177;
  char v178;
  int v179;
  char v180;
  uint64_t (*v181)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X8>);
  uint64_t v182;
  uint64_t (*v183)@<X0>(uint64_t *@<X0>, uint64_t@<X8>);
  uint64_t v184;
  uint64_t v185;

  v3 = v2;
  v185 = *MEMORY[0x1E0C80C00];
  v5 = *(double *)a1;
  v6 = *(double *)v2;
  v7 = *(_QWORD *)(v2 + 32);
  v8 = *(_QWORD *)v2 & 0x7FF0000000000000;
  v9 = *(_QWORD *)v2 & 0xFFFFFFFFFFFFFLL;
  if (v9)
    v10 = v8 == 0x7FF0000000000000;
  else
    v10 = 0;
  result = !v10 && *(_QWORD *)(v7 + 16) == 0;
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 48);
  v15 = *(double *)(a1 + 8);
  v14 = *(double *)(a1 + 16);
  v16 = *(double *)(a1 + 24);
  v17 = *(_QWORD *)(a1 + 32);
  v18 = *(uint64_t *)(v2 + 8);
  v19 = *(double *)(v2 + 16);
  v20 = *(_QWORD *)&v5 & 0xFFFFFFFFFFFFFLL;
  v21 = *(double *)(v2 + 24);
  if ((*(_QWORD *)&v5 & 0x7FF0000000000000) == 0x7FF0000000000000 && v20)
    return result;
  v22 = *(_QWORD *)(v17 + 16);
  if ((*(_QWORD *)&v5 & 0x7FF0000000000000) == 0x7FF0000000000000)
  {
    if (v8 == 0x7FF0000000000000 && v9)
    {
      if (!v20)
        goto LABEL_11;
      return result;
    }
    if (v20)
      return result;
  }
  else if (v10)
  {
LABEL_11:
    swift_retain();
    swift_retain();
    swift_retain();
    swift_release();
    swift_release();
    result = swift_release();
    *(double *)v2 = v5;
    *(double *)(v2 + 8) = v15;
    *(double *)(v2 + 16) = v14;
    *(double *)(v2 + 24) = v16;
    *(_QWORD *)(v2 + 32) = v17;
    *(_QWORD *)(v2 + 40) = v12;
    *(_QWORD *)(v2 + 48) = v13;
    return result;
  }
  if (v16 < v19)
  {
    if (v6 > v5)
      v23 = v5;
    else
      v23 = *(double *)v2;
    if (v15 >= *(double *)&v18)
    {
      if ((*(_QWORD *)&v15 & 0xFFFFFFFFFFFFFLL) != 0)
        v24 = *(double *)(v2 + 8);
      else
        v24 = v15;
      if ((~*(_QWORD *)&v15 & 0x7FF0000000000000) != 0)
        *(double *)&v18 = v15;
      else
        *(double *)&v18 = v24;
    }
    if (v22)
    {
      v25 = v17 + 32;
      v26 = v13 + 32;
      v27 = *(_QWORD *)(v13 + 16);
      v28 = *(_QWORD *)&v23;
      v29 = swift_allocObject();
      *(_QWORD *)(v29 + 16) = v12;
      *(_QWORD *)(v29 + 24) = v26;
      *(_QWORD *)(v29 + 32) = v27;
      *(_BYTE *)(v29 + 40) = 1;
      v172 = (_QWORD *)v25;
      v173 = v22;
      v174 = sub_184A957B4;
      *(_QWORD *)&v175 = v29;
      swift_retain_n();
      v30 = 0;
      v31 = 0;
      v32 = v28;
      v33 = v18;
LABEL_46:
      sub_184A91384(v30, v31, 0, v32, 0, v33, 0, (uint64_t *)&v172);
      swift_release();
      return swift_release();
    }
    v170 = v5;
    v171 = v15;
    v51 = *(_QWORD *)&v23;
    v168 = v14;
    v169 = v16;
    v52 = swift_allocObject();
    *(_QWORD *)(v52 + 16) = &v170;
    *(_OWORD *)(v52 + 24) = xmmword_184E387A0;
    *(_BYTE *)(v52 + 40) = 0;
    v172 = &v168;
    v173 = xmmword_184E387A0;
    v174 = sub_184A957B4;
    *(_QWORD *)&v175 = v52;
    sub_184A91384(0, 0, 0, v51, 0, v18, 0, (uint64_t *)&v172);
    return swift_release();
  }
  if (v21 < v14)
  {
    if (*(_QWORD *)(v7 + 16))
      v34 = *(_QWORD *)(v7 + 16);
    else
      v34 = 2;
    if (v6 > v5)
      *(double *)&v35 = v5;
    else
      *(double *)&v35 = v6;
    if (v15 >= *(double *)&v18)
    {
      if ((*(_QWORD *)&v15 & 0xFFFFFFFFFFFFFLL) != 0)
        v36 = *(double *)(v3 + 8);
      else
        v36 = v15;
      if ((~*(_QWORD *)&v15 & 0x7FF0000000000000) != 0)
        *(double *)&v18 = v15;
      else
        *(double *)&v18 = v36;
    }
    if (v22)
    {
      v37 = v13 + 32;
      v38 = *(_QWORD *)(v13 + 16);
      v39 = v35;
      v40 = swift_allocObject();
      *(_QWORD *)(v40 + 16) = v12;
      *(_QWORD *)(v40 + 24) = v37;
      *(_QWORD *)(v40 + 32) = v38;
      *(_BYTE *)(v40 + 40) = 1;
      v172 = (_QWORD *)(v17 + 32);
      v173 = v22;
      v174 = sub_184A957B4;
      *(_QWORD *)&v175 = v40;
      swift_retain_n();
      v30 = v34;
      v31 = v34;
      v32 = v39;
      v33 = v18;
      goto LABEL_46;
    }
    v170 = v5;
    v171 = v15;
    v65 = v35;
    v168 = v14;
    v169 = v16;
    v66 = swift_allocObject();
    *(_QWORD *)(v66 + 16) = &v170;
    *(_OWORD *)(v66 + 24) = xmmword_184E387A0;
    *(_BYTE *)(v66 + 40) = 0;
    v172 = &v168;
    v173 = xmmword_184E387A0;
    v174 = sub_184A957B4;
    *(_QWORD *)&v175 = v66;
    sub_184A91384(v34, v34, 0, v65, 0, v18, 0, (uint64_t *)&v172);
    return swift_release();
  }
  if (*(double *)&v18 < v5)
  {
    v41 = *(_QWORD *)(v2 + 40);
    v42 = *(_QWORD *)(v2 + 48);
    v172 = *(_QWORD **)v2;
    *(_QWORD *)&v173 = v18;
    *((double *)&v173 + 1) = v19;
    v174 = *(uint64_t (**)())&v21;
    *(_QWORD *)&v175 = v7;
    *((_QWORD *)&v175 + 1) = v41;
    v176 = v42;
    a2.n128_f64[0] = v14;
    v43 = sub_184A96E0C(result, a2, v16);
    if (*(_QWORD *)(v7 + 16))
    {
      v45 = v7 + 32;
      v46 = v42 + 32;
      v47 = *(_QWORD *)(v42 + 16);
      v48 = *(_QWORD *)(v17 + 16);
      v162 = v44;
      if (!v48)
      {
        v170 = v5;
        v171 = v15;
        v86 = v45 + 8 * v43;
        v87 = v44 - v43;
        v168 = v14;
        v169 = v16;
        v88 = v43;
        v89 = swift_allocObject();
        *(_QWORD *)(v89 + 16) = v41;
        *(_QWORD *)(v89 + 24) = v46;
        *(_QWORD *)(v89 + 32) = v47;
        *(_BYTE *)(v89 + 40) = 1;
        *(_QWORD *)(v89 + 48) = &v170;
        *(_OWORD *)(v89 + 56) = xmmword_184E387A0;
        *(_BYTE *)(v89 + 72) = 0;
        v172 = (_QWORD *)v86;
        *(_QWORD *)&v173 = v87;
        *((_QWORD *)&v173 + 1) = v88;
        v174 = (uint64_t (*)())&v168;
        v175 = xmmword_184E387A0;
        v176 = 0x7FF8000000000000;
        v177 = 0;
        v178 = 1;
        v179 = 0;
        v180 = 1;
        v181 = sub_184AA333C;
        v182 = 0;
        v183 = (uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))sub_184A95758;
        v184 = v89;
        swift_retain_n();
        swift_retain();
        swift_retain();
        sub_184A91B3C(v88, v162, 0, 0, 1, *(uint64_t *)&v15, 0, (uint64_t)&v172);
        swift_release();
LABEL_97:
        swift_release();
        swift_release();
        goto LABEL_98;
      }
      v144 = v13 + 32;
      v151 = (uint64_t (*)())(v17 + 32);
      v134 = v44 - v43;
      v138 = *(_QWORD *)(v13 + 16);
      v131 = v45 + 8 * v43;
      v49 = v43;
      v50 = swift_allocObject();
      *(_QWORD *)(v50 + 16) = v41;
      *(_QWORD *)(v50 + 24) = v46;
      *(_QWORD *)(v50 + 32) = v47;
      *(_BYTE *)(v50 + 40) = 1;
      *(_QWORD *)(v50 + 48) = v12;
      *(_QWORD *)(v50 + 56) = v144;
      *(_QWORD *)(v50 + 64) = v138;
      *(_BYTE *)(v50 + 72) = 1;
      v172 = (_QWORD *)v131;
      *(_QWORD *)&v173 = v134;
      *((_QWORD *)&v173 + 1) = v49;
      v174 = v151;
      v175 = v48;
      v176 = 0x7FF8000000000000;
      v177 = 0;
      v178 = 1;
      v179 = 0;
      v180 = 1;
      v181 = sub_184AA333C;
      v182 = 0;
      v183 = (uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))sub_184A95758;
      v184 = v50;
      swift_retain_n();
      swift_retain_n();
      swift_retain();
      swift_retain();
      sub_184A91B3C(v49, v162, 0, 0, 1, *(uint64_t *)&v15, 0, (uint64_t)&v172);
      swift_release();
    }
    else
    {
      v170 = v6;
      v171 = *(double *)&v18;
      v168 = v19;
      v169 = v21;
      v81 = *(_QWORD *)(v17 + 16);
      if (!v81)
      {
        v166 = v5;
        v167 = v15;
        v164 = v14;
        v165 = v16;
        v96 = &v168 + v43;
        v97 = v44 - v43;
        v98 = v43;
        v99 = v44;
        v100 = swift_allocObject();
        *(_QWORD *)(v100 + 16) = &v170;
        *(_OWORD *)(v100 + 24) = xmmword_184E387A0;
        *(_BYTE *)(v100 + 40) = 0;
        *(_QWORD *)(v100 + 48) = &v166;
        *(_OWORD *)(v100 + 56) = xmmword_184E387A0;
        *(_BYTE *)(v100 + 72) = 0;
        v172 = v96;
        *(_QWORD *)&v173 = v97;
        *((_QWORD *)&v173 + 1) = v98;
        v174 = (uint64_t (*)())&v164;
        v175 = xmmword_184E387A0;
        v176 = 0x7FF8000000000000;
        v177 = 0;
        v178 = 1;
        v179 = 0;
        v180 = 1;
        v181 = sub_184AA333C;
        v182 = 0;
        v183 = (uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))sub_184A95758;
        v184 = v100;
        swift_retain();
        swift_retain();
        swift_retain();
        sub_184A91B3C(v98, v99, 0, 0, 1, *(uint64_t *)&v15, 0, (uint64_t)&v172);
        goto LABEL_97;
      }
      v82 = v13 + 32;
      v83 = *(_QWORD *)(v13 + 16);
      v147 = &v168 + v43;
      v154 = (uint64_t (*)())(v17 + 32);
      v141 = v44 - v43;
      v84 = v43;
      v163 = v44;
      v85 = swift_allocObject();
      *(_QWORD *)(v85 + 16) = &v170;
      *(_OWORD *)(v85 + 24) = xmmword_184E387A0;
      *(_BYTE *)(v85 + 40) = 0;
      *(_QWORD *)(v85 + 48) = v12;
      *(_QWORD *)(v85 + 56) = v82;
      *(_QWORD *)(v85 + 64) = v83;
      *(_BYTE *)(v85 + 72) = 1;
      v172 = v147;
      *(_QWORD *)&v173 = v141;
      *((_QWORD *)&v173 + 1) = v84;
      v174 = v154;
      v175 = v81;
      v176 = 0x7FF8000000000000;
      v177 = 0;
      v178 = 1;
      v179 = 0;
      v180 = 1;
      v181 = sub_184AA333C;
      v182 = 0;
      v183 = (uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))sub_184A95758;
      v184 = v85;
      swift_retain_n();
      swift_retain();
      swift_retain();
      swift_retain();
      sub_184A91B3C(v84, v163, 0, 0, 1, *(uint64_t *)&v15, 0, (uint64_t)&v172);
    }
LABEL_87:
    swift_release();
    goto LABEL_97;
  }
  if (v15 < v6)
  {
    v54 = *(_QWORD *)(v2 + 40);
    v53 = *(_QWORD *)(v2 + 48);
    v172 = *(_QWORD **)v2;
    *(_QWORD *)&v173 = v18;
    *((double *)&v173 + 1) = v19;
    v174 = *(uint64_t (**)())&v21;
    *(_QWORD *)&v175 = v7;
    *((_QWORD *)&v175 + 1) = v54;
    v176 = v53;
    a2.n128_f64[0] = v14;
    v55 = sub_184A96E0C(result, a2, v16);
    if (*(_QWORD *)(v7 + 16))
    {
      v57 = v7 + 32;
      v145 = *(_QWORD *)(v53 + 16);
      v152 = v53 + 32;
      v58 = *(_QWORD *)(v17 + 16);
      if (!v58)
      {
        v170 = v5;
        v171 = v15;
        v101 = (uint64_t (*)())(v57 + 8 * v55);
        v102 = v56 - v55;
        v168 = v14;
        v169 = v16;
        v103 = v55;
        v104 = v56;
        v105 = swift_allocObject();
        *(_QWORD *)(v105 + 16) = &v170;
        *(_OWORD *)(v105 + 24) = xmmword_184E387A0;
        *(_BYTE *)(v105 + 40) = 0;
        *(_QWORD *)(v105 + 48) = v54;
        *(_QWORD *)(v105 + 56) = v152;
        *(_QWORD *)(v105 + 64) = v145;
        *(_BYTE *)(v105 + 72) = 1;
        v172 = &v168;
        v173 = xmmword_184E387A0;
        v174 = v101;
        *(_QWORD *)&v175 = v102;
        *((_QWORD *)&v175 + 1) = v103;
        v176 = 0x7FF8000000000000;
        v177 = 0;
        v178 = 1;
        v179 = 0;
        v180 = 1;
        v181 = sub_184AA333C;
        v182 = 0;
        v183 = (uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))sub_184A95758;
        v184 = v105;
        swift_retain_n();
        swift_retain();
        swift_retain();
        sub_184A91B3C(v103, v104, 0, *(uint64_t *)&v5, 0, 0, 1, (uint64_t)&v172);
        swift_release();
        goto LABEL_97;
      }
      v59 = v17 + 32;
      v60 = v54;
      v61 = v13 + 32;
      v62 = *(_QWORD *)(v13 + 16);
      v135 = v59;
      v139 = v56 - v55;
      v158 = v56;
      v63 = (uint64_t (*)())(v57 + 8 * v55);
      v132 = v55;
      v64 = swift_allocObject();
      *(_QWORD *)(v64 + 16) = v12;
      *(_QWORD *)(v64 + 24) = v61;
      *(_QWORD *)(v64 + 32) = v62;
      *(_BYTE *)(v64 + 40) = 1;
      *(_QWORD *)(v64 + 48) = v60;
      *(_QWORD *)(v64 + 56) = v152;
      *(_QWORD *)(v64 + 64) = v145;
      *(_BYTE *)(v64 + 72) = 1;
      v172 = (_QWORD *)v135;
      v173 = v58;
      v174 = v63;
      *(_QWORD *)&v175 = v139;
      *((_QWORD *)&v175 + 1) = v132;
      v176 = 0x7FF8000000000000;
      v177 = 0;
      v178 = 1;
      v179 = 0;
      v180 = 1;
      v181 = sub_184AA333C;
      v182 = 0;
      v183 = (uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))sub_184A95758;
      v184 = v64;
      swift_retain_n();
      swift_retain_n();
      swift_retain();
      swift_retain();
      sub_184A91B3C(v132, v158, 0, *(uint64_t *)&v5, 0, 0, 1, (uint64_t)&v172);
      swift_release();
    }
    else
    {
      v170 = v6;
      v171 = *(double *)&v18;
      v168 = v19;
      v169 = v21;
      v90 = *(_QWORD *)(v17 + 16);
      if (!v90)
      {
        v166 = v5;
        v167 = v15;
        v164 = v14;
        v165 = v16;
        v118 = (uint64_t (*)())(&v168 + v55);
        v119 = v56 - v55;
        v120 = v55;
        v121 = v56;
        v122 = swift_allocObject();
        *(_QWORD *)(v122 + 16) = &v166;
        *(_OWORD *)(v122 + 24) = xmmword_184E387A0;
        *(_BYTE *)(v122 + 40) = 0;
        *(_QWORD *)(v122 + 48) = &v170;
        *(_OWORD *)(v122 + 56) = xmmword_184E387A0;
        *(_BYTE *)(v122 + 72) = 0;
        v172 = &v164;
        v173 = xmmword_184E387A0;
        v174 = v118;
        *(_QWORD *)&v175 = v119;
        *((_QWORD *)&v175 + 1) = v120;
        v176 = 0x7FF8000000000000;
        v177 = 0;
        v178 = 1;
        v179 = 0;
        v180 = 1;
        v181 = sub_184AA333C;
        v182 = 0;
        v183 = (uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))sub_184A95758;
        v184 = v122;
        swift_retain();
        swift_retain();
        swift_retain();
        sub_184A91B3C(v120, v121, 0, *(uint64_t *)&v5, 0, 0, 1, (uint64_t)&v172);
        goto LABEL_97;
      }
      v91 = v17 + 32;
      v92 = v13 + 32;
      v93 = *(_QWORD *)(v13 + 16);
      v148 = (uint64_t (*)())(&v168 + v55);
      v155 = v91;
      v142 = v56 - v55;
      v94 = v55;
      v160 = v56;
      v95 = swift_allocObject();
      *(_QWORD *)(v95 + 16) = v12;
      *(_QWORD *)(v95 + 24) = v92;
      *(_QWORD *)(v95 + 32) = v93;
      *(_BYTE *)(v95 + 40) = 1;
      *(_QWORD *)(v95 + 48) = &v170;
      *(_OWORD *)(v95 + 56) = xmmword_184E387A0;
      *(_BYTE *)(v95 + 72) = 0;
      v172 = (_QWORD *)v155;
      v173 = v90;
      v174 = v148;
      *(_QWORD *)&v175 = v142;
      *((_QWORD *)&v175 + 1) = v94;
      v176 = 0x7FF8000000000000;
      v177 = 0;
      v178 = 1;
      v179 = 0;
      v180 = 1;
      v181 = sub_184AA333C;
      v182 = 0;
      v183 = (uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))sub_184A95758;
      v184 = v95;
      swift_retain_n();
      swift_retain();
      swift_retain();
      swift_retain();
      sub_184A91B3C(v94, v160, 0, *(uint64_t *)&v5, 0, 0, 1, (uint64_t)&v172);
    }
    goto LABEL_87;
  }
  if (!(_DWORD)result || v6 > v5 || v15 > *(double *)&v18 || v19 > v14 || v16 > v21)
  {
    if (!v22)
    {
      v67 = v5 <= v6;
      if (*(double *)&v18 > v15)
        v67 = 0;
      if (v14 > v19)
        v67 = 0;
      if (v21 > v16)
        v67 = 0;
      if (v10 || v67)
        goto LABEL_11;
    }
    v69 = *(_QWORD *)(v2 + 40);
    v68 = *(_QWORD *)(v2 + 48);
    v172 = *(_QWORD **)v2;
    *(_QWORD *)&v173 = v18;
    *((double *)&v173 + 1) = v19;
    v174 = *(uint64_t (**)())&v21;
    *(_QWORD *)&v175 = v7;
    *((_QWORD *)&v175 + 1) = v69;
    v176 = v68;
    a2.n128_f64[0] = v14;
    v70 = sub_184A96E0C(result, a2, v16);
    if (v6 > v5)
      *(double *)&v72 = v5;
    else
      *(double *)&v72 = v6;
    v73 = v18;
    if (v15 >= *(double *)&v18)
    {
      if ((*(_QWORD *)&v15 & 0xFFFFFFFFFFFFFLL) != 0)
        v73 = v18;
      else
        *(double *)&v73 = v15;
      if ((~*(_QWORD *)&v15 & 0x7FF0000000000000) != 0)
        *(double *)&v73 = v15;
    }
    if (*(_QWORD *)(v7 + 16))
    {
      v74 = v7 + 32;
      v75 = v68 + 32;
      v76 = *(_QWORD *)(v68 + 16);
      v77 = *(_QWORD *)(v17 + 16);
      if (!v77)
      {
        v170 = v5;
        v171 = v15;
        v150 = v73;
        v157 = v72;
        v113 = v71;
        v114 = v71 - v70;
        v115 = v74 + 8 * v70;
        v168 = v14;
        v169 = v16;
        v116 = v70;
        v117 = swift_allocObject();
        *(_QWORD *)(v117 + 16) = v69;
        *(_QWORD *)(v117 + 24) = v75;
        *(_QWORD *)(v117 + 32) = v76;
        *(_BYTE *)(v117 + 40) = 1;
        *(_QWORD *)(v117 + 48) = &v170;
        *(_OWORD *)(v117 + 56) = xmmword_184E387A0;
        *(_BYTE *)(v117 + 72) = 0;
        v172 = (_QWORD *)v115;
        *(_QWORD *)&v173 = v114;
        *((_QWORD *)&v173 + 1) = v116;
        v174 = (uint64_t (*)())&v168;
        v175 = xmmword_184E387A0;
        v176 = 0x7FF8000000000000;
        v177 = 0;
        v178 = 1;
        v179 = 0;
        v180 = 1;
        v181 = sub_184AA333C;
        v182 = 0;
        v183 = sub_184A956D4;
        v184 = v117;
        swift_retain_n();
        swift_retain();
        swift_retain();
        sub_184A92384(v116, v113, 1, v157, 0, v150, 0, (uint64_t)&v172);
        swift_release();
        swift_release();
        goto LABEL_95;
      }
      v136 = v13 + 32;
      v140 = (uint64_t (*)())(v17 + 32);
      v146 = v73;
      v153 = v72;
      v159 = v71;
      v130 = v71 - v70;
      v133 = *(_QWORD *)(v13 + 16);
      v78 = v74 + 8 * v70;
      v79 = v70;
      v80 = swift_allocObject();
      *(_QWORD *)(v80 + 16) = v69;
      *(_QWORD *)(v80 + 24) = v75;
      *(_QWORD *)(v80 + 32) = v76;
      *(_BYTE *)(v80 + 40) = 1;
      *(_QWORD *)(v80 + 48) = v12;
      *(_QWORD *)(v80 + 56) = v136;
      *(_QWORD *)(v80 + 64) = v133;
      *(_BYTE *)(v80 + 72) = 1;
      v172 = (_QWORD *)v78;
      *(_QWORD *)&v173 = v130;
      *((_QWORD *)&v173 + 1) = v79;
      v174 = v140;
      v175 = v77;
      v176 = 0x7FF8000000000000;
      v177 = 0;
      v178 = 1;
      v179 = 0;
      v180 = 1;
      v181 = sub_184AA333C;
      v182 = 0;
      v183 = sub_184A956D4;
      v184 = v80;
      swift_retain_n();
      swift_retain_n();
      swift_retain();
      swift_retain();
      sub_184A92384(v79, v159, 1, v153, 0, v146, 0, (uint64_t)&v172);
      swift_release();
    }
    else
    {
      v170 = v6;
      v171 = *(double *)&v18;
      v168 = v19;
      v169 = v21;
      v106 = *(_QWORD *)(v17 + 16);
      if (!v106)
      {
        v166 = v5;
        v167 = v15;
        v164 = v14;
        v165 = v16;
        v123 = v72;
        v124 = v73;
        v125 = &v168 + v70;
        v126 = v71;
        v127 = v71 - v70;
        v128 = v70;
        v129 = swift_allocObject();
        *(_QWORD *)(v129 + 16) = &v170;
        *(_OWORD *)(v129 + 24) = xmmword_184E387A0;
        *(_BYTE *)(v129 + 40) = 0;
        *(_QWORD *)(v129 + 48) = &v166;
        *(_OWORD *)(v129 + 56) = xmmword_184E387A0;
        *(_BYTE *)(v129 + 72) = 0;
        v172 = v125;
        *(_QWORD *)&v173 = v127;
        *((_QWORD *)&v173 + 1) = v128;
        v174 = (uint64_t (*)())&v164;
        v175 = xmmword_184E387A0;
        v176 = 0x7FF8000000000000;
        v177 = 0;
        v178 = 1;
        v179 = 0;
        v180 = 1;
        v181 = sub_184AA333C;
        v182 = 0;
        v183 = sub_184A956D4;
        v184 = v129;
        swift_retain();
        swift_retain();
        swift_retain();
        sub_184A92384(v128, v126, 1, v123, 0, v124, 0, (uint64_t)&v172);
        goto LABEL_93;
      }
      v107 = (uint64_t (*)())(v17 + 32);
      v108 = v13 + 32;
      v137 = *(_QWORD *)(v13 + 16);
      v143 = v107;
      v149 = v73;
      v156 = v72;
      v109 = &v168 + v70;
      v161 = v71;
      v110 = v71 - v70;
      v111 = v70;
      v112 = swift_allocObject();
      *(_QWORD *)(v112 + 16) = &v170;
      *(_OWORD *)(v112 + 24) = xmmword_184E387A0;
      *(_BYTE *)(v112 + 40) = 0;
      *(_QWORD *)(v112 + 48) = v12;
      *(_QWORD *)(v112 + 56) = v108;
      *(_QWORD *)(v112 + 64) = v137;
      *(_BYTE *)(v112 + 72) = 1;
      v172 = v109;
      *(_QWORD *)&v173 = v110;
      *((_QWORD *)&v173 + 1) = v111;
      v174 = v143;
      v175 = v106;
      v176 = 0x7FF8000000000000;
      v177 = 0;
      v178 = 1;
      v179 = 0;
      v180 = 1;
      v181 = sub_184AA333C;
      v182 = 0;
      v183 = sub_184A956D4;
      v184 = v112;
      swift_retain_n();
      swift_retain();
      swift_retain();
      swift_retain();
      sub_184A92384(v111, v161, 1, v156, 0, v149, 0, (uint64_t)&v172);
    }
    swift_release();
LABEL_93:
    swift_release();
LABEL_95:
    swift_release();
LABEL_98:
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_184A8E8C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a5)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_184A8E900@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  __int128 *v2;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t (*v8)(__int128 *);
  int64_t v9;
  int64_t v10;
  _BYTE *v11;
  uint64_t v12;
  char v13;
  char v14;
  _QWORD *v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;

  v2 = v1;
  v4 = v1[1];
  v31 = *v1;
  v32 = v4;
  v5 = *((_QWORD *)v1 + 4);
  v33 = v5;
  v7 = *v1;
  v6 = v1[1];
  v8 = (uint64_t (*)(__int128 *))*((_QWORD *)&v31 + 1);
  v34 = v31;
  v9 = *(_QWORD *)(v31 + 16);
  v26 = v6;
  v27 = v7;
  if (v9)
  {
    sub_184A965E8((uint64_t)&v34);
    swift_retain();
    swift_retain();
    sub_184A965E8((uint64_t)&v34);
    swift_retain();
    swift_retain();
    v10 = 0;
    v11 = (_BYTE *)(v31 + 56);
    while (1)
    {
      v12 = *((_QWORD *)v11 - 1);
      v13 = *v11;
      v28 = *(_OWORD *)(v11 - 24);
      v29 = v12;
      v30 = v13;
      swift_retain();
      v14 = v8(&v28);
      swift_release();
      if ((v14 & 1) != 0)
        break;
      ++v10;
      v11 += 32;
      if (v9 == v10)
      {
        v10 = v9;
        break;
      }
    }
  }
  else
  {
    sub_184A965E8((uint64_t)&v34);
    swift_retain();
    swift_retain();
    sub_184A965E8((uint64_t)&v34);
    swift_retain();
    swift_retain();
    v10 = 0;
  }
  v15 = sub_184A958A8(v10);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  sub_184A96610((uint64_t)&v34);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 72) = *(__int128 *)((char *)v2 + 40);
  *(_OWORD *)(a1 + 88) = *(__int128 *)((char *)v2 + 56);
  v22 = *((_QWORD *)v2 + 9);
  v23 = *((_QWORD *)v2 + 10);
  v24 = *((_QWORD *)v2 + 11);
  *(_OWORD *)a1 = v27;
  *(_OWORD *)(a1 + 16) = v26;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v15;
  *(_BYTE *)(a1 + 48) = v17 & 1;
  *(_QWORD *)(a1 + 56) = v19;
  *(_QWORD *)(a1 + 64) = v21;
  *(_QWORD *)(a1 + 104) = v22;
  *(_QWORD *)(a1 + 112) = v23;
  *(_QWORD *)(a1 + 120) = v24;
  return swift_retain();
}

void sub_184A8EAA4()
{
  uint64_t v0;
  double v1;
  unint64_t v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;

  v1 = *(double *)(v0 + 64);
  v2 = *(unsigned int *)(v0 + 72) | ((unint64_t)*(unsigned __int8 *)(v0 + 76) << 32);
  if (*(_BYTE *)(v0 + 77))
  {
    if (*(_BYTE *)(v0 + 77) == 1)
    {
      v3 = *(_QWORD *)(v0 + 8);
      v4 = *(_QWORD *)(v0 + 16);
      v5 = v3 + v4;
      if (!__OFADD__(v3, v4))
      {
        v6 = *(_QWORD *)(v0 + 24);
        if (v6 == v5)
        {
          if ((v2 & 0x100000000) == 0)
            goto LABEL_27;
LABEL_10:
          *(_QWORD *)(v0 + 64) = 0;
          *(_WORD *)(v0 + 76) = 512;
          *(_DWORD *)(v0 + 72) = 0;
          return;
        }
        if (!__OFSUB__(v6, v4))
        {
          if ((v6 & 0x8000000000000000) == 0)
          {
            if (!HIDWORD(v6))
            {
              if (v6 >= v4)
              {
                if (v6 < v5)
                {
                  v16 = *(double *)(*(_QWORD *)v0 + 8 * (v6 - v4));
                  *(_QWORD *)(v0 + 24) = v6 + 1;
                  LODWORD(v4) = v2;
                  if ((v2 & 0x100000000) == 0)
                    goto LABEL_45;
LABEL_38:
                  *(double *)(v0 + 64) = v1;
                  *(_DWORD *)(v0 + 72) = v2;
                  v21 = 257;
LABEL_47:
                  *(_WORD *)(v0 + 76) = v21;
                  return;
                }
                goto LABEL_59;
              }
LABEL_58:
              __break(1u);
LABEL_59:
              __break(1u);
              goto LABEL_60;
            }
LABEL_57:
            __break(1u);
            goto LABEL_58;
          }
LABEL_56:
          __break(1u);
          goto LABEL_57;
        }
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }
      __break(1u);
      goto LABEL_52;
    }
    v13 = *(_QWORD *)(v0 + 8);
    v12 = *(_QWORD *)(v0 + 16);
    v14 = v13 + v12;
    if (__OFADD__(v13, v12))
    {
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    v15 = *(_QWORD *)(v0 + 24);
    if (v15 == v14)
    {
      v16 = 0.0;
      LODWORD(v6) = 0;
    }
    else
    {
      if (__OFSUB__(v15, v12))
      {
LABEL_65:
        __break(1u);
        goto LABEL_66;
      }
      if (v15 < 0)
      {
LABEL_66:
        __break(1u);
        goto LABEL_67;
      }
      if (HIDWORD(v15))
      {
LABEL_67:
        __break(1u);
        goto LABEL_68;
      }
      if (v15 < v12)
      {
LABEL_68:
        __break(1u);
        goto LABEL_69;
      }
      if (v15 >= v14)
      {
LABEL_69:
        __break(1u);
        goto LABEL_70;
      }
      v16 = *(double *)(*(_QWORD *)v0 + 8 * (v15 - v12));
      *(_QWORD *)(v0 + 24) = v15 + 1;
      LODWORD(v6) = v15;
    }
    v18 = *(_QWORD *)(v0 + 40);
    v19 = *(_QWORD *)(v0 + 48);
    v9 = __OFADD__(v18, v19);
    v20 = v18 + v19;
    if (v9)
      goto LABEL_54;
    v4 = *(_QWORD *)(v0 + 56);
    if (v4 == v20)
    {
      if (v15 == v14)
        goto LABEL_10;
LABEL_37:
      LODWORD(v2) = 0;
      v1 = 0.0;
      goto LABEL_38;
    }
    if (__OFSUB__(v4, v19))
    {
LABEL_70:
      __break(1u);
      goto LABEL_71;
    }
    if (v4 < 0)
    {
LABEL_71:
      __break(1u);
      goto LABEL_72;
    }
    if (HIDWORD(v4))
    {
LABEL_72:
      __break(1u);
      goto LABEL_73;
    }
    if (v4 < v19)
    {
LABEL_73:
      __break(1u);
      goto LABEL_74;
    }
    if (v4 >= v20)
    {
LABEL_74:
      __break(1u);
      return;
    }
    v1 = *(double *)(*(_QWORD *)(v0 + 32) + 8 * (v4 - v19));
    *(_QWORD *)(v0 + 56) = v4 + 1;
    if (v15 != v14)
      goto LABEL_45;
LABEL_27:
    *(_QWORD *)(v0 + 64) = 0;
    *(_WORD *)(v0 + 76) = 1;
    *(_DWORD *)(v0 + 72) = 0;
    return;
  }
  v7 = *(_QWORD *)(v0 + 40);
  v8 = *(_QWORD *)(v0 + 48);
  v9 = __OFADD__(v7, v8);
  v10 = v7 + v8;
  if (v9)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  v11 = *(_QWORD *)(v0 + 56);
  if (v11 == v10)
  {
    if ((*(_BYTE *)(v0 + 76) & 1) != 0)
      goto LABEL_10;
    goto LABEL_37;
  }
  if (__OFSUB__(v11, v8))
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  if (v11 < 0)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  if (HIDWORD(v11))
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (v11 < v8)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (v11 >= v10)
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  v17 = *(double *)(*(_QWORD *)(v0 + 32) + 8 * (v11 - v8));
  v16 = *(double *)(v0 + 64);
  *(_QWORD *)(v0 + 56) = v11 + 1;
  LODWORD(v6) = v2;
  LODWORD(v4) = v11;
  v1 = v17;
  if ((v2 & 0x100000000) != 0)
    goto LABEL_27;
LABEL_45:
  if (v16 < v1)
  {
    *(double *)(v0 + 64) = v1;
    *(_DWORD *)(v0 + 72) = v4;
    v21 = 256;
    goto LABEL_47;
  }
  if (v1 >= v16)
  {
    *(_QWORD *)(v0 + 64) = 0;
    *(_WORD *)(v0 + 76) = 512;
    *(_DWORD *)(v0 + 72) = 0;
  }
  else
  {
    *(double *)(v0 + 64) = v16;
    *(_DWORD *)(v0 + 72) = v6;
    *(_WORD *)(v0 + 76) = 0;
  }
}

uint64_t Region.contains(_:)(uint64_t a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[2];
  __n128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *((_QWORD *)v1 + 6);
  v4 = v1[1];
  v10 = *v1;
  v11 = v4;
  v12 = v1[2];
  v13 = v3;
  v5 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v5;
  v8 = *(__n128 *)(a1 + 32);
  v9 = v2;
  return Region.isSuperset(of:)((uint64_t)v7, v8) & 1;
}

uint64_t Region.isSuperset(of:)(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  _BOOL4 v9;
  double *v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  double *v21;
  uint64_t v22;
  char v23;
  BOOL v24;
  uint64_t v25;
  uint64_t result;
  _BOOL4 v29;
  char v30;
  BOOL v31;
  unint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  unsigned __int8 v36;
  double v37;
  double v38;
  double v39[2];
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  double *v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v3 = *(double *)a1;
  v4 = *(double *)v2;
  v5 = *(_QWORD *)(v2 + 32);
  v6 = *(_QWORD *)v2 & 0x7FF0000000000000;
  v7 = *(_QWORD *)v2 & 0xFFFFFFFFFFFFFLL;
  if (v7)
    v8 = v6 == 0x7FF0000000000000;
  else
    v8 = 0;
  v9 = !v8 && *(_QWORD *)(v5 + 16) == 0;
  v10 = *(double **)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v13 = *(double *)(a1 + 8);
  v12 = *(double *)(a1 + 16);
  v14 = *(double *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 32);
  v17 = *(double *)(v2 + 8);
  v16 = *(double *)(v2 + 16);
  v18 = *(double *)(v2 + 24);
  v19 = *(double *)a1;
  v20 = *(_QWORD *)&v3 & 0x7FF0000000000000;
  v21 = *(double **)(v2 + 40);
  v22 = *(_QWORD *)(v2 + 48);
  if ((*(_QWORD *)&v3 & 0x7FF0000000000000) == 0x7FF0000000000000)
  {
    v25 = *(_QWORD *)&v19 & 0xFFFFFFFFFFFFFLL;
    if (v6 == 0x7FF0000000000000 && v7)
    {
      if (!v25)
        return 0;
    }
    else if (!v25)
    {
      v24 = v14 < v16 || v18 < v12;
      goto LABEL_22;
    }
    return 1;
  }
  v23 = v14 < v16 || v8;
  if ((v23 & 1) != 0)
    return 0;
  v24 = v18 < v12;
LABEL_22:
  if (v24 || v17 < v3 || v13 < v4)
    return 0;
  if (v9)
  {
    v29 = v4 <= v3;
    if (v13 > v17)
      v29 = 0;
    if (v16 > v12)
      v29 = 0;
    result = v14 <= v18 && v29;
    if (v20 == 0x7FF0000000000000 && (result & 1) == 0)
      return (*(_QWORD *)&v19 & 0xFFFFFFFFFFFFFLL) != 0;
  }
  else
  {
    v42 = *(double *)v2;
    v43 = v17;
    v44 = v16;
    v45 = v18;
    v46 = v5;
    v47 = v21;
    v48 = v22;
    a2.n128_f64[0] = v12;
    sub_184A96E0C(0, a2, v14);
    if (*(_QWORD *)(v5 + 16))
      v30 = 1;
    else
      v30 = v8;
    if ((v30 & 1) != 0)
    {
      v31 = (*(_QWORD *)&v19 & 0xFFFFFFFFFFFFFLL) != 0 && v20 == 0x7FF0000000000000;
      v32 = v22 + 32;
      v33 = *(_QWORD *)(v15 + 16);
      if (v31 || v33)
      {
        sub_184A94B1C(v21, v32, 1, &v42, v33, 0, v10, v11 + 32, *(_QWORD *)(v11 + 16), 1);
        return LOBYTE(v42);
      }
      v42 = v3;
      v43 = v13;
      v40 = v12;
      v41 = v14;
      sub_184A94B1C(v21, v32, 1, v39, 2, 0, &v42, 2uLL, 0, 0);
    }
    else
    {
      v34 = (*(_QWORD *)&v19 & 0xFFFFFFFFFFFFFLL) != 0 && v20 == 0x7FF0000000000000;
      v42 = v4;
      v43 = v17;
      v40 = v16;
      v41 = v18;
      v35 = *(_QWORD *)(v15 + 16);
      if (!v34 && !v35)
      {
        v39[0] = v3;
        v39[1] = v13;
        v37 = v12;
        v38 = v14;
        sub_184A94B1C(&v42, 2uLL, 0, &v36, 2, 0, v39, 2uLL, 0, 0);
        return v36;
      }
      sub_184A94B1C(&v42, 2uLL, 0, v39, v35, 0, v10, v11 + 32, *(_QWORD *)(v11 + 16), 1);
    }
    return LOBYTE(v39[0]);
  }
  return result;
}

uint64_t Region.union(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_184A943B0(a1, (uint64_t (*)(_OWORD *))Region.formUnion(_:), a2);
}

uint64_t Region.intersection(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_184A943B0(a1, (uint64_t (*)(_OWORD *))Region.formIntersection(_:), a2);
}

uint64_t Region.formIntersection(_:)(uint64_t result, __n128 a2)
{
  uint64_t v2;
  int64x2_t *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  BOOL v22;
  BOOL v24;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  double *v37;
  uint64_t v38;
  int64x2_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double *v49;
  double v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  int64x2_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  double v59;
  _QWORD *v60;
  double *v61;
  _QWORD *v62;
  _QWORD v63[2];
  _QWORD v64[2];
  double v65;
  double v66;
  double v67;
  double v68;
  int64x2_t v69;
  int64x2_t v70;
  int64x2_t v71;
  uint64_t v72;
  double *v73;
  double v74;
  double v75;
  double v76;
  __int128 v77;
  uint64_t v78;
  int v79;
  char v80;
  int v81;
  char v82;
  uint64_t (*v83)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X8>);
  uint64_t v84;
  uint64_t (*v85)@<X0>(uint64_t *@<X0>, uint64_t@<X8>);
  uint64_t v86;
  uint64_t v87;

  v3 = (int64x2_t *)v2;
  v87 = *MEMORY[0x1E0C80C00];
  v5 = *(double *)result;
  v4 = *(double *)(result + 8);
  v7 = *(double *)(result + 16);
  v6 = *(double *)(result + 24);
  v9 = *(_QWORD *)(result + 32);
  v8 = *(_QWORD *)(result + 40);
  v10 = *(_QWORD *)(result + 48);
  v12 = *(double *)v2;
  v11 = *(double *)(v2 + 8);
  v14 = *(double *)(v2 + 16);
  v13 = *(double *)(v2 + 24);
  v15 = *(_QWORD *)(v2 + 32);
  v16 = *(_QWORD *)v2 & 0x7FF0000000000000;
  v17 = *(_QWORD *)v2 & 0xFFFFFFFFFFFFFLL;
  if (v16 == 0x7FF0000000000000 && v17)
    return result;
  v18 = *(_QWORD *)(v15 + 16);
  v19 = *(_QWORD *)&v5 & 0xFFFFFFFFFFFFFLL;
  if ((*(_QWORD *)&v5 & 0x7FF0000000000000) == 0x7FF0000000000000 && v19)
    goto LABEL_37;
  v20 = *(_QWORD *)(v9 + 16);
  if ((*(_QWORD *)&v5 & 0x7FF0000000000000) == 0x7FF0000000000000)
  {
    if (v16 == 0x7FF0000000000000 && v17)
      return result;
    if (v19)
      goto LABEL_37;
  }
  v21 = v6 < v14 || v13 < v7;
  v22 = v21 || v11 < v5;
  if (v22 || v4 < v12)
  {
LABEL_37:
    v39 = vdupq_n_s64(0x7FF8000000000000uLL);
    *(int64x2_t *)v2 = v39;
    *(int64x2_t *)(v2 + 16) = v39;
LABEL_38:
    swift_release();
    v40 = MEMORY[0x1E0DEE9D8];
    v3[2].i64[0] = MEMORY[0x1E0DEE9D8];
    swift_release();
    v3[2].i64[1] = v40;
    result = swift_release();
    v3[3].i64[0] = v40;
    return result;
  }
  if (v20)
    v24 = 1;
  else
    v24 = v5 > v12;
  if (v24 || v11 > v4 || v7 > v14 || v13 > v6)
  {
    if (!v18)
    {
      if (v12 <= v5 && v4 <= v11 && v14 <= v7 && v6 <= v13)
      {
        swift_release();
        swift_release();
        swift_release();
        *(double *)v2 = v5;
        *(double *)(v2 + 8) = v4;
        *(double *)(v2 + 16) = v7;
        *(double *)(v2 + 24) = v6;
        *(_QWORD *)(v2 + 32) = v9;
        *(_QWORD *)(v2 + 40) = v8;
        *(_QWORD *)(v2 + 48) = v10;
        swift_retain();
        swift_retain();
        return swift_retain();
      }
      if (!v20)
      {
        *(double *)v2 = sub_184A800A8(*(double *)result, *(double *)(result + 8), *(double *)(result + 16), *(double *)(result + 24), *(double *)v2, *(double *)(v2 + 8), *(double *)(v2 + 16), *(double *)(v2 + 24));
        *(_QWORD *)(v2 + 8) = v46;
        *(_QWORD *)(v2 + 16) = v47;
        *(_QWORD *)(v2 + 24) = v48;
        goto LABEL_38;
      }
    }
    v28 = *(_QWORD *)(v2 + 40);
    v29 = *(_QWORD *)(v2 + 48);
    v73 = *(double **)v2;
    v74 = v11;
    v75 = v14;
    v76 = v13;
    *(_QWORD *)&v77 = v15;
    *((_QWORD *)&v77 + 1) = v28;
    v78 = v29;
    a2.n128_f64[0] = v7;
    v30 = sub_184A96E0C(v18 == 0, a2, v6);
    v32 = v30;
    v69 = vdupq_n_s64(0x7FF8000000000000uLL);
    v70 = v69;
    v71.i64[0] = MEMORY[0x1E0DEE9D8];
    v71.i64[1] = MEMORY[0x1E0DEE9D8];
    v72 = MEMORY[0x1E0DEE9D8];
    if (*(_QWORD *)(v15 + 16))
    {
      v33 = v15 + 32;
      v34 = v29 + 32;
      v35 = *(_QWORD *)(v29 + 16);
      v36 = *(_QWORD *)(v9 + 16);
      if (!v36)
      {
        v67 = v5;
        v68 = v4;
        v49 = (double *)(v33 + 8 * v30);
        *(_QWORD *)&v50 = v31 - v30;
        v65 = v7;
        v66 = v6;
        v51 = swift_allocObject();
        *(_QWORD *)(v51 + 16) = v28;
        *(_QWORD *)(v51 + 24) = v34;
        *(_QWORD *)(v51 + 32) = v35;
        *(_BYTE *)(v51 + 40) = 1;
        *(_QWORD *)(v51 + 48) = &v67;
        *(_OWORD *)(v51 + 56) = xmmword_184E387A0;
        *(_BYTE *)(v51 + 72) = 0;
        v73 = v49;
        v74 = v50;
        v75 = *(double *)&v32;
        v76 = COERCE_DOUBLE(&v65);
        v77 = xmmword_184E387A0;
        v78 = 0x7FF8000000000000;
        v79 = 0;
        v80 = 1;
        v81 = 0;
        v82 = 1;
        v83 = sub_184AA333C;
        v84 = 0;
        v85 = sub_184A957E8;
        v86 = v51;
        swift_retain_n();
        swift_retain();
        swift_retain();
        sub_184A92384(0, 0, 1, 0, 1, 0, 1, (uint64_t)&v73);
        swift_release();
        goto LABEL_52;
      }
      v56 = *(_QWORD *)(v10 + 16);
      v57 = v10 + 32;
      *(_QWORD *)&v58 = v31 - v30;
      v60 = (_QWORD *)(v9 + 32);
      v37 = (double *)(v33 + 8 * v30);
      v38 = swift_allocObject();
      *(_QWORD *)(v38 + 16) = v28;
      *(_QWORD *)(v38 + 24) = v34;
      *(_QWORD *)(v38 + 32) = v35;
      *(_BYTE *)(v38 + 40) = 1;
      *(_QWORD *)(v38 + 48) = v8;
      *(_QWORD *)(v38 + 56) = v57;
      *(_QWORD *)(v38 + 64) = v56;
      *(_BYTE *)(v38 + 72) = 1;
      v73 = v37;
      v74 = v58;
      v75 = *(double *)&v32;
      v76 = *(double *)&v60;
      v77 = v36;
      v78 = 0x7FF8000000000000;
      v79 = 0;
      v80 = 1;
      v81 = 0;
      v82 = 1;
      v83 = sub_184AA333C;
      v84 = 0;
      v85 = sub_184A957E8;
      v86 = v38;
      swift_retain_n();
      swift_retain_n();
      swift_retain();
      swift_retain();
      sub_184A92384(0, 0, 1, 0, 1, 0, 1, (uint64_t)&v73);
      swift_release();
    }
    else
    {
      v67 = v12;
      v68 = v11;
      v65 = v14;
      v66 = v13;
      v41 = *(_QWORD *)(v9 + 16);
      if (!v41)
      {
        *(double *)v64 = v5;
        *(double *)&v64[1] = v4;
        *(double *)v63 = v7;
        *(double *)&v63[1] = v6;
        *(_QWORD *)&v52 = v31 - v30;
        v53 = swift_allocObject();
        *(_QWORD *)(v53 + 16) = &v67;
        *(_OWORD *)(v53 + 24) = xmmword_184E387A0;
        *(_BYTE *)(v53 + 40) = 0;
        *(_QWORD *)(v53 + 48) = v64;
        *(_OWORD *)(v53 + 56) = xmmword_184E387A0;
        *(_BYTE *)(v53 + 72) = 0;
        v73 = &v65 + v32;
        v74 = v52;
        v75 = *(double *)&v32;
        v76 = COERCE_DOUBLE(v63);
        v77 = xmmword_184E387A0;
        v78 = 0x7FF8000000000000;
        v79 = 0;
        v80 = 1;
        v81 = 0;
        v82 = 1;
        v83 = sub_184AA333C;
        v84 = 0;
        v85 = sub_184A957E8;
        v86 = v53;
        swift_retain();
        swift_retain();
        swift_retain();
        sub_184A92384(0, 0, 1, 0, 1, 0, 1, (uint64_t)&v73);
        goto LABEL_52;
      }
      v42 = (_QWORD *)(v9 + 32);
      v43 = v10 + 32;
      v44 = *(_QWORD *)(v10 + 16);
      v61 = &v65 + v30;
      v62 = v42;
      *(_QWORD *)&v59 = v31 - v30;
      v45 = swift_allocObject();
      *(_QWORD *)(v45 + 16) = &v67;
      *(_OWORD *)(v45 + 24) = xmmword_184E387A0;
      *(_BYTE *)(v45 + 40) = 0;
      *(_QWORD *)(v45 + 48) = v8;
      *(_QWORD *)(v45 + 56) = v43;
      *(_QWORD *)(v45 + 64) = v44;
      *(_BYTE *)(v45 + 72) = 1;
      v73 = v61;
      v74 = v59;
      v75 = *(double *)&v32;
      v76 = *(double *)&v62;
      v77 = v41;
      v78 = 0x7FF8000000000000;
      v79 = 0;
      v80 = 1;
      v81 = 0;
      v82 = 1;
      v83 = sub_184AA333C;
      v84 = 0;
      v85 = sub_184A957E8;
      v86 = v45;
      swift_retain_n();
      swift_retain();
      swift_retain();
      swift_retain();
      sub_184A92384(0, 0, 1, 0, 1, 0, 1, (uint64_t)&v73);
    }
    swift_release();
LABEL_52:
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    result = swift_release();
    v54 = v72;
    v55 = v70;
    *v3 = v69;
    v3[1] = v55;
    v3[2] = v71;
    v3[3].i64[0] = v54;
  }
  return result;
}

uint64_t Region.symmetricDifference(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_184A943B0(a1, (uint64_t (*)(_OWORD *))Region.formSymmetricDifference(_:), a2);
}

uint64_t Region.formSymmetricDifference(_:)(uint64_t result, __n128 a2)
{
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  BOOL v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t (*v60)();
  int64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int64_t v73;
  int64_t v74;
  uint64_t v75;
  BOOL v76;
  unint64_t v77;
  int64_t v78;
  int64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  unint64_t v84;
  uint64_t (*v85)();
  int64_t v86;
  uint64_t v87;
  int64_t v88;
  uint64_t v89;
  BOOL v90;
  unint64_t v91;
  int64_t v92;
  int64_t v93;
  uint64_t v94;
  uint64_t (*v95)();
  uint64_t v96;
  uint64_t v97;
  int64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int64_t v113;
  uint64_t v114;
  uint64_t (*v115)();
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t (*v120)();
  int64_t v121;
  __int128 v122;
  int64_t v123;
  __int128 v124;
  int64_t v125;
  uint64_t (*v126)();
  int64_t v127;
  int64_t v128;
  int64_t v129;
  int64_t v130;
  int64_t v131;
  uint64_t (*v132)();
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double *v145;
  __int128 v146;
  uint64_t (*v147)();
  __int128 v148;
  uint64_t v149;
  int v150;
  char v151;
  int v152;
  char v153;
  uint64_t (*v154)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X8>);
  uint64_t v155;
  uint64_t (*v156)@<X0>(uint64_t *@<X0>, uint64_t@<X8>);
  uint64_t v157;
  uint64_t v158;

  v158 = *MEMORY[0x1E0C80C00];
  v4 = *(double *)result;
  v3 = *(double *)(result + 8);
  v6 = *(double *)(result + 16);
  v5 = *(double *)(result + 24);
  v8 = *(_QWORD *)(result + 32);
  v7 = *(_QWORD *)(result + 40);
  v9 = *(_QWORD *)(result + 48);
  v11 = *(double *)v2;
  v10 = *(double *)(v2 + 8);
  v13 = *(double *)(v2 + 16);
  v12 = *(double *)(v2 + 24);
  v14 = *(_QWORD *)(v2 + 32);
  v15 = *(_QWORD *)v2 & 0x7FF0000000000000;
  v16 = *(_QWORD *)v2 & 0xFFFFFFFFFFFFFLL;
  if (v15 == 0x7FF0000000000000 && v16)
  {
    if ((~*(_QWORD *)&v4 & 0x7FF0000000000000) != 0 || (*(_QWORD *)result & 0xFFFFFFFFFFFFFLL) == 0)
      goto LABEL_5;
    return result;
  }
  v17 = *(_QWORD *)(v14 + 16);
  v18 = *(double *)result;
  v19 = *(_QWORD *)&v4 & 0x7FF0000000000000;
  if ((*(_QWORD *)&v4 & 0x7FF0000000000000) != 0x7FF0000000000000)
  {
LABEL_12:
    if (v5 < v13)
    {
      v21 = (*(_QWORD *)&v18 & 0xFFFFFFFFFFFFFLL) != 0 && v19 == 0x7FF0000000000000;
      v22 = *(_QWORD *)(v8 + 16);
      if (!v21 && !v22)
      {
        v143 = *(double *)result;
        v144 = v3;
        v141 = v6;
        v142 = v5;
        v23 = swift_allocObject();
        *(_QWORD *)(v23 + 16) = &v143;
        *(_OWORD *)(v23 + 24) = xmmword_184E387A0;
        *(_BYTE *)(v23 + 40) = 0;
        v145 = &v141;
        v146 = xmmword_184E387A0;
        v147 = sub_184A957B4;
        *(_QWORD *)&v148 = v23;
        v24 = 0;
        v25 = 0;
LABEL_29:
        sub_184A91384(v24, v25, 0, 0, 1, 0, 1, (uint64_t *)&v145);
        return swift_release();
      }
      v30 = *(_QWORD *)(v9 + 16);
      v31 = swift_allocObject();
      *(_QWORD *)(v31 + 16) = v7;
      *(_QWORD *)(v31 + 24) = v9 + 32;
      *(_QWORD *)(v31 + 32) = v30;
      *(_BYTE *)(v31 + 40) = 1;
      v145 = (double *)(v8 + 32);
      v146 = v22;
      v147 = sub_184A957B4;
      *(_QWORD *)&v148 = v31;
      swift_retain_n();
      v32 = 0;
      v33 = 0;
      goto LABEL_40;
    }
    if (v12 < v6)
    {
      if (v17)
        v26 = *(_QWORD *)(v14 + 16);
      else
        v26 = 2;
      v27 = (*(_QWORD *)&v18 & 0xFFFFFFFFFFFFFLL) != 0 && v19 == 0x7FF0000000000000;
      v28 = *(_QWORD *)(v8 + 16);
      if (!v27 && !v28)
      {
        v143 = *(double *)result;
        v144 = v3;
        v141 = v6;
        v142 = v5;
        v29 = swift_allocObject();
        *(_QWORD *)(v29 + 16) = &v143;
        *(_OWORD *)(v29 + 24) = xmmword_184E387A0;
        *(_BYTE *)(v29 + 40) = 0;
        v145 = &v141;
        v146 = xmmword_184E387A0;
        v147 = sub_184A957B4;
        *(_QWORD *)&v148 = v29;
        v24 = v26;
        v25 = v26;
        goto LABEL_29;
      }
      v49 = *(_QWORD *)(v9 + 16);
      v50 = swift_allocObject();
      *(_QWORD *)(v50 + 16) = v7;
      *(_QWORD *)(v50 + 24) = v9 + 32;
      *(_QWORD *)(v50 + 32) = v49;
      *(_BYTE *)(v50 + 40) = 1;
      v145 = (double *)(v8 + 32);
      v146 = v28;
      v147 = sub_184A957B4;
      *(_QWORD *)&v148 = v50;
      swift_retain_n();
      v32 = v26;
      v33 = v26;
LABEL_40:
      sub_184A91384(v32, v33, 0, 0, 1, 0, 1, (uint64_t *)&v145);
      swift_release();
      return swift_release();
    }
    if (v10 < v4)
    {
      v34 = v17 == 0;
      v35 = *(_QWORD *)(v2 + 40);
      v36 = *(_QWORD *)(v2 + 48);
      v145 = *(double **)v2;
      *(double *)&v146 = v10;
      *((double *)&v146 + 1) = v13;
      v147 = *(uint64_t (**)())&v12;
      *(_QWORD *)&v148 = v14;
      *((_QWORD *)&v148 + 1) = v35;
      v133 = v35;
      v149 = v36;
      a2.n128_f64[0] = v6;
      v37 = sub_184A96E0C(v34, a2, v5);
      v39 = v37;
      if (*(_QWORD *)(v14 + 16))
      {
        v40 = (*(_QWORD *)&v18 & 0xFFFFFFFFFFFFFLL) != 0 && v19 == 0x7FF0000000000000;
        v41 = v14 + 32;
        v42 = v36 + 32;
        v43 = *(_QWORD *)(v36 + 16);
        v44 = *(_QWORD *)(v8 + 16);
        if (!v40 && !v44)
        {
          v143 = v4;
          v144 = v3;
          v45 = v41 + 8 * v37;
          v46 = v38 - v37;
          v141 = v6;
          v142 = v5;
          v47 = v38;
          v48 = swift_allocObject();
          *(_QWORD *)(v48 + 16) = v133;
          *(_QWORD *)(v48 + 24) = v42;
          *(_QWORD *)(v48 + 32) = v43;
          *(_BYTE *)(v48 + 40) = 1;
          *(_QWORD *)(v48 + 48) = &v143;
          *(_OWORD *)(v48 + 56) = xmmword_184E387A0;
          *(_BYTE *)(v48 + 72) = 0;
          v145 = (double *)v45;
          *(_QWORD *)&v146 = v46;
          *((_QWORD *)&v146 + 1) = v39;
          v147 = (uint64_t (*)())&v141;
          v148 = xmmword_184E387A0;
          v149 = 0x7FF8000000000000;
          v150 = 0;
          v151 = 1;
          v152 = 0;
          v153 = 1;
          v154 = sub_184AA333C;
          v155 = 0;
          v156 = (uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))sub_184A95758;
          v157 = v48;
          swift_retain_n();
          swift_retain();
          swift_retain();
          sub_184A91B3C(v39, v47, 0, 0, 1, *(uint64_t *)&v3, 0, (uint64_t)&v145);
          swift_release();
          goto LABEL_85;
        }
        v117 = v9 + 32;
        v120 = (uint64_t (*)())(v8 + 32);
        v113 = v38 - v37;
        v114 = *(_QWORD *)(v9 + 16);
        v81 = v41 + 8 * v37;
        v125 = v38;
        v82 = swift_allocObject();
        *(_QWORD *)(v82 + 16) = v133;
        *(_QWORD *)(v82 + 24) = v42;
        *(_QWORD *)(v82 + 32) = v43;
        *(_BYTE *)(v82 + 40) = 1;
        *(_QWORD *)(v82 + 48) = v7;
        *(_QWORD *)(v82 + 56) = v117;
        *(_QWORD *)(v82 + 64) = v114;
        *(_BYTE *)(v82 + 72) = 1;
        v145 = (double *)v81;
        *(_QWORD *)&v146 = v113;
        *((_QWORD *)&v146 + 1) = v39;
        v147 = v120;
        v148 = v44;
        v149 = 0x7FF8000000000000;
        v150 = 0;
        v151 = 1;
        v152 = 0;
        v153 = 1;
        v154 = sub_184AA333C;
        v155 = 0;
        v156 = (uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))sub_184A95758;
        v157 = v82;
        swift_retain_n();
        swift_retain_n();
        swift_retain();
        swift_retain();
        sub_184A91B3C(v39, v125, 0, 0, 1, *(uint64_t *)&v3, 0, (uint64_t)&v145);
        swift_release();
      }
      else
      {
        v76 = (*(_QWORD *)&v18 & 0xFFFFFFFFFFFFFLL) != 0 && v19 == 0x7FF0000000000000;
        v143 = v11;
        v144 = v10;
        v141 = v13;
        v142 = v12;
        v77 = *(_QWORD *)(v8 + 16);
        if (!v76 && !v77)
        {
          v139 = v4;
          v140 = v3;
          v137 = v6;
          v138 = v5;
          v78 = v38 - v37;
          v79 = v38;
          v80 = swift_allocObject();
          *(_QWORD *)(v80 + 16) = &v143;
          *(_OWORD *)(v80 + 24) = xmmword_184E387A0;
          *(_BYTE *)(v80 + 40) = 0;
          *(_QWORD *)(v80 + 48) = &v139;
          *(_OWORD *)(v80 + 56) = xmmword_184E387A0;
          *(_BYTE *)(v80 + 72) = 0;
          v145 = &v141 + v39;
          *(_QWORD *)&v146 = v78;
          *((_QWORD *)&v146 + 1) = v39;
          v147 = (uint64_t (*)())&v137;
          v148 = xmmword_184E387A0;
          v149 = 0x7FF8000000000000;
          v150 = 0;
          v151 = 1;
          v152 = 0;
          v153 = 1;
          v154 = sub_184AA333C;
          v155 = 0;
          v156 = (uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))sub_184A95758;
          v157 = v80;
          swift_retain();
          swift_retain();
          swift_retain();
          sub_184A91B3C(v39, v79, 0, 0, 1, *(uint64_t *)&v3, 0, (uint64_t)&v145);
          goto LABEL_85;
        }
        v95 = (uint64_t (*)())(v8 + 32);
        v96 = v9 + 32;
        v97 = *(_QWORD *)(v9 + 16);
        v121 = v38 - v37;
        v126 = v95;
        v98 = v38;
        v99 = swift_allocObject();
        *(_QWORD *)(v99 + 16) = &v143;
        *(_OWORD *)(v99 + 24) = xmmword_184E387A0;
        *(_BYTE *)(v99 + 40) = 0;
        *(_QWORD *)(v99 + 48) = v7;
        *(_QWORD *)(v99 + 56) = v96;
        *(_QWORD *)(v99 + 64) = v97;
        *(_BYTE *)(v99 + 72) = 1;
        v145 = &v141 + v39;
        *(_QWORD *)&v146 = v121;
        *((_QWORD *)&v146 + 1) = v39;
        v147 = v126;
        v148 = v77;
        v149 = 0x7FF8000000000000;
        v150 = 0;
        v151 = 1;
        v152 = 0;
        v153 = 1;
        v154 = sub_184AA333C;
        v155 = 0;
        v156 = (uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))sub_184A95758;
        v157 = v99;
        swift_retain_n();
        swift_retain();
        swift_retain();
        swift_retain();
        sub_184A91B3C(v39, v98, 0, 0, 1, *(uint64_t *)&v3, 0, (uint64_t)&v145);
      }
      swift_release();
      goto LABEL_85;
    }
    v52 = *(_QWORD *)(v2 + 40);
    v51 = *(_QWORD *)(v2 + 48);
    if (v3 < v11)
    {
      v145 = *(double **)v2;
      *(double *)&v146 = v10;
      *((double *)&v146 + 1) = v13;
      v147 = *(uint64_t (**)())&v12;
      *(_QWORD *)&v148 = v14;
      *((_QWORD *)&v148 + 1) = v52;
      v149 = v51;
      a2.n128_f64[0] = v6;
      v53 = sub_184A96E0C(v17 == 0, a2, v5);
      if (*(_QWORD *)(v14 + 16))
      {
        v55 = (*(_QWORD *)&v18 & 0xFFFFFFFFFFFFFLL) != 0 && v19 == 0x7FF0000000000000;
        v56 = v14 + 32;
        v57 = v51 + 32;
        v128 = v54;
        v58 = *(_QWORD *)(v51 + 16);
        v59 = *(_QWORD *)(v8 + 16);
        if (v55 || v59)
        {
          v100 = v8 + 32;
          v101 = v9 + 32;
          v135 = v52;
          v102 = *(_QWORD *)(v9 + 16);
          v118 = v100;
          *(_QWORD *)&v122 = v54 - v53;
          v115 = (uint64_t (*)())(v56 + 8 * v53);
          *((_QWORD *)&v122 + 1) = v53;
          v103 = swift_allocObject();
          *(_QWORD *)(v103 + 16) = v7;
          *(_QWORD *)(v103 + 24) = v101;
          *(_QWORD *)(v103 + 32) = v102;
          *(_BYTE *)(v103 + 40) = 1;
          *(_QWORD *)(v103 + 48) = v135;
          *(_QWORD *)(v103 + 56) = v57;
          *(_QWORD *)(v103 + 64) = v58;
          *(_BYTE *)(v103 + 72) = 1;
          v145 = (double *)v118;
          v146 = v59;
          v147 = v115;
          v148 = v122;
          v149 = 0x7FF8000000000000;
          v150 = 0;
          v151 = 1;
          v152 = 0;
          v153 = 1;
          v154 = sub_184AA333C;
          v155 = 0;
          v156 = (uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))sub_184A95758;
          v157 = v103;
          swift_retain_n();
          swift_retain_n();
          swift_retain();
          swift_retain();
          sub_184A91B3C(*((uint64_t *)&v122 + 1), v128, 0, *(uint64_t *)&v4, 0, 0, 1, (uint64_t)&v145);
          swift_release();
          swift_release();
        }
        else
        {
          v143 = v4;
          v144 = v3;
          v60 = (uint64_t (*)())(v56 + 8 * v53);
          v61 = v54 - v53;
          v141 = v6;
          v142 = v5;
          v62 = v53;
          v63 = swift_allocObject();
          *(_QWORD *)(v63 + 16) = &v143;
          *(_OWORD *)(v63 + 24) = xmmword_184E387A0;
          *(_BYTE *)(v63 + 40) = 0;
          *(_QWORD *)(v63 + 48) = v52;
          *(_QWORD *)(v63 + 56) = v57;
          *(_QWORD *)(v63 + 64) = v58;
          *(_BYTE *)(v63 + 72) = 1;
          v145 = &v141;
          v146 = xmmword_184E387A0;
          v147 = v60;
          *(_QWORD *)&v148 = v61;
          *((_QWORD *)&v148 + 1) = v62;
          v149 = 0x7FF8000000000000;
          v150 = 0;
          v151 = 1;
          v152 = 0;
          v153 = 1;
          v154 = sub_184AA333C;
          v155 = 0;
          v156 = (uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))sub_184A95758;
          v157 = v63;
          swift_retain_n();
          swift_retain();
          swift_retain();
          sub_184A91B3C(v62, v128, 0, *(uint64_t *)&v4, 0, 0, 1, (uint64_t)&v145);
          swift_release();
        }
        swift_release();
      }
      else
      {
        v83 = (*(_QWORD *)&v18 & 0xFFFFFFFFFFFFFLL) != 0 && v19 == 0x7FF0000000000000;
        v143 = v11;
        v144 = v10;
        v141 = v13;
        v142 = v12;
        v84 = *(_QWORD *)(v8 + 16);
        if (v83 || v84)
        {
          v106 = v8 + 32;
          v107 = v9 + 32;
          v108 = *(_QWORD *)(v9 + 16);
          v132 = (uint64_t (*)())(&v141 + v53);
          v136 = v106;
          *(_QWORD *)&v124 = v54 - v53;
          *((_QWORD *)&v124 + 1) = v53;
          v130 = v54;
          v109 = swift_allocObject();
          *(_QWORD *)(v109 + 16) = v7;
          *(_QWORD *)(v109 + 24) = v107;
          *(_QWORD *)(v109 + 32) = v108;
          *(_BYTE *)(v109 + 40) = 1;
          *(_QWORD *)(v109 + 48) = &v143;
          *(_OWORD *)(v109 + 56) = xmmword_184E387A0;
          *(_BYTE *)(v109 + 72) = 0;
          v145 = (double *)v136;
          v146 = v84;
          v147 = v132;
          v148 = v124;
          v149 = 0x7FF8000000000000;
          v150 = 0;
          v151 = 1;
          v152 = 0;
          v153 = 1;
          v154 = sub_184AA333C;
          v155 = 0;
          v156 = (uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))sub_184A95758;
          v157 = v109;
          swift_retain_n();
          swift_retain();
          swift_retain();
          swift_retain();
          sub_184A91B3C(*((uint64_t *)&v124 + 1), v130, 0, *(uint64_t *)&v4, 0, 0, 1, (uint64_t)&v145);
          swift_release();
        }
        else
        {
          v139 = v4;
          v140 = v3;
          v137 = v6;
          v138 = v5;
          v85 = (uint64_t (*)())(&v141 + v53);
          v86 = v54 - v53;
          v87 = v53;
          v88 = v54;
          v89 = swift_allocObject();
          *(_QWORD *)(v89 + 16) = &v139;
          *(_OWORD *)(v89 + 24) = xmmword_184E387A0;
          *(_BYTE *)(v89 + 40) = 0;
          *(_QWORD *)(v89 + 48) = &v143;
          *(_OWORD *)(v89 + 56) = xmmword_184E387A0;
          *(_BYTE *)(v89 + 72) = 0;
          v145 = &v137;
          v146 = xmmword_184E387A0;
          v147 = v85;
          *(_QWORD *)&v148 = v86;
          *((_QWORD *)&v148 + 1) = v87;
          v149 = 0x7FF8000000000000;
          v150 = 0;
          v151 = 1;
          v152 = 0;
          v153 = 1;
          v154 = sub_184AA333C;
          v155 = 0;
          v156 = (uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))sub_184A95758;
          v157 = v89;
          swift_retain();
          swift_retain();
          swift_retain();
          sub_184A91B3C(v87, v88, 0, *(uint64_t *)&v4, 0, 0, 1, (uint64_t)&v145);
        }
        swift_release();
      }
      swift_release();
      goto LABEL_86;
    }
    v145 = *(double **)v2;
    *(double *)&v146 = v10;
    *((double *)&v146 + 1) = v13;
    v147 = *(uint64_t (**)())&v12;
    *(_QWORD *)&v148 = v14;
    *((_QWORD *)&v148 + 1) = v52;
    v134 = v52;
    v149 = v51;
    a2.n128_f64[0] = v6;
    v64 = sub_184A96E0C(v17 == 0, a2, v5);
    v66 = v64;
    if (*(_QWORD *)(v14 + 16))
    {
      v67 = (*(_QWORD *)&v18 & 0xFFFFFFFFFFFFFLL) != 0 && v19 == 0x7FF0000000000000;
      v68 = v14 + 32;
      v69 = v51 + 32;
      v70 = *(_QWORD *)(v51 + 16);
      v71 = *(_QWORD *)(v8 + 16);
      if (v67 || v71)
      {
        v116 = *(_QWORD *)(v9 + 16);
        v119 = v9 + 32;
        v123 = v65 - v64;
        v104 = v68 + 8 * v64;
        v129 = v65;
        v105 = swift_allocObject();
        *(_QWORD *)(v105 + 16) = v134;
        *(_QWORD *)(v105 + 24) = v69;
        *(_QWORD *)(v105 + 32) = v70;
        *(_BYTE *)(v105 + 40) = 1;
        *(_QWORD *)(v105 + 48) = v7;
        *(_QWORD *)(v105 + 56) = v119;
        *(_QWORD *)(v105 + 64) = v116;
        *(_BYTE *)(v105 + 72) = 1;
        v145 = (double *)v104;
        *(_QWORD *)&v146 = v123;
        *((_QWORD *)&v146 + 1) = v66;
        v147 = (uint64_t (*)())(v8 + 32);
        v148 = v71;
        v149 = 0x7FF8000000000000;
        v150 = 0;
        v151 = 1;
        v152 = 0;
        v153 = 1;
        v154 = sub_184AA333C;
        v155 = 0;
        v156 = sub_184A9581C;
        v157 = v105;
        swift_retain_n();
        swift_retain_n();
        swift_retain();
        swift_retain();
        sub_184A92384(v66, v129, 1, 0, 1, 0, 1, (uint64_t)&v145);
        swift_release();
        swift_release();
      }
      else
      {
        v143 = v4;
        v144 = v3;
        v72 = v68 + 8 * v64;
        v73 = v65 - v64;
        v141 = v6;
        v142 = v5;
        v74 = v65;
        v75 = swift_allocObject();
        *(_QWORD *)(v75 + 16) = v134;
        *(_QWORD *)(v75 + 24) = v69;
        *(_QWORD *)(v75 + 32) = v70;
        *(_BYTE *)(v75 + 40) = 1;
        *(_QWORD *)(v75 + 48) = &v143;
        *(_OWORD *)(v75 + 56) = xmmword_184E387A0;
        *(_BYTE *)(v75 + 72) = 0;
        v145 = (double *)v72;
        *(_QWORD *)&v146 = v73;
        *((_QWORD *)&v146 + 1) = v66;
        v147 = (uint64_t (*)())&v141;
        v148 = xmmword_184E387A0;
        v149 = 0x7FF8000000000000;
        v150 = 0;
        v151 = 1;
        v152 = 0;
        v153 = 1;
        v154 = sub_184AA333C;
        v155 = 0;
        v156 = sub_184A9581C;
        v157 = v75;
        swift_retain_n();
        swift_retain();
        swift_retain();
        sub_184A92384(v66, v74, 1, 0, 1, 0, 1, (uint64_t)&v145);
        swift_release();
      }
      swift_release();
      swift_release();
      goto LABEL_86;
    }
    v90 = (*(_QWORD *)&v18 & 0xFFFFFFFFFFFFFLL) != 0 && v19 == 0x7FF0000000000000;
    v143 = v11;
    v144 = v10;
    v141 = v13;
    v142 = v12;
    v91 = *(_QWORD *)(v8 + 16);
    if (v90 || v91)
    {
      v131 = v65;
      v110 = v9 + 32;
      v111 = *(_QWORD *)(v9 + 16);
      v127 = v65 - v64;
      v112 = swift_allocObject();
      *(_QWORD *)(v112 + 16) = &v143;
      *(_OWORD *)(v112 + 24) = xmmword_184E387A0;
      *(_BYTE *)(v112 + 40) = 0;
      *(_QWORD *)(v112 + 48) = v7;
      *(_QWORD *)(v112 + 56) = v110;
      *(_QWORD *)(v112 + 64) = v111;
      *(_BYTE *)(v112 + 72) = 1;
      v145 = &v141 + v66;
      *(_QWORD *)&v146 = v127;
      *((_QWORD *)&v146 + 1) = v66;
      v147 = (uint64_t (*)())(v8 + 32);
      v148 = v91;
      v149 = 0x7FF8000000000000;
      v150 = 0;
      v151 = 1;
      v152 = 0;
      v153 = 1;
      v154 = sub_184AA333C;
      v155 = 0;
      v156 = sub_184A9581C;
      v157 = v112;
      swift_retain_n();
      swift_retain();
      swift_retain();
      swift_retain();
      sub_184A92384(v66, v131, 1, 0, 1, 0, 1, (uint64_t)&v145);
      swift_release();
    }
    else
    {
      v139 = v4;
      v140 = v3;
      v137 = v6;
      v138 = v5;
      v92 = v65 - v64;
      v93 = v65;
      v94 = swift_allocObject();
      *(_QWORD *)(v94 + 16) = &v143;
      *(_OWORD *)(v94 + 24) = xmmword_184E387A0;
      *(_BYTE *)(v94 + 40) = 0;
      *(_QWORD *)(v94 + 48) = &v139;
      *(_OWORD *)(v94 + 56) = xmmword_184E387A0;
      *(_BYTE *)(v94 + 72) = 0;
      v145 = &v141 + v66;
      *(_QWORD *)&v146 = v92;
      *((_QWORD *)&v146 + 1) = v66;
      v147 = (uint64_t (*)())&v137;
      v148 = xmmword_184E387A0;
      v149 = 0x7FF8000000000000;
      v150 = 0;
      v151 = 1;
      v152 = 0;
      v153 = 1;
      v154 = sub_184AA333C;
      v155 = 0;
      v156 = sub_184A9581C;
      v157 = v94;
      swift_retain();
      swift_retain();
      swift_retain();
      sub_184A92384(v66, v93, 1, 0, 1, 0, 1, (uint64_t)&v145);
    }
LABEL_85:
    swift_release();
    swift_release();
LABEL_86:
    swift_release();
    return swift_release();
  }
  v20 = *(_QWORD *)&v18 & 0xFFFFFFFFFFFFFLL;
  if (v15 != 0x7FF0000000000000 || !v16)
  {
    if (v20)
      return result;
    goto LABEL_12;
  }
  if (!v20)
  {
LABEL_5:
    swift_retain();
    swift_retain();
    swift_retain();
    swift_release();
    swift_release();
    result = swift_release();
    *(double *)v2 = v4;
    *(double *)(v2 + 8) = v3;
    *(double *)(v2 + 16) = v6;
    *(double *)(v2 + 24) = v5;
    *(_QWORD *)(v2 + 32) = v8;
    *(_QWORD *)(v2 + 40) = v7;
    *(_QWORD *)(v2 + 48) = v9;
  }
  return result;
}

BOOL Region.insert(_:)(float64_t *a1, double *a2)
{
  uint64_t v2;
  uint64_t v3;
  float64_t v5;
  float64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __n128 v16;
  float64_t v17;
  float64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __n128 v25;
  float64_t v27;
  float64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float64x2_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v3 = v2;
  v6 = *a2;
  v5 = a2[1];
  v7 = *((_QWORD *)a2 + 2);
  v8 = *((_QWORD *)a2 + 3);
  v9 = *((_QWORD *)a2 + 4);
  v10 = *((_QWORD *)a2 + 5);
  v11 = *((_QWORD *)a2 + 6);
  v12 = *(_QWORD *)(v2 + 32);
  v13 = *(_QWORD *)(v2 + 40);
  v14 = *(_QWORD *)(v3 + 48);
  v15 = *(_OWORD *)(v3 + 16);
  v34 = *(float64x2_t *)v3;
  v35 = v15;
  v36 = v12;
  v37 = v13;
  v38 = v14;
  v27 = v6;
  v28 = v5;
  v29 = v7;
  v30 = v8;
  v31 = v9;
  v32 = v10;
  v33 = v11;
  swift_retain();
  swift_retain();
  swift_retain();
  Region.formIntersection(_:)((uint64_t)&v27, v16);
  v17 = v34.f64[1];
  v18 = v34.f64[0];
  v20 = *((_QWORD *)&v35 + 1);
  v19 = v35;
  v21 = v36;
  v22 = v37;
  v23 = v38;
  v27 = v6;
  v28 = v5;
  v29 = v7;
  v30 = v8;
  v31 = v9;
  v32 = v10;
  v33 = v11;
  v24 = _s12CoreGraphics6RegionV2eeoiySbAC_ACtFZ_0(&v34, (uint64_t)&v27);
  if ((v24 & 1) != 0)
  {
    *a1 = v18;
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    v34.f64[0] = v6;
    v34.f64[1] = v5;
    *(_QWORD *)&v35 = v7;
    *((_QWORD *)&v35 + 1) = v8;
    v36 = v9;
    v37 = v10;
    v38 = v11;
    Region.formUnion(_:)((uint64_t)&v34, v25);
    *a1 = v6;
    swift_retain();
    swift_retain();
    swift_retain();
    v17 = v5;
    v19 = v7;
    v20 = v8;
    v21 = v9;
    v22 = v10;
    v23 = v11;
  }
  a1[1] = v17;
  *((_QWORD *)a1 + 2) = v19;
  *((_QWORD *)a1 + 3) = v20;
  *((_QWORD *)a1 + 4) = v21;
  *((_QWORD *)a1 + 5) = v22;
  *((_QWORD *)a1 + 6) = v23;
  return (v24 & 1) == 0;
}

uint64_t Region.remove(_:)@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  __n128 v16;
  __n128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;
  __n128 v23;
  __int128 v24;
  __int128 v25;
  __n128 v26;
  _QWORD v27[7];
  __n128 v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;

  v3 = v2;
  v5 = *a1;
  v6 = a1[1];
  v7 = a1[2];
  v8 = a1[3];
  v9 = a1[4];
  v10 = a1[5];
  v11 = a1[6];
  v12 = *(_QWORD *)(v2 + 32);
  v13 = *(_QWORD *)(v2 + 40);
  v14 = *(_QWORD *)(v3 + 48);
  v15 = *(_OWORD *)(v3 + 16);
  v28 = *(__n128 *)v3;
  v29 = v15;
  v30 = v12;
  v31 = v13;
  v32 = v14;
  v27[0] = v5;
  v27[1] = v6;
  v27[2] = v7;
  v27[3] = v8;
  v27[4] = v9;
  v27[5] = v10;
  v27[6] = v11;
  swift_retain();
  swift_retain();
  swift_retain();
  Region.formIntersection(_:)((uint64_t)v27, v16);
  v17 = v28;
  v18 = v29;
  v19 = v30;
  v20 = v31;
  v21 = v32;
  if ((~v28.n128_u64[0] & 0x7FF0000000000000) != 0 || (v28.n128_u64[0] & 0xFFFFFFFFFFFFFLL) == 0)
  {
    v28.n128_u64[0] = v5;
    v28.n128_u64[1] = v6;
    *(_QWORD *)&v29 = v7;
    *((_QWORD *)&v29 + 1) = v8;
    v30 = v9;
    v31 = v10;
    v32 = v11;
    v25 = v18;
    v26 = v17;
    result = Region.subtract(_:)((uint64_t)&v28, v17);
    v24 = v25;
    v23 = v26;
  }
  else
  {
    swift_release();
    swift_release();
    result = swift_release();
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v23 = 0uLL;
    v24 = 0uLL;
  }
  *(__n128 *)a2 = v23;
  *(_OWORD *)(a2 + 16) = v24;
  *(_QWORD *)(a2 + 32) = v19;
  *(_QWORD *)(a2 + 40) = v20;
  *(_QWORD *)(a2 + 48) = v21;
  return result;
}

BOOL Region.isEmpty.getter()
{
  _QWORD *v0;

  return (*v0 & 0xFFFFFFFFFFFFFLL) != 0 && (~*v0 & 0x7FF0000000000000) == 0;
}

uint64_t Region.subtract(_:)(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  char v21;
  BOOL v22;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  double v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  double *v44;
  int64_t v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  double v56;
  double *v57;
  _QWORD *v58;
  uint64_t v59;
  int64_t v60;
  _QWORD v61[2];
  _QWORD v62[2];
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  char v74;
  int v75;
  char v76;
  uint64_t (*v77)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X8>);
  uint64_t v78;
  uint64_t (*v79)@<X0>(uint64_t *@<X0>, uint64_t@<X8>);
  uint64_t v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v4 = *(double *)a1;
  v5 = *(double *)v2;
  v6 = *(_QWORD *)(v2 + 32);
  v7 = *(_QWORD *)v2 & 0x7FF0000000000000;
  v8 = *(_QWORD *)v2 & 0xFFFFFFFFFFFFFLL;
  if (v8)
    v9 = v7 == 0x7FF0000000000000;
  else
    v9 = 0;
  result = !v9 && *(_QWORD *)(v6 + 16) == 0;
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  v14 = *(double *)(a1 + 8);
  v13 = *(double *)(a1 + 16);
  v15 = *(double *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(double *)(v2 + 8);
  v18 = *(double *)(v2 + 16);
  v19 = *(_QWORD *)&v4 & 0x7FF0000000000000;
  v20 = *(double *)(v2 + 24);
  if ((*(_QWORD *)&v4 & 0x7FF0000000000000) == 0x7FF0000000000000)
  {
    if (v7 == 0x7FF0000000000000 && v8 || (*(_QWORD *)&v4 & 0xFFFFFFFFFFFFFLL) != 0)
      return result;
    v22 = v15 < v18 || v20 < v13;
  }
  else
  {
    v21 = v15 < v18 || v9;
    if ((v21 & 1) != 0)
      return result;
    v22 = v20 < v13;
  }
  if (!v22 && v17 >= v4 && v14 >= v5)
  {
    v59 = v11;
    v25 = *(_QWORD *)(v2 + 40);
    v26 = *(_QWORD *)(v2 + 48);
    v67 = *(double *)v2;
    v68 = v17;
    v69 = v18;
    v70 = v20;
    *(_QWORD *)&v71 = v6;
    *((_QWORD *)&v71 + 1) = v25;
    v72 = v26;
    a2.n128_f64[0] = v13;
    v27 = sub_184A96E0C(result, a2, v15);
    v60 = v28;
    if (v9 || *(_QWORD *)(v6 + 16))
    {
      v29 = (*(_QWORD *)&v4 & 0xFFFFFFFFFFFFFLL) != 0 && v19 == 0x7FF0000000000000;
      v30 = v6 + 32;
      v31 = v26 + 32;
      v32 = *(_QWORD *)(v26 + 16);
      v33 = *(_QWORD *)(v16 + 16);
      if (!v29 && !v33)
      {
        v65 = v4;
        v66 = v14;
        *(_QWORD *)&v34 = v30 + 8 * v27;
        *(_QWORD *)&v35 = v28 - v27;
        v63 = v13;
        v64 = v15;
        v36 = v27;
        v37 = swift_allocObject();
        *(_QWORD *)(v37 + 16) = v25;
        *(_QWORD *)(v37 + 24) = v31;
        *(_QWORD *)(v37 + 32) = v32;
        *(_BYTE *)(v37 + 40) = 1;
        *(_QWORD *)(v37 + 48) = &v65;
        *(_OWORD *)(v37 + 56) = xmmword_184E387A0;
        *(_BYTE *)(v37 + 72) = 0;
        v67 = v34;
        v68 = v35;
        v69 = *(double *)&v36;
        v70 = COERCE_DOUBLE(&v63);
        v71 = xmmword_184E387A0;
        v72 = 0x7FF8000000000000;
        v73 = 0;
        v74 = 1;
        v75 = 0;
        v76 = 1;
        v77 = sub_184AA333C;
        v78 = 0;
        v79 = sub_184A96388;
        v80 = v37;
        swift_retain_n();
        swift_retain();
        swift_retain();
        sub_184A92384(v36, v60, 1, 0, 1, 0, 1, (uint64_t)&v67);
        swift_release();
LABEL_36:
        swift_release();
        swift_release();
        swift_release();
        return swift_release();
      }
      v38 = *(_QWORD *)(v12 + 16);
      v54 = v12 + 32;
      *(_QWORD *)&v55 = v28 - v27;
      *(_QWORD *)&v39 = v30 + 8 * v27;
      v40 = v27;
      v41 = swift_allocObject();
      *(_QWORD *)(v41 + 16) = v25;
      *(_QWORD *)(v41 + 24) = v31;
      *(_QWORD *)(v41 + 32) = v32;
      *(_BYTE *)(v41 + 40) = 1;
      *(_QWORD *)(v41 + 48) = v59;
      *(_QWORD *)(v41 + 56) = v54;
      *(_QWORD *)(v41 + 64) = v38;
      *(_BYTE *)(v41 + 72) = 1;
      v67 = v39;
      v68 = v55;
      v69 = *(double *)&v40;
      *(_QWORD *)&v70 = v16 + 32;
      v71 = v33;
      v72 = 0x7FF8000000000000;
      v73 = 0;
      v74 = 1;
      v75 = 0;
      v76 = 1;
      v77 = sub_184AA333C;
      v78 = 0;
      v79 = sub_184A96388;
      v80 = v41;
      swift_retain_n();
      swift_retain_n();
      swift_retain();
      swift_retain();
      sub_184A92384(v40, v60, 1, 0, 1, 0, 1, (uint64_t)&v67);
      swift_release();
    }
    else
    {
      v42 = (*(_QWORD *)&v4 & 0xFFFFFFFFFFFFFLL) != 0 && v19 == 0x7FF0000000000000;
      v65 = v5;
      v66 = v17;
      v63 = v18;
      v64 = v20;
      v43 = *(_QWORD *)(v16 + 16);
      if (!v42 && !v43)
      {
        *(double *)v62 = v4;
        *(double *)&v62[1] = v14;
        *(double *)v61 = v13;
        *(double *)&v61[1] = v15;
        v44 = &v63 + v27;
        v45 = v28;
        *(_QWORD *)&v46 = v28 - v27;
        v47 = v27;
        v48 = swift_allocObject();
        *(_QWORD *)(v48 + 16) = &v65;
        *(_OWORD *)(v48 + 24) = xmmword_184E387A0;
        *(_BYTE *)(v48 + 40) = 0;
        *(_QWORD *)(v48 + 48) = v62;
        *(_OWORD *)(v48 + 56) = xmmword_184E387A0;
        *(_BYTE *)(v48 + 72) = 0;
        v67 = *(double *)&v44;
        v68 = v46;
        v69 = *(double *)&v47;
        v70 = COERCE_DOUBLE(v61);
        v71 = xmmword_184E387A0;
        v72 = 0x7FF8000000000000;
        v73 = 0;
        v74 = 1;
        v75 = 0;
        v76 = 1;
        v77 = sub_184AA333C;
        v78 = 0;
        v79 = sub_184A96388;
        v80 = v48;
        swift_retain();
        swift_retain();
        swift_retain();
        sub_184A92384(v47, v45, 1, 0, 1, 0, 1, (uint64_t)&v67);
        goto LABEL_36;
      }
      v49 = (_QWORD *)(v16 + 32);
      v50 = v12 + 32;
      v51 = *(_QWORD *)(v12 + 16);
      v57 = &v63 + v27;
      v58 = v49;
      *(_QWORD *)&v56 = v28 - v27;
      v52 = v27;
      v53 = swift_allocObject();
      *(_QWORD *)(v53 + 16) = &v65;
      *(_OWORD *)(v53 + 24) = xmmword_184E387A0;
      *(_BYTE *)(v53 + 40) = 0;
      *(_QWORD *)(v53 + 48) = v59;
      *(_QWORD *)(v53 + 56) = v50;
      *(_QWORD *)(v53 + 64) = v51;
      *(_BYTE *)(v53 + 72) = 1;
      v67 = *(double *)&v57;
      v68 = v56;
      v69 = *(double *)&v52;
      v70 = *(double *)&v58;
      v71 = v43;
      v72 = 0x7FF8000000000000;
      v73 = 0;
      v74 = 1;
      v75 = 0;
      v76 = 1;
      v77 = sub_184AA333C;
      v78 = 0;
      v79 = sub_184A96388;
      v80 = v53;
      swift_retain_n();
      swift_retain();
      swift_retain();
      swift_retain();
      sub_184A92384(v52, v60, 1, 0, 1, 0, 1, (uint64_t)&v67);
    }
    swift_release();
    goto LABEL_36;
  }
  return result;
}

uint64_t Region.update(with:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[7];
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v3 = v2;
  v5 = *a1;
  v6 = a1[1];
  v7 = a1[2];
  v8 = a1[3];
  v9 = a1[4];
  v10 = a1[5];
  v11 = a1[6];
  v12 = *((_QWORD *)v2 + 4);
  v13 = *((_QWORD *)v2 + 5);
  v14 = *((_QWORD *)v3 + 6);
  v15 = v3[1];
  v30 = *v3;
  v31 = v15;
  v32 = v12;
  v33 = v13;
  v34 = v14;
  v29[0] = v5;
  v29[1] = v6;
  v29[2] = v7;
  v29[3] = v8;
  v29[4] = v9;
  v29[5] = v10;
  v29[6] = v11;
  swift_retain();
  swift_retain();
  swift_retain();
  Region.formIntersection(_:)((uint64_t)v29, v16);
  v17 = v30;
  v27 = v31;
  v28 = *((_QWORD *)&v30 + 1);
  v18 = v32;
  v26 = *((_QWORD *)&v31 + 1);
  v19 = v33;
  v20 = v34;
  *(_QWORD *)&v30 = v5;
  *((_QWORD *)&v30 + 1) = v6;
  *(_QWORD *)&v31 = v7;
  *((_QWORD *)&v31 + 1) = v8;
  v32 = v9;
  v33 = v10;
  v34 = v11;
  result = Region.formUnion(_:)((uint64_t)&v30, v21);
  if ((~v17 & 0x7FF0000000000000) != 0 || (v17 & 0xFFFFFFFFFFFFFLL) == 0)
  {
    v24 = v27;
    v23 = v28;
    v25 = v26;
  }
  else
  {
    swift_release();
    swift_release();
    result = swift_release();
    v17 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
  }
  *a2 = v17;
  a2[1] = v23;
  a2[2] = v24;
  a2[3] = v25;
  a2[4] = v18;
  a2[5] = v19;
  a2[6] = v20;
  return result;
}

void sub_184A91384(uint64_t a1, int64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t *a8)
{
  _QWORD *v8;
  double *v9;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;
  unint64_t v29;
  int64_t v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  int64_t v41;
  BOOL v42;
  int64_t v43;
  int64_t v44;
  int64_t v45;
  unint64_t v46;
  int64_t v47;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  int64_t v62;
  int64_t v63;
  int64_t v64;
  unint64_t v65;
  double v66;
  uint64_t v67;
  double v68;
  unint64_t v69;
  int64_t v70;
  int64_t v71;
  char *v72;
  int64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  double v78;
  double v79;
  double v80;
  double v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  double v85;
  double *v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  double *v91;
  double v93;
  int64_t v94;
  _BOOL4 v95;
  int64_t v97;
  uint64_t v98;
  int64_t v99;
  unint64_t v100;
  uint64_t v101;
  void (*v102)(double *__return_ptr, uint64_t *);
  unint64_t v103;
  uint64_t v104;
  int64_t v105;
  _QWORD *v107;
  int64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  double v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  int v124;

  v9 = (double *)v8;
  sub_184A981D0();
  v93 = *(double *)&a6;
  if (!a1)
  {
    v19 = 0;
    v113 = 0;
    if (a2)
      goto LABEL_10;
LABEL_20:
    v105 = 0;
    v113 = 0;
    v20 = 0;
    v107 = v8 + 4;
    v24 = *(_QWORD *)(v8[4] + 16) == 0;
    goto LABEL_21;
  }
  v15 = a1 - 1;
  if (__OFSUB__(a1, 1))
  {
LABEL_166:
    __break(1u);
    goto LABEL_167;
  }
  if ((v15 & 0x8000000000000000) != 0)
  {
LABEL_167:
    __break(1u);
    goto LABEL_168;
  }
  v16 = v8[5];
  v17 = *(_QWORD *)(v16 + 16);
  if (v15 >= v17)
  {
LABEL_168:
    __break(1u);
    goto LABEL_169;
  }
  v18 = v16 + 32;
  v19 = *(unsigned int *)(v18 + 4 * v15);
  if (a1 <= 1)
  {
    if (a2)
    {
      v113 = 0;
      v22 = a2 - 1;
      if (!__OFSUB__(a2, 1))
        goto LABEL_11;
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    goto LABEL_20;
  }
  if (a1 - 2 >= v17)
  {
LABEL_173:
    __break(1u);
    goto LABEL_174;
  }
  v113 = *(unsigned int *)(v18 + 4 * (a1 - 2));
  if (a2)
  {
LABEL_10:
    v22 = a2 - 1;
    if (!__OFSUB__(a2, 1))
    {
LABEL_11:
      if ((v22 & 0x8000000000000000) != 0)
      {
LABEL_169:
        __break(1u);
        goto LABEL_170;
      }
      v23 = v8[5];
      if (v22 >= *(_QWORD *)(v23 + 16))
      {
LABEL_170:
        __break(1u);
        goto LABEL_171;
      }
      v20 = *(unsigned int *)(v23 + 4 * v22 + 32);
      v21 = a2;
      goto LABEL_14;
    }
    goto LABEL_19;
  }
  v20 = 0;
  v21 = 0;
LABEL_14:
  v107 = v8 + 4;
  v24 = v21 == *(_QWORD *)(v8[4] + 16);
  if (v19 < v113)
    goto LABEL_162;
  v105 = v21;
LABEL_21:
  v25 = v8[6];
  v116 = v8 + 6;
  v26 = *(_QWORD *)(v25 + 16);
  if (v26 < v113 || v26 < v19)
    goto LABEL_163;
  v28 = a8[1];
  v29 = a8[2];
  v30 = v28 + v29;
  if (__OFADD__(v28, v29))
  {
LABEL_164:
    __break(1u);
LABEL_165:
    __break(1u);
    goto LABEL_166;
  }
  v94 = a2;
  v95 = v24;
  v97 = v20;
  if (v29 == v30)
  {
    swift_retain();
    v31 = a1;
    v110 = v19;
    goto LABEL_100;
  }
  v89 = a7;
  v112 = v25 + 32;
  v109 = (2 * v19) | 1;
  v102 = (void (*)(double *__return_ptr, uint64_t *))a8[3];
  v101 = *a8;
  v88 = (uint64_t)a8;
  sub_184A96640((uint64_t)a8);
  v91 = v9;
  if (v29 <= 0x100000000)
    v32 = 0x100000000;
  else
    v32 = v29;
  if ((uint64_t)v29 <= v30)
    v33 = v30;
  else
    v33 = v29;
  v103 = v33;
  v104 = v32;
  swift_retain();
  v90 = a1;
  v108 = a1;
  v110 = v19;
  v34 = v29;
  v35 = v25;
  v99 = v30;
  v100 = v29;
  do
  {
    if ((v29 & 0x8000000000000000) != 0)
      goto LABEL_151;
    if (v34 == v104)
      goto LABEL_152;
    if (v34 == v103)
      goto LABEL_153;
    v123 = *(_QWORD *)(v101 + 8 * (v34 - v29));
    v111 = v34;
    v124 = v34;
    v102(&v117, &v123);
    v36 = v117;
    v37 = v118;
    if ((_QWORD)v118 && *((_QWORD *)&v118 + 1))
    {
      v98 = v25;
      v38 = 0;
      v114 = 8 * *((_QWORD *)&v118 + 1);
      v115 = 8 * v19;
      v39 = v19;
      while (1)
      {
        v40 = *(_QWORD *)(v37 + v38);
        if (v39 >= v20)
        {
          v42 = __OFADD__(v20++, 1);
          if (v42)
            goto LABEL_145;
          v41 = v39;
        }
        else
        {
          if (v20 >= v39 + 1)
            v41 = v39 + 1;
          else
            v41 = v20;
          if (v41 < v39)
            goto LABEL_144;
        }
        if ((v19 & 0x8000000000000000) != 0)
          break;
        v43 = *(_QWORD *)(v35 + 16);
        if (v43 < v41)
          goto LABEL_136;
        v44 = v41 - v39;
        if (__OFSUB__(v41, v39))
          goto LABEL_137;
        v45 = 1 - v44;
        if (__OFSUB__(1, v44))
          goto LABEL_138;
        v46 = v19;
        v47 = v43 + v45;
        if (__OFADD__(v43, v45))
          goto LABEL_139;
        isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
        *v116 = v35;
        if (!(_DWORD)isUniquelyReferenced_nonNull_native || v47 > *(_QWORD *)(v35 + 24) >> 1)
        {
          if (v43 <= v47)
            v49 = v43 + v45;
          else
            v49 = v43;
          sub_184A95C28(isUniquelyReferenced_nonNull_native, v49, 1);
          v35 = *v116;
        }
        v50 = v35 + v115 + v38;
        v19 = v46;
        if (v45)
        {
          v51 = *(_QWORD *)(v35 + 16);
          v42 = __OFSUB__(v51, v41);
          v52 = v51 - v41;
          if (v42)
            goto LABEL_142;
          v53 = (char *)(v50 + 40);
          v54 = (char *)(v35 + 32 + 8 * v41);
          if ((char *)(v50 + 40) != v54 || v53 >= &v54[8 * v52])
            memmove(v53, v54, 8 * v52);
          v55 = *(_QWORD *)(v35 + 16);
          v42 = __OFADD__(v55, v45);
          v56 = v55 + v45;
          if (v42)
            goto LABEL_143;
          *(_QWORD *)(v35 + 16) = v56;
        }
        *(_QWORD *)(v50 + 32) = v40;
        *v116 = v35;
        v57 = v39 + 1;
        if (__OFADD__(v39, 1))
          goto LABEL_140;
        v38 += 8;
        ++v39;
        if (v114 == v38)
        {
          v25 = v98;
          if ((a3 & 1) == 0)
            goto LABEL_71;
LABEL_75:
          if (v57 < (uint64_t)v19)
            goto LABEL_159;
          if ((v19 & 0x8000000000000000) != 0)
          {
LABEL_160:
            __break(1u);
          }
          else
          {
            v61 = *(_QWORD *)(v35 + 16);
            if (v61 >= v19 && (uint64_t)v61 >= v57)
            {
              v58 = v35 + 32;
              v62 = v109 >> 1;
              v63 = v19;
              v64 = v113;
              v59 = (2 * v57) | 1;
              while (1)
              {
                if (v64 == v62)
                {
                  v66 = 0.0;
                  v65 = v109 >> 1;
                  if (v57 == v63)
                    goto LABEL_98;
                }
                else
                {
                  if (v64 < (uint64_t)v113 || v64 >= v62)
                    goto LABEL_146;
                  if (v57 == v63)
                  {
LABEL_89:
                    swift_retain();
                    swift_unknownObjectRelease();
                    v25 = v35;
                    v113 = v19;
                    v60 = v57 - v19;
                    if (!__OFSUB__(v57, v19))
                      goto LABEL_90;
LABEL_154:
                    __break(1u);
LABEL_155:
                    __break(1u);
LABEL_156:
                    __break(1u);
LABEL_157:
                    __break(1u);
LABEL_158:
                    __break(1u);
LABEL_159:
                    __break(1u);
                    goto LABEL_160;
                  }
                  v65 = v64 + 1;
                  v66 = *(double *)(v112 + 8 * v64);
                }
                if (v63 >= v57)
                  goto LABEL_141;
                if (v64 != v62)
                {
                  v67 = v35 + 8 * v63++;
                  v68 = *(double *)(v67 + 32);
                  v64 = v65;
                  if (v66 == v68)
                    continue;
                }
                goto LABEL_89;
              }
            }
          }
          __break(1u);
LABEL_162:
          __break(1u);
LABEL_163:
          __break(1u);
          goto LABEL_164;
        }
      }
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
      goto LABEL_147;
    }
    v57 = v19;
    if ((a3 & 1) != 0)
      goto LABEL_75;
LABEL_71:
    v58 = v112;
    v59 = v109;
    v60 = v57 - v19;
    if (__OFSUB__(v57, v19))
      goto LABEL_154;
LABEL_90:
    v69 = v110 + v60;
    if (__OFADD__(v110, v60))
      goto LABEL_155;
    if (v108 >= v105)
      v70 = v108;
    else
      v70 = v108 + 1;
    sub_184A954A4(v108, v70, v36);
    if ((v69 & 0x8000000000000000) != 0)
      goto LABEL_156;
    if (HIDWORD(v69))
      goto LABEL_157;
    sub_184A955B8(v108, v70, v69);
    if (__OFADD__(v108, 1))
      goto LABEL_158;
    v109 = v59;
    v110 = v69;
    ++v108;
    v19 = v57;
    v112 = v58;
LABEL_98:
    v34 = v111 + 1;
    v29 = v100;
  }
  while (v111 + 1 != v99);
  sub_184A96668(v88);
  a1 = v90;
  v9 = v91;
  a7 = v89;
  v31 = v108;
LABEL_100:
  v71 = v31;
  if (v31 < v105)
  {
    sub_184A960E4(v31, v94);
    sub_184A961E8(v71, v94);
  }
  if ((uint64_t)v19 < v20)
    sub_184A960E4(v19, v20);
  v72 = (char *)*((_QWORD *)v9 + 5);
  v73 = *((_QWORD *)v72 + 2);
  if (v73 < v71)
    goto LABEL_165;
  if (v71 != v73)
  {
    if (v71 < v73)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v72 = sub_184A95C44((uint64_t)v72);
      while ((v71 & 0x8000000000000000) == 0)
      {
        if ((unint64_t)v71 >= *((_QWORD *)v72 + 2))
          goto LABEL_148;
        v74 = &v72[4 * v71];
        v75 = v110 - v97 + *((unsigned int *)v74 + 8);
        if (v75 < 0)
          goto LABEL_149;
        if (HIDWORD(v75))
          goto LABEL_150;
        ++v71;
        *((_DWORD *)v74 + 8) = v75;
        if (v73 == v71)
        {
          *((_QWORD *)v9 + 5) = v72;
          goto LABEL_115;
        }
      }
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
      goto LABEL_154;
    }
    goto LABEL_172;
  }
LABEL_115:
  v76 = *v107;
  if (!*(_QWORD *)(*v107 + 16))
  {
    swift_unknownObjectRelease();
    v78 = NAN;
    v79 = NAN;
    v80 = NAN;
    v81 = NAN;
    goto LABEL_134;
  }
  if ((a5 & 1) != 0)
  {
    v78 = *v9;
    if ((a7 & 1) != 0)
    {
      v82 = *((_QWORD *)v9 + 3);
      v83 = *((_QWORD *)v9 + 6);
      v117 = *v9;
      v118 = *(_OWORD *)(v9 + 1);
      v119 = v82;
      v120 = v76;
      v121 = v72;
      v122 = v83;
      sub_184A98058();
      v78 = v84;
      v77 = 0;
      v93 = v85;
      if (!a1)
        goto LABEL_125;
    }
    else
    {
      v77 = 0;
      if (!a1)
        goto LABEL_125;
    }
LABEL_122:
    v86 = v9 + 2;
    if ((v77 & 1) == 0)
    {
LABEL_127:
      v79 = v93;
LABEL_128:
      v80 = *v86;
      if (v95)
      {
        v87 = *(_QWORD *)(v76 + 16);
        if (!v87)
        {
LABEL_174:
          __break(1u);
          goto LABEL_175;
        }
        v81 = *(double *)(v76 + 8 * v87 + 24);
        swift_unknownObjectRelease();
      }
      else
      {
        swift_unknownObjectRelease();
        v81 = v9[3];
      }
      if (v78 < v79 && v80 < v81)
      {
LABEL_134:
        *v9 = v78;
        v9[1] = v79;
        v9[2] = v80;
        v9[3] = v81;
        sub_184A98288(v9);
        return;
      }
LABEL_171:
      __break(1u);
LABEL_172:
      __break(1u);
      goto LABEL_173;
    }
LABEL_123:
    v79 = v9[1];
    goto LABEL_128;
  }
  v77 = a7 & 1;
  v78 = *(double *)&a4;
  if (a1)
    goto LABEL_122;
LABEL_125:
  if (*(_QWORD *)(v76 + 16))
  {
    v86 = (double *)(v76 + 32);
    if ((v77 & 1) == 0)
      goto LABEL_127;
    goto LABEL_123;
  }
LABEL_175:
  __break(1u);
}

void sub_184A91B3C(uint64_t a1, int64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8)
{
  _QWORD *v8;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t i;
  unint64_t v21;
  uint64_t v22;
  _BOOL4 v23;
  uint64_t v24;
  unint64_t v25;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(__int128 *__return_ptr, _BYTE *, uint64_t *);
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  unint64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t *v45;
  char v46;
  uint64_t v47;
  int64_t v48;
  BOOL v49;
  int64_t v50;
  int64_t v51;
  int64_t v52;
  int64_t v53;
  uint64_t v54;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  int64_t v69;
  unint64_t v70;
  char *v71;
  int64_t v72;
  char *v73;
  uint64_t v74;
  double v75;
  char v76;
  double v77;
  double v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  double v83;
  double *v84;
  uint64_t v85;
  char v86;
  char v87;
  double v89;
  int64_t v90;
  _BOOL4 v91;
  int64_t v93;
  _QWORD *v94;
  int64_t v95;
  uint64_t *v96;
  char **v97;
  int64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  int64_t v102;
  uint64_t v104;
  void (*v105)(__int128 *__return_ptr, double *);
  void (*v106)(__int128 *__return_ptr, _BYTE *, uint64_t *);
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  char v111;
  uint64_t *v112;
  uint64_t *v113;
  double v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  char v131;
  int v132;
  char v133;
  __int128 v134;
  _BYTE v135[32];
  __int128 v136;
  __int128 v137;
  _BYTE v138[32];
  __int128 v139;
  uint64_t v140;

  sub_184A981D0();
  if (a1)
  {
    v14 = a1 - 1;
    if (__OFSUB__(a1, 1))
    {
LABEL_144:
      __break(1u);
      goto LABEL_145;
    }
    if ((v14 & 0x8000000000000000) != 0)
    {
LABEL_145:
      __break(1u);
      goto LABEL_146;
    }
    v15 = v8[5];
    v16 = *(_QWORD *)(v15 + 16);
    if (v14 >= v16)
    {
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
      goto LABEL_150;
    }
    v17 = v15 + 32;
    v18 = *(unsigned int *)(v17 + 4 * v14);
    if (a1 <= 1)
      goto LABEL_16;
    if (a1 - 2 >= v16)
      goto LABEL_154;
    v107 = *(unsigned int *)(v17 + 4 * (a1 - 2));
    if (!a2)
    {
      v19 = 0;
      for (i = 0; ; i = a2)
      {
        v96 = v8 + 4;
        v23 = i == *(_QWORD *)(v8[4] + 16);
        if (v18 >= v107)
          break;
        __break(1u);
LABEL_16:
        if (!a2)
          goto LABEL_20;
        v107 = 0;
        v21 = a2 - 1;
        if (__OFSUB__(a2, 1))
          goto LABEL_19;
LABEL_11:
        if ((v21 & 0x8000000000000000) != 0)
          goto LABEL_147;
        v22 = v8[5];
        if (v21 >= *(_QWORD *)(v22 + 16))
          goto LABEL_148;
        v19 = *(unsigned int *)(v22 + 4 * v21 + 32);
      }
      goto LABEL_21;
    }
    goto LABEL_10;
  }
  v18 = 0;
  v107 = 0;
  if (a2)
  {
LABEL_10:
    v21 = a2 - 1;
    if (!__OFSUB__(a2, 1))
      goto LABEL_11;
LABEL_19:
    __break(1u);
  }
LABEL_20:
  i = 0;
  v107 = 0;
  v19 = 0;
  v96 = v8 + 4;
  v23 = *(_QWORD *)(v8[4] + 16) == 0;
LABEL_21:
  v24 = v8[6];
  v113 = v8 + 6;
  v25 = *(_QWORD *)(v24 + 16);
  if (v25 < v107 || v25 < v18)
  {
LABEL_143:
    __break(1u);
    goto LABEL_144;
  }
  v89 = *(double *)&a6;
  v90 = a2;
  v91 = v23;
  *(_OWORD *)v138 = *(_OWORD *)(a8 + 48);
  v27 = *(_OWORD *)(a8 + 16);
  v134 = *(_OWORD *)a8;
  v86 = a7 & 1;
  v87 = a7;
  v100 = (2 * v18) | 1;
  v101 = v24 + 32;
  v28 = *(_QWORD *)(a8 + 32);
  v29 = *(_QWORD *)(a8 + 40);
  *(_QWORD *)&v138[13] = *(_QWORD *)(a8 + 61);
  v30 = *(void (**)(__int128 *__return_ptr, _BYTE *, uint64_t *))(a8 + 72);
  v31 = *(_QWORD *)(a8 + 80);
  *(_QWORD *)v135 = v27;
  *(_OWORD *)&v135[8] = v27;
  *(_QWORD *)&v135[24] = v28;
  *(_QWORD *)&v136 = v29;
  *((_QWORD *)&v136 + 1) = v29;
  *(_QWORD *)&v137 = 0;
  WORD6(v137) = 512;
  DWORD2(v137) = 0;
  v106 = v30;
  *(_QWORD *)&v138[24] = v30;
  *(_QWORD *)&v139 = v31;
  v104 = *(_QWORD *)(a8 + 96);
  v105 = *(void (**)(__int128 *__return_ptr, double *))(a8 + 88);
  *((_QWORD *)&v139 + 1) = v105;
  v140 = v104;
  sub_184A96690(a8);
  v94 = v8;
  v97 = (char **)(v8 + 5);
  swift_retain();
  v93 = a1;
  v98 = a1;
  v99 = v18;
  v95 = v19;
  v32 = v19;
  v102 = i;
  do
  {
    while (1)
    {
      sub_184A8EAA4();
      if ((v35 & 0x10000000000) != 0)
        goto LABEL_90;
      v129 = v33;
      v130 = v34;
      v131 = BYTE4(v34) & 1;
      v132 = v35;
      v133 = BYTE4(v35) & 1;
      v106(&v120, v138, &v129);
      *(_QWORD *)v138 = v120;
      *(_DWORD *)&v138[8] = DWORD2(v120);
      v138[12] = BYTE12(v120);
      *(_DWORD *)&v138[16] = v121;
      v138[20] = BYTE4(v121);
      v114 = *(double *)&v120;
      LODWORD(v115) = DWORD2(v120);
      BYTE4(v115) = BYTE12(v120);
      DWORD2(v115) = v121;
      BYTE12(v115) = BYTE4(v121);
      v105(&v120, &v114);
      v36 = (uint64_t *)*((_QWORD *)&v120 + 1);
      v37 = (uint64_t *)*((_QWORD *)&v121 + 1);
      if (*((_QWORD *)&v120 + 1))
        v38 = *((_QWORD *)&v120 + 1) + 8 * v121;
      else
        v38 = 0;
      v39 = *((_QWORD *)&v121 + 1) + 8 * v122;
      v40 = *(double *)&v120;
      if (!*((_QWORD *)&v121 + 1))
        v39 = 0;
      v108 = v38;
      v109 = v39;
      v42 = 8 * v18 + 40;
      v41 = (2 * v18) | 1;
      v43 = v18;
      v44 = v24;
LABEL_34:
      if (!v36)
      {
        v108 = 0;
        goto LABEL_36;
      }
      if (v36 != (uint64_t *)v108)
      {
        v46 = 0;
        v45 = v36++;
        goto LABEL_39;
      }
      v108 = 0;
      v36 = 0;
      while (v37)
      {
        if (v37 == (uint64_t *)v109)
          break;
        v45 = v37++;
        v46 = 1;
LABEL_39:
        v47 = *v45;
        if (v43 >= v32)
        {
          v49 = __OFADD__(v32++, 1);
          if (v49)
            goto LABEL_135;
          v48 = v43;
          if ((v18 & 0x8000000000000000) != 0)
          {
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
            goto LABEL_123;
          }
        }
        else
        {
          if (v32 >= v43 + 1)
            v48 = v43 + 1;
          else
            v48 = v32;
          if (v48 < v43)
          {
            __break(1u);
LABEL_135:
            __break(1u);
            goto LABEL_136;
          }
          if ((v18 & 0x8000000000000000) != 0)
            goto LABEL_115;
        }
        v50 = *(_QWORD *)(v44 + 16);
        if (v50 < v48)
          goto LABEL_116;
        v51 = v48 - v43;
        if (__OFSUB__(v48, v43))
          goto LABEL_117;
        v111 = v46;
        v112 = v36;
        v52 = v32;
        v32 = v41;
        v41 = 1 - v51;
        if (__OFSUB__(1, v51))
          goto LABEL_118;
        a8 = v50 + v41;
        if (__OFADD__(v50, v41))
          goto LABEL_119;
        v110 = v37;
        v53 = v43;
        v54 = v44;
        isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
        *v113 = v54;
        if ((_DWORD)isUniquelyReferenced_nonNull_native && (v44 = v54, a8 <= *(_QWORD *)(v54 + 24) >> 1))
        {
          v56 = v53;
          if (!v41)
            goto LABEL_66;
        }
        else
        {
          if (v50 <= a8)
            v57 = v50 + v41;
          else
            v57 = v50;
          sub_184A95C28(isUniquelyReferenced_nonNull_native, v57, 1);
          v44 = *v113;
          v56 = v53;
          if (!v41)
            goto LABEL_66;
        }
        v58 = *(_QWORD *)(v44 + 16);
        v49 = __OFSUB__(v58, v48);
        v59 = v58 - v48;
        if (v49)
          goto LABEL_121;
        v60 = (char *)(v44 + v42);
        v61 = (char *)(v44 + 32 + 8 * v48);
        if ((char *)(v44 + v42) != v61 || v60 >= &v61[8 * v59])
        {
          v62 = v44;
          memmove(v60, v61, 8 * v59);
          v44 = v62;
          v56 = v53;
        }
        v63 = *(_QWORD *)(v44 + 16);
        v49 = __OFADD__(v63, v41);
        v64 = v63 + v41;
        if (v49)
          goto LABEL_122;
        *(_QWORD *)(v44 + 16) = v64;
LABEL_66:
        *(_QWORD *)(v44 + 8 * v56 + 32) = v47;
        *v113 = v44;
        if (__OFADD__(v56, 1))
          goto LABEL_120;
        v43 = v56 + 1;
        v41 = v32 + 2;
        v42 += 8;
        v32 = v52;
        v36 = v112;
        v37 = v110;
        if ((v111 & 1) == 0)
          goto LABEL_34;
LABEL_36:
        ;
      }
      if ((a3 & 1) == 0)
        break;
      i = v102;
      if (v43 < (uint64_t)v18)
      {
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        __break(1u);
        goto LABEL_143;
      }
      if ((v18 & 0x8000000000000000) != 0)
        goto LABEL_137;
      v65 = *(_QWORD *)(v44 + 16);
      if (v65 < v18 || (uint64_t)v65 < v43)
        goto LABEL_138;
      v24 = v44;
      v66 = v44 + 32;
      if (!sub_184A962EC(v44 + 32, v18, v41, v101, v107, v100))
      {
        swift_retain();
        swift_unknownObjectRelease();
        v44 = v24;
        v100 = v41;
        v101 = v66;
        v107 = v18;
        goto LABEL_80;
      }
    }
    i = v102;
LABEL_80:
    v67 = v43 - v18;
    if (__OFSUB__(v43, v18))
      goto LABEL_149;
    v49 = __OFADD__(v99, v67);
    v68 = v99 + v67;
    if (v49)
    {
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
      goto LABEL_153;
    }
    v24 = v44;
    if (v98 >= i)
      a8 = v98;
    else
      a8 = v98 + 1;
    v99 = v68;
    sub_184A954A4(v98, a8, v40);
    if ((v99 & 0x8000000000000000) != 0)
      goto LABEL_151;
    if (HIDWORD(v99))
      goto LABEL_152;
    v69 = v98;
    sub_184A955B8(v98, a8, v99);
    v18 = v43;
    ++v98;
  }
  while (!__OFADD__(v69, 1));
  __break(1u);
LABEL_90:
  v125 = *(_OWORD *)v138;
  v126 = *(_OWORD *)&v138[16];
  v127 = v139;
  v128 = v140;
  v122 = *(_OWORD *)&v135[16];
  v123 = v136;
  v124 = v137;
  v120 = v134;
  v121 = *(_OWORD *)v135;
  sub_184A966C4((uint64_t)&v120);
  v70 = v98;
  if (v98 < i)
  {
    sub_184A960E4(v98, v90);
    sub_184A961E8(v98, v90);
  }
  if ((uint64_t)v18 < v32)
    sub_184A960E4(v18, v32);
  v71 = *v97;
  v72 = *((_QWORD *)*v97 + 2);
  if (v72 < v98)
  {
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
    goto LABEL_156;
  }
  if (v98 != v72)
  {
    v32 = v93;
    v41 = (unint64_t)v94;
    if (v98 >= v72)
    {
LABEL_156:
      __break(1u);
      goto LABEL_157;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v71 = sub_184A95C44((uint64_t)v71);
    while ((v70 & 0x8000000000000000) == 0)
    {
      if (v70 >= *((_QWORD *)v71 + 2))
        goto LABEL_140;
      v73 = &v71[4 * v70];
      v74 = v99 - v95 + *((unsigned int *)v73 + 8);
      if (v74 < 0)
        goto LABEL_141;
      if (HIDWORD(v74))
        goto LABEL_142;
      ++v70;
      *((_DWORD *)v73 + 8) = v74;
      if (v72 == v70)
      {
        *v97 = v71;
        goto LABEL_106;
      }
    }
    goto LABEL_139;
  }
  v32 = v93;
  v41 = (unint64_t)v94;
LABEL_106:
  a8 = *v96;
  if (!*(_QWORD *)(*v96 + 16))
  {
    swift_unknownObjectRelease();
    v40 = NAN;
    v77 = NAN;
    v78 = NAN;
    v79 = NAN;
    goto LABEL_133;
  }
  if ((a5 & 1) != 0)
  {
    v40 = *(double *)v41;
    if ((v87 & 1) != 0)
    {
      v80 = *(_QWORD *)(v41 + 24);
      v81 = *(_QWORD *)(v41 + 48);
      v114 = *(double *)v41;
      v115 = *(_OWORD *)(v41 + 8);
      v116 = v80;
      v117 = a8;
      v118 = v71;
      v119 = v81;
      sub_184A98058();
      v40 = v82;
      v76 = 0;
      v75 = v83;
      if (!v32)
        goto LABEL_124;
    }
    else
    {
LABEL_123:
      v76 = 0;
      v75 = v89;
      if (!v32)
        goto LABEL_124;
    }
LABEL_113:
    v84 = (double *)(v41 + 16);
    if ((v76 & 1) == 0)
    {
LABEL_126:
      v77 = v75;
LABEL_127:
      v78 = *v84;
      if (v91)
      {
        v85 = *(_QWORD *)(a8 + 16);
        if (!v85)
        {
LABEL_157:
          __break(1u);
          goto LABEL_158;
        }
        v79 = *(double *)(a8 + 8 * v85 + 24);
        swift_unknownObjectRelease();
      }
      else
      {
        swift_unknownObjectRelease();
        v79 = *(double *)(v41 + 24);
      }
      if (v40 >= v77 || v78 >= v79)
        goto LABEL_155;
LABEL_133:
      *(double *)v41 = v40;
      *(double *)(v41 + 8) = v77;
      *(double *)(v41 + 16) = v78;
      *(double *)(v41 + 24) = v79;
      sub_184A98288(v41);
      return;
    }
LABEL_114:
    v77 = *(double *)(v41 + 8);
    goto LABEL_127;
  }
  v40 = *(double *)&a4;
  v75 = v89;
  v76 = v86;
  if (v32)
    goto LABEL_113;
LABEL_124:
  if (*(_QWORD *)(a8 + 16))
  {
    v84 = (double *)(a8 + 32);
    if ((v76 & 1) == 0)
      goto LABEL_126;
    goto LABEL_114;
  }
LABEL_158:
  __break(1u);
}

void sub_184A92384(uint64_t a1, int64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8)
{
  _QWORD *v8;
  double *v9;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t i;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _BOOL4 v23;
  uint64_t v24;
  unint64_t v25;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(__int128 *__return_ptr, _BYTE *, uint64_t *);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double *v36;
  int64_t v37;
  double *v38;
  uint64_t v39;
  char v40;
  void (*v41)(_QWORD *__return_ptr, _QWORD, _QWORD);
  uint64_t v42;
  uint64_t v43;
  char v44;
  void (*v45)(_QWORD *__return_ptr, _QWORD, _QWORD);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(_QWORD *__return_ptr, _QWORD, _QWORD);
  uint64_t v50;
  void (*v51)(_QWORD *__return_ptr, _QWORD, _QWORD);
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  double v56;
  double v57;
  double v58;
  double v59;
  char v60;
  double v61;
  double v62;
  double v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  int64_t v68;
  unint64_t v69;
  int64_t v70;
  int64_t v71;
  BOOL v72;
  int64_t v73;
  int64_t v74;
  char *v75;
  int64_t v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  double v83;
  double *v84;
  double v85;
  double v86;
  double v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  double v91;
  uint64_t v92;
  double v94;
  int64_t v95;
  _BOOL4 v96;
  _QWORD *v99;
  uint64_t v100;
  double *v101;
  unint64_t v102;
  int64_t v103;
  int64_t v104;
  int64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v109;
  void (*v110)(__int128 *__return_ptr, _BYTE *);
  void (*v111)(__int128 *__return_ptr, _BYTE *, uint64_t *);
  uint64_t v112;
  unint64_t v113;
  _QWORD *v114;
  int64_t v115;
  int64_t v116;
  double *v117;
  double *v118;
  uint64_t (*v119)(_QWORD);
  uint64_t v120;
  void (*v121)(_QWORD *__return_ptr, _QWORD);
  _BYTE v122[32];
  uint64_t v123;
  char *v124;
  uint64_t v125;
  char v126;
  void (*v127)(_QWORD *__return_ptr, _QWORD, _QWORD);
  uint64_t v128;
  uint64_t v129;
  char v130;
  void (*v131)(_QWORD *__return_ptr, _QWORD, _QWORD);
  uint64_t v132;
  void (*v133)(_QWORD *__return_ptr, _QWORD);
  uint64_t v134;
  uint64_t (*v135)(_QWORD);
  uint64_t v136;
  double v137;
  char v138;
  double v139;
  char v140;
  double v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  _OWORD v151[7];
  __int128 v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  char v156;
  int v157;
  char v158;
  __int128 v159;
  _BYTE v160[32];
  __int128 v161;
  __int128 v162;
  _BYTE v163[32];
  __int128 v164;
  uint64_t v165;

  v9 = (double *)v8;
  sub_184A981D0();
  v95 = a2;
  if (!a1)
  {
    v18 = 0;
    v113 = 0;
    if (!a2)
    {
LABEL_20:
      i = 0;
      v113 = 0;
      v104 = 0;
      v22 = v8 + 4;
      v23 = *(_QWORD *)(v8[4] + 16) == 0;
      goto LABEL_21;
    }
LABEL_10:
    v20 = a2 - 1;
    if (!__OFSUB__(a2, 1))
      goto LABEL_11;
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v14 = a1 - 1;
  if (__OFSUB__(a1, 1))
    goto LABEL_150;
  if ((v14 & 0x8000000000000000) != 0)
  {
LABEL_151:
    __break(1u);
    goto LABEL_152;
  }
  v15 = v8[5];
  v16 = *(_QWORD *)(v15 + 16);
  if (v14 >= v16)
  {
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
    goto LABEL_155;
  }
  v17 = v15 + 32;
  v18 = *(unsigned int *)(v17 + 4 * v14);
  if (a1 <= 1)
    goto LABEL_16;
  if (a1 - 2 >= v16)
    goto LABEL_157;
  v113 = *(unsigned int *)(v17 + 4 * (a1 - 2));
  if (a2)
    goto LABEL_10;
  v104 = 0;
  for (i = 0; ; i = a2)
  {
    v22 = v8 + 4;
    v23 = i == *(_QWORD *)(v8[4] + 16);
    if (v18 >= v113)
      break;
    __break(1u);
LABEL_16:
    if (!a2)
      goto LABEL_20;
    v113 = 0;
    v20 = a2 - 1;
    if (__OFSUB__(a2, 1))
      goto LABEL_19;
LABEL_11:
    if ((v20 & 0x8000000000000000) != 0)
      goto LABEL_153;
    v21 = v8[5];
    if (v20 >= *(_QWORD *)(v21 + 16))
      goto LABEL_154;
    v104 = *(unsigned int *)(v21 + 4 * v20 + 32);
  }
LABEL_21:
  v24 = v8[6];
  v114 = v8 + 6;
  v25 = *(_QWORD *)(v24 + 16);
  if (v25 < v113 || v25 < v18)
  {
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
    goto LABEL_146;
  }
  v103 = i;
  v96 = v23;
  v94 = *(double *)&a6;
  *(_OWORD *)v163 = *(_OWORD *)(a8 + 48);
  v27 = *(_OWORD *)(a8 + 16);
  v159 = *(_OWORD *)a8;
  v28 = *(_QWORD *)(a8 + 32);
  v29 = *(_QWORD *)(a8 + 40);
  *(_QWORD *)&v163[13] = *(_QWORD *)(a8 + 61);
  v30 = *(void (**)(__int128 *__return_ptr, _BYTE *, uint64_t *))(a8 + 72);
  v31 = *(_QWORD *)(a8 + 80);
  *(_QWORD *)v160 = v27;
  *(_OWORD *)&v160[8] = v27;
  *(_QWORD *)&v160[24] = v28;
  *(_QWORD *)&v161 = v29;
  *((_QWORD *)&v161 + 1) = v29;
  *(_QWORD *)&v162 = 0;
  WORD6(v162) = 512;
  DWORD2(v162) = 0;
  v111 = v30;
  *(_QWORD *)&v163[24] = v30;
  *(_QWORD *)&v164 = v31;
  v109 = *(_QWORD *)(a8 + 96);
  v110 = *(void (**)(__int128 *__return_ptr, _BYTE *))(a8 + 88);
  *((_QWORD *)&v164 + 1) = v110;
  v165 = v109;
  sub_184A96690(a8);
  swift_retain();
  sub_184A8EAA4();
  if ((v34 & 0x10000000000) == 0)
  {
    v107 = v24 + 32;
    v115 = v104;
    v35 = v18;
    v105 = a1;
    v106 = (2 * v18) | 1;
    v100 = a1;
    v101 = (double *)v8;
    v99 = v22;
LABEL_28:
    v102 = v18;
    v112 = v35;
LABEL_29:
    v154 = v32;
    v155 = v33;
    v156 = BYTE4(v33) & 1;
    v157 = v34;
    v158 = BYTE4(v34) & 1;
    v111(&v142, v163, &v154);
    *(_QWORD *)v163 = v142;
    *(_DWORD *)&v163[8] = DWORD2(v142);
    v163[12] = BYTE12(v142);
    *(_DWORD *)&v163[16] = v143;
    v163[20] = BYTE4(v143);
    *(_QWORD *)v122 = v142;
    *(_DWORD *)&v122[8] = DWORD2(v142);
    v122[12] = BYTE12(v142);
    *(_DWORD *)&v122[16] = v143;
    v122[20] = BYTE4(v143);
    v110(&v142, v122);
    v151[6] = v148;
    v152 = v149;
    v153 = v150;
    v151[2] = v144;
    v151[3] = v145;
    v151[4] = v146;
    v151[5] = v147;
    v151[0] = v142;
    v151[1] = v143;
    v36 = (double *)*((_QWORD *)&v142 + 1);
    v37 = v35;
    v38 = (double *)*((_QWORD *)&v143 + 1);
    v39 = *((_QWORD *)&v144 + 1);
    v40 = v145;
    v41 = (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD))*((_QWORD *)&v145 + 1);
    v43 = *((_QWORD *)&v146 + 1);
    v42 = v146;
    v44 = v147;
    v45 = (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD))*((_QWORD *)&v147 + 1);
    v46 = v148;
    v120 = v149;
    v121 = (void (*)(_QWORD *__return_ptr, _QWORD))*((_QWORD *)&v148 + 1);
    if (*((_QWORD *)&v142 + 1))
      v47 = *((_QWORD *)&v142 + 1) + 8 * v143;
    else
      v47 = 0;
    v48 = *((_QWORD *)&v143 + 1) + 8 * v144;
    if (!*((_QWORD *)&v143 + 1))
      v48 = 0;
    *(_QWORD *)&v142 = *((_QWORD *)&v142 + 1);
    *((_QWORD *)&v142 + 1) = v47;
    v117 = (double *)v48;
    v118 = (double *)v47;
    *(_QWORD *)&v143 = *((_QWORD *)&v143 + 1);
    *((_QWORD *)&v143 + 1) = v48;
    *(_QWORD *)&v144 = 0;
    WORD4(v144) = 512;
    *(_QWORD *)&v145 = v39;
    BYTE8(v145) = v40;
    v49 = v41;
    *(_QWORD *)&v146 = v41;
    v50 = v42;
    *((_QWORD *)&v146 + 1) = v42;
    *(_QWORD *)&v147 = v43;
    BYTE8(v147) = v44;
    v51 = v45;
    *(_QWORD *)&v148 = v45;
    v52 = v46;
    *((_QWORD *)&v148 + 1) = v46;
    sub_184A966F8((uint64_t)v151);
    v119 = (uint64_t (*)(_QWORD))*((_QWORD *)&v152 + 1);
    v53 = v153;
LABEL_35:
    v116 = v37;
    while (1)
    {
      v57 = *(double *)&v144;
      if (BYTE9(v144))
      {
        if (BYTE9(v144) == 1)
        {
          if (!v36 || v36 == v118)
          {
            if ((BYTE8(v144) & 1) != 0)
              goto LABEL_78;
LABEL_58:
            v54 = 0;
            *(_QWORD *)&v144 = 0;
            BYTE8(v144) = 1;
LABEL_59:
            v55 = 2;
            v59 = v57;
            goto LABEL_38;
          }
          v58 = *v36++;
          v59 = v58;
          *(_QWORD *)&v142 = v36;
          if ((BYTE8(v144) & 1) != 0)
            goto LABEL_62;
        }
        else
        {
          v59 = 0.0;
          if (!v36 || v36 == v118)
          {
            v60 = 1;
            if (!v38)
              goto LABEL_60;
          }
          else
          {
            v60 = 0;
            v62 = *v36++;
            v59 = v62;
            *(_QWORD *)&v142 = v36;
            if (!v38)
              goto LABEL_60;
          }
          if (v38 == v117)
          {
LABEL_60:
            v57 = v59;
LABEL_61:
            v59 = v57;
            v57 = 0.0;
            if ((v60 & 1) != 0)
            {
LABEL_78:
              *(_OWORD *)v122 = v142;
              *(_OWORD *)&v122[16] = v143;
              v123 = 0;
              LOWORD(v124) = 512;
              v125 = v39;
              v126 = v40;
              v127 = v49;
              v128 = v50;
              v129 = v43;
              v130 = v44 & 1;
              v131 = v51;
              v132 = v52;
              v133 = v121;
              v134 = v120;
              v135 = v119;
              v136 = v53;
              sub_184A9674C((uint64_t)v122);
              if ((a3 & 1) != 0)
              {
                v35 = v112;
                v66 = v37;
                if (v37 < v112)
                  goto LABEL_138;
                if (v112 < 0)
                  goto LABEL_139;
                v67 = *v114;
                v68 = *(_QWORD *)(*v114 + 16);
                if (v68 < (unint64_t)v112 || v68 < v37)
                  goto LABEL_140;
                if (sub_184A962EC(v67 + 32, v112, (2 * v37) | 1, v107, v113, v106))
                {
                  sub_184A967A0((uint64_t)v151);
                  sub_184A8EAA4();
                  if ((v34 & 0x10000000000) == 0)
                    goto LABEL_29;
                  v116 = v112;
                  a1 = v100;
                  v9 = v101;
                  v18 = v102;
                  v22 = v99;
                  goto LABEL_99;
                }
                swift_retain();
                swift_unknownObjectRelease();
                v106 = (2 * v37) | 1;
                v107 = v67 + 32;
                v113 = v112;
                a1 = v100;
                v9 = v101;
                v69 = v102;
                v22 = v99;
                v70 = v103;
              }
              else
              {
                a1 = v100;
                v9 = v101;
                v69 = v102;
                v22 = v99;
                v70 = v103;
                v35 = v112;
                v66 = v37;
              }
              v71 = v66 - v35;
              if (__OFSUB__(v66, v35))
                goto LABEL_145;
              v72 = __OFADD__(v69, v71);
              v18 = v69 + v71;
              if (!v72)
              {
                if (v105 >= v70)
                  v73 = v105;
                else
                  v73 = v105 + 1;
                sub_184A954A4(v105, v73, *(double *)v151);
                if ((v18 & 0x8000000000000000) != 0)
                  goto LABEL_147;
                if (HIDWORD(v18))
                  goto LABEL_148;
                v74 = v105;
                sub_184A955B8(v105, v73, v18);
                sub_184A967A0((uint64_t)v151);
                ++v105;
                if (!__OFADD__(v74, 1))
                {
                  sub_184A8EAA4();
                  v35 = v37;
                  if ((v34 & 0x10000000000) == 0)
                    goto LABEL_28;
                  goto LABEL_99;
                }
LABEL_149:
                __break(1u);
LABEL_150:
                __break(1u);
                goto LABEL_151;
              }
LABEL_146:
              __break(1u);
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
              goto LABEL_149;
            }
LABEL_62:
            *(double *)&v144 = v57;
            v54 = 1;
            BYTE8(v144) = 1;
            goto LABEL_37;
          }
          v63 = *v38++;
          v57 = v63;
          *(_QWORD *)&v143 = v38;
          if ((v60 & 1) != 0)
            goto LABEL_58;
        }
      }
      else
      {
        v60 = BYTE8(v144) & 1;
        if (!v38 || v38 == v117)
          goto LABEL_61;
        v59 = *(double *)&v144;
        v61 = *v38++;
        v57 = v61;
        *(_QWORD *)&v143 = v38;
        if ((BYTE8(v144) & 1) != 0)
          goto LABEL_58;
      }
      if (v59 >= v57)
      {
        if (v57 >= v59)
        {
          *(_QWORD *)&v144 = 0;
          BYTE8(v144) = 0;
          v55 = 3;
          v54 = 2;
          goto LABEL_38;
        }
        v54 = 0;
        *(double *)&v144 = v59;
        BYTE8(v144) = 0;
        goto LABEL_59;
      }
      *(double *)&v144 = v57;
      BYTE8(v144) = 0;
      v54 = 1;
LABEL_37:
      v55 = 1;
LABEL_38:
      BYTE9(v144) = v54;
      v137 = v59;
      v138 = v55;
      v49(v122, &v145, &v137);
      v39 = *(_QWORD *)v122;
      v40 = v122[8];
      *(_QWORD *)&v145 = *(_QWORD *)v122;
      BYTE8(v145) = v122[8];
      v139 = *(double *)v122;
      v140 = v122[8];
      v51(v122, &v147, &v139);
      v43 = *(_QWORD *)v122;
      v44 = v122[8];
      *(_QWORD *)&v147 = *(_QWORD *)v122;
      BYTE8(v147) = v122[8];
      v121(&v139, v122);
      v56 = v139;
      v141 = v139;
      if ((v119(&v141) & 1) != 0)
      {
        v64 = v115;
        if (v37 >= v115)
        {
          v64 = v115 + 1;
          if (__OFADD__(v115, 1))
            goto LABEL_142;
          v65 = v37;
        }
        else
        {
          if (v115 >= v37 + 1)
            v65 = v37 + 1;
          else
            v65 = v115;
          if (v65 < v37)
            goto LABEL_141;
        }
        v115 = v64;
        sub_184A954A4(v37++, v65, v56);
        if (!__OFADD__(v116, 1))
          goto LABEL_35;
        __break(1u);
        goto LABEL_134;
      }
    }
  }
  v105 = a1;
  v115 = v104;
  v116 = v18;
LABEL_99:
  v148 = *(_OWORD *)&v163[16];
  v149 = v164;
  v150 = v165;
  v144 = *(_OWORD *)&v160[16];
  v145 = v161;
  v146 = v162;
  v147 = *(_OWORD *)v163;
  v142 = v159;
  v143 = *(_OWORD *)v160;
  sub_184A966C4((uint64_t)&v142);
  if (v105 < v103)
  {
    sub_184A960E4(v105, v95);
    sub_184A961E8(v105, v95);
  }
  if (v116 < v115)
    sub_184A960E4(v116, v115);
  v75 = (char *)*((_QWORD *)v9 + 5);
  v76 = *((_QWORD *)v75 + 2);
  if (v76 < v105)
    goto LABEL_144;
  v77 = v18 - v104;
  if (v105 != v76)
  {
    if (v105 < v76)
    {
      v78 = v105;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v75 = sub_184A95C44((uint64_t)v75);
      while ((v78 & 0x8000000000000000) == 0)
      {
        if (v78 >= *((_QWORD *)v75 + 2))
          goto LABEL_135;
        v79 = &v75[4 * v78];
        v80 = v77 + *((unsigned int *)v79 + 8);
        if (v80 < 0)
          goto LABEL_136;
        if (HIDWORD(v80))
          goto LABEL_137;
        ++v78;
        *((_DWORD *)v79 + 8) = v80;
        if (v76 == v78)
        {
          *((_QWORD *)v9 + 5) = v75;
          goto LABEL_114;
        }
      }
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
      goto LABEL_143;
    }
    goto LABEL_156;
  }
LABEL_114:
  v81 = *v22;
  if (!*(_QWORD *)(*v22 + 16))
  {
    swift_unknownObjectRelease();
    v83 = NAN;
    v85 = NAN;
    v86 = NAN;
    v87 = NAN;
    goto LABEL_133;
  }
  if ((a5 & 1) != 0)
  {
    v83 = *v9;
    if ((a7 & 1) != 0)
    {
      v88 = *((_QWORD *)v9 + 3);
      v89 = *((_QWORD *)v9 + 6);
      *(double *)v122 = *v9;
      *(_OWORD *)&v122[8] = *(_OWORD *)(v9 + 1);
      *(_QWORD *)&v122[24] = v88;
      v123 = v81;
      v124 = v75;
      v125 = v89;
      sub_184A98058();
      v83 = v90;
      v82 = 0;
      v94 = v91;
      if (!a1)
        goto LABEL_124;
    }
    else
    {
      v82 = 0;
      if (!a1)
        goto LABEL_124;
    }
LABEL_117:
    v84 = v9 + 2;
    if ((v82 & 1) != 0)
    {
LABEL_118:
      v85 = v9[1];
      goto LABEL_127;
    }
LABEL_126:
    v85 = v94;
LABEL_127:
    v86 = *v84;
    if (v96)
    {
      v92 = *(_QWORD *)(v81 + 16);
      if (!v92)
      {
LABEL_158:
        __break(1u);
        goto LABEL_159;
      }
      v87 = *(double *)(v81 + 8 * v92 + 24);
      swift_unknownObjectRelease();
    }
    else
    {
      swift_unknownObjectRelease();
      v87 = v9[3];
    }
    if (v83 < v85 && v86 < v87)
    {
LABEL_133:
      *v9 = v83;
      v9[1] = v85;
      v9[2] = v86;
      v9[3] = v87;
      sub_184A98288(v9);
      return;
    }
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
    goto LABEL_158;
  }
  v82 = a7 & 1;
  v83 = *(double *)&a4;
  if (a1)
    goto LABEL_117;
LABEL_124:
  if (*(_QWORD *)(v81 + 16))
  {
    v84 = (double *)(v81 + 32);
    if ((v82 & 1) != 0)
      goto LABEL_118;
    goto LABEL_126;
  }
LABEL_159:
  __break(1u);
}

void sub_184A92D74(int64_t a1, int64_t a2, char a3, uint64_t a4, char a5, unint64_t a6, char a7, uint64_t a8, void (*a9)(_BYTE *__return_ptr, unsigned __int128 *))
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL4 v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  double v31;
  char v32;
  uint64_t v34;
  uint64_t (*v36)(unsigned __int128 *);
  double v37;
  double v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int64_t v52;
  int64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  int64_t v57;
  BOOL v58;
  int64_t v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  int64_t v63;
  int64_t v64;
  char *v65;
  int64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  double v73;
  double v74;
  double v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  unint64_t v80;
  double *v81;
  uint64_t v82;
  unint64_t v83;
  int64_t v85;
  _BOOL4 v86;
  int64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v94;
  int64_t v95;
  uint64_t v96;
  uint64_t *v98;
  uint64_t *v99;
  int64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  int64_t v106;
  uint64_t v107;
  void (*v108)(double *__return_ptr, unsigned __int128 *);
  int64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t (*v112)(_OWORD *);
  uint64_t v113;
  void (*v114)(double *__return_ptr, unsigned __int128 *);
  double v115;
  unsigned __int128 v116;
  unsigned __int128 v117;
  uint64_t v118;
  double v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  __int128 v128;
  uint64_t (*v129)(_QWORD);
  uint64_t v130;
  void (*v131)(double *__return_ptr, unsigned __int128 *);
  uint64_t v132;
  double v133;
  double v134[7];
  _OWORD v135[2];
  uint64_t v136;
  _BYTE v137[32];
  __int128 v138;
  __int128 v139;
  _BYTE v140[48];
  __int128 v141;
  uint64_t v142;
  _BYTE v143[48];
  _BYTE v144[48];
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  uint64_t v151;
  __int128 v152;
  __int128 v153;
  uint64_t v154;
  uint64_t v155;

  v10 = v9;
  sub_184A981D0();
  if (a1)
  {
    v14 = a1 - 1;
    if (__OFSUB__(a1, 1))
    {
LABEL_155:
      __break(1u);
      goto LABEL_156;
    }
    if ((v14 & 0x8000000000000000) != 0)
    {
LABEL_156:
      __break(1u);
      goto LABEL_157;
    }
    v15 = *(_QWORD *)(v9 + 40);
    v16 = *(_QWORD *)(v15 + 16);
    if (v14 >= v16)
    {
LABEL_157:
      __break(1u);
      goto LABEL_158;
    }
    v17 = v15 + 32;
    v18 = *(unsigned int *)(v17 + 4 * v14);
    if (a1 > 1)
    {
      if (a1 - 2 >= v16)
      {
LABEL_161:
        __break(1u);
LABEL_162:
        __break(1u);
        goto LABEL_163;
      }
      v105 = *(unsigned int *)(v17 + 4 * (a1 - 2));
      if (!a2)
      {
        v19 = 0;
        v20 = 0;
LABEL_14:
        v98 = (uint64_t *)(v10 + 32);
        v23 = v20 == *(_QWORD *)(*(_QWORD *)(v10 + 32) + 16);
        if (v18 < v105)
        {
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
          goto LABEL_155;
        }
        v95 = v20;
        goto LABEL_21;
      }
LABEL_10:
      v21 = a2 - 1;
      if (!__OFSUB__(a2, 1))
      {
LABEL_11:
        if ((v21 & 0x8000000000000000) != 0)
        {
LABEL_158:
          __break(1u);
          goto LABEL_159;
        }
        v22 = *(_QWORD *)(v9 + 40);
        if (v21 >= *(_QWORD *)(v22 + 16))
        {
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
          goto LABEL_161;
        }
        v19 = *(unsigned int *)(v22 + 4 * v21 + 32);
        v20 = a2;
        goto LABEL_14;
      }
      goto LABEL_19;
    }
    if (a2)
    {
      v105 = 0;
      v21 = a2 - 1;
      if (!__OFSUB__(a2, 1))
        goto LABEL_11;
LABEL_19:
      __break(1u);
    }
  }
  else
  {
    v18 = 0;
    v105 = 0;
    if (a2)
      goto LABEL_10;
  }
  v95 = 0;
  v105 = 0;
  v19 = 0;
  v98 = (uint64_t *)(v10 + 32);
  v23 = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 16) == 0;
LABEL_21:
  v24 = *(_QWORD *)(v10 + 48);
  v99 = (uint64_t *)(v10 + 48);
  v25 = *(_QWORD *)(v24 + 16);
  if (v25 < v105 || v25 < v18)
    goto LABEL_149;
  v85 = a2;
  v86 = v23;
  v96 = *(_QWORD *)(a8 + 16);
  v89 = a1;
  v90 = v19;
  if (!v96)
  {
LABEL_95:
    swift_retain();
    v61 = v18;
    v62 = v19;
    goto LABEL_96;
  }
  v83 = a6;
  v91 = v24 + 32;
  v92 = (2 * v18) | 1;
  swift_bridgeObjectRetain();
  swift_retain();
  v103 = v24;
  swift_retain();
  v27 = 0;
  v94 = v10;
  v100 = v19;
  v106 = a1;
  v104 = v18;
  v28 = v18;
  while (1)
  {
    v101 = v27 + 1;
    *(_QWORD *)&v116 = *(_QWORD *)(a8 + 32 + 8 * v27);
    a9(v137, &v116);
    *(_OWORD *)&v143[32] = v138;
    *(_OWORD *)v144 = v139;
    *(_OWORD *)v143 = *(_OWORD *)v137;
    *(_OWORD *)&v143[16] = *(_OWORD *)&v137[16];
    *(_OWORD *)&v144[16] = *(_OWORD *)v140;
    *(_OWORD *)&v144[32] = *(_OWORD *)&v140[16];
    v145 = *(_OWORD *)&v140[32];
    v146 = v141;
    v147 = v142;
    v111 = v141;
    v112 = *(uint64_t (**)(_OWORD *))&v140[40];
    v148 = *(_OWORD *)&v143[8];
    v149 = *(_OWORD *)&v143[24];
    v150 = *((_QWORD *)&v138 + 1);
    v151 = v139;
    v152 = *(_OWORD *)&v144[8];
    v153 = *(_OWORD *)&v144[24];
    v154 = *(_QWORD *)&v140[24];
    v155 = *(_QWORD *)&v140[32];
    sub_184A9648C((uint64_t)v143);
    sub_184A8E900((uint64_t)v137);
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v107 = v147;
    v108 = (void (*)(double *__return_ptr, unsigned __int128 *))*((_QWORD *)&v146 + 1);
    v29 = *(_QWORD *)(*(_QWORD *)v137 + 16);
    v30 = v28;
    v102 = v28;
    v110 = v29;
LABEL_29:
    v109 = v30;
    v31 = *((double *)&v138 + 1);
    v32 = v139;
    a6 = *((unint64_t *)&v139 + 1);
    v18 = *(_QWORD *)v140;
    if (*((_QWORD *)&v139 + 1) != v29 || *(_QWORD *)v140 != v29)
    {
      while (1)
      {
        if ((v32 & 1) != 0)
          goto LABEL_165;
        if ((a6 & 0x8000000000000000) != 0)
          goto LABEL_133;
        a1 = *(_QWORD *)v137;
        v34 = *(_QWORD *)(*(_QWORD *)v137 + 16);
        if (v34 < a6 || v34 < (uint64_t)v18)
          goto LABEL_134;
        if ((v18 & 0x8000000000000000) != 0)
          goto LABEL_135;
        v115 = v31;
        v36 = *(uint64_t (**)(unsigned __int128 *))&v137[8];
        v37 = *(double *)&v137[16];
        if (v18 == v34)
        {
          swift_bridgeObjectRetain();
          swift_retain();
          v38 = 0.0;
          v39 = v18;
          goto LABEL_56;
        }
        v39 = *(_QWORD *)(*(_QWORD *)v137 + 16);
        v113 = *(_QWORD *)v137 + 32;
        v114 = *(void (**)(double *__return_ptr, unsigned __int128 *))&v137[24];
        swift_bridgeObjectRetain();
        swift_retain();
        v40 = 1;
        v38 = 0.0;
        v10 = v18;
        while (2)
        {
          if (v10 >= *(_QWORD *)(a1 + 16))
            goto LABEL_136;
          v41 = v113 + 32 * v10;
          v42 = *(_QWORD *)(v41 + 16);
          v43 = *(_BYTE *)(v41 + 24);
          v116 = *(_OWORD *)v41;
          *(_QWORD *)&v117 = v42;
          BYTE8(v117) = v43;
          v114(&v133, &v116);
          if ((v40 & 1) != 0)
          {
            v38 = v133;
          }
          else if (v133 != v38)
          {
            v39 = v10;
            if ((uint64_t)v10 < (uint64_t)v18)
              goto LABEL_132;
            goto LABEL_56;
          }
          if (v10 == v34)
            goto LABEL_137;
          v19 = v10 + 1;
          if (v10 + 1 != v34)
          {
            swift_retain();
            swift_bridgeObjectRetain();
            v44 = 32 * v10++;
            while (1)
            {
              if (v10 >= *(_QWORD *)(a1 + 16))
              {
                __break(1u);
                goto LABEL_95;
              }
              v45 = *(_QWORD *)(a1 + v44 + 80);
              v46 = *(_BYTE *)(a1 + v44 + 88);
              v116 = *(_OWORD *)(a1 + v44 + 64);
              *(_QWORD *)&v117 = v45;
              BYTE8(v117) = v46;
              swift_retain();
              v19 = v36(&v116);
              swift_release();
              if ((v19 & 1) != 0)
                break;
              ++v10;
              v44 += 32;
              if (v34 == v10)
              {
                swift_release();
                swift_bridgeObjectRelease();
                goto LABEL_55;
              }
            }
            swift_release();
            swift_bridgeObjectRelease();
            v40 = 0;
            if (v34 != v10)
              continue;
          }
          break;
        }
LABEL_55:
        if (v34 < (uint64_t)v18)
        {
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
          goto LABEL_138;
        }
LABEL_56:
        *((double *)&v138 + 1) = v38;
        LOBYTE(v139) = v18 == v34;
        *((_QWORD *)&v139 + 1) = v18;
        *(_QWORD *)v140 = v39;
        v134[0] = v115;
        *(_QWORD *)&v134[1] = a1;
        *(_QWORD *)&v134[2] = a1 + 32;
        *(_QWORD *)&v134[3] = a6;
        *(_QWORD *)&v134[4] = (2 * v18) | 1;
        *(_QWORD *)&v134[5] = v36;
        v134[6] = v37;
        ((void (*)(unsigned __int128 *__return_ptr, _BYTE *, double *))v141)(&v116, &v140[8], v134);
        swift_release();
        swift_bridgeObjectRelease();
        v47 = *((_QWORD *)&v116 + 1);
        v48 = v116;
        v50 = *((_QWORD *)&v117 + 1);
        v49 = v117;
        v51 = v118;
        *(_OWORD *)&v140[8] = v116;
        *(_OWORD *)&v140[24] = v117;
        *(_QWORD *)&v140[40] = v118;
        v135[0] = v116;
        v135[1] = v117;
        v136 = v118;
        if ((v112(v135) & 1) != 0)
        {
          v116 = __PAIR128__(v47, v48);
          v117 = __PAIR128__(v50, v49);
          v118 = v51;
          v108(v134, &v116);
          v52 = v100;
          if (v109 >= v100)
          {
            v52 = v100 + 1;
            if (__OFADD__(v100, 1))
              goto LABEL_154;
            v53 = v109;
          }
          else
          {
            if (v100 >= v109 + 1)
              v53 = v109 + 1;
            else
              v53 = v100;
            if (v53 < v109)
              goto LABEL_153;
          }
          v100 = v52;
          sub_184A954A4(v109, v53, v134[0]);
          v30 = v109 + 1;
          v29 = v110;
          if (__OFADD__(v109, 1))
            goto LABEL_142;
          goto LABEL_29;
        }
        v31 = *((double *)&v138 + 1);
        v32 = v139;
        a6 = *((unint64_t *)&v139 + 1);
        v18 = *(_QWORD *)v140;
        v29 = v110;
        if (*((_QWORD *)&v139 + 1) == v110 && *(_QWORD *)v140 == v110)
          goto LABEL_74;
      }
    }
    v48 = *(_QWORD *)&v140[8];
    v49 = *(_QWORD *)&v140[24];
    v47 = *(_QWORD *)&v140[16];
    v51 = *(_QWORD *)&v140[40];
    v50 = *(_QWORD *)&v140[32];
LABEL_74:
    LOBYTE(v133) = v32;
    v116 = *(_OWORD *)v137;
    v117 = *(_OWORD *)&v137[16];
    v118 = v138;
    v119 = v31;
    v120 = v32;
    v121 = v29;
    v122 = v29;
    v123 = v48;
    v124 = v47;
    v125 = v49;
    v126 = v50;
    v127 = v51;
    v128 = v141;
    v129 = (uint64_t (*)(_QWORD))v112;
    v130 = v111;
    v131 = v108;
    v132 = v107;
    sub_184A96500((uint64_t)&v116);
    if ((a3 & 1) != 0)
    {
      v28 = v102;
      v54 = v103;
      v10 = v94;
      v18 = v104;
      if (v109 < v102)
        goto LABEL_150;
      if (v102 < 0)
        goto LABEL_151;
      v55 = *v99;
      v56 = *(_QWORD *)(*v99 + 16);
      if (v56 < (unint64_t)v102 || v56 < v109)
        goto LABEL_152;
      if (sub_184A962EC(v55 + 32, v102, (2 * v109) | 1, v91, v105, v92))
      {
        sub_184A96574((uint64_t)v143);
        goto LABEL_92;
      }
      swift_retain();
      swift_unknownObjectRelease();
      v91 = v55 + 32;
      v92 = (2 * v109) | 1;
      v105 = v102;
    }
    else
    {
      v55 = v103;
      v18 = v104;
      v10 = v94;
      v28 = v102;
    }
    v57 = v109 - v28;
    if (__OFSUB__(v109, v28))
      goto LABEL_143;
    v58 = __OFADD__(v18, v57);
    v18 += v57;
    if (v58)
      goto LABEL_144;
    if (v106 >= v95)
      v59 = v106;
    else
      v59 = v106 + 1;
    sub_184A954A4(v106, v59, *(double *)v143);
    if ((v18 & 0x8000000000000000) != 0)
      goto LABEL_145;
    if (HIDWORD(v18))
      goto LABEL_146;
    v60 = v106;
    sub_184A955B8(v106, v59, v18);
    sub_184A96574((uint64_t)v143);
    ++v106;
    if (__OFADD__(v60, 1))
      goto LABEL_147;
    v28 = v109;
    v54 = v55;
LABEL_92:
    v27 = v101;
    if (v101 == v96)
      break;
    v103 = v54;
    v104 = v18;
  }
  v61 = v28;
  swift_release();
  swift_bridgeObjectRelease();
  a6 = v83;
  a1 = v106;
  v62 = v100;
LABEL_96:
  v63 = a1;
  if (a1 < v95)
  {
    v64 = v62;
    sub_184A960E4(a1, v85);
    sub_184A961E8(a1, v85);
    v62 = v64;
  }
  if (v61 < v62)
    sub_184A960E4(v61, v62);
  v65 = *(char **)(v10 + 40);
  v66 = *((_QWORD *)v65 + 2);
  if (v66 < v63)
    goto LABEL_160;
  v67 = v18 - v90;
  if (v63 != v66)
  {
    if (v63 >= v66)
    {
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
      goto LABEL_166;
    }
    v68 = v63;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v65 = sub_184A95C44((uint64_t)v65);
    while ((v68 & 0x8000000000000000) == 0)
    {
      if (v68 >= *((_QWORD *)v65 + 2))
        goto LABEL_139;
      v69 = &v65[4 * v68];
      v70 = v67 + *((unsigned int *)v69 + 8);
      if (v70 < 0)
        goto LABEL_140;
      if (HIDWORD(v70))
        goto LABEL_141;
      ++v68;
      *((_DWORD *)v69 + 8) = v70;
      if (v66 == v68)
      {
        *(_QWORD *)(v10 + 40) = v65;
        goto LABEL_111;
      }
    }
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
    goto LABEL_148;
  }
LABEL_111:
  v71 = *v98;
  if (!*(_QWORD *)(*v98 + 16))
  {
    swift_unknownObjectRelease();
    v73 = NAN;
    v74 = NAN;
    v75 = NAN;
    v76 = NAN;
    goto LABEL_130;
  }
  if ((a5 & 1) != 0)
  {
    v73 = *(double *)v10;
    if ((a7 & 1) != 0)
    {
      v77 = *(_QWORD *)(v10 + 24);
      v78 = *(_QWORD *)(v10 + 48);
      *(_OWORD *)&v137[8] = *(_OWORD *)(v10 + 8);
      *(double *)v137 = v73;
      *(_QWORD *)&v137[24] = v77;
      *(_QWORD *)&v138 = v71;
      *((_QWORD *)&v138 + 1) = v65;
      *(_QWORD *)&v139 = v78;
      sub_184A98058();
      v73 = v79;
      v72 = 0;
      a6 = v80;
      if (!v89)
        goto LABEL_121;
    }
    else
    {
      v72 = 0;
      if (!v89)
        goto LABEL_121;
    }
LABEL_118:
    v81 = (double *)(v10 + 16);
    if ((v72 & 1) == 0)
      goto LABEL_123;
    goto LABEL_119;
  }
  v72 = a7 & 1;
  v73 = *(double *)&a4;
  if (v89)
    goto LABEL_118;
LABEL_121:
  if (*(_QWORD *)(v71 + 16))
  {
    v81 = (double *)(v71 + 32);
    if ((v72 & 1) == 0)
    {
LABEL_123:
      v74 = *(double *)&a6;
      goto LABEL_124;
    }
LABEL_119:
    v74 = *(double *)(v10 + 8);
LABEL_124:
    v75 = *v81;
    if (v86)
    {
      v82 = *(_QWORD *)(v71 + 16);
      if (!v82)
        goto LABEL_164;
      v76 = *(double *)(v71 + 8 * v82 + 24);
      swift_unknownObjectRelease();
    }
    else
    {
      swift_unknownObjectRelease();
      v76 = *(double *)(v10 + 24);
    }
    if (v73 >= v74 || v75 >= v76)
      goto LABEL_162;
LABEL_130:
    *(double *)v10 = v73;
    *(double *)(v10 + 8) = v74;
    *(double *)(v10 + 16) = v75;
    *(double *)(v10 + 24) = v76;
    sub_184A98288(v10);
    return;
  }
LABEL_166:
  __break(1u);
}

uint64_t sub_184A937D4(uint64_t a1, int64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, char a7, __int128 *a8)
{
  _QWORD *v8;
  double v9;
  double v10;
  uint64_t result;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t i;
  unint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  uint64_t v27;
  unint64_t v28;
  __int128 v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(_QWORD);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  double *v50;
  BOOL v51;
  double v52;
  double v53;
  void (*v54)(double *__return_ptr, double *);
  double v55;
  int64_t v56;
  double v57;
  BOOL v58;
  double v59;
  double v60;
  double *v61;
  int64_t v62;
  int64_t v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  int64_t v68;
  int64_t v69;
  unint64_t v70;
  int64_t v71;
  int64_t v72;
  uint64_t v73;
  int64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  char v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double *v88;
  uint64_t v89;
  char v90;
  char v91;
  double v93;
  int64_t v94;
  _BOOL4 v95;
  uint64_t v97;
  double *v98;
  int64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t *v106;
  unint64_t v107;
  int64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  int64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int64_t v119;
  int64_t v120;
  uint64_t (*v121)(_QWORD);
  void (*v122)(double *__return_ptr, double *);
  __int128 v123;
  uint64_t v124;
  void (*v125)(double *__return_ptr, double *);
  uint64_t v126;
  double v127[7];
  double v128;
  double v129;
  double v130;
  double v131;
  __int128 v132;
  double v133;
  void (*v134)(double *__return_ptr, double *);
  uint64_t v135;
  double v136;
  BOOL v137;
  double v138;
  double *v139;
  void (*v140)(double *__return_ptr, double *);
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t (*v150)(_QWORD);
  __int128 v151;
  uint64_t v152;
  __int128 v153;
  __int128 v154;
  unint64_t v155;
  char v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  _OWORD v165[2];
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;

  result = sub_184A981D0();
  if (!a1)
  {
    v21 = 0;
    v112 = 0;
    v22 = a2;
    if (!a2)
    {
LABEL_20:
      i = 0;
      v112 = 0;
      v99 = 0;
      v105 = v8 + 4;
      v26 = *(_QWORD *)(v8[4] + 16) == 0;
      goto LABEL_21;
    }
LABEL_10:
    v24 = v22 - 1;
    if (!__OFSUB__(v22, 1))
      goto LABEL_11;
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v17 = a1 - 1;
  if (__OFSUB__(a1, 1))
  {
LABEL_133:
    __break(1u);
    goto LABEL_134;
  }
  if ((v17 & 0x8000000000000000) != 0)
  {
LABEL_134:
    __break(1u);
    goto LABEL_135;
  }
  v18 = v8[5];
  v19 = *(_QWORD *)(v18 + 16);
  if (v17 >= v19)
  {
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
    goto LABEL_138;
  }
  v20 = v18 + 32;
  v21 = *(unsigned int *)(v20 + 4 * v17);
  if (a1 <= 1)
    goto LABEL_16;
  if (a1 - 2 < v19)
  {
    v22 = a2;
    v112 = *(unsigned int *)(v20 + 4 * (a1 - 2));
    if (!a2)
    {
      v99 = 0;
      for (i = 0; ; i = v22)
      {
        v105 = v8 + 4;
        v26 = i == *(_QWORD *)(v8[4] + 16);
        if (v21 >= v112)
          break;
        __break(1u);
LABEL_16:
        v22 = a2;
        if (!a2)
          goto LABEL_20;
        v112 = 0;
        v24 = a2 - 1;
        if (__OFSUB__(a2, 1))
          goto LABEL_19;
LABEL_11:
        if ((v24 & 0x8000000000000000) != 0)
          goto LABEL_136;
        v25 = v8[5];
        if (v24 >= *(_QWORD *)(v25 + 16))
          goto LABEL_137;
        v99 = *(unsigned int *)(v25 + 4 * v24 + 32);
      }
LABEL_21:
      v95 = v26;
      v27 = v8[6];
      v113 = v8 + 6;
      v28 = *(_QWORD *)(v27 + 16);
      if (v28 < v112 || v28 < v21)
      {
LABEL_131:
        __break(1u);
LABEL_132:
        __break(1u);
        goto LABEL_133;
      }
      v103 = i;
      v93 = *(double *)&a6;
      v94 = v22;
      v90 = a7 & 1;
      v91 = a7;
      v30 = a8[1];
      v109 = (2 * v21) | 1;
      v110 = v27 + 32;
      v161 = *a8;
      v162 = v30;
      v163 = a8[2];
      v31 = v8;
      v126 = *((_QWORD *)a8 + 7);
      v164 = *((_QWORD *)a8 + 6);
      v124 = *((_QWORD *)a8 + 2);
      v123 = *(__int128 *)((char *)a8 + 24);
      v165[0] = v161;
      v165[1] = v30;
      v166 = *((_QWORD *)a8 + 4);
      v32 = *((_QWORD *)a8 + 8);
      v33 = v30;
      sub_184A96640((uint64_t)v165);
      swift_retain();
      sub_184A96640((uint64_t)v165);
      swift_retain();
      swift_retain();
      v104 = v27;
      swift_retain();
      v34 = sub_184A95A64(v33);
      LOBYTE(v33) = v35;
      v37 = v36;
      v39 = v38;
      sub_184A96668((uint64_t)v165);
      swift_release();
      v151 = v161;
      v153 = v123;
      v154 = *(__int128 *)((char *)a8 + 40);
      v152 = v124;
      v155 = v34;
      v156 = v33 & 1;
      v157 = v37;
      v158 = v39;
      v97 = a1;
      v98 = (double *)v31;
      v106 = v31 + 5;
      v107 = v21;
      v108 = a1;
      v115 = v99;
      v159 = v126;
      v160 = v32;
      while (1)
      {
        v119 = v21;
        sub_184A95FA8((uint64_t)&v141);
        v40 = v144;
        if (!v144)
          break;
        v41 = v150;
        v42 = v149;
        v43 = v148;
        v44 = v147;
        v45 = v146;
        v46 = v145;
        v47 = v143;
        v48 = v142;
        v101 = v142;
        v102 = v144;
        v100 = v143;
        while (1)
        {
          v117 = v47;
          v118 = v141;
          v116 = v48;
          v167 = v48;
          v168 = v47;
          v114 = v40;
          v169 = v40;
          v170 = v46;
          v171 = v45;
          v172 = v44;
          v173 = v43;
          v174 = v42;
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          result = sub_184A95E48((uint64_t)&v131);
          v49 = v138;
          v50 = v139;
          v51 = v137;
          v52 = *(double *)&v132;
          v53 = v131;
          v54 = (void (*)(double *__return_ptr, double *))*((_QWORD *)&v132 + 1);
          v55 = v133;
          v125 = v134;
          v121 = v41;
          v122 = v140;
          v56 = v119;
          v57 = v136;
LABEL_30:
          v120 = v56;
          v58 = v50 == *(double **)&v52;
          if (*(_QWORD *)&v49 != *(_QWORD *)&v52 || v50 != *(double **)&v52)
          {
            v9 = v57;
            v59 = v57;
            v60 = v49;
            while (!v51)
            {
              v49 = *(double *)&v50;
              v51 = v58;
              swift_retain();
              v10 = 0.0;
              if (!v51)
              {
                v128 = *(double *)(*(_QWORD *)&v53 + 8 * (_QWORD)v50);
                v54(&v129, &v128);
                v128 = v129;
                v125(v127, &v128);
                v10 = v127[0];
                v61 = (double *)((char *)v50 + 1);
                *(double *)&v50 = v52;
                if (*(_QWORD *)&v49 + 1 != *(_QWORD *)&v52)
                {
                  while (1)
                  {
                    v128 = *(double *)(*(_QWORD *)&v53 + 8 * (_QWORD)v61);
                    v54(&v129, &v128);
                    v128 = v129;
                    v125(v127, &v128);
                    if (v127[0] != v10)
                      break;
                    v61 = (double *)((char *)v61 + 1);
                    if (*(double **)&v52 == v61)
                    {
                      *(double *)&v50 = v52;
                      goto LABEL_40;
                    }
                  }
                  v50 = v61;
                }
LABEL_40:
                v41 = v121;
                if ((uint64_t)v50 < *(uint64_t *)&v49)
                {
                  v136 = v9;
                  __break(1u);
                  goto LABEL_100;
                }
              }
              v127[0] = v59;
              v127[1] = v60;
              v127[2] = v49;
              v127[3] = v53;
              v127[4] = v52;
              *(_QWORD *)&v127[5] = v54;
              v127[6] = v55;
              v122(&v129, v127);
              swift_release();
              v9 = v129;
              v130 = v129;
              result = v41(&v130);
              if ((result & 1) != 0)
              {
                v62 = v115;
                if (v120 >= v115)
                {
                  v62 = v115 + 1;
                  if (__OFADD__(v115, 1))
                    goto LABEL_125;
                  v63 = v120;
                }
                else
                {
                  if (v115 >= v120 + 1)
                    v63 = v120 + 1;
                  else
                    v63 = v115;
                  if (v63 < v120)
                    goto LABEL_124;
                }
                v115 = v62;
                result = sub_184A954A4(v120, v63, v9);
                v57 = v10;
                v56 = v120 + 1;
                if (__OFADD__(v120, 1))
                  goto LABEL_117;
                goto LABEL_30;
              }
              v58 = v50 == *(double **)&v52;
              v9 = v10;
              v59 = v10;
              v60 = v49;
              if (*(_QWORD *)&v49 == *(_QWORD *)&v52)
              {
                v9 = v10;
                v59 = v10;
                v60 = v49;
                if (v50 == *(double **)&v52)
                {
                  v136 = v57;
                  goto LABEL_56;
                }
              }
            }
            goto LABEL_130;
          }
          v10 = v57;
LABEL_56:
          v136 = v10;
          swift_release();
          swift_release();
          swift_release();
          result = swift_release();
          v64 = v114;
          if ((a3 & 1) == 0)
          {
            v117 = v100;
            v116 = v101;
            v64 = v102;
            v68 = v103;
            v69 = v120 - v119;
            if (__OFSUB__(v120, v119))
              goto LABEL_126;
            goto LABEL_71;
          }
          if (v120 < v119)
          {
            __break(1u);
LABEL_117:
            v136 = v10;
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
            goto LABEL_120;
          }
          if (v119 < 0)
            goto LABEL_118;
          v65 = *v113;
          v66 = *(_QWORD *)(*v113 + 16);
          if (v66 < (unint64_t)v119 || v66 < v120)
            goto LABEL_119;
          if (!sub_184A962EC(v65 + 32, v119, (2 * v120) | 1, v110, v112, v109))
            break;
          sub_184A9643C(v118, v116, v117, v114);
          sub_184A95FA8((uint64_t)&v141);
          v48 = v142;
          v47 = v143;
          v40 = v144;
          v46 = v145;
          v45 = v146;
          v44 = v147;
          v43 = v148;
          v42 = v149;
          v41 = v150;
          if (!v144)
            goto LABEL_80;
        }
        swift_retain();
        result = swift_unknownObjectRelease();
        v104 = v65;
        v109 = (2 * v120) | 1;
        v110 = v65 + 32;
        v112 = v119;
        v68 = v103;
        v69 = v120 - v119;
        if (__OFSUB__(v120, v119))
          goto LABEL_126;
LABEL_71:
        v70 = v107 + v69;
        if (__OFADD__(v107, v69))
          goto LABEL_127;
        v71 = v108;
        if (v108 >= v68)
          v72 = v108;
        else
          v72 = v108 + 1;
        result = sub_184A954A4(v108, v72, *(double *)&v118);
        if ((v70 & 0x8000000000000000) != 0)
          goto LABEL_128;
        if (HIDWORD(v70))
          goto LABEL_129;
        v107 = v70;
        sub_184A955B8(v108, v72, v70);
        sub_184A9643C(v118, v116, v117, v64);
        v21 = v120;
        ++v108;
        if (__OFADD__(v71, 1))
        {
          __break(1u);
          break;
        }
      }
LABEL_80:
      swift_release();
      swift_release();
      swift_release();
      if (v108 < v103)
      {
        sub_184A960E4(v108, v94);
        sub_184A961E8(v108, v94);
      }
      result = v119;
      v50 = v98;
      if (v119 < v115)
        result = sub_184A960E4(v119, v115);
      v73 = *v106;
      v74 = *(_QWORD *)(*v106 + 16);
      v75 = v108;
      if (v74 < v108)
        goto LABEL_132;
      if (v108 != v74)
      {
        if (v108 >= v74)
          goto LABEL_140;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_184A95C44(v73);
          v73 = result;
        }
        while ((v75 & 0x8000000000000000) == 0)
        {
          if (v75 >= *(_QWORD *)(v73 + 16))
            goto LABEL_121;
          v76 = v73 + 4 * v75;
          v77 = v107 - v99 + *(unsigned int *)(v76 + 32);
          if (v77 < 0)
            goto LABEL_122;
          if (HIDWORD(v77))
            goto LABEL_123;
          ++v75;
          *(_DWORD *)(v76 + 32) = v77;
          if (v74 == v75)
          {
            *v106 = v73;
            goto LABEL_95;
          }
        }
LABEL_120:
        __break(1u);
LABEL_121:
        __break(1u);
LABEL_122:
        __break(1u);
LABEL_123:
        __break(1u);
LABEL_124:
        v136 = v10;
        __break(1u);
LABEL_125:
        v136 = v10;
        __break(1u);
LABEL_126:
        __break(1u);
LABEL_127:
        __break(1u);
LABEL_128:
        __break(1u);
LABEL_129:
        __break(1u);
LABEL_130:
        v136 = v9;
        __break(1u);
        goto LABEL_131;
      }
LABEL_95:
      result = v104;
      v78 = *v105;
      if (!*(_QWORD *)(*v105 + 16))
      {
LABEL_100:
        swift_unknownObjectRelease();
        v79 = NAN;
        v81 = NAN;
        v82 = NAN;
        v83 = NAN;
        goto LABEL_115;
      }
      if ((a5 & 1) != 0)
      {
        v79 = *v98;
        if ((v91 & 1) != 0)
        {
          v84 = v98[3];
          v85 = v98[6];
          v131 = *v98;
          v132 = *(_OWORD *)(v98 + 1);
          v133 = v84;
          v134 = (void (*)(double *__return_ptr, double *))v78;
          v135 = v73;
          v136 = v85;
          sub_184A98058();
          result = v104;
          v79 = v86;
          v80 = 0;
          v93 = v87;
          if (!v97)
            goto LABEL_106;
        }
        else
        {
          v80 = 0;
          if (!v97)
            goto LABEL_106;
        }
      }
      else
      {
        v79 = *(double *)&a4;
        v80 = v90;
        if (!v97)
        {
LABEL_106:
          if (!*(_QWORD *)(v78 + 16))
            goto LABEL_142;
          v88 = (double *)(v78 + 32);
          if ((v80 & 1) == 0)
            goto LABEL_108;
          goto LABEL_104;
        }
      }
      v88 = v98 + 2;
      if ((v80 & 1) == 0)
      {
LABEL_108:
        v81 = v93;
LABEL_109:
        v82 = *v88;
        if (v95)
        {
          v89 = *(_QWORD *)(v78 + 16);
          if (!v89)
            goto LABEL_141;
          v83 = *(double *)(v78 + 8 * v89 + 24);
          result = swift_unknownObjectRelease();
        }
        else
        {
          result = swift_unknownObjectRelease();
          v83 = v98[3];
        }
        if (v79 >= v81 || v82 >= v83)
        {
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
LABEL_115:
        *v50 = v79;
        v50[1] = v81;
        v50[2] = v82;
        v50[3] = v83;
        return sub_184A98288(v50);
      }
LABEL_104:
      v81 = v98[1];
      goto LABEL_109;
    }
    goto LABEL_10;
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
  return result;
}

unint64_t sub_184A941C8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W4>, _QWORD *a5@<X8>)
{
  unint64_t v5;
  uint64_t v7;
  unint64_t result;
  uint64_t v9;

  v5 = a2;
  v7 = *a1;
  result = *((unsigned int *)a1 + 2);
  if ((a4 & 1) != 0)
  {
    result = sub_184A9764C(result, a2, a3);
    v5 = result;
    a3 = v9;
    goto LABEL_6;
  }
  if ((_DWORD)result == 1)
  {
    v5 = 0;
    a3 = 0;
LABEL_6:
    *a5 = v7;
    a5[1] = v5;
    a5[2] = a3;
    return result;
  }
  if (!(_DWORD)result)
    goto LABEL_6;
  result = sub_184E30B30();
  __break(1u);
  return result;
}

unint64_t sub_184A94274@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X6>, _QWORD *a7@<X8>, char a8)
{
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v11 = *(_QWORD *)result;
  v12 = *(unsigned int *)(result + 16);
  v13 = *(_BYTE *)(result + 20);
  if ((*(_BYTE *)(result + 12) & 1) != 0)
    goto LABEL_2;
  v15 = a3;
  v14 = a2;
  result = *(unsigned int *)(result + 8);
  if ((a4 & 1) != 0)
  {
    result = sub_184A9764C(result, a2, a3);
    v14 = result;
    v15 = v16;
    if ((v13 & 1) == 0)
      goto LABEL_10;
    goto LABEL_8;
  }
  if ((_DWORD)result == 1)
  {
LABEL_2:
    v14 = 0;
    v15 = 0;
    if ((v13 & 1) == 0)
      goto LABEL_10;
LABEL_8:
    a5 = 0;
    a6 = 0;
    goto LABEL_15;
  }
  if ((_DWORD)result)
  {
LABEL_13:
    sub_184E30B30();
    __break(1u);
    goto LABEL_14;
  }
  if ((v13 & 1) != 0)
    goto LABEL_8;
LABEL_10:
  if ((a8 & 1) != 0)
  {
LABEL_14:
    result = sub_184A9764C(v12, a5, a6);
    a5 = result;
    a6 = v17;
    goto LABEL_15;
  }
  if ((_DWORD)v12 == 1)
    goto LABEL_8;
  if ((_DWORD)v12)
    goto LABEL_13;
LABEL_15:
  *a7 = v11;
  a7[1] = v14;
  a7[2] = v15;
  a7[3] = a5;
  a7[4] = a6;
  return result;
}

uint64_t Region.subtracting(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_184A943B0(a1, (uint64_t (*)(_OWORD *))Region.subtract(_:), a2);
}

uint64_t sub_184A943B0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_OWORD *)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[3];
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v3 + 48);
  v6 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a3 = *(_OWORD *)v3;
  *(_OWORD *)(a3 + 16) = v6;
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(v3 + 32);
  *(_QWORD *)(a3 + 48) = v5;
  v7 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v7;
  v9[2] = *(_OWORD *)(a1 + 32);
  v10 = v4;
  return a2(v9);
}

uint64_t Region.isSubset(of:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[2];
  __n128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v2 = *((_QWORD *)a1 + 6);
  v3 = *(_QWORD *)(v1 + 48);
  v4 = a1[1];
  v10 = *a1;
  v11 = v4;
  v12 = a1[2];
  v13 = v2;
  v5 = *(_OWORD *)(v1 + 16);
  v7[0] = *(_OWORD *)v1;
  v7[1] = v5;
  v8 = *(__n128 *)(v1 + 32);
  v9 = v3;
  return Region.isSuperset(of:)((uint64_t)v7, v8) & 1;
}

uint64_t Region.isDisjoint(with:)(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  unsigned __int8 v26;
  double v27;
  double v28;
  _QWORD v29[2];
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v4 = *(double *)a1;
  v3 = *(double *)(a1 + 8);
  v6 = *(double *)(a1 + 16);
  v5 = *(double *)(a1 + 24);
  v7 = *(double *)v2;
  v8 = *(double *)(v2 + 8);
  v9 = *(double *)(v2 + 16);
  v10 = *(double *)(v2 + 24);
  if (v9 >= v5 || v6 >= v10 || v7 >= v3 || v4 >= v8)
    return 1;
  v16 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(v2 + 32);
  v18 = *(_QWORD *)(v2 + 40);
  v20 = *(_QWORD *)(v2 + 48);
  v32 = *(double *)v2;
  v33 = v8;
  v34 = v9;
  v35 = v10;
  v36 = v19;
  v37 = v18;
  v38 = v20;
  if ((~*(_QWORD *)&v7 & 0x7FF0000000000000) == 0 && (*(_QWORD *)&v7 & 0xFFFFFFFFFFFFFLL) != 0)
  {
    a2.n128_f64[0] = v6;
    sub_184A96E0C(0, a2, v5);
LABEL_16:
    v21 = v20 + 32;
    v22 = (*(_QWORD *)&v4 & 0xFFFFFFFFFFFFFLL) != 0 && (~*(_QWORD *)&v4 & 0x7FF0000000000000) == 0;
    v23 = *(_QWORD *)(v16 + 16);
    if (!v22 && !v23)
    {
      v32 = v4;
      v33 = v3;
      v30 = v6;
      v31 = v5;
      sub_184A94720(v18, v21, 1, v29, 2, 0, (uint64_t)&v32, 2uLL, 0, 0);
      return LOBYTE(v29[0]);
    }
    sub_184A94720(v18, v21, 1, &v32, v23, 0, v15, v17 + 32, *(_QWORD *)(v17 + 16), 1);
    return LOBYTE(v32);
  }
  a2.n128_f64[0] = v6;
  sub_184A96E0C(*(_QWORD *)(v19 + 16) == 0, a2, v5);
  if (*(_QWORD *)(v19 + 16))
    goto LABEL_16;
  v32 = v7;
  v33 = v8;
  v30 = v9;
  v31 = v10;
  v24 = (*(_QWORD *)&v4 & 0xFFFFFFFFFFFFFLL) != 0 && (~*(_QWORD *)&v4 & 0x7FF0000000000000) == 0;
  v25 = *(_QWORD *)(v16 + 16);
  if (v24 || v25)
  {
    sub_184A94720((uint64_t)&v32, 2uLL, 0, v29, v25, 0, v15, v17 + 32, *(_QWORD *)(v17 + 16), 1);
    return LOBYTE(v29[0]);
  }
  *(double *)v29 = v4;
  *(double *)&v29[1] = v3;
  v27 = v6;
  v28 = v5;
  sub_184A94720((uint64_t)&v32, 2uLL, 0, &v26, 2, 0, (uint64_t)v29, 2uLL, 0, 0);
  return v26;
}

void sub_184A94720(uint64_t a1@<X3>, unint64_t a2@<X4>, char a3@<W6>, _BYTE *a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, char a10)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  char v17;
  double *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  double *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  double *v28;
  char v29;
  int v30;
  double *v31;
  char v32;
  double v33;
  double v34;
  double v35;
  char v36;
  double v37;
  double v38;
  double v39;
  uint64_t v41;
  uint64_t v42;
  char v43;

  sub_184A8EAA4();
  if ((v13 & 0x10000000000) != 0)
  {
LABEL_80:
    *a4 = 1;
    return;
  }
  LODWORD(v14) = 0;
  LODWORD(v15) = 0;
  v41 = a7 + 32;
  v42 = a1 + 32;
  LOBYTE(v16) = 1;
  v17 = 1;
  while (1)
  {
    if ((v12 & 0x100000000) != 0)
      v15 = v15;
    else
      v15 = v12;
    v17 &= (v12 & 0x100000000uLL) >> 32;
    if ((v13 & 0x100000000) != 0)
      v14 = v14;
    else
      v14 = v13;
    if ((v17 & 1) != 0)
      goto LABEL_12;
    if ((a3 & 1) != 0)
      break;
    v18 = (double *)a1;
    v19 = a2;
    if ((_DWORD)v15)
    {
      if ((_DWORD)v15 != 1)
        goto LABEL_88;
LABEL_12:
      v18 = 0;
      v19 = 0;
    }
LABEL_25:
    v16 &= (v13 & 0x100000000uLL) >> 32;
    if ((v16 & 1) == 0)
    {
      if ((a10 & 1) != 0)
      {
        v25 = *(_QWORD *)(a7 + 16);
        if ((_DWORD)v14)
        {
          if (v25 < v14)
            goto LABEL_87;
          v26 = *(unsigned int *)(v41 + 4 * v14 - 4);
          if (v25 <= v14)
            goto LABEL_83;
        }
        else
        {
          v26 = 0;
          if (v25 <= v14)
            goto LABEL_83;
        }
        v27 = *(unsigned int *)(v41 + 4 * v14);
        v24 = v27 - v26;
        if (v27 < v26)
          goto LABEL_85;
        v23 = (double *)(a8 + 8 * v26);
        if (!a8)
          v23 = 0;
        if (v24)
          goto LABEL_39;
      }
      else
      {
        v23 = (double *)a7;
        v24 = a8;
        if ((_DWORD)v14)
        {
          if ((_DWORD)v14 != 1)
            goto LABEL_88;
          goto LABEL_4;
        }
        if (a8)
        {
LABEL_39:
          if (!v19)
            goto LABEL_4;
          if (v18[v19 - 1] <= *v23)
            goto LABEL_4;
          v28 = &v23[v24];
          if (*(v28 - 1) <= *v18)
            goto LABEL_4;
          v29 = 0;
          v30 = 0;
          v31 = &v18[v19];
          if (!v18)
            v31 = 0;
          if (!v23)
            v28 = 0;
          v32 = 2;
          v33 = 0.0;
          while (1)
          {
            if (v32)
            {
              if (v32 == 1)
              {
                if (!v18 || v18 == v31)
                {
                  if ((v29 & 1) != 0)
                    break;
LABEL_48:
                  v43 = 1;
                  v30 ^= 2u;
                  if (v30 == 3)
                    goto LABEL_81;
                  v32 = 0;
                  goto LABEL_50;
                }
                v34 = *v18++;
                v35 = v34;
                if ((v29 & 1) != 0)
                  goto LABEL_73;
              }
              else
              {
                v35 = 0.0;
                if (!v18 || v18 == v31)
                {
                  v36 = 1;
                  if (!v23)
                    goto LABEL_72;
                }
                else
                {
                  v36 = 0;
                  v38 = *v18++;
                  v35 = v38;
                  if (!v23)
                    goto LABEL_72;
                }
                if (v23 == v28)
                {
LABEL_72:
                  v33 = 0.0;
                  if ((v36 & 1) != 0)
                    break;
LABEL_73:
                  v32 = 1;
                  v43 = 1;
                  v30 ^= 1u;
                  if (v30 == 3)
                    goto LABEL_81;
LABEL_51:
                  v29 = v43;
                  continue;
                }
                v39 = *v23++;
                v33 = v39;
                if ((v36 & 1) != 0)
                  goto LABEL_48;
              }
            }
            else
            {
              v36 = v29;
              if (!v23 || v23 == v28)
                goto LABEL_72;
              v35 = v33;
              v37 = *v23++;
              v33 = v37;
              if ((v29 & 1) != 0)
                goto LABEL_48;
            }
            if (v35 >= v33)
            {
              if (v33 >= v35)
              {
                v43 = 0;
                if (!v30)
                {
LABEL_81:
                  *a4 = 0;
                  return;
                }
                v30 ^= 3u;
                v32 = 2;
LABEL_50:
                v33 = 0.0;
                goto LABEL_51;
              }
              v30 ^= 2u;
              if (v30 == 3)
                goto LABEL_81;
              v32 = 0;
              v33 = v35;
              v29 = 0;
            }
            else
            {
              v30 ^= 1u;
              if (v30 == 3)
                goto LABEL_81;
              v32 = 1;
              v29 = 0;
            }
          }
        }
      }
    }
LABEL_4:
    sub_184A8EAA4();
    if ((v13 & 0x10000000000) != 0)
      goto LABEL_80;
  }
  v20 = *(_QWORD *)(a1 + 16);
  if (!(_DWORD)v15)
  {
    v21 = 0;
    if (v20 <= v15)
      goto LABEL_82;
    goto LABEL_22;
  }
  if (v20 < v15)
    goto LABEL_86;
  v21 = *(unsigned int *)(v42 + 4 * v15 - 4);
  if (v20 > v15)
  {
LABEL_22:
    v22 = *(unsigned int *)(v42 + 4 * v15);
    v19 = v22 - v21;
    if (v22 < v21)
      goto LABEL_84;
    v18 = (double *)(a2 + 8 * v21);
    if (!a2)
      v18 = 0;
    goto LABEL_25;
  }
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  sub_184E30B30();
  __break(1u);
}

void sub_184A94B1C(double *a1@<X3>, unint64_t a2@<X4>, char a3@<W6>, _BYTE *a4@<X8>, uint64_t a5, uint64_t a6, double *a7, unint64_t a8, uint64_t a9, char a10)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  char v17;
  double *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  double *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  double *v28;
  char v29;
  int v30;
  double *v31;
  char v32;
  double v33;
  double v34;
  double v35;
  char v36;
  double v37;
  double v38;
  double v39;
  _QWORD *v40;
  _QWORD *v41;
  char v43;

  sub_184A8EAA4();
  if ((v13 & 0x10000000000) != 0)
  {
LABEL_80:
    *a4 = 1;
    return;
  }
  LODWORD(v14) = 0;
  LODWORD(v15) = 0;
  v41 = a1 + 4;
  v40 = a7 + 4;
  LOBYTE(v16) = 1;
  v17 = 1;
  while (1)
  {
    if ((v12 & 0x100000000) != 0)
      v15 = v15;
    else
      v15 = v12;
    v17 &= (v12 & 0x100000000uLL) >> 32;
    if ((v13 & 0x100000000) != 0)
      v14 = v14;
    else
      v14 = v13;
    if ((v17 & 1) != 0)
      goto LABEL_12;
    if ((a3 & 1) != 0)
    {
      v20 = *((_QWORD *)a1 + 2);
      if ((_DWORD)v15)
      {
        if (v20 < v15)
          goto LABEL_86;
        v21 = *((unsigned int *)v41 + v15 - 1);
        if (v20 <= v15)
        {
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
LABEL_85:
          __break(1u);
LABEL_86:
          __break(1u);
LABEL_87:
          __break(1u);
LABEL_88:
          sub_184E30B30();
          __break(1u);
          return;
        }
      }
      else
      {
        v21 = 0;
        if (v20 <= v15)
          goto LABEL_82;
      }
      v22 = *((unsigned int *)v41 + v15);
      v19 = v22 - v21;
      if (v22 < v21)
        goto LABEL_84;
      v18 = (double *)(a2 + 8 * v21);
      if (!a2)
        v18 = 0;
    }
    else
    {
      v18 = a1;
      v19 = a2;
      if ((_DWORD)v15)
      {
        if ((_DWORD)v15 != 1)
          goto LABEL_88;
LABEL_12:
        v18 = 0;
        v19 = 0;
      }
    }
    v16 &= (v13 & 0x100000000uLL) >> 32;
    if ((v16 & 1) != 0)
      goto LABEL_4;
    if ((a10 & 1) == 0)
    {
      v23 = a7;
      v24 = a8;
      if ((_DWORD)v14)
      {
        if ((_DWORD)v14 != 1)
          goto LABEL_88;
      }
      else if (a8)
      {
        break;
      }
      goto LABEL_4;
    }
    v25 = *((_QWORD *)a7 + 2);
    if ((_DWORD)v14)
    {
      if (v25 < v14)
        goto LABEL_87;
      v26 = *((unsigned int *)v40 + v14 - 1);
      if (v25 <= v14)
        goto LABEL_83;
    }
    else
    {
      v26 = 0;
      if (v25 <= v14)
        goto LABEL_83;
    }
    v27 = *((unsigned int *)v40 + v14);
    v24 = v27 - v26;
    if (v27 < v26)
      goto LABEL_85;
    v23 = (double *)(a8 + 8 * v26);
    if (!a8)
      v23 = 0;
    if (v24)
      break;
LABEL_4:
    sub_184A8EAA4();
    if ((v13 & 0x10000000000) != 0)
      goto LABEL_80;
  }
  if (v19)
  {
    if (v18[v19 - 1] > *v23)
    {
      v28 = &v23[v24];
      if (*(v28 - 1) > *v18)
      {
        v29 = 0;
        v30 = 0;
        v31 = &v18[v19];
        if (!v18)
          v31 = 0;
        if (!v23)
          v28 = 0;
        v32 = 2;
        v33 = 0.0;
        while (1)
        {
          if (v32)
          {
            if (v32 == 1)
            {
              if (!v18 || v18 == v31)
              {
                if ((v29 & 1) != 0)
                  goto LABEL_4;
LABEL_48:
                v43 = 1;
                if (!v30)
                  break;
                v32 = 0;
                v30 ^= 2u;
                goto LABEL_50;
              }
              v34 = *v18++;
              v35 = v34;
              if ((v29 & 1) != 0)
                goto LABEL_73;
            }
            else
            {
              v35 = 0.0;
              if (!v18 || v18 == v31)
              {
                v36 = 1;
                if (!v23)
                  goto LABEL_72;
              }
              else
              {
                v36 = 0;
                v38 = *v18++;
                v35 = v38;
                if (!v23)
                  goto LABEL_72;
              }
              if (v23 == v28)
              {
LABEL_72:
                v33 = 0.0;
                if ((v36 & 1) != 0)
                  goto LABEL_4;
LABEL_73:
                v32 = 1;
                v43 = 1;
                v30 ^= 1u;
                if (v30 == 2)
                  break;
LABEL_51:
                v29 = v43;
                continue;
              }
              v39 = *v23++;
              v33 = v39;
              if ((v36 & 1) != 0)
                goto LABEL_48;
            }
          }
          else
          {
            v36 = v29;
            if (!v23 || v23 == v28)
              goto LABEL_72;
            v35 = v33;
            v37 = *v23++;
            v33 = v37;
            if ((v29 & 1) != 0)
              goto LABEL_48;
          }
          if (v35 >= v33)
          {
            if (v33 >= v35)
            {
              v43 = 0;
              v30 ^= 3u;
              if (v30 == 2)
                break;
              v32 = 2;
LABEL_50:
              v33 = 0.0;
              goto LABEL_51;
            }
            if (!v30)
              break;
            v32 = 0;
            v30 ^= 2u;
            v33 = v35;
            v29 = 0;
          }
          else
          {
            v30 ^= 1u;
            if (v30 == 2)
              break;
            v32 = 1;
            v29 = 0;
          }
        }
      }
    }
  }
  *a4 = 0;
}

uint64_t sub_184A94F14@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W4>, unint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>, char a8, _QWORD *a9, uint64_t *a10, uint64_t a11)
{
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v13 = a2;
  v15 = a11;
  v16 = *a1;
  v17 = *((unsigned int *)a1 + 4);
  v18 = *((_BYTE *)a1 + 20);
  if ((*((_BYTE *)a1 + 12) & 1) != 0)
    goto LABEL_2;
  v19 = a3;
  v20 = *((unsigned int *)a1 + 2);
  if ((a4 & 1) != 0)
  {
    v21 = sub_184A9764C(v20, a2, a3);
    v15 = a11;
    v13 = v21;
    v19 = v22;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_10;
  }
  if ((_DWORD)v20 == 1)
  {
LABEL_2:
    v13 = 0;
    v19 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_8;
  }
  else
  {
    if ((_DWORD)v20)
    {
LABEL_13:
      sub_184E30B30();
      __break(1u);
      goto LABEL_14;
    }
    if ((v18 & 1) != 0)
    {
LABEL_8:
      a5 = 0;
      a6 = 0;
      goto LABEL_15;
    }
  }
LABEL_10:
  if ((a8 & 1) == 0)
  {
    if ((_DWORD)v17 != 1)
    {
      if (!(_DWORD)v17)
        goto LABEL_15;
      goto LABEL_13;
    }
    goto LABEL_8;
  }
LABEL_14:
  v23 = a5;
  v24 = v15;
  v25 = sub_184A9764C(v17, v23, a6);
  v15 = v24;
  a5 = v25;
  a6 = v26;
LABEL_15:
  if (*a9 != -1)
  {
    v29 = v15;
    swift_once();
    v15 = v29;
  }
  v27 = *a10;
  *(_QWORD *)(a7 + 8) = v13;
  *(_QWORD *)(a7 + 16) = v19;
  *(_QWORD *)(a7 + 24) = a5;
  *(_QWORD *)(a7 + 32) = a6;
  *(_QWORD *)(a7 + 40) = 0x7FF8000000000000;
  *(_BYTE *)(a7 + 48) = 0;
  *(_QWORD *)(a7 + 56) = sub_184AA3628;
  *(_QWORD *)(a7 + 64) = 0;
  *(_QWORD *)(a7 + 72) = 0x7FF8000000000000;
  *(_BYTE *)(a7 + 80) = 0;
  *(_QWORD *)(a7 + 88) = v15;
  *(_QWORD *)(a7 + 96) = v27;
  *(_QWORD *)(a7 + 104) = sub_184A9F730;
  *(_QWORD *)(a7 + 112) = 0;
  *(_QWORD *)(a7 + 120) = sub_184AA00B4;
  *(_QWORD *)(a7 + 128) = 0;
  *(_QWORD *)a7 = v16;
  return swift_retain();
}

int64x2_t sub_184A950D8@<Q0>(int64x2_t *a1@<X8>)
{
  int64x2_t result;
  uint64_t v2;

  result = vdupq_n_s64(0x7FF8000000000000uLL);
  *a1 = result;
  a1[1] = result;
  v2 = MEMORY[0x1E0DEE9D8];
  a1[2].i64[0] = MEMORY[0x1E0DEE9D8];
  a1[2].i64[1] = v2;
  a1[3].i64[0] = v2;
  return result;
}

uint64_t sub_184A950F8(uint64_t a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[2];
  __n128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *((_QWORD *)v1 + 6);
  v4 = v1[1];
  v10 = *v1;
  v11 = v4;
  v12 = v1[2];
  v13 = v3;
  v5 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v5;
  v8 = *(__n128 *)(a1 + 32);
  v9 = v2;
  return Region.isSuperset(of:)((uint64_t)v7, v8) & 1;
}

uint64_t sub_184A95158@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_184A9517C(a1, (void (*)(_OWORD *))Region.formUnion(_:), a2);
}

uint64_t sub_184A95164@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_184A952EC(a1, (uint64_t (*)(_OWORD *))Region.formIntersection(_:), a2);
}

uint64_t sub_184A95170@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_184A9517C(a1, (void (*)(_OWORD *))Region.formSymmetricDifference(_:), a2);
}

uint64_t sub_184A9517C@<X0>(uint64_t a1@<X0>, void (*a2)(_OWORD *)@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(v3 + 48);
  v8 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a3 = *(_OWORD *)v3;
  *(_OWORD *)(a3 + 16) = v8;
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(v3 + 32);
  *(_QWORD *)(a3 + 48) = v7;
  v9 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v9;
  v12 = v4;
  v13 = v5;
  v14 = v6;
  a2(v11);
  swift_release();
  swift_release();
  return swift_release();
}

BOOL sub_184A951F4(float64_t *a1, double *a2)
{
  BOOL v2;

  v2 = Region.insert(_:)(a1, a2);
  swift_release();
  swift_release();
  swift_release();
  return v2;
}

uint64_t sub_184A95244@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  Region.update(with:)(a1, a2);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_184A95284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_184A952A0(a1, a2, a3, (void (*)(void))Region.formUnion(_:));
}

uint64_t sub_184A95294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_184A952A0(a1, a2, a3, (void (*)(void))Region.formSymmetricDifference(_:));
}

uint64_t sub_184A952A0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_184A952E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_184A952EC(a1, (uint64_t (*)(_OWORD *))Region.subtract(_:), a2);
}

uint64_t sub_184A952EC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_OWORD *)@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[3];
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v3 + 48);
  v6 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a3 = *(_OWORD *)v3;
  *(_OWORD *)(a3 + 16) = v6;
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(v3 + 32);
  *(_QWORD *)(a3 + 48) = v5;
  v7 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v7;
  v9[2] = *(_OWORD *)(a1 + 32);
  v10 = v4;
  return a2(v9);
}

uint64_t sub_184A95348(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[2];
  __n128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v2 = *((_QWORD *)a1 + 6);
  v3 = *(_QWORD *)(v1 + 48);
  v4 = a1[1];
  v10 = *a1;
  v11 = v4;
  v12 = a1[2];
  v13 = v2;
  v5 = *(_OWORD *)(v1 + 16);
  v7[0] = *(_OWORD *)v1;
  v7[1] = v5;
  v8 = *(__n128 *)(v1 + 32);
  v9 = v3;
  return Region.isSuperset(of:)((uint64_t)v7, v8) & 1;
}

BOOL sub_184A953B0()
{
  _QWORD *v0;

  return (*v0 & 0xFFFFFFFFFFFFFLL) != 0 && (~*v0 & 0x7FF0000000000000) == 0;
}

uint64_t sub_184A953D8@<X0>(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  int64x2_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t result;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  _OWORD v14[2];
  __n128 v15;
  uint64_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  unint64_t v20;

  v3 = vdupq_n_s64(0x7FF8000000000000uLL);
  v17 = v3;
  v18 = v3;
  v4 = MEMORY[0x1E0DEE9D8];
  v19.i64[0] = MEMORY[0x1E0DEE9D8];
  v19.i64[1] = MEMORY[0x1E0DEE9D8];
  v20 = MEMORY[0x1E0DEE9D8];
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = (_QWORD *)(a1 + 80);
    do
    {
      v7 = *v6;
      v8 = *((_OWORD *)v6 - 2);
      v14[0] = *((_OWORD *)v6 - 3);
      v14[1] = v8;
      v15 = *((__n128 *)v6 - 1);
      v16 = v7;
      Region.formUnion(_:)((uint64_t)v14, v15);
      v6 += 7;
      --v5;
    }
    while (v5);
    result = swift_bridgeObjectRelease();
    v11 = v17;
    v10 = v18;
    v12 = v19;
    v4 = v20;
  }
  else
  {
    v13 = v3;
    result = swift_bridgeObjectRelease();
    v11 = v13;
    v12 = vdupq_n_s64(v4);
    v10 = v13;
  }
  *a2 = v11;
  a2[1] = v10;
  a2[2] = v12;
  a2[3].i64[0] = v4;
  return result;
}

unint64_t sub_184A954A4(unint64_t result, int64_t a2, double a3)
{
  uint64_t *v3;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  int64_t v12;
  double *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  double *v17;
  uint64_t v18;
  uint64_t v19;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v7 = result;
  v8 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  *v3 = v5;
  if (!(_DWORD)result || v10 > *(_QWORD *)(v5 + 24) >> 1)
  {
    if (v6 <= v10)
      v12 = v6 + v9;
    else
      v12 = v6;
    result = (unint64_t)sub_184A95C28((char *)result, v12, 1);
    v5 = *v3;
  }
  v13 = (double *)(v5 + 32 + 8 * v7);
  if (!v9)
    goto LABEL_19;
  v14 = *(_QWORD *)(v5 + 16);
  v15 = __OFSUB__(v14, a2);
  v16 = v14 - a2;
  if (v15)
    goto LABEL_25;
  result = (unint64_t)(v13 + 1);
  v17 = (double *)(v5 + 32 + 8 * a2);
  if (v13 + 1 != v17 || result >= (unint64_t)&v17[v16])
    result = (unint64_t)memmove((void *)result, v17, 8 * v16);
  v18 = *(_QWORD *)(v5 + 16);
  v15 = __OFADD__(v18, v9);
  v19 = v18 + v9;
  if (!v15)
  {
    *(_QWORD *)(v5 + 16) = v19;
LABEL_19:
    *v13 = a3;
    *v3 = v5;
    return result;
  }
LABEL_26:
  __break(1u);
  return result;
}

unint64_t sub_184A955B8(unint64_t result, int64_t a2, int a3)
{
  uint64_t *v3;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  int64_t v12;
  _DWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v7 = result;
  v8 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  *v3 = v5;
  if (!(_DWORD)result || v10 > *(_QWORD *)(v5 + 24) >> 1)
  {
    if (v6 <= v10)
      v12 = v6 + v9;
    else
      v12 = v6;
    result = (unint64_t)sub_184A95C0C((char *)result, v12, 1);
    v5 = *v3;
  }
  v13 = (_DWORD *)(v5 + 32 + 4 * v7);
  if (!v9)
    goto LABEL_19;
  v14 = *(_QWORD *)(v5 + 16);
  v15 = __OFSUB__(v14, a2);
  v16 = v14 - a2;
  if (v15)
    goto LABEL_25;
  result = (unint64_t)(v13 + 1);
  v17 = (_DWORD *)(v5 + 32 + 4 * a2);
  if (v13 + 1 != v17 || result >= (unint64_t)&v17[v16])
    result = (unint64_t)memmove((void *)result, v17, 4 * v16);
  v18 = *(_QWORD *)(v5 + 16);
  v15 = __OFADD__(v18, v9);
  v19 = v18 + v9;
  if (!v15)
  {
    *(_QWORD *)(v5 + 16) = v19;
LABEL_19:
    *v13 = a3;
    *v3 = v5;
    return result;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_184A956C8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;

  if ((a4 & 1) != 0)
    return swift_release();
  return result;
}

uint64_t sub_184A956D4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_184A956FC(a1, &qword_1EDD19780, &qword_1EDD2C950, (uint64_t)sub_184A96638, a2);
}

uint64_t sub_184A956FC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;

  return sub_184A94F14(a1, *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), *(_BYTE *)(v5 + 40), *(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 56), a5, *(_BYTE *)(v5 + 72), a2, a3, a4);
}

unint64_t sub_184A95760@<X0>(unint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_184A94274(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_BYTE *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), a2, *(_BYTE *)(v2 + 72));
}

unint64_t sub_184A957BC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_184A941C8(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_BYTE *)(v2 + 40), a2);
}

uint64_t sub_184A957E8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_184A956FC(a1, &qword_1EDD19788, &qword_1EDD2C958, (uint64_t)sub_184A96638, a2);
}

uint64_t sub_184A9581C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_184A956FC(a1, &qword_1EDD19790, &qword_1EDD2C960, (uint64_t)sub_184A96638, a2);
}

uint64_t objectdestroy_44Tm()
{
  uint64_t v0;

  sub_184A956C8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  return swift_deallocObject();
}

_QWORD *sub_184A958A8(int64_t a1)
{
  uint64_t *v1;
  double v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t (*v6)(__int128 *);
  _QWORD *(*v7)(_QWORD *__return_ptr, _QWORD);
  unint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  __int128 *v12;
  uint64_t v13;
  char v14;
  _QWORD *result;
  _BYTE *v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  _QWORD *(*v21)(_QWORD *__return_ptr, _QWORD);
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  double v26;
  uint64_t v27;

  v5 = *v1;
  v6 = (uint64_t (*)(__int128 *))v1[1];
  v7 = (_QWORD *(*)(_QWORD *__return_ptr, _QWORD))v1[3];
  v27 = v5;
  v8 = *(_QWORD *)(v5 + 16);
  if (v8 == a1)
  {
    v2 = 0.0;
    return *(_QWORD **)&v2;
  }
  if (v8 <= a1)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    sub_184A96610((uint64_t)&v27);
    result = (_QWORD *)swift_release();
LABEL_17:
    if (v3 >= a1)
      return *(_QWORD **)&v2;
    goto LABEL_20;
  }
  v2 = 0.0;
  v3 = *(_QWORD *)(v5 + 16);
  v9 = v5 + 32;
  v21 = v7;
  v22 = v5 + 88;
  v10 = 1;
  v11 = a1;
  v20 = v5 + 32;
LABEL_5:
  v12 = (__int128 *)(v9 + 32 * v11);
  v13 = *((_QWORD *)v12 + 2);
  v14 = *((_BYTE *)v12 + 24);
  v23 = *v12;
  v24 = v13;
  v25 = v14;
  result = v7(&v26, &v23);
  if ((v10 & 1) != 0)
  {
    v2 = v26;
    goto LABEL_8;
  }
  if (v26 == v2)
  {
LABEL_8:
    if (v11 + 1 != v8)
    {
      sub_184A965E8((uint64_t)&v27);
      result = (_QWORD *)swift_retain();
      v16 = (_BYTE *)(v22 + 32 * v11++);
      while (v11 < v8)
      {
        v17 = *((_QWORD *)v16 - 1);
        v18 = *v16;
        v23 = *(_OWORD *)(v16 - 24);
        v24 = v17;
        v25 = v18;
        swift_retain();
        v19 = v6(&v23);
        result = (_QWORD *)swift_release();
        if ((v19 & 1) != 0)
        {
          sub_184A96610((uint64_t)&v27);
          swift_release();
          v10 = 0;
          v9 = v20;
          v7 = v21;
          if (v11 < v8)
            goto LABEL_5;
          goto LABEL_15;
        }
        ++v11;
        v16 += 32;
        if (v8 == v11)
          goto LABEL_16;
      }
      goto LABEL_21;
    }
    goto LABEL_17;
  }
  if ((uint64_t)v11 >= a1)
    return *(_QWORD **)&v2;
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
  return result;
}

unint64_t sub_184A95A64(unint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  int64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t *__return_ptr, uint64_t *);
  _QWORD *(*v9)(double *__return_ptr, uint64_t *);
  int64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  double v18;

  v2 = v1[1];
  v3 = v1[2];
  v4 = v2 + v3;
  if (__OFADD__(v2, v3))
    goto LABEL_24;
  v5 = result;
  if (v4 == result)
    return 0;
  v6 = 0x100000000;
  if (result > 0x100000000)
    v6 = result;
  v13 = v6;
  if (__OFSUB__(result, v3))
    goto LABEL_21;
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_26:
    __break(1u);
    return result;
  }
  if (HIDWORD(result))
    goto LABEL_22;
  v7 = *v1;
  v8 = (void (*)(uint64_t *__return_ptr, uint64_t *))v1[3];
  v9 = (_QWORD *(*)(double *__return_ptr, uint64_t *))v1[5];
  v14 = *(_QWORD *)(*v1 + 8 * (result - v3));
  v15 = result;
  v8(&v16, &v14);
  v14 = v16;
  v15 = v17;
  result = (unint64_t)v9(&v18, &v14);
  if (v3 > v5 || v4 <= v5)
    goto LABEL_23;
  v10 = v5 + 1;
  v12 = v18;
  if (v5 + 1 != v4)
  {
    v11 = v18;
    while (!__OFSUB__(v10, v3))
    {
      if (v13 == v10)
        goto LABEL_22;
      v14 = *(_QWORD *)(v7 + 8 * (v10 - v3));
      v15 = v10;
      v8(&v16, &v14);
      v14 = v16;
      v15 = v17;
      result = (unint64_t)v9(&v18, &v14);
      if (v18 != v11)
        goto LABEL_19;
      if (v10 >= v4)
        goto LABEL_23;
      if (v4 == ++v10)
        goto LABEL_18;
    }
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
LABEL_18:
  v10 = v4;
LABEL_19:
  result = *(_QWORD *)&v12;
  if (v10 < v5)
    goto LABEL_25;
  return result;
}

char *sub_184A95C0C(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_184A95C58(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_184A95C28(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_184A95D50(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_184A95C44(uint64_t a1)
{
  return sub_184A95C58(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_184A95C58(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD19EE0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 29;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8])
      memmove(v13, v14, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 4 * v8);
  }
  swift_release();
  return v10;
}

char *sub_184A95D50(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ECDA5B50);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_release();
  return v10;
}

uint64_t sub_184A95E48@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v7;
  void (*v8)(double *__return_ptr, uint64_t *);
  double v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  double v14;

  v3 = *(uint64_t **)v1;
  v4 = *(_QWORD *)(v1 + 8);
  v6 = *(void (**)(uint64_t *__return_ptr, uint64_t *))(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v8 = *(void (**)(double *__return_ptr, uint64_t *))(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  if (!v4)
  {
    v10 = 0;
    v9 = 0.0;
    goto LABEL_10;
  }
  swift_retain();
  swift_retain();
  v12 = *v3;
  v6(&v13, &v12);
  v12 = v13;
  v8(&v14, &v12);
  v9 = v14;
  if (v4 == 1)
  {
LABEL_6:
    swift_release();
    result = swift_release();
    v10 = v4;
    if (v4 < 0)
      goto LABEL_11;
LABEL_10:
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v5;
    *(_QWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 40) = v7;
    *(double *)(a1 + 48) = v9;
    *(_BYTE *)(a1 + 56) = v4 == 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = v10;
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(v1 + 48);
    return result;
  }
  v10 = 1;
  while (1)
  {
    v12 = v3[v10];
    v6(&v13, &v12);
    v12 = v13;
    v8(&v14, &v12);
    if (v14 != v9)
      break;
    if (v4 == ++v10)
      goto LABEL_6;
  }
  swift_release();
  result = swift_release();
  if ((v10 & 0x8000000000000000) == 0)
    goto LABEL_10;
LABEL_11:
  __break(1u);
  return result;
}

void sub_184A95FA8(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(_QWORD *);
  uint64_t v17;
  _QWORD v18[10];
  __int128 v19;
  uint64_t v20;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = v3 + v4;
  if (__OFADD__(v3, v4))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return;
  }
  v7 = *(_QWORD *)(v1 + 72);
  v6 = *(_QWORD *)(v1 + 80);
  if (v7 == v5 && v6 == v5)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    return;
  }
  if ((*(_BYTE *)(v1 + 64) & 1) != 0)
    goto LABEL_13;
  v9 = *(_QWORD *)(v1 + 56);
  v10 = *(_QWORD *)(v1 + 24);
  if (*(_QWORD *)v1)
    v11 = *(_QWORD *)v1 + 8 * v7;
  else
    v11 = 0;
  v12 = *(_QWORD *)(v1 + 48);
  v18[6] = *(_QWORD *)v1;
  v18[7] = v3;
  v18[8] = v4;
  v18[9] = v10;
  v19 = *(_OWORD *)(v1 + 32);
  v17 = v19;
  v20 = v12;
  swift_retain();
  *(_QWORD *)(v1 + 56) = sub_184A95A64(v6);
  *(_BYTE *)(v1 + 64) = v13 & 1;
  *(_QWORD *)(v1 + 72) = v14;
  *(_QWORD *)(v1 + 80) = v15;
  v16 = *(void (**)(_QWORD *))(v1 + 88);
  v18[0] = v9;
  v18[1] = v11;
  v18[2] = v6 - v7;
  v18[3] = v7;
  v18[4] = v10;
  v18[5] = v17;
  v16(v18);
  swift_release();
}

unint64_t sub_184A960E4(unint64_t result, int64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v6 = result;
  v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  *v2 = v4;
  if ((_DWORD)result && v9 <= *(_QWORD *)(v4 + 24) >> 1)
  {
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    if (v5 <= v9)
      v10 = v5 + v8;
    else
      v10 = v5;
    result = (unint64_t)sub_184A95C28((char *)result, v10, 1);
    v4 = *v2;
    if (!v8)
      goto LABEL_20;
  }
  v11 = *(_QWORD *)(v4 + 16);
  v12 = __OFSUB__(v11, a2);
  v13 = v11 - a2;
  if (v12)
    goto LABEL_26;
  result = v4 + 32 + 8 * v6;
  v14 = (const void *)(v4 + 32 + 8 * a2);
  if (v6 != a2 || result >= (unint64_t)v14 + 8 * v13)
    result = (unint64_t)memmove((void *)result, v14, 8 * v13);
  v15 = *(_QWORD *)(v4 + 16);
  v12 = __OFADD__(v15, v8);
  v16 = v15 + v8;
  if (!v12)
  {
    *(_QWORD *)(v4 + 16) = v16;
LABEL_20:
    *v2 = v4;
    return result;
  }
LABEL_27:
  __break(1u);
  return result;
}

unint64_t sub_184A961E8(unint64_t result, int64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v6 = result;
  v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  *v2 = v4;
  if ((_DWORD)result && v9 <= *(_QWORD *)(v4 + 24) >> 1)
  {
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    if (v5 <= v9)
      v10 = v5 + v8;
    else
      v10 = v5;
    result = (unint64_t)sub_184A95C0C((char *)result, v10, 1);
    v4 = *v2;
    if (!v8)
      goto LABEL_20;
  }
  v11 = *(_QWORD *)(v4 + 16);
  v12 = __OFSUB__(v11, a2);
  v13 = v11 - a2;
  if (v12)
    goto LABEL_26;
  result = v4 + 32 + 4 * v6;
  v14 = (const void *)(v4 + 32 + 4 * a2);
  if (v6 != a2 || result >= (unint64_t)v14 + 4 * v13)
    result = (unint64_t)memmove((void *)result, v14, 4 * v13);
  v15 = *(_QWORD *)(v4 + 16);
  v12 = __OFADD__(v15, v8);
  v16 = v15 + v8;
  if (!v12)
  {
    *(_QWORD *)(v4 + 16) = v16;
LABEL_20:
    *v2 = v4;
    return result;
  }
LABEL_27:
  __break(1u);
  return result;
}

BOOL sub_184A962EC(_BOOL8 result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  int64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  unint64_t v11;
  double v12;
  unint64_t v13;
  _BOOL8 v14;

  v6 = a6 >> 1;
  v7 = a3 >> 1;
  v8 = a2;
  v9 = a5;
  while (1)
  {
    v10 = 0.0;
    v11 = a6 >> 1;
    v12 = 0.0;
    if (v9 == v6)
      goto LABEL_6;
    if (v9 < a5 || v9 >= v6)
      break;
    v11 = v9 + 1;
    v12 = *(double *)(a4 + 8 * v9);
LABEL_6:
    v13 = a3 >> 1;
    v14 = v8 == v7;
    if (v8 != v7)
    {
      if (v8 < a2 || v8 >= v7)
        goto LABEL_15;
      v13 = v8 + 1;
      v10 = *(double *)(result + 8 * v8);
    }
    if (v9 != v6)
    {
      v14 = 0;
      if (v8 != v7)
      {
        v8 = v13;
        v9 = v11;
        if (v12 == v10)
          continue;
      }
    }
    return v14;
  }
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_184A96388@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_184A956FC(a1, &qword_1EDD19798, &qword_1EDD2C968, (uint64_t)sub_184A96638, a2);
}

uint64_t objectdestroyTm()
{
  uint64_t v0;

  sub_184A956C8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  sub_184A956C8(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_BYTE *)(v0 + 72));
  return swift_deallocObject();
}

unint64_t sub_184A963F8()
{
  unint64_t result;

  result = qword_1EDD19ED8;
  if (!qword_1EDD19ED8)
  {
    result = MEMORY[0x186DC3348](&protocol conformance descriptor for Region, &type metadata for Region);
    atomic_store(result, (unint64_t *)&qword_1EDD19ED8);
  }
  return result;
}

uint64_t sub_184A9643C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4)
  {
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_184A9648C(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_184A96500(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_184A96574(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_184A965E8(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_184A96610(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_184A96638@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_184AA3644(a1, a2, v3, a3);
}

uint64_t sub_184A96640(uint64_t a1)
{
  swift_retain();
  return a1;
}

uint64_t sub_184A96668(uint64_t a1)
{
  swift_release();
  return a1;
}

uint64_t sub_184A96690(uint64_t a1)
{
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_184A966C4(uint64_t a1)
{
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_184A966F8(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_184A9674C(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_184A967A0(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_184A967F4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;
  int v5;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return 0;
  v2 = result;
  LODWORD(result) = 0;
  v3 = (unsigned __int8 *)(v2 + 32);
  do
  {
    v5 = *v3++;
    v4 = v5;
    if ((v5 & ~(_DWORD)result) == 0)
      v4 = 0;
    result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t destroy for Region()
{
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for Region(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for Region(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  a1[6] = a2[6];
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for Region(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Region(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Region(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Region()
{
  return &type metadata for Region;
}

uint64_t destroy for Region.SubBounds()
{
  swift_release();
  swift_release();
  return swift_release();
}

_QWORD *_s12CoreGraphics6RegionV9SubBoundsVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for Region.SubBounds(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for Region.SubBounds(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for Region.SubBounds()
{
  return &type metadata for Region.SubBounds;
}

uint64_t getEnumTagSinglePayload for Region.Spandexes(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Region.Spandexes(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Region.Spandexes()
{
  return &type metadata for Region.Spandexes;
}

uint64_t sub_184A96C20()
{
  return sub_184A99458(&qword_1EDD19EE8, &qword_1EDD19EF0, MEMORY[0x1E0DEC908]);
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x186DC333C](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_184A96C90@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;

  if (result)
    v8 = result;
  else
    v8 = a2;
  if (v8 < 0)
  {
    __break(1u);
  }
  else
  {
    v9 = *(_QWORD *)(a6 + 16);
    v10 = *(_QWORD *)(a7 + 16) < a4;
    v11 = v9 == a3;
    v12 = v9 < a3;
    if (!v11)
      v10 = v12;
    if (!v10)
    {
      a8[4] = a5;
      a8[5] = a6;
      a8[6] = a7;
      *a8 = result;
      a8[1] = a2;
      a8[2] = a3;
      a8[3] = a4;
      swift_retain();
      swift_retain();
      return swift_retain();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_184A96D08(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  v6 = a5 + a6;
  if (__OFADD__(a5, a6))
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v6 < a3 || a3 < a6 || result < a6 || v6 < result)
    goto LABEL_19;
  v7 = a3 - result;
  if (__OFSUB__(a3, result))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (a2 >= 1)
  {
    if (v7 < 0 || v7 >= (unint64_t)a2)
      goto LABEL_14;
    return 0;
  }
  if (v7 <= 0 && v7 > a2)
    return 0;
LABEL_14:
  v8 = __OFADD__(result, a2);
  result += a2;
  if (v8)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    return result;
  }
  if (result < a6 || v6 < result)
    goto LABEL_22;
  return result;
}

unint64_t sub_184A96DA0(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  BOOL v7;

  v4 = *(_QWORD *)(a4 + 16);
  if (v4 < result || v4 < a3)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = a3 - result;
  if (a2 >= 1)
  {
    if (v6 < 0 || v6 >= (unint64_t)a2)
      goto LABEL_13;
    return 0;
  }
  if (v6 <= 0 && v6 > a2)
    return 0;
LABEL_13:
  v7 = __OFADD__(result, a2);
  result += a2;
  if (v7)
    goto LABEL_16;
  if (result > v4)
LABEL_17:
    __break(1u);
  return result;
}

uint64_t sub_184A96E0C(uint64_t result, __n128 a2, double a3)
{
  uint64_t v3;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((result & 1) == 0)
  {
    v6 = *(_QWORD *)(v3 + 32);
    v7 = *(_QWORD *)(v6 + 16);
    v8 = v6 + 32;
    result = sub_184AA1234(v6 + 32, v7, a2);
    v9 = result - 1;
    if (__OFSUB__(result, 1))
    {
      __break(1u);
    }
    else
    {
      v10 = result;
      if (v7 >= result)
      {
        result = sub_184A9DF24(v8 + 8 * result, v7 - result, a3);
        v11 = result + v10;
        if (!__OFADD__(result, v10))
        {
          result = v9 & ~(v9 >> 63);
          if (v11 >= result)
            return result;
          __break(1u);
          return 0;
        }
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
        return result;
      }
    }
    __break(1u);
    goto LABEL_16;
  }
  v5 = *(double *)(v3 + 24);
  if (v5 >= a2.n128_f64[0])
    return 0;
  if (v5 > a3)
  {
    if (*(double *)(v3 + 16) <= a3)
      return 1;
    goto LABEL_17;
  }
  return 1;
}

uint64_t sub_184A96EF4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  return sub_184A977FC(a1, a2, a3, sub_184A96D08, a4);
}

_QWORD *sub_184A96F04@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v3 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
    goto LABEL_10;
  }
  v5 = *(_QWORD *)(v2 + 8);
  v4 = *(_QWORD *)(v2 + 16);
  v6 = __OFADD__(v5, v4);
  v7 = v5 + v4;
  if (v6)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v3 >= v4 && v3 < v7)
  {
    *a2 = v3;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t *sub_184A96F3C(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
    goto LABEL_10;
  }
  v4 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v5 = __OFADD__(v4, v3);
  v6 = v4 + v3;
  if (v5)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v2 >= v3 && v2 < v6)
  {
    *result = v2;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

void sub_184A96F74(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
}

void sub_184A96F80(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = __OFADD__(v2, v3);
  v5 = v2 + v3;
  if (v4)
    __break(1u);
  else
    *a1 = v5;
}

uint64_t (*sub_184A96F98(uint64_t (*result)(), unint64_t *a2))()
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v3 = *a2;
  v4 = v2[2];
  v5 = __OFSUB__(*a2, v4);
  v6 = *a2 - v4;
  if (v5)
  {
    __break(1u);
    goto LABEL_6;
  }
  if ((v3 & 0x8000000000000000) != 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (!HIDWORD(v3))
  {
    *(_QWORD *)result = *(_QWORD *)(*v2 + 8 * v6);
    *((_DWORD *)result + 2) = v3;
    return CGBitmapPixelInfoGetCGPixelComponentType;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t *sub_184A96FE4@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  if (*v2)
    v4 = *v2 + 8 * *result;
  else
    v4 = 0;
  v5 = result[1] - v3;
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v3;
  return result;
}

void sub_184A97008(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v1 + 8);
  v2 = *(_QWORD *)(v1 + 16);
  v4 = __OFADD__(v3, v2);
  v5 = v3 + v2;
  if (v4)
  {
    __break(1u);
  }
  else if (v5 >= v2)
  {
    *a1 = v2;
    a1[1] = v5;
    return;
  }
  __break(1u);
}

BOOL sub_184A9702C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  _BOOL8 result;

  v2 = *(_QWORD *)(v0 + 8);
  v1 = *(_QWORD *)(v0 + 16);
  v3 = __OFADD__(v2, v1);
  v4 = v2 + v1;
  if (!v3)
    return v1 == v4;
  __break(1u);
  return result;
}

void sub_184A9704C(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

_QWORD *sub_184A9705C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
    goto LABEL_9;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v5 = *(_QWORD *)(v3 + 16);
  v7 = __OFADD__(v6, v5);
  v8 = v6 + v5;
  if (v7)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v4 >= v5 && v8 >= v4)
  {
    *a3 = v4;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t *sub_184A97094(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_QWORD *)(v2 + 16);
  v5 = __OFADD__(v3, v4);
  v6 = v3 + v4;
  if (v5)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v7 = *result;
  v8 = *a2;
  if (v6 < *a2 || v8 < v4 || v7 < v4 || v6 < v7)
    goto LABEL_15;
  result = (uint64_t *)(v8 - v7);
  if (__OFSUB__(v8, v7))
LABEL_16:
    __break(1u);
  return result;
}

uint64_t *sub_184A970E0@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_QWORD *)(v2 + 16);
  v5 = v3 + v4;
  if (__OFADD__(v3, v4))
  {
    __break(1u);
  }
  else
  {
    v6 = *result;
    if (*result >= v4 && v6 < v5)
    {
      *a2 = v6 + 1;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t *sub_184A97110(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v1 + 8);
  v2 = *(_QWORD *)(v1 + 16);
  v4 = v3 + v2;
  if (__OFADD__(v3, v2))
  {
    __break(1u);
  }
  else
  {
    v5 = *result;
    if (*result >= v2 && v5 < v4)
    {
      *result = v5 + 1;
      return result;
    }
  }
  __break(1u);
  return result;
}

__n128 sub_184A97140@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unint64_t v2;
  __n128 result;

  v2 = v1[1].n128_u64[0];
  result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = v2;
  a1[1].n128_u64[1] = v2;
  return result;
}

uint64_t sub_184A97154()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)(v0 + 8);
  v1 = *(_QWORD *)(v0 + 16);
  v3 = __OFADD__(v2, v1);
  v4 = v2 + v1;
  if (v3)
  {
    __break(1u);
    goto LABEL_6;
  }
  result = v4 - v1;
  if (v4 < v1)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (__OFSUB__(v4, v1))
LABEL_7:
    __break(1u);
  return result;
}

_QWORD *sub_184A9717C()
{
  uint64_t v0;

  return sub_184A7F1F8(*(_QWORD **)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16));
}

_QWORD *sub_184A97188(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_184A98858(a1, a2, a3, *(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16));
}

unint64_t sub_184A97198()
{
  unint64_t result;

  result = qword_1EDD19EF8;
  if (!qword_1EDD19EF8)
  {
    result = MEMORY[0x186DC3348](&unk_184E38904, &type metadata for Region.Spandexes);
    atomic_store(result, (unint64_t *)&qword_1EDD19EF8);
  }
  return result;
}

uint64_t sub_184A971DC()
{
  return sub_184A9731C(&qword_1EDD19F00, MEMORY[0x1E0DEB8C0]);
}

unint64_t sub_184A97200()
{
  unint64_t result;

  result = qword_1EDD19F10;
  if (!qword_1EDD19F10)
  {
    result = MEMORY[0x186DC3348](MEMORY[0x1E0DEB440], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&qword_1EDD19F10);
  }
  return result;
}

unint64_t sub_184A97248()
{
  unint64_t result;

  result = qword_1EDD19F18;
  if (!qword_1EDD19F18)
  {
    result = MEMORY[0x186DC3348](&unk_184E3896C, &type metadata for Region.Spandexes);
    atomic_store(result, (unint64_t *)&qword_1EDD19F18);
  }
  return result;
}

uint64_t sub_184A9728C()
{
  return sub_184A9731C(&qword_1EDD19F20, MEMORY[0x1E0DEB890]);
}

unint64_t sub_184A972B4()
{
  unint64_t result;

  result = qword_1EDD19F28;
  if (!qword_1EDD19F28)
  {
    result = MEMORY[0x186DC3348](&unk_184E38A4C, &type metadata for Region.Spandexes);
    atomic_store(result, (unint64_t *)&qword_1EDD19F28);
  }
  return result;
}

uint64_t sub_184A972F8()
{
  return sub_184A9731C(&qword_1EDD19F30, MEMORY[0x1E0DEB8B8]);
}

uint64_t sub_184A9731C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EDD19F08);
    v6 = sub_184A97200();
    v7[0] = MEMORY[0x1E0DEB458];
    v7[1] = v6;
    result = MEMORY[0x186DC3348](a2, v5, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_184A9738C()
{
  unint64_t result;

  result = qword_1EDD19F38;
  if (!qword_1EDD19F38)
  {
    result = MEMORY[0x186DC3348](&unk_184E38AAC, &type metadata for Region.Spandexes);
    atomic_store(result, (unint64_t *)&qword_1EDD19F38);
  }
  return result;
}

uint64_t sub_184A973D0()
{
  return sub_184A99458(&qword_1EDD19F40, &qword_1EDD19F48, MEMORY[0x1E0DEC908]);
}

_QWORD *sub_184A97408@<X0>(_QWORD *result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if (v2 <= 1)
  {
    *a2 = v2;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t *sub_184A9742C(unint64_t *result)
{
  unint64_t v1;

  v1 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if (v1 <= 1)
  {
    *result = v1;
    return result;
  }
  __break(1u);
  return result;
}

void sub_184A97450(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void sub_184A97458(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

uint64_t (*sub_184A97464(_OWORD *a1, _QWORD *a2))(_QWORD)
{
  __int128 *v2;
  __int128 v3;
  uint64_t (*result)(_QWORD);

  if (*a2 == 1)
  {
    v3 = 0uLL;
LABEL_5:
    *a1 = v3;
    return CGBitmapPixelInfoGetCGPixelComponentType;
  }
  if (!*a2)
  {
    v3 = *v2;
    goto LABEL_5;
  }
  result = (uint64_t (*)(_QWORD))sub_184E30B30();
  __break(1u);
  return result;
}

_QWORD *sub_184A974E8@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _OWORD *v2;
  uint64_t v3;

  if ((*result & 0x8000000000000000) != 0 || (v3 = result[1], v3 > 2))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)a2 = *result;
    *(_QWORD *)(a2 + 8) = v3;
    *(_OWORD *)(a2 + 16) = *v2;
  }
  return result;
}

double sub_184A97510@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = xmmword_184E388B0;
  return result;
}

uint64_t sub_184A97520()
{
  return 0;
}

_QWORD *sub_184A97528@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3;

  v3 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else if (v3 <= 2)
  {
    *a3 = v3;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t sub_184A9754C@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result;
  char v6;

  result = sub_184A98DC4(*a1, a2, *a3);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

_QWORD *sub_184A97580(_QWORD *result, unint64_t *a2)
{
  unint64_t v2;

  v2 = *a2;
  if (*result <= 2uLL && v2 <= 2)
    return (_QWORD *)(v2 - *result);
  __break(1u);
  return result;
}

uint64_t *sub_184A975A0(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  BOOL v5;

  v2 = *result;
  v3 = a2[1];
  if (*result >= *a2)
  {
    v5 = __OFSUB__(v2, v3);
    v4 = v2 - v3 < 0;
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  if (v4 == v5)
    __break(1u);
  return result;
}

_QWORD *sub_184A975BC(_QWORD *result, _QWORD *a2)
{
  if (*result < *a2 || a2[1] < *result)
    __break(1u);
  return result;
}

_QWORD *sub_184A975D8(_QWORD *result, _QWORD *a2)
{
  if (*result < *a2 || a2[1] < result[1])
    __break(1u);
  return result;
}

_QWORD *sub_184A975F4@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (*result > 1uLL)
    __break(1u);
  else
    *a2 = *result + 1;
  return result;
}

_QWORD *sub_184A97610(_QWORD *result)
{
  if (*result > 1uLL)
    __break(1u);
  else
    ++*result;
  return result;
}

__n128 sub_184A9762C@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = 0;
  return result;
}

_QWORD *sub_184A9763C()
{
  uint64_t *v0;

  return sub_184A7F164(*v0, v0[1]);
}

_QWORD *sub_184A97644(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_184A98928(a1, a2, a3, *v3, v3[1]);
}

unint64_t sub_184A9764C(unint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = result - 1;
    if (__OFSUB__(result, 1))
    {
LABEL_15:
      __break(1u);
      goto LABEL_16;
    }
    if ((v3 & 0x8000000000000000) != 0)
    {
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
    v4 = *(_QWORD *)(a2 + 16);
    if (v3 >= v4)
    {
LABEL_17:
      __break(1u);
      return result;
    }
    if ((result & 0x8000000000000000) != 0)
      goto LABEL_13;
    v5 = *(unsigned int *)(a2 + 4 * v3 + 32);
    if (v4 > result)
      goto LABEL_7;
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v5 = 0;
  if (!*(_QWORD *)(a2 + 16))
    goto LABEL_12;
LABEL_7:
  if (*(unsigned int *)(a2 + 4 * result + 32) < v5)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v6 = a3 + 8 * v5;
  if (a3)
    return v6;
  else
    return 0;
}

uint64_t sub_184A976C8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  return sub_184A977FC(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_184A96DA0, a4);
}

_QWORD *sub_184A976D8@<X0>(_QWORD *result@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;

  v3 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if (v3 < *(_QWORD *)(*(_QWORD *)v2 + 16))
  {
    *a2 = v3;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t *sub_184A97704(unint64_t *result)
{
  uint64_t v1;
  unint64_t v2;

  v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if (v2 < *(_QWORD *)(*(_QWORD *)v1 + 16))
  {
    *result = v2;
    return result;
  }
  __break(1u);
  return result;
}

void sub_184A97730(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(*(_QWORD *)v1 + 16);
}

uint64_t (*sub_184A97740(unint64_t *a1, unint64_t *a2))(_QWORD)
{
  uint64_t *v2;
  unint64_t v4;

  *a1 = sub_184A9764C(*a2, *v2, v2[1]);
  a1[1] = v4;
  return CGBitmapPixelInfoGetCGPixelComponentType;
}

uint64_t *sub_184A97778@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *result;
  if (*result < 0 || (v4 = result[1], result = *(uint64_t **)v2, *(_QWORD *)(*(_QWORD *)v2 + 16) < v4))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)a2 = v3;
    *(_QWORD *)(a2 + 8) = v4;
    *(_QWORD *)(a2 + 16) = result;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(v2 + 8);
    return (uint64_t *)swift_retain();
  }
  return result;
}

void sub_184A977AC(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  *a1 = 0;
  a1[1] = v2;
}

BOOL sub_184A977BC()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16) == 0;
}

_QWORD *sub_184A977D0@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;

  v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else if (v4 <= *(_QWORD *)(*(_QWORD *)v3 + 16))
  {
    *a3 = v4;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_184A977FC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t (*a4)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD)@<X5>, uint64_t a5@<X8>)
{
  _QWORD *v5;
  uint64_t result;
  char v8;

  result = a4(*a1, a2, *a3, *v5, v5[1], v5[2]);
  *(_QWORD *)a5 = result;
  *(_BYTE *)(a5 + 8) = v8 & 1;
  return result;
}

unint64_t *sub_184A9783C(unint64_t *result, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (*result <= v4 && v3 <= v4)
    return (unint64_t *)(v3 - *result);
  __break(1u);
  return result;
}

_QWORD *sub_184A97864@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  if (*result >= *(_QWORD *)(*(_QWORD *)v2 + 16))
    __break(1u);
  else
    *a2 = *result + 1;
  return result;
}

_QWORD *sub_184A97888(_QWORD *result)
{
  uint64_t v1;

  if (*result >= *(_QWORD *)(*(_QWORD *)v1 + 16))
    __break(1u);
  else
    ++*result;
  return result;
}

__n128 sub_184A978AC@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;

  *(_QWORD *)a1 = *(_QWORD *)v1;
  result = *(__n128 *)(v1 + 8);
  *(__n128 *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 24) = 0;
  return result;
}

uint64_t sub_184A978C4()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16);
}

_QWORD *sub_184A978D0()
{
  uint64_t *v0;
  _QWORD *v1;

  v1 = sub_184A7F098(*v0, v0[1], v0[2]);
  swift_release();
  return v1;
}

_QWORD *sub_184A97908(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_184A98988(a1, a2, a3, *v3, v3[1], v3[2]);
}

BOOL sub_184A97914(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2)
    return a1[1] < a2[1];
  else
    return *a1 < *a2;
}

BOOL sub_184A97934(_QWORD *a1, _QWORD *a2)
{
  if (*a2 == *a1)
    return a2[1] >= a1[1];
  else
    return *a2 >= *a1;
}

BOOL sub_184A97954(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2)
    return a1[1] >= a2[1];
  else
    return *a1 >= *a2;
}

BOOL sub_184A97974(_QWORD *a1, _QWORD *a2)
{
  if (*a2 == *a1)
    return a2[1] < a1[1];
  else
    return *a2 < *a1;
}

BOOL sub_184A97994(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t sub_184A979AC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_184A97CD4(a1, sub_184A98FF4, a2);
}

uint64_t *sub_184A979B8(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = result[1];
  v3 = __OFSUB__(v2, 2);
  v4 = v2 - 2;
  if (v3)
  {
    __break(1u);
    goto LABEL_16;
  }
  v5 = *result;
  v6 = *result - 1;
  if (*result < 1)
  {
LABEL_13:
    *result = v5;
    result[1] = v4;
    return result;
  }
  v7 = *(_QWORD *)(v1 + 8);
  v8 = *(_QWORD *)(v7 + 16);
  if (v6 >= v8)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v4 >= *(unsigned int *)(v7 + 32 + 4 * v6))
    goto LABEL_13;
  if (*result == 1)
  {
LABEL_12:
    *result = v6;
    result[1] = v4;
    return result;
  }
  if (v5 - 2 >= v8)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  if (v4 >= *(unsigned int *)(v7 + 32 + 4 * (v5 - 2)))
    goto LABEL_12;
  v9 = v7 + 20;
  while (v5 - 2 >= 1)
  {
    v10 = *(unsigned int *)(v9 + 4 * v5--);
    if (v4 >= v10)
    {
      v6 = v5 - 1;
      goto LABEL_12;
    }
  }
  *result = 0;
  result[1] = v4;
  return result;
}

void sub_184A97A68(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void sub_184A97A70(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 16);
  *a1 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 16);
  a1[1] = v2;
}

uint64_t (*sub_184A97A84(_QWORD *a1, unint64_t *a2))(_QWORD)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_184A98B4C(*a2, a2[1], *v2, v2[2]);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  return CGBitmapPixelInfoGetCGPixelComponentType;
}

uint64_t sub_184A97AC4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  return sub_184A96C90(*a1, a1[1], a1[2], a1[3], *v2, v2[1], v2[2], a2);
}

uint64_t sub_184A97ADC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = 0;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = *(_QWORD *)(v4 + 16);
  a1[4] = 0;
  a1[5] = v5;
  a1[6] = v6;
  swift_retain();
  swift_retain();
  return swift_retain();
}

BOOL sub_184A97B24()
{
  uint64_t v0;

  return (*(_QWORD *)(*(_QWORD *)(v0 + 8) + 16) | *(_QWORD *)(*(_QWORD *)(v0 + 16) + 16)) == 0;
}

void sub_184A97B40(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 256;
}

uint64_t sub_184A97B50@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v6;

  result = sub_184A98C30(*a1, a1[1], a2, *(_QWORD *)(v3 + 8));
  *a3 = result;
  a3[1] = v6;
  return result;
}

uint64_t sub_184A97B84@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  char v8;

  result = sub_184A98E30(*a1, a1[1], a2, *a3, a3[1], *(_QWORD *)(v4 + 8));
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = v8 & 1;
  return result;
}

uint64_t sub_184A97BC8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(_QWORD *)(result + 8);
  v3 = *(_QWORD *)(a2 + 8);
  v4 = __OFSUB__(v3, v2);
  v5 = v3 - v2;
  if (!v4)
    return v5 / 2;
  __break(1u);
  return result;
}

uint64_t *sub_184A97BEC(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;

  v2 = *result;
  v3 = result[1];
  v4 = *result < *a2;
  if (*result == *a2)
    v4 = v3 < a2[1];
  if (v4)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  v5 = a2[2];
  v6 = v3 >= a2[3];
  v7 = v2 == v5;
  v8 = v2 >= v5;
  if (v7)
    v8 = v6;
  if (v8)
    goto LABEL_9;
  return result;
}

uint64_t *sub_184A97C34(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;

  v2 = *result;
  v3 = result[1];
  v4 = *result < *a2;
  if (*result == *a2)
    v4 = v3 < a2[1];
  if (v4)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  v5 = a2[2];
  v6 = a2[3] < v3;
  v7 = v5 == v2;
  v8 = v5 < v2;
  if (v7)
    v8 = v6;
  if (v8)
    goto LABEL_9;
  return result;
}

_QWORD *sub_184A97C7C(_QWORD *result, _QWORD *a2)
{
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  BOOL v6;
  BOOL v7;

  v2 = *result < *a2;
  if (*result == *a2)
    v2 = result[1] < a2[1];
  if (v2)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  v3 = a2[2];
  v4 = result[2];
  v5 = a2[3] < result[3];
  v6 = v3 == v4;
  v7 = v3 < v4;
  if (!v6)
    v5 = v7;
  if (v5)
    goto LABEL_9;
  return result;
}

uint64_t sub_184A97CC8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_184A97CD4(a1, sub_184A98BC8, a2);
}

uint64_t sub_184A97CD4@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD, _QWORD, _QWORD)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v6;

  result = a2(*a1, a1[1], *(_QWORD *)(v3 + 8));
  *a3 = result;
  a3[1] = v6;
  return result;
}

unint64_t *sub_184A97D04(unint64_t *result)
{
  uint64_t v1;
  unint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = result[1];
  v3 = __OFADD__(v2, 2);
  v4 = v2 + 2;
  if (v3)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    return result;
  }
  v5 = *(_QWORD *)(v1 + 8);
  v6 = *result;
  v7 = *(_QWORD *)(v5 + 16);
  if ((uint64_t)*result >= (uint64_t)v7)
  {
    *result = v6;
    result[1] = v4;
    return result;
  }
  if ((v6 & 0x8000000000000000) != 0)
    goto LABEL_16;
  if (v4 < *(unsigned int *)(v5 + 32 + 4 * v6))
  {
    v8 = *result;
LABEL_6:
    *result = v8;
    result[1] = v4;
    return result;
  }
  v8 = v6 + 1;
  if (v6 + 1 >= v7 || v4 < *(unsigned int *)(v5 + 32 + 4 * v8))
    goto LABEL_6;
  v9 = v5 + 40;
  while (v7 - 2 != v6)
  {
    v10 = *(unsigned int *)(v9 + 4 * v6++);
    if (v4 < v10)
    {
      *result = v6 + 1;
      result[1] = v4;
      return result;
    }
  }
  *result = v7;
  result[1] = v4;
  return result;
}

__n128 sub_184A97DA8@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unint64_t v2;
  __n128 result;

  v2 = v1[1].n128_u64[0];
  result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[1] = 0;
  a1[2].n128_u64[0] = 0;
  a1[1].n128_u64[0] = v2;
  return result;
}

uint64_t sub_184A97DC0()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(v0 + 16) + 16) >> 1;
}

uint64_t sub_184A97DD0()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = sub_184A7F2E0(*v0, v0[1], v0[2]);
  swift_release();
  swift_release();
  swift_release();
  return v1;
}

_QWORD *sub_184A97E28(_QWORD *a1, double *a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_184A986A0(a1, a2, a3, *v3, v3[1], v3[2]);
}

unint64_t sub_184A97E38()
{
  unint64_t result;

  result = qword_1EDD19F50;
  if (!qword_1EDD19F50)
  {
    result = MEMORY[0x186DC3348](&unk_184E38AFC, &type metadata for Region.SubBounds);
    atomic_store(result, (unint64_t *)&qword_1EDD19F50);
  }
  return result;
}

unint64_t sub_184A97E80()
{
  unint64_t result;

  result = qword_1EDD19F58;
  if (!qword_1EDD19F58)
  {
    result = MEMORY[0x186DC3348](&unk_184E38C44, &type metadata for Region.SubBounds.Index);
    atomic_store(result, (unint64_t *)&qword_1EDD19F58);
  }
  return result;
}

uint64_t sub_184A97EC4()
{
  return sub_184A99458(&qword_1EDD19F60, &qword_1EDD19F68, MEMORY[0x1E0DEA228]);
}

uint64_t sub_184A97EF0()
{
  return sub_184A99458(&qword_1EDD19F70, &qword_1EDD19F78, MEMORY[0x1E0DEDE48]);
}

unint64_t sub_184A97F20()
{
  unint64_t result;

  result = qword_1EDD19F80;
  if (!qword_1EDD19F80)
  {
    result = MEMORY[0x186DC3348](&unk_184E38C8C, &type metadata for Region.SubBounds.Index);
    atomic_store(result, (unint64_t *)&qword_1EDD19F80);
  }
  return result;
}

unint64_t sub_184A97F68()
{
  unint64_t result;

  result = qword_1EDD19F88;
  if (!qword_1EDD19F88)
  {
    result = MEMORY[0x186DC3348](&unk_184E38B64, &type metadata for Region.SubBounds);
    atomic_store(result, (unint64_t *)&qword_1EDD19F88);
  }
  return result;
}

uint64_t sub_184A97FAC()
{
  return sub_184A99590(&qword_1EDD19F90, &qword_1EDD19F68, (uint64_t (*)(void))sub_184A97FE0, MEMORY[0x1E0DEA210]);
}

unint64_t sub_184A97FE0()
{
  unint64_t result;

  result = qword_1EDD19F98;
  if (!qword_1EDD19F98)
  {
    result = MEMORY[0x186DC3348](&unk_184E38CB4, &type metadata for Region.SubBounds);
    atomic_store(result, (unint64_t *)&qword_1EDD19F98);
  }
  return result;
}

uint64_t sub_184A98024()
{
  return sub_184A99590(&qword_1EDD19FA0, &qword_1EDD19F78, (uint64_t (*)(void))sub_184A97FE0, MEMORY[0x1E0DEDE28]);
}

void sub_184A98058()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  double *v13;
  double v14;
  double v15;
  double v16;
  double v17;

  v1 = v0[5];
  v2 = *v0 & 0x7FF0000000000000;
  v3 = v2 != 0x7FF0000000000000 || (*v0 & 0xFFFFFFFFFFFFFLL) == 0;
  if (!v3 || *(_QWORD *)(v0[4] + 16))
  {
    v4 = 0;
    v5 = *(_QWORD *)(v1 + 16);
    v6 = v1 + 32;
    v7 = NAN;
    v8 = NAN;
LABEL_8:
    if (v4 <= v5)
      v9 = v5;
    else
      v9 = v4;
    while (v5 != v4)
    {
      if (v4)
      {
        v10 = v4 - 1;
        if (__OFSUB__(v4, 1))
          goto LABEL_36;
        if (v10 >= v5)
          goto LABEL_37;
        v11 = *(unsigned int *)(v6 + 4 * v10);
        if (v9 == v4)
          goto LABEL_34;
      }
      else
      {
        v11 = 0;
        if (!v9)
        {
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
        }
      }
      v12 = *(unsigned int *)(v6 + 4 * v4);
      if (v11 > v12)
        goto LABEL_35;
      ++v4;
      if (v11 != v12)
      {
        v13 = (double *)(v0[6] + 32 + 8 * v11);
        v14 = *v13;
        v15 = v13[v12 + ~v11];
        v16 = *v13;
        if ((*(_QWORD *)&v16 & 0xFFFFFFFFFFFFFLL) != 0)
          v17 = v8;
        else
          v17 = v14;
        if ((~*(_QWORD *)&v16 & 0x7FF0000000000000) != 0)
          v17 = v14;
        if (v8 > v14)
          v8 = v17;
        if (v15 >= v7)
        {
          if ((*(_QWORD *)&v15 & 0xFFFFFFFFFFFFFLL) == 0)
            v7 = v15;
          if ((~*(_QWORD *)&v15 & 0x7FF0000000000000) != 0)
            v7 = v15;
        }
        goto LABEL_8;
      }
    }
  }
}

uint64_t sub_184A981D0()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t result;
  char v9[24];
  _QWORD v10[3];

  v1 = v0;
  v10[2] = *MEMORY[0x1E0C80C00];
  v3 = *v0;
  v2 = v0 + 4;
  v4 = v3;
  v5 = v3 & 0xFFFFFFFFFFFFFLL;
  if (((~v3 & 0x7FF0000000000000) != 0 || v5 == 0) && !*(_QWORD *)(*v2 + 16))
  {
    v7 = v1[1];
    v10[0] = v4;
    v10[1] = v7;
    *(_OWORD *)v9 = *((_OWORD *)v1 + 1);
    sub_184A98448(v9, 2);
    sub_184A98448((char *)v10, 2);
    return sub_184A9828C(2, 2u);
  }
  return result;
}

uint64_t sub_184A9828C(uint64_t result, unsigned int a2)
{
  uint64_t *v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v7;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 16);
  v5 = v4 + result;
  if (__OFADD__(v4, result))
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v7 = result;
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  *v2 = v3;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v9 = *(_QWORD *)(v3 + 24) >> 1, v9 < v5))
  {
    if (v4 <= v5)
      v10 = v5;
    else
      v10 = v4;
    sub_184A95C0C(isUniquelyReferenced_nonNull_native, v10, 1);
    v3 = *v2;
    v9 = *(_QWORD *)(*v2 + 24) >> 1;
  }
  v11 = *(_QWORD *)(v3 + 16);
  v12 = v9 - v11;
  result = sub_184A98A70((uint64_t)&v25, (unsigned int *)(v3 + 4 * v11 + 32), v9 - v11, v7, a2);
  if (result < v7)
    goto LABEL_33;
  if (result < 1)
  {
LABEL_12:
    if (result == v12)
    {
      v16 = v25;
      if (v27 != v25)
      {
        if (v27 < 0 || v27 >= v25)
          goto LABEL_35;
        v17 = *(_QWORD *)(v3 + 16);
        v18 = v26;
        v19 = v27 + 1;
        while (1)
        {
          v20 = *(_QWORD *)(v3 + 24);
          v21 = v17 + 1;
          if (v17 + 1 > (uint64_t)(v20 >> 1))
            result = (uint64_t)sub_184A95C0C((char *)(v20 > 1), v17 + 1, 1);
          v3 = *v2;
          v22 = *(_QWORD *)(*v2 + 24) >> 1;
          if (v17 < v22)
            break;
LABEL_18:
          *(_QWORD *)(v3 + 16) = v17;
        }
        *(_DWORD *)(v3 + 4 * v17 + 32) = v18;
        if (v19 != v16)
        {
          v23 = v19 + v22 - v17;
          v24 = v19;
          while ((v19 & 0x8000000000000000) == 0 && v24 < v16)
          {
            if (v22 - 1 == v17)
            {
              v17 = v22;
              v19 = v23;
              goto LABEL_18;
            }
            ++v24;
            *(_DWORD *)(v3 + 36 + 4 * v17++) = v18;
            if (v16 == v24)
            {
              v21 = v17 + 1;
              goto LABEL_29;
            }
          }
          __break(1u);
          goto LABEL_32;
        }
LABEL_29:
        *(_QWORD *)(v3 + 16) = v21;
      }
    }
    *v2 = v3;
    return result;
  }
  v13 = *(_QWORD *)(v3 + 16);
  v14 = __OFADD__(v13, result);
  v15 = v13 + result;
  if (!v14)
  {
    *(_QWORD *)(v3 + 16) = v15;
    goto LABEL_12;
  }
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

char *sub_184A98448(char *result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 16);
  v5 = v4 + a2;
  if (__OFADD__(v4, a2))
  {
    __break(1u);
    goto LABEL_40;
  }
  v7 = result;
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  *v2 = v3;
  if (!(_DWORD)result || (v8 = *(_QWORD *)(v3 + 24) >> 1, v8 < v5))
  {
    if (v4 <= v5)
      v9 = v5;
    else
      v9 = v4;
    result = sub_184A95C28(result, v9, 1);
    v3 = *v2;
    v8 = *(_QWORD *)(*v2 + 24) >> 1;
  }
  v10 = *(_QWORD *)(v3 + 16);
  v11 = v8 - v10;
  if (!a2 || v8 == v10)
  {
    if (v7)
      v13 = &v7[8 * a2];
    else
      v13 = 0;
    if (a2 <= 0)
    {
      if (v11)
      {
LABEL_38:
        *v2 = v3;
        return result;
      }
LABEL_24:
      if (v7 && v7 != v13)
      {
        v17 = *(_QWORD *)(v3 + 16);
        v20 = *(_QWORD *)v7;
        v18 = v7 + 8;
        v19 = v20;
        while (1)
        {
          while (1)
          {
            v21 = *(_QWORD *)(v3 + 24);
            v22 = v17 + 1;
            if (v17 + 1 > (uint64_t)(v21 >> 1))
              result = sub_184A95C28((char *)(v21 > 1), v17 + 1, 1);
            v3 = *v2;
            v23 = *(_QWORD *)(*v2 + 24) >> 1;
            if (v17 < v23)
              break;
            *(_QWORD *)(v3 + 16) = v17;
          }
          *(_QWORD *)(v3 + 8 * v17 + 32) = v19;
          if (v18 == v13)
            break;
          v24 = v18;
          v18 += 8;
          while (1)
          {
            v25 = *(_QWORD *)v24;
            v24 += 8;
            v26 = v25;
            if (v23 - 1 == v17)
              break;
            *(_QWORD *)(v3 + 40 + 8 * v17++) = v26;
            v18 += 8;
            if (v24 == v13)
            {
              v22 = v17 + 1;
              goto LABEL_37;
            }
          }
          v19 = v26;
          v17 = v23;
          *(_QWORD *)(v3 + 16) = v23;
        }
LABEL_37:
        *(_QWORD *)(v3 + 16) = v22;
      }
      goto LABEL_38;
    }
    goto LABEL_40;
  }
  if (a2 >= v11)
    v12 = v8 - v10;
  else
    v12 = a2;
  result = (char *)memcpy((void *)(v3 + 8 * v10 + 32), v7, 8 * v12);
  if (v11 < a2)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v13 = &v7[8 * a2];
  if (v12 < 1)
    goto LABEL_17;
  v14 = *(_QWORD *)(v3 + 16);
  v15 = __OFADD__(v14, v12);
  v16 = v14 + v12;
  if (!v15)
  {
    *(_QWORD *)(v3 + 16) = v16;
LABEL_17:
    v7 += 8 * v12;
    if (v12 != v11)
      goto LABEL_38;
    goto LABEL_24;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_184A9861C(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;

  result = a1[5];
  if (*(_QWORD *)(result + 16) == 2
    && *(_DWORD *)(result + 32) == 2
    && *(_DWORD *)(result + 36) == 2
    && *(_QWORD *)(a1[6] + 16) == 2)
  {
    swift_release();
    swift_release();
    v3 = MEMORY[0x1E0DEE9D8];
    a1[4] = MEMORY[0x1E0DEE9D8];
    result = swift_release();
    a1[5] = v3;
    a1[6] = v3;
  }
  return result;
}

_QWORD *sub_184A986A0(_QWORD *result, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  unint64_t v23;

  if (!a2)
  {
    a3 = 0;
    *result = a4;
    result[1] = a5;
    result[3] = 0;
    result[4] = 0;
    result[2] = a6;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v9 = 0;
    v10 = 0;
LABEL_9:
    *result = a4;
    result[1] = a5;
    result[2] = a6;
    result[3] = v10;
    result[4] = v9;
    return (_QWORD *)a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v6 = *(_QWORD *)(a5 + 16);
    v7 = *(_QWORD *)(a6 + 16);
    if (!(v6 | v7))
    {
      v8 = 0;
LABEL_6:
      *result = a4;
      result[1] = a5;
      result[2] = a6;
      result[3] = v6;
      a3 = v8;
      result[4] = v7;
      return (_QWORD *)a3;
    }
    v11 = 0;
    v9 = 0;
    v12 = 0;
    v13 = a6 + 32;
    v14 = a4 + 32;
    v15 = a5 + 32;
    v16 = 1;
    while (v11 != (v7 + 1) >> 1)
    {
      v8 = v16;
      v17 = *(_QWORD *)(a4 + 16);
      if (v12 >= v17)
        goto LABEL_37;
      if (v11 == v7 >> 1)
        goto LABEL_38;
      v10 = v12 + 1;
      if (v12 + 1 >= v17)
        goto LABEL_39;
      v18 = *(double *)(v13 + 8 * v9);
      v19 = *(double *)(v14 + 8 * v12);
      v20 = *(double *)(v13 + ((8 * v9) | 8));
      v21 = *(double *)(v14 + 8 * v10);
      if (v18 >= v20 || v19 >= v21)
        goto LABEL_40;
      v9 += 2;
      if ((uint64_t)v12 < v6 && v9 >= *(unsigned int *)(v15 + 4 * v12))
      {
        if (v10 < v6 && v9 >= *(unsigned int *)(v15 + 4 * v10))
        {
          v10 = v12 + 2;
          if ((uint64_t)(v12 + 2) < v6 && v9 >= *(unsigned int *)(v15 + 4 * v10))
          {
            while (v6 - 3 != v12)
            {
              v23 = *(unsigned int *)(a5 + 44 + 4 * v12++);
              if (v9 < v23)
              {
                v10 = v12 + 2;
                goto LABEL_24;
              }
            }
            v10 = v6;
          }
        }
      }
      else
      {
        v10 = v12;
      }
LABEL_24:
      *a2 = v18;
      a2[1] = v20;
      a2[2] = v19;
      a2[3] = v21;
      if (v8 == a3)
        goto LABEL_9;
      a2 += 4;
      v16 = v8 + 1;
      v11 = v8;
      v12 = v10;
      if (v10 == v6)
      {
        v11 = v8;
        v12 = v10;
        if (v9 == v7)
          goto LABEL_6;
      }
    }
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_184A98858(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  int64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;

  if (!a2)
    goto LABEL_9;
  if (!a3)
    goto LABEL_10;
  v6 = a5 + a6;
  v7 = __OFADD__(a5, a6);
  if (a3 < 0)
    goto LABEL_30;
  if (v7)
  {
LABEL_31:
    __break(1u);
    return result;
  }
  if (v6 != a6)
  {
    v8 = 0;
    v9 = 0;
    if ((uint64_t)a6 <= v6)
      v10 = a5 + a6;
    else
      v10 = a6;
    v11 = v10 - a6;
    v12 = 0x100000000 - a6;
    if (a6 > 0x100000000)
      v12 = 0;
    while ((a6 & 0x8000000000000000) == 0)
    {
      if (v12 == v8)
        goto LABEL_28;
      if (v11 == v8)
        goto LABEL_29;
      v13 = *(_QWORD *)(a4 + 8 * v9);
      v9 = a6 + v8 + 1;
      *(_QWORD *)a2 = v13;
      *(_DWORD *)(a2 + 8) = a6 + v8;
      if (a3 - 1 == v8)
        goto LABEL_25;
      if (a5 - 1 == v8)
      {
        a3 = a5;
        goto LABEL_11;
      }
      a2 += 16;
      ++v8;
      v14 = __OFSUB__(v9, a6);
      v9 -= a6;
      if (v14)
      {
        __break(1u);
LABEL_25:
        v6 = v9;
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
LABEL_9:
  a3 = 0;
LABEL_10:
  v6 = a6;
LABEL_11:
  *result = a4;
  result[1] = a5;
  result[2] = a6;
  result[3] = v6;
  return (_QWORD *)a3;
}

_QWORD *sub_184A98928(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  if (!a2)
  {
    v5 = 0;
    v6 = 0;
    goto LABEL_10;
  }
  if (!a3)
  {
    v5 = 0;
    goto LABEL_9;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    *a2 = a4;
    a2[1] = a5;
    if (a3 == 1)
    {
      v5 = 1;
LABEL_9:
      v6 = a3;
      goto LABEL_10;
    }
    a2[2] = 0;
    a2[3] = 0;
    v5 = 2;
    v6 = 2;
    if (a3 == 2)
      goto LABEL_9;
LABEL_10:
    *result = a4;
    result[1] = a5;
    result[2] = v5;
    return (_QWORD *)v6;
  }
  __break(1u);
  return result;
}

_QWORD *sub_184A98988(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unsigned int *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (!a2)
  {
    v6 = 0;
    a3 = 0;
    goto LABEL_22;
  }
  if (!a3)
  {
    v6 = 0;
    goto LABEL_22;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v6 = *(_QWORD *)(a4 + 16);
    if (!v6)
    {
      a3 = 0;
      goto LABEL_22;
    }
    v7 = *(unsigned int *)(a4 + 32);
    *a2 = a5;
    a2[1] = v7;
    if (a3 == 1)
    {
      v6 = 1;
LABEL_22:
      *result = a4;
      result[1] = a5;
      result[2] = a6;
      result[3] = v6;
      return (_QWORD *)a3;
    }
    if (v6 == 1)
    {
      a3 = 1;
      goto LABEL_22;
    }
    v8 = 0;
    v9 = a2 + 3;
    v10 = (unsigned int *)(a4 + 36);
    while (1)
    {
      v11 = *(_QWORD *)(a4 + 16);
      if (v8 >= v11)
        break;
      if (v8 + 1 >= v11)
        goto LABEL_24;
      v12 = *(v10 - 1);
      v13 = *v10;
      if (v12 > v13)
        goto LABEL_25;
      v14 = v13 - v12;
      v15 = a5 + 8 * v12;
      if (!a5)
        v15 = 0;
      *(v9 - 1) = v15;
      *v9 = v14;
      if (a3 - 2 == v8)
      {
        v6 = a3;
        goto LABEL_22;
      }
      v9 += 2;
      ++v8;
      ++v10;
      if (v6 - 1 == v8)
      {
        a3 = v6;
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_184A98A70(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  unint64_t v11;
  int32x4_t v12;
  int32x4_t *v13;
  unsigned int *v14;

  if (!a2)
  {
    v5 = 0;
    goto LABEL_23;
  }
  if (!a3)
  {
LABEL_22:
    v5 = a3;
    goto LABEL_23;
  }
  if (a3 < 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v5 = a4;
  if (!a4)
  {
LABEL_23:
    *(_QWORD *)result = a4;
    *(_DWORD *)(result + 8) = a5;
    *(_QWORD *)(result + 16) = v5;
    return v5;
  }
  v6 = a4 - 1;
  if (a4 >= 1)
  {
    *a2 = a5;
    if (a3 != 1)
    {
      if (a3 - 2 < v6)
        v6 = a3 - 2;
      if (v6 >= a3 - 1)
        v6 = a3 - 1;
      v7 = v6 + 1;
      if (v7 > 8)
      {
        v10 = v7 & 7;
        if ((v7 & 7) == 0)
          v10 = 8;
        v11 = v7 - v10;
        v8 = v7 - v10 + 1;
        v9 = &a2[v11];
        v12 = vdupq_n_s32(a5);
        v13 = (int32x4_t *)(a2 + 5);
        do
        {
          v13[-1] = v12;
          *v13 = v12;
          v13 += 2;
          v11 -= 8;
        }
        while (v11);
      }
      else
      {
        v8 = 1;
        v9 = a2;
      }
      v14 = v9 + 1;
      while (a3 != v8)
      {
        if (a4 == v8)
        {
          v5 = a4;
          goto LABEL_23;
        }
        ++v8;
        *v14++ = a5;
        if (a3 == v8)
          goto LABEL_22;
      }
      __break(1u);
      goto LABEL_26;
    }
    goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

unint64_t sub_184A98B4C(unint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;

  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  v4 = *(_QWORD *)(a4 + 16);
  if (v4 <= a2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v5 = *(_QWORD *)(a3 + 16);
  if (v5 <= result)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (a2 + 1 >= v4)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (result + 1 >= v5)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    return result;
  }
  if (*(double *)(a4 + 32 + 8 * a2) >= *(double *)(a4 + 32 + 8 * (a2 + 1))
    || *(double *)(a3 + 32 + 8 * result) >= *(double *)(a3 + 32 + 8 * (result + 1)))
  {
    goto LABEL_19;
  }
  return result;
}

uint64_t sub_184A98BC8(uint64_t result, uint64_t a2, uint64_t a3)
{
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = __OFADD__(a2, 2);
  v4 = a2 + 2;
  if (v3)
  {
    __break(1u);
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a3 + 16);
  if (v5 <= result)
    return result;
  if (result < 0)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  if (v4 >= *(unsigned int *)(a3 + 32 + 4 * result))
  {
    while (v5 - 1 != result)
    {
      v6 = result + 1;
      v7 = *(unsigned int *)(a3 + 36 + 4 * result++);
      if (v4 < v7)
        return v6;
    }
    return *(_QWORD *)(a3 + 16);
  }
  return result;
}

uint64_t sub_184A98C30(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;
  uint64_t v16;

  if (a3 < 0)
  {
    v11 = 0;
    v12 = a4 + 32;
    while (1)
    {
      v9 = __OFSUB__(a2, 2);
      a2 -= 2;
      if (v9)
        goto LABEL_39;
      v13 = result;
      if (result-- < 1)
        goto LABEL_19;
      v15 = *(_QWORD *)(a4 + 16);
      if (result >= v15)
        goto LABEL_40;
      if (a2 >= *(unsigned int *)(v12 + 4 * result))
      {
LABEL_19:
        result = v13;
      }
      else if (result)
      {
        if (v13 - 2 >= v15)
          goto LABEL_42;
        if (a2 < *(unsigned int *)(v12 + 4 * (v13 - 2)))
        {
          if (v13 != 2)
          {
            if (v13 - 3 >= v15)
              goto LABEL_43;
            result = v13 - 2;
            if (a2 >= *(unsigned int *)(v12 + 4 * (v13 - 3)))
              goto LABEL_20;
            while (v13 - 3 >= 1)
            {
              v16 = *(unsigned int *)(a4 + 16 + 4 * v13--);
              if (a2 >= v16)
              {
                result = v13 - 2;
                goto LABEL_20;
              }
            }
          }
          result = 0;
        }
      }
LABEL_20:
      if (--v11 <= a3)
        return result;
    }
  }
  if (a3)
  {
    v4 = 0;
    v5 = *(_QWORD *)(a4 + 16);
    v6 = a4 + 32;
    while (1)
    {
      v9 = __OFADD__(a2, 2);
      a2 += 2;
      if (v9)
        break;
      if (result >= v5)
        goto LABEL_4;
      if (result < 0)
        goto LABEL_41;
      if (a2 < *(unsigned int *)(v6 + 4 * result))
      {
LABEL_4:
        v7 = result;
      }
      else
      {
        v7 = result + 1;
        if (result + 1 < v5 && a2 >= *(unsigned int *)(v6 + 4 * v7))
        {
          v7 = result + 2;
          if (result + 2 < v5 && a2 >= *(unsigned int *)(v6 + 4 * v7))
          {
            while (v5 - 3 != result)
            {
              v10 = *(unsigned int *)(a4 + 44 + 4 * result++);
              if (a2 < v10)
              {
                v7 = result + 2;
                goto LABEL_5;
              }
            }
            v7 = *(_QWORD *)(a4 + 16);
          }
        }
      }
LABEL_5:
      result = v7;
      if (v4++ == a3 - 1)
        return v7;
    }
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
  }
  return result;
}

unint64_t sub_184A98DC4(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  BOOL v4;

  if (result > 2 || a3 > 2)
  {
    __break(1u);
    goto LABEL_14;
  }
  v3 = a3 - result;
  if (a2 >= 1)
  {
    if (v3 < 0 || v3 >= a2)
      goto LABEL_10;
    return 0;
  }
  if (v3 <= 0 && v3 > a2)
    return 0;
LABEL_10:
  v4 = __OFADD__(result, a2);
  result += a2;
  if (v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (result > 2)
LABEL_15:
    __break(1u);
  return result;
}

uint64_t sub_184A98E30(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  unint64_t v18;
  uint64_t v19;

  if (a3 < 0)
  {
    v13 = 0;
    v14 = a6 + 32;
    while (1)
    {
      if (result == a4 && a2 == a5)
        return 0;
      v9 = __OFSUB__(a2, 2);
      a2 -= 2;
      if (v9)
      {
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
        return result;
      }
      v16 = result;
      if (result-- < 1)
        goto LABEL_22;
      v18 = *(_QWORD *)(a6 + 16);
      if (result >= v18)
        goto LABEL_47;
      if (a2 >= *(unsigned int *)(v14 + 4 * result))
      {
LABEL_22:
        result = v16;
      }
      else if (result)
      {
        if (v16 - 2 >= v18)
          goto LABEL_49;
        if (a2 < *(unsigned int *)(v14 + 4 * (v16 - 2)))
        {
          if (v16 == 2)
            goto LABEL_41;
          if (v16 - 3 >= v18)
            goto LABEL_50;
          result = v16 - 2;
          if (a2 < *(unsigned int *)(v14 + 4 * (v16 - 3)))
          {
            while (v16 - 3 >= 1)
            {
              v19 = *(unsigned int *)(a6 + 16 + 4 * v16--);
              if (a2 >= v19)
              {
                result = v16 - 2;
                goto LABEL_23;
              }
            }
LABEL_41:
            result = 0;
          }
        }
      }
LABEL_23:
      if (--v13 <= a3)
        return result;
    }
  }
  if (a3)
  {
    v6 = 0;
    v7 = a6 + 32;
    while (result != a4 || a2 != a5)
    {
      v9 = __OFADD__(a2, 2);
      a2 += 2;
      if (v9)
      {
        __break(1u);
        goto LABEL_46;
      }
      v10 = result;
      v11 = *(_QWORD *)(a6 + 16);
      if (result < (uint64_t)v11)
      {
        if (result < 0)
          goto LABEL_48;
        if (a2 >= *(unsigned int *)(v7 + 4 * result))
        {
          ++result;
          if (v10 + 1 < v11 && a2 >= *(unsigned int *)(v7 + 4 * result))
          {
            result = v10 + 2;
            if (v10 + 2 < v11 && a2 >= *(unsigned int *)(v7 + 4 * result))
            {
              while (v11 - 3 != v10)
              {
                v12 = *(unsigned int *)(a6 + 44 + 4 * v10++);
                if (a2 < v12)
                {
                  result = v10 + 2;
                  goto LABEL_4;
                }
              }
              result = *(_QWORD *)(a6 + 16);
            }
          }
        }
      }
LABEL_4:
      if (++v6 == a3)
        return result;
    }
    return 0;
  }
  return result;
}

uint64_t sub_184A98FF4(uint64_t result, uint64_t a2, uint64_t a3)
{
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = __OFSUB__(a2, 2);
  v4 = a2 - 2;
  if (v3)
  {
    __break(1u);
    goto LABEL_11;
  }
  v5 = result - 1;
  if (result < 1)
    return result;
  if (v5 >= *(_QWORD *)(a3 + 16))
  {
LABEL_11:
    __break(1u);
    return result;
  }
  if (v4 < *(unsigned int *)(a3 + 32 + 4 * v5))
  {
    while (1)
    {
      v6 = result - 1;
      if (result - 1 < 1)
        break;
      v7 = *(unsigned int *)(a3 + 24 + 4 * result--);
      if (v4 >= v7)
        return v6;
    }
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for Region.SubBounds.Index()
{
  return &type metadata for Region.SubBounds.Index;
}

uint64_t initializeBufferWithCopyOfBuffer for Region.UnsafeSpans(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t destroy for Region.UnsafeSpans()
{
  return swift_release();
}

_QWORD *assignWithCopy for Region.UnsafeSpans(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for Region.UnsafeSpans(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

uint64_t _s12CoreGraphics6RegionV9SubBoundsVwet_0(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_184A9917C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Region.UnsafeSpans()
{
  return &type metadata for Region.UnsafeSpans;
}

ValueMetadata *type metadata accessor for Region.UnsafeRectSpans()
{
  return &type metadata for Region.UnsafeRectSpans;
}

uint64_t sub_184A991DC()
{
  return sub_184A99458(&qword_1EDD19FA8, &qword_1EDD19FB0, MEMORY[0x1E0DEC908]);
}

unint64_t sub_184A9920C()
{
  unint64_t result;

  result = qword_1EDD19FB8;
  if (!qword_1EDD19FB8)
  {
    result = MEMORY[0x186DC3348](&unk_184E38D38, &type metadata for Region.UnsafeRectSpans);
    atomic_store(result, (unint64_t *)&qword_1EDD19FB8);
  }
  return result;
}

uint64_t sub_184A99250()
{
  return sub_184A99458(&qword_1EDD19FC0, &qword_1EDD19FC8, MEMORY[0x1E0DEDE48]);
}

unint64_t sub_184A99280()
{
  unint64_t result;

  result = qword_1EDD19FD0;
  if (!qword_1EDD19FD0)
  {
    result = MEMORY[0x186DC3348](&unk_184E38DA0, &type metadata for Region.UnsafeRectSpans);
    atomic_store(result, (unint64_t *)&qword_1EDD19FD0);
  }
  return result;
}

uint64_t sub_184A992C4()
{
  return sub_184A99590(&qword_1EDD19FD8, &qword_1EDD19FC8, (uint64_t (*)(void))sub_184A992F8, MEMORY[0x1E0DEDE28]);
}

unint64_t sub_184A992F8()
{
  unint64_t result;

  result = qword_1EDD19FE0;
  if (!qword_1EDD19FE0)
  {
    result = MEMORY[0x186DC3348](&unk_184E38E80, &type metadata for Region.UnsafeRectSpans);
    atomic_store(result, (unint64_t *)&qword_1EDD19FE0);
  }
  return result;
}

uint64_t sub_184A99340()
{
  return sub_184A99590(&qword_1EDD19FE8, &qword_1EDD19FC8, (uint64_t (*)(void))sub_184A99374, MEMORY[0x1E0DEDE40]);
}

unint64_t sub_184A99374()
{
  unint64_t result;

  result = qword_1EDD19FF0;
  if (!qword_1EDD19FF0)
  {
    result = MEMORY[0x186DC3348](&unk_184E38EE0, &type metadata for Region.UnsafeRectSpans);
    atomic_store(result, (unint64_t *)&qword_1EDD19FF0);
  }
  return result;
}

uint64_t sub_184A993B8()
{
  return sub_184A99458(&qword_1EDD19FF8, &qword_1EDD1A000, MEMORY[0x1E0DEC908]);
}

unint64_t sub_184A993E8()
{
  unint64_t result;

  result = qword_1EDD1A008;
  if (!qword_1EDD1A008)
  {
    result = MEMORY[0x186DC3348](&unk_184E38F30, &type metadata for Region.UnsafeSpans);
    atomic_store(result, (unint64_t *)&qword_1EDD1A008);
  }
  return result;
}

uint64_t sub_184A9942C()
{
  return sub_184A99458(&qword_1EDD1A010, &qword_1EDD1A018, MEMORY[0x1E0DEDE48]);
}

uint64_t sub_184A99458(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x186DC3348](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_184A9949C()
{
  unint64_t result;

  result = qword_1EDD1A020;
  if (!qword_1EDD1A020)
  {
    result = MEMORY[0x186DC3348](&unk_184E38F98, &type metadata for Region.UnsafeSpans);
    atomic_store(result, (unint64_t *)&qword_1EDD1A020);
  }
  return result;
}

uint64_t sub_184A994E0()
{
  return sub_184A99590(&qword_1EDD1A028, &qword_1EDD1A018, (uint64_t (*)(void))sub_184A99514, MEMORY[0x1E0DEDE28]);
}

unint64_t sub_184A99514()
{
  unint64_t result;

  result = qword_1EDD1A030;
  if (!qword_1EDD1A030)
  {
    result = MEMORY[0x186DC3348](&unk_184E39078, &type metadata for Region.UnsafeSpans);
    atomic_store(result, (unint64_t *)&qword_1EDD1A030);
  }
  return result;
}

uint64_t sub_184A9955C()
{
  return sub_184A99590(&qword_1EDD1A038, &qword_1EDD1A018, (uint64_t (*)(void))sub_184A995F4, MEMORY[0x1E0DEDE40]);
}

uint64_t sub_184A99590(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9 = a3();
    result = MEMORY[0x186DC3348](a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_184A995F4()
{
  unint64_t result;

  result = qword_1EDD1A040;
  if (!qword_1EDD1A040)
  {
    result = MEMORY[0x186DC3348](&unk_184E390D8, &type metadata for Region.UnsafeSpans);
    atomic_store(result, (unint64_t *)&qword_1EDD1A040);
  }
  return result;
}

Swift::Bool __swiftcall CGAffineTransformEqualToTransform(_:_:)(CGAffineTransform *a1, CGAffineTransform *a2)
{
  Swift::Bool result;

  result = sub_184E30B30();
  __break(1u);
  return result;
}

CGColorRef_optional __swiftcall CGColorGetConstantColor(_:)(CFStringRef_optional a1)
{
  CGColorRef_optional result;

  result.value = (CGColorRef)sub_184E30B30();
  __break(1u);
  return result;
}

Swift::Bool __swiftcall CGColorEqualToColor(_:_:)(CGColorRef_optional a1, CGColorRef_optional a2)
{
  Swift::Bool result;

  result = sub_184E30B30();
  __break(1u);
  return result;
}

void CGColorGetComponents(_:)()
{
  sub_184E30B30();
  __break(1u);
}

Swift::Int __swiftcall CGColorSpaceGetColorTableCount(_:)(CGColorSpaceRef_optional a1)
{
  Swift::Int result;

  result = sub_184E30B30();
  __break(1u);
  return result;
}

void CGColorSpaceGetColorTable(_:_:)()
{
  sub_184E30B30();
  __break(1u);
}

void CGContextSetLineDash(_:_:_:_:)()
{
  sub_184E30B30();
  __break(1u);
}

void CGContextMoveToPoint(_:_:_:)()
{
  sub_184E30B30();
  __break(1u);
}

void CGContextAddLineToPoint(_:_:_:)()
{
  sub_184E30B30();
  __break(1u);
}

void CGContextAddCurveToPoint(_:_:_:_:_:_:_:)()
{
  sub_184E30B30();
  __break(1u);
}

void CGContextAddQuadCurveToPoint(_:_:_:_:_:)()
{
  sub_184E30B30();
  __break(1u);
}

void CGContextAddRects(_:_:_:)()
{
  sub_184E30B30();
  __break(1u);
}

void CGContextAddLines(_:_:_:)()
{
  sub_184E30B30();
  __break(1u);
}

void CGContextAddArc(_:_:_:_:_:_:_:)()
{
  sub_184E30B30();
  __break(1u);
}

void CGContextAddArcToPoint(_:_:_:_:_:_:)()
{
  sub_184E30B30();
  __break(1u);
}

void CGContextFillRects(_:_:_:)()
{
  sub_184E30B30();
  __break(1u);
}

void CGContextStrokeLineSegments(_:_:_:)()
{
  sub_184E30B30();
  __break(1u);
}

void CGContextClipToRects(_:_:_:)()
{
  sub_184E30B30();
  __break(1u);
}

Swift::Void __swiftcall CGContextDrawImage(_:_:_:)(CGContextRef_optional a1, __C::CGRect a2, CGImageRef_optional a3)
{
  sub_184E30B30();
  __break(1u);
}

Swift::Void __swiftcall CGContextDrawTiledImage(_:_:_:)(CGContextRef_optional a1, __C::CGRect a2, CGImageRef_optional a3)
{
  sub_184E30B30();
  __break(1u);
}

void CGContextDrawImageApplyingToneMapping(_:_:_:applying:options:)()
{
  sub_184E30B30();
  __break(1u);
}

CGPoint __swiftcall CGContextGetTextPosition(_:)(CGContextRef_optional a1)
{
  double v1;
  double v2;
  CGPoint result;

  sub_184E30B30();
  __break(1u);
  result.y = v2;
  result.x = v1;
  return result;
}

void CGContextSetTextPosition(_:_:_:)()
{
  sub_184E30B30();
  __break(1u);
}

void CGContextShowGlyphsAtPositions(_:_:_:_:)()
{
  sub_184E30B30();
  __break(1u);
}

Swift::Void __swiftcall CGContextFillPath(_:)(CGContextRef_optional a1)
{
  sub_184E30B30();
  __break(1u);
}

Swift::Void __swiftcall CGContextEOFillPath(_:)(CGContextRef_optional a1)
{
  sub_184E30B30();
  __break(1u);
}

Swift::Void __swiftcall CGContextClip(_:)(CGContextRef_optional a1)
{
  sub_184E30B30();
  __break(1u);
}

Swift::Void __swiftcall CGContextEOClip(_:)(CGContextRef_optional a1)
{
  sub_184E30B30();
  __break(1u);
}

void CGGetLastMouseDelta(_:_:)()
{
  sub_184E30B30();
  __break(1u);
}

void CGRectDivide(_:_:_:_:_:)()
{
  sub_184E30B30();
  __break(1u);
}

void CGPointMakeWithDictionaryRepresentation(_:_:)()
{
  sub_184E30B30();
  __break(1u);
}

void CGSizeMakeWithDictionaryRepresentation(_:_:)()
{
  sub_184E30B30();
  __break(1u);
}

void CGRectMakeWithDictionaryRepresentation(_:_:)()
{
  sub_184E30B30();
  __break(1u);
}

void CGImageCreateWithMaskingColors(_:_:)()
{
  sub_184E30B30();
  __break(1u);
}

Swift::Void __swiftcall CGContextDrawLayerInRect(_:_:_:)(CGContextRef_optional a1, __C::CGRect a2, CGLayerRef_optional a3)
{
  sub_184E30B30();
  __break(1u);
}

Swift::Void __swiftcall CGContextDrawLayerAtPoint(_:_:_:)(CGContextRef_optional a1, CGPoint a2, CGLayerRef_optional a3)
{
  sub_184E30B30();
  __break(1u);
}

void CGPathCreateCopyByDashingPath(_:_:_:_:_:)()
{
  sub_184E30B30();
  __break(1u);
}

void CGPathCreateCopyByStrokingPath(_:_:_:_:_:_:)()
{
  sub_184E30B30();
  __break(1u);
}

Swift::Bool __swiftcall CGPathEqualToPath(_:_:)(CGPathRef_optional a1, CGPathRef_optional a2)
{
  Swift::Bool result;

  result = sub_184E30B30();
  __break(1u);
  return result;
}

void CGPathMoveToPoint(_:_:_:_:)()
{
  sub_184E30B30();
  __break(1u);
}

void CGPathAddLineToPoint(_:_:_:_:)()
{
  sub_184E30B30();
  __break(1u);
}

void CGPathAddCurveToPoint(_:_:_:_:_:_:_:_:)()
{
  sub_184E30B30();
  __break(1u);
}

void CGPathAddQuadCurveToPoint(_:_:_:_:_:_:)()
{
  sub_184E30B30();
  __break(1u);
}

void CGPathAddRect(_:_:_:)()
{
  sub_184E30B30();
  __break(1u);
}

void CGPathAddRects(_:_:_:_:)()
{
  sub_184E30B30();
  __break(1u);
}

void CGPathAddLines(_:_:_:_:)()
{
  sub_184E30B30();
  __break(1u);
}

void CGPathAddEllipseInRect(_:_:_:)()
{
  sub_184E30B30();
  __break(1u);
}

void CGPathAddRelativeArc(_:_:_:_:_:_:_:)()
{
  sub_184E30B30();
  __break(1u);
}

void CGPathAddArc(_:_:_:_:_:_:_:_:)()
{
  sub_184E30B30();
  __break(1u);
}

void CGPathAddArcToPoint(_:_:_:_:_:_:_:)()
{
  sub_184E30B30();
  __break(1u);
}

void CGPathAddPath(_:_:_:)()
{
  sub_184E30B30();
  __break(1u);
}

void kCGColorWhite.getter()
{
  sub_184E30B30();
  __break(1u);
}

void kCGColorBlack.getter()
{
  sub_184E30B30();
  __break(1u);
}

void kCGColorClear.getter()
{
  sub_184E30B30();
  __break(1u);
}

uint64_t *_s9OperationOwCP(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = sub_184E30BC0();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD1A048);
    *(uint64_t *)((char *)a1 + *(int *)(v8 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(v8 + 48));
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

uint64_t _s9OperationOwxx(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    v3 = sub_184E30BC0();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  return result;
}

char *_s9OperationOwcp(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = sub_184E30BC0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD1A048);
    *(_QWORD *)&a1[*(int *)(v7 + 48)] = *(_QWORD *)&a2[*(int *)(v7 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *_s9OperationOwca(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (a1 != a2)
  {
    sub_184A9A7EC((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = sub_184E30BC0();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD1A048);
      *(_QWORD *)&a1[*(int *)(v7 + 48)] = *(_QWORD *)&a2[*(int *)(v7 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_184A9A7EC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Region.Operation();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for Region.Operation()
{
  uint64_t result;

  result = qword_1EDD1A050;
  if (!qword_1EDD1A050)
    return swift_getSingletonMetadata();
  return result;
}

char *_s9OperationOwtk(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = sub_184E30BC0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD1A048);
    *(_QWORD *)&a1[*(int *)(v7 + 48)] = *(_QWORD *)&a2[*(int *)(v7 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *_s9OperationOwta(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (a1 != a2)
  {
    sub_184A9A7EC((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = sub_184E30BC0();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD1A048);
      *(_QWORD *)&a1[*(int *)(v7 + 48)] = *(_QWORD *)&a2[*(int *)(v7 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t _s9OperationOwet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t _s9OperationOwst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_184A9A9D8()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_184A9A9E8()
{
  uint64_t result;
  unint64_t v1;
  _QWORD v2[6];

  v2[4] = " ";
  result = sub_184E30BC0();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v2[5] = v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_184A9AA70@<X0>(double *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  double *v18;
  double v19;
  uint64_t result;
  double v21;
  double v22;
  int v23;
  double v24;
  double v25;
  double v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  double v29;

  v6 = sub_184E30BC0();
  v7 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v12);
  v14 = (char *)&v28 - v13;
  v15 = type metadata accessor for Region.Operation();
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (double *)((char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = *a1;
  sub_184A9AD08(a2, (uint64_t)v18);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    v21 = *(double *)((char *)v18 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EDD1A048) + 48));
    result = (*(uint64_t (**)(char *, double *, uint64_t))(v7 + 32))(v14, v18, v6);
    if (v21 > 0.0)
    {
      v22 = v19 * v21;
      v29 = v22;
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v14, v6);
      v23 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v11, v6);
      if (v23 == *MEMORY[0x1E0DED4F0])
      {
        v24 = round(v22);
      }
      else if (v23 == *MEMORY[0x1E0DED4E8])
      {
        v24 = rint(v22);
      }
      else if (v23 == *MEMORY[0x1E0DED500])
      {
        v24 = ceil(v22);
      }
      else if (v23 == *MEMORY[0x1E0DED508])
      {
        v24 = floor(v22);
      }
      else
      {
        if (v23 != *MEMORY[0x1E0DED4D8])
        {
          if (v23 == *MEMORY[0x1E0DED4E0])
          {
            result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v14, v6);
            if ((*(_QWORD *)&v22 & 0x8000000000000000) != 0)
              v26 = floor(v22);
            else
              v26 = ceil(v22);
          }
          else
          {
            sub_184E30A28();
            v27 = *(void (**)(char *, uint64_t))(v7 + 8);
            v27(v14, v6);
            result = ((uint64_t (*)(char *, uint64_t))v27)(v11, v6);
            v26 = v29;
          }
          v25 = v26 / v21;
          goto LABEL_16;
        }
        v24 = trunc(v22);
      }
      result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v14, v6);
      v25 = v24 / v21;
LABEL_16:
      *a3 = v25;
      return result;
    }
    __break(1u);
  }
  else if (*v18 >= 0.0)
  {
    v25 = v18[2] + v19 * *v18;
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t sub_184A9AD08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Region.Operation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_184A9AD4C@<X0>(double *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  double *v18;
  double v19;
  uint64_t result;
  double v21;
  double v22;
  int v23;
  double v24;
  double v25;
  double v26;
  double v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  double v30;

  v6 = sub_184E30BC0();
  v7 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v12);
  v14 = (char *)&v29 - v13;
  v15 = type metadata accessor for Region.Operation();
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (double *)((char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = *a1;
  sub_184A9AD08(a2, (uint64_t)v18);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    v21 = *(double *)((char *)v18 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EDD1A048) + 48));
    result = (*(uint64_t (**)(char *, double *, uint64_t))(v7 + 32))(v14, v18, v6);
    if (v21 > 0.0)
    {
      v22 = v19 * v21;
      v30 = v22;
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v14, v6);
      v23 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v11, v6);
      if (v23 == *MEMORY[0x1E0DED4F0])
      {
        v24 = round(v22);
      }
      else if (v23 == *MEMORY[0x1E0DED4E8])
      {
        v24 = rint(v22);
      }
      else if (v23 == *MEMORY[0x1E0DED500])
      {
        v24 = ceil(v22);
      }
      else if (v23 == *MEMORY[0x1E0DED508])
      {
        v24 = floor(v22);
      }
      else
      {
        if (v23 != *MEMORY[0x1E0DED4D8])
        {
          if (v23 == *MEMORY[0x1E0DED4E0])
          {
            result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v14, v6);
            if ((*(_QWORD *)&v22 & 0x8000000000000000) != 0)
              v27 = floor(v22);
            else
              v27 = ceil(v22);
          }
          else
          {
            sub_184E30A28();
            v28 = *(void (**)(char *, uint64_t))(v7 + 8);
            v28(v14, v6);
            result = ((uint64_t (*)(char *, uint64_t))v28)(v11, v6);
            v27 = v30;
          }
          v26 = v27 / v21;
          goto LABEL_16;
        }
        v24 = trunc(v22);
      }
      result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v14, v6);
      v26 = v24 / v21;
LABEL_16:
      *a3 = v26;
      return result;
    }
    __break(1u);
  }
  else
  {
    v25 = v18[1];
    if (v25 >= 0.0)
    {
      v26 = v18[3] + v19 * v25;
      goto LABEL_16;
    }
  }
  __break(1u);
  return result;
}

void sub_184A9AFE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  double v3;
  double v4;
  uint64_t v5;
  double v6;
  double v7;

  sub_184A981D0();
  sub_184A9B500((void (*)(uint64_t (*)(uint64_t), _QWORD *))sub_184A9CBE8);
  if (v1)
    goto LABEL_7;
  v2 = *(_QWORD *)(v0 + 32);
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_7;
  sub_184A98058();
  v5 = *(_QWORD *)(v2 + 16);
  if (v5)
  {
    if (v3 < v4)
    {
      v6 = *(double *)(v2 + 32);
      v7 = *(double *)(v2 + 32 + 8 * v5 - 8);
      if (v6 < v7)
      {
        *(double *)v0 = v3;
        *(double *)(v0 + 8) = v4;
        *(double *)(v0 + 16) = v6;
        *(double *)(v0 + 24) = v7;
LABEL_7:
        sub_184A98288(v0);
        return;
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_184A9B0A4(void (*a1)(_QWORD *), uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  __int128 *v29;
  void (*v30)(_QWORD *);
  uint64_t *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  _QWORD v36[3];
  unint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _OWORD v42[3];
  _BYTE v43[48];
  uint64_t v44;

  sub_184A9CEC8(a3, (uint64_t)v42, qword_1EDD1A0A0);
  sub_184A9CBA0((uint64_t)v42, (uint64_t)v43);
  sub_184A9BEC4(&v39);
  if (v4)
  {
    v28 = &qword_1EDD1A180;
    v29 = (__int128 *)v43;
    return sub_184A9CF0C((uint64_t)v29, v28);
  }
  v7 = a4 + 4;
  v8 = a4 + 6;
  v44 = (uint64_t)v42 + 8;
  v31 = a4 + 5;
  v9 = a4 + 5;
  v30 = a1;
  while (2)
  {
    if ((_QWORD)v41 == 1)
    {
      sub_184A9CF0C((uint64_t)v43, &qword_1EDD1A180);
      v28 = (uint64_t *)&unk_1EDD1A188;
      v29 = &v39;
      return sub_184A9CF0C((uint64_t)v29, v28);
    }
    v42[0] = v39;
    v42[1] = v40;
    v42[2] = v41;
    v10 = v39;
    v11 = *v7;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v7 = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_184A95C28(0, *(_QWORD *)(v11 + 16) + 1, 1);
      v11 = *v7;
    }
    v14 = *(_QWORD *)(v11 + 16);
    v13 = *(_QWORD *)(v11 + 24);
    if (v14 >= v13 >> 1)
    {
      sub_184A95C28((char *)(v13 > 1), v14 + 1, 1);
      v11 = *v7;
    }
    *(_QWORD *)(v11 + 16) = v14 + 1;
    *(_QWORD *)(v11 + 8 * v14 + 32) = v10;
    *v7 = v11;
    v15 = *(_QWORD *)(*v8 + 16);
    sub_184A9CEC8(v44, (uint64_t)v36, &qword_1EDD1A190);
    sub_184A9CBA0((uint64_t)v36, (uint64_t)&v39);
    while (1)
    {
      sub_184A9CEC8((uint64_t)&v39, (uint64_t)&v32, &qword_1EDD1A170);
      if (!v33)
      {
        result = sub_184A9CF0C((uint64_t)&v32, &qword_1EDD1A170);
        goto LABEL_20;
      }
      sub_184A9CF48(&v32, (uint64_t)v36);
      __swift_project_boxed_opaque_existential_1(v36, v37);
      result = sub_184E30B9C();
      if ((result & 1) != 0)
        break;
      if (!*((_QWORD *)&v40 + 1))
        goto LABEL_35;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v39, *((uint64_t *)&v40 + 1));
      sub_184A7FD70();
      sub_184E30B90();
      v35 = 0;
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
      if ((v35 & 1) != 0)
        goto LABEL_20;
      v17 = v34;
      v18 = *v8;
      v19 = swift_isUniquelyReferenced_nonNull_native();
      *v8 = v18;
      if ((v19 & 1) == 0)
      {
        sub_184A95C28(0, *(_QWORD *)(v18 + 16) + 1, 1);
        v18 = *v8;
      }
      v21 = *(_QWORD *)(v18 + 16);
      v20 = *(_QWORD *)(v18 + 24);
      if (v21 >= v20 >> 1)
      {
        sub_184A95C28((char *)(v20 > 1), v21 + 1, 1);
        v18 = *v8;
      }
      *(_QWORD *)(v18 + 16) = v21 + 1;
      *(_QWORD *)(v18 + 8 * v21 + 32) = v17;
      *v8 = v18;
    }
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
LABEL_20:
    v22 = *(_QWORD *)(*v8 + 16);
    if (HIDWORD(v22))
    {
      __break(1u);
LABEL_33:
      __break(1u);
      break;
    }
    v23 = *v9;
    result = swift_isUniquelyReferenced_nonNull_native();
    *v9 = v23;
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_184A95C0C(0, *(_QWORD *)(v23 + 16) + 1, 1);
      v23 = *v9;
    }
    v25 = *(_QWORD *)(v23 + 16);
    v24 = *(_QWORD *)(v23 + 24);
    if (v25 >= v24 >> 1)
    {
      result = (uint64_t)sub_184A95C0C((char *)(v24 > 1), v25 + 1, 1);
      v23 = *v31;
    }
    *(_QWORD *)(v23 + 16) = v25 + 1;
    *(_DWORD *)(v23 + 4 * v25 + 32) = v22;
    v9 = v31;
    *v31 = v23;
    if (v22 < v15)
      goto LABEL_33;
    v26 = *v8;
    v27 = *(_QWORD *)(*v8 + 16);
    if (v27 >= v15 && v27 >= v22)
    {
      v36[0] = v10;
      v36[1] = v26;
      v36[2] = v26 + 32;
      v37 = v15;
      v38 = (2 * v22) | 1;
      swift_retain();
      v30(v36);
      sub_184A9CF0C((uint64_t)&v39, &qword_1EDD1A198);
      sub_184A9CF0C((uint64_t)v42, &qword_1EDD1A1A0);
      swift_release();
      sub_184A9BEC4(&v39);
      continue;
    }
    break;
  }
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_184A9B500(void (*a1)(uint64_t (*)(uint64_t a1), _QWORD *))
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _QWORD v4[5];
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  unint64_t v8;

  v8 = 0;
  v6 = 0u;
  v7 = 0u;
  v5 = 0;
  v4[2] = &v5;
  v4[3] = &v6;
  a1(sub_184A9CE50, v4);
  if (v1)
    return swift_unknownObjectRelease();
  result = *((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    if (__OFSUB__(v8 >> 1, *((_QWORD *)&v7 + 1)))
    {
      __break(1u);
      return result;
    }
    if ((uint64_t)((v8 >> 1) - *((_QWORD *)&v7 + 1)) >= 1)
    {
      sub_184A9CE84();
      swift_allocError();
      *(_OWORD *)v3 = xmmword_184E39160;
      *(_BYTE *)(v3 + 16) = 7;
      swift_willThrow();
    }
    return swift_unknownObjectRelease();
  }
  return result;
}

BOOL sub_184A9B5CC(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t sub_184A9B5DC()
{
  return sub_184E30C2C();
}

uint64_t sub_184A9B600(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1500408173 && a2 == 0xE400000000000000;
  if (v2 || (sub_184E30BCC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x73746E656D676573 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_184E30BCC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_184A9B6E0()
{
  sub_184E30C20();
  sub_184E30C2C();
  return sub_184E30C50();
}

uint64_t sub_184A9B724(char a1)
{
  if ((a1 & 1) != 0)
    return 0x73746E656D676573;
  else
    return 1500408173;
}

BOOL sub_184A9B754(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_184A9B5CC(*a1, *a2);
}

uint64_t sub_184A9B768()
{
  return sub_184A9B6E0();
}

uint64_t sub_184A9B778()
{
  return sub_184A9B5DC();
}

uint64_t sub_184A9B788()
{
  sub_184E30C20();
  sub_184A9B5DC();
  return sub_184E30C50();
}

uint64_t sub_184A9B7CC()
{
  char *v0;

  return sub_184A9B724(*v0);
}

uint64_t sub_184A9B7DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_184A9B600(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_184A9B808()
{
  return 0;
}

uint64_t sub_184A9B814@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_184A793C8();
  *a1 = result;
  return result;
}

uint64_t sub_184A9B83C(uint64_t a1)
{
  MEMORY[0x186DC3348](&unk_184E39700, a1);
  return sub_184E30CBC();
}

uint64_t sub_184A9B870(uint64_t a1)
{
  MEMORY[0x186DC3348](&unk_184E39700, a1);
  return sub_184E30CC8();
}

uint64_t sub_184A9B8A4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD v21[4];
  char v22;

  v6 = *(_QWORD *)(a2 + 16);
  v17 = *(_QWORD *)(a2 + 24);
  v18 = v6;
  v7 = _s12EncodingKeysOMa_0(255, v6, v17, a4);
  MEMORY[0x186DC3348](&unk_184E39700, v7);
  v8 = sub_184E30B78();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v16 - v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v13 = v19;
  sub_184E30CB0();
  v21[0] = *v13;
  v22 = 0;
  sub_184A7F50C();
  v14 = v20;
  sub_184E30B6C();
  if (v14 || (sub_184E30A64() & 1) != 0)
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  v22 = 1;
  sub_184E30B60();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v21, v21[3]);
  sub_184E30BA8();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
}

uint64_t sub_184A9BA6C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_184A9B8A4(a1, a2, a3, a4);
}

uint64_t sub_184A9BA80()
{
  return 1;
}

uint64_t sub_184A9BA90()
{
  return 0x736E617073;
}

void sub_184A9BAA8(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_184A9BAB4()
{
  sub_184A9BE50();
  return sub_184E30CBC();
}

uint64_t sub_184A9BADC()
{
  sub_184A9BE50();
  return sub_184E30CC8();
}

uint64_t Region.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  _QWORD v22[2];
  _QWORD *v23;
  __int128 v24;
  unint64_t (*v25)@<X0>(uint64_t *@<X0>, _QWORD *@<X8>);
  uint64_t v26;
  _BYTE v27[24];
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD1A060);
  v19 = *(_QWORD *)(v3 - 8);
  v20 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v9 = v1[2];
  v10 = v1[3];
  v11 = v1[4];
  v12 = v1[5];
  v13 = v1[6];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_184A9BE50();
  sub_184E30CB0();
  if ((~v7 & 0x7FF0000000000000) != 0 || (v7 & 0xFFFFFFFFFFFFFLL) == 0)
  {
    sub_184E30B60();
    v14 = *(_QWORD *)(v11 + 16);
    if (!v14)
    {
      v22[0] = v7;
      v22[1] = v8;
      v21[0] = v9;
      v21[1] = v10;
      v17 = swift_allocObject();
      *(_QWORD *)(v17 + 16) = v22;
      *(_OWORD *)(v17 + 24) = xmmword_184E387A0;
      *(_BYTE *)(v17 + 40) = 0;
      v23 = v21;
      v24 = xmmword_184E387A0;
      v25 = sub_184A9BE98;
      v26 = v17;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v27, v28);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD1A070);
      sub_184A99458(&qword_1EDD1A078, &qword_1EDD1A070, MEMORY[0x1E0DEC858]);
      sub_184A99458(&qword_1EDD1A080, &qword_1EDD1A088, (uint64_t)&unk_184E39468);
      sub_184E30BA8();
      goto LABEL_8;
    }
LABEL_6:
    v15 = *(_QWORD *)(v13 + 16);
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = v12;
    *(_QWORD *)(v16 + 24) = v13 + 32;
    *(_QWORD *)(v16 + 32) = v15;
    *(_BYTE *)(v16 + 40) = 1;
    v23 = (_QWORD *)(v11 + 32);
    v24 = v14;
    v25 = sub_184A9BE98;
    v26 = v16;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v27, v28);
    swift_retain_n();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD1A070);
    sub_184A99458(&qword_1EDD1A078, &qword_1EDD1A070, MEMORY[0x1E0DEC858]);
    sub_184A99458(&qword_1EDD1A080, &qword_1EDD1A088, (uint64_t)&unk_184E39468);
    sub_184E30BA8();
    swift_release();
LABEL_8:
    swift_release();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v20);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  }
  if (*(_QWORD *)(v11 + 16))
  {
    sub_184E30B60();
    v14 = *(_QWORD *)(v11 + 16);
    goto LABEL_6;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v6, v20);
}

unint64_t sub_184A9BE50()
{
  unint64_t result;

  result = qword_1EDD1A068;
  if (!qword_1EDD1A068)
  {
    result = MEMORY[0x186DC3348](&unk_184E39490, &_s12EncodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EDD1A068);
  }
  return result;
}

unint64_t sub_184A9BEA0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_184A941C8(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_BYTE *)(v2 + 40), a2);
}

uint64_t sub_184A9BEB0(_QWORD *a1)
{
  return Region.encode(to:)(a1);
}

uint64_t sub_184A9BEC4@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  _QWORD v7[4];

  sub_184A9CEC8(v1, (uint64_t)&v5, &qword_1EDD1A170);
  if (!v6)
  {
    result = sub_184A9CF0C((uint64_t)&v5, &qword_1EDD1A170);
    goto LABEL_5;
  }
  sub_184A9CF48(&v5, (uint64_t)v7);
  __swift_project_boxed_opaque_existential_1(v7, v7[3]);
  result = sub_184E30B9C();
  if ((result & 1) != 0)
  {
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
LABEL_5:
    *a1 = 0u;
    a1[1] = 0u;
    a1[2] = xmmword_184E39160;
    return result;
  }
  v4 = *(_QWORD *)(v1 + 24);
  if (v4)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD1A1A0);
    __swift_mutable_project_boxed_opaque_existential_1(v1, v4);
    sub_184A99458(qword_1EDD1A1A8, &qword_1EDD1A1A0, (uint64_t)&unk_184E393E4);
    sub_184E30B90();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_184A9C008()
{
  _BYTE *v0;

  if (*v0)
    return 0x73746E656D676573;
  else
    return 1500408173;
}

uint64_t sub_184A9C03C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_184A9B600(a1, a2);
  *a3 = result;
  return result;
}

void sub_184A9C060(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_184A9C06C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_184A9D29C(&qword_1EDD1A168, (uint64_t)&unk_184E396B0, a3, a4);
  return sub_184E30CBC();
}

uint64_t sub_184A9C0A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_184A9D29C(&qword_1EDD1A168, (uint64_t)&unk_184E396B0, a3, a4);
  return sub_184E30CC8();
}

uint64_t sub_184A9C0DC@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v17;
  _OWORD *v18;
  _OWORD v19[2];
  uint64_t v20;
  _OWORD v21[3];
  char v22;

  v18 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD1A158);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_184A9CB48(0, v9, v10, v11);
  sub_184A9D29C(&qword_1EDD1A168, (uint64_t)&unk_184E396B0, v12, v13);
  sub_184E30C98();
  if (!v2)
  {
    v14 = v18;
    v22 = 0;
    sub_184A7FD70();
    sub_184E30B48();
    *(_QWORD *)&v21[0] = *(_QWORD *)&v19[0];
    v22 = 1;
    if ((sub_184E30B54() & 1) != 0)
    {
      v22 = 1;
      sub_184E30B3C();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      v20 = 0;
      memset(v19, 0, sizeof(v19));
    }
    sub_184A9CBA0((uint64_t)v19, (uint64_t)v21 + 8);
    v15 = v21[1];
    *v14 = v21[0];
    v14[1] = v15;
    v14[2] = v21[2];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_184A9C2B4@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_184A9C0DC(a1, a2);
}

uint64_t sub_184A9C2C8()
{
  sub_184E30C20();
  sub_184E30C2C();
  return sub_184E30C50();
}

uint64_t sub_184A9C308()
{
  return sub_184E30C2C();
}

uint64_t sub_184A9C32C()
{
  sub_184E30C20();
  sub_184E30C2C();
  return sub_184E30C50();
}

uint64_t sub_184A9C368@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x736E617073 && a2 == 0xE500000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_184E30BCC();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_184A9C3F4()
{
  sub_184A9C638();
  return sub_184E30CBC();
}

uint64_t sub_184A9C41C()
{
  sub_184A9C638();
  return sub_184E30CC8();
}

uint64_t Region.init(from:)@<X0>(_QWORD *a1@<X0>, int64x2_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  int64x2_t *v10;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;
  _BYTE v15[40];
  _BYTE v16[40];
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  unint64_t v20;
  int64x2_t *v21;

  v21 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD1A090);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = MEMORY[0x1E0DEE9D8];
  v17 = vdupq_n_s64(0x7FF8000000000000uLL);
  v18 = v17;
  v19.i64[0] = MEMORY[0x1E0DEE9D8];
  v19.i64[1] = MEMORY[0x1E0DEE9D8];
  v20 = MEMORY[0x1E0DEE9D8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_184A9C638();
  sub_184E30C98();
  if (v2)
  {
    swift_release_n();
  }
  else
  {
    v10 = v21;
    if ((sub_184E30B54() & 1) != 0)
    {
      sub_184E30B3C();
      sub_184A9C67C((uint64_t)v16, (uint64_t)v15);
      sub_184A9AFE4();
      sub_184A9CF0C((uint64_t)v15, qword_1EDD1A0A0);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
      (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
      v12 = v17;
      v13 = v18;
      v14 = v19;
      v9 = v20;
    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
      v12 = vdupq_n_s64(0x7FF8000000000000uLL);
      v14 = vdupq_n_s64(v9);
      v13 = v12;
    }
    *v10 = v12;
    v10[1] = v13;
    v10[2] = v14;
    v10[3].i64[0] = v9;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t sub_184A9C638()
{
  unint64_t result;

  result = qword_1EDD1A098;
  if (!qword_1EDD1A098)
  {
    result = MEMORY[0x186DC3348](&unk_184E39418, &_s12DecodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EDD1A098);
  }
  return result;
}

uint64_t sub_184A9C67C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_184A9C6C0@<X0>(_QWORD *a1@<X0>, int64x2_t *a2@<X8>)
{
  return Region.init(from:)(a1, a2);
}

uint64_t sub_184A9C6D4()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t type metadata accessor for UnkeyedDecodingContainerSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UnkeyedDecodingContainerSequence);
}

ValueMetadata *_s12DecodingKeysOMa()
{
  return &_s12DecodingKeysON;
}

uint64_t _s12DecodingKeysOwet_0(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t _s12DecodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_184A9C920 + 4 * byte_184E39170[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_184A9C940 + 4 * byte_184E39175[v4]))();
}

_BYTE *sub_184A9C920(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_184A9C940(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_184A9C948(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_184A9C950(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_184A9C958(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_184A9C960(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *_s12EncodingKeysOMa()
{
  return &_s12EncodingKeysON;
}

unint64_t sub_184A9C980()
{
  unint64_t result;

  result = qword_1EDD1A128;
  if (!qword_1EDD1A128)
  {
    result = MEMORY[0x186DC3348](&unk_184E392CC, &_s12EncodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EDD1A128);
  }
  return result;
}

unint64_t sub_184A9C9C8()
{
  unint64_t result;

  result = qword_1EDD1A130;
  if (!qword_1EDD1A130)
  {
    result = MEMORY[0x186DC3348](&unk_184E39384, &_s12DecodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EDD1A130);
  }
  return result;
}

void sub_184A9CA0C()
{
  JUMPOUT(0x186DC3348);
}

unint64_t sub_184A9CA20()
{
  unint64_t result;

  result = qword_1EDD1A138;
  if (!qword_1EDD1A138)
  {
    result = MEMORY[0x186DC3348](&unk_184E392F4, &_s12DecodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EDD1A138);
  }
  return result;
}

unint64_t sub_184A9CA68()
{
  unint64_t result;

  result = qword_1EDD1A140;
  if (!qword_1EDD1A140)
  {
    result = MEMORY[0x186DC3348](&unk_184E3931C, &_s12DecodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EDD1A140);
  }
  return result;
}

unint64_t sub_184A9CAB0()
{
  unint64_t result;

  result = qword_1EDD1A148;
  if (!qword_1EDD1A148)
  {
    result = MEMORY[0x186DC3348](&unk_184E3923C, &_s12EncodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EDD1A148);
  }
  return result;
}

unint64_t sub_184A9CAF8()
{
  unint64_t result;

  result = qword_1EDD1A150;
  if (!qword_1EDD1A150)
  {
    result = MEMORY[0x186DC3348](&unk_184E39264, &_s12EncodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EDD1A150);
  }
  return result;
}

uint64_t _s12EncodingKeysOMa_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s12EncodingKeysOMn_0);
}

void sub_184A9CB48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!qword_1EDD1A160)
  {
    v4 = _s12DecodingKeysOMa_0(0, a2, a3, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1EDD1A160);
  }
}

uint64_t _s12DecodingKeysOMa_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s12DecodingKeysOMn_0);
}

uint64_t sub_184A9CBA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD1A170);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_184A9CBE8(void (*a1)(_QWORD *), uint64_t a2)
{
  uint64_t v2;

  return sub_184A9B0A4(a1, a2, *(_QWORD *)(v2 + 16), *(uint64_t **)(v2 + 24));
}

uint64_t sub_184A9CC00(uint64_t result, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *(double *)result;
  v5 = *(_QWORD *)(result + 8);
  v7 = *(_QWORD *)(result + 16);
  v8 = *(_QWORD *)(result + 24);
  v9 = *(_QWORD *)(result + 32);
  v10 = v9 >> 1;
  if (v9 >> 1 != v8)
  {
    if ((uint64_t)(v9 >> 1) <= v8)
    {
LABEL_29:
      __break(1u);
    }
    else if (!__OFSUB__(v10, v8))
    {
      if (v8 + 1 == v10)
      {
LABEL_9:
        v14 = *a2;
        sub_184A9CE84();
        swift_allocError();
        *(_QWORD *)v12 = v14;
        *(_QWORD *)(v12 + 8) = 0;
        v13 = 5;
        goto LABEL_22;
      }
      if (v8 + 1 < v10)
      {
        v15 = *(double *)(v7 + 8 * (v8 + 1));
        if (*(double *)(v7 + 8 * v8) >= v15)
        {
          v17 = 1;
LABEL_21:
          v21 = *a2;
          sub_184A9CE84();
          swift_allocError();
          *(_QWORD *)v12 = v21;
          *(_QWORD *)(v12 + 8) = v17;
          v13 = 6;
          goto LABEL_22;
        }
        v16 = 2;
        while (1)
        {
          v17 = v16;
          if (__OFADD__(v16 - 1, 1))
          {
            __break(1u);
LABEL_28:
            __break(1u);
            goto LABEL_29;
          }
          if (!(v8 - v10 + v16))
            break;
          if (v8 + v16 >= v10)
            goto LABEL_28;
          v18 = *(double *)(v7 + 8 * v8 + 8 * v16++);
          v19 = v15 < v18;
          v15 = v18;
          if (!v19)
            goto LABEL_21;
        }
        if ((((_BYTE)v10 - (_BYTE)v8) & 1) != 0)
          goto LABEL_9;
        if (!*(_QWORD *)(a3 + 8))
          goto LABEL_25;
        goto LABEL_3;
      }
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    __break(1u);
    goto LABEL_31;
  }
  if (!*(_QWORD *)(a3 + 8))
  {
    sub_184A9CE84();
    swift_allocError();
    *(_QWORD *)v12 = 0;
    *(_QWORD *)(v12 + 8) = 0;
    v13 = 7;
    goto LABEL_22;
  }
LABEL_3:
  if (*(double *)a3 >= v6)
  {
    v20 = *a2;
    sub_184A9CE84();
    swift_allocError();
    *(_QWORD *)v12 = v20;
    *(_QWORD *)(v12 + 8) = 0;
    v13 = 3;
    goto LABEL_22;
  }
  if (sub_184A962EC(*(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 32), v7, v8, v9))
  {
    v11 = *a2;
    sub_184A9CE84();
    swift_allocError();
    *(_QWORD *)v12 = v11;
    *(_QWORD *)(v12 + 8) = 0;
    v13 = 4;
LABEL_22:
    *(_BYTE *)(v12 + 16) = v13;
    return swift_willThrow();
  }
LABEL_25:
  *(double *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)(a3 + 16) = v7;
  *(_QWORD *)(a3 + 24) = v8;
  *(_QWORD *)(a3 + 32) = v9;
  swift_unknownObjectRetain();
  result = swift_unknownObjectRelease();
  if (!__OFADD__(*a2, 1))
  {
    ++*a2;
    return result;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_184A9CE50(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;
  _OWORD v6[2];
  uint64_t v7;

  v2 = *(_QWORD **)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v4;
  v7 = *(_QWORD *)(a1 + 32);
  return sub_184A9CC00((uint64_t)v6, v2, v3);
}

unint64_t sub_184A9CE84()
{
  unint64_t result;

  result = qword_1EDD1A178;
  if (!qword_1EDD1A178)
  {
    result = MEMORY[0x186DC3348](&protocol conformance descriptor for Region.Error, &type metadata for Region.Error);
    atomic_store(result, (unint64_t *)&qword_1EDD1A178);
  }
  return result;
}

uint64_t sub_184A9CEC8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_184A9CF0C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_184A9CF48(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_184A9CF60()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_184A9CF70()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_184A9CF78(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_184A9CFC4 + 4 * byte_184E3917F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_184A9CFF8 + 4 * byte_184E3917A[v4]))();
}

uint64_t sub_184A9CFF8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_184A9D000(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x184A9D008);
  return result;
}

uint64_t sub_184A9D014(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x184A9D01CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_184A9D020(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_184A9D028(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_184A9D034(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    return __swift_destroy_boxed_opaque_existential_1(a1);
  return a1;
}

uint64_t sub_184A9D044(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v3;
    *(_QWORD *)(a1 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a1);
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  return a1;
}

uint64_t sub_184A9D098(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = *((_QWORD *)a2 + 3);
  if (!*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 24) = v4;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
      return a1;
    }
LABEL_7:
    v5 = *a2;
    v6 = a2[1];
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    return a1;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  return a1;
}

uint64_t sub_184A9D118(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t sub_184A9D15C(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t sub_184A9D1B8(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

uint64_t type metadata accessor for UnkeyedDecodingContainerSequence.ThrowingIterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UnkeyedDecodingContainerSequence.ThrowingIterator);
}

void sub_184A9D220()
{
  JUMPOUT(0x186DC3348);
}

uint64_t sub_184A9D230(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_184A9D29C(&qword_1EDD1A330, (uint64_t)&unk_184E39688, a3, a4);
}

uint64_t sub_184A9D254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_184A9D29C(&qword_1EDD1A338, (uint64_t)&unk_184E395F8, a3, a4);
}

uint64_t sub_184A9D278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_184A9D29C(&qword_1EDD1A340, (uint64_t)&unk_184E39620, a3, a4);
}

uint64_t sub_184A9D29C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_184A9CB48(255, a2, a3, a4);
    result = MEMORY[0x186DC3348](a2, v7);
    atomic_store(result, a1);
  }
  return result;
}

void sub_184A9D2DC()
{
  JUMPOUT(0x186DC3348);
}

void sub_184A9D2EC()
{
  JUMPOUT(0x186DC3348);
}

uint64_t _s12CoreGraphics6RegionV5ErrorO2eeoiySbAE_AEtFZ_0(uint64_t a1)
{
  return ((uint64_t (*)(void))((char *)sub_184A9D350 + 4 * byte_184E39750[*(unsigned __int8 *)(a1 + 16)]))();
}

BOOL sub_184A9D350@<W0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;

  return !v2 && v1 == a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t _s5ErrorOwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF9 && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 249);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 7)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t _s5ErrorOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF8)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 249;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xF9)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xF9)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_184A9D48C(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 6u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 7);
}

uint64_t sub_184A9D4A4(uint64_t result, unsigned int a2)
{
  if (a2 >= 7)
  {
    *(_QWORD *)result = a2 - 7;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 7;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Region.Error()
{
  return &type metadata for Region.Error;
}

void CGRect.__divided(slice:remainder:atDistance:from:)(CGRect *a1, CGRect *a2, CGRectEdge a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  CGRect v9;

  v9.origin.x = a5;
  v9.origin.y = a6;
  v9.size.width = a7;
  v9.size.height = a8;
  CGRectDivide(v9, a1, a2, a4, a3);
}

void static CGFloat.min.getter()
{
  sub_184E30B30();
  __break(1u);
}

void static CGFloat.max.getter()
{
  sub_184E30B30();
  __break(1u);
}

void CGFLOAT_MIN.getter()
{
  sub_184E30B30();
  __break(1u);
}

void CGFLOAT_MAX.getter()
{
  sub_184E30B30();
  __break(1u);
}

void % infix(_:_:)()
{
  sub_184E30B30();
  __break(1u);
}

void %= infix(_:_:)()
{
  sub_184E30B30();
  __break(1u);
}

double nearbyint(_:)(double a1)
{
  return nearbyint(a1);
}

double rint(_:)(double a1)
{
  return rint(a1);
}

double copysign(_:_:)(int8x16_t a1, int8x16_t a2)
{
  float64x2_t v2;
  double result;

  v2.f64[0] = NAN;
  v2.f64[1] = NAN;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vnegq_f64(v2), a1, a2).u64[0];
  return result;
}

double fmax(_:_:)(double a1, double a2)
{
  return fmax(a1, a2);
}

double fmin(_:_:)(double a1, double a2)
{
  return fmin(a1, a2);
}

void fpclassify(_:)()
{
  sub_184E30B30();
  __break(1u);
}

BOOL isnormal(_:)(double a1)
{
  return ((*(_QWORD *)&a1 >> 52) & 0x7FFLL) != 0x7FF && ((*(_QWORD *)&a1 >> 52) & 0x7FFLL) != 0;
}

BOOL isfinite(_:)(double a1)
{
  return (~*(_QWORD *)&a1 & 0x7FF0000000000000) != 0;
}

BOOL isinf(_:)(double a1)
{
  return (*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000;
}

BOOL isnan(_:)(double a1)
{
  return (*(_QWORD *)&a1 & 0xFFFFFFFFFFFFFLL) != 0 && (~*(_QWORD *)&a1 & 0x7FF0000000000000) == 0;
}

uint64_t signbit(_:)(double a1)
{
  return *(_QWORD *)&a1 >> 63;
}

double ldexp(_:_:)(uint64_t a1, double result)
{
  uint64_t v2;
  uint64_t v4;
  BOOL v5;

  v2 = (*(_QWORD *)&result >> 52) & 0x7FFLL;
  if (v2 != 2047 && (v2 | *(_QWORD *)&result & 0xFFFFFFFFFFFFFLL) != 0)
  {
    if (a1 > -1023)
    {
      if (a1 > 1023)
      {
        if (a1 >= 3069)
          a1 = 3069;
        do
        {
          a1 -= 1023;
          result = result * 8.98846567e307;
        }
        while ((unint64_t)a1 > 0x3FF);
      }
    }
    else
    {
      if (a1 <= -3066)
        v4 = -3066;
      else
        v4 = a1;
      do
      {
        a1 = v4 + 1022;
        result = result * 2.22507386e-308;
        v5 = __CFADD__(v4, 2044);
        v4 += 1022;
      }
      while (!v5);
    }
    return result * COERCE_DOUBLE(((a1 << 52) + 0x3FF0000000000000) & 0x7FF0000000000000);
  }
  return result;
}

unint64_t ilogb(_:)(double a1)
{
  uint64_t v1;
  unint64_t result;
  unint64_t v3;

  v1 = (*(_QWORD *)&a1 >> 52) & 0x7FFLL;
  if (v1 == 2047)
    return 0x7FFFFFFFFFFFFFFFLL;
  v3 = *(_QWORD *)&a1 & 0xFFFFFFFFFFFFFLL;
  if (!(v1 | *(_QWORD *)&a1 & 0xFFFFFFFFFFFFFLL))
    return 0x8000000000000000;
  if (v1)
    return v1 - 1023;
  if (v3)
    return -1011 - __clz(v3);
  __break(1u);
  return result;
}

uint64_t lgamma(_:)(double a1)
{
  int v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v2 = 0;
  lgamma_r(a1, &v2);
  return v2;
}

uint64_t remquo(_:_:)(long double a1, long double a2)
{
  int __z;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  __z = 0;
  remquo(a1, a2, &__z);
  return __z;
}

double nan(_:)()
{
  uint64_t v0;
  double v1;

  v0 = sub_184E309BC();
  v1 = nan((const char *)(v0 + 32));
  swift_release();
  return v1;
}

uint64_t jn(_:_:)(uint64_t a1)
{
  return sub_184A9DA70(a1, MEMORY[0x1E0C839E0]);
}

uint64_t yn(_:_:)(uint64_t a1)
{
  return sub_184A9DA70(a1, MEMORY[0x1E0C86810]);
}

uint64_t sub_184A9DA70(uint64_t result, uint64_t (*a2)(void))
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    return a2();
  }
  __break(1u);
  return result;
}

uint64_t sub_184A9DA94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t i;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  int64x2_t v31;
  void (*v34)(__n128 *__return_ptr, __n128 *);
  uint64_t (*v35)(__n128 *);
  void (*v36)(__n128 *__return_ptr, _QWORD *);
  char v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  __n128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[4];
  __n128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 v52;
  int64x2_t v53;
  int64x2_t v54;
  __int128 v55;
  uint64_t v56;

  v53 = vdupq_n_s64(0x7FF8000000000000uLL);
  v54 = v53;
  *(_QWORD *)&v55 = MEMORY[0x1E0DEE9D8];
  *((_QWORD *)&v55 + 1) = MEMORY[0x1E0DEE9D8];
  v56 = MEMORY[0x1E0DEE9D8];
  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v35 = *(uint64_t (**)(__n128 *))(a1 + 56);
  v36 = *(void (**)(__n128 *__return_ptr, _QWORD *))(a1 + 40);
  v37 = *(_BYTE *)(a1 + 32);
  if ((v37 & 1) != 0)
    v5 = 0;
  else
    v5 = *(_QWORD *)(a1 + 24);
  v34 = *(void (**)(__n128 *__return_ptr, __n128 *))(a1 + 72);
  result = sub_184AA0DEC(a1);
  v7 = 0;
  for (i = 0; ; i = v40)
  {
    v9 = i << 8;
    if ((v37 & 1) != 0)
      break;
    v52 = 1;
    if ((v7 & 1) != 0)
    {
      sub_184AA0E84(a1);
      v5 = 0;
      v4 = 0;
      v2 = 0;
      v3 = 0;
      v10 = v9 | v52;
      goto LABEL_42;
    }
    v39 = 0;
    v40 = i;
    v15 = 0;
    v23 = 0;
    v38 = 0;
LABEL_28:
    v46[0] = v3;
    v46[1] = v2;
    v46[2] = v4;
    v46[3] = v5;
    v36(&v41, v46);
    v24 = v41;
    v25 = v42;
    v26 = v43;
    v27 = v44;
    v28 = v45;
    v47 = v41;
    v48 = v42;
    v49 = v43;
    v50 = v44;
    v51 = v45;
    if ((v35(&v47) & 1) != 0)
    {
      v47 = v24;
      v48 = v25;
      v49 = v26;
      v50 = v27;
      v51 = v28;
      v34(&v41, &v47);
      sub_184A8E8C4(v24.n128_i64[0], v24.n128_i64[1], v25, *((uint64_t *)&v25 + 1), v26);
      v47 = v41;
      v48 = v42;
      v49 = v43;
      v50 = v44;
      v51 = v45;
      Region.formUnion(_:)((uint64_t)&v47, v41);
      swift_release();
      swift_release();
      result = swift_release();
    }
    else
    {
      result = sub_184A8E8C4(v24.n128_i64[0], v24.n128_i64[1], v25, *((uint64_t *)&v25 + 1), v26);
    }
    v7 = v52;
    v5 = v15;
    v4 = v23;
    v2 = v38;
    v3 = v39;
  }
  v10 = v9 | v7;
  v11 = *(_QWORD *)(v2 + 16);
  v12 = *(_QWORD *)(v4 + 16);
  if (v5 == v11 && v10 == v12)
  {
    sub_184AA0E84(a1);
LABEL_42:
    sub_184AA08F4(v3, v2, v4, v5, v10, v37 & 1);
    swift_release();
    swift_release();
    result = swift_release();
    v30 = v56;
    v31 = v54;
    *(int64x2_t *)a2 = v53;
    *(int64x2_t *)(a2 + 16) = v31;
    *(_OWORD *)(a2 + 32) = v55;
    *(_QWORD *)(a2 + 48) = v30;
    return result;
  }
  if (v10 < v12)
  {
    if ((v5 & 0x8000000000000000) != 0)
      goto LABEL_44;
    v14 = *(_QWORD *)(v3 + 16);
    if (v5 >= v14)
      goto LABEL_45;
    if (v10 + 1 >= v12)
      goto LABEL_46;
    v15 = v5 + 1;
    if (v5 + 1 >= v14)
      goto LABEL_47;
    v16 = *(double *)(v4 + 32 + 8 * v10);
    v17 = *(double *)(v3 + 32 + 8 * v5);
    v18 = *(double *)(v4 + 32 + 8 * (v10 + 1));
    v19 = *(double *)(v3 + 32 + 8 * v15);
    if (v16 >= v18 || v17 >= v19)
      goto LABEL_48;
    v21 = v10 + 2;
    if (v5 < v11 && (v22 = v2 + 32, v21 >= *(unsigned int *)(v2 + 32 + 4 * v5)))
    {
      if (v15 < v11 && v21 >= *(unsigned int *)(v22 + 4 * v15))
      {
        v15 = v5 + 2;
        if (v5 + 2 < v11 && v21 >= *(unsigned int *)(v22 + 4 * v15))
        {
          v15 = v5 + 3;
          if (v5 + 3 < v11 && v21 >= *(unsigned int *)(v22 + 4 * v15))
          {
            while (v11 - 4 != v5)
            {
              v29 = *(unsigned int *)(v2 + 48 + 4 * v5++);
              if ((uint64_t)v21 < v29)
              {
                v15 = v5 + 3;
                goto LABEL_25;
              }
            }
            v15 = *(_QWORD *)(v2 + 16);
          }
        }
      }
    }
    else
    {
      v15 = v5;
    }
LABEL_25:
    v39 = v3;
    v40 = v21 >> 8;
    v52 = v10 + 2;
    v3 = *(_QWORD *)&v16;
    v38 = v2;
    v2 = *(_QWORD *)&v18;
    v23 = v4;
    v4 = *(_QWORD *)&v17;
    v5 = *(_QWORD *)&v19;
    goto LABEL_28;
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

void Region.init(rect:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v10;

  v5 = a2 + a4;
  if (v5 <= a2)
  {
    v6 = a2;
    if (v5 >= a2)
      goto LABEL_12;
  }
  else
  {
    v6 = v5;
    v5 = a2;
  }
  v7 = a3 + a5;
  if (a3 + a5 > a3)
  {
    v8 = a3 + a5;
    v7 = a3;
    goto LABEL_7;
  }
  v8 = a3;
  if (v7 >= a3)
  {
LABEL_12:
    v5 = NAN;
    v6 = NAN;
    v7 = NAN;
    v8 = NAN;
    goto LABEL_13;
  }
LABEL_7:
  if (v5 >= v6 || v7 >= v8)
  {
    __break(1u);
    goto LABEL_12;
  }
LABEL_13:
  *(double *)a1 = v5;
  *(double *)(a1 + 8) = v6;
  *(double *)(a1 + 16) = v7;
  *(double *)(a1 + 24) = v8;
  v10 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 32) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v10;
}

_QWORD *sub_184A9DEBC(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_184A9DED0(a1, a2, a3, a4);
}

_QWORD *sub_184A9DED0(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  if (a3)
  {
    result = a1(&v6, a3, a4);
    if (v4)
      return result;
    return (_QWORD *)v6;
  }
  result = a1(&v6, 0, 0);
  if (!v4)
    return (_QWORD *)v6;
  return result;
}

uint64_t sub_184A9DF24(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v4;
  unint64_t i;

  if (a3 > 0.0)
  {
    if (!a1)
      a2 = 0;
    return sub_184A9E004(a1, a2, *(uint64_t *)&a3);
  }
  if (a3 < 0.0)
  {
    if (!a1)
      a2 = 0;
    return sub_184A9E06C(a1, a2, *(unint64_t *)&a3);
  }
  if (a2 < 2)
  {
    if (a2 != 1)
      return 0;
    v4 = 0;
    goto LABEL_20;
  }
  v4 = 0;
  for (i = a2; (uint64_t)i > 1; i -= i >> 1)
  {
    if (*(double *)(a1 + 8 * (v4 + (i >> 1))) <= 0.0)
      v4 += i >> 1;
  }
  if (v4 < a2)
  {
LABEL_20:
    if (*(double *)(a1 + 8 * v4) <= 0.0)
      ++v4;
  }
  return v4;
}

uint64_t sub_184A9E004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t i;

  if (a2 < 2)
  {
    if (a2 != 1)
      return 0;
    v3 = 0;
  }
  else
  {
    v3 = 0;
    for (i = a2; (uint64_t)i > 1; i -= i >> 1)
    {
      if (*(_QWORD *)(a1 + 8 * (v3 + (i >> 1))) <= a3)
        v3 += i >> 1;
    }
    if (v3 >= a2)
      return v3;
  }
  if (*(_QWORD *)(a1 + 8 * v3) <= a3)
    ++v3;
  return v3;
}

uint64_t sub_184A9E06C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t i;

  if (a2 < 2)
  {
    if (a2 != 1)
      return 0;
    v3 = 0;
  }
  else
  {
    v3 = 0;
    for (i = a2; (uint64_t)i > 1; i -= i >> 1)
    {
      if (*(_QWORD *)(a1 + 8 * (v3 + (i >> 1))) >= a3)
        v3 += i >> 1;
    }
    if (v3 >= a2)
      return v3;
  }
  if (*(_QWORD *)(a1 + 8 * v3) >= a3)
    ++v3;
  return v3;
}

unint64_t sub_184A9E0D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  unint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  char v19;
  uint64_t v20;

  v3 = *(_QWORD *)v1;
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = *(_QWORD *)(v1 + 32);
  v8 = *(_BYTE *)(v1 + 40);
  if ((v8 & 1) == 0)
  {
    v19 = v7 & 1;
    *(_OWORD *)v1 = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
    *(_BYTE *)(v1 + 32) = 1;
    goto LABEL_14;
  }
  *(_QWORD *)v1 = v3;
  *(_QWORD *)(v1 + 8) = v4;
  *(_QWORD *)(v1 + 16) = v5;
  v9 = *(_QWORD *)(v4 + 16);
  if (v6 == v9 && v7 == *(_QWORD *)(v5 + 16))
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v19 = 1;
    goto LABEL_14;
  }
  result = sub_184A98B4C(v6, v7, v3, v5);
  v16 = v7 + 2;
  if (__OFADD__(v7, 2))
  {
    __break(1u);
  }
  else
  {
    if (v6 >= (uint64_t)v9)
      goto LABEL_10;
    if ((v6 & 0x8000000000000000) == 0)
    {
      v17 = v4 + 32;
      if (v16 >= *(unsigned int *)(v4 + 32 + 4 * v6))
      {
        v18 = v6 + 1;
        if (v6 + 1 < v9 && v16 >= *(unsigned int *)(v17 + 4 * v18))
        {
          v18 = v6 + 2;
          if (v6 + 2 < v9 && v16 >= *(unsigned int *)(v17 + 4 * v18))
          {
            while (v9 - 3 != v6)
            {
              v20 = *(unsigned int *)(v4 + 44 + 4 * v6++);
              if (v16 < v20)
              {
                v18 = v6 + 2;
                goto LABEL_11;
              }
            }
            v18 = v9;
          }
        }
        goto LABEL_11;
      }
LABEL_10:
      v18 = v6;
LABEL_11:
      v19 = 0;
      *(_QWORD *)(v1 + 24) = v18;
      *(_QWORD *)(v1 + 32) = v16;
      v3 = v12;
      v4 = v13;
      v5 = v14;
      v6 = v15;
LABEL_14:
      *(_BYTE *)(v1 + 40) = v8;
      *(_QWORD *)a1 = v3;
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = v5;
      *(_QWORD *)(a1 + 24) = v6;
      *(_BYTE *)(a1 + 32) = v19;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_184A9E22C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  void (*v7)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v8;
  int v9;
  uint64_t v10;

  v1 = v0[1];
  v2 = v0[2];
  v3 = v1 + v2;
  if (__OFADD__(v1, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v2 == v3)
  {
    result = 0;
LABEL_14:
    LOBYTE(v10) = v2 == v3;
    return result;
  }
  v5 = v3 - 1;
  if (__OFSUB__(v3, 1))
    goto LABEL_16;
  if ((uint64_t)v5 < v2 || v3 - 1 >= v3)
    goto LABEL_17;
  if (__OFSUB__(v5, v2))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if ((v5 & 0x8000000000000000) != 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!HIDWORD(v5))
  {
    v7 = (void (*)(uint64_t *__return_ptr, uint64_t *))v0[3];
    v8 = *(_QWORD *)(*v0 + 8 * (v5 - v2));
    v9 = v3 - 1;
    v7(&v10, &v8);
    result = v10;
    goto LABEL_14;
  }
LABEL_20:
  __break(1u);
  return result;
}

void Region.init(minX:minY:maxX:maxY:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  uint64_t v6;

  if (a2 < a4 && a3 < a5)
  {
    *(double *)a1 = a2;
    *(double *)(a1 + 8) = a4;
    *(double *)(a1 + 16) = a3;
    *(double *)(a1 + 24) = a5;
    v6 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(a1 + 32) = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(a1 + 40) = v6;
    *(_QWORD *)(a1 + 48) = v6;
  }
  else
  {
    __break(1u);
  }
}

uint64_t Region.init<A>(rects:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t result;
  __n128 v17;
  uint64_t v18;
  int64x2_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64x2_t v37;
  int64x2_t v38;
  __int128 v39;
  uint64_t v40;

  v7 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a4);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v28 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v11);
  v13 = (char *)&v27 - v12;
  v37 = vdupq_n_s64(0x7FF8000000000000uLL);
  v38 = v37;
  v14 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v39 = MEMORY[0x1E0DEE9D8];
  *((_QWORD *)&v39 + 1) = MEMORY[0x1E0DEE9D8];
  v40 = MEMORY[0x1E0DEE9D8];
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v29 = a1;
  v15(v9, a1, a2);
  sub_184E309D4();
  swift_getAssociatedConformanceWitness();
  result = sub_184E30B0C();
  if ((v34 & 1) != 0)
  {
LABEL_2:
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v29, a2);
    result = (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v13, AssociatedTypeWitness);
    v18 = v40;
    v19 = v38;
    *(int64x2_t *)a3 = v37;
    *(int64x2_t *)(a3 + 16) = v19;
    *(_OWORD *)(a3 + 32) = v39;
    *(_QWORD *)(a3 + 48) = v18;
    return result;
  }
  v21 = v30;
  v20 = v31;
  v17.n128_f64[0] = v32;
  v22 = v33;
  while (1)
  {
    v17.n128_f64[0] = v21 + v17.n128_f64[0];
    if (v21 >= v17.n128_f64[0])
    {
      v23 = v21;
      if (v17.n128_f64[0] >= v21)
        goto LABEL_4;
    }
    else
    {
      v23 = v17.n128_f64[0];
      v17.n128_f64[0] = v21;
    }
    v24 = v20 + v22;
    if (v20 < v24)
      break;
    v25 = v20;
    if (v24 < v20)
      goto LABEL_12;
LABEL_4:
    v17.n128_u64[0] = 0x7FF8000000000000;
    v23 = NAN;
    v24 = NAN;
    v25 = NAN;
LABEL_5:
    v30 = v17.n128_f64[0];
    v31 = v23;
    v32 = v24;
    v33 = v25;
    v34 = v14;
    v35 = v14;
    v36 = v14;
    Region.formUnion(_:)((uint64_t)&v30, v17);
    swift_release_n();
    result = sub_184E30B0C();
    v21 = v30;
    v20 = v31;
    v17.n128_f64[0] = v32;
    v22 = v33;
    if ((v34 & 1) != 0)
      goto LABEL_2;
  }
  v25 = v24;
  v24 = v20;
LABEL_12:
  if (v17.n128_f64[0] < v23 && v24 < v25)
    goto LABEL_5;
  __break(1u);
  return result;
}

double Region.init(path:using:)@<D0>(void *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  char v5;
  const CGPath *v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64x2_t v13;
  __int128 v14;
  uint64_t v15;

  v5 = *a2;
  v13 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_QWORD *)&v14 = MEMORY[0x1E0DEE9D8];
  *((_QWORD *)&v14 + 1) = MEMORY[0x1E0DEE9D8];
  v15 = MEMORY[0x1E0DEE9D8];
  v6 = a1;
  v7 = sub_184AA2604(v6);
  if (v3)
  {
    swift_release_n();

  }
  else
  {
    v10 = v7;
    v11 = v8;
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = v10;
    *(_QWORD *)(v12 + 24) = v11;
    *(_BYTE *)(v12 + 32) = v5;
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    swift_bridgeObjectRetain();
    sub_184A92D74(0, 0, 1, 0, 1, 0, 1, v10, (void (*)(_BYTE *__return_ptr, unsigned __int128 *))sub_184AA08E8);
    swift_bridgeObjectRelease();
    swift_release_n();

    swift_release();
    swift_bridgeObjectRelease_n();
    *(int64x2_t *)a3 = v13;
    *(int64x2_t *)(a3 + 16) = v13;
    result = *(double *)&v14;
    *(_OWORD *)(a3 + 32) = v14;
    *(_QWORD *)(a3 + 48) = v15;
  }
  return result;
}

uint64_t sub_184A9E6F4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, char a3@<W3>, uint64_t a4@<X8>)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = a3 & 1;
  v7 = *a1;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v7;
  v9 = swift_allocObject();
  *(_BYTE *)(v9 + 16) = v6;
  *(_QWORD *)(a4 + 8) = a2;
  *(_QWORD *)(a4 + 16) = sub_184AA10CC;
  *(_QWORD *)(a4 + 24) = v8;
  *(_QWORD *)(a4 + 32) = sub_184A9F730;
  *(_QWORD *)(a4 + 40) = 0;
  *(_QWORD *)(a4 + 48) = 0x7FF8000000000000;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_QWORD *)(a4 + 88) = sub_184AA07F0;
  *(_QWORD *)(a4 + 96) = 0;
  *(_QWORD *)(a4 + 104) = sub_184AA10E4;
  *(_QWORD *)(a4 + 112) = v9;
  *(_QWORD *)(a4 + 120) = sub_184A9F730;
  *(_QWORD *)(a4 + 128) = 0;
  *(_QWORD *)a4 = v7;
  return swift_bridgeObjectRetain();
}

uint64_t Region.area.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  unint64_t v30;
  uint64_t v31;
  int64_t v32;

  v2 = v0[4];
  v1 = v0[5];
  v3 = v0[6];
  v4 = (~*v0 & 0x7FF0000000000000) != 0 || (*v0 & 0xFFFFFFFFFFFFFLL) == 0;
  if (v4 && !*(_QWORD *)(v2 + 16))
  {
    v6 = 0;
    v1 = v0[1];
    v3 = v0[2];
    v2 = *v0;
    v5 = v0[3];
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    *(double *)&v5 = 0.0;
    v6 = 1;
  }
  v7 = 0;
  v8 = 0;
  v9 = 0.0;
  v10 = *(double *)&v5;
  v11 = *(double *)&v3;
  v12 = *(double *)&v1;
  for (result = v2; ; result = v16)
  {
    v19 = v8 << 8;
    if ((v6 & 1) == 0)
    {
      v15 = 1;
      if ((v7 & 1) != 0)
      {
        v10 = 0.0;
        v11 = 0.0;
        v12 = 0.0;
        *(double *)&result = 0.0;
        v20 = v19 | 1;
LABEL_42:
        sub_184AA08F4(result, *(uint64_t *)&v12, *(uint64_t *)&v11, *(uint64_t *)&v10, v20, v6);
        *(double *)&result = COERCE_DOUBLE(sub_184AA092C(v2, v1, v3, v5, v6));
        return result;
      }
      *(double *)&v14 = 0.0;
      v18 = 0.0;
      v17 = 0.0;
      *(double *)&v16 = 0.0;
      goto LABEL_11;
    }
    v20 = v19 | v7;
    v21 = *(_QWORD *)(*(_QWORD *)&v12 + 16);
    v22 = *(_QWORD *)(*(_QWORD *)&v11 + 16);
    if (*(_QWORD *)&v10 == v21 && v20 == v22)
      goto LABEL_42;
    if (v20 >= v22)
      break;
    if ((*(_QWORD *)&v10 & 0x8000000000000000) != 0)
      goto LABEL_45;
    v24 = *(_QWORD *)(result + 16);
    if (*(_QWORD *)&v10 >= v24)
      goto LABEL_46;
    if (v20 + 1 >= v22)
      goto LABEL_47;
    v14 = *(_QWORD *)&v10 + 1;
    if (*(_QWORD *)&v10 + 1 >= v24)
      goto LABEL_48;
    v25 = *(double *)(*(_QWORD *)&v11 + 32 + 8 * v20);
    v26 = *(double *)(result + 32 + 8 * *(_QWORD *)&v10);
    v27 = *(double *)(*(_QWORD *)&v11 + 32 + 8 * (v20 + 1));
    v28 = *(double *)(result + 32 + 8 * v14);
    if (v25 >= v27 || v26 >= v28)
      goto LABEL_49;
    v30 = v20 + 2;
    if (*(_QWORD *)&v10 >= v21
      || (v31 = *(_QWORD *)&v12 + 32, v30 < *(unsigned int *)(*(_QWORD *)&v12 + 32 + 4 * *(_QWORD *)&v10)))
    {
      *(double *)&v14 = v10;
    }
    else if (v14 < v21 && v30 >= *(unsigned int *)(v31 + 4 * v14))
    {
      v14 = *(_QWORD *)&v10 + 2;
      if (*(_QWORD *)&v10 + 2 < v21 && v30 >= *(unsigned int *)(v31 + 4 * v14))
      {
        v14 = *(_QWORD *)&v10 + 3;
        if (*(_QWORD *)&v10 + 3 < v21 && v30 >= *(unsigned int *)(v31 + 4 * v14))
        {
          while (v21 - 4 != *(_QWORD *)&v10)
          {
            v32 = *(unsigned int *)(*(_QWORD *)&v12 + 48 + 4 * (*(_QWORD *)&v10)++);
            if ((uint64_t)v30 < v32)
            {
              v14 = *(_QWORD *)&v10 + 3;
              goto LABEL_10;
            }
          }
          v14 = *(unint64_t *)(*(_QWORD *)&v12 + 16);
        }
      }
    }
LABEL_10:
    v15 = (v20 + 2);
    v8 = v30 >> 8;
    v16 = result;
    *(double *)&result = v25;
    v17 = v12;
    v12 = v27;
    v18 = v11;
    v11 = v26;
    v10 = v28;
LABEL_11:
    v7 = v15;
    v9 = v9 + (v12 - *(double *)&result) * (v10 - v11);
    v10 = *(double *)&v14;
    v11 = v18;
    v12 = v17;
  }
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
  return result;
}

uint64_t sub_184A9EA5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  __int128 v12;
  _QWORD v13[4];

  v13[3] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(v1 + 32);
  v3 = *(_QWORD *)(v1 + 40);
  v5 = *(_QWORD *)(v1 + 48);
  v6 = (*(_QWORD *)v1 & 0xFFFFFFFFFFFFFLL) != 0 && (~*(_QWORD *)v1 & 0x7FF0000000000000) == 0;
  v7 = *(_QWORD *)(v4 + 16);
  if (!v6 && v7 == 0)
  {
    v11 = *(_QWORD *)(v1 + 8);
    v13[0] = *(_QWORD *)v1;
    v13[1] = v11;
    v12 = *(_OWORD *)(v1 + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    sub_184A9ED88((uint64_t)&v12, 2, 0, (uint64_t)v13, 2, 0, 0, a1, (_QWORD *)v1);
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    v9 = *(_QWORD *)(v5 + 16);
    swift_retain();
    swift_retain_n();
    swift_retain();
    sub_184A9ED88(v4 + 32, v7, 0, v3, v5 + 32, v9, 1, a1, (_QWORD *)v1);
    swift_release();
    swift_release();
    return swift_release_n();
  }
}

uint64_t Region.apply<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v13;
  __n128 v14;
  uint64_t v16;
  __n128 v17;
  __int128 v19;
  _QWORD v20[4];

  v20[3] = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(v3 + 32);
  v7 = *(_QWORD *)(v3 + 40);
  v9 = *(_QWORD *)(v3 + 48);
  v10 = (*(_QWORD *)v3 & 0xFFFFFFFFFFFFFLL) != 0 && (~*(_QWORD *)v3 & 0x7FF0000000000000) == 0;
  v11 = *(_QWORD *)(v8 + 16);
  if (!v10 && v11 == 0)
  {
    v16 = *(_QWORD *)(v3 + 8);
    v20[0] = *(_QWORD *)v3;
    v20[1] = v16;
    v19 = *(_OWORD *)(v3 + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    sub_184A9EF74((uint64_t)&v19, 2, 0, (uint64_t)v20, 2, 0, 0, a1, v17, (_QWORD *)v3, a2, a3);
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    v13 = *(_QWORD *)(v9 + 16);
    swift_retain();
    swift_retain_n();
    swift_retain();
    sub_184A9EF74(v8 + 32, v11, 0, v7, v9 + 32, v13, 1, a1, v14, (_QWORD *)v3, a2, a3);
    swift_release();
    swift_release();
    return swift_release_n();
  }
}

uint64_t sub_184A9ED88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, _QWORD *a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t (*v34)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v35;
  double (*v36)@<D0>(double *@<X0>, _QWORD *@<X8>);
  uint64_t v37;
  uint64_t (*v38)@<X0>(uint64_t@<X0>, _QWORD *@<X8>);
  uint64_t v39;

  v29 = a7;
  v27 = a5;
  v28 = a6;
  *((_QWORD *)&v30 + 1) = a2;
  v31 = a3;
  *(_QWORD *)&v30 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD1A380);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v11, v14);
  v15 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_184AA0A9C(a8, (uint64_t)v15);
  v16 = *(unsigned __int8 *)(v12 + 80);
  v17 = swift_allocObject();
  sub_184AA0EE4((uint64_t)v15, v17 + ((v16 + 16) & ~v16), &qword_1EDD1A380);
  sub_184AA0A9C(a8, (uint64_t)v15);
  v18 = swift_allocObject();
  v20 = v27;
  v19 = v28;
  *(_QWORD *)(v18 + 16) = a4;
  *(_QWORD *)(v18 + 24) = v20;
  *(_QWORD *)(v18 + 32) = v19;
  v21 = v29 & 1;
  *(_BYTE *)(v18 + 40) = v29 & 1;
  sub_184AA0EE4((uint64_t)v15, v18 + ((v16 + 41) & ~v16), &qword_1EDD1A380);
  v32 = v30;
  v33 = v31;
  v34 = sub_184AA0AE8;
  v35 = v17;
  v36 = sub_184A9F730;
  v37 = 0;
  v38 = sub_184AA0BE4;
  v39 = v18;
  if (((*a9 & 0xFFFFFFFFFFFFFLL) == 0 || (~*a9 & 0x7FF0000000000000) != 0) && *(_QWORD *)(a9[4] + 16) == 0)
    v24 = 2;
  else
    v24 = *(_QWORD *)(a9[4] + 16);
  swift_retain();
  sub_184AA0C6C(a4, v20, v19, v21);
  sub_184A937D4(0, v24, 1, 0, 1, 0, 1, &v32);
  swift_release();
  return swift_release_n();
}

uint64_t sub_184A9EF74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, __n128 a9, _QWORD *a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  int64_t v25;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  __int128 v32;
  uint64_t v33;
  _QWORD *v34;
  __int128 v35;
  uint64_t v36;
  double (*v37)@<D0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v38;
  double (*v39)@<D0>(double *@<X0>, _QWORD *@<X8>);
  uint64_t v40;
  uint64_t (*v41)@<X0>(uint64_t@<X0>, _QWORD *@<X8>, __n128@<Q0>);
  uint64_t v42;
  uint64_t v43;

  v28 = a8;
  v29 = a5;
  v31 = a7;
  v30 = a6;
  v43 = a4;
  *((_QWORD *)&v32 + 1) = a2;
  v33 = a3;
  *(_QWORD *)&v32 = a1;
  v34 = a10;
  v12 = *(_QWORD *)(a11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](a1, a9);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v27(v14, v15, a11);
  v16 = *(unsigned __int8 *)(v12 + 80);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = a11;
  *(_QWORD *)(v17 + 24) = a12;
  v18 = *(void (**)(uint64_t, char *, uint64_t))(v12 + 32);
  v18(v17 + ((v16 + 32) & ~v16), v14, a11);
  v27(v14, v28, a11);
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = a11;
  *(_QWORD *)(v19 + 24) = a12;
  v20 = v29;
  v21 = v30;
  *(_QWORD *)(v19 + 32) = v43;
  *(_QWORD *)(v19 + 40) = v20;
  *(_QWORD *)(v19 + 48) = v21;
  v22 = v31 & 1;
  *(_BYTE *)(v19 + 56) = v31 & 1;
  v18(v19 + ((v16 + 57) & ~v16), v14, a11);
  v35 = v32;
  v36 = v33;
  v37 = sub_184AA0F2C;
  v38 = v17;
  v39 = sub_184A9F730;
  v40 = 0;
  v41 = sub_184AA0FBC;
  v42 = v19;
  if (((*v34 & 0xFFFFFFFFFFFFFLL) == 0 || (~*v34 & 0x7FF0000000000000) != 0) && *(_QWORD *)(v34[4] + 16) == 0)
    v25 = 2;
  else
    v25 = *(_QWORD *)(v34[4] + 16);
  swift_retain();
  sub_184AA0C6C(v43, v20, v21, v22);
  sub_184A937D4(0, v25, 1, 0, 1, 0, 1, &v35);
  swift_release();
  return swift_release_n();
}

uint64_t sub_184A9F174(unsigned int a1, uint64_t a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  __n128 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  __n128 v38;
  uint64_t v39;
  char *v40;
  void (*v41)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v42)(char *, uint64_t, uint64_t);
  uint64_t result;
  int v44;
  uint64_t *v45;
  double v46;
  char *v47;
  char *v48;
  uint64_t *v49;
  void (*v50)(char *, uint64_t, uint64_t, uint64_t);
  double v51;
  char *v52;
  uint64_t v53;
  double *v54;
  uint64_t v55;
  double v56;
  char *v57;
  int v58;
  double v59;
  double v60;
  double v61;
  char *v62;
  void (*v63)(char *, uint64_t);
  char *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  unsigned int v70;
  int v71;
  int v72;
  uint64_t v73;
  char *v74;
  int v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  double v80;

  v70 = a1;
  v5 = sub_184E30BC0();
  v6 = *(_QWORD *)(v5 - 8);
  v77 = v5;
  v78 = v6;
  v8 = MEMORY[0x1E0C80A78](v5, v7);
  v76 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v10);
  v79 = (char *)&v66 - v11;
  v12 = type metadata accessor for Region.Operation();
  v13 = *(_QWORD *)(v12 - 8);
  v15 = MEMORY[0x1E0C80A78](v12, v14);
  v17 = (double *)((char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v15, v18);
  v20 = (char *)&v66 - v19;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD1A3B8);
  v23 = MEMORY[0x1E0C80A78](v21, v22);
  v25 = (char *)&v66 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v26);
  v28 = (char *)&v66 - v27;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD1A380);
  MEMORY[0x1E0C80A78](v29, v30);
  v32 = (char *)&v66 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD1A3C0);
  v35 = MEMORY[0x1E0C80A78](v33, v34);
  v37 = (char *)&v66 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v35, v38);
  v40 = (char *)&v66 - v39;
  sub_184AA0A9C(a2, (uint64_t)v32);
  sub_184AA0D60((uint64_t)v32, (uint64_t)v28);
  v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  v41(v28, 0, 1, v12);
  v41(v37, 1, 1, v12);
  sub_184AA0DA4((uint64_t)v28, (uint64_t)v37);
  sub_184AA0EE4((uint64_t)v37, (uint64_t)v40, &qword_1EDD1A3C0);
  sub_184AA0EE4((uint64_t)v40, (uint64_t)v25, &qword_1EDD1A3B8);
  v41(v40, 1, 1, v12);
  v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v42(v25, 1, v12) == 1)
  {
LABEL_2:
    sub_184A9CF0C((uint64_t)v40, &qword_1EDD1A3C0);
    return v70;
  }
  v75 = *MEMORY[0x1E0DED4F0];
  v72 = *MEMORY[0x1E0DED4E8];
  v71 = *MEMORY[0x1E0DED500];
  v69 = *MEMORY[0x1E0DED508];
  v44 = *MEMORY[0x1E0DED4D8];
  v67 = *MEMORY[0x1E0DED4E0];
  v68 = v44;
  v45 = &qword_1EDD1A3B8;
  v73 = v12;
  v74 = v25;
  while (1)
  {
    sub_184AA0D60((uint64_t)v25, (uint64_t)v20);
    sub_184A9AD08((uint64_t)v20, (uint64_t)v17);
    result = swift_getEnumCaseMultiPayload();
    if ((_DWORD)result == 1)
      break;
    v60 = v17[1];
    if (v60 < 0.0)
      goto LABEL_30;
    a3 = v17[3] + a3 * v60;
LABEL_7:
    sub_184A9A7EC((uint64_t)v20);
    sub_184AA0EE4((uint64_t)v40, (uint64_t)v25, v45);
    v41(v40, 1, 1, v12);
    if (v42(v25, 1, v12) == 1)
      goto LABEL_2;
  }
  v47 = v20;
  v48 = v40;
  v49 = v45;
  v50 = v41;
  v51 = *(double *)((char *)v17 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EDD1A048) + 48));
  v53 = v78;
  v52 = v79;
  v54 = v17;
  v55 = v77;
  result = (*(uint64_t (**)(char *, double *, uint64_t))(v78 + 32))(v79, v17, v77);
  if (v51 > 0.0)
  {
    v56 = a3 * v51;
    v80 = v56;
    v57 = v76;
    (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v76, v52, v55);
    v58 = (*(uint64_t (**)(char *, uint64_t))(v53 + 88))(v57, v55);
    if (v58 == v75)
    {
      v59 = round(v56);
      (*(void (**)(char *, uint64_t))(v53 + 8))(v52, v55);
    }
    else
    {
      if (v58 != v72)
      {
        v41 = v50;
        if (v58 == v71)
        {
          v46 = ceil(v56);
        }
        else if (v58 == v69)
        {
          v46 = floor(v56);
        }
        else
        {
          if (v58 != v68)
          {
            if (v58 == v67)
            {
              (*(void (**)(char *, uint64_t))(v78 + 8))(v79, v77);
              if ((*(_QWORD *)&v56 & 0x8000000000000000) != 0)
                v61 = floor(v56);
              else
                v61 = ceil(v56);
            }
            else
            {
              v62 = v79;
              sub_184E30A28();
              v63 = *(void (**)(char *, uint64_t))(v78 + 8);
              v64 = v62;
              v65 = v77;
              v63(v64, v77);
              v63(v76, v65);
              v61 = v80;
            }
            a3 = v61 / v51;
            goto LABEL_17;
          }
          v46 = trunc(v56);
        }
        (*(void (**)(char *, uint64_t))(v78 + 8))(v79, v77);
        a3 = v46 / v51;
LABEL_6:
        v45 = v49;
        v40 = v48;
        v20 = v47;
        v12 = v73;
        v25 = v74;
        v17 = v54;
        goto LABEL_7;
      }
      v59 = rint(v56);
      (*(void (**)(char *, uint64_t))(v78 + 8))(v79, v77);
    }
    a3 = v59 / v51;
LABEL_17:
    v41 = v50;
    goto LABEL_6;
  }
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

double sub_184A9F6B8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  double result;
  double v5;

  v3 = *(_DWORD *)(a1 + 8);
  sub_184E309F8();
  result = v5;
  *(double *)a2 = v5;
  *(_DWORD *)(a2 + 8) = v3;
  return result;
}

double sub_184A9F730@<D0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

uint64_t sub_184A9F73C@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned int v32;

  v28 = a6;
  v27 = a5;
  v25 = a4;
  v26 = a3;
  v9 = *a1;
  v11 = a1[1];
  v10 = a1[2];
  v13 = a1[3];
  v12 = (void (*)(uint64_t *__return_ptr, uint64_t *))a1[4];
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD1A380);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  MEMORY[0x1E0C80A78](v14, v17);
  v18 = v10 + v13;
  if (__OFADD__(v10, v13))
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v13 == v18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v19 = v18 - 1;
  if (__OFSUB__(v18, 1))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v19 < v13)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v19 >= v18)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (__OFSUB__(v19, v13))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v19 < 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (HIDWORD(v19))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v29 = *(_QWORD *)(v11 + 8 * (v19 - v13));
  v30 = v18 - 1;
  swift_retain();
  v12(&v31, &v29);
  swift_release();
  if ((v27 & 1) != 0)
  {
    a2 = sub_184A9764C(v32, a2, v26);
    v20 = v21;
    goto LABEL_14;
  }
  v20 = v26;
  if (v32 == 1)
  {
    a2 = 0;
    v20 = 0;
LABEL_14:
    sub_184AA0A9C(v28, (uint64_t)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
    v22 = (*(unsigned __int8 *)(v15 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
    v23 = swift_allocObject();
    result = sub_184AA0EE4((uint64_t)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v23 + v22, &qword_1EDD1A380);
    a7[1] = a2;
    a7[2] = v20;
    a7[3] = sub_184AA0D0C;
    a7[4] = v23;
    a7[5] = sub_184A9F730;
    a7[6] = 0;
    a7[7] = sub_184AA008C;
    a7[8] = 0;
    a7[9] = sub_184AA00B4;
    a7[10] = 0;
    *a7 = v9;
    return result;
  }
  if (!v32)
    goto LABEL_14;
LABEL_23:
  result = sub_184E30B30();
  __break(1u);
  return result;
}

uint64_t sub_184A9F964@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _QWORD *a8@<X8>, __n128 a9@<Q0>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  _OWORD v28[2];
  uint64_t v29;

  v26 = a5;
  v27 = a7;
  v14 = *(_QWORD *)(a6 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  v16 = MEMORY[0x1E0C80A78](a1, a9);
  v17 = *(_QWORD *)v16;
  v18 = *(_OWORD *)(v16 + 24);
  v28[0] = *(_OWORD *)(v16 + 8);
  v28[1] = v18;
  v29 = *(_QWORD *)(v16 + 40);
  swift_retain();
  sub_184A9E22C();
  v20 = v19;
  sub_184A96668((uint64_t)v28);
  if ((v20 & 0x100000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a4 & 1) != 0)
    {
      a2 = sub_184A9764C(v20, a2, a3);
      a3 = v21;
      goto LABEL_7;
    }
    if ((_DWORD)v20 == 1)
    {
      a2 = 0;
      a3 = 0;
LABEL_7:
      (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v26, a6);
      v22 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
      v23 = swift_allocObject();
      v24 = v27;
      *(_QWORD *)(v23 + 16) = a6;
      *(_QWORD *)(v23 + 24) = v24;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v14 + 32))(v23 + v22, (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), a6);
      a8[1] = a2;
      a8[2] = a3;
      a8[3] = sub_184AA1040;
      a8[4] = v23;
      a8[5] = sub_184A9F730;
      a8[6] = 0;
      a8[7] = sub_184AA008C;
      a8[8] = 0;
      a8[9] = sub_184AA00B4;
      a8[10] = 0;
      *a8 = v17;
      return result;
    }
    if (!(_DWORD)v20)
      goto LABEL_7;
  }
  result = sub_184E30B30();
  __break(1u);
  return result;
}

uint64_t sub_184A9FB38(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  __n128 v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  __n128 v36;
  uint64_t v37;
  _BYTE *v38;
  void (*v39)(_BYTE *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v40)(_BYTE *, uint64_t, uint64_t);
  uint64_t result;
  int v42;
  int v43;
  uint64_t *v44;
  double *v45;
  _BYTE *v46;
  double v47;
  uint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  uint64_t *v51;
  void (*v52)(_BYTE *, uint64_t, uint64_t, uint64_t);
  double v53;
  uint64_t v54;
  _BYTE *v55;
  double *v56;
  uint64_t v57;
  double v58;
  int v59;
  double v60;
  double v61;
  _BYTE *v62;
  uint64_t v63;
  void (*v64)(_BYTE *, uint64_t);
  _BYTE v65[12];
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  _BYTE *v71;
  int v72;
  _BYTE *v73;
  double *v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  double v78;

  v4 = sub_184E30BC0();
  v5 = *(_QWORD *)(v4 - 8);
  v75 = v4;
  v76 = v5;
  v7 = MEMORY[0x1E0C80A78](v4, v6);
  v73 = &v65[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7, v9);
  v77 = &v65[-v10];
  v11 = type metadata accessor for Region.Operation();
  v12 = *(_QWORD *)(v11 - 8);
  v14 = MEMORY[0x1E0C80A78](v11, v13);
  v74 = (double *)&v65[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = &v65[-v17];
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD1A3B8);
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  v23 = &v65[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v21, v24);
  v26 = &v65[-v25];
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD1A380);
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = &v65[-((v29 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD1A3C0);
  v33 = MEMORY[0x1E0C80A78](v31, v32);
  v35 = &v65[-((v34 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v33, v36);
  v38 = &v65[-v37];
  sub_184AA0A9C(a1, (uint64_t)v30);
  sub_184AA0D60((uint64_t)v30, (uint64_t)v26);
  v39 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  v39(v26, 0, 1, v11);
  v39(v35, 1, 1, v11);
  sub_184AA0DA4((uint64_t)v26, (uint64_t)v35);
  sub_184AA0EE4((uint64_t)v35, (uint64_t)v38, &qword_1EDD1A3C0);
  sub_184AA0EE4((uint64_t)v38, (uint64_t)v23, &qword_1EDD1A3B8);
  v39(v38, 1, 1, v11);
  v40 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48);
  if (v40(v23, 1, v11) == 1)
    return sub_184A9CF0C((uint64_t)v38, &qword_1EDD1A3C0);
  v72 = *MEMORY[0x1E0DED4F0];
  v70 = *MEMORY[0x1E0DED4E8];
  v42 = *MEMORY[0x1E0DED500];
  v68 = *MEMORY[0x1E0DED508];
  v69 = v42;
  v43 = *MEMORY[0x1E0DED4D8];
  v66 = *MEMORY[0x1E0DED4E0];
  v67 = v43;
  v44 = &qword_1EDD1A3B8;
  v46 = v73;
  v45 = v74;
  v71 = v23;
  while (1)
  {
    sub_184AA0D60((uint64_t)v23, (uint64_t)v18);
    sub_184A9AD08((uint64_t)v18, (uint64_t)v45);
    result = swift_getEnumCaseMultiPayload();
    if ((_DWORD)result != 1)
    {
      if (*v45 < 0.0)
        goto LABEL_29;
      a2 = v45[2] + a2 * *v45;
      goto LABEL_6;
    }
    v48 = v11;
    v49 = v18;
    v50 = v38;
    v51 = v44;
    v52 = v39;
    v53 = *(double *)((char *)v45 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EDD1A048) + 48));
    v54 = v76;
    v55 = v77;
    v56 = v45;
    v57 = v75;
    result = (*(uint64_t (**)(_BYTE *, double *, uint64_t))(v76 + 32))(v77, v56, v75);
    if (v53 <= 0.0)
      break;
    v58 = a2 * v53;
    v78 = v58;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v54 + 16))(v46, v55, v57);
    v59 = (*(uint64_t (**)(_BYTE *, uint64_t))(v54 + 88))(v46, v57);
    if (v59 == v72)
    {
      v60 = round(v58);
      (*(void (**)(_BYTE *, uint64_t))(v54 + 8))(v55, v57);
LABEL_15:
      a2 = v60 / v53;
LABEL_16:
      v39 = v52;
      v44 = v51;
      v38 = v50;
      v18 = v49;
      v11 = v48;
      v23 = v71;
      v45 = v74;
      goto LABEL_6;
    }
    if (v59 == v70)
    {
      v60 = rint(v58);
      (*(void (**)(_BYTE *, uint64_t))(v76 + 8))(v77, v75);
      goto LABEL_15;
    }
    v39 = v52;
    v45 = v74;
    if (v59 == v69)
    {
      v47 = ceil(v58);
    }
    else if (v59 == v68)
    {
      v47 = floor(v58);
    }
    else
    {
      if (v59 != v67)
      {
        if (v59 == v66)
        {
          (*(void (**)(_BYTE *, uint64_t))(v76 + 8))(v77, v75);
          if ((*(_QWORD *)&v58 & 0x8000000000000000) != 0)
            v61 = floor(v58);
          else
            v61 = ceil(v58);
        }
        else
        {
          v62 = v77;
          sub_184E30A28();
          v63 = v75;
          v64 = *(void (**)(_BYTE *, uint64_t))(v76 + 8);
          v64(v62, v75);
          v64(v73, v63);
          v61 = v78;
        }
        a2 = v61 / v53;
        goto LABEL_16;
      }
      v47 = trunc(v58);
    }
    (*(void (**)(_BYTE *, uint64_t))(v76 + 8))(v77, v75);
    a2 = v47 / v53;
    v44 = v51;
    v38 = v50;
    v18 = v49;
    v11 = v48;
    v23 = v71;
LABEL_6:
    sub_184A9A7EC((uint64_t)v18);
    sub_184AA0EE4((uint64_t)v38, (uint64_t)v23, v44);
    v39(v38, 1, 1, v11);
    if (v40(v23, 1, v11) == 1)
      return sub_184A9CF0C((uint64_t)v38, &qword_1EDD1A3C0);
  }
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_184AA008C@<X0>(uint64_t result@<X0>, double *a2@<X8>)
{
  double v2;

  v2 = *(double *)result;
  if (((*(_DWORD *)(result + 16) - *(_DWORD *)(result + 8)) & 1) == 0)
    v2 = NAN;
  *a2 = v2;
  return result;
}

BOOL sub_184AA00B4(_QWORD *a1)
{
  return (*a1 & 0xFFFFFFFFFFFFFLL) == 0 || (~*a1 & 0x7FF0000000000000) != 0;
}

Swift::Void __swiftcall Region.apply(_:)(CGAffineTransform *a1)
{
  _QWORD *v1;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  double *v6;
  double d;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  _OWORD *v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD v21[3];
  uint64_t v22;
  _QWORD v23[4];
  char v24;
  uint64_t (*v25)@<X0>(double *@<X0>, _QWORD *@<X8>);
  _OWORD *v26;
  BOOL (*v27)(uint64_t);
  uint64_t v28;
  uint64_t (*v29)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v30;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD1A380);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (double *)((char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1->a >= 0.0 && a1->b == 0.0 && a1->c == 0.0 && (d = a1->d, d >= 0.0))
  {
    *v6 = a1->a;
    v6[1] = d;
    *((_OWORD *)v6 + 1) = *(_OWORD *)&a1->tx;
    type metadata accessor for Region.Operation();
    swift_storeEnumTagMultiPayload();
    sub_184A9EA5C((uint64_t)v6);
    sub_184A9CF0C((uint64_t)v6, &qword_1EDD1A380);
  }
  else
  {
    v8 = *v1;
    v9 = v1[4];
    v10 = v1[5];
    v11 = v1[6];
    v12 = (~*v1 & 0x7FF0000000000000) != 0 || (*v1 & 0xFFFFFFFFFFFFFLL) == 0;
    if (v12 && !*(_QWORD *)(v9 + 16))
    {
      v19 = v1[1];
      v20 = v1[2];
      v13 = v1[3];
      swift_release();
      swift_release();
      swift_release();
      v14 = 0;
      v9 = v8;
      v10 = v19;
      v11 = v20;
    }
    else
    {
      v13 = 0;
      v14 = 1;
    }
    v15 = (_OWORD *)swift_allocObject();
    v16 = *(_OWORD *)&a1->c;
    v15[1] = *(_OWORD *)&a1->a;
    v15[2] = v16;
    v15[3] = *(_OWORD *)&a1->tx;
    v23[0] = v9;
    v23[1] = v10;
    v23[2] = v11;
    v23[3] = v13;
    v24 = v14;
    v25 = sub_184AA0974;
    v26 = v15;
    v27 = sub_184AA0860;
    v28 = 0;
    v29 = sub_184AA0870;
    v30 = 0;
    sub_184A9DA94((uint64_t)v23, (uint64_t)v21);
    v17 = v22;
    v18 = v21[1];
    *(_OWORD *)v1 = v21[0];
    *((_OWORD *)v1 + 1) = v18;
    *((_OWORD *)v1 + 2) = v21[2];
    v1[6] = v17;
  }
}

uint64_t sub_184AA029C@<X0>(double *a1@<X0>, double *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _QWORD v10[5];
  _BYTE v11[40];

  sub_184A7FE84(a2, (uint64_t)v10, *a1, a1[1], a1[2], a1[3]);
  v4 = v10[0];
  v5 = v10[1];
  v6 = v10[2];
  v7 = v10[3];
  result = sub_184AA0EE4((uint64_t)v10, (uint64_t)v11, &qword_1EDD1A3C8);
  if (v11[32] == 1)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v9 = 0;
  }
  else
  {
    v9 = MEMORY[0x1E0DEE9D8];
  }
  *a3 = v4;
  a3[1] = v5;
  a3[2] = v6;
  a3[3] = v7;
  a3[4] = v9;
  a3[5] = v9;
  a3[6] = v9;
  return result;
}

uint64_t Region.applying<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v5 = *(_QWORD *)(v4 + 48);
  v6 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)a4 = *(_OWORD *)v4;
  *(_OWORD *)(a4 + 16) = v6;
  *(_OWORD *)(a4 + 32) = *(_OWORD *)(v4 + 32);
  *(_QWORD *)(a4 + 48) = v5;
  return Region.apply<A>(_:)(a1, a2, a3);
}

void Region.applying(_:)(CGAffineTransform *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v2 + 32);
  *(_QWORD *)(a2 + 48) = v3;
  Region.apply(_:)(a1);
}

double Region.boundingBox.getter()
{
  double *v0;
  double result;

  result = *v0;
  if ((~*(_QWORD *)v0 & 0x7FF0000000000000) == 0 && (*(_QWORD *)v0 & 0xFFFFFFFFFFFFFLL) != 0)
    return INFINITY;
  return result;
}

double Region.minX.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

double Region.minY.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

double Region.maxX.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

double Region.maxY.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

Swift::Bool __swiftcall Region.contains(_:)(CGPoint a1)
{
  uint64_t v1;
  double x;
  double v3;
  double v4;
  Swift::Bool result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  _QWORD v19[3];

  x = a1.x;
  v19[2] = *MEMORY[0x1E0C80C00];
  v3 = *(double *)v1;
  v4 = *(double *)(v1 + 8);
  if (*(double *)v1 > a1.x || v4 <= a1.x || *(double *)(v1 + 16) > a1.y || *(double *)(v1 + 24) <= a1.y)
    return 0;
  v10 = *(_QWORD *)(v1 + 32);
  v9 = *(_QWORD *)(v1 + 40);
  v11 = *(_QWORD *)(v1 + 48);
  if ((~*(_QWORD *)&v3 & 0x7FF0000000000000) == 0 && (*(_QWORD *)&v3 & 0xFFFFFFFFFFFFFLL) != 0)
  {
    v16 = sub_184A9DF24(v10 + 32, *(_QWORD *)(v10 + 16), a1.y);
LABEL_23:
    v17 = __OFSUB__(v16, 1);
    v18 = v16 - 1;
    if (!v17)
    {
      v14 = (_QWORD *)sub_184A9764C(v18, v9, v11 + 32);
      return (sub_184A9DF24((uint64_t)v14, v15, x) & 0x8000000000000001) == 1;
    }
    __break(1u);
LABEL_30:
    __break(1u);
  }
  v13 = *(_QWORD *)(v10 + 16);
  if (!v13)
    return 1;
  v16 = sub_184A9DF24(v10 + 32, v13, a1.y);
  if (*(_QWORD *)(v10 + 16))
    goto LABEL_23;
  *(double *)v19 = v3;
  *(double *)&v19[1] = v4;
  if (__OFSUB__(v16, 1))
    goto LABEL_30;
  if (v16 == 2)
  {
    v14 = 0;
    v15 = 0;
    return (sub_184A9DF24((uint64_t)v14, v15, x) & 0x8000000000000001) == 1;
  }
  if (v16 == 1)
  {
    v14 = v19;
    v15 = 2;
    return (sub_184A9DF24((uint64_t)v14, v15, x) & 0x8000000000000001) == 1;
  }
  result = sub_184E30B30();
  __break(1u);
  return result;
}

double sub_184AA0598()
{
  double result;

  result = -8.98846567e307;
  xmmword_1EDD1A348 = xmmword_184E397F0;
  unk_1EDD1A358 = xmmword_184E397F0;
  *(_QWORD *)&xmmword_1EDD1A368 = MEMORY[0x1E0DEE9D8];
  *((_QWORD *)&xmmword_1EDD1A368 + 1) = MEMORY[0x1E0DEE9D8];
  qword_1EDD1A378 = MEMORY[0x1E0DEE9D8];
  return result;
}

uint64_t static Region.infinite.getter@<X0>(uint64_t a1@<X8>)
{
  __int128 v2;
  uint64_t v3;
  __int128 v4;

  if (qword_1EDD19778 != -1)
    swift_once();
  v2 = xmmword_1EDD1A368;
  v3 = qword_1EDD1A378;
  v4 = unk_1EDD1A358;
  *(_OWORD *)a1 = xmmword_1EDD1A348;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v2;
  *(_QWORD *)(a1 + 48) = v3;
  swift_retain();
  swift_retain();
  return swift_retain();
}

uint64_t Region.isInfinite.getter()
{
  uint64_t v0;
  uint64_t v1;
  float64x2_t v2;
  _OWORD v4[3];
  uint64_t v5;
  float64x2_t v6[3];
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(float64x2_t *)(v0 + 16);
  v6[0] = *(float64x2_t *)v0;
  v6[1] = v2;
  v6[2] = *(float64x2_t *)(v0 + 32);
  v7 = v1;
  if (qword_1EDD19778 != -1)
    swift_once();
  v4[0] = xmmword_1EDD1A348;
  v4[1] = unk_1EDD1A358;
  v4[2] = xmmword_1EDD1A368;
  v5 = qword_1EDD1A378;
  return _s12CoreGraphics6RegionV2eeoiySbAC_ACtFZ_0(v6, (uint64_t)v4) & 1;
}

BOOL Region.isRect.getter()
{
  _QWORD *v0;

  return ((~*v0 & 0x7FF0000000000000) != 0 || (*v0 & 0xFFFFFFFFFFFFFLL) == 0) && *(_QWORD *)(v0[4] + 16) == 0;
}

uint64_t Region.rects.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t result;
  __int128 v9;

  v3 = v1[4];
  v4 = v1[5];
  v5 = v1[6];
  v6 = (~*v1 & 0x7FF0000000000000) != 0 || (*v1 & 0xFFFFFFFFFFFFFLL) == 0;
  if (v6 && (v7 = *(_QWORD *)(v3 + 16)) == 0)
  {
    v9 = *((_OWORD *)v1 + 1);
    v4 = v1[1];
    v3 = *v1;
  }
  else
  {
    swift_retain();
    swift_retain();
    result = swift_retain();
    v9 = v5;
    LOBYTE(v7) = 1;
  }
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = v9;
  *(_BYTE *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = sub_184AA07A0;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

double *sub_184AA07A0@<X0>(double *result@<X0>, double *a2@<X8>)
{
  double v2;
  double v4;
  double v5;
  double v6;

  v2 = *result;
  if ((~*(_QWORD *)result & 0x7FF0000000000000) != 0 || (*(_QWORD *)result & 0xFFFFFFFFFFFFFLL) == 0)
  {
    v4 = result[2];
    v5 = result[1] - v2;
    v6 = result[3] - v4;
  }
  else
  {
    v2 = INFINITY;
    v4 = INFINITY;
    v5 = 0.0;
    v6 = 0.0;
  }
  *a2 = v2;
  a2[1] = v4;
  a2[2] = v5;
  a2[3] = v6;
  return result;
}

double sub_184AA07F0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[2];
  uint64_t v13;

  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)a2;
  v9 = *(_OWORD *)(a2 + 8);
  v10 = *(_OWORD *)(a2 + 24);
  v11 = *(_OWORD *)(a2 + 40);
  sub_184AA10EC(v4, v5, &v8, v12);
  result = *(double *)v12;
  v7 = v12[1];
  *(_OWORD *)a3 = v12[0];
  *(_OWORD *)(a3 + 16) = v7;
  *(_QWORD *)(a3 + 32) = v13;
  return result;
}

BOOL sub_184AA0860(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32) != 0;
}

uint64_t sub_184AA0870@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    v5 = *(_QWORD *)(a1 + 40);
    v4 = *(_QWORD *)(a1 + 48);
    v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_OWORD *)(a2 + 16) = v6;
    *(_QWORD *)(a2 + 32) = result;
    *(_QWORD *)(a2 + 40) = v5;
    *(_QWORD *)(a2 + 48) = v4;
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_184AA08BC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_184AA08E8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_184A9E6F4(a1, *(_QWORD *)(v2 + 24), *(_BYTE *)(v2 + 32), a2);
}

uint64_t sub_184AA08F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t result;

  if ((a6 & 1) != 0)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_184AA092C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if ((a5 & 1) != 0)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_184AA0964()
{
  return swift_deallocObject();
}

uint64_t sub_184AA0974@<X0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_184AA029C(a1, (double *)(v2 + 16), a2);
}

unint64_t sub_184AA0980()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_1EDD1A388;
  if (!qword_1EDD1A388)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EDD1A390);
    v2 = sub_184AA09E4();
    result = MEMORY[0x186DC3348](MEMORY[0x1E0DEC850], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EDD1A388);
  }
  return result;
}

unint64_t sub_184AA09E4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EDD1A398;
  if (!qword_1EDD1A398)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EDD1A3A0);
    v2[0] = sub_184AA0A50();
    v2[1] = sub_184A97FE0();
    result = MEMORY[0x186DC3348](&unk_184E37EF4, v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EDD1A398);
  }
  return result;
}

unint64_t sub_184AA0A50()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EDD1A3A8;
  if (!qword_1EDD1A3A8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EDD1A3B0);
    result = MEMORY[0x186DC3348](MEMORY[0x1E0DEC640], v1);
    atomic_store(result, (unint64_t *)&qword_1EDD1A3A8);
  }
  return result;
}

uint64_t sub_184AA0A9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD1A380);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_184AA0AE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EDD1A380) - 8) + 80);
  result = sub_184A9F174(*(_DWORD *)(a1 + 8), v2 + ((v5 + 16) & ~v5), *(double *)a1);
  *(_QWORD *)a2 = v7;
  *(_DWORD *)(a2 + 8) = result;
  return result;
}

uint64_t sub_184AA0B44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EDD1A380) - 8) + 80);
  sub_184A956C8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  type metadata accessor for Region.Operation();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v2 = sub_184E30BC0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v0 + ((v1 + 41) & ~v1), v2);
  }
  return swift_deallocObject();
}

uint64_t sub_184AA0BE4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EDD1A380) - 8) + 80);
  v6 = *(_QWORD *)(v2 + 16);
  v7 = *(_QWORD *)(v2 + 24);
  v8 = *(_QWORD *)(v2 + 32);
  v9 = *(unsigned __int8 *)(v2 + 40);
  v10 = v2 + ((v5 + 41) & ~v5);
  v11 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)a1;
  v14 = *(_OWORD *)(a1 + 8);
  v15 = v11;
  v16 = *(_OWORD *)(a1 + 32);
  return sub_184A9F73C(&v13, v6, v7, v8, v9, v10, a2);
}

uint64_t sub_184AA0C6C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;

  if ((a4 & 1) != 0)
    return swift_retain();
  return result;
}

uint64_t objectdestroy_10Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EDD1A380) - 8) + 80);
  type metadata accessor for Region.Operation();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v2 = sub_184E30BC0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v0 + ((v1 + 16) & ~v1), v2);
  }
  return swift_deallocObject();
}

uint64_t sub_184AA0D0C@<X0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EDD1A380) - 8) + 80);
  result = sub_184A9FB38(v2 + ((v5 + 16) & ~v5), *a1);
  *a2 = v7;
  return result;
}

uint64_t sub_184AA0D60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Region.Operation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_184AA0DA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD1A3B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_184AA0DEC(uint64_t a1)
{
  sub_184AA0E4C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_184AA0E4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if ((a5 & 1) != 0)
  {
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_184AA0E84(uint64_t a1)
{
  sub_184AA092C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_184AA0EE4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

double sub_184AA0F2C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_184A9F6B8(a1, a2);
}

uint64_t sub_184AA0F48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 57) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  sub_184A956C8(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56));
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_184AA0FBC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v3 + 16);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80);
  return sub_184A9F964(a1, *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_BYTE *)(v3 + 56), v3 + ((v5 + 57) & ~v5), v4, *(_QWORD *)(v3 + 24), a2, a3);
}

uint64_t objectdestroy_19Tm()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  return swift_deallocObject();
}

double sub_184AA1040@<D0>(double *a1@<X8>)
{
  double result;
  double v3;

  sub_184E309F8();
  result = v3;
  *a1 = v3;
  return result;
}

uint64_t sub_184AA10BC()
{
  return swift_deallocObject();
}

BOOL sub_184AA10CC(uint64_t a1)
{
  uint64_t v1;

  return sub_184AA1A0C(a1, *(double *)(v1 + 16));
}

uint64_t sub_184AA10D4()
{
  return swift_deallocObject();
}

_QWORD *sub_184AA10E4(_QWORD *a1)
{
  uint64_t v1;

  return sub_184AA1A24(a1, *(_BYTE *)(v1 + 16));
}

uint64_t sub_184AA10EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(__int128 *);
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  char v26;

  v6 = *a3;
  v7 = a3[2];
  v8 = a3[3];
  v9 = (uint64_t (*)(__int128 *))a3[5];
  v10 = (unint64_t)a3[4] >> 1;
  swift_unknownObjectRetain();
  result = swift_retain();
  v22 = a2;
  v23 = v7 + 16;
  v12 = v8;
  v19 = a1;
  v20 = a2;
  while (2)
  {
    if (v12 != v10)
    {
      v13 = (uint64_t *)(v23 + 32 * v12);
      v14 = v12;
      while (1)
      {
        if (v12 < v8 || v14 >= v10)
        {
          __break(1u);
LABEL_18:
          __break(1u);
          return result;
        }
        v15 = *((unsigned __int8 *)v13 + 8);
        v16 = v14 + 1;
        v17 = *v13;
        v24 = *((_OWORD *)v13 - 1);
        v25 = v17;
        v26 = v15;
        result = v9(&v24);
        if ((result & 1) != 0)
          break;
        v13 += 4;
        ++v14;
        if (v10 == v16)
          goto LABEL_16;
      }
      if (v15)
      {
        v12 = v14 + 1;
        v18 = __OFADD__(a1++, 1);
        if (!v18)
          continue;
        goto LABEL_18;
      }
      v12 = v14 + 1;
      v18 = __OFADD__(v22++, 1);
      if (!v18)
        continue;
      __break(1u);
    }
    break;
  }
LABEL_16:
  swift_release();
  result = swift_unknownObjectRelease();
  *a4 = v6;
  a4[1] = v19;
  a4[2] = v20;
  a4[3] = a1;
  a4[4] = v22;
  return result;
}

uint64_t sub_184AA1234(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  _BYTE v10[16];
  unint64_t *v11;
  unint64_t v12;

  if (a3.n128_f64[0] > 0.0)
  {
    v12 = a3.n128_u64[0];
    MEMORY[0x1E0C80A78](a1, a3);
    v11 = &v12;
    return (uint64_t)sub_184A9DEBC((_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_184AA2B94, (uint64_t)v10, v4, v5);
  }
  if (a3.n128_f64[0] < 0.0)
  {
    v12 = a3.n128_u64[0];
    MEMORY[0x1E0C80A78](a1, a3);
    v11 = &v12;
    return (uint64_t)sub_184A9DEBC((_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_184AA2B78, (uint64_t)v10, v7, v8);
  }
  if (a2 < 2)
  {
    if (a2 != 1)
      return 0;
    result = 0;
    goto LABEL_15;
  }
  result = 0;
  for (i = a2; (uint64_t)i > 1; i -= i >> 1)
  {
    if (*(double *)(a1 + 8 * (result + (i >> 1))) < 0.0)
      result += i >> 1;
  }
  if (result < a2)
  {
LABEL_15:
    if (*(double *)(a1 + 8 * result) < 0.0)
      ++result;
  }
  return result;
}

uint64_t sub_184AA135C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t i;

  if (a2 < 2)
  {
    if (a2 != 1)
      return 0;
    v3 = 0;
  }
  else
  {
    v3 = 0;
    for (i = a2; (uint64_t)i > 1; i -= i >> 1)
    {
      if (*(_QWORD *)(a1 + 8 * (v3 + (i >> 1))) < a3)
        v3 += i >> 1;
    }
    if (v3 >= a2)
      return v3;
  }
  if (*(_QWORD *)(a1 + 8 * v3) < a3)
    ++v3;
  return v3;
}

uint64_t sub_184AA13C4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t i;

  if (a2 < 2)
  {
    if (a2 != 1)
      return 0;
    v3 = 0;
  }
  else
  {
    v3 = 0;
    for (i = a2; (uint64_t)i > 1; i -= i >> 1)
    {
      if (*(_QWORD *)(a1 + 8 * (v3 + (i >> 1))) > a3)
        v3 += i >> 1;
    }
    if (v3 >= a2)
      return v3;
  }
  if (*(_QWORD *)(a1 + 8 * v3) > a3)
    ++v3;
  return v3;
}

BOOL sub_184AA142C(double *a1, double *a2)
{
  return *a1 < *a2;
}

BOOL sub_184AA1440(double *a1, double *a2)
{
  return *a2 >= *a1;
}

BOOL sub_184AA1454(double *a1, double *a2)
{
  return *a1 >= *a2;
}

BOOL sub_184AA1468(double *a1, double *a2)
{
  return *a2 < *a1;
}

BOOL sub_184AA147C(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t sub_184AA1490(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  double v7;
  double v8;
  double *v16;
  uint64_t result;
  char **v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  unint64_t v22;
  unint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  double v29;
  char *v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;

  v16 = (double *)(a1 + 16);
  swift_beginAccess();
  if (*(double *)(a1 + 24) == a7)
    goto LABEL_2;
  swift_beginAccess();
  if (*v16 != a6)
  {
    swift_beginAccess();
    v28 = *(_QWORD *)(a5 + 16);
    swift_beginAccess();
    *(_QWORD *)(a4 + 16) = v28;
    *(_QWORD *)(a4 + 24) = 0;
    *(_BYTE *)(a4 + 32) = 1;
    goto LABEL_2;
  }
  v18 = (char **)(a2 + 16);
  swift_beginAccess();
  v19 = *(_QWORD *)(a2 + 16) + 32;
  v20 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 16);
  swift_bridgeObjectRetain();
  v21.n128_f64[0] = a7;
  v22 = sub_184AA1234(v19, v20, v21);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v23 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 16);
  if (v22 != v23)
  {
    if (v22 >= v23)
    {
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    if (*(double *)(*(_QWORD *)(a2 + 16) + 8 * v22 + 32) == a7)
      goto LABEL_9;
  }
  swift_beginAccess();
  if (*((_QWORD *)*v18 + 2) < v22)
  {
    __break(1u);
    goto LABEL_22;
  }
  sub_184AA24DC(v22, v22, a7);
LABEL_9:
  v18 = (char **)(a3 + 16);
  swift_beginAccess();
  v7 = *(double *)(a1 + 24);
  if (v7 > a7)
  {
    swift_beginAccess();
    if (v7 >= a7)
    {
      v8 = *v16;
      swift_beginAccess();
      a3 = *v18;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v18 = a3;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
LABEL_12:
        v26 = *((_QWORD *)a3 + 2);
        v25 = *((_QWORD *)a3 + 3);
        if (v26 >= v25 >> 1)
        {
          a3 = sub_184A7EEAC((char *)(v25 > 1), v26 + 1, 1, a3);
          *v18 = a3;
        }
        *((_QWORD *)a3 + 2) = v26 + 1;
        v27 = &a3[32 * v26];
        *((double *)v27 + 4) = v8;
        *((double *)v27 + 5) = a7;
        *((double *)v27 + 6) = v7;
        v27[56] = 0;
        goto LABEL_2;
      }
LABEL_24:
      a3 = sub_184A7EEAC(0, *((_QWORD *)a3 + 2) + 1, 1, a3);
      *v18 = a3;
      goto LABEL_12;
    }
LABEL_23:
    __break(1u);
    __break(1u);
    goto LABEL_24;
  }
  swift_beginAccess();
  v29 = *v16;
  swift_beginAccess();
  v30 = *v18;
  v31 = swift_isUniquelyReferenced_nonNull_native();
  *v18 = v30;
  if ((v31 & 1) == 0)
  {
    v30 = sub_184A7EEAC(0, *((_QWORD *)v30 + 2) + 1, 1, v30);
    *v18 = v30;
  }
  v33 = *((_QWORD *)v30 + 2);
  v32 = *((_QWORD *)v30 + 3);
  if (v33 >= v32 >> 1)
  {
    v30 = sub_184A7EEAC((char *)(v32 > 1), v33 + 1, 1, v30);
    *v18 = v30;
  }
  *((_QWORD *)v30 + 2) = v33 + 1;
  v34 = &v30[32 * v33];
  *((double *)v34 + 4) = v29;
  *((double *)v34 + 5) = v7;
  *((double *)v34 + 6) = a7;
  v34[56] = 1;
LABEL_2:
  result = swift_beginAccess();
  *(double *)(a1 + 16) = a6;
  *(double *)(a1 + 24) = a7;
  return result;
}

uint64_t sub_184AA17E0(uint64_t a1, uint64_t a2, double *a3, double *a4, _QWORD *a5, void (*a6)(uint64_t, double, double))
{
  uint64_t result;
  double *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v23;

  result = swift_beginAccess();
  if (*(unsigned __int8 *)(a2 + 16) == 255)
  {
    v13 = *(double **)(a1 + 8);
    switch(*(_DWORD *)a1)
    {
      case 0:
        v15 = (~*(_QWORD *)a3 & 0x7FF0000000000000) != 0 || (*(_QWORD *)a3 & 0xFFFFFFFFFFFFFLL) == 0;
        if (v15 || (v16 = *((_QWORD *)a3 + 1), (~v16 & 0x7FF0000000000000) != 0) || (v16 & 0xFFFFFFFFFFFFFLL) == 0)
        {
          swift_beginAccess();
          v23 = *a5 - 1;
          if (__OFSUB__(*a5, 1))
            goto LABEL_24;
          swift_beginAccess();
          *(_QWORD *)a2 = v23;
          *(_QWORD *)(a2 + 8) = 0;
          *(_BYTE *)(a2 + 16) = 2;
        }
        else
        {
          v17 = *v13;
          v18 = *((_QWORD *)v13 + 1);
          swift_beginAccess();
          *a4 = v17;
          *((_QWORD *)a4 + 1) = v18;
          *a3 = v17;
          *((_QWORD *)a3 + 1) = v18;
        }
LABEL_20:
        result = swift_beginAccess();
        if (!__OFADD__(*a5, 1))
        {
          ++*a5;
          return result;
        }
        __break(1u);
LABEL_24:
        __break(1u);
        JUMPOUT(0x184AA19D4);
      case 1:
        a6(result, *v13, v13[1]);
        goto LABEL_20;
      case 2:
      case 3:
        swift_beginAccess();
        v14 = *a5;
        swift_beginAccess();
        *(_QWORD *)a2 = v14;
        *(_QWORD *)(a2 + 8) = 0;
        *(_BYTE *)(a2 + 16) = 0;
        goto LABEL_20;
      case 4:
        v19 = *a3;
        v20 = a3[1];
        v21 = swift_beginAccess();
        if (v19 != *a4 || v20 != a4[1])
          a6(v21, v19, v20);
        *(int64x2_t *)a3 = vdupq_n_s64(0x7FF8000000000000uLL);
        goto LABEL_20;
      default:
        goto LABEL_20;
    }
  }
  return result;
}

uint64_t sub_184AA19E8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 32))(a2);
}

BOOL sub_184AA1A0C(uint64_t a1, double a2)
{
  return *(double *)(a1 + 16) > a2 && *(double *)(a1 + 8) <= a2;
}

_QWORD *sub_184AA1A24(_QWORD *result, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;

  v2 = result[1];
  v3 = result[2];
  v4 = result[3];
  v5 = result[4];
  if ((a2 & 1) == 0)
  {
    if (__OFSUB__(v2, v3))
    {
      __break(1u);
    }
    else if (!__OFSUB__(v4, v5))
    {
      return (_QWORD *)((v4 != v5) ^ (v2 != v3));
    }
    __break(1u);
    goto LABEL_10;
  }
  v6 = __OFADD__(v2, v3);
  v7 = v2 + v3;
  if (v6)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v6 = __OFADD__(v4, v5);
  v8 = v4 + v5;
  if (!v6)
    return (_QWORD *)(((v8 & 0x8000000000000001) == 1) ^ ((v7 & 0x8000000000000001) == 1));
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_184AA1A98(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_184AA25F0((uint64_t)v2);
  v3 = *((_QWORD *)v2 + 2);
  v5[0] = (uint64_t)(v2 + 32);
  v5[1] = v3;
  result = sub_184AA1B04(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_184AA1B04(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  double v16;
  double *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  double v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  unint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  char v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  double v93;
  char v94;
  __int128 v95;
  __int128 v96;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  double *v112;

  v3 = a1[1];
  result = sub_184E30B84();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_142;
    if ((unint64_t)v3 >= 2)
    {
      v87 = *a1;
      v88 = -1;
      v89 = 1;
      v90 = *a1;
      do
      {
        v91 = v88;
        v92 = v90;
        do
        {
          v93 = *(double *)(v92 + 32);
          if (v93 >= *(double *)v92)
            break;
          if (!v87)
            goto LABEL_146;
          v94 = *(_BYTE *)(v92 + 56);
          v95 = *(_OWORD *)(v92 + 40);
          v96 = *(_OWORD *)(v92 + 16);
          *(_OWORD *)(v92 + 32) = *(_OWORD *)v92;
          *(_OWORD *)(v92 + 48) = v96;
          *(double *)v92 = v93;
          *(_OWORD *)(v92 + 8) = v95;
          *(_BYTE *)(v92 + 24) = v94;
          v92 -= 32;
        }
        while (!__CFADD__(v91++, 1));
        ++v89;
        v90 += 32;
        --v88;
      }
      while (v89 != v3);
    }
  }
  else
  {
    if (v3 >= 0)
      v5 = v3;
    else
      v5 = v3 + 1;
    if (v3 < -1)
      goto LABEL_141;
    v6 = result;
    v106 = a1;
    if (v3 > 1)
    {
      v7 = v5 >> 1;
      result = sub_184E30A10();
      *(_QWORD *)(result + 16) = v7;
      v108 = result;
      v112 = (double *)(result + 32);
LABEL_13:
      v9 = 0;
      v10 = *a1;
      v107 = *a1 + 64;
      v105 = *a1 + 24;
      v11 = MEMORY[0x1E0DEE9D8];
      v109 = v6;
      v110 = v3;
      v111 = v10;
      while (1)
      {
        v13 = v9++;
        if (v9 < v3)
        {
          v14 = *(double *)(v10 + 32 * v9);
          v15 = 32 * v13;
          v16 = *(double *)(v10 + 32 * v13);
          v9 = v13 + 2;
          if (v13 + 2 < v3)
          {
            v17 = (double *)(v107 + 32 * v13);
            while (v14 < v16 != *v17 >= *(v17 - 4))
            {
              ++v9;
              v17 += 4;
              if (v3 == v9)
              {
                v9 = v3;
                break;
              }
            }
          }
          if (v14 < v16)
          {
            if (v9 < v13)
              goto LABEL_143;
            if (v13 < v9)
            {
              v18 = 32 * v9 - 32;
              v19 = v9;
              v20 = v13;
              do
              {
                if (v20 != --v19)
                {
                  if (!v10)
                    goto LABEL_149;
                  v23 = (_OWORD *)(v10 + v15);
                  v24 = (_OWORD *)(v10 + v18);
                  v25 = *(_OWORD *)(v10 + v15);
                  v26 = *(_QWORD *)(v10 + v15 + 16);
                  v27 = *(_BYTE *)(v10 + v15 + 24);
                  if (v15 != v18 || v23 >= v24 + 2)
                  {
                    v21 = v24[1];
                    *v23 = *v24;
                    v23[1] = v21;
                  }
                  v22 = v10 + v18;
                  *(_OWORD *)v22 = v25;
                  *(_QWORD *)(v22 + 16) = v26;
                  *(_BYTE *)(v22 + 24) = v27;
                }
                ++v20;
                v18 -= 32;
                v15 += 32;
              }
              while (v20 < v19);
            }
          }
        }
        if (v9 < v3)
        {
          if (__OFSUB__(v9, v13))
            goto LABEL_140;
          if (v9 - v13 < v6)
          {
            v28 = v13 + v6;
            if (__OFADD__(v13, v6))
              goto LABEL_144;
            if (v28 >= v3)
              v28 = v3;
            if (v28 < v13)
            {
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
LABEL_149:
              __break(1u);
LABEL_150:
              __break(1u);
              return result;
            }
            if (v9 != v28)
            {
              v29 = v105 + 32 * v9;
              do
              {
                v30 = v13;
                v31 = v29;
                do
                {
                  v32 = (_OWORD *)(v31 - 24);
                  v33 = *(double *)(v31 - 24);
                  if (v33 >= *(double *)(v31 - 56))
                    break;
                  if (!v10)
                    goto LABEL_147;
                  v35 = *(_OWORD *)(v31 - 56);
                  v34 = *(_OWORD *)(v31 - 40);
                  *(_BYTE *)(v31 - 32) = *(_BYTE *)v31;
                  v31 -= 32;
                  v36 = *(_OWORD *)(v31 + 16);
                  *v32 = v35;
                  v32[1] = v34;
                  *(double *)(v31 - 24) = v33;
                  *(_OWORD *)(v31 - 16) = v36;
                  ++v30;
                }
                while (v9 != v30);
                ++v9;
                v29 += 32;
              }
              while (v9 != v28);
              v9 = v28;
            }
          }
        }
        if (v9 < v13)
          goto LABEL_135;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_184AA23D0(0, *(_QWORD *)(v11 + 16) + 1, 1, (char *)v11);
          v11 = result;
        }
        v38 = *(_QWORD *)(v11 + 16);
        v37 = *(_QWORD *)(v11 + 24);
        v12 = v38 + 1;
        v10 = v111;
        if (v38 >= v37 >> 1)
        {
          result = (uint64_t)sub_184AA23D0((char *)(v37 > 1), v38 + 1, 1, (char *)v11);
          v10 = v111;
          v11 = result;
        }
        *(_QWORD *)(v11 + 16) = v12;
        v39 = v11 + 32;
        v40 = (uint64_t *)(v11 + 32 + 16 * v38);
        *v40 = v13;
        v40[1] = v9;
        if (v38)
        {
          while (1)
          {
            v41 = v12 - 1;
            if (v12 >= 4)
            {
              v46 = v39 + 16 * v12;
              v47 = *(_QWORD *)(v46 - 64);
              v48 = *(_QWORD *)(v46 - 56);
              v52 = __OFSUB__(v48, v47);
              v49 = v48 - v47;
              if (v52)
                goto LABEL_124;
              v51 = *(_QWORD *)(v46 - 48);
              v50 = *(_QWORD *)(v46 - 40);
              v52 = __OFSUB__(v50, v51);
              v44 = v50 - v51;
              v45 = v52;
              if (v52)
                goto LABEL_125;
              v53 = v12 - 2;
              v54 = (uint64_t *)(v39 + 16 * (v12 - 2));
              v56 = *v54;
              v55 = v54[1];
              v52 = __OFSUB__(v55, v56);
              v57 = v55 - v56;
              if (v52)
                goto LABEL_126;
              v52 = __OFADD__(v44, v57);
              v58 = v44 + v57;
              if (v52)
                goto LABEL_128;
              if (v58 >= v49)
              {
                v76 = (uint64_t *)(v39 + 16 * v41);
                v78 = *v76;
                v77 = v76[1];
                v52 = __OFSUB__(v77, v78);
                v79 = v77 - v78;
                if (v52)
                  goto LABEL_134;
                v69 = v44 < v79;
                goto LABEL_87;
              }
            }
            else
            {
              if (v12 != 3)
              {
                v70 = *(_QWORD *)(v11 + 32);
                v71 = *(_QWORD *)(v11 + 40);
                v52 = __OFSUB__(v71, v70);
                v63 = v71 - v70;
                v64 = v52;
                goto LABEL_81;
              }
              v43 = *(_QWORD *)(v11 + 32);
              v42 = *(_QWORD *)(v11 + 40);
              v52 = __OFSUB__(v42, v43);
              v44 = v42 - v43;
              v45 = v52;
            }
            if ((v45 & 1) != 0)
              goto LABEL_127;
            v53 = v12 - 2;
            v59 = (uint64_t *)(v39 + 16 * (v12 - 2));
            v61 = *v59;
            v60 = v59[1];
            v62 = __OFSUB__(v60, v61);
            v63 = v60 - v61;
            v64 = v62;
            if (v62)
              goto LABEL_129;
            v65 = (uint64_t *)(v39 + 16 * v41);
            v67 = *v65;
            v66 = v65[1];
            v52 = __OFSUB__(v66, v67);
            v68 = v66 - v67;
            if (v52)
              goto LABEL_131;
            if (__OFADD__(v63, v68))
              goto LABEL_133;
            if (v63 + v68 >= v44)
            {
              v69 = v44 < v68;
LABEL_87:
              if (v69)
                v41 = v53;
              goto LABEL_89;
            }
LABEL_81:
            if ((v64 & 1) != 0)
              goto LABEL_130;
            v72 = (uint64_t *)(v39 + 16 * v41);
            v74 = *v72;
            v73 = v72[1];
            v52 = __OFSUB__(v73, v74);
            v75 = v73 - v74;
            if (v52)
              goto LABEL_132;
            if (v75 < v63)
              goto LABEL_15;
LABEL_89:
            v80 = v41 - 1;
            if (v41 - 1 >= v12)
            {
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
              goto LABEL_145;
            }
            if (!v10)
              goto LABEL_148;
            v81 = v11;
            v82 = (uint64_t *)(v39 + 16 * v80);
            v83 = *v82;
            v84 = (_QWORD *)(v39 + 16 * v41);
            v85 = v84[1];
            result = sub_184AA21CC((double *)(v10 + 32 * *v82), (double *)(v10 + 32 * *v84), v10 + 32 * v85, v112);
            if (v1)
              goto LABEL_97;
            if (v85 < v83)
              goto LABEL_121;
            if (v41 > *(_QWORD *)(v81 + 16))
              goto LABEL_122;
            *v82 = v83;
            *(_QWORD *)(v39 + 16 * v80 + 8) = v85;
            v86 = *(_QWORD *)(v81 + 16);
            if (v41 >= v86)
              goto LABEL_123;
            v11 = v81;
            v12 = v86 - 1;
            result = (uint64_t)memmove((void *)(v39 + 16 * v41), v84 + 2, 16 * (v86 - 1 - v41));
            *(_QWORD *)(v81 + 16) = v86 - 1;
            v10 = v111;
            if (v86 <= 2)
              goto LABEL_15;
          }
        }
        v12 = 1;
LABEL_15:
        v6 = v109;
        v3 = v110;
        if (v9 >= v110)
        {
          v8 = v108;
          goto LABEL_107;
        }
      }
    }
    v8 = MEMORY[0x1E0DEE9D8];
    v112 = (double *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 == 1)
    {
      v108 = MEMORY[0x1E0DEE9D8];
      goto LABEL_13;
    }
    v12 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    v11 = MEMORY[0x1E0DEE9D8];
LABEL_107:
    result = v11;
    v108 = v8;
    if (v12 >= 2)
    {
      v98 = *v106;
      do
      {
        v99 = v12 - 2;
        if (v12 < 2)
          goto LABEL_136;
        if (!v98)
          goto LABEL_150;
        v100 = result;
        v101 = *(_QWORD *)(result + 32 + 16 * v99);
        v102 = *(_QWORD *)(result + 32 + 16 * (v12 - 1) + 8);
        result = sub_184AA21CC((double *)(v98 + 32 * v101), (double *)(v98 + 32 * *(_QWORD *)(result + 32 + 16 * (v12 - 1))), v98 + 32 * v102, v112);
        if (v1)
          break;
        if (v102 < v101)
          goto LABEL_137;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_184AA24C8(v100);
          v100 = result;
        }
        if (v99 >= *(_QWORD *)(v100 + 16))
          goto LABEL_138;
        v103 = (_QWORD *)(v100 + 32 + 16 * v99);
        *v103 = v101;
        v103[1] = v102;
        v104 = *(_QWORD *)(v100 + 16);
        if (v12 > v104)
          goto LABEL_139;
        memmove((void *)(v100 + 32 + 16 * (v12 - 1)), (const void *)(v100 + 32 + 16 * v12), 16 * (v104 - v12));
        result = v100;
        *(_QWORD *)(v100 + 16) = v104 - 1;
        v12 = v104 - 1;
      }
      while (v104 > 2);
    }
LABEL_97:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v108 + 16) = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_184AA21CC(double *__dst, double *__src, unint64_t a3, double *a4)
{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  double *v15;
  double *v16;
  BOOL v17;
  __int128 v18;
  uint64_t v19;
  double *v20;
  double *v21;
  double *v22;
  BOOL v23;
  __int128 v24;
  size_t v25;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = (char *)__src - (char *)__dst;
  v9 = (char *)__src - (char *)__dst + 31;
  if ((char *)__src - (char *)__dst >= 0)
    v9 = (char *)__src - (char *)__dst;
  v10 = v9 >> 5;
  v11 = a3 - (_QWORD)__src;
  v12 = a3 - (_QWORD)__src + 31;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v12 = a3 - (_QWORD)__src;
  v13 = v12 >> 5;
  if (v10 >= v13)
  {
    v19 = 4 * v13;
    if (a4 != __src || &__src[v19] <= a4)
      memmove(a4, __src, 32 * v13);
    v15 = &v4[v19];
    if (v7 >= v6 || v11 < 32)
      goto LABEL_40;
    v20 = (double *)(a3 - 32);
    while (1)
    {
      v21 = v20 + 4;
      v22 = v6 - 4;
      if (*(v15 - 4) >= *(v6 - 4))
      {
        v22 = v15 - 4;
        if (v21 != v15)
        {
          v15 -= 4;
          goto LABEL_37;
        }
        v23 = v20 >= v15;
        v15 -= 4;
        if (v23)
          goto LABEL_37;
      }
      else
      {
        if (v21 != v6)
        {
          v6 -= 4;
LABEL_37:
          v24 = *((_OWORD *)v22 + 1);
          *(_OWORD *)v20 = *(_OWORD *)v22;
          *((_OWORD *)v20 + 1) = v24;
          goto LABEL_38;
        }
        v23 = v20 >= v6;
        v6 -= 4;
        if (v23)
          goto LABEL_37;
      }
LABEL_38:
      if (v6 > v7)
      {
        v20 -= 4;
        if (v15 > v4)
          continue;
      }
      goto LABEL_40;
    }
  }
  v14 = 4 * v10;
  if (a4 != __dst || &__dst[v14] <= a4)
    memmove(a4, __dst, v14 * 8);
  v15 = &v4[v14];
  if ((unint64_t)v6 < a3 && v8 >= 32)
  {
    while (*v6 < *v4)
    {
      v16 = v6;
      v17 = v7 == v6;
      v6 += 4;
      if (!v17)
        goto LABEL_16;
LABEL_17:
      v7 += 4;
      if (v4 >= v15 || (unint64_t)v6 >= a3)
        goto LABEL_19;
    }
    v16 = v4;
    v17 = v7 == v4;
    v4 += 4;
    if (v17)
      goto LABEL_17;
LABEL_16:
    v18 = *((_OWORD *)v16 + 1);
    *(_OWORD *)v7 = *(_OWORD *)v16;
    *((_OWORD *)v7 + 1) = v18;
    goto LABEL_17;
  }
LABEL_19:
  v6 = v7;
LABEL_40:
  v25 = ((char *)v15 - (char *)v4 + ((char *)v15 - (char *)v4 < 0 ? 0x1FuLL : 0)) & 0xFFFFFFFFFFFFFFE0;
  if (v6 != v4 || v6 >= (double *)((char *)v4 + v25))
    memmove(v6, v4, v25);
  return 1;
}

char *sub_184AA23D0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD1A3D0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_184AA24C8(uint64_t a1)
{
  return sub_184AA23D0(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

unint64_t sub_184AA24DC(unint64_t result, int64_t a2, double a3)
{
  unint64_t *v3;
  unint64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  int64_t v12;
  double *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  double *v17;
  uint64_t v18;
  uint64_t v19;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v7 = result;
  v8 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v10 > *(_QWORD *)(v5 + 24) >> 1)
  {
    if (v6 <= v10)
      v12 = v6 + v9;
    else
      v12 = v6;
    result = (unint64_t)sub_184A7EFA0((char *)result, v12, 1, (char *)v5);
    v5 = result;
  }
  v13 = (double *)(v5 + 32 + 8 * v7);
  if (!v9)
    goto LABEL_19;
  v14 = *(_QWORD *)(v5 + 16);
  v15 = __OFSUB__(v14, a2);
  v16 = v14 - a2;
  if (v15)
    goto LABEL_25;
  result = (unint64_t)(v13 + 1);
  v17 = (double *)(v5 + 32 + 8 * a2);
  if (v13 + 1 != v17 || result >= (unint64_t)&v17[v16])
    result = (unint64_t)memmove((void *)result, v17, 8 * v16);
  v18 = *(_QWORD *)(v5 + 16);
  v15 = __OFADD__(v18, v9);
  v19 = v18 + v9;
  if (!v15)
  {
    *(_QWORD *)(v5 + 16) = v19;
LABEL_19:
    *v13 = a3;
    *v3 = v5;
    return result;
  }
LABEL_26:
  __break(1u);
  return result;
}

char *sub_184AA25F0(uint64_t a1)
{
  return sub_184A7EEAC(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_184AA2604(const CGPath *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD aBlock[6];
  int64x2_t v19;
  const CGPath *v20;

  v20 = a1;
  v1 = swift_allocObject();
  v2 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v1 + 16) = MEMORY[0x1E0DEE9D8];
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = v2;
  v19 = vdupq_n_s64(0x7FF8000000000000uLL);
  v3 = swift_allocObject();
  *(int64x2_t *)(v3 + 16) = v19;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_BYTE *)(v4 + 32) = -1;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = 0;
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = v3;
  v6[3] = v1;
  v6[4] = v17;
  v6[5] = v4;
  v6[6] = v5;
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = v4 + 16;
  v7[3] = &v19;
  v7[4] = v3 + 16;
  v7[5] = v5 + 16;
  v16 = (_QWORD *)(v5 + 16);
  v7[6] = sub_184AA2AEC;
  v7[7] = v6;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = sub_184AA2B20;
  *(_QWORD *)(v8 + 24) = v7;
  aBlock[4] = sub_184AA2B40;
  aBlock[5] = v8;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_184AA19E8;
  aBlock[3] = &block_descriptor;
  v9 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  CGPathApplyWithBlock(v20, v9);
  _Block_release(v9);
  LOBYTE(v9) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v9 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    swift_beginAccess();
    v11 = *(unsigned __int8 *)(v4 + 32);
    if ((_DWORD)v11 != 255)
    {
      v13 = *(_QWORD *)(v4 + 16);
      v12 = *(_QWORD *)(v4 + 24);
      sub_184A9CE84();
      swift_allocError();
      *(_QWORD *)v14 = v13;
LABEL_11:
      *(_QWORD *)(v14 + 8) = v12;
      *(_BYTE *)(v14 + 16) = v11;
      swift_willThrow();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();

      return v11;
    }
    if ((~v19.i64[0] & 0x7FF0000000000000) == 0
      && (v19.i64[0] & 0xFFFFFFFFFFFFFLL) != 0
      && (~v19.i64[1] & 0x7FF0000000000000) == 0
      && (v19.i64[1] & 0xFFFFFFFFFFFFFLL) != 0)
    {
      swift_beginAccess();
      sub_184AA1A98((char **)(v17 + 16));
      swift_endAccess();
      swift_release();

      swift_beginAccess();
      v11 = *(_QWORD *)(v1 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      return v11;
    }
    result = swift_beginAccess();
    v15 = *v16 - 1;
    if (!__OFSUB__(*v16, 1))
    {
      sub_184A9CE84();
      swift_allocError();
      v12 = 0;
      *(_QWORD *)v14 = v15;
      v11 = 2;
      goto LABEL_11;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_184AA2A54()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_184AA2A78()
{
  return swift_deallocObject();
}

uint64_t sub_184AA2A88()
{
  return swift_deallocObject();
}

uint64_t sub_184AA2A98()
{
  return swift_deallocObject();
}

uint64_t sub_184AA2AA8()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_184AA2AEC(double a1, double a2)
{
  uint64_t v2;

  return sub_184AA1490(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(char **)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), a1, a2);
}

uint64_t sub_184AA2AFC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_184AA2B20(uint64_t a1)
{
  uint64_t v1;

  return sub_184AA17E0(a1, *(_QWORD *)(v1 + 16), *(double **)(v1 + 24), *(double **)(v1 + 32), *(_QWORD **)(v1 + 40), *(void (**)(uint64_t, double, double))(v1 + 48));
}

uint64_t sub_184AA2B30()
{
  return swift_deallocObject();
}

uint64_t sub_184AA2B40()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t sub_184AA2B78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_184AA2BB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _BYTE *))sub_184AA13C4, a3);
}

uint64_t sub_184AA2B94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_184AA2BB0(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _BYTE *))sub_184AA135C, a3);
}

uint64_t sub_184AA2BB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, _QWORD, _BYTE *)@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _BYTE v8[8];

  result = a3(a1, a2, **(_QWORD **)(v4 + 16), v8);
  if (!v5)
    *a4 = result;
  return result;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for VerticalLine(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 24);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for VerticalLine(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for VerticalLine()
{
  return &type metadata for VerticalLine;
}

unint64_t sub_184AA2CB4()
{
  unint64_t result;

  result = qword_1EDD1A3D8[0];
  if (!qword_1EDD1A3D8[0])
  {
    result = MEMORY[0x186DC3348](&unk_184E39824, &type metadata for VerticalLine);
    atomic_store(result, qword_1EDD1A3D8);
  }
  return result;
}

uint64_t type metadata accessor for SpanError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SpanError);
}

uint64_t sub_184AA2D2C()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_184AA2DA8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 8) & (unint64_t)~v5) + *(_QWORD *)(v4 + 64) > 0x18)
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v5 + 8) & ~v5, ((unint64_t)a2 + v5 + 8) & ~v5);
  }
  return v3;
}

uint64_t sub_184AA2E4C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *sub_184AA2E6C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_QWORD *sub_184AA2EBC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_QWORD *sub_184AA2F0C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_QWORD *sub_184AA2F5C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t sub_184AA2FAC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v8 = ((v6 + 8) & ~v6) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v6 + 8) & ~v6);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_18;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if (!(_DWORD)v8)
    return v5 + v12 + 1;
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_184AA306C + 4 * byte_184E39898[(v8 - 1)]))();
}

void sub_184AA30CC(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((v8 + 8) & ~v8) + *(_QWORD *)(v6 + 64);
  v10 = a3 >= v7;
  v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      v14 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v14))
      {
        v12 = 4u;
      }
      else if (v14 >= 0x100)
      {
        v12 = 2;
      }
      else
      {
        v12 = v14 > 1;
      }
    }
    else
    {
      v12 = 1u;
    }
  }
  else
  {
    v12 = 0u;
  }
  if (v7 < a2)
  {
    v13 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v15 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, ((v8 + 8) & ~v8) + *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata accessor for Span(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Span);
}

BOOL sub_184AA32A4(uint64_t a1, uint64_t a2)
{
  return *(double *)a1 == *(double *)a2 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
}

double sub_184AA32D0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  int v3;

  result = *(double *)a1;
  v3 = *(_DWORD *)(a1 + 8);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_DWORD *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 20) = 1;
  return result;
}

double sub_184AA32F4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  int v3;

  result = *(double *)a1;
  v3 = *(_DWORD *)(a1 + 8);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 1;
  *(_DWORD *)(a2 + 16) = v3;
  *(_BYTE *)(a2 + 20) = 0;
  return result;
}

double sub_184AA3318@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  int v4;
  int v5;

  result = *(double *)a1;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a2 + 8);
  *(_QWORD *)a3 = *(_QWORD *)a1;
  *(_DWORD *)(a3 + 8) = v4;
  *(_BYTE *)(a3 + 12) = 0;
  *(_DWORD *)(a3 + 16) = v5;
  *(_BYTE *)(a3 + 20) = 0;
  return result;
}

uint64_t sub_184AA333C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int *v3;
  int *v4;
  char v5;
  char v6;
  int v7;
  char v8;
  int v9;

  v3 = (int *)(result + 8);
  v4 = (int *)(result + 16);
  v5 = *(_BYTE *)(result + 20);
  v6 = *(_BYTE *)(a2 + 20);
  if (!*(_BYTE *)(a2 + 12))
    v3 = (int *)(a2 + 8);
  v7 = *v3;
  v8 = *(_BYTE *)(a2 + 12) & *(_BYTE *)(result + 12);
  if (!*(_BYTE *)(a2 + 20))
    v4 = (int *)(a2 + 16);
  v9 = *v4;
  *(_QWORD *)a3 = *(_QWORD *)a2;
  *(_DWORD *)(a3 + 8) = v7;
  *(_BYTE *)(a3 + 12) = v8;
  *(_DWORD *)(a3 + 16) = v9;
  *(_BYTE *)(a3 + 20) = v6 & v5;
  return result;
}

_BYTE *sub_184AA3398@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_184AA33A4(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

_BYTE *sub_184AA33AC@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 | *result;
  return result;
}

_BYTE *sub_184AA33C0@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 & *result;
  return result;
}

_BYTE *sub_184AA33D4@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_184AA33E8(_BYTE *a1, unsigned __int8 *a2)
{
  _BYTE *v2;
  int v3;
  int v4;

  v3 = *a2;
  v4 = *v2;
  if ((v4 & v3) != v3)
    *v2 = v4 | v3;
  *a1 = v3;
  return (v4 & v3) != v3;
}

unsigned __int8 *sub_184AA3418@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  v5 = v4 & v3;
  if ((v4 & v3) != 0)
    *v2 = v4 & ~(_BYTE)v3;
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

unsigned __int8 *sub_184AA3444@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  *v2 = v4 | v3;
  v5 = v4 & v3;
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

_BYTE *sub_184AA3468(_BYTE *result)
{
  _BYTE *v1;

  *v1 |= *result;
  return result;
}

_BYTE *sub_184AA347C(_BYTE *result)
{
  _BYTE *v1;

  *v1 &= *result;
  return result;
}

_BYTE *sub_184AA3490(_BYTE *result)
{
  _BYTE *v1;

  *v1 ^= *result;
  return result;
}

_BYTE *sub_184AA34A4@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_184AA34B8(unsigned __int8 *a1)
{
  unsigned __int8 *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_184AA34CC(_BYTE *a1)
{
  _BYTE *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_184AA34E0(unsigned __int8 *a1)
{
  unsigned __int8 *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_184AA34F4()
{
  _BYTE *v0;

  return *v0 == 0;
}

uint64_t sub_184AA3504()
{
  return sub_184E30B18();
}

_BYTE *sub_184AA351C(_BYTE *result)
{
  _BYTE *v1;

  *v1 &= ~*result;
  return result;
}

unsigned __int8 *sub_184AA3530@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_184AA3540(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

BOOL sub_184AA354C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_184AA3560@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  char v3;
  uint64_t result;

  v3 = sub_184A967F4(a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

void sub_184AA359C()
{
  qword_1EDD2C950 = (uint64_t)&unk_1E162DC08;
}

void sub_184AA35B0()
{
  qword_1EDD2C958 = (uint64_t)&unk_1E162DC30;
}

void sub_184AA35C4()
{
  qword_1EDD2C960 = (uint64_t)&unk_1E162DC58;
}

void sub_184AA35D8()
{
  qword_1EDD2C968 = (uint64_t)&unk_1E162DC80;
}

double sub_184AA35EC@<D0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  result = *a1;
  *(double *)a2 = *a1;
  *(_BYTE *)(a2 + 8) = 1;
  return result;
}

double sub_184AA3600@<D0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  result = *a1;
  *(double *)a2 = *a1;
  *(_BYTE *)(a2 + 8) = 2;
  return result;
}

double sub_184AA3614@<D0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  result = *a1;
  *(double *)a2 = *a1;
  *(_BYTE *)(a2 + 8) = 3;
  return result;
}

double sub_184AA3628@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  char v4;

  result = *(double *)a2;
  v4 = *(_BYTE *)(a2 + 8) ^ *(_BYTE *)(a1 + 8);
  *(_QWORD *)a3 = *(_QWORD *)a2;
  *(_BYTE *)(a3 + 8) = v4;
  return result;
}

uint64_t sub_184AA3644@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  char v8;
  uint64_t v9;
  unsigned __int8 *v10;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a3 + 16);
  if (v5)
  {
    v6 = *(unsigned __int8 *)(a2 + 8);
    if (*(unsigned __int8 *)(a3 + 32) == v6)
      goto LABEL_5;
    if (v5 != 1)
    {
      if (*(unsigned __int8 *)(a3 + 33) == v6)
        goto LABEL_5;
      v9 = v5 - 2;
      if (v9)
      {
        v10 = (unsigned __int8 *)(a3 + 34);
        while (*v10 != v6)
        {
          ++v10;
          if (!--v9)
            goto LABEL_11;
        }
LABEL_5:
        v7 = 1;
        v8 = 1;
        if ((*(_BYTE *)(result + 8) & 1) == 0)
          goto LABEL_13;
        goto LABEL_12;
      }
    }
  }
LABEL_11:
  v7 = 0;
  v8 = 0;
  if ((*(_BYTE *)(result + 8) & 1) == 0)
  {
LABEL_12:
    v4 = 0x7FF8000000000000;
    v8 = v7;
  }
LABEL_13:
  *(_QWORD *)a4 = v4;
  *(_BYTE *)(a4 + 8) = v8;
  return result;
}

__n128 __swift_memcpy21_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_QWORD *)(a1 + 13) = *(_QWORD *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for Scanline(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 21))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Scanline(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 21) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Scanline()
{
  return &type metadata for Scanline;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for SourcedSegment(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SourcedSegment(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SourcedSegment()
{
  return &type metadata for SourcedSegment;
}

uint64_t __swift_memcpy12_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for Spandex(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 12))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Spandex(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 12) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Spandex()
{
  return &type metadata for Spandex;
}

ValueMetadata *type metadata accessor for Source()
{
  return &type metadata for Source;
}

unint64_t sub_184AA3840()
{
  unint64_t result;

  result = qword_1EDD1A4E0;
  if (!qword_1EDD1A4E0)
  {
    result = MEMORY[0x186DC3348](&unk_184E39980, &type metadata for Source);
    atomic_store(result, (unint64_t *)&qword_1EDD1A4E0);
  }
  return result;
}

unint64_t sub_184AA3888()
{
  unint64_t result;

  result = qword_1EDD1A4E8;
  if (!qword_1EDD1A4E8)
  {
    result = MEMORY[0x186DC3348](&unk_184E39950, &type metadata for Source);
    atomic_store(result, (unint64_t *)&qword_1EDD1A4E8);
  }
  return result;
}

unint64_t sub_184AA38D0()
{
  unint64_t result;

  result = qword_1EDD1A4F0;
  if (!qword_1EDD1A4F0)
  {
    result = MEMORY[0x186DC3348](&unk_184E399A8, &type metadata for Source);
    atomic_store(result, (unint64_t *)&qword_1EDD1A4F0);
  }
  return result;
}

unint64_t sub_184AA3918()
{
  unint64_t result;

  result = qword_1EDD1A4F8;
  if (!qword_1EDD1A4F8)
  {
    result = MEMORY[0x186DC3348](&unk_184E399E0, &type metadata for Source);
    atomic_store(result, (unint64_t *)&qword_1EDD1A4F8);
  }
  return result;
}

void Region.cgRegion.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  char isEscapingClosureAtFileLocation;
  _QWORD v12[6];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v2 = v0[4];
  v1 = v0[5];
  v3 = v0[6];
  v4 = (~*v0 & 0x7FF0000000000000) != 0 || (*v0 & 0xFFFFFFFFFFFFFLL) == 0;
  if (v4 && !*(_QWORD *)(v2 + 16))
  {
    v6 = 0;
    v1 = v0[1];
    v3 = v0[2];
    v2 = *v0;
    v5 = v0[3];
  }
  else
  {
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    v5 = 0;
    v6 = 1;
  }
  v13 = v2;
  v14 = v1;
  v15 = v3;
  v16 = v5;
  v17 = 0;
  v18 = v6;
  sub_184AA092C(v2, v1, v3, v5, v6);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = &v13;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = sub_184AA3BD8;
  *(_QWORD *)(v8 + 24) = v7;
  v12[4] = sub_184AA2B40;
  v12[5] = v8;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 1644167168;
  v12[2] = sub_184AA3BF0;
  v12[3] = &block_descriptor_0;
  v9 = _Block_copy(v12);
  swift_retain();
  swift_release();
  v10 = CGRegionCreateWithBoundsBlock((uint64_t)v9);
  _Block_release(v9);
  if (!v10)
    goto LABEL_13;
  sub_184AA08F4(v13, v14, v15, v16, v17, v18);
  swift_release();
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
  }
}

uint64_t sub_184AA3B20()
{
  double v1;
  double v2;
  double v3;
  uint64_t v4;
  _BYTE v5[40];
  double v6[4];
  char v7;

  sub_184A9E0D4((uint64_t)v5);
  sub_184AA3DC0((uint64_t)v5, (uint64_t)v6);
  if ((v7 & 1) != 0)
    return 1;
  v1 = v6[1];
  v2 = v6[2];
  v3 = v6[3];
  v4 = sub_184AA3E08(v6[0]);
  sub_184AA3E08(v2);
  sub_184AA3E08(v1);
  sub_184AA3E08(v3);
  return v4 << 32;
}

uint64_t sub_184AA3BC8()
{
  return swift_deallocObject();
}

uint64_t sub_184AA3BD8()
{
  return sub_184AA3B20();
}

uint64_t sub_184AA3BE0()
{
  return swift_deallocObject();
}

uint64_t sub_184AA3BF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v4;
  int v5;
  int v6;

  result = (*(uint64_t (**)(void))(a1 + 32))();
  *(_QWORD *)a2 = result;
  *(_DWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 12) = v5;
  *(_DWORD *)(a2 + 16) = v6;
  return result;
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

void Region.init(cgRegion:)(char *a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  char *v5;
  int v6;
  __n128 v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64x2_t v13;
  double v14[7];
  uint64_t v15;
  uint64_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  double v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v17 = vdupq_n_s64(0x7FF8000000000000uLL);
  v18 = v17;
  v4 = MEMORY[0x1E0DEE9D8];
  v19.i64[0] = MEMORY[0x1E0DEE9D8];
  v19.i64[1] = MEMORY[0x1E0DEE9D8];
  v20 = MEMORY[0x1E0DEE9D8];
  v5 = CGRegionEnumeratorCreate(a1);
  v15 = 0;
  v16 = 0;
  if (CGRegionEnumeratorGetNextBounds((uint64_t)v5, (_DWORD *)&v16 + 1, &v16, (_DWORD *)&v15 + 1, &v15))
  {
    do
    {
      v7.n128_u64[1] = v6;
      v7.n128_f64[0] = (double)SHIDWORD(v16);
      if (v7.n128_f64[0] >= (double)SHIDWORD(v15) || (double)(int)v16 >= (double)(int)v15)
        __break(1u);
      v14[0] = (double)SHIDWORD(v16);
      v14[1] = (double)SHIDWORD(v15);
      v14[2] = (double)(int)v16;
      v14[3] = (double)(int)v15;
      v14[4] = v4;
      v14[5] = v4;
      v14[6] = v4;
      Region.formUnion(_:)((uint64_t)v14, v7);
      swift_release_n();
    }
    while (CGRegionEnumeratorGetNextBounds((uint64_t)v5, (_DWORD *)&v16 + 1, &v16, (_DWORD *)&v15 + 1, &v15));
    v9 = v17.i64[1];
    v10 = v17.i64[0];
    v11 = v18.i64[1];
    v12 = v18.i64[0];
    v13 = v19;
    v4 = v20;
  }
  else
  {
    v13 = vdupq_n_s64(*(unint64_t *)&v4);
    v11 = 0x7FF8000000000000;
    v12 = 0x7FF8000000000000;
    v9 = 0x7FF8000000000000;
    v10 = 0x7FF8000000000000;
  }
  CGRegionEnumeratorRelease(v5);

  *(_QWORD *)a2 = v10;
  *(_QWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = v12;
  *(_QWORD *)(a2 + 24) = v11;
  *(int64x2_t *)(a2 + 32) = v13;
  *(double *)(a2 + 48) = v4;
}

uint64_t sub_184AA3DC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EDD1A3C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_184AA3E08(double a1)
{
  double v1;
  uint64_t result;

  v1 = round(a1);
  if (v1 <= -2147483650.0)
    return 2147483649;
  if (v1 >= 2147483650.0)
    return 2147483646;
  if ((~*(_QWORD *)&v1 & 0x7FF0000000000000) != 0)
  {
    if (v1 > -2147483650.0)
    {
      if (v1 < 2147483650.0)
        return (int)v1;
      goto LABEL_11;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void gpc_free_polygon(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = *(_DWORD *)a1;
  if (*(int *)a1 >= 1)
  {
    v3 = 0;
    v4 = *(_QWORD *)(a1 + 16);
    v5 = 8;
    do
    {
      v6 = *(void **)(v4 + v5);
      if (v6)
      {
        free(v6);
        v4 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(v4 + v5) = 0;
        v2 = *(_DWORD *)a1;
      }
      ++v3;
      v5 += 16;
    }
    while (v3 < v2);
  }
  v7 = *(void **)(a1 + 8);
  if (v7)
  {
    free(v7);
    *(_QWORD *)(a1 + 8) = 0;
  }
  v8 = *(void **)(a1 + 16);
  if (v8)
  {
    free(v8);
    *(_QWORD *)(a1 + 16) = 0;
  }
  *(_DWORD *)a1 = 0;
}

void gpc_add_contour(int *a1, int *a2)
{
  char *v4;
  _DWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (*a1 == -1)
  {
    v4 = 0;
    v5 = 0;
LABEL_5:
    v6 = -1;
    goto LABEL_6;
  }
  v5 = malloc_type_malloc(4 * (*a1 + 1), 0x100004052888210uLL);
  if (*a1 == -1)
  {
    v4 = 0;
    goto LABEL_5;
  }
  v16 = (char *)malloc_type_malloc(16 * (*a1 + 1), 0x1020040D5A9D86FuLL);
  v4 = v16;
  v6 = *a1;
  if (*a1 > 0)
  {
    v17 = 0;
    v18 = 0;
    do
    {
      v19 = *((_QWORD *)a1 + 2);
      v5[v18] = *(_DWORD *)(*((_QWORD *)a1 + 1) + 4 * v18);
      *(_OWORD *)&v16[v17] = *(_OWORD *)(v19 + v17);
      ++v18;
      v7 = *a1;
      v17 += 16;
    }
    while (v18 < v7);
    goto LABEL_7;
  }
LABEL_6:
  v7 = v6;
LABEL_7:
  v5[v7] = 0;
  *(_DWORD *)&v4[16 * v7] = *a2;
  v8 = *a2;
  if ((_DWORD)v8)
    v9 = malloc_type_malloc(16 * v8, 0x1000040451B5BE8uLL);
  else
    v9 = 0;
  v10 = &v4[16 * v7];
  *((_QWORD *)v10 + 1) = v9;
  v11 = v10 + 8;
  if (*a2 >= 1)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      *(_OWORD *)(*v11 + v12) = *(_OWORD *)(*((_QWORD *)a2 + 1) + v12);
      ++v13;
      v12 += 16;
    }
    while (v13 < *a2);
  }
  v14 = (void *)*((_QWORD *)a1 + 2);
  if (v14)
  {
    free(v14);
    *((_QWORD *)a1 + 2) = 0;
  }
  v15 = (void *)*((_QWORD *)a1 + 1);
  if (v15)
    free(v15);
  ++*a1;
  *((_QWORD *)a1 + 1) = v5;
  *((_QWORD *)a1 + 2) = v4;
}

double *build_lmt(double **a1, double **a2, _DWORD *a3, unsigned int *a4, int a5)
{
  uint64_t v5;
  int *v7;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  double *v18;
  uint64_t v19;
  uint64_t v20;
  double *v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  double v31;
  double *v32;
  double *v33;
  double *v34;
  double *v35;
  int v36;
  uint64_t v37;
  int v38;
  double v39;
  double v40;
  int v41;
  unsigned int v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  unint64_t v48;
  double *v49;
  double *v50;
  double v51;
  double v52;
  _BOOL4 v53;
  double *v54;
  double *v55;
  double v56;
  double v57;
  _DWORD *v58;
  BOOL v59;
  double *v60;
  uint64_t *v61;
  uint64_t v62;
  int v63;
  double v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  double *v73;
  double *v74;
  double v75;
  double v76;
  _BOOL4 v77;
  double *v78;
  double *v79;
  double v80;
  double v81;
  _DWORD *v82;
  double *v83;
  uint64_t *v84;
  _DWORD *v86;
  int *v87;
  int v89;

  v5 = *a4;
  if ((int)v5 < 1)
    return 0;
  v7 = (int *)a4;
  v10 = 0;
  v11 = 0;
  do
  {
    v12 = (uint64_t *)(*((_QWORD *)a4 + 2) + 16 * v10);
    v13 = *v12;
    v14 = *v12 - 1;
    if ((int)*v12 < 1)
    {
      v16 = 0;
    }
    else
    {
      v15 = 0;
      v16 = 0;
      v17 = v12[1];
      v18 = (double *)(v17 + 8);
      do
      {
        v19 = v15 + 1;
        if (*(double *)(v17 + 16 * ((v14 + (int)v15) % (int)v13) + 8) != *v18
          || (v13 - 1 != v15 ? (v20 = v15 + 1) : (v20 = 0), *(double *)(v17 + 16 * v20 + 8) != *v18))
        {
          ++v16;
        }
        v18 += 2;
        v15 = v19;
      }
      while (v13 != v19);
    }
    v11 += v16;
    ++v10;
  }
  while (v10 != v5);
  if (v11)
  {
    v21 = (double *)malloc_type_malloc(168 * v11, 0x102004014AE800DuLL);
    LODWORD(v5) = *v7;
  }
  else
  {
    v21 = 0;
  }
  if ((int)v5 >= 1)
  {
    v22 = 0;
    v23 = 0;
    v24 = 0uLL;
    v86 = a3;
    v87 = v7;
    do
    {
      v25 = *((_QWORD *)v7 + 2);
      v26 = (_DWORD *)(v25 + 16 * v22);
      LODWORD(v27) = *v26;
      v89 = v23;
      if ((*v26 & 0x80000000) != 0)
      {
        *v26 = -(int)v27;
      }
      else if ((_DWORD)v27)
      {
        v28 = 0;
        v29 = 0;
        do
        {
          v30 = *(_QWORD *)(v25 + 16 * v22 + 8);
          v31 = *(double *)(v30 + 16 * v28 + 8);
          if (*(double *)(v30 + 16 * (((int)v28 + (int)v27 - 1) % (int)v27) + 8) == v31
            && *(double *)(v30 + 16 * (((int)v28 + 1) % (int)v27) + 8) == v31)
          {
            ++v28;
          }
          else
          {
            v32 = &v21[21 * v29];
            *v32 = *(double *)(v30 + 16 * v28);
            v32[1] = v31;
            v33 = *a2;
            v34 = (double *)a2;
            if (*a2)
            {
              do
              {
                if (*v33 <= v31)
                {
                  if (*v33 >= v31)
                    goto LABEL_33;
                  v34 = v33 + 2;
                }
                else
                {
                  v34 = v33 + 1;
                }
                v33 = *(double **)v34;
              }
              while (*(_QWORD *)v34);
            }
            v35 = (double *)malloc_type_malloc(0x18uLL, 0x102004023CB03E4uLL);
            v24 = 0uLL;
            *(_QWORD *)v34 = v35;
            *v35 = v31;
            v35[1] = 0.0;
            *(_QWORD *)(*(_QWORD *)v34 + 16) = 0;
            ++*a3;
            v25 = *((_QWORD *)v7 + 2);
LABEL_33:
            ++v29;
            ++v28;
          }
          v27 = *(int *)(v25 + 16 * v22);
        }
        while (v28 < v27);
        v36 = v29 - 1;
        if (v29 >= 1)
        {
          v37 = 0;
          do
          {
            v38 = v37;
            v39 = v21[21 * ((v36 + (int)v37) % v29) + 1];
            v40 = v21[21 * v37++ + 1];
            if (v39 >= v40)
            {
              v41 = v37 == v29 ? 0 : v37;
              if (v21[21 * v41 + 1] > v40)
              {
                v42 = 0;
                v43 = v21[21 * v41 + 1];
                v44 = 1;
                do
                {
                  v45 = v44;
                  v41 = (v41 + 1) % v29;
                  ++v42;
                  ++v44;
                  v46 = v21[21 * v41 + 1] <= v43;
                  v43 = v21[21 * v41 + 1];
                }
                while (!v46);
                v47 = 0;
                v48 = 0;
                v49 = &v21[21 * v89];
                *((_DWORD *)v49 + 26) = 0;
                *((_DWORD *)v49 + 21) = 0;
                *((_DWORD *)v49 + 22) = 0;
                v50 = &v21[21 * v38];
                v52 = *v50;
                v51 = v50[1];
                do
                {
                  v53 = v42 > 1;
                  v54 = &v49[v47];
                  v54[6] = v52;
                  v54[2] = v52;
                  v54[3] = v51;
                  v38 = (v38 + 1) % v29;
                  v55 = &v21[21 * v38];
                  v56 = *v55;
                  v57 = v55[1];
                  v54[4] = *v55;
                  v54[5] = v57;
                  v54[8] = (v56 - v52) / (v57 - v51);
                  *((_DWORD *)v54 + 18) = a5;
                  LODWORD(v55) = v48++ < v42 - 1;
                  if ((v53 & v55) != 0)
                    v58 = v54 + 21;
                  else
                    v58 = 0;
                  *((_OWORD *)v54 + 7) = v24;
                  *((_OWORD *)v54 + 8) = v24;
                  v59 = !v53 || v47 == 0;
                  v60 = v54 - 21;
                  if (v59)
                    v60 = 0;
                  *((_QWORD *)v54 + 18) = v60;
                  *((_QWORD *)v54 + 19) = v58;
                  v54[20] = 0.0;
                  *((_DWORD *)v54 + 23) = 0;
                  *((_DWORD *)v54 + 24) = 0;
                  v47 += 21;
                  v51 = v57;
                  v52 = v56;
                  --v45;
                }
                while (v45);
                v89 += v42;
                v61 = (uint64_t *)bound_list(a1, v40);
                insert_bound(v61, (uint64_t)v49);
                v24 = 0uLL;
              }
            }
          }
          while (v37 != v29);
          v62 = 0;
          do
          {
            v63 = (v36 + (int)v62) % v29;
            v64 = v21[21 * v63 + 1];
            v65 = v21[21 * v62 + 1];
            v66 = v62 + 1;
            if (v64 > v65)
            {
              v67 = v66 == v29 ? 0 : v62 + 1;
              if (v21[21 * v67 + 1] >= v65)
              {
                v68 = 0;
                v69 = 1;
                do
                {
                  v70 = v69;
                  v63 = (v36 + v63) % v29;
                  ++v68;
                  ++v69;
                  v46 = v21[21 * v63 + 1] <= v64;
                  v64 = v21[21 * v63 + 1];
                }
                while (!v46);
                v71 = 0;
                v72 = 0;
                v73 = &v21[21 * v89];
                *((_DWORD *)v73 + 26) = 0;
                *((_DWORD *)v73 + 21) = 0;
                *((_DWORD *)v73 + 22) = 0;
                v74 = &v21[21 * (int)v62];
                v76 = *v74;
                v75 = v74[1];
                do
                {
                  v77 = v68 > 1;
                  v78 = &v73[v71];
                  v78[6] = v76;
                  v78[2] = v76;
                  v78[3] = v75;
                  LODWORD(v62) = (v36 + (int)v62) % v29;
                  v79 = &v21[21 * (int)v62];
                  v80 = *v79;
                  v81 = v79[1];
                  v78[4] = *v79;
                  v78[5] = v81;
                  v78[8] = (v80 - v76) / (v81 - v75);
                  *((_DWORD *)v78 + 18) = a5;
                  LODWORD(v79) = v72++ < v68 - 1;
                  if ((v77 & v79) != 0)
                    v82 = v78 + 21;
                  else
                    v82 = 0;
                  *((_OWORD *)v78 + 7) = v24;
                  *((_OWORD *)v78 + 8) = v24;
                  v59 = !v77 || v71 == 0;
                  v83 = v78 - 21;
                  if (v59)
                    v83 = 0;
                  *((_QWORD *)v78 + 18) = v83;
                  *((_QWORD *)v78 + 19) = v82;
                  v78[20] = 0.0;
                  *((_DWORD *)v78 + 23) = 0;
                  *((_DWORD *)v78 + 24) = 0;
                  v71 += 21;
                  v75 = v81;
                  v76 = v80;
                  --v70;
                }
                while (v70);
                v89 += v68;
                v84 = (uint64_t *)bound_list(a1, v65);
                insert_bound(v84, (uint64_t)v73);
                v24 = 0uLL;
              }
            }
            v62 = v66;
          }
          while (v66 != v29);
        }
      }
      ++v22;
      a3 = v86;
      v7 = v87;
      v23 = v89;
    }
    while (v22 < *v87);
  }
  return v21;
}

double build_sbt(int *a1, uint64_t a2, uint64_t a3)
{
  double result;
  uint64_t v7;

  do
  {
    if (*(_QWORD *)(a3 + 8))
      build_sbt(a1, a2);
    result = *(double *)a3;
    v7 = *a1;
    *(_QWORD *)(a2 + 8 * v7) = *(_QWORD *)a3;
    *a1 = v7 + 1;
    a3 = *(_QWORD *)(a3 + 16);
  }
  while (a3);
  return result;
}

void free_sbtree(void **a1)
{
  if (*a1)
  {
    free_sbtree((char *)*a1 + 8);
    free_sbtree((char *)*a1 + 16);
    if (*a1)
    {
      free(*a1);
      *a1 = 0;
    }
  }
}

double *add_local_min(void **a1, uint64_t a2, double a3, double a4)
{
  void *v8;
  double *result;
  _QWORD *v10;

  v8 = *a1;
  *a1 = malloc_type_malloc(0x28uLL, 0x10200402FC4DB2FuLL);
  result = (double *)malloc_type_malloc(0x18uLL, 0x10200403ED2C137uLL);
  *result = a3;
  result[1] = a4;
  result[2] = 0.0;
  *((_QWORD *)*a1 + 4) = *a1;
  v10 = *a1;
  *(_DWORD *)v10 = 1;
  v10[3] = v8;
  *((_QWORD *)*a1 + 1) = result;
  *((_QWORD *)*a1 + 2) = result;
  *(_QWORD *)(a2 + 112) = *a1;
  return result;
}

uint64_t merge_right(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    if (a2)
    {
      v3 = *(_QWORD *)(a2 + 32);
      *(_DWORD *)(v3 + 4) = 0;
      v4 = *(_QWORD *)(result + 32);
      if (v4 != v3)
      {
        *(_QWORD *)(*(_QWORD *)(v3 + 16) + 16) = *(_QWORD *)(v4 + 8);
        *(_QWORD *)(v3 + 16) = *(_QWORD *)(v4 + 16);
        if (a3)
        {
          v5 = *(_QWORD *)(result + 32);
          do
          {
            if (*(_QWORD *)(a3 + 32) == v5)
            {
              *(_DWORD *)a3 = 0;
              *(_QWORD *)(a3 + 32) = *(_QWORD *)(a2 + 32);
            }
            a3 = *(_QWORD *)(a3 + 24);
          }
          while (a3);
        }
      }
    }
  }
  return result;
}

uint64_t merge_left(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    if (a2)
    {
      v3 = *(_QWORD *)(a2 + 32);
      *(_DWORD *)(v3 + 4) = 1;
      v4 = *(_QWORD *)(result + 32);
      if (v4 != v3)
      {
        *(_QWORD *)(*(_QWORD *)(v4 + 16) + 16) = *(_QWORD *)(v3 + 8);
        *(_QWORD *)(v3 + 8) = *(_QWORD *)(v4 + 8);
        if (a3)
        {
          v5 = *(_QWORD *)(result + 32);
          do
          {
            if (*(_QWORD *)(a3 + 32) == v5)
            {
              *(_DWORD *)a3 = 0;
              *(_QWORD *)(a3 + 32) = *(_QWORD *)(a2 + 32);
            }
            a3 = *(_QWORD *)(a3 + 24);
          }
          while (a3);
        }
      }
    }
  }
  return result;
}

double *bound_list(double **a1, double a2)
{
  double **v3;
  double *v4;
  double v5;
  double *v6;
  double *v7;

  v3 = a1;
  v4 = *a1;
  if (!*a1)
  {
LABEL_9:
    v7 = (double *)malloc_type_malloc(0x18uLL, 0x102004023CB03E4uLL);
    v4 = 0;
    goto LABEL_10;
  }
  v5 = *v4;
  if (*v4 > a2)
  {
LABEL_7:
    v7 = (double *)malloc_type_malloc(0x18uLL, 0x102004023CB03E4uLL);
LABEL_10:
    *v3 = v7;
    *v7 = a2;
    v7[1] = 0.0;
    *((_QWORD *)*v3 + 2) = v4;
    v6 = *v3;
    return v6 + 1;
  }
  while (1)
  {
    v6 = v4;
    if (v5 >= a2)
      return v6 + 1;
    v4 = (double *)*((_QWORD *)v4 + 2);
    if (!v4)
    {
      v3 = (double **)(v6 + 2);
      goto LABEL_9;
    }
    v5 = *v4;
    if (*v4 > a2)
    {
      v3 = (double **)(v6 + 2);
      goto LABEL_7;
    }
  }
}

uint64_t *insert_bound(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  double v3;
  double v4;

  v2 = *result;
  if (*result)
  {
    v3 = *(double *)(a2 + 16);
    while (1)
    {
      v4 = *(double *)(v2 + 16);
      if (v3 < v4 || v3 == v4 && *(double *)(a2 + 64) < *(double *)(v2 + 64))
        break;
      result = (uint64_t *)(v2 + 160);
      v2 = *(_QWORD *)(v2 + 160);
      if (!v2)
        goto LABEL_7;
    }
    *result = a2;
    *(_QWORD *)(a2 + 160) = v2;
  }
  else
  {
LABEL_7:
    *result = a2;
  }
  return result;
}

char *create_contour_bboxes(int *a1)
{
  uint64_t v1;
  char *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64x2_t v7;
  int64x2_t v8;
  int64x2_t *v9;
  uint64_t v10;
  double *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;

  v1 = *a1;
  if (!(_DWORD)v1)
    return 0;
  result = (char *)malloc_type_malloc(32 * v1, 0x1000040E0EAB150uLL);
  v4 = *a1;
  if ((int)v4 >= 1)
  {
    v5 = 0;
    v6 = *((_QWORD *)a1 + 2);
    v7 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v8 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    do
    {
      v9 = (int64x2_t *)&result[32 * v5];
      *v9 = v7;
      v9[1] = v8;
      v10 = *(unsigned int *)(v6 + 16 * v5);
      if ((int)v10 >= 1)
      {
        v11 = (double *)(*(_QWORD *)(v6 + 16 * v5 + 8) + 8);
        v12 = 1.79769313e308;
        v13 = -1.79769313e308;
        v14 = -1.79769313e308;
        v15 = 1.79769313e308;
        do
        {
          v16 = *(v11 - 1);
          if (v16 < v15)
          {
            *(double *)v9->i64 = v16;
            v15 = v16;
          }
          v17 = *v11;
          if (*v11 < v12)
          {
            *(double *)&v9->i64[1] = v17;
            v12 = v17;
          }
          if (v16 > v14)
          {
            *(double *)v9[1].i64 = v16;
            v14 = v16;
          }
          if (v17 > v13)
          {
            *(double *)&v9[1].i64[1] = v17;
            v13 = v17;
          }
          v11 += 2;
          --v10;
        }
        while (v10);
      }
      ++v5;
    }
    while (v5 != v4);
  }
  return result;
}

void PBPageLayoutPkg::PBRect::~PBRect(PBPageLayoutPkg::PBRect *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x186DC23C4);
}

uint64_t PBPageLayoutPkg::PBRect::readFrom(PBPageLayoutPkg::PBRect *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_37;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 40) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 2u:
        *((_BYTE *)this + 40) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 3u:
        *((_BYTE *)this + 40) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 4u:
        *((_BYTE *)this + 40) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_36:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_37:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t PBPageLayoutPkg::PBRect::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 40);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16));
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 8));
  }
LABEL_8:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  if ((*(_BYTE *)(v3 + 40) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8));
  return this;
}

uint64_t PBPageLayoutPkg::PBRect::formatText(PBPageLayoutPkg::PBRect *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "height", *((double *)this + 1));
    v5 = *((_BYTE *)this + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "origin_y", *((double *)this + 3));
      if ((*((_BYTE *)this + 40) & 8) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "origin_x", *((double *)this + 2));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "width", *((double *)this + 4));
  return PB::TextFormatter::endObject(a2);
}

uint64_t resample_vertical<int,unsigned char,4,(AlphaStyle)0>(uint64_t result, uint64_t a2, uint64_t a3, int a4, int8x8_t **a5, uint64_t a6)
{
  int8x8_t *v6;
  uint64_t v7;
  const __int16 *v8;
  signed int v9;
  int v10;
  unint64_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  const __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int32x4_t *v19;
  int32x4_t *v20;
  unsigned int v21;
  int16x4_t v22;
  int16x4_t v23;
  int32x4_t *v24;
  int16x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  const __int16 *v28;
  uint64_t v29;
  uint64_t *v30;
  unsigned int v31;
  uint64_t v32;
  int16x4_t v33;
  int16x8_t v34;

  v6 = *a5;
  v7 = *(int *)(result + 4);
  v8 = (const __int16 *)(result + 8);
  if (a4 >= 2)
  {
    v10 = 0;
    v11 = 2;
    v12.i64[0] = 0x200000002000;
    v12.i64[1] = 0x200000002000;
    do
    {
      v13 = 0uLL;
      v14 = 0uLL;
      v15 = v8;
      if ((int)v7 >= 2)
      {
        v16 = 0;
        v17 = (4 * v10) & 0xFFFFFFF8;
        v15 = v8;
        do
        {
          v18 = (_QWORD *)(a6 + 8 * v16);
          v19 = (int32x4_t *)(*v18 + 4 * v17);
          v20 = (int32x4_t *)(v18[1] + 4 * v17);
          v21 = *(_DWORD *)v15;
          v15 += 2;
          v22 = vdup_n_s16(v21);
          v23 = vdup_n_s16(HIWORD(v21));
          v14 = vmlal_s16(vmlal_s16(v14, vmovn_s32(v19[1]), v22), vmovn_s32(v20[1]), v23);
          v13 = vmlal_s16(vmlal_s16(v13, vmovn_s32(*v19), v22), vmovn_s32(*v20), v23);
          result = v16 + 4;
          v16 += 2;
        }
        while (result <= v7);
      }
      if ((v7 & 1) != 0)
      {
        v24 = (int32x4_t *)(*(_QWORD *)(a6 + 8 * ((int)v7 - 1)) + 4 * ((4 * v10) & 0xFFFFFFF8));
        v25 = vld1_dup_s16(v15);
        v14 = vmlal_s16(v14, vmovn_s32(v24[1]), v25);
        v13 = vmlal_s16(v13, vmovn_s32(*v24), v25);
      }
      v10 += 2;
      *v6++ = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vshrq_n_s32(vaddq_s32(v13, v12), 0xEuLL)), vshrq_n_s32(vaddq_s32(v14, v12), 0xEuLL)));
      v11 += 2;
    }
    while (v11 <= a4);
    v9 = a4 & 0xFFFFFFFE;
  }
  else
  {
    v9 = 0;
  }
  if (v9 < a4)
  {
    v26.i64[0] = 0x200000002000;
    v26.i64[1] = 0x200000002000;
    do
    {
      v27 = 0uLL;
      v28 = v8;
      if ((int)v7 >= 2)
      {
        v29 = 0;
        v28 = v8;
        do
        {
          v30 = (uint64_t *)(a6 + 8 * v29);
          result = *v30;
          v31 = *(_DWORD *)v28;
          v28 += 2;
          v27 = vmlal_s16(vmlal_s16(v27, vmovn_s32(*(int32x4_t *)(*v30 + 4 * (4 * v9))), vdup_n_s16(v31)), vmovn_s32(*(int32x4_t *)(v30[1] + 4 * (4 * v9))), vdup_n_s16(HIWORD(v31)));
          v32 = v29 + 4;
          v29 += 2;
        }
        while (v32 <= v7);
      }
      if ((v7 & 1) != 0)
      {
        v33 = vld1_dup_s16(v28);
        v27 = vmlal_s16(v27, vmovn_s32(*(int32x4_t *)(*(_QWORD *)(a6 + 8 * ((int)v7 - 1)) + 4 * (4 * v9))), v33);
      }
      v34 = (int16x8_t)vshrq_n_s32(vaddq_s32(v27, v26), 0xEuLL);
      *(int16x4_t *)v34.i8 = vqmovn_s32((int32x4_t)v34);
      v6->i32[0] = vqmovun_s16(v34).u32[0];
      v6 = (int8x8_t *)((char *)v6 + 4);
      ++v9;
    }
    while (v9 < a4);
  }
  return result;
}

uint64_t resample_vertical<int,unsigned char,2,(AlphaStyle)1>(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint8x8_t **a5, uint64_t a6)
{
  uint8x8_t *v6;
  uint64_t v7;
  const __int16 *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  const __int16 *v15;
  uint64_t v16;
  _QWORD *v17;
  int32x4_t *v18;
  int32x4_t *v19;
  unsigned int v20;
  int16x4_t v21;
  int16x4_t v22;
  int32x4_t *v23;
  int16x4_t v24;
  int8x8_t v25;
  int32x4_t v26;
  const __int16 *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int16x4_t v31;
  int16x8_t v32;

  v6 = *a5;
  v7 = *(int *)(result + 4);
  v8 = (const __int16 *)(result + 8);
  if (a4 >= 4)
  {
    v10 = 0;
    v11 = 4;
    v12.i64[0] = 0x200000002000;
    v12.i64[1] = 0x200000002000;
    do
    {
      v13 = 0uLL;
      v14 = 0uLL;
      v15 = v8;
      if ((int)v7 >= 2)
      {
        v16 = 0;
        v15 = v8;
        do
        {
          v17 = (_QWORD *)(a6 + 8 * v16);
          v18 = (int32x4_t *)(*v17 + 8 * v10);
          v19 = (int32x4_t *)(v17[1] + 8 * v10);
          v20 = *(_DWORD *)v15;
          v15 += 2;
          v21 = vdup_n_s16(v20);
          v22 = vdup_n_s16(HIWORD(v20));
          v14 = vmlal_s16(vmlal_s16(v14, vmovn_s32(v18[1]), v21), vmovn_s32(v19[1]), v22);
          v13 = vmlal_s16(vmlal_s16(v13, vmovn_s32(*v18), v21), vmovn_s32(*v19), v22);
          result = v16 + 4;
          v16 += 2;
        }
        while (result <= v7);
      }
      if ((v7 & 1) != 0)
      {
        v23 = (int32x4_t *)(*(_QWORD *)(a6 + 8 * ((int)v7 - 1)) + 8 * v10);
        v24 = vld1_dup_s16(v15);
        v14 = vmlal_s16(v14, vmovn_s32(v23[1]), v24);
        v13 = vmlal_s16(v13, vmovn_s32(*v23), v24);
      }
      v10 += 4;
      v25 = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vshrq_n_s32(vaddq_s32(v13, v12), 0xEuLL)), vshrq_n_s32(vaddq_s32(v14, v12), 0xEuLL)));
      *v6++ = vmax_u8((uint8x8_t)v25, (uint8x8_t)(*(_QWORD *)&vzip1_s8((int8x8_t)vmax_u8((uint8x8_t)vuzp1_s8(v25, *(int8x8_t *)v12.i8), (uint8x8_t)vuzp2_s8(v25, *(int8x8_t *)v12.i8)), *(int8x8_t *)v12.i8) & 0xFF00FF00FF00FFLL));
      v11 += 4;
    }
    while (v11 <= a4);
    v9 = a4 & 0x7FFFFFFC;
  }
  else
  {
    v9 = 0;
  }
  for (; v9 < a4; ++v9)
  {
    if ((int)v7 >= 2)
    {
      v28 = 0;
      v26 = 0uLL;
      v27 = v8;
      do
      {
        v29 = *(_DWORD *)v27;
        v27 += 2;
        result = HIWORD(v29);
        v26 = vmlal_s16(vmlal_s16(v26, vuzp1_s16(*(int16x4_t *)(*(_QWORD *)(a6 + 8 * v28) + 4 * (2 * v9)), (int16x4_t)0x200000002000), vdup_n_s16(v29)), vuzp1_s16(*(int16x4_t *)(*(_QWORD *)(a6 + 8 * v28 + 8) + 4 * (2 * v9)), (int16x4_t)0x200000002000), vdup_n_s16(result));
        v30 = v28 + 4;
        v28 += 2;
      }
      while (v30 <= v7);
    }
    else
    {
      v26 = 0uLL;
      v27 = v8;
    }
    if ((v7 & 1) != 0)
    {
      v31 = vld1_dup_s16(v27);
      v26 = vmlal_s16(v26, vuzp1_s16(*(int16x4_t *)(*(_QWORD *)(a6 + 8 * ((int)v7 - 1)) + 4 * (2 * v9)), (int16x4_t)0x200000002000), v31);
    }
    *(int32x2_t *)v26.i8 = vadd_s32(*(int32x2_t *)v26.i8, (int32x2_t)0x200000002000);
    v32 = (int16x8_t)vshrq_n_s32(v26, 0xEuLL);
    *(int16x4_t *)v32.i8 = vqmovn_s32((int32x4_t)v32);
    *(int8x8_t *)v32.i8 = vqmovun_s16(v32);
    v6->i8[1] = v32.i8[1];
    v6->i8[0] = vmaxv_u8(*(uint8x8_t *)v32.i8);
    v6 = (uint8x8_t *)((char *)v6 + 2);
  }
  return result;
}

uint64_t resample_vertical<int,unsigned char,5,(AlphaStyle)1>(uint64_t result, double a2, double a3, uint8x8_t a4, double a5, int32x4_t a6, double a7, int32x4_t a8, int16x4_t a9, uint64_t a10, uint64_t a11, int a12, uint8x16_t **a13, uint64_t a14)
{
  uint8x16_t v14;
  int32x4_t v15;
  uint8x16_t *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  __int32 v21;
  __int32 v22;
  __int32 v23;
  __int32 v24;
  __int32 v25;
  __int32 v26;
  __int32 v27;
  __int32 v28;
  __int32 v29;
  __int32 v30;
  __int32 v31;
  __int32 v32;
  __int32 v33;
  __int32 v34;
  __int32 v35;
  __int32 v36;
  __int32 v37;
  __int32 v38;
  __int32 v39;
  const __int16 *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  int32x4_t *v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t *v50;
  int16x4_t v51;
  int16x4_t v52;
  unsigned int v53;
  int16x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int16x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  uint64_t v65;
  int32x4_t *v66;
  int16x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int16x8_t v80;
  int32x4_t v81;
  int16x8_t v82;
  int8x16_t v83;
  int16x8_t v84;
  uint8x8_t v85;
  uint8x8_t v86;
  uint8x8_t v87;
  int32x4_t v88;
  unsigned __int32 v89;
  unsigned __int32 v90;
  unsigned __int32 v91;
  unsigned __int32 v92;
  unsigned int *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  int32x4_t *v97;
  int32x4_t *v98;
  unsigned int v99;
  int32x4_t v100;
  int32x4_t v101;
  int16x4_t v102;
  uint64_t v103;
  int32x4_t *v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  __int16 v108;
  __int16 v109;
  unint64_t v110;
  int v111;
  uint64_t v112;
  __int16 *v113;

  v16 = *a13;
  v17 = *(int *)(result + 4);
  v113 = (__int16 *)(result + 8);
  if (a12 >= 4)
  {
    v19 = 0;
    v20 = 4;
    *(double *)&a4 = NAN;
    a6.i32[1] = -1;
    v110 = a12;
    a8.i64[0] = 0x200000002000;
    a8.i64[1] = 0x200000002000;
    v111 = a12;
    do
    {
      v112 = v19;
      if ((int)v17 >= 2)
      {
        v41 = 0;
        v21 = 0;
        LODWORD(result) = 0;
        v22 = 0;
        v23 = 0;
        v24 = 0;
        v25 = 0;
        v26 = 0;
        v27 = 0;
        v28 = 0;
        v29 = 0;
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = 0;
        v36 = 0;
        v37 = 0;
        v38 = 0;
        v39 = 0;
        v42 = (5 * (_DWORD)v19) & 0xFFFFFFFC;
        v40 = v113;
        do
        {
          v43 = (_QWORD *)(a14 + 8 * v41);
          v44 = (int32x4_t *)(*v43 + 4 * v42);
          v46 = v44[2];
          v45 = v44[3];
          v48 = *v44;
          v47 = v44[1];
          v49 = v44[4];
          v50 = (int32x4_t *)(v43[1] + 4 * v42);
          v51 = vmovn_s32(v48);
          v52 = vmovn_s32(v46);
          v53 = *(_DWORD *)v40;
          v40 += 2;
          v54 = vdup_n_s16(v53);
          v46.i64[0] = __PAIR64__(v37, v36);
          v46.i64[1] = __PAIR64__(v39, v38);
          v48.i64[0] = __PAIR64__(v33, v32);
          v48.i64[1] = __PAIR64__(v35, v34);
          v55.i64[0] = __PAIR64__(v29, v28);
          v55.i64[1] = __PAIR64__(v31, v30);
          v56.i64[0] = __PAIR64__(result, v21);
          v56.i64[1] = __PAIR64__(v23, v22);
          v57 = vmlal_s16(v56, v51, v54);
          v58 = vdup_n_s16(HIWORD(v53));
          v59 = vmlal_s16(v57, vmovn_s32(*v50), v58);
          v60.i64[0] = __PAIR64__(v25, v24);
          v60.i64[1] = __PAIR64__(v27, v26);
          v23 = v59.i32[3];
          v22 = v59.i32[2];
          result = v59.u32[1];
          v61 = vmlal_s16(vmlal_s16(v60, vmovn_s32(v47), v54), vmovn_s32(v50[1]), v58);
          v27 = v61.i32[3];
          v26 = v61.i32[2];
          v25 = v61.i32[1];
          v21 = v59.i32[0];
          v62 = vmlal_s16(vmlal_s16(v55, v52, v54), vmovn_s32(v50[2]), v58);
          v31 = v62.i32[3];
          v30 = v62.i32[2];
          v24 = v61.i32[0];
          v29 = v62.i32[1];
          v63 = vmlal_s16(vmlal_s16(v48, vmovn_s32(v45), v54), vmovn_s32(v50[3]), v58);
          v35 = v63.i32[3];
          v28 = v62.i32[0];
          v34 = v63.i32[2];
          v33 = v63.i32[1];
          v64 = vmlal_s16(vmlal_s16(v46, vmovn_s32(v49), v54), vmovn_s32(v50[4]), v58);
          v39 = v64.i32[3];
          v38 = v64.i32[2];
          v37 = v64.i32[1];
          v32 = v63.i32[0];
          v36 = v64.i32[0];
          v65 = v41 + 4;
          v41 += 2;
        }
        while (v65 <= v17);
      }
      else
      {
        v21 = 0;
        result = 0;
        v22 = 0;
        v23 = 0;
        v24 = 0;
        v25 = 0;
        v26 = 0;
        v27 = 0;
        v28 = 0;
        v29 = 0;
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = 0;
        v36 = 0;
        v37 = 0;
        v38 = 0;
        v39 = 0;
        v40 = v113;
      }
      if ((v17 & 1) != 0)
      {
        v66 = (int32x4_t *)(*(_QWORD *)(a14 + 8 * ((int)v17 - 1)) + 4 * ((5 * (_DWORD)v112) & 0xFFFFFFFC));
        v67 = vld1_dup_s16(v40);
        v68.i64[0] = __PAIR64__(result, v21);
        v68.i64[1] = __PAIR64__(v23, v22);
        v69 = vmlal_s16(v68, vmovn_s32(*v66), v67);
        v23 = v69.i32[3];
        v22 = v69.i32[2];
        result = v69.u32[1];
        v70.i64[0] = __PAIR64__(v25, v24);
        v70.i64[1] = __PAIR64__(v27, v26);
        v71 = vmlal_s16(v70, vmovn_s32(v66[1]), v67);
        v27 = v71.i32[3];
        v26 = v71.i32[2];
        v25 = v71.i32[1];
        v72.i64[0] = __PAIR64__(v29, v28);
        v72.i64[1] = __PAIR64__(v31, v30);
        v73 = vmlal_s16(v72, vmovn_s32(v66[2]), v67);
        v31 = v73.i32[3];
        v30 = v73.i32[2];
        v29 = v73.i32[1];
        v74.i64[0] = __PAIR64__(v33, v32);
        v21 = v69.i32[0];
        v74.i64[1] = __PAIR64__(v35, v34);
        v75 = vmlal_s16(v74, vmovn_s32(v66[3]), v67);
        v35 = v75.i32[3];
        v34 = v75.i32[2];
        v33 = v75.i32[1];
        v24 = v71.i32[0];
        v76.i64[0] = __PAIR64__(v37, v36);
        v76.i64[1] = __PAIR64__(v39, v38);
        v28 = v73.i32[0];
        v77 = vmlal_s16(v76, vmovn_s32(v66[4]), v67);
        v39 = v77.i32[3];
        v32 = v75.i32[0];
        v38 = v77.i32[2];
        v37 = v77.i32[1];
        v36 = v77.i32[0];
      }
      v78.i64[0] = __PAIR64__(v25, v24);
      v78.i64[1] = __PAIR64__(v27, v26);
      v79.i64[0] = __PAIR64__(result, v21);
      v79.i64[1] = __PAIR64__(v23, v22);
      v19 = v112 + 4;
      v80 = vqmovn_high_s32(vqmovn_s32(vshrq_n_s32(vaddq_s32(v79, a8), 0xEuLL)), vshrq_n_s32(vaddq_s32(v78, a8), 0xEuLL));
      v78.i64[0] = __PAIR64__(v33, v32);
      v78.i64[1] = __PAIR64__(v35, v34);
      v81.i64[0] = __PAIR64__(v29, v28);
      v81.i64[1] = __PAIR64__(v31, v30);
      v82 = vqmovn_high_s32(vqmovn_s32(vshrq_n_s32(vaddq_s32(v81, a8), 0xEuLL)), vshrq_n_s32(vaddq_s32(v78, a8), 0xEuLL));
      v83 = vqmovun_high_s16(vqmovun_s16(v80), v82);
      v78.i64[0] = __PAIR64__(v37, v36);
      v78.i64[1] = __PAIR64__(v39, v38);
      v84 = (int16x8_t)vshrq_n_s32(vaddq_s32(v78, a8), 0xEuLL);
      *(int16x4_t *)v84.i8 = vqmovn_s32((int32x4_t)v84);
      a9 = (int16x4_t)vqmovun_s16(v84);
      *(int8x8_t *)v82.i8 = vqtbl1_s8(v83, (int8x8_t)-15857404);
      v82.i8[3] = a9.i8[3];
      v85 = (uint8x8_t)vqtbl1_s8(v83, (int8x8_t)-15923197);
      v85.i8[3] = a9.i8[2];
      *(uint8x8_t *)v82.i8 = vmax_u8(*(uint8x8_t *)v82.i8, v85);
      v86 = (uint8x8_t)vqtbl1_s8(v83, (int8x8_t)-15988990);
      v86.i8[3] = a9.i8[1];
      *(uint8x8_t *)v82.i8 = vmax_u8(*(uint8x8_t *)v82.i8, v86);
      v87 = (uint8x8_t)vqtbl1_s8(v83, (int8x8_t)-16054783);
      v87.i8[3] = a9.i8[0];
      *(uint8x8_t *)v82.i8 = vmax_u8(vmax_u8(*(uint8x8_t *)v82.i8, v87), (uint8x8_t)vqtbl1_s8(v83, (int8x8_t)-4042652416));
      v15 = (int32x4_t)vqtbl1q_s8((int8x16_t)v82, (int8x16_t)xmmword_1850047F0);
      v14 = vmaxq_u8((uint8x16_t)v83, (uint8x16_t)v15);
      *v16 = v14;
      v16[1].i32[0] = a9.i32[0];
      v16 = (uint8x16_t *)((char *)v16 + 20);
      v20 += 4;
      a12 = v111;
    }
    while (v20 <= v110);
    v18 = v111 & 0x7FFFFFFC;
  }
  else
  {
    v18 = 0;
  }
  if (v18 < a12)
  {
    v88.i64[0] = 0x200000002000;
    v88.i64[1] = 0x200000002000;
    do
    {
      if ((int)v17 >= 2)
      {
        v94 = 0;
        v89 = 0;
        v90 = 0;
        v91 = 0;
        v92 = 0;
        LODWORD(result) = 0;
        v93 = (unsigned int *)v113;
        v95 = (5 * v18);
        do
        {
          v96 = (_QWORD *)(a14 + 8 * v94);
          v97 = (int32x4_t *)(*v96 + 4 * v95);
          a6.i32[0] = v97[1].i32[0];
          v98 = (int32x4_t *)(v96[1] + 4 * v95);
          a8.i32[0] = v98[1].i32[0];
          *(int16x4_t *)a8.i8 = vmovn_s32(a8);
          v99 = *v93++;
          a9 = vdup_n_s16(v99);
          v14.i32[0] = v99;
          v15.i32[0] = result;
          v100 = vmlal_s16(v15, vmovn_s32(a6), *(int16x4_t *)v14.i8);
          v101.i64[0] = __PAIR64__(v90, v89);
          v101.i64[1] = __PAIR64__(v92, v91);
          v102 = vdup_n_s16(HIWORD(v99));
          a6 = vmlal_s16(vmlal_s16(v101, vmovn_s32(*v97), a9), vmovn_s32(*v98), v102);
          v92 = a6.u32[3];
          v102.i32[0] = HIWORD(v99);
          v91 = a6.u32[2];
          v90 = a6.u32[1];
          v89 = a6.i32[0];
          v15 = vmlal_s16(v100, *(int16x4_t *)a8.i8, v102);
          result = v15.u32[0];
          v103 = v94 + 4;
          v94 += 2;
        }
        while (v103 <= v17);
      }
      else
      {
        v89 = 0;
        v90 = 0;
        v91 = 0;
        v92 = 0;
        result = 0;
        v93 = (unsigned int *)v113;
      }
      if ((v17 & 1) != 0)
      {
        v104 = (int32x4_t *)(*(_QWORD *)(a14 + 8 * ((int)v17 - 1)) + 4 * (5 * v18));
        v105 = *v104;
        a6.i32[0] = v104[1].i32[0];
        *(int16x4_t *)a6.i8 = vmovn_s32(a6);
        *(int16x4_t *)v105.i8 = vmovn_s32(*v104);
        v106.i64[0] = __PAIR64__(v90, v89);
        v106.i64[1] = __PAIR64__(v92, v91);
        a9.i32[0] = *(unsigned __int16 *)v93;
        a8 = vmlal_s16(v106, *(int16x4_t *)v105.i8, vdup_n_s16(a9.u32[0]));
        v92 = a8.u32[3];
        v91 = a8.u32[2];
        v90 = a8.u32[1];
        v89 = a8.i32[0];
        v105.i32[0] = result;
        result = vmlal_s16(v105, *(int16x4_t *)a6.i8, a9).u32[0];
      }
      v107.i64[0] = __PAIR64__(v90, v89);
      v107.i64[1] = __PAIR64__(v92, v91);
      a6.i32[0] = result;
      a6 = vshrq_n_s32(vaddq_s32(a6, v88), 0xEuLL);
      *(int8x8_t *)v107.i8 = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vshrq_n_s32(vaddq_s32(v107, v88), 0xEuLL)), a6));
      v108 = v107.u8[3];
      v109 = v107.u8[2];
      v16->i8[4] = v107.i8[4];
      v107.u64[1] = (unint64_t)a4;
      a4 = (uint8x8_t)vqtbl1_s8((int8x16_t)v107, (int8x8_t)0xF0E0D0403020100);
      v107.i8[0] = vmaxv_u8(a4);
      v107.i16[1] = v107.u8[1];
      v107.i16[2] = v109;
      v107.i16[3] = v108;
      v16->i32[0] = vmovn_s16((int16x8_t)v107).u32[0];
      v16 = (uint8x16_t *)((char *)v16 + 5);
      ++v18;
    }
    while (v18 < a12);
  }
  return result;
}

uint64_t resample_vertical<int,unsigned char,5,(AlphaStyle)2>(uint64_t result, double a2, double a3, uint8x8_t a4, double a5, int32x4_t a6, double a7, int32x4_t a8, int16x4_t a9, uint64_t a10, uint64_t a11, int a12, uint8x16_t **a13, uint64_t a14)
{
  uint8x16_t v14;
  int16x8_t v15;
  uint8x16_t *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  __int32 v21;
  __int32 v22;
  __int32 v23;
  __int32 v24;
  __int32 v25;
  __int32 v26;
  __int32 v27;
  __int32 v28;
  __int32 v29;
  __int32 v30;
  __int32 v31;
  __int32 v32;
  __int32 v33;
  __int32 v34;
  __int32 v35;
  __int32 v36;
  __int32 v37;
  __int32 v38;
  __int32 v39;
  const __int16 *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  int32x4_t *v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t *v50;
  int16x4_t v51;
  int16x4_t v52;
  unsigned int v53;
  int16x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int16x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  uint64_t v65;
  int32x4_t *v66;
  int16x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int16x8_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int16x8_t v83;
  uint8x8_t v84;
  uint8x8_t v85;
  uint8x8_t v86;
  int32x4_t v87;
  unsigned __int32 v88;
  unsigned __int32 v89;
  unsigned __int32 v90;
  unsigned __int32 v91;
  unsigned int *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  int32x4_t *v96;
  int32x4_t *v97;
  unsigned int v98;
  int32x4_t v99;
  int32x4_t v100;
  int16x4_t v101;
  uint64_t v102;
  int32x4_t *v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int16x8_t v107;
  unint64_t v108;
  int v109;
  uint64_t v110;
  __int16 *v111;

  v16 = *a13;
  v17 = *(int *)(result + 4);
  v111 = (__int16 *)(result + 8);
  if (a12 >= 4)
  {
    v19 = 0;
    v20 = 4;
    *(double *)&a4 = NAN;
    a6.i32[1] = -1;
    v108 = a12;
    a8.i64[0] = 0x200000002000;
    a8.i64[1] = 0x200000002000;
    v109 = a12;
    do
    {
      v110 = v19;
      if ((int)v17 >= 2)
      {
        v41 = 0;
        v21 = 0;
        LODWORD(result) = 0;
        v22 = 0;
        v23 = 0;
        v24 = 0;
        v25 = 0;
        v26 = 0;
        v27 = 0;
        v28 = 0;
        v29 = 0;
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = 0;
        v36 = 0;
        v37 = 0;
        v38 = 0;
        v39 = 0;
        v42 = (5 * (_DWORD)v19) & 0xFFFFFFFC;
        v40 = v111;
        do
        {
          v43 = (_QWORD *)(a14 + 8 * v41);
          v44 = (int32x4_t *)(*v43 + 4 * v42);
          v46 = v44[2];
          v45 = v44[3];
          v48 = *v44;
          v47 = v44[1];
          v49 = v44[4];
          v50 = (int32x4_t *)(v43[1] + 4 * v42);
          v51 = vmovn_s32(v48);
          v52 = vmovn_s32(v46);
          v53 = *(_DWORD *)v40;
          v40 += 2;
          v54 = vdup_n_s16(v53);
          v46.i64[0] = __PAIR64__(v37, v36);
          v46.i64[1] = __PAIR64__(v39, v38);
          v48.i64[0] = __PAIR64__(v33, v32);
          v48.i64[1] = __PAIR64__(v35, v34);
          v55.i64[0] = __PAIR64__(v29, v28);
          v55.i64[1] = __PAIR64__(v31, v30);
          v56.i64[0] = __PAIR64__(result, v21);
          v56.i64[1] = __PAIR64__(v23, v22);
          v57 = vmlal_s16(v56, v51, v54);
          v58 = vdup_n_s16(HIWORD(v53));
          v59 = vmlal_s16(v57, vmovn_s32(*v50), v58);
          v60.i64[0] = __PAIR64__(v25, v24);
          v60.i64[1] = __PAIR64__(v27, v26);
          v23 = v59.i32[3];
          v22 = v59.i32[2];
          result = v59.u32[1];
          v61 = vmlal_s16(vmlal_s16(v60, vmovn_s32(v47), v54), vmovn_s32(v50[1]), v58);
          v27 = v61.i32[3];
          v26 = v61.i32[2];
          v25 = v61.i32[1];
          v21 = v59.i32[0];
          v62 = vmlal_s16(vmlal_s16(v55, v52, v54), vmovn_s32(v50[2]), v58);
          v31 = v62.i32[3];
          v30 = v62.i32[2];
          v24 = v61.i32[0];
          v29 = v62.i32[1];
          v63 = vmlal_s16(vmlal_s16(v48, vmovn_s32(v45), v54), vmovn_s32(v50[3]), v58);
          v35 = v63.i32[3];
          v28 = v62.i32[0];
          v34 = v63.i32[2];
          v33 = v63.i32[1];
          v64 = vmlal_s16(vmlal_s16(v46, vmovn_s32(v49), v54), vmovn_s32(v50[4]), v58);
          v39 = v64.i32[3];
          v38 = v64.i32[2];
          v37 = v64.i32[1];
          v32 = v63.i32[0];
          v36 = v64.i32[0];
          v65 = v41 + 4;
          v41 += 2;
        }
        while (v65 <= v17);
      }
      else
      {
        v21 = 0;
        result = 0;
        v22 = 0;
        v23 = 0;
        v24 = 0;
        v25 = 0;
        v26 = 0;
        v27 = 0;
        v28 = 0;
        v29 = 0;
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = 0;
        v36 = 0;
        v37 = 0;
        v38 = 0;
        v39 = 0;
        v40 = v111;
      }
      if ((v17 & 1) != 0)
      {
        v66 = (int32x4_t *)(*(_QWORD *)(a14 + 8 * ((int)v17 - 1)) + 4 * ((5 * (_DWORD)v110) & 0xFFFFFFFC));
        v67 = vld1_dup_s16(v40);
        v68.i64[0] = __PAIR64__(result, v21);
        v68.i64[1] = __PAIR64__(v23, v22);
        v69 = vmlal_s16(v68, vmovn_s32(*v66), v67);
        v23 = v69.i32[3];
        v22 = v69.i32[2];
        result = v69.u32[1];
        v70.i64[0] = __PAIR64__(v25, v24);
        v70.i64[1] = __PAIR64__(v27, v26);
        v71 = vmlal_s16(v70, vmovn_s32(v66[1]), v67);
        v27 = v71.i32[3];
        v26 = v71.i32[2];
        v25 = v71.i32[1];
        v72.i64[0] = __PAIR64__(v29, v28);
        v72.i64[1] = __PAIR64__(v31, v30);
        v73 = vmlal_s16(v72, vmovn_s32(v66[2]), v67);
        v31 = v73.i32[3];
        v30 = v73.i32[2];
        v29 = v73.i32[1];
        v74.i64[0] = __PAIR64__(v33, v32);
        v21 = v69.i32[0];
        v74.i64[1] = __PAIR64__(v35, v34);
        v75 = vmlal_s16(v74, vmovn_s32(v66[3]), v67);
        v35 = v75.i32[3];
        v34 = v75.i32[2];
        v33 = v75.i32[1];
        v24 = v71.i32[0];
        v76.i64[0] = __PAIR64__(v37, v36);
        v76.i64[1] = __PAIR64__(v39, v38);
        v28 = v73.i32[0];
        v77 = vmlal_s16(v76, vmovn_s32(v66[4]), v67);
        v39 = v77.i32[3];
        v32 = v75.i32[0];
        v38 = v77.i32[2];
        v37 = v77.i32[1];
        v36 = v77.i32[0];
      }
      v78.i64[0] = __PAIR64__(v25, v24);
      v78.i64[1] = __PAIR64__(v27, v26);
      v79.i64[0] = __PAIR64__(result, v21);
      v19 = v110 + 4;
      v79.i64[1] = __PAIR64__(v23, v22);
      v80 = vqmovn_high_s32(vqmovn_s32(vshrq_n_s32(vaddq_s32(v79, a8), 0xEuLL)), vshrq_n_s32(vaddq_s32(v78, a8), 0xEuLL));
      v78.i64[0] = __PAIR64__(v33, v32);
      v78.i64[1] = __PAIR64__(v35, v34);
      v81.i64[0] = __PAIR64__(v29, v28);
      v81.i64[1] = __PAIR64__(v31, v30);
      v15 = vqmovn_high_s32(vqmovn_s32(vshrq_n_s32(vaddq_s32(v81, a8), 0xEuLL)), vshrq_n_s32(vaddq_s32(v78, a8), 0xEuLL));
      v82 = vqmovun_high_s16(vqmovun_s16(v80), v15);
      v78.i64[0] = __PAIR64__(v37, v36);
      v78.i64[1] = __PAIR64__(v39, v38);
      v83 = (int16x8_t)vshrq_n_s32(vaddq_s32(v78, a8), 0xEuLL);
      *(int16x4_t *)v83.i8 = vqmovn_s32((int32x4_t)v83);
      *(int8x8_t *)v83.i8 = vqmovun_s16(v83);
      *(int8x8_t *)v15.i8 = vqtbl1_s8(v82, (int8x8_t)-15857404);
      v15.i8[3] = v83.i8[3];
      v84 = (uint8x8_t)vqtbl1_s8(v82, (int8x8_t)-15923197);
      v84.i8[3] = v83.i8[2];
      *(uint8x8_t *)v15.i8 = vmax_u8(*(uint8x8_t *)v15.i8, v84);
      v85 = (uint8x8_t)vqtbl1_s8(v82, (int8x8_t)-15988990);
      v85.i8[3] = v83.i8[1];
      *(uint8x8_t *)v15.i8 = vmax_u8(*(uint8x8_t *)v15.i8, v85);
      v86 = (uint8x8_t)vqtbl1_s8(v82, (int8x8_t)-16054783);
      v86.i8[3] = v83.i8[0];
      *(uint8x8_t *)v15.i8 = vmax_u8(vmax_u8(*(uint8x8_t *)v15.i8, v86), (uint8x8_t)vqtbl1_s8(v82, (int8x8_t)-4042652416));
      v14 = vmaxq_u8((uint8x16_t)v82, (uint8x16_t)vqtbl1q_s8((int8x16_t)v15, (int8x16_t)xmmword_185004800));
      v86.i16[0] = 0;
      v86.i8[2] = 0;
      v86.i8[3] = v15.i8[3];
      a9 = (int16x4_t)vmaxq_u8((uint8x16_t)v83, (uint8x16_t)v86.u32[0]).u64[0];
      *v16 = v14;
      v16[1].i32[0] = a9.i32[0];
      v16 = (uint8x16_t *)((char *)v16 + 20);
      v20 += 4;
      a12 = v109;
    }
    while (v20 <= v108);
    v18 = v109 & 0x7FFFFFFC;
  }
  else
  {
    v18 = 0;
  }
  if (v18 < a12)
  {
    v87.i64[0] = 0x200000002000;
    v87.i64[1] = 0x200000002000;
    do
    {
      if ((int)v17 >= 2)
      {
        v93 = 0;
        v88 = 0;
        v89 = 0;
        v90 = 0;
        v91 = 0;
        LODWORD(result) = 0;
        v92 = (unsigned int *)v111;
        v94 = (5 * v18);
        do
        {
          v95 = (_QWORD *)(a14 + 8 * v93);
          v96 = (int32x4_t *)(*v95 + 4 * v94);
          a6.i32[0] = v96[1].i32[0];
          v97 = (int32x4_t *)(v95[1] + 4 * v94);
          a8.i32[0] = v97[1].i32[0];
          *(int16x4_t *)a8.i8 = vmovn_s32(a8);
          v98 = *v92++;
          a9 = vdup_n_s16(v98);
          v14.i32[0] = v98;
          v15.i32[0] = result;
          v99 = vmlal_s16((int32x4_t)v15, vmovn_s32(a6), *(int16x4_t *)v14.i8);
          v100.i64[0] = __PAIR64__(v89, v88);
          v100.i64[1] = __PAIR64__(v91, v90);
          v101 = vdup_n_s16(HIWORD(v98));
          a6 = vmlal_s16(vmlal_s16(v100, vmovn_s32(*v96), a9), vmovn_s32(*v97), v101);
          v91 = a6.u32[3];
          v101.i32[0] = HIWORD(v98);
          v90 = a6.u32[2];
          v89 = a6.u32[1];
          v88 = a6.i32[0];
          v15 = (int16x8_t)vmlal_s16(v99, *(int16x4_t *)a8.i8, v101);
          result = v15.u32[0];
          v102 = v93 + 4;
          v93 += 2;
        }
        while (v102 <= v17);
      }
      else
      {
        v88 = 0;
        v89 = 0;
        v90 = 0;
        v91 = 0;
        result = 0;
        v92 = (unsigned int *)v111;
      }
      if ((v17 & 1) != 0)
      {
        v103 = (int32x4_t *)(*(_QWORD *)(a14 + 8 * ((int)v17 - 1)) + 4 * (5 * v18));
        v104 = *v103;
        a6.i32[0] = v103[1].i32[0];
        *(int16x4_t *)a6.i8 = vmovn_s32(a6);
        *(int16x4_t *)v104.i8 = vmovn_s32(*v103);
        v105.i64[0] = __PAIR64__(v89, v88);
        v105.i64[1] = __PAIR64__(v91, v90);
        a9.i32[0] = *(unsigned __int16 *)v92;
        a8 = vmlal_s16(v105, *(int16x4_t *)v104.i8, vdup_n_s16(a9.u32[0]));
        v91 = a8.u32[3];
        v90 = a8.u32[2];
        v89 = a8.u32[1];
        v88 = a8.i32[0];
        v104.i32[0] = result;
        result = vmlal_s16(v104, *(int16x4_t *)a6.i8, a9).u32[0];
      }
      v106.i64[0] = __PAIR64__(v89, v88);
      v106.i64[1] = __PAIR64__(v91, v90);
      a6.i32[0] = result;
      v107 = vqmovn_high_s32(vqmovn_s32(vshrq_n_s32(vaddq_s32(v106, v87), 0xEuLL)), vshrq_n_s32(vaddq_s32(a6, v87), 0xEuLL));
      *(int8x8_t *)v107.i8 = vqmovun_s16(v107);
      a6 = (int32x4_t)vzip1q_s8((int8x16_t)v107, (int8x16_t)v87);
      v107.u64[1] = (unint64_t)a4;
      a4 = (uint8x8_t)vqtbl1_s8((int8x16_t)v107, (int8x8_t)0xF0E0D0403020100);
      *(int8x8_t *)a6.i8 = vmovn_s16((int16x8_t)a6);
      v16->i32[0] = a6.i32[0];
      v16->i8[4] = vmaxv_u8(a4);
      v16 = (uint8x16_t *)((char *)v16 + 5);
      ++v18;
    }
    while (v18 < a12);
  }
  return result;
}

uint64_t resample_vertical<int,unsigned char,3,(AlphaStyle)3>(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v6;
  _WORD *v7;
  uint64_t v8;
  const __int16 *v9;
  signed int v10;
  int v11;
  unint64_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  const __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int32x4_t *v20;
  int32x4_t *v21;
  unsigned int v22;
  int16x4_t v23;
  int16x4_t v24;
  uint64_t v25;
  int32x4_t *v26;
  int16x4_t v27;
  int16x8_t v28;
  int8x8_t v29;
  __int16 v30;
  __int16 v31;
  __int16 v32;
  int8x8_t v33;
  uint8x8_t v34;
  int16x8_t v35;
  int32x4_t v36;
  int32x4_t v37;
  const __int16 *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  int16x4_t v43;
  int16x8_t v44;

  v6 = *a5;
  v7 = (_WORD *)a5[1];
  v8 = *(int *)(result + 4);
  v9 = (const __int16 *)(result + 8);
  if (a4 >= 2)
  {
    v11 = 0;
    v12 = 2;
    v13.i64[0] = 0x200000002000;
    v13.i64[1] = 0x200000002000;
    do
    {
      v14 = 0uLL;
      v15 = 0uLL;
      v16 = v9;
      if ((int)v8 >= 2)
      {
        v17 = 0;
        v18 = (4 * v11) & 0xFFFFFFF8;
        v16 = v9;
        do
        {
          v19 = (_QWORD *)(a6 + 8 * v17);
          v20 = (int32x4_t *)(*v19 + 4 * v18);
          v21 = (int32x4_t *)(v19[1] + 4 * v18);
          v22 = *(_DWORD *)v16;
          v16 += 2;
          v23 = vdup_n_s16(v22);
          v24 = vdup_n_s16(HIWORD(v22));
          v15 = vmlal_s16(vmlal_s16(v15, vmovn_s32(v20[1]), v23), vmovn_s32(v21[1]), v24);
          v14 = vmlal_s16(vmlal_s16(v14, vmovn_s32(*v20), v23), vmovn_s32(*v21), v24);
          v25 = v17 + 4;
          v17 += 2;
        }
        while (v25 <= v8);
      }
      if ((v8 & 1) != 0)
      {
        v26 = (int32x4_t *)(*(_QWORD *)(a6 + 8 * ((int)v8 - 1)) + 4 * ((4 * v11) & 0xFFFFFFF8));
        v27 = vld1_dup_s16(v16);
        v15 = vmlal_s16(v15, vmovn_s32(v26[1]), v27);
        v14 = vmlal_s16(v14, vmovn_s32(*v26), v27);
      }
      v11 += 2;
      v28 = vqmovn_high_s32(vqmovn_s32(vshrq_n_s32(vaddq_s32(v14, v13), 0xEuLL)), vshrq_n_s32(vaddq_s32(v15, v13), 0xEuLL));
      v29 = vqmovun_s16(v28);
      v30 = v29.u8[4];
      v31 = v29.u8[2];
      result = v29.u8[1];
      v32 = v29.u8[0];
      v33 = vext_s8(v29, *(int8x8_t *)v13.i8, 1uLL);
      v34 = vpmax_u8(vpmax_u8((uint8x8_t)v29, *(uint8x8_t *)v13.i8), *(uint8x8_t *)v13.i8);
      v35 = (int16x8_t)vqmovun_high_s16(v29, v28);
      v28.i16[0] = vmax_u8((uint8x8_t)vqtbl1_s8((int8x16_t)v35, (int8x8_t)-63741), v34).u16[0];
      v35.i16[0] = v32;
      v35.i16[1] = result;
      v35.i16[2] = v31;
      v35.i16[3] = v30;
      *(_DWORD *)v6 = vmovn_s16(v35).u32[0];
      *(_WORD *)(v6 + 4) = v33.i16[2];
      v6 += 6;
      *v7++ = v28.i16[0];
      v12 += 2;
    }
    while (v12 <= a4);
    v10 = a4 & 0xFFFFFFFE;
  }
  else
  {
    v10 = 0;
  }
  if (v10 < a4)
  {
    v36.i64[0] = 0x200000002000;
    v36.i64[1] = 0x200000002000;
    do
    {
      v37 = 0uLL;
      v38 = v9;
      if ((int)v8 >= 2)
      {
        v39 = 0;
        v40 = (4 * v10);
        v38 = v9;
        do
        {
          result = 4 * v40;
          v41 = *(_DWORD *)v38;
          v38 += 2;
          v37 = vmlal_s16(vmlal_s16(v37, vmovn_s32(*(int32x4_t *)(*(_QWORD *)(a6 + 8 * v39) + 4 * v40)), vdup_n_s16(v41)), vmovn_s32(*(int32x4_t *)(*(_QWORD *)(a6 + 8 * v39 + 8) + 4 * v40)), vdup_n_s16(HIWORD(v41)));
          v42 = v39 + 4;
          v39 += 2;
        }
        while (v42 <= v8);
      }
      if ((v8 & 1) != 0)
      {
        v43 = vld1_dup_s16(v38);
        v37 = vmlal_s16(v37, vmovn_s32(*(int32x4_t *)(*(_QWORD *)(a6 + 8 * ((int)v8 - 1)) + 4 * (4 * v10))), v43);
      }
      v44 = (int16x8_t)vshrq_n_s32(vaddq_s32(v37, v36), 0xEuLL);
      *(int16x4_t *)v44.i8 = vqmovn_s32((int32x4_t)v44);
      *(int8x8_t *)v44.i8 = vqmovun_s16(v44);
      *(_WORD *)v6 = v44.i16[0];
      *(_BYTE *)(v6 + 2) = v44.i8[2];
      v6 += 3;
      *(_BYTE *)v7 = vmax_u8((uint8x8_t)vdup_lane_s8(*(int8x8_t *)v44.i8, 3), vpmax_u8(vpmax_u8(*(uint8x8_t *)v44.i8, *(uint8x8_t *)v36.i8), *(uint8x8_t *)v36.i8)).u8[0];
      v7 = (_WORD *)((char *)v7 + 1);
      ++v10;
    }
    while (v10 < a4);
  }
  return result;
}

uint64_t resample_vertical<int,unsigned char,4,(AlphaStyle)3>(uint64_t result, double a2, double a3, int32x4_t a4, double a5, int32x4_t a6, uint8x8_t a7, int8x16_t a8, int32x4_t a9, uint64_t a10, uint64_t a11, int a12, uint64_t a13, uint64_t a14)
{
  int8x16_t *v14;
  _DWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int32x4_t v20;
  __int32 v21;
  __int32 v22;
  __int32 v23;
  __int32 v24;
  __int32 v25;
  __int32 v26;
  __int32 v27;
  __int32 v28;
  __int32 v29;
  __int32 v30;
  __int32 v31;
  __int32 v32;
  __int32 v33;
  __int32 v34;
  __int32 v35;
  __int32 v36;
  __int32 v37;
  __int32 v38;
  __int32 v39;
  const __int16 *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  int32x4_t *v45;
  unsigned int v46;
  int16x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int16x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  uint64_t v59;
  int32x4_t *v60;
  int16x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int16x8_t v75;
  int8x8_t v76;
  int16x8_t v77;
  int8x16_t v78;
  int32x4_t v79;
  unsigned __int32 v80;
  unsigned __int32 v81;
  unsigned __int32 v82;
  unsigned __int32 v83;
  unsigned int *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  int32x4_t v89;
  int32x4_t *v90;
  unsigned int v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  uint64_t v95;
  int32x4_t *v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int16x8_t v100;
  unint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  __int16 *v105;

  v14 = *(int8x16_t **)a13;
  v15 = *(_DWORD **)(a13 + 8);
  v16 = *(int *)(result + 4);
  v105 = (__int16 *)(result + 8);
  if (a12 >= 4)
  {
    v18 = 0;
    v101 = a12;
    v19 = 4;
    v20.i64[0] = 0x200000002000;
    v20.i64[1] = 0x200000002000;
    a4.i32[1] = -1;
    v102 = a12;
    do
    {
      v103 = v19;
      v104 = v18;
      if ((int)v16 >= 2)
      {
        v41 = 0;
        v21 = 0;
        v22 = 0;
        v23 = 0;
        v24 = 0;
        v25 = 0;
        v26 = 0;
        v27 = 0;
        LODWORD(result) = 0;
        v28 = 0;
        v29 = 0;
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = 0;
        v36 = 0;
        v37 = 0;
        v38 = 0;
        v39 = 0;
        v42 = (5 * (_DWORD)v18) & 0xFFFFFFFC;
        v40 = v105;
        do
        {
          v43 = (_QWORD *)(a14 + 8 * v41);
          v44 = *v43 + 4 * v42;
          a9 = *(int32x4_t *)(v44 + 64);
          v45 = (int32x4_t *)(v43[1] + 4 * v42);
          v46 = *(_DWORD *)v40;
          v40 += 2;
          v47 = vdup_n_s16(v46);
          v48.i64[0] = __PAIR64__(v37, v36);
          v48.i64[1] = __PAIR64__(v39, v38);
          v49.i64[0] = __PAIR64__(v33, v32);
          v49.i64[1] = __PAIR64__(v35, v34);
          v50.i64[0] = __PAIR64__(v29, v28);
          v50.i64[1] = __PAIR64__(v31, v30);
          v51.i64[0] = __PAIR64__(v22, v21);
          v51.i64[1] = __PAIR64__(v24, v23);
          v52 = vdup_n_s16(HIWORD(v46));
          v53 = vmlal_s16(vmlal_s16(v51, vmovn_s32(*(int32x4_t *)v44), v47), vmovn_s32(*v45), v52);
          v54.i64[0] = __PAIR64__(v26, v25);
          v54.i64[1] = __PAIR64__(result, v27);
          v24 = v53.i32[3];
          v23 = v53.i32[2];
          v22 = v53.i32[1];
          v55 = vmlal_s16(vmlal_s16(v54, vmovn_s32(*(int32x4_t *)(v44 + 16)), v47), vmovn_s32(v45[1]), v52);
          result = v55.u32[3];
          v27 = v55.i32[2];
          v26 = v55.i32[1];
          v21 = v53.i32[0];
          v56 = vmlal_s16(vmlal_s16(v50, vmovn_s32(*(int32x4_t *)(v44 + 32)), v47), vmovn_s32(v45[2]), v52);
          v31 = v56.i32[3];
          v30 = v56.i32[2];
          v25 = v55.i32[0];
          v29 = v56.i32[1];
          v57 = vmlal_s16(vmlal_s16(v49, vmovn_s32(*(int32x4_t *)(v44 + 48)), v47), vmovn_s32(v45[3]), v52);
          v35 = v57.i32[3];
          v28 = v56.i32[0];
          v34 = v57.i32[2];
          v33 = v57.i32[1];
          v58 = vmlal_s16(vmlal_s16(v48, vmovn_s32(a9), v47), vmovn_s32(v45[4]), v52);
          v39 = v58.i32[3];
          v38 = v58.i32[2];
          v37 = v58.i32[1];
          v32 = v57.i32[0];
          v36 = v58.i32[0];
          v59 = v41 + 4;
          v41 += 2;
        }
        while (v59 <= v16);
      }
      else
      {
        v21 = 0;
        v22 = 0;
        v23 = 0;
        v24 = 0;
        v25 = 0;
        v26 = 0;
        v27 = 0;
        result = 0;
        v28 = 0;
        v29 = 0;
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = 0;
        v36 = 0;
        v37 = 0;
        v38 = 0;
        v39 = 0;
        v40 = v105;
      }
      if ((v16 & 1) != 0)
      {
        v60 = (int32x4_t *)(*(_QWORD *)(a14 + 8 * ((int)v16 - 1)) + 4 * ((5 * (_DWORD)v104) & 0xFFFFFFFC));
        v61 = vld1_dup_s16(v40);
        v62.i64[0] = __PAIR64__(v22, v21);
        v62.i64[1] = __PAIR64__(v24, v23);
        v63 = vmlal_s16(v62, vmovn_s32(*v60), v61);
        v24 = v63.i32[3];
        v23 = v63.i32[2];
        v22 = v63.i32[1];
        v64.i64[0] = __PAIR64__(v26, v25);
        v64.i64[1] = __PAIR64__(result, v27);
        v65 = vmlal_s16(v64, vmovn_s32(v60[1]), v61);
        result = v65.u32[3];
        v27 = v65.i32[2];
        v26 = v65.i32[1];
        v66.i64[0] = __PAIR64__(v29, v28);
        v66.i64[1] = __PAIR64__(v31, v30);
        v67 = vmlal_s16(v66, vmovn_s32(v60[2]), v61);
        v31 = v67.i32[3];
        v30 = v67.i32[2];
        v29 = v67.i32[1];
        v68.i64[0] = __PAIR64__(v33, v32);
        v21 = v63.i32[0];
        v68.i64[1] = __PAIR64__(v35, v34);
        v69 = vmlal_s16(v68, vmovn_s32(v60[3]), v61);
        v35 = v69.i32[3];
        v34 = v69.i32[2];
        v33 = v69.i32[1];
        v25 = v65.i32[0];
        v70.i64[0] = __PAIR64__(v37, v36);
        v70.i64[1] = __PAIR64__(v39, v38);
        v28 = v67.i32[0];
        v71 = vmlal_s16(v70, vmovn_s32(v60[4]), v61);
        v39 = v71.i32[3];
        v32 = v69.i32[0];
        v38 = v71.i32[2];
        v37 = v71.i32[1];
        v36 = v71.i32[0];
      }
      v72.i64[0] = __PAIR64__(v26, v25);
      v18 = v104 + 4;
      v72.i64[1] = __PAIR64__(result, v27);
      v73.i64[0] = __PAIR64__(v22, v21);
      v73.i64[1] = __PAIR64__(v24, v23);
      v74.i64[0] = __PAIR64__(v33, v32);
      v74.i64[1] = __PAIR64__(v35, v34);
      v75 = vqmovn_high_s32(vqmovn_s32(vshrq_n_s32(vaddq_s32(v73, v20), 0xEuLL)), vshrq_n_s32(vaddq_s32(v72, v20), 0xEuLL));
      v72.i64[0] = __PAIR64__(v29, v28);
      v72.i64[1] = __PAIR64__(v31, v30);
      v76 = vqmovun_s16(v75);
      v75.i64[0] = __PAIR64__(v37, v36);
      a8 = vqmovun_high_s16(v76, vqmovn_high_s32(vqmovn_s32(vshrq_n_s32(vaddq_s32(v72, v20), 0xEuLL)), vshrq_n_s32(vaddq_s32(v74, v20), 0xEuLL)));
      v75.i64[1] = __PAIR64__(v39, v38);
      v77 = (int16x8_t)vshrq_n_s32(vaddq_s32((int32x4_t)v75, v20), 0xEuLL);
      *(int16x4_t *)v77.i8 = vqmovn_s32((int32x4_t)v77);
      *(int8x8_t *)a9.i8 = vqmovun_s16(v77);
      v78 = vqtbl2q_s8(*(int8x16x2_t *)a8.i8, (int8x16_t)xmmword_185004810);
      a6 = (int32x4_t)vextq_s8(v78, v78, 8uLL);
      *(uint8x8_t *)a6.i8 = vpmax_u8(vpmax_u8(*(uint8x8_t *)v78.i8, *(uint8x8_t *)a6.i8), *(uint8x8_t *)v20.i8);
      a7 = (uint8x8_t)vqtbl1_s8(a8, (int8x8_t)-15857404);
      a7.i8[3] = a9.i8[3];
      *v14++ = v78;
      *v15++ = vmax_u8(a7, *(uint8x8_t *)a6.i8).u32[0];
      v19 = v103 + 4;
      a12 = v102;
    }
    while (v103 + 4 <= v101);
    v17 = v102 & 0x7FFFFFFC;
  }
  else
  {
    v17 = 0;
  }
  if (v17 < a12)
  {
    v79.i64[0] = 0x200000002000;
    v79.i64[1] = 0x200000002000;
    do
    {
      if ((int)v16 >= 2)
      {
        v85 = 0;
        v80 = 0;
        v81 = 0;
        v82 = 0;
        v83 = 0;
        LODWORD(result) = 0;
        v84 = (unsigned int *)v105;
        v86 = (5 * v17);
        do
        {
          v87 = (_QWORD *)(a14 + 8 * v85);
          v88 = *v87 + 4 * v86;
          v89 = *(int32x4_t *)v88;
          a4.i32[0] = *(_DWORD *)(v88 + 16);
          v90 = (int32x4_t *)(v87[1] + 4 * v86);
          a6.i32[0] = v90[1].i32[0];
          *(int16x4_t *)a6.i8 = vmovn_s32(a6);
          v91 = *v84++;
          a7 = (uint8x8_t)vdup_n_s16(v91);
          a8.i32[0] = v91;
          a9.i32[0] = result;
          v92 = vmlal_s16(a9, vmovn_s32(a4), *(int16x4_t *)a8.i8);
          v93.i64[0] = __PAIR64__(v81, v80);
          v93.i64[1] = __PAIR64__(v83, v82);
          v94 = vmlal_s16(v93, vmovn_s32(v89), (int16x4_t)a7);
          *(int16x4_t *)v89.i8 = vdup_n_s16(HIWORD(v91));
          a4 = vmlal_s16(v94, vmovn_s32(*v90), *(int16x4_t *)v89.i8);
          v83 = a4.u32[3];
          v89.i32[0] = HIWORD(v91);
          v82 = a4.u32[2];
          v81 = a4.u32[1];
          v80 = a4.i32[0];
          a9 = vmlal_s16(v92, *(int16x4_t *)a6.i8, *(int16x4_t *)v89.i8);
          result = a9.u32[0];
          v95 = v85 + 4;
          v85 += 2;
        }
        while (v95 <= v16);
      }
      else
      {
        v80 = 0;
        v81 = 0;
        v82 = 0;
        v83 = 0;
        result = 0;
        v84 = (unsigned int *)v105;
      }
      if ((v16 & 1) != 0)
      {
        v96 = (int32x4_t *)(*(_QWORD *)(a14 + 8 * ((int)v16 - 1)) + 4 * (5 * v17));
        v97 = *v96;
        a4.i32[0] = v96[1].i32[0];
        *(int16x4_t *)a4.i8 = vmovn_s32(a4);
        *(int16x4_t *)v97.i8 = vmovn_s32(*v96);
        v98.i64[0] = __PAIR64__(v81, v80);
        v98.i64[1] = __PAIR64__(v83, v82);
        a7.i32[0] = *(unsigned __int16 *)v84;
        a6 = vmlal_s16(v98, *(int16x4_t *)v97.i8, vdup_n_s16(a7.u32[0]));
        v83 = a6.u32[3];
        v82 = a6.u32[2];
        v81 = a6.u32[1];
        v80 = a6.i32[0];
        v97.i32[0] = result;
        result = vmlal_s16(v97, *(int16x4_t *)a4.i8, (int16x4_t)a7).u32[0];
      }
      v99.i64[0] = __PAIR64__(v81, v80);
      v99.i64[1] = __PAIR64__(v83, v82);
      a4.i32[0] = result;
      a4 = vshrq_n_s32(vaddq_s32(a4, v79), 0xEuLL);
      v100 = vqmovn_high_s32(vqmovn_s32(vshrq_n_s32(vaddq_s32(v99, v79), 0xEuLL)), a4);
      *(int8x8_t *)v100.i8 = vqmovun_s16(v100);
      *(uint8x8_t *)a4.i8 = vpmax_u8(vpmax_u8(*(uint8x8_t *)v100.i8, *(uint8x8_t *)v79.i8), *(uint8x8_t *)v79.i8);
      v14->i32[0] = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)v100, (int8x16_t)v79)).u32[0];
      v14 = (int8x16_t *)((char *)v14 + 4);
      *(_BYTE *)v15 = vmax_u8((uint8x8_t)vdup_lane_s8(*(int8x8_t *)v100.i8, 4), *(uint8x8_t *)a4.i8).u8[0];
      v15 = (_DWORD *)((char *)v15 + 1);
      ++v17;
    }
    while (v17 < a12);
  }
  return result;
}

int32x4_t *resample_vertical<int,unsigned short,1,(AlphaStyle)0>(int32x4_t *result, double a2, double a3, __n128 a4, int32x4_t a5, double a6, int32x4_t a7, int32x4_t a8, uint64_t a9, uint64_t a10, int a11, __n128 **a12, uint64_t a13)
{
  __n128 *v13;
  uint64_t v14;
  const __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  const __int16 *v22;
  uint64_t v23;
  _QWORD *v24;
  int32x4_t *v25;
  unsigned int v26;
  int16x4_t v27;
  int32x4_t v28;
  int16x4_t v29;
  int32x4_t v30;
  uint64_t v31;
  int32x4_t *v32;
  int32x4_t v33;
  uint64_t v34;
  int32x4_t v35;
  int32x4_t v36;
  uint64_t v37;
  const __int16 *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  int16x4_t v42;
  uint64_t v43;
  int16x4_t v44;
  int32x4_t v45;
  unsigned __int32 *v46;
  uint64_t v47;
  _QWORD *v48;
  unsigned __int32 v49;
  uint64_t v50;

  v13 = *a12;
  v14 = result->i32[1];
  v15 = &result->i16[4];
  if (a11 >= 8)
  {
    v17 = 0;
    v18 = 8;
    v19.i64[0] = 0x200000002000;
    v19.i64[1] = 0x200000002000;
    do
    {
      v20 = 0uLL;
      v21 = 0uLL;
      v22 = v15;
      if ((int)v14 >= 2)
      {
        v23 = 0;
        v22 = v15;
        do
        {
          v24 = (_QWORD *)(a13 + 8 * v23);
          result = (int32x4_t *)(*v24 + 4 * v17);
          v25 = (int32x4_t *)(v24[1] + 4 * v17);
          v26 = *(_DWORD *)v22;
          v22 += 2;
          v27 = vdup_n_s16(v26);
          *(int8x8_t *)a7.i8 = veor_s8((int8x8_t)vmovn_s32(result[1]), (int8x8_t)0x8000800080008000);
          v28 = vshll_n_s16(v27, 0xFuLL);
          *(int8x8_t *)a8.i8 = veor_s8((int8x8_t)vmovn_s32(*v25), (int8x8_t)0x8000800080008000);
          v29 = vdup_n_s16(HIWORD(v26));
          v30 = vshll_n_s16(v29, 0xFuLL);
          v21 = vaddq_s32(vmlal_s16(vaddq_s32(vmlal_s16(v21, *(int16x4_t *)a7.i8, v27), v28), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v25[1]), (int8x8_t)0x8000800080008000), v29), v30);
          v20 = vaddq_s32(vmlal_s16(vaddq_s32(vmlal_s16(v20, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*result), (int8x8_t)0x8000800080008000), v27), v28), *(int16x4_t *)a8.i8, v29), v30);
          v31 = v23 + 4;
          v23 += 2;
        }
        while (v31 <= v14);
      }
      if ((v14 & 1) != 0)
      {
        v32 = (int32x4_t *)(*(_QWORD *)(a13 + 8 * ((int)v14 - 1)) + 4 * v17);
        *(int16x4_t *)a8.i8 = vld1_dup_s16(v22);
        *(int8x8_t *)a7.i8 = veor_s8((int8x8_t)vmovn_s32(v32[1]), (int8x8_t)0x8000800080008000);
        v33 = vshll_n_s16(*(int16x4_t *)a8.i8, 0xFuLL);
        v21 = vaddq_s32(vmlal_s16(v21, *(int16x4_t *)a7.i8, *(int16x4_t *)a8.i8), v33);
        v20 = vaddq_s32(vmlal_s16(v20, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v32), (int8x8_t)0x8000800080008000), *(int16x4_t *)a8.i8), v33);
      }
      v17 += 8;
      a5 = vshrq_n_s32(vaddq_s32(v21, v19), 0xEuLL);
      a4 = (__n128)vqmovun_high_s32(vqmovun_s32(vshrq_n_s32(vaddq_s32(v20, v19), 0xEuLL)), a5);
      *v13++ = a4;
      v18 += 8;
    }
    while (v18 <= a11);
    v16 = a11 & 0xFFFFFFF8;
  }
  else
  {
    v16 = 0;
  }
  v34 = v16 | 4;
  if ((int)(v16 | 4) <= a11)
  {
    v35.i64[0] = 0x200000002000;
    v35.i64[1] = 0x200000002000;
    do
    {
      v36 = 0uLL;
      v37 = 4 * v16;
      v38 = v15;
      if ((int)v14 >= 2)
      {
        v39 = 0;
        v38 = v15;
        do
        {
          v40 = a13 + 8 * v39;
          result = *(int32x4_t **)v40;
          v41 = *(_DWORD *)v38;
          v38 += 2;
          *(int16x4_t *)a7.i8 = vdup_n_s16(v41);
          a8 = vshll_n_s16(*(int16x4_t *)a7.i8, 0xFuLL);
          v42 = vdup_n_s16(HIWORD(v41));
          a5 = vaddq_s32(a8, vshll_n_s16(v42, 0xFuLL));
          v36 = vaddq_s32(vmlal_s16(vmlal_s16(v36, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*(int32x4_t *)(*(_QWORD *)v40 + v37)), (int8x8_t)0x8000800080008000), *(int16x4_t *)a7.i8), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*(int32x4_t *)(*(_QWORD *)(v40 + 8) + v37)), (int8x8_t)0x8000800080008000), v42), a5);
          v43 = v39 + 4;
          v39 += 2;
        }
        while (v43 <= v14);
      }
      if ((v14 & 1) != 0)
      {
        v44 = vld1_dup_s16(v38);
        *(int8x8_t *)a5.i8 = veor_s8((int8x8_t)vmovn_s32(*(int32x4_t *)(*(_QWORD *)(a13 + 8 * ((int)v14 - 1)) + v37)), (int8x8_t)0x8000800080008000);
        a7 = vshll_n_s16(v44, 0xFuLL);
        v36 = vaddq_s32(vmlal_s16(v36, *(int16x4_t *)a5.i8, v44), a7);
      }
      a4.n128_u64[0] = (unint64_t)vqmovun_s32(vshrq_n_s32(vaddq_s32(v36, v35), 0xEuLL));
      v13->n128_u64[0] = a4.n128_u64[0];
      v13 = (__n128 *)((char *)v13 + 8);
      v16 = v34;
      v34 += 4;
    }
    while ((int)v34 <= a11);
  }
  for (; (int)v16 < a11; ++v16)
  {
    if ((int)v14 >= 2)
    {
      v47 = 0;
      v45 = 0uLL;
      v46 = (unsigned __int32 *)v15;
      do
      {
        v48 = (_QWORD *)(a13 + 8 * v47);
        v49 = *v46++;
        a4.n128_u32[0] = *(unsigned __int16 *)(*v48 + 4 * v16) ^ 0xFFFF8000;
        result = (int32x4_t *)HIWORD(v49);
        a5.i32[0] = v49;
        a7.i32[0] = *(unsigned __int16 *)(v48[1] + 4 * v16) ^ 0xFFFF8000;
        a8.i32[0] = HIWORD(v49);
        v45 = vmlal_s16(vmlal_s16(v45, (int16x4_t)a4.n128_u64[0], *(int16x4_t *)a5.i8), *(int16x4_t *)a7.i8, *(int16x4_t *)a8.i8);
        a4.n128_u64[0] = (unint64_t)vadd_s32(vshl_n_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a5.i8, 0x10uLL), 0x10uLL), 0xFuLL), vshl_n_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a8.i8, 0x10uLL), 0x10uLL), 0xFuLL));
        *(int32x2_t *)v45.i8 = vadd_s32(*(int32x2_t *)v45.i8, (int32x2_t)a4.n128_u64[0]);
        v50 = v47 + 4;
        v47 += 2;
      }
      while (v50 <= v14);
    }
    else
    {
      v45 = 0uLL;
      v46 = (unsigned __int32 *)v15;
    }
    if ((v14 & 1) != 0)
    {
      a4.n128_u32[0] = *(unsigned __int16 *)(*(_QWORD *)(a13 + 8 * ((int)v14 - 1)) + 4 * v16) ^ 0xFFFF8000;
      a5.i16[0] = *(_WORD *)v46;
      v45 = vmlal_s16(v45, (int16x4_t)a4.n128_u64[0], *(int16x4_t *)a5.i8);
      *(int32x2_t *)v45.i8 = vadd_s32(*(int32x2_t *)v45.i8, vshl_n_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a5.i8, 0x10uLL), 0x10uLL), 0xFuLL));
    }
    *(int32x2_t *)v45.i8 = vadd_s32(*(int32x2_t *)v45.i8, (int32x2_t)0x200000002000);
    v13->n128_u16[0] = vqmovun_s32(vshrq_n_s32(v45, 0xEuLL)).u16[0];
    v13 = (__n128 *)((char *)v13 + 2);
  }
  return result;
}

uint64_t resample_vertical<int,unsigned short,3,(AlphaStyle)0>(uint64_t result, double a2, double a3, double a4, double a5, int32x4_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t *a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  const __int16 *v13;
  int v14;
  int v15;
  unint64_t v16;
  int32x4_t v17;
  __int32 v18;
  __int32 v19;
  __int32 v20;
  __int32 v21;
  unsigned __int32 v22;
  unsigned __int32 v23;
  unsigned __int32 v24;
  __int32 v25;
  __int32 v26;
  __int32 v27;
  __int32 v28;
  const __int16 *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  int32x4_t *v33;
  int32x4_t *v34;
  unsigned int v35;
  int16x4_t v36;
  int32x4_t v37;
  int16x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  uint64_t v45;
  int32x4_t *v46;
  int16x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int16x8_t v57;
  int32x4_t v58;
  int32x4_t v59;
  const __int16 *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  int32x4_t v65;
  uint64_t v66;
  int32x4_t v67;
  unsigned int v68;
  int8x8_t v69;
  int16x4_t v70;
  uint64_t v71;
  uint64_t v72;
  int32x4_t v73;
  int16x4_t v74;

  v11 = *a10;
  v12 = *(int *)(result + 4);
  v13 = (const __int16 *)(result + 8);
  if (a9 >= 4)
  {
    v15 = 0;
    v16 = 4;
    v17.i64[0] = 0x200000002000;
    v17.i64[1] = 0x200000002000;
    do
    {
      if ((int)v12 >= 2)
      {
        v30 = 0;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v21 = 0;
        v22 = 0;
        v23 = 0;
        v24 = 0;
        LODWORD(result) = 0;
        v25 = 0;
        v26 = 0;
        v27 = 0;
        v28 = 0;
        v31 = (3 * v15) & 0xFFFFFFFC;
        v29 = v13;
        do
        {
          v32 = (_QWORD *)(a11 + 8 * v30);
          v33 = (int32x4_t *)(*v32 + 4 * v31);
          v34 = (int32x4_t *)(v32[1] + 4 * v31);
          v35 = *(_DWORD *)v29;
          v29 += 2;
          v36 = vdup_n_s16(v35);
          v37 = vshll_n_s16(v36, 0xFuLL);
          v38 = vdup_n_s16(HIWORD(v35));
          v39.i64[0] = __PAIR64__(v26, v25);
          v39.i64[1] = __PAIR64__(v28, v27);
          v40 = vshll_n_s16(v38, 0xFuLL);
          v41.i64[0] = __PAIR64__(v23, v22);
          v41.i64[1] = __PAIR64__(result, v24);
          v42.i64[0] = __PAIR64__(v19, v18);
          v42.i64[1] = __PAIR64__(v21, v20);
          v43 = vmlal_s16(vaddq_s32(vmlal_s16(vaddq_s32(v37, v42), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v33), (int8x8_t)0x8000800080008000), v36), v40), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v34), (int8x8_t)0x8000800080008000), v38);
          v21 = v43.i32[3];
          v20 = v43.i32[2];
          v19 = v43.i32[1];
          a6 = vmlal_s16(vaddq_s32(vmlal_s16(vaddq_s32(v37, v41), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v33[1]), (int8x8_t)0x8000800080008000), v36), v40), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v34[1]), (int8x8_t)0x8000800080008000), v38);
          result = a6.u32[3];
          v18 = v43.i32[0];
          v24 = a6.u32[2];
          v23 = a6.u32[1];
          v44 = vmlal_s16(vaddq_s32(vmlal_s16(vaddq_s32(v37, v39), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v33[2]), (int8x8_t)0x8000800080008000), v36), v40), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v34[2]), (int8x8_t)0x8000800080008000), v38);
          v28 = v44.i32[3];
          v27 = v44.i32[2];
          v26 = v44.i32[1];
          v22 = a6.i32[0];
          v25 = v44.i32[0];
          v45 = v30 + 4;
          v30 += 2;
        }
        while (v45 <= v12);
      }
      else
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v21 = 0;
        v22 = 0;
        v23 = 0;
        v24 = 0;
        result = 0;
        v25 = 0;
        v26 = 0;
        v27 = 0;
        v28 = 0;
        v29 = v13;
      }
      if ((v12 & 1) != 0)
      {
        v46 = (int32x4_t *)(*(_QWORD *)(a11 + 8 * ((int)v12 - 1)) + 4 * ((3 * v15) & 0xFFFFFFFC));
        v47 = vld1_dup_s16(v29);
        *(int8x8_t *)a6.i8 = veor_s8((int8x8_t)vmovn_s32(v46[2]), (int8x8_t)0x8000800080008000);
        v48.i64[0] = __PAIR64__(v26, v25);
        v48.i64[1] = __PAIR64__(v28, v27);
        v49 = vshll_n_s16(v47, 0xFuLL);
        v50.i64[0] = __PAIR64__(v23, v22);
        v50.i64[1] = __PAIR64__(result, v24);
        v51.i64[0] = __PAIR64__(v19, v18);
        v51.i64[1] = __PAIR64__(v21, v20);
        v52 = vmlal_s16(vaddq_s32(v49, v51), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v46), (int8x8_t)0x8000800080008000), v47);
        v21 = v52.i32[3];
        v20 = v52.i32[2];
        v19 = v52.i32[1];
        v53 = vmlal_s16(vaddq_s32(v49, v50), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v46[1]), (int8x8_t)0x8000800080008000), v47);
        result = v53.u32[3];
        v24 = v53.u32[2];
        v18 = v52.i32[0];
        v23 = v53.u32[1];
        v54 = vmlal_s16(vaddq_s32(v49, v48), *(int16x4_t *)a6.i8, v47);
        v28 = v54.i32[3];
        v22 = v53.i32[0];
        v27 = v54.i32[2];
        v26 = v54.i32[1];
        v25 = v54.i32[0];
      }
      v15 += 4;
      v55.i64[0] = __PAIR64__(v19, v18);
      v55.i64[1] = __PAIR64__(v21, v20);
      v56.i64[0] = __PAIR64__(v23, v22);
      v56.i64[1] = __PAIR64__(result, v24);
      v57 = vqmovun_high_s32(vqmovun_s32(vshrq_n_s32(vaddq_s32(v55, v17), 0xEuLL)), vshrq_n_s32(vaddq_s32(v56, v17), 0xEuLL));
      v56.i64[0] = __PAIR64__(v26, v25);
      v56.i64[1] = __PAIR64__(v28, v27);
      *(int16x8_t *)v11 = v57;
      *(int16x4_t *)(v11 + 16) = vqmovun_s32(vshrq_n_s32(vaddq_s32(v56, v17), 0xEuLL));
      v11 += 24;
      v16 += 4;
    }
    while (v16 <= a9);
    v14 = a9 & 0x7FFFFFFC;
  }
  else
  {
    v14 = 0;
  }
  if (v14 < a9)
  {
    v58.i64[0] = 0x200000002000;
    v58.i64[1] = 0x200000002000;
    do
    {
      v59 = 0uLL;
      v60 = v13;
      if ((int)v12 >= 2)
      {
        v61 = 0;
        v62 = (3 * v14);
        v60 = v13;
        do
        {
          v63 = (_QWORD *)(a11 + 8 * v61);
          v64 = *v63 + 4 * v62;
          v65.i64[0] = *(_QWORD *)v64;
          a6.i32[0] = *(_DWORD *)(v64 + 8);
          v66 = v63[1] + 4 * v62;
          v67.i64[0] = *(_QWORD *)v66;
          v65.i64[1] = a6.i64[0];
          a6.i32[0] = *(_DWORD *)(v66 + 8);
          v67.i64[1] = a6.i64[0];
          v68 = *(_DWORD *)v60;
          v60 += 2;
          v69 = (int8x8_t)vmovn_s32(v67);
          *(int16x4_t *)v67.i8 = vdup_n_s16(v68);
          *(int8x8_t *)a6.i8 = veor_s8(v69, (int8x8_t)0x8000800080008000);
          v70 = vdup_n_s16(HIWORD(v68));
          v59 = vaddq_s32(vmlal_s16(vmlal_s16(v59, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v65), (int8x8_t)0x8000800080008000), *(int16x4_t *)v67.i8), *(int16x4_t *)a6.i8, v70), vaddq_s32(vshll_n_s16(*(int16x4_t *)v67.i8, 0xFuLL), vshll_n_s16(v70, 0xFuLL)));
          v71 = v61 + 4;
          v61 += 2;
        }
        while (v71 <= v12);
      }
      if ((v12 & 1) != 0)
      {
        v72 = *(_QWORD *)(a11 + 8 * ((int)v12 - 1)) + 4 * (3 * v14);
        v73.i64[0] = *(_QWORD *)v72;
        a6.i32[0] = *(_DWORD *)(v72 + 8);
        v73.i64[1] = a6.i64[0];
        *(int16x4_t *)a6.i8 = vld1_dup_s16(v60);
        v59 = vaddq_s32(vmlal_s16(v59, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v73), (int8x8_t)0x8000800080008000), *(int16x4_t *)a6.i8), vshll_n_s16(*(int16x4_t *)a6.i8, 0xFuLL));
      }
      v74 = vqmovun_s32(vshrq_n_s32(vaddq_s32(v59, v58), 0xEuLL));
      *(_DWORD *)v11 = v74.i32[0];
      *(_WORD *)(v11 + 4) = v74.i16[2];
      v11 += 6;
      ++v14;
    }
    while (v14 < a9);
  }
  return result;
}

uint64_t resample_vertical<int,unsigned short,4,(AlphaStyle)0>(uint64_t result, uint64_t a2, uint64_t a3, int a4, int16x8_t **a5, uint64_t a6)
{
  int16x8_t *v6;
  uint64_t v7;
  const __int16 *v8;
  signed int v9;
  int v10;
  unint64_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  const __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int32x4_t *v19;
  int32x4_t *v20;
  unsigned int v21;
  int16x4_t v22;
  int32x4_t v23;
  int16x4_t v24;
  int32x4_t v25;
  int32x4_t *v26;
  int16x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  const __int16 *v31;
  uint64_t v32;
  uint64_t *v33;
  unsigned int v34;
  int16x4_t v35;
  int16x4_t v36;
  uint64_t v37;
  int16x4_t v38;

  v6 = *a5;
  v7 = *(int *)(result + 4);
  v8 = (const __int16 *)(result + 8);
  if (a4 >= 2)
  {
    v10 = 0;
    v11 = 2;
    v12.i64[0] = 0x200000002000;
    v12.i64[1] = 0x200000002000;
    do
    {
      v13 = 0uLL;
      v14 = 0uLL;
      v15 = v8;
      if ((int)v7 >= 2)
      {
        v16 = 0;
        v17 = (4 * v10) & 0xFFFFFFF8;
        v15 = v8;
        do
        {
          v18 = (_QWORD *)(a6 + 8 * v16);
          v19 = (int32x4_t *)(*v18 + 4 * v17);
          v20 = (int32x4_t *)(v18[1] + 4 * v17);
          v21 = *(_DWORD *)v15;
          v15 += 2;
          v22 = vdup_n_s16(v21);
          v23 = vshll_n_s16(v22, 0xFuLL);
          v24 = vdup_n_s16(HIWORD(v21));
          v25 = vshll_n_s16(v24, 0xFuLL);
          v14 = vaddq_s32(vmlal_s16(vaddq_s32(vmlal_s16(v14, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v19[1]), (int8x8_t)0x8000800080008000), v22), v23), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v20[1]), (int8x8_t)0x8000800080008000), v24), v25);
          v13 = vaddq_s32(vmlal_s16(vaddq_s32(vmlal_s16(v13, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v19), (int8x8_t)0x8000800080008000), v22), v23), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v20), (int8x8_t)0x8000800080008000), v24), v25);
          result = v16 + 4;
          v16 += 2;
        }
        while (result <= v7);
      }
      if ((v7 & 1) != 0)
      {
        v26 = (int32x4_t *)(*(_QWORD *)(a6 + 8 * ((int)v7 - 1)) + 4 * ((4 * v10) & 0xFFFFFFF8));
        v27 = vld1_dup_s16(v15);
        v28 = vshll_n_s16(v27, 0xFuLL);
        v14 = vaddq_s32(vmlal_s16(v14, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v26[1]), (int8x8_t)0x8000800080008000), v27), v28);
        v13 = vaddq_s32(vmlal_s16(v13, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v26), (int8x8_t)0x8000800080008000), v27), v28);
      }
      v10 += 2;
      *v6++ = vqmovun_high_s32(vqmovun_s32(vshrq_n_s32(vaddq_s32(v13, v12), 0xEuLL)), vshrq_n_s32(vaddq_s32(v14, v12), 0xEuLL));
      v11 += 2;
    }
    while (v11 <= a4);
    v9 = a4 & 0xFFFFFFFE;
  }
  else
  {
    v9 = 0;
  }
  if (v9 < a4)
  {
    v29.i64[0] = 0x200000002000;
    v29.i64[1] = 0x200000002000;
    do
    {
      v30 = 0uLL;
      v31 = v8;
      if ((int)v7 >= 2)
      {
        v32 = 0;
        v31 = v8;
        do
        {
          v33 = (uint64_t *)(a6 + 8 * v32);
          result = *v33;
          v34 = *(_DWORD *)v31;
          v31 += 2;
          v35 = vdup_n_s16(v34);
          v36 = vdup_n_s16(HIWORD(v34));
          v30 = vaddq_s32(vmlal_s16(vmlal_s16(v30, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*(int32x4_t *)(*v33 + 4 * (4 * v9))), (int8x8_t)0x8000800080008000), v35), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*(int32x4_t *)(v33[1] + 4 * (4 * v9))), (int8x8_t)0x8000800080008000), v36), vaddq_s32(vshll_n_s16(v35, 0xFuLL), vshll_n_s16(v36, 0xFuLL)));
          v37 = v32 + 4;
          v32 += 2;
        }
        while (v37 <= v7);
      }
      if ((v7 & 1) != 0)
      {
        v38 = vld1_dup_s16(v31);
        v30 = vaddq_s32(vmlal_s16(v30, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*(int32x4_t *)(*(_QWORD *)(a6 + 8 * ((int)v7 - 1))+ 4 * (4 * v9))), (int8x8_t)0x8000800080008000), v38), vshll_n_s16(v38, 0xFuLL));
      }
      *(int16x4_t *)v6->i8 = vqmovun_s32(vshrq_n_s32(vaddq_s32(v30, v29), 0xEuLL));
      v6 = (int16x8_t *)((char *)v6 + 8);
      ++v9;
    }
    while (v9 < a4);
  }
  return result;
}

uint64_t resample_vertical<int,unsigned short,2,(AlphaStyle)1>(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint16x8_t **a5, uint64_t a6)
{
  uint16x8_t *v6;
  uint64_t v7;
  __int16 *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  const __int16 *v15;
  uint64_t v16;
  _QWORD *v17;
  int32x4_t *v18;
  int32x4_t *v19;
  unsigned int v20;
  int16x4_t v21;
  int32x4_t v22;
  int16x4_t v23;
  int32x4_t v24;
  int32x4_t *v25;
  int16x4_t v26;
  int32x4_t v27;
  int16x4_t v28;
  int32x4_t v29;
  int16x4_t v30;
  int32x4_t v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  uint16x4_t v38;

  v6 = *a5;
  v7 = *(int *)(result + 4);
  v8 = (__int16 *)(result + 8);
  if (a4 >= 4)
  {
    v10 = 0;
    v11 = 4;
    v12.i64[0] = 0x200000002000;
    v12.i64[1] = 0x200000002000;
    do
    {
      v13 = 0uLL;
      v14 = 0uLL;
      v15 = v8;
      if ((int)v7 >= 2)
      {
        v16 = 0;
        v15 = v8;
        do
        {
          v17 = (_QWORD *)(a6 + 8 * v16);
          v18 = (int32x4_t *)(*v17 + 8 * v10);
          v19 = (int32x4_t *)(v17[1] + 8 * v10);
          v20 = *(_DWORD *)v15;
          v15 += 2;
          v21 = vdup_n_s16(v20);
          v22 = vshll_n_s16(v21, 0xFuLL);
          v23 = vdup_n_s16(HIWORD(v20));
          v24 = vshll_n_s16(v23, 0xFuLL);
          v14 = vaddq_s32(vmlal_s16(vaddq_s32(vmlal_s16(v14, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v18[1]), (int8x8_t)0x8000800080008000), v21), v22), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v19[1]), (int8x8_t)0x8000800080008000), v23), v24);
          v13 = vaddq_s32(vmlal_s16(vaddq_s32(vmlal_s16(v13, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v18), (int8x8_t)0x8000800080008000), v21), v22), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v19), (int8x8_t)0x8000800080008000), v23), v24);
          result = v16 + 4;
          v16 += 2;
        }
        while (result <= v7);
      }
      if ((v7 & 1) != 0)
      {
        v25 = (int32x4_t *)(*(_QWORD *)(a6 + 8 * ((int)v7 - 1)) + 8 * v10);
        v26 = vld1_dup_s16(v15);
        v27 = vshll_n_s16(v26, 0xFuLL);
        v14 = vaddq_s32(vmlal_s16(v14, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v25[1]), (int8x8_t)0x8000800080008000), v26), v27);
        v13 = vaddq_s32(vmlal_s16(v13, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v25), (int8x8_t)0x8000800080008000), v26), v27);
      }
      v10 += 4;
      v28 = vqmovun_s32(vshrq_n_s32(vaddq_s32(v13, v12), 0xEuLL));
      v29 = vshrq_n_s32(vaddq_s32(v14, v12), 0xEuLL);
      v30 = vqmovun_s32(v29);
      *v6++ = vmaxq_u16((uint16x8_t)vqmovun_high_s32(v28, v29), (uint16x8_t)vmovl_u16(vmax_u16((uint16x4_t)vuzp1_s16(v28, v30), (uint16x4_t)vuzp2_s16(v28, v30))));
      v11 += 4;
    }
    while (v11 <= a4);
    v9 = a4 & 0x7FFFFFFC;
  }
  else
  {
    v9 = 0;
  }
  for (; v9 < a4; ++v9)
  {
    if ((int)v7 >= 2)
    {
      v33 = 0;
      v31 = 0uLL;
      v32 = (unsigned int *)v8;
      do
      {
        v34 = (uint64_t *)(a6 + 8 * v33);
        result = *v34;
        v35 = *v32++;
        v31 = vmlal_s16(vmlal_s16(v31, vuzp1_s16((int16x4_t)veor_s8(*(int8x8_t *)(*v34 + 4 * (2 * v9)), (int8x8_t)0x800000008000), (int16x4_t)0x200000002000), vdup_n_s16(v35)), vuzp1_s16((int16x4_t)veor_s8(*(int8x8_t *)(v34[1] + 4 * (2 * v9)), (int8x8_t)0x800000008000), (int16x4_t)0x200000002000), vdup_n_s16(HIWORD(v35)));
        *(int32x2_t *)v31.i8 = vadd_s32(*(int32x2_t *)v31.i8, vadd_s32(vshl_n_s32(vshr_n_s32(vshl_n_s32(vdup_n_s32(v35), 0x10uLL), 0x10uLL), 0xFuLL), vshl_n_s32(vshr_n_s32(vshl_n_s32(vdup_n_s32(HIWORD(v35)), 0x10uLL), 0x10uLL), 0xFuLL)));
        v36 = v33 + 4;
        v33 += 2;
      }
      while (v36 <= v7);
    }
    else
    {
      v31 = 0uLL;
      v32 = (unsigned int *)v8;
    }
    if ((v7 & 1) != 0)
    {
      v37 = *(unsigned __int16 *)v32;
      v31 = vmlal_s16(v31, vuzp1_s16((int16x4_t)veor_s8(*(int8x8_t *)(*(_QWORD *)(a6 + 8 * ((int)v7 - 1)) + 4 * (2 * v9)), (int8x8_t)0x800000008000), (int16x4_t)0x200000002000), vdup_n_s16(v37));
      *(int32x2_t *)v31.i8 = vadd_s32(*(int32x2_t *)v31.i8, vshl_n_s32(vshr_n_s32(vshl_n_s32(vdup_n_s32(v37), 0x10uLL), 0x10uLL), 0xFuLL));
    }
    *(int32x2_t *)v31.i8 = vadd_s32(*(int32x2_t *)v31.i8, (int32x2_t)0x200000002000);
    v38 = (uint16x4_t)vqmovun_s32(vshrq_n_s32(v31, 0xEuLL));
    v6->i16[1] = v38.i16[1];
    v6->i16[0] = vmaxv_u16(v38);
    v6 = (uint16x8_t *)((char *)v6 + 4);
  }
  return result;
}

uint64_t resample_vertical<int,unsigned short,4,(AlphaStyle)1>(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint16x8_t **a5, uint64_t a6)
{
  uint16x8_t *v6;
  uint64_t v7;
  const __int16 *v8;
  signed int v9;
  int v10;
  unint64_t v11;
  int32x4_t v12;
  int8x16_t v13;
  int32x4_t v14;
  int32x4_t v15;
  const __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int32x4_t *v20;
  int32x4_t *v21;
  unsigned int v22;
  int16x4_t v23;
  int32x4_t v24;
  int16x4_t v25;
  int32x4_t v26;
  int32x4_t *v27;
  int16x4_t v28;
  int32x4_t v29;
  int16x4_t v30;
  int32x4_t v31;
  int16x4_t v32;
  uint16x4_t v33;
  uint16x4_t v34;
  uint16x8_t v35;
  int8x16_t v36;
  int32x4_t v37;
  int32x4_t v38;
  const __int16 *v39;
  uint64_t v40;
  uint64_t *v41;
  unsigned int v42;
  int16x4_t v43;
  int16x4_t v44;
  uint64_t v45;
  int16x4_t v46;
  uint16x4_t v47;

  v6 = *a5;
  v7 = *(int *)(result + 4);
  v8 = (const __int16 *)(result + 8);
  if (a4 >= 2)
  {
    v10 = 0;
    v11 = 2;
    v12.i64[0] = 0x200000002000;
    v12.i64[1] = 0x200000002000;
    v13.i64[0] = 0xFFFFLL;
    v13.i64[1] = 0xFFFFLL;
    do
    {
      v14 = 0uLL;
      v15 = 0uLL;
      v16 = v8;
      if ((int)v7 >= 2)
      {
        v17 = 0;
        v18 = (4 * v10) & 0xFFFFFFF8;
        v16 = v8;
        do
        {
          v19 = (_QWORD *)(a6 + 8 * v17);
          v20 = (int32x4_t *)(*v19 + 4 * v18);
          v21 = (int32x4_t *)(v19[1] + 4 * v18);
          v22 = *(_DWORD *)v16;
          v16 += 2;
          v23 = vdup_n_s16(v22);
          v24 = vshll_n_s16(v23, 0xFuLL);
          v25 = vdup_n_s16(HIWORD(v22));
          v26 = vshll_n_s16(v25, 0xFuLL);
          v15 = vaddq_s32(vmlal_s16(vaddq_s32(vmlal_s16(v15, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v20[1]), (int8x8_t)0x8000800080008000), v23), v24), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v21[1]), (int8x8_t)0x8000800080008000), v25), v26);
          v14 = vaddq_s32(vmlal_s16(vaddq_s32(vmlal_s16(v14, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v20), (int8x8_t)0x8000800080008000), v23), v24), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v21), (int8x8_t)0x8000800080008000), v25), v26);
          result = v17 + 4;
          v17 += 2;
        }
        while (result <= v7);
      }
      if ((v7 & 1) != 0)
      {
        v27 = (int32x4_t *)(*(_QWORD *)(a6 + 8 * ((int)v7 - 1)) + 4 * ((4 * v10) & 0xFFFFFFF8));
        v28 = vld1_dup_s16(v16);
        v29 = vshll_n_s16(v28, 0xFuLL);
        v15 = vaddq_s32(vmlal_s16(v15, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v27[1]), (int8x8_t)0x8000800080008000), v28), v29);
        v14 = vaddq_s32(vmlal_s16(v14, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v27), (int8x8_t)0x8000800080008000), v28), v29);
      }
      v10 += 2;
      v30 = vqmovun_s32(vshrq_n_s32(vaddq_s32(v14, v12), 0xEuLL));
      v31 = vshrq_n_s32(vaddq_s32(v15, v12), 0xEuLL);
      v32 = vqmovun_s32(v31);
      v33 = (uint16x4_t)vuzp1_s16(v30, v32);
      v34 = (uint16x4_t)vuzp2_s16(v30, v32);
      v35 = (uint16x8_t)vqmovun_high_s32(v30, v31);
      *(uint16x4_t *)v31.i8 = vmax_u16(v33, v34);
      v31.i64[0] = vmovl_u16(vmax_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v31.i8, *(int16x4_t *)v12.i8), (uint16x4_t)vuzp2_s16(*(int16x4_t *)v31.i8, *(int16x4_t *)v12.i8))).u64[0];
      v36.i64[0] = v31.u32[0];
      v36.i64[1] = v31.u32[1];
      *v6++ = vmaxq_u16(v35, (uint16x8_t)vandq_s8(v36, v13));
      v11 += 2;
    }
    while (v11 <= a4);
    v9 = a4 & 0xFFFFFFFE;
  }
  else
  {
    v9 = 0;
  }
  if (v9 < a4)
  {
    v37.i64[0] = 0x200000002000;
    v37.i64[1] = 0x200000002000;
    do
    {
      v38 = 0uLL;
      v39 = v8;
      if ((int)v7 >= 2)
      {
        v40 = 0;
        v39 = v8;
        do
        {
          v41 = (uint64_t *)(a6 + 8 * v40);
          result = *v41;
          v42 = *(_DWORD *)v39;
          v39 += 2;
          v43 = vdup_n_s16(v42);
          v44 = vdup_n_s16(HIWORD(v42));
          v38 = vaddq_s32(vmlal_s16(vmlal_s16(v38, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*(int32x4_t *)(*v41 + 4 * (4 * v9))), (int8x8_t)0x8000800080008000), v43), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*(int32x4_t *)(v41[1] + 4 * (4 * v9))), (int8x8_t)0x8000800080008000), v44), vaddq_s32(vshll_n_s16(v43, 0xFuLL), vshll_n_s16(v44, 0xFuLL)));
          v45 = v40 + 4;
          v40 += 2;
        }
        while (v45 <= v7);
      }
      if ((v7 & 1) != 0)
      {
        v46 = vld1_dup_s16(v39);
        v38 = vaddq_s32(vmlal_s16(v38, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*(int32x4_t *)(*(_QWORD *)(a6 + 8 * ((int)v7 - 1))+ 4 * (4 * v9))), (int8x8_t)0x8000800080008000), v46), vshll_n_s16(v46, 0xFuLL));
      }
      v47 = (uint16x4_t)vqmovun_s32(vshrq_n_s32(vaddq_s32(v38, v37), 0xEuLL));
      v47.i16[0] = vmaxv_u16(v47);
      *(uint16x4_t *)v6->i8 = v47;
      v6 = (uint16x8_t *)((char *)v6 + 8);
      ++v9;
    }
    while (v9 < a4);
  }
  return result;
}

uint64_t resample_vertical<int,unsigned short,5,(AlphaStyle)1>(uint64_t result, double a2, double a3, double a4, double a5, uint16x8_t a6, double a7, int32x4_t a8, uint64_t a9, uint64_t a10, int a11, uint16x8_t **a12, uint64_t a13)
{
  int32x4_t v13;
  int32x4_t v14;
  int16x4_t v15;
  int32x4_t v16;
  uint16x8_t *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  int32x4_t v22;
  __int32 v23;
  __int32 v24;
  __int32 v25;
  __int32 v26;
  __int32 v27;
  __int32 v28;
  __int32 v29;
  __int32 v30;
  __int32 v31;
  __int32 v32;
  __int32 v33;
  __int32 v34;
  __int32 v35;
  __int32 v36;
  __int32 v37;
  __int32 v38;
  __int32 v39;
  __int32 v40;
  __int32 v41;
  const __int16 *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  int32x4_t *v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t *v52;
  int8x8_t v53;
  unsigned int v54;
  int16x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  uint64_t v67;
  int32x4_t *v68;
  int16x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int16x4_t v85;
  uint16x8_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int8x8_t v89;
  uint16x4_t v90;
  uint16x4_t v91;
  uint16x4_t v92;
  int8x8_t v93;
  int32x4_t v94;
  __int32 v95;
  __int32 v96;
  __int32 v97;
  __int32 v98;
  unsigned int *v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  int32x4_t *v103;
  int32x4_t *v104;
  unsigned int v105;
  int16x4_t v106;
  int16x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  uint64_t v110;
  int32x4_t *v111;
  int16x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int16x8_t v116;
  unint64_t v117;
  int v118;
  uint64_t v119;
  __int16 *v120;

  v17 = *a12;
  v18 = *(int *)(result + 4);
  v120 = (__int16 *)(result + 8);
  if (a11 >= 4)
  {
    v20 = 0;
    v117 = a11;
    v21 = 4;
    v22.i64[0] = 0x200000002000;
    v22.i64[1] = 0x200000002000;
    v118 = a11;
    do
    {
      v119 = v20;
      if ((int)v18 >= 2)
      {
        v43 = 0;
        v23 = 0;
        v24 = 0;
        v25 = 0;
        v26 = 0;
        v27 = 0;
        v28 = 0;
        v29 = 0;
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v33 = 0;
        LODWORD(result) = 0;
        v34 = 0;
        v35 = 0;
        v36 = 0;
        v37 = 0;
        v38 = 0;
        v39 = 0;
        v40 = 0;
        v41 = 0;
        v44 = (5 * (_DWORD)v20) & 0xFFFFFFFC;
        v42 = v120;
        do
        {
          v45 = (_QWORD *)(a13 + 8 * v43);
          v46 = (int32x4_t *)(*v45 + 4 * v44);
          v47 = *v46;
          v48 = v46[1];
          v49 = v46[2];
          v50 = v46[3];
          v51 = v46[4];
          v52 = (int32x4_t *)(v45[1] + 4 * v44);
          v53 = (int8x8_t)vmovn_s32(v51);
          v54 = *(_DWORD *)v42;
          v42 += 2;
          v55 = (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v47), (int8x8_t)0x8000800080008000);
          *(int16x4_t *)v51.i8 = vdup_n_s16(v54);
          *(int16x4_t *)v47.i8 = vdup_n_s16(HIWORD(v54));
          v56 = vshlq_n_s32(vaddl_s16(*(int16x4_t *)v51.i8, *(int16x4_t *)v47.i8), 0xFuLL);
          v57.i64[0] = __PAIR64__(v24, v23);
          v57.i64[1] = __PAIR64__(v26, v25);
          v58.i64[0] = __PAIR64__(v28, v27);
          v58.i64[1] = __PAIR64__(v30, v29);
          v59.i64[0] = __PAIR64__(v32, v31);
          v59.i64[1] = __PAIR64__(result, v33);
          v60.i64[0] = __PAIR64__(v35, v34);
          v60.i64[1] = __PAIR64__(v37, v36);
          v61.i64[0] = __PAIR64__(v39, v38);
          v61.i64[1] = __PAIR64__(v41, v40);
          v62 = vmlal_s16(vmlal_s16(vaddq_s32(v56, v57), v55, *(int16x4_t *)v51.i8), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v52), (int8x8_t)0x8000800080008000), *(int16x4_t *)v47.i8);
          v26 = v62.i32[3];
          v25 = v62.i32[2];
          v24 = v62.i32[1];
          v63 = vmlal_s16(vmlal_s16(vaddq_s32(v56, v58), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v48), (int8x8_t)0x8000800080008000), *(int16x4_t *)v51.i8), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v52[1]), (int8x8_t)0x8000800080008000), *(int16x4_t *)v47.i8);
          v30 = v63.i32[3];
          v29 = v63.i32[2];
          v28 = v63.i32[1];
          v23 = v62.i32[0];
          v64 = vmlal_s16(vmlal_s16(vaddq_s32(v56, v59), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v49), (int8x8_t)0x8000800080008000), *(int16x4_t *)v51.i8), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v52[2]), (int8x8_t)0x8000800080008000), *(int16x4_t *)v47.i8);
          result = v64.u32[3];
          v33 = v64.i32[2];
          v27 = v63.i32[0];
          v32 = v64.i32[1];
          v65 = vmlal_s16(vmlal_s16(vaddq_s32(v56, v60), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v50), (int8x8_t)0x8000800080008000), *(int16x4_t *)v51.i8), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v52[3]), (int8x8_t)0x8000800080008000), *(int16x4_t *)v47.i8);
          v37 = v65.i32[3];
          v31 = v64.i32[0];
          v36 = v65.i32[2];
          v35 = v65.i32[1];
          v66 = vmlal_s16(vmlal_s16(vaddq_s32(v56, v61), (int16x4_t)veor_s8(v53, (int8x8_t)0x8000800080008000), *(int16x4_t *)v51.i8), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v52[4]), (int8x8_t)0x8000800080008000), *(int16x4_t *)v47.i8);
          v41 = v66.i32[3];
          v40 = v66.i32[2];
          v39 = v66.i32[1];
          v34 = v65.i32[0];
          v38 = v66.i32[0];
          v67 = v43 + 4;
          v43 += 2;
        }
        while (v67 <= v18);
      }
      else
      {
        v23 = 0;
        v24 = 0;
        v25 = 0;
        v26 = 0;
        v27 = 0;
        v28 = 0;
        v29 = 0;
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v33 = 0;
        result = 0;
        v34 = 0;
        v35 = 0;
        v36 = 0;
        v37 = 0;
        v38 = 0;
        v39 = 0;
        v40 = 0;
        v41 = 0;
        v42 = v120;
      }
      if ((v18 & 1) != 0)
      {
        v68 = (int32x4_t *)(*(_QWORD *)(a13 + 8 * ((int)v18 - 1)) + 4 * ((5 * (_DWORD)v119) & 0xFFFFFFFC));
        v69 = vld1_dup_s16(v42);
        v70.i64[0] = __PAIR64__(v39, v38);
        v71 = vshll_n_s16(v69, 0xFuLL);
        v70.i64[1] = __PAIR64__(v41, v40);
        v72.i64[0] = __PAIR64__(v35, v34);
        v72.i64[1] = __PAIR64__(v37, v36);
        v73.i64[0] = __PAIR64__(v32, v31);
        v73.i64[1] = __PAIR64__(result, v33);
        v74.i64[0] = __PAIR64__(v28, v27);
        v74.i64[1] = __PAIR64__(v30, v29);
        v75.i64[0] = __PAIR64__(v24, v23);
        v75.i64[1] = __PAIR64__(v26, v25);
        v76 = vmlal_s16(vaddq_s32(v71, v75), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v68), (int8x8_t)0x8000800080008000), v69);
        v26 = v76.i32[3];
        v25 = v76.i32[2];
        v24 = v76.i32[1];
        v77 = vmlal_s16(vaddq_s32(v71, v74), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v68[1]), (int8x8_t)0x8000800080008000), v69);
        v30 = v77.i32[3];
        v23 = v76.i32[0];
        v29 = v77.i32[2];
        v28 = v77.i32[1];
        v78 = vmlal_s16(vaddq_s32(v71, v73), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v68[2]), (int8x8_t)0x8000800080008000), v69);
        result = v78.u32[3];
        v33 = v78.i32[2];
        v32 = v78.i32[1];
        v27 = v77.i32[0];
        v79 = vmlal_s16(vaddq_s32(v71, v72), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v68[3]), (int8x8_t)0x8000800080008000), v69);
        v37 = v79.i32[3];
        v36 = v79.i32[2];
        v31 = v78.i32[0];
        v35 = v79.i32[1];
        v80 = vmlal_s16(vaddq_s32(v71, v70), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v68[4]), (int8x8_t)0x8000800080008000), v69);
        v41 = v80.i32[3];
        v34 = v79.i32[0];
        v40 = v80.i32[2];
        v39 = v80.i32[1];
        v38 = v80.i32[0];
      }
      v81.i64[0] = __PAIR64__(v24, v23);
      v81.i64[1] = __PAIR64__(v26, v25);
      v82 = vshrq_n_s32(vaddq_s32(v81, v22), 0xEuLL);
      *(int16x4_t *)v82.i8 = vqmovun_s32(v82);
      v83.i64[0] = __PAIR64__(v28, v27);
      v83.i64[1] = __PAIR64__(v30, v29);
      v84 = vshrq_n_s32(vaddq_s32(v83, v22), 0xEuLL);
      v85 = vqmovun_s32(v84);
      v86 = (uint16x8_t)vqmovun_high_s32(*(int16x4_t *)v82.i8, v84);
      v84.i64[0] = __PAIR64__(v32, v31);
      v84.i64[1] = __PAIR64__(result, v33);
      *(int16x4_t *)v84.i8 = vqmovun_s32(vshrq_n_s32(vaddq_s32(v84, v22), 0xEuLL));
      v87.i64[0] = __PAIR64__(v35, v34);
      v87.i64[1] = __PAIR64__(v37, v36);
      v88 = vshrq_n_s32(vaddq_s32(v87, v22), 0xEuLL);
      v89 = (int8x8_t)vqmovun_s32(v88);
      v13 = (int32x4_t)vqmovun_high_s32(*(int16x4_t *)v84.i8, v88);
      v88.i64[0] = __PAIR64__(v39, v38);
      v14.i64[1] = __PAIR64__(v41, v40);
      v90.i32[0] = vext_s8(*(int8x8_t *)v82.i8, *(int8x8_t *)v84.i8, 6uLL).u32[0];
      v91.i32[0] = vext_s8((int8x8_t)vzip2_s16(v85, *(int16x4_t *)v82.i8), *(int8x8_t *)v82.i8, 2uLL).u32[0];
      v92.i32[0] = vtrn2_s16(*(int16x4_t *)v82.i8, vzip2_s16(*(int16x4_t *)v82.i8, v85)).u32[0];
      v82.i16[1] = v85.i16[1];
      v85.i16[1] = v84.i16[1];
      *(int16x4_t *)v14.i8 = vqmovun_s32(vshrq_n_s32(vaddq_s32(v14, v22), 0xEuLL));
      v15 = (int16x4_t)vext_s8(*(int8x8_t *)v14.i8, v89, 4uLL);
      v93 = vext_s8(*(int8x8_t *)v14.i8, v89, 2uLL);
      *(int8x8_t *)v16.i8 = vext_s8(*(int8x8_t *)v84.i8, *(int8x8_t *)v14.i8, 2uLL);
      v84.i16[3] = v89.i16[3];
      v89.i16[3] = v14.i16[3];
      v85.i32[1] = v89.i32[1];
      v90.i32[1] = vext_s8(*(int8x8_t *)&v15, *(int8x8_t *)&v15, 2uLL).i32[1];
      v91.i32[1] = vext_s8(v93, v93, 2uLL).i32[1];
      v20 = v119 + 4;
      v92.i32[1] = v16.i32[1];
      v82.i32[1] = v84.i32[1];
      *(uint16x4_t *)v82.i8 = vmax_u16(vmax_u16(vmax_u16(vmax_u16((uint16x4_t)v85, v90), v91), v92), *(uint16x4_t *)v82.i8);
      a8 = (int32x4_t)vqtbl1q_s8((int8x16_t)v82, (int8x16_t)xmmword_185004820);
      a6 = vmaxq_u16(v86, (uint16x8_t)vqtbl1q_s8((int8x16_t)v82, (int8x16_t)xmmword_185004830));
      *v17 = a6;
      v17[1] = vmaxq_u16((uint16x8_t)v13, (uint16x8_t)a8);
      v17[2].i64[0] = v14.i64[0];
      v17 = (uint16x8_t *)((char *)v17 + 40);
      v21 += 4;
      a11 = v118;
    }
    while (v21 <= v117);
    v19 = v118 & 0x7FFFFFFC;
  }
  else
  {
    v19 = 0;
  }
  if (v19 < a11)
  {
    v94.i64[0] = 0x200000002000;
    v94.i64[1] = 0x200000002000;
    do
    {
      if ((int)v18 >= 2)
      {
        v100 = 0;
        v95 = 0;
        v96 = 0;
        v97 = 0;
        v98 = 0;
        LODWORD(result) = 0;
        v99 = (unsigned int *)v120;
        v101 = (5 * v19);
        do
        {
          v102 = (_QWORD *)(a13 + 8 * v100);
          v103 = (int32x4_t *)(*v102 + 4 * v101);
          a8.i32[0] = v103[1].i32[0];
          v104 = (int32x4_t *)(v102[1] + 4 * v101);
          v13.i32[0] = v104[1].i32[0];
          v105 = *v99++;
          v106 = vdup_n_s16(v105);
          v14.i32[0] = v105;
          v107 = vdup_n_s16(HIWORD(v105));
          v15.i32[0] = HIWORD(v105);
          *(int8x8_t *)v13.i8 = veor_s8((int8x8_t)vmovn_s32(v13), (int8x8_t)0x8000800080008000);
          v16.i32[0] = result;
          v108 = vaddq_s32(vshll_n_s16(*(int16x4_t *)v14.i8, 0xFuLL), v16);
          v16.i64[0] = __PAIR64__(v96, v95);
          v16.i64[1] = __PAIR64__(v98, v97);
          v109 = vmlal_s16(vaddq_s32(vmlal_s16(vaddq_s32(vshll_n_s16(v106, 0xFuLL), v16), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v103), (int8x8_t)0x8000800080008000), v106), vshll_n_s16(v107, 0xFuLL)), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v104), (int8x8_t)0x8000800080008000), v107);
          v98 = v109.i32[3];
          v97 = v109.i32[2];
          v96 = v109.i32[1];
          v95 = v109.i32[0];
          a8 = vmlal_s16(vaddq_s32(vmlal_s16(v108, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(a8), (int8x8_t)0x8000800080008000), *(int16x4_t *)v14.i8), vshll_n_s16(v15, 0xFuLL)), *(int16x4_t *)v13.i8, v15);
          result = a8.u32[0];
          v110 = v100 + 4;
          v100 += 2;
        }
        while (v110 <= v18);
      }
      else
      {
        v95 = 0;
        v96 = 0;
        v97 = 0;
        v98 = 0;
        result = 0;
        v99 = (unsigned int *)v120;
      }
      if ((v18 & 1) != 0)
      {
        v111 = (int32x4_t *)(*(_QWORD *)(a13 + 8 * ((int)v18 - 1)) + 4 * (5 * v19));
        a8.i32[0] = v111[1].i32[0];
        v112 = vdup_n_s16(*(unsigned __int16 *)v99);
        v13.i32[0] = *(unsigned __int16 *)v99;
        *(int8x8_t *)a8.i8 = veor_s8((int8x8_t)vmovn_s32(a8), (int8x8_t)0x8000800080008000);
        v14.i64[0] = __PAIR64__(v96, v95);
        v14.i64[1] = __PAIR64__(v98, v97);
        v113 = vaddq_s32(vshll_n_s16(v112, 0xFuLL), v14);
        v14.i32[0] = result;
        v114 = vmlal_s16(v113, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v111), (int8x8_t)0x8000800080008000), v112);
        v98 = v114.i32[3];
        v97 = v114.i32[2];
        v96 = v114.i32[1];
        v95 = v114.i32[0];
        result = vmlal_s16(vaddq_s32(vshll_n_s16(*(int16x4_t *)v13.i8, 0xFuLL), v14), *(int16x4_t *)a8.i8, *(int16x4_t *)v13.i8).u32[0];
      }
      v115.i64[0] = __PAIR64__(v96, v95);
      v115.i64[1] = __PAIR64__(v98, v97);
      *(int16x4_t *)v115.i8 = vqmovun_s32(vshrq_n_s32(vaddq_s32(v115, v94), 0xEuLL));
      a8.i32[0] = result;
      a8 = vshrq_n_s32(vaddq_s32(a8, v94), 0xEuLL);
      v116 = vqmovun_high_s32(*(int16x4_t *)v115.i8, a8);
      a6 = (uint16x8_t)vqtbl2q_s8(*(int8x16x2_t *)(&a6 - 1), (int8x16_t)xmmword_185004840);
      v115.i16[0] = vmaxvq_u16(a6);
      *(int16x4_t *)a8.i8 = vqmovun_s32(a8);
      v17->i64[0] = v115.i64[0];
      v17->i16[4] = a8.i16[0];
      v17 = (uint16x8_t *)((char *)v17 + 10);
      ++v19;
    }
    while (v19 < a11);
  }
  return result;
}

uint64_t resample_vertical<int,unsigned short,2,(AlphaStyle)2>(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint16x8_t **a5, uint64_t a6)
{
  uint16x8_t *v6;
  uint64_t v7;
  __int16 *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  const __int16 *v15;
  uint64_t v16;
  _QWORD *v17;
  int32x4_t *v18;
  int32x4_t *v19;
  unsigned int v20;
  int16x4_t v21;
  int32x4_t v22;
  int16x4_t v23;
  int32x4_t v24;
  int32x4_t *v25;
  int16x4_t v26;
  int32x4_t v27;
  int16x4_t v28;
  int32x4_t v29;
  int16x4_t v30;
  uint16x4_t v31;
  uint16x4_t v32;
  uint16x8_t v33;
  int32x4_t v34;
  unsigned int *v35;
  uint64_t v36;
  uint64_t *v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  uint16x4_t v41;

  v6 = *a5;
  v7 = *(int *)(result + 4);
  v8 = (__int16 *)(result + 8);
  if (a4 >= 4)
  {
    v10 = 0;
    v11 = 4;
    v12.i64[0] = 0x200000002000;
    v12.i64[1] = 0x200000002000;
    do
    {
      v13 = 0uLL;
      v14 = 0uLL;
      v15 = v8;
      if ((int)v7 >= 2)
      {
        v16 = 0;
        v15 = v8;
        do
        {
          v17 = (_QWORD *)(a6 + 8 * v16);
          v18 = (int32x4_t *)(*v17 + 8 * v10);
          v19 = (int32x4_t *)(v17[1] + 8 * v10);
          v20 = *(_DWORD *)v15;
          v15 += 2;
          v21 = vdup_n_s16(v20);
          v22 = vshll_n_s16(v21, 0xFuLL);
          v23 = vdup_n_s16(HIWORD(v20));
          v24 = vshll_n_s16(v23, 0xFuLL);
          v14 = vaddq_s32(vmlal_s16(vaddq_s32(vmlal_s16(v14, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v18[1]), (int8x8_t)0x8000800080008000), v21), v22), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v19[1]), (int8x8_t)0x8000800080008000), v23), v24);
          v13 = vaddq_s32(vmlal_s16(vaddq_s32(vmlal_s16(v13, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v18), (int8x8_t)0x8000800080008000), v21), v22), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v19), (int8x8_t)0x8000800080008000), v23), v24);
          result = v16 + 4;
          v16 += 2;
        }
        while (result <= v7);
      }
      if ((v7 & 1) != 0)
      {
        v25 = (int32x4_t *)(*(_QWORD *)(a6 + 8 * ((int)v7 - 1)) + 8 * v10);
        v26 = vld1_dup_s16(v15);
        v27 = vshll_n_s16(v26, 0xFuLL);
        v14 = vaddq_s32(vmlal_s16(v14, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v25[1]), (int8x8_t)0x8000800080008000), v26), v27);
        v13 = vaddq_s32(vmlal_s16(v13, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v25), (int8x8_t)0x8000800080008000), v26), v27);
      }
      v10 += 4;
      v28 = vqmovun_s32(vshrq_n_s32(vaddq_s32(v13, v12), 0xEuLL));
      v29 = vshrq_n_s32(vaddq_s32(v14, v12), 0xEuLL);
      v30 = vqmovun_s32(v29);
      v31 = (uint16x4_t)vuzp1_s16(v28, v30);
      v32 = (uint16x4_t)vuzp2_s16(v28, v30);
      v33 = (uint16x8_t)vqmovun_high_s32(v28, v29);
      *(uint16x4_t *)v29.i8 = vmax_u16(v31, v32);
      *v6++ = vmaxq_u16(v33, (uint16x8_t)vqtbl1q_s8((int8x16_t)v29, (int8x16_t)xmmword_185004850));
      v11 += 4;
    }
    while (v11 <= a4);
    v9 = a4 & 0x7FFFFFFC;
  }
  else
  {
    v9 = 0;
  }
  for (; v9 < a4; ++v9)
  {
    if ((int)v7 >= 2)
    {
      v36 = 0;
      v34 = 0uLL;
      v35 = (unsigned int *)v8;
      do
      {
        v37 = (uint64_t *)(a6 + 8 * v36);
        result = *v37;
        v38 = *v35++;
        v34 = vmlal_s16(vmlal_s16(v34, vuzp1_s16((int16x4_t)veor_s8(*(int8x8_t *)(*v37 + 4 * (2 * v9)), (int8x8_t)0x800000008000), (int16x4_t)0x200000002000), vdup_n_s16(v38)), vuzp1_s16((int16x4_t)veor_s8(*(int8x8_t *)(v37[1] + 4 * (2 * v9)), (int8x8_t)0x800000008000), (int16x4_t)0x200000002000), vdup_n_s16(HIWORD(v38)));
        *(int32x2_t *)v34.i8 = vadd_s32(*(int32x2_t *)v34.i8, vadd_s32(vshl_n_s32(vshr_n_s32(vshl_n_s32(vdup_n_s32(v38), 0x10uLL), 0x10uLL), 0xFuLL), vshl_n_s32(vshr_n_s32(vshl_n_s32(vdup_n_s32(HIWORD(v38)), 0x10uLL), 0x10uLL), 0xFuLL)));
        v39 = v36 + 4;
        v36 += 2;
      }
      while (v39 <= v7);
    }
    else
    {
      v34 = 0uLL;
      v35 = (unsigned int *)v8;
    }
    if ((v7 & 1) != 0)
    {
      v40 = *(unsigned __int16 *)v35;
      v34 = vmlal_s16(v34, vuzp1_s16((int16x4_t)veor_s8(*(int8x8_t *)(*(_QWORD *)(a6 + 8 * ((int)v7 - 1)) + 4 * (2 * v9)), (int8x8_t)0x800000008000), (int16x4_t)0x200000002000), vdup_n_s16(v40));
      *(int32x2_t *)v34.i8 = vadd_s32(*(int32x2_t *)v34.i8, vshl_n_s32(vshr_n_s32(vshl_n_s32(vdup_n_s32(v40), 0x10uLL), 0x10uLL), 0xFuLL));
    }
    *(int32x2_t *)v34.i8 = vadd_s32(*(int32x2_t *)v34.i8, (int32x2_t)0x200000002000);
    v41 = (uint16x4_t)vqmovun_s32(vshrq_n_s32(v34, 0xEuLL));
    v6->i16[0] = v41.i16[0];
    v6->i16[1] = vmaxv_u16(v41);
    v6 = (uint16x8_t *)((char *)v6 + 4);
  }
  return result;
}

uint64_t resample_vertical<int,unsigned short,4,(AlphaStyle)2>(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint16x8_t **a5, uint64_t a6)
{
  uint16x8_t *v6;
  uint64_t v7;
  const __int16 *v8;
  signed int v9;
  int v10;
  unint64_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  const __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int32x4_t *v19;
  int32x4_t *v20;
  unsigned int v21;
  int16x4_t v22;
  int32x4_t v23;
  int16x4_t v24;
  int32x4_t v25;
  int32x4_t *v26;
  int16x4_t v27;
  int32x4_t v28;
  int16x4_t v29;
  int32x4_t v30;
  int16x4_t v31;
  uint16x4_t v32;
  uint16x4_t v33;
  uint16x8_t v34;
  int32x4_t v35;
  int32x4_t v36;
  const __int16 *v37;
  uint64_t v38;
  uint64_t *v39;
  unsigned int v40;
  int16x4_t v41;
  int16x4_t v42;
  uint64_t v43;
  int16x4_t v44;
  uint16x4_t v45;

  v6 = *a5;
  v7 = *(int *)(result + 4);
  v8 = (const __int16 *)(result + 8);
  if (a4 >= 2)
  {
    v10 = 0;
    v11 = 2;
    v12.i64[0] = 0x200000002000;
    v12.i64[1] = 0x200000002000;
    do
    {
      v13 = 0uLL;
      v14 = 0uLL;
      v15 = v8;
      if ((int)v7 >= 2)
      {
        v16 = 0;
        v17 = (4 * v10) & 0xFFFFFFF8;
        v15 = v8;
        do
        {
          v18 = (_QWORD *)(a6 + 8 * v16);
          v19 = (int32x4_t *)(*v18 + 4 * v17);
          v20 = (int32x4_t *)(v18[1] + 4 * v17);
          v21 = *(_DWORD *)v15;
          v15 += 2;
          v22 = vdup_n_s16(v21);
          v23 = vshll_n_s16(v22, 0xFuLL);
          v24 = vdup_n_s16(HIWORD(v21));
          v25 = vshll_n_s16(v24, 0xFuLL);
          v14 = vaddq_s32(vmlal_s16(vaddq_s32(vmlal_s16(v14, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v19[1]), (int8x8_t)0x8000800080008000), v22), v23), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v20[1]), (int8x8_t)0x8000800080008000), v24), v25);
          v13 = vaddq_s32(vmlal_s16(vaddq_s32(vmlal_s16(v13, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v19), (int8x8_t)0x8000800080008000), v22), v23), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v20), (int8x8_t)0x8000800080008000), v24), v25);
          result = v16 + 4;
          v16 += 2;
        }
        while (result <= v7);
      }
      if ((v7 & 1) != 0)
      {
        v26 = (int32x4_t *)(*(_QWORD *)(a6 + 8 * ((int)v7 - 1)) + 4 * ((4 * v10) & 0xFFFFFFF8));
        v27 = vld1_dup_s16(v15);
        v28 = vshll_n_s16(v27, 0xFuLL);
        v14 = vaddq_s32(vmlal_s16(v14, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v26[1]), (int8x8_t)0x8000800080008000), v27), v28);
        v13 = vaddq_s32(vmlal_s16(v13, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v26), (int8x8_t)0x8000800080008000), v27), v28);
      }
      v10 += 2;
      v29 = vqmovun_s32(vshrq_n_s32(vaddq_s32(v13, v12), 0xEuLL));
      v30 = vshrq_n_s32(vaddq_s32(v14, v12), 0xEuLL);
      v31 = vqmovun_s32(v30);
      v32 = (uint16x4_t)vuzp1_s16(v29, v31);
      v33 = (uint16x4_t)vuzp2_s16(v29, v31);
      v34 = (uint16x8_t)vqmovun_high_s32(v29, v30);
      *(uint16x4_t *)v30.i8 = vmax_u16(v32, v33);
      *(uint16x4_t *)v30.i8 = vmax_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v30.i8, *(int16x4_t *)v12.i8), (uint16x4_t)vuzp2_s16(*(int16x4_t *)v30.i8, *(int16x4_t *)v12.i8));
      *v6++ = vmaxq_u16(v34, (uint16x8_t)vqtbl1q_s8((int8x16_t)v30, (int8x16_t)xmmword_185004860));
      v11 += 2;
    }
    while (v11 <= a4);
    v9 = a4 & 0xFFFFFFFE;
  }
  else
  {
    v9 = 0;
  }
  if (v9 < a4)
  {
    v35.i64[0] = 0x200000002000;
    v35.i64[1] = 0x200000002000;
    do
    {
      v36 = 0uLL;
      v37 = v8;
      if ((int)v7 >= 2)
      {
        v38 = 0;
        v37 = v8;
        do
        {
          v39 = (uint64_t *)(a6 + 8 * v38);
          result = *v39;
          v40 = *(_DWORD *)v37;
          v37 += 2;
          v41 = vdup_n_s16(v40);
          v42 = vdup_n_s16(HIWORD(v40));
          v36 = vaddq_s32(vmlal_s16(vmlal_s16(v36, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*(int32x4_t *)(*v39 + 4 * (4 * v9))), (int8x8_t)0x8000800080008000), v41), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*(int32x4_t *)(v39[1] + 4 * (4 * v9))), (int8x8_t)0x8000800080008000), v42), vaddq_s32(vshll_n_s16(v41, 0xFuLL), vshll_n_s16(v42, 0xFuLL)));
          v43 = v38 + 4;
          v38 += 2;
        }
        while (v43 <= v7);
      }
      if ((v7 & 1) != 0)
      {
        v44 = vld1_dup_s16(v37);
        v36 = vaddq_s32(vmlal_s16(v36, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*(int32x4_t *)(*(_QWORD *)(a6 + 8 * ((int)v7 - 1))+ 4 * (4 * v9))), (int8x8_t)0x8000800080008000), v44), vshll_n_s16(v44, 0xFuLL));
      }
      v45 = (uint16x4_t)vqmovun_s32(vshrq_n_s32(vaddq_s32(v36, v35), 0xEuLL));
      v45.i16[3] = vmaxv_u16(v45);
      *(uint16x4_t *)v6->i8 = v45;
      v6 = (uint16x8_t *)((char *)v6 + 8);
      ++v9;
    }
    while (v9 < a4);
  }
  return result;
}

uint64_t resample_vertical<int,unsigned short,5,(AlphaStyle)2>(uint64_t result, double a2, double a3, double a4, double a5, int32x4_t a6, double a7, int32x4_t a8, uint64_t a9, uint64_t a10, int a11, uint64_t *a12, uint64_t a13)
{
  int32x4_t v13;
  int32x4_t v14;
  int16x4_t v15;
  int32x4_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  int32x4_t v22;
  __int32 v23;
  __int32 v24;
  __int32 v25;
  __int32 v26;
  __int32 v27;
  __int32 v28;
  __int32 v29;
  __int32 v30;
  __int32 v31;
  __int32 v32;
  __int32 v33;
  __int32 v34;
  __int32 v35;
  __int32 v36;
  __int32 v37;
  __int32 v38;
  __int32 v39;
  __int32 v40;
  __int32 v41;
  const __int16 *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  int32x4_t *v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t *v52;
  int8x8_t v53;
  unsigned int v54;
  int16x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  uint64_t v67;
  int32x4_t *v68;
  int16x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int16x4_t v84;
  uint16x8_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int16x4_t v88;
  uint16x4_t v89;
  uint16x4_t v90;
  int8x8_t v91;
  int8x8_t v92;
  uint16x8_t v93;
  int32x4_t v94;
  __int32 v95;
  __int32 v96;
  __int32 v97;
  __int32 v98;
  unsigned int *v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  int32x4_t *v103;
  int32x4_t *v104;
  unsigned int v105;
  int16x4_t v106;
  int16x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  uint64_t v110;
  int32x4_t *v111;
  int16x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int16x8_t v116;
  unint64_t v117;
  int v118;
  uint64_t v119;
  __int16 *v120;

  v17 = *a12;
  v18 = *(int *)(result + 4);
  v120 = (__int16 *)(result + 8);
  if (a11 >= 4)
  {
    v20 = 0;
    v117 = a11;
    v21 = 4;
    v22.i64[0] = 0x200000002000;
    v22.i64[1] = 0x200000002000;
    v118 = a11;
    do
    {
      v119 = v20;
      if ((int)v18 >= 2)
      {
        v43 = 0;
        v23 = 0;
        v24 = 0;
        v25 = 0;
        v26 = 0;
        v27 = 0;
        v28 = 0;
        v29 = 0;
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v33 = 0;
        LODWORD(result) = 0;
        v34 = 0;
        v35 = 0;
        v36 = 0;
        v37 = 0;
        v38 = 0;
        v39 = 0;
        v40 = 0;
        v41 = 0;
        v44 = (5 * (_DWORD)v20) & 0xFFFFFFFC;
        v42 = v120;
        do
        {
          v45 = (_QWORD *)(a13 + 8 * v43);
          v46 = (int32x4_t *)(*v45 + 4 * v44);
          v47 = *v46;
          v48 = v46[1];
          v49 = v46[2];
          v50 = v46[3];
          v51 = v46[4];
          v52 = (int32x4_t *)(v45[1] + 4 * v44);
          v53 = (int8x8_t)vmovn_s32(v51);
          v54 = *(_DWORD *)v42;
          v42 += 2;
          v55 = (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v47), (int8x8_t)0x8000800080008000);
          *(int16x4_t *)v51.i8 = vdup_n_s16(v54);
          *(int16x4_t *)v47.i8 = vdup_n_s16(HIWORD(v54));
          v56 = vshlq_n_s32(vaddl_s16(*(int16x4_t *)v51.i8, *(int16x4_t *)v47.i8), 0xFuLL);
          v57.i64[0] = __PAIR64__(v24, v23);
          v57.i64[1] = __PAIR64__(v26, v25);
          v58.i64[0] = __PAIR64__(v28, v27);
          v58.i64[1] = __PAIR64__(v30, v29);
          v59.i64[0] = __PAIR64__(v32, v31);
          v59.i64[1] = __PAIR64__(result, v33);
          v60.i64[0] = __PAIR64__(v35, v34);
          v60.i64[1] = __PAIR64__(v37, v36);
          v61.i64[0] = __PAIR64__(v39, v38);
          v61.i64[1] = __PAIR64__(v41, v40);
          v62 = vmlal_s16(vmlal_s16(vaddq_s32(v56, v57), v55, *(int16x4_t *)v51.i8), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v52), (int8x8_t)0x8000800080008000), *(int16x4_t *)v47.i8);
          v26 = v62.i32[3];
          v25 = v62.i32[2];
          v24 = v62.i32[1];
          v63 = vmlal_s16(vmlal_s16(vaddq_s32(v56, v58), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v48), (int8x8_t)0x8000800080008000), *(int16x4_t *)v51.i8), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v52[1]), (int8x8_t)0x8000800080008000), *(int16x4_t *)v47.i8);
          v30 = v63.i32[3];
          v29 = v63.i32[2];
          v28 = v63.i32[1];
          v23 = v62.i32[0];
          v64 = vmlal_s16(vmlal_s16(vaddq_s32(v56, v59), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v49), (int8x8_t)0x8000800080008000), *(int16x4_t *)v51.i8), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v52[2]), (int8x8_t)0x8000800080008000), *(int16x4_t *)v47.i8);
          result = v64.u32[3];
          v33 = v64.i32[2];
          v27 = v63.i32[0];
          v32 = v64.i32[1];
          v65 = vmlal_s16(vmlal_s16(vaddq_s32(v56, v60), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v50), (int8x8_t)0x8000800080008000), *(int16x4_t *)v51.i8), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v52[3]), (int8x8_t)0x8000800080008000), *(int16x4_t *)v47.i8);
          v37 = v65.i32[3];
          v31 = v64.i32[0];
          v36 = v65.i32[2];
          v35 = v65.i32[1];
          v66 = vmlal_s16(vmlal_s16(vaddq_s32(v56, v61), (int16x4_t)veor_s8(v53, (int8x8_t)0x8000800080008000), *(int16x4_t *)v51.i8), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v52[4]), (int8x8_t)0x8000800080008000), *(int16x4_t *)v47.i8);
          v41 = v66.i32[3];
          v40 = v66.i32[2];
          v39 = v66.i32[1];
          v34 = v65.i32[0];
          v38 = v66.i32[0];
          v67 = v43 + 4;
          v43 += 2;
        }
        while (v67 <= v18);
      }
      else
      {
        v23 = 0;
        v24 = 0;
        v25 = 0;
        v26 = 0;
        v27 = 0;
        v28 = 0;
        v29 = 0;
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v33 = 0;
        result = 0;
        v34 = 0;
        v35 = 0;
        v36 = 0;
        v37 = 0;
        v38 = 0;
        v39 = 0;
        v40 = 0;
        v41 = 0;
        v42 = v120;
      }
      if ((v18 & 1) != 0)
      {
        v68 = (int32x4_t *)(*(_QWORD *)(a13 + 8 * ((int)v18 - 1)) + 4 * ((5 * (_DWORD)v119) & 0xFFFFFFFC));
        v69 = vld1_dup_s16(v42);
        v70.i64[0] = __PAIR64__(v39, v38);
        v71 = vshll_n_s16(v69, 0xFuLL);
        v70.i64[1] = __PAIR64__(v41, v40);
        v72.i64[0] = __PAIR64__(v35, v34);
        v72.i64[1] = __PAIR64__(v37, v36);
        v73.i64[0] = __PAIR64__(v32, v31);
        v73.i64[1] = __PAIR64__(result, v33);
        v74.i64[0] = __PAIR64__(v28, v27);
        v74.i64[1] = __PAIR64__(v30, v29);
        v75.i64[0] = __PAIR64__(v24, v23);
        v75.i64[1] = __PAIR64__(v26, v25);
        v76 = vmlal_s16(vaddq_s32(v71, v75), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v68), (int8x8_t)0x8000800080008000), v69);
        v26 = v76.i32[3];
        v25 = v76.i32[2];
        v24 = v76.i32[1];
        v77 = vmlal_s16(vaddq_s32(v71, v74), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v68[1]), (int8x8_t)0x8000800080008000), v69);
        v30 = v77.i32[3];
        v23 = v76.i32[0];
        v29 = v77.i32[2];
        v28 = v77.i32[1];
        v78 = vmlal_s16(vaddq_s32(v71, v73), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v68[2]), (int8x8_t)0x8000800080008000), v69);
        result = v78.u32[3];
        v33 = v78.i32[2];
        v32 = v78.i32[1];
        v27 = v77.i32[0];
        v79 = vmlal_s16(vaddq_s32(v71, v72), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v68[3]), (int8x8_t)0x8000800080008000), v69);
        v37 = v79.i32[3];
        v36 = v79.i32[2];
        v31 = v78.i32[0];
        v35 = v79.i32[1];
        v80 = vmlal_s16(vaddq_s32(v71, v70), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v68[4]), (int8x8_t)0x8000800080008000), v69);
        v41 = v80.i32[3];
        v34 = v79.i32[0];
        v40 = v80.i32[2];
        v39 = v80.i32[1];
        v38 = v80.i32[0];
      }
      v81.i64[0] = __PAIR64__(v24, v23);
      v81.i64[1] = __PAIR64__(v26, v25);
      a6 = vshrq_n_s32(vaddq_s32(v81, v22), 0xEuLL);
      *(int16x4_t *)a6.i8 = vqmovun_s32(a6);
      v82.i64[0] = __PAIR64__(v28, v27);
      v82.i64[1] = __PAIR64__(v30, v29);
      v83 = vshrq_n_s32(vaddq_s32(v82, v22), 0xEuLL);
      v84 = vqmovun_s32(v83);
      v85 = (uint16x8_t)vqmovun_high_s32(*(int16x4_t *)a6.i8, v83);
      v83.i64[0] = __PAIR64__(v32, v31);
      v83.i64[1] = __PAIR64__(result, v33);
      *(int16x4_t *)v83.i8 = vqmovun_s32(vshrq_n_s32(vaddq_s32(v83, v22), 0xEuLL));
      v86.i64[0] = __PAIR64__(v35, v34);
      v86.i64[1] = __PAIR64__(v37, v36);
      v13 = vshrq_n_s32(vaddq_s32(v86, v22), 0xEuLL);
      *(int16x4_t *)v14.i8 = vqmovun_s32(v13);
      v87.i64[0] = __PAIR64__(v39, v38);
      v87.i64[1] = __PAIR64__(v41, v40);
      v88 = *(int16x4_t *)v83.i8;
      *(int16x4_t *)v87.i8 = vqmovun_s32(vshrq_n_s32(vaddq_s32(v87, v22), 0xEuLL));
      v89.i32[0] = vext_s8(*(int8x8_t *)a6.i8, *(int8x8_t *)v83.i8, 6uLL).u32[0];
      v90.i32[0] = vext_s8((int8x8_t)vzip2_s16(v84, *(int16x4_t *)a6.i8), *(int8x8_t *)a6.i8, 2uLL).u32[0];
      v15.i32[0] = vtrn2_s16(*(int16x4_t *)a6.i8, vzip2_s16(*(int16x4_t *)a6.i8, v84)).u32[0];
      a6.i16[1] = v84.i16[1];
      v84.i16[1] = v83.i16[1];
      v91 = vext_s8(*(int8x8_t *)v87.i8, *(int8x8_t *)v14.i8, 4uLL);
      *(int8x8_t *)v16.i8 = vext_s8(*(int8x8_t *)v83.i8, *(int8x8_t *)v87.i8, 2uLL);
      v83.i16[3] = v14.i16[3];
      v92 = vext_s8(*(int8x8_t *)v87.i8, *(int8x8_t *)v14.i8, 2uLL);
      v14.i16[3] = v87.i16[3];
      v84.i32[1] = v14.i32[1];
      v93 = (uint16x8_t)vqmovun_high_s32(v88, v13);
      v89.i32[1] = vext_s8(v91, v91, 2uLL).i32[1];
      v20 = v119 + 4;
      *(int8x8_t *)v13.i8 = vext_s8(v92, v92, 2uLL);
      v90.i32[1] = v13.i32[1];
      v15.i32[1] = v16.i32[1];
      a6.i32[1] = v83.i32[1];
      *(uint16x4_t *)a6.i8 = vmax_u16(vmax_u16(vmax_u16(vmax_u16((uint16x4_t)v84, v89), v90), (uint16x4_t)v15), *(uint16x4_t *)a6.i8);
      a8 = (int32x4_t)vmaxq_u16(v93, (uint16x8_t)vqtbl1q_s8((int8x16_t)a6, (int8x16_t)xmmword_185004870));
      v83.i32[0] = 0;
      v83.i16[2] = 0;
      v83.i16[3] = a6.i16[3];
      *(uint16x8_t *)v17 = vmaxq_u16(v85, (uint16x8_t)vqtbl1q_s8((int8x16_t)a6, (int8x16_t)xmmword_185004880));
      *(int32x4_t *)(v17 + 16) = a8;
      *(uint16x4_t *)a6.i8 = vmax_u16(*(uint16x4_t *)v87.i8, *(uint16x4_t *)v83.i8);
      *(_QWORD *)(v17 + 32) = a6.i64[0];
      v17 += 40;
      v21 += 4;
      a11 = v118;
    }
    while (v21 <= v117);
    v19 = v118 & 0x7FFFFFFC;
  }
  else
  {
    v19 = 0;
  }
  if (v19 < a11)
  {
    v94.i64[0] = 0x200000002000;
    v94.i64[1] = 0x200000002000;
    do
    {
      if ((int)v18 >= 2)
      {
        v100 = 0;
        v95 = 0;
        v96 = 0;
        v97 = 0;
        v98 = 0;
        LODWORD(result) = 0;
        v99 = (unsigned int *)v120;
        v101 = (5 * v19);
        do
        {
          v102 = (_QWORD *)(a13 + 8 * v100);
          v103 = (int32x4_t *)(*v102 + 4 * v101);
          a8.i32[0] = v103[1].i32[0];
          v104 = (int32x4_t *)(v102[1] + 4 * v101);
          v13.i32[0] = v104[1].i32[0];
          v105 = *v99++;
          v106 = vdup_n_s16(v105);
          v14.i32[0] = v105;
          v107 = vdup_n_s16(HIWORD(v105));
          v15.i32[0] = HIWORD(v105);
          *(int8x8_t *)v13.i8 = veor_s8((int8x8_t)vmovn_s32(v13), (int8x8_t)0x8000800080008000);
          v16.i32[0] = result;
          v108 = vaddq_s32(vshll_n_s16(*(int16x4_t *)v14.i8, 0xFuLL), v16);
          v16.i64[0] = __PAIR64__(v96, v95);
          v16.i64[1] = __PAIR64__(v98, v97);
          v109 = vmlal_s16(vaddq_s32(vmlal_s16(vaddq_s32(vshll_n_s16(v106, 0xFuLL), v16), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v103), (int8x8_t)0x8000800080008000), v106), vshll_n_s16(v107, 0xFuLL)), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v104), (int8x8_t)0x8000800080008000), v107);
          v98 = v109.i32[3];
          v97 = v109.i32[2];
          v96 = v109.i32[1];
          v95 = v109.i32[0];
          a8 = vmlal_s16(vaddq_s32(vmlal_s16(v108, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(a8), (int8x8_t)0x8000800080008000), *(int16x4_t *)v14.i8), vshll_n_s16(v15, 0xFuLL)), *(int16x4_t *)v13.i8, v15);
          result = a8.u32[0];
          v110 = v100 + 4;
          v100 += 2;
        }
        while (v110 <= v18);
      }
      else
      {
        v95 = 0;
        v96 = 0;
        v97 = 0;
        v98 = 0;
        result = 0;
        v99 = (unsigned int *)v120;
      }
      if ((v18 & 1) != 0)
      {
        v111 = (int32x4_t *)(*(_QWORD *)(a13 + 8 * ((int)v18 - 1)) + 4 * (5 * v19));
        a8.i32[0] = v111[1].i32[0];
        v112 = vdup_n_s16(*(unsigned __int16 *)v99);
        v13.i32[0] = *(unsigned __int16 *)v99;
        *(int8x8_t *)a8.i8 = veor_s8((int8x8_t)vmovn_s32(a8), (int8x8_t)0x8000800080008000);
        v14.i64[0] = __PAIR64__(v96, v95);
        v14.i64[1] = __PAIR64__(v98, v97);
        v113 = vaddq_s32(vshll_n_s16(v112, 0xFuLL), v14);
        v14.i32[0] = result;
        v114 = vmlal_s16(v113, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v111), (int8x8_t)0x8000800080008000), v112);
        v98 = v114.i32[3];
        v97 = v114.i32[2];
        v96 = v114.i32[1];
        v95 = v114.i32[0];
        result = vmlal_s16(vaddq_s32(vshll_n_s16(*(int16x4_t *)v13.i8, 0xFuLL), v14), *(int16x4_t *)a8.i8, *(int16x4_t *)v13.i8).u32[0];
      }
      v115.i64[0] = __PAIR64__(v96, v95);
      v115.i64[1] = __PAIR64__(v98, v97);
      *(int16x4_t *)v115.i8 = vqmovun_s32(vshrq_n_s32(vaddq_s32(v115, v94), 0xEuLL));
      a8.i32[0] = result;
      a8 = vshrq_n_s32(vaddq_s32(a8, v94), 0xEuLL);
      v116 = vqmovun_high_s32(*(int16x4_t *)v115.i8, a8);
      a6 = (int32x4_t)vqtbl2q_s8(*(int8x16x2_t *)(&a6 - 1), (int8x16_t)xmmword_185004840);
      *(_QWORD *)v17 = v115.i64[0];
      *(_WORD *)(v17 + 8) = vmaxvq_u16((uint16x8_t)a6);
      v17 += 10;
      ++v19;
    }
    while (v19 < a11);
  }
  return result;
}

uint64_t resample_vertical<int,unsigned short,1,(AlphaStyle)3>(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint16x4_t **a5, uint64_t a6)
{
  uint16x4_t *v6;
  uint16x4_t *v7;
  uint64_t v8;
  __int16 *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  const __int16 *v16;
  _QWORD *v17;
  int32x4_t *v18;
  int32x4_t *v19;
  unsigned int v20;
  int16x4_t v21;
  int32x4_t v22;
  int16x4_t v23;
  int32x4_t v24;
  uint64_t v25;
  int32x4_t *v26;
  int16x4_t v27;
  int32x4_t v28;
  int16x4_t v29;
  int16x4_t v30;
  uint16x4_t v31;
  int32x4_t v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  int16x4_t v39;

  v6 = *a5;
  v7 = a5[1];
  v8 = *(int *)(result + 4);
  v9 = (__int16 *)(result + 8);
  if (a4 >= 4)
  {
    v11 = 0;
    v12 = 4;
    v13.i64[0] = 0x200000002000;
    v13.i64[1] = 0x200000002000;
    do
    {
      v14 = 0uLL;
      v15 = 0uLL;
      v16 = v9;
      if ((int)v8 >= 2)
      {
        result = 0;
        v16 = v9;
        do
        {
          v17 = (_QWORD *)(a6 + 8 * result);
          v18 = (int32x4_t *)(*v17 + 8 * v11);
          v19 = (int32x4_t *)(v17[1] + 8 * v11);
          v20 = *(_DWORD *)v16;
          v16 += 2;
          v21 = vdup_n_s16(v20);
          v22 = vshll_n_s16(v21, 0xFuLL);
          v23 = vdup_n_s16(HIWORD(v20));
          v24 = vshll_n_s16(v23, 0xFuLL);
          v15 = vaddq_s32(vmlal_s16(vaddq_s32(vmlal_s16(v15, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v18[1]), (int8x8_t)0x8000800080008000), v21), v22), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v19[1]), (int8x8_t)0x8000800080008000), v23), v24);
          v14 = vaddq_s32(vmlal_s16(vaddq_s32(vmlal_s16(v14, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v18), (int8x8_t)0x8000800080008000), v21), v22), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v19), (int8x8_t)0x8000800080008000), v23), v24);
          v25 = result + 4;
          result += 2;
        }
        while (v25 <= v8);
      }
      if ((v8 & 1) != 0)
      {
        v26 = (int32x4_t *)(*(_QWORD *)(a6 + 8 * ((int)v8 - 1)) + 8 * v11);
        v27 = vld1_dup_s16(v16);
        v28 = vshll_n_s16(v27, 0xFuLL);
        v15 = vaddq_s32(vmlal_s16(v15, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v26[1]), (int8x8_t)0x8000800080008000), v27), v28);
        v14 = vaddq_s32(vmlal_s16(v14, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v26), (int8x8_t)0x8000800080008000), v27), v28);
      }
      v11 += 4;
      v29 = vqmovun_s32(vshrq_n_s32(vaddq_s32(v14, v13), 0xEuLL));
      v30 = vqmovun_s32(vshrq_n_s32(vaddq_s32(v15, v13), 0xEuLL));
      v31 = (uint16x4_t)vuzp1_s16(v29, v30);
      *v6++ = v31;
      *v7++ = vmax_u16((uint16x4_t)vuzp2_s16(v29, v30), v31);
      v12 += 4;
    }
    while (v12 <= a4);
    v10 = a4 & 0x7FFFFFFC;
  }
  else
  {
    v10 = 0;
  }
  for (; v10 < a4; ++v10)
  {
    if ((int)v8 >= 2)
    {
      v34 = 0;
      v35 = (2 * v10);
      v32 = 0uLL;
      v33 = (unsigned int *)v9;
      do
      {
        result = 4 * v35;
        v36 = *v33++;
        v32 = vmlal_s16(vmlal_s16(v32, vuzp1_s16((int16x4_t)veor_s8(*(int8x8_t *)(*(_QWORD *)(a6 + 8 * v34) + 4 * v35), (int8x8_t)0x800000008000), (int16x4_t)0x200000002000), vdup_n_s16(v36)), vuzp1_s16((int16x4_t)veor_s8(*(int8x8_t *)(*(_QWORD *)(a6 + 8 * v34 + 8) + 4 * v35), (int8x8_t)0x800000008000), (int16x4_t)0x200000002000), vdup_n_s16(HIWORD(v36)));
        *(int32x2_t *)v32.i8 = vadd_s32(*(int32x2_t *)v32.i8, vadd_s32(vshl_n_s32(vshr_n_s32(vshl_n_s32(vdup_n_s32(v36), 0x10uLL), 0x10uLL), 0xFuLL), vshl_n_s32(vshr_n_s32(vshl_n_s32(vdup_n_s32(HIWORD(v36)), 0x10uLL), 0x10uLL), 0xFuLL)));
        v37 = v34 + 4;
        v34 += 2;
      }
      while (v37 <= v8);
    }
    else
    {
      v32 = 0uLL;
      v33 = (unsigned int *)v9;
    }
    if ((v8 & 1) != 0)
    {
      v38 = *(unsigned __int16 *)v33;
      v32 = vmlal_s16(v32, vuzp1_s16((int16x4_t)veor_s8(*(int8x8_t *)(*(_QWORD *)(a6 + 8 * ((int)v8 - 1)) + 4 * (2 * v10)), (int8x8_t)0x800000008000), (int16x4_t)0x200000002000), vdup_n_s16(v38));
      *(int32x2_t *)v32.i8 = vadd_s32(*(int32x2_t *)v32.i8, vshl_n_s32(vshr_n_s32(vshl_n_s32(vdup_n_s32(v38), 0x10uLL), 0x10uLL), 0xFuLL));
    }
    *(int32x2_t *)v32.i8 = vadd_s32(*(int32x2_t *)v32.i8, (int32x2_t)0x200000002000);
    v39 = vqmovun_s32(vshrq_n_s32(v32, 0xEuLL));
    v6->i16[0] = v39.i16[0];
    v6 = (uint16x4_t *)((char *)v6 + 2);
    v7->i16[0] = vmax_u16((uint16x4_t)vdup_lane_s16(v39, 1), (uint16x4_t)v39).u16[0];
    v7 = (uint16x4_t *)((char *)v7 + 2);
  }
  return result;
}

uint64_t resample_vertical<int,unsigned short,3,(AlphaStyle)3>(uint64_t result, uint64_t a2, uint64_t a3, int a4, int16x4_t **a5, uint64_t a6)
{
  int16x4_t *v6;
  int16x4_t *v7;
  uint64_t v8;
  const __int16 *v9;
  signed int v10;
  int v11;
  unint64_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  const __int16 *v16;
  uint64_t v17;
  _QWORD *v18;
  int32x4_t *v19;
  int32x4_t *v20;
  unsigned int v21;
  int16x4_t v22;
  int32x4_t v23;
  int16x4_t v24;
  int32x4_t v25;
  uint64_t v26;
  int32x4_t *v27;
  int16x4_t v28;
  int32x4_t v29;
  int16x4_t v30;
  int16x4_t v31;
  uint16x4_t v32;
  uint16x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  const __int16 *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  int16x4_t v40;
  int16x4_t v41;
  uint64_t v42;
  int16x4_t v43;
  int16x4_t v44;

  v6 = *a5;
  v7 = a5[1];
  v8 = *(int *)(result + 4);
  v9 = (const __int16 *)(result + 8);
  if (a4 >= 2)
  {
    v11 = 0;
    v12 = 2;
    v13.i64[0] = 0x200000002000;
    v13.i64[1] = 0x200000002000;
    do
    {
      v14 = 0uLL;
      v15 = 0uLL;
      v16 = v9;
      if ((int)v8 >= 2)
      {
        result = 0;
        v17 = (4 * v11) & 0xFFFFFFF8;
        v16 = v9;
        do
        {
          v18 = (_QWORD *)(a6 + 8 * result);
          v19 = (int32x4_t *)(*v18 + 4 * v17);
          v20 = (int32x4_t *)(v18[1] + 4 * v17);
          v21 = *(_DWORD *)v16;
          v16 += 2;
          v22 = vdup_n_s16(v21);
          v23 = vshll_n_s16(v22, 0xFuLL);
          v24 = vdup_n_s16(HIWORD(v21));
          v25 = vshll_n_s16(v24, 0xFuLL);
          v15 = vaddq_s32(vmlal_s16(vaddq_s32(vmlal_s16(v15, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v19[1]), (int8x8_t)0x8000800080008000), v22), v23), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v20[1]), (int8x8_t)0x8000800080008000), v24), v25);
          v14 = vaddq_s32(vmlal_s16(vaddq_s32(vmlal_s16(v14, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v19), (int8x8_t)0x8000800080008000), v22), v23), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v20), (int8x8_t)0x8000800080008000), v24), v25);
          v26 = result + 4;
          result += 2;
        }
        while (v26 <= v8);
      }
      if ((v8 & 1) != 0)
      {
        result = (4 * v11) & 0xFFFFFFF8;
        v27 = (int32x4_t *)(*(_QWORD *)(a6 + 8 * ((int)v8 - 1)) + 4 * result);
        v28 = vld1_dup_s16(v16);
        v29 = vshll_n_s16(v28, 0xFuLL);
        v15 = vaddq_s32(vmlal_s16(v15, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v27[1]), (int8x8_t)0x8000800080008000), v28), v29);
        v14 = vaddq_s32(vmlal_s16(v14, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v27), (int8x8_t)0x8000800080008000), v28), v29);
      }
      v11 += 2;
      v30 = vqmovun_s32(vshrq_n_s32(vaddq_s32(v14, v13), 0xEuLL));
      v31 = vqmovun_s32(vshrq_n_s32(vaddq_s32(v15, v13), 0xEuLL));
      v32 = vpmax_u16((uint16x4_t)v30, (uint16x4_t)v31);
      v33 = (uint16x4_t)vuzp2_s16(vuzp2_s16(v30, v31), v30);
      v30.i16[3] = v31.i16[0];
      *v6 = v30;
      v6[1].i32[0] = vext_s8((int8x8_t)v31, *(int8x8_t *)v13.i8, 2uLL).u32[0];
      v6 = (int16x4_t *)((char *)v6 + 12);
      v7->i32[0] = vmax_u16(v33, vpmax_u16(v32, *(uint16x4_t *)v13.i8)).u32[0];
      v7 = (int16x4_t *)((char *)v7 + 4);
      v12 += 2;
    }
    while (v12 <= a4);
    v10 = a4 & 0xFFFFFFFE;
  }
  else
  {
    v10 = 0;
  }
  if (v10 < a4)
  {
    v34.i64[0] = 0x200000002000;
    v34.i64[1] = 0x200000002000;
    do
    {
      v35 = 0uLL;
      v36 = v9;
      if ((int)v8 >= 2)
      {
        v37 = 0;
        v38 = (4 * v10);
        v36 = v9;
        do
        {
          result = 4 * v38;
          v39 = *(_DWORD *)v36;
          v36 += 2;
          v40 = vdup_n_s16(v39);
          v41 = vdup_n_s16(HIWORD(v39));
          v35 = vaddq_s32(vmlal_s16(vmlal_s16(v35, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*(int32x4_t *)(*(_QWORD *)(a6 + 8 * v37) + 4 * v38)), (int8x8_t)0x8000800080008000), v40), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*(int32x4_t *)(*(_QWORD *)(a6 + 8 * v37 + 8) + 4 * v38)), (int8x8_t)0x8000800080008000), v41), vaddq_s32(vshll_n_s16(v40, 0xFuLL), vshll_n_s16(v41, 0xFuLL)));
          v42 = v37 + 4;
          v37 += 2;
        }
        while (v42 <= v8);
      }
      if ((v8 & 1) != 0)
      {
        v43 = vld1_dup_s16(v36);
        v35 = vaddq_s32(vmlal_s16(v35, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*(int32x4_t *)(*(_QWORD *)(a6 + 8 * ((int)v8 - 1))+ 4 * (4 * v10))), (int8x8_t)0x8000800080008000), v43), vshll_n_s16(v43, 0xFuLL));
      }
      v44 = vqmovun_s32(vshrq_n_s32(vaddq_s32(v35, v34), 0xEuLL));
      v6->i32[0] = v44.i32[0];
      v6->i16[2] = v44.i16[2];
      v6 = (int16x4_t *)((char *)v6 + 6);
      v7->i16[0] = vmax_u16((uint16x4_t)vdup_lane_s16(v44, 3), vpmax_u16(vpmax_u16((uint16x4_t)v44, *(uint16x4_t *)v34.i8), *(uint16x4_t *)v34.i8)).u16[0];
      v7 = (int16x4_t *)((char *)v7 + 2);
      ++v10;
    }
    while (v10 < a4);
  }
  return result;
}

uint64_t resample_vertical<int,unsigned short,4,(AlphaStyle)3>(uint64_t result, double a2, double a3, double a4, int32x4_t a5, double a6, int32x4_t a7, double a8, uint16x8_t a9, uint64_t a10, uint64_t a11, int a12, uint64_t a13, uint64_t a14)
{
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  uint16x8_t *v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int32x4_t v23;
  __int32 v24;
  __int32 v25;
  __int32 v26;
  __int32 v27;
  __int32 v28;
  __int32 v29;
  __int32 v30;
  __int32 v31;
  __int32 v32;
  __int32 v33;
  __int32 v34;
  __int32 v35;
  __int32 v36;
  __int32 v37;
  __int32 v38;
  __int32 v39;
  __int32 v40;
  __int32 v41;
  __int32 v42;
  const __int16 *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  int32x4_t *v47;
  uint64_t v48;
  unsigned int v49;
  int16x4_t v50;
  int16x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  uint64_t v61;
  int32x4_t *v62;
  int16x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  __int32 v74;
  __int32 v75;
  int16x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int16x4_t v80;
  uint16x8_t v81;
  uint16x8_t v82;
  int32x4_t v83;
  __int32 v84;
  __int32 v85;
  __int32 v86;
  __int32 v87;
  unsigned int *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  int32x4_t v93;
  int32x4_t *v94;
  unsigned int v95;
  int16x4_t v96;
  int16x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  uint64_t v100;
  int32x4_t *v101;
  unsigned int v102;
  int16x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  unint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  __int16 *v111;
  int8x16x2_t v112;

  v17 = *(uint16x8_t **)a13;
  v18 = *(_QWORD **)(a13 + 8);
  v19 = *(int *)(result + 4);
  v111 = (__int16 *)(result + 8);
  if (a12 >= 4)
  {
    v21 = 0;
    v107 = a12;
    v22 = 4;
    v23.i64[0] = 0x200000002000;
    v23.i64[1] = 0x200000002000;
    a5.i32[0] = -2147450880;
    a5.i16[2] = 0x8000;
    a5.i16[3] = 0x8000;
    v108 = a12;
    do
    {
      v109 = v22;
      v110 = v21;
      if ((int)v19 >= 2)
      {
        v44 = 0;
        v24 = 0;
        v25 = 0;
        v26 = 0;
        v27 = 0;
        v28 = 0;
        v29 = 0;
        v30 = 0;
        LODWORD(result) = 0;
        v31 = 0;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = 0;
        v36 = 0;
        v37 = 0;
        v38 = 0;
        v39 = 0;
        v40 = 0;
        v41 = 0;
        v42 = 0;
        v45 = (5 * (_DWORD)v21) & 0xFFFFFFFC;
        v43 = v111;
        do
        {
          v46 = (_QWORD *)(a14 + 8 * v44);
          v47 = (int32x4_t *)(*v46 + 4 * v45);
          v48 = v46[1] + 4 * v45;
          v14 = *(int32x4_t *)(v48 + 16);
          v49 = *(_DWORD *)v43;
          v43 += 2;
          v50 = vdup_n_s16(v49);
          v51 = vdup_n_s16(HIWORD(v49));
          v52 = vshlq_n_s32(vaddl_s16(v50, v51), 0xFuLL);
          v53.i64[0] = __PAIR64__(v25, v24);
          v53.i64[1] = __PAIR64__(v27, v26);
          v54.i64[0] = __PAIR64__(v29, v28);
          v54.i64[1] = __PAIR64__(result, v30);
          v55.i64[0] = __PAIR64__(v32, v31);
          v55.i64[1] = __PAIR64__(v34, v33);
          v56.i64[0] = __PAIR64__(v36, v35);
          v56.i64[1] = __PAIR64__(v38, v37);
          v57.i64[0] = __PAIR64__(v40, v39);
          v57.i64[1] = __PAIR64__(v42, v41);
          v58 = vmlal_s16(vmlal_s16(vaddq_s32(v52, v53), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v47), *(int8x8_t *)a5.i8), v50), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*(int32x4_t *)v48), *(int8x8_t *)a5.i8), v51);
          v27 = v58.i32[3];
          v26 = v58.i32[2];
          v25 = v58.i32[1];
          v16 = vmlal_s16(vmlal_s16(vaddq_s32(v52, v54), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v47[1]), *(int8x8_t *)a5.i8), v50), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v14), *(int8x8_t *)a5.i8), v51);
          result = v16.u32[3];
          v30 = v16.i32[2];
          v29 = v16.i32[1];
          v24 = v58.i32[0];
          v59 = vmlal_s16(vmlal_s16(vaddq_s32(v52, v55), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v47[2]), *(int8x8_t *)a5.i8), v50), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*(int32x4_t *)(v48 + 32)), *(int8x8_t *)a5.i8), v51);
          v34 = v59.i32[3];
          v33 = v59.i32[2];
          v28 = v16.i32[0];
          v32 = v59.i32[1];
          v60 = vmlal_s16(vmlal_s16(vaddq_s32(v52, v56), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v47[3]), *(int8x8_t *)a5.i8), v50), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*(int32x4_t *)(v48 + 48)), *(int8x8_t *)a5.i8), v51);
          v38 = v60.i32[3];
          v31 = v59.i32[0];
          v37 = v60.i32[2];
          v36 = v60.i32[1];
          v15 = vmlal_s16(vmlal_s16(vaddq_s32(v52, v57), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v47[4]), *(int8x8_t *)a5.i8), v50), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*(int32x4_t *)(v48 + 64)), *(int8x8_t *)a5.i8), v51);
          v42 = v15.i32[3];
          v41 = v15.i32[2];
          v40 = v15.i32[1];
          v35 = v60.i32[0];
          v39 = v15.i32[0];
          v61 = v44 + 4;
          v44 += 2;
        }
        while (v61 <= v19);
      }
      else
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        v27 = 0;
        v28 = 0;
        v29 = 0;
        v30 = 0;
        result = 0;
        v31 = 0;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = 0;
        v36 = 0;
        v37 = 0;
        v38 = 0;
        v39 = 0;
        v40 = 0;
        v41 = 0;
        v42 = 0;
        v43 = v111;
      }
      if ((v19 & 1) != 0)
      {
        v62 = (int32x4_t *)(*(_QWORD *)(a14 + 8 * ((int)v19 - 1)) + 4 * ((5 * (_DWORD)v110) & 0xFFFFFFFC));
        v63 = vld1_dup_s16(v43);
        v64.i64[0] = __PAIR64__(v40, v39);
        v15 = vshll_n_s16(v63, 0xFuLL);
        v64.i64[1] = __PAIR64__(v42, v41);
        v65.i64[0] = __PAIR64__(v36, v35);
        v65.i64[1] = __PAIR64__(v38, v37);
        v66.i64[0] = __PAIR64__(v32, v31);
        v66.i64[1] = __PAIR64__(v34, v33);
        v67.i64[0] = __PAIR64__(v29, v28);
        v67.i64[1] = __PAIR64__(result, v30);
        v68.i64[0] = __PAIR64__(v25, v24);
        v68.i64[1] = __PAIR64__(v27, v26);
        v69 = vmlal_s16(vaddq_s32(v15, v68), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v62), *(int8x8_t *)a5.i8), v63);
        v27 = v69.i32[3];
        v26 = v69.i32[2];
        v25 = v69.i32[1];
        v70 = vmlal_s16(vaddq_s32(v15, v67), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v62[1]), *(int8x8_t *)a5.i8), v63);
        result = v70.u32[3];
        v24 = v69.i32[0];
        v30 = v70.i32[2];
        v29 = v70.i32[1];
        v16 = vmlal_s16(vaddq_s32(v15, v66), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v62[2]), *(int8x8_t *)a5.i8), v63);
        v34 = v16.i32[3];
        v33 = v16.i32[2];
        v32 = v16.i32[1];
        v28 = v70.i32[0];
        v71 = vmlal_s16(vaddq_s32(v15, v65), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v62[3]), *(int8x8_t *)a5.i8), v63);
        v38 = v71.i32[3];
        v37 = v71.i32[2];
        v31 = v16.i32[0];
        v36 = v71.i32[1];
        v72 = vmlal_s16(vaddq_s32(v15, v64), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v62[4]), *(int8x8_t *)a5.i8), v63);
        v42 = v72.i32[3];
        v35 = v71.i32[0];
        v41 = v72.i32[2];
        v40 = v72.i32[1];
        v39 = v72.i32[0];
      }
      v73.i64[0] = __PAIR64__(v25, v24);
      v73.i64[1] = __PAIR64__(v27, v26);
      v21 = v110 + 4;
      v74 = v28;
      v75 = v29;
      v76 = vqmovun_s32(vshrq_n_s32(vaddq_s32(v73, v23), 0xEuLL));
      a7.i64[1] = __PAIR64__(result, v30);
      v77 = vshrq_n_s32(vaddq_s32(a7, v23), 0xEuLL);
      a7.i16[0] = vqmovun_s32(v77).u16[0];
      v112.val[0] = (int8x16_t)vqmovun_high_s32(v76, v77);
      v77.i64[0] = __PAIR64__(v32, v31);
      v77.i64[1] = __PAIR64__(v34, v33);
      *(int16x4_t *)v77.i8 = vqmovun_s32(vshrq_n_s32(vaddq_s32(v77, v23), 0xEuLL));
      v78.i64[0] = __PAIR64__(v36, v35);
      v78.i64[1] = __PAIR64__(v38, v37);
      v79 = vshrq_n_s32(vaddq_s32(v78, v23), 0xEuLL);
      v80 = vqmovun_s32(v79);
      v112.val[1] = (int8x16_t)vqmovun_high_s32(*(int16x4_t *)v77.i8, v79);
      v79.i64[0] = __PAIR64__(v40, v39);
      v79.i64[1] = __PAIR64__(v42, v41);
      *(int16x4_t *)v14.i8 = vqmovun_s32(vshrq_n_s32(vaddq_s32(v79, v23), 0xEuLL));
      v81 = (uint16x8_t)vqtbl2q_s8(v112, (int8x16_t)xmmword_185004890);
      v80.i16[3] = v14.i16[3];
      a7.i16[1] = v77.i16[1];
      a7.i32[1] = v80.i32[1];
      v82 = (uint16x8_t)vqtbl2q_s8(*(int8x16x2_t *)(&v14 - 1), (int8x16_t)xmmword_1850048A0);
      a9 = vpmaxq_u16(v81, v82);
      *(uint16x4_t *)a9.i8 = vpmax_u16(*(uint16x4_t *)a9.i8, (uint16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)a9, (int8x16_t)a9, 8uLL));
      *(uint16x4_t *)a7.i8 = vmax_u16(*(uint16x4_t *)a7.i8, *(uint16x4_t *)a9.i8);
      *v17 = v81;
      v17[1] = v82;
      v17 += 2;
      *v18++ = a7.i64[0];
      v22 = v109 + 4;
      a12 = v108;
    }
    while (v109 + 4 <= v107);
    v20 = v108 & 0x7FFFFFFC;
  }
  else
  {
    v20 = 0;
  }
  if (v20 < a12)
  {
    v83.i64[0] = 0x200000002000;
    v83.i64[1] = 0x200000002000;
    do
    {
      if ((int)v19 >= 2)
      {
        v89 = 0;
        v84 = 0;
        v85 = 0;
        v86 = 0;
        v87 = 0;
        LODWORD(result) = 0;
        v88 = (unsigned int *)v111;
        v90 = (5 * v20);
        do
        {
          v91 = (_QWORD *)(a14 + 8 * v89);
          v92 = *v91 + 4 * v90;
          v93 = *(int32x4_t *)v92;
          a5.i32[0] = *(_DWORD *)(v92 + 16);
          v94 = (int32x4_t *)(v91[1] + 4 * v90);
          a7.i32[0] = v94[1].i32[0];
          v95 = *v88++;
          v96 = vdup_n_s16(v95);
          a9.i32[0] = v95;
          v97 = vdup_n_s16(HIWORD(v95));
          v15.i32[0] = HIWORD(v95);
          *(int8x8_t *)a7.i8 = veor_s8((int8x8_t)vmovn_s32(a7), (int8x8_t)0x8000800080008000);
          v16.i32[0] = result;
          v98 = vaddq_s32(vshll_n_s16(*(int16x4_t *)a9.i8, 0xFuLL), v16);
          v16.i64[0] = __PAIR64__(v85, v84);
          v16.i64[1] = __PAIR64__(v87, v86);
          v99 = vmlal_s16(vaddq_s32(vmlal_s16(vaddq_s32(vshll_n_s16(v96, 0xFuLL), v16), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(v93), (int8x8_t)0x8000800080008000), v96), vshll_n_s16(v97, 0xFuLL)), (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v94), (int8x8_t)0x8000800080008000), v97);
          v87 = v99.i32[3];
          v86 = v99.i32[2];
          v85 = v99.i32[1];
          v84 = v99.i32[0];
          a5 = vmlal_s16(vaddq_s32(vmlal_s16(v98, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(a5), (int8x8_t)0x8000800080008000), *(int16x4_t *)a9.i8), vshll_n_s16(*(int16x4_t *)v15.i8, 0xFuLL)), *(int16x4_t *)a7.i8, *(int16x4_t *)v15.i8);
          result = a5.u32[0];
          v100 = v89 + 4;
          v89 += 2;
        }
        while (v100 <= v19);
      }
      else
      {
        v84 = 0;
        v85 = 0;
        v86 = 0;
        v87 = 0;
        result = 0;
        v88 = (unsigned int *)v111;
      }
      if ((v19 & 1) != 0)
      {
        v101 = (int32x4_t *)(*(_QWORD *)(a14 + 8 * ((int)v19 - 1)) + 4 * (5 * v20));
        a5.i32[0] = v101[1].i32[0];
        v102 = *(unsigned __int16 *)v88;
        v103 = vdup_n_s16(v102);
        a7.i32[0] = v102;
        *(int8x8_t *)a5.i8 = veor_s8((int8x8_t)vmovn_s32(a5), (int8x8_t)0x8000800080008000);
        a9.i64[0] = __PAIR64__(v85, v84);
        a9.i64[1] = __PAIR64__(v87, v86);
        v104 = vaddq_s32(vshll_n_s16(v103, 0xFuLL), (int32x4_t)a9);
        a9.i32[0] = result;
        v105 = vmlal_s16(v104, (int16x4_t)veor_s8((int8x8_t)vmovn_s32(*v101), (int8x8_t)0x8000800080008000), v103);
        v87 = v105.i32[3];
        v86 = v105.i32[2];
        v85 = v105.i32[1];
        v84 = v105.i32[0];
        result = vmlal_s16(vaddq_s32(vshll_n_s16(*(int16x4_t *)a7.i8, 0xFuLL), (int32x4_t)a9), *(int16x4_t *)a5.i8, *(int16x4_t *)a7.i8).u32[0];
      }
      v106.i64[0] = __PAIR64__(v85, v84);
      v106.i64[1] = __PAIR64__(v87, v86);
      *(int16x4_t *)v106.i8 = vqmovun_s32(vshrq_n_s32(vaddq_s32(v106, v83), 0xEuLL));
      a5.i32[0] = result;
      a5 = vshrq_n_s32(vaddq_s32(a5, v83), 0xEuLL);
      *(int16x4_t *)a5.i8 = vqmovun_s32(a5);
      v17->i64[0] = v106.i64[0];
      v17 = (uint16x8_t *)((char *)v17 + 8);
      *(_WORD *)v18 = vmax_u16(*(uint16x4_t *)a5.i8, vpmax_u16(vpmax_u16(*(uint16x4_t *)v106.i8, *(uint16x4_t *)v83.i8), *(uint16x4_t *)v83.i8)).u16[0];
      v18 = (_QWORD *)((char *)v18 + 2);
      ++v20;
    }
    while (v20 < a12);
  }
  return result;
}

uint64_t resample_vertical<half,half,1,(AlphaStyle)0>(uint64_t result, double a2, double a3, float32x4_t _Q2, float32x4_t _Q3, uint64_t a6, uint64_t a7, int a8, float16x8_t **a9, uint64_t a10)
{
  float16x8_t *v10;
  uint64_t v11;
  float *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t i;
  float32x4_t v16;
  float *v17;
  uint64_t v18;
  _QWORD *v19;
  float16x8_t v20;
  float16x8_t v21;
  float32x4_t v22;
  float32x2_t v23;
  float16x8_t v24;
  float32x4_t v25;
  uint64_t j;
  uint64_t v27;
  float32x4_t v28;
  float *v29;
  uint64_t v30;
  uint64_t *v31;
  float32x2_t v32;
  uint64_t v33;
  float32x2_t *v35;
  uint64_t v36;
  _QWORD *v37;
  float32x2_t v42;
  uint64_t v43;

  v10 = *a9;
  v11 = *(int *)(result + 4);
  v12 = (float *)(result + 8);
  if (a8 >= 8)
  {
    v14 = 0;
    for (i = 8; i <= a8; i += 8)
    {
      v16 = 0uLL;
      _Q2 = 0uLL;
      v17 = v12;
      if ((int)v11 >= 2)
      {
        v18 = 0;
        v17 = v12;
        do
        {
          v19 = (_QWORD *)(a10 + 8 * v18);
          v20 = *(float16x8_t *)(*v19 + 2 * v14);
          v21 = *(float16x8_t *)(v19[1] + 2 * v14);
          v22 = vcvt_hight_f32_f16(v20);
          _Q3 = vcvtq_f32_f16(*(float16x4_t *)v20.i8);
          v23 = *(float32x2_t *)v17;
          v17 += 2;
          _Q2 = vmlaq_lane_f32(vmlaq_n_f32(_Q2, v22, v23.f32[0]), vcvt_hight_f32_f16(v21), v23, 1);
          v16 = vmlaq_lane_f32(vmlaq_n_f32(v16, _Q3, v23.f32[0]), vcvtq_f32_f16(*(float16x4_t *)v21.i8), v23, 1);
          result = v18 + 4;
          v18 += 2;
        }
        while (result <= v11);
      }
      if ((v11 & 1) != 0)
      {
        v24 = *(float16x8_t *)(*(_QWORD *)(a10 + 8 * ((int)v11 - 1)) + 2 * v14);
        v25 = vcvt_hight_f32_f16(v24);
        _Q3 = vcvtq_f32_f16(*(float16x4_t *)v24.i8);
        _Q2 = vaddq_f32(vmlaq_n_f32(_Q2, v25, *v17), (float32x4_t)0);
        v16 = vaddq_f32(vmlaq_n_f32(v16, _Q3, *v17), (float32x4_t)0);
      }
      v14 += 8;
      *v10++ = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v16), _Q2);
    }
    v13 = a8 & 0xFFFFFFF8;
  }
  else
  {
    v13 = 0;
  }
  for (j = v13 | 4; (int)j <= a8; j += 4)
  {
    v27 = 2 * v13;
    v28 = 0uLL;
    v29 = v12;
    if ((int)v11 >= 2)
    {
      v30 = 0;
      v29 = v12;
      do
      {
        v31 = (uint64_t *)(a10 + 8 * v30);
        result = *v31;
        _Q2 = vcvtq_f32_f16(*(float16x4_t *)(*v31 + v27));
        _Q3 = vcvtq_f32_f16(*(float16x4_t *)(v31[1] + v27));
        v32 = *(float32x2_t *)v29;
        v29 += 2;
        v28 = vmlaq_lane_f32(vmlaq_n_f32(v28, _Q2, v32.f32[0]), _Q3, v32, 1);
        v33 = v30 + 4;
        v30 += 2;
      }
      while (v33 <= v11);
    }
    if ((v11 & 1) != 0)
    {
      _Q2 = vcvtq_f32_f16(*(float16x4_t *)(*(_QWORD *)(a10 + 8 * ((int)v11 - 1)) + v27));
      v28 = vaddq_f32(vmlaq_n_f32(v28, _Q2, *v29), (float32x4_t)0);
    }
    *(float16x4_t *)v10->i8 = vcvt_f16_f32(v28);
    v10 = (float16x8_t *)((char *)v10 + 8);
    v13 = j;
  }
  for (; (int)v13 < a8; ++v13)
  {
    _D1 = 0;
    v35 = (float32x2_t *)v12;
    if ((int)v11 >= 2)
    {
      v36 = 0;
      _D1 = 0;
      v35 = (float32x2_t *)v12;
      do
      {
        v37 = (_QWORD *)(a10 + 8 * v36);
        _Q2.i16[0] = *(_WORD *)(*v37 + 2 * v13);
        _Q3.i16[0] = *(_WORD *)(v37[1] + 2 * v13);
        __asm
        {
          FCVT            S2, H2
          FCVT            S3, H3
        }
        v42 = *v35++;
        _D1 = vmla_lane_f32(vmla_f32(_D1, *(float32x2_t *)_Q2.f32, v42), *(float32x2_t *)_Q3.f32, v42, 1);
        v43 = v36 + 4;
        v36 += 2;
      }
      while (v43 <= v11);
    }
    if ((v11 & 1) != 0)
    {
      _Q2.i16[0] = *(_WORD *)(*(_QWORD *)(a10 + 8 * ((int)v11 - 1)) + 2 * v13);
      __asm { FCVT            S2, H2 }
      _Q3.i32[0] = v35->i32[0];
      _D1.i32[0] = vadd_f32(vmla_f32(_D1, *(float32x2_t *)_Q2.f32, *(float32x2_t *)_Q3.f32), 0).u32[0];
    }
    __asm { FCVT            H1, S1 }
    v10->i16[0] = _H1;
    v10 = (float16x8_t *)((char *)v10 + 2);
  }
  return result;
}

uint64_t resample_vertical<half,half,3,(AlphaStyle)0>(uint64_t result, double a2, double a3, float32x4_t a4, float32x4_t a5, uint64_t a6, uint64_t a7, int a8, float16x8_t **a9, uint64_t a10)
{
  float16x8_t *v10;
  uint64_t v11;
  float *v12;
  int v13;
  int v14;
  unint64_t i;
  float32x4_t v16;
  __int32 v17;
  __int32 v18;
  __int32 v19;
  unsigned __int32 v20;
  unsigned __int32 v21;
  unsigned __int32 v22;
  float32x4_t v23;
  __int32 v24;
  __int32 v25;
  float *v26;
  __int32 v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  float16x4_t *v31;
  float16x4_t *v32;
  float32x2_t v33;
  float16x4_t *v34;
  float32x4_t v35;
  float *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  float32x2_t v42;
  uint64_t v43;
  uint64_t v44;
  int16x4_t v45;

  v10 = *a9;
  v11 = *(int *)(result + 4);
  v12 = (float *)(result + 8);
  if (a8 >= 4)
  {
    v14 = 0;
    for (i = 4; i <= a8; i += 4)
    {
      if ((int)v11 >= 2)
      {
        v28 = 0;
        v16.i32[0] = 0;
        v17 = 0;
        v18 = 0;
        v29 = (3 * v14) & 0xFFFFFFFC;
        v19 = 0;
        v26 = v12;
        a5.i32[0] = 0;
        v20 = 0;
        v21 = 0;
        v22 = 0;
        v23.i32[0] = 0;
        v24 = 0;
        v25 = 0;
        v27 = 0;
        do
        {
          v30 = (_QWORD *)(a10 + 8 * v28);
          v31 = (float16x4_t *)(*v30 + 2 * v29);
          v32 = (float16x4_t *)(v30[1] + 2 * v29);
          v33 = *(float32x2_t *)v26;
          v26 += 2;
          v23.i32[1] = v24;
          v23.i64[1] = __PAIR64__(v27, v25);
          a5.i32[1] = v20;
          a5.i64[1] = __PAIR64__(v22, v21);
          v16.i32[1] = v17;
          v16.i64[1] = __PAIR64__(v19, v18);
          v16 = vmlaq_lane_f32(vmlaq_n_f32(v16, vcvtq_f32_f16(*v31), v33.f32[0]), vcvtq_f32_f16(*v32), v33, 1);
          v19 = v16.i32[3];
          v18 = v16.i32[2];
          v17 = v16.i32[1];
          a5 = vmlaq_lane_f32(vmlaq_n_f32(a5, vcvt_hight_f32_f16(*(float16x8_t *)v31->i8), v33.f32[0]), vcvt_hight_f32_f16(*(float16x8_t *)v32->i8), v33, 1);
          v22 = a5.u32[3];
          v21 = a5.u32[2];
          v20 = a5.u32[1];
          v23 = vmlaq_lane_f32(vmlaq_n_f32(v23, vcvtq_f32_f16(v31[2]), v33.f32[0]), vcvtq_f32_f16(v32[2]), v33, 1);
          v27 = v23.i32[3];
          v25 = v23.i32[2];
          v24 = v23.i32[1];
          result = v28 + 4;
          v28 += 2;
        }
        while (result <= v11);
      }
      else
      {
        v16.i32[0] = 0;
        v17 = 0;
        v18 = 0;
        v19 = 0;
        a5.i32[0] = 0;
        v20 = 0;
        v21 = 0;
        v22 = 0;
        v23.i32[0] = 0;
        v24 = 0;
        v25 = 0;
        v26 = v12;
        v27 = 0;
      }
      if ((v11 & 1) != 0)
      {
        v34 = (float16x4_t *)(*(_QWORD *)(a10 + 8 * ((int)v11 - 1)) + 2 * ((3 * v14) & 0xFFFFFFFC));
        v23.i32[1] = v24;
        v23.i64[1] = __PAIR64__(v27, v25);
        a5.i32[1] = v20;
        a5.i64[1] = __PAIR64__(v22, v21);
        v16.i32[1] = v17;
        v16.i64[1] = __PAIR64__(v19, v18);
        v16 = vaddq_f32(vmlaq_n_f32(v16, vcvtq_f32_f16(*v34), *v26), (float32x4_t)0);
        v19 = v16.i32[3];
        v18 = v16.i32[2];
        v17 = v16.i32[1];
        a5 = vaddq_f32(vmlaq_n_f32(a5, vcvt_hight_f32_f16(*(float16x8_t *)v34->i8), *v26), (float32x4_t)0);
        v22 = a5.u32[3];
        v21 = a5.u32[2];
        v20 = a5.u32[1];
        v23 = vaddq_f32(vmlaq_n_f32(v23, vcvtq_f32_f16(v34[2]), *v26), (float32x4_t)0);
        v27 = v23.i32[3];
        v25 = v23.i32[2];
        v24 = v23.i32[1];
      }
      v14 += 4;
      v16.i32[1] = v17;
      v16.i64[1] = __PAIR64__(v19, v18);
      a5.i32[1] = v20;
      a5.i64[1] = __PAIR64__(v22, v21);
      v23.i32[1] = v24;
      a4.i64[1] = __PAIR64__(v27, v25);
      *(float16x4_t *)a4.f32 = vcvt_f16_f32(a4);
      *v10 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v16), a5);
      v10[1].i64[0] = a4.i64[0];
      v10 = (float16x8_t *)((char *)v10 + 24);
    }
    v13 = a8 & 0x7FFFFFFC;
  }
  else
  {
    v13 = 0;
  }
  for (; v13 < a8; ++v13)
  {
    v35 = 0uLL;
    v36 = v12;
    if ((int)v11 >= 2)
    {
      v37 = 0;
      v38 = (3 * v13);
      v36 = v12;
      do
      {
        v39 = (_QWORD *)(a10 + 8 * v37);
        v40 = *v39 + 2 * v38;
        a4.i32[0] = *(_DWORD *)v40;
        a4.i16[2] = *(_WORD *)(v40 + 4);
        v41 = v39[1] + 2 * v38;
        a5.i32[0] = *(_DWORD *)v41;
        a5.i16[2] = *(_WORD *)(v41 + 4);
        a4 = vcvtq_f32_f16(*(float16x4_t *)a4.f32);
        a5 = vcvtq_f32_f16(*(float16x4_t *)a5.f32);
        v42 = *(float32x2_t *)v36;
        v36 += 2;
        v35 = vmlaq_lane_f32(vmlaq_n_f32(v35, a4, v42.f32[0]), a5, v42, 1);
        v43 = v37 + 4;
        v37 += 2;
      }
      while (v43 <= v11);
    }
    if ((v11 & 1) != 0)
    {
      v44 = *(_QWORD *)(a10 + 8 * ((int)v11 - 1)) + 2 * (3 * v13);
      a4.i32[0] = *(_DWORD *)v44;
      a4.i16[2] = *(_WORD *)(v44 + 4);
      a4 = vcvtq_f32_f16(*(float16x4_t *)a4.f32);
      v35 = vaddq_f32(vmlaq_n_f32(v35, a4, *v36), (float32x4_t)0);
    }
    v45 = (int16x4_t)vcvt_f16_f32(v35);
    v10->i32[0] = v45.i32[0];
    v10->i16[2] = vdup_lane_s16(v45, 2).u16[0];
    v10 = (float16x8_t *)((char *)v10 + 6);
  }
  return result;
}

uint64_t resample_vertical<half,half,4,(AlphaStyle)0>(uint64_t result, uint64_t a2, uint64_t a3, int a4, float16x8_t **a5, uint64_t a6)
{
  float16x8_t *v6;
  uint64_t v7;
  float *v8;
  signed int v9;
  int v10;
  unint64_t i;
  float32x4_t v12;
  float32x4_t v13;
  float *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  float16x8_t v18;
  float16x8_t v19;
  float32x2_t v20;
  float16x8_t v21;
  float32x4_t v22;
  float *v23;
  uint64_t v24;
  uint64_t *v25;
  float32x2_t v26;
  uint64_t v27;

  v6 = *a5;
  v7 = *(int *)(result + 4);
  v8 = (float *)(result + 8);
  if (a4 >= 2)
  {
    v10 = 0;
    for (i = 2; i <= a4; i += 2)
    {
      v12 = 0uLL;
      v13 = 0uLL;
      v14 = v8;
      if ((int)v7 >= 2)
      {
        v15 = 0;
        v16 = (4 * v10) & 0xFFFFFFF8;
        v14 = v8;
        do
        {
          v17 = (_QWORD *)(a6 + 8 * v15);
          v18 = *(float16x8_t *)(*v17 + 2 * v16);
          v19 = *(float16x8_t *)(v17[1] + 2 * v16);
          v20 = *(float32x2_t *)v14;
          v14 += 2;
          v13 = vmlaq_lane_f32(vmlaq_n_f32(v13, vcvt_hight_f32_f16(v18), v20.f32[0]), vcvt_hight_f32_f16(v19), v20, 1);
          v12 = vmlaq_lane_f32(vmlaq_n_f32(v12, vcvtq_f32_f16(*(float16x4_t *)v18.i8), v20.f32[0]), vcvtq_f32_f16(*(float16x4_t *)v19.i8), v20, 1);
          result = v15 + 4;
          v15 += 2;
        }
        while (result <= v7);
      }
      if ((v7 & 1) != 0)
      {
        v21 = *(float16x8_t *)(*(_QWORD *)(a6 + 8 * ((int)v7 - 1)) + 2 * ((4 * v10) & 0xFFFFFFF8));
        v13 = vaddq_f32(vmlaq_n_f32(v13, vcvt_hight_f32_f16(v21), *v14), (float32x4_t)0);
        v12 = vaddq_f32(vmlaq_n_f32(v12, vcvtq_f32_f16(*(float16x4_t *)v21.i8), *v14), (float32x4_t)0);
      }
      v10 += 2;
      *v6++ = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v12), v13);
    }
    v9 = a4 & 0xFFFFFFFE;
  }
  else
  {
    v9 = 0;
  }
  for (; v9 < a4; ++v9)
  {
    v22 = 0uLL;
    v23 = v8;
    if ((int)v7 >= 2)
    {
      v24 = 0;
      v23 = v8;
      do
      {
        v25 = (uint64_t *)(a6 + 8 * v24);
        result = *v25;
        v26 = *(float32x2_t *)v23;
        v23 += 2;
        v22 = vmlaq_lane_f32(vmlaq_n_f32(v22, vcvtq_f32_f16(*(float16x4_t *)(*v25 + 2 * (4 * v9))), v26.f32[0]), vcvtq_f32_f16(*(float16x4_t *)(v25[1] + 2 * (4 * v9))), v26, 1);
        v27 = v24 + 4;
        v24 += 2;
      }
      while (v27 <= v7);
    }
    if ((v7 & 1) != 0)
      v22 = vaddq_f32(vmlaq_n_f32(v22, vcvtq_f32_f16(*(float16x4_t *)(*(_QWORD *)(a6 + 8 * ((int)v7 - 1)) + 2 * (4 * v9))), *v23), (float32x4_t)0);
    *(float16x4_t *)v6->i8 = vcvt_f16_f32(v22);
    v6 = (float16x8_t *)((char *)v6 + 8);
  }
  return result;
}

uint64_t resample_vertical<half,half,2,(AlphaStyle)1>(uint64_t result, double a2, double a3, double a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, uint64_t a8, uint64_t a9, int a10, __n128 **a11, uint64_t a12)
{
  __n128 *v12;
  uint64_t v13;
  float *v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  int32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float *v21;
  uint64_t v22;
  _QWORD *v23;
  float16x8_t v24;
  float16x8_t v25;
  float32x2_t v26;
  float16x8_t v27;
  int32x4_t v28;
  float32x4_t v29;
  float *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  float32x2_t v34;
  uint64_t v35;
  float v36;
  float v37;
  float v38;

  v12 = *a11;
  v13 = *(int *)(result + 4);
  v14 = (float *)(result + 8);
  if (a10 >= 4)
  {
    v16 = 0;
    v17 = 4;
    v18 = vdupq_lane_s32((int32x2_t)0x80000000800000, 0);
    do
    {
      v19 = 0uLL;
      v20 = 0uLL;
      v21 = v14;
      if ((int)v13 >= 2)
      {
        v22 = 0;
        v21 = v14;
        do
        {
          v23 = (_QWORD *)(a12 + 8 * v22);
          v24 = *(float16x8_t *)(*v23 + 4 * v16);
          v25 = *(float16x8_t *)(v23[1] + 4 * v16);
          v26 = *(float32x2_t *)v21;
          v21 += 2;
          v20 = vmlaq_lane_f32(vmlaq_n_f32(v20, vcvt_hight_f32_f16(v24), v26.f32[0]), vcvt_hight_f32_f16(v25), v26, 1);
          v19 = vmlaq_lane_f32(vmlaq_n_f32(v19, vcvtq_f32_f16(*(float16x4_t *)v24.i8), v26.f32[0]), vcvtq_f32_f16(*(float16x4_t *)v25.i8), v26, 1);
          result = v22 + 4;
          v22 += 2;
        }
        while (result <= v13);
      }
      if ((v13 & 1) != 0)
      {
        v27 = *(float16x8_t *)(*(_QWORD *)(a12 + 8 * ((int)v13 - 1)) + 4 * v16);
        v20 = vaddq_f32(vmlaq_n_f32(v20, vcvt_hight_f32_f16(v27), *v21), (float32x4_t)0);
        v19 = vaddq_f32(vmlaq_n_f32(v19, vcvtq_f32_f16(*(float16x4_t *)v27.i8), *v21), (float32x4_t)0);
      }
      v16 += 4;
      v28 = (int32x4_t)vmaxnmq_f32(vmaxnmq_f32((float32x4_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v20), (float32x4_t)vuzp2q_s32((int32x4_t)v19, (int32x4_t)v20)), (float32x4_t)0);
      v29 = (float32x4_t)vzip2q_s32(v28, v18);
      a7 = (float32x4_t)vzip1q_s32(v28, v18);
      a6 = vminnmq_f32(vmaxnmq_f32(v20, v29), (float32x4_t)xmmword_1850048B0);
      a5 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vminnmq_f32(vmaxnmq_f32(v19, a7), (float32x4_t)xmmword_1850048B0)), a6);
      *v12++ = (__n128)a5;
      v17 += 4;
    }
    while (v17 <= a10);
    v15 = a10 & 0x7FFFFFFC;
  }
  else
  {
    v15 = 0;
  }
  for (; v15 < a10; ++v15)
  {
    a5.i64[0] = 0;
    v30 = v14;
    if ((int)v13 >= 2)
    {
      v31 = 0;
      v32 = (2 * v15);
      a5.i64[0] = 0;
      v30 = v14;
      do
      {
        v33 = (uint64_t *)(a12 + 8 * v31);
        result = *v33;
        a6.i32[0] = *(_DWORD *)(*v33 + 2 * v32);
        a7.i32[0] = *(_DWORD *)(v33[1] + 2 * v32);
        a6.i64[0] = vcvtq_f32_f16(*(float16x4_t *)a6.f32).u64[0];
        a7.i64[0] = vcvtq_f32_f16(*(float16x4_t *)a7.f32).u64[0];
        v34 = *(float32x2_t *)v30;
        v30 += 2;
        *(float32x2_t *)a5.f32 = vmla_lane_f32(vmla_n_f32(*(float32x2_t *)a5.f32, *(float32x2_t *)a6.f32, v34.f32[0]), *(float32x2_t *)a7.f32, v34, 1);
        v35 = v31 + 4;
        v31 += 2;
      }
      while (v35 <= v13);
    }
    if ((v13 & 1) != 0)
    {
      a6.i32[0] = *(_DWORD *)(*(_QWORD *)(a12 + 8 * ((int)v13 - 1)) + 2 * (2 * v15));
      a6.i64[0] = vcvtq_f32_f16(*(float16x4_t *)a6.f32).u64[0];
      *(float32x2_t *)a5.f32 = vadd_f32(vmla_n_f32(*(float32x2_t *)a5.f32, *(float32x2_t *)a6.f32, *v30), 0);
    }
    v36 = vpmax_f32(*(float32x2_t *)a5.f32);
    v37 = fmaxf(v36, 0.0);
    if (v36 <= 1.0)
      v38 = v37;
    else
      v38 = 1.0;
    a5.f32[0] = v38;
    v12->n128_u32[0] = vcvt_f16_f32(a5).u32[0];
    v12 = (__n128 *)((char *)v12 + 4);
  }
  return result;
}

uint64_t resample_vertical<half,half,4,(AlphaStyle)1>(uint64_t result, uint64_t a2, uint64_t a3, int a4, float16x8_t **a5, uint64_t a6)
{
  float16x8_t *v6;
  uint64_t v7;
  float *v8;
  signed int v9;
  int v10;
  unint64_t v11;
  int32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  float16x8_t v19;
  float16x8_t v20;
  float32x2_t v21;
  float16x8_t v22;
  int8x16_t v23;
  int32x2_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float *v28;
  uint64_t v29;
  uint64_t *v30;
  float32x2_t v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;

  v6 = *a5;
  v7 = *(int *)(result + 4);
  v8 = (float *)(result + 8);
  if (a4 >= 2)
  {
    v10 = 0;
    v11 = 2;
    v12 = vdupq_lane_s32((int32x2_t)0x80000000800000, 0);
    do
    {
      v13 = 0uLL;
      v14 = 0uLL;
      v15 = v8;
      if ((int)v7 >= 2)
      {
        v16 = 0;
        v17 = (4 * v10) & 0xFFFFFFF8;
        v15 = v8;
        do
        {
          v18 = (_QWORD *)(a6 + 8 * v16);
          v19 = *(float16x8_t *)(*v18 + 2 * v17);
          v20 = *(float16x8_t *)(v18[1] + 2 * v17);
          v21 = *(float32x2_t *)v15;
          v15 += 2;
          v14 = vmlaq_lane_f32(vmlaq_n_f32(v14, vcvt_hight_f32_f16(v19), v21.f32[0]), vcvt_hight_f32_f16(v20), v21, 1);
          v13 = vmlaq_lane_f32(vmlaq_n_f32(v13, vcvtq_f32_f16(*(float16x4_t *)v19.i8), v21.f32[0]), vcvtq_f32_f16(*(float16x4_t *)v20.i8), v21, 1);
          result = v16 + 4;
          v16 += 2;
        }
        while (result <= v7);
      }
      if ((v7 & 1) != 0)
      {
        v22 = *(float16x8_t *)(*(_QWORD *)(a6 + 8 * ((int)v7 - 1)) + 2 * ((4 * v10) & 0xFFFFFFF8));
        v14 = vaddq_f32(vmlaq_n_f32(v14, vcvt_hight_f32_f16(v22), *v15), (float32x4_t)0);
        v13 = vaddq_f32(vmlaq_n_f32(v13, vcvtq_f32_f16(*(float16x4_t *)v22.i8), *v15), (float32x4_t)0);
      }
      v10 += 2;
      v23 = (int8x16_t)vmaxnmq_f32((float32x4_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v14), (float32x4_t)vuzp2q_s32((int32x4_t)v13, (int32x4_t)v14));
      v24 = (int32x2_t)vextq_s8(v23, v23, 8uLL).u64[0];
      *(float32x2_t *)v23.i8 = vmaxnm_f32(vmaxnm_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v23.i8, v24), (float32x2_t)vzip2_s32(*(int32x2_t *)v23.i8, v24)), 0);
      v25 = (float32x4_t)v12;
      v25.i32[0] = v23.i32[1];
      v26 = (float32x4_t)v12;
      v26.i32[0] = v23.i32[0];
      *v6++ = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vminnmq_f32(vmaxnmq_f32(v13, v26), (float32x4_t)xmmword_1850048C0)), vminnmq_f32(vmaxnmq_f32(v14, v25), (float32x4_t)xmmword_1850048C0));
      v11 += 2;
    }
    while (v11 <= a4);
    v9 = a4 & 0xFFFFFFFE;
  }
  else
  {
    v9 = 0;
  }
  for (; v9 < a4; ++v9)
  {
    v27 = 0uLL;
    v28 = v8;
    if ((int)v7 >= 2)
    {
      v29 = 0;
      v28 = v8;
      do
      {
        v30 = (uint64_t *)(a6 + 8 * v29);
        result = *v30;
        v31 = *(float32x2_t *)v28;
        v28 += 2;
        v27 = vmlaq_lane_f32(vmlaq_n_f32(v27, vcvtq_f32_f16(*(float16x4_t *)(*v30 + 2 * (4 * v9))), v31.f32[0]), vcvtq_f32_f16(*(float16x4_t *)(v30[1] + 2 * (4 * v9))), v31, 1);
        v32 = v29 + 4;
        v29 += 2;
      }
      while (v32 <= v7);
    }
    if ((v7 & 1) != 0)
      v27 = vaddq_f32(vmlaq_n_f32(v27, vcvtq_f32_f16(*(float16x4_t *)(*(_QWORD *)(a6 + 8 * ((int)v7 - 1)) + 2 * (4 * v9))), *v28), (float32x4_t)0);
    v33 = vmaxvq_f32(v27);
    v34 = fmaxf(v33, 0.0);
    if (v33 <= 1.0)
      v35 = v34;
    else
      v35 = 1.0;
    v27.f32[0] = v35;
    *(float16x4_t *)v6->i8 = vcvt_f16_f32(v27);
    v6 = (float16x8_t *)((char *)v6 + 8);
  }
  return result;
}

uint64_t resample_vertical<half,half,5,(AlphaStyle)1>(uint64_t result, double a2, double a3, double a4, double a5, float32x4_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t *a10, uint64_t a11)
{
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  uint64_t v16;
  float *v17;
  int v18;
  int v19;
  unint64_t i;
  float32x4_t v21;
  __int32 v22;
  __int32 v23;
  float32x4_t v24;
  __int32 v25;
  __int32 v26;
  __int32 v27;
  __int32 v28;
  __int32 v29;
  __int32 v30;
  float32x4_t v31;
  __int32 v32;
  __int32 v33;
  __int32 v34;
  __int32 v35;
  __int32 v36;
  float *v37;
  __int32 v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  float16x8_t v42;
  uint64_t v43;
  float16x8_t v44;
  float32x2_t v45;
  uint64_t v46;
  uint64_t v47;
  float16x8_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  __int32 v61;
  __int32 v62;
  __int32 v63;
  float *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  float16x4_t *v68;
  float16x4_t *v69;
  float32x2_t v70;
  uint64_t v71;
  float16x4_t *v72;
  float v73;
  float v74;
  float v75;

  v15 = *a10;
  v16 = *(int *)(result + 4);
  v17 = (float *)(result + 8);
  if (a9 >= 4)
  {
    v19 = 0;
    for (i = 4; i <= a9; i += 4)
    {
      if ((int)v16 >= 2)
      {
        result = 0;
        v21.i32[0] = 0;
        v22 = 0;
        v23 = 0;
        v39 = (5 * v19) & 0xFFFFFFFC;
        v13.i32[0] = 0;
        v37 = v17;
        v24.i32[0] = 0;
        v25 = 0;
        v26 = 0;
        v27 = 0;
        v11.i32[0] = 0;
        v28 = 0;
        v29 = 0;
        v30 = 0;
        v31.i32[0] = 0;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v12.i32[0] = 0;
        v35 = 0;
        v36 = 0;
        v38 = 0;
        do
        {
          v40 = (_QWORD *)(a11 + 8 * result);
          v41 = *v40 + 2 * v39;
          v42 = *(float16x8_t *)(v41 + 16);
          v43 = v40[1] + 2 * v39;
          v44 = *(float16x8_t *)(v43 + 16);
          v45 = *(float32x2_t *)v37;
          v37 += 2;
          v12.i32[1] = v35;
          v12.i64[1] = __PAIR64__(v38, v36);
          v31.i32[1] = v32;
          v31.i64[1] = __PAIR64__(v34, v33);
          v11.i32[1] = v28;
          v11.i64[1] = __PAIR64__(v30, v29);
          v24.i32[1] = v25;
          v24.i64[1] = __PAIR64__(v27, v26);
          v21.i32[1] = v22;
          v21.i64[1] = __PAIR64__(v13.u32[0], v23);
          v21 = vmlaq_lane_f32(vmlaq_n_f32(v21, vcvtq_f32_f16(*(float16x4_t *)v41), v45.f32[0]), vcvtq_f32_f16(*(float16x4_t *)v43), v45, 1);
          v13.i32[0] = v21.i32[3];
          v23 = v21.i32[2];
          v22 = v21.i32[1];
          v24 = vmlaq_lane_f32(vmlaq_n_f32(v24, vcvt_hight_f32_f16(*(float16x8_t *)v41), v45.f32[0]), vcvt_hight_f32_f16(*(float16x8_t *)v43), v45, 1);
          v27 = v24.i32[3];
          v26 = v24.i32[2];
          v25 = v24.i32[1];
          v11 = vmlaq_lane_f32(vmlaq_n_f32(v11, vcvtq_f32_f16(*(float16x4_t *)v42.i8), v45.f32[0]), vcvtq_f32_f16(*(float16x4_t *)v44.i8), v45, 1);
          v30 = v11.i32[3];
          v29 = v11.i32[2];
          v28 = v11.i32[1];
          v31 = vmlaq_lane_f32(vmlaq_n_f32(v31, vcvt_hight_f32_f16(v42), v45.f32[0]), vcvt_hight_f32_f16(v44), v45, 1);
          v34 = v31.i32[3];
          v33 = v31.i32[2];
          v32 = v31.i32[1];
          v12 = vmlaq_lane_f32(vmlaq_n_f32(v12, vcvtq_f32_f16(*(float16x4_t *)(v41 + 32)), v45.f32[0]), vcvtq_f32_f16(*(float16x4_t *)(v43 + 32)), v45, 1);
          v38 = v12.i32[3];
          v36 = v12.i32[2];
          v35 = v12.i32[1];
          v46 = result + 4;
          result += 2;
        }
        while (v46 <= v16);
      }
      else
      {
        v21.i32[0] = 0;
        v22 = 0;
        v23 = 0;
        v13.i32[0] = 0;
        v24.i32[0] = 0;
        v25 = 0;
        v26 = 0;
        v27 = 0;
        v11.i32[0] = 0;
        v28 = 0;
        v29 = 0;
        v30 = 0;
        v31.i32[0] = 0;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v12.i32[0] = 0;
        v35 = 0;
        v36 = 0;
        v37 = v17;
        v38 = 0;
      }
      if ((v16 & 1) != 0)
      {
        result = (5 * v19) & 0xFFFFFFFC;
        v47 = *(_QWORD *)(a11 + 8 * ((int)v16 - 1)) + 2 * result;
        v48 = *(float16x8_t *)(v47 + 16);
        v12.i32[1] = v35;
        v12.i64[1] = __PAIR64__(v38, v36);
        v31.i32[1] = v32;
        v31.i64[1] = __PAIR64__(v34, v33);
        v11.i32[1] = v28;
        v11.i64[1] = __PAIR64__(v30, v29);
        v24.i32[1] = v25;
        v24.i64[1] = __PAIR64__(v27, v26);
        v21.i32[1] = v22;
        v21.i64[1] = __PAIR64__(v13.u32[0], v23);
        v21 = vaddq_f32(vmlaq_n_f32(v21, vcvtq_f32_f16(*(float16x4_t *)v47), *v37), (float32x4_t)0);
        v13.i32[0] = v21.i32[3];
        v23 = v21.i32[2];
        v22 = v21.i32[1];
        v24 = vaddq_f32(vmlaq_n_f32(v24, vcvt_hight_f32_f16(*(float16x8_t *)v47), *v37), (float32x4_t)0);
        v27 = v24.i32[3];
        v26 = v24.i32[2];
        v25 = v24.i32[1];
        v11 = vaddq_f32(vmlaq_n_f32(v11, vcvtq_f32_f16(*(float16x4_t *)v48.i8), *v37), (float32x4_t)0);
        v30 = v11.i32[3];
        v29 = v11.i32[2];
        v28 = v11.i32[1];
        v31 = vaddq_f32(vmlaq_n_f32(v31, vcvt_hight_f32_f16(v48), *v37), (float32x4_t)0);
        v34 = v31.i32[3];
        v33 = v31.i32[2];
        v32 = v31.i32[1];
        v12 = vaddq_f32(vmlaq_n_f32(v12, vcvtq_f32_f16(*(float16x4_t *)(v47 + 32)), *v37), (float32x4_t)0);
        v38 = v12.i32[3];
        v36 = v12.i32[2];
        v35 = v12.i32[1];
      }
      v49.i64[0] = __PAIR64__(v28, v24.u32[0]);
      v49.i64[1] = __PAIR64__(v38, v33);
      v50.i64[0] = __PAIR64__(v11.u32[0], v13.u32[0]);
      v50.i64[1] = __PAIR64__(v36, v32);
      v51 = vmaxnmq_f32(v49, v50);
      v50.i64[0] = __PAIR64__(v27, v23);
      v50.i64[1] = __PAIR64__(v35, v31.u32[0]);
      v52 = vmaxnmq_f32(v51, v50);
      v50.i64[0] = __PAIR64__(v26, v22);
      v50.i64[1] = __PAIR64__(v12.u32[0], v30);
      v53 = vmaxnmq_f32(v52, v50);
      v50.i64[0] = __PAIR64__(v25, v21.u32[0]);
      v50.i64[1] = __PAIR64__(v34, v29);
      v54 = vmaxnmq_f32(vmaxnmq_f32(v53, v50), (float32x4_t)0);
      v55.i64[0] = 0x80000000800000;
      v55.i64[1] = 0x80000000800000;
      v56 = (float32x4_t)vdupq_lane_s32((int32x2_t)0x80000000800000, 0);
      v57 = v56;
      v57.i32[3] = v54.i32[3];
      v58 = v56;
      v58.i32[2] = v54.i32[2];
      v59 = v56;
      v59.i32[1] = v54.i32[1];
      v56.i32[0] = v54.i32[0];
      v21.i32[1] = v22;
      v21.i64[1] = __PAIR64__(v13.u32[0], v23);
      v19 += 4;
      v24.i32[1] = v25;
      v24.i64[1] = __PAIR64__(v27, v26);
      v11.i32[1] = v28;
      v11.i64[1] = __PAIR64__(v30, v29);
      v31.i32[1] = v32;
      v31.i64[1] = __PAIR64__(v34, v33);
      v12.i32[1] = v35;
      v12.i64[1] = __PAIR64__(v38, v36);
      a6 = vminnmq_f32(vmaxnmq_f32(v11, v58), (float32x4_t)xmmword_1850048E0);
      *(float16x8_t *)v15 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vminnmq_f32(vmaxnmq_f32(v21, v56), (float32x4_t)xmmword_1850048C0)), vminnmq_f32(vmaxnmq_f32(v24, v59), (float32x4_t)xmmword_1850048D0));
      *(float16x8_t *)(v15 + 16) = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(a6), vminnmq_f32(vmaxnmq_f32(v31, v57), (float32x4_t)xmmword_1850048F0));
      *(float16x4_t *)(v15 + 32) = vcvt_f16_f32(vminnmq_f32(vmaxnmq_f32(v12, v55), (float32x4_t)vdupq_n_s32(0x7F7FFFFFu)));
      v15 += 40;
    }
    v18 = a9 & 0x7FFFFFFC;
  }
  else
  {
    v18 = 0;
  }
  for (; v18 < a9; ++v18)
  {
    if ((int)v16 >= 2)
    {
      v65 = 0;
      v66 = (5 * v18);
      v60.i32[0] = 0;
      v64 = v17;
      v61 = 0;
      v62 = 0;
      v63 = 0;
      a6.i32[0] = 0;
      do
      {
        v67 = (_QWORD *)(a11 + 8 * v65);
        v68 = (float16x4_t *)(*v67 + 2 * v66);
        v11.i16[0] = v68[1].i16[0];
        v69 = (float16x4_t *)(v67[1] + 2 * v66);
        v13.i16[0] = v69[1].i16[0];
        v11 = vcvtq_f32_f16(*(float16x4_t *)v11.f32);
        v12 = vcvtq_f32_f16(*v69);
        v70 = *(float32x2_t *)v64;
        v64 += 2;
        *(float32x2_t *)v14.f32 = v70;
        v13 = vcvtq_f32_f16(*(float16x4_t *)v13.f32);
        v60.i32[1] = v61;
        v60.i64[1] = __PAIR64__(v63, v62);
        a6 = vmlaq_lane_f32(vmlaq_f32(a6, v11, v14), v13, v70, 1);
        v60 = vmlaq_lane_f32(vmlaq_n_f32(v60, vcvtq_f32_f16(*v68), v70.f32[0]), v12, v70, 1);
        v63 = v60.i32[3];
        v62 = v60.i32[2];
        v61 = v60.i32[1];
        v71 = v65 + 4;
        v65 += 2;
      }
      while (v71 <= v16);
    }
    else
    {
      v60.i32[0] = 0;
      v61 = 0;
      v62 = 0;
      v63 = 0;
      v64 = v17;
      a6.i32[0] = 0;
    }
    if ((v16 & 1) != 0)
    {
      v72 = (float16x4_t *)(*(_QWORD *)(a11 + 8 * ((int)v16 - 1)) + 2 * (5 * v18));
      v11.i16[0] = v72[1].i16[0];
      v11 = vcvtq_f32_f16(*(float16x4_t *)v11.f32);
      v12.f32[0] = *v64;
      v60.i32[1] = v61;
      v60.i64[1] = __PAIR64__(v63, v62);
      a6 = vaddq_f32(vmlaq_f32(a6, v11, v12), (float32x4_t)0);
      v60 = vaddq_f32(vmlaq_n_f32(v60, vcvtq_f32_f16(*v72), *v64), (float32x4_t)0);
      v63 = v60.i32[3];
      v62 = v60.i32[2];
      v61 = v60.i32[1];
    }
    v60.i32[1] = v61;
    v60.i64[1] = __PAIR64__(v63, v62);
    v73 = vmaxvq_f32(vmaxnmq_f32(v60, a6));
    v74 = fmaxf(v73, 0.0);
    if (v73 <= 1.0)
      v75 = v74;
    else
      v75 = 1.0;
    v60.f32[0] = v75;
    *(float16x4_t *)a6.f32 = vcvt_f16_f32(a6);
    *(float16x4_t *)v15 = vcvt_f16_f32(v60);
    *(_WORD *)(v15 + 8) = a6.i16[0];
    v15 += 10;
  }
  return result;
}

uint64_t resample_vertical<half,half,2,(AlphaStyle)2>(uint64_t result, double a2, double a3, double a4, float32x4_t a5, __n128 a6, float32x4_t a7, uint64_t a8, uint64_t a9, int a10, __n128 **a11, uint64_t a12)
{
  __n128 *v12;
  uint64_t v13;
  float *v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  int32x4_t v18;
  int32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float *v22;
  _QWORD *v23;
  float16x8_t v24;
  float16x8_t v25;
  float32x2_t v26;
  uint64_t v27;
  float16x8_t v28;
  int32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  float32x2_t v36;
  uint64_t v37;
  float v38;
  float v39;
  float v40;

  v12 = *a11;
  v13 = *(int *)(result + 4);
  v14 = (float *)(result + 8);
  if (a10 >= 4)
  {
    v16 = 0;
    v17 = 4;
    v18.i64[0] = 0x80000000800000;
    v18.i64[1] = 0x80000000800000;
    v19 = vdupq_lane_s32((int32x2_t)0x80000000800000, 0);
    a5.i64[1] = 0x3F8000007F7FFFFFLL;
    do
    {
      v20 = 0uLL;
      v21 = 0uLL;
      v22 = v14;
      if ((int)v13 >= 2)
      {
        result = 0;
        v22 = v14;
        do
        {
          v23 = (_QWORD *)(a12 + 8 * result);
          v24 = *(float16x8_t *)(*v23 + 4 * v16);
          v25 = *(float16x8_t *)(v23[1] + 4 * v16);
          v26 = *(float32x2_t *)v22;
          v22 += 2;
          v21 = vmlaq_lane_f32(vmlaq_n_f32(v21, vcvt_hight_f32_f16(v24), v26.f32[0]), vcvt_hight_f32_f16(v25), v26, 1);
          v20 = vmlaq_lane_f32(vmlaq_n_f32(v20, vcvtq_f32_f16(*(float16x4_t *)v24.i8), v26.f32[0]), vcvtq_f32_f16(*(float16x4_t *)v25.i8), v26, 1);
          v27 = result + 4;
          result += 2;
        }
        while (v27 <= v13);
      }
      if ((v13 & 1) != 0)
      {
        result = 4 * v16;
        v28 = *(float16x8_t *)(*(_QWORD *)(a12 + 8 * ((int)v13 - 1)) + 4 * v16);
        v21 = vaddq_f32(vmlaq_n_f32(v21, vcvt_hight_f32_f16(v28), *v22), (float32x4_t)0);
        v20 = vaddq_f32(vmlaq_n_f32(v20, vcvtq_f32_f16(*(float16x4_t *)v28.i8), *v22), (float32x4_t)0);
      }
      v16 += 4;
      v29 = (int32x4_t)vmaxnmq_f32(vmaxnmq_f32((float32x4_t)vuzp1q_s32((int32x4_t)v20, (int32x4_t)v21), (float32x4_t)vuzp2q_s32((int32x4_t)v20, (int32x4_t)v21)), (float32x4_t)0);
      v30 = (float32x4_t)vzip2q_s32(v19, v29);
      v31 = (float32x4_t)vzip1q_s32(v18, v29);
      v31.i32[2] = -8388609;
      a7 = vminnmq_f32(vmaxnmq_f32(v21, v30), (float32x4_t)xmmword_185004900);
      a6 = (__n128)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vminnmq_f32(vmaxnmq_f32(v20, v31), (float32x4_t)xmmword_185004900)), a7);
      *v12++ = a6;
      v17 += 4;
    }
    while (v17 <= a10);
    v15 = a10 & 0x7FFFFFFC;
  }
  else
  {
    v15 = 0;
  }
  for (; v15 < a10; ++v15)
  {
    a5.i64[0] = 0;
    v32 = v14;
    if ((int)v13 >= 2)
    {
      v33 = 0;
      v34 = (2 * v15);
      a5.i64[0] = 0;
      v32 = v14;
      do
      {
        v35 = (uint64_t *)(a12 + 8 * v33);
        result = *v35;
        a6.n128_u32[0] = *(_DWORD *)(*v35 + 2 * v34);
        a7.i32[0] = *(_DWORD *)(v35[1] + 2 * v34);
        a6.n128_u64[0] = vcvtq_f32_f16((float16x4_t)a6.n128_u64[0]).u64[0];
        a7.i64[0] = vcvtq_f32_f16(*(float16x4_t *)a7.f32).u64[0];
        v36 = *(float32x2_t *)v32;
        v32 += 2;
        *(float32x2_t *)a5.f32 = vmla_lane_f32(vmla_n_f32(*(float32x2_t *)a5.f32, (float32x2_t)a6.n128_u64[0], v36.f32[0]), *(float32x2_t *)a7.f32, v36, 1);
        v37 = v33 + 4;
        v33 += 2;
      }
      while (v37 <= v13);
    }
    if ((v13 & 1) != 0)
    {
      a6.n128_u32[0] = *(_DWORD *)(*(_QWORD *)(a12 + 8 * ((int)v13 - 1)) + 2 * (2 * v15));
      a6.n128_u64[0] = vcvtq_f32_f16((float16x4_t)a6.n128_u64[0]).u64[0];
      *(float32x2_t *)a5.f32 = vadd_f32(vmla_n_f32(*(float32x2_t *)a5.f32, (float32x2_t)a6.n128_u64[0], *v32), 0);
    }
    v38 = vpmax_f32(*(float32x2_t *)a5.f32);
    v39 = fmaxf(v38, 0.0);
    if (v38 <= 1.0)
      v40 = v39;
    else
      v40 = 1.0;
    a5.f32[1] = v40;
    v12->n128_u32[0] = vcvt_f16_f32(a5).u32[0];
    v12 = (__n128 *)((char *)v12 + 4);
  }
  return result;
}

uint64_t resample_vertical<half,half,4,(AlphaStyle)2>(uint64_t result, uint64_t a2, uint64_t a3, int a4, float16x8_t **a5, uint64_t a6)
{
  float16x8_t *v6;
  uint64_t v7;
  float *v8;
  signed int v9;
  int v10;
  unint64_t v11;
  int8x16_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  float16x8_t v19;
  float16x8_t v20;
  float32x2_t v21;
  float16x8_t v22;
  int8x16_t v23;
  int32x2_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float *v27;
  uint64_t v28;
  uint64_t *v29;
  float32x2_t v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;

  v6 = *a5;
  v7 = *(int *)(result + 4);
  v8 = (float *)(result + 8);
  if (a4 >= 2)
  {
    v10 = 0;
    v11 = 2;
    v12 = (int8x16_t)vdupq_lane_s32((int32x2_t)0x80000000800000, 0);
    do
    {
      v13 = 0uLL;
      v14 = 0uLL;
      v15 = v8;
      if ((int)v7 >= 2)
      {
        v16 = 0;
        v17 = (4 * v10) & 0xFFFFFFF8;
        v15 = v8;
        do
        {
          v18 = (_QWORD *)(a6 + 8 * v16);
          v19 = *(float16x8_t *)(*v18 + 2 * v17);
          v20 = *(float16x8_t *)(v18[1] + 2 * v17);
          v21 = *(float32x2_t *)v15;
          v15 += 2;
          v14 = vmlaq_lane_f32(vmlaq_n_f32(v14, vcvt_hight_f32_f16(v19), v21.f32[0]), vcvt_hight_f32_f16(v20), v21, 1);
          v13 = vmlaq_lane_f32(vmlaq_n_f32(v13, vcvtq_f32_f16(*(float16x4_t *)v19.i8), v21.f32[0]), vcvtq_f32_f16(*(float16x4_t *)v20.i8), v21, 1);
          result = v16 + 4;
          v16 += 2;
        }
        while (result <= v7);
      }
      if ((v7 & 1) != 0)
      {
        v22 = *(float16x8_t *)(*(_QWORD *)(a6 + 8 * ((int)v7 - 1)) + 2 * ((4 * v10) & 0xFFFFFFF8));
        v14 = vaddq_f32(vmlaq_n_f32(v14, vcvt_hight_f32_f16(v22), *v15), (float32x4_t)0);
        v13 = vaddq_f32(vmlaq_n_f32(v13, vcvtq_f32_f16(*(float16x4_t *)v22.i8), *v15), (float32x4_t)0);
      }
      v23 = (int8x16_t)vmaxnmq_f32((float32x4_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v14), (float32x4_t)vuzp2q_s32((int32x4_t)v13, (int32x4_t)v14));
      v24 = (int32x2_t)vextq_s8(v23, v23, 8uLL).u64[0];
      *(float32x2_t *)v23.i8 = vmaxnm_f32(vmaxnm_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v23.i8, v24), (float32x2_t)vzip2_s32(*(int32x2_t *)v23.i8, v24)), 0);
      v25 = (float32x4_t)v12;
      v25.i32[3] = v23.i32[1];
      v10 += 2;
      *v6++ = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vminnmq_f32(vmaxnmq_f32(v13, (float32x4_t)vextq_s8(v12, v23, 4uLL)), (float32x4_t)xmmword_1850048F0)), vminnmq_f32(vmaxnmq_f32(v14, v25), (float32x4_t)xmmword_1850048F0));
      v11 += 2;
    }
    while (v11 <= a4);
    v9 = a4 & 0xFFFFFFFE;
  }
  else
  {
    v9 = 0;
  }
  for (; v9 < a4; ++v9)
  {
    v26 = 0uLL;
    v27 = v8;
    if ((int)v7 >= 2)
    {
      v28 = 0;
      v27 = v8;
      do
      {
        v29 = (uint64_t *)(a6 + 8 * v28);
        result = *v29;
        v30 = *(float32x2_t *)v27;
        v27 += 2;
        v26 = vmlaq_lane_f32(vmlaq_n_f32(v26, vcvtq_f32_f16(*(float16x4_t *)(*v29 + 2 * (4 * v9))), v30.f32[0]), vcvtq_f32_f16(*(float16x4_t *)(v29[1] + 2 * (4 * v9))), v30, 1);
        v31 = v28 + 4;
        v28 += 2;
      }
      while (v31 <= v7);
    }
    if ((v7 & 1) != 0)
      v26 = vaddq_f32(vmlaq_n_f32(v26, vcvtq_f32_f16(*(float16x4_t *)(*(_QWORD *)(a6 + 8 * ((int)v7 - 1)) + 2 * (4 * v9))), *v27), (float32x4_t)0);
    v32 = vmaxvq_f32(v26);
    v33 = fmaxf(v32, 0.0);
    if (v32 <= 1.0)
      v34 = v33;
    else
      v34 = 1.0;
    v26.f32[3] = v34;
    *(float16x4_t *)v6->i8 = vcvt_f16_f32(v26);
    v6 = (float16x8_t *)((char *)v6 + 8);
  }
  return result;
}

uint64_t resample_vertical<half,half,5,(AlphaStyle)2>(uint64_t result, double a2, double a3, double a4, double a5, float32x4_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t *a10, uint64_t a11)
{
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  uint64_t v16;
  float *v17;
  int v18;
  int v19;
  unint64_t i;
  float32x4_t v21;
  __int32 v22;
  __int32 v23;
  float32x4_t v24;
  __int32 v25;
  __int32 v26;
  __int32 v27;
  __int32 v28;
  __int32 v29;
  __int32 v30;
  float32x4_t v31;
  __int32 v32;
  __int32 v33;
  __int32 v34;
  __int32 v35;
  __int32 v36;
  float *v37;
  __int32 v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  float16x8_t v42;
  uint64_t v43;
  float16x8_t v44;
  float32x2_t v45;
  uint64_t v46;
  uint64_t v47;
  float16x8_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  __int32 v61;
  __int32 v62;
  __int32 v63;
  float *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  float16x4_t *v68;
  float16x4_t *v69;
  float32x2_t v70;
  uint64_t v71;
  float16x4_t *v72;
  float v73;
  float v74;
  float v75;

  v15 = *a10;
  v16 = *(int *)(result + 4);
  v17 = (float *)(result + 8);
  if (a9 >= 4)
  {
    v19 = 0;
    for (i = 4; i <= a9; i += 4)
    {
      if ((int)v16 >= 2)
      {
        result = 0;
        v21.i32[0] = 0;
        v22 = 0;
        v23 = 0;
        v39 = (5 * v19) & 0xFFFFFFFC;
        v13.i32[0] = 0;
        v37 = v17;
        v24.i32[0] = 0;
        v25 = 0;
        v26 = 0;
        v27 = 0;
        v11.i32[0] = 0;
        v28 = 0;
        v29 = 0;
        v30 = 0;
        v31.i32[0] = 0;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v12.i32[0] = 0;
        v35 = 0;
        v36 = 0;
        v38 = 0;
        do
        {
          v40 = (_QWORD *)(a11 + 8 * result);
          v41 = *v40 + 2 * v39;
          v42 = *(float16x8_t *)(v41 + 16);
          v43 = v40[1] + 2 * v39;
          v44 = *(float16x8_t *)(v43 + 16);
          v45 = *(float32x2_t *)v37;
          v37 += 2;
          v12.i32[1] = v35;
          v12.i64[1] = __PAIR64__(v38, v36);
          v31.i32[1] = v32;
          v31.i64[1] = __PAIR64__(v34, v33);
          v11.i32[1] = v28;
          v11.i64[1] = __PAIR64__(v30, v29);
          v24.i32[1] = v25;
          v24.i64[1] = __PAIR64__(v27, v26);
          v21.i32[1] = v22;
          v21.i64[1] = __PAIR64__(v13.u32[0], v23);
          v21 = vmlaq_lane_f32(vmlaq_n_f32(v21, vcvtq_f32_f16(*(float16x4_t *)v41), v45.f32[0]), vcvtq_f32_f16(*(float16x4_t *)v43), v45, 1);
          v13.i32[0] = v21.i32[3];
          v23 = v21.i32[2];
          v22 = v21.i32[1];
          v24 = vmlaq_lane_f32(vmlaq_n_f32(v24, vcvt_hight_f32_f16(*(float16x8_t *)v41), v45.f32[0]), vcvt_hight_f32_f16(*(float16x8_t *)v43), v45, 1);
          v27 = v24.i32[3];
          v26 = v24.i32[2];
          v25 = v24.i32[1];
          v11 = vmlaq_lane_f32(vmlaq_n_f32(v11, vcvtq_f32_f16(*(float16x4_t *)v42.i8), v45.f32[0]), vcvtq_f32_f16(*(float16x4_t *)v44.i8), v45, 1);
          v30 = v11.i32[3];
          v29 = v11.i32[2];
          v28 = v11.i32[1];
          v31 = vmlaq_lane_f32(vmlaq_n_f32(v31, vcvt_hight_f32_f16(v42), v45.f32[0]), vcvt_hight_f32_f16(v44), v45, 1);
          v34 = v31.i32[3];
          v33 = v31.i32[2];
          v32 = v31.i32[1];
          v12 = vmlaq_lane_f32(vmlaq_n_f32(v12, vcvtq_f32_f16(*(float16x4_t *)(v41 + 32)), v45.f32[0]), vcvtq_f32_f16(*(float16x4_t *)(v43 + 32)), v45, 1);
          v38 = v12.i32[3];
          v36 = v12.i32[2];
          v35 = v12.i32[1];
          v46 = result + 4;
          result += 2;
        }
        while (v46 <= v16);
      }
      else
      {
        v21.i32[0] = 0;
        v22 = 0;
        v23 = 0;
        v13.i32[0] = 0;
        v24.i32[0] = 0;
        v25 = 0;
        v26 = 0;
        v27 = 0;
        v11.i32[0] = 0;
        v28 = 0;
        v29 = 0;
        v30 = 0;
        v31.i32[0] = 0;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v12.i32[0] = 0;
        v35 = 0;
        v36 = 0;
        v37 = v17;
        v38 = 0;
      }
      if ((v16 & 1) != 0)
      {
        result = (5 * v19) & 0xFFFFFFFC;
        v47 = *(_QWORD *)(a11 + 8 * ((int)v16 - 1)) + 2 * result;
        v48 = *(float16x8_t *)(v47 + 16);
        v12.i32[1] = v35;
        v12.i64[1] = __PAIR64__(v38, v36);
        v31.i32[1] = v32;
        v31.i64[1] = __PAIR64__(v34, v33);
        v11.i32[1] = v28;
        v11.i64[1] = __PAIR64__(v30, v29);
        v24.i32[1] = v25;
        v24.i64[1] = __PAIR64__(v27, v26);
        v21.i32[1] = v22;
        v21.i64[1] = __PAIR64__(v13.u32[0], v23);
        v21 = vaddq_f32(vmlaq_n_f32(v21, vcvtq_f32_f16(*(float16x4_t *)v47), *v37), (float32x4_t)0);
        v13.i32[0] = v21.i32[3];
        v23 = v21.i32[2];
        v22 = v21.i32[1];
        v24 = vaddq_f32(vmlaq_n_f32(v24, vcvt_hight_f32_f16(*(float16x8_t *)v47), *v37), (float32x4_t)0);
        v27 = v24.i32[3];
        v26 = v24.i32[2];
        v25 = v24.i32[1];
        v11 = vaddq_f32(vmlaq_n_f32(v11, vcvtq_f32_f16(*(float16x4_t *)v48.i8), *v37), (float32x4_t)0);
        v30 = v11.i32[3];
        v29 = v11.i32[2];
        v28 = v11.i32[1];
        v31 = vaddq_f32(vmlaq_n_f32(v31, vcvt_hight_f32_f16(v48), *v37), (float32x4_t)0);
        v34 = v31.i32[3];
        v33 = v31.i32[2];
        v32 = v31.i32[1];
        v12 = vaddq_f32(vmlaq_n_f32(v12, vcvtq_f32_f16(*(float16x4_t *)(v47 + 32)), *v37), (float32x4_t)0);
        v38 = v12.i32[3];
        v36 = v12.i32[2];
        v35 = v12.i32[1];
      }
      v49.i64[0] = __PAIR64__(v28, v24.u32[0]);
      v49.i64[1] = __PAIR64__(v38, v33);
      v50.i64[0] = __PAIR64__(v11.u32[0], v13.u32[0]);
      v50.i64[1] = __PAIR64__(v36, v32);
      v51 = vmaxnmq_f32(v49, v50);
      v50.i64[0] = __PAIR64__(v27, v23);
      v50.i64[1] = __PAIR64__(v35, v31.u32[0]);
      v52 = vmaxnmq_f32(v51, v50);
      v50.i64[0] = __PAIR64__(v26, v22);
      v50.i64[1] = __PAIR64__(v12.u32[0], v30);
      v53 = vmaxnmq_f32(v52, v50);
      v50.i64[0] = __PAIR64__(v25, v21.u32[0]);
      v50.i64[1] = __PAIR64__(v34, v29);
      v54 = vmaxnmq_f32(vmaxnmq_f32(v53, v50), (float32x4_t)0);
      v55.i64[0] = 0x80000000800000;
      v55.i64[1] = 0x80000000800000;
      v56 = (float32x4_t)vdupq_lane_s32((int32x2_t)0x80000000800000, 0);
      v57 = v56;
      v57.i32[3] = v54.i32[3];
      v58 = v56;
      v58.i32[2] = v54.i32[2];
      v59 = v56;
      v59.i32[1] = v54.i32[1];
      v56.i32[0] = v54.i32[0];
      v21.i32[1] = v22;
      v21.i64[1] = __PAIR64__(v13.u32[0], v23);
      v19 += 4;
      v24.i32[1] = v25;
      v24.i64[1] = __PAIR64__(v27, v26);
      v11.i32[1] = v28;
      v11.i64[1] = __PAIR64__(v30, v29);
      v31.i32[1] = v32;
      v31.i64[1] = __PAIR64__(v34, v33);
      v12.i32[1] = v35;
      v12.i64[1] = __PAIR64__(v38, v36);
      a6 = vminnmq_f32(vmaxnmq_f32(v31, v58), (float32x4_t)xmmword_1850048E0);
      *(float16x8_t *)v15 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vminnmq_f32(vmaxnmq_f32(v21, v55), (float32x4_t)vdupq_n_s32(0x7F7FFFFFu))), vminnmq_f32(vmaxnmq_f32(v24, v56), (float32x4_t)xmmword_1850048C0));
      *(float16x8_t *)(v15 + 16) = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vminnmq_f32(vmaxnmq_f32(v11, v59), (float32x4_t)xmmword_1850048D0)), a6);
      *(float16x4_t *)(v15 + 32) = vcvt_f16_f32(vminnmq_f32(vmaxnmq_f32(v12, v57), (float32x4_t)xmmword_1850048F0));
      v15 += 40;
    }
    v18 = a9 & 0x7FFFFFFC;
  }
  else
  {
    v18 = 0;
  }
  for (; v18 < a9; ++v18)
  {
    if ((int)v16 >= 2)
    {
      v65 = 0;
      v66 = (5 * v18);
      v60.i32[0] = 0;
      v64 = v17;
      v61 = 0;
      v62 = 0;
      v63 = 0;
      a6.i32[0] = 0;
      do
      {
        v67 = (_QWORD *)(a11 + 8 * v65);
        v68 = (float16x4_t *)(*v67 + 2 * v66);
        v11.i16[0] = v68[1].i16[0];
        v69 = (float16x4_t *)(v67[1] + 2 * v66);
        v13.i16[0] = v69[1].i16[0];
        v11 = vcvtq_f32_f16(*(float16x4_t *)v11.f32);
        v12 = vcvtq_f32_f16(*v69);
        v70 = *(float32x2_t *)v64;
        v64 += 2;
        *(float32x2_t *)v14.f32 = v70;
        v13 = vcvtq_f32_f16(*(float16x4_t *)v13.f32);
        v60.i32[1] = v61;
        v60.i64[1] = __PAIR64__(v63, v62);
        a6 = vmlaq_lane_f32(vmlaq_f32(a6, v11, v14), v13, v70, 1);
        v60 = vmlaq_lane_f32(vmlaq_n_f32(v60, vcvtq_f32_f16(*v68), v70.f32[0]), v12, v70, 1);
        v63 = v60.i32[3];
        v62 = v60.i32[2];
        v61 = v60.i32[1];
        v71 = v65 + 4;
        v65 += 2;
      }
      while (v71 <= v16);
    }
    else
    {
      v60.i32[0] = 0;
      v61 = 0;
      v62 = 0;
      v63 = 0;
      v64 = v17;
      a6.i32[0] = 0;
    }
    if ((v16 & 1) != 0)
    {
      v72 = (float16x4_t *)(*(_QWORD *)(a11 + 8 * ((int)v16 - 1)) + 2 * (5 * v18));
      v11.i16[0] = v72[1].i16[0];
      v11 = vcvtq_f32_f16(*(float16x4_t *)v11.f32);
      v12.f32[0] = *v64;
      v60.i32[1] = v61;
      v60.i64[1] = __PAIR64__(v63, v62);
      a6 = vaddq_f32(vmlaq_f32(a6, v11, v12), (float32x4_t)0);
      v60 = vaddq_f32(vmlaq_n_f32(v60, vcvtq_f32_f16(*v72), *v64), (float32x4_t)0);
      v63 = v60.i32[3];
      v62 = v60.i32[2];
      v61 = v60.i32[1];
    }
    v60.i32[1] = v61;
    v60.i64[1] = __PAIR64__(v63, v62);
    v73 = vmaxvq_f32(vmaxnmq_f32(v60, a6));
    v74 = fmaxf(v73, 0.0);
    if (v73 <= 1.0)
      v75 = v74;
    else
      v75 = 1.0;
    a6.f32[0] = v75;
    *(float16x4_t *)a6.f32 = vcvt_f16_f32(a6);
    *(float16x4_t *)v15 = vcvt_f16_f32(v60);
    *(_WORD *)(v15 + 8) = a6.i16[0];
    v15 += 10;
  }
  return result;
}

uint64_t resample_vertical<half,half,1,(AlphaStyle)3>(uint64_t result, double a2, double a3, double a4, float16x4_t _D3, float32x4_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11)
{
  double *v11;
  float16x4_t *v12;
  uint64_t v13;
  float *v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  float32x4_t v23;
  float32x4_t v24;
  float *v25;
  _QWORD *v26;
  float16x8_t v27;
  float16x8_t v28;
  float32x2_t v29;
  uint64_t v30;
  float16x8_t v31;
  float32x4_t v32;
  float *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  float32x2_t v39;
  uint64_t v40;

  v11 = *(double **)a10;
  v12 = *(float16x4_t **)(a10 + 8);
  v13 = *(int *)(result + 4);
  v14 = (float *)(result + 8);
  if (a9 >= 4)
  {
    v16 = 0;
    v17 = 4;
    __asm { FMOV            V1.4S, #1.0 }
    do
    {
      v23 = 0uLL;
      v24 = 0uLL;
      v25 = v14;
      if ((int)v13 >= 2)
      {
        result = 0;
        v25 = v14;
        do
        {
          v26 = (_QWORD *)(a11 + 8 * result);
          v27 = *(float16x8_t *)(*v26 + 4 * v16);
          v28 = *(float16x8_t *)(v26[1] + 4 * v16);
          v29 = *(float32x2_t *)v25;
          v25 += 2;
          v24 = vmlaq_lane_f32(vmlaq_n_f32(v24, vcvt_hight_f32_f16(v27), v29.f32[0]), vcvt_hight_f32_f16(v28), v29, 1);
          v23 = vmlaq_lane_f32(vmlaq_n_f32(v23, vcvtq_f32_f16(*(float16x4_t *)v27.i8), v29.f32[0]), vcvtq_f32_f16(*(float16x4_t *)v28.i8), v29, 1);
          v30 = result + 4;
          result += 2;
        }
        while (v30 <= v13);
      }
      if ((v13 & 1) != 0)
      {
        result = 4 * v16;
        v31 = *(float16x8_t *)(*(_QWORD *)(a11 + 8 * ((int)v13 - 1)) + 4 * v16);
        v24 = vaddq_f32(vmlaq_n_f32(v24, vcvt_hight_f32_f16(v31), *v25), (float32x4_t)0);
        v23 = vaddq_f32(vmlaq_n_f32(v23, vcvtq_f32_f16(*(float16x4_t *)v31.i8), *v25), (float32x4_t)0);
      }
      v16 += 4;
      a6 = (float32x4_t)vuzp1q_s32((int32x4_t)v23, (int32x4_t)v24);
      v32 = vmaxnmq_f32(vminnmq_f32(vmaxnmq_f32((float32x4_t)vuzp2q_s32((int32x4_t)v23, (int32x4_t)v24), (float32x4_t)0), _Q1), a6);
      _D3 = vcvt_f16_f32(a6);
      *v11++ = *(double *)&_D3;
      *v12++ = vcvt_f16_f32(v32);
      v17 += 4;
    }
    while (v17 <= a9);
    v15 = a9 & 0x7FFFFFFC;
  }
  else
  {
    v15 = 0;
  }
  if (v15 < a9)
  {
    __asm { FMOV            V1.2S, #1.0 }
    do
    {
      _D2 = 0;
      v35 = v14;
      if ((int)v13 >= 2)
      {
        v36 = 0;
        v37 = (2 * v15);
        _D2 = 0;
        v35 = v14;
        do
        {
          v38 = (_QWORD *)(a11 + 8 * v36);
          result = 2 * v37;
          _D3.i32[0] = *(_DWORD *)(*v38 + 2 * v37);
          a6.i32[0] = *(_DWORD *)(v38[1] + 2 * v37);
          _D3 = (float16x4_t)vcvtq_f32_f16(_D3).u64[0];
          a6.i64[0] = vcvtq_f32_f16(*(float16x4_t *)a6.f32).u64[0];
          v39 = *(float32x2_t *)v35;
          v35 += 2;
          _D2 = vmla_lane_f32(vmla_n_f32(_D2, (float32x2_t)_D3, v39.f32[0]), *(float32x2_t *)a6.f32, v39, 1);
          v40 = v36 + 4;
          v36 += 2;
        }
        while (v40 <= v13);
      }
      if ((v13 & 1) != 0)
      {
        _D3.i32[0] = *(_DWORD *)(*(_QWORD *)(a11 + 8 * ((int)v13 - 1)) + 2 * (2 * v15));
        _D2 = vadd_f32(vmla_n_f32(_D2, (float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D3), *v35), 0);
      }
      _D3 = (float16x4_t)vmaxnm_f32(vminnm_f32(vmaxnm_f32((float32x2_t)vdup_lane_s32((int32x2_t)_D2, 1), 0), _D1), _D2);
      __asm { FCVT            H2, S2 }
      *(_WORD *)v11 = _H2;
      v11 = (double *)((char *)v11 + 2);
      __asm { FCVT            H2, S3 }
      v12->i16[0] = _H2;
      v12 = (float16x4_t *)((char *)v12 + 2);
      ++v15;
    }
    while (v15 < a9);
  }
  return result;
}

uint64_t resample_vertical<half,half,3,(AlphaStyle)3>(uint64_t result, int8x16_t _Q0, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  float16x4_t *v7;
  _DWORD *v8;
  uint64_t v9;
  float *v10;
  signed int v15;
  int v16;
  unint64_t i;
  float32x4_t v18;
  float32x4_t v19;
  float *v20;
  uint64_t v21;
  _QWORD *v22;
  float16x8_t v23;
  float16x8_t v24;
  float32x2_t v25;
  uint64_t v26;
  float16x8_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x2_t v30;
  float32x4_t v31;
  float32x2_t v32;
  float32x4_t v33;
  float *v34;
  uint64_t v35;
  uint64_t v36;
  float32x2_t v37;
  uint64_t v38;
  int16x4_t v40;

  v7 = *(float16x4_t **)a6;
  v8 = *(_DWORD **)(a6 + 8);
  v9 = *(int *)(result + 4);
  v10 = (float *)(result + 8);
  __asm { FMOV            V0.2S, #1.0 }
  if (a5 >= 2)
  {
    v16 = 0;
    for (i = 2; i <= a5; i += 2)
    {
      v18 = 0uLL;
      v19 = 0uLL;
      v20 = v10;
      if ((int)v9 >= 2)
      {
        result = 0;
        v21 = (4 * v16) & 0xFFFFFFF8;
        v20 = v10;
        do
        {
          v22 = (_QWORD *)(a7 + 8 * result);
          v23 = *(float16x8_t *)(*v22 + 2 * v21);
          v24 = *(float16x8_t *)(v22[1] + 2 * v21);
          v25 = *(float32x2_t *)v20;
          v20 += 2;
          v19 = vmlaq_lane_f32(vmlaq_n_f32(v19, vcvt_hight_f32_f16(v23), v25.f32[0]), vcvt_hight_f32_f16(v24), v25, 1);
          v18 = vmlaq_lane_f32(vmlaq_n_f32(v18, vcvtq_f32_f16(*(float16x4_t *)v23.i8), v25.f32[0]), vcvtq_f32_f16(*(float16x4_t *)v24.i8), v25, 1);
          v26 = result + 4;
          result += 2;
        }
        while (v26 <= v9);
      }
      if ((v9 & 1) != 0)
      {
        result = 2 * ((4 * v16) & 0xFFFFFFF8);
        v27 = *(float16x8_t *)(*(_QWORD *)(a7 + 8 * ((int)v9 - 1)) + result);
        v19 = vaddq_f32(vmlaq_n_f32(v19, vcvt_hight_f32_f16(v27), *v20), (float32x4_t)0);
        v18 = vaddq_f32(vmlaq_n_f32(v18, vcvtq_f32_f16(*(float16x4_t *)v27.i8), *v20), (float32x4_t)0);
      }
      v16 += 2;
      v28 = v18;
      v28.i32[3] = v19.i32[0];
      v29 = (float32x4_t)vextq_s8((int8x16_t)v19, _Q0, 4uLL);
      v30 = (float32x2_t)vuzp2q_s32(vuzp2q_s32((int32x4_t)v18, (int32x4_t)v19), (int32x4_t)v18).u64[0];
      v31 = vpmaxq_f32(v18, v19);
      v32 = vminnm_f32(vmaxnm_f32(v30, 0), *(float32x2_t *)_Q0.i8);
      *(float32x2_t *)v31.f32 = vmaxnm_f32(v32, vpmax_f32(*(float32x2_t *)v31.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL)));
      *v7 = vcvt_f16_f32(v28);
      v7[1].i32[0] = vcvt_hight_f16_f32(*(int16x4_t *)&v32, v29).i32[2];
      v7 = (float16x4_t *)((char *)v7 + 12);
      *v8++ = vcvt_f16_f32(v31).u32[0];
    }
    v15 = a5 & 0xFFFFFFFE;
  }
  else
  {
    v15 = 0;
  }
  for (; v15 < a5; ++v15)
  {
    v33 = 0uLL;
    v34 = v10;
    if ((int)v9 >= 2)
    {
      v35 = 0;
      v36 = (4 * v15);
      v34 = v10;
      do
      {
        result = 2 * v36;
        v37 = *(float32x2_t *)v34;
        v34 += 2;
        v33 = vmlaq_lane_f32(vmlaq_n_f32(v33, vcvtq_f32_f16(*(float16x4_t *)(*(_QWORD *)(a7 + 8 * v35) + 2 * v36)), v37.f32[0]), vcvtq_f32_f16(*(float16x4_t *)(*(_QWORD *)(a7 + 8 * v35 + 8) + 2 * v36)), v37, 1);
        v38 = v35 + 4;
        v35 += 2;
      }
      while (v38 <= v9);
    }
    if ((v9 & 1) != 0)
      v33 = vaddq_f32(vmlaq_n_f32(v33, vcvtq_f32_f16(*(float16x4_t *)(*(_QWORD *)(a7 + 8 * ((int)v9 - 1)) + 2 * (4 * v15))), *v34), (float32x4_t)0);
    _S4 = vmaxnm_f32(vminnm_f32(vmaxnm_f32((float32x2_t)vdup_laneq_s32((int32x4_t)v33, 3), 0), *(float32x2_t *)_Q0.i8), vpmax_f32(vpmax_f32(*(float32x2_t *)v33.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL)), *(float32x2_t *)_Q0.i8)).u32[0];
    v40 = (int16x4_t)vcvt_f16_f32(v33);
    __asm { FCVT            H4, S4 }
    v7->i32[0] = v40.i32[0];
    v7->i16[2] = vdup_lane_s16(v40, 2).u16[0];
    v7 = (float16x4_t *)((char *)v7 + 6);
    *(_WORD *)v8 = _S4;
    v8 = (_DWORD *)((char *)v8 + 2);
  }
  return result;
}

uint64_t resample_vertical<half,half,4,(AlphaStyle)3>(uint64_t result, double a2, double a3, double a4, double a5, float32x4_t _Q4, uint64_t a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11)
{
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float16x8_t *v15;
  float16x4_t *v16;
  uint64_t v17;
  float *v18;
  int v19;
  int v20;
  unint64_t i;
  float32x4_t v22;
  __int32 v23;
  __int32 v24;
  float32x4_t v25;
  float32x4_t v26;
  __int32 v27;
  float32x4_t v28;
  __int32 v29;
  __int32 v30;
  float32x4_t v31;
  __int32 v32;
  __int32 v33;
  float32x4_t v34;
  float32x4_t v35;
  __int32 v36;
  __int32 v37;
  float *v38;
  __int32 v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  float16x8_t v43;
  uint64_t v44;
  float16x8_t v45;
  float32x2_t v46;
  char *v47;
  uint64_t v48;
  float16x8_t v49;
  float32x4_t v55;
  __int32 v56;
  float32x2_t v57;
  __int32 v58;
  float *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  float16x4_t *v63;
  float32x2_t v64;
  uint64_t v65;
  float16x4_t *v66;
  float32x4_t v67;

  v15 = *(float16x8_t **)a10;
  v16 = *(float16x4_t **)(a10 + 8);
  v17 = *(int *)(result + 4);
  v18 = (float *)(result + 8);
  if (a9 >= 4)
  {
    v20 = 0;
    for (i = 4; i <= a9; i += 4)
    {
      if ((int)v17 >= 2)
      {
        result = 0;
        v22.i32[0] = 0;
        v11.i32[0] = 0;
        v23 = 0;
        v40 = (5 * v20) & 0xFFFFFFFC;
        v24 = 0;
        v38 = v18;
        v25.i32[0] = 0;
        v26.i32[0] = 0;
        v13.i32[0] = 0;
        v27 = 0;
        v28.i32[0] = 0;
        v29 = 0;
        v14.i32[0] = 0;
        v30 = 0;
        v31.i32[0] = 0;
        v32 = 0;
        v33 = 0;
        v34.i32[0] = 0;
        v35.i32[0] = 0;
        v36 = 0;
        v37 = 0;
        v39 = 0;
        do
        {
          v41 = (_QWORD *)(a11 + 8 * result);
          v42 = *v41 + 2 * v40;
          v43 = *(float16x8_t *)(v42 + 16);
          v44 = v41[1] + 2 * v40;
          v45 = *(float16x8_t *)(v44 + 16);
          v46 = *(float32x2_t *)v38;
          v38 += 2;
          v35.i32[1] = v36;
          v35.i64[1] = __PAIR64__(v39, v37);
          v31.i32[1] = v32;
          v31.i64[1] = __PAIR64__(v34.u32[0], v33);
          v28.i32[1] = v29;
          v28.i64[1] = __PAIR64__(v30, v14.u32[0]);
          v25.i32[1] = v26.i32[0];
          v25.i64[1] = __PAIR64__(v27, v13.u32[0]);
          v22.i32[1] = v11.i32[0];
          v22.i64[1] = __PAIR64__(v24, v23);
          v22 = vmlaq_lane_f32(vmlaq_n_f32(v22, vcvtq_f32_f16(*(float16x4_t *)v42), v46.f32[0]), vcvtq_f32_f16(*(float16x4_t *)v44), v46, 1);
          v24 = v22.i32[3];
          v23 = v22.i32[2];
          v11.i32[0] = v22.i32[1];
          v25 = vmlaq_lane_f32(vmlaq_n_f32(v25, vcvt_hight_f32_f16(*(float16x8_t *)v42), v46.f32[0]), vcvt_hight_f32_f16(*(float16x8_t *)v44), v46, 1);
          v27 = v25.i32[3];
          v13.i32[0] = v25.i32[2];
          v26.i32[0] = v25.i32[1];
          v28 = vmlaq_lane_f32(vmlaq_n_f32(v28, vcvtq_f32_f16(*(float16x4_t *)v43.i8), v46.f32[0]), vcvtq_f32_f16(*(float16x4_t *)v45.i8), v46, 1);
          v30 = v28.i32[3];
          v14.i32[0] = v28.i32[2];
          v29 = v28.i32[1];
          v31 = vmlaq_lane_f32(vmlaq_n_f32(v31, vcvt_hight_f32_f16(v43), v46.f32[0]), vcvt_hight_f32_f16(v45), v46, 1);
          v34.i32[0] = v31.i32[3];
          v33 = v31.i32[2];
          v32 = v31.i32[1];
          v35 = vmlaq_lane_f32(vmlaq_n_f32(v35, vcvtq_f32_f16(*(float16x4_t *)(v42 + 32)), v46.f32[0]), vcvtq_f32_f16(*(float16x4_t *)(v44 + 32)), v46, 1);
          v39 = v35.i32[3];
          v37 = v35.i32[2];
          v36 = v35.i32[1];
          v47 = (char *)(result + 4);
          result += 2;
        }
        while ((uint64_t)v47 <= v17);
      }
      else
      {
        v22.i32[0] = 0;
        v11.i32[0] = 0;
        v23 = 0;
        v24 = 0;
        v25.i32[0] = 0;
        v26.i32[0] = 0;
        v13.i32[0] = 0;
        v27 = 0;
        v28.i32[0] = 0;
        v29 = 0;
        v14.i32[0] = 0;
        v30 = 0;
        v31.i32[0] = 0;
        v32 = 0;
        v33 = 0;
        v34.i32[0] = 0;
        v35.i32[0] = 0;
        v36 = 0;
        v37 = 0;
        v38 = v18;
        v39 = 0;
      }
      if ((v17 & 1) != 0)
      {
        result = (5 * v20) & 0xFFFFFFFC;
        v48 = *(_QWORD *)(a11 + 8 * ((int)v17 - 1)) + 2 * result;
        v49 = *(float16x8_t *)(v48 + 16);
        v35.i32[1] = v36;
        v35.i64[1] = __PAIR64__(v39, v37);
        v31.i32[1] = v32;
        v31.i64[1] = __PAIR64__(v34.u32[0], v33);
        v28.i32[1] = v29;
        v28.i64[1] = __PAIR64__(v30, v14.u32[0]);
        v25.i32[1] = v26.i32[0];
        v25.i64[1] = __PAIR64__(v27, v13.u32[0]);
        v22.i32[1] = v11.i32[0];
        v22.i64[1] = __PAIR64__(v24, v23);
        v22 = vaddq_f32(vmlaq_n_f32(v22, vcvtq_f32_f16(*(float16x4_t *)v48), *v38), (float32x4_t)0);
        v24 = v22.i32[3];
        v23 = v22.i32[2];
        v11.i32[0] = v22.i32[1];
        v25 = vaddq_f32(vmlaq_n_f32(v25, vcvt_hight_f32_f16(*(float16x8_t *)v48), *v38), (float32x4_t)0);
        v27 = v25.i32[3];
        v13.i32[0] = v25.i32[2];
        v26.i32[0] = v25.i32[1];
        v28 = vaddq_f32(vmlaq_n_f32(v28, vcvtq_f32_f16(*(float16x4_t *)v49.i8), *v38), (float32x4_t)0);
        v30 = v28.i32[3];
        v14.i32[0] = v28.i32[2];
        v29 = v28.i32[1];
        v31 = vaddq_f32(vmlaq_n_f32(v31, vcvt_hight_f32_f16(v49), *v38), (float32x4_t)0);
        v34.i32[0] = v31.i32[3];
        v33 = v31.i32[2];
        v32 = v31.i32[1];
        v35 = vaddq_f32(vmlaq_n_f32(v35, vcvtq_f32_f16(*(float16x4_t *)(v48 + 32)), *v38), (float32x4_t)0);
        v39 = v35.i32[3];
        v37 = v35.i32[2];
        v36 = v35.i32[1];
      }
      v25.i32[1] = v29;
      v25.i64[1] = __PAIR64__(v39, v33);
      v22.i32[1] = v11.i32[0];
      v22.i64[1] = __PAIR64__(v24, v23);
      v26.i32[1] = v13.i32[0];
      v20 += 4;
      v26.i64[1] = __PAIR64__(v28.u32[0], v27);
      v14.i32[1] = v30;
      v14.i64[1] = __PAIR64__(v32, v31.u32[0]);
      v34.i32[1] = v35.i32[0];
      v34.i64[1] = __PAIR64__(v37, v36);
      __asm { FMOV            V4.4S, #1.0 }
      *v15 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v22), v26);
      v15[1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v14), v34);
      v15 += 2;
      *v16++ = vcvt_f16_f32(vmaxnmq_f32(vminnmq_f32(vmaxnmq_f32(v25, (float32x4_t)0), _Q4), vpmaxq_f32(vpmaxq_f32(v22, v26), vpmaxq_f32(v14, v34))));
    }
    v19 = a9 & 0x7FFFFFFC;
  }
  else
  {
    v19 = 0;
  }
  if (v19 < a9)
  {
    __asm { FMOV            V1.2S, #1.0 }
    do
    {
      if ((int)v17 >= 2)
      {
        v60 = 0;
        v61 = (5 * v19);
        v55.i32[0] = 0;
        v59 = v18;
        v56 = 0;
        v57.i32[0] = 0;
        v58 = 0;
        _Q4.i32[0] = 0;
        do
        {
          v62 = (_QWORD *)(a11 + 8 * v60);
          result = *v62 + 2 * v61;
          v11.i16[0] = *(_WORD *)(result + 8);
          v63 = (float16x4_t *)(v62[1] + 2 * v61);
          v13.i16[0] = v63[1].i16[0];
          v11 = vcvtq_f32_f16(*(float16x4_t *)v11.f32);
          v12 = vcvtq_f32_f16(*v63);
          v64 = *(float32x2_t *)v59;
          v59 += 2;
          *(float32x2_t *)v14.f32 = v64;
          v13 = vcvtq_f32_f16(*(float16x4_t *)v13.f32);
          v55.i32[1] = v56;
          v55.i64[1] = __PAIR64__(v58, v57.u32[0]);
          _Q4 = vmlaq_lane_f32(vmlaq_f32(_Q4, v11, v14), v13, v64, 1);
          v55 = vmlaq_lane_f32(vmlaq_n_f32(v55, vcvtq_f32_f16(*(float16x4_t *)result), v64.f32[0]), v12, v64, 1);
          v58 = v55.i32[3];
          v57.i32[0] = v55.i32[2];
          v56 = v55.i32[1];
          v65 = v60 + 4;
          v60 += 2;
        }
        while (v65 <= v17);
      }
      else
      {
        v55.i32[0] = 0;
        v56 = 0;
        v57.i32[0] = 0;
        v58 = 0;
        v59 = v18;
        _Q4.i32[0] = 0;
      }
      if ((v17 & 1) != 0)
      {
        v66 = (float16x4_t *)(*(_QWORD *)(a11 + 8 * ((int)v17 - 1)) + 2 * (5 * v19));
        v11.i16[0] = v66[1].i16[0];
        v11 = vcvtq_f32_f16(*(float16x4_t *)v11.f32);
        v12.f32[0] = *v59;
        v55.i32[1] = v56;
        v55.i64[1] = __PAIR64__(v58, v57.u32[0]);
        _Q4 = vaddq_f32(vmlaq_f32(_Q4, v11, v12), (float32x4_t)0);
        v55 = vaddq_f32(vmlaq_n_f32(v55, vcvtq_f32_f16(*v66), *v59), (float32x4_t)0);
        v58 = v55.i32[3];
        v57.i32[0] = v55.i32[2];
        v56 = v55.i32[1];
      }
      v67.i64[0] = __PAIR64__(v56, v55.u32[0]);
      v67.i64[1] = __PAIR64__(v58, v57.u32[0]);
      v55.i32[1] = v56;
      v57.i32[1] = v58;
      _S3 = vmaxnm_f32(vminnm_f32(vmaxnm_f32(*(float32x2_t *)_Q4.f32, 0), _D1), vpmax_f32(vpmax_f32(*(float32x2_t *)v55.f32, v57), 0)).u32[0];
      *(float16x4_t *)_Q4.f32 = vcvt_f16_f32(v67);
      v15->i64[0] = _Q4.i64[0];
      v15 = (float16x8_t *)((char *)v15 + 8);
      __asm { FCVT            H3, S3 }
      v16->i16[0] = _S3;
      v16 = (float16x4_t *)((char *)v16 + 2);
      ++v19;
    }
    while (v19 < a9);
  }
  return result;
}

uint64_t resample_vertical<float,float,1,(AlphaStyle)0>(uint64_t result, double a2, double a3, float32x4_t a4, float32x4_t a5, uint64_t a6, uint64_t a7, int a8, float32x4_t **a9, uint64_t a10)
{
  float32x4_t *v10;
  uint64_t v11;
  float *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t i;
  float32x4_t v16;
  float *v17;
  uint64_t v18;
  _QWORD *v19;
  float32x4_t *v20;
  float32x2_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t j;
  uint64_t v25;
  float32x4_t v26;
  float *v27;
  uint64_t v28;
  uint64_t *v29;
  float32x2_t v30;
  uint64_t v31;
  float32x2_t v32;
  float32x2_t *v33;
  uint64_t v34;
  _QWORD *v35;
  float32x2_t v36;
  uint64_t v37;

  v10 = *a9;
  v11 = *(int *)(result + 4);
  v12 = (float *)(result + 8);
  if (a8 >= 8)
  {
    v14 = 0;
    for (i = 8; i <= a8; i += 8)
    {
      v16 = 0uLL;
      a4 = 0uLL;
      v17 = v12;
      if ((int)v11 >= 2)
      {
        v18 = 0;
        v17 = v12;
        do
        {
          v19 = (_QWORD *)(a10 + 8 * v18);
          result = *v19 + 4 * v14;
          a5 = *(float32x4_t *)(result + 16);
          v20 = (float32x4_t *)(v19[1] + 4 * v14);
          v21 = *(float32x2_t *)v17;
          v17 += 2;
          a4 = vmlaq_lane_f32(vmlaq_n_f32(a4, a5, v21.f32[0]), v20[1], v21, 1);
          v16 = vmlaq_lane_f32(vmlaq_n_f32(v16, *(float32x4_t *)result, v21.f32[0]), *v20, v21, 1);
          v22 = v18 + 4;
          v18 += 2;
        }
        while (v22 <= v11);
      }
      if ((v11 & 1) != 0)
      {
        v23 = *(_QWORD *)(a10 + 8 * ((int)v11 - 1)) + 4 * v14;
        a5 = *(float32x4_t *)(v23 + 16);
        a4 = vaddq_f32(vmlaq_n_f32(a4, a5, *v17), (float32x4_t)0);
        v16 = vaddq_f32(vmlaq_n_f32(v16, *(float32x4_t *)v23, *v17), (float32x4_t)0);
      }
      v14 += 8;
      *v10 = v16;
      v10[1] = a4;
      v10 += 2;
    }
    v13 = a8 & 0xFFFFFFF8;
  }
  else
  {
    v13 = 0;
  }
  for (j = v13 | 4; (int)j <= a8; j += 4)
  {
    v25 = 4 * v13;
    v26 = 0uLL;
    v27 = v12;
    if ((int)v11 >= 2)
    {
      v28 = 0;
      v27 = v12;
      do
      {
        v29 = (uint64_t *)(a10 + 8 * v28);
        result = *v29;
        a4 = *(float32x4_t *)(*v29 + v25);
        a5 = *(float32x4_t *)(v29[1] + v25);
        v30 = *(float32x2_t *)v27;
        v27 += 2;
        v26 = vmlaq_lane_f32(vmlaq_n_f32(v26, a4, v30.f32[0]), a5, v30, 1);
        v31 = v28 + 4;
        v28 += 2;
      }
      while (v31 <= v11);
    }
    if ((v11 & 1) != 0)
    {
      a4 = *(float32x4_t *)(*(_QWORD *)(a10 + 8 * ((int)v11 - 1)) + v25);
      v26 = vaddq_f32(vmlaq_n_f32(v26, a4, *v27), (float32x4_t)0);
    }
    *v10++ = v26;
    v13 = j;
  }
  for (; (int)v13 < a8; ++v13)
  {
    v32 = 0;
    v33 = (float32x2_t *)v12;
    if ((int)v11 >= 2)
    {
      v34 = 0;
      v32 = 0;
      v33 = (float32x2_t *)v12;
      do
      {
        v35 = (_QWORD *)(a10 + 8 * v34);
        a4.i32[0] = *(_DWORD *)(*v35 + 4 * v13);
        a5.i32[0] = *(_DWORD *)(v35[1] + 4 * v13);
        v36 = *v33++;
        v32 = vmla_lane_f32(vmla_f32(v32, v36, *(float32x2_t *)a4.f32), *(float32x2_t *)a5.f32, v36, 1);
        v37 = v34 + 4;
        v34 += 2;
      }
      while (v37 <= v11);
    }
    if ((v11 & 1) != 0)
    {
      a4.i32[0] = *(_DWORD *)(*(_QWORD *)(a10 + 8 * ((int)v11 - 1)) + 4 * v13);
      a5.i32[0] = v33->i32[0];
      v32.i32[0] = vadd_f32(vmla_f32(v32, *(float32x2_t *)a5.f32, *(float32x2_t *)a4.f32), 0).u32[0];
    }
    v10->i32[0] = v32.i32[0];
    v10 = (float32x4_t *)((char *)v10 + 4);
  }
  return result;
}

uint64_t resample_vertical<float,float,3,(AlphaStyle)0>(uint64_t result, double a2, double a3, double a4, float32x4_t a5, double a6, uint64_t a7, uint64_t a8, int a9, float32x4_t **a10, uint64_t a11)
{
  float32x4_t *v11;
  uint64_t v12;
  float *v13;
  int v14;
  int v15;
  unint64_t i;
  float32x4_t v17;
  __int32 v18;
  __int32 v19;
  __int32 v20;
  unsigned __int32 v21;
  unsigned __int32 v22;
  unsigned __int32 v23;
  float32x4_t v24;
  __int32 v25;
  __int32 v26;
  float *v27;
  __int32 v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  float32x4_t *v32;
  float32x4_t *v33;
  float32x2_t v34;
  float32x4_t *v35;
  float32x4_t v36;
  float *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  float32x4_t v42;
  uint64_t v43;
  float32x2_t v44;
  uint64_t v45;
  uint64_t v46;
  float32x4_t v47;

  v11 = *a10;
  v12 = *(int *)(result + 4);
  v13 = (float *)(result + 8);
  if (a9 >= 4)
  {
    v15 = 0;
    for (i = 4; i <= a9; i += 4)
    {
      if ((int)v12 >= 2)
      {
        v29 = 0;
        v17.i32[0] = 0;
        v18 = 0;
        v19 = 0;
        v30 = (3 * v15) & 0xFFFFFFFC;
        v20 = 0;
        v27 = v13;
        a5.i32[0] = 0;
        v21 = 0;
        v22 = 0;
        v23 = 0;
        v24.i32[0] = 0;
        v25 = 0;
        v26 = 0;
        v28 = 0;
        do
        {
          v31 = (_QWORD *)(a11 + 8 * v29);
          v32 = (float32x4_t *)(*v31 + 4 * v30);
          v33 = (float32x4_t *)(v31[1] + 4 * v30);
          v34 = *(float32x2_t *)v27;
          v27 += 2;
          v24.i32[1] = v25;
          v24.i64[1] = __PAIR64__(v28, v26);
          a5.i32[1] = v21;
          a5.i64[1] = __PAIR64__(v23, v22);
          v17.i32[1] = v18;
          v17.i64[1] = __PAIR64__(v20, v19);
          v17 = vmlaq_lane_f32(vmlaq_n_f32(v17, *v32, v34.f32[0]), *v33, v34, 1);
          v20 = v17.i32[3];
          v19 = v17.i32[2];
          v18 = v17.i32[1];
          a5 = vmlaq_lane_f32(vmlaq_n_f32(a5, v32[1], v34.f32[0]), v33[1], v34, 1);
          v23 = a5.u32[3];
          v22 = a5.u32[2];
          v21 = a5.u32[1];
          v24 = vmlaq_lane_f32(vmlaq_n_f32(v24, v32[2], v34.f32[0]), v33[2], v34, 1);
          v28 = v24.i32[3];
          v26 = v24.i32[2];
          v25 = v24.i32[1];
          result = v29 + 4;
          v29 += 2;
        }
        while (result <= v12);
      }
      else
      {
        v17.i32[0] = 0;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        a5.i32[0] = 0;
        v21 = 0;
        v22 = 0;
        v23 = 0;
        v24.i32[0] = 0;
        v25 = 0;
        v26 = 0;
        v27 = v13;
        v28 = 0;
      }
      if ((v12 & 1) != 0)
      {
        v35 = (float32x4_t *)(*(_QWORD *)(a11 + 8 * ((int)v12 - 1)) + 4 * ((3 * v15) & 0xFFFFFFFC));
        v24.i32[1] = v25;
        v24.i64[1] = __PAIR64__(v28, v26);
        a5.i32[1] = v21;
        a5.i64[1] = __PAIR64__(v23, v22);
        v17.i32[1] = v18;
        v17.i64[1] = __PAIR64__(v20, v19);
        v17 = vaddq_f32(vmlaq_n_f32(v17, *v35, *v27), (float32x4_t)0);
        v20 = v17.i32[3];
        v19 = v17.i32[2];
        v18 = v17.i32[1];
        a5 = vaddq_f32(vmlaq_n_f32(a5, v35[1], *v27), (float32x4_t)0);
        v23 = a5.u32[3];
        v22 = a5.u32[2];
        v21 = a5.u32[1];
        v24 = vaddq_f32(vmlaq_n_f32(v24, v35[2], *v27), (float32x4_t)0);
        v28 = v24.i32[3];
        v26 = v24.i32[2];
        v25 = v24.i32[1];
      }
      v15 += 4;
      a5.i32[1] = v21;
      a5.i64[1] = __PAIR64__(v23, v22);
      v17.i32[1] = v18;
      v17.i64[1] = __PAIR64__(v20, v19);
      *v11 = v17;
      v11[1] = a5;
      v24.i32[1] = v25;
      v24.i64[1] = __PAIR64__(v28, v26);
      v11[2] = v24;
      v11 += 3;
    }
    v14 = a9 & 0x7FFFFFFC;
  }
  else
  {
    v14 = 0;
  }
  for (; v14 < a9; ++v14)
  {
    v36 = 0uLL;
    v37 = v13;
    if ((int)v12 >= 2)
    {
      v38 = 0;
      v39 = (3 * v14);
      v37 = v13;
      do
      {
        v40 = (_QWORD *)(a11 + 8 * v38);
        v41 = *v40 + 4 * v39;
        v42.i64[0] = *(_QWORD *)v41;
        a5.i32[0] = *(_DWORD *)(v41 + 8);
        v42.i64[1] = a5.i64[0];
        v43 = v40[1] + 4 * v39;
        a5.i64[0] = *(_QWORD *)v43;
        LODWORD(a6) = *(_DWORD *)(v43 + 8);
        *(double *)&a5.i64[1] = a6;
        v44 = *(float32x2_t *)v37;
        v37 += 2;
        HIDWORD(a6) = v44.i32[1];
        v36 = vmlaq_lane_f32(vmlaq_n_f32(v36, v42, v44.f32[0]), a5, v44, 1);
        v45 = v38 + 4;
        v38 += 2;
      }
      while (v45 <= v12);
    }
    if ((v12 & 1) != 0)
    {
      v46 = *(_QWORD *)(a11 + 8 * ((int)v12 - 1)) + 4 * (3 * v14);
      v47.i64[0] = *(_QWORD *)v46;
      a5.i32[0] = *(_DWORD *)(v46 + 8);
      v47.i64[1] = a5.i64[0];
      v36 = vaddq_f32(vmlaq_n_f32(v36, v47, *v37), (float32x4_t)0);
    }
    v11->i64[0] = v36.i64[0];
    v11->i32[2] = vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL).u32[0];
    v11 = (float32x4_t *)((char *)v11 + 12);
  }
  return result;
}

uint64_t resample_vertical<float,float,4,(AlphaStyle)0>(uint64_t result, uint64_t a2, uint64_t a3, int a4, float32x4_t **a5, uint64_t a6)
{
  float32x4_t *v6;
  uint64_t v7;
  float *v8;
  signed int v9;
  int v10;
  unint64_t i;
  float32x4_t v12;
  float32x4_t v13;
  float *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  float32x4_t *v18;
  float32x4_t *v19;
  float32x2_t v20;
  float32x4_t *v21;
  float32x4_t v22;
  float *v23;
  uint64_t v24;
  uint64_t *v25;
  float32x2_t v26;
  uint64_t v27;

  v6 = *a5;
  v7 = *(int *)(result + 4);
  v8 = (float *)(result + 8);
  if (a4 >= 2)
  {
    v10 = 0;
    for (i = 2; i <= a4; i += 2)
    {
      v12 = 0uLL;
      v13 = 0uLL;
      v14 = v8;
      if ((int)v7 >= 2)
      {
        v15 = 0;
        v16 = (4 * v10) & 0xFFFFFFF8;
        v14 = v8;
        do
        {
          v17 = (_QWORD *)(a6 + 8 * v15);
          v18 = (float32x4_t *)(*v17 + 4 * v16);
          v19 = (float32x4_t *)(v17[1] + 4 * v16);
          v20 = *(float32x2_t *)v14;
          v14 += 2;
          v13 = vmlaq_lane_f32(vmlaq_n_f32(v13, v18[1], v20.f32[0]), v19[1], v20, 1);
          v12 = vmlaq_lane_f32(vmlaq_n_f32(v12, *v18, v20.f32[0]), *v19, v20, 1);
          result = v15 + 4;
          v15 += 2;
        }
        while (result <= v7);
      }
      if ((v7 & 1) != 0)
      {
        v21 = (float32x4_t *)(*(_QWORD *)(a6 + 8 * ((int)v7 - 1)) + 4 * ((4 * v10) & 0xFFFFFFF8));
        v13 = vaddq_f32(vmlaq_n_f32(v13, v21[1], *v14), (float32x4_t)0);
        v12 = vaddq_f32(vmlaq_n_f32(v12, *v21, *v14), (float32x4_t)0);
      }
      v10 += 2;
      *v6 = v12;
      v6[1] = v13;
      v6 += 2;
    }
    v9 = a4 & 0xFFFFFFFE;
  }
  else
  {
    v9 = 0;
  }
  for (; v9 < a4; ++v9)
  {
    v22 = 0uLL;
    v23 = v8;
    if ((int)v7 >= 2)
    {
      v24 = 0;
      v23 = v8;
      do
      {
        v25 = (uint64_t *)(a6 + 8 * v24);
        result = *v25;
        v26 = *(float32x2_t *)v23;
        v23 += 2;
        v22 = vmlaq_lane_f32(vmlaq_n_f32(v22, *(float32x4_t *)(*v25 + 4 * (4 * v9)), v26.f32[0]), *(float32x4_t *)(v25[1] + 4 * (4 * v9)), v26, 1);
        v27 = v24 + 4;
        v24 += 2;
      }
      while (v27 <= v7);
    }
    if ((v7 & 1) != 0)
      v22 = vaddq_f32(vmlaq_n_f32(v22, *(float32x4_t *)(*(_QWORD *)(a6 + 8 * ((int)v7 - 1)) + 4 * (4 * v9)), *v23), (float32x4_t)0);
    *v6++ = v22;
  }
  return result;
}

uint64_t resample_vertical<float,float,2,(AlphaStyle)1>(uint64_t result, uint64_t a2, uint64_t a3, int a4, float32x4_t **a5, uint64_t a6)
{
  float32x4_t *v6;
  uint64_t v7;
  float *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  int32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float *v15;
  uint64_t v16;
  _QWORD *v17;
  float32x4_t *v18;
  float32x4_t *v19;
  float32x2_t v20;
  float32x4_t *v21;
  int32x4_t v22;
  float32x2_t v23;
  float *v24;
  uint64_t v25;
  uint64_t *v26;
  float32x2_t v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;

  v6 = *a5;
  v7 = *(int *)(result + 4);
  v8 = (float *)(result + 8);
  if (a4 >= 4)
  {
    v10 = 0;
    v11 = 4;
    v12 = vdupq_lane_s32((int32x2_t)0x80000000800000, 0);
    do
    {
      v13 = 0uLL;
      v14 = 0uLL;
      v15 = v8;
      if ((int)v7 >= 2)
      {
        v16 = 0;
        v15 = v8;
        do
        {
          v17 = (_QWORD *)(a6 + 8 * v16);
          v18 = (float32x4_t *)(*v17 + 8 * v10);
          v19 = (float32x4_t *)(v17[1] + 8 * v10);
          v20 = *(float32x2_t *)v15;
          v15 += 2;
          v14 = vmlaq_lane_f32(vmlaq_n_f32(v14, v18[1], v20.f32[0]), v19[1], v20, 1);
          v13 = vmlaq_lane_f32(vmlaq_n_f32(v13, *v18, v20.f32[0]), *v19, v20, 1);
          result = v16 + 4;
          v16 += 2;
        }
        while (result <= v7);
      }
      if ((v7 & 1) != 0)
      {
        v21 = (float32x4_t *)(*(_QWORD *)(a6 + 8 * ((int)v7 - 1)) + 8 * v10);
        v14 = vaddq_f32(vmlaq_n_f32(v14, v21[1], *v15), (float32x4_t)0);
        v13 = vaddq_f32(vmlaq_n_f32(v13, *v21, *v15), (float32x4_t)0);
      }
      v10 += 4;
      v22 = (int32x4_t)vmaxnmq_f32(vmaxnmq_f32((float32x4_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v14), (float32x4_t)vuzp2q_s32((int32x4_t)v13, (int32x4_t)v14)), (float32x4_t)0);
      *v6 = vminnmq_f32(vmaxnmq_f32(v13, (float32x4_t)vzip1q_s32(v22, v12)), (float32x4_t)xmmword_1850048B0);
      v6[1] = vminnmq_f32(vmaxnmq_f32(v14, (float32x4_t)vzip2q_s32(v22, v12)), (float32x4_t)xmmword_1850048B0);
      v6 += 2;
      v11 += 4;
    }
    while (v11 <= a4);
    v9 = a4 & 0x7FFFFFFC;
  }
  else
  {
    v9 = 0;
  }
  for (; v9 < a4; ++v9)
  {
    v23 = 0;
    v24 = v8;
    if ((int)v7 >= 2)
    {
      v25 = 0;
      v23 = 0;
      v24 = v8;
      do
      {
        v26 = (uint64_t *)(a6 + 8 * v25);
        result = *v26;
        v27 = *(float32x2_t *)v24;
        v24 += 2;
        v23 = vmla_lane_f32(vmla_n_f32(v23, *(float32x2_t *)(*v26 + 4 * (2 * v9)), v27.f32[0]), *(float32x2_t *)(v26[1] + 4 * (2 * v9)), v27, 1);
        v28 = v25 + 4;
        v25 += 2;
      }
      while (v28 <= v7);
    }
    if ((v7 & 1) != 0)
      v23 = vadd_f32(vmla_n_f32(v23, *(float32x2_t *)(*(_QWORD *)(a6 + 8 * ((int)v7 - 1)) + 4 * (2 * v9)), *v24), 0);
    v29 = vpmax_f32(v23);
    v30 = fmaxf(v29, 0.0);
    if (v29 <= 1.0)
      v31 = v30;
    else
      v31 = 1.0;
    v23.f32[0] = v31;
    *(float32x2_t *)v6->f32 = v23;
    v6 = (float32x4_t *)((char *)v6 + 8);
  }
  return result;
}

uint64_t resample_vertical<float,float,4,(AlphaStyle)1>(uint64_t result, uint64_t a2, uint64_t a3, int a4, float32x4_t **a5, uint64_t a6)
{
  float32x4_t *v6;
  uint64_t v7;
  float *v8;
  signed int v9;
  int v10;
  unint64_t v11;
  int32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  float32x4_t *v19;
  float32x4_t *v20;
  float32x2_t v21;
  float32x4_t *v22;
  int8x16_t v23;
  int32x2_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float *v28;
  uint64_t v29;
  uint64_t *v30;
  float32x2_t v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;

  v6 = *a5;
  v7 = *(int *)(result + 4);
  v8 = (float *)(result + 8);
  if (a4 >= 2)
  {
    v10 = 0;
    v11 = 2;
    v12 = vdupq_lane_s32((int32x2_t)0x80000000800000, 0);
    do
    {
      v13 = 0uLL;
      v14 = 0uLL;
      v15 = v8;
      if ((int)v7 >= 2)
      {
        v16 = 0;
        v17 = (4 * v10) & 0xFFFFFFF8;
        v15 = v8;
        do
        {
          v18 = (_QWORD *)(a6 + 8 * v16);
          v19 = (float32x4_t *)(*v18 + 4 * v17);
          v20 = (float32x4_t *)(v18[1] + 4 * v17);
          v21 = *(float32x2_t *)v15;
          v15 += 2;
          v14 = vmlaq_lane_f32(vmlaq_n_f32(v14, v19[1], v21.f32[0]), v20[1], v21, 1);
          v13 = vmlaq_lane_f32(vmlaq_n_f32(v13, *v19, v21.f32[0]), *v20, v21, 1);
          result = v16 + 4;
          v16 += 2;
        }
        while (result <= v7);
      }
      if ((v7 & 1) != 0)
      {
        v22 = (float32x4_t *)(*(_QWORD *)(a6 + 8 * ((int)v7 - 1)) + 4 * ((4 * v10) & 0xFFFFFFF8));
        v14 = vaddq_f32(vmlaq_n_f32(v14, v22[1], *v15), (float32x4_t)0);
        v13 = vaddq_f32(vmlaq_n_f32(v13, *v22, *v15), (float32x4_t)0);
      }
      v10 += 2;
      v23 = (int8x16_t)vmaxnmq_f32((float32x4_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v14), (float32x4_t)vuzp2q_s32((int32x4_t)v13, (int32x4_t)v14));
      v24 = (int32x2_t)vextq_s8(v23, v23, 8uLL).u64[0];
      *(float32x2_t *)v23.i8 = vmaxnm_f32(vmaxnm_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v23.i8, v24), (float32x2_t)vzip2_s32(*(int32x2_t *)v23.i8, v24)), 0);
      v25 = (float32x4_t)v12;
      v25.i32[0] = v23.i32[1];
      v26 = (float32x4_t)v12;
      v26.i32[0] = v23.i32[0];
      *v6 = vminnmq_f32(vmaxnmq_f32(v13, v26), (float32x4_t)xmmword_1850048C0);
      v6[1] = vminnmq_f32(vmaxnmq_f32(v14, v25), (float32x4_t)xmmword_1850048C0);
      v6 += 2;
      v11 += 2;
    }
    while (v11 <= a4);
    v9 = a4 & 0xFFFFFFFE;
  }
  else
  {
    v9 = 0;
  }
  for (; v9 < a4; ++v9)
  {
    v27 = 0uLL;
    v28 = v8;
    if ((int)v7 >= 2)
    {
      v29 = 0;
      v28 = v8;
      do
      {
        v30 = (uint64_t *)(a6 + 8 * v29);
        result = *v30;
        v31 = *(float32x2_t *)v28;
        v28 += 2;
        v27 = vmlaq_lane_f32(vmlaq_n_f32(v27, *(float32x4_t *)(*v30 + 4 * (4 * v9)), v31.f32[0]), *(float32x4_t *)(v30[1] + 4 * (4 * v9)), v31, 1);
        v32 = v29 + 4;
        v29 += 2;
      }
      while (v32 <= v7);
    }
    if ((v7 & 1) != 0)
      v27 = vaddq_f32(vmlaq_n_f32(v27, *(float32x4_t *)(*(_QWORD *)(a6 + 8 * ((int)v7 - 1)) + 4 * (4 * v9)), *v28), (float32x4_t)0);
    v33 = vmaxvq_f32(v27);
    v34 = fmaxf(v33, 0.0);
    if (v33 <= 1.0)
      v35 = v34;
    else
      v35 = 1.0;
    v27.f32[0] = v35;
    *v6++ = v27;
  }
  return result;
}

uint64_t resample_vertical<float,float,5,(AlphaStyle)1>(uint64_t result, double a2, double a3, double a4, double a5, float32x4_t a6, uint64_t a7, uint64_t a8, int a9, float32x4_t **a10, uint64_t a11)
{
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t *v15;
  uint64_t v16;
  float *v17;
  int v18;
  int v19;
  unint64_t i;
  float32x4_t v21;
  __int32 v22;
  __int32 v23;
  __int32 v24;
  float32x4_t v25;
  __int32 v26;
  __int32 v27;
  __int32 v28;
  float32x4_t v29;
  __int32 v30;
  __int32 v31;
  __int32 v32;
  __int32 v33;
  __int32 v34;
  __int32 v35;
  __int32 v36;
  __int32 v37;
  float *v38;
  __int32 v39;
  uint64_t v40;
  _QWORD *v41;
  float32x4_t *v42;
  float32x4_t *v43;
  float32x2_t v44;
  uint64_t v45;
  float32x4_t *v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  __int32 v59;
  __int32 v60;
  __int32 v61;
  float *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  float32x4_t *v66;
  float32x4_t *v67;
  float32x2_t v68;
  uint64_t v69;
  float32x4_t *v70;
  float v71;
  float v72;
  float v73;

  v15 = *a10;
  v16 = *(int *)(result + 4);
  v17 = (float *)(result + 8);
  if (a9 >= 4)
  {
    v19 = 0;
    for (i = 4; i <= a9; i += 4)
    {
      if ((int)v16 >= 2)
      {
        result = 0;
        v21.i32[0] = 0;
        v22 = 0;
        v23 = 0;
        v40 = (5 * v19) & 0xFFFFFFFC;
        v24 = 0;
        v38 = v17;
        v25.i32[0] = 0;
        v26 = 0;
        v27 = 0;
        v28 = 0;
        v29.i32[0] = 0;
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v11.i32[0] = 0;
        v33 = 0;
        v34 = 0;
        v35 = 0;
        v12.i32[0] = 0;
        v36 = 0;
        v37 = 0;
        v39 = 0;
        do
        {
          v41 = (_QWORD *)(a11 + 8 * result);
          v42 = (float32x4_t *)(*v41 + 4 * v40);
          v43 = (float32x4_t *)(v41[1] + 4 * v40);
          v44 = *(float32x2_t *)v38;
          v38 += 2;
          v12.i32[1] = v36;
          v12.i64[1] = __PAIR64__(v39, v37);
          v11.i32[1] = v33;
          v11.i64[1] = __PAIR64__(v35, v34);
          v29.i32[1] = v30;
          v29.i64[1] = __PAIR64__(v32, v31);
          v25.i32[1] = v26;
          v25.i64[1] = __PAIR64__(v28, v27);
          v21.i32[1] = v22;
          v21.i64[1] = __PAIR64__(v24, v23);
          v21 = vmlaq_lane_f32(vmlaq_n_f32(v21, *v42, v44.f32[0]), *v43, v44, 1);
          v24 = v21.i32[3];
          v23 = v21.i32[2];
          v22 = v21.i32[1];
          v25 = vmlaq_lane_f32(vmlaq_n_f32(v25, v42[1], v44.f32[0]), v43[1], v44, 1);
          v28 = v25.i32[3];
          v27 = v25.i32[2];
          v26 = v25.i32[1];
          v29 = vmlaq_lane_f32(vmlaq_n_f32(v29, v42[2], v44.f32[0]), v43[2], v44, 1);
          v32 = v29.i32[3];
          v31 = v29.i32[2];
          v30 = v29.i32[1];
          v11 = vmlaq_lane_f32(vmlaq_n_f32(v11, v42[3], v44.f32[0]), v43[3], v44, 1);
          v35 = v11.i32[3];
          v34 = v11.i32[2];
          v33 = v11.i32[1];
          v12 = vmlaq_lane_f32(vmlaq_n_f32(v12, v42[4], v44.f32[0]), v43[4], v44, 1);
          v39 = v12.i32[3];
          v37 = v12.i32[2];
          v36 = v12.i32[1];
          v45 = result + 4;
          result += 2;
        }
        while (v45 <= v16);
      }
      else
      {
        v21.i32[0] = 0;
        v22 = 0;
        v23 = 0;
        v24 = 0;
        v25.i32[0] = 0;
        v26 = 0;
        v27 = 0;
        v28 = 0;
        v29.i32[0] = 0;
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v11.i32[0] = 0;
        v33 = 0;
        v34 = 0;
        v35 = 0;
        v12.i32[0] = 0;
        v36 = 0;
        v37 = 0;
        v38 = v17;
        v39 = 0;
      }
      if ((v16 & 1) != 0)
      {
        result = (5 * v19) & 0xFFFFFFFC;
        v46 = (float32x4_t *)(*(_QWORD *)(a11 + 8 * ((int)v16 - 1)) + 4 * result);
        v12.i32[1] = v36;
        v12.i64[1] = __PAIR64__(v39, v37);
        v11.i32[1] = v33;
        v11.i64[1] = __PAIR64__(v35, v34);
        v29.i32[1] = v30;
        v29.i64[1] = __PAIR64__(v32, v31);
        v25.i32[1] = v26;
        v25.i64[1] = __PAIR64__(v28, v27);
        v21.i32[1] = v22;
        v21.i64[1] = __PAIR64__(v24, v23);
        v21 = vaddq_f32(vmlaq_n_f32(v21, *v46, *v38), (float32x4_t)0);
        v24 = v21.i32[3];
        v23 = v21.i32[2];
        v22 = v21.i32[1];
        v25 = vaddq_f32(vmlaq_n_f32(v25, v46[1], *v38), (float32x4_t)0);
        v28 = v25.i32[3];
        v27 = v25.i32[2];
        v26 = v25.i32[1];
        v29 = vaddq_f32(vmlaq_n_f32(v29, v46[2], *v38), (float32x4_t)0);
        v32 = v29.i32[3];
        v31 = v29.i32[2];
        v30 = v29.i32[1];
        v11 = vaddq_f32(vmlaq_n_f32(v11, v46[3], *v38), (float32x4_t)0);
        v35 = v11.i32[3];
        v34 = v11.i32[2];
        v33 = v11.i32[1];
        v12 = vaddq_f32(vmlaq_n_f32(v12, v46[4], *v38), (float32x4_t)0);
        v39 = v12.i32[3];
        v37 = v12.i32[2];
        v36 = v12.i32[1];
      }
      v47.i64[0] = __PAIR64__(v30, v25.u32[0]);
      v47.i64[1] = __PAIR64__(v39, v34);
      v48.i64[0] = __PAIR64__(v29.u32[0], v24);
      v48.i64[1] = __PAIR64__(v37, v33);
      v19 += 4;
      v49.i64[0] = __PAIR64__(v28, v23);
      v49.i64[1] = __PAIR64__(v36, v11.u32[0]);
      v50 = vmaxnmq_f32(v47, v48);
      v48.i64[0] = __PAIR64__(v27, v22);
      v51 = vmaxnmq_f32(v50, v49);
      v48.i64[1] = __PAIR64__(v12.u32[0], v32);
      v49.i64[0] = __PAIR64__(v26, v21.u32[0]);
      v49.i64[1] = __PAIR64__(v35, v31);
      v52 = vmaxnmq_f32(vmaxnmq_f32(vmaxnmq_f32(v51, v48), v49), (float32x4_t)0);
      v53.i64[0] = 0x80000000800000;
      v53.i64[1] = 0x80000000800000;
      v54 = (float32x4_t)vdupq_lane_s32((int32x2_t)0x80000000800000, 0);
      v55 = v54;
      v55.i32[3] = v52.i32[3];
      v56 = v54;
      v56.i32[2] = v52.i32[2];
      v57 = v54;
      v57.i32[1] = v52.i32[1];
      v54.i32[0] = v52.i32[0];
      v21.i32[1] = v22;
      v21.i64[1] = __PAIR64__(v24, v23);
      v25.i32[1] = v26;
      v25.i64[1] = __PAIR64__(v28, v27);
      v29.i32[1] = v30;
      v29.i64[1] = __PAIR64__(v32, v31);
      v11.i32[1] = v33;
      v11.i64[1] = __PAIR64__(v35, v34);
      v12.i32[1] = v36;
      v12.i64[1] = __PAIR64__(v39, v37);
      a6 = vminnmq_f32(vmaxnmq_f32(v29, v56), (float32x4_t)xmmword_1850048E0);
      v15[2] = a6;
      v15[3] = vminnmq_f32(vmaxnmq_f32(v11, v55), (float32x4_t)xmmword_1850048F0);
      *v15 = vminnmq_f32(vmaxnmq_f32(v21, v54), (float32x4_t)xmmword_1850048C0);
      v15[1] = vminnmq_f32(vmaxnmq_f32(v25, v57), (float32x4_t)xmmword_1850048D0);
      v15[4] = vminnmq_f32(vmaxnmq_f32(v12, v53), (float32x4_t)vdupq_n_s32(0x7F7FFFFFu));
      v15 += 5;
    }
    v18 = a9 & 0x7FFFFFFC;
  }
  else
  {
    v18 = 0;
  }
  for (; v18 < a9; ++v18)
  {
    if ((int)v16 >= 2)
    {
      v63 = 0;
      v64 = (5 * v18);
      v58.i32[0] = 0;
      v62 = v17;
      v59 = 0;
      v60 = 0;
      v61 = 0;
      a6.i32[0] = 0;
      do
      {
        v65 = (_QWORD *)(a11 + 8 * v63);
        v66 = (float32x4_t *)(*v65 + 4 * v64);
        v11.i32[0] = v66[1].i32[0];
        v67 = (float32x4_t *)(v65[1] + 4 * v64);
        v12 = *v67;
        v68 = *(float32x2_t *)v62;
        v62 += 2;
        *(float32x2_t *)v13.f32 = v68;
        v14.i32[0] = v67[1].i32[0];
        v58.i32[1] = v59;
        v58.i64[1] = __PAIR64__(v61, v60);
        a6 = vmlaq_lane_f32(vmlaq_f32(a6, v13, v11), v14, v68, 1);
        v58 = vmlaq_lane_f32(vmlaq_n_f32(v58, *v66, v68.f32[0]), *v67, v68, 1);
        v61 = v58.i32[3];
        v60 = v58.i32[2];
        v59 = v58.i32[1];
        v69 = v63 + 4;
        v63 += 2;
      }
      while (v69 <= v16);
    }
    else
    {
      v58.i32[0] = 0;
      v59 = 0;
      v60 = 0;
      v61 = 0;
      v62 = v17;
      a6.i32[0] = 0;
    }
    if ((v16 & 1) != 0)
    {
      v70 = (float32x4_t *)(*(_QWORD *)(a11 + 8 * ((int)v16 - 1)) + 4 * (5 * v18));
      v11.i32[0] = v70[1].i32[0];
      v12.f32[0] = *v62;
      v58.i32[1] = v59;
      v58.i64[1] = __PAIR64__(v61, v60);
      a6 = vaddq_f32(vmlaq_f32(a6, v12, v11), (float32x4_t)0);
      v58 = vaddq_f32(vmlaq_n_f32(v58, *v70, *v62), (float32x4_t)0);
      v61 = v58.i32[3];
      v60 = v58.i32[2];
      v59 = v58.i32[1];
    }
    v58.i32[1] = v59;
    v58.i64[1] = __PAIR64__(v61, v60);
    v71 = vmaxvq_f32(vmaxnmq_f32(v58, a6));
    v72 = fmaxf(v71, 0.0);
    if (v71 <= 1.0)
      v73 = v72;
    else
      v73 = 1.0;
    v58.f32[0] = v73;
    *v15 = v58;
    v15[1].i32[0] = a6.i32[0];
    v15 = (float32x4_t *)((char *)v15 + 20);
  }
  return result;
}

uint64_t resample_vertical<float,float,2,(AlphaStyle)2>(uint64_t result, uint64_t a2, uint64_t a3, int a4, float32x4_t **a5, uint64_t a6)
{
  float32x4_t *v6;
  uint64_t v7;
  float *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  int32x4_t v12;
  int32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float *v16;
  _QWORD *v17;
  float32x4_t *v18;
  float32x4_t *v19;
  float32x2_t v20;
  uint64_t v21;
  float32x4_t *v22;
  int32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x2_t v26;
  float *v27;
  uint64_t v28;
  uint64_t *v29;
  float32x2_t v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;

  v6 = *a5;
  v7 = *(int *)(result + 4);
  v8 = (float *)(result + 8);
  if (a4 >= 4)
  {
    v10 = 0;
    v11 = 4;
    v12.i64[0] = 0x80000000800000;
    v12.i64[1] = 0x80000000800000;
    v13 = vdupq_lane_s32((int32x2_t)0x80000000800000, 0);
    do
    {
      v14 = 0uLL;
      v15 = 0uLL;
      v16 = v8;
      if ((int)v7 >= 2)
      {
        result = 0;
        v16 = v8;
        do
        {
          v17 = (_QWORD *)(a6 + 8 * result);
          v18 = (float32x4_t *)(*v17 + 8 * v10);
          v19 = (float32x4_t *)(v17[1] + 8 * v10);
          v20 = *(float32x2_t *)v16;
          v16 += 2;
          v15 = vmlaq_lane_f32(vmlaq_n_f32(v15, v18[1], v20.f32[0]), v19[1], v20, 1);
          v14 = vmlaq_lane_f32(vmlaq_n_f32(v14, *v18, v20.f32[0]), *v19, v20, 1);
          v21 = result + 4;
          result += 2;
        }
        while (v21 <= v7);
      }
      if ((v7 & 1) != 0)
      {
        v22 = (float32x4_t *)(*(_QWORD *)(a6 + 8 * ((int)v7 - 1)) + 8 * v10);
        v15 = vaddq_f32(vmlaq_n_f32(v15, v22[1], *v16), (float32x4_t)0);
        v14 = vaddq_f32(vmlaq_n_f32(v14, *v22, *v16), (float32x4_t)0);
      }
      v10 += 4;
      v23 = (int32x4_t)vmaxnmq_f32(vmaxnmq_f32((float32x4_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v15), (float32x4_t)vuzp2q_s32((int32x4_t)v14, (int32x4_t)v15)), (float32x4_t)0);
      v24 = (float32x4_t)vzip2q_s32(v13, v23);
      v25 = (float32x4_t)vzip1q_s32(v12, v23);
      v25.i32[2] = -8388609;
      *v6 = vminnmq_f32(vmaxnmq_f32(v14, v25), (float32x4_t)xmmword_185004900);
      v6[1] = vminnmq_f32(vmaxnmq_f32(v15, v24), (float32x4_t)xmmword_185004900);
      v6 += 2;
      v11 += 4;
    }
    while (v11 <= a4);
    v9 = a4 & 0x7FFFFFFC;
  }
  else
  {
    v9 = 0;
  }
  for (; v9 < a4; ++v9)
  {
    v26 = 0;
    v27 = v8;
    if ((int)v7 >= 2)
    {
      v28 = 0;
      v26 = 0;
      v27 = v8;
      do
      {
        v29 = (uint64_t *)(a6 + 8 * v28);
        result = *v29;
        v30 = *(float32x2_t *)v27;
        v27 += 2;
        v26 = vmla_lane_f32(vmla_n_f32(v26, *(float32x2_t *)(*v29 + 4 * (2 * v9)), v30.f32[0]), *(float32x2_t *)(v29[1] + 4 * (2 * v9)), v30, 1);
        v31 = v28 + 4;
        v28 += 2;
      }
      while (v31 <= v7);
    }
    if ((v7 & 1) != 0)
      v26 = vadd_f32(vmla_n_f32(v26, *(float32x2_t *)(*(_QWORD *)(a6 + 8 * ((int)v7 - 1)) + 4 * (2 * v9)), *v27), 0);
    v32 = vpmax_f32(v26);
    v33 = fmaxf(v32, 0.0);
    if (v32 <= 1.0)
      v34 = v33;
    else
      v34 = 1.0;
    v26.f32[1] = v34;
    *(float32x2_t *)v6->f32 = v26;
    v6 = (float32x4_t *)((char *)v6 + 8);
  }
  return result;
}

uint64_t resample_vertical<float,float,4,(AlphaStyle)2>(uint64_t result, uint64_t a2, uint64_t a3, int a4, float32x4_t **a5, uint64_t a6)
{
  float32x4_t *v6;
  uint64_t v7;
  float *v8;
  signed int v9;
  int v10;
  unint64_t v11;
  int8x16_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  float32x4_t *v19;
  float32x4_t *v20;
  float32x2_t v21;
  float32x4_t *v22;
  int8x16_t v23;
  int32x2_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float *v27;
  uint64_t v28;
  uint64_t *v29;
  float32x2_t v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;

  v6 = *a5;
  v7 = *(int *)(result + 4);
  v8 = (float *)(result + 8);
  if (a4 >= 2)
  {
    v10 = 0;
    v11 = 2;
    v12 = (int8x16_t)vdupq_lane_s32((int32x2_t)0x80000000800000, 0);
    do
    {
      v13 = 0uLL;
      v14 = 0uLL;
      v15 = v8;
      if ((int)v7 >= 2)
      {
        v16 = 0;
        v17 = (4 * v10) & 0xFFFFFFF8;
        v15 = v8;
        do
        {
          v18 = (_QWORD *)(a6 + 8 * v16);
          v19 = (float32x4_t *)(*v18 + 4 * v17);
          v20 = (float32x4_t *)(v18[1] + 4 * v17);
          v21 = *(float32x2_t *)v15;
          v15 += 2;
          v14 = vmlaq_lane_f32(vmlaq_n_f32(v14, v19[1], v21.f32[0]), v20[1], v21, 1);
          v13 = vmlaq_lane_f32(vmlaq_n_f32(v13, *v19, v21.f32[0]), *v20, v21, 1);
          result = v16 + 4;
          v16 += 2;
        }
        while (result <= v7);
      }
      if ((v7 & 1) != 0)
      {
        v22 = (float32x4_t *)(*(_QWORD *)(a6 + 8 * ((int)v7 - 1)) + 4 * ((4 * v10) & 0xFFFFFFF8));
        v14 = vaddq_f32(vmlaq_n_f32(v14, v22[1], *v15), (float32x4_t)0);
        v13 = vaddq_f32(vmlaq_n_f32(v13, *v22, *v15), (float32x4_t)0);
      }
      v10 += 2;
      v23 = (int8x16_t)vmaxnmq_f32((float32x4_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v14), (float32x4_t)vuzp2q_s32((int32x4_t)v13, (int32x4_t)v14));
      v24 = (int32x2_t)vextq_s8(v23, v23, 8uLL).u64[0];
      *(float32x2_t *)v23.i8 = vmaxnm_f32(vmaxnm_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v23.i8, v24), (float32x2_t)vzip2_s32(*(int32x2_t *)v23.i8, v24)), 0);
      v25 = (float32x4_t)v12;
      v25.i32[3] = v23.i32[1];
      *v6 = vminnmq_f32(vmaxnmq_f32(v13, (float32x4_t)vextq_s8(v12, v23, 4uLL)), (float32x4_t)xmmword_1850048F0);
      v6[1] = vminnmq_f32(vmaxnmq_f32(v14, v25), (float32x4_t)xmmword_1850048F0);
      v6 += 2;
      v11 += 2;
    }
    while (v11 <= a4);
    v9 = a4 & 0xFFFFFFFE;
  }
  else
  {
    v9 = 0;
  }
  for (; v9 < a4; ++v9)
  {
    v26 = 0uLL;
    v27 = v8;
    if ((int)v7 >= 2)
    {
      v28 = 0;
      v27 = v8;
      do
      {
        v29 = (uint64_t *)(a6 + 8 * v28);
        result = *v29;
        v30 = *(float32x2_t *)v27;
        v27 += 2;
        v26 = vmlaq_lane_f32(vmlaq_n_f32(v26, *(float32x4_t *)(*v29 + 4 * (4 * v9)), v30.f32[0]), *(float32x4_t *)(v29[1] + 4 * (4 * v9)), v30, 1);
        v31 = v28 + 4;
        v28 += 2;
      }
      while (v31 <= v7);
    }
    if ((v7 & 1) != 0)
      v26 = vaddq_f32(vmlaq_n_f32(v26, *(float32x4_t *)(*(_QWORD *)(a6 + 8 * ((int)v7 - 1)) + 4 * (4 * v9)), *v27), (float32x4_t)0);
    v32 = vmaxvq_f32(v26);
    v33 = fmaxf(v32, 0.0);
    if (v32 <= 1.0)
      v34 = v33;
    else
      v34 = 1.0;
    v26.f32[3] = v34;
    *v6++ = v26;
  }
  return result;
}

uint64_t resample_vertical<float,float,5,(AlphaStyle)2>(uint64_t result, double a2, double a3, double a4, double a5, float32x4_t a6, uint64_t a7, uint64_t a8, int a9, float32x4_t **a10, uint64_t a11)
{
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t *v15;
  uint64_t v16;
  float *v17;
  int v18;
  int v19;
  unint64_t i;
  float32x4_t v21;
  __int32 v22;
  __int32 v23;
  __int32 v24;
  float32x4_t v25;
  __int32 v26;
  __int32 v27;
  __int32 v28;
  float32x4_t v29;
  __int32 v30;
  __int32 v31;
  __int32 v32;
  __int32 v33;
  __int32 v34;
  __int32 v35;
  __int32 v36;
  __int32 v37;
  float *v38;
  __int32 v39;
  uint64_t v40;
  _QWORD *v41;
  float32x4_t *v42;
  float32x4_t *v43;
  float32x2_t v44;
  uint64_t v45;
  float32x4_t *v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  __int32 v59;
  __int32 v60;
  __int32 v61;
  float *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  float32x4_t *v66;
  float32x4_t *v67;
  float32x2_t v68;
  uint64_t v69;
  float32x4_t *v70;
  float v71;
  float v72;

  v15 = *a10;
  v16 = *(int *)(result + 4);
  v17 = (float *)(result + 8);
  if (a9 >= 4)
  {
    v19 = 0;
    for (i = 4; i <= a9; i += 4)
    {
      if ((int)v16 >= 2)
      {
        result = 0;
        v21.i32[0] = 0;
        v22 = 0;
        v23 = 0;
        v40 = (5 * v19) & 0xFFFFFFFC;
        v24 = 0;
        v38 = v17;
        v25.i32[0] = 0;
        v26 = 0;
        v27 = 0;
        v28 = 0;
        v29.i32[0] = 0;
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v11.i32[0] = 0;
        v33 = 0;
        v34 = 0;
        v35 = 0;
        v12.i32[0] = 0;
        v36 = 0;
        v37 = 0;
        v39 = 0;
        do
        {
          v41 = (_QWORD *)(a11 + 8 * result);
          v42 = (float32x4_t *)(*v41 + 4 * v40);
          v43 = (float32x4_t *)(v41[1] + 4 * v40);
          v44 = *(float32x2_t *)v38;
          v38 += 2;
          v12.i32[1] = v36;
          v12.i64[1] = __PAIR64__(v39, v37);
          v11.i32[1] = v33;
          v11.i64[1] = __PAIR64__(v35, v34);
          v29.i32[1] = v30;
          v29.i64[1] = __PAIR64__(v32, v31);
          v25.i32[1] = v26;
          v25.i64[1] = __PAIR64__(v28, v27);
          v21.i32[1] = v22;
          v21.i64[1] = __PAIR64__(v24, v23);
          v21 = vmlaq_lane_f32(vmlaq_n_f32(v21, *v42, v44.f32[0]), *v43, v44, 1);
          v24 = v21.i32[3];
          v23 = v21.i32[2];
          v22 = v21.i32[1];
          v25 = vmlaq_lane_f32(vmlaq_n_f32(v25, v42[1], v44.f32[0]), v43[1], v44, 1);
          v28 = v25.i32[3];
          v27 = v25.i32[2];
          v26 = v25.i32[1];
          v29 = vmlaq_lane_f32(vmlaq_n_f32(v29, v42[2], v44.f32[0]), v43[2], v44, 1);
          v32 = v29.i32[3];
          v31 = v29.i32[2];
          v30 = v29.i32[1];
          v11 = vmlaq_lane_f32(vmlaq_n_f32(v11, v42[3], v44.f32[0]), v43[3], v44, 1);
          v35 = v11.i32[3];
          v34 = v11.i32[2];
          v33 = v11.i32[1];
          v12 = vmlaq_lane_f32(vmlaq_n_f32(v12, v42[4], v44.f32[0]), v43[4], v44, 1);
          v39 = v12.i32[3];
          v37 = v12.i32[2];
          v36 = v12.i32[1];
          v45 = result + 4;
          result += 2;
        }
        while (v45 <= v16);
      }
      else
      {
        v21.i32[0] = 0;
        v22 = 0;
        v23 = 0;
        v24 = 0;
        v25.i32[0] = 0;
        v26 = 0;
        v27 = 0;
        v28 = 0;
        v29.i32[0] = 0;
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v11.i32[0] = 0;
        v33 = 0;
        v34 = 0;
        v35 = 0;
        v12.i32[0] = 0;
        v36 = 0;
        v37 = 0;
        v38 = v17;
        v39 = 0;
      }
      if ((v16 & 1) != 0)
      {
        result = (5 * v19) & 0xFFFFFFFC;
        v46 = (float32x4_t *)(*(_QWORD *)(a11 + 8 * ((int)v16 - 1)) + 4 * result);
        v12.i32[1] = v36;
        v12.i64[1] = __PAIR64__(v39, v37);
        v11.i32[1] = v33;
        v11.i64[1] = __PAIR64__(v35, v34);
        v29.i32[1] = v30;
        v29.i64[1] = __PAIR64__(v32, v31);
        v25.i32[1] = v26;
        v25.i64[1] = __PAIR64__(v28, v27);
        v21.i32[1] = v22;
        v21.i64[1] = __PAIR64__(v24, v23);
        v21 = vaddq_f32(vmlaq_n_f32(v21, *v46, *v38), (float32x4_t)0);
        v24 = v21.i32[3];
        v23 = v21.i32[2];
        v22 = v21.i32[1];
        v25 = vaddq_f32(vmlaq_n_f32(v25, v46[1], *v38), (float32x4_t)0);
        v28 = v25.i32[3];
        v27 = v25.i32[2];
        v26 = v25.i32[1];
        v29 = vaddq_f32(vmlaq_n_f32(v29, v46[2], *v38), (float32x4_t)0);
        v32 = v29.i32[3];
        v31 = v29.i32[2];
        v30 = v29.i32[1];
        v11 = vaddq_f32(vmlaq_n_f32(v11, v46[3], *v38), (float32x4_t)0);
        v35 = v11.i32[3];
        v34 = v11.i32[2];
        v33 = v11.i32[1];
        v12 = vaddq_f32(vmlaq_n_f32(v12, v46[4], *v38), (float32x4_t)0);
        v39 = v12.i32[3];
        v37 = v12.i32[2];
        v36 = v12.i32[1];
      }
      v47.i64[0] = __PAIR64__(v30, v25.u32[0]);
      v47.i64[1] = __PAIR64__(v39, v34);
      v48.i64[0] = __PAIR64__(v29.u32[0], v24);
      v48.i64[1] = __PAIR64__(v37, v33);
      v19 += 4;
      v49.i64[0] = __PAIR64__(v28, v23);
      v49.i64[1] = __PAIR64__(v36, v11.u32[0]);
      v50 = vmaxnmq_f32(v47, v48);
      v48.i64[0] = __PAIR64__(v27, v22);
      v51 = vmaxnmq_f32(v50, v49);
      v48.i64[1] = __PAIR64__(v12.u32[0], v32);
      v49.i64[0] = __PAIR64__(v26, v21.u32[0]);
      v49.i64[1] = __PAIR64__(v35, v31);
      v52 = vmaxnmq_f32(vmaxnmq_f32(vmaxnmq_f32(v51, v48), v49), (float32x4_t)0);
      v53.i64[0] = 0x80000000800000;
      v53.i64[1] = 0x80000000800000;
      v54 = (float32x4_t)vdupq_lane_s32((int32x2_t)0x80000000800000, 0);
      v55 = v54;
      v55.i32[3] = v52.i32[3];
      v56 = v54;
      v56.i32[2] = v52.i32[2];
      v57 = v54;
      v57.i32[1] = v52.i32[1];
      v54.i32[0] = v52.i32[0];
      v21.i32[1] = v22;
      v21.i64[1] = __PAIR64__(v24, v23);
      v25.i32[1] = v26;
      v25.i64[1] = __PAIR64__(v28, v27);
      v29.i32[1] = v30;
      v29.i64[1] = __PAIR64__(v32, v31);
      v11.i32[1] = v33;
      v11.i64[1] = __PAIR64__(v35, v34);
      v12.i32[1] = v36;
      v12.i64[1] = __PAIR64__(v39, v37);
      a6 = vminnmq_f32(vmaxnmq_f32(v11, v56), (float32x4_t)xmmword_1850048E0);
      v15[2] = vminnmq_f32(vmaxnmq_f32(v29, v57), (float32x4_t)xmmword_1850048D0);
      v15[3] = a6;
      *v15 = vminnmq_f32(vmaxnmq_f32(v21, v53), (float32x4_t)vdupq_n_s32(0x7F7FFFFFu));
      v15[1] = vminnmq_f32(vmaxnmq_f32(v25, v54), (float32x4_t)xmmword_1850048C0);
      v15[4] = vminnmq_f32(vmaxnmq_f32(v12, v55), (float32x4_t)xmmword_1850048F0);
      v15 += 5;
    }
    v18 = a9 & 0x7FFFFFFC;
  }
  else
  {
    v18 = 0;
  }
  for (; v18 < a9; ++v18)
  {
    if ((int)v16 >= 2)
    {
      v63 = 0;
      v64 = (5 * v18);
      v58.i32[0] = 0;
      v62 = v17;
      v59 = 0;
      v60 = 0;
      v61 = 0;
      a6.i32[0] = 0;
      do
      {
        v65 = (_QWORD *)(a11 + 8 * v63);
        v66 = (float32x4_t *)(*v65 + 4 * v64);
        v11.i32[0] = v66[1].i32[0];
        v67 = (float32x4_t *)(v65[1] + 4 * v64);
        v12 = *v67;
        v68 = *(float32x2_t *)v62;
        v62 += 2;
        *(float32x2_t *)v13.f32 = v68;
        v14.i32[0] = v67[1].i32[0];
        v58.i32[1] = v59;
        v58.i64[1] = __PAIR64__(v61, v60);
        a6 = vmlaq_lane_f32(vmlaq_f32(a6, v13, v11), v14, v68, 1);
        v58 = vmlaq_lane_f32(vmlaq_n_f32(v58, *v66, v68.f32[0]), *v67, v68, 1);
        v61 = v58.i32[3];
        v60 = v58.i32[2];
        v59 = v58.i32[1];
        v69 = v63 + 4;
        v63 += 2;
      }
      while (v69 <= v16);
    }
    else
    {
      v58.i32[0] = 0;
      v59 = 0;
      v60 = 0;
      v61 = 0;
      v62 = v17;
      a6.i32[0] = 0;
    }
    if ((v16 & 1) != 0)
    {
      v70 = (float32x4_t *)(*(_QWORD *)(a11 + 8 * ((int)v16 - 1)) + 4 * (5 * v18));
      v11.i32[0] = v70[1].i32[0];
      v12.f32[0] = *v62;
      v58.i32[1] = v59;
      v58.i64[1] = __PAIR64__(v61, v60);
      a6 = vaddq_f32(vmlaq_f32(a6, v12, v11), (float32x4_t)0);
      v58 = vaddq_f32(vmlaq_n_f32(v58, *v70, *v62), (float32x4_t)0);
      v61 = v58.i32[3];
      v60 = v58.i32[2];
      v59 = v58.i32[1];
    }
    v58.i32[1] = v59;
    v58.i64[1] = __PAIR64__(v61, v60);
    a6 = vmaxnmq_f32(v58, a6);
    a6.f32[0] = vmaxvq_f32(a6);
    v71 = fmaxf(a6.f32[0], 0.0);
    if (a6.f32[0] <= 1.0)
      v72 = v71;
    else
      v72 = 1.0;
    *v15 = v58;
    v15[1].f32[0] = v72;
    v15 = (float32x4_t *)((char *)v15 + 20);
  }
  return result;
}

uint64_t resample_vertical<float,float,1,(AlphaStyle)3>(uint64_t result, uint64_t a2, uint64_t a3, int a4, float32x4_t **a5, uint64_t a6)
{
  float32x4_t *v6;
  float32x4_t *v7;
  uint64_t v8;
  float *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  float32x4_t v18;
  float32x4_t v19;
  float *v20;
  _QWORD *v21;
  float32x4_t *v22;
  float32x4_t *v23;
  float32x2_t v24;
  uint64_t v25;
  float32x4_t *v26;
  float32x4_t v27;
  float32x2_t v29;
  float *v30;
  uint64_t v31;
  uint64_t v32;
  float32x2_t v33;
  uint64_t v34;

  v6 = *a5;
  v7 = a5[1];
  v8 = *(int *)(result + 4);
  v9 = (float *)(result + 8);
  if (a4 >= 4)
  {
    v11 = 0;
    v12 = 4;
    __asm { FMOV            V1.4S, #1.0 }
    do
    {
      v18 = 0uLL;
      v19 = 0uLL;
      v20 = v9;
      if ((int)v8 >= 2)
      {
        result = 0;
        v20 = v9;
        do
        {
          v21 = (_QWORD *)(a6 + 8 * result);
          v22 = (float32x4_t *)(*v21 + 8 * v11);
          v23 = (float32x4_t *)(v21[1] + 8 * v11);
          v24 = *(float32x2_t *)v20;
          v20 += 2;
          v19 = vmlaq_lane_f32(vmlaq_n_f32(v19, v22[1], v24.f32[0]), v23[1], v24, 1);
          v18 = vmlaq_lane_f32(vmlaq_n_f32(v18, *v22, v24.f32[0]), *v23, v24, 1);
          v25 = result + 4;
          result += 2;
        }
        while (v25 <= v8);
      }
      if ((v8 & 1) != 0)
      {
        v26 = (float32x4_t *)(*(_QWORD *)(a6 + 8 * ((int)v8 - 1)) + 8 * v11);
        v19 = vaddq_f32(vmlaq_n_f32(v19, v26[1], *v20), (float32x4_t)0);
        v18 = vaddq_f32(vmlaq_n_f32(v18, *v26, *v20), (float32x4_t)0);
      }
      v11 += 4;
      v27 = (float32x4_t)vuzp1q_s32((int32x4_t)v18, (int32x4_t)v19);
      *v6++ = v27;
      *v7++ = vmaxnmq_f32(vminnmq_f32(vmaxnmq_f32((float32x4_t)vuzp2q_s32((int32x4_t)v18, (int32x4_t)v19), (float32x4_t)0), _Q1), v27);
      v12 += 4;
    }
    while (v12 <= a4);
    v10 = a4 & 0x7FFFFFFC;
  }
  else
  {
    v10 = 0;
  }
  if (v10 < a4)
  {
    __asm { FMOV            V1.2S, #1.0 }
    do
    {
      v29 = 0;
      v30 = v9;
      if ((int)v8 >= 2)
      {
        v31 = 0;
        v32 = (2 * v10);
        v29 = 0;
        v30 = v9;
        do
        {
          result = 4 * v32;
          v33 = *(float32x2_t *)v30;
          v30 += 2;
          v29 = vmla_lane_f32(vmla_n_f32(v29, *(float32x2_t *)(*(_QWORD *)(a6 + 8 * v31) + 4 * v32), v33.f32[0]), *(float32x2_t *)(*(_QWORD *)(a6 + 8 * v31 + 8) + 4 * v32), v33, 1);
          v34 = v31 + 4;
          v31 += 2;
        }
        while (v34 <= v8);
      }
      if ((v8 & 1) != 0)
        v29 = vadd_f32(vmla_n_f32(v29, *(float32x2_t *)(*(_QWORD *)(a6 + 8 * ((int)v8 - 1)) + 4 * (2 * v10)), *v30), 0);
      v6->i32[0] = v29.i32[0];
      v6 = (float32x4_t *)((char *)v6 + 4);
      v7->i32[0] = vmaxnm_f32(vminnm_f32(vmaxnm_f32((float32x2_t)vdup_lane_s32((int32x2_t)v29, 1), 0), _D1), v29).u32[0];
      v7 = (float32x4_t *)((char *)v7 + 4);
      ++v10;
    }
    while (v10 < a4);
  }
  return result;
}

uint64_t resample_vertical<float,float,3,(AlphaStyle)3>(uint64_t result, uint64_t a2, uint64_t a3, int a4, float32x4_t **a5, uint64_t a6)
{
  float32x4_t *v6;
  float32x2_t *v7;
  uint64_t v8;
  float *v9;
  signed int v15;
  int v16;
  unint64_t i;
  float32x4_t v18;
  float32x4_t v19;
  float *v20;
  uint64_t v21;
  _QWORD *v22;
  float32x4_t *v23;
  float32x4_t *v24;
  float32x2_t v25;
  uint64_t v26;
  float32x4_t *v27;
  int8x16_t v28;
  float32x2_t v29;
  float32x4_t v30;
  float *v31;
  uint64_t v32;
  uint64_t v33;
  float32x2_t v34;
  uint64_t v35;
  float32x2_t v36;

  v6 = *a5;
  v7 = (float32x2_t *)a5[1];
  v8 = *(int *)(result + 4);
  v9 = (float *)(result + 8);
  __asm { FMOV            V0.2S, #1.0 }
  if (a4 >= 2)
  {
    v16 = 0;
    for (i = 2; i <= a4; i += 2)
    {
      v18 = 0uLL;
      v19 = 0uLL;
      v20 = v9;
      if ((int)v8 >= 2)
      {
        result = 0;
        v21 = (4 * v16) & 0xFFFFFFF8;
        v20 = v9;
        do
        {
          v22 = (_QWORD *)(a6 + 8 * result);
          v23 = (float32x4_t *)(*v22 + 4 * v21);
          v24 = (float32x4_t *)(v22[1] + 4 * v21);
          v25 = *(float32x2_t *)v20;
          v20 += 2;
          v19 = vmlaq_lane_f32(vmlaq_n_f32(v19, v23[1], v25.f32[0]), v24[1], v25, 1);
          v18 = vmlaq_lane_f32(vmlaq_n_f32(v18, *v23, v25.f32[0]), *v24, v25, 1);
          v26 = result + 4;
          result += 2;
        }
        while (v26 <= v8);
      }
      if ((v8 & 1) != 0)
      {
        result = (4 * v16) & 0xFFFFFFF8;
        v27 = (float32x4_t *)(*(_QWORD *)(a6 + 8 * ((int)v8 - 1)) + 4 * result);
        v19 = vaddq_f32(vmlaq_n_f32(v19, v27[1], *v20), (float32x4_t)0);
        v18 = vaddq_f32(vmlaq_n_f32(v18, *v27, *v20), (float32x4_t)0);
      }
      v16 += 2;
      v28 = (int8x16_t)vpmaxq_f32(v18, v19);
      v29 = vmaxnm_f32(vminnm_f32(vmaxnm_f32((float32x2_t)*(_OWORD *)&vuzp2q_s32(vuzp2q_s32((int32x4_t)v18, (int32x4_t)v19), (int32x4_t)v18), 0), _D0), vpmax_f32(*(float32x2_t *)v28.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL)));
      v18.i32[3] = v19.i32[0];
      *v6 = v18;
      v6[1].i64[0] = vextq_s8((int8x16_t)v19, (int8x16_t)v19, 4uLL).u64[0];
      v6 = (float32x4_t *)((char *)v6 + 24);
      *v7++ = v29;
    }
    v15 = a4 & 0xFFFFFFFE;
  }
  else
  {
    v15 = 0;
  }
  for (; v15 < a4; ++v15)
  {
    v30 = 0uLL;
    v31 = v9;
    if ((int)v8 >= 2)
    {
      v32 = 0;
      v33 = (4 * v15);
      v31 = v9;
      do
      {
        result = 4 * v33;
        v34 = *(float32x2_t *)v31;
        v31 += 2;
        v30 = vmlaq_lane_f32(vmlaq_n_f32(v30, *(float32x4_t *)(*(_QWORD *)(a6 + 8 * v32) + 4 * v33), v34.f32[0]), *(float32x4_t *)(*(_QWORD *)(a6 + 8 * v32 + 8) + 4 * v33), v34, 1);
        v35 = v32 + 4;
        v32 += 2;
      }
      while (v35 <= v8);
    }
    if ((v8 & 1) != 0)
      v30 = vaddq_f32(vmlaq_n_f32(v30, *(float32x4_t *)(*(_QWORD *)(a6 + 8 * ((int)v8 - 1)) + 4 * (4 * v15)), *v31), (float32x4_t)0);
    v36 = (float32x2_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL).u64[0];
    v6->i64[0] = v30.i64[0];
    v6->i32[2] = v36.i32[0];
    v6 = (float32x4_t *)((char *)v6 + 12);
    v7->i32[0] = vmaxnm_f32(vminnm_f32(vmaxnm_f32((float32x2_t)vdup_laneq_s32((int32x4_t)v30, 3), 0), _D0), vpmax_f32(vpmax_f32(*(float32x2_t *)v30.f32, v36), _D0)).u32[0];
    v7 = (float32x2_t *)((char *)v7 + 4);
  }
  return result;
}

uint64_t resample_vertical<float,float,4,(AlphaStyle)3>(uint64_t result, double a2, double a3, double a4, double a5, float32x4_t _Q4, uint64_t a7, uint64_t a8, int a9, float32x4_t **a10, uint64_t a11)
{
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t *v15;
  float32x4_t *v16;
  uint64_t v17;
  float *v18;
  int v19;
  int v20;
  unint64_t i;
  float32x4_t v22;
  __int32 v23;
  __int32 v24;
  __int32 v25;
  float32x4_t v26;
  float32x4_t v27;
  __int32 v28;
  __int32 v29;
  float32x4_t v30;
  __int32 v31;
  __int32 v32;
  float32x4_t v33;
  __int32 v34;
  __int32 v35;
  float32x4_t v36;
  float32x4_t v37;
  __int32 v38;
  __int32 v39;
  float *v40;
  __int32 v41;
  uint64_t v42;
  _QWORD *v43;
  float32x4_t *v44;
  float32x4_t *v45;
  float32x2_t v46;
  char *v47;
  float32x4_t *v48;
  float32x4_t v54;
  __int32 v55;
  float32x2_t v56;
  __int32 v57;
  float *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  float32x4_t *v62;
  float32x2_t v63;
  uint64_t v64;
  float32x4_t *v65;
  float32x4_t v66;

  v15 = *a10;
  v16 = a10[1];
  v17 = *(int *)(result + 4);
  v18 = (float *)(result + 8);
  if (a9 >= 4)
  {
    v20 = 0;
    for (i = 4; i <= a9; i += 4)
    {
      if ((int)v17 >= 2)
      {
        result = 0;
        v22.i32[0] = 0;
        v23 = 0;
        v24 = 0;
        v42 = (5 * v20) & 0xFFFFFFFC;
        v25 = 0;
        v40 = v18;
        v26.i32[0] = 0;
        v27.i32[0] = 0;
        v28 = 0;
        v29 = 0;
        v30.i32[0] = 0;
        v31 = 0;
        v14.i32[0] = 0;
        v32 = 0;
        v33.i32[0] = 0;
        v34 = 0;
        v35 = 0;
        v36.i32[0] = 0;
        v37.i32[0] = 0;
        v38 = 0;
        v39 = 0;
        v41 = 0;
        do
        {
          v43 = (_QWORD *)(a11 + 8 * result);
          v44 = (float32x4_t *)(*v43 + 4 * v42);
          v45 = (float32x4_t *)(v43[1] + 4 * v42);
          v46 = *(float32x2_t *)v40;
          v40 += 2;
          v37.i32[1] = v38;
          v37.i64[1] = __PAIR64__(v41, v39);
          v33.i32[1] = v34;
          v33.i64[1] = __PAIR64__(v36.u32[0], v35);
          v30.i32[1] = v31;
          v30.i64[1] = __PAIR64__(v32, v14.u32[0]);
          v26.i32[1] = v27.i32[0];
          v26.i64[1] = __PAIR64__(v29, v28);
          v22.i32[1] = v23;
          v22.i64[1] = __PAIR64__(v25, v24);
          v22 = vmlaq_lane_f32(vmlaq_n_f32(v22, *v44, v46.f32[0]), *v45, v46, 1);
          v25 = v22.i32[3];
          v24 = v22.i32[2];
          v23 = v22.i32[1];
          v26 = vmlaq_lane_f32(vmlaq_n_f32(v26, v44[1], v46.f32[0]), v45[1], v46, 1);
          v29 = v26.i32[3];
          v28 = v26.i32[2];
          v27.i32[0] = v26.i32[1];
          v30 = vmlaq_lane_f32(vmlaq_n_f32(v30, v44[2], v46.f32[0]), v45[2], v46, 1);
          v32 = v30.i32[3];
          v14.i32[0] = v30.i32[2];
          v31 = v30.i32[1];
          v33 = vmlaq_lane_f32(vmlaq_n_f32(v33, v44[3], v46.f32[0]), v45[3], v46, 1);
          v36.i32[0] = v33.i32[3];
          v35 = v33.i32[2];
          v34 = v33.i32[1];
          v37 = vmlaq_lane_f32(vmlaq_n_f32(v37, v44[4], v46.f32[0]), v45[4], v46, 1);
          v41 = v37.i32[3];
          v39 = v37.i32[2];
          v38 = v37.i32[1];
          v47 = (char *)(result + 4);
          result += 2;
        }
        while ((uint64_t)v47 <= v17);
      }
      else
      {
        v22.i32[0] = 0;
        v23 = 0;
        v24 = 0;
        v25 = 0;
        v26.i32[0] = 0;
        v27.i32[0] = 0;
        v28 = 0;
        v29 = 0;
        v30.i32[0] = 0;
        v31 = 0;
        v14.i32[0] = 0;
        v32 = 0;
        v33.i32[0] = 0;
        v34 = 0;
        v35 = 0;
        v36.i32[0] = 0;
        v37.i32[0] = 0;
        v38 = 0;
        v39 = 0;
        v40 = v18;
        v41 = 0;
      }
      if ((v17 & 1) != 0)
      {
        result = (5 * v20) & 0xFFFFFFFC;
        v48 = (float32x4_t *)(*(_QWORD *)(a11 + 8 * ((int)v17 - 1)) + 4 * result);
        v37.i32[1] = v38;
        v37.i64[1] = __PAIR64__(v41, v39);
        v33.i32[1] = v34;
        v33.i64[1] = __PAIR64__(v36.u32[0], v35);
        v30.i32[1] = v31;
        v30.i64[1] = __PAIR64__(v32, v14.u32[0]);
        v26.i32[1] = v27.i32[0];
        v26.i64[1] = __PAIR64__(v29, v28);
        v22.i32[1] = v23;
        v22.i64[1] = __PAIR64__(v25, v24);
        v22 = vaddq_f32(vmlaq_n_f32(v22, *v48, *v40), (float32x4_t)0);
        v25 = v22.i32[3];
        v24 = v22.i32[2];
        v23 = v22.i32[1];
        v26 = vaddq_f32(vmlaq_n_f32(v26, v48[1], *v40), (float32x4_t)0);
        v29 = v26.i32[3];
        v28 = v26.i32[2];
        v27.i32[0] = v26.i32[1];
        v30 = vaddq_f32(vmlaq_n_f32(v30, v48[2], *v40), (float32x4_t)0);
        v32 = v30.i32[3];
        v14.i32[0] = v30.i32[2];
        v31 = v30.i32[1];
        v33 = vaddq_f32(vmlaq_n_f32(v33, v48[3], *v40), (float32x4_t)0);
        v36.i32[0] = v33.i32[3];
        v35 = v33.i32[2];
        v34 = v33.i32[1];
        v37 = vaddq_f32(vmlaq_n_f32(v37, v48[4], *v40), (float32x4_t)0);
        v41 = v37.i32[3];
        v39 = v37.i32[2];
        v38 = v37.i32[1];
      }
      v20 += 4;
      v26.i32[1] = v31;
      v26.i64[1] = __PAIR64__(v41, v35);
      v22.i32[1] = v23;
      v22.i64[1] = __PAIR64__(v25, v24);
      v27.i32[1] = v28;
      v27.i64[1] = __PAIR64__(v30.u32[0], v29);
      v14.i32[1] = v32;
      v14.i64[1] = __PAIR64__(v34, v33.u32[0]);
      v36.i32[1] = v37.i32[0];
      v36.i64[1] = __PAIR64__(v39, v38);
      __asm { FMOV            V4.4S, #1.0 }
      *v15 = v22;
      v15[1] = v27;
      v15[2] = v14;
      v15[3] = v36;
      v15 += 4;
      *v16++ = vmaxnmq_f32(vminnmq_f32(vmaxnmq_f32(v26, (float32x4_t)0), _Q4), vpmaxq_f32(vpmaxq_f32(v22, v27), vpmaxq_f32(v14, v36)));
    }
    v19 = a9 & 0x7FFFFFFC;
  }
  else
  {
    v19 = 0;
  }
  if (v19 < a9)
  {
    __asm { FMOV            V1.2S, #1.0 }
    do
    {
      if ((int)v17 >= 2)
      {
        v59 = 0;
        v60 = (5 * v19);
        v54.i32[0] = 0;
        v58 = v18;
        v55 = 0;
        v56.i32[0] = 0;
        v57 = 0;
        _Q4.i32[0] = 0;
        do
        {
          v61 = (_QWORD *)(a11 + 8 * v59);
          result = *v61 + 4 * v60;
          v11.i32[0] = *(_DWORD *)(result + 16);
          v62 = (float32x4_t *)(v61[1] + 4 * v60);
          v12 = *v62;
          v63 = *(float32x2_t *)v58;
          v58 += 2;
          *(float32x2_t *)v13.f32 = v63;
          v14.i32[0] = v62[1].i32[0];
          v54.i32[1] = v55;
          v54.i64[1] = __PAIR64__(v57, v56.u32[0]);
          _Q4 = vmlaq_lane_f32(vmlaq_f32(_Q4, v13, v11), v14, v63, 1);
          v54 = vmlaq_lane_f32(vmlaq_n_f32(v54, *(float32x4_t *)result, v63.f32[0]), *v62, v63, 1);
          v57 = v54.i32[3];
          v56.i32[0] = v54.i32[2];
          v55 = v54.i32[1];
          v64 = v59 + 4;
          v59 += 2;
        }
        while (v64 <= v17);
      }
      else
      {
        v54.i32[0] = 0;
        v55 = 0;
        v56.i32[0] = 0;
        v57 = 0;
        v58 = v18;
        _Q4.i32[0] = 0;
      }
      if ((v17 & 1) != 0)
      {
        v65 = (float32x4_t *)(*(_QWORD *)(a11 + 8 * ((int)v17 - 1)) + 4 * (5 * v19));
        v11.i32[0] = v65[1].i32[0];
        v12.f32[0] = *v58;
        v54.i32[1] = v55;
        v54.i64[1] = __PAIR64__(v57, v56.u32[0]);
        _Q4 = vaddq_f32(vmlaq_f32(_Q4, v12, v11), (float32x4_t)0);
        v54 = vaddq_f32(vmlaq_n_f32(v54, *v65, *v58), (float32x4_t)0);
        v57 = v54.i32[3];
        v56.i32[0] = v54.i32[2];
        v55 = v54.i32[1];
      }
      v66.i64[0] = __PAIR64__(v55, v54.u32[0]);
      v66.i64[1] = __PAIR64__(v57, v56.u32[0]);
      v54.i32[1] = v55;
      v56.i32[1] = v57;
      *(float32x2_t *)_Q4.f32 = vminnm_f32(vmaxnm_f32(*(float32x2_t *)_Q4.f32, 0), _D1);
      *v15++ = v66;
      v16->i32[0] = vmaxnm_f32(*(float32x2_t *)_Q4.f32, vpmax_f32(vpmax_f32(*(float32x2_t *)v54.f32, v56), 0)).u32[0];
      v16 = (float32x4_t *)((char *)v16 + 4);
      ++v19;
    }
    while (v19 < a9);
  }
  return result;
}

int *resample_horizontal<unsigned char,int,5,false>(int *result, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  int8x16_t v8;
  int32x4_t v9;
  int16x8_t v10;
  int16x8_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  unsigned int v19;
  _BOOL4 v20;
  uint64_t v21;
  unint64_t v22;
  int16x8_t v23;
  unsigned int v24;
  int8x16_t v25;
  uint64_t v26;
  BOOL v27;
  int v28;
  int8x16_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t *v32;
  unint64_t v33;
  int *v34;
  uint8x16_t *v35;
  uint8x16_t *v36;
  int8x16_t *v37;
  int v38;
  unint64_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int8x16_t v48;
  uint8x16_t v49;
  uint8x16_t v50;
  int16x8_t v51;
  int8x16_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  uint8x16_t v56;
  int16x8_t v57;
  int8x16_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int8x16_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  uint8x16_t *v70;
  unint64_t v71;
  int8x16_t *v72;
  int32x4_t v73;
  uint64_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  unint64_t v82;
  uint8x16_t v83;
  uint8x16_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x4_t v89;
  int16x4_t v90;
  __int32 v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  int v95;
  unint64_t v96;
  int v97;
  uint64_t v98;
  unint64_t v99;
  unsigned int v100;
  uint8x16_t v101;
  uint8x16_t v102;
  int16x8_t v103;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  unint64_t v107;
  int8x8_t v108;
  __int8 *v109;
  __int8 *v110;
  int16x4_t v111;
  int16x4_t v112;
  int16x4_t v113;
  int8x8_t v114;
  __int8 v115;
  __int8 v116;
  unsigned __int8 v117;
  int8x8_t v118;
  int16x4_t v119;
  int16x4_t v120;
  int8x8_t v121;
  int8x8_t v122;
  __int32 v123;
  int16x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  int8x16_t v128;
  unsigned int v129;
  __int32 v130;
  uint64_t v131;
  unint64_t v132;

  if ((int)a4 >= 1 && a8 >= 1)
  {
    v12 = 0;
    v13 = *a6;
    v132 = *a7;
    v14 = v132 / 5;
    v15 = 2 * a2;
    v16 = v15 + 8;
    v17 = (char *)result + (v15 + 8) * a4;
    if (v132 / 5 >= *(int *)&v17[-v15 - 4] + (uint64_t)*(int *)&v17[-v15 - 8])
      v14 = *(int *)&v17[-v15 - 4] + (uint64_t)*(int *)&v17[-v15 - 8];
    if (a2 <= 3)
      v18 = (2 * a2 + 23) / (2 * a2 + 8);
    else
      v18 = 1;
    v19 = a2 % 6;
    v20 = a2 > 5;
    if (a2 % 6)
      v20 = 0;
    else
      v19 = 6;
    v21 = ((5 * v19 + 31) & 0x1FFFFFFE0) + 30 * (a2 / 6 - v20);
    v22 = a4 - v18;
    v23 = vdupq_n_s16(v19);
    if (a2 >= 6)
      v24 = 6;
    else
      v24 = a2;
    v25 = (int8x16_t)vcgtq_u16((uint16x8_t)vdupq_n_s16(v24), (uint16x8_t)xmmword_185004910);
    v26 = a8;
    v27 = a2 == (__int16)a2 && a4 > v18;
    v28 = v27;
    if (v22 <= 1)
      v22 = 1;
    v29 = (int8x16_t)vcgtq_s16(v23, (int16x8_t)xmmword_185004910);
    v30.i64[0] = 0x200000002000;
    v30.i64[1] = 0x200000002000;
    v31.i64[0] = 0xFF000000FFLL;
    v31.i64[1] = 0xFF000000FFLL;
    do
    {
      v32 = *(int32x4_t **)(a5 + 8 * v12);
      v33 = 0;
      if (v28)
      {
        v34 = result;
        while (1)
        {
          v35 = (uint8x16_t *)(v13 + 5 * *v34);
          v36 = (uint8x16_t *)((char *)v35 + v21);
          if ((unint64_t)v35->u64 + v21 > 5 * v14 + v13)
            break;
          if (v35 >= v36)
          {
            v40 = 0uLL;
            v41 = 0uLL;
            v42 = 0uLL;
            v43 = 0uLL;
            v44 = 0uLL;
            v45 = 0uLL;
            v46 = 0uLL;
            v47 = 0uLL;
          }
          else
          {
            v37 = (int8x16_t *)(v34 + 2);
            v38 = v34[1];
            v39 = (unint64_t)&v36[-2];
            v40 = 0uLL;
            v41 = 0uLL;
            v42 = 0uLL;
            v43 = 0uLL;
            v44 = 0uLL;
            v45 = 0uLL;
            v46 = 0uLL;
            v47 = 0uLL;
            while ((unint64_t)v35 < v39)
            {
              v48 = *v37;
              v37 = (int8x16_t *)((char *)v37 + 12);
              v8 = vandq_s8(v48, v25);
              v49 = *v35;
              v50 = v35[1];
              v35 = (uint8x16_t *)((char *)v35 + 30);
              v11 = (int16x8_t)vmovl_high_u8(v50);
              v10 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v50.i8);
              v51 = (int16x8_t)vmovl_high_u8(v49);
              v52 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v49.i8);
              v53 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_185004940);
              v54 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_185004950);
              v55 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_185004960);
              v41 = vmlal_s16(v41, (int16x4_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL), vzip1_s16(*(int16x4_t *)v8.i8, vdup_lane_s16(*(int16x4_t *)v8.i8, 1)));
              v43 = vmlal_high_s16(v43, v51, v55);
              v44 = vmlal_s16(v44, *(int16x4_t *)v10.i8, *(int16x4_t *)v54.i8);
              v42 = vmlal_s16(v42, *(int16x4_t *)v51.i8, *(int16x4_t *)v55.i8);
              v40 = vmlal_lane_s16(v40, *(int16x4_t *)v52.i8, *(int16x4_t *)v8.i8, 0);
              v45 = vmlal_high_s16(v45, v10, v54);
              v46 = vmlal_s16(v46, *(int16x4_t *)v11.i8, *(int16x4_t *)v53.i8);
              v47 = vmlal_high_s16(v47, v11, v53);
              v38 -= 6;
            }
            if (v38 >= 1)
            {
              v8 = vandq_s8(*v37, v29);
              v56 = v35[1];
              v11 = (int16x8_t)vmovl_high_u8(v56);
              v10 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v56.i8);
              v57 = (int16x8_t)vmovl_high_u8(*v35);
              v58 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v35->i8);
              v59 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_185004940);
              v60 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_185004950);
              v61 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_185004960);
              v41 = vmlal_s16(v41, (int16x4_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL), vzip1_s16(*(int16x4_t *)v8.i8, vdup_lane_s16(*(int16x4_t *)v8.i8, 1)));
              v43 = vmlal_high_s16(v43, v57, v61);
              v40 = vmlal_lane_s16(v40, *(int16x4_t *)v58.i8, *(int16x4_t *)v8.i8, 0);
              v45 = vmlal_high_s16(v45, v10, v60);
              v44 = vmlal_s16(v44, *(int16x4_t *)v10.i8, *(int16x4_t *)v60.i8);
              v42 = vmlal_s16(v42, *(int16x4_t *)v57.i8, *(int16x4_t *)v61.i8);
              v46 = vmlal_s16(v46, *(int16x4_t *)v11.i8, *(int16x4_t *)v59.i8);
              v47 = vmlal_high_s16(v47, v11, v59);
            }
          }
          v9 = (int32x4_t)vextq_s8((int8x16_t)v45, (int8x16_t)v46, 0xCuLL);
          v62 = vaddq_s32(v40, (int32x4_t)vextq_s8((int8x16_t)v43, (int8x16_t)v44, 0xCuLL));
          v63 = vaddq_s32(v43, (int32x4_t)vextq_s8((int8x16_t)v46, (int8x16_t)v47, 0xCuLL));
          v64 = vaddq_s32(v41, (int32x4_t)vextq_s8((int8x16_t)v44, (int8x16_t)v45, 0xCuLL));
          v65 = (int8x16_t)vaddq_s32(v42, v9);
          *v32 = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v64, v65, 4uLL), v62), vaddq_s32((int32x4_t)vextq_s8(v65, (int8x16_t)v63, 8uLL), v30)), 0xEuLL), v31), (int32x4_t)0);
          v32[1].i32[0] = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddq_s32(vdupq_lane_s32(*(int32x2_t *)v65.i8, 1), v64), vaddq_s32(vdupq_laneq_s32(v63, 2), v30)), 0xEuLL), v31), (int32x4_t)0).u32[0];
          v32 = (int32x4_t *)((char *)v32 + 20);
          ++v33;
          v34 = (int *)((char *)v34 + v16);
          if (v33 == v22)
          {
            v33 = v22;
            break;
          }
        }
      }
      else
      {
        v34 = result;
      }
      if (v33 < a4)
      {
        do
        {
          v66 = *v34;
          if ((int)v66 >= (int)v14)
            v67 = v14;
          else
            v67 = *v34;
          v68 = v14 - v67;
          if (v34[1] >= v68)
            v69 = v68;
          else
            v69 = v34[1];
          if (v69 < 1)
          {
            v73 = 0uLL;
            v75 = 0uLL;
            v76 = 0uLL;
            v77 = 0uLL;
            v78 = 0uLL;
            v79 = 0uLL;
            v80 = 0uLL;
            v81 = 0uLL;
          }
          else
          {
            v70 = (uint8x16_t *)(v13 + 5 * v66);
            v71 = (unint64_t)&v70[-2] + 5 * v69;
            v72 = (int8x16_t *)(v34 + 2);
            v73 = 0uLL;
            if ((unint64_t)v70 >= v71)
            {
              v75 = 0uLL;
              v76 = 0uLL;
              v77 = 0uLL;
              v78 = 0uLL;
              v79 = 0uLL;
              v80 = 0uLL;
              v81 = 0uLL;
              goto LABEL_77;
            }
            v74 = v69;
            v75 = 0uLL;
            v76 = 0uLL;
            v77 = 0uLL;
            v78 = 0uLL;
            v79 = 0uLL;
            v80 = 0uLL;
            v81 = 0uLL;
            do
            {
              v82 = v17 - (char *)v72;
              if ((unint64_t)(v17 - (char *)v72) >= 0x10)
                v82 = 16;
              if (v82 < 0x10)
              {
                if ((_DWORD)v74)
                {
                  if (v74 < 4)
                  {
                    if (v74 == 1)
                    {
                      v8.i16[0] = v72->i16[0];
                    }
                    else
                    {
                      if ((_DWORD)v74 == 2)
                        v89 = 0;
                      else
                        v89 = (int16x4_t)v72->u16[2];
                      v10.i16[0] = v72->i16[0];
                      v10.i16[2] = v72->i16[1];
                      *(int16x4_t *)v8.i8 = vuzp1_s16(*(int16x4_t *)v10.i8, v89);
                    }
                    v8.i64[1] = 0;
                  }
                  else
                  {
                    if (v74 == 4)
                    {
                      v9.i16[0] = 0;
                      v9.i8[2] = 0;
                      v9.i8[3] = 0;
                      v9.i8[4] = 0;
                      v9.i8[5] = 0;
                      v9.i8[6] = 0;
                      v9.i8[7] = 0;
                    }
                    else if (v74 == 5)
                    {
                      v9.i16[0] = v72->i16[4];
                    }
                    else
                    {
                      if ((_DWORD)v74 == 6)
                      {
                        v90 = 0;
                      }
                      else
                      {
                        if ((v69 & 1) != 0)
                          v91 = 0;
                        else
                          v91 = v72->u16[7];
                        v90.i32[0] = v72->u16[6];
                        v90.i32[1] = v91;
                      }
                      v10.i16[0] = v72->i16[4];
                      v10.i16[2] = v72->i16[5];
                      *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v10.i8, v90);
                    }
                    v8.i64[0] = v72->i64[0];
                    v8.i64[1] = v9.i64[0];
                  }
                }
                else
                {
                  v8 = 0uLL;
                }
              }
              else
              {
                v8 = vandq_s8(*v72, v25);
              }
              v72 = (int8x16_t *)((char *)v72 + 12);
              v83 = *v70;
              v84 = v70[1];
              v70 = (uint8x16_t *)((char *)v70 + 30);
              v11 = (int16x8_t)vmovl_high_u8(v84);
              v10 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v84.i8);
              v85 = (int16x8_t)vmovl_high_u8(v83);
              v9 = (int32x4_t)vmovl_u8(*(uint8x8_t *)v83.i8);
              v86 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_185004940);
              v87 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_185004950);
              v88 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_185004960);
              v73 = vmlal_lane_s16(v73, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8, 0);
              v77 = vmlal_high_s16(v77, v85, v88);
              v76 = vmlal_s16(v76, *(int16x4_t *)v85.i8, *(int16x4_t *)v88.i8);
              v78 = vmlal_s16(v78, *(int16x4_t *)v10.i8, *(int16x4_t *)v87.i8);
              v79 = vmlal_high_s16(v79, v10, v87);
              v75 = vmlal_s16(v75, (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL), vzip1_s16(*(int16x4_t *)v8.i8, vdup_lane_s16(*(int16x4_t *)v8.i8, 1)));
              v80 = vmlal_s16(v80, *(int16x4_t *)v11.i8, *(int16x4_t *)v86.i8);
              v81 = vmlal_high_s16(v81, v11, v86);
              v74 -= 6;
            }
            while ((unint64_t)v70 < v71);
            if ((int)v74 >= 1)
            {
              v69 = v74;
LABEL_77:
              v92 = 0;
              v93 = v69;
              v94 = 5 * v69;
              v95 = v69 << 16;
              v96 = v69;
              v97 = 5 * v69;
              while (2)
              {
                v98 = v94 + v92;
                v99 = v17 - (char *)v72;
                if ((unint64_t)(v17 - (char *)v72) >= 0x10)
                  v99 = 16;
                if (v99 < 0x10)
                {
                  if (v96 >= 4)
                  {
                    if ((_DWORD)v96 == 4)
                    {
                      v9.i16[0] = 0;
                      v9.i8[2] = 0;
                      v9.i8[3] = 0;
                      v9.i8[4] = 0;
                      v9.i8[5] = 0;
                      v9.i8[6] = 0;
                      v9.i8[7] = 0;
                    }
                    else if ((_DWORD)v96 == 5)
                    {
                      v9.i16[0] = v72->i16[4];
                    }
                    else
                    {
                      if (v94 + v92 == 30)
                      {
                        v113 = 0;
                      }
                      else
                      {
                        if ((v93 & 1) != 0)
                          v130 = 0;
                        else
                          v130 = v72->u16[7];
                        v113.i32[0] = v72->u16[6];
                        v113.i32[1] = v130;
                      }
                      v10.i16[0] = v72->i16[4];
                      v10.i16[2] = v72->i16[5];
                      *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v10.i8, v113);
                    }
                    v8.i64[0] = v72->i64[0];
                    v8.i64[1] = v9.i64[0];
                    goto LABEL_84;
                  }
                  if (v98 == 5)
                  {
                    v8.i16[0] = v72->i16[0];
                  }
                  else
                  {
                    if (v94 + v92 == 10)
                    {
                      v9.i16[0] = 0;
                      v9.i8[2] = 0;
                      v9.i8[3] = 0;
                      v9.i8[4] = 0;
                      v9.i8[5] = 0;
                      v9.i8[6] = 0;
                      v9.i8[7] = 0;
                    }
                    else
                    {
                      v9.i8[2] = 0;
                      v9.i8[3] = 0;
                      v9.i8[4] = 0;
                      v9.i8[5] = 0;
                      v9.i8[6] = 0;
                      v9.i8[7] = 0;
                      v9.i16[0] = v72->i16[2];
                    }
                    v10.i16[0] = v72->i16[0];
                    v10.i16[2] = v72->i16[1];
                    *(int16x4_t *)v8.i8 = vuzp1_s16(*(int16x4_t *)v10.i8, *(int16x4_t *)v9.i8);
                  }
                  v8.i64[1] = 0;
                  v72 = (int8x16_t *)((char *)v72 + 12);
                }
                else
                {
                  v100 = v95 >> 16;
                  if (v95 >> 16 >= 8)
                    v100 = 8;
                  v9 = (int32x4_t)vcgtq_s16(vdupq_n_s16(v100), (int16x8_t)xmmword_185004910);
                  v10 = *(int16x8_t *)v72;
                  v8 = vandq_s8(*v72, (int8x16_t)v9);
LABEL_84:
                  v72 = (int8x16_t *)((char *)v72 + 12);
                  if (v96 >= 7)
                  {
                    v101 = *v70;
                    v102 = v70[1];
                    goto LABEL_86;
                  }
                }
                v131 = v94 + v92;
                v129 = v97 + v92;
                if ((v97 + v92) < 0x10)
                {
                  if (v129 < 8)
                  {
                    if (v129 < 4)
                    {
                      if (v131)
                      {
                        if (v131 == 1)
                        {
                          v111 = 0;
                          v9.i8[2] = 0;
                          v9.i8[3] = 0;
                          v9.i8[4] = 0;
                          v9.i8[5] = 0;
                          v9.i8[6] = 0;
                          v9.i8[7] = 0;
                          v9.i16[0] = v70->u8[0];
                        }
                        else
                        {
                          v9.i8[0] = v70->i8[0];
                          v9.i8[4] = v70->i8[1];
                          v111 = (int16x4_t)v70->u8[2];
                        }
                        v119 = vuzp1_s16(*(int16x4_t *)v9.i8, v111);
                      }
                      else
                      {
                        v119.i8[0] = 0;
                        v119.i8[2] = 0;
                        v119.i8[4] = 0;
                        v119.i8[6] = 0;
                      }
                      v101.i32[1] = 0;
                      v101.i8[0] = v119.i8[0];
                      v101.i8[1] = v119.i8[2];
                      v101.i8[2] = v119.i8[4];
                      v101.i8[3] = v119.i8[6];
                    }
                    else
                    {
                      if (v131 == 4)
                      {
                        v118 = 0;
                      }
                      else
                      {
                        v110 = &v70->i8[4];
                        if (v131 == 5)
                        {
                          v10.i16[0] = 0;
                          v10.i8[2] = 0;
                          v10.i8[3] = 0;
                          v10.i8[4] = 0;
                          v10.i8[5] = 0;
                          v10.i8[6] = 0;
                          v10.i8[7] = 0;
                          v9.i8[2] = 0;
                          v9.i8[3] = 0;
                          v9.i8[4] = 0;
                          v9.i8[5] = 0;
                          v9.i8[6] = 0;
                          v9.i8[7] = 0;
                          v9.i16[0] = *v110;
                        }
                        else
                        {
                          v9.i8[0] = *v110;
                          v9.i8[4] = v70->i8[5];
                          v10.i8[2] = 0;
                          v10.i8[3] = 0;
                          v10.i8[4] = 0;
                          v10.i8[5] = 0;
                          v10.i8[6] = 0;
                          v10.i8[7] = 0;
                          v10.i16[0] = v70->u8[6];
                        }
                        v118 = (int8x8_t)vuzp1_s16(*(int16x4_t *)v9.i8, *(int16x4_t *)v10.i8);
                      }
                      v10.i32[0] = v70->i32[0];
                      *(int8x8_t *)v101.i8 = vuzp1_s8((int8x8_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v10.i8), v118);
                    }
                    v101.i64[1] = 0;
                  }
                  else
                  {
                    if (v94 + v92 == 8)
                    {
                      v10.i16[0] = 0;
                      v10.i8[2] = 0;
                      v10.i8[3] = 0;
                      v10.i8[4] = 0;
                      v10.i8[5] = 0;
                      v10.i8[6] = 0;
                      v10.i8[7] = 0;
                    }
                    else if ((unint64_t)(v94 + v92 - 8) < 4)
                    {
                      if (v94 + v92 == 9)
                      {
                        v120.i8[2] = 0;
                        v120.i8[4] = 0;
                        v120.i8[6] = 0;
                        v120.i8[0] = v70->i8[8];
                      }
                      else
                      {
                        if (v94 + v92 == 10)
                          v112 = 0;
                        else
                          v112 = (int16x4_t)v70->u8[10];
                        v10.i8[0] = v70->i8[8];
                        v10.i8[4] = v70->i8[9];
                        v120 = vuzp1_s16(*(int16x4_t *)v10.i8, v112);
                      }
                      v10.i8[4] = 0;
                      v10.i8[5] = 0;
                      v10.i8[6] = 0;
                      v10.i8[7] = 0;
                      v10.i8[0] = v120.i8[0];
                      v10.i8[1] = v120.i8[2];
                      v10.i8[2] = v120.i8[4];
                      v10.i8[3] = v120.i8[6];
                    }
                    else
                    {
                      if (v131 == 12)
                      {
                        v121 = 0;
                      }
                      else
                      {
                        v109 = &v70->i8[12];
                        if (v131 == 13)
                        {
                          v10.i16[0] = 0;
                          v10.i8[2] = 0;
                          v10.i8[3] = 0;
                          v10.i8[4] = 0;
                          v10.i8[5] = 0;
                          v10.i8[6] = 0;
                          v10.i8[7] = 0;
                          v9.i8[2] = 0;
                          v9.i8[3] = 0;
                          v9.i8[4] = 0;
                          v9.i8[5] = 0;
                          v9.i8[6] = 0;
                          v9.i8[7] = 0;
                          v9.i16[0] = *v109;
                        }
                        else
                        {
                          v9.i8[0] = *v109;
                          v9.i8[4] = v70->i8[13];
                          v10.i8[2] = 0;
                          v10.i8[3] = 0;
                          v10.i8[4] = 0;
                          v10.i8[5] = 0;
                          v10.i8[6] = 0;
                          v10.i8[7] = 0;
                          v10.i16[0] = v70->u8[14];
                        }
                        v121 = (int8x8_t)vuzp1_s16(*(int16x4_t *)v9.i8, *(int16x4_t *)v10.i8);
                      }
                      v10.i32[0] = v70->i32[2];
                      *(int8x8_t *)v10.i8 = vuzp1_s8((int8x8_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v10.i8), v121);
                    }
                    v101.i64[0] = v70->i64[0];
                    v101.i64[1] = v10.i64[0];
                  }
                }
                else
                {
                  v101 = *v70;
                  v107 = v131 - 16;
                  if (v131 != 16)
                  {
                    if (v107 < 8)
                    {
                      if (v107 < 4)
                      {
                        v102.i16[3] = 0;
                        v102.i16[0] = v70[1].i16[0];
                        *(__int32 *)((char *)v102.i32 + 2) = v70[1].u8[2];
                      }
                      else
                      {
                        if (v131 == 20)
                        {
                          v122 = 0;
                        }
                        else
                        {
                          if (v131 == 21)
                          {
                            v11.i16[0] = 0;
                            v11.i8[2] = 0;
                            v11.i8[3] = 0;
                            v11.i8[4] = 0;
                            v11.i8[5] = 0;
                            v11.i8[6] = 0;
                            v11.i8[7] = 0;
                            v10.i8[2] = 0;
                            v10.i8[3] = 0;
                            v10.i8[4] = 0;
                            v10.i8[5] = 0;
                            v10.i8[6] = 0;
                            v10.i8[7] = 0;
                            v10.i16[0] = v70[1].u8[4];
                          }
                          else
                          {
                            v10.i8[0] = v70[1].i8[4];
                            v10.i8[4] = v70[1].i8[5];
                            v11.i8[2] = 0;
                            v11.i8[3] = 0;
                            v11.i8[4] = 0;
                            v11.i8[5] = 0;
                            v11.i8[6] = 0;
                            v11.i8[7] = 0;
                            v11.i16[0] = v70[1].u8[6];
                          }
                          v122 = (int8x8_t)vuzp1_s16(*(int16x4_t *)v10.i8, *(int16x4_t *)v11.i8);
                        }
                        v11.i32[0] = v70[1].i32[0];
                        *(int8x8_t *)v102.i8 = vuzp1_s8((int8x8_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v11.i8), v122);
                      }
                      v102.i64[1] = 0;
                    }
                    else
                    {
                      if (v94 + v92 == 24)
                      {
                        v114 = 0;
                      }
                      else if ((unint64_t)(v94 + v92 - 24) < 4)
                      {
                        if (v98 == 25)
                        {
                          v117 = 0;
                          v116 = 0;
                          v115 = v70[1].i8[8];
                        }
                        else
                        {
                          v115 = v70[1].i8[8];
                          v116 = v70[1].i8[9];
                          v117 = v70[1].u8[10];
                        }
                        v114.i16[3] = 0;
                        v114.i8[0] = v115;
                        v114.i8[1] = v116;
                        *(__int32 *)((char *)v114.i32 + 2) = v117;
                      }
                      else
                      {
                        if (v131 == 28)
                        {
                          v108 = 0;
                        }
                        else if (v131 == 29)
                        {
                          v108 = (int8x8_t)v70[1].u8[12];
                        }
                        else
                        {
                          if (v94 + v92 == 30)
                          {
                            v124 = 0;
                          }
                          else
                          {
                            if ((v93 & 1) != 0)
                              v123 = 0;
                            else
                              v123 = v70[1].u8[15];
                            v124.i32[0] = v70[1].u8[14];
                            v124.i32[1] = v123;
                          }
                          v11.i8[0] = v70[1].i8[12];
                          v11.i8[4] = v70[1].i8[13];
                          v108 = (int8x8_t)vuzp1_s16(*(int16x4_t *)v11.i8, v124);
                        }
                        v11.i32[0] = v70[1].i32[2];
                        v114 = vuzp1_s8((int8x8_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v11.i8), v108);
                      }
                      v102.i64[0] = v70[1].i64[0];
                      v102.u64[1] = (unint64_t)v114;
                    }
LABEL_86:
                    v70 = (uint8x16_t *)((char *)v70 + 30);
                    v11 = (int16x8_t)vmovl_high_u8(v102);
                    v10 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v102.i8);
                    v103 = (int16x8_t)vmovl_high_u8(v101);
                    v9 = (int32x4_t)vmovl_u8(*(uint8x8_t *)v101.i8);
                    v104 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_185004940);
                    v105 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_185004950);
                    v106 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_185004960);
                    v73 = vmlal_lane_s16(v73, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8, 0);
                    v77 = vmlal_high_s16(v77, v103, v106);
                    v76 = vmlal_s16(v76, *(int16x4_t *)v103.i8, *(int16x4_t *)v106.i8);
                    v78 = vmlal_s16(v78, *(int16x4_t *)v10.i8, *(int16x4_t *)v105.i8);
                    v75 = vmlal_s16(v75, (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL), vzip1_s16(*(int16x4_t *)v8.i8, vdup_lane_s16(*(int16x4_t *)v8.i8, 1)));
                    v79 = vmlal_high_s16(v79, v10, v105);
                    v80 = vmlal_s16(v80, *(int16x4_t *)v11.i8, *(int16x4_t *)v104.i8);
                    v81 = vmlal_high_s16(v81, v11, v104);
                    v92 -= 30;
                    v95 -= 393216;
                    v27 = (uint64_t)v96 <= 6;
                    v96 -= 6;
                    if (v27)
                      goto LABEL_178;
                    continue;
                  }
                }
                break;
              }
              v102 = 0uLL;
              goto LABEL_86;
            }
          }
LABEL_178:
          v9 = (int32x4_t)vextq_s8((int8x16_t)v79, (int8x16_t)v80, 0xCuLL);
          v125 = vaddq_s32(v73, (int32x4_t)vextq_s8((int8x16_t)v77, (int8x16_t)v78, 0xCuLL));
          v126 = vaddq_s32(v77, (int32x4_t)vextq_s8((int8x16_t)v80, (int8x16_t)v81, 0xCuLL));
          v127 = vaddq_s32(v75, (int32x4_t)vextq_s8((int8x16_t)v78, (int8x16_t)v79, 0xCuLL));
          v128 = (int8x16_t)vaddq_s32(v76, v9);
          *v32 = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v127, v128, 4uLL), v125), vaddq_s32((int32x4_t)vextq_s8(v128, (int8x16_t)v126, 8uLL), v30)), 0xEuLL), v31), (int32x4_t)0);
          v32[1].i32[0] = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddq_s32(vdupq_lane_s32(*(int32x2_t *)v128.i8, 1), v127), vaddq_s32(vdupq_laneq_s32(v126, 2), v30)), 0xEuLL), v31), (int32x4_t)0).u32[0];
          v32 = (int32x4_t *)((char *)v32 + 20);
          ++v33;
          v34 = (int *)((char *)v34 + v16);
        }
        while (v33 != a4);
      }
      v13 += v132;
      ++v12;
    }
    while (v12 != v26);
  }
  return result;
}

int *resample_horizontal<unsigned char,int,3,true>(int *result, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  _BOOL4 v22;
  uint64_t v23;
  unint64_t v24;
  int16x8_t v25;
  unsigned int v26;
  int8x16_t v27;
  BOOL v28;
  char v29;
  uint64_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int8x16_t v33;
  int32x4_t *v34;
  unint64_t v35;
  int *v36;
  uint64_t v37;
  uint8x16_t *v38;
  uint8x16_t *v39;
  int8x16_t *v40;
  int v41;
  uint8x8_t *v42;
  unint64_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int8x16_t v50;
  int16x8_t v51;
  uint8x16_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int32x4_t v61;
  int8x16_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int16x8_t v67;
  uint8x16_t v68;
  int16x8_t v69;
  int16x8_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  unsigned __int8 *v75;
  unint64_t v76;
  __int8 *v77;
  int8x16_t *v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  unint64_t v85;
  unsigned int v86;
  uint8x16_t v87;
  uint8x16_t v88;
  int8x8_t v89;
  int16x4_t v90;
  int16x4_t v91;
  __int32 v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x4_t v96;
  int16x4_t v97;
  __int32 v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  unint64_t v104;
  unsigned int v105;
  uint8x16_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int8x8_t v110;
  int16x4_t v111;
  int16x4_t v112;
  __int32 v113;
  int16x4_t v114;
  uint64_t v115;
  int8x8_t v116;
  int16x4_t v117;
  __int8 v118;
  __int8 v119;
  __int8 v120;
  int16x4_t v121;
  int16x4_t v122;
  int16x4_t v123;
  __int16 v124;
  int32x4_t v125;
  int8x16_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int8x16_t v129;
  char v130;
  unint64_t v131;
  unint64_t v132;

  if ((int)a4 >= 1 && a8 >= 1)
  {
    v12 = 0;
    v13 = *a6;
    v14 = a6[1];
    v131 = a7[1];
    v132 = *a7;
    v15 = v132 / 3;
    if (v132 / 3 >= v131)
      v15 = a7[1];
    v16 = a4;
    v17 = 2 * a2 + 8;
    v18 = (char *)result + v17 * a4;
    v19 = *(int *)&v18[-v17 + 4] + (uint64_t)*(int *)&v18[-v17];
    if (v15 < v19)
      v19 = v15;
    v20 = 1;
    if (a2 <= 3)
      v20 = (2 * a2 + 23) / (2 * a2 + 8);
    if (a2 % 5)
      v21 = a2 % 5;
    else
      v21 = 5;
    if (a2 % 5)
      v22 = 0;
    else
      v22 = a2 > 4;
    v23 = ((3 * v21 + 15) & 0x1FFFFFFF0) + 15 * (a2 / 5 - v22);
    v24 = a4 - v20;
    v25 = vdupq_n_s16(v21);
    if (a2 >= 5)
      v26 = 5;
    else
      v26 = a2;
    v27 = (int8x16_t)vcgtq_u16((uint16x8_t)vdupq_n_s16(v26), (uint16x8_t)xmmword_185004910);
    v28 = a2 == (__int16)a2 && a4 > v20;
    v29 = !v28;
    v130 = v29;
    if (v24 <= 1)
      v30 = 1;
    else
      v30 = v24;
    v31.i64[0] = 0x200000002000;
    v31.i64[1] = 0x200000002000;
    v32.i64[0] = 0xFF000000FFLL;
    v32.i64[1] = 0xFF000000FFLL;
    v33 = (int8x16_t)vcgtq_s16(v25, (int16x8_t)xmmword_185004910);
    while (1)
    {
      v34 = *(int32x4_t **)(a5 + 8 * v12);
      if ((v130 & 1) != 0)
      {
        v35 = 0;
        v36 = result;
      }
      else
      {
        v35 = 0;
        v36 = result;
        while (1)
        {
          v37 = *v36;
          v38 = (uint8x16_t *)(v13 + 3 * v37);
          v39 = (uint8x16_t *)((char *)v38 + v23);
          if ((unint64_t)v38->u64 + v23 > 3 * v19 + v13)
            break;
          if (v38 >= v39)
          {
            v44 = 0uLL;
            v45 = 0uLL;
            v46 = 0uLL;
            v47 = 0uLL;
            v48 = 0uLL;
            v49 = 0uLL;
          }
          else
          {
            v40 = (int8x16_t *)(v36 + 2);
            v41 = v36[1];
            v42 = (uint8x8_t *)(v14 + v37);
            v43 = (unint64_t)&v39[-2].u64[1];
            if ((unint64_t)v38 < v43)
            {
              v46 = 0uLL;
              v47 = 0uLL;
              v48 = 0uLL;
              v49 = 0uLL;
              v44 = 0uLL;
              v45 = 0uLL;
              do
              {
                v66 = *v40;
                v40 = (int8x16_t *)((char *)v40 + 10);
                v67 = (int16x8_t)vandq_s8(v66, v27);
                v68 = *v38;
                v38 = (uint8x16_t *)((char *)v38 + 15);
                v10 = (int16x8_t)vmovl_high_u8(v68);
                v69 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v68.i8);
                v11 = (int16x8_t)vqtbl1q_s8((int8x16_t)v67, (int8x16_t)xmmword_185004920);
                v70 = (int16x8_t)vqtbl1q_s8((int8x16_t)v67, (int8x16_t)xmmword_185004930);
                v49 = vmlal_high_s16(v49, v10, v11);
                v47 = vmlal_high_s16(v47, v69, v70);
                v48 = vmlal_s16(v48, *(int16x4_t *)v10.i8, *(int16x4_t *)v11.i8);
                *(uint8x8_t *)v68.i8 = *v42;
                v42 = (uint8x8_t *)((char *)v42 + 5);
                v10.i64[0] = v68.i64[0];
                v46 = vmlal_s16(v46, *(int16x4_t *)v69.i8, *(int16x4_t *)v70.i8);
                v9 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v68.i8);
                v45 = vmlal_high_s16(v45, v9, v67);
                v44 = vmlal_s16(v44, *(int16x4_t *)v9.i8, *(int16x4_t *)v67.i8);
                v41 -= 5;
              }
              while ((unint64_t)v38 < v43);
            }
            else
            {
              v44 = 0uLL;
              v45 = 0uLL;
              v46 = 0uLL;
              v47 = 0uLL;
              v48 = 0uLL;
              v49 = 0uLL;
            }
            if (v41 >= 1)
            {
              if (v41 >= 9)
              {
                v50 = *v40;
                v40 = (int8x16_t *)((char *)v40 + 10);
                v51 = (int16x8_t)vandq_s8(v50, v27);
                v52 = *v38;
                v38 = (uint8x16_t *)((char *)v38 + 15);
                v53 = (int16x8_t)vmovl_high_u8(v52);
                v54 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v52.i8);
                v55 = (int16x8_t)vqtbl1q_s8((int8x16_t)v51, (int8x16_t)xmmword_185004920);
                v56 = (int16x8_t)vqtbl1q_s8((int8x16_t)v51, (int8x16_t)xmmword_185004930);
                v49 = vmlal_high_s16(v49, v53, v55);
                v47 = vmlal_high_s16(v47, v54, v56);
                v48 = vmlal_s16(v48, *(int16x4_t *)v53.i8, *(int16x4_t *)v55.i8);
                v46 = vmlal_s16(v46, *(int16x4_t *)v54.i8, *(int16x4_t *)v56.i8);
                *(uint8x8_t *)v52.i8 = *v42;
                v42 = (uint8x8_t *)((char *)v42 + 5);
                v57 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v52.i8);
                v45 = vmlal_high_s16(v45, v57, v51);
                v44 = vmlal_s16(v44, *(int16x4_t *)v57.i8, *(int16x4_t *)v51.i8);
              }
              v58 = (int16x8_t)vandq_s8(*v40, v33);
              v10 = (int16x8_t)vmovl_high_u8(*v38);
              v59 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v38->i8);
              v11 = (int16x8_t)vqtbl1q_s8((int8x16_t)v58, (int8x16_t)xmmword_185004920);
              v60 = (int16x8_t)vqtbl1q_s8((int8x16_t)v58, (int8x16_t)xmmword_185004930);
              v49 = vmlal_high_s16(v49, v10, v11);
              v47 = vmlal_high_s16(v47, v59, v60);
              v48 = vmlal_s16(v48, *(int16x4_t *)v10.i8, *(int16x4_t *)v11.i8);
              v46 = vmlal_s16(v46, *(int16x4_t *)v59.i8, *(int16x4_t *)v60.i8);
              v9 = (int16x8_t)vmovl_u8(*v42);
              v45 = vmlal_high_s16(v45, v9, v58);
              v44 = vmlal_s16(v44, *(int16x4_t *)v9.i8, *(int16x4_t *)v58.i8);
            }
          }
          v8 = (int16x8_t)vextq_s8((int8x16_t)v48, (int8x16_t)v49, 4uLL);
          v61 = vaddq_s32((int32x4_t)v8, v46);
          v62 = (int8x16_t)vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v49, (int8x16_t)v49, 4uLL).u64[0], v47);
          v63 = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddq_s32(v61, (int32x4_t)vextq_s8((int8x16_t)v61, v62, 0xCuLL)), vaddq_s32((int32x4_t)vextq_s8(v62, (int8x16_t)v48, 8uLL), v31)), 0xEuLL), v32), (int32x4_t)0);
          v64 = (int32x4_t)vextq_s8((int8x16_t)v44, (int8x16_t)v45, 0xCuLL);
          v64.i32[2] = 0;
          v65 = (int8x16_t)vaddq_s32(v64, v44);
          v63.i32[3] = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32((int32x4_t)vadd_s32(vadd_s32(*(int32x2_t *)v65.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v65, v65, 8uLL)), vdup_lane_s32(*(int32x2_t *)v65.i8, 1)).u32[0], v31), 0xEuLL), v32), (int32x4_t)0).u32[0];
          *v34++ = v63;
          ++v35;
          v36 = (int *)((char *)v36 + v17);
          if (v35 == v30)
          {
            v35 = v30;
            break;
          }
        }
      }
      if (v35 < v16)
        break;
LABEL_198:
      v13 += v132;
      v14 += v131;
      if (++v12 == a8)
        return result;
    }
    while (1)
    {
      LODWORD(v71) = v36[1];
      v72 = *v36;
      if ((int)v72 >= (int)v19)
        v73 = v19;
      else
        v73 = *v36;
      v74 = v19 - v73;
      if ((int)v71 >= v74)
        LODWORD(v71) = v74;
      if ((int)v71 < 1)
      {
        v83 = 0uLL;
        v84 = 0uLL;
        v79 = 0uLL;
        v80 = 0uLL;
        v81 = 0uLL;
        v82 = 0uLL;
        goto LABEL_197;
      }
      v75 = (unsigned __int8 *)(v13 + 3 * v72);
      v76 = (unint64_t)&v75[3 * (int)v71 - 24];
      v77 = (__int8 *)(v14 + v72);
      v78 = (int8x16_t *)(v36 + 2);
      if ((unint64_t)v75 >= v76)
      {
        v79 = 0uLL;
        v80 = 0uLL;
        v81 = 0uLL;
        v82 = 0uLL;
        v83 = 0uLL;
        v84 = 0uLL;
        goto LABEL_109;
      }
      v71 = (int)v71;
      v79 = 0uLL;
      v80 = 0uLL;
      v81 = 0uLL;
      v82 = 0uLL;
      v83 = 0uLL;
      v84 = 0uLL;
      do
      {
        v85 = v18 - (char *)v78;
        if ((unint64_t)(v18 - (char *)v78) >= 0x10)
          v85 = 16;
        if (v85 >= 0x10)
        {
          v8 = (int16x8_t)vandq_s8(*v78, v27);
LABEL_58:
          v86 = v71;
          goto LABEL_59;
        }
        if ((_DWORD)v71)
        {
          if (v71 < 4)
          {
            if (v71 == 1)
            {
              v8.i16[0] = v78->i16[0];
            }
            else
            {
              if ((_DWORD)v71 == 2)
                v96 = 0;
              else
                v96 = (int16x4_t)v78->u16[2];
              v9.i16[0] = v78->i16[0];
              v9.i16[2] = v78->i16[1];
              *(int16x4_t *)v8.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v96);
            }
            v8.i64[1] = 0;
          }
          else
          {
            if (v71 == 4)
            {
              v9.i16[0] = 0;
              v9.i8[2] = 0;
              v9.i8[3] = 0;
              v9.i8[4] = 0;
              v9.i8[5] = 0;
              v9.i8[6] = 0;
              v9.i8[7] = 0;
            }
            else if (v71 == 5)
            {
              v9.i16[0] = v78->i16[4];
            }
            else
            {
              if ((_DWORD)v71 == 6)
              {
                v97 = 0;
              }
              else
              {
                if ((v71 & 1) != 0)
                  v98 = 0;
                else
                  v98 = v78->u16[7];
                v97.i32[0] = v78->u16[6];
                v97.i32[1] = v98;
              }
              v9.i16[0] = v78->i16[4];
              v9.i16[2] = v78->i16[5];
              *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v97);
            }
            v8.i64[0] = v78->i64[0];
            v8.i64[1] = v9.i64[0];
          }
          goto LABEL_58;
        }
        v86 = 0;
        v8 = 0uLL;
LABEL_59:
        v87 = *(uint8x16_t *)v75;
        v75 += 15;
        v88 = v87;
        if (v86)
        {
          if (v86 < 4)
          {
            if (v71)
            {
              if (v71 == 1)
              {
                v11.i8[2] = 0;
                v11.i8[4] = 0;
                v11.i8[6] = 0;
                v11.i8[0] = *v77;
              }
              else
              {
                if (v86 == 2)
                  v91 = 0;
                else
                  v91 = (int16x4_t)v77[2];
                v11.i8[0] = *v77;
                v11.i8[4] = v77[1];
                *(int16x4_t *)v11.i8 = vuzp1_s16(*(int16x4_t *)v11.i8, v91);
              }
            }
            else
            {
              v11.i8[0] = 0;
              v11.i8[2] = 0;
              v11.i8[4] = 0;
              v11.i8[6] = 0;
            }
            v10.i8[4] = 0;
            v10.i8[5] = 0;
            v10.i8[6] = 0;
            v10.i8[7] = 0;
            v10.i8[0] = v11.i8[0];
            v10.i8[1] = v11.i8[2];
            v10.i8[2] = v11.i8[4];
            v10.i8[3] = v11.i8[6];
          }
          else
          {
            if (v71 == 4)
            {
              v89 = 0;
            }
            else if (v71 == 5)
            {
              v89 = (int8x8_t)v77[4];
            }
            else
            {
              if (v86 == 6)
              {
                v90 = 0;
              }
              else
              {
                if ((v71 & 1) != 0)
                  v92 = 0;
                else
                  v92 = v77[7];
                v90.i32[0] = v77[6];
                v90.i32[1] = v92;
              }
              v11.i8[0] = v77[4];
              v11.i8[4] = v77[5];
              v89 = (int8x8_t)vuzp1_s16(*(int16x4_t *)v11.i8, v90);
            }
            v11.i32[0] = *(_DWORD *)v77;
            *(int8x8_t *)v10.i8 = vuzp1_s8((int8x8_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v11.i8), v89);
          }
        }
        else
        {
          v10.i16[0] = 0;
          v10.i8[2] = 0;
          v10.i8[3] = 0;
          v10.i8[4] = 0;
          v10.i8[5] = 0;
          v10.i8[6] = 0;
          v10.i8[7] = 0;
        }
        v78 = (int8x16_t *)((char *)v78 + 10);
        v11 = (int16x8_t)vmovl_high_u8(v88);
        v93 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v88.i8);
        v94 = (int16x8_t)vqtbl1q_s8((int8x16_t)v8, (int8x16_t)xmmword_185004920);
        v95 = (int16x8_t)vqtbl1q_s8((int8x16_t)v8, (int8x16_t)xmmword_185004930);
        v82 = vmlal_high_s16(v82, v11, v94);
        v81 = vmlal_s16(v81, *(int16x4_t *)v11.i8, *(int16x4_t *)v94.i8);
        v80 = vmlal_high_s16(v80, v93, v95);
        v79 = vmlal_s16(v79, *(int16x4_t *)v93.i8, *(int16x4_t *)v95.i8);
        v77 += 5;
        v9 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v10.i8);
        v71 -= 5;
        v84 = vmlal_high_s16(v84, v9, v8);
        v83 = vmlal_s16(v83, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
      }
      while ((unint64_t)v75 < v76);
      if ((int)v71 >= 1)
      {
LABEL_109:
        v99 = 0;
        v100 = v71;
        v101 = 3 * v71;
        v102 = (_DWORD)v71 << 16;
        v103 = 3 * v71;
        do
        {
          v104 = v18 - (char *)v78;
          if ((unint64_t)(v18 - (char *)v78) >= 0x10)
            v104 = 16;
          if (v104 < 0x10)
          {
            if (v100 < 4)
            {
              if (v101 + v99 == 3)
              {
                v8.i16[0] = v78->i16[0];
              }
              else
              {
                if (v101 + v99 == 6)
                  v111 = 0;
                else
                  v111 = (int16x4_t)v78->u16[2];
                v9.i16[0] = v78->i16[0];
                v9.i16[2] = v78->i16[1];
                *(int16x4_t *)v8.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v111);
              }
              v8.i64[1] = 0;
              v78 = (int8x16_t *)((char *)v78 + 10);
LABEL_149:
              v115 = v101 + v99;
              if ((v103 + v99) < 8)
              {
                if ((v103 + v99) < 4)
                {
                  if (v115)
                  {
                    if (v115 == 1)
                    {
                      v117 = 0;
                      v9.i8[2] = 0;
                      v9.i8[3] = 0;
                      v9.i8[4] = 0;
                      v9.i8[5] = 0;
                      v9.i8[6] = 0;
                      v9.i8[7] = 0;
                      v9.i16[0] = *v75;
                    }
                    else
                    {
                      v9.i8[0] = *v75;
                      v9.i8[4] = v75[1];
                      v117 = (int16x4_t)v75[2];
                    }
                    v122 = vuzp1_s16(*(int16x4_t *)v9.i8, v117);
                  }
                  else
                  {
                    v122.i8[0] = 0;
                    v122.i8[2] = 0;
                    v122.i8[4] = 0;
                    v122.i8[6] = 0;
                  }
                  v106.i32[1] = 0;
                  v106.i8[0] = v122.i8[0];
                  v106.i8[1] = v122.i8[2];
                  v106.i8[2] = v122.i8[4];
                  v106.i8[3] = v122.i8[6];
                }
                else
                {
                  if (v115 == 4)
                  {
                    v116 = 0;
                  }
                  else if (v115 == 5)
                  {
                    v116 = (int8x8_t)v75[4];
                  }
                  else
                  {
                    if (v101 + v99 == 6)
                      v121 = 0;
                    else
                      v121 = (int16x4_t)v75[6];
                    v10.i8[0] = v75[4];
                    v10.i8[4] = v75[5];
                    v116 = (int8x8_t)vuzp1_s16(*(int16x4_t *)v10.i8, v121);
                  }
                  v10.i32[0] = *(_DWORD *)v75;
                  *(int8x8_t *)v106.i8 = vuzp1_s8((int8x8_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v10.i8), v116);
                }
                v106.i64[1] = 0;
              }
              else
              {
                if (v115 == 8)
                {
                  v11.i16[0] = 0;
                  v11.i8[2] = 0;
                  v11.i8[3] = 0;
                  v11.i8[4] = 0;
                  v11.i8[5] = 0;
                  v11.i8[6] = 0;
                  v11.i8[7] = 0;
                }
                else if ((unint64_t)(v115 - 8) < 4)
                {
                  if (v101 + v99 == 9)
                  {
                    v120 = 0;
                    v119 = 0;
                    v118 = v75[8];
                  }
                  else
                  {
                    v118 = v75[8];
                    v119 = v75[9];
                    v120 = v75[10];
                  }
                  v11.i8[4] = 0;
                  v11.i8[5] = 0;
                  v11.i8[6] = 0;
                  v11.i8[7] = 0;
                  v11.i8[0] = v118;
                  v11.i8[1] = v119;
                  v11.i8[2] = v120;
                  v11.i8[3] = 0;
                }
                else
                {
                  if (v115 == 12)
                  {
                    v9.i16[0] = 0;
                    v9.i8[2] = 0;
                    v9.i8[3] = 0;
                    v9.i8[4] = 0;
                    v9.i8[5] = 0;
                    v9.i8[6] = 0;
                    v9.i8[7] = 0;
                  }
                  else if (v115 == 13)
                  {
                    v9.i8[2] = 0;
                    v9.i8[3] = 0;
                    v9.i8[4] = 0;
                    v9.i8[5] = 0;
                    v9.i8[6] = 0;
                    v9.i8[7] = 0;
                    v9.i16[0] = v75[12];
                  }
                  else
                  {
                    if ((v115 & 1) != 0)
                      v124 = 0;
                    else
                      v124 = v75[15];
                    v9.i8[0] = v75[12];
                    v9.i8[4] = v75[13];
                    v9.i16[1] = v9.i16[2];
                    v9.i16[2] = v75[14];
                    v9.i16[3] = v124;
                  }
                  v10.i32[0] = *((_DWORD *)v75 + 2);
                  *(int8x8_t *)v11.i8 = vuzp1_s8((int8x8_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v10.i8), *(int8x8_t *)v9.i8);
                }
                v106.i64[0] = *(_QWORD *)v75;
                v106.i64[1] = v11.i64[0];
              }
              goto LABEL_118;
            }
            if ((_DWORD)v100 == 4)
            {
              v9.i16[0] = 0;
              v9.i8[2] = 0;
              v9.i8[3] = 0;
              v9.i8[4] = 0;
              v9.i8[5] = 0;
              v9.i8[6] = 0;
              v9.i8[7] = 0;
            }
            else if ((_DWORD)v100 == 5)
            {
              v9.i16[0] = v78->i16[4];
            }
            else
            {
              if (v101 + v99 == 18)
              {
                v123 = 0;
              }
              else
              {
                if ((v100 & 1) != 0)
                  v113 = 0;
                else
                  v113 = v78->u16[7];
                v123.i32[0] = v78->u16[6];
                v123.i32[1] = v113;
              }
              v9.i16[0] = v78->i16[4];
              v9.i16[2] = v78->i16[5];
              *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v123);
            }
            v8.i64[0] = v78->i64[0];
            v8.i64[1] = v9.i64[0];
          }
          else
          {
            v105 = v102 >> 16;
            if (v102 >> 16 >= 8)
              v105 = 8;
            v9 = *(int16x8_t *)v78;
            v8 = (int16x8_t)vandq_s8(*v78, (int8x16_t)vcgtq_s16(vdupq_n_s16(v105), (int16x8_t)xmmword_185004910));
          }
          v78 = (int8x16_t *)((char *)v78 + 10);
          if (v100 < 6)
            goto LABEL_149;
          v106 = *(uint8x16_t *)v75;
LABEL_118:
          if (v100 < 8)
          {
            if (v100 < 4)
            {
              if (v101 + v99 == 3)
              {
                v11.i8[2] = 0;
                v11.i8[4] = 0;
                v11.i8[6] = 0;
                v11.i8[0] = *v77;
              }
              else
              {
                if (v101 + v99 == 6)
                  v112 = 0;
                else
                  v112 = (int16x4_t)v77[2];
                v11.i8[0] = *v77;
                v11.i8[4] = v77[1];
                *(int16x4_t *)v11.i8 = vuzp1_s16(*(int16x4_t *)v11.i8, v112);
              }
              v10.i8[4] = 0;
              v10.i8[5] = 0;
              v10.i8[6] = 0;
              v10.i8[7] = 0;
              v10.i8[0] = v11.i8[0];
              v10.i8[1] = v11.i8[2];
              v10.i8[2] = v11.i8[4];
              v10.i8[3] = v11.i8[6];
            }
            else
            {
              if ((_DWORD)v100 == 4)
              {
                v110 = 0;
              }
              else if ((_DWORD)v100 == 5)
              {
                v110 = (int8x8_t)v77[4];
              }
              else
              {
                if (v101 + v99 == 18)
                  v114 = 0;
                else
                  v114 = (int16x4_t)v77[6];
                v11.i8[0] = v77[4];
                v11.i8[4] = v77[5];
                v110 = (int8x8_t)vuzp1_s16(*(int16x4_t *)v11.i8, v114);
              }
              v11.i32[0] = *(_DWORD *)v77;
              *(int8x8_t *)v10.i8 = vuzp1_s8((int8x8_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v11.i8), v110);
            }
          }
          else
          {
            v10.i64[0] = *(_QWORD *)v77;
          }
          v75 += 15;
          v11 = (int16x8_t)vmovl_high_u8(v106);
          v107 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v106.i8);
          v108 = (int16x8_t)vqtbl1q_s8((int8x16_t)v8, (int8x16_t)xmmword_185004920);
          v109 = (int16x8_t)vqtbl1q_s8((int8x16_t)v8, (int8x16_t)xmmword_185004930);
          v80 = vmlal_high_s16(v80, v107, v109);
          v82 = vmlal_high_s16(v82, v11, v108);
          v81 = vmlal_s16(v81, *(int16x4_t *)v11.i8, *(int16x4_t *)v108.i8);
          v79 = vmlal_s16(v79, *(int16x4_t *)v107.i8, *(int16x4_t *)v109.i8);
          v77 += 5;
          v9 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v10.i8);
          v99 -= 15;
          v102 -= 327680;
          v84 = vmlal_high_s16(v84, v9, v8);
          v83 = vmlal_s16(v83, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
          v28 = (uint64_t)v100 <= 5;
          v100 -= 5;
        }
        while (!v28);
      }
LABEL_197:
      v8 = (int16x8_t)vextq_s8((int8x16_t)v81, (int8x16_t)v82, 4uLL);
      v125 = vaddq_s32((int32x4_t)v8, v79);
      v126 = (int8x16_t)vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v82, (int8x16_t)v82, 4uLL).u64[0], v80);
      v127 = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v125, v126, 0xCuLL), v125), vaddq_s32((int32x4_t)vextq_s8(v126, (int8x16_t)v81, 8uLL), v31)), 0xEuLL), v32), (int32x4_t)0);
      v128 = (int32x4_t)vextq_s8((int8x16_t)v83, (int8x16_t)v84, 0xCuLL);
      v128.i32[2] = 0;
      v129 = (int8x16_t)vaddq_s32(v128, v83);
      v127.i32[3] = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32((int32x4_t)vadd_s32(vadd_s32(*(int32x2_t *)v129.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v129, v129, 8uLL)), vdup_lane_s32(*(int32x2_t *)v129.i8, 1)).u32[0], v31), 0xEuLL), v32), (int32x4_t)0).u32[0];
      *v34++ = v127;
      ++v35;
      v36 = (int *)((char *)v36 + v17);
      if (v35 == v16)
        goto LABEL_198;
    }
  }
  return result;
}

int16x4_t *resample_horizontal<unsigned char,int,4,true>(int16x4_t *result, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  int16x4_t v8;
  int16x8_t v9;
  int16x8_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  _BOOL4 v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t *v27;
  unint64_t v28;
  int16x4_t *v29;
  uint64_t v30;
  __int32 v31;
  int v32;
  uint8x16_t *v33;
  unint64_t v34;
  uint64_t v35;
  __int16 *v36;
  uint64_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  unint64_t v43;
  uint8x16_t v44;
  int16x4_t v45;
  __int32 v46;
  int v47;
  unint64_t v48;
  __int32 v49;
  BOOL v50;
  __int16 v51;
  __int8 v52;
  __int8 v53;
  __int8 v54;
  __int8 v55;
  uint64_t v56;
  __int32 v57;
  uint16x8_t v58;
  int16x4_t v59;
  uint64_t v60;
  uint8x16_t *v61;
  uint8x16_t *v62;
  int16x4_t *v63;
  int v64;
  __int32 *v65;
  unint64_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int16x4_t v72;
  uint8x16_t v73;
  unint64_t v74;

  if ((int)a4 >= 1 && a8 >= 1)
  {
    v11 = 0;
    v12 = *a6;
    v13 = a6[1];
    v14 = *a7;
    v15 = a7[1];
    v74 = v14;
    if (v14 >> 2 >= v15)
      v16 = a7[1];
    else
      v16 = v14 >> 2;
    v17 = 2 * a2 + 8;
    v18 = (char *)result + v17 * a4;
    if (v16 >= *(int *)&v18[-v17 + 4] + (uint64_t)*(int *)&v18[-v17])
      v16 = *(int *)&v18[-v17 + 4] + (uint64_t)*(int *)&v18[-v17];
    v19 = a2 > 3;
    LODWORD(v20) = (4 * (a2 & 3)) | 0x10;
    if ((a2 & 3) != 0)
      v20 = v20;
    else
      v20 = 32;
    if ((a2 & 3) != 0)
      v19 = 0;
    v21 = ((v20 - 1) & 0xFFFFFFFFFFFFFFF0) + 16 * ((a2 >> 2) - v19);
    v24 = a2 != (__int16)a2 || a4 < 2 || a4 == 1;
    v25.i64[0] = 0x200000002000;
    v25.i64[1] = 0x200000002000;
    v26.i64[0] = 0xFF000000FFLL;
    v26.i64[1] = 0xFF000000FFLL;
    while (1)
    {
      v27 = *(int32x4_t **)(a5 + 8 * v11);
      if (v24)
      {
        v28 = 0;
        v29 = result;
      }
      else
      {
        v28 = 0;
        v29 = result;
        do
        {
          v60 = v29->i32[0];
          v61 = (uint8x16_t *)(v12 + 4 * v60);
          v62 = (uint8x16_t *)((char *)v61 + v21);
          if ((unint64_t)v61->u64 + v21 > 4 * v16 + v12)
            break;
          if (v61 >= v62)
          {
            v67 = 0uLL;
            v68 = 0uLL;
            v69 = 0uLL;
            v70 = 0uLL;
            v71 = 0uLL;
          }
          else
          {
            v63 = v29 + 1;
            v64 = v29->i32[1];
            v65 = (__int32 *)(v13 + v60);
            v66 = (unint64_t)&v62[-1];
            if ((unint64_t)v61 < v66)
            {
              v68 = 0uLL;
              v69 = 0uLL;
              v70 = 0uLL;
              v71 = 0uLL;
              v67 = 0uLL;
              do
              {
                v72 = *v63++;
                v8 = v72;
                v73 = *v61++;
                v10 = (int16x8_t)vmovl_high_u8(v73);
                v9 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v73.i8);
                v68 = vmlal_lane_s16(v68, *(int16x4_t *)v9.i8, v8, 0);
                v69 = vmlal_high_lane_s16(v69, v9, v8, 1);
                v70 = vmlal_lane_s16(v70, *(int16x4_t *)v10.i8, v8, 2);
                v71 = vmlal_high_lane_s16(v71, v10, v8, 3);
                v73.i32[0] = *v65++;
                v9.i32[0] = v73.i32[0];
                v9.i64[0] = vmovl_u8(*(uint8x8_t *)v9.i8).u64[0];
                v67 = vmlal_s16(v67, *(int16x4_t *)v9.i8, v8);
                v64 -= 4;
              }
              while ((unint64_t)v61 < v66);
            }
            else
            {
              v67 = 0uLL;
              v68 = 0uLL;
              v69 = 0uLL;
              v70 = 0uLL;
              v71 = 0uLL;
            }
            if (v64 >= 1)
            {
              v8 = *v63;
              v10 = (int16x8_t)vmovl_high_u8(*v61);
              v9 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v61->i8);
              v68 = vmlal_lane_s16(v68, *(int16x4_t *)v9.i8, *v63, 0);
              v69 = vmlal_high_lane_s16(v69, v9, *v63, 1);
              v70 = vmlal_lane_s16(v70, *(int16x4_t *)v10.i8, *v63, 2);
              v71 = vmlal_high_lane_s16(v71, v10, *v63, 3);
              v9.i32[0] = *v65;
              v9.i64[0] = vmovl_u8(*(uint8x8_t *)v9.i8).u64[0];
              v67 = vmlal_s16(v67, *(int16x4_t *)v9.i8, *v63);
            }
          }
          *v27 = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddq_s32(vaddq_s32(v69, v71), vaddq_s32(v68, v70)), v25), 0xEuLL), v26), (int32x4_t)0);
          v27[1].i32[0] = vmaxq_s32(vminq_s32((int32x4_t)((vaddvq_s32(v67) + 0x2000) >> 14), v26), (int32x4_t)0).u32[0];
          v27 = (int32x4_t *)((char *)v27 + 20);
          ++v28;
          v29 = (int16x4_t *)((char *)v29 + v17);
          if (a4 < 2)
            break;
        }
        while ((unint64_t)a4 - 1 > v28);
      }
      if (v28 < a4)
        break;
LABEL_95:
      v12 += v74;
      v13 += v15;
      if (++v11 == a8)
        return result;
    }
    while (1)
    {
      v30 = v29->i32[0];
      if ((int)v30 >= (int)v16)
        v31 = v16;
      else
        v31 = v29->i32[0];
      v32 = v16 - v31;
      if (v29->i32[1] < v32)
        v32 = v29->i32[1];
      if (v32 < 1)
      {
        v42 = 0uLL;
        v38 = 0uLL;
        v39 = 0uLL;
        v40 = 0uLL;
        v41 = 0uLL;
        goto LABEL_92;
      }
      v33 = (uint8x16_t *)(v12 + 4 * v30);
      v34 = (unint64_t)&v33[-1] + 4 * v32;
      v35 = v13 + v30;
      v36 = (__int16 *)&v29[1];
      if ((unint64_t)v33 >= v34)
      {
        v38 = 0uLL;
        v39 = 0uLL;
        v40 = 0uLL;
        v41 = 0uLL;
        v42 = 0uLL;
        goto LABEL_54;
      }
      v37 = v32;
      v38 = 0uLL;
      v39 = 0uLL;
      v40 = 0uLL;
      v41 = 0uLL;
      v42 = 0uLL;
      do
      {
        v43 = v18 - (char *)v36;
        if ((unint64_t)(v18 - (char *)v36) >= 8)
          v43 = 8;
        if (v43 < 8)
        {
          if (v37)
          {
            if (v37 == 1)
            {
              v8.i16[0] = *v36;
            }
            else
            {
              if ((_DWORD)v37 == 2)
              {
                v45 = 0;
              }
              else
              {
                if ((v32 & 1) != 0)
                  v46 = 0;
                else
                  v46 = (unsigned __int16)v36[3];
                v45.i32[0] = (unsigned __int16)v36[2];
                v45.i32[1] = v46;
              }
              v10.i16[0] = *v36;
              v10.i16[2] = v36[1];
              v8 = vuzp1_s16(*(int16x4_t *)v10.i8, v45);
            }
          }
          else
          {
            v8 = 0;
          }
        }
        else
        {
          v8 = *(int16x4_t *)v36;
        }
        v36 += 4;
        v44 = *v33++;
        v10 = (int16x8_t)vmovl_high_u8(v44);
        v9 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v44.i8);
        v38 = vmlal_lane_s16(v38, *(int16x4_t *)v9.i8, v8, 0);
        v39 = vmlal_high_lane_s16(v39, v9, v8, 1);
        v40 = vmlal_lane_s16(v40, *(int16x4_t *)v10.i8, v8, 2);
        v41 = vmlal_high_lane_s16(v41, v10, v8, 3);
        v44.i32[0] = *(_DWORD *)v35;
        v35 += 4;
        v9.i32[0] = v44.i32[0];
        v9.i64[0] = vmovl_u8(*(uint8x8_t *)v9.i8).u64[0];
        v42 = vmlal_s16(v42, *(int16x4_t *)v9.i8, v8);
        v37 -= 4;
      }
      while ((unint64_t)v33 < v34);
      if ((int)v37 >= 1)
        break;
LABEL_92:
      *v27 = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddq_s32(vaddq_s32(v39, v41), vaddq_s32(v38, v40)), v25), 0xEuLL), v26), (int32x4_t)0);
      v27[1].i32[0] = vmaxq_s32(vminq_s32((int32x4_t)((vaddvq_s32(v42) + 0x2000) >> 14), v26), (int32x4_t)0).u32[0];
      v27 = (int32x4_t *)((char *)v27 + 20);
      ++v28;
      v29 = (int16x4_t *)((char *)v29 + v17);
      if (v28 == a4)
        goto LABEL_95;
    }
    v32 = v37;
LABEL_54:
    v47 = v32;
    while (1)
    {
      v48 = v18 - (char *)v36;
      if ((unint64_t)(v18 - (char *)v36) >= 8)
        v48 = 8;
      if (v48 < 8)
      {
        if (v47 == 1)
        {
          v51 = *v36;
          v36 += 4;
          v52 = 0;
          v53 = 0;
          v54 = 0;
          v55 = 0;
          v8.i8[2] = 0;
          v8.i8[3] = 0;
          v8.i8[4] = 0;
          v8.i8[5] = 0;
          v8.i8[6] = 0;
          v8.i8[7] = 0;
          v8.i16[0] = v51;
          v9.i32[0] = v33->i32[0];
          v9.i64[0] = vmovl_u8(*(uint8x8_t *)v9.i8).u64[0];
LABEL_67:
          v9.i8[8] = 0;
          v9.i8[9] = 0;
          v9.i8[10] = 0;
          v9.i8[11] = 0;
          v9.i8[12] = 0;
          v9.i8[13] = 0;
          v9.i8[14] = 0;
          v9.i8[15] = 0;
          v9.i8[1] = v9.i8[2];
          v9.i8[2] = v9.i8[4];
          v9.i8[3] = v9.i8[6];
          v9.i8[4] = v52;
          v9.i8[5] = v53;
          v9.i8[6] = v54;
          v9.i8[7] = v55;
          goto LABEL_61;
        }
        if (v47 == 2)
        {
          v9.i16[0] = 0;
          v9.i8[2] = 0;
          v9.i8[3] = 0;
          v9.i8[4] = 0;
          v9.i8[5] = 0;
          v9.i8[6] = 0;
          v9.i8[7] = 0;
        }
        else
        {
          if ((v32 & 1) != 0)
            v57 = 0;
          else
            v57 = (unsigned __int16)v36[3];
          v9.i32[0] = (unsigned __int16)v36[2];
          v9.i32[1] = v57;
        }
        v10.i16[0] = *v36;
        v10.i16[2] = v36[1];
        v8 = vuzp1_s16(*(int16x4_t *)v10.i8, *(int16x4_t *)v9.i8);
      }
      else
      {
        v8 = *(int16x4_t *)v36;
      }
      v36 += 4;
      if (v47 >= 4)
      {
        v9 = *(int16x8_t *)v33;
        goto LABEL_61;
      }
      if ((v47 & 0x3FFFFFFE) == 0)
      {
        v9.i32[0] = v33->i32[0];
        v9.i64[0] = vmovl_u8(*(uint8x8_t *)v9.i8).u64[0];
        if (v47 == 1)
        {
          v52 = 0;
          v53 = 0;
          v54 = 0;
          v55 = 0;
        }
        else
        {
          v52 = v33->i8[4];
          v53 = v33->i8[5];
          v54 = v33->i8[6];
          v55 = v33->i8[7];
        }
        goto LABEL_67;
      }
      if (v47 == 2)
      {
        v56 = 0;
      }
      else
      {
        v9.i32[0] = v33->i32[2];
        v58 = vmovl_u8(*(uint8x8_t *)v9.i8);
        HIDWORD(v56) = 0;
        LOBYTE(v56) = v58.i8[0];
        BYTE1(v56) = v58.i8[2];
        BYTE2(v56) = v58.i8[4];
        BYTE3(v56) = v58.i8[6];
      }
      v9.i64[0] = v33->i64[0];
      v9.i64[1] = v56;
LABEL_61:
      v10 = (int16x8_t)vmovl_high_u8((uint8x16_t)v9);
      v9 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v9.i8);
      v38 = vmlal_lane_s16(v38, *(int16x4_t *)v9.i8, v8, 0);
      v39 = vmlal_high_lane_s16(v39, v9, v8, 1);
      v40 = vmlal_lane_s16(v40, *(int16x4_t *)v10.i8, v8, 2);
      v41 = vmlal_high_lane_s16(v41, v10, v8, 3);
      if (v47 <= 3)
      {
        if (v47)
        {
          if (v47 == 1)
          {
            v9.i8[2] = 0;
            v9.i8[4] = 0;
            v9.i8[6] = 0;
            v9.i8[0] = *(_BYTE *)v35;
          }
          else
          {
            if (v47 == 2)
              v59 = 0;
            else
              v59 = (int16x4_t)*(unsigned __int8 *)(v35 + 2);
            v10.i8[0] = *(_BYTE *)v35;
            v10.i8[4] = *(_BYTE *)(v35 + 1);
            *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v10.i8, v59);
          }
        }
        else
        {
          v9.i8[0] = 0;
          v9.i8[2] = 0;
          v9.i8[4] = 0;
          v9.i8[6] = 0;
        }
        v9.i32[0] &= 0xFF00FFu;
        v9.i16[2] = v9.u8[4];
        v9.i16[3] = v9.u8[6];
        v42 = vmlal_s16(v42, *(int16x4_t *)v9.i8, v8);
        goto LABEL_92;
      }
      ++v33;
      v49 = *(_DWORD *)v35;
      v35 += 4;
      v9.i32[0] = v49;
      v9.i64[0] = vmovl_u8(*(uint8x8_t *)v9.i8).u64[0];
      v42 = vmlal_s16(v42, *(int16x4_t *)v9.i8, v8);
      v50 = __OFSUB__(v47, 4);
      v47 -= 4;
      if ((v47 < 0) ^ v50 | (v47 == 0))
        goto LABEL_92;
    }
  }
  return result;
}

int *resample_horizontal<unsigned short,int,1,false>(int *result, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  int16x8_t v8;
  int16x8_t v9;
  int16x4_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint16x8_t v22;
  unsigned int v23;
  int8x16_t v24;
  uint64_t v25;
  _BOOL4 v27;
  uint64_t v28;
  int8x16_t v29;
  int8x16_t v30;
  _DWORD *v31;
  unint64_t v32;
  int *v33;
  int8x16_t *v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int v37;
  unint64_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int32x4_t v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int16x8_t *v49;
  unint64_t v50;
  int8x16_t *v51;
  int32x4_t v52;
  uint64_t v53;
  int32x4_t v54;
  unint64_t v55;
  int8x16_t v56;
  int16x4_t v57;
  int16x4_t v58;
  __int32 v59;
  int v60;
  unsigned int v61;
  unint64_t v62;
  unsigned int v63;
  BOOL v64;
  int16x4_t v65;
  int16x4_t v66;
  int16x4_t v67;
  int16x4_t v68;
  __int32 v69;
  int32x4_t v70;

  if ((int)a4 >= 1 && a8 >= 1)
  {
    v11 = 0;
    v12 = *a6;
    v13 = *a7;
    v14 = v13 >> 1;
    v15 = 2 * a2;
    v16 = v15 + 8;
    v17 = (char *)result + (v15 + 8) * a4;
    if (v13 >> 1 >= *(int *)&v17[-v15 - 4] + (uint64_t)*(int *)&v17[-v15 - 8])
      v14 = *(int *)&v17[-v15 - 4] + (uint64_t)*(int *)&v17[-v15 - 8];
    if (a2 <= 3)
      v18 = (2 * a2 + 23) / (2 * a2 + 8);
    else
      v18 = 1;
    v19 = a2 > 7;
    v20 = a2 & 7;
    if ((a2 & 7) != 0)
      v19 = 0;
    else
      v20 = 8;
    v21 = ((2 * (_BYTE)v20 + 15) & 0x30) + 2 * ((a2 + 8 * (v19 << 31 >> 31)) & 0xFFFFFFF8);
    v22 = (uint16x8_t)vdupq_n_s16(v20);
    if (a2 >= 8)
      v23 = 8;
    else
      v23 = a2;
    v24 = (int8x16_t)vcgtq_u16((uint16x8_t)vdupq_n_s16(v23), (uint16x8_t)xmmword_185004910);
    v25 = a8;
    v27 = a2 == (__int16)a2 && a4 > v18;
    if (a4 - v18 <= 1)
      v28 = 1;
    else
      v28 = a4 - v18;
    v29.i64[0] = 0x8000800080008000;
    v29.i64[1] = 0x8000800080008000;
    v30 = (int8x16_t)vcgtq_u16(v22, (uint16x8_t)xmmword_185004910);
    do
    {
      v31 = *(_DWORD **)(a5 + 8 * v11);
      v32 = 0;
      if (v27)
      {
        v33 = result;
        while (1)
        {
          v34 = (int8x16_t *)(v12 + 2 * *v33);
          v35 = (int8x16_t *)((char *)v34 + v21);
          if ((unint64_t)v34->u64 + v21 > 2 * v14 + v12)
            break;
          if (v34 >= v35)
          {
            v39 = 0uLL;
            v40 = 0uLL;
          }
          else
          {
            v36 = (int8x16_t *)(v33 + 2);
            v37 = v33[1];
            v38 = (unint64_t)&v35[-1];
            v39 = 0uLL;
            v40 = 0uLL;
            while ((unint64_t)v34 < v38)
            {
              v41 = *v36++;
              v42 = v41;
              v43 = *v34++;
              v8 = (int16x8_t)vandq_s8(v42, v24);
              v9 = (int16x8_t)veorq_s8(v43, v29);
              v40 = vmlal_high_s16(v40, v9, v8);
              v39 = vmlal_s16(v39, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
              v37 -= 8;
            }
            if (v37 >= 1)
            {
              v8 = (int16x8_t)vandq_s8(*v36, v30);
              v9 = (int16x8_t)veorq_s8(*v34, v29);
              v40 = vmlal_high_s16(v40, v9, v8);
              v39 = vmlal_s16(v39, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
            }
          }
          v44 = vaddq_s32(v39, v40);
          v44.i32[0] = (vaddvq_s32(v44) + 536879104) >> 14;
          *v31++ = vmax_s32(vmin_s32(*(int32x2_t *)v44.i8, (int32x2_t)0xFFFF0000FFFFLL), 0).u32[0];
          ++v32;
          v33 = (int *)((char *)v33 + v16);
          if (v32 == v28)
          {
            v32 = v28;
            break;
          }
        }
      }
      else
      {
        v33 = result;
      }
      if (v32 < a4)
      {
        do
        {
          v45 = *v33;
          if ((int)v45 >= (int)v14)
            v46 = v14;
          else
            v46 = *v33;
          v47 = v14 - v46;
          if (v33[1] >= v47)
            v48 = v47;
          else
            v48 = v33[1];
          if (v48 < 1)
          {
            v52 = 0uLL;
            v54 = 0uLL;
          }
          else
          {
            v49 = (int16x8_t *)(v12 + 2 * v45);
            v50 = (unint64_t)&v49[-1] + 2 * v48;
            v51 = (int8x16_t *)(v33 + 2);
            v52 = 0uLL;
            if ((unint64_t)v49 >= v50)
            {
              LODWORD(v53) = v48;
              v54 = 0uLL;
LABEL_77:
              v60 = (_DWORD)v53 << 16;
              v61 = v53;
              while (2)
              {
                v62 = v17 - (char *)v51;
                if ((unint64_t)(v17 - (char *)v51) >= 0x10)
                  v62 = 16;
                if (v62 < 0x10)
                {
                  if (v61 >= 4)
                  {
                    if (v61 == 4)
                    {
                      v9.i16[0] = 0;
                      v9.i8[2] = 0;
                      v9.i8[3] = 0;
                      v9.i8[4] = 0;
                      v9.i8[5] = 0;
                      v9.i8[6] = 0;
                      v9.i8[7] = 0;
                    }
                    else if (v61 == 5)
                    {
                      v9.i16[0] = v51->i16[4];
                    }
                    else
                    {
                      if (v61 == 6)
                      {
                        v66 = 0;
                      }
                      else
                      {
                        if ((v53 & 1) != 0)
                          v69 = 0;
                        else
                          v69 = v51->u16[7];
                        v66.i32[0] = v51->u16[6];
                        v66.i32[1] = v69;
                      }
                      v9.i16[0] = v51->i16[4];
                      v9.i16[2] = v51->i16[5];
                      *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v66);
                    }
                    v8.i64[0] = v51->i64[0];
                    v8.i64[1] = v9.i64[0];
                    goto LABEL_84;
                  }
                  if (v61 == 1)
                  {
                    v8.i16[0] = v51->i16[0];
                  }
                  else
                  {
                    if (v61 == 2)
                      v65 = 0;
                    else
                      v65 = (int16x4_t)v51->u16[2];
                    v9.i16[0] = v51->i16[0];
                    v9.i16[2] = v51->i16[1];
                    *(int16x4_t *)v8.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v65);
                  }
                  v8.i64[1] = 0;
                  ++v51;
                }
                else
                {
                  v63 = v60 >> 16;
                  if (v60 >> 16 >= 8)
                    v63 = 8;
                  v9 = *(int16x8_t *)v51;
                  v8 = (int16x8_t)vandq_s8(*v51, (int8x16_t)vcgtq_s16(vdupq_n_s16(v63), (int16x8_t)xmmword_185004910));
LABEL_84:
                  ++v51;
                  if (v61 >= 8)
                  {
                    v9 = *v49;
                    goto LABEL_86;
                  }
                  if (v61 >= 4)
                  {
                    if (v61 == 4)
                    {
                      v10 = 0;
                    }
                    else if (v61 == 5)
                    {
                      v10.i16[0] = v49->i16[4];
                    }
                    else
                    {
                      if (v61 == 6)
                        v68 = 0;
                      else
                        v68 = (int16x4_t)v49->u16[6];
                      v10.i16[0] = v49->i16[4];
                      v10.i16[2] = v49->i16[5];
                      v10 = vuzp1_s16(v10, v68);
                    }
                    v9.i64[0] = v49->i64[0];
                    v9.u64[1] = (unint64_t)v10;
                    goto LABEL_86;
                  }
                }
                if (v61 == 1)
                {
                  v9.i16[0] = v49->i16[0];
                }
                else
                {
                  if (v61 == 2)
                    v67 = 0;
                  else
                    v67 = (int16x4_t)v49->u16[2];
                  v10.i16[0] = v49->i16[0];
                  v10.i16[2] = v49->i16[1];
                  *(int16x4_t *)v9.i8 = vuzp1_s16(v10, v67);
                }
                v9.i64[1] = 0;
LABEL_86:
                ++v49;
                v9 = (int16x8_t)veorq_s8((int8x16_t)v9, v29);
                v54 = vmlal_high_s16(v54, v9, v8);
                v52 = vmlal_s16(v52, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
                v60 -= 0x80000;
                v64 = __OFSUB__(v61, 8);
                v61 -= 8;
                if (((v61 & 0x80000000) != 0) ^ v64 | (v61 == 0))
                  goto LABEL_126;
                continue;
              }
            }
            v53 = v48;
            v54 = 0uLL;
            do
            {
              v55 = v17 - (char *)v51;
              if ((unint64_t)(v17 - (char *)v51) >= 0x10)
                v55 = 16;
              if (v55 < 0x10)
              {
                if ((_DWORD)v53)
                {
                  if (v53 < 4)
                  {
                    if (v53 == 1)
                    {
                      v8.i16[0] = v51->i16[0];
                    }
                    else
                    {
                      if ((_DWORD)v53 == 2)
                        v57 = 0;
                      else
                        v57 = (int16x4_t)v51->u16[2];
                      v9.i16[0] = v51->i16[0];
                      v9.i16[2] = v51->i16[1];
                      *(int16x4_t *)v8.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v57);
                    }
                    v8.i64[1] = 0;
                  }
                  else
                  {
                    if (v53 == 4)
                    {
                      v9.i16[0] = 0;
                      v9.i8[2] = 0;
                      v9.i8[3] = 0;
                      v9.i8[4] = 0;
                      v9.i8[5] = 0;
                      v9.i8[6] = 0;
                      v9.i8[7] = 0;
                    }
                    else if (v53 == 5)
                    {
                      v9.i16[0] = v51->i16[4];
                    }
                    else
                    {
                      if ((_DWORD)v53 == 6)
                      {
                        v58 = 0;
                      }
                      else
                      {
                        if ((v48 & 1) != 0)
                          v59 = 0;
                        else
                          v59 = v51->u16[7];
                        v58.i32[0] = v51->u16[6];
                        v58.i32[1] = v59;
                      }
                      v9.i16[0] = v51->i16[4];
                      v9.i16[2] = v51->i16[5];
                      *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v58);
                    }
                    v8.i64[0] = v51->i64[0];
                    v8.i64[1] = v9.i64[0];
                  }
                }
                else
                {
                  v8 = 0uLL;
                }
              }
              else
              {
                v8 = (int16x8_t)vandq_s8(*v51, v24);
              }
              v56 = *(int8x16_t *)v49++;
              ++v51;
              v9 = (int16x8_t)veorq_s8(v56, v29);
              v54 = vmlal_high_s16(v54, v9, v8);
              v52 = vmlal_s16(v52, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
              v53 -= 8;
            }
            while ((unint64_t)v49 < v50);
            if ((int)v53 >= 1)
              goto LABEL_77;
          }
LABEL_126:
          v70 = vaddq_s32(v52, v54);
          v70.i32[0] = (vaddvq_s32(v70) + 536879104) >> 14;
          *v31++ = vmax_s32(vmin_s32(*(int32x2_t *)v70.i8, (int32x2_t)0xFFFF0000FFFFLL), 0).u32[0];
          ++v32;
          v33 = (int *)((char *)v33 + v16);
        }
        while (v32 != a4);
      }
      v12 += v13;
      ++v11;
    }
    while (v11 != v25);
  }
  return result;
}

int *resample_horizontal<unsigned short,int,3,false>(int *result, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  _BOOL4 v19;
  unsigned int v20;
  uint64_t v21;
  int16x8_t v22;
  unsigned int v23;
  uint64_t v24;
  int8x16_t v25;
  uint64_t v26;
  BOOL v27;
  char v28;
  uint64_t v29;
  int8x16_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int8x16_t v33;
  uint64_t v34;
  unint64_t v35;
  int *v36;
  int8x16_t *v37;
  int8x16_t *v38;
  int8x16_t *v39;
  int v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int8x16_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int32x4_t v54;
  int8x16_t v55;
  int32x4_t v56;
  int v57;
  int v58;
  uint64_t v59;
  int8x16_t *v60;
  unint64_t v61;
  int8x16_t *v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  unint64_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int16x8_t v70;
  int16x4_t v71;
  int16x4_t v72;
  __int32 v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  unint64_t v80;
  unsigned int v81;
  int8x16_t v82;
  int8x16_t v83;
  int16x8_t v84;
  int16x4_t v85;
  __int32 v86;
  uint64_t v87;
  int16x4_t v88;
  __int16 v89;
  __int16 v90;
  unsigned __int16 v91;
  int16x4_t v92;
  int16x4_t v93;
  __int16 v94;
  int32x4_t v95;
  int8x16_t v96;
  int32x4_t v97;

  if ((int)a4 >= 1 && a8 >= 1)
  {
    v11 = 0;
    v12 = *a6;
    v13 = *a7;
    v14 = 2 * a2 + 8;
    v15 = (char *)result + v14 * a4;
    v16 = *(int *)&v15[-v14 + 4] + (uint64_t)*(int *)&v15[-v14];
    if (v13 / 6 < v16)
      v16 = v13 / 6;
    v17 = 1;
    if (a2 <= 3)
      v17 = (2 * a2 + 23) / (2 * a2 + 8);
    v18 = a2 % 5;
    v19 = a2 > 4;
    if (a2 % 5)
      v19 = 0;
    else
      v18 = 5;
    v20 = 15 * (a2 / 5 - v19);
    v21 = (6 * v18 + 31) & 0x3FFFFFFE0;
    v22 = vdupq_n_s16(v18);
    if (a2 >= 5)
      v23 = 5;
    else
      v23 = a2;
    v24 = v21 + 2 * v20;
    v25 = (int8x16_t)vcgtq_u16((uint16x8_t)vdupq_n_s16(v23), (uint16x8_t)xmmword_185004910);
    v26 = a8;
    v27 = a2 == (__int16)a2 && a4 > v17;
    v28 = !v27;
    if (a4 - v17 <= 1)
      v29 = 1;
    else
      v29 = a4 - v17;
    v30.i64[0] = 0x8000800080008000;
    v30.i64[1] = 0x8000800080008000;
    v31.i64[0] = 0x2000200020002000;
    v31.i64[1] = 0x2000200020002000;
    v32.i64[0] = 0xFFFF0000FFFFLL;
    v32.i64[1] = 0xFFFF0000FFFFLL;
    v33 = (int8x16_t)vcgtq_s16(v22, (int16x8_t)xmmword_185004910);
    do
    {
      v34 = *(_QWORD *)(a5 + 8 * v11);
      v35 = 0;
      if ((v28 & 1) != 0)
      {
        v36 = result;
      }
      else
      {
        v36 = result;
        while (1)
        {
          v37 = (int8x16_t *)(v12 + 6 * *v36);
          v38 = (int8x16_t *)((char *)v37 + v24);
          if ((unint64_t)v37->u64 + v24 > 6 * v16 + v12)
            break;
          if (v37 >= v38)
          {
            v41 = 0uLL;
            v42 = 0uLL;
            v43 = 0uLL;
            v44 = 0uLL;
          }
          else
          {
            v39 = (int8x16_t *)(v36 + 2);
            v40 = v36[1];
            v41 = 0uLL;
            v42 = 0uLL;
            v43 = 0uLL;
            v44 = 0uLL;
            while (v37 < &v38[-2])
            {
              v45 = *v39;
              v39 = (int8x16_t *)((char *)v39 + 10);
              v46 = vandq_s8(v45, v25);
              v47 = *v37;
              v48 = v37[1];
              v37 = (int8x16_t *)((char *)v37 + 30);
              v10 = (int16x8_t)veorq_s8(v48, v30);
              v9 = (int16x8_t)veorq_s8(v47, v30);
              v49 = (int16x8_t)vqtbl1q_s8(v46, (int8x16_t)xmmword_185004920);
              v50 = (int16x8_t)vqtbl1q_s8(v46, (int8x16_t)xmmword_185004930);
              v44 = vmlal_high_s16(v44, v10, v49);
              v42 = vmlal_high_s16(v42, v9, v50);
              v43 = vmlal_s16(v43, *(int16x4_t *)v10.i8, *(int16x4_t *)v49.i8);
              v41 = vmlal_s16(v41, *(int16x4_t *)v9.i8, *(int16x4_t *)v50.i8);
              v40 -= 5;
            }
            if (v40 >= 1)
            {
              v51 = vandq_s8(*v39, v33);
              v10 = (int16x8_t)veorq_s8(v37[1], v30);
              v9 = (int16x8_t)veorq_s8(*v37, v30);
              v52 = (int16x8_t)vqtbl1q_s8(v51, (int8x16_t)xmmword_185004920);
              v53 = (int16x8_t)vqtbl1q_s8(v51, (int8x16_t)xmmword_185004930);
              v44 = vmlal_high_s16(v44, v10, v52);
              v42 = vmlal_high_s16(v42, v9, v53);
              v43 = vmlal_s16(v43, *(int16x4_t *)v10.i8, *(int16x4_t *)v52.i8);
              v41 = vmlal_s16(v41, *(int16x4_t *)v9.i8, *(int16x4_t *)v53.i8);
            }
          }
          v8 = (int16x8_t)vextq_s8((int8x16_t)v43, (int8x16_t)v44, 4uLL);
          v54 = vaddq_s32((int32x4_t)v8, v41);
          v55 = (int8x16_t)vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v44, (int8x16_t)v44, 4uLL).u64[0], v42);
          v56 = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddq_s32(v54, (int32x4_t)vextq_s8((int8x16_t)v54, v55, 0xCuLL)), vaddq_s32((int32x4_t)vextq_s8(v55, (int8x16_t)v43, 8uLL), v31)), 0xEuLL), v32), (int32x4_t)0);
          *(_QWORD *)v34 = v56.i64[0];
          *(_DWORD *)(v34 + 8) = v56.i32[2];
          v34 += 12;
          ++v35;
          v36 = (int *)((char *)v36 + v14);
          if (v35 == v29)
          {
            v35 = v29;
            break;
          }
        }
      }
      if (v35 < a4)
      {
        do
        {
          if (*v36 >= (int)v16)
            v57 = v16;
          else
            v57 = *v36;
          v58 = v16 - v57;
          if (v36[1] >= v58)
            LODWORD(v59) = v58;
          else
            LODWORD(v59) = v36[1];
          if ((int)v59 < 1)
          {
            v63 = 0uLL;
            v64 = 0uLL;
            v65 = 0uLL;
            v66 = 0uLL;
          }
          else
          {
            v60 = (int8x16_t *)(v12 + 6 * *v36);
            v61 = (unint64_t)&v60[-2] + 6 * (int)v59;
            v62 = (int8x16_t *)(v36 + 2);
            if ((unint64_t)v60 >= v61)
            {
              v63 = 0uLL;
              v64 = 0uLL;
              v65 = 0uLL;
              v66 = 0uLL;
LABEL_76:
              v74 = 0;
              v75 = v59;
              v76 = 3 * v59;
              v77 = (_DWORD)v59 << 16;
              v78 = 3 * v59;
              while (2)
              {
                v79 = v76 + v74;
                v80 = v15 - (char *)v62;
                if ((unint64_t)(v15 - (char *)v62) >= 0x10)
                  v80 = 16;
                if (v80 < 0x10)
                {
                  if (v75 >= 4)
                  {
                    if ((_DWORD)v75 == 4)
                    {
                      v9.i16[0] = 0;
                      v9.i8[2] = 0;
                      v9.i8[3] = 0;
                      v9.i8[4] = 0;
                      v9.i8[5] = 0;
                      v9.i8[6] = 0;
                      v9.i8[7] = 0;
                    }
                    else if ((_DWORD)v75 == 5)
                    {
                      v9.i16[0] = v62->i16[4];
                    }
                    else
                    {
                      if (v79 == 18)
                      {
                        v93 = 0;
                      }
                      else
                      {
                        if ((v75 & 1) != 0)
                          v86 = 0;
                        else
                          v86 = v62->u16[7];
                        v93.i32[0] = v62->u16[6];
                        v93.i32[1] = v86;
                      }
                      v9.i16[0] = v62->i16[4];
                      v9.i16[2] = v62->i16[5];
                      *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v93);
                    }
                    v8.i64[0] = v62->i64[0];
                    v8.i64[1] = v9.i64[0];
                    goto LABEL_83;
                  }
                  if (v79 == 3)
                  {
                    v8.i16[0] = v62->i16[0];
                  }
                  else
                  {
                    if (v76 + v74 == 6)
                      v85 = 0;
                    else
                      v85 = (int16x4_t)v62->u16[2];
                    v9.i16[0] = v62->i16[0];
                    v9.i16[2] = v62->i16[1];
                    *(int16x4_t *)v8.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v85);
                  }
                  v8.i64[1] = 0;
                  v62 = (int8x16_t *)((char *)v62 + 10);
                }
                else
                {
                  v81 = v77 >> 16;
                  if (v77 >> 16 >= 8)
                    v81 = 8;
                  v9 = *(int16x8_t *)v62;
                  v8 = (int16x8_t)vandq_s8(*v62, (int8x16_t)vcgtq_s16(vdupq_n_s16(v81), (int16x8_t)xmmword_185004910));
LABEL_83:
                  v62 = (int8x16_t *)((char *)v62 + 10);
                  if (v75 >= 6)
                  {
                    v82 = v60[1];
                    goto LABEL_85;
                  }
                }
                v87 = v76 + v74;
                if ((v78 + v74) < 8)
                {
                  if ((v78 + v74) < 4)
                  {
                    if (v87)
                    {
                      if (v87 == 1)
                      {
                        v88 = 0;
                        v9.i8[2] = 0;
                        v9.i8[3] = 0;
                        v9.i8[4] = 0;
                        v9.i8[5] = 0;
                        v9.i8[6] = 0;
                        v9.i8[7] = 0;
                        v9.i16[0] = v60->i16[0];
                      }
                      else
                      {
                        v9.i16[0] = v60->i16[0];
                        v9.i16[2] = v60->i16[1];
                        v88 = (int16x4_t)v60->u16[2];
                      }
                      *(int16x4_t *)v83.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v88);
                    }
                    else
                    {
                      v83.i64[0] = 0;
                    }
                    v83.i64[1] = 0;
                  }
                  else
                  {
                    if (v87 == 4)
                    {
                      v9.i16[0] = 0;
                      v9.i8[2] = 0;
                      v9.i8[3] = 0;
                      v9.i8[4] = 0;
                      v9.i8[5] = 0;
                      v9.i8[6] = 0;
                      v9.i8[7] = 0;
                    }
                    else if (v87 == 5)
                    {
                      v9.i16[0] = v60->i16[4];
                    }
                    else
                    {
                      if (v76 + v74 == 6)
                        v92 = 0;
                      else
                        v92 = (int16x4_t)v60->u16[6];
                      v10.i16[0] = v60->i16[4];
                      v10.i16[2] = v60->i16[5];
                      *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v10.i8, v92);
                    }
                    v83.i64[0] = v60->i64[0];
                    v83.i64[1] = v9.i64[0];
                  }
                  v82 = 0uLL;
                }
                else
                {
                  if (v87 == 8)
                  {
                    v82 = 0uLL;
                  }
                  else if ((unint64_t)(v87 - 8) < 4)
                  {
                    if (v79 == 9)
                    {
                      v91 = 0;
                      v90 = 0;
                      v89 = v60[1].i16[0];
                    }
                    else
                    {
                      v89 = v60[1].i16[0];
                      v90 = v60[1].i16[1];
                      v91 = v60[1].u16[2];
                    }
                    v82.i32[3] = 0;
                    v82.i16[0] = v89;
                    v82.i16[1] = v90;
                    *(uint64_t *)((char *)v82.i64 + 4) = v91;
                  }
                  else
                  {
                    if (v87 == 12)
                    {
                      v10.i16[0] = 0;
                      v10.i8[2] = 0;
                      v10.i8[3] = 0;
                      v10.i8[4] = 0;
                      v10.i8[5] = 0;
                      v10.i8[6] = 0;
                      v10.i8[7] = 0;
                    }
                    else if (v87 == 13)
                    {
                      v10.i16[0] = v60[1].i16[4];
                    }
                    else
                    {
                      if ((v87 & 1) != 0)
                        v94 = 0;
                      else
                        v94 = v60[1].i16[7];
                      v10.i32[0] = v60[1].i32[2];
                      v10.i16[2] = v60[1].i16[6];
                      v10.i16[3] = v94;
                    }
                    v82.i64[0] = v60[1].i64[0];
                    v82.i64[1] = v10.i64[0];
                  }
LABEL_85:
                  v83 = *v60;
                }
                v60 = (int8x16_t *)((char *)v60 + 30);
                v10 = (int16x8_t)veorq_s8(v83, v30);
                v84 = (int16x8_t)vqtbl1q_s8((int8x16_t)v8, (int8x16_t)xmmword_185004920);
                v8 = (int16x8_t)vqtbl1q_s8((int8x16_t)v8, (int8x16_t)xmmword_185004930);
                v9 = (int16x8_t)veorq_s8(v82, v30);
                v64 = vmlal_high_s16(v64, v10, v8);
                v66 = vmlal_high_s16(v66, v9, v84);
                v65 = vmlal_s16(v65, *(int16x4_t *)v9.i8, *(int16x4_t *)v84.i8);
                v63 = vmlal_s16(v63, *(int16x4_t *)v10.i8, *(int16x4_t *)v8.i8);
                v74 -= 15;
                v77 -= 327680;
                v27 = (uint64_t)v75 <= 5;
                v75 -= 5;
                if (v27)
                  goto LABEL_145;
                continue;
              }
            }
            v59 = (int)v59;
            v63 = 0uLL;
            v64 = 0uLL;
            v65 = 0uLL;
            v66 = 0uLL;
            do
            {
              v67 = v15 - (char *)v62;
              if ((unint64_t)(v15 - (char *)v62) >= 0x10)
                v67 = 16;
              if (v67 < 0x10)
              {
                if ((_DWORD)v59)
                {
                  if (v59 < 4)
                  {
                    if (v59 == 1)
                    {
                      v8.i16[0] = v62->i16[0];
                    }
                    else
                    {
                      if ((_DWORD)v59 == 2)
                        v71 = 0;
                      else
                        v71 = (int16x4_t)v62->u16[2];
                      v9.i16[0] = v62->i16[0];
                      v9.i16[2] = v62->i16[1];
                      *(int16x4_t *)v8.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v71);
                    }
                    v8.i64[1] = 0;
                  }
                  else
                  {
                    if (v59 == 4)
                    {
                      v9.i16[0] = 0;
                      v9.i8[2] = 0;
                      v9.i8[3] = 0;
                      v9.i8[4] = 0;
                      v9.i8[5] = 0;
                      v9.i8[6] = 0;
                      v9.i8[7] = 0;
                    }
                    else if (v59 == 5)
                    {
                      v9.i16[0] = v62->i16[4];
                    }
                    else
                    {
                      if ((_DWORD)v59 == 6)
                      {
                        v72 = 0;
                      }
                      else
                      {
                        if ((v59 & 1) != 0)
                          v73 = 0;
                        else
                          v73 = v62->u16[7];
                        v72.i32[0] = v62->u16[6];
                        v72.i32[1] = v73;
                      }
                      v9.i16[0] = v62->i16[4];
                      v9.i16[2] = v62->i16[5];
                      *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v72);
                    }
                    v8.i64[0] = v62->i64[0];
                    v8.i64[1] = v9.i64[0];
                  }
                }
                else
                {
                  v8 = 0uLL;
                }
              }
              else
              {
                v8 = (int16x8_t)vandq_s8(*v62, v25);
              }
              v62 = (int8x16_t *)((char *)v62 + 10);
              v68 = *v60;
              v69 = v60[1];
              v60 = (int8x16_t *)((char *)v60 + 30);
              v10 = (int16x8_t)veorq_s8(v69, v30);
              v9 = (int16x8_t)veorq_s8(v68, v30);
              v70 = (int16x8_t)vqtbl1q_s8((int8x16_t)v8, (int8x16_t)xmmword_185004920);
              v8 = (int16x8_t)vqtbl1q_s8((int8x16_t)v8, (int8x16_t)xmmword_185004930);
              v64 = vmlal_high_s16(v64, v9, v8);
              v66 = vmlal_high_s16(v66, v10, v70);
              v65 = vmlal_s16(v65, *(int16x4_t *)v10.i8, *(int16x4_t *)v70.i8);
              v63 = vmlal_s16(v63, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
              v59 -= 5;
            }
            while ((unint64_t)v60 < v61);
            if ((int)v59 >= 1)
              goto LABEL_76;
          }
LABEL_145:
          v8 = (int16x8_t)vextq_s8((int8x16_t)v65, (int8x16_t)v66, 4uLL);
          v95 = vaddq_s32((int32x4_t)v8, v63);
          v96 = (int8x16_t)vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v66, (int8x16_t)v66, 4uLL).u64[0], v64);
          v97 = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v95, v96, 0xCuLL), v95), vaddq_s32((int32x4_t)vextq_s8(v96, (int8x16_t)v65, 8uLL), v31)), 0xEuLL), v32), (int32x4_t)0);
          *(_QWORD *)v34 = v97.i64[0];
          *(_DWORD *)(v34 + 8) = v97.i32[2];
          v34 += 12;
          ++v35;
          v36 = (int *)((char *)v36 + v14);
        }
        while (v35 != a4);
      }
      v12 += v13;
      ++v11;
    }
    while (v11 != v26);
  }
  return result;
}

int16x4_t *resample_horizontal<unsigned short,int,4,false>(int16x4_t *result, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  int16x4_t v8;
  int16x8_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _BOOL4 v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v22;
  int8x16_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t *v26;
  unint64_t v27;
  int16x4_t *v28;
  int v29;
  uint64_t v30;
  __int32 v31;
  int v32;
  int8x16_t *v33;
  unint64_t v34;
  __int16 *v35;
  uint64_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  unint64_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int16x8_t v44;
  int16x4_t v45;
  __int32 v46;
  int v47;
  unint64_t v48;
  int8x16_t v49;
  int16x8_t v50;
  BOOL v51;
  __int16 v52;
  uint64_t v53;
  int16x4_t v54;
  __int32 v55;
  int8x16_t *v56;
  int8x16_t *v57;
  int16x4_t *v58;
  int v59;
  unint64_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int16x4_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int16x8_t v68;
  int16x8_t v69;

  if ((int)a4 >= 1 && a8 >= 1)
  {
    v10 = 0;
    v11 = *a6;
    v12 = *a7;
    v13 = v12 >> 3;
    v14 = 2 * a2 + 8;
    v15 = (char *)result + v14 * a4;
    if (v12 >> 3 >= *(int *)&v15[-v14 + 4] + (uint64_t)*(int *)&v15[-v14])
      v13 = *(int *)&v15[-v14 + 4] + (uint64_t)*(int *)&v15[-v14];
    v16 = a2 > 3;
    LODWORD(v17) = (8 * (a2 & 3)) | 0x20;
    if ((a2 & 3) != 0)
      v17 = v17;
    else
      v17 = 64;
    if ((a2 & 3) != 0)
      v16 = 0;
    v18 = ((v17 - 1) & 0xFFFFFFFFFFFFFFE0) + 32 * ((a2 >> 2) - v16);
    v19 = a8;
    v22 = a2 != (__int16)a2 || a4 < 2 || a4 == 1;
    v23.i64[0] = 0x8000800080008000;
    v23.i64[1] = 0x8000800080008000;
    v24.i64[0] = 0x2000200020002000;
    v24.i64[1] = 0x2000200020002000;
    v25.i64[0] = 0xFFFF0000FFFFLL;
    v25.i64[1] = 0xFFFF0000FFFFLL;
    do
    {
      v26 = *(int32x4_t **)(a5 + 8 * v10);
      v27 = 0;
      if (v22)
      {
        v28 = result;
      }
      else
      {
        v28 = result;
        do
        {
          v56 = (int8x16_t *)(v11 + 8 * v28->i32[0]);
          v57 = (int8x16_t *)((char *)v56 + v18);
          if ((unint64_t)v56->u64 + v18 > 8 * v13 + v11)
            break;
          if (v56 >= v57)
          {
            v61 = 0uLL;
            v62 = 0uLL;
            v63 = 0uLL;
            v64 = 0uLL;
          }
          else
          {
            v58 = v28 + 1;
            v59 = v28->i32[1];
            v60 = (unint64_t)&v57[-2];
            v61 = 0uLL;
            v62 = 0uLL;
            v63 = 0uLL;
            v64 = 0uLL;
            while ((unint64_t)v56 < v60)
            {
              v65 = *v58++;
              v8 = v65;
              v66 = *v56;
              v67 = v56[1];
              v56 += 2;
              v9 = (int16x8_t)veorq_s8(v67, v23);
              v68 = (int16x8_t)veorq_s8(v66, v23);
              v61 = vmlal_lane_s16(v61, *(int16x4_t *)v68.i8, v65, 0);
              v62 = vmlal_high_lane_s16(v62, v68, v65, 1);
              v63 = vmlal_lane_s16(v63, *(int16x4_t *)v9.i8, v65, 2);
              v64 = vmlal_high_lane_s16(v64, v9, v65, 3);
              v59 -= 4;
            }
            if (v59 >= 1)
            {
              v8 = *v58;
              v9 = (int16x8_t)veorq_s8(v56[1], v23);
              v69 = (int16x8_t)veorq_s8(*v56, v23);
              v61 = vmlal_lane_s16(v61, *(int16x4_t *)v69.i8, *v58, 0);
              v62 = vmlal_high_lane_s16(v62, v69, *v58, 1);
              v63 = vmlal_lane_s16(v63, *(int16x4_t *)v9.i8, *v58, 2);
              v64 = vmlal_high_lane_s16(v64, v9, *v58, 3);
            }
          }
          *v26++ = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddq_s32(vaddq_s32(v62, v64), vaddq_s32(v61, v63)), v24), 0xEuLL), v25), (int32x4_t)0);
          ++v27;
          v28 = (int16x4_t *)((char *)v28 + v14);
          if (a4 < 2)
            break;
        }
        while ((unint64_t)a4 - 1 > v27);
      }
      if (v27 < a4)
      {
        do
        {
          v29 = v28->i32[1];
          v30 = v28->i32[0];
          if ((int)v30 >= (int)v13)
            v31 = v13;
          else
            v31 = v28->i32[0];
          v32 = v13 - v31;
          if (v29 >= v32)
            v29 = v32;
          if (v29 < 1)
          {
            v37 = 0uLL;
            v38 = 0uLL;
            v39 = 0uLL;
            v40 = 0uLL;
          }
          else
          {
            v33 = (int8x16_t *)(v11 + 8 * v30);
            v34 = (unint64_t)&v33[-2] + 8 * v29;
            v35 = (__int16 *)&v28[1];
            if ((unint64_t)v33 >= v34)
            {
              v37 = 0uLL;
              v38 = 0uLL;
              v39 = 0uLL;
              v40 = 0uLL;
              goto LABEL_51;
            }
            v36 = v29;
            v37 = 0uLL;
            v38 = 0uLL;
            v39 = 0uLL;
            v40 = 0uLL;
            do
            {
              v41 = v15 - (char *)v35;
              if ((unint64_t)(v15 - (char *)v35) >= 8)
                v41 = 8;
              if (v41 < 8)
              {
                if (v36)
                {
                  if (v36 == 1)
                  {
                    v8.i16[0] = *v35;
                  }
                  else
                  {
                    if ((_DWORD)v36 == 2)
                    {
                      v45 = 0;
                    }
                    else
                    {
                      if ((v29 & 1) != 0)
                        v46 = 0;
                      else
                        v46 = (unsigned __int16)v35[3];
                      v45.i32[0] = (unsigned __int16)v35[2];
                      v45.i32[1] = v46;
                    }
                    v9.i16[0] = *v35;
                    v9.i16[2] = v35[1];
                    v8 = vuzp1_s16(*(int16x4_t *)v9.i8, v45);
                  }
                }
                else
                {
                  v8 = 0;
                }
              }
              else
              {
                v8 = *(int16x4_t *)v35;
              }
              v35 += 4;
              v42 = *v33;
              v43 = v33[1];
              v33 += 2;
              v9 = (int16x8_t)veorq_s8(v43, v23);
              v44 = (int16x8_t)veorq_s8(v42, v23);
              v37 = vmlal_lane_s16(v37, *(int16x4_t *)v44.i8, v8, 0);
              v38 = vmlal_high_lane_s16(v38, v44, v8, 1);
              v39 = vmlal_lane_s16(v39, *(int16x4_t *)v9.i8, v8, 2);
              v40 = vmlal_high_lane_s16(v40, v9, v8, 3);
              v36 -= 4;
            }
            while ((unint64_t)v33 < v34);
            if ((int)v36 >= 1)
            {
              v29 = v36;
LABEL_51:
              v47 = v29;
              while (2)
              {
                v48 = v15 - (char *)v35;
                if ((unint64_t)(v15 - (char *)v35) >= 8)
                  v48 = 8;
                if (v48 >= 8)
                {
                  v8 = *(int16x4_t *)v35;
                  goto LABEL_56;
                }
                if (v47 == 1)
                {
                  v52 = *v35;
                  v35 += 4;
                  v53 = 0;
                  v8.i8[2] = 0;
                  v8.i8[3] = 0;
                  v8.i8[4] = 0;
                  v8.i8[5] = 0;
                  v8.i8[6] = 0;
                  v8.i8[7] = 0;
                  v8.i16[0] = v52;
                  v49.i64[0] = v33->i64[0];
                  goto LABEL_64;
                }
                if (v47 == 2)
                {
                  v54 = 0;
                }
                else
                {
                  if ((v29 & 1) != 0)
                    v55 = 0;
                  else
                    v55 = (unsigned __int16)v35[3];
                  v54.i32[0] = (unsigned __int16)v35[2];
                  v54.i32[1] = v55;
                }
                v9.i16[0] = *v35;
                v9.i16[2] = v35[1];
                v8 = vuzp1_s16(*(int16x4_t *)v9.i8, v54);
LABEL_56:
                v35 += 4;
                if (v47 >= 4)
                {
                  v9 = (int16x8_t)v33[1];
                  goto LABEL_58;
                }
                if ((v47 & 0x3FFFFFFE) != 0)
                {
                  v9 = 0uLL;
                  if (v47 != 2)
                    v9.i64[0] = v33[1].i64[0];
LABEL_58:
                  v49 = *v33;
                }
                else
                {
                  v49.i64[0] = v33->i64[0];
                  if (v47 == 1)
                    v53 = 0;
                  else
                    v53 = v33->i64[1];
LABEL_64:
                  v49.i64[1] = v53;
                  v9 = 0uLL;
                }
                v33 += 2;
                v50 = (int16x8_t)veorq_s8(v49, v23);
                v37 = vmlal_lane_s16(v37, *(int16x4_t *)v50.i8, v8, 0);
                v38 = vmlal_high_lane_s16(v38, v50, v8, 1);
                v39 = vmlal_lane_s16(v39, (int16x4_t)veor_s8(*(int8x8_t *)v9.i8, (int8x8_t)0x8000800080008000), v8, 2);
                v40 = vmlal_lane_s16(v40, (int16x4_t)veor_s8((int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL), (int8x8_t)0x8000800080008000), v8, 3);
                v51 = __OFSUB__(v47, 4);
                v47 -= 4;
                if ((v47 < 0) ^ v51 | (v47 == 0))
                  break;
                continue;
              }
            }
          }
          *v26++ = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddq_s32(vaddq_s32(v38, v40), vaddq_s32(v37, v39)), v24), 0xEuLL), v25), (int32x4_t)0);
          ++v27;
          v28 = (int16x4_t *)((char *)v28 + v14);
        }
        while (v27 != a4);
      }
      v11 += v12;
      ++v10;
    }
    while (v10 != v19);
  }
  return result;
}

int *resample_horizontal<unsigned short,int,2,false>(int *result, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  _BOOL4 v20;
  unsigned int v21;
  uint64_t v22;
  uint16x8_t v23;
  unsigned int v24;
  int8x16_t v25;
  uint64_t v26;
  _BOOL4 v28;
  uint64_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int32x2_t *v32;
  unint64_t v33;
  int *v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  int v38;
  unint64_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int16x8_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int8x16_t v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  int8x16_t *v56;
  unint64_t v57;
  int8x16_t *v58;
  uint64_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  unint64_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int16x8_t v67;
  int16x4_t v68;
  int16x4_t v69;
  __int32 v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  unint64_t v75;
  unsigned int v76;
  int8x16_t v77;
  int8x16_t v78;
  int16x8_t v79;
  int16x4_t v80;
  int16x4_t v81;
  int16x4_t v82;
  __int16 v83;
  __int16 v84;
  unsigned __int16 v85;
  int16x4_t v86;
  __int32 v87;
  int8x16_t v88;

  if (a4 >= 1 && a8 >= 1)
  {
    v11 = 0;
    v12 = *a6;
    v13 = *a7;
    v14 = v13 >> 2;
    v15 = a4;
    v16 = 2 * a2;
    v17 = v16 + 8;
    v18 = (char *)result + (v16 + 8) * a4;
    if (v13 >> 2 >= *(int *)&v18[-v16 - 4] + (uint64_t)*(int *)&v18[-v16 - 8])
      v14 = *(int *)&v18[-v16 - 4] + (uint64_t)*(int *)&v18[-v16 - 8];
    if (a2 <= 3)
      v19 = (2 * a2 + 23) / (2 * a2 + 8);
    else
      v19 = 1;
    v20 = a2 > 7;
    v21 = a2 & 7;
    if ((a2 & 7) != 0)
      v20 = 0;
    else
      v21 = 8;
    v22 = ((4 * (_BYTE)v21 + 31) & 0x60) + 32 * ((a2 >> 3) - v20);
    v23 = (uint16x8_t)vdupq_n_s16(v21);
    if (a2 >= 8)
      v24 = 8;
    else
      v24 = a2;
    v25 = (int8x16_t)vcgtq_u16((uint16x8_t)vdupq_n_s16(v24), (uint16x8_t)xmmword_185004910);
    v26 = a8;
    v28 = a2 == (__int16)a2 && v15 > v19;
    if (v15 - v19 <= 1)
      v29 = 1;
    else
      v29 = v15 - v19;
    v30.i64[0] = 0x8000800080008000;
    v30.i64[1] = 0x8000800080008000;
    v31 = (int8x16_t)vcgtq_u16(v23, (uint16x8_t)xmmword_185004910);
    do
    {
      v32 = *(int32x2_t **)(a5 + 8 * v11);
      v33 = 0;
      if (v28)
      {
        v34 = result;
        while (1)
        {
          v35 = (int8x16_t *)(v12 + 4 * *v34);
          v36 = (int8x16_t *)((char *)v35 + v22);
          if ((unint64_t)v35->u64 + v22 > 4 * v14 + v12)
            break;
          if (v35 >= v36)
          {
            v40 = 0uLL;
            v41 = 0uLL;
            v42 = 0uLL;
            v43 = 0uLL;
          }
          else
          {
            v37 = (int8x16_t *)(v34 + 2);
            v38 = v34[1];
            v39 = (unint64_t)&v36[-2];
            v40 = 0uLL;
            v41 = 0uLL;
            v42 = 0uLL;
            v43 = 0uLL;
            while ((unint64_t)v35 < v39)
            {
              v44 = *v37++;
              v45 = (int16x8_t)vandq_s8(v44, v25);
              v46 = *v35;
              v47 = v35[1];
              v35 += 2;
              v10 = (int16x8_t)veorq_s8(v47, v30);
              v9 = (int16x8_t)veorq_s8(v46, v30);
              v48 = vzip2q_s16(v45, v45);
              v8 = vzip1q_s16(v45, v45);
              v43 = vmlal_high_s16(v43, v10, v48);
              v41 = vmlal_high_s16(v41, v9, v8);
              v42 = vmlal_s16(v42, *(int16x4_t *)v10.i8, *(int16x4_t *)v48.i8);
              v40 = vmlal_s16(v40, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
              v38 -= 8;
            }
            if (v38 >= 1)
            {
              v49 = (int16x8_t)vandq_s8(*v37, v31);
              v10 = (int16x8_t)veorq_s8(v35[1], v30);
              v9 = (int16x8_t)veorq_s8(*v35, v30);
              v50 = vzip2q_s16(v49, v49);
              v8 = vzip1q_s16(v49, v49);
              v43 = vmlal_high_s16(v43, v10, v50);
              v41 = vmlal_high_s16(v41, v9, v8);
              v42 = vmlal_s16(v42, *(int16x4_t *)v10.i8, *(int16x4_t *)v50.i8);
              v40 = vmlal_s16(v40, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
            }
          }
          v51 = (int8x16_t)vaddq_s32(vaddq_s32(v40, v42), vaddq_s32(v41, v43));
          *v32++ = vmax_s32(vmin_s32(vshr_n_s32(vadd_s32((int32x2_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL), vadd_s32(*(int32x2_t *)v51.i8, (int32x2_t)0x2000200020002000)), 0xEuLL), (int32x2_t)0xFFFF0000FFFFLL), 0);
          ++v33;
          v34 = (int *)((char *)v34 + v17);
          if (v33 == v29)
          {
            v33 = v29;
            break;
          }
        }
      }
      else
      {
        v34 = result;
      }
      if (v33 < v15)
      {
        do
        {
          v52 = v34[1];
          v53 = *v34;
          if ((int)v53 >= (int)v14)
            v54 = v14;
          else
            v54 = *v34;
          v55 = v14 - v54;
          if (v52 >= v55)
            v52 = v55;
          if (v52 < 1)
          {
            v60 = 0uLL;
            v61 = 0uLL;
            v62 = 0uLL;
            v63 = 0uLL;
          }
          else
          {
            v56 = (int8x16_t *)(v12 + 4 * v53);
            v57 = (unint64_t)&v56[-2] + 4 * v52;
            v58 = (int8x16_t *)(v34 + 2);
            if ((unint64_t)v56 >= v57)
            {
              v60 = 0uLL;
              v61 = 0uLL;
              v62 = 0uLL;
              v63 = 0uLL;
              goto LABEL_77;
            }
            v59 = v52;
            v60 = 0uLL;
            v61 = 0uLL;
            v62 = 0uLL;
            v63 = 0uLL;
            do
            {
              v64 = v18 - (char *)v58;
              if ((unint64_t)(v18 - (char *)v58) >= 0x10)
                v64 = 16;
              if (v64 < 0x10)
              {
                if ((_DWORD)v59)
                {
                  if (v59 < 4)
                  {
                    if (v59 == 1)
                    {
                      v8.i16[0] = v58->i16[0];
                    }
                    else
                    {
                      if ((_DWORD)v59 == 2)
                        v68 = 0;
                      else
                        v68 = (int16x4_t)v58->u16[2];
                      v9.i16[0] = v58->i16[0];
                      v9.i16[2] = v58->i16[1];
                      *(int16x4_t *)v8.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v68);
                    }
                    v8.i64[1] = 0;
                  }
                  else
                  {
                    if (v59 == 4)
                    {
                      v9.i16[0] = 0;
                      v9.i8[2] = 0;
                      v9.i8[3] = 0;
                      v9.i8[4] = 0;
                      v9.i8[5] = 0;
                      v9.i8[6] = 0;
                      v9.i8[7] = 0;
                    }
                    else if (v59 == 5)
                    {
                      v9.i16[0] = v58->i16[4];
                    }
                    else
                    {
                      if ((_DWORD)v59 == 6)
                      {
                        v69 = 0;
                      }
                      else
                      {
                        if ((v52 & 1) != 0)
                          v70 = 0;
                        else
                          v70 = v58->u16[7];
                        v69.i32[0] = v58->u16[6];
                        v69.i32[1] = v70;
                      }
                      v9.i16[0] = v58->i16[4];
                      v9.i16[2] = v58->i16[5];
                      *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v69);
                    }
                    v8.i64[0] = v58->i64[0];
                    v8.i64[1] = v9.i64[0];
                  }
                }
                else
                {
                  v8 = 0uLL;
                }
              }
              else
              {
                v8 = (int16x8_t)vandq_s8(*v58, v25);
              }
              ++v58;
              v65 = *v56;
              v66 = v56[1];
              v56 += 2;
              v10 = (int16x8_t)veorq_s8(v66, v30);
              v9 = (int16x8_t)veorq_s8(v65, v30);
              v67 = vzip2q_s16(v8, v8);
              v8 = vzip1q_s16(v8, v8);
              v61 = vmlal_high_s16(v61, v9, v8);
              v63 = vmlal_high_s16(v63, v10, v67);
              v62 = vmlal_s16(v62, *(int16x4_t *)v10.i8, *(int16x4_t *)v67.i8);
              v60 = vmlal_s16(v60, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
              v59 -= 8;
            }
            while ((unint64_t)v56 < v57);
            if ((int)v59 >= 1)
            {
              v52 = v59;
LABEL_77:
              v71 = v52 + 8;
              v72 = 2 * v52;
              v73 = v52 << 16;
              while (2)
              {
                v74 = v71 - 8;
                v75 = v18 - (char *)v58;
                if ((unint64_t)(v18 - (char *)v58) >= 0x10)
                  v75 = 16;
                if (v75 < 0x10)
                {
                  if ((unint64_t)v74 >= 4)
                  {
                    if ((_DWORD)v71 == 12)
                    {
                      v9.i16[0] = 0;
                      v9.i8[2] = 0;
                      v9.i8[3] = 0;
                      v9.i8[4] = 0;
                      v9.i8[5] = 0;
                      v9.i8[6] = 0;
                      v9.i8[7] = 0;
                    }
                    else if ((_DWORD)v71 == 13)
                    {
                      v9.i16[0] = v58->i16[4];
                    }
                    else
                    {
                      if (v71 == 14)
                      {
                        v81 = 0;
                      }
                      else
                      {
                        if ((v52 & 1) != 0)
                          v87 = 0;
                        else
                          v87 = v58->u16[7];
                        v81.i32[0] = v58->u16[6];
                        v81.i32[1] = v87;
                      }
                      v9.i16[0] = v58->i16[4];
                      v9.i16[2] = v58->i16[5];
                      *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v81);
                    }
                    v8.i64[0] = v58->i64[0];
                    v8.i64[1] = v9.i64[0];
                    goto LABEL_84;
                  }
                  if (v71 == 9)
                  {
                    v8.i16[0] = v58->i16[0];
                  }
                  else
                  {
                    if (v71 == 10)
                      v80 = 0;
                    else
                      v80 = (int16x4_t)v58->u16[2];
                    v9.i16[0] = v58->i16[0];
                    v9.i16[2] = v58->i16[1];
                    *(int16x4_t *)v8.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v80);
                  }
                  v8.i64[1] = 0;
                  ++v58;
                }
                else
                {
                  v76 = v73 >> 16;
                  if (v73 >> 16 >= 8)
                    v76 = 8;
                  v9 = *(int16x8_t *)v58;
                  v8 = (int16x8_t)vandq_s8(*v58, (int8x16_t)vcgtq_s16(vdupq_n_s16(v76), (int16x8_t)xmmword_185004910));
LABEL_84:
                  ++v58;
                  if ((unint64_t)v74 >= 8)
                  {
                    v77 = v56[1];
                    goto LABEL_86;
                  }
                }
                if (v74 < 4)
                {
                  if (v74 < 2)
                  {
                    if (v71 == 9)
                    {
                      v83 = 0;
                      v84 = 0;
                    }
                    else
                    {
                      v83 = v56->i16[2];
                      v84 = v56->i16[3];
                    }
                    v78.i64[1] = 0;
                    v78.i32[0] = v56->i32[0];
                    v78.i16[2] = v83;
                    v78.i16[3] = v84;
                  }
                  else
                  {
                    if (v71 == 10)
                    {
                      v82 = 0;
                    }
                    else
                    {
                      if (v71 == 11)
                        v86 = 0;
                      else
                        v86 = (int16x4_t)v56->u16[6];
                      v10.i16[0] = v56->i16[4];
                      v10.i16[2] = v56->i16[5];
                      v82 = vuzp1_s16(*(int16x4_t *)v10.i8, v86);
                    }
                    v78.i64[0] = v56->i64[0];
                    v78.u64[1] = (unint64_t)v82;
                  }
                  v77 = 0uLL;
                }
                else
                {
                  if ((v72 & 0xFFFFFFFE) == 8)
                  {
                    v77 = 0uLL;
                  }
                  else if ((unint64_t)(v72 & 0xFFFFFFFE) - 8 < 4)
                  {
                    if (v71 == 13)
                      v85 = 0;
                    else
                      v85 = v56[1].u16[2];
                    v77.i32[3] = 0;
                    v77.i32[0] = v56[1].i32[0];
                    *(uint64_t *)((char *)v77.i64 + 4) = v85;
                  }
                  else
                  {
                    if (v71 == 14)
                    {
                      v10.i16[0] = 0;
                      v10.i8[2] = 0;
                      v10.i8[3] = 0;
                      v10.i8[4] = 0;
                      v10.i8[5] = 0;
                      v10.i8[6] = 0;
                      v10.i8[7] = 0;
                    }
                    else
                    {
                      if (v71 == 15)
                      {
                        v9.i16[0] = 0;
                        v9.i8[2] = 0;
                        v9.i8[3] = 0;
                        v9.i8[4] = 0;
                        v9.i8[5] = 0;
                        v9.i8[6] = 0;
                        v9.i8[7] = 0;
                      }
                      else
                      {
                        v9.i16[0] = v56[1].i16[6];
                        v9.i16[2] = v56[1].i16[7];
                      }
                      v10.i16[0] = v56[1].i16[4];
                      v10.i16[2] = v56[1].i16[5];
                      *(int16x4_t *)v10.i8 = vuzp1_s16(*(int16x4_t *)v10.i8, *(int16x4_t *)v9.i8);
                    }
                    v77.i64[0] = v56[1].i64[0];
                    v77.i64[1] = v10.i64[0];
                  }
LABEL_86:
                  v78 = *v56;
                }
                v56 += 2;
                v10 = (int16x8_t)veorq_s8(v78, v30);
                v79 = vzip2q_s16(v8, v8);
                v8 = vzip1q_s16(v8, v8);
                v9 = (int16x8_t)veorq_s8(v77, v30);
                v61 = vmlal_high_s16(v61, v10, v8);
                v60 = vmlal_s16(v60, *(int16x4_t *)v10.i8, *(int16x4_t *)v8.i8);
                v63 = vmlal_high_s16(v63, v9, v79);
                v62 = vmlal_s16(v62, *(int16x4_t *)v9.i8, *(int16x4_t *)v79.i8);
                v72 -= 16;
                v73 -= 0x80000;
                v71 -= 8;
                if (v74 <= 8)
                  break;
                continue;
              }
            }
          }
          v88 = (int8x16_t)vaddq_s32(vaddq_s32(v60, v62), vaddq_s32(v61, v63));
          *v32++ = vmax_s32(vmin_s32(vshr_n_s32(vadd_s32((int32x2_t)*(_OWORD *)&vextq_s8(v88, v88, 8uLL), vadd_s32(*(int32x2_t *)v88.i8, (int32x2_t)0x2000200020002000)), 0xEuLL), (int32x2_t)0xFFFF0000FFFFLL), 0);
          ++v33;
          v34 = (int *)((char *)v34 + v17);
        }
        while (v33 != v15);
      }
      v12 += v13;
      ++v11;
    }
    while (v11 != v26);
  }
  return result;
}

int *resample_horizontal<unsigned short,int,5,false>(int *result, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  int8x16_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  _BOOL4 v20;
  int16x8_t v21;
  uint64_t v22;
  unsigned int v23;
  int8x16_t v24;
  uint64_t v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t *v33;
  unint64_t v34;
  int *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  int8x16_t *v38;
  int v39;
  unint64_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int8x16_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int8x16_t v65;
  int v66;
  int v67;
  int v68;
  int8x16_t *v69;
  unint64_t v70;
  int8x16_t *v71;
  int32x4_t v72;
  uint64_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  unint64_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x4_t v89;
  int16x4_t v90;
  __int32 v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  int v95;
  unint64_t v96;
  int v97;
  uint64_t v98;
  unint64_t v99;
  unsigned int v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  unint64_t v107;
  __int16 *v108;
  int16x4_t v109;
  __int16 *v110;
  int16x4_t v111;
  __int16 *v112;
  int16x4_t v113;
  int16x4_t v114;
  int16x4_t v115;
  int16x4_t v116;
  __int16 v117;
  __int16 v118;
  unsigned __int16 v119;
  int16x4_t v120;
  int16x4_t v121;
  int16x4_t v122;
  __int32 v123;
  int16x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  int8x16_t v128;
  unsigned int v129;
  __int32 v130;
  uint64_t v131;
  unint64_t v132;

  if ((int)a4 >= 1 && a8 >= 1)
  {
    v13 = 0;
    v14 = *a6;
    v132 = *a7;
    v15 = 2 * a2 + 8;
    v16 = (char *)result + v15 * a4;
    v17 = *(int *)&v16[-v15 + 4] + (uint64_t)*(int *)&v16[-v15];
    if (v132 / 0xA < v17)
      v17 = v132 / 0xA;
    v18 = 1;
    if (a2 <= 3)
      v18 = (2 * a2 + 23) / (2 * a2 + 8);
    v19 = a2 % 6;
    v20 = a2 > 5;
    if (a2 % 6)
      v20 = 0;
    else
      v19 = 6;
    v21 = vdupq_n_s16(v19);
    v22 = ((10 * v19 + 63) & 0x3FFFFFFC0) + 60 * (a2 / 6 - v20);
    if (a2 >= 6)
      v23 = 6;
    else
      v23 = a2;
    v24 = (int8x16_t)vcgtq_u16((uint16x8_t)vdupq_n_s16(v23), (uint16x8_t)xmmword_185004910);
    v25 = a8;
    v26 = a2 == (__int16)a2 && a4 > v18;
    v27 = v26;
    if (a4 - v18 <= 1)
      v28 = 1;
    else
      v28 = a4 - v18;
    v29.i64[0] = 0x8000800080008000;
    v29.i64[1] = 0x8000800080008000;
    v30 = (int8x16_t)vcgtq_s16(v21, (int16x8_t)xmmword_185004910);
    v31.i64[0] = 0x2000200020002000;
    v31.i64[1] = 0x2000200020002000;
    v32.i64[0] = 0xFFFF0000FFFFLL;
    v32.i64[1] = 0xFFFF0000FFFFLL;
    do
    {
      v33 = *(int32x4_t **)(a5 + 8 * v13);
      v34 = 0;
      if (v27)
      {
        v35 = result;
        while (1)
        {
          v36 = (int8x16_t *)(v14 + 10 * *v35);
          v37 = (int8x16_t *)((char *)v36 + v22);
          if ((unint64_t)v36->u64 + v22 > 10 * v17 + v14)
            break;
          if (v36 >= v37)
          {
            v41 = 0uLL;
            v42 = 0uLL;
            v43 = 0uLL;
            v44 = 0uLL;
            v45 = 0uLL;
            v46 = 0uLL;
            v47 = 0uLL;
            v48 = 0uLL;
          }
          else
          {
            v38 = (int8x16_t *)(v35 + 2);
            v39 = v35[1];
            v40 = (unint64_t)&v37[-4];
            v41 = 0uLL;
            v42 = 0uLL;
            v43 = 0uLL;
            v44 = 0uLL;
            v45 = 0uLL;
            v46 = 0uLL;
            v47 = 0uLL;
            v48 = 0uLL;
            while ((unint64_t)v36 < v40)
            {
              v49 = *v38;
              v38 = (int8x16_t *)((char *)v38 + 12);
              v8 = vandq_s8(v49, v24);
              v50 = *v36;
              v51 = v36[1];
              v52 = v36[2];
              v53 = v36[3];
              v36 = (int8x16_t *)((char *)v36 + 60);
              v12 = (int16x8_t)veorq_s8(v53, v29);
              v11 = (int16x8_t)veorq_s8(v52, v29);
              v10 = (int16x8_t)veorq_s8(v51, v29);
              v54 = veorq_s8(v50, v29);
              v55 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_185004940);
              v56 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_185004950);
              v57 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_185004960);
              v44 = vmlal_high_s16(v44, v10, v57);
              v41 = vmlal_lane_s16(v41, *(int16x4_t *)v54.i8, *(int16x4_t *)v8.i8, 0);
              v45 = vmlal_s16(v45, *(int16x4_t *)v11.i8, *(int16x4_t *)v56.i8);
              v43 = vmlal_s16(v43, *(int16x4_t *)v10.i8, *(int16x4_t *)v57.i8);
              v42 = vmlal_s16(v42, (int16x4_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL), vzip1_s16(*(int16x4_t *)v8.i8, vdup_lane_s16(*(int16x4_t *)v8.i8, 1)));
              v46 = vmlal_high_s16(v46, v11, v56);
              v47 = vmlal_s16(v47, *(int16x4_t *)v12.i8, *(int16x4_t *)v55.i8);
              v48 = vmlal_high_s16(v48, v12, v55);
              v39 -= 6;
            }
            if (v39 >= 1)
            {
              v8 = vandq_s8(*v38, v30);
              v12 = (int16x8_t)veorq_s8(v36[3], v29);
              v11 = (int16x8_t)veorq_s8(v36[2], v29);
              v10 = (int16x8_t)veorq_s8(v36[1], v29);
              v58 = veorq_s8(*v36, v29);
              v59 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_185004940);
              v60 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_185004950);
              v61 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_185004960);
              v41 = vmlal_lane_s16(v41, *(int16x4_t *)v58.i8, *(int16x4_t *)v8.i8, 0);
              v44 = vmlal_high_s16(v44, v10, v61);
              v46 = vmlal_high_s16(v46, v11, v60);
              v45 = vmlal_s16(v45, *(int16x4_t *)v11.i8, *(int16x4_t *)v60.i8);
              v43 = vmlal_s16(v43, *(int16x4_t *)v10.i8, *(int16x4_t *)v61.i8);
              v42 = vmlal_s16(v42, (int16x4_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL), vzip1_s16(*(int16x4_t *)v8.i8, vdup_lane_s16(*(int16x4_t *)v8.i8, 1)));
              v47 = vmlal_s16(v47, *(int16x4_t *)v12.i8, *(int16x4_t *)v59.i8);
              v48 = vmlal_high_s16(v48, v12, v59);
            }
          }
          v9 = (int16x8_t)vextq_s8((int8x16_t)v46, (int8x16_t)v47, 0xCuLL);
          v62 = vaddq_s32(v41, (int32x4_t)vextq_s8((int8x16_t)v44, (int8x16_t)v45, 0xCuLL));
          v63 = vaddq_s32(v44, (int32x4_t)vextq_s8((int8x16_t)v47, (int8x16_t)v48, 0xCuLL));
          v64 = vaddq_s32(v42, (int32x4_t)vextq_s8((int8x16_t)v45, (int8x16_t)v46, 0xCuLL));
          v65 = (int8x16_t)vaddq_s32(v43, (int32x4_t)v9);
          *v33 = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v64, v65, 4uLL), v62), vaddq_s32((int32x4_t)vextq_s8(v65, (int8x16_t)v63, 8uLL), v31)), 0xEuLL), v32), (int32x4_t)0);
          v33[1].i32[0] = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddq_s32(vdupq_lane_s32(*(int32x2_t *)v65.i8, 1), v64), vaddq_s32(vdupq_laneq_s32(v63, 2), v31)), 0xEuLL), v32), (int32x4_t)0).u32[0];
          v33 = (int32x4_t *)((char *)v33 + 20);
          ++v34;
          v35 = (int *)((char *)v35 + v15);
          if (v34 == v28)
          {
            v34 = v28;
            break;
          }
        }
      }
      else
      {
        v35 = result;
      }
      if (v34 < a4)
      {
        do
        {
          if (*v35 >= (int)v17)
            v66 = v17;
          else
            v66 = *v35;
          v67 = v17 - v66;
          if (v35[1] >= v67)
            v68 = v67;
          else
            v68 = v35[1];
          if (v68 < 1)
          {
            v72 = 0uLL;
            v74 = 0uLL;
            v75 = 0uLL;
            v76 = 0uLL;
            v77 = 0uLL;
            v78 = 0uLL;
            v79 = 0uLL;
            v80 = 0uLL;
          }
          else
          {
            v69 = (int8x16_t *)(v14 + 10 * *v35);
            v70 = (unint64_t)&v69[-4] + 10 * v68;
            v71 = (int8x16_t *)(v35 + 2);
            v72 = 0uLL;
            if ((unint64_t)v69 >= v70)
            {
              v74 = 0uLL;
              v75 = 0uLL;
              v76 = 0uLL;
              v77 = 0uLL;
              v78 = 0uLL;
              v79 = 0uLL;
              v80 = 0uLL;
              goto LABEL_77;
            }
            v73 = v68;
            v74 = 0uLL;
            v75 = 0uLL;
            v76 = 0uLL;
            v77 = 0uLL;
            v78 = 0uLL;
            v79 = 0uLL;
            v80 = 0uLL;
            do
            {
              v81 = v16 - (char *)v71;
              if ((unint64_t)(v16 - (char *)v71) >= 0x10)
                v81 = 16;
              if (v81 < 0x10)
              {
                if ((_DWORD)v73)
                {
                  if (v73 < 4)
                  {
                    if (v73 == 1)
                    {
                      v8.i16[0] = v71->i16[0];
                    }
                    else
                    {
                      if ((_DWORD)v73 == 2)
                        v89 = 0;
                      else
                        v89 = (int16x4_t)v71->u16[2];
                      v10.i16[0] = v71->i16[0];
                      v10.i16[2] = v71->i16[1];
                      *(int16x4_t *)v8.i8 = vuzp1_s16(*(int16x4_t *)v10.i8, v89);
                    }
                    v8.i64[1] = 0;
                  }
                  else
                  {
                    if (v73 == 4)
                    {
                      v9.i16[0] = 0;
                      v9.i8[2] = 0;
                      v9.i8[3] = 0;
                      v9.i8[4] = 0;
                      v9.i8[5] = 0;
                      v9.i8[6] = 0;
                      v9.i8[7] = 0;
                    }
                    else if (v73 == 5)
                    {
                      v9.i16[0] = v71->i16[4];
                    }
                    else
                    {
                      if ((_DWORD)v73 == 6)
                      {
                        v90 = 0;
                      }
                      else
                      {
                        if ((v68 & 1) != 0)
                          v91 = 0;
                        else
                          v91 = v71->u16[7];
                        v90.i32[0] = v71->u16[6];
                        v90.i32[1] = v91;
                      }
                      v10.i16[0] = v71->i16[4];
                      v10.i16[2] = v71->i16[5];
                      *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v10.i8, v90);
                    }
                    v8.i64[0] = v71->i64[0];
                    v8.i64[1] = v9.i64[0];
                  }
                }
                else
                {
                  v8 = 0uLL;
                }
              }
              else
              {
                v8 = vandq_s8(*v71, v24);
              }
              v71 = (int8x16_t *)((char *)v71 + 12);
              v82 = *v69;
              v83 = v69[1];
              v84 = v69[2];
              v85 = v69[3];
              v69 = (int8x16_t *)((char *)v69 + 60);
              v12 = (int16x8_t)veorq_s8(v85, v29);
              v11 = (int16x8_t)veorq_s8(v84, v29);
              v10 = (int16x8_t)veorq_s8(v83, v29);
              v9 = (int16x8_t)veorq_s8(v82, v29);
              v86 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_185004940);
              v87 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_185004950);
              v88 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_185004960);
              v76 = vmlal_high_s16(v76, v10, v88);
              v75 = vmlal_s16(v75, *(int16x4_t *)v10.i8, *(int16x4_t *)v88.i8);
              v77 = vmlal_s16(v77, *(int16x4_t *)v11.i8, *(int16x4_t *)v87.i8);
              v74 = vmlal_s16(v74, (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL), vzip1_s16(*(int16x4_t *)v8.i8, vdup_lane_s16(*(int16x4_t *)v8.i8, 1)));
              v78 = vmlal_high_s16(v78, v11, v87);
              v79 = vmlal_s16(v79, *(int16x4_t *)v12.i8, *(int16x4_t *)v86.i8);
              v80 = vmlal_high_s16(v80, v12, v86);
              v72 = vmlal_lane_s16(v72, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8, 0);
              v73 -= 6;
            }
            while ((unint64_t)v69 < v70);
            if ((int)v73 >= 1)
            {
              v68 = v73;
LABEL_77:
              v92 = 0;
              v93 = v68;
              v94 = 5 * v68;
              v95 = v68 << 16;
              v96 = v68;
              v97 = 5 * v68;
              while (2)
              {
                v98 = v94 + v92;
                v99 = v16 - (char *)v71;
                if ((unint64_t)(v16 - (char *)v71) >= 0x10)
                  v99 = 16;
                if (v99 < 0x10)
                {
                  if (v96 >= 4)
                  {
                    if ((_DWORD)v96 == 4)
                    {
                      v9.i16[0] = 0;
                      v9.i8[2] = 0;
                      v9.i8[3] = 0;
                      v9.i8[4] = 0;
                      v9.i8[5] = 0;
                      v9.i8[6] = 0;
                      v9.i8[7] = 0;
                    }
                    else if ((_DWORD)v96 == 5)
                    {
                      v9.i16[0] = v71->i16[4];
                    }
                    else
                    {
                      if (v94 + v92 == 30)
                      {
                        v116 = 0;
                      }
                      else
                      {
                        if ((v93 & 1) != 0)
                          v130 = 0;
                        else
                          v130 = v71->u16[7];
                        v116.i32[0] = v71->u16[6];
                        v116.i32[1] = v130;
                      }
                      v10.i16[0] = v71->i16[4];
                      v10.i16[2] = v71->i16[5];
                      *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v10.i8, v116);
                    }
                    v8.i64[0] = v71->i64[0];
                    v8.i64[1] = v9.i64[0];
                    goto LABEL_84;
                  }
                  if (v98 == 5)
                  {
                    v8.i16[0] = v71->i16[0];
                  }
                  else
                  {
                    if (v94 + v92 == 10)
                    {
                      v9.i16[0] = 0;
                      v9.i8[2] = 0;
                      v9.i8[3] = 0;
                      v9.i8[4] = 0;
                      v9.i8[5] = 0;
                      v9.i8[6] = 0;
                      v9.i8[7] = 0;
                    }
                    else
                    {
                      v9.i8[2] = 0;
                      v9.i8[3] = 0;
                      v9.i8[4] = 0;
                      v9.i8[5] = 0;
                      v9.i8[6] = 0;
                      v9.i8[7] = 0;
                      v9.i16[0] = v71->i16[2];
                    }
                    v10.i16[0] = v71->i16[0];
                    v10.i16[2] = v71->i16[1];
                    *(int16x4_t *)v8.i8 = vuzp1_s16(*(int16x4_t *)v10.i8, *(int16x4_t *)v9.i8);
                  }
                  v8.i64[1] = 0;
                  v71 = (int8x16_t *)((char *)v71 + 12);
                }
                else
                {
                  v100 = v95 >> 16;
                  if (v95 >> 16 >= 8)
                    v100 = 8;
                  v9 = vcgtq_s16(vdupq_n_s16(v100), (int16x8_t)xmmword_185004910);
                  v10 = *(int16x8_t *)v71;
                  v8 = vandq_s8(*v71, (int8x16_t)v9);
LABEL_84:
                  v71 = (int8x16_t *)((char *)v71 + 12);
                  if (v96 >= 7)
                  {
                    v101 = v69[2];
                    v102 = v69[3];
                    v103 = *v69;
                    v9 = (int16x8_t)v69[1];
                    goto LABEL_86;
                  }
                }
                v131 = v94 + v92;
                v129 = v97 + v92;
                if ((v97 + v92) < 0x10)
                {
                  if (v129 < 8)
                  {
                    if (v129 < 4)
                    {
                      if (v131)
                      {
                        if (v131 == 1)
                        {
                          v114 = 0;
                          v9.i8[2] = 0;
                          v9.i8[3] = 0;
                          v9.i8[4] = 0;
                          v9.i8[5] = 0;
                          v9.i8[6] = 0;
                          v9.i8[7] = 0;
                          v9.i16[0] = v69->i16[0];
                        }
                        else
                        {
                          v9.i16[0] = v69->i16[0];
                          v9.i16[2] = v69->i16[1];
                          v114 = (int16x4_t)v69->u16[2];
                        }
                        *(int16x4_t *)v103.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v114);
                      }
                      else
                      {
                        v103.i64[0] = 0;
                      }
                      v103.i64[1] = 0;
                    }
                    else
                    {
                      if (v131 == 4)
                      {
                        v120 = 0;
                      }
                      else
                      {
                        v110 = &v69->i16[4];
                        if (v131 == 5)
                        {
                          v111 = 0;
                          v9.i8[2] = 0;
                          v9.i8[3] = 0;
                          v9.i8[4] = 0;
                          v9.i8[5] = 0;
                          v9.i8[6] = 0;
                          v9.i8[7] = 0;
                          v9.i16[0] = *v110;
                        }
                        else
                        {
                          v9.i16[0] = *v110;
                          v9.i16[2] = v69->i16[5];
                          v111 = (int16x4_t)v69->u16[6];
                        }
                        v120 = vuzp1_s16(*(int16x4_t *)v9.i8, v111);
                      }
                      v103.i64[0] = v69->i64[0];
                      v103.u64[1] = (unint64_t)v120;
                    }
                    v9 = 0uLL;
                  }
                  else
                  {
                    if (v94 + v92 == 8)
                    {
                      v9 = 0uLL;
                    }
                    else if ((unint64_t)(v94 + v92 - 8) < 4)
                    {
                      if (v94 + v92 == 9)
                      {
                        v9.i16[0] = v69[1].i16[0];
                      }
                      else
                      {
                        if (v94 + v92 == 10)
                          v115 = 0;
                        else
                          v115 = (int16x4_t)v69[1].u16[2];
                        v10.i16[0] = v69[1].i16[0];
                        v10.i16[2] = v69[1].i16[1];
                        *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v10.i8, v115);
                      }
                      v9.i64[1] = 0;
                    }
                    else
                    {
                      if (v131 == 12)
                      {
                        v121 = 0;
                      }
                      else
                      {
                        v108 = &v69[1].i16[4];
                        if (v131 == 13)
                        {
                          v109 = 0;
                          v9.i8[2] = 0;
                          v9.i8[3] = 0;
                          v9.i8[4] = 0;
                          v9.i8[5] = 0;
                          v9.i8[6] = 0;
                          v9.i8[7] = 0;
                          v9.i16[0] = *v108;
                        }
                        else
                        {
                          v9.i16[0] = *v108;
                          v9.i16[2] = v69[1].i16[5];
                          v109 = (int16x4_t)v69[1].u16[6];
                        }
                        v121 = vuzp1_s16(*(int16x4_t *)v9.i8, v109);
                      }
                      v9.i64[0] = v69[1].i64[0];
                      v9.u64[1] = (unint64_t)v121;
                    }
                    v103 = *v69;
                  }
                }
                else
                {
                  v103 = *v69;
                  v9 = (int16x8_t)v69[1];
                  v107 = v131 - 16;
                  if (v131 != 16)
                  {
                    if (v107 >= 8)
                    {
                      if (v94 + v92 == 24)
                      {
                        v102 = 0uLL;
                      }
                      else if ((unint64_t)(v94 + v92 - 24) < 4)
                      {
                        if (v98 == 25)
                        {
                          v119 = 0;
                          v118 = 0;
                          v117 = v69[3].i16[0];
                        }
                        else
                        {
                          v117 = v69[3].i16[0];
                          v118 = v69[3].i16[1];
                          v119 = v69[3].u16[2];
                        }
                        v102.i32[3] = 0;
                        v102.i16[0] = v117;
                        v102.i16[1] = v118;
                        *(uint64_t *)((char *)v102.i64 + 4) = v119;
                      }
                      else
                      {
                        if (v131 == 28)
                        {
                          v11.i16[0] = 0;
                          v11.i8[2] = 0;
                          v11.i8[3] = 0;
                          v11.i8[4] = 0;
                          v11.i8[5] = 0;
                          v11.i8[6] = 0;
                          v11.i8[7] = 0;
                        }
                        else if (v131 == 29)
                        {
                          v11.i16[0] = v69[3].i16[4];
                        }
                        else
                        {
                          if (v94 + v92 == 30)
                          {
                            v124 = 0;
                          }
                          else
                          {
                            if ((v93 & 1) != 0)
                              v123 = 0;
                            else
                              v123 = v69[3].u16[7];
                            v124.i32[0] = v69[3].u16[6];
                            v124.i32[1] = v123;
                          }
                          v12.i16[0] = v69[3].i16[4];
                          v12.i16[2] = v69[3].i16[5];
                          *(int16x4_t *)v11.i8 = vuzp1_s16(*(int16x4_t *)v12.i8, v124);
                        }
                        v102.i64[0] = v69[3].i64[0];
                        v102.i64[1] = v11.i64[0];
                      }
                      v101 = v69[2];
LABEL_86:
                      v69 = (int8x16_t *)((char *)v69 + 60);
                      v12 = (int16x8_t)veorq_s8(v102, v29);
                      v11 = (int16x8_t)veorq_s8(v101, v29);
                      v9 = (int16x8_t)veorq_s8((int8x16_t)v9, v29);
                      v10 = (int16x8_t)veorq_s8(v103, v29);
                      v104 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_185004940);
                      v105 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_185004950);
                      v106 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_185004960);
                      v76 = vmlal_high_s16(v76, v9, v106);
                      v75 = vmlal_s16(v75, *(int16x4_t *)v9.i8, *(int16x4_t *)v106.i8);
                      v74 = vmlal_s16(v74, (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL), vzip1_s16(*(int16x4_t *)v8.i8, vdup_lane_s16(*(int16x4_t *)v8.i8, 1)));
                      v77 = vmlal_s16(v77, *(int16x4_t *)v11.i8, *(int16x4_t *)v105.i8);
                      v78 = vmlal_high_s16(v78, v11, v105);
                      v79 = vmlal_s16(v79, *(int16x4_t *)v12.i8, *(int16x4_t *)v104.i8);
                      v80 = vmlal_high_s16(v80, v12, v104);
                      v72 = vmlal_lane_s16(v72, *(int16x4_t *)v10.i8, *(int16x4_t *)v8.i8, 0);
                      v92 -= 30;
                      v95 -= 393216;
                      v26 = (uint64_t)v96 <= 6;
                      v96 -= 6;
                      if (v26)
                        goto LABEL_178;
                      continue;
                    }
                    if (v107 < 4)
                    {
                      v101.i32[3] = 0;
                      v101.i32[0] = v69[2].i32[0];
                      *(uint64_t *)((char *)v101.i64 + 4) = v69[2].u16[2];
                    }
                    else
                    {
                      if (v131 == 20)
                      {
                        v122 = 0;
                      }
                      else
                      {
                        v112 = &v69[2].i16[4];
                        if (v131 == 21)
                        {
                          v113 = 0;
                          v11.i8[2] = 0;
                          v11.i8[3] = 0;
                          v11.i8[4] = 0;
                          v11.i8[5] = 0;
                          v11.i8[6] = 0;
                          v11.i8[7] = 0;
                          v11.i16[0] = *v112;
                        }
                        else
                        {
                          v11.i16[0] = *v112;
                          v11.i16[2] = v69[2].i16[5];
                          v113 = (int16x4_t)v69[2].u16[6];
                        }
                        v122 = vuzp1_s16(*(int16x4_t *)v11.i8, v113);
                      }
                      v101.i64[0] = v69[2].i64[0];
                      v101.u64[1] = (unint64_t)v122;
                    }
LABEL_164:
                    v102 = 0uLL;
                    goto LABEL_86;
                  }
                }
                break;
              }
              v101 = 0uLL;
              goto LABEL_164;
            }
          }
LABEL_178:
          v9 = (int16x8_t)vextq_s8((int8x16_t)v78, (int8x16_t)v79, 0xCuLL);
          v125 = vaddq_s32(v72, (int32x4_t)vextq_s8((int8x16_t)v76, (int8x16_t)v77, 0xCuLL));
          v126 = vaddq_s32(v76, (int32x4_t)vextq_s8((int8x16_t)v79, (int8x16_t)v80, 0xCuLL));
          v127 = vaddq_s32(v74, (int32x4_t)vextq_s8((int8x16_t)v77, (int8x16_t)v78, 0xCuLL));
          v128 = (int8x16_t)vaddq_s32(v75, (int32x4_t)v9);
          *v33 = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v127, v128, 4uLL), v125), vaddq_s32((int32x4_t)vextq_s8(v128, (int8x16_t)v126, 8uLL), v31)), 0xEuLL), v32), (int32x4_t)0);
          v33[1].i32[0] = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddq_s32(vdupq_lane_s32(*(int32x2_t *)v128.i8, 1), v127), vaddq_s32(vdupq_laneq_s32(v126, 2), v31)), 0xEuLL), v32), (int32x4_t)0).u32[0];
          v33 = (int32x4_t *)((char *)v33 + 20);
          ++v34;
          v35 = (int *)((char *)v35 + v15);
        }
        while (v34 != a4);
      }
      v14 += v132;
      ++v13;
    }
    while (v13 != v25);
  }
  return result;
}

int *resample_horizontal<unsigned short,int,1,true>(int *result, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  int16x8_t v8;
  int16x8_t v9;
  int8x16_t v10;
  int16x4_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint16x8_t v26;
  unsigned int v27;
  int8x16_t v28;
  uint64_t v29;
  _BOOL4 v31;
  uint64_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int32x2_t *v35;
  unint64_t v36;
  int *v37;
  uint64_t v38;
  int8x16_t *v39;
  int8x16_t *v40;
  int8x16_t *v41;
  int v42;
  int8x16_t *v43;
  unint64_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int16x8_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int16x8_t v54;
  int8x16_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int16x8_t *v60;
  unint64_t v61;
  int8x16_t *v62;
  int8x16_t *v63;
  int32x4_t v64;
  uint64_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  unint64_t v69;
  int8x16_t v70;
  int16x8_t v71;
  int8x16_t v72;
  int16x4_t v73;
  int16x4_t v74;
  int v75;
  unint64_t v76;
  unsigned int v77;
  int v78;
  int16x8_t v79;
  BOOL v80;
  int16x4_t v81;
  int16x4_t v82;
  int16x4_t v83;
  int16x4_t v84;
  int16x4_t v85;
  int16x4_t v86;
  __int32 v87;
  __int32 v88;
  int32x4_t v89;
  int32x4_t v90;
  __int32 v91;

  if (a4 >= 1 && a8 >= 1)
  {
    v12 = 0;
    v13 = *a6;
    v14 = a6[1];
    v15 = *a7;
    v16 = a7[1];
    if (v15 >> 1 >= v16 >> 1)
      v17 = v16 >> 1;
    else
      v17 = v15 >> 1;
    v18 = a4;
    v19 = 2 * a2;
    v20 = v19 + 8;
    v21 = (char *)result + (v19 + 8) * a4;
    if (v17 >= *(int *)&v21[-v19 - 4] + (uint64_t)*(int *)&v21[-v19 - 8])
      v17 = *(int *)&v21[-v19 - 4] + (uint64_t)*(int *)&v21[-v19 - 8];
    if (a2 <= 3)
      v22 = (2 * a2 + 23) / (2 * a2 + 8);
    else
      v22 = 1;
    v23 = a2 > 7;
    v24 = a2 & 7;
    if ((a2 & 7) != 0)
      v23 = 0;
    else
      v24 = 8;
    v25 = ((2 * (_BYTE)v24 + 15) & 0x30) + 2 * ((a2 + 8 * (v23 << 31 >> 31)) & 0xFFFFFFF8);
    v26 = (uint16x8_t)vdupq_n_s16(v24);
    if (a2 >= 8)
      v27 = 8;
    else
      v27 = a2;
    v28 = (int8x16_t)vcgtq_u16((uint16x8_t)vdupq_n_s16(v27), (uint16x8_t)xmmword_185004910);
    v29 = a8;
    v31 = a2 == (__int16)a2 && v18 > v22;
    if (v18 - v22 <= 1)
      v32 = 1;
    else
      v32 = v18 - v22;
    v33.i64[0] = 0x8000800080008000;
    v33.i64[1] = 0x8000800080008000;
    v34 = (int8x16_t)vcgtq_u16(v26, (uint16x8_t)xmmword_185004910);
    do
    {
      v35 = *(int32x2_t **)(a5 + 8 * v12);
      v36 = 0;
      if (v31)
      {
        v37 = result;
        while (1)
        {
          v38 = *v37;
          v39 = (int8x16_t *)(v13 + 2 * v38);
          v40 = (int8x16_t *)((char *)v39 + v25);
          if ((unint64_t)v39->u64 + v25 > 2 * v17 + v13)
            break;
          if (v39 >= v40)
          {
            v45 = 0uLL;
            v46 = 0uLL;
            v47 = 0uLL;
            v48 = 0uLL;
          }
          else
          {
            v41 = (int8x16_t *)(v37 + 2);
            v42 = v37[1];
            v43 = (int8x16_t *)(v14 + 2 * v38);
            v44 = (unint64_t)&v40[-1];
            v45 = 0uLL;
            if ((unint64_t)v39 < v44)
            {
              v47 = 0uLL;
              v48 = 0uLL;
              v46 = 0uLL;
              do
              {
                v52 = *v41++;
                v8 = (int16x8_t)vandq_s8(v52, v28);
                v53 = *v39++;
                v54 = (int16x8_t)veorq_s8(v53, v33);
                v48 = vmlal_high_s16(v48, v54, v8);
                v55 = *v43++;
                v10.i64[0] = v55.i64[0];
                v47 = vmlal_s16(v47, *(int16x4_t *)v54.i8, *(int16x4_t *)v8.i8);
                v9 = (int16x8_t)veorq_s8(v55, v33);
                v46 = vmlal_high_s16(v46, v9, v8);
                v45 = vmlal_s16(v45, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
                v42 -= 8;
              }
              while ((unint64_t)v39 < v44);
            }
            else
            {
              v46 = 0uLL;
              v47 = 0uLL;
              v48 = 0uLL;
            }
            if (v42 >= 1)
            {
              v8 = (int16x8_t)vandq_s8(*v41, v34);
              v49 = (int16x8_t)veorq_s8(*v39, v33);
              v48 = vmlal_high_s16(v48, v49, v8);
              v47 = vmlal_s16(v47, *(int16x4_t *)v49.i8, *(int16x4_t *)v8.i8);
              v9 = (int16x8_t)veorq_s8(*v43, v33);
              v46 = vmlal_high_s16(v46, v9, v8);
              v45 = vmlal_s16(v45, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
            }
          }
          v50 = vaddq_s32(v47, v48);
          v50.i32[0] = (vaddvq_s32(v50) + 536879104) >> 14;
          v51 = vaddq_s32(v45, v46);
          v51.i32[0] = (vaddvq_s32(v51) + 536879104) >> 14;
          *v35++ = vzip1_s32(vmax_s32(vmin_s32(*(int32x2_t *)v50.i8, (int32x2_t)0xFFFF0000FFFFLL), 0), vmax_s32(vmin_s32(*(int32x2_t *)v51.i8, (int32x2_t)0xFFFF0000FFFFLL), 0));
          ++v36;
          v37 = (int *)((char *)v37 + v20);
          if (v36 == v32)
          {
            v36 = v32;
            break;
          }
        }
      }
      else
      {
        v37 = result;
      }
      if (v36 < v18)
      {
        do
        {
          v56 = *v37;
          if ((int)v56 >= (int)v17)
            v57 = v17;
          else
            v57 = *v37;
          v58 = v17 - v57;
          if (v37[1] >= v58)
            v59 = v58;
          else
            v59 = v37[1];
          if (v59 < 1)
          {
            v64 = 0uLL;
            v68 = 0uLL;
            v66 = 0uLL;
            v67 = 0uLL;
          }
          else
          {
            v60 = (int16x8_t *)(v13 + 2 * v56);
            v61 = (unint64_t)&v60[-1] + 2 * v59;
            v62 = (int8x16_t *)(v14 + 2 * v56);
            v63 = (int8x16_t *)(v37 + 2);
            v64 = 0uLL;
            if ((unint64_t)v60 >= v61)
            {
              v68 = 0uLL;
              v66 = 0uLL;
              v67 = 0uLL;
              LODWORD(v65) = v59;
LABEL_82:
              v75 = (_DWORD)v65 << 16;
              while (2)
              {
                v76 = v21 - (char *)v63;
                if ((unint64_t)(v21 - (char *)v63) >= 0x10)
                  v76 = 16;
                if (v76 < 0x10)
                {
                  if (v65 >= 4)
                  {
                    if ((_DWORD)v65 == 4)
                    {
                      v9.i16[0] = 0;
                      v9.i8[2] = 0;
                      v9.i8[3] = 0;
                      v9.i8[4] = 0;
                      v9.i8[5] = 0;
                      v9.i8[6] = 0;
                      v9.i8[7] = 0;
                    }
                    else if ((_DWORD)v65 == 5)
                    {
                      v9.i16[0] = v63->i16[4];
                    }
                    else
                    {
                      if ((_DWORD)v65 == 6)
                      {
                        v83 = 0;
                      }
                      else
                      {
                        if ((v65 & 1) != 0)
                          v87 = 0;
                        else
                          v87 = v63->u16[7];
                        v83.i32[0] = v63->u16[6];
                        v83.i32[1] = v87;
                      }
                      v9.i16[0] = v63->i16[4];
                      v9.i16[2] = v63->i16[5];
                      *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v83);
                    }
                    v8.i64[0] = v63->i64[0];
                    v8.i64[1] = v9.i64[0];
                    goto LABEL_89;
                  }
                  if ((_DWORD)v65 == 1)
                  {
                    v8.i16[0] = v63->i16[0];
                  }
                  else
                  {
                    if ((_DWORD)v65 == 2)
                      v81 = 0;
                    else
                      v81 = (int16x4_t)v63->u16[2];
                    v9.i16[0] = v63->i16[0];
                    v9.i16[2] = v63->i16[1];
                    *(int16x4_t *)v8.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v81);
                  }
                  v8.i64[1] = 0;
                  ++v63;
                }
                else
                {
                  v77 = v75 >> 16;
                  if (v75 >> 16 >= 8)
                    v77 = 8;
                  v9 = *(int16x8_t *)v63;
                  v8 = (int16x8_t)vandq_s8(*v63, (int8x16_t)vcgtq_s16(vdupq_n_s16(v77), (int16x8_t)xmmword_185004910));
LABEL_89:
                  ++v63;
                  if (v65 >= 8)
                  {
                    v9 = *v60;
                    v78 = 1;
                    goto LABEL_91;
                  }
                  if (v65 >= 4)
                  {
                    if ((_DWORD)v65 == 4)
                    {
                      v10.i16[0] = 0;
                      v10.i8[2] = 0;
                      v10.i8[3] = 0;
                      v10.i8[4] = 0;
                      v10.i8[5] = 0;
                      v10.i8[6] = 0;
                      v10.i8[7] = 0;
                    }
                    else if ((_DWORD)v65 == 5)
                    {
                      v10.i16[0] = v60->i16[4];
                    }
                    else
                    {
                      if ((_DWORD)v65 == 6)
                        v86 = 0;
                      else
                        v86 = (int16x4_t)v60->u16[6];
                      v10.i16[0] = v60->i16[4];
                      v10.i16[2] = v60->i16[5];
                      *(int16x4_t *)v10.i8 = vuzp1_s16(*(int16x4_t *)v10.i8, v86);
                    }
                    v78 = 0;
                    v9.i64[0] = v60->i64[0];
                    v9.i64[1] = v10.i64[0];
                    goto LABEL_91;
                  }
                }
                if ((_DWORD)v65 == 1)
                {
                  v9.i16[0] = v60->i16[0];
                }
                else
                {
                  if ((_DWORD)v65 == 2)
                    v85 = 0;
                  else
                    v85 = (int16x4_t)v60->u16[2];
                  v10.i16[0] = v60->i16[0];
                  v10.i16[2] = v60->i16[1];
                  *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v10.i8, v85);
                }
                v78 = 0;
                v9.i64[1] = 0;
LABEL_91:
                if (v78)
                {
                  v10 = *v62;
                }
                else if (v65 < 4)
                {
                  if ((_DWORD)v65 == 1)
                  {
                    v10.i16[0] = v62->i16[0];
                  }
                  else
                  {
                    if ((_DWORD)v65 == 2)
                      v82 = 0;
                    else
                      v82 = (int16x4_t)v62->u16[2];
                    v11.i16[0] = v62->i16[0];
                    v11.i16[2] = v62->i16[1];
                    *(int16x4_t *)v10.i8 = vuzp1_s16(v11, v82);
                  }
                  v10.i64[1] = 0;
                }
                else
                {
                  if ((_DWORD)v65 == 4)
                  {
                    v11 = 0;
                  }
                  else if ((_DWORD)v65 == 5)
                  {
                    v11.i16[0] = v62->i16[4];
                  }
                  else
                  {
                    if ((_DWORD)v65 == 6)
                    {
                      v84 = 0;
                    }
                    else
                    {
                      if ((v65 & 1) != 0)
                        v88 = 0;
                      else
                        v88 = v62->u16[7];
                      v84.i32[0] = v62->u16[6];
                      v84.i32[1] = v88;
                    }
                    v11.i16[0] = v62->i16[4];
                    v11.i16[2] = v62->i16[5];
                    v11 = vuzp1_s16(v11, v84);
                  }
                  v10.i64[0] = v62->i64[0];
                  v10.u64[1] = (unint64_t)v11;
                }
                ++v60;
                v79 = (int16x8_t)veorq_s8((int8x16_t)v9, v33);
                v67 = vmlal_high_s16(v67, v79, v8);
                v66 = vmlal_s16(v66, *(int16x4_t *)v79.i8, *(int16x4_t *)v8.i8);
                ++v62;
                v9 = (int16x8_t)veorq_s8(v10, v33);
                v68 = vmlal_high_s16(v68, v9, v8);
                v64 = vmlal_s16(v64, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
                v75 -= 0x80000;
                v80 = __OFSUB__((_DWORD)v65, 8);
                LODWORD(v65) = v65 - 8;
                if (((int)v65 < 0) ^ v80 | ((_DWORD)v65 == 0))
                  goto LABEL_153;
                continue;
              }
            }
            v65 = v59;
            v66 = 0uLL;
            v67 = 0uLL;
            v68 = 0uLL;
            do
            {
              v69 = v21 - (char *)v63;
              if ((unint64_t)(v21 - (char *)v63) >= 0x10)
                v69 = 16;
              if (v69 < 0x10)
              {
                if ((_DWORD)v65)
                {
                  if (v65 < 4)
                  {
                    if (v65 == 1)
                    {
                      v8.i16[0] = v63->i16[0];
                    }
                    else
                    {
                      if ((_DWORD)v65 == 2)
                        v73 = 0;
                      else
                        v73 = (int16x4_t)v63->u16[2];
                      v9.i16[0] = v63->i16[0];
                      v9.i16[2] = v63->i16[1];
                      *(int16x4_t *)v8.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v73);
                    }
                    v8.i64[1] = 0;
                  }
                  else
                  {
                    if (v65 == 4)
                    {
                      v9.i16[0] = 0;
                      v9.i8[2] = 0;
                      v9.i8[3] = 0;
                      v9.i8[4] = 0;
                      v9.i8[5] = 0;
                      v9.i8[6] = 0;
                      v9.i8[7] = 0;
                    }
                    else if (v65 == 5)
                    {
                      v9.i16[0] = v63->i16[4];
                    }
                    else
                    {
                      if ((_DWORD)v65 == 6)
                      {
                        v74 = 0;
                      }
                      else
                      {
                        if ((v59 & 1) != 0)
                          v91 = 0;
                        else
                          v91 = v63->u16[7];
                        v74.i32[0] = v63->u16[6];
                        v74.i32[1] = v91;
                      }
                      v9.i16[0] = v63->i16[4];
                      v9.i16[2] = v63->i16[5];
                      *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v74);
                    }
                    v8.i64[0] = v63->i64[0];
                    v8.i64[1] = v9.i64[0];
                  }
                }
                else
                {
                  v8 = 0uLL;
                }
              }
              else
              {
                v8 = (int16x8_t)vandq_s8(*v63, v28);
              }
              ++v63;
              v70 = *(int8x16_t *)v60++;
              v71 = (int16x8_t)veorq_s8(v70, v33);
              v67 = vmlal_high_s16(v67, v71, v8);
              v72 = *v62++;
              v10.i64[0] = v72.i64[0];
              v66 = vmlal_s16(v66, *(int16x4_t *)v71.i8, *(int16x4_t *)v8.i8);
              v9 = (int16x8_t)veorq_s8(v72, v33);
              v68 = vmlal_high_s16(v68, v9, v8);
              v64 = vmlal_s16(v64, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
              v65 -= 8;
            }
            while ((unint64_t)v60 < v61);
            if ((int)v65 >= 1)
              goto LABEL_82;
          }
LABEL_153:
          v89 = vaddq_s32(v66, v67);
          v89.i32[0] = (vaddvq_s32(v89) + 536879104) >> 14;
          v90 = vaddq_s32(v64, v68);
          v90.i32[0] = (vaddvq_s32(v90) + 536879104) >> 14;
          *v35++ = vzip1_s32(vmax_s32(vmin_s32(*(int32x2_t *)v89.i8, (int32x2_t)0xFFFF0000FFFFLL), 0), vmax_s32(vmin_s32(*(int32x2_t *)v90.i8, (int32x2_t)0xFFFF0000FFFFLL), 0));
          ++v36;
          v37 = (int *)((char *)v37 + v20);
        }
        while (v36 != v18);
      }
      v13 += v15;
      v14 += v16;
      ++v12;
    }
    while (v12 != v29);
  }
  return result;
}

uint64_t resample_horizontal<unsigned short,int,3,true>(uint64_t result, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  _BOOL4 v24;
  uint64_t v25;
  int16x8_t v26;
  unsigned int v27;
  int8x16_t v28;
  BOOL v29;
  char v30;
  uint64_t v31;
  int8x16_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int8x16_t v35;
  int32x4_t *v36;
  unint64_t v37;
  int *v38;
  uint64_t v39;
  int8x16_t *v40;
  int8x16_t *v41;
  int8x16_t *v42;
  int v43;
  int8x16_t *v44;
  unint64_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int8x16_t v52;
  int16x8_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int8x16_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int32x4_t v64;
  int8x16_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int16x8_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int16x8_t v73;
  int8x16_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  int8x16_t *v79;
  unint64_t v80;
  __int16 *v81;
  int8x16_t *v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  unint64_t v89;
  unsigned int v90;
  int8x16_t v91;
  int8x16_t v92;
  int16x4_t v93;
  int16x4_t v94;
  __int32 v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x4_t v98;
  int16x4_t v99;
  __int32 v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  int v104;
  int v105;
  unint64_t v106;
  unsigned int v107;
  int8x16_t v108;
  int8x16_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x4_t v112;
  int16x4_t v113;
  __int32 v114;
  int16x4_t v115;
  uint64_t v116;
  int16x4_t v117;
  __int16 v118;
  __int16 v119;
  int16x4_t v120;
  int16x4_t v121;
  __int16 v122;
  int32x4_t v123;
  int8x16_t v124;
  int32x4_t v125;
  int8x16_t v126;
  int32x4_t v127;
  char v128;
  unint64_t v129;
  unint64_t v130;
  int *v132;

  v132 = (int *)result;
  if ((int)a4 >= 1 && a8 >= 1)
  {
    v13 = 0;
    v14 = *a6;
    v15 = a6[1];
    v129 = a7[1];
    v130 = *a7;
    v16 = v130 / 6;
    if (v130 / 6 >= v129 >> 1)
      v16 = v129 >> 1;
    v17 = a4;
    v18 = 2 * a2 + 8;
    v19 = result + v18 * a4;
    v20 = *(int *)(v19 - v18 + 4) + (uint64_t)*(int *)(v19 - v18);
    if (v16 < v20)
      v20 = v16;
    v21 = 1;
    if (a2 <= 3)
      v21 = (2 * a2 + 23) / (2 * a2 + 8);
    v22 = a4 - v21;
    if (a2 % 5)
      v23 = a2 % 5;
    else
      v23 = 5;
    if (a2 % 5)
      v24 = 0;
    else
      v24 = a2 > 4;
    v25 = ((6 * v23 + 31) & 0x3FFFFFFE0) + 30 * (a2 / 5 - v24);
    v26 = vdupq_n_s16(v23);
    if (a2 >= 5)
      v27 = 5;
    else
      v27 = a2;
    v28 = (int8x16_t)vcgtq_u16((uint16x8_t)vdupq_n_s16(v27), (uint16x8_t)xmmword_185004910);
    v29 = a2 == (__int16)a2 && a4 > v21;
    v30 = !v29;
    v128 = v30;
    if (v22 <= 1)
      v31 = 1;
    else
      v31 = v22;
    v32.i64[0] = 0x8000800080008000;
    v32.i64[1] = 0x8000800080008000;
    v33.i64[0] = 0x2000200020002000;
    v33.i64[1] = 0x2000200020002000;
    v34.i64[0] = 0xFFFF0000FFFFLL;
    v34.i64[1] = 0xFFFF0000FFFFLL;
    v35 = (int8x16_t)vcgtq_s16(v26, (int16x8_t)xmmword_185004910);
    while (1)
    {
      v36 = *(int32x4_t **)(a5 + 8 * v13);
      if ((v128 & 1) != 0)
      {
        v37 = 0;
        v38 = v132;
      }
      else
      {
        v37 = 0;
        v38 = v132;
        while (1)
        {
          v39 = *v38;
          v40 = (int8x16_t *)(v14 + 6 * (int)v39);
          v41 = (int8x16_t *)((char *)v40 + v25);
          if ((unint64_t)v40->u64 + v25 > 6 * v20 + v14)
            break;
          if (v40 >= v41)
          {
            v46 = 0uLL;
            v47 = 0uLL;
            v48 = 0uLL;
            v49 = 0uLL;
            v50 = 0uLL;
            v51 = 0uLL;
          }
          else
          {
            v42 = (int8x16_t *)(v38 + 2);
            v43 = v38[1];
            v44 = (int8x16_t *)(v15 + 2 * v39);
            v45 = (unint64_t)&v41[-3];
            if ((unint64_t)v40 < v45)
            {
              v48 = 0uLL;
              v49 = 0uLL;
              v50 = 0uLL;
              v51 = 0uLL;
              v46 = 0uLL;
              v47 = 0uLL;
              do
              {
                v69 = *v42;
                v42 = (int8x16_t *)((char *)v42 + 10);
                v70 = (int16x8_t)vandq_s8(v69, v28);
                v71 = *v40;
                v72 = v40[1];
                v40 = (int8x16_t *)((char *)v40 + 30);
                v10 = (int16x8_t)veorq_s8(v72, v32);
                v73 = (int16x8_t)veorq_s8(v71, v32);
                v11 = (int16x8_t)vqtbl1q_s8((int8x16_t)v70, (int8x16_t)xmmword_185004920);
                v12 = (int16x8_t)vqtbl1q_s8((int8x16_t)v70, (int8x16_t)xmmword_185004930);
                v51 = vmlal_high_s16(v51, v10, v11);
                v49 = vmlal_high_s16(v49, v73, v12);
                v50 = vmlal_s16(v50, *(int16x4_t *)v10.i8, *(int16x4_t *)v11.i8);
                v74 = *v44;
                v44 = (int8x16_t *)((char *)v44 + 10);
                v10.i64[0] = v74.i64[0];
                v48 = vmlal_s16(v48, *(int16x4_t *)v73.i8, *(int16x4_t *)v12.i8);
                v9 = (int16x8_t)veorq_s8(v74, v32);
                v47 = vmlal_high_s16(v47, v9, v70);
                v46 = vmlal_s16(v46, *(int16x4_t *)v9.i8, *(int16x4_t *)v70.i8);
                v43 -= 5;
              }
              while ((unint64_t)v40 < v45);
            }
            else
            {
              v46 = 0uLL;
              v47 = 0uLL;
              v48 = 0uLL;
              v49 = 0uLL;
              v50 = 0uLL;
              v51 = 0uLL;
            }
            if (v43 >= 1)
            {
              if (v43 >= 9)
              {
                v52 = *v42;
                v42 = (int8x16_t *)((char *)v42 + 10);
                v53 = (int16x8_t)vandq_s8(v52, v28);
                v54 = *v40;
                v55 = v40[1];
                v40 = (int8x16_t *)((char *)v40 + 30);
                v56 = (int16x8_t)veorq_s8(v55, v32);
                v57 = (int16x8_t)veorq_s8(v54, v32);
                v58 = (int16x8_t)vqtbl1q_s8((int8x16_t)v53, (int8x16_t)xmmword_185004920);
                v59 = (int16x8_t)vqtbl1q_s8((int8x16_t)v53, (int8x16_t)xmmword_185004930);
                v51 = vmlal_high_s16(v51, v56, v58);
                v49 = vmlal_high_s16(v49, v57, v59);
                v50 = vmlal_s16(v50, *(int16x4_t *)v56.i8, *(int16x4_t *)v58.i8);
                v48 = vmlal_s16(v48, *(int16x4_t *)v57.i8, *(int16x4_t *)v59.i8);
                v60 = *v44;
                v44 = (int8x16_t *)((char *)v44 + 10);
                v61 = (int16x8_t)veorq_s8(v60, v32);
                v47 = vmlal_high_s16(v47, v61, v53);
                v46 = vmlal_s16(v46, *(int16x4_t *)v61.i8, *(int16x4_t *)v53.i8);
              }
              v62 = (int16x8_t)vandq_s8(*v42, v35);
              v10 = (int16x8_t)veorq_s8(v40[1], v32);
              v63 = (int16x8_t)veorq_s8(*v40, v32);
              v11 = (int16x8_t)vqtbl1q_s8((int8x16_t)v62, (int8x16_t)xmmword_185004920);
              v12 = (int16x8_t)vqtbl1q_s8((int8x16_t)v62, (int8x16_t)xmmword_185004930);
              v51 = vmlal_high_s16(v51, v10, v11);
              v49 = vmlal_high_s16(v49, v63, v12);
              v50 = vmlal_s16(v50, *(int16x4_t *)v10.i8, *(int16x4_t *)v11.i8);
              v48 = vmlal_s16(v48, *(int16x4_t *)v63.i8, *(int16x4_t *)v12.i8);
              v9 = (int16x8_t)veorq_s8(*v44, v32);
              v47 = vmlal_high_s16(v47, v9, v62);
              v46 = vmlal_s16(v46, *(int16x4_t *)v9.i8, *(int16x4_t *)v62.i8);
            }
          }
          v8 = (int16x8_t)vextq_s8((int8x16_t)v50, (int8x16_t)v51, 4uLL);
          v64 = vaddq_s32((int32x4_t)v8, v48);
          v65 = (int8x16_t)vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v51, (int8x16_t)v51, 4uLL).u64[0], v49);
          v66 = (int32x4_t)vextq_s8((int8x16_t)v46, (int8x16_t)v47, 0xCuLL);
          v66.i32[2] = 0;
          v67 = (int8x16_t)vaddq_s32(v66, v46);
          v68 = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddq_s32(v64, (int32x4_t)vextq_s8((int8x16_t)v64, v65, 0xCuLL)), vaddq_s32((int32x4_t)vextq_s8(v65, (int8x16_t)v50, 8uLL), v33)), 0xEuLL), v34), (int32x4_t)0);
          *(int32x2_t *)v67.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v67.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v67, v67, 8uLL)), vdup_lane_s32(*(int32x2_t *)v67.i8, 1));
          v67.i32[0] = (v67.i32[0] + 536879104) >> 14;
          v68.i32[3] = vmax_s32(vmin_s32(*(int32x2_t *)v67.i8, (int32x2_t)0xFFFF0000FFFFLL), 0).u32[0];
          *v36++ = v68;
          ++v37;
          v38 = (int *)((char *)v38 + v18);
          if (v37 == v31)
          {
            v37 = v31;
            break;
          }
        }
      }
      if (v37 < v17)
        break;
LABEL_198:
      v14 += v130;
      v15 += v129;
      ++v13;
      result = 6;
      if (v13 == a8)
        return result;
    }
    while (1)
    {
      LODWORD(v75) = v38[1];
      v76 = *v38;
      if ((int)v76 >= (int)v20)
        v77 = v20;
      else
        v77 = *v38;
      v78 = v20 - v77;
      if ((int)v75 >= v78)
        LODWORD(v75) = v78;
      if ((int)v75 < 1)
      {
        v87 = 0uLL;
        v88 = 0uLL;
        v83 = 0uLL;
        v84 = 0uLL;
        v85 = 0uLL;
        v86 = 0uLL;
        goto LABEL_197;
      }
      v79 = (int8x16_t *)(v14 + 6 * (_DWORD)v76);
      v80 = (unint64_t)&v79[-3] + 6 * (int)v75;
      v81 = (__int16 *)(v15 + 2 * v76);
      v82 = (int8x16_t *)(v38 + 2);
      if ((unint64_t)v79 >= v80)
      {
        v83 = 0uLL;
        v84 = 0uLL;
        v85 = 0uLL;
        v86 = 0uLL;
        v87 = 0uLL;
        v88 = 0uLL;
        goto LABEL_109;
      }
      v75 = (int)v75;
      v83 = 0uLL;
      v84 = 0uLL;
      v85 = 0uLL;
      v86 = 0uLL;
      v87 = 0uLL;
      v88 = 0uLL;
      do
      {
        v89 = v19 - (_QWORD)v82;
        if ((unint64_t)(v19 - (_QWORD)v82) >= 0x10)
          v89 = 16;
        if (v89 >= 0x10)
        {
          v8 = (int16x8_t)vandq_s8(*v82, v28);
LABEL_58:
          v90 = v75;
          goto LABEL_59;
        }
        if ((_DWORD)v75)
        {
          if (v75 < 4)
          {
            if (v75 == 1)
            {
              v8.i16[0] = v82->i16[0];
            }
            else
            {
              if ((_DWORD)v75 == 2)
                v98 = 0;
              else
                v98 = (int16x4_t)v82->u16[2];
              v9.i16[0] = v82->i16[0];
              v9.i16[2] = v82->i16[1];
              *(int16x4_t *)v8.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v98);
            }
            v8.i64[1] = 0;
          }
          else
          {
            if (v75 == 4)
            {
              v9.i16[0] = 0;
              v9.i8[2] = 0;
              v9.i8[3] = 0;
              v9.i8[4] = 0;
              v9.i8[5] = 0;
              v9.i8[6] = 0;
              v9.i8[7] = 0;
            }
            else if (v75 == 5)
            {
              v9.i16[0] = v82->i16[4];
            }
            else
            {
              if ((_DWORD)v75 == 6)
              {
                v99 = 0;
              }
              else
              {
                if ((v75 & 1) != 0)
                  v100 = 0;
                else
                  v100 = v82->u16[7];
                v99.i32[0] = v82->u16[6];
                v99.i32[1] = v100;
              }
              v9.i16[0] = v82->i16[4];
              v9.i16[2] = v82->i16[5];
              *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v99);
            }
            v8.i64[0] = v82->i64[0];
            v8.i64[1] = v9.i64[0];
          }
          goto LABEL_58;
        }
        v90 = 0;
        v8 = 0uLL;
LABEL_59:
        v91 = *v79;
        v92 = v79[1];
        if (v90)
        {
          if (v90 < 4)
          {
            if (v75)
            {
              if (v75 == 1)
              {
                v11.i16[0] = *v81;
              }
              else
              {
                if (v90 == 2)
                  v94 = 0;
                else
                  v94 = (int16x4_t)(unsigned __int16)v81[2];
                v12.i16[0] = *v81;
                v12.i16[2] = v81[1];
                *(int16x4_t *)v11.i8 = vuzp1_s16(*(int16x4_t *)v12.i8, v94);
              }
            }
            else
            {
              v11.i16[0] = 0;
              v11.i8[2] = 0;
              v11.i8[3] = 0;
              v11.i8[4] = 0;
              v11.i8[5] = 0;
              v11.i8[6] = 0;
              v11.i8[7] = 0;
            }
            v11.i64[1] = 0;
          }
          else
          {
            if (v75 == 4)
            {
              v12.i16[0] = 0;
              v12.i8[2] = 0;
              v12.i8[3] = 0;
              v12.i8[4] = 0;
              v12.i8[5] = 0;
              v12.i8[6] = 0;
              v12.i8[7] = 0;
            }
            else if (v75 == 5)
            {
              v12.i16[0] = v81[4];
            }
            else
            {
              if (v90 == 6)
              {
                v93 = 0;
              }
              else
              {
                if ((v75 & 1) != 0)
                  v95 = 0;
                else
                  v95 = (unsigned __int16)v81[7];
                v93.i32[0] = (unsigned __int16)v81[6];
                v93.i32[1] = v95;
              }
              v12.i16[0] = v81[4];
              v12.i16[2] = v81[5];
              *(int16x4_t *)v12.i8 = vuzp1_s16(*(int16x4_t *)v12.i8, v93);
            }
            v11.i64[0] = *(_QWORD *)v81;
            v11.i64[1] = v12.i64[0];
          }
        }
        else
        {
          v11 = 0uLL;
        }
        v82 = (int8x16_t *)((char *)v82 + 10);
        v79 = (int8x16_t *)((char *)v79 + 30);
        v10 = (int16x8_t)veorq_s8(v92, v32);
        v96 = (int16x8_t)veorq_s8(v91, v32);
        v12 = (int16x8_t)vqtbl1q_s8((int8x16_t)v8, (int8x16_t)xmmword_185004920);
        v97 = (int16x8_t)vqtbl1q_s8((int8x16_t)v8, (int8x16_t)xmmword_185004930);
        v84 = vmlal_high_s16(v84, v96, v97);
        v86 = vmlal_high_s16(v86, v10, v12);
        v85 = vmlal_s16(v85, *(int16x4_t *)v10.i8, *(int16x4_t *)v12.i8);
        v83 = vmlal_s16(v83, *(int16x4_t *)v96.i8, *(int16x4_t *)v97.i8);
        v81 += 5;
        v9 = (int16x8_t)veorq_s8((int8x16_t)v11, v32);
        v75 -= 5;
        v88 = vmlal_high_s16(v88, v9, v8);
        v87 = vmlal_s16(v87, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
      }
      while ((unint64_t)v79 < v80);
      if ((int)v75 >= 1)
      {
LABEL_109:
        v101 = 0;
        v102 = v75;
        v103 = 3 * v75;
        v104 = (_DWORD)v75 << 16;
        v105 = 3 * v75;
        do
        {
          v106 = v19 - (_QWORD)v82;
          if ((unint64_t)(v19 - (_QWORD)v82) >= 0x10)
            v106 = 16;
          if (v106 < 0x10)
          {
            if (v102 < 4)
            {
              if (v103 + v101 == 3)
              {
                v8.i16[0] = v82->i16[0];
              }
              else
              {
                if (v103 + v101 == 6)
                  v112 = 0;
                else
                  v112 = (int16x4_t)v82->u16[2];
                v9.i16[0] = v82->i16[0];
                v9.i16[2] = v82->i16[1];
                *(int16x4_t *)v8.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v112);
              }
              v8.i64[1] = 0;
              v82 = (int8x16_t *)((char *)v82 + 10);
              goto LABEL_150;
            }
            if ((_DWORD)v102 == 4)
            {
              v9.i16[0] = 0;
              v9.i8[2] = 0;
              v9.i8[3] = 0;
              v9.i8[4] = 0;
              v9.i8[5] = 0;
              v9.i8[6] = 0;
              v9.i8[7] = 0;
            }
            else if ((_DWORD)v102 == 5)
            {
              v9.i16[0] = v82->i16[4];
            }
            else
            {
              if (v103 + v101 == 18)
              {
                v121 = 0;
              }
              else
              {
                if ((v102 & 1) != 0)
                  v114 = 0;
                else
                  v114 = v82->u16[7];
                v121.i32[0] = v82->u16[6];
                v121.i32[1] = v114;
              }
              v9.i16[0] = v82->i16[4];
              v9.i16[2] = v82->i16[5];
              *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v121);
            }
            v8.i64[0] = v82->i64[0];
            v8.i64[1] = v9.i64[0];
          }
          else
          {
            v107 = v104 >> 16;
            if (v104 >> 16 >= 8)
              v107 = 8;
            v9 = *(int16x8_t *)v82;
            v8 = (int16x8_t)vandq_s8(*v82, (int8x16_t)vcgtq_s16(vdupq_n_s16(v107), (int16x8_t)xmmword_185004910));
          }
          v82 = (int8x16_t *)((char *)v82 + 10);
          if (v102 >= 6)
          {
            v108 = v79[1];
            goto LABEL_118;
          }
LABEL_150:
          v116 = v103 + v101;
          if ((v105 + v101) < 8)
          {
            if ((v105 + v101) < 4)
            {
              if (v116)
              {
                if (v116 == 1)
                {
                  v117 = 0;
                  v9.i8[2] = 0;
                  v9.i8[3] = 0;
                  v9.i8[4] = 0;
                  v9.i8[5] = 0;
                  v9.i8[6] = 0;
                  v9.i8[7] = 0;
                  v9.i16[0] = v79->i16[0];
                }
                else
                {
                  v9.i16[0] = v79->i16[0];
                  v9.i16[2] = v79->i16[1];
                  v117 = (int16x4_t)v79->u16[2];
                }
                *(int16x4_t *)v109.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v117);
              }
              else
              {
                v109.i64[0] = 0;
              }
              v109.i64[1] = 0;
            }
            else
            {
              if (v116 == 4)
              {
                v9.i16[0] = 0;
                v9.i8[2] = 0;
                v9.i8[3] = 0;
                v9.i8[4] = 0;
                v9.i8[5] = 0;
                v9.i8[6] = 0;
                v9.i8[7] = 0;
              }
              else if (v116 == 5)
              {
                v9.i16[0] = v79->i16[4];
              }
              else
              {
                if (v103 + v101 == 6)
                  v120 = 0;
                else
                  v120 = (int16x4_t)v79->u16[6];
                v10.i16[0] = v79->i16[4];
                v10.i16[2] = v79->i16[5];
                *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v10.i8, v120);
              }
              v109.i64[0] = v79->i64[0];
              v109.i64[1] = v9.i64[0];
            }
            v108 = 0uLL;
            goto LABEL_119;
          }
          if (v116 == 8)
          {
            v108 = 0uLL;
          }
          else if ((unint64_t)(v116 - 8) < 4)
          {
            if (v103 + v101 == 9)
            {
              v11.i16[0] = 0;
              v11.i8[2] = 0;
              v11.i8[3] = 0;
              v11.i8[4] = 0;
              v11.i8[5] = 0;
              v11.i8[6] = 0;
              v11.i8[7] = 0;
              v119 = 0;
              v118 = v79[1].i16[0];
            }
            else
            {
              v118 = v79[1].i16[0];
              v119 = v79[1].i16[1];
              v11.i8[2] = 0;
              v11.i8[3] = 0;
              v11.i8[4] = 0;
              v11.i8[5] = 0;
              v11.i8[6] = 0;
              v11.i8[7] = 0;
              v11.i16[0] = v79[1].i16[2];
            }
            v108.i64[1] = 0;
            v108.i16[0] = v118;
            v108.i16[1] = v119;
            v108.i16[2] = v11.i16[0];
            v108.i16[3] = v11.i16[2];
          }
          else
          {
            if (v116 == 12)
            {
              v10.i16[0] = 0;
              v10.i8[2] = 0;
              v10.i8[3] = 0;
              v10.i8[4] = 0;
              v10.i8[5] = 0;
              v10.i8[6] = 0;
              v10.i8[7] = 0;
            }
            else if (v116 == 13)
            {
              v10.i16[0] = v79[1].i16[4];
            }
            else
            {
              if ((v116 & 1) != 0)
                v122 = 0;
              else
                v122 = v79[1].i16[7];
              v10.i32[0] = v79[1].i32[2];
              v10.i16[2] = v79[1].i16[6];
              v10.i16[3] = v122;
            }
            v108.i64[0] = v79[1].i64[0];
            v108.i64[1] = v10.i64[0];
          }
LABEL_118:
          v109 = *v79;
LABEL_119:
          if (v102 < 8)
          {
            if (v102 < 4)
            {
              if (v103 + v101 == 3)
              {
                v11.i16[0] = *v81;
              }
              else
              {
                if (v103 + v101 == 6)
                  v113 = 0;
                else
                  v113 = (int16x4_t)(unsigned __int16)v81[2];
                v12.i16[0] = *v81;
                v12.i16[2] = v81[1];
                *(int16x4_t *)v11.i8 = vuzp1_s16(*(int16x4_t *)v12.i8, v113);
              }
              v11.i64[1] = 0;
            }
            else
            {
              if ((_DWORD)v102 == 4)
              {
                v12.i16[0] = 0;
                v12.i8[2] = 0;
                v12.i8[3] = 0;
                v12.i8[4] = 0;
                v12.i8[5] = 0;
                v12.i8[6] = 0;
                v12.i8[7] = 0;
              }
              else if ((_DWORD)v102 == 5)
              {
                v12.i16[0] = v81[4];
              }
              else
              {
                if (v103 + v101 == 18)
                  v115 = 0;
                else
                  v115 = (int16x4_t)(unsigned __int16)v81[6];
                v12.i16[0] = v81[4];
                v12.i16[2] = v81[5];
                *(int16x4_t *)v12.i8 = vuzp1_s16(*(int16x4_t *)v12.i8, v115);
              }
              v11.i64[0] = *(_QWORD *)v81;
              v11.i64[1] = v12.i64[0];
            }
          }
          else
          {
            v11 = *(int16x8_t *)v81;
          }
          v79 = (int8x16_t *)((char *)v79 + 30);
          v10 = (int16x8_t)veorq_s8(v109, v32);
          v12 = (int16x8_t)vqtbl1q_s8((int8x16_t)v8, (int8x16_t)xmmword_185004920);
          v110 = (int16x8_t)vqtbl1q_s8((int8x16_t)v8, (int8x16_t)xmmword_185004930);
          v111 = (int16x8_t)veorq_s8(v108, v32);
          v84 = vmlal_high_s16(v84, v10, v110);
          v86 = vmlal_high_s16(v86, v111, v12);
          v85 = vmlal_s16(v85, *(int16x4_t *)v111.i8, *(int16x4_t *)v12.i8);
          v83 = vmlal_s16(v83, *(int16x4_t *)v10.i8, *(int16x4_t *)v110.i8);
          v81 += 5;
          v9 = (int16x8_t)veorq_s8((int8x16_t)v11, v32);
          v101 -= 15;
          v104 -= 327680;
          v88 = vmlal_high_s16(v88, v9, v8);
          v87 = vmlal_s16(v87, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
          v29 = (uint64_t)v102 <= 5;
          v102 -= 5;
        }
        while (!v29);
      }
LABEL_197:
      v8 = (int16x8_t)vextq_s8((int8x16_t)v85, (int8x16_t)v86, 4uLL);
      v123 = vaddq_s32((int32x4_t)v8, v83);
      v124 = (int8x16_t)vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v86, (int8x16_t)v86, 4uLL).u64[0], v84);
      v125 = (int32x4_t)vextq_s8((int8x16_t)v87, (int8x16_t)v88, 0xCuLL);
      v125.i32[2] = 0;
      v126 = (int8x16_t)vaddq_s32(v125, v87);
      v127 = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v123, v124, 0xCuLL), v123), vaddq_s32((int32x4_t)vextq_s8(v124, (int8x16_t)v85, 8uLL), v33)), 0xEuLL), v34), (int32x4_t)0);
      *(int32x2_t *)v126.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v126.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v126, v126, 8uLL)), vdup_lane_s32(*(int32x2_t *)v126.i8, 1));
      v126.i32[0] = (v126.i32[0] + 536879104) >> 14;
      v127.i32[3] = vmax_s32(vmin_s32(*(int32x2_t *)v126.i8, (int32x2_t)0xFFFF0000FFFFLL), 0).u32[0];
      *v36++ = v127;
      ++v37;
      v38 = (int *)((char *)v38 + v18);
      if (v37 == v17)
        goto LABEL_198;
    }
  }
  return result;
}

int16x4_t *resample_horizontal<unsigned short,int,4,true>(int16x4_t *result, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  int16x4_t v8;
  int16x8_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  _BOOL4 v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v24;
  int8x16_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t *v28;
  unint64_t v29;
  int16x4_t *v30;
  uint64_t v31;
  __int32 v32;
  int v33;
  int8x16_t *v34;
  unint64_t v35;
  int8x8_t *v36;
  __int16 *v37;
  uint64_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  unint64_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int16x8_t v47;
  int8x8_t v48;
  int16x4_t v49;
  __int32 v50;
  int v51;
  unint64_t v52;
  int8x16_t v53;
  int16x8_t v54;
  int16x4_t v55;
  int8x8_t v56;
  BOOL v57;
  __int16 v58;
  uint64_t v59;
  int16x4_t v60;
  __int32 v61;
  int16x4_t v62;
  int32x4_t v63;
  uint64_t v64;
  int8x16_t *v65;
  int8x16_t *v66;
  int16x4_t *v67;
  int v68;
  int8x8_t *v69;
  unint64_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int16x8_t v76;
  int16x4_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int16x8_t v80;
  int8x8_t v81;

  if ((int)a4 >= 1 && a8 >= 1)
  {
    v10 = 0;
    v11 = *a6;
    v12 = a6[1];
    v13 = *a7;
    v14 = a7[1];
    if (v13 >> 3 >= v14 >> 1)
      v15 = v14 >> 1;
    else
      v15 = v13 >> 3;
    v16 = 2 * a2 + 8;
    v17 = (char *)result + v16 * a4;
    if (v15 >= *(int *)&v17[-v16 + 4] + (uint64_t)*(int *)&v17[-v16])
      v15 = *(int *)&v17[-v16 + 4] + (uint64_t)*(int *)&v17[-v16];
    v18 = a2 > 3;
    LODWORD(v19) = (8 * (a2 & 3)) | 0x20;
    if ((a2 & 3) != 0)
      v19 = v19;
    else
      v19 = 64;
    if ((a2 & 3) != 0)
      v18 = 0;
    v20 = ((v19 - 1) & 0xFFFFFFFFFFFFFFE0) + 32 * ((a2 >> 2) - v18);
    v21 = a8;
    v24 = a2 != (__int16)a2 || a4 < 2 || a4 == 1;
    v25.i64[0] = 0x8000800080008000;
    v25.i64[1] = 0x8000800080008000;
    v26.i64[0] = 0x2000200020002000;
    v26.i64[1] = 0x2000200020002000;
    v27.i64[0] = 0xFFFF0000FFFFLL;
    v27.i64[1] = 0xFFFF0000FFFFLL;
    while (1)
    {
      v28 = *(int32x4_t **)(a5 + 8 * v10);
      v29 = 0;
      if (v24)
      {
        v30 = result;
      }
      else
      {
        v30 = result;
        do
        {
          v64 = v30->i32[0];
          v65 = (int8x16_t *)(v11 + 8 * v64);
          v66 = (int8x16_t *)((char *)v65 + v20);
          if ((unint64_t)v65->u64 + v20 > 8 * v15 + v11)
            break;
          if (v65 >= v66)
          {
            v71 = 0uLL;
            v72 = 0uLL;
            v73 = 0uLL;
            v74 = 0uLL;
            v75 = 0uLL;
          }
          else
          {
            v67 = v30 + 1;
            v68 = v30->i32[1];
            v69 = (int8x8_t *)(v12 + 2 * v64);
            v70 = (unint64_t)&v66[-2];
            if ((unint64_t)v65 < v70)
            {
              v72 = 0uLL;
              v73 = 0uLL;
              v74 = 0uLL;
              v75 = 0uLL;
              v71 = 0uLL;
              do
              {
                v77 = *v67++;
                v8 = v77;
                v78 = *v65;
                v79 = v65[1];
                v65 += 2;
                v9 = (int16x8_t)veorq_s8(v79, v25);
                v80 = (int16x8_t)veorq_s8(v78, v25);
                v72 = vmlal_lane_s16(v72, *(int16x4_t *)v80.i8, v77, 0);
                v73 = vmlal_high_lane_s16(v73, v80, v77, 1);
                v74 = vmlal_lane_s16(v74, *(int16x4_t *)v9.i8, v77, 2);
                v75 = vmlal_high_lane_s16(v75, v9, v77, 3);
                v81 = *v69++;
                v71 = vmlal_s16(v71, (int16x4_t)veor_s8(v81, (int8x8_t)0x8000800080008000), v8);
                v68 -= 4;
              }
              while ((unint64_t)v65 < v70);
            }
            else
            {
              v71 = 0uLL;
              v72 = 0uLL;
              v73 = 0uLL;
              v74 = 0uLL;
              v75 = 0uLL;
            }
            if (v68 >= 1)
            {
              v8 = *v67;
              v9 = (int16x8_t)veorq_s8(v65[1], v25);
              v76 = (int16x8_t)veorq_s8(*v65, v25);
              v72 = vmlal_lane_s16(v72, *(int16x4_t *)v76.i8, *v67, 0);
              v73 = vmlal_high_lane_s16(v73, v76, *v67, 1);
              v74 = vmlal_lane_s16(v74, *(int16x4_t *)v9.i8, *v67, 2);
              v75 = vmlal_high_lane_s16(v75, v9, *v67, 3);
              v71 = vmlal_s16(v71, (int16x4_t)veor_s8(*v69, (int8x8_t)0x8000800080008000), *v67);
            }
          }
          *v28 = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddq_s32(vaddq_s32(v73, v75), vaddq_s32(v72, v74)), v26), 0xEuLL), v27), (int32x4_t)0);
          v71.i32[0] = (vaddvq_s32(v71) + 536879104) >> 14;
          v28[1].i32[0] = vmax_s32(vmin_s32(*(int32x2_t *)v71.i8, (int32x2_t)0xFFFF0000FFFFLL), 0).u32[0];
          v28 = (int32x4_t *)((char *)v28 + 20);
          ++v29;
          v30 = (int16x4_t *)((char *)v30 + v16);
          if (a4 < 2)
            break;
        }
        while ((unint64_t)a4 - 1 > v29);
      }
      if (v29 < a4)
        break;
LABEL_94:
      v11 += v13;
      v12 += v14;
      if (++v10 == v21)
        return result;
    }
    while (1)
    {
      v31 = v30->i32[0];
      if ((int)v31 >= (int)v15)
        v32 = v15;
      else
        v32 = v30->i32[0];
      v33 = v15 - v32;
      if (v30->i32[1] < v33)
        v33 = v30->i32[1];
      if (v33 < 1)
      {
        v43 = 0uLL;
        v39 = 0uLL;
        v40 = 0uLL;
        v41 = 0uLL;
        v42 = 0uLL;
        goto LABEL_91;
      }
      v34 = (int8x16_t *)(v11 + 8 * v31);
      v35 = (unint64_t)&v34[-2] + 8 * v33;
      v36 = (int8x8_t *)(v12 + 2 * v31);
      v37 = (__int16 *)&v30[1];
      if ((unint64_t)v34 >= v35)
      {
        v39 = 0uLL;
        v40 = 0uLL;
        v41 = 0uLL;
        v42 = 0uLL;
        v43 = 0uLL;
        goto LABEL_54;
      }
      v38 = v33;
      v39 = 0uLL;
      v40 = 0uLL;
      v41 = 0uLL;
      v42 = 0uLL;
      v43 = 0uLL;
      do
      {
        v44 = v17 - (char *)v37;
        if ((unint64_t)(v17 - (char *)v37) >= 8)
          v44 = 8;
        if (v44 < 8)
        {
          if (v38)
          {
            if (v38 == 1)
            {
              v8.i16[0] = *v37;
            }
            else
            {
              if ((_DWORD)v38 == 2)
              {
                v49 = 0;
              }
              else
              {
                if ((v33 & 1) != 0)
                  v50 = 0;
                else
                  v50 = (unsigned __int16)v37[3];
                v49.i32[0] = (unsigned __int16)v37[2];
                v49.i32[1] = v50;
              }
              v9.i16[0] = *v37;
              v9.i16[2] = v37[1];
              v8 = vuzp1_s16(*(int16x4_t *)v9.i8, v49);
            }
          }
          else
          {
            v8 = 0;
          }
        }
        else
        {
          v8 = *(int16x4_t *)v37;
        }
        v37 += 4;
        v45 = *v34;
        v46 = v34[1];
        v34 += 2;
        v9 = (int16x8_t)veorq_s8(v46, v25);
        v47 = (int16x8_t)veorq_s8(v45, v25);
        v39 = vmlal_lane_s16(v39, *(int16x4_t *)v47.i8, v8, 0);
        v40 = vmlal_high_lane_s16(v40, v47, v8, 1);
        v41 = vmlal_lane_s16(v41, *(int16x4_t *)v9.i8, v8, 2);
        v42 = vmlal_high_lane_s16(v42, v9, v8, 3);
        v48 = *v36++;
        v43 = vmlal_s16(v43, (int16x4_t)veor_s8(v48, (int8x8_t)0x8000800080008000), v8);
        v38 -= 4;
      }
      while ((unint64_t)v34 < v35);
      if ((int)v38 >= 1)
        break;
LABEL_91:
      v63 = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddq_s32(vaddq_s32(v40, v42), vaddq_s32(v39, v41)), v26), 0xEuLL), v27), (int32x4_t)0);
      *v28 = v63;
      v63.i32[0] = (vaddvq_s32(v43) + 536879104) >> 14;
      v28[1].i32[0] = vmax_s32(vmin_s32(*(int32x2_t *)v63.i8, (int32x2_t)0xFFFF0000FFFFLL), 0).u32[0];
      v28 = (int32x4_t *)((char *)v28 + 20);
      ++v29;
      v30 = (int16x4_t *)((char *)v30 + v16);
      if (v29 == a4)
        goto LABEL_94;
    }
    v33 = v38;
LABEL_54:
    v51 = v33;
    while (1)
    {
      v52 = v17 - (char *)v37;
      if ((unint64_t)(v17 - (char *)v37) >= 8)
        v52 = 8;
      if (v52 < 8)
      {
        if (v51 == 1)
        {
          v58 = *v37;
          v37 += 4;
          v59 = 0;
          v8.i8[2] = 0;
          v8.i8[3] = 0;
          v8.i8[4] = 0;
          v8.i8[5] = 0;
          v8.i8[6] = 0;
          v8.i8[7] = 0;
          v8.i16[0] = v58;
          v53.i64[0] = v34->i64[0];
          goto LABEL_68;
        }
        if (v51 == 2)
        {
          v60 = 0;
        }
        else
        {
          if ((v33 & 1) != 0)
            v61 = 0;
          else
            v61 = (unsigned __int16)v37[3];
          v60.i32[0] = (unsigned __int16)v37[2];
          v60.i32[1] = v61;
        }
        v9.i16[0] = *v37;
        v9.i16[2] = v37[1];
        v8 = vuzp1_s16(*(int16x4_t *)v9.i8, v60);
      }
      else
      {
        v8 = *(int16x4_t *)v37;
      }
      v37 += 4;
      if (v51 >= 4)
      {
        v9 = (int16x8_t)v34[1];
LABEL_61:
        v53 = *v34;
        goto LABEL_62;
      }
      if ((v51 & 0x3FFFFFFE) != 0)
      {
        v9 = 0uLL;
        if (v51 != 2)
          v9.i64[0] = v34[1].i64[0];
        goto LABEL_61;
      }
      v53.i64[0] = v34->i64[0];
      if (v51 == 1)
        v59 = 0;
      else
        v59 = v34->i64[1];
LABEL_68:
      v53.i64[1] = v59;
      v9 = 0uLL;
LABEL_62:
      v54 = (int16x8_t)veorq_s8(v53, v25);
      v39 = vmlal_lane_s16(v39, *(int16x4_t *)v54.i8, v8, 0);
      v40 = vmlal_high_lane_s16(v40, v54, v8, 1);
      v41 = vmlal_lane_s16(v41, (int16x4_t)veor_s8(*(int8x8_t *)v9.i8, (int8x8_t)0x8000800080008000), v8, 2);
      v55 = (int16x4_t)veor_s8((int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL), (int8x8_t)0x8000800080008000);
      v42 = vmlal_lane_s16(v42, v55, v8, 3);
      if (v51 <= 3)
      {
        if (v51)
        {
          if (v51 == 1)
          {
            v55.i16[0] = v36->i16[0];
          }
          else
          {
            if (v51 == 2)
              v62 = 0;
            else
              v62 = (int16x4_t)v36->u16[2];
            v9.i16[0] = v36->i16[0];
            v9.i16[2] = v36->i16[1];
            v55 = vuzp1_s16(*(int16x4_t *)v9.i8, v62);
          }
        }
        else
        {
          v55 = 0;
        }
        v43 = vmlal_s16(v43, (int16x4_t)veor_s8((int8x8_t)v55, (int8x8_t)0x8000800080008000), v8);
        goto LABEL_91;
      }
      v34 += 2;
      v56 = *v36++;
      v43 = vmlal_s16(v43, (int16x4_t)veor_s8(v56, (int8x8_t)0x8000800080008000), v8);
      v57 = __OFSUB__(v51, 4);
      v51 -= 4;
      if ((v51 < 0) ^ v57 | (v51 == 0))
        goto LABEL_91;
    }
  }
  return result;
}

int *resample_horizontal<half,half,1,false>(int *result, unsigned int a2, double a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t *a7, int *a8, int a9)
{
  float32x4_t v9;
  float32x4_t v10;
  float16x8_t v11;
  float32x4_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  float32x4_t v26;
  uint64_t v27;
  float32x4_t v28;
  int8x16_t v29;
  int8x16_t v30;
  uint64_t v31;
  int8x16_t v32;
  int8x16_t v33;
  _WORD *v34;
  unint64_t v35;
  int *v36;
  float16x4_t *v37;
  float16x4_t *v38;
  int8x16_t *v39;
  int v40;
  unint64_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int8x16_t v44;
  int8x16_t v45;
  float16x8_t v46;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  float16x8_t *v56;
  unint64_t v57;
  int8x16_t *v58;
  float32x4_t v59;
  uint64_t v60;
  float32x4_t v61;
  unint64_t v62;
  float16x8_t v63;
  uint64_t v64;
  int32x2_t v65;
  int32x2_t v66;
  int v67;
  unint64_t v68;
  float32x4_t v69;
  float16x8_t v70;
  int32x2_t v71;
  int32x2_t v72;
  int32x2_t v73;
  uint64_t v74;
  int32x2_t v75;

  if ((int)a5 >= 1 && a9 >= 1)
  {
    v13 = 0;
    v14 = *a7;
    v15 = *a8;
    v16 = v15 >> 1;
    v17 = 4 * a2;
    v18 = v17 + 8;
    v19 = (char *)result + (v17 + 8) * a5;
    if (v15 >> 1 >= *(int *)&v19[-v17 - 4] + (uint64_t)*(int *)&v19[-v17 - 8])
      v16 = *(int *)&v19[-v17 - 4] + (uint64_t)*(int *)&v19[-v17 - 8];
    v20 = (4 * a2 + 39) / (4 * a2 + 8);
    if (a2 > 5)
      v20 = 1;
    v21 = a5 - v20;
    v22 = a2 > 7;
    v23 = a2 & 7;
    if ((a2 & 7) != 0)
      v22 = 0;
    else
      v23 = 8;
    v24 = (a2 + 8 * (v22 << 31 >> 31)) & 0xFFFFFFF8;
    *(float *)&a3 = (float)v23;
    v25 = (2 * (_BYTE)v23 + 15) & 0x30;
    v26 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    if (a2 >= 8)
      a2 = 8;
    *(float *)&a3 = (float)a2;
    v27 = v25 + 2 * v24;
    v28 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    v29 = (int8x16_t)vcgtq_f32(v28, (float32x4_t)xmmword_185004980);
    v30 = (int8x16_t)vcgtq_f32(v28, (float32x4_t)xmmword_185004970);
    v31 = a9;
    if (v21 <= 1)
      v21 = 1;
    v32 = (int8x16_t)vcgtq_f32(v26, (float32x4_t)xmmword_185004980);
    v33 = (int8x16_t)vcgtq_f32(v26, (float32x4_t)xmmword_185004970);
    while (1)
    {
      v34 = *(_WORD **)(a6 + 8 * v13);
      if (a5 <= v20)
      {
        v35 = 0;
        v36 = result;
      }
      else
      {
        v35 = 0;
        v36 = result;
        while (1)
        {
          v37 = (float16x4_t *)(v14 + 2 * *v36);
          v38 = (float16x4_t *)((char *)v37 + v27);
          if ((unint64_t)v37 + v27 > 2 * v16 + v14)
            break;
          if (v37 >= v38)
          {
            v42.i64[0] = 0x8000000080000000;
            v42.i64[1] = 0x8000000080000000;
            v43.i64[0] = 0x8000000080000000;
            v43.i64[1] = 0x8000000080000000;
          }
          else
          {
            v39 = (int8x16_t *)(v36 + 2);
            v40 = v36[1];
            v41 = (unint64_t)&v38[-2];
            v42.i64[0] = 0x8000000080000000;
            v42.i64[1] = 0x8000000080000000;
            v43.i64[0] = 0x8000000080000000;
            v43.i64[1] = 0x8000000080000000;
            while ((unint64_t)v37 < v41)
            {
              v45 = *v39;
              v44 = v39[1];
              v39 += 2;
              v10 = (float32x4_t)vandq_s8(v45, v30);
              v9 = (float32x4_t)vandq_s8(v44, v29);
              v46 = *(float16x8_t *)v37->i8;
              v37 += 2;
              v12 = vcvtq_f32_f16(*(float16x4_t *)v46.i8);
              v11 = (float16x8_t)vcvt_hight_f32_f16(v46);
              v43 = vmlaq_f32(v43, (float32x4_t)v11, v9);
              v42 = vmlaq_f32(v42, v12, v10);
              v40 -= 8;
            }
            if (v40 >= 1)
            {
              v10 = (float32x4_t)vandq_s8(*v39, v33);
              v9 = (float32x4_t)vandq_s8(v39[1], v32);
              v12 = vcvtq_f32_f16(*v37);
              v11 = (float16x8_t)vcvt_hight_f32_f16(*(float16x8_t *)v37->i8);
              v43 = vmlaq_f32(v43, (float32x4_t)v11, v9);
              v42 = vmlaq_f32(v42, v12, v10);
            }
          }
          _Q16 = vaddq_f32(v42, v43);
          _Q16.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(_Q16, (float32x4_t)vdupq_laneq_s64((int64x2_t)_Q16, 1)));
          __asm { FCVT            H16, S16 }
          *v34++ = _Q16.i16[0];
          ++v35;
          v36 = (int *)((char *)v36 + v18);
          if (v35 == v21)
          {
            v35 = v21;
            break;
          }
        }
      }
      if (v35 < a5)
        break;
LABEL_108:
      v14 += v15;
      if (++v13 == v31)
        return result;
    }
    while (1)
    {
      v52 = *v36;
      if ((int)v52 >= (int)v16)
        v53 = v16;
      else
        v53 = *v36;
      v54 = v16 - v53;
      if (v36[1] >= v54)
        v55 = v54;
      else
        v55 = v36[1];
      if (v55 < 1)
      {
        v59.i64[0] = 0x8000000080000000;
        v59.i64[1] = 0x8000000080000000;
        v61.i64[0] = 0x8000000080000000;
        v61.i64[1] = 0x8000000080000000;
        goto LABEL_107;
      }
      v56 = (float16x8_t *)(v14 + 2 * v52);
      v57 = (unint64_t)&v56[-2] + 2 * v55;
      v58 = (int8x16_t *)(v36 + 2);
      v59.i64[0] = 0x8000000080000000;
      v59.i64[1] = 0x8000000080000000;
      if ((unint64_t)v56 < v57)
        break;
      LODWORD(v60) = v55;
      v61.i64[0] = 0x8000000080000000;
      v61.i64[1] = 0x8000000080000000;
LABEL_65:
      v67 = v60;
      while (1)
      {
        v68 = v19 - (char *)v58;
        if ((unint64_t)(v19 - (char *)v58) >= 0x20)
          v68 = 32;
        if (v68 < 0x20)
        {
          if (v67 < 4)
          {
            if (v67 == 1)
            {
              v9 = (float32x4_t)v58->u32[0];
            }
            else
            {
              v74 = 0;
              if (v67 != 2)
                LODWORD(v74) = v58->i32[2];
              v9.i64[0] = v58->i64[0];
              v9.i64[1] = v74;
            }
            v10 = 0uLL;
            goto LABEL_100;
          }
          if (v67 == 4)
          {
            v10 = 0uLL;
          }
          else if (v67 == 5)
          {
            v10 = (float32x4_t)v58[1].u32[0];
          }
          else
          {
            v71 = 0;
            if (v67 != 6)
            {
              v72 = 0;
              if ((v60 & 1) == 0)
                v72.i32[0] = v58[1].i32[3];
              v10.i32[0] = v58[1].i32[2];
              v71 = vzip1_s32(*(int32x2_t *)v10.f32, v72);
            }
            v10.i64[0] = v58[1].i64[0];
            *(int32x2_t *)&v10.u32[2] = v71;
          }
          v9 = *(float32x4_t *)v58;
        }
        else
        {
          v9.f32[0] = fminf((float)v67, 8.0);
          v69 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 0);
          v11 = (float16x8_t)vcgtq_f32(v69, (float32x4_t)xmmword_185004970);
          v12 = *(float32x4_t *)v58;
          v10 = (float32x4_t)vandq_s8(v58[1], (int8x16_t)vcgtq_f32(v69, (float32x4_t)xmmword_185004980));
          v9 = (float32x4_t)vandq_s8(*v58, (int8x16_t)v11);
        }
        if (v67 <= 7)
          break;
        v70 = *v56++;
        v58 += 2;
        v12 = vcvtq_f32_f16(*(float16x4_t *)v70.i8);
        v11 = (float16x8_t)vcvt_hight_f32_f16(v70);
        v61 = vmlaq_f32(v61, (float32x4_t)v11, v10);
        v59 = vmlaq_f32(v59, v12, v9);
        _VF = __OFSUB__(v67, 8);
        v67 -= 8;
        if ((v67 < 0) ^ _VF | (v67 == 0))
          goto LABEL_107;
      }
      if (v67 >= 4)
      {
        if (v67 == 4)
        {
          v12.i64[0] = 0;
        }
        else if (v67 == 5)
        {
          v12.i16[0] = v56->i16[4];
        }
        else
        {
          v73 = 0;
          if (v67 != 6)
            v73.i16[0] = v56->i16[6];
          v12.i32[0] = v56->i32[2];
          *(int32x2_t *)v12.f32 = vzip1_s32(*(int32x2_t *)v12.f32, v73);
        }
        v11.i64[0] = v56->i64[0];
        v11.i64[1] = v12.i64[0];
        goto LABEL_106;
      }
LABEL_100:
      if (v67 == 1)
      {
        v11.i16[0] = v56->i16[0];
      }
      else
      {
        v75 = 0;
        if (v67 != 2)
          v75.i16[0] = v56->i16[2];
        v12.i32[0] = v56->i32[0];
        *(int32x2_t *)v11.i8 = vzip1_s32(*(int32x2_t *)v12.f32, v75);
      }
      v11.i64[1] = 0;
LABEL_106:
      v12 = vcvtq_f32_f16(*(float16x4_t *)v11.i8);
      v11 = (float16x8_t)vcvt_hight_f32_f16(v11);
      v61 = vmlaq_f32(v61, (float32x4_t)v11, v10);
      v59 = vmlaq_f32(v59, v12, v9);
LABEL_107:
      _Q16 = vaddq_f32(v59, v61);
      _Q16.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(_Q16, (float32x4_t)vdupq_laneq_s64((int64x2_t)_Q16, 1)));
      __asm { FCVT            H16, S16 }
      *v34++ = _Q16.i16[0];
      ++v35;
      v36 = (int *)((char *)v36 + v18);
      if (v35 == a5)
        goto LABEL_108;
    }
    v60 = v55;
    v61.i64[0] = 0x8000000080000000;
    v61.i64[1] = 0x8000000080000000;
    while (1)
    {
      v62 = v19 - (char *)v58;
      if ((unint64_t)(v19 - (char *)v58) >= 0x20)
        v62 = 32;
      if (v62 < 0x20)
      {
        if ((_DWORD)v60)
        {
          if (v60 >= 4)
          {
            if (v60 == 4)
            {
              v10 = 0uLL;
            }
            else if (v60 == 5)
            {
              v10 = (float32x4_t)v58[1].u32[0];
            }
            else
            {
              v65 = 0;
              if ((_DWORD)v60 != 6)
              {
                v66 = 0;
                if ((v55 & 1) == 0)
                  v66.i32[0] = v58[1].i32[3];
                v10.i32[0] = v58[1].i32[2];
                v65 = vzip1_s32(*(int32x2_t *)v10.f32, v66);
              }
              v10.i64[0] = v58[1].i64[0];
              *(int32x2_t *)&v10.u32[2] = v65;
            }
            v9 = *(float32x4_t *)v58;
            goto LABEL_42;
          }
          if (v60 == 1)
          {
            v9 = (float32x4_t)v58->u32[0];
          }
          else
          {
            v64 = 0;
            if ((_DWORD)v60 != 2)
              LODWORD(v64) = v58->i32[2];
            v9.i64[0] = v58->i64[0];
            v9.i64[1] = v64;
          }
        }
        else
        {
          v9 = 0uLL;
        }
        v10 = 0uLL;
      }
      else
      {
        v10 = (float32x4_t)vandq_s8(v58[1], v29);
        v9 = (float32x4_t)vandq_s8(*v58, v30);
      }
LABEL_42:
      v58 += 2;
      v63 = *v56++;
      v12 = vcvtq_f32_f16(*(float16x4_t *)v63.i8);
      v11 = (float16x8_t)vcvt_hight_f32_f16(v63);
      v61 = vmlaq_f32(v61, (float32x4_t)v11, v10);
      v59 = vmlaq_f32(v59, v12, v9);
      v60 -= 8;
      if ((unint64_t)v56 >= v57)
      {
        if ((int)v60 >= 1)
          goto LABEL_65;
        goto LABEL_107;
      }
    }
  }
  return result;
}

int *resample_horizontal<half,half,3,false>(int *result, unsigned int a2, double a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t *a7, int *a8, int a9)
{
  float32x4_t v9;
  float32x4_t v10;
  float16x8_t v11;
  float16x8_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  unsigned int v21;
  _BOOL4 v22;
  uint64_t v23;
  unint64_t v24;
  float32x4_t v25;
  unsigned int v26;
  float32x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  uint64_t v30;
  int8x16_t v31;
  int8x16_t v32;
  uint64_t v33;
  unint64_t v34;
  int *v35;
  float16x8_t *v36;
  float16x8_t *v37;
  int8x16_t *v38;
  int v39;
  unint64_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int32x4_t v45;
  float16x8_t v46;
  float16x8_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  float16x8_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  int32x4_t v60;
  float32x4_t v61;
  int8x16_t v62;
  int v63;
  int v64;
  uint64_t v65;
  float16x8_t *v66;
  unint64_t v67;
  int8x16_t *v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  unint64_t v73;
  int32x4_t v74;
  float16x8_t v75;
  float16x8_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  int32x4_t v82;
  uint64_t v83;
  int32x2_t v84;
  int32x2_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  unint64_t v91;
  float32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  int32x4_t v99;
  BOOL v100;
  int32x2_t v101;
  int32x2_t v102;
  uint64_t v103;
  __int16 v104;
  float32x4_t v105;
  int8x16_t v106;

  if ((int)a5 >= 1 && a9 >= 1)
  {
    v13 = 0;
    v14 = *a7;
    v15 = *a8;
    v16 = v15 / 6;
    v17 = 4 * a2;
    v18 = v17 + 8;
    v19 = (char *)result + (v17 + 8) * a5;
    if (v15 / 6 >= *(int *)&v19[-v17 - 4] + (uint64_t)*(int *)&v19[-v17 - 8])
      v16 = *(int *)&v19[-v17 - 4] + (uint64_t)*(int *)&v19[-v17 - 8];
    v20 = (4 * a2 + 39) / (4 * a2 + 8);
    if (a2 > 5)
      v20 = 1;
    v21 = a2 % 5;
    v22 = a2 > 4;
    if (a2 % 5)
      v22 = 0;
    else
      v21 = 5;
    v23 = ((6 * v21 + 31) & 0x3FFFFFFE0) + 30 * (a2 / 5 - v22);
    v24 = a5 - v20;
    *(float *)&a3 = (float)v21;
    v25 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    if (a2 >= 5)
      v26 = 5;
    else
      v26 = a2;
    *(float *)&a3 = (float)v26;
    v27 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    v28 = (int8x16_t)vcgtq_f32(v27, (float32x4_t)xmmword_185004980);
    v29 = (int8x16_t)vcgtq_f32(v27, (float32x4_t)xmmword_185004970);
    v30 = a9;
    if (v24 <= 1)
      v24 = 1;
    v31 = (int8x16_t)vcgtq_f32(v25, (float32x4_t)xmmword_185004970);
    v32 = (int8x16_t)vcgtq_f32(v25, (float32x4_t)xmmword_185004980);
    while (1)
    {
      v33 = *(_QWORD *)(a6 + 8 * v13);
      if (a5 <= v20)
      {
        v34 = 0;
        v35 = result;
      }
      else
      {
        v34 = 0;
        v35 = result;
        while (1)
        {
          v36 = (float16x8_t *)(v14 + 6 * *v35);
          v37 = (float16x8_t *)((char *)v36 + v23);
          if ((unint64_t)v36->u64 + v23 > 6 * v16 + v14)
            break;
          if (v36 >= v37)
          {
            v41.i64[0] = 0x8000000080000000;
            v41.i64[1] = 0x8000000080000000;
            v42.i64[0] = 0x8000000080000000;
            v42.i64[1] = 0x8000000080000000;
            v43.i64[0] = 0x8000000080000000;
            v43.i64[1] = 0x8000000080000000;
            v44.i64[0] = 0x8000000080000000;
            v44.i64[1] = 0x8000000080000000;
          }
          else
          {
            v38 = (int8x16_t *)(v35 + 2);
            v39 = v35[1];
            v40 = (unint64_t)&v37[-2];
            v41.i64[0] = 0x8000000080000000;
            v41.i64[1] = 0x8000000080000000;
            v42.i64[0] = 0x8000000080000000;
            v42.i64[1] = 0x8000000080000000;
            v43.i64[0] = 0x8000000080000000;
            v43.i64[1] = 0x8000000080000000;
            v44.i64[0] = 0x8000000080000000;
            v44.i64[1] = 0x8000000080000000;
            while ((unint64_t)v36 < v40)
            {
              v10 = (float32x4_t)vandq_s8(v38[1], v28);
              v45 = (int32x4_t)vandq_s8(*v38, v29);
              v38 = (int8x16_t *)((char *)v38 + 20);
              v47 = *v36;
              v46 = v36[1];
              v36 = (float16x8_t *)((char *)v36 + 30);
              v48 = vcvt_hight_f32_f16(v47);
              v12 = (float16x8_t)vcvtq_f32_f16(*(float16x4_t *)v47.i8);
              v49 = vcvtq_f32_f16(*(float16x4_t *)v46.i8);
              v11 = (float16x8_t)vcvt_hight_f32_f16(v46);
              v50 = (float32x4_t)vzip1q_s32(v45, v45);
              v50.i32[2] = v45.i32[0];
              v51 = (float32x4_t)vextq_s8((int8x16_t)v45, (int8x16_t)vdupq_laneq_s32(v45, 3), 8uLL);
              v52 = (float32x4_t)vzip1q_s32((int32x4_t)v10, (int32x4_t)v10);
              v52.i32[2] = v10.i32[0];
              v53 = (int32x4_t)vextq_s8((int8x16_t)v45, (int8x16_t)v45, 4uLL);
              v44 = vmlaq_f32(v44, (float32x4_t)v11, v52);
              v43 = vmlaq_f32(v43, v49, v51);
              v41 = vmlaq_f32(v41, (float32x4_t)v12, v50);
              v42 = vmlaq_f32(v42, v48, (float32x4_t)vzip1q_s32(v53, v53));
              v39 -= 5;
            }
            if (v39 >= 1)
            {
              v10 = (float32x4_t)vandq_s8(v38[1], v32);
              v54 = (int32x4_t)vandq_s8(*v38, v31);
              v55 = v36[1];
              v12 = (float16x8_t)vcvtq_f32_f16(*(float16x4_t *)v36->i8);
              v56 = vcvtq_f32_f16(*(float16x4_t *)v55.i8);
              v11 = (float16x8_t)vcvt_hight_f32_f16(v55);
              v57 = (float32x4_t)vzip1q_s32(v54, v54);
              v57.i32[2] = v54.i32[0];
              v58 = (float32x4_t)vextq_s8((int8x16_t)v54, (int8x16_t)vdupq_laneq_s32(v54, 3), 8uLL);
              v59 = (float32x4_t)vzip1q_s32((int32x4_t)v10, (int32x4_t)v10);
              v59.i32[2] = v10.i32[0];
              v60 = (int32x4_t)vextq_s8((int8x16_t)v54, (int8x16_t)v54, 4uLL);
              v44 = vmlaq_f32(v44, (float32x4_t)v11, v59);
              v43 = vmlaq_f32(v43, v56, v58);
              v41 = vmlaq_f32(v41, (float32x4_t)v12, v57);
              v42 = vmlaq_f32(v42, vcvt_hight_f32_f16(*v36), (float32x4_t)vzip1q_s32(v60, v60));
            }
          }
          v9 = (float32x4_t)vextq_s8((int8x16_t)v44, (int8x16_t)v44, 4uLL).u64[0];
          v61 = vaddq_f32(v41, (float32x4_t)vextq_s8((int8x16_t)v43, (int8x16_t)v44, 4uLL));
          v62 = (int8x16_t)vaddq_f32(v42, v9);
          *(float16x4_t *)v61.f32 = vcvt_f16_f32(vaddq_f32((float32x4_t)vextq_s8(v62, (int8x16_t)vaddq_f32(v43, (float32x4_t)0), 8uLL), vaddq_f32(v61, (float32x4_t)vextq_s8((int8x16_t)v61, v62, 0xCuLL))));
          *(_DWORD *)v33 = v61.i32[0];
          *(_WORD *)(v33 + 4) = vdup_lane_s16(*(int16x4_t *)v61.f32, 2).u16[0];
          v33 += 6;
          ++v34;
          v35 = (int *)((char *)v35 + v18);
          if (v34 == v24)
          {
            v34 = v24;
            break;
          }
        }
      }
      if (v34 < a5)
        break;
LABEL_132:
      v14 += v15;
      if (++v13 == v30)
        return result;
    }
    while (1)
    {
      if (*v35 >= (int)v16)
        v63 = v16;
      else
        v63 = *v35;
      v64 = v16 - v63;
      if (v35[1] >= v64)
        LODWORD(v65) = v64;
      else
        LODWORD(v65) = v35[1];
      if ((int)v65 < 1)
      {
        v69.i64[0] = 0x8000000080000000;
        v69.i64[1] = 0x8000000080000000;
        v70.i64[0] = 0x8000000080000000;
        v70.i64[1] = 0x8000000080000000;
        v71.i64[0] = 0x8000000080000000;
        v71.i64[1] = 0x8000000080000000;
        v72.i64[0] = 0x8000000080000000;
        v72.i64[1] = 0x8000000080000000;
        goto LABEL_131;
      }
      v66 = (float16x8_t *)(v14 + 6 * *v35);
      v67 = (unint64_t)&v66[-2] + 6 * (int)v65;
      v68 = (int8x16_t *)(v35 + 2);
      if ((unint64_t)v66 >= v67)
      {
        v69.i64[0] = 0x8000000080000000;
        v69.i64[1] = 0x8000000080000000;
        v70.i64[0] = 0x8000000080000000;
        v70.i64[1] = 0x8000000080000000;
        v71.i64[0] = 0x8000000080000000;
        v71.i64[1] = 0x8000000080000000;
        v72.i64[0] = 0x8000000080000000;
        v72.i64[1] = 0x8000000080000000;
        goto LABEL_66;
      }
      v65 = (int)v65;
      v69.i64[0] = 0x8000000080000000;
      v69.i64[1] = 0x8000000080000000;
      v70.i64[0] = 0x8000000080000000;
      v70.i64[1] = 0x8000000080000000;
      v71.i64[0] = 0x8000000080000000;
      v71.i64[1] = 0x8000000080000000;
      v72.i64[0] = 0x8000000080000000;
      v72.i64[1] = 0x8000000080000000;
      do
      {
        v73 = v19 - (char *)v68;
        if ((unint64_t)(v19 - (char *)v68) >= 0x20)
          v73 = 32;
        if (v73 >= 0x20)
        {
          v10 = (float32x4_t)vandq_s8(v68[1], v28);
          v74 = (int32x4_t)vandq_s8(*v68, v29);
          goto LABEL_43;
        }
        if (!(_DWORD)v65)
        {
          v74 = 0uLL;
LABEL_56:
          v10 = 0uLL;
          goto LABEL_43;
        }
        if (v65 < 4)
        {
          if (v65 == 1)
          {
            v74 = (int32x4_t)v68->u32[0];
          }
          else
          {
            v83 = 0;
            if ((_DWORD)v65 != 2)
              LODWORD(v83) = v68->i32[2];
            v74.i64[0] = v68->i64[0];
            v74.i64[1] = v83;
          }
          goto LABEL_56;
        }
        if (v65 == 4)
        {
          v10 = 0uLL;
        }
        else if (v65 == 5)
        {
          v10 = (float32x4_t)v68[1].u32[0];
        }
        else
        {
          v84 = 0;
          if ((_DWORD)v65 != 6)
          {
            v85 = 0;
            if ((v65 & 1) == 0)
              v85.i32[0] = v68[1].i32[3];
            v10.i32[0] = v68[1].i32[2];
            v84 = vzip1_s32(*(int32x2_t *)v10.f32, v85);
          }
          v10.i64[0] = v68[1].i64[0];
          *(int32x2_t *)&v10.u32[2] = v84;
        }
        v74 = *(int32x4_t *)v68;
LABEL_43:
        v68 = (int8x16_t *)((char *)v68 + 20);
        v76 = *v66;
        v75 = v66[1];
        v66 = (float16x8_t *)((char *)v66 + 30);
        v77 = vcvtq_f32_f16(*(float16x4_t *)v76.i8);
        v78 = vcvtq_f32_f16(*(float16x4_t *)v75.i8);
        v11 = (float16x8_t)vcvt_hight_f32_f16(v75);
        v12 = (float16x8_t)vcvt_hight_f32_f16(v76);
        v79 = (float32x4_t)vzip1q_s32(v74, v74);
        v79.i32[2] = v74.i32[0];
        v80 = (float32x4_t)vextq_s8((int8x16_t)v74, (int8x16_t)vdupq_laneq_s32(v74, 3), 8uLL);
        v81 = (float32x4_t)vzip1q_s32((int32x4_t)v10, (int32x4_t)v10);
        v81.i32[2] = v10.i32[0];
        v82 = (int32x4_t)vextq_s8((int8x16_t)v74, (int8x16_t)v74, 4uLL);
        v9 = (float32x4_t)vzip1q_s32(v82, v82);
        v70 = vmlaq_f32(v70, (float32x4_t)v12, v9);
        v72 = vmlaq_f32(v72, (float32x4_t)v11, v81);
        v71 = vmlaq_f32(v71, v78, v80);
        v69 = vmlaq_f32(v69, v77, v79);
        v65 -= 5;
      }
      while ((unint64_t)v66 < v67);
      if ((int)v65 >= 1)
      {
LABEL_66:
        v86 = 0;
        v87 = v65;
        v88 = 3 * v65;
        v89 = 3 * v65;
        do
        {
          v90 = v88 + v86;
          v91 = v19 - (char *)v68;
          if ((unint64_t)(v19 - (char *)v68) >= 0x20)
            v91 = 32;
          if (v91 < 0x20)
          {
            if (v87 < 4)
            {
              if (v90 == 3)
              {
                v94 = (int32x4_t)v68->u32[0];
              }
              else
              {
                if (v88 + v86 == 6)
                  v10.i64[0] = 0;
                else
                  v10.i32[0] = v68->i32[2];
                v94.i64[0] = v68->i64[0];
                v94.i64[1] = v10.i64[0];
              }
              v93 = 0uLL;
              v68 = (int8x16_t *)((char *)v68 + 20);
              goto LABEL_93;
            }
            if ((_DWORD)v87 == 4)
            {
              v93 = 0uLL;
            }
            else if ((_DWORD)v87 == 5)
            {
              v93 = (int32x4_t)v68[1].u32[0];
            }
            else
            {
              if (v90 == 18)
              {
                v102 = 0;
              }
              else
              {
                v101 = 0;
                if ((v87 & 1) == 0)
                  v101.i32[0] = v68[1].i32[3];
                v10.i32[0] = v68[1].i32[2];
                v102 = vzip1_s32(*(int32x2_t *)v10.f32, v101);
              }
              v93.i64[0] = v68[1].i64[0];
              v93.u64[1] = (unint64_t)v102;
            }
            v94 = *(int32x4_t *)v68;
          }
          else
          {
            v9.f32[0] = fminf((float)(int)v87, 8.0);
            v92 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 0);
            v11 = (float16x8_t)vcgtq_f32(v92, (float32x4_t)xmmword_185004970);
            v12 = *(float16x8_t *)v68;
            v93 = (int32x4_t)vandq_s8(v68[1], (int8x16_t)vcgtq_f32(v92, (float32x4_t)xmmword_185004980));
            v94 = (int32x4_t)vandq_s8(*v68, (int8x16_t)v11);
          }
          v68 = (int8x16_t *)((char *)v68 + 20);
          if (v87 >= 6)
          {
            v12 = v66[1];
            goto LABEL_73;
          }
LABEL_93:
          v103 = v88 + v86;
          if ((v89 + v86) < 8)
          {
            if ((v89 + v86) < 4)
            {
              if (v103)
              {
                if (v103 == 1)
                {
                  v11.i16[0] = v66->i16[0];
                  v12.i64[0] = 0;
                }
                else
                {
                  v11.i32[0] = v66->i32[0];
                  v12.i16[0] = v66->i16[2];
                }
                *(int32x2_t *)v11.i8 = vzip1_s32(*(int32x2_t *)v11.i8, *(int32x2_t *)v12.i8);
              }
              else
              {
                v11.i64[0] = 0;
              }
              v11.i64[1] = 0;
            }
            else
            {
              if (v103 == 4)
              {
                v12.i64[0] = 0;
              }
              else if (v103 == 5)
              {
                v12.i16[0] = v66->i16[4];
              }
              else
              {
                if (v88 + v86 == 6)
                  v11.i64[0] = 0;
                else
                  v11.i16[0] = v66->i16[6];
                v12.i32[0] = v66->i32[2];
                *(int32x2_t *)v12.i8 = vzip1_s32(*(int32x2_t *)v12.i8, *(int32x2_t *)v11.i8);
              }
              v11.i64[0] = v66->i64[0];
              v11.i64[1] = v12.i64[0];
            }
            v12 = 0uLL;
            goto LABEL_74;
          }
          if (v103 == 8)
          {
            v12 = 0uLL;
          }
          else if ((unint64_t)(v103 - 8) < 4)
          {
            if (v90 == 9)
            {
              v11.i16[0] = v66[1].i16[0];
              v12.i64[0] = 0;
            }
            else
            {
              v11.i32[0] = v66[1].i32[0];
              v12.i16[0] = v66[1].i16[2];
            }
            *(int32x2_t *)v12.i8 = vzip1_s32(*(int32x2_t *)v11.i8, *(int32x2_t *)v12.i8);
          }
          else
          {
            if (v103 == 12)
            {
              v11.i64[0] = 0;
            }
            else if (v103 == 13)
            {
              v11.i16[0] = v66[1].i16[4];
            }
            else
            {
              v104 = 0;
              if ((v103 & 1) == 0)
                v104 = v66[1].i16[7];
              v11.i32[0] = v66[1].i32[2];
              v11.i16[2] = v66[1].i16[6];
              v11.i16[3] = v104;
            }
            v12.i64[0] = v66[1].i64[0];
            v12.i64[1] = v11.i64[0];
          }
LABEL_73:
          v11 = *v66;
LABEL_74:
          v66 = (float16x8_t *)((char *)v66 + 30);
          v95 = vcvtq_f32_f16(*(float16x4_t *)v12.i8);
          v12 = (float16x8_t)vcvt_hight_f32_f16(v12);
          v96 = vcvtq_f32_f16(*(float16x4_t *)v11.i8);
          v11 = (float16x8_t)vcvt_hight_f32_f16(v11);
          v97 = (float32x4_t)vzip1q_s32(v93, v93);
          v97.i32[2] = v93.i32[0];
          v10 = (float32x4_t)vextq_s8((int8x16_t)v94, (int8x16_t)vdupq_laneq_s32(v94, 3), 8uLL);
          v98 = (float32x4_t)vzip1q_s32(v94, v94);
          v98.i32[2] = v94.i32[0];
          v99 = (int32x4_t)vextq_s8((int8x16_t)v94, (int8x16_t)v94, 4uLL);
          v9 = (float32x4_t)vzip1q_s32(v99, v99);
          v70 = vmlaq_f32(v70, (float32x4_t)v11, v9);
          v69 = vmlaq_f32(v69, v96, v98);
          v72 = vmlaq_f32(v72, (float32x4_t)v12, v97);
          v71 = vmlaq_f32(v71, v95, v10);
          v86 -= 15;
          v100 = (uint64_t)v87 <= 5;
          v87 -= 5;
        }
        while (!v100);
      }
LABEL_131:
      v9 = (float32x4_t)vextq_s8((int8x16_t)v72, (int8x16_t)v72, 4uLL).u64[0];
      v105 = vaddq_f32(v69, (float32x4_t)vextq_s8((int8x16_t)v71, (int8x16_t)v72, 4uLL));
      v106 = (int8x16_t)vaddq_f32(v70, v9);
      *(float16x4_t *)v105.f32 = vcvt_f16_f32(vaddq_f32((float32x4_t)vextq_s8(v106, (int8x16_t)vaddq_f32(v71, (float32x4_t)0), 8uLL), vaddq_f32(v105, (float32x4_t)vextq_s8((int8x16_t)v105, v106, 0xCuLL))));
      *(_DWORD *)v33 = v105.i32[0];
      *(_WORD *)(v33 + 4) = vdup_lane_s16(*(int16x4_t *)v105.f32, 2).u16[0];
      v33 += 6;
      ++v34;
      v35 = (int *)((char *)v35 + v18);
      if (v34 == a5)
        goto LABEL_132;
    }
  }
  return result;
}

float32x2_t *resample_horizontal<half,half,4,false>(float32x2_t *result, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  _BOOL4 v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  float16x4_t *v23;
  unint64_t v24;
  float32x2_t *v25;
  float16x8_t *v26;
  float16x8_t *v27;
  float32x2_t *v28;
  int v29;
  unint64_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float16x8_t v36;
  float16x8_t v37;
  float16x8_t v38;
  int v39;
  uint64_t v40;
  __int32 v41;
  int v42;
  float16x8_t *v43;
  unint64_t v44;
  float32x2_t *v45;
  uint64_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  unint64_t v51;
  float32x4_t v52;
  float16x8_t v53;
  float16x8_t v54;
  int32x2_t v55;
  int32x2_t v56;
  int v57;
  unint64_t v58;
  float32x4_t v59;
  float16x8_t v60;
  float16x8_t v61;
  BOOL v62;
  unsigned int v63;
  uint64_t v64;
  int32x2_t v65;
  int32x2_t v66;

  if ((int)a4 >= 1 && a8 >= 1)
  {
    v8 = 0;
    v9 = *a6;
    v10 = *a7;
    v11 = v10 >> 3;
    v12 = 4 * a2;
    v13 = v12 + 8;
    v14 = (char *)result + (v12 + 8) * a4;
    if (v10 >> 3 >= *(int *)&v14[-v12 - 4] + (uint64_t)*(int *)&v14[-v12 - 8])
      v11 = *(int *)&v14[-v12 - 4] + (uint64_t)*(int *)&v14[-v12 - 8];
    v15 = (4 * a2 + 23) / (4 * a2 + 8);
    if (a2 > 1)
      v15 = 1;
    v16 = a2 > 3;
    v17 = (a2 & 3) == 0;
    LODWORD(v18) = (8 * (a2 & 3)) | 0x20;
    if ((a2 & 3) != 0)
      v18 = v18;
    else
      v18 = 64;
    v19 = a4 - v15;
    v20 = a2 >> 2;
    if (!v17)
      v16 = 0;
    v21 = ((v18 - 1) & 0xFFFFFFFFFFFFFFE0) + 32 * (v20 - v16);
    v22 = a8;
    if (v19 <= 1)
      v19 = 1;
    do
    {
      v23 = *(float16x4_t **)(a5 + 8 * v8);
      if (a4 <= v15)
      {
        v24 = 0;
        v25 = result;
      }
      else
      {
        v24 = 0;
        v25 = result;
        while (1)
        {
          v26 = (float16x8_t *)(v9 + 8 * v25->i32[0]);
          v27 = (float16x8_t *)((char *)v26 + v21);
          if ((unint64_t)v26->u64 + v21 > 8 * v11 + v9)
            break;
          if (v26 >= v27)
          {
            v31.i64[0] = 0x8000000080000000;
            v31.i64[1] = 0x8000000080000000;
            v32.i64[0] = 0x8000000080000000;
            v32.i64[1] = 0x8000000080000000;
            v33.i64[0] = 0x8000000080000000;
            v33.i64[1] = 0x8000000080000000;
            v34.i64[0] = 0x8000000080000000;
            v34.i64[1] = 0x8000000080000000;
          }
          else
          {
            v28 = v25 + 1;
            v29 = v25->i32[1];
            v30 = (unint64_t)&v27[-2];
            v31.i64[0] = 0x8000000080000000;
            v31.i64[1] = 0x8000000080000000;
            v32.i64[0] = 0x8000000080000000;
            v32.i64[1] = 0x8000000080000000;
            v33.i64[0] = 0x8000000080000000;
            v33.i64[1] = 0x8000000080000000;
            v34.i64[0] = 0x8000000080000000;
            v34.i64[1] = 0x8000000080000000;
            while ((unint64_t)v26 < v30)
            {
              v35 = *(float32x4_t *)v28->f32;
              v28 += 2;
              v37 = *v26;
              v36 = v26[1];
              v26 += 2;
              v31 = vmlaq_n_f32(v31, vcvtq_f32_f16(*(float16x4_t *)v37.i8), v35.f32[0]);
              v32 = vmlaq_lane_f32(v32, vcvt_hight_f32_f16(v37), *(float32x2_t *)v35.f32, 1);
              v33 = vmlaq_laneq_f32(v33, vcvtq_f32_f16(*(float16x4_t *)v36.i8), v35, 2);
              v34 = vmlaq_laneq_f32(v34, vcvt_hight_f32_f16(v36), v35, 3);
              v29 -= 4;
            }
            if (v29 >= 1)
            {
              v38 = v26[1];
              v31 = vmlaq_n_f32(v31, vcvtq_f32_f16(*(float16x4_t *)v26->i8), COERCE_FLOAT(*(_OWORD *)v28->f32));
              v32 = vmlaq_lane_f32(v32, vcvt_hight_f32_f16(*v26), *v28, 1);
              v33 = vmlaq_laneq_f32(v33, vcvtq_f32_f16(*(float16x4_t *)v38.i8), *(float32x4_t *)v28->f32, 2);
              v34 = vmlaq_laneq_f32(v34, vcvt_hight_f32_f16(v38), *(float32x4_t *)v28->f32, 3);
            }
          }
          *v23++ = vcvt_f16_f32(vaddq_f32(vaddq_f32(v31, v33), vaddq_f32(v32, v34)));
          ++v24;
          v25 = (float32x2_t *)((char *)v25 + v13);
          if (v24 == v19)
          {
            v24 = v19;
            break;
          }
        }
      }
      if (v24 < a4)
      {
        do
        {
          v39 = v25->i32[1];
          v40 = v25->i32[0];
          if ((int)v40 >= (int)v11)
            v41 = v11;
          else
            v41 = v25->i32[0];
          v42 = v11 - v41;
          if (v39 >= v42)
            v39 = v42;
          if (v39 < 1)
          {
            v47.i64[0] = 0x8000000080000000;
            v47.i64[1] = 0x8000000080000000;
            v48.i64[0] = 0x8000000080000000;
            v48.i64[1] = 0x8000000080000000;
            v49.i64[0] = 0x8000000080000000;
            v49.i64[1] = 0x8000000080000000;
            v50.i64[0] = 0x8000000080000000;
            v50.i64[1] = 0x8000000080000000;
          }
          else
          {
            v43 = (float16x8_t *)(v9 + 8 * v40);
            v44 = (unint64_t)&v43[-2] + 8 * v39;
            v45 = v25 + 1;
            if ((unint64_t)v43 >= v44)
            {
              v47.i64[0] = 0x8000000080000000;
              v47.i64[1] = 0x8000000080000000;
              v48.i64[0] = 0x8000000080000000;
              v48.i64[1] = 0x8000000080000000;
              v49.i64[0] = 0x8000000080000000;
              v49.i64[1] = 0x8000000080000000;
              v50.i64[0] = 0x8000000080000000;
              v50.i64[1] = 0x8000000080000000;
              goto LABEL_54;
            }
            v46 = v39;
            v47.i64[0] = 0x8000000080000000;
            v47.i64[1] = 0x8000000080000000;
            v48.i64[0] = 0x8000000080000000;
            v48.i64[1] = 0x8000000080000000;
            v49.i64[0] = 0x8000000080000000;
            v49.i64[1] = 0x8000000080000000;
            v50.i64[0] = 0x8000000080000000;
            v50.i64[1] = 0x8000000080000000;
            do
            {
              v51 = v14 - (char *)v45;
              if ((unint64_t)(v14 - (char *)v45) >= 0x10)
                v51 = 16;
              if (v51 < 0x10)
              {
                if (v46)
                {
                  if (v46 == 1)
                  {
                    v52 = (float32x4_t)v45->u32[0];
                  }
                  else
                  {
                    v55 = 0;
                    if ((_DWORD)v46 != 2)
                    {
                      v56 = 0;
                      if ((v39 & 1) == 0)
                        v56.i32[0] = v45[1].i32[1];
                      v55.i32[0] = v45[1].i32[0];
                      v55 = vzip1_s32(v55, v56);
                    }
                    *(float32x2_t *)v52.f32 = *v45;
                    *(int32x2_t *)&v52.u32[2] = v55;
                  }
                }
                else
                {
                  v52 = 0uLL;
                }
              }
              else
              {
                v52 = *(float32x4_t *)v45->f32;
              }
              v45 += 2;
              v54 = *v43;
              v53 = v43[1];
              v43 += 2;
              v47 = vmlaq_n_f32(v47, vcvtq_f32_f16(*(float16x4_t *)v54.i8), v52.f32[0]);
              v48 = vmlaq_lane_f32(v48, vcvt_hight_f32_f16(v54), *(float32x2_t *)v52.f32, 1);
              v49 = vmlaq_laneq_f32(v49, vcvtq_f32_f16(*(float16x4_t *)v53.i8), v52, 2);
              v50 = vmlaq_laneq_f32(v50, vcvt_hight_f32_f16(v53), v52, 3);
              v46 -= 4;
            }
            while ((unint64_t)v43 < v44);
            if ((int)v46 >= 1)
            {
              v39 = v46;
LABEL_54:
              v57 = v39;
              while (2)
              {
                v58 = v14 - (char *)v45;
                if ((unint64_t)(v14 - (char *)v45) >= 0x10)
                  v58 = 16;
                if (v58 >= 0x10)
                {
                  v59 = *(float32x4_t *)v45->f32;
                  goto LABEL_59;
                }
                if (v57 == 1)
                {
                  v63 = v45->i32[0];
                  v45 += 2;
                  v59 = (float32x4_t)v63;
                  v61.i64[0] = v43->i64[0];
                  goto LABEL_67;
                }
                v65 = 0;
                if (v57 != 2)
                {
                  v66 = 0;
                  if ((v39 & 1) == 0)
                    v66.i32[0] = v45[1].i32[1];
                  v65.i32[0] = v45[1].i32[0];
                  v65 = vzip1_s32(v65, v66);
                }
                *(float32x2_t *)v59.f32 = *v45;
                *(int32x2_t *)&v59.u32[2] = v65;
LABEL_59:
                v45 += 2;
                if (v57 >= 4)
                {
                  v60 = v43[1];
                  goto LABEL_61;
                }
                if ((v57 & 0x3FFFFFFE) != 0)
                {
                  v60 = 0uLL;
                  if (v57 != 2)
                    v60.i64[0] = v43[1].i64[0];
LABEL_61:
                  v61 = *v43;
                }
                else
                {
                  v61.i64[0] = v43->i64[0];
                  if (v57 == 1)
LABEL_67:
                    v64 = 0;
                  else
                    v64 = v43->i64[1];
                  v61.i64[1] = v64;
                  v60 = 0uLL;
                }
                v43 += 2;
                v47 = vmlaq_n_f32(v47, vcvtq_f32_f16(*(float16x4_t *)v61.i8), v59.f32[0]);
                v48 = vmlaq_lane_f32(v48, vcvt_hight_f32_f16(v61), *(float32x2_t *)v59.f32, 1);
                v49 = vmlaq_laneq_f32(v49, vcvtq_f32_f16(*(float16x4_t *)v60.i8), v59, 2);
                v50 = vmlaq_laneq_f32(v50, vcvt_hight_f32_f16(v60), v59, 3);
                v62 = __OFSUB__(v57, 4);
                v57 -= 4;
                if ((v57 < 0) ^ v62 | (v57 == 0))
                  break;
                continue;
              }
            }
          }
          *v23++ = vcvt_f16_f32(vaddq_f32(vaddq_f32(v47, v49), vaddq_f32(v48, v50)));
          ++v24;
          v25 = (float32x2_t *)((char *)v25 + v13);
        }
        while (v24 != a4);
      }
      v9 += v10;
      ++v8;
    }
    while (v8 != v22);
  }
  return result;
}

int *resample_horizontal<half,half,2,false>(int *result, unsigned int a2, double a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t *a7, int *a8, int a9)
{
  float32x4_t v9;
  float32x4_t v10;
  float16x8_t v11;
  float16x8_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  _BOOL4 v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  float32x4_t v27;
  unsigned int v28;
  uint64_t v29;
  float32x4_t v30;
  int8x16_t v31;
  int8x16_t v32;
  uint64_t v33;
  int8x16_t v34;
  int8x16_t v35;
  _DWORD *v36;
  unint64_t v37;
  int *v38;
  float16x8_t *v39;
  float16x8_t *v40;
  int8x16_t *v41;
  int v42;
  unint64_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int32x4_t v50;
  int32x4_t v51;
  float16x8_t v52;
  float16x8_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  float16x8_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  int v65;
  uint64_t v66;
  int v67;
  int v68;
  float16x8_t *v69;
  unint64_t v70;
  int8x16_t *v71;
  uint64_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  unint64_t v77;
  int32x4_t v78;
  int32x4_t v79;
  float16x8_t v80;
  float16x8_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  uint64_t v86;
  int32x2_t v87;
  int32x2_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  float32x4_t v93;
  int8x16_t v94;
  int32x4_t v95;
  int32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  uint64_t v101;
  int32x2_t v102;
  int32x2_t v103;
  int32x2_t v104;
  int32x2_t v105;
  int32x2_t v106;
  int32x2_t v107;
  int32x2_t v108;
  float32x4_t v109;

  if ((int)a5 >= 1 && a9 >= 1)
  {
    v13 = 0;
    v14 = *a7;
    v15 = *a8;
    v16 = v15 >> 2;
    v17 = a5;
    v18 = 4 * a2;
    v19 = v18 + 8;
    v20 = (char *)result + (v18 + 8) * a5;
    if (v15 >> 2 >= *(int *)&v20[-v18 - 4] + (uint64_t)*(int *)&v20[-v18 - 8])
      v16 = *(int *)&v20[-v18 - 4] + (uint64_t)*(int *)&v20[-v18 - 8];
    v21 = (4 * a2 + 39) / (4 * a2 + 8);
    if (a2 > 5)
      v21 = 1;
    v22 = a5 - v21;
    v23 = a2 > 7;
    v24 = a2 & 7;
    if ((a2 & 7) != 0)
      v23 = 0;
    else
      v24 = 8;
    v25 = 16 * ((a2 >> 3) - v23);
    *(float *)&a3 = (float)v24;
    v26 = (4 * (_BYTE)v24 + 31) & 0x60;
    v27 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    if (a2 >= 8)
      v28 = 8;
    else
      v28 = a2;
    *(float *)&a3 = (float)v28;
    v29 = v26 + 2 * v25;
    v30 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    v31 = (int8x16_t)vcgtq_f32(v30, (float32x4_t)xmmword_185004980);
    v32 = (int8x16_t)vcgtq_f32(v30, (float32x4_t)xmmword_185004970);
    v33 = a9;
    if (v22 <= 1)
      v22 = 1;
    v34 = (int8x16_t)vcgtq_f32(v27, (float32x4_t)xmmword_185004970);
    v35 = (int8x16_t)vcgtq_f32(v27, (float32x4_t)xmmword_185004980);
    do
    {
      v36 = *(_DWORD **)(a6 + 8 * v13);
      if (v17 <= v21)
      {
        v37 = 0;
        v38 = result;
      }
      else
      {
        v37 = 0;
        v38 = result;
        do
        {
          v39 = (float16x8_t *)(v14 + 4 * *v38);
          v40 = (float16x8_t *)((char *)v39 + v29);
          if ((unint64_t)v39->u64 + v29 > 4 * v16 + v14)
            goto LABEL_29;
          if (v39 >= v40)
          {
            v44.i64[0] = 0x8000000080000000;
            v44.i64[1] = 0x8000000080000000;
            v45.i64[0] = 0x8000000080000000;
            v45.i64[1] = 0x8000000080000000;
            v46.i64[0] = 0x8000000080000000;
            v46.i64[1] = 0x8000000080000000;
            v47.i64[0] = 0x8000000080000000;
            v47.i64[1] = 0x8000000080000000;
          }
          else
          {
            v41 = (int8x16_t *)(v38 + 2);
            v42 = v38[1];
            v43 = (unint64_t)&v40[-2];
            v44.i64[0] = 0x8000000080000000;
            v44.i64[1] = 0x8000000080000000;
            v45.i64[0] = 0x8000000080000000;
            v45.i64[1] = 0x8000000080000000;
            v46.i64[0] = 0x8000000080000000;
            v46.i64[1] = 0x8000000080000000;
            v47.i64[0] = 0x8000000080000000;
            v47.i64[1] = 0x8000000080000000;
            while ((unint64_t)v39 < v43)
            {
              v48 = *v41;
              v49 = v41[1];
              v41 += 2;
              v50 = (int32x4_t)vandq_s8(v49, v31);
              v51 = (int32x4_t)vandq_s8(v48, v32);
              v53 = *v39;
              v52 = v39[1];
              v39 += 2;
              v54 = vcvtq_f32_f16(*(float16x4_t *)v53.i8);
              v12 = (float16x8_t)vcvt_hight_f32_f16(v53);
              v55 = vcvtq_f32_f16(*(float16x4_t *)v52.i8);
              v11 = (float16x8_t)vcvt_hight_f32_f16(v52);
              v56 = (float32x4_t)vzip1q_s32(v51, v51);
              v9 = (float32x4_t)vzip2q_s32(v51, v51);
              v57 = (float32x4_t)vzip1q_s32(v50, v50);
              v10 = (float32x4_t)vzip2q_s32(v50, v50);
              v47 = vmlaq_f32(v47, (float32x4_t)v11, v10);
              v46 = vmlaq_f32(v46, v55, v57);
              v45 = vmlaq_f32(v45, (float32x4_t)v12, v9);
              v44 = vmlaq_f32(v44, v54, v56);
              v42 -= 8;
            }
            if (v42 >= 1)
            {
              v58 = (int32x4_t)vandq_s8(v41[1], v35);
              v59 = (int32x4_t)vandq_s8(*v41, v34);
              v60 = v39[1];
              v12 = (float16x8_t)vcvt_hight_f32_f16(*v39);
              v61 = vcvtq_f32_f16(*(float16x4_t *)v60.i8);
              v11 = (float16x8_t)vcvt_hight_f32_f16(v60);
              v62 = (float32x4_t)vzip1q_s32(v59, v59);
              v9 = (float32x4_t)vzip2q_s32(v59, v59);
              v63 = (float32x4_t)vzip1q_s32(v58, v58);
              v10 = (float32x4_t)vzip2q_s32(v58, v58);
              v47 = vmlaq_f32(v47, (float32x4_t)v11, v10);
              v46 = vmlaq_f32(v46, v61, v63);
              v45 = vmlaq_f32(v45, (float32x4_t)v12, v9);
              v44 = vmlaq_f32(v44, vcvtq_f32_f16(*(float16x4_t *)v39->i8), v62);
            }
          }
          v64 = vaddq_f32(vaddq_f32(v44, v46), vaddq_f32(v45, v47));
          *(float32x2_t *)v64.f32 = vadd_f32(*(float32x2_t *)v64.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL));
          *v36++ = vcvt_f16_f32(v64).u32[0];
          ++v37;
          v38 = (int *)((char *)v38 + v19);
        }
        while (v37 != v22);
        v37 = v22;
      }
LABEL_29:
      if (v37 >= v17)
        goto LABEL_117;
      do
      {
        v65 = v38[1];
        v66 = *v38;
        if ((int)v66 >= (int)v16)
          v67 = v16;
        else
          v67 = *v38;
        v68 = v16 - v67;
        if (v65 >= v68)
          v65 = v68;
        if (v65 < 1)
        {
          v73.i64[0] = 0x8000000080000000;
          v73.i64[1] = 0x8000000080000000;
          v74.i64[0] = 0x8000000080000000;
          v74.i64[1] = 0x8000000080000000;
          v75.i64[0] = 0x8000000080000000;
          v75.i64[1] = 0x8000000080000000;
          v76.i64[0] = 0x8000000080000000;
          v76.i64[1] = 0x8000000080000000;
          goto LABEL_116;
        }
        v69 = (float16x8_t *)(v14 + 4 * v66);
        v70 = (unint64_t)&v69[-2] + 4 * v65;
        v71 = (int8x16_t *)(v38 + 2);
        if ((unint64_t)v69 >= v70)
        {
          v73.i64[0] = 0x8000000080000000;
          v73.i64[1] = 0x8000000080000000;
          v74.i64[0] = 0x8000000080000000;
          v74.i64[1] = 0x8000000080000000;
          v75.i64[0] = 0x8000000080000000;
          v75.i64[1] = 0x8000000080000000;
          v76.i64[0] = 0x8000000080000000;
          v76.i64[1] = 0x8000000080000000;
          goto LABEL_66;
        }
        v72 = v65;
        v73.i64[0] = 0x8000000080000000;
        v73.i64[1] = 0x8000000080000000;
        v74.i64[0] = 0x8000000080000000;
        v74.i64[1] = 0x8000000080000000;
        v75.i64[0] = 0x8000000080000000;
        v75.i64[1] = 0x8000000080000000;
        v76.i64[0] = 0x8000000080000000;
        v76.i64[1] = 0x8000000080000000;
        do
        {
          v77 = v20 - (char *)v71;
          if ((unint64_t)(v20 - (char *)v71) >= 0x20)
            v77 = 32;
          if (v77 >= 0x20)
          {
            v78 = (int32x4_t)vandq_s8(v71[1], v31);
            v79 = (int32x4_t)vandq_s8(*v71, v32);
            goto LABEL_42;
          }
          if (!(_DWORD)v72)
          {
            v79 = 0uLL;
LABEL_55:
            v78 = 0uLL;
            goto LABEL_42;
          }
          if (v72 < 4)
          {
            if (v72 == 1)
            {
              v79 = (int32x4_t)v71->u32[0];
            }
            else
            {
              v86 = 0;
              if ((_DWORD)v72 != 2)
                LODWORD(v86) = v71->i32[2];
              v79.i64[0] = v71->i64[0];
              v79.i64[1] = v86;
            }
            goto LABEL_55;
          }
          if (v72 == 4)
          {
            v78 = 0uLL;
          }
          else if (v72 == 5)
          {
            v78 = (int32x4_t)v71[1].u32[0];
          }
          else
          {
            v87 = 0;
            if ((_DWORD)v72 != 6)
            {
              v88 = 0;
              if ((v65 & 1) == 0)
                v88.i32[0] = v71[1].i32[3];
              v10.i32[0] = v71[1].i32[2];
              v87 = vzip1_s32(*(int32x2_t *)v10.f32, v88);
            }
            v78.i64[0] = v71[1].i64[0];
            v78.u64[1] = (unint64_t)v87;
          }
          v79 = *(int32x4_t *)v71;
LABEL_42:
          v71 += 2;
          v81 = *v69;
          v80 = v69[1];
          v69 += 2;
          v82 = vcvtq_f32_f16(*(float16x4_t *)v81.i8);
          v83 = vcvtq_f32_f16(*(float16x4_t *)v80.i8);
          v11 = (float16x8_t)vcvt_hight_f32_f16(v80);
          v12 = (float16x8_t)vcvt_hight_f32_f16(v81);
          v84 = (float32x4_t)vzip1q_s32(v79, v79);
          v85 = (float32x4_t)vzip1q_s32(v78, v78);
          v10 = (float32x4_t)vzip2q_s32(v78, v78);
          v9 = (float32x4_t)vzip2q_s32(v79, v79);
          v74 = vmlaq_f32(v74, (float32x4_t)v12, v9);
          v76 = vmlaq_f32(v76, (float32x4_t)v11, v10);
          v75 = vmlaq_f32(v75, v83, v85);
          v73 = vmlaq_f32(v73, v82, v84);
          v72 -= 8;
        }
        while ((unint64_t)v69 < v70);
        if ((int)v72 >= 1)
        {
          v65 = v72;
LABEL_66:
          v89 = v65 + 8;
          v90 = 2 * v65;
          while (2)
          {
            v91 = v89 - 8;
            v92 = v20 - (char *)v71;
            if ((unint64_t)(v20 - (char *)v71) >= 0x20)
              v92 = 32;
            if (v92 >= 0x20)
            {
              v9.f32[0] = fminf((float)(v89 - 8), 8.0);
              v93 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 0);
              v94 = (int8x16_t)vcgtq_f32(v93, (float32x4_t)xmmword_185004970);
              v11 = *(float16x8_t *)v71;
              v12 = (float16x8_t)v71[1];
              v95 = (int32x4_t)vandq_s8((int8x16_t)v12, (int8x16_t)vcgtq_f32(v93, (float32x4_t)xmmword_185004980));
              v96 = (int32x4_t)vandq_s8(*v71, v94);
              goto LABEL_71;
            }
            if ((unint64_t)v91 < 4)
            {
              if (v89 == 9)
              {
                v96 = (int32x4_t)v71->u32[0];
              }
              else
              {
                v101 = 0;
                if (v89 != 10)
                  LODWORD(v101) = v71->i32[2];
                v96.i64[0] = v71->i64[0];
                v96.i64[1] = v101;
              }
              v95 = 0uLL;
              v71 += 2;
            }
            else
            {
              if ((_DWORD)v89 == 12)
              {
                v95 = 0uLL;
              }
              else if ((_DWORD)v89 == 13)
              {
                v95 = (int32x4_t)v71[1].u32[0];
              }
              else
              {
                v106 = 0;
                if (v89 != 14)
                {
                  v107 = 0;
                  if ((v65 & 1) == 0)
                    v107.i32[0] = v71[1].i32[3];
                  v106.i32[0] = v71[1].i32[2];
                  v106 = vzip1_s32(v106, v107);
                }
                v95.i64[0] = v71[1].i64[0];
                v95.u64[1] = (unint64_t)v106;
              }
              v96 = *(int32x4_t *)v71;
LABEL_71:
              v71 += 2;
              if ((unint64_t)v91 >= 8)
              {
                v11 = v69[1];
                goto LABEL_73;
              }
            }
            if (v91 < 4)
            {
              v104 = 0;
              if (v91 < 2)
              {
                if (v89 != 9)
                  v104.i32[0] = v69->i32[1];
                v12.i32[0] = v69->i32[0];
                *(int32x2_t *)v12.i8 = vzip1_s32(*(int32x2_t *)v12.i8, v104);
              }
              else
              {
                if (v89 != 10)
                {
                  v105 = 0;
                  if (v89 != 11)
                    v105.i16[0] = v69->i16[6];
                  v12.i32[0] = v69->i32[2];
                  v104 = vzip1_s32(*(int32x2_t *)v12.i8, v105);
                }
                v12.i64[0] = v69->i64[0];
                v12.u64[1] = (unint64_t)v104;
              }
              v11 = 0uLL;
            }
            else
            {
              if ((v90 & 0xFFFFFFFE) == 8)
              {
                v11 = 0uLL;
              }
              else if ((unint64_t)(v90 & 0xFFFFFFFE) - 8 < 4)
              {
                v108 = 0;
                if (v89 != 13)
                  v108.i16[0] = v69[1].i16[2];
                v12.i32[0] = v69[1].i32[0];
                *(int32x2_t *)v11.i8 = vzip1_s32(*(int32x2_t *)v12.i8, v108);
              }
              else
              {
                v102 = 0;
                if (v89 != 14)
                {
                  v103 = 0;
                  if (v89 != 15)
                    v103.i32[0] = v69[1].i32[3];
                  v102.i32[0] = v69[1].i32[2];
                  v102 = vzip1_s32(v102, v103);
                }
                v11.i64[0] = v69[1].i64[0];
                v11.u64[1] = (unint64_t)v102;
              }
LABEL_73:
              v12 = *v69;
            }
            v69 += 2;
            v97 = vcvtq_f32_f16(*(float16x4_t *)v11.i8);
            v11 = (float16x8_t)vcvt_hight_f32_f16(v11);
            v98 = vcvtq_f32_f16(*(float16x4_t *)v12.i8);
            v12 = (float16x8_t)vcvt_hight_f32_f16(v12);
            v99 = (float32x4_t)vzip1q_s32(v95, v95);
            v9 = (float32x4_t)vzip2q_s32(v95, v95);
            v100 = (float32x4_t)vzip1q_s32(v96, v96);
            v10 = (float32x4_t)vzip2q_s32(v96, v96);
            v74 = vmlaq_f32(v74, (float32x4_t)v12, v10);
            v90 -= 16;
            v89 -= 8;
            v73 = vmlaq_f32(v73, v98, v100);
            v76 = vmlaq_f32(v76, (float32x4_t)v11, v9);
            v75 = vmlaq_f32(v75, v97, v99);
            if (v91 <= 8)
              break;
            continue;
          }
        }
LABEL_116:
        v109 = vaddq_f32(vaddq_f32(v73, v75), vaddq_f32(v74, v76));
        *(float32x2_t *)v109.f32 = vadd_f32(*(float32x2_t *)v109.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v109, (int8x16_t)v109, 8uLL));
        *v36++ = vcvt_f16_f32(v109).u32[0];
        ++v37;
        v38 = (int *)((char *)v38 + v19);
      }
      while (v37 != v17);
LABEL_117:
      v14 += v15;
      ++v13;
    }
    while (v13 != v33);
  }
  return result;
}

int *resample_horizontal<half,half,5,false>(int *result, unsigned int a2, double a3, double a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t *a8, int *a9, int a10)
{
  float32x4_t v10;
  float32x4_t v11;
  float16x8_t v12;
  float16x8_t v13;
  float32x4_t v14;
  float16x8_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  unsigned int v24;
  _BOOL4 v25;
  uint64_t v26;
  unint64_t v27;
  float32x4_t v28;
  unsigned int v29;
  float32x4_t v30;
  int8x16_t v31;
  int8x16_t v32;
  uint64_t v33;
  int8x16_t v34;
  float16x4_t *v35;
  unint64_t v36;
  int *v37;
  unint64_t v38;
  unint64_t v39;
  int8x16_t *v40;
  int v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  int32x4_t v50;
  float16x8_t v51;
  float16x8_t v52;
  float16x8_t v53;
  float16x8_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  float16x8_t v62;
  float16x8_t v63;
  float16x8_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  int32x4_t v72;
  float32x4_t v73;
  int8x16_t v74;
  int v75;
  int v76;
  int v77;
  float16x8_t *v78;
  unint64_t v79;
  int8x16_t *v80;
  float32x4_t v81;
  uint64_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  unint64_t v90;
  float16x8_t v91;
  float16x8_t v92;
  float16x8_t v93;
  float16x8_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  uint64_t v101;
  int32x2_t v102;
  int32x2_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  unint64_t v107;
  int v108;
  uint64_t v109;
  unint64_t v110;
  float32x4_t v111;
  int8x16_t v112;
  float16x8_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  BOOL v120;
  int32x2_t v121;
  unsigned int v122;
  unint64_t v123;
  int32x2_t v124;
  int32x2_t v125;
  int32x2_t v126;
  __int16 v127;
  float32x4_t v128;
  float32x4_t v129;
  int32x4_t v130;
  float32x4_t v131;
  int8x16_t v132;
  uint64_t v133;

  if ((int)a6 >= 1 && a10 >= 1)
  {
    v16 = 0;
    v17 = *a8;
    v18 = *a9;
    v19 = v18 / 0xA;
    v20 = 4 * a2;
    v21 = v20 + 8;
    v22 = (char *)result + (v20 + 8) * a6;
    if (v18 / 0xA >= *(int *)&v22[-v20 - 4] + (uint64_t)*(int *)&v22[-v20 - 8])
      v19 = *(int *)&v22[-v20 - 4] + (uint64_t)*(int *)&v22[-v20 - 8];
    v23 = (4 * a2 + 39) / (4 * a2 + 8);
    if (a2 > 5)
      v23 = 1;
    v24 = a2 % 6;
    v25 = a2 > 5;
    if (a2 % 6)
      v25 = 0;
    else
      v24 = 6;
    v26 = ((10 * v24 + 63) & 0x3FFFFFFC0) + 60 * (a2 / 6 - v25);
    v27 = a6 - v23;
    *(float *)&a3 = (float)v24;
    v28 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    if (a2 >= 6)
      v29 = 6;
    else
      v29 = a2;
    *(float *)&a4 = (float)v29;
    v30 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
    v31 = (int8x16_t)vcgtq_f32(v30, (float32x4_t)xmmword_185004980);
    v32 = (int8x16_t)vcgtq_f32(v30, (float32x4_t)xmmword_185004970);
    v33 = a10;
    if (v27 <= 1)
      v27 = 1;
    v34 = (int8x16_t)vcgtq_f32(v28, (float32x4_t)xmmword_185004970);
    do
    {
      v35 = *(float16x4_t **)(a7 + 8 * v16);
      if (a6 <= v23)
      {
        v36 = 0;
        v37 = result;
      }
      else
      {
        v36 = 0;
        v37 = result;
        do
        {
          v38 = v17 + 10 * *v37;
          v39 = v26 + v38;
          if (v26 + v38 > 10 * v19 + v17)
            goto LABEL_29;
          if (v38 >= v39)
          {
            v42.i64[0] = 0x8000000080000000;
            v42.i64[1] = 0x8000000080000000;
            v43.i64[0] = 0x8000000080000000;
            v43.i64[1] = 0x8000000080000000;
            v44.i64[0] = 0x8000000080000000;
            v44.i64[1] = 0x8000000080000000;
            v45.i64[0] = 0x8000000080000000;
            v45.i64[1] = 0x8000000080000000;
            v46.i64[0] = 0x8000000080000000;
            v46.i64[1] = 0x8000000080000000;
            v47.i64[0] = 0x8000000080000000;
            v47.i64[1] = 0x8000000080000000;
            v48.i64[0] = 0x8000000080000000;
            v48.i64[1] = 0x8000000080000000;
            v49.i64[0] = 0x8000000080000000;
            v49.i64[1] = 0x8000000080000000;
          }
          else
          {
            v40 = (int8x16_t *)(v37 + 2);
            v41 = v37[1];
            v42.i64[0] = 0x8000000080000000;
            v42.i64[1] = 0x8000000080000000;
            v43.i64[0] = 0x8000000080000000;
            v43.i64[1] = 0x8000000080000000;
            v44.i64[0] = 0x8000000080000000;
            v44.i64[1] = 0x8000000080000000;
            v45.i64[0] = 0x8000000080000000;
            v45.i64[1] = 0x8000000080000000;
            v46.i64[0] = 0x8000000080000000;
            v46.i64[1] = 0x8000000080000000;
            v47.i64[0] = 0x8000000080000000;
            v47.i64[1] = 0x8000000080000000;
            v48.i64[0] = 0x8000000080000000;
            v48.i64[1] = 0x8000000080000000;
            v49.i64[0] = 0x8000000080000000;
            v49.i64[1] = 0x8000000080000000;
            while (v38 < v39 - 64)
            {
              v11 = (float32x4_t)vandq_s8(*v40, v32);
              v50 = (int32x4_t)vandq_s8(v40[1], v31);
              v40 = (int8x16_t *)((char *)v40 + 24);
              v51 = *(float16x8_t *)v38;
              v52 = *(float16x8_t *)(v38 + 16);
              v53 = *(float16x8_t *)(v38 + 32);
              v54 = *(float16x8_t *)(v38 + 48);
              v38 += 60;
              v55 = vcvt_hight_f32_f16(v54);
              v56 = vcvt_hight_f32_f16(v53);
              v57 = vcvtq_f32_f16(*(float16x4_t *)v52.i8);
              v14 = vcvtq_f32_f16(*(float16x4_t *)v53.i8);
              v58 = vcvtq_f32_f16(*(float16x4_t *)v51.i8);
              v15 = (float16x8_t)vcvtq_f32_f16(*(float16x4_t *)v54.i8);
              v12 = (float16x8_t)vcvt_hight_f32_f16(v51);
              v13 = (float16x8_t)vcvt_hight_f32_f16(v52);
              v59 = (int32x4_t)vextq_s8((int8x16_t)v50, (int8x16_t)v50, 4uLL);
              v60 = (int32x4_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 4uLL);
              v45 = vmlaq_f32(v45, (float32x4_t)v13, (float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)v11, (int32x4_t)v11), (int32x4_t)v11));
              v43 = vmlaq_f32(v43, (float32x4_t)v12, (float32x4_t)vzip1q_s32((int32x4_t)v11, vdupq_lane_s32(*(int32x2_t *)v11.f32, 1)));
              v48 = vmlaq_f32(v48, (float32x4_t)v15, (float32x4_t)vzip1q_s32(v50, vdupq_lane_s32(*(int32x2_t *)v50.i8, 1)));
              v42 = vmlaq_n_f32(v42, v58, v11.f32[0]);
              v46 = vmlaq_laneq_f32(v46, v14, v11, 3);
              v44 = vmlaq_f32(v44, v57, (float32x4_t)vzip1q_s32(v60, v60));
              v47 = vmlaq_n_f32(v47, v56, *(float *)v50.i32);
              v49 = vmlaq_f32(v49, v55, (float32x4_t)vzip1q_s32(v59, v59));
              v41 -= 6;
            }
            if (v41 >= 1)
            {
              v12 = (float16x8_t)vandq_s8(*v40, v34);
              v61 = (int32x4_t)vandq_s8(v40[1], (int8x16_t)vcgtq_f32(v28, (float32x4_t)xmmword_185004980));
              v62 = *(float16x8_t *)(v38 + 16);
              v63 = *(float16x8_t *)(v38 + 32);
              v64 = *(float16x8_t *)(v38 + 48);
              v65 = vcvt_hight_f32_f16(v64);
              v66 = vcvtq_f32_f16(*(float16x4_t *)v62.i8);
              v67 = vcvt_hight_f32_f16(v63);
              v14 = vcvtq_f32_f16(*(float16x4_t *)v63.i8);
              v15 = (float16x8_t)vcvtq_f32_f16(*(float16x4_t *)v64.i8);
              v11 = vcvt_hight_f32_f16(*(float16x8_t *)v38);
              v13 = (float16x8_t)vcvt_hight_f32_f16(v62);
              v68 = (int32x4_t)vextq_s8((int8x16_t)v61, (int8x16_t)v61, 4uLL);
              v69 = (int32x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 4uLL);
              v45 = vmlaq_f32(v45, (float32x4_t)v13, (float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)v12, (int32x4_t)v12), (int32x4_t)v12));
              v43 = vmlaq_f32(v43, v11, (float32x4_t)vzip1q_s32((int32x4_t)v12, vdupq_lane_s32(*(int32x2_t *)v12.i8, 1)));
              v48 = vmlaq_f32(v48, (float32x4_t)v15, (float32x4_t)vzip1q_s32(v61, vdupq_lane_s32(*(int32x2_t *)v61.i8, 1)));
              v42 = vmlaq_n_f32(v42, vcvtq_f32_f16(*(float16x4_t *)v38), *(float *)v12.i32);
              v46 = vmlaq_laneq_f32(v46, v14, (float32x4_t)v12, 3);
              v47 = vmlaq_n_f32(v47, v67, *(float *)v61.i32);
              v44 = vmlaq_f32(v44, v66, (float32x4_t)vzip1q_s32(v69, v69));
              v49 = vmlaq_f32(v49, v65, (float32x4_t)vzip1q_s32(v68, v68));
            }
          }
          v10 = (float32x4_t)vextq_s8((int8x16_t)v47, (int8x16_t)v48, 0xCuLL);
          v70 = (float32x4_t)vextq_s8((int8x16_t)v46, (int8x16_t)v47, 0xCuLL);
          v71 = (float32x4_t)vextq_s8((int8x16_t)v45, (int8x16_t)v46, 0xCuLL);
          v72 = (int32x4_t)vaddq_f32(v45, (float32x4_t)vextq_s8((int8x16_t)v48, (int8x16_t)v49, 0xCuLL));
          v73 = vaddq_f32(v43, v70);
          v74 = (int8x16_t)vaddq_f32(v44, v10);
          *v35 = vcvt_f16_f32(vaddq_f32((float32x4_t)vextq_s8(v74, (int8x16_t)v72, 8uLL), vaddq_f32(vaddq_f32(v42, v71), (float32x4_t)vextq_s8((int8x16_t)v73, v74, 4uLL))));
          v35[1].i16[0] = vcvt_f16_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32(v72, 2), vaddq_f32(v73, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v74.i8, 1)))).u16[0];
          v35 = (float16x4_t *)((char *)v35 + 10);
          ++v36;
          v37 = (int *)((char *)v37 + v21);
        }
        while (v36 != v27);
        v36 = v27;
      }
LABEL_29:
      if (v36 >= a6)
        goto LABEL_165;
      do
      {
        if (*v37 >= (int)v19)
          v75 = v19;
        else
          v75 = *v37;
        v76 = v19 - v75;
        if (v37[1] >= v76)
          v77 = v76;
        else
          v77 = v37[1];
        if (v77 < 1)
        {
          v81.i64[0] = 0x8000000080000000;
          v81.i64[1] = 0x8000000080000000;
          v83.i64[0] = 0x8000000080000000;
          v83.i64[1] = 0x8000000080000000;
          v84.i64[0] = 0x8000000080000000;
          v84.i64[1] = 0x8000000080000000;
          v85.i64[0] = 0x8000000080000000;
          v85.i64[1] = 0x8000000080000000;
          v86.i64[0] = 0x8000000080000000;
          v86.i64[1] = 0x8000000080000000;
          v87.i64[0] = 0x8000000080000000;
          v87.i64[1] = 0x8000000080000000;
          v88.i64[0] = 0x8000000080000000;
          v88.i64[1] = 0x8000000080000000;
          v89.i64[0] = 0x8000000080000000;
          v89.i64[1] = 0x8000000080000000;
          goto LABEL_164;
        }
        v78 = (float16x8_t *)(v17 + 10 * *v37);
        v79 = (unint64_t)&v78[-4] + 10 * v77;
        v80 = (int8x16_t *)(v37 + 2);
        v81.i64[0] = 0x8000000080000000;
        v81.i64[1] = 0x8000000080000000;
        if ((unint64_t)v78 >= v79)
        {
          v83.i64[0] = 0x8000000080000000;
          v83.i64[1] = 0x8000000080000000;
          v84.i64[0] = 0x8000000080000000;
          v84.i64[1] = 0x8000000080000000;
          v85.i64[0] = 0x8000000080000000;
          v85.i64[1] = 0x8000000080000000;
          v86.i64[0] = 0x8000000080000000;
          v86.i64[1] = 0x8000000080000000;
          v87.i64[0] = 0x8000000080000000;
          v87.i64[1] = 0x8000000080000000;
          v88.i64[0] = 0x8000000080000000;
          v88.i64[1] = 0x8000000080000000;
          v89.i64[0] = 0x8000000080000000;
          v89.i64[1] = 0x8000000080000000;
          goto LABEL_67;
        }
        v82 = v77;
        v83.i64[0] = 0x8000000080000000;
        v83.i64[1] = 0x8000000080000000;
        v84.i64[0] = 0x8000000080000000;
        v84.i64[1] = 0x8000000080000000;
        v85.i64[0] = 0x8000000080000000;
        v85.i64[1] = 0x8000000080000000;
        v86.i64[0] = 0x8000000080000000;
        v86.i64[1] = 0x8000000080000000;
        v87.i64[0] = 0x8000000080000000;
        v87.i64[1] = 0x8000000080000000;
        v88.i64[0] = 0x8000000080000000;
        v88.i64[1] = 0x8000000080000000;
        v89.i64[0] = 0x8000000080000000;
        v89.i64[1] = 0x8000000080000000;
        do
        {
          v90 = v22 - (char *)v80;
          if ((unint64_t)(v22 - (char *)v80) >= 0x20)
            v90 = 32;
          if (v90 >= 0x20)
          {
            v10 = (float32x4_t)vandq_s8(v80[1], v31);
            v11 = (float32x4_t)vandq_s8(*v80, v32);
            goto LABEL_43;
          }
          if (!(_DWORD)v82)
          {
            v11 = 0uLL;
LABEL_56:
            v10 = 0uLL;
            goto LABEL_43;
          }
          if (v82 < 4)
          {
            if (v82 == 1)
            {
              v11 = (float32x4_t)v80->u32[0];
            }
            else
            {
              v101 = 0;
              if ((_DWORD)v82 != 2)
                LODWORD(v101) = v80->i32[2];
              v11.i64[0] = v80->i64[0];
              v11.i64[1] = v101;
            }
            goto LABEL_56;
          }
          if (v82 == 4)
          {
            v10 = 0uLL;
          }
          else if (v82 == 5)
          {
            v10 = (float32x4_t)v80[1].u32[0];
          }
          else
          {
            v102 = 0;
            if ((_DWORD)v82 != 6)
            {
              v103 = 0;
              if ((v77 & 1) == 0)
                v103.i32[0] = v80[1].i32[3];
              v102.i32[0] = v80[1].i32[2];
              v102 = vzip1_s32(v102, v103);
            }
            v10.i64[0] = v80[1].i64[0];
            *(int32x2_t *)&v10.u32[2] = v102;
          }
          v11 = *(float32x4_t *)v80;
LABEL_43:
          v80 = (int8x16_t *)((char *)v80 + 24);
          v91 = *v78;
          v92 = v78[1];
          v93 = v78[2];
          v94 = v78[3];
          v78 = (float16x8_t *)((char *)v78 + 60);
          v95 = vcvtq_f32_f16(*(float16x4_t *)v94.i8);
          v96 = vcvt_hight_f32_f16(v92);
          v97 = vcvt_hight_f32_f16(v91);
          v15 = (float16x8_t)vcvt_hight_f32_f16(v94);
          v98 = vcvt_hight_f32_f16(v93);
          v14 = vcvtq_f32_f16(*(float16x4_t *)v93.i8);
          v12 = (float16x8_t)vcvtq_f32_f16(*(float16x4_t *)v91.i8);
          v13 = (float16x8_t)vcvtq_f32_f16(*(float16x4_t *)v92.i8);
          v99 = (int32x4_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 4uLL);
          v100 = (int32x4_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 4uLL);
          v84 = vmlaq_f32(v84, (float32x4_t)v13, (float32x4_t)vzip1q_s32(v100, v100));
          v81 = vmlaq_n_f32(v81, (float32x4_t)v12, v11.f32[0]);
          v86 = vmlaq_laneq_f32(v86, v14, v11, 3);
          v87 = vmlaq_n_f32(v87, v98, v10.f32[0]);
          v89 = vmlaq_f32(v89, (float32x4_t)v15, (float32x4_t)vzip1q_s32(v99, v99));
          v83 = vmlaq_f32(v83, v97, (float32x4_t)vzip1q_s32((int32x4_t)v11, vdupq_lane_s32(*(int32x2_t *)v11.f32, 1)));
          v85 = vmlaq_f32(v85, v96, (float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)v11, (int32x4_t)v11), (int32x4_t)v11));
          v88 = vmlaq_f32(v88, v95, (float32x4_t)vzip1q_s32((int32x4_t)v10, vdupq_lane_s32(*(int32x2_t *)v10.f32, 1)));
          v82 -= 6;
        }
        while ((unint64_t)v78 < v79);
        if ((int)v82 >= 1)
        {
          v77 = v82;
LABEL_67:
          v104 = 0;
          v105 = v77;
          v106 = 5 * v77;
          v107 = v77;
          v108 = 5 * v77;
          while (2)
          {
            v109 = v106 + v104;
            v110 = v22 - (char *)v80;
            if ((unint64_t)(v22 - (char *)v80) >= 0x20)
              v110 = 32;
            if (v110 >= 0x20)
            {
              v10.f32[0] = fminf((float)(int)v107, 8.0);
              v111 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0);
              v112 = (int8x16_t)vcgtq_f32(v111, (float32x4_t)xmmword_185004970);
              v12 = *(float16x8_t *)v80;
              v13 = (float16x8_t)v80[1];
              v10 = (float32x4_t)vandq_s8((int8x16_t)v13, (int8x16_t)vcgtq_f32(v111, (float32x4_t)xmmword_185004980));
              v11 = (float32x4_t)vandq_s8(*v80, v112);
              goto LABEL_72;
            }
            if (v107 < 4)
            {
              if (v109 == 5)
              {
                v11 = (float32x4_t)v80->u32[0];
              }
              else
              {
                if (v106 + v104 == 10)
                  v10.i64[0] = 0;
                else
                  v10.i32[0] = v80->i32[2];
                v11.i64[0] = v80->i64[0];
                v11.i64[1] = v10.i64[0];
              }
              v10 = 0uLL;
              v80 = (int8x16_t *)((char *)v80 + 24);
            }
            else
            {
              if ((_DWORD)v107 == 4)
              {
                v10 = 0uLL;
              }
              else if ((_DWORD)v107 == 5)
              {
                v10 = (float32x4_t)v80[1].u32[0];
              }
              else
              {
                if (v106 + v104 == 30)
                {
                  v11.i64[0] = 0;
                }
                else
                {
                  v121 = 0;
                  if ((v105 & 1) == 0)
                    v121.i32[0] = v80[1].i32[3];
                  v11.i32[0] = v80[1].i32[2];
                  *(int32x2_t *)v11.f32 = vzip1_s32(*(int32x2_t *)v11.f32, v121);
                }
                v10.i64[0] = v80[1].i64[0];
                v10.i64[1] = v11.i64[0];
              }
              v11 = *(float32x4_t *)v80;
LABEL_72:
              v80 = (int8x16_t *)((char *)v80 + 24);
              if (v107 >= 7)
              {
                v113 = v78[2];
                v15 = v78[3];
                v13 = *v78;
                v12 = v78[1];
                goto LABEL_74;
              }
            }
            v133 = v106 + v104;
            v122 = v108 + v104;
            if ((v108 + v104) < 0x10)
            {
              if (v122 < 8)
              {
                if (v122 < 4)
                {
                  if (v133)
                  {
                    if (v133 == 1)
                    {
                      v12.i16[0] = v78->i16[0];
                      v13.i64[0] = 0;
                    }
                    else
                    {
                      v12.i32[0] = v78->i32[0];
                      v13.i16[0] = v78->i16[2];
                    }
                    *(int32x2_t *)v13.i8 = vzip1_s32(*(int32x2_t *)v12.i8, *(int32x2_t *)v13.i8);
                  }
                  else
                  {
                    v13.i64[0] = 0;
                  }
                  v13.i64[1] = 0;
                }
                else
                {
                  if (v133 == 4)
                  {
                    v124 = 0;
                  }
                  else
                  {
                    if (v133 == 5)
                    {
                      v12.i16[0] = v78->i16[4];
                      v13.i64[0] = 0;
                    }
                    else
                    {
                      v12.i32[0] = v78->i32[2];
                      v13.i16[0] = v78->i16[6];
                    }
                    v124 = vzip1_s32(*(int32x2_t *)v12.i8, *(int32x2_t *)v13.i8);
                  }
                  v13.i64[0] = v78->i64[0];
                  v13.u64[1] = (unint64_t)v124;
                }
                v12 = 0uLL;
              }
              else
              {
                if (v106 + v104 == 8)
                {
                  v12 = 0uLL;
                }
                else if ((unint64_t)(v106 + v104 - 8) < 4)
                {
                  if (v106 + v104 == 9)
                  {
                    v12.i16[0] = v78[1].i16[0];
                  }
                  else
                  {
                    if (v106 + v104 == 10)
                      v12.i64[0] = 0;
                    else
                      v12.i16[0] = v78[1].i16[2];
                    v13.i32[0] = v78[1].i32[0];
                    *(int32x2_t *)v12.i8 = vzip1_s32(*(int32x2_t *)v13.i8, *(int32x2_t *)v12.i8);
                  }
                  v12.i64[1] = 0;
                }
                else
                {
                  if (v133 == 12)
                  {
                    v125 = 0;
                  }
                  else
                  {
                    if (v133 == 13)
                    {
                      v12.i16[0] = v78[1].i16[4];
                      v13.i64[0] = 0;
                    }
                    else
                    {
                      v12.i32[0] = v78[1].i32[2];
                      v13.i16[0] = v78[1].i16[6];
                    }
                    v125 = vzip1_s32(*(int32x2_t *)v12.i8, *(int32x2_t *)v13.i8);
                  }
                  v12.i64[0] = v78[1].i64[0];
                  v12.u64[1] = (unint64_t)v125;
                }
                v13 = *v78;
              }
            }
            else
            {
              v13 = *v78;
              v12 = v78[1];
              v123 = v133 - 16;
              if (v133 != 16)
              {
                if (v123 >= 8)
                {
                  if (v106 + v104 == 24)
                  {
                    v15 = 0uLL;
                  }
                  else if ((unint64_t)(v106 + v104 - 24) < 4)
                  {
                    if (v109 == 25)
                    {
                      v14.i16[0] = v78[3].i16[0];
                      v15.i64[0] = 0;
                    }
                    else
                    {
                      v14.i32[0] = v78[3].i32[0];
                      v15.i16[0] = v78[3].i16[2];
                    }
                    *(int32x2_t *)v15.i8 = vzip1_s32(*(int32x2_t *)v14.f32, *(int32x2_t *)v15.i8);
                  }
                  else
                  {
                    if (v133 == 28)
                    {
                      v14.i64[0] = 0;
                    }
                    else if (v133 == 29)
                    {
                      v14.i16[0] = v78[3].i16[4];
                    }
                    else
                    {
                      if (v106 + v104 == 30)
                      {
                        v14.i64[0] = 0;
                      }
                      else
                      {
                        v127 = 0;
                        if ((v105 & 1) == 0)
                          v127 = v78[3].i16[7];
                        v14.i16[0] = v78[3].i16[6];
                        v14.i16[1] = v127;
                      }
                      v15.i32[0] = v78[3].i32[2];
                      *(int32x2_t *)v14.f32 = vzip1_s32(*(int32x2_t *)v15.i8, *(int32x2_t *)v14.f32);
                    }
                    v15.i64[0] = v78[3].i64[0];
                    v15.i64[1] = v14.i64[0];
                  }
                  v113 = v78[2];
LABEL_74:
                  v78 = (float16x8_t *)((char *)v78 + 60);
                  v114 = vcvtq_f32_f16(*(float16x4_t *)v15.i8);
                  v115 = vcvt_hight_f32_f16(v12);
                  v116 = vcvt_hight_f32_f16(v13);
                  v15 = (float16x8_t)vcvt_hight_f32_f16(v15);
                  v117 = vcvt_hight_f32_f16(v113);
                  v14 = vcvtq_f32_f16(*(float16x4_t *)v113.i8);
                  v12 = (float16x8_t)vcvtq_f32_f16(*(float16x4_t *)v12.i8);
                  v13 = (float16x8_t)vcvtq_f32_f16(*(float16x4_t *)v13.i8);
                  v118 = (int32x4_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 4uLL);
                  v119 = (int32x4_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 4uLL);
                  v81 = vmlaq_n_f32(v81, (float32x4_t)v13, v11.f32[0]);
                  v84 = vmlaq_f32(v84, (float32x4_t)v12, (float32x4_t)vzip1q_s32(v119, v119));
                  v86 = vmlaq_laneq_f32(v86, v14, v11, 3);
                  v87 = vmlaq_n_f32(v87, v117, v10.f32[0]);
                  v89 = vmlaq_f32(v89, (float32x4_t)v15, (float32x4_t)vzip1q_s32(v118, v118));
                  v83 = vmlaq_f32(v83, v116, (float32x4_t)vzip1q_s32((int32x4_t)v11, vdupq_lane_s32(*(int32x2_t *)v11.f32, 1)));
                  v85 = vmlaq_f32(v85, v115, (float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)v11, (int32x4_t)v11), (int32x4_t)v11));
                  v88 = vmlaq_f32(v88, v114, (float32x4_t)vzip1q_s32((int32x4_t)v10, vdupq_lane_s32(*(int32x2_t *)v10.f32, 1)));
                  v104 -= 30;
                  v120 = (uint64_t)v107 <= 6;
                  v107 -= 6;
                  if (v120)
                    goto LABEL_164;
                  continue;
                }
                if (v123 < 4)
                {
                  v113.i32[3] = 0;
                  v113.i32[0] = v78[2].i32[0];
                  *(uint64_t *)((char *)v113.i64 + 4) = v78[2].u16[2];
                }
                else
                {
                  if (v133 == 20)
                  {
                    v126 = 0;
                  }
                  else
                  {
                    if (v133 == 21)
                    {
                      v14.i16[0] = v78[2].i16[4];
                      v15.i64[0] = 0;
                    }
                    else
                    {
                      v14.i32[0] = v78[2].i32[2];
                      v15.i16[0] = v78[2].i16[6];
                    }
                    v126 = vzip1_s32(*(int32x2_t *)v14.f32, *(int32x2_t *)v15.i8);
                  }
                  v113.i64[0] = v78[2].i64[0];
                  v113.u64[1] = (unint64_t)v126;
                }
LABEL_151:
                v15 = 0uLL;
                goto LABEL_74;
              }
            }
            break;
          }
          v113 = 0uLL;
          goto LABEL_151;
        }
LABEL_164:
        v10 = (float32x4_t)vextq_s8((int8x16_t)v87, (int8x16_t)v88, 0xCuLL);
        v128 = (float32x4_t)vextq_s8((int8x16_t)v86, (int8x16_t)v87, 0xCuLL);
        v129 = (float32x4_t)vextq_s8((int8x16_t)v85, (int8x16_t)v86, 0xCuLL);
        v130 = (int32x4_t)vaddq_f32(v85, (float32x4_t)vextq_s8((int8x16_t)v88, (int8x16_t)v89, 0xCuLL));
        v131 = vaddq_f32(v83, v128);
        v132 = (int8x16_t)vaddq_f32(v84, v10);
        *v35 = vcvt_f16_f32(vaddq_f32((float32x4_t)vextq_s8(v132, (int8x16_t)v130, 8uLL), vaddq_f32(vaddq_f32(v81, v129), (float32x4_t)vextq_s8((int8x16_t)v131, v132, 4uLL))));
        v35[1].i16[0] = vcvt_f16_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32(v130, 2), vaddq_f32(v131, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v132.i8, 1)))).u16[0];
        v35 = (float16x4_t *)((char *)v35 + 10);
        ++v36;
        v37 = (int *)((char *)v37 + v21);
      }
      while (v36 != a6);
LABEL_165:
      v17 += v18;
      ++v16;
    }
    while (v16 != v33);
  }
  return result;
}

int *resample_horizontal<half,half,1,true>(int *result, unsigned int a2, double a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t *a7, int *a8, int a9)
{
  float32x4_t v9;
  float32x4_t v10;
  float16x8_t v11;
  float16x8_t v12;
  float32x4_t v13;
  int32x2_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  float32x4_t v31;
  uint64_t v32;
  float32x4_t v33;
  int8x16_t v34;
  int8x16_t v35;
  uint64_t v36;
  int8x16_t v37;
  int8x16_t v38;
  _WORD *v39;
  unint64_t v40;
  int *v41;
  uint64_t v42;
  float16x8_t *v43;
  float16x8_t *v44;
  int8x16_t *v45;
  int v46;
  float16x4_t *v47;
  unint64_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  int8x16_t v59;
  int8x16_t v60;
  float16x8_t v61;
  float16x8_t v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  float16x8_t *v67;
  unint64_t v68;
  float16x8_t *v69;
  int8x16_t *v70;
  float32x4_t v71;
  uint64_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  unint64_t v76;
  float16x8_t v77;
  float16x8_t v78;
  uint64_t v79;
  int32x2_t v80;
  int32x2_t v81;
  int i;
  unint64_t v83;
  float32x4_t v84;
  int8x16_t v85;
  float32x4_t v86;
  uint64_t v87;
  float32x4_t v88;
  int32x2_t v89;
  int32x2_t v90;

  if ((int)a5 >= 1 && a9 >= 1)
  {
    v15 = 0;
    v16 = *a7;
    v17 = a7[1];
    v18 = *a8;
    v19 = a8[1];
    if (v18 >> 1 >= v19 >> 1)
      v20 = v19 >> 1;
    else
      v20 = v18 >> 1;
    v21 = a5;
    v22 = 4 * a2;
    v23 = v22 + 8;
    v24 = (char *)result + (v22 + 8) * a5;
    if (v20 >= *(int *)&v24[-v22 - 4] + (uint64_t)*(int *)&v24[-v22 - 8])
      v20 = *(int *)&v24[-v22 - 4] + (uint64_t)*(int *)&v24[-v22 - 8];
    v25 = (4 * a2 + 39) / (4 * a2 + 8);
    if (a2 > 5)
      v25 = 1;
    v26 = a5 - v25;
    v27 = a2 > 7;
    v28 = a2 & 7;
    if ((a2 & 7) != 0)
      v27 = 0;
    else
      v28 = 8;
    v29 = (a2 + 8 * (v27 << 31 >> 31)) & 0xFFFFFFF8;
    *(float *)&a3 = (float)v28;
    v30 = (2 * (_BYTE)v28 + 15) & 0x30;
    v31 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    if (a2 >= 8)
      a2 = 8;
    *(float *)&a3 = (float)a2;
    v32 = v30 + 2 * v29;
    v33 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    v34 = (int8x16_t)vcgtq_f32(v33, (float32x4_t)xmmword_185004980);
    v35 = (int8x16_t)vcgtq_f32(v33, (float32x4_t)xmmword_185004970);
    v36 = a9;
    if (v26 <= 1)
      v26 = 1;
    v37 = (int8x16_t)vcgtq_f32(v31, (float32x4_t)xmmword_185004980);
    v38 = (int8x16_t)vcgtq_f32(v31, (float32x4_t)xmmword_185004970);
    while (1)
    {
      v39 = *(_WORD **)(a6 + 8 * v15);
      if (v21 <= v25)
      {
        v40 = 0;
        v41 = result;
      }
      else
      {
        v40 = 0;
        v41 = result;
        while (1)
        {
          v42 = *v41;
          v43 = (float16x8_t *)(v16 + 2 * v42);
          v44 = (float16x8_t *)((char *)v43 + v32);
          if ((unint64_t)v43->u64 + v32 > 2 * v20 + v16)
            break;
          if (v43 >= v44)
          {
            v49.i64[0] = 0x8000000080000000;
            v49.i64[1] = 0x8000000080000000;
            v50.i64[0] = 0x8000000080000000;
            v50.i64[1] = 0x8000000080000000;
            v51.i64[0] = 0x8000000080000000;
            v51.i64[1] = 0x8000000080000000;
            v52.i64[0] = 0x8000000080000000;
            v52.i64[1] = 0x8000000080000000;
          }
          else
          {
            v45 = (int8x16_t *)(v41 + 2);
            v46 = v41[1];
            v47 = (float16x4_t *)(v17 + 2 * v42);
            v48 = (unint64_t)&v44[-1];
            v49.i64[0] = 0x8000000080000000;
            v49.i64[1] = 0x8000000080000000;
            if ((unint64_t)v43 < v48)
            {
              v51.i64[0] = 0x8000000080000000;
              v51.i64[1] = 0x8000000080000000;
              v52.i64[0] = 0x8000000080000000;
              v52.i64[1] = 0x8000000080000000;
              v50.i64[0] = 0x8000000080000000;
              v50.i64[1] = 0x8000000080000000;
              do
              {
                v60 = *v45;
                v59 = v45[1];
                v45 += 2;
                v10 = (float32x4_t)vandq_s8(v60, v35);
                v9 = (float32x4_t)vandq_s8(v59, v34);
                v61 = *v43++;
                v52 = vmlaq_f32(v52, vcvt_hight_f32_f16(v61), v9);
                v51 = vmlaq_f32(v51, vcvtq_f32_f16(*(float16x4_t *)v61.i8), v10);
                v62 = *(float16x8_t *)v47->i8;
                v47 += 2;
                v12 = (float16x8_t)vcvtq_f32_f16(*(float16x4_t *)v62.i8);
                v11 = (float16x8_t)vcvt_hight_f32_f16(v62);
                v50 = vmlaq_f32(v50, (float32x4_t)v11, v9);
                v49 = vmlaq_f32(v49, (float32x4_t)v12, v10);
                v46 -= 8;
              }
              while ((unint64_t)v43 < v48);
            }
            else
            {
              v50.i64[0] = 0x8000000080000000;
              v50.i64[1] = 0x8000000080000000;
              v51.i64[0] = 0x8000000080000000;
              v51.i64[1] = 0x8000000080000000;
              v52.i64[0] = 0x8000000080000000;
              v52.i64[1] = 0x8000000080000000;
            }
            if (v46 >= 1)
            {
              v10 = (float32x4_t)vandq_s8(*v45, v38);
              v9 = (float32x4_t)vandq_s8(v45[1], v37);
              v52 = vmlaq_f32(v52, vcvt_hight_f32_f16(*v43), v9);
              v51 = vmlaq_f32(v51, vcvtq_f32_f16(*(float16x4_t *)v43->i8), v10);
              v12 = (float16x8_t)vcvtq_f32_f16(*v47);
              v11 = (float16x8_t)vcvt_hight_f32_f16(*(float16x8_t *)v47->i8);
              v50 = vmlaq_f32(v50, (float32x4_t)v11, v9);
              v49 = vmlaq_f32(v49, (float32x4_t)v12, v10);
            }
          }
          _Q18 = vaddq_f32(v51, v52);
          _Q18.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(_Q18, (float32x4_t)vdupq_laneq_s64((int64x2_t)_Q18, 1)));
          __asm { FCVT            H18, S18 }
          *v39 = _Q18.i16[0];
          _Q16 = vaddq_f32(v49, v50);
          _Q16.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(_Q16, (float32x4_t)vdupq_laneq_s64((int64x2_t)_Q16, 1)));
          __asm { FCVT            H16, S16 }
          v39[1] = _Q16.i16[0];
          v39 += 2;
          ++v40;
          v41 = (int *)((char *)v41 + v23);
          if (v40 == v26)
          {
            v40 = v26;
            break;
          }
        }
      }
      if (v40 < v21)
        break;
LABEL_115:
      v16 += v18;
      v17 += v19;
      if (++v15 == v36)
        return result;
    }
    while (1)
    {
      v63 = *v41;
      if ((int)v63 >= (int)v20)
        v64 = v20;
      else
        v64 = *v41;
      v65 = v20 - v64;
      if (v41[1] >= v65)
        v66 = v65;
      else
        v66 = v41[1];
      if (v66 < 1)
      {
        v74.i64[0] = 0x8000000080000000;
        v74.i64[1] = 0x8000000080000000;
        v75.i64[0] = 0x8000000080000000;
        v75.i64[1] = 0x8000000080000000;
        v71.i64[0] = 0x8000000080000000;
        v71.i64[1] = 0x8000000080000000;
        v73.i64[0] = 0x8000000080000000;
        v73.i64[1] = 0x8000000080000000;
        goto LABEL_114;
      }
      v67 = (float16x8_t *)(v16 + 2 * v63);
      v68 = (unint64_t)&v67[-2] + 2 * v66;
      v69 = (float16x8_t *)(v17 + 2 * v63);
      v70 = (int8x16_t *)(v41 + 2);
      v71.i64[0] = 0x8000000080000000;
      v71.i64[1] = 0x8000000080000000;
      if ((unint64_t)v67 >= v68)
      {
        LODWORD(v72) = v66;
        v73.i64[0] = 0x8000000080000000;
        v73.i64[1] = 0x8000000080000000;
        v74.i64[0] = 0x8000000080000000;
        v74.i64[1] = 0x8000000080000000;
        v75.i64[0] = 0x8000000080000000;
        v75.i64[1] = 0x8000000080000000;
        goto LABEL_70;
      }
      v72 = v66;
      v73.i64[0] = 0x8000000080000000;
      v73.i64[1] = 0x8000000080000000;
      v74.i64[0] = 0x8000000080000000;
      v74.i64[1] = 0x8000000080000000;
      v75.i64[0] = 0x8000000080000000;
      v75.i64[1] = 0x8000000080000000;
      do
      {
        v76 = v24 - (char *)v70;
        if ((unint64_t)(v24 - (char *)v70) >= 0x20)
          v76 = 32;
        if (v76 >= 0x20)
        {
          v10 = (float32x4_t)vandq_s8(v70[1], v34);
          v9 = (float32x4_t)vandq_s8(*v70, v35);
          goto LABEL_47;
        }
        if (!(_DWORD)v72)
        {
          v9 = 0uLL;
LABEL_60:
          v10 = 0uLL;
          goto LABEL_47;
        }
        if (v72 < 4)
        {
          if (v72 == 1)
          {
            v9 = (float32x4_t)v70->u32[0];
          }
          else
          {
            v79 = 0;
            if ((_DWORD)v72 != 2)
              LODWORD(v79) = v70->i32[2];
            v9.i64[0] = v70->i64[0];
            v9.i64[1] = v79;
          }
          goto LABEL_60;
        }
        if (v72 == 4)
        {
          v10 = 0uLL;
        }
        else if (v72 == 5)
        {
          v10 = (float32x4_t)v70[1].u32[0];
        }
        else
        {
          v80 = 0;
          if ((_DWORD)v72 != 6)
          {
            v81 = 0;
            if ((v66 & 1) == 0)
              v81.i32[0] = v70[1].i32[3];
            v10.i32[0] = v70[1].i32[2];
            v80 = vzip1_s32(*(int32x2_t *)v10.f32, v81);
          }
          v10.i64[0] = v70[1].i64[0];
          *(int32x2_t *)&v10.u32[2] = v80;
        }
        v9 = *(float32x4_t *)v70;
LABEL_47:
        v70 += 2;
        v77 = *v67++;
        v73 = vmlaq_f32(v73, vcvt_hight_f32_f16(v77), v10);
        v71 = vmlaq_f32(v71, vcvtq_f32_f16(*(float16x4_t *)v77.i8), v9);
        v78 = *v69++;
        v12 = (float16x8_t)vcvtq_f32_f16(*(float16x4_t *)v78.i8);
        v11 = (float16x8_t)vcvt_hight_f32_f16(v78);
        v75 = vmlaq_f32(v75, (float32x4_t)v11, v10);
        v74 = vmlaq_f32(v74, (float32x4_t)v12, v9);
        v72 -= 8;
      }
      while ((unint64_t)v67 < v68);
      if ((int)v72 >= 1)
      {
LABEL_70:
        for (i = v72; !((i < 0) ^ _VF | (i == 0)); i -= 8)
        {
          v83 = v24 - (char *)v70;
          if ((unint64_t)(v24 - (char *)v70) >= 0x20)
            v83 = 32;
          if (v83 < 0x20)
          {
            if (i < 4)
            {
              if (i == 1)
              {
                v10 = (float32x4_t)v70->u32[0];
              }
              else
              {
                v87 = 0;
                if (i != 2)
                  LODWORD(v87) = v70->i32[2];
                v10.i64[0] = v70->i64[0];
                v10.i64[1] = v87;
              }
              v9 = 0uLL;
              v70 += 2;
LABEL_93:
              if (i == 1)
              {
                v12.i16[0] = v67->i16[0];
                v11.i16[0] = v69->i16[0];
              }
              else
              {
                v12.i32[0] = v67->i32[0];
                if (i == 2)
                {
                  v12.i32[1] = 0;
                  v11.i64[0] = 0;
                  v12.i64[1] = 0;
                }
                else
                {
                  v13.i8[6] = 0;
                  v13.i8[7] = 0;
                  v13.i32[0] = v67->i32[0];
                  v13.i16[2] = v67->i16[2];
                  v11.i32[0] = v69->u16[2];
                  v12 = (float16x8_t)v13.u64[0];
                }
                v13.i32[0] = v69->i32[0];
                *(int32x2_t *)v11.i8 = vzip1_s32(*(int32x2_t *)v13.f32, *(int32x2_t *)v11.i8);
              }
              v88 = vcvtq_f32_f16(*(float16x4_t *)v12.i8);
              v86 = vmulq_f32(v9, vcvt_hight_f32_f16(v12));
              v13 = vmulq_f32(v10, v88);
              v11.i64[1] = 0;
              goto LABEL_77;
            }
            if (i == 4)
            {
              v9 = 0uLL;
            }
            else if (i == 5)
            {
              v9 = (float32x4_t)v70[1].u32[0];
            }
            else
            {
              v89 = 0;
              if (i != 6)
              {
                v90 = 0;
                if ((v72 & 1) == 0)
                  v90.i32[0] = v70[1].i32[3];
                v89.i32[0] = v70[1].i32[2];
                v89 = vzip1_s32(v89, v90);
              }
              v9.i64[0] = v70[1].i64[0];
              *(int32x2_t *)&v9.u32[2] = v89;
            }
            v10 = *(float32x4_t *)v70;
          }
          else
          {
            v9.f32[0] = fminf((float)i, 8.0);
            v84 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 0);
            v85 = (int8x16_t)vcgtq_f32(v84, (float32x4_t)xmmword_185004970);
            v11 = *(float16x8_t *)v70;
            v12 = (float16x8_t)v70[1];
            v9 = (float32x4_t)vandq_s8((int8x16_t)v12, (int8x16_t)vcgtq_f32(v84, (float32x4_t)xmmword_185004980));
            v10 = (float32x4_t)vandq_s8(*v70, v85);
          }
          v70 += 2;
          if (i < 8)
          {
            if (i < 4)
              goto LABEL_93;
            v11.i64[0] = v67->i64[0];
            if (i == 5)
            {
              v12.i16[0] = v67->i16[4];
              v11.i64[1] = v12.i64[0];
              v14.i16[0] = v69->i16[4];
            }
            else if (i == 4)
            {
              v14 = 0;
            }
            else
            {
              v12.i32[0] = v67->i32[2];
              if (i == 6)
              {
                v11.i64[1] = v12.u32[0];
                v12.i64[0] = 0;
              }
              else
              {
                v13.i16[3] = 0;
                v13.i32[0] = v67->i32[2];
                v13.i16[2] = v67->i16[6];
                v11.i64[1] = v13.i64[0];
                v12.i16[0] = v69->i16[6];
              }
              v13.i32[0] = v69->i32[2];
              v14 = vzip1_s32(*(int32x2_t *)v13.f32, *(int32x2_t *)v12.i8);
            }
            v86 = vmulq_f32(v9, vcvt_hight_f32_f16(v11));
            v13 = vmulq_f32(v10, vcvtq_f32_f16(*(float16x4_t *)v11.i8));
            v11.i64[0] = v69->i64[0];
            v11.u64[1] = (unint64_t)v14;
          }
          else
          {
            v86 = vmulq_f32(v9, vcvt_hight_f32_f16(*v67));
            v13 = vmulq_f32(v10, vcvtq_f32_f16(*(float16x4_t *)v67->i8));
            v11 = *v69;
          }
LABEL_77:
          ++v67;
          v71 = vaddq_f32(v71, v13);
          v73 = vaddq_f32(v73, v86);
          ++v69;
          v12 = (float16x8_t)vcvtq_f32_f16(*(float16x4_t *)v11.i8);
          v11 = (float16x8_t)vcvt_hight_f32_f16(v11);
          v75 = vmlaq_f32(v75, (float32x4_t)v11, v9);
          v74 = vmlaq_f32(v74, (float32x4_t)v12, v10);
          _VF = __OFSUB__(i, 8);
        }
      }
LABEL_114:
      _Q17 = vaddq_f32(v71, v73);
      _Q17.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(_Q17, (float32x4_t)vdupq_laneq_s64((int64x2_t)_Q17, 1)));
      __asm { FCVT            H17, S17 }
      *v39 = _Q17.i16[0];
      _Q16 = vaddq_f32(v74, v75);
      _Q16.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(_Q16, (float32x4_t)vdupq_laneq_s64((int64x2_t)_Q16, 1)));
      __asm { FCVT            H16, S16 }
      v39[1] = _Q16.i16[0];
      v39 += 2;
      ++v40;
      v41 = (int *)((char *)v41 + v23);
      if (v40 == v21)
        goto LABEL_115;
    }
  }
  return result;
}

int *resample_horizontal<half,half,3,true>(int *result, unsigned int a2, double a3, double a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t *a8, int *a9, int a10)
{
  float32x4_t v10;
  float32x4_t v11;
  float16x8_t v12;
  float16x8_t v13;
  float16x8_t v14;
  float32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  _BOOL4 v28;
  unsigned int v29;
  uint64_t v30;
  float32x4_t v31;
  float32x4_t v32;
  uint64_t v33;
  int8x16_t v34;
  int8x16_t v35;
  uint64_t v36;
  int8x16_t v37;
  uint64_t v38;
  unint64_t v39;
  int *v40;
  uint64_t v41;
  float16x8_t *v42;
  float16x8_t *v43;
  int8x16_t *v44;
  int v45;
  float16x4_t *v46;
  unint64_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float16x8_t v56;
  float16x8_t v57;
  float32x4_t v58;
  float32x4_t v59;
  int32x4_t v60;
  float16x8_t v61;
  float32x4_t v62;
  float16x8_t v63;
  float32x4_t v64;
  float32x4_t v65;
  int32x4_t v66;
  float32x4_t v67;
  int8x16_t v68;
  float32x4_t v69;
  float32x4_t v75;
  float16x8_t v76;
  float16x8_t v77;
  float32x4_t v78;
  float32x4_t v79;
  int32x4_t v80;
  float16x8_t v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  float16x8_t *v86;
  unint64_t v87;
  _WORD *v88;
  int8x16_t *v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  unint64_t v96;
  unsigned int v97;
  float16x8_t v98;
  float16x8_t v99;
  int32x2_t v100;
  __int16 v101;
  int32x2_t v102;
  float32x4_t v103;
  float32x4_t v104;
  int32x4_t v105;
  uint64_t v106;
  int32x2_t v107;
  int32x2_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  unint64_t v114;
  float32x4_t v115;
  float16x8_t v116;
  float16x8_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  int32x4_t v121;
  float16x8_t v122;
  BOOL v123;
  int32x2_t v124;
  int32x2_t v125;
  uint64_t v126;
  __int16 v127;
  float32x4_t v128;
  float32x4_t v129;
  int32x4_t v130;
  int32x2_t v131;
  float32x4_t v132;
  int8x16_t v133;
  float32x4_t v134;
  unint64_t v136;

  if ((int)a6 >= 1 && a10 >= 1)
  {
    v16 = 0;
    v17 = *a8;
    v18 = a8[1];
    v19 = a9[1];
    v136 = *a9;
    v20 = v136 / 6;
    if (v136 / 6 >= v19 >> 1)
      v20 = v19 >> 1;
    v21 = a6;
    v22 = 4 * a2 + 8;
    v23 = (char *)result + v22 * a6;
    v24 = *(int *)&v23[-v22 + 4] + (uint64_t)*(int *)&v23[-v22];
    if (v20 < v24)
      v24 = v20;
    v25 = (4 * a2 + 39) / (4 * a2 + 8);
    if (a2 > 5)
      v25 = 1;
    v26 = a6 - v25;
    v27 = a2 % 5;
    v28 = a2 > 4;
    if (a2 % 5)
      v28 = 0;
    v29 = 15 * (a2 / 5 - v28);
    if (!v27)
      v27 = 5;
    *(float *)&a3 = (float)v27;
    v30 = (6 * v27 + 31) & 0x3FFFFFFE0;
    v31 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    if (a2 >= 5)
      a2 = 5;
    *(float *)&a4 = (float)a2;
    v32 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
    v33 = v30 + 2 * v29;
    v34 = (int8x16_t)vcgtq_f32(v32, (float32x4_t)xmmword_185004980);
    v35 = (int8x16_t)vcgtq_f32(v32, (float32x4_t)xmmword_185004970);
    if (v26 <= 1)
      v36 = 1;
    else
      v36 = v21 - v25;
    v37 = (int8x16_t)vcgtq_f32(v31, (float32x4_t)xmmword_185004970);
    do
    {
      v38 = *(_QWORD *)(a7 + 8 * v16);
      if (v21 <= v25)
      {
        v39 = 0;
        v40 = result;
      }
      else
      {
        v39 = 0;
        v40 = result;
        do
        {
          v41 = *v40;
          v42 = (float16x8_t *)(v17 + 6 * (int)v41);
          v43 = (float16x8_t *)((char *)v42 + v33);
          if ((unint64_t)v42->u64 + v33 > 6 * v24 + v17)
            goto LABEL_36;
          if (v42 >= v43)
          {
            v48.i64[0] = 0x8000000080000000;
            v48.i64[1] = 0x8000000080000000;
            v49.i64[0] = 0x8000000080000000;
            v49.i64[1] = 0x8000000080000000;
            v50.i64[0] = 0x8000000080000000;
            v50.i64[1] = 0x8000000080000000;
            v51.i64[0] = 0x8000000080000000;
            v51.i64[1] = 0x8000000080000000;
            v52.i64[0] = 0x8000000080000000;
            v52.i64[1] = 0x8000000080000000;
            v53.i64[0] = 0x8000000080000000;
            v53.i64[1] = 0x8000000080000000;
          }
          else
          {
            v44 = (int8x16_t *)(v40 + 2);
            v45 = v40[1];
            v46 = (float16x4_t *)(v18 + 2 * v41);
            v47 = (unint64_t)&v43[-3];
            if ((unint64_t)v42 < v47)
            {
              v50.i64[0] = 0x8000000080000000;
              v50.i64[1] = 0x8000000080000000;
              v51.i64[0] = 0x8000000080000000;
              v51.i64[1] = 0x8000000080000000;
              v52.i64[0] = 0x8000000080000000;
              v52.i64[1] = 0x8000000080000000;
              v53.i64[0] = 0x8000000080000000;
              v53.i64[1] = 0x8000000080000000;
              v48.i64[0] = 0x8000000080000000;
              v48.i64[1] = 0x8000000080000000;
              v49.i64[0] = 0x8000000080000000;
              v49.i64[1] = 0x8000000080000000;
              do
              {
                v11 = (float32x4_t)vandq_s8(v44[1], v34);
                v75 = (float32x4_t)vandq_s8(*v44, v35);
                v44 = (int8x16_t *)((char *)v44 + 20);
                v77 = *v42;
                v76 = v42[1];
                v42 = (float16x8_t *)((char *)v42 + 30);
                v14 = (float16x8_t)vcvt_hight_f32_f16(v77);
                v15 = vcvtq_f32_f16(*(float16x4_t *)v76.i8);
                v78 = (float32x4_t)vzip1q_s32((int32x4_t)v75, (int32x4_t)v75);
                v78.i32[2] = v75.i32[0];
                v79 = (float32x4_t)vzip1q_s32((int32x4_t)v11, (int32x4_t)v11);
                v79.i32[2] = v11.i32[0];
                v80 = (int32x4_t)vextq_s8((int8x16_t)v75, (int8x16_t)v75, 4uLL);
                v53 = vmlaq_f32(v53, vcvt_hight_f32_f16(v76), v79);
                v52 = vmlaq_f32(v52, v15, (float32x4_t)vextq_s8((int8x16_t)v75, (int8x16_t)vdupq_laneq_s32((int32x4_t)v75, 3), 8uLL));
                v50 = vmlaq_f32(v50, vcvtq_f32_f16(*(float16x4_t *)v77.i8), v78);
                v51 = vmlaq_f32(v51, (float32x4_t)v14, (float32x4_t)vzip1q_s32(v80, v80));
                v81 = *(float16x8_t *)v46->i8;
                v46 = (float16x4_t *)((char *)v46 + 10);
                v13 = (float16x8_t)vcvtq_f32_f16(*(float16x4_t *)v81.i8);
                v12 = (float16x8_t)vcvt_hight_f32_f16(v81);
                v49 = vmlaq_f32(v49, (float32x4_t)v12, v11);
                v48 = vmlaq_f32(v48, (float32x4_t)v13, v75);
                v45 -= 5;
              }
              while ((unint64_t)v42 < v47);
            }
            else
            {
              v48.i64[0] = 0x8000000080000000;
              v48.i64[1] = 0x8000000080000000;
              v49.i64[0] = 0x8000000080000000;
              v49.i64[1] = 0x8000000080000000;
              v50.i64[0] = 0x8000000080000000;
              v50.i64[1] = 0x8000000080000000;
              v51.i64[0] = 0x8000000080000000;
              v51.i64[1] = 0x8000000080000000;
              v52.i64[0] = 0x8000000080000000;
              v52.i64[1] = 0x8000000080000000;
              v53.i64[0] = 0x8000000080000000;
              v53.i64[1] = 0x8000000080000000;
            }
            if (v45 >= 1)
            {
              if (v45 >= 9)
              {
                v54 = (float32x4_t)vandq_s8(v44[1], v34);
                v55 = (float32x4_t)vandq_s8(*v44, v35);
                v44 = (int8x16_t *)((char *)v44 + 20);
                v57 = *v42;
                v56 = v42[1];
                v42 = (float16x8_t *)((char *)v42 + 30);
                v58 = (float32x4_t)vzip1q_s32((int32x4_t)v55, (int32x4_t)v55);
                v58.i32[2] = v55.i32[0];
                v59 = (float32x4_t)vzip1q_s32((int32x4_t)v54, (int32x4_t)v54);
                v59.i32[2] = v54.i32[0];
                v60 = (int32x4_t)vextq_s8((int8x16_t)v55, (int8x16_t)v55, 4uLL);
                v53 = vmlaq_f32(v53, vcvt_hight_f32_f16(v56), v59);
                v52 = vmlaq_f32(v52, vcvtq_f32_f16(*(float16x4_t *)v56.i8), (float32x4_t)vextq_s8((int8x16_t)v55, (int8x16_t)vdupq_laneq_s32((int32x4_t)v55, 3), 8uLL));
                v50 = vmlaq_f32(v50, vcvtq_f32_f16(*(float16x4_t *)v57.i8), v58);
                v51 = vmlaq_f32(v51, vcvt_hight_f32_f16(v57), (float32x4_t)vzip1q_s32(v60, v60));
                v61 = *(float16x8_t *)v46->i8;
                v46 = (float16x4_t *)((char *)v46 + 10);
                v49 = vmlaq_f32(v49, vcvt_hight_f32_f16(v61), v54);
                v48 = vmlaq_f32(v48, vcvtq_f32_f16(*(float16x4_t *)v61.i8), v55);
              }
              v62 = (float32x4_t)vandq_s8(v44[1], (int8x16_t)vcgtq_f32(v31, (float32x4_t)xmmword_185004980));
              v11 = (float32x4_t)vandq_s8(*v44, v37);
              v63 = v42[1];
              v14 = (float16x8_t)vcvt_hight_f32_f16(*v42);
              v15 = vcvtq_f32_f16(*(float16x4_t *)v63.i8);
              v64 = (float32x4_t)vzip1q_s32((int32x4_t)v11, (int32x4_t)v11);
              v64.i32[2] = v11.i32[0];
              v65 = (float32x4_t)vzip1q_s32((int32x4_t)v62, (int32x4_t)v62);
              v65.i32[2] = v62.i32[0];
              v66 = (int32x4_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 4uLL);
              v53 = vmlaq_f32(v53, vcvt_hight_f32_f16(v63), v65);
              v52 = vmlaq_f32(v52, v15, (float32x4_t)vextq_s8((int8x16_t)v11, (int8x16_t)vdupq_laneq_s32((int32x4_t)v11, 3), 8uLL));
              v50 = vmlaq_f32(v50, vcvtq_f32_f16(*(float16x4_t *)v42->i8), v64);
              v51 = vmlaq_f32(v51, (float32x4_t)v14, (float32x4_t)vzip1q_s32(v66, v66));
              v13 = (float16x8_t)vcvtq_f32_f16(*v46);
              v12 = (float16x8_t)vcvt_hight_f32_f16(*(float16x8_t *)v46->i8);
              v49 = vmlaq_f32(v49, (float32x4_t)v12, v62);
              v48 = vmlaq_f32(v48, (float32x4_t)v13, v11);
            }
          }
          v10 = (float32x4_t)vextq_s8((int8x16_t)v53, (int8x16_t)v53, 4uLL).u64[0];
          v67 = vaddq_f32(v50, (float32x4_t)vextq_s8((int8x16_t)v52, (int8x16_t)v53, 4uLL));
          v68 = (int8x16_t)vaddq_f32(v51, v10);
          *(float16x4_t *)v67.f32 = vcvt_f16_f32(vaddq_f32((float32x4_t)vextq_s8(v68, (int8x16_t)vaddq_f32(v52, (float32x4_t)0), 8uLL), vaddq_f32(v67, (float32x4_t)vextq_s8((int8x16_t)v67, v68, 0xCuLL))));
          *(_DWORD *)v38 = v67.i32[0];
          *(_WORD *)(v38 + 4) = vdup_lane_s16(*(int16x4_t *)v67.f32, 2).u16[0];
          v69 = (float32x4_t)vextq_s8((int8x16_t)v48, (int8x16_t)v49, 0xCuLL);
          v69.i32[2] = 0;
          _Q17 = (int8x16_t)vaddq_f32(v48, v69);
          _Q17.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(_Q17, _Q17, 8uLL), vadd_f32(*(float32x2_t *)_Q17.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)_Q17.i8, 1))).u32[0];
          __asm { FCVT            H17, S17 }
          *(_WORD *)(v38 + 6) = _Q17.i16[0];
          v38 += 8;
          ++v39;
          v40 = (int *)((char *)v40 + v22);
        }
        while (v39 != v36);
        v39 = v36;
      }
LABEL_36:
      if (v39 >= v21)
        goto LABEL_180;
      do
      {
        v82 = *v40;
        if ((int)v82 >= (int)v24)
          v83 = v24;
        else
          v83 = *v40;
        v84 = v24 - v83;
        if (v40[1] >= v84)
          LODWORD(v85) = v84;
        else
          LODWORD(v85) = v40[1];
        if ((int)v85 < 1)
        {
          v94.i64[0] = 0x8000000080000000;
          v94.i64[1] = 0x8000000080000000;
          v95.i64[0] = 0x8000000080000000;
          v95.i64[1] = 0x8000000080000000;
          v90.i64[0] = 0x8000000080000000;
          v90.i64[1] = 0x8000000080000000;
          v91.i64[0] = 0x8000000080000000;
          v91.i64[1] = 0x8000000080000000;
          v92.i64[0] = 0x8000000080000000;
          v92.i64[1] = 0x8000000080000000;
          v93.i64[0] = 0x8000000080000000;
          v93.i64[1] = 0x8000000080000000;
          goto LABEL_177;
        }
        v86 = (float16x8_t *)(v17 + 6 * (_DWORD)v82);
        v87 = (unint64_t)&v86[-3] + 6 * (int)v85;
        v88 = (_WORD *)(v18 + 2 * v82);
        v89 = (int8x16_t *)(v40 + 2);
        if ((unint64_t)v86 >= v87)
        {
          v90.i64[0] = 0x8000000080000000;
          v90.i64[1] = 0x8000000080000000;
          v91.i64[0] = 0x8000000080000000;
          v91.i64[1] = 0x8000000080000000;
          v92.i64[0] = 0x8000000080000000;
          v92.i64[1] = 0x8000000080000000;
          v93.i64[0] = 0x8000000080000000;
          v93.i64[1] = 0x8000000080000000;
          v94.i64[0] = 0x8000000080000000;
          v94.i64[1] = 0x8000000080000000;
          v95.i64[0] = 0x8000000080000000;
          v95.i64[1] = 0x8000000080000000;
          goto LABEL_95;
        }
        v85 = (int)v85;
        v90.i64[0] = 0x8000000080000000;
        v90.i64[1] = 0x8000000080000000;
        v91.i64[0] = 0x8000000080000000;
        v91.i64[1] = 0x8000000080000000;
        v92.i64[0] = 0x8000000080000000;
        v92.i64[1] = 0x8000000080000000;
        v93.i64[0] = 0x8000000080000000;
        v93.i64[1] = 0x8000000080000000;
        v94.i64[0] = 0x8000000080000000;
        v94.i64[1] = 0x8000000080000000;
        v95.i64[0] = 0x8000000080000000;
        v95.i64[1] = 0x8000000080000000;
        do
        {
          v96 = v23 - (char *)v89;
          if ((unint64_t)(v23 - (char *)v89) >= 0x20)
            v96 = 32;
          if (v96 >= 0x20)
          {
            v11 = (float32x4_t)vandq_s8(v89[1], v34);
            v10 = (float32x4_t)vandq_s8(*v89, v35);
LABEL_50:
            v97 = v85;
            goto LABEL_51;
          }
          if ((_DWORD)v85)
          {
            if (v85 < 4)
            {
              if (v85 == 1)
              {
                v10 = (float32x4_t)v89->u32[0];
              }
              else
              {
                v106 = 0;
                if ((_DWORD)v85 != 2)
                  LODWORD(v106) = v89->i32[2];
                v10.i64[0] = v89->i64[0];
                v10.i64[1] = v106;
              }
              v11 = 0uLL;
            }
            else
            {
              if (v85 == 4)
              {
                v11 = 0uLL;
              }
              else if (v85 == 5)
              {
                v11 = (float32x4_t)v89[1].u32[0];
              }
              else
              {
                v107 = 0;
                if ((_DWORD)v85 != 6)
                {
                  v108 = 0;
                  if ((v85 & 1) == 0)
                    v108.i32[0] = v89[1].i32[3];
                  v11.i32[0] = v89[1].i32[2];
                  v107 = vzip1_s32(*(int32x2_t *)v11.f32, v108);
                }
                v11.i64[0] = v89[1].i64[0];
                *(int32x2_t *)&v11.u32[2] = v107;
              }
              v10 = *(float32x4_t *)v89;
            }
            goto LABEL_50;
          }
          v97 = 0;
          v10 = 0uLL;
          v11 = 0uLL;
LABEL_51:
          v98 = *v86;
          v99 = v86[1];
          if (v97)
          {
            if (v97 < 4)
            {
              if (v85)
              {
                if (v85 == 1)
                {
                  v14.i16[0] = *v88;
                }
                else
                {
                  v102 = 0;
                  if (v97 != 2)
                    v102.i16[0] = v88[2];
                  v15.i32[0] = *(_DWORD *)v88;
                  *(int32x2_t *)v14.i8 = vzip1_s32(*(int32x2_t *)v15.f32, v102);
                }
              }
              else
              {
                v14.i64[0] = 0;
              }
              v14.i64[1] = 0;
            }
            else
            {
              if (v85 == 4)
              {
                v15.i64[0] = 0;
              }
              else if (v85 == 5)
              {
                v15.i16[0] = v88[4];
              }
              else
              {
                v100 = 0;
                if (v97 != 6)
                {
                  v101 = 0;
                  if ((v85 & 1) == 0)
                    v101 = v88[7];
                  v100.i16[0] = v88[6];
                  v100.i16[1] = v101;
                }
                v15.i32[0] = *((_DWORD *)v88 + 2);
                *(int32x2_t *)v15.f32 = vzip1_s32(*(int32x2_t *)v15.f32, v100);
              }
              v14.i64[0] = *(_QWORD *)v88;
              v14.i64[1] = v15.i64[0];
            }
          }
          else
          {
            v14 = 0uLL;
          }
          v89 = (int8x16_t *)((char *)v89 + 20);
          v86 = (float16x8_t *)((char *)v86 + 30);
          v15 = vcvtq_f32_f16(*(float16x4_t *)v98.i8);
          v103 = (float32x4_t)vzip1q_s32((int32x4_t)v10, (int32x4_t)v10);
          v103.i32[2] = v10.i32[0];
          v104 = (float32x4_t)vzip1q_s32((int32x4_t)v11, (int32x4_t)v11);
          v104.i32[2] = v11.i32[0];
          v105 = (int32x4_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 4uLL);
          v91 = vmlaq_f32(v91, vcvt_hight_f32_f16(v98), (float32x4_t)vzip1q_s32(v105, v105));
          v93 = vmlaq_f32(v93, vcvt_hight_f32_f16(v99), v104);
          v92 = vmlaq_f32(v92, vcvtq_f32_f16(*(float16x4_t *)v99.i8), (float32x4_t)vextq_s8((int8x16_t)v10, (int8x16_t)vdupq_laneq_s32((int32x4_t)v10, 3), 8uLL));
          v90 = vmlaq_f32(v90, v15, v103);
          v88 += 5;
          v12 = (float16x8_t)vcvtq_f32_f16(*(float16x4_t *)v14.i8);
          v13 = (float16x8_t)vcvt_hight_f32_f16(v14);
          v95 = vmlaq_f32(v95, (float32x4_t)v13, v11);
          v94 = vmlaq_f32(v94, (float32x4_t)v12, v10);
          v85 -= 5;
        }
        while ((unint64_t)v86 < v87);
        if ((int)v85 < 1)
          goto LABEL_177;
LABEL_95:
        v109 = 0;
        v110 = v85;
        v111 = 3 * v85;
        v112 = 3 * v85;
        while (2)
        {
          v113 = v111 + v109;
          v114 = v23 - (char *)v89;
          if ((unint64_t)(v23 - (char *)v89) >= 0x20)
            v114 = 32;
          if (v114 >= 0x20)
          {
            v10.f32[0] = fminf((float)(int)v110, 8.0);
            v115 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0);
            v12 = (float16x8_t)vcgtq_f32(v115, (float32x4_t)xmmword_185004970);
            v13 = *(float16x8_t *)v89;
            v11 = (float32x4_t)vandq_s8(v89[1], (int8x16_t)vcgtq_f32(v115, (float32x4_t)xmmword_185004980));
            v10 = (float32x4_t)vandq_s8(*v89, (int8x16_t)v12);
            goto LABEL_100;
          }
          if (v110 < 4)
          {
            if (v113 == 3)
            {
              v10 = (float32x4_t)v89->u32[0];
            }
            else
            {
              if (v111 + v109 == 6)
                v11.i64[0] = 0;
              else
                v11.i32[0] = v89->i32[2];
              v10.i64[0] = v89->i64[0];
              v10.i64[1] = v11.i64[0];
            }
            v11 = 0uLL;
            v89 = (int8x16_t *)((char *)v89 + 20);
          }
          else
          {
            if ((_DWORD)v110 == 4)
            {
              v11 = 0uLL;
            }
            else if ((_DWORD)v110 == 5)
            {
              v11 = (float32x4_t)v89[1].u32[0];
            }
            else
            {
              if (v111 + v109 == 18)
              {
                v125 = 0;
              }
              else
              {
                v124 = 0;
                if ((v110 & 1) == 0)
                  v124.i32[0] = v89[1].i32[3];
                v11.i32[0] = v89[1].i32[2];
                v125 = vzip1_s32(*(int32x2_t *)v11.f32, v124);
              }
              v11.i64[0] = v89[1].i64[0];
              *(int32x2_t *)&v11.u32[2] = v125;
            }
            v10 = *(float32x4_t *)v89;
LABEL_100:
            v89 = (int8x16_t *)((char *)v89 + 20);
            if (v110 > 5)
            {
              v117 = *v86;
              v116 = v86[1];
              v86 = (float16x8_t *)((char *)v86 + 30);
              v14 = (float16x8_t)vcvtq_f32_f16(*(float16x4_t *)v117.i8);
              v15 = vcvtq_f32_f16(*(float16x4_t *)v116.i8);
              v118 = vcvt_hight_f32_f16(v116);
              v119 = (float32x4_t)vzip1q_s32((int32x4_t)v10, (int32x4_t)v10);
              v119.i32[2] = v10.i32[0];
              v13 = (float16x8_t)vcvt_hight_f32_f16(v117);
              v120 = (float32x4_t)vzip1q_s32((int32x4_t)v11, (int32x4_t)v11);
              v120.i32[2] = v11.i32[0];
              v121 = (int32x4_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 4uLL);
              v91 = vmlaq_f32(v91, (float32x4_t)v13, (float32x4_t)vzip1q_s32(v121, v121));
              v93 = vmlaq_f32(v93, v118, v120);
              v92 = vmlaq_f32(v92, v15, (float32x4_t)vextq_s8((int8x16_t)v10, (int8x16_t)vdupq_laneq_s32((int32x4_t)v10, 3), 8uLL));
              v90 = vmlaq_f32(v90, (float32x4_t)v14, v119);
              if (v110 >= 8)
              {
                v122 = *(float16x8_t *)v88;
                goto LABEL_103;
              }
LABEL_162:
              if ((_DWORD)v110 == 4)
              {
                v13.i64[0] = 0;
              }
              else if ((_DWORD)v110 == 5)
              {
                v13.i16[0] = v88[4];
              }
              else
              {
                if (v111 + v109 == 18)
                  v118.i64[0] = 0;
                else
                  v118.i16[0] = v88[6];
                v13.i32[0] = *((_DWORD *)v88 + 2);
                *(int32x2_t *)v13.i8 = vzip1_s32(*(int32x2_t *)v13.i8, *(int32x2_t *)v118.f32);
              }
              v122.i64[0] = *(_QWORD *)v88;
              v122.i64[1] = v13.i64[0];
LABEL_103:
              v88 += 5;
              v13 = (float16x8_t)vcvtq_f32_f16(*(float16x4_t *)v122.i8);
              v12 = (float16x8_t)vcvt_hight_f32_f16(v122);
              v95 = vmlaq_f32(v95, (float32x4_t)v12, v11);
              v94 = vmlaq_f32(v94, (float32x4_t)v13, v10);
              v109 -= 15;
              v123 = (uint64_t)v110 <= 5;
              v110 -= 5;
              if (v123)
                goto LABEL_177;
              continue;
            }
          }
          break;
        }
        v126 = v111 + v109;
        if ((v112 + v109) < 8)
        {
          if ((v112 + v109) < 4)
          {
            if (v126)
            {
              if (v126 == 1)
              {
                v12.i16[0] = v86->i16[0];
                v13.i64[0] = 0;
              }
              else
              {
                v12.i32[0] = v86->i32[0];
                v13.i16[0] = v86->i16[2];
              }
              *(int32x2_t *)v12.i8 = vzip1_s32(*(int32x2_t *)v12.i8, *(int32x2_t *)v13.i8);
            }
            else
            {
              v12.i64[0] = 0;
            }
            v12.i64[1] = 0;
          }
          else
          {
            if (v126 == 4)
            {
              v13.i64[0] = 0;
            }
            else if (v126 == 5)
            {
              v13.i16[0] = v86->i16[4];
            }
            else
            {
              if (v111 + v109 == 6)
                v12.i64[0] = 0;
              else
                v12.i16[0] = v86->i16[6];
              v13.i32[0] = v86->i32[2];
              *(int32x2_t *)v13.i8 = vzip1_s32(*(int32x2_t *)v13.i8, *(int32x2_t *)v12.i8);
            }
            v12.i64[0] = v86->i64[0];
            v12.i64[1] = v13.i64[0];
          }
          v13 = 0uLL;
        }
        else
        {
          if (v126 == 8)
          {
            v13 = 0uLL;
          }
          else if ((unint64_t)(v126 - 8) < 4)
          {
            if (v113 == 9)
            {
              v12.i16[0] = v86[1].i16[0];
              v13.i64[0] = 0;
            }
            else
            {
              v12.i32[0] = v86[1].i32[0];
              v13.i16[0] = v86[1].i16[2];
            }
            *(int32x2_t *)v13.i8 = vzip1_s32(*(int32x2_t *)v12.i8, *(int32x2_t *)v13.i8);
          }
          else
          {
            if (v126 == 12)
            {
              v12.i64[0] = 0;
            }
            else if (v126 == 13)
            {
              v12.i16[0] = v86[1].i16[4];
            }
            else
            {
              v127 = 0;
              if ((v126 & 1) == 0)
                v127 = v86[1].i16[7];
              v12.i32[0] = v86[1].i32[2];
              v12.i16[2] = v86[1].i16[6];
              v12.i16[3] = v127;
            }
            v13.i64[0] = v86[1].i64[0];
            v13.i64[1] = v12.i64[0];
          }
          v12 = *v86;
        }
        v14 = (float16x8_t)vcvtq_f32_f16(*(float16x4_t *)v13.i8);
        v13 = (float16x8_t)vcvt_hight_f32_f16(v13);
        v15 = vcvtq_f32_f16(*(float16x4_t *)v12.i8);
        v118 = vcvt_hight_f32_f16(v12);
        v128 = (float32x4_t)vzip1q_s32((int32x4_t)v11, (int32x4_t)v11);
        v128.i32[2] = v11.i32[0];
        v129 = (float32x4_t)vzip1q_s32((int32x4_t)v10, (int32x4_t)v10);
        v129.i32[2] = v10.i32[0];
        v130 = (int32x4_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 4uLL);
        v91 = vmlaq_f32(v91, v118, (float32x4_t)vzip1q_s32(v130, v130));
        v90 = vmlaq_f32(v90, v15, v129);
        v93 = vmlaq_f32(v93, (float32x4_t)v13, v128);
        v92 = vmlaq_f32(v92, (float32x4_t)v14, (float32x4_t)vextq_s8((int8x16_t)v10, (int8x16_t)vdupq_laneq_s32((int32x4_t)v10, 3), 8uLL));
        if (v110 >= 4)
        {
          v86 = (float16x8_t *)((char *)v86 + 30);
          goto LABEL_162;
        }
        if (v110 == 1)
        {
          v118.i16[0] = *v88;
        }
        else
        {
          v131 = 0;
          if (v110 != 2)
            v131.i16[0] = v88[2];
          v13.i32[0] = *(_DWORD *)v88;
          *(int32x2_t *)v118.f32 = vzip1_s32(*(int32x2_t *)v13.i8, v131);
        }
        v12 = (float16x8_t)vcvtq_f32_f16(*(float16x4_t *)v118.f32);
        v95 = vmlaq_f32(v95, (float32x4_t)0, v11);
        v94 = vmlaq_f32(v94, (float32x4_t)v12, v10);
LABEL_177:
        v10 = (float32x4_t)vextq_s8((int8x16_t)v93, (int8x16_t)v93, 4uLL).u64[0];
        v132 = vaddq_f32(v90, (float32x4_t)vextq_s8((int8x16_t)v92, (int8x16_t)v93, 4uLL));
        v133 = (int8x16_t)vaddq_f32(v91, v10);
        *(float16x4_t *)v132.f32 = vcvt_f16_f32(vaddq_f32((float32x4_t)vextq_s8(v133, (int8x16_t)vaddq_f32(v92, (float32x4_t)0), 8uLL), vaddq_f32(v132, (float32x4_t)vextq_s8((int8x16_t)v132, v133, 0xCuLL))));
        *(_DWORD *)v38 = v132.i32[0];
        *(_WORD *)(v38 + 4) = vdup_lane_s16(*(int16x4_t *)v132.f32, 2).u16[0];
        v134 = (float32x4_t)vextq_s8((int8x16_t)v94, (int8x16_t)v95, 0xCuLL);
        v134.i32[2] = 0;
        _Q17 = (int8x16_t)vaddq_f32(v94, v134);
        _Q17.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(_Q17, _Q17, 8uLL), vadd_f32(*(float32x2_t *)_Q17.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)_Q17.i8, 1))).u32[0];
        __asm { FCVT            H17, S17 }
        *(_WORD *)(v38 + 6) = _Q17.i16[0];
        v38 += 8;
        ++v39;
        v40 = (int *)((char *)v40 + v22);
      }
      while (v39 != v21);
LABEL_180:
      v17 += v136;
      v18 += v19;
      ++v16;
    }
    while (v16 != a10);
  }
  return result;
}

float32x2_t *resample_horizontal<half,half,4,true>(float32x2_t *result, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  _BOOL4 v19;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  float16x4_t *v26;
  unint64_t v27;
  float32x2_t *v28;
  uint64_t v29;
  float16x8_t *v30;
  float16x8_t *v31;
  float32x2_t *v32;
  int v33;
  float16x4_t *v34;
  unint64_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float16x8_t v41;
  float32x4_t v46;
  float32x4_t v47;
  float16x8_t v48;
  float16x8_t v49;
  uint64_t v50;
  __int32 v51;
  int v52;
  float16x8_t *v53;
  unint64_t v54;
  float16x4_t *v55;
  float32x2_t *v56;
  uint64_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  unint64_t v63;
  float32x4_t v64;
  float16x8_t v65;
  float16x8_t v66;
  float16x4_t v67;
  int32x2_t v68;
  int32x2_t v69;
  int v70;
  unint64_t v71;
  float32x4_t v72;
  float16x8_t v73;
  float16x8_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float16x4_t v79;
  unsigned int v80;
  uint64_t v81;
  int32x2_t v82;
  int32x2_t v83;
  int32x2_t v84;

  if (a4 >= 1 && a8 >= 1)
  {
    v8 = 0;
    v9 = *a6;
    v10 = a6[1];
    v11 = *a7;
    v12 = a7[1];
    if (v11 >> 3 >= v12 >> 1)
      v13 = v12 >> 1;
    else
      v13 = v11 >> 3;
    v14 = a4;
    v15 = 4 * a2;
    v16 = v15 + 8;
    v17 = (char *)result + (v15 + 8) * a4;
    if (v13 >= *(int *)&v17[-v15 - 4] + (uint64_t)*(int *)&v17[-v15 - 8])
      v13 = *(int *)&v17[-v15 - 4] + (uint64_t)*(int *)&v17[-v15 - 8];
    v18 = (4 * a2 + 23) / (4 * a2 + 8);
    if (a2 > 1)
      v18 = 1;
    v19 = a2 > 3;
    _ZF = (a2 & 3) == 0;
    LODWORD(v21) = (8 * (a2 & 3)) | 0x20;
    if ((a2 & 3) != 0)
      v21 = v21;
    else
      v21 = 64;
    v22 = v14 - v18;
    v23 = a2 >> 2;
    if (!_ZF)
      v19 = 0;
    v24 = ((v21 - 1) & 0xFFFFFFFFFFFFFFE0) + 32 * (v23 - v19);
    v25 = a8;
    if (v22 <= 1)
      v22 = 1;
    while (1)
    {
      v26 = *(float16x4_t **)(a5 + 8 * v8);
      if (v14 <= v18)
      {
        v27 = 0;
        v28 = result;
      }
      else
      {
        v27 = 0;
        v28 = result;
        while (1)
        {
          v29 = v28->i32[0];
          v30 = (float16x8_t *)(v9 + 8 * v29);
          v31 = (float16x8_t *)((char *)v30 + v24);
          if ((unint64_t)v30->u64 + v24 > 8 * v13 + v9)
            break;
          if (v30 >= v31)
          {
            v36.i64[0] = 0x8000000080000000;
            v36.i64[1] = 0x8000000080000000;
            v37.i64[0] = 0x8000000080000000;
            v37.i64[1] = 0x8000000080000000;
            v38.i64[0] = 0x8000000080000000;
            v38.i64[1] = 0x8000000080000000;
            v39.i64[0] = 0x8000000080000000;
            v39.i64[1] = 0x8000000080000000;
            v40.i64[0] = 0x8000000080000000;
            v40.i64[1] = 0x8000000080000000;
          }
          else
          {
            v32 = v28 + 1;
            v33 = v28->i32[1];
            v34 = (float16x4_t *)(v10 + 2 * v29);
            v35 = (unint64_t)&v31[-2];
            if ((unint64_t)v30 < v35)
            {
              v37.i64[0] = 0x8000000080000000;
              v37.i64[1] = 0x8000000080000000;
              v38.i64[0] = 0x8000000080000000;
              v38.i64[1] = 0x8000000080000000;
              v39.i64[0] = 0x8000000080000000;
              v39.i64[1] = 0x8000000080000000;
              v40.i64[0] = 0x8000000080000000;
              v40.i64[1] = 0x8000000080000000;
              v36.i64[0] = 0x8000000080000000;
              v36.i64[1] = 0x8000000080000000;
              do
              {
                v46 = *(float32x4_t *)v32->f32;
                v32 += 2;
                v47 = v46;
                v49 = *v30;
                v48 = v30[1];
                v30 += 2;
                v37 = vmlaq_n_f32(v37, vcvtq_f32_f16(*(float16x4_t *)v49.i8), v46.f32[0]);
                v38 = vmlaq_lane_f32(v38, vcvt_hight_f32_f16(v49), *(float32x2_t *)v46.f32, 1);
                v39 = vmlaq_laneq_f32(v39, vcvtq_f32_f16(*(float16x4_t *)v48.i8), v46, 2);
                v40 = vmlaq_laneq_f32(v40, vcvt_hight_f32_f16(v48), v46, 3);
                *(float16x4_t *)v46.f32 = *v34++;
                v36 = vmlaq_f32(v36, vcvtq_f32_f16(*(float16x4_t *)v46.f32), v47);
                v33 -= 4;
              }
              while ((unint64_t)v30 < v35);
            }
            else
            {
              v36.i64[0] = 0x8000000080000000;
              v36.i64[1] = 0x8000000080000000;
              v37.i64[0] = 0x8000000080000000;
              v37.i64[1] = 0x8000000080000000;
              v38.i64[0] = 0x8000000080000000;
              v38.i64[1] = 0x8000000080000000;
              v39.i64[0] = 0x8000000080000000;
              v39.i64[1] = 0x8000000080000000;
              v40.i64[0] = 0x8000000080000000;
              v40.i64[1] = 0x8000000080000000;
            }
            if (v33 >= 1)
            {
              v41 = v30[1];
              v37 = vmlaq_n_f32(v37, vcvtq_f32_f16(*(float16x4_t *)v30->i8), COERCE_FLOAT(*(_OWORD *)v32->f32));
              v38 = vmlaq_lane_f32(v38, vcvt_hight_f32_f16(*v30), *v32, 1);
              v39 = vmlaq_laneq_f32(v39, vcvtq_f32_f16(*(float16x4_t *)v41.i8), *(float32x4_t *)v32->f32, 2);
              v40 = vmlaq_laneq_f32(v40, vcvt_hight_f32_f16(v41), *(float32x4_t *)v32->f32, 3);
              v36 = vmlaq_f32(v36, vcvtq_f32_f16(*v34), *(float32x4_t *)v32->f32);
            }
          }
          *v26 = vcvt_f16_f32(vaddq_f32(vaddq_f32(v37, v39), vaddq_f32(v38, v40)));
          _S1 = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v36, (float32x4_t)vdupq_laneq_s64((int64x2_t)v36, 1)));
          __asm { FCVT            H1, S1 }
          v26[1].i16[0] = LOWORD(_S1);
          v26 = (float16x4_t *)((char *)v26 + 10);
          ++v27;
          v28 = (float32x2_t *)((char *)v28 + v16);
          if (v27 == v22)
          {
            v27 = v22;
            break;
          }
        }
      }
      if (v27 < v14)
        break;
LABEL_96:
      v9 += v11;
      v10 += v12;
      if (++v8 == v25)
        return result;
    }
    while (1)
    {
      v50 = v28->i32[0];
      if ((int)v50 >= (int)v13)
        v51 = v13;
      else
        v51 = v28->i32[0];
      v52 = v13 - v51;
      if (v28->i32[1] < v52)
        v52 = v28->i32[1];
      if (v52 < 1)
      {
        v62.i64[0] = 0x8000000080000000;
        v62.i64[1] = 0x8000000080000000;
        v58.i64[0] = 0x8000000080000000;
        v58.i64[1] = 0x8000000080000000;
        v59.i64[0] = 0x8000000080000000;
        v59.i64[1] = 0x8000000080000000;
        v60.i64[0] = 0x8000000080000000;
        v60.i64[1] = 0x8000000080000000;
        v61.i64[0] = 0x8000000080000000;
        v61.i64[1] = 0x8000000080000000;
        goto LABEL_93;
      }
      v53 = (float16x8_t *)(v9 + 8 * v50);
      v54 = (unint64_t)&v53[-2] + 8 * v52;
      v55 = (float16x4_t *)(v10 + 2 * v50);
      v56 = v28 + 1;
      if ((unint64_t)v53 >= v54)
      {
        v58.i64[0] = 0x8000000080000000;
        v58.i64[1] = 0x8000000080000000;
        v59.i64[0] = 0x8000000080000000;
        v59.i64[1] = 0x8000000080000000;
        v60.i64[0] = 0x8000000080000000;
        v60.i64[1] = 0x8000000080000000;
        v61.i64[0] = 0x8000000080000000;
        v61.i64[1] = 0x8000000080000000;
        v62.i64[0] = 0x8000000080000000;
        v62.i64[1] = 0x8000000080000000;
        goto LABEL_59;
      }
      v57 = v52;
      v58.i64[0] = 0x8000000080000000;
      v58.i64[1] = 0x8000000080000000;
      v59.i64[0] = 0x8000000080000000;
      v59.i64[1] = 0x8000000080000000;
      v60.i64[0] = 0x8000000080000000;
      v60.i64[1] = 0x8000000080000000;
      v61.i64[0] = 0x8000000080000000;
      v61.i64[1] = 0x8000000080000000;
      v62.i64[0] = 0x8000000080000000;
      v62.i64[1] = 0x8000000080000000;
      do
      {
        v63 = v17 - (char *)v56;
        if ((unint64_t)(v17 - (char *)v56) >= 0x10)
          v63 = 16;
        if (v63 < 0x10)
        {
          if (v57)
          {
            if (v57 == 1)
            {
              v64 = (float32x4_t)v56->u32[0];
            }
            else
            {
              v68 = 0;
              if ((_DWORD)v57 != 2)
              {
                v69 = 0;
                if ((v52 & 1) == 0)
                  v69.i32[0] = v56[1].i32[1];
                v68.i32[0] = v56[1].i32[0];
                v68 = vzip1_s32(v68, v69);
              }
              *(float32x2_t *)v64.f32 = *v56;
              *(int32x2_t *)&v64.u32[2] = v68;
            }
          }
          else
          {
            v64 = 0uLL;
          }
        }
        else
        {
          v64 = *(float32x4_t *)v56->f32;
        }
        v56 += 2;
        v66 = *v53;
        v65 = v53[1];
        v53 += 2;
        v58 = vmlaq_n_f32(v58, vcvtq_f32_f16(*(float16x4_t *)v66.i8), v64.f32[0]);
        v59 = vmlaq_lane_f32(v59, vcvt_hight_f32_f16(v66), *(float32x2_t *)v64.f32, 1);
        v60 = vmlaq_laneq_f32(v60, vcvtq_f32_f16(*(float16x4_t *)v65.i8), v64, 2);
        v61 = vmlaq_laneq_f32(v61, vcvt_hight_f32_f16(v65), v64, 3);
        v67 = *v55++;
        v62 = vmlaq_f32(v62, vcvtq_f32_f16(v67), v64);
        v57 -= 4;
      }
      while ((unint64_t)v53 < v54);
      if ((int)v57 >= 1)
        break;
LABEL_93:
      *v26 = vcvt_f16_f32(vaddq_f32(vaddq_f32(v58, v60), vaddq_f32(v59, v61)));
      _S1 = vaddv_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v62, (float32x4_t)vdupq_laneq_s64((int64x2_t)v62, 1)));
      __asm { FCVT            H1, S1 }
      v26[1].i16[0] = LOWORD(_S1);
      v26 = (float16x4_t *)((char *)v26 + 10);
      ++v27;
      v28 = (float32x2_t *)((char *)v28 + v16);
      if (v27 == v14)
        goto LABEL_96;
    }
    v52 = v57;
LABEL_59:
    v70 = v52;
    while (1)
    {
      v71 = v17 - (char *)v56;
      if ((unint64_t)(v17 - (char *)v56) >= 0x10)
        v71 = 16;
      if (v71 < 0x10)
      {
        if (v70 == 1)
        {
          v80 = v56->i32[0];
          v56 += 2;
          v72 = (float32x4_t)v80;
          v74.i64[0] = v53->i64[0];
          goto LABEL_73;
        }
        v82 = 0;
        if (v70 != 2)
        {
          v83 = 0;
          if ((v52 & 1) == 0)
            v83.i32[0] = v56[1].i32[1];
          v82.i32[0] = v56[1].i32[0];
          v82 = vzip1_s32(v82, v83);
        }
        *(float32x2_t *)v72.f32 = *v56;
        *(int32x2_t *)&v72.u32[2] = v82;
      }
      else
      {
        v72 = *(float32x4_t *)v56->f32;
      }
      v56 += 2;
      if (v70 >= 4)
      {
        v73 = v53[1];
LABEL_66:
        v74 = *v53;
        goto LABEL_67;
      }
      if ((v70 & 0x3FFFFFFE) != 0)
      {
        v73 = 0uLL;
        if (v70 != 2)
          v73.i64[0] = v53[1].i64[0];
        goto LABEL_66;
      }
      v74.i64[0] = v53->i64[0];
      if (v70 != 1)
      {
        v81 = v53->i64[1];
        goto LABEL_74;
      }
LABEL_73:
      v81 = 0;
LABEL_74:
      v74.i64[1] = v81;
      v73 = 0uLL;
LABEL_67:
      v75 = vcvt_hight_f32_f16(v74);
      v76 = vcvtq_f32_f16(*(float16x4_t *)v74.i8);
      v77 = vcvt_hight_f32_f16(v73);
      v78 = vcvtq_f32_f16(*(float16x4_t *)v73.i8);
      v58 = vmlaq_n_f32(v58, v76, v72.f32[0]);
      v59 = vmlaq_lane_f32(v59, v75, *(float32x2_t *)v72.f32, 1);
      v60 = vmlaq_laneq_f32(v60, v78, v72, 2);
      v61 = vmlaq_laneq_f32(v61, v77, v72, 3);
      if (v70 <= 3)
      {
        if (v70)
        {
          if (v70 == 1)
          {
            v76.i16[0] = v55->i16[0];
          }
          else
          {
            v84 = 0;
            if (v70 != 2)
              v84.i16[0] = v55->i16[2];
            v78.i32[0] = v55->i32[0];
            *(int32x2_t *)v76.f32 = vzip1_s32(*(int32x2_t *)v78.f32, v84);
          }
        }
        else
        {
          v76.i64[0] = 0;
        }
        v62 = vmlaq_f32(v62, vcvtq_f32_f16(*(float16x4_t *)v76.f32), v72);
        goto LABEL_93;
      }
      v53 += 2;
      v79 = *v55++;
      v62 = vmlaq_f32(v62, vcvtq_f32_f16(v79), v72);
      _VF = __OFSUB__(v70, 4);
      v70 -= 4;
      if ((v70 < 0) ^ _VF | (v70 == 0))
        goto LABEL_93;
    }
  }
  return result;
}

int *resample_horizontal<float,float,1,false>(int *result, unsigned int a2, double a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t *a7, int *a8, int a9)
{
  float32x4_t v9;
  float32x4_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  float32x4_t v24;
  uint64_t v25;
  float32x4_t v26;
  int8x16_t v27;
  int8x16_t v28;
  uint64_t v29;
  int8x16_t v30;
  int8x16_t v31;
  _DWORD *v32;
  unint64_t v33;
  int *v34;
  float32x4_t *v35;
  float32x4_t *v36;
  int8x16_t *v37;
  int v38;
  unint64_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int8x16_t v42;
  int8x16_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int8x16_t v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  float32x4_t *v51;
  unint64_t v52;
  int8x16_t *v53;
  float32x4_t v54;
  uint64_t v55;
  float32x4_t v56;
  unint64_t v57;
  float32x4_t v58;
  float32x4_t v59;
  uint64_t v60;
  int32x2_t v61;
  int32x2_t v62;
  int v63;
  unint64_t v64;
  float32x4_t v65;
  int8x16_t v66;
  float32x4_t v67;
  float32x4_t v68;
  BOOL v69;
  int32x2_t v70;
  int32x2_t v71;
  float32x4_t v72;
  uint64_t v73;
  float32x4_t v74;
  uint64_t v75;
  uint64_t v76;
  int8x16_t v77;

  if ((int)a5 >= 1 && a9 >= 1)
  {
    v11 = 0;
    v12 = *a7;
    v13 = *a8;
    v14 = v13 >> 2;
    v15 = 4 * a2;
    v16 = v15 + 8;
    v17 = (char *)result + (v15 + 8) * a5;
    if (v13 >> 2 >= *(int *)&v17[-v15 - 4] + (uint64_t)*(int *)&v17[-v15 - 8])
      v14 = *(int *)&v17[-v15 - 4] + (uint64_t)*(int *)&v17[-v15 - 8];
    v18 = (4 * a2 + 39) / (4 * a2 + 8);
    if (a2 > 5)
      v18 = 1;
    v19 = a5 - v18;
    v20 = a2 > 7;
    v21 = a2 & 7;
    if ((a2 & 7) != 0)
      v20 = 0;
    else
      v21 = 8;
    v22 = (a2 + 8 * (v20 << 31 >> 31)) & 0xFFFFFFF8;
    *(float *)&a3 = (float)v21;
    v23 = (4 * (_BYTE)v21 + 31) & 0x60;
    v24 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    if (a2 >= 8)
      a2 = 8;
    *(float *)&a3 = (float)a2;
    v25 = v23 + 4 * v22;
    v26 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    v27 = (int8x16_t)vcgtq_f32(v26, (float32x4_t)xmmword_185004980);
    v28 = (int8x16_t)vcgtq_f32(v26, (float32x4_t)xmmword_185004970);
    v29 = a9;
    if (v19 <= 1)
      v19 = 1;
    v30 = (int8x16_t)vcgtq_f32(v24, (float32x4_t)xmmword_185004980);
    v31 = (int8x16_t)vcgtq_f32(v24, (float32x4_t)xmmword_185004970);
    while (1)
    {
      v32 = *(_DWORD **)(a6 + 8 * v11);
      if (a5 <= v18)
      {
        v33 = 0;
        v34 = result;
      }
      else
      {
        v33 = 0;
        v34 = result;
        while (1)
        {
          v35 = (float32x4_t *)(v12 + 4 * *v34);
          v36 = (float32x4_t *)((char *)v35 + v25);
          if ((unint64_t)v35 + v25 > 4 * v14 + v12)
            break;
          if (v35 >= v36)
          {
            v40.i64[0] = 0x8000000080000000;
            v40.i64[1] = 0x8000000080000000;
            v41.i64[0] = 0x8000000080000000;
            v41.i64[1] = 0x8000000080000000;
          }
          else
          {
            v37 = (int8x16_t *)(v34 + 2);
            v38 = v34[1];
            v39 = (unint64_t)&v36[-2];
            v40.i64[0] = 0x8000000080000000;
            v40.i64[1] = 0x8000000080000000;
            v41.i64[0] = 0x8000000080000000;
            v41.i64[1] = 0x8000000080000000;
            while ((unint64_t)v35 < v39)
            {
              v43 = *v37;
              v42 = v37[1];
              v37 += 2;
              v10 = (float32x4_t)vandq_s8(v43, v28);
              v9 = (float32x4_t)vandq_s8(v42, v27);
              v44 = *v35;
              v45 = v35[1];
              v35 += 2;
              v41 = vmlaq_f32(v41, v9, v45);
              v40 = vmlaq_f32(v40, v10, v44);
              v38 -= 8;
            }
            if (v38 >= 1)
            {
              v10 = (float32x4_t)vandq_s8(*v37, v31);
              v9 = (float32x4_t)vandq_s8(v37[1], v30);
              v41 = vmlaq_f32(v41, v9, v35[1]);
              v40 = vmlaq_f32(v40, v10, *v35);
            }
          }
          v46 = (int8x16_t)vaddq_f32(v40, v41);
          *(float32x2_t *)v46.i8 = vadd_f32(*(float32x2_t *)v46.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL));
          *v32++ = vadd_f32(*(float32x2_t *)v46.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v46.i8, 1)).u32[0];
          ++v33;
          v34 = (int *)((char *)v34 + v16);
          if (v33 == v19)
          {
            v33 = v19;
            break;
          }
        }
      }
      if (v33 < a5)
        break;
LABEL_108:
      v12 += v13;
      if (++v11 == v29)
        return result;
    }
    while (1)
    {
      v47 = *v34;
      if ((int)v47 >= (int)v14)
        v48 = v14;
      else
        v48 = *v34;
      v49 = v14 - v48;
      if (v34[1] >= v49)
        v50 = v49;
      else
        v50 = v34[1];
      if (v50 < 1)
      {
        v54.i64[0] = 0x8000000080000000;
        v54.i64[1] = 0x8000000080000000;
        v56.i64[0] = 0x8000000080000000;
        v56.i64[1] = 0x8000000080000000;
        goto LABEL_107;
      }
      v51 = (float32x4_t *)(v12 + 4 * v47);
      v52 = (unint64_t)v51[-2].u64 + 4 * v50;
      v53 = (int8x16_t *)(v34 + 2);
      v54.i64[0] = 0x8000000080000000;
      v54.i64[1] = 0x8000000080000000;
      if ((unint64_t)v51 < v52)
        break;
      LODWORD(v55) = v50;
      v56.i64[0] = 0x8000000080000000;
      v56.i64[1] = 0x8000000080000000;
LABEL_65:
      v63 = v55;
      while (1)
      {
        v64 = v17 - (char *)v53;
        if ((unint64_t)(v17 - (char *)v53) >= 0x20)
          v64 = 32;
        if (v64 < 0x20)
        {
          if (v63 < 4)
          {
            if (v63 == 1)
            {
              v10 = (float32x4_t)v53->u32[0];
            }
            else
            {
              v75 = 0;
              if (v63 != 2)
                LODWORD(v75) = v53->i32[2];
              v10.i64[0] = v53->i64[0];
              v10.i64[1] = v75;
            }
            v9 = 0uLL;
            goto LABEL_100;
          }
          if (v63 == 4)
          {
            v9 = 0uLL;
          }
          else if (v63 == 5)
          {
            v9 = (float32x4_t)v53[1].u32[0];
          }
          else
          {
            v70 = 0;
            if (v63 != 6)
            {
              v71 = 0;
              if ((v55 & 1) == 0)
                v71.i32[0] = v53[1].i32[3];
              v70.i32[0] = v53[1].i32[2];
              v70 = vzip1_s32(v70, v71);
            }
            v9.i64[0] = v53[1].i64[0];
            *(int32x2_t *)&v9.u32[2] = v70;
          }
          v10 = *(float32x4_t *)v53;
        }
        else
        {
          v9.f32[0] = fminf((float)v63, 8.0);
          v65 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 0);
          v66 = (int8x16_t)vcgtq_f32(v65, (float32x4_t)xmmword_185004970);
          v9 = (float32x4_t)vandq_s8(v53[1], (int8x16_t)vcgtq_f32(v65, (float32x4_t)xmmword_185004980));
          v10 = (float32x4_t)vandq_s8(*v53, v66);
        }
        if (v63 <= 7)
          break;
        v53 += 2;
        v67 = *v51;
        v68 = v51[1];
        v51 += 2;
        v56 = vmlaq_f32(v56, v68, v9);
        v54 = vmlaq_f32(v54, v67, v10);
        v69 = __OFSUB__(v63, 8);
        v63 -= 8;
        if ((v63 < 0) ^ v69 | (v63 == 0))
          goto LABEL_107;
      }
      if (v63 >= 4)
      {
        if (v63 == 4)
        {
          v72 = 0uLL;
        }
        else if (v63 == 5)
        {
          v72 = (float32x4_t)v51[1].u32[0];
        }
        else
        {
          v73 = 0;
          if (v63 != 6)
            LODWORD(v73) = v51[1].i32[2];
          v72.i64[0] = v51[1].i64[0];
          v72.i64[1] = v73;
        }
        v74 = *v51;
        goto LABEL_106;
      }
LABEL_100:
      if (v63 == 1)
      {
        v74 = (float32x4_t)v51->u32[0];
      }
      else
      {
        v76 = 0;
        if (v63 != 2)
          LODWORD(v76) = v51->i32[2];
        v74.i64[0] = v51->i64[0];
        v74.i64[1] = v76;
      }
      v72 = 0uLL;
LABEL_106:
      v54 = vmlaq_f32(v54, v74, v10);
      v56 = vmlaq_f32(v56, v72, v9);
LABEL_107:
      v77 = (int8x16_t)vaddq_f32(v54, v56);
      *(float32x2_t *)v77.i8 = vadd_f32(*(float32x2_t *)v77.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v77, v77, 8uLL));
      *v32++ = vadd_f32(*(float32x2_t *)v77.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v77.i8, 1)).u32[0];
      ++v33;
      v34 = (int *)((char *)v34 + v16);
      if (v33 == a5)
        goto LABEL_108;
    }
    v55 = v50;
    v56.i64[0] = 0x8000000080000000;
    v56.i64[1] = 0x8000000080000000;
    while (1)
    {
      v57 = v17 - (char *)v53;
      if ((unint64_t)(v17 - (char *)v53) >= 0x20)
        v57 = 32;
      if (v57 < 0x20)
      {
        if ((_DWORD)v55)
        {
          if (v55 >= 4)
          {
            if (v55 == 4)
            {
              v10 = 0uLL;
            }
            else if (v55 == 5)
            {
              v10 = (float32x4_t)v53[1].u32[0];
            }
            else
            {
              v61 = 0;
              if ((_DWORD)v55 != 6)
              {
                v62 = 0;
                if ((v50 & 1) == 0)
                  v62.i32[0] = v53[1].i32[3];
                v10.i32[0] = v53[1].i32[2];
                v61 = vzip1_s32(*(int32x2_t *)v10.f32, v62);
              }
              v10.i64[0] = v53[1].i64[0];
              *(int32x2_t *)&v10.u32[2] = v61;
            }
            v9 = *(float32x4_t *)v53;
            goto LABEL_42;
          }
          if (v55 == 1)
          {
            v9 = (float32x4_t)v53->u32[0];
          }
          else
          {
            v60 = 0;
            if ((_DWORD)v55 != 2)
              LODWORD(v60) = v53->i32[2];
            v9.i64[0] = v53->i64[0];
            v9.i64[1] = v60;
          }
        }
        else
        {
          v9 = 0uLL;
        }
        v10 = 0uLL;
      }
      else
      {
        v10 = (float32x4_t)vandq_s8(v53[1], v27);
        v9 = (float32x4_t)vandq_s8(*v53, v28);
      }
LABEL_42:
      v53 += 2;
      v58 = *v51;
      v59 = v51[1];
      v51 += 2;
      v56 = vmlaq_f32(v56, v59, v10);
      v54 = vmlaq_f32(v54, v58, v9);
      v55 -= 8;
      if ((unint64_t)v51 >= v52)
      {
        if ((int)v55 >= 1)
          goto LABEL_65;
        goto LABEL_107;
      }
    }
  }
  return result;
}

int *resample_horizontal<float,float,3,false>(int *result, unsigned int a2, double a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t *a7, int *a8, int a9)
{
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unsigned int v22;
  _BOOL4 v23;
  uint64_t v24;
  unint64_t v25;
  float32x4_t v26;
  unsigned int v27;
  float32x4_t v28;
  int8x16_t v29;
  int8x16_t v30;
  uint64_t v31;
  int8x16_t v32;
  int8x16_t v33;
  uint64_t v34;
  unint64_t v35;
  int *v36;
  float32x4_t *v37;
  float32x4_t *v38;
  int8x16_t *v39;
  int v40;
  unint64_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  int32x4_t v56;
  float32x4_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int v60;
  unint64_t v61;
  float32x4_t *v62;
  unint64_t v63;
  int8x16_t *v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  unint64_t v69;
  int32x4_t v70;
  int32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  int32x4_t v75;
  uint64_t v76;
  int32x2_t v77;
  int32x2_t v78;
  unint64_t v79;
  float32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  int32x4_t v86;
  int32x2_t v87;
  int32x2_t v88;
  uint64_t v89;
  uint64_t v90;
  float32x4_t v91;
  uint64_t v92;
  int32x2_t v93;
  float32x4_t v94;
  float32x4_t v95;
  int32x4_t v96;
  float32x4_t v97;
  int8x16_t v98;
  int8x16_t v99;

  if ((int)a5 >= 1 && a9 >= 1)
  {
    v14 = 0;
    v15 = *a7;
    v16 = *a8;
    v17 = v16 / 0xC;
    v18 = 4 * a2;
    v19 = v18 + 8;
    v20 = (char *)result + (v18 + 8) * a5;
    if (v16 / 0xC >= *(int *)&v20[-v18 - 4] + (uint64_t)*(int *)&v20[-v18 - 8])
      v17 = *(int *)&v20[-v18 - 4] + (uint64_t)*(int *)&v20[-v18 - 8];
    v21 = (4 * a2 + 39) / (4 * a2 + 8);
    if (a2 > 5)
      v21 = 1;
    v22 = a2 % 5;
    v23 = a2 > 4;
    if (a2 % 5)
      v23 = 0;
    else
      v22 = 5;
    v24 = ((12 * v22 + 63) & 0x7FFFFFFC0) + 60 * (a2 / 5 - v23);
    v25 = a5 - v21;
    *(float *)&a3 = (float)v22;
    v26 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    if (a2 >= 5)
      v27 = 5;
    else
      v27 = a2;
    *(float *)&a3 = (float)v27;
    v28 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    v29 = (int8x16_t)vcgtq_f32(v28, (float32x4_t)xmmword_185004980);
    v30 = (int8x16_t)vcgtq_f32(v28, (float32x4_t)xmmword_185004970);
    v31 = a9;
    if (v25 <= 1)
      v25 = 1;
    v32 = (int8x16_t)vcgtq_f32(v26, (float32x4_t)xmmword_185004970);
    v33 = (int8x16_t)vcgtq_f32(v26, (float32x4_t)xmmword_185004980);
    do
    {
      v34 = *(_QWORD *)(a6 + 8 * v14);
      if (a5 <= v21)
      {
        v35 = 0;
        v36 = result;
      }
      else
      {
        v35 = 0;
        v36 = result;
        do
        {
          v37 = (float32x4_t *)(v15 + 12 * *v36);
          v38 = (float32x4_t *)((char *)v37 + v24);
          if ((unint64_t)v37 + v24 > 12 * v17 + v15)
            goto LABEL_29;
          if (v37 >= v38)
          {
            v42.i64[0] = 0x8000000080000000;
            v42.i64[1] = 0x8000000080000000;
            v43.i64[0] = 0x8000000080000000;
            v43.i64[1] = 0x8000000080000000;
            v44.i64[0] = 0x8000000080000000;
            v44.i64[1] = 0x8000000080000000;
            v45.i64[0] = 0x8000000080000000;
            v45.i64[1] = 0x8000000080000000;
          }
          else
          {
            v39 = (int8x16_t *)(v36 + 2);
            v40 = v36[1];
            v41 = (unint64_t)&v38[-4];
            v42.i64[0] = 0x8000000080000000;
            v42.i64[1] = 0x8000000080000000;
            v43.i64[0] = 0x8000000080000000;
            v43.i64[1] = 0x8000000080000000;
            v44.i64[0] = 0x8000000080000000;
            v44.i64[1] = 0x8000000080000000;
            v45.i64[0] = 0x8000000080000000;
            v45.i64[1] = 0x8000000080000000;
            while ((unint64_t)v37 < v41)
            {
              v10 = (float32x4_t)vandq_s8(v39[1], v29);
              v46 = (int32x4_t)vandq_s8(*v39, v30);
              v39 = (int8x16_t *)((char *)v39 + 20);
              v12 = *v37;
              v11 = v37[1];
              v13 = v37[2];
              v47 = v37[3];
              v37 = (float32x4_t *)((char *)v37 + 60);
              v48 = (float32x4_t)vzip1q_s32(v46, v46);
              v48.i32[2] = v46.i32[0];
              v49 = (float32x4_t)vextq_s8((int8x16_t)v46, (int8x16_t)vdupq_laneq_s32(v46, 3), 8uLL);
              v50 = (float32x4_t)vzip1q_s32((int32x4_t)v10, (int32x4_t)v10);
              v50.i32[2] = v10.i32[0];
              v51 = (int32x4_t)vextq_s8((int8x16_t)v46, (int8x16_t)v46, 4uLL);
              v45 = vmlaq_f32(v45, v50, v47);
              v44 = vmlaq_f32(v44, v49, v13);
              v42 = vmlaq_f32(v42, v48, v12);
              v43 = vmlaq_f32(v43, (float32x4_t)vzip1q_s32(v51, v51), v11);
              v40 -= 5;
            }
            if (v40 >= 1)
            {
              v10 = (float32x4_t)vandq_s8(v39[1], v33);
              v52 = (int32x4_t)vandq_s8(*v39, v32);
              v12 = *v37;
              v11 = v37[1];
              v13 = v37[2];
              v53 = (float32x4_t)vzip1q_s32(v52, v52);
              v53.i32[2] = v52.i32[0];
              v54 = (float32x4_t)vextq_s8((int8x16_t)v52, (int8x16_t)vdupq_laneq_s32(v52, 3), 8uLL);
              v55 = (float32x4_t)vzip1q_s32((int32x4_t)v10, (int32x4_t)v10);
              v55.i32[2] = v10.i32[0];
              v56 = (int32x4_t)vextq_s8((int8x16_t)v52, (int8x16_t)v52, 4uLL);
              v45 = vmlaq_f32(v45, v55, v37[3]);
              v44 = vmlaq_f32(v44, v54, v13);
              v42 = vmlaq_f32(v42, v53, *v37);
              v43 = vmlaq_f32(v43, (float32x4_t)vzip1q_s32(v56, v56), v11);
            }
          }
          v9 = (float32x4_t)vextq_s8((int8x16_t)v45, (int8x16_t)v45, 4uLL).u64[0];
          v57 = vaddq_f32(v42, (float32x4_t)vextq_s8((int8x16_t)v44, (int8x16_t)v45, 4uLL));
          v58 = (int8x16_t)vaddq_f32(v43, v9);
          v59 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v58, (int8x16_t)vaddq_f32(v44, (float32x4_t)0), 8uLL), vaddq_f32(v57, (float32x4_t)vextq_s8((int8x16_t)v57, v58, 0xCuLL)));
          *(_QWORD *)v34 = v59.i64[0];
          *(_DWORD *)(v34 + 8) = vextq_s8(v59, v59, 8uLL).u32[0];
          v34 += 12;
          ++v35;
          v36 = (int *)((char *)v36 + v19);
        }
        while (v35 != v25);
        v35 = v25;
      }
LABEL_29:
      if (v35 >= a5)
        goto LABEL_122;
      do
      {
        if (*v36 >= (int)v17)
          v60 = v17;
        else
          v60 = *v36;
        LODWORD(v61) = v17 - v60;
        if (v36[1] < (int)v61)
          LODWORD(v61) = v36[1];
        if ((int)v61 < 1)
        {
          v65.i64[0] = 0x8000000080000000;
          v65.i64[1] = 0x8000000080000000;
          v66.i64[0] = 0x8000000080000000;
          v66.i64[1] = 0x8000000080000000;
          v67.i64[0] = 0x8000000080000000;
          v67.i64[1] = 0x8000000080000000;
          v68.i64[0] = 0x8000000080000000;
          v68.i64[1] = 0x8000000080000000;
          goto LABEL_119;
        }
        v62 = (float32x4_t *)(v15 + 12 * *v36);
        v63 = (unint64_t)&v62[-4] + 12 * (int)v61;
        v64 = (int8x16_t *)(v36 + 2);
        if ((unint64_t)v62 >= v63)
        {
          v65.i64[0] = 0x8000000080000000;
          v65.i64[1] = 0x8000000080000000;
          v66.i64[0] = 0x8000000080000000;
          v66.i64[1] = 0x8000000080000000;
          v67.i64[0] = 0x8000000080000000;
          v67.i64[1] = 0x8000000080000000;
          v68.i64[0] = 0x8000000080000000;
          v68.i64[1] = 0x8000000080000000;
          goto LABEL_65;
        }
        v61 = (int)v61;
        v65.i64[0] = 0x8000000080000000;
        v65.i64[1] = 0x8000000080000000;
        v66.i64[0] = 0x8000000080000000;
        v66.i64[1] = 0x8000000080000000;
        v67.i64[0] = 0x8000000080000000;
        v67.i64[1] = 0x8000000080000000;
        v68.i64[0] = 0x8000000080000000;
        v68.i64[1] = 0x8000000080000000;
        do
        {
          v69 = v20 - (char *)v64;
          if ((unint64_t)(v20 - (char *)v64) >= 0x20)
            v69 = 32;
          if (v69 >= 0x20)
          {
            v70 = (int32x4_t)vandq_s8(v64[1], v29);
            v71 = (int32x4_t)vandq_s8(*v64, v30);
            goto LABEL_42;
          }
          if (!(_DWORD)v61)
          {
            v71 = 0uLL;
LABEL_55:
            v70 = 0uLL;
            goto LABEL_42;
          }
          if (v61 < 4)
          {
            if (v61 == 1)
            {
              v71 = (int32x4_t)v64->u32[0];
            }
            else
            {
              v76 = 0;
              if ((_DWORD)v61 != 2)
                LODWORD(v76) = v64->i32[2];
              v71.i64[0] = v64->i64[0];
              v71.i64[1] = v76;
            }
            goto LABEL_55;
          }
          if (v61 == 4)
          {
            v70 = 0uLL;
          }
          else if (v61 == 5)
          {
            v70 = (int32x4_t)v64[1].u32[0];
          }
          else
          {
            v77 = 0;
            if ((_DWORD)v61 != 6)
            {
              v78 = 0;
              if ((v61 & 1) == 0)
                v78.i32[0] = v64[1].i32[3];
              v10.i32[0] = v64[1].i32[2];
              v77 = vzip1_s32(*(int32x2_t *)v10.f32, v78);
            }
            v70.i64[0] = v64[1].i64[0];
            v70.u64[1] = (unint64_t)v77;
          }
          v71 = *(int32x4_t *)v64;
LABEL_42:
          v64 = (int8x16_t *)((char *)v64 + 20);
          v12 = v62[2];
          v11 = v62[3];
          v13 = *v62;
          v72 = v62[1];
          v73 = (float32x4_t)vzip1q_s32(v70, v70);
          v73.i32[2] = v70.i32[0];
          v10 = (float32x4_t)vzip1q_s32(v71, v71);
          v10.i32[2] = v71.i32[0];
          v62 = (float32x4_t *)((char *)v62 + 60);
          v74 = (float32x4_t)vextq_s8((int8x16_t)v71, (int8x16_t)vdupq_laneq_s32(v71, 3), 8uLL);
          v75 = (int32x4_t)vextq_s8((int8x16_t)v71, (int8x16_t)v71, 4uLL);
          v9 = (float32x4_t)vzip1q_s32(v75, v75);
          v66 = vmlaq_f32(v66, v9, v72);
          v67 = vmlaq_f32(v67, v74, v12);
          v65 = vmlaq_f32(v65, v10, v13);
          v68 = vmlaq_f32(v68, v73, v11);
          v61 -= 5;
        }
        while ((unint64_t)v62 < v63);
        if ((int)v61 < 1)
          goto LABEL_119;
LABEL_65:
        v61 = v61;
        while (2)
        {
          v79 = v20 - (char *)v64;
          if ((unint64_t)(v20 - (char *)v64) >= 0x20)
            v79 = 32;
          if (v79 >= 0x20)
          {
            v9.f32[0] = fminf((float)(int)v61, 8.0);
            v80 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 0);
            v11 = (float32x4_t)vcgtq_f32(v80, (float32x4_t)xmmword_185004970);
            v12 = *(float32x4_t *)v64;
            v81 = (int32x4_t)vandq_s8(v64[1], (int8x16_t)vcgtq_f32(v80, (float32x4_t)xmmword_185004980));
            v82 = (int32x4_t)vandq_s8(*v64, (int8x16_t)v11);
LABEL_70:
            if (v61 <= 5)
              goto LABEL_89;
            v64 = (int8x16_t *)((char *)v64 + 20);
            v12 = v62[2];
            v11 = v62[3];
            v13 = *v62;
            v83 = v62[1];
            v62 = (float32x4_t *)((char *)v62 + 60);
            v84 = (float32x4_t)vzip1q_s32(v81, v81);
            v84.i32[2] = v81.i32[0];
            v10 = (float32x4_t)vzip1q_s32(v82, v82);
            v10.i32[2] = v82.i32[0];
            v85 = (float32x4_t)vextq_s8((int8x16_t)v82, (int8x16_t)vdupq_laneq_s32(v82, 3), 8uLL);
            v86 = (int32x4_t)vextq_s8((int8x16_t)v82, (int8x16_t)v82, 4uLL);
            v9 = (float32x4_t)vzip1q_s32(v86, v86);
            v66 = vmlaq_f32(v66, v83, v9);
            v67 = vmlaq_f32(v67, v12, v85);
            v65 = vmlaq_f32(v65, v13, v10);
            v68 = vmlaq_f32(v68, v11, v84);
            v61 -= 5;
            continue;
          }
          break;
        }
        if (v61 >= 4)
        {
          if ((_DWORD)v61 == 4)
          {
            v81 = 0uLL;
          }
          else if ((_DWORD)v61 == 5)
          {
            v81 = (int32x4_t)v64[1].u32[0];
          }
          else
          {
            v87 = 0;
            if (v61 != 6)
            {
              v88 = 0;
              if ((v61 & 1) == 0)
                v88.i32[0] = v64[1].i32[3];
              v10.i32[0] = v64[1].i32[2];
              v87 = vzip1_s32(*(int32x2_t *)v10.f32, v88);
            }
            v81.i64[0] = v64[1].i64[0];
            v81.u64[1] = (unint64_t)v87;
          }
          v82 = *(int32x4_t *)v64;
          goto LABEL_70;
        }
        if (v61 == 1)
        {
          v82 = (int32x4_t)v64->u32[0];
        }
        else
        {
          v89 = 0;
          if (v61 != 2)
            LODWORD(v89) = v64->i32[2];
          v82.i64[0] = v64->i64[0];
          v82.i64[1] = v89;
        }
        v81 = 0uLL;
LABEL_89:
        v90 = 3 * v61;
        if ((3 * v61) < 8)
        {
          if (v90 < 4)
          {
            v91.i64[0] = v62->i64[0];
            v11.i32[0] = v62->i32[2];
            v91.i64[1] = v11.i64[0];
            v13 = 0uLL;
          }
          else
          {
            if (v90 == 4)
            {
              v13 = 0uLL;
            }
            else if (v90 == 5)
            {
              v13 = (float32x4_t)v62[1].u32[0];
            }
            else
            {
              v92 = 0;
              if (v61 != 2)
                LODWORD(v92) = v62[1].i32[2];
              v13.i64[0] = v62[1].i64[0];
              v13.i64[1] = v92;
            }
            v91 = *v62;
          }
          v11 = 0uLL;
          v12 = 0uLL;
          goto LABEL_118;
        }
        if (v90 == 8)
        {
          v11 = 0uLL;
LABEL_111:
          v12 = 0uLL;
          goto LABEL_117;
        }
        if ((unint64_t)(v90 - 8) < 4)
        {
          if (v61 == 3)
          {
            v11.i64[0] = v62[2].u32[0];
            v12.i64[0] = 0;
          }
          else
          {
            v11.i64[0] = v62[2].i64[0];
            v12.i32[0] = v62[2].i32[2];
          }
          v11.i64[1] = v12.i64[0];
          goto LABEL_111;
        }
        if (v90 == 12)
        {
          v12 = 0uLL;
        }
        else if (v90 == 13)
        {
          v12 = (float32x4_t)v62[3].u32[0];
        }
        else
        {
          v93 = 0;
          if ((v90 & 1) == 0)
            v93.i32[0] = v62[3].i32[3];
          v12.i64[0] = v62[3].i64[0];
          v13.i32[0] = v62[3].i32[2];
          *(int32x2_t *)&v12.u32[2] = vzip1_s32(*(int32x2_t *)v13.f32, v93);
        }
        v11 = v62[2];
LABEL_117:
        v91 = *v62;
        v13 = v62[1];
LABEL_118:
        v94 = (float32x4_t)vzip1q_s32(v81, v81);
        v94.i32[2] = v81.i32[0];
        v10 = (float32x4_t)vzip1q_s32(v82, v82);
        v10.i32[2] = v82.i32[0];
        v95 = (float32x4_t)vextq_s8((int8x16_t)v82, (int8x16_t)vdupq_laneq_s32(v82, 3), 8uLL);
        v96 = (int32x4_t)vextq_s8((int8x16_t)v82, (int8x16_t)v82, 4uLL);
        v66 = vmlaq_f32(v66, v13, (float32x4_t)vzip1q_s32(v96, v96));
        v67 = vmlaq_f32(v67, v11, v95);
        v65 = vmlaq_f32(v65, v91, v10);
        v68 = vmlaq_f32(v68, v12, v94);
LABEL_119:
        v9 = (float32x4_t)vextq_s8((int8x16_t)v68, (int8x16_t)v68, 4uLL).u64[0];
        v97 = vaddq_f32(v65, (float32x4_t)vextq_s8((int8x16_t)v67, (int8x16_t)v68, 4uLL));
        v98 = (int8x16_t)vaddq_f32(v66, v9);
        v99 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v98, (int8x16_t)vaddq_f32(v67, (float32x4_t)0), 8uLL), vaddq_f32(v97, (float32x4_t)vextq_s8((int8x16_t)v97, v98, 0xCuLL)));
        *(_QWORD *)v34 = v99.i64[0];
        *(_DWORD *)(v34 + 8) = vextq_s8(v99, v99, 8uLL).u32[0];
        v34 += 12;
        ++v35;
        v36 = (int *)((char *)v36 + v19);
      }
      while (v35 != a5);
LABEL_122:
      v15 += v16;
      ++v14;
    }
    while (v14 != v31);
  }
  return result;
}

float32x2_t *resample_horizontal<float,float,4,false>(float32x2_t *result, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  _BOOL4 v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  float32x4_t *v23;
  unint64_t v24;
  float32x2_t *v25;
  float32x4_t *v26;
  float32x4_t *v27;
  float32x2_t *v28;
  int v29;
  unint64_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t *v35;
  float32x4_t v36;
  int v37;
  uint64_t v38;
  __int32 v39;
  int v40;
  float32x4_t *v41;
  unint64_t v42;
  float32x2_t *v43;
  uint64_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  unint64_t v49;
  float32x4_t v50;
  float32x4_t *v51;
  int32x2_t v52;
  int32x2_t v53;
  int v54;
  unint64_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  BOOL v61;
  unsigned int v62;
  int32x2_t v63;
  int32x2_t v64;

  if ((int)a4 >= 1 && a8 >= 1)
  {
    v8 = 0;
    v9 = *a6;
    v10 = *a7;
    v11 = v10 >> 4;
    v12 = 4 * a2;
    v13 = v12 + 8;
    v14 = (char *)result + (v12 + 8) * a4;
    if (v10 >> 4 >= *(int *)&v14[-v12 - 4] + (uint64_t)*(int *)&v14[-v12 - 8])
      v11 = *(int *)&v14[-v12 - 4] + (uint64_t)*(int *)&v14[-v12 - 8];
    v15 = (4 * a2 + 23) / (4 * a2 + 8);
    if (a2 > 1)
      v15 = 1;
    v16 = a2 > 3;
    v17 = (a2 & 3) == 0;
    LODWORD(v18) = (16 * (a2 & 3)) | 0x40;
    if ((a2 & 3) != 0)
      v18 = v18;
    else
      v18 = 128;
    v19 = a4 - v15;
    v20 = a2 >> 2;
    if (!v17)
      v16 = 0;
    v21 = ((v18 - 1) & 0xFFFFFFFFFFFFFFC0) + 64 * (v20 - v16);
    v22 = a8;
    if (v19 <= 1)
      v19 = 1;
    do
    {
      v23 = *(float32x4_t **)(a5 + 8 * v8);
      if (a4 <= v15)
      {
        v24 = 0;
        v25 = result;
      }
      else
      {
        v24 = 0;
        v25 = result;
        while (1)
        {
          v26 = (float32x4_t *)(v9 + 16 * v25->i32[0]);
          v27 = (float32x4_t *)((char *)v26 + v21);
          if ((unint64_t)v26 + v21 > 16 * v11 + v9)
            break;
          if (v26 >= v27)
          {
            v31.i64[0] = 0x8000000080000000;
            v31.i64[1] = 0x8000000080000000;
            v32.i64[0] = 0x8000000080000000;
            v32.i64[1] = 0x8000000080000000;
            v33.i64[0] = 0x8000000080000000;
            v33.i64[1] = 0x8000000080000000;
            v34.i64[0] = 0x8000000080000000;
            v34.i64[1] = 0x8000000080000000;
          }
          else
          {
            v28 = v25 + 1;
            v29 = v25->i32[1];
            v30 = (unint64_t)&v27[-4];
            v31.i64[0] = 0x8000000080000000;
            v31.i64[1] = 0x8000000080000000;
            v32.i64[0] = 0x8000000080000000;
            v32.i64[1] = 0x8000000080000000;
            v33.i64[0] = 0x8000000080000000;
            v33.i64[1] = 0x8000000080000000;
            if ((unint64_t)v26 < v30)
            {
              v35 = (float32x4_t *)(v9 + 16 * v25->i32[0]);
              v34.i64[0] = 0x8000000080000000;
              v34.i64[1] = 0x8000000080000000;
              do
              {
                v36 = *(float32x4_t *)v28->f32;
                v28 += 2;
                v26 = v35 + 4;
                v31 = vmlaq_n_f32(v31, *v35, v36.f32[0]);
                v32 = vmlaq_lane_f32(v32, v35[1], *(float32x2_t *)v36.f32, 1);
                v33 = vmlaq_laneq_f32(v33, v35[2], v36, 2);
                v34 = vmlaq_laneq_f32(v34, v35[3], v36, 3);
                v29 -= 4;
                v35 = v26;
              }
              while ((unint64_t)v26 < v30);
            }
            else
            {
              v34.i64[0] = 0x8000000080000000;
              v34.i64[1] = 0x8000000080000000;
            }
            if (v29 >= 1)
            {
              v31 = vmlaq_n_f32(v31, *v26, COERCE_FLOAT(*(_OWORD *)v28->f32));
              v32 = vmlaq_lane_f32(v32, v26[1], *v28, 1);
              v33 = vmlaq_laneq_f32(v33, v26[2], *(float32x4_t *)v28->f32, 2);
              v34 = vmlaq_laneq_f32(v34, v26[3], *(float32x4_t *)v28->f32, 3);
            }
          }
          *v23++ = vaddq_f32(vaddq_f32(v31, v33), vaddq_f32(v32, v34));
          ++v24;
          v25 = (float32x2_t *)((char *)v25 + v13);
          if (v24 == v19)
          {
            v24 = v19;
            break;
          }
        }
      }
      if (v24 < a4)
      {
        do
        {
          v37 = v25->i32[1];
          v38 = v25->i32[0];
          if ((int)v38 >= (int)v11)
            v39 = v11;
          else
            v39 = v25->i32[0];
          v40 = v11 - v39;
          if (v37 >= v40)
            v37 = v40;
          if (v37 < 1)
          {
            v45.i64[0] = 0x8000000080000000;
            v45.i64[1] = 0x8000000080000000;
            v46.i64[0] = 0x8000000080000000;
            v46.i64[1] = 0x8000000080000000;
            v47.i64[0] = 0x8000000080000000;
            v47.i64[1] = 0x8000000080000000;
            v48.i64[0] = 0x8000000080000000;
            v48.i64[1] = 0x8000000080000000;
          }
          else
          {
            v41 = (float32x4_t *)(v9 + 16 * v38);
            v42 = (unint64_t)&v41[v37 - 4];
            v43 = v25 + 1;
            if ((unint64_t)v41 >= v42)
            {
              v45.i64[0] = 0x8000000080000000;
              v45.i64[1] = 0x8000000080000000;
              v46.i64[0] = 0x8000000080000000;
              v46.i64[1] = 0x8000000080000000;
              v47.i64[0] = 0x8000000080000000;
              v47.i64[1] = 0x8000000080000000;
              v48.i64[0] = 0x8000000080000000;
              v48.i64[1] = 0x8000000080000000;
              goto LABEL_56;
            }
            v44 = v37;
            v45.i64[0] = 0x8000000080000000;
            v45.i64[1] = 0x8000000080000000;
            v46.i64[0] = 0x8000000080000000;
            v46.i64[1] = 0x8000000080000000;
            v47.i64[0] = 0x8000000080000000;
            v47.i64[1] = 0x8000000080000000;
            v48.i64[0] = 0x8000000080000000;
            v48.i64[1] = 0x8000000080000000;
            do
            {
              v49 = v14 - (char *)v43;
              if ((unint64_t)(v14 - (char *)v43) >= 0x10)
                v49 = 16;
              if (v49 < 0x10)
              {
                if (v44)
                {
                  if (v44 == 1)
                  {
                    v50 = (float32x4_t)v43->u32[0];
                  }
                  else
                  {
                    v52 = 0;
                    if ((_DWORD)v44 != 2)
                    {
                      v53 = 0;
                      if ((v37 & 1) == 0)
                        v53.i32[0] = v43[1].i32[1];
                      v52.i32[0] = v43[1].i32[0];
                      v52 = vzip1_s32(v52, v53);
                    }
                    *(float32x2_t *)v50.f32 = *v43;
                    *(int32x2_t *)&v50.u32[2] = v52;
                  }
                }
                else
                {
                  v50 = 0uLL;
                }
              }
              else
              {
                v50 = *(float32x4_t *)v43->f32;
              }
              v43 += 2;
              v51 = v41 + 4;
              v45 = vmlaq_n_f32(v45, *v41, v50.f32[0]);
              v46 = vmlaq_lane_f32(v46, v41[1], *(float32x2_t *)v50.f32, 1);
              v47 = vmlaq_laneq_f32(v47, v41[2], v50, 2);
              v48 = vmlaq_laneq_f32(v48, v41[3], v50, 3);
              v44 -= 4;
              v41 = v51;
            }
            while ((unint64_t)v51 < v42);
            if ((int)v44 >= 1)
            {
              v37 = v44;
              v41 = v51;
LABEL_56:
              v54 = v37;
              while (2)
              {
                v55 = v14 - (char *)v43;
                if ((unint64_t)(v14 - (char *)v43) >= 0x10)
                  v55 = 16;
                if (v55 >= 0x10)
                {
                  v56 = *(float32x4_t *)v43->f32;
                  goto LABEL_61;
                }
                if (v54 == 1)
                {
                  v62 = v43->i32[0];
                  v43 += 2;
                  v56 = (float32x4_t)v62;
                  v59 = *v41;
                  goto LABEL_70;
                }
                v63 = 0;
                if (v54 != 2)
                {
                  v64 = 0;
                  if ((v37 & 1) == 0)
                    v64.i32[0] = v43[1].i32[1];
                  v63.i32[0] = v43[1].i32[0];
                  v63 = vzip1_s32(v63, v64);
                }
                *(float32x2_t *)v56.f32 = *v43;
                *(int32x2_t *)&v56.u32[2] = v63;
LABEL_61:
                v43 += 2;
                if (v54 >= 4)
                {
                  v57 = v41[3];
                  goto LABEL_63;
                }
                if ((v54 & 0x3FFFFFFE) != 0)
                {
                  v58 = 0uLL;
                  v57 = 0uLL;
                  if (v54 != 2)
LABEL_63:
                    v58 = v41[2];
                  v59 = *v41;
                  v60 = v41[1];
                }
                else
                {
                  v59 = *v41;
                  if (v54 == 1)
LABEL_70:
                    v60 = 0uLL;
                  else
                    v60 = v41[1];
                  v58 = 0uLL;
                  v57 = 0uLL;
                }
                v41 += 4;
                v45 = vmlaq_n_f32(v45, v59, v56.f32[0]);
                v46 = vmlaq_lane_f32(v46, v60, *(float32x2_t *)v56.f32, 1);
                v47 = vmlaq_laneq_f32(v47, v58, v56, 2);
                v48 = vmlaq_laneq_f32(v48, v57, v56, 3);
                v61 = __OFSUB__(v54, 4);
                v54 -= 4;
                if ((v54 < 0) ^ v61 | (v54 == 0))
                  break;
                continue;
              }
            }
          }
          *v23++ = vaddq_f32(vaddq_f32(v45, v47), vaddq_f32(v46, v48));
          ++v24;
          v25 = (float32x2_t *)((char *)v25 + v13);
        }
        while (v24 != a4);
      }
      v9 += v10;
      ++v8;
    }
    while (v8 != v22);
  }
  return result;
}

int *resample_horizontal<float,float,2,false>(int *result, unsigned int a2, double a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t *a7, int *a8, int a9)
{
  float32x4_t v9;
  float32x4_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  _BOOL4 v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  float32x4_t v25;
  unsigned int v26;
  uint64_t v27;
  float32x4_t v28;
  int8x16_t v29;
  int8x16_t v30;
  uint64_t v31;
  int8x16_t v32;
  int8x16_t v33;
  float32x2_t *v34;
  unint64_t v35;
  int *v36;
  float32x4_t *v37;
  float32x4_t *v38;
  int8x16_t *v39;
  int v40;
  unint64_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int32x4_t v48;
  int32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  int8x16_t v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  float32x4_t *v64;
  unint64_t v65;
  int8x16_t *v66;
  uint64_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  unint64_t v72;
  int32x4_t v73;
  int32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  uint64_t v81;
  int32x2_t v82;
  int32x2_t v83;
  char v84;
  unint64_t v85;
  unint64_t v86;
  float32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  BOOL v96;
  int32x2_t v97;
  int32x2_t v98;
  float32x4_t v99;
  uint64_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  uint64_t v104;
  uint64_t v105;
  float32x4_t v106;
  float32x4_t v107;
  int8x16_t v108;
  uint64_t v109;

  if ((int)a5 >= 1 && a9 >= 1)
  {
    v11 = 0;
    v12 = *a7;
    v13 = *a8;
    v14 = v13 >> 3;
    v15 = a5;
    v16 = 4 * a2;
    v17 = v16 + 8;
    v18 = (char *)result + (v16 + 8) * a5;
    if (v13 >> 3 >= *(int *)&v18[-v16 - 4] + (uint64_t)*(int *)&v18[-v16 - 8])
      v14 = *(int *)&v18[-v16 - 4] + (uint64_t)*(int *)&v18[-v16 - 8];
    v19 = (4 * a2 + 39) / (4 * a2 + 8);
    if (a2 > 5)
      v19 = 1;
    v20 = a5 - v19;
    v21 = a2 > 7;
    v22 = a2 & 7;
    if ((a2 & 7) != 0)
      v21 = 0;
    else
      v22 = 8;
    v23 = 16 * ((a2 >> 3) - v21);
    *(float *)&a3 = (float)v22;
    v24 = (8 * v22 + 63) & 0xC0;
    v25 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    if (a2 >= 8)
      v26 = 8;
    else
      v26 = a2;
    *(float *)&a3 = (float)v26;
    v27 = v24 + 4 * v23;
    v28 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    v29 = (int8x16_t)vcgtq_f32(v28, (float32x4_t)xmmword_185004980);
    v30 = (int8x16_t)vcgtq_f32(v28, (float32x4_t)xmmword_185004970);
    v31 = a9;
    if (v20 <= 1)
      v20 = 1;
    v32 = (int8x16_t)vcgtq_f32(v25, (float32x4_t)xmmword_185004970);
    v33 = (int8x16_t)vcgtq_f32(v25, (float32x4_t)xmmword_185004980);
    do
    {
      v34 = *(float32x2_t **)(a6 + 8 * v11);
      if (v15 <= v19)
      {
        v35 = 0;
        v36 = result;
      }
      else
      {
        v35 = 0;
        v36 = result;
        do
        {
          v37 = (float32x4_t *)(v12 + 8 * *v36);
          v38 = (float32x4_t *)((char *)v37 + v27);
          if ((unint64_t)v37 + v27 > 8 * v14 + v12)
            goto LABEL_29;
          if (v37 >= v38)
          {
            v42.i64[0] = 0x8000000080000000;
            v42.i64[1] = 0x8000000080000000;
            v43.i64[0] = 0x8000000080000000;
            v43.i64[1] = 0x8000000080000000;
            v44.i64[0] = 0x8000000080000000;
            v44.i64[1] = 0x8000000080000000;
            v45.i64[0] = 0x8000000080000000;
            v45.i64[1] = 0x8000000080000000;
          }
          else
          {
            v39 = (int8x16_t *)(v36 + 2);
            v40 = v36[1];
            v41 = (unint64_t)&v38[-4];
            v42.i64[0] = 0x8000000080000000;
            v42.i64[1] = 0x8000000080000000;
            v43.i64[0] = 0x8000000080000000;
            v43.i64[1] = 0x8000000080000000;
            v44.i64[0] = 0x8000000080000000;
            v44.i64[1] = 0x8000000080000000;
            v45.i64[0] = 0x8000000080000000;
            v45.i64[1] = 0x8000000080000000;
            while ((unint64_t)v37 < v41)
            {
              v46 = *v39;
              v47 = v39[1];
              v39 += 2;
              v48 = (int32x4_t)vandq_s8(v47, v29);
              v49 = (int32x4_t)vandq_s8(v46, v30);
              v50 = *v37;
              v51 = v37[1];
              v52 = v37[2];
              v53 = v37[3];
              v37 += 4;
              v54 = (float32x4_t)vzip1q_s32(v49, v49);
              v9 = (float32x4_t)vzip2q_s32(v49, v49);
              v55 = (float32x4_t)vzip1q_s32(v48, v48);
              v10 = (float32x4_t)vzip2q_s32(v48, v48);
              v45 = vmlaq_f32(v45, v10, v53);
              v44 = vmlaq_f32(v44, v55, v52);
              v43 = vmlaq_f32(v43, v9, v51);
              v42 = vmlaq_f32(v42, v54, v50);
              v40 -= 8;
            }
            if (v40 >= 1)
            {
              v56 = (int32x4_t)vandq_s8(v39[1], v33);
              v57 = (int32x4_t)vandq_s8(*v39, v32);
              v58 = (float32x4_t)vzip1q_s32(v57, v57);
              v9 = (float32x4_t)vzip2q_s32(v57, v57);
              v59 = (float32x4_t)vzip1q_s32(v56, v56);
              v10 = (float32x4_t)vzip2q_s32(v56, v56);
              v45 = vmlaq_f32(v45, v10, v37[3]);
              v44 = vmlaq_f32(v44, v59, v37[2]);
              v43 = vmlaq_f32(v43, v9, v37[1]);
              v42 = vmlaq_f32(v42, v58, *v37);
            }
          }
          v60 = (int8x16_t)vaddq_f32(vaddq_f32(v42, v44), vaddq_f32(v43, v45));
          *v34++ = vadd_f32(*(float32x2_t *)v60.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v60, v60, 8uLL));
          ++v35;
          v36 = (int *)((char *)v36 + v17);
        }
        while (v35 != v20);
        v35 = v20;
      }
LABEL_29:
      if (v35 >= v15)
        goto LABEL_118;
      do
      {
        v61 = *v36;
        if ((int)v61 >= (int)v14)
          v62 = v14;
        else
          v62 = *v36;
        LODWORD(v63) = v14 - v62;
        if (v36[1] < (int)v63)
          LODWORD(v63) = v36[1];
        if ((int)v63 < 1)
        {
          v68.i64[0] = 0x8000000080000000;
          v68.i64[1] = 0x8000000080000000;
          v69.i64[0] = 0x8000000080000000;
          v69.i64[1] = 0x8000000080000000;
          v70.i64[0] = 0x8000000080000000;
          v70.i64[1] = 0x8000000080000000;
          v71.i64[0] = 0x8000000080000000;
          v71.i64[1] = 0x8000000080000000;
          goto LABEL_110;
        }
        v64 = (float32x4_t *)(v12 + 8 * v61);
        v65 = (unint64_t)&v64[-4] + 8 * (int)v63;
        v66 = (int8x16_t *)(v36 + 2);
        if ((unint64_t)v64 >= v65)
        {
          v68.i64[0] = 0x8000000080000000;
          v68.i64[1] = 0x8000000080000000;
          v69.i64[0] = 0x8000000080000000;
          v69.i64[1] = 0x8000000080000000;
          v70.i64[0] = 0x8000000080000000;
          v70.i64[1] = 0x8000000080000000;
          v71.i64[0] = 0x8000000080000000;
          v71.i64[1] = 0x8000000080000000;
          goto LABEL_66;
        }
        v67 = (int)v63;
        v68.i64[0] = 0x8000000080000000;
        v68.i64[1] = 0x8000000080000000;
        v69.i64[0] = 0x8000000080000000;
        v69.i64[1] = 0x8000000080000000;
        v70.i64[0] = 0x8000000080000000;
        v70.i64[1] = 0x8000000080000000;
        v71.i64[0] = 0x8000000080000000;
        v71.i64[1] = 0x8000000080000000;
        do
        {
          v72 = v18 - (char *)v66;
          if ((unint64_t)(v18 - (char *)v66) >= 0x20)
            v72 = 32;
          if (v72 >= 0x20)
          {
            v73 = (int32x4_t)vandq_s8(v66[1], v29);
            v74 = (int32x4_t)vandq_s8(*v66, v30);
            goto LABEL_42;
          }
          if (!(_DWORD)v67)
          {
            v74 = 0uLL;
LABEL_55:
            v73 = 0uLL;
            goto LABEL_42;
          }
          if (v67 < 4)
          {
            if (v67 == 1)
            {
              v74 = (int32x4_t)v66->u32[0];
            }
            else
            {
              v81 = 0;
              if ((_DWORD)v67 != 2)
                LODWORD(v81) = v66->i32[2];
              v74.i64[0] = v66->i64[0];
              v74.i64[1] = v81;
            }
            goto LABEL_55;
          }
          if (v67 == 4)
          {
            v73 = 0uLL;
          }
          else if (v67 == 5)
          {
            v73 = (int32x4_t)v66[1].u32[0];
          }
          else
          {
            v82 = 0;
            if ((_DWORD)v67 != 6)
            {
              v83 = 0;
              if ((v63 & 1) == 0)
                v83.i32[0] = v66[1].i32[3];
              v10.i32[0] = v66[1].i32[2];
              v82 = vzip1_s32(*(int32x2_t *)v10.f32, v83);
            }
            v73.i64[0] = v66[1].i64[0];
            v73.u64[1] = (unint64_t)v82;
          }
          v74 = *(int32x4_t *)v66;
LABEL_42:
          v66 += 2;
          v76 = v64[2];
          v75 = v64[3];
          v77 = *v64;
          v78 = v64[1];
          v64 += 4;
          v79 = (float32x4_t)vzip2q_s32(v73, v73);
          v10 = (float32x4_t)vzip1q_s32(v73, v73);
          v80 = (float32x4_t)vzip1q_s32(v74, v74);
          v9 = (float32x4_t)vzip2q_s32(v74, v74);
          v69 = vmlaq_f32(v69, v9, v78);
          v68 = vmlaq_f32(v68, v80, v77);
          v70 = vmlaq_f32(v70, v10, v76);
          v71 = vmlaq_f32(v71, v79, v75);
          v67 -= 8;
        }
        while ((unint64_t)v64 < v65);
        if ((int)v67 < 1)
          goto LABEL_110;
        LODWORD(v63) = v67;
LABEL_66:
        v84 = v63;
        v85 = v63 & 7;
        v63 = v63;
        while (2)
        {
          v86 = v18 - (char *)v66;
          if ((unint64_t)(v18 - (char *)v66) >= 0x20)
            v86 = 32;
          if (v86 >= 0x20)
          {
            v9.f32[0] = fminf((float)(int)v63, 8.0);
            v87 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 0);
            v88 = (int32x4_t)vandq_s8(v66[1], (int8x16_t)vcgtq_f32(v87, (float32x4_t)xmmword_185004980));
            v89 = (int32x4_t)vandq_s8(*v66, (int8x16_t)vcgtq_f32(v87, (float32x4_t)xmmword_185004970));
LABEL_71:
            if (v63 <= 7)
            {
              v63 = v85;
              goto LABEL_87;
            }
            v66 += 2;
            v91 = v64[2];
            v90 = v64[3];
            v92 = *v64;
            v93 = v64[1];
            v64 += 4;
            v94 = (float32x4_t)vzip2q_s32(v88, v88);
            v10 = (float32x4_t)vzip1q_s32(v88, v88);
            v95 = (float32x4_t)vzip1q_s32(v89, v89);
            v9 = (float32x4_t)vzip2q_s32(v89, v89);
            v69 = vmlaq_f32(v69, v93, v9);
            v68 = vmlaq_f32(v68, v92, v95);
            v70 = vmlaq_f32(v70, v91, v10);
            v71 = vmlaq_f32(v71, v90, v94);
            v96 = (uint64_t)v63 <= 8;
            v63 -= 8;
            if (v96)
              goto LABEL_110;
            continue;
          }
          break;
        }
        if (v63 >= 4)
        {
          if ((_DWORD)v63 == 4)
          {
            v88 = 0uLL;
          }
          else if ((_DWORD)v63 == 5)
          {
            v88 = (int32x4_t)v66[1].u32[0];
          }
          else
          {
            v97 = 0;
            if (v63 != 6)
            {
              v98 = 0;
              if ((v84 & 1) == 0)
                v98.i32[0] = v66[1].i32[3];
              v10.i32[0] = v66[1].i32[2];
              v97 = vzip1_s32(*(int32x2_t *)v10.f32, v98);
            }
            v88.i64[0] = v66[1].i64[0];
            v88.u64[1] = (unint64_t)v97;
          }
          v89 = *(int32x4_t *)v66;
          goto LABEL_71;
        }
        if (v63 == 1)
        {
          v89 = (int32x4_t)v66->u32[0];
        }
        else
        {
          v109 = 0;
          if (v63 != 2)
            LODWORD(v109) = v66->i32[2];
          v89.i64[0] = v66->i64[0];
          v89.i64[1] = v109;
        }
        v88 = 0uLL;
LABEL_87:
        if (v63 < 4)
        {
          if (v63 < 2)
          {
            v104 = 0;
            if (v63 != 1)
              v104 = v64->i64[1];
            v103.i64[0] = v64->i64[0];
            v103.i64[1] = v104;
            v102 = 0uLL;
          }
          else
          {
            v102 = 0uLL;
            if (v63 != 2)
              v102 = (float32x4_t)v64[1].u64[0];
            v103 = *v64;
          }
          v101 = 0uLL;
          v99 = 0uLL;
          goto LABEL_109;
        }
        if (2 * (_DWORD)v63 == 8)
        {
          v101 = 0uLL;
LABEL_107:
          v99 = 0uLL;
          goto LABEL_108;
        }
        if ((unint64_t)(2 * v63) - 8 < 4)
        {
          v105 = 0;
          if (v63 != 5)
            LODWORD(v105) = v64[2].i32[2];
          v101.i64[0] = v64[2].i64[0];
          v101.i64[1] = v105;
          goto LABEL_107;
        }
        v99 = 0uLL;
        if (v63 != 6)
        {
          v100 = 0;
          if (v63 != 7)
            v100 = v64[3].i64[1];
          v99.i64[0] = v64[3].i64[0];
          v99.i64[1] = v100;
        }
        v101 = v64[2];
LABEL_108:
        v103 = *v64;
        v102 = v64[1];
LABEL_109:
        v106 = (float32x4_t)vzip2q_s32(v88, v88);
        v10 = (float32x4_t)vzip1q_s32(v88, v88);
        v107 = (float32x4_t)vzip1q_s32(v89, v89);
        v9 = (float32x4_t)vzip2q_s32(v89, v89);
        v69 = vmlaq_f32(v69, v102, v9);
        v68 = vmlaq_f32(v68, v103, v107);
        v70 = vmlaq_f32(v70, v101, v10);
        v71 = vmlaq_f32(v71, v99, v106);
LABEL_110:
        v108 = (int8x16_t)vaddq_f32(vaddq_f32(v68, v70), vaddq_f32(v69, v71));
        *v34++ = vadd_f32(*(float32x2_t *)v108.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v108, v108, 8uLL));
        ++v35;
        v36 = (int *)((char *)v36 + v17);
      }
      while (v35 != v15);
LABEL_118:
      v12 += v13;
      ++v11;
    }
    while (v11 != v31);
  }
  return result;
}

int *resample_horizontal<float,float,5,false>(int *result, unsigned int a2, double a3, double a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t *a8, int *a9, int a10)
{
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  unsigned int v23;
  _BOOL4 v24;
  uint64_t v25;
  unint64_t v26;
  float32x4_t v27;
  unsigned int v28;
  float32x4_t v29;
  int8x16_t v30;
  int8x16_t v31;
  uint64_t v32;
  int8x16_t v33;
  float32x4_t *v34;
  unint64_t v35;
  int *v36;
  float32x4_t *v37;
  float32x4_t *v38;
  int8x16_t *v39;
  int v40;
  unint64_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int v66;
  int v67;
  float32x4_t *v68;
  unint64_t v69;
  int8x16_t *v70;
  float32x4_t v71;
  uint64_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  unint64_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  uint64_t v88;
  int32x2_t v89;
  int32x2_t v90;
  unint64_t v91;
  unint64_t v92;
  float32x4_t v93;
  int8x16_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x2_t v102;
  int32x2_t v103;
  uint64_t v104;
  uint64_t v105;
  float32x4_t v106;
  float32x4_t v107;
  unint64_t v108;
  float32x4_t v109;
  float32x4_t v110;
  uint64_t v111;
  int32x4_t v112;
  int32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  int8x16_t v116;
  int8x16_t v117;
  int8x16_t v118;
  int32x2_t v119;
  int32x2_t v120;

  if ((int)a6 >= 1 && a10 >= 1)
  {
    v15 = 0;
    v16 = *a8;
    v17 = *a9;
    v18 = v17 / 0x14;
    v19 = 4 * a2;
    v20 = v19 + 8;
    v21 = (char *)result + (v19 + 8) * a6;
    if (v17 / 0x14 >= *(int *)&v21[-v19 - 4] + (uint64_t)*(int *)&v21[-v19 - 8])
      v18 = *(int *)&v21[-v19 - 4] + (uint64_t)*(int *)&v21[-v19 - 8];
    v22 = (4 * a2 + 39) / (4 * a2 + 8);
    if (a2 > 5)
      v22 = 1;
    v23 = a2 % 6;
    v24 = a2 > 5;
    if (a2 % 6)
      v24 = 0;
    else
      v23 = 6;
    v25 = ((20 * v23 + 127) & 0x7FFFFFF80) + 120 * (a2 / 6 - v24);
    v26 = a6 - v22;
    *(float *)&a3 = (float)v23;
    v27 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    if (a2 >= 6)
      v28 = 6;
    else
      v28 = a2;
    *(float *)&a4 = (float)v28;
    v29 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
    v30 = (int8x16_t)vcgtq_f32(v29, (float32x4_t)xmmword_185004980);
    v31 = (int8x16_t)vcgtq_f32(v29, (float32x4_t)xmmword_185004970);
    v32 = a10;
    if (v26 <= 1)
      v26 = 1;
    v33 = (int8x16_t)vcgtq_f32(v27, (float32x4_t)xmmword_185004970);
    do
    {
      v34 = *(float32x4_t **)(a7 + 8 * v15);
      if (a6 <= v22)
      {
        v35 = 0;
        v36 = result;
      }
      else
      {
        v35 = 0;
        v36 = result;
        do
        {
          v37 = (float32x4_t *)(v16 + 20 * *v36);
          v38 = (float32x4_t *)((char *)v37 + v25);
          if ((unint64_t)v37 + v25 > 20 * v18 + v16)
            goto LABEL_29;
          if (v37 >= v38)
          {
            v42.i64[0] = 0x8000000080000000;
            v42.i64[1] = 0x8000000080000000;
            v43.i64[0] = 0x8000000080000000;
            v43.i64[1] = 0x8000000080000000;
            v44.i64[0] = 0x8000000080000000;
            v44.i64[1] = 0x8000000080000000;
            v45.i64[0] = 0x8000000080000000;
            v45.i64[1] = 0x8000000080000000;
            v46.i64[0] = 0x8000000080000000;
            v46.i64[1] = 0x8000000080000000;
            v47.i64[0] = 0x8000000080000000;
            v47.i64[1] = 0x8000000080000000;
            v48.i64[0] = 0x8000000080000000;
            v48.i64[1] = 0x8000000080000000;
            v49.i64[0] = 0x8000000080000000;
            v49.i64[1] = 0x8000000080000000;
          }
          else
          {
            v39 = (int8x16_t *)(v36 + 2);
            v40 = v36[1];
            v41 = (unint64_t)&v38[-8];
            v42.i64[0] = 0x8000000080000000;
            v42.i64[1] = 0x8000000080000000;
            v43.i64[0] = 0x8000000080000000;
            v43.i64[1] = 0x8000000080000000;
            v44.i64[0] = 0x8000000080000000;
            v44.i64[1] = 0x8000000080000000;
            v45.i64[0] = 0x8000000080000000;
            v45.i64[1] = 0x8000000080000000;
            v46.i64[0] = 0x8000000080000000;
            v46.i64[1] = 0x8000000080000000;
            v47.i64[0] = 0x8000000080000000;
            v47.i64[1] = 0x8000000080000000;
            v48.i64[0] = 0x8000000080000000;
            v48.i64[1] = 0x8000000080000000;
            v49.i64[0] = 0x8000000080000000;
            v49.i64[1] = 0x8000000080000000;
            while ((unint64_t)v37 < v41)
            {
              v50 = (float32x4_t)vandq_s8(*v39, v31);
              v51 = (int32x4_t)vandq_s8(v39[1], v30);
              v39 = (int8x16_t *)((char *)v39 + 24);
              v12 = v37[4];
              v11 = v37[5];
              v53 = v37[6];
              v52 = v37[7];
              v13 = *v37;
              v14 = v37[1];
              v54 = v37[2];
              v55 = v37[3];
              v37 = (float32x4_t *)((char *)v37 + 120);
              v56 = (int32x4_t)vextq_s8((int8x16_t)v51, (int8x16_t)v51, 4uLL);
              v57 = (int32x4_t)vextq_s8((int8x16_t)v50, (int8x16_t)v50, 4uLL);
              v45 = vmlaq_f32(v45, (float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)v50, (int32x4_t)v50), (int32x4_t)v50), v55);
              v43 = vmlaq_f32(v43, (float32x4_t)vzip1q_s32((int32x4_t)v50, vdupq_lane_s32(*(int32x2_t *)v50.f32, 1)), v14);
              v48 = vmlaq_f32(v48, (float32x4_t)vzip1q_s32(v51, vdupq_lane_s32(*(int32x2_t *)v51.i8, 1)), v53);
              v42 = vmlaq_n_f32(v42, v13, v50.f32[0]);
              v46 = vmlaq_laneq_f32(v46, v12, v50, 3);
              v44 = vmlaq_f32(v44, (float32x4_t)vzip1q_s32(v57, v57), v54);
              v47 = vmlaq_n_f32(v47, v11, *(float *)v51.i32);
              v49 = vmlaq_f32(v49, (float32x4_t)vzip1q_s32(v56, v56), v52);
              v40 -= 6;
            }
            if (v40 >= 1)
            {
              v11 = (float32x4_t)vandq_s8(*v39, v33);
              v58 = (int32x4_t)vandq_s8(v39[1], (int8x16_t)vcgtq_f32(v27, (float32x4_t)xmmword_185004980));
              v12 = v37[4];
              v13 = *v37;
              v14 = v37[1];
              v59 = (int32x4_t)vextq_s8((int8x16_t)v58, (int8x16_t)v58, 4uLL);
              v60 = (int32x4_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 4uLL);
              v45 = vmlaq_f32(v45, (float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)v11, (int32x4_t)v11), (int32x4_t)v11), v37[3]);
              v43 = vmlaq_f32(v43, (float32x4_t)vzip1q_s32((int32x4_t)v11, vdupq_lane_s32(*(int32x2_t *)v11.f32, 1)), v14);
              v48 = vmlaq_f32(v48, (float32x4_t)vzip1q_s32(v58, vdupq_lane_s32(*(int32x2_t *)v58.i8, 1)), v37[6]);
              v42 = vmlaq_n_f32(v42, *v37, v11.f32[0]);
              v46 = vmlaq_laneq_f32(v46, v12, v11, 3);
              v47 = vmlaq_n_f32(v47, v37[5], *(float *)v58.i32);
              v44 = vmlaq_f32(v44, (float32x4_t)vzip1q_s32(v60, v60), v37[2]);
              v49 = vmlaq_f32(v49, (float32x4_t)vzip1q_s32(v59, v59), v37[7]);
            }
          }
          v10 = (float32x4_t)vextq_s8((int8x16_t)v47, (int8x16_t)v48, 0xCuLL);
          v61 = (float32x4_t)vextq_s8((int8x16_t)v46, (int8x16_t)v47, 0xCuLL);
          v62 = (float32x4_t)vextq_s8((int8x16_t)v45, (int8x16_t)v46, 0xCuLL);
          v63 = (int8x16_t)vaddq_f32(v45, (float32x4_t)vextq_s8((int8x16_t)v48, (int8x16_t)v49, 0xCuLL));
          v64 = (int8x16_t)vaddq_f32(v43, v61);
          v65 = (int8x16_t)vaddq_f32(v44, v10);
          *v34 = vaddq_f32((float32x4_t)vextq_s8(v65, v63, 8uLL), vaddq_f32(vaddq_f32(v42, v62), (float32x4_t)vextq_s8(v64, v65, 4uLL)));
          v34[1].i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL), vadd_f32(*(float32x2_t *)v64.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v65.i8, 1))).u32[0];
          v34 = (float32x4_t *)((char *)v34 + 20);
          ++v35;
          v36 = (int *)((char *)v36 + v20);
        }
        while (v35 != v26);
        v35 = v26;
      }
LABEL_29:
      if (v35 >= a6)
        goto LABEL_153;
      do
      {
        if (*v36 >= (int)v18)
          v66 = v18;
        else
          v66 = *v36;
        v67 = v18 - v66;
        if (v36[1] < v67)
          v67 = v36[1];
        if (v67 < 1)
        {
          v71.i64[0] = 0x8000000080000000;
          v71.i64[1] = 0x8000000080000000;
          v73.i64[0] = 0x8000000080000000;
          v73.i64[1] = 0x8000000080000000;
          v74.i64[0] = 0x8000000080000000;
          v74.i64[1] = 0x8000000080000000;
          v75.i64[0] = 0x8000000080000000;
          v75.i64[1] = 0x8000000080000000;
          v76.i64[0] = 0x8000000080000000;
          v76.i64[1] = 0x8000000080000000;
          v77.i64[0] = 0x8000000080000000;
          v77.i64[1] = 0x8000000080000000;
          v78.i64[0] = 0x8000000080000000;
          v78.i64[1] = 0x8000000080000000;
          v79.i64[0] = 0x8000000080000000;
          v79.i64[1] = 0x8000000080000000;
          goto LABEL_135;
        }
        v68 = (float32x4_t *)(v16 + 20 * *v36);
        v69 = (unint64_t)&v68[-8] + 20 * v67;
        v70 = (int8x16_t *)(v36 + 2);
        v71.i64[0] = 0x8000000080000000;
        v71.i64[1] = 0x8000000080000000;
        if ((unint64_t)v68 >= v69)
        {
          v73.i64[0] = 0x8000000080000000;
          v73.i64[1] = 0x8000000080000000;
          v74.i64[0] = 0x8000000080000000;
          v74.i64[1] = 0x8000000080000000;
          v75.i64[0] = 0x8000000080000000;
          v75.i64[1] = 0x8000000080000000;
          v76.i64[0] = 0x8000000080000000;
          v76.i64[1] = 0x8000000080000000;
          v77.i64[0] = 0x8000000080000000;
          v77.i64[1] = 0x8000000080000000;
          v78.i64[0] = 0x8000000080000000;
          v78.i64[1] = 0x8000000080000000;
          v79.i64[0] = 0x8000000080000000;
          v79.i64[1] = 0x8000000080000000;
          goto LABEL_66;
        }
        v72 = v67;
        v73.i64[0] = 0x8000000080000000;
        v73.i64[1] = 0x8000000080000000;
        v74.i64[0] = 0x8000000080000000;
        v74.i64[1] = 0x8000000080000000;
        v75.i64[0] = 0x8000000080000000;
        v75.i64[1] = 0x8000000080000000;
        v76.i64[0] = 0x8000000080000000;
        v76.i64[1] = 0x8000000080000000;
        v77.i64[0] = 0x8000000080000000;
        v77.i64[1] = 0x8000000080000000;
        v78.i64[0] = 0x8000000080000000;
        v78.i64[1] = 0x8000000080000000;
        v79.i64[0] = 0x8000000080000000;
        v79.i64[1] = 0x8000000080000000;
        do
        {
          v80 = v21 - (char *)v70;
          if ((unint64_t)(v21 - (char *)v70) >= 0x20)
            v80 = 32;
          if (v80 >= 0x20)
          {
            v10 = (float32x4_t)vandq_s8(v70[1], v30);
            v81 = (float32x4_t)vandq_s8(*v70, v31);
            goto LABEL_42;
          }
          if (!(_DWORD)v72)
          {
            v81 = 0uLL;
LABEL_55:
            v10 = 0uLL;
            goto LABEL_42;
          }
          if (v72 < 4)
          {
            if (v72 == 1)
            {
              v81 = (float32x4_t)v70->u32[0];
            }
            else
            {
              v88 = 0;
              if ((_DWORD)v72 != 2)
                LODWORD(v88) = v70->i32[2];
              v81.i64[0] = v70->i64[0];
              v81.i64[1] = v88;
            }
            goto LABEL_55;
          }
          if (v72 == 4)
          {
            v10 = 0uLL;
          }
          else if (v72 == 5)
          {
            v10 = (float32x4_t)v70[1].u32[0];
          }
          else
          {
            v89 = 0;
            if ((_DWORD)v72 != 6)
            {
              v90 = 0;
              if ((v67 & 1) == 0)
                v90.i32[0] = v70[1].i32[3];
              v89.i32[0] = v70[1].i32[2];
              v89 = vzip1_s32(v89, v90);
            }
            v10.i64[0] = v70[1].i64[0];
            *(int32x2_t *)&v10.u32[2] = v89;
          }
          v81 = *(float32x4_t *)v70;
LABEL_42:
          v70 = (int8x16_t *)((char *)v70 + 24);
          v11 = v68[6];
          v12 = v68[7];
          v83 = v68[4];
          v82 = v68[5];
          v14 = v68[2];
          v13 = v68[3];
          v85 = *v68;
          v84 = v68[1];
          v68 = (float32x4_t *)((char *)v68 + 120);
          v86 = (int32x4_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 4uLL);
          v87 = (int32x4_t)vextq_s8((int8x16_t)v81, (int8x16_t)v81, 4uLL);
          v71 = vmlaq_n_f32(v71, v85, v81.f32[0]);
          v74 = vmlaq_f32(v74, (float32x4_t)vzip1q_s32(v87, v87), v14);
          v76 = vmlaq_laneq_f32(v76, v83, v81, 3);
          v77 = vmlaq_n_f32(v77, v82, v10.f32[0]);
          v79 = vmlaq_f32(v79, (float32x4_t)vzip1q_s32(v86, v86), v12);
          v73 = vmlaq_f32(v73, (float32x4_t)vzip1q_s32((int32x4_t)v81, vdupq_lane_s32(*(int32x2_t *)v81.f32, 1)), v84);
          v75 = vmlaq_f32(v75, (float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)v81, (int32x4_t)v81), (int32x4_t)v81), v13);
          v78 = vmlaq_f32(v78, (float32x4_t)vzip1q_s32((int32x4_t)v10, vdupq_lane_s32(*(int32x2_t *)v10.f32, 1)), v11);
          v72 -= 6;
        }
        while ((unint64_t)v68 < v69);
        if ((int)v72 < 1)
          goto LABEL_135;
        v67 = v72;
LABEL_66:
        v91 = v67;
        while (2)
        {
          v92 = v21 - (char *)v70;
          if ((unint64_t)(v21 - (char *)v70) >= 0x20)
            v92 = 32;
          if (v92 >= 0x20)
          {
            v10.f32[0] = fminf((float)(int)v91, 8.0);
            v93 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0);
            v94 = (int8x16_t)vcgtq_f32(v93, (float32x4_t)xmmword_185004970);
            v11 = *(float32x4_t *)v70;
            v12 = (float32x4_t)v70[1];
            v10 = (float32x4_t)vandq_s8((int8x16_t)v12, (int8x16_t)vcgtq_f32(v93, (float32x4_t)xmmword_185004980));
            v95 = (float32x4_t)vandq_s8(*v70, v94);
LABEL_71:
            if (v91 <= 6)
              goto LABEL_90;
            v70 = (int8x16_t *)((char *)v70 + 24);
            v11 = v68[6];
            v12 = v68[7];
            v97 = v68[4];
            v96 = v68[5];
            v14 = v68[2];
            v13 = v68[3];
            v99 = *v68;
            v98 = v68[1];
            v68 = (float32x4_t *)((char *)v68 + 120);
            v100 = (int32x4_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 4uLL);
            v101 = (int32x4_t)vextq_s8((int8x16_t)v95, (int8x16_t)v95, 4uLL);
            v71 = vmlaq_n_f32(v71, v99, v95.f32[0]);
            v74 = vmlaq_f32(v74, v14, (float32x4_t)vzip1q_s32(v101, v101));
            v76 = vmlaq_laneq_f32(v76, v97, v95, 3);
            v77 = vmlaq_n_f32(v77, v96, v10.f32[0]);
            v79 = vmlaq_f32(v79, v12, (float32x4_t)vzip1q_s32(v100, v100));
            v73 = vmlaq_f32(v73, v98, (float32x4_t)vzip1q_s32((int32x4_t)v95, vdupq_lane_s32(*(int32x2_t *)v95.f32, 1)));
            v75 = vmlaq_f32(v75, v13, (float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)v95, (int32x4_t)v95), (int32x4_t)v95));
            v78 = vmlaq_f32(v78, v11, (float32x4_t)vzip1q_s32((int32x4_t)v10, vdupq_lane_s32(*(int32x2_t *)v10.f32, 1)));
            v91 -= 6;
            continue;
          }
          break;
        }
        if (v91 >= 4)
        {
          if ((_DWORD)v91 == 4)
          {
            v10 = 0uLL;
          }
          else if ((_DWORD)v91 == 5)
          {
            v10 = (float32x4_t)v70[1].u32[0];
          }
          else
          {
            v102 = 0;
            if (v91 != 6)
            {
              v103 = 0;
              if ((v67 & 1) == 0)
                v103.i32[0] = v70[1].i32[3];
              v102.i32[0] = v70[1].i32[2];
              v102 = vzip1_s32(v102, v103);
            }
            v10.i64[0] = v70[1].i64[0];
            *(int32x2_t *)&v10.u32[2] = v102;
          }
          v95 = *(float32x4_t *)v70;
          goto LABEL_71;
        }
        if (v91 == 1)
        {
          v95 = (float32x4_t)v70->u32[0];
        }
        else
        {
          v104 = 0;
          if (v91 != 2)
            LODWORD(v104) = v70->i32[2];
          v95.i64[0] = v70->i64[0];
          v95.i64[1] = v104;
        }
        v10 = 0uLL;
LABEL_90:
        v105 = 5 * v91;
        if ((5 * v91) < 0x10)
        {
          if (v105 >= 8)
          {
            if (v105 == 8)
            {
              v106 = 0uLL;
            }
            else
            {
              if ((unint64_t)(v105 - 8) >= 4)
              {
                if (v105 == 12)
                {
                  v11 = 0uLL;
                }
                else
                {
                  if (v105 == 13)
                  {
                    v11.i64[0] = v68[3].u32[0];
                    v12.i64[0] = 0;
                  }
                  else
                  {
                    v11.i64[0] = v68[3].i64[0];
                    v12.i32[0] = v68[3].i32[2];
                  }
                  v11.i64[1] = v12.i64[0];
                }
                v106 = v68[2];
LABEL_130:
                v107 = *v68;
                v12 = v68[1];
LABEL_131:
                v110 = 0uLL;
                goto LABEL_132;
              }
              if (v105 == 9)
              {
                v106 = (float32x4_t)v68[2].u32[0];
              }
              else
              {
                v111 = 0;
                if (v91 != 2)
                  LODWORD(v111) = v68[2].i32[2];
                v106.i64[0] = v68[2].i64[0];
                v106.i64[1] = v111;
              }
            }
            v11 = 0uLL;
            goto LABEL_130;
          }
          if (v105 < 4)
          {
            v107.i64[0] = v68->i64[0];
            v11.i32[0] = v68->i32[2];
            v107.i64[1] = v11.i64[0];
            v12 = 0uLL;
          }
          else
          {
            if (v91 == 1)
            {
              v12.i64[0] = v68[1].u32[0];
              v11.i64[0] = 0;
            }
            else
            {
              v12.i64[0] = v68[1].i64[0];
              v11.i32[0] = v68[1].i32[2];
            }
            v107 = *v68;
            v12.i64[1] = v11.i64[0];
          }
          v106 = 0uLL;
          v11 = 0uLL;
          goto LABEL_131;
        }
        v106 = v68[2];
        v11 = v68[3];
        v107 = *v68;
        v12 = v68[1];
        v108 = v105 - 16;
        if (v105 == 16)
          goto LABEL_131;
        if (v108 < 8)
        {
          if (v108 >= 4)
          {
            if (v105 == 20)
            {
              v14 = 0uLL;
            }
            else
            {
              if (v105 == 21)
              {
                v14.i64[0] = v68[5].u32[0];
                v13.i64[0] = 0;
              }
              else
              {
                v14.i64[0] = v68[5].i64[0];
                v13.i32[0] = v68[5].i32[2];
              }
              v14.i64[1] = v13.i64[0];
            }
            v110 = v68[4];
            goto LABEL_133;
          }
          v13.i32[0] = v68[4].i32[2];
          v110.i64[0] = v68[4].i64[0];
          v110.i64[1] = v13.i64[0];
LABEL_132:
          v14 = 0uLL;
LABEL_133:
          v13 = 0uLL;
          v109 = 0uLL;
          goto LABEL_134;
        }
        if (v105 == 24)
        {
          v13 = 0uLL;
LABEL_143:
          v109 = 0uLL;
          goto LABEL_151;
        }
        if ((unint64_t)(v105 - 24) < 4)
        {
          if (v91 == 5)
          {
            v13.i64[0] = v68[6].u32[0];
            v14.i64[0] = 0;
          }
          else
          {
            v13.i64[0] = v68[6].i64[0];
            v14.i32[0] = v68[6].i32[2];
          }
          v13.i64[1] = v14.i64[0];
          goto LABEL_143;
        }
        if (v105 == 28)
        {
          v109 = 0uLL;
        }
        else if (v105 == 29)
        {
          v109 = (float32x4_t)v68[7].u32[0];
        }
        else
        {
          v119 = 0;
          if (v91 != 6)
          {
            v120 = 0;
            if ((v67 & 1) == 0)
              v120.i32[0] = v68[7].i32[3];
            v14.i32[0] = v68[7].i32[2];
            v119 = vzip1_s32(*(int32x2_t *)v14.f32, v120);
          }
          v109.i64[0] = v68[7].i64[0];
          *(int32x2_t *)&v109.u32[2] = v119;
        }
        v13 = v68[6];
LABEL_151:
        v110 = v68[4];
        v14 = v68[5];
LABEL_134:
        v112 = (int32x4_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 4uLL);
        v113 = (int32x4_t)vextq_s8((int8x16_t)v95, (int8x16_t)v95, 4uLL);
        v71 = vmlaq_n_f32(v71, v107, v95.f32[0]);
        v74 = vmlaq_f32(v74, v106, (float32x4_t)vzip1q_s32(v113, v113));
        v76 = vmlaq_laneq_f32(v76, v110, v95, 3);
        v77 = vmlaq_n_f32(v77, v14, v10.f32[0]);
        v79 = vmlaq_f32(v79, v109, (float32x4_t)vzip1q_s32(v112, v112));
        v73 = vmlaq_f32(v73, v12, (float32x4_t)vzip1q_s32((int32x4_t)v95, vdupq_lane_s32(*(int32x2_t *)v95.f32, 1)));
        v75 = vmlaq_f32(v75, v11, (float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)v95, (int32x4_t)v95), (int32x4_t)v95));
        v78 = vmlaq_f32(v78, v13, (float32x4_t)vzip1q_s32((int32x4_t)v10, vdupq_lane_s32(*(int32x2_t *)v10.f32, 1)));
LABEL_135:
        v10 = (float32x4_t)vextq_s8((int8x16_t)v77, (int8x16_t)v78, 0xCuLL);
        v114 = (float32x4_t)vextq_s8((int8x16_t)v76, (int8x16_t)v77, 0xCuLL);
        v115 = (float32x4_t)vextq_s8((int8x16_t)v75, (int8x16_t)v76, 0xCuLL);
        v116 = (int8x16_t)vaddq_f32(v75, (float32x4_t)vextq_s8((int8x16_t)v78, (int8x16_t)v79, 0xCuLL));
        v117 = (int8x16_t)vaddq_f32(v73, v114);
        v118 = (int8x16_t)vaddq_f32(v74, v10);
        *v34 = vaddq_f32((float32x4_t)vextq_s8(v118, v116, 8uLL), vaddq_f32(vaddq_f32(v71, v115), (float32x4_t)vextq_s8(v117, v118, 4uLL)));
        v34[1].i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v116, v116, 8uLL), vadd_f32(*(float32x2_t *)v117.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v118.i8, 1))).u32[0];
        v34 = (float32x4_t *)((char *)v34 + 20);
        ++v35;
        v36 = (int *)((char *)v36 + v20);
      }
      while (v35 != a6);
LABEL_153:
      v16 += v17;
      ++v15;
    }
    while (v15 != v32);
  }
  return result;
}

int *resample_horizontal<float,float,1,true>(int *result, unsigned int a2, double a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t *a7, int *a8, int a9)
{
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  float32x4_t v30;
  uint64_t v31;
  float32x4_t v32;
  int8x16_t v33;
  int8x16_t v34;
  uint64_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int32x2_t *v38;
  unint64_t v39;
  int *v40;
  uint64_t v41;
  float32x4_t *v42;
  float32x4_t *v43;
  int8x16_t *v44;
  int v45;
  float32x4_t *v46;
  unint64_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  float32x4_t v56;
  float32x4_t v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  float32x4_t *v62;
  unint64_t v63;
  float32x4_t *v64;
  int8x16_t *v65;
  float32x4_t v66;
  uint64_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  unint64_t v71;
  float32x4_t v72;
  float32x4_t v73;
  uint64_t v74;
  int32x2_t v75;
  int32x2_t v76;
  int i;
  unint64_t v78;
  float32x4_t v79;
  int8x16_t v80;
  float32x4_t v81;
  BOOL v82;
  uint64_t v83;
  float32x4_t v84;
  int32x2_t v85;
  int32x2_t v86;
  int8x16_t v87;
  int8x16_t v88;

  if ((int)a5 >= 1 && a9 >= 1)
  {
    v14 = 0;
    v15 = *a7;
    v16 = a7[1];
    v17 = *a8;
    v18 = a8[1];
    if (v17 >> 2 >= v18 >> 2)
      v19 = v18 >> 2;
    else
      v19 = v17 >> 2;
    v20 = a5;
    v21 = 4 * a2;
    v22 = v21 + 8;
    v23 = (char *)result + (v21 + 8) * a5;
    if (v19 >= *(int *)&v23[-v21 - 4] + (uint64_t)*(int *)&v23[-v21 - 8])
      v19 = *(int *)&v23[-v21 - 4] + (uint64_t)*(int *)&v23[-v21 - 8];
    v24 = (4 * a2 + 39) / (4 * a2 + 8);
    if (a2 > 5)
      v24 = 1;
    v25 = a5 - v24;
    v26 = a2 > 7;
    v27 = a2 & 7;
    if ((a2 & 7) != 0)
      v26 = 0;
    else
      v27 = 8;
    v28 = (a2 + 8 * (v26 << 31 >> 31)) & 0xFFFFFFF8;
    *(float *)&a3 = (float)v27;
    v29 = (4 * (_BYTE)v27 + 31) & 0x60;
    v30 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    if (a2 >= 8)
      a2 = 8;
    *(float *)&a3 = (float)a2;
    v31 = v29 + 4 * v28;
    v32 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    v33 = (int8x16_t)vcgtq_f32(v32, (float32x4_t)xmmword_185004980);
    v34 = (int8x16_t)vcgtq_f32(v32, (float32x4_t)xmmword_185004970);
    v35 = a9;
    if (v25 <= 1)
      v25 = 1;
    v36 = (int8x16_t)vcgtq_f32(v30, (float32x4_t)xmmword_185004980);
    v37 = (int8x16_t)vcgtq_f32(v30, (float32x4_t)xmmword_185004970);
    while (1)
    {
      v38 = *(int32x2_t **)(a6 + 8 * v14);
      if (v20 <= v24)
      {
        v39 = 0;
        v40 = result;
      }
      else
      {
        v39 = 0;
        v40 = result;
        while (1)
        {
          v41 = *v40;
          v42 = (float32x4_t *)(v15 + 4 * v41);
          v43 = (float32x4_t *)((char *)v42 + v31);
          if ((unint64_t)v42 + v31 > 4 * v19 + v15)
            break;
          if (v42 >= v43)
          {
            v48.i64[0] = 0x8000000080000000;
            v48.i64[1] = 0x8000000080000000;
            v49.i64[0] = 0x8000000080000000;
            v49.i64[1] = 0x8000000080000000;
            v50.i64[0] = 0x8000000080000000;
            v50.i64[1] = 0x8000000080000000;
            v51.i64[0] = 0x8000000080000000;
            v51.i64[1] = 0x8000000080000000;
          }
          else
          {
            v44 = (int8x16_t *)(v40 + 2);
            v45 = v40[1];
            v46 = (float32x4_t *)(v16 + 4 * v41);
            v47 = (unint64_t)&v43[-2];
            v48.i64[0] = 0x8000000080000000;
            v48.i64[1] = 0x8000000080000000;
            if ((unint64_t)v42 < v47)
            {
              v50.i64[0] = 0x8000000080000000;
              v50.i64[1] = 0x8000000080000000;
              v51.i64[0] = 0x8000000080000000;
              v51.i64[1] = 0x8000000080000000;
              v49.i64[0] = 0x8000000080000000;
              v49.i64[1] = 0x8000000080000000;
              do
              {
                v55 = *v44;
                v54 = v44[1];
                v44 += 2;
                v10 = (float32x4_t)vandq_s8(v55, v34);
                v9 = (float32x4_t)vandq_s8(v54, v33);
                v56 = *v42;
                v57 = v42[1];
                v42 += 2;
                v51 = vmlaq_f32(v51, v9, v57);
                v50 = vmlaq_f32(v50, v10, v56);
                v11 = *v46;
                v12 = v46[1];
                v46 += 2;
                v49 = vmlaq_f32(v49, v9, v12);
                v48 = vmlaq_f32(v48, v10, v11);
                v45 -= 8;
              }
              while ((unint64_t)v42 < v47);
            }
            else
            {
              v49.i64[0] = 0x8000000080000000;
              v49.i64[1] = 0x8000000080000000;
              v50.i64[0] = 0x8000000080000000;
              v50.i64[1] = 0x8000000080000000;
              v51.i64[0] = 0x8000000080000000;
              v51.i64[1] = 0x8000000080000000;
            }
            if (v45 >= 1)
            {
              v10 = (float32x4_t)vandq_s8(*v44, v37);
              v9 = (float32x4_t)vandq_s8(v44[1], v36);
              v51 = vmlaq_f32(v51, v9, v42[1]);
              v50 = vmlaq_f32(v50, v10, *v42);
              v11 = *v46;
              v12 = v46[1];
              v49 = vmlaq_f32(v49, v9, v12);
              v48 = vmlaq_f32(v48, v10, *v46);
            }
          }
          v52 = (int8x16_t)vaddq_f32(v50, v51);
          *(float32x2_t *)v52.i8 = vadd_f32(*(float32x2_t *)v52.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL));
          v53 = (int8x16_t)vaddq_f32(v48, v49);
          *(float32x2_t *)v53.i8 = vadd_f32(*(float32x2_t *)v53.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL));
          *v38++ = vzip1_s32((int32x2_t)vadd_f32(*(float32x2_t *)v52.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v52.i8, 1)), (int32x2_t)vadd_f32(*(float32x2_t *)v53.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v53.i8, 1)));
          ++v39;
          v40 = (int *)((char *)v40 + v22);
          if (v39 == v25)
          {
            v39 = v25;
            break;
          }
        }
      }
      if (v39 < v20)
        break;
LABEL_115:
      v15 += v17;
      v16 += v18;
      if (++v14 == v35)
        return result;
    }
    while (1)
    {
      v58 = *v40;
      if ((int)v58 >= (int)v19)
        v59 = v19;
      else
        v59 = *v40;
      v60 = v19 - v59;
      if (v40[1] >= v60)
        v61 = v60;
      else
        v61 = v40[1];
      if (v61 < 1)
      {
        v69.i64[0] = 0x8000000080000000;
        v69.i64[1] = 0x8000000080000000;
        v70.i64[0] = 0x8000000080000000;
        v70.i64[1] = 0x8000000080000000;
        v66.i64[0] = 0x8000000080000000;
        v66.i64[1] = 0x8000000080000000;
        v68.i64[0] = 0x8000000080000000;
        v68.i64[1] = 0x8000000080000000;
        goto LABEL_114;
      }
      v62 = (float32x4_t *)(v15 + 4 * v58);
      v63 = (unint64_t)v62[-2].u64 + 4 * v61;
      v64 = (float32x4_t *)(v16 + 4 * v58);
      v65 = (int8x16_t *)(v40 + 2);
      v66.i64[0] = 0x8000000080000000;
      v66.i64[1] = 0x8000000080000000;
      if ((unint64_t)v62 >= v63)
      {
        LODWORD(v67) = v61;
        v68.i64[0] = 0x8000000080000000;
        v68.i64[1] = 0x8000000080000000;
        v69.i64[0] = 0x8000000080000000;
        v69.i64[1] = 0x8000000080000000;
        v70.i64[0] = 0x8000000080000000;
        v70.i64[1] = 0x8000000080000000;
        goto LABEL_70;
      }
      v67 = v61;
      v68.i64[0] = 0x8000000080000000;
      v68.i64[1] = 0x8000000080000000;
      v69.i64[0] = 0x8000000080000000;
      v69.i64[1] = 0x8000000080000000;
      v70.i64[0] = 0x8000000080000000;
      v70.i64[1] = 0x8000000080000000;
      do
      {
        v71 = v23 - (char *)v65;
        if ((unint64_t)(v23 - (char *)v65) >= 0x20)
          v71 = 32;
        if (v71 >= 0x20)
        {
          v10 = (float32x4_t)vandq_s8(v65[1], v33);
          v9 = (float32x4_t)vandq_s8(*v65, v34);
          goto LABEL_47;
        }
        if (!(_DWORD)v67)
        {
          v9 = 0uLL;
LABEL_60:
          v10 = 0uLL;
          goto LABEL_47;
        }
        if (v67 < 4)
        {
          if (v67 == 1)
          {
            v9 = (float32x4_t)v65->u32[0];
          }
          else
          {
            v74 = 0;
            if ((_DWORD)v67 != 2)
              LODWORD(v74) = v65->i32[2];
            v9.i64[0] = v65->i64[0];
            v9.i64[1] = v74;
          }
          goto LABEL_60;
        }
        if (v67 == 4)
        {
          v10 = 0uLL;
        }
        else if (v67 == 5)
        {
          v10 = (float32x4_t)v65[1].u32[0];
        }
        else
        {
          v75 = 0;
          if ((_DWORD)v67 != 6)
          {
            v76 = 0;
            if ((v61 & 1) == 0)
              v76.i32[0] = v65[1].i32[3];
            v10.i32[0] = v65[1].i32[2];
            v75 = vzip1_s32(*(int32x2_t *)v10.f32, v76);
          }
          v10.i64[0] = v65[1].i64[0];
          *(int32x2_t *)&v10.u32[2] = v75;
        }
        v9 = *(float32x4_t *)v65;
LABEL_47:
        v65 += 2;
        v72 = *v62;
        v73 = v62[1];
        v62 += 2;
        v68 = vmlaq_f32(v68, v73, v10);
        v66 = vmlaq_f32(v66, v72, v9);
        v11 = *v64;
        v12 = v64[1];
        v64 += 2;
        v70 = vmlaq_f32(v70, v12, v10);
        v69 = vmlaq_f32(v69, v11, v9);
        v67 -= 8;
      }
      while ((unint64_t)v62 < v63);
      if ((int)v67 >= 1)
      {
LABEL_70:
        for (i = v67; !((i < 0) ^ v82 | (i == 0)); i -= 8)
        {
          v78 = v23 - (char *)v65;
          if ((unint64_t)(v23 - (char *)v65) >= 0x20)
            v78 = 32;
          if (v78 < 0x20)
          {
            if (i < 4)
            {
              if (i == 1)
              {
                v10 = (float32x4_t)v65->u32[0];
              }
              else
              {
                v83 = 0;
                if (i != 2)
                  LODWORD(v83) = v65->i32[2];
                v10.i64[0] = v65->i64[0];
                v10.i64[1] = v83;
              }
              v9 = 0uLL;
              v65 += 2;
LABEL_93:
              if (i == 1)
              {
                v11 = (float32x4_t)v62->u32[0];
                v84 = 0uLL;
                v12 = (float32x4_t)v64->u32[0];
              }
              else
              {
                v11.i64[0] = v62->i64[0];
                if (i == 2)
                {
                  v13.i64[0] = 0;
                  v84 = 0uLL;
                }
                else
                {
                  v12.i32[0] = v62->i32[2];
                  v11.i64[1] = v12.i64[0];
                  v84 = 0uLL;
                  v13.i32[0] = v64->i32[2];
                }
                v12.i64[0] = v64->i64[0];
                v12.i64[1] = v13.i64[0];
              }
              v13 = vmulq_f32(v10, v11);
              v81 = vmulq_f32(v9, v84);
              v11 = 0uLL;
              goto LABEL_77;
            }
            if (i == 4)
            {
              v9 = 0uLL;
            }
            else if (i == 5)
            {
              v9 = (float32x4_t)v65[1].u32[0];
            }
            else
            {
              v85 = 0;
              if (i != 6)
              {
                v86 = 0;
                if ((v67 & 1) == 0)
                  v86.i32[0] = v65[1].i32[3];
                v85.i32[0] = v65[1].i32[2];
                v85 = vzip1_s32(v85, v86);
              }
              v9.i64[0] = v65[1].i64[0];
              *(int32x2_t *)&v9.u32[2] = v85;
            }
            v10 = *(float32x4_t *)v65;
          }
          else
          {
            v9.f32[0] = fminf((float)i, 8.0);
            v79 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 0);
            v80 = (int8x16_t)vcgtq_f32(v79, (float32x4_t)xmmword_185004970);
            v11 = *(float32x4_t *)v65;
            v12 = (float32x4_t)v65[1];
            v9 = (float32x4_t)vandq_s8((int8x16_t)v12, (int8x16_t)vcgtq_f32(v79, (float32x4_t)xmmword_185004980));
            v10 = (float32x4_t)vandq_s8(*v65, v80);
          }
          v65 += 2;
          if (i < 8)
          {
            if (i < 4)
              goto LABEL_93;
            if (i == 5)
            {
              v12 = (float32x4_t)v62[1].u32[0];
              v11 = (float32x4_t)v64[1].u32[0];
            }
            else if (i == 4)
            {
              v12 = 0uLL;
              v11 = 0uLL;
            }
            else
            {
              v12.i64[0] = v62[1].i64[0];
              if (i == 6)
              {
                v13.i64[0] = 0;
              }
              else
              {
                v11.i32[0] = v62[1].i32[2];
                v12.i64[1] = v11.i64[0];
                v13.i32[0] = v64[1].i32[2];
              }
              v11.i64[0] = v64[1].i64[0];
              v11.i64[1] = v13.i64[0];
            }
            v13 = vmulq_f32(v10, *v62);
            v81 = vmulq_f32(v9, v12);
            v12 = *v64;
          }
          else
          {
            v81 = vmulq_f32(v9, v62[1]);
            v13 = vmulq_f32(v10, *v62);
            v12 = *v64;
            v11 = v64[1];
          }
LABEL_77:
          v62 += 2;
          v66 = vaddq_f32(v66, v13);
          v68 = vaddq_f32(v68, v81);
          v64 += 2;
          v69 = vmlaq_f32(v69, v12, v10);
          v70 = vmlaq_f32(v70, v11, v9);
          v82 = __OFSUB__(i, 8);
        }
      }
LABEL_114:
      v87 = (int8x16_t)vaddq_f32(v66, v68);
      *(float32x2_t *)v87.i8 = vadd_f32(*(float32x2_t *)v87.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v87, v87, 8uLL));
      v88 = (int8x16_t)vaddq_f32(v69, v70);
      *(float32x2_t *)v88.i8 = vadd_f32(*(float32x2_t *)v88.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v88, v88, 8uLL));
      *v38++ = vzip1_s32((int32x2_t)vadd_f32(*(float32x2_t *)v87.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v87.i8, 1)), (int32x2_t)vadd_f32(*(float32x2_t *)v88.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v88.i8, 1)));
      ++v39;
      v40 = (int *)((char *)v40 + v22);
      if (v39 == v20)
        goto LABEL_115;
    }
  }
  return result;
}

int *resample_horizontal<float,float,3,true>(int *result, unsigned int a2, double a3, double a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t *a8, int *a9, int a10)
{
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  _BOOL4 v27;
  unsigned int v28;
  uint64_t v29;
  float32x4_t v30;
  float32x4_t v31;
  uint64_t v32;
  int8x16_t v33;
  int8x16_t v34;
  uint64_t v35;
  int8x16_t v36;
  float32x4_t *v37;
  unint64_t v38;
  int *v39;
  uint64_t v40;
  float32x4_t *v41;
  float32x4_t *v42;
  int8x16_t *v43;
  int v44;
  float32x4_t *v45;
  unint64_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  int32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  int32x4_t v67;
  float32x4_t v68;
  int8x16_t v69;
  float32x4_t v70;
  int8x16_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  int32x4_t v79;
  uint64_t v80;
  int v81;
  int v82;
  uint64_t v83;
  float32x4_t *v84;
  unint64_t v85;
  float32x4_t *v86;
  int8x16_t *v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  unint64_t v94;
  unsigned int v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  int32x2_t v99;
  int32x2_t v100;
  uint64_t v101;
  float32x4_t v102;
  float32x4_t v103;
  int32x4_t v104;
  uint64_t v105;
  int32x2_t v106;
  int32x2_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  unint64_t v113;
  float32x4_t v114;
  int8x16_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  int32x4_t v120;
  float32x4_t v121;
  BOOL v122;
  int32x2_t v123;
  uint64_t v124;
  float32x4_t v125;
  float32x4_t v126;
  int32x2_t v127;
  float32x4_t v128;
  float32x4_t v129;
  int32x4_t v130;
  float32x4_t v131;
  int8x16_t v132;
  float32x4_t v133;
  int8x16_t v134;
  float32x4_t v135;
  unint64_t v136;

  if ((int)a6 >= 1 && a10 >= 1)
  {
    v15 = 0;
    v16 = *a8;
    v17 = a8[1];
    v18 = a9[1];
    v136 = *a9;
    v19 = v136 / 0xC;
    if (v136 / 0xC >= v18 >> 2)
      v19 = v18 >> 2;
    v20 = a6;
    v21 = 4 * a2 + 8;
    v22 = (char *)result + v21 * a6;
    v23 = *(int *)&v22[-v21 + 4] + (uint64_t)*(int *)&v22[-v21];
    if (v19 < v23)
      v23 = v19;
    v24 = (4 * a2 + 39) / (4 * a2 + 8);
    if (a2 > 5)
      v24 = 1;
    v25 = a6 - v24;
    v26 = a2 % 5;
    v27 = a2 > 4;
    if (a2 % 5)
      v27 = 0;
    v28 = 15 * (a2 / 5 - v27);
    if (!v26)
      v26 = 5;
    *(float *)&a3 = (float)v26;
    v29 = (12 * v26 + 63) & 0x7FFFFFFC0;
    v30 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    if (a2 >= 5)
      a2 = 5;
    *(float *)&a4 = (float)a2;
    v31 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
    v32 = v29 + 4 * v28;
    v33 = (int8x16_t)vcgtq_f32(v31, (float32x4_t)xmmword_185004980);
    v34 = (int8x16_t)vcgtq_f32(v31, (float32x4_t)xmmword_185004970);
    if (v25 <= 1)
      v35 = 1;
    else
      v35 = v20 - v24;
    v36 = (int8x16_t)vcgtq_f32(v30, (float32x4_t)xmmword_185004970);
    do
    {
      v37 = *(float32x4_t **)(a7 + 8 * v15);
      if (v20 <= v24)
      {
        v38 = 0;
        v39 = result;
      }
      else
      {
        v38 = 0;
        v39 = result;
        do
        {
          v40 = *v39;
          v41 = (float32x4_t *)(v16 + 12 * (int)v40);
          v42 = (float32x4_t *)((char *)v41 + v32);
          if ((unint64_t)v41 + v32 > 12 * v23 + v16)
            goto LABEL_36;
          if (v41 >= v42)
          {
            v47.i64[0] = 0x8000000080000000;
            v47.i64[1] = 0x8000000080000000;
            v48.i64[0] = 0x8000000080000000;
            v48.i64[1] = 0x8000000080000000;
            v49.i64[0] = 0x8000000080000000;
            v49.i64[1] = 0x8000000080000000;
            v50.i64[0] = 0x8000000080000000;
            v50.i64[1] = 0x8000000080000000;
            v51.i64[0] = 0x8000000080000000;
            v51.i64[1] = 0x8000000080000000;
            v52.i64[0] = 0x8000000080000000;
            v52.i64[1] = 0x8000000080000000;
          }
          else
          {
            v43 = (int8x16_t *)(v39 + 2);
            v44 = v39[1];
            v45 = (float32x4_t *)(v17 + 4 * v40);
            v46 = (unint64_t)&v42[-6];
            if ((unint64_t)v41 < v46)
            {
              v49.i64[0] = 0x8000000080000000;
              v49.i64[1] = 0x8000000080000000;
              v50.i64[0] = 0x8000000080000000;
              v50.i64[1] = 0x8000000080000000;
              v51.i64[0] = 0x8000000080000000;
              v51.i64[1] = 0x8000000080000000;
              v52.i64[0] = 0x8000000080000000;
              v52.i64[1] = 0x8000000080000000;
              v47.i64[0] = 0x8000000080000000;
              v47.i64[1] = 0x8000000080000000;
              v48.i64[0] = 0x8000000080000000;
              v48.i64[1] = 0x8000000080000000;
              do
              {
                v11 = (float32x4_t)vandq_s8(v43[1], v33);
                v73 = (float32x4_t)vandq_s8(*v43, v34);
                v43 = (int8x16_t *)((char *)v43 + 20);
                v75 = *v41;
                v74 = v41[1];
                v14 = v41[2];
                v76 = v41[3];
                v77 = (float32x4_t)vzip1q_s32((int32x4_t)v73, (int32x4_t)v73);
                v77.i32[2] = v73.i32[0];
                v41 = (float32x4_t *)((char *)v41 + 60);
                v78 = (float32x4_t)vzip1q_s32((int32x4_t)v11, (int32x4_t)v11);
                v78.i32[2] = v11.i32[0];
                v79 = (int32x4_t)vextq_s8((int8x16_t)v73, (int8x16_t)v73, 4uLL);
                v52 = vmlaq_f32(v52, v78, v76);
                v51 = vmlaq_f32(v51, (float32x4_t)vextq_s8((int8x16_t)v73, (int8x16_t)vdupq_laneq_s32((int32x4_t)v73, 3), 8uLL), v14);
                v49 = vmlaq_f32(v49, v77, v75);
                v50 = vmlaq_f32(v50, (float32x4_t)vzip1q_s32(v79, v79), v74);
                v12 = *v45;
                v13 = v45[1];
                v45 = (float32x4_t *)((char *)v45 + 20);
                v48 = vmlaq_f32(v48, v11, v13);
                v47 = vmlaq_f32(v47, v73, v12);
                v44 -= 5;
              }
              while ((unint64_t)v41 < v46);
            }
            else
            {
              v47.i64[0] = 0x8000000080000000;
              v47.i64[1] = 0x8000000080000000;
              v48.i64[0] = 0x8000000080000000;
              v48.i64[1] = 0x8000000080000000;
              v49.i64[0] = 0x8000000080000000;
              v49.i64[1] = 0x8000000080000000;
              v50.i64[0] = 0x8000000080000000;
              v50.i64[1] = 0x8000000080000000;
              v51.i64[0] = 0x8000000080000000;
              v51.i64[1] = 0x8000000080000000;
              v52.i64[0] = 0x8000000080000000;
              v52.i64[1] = 0x8000000080000000;
            }
            if (v44 >= 1)
            {
              if (v44 >= 9)
              {
                v53 = (float32x4_t)vandq_s8(v43[1], v33);
                v54 = (float32x4_t)vandq_s8(*v43, v34);
                v43 = (int8x16_t *)((char *)v43 + 20);
                v56 = *v41;
                v55 = v41[1];
                v57 = v41[2];
                v58 = v41[3];
                v59 = (float32x4_t)vzip1q_s32((int32x4_t)v54, (int32x4_t)v54);
                v59.i32[2] = v54.i32[0];
                v41 = (float32x4_t *)((char *)v41 + 60);
                v60 = (float32x4_t)vzip1q_s32((int32x4_t)v53, (int32x4_t)v53);
                v60.i32[2] = v53.i32[0];
                v61 = (int32x4_t)vextq_s8((int8x16_t)v54, (int8x16_t)v54, 4uLL);
                v52 = vmlaq_f32(v52, v60, v58);
                v51 = vmlaq_f32(v51, (float32x4_t)vextq_s8((int8x16_t)v54, (int8x16_t)vdupq_laneq_s32((int32x4_t)v54, 3), 8uLL), v57);
                v49 = vmlaq_f32(v49, v59, v56);
                v50 = vmlaq_f32(v50, (float32x4_t)vzip1q_s32(v61, v61), v55);
                v62 = *v45;
                v63 = v45[1];
                v45 = (float32x4_t *)((char *)v45 + 20);
                v48 = vmlaq_f32(v48, v53, v63);
                v47 = vmlaq_f32(v47, v54, v62);
              }
              v64 = (float32x4_t)vandq_s8(v43[1], (int8x16_t)vcgtq_f32(v30, (float32x4_t)xmmword_185004980));
              v11 = (float32x4_t)vandq_s8(*v43, v36);
              v14 = v41[2];
              v65 = (float32x4_t)vzip1q_s32((int32x4_t)v11, (int32x4_t)v11);
              v65.i32[2] = v11.i32[0];
              v66 = (float32x4_t)vzip1q_s32((int32x4_t)v64, (int32x4_t)v64);
              v66.i32[2] = v64.i32[0];
              v67 = (int32x4_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 4uLL);
              v52 = vmlaq_f32(v52, v66, v41[3]);
              v51 = vmlaq_f32(v51, (float32x4_t)vextq_s8((int8x16_t)v11, (int8x16_t)vdupq_laneq_s32((int32x4_t)v11, 3), 8uLL), v14);
              v49 = vmlaq_f32(v49, v65, *v41);
              v50 = vmlaq_f32(v50, (float32x4_t)vzip1q_s32(v67, v67), v41[1]);
              v12 = *v45;
              v13 = v45[1];
              v48 = vmlaq_f32(v48, v64, v13);
              v47 = vmlaq_f32(v47, v11, *v45);
            }
          }
          v10 = (float32x4_t)vextq_s8((int8x16_t)v52, (int8x16_t)v52, 4uLL).u64[0];
          v68 = vaddq_f32(v49, (float32x4_t)vextq_s8((int8x16_t)v51, (int8x16_t)v52, 4uLL));
          v69 = (int8x16_t)vaddq_f32(v50, v10);
          v70 = (float32x4_t)vextq_s8((int8x16_t)v47, (int8x16_t)v48, 0xCuLL);
          v70.i32[2] = 0;
          v71 = (int8x16_t)vaddq_f32(v47, v70);
          v72 = vaddq_f32((float32x4_t)vextq_s8(v69, (int8x16_t)vaddq_f32(v51, (float32x4_t)0), 8uLL), vaddq_f32(v68, (float32x4_t)vextq_s8((int8x16_t)v68, v69, 0xCuLL)));
          v72.i32[3] = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL), vadd_f32(*(float32x2_t *)v71.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v71.i8, 1))).u32[0];
          *v37++ = v72;
          ++v38;
          v39 = (int *)((char *)v39 + v21);
        }
        while (v38 != v35);
        v38 = v35;
      }
LABEL_36:
      if (v38 >= v20)
        goto LABEL_176;
      do
      {
        v80 = *v39;
        if ((int)v80 >= (int)v23)
          v81 = v23;
        else
          v81 = *v39;
        v82 = v23 - v81;
        if (v39[1] >= v82)
          LODWORD(v83) = v82;
        else
          LODWORD(v83) = v39[1];
        if ((int)v83 < 1)
        {
          v92.i64[0] = 0x8000000080000000;
          v92.i64[1] = 0x8000000080000000;
          v93.i64[0] = 0x8000000080000000;
          v93.i64[1] = 0x8000000080000000;
          v88.i64[0] = 0x8000000080000000;
          v88.i64[1] = 0x8000000080000000;
          v89.i64[0] = 0x8000000080000000;
          v89.i64[1] = 0x8000000080000000;
          v90.i64[0] = 0x8000000080000000;
          v90.i64[1] = 0x8000000080000000;
          v91.i64[0] = 0x8000000080000000;
          v91.i64[1] = 0x8000000080000000;
          goto LABEL_173;
        }
        v84 = (float32x4_t *)(v16 + 12 * (_DWORD)v80);
        v85 = (unint64_t)&v84[-6] + 12 * (int)v83;
        v86 = (float32x4_t *)(v17 + 4 * v80);
        v87 = (int8x16_t *)(v39 + 2);
        if ((unint64_t)v84 >= v85)
        {
          v88.i64[0] = 0x8000000080000000;
          v88.i64[1] = 0x8000000080000000;
          v89.i64[0] = 0x8000000080000000;
          v89.i64[1] = 0x8000000080000000;
          v90.i64[0] = 0x8000000080000000;
          v90.i64[1] = 0x8000000080000000;
          v91.i64[0] = 0x8000000080000000;
          v91.i64[1] = 0x8000000080000000;
          v92.i64[0] = 0x8000000080000000;
          v92.i64[1] = 0x8000000080000000;
          v93.i64[0] = 0x8000000080000000;
          v93.i64[1] = 0x8000000080000000;
          goto LABEL_93;
        }
        v83 = (int)v83;
        v88.i64[0] = 0x8000000080000000;
        v88.i64[1] = 0x8000000080000000;
        v89.i64[0] = 0x8000000080000000;
        v89.i64[1] = 0x8000000080000000;
        v90.i64[0] = 0x8000000080000000;
        v90.i64[1] = 0x8000000080000000;
        v91.i64[0] = 0x8000000080000000;
        v91.i64[1] = 0x8000000080000000;
        v92.i64[0] = 0x8000000080000000;
        v92.i64[1] = 0x8000000080000000;
        v93.i64[0] = 0x8000000080000000;
        v93.i64[1] = 0x8000000080000000;
        do
        {
          v94 = v22 - (char *)v87;
          if ((unint64_t)(v22 - (char *)v87) >= 0x20)
            v94 = 32;
          if (v94 >= 0x20)
          {
            v11 = (float32x4_t)vandq_s8(v87[1], v33);
            v10 = (float32x4_t)vandq_s8(*v87, v34);
LABEL_50:
            v95 = v83;
            goto LABEL_51;
          }
          if ((_DWORD)v83)
          {
            if (v83 < 4)
            {
              if (v83 == 1)
              {
                v10 = (float32x4_t)v87->u32[0];
              }
              else
              {
                v105 = 0;
                if ((_DWORD)v83 != 2)
                  LODWORD(v105) = v87->i32[2];
                v10.i64[0] = v87->i64[0];
                v10.i64[1] = v105;
              }
              v11 = 0uLL;
            }
            else
            {
              if (v83 == 4)
              {
                v11 = 0uLL;
              }
              else if (v83 == 5)
              {
                v11 = (float32x4_t)v87[1].u32[0];
              }
              else
              {
                v106 = 0;
                if ((_DWORD)v83 != 6)
                {
                  v107 = 0;
                  if ((v83 & 1) == 0)
                    v107.i32[0] = v87[1].i32[3];
                  v11.i32[0] = v87[1].i32[2];
                  v106 = vzip1_s32(*(int32x2_t *)v11.f32, v107);
                }
                v11.i64[0] = v87[1].i64[0];
                *(int32x2_t *)&v11.u32[2] = v106;
              }
              v10 = *(float32x4_t *)v87;
            }
            goto LABEL_50;
          }
          v95 = 0;
          v10 = 0uLL;
          v11 = 0uLL;
LABEL_51:
          v14 = v84[2];
          v12 = v84[3];
          v13 = *v84;
          v96 = v84[1];
          if (v95)
          {
            if (v95 < 4)
            {
              v97 = 0uLL;
              v98 = 0uLL;
              if (v83)
              {
                if (v83 == 1)
                {
                  v98 = (float32x4_t)v86->u32[0];
                }
                else
                {
                  v101 = 0;
                  if (v95 != 2)
                    LODWORD(v101) = v86->i32[2];
                  v98.i64[0] = v86->i64[0];
                  v98.i64[1] = v101;
                }
              }
            }
            else
            {
              if (v83 == 4)
              {
                v97 = 0uLL;
              }
              else if (v83 == 5)
              {
                v97 = (float32x4_t)v86[1].u32[0];
              }
              else
              {
                v99 = 0;
                if (v95 != 6)
                {
                  v100 = 0;
                  if ((v83 & 1) == 0)
                    v100.i32[0] = v86[1].i32[3];
                  v99.i32[0] = v86[1].i32[2];
                  v99 = vzip1_s32(v99, v100);
                }
                v97.i64[0] = v86[1].i64[0];
                *(int32x2_t *)&v97.u32[2] = v99;
              }
              v98 = *v86;
            }
          }
          else
          {
            v98 = 0uLL;
            v97 = 0uLL;
          }
          v87 = (int8x16_t *)((char *)v87 + 20);
          v102 = (float32x4_t)vzip1q_s32((int32x4_t)v11, (int32x4_t)v11);
          v102.i32[2] = v11.i32[0];
          v84 = (float32x4_t *)((char *)v84 + 60);
          v103 = (float32x4_t)vzip1q_s32((int32x4_t)v10, (int32x4_t)v10);
          v103.i32[2] = v10.i32[0];
          v104 = (int32x4_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 4uLL);
          v89 = vmlaq_f32(v89, (float32x4_t)vzip1q_s32(v104, v104), v96);
          v90 = vmlaq_f32(v90, (float32x4_t)vextq_s8((int8x16_t)v10, (int8x16_t)vdupq_laneq_s32((int32x4_t)v10, 3), 8uLL), v14);
          v88 = vmlaq_f32(v88, v103, v13);
          v91 = vmlaq_f32(v91, v102, v12);
          v86 = (float32x4_t *)((char *)v86 + 20);
          v92 = vmlaq_f32(v92, v98, v10);
          v93 = vmlaq_f32(v93, v97, v11);
          v83 -= 5;
        }
        while ((unint64_t)v84 < v85);
        if ((int)v83 < 1)
          goto LABEL_173;
LABEL_93:
        v108 = 0;
        v109 = v83;
        v110 = 3 * v83;
        v111 = 3 * v83;
        while (2)
        {
          v112 = v110 + v108;
          v113 = v22 - (char *)v87;
          if ((unint64_t)(v22 - (char *)v87) >= 0x20)
            v113 = 32;
          if (v113 >= 0x20)
          {
            v10.f32[0] = fminf((float)(int)v109, 8.0);
            v114 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0);
            v115 = (int8x16_t)vcgtq_f32(v114, (float32x4_t)xmmword_185004970);
            v12 = *(float32x4_t *)v87;
            v13 = (float32x4_t)v87[1];
            v10 = (float32x4_t)vandq_s8((int8x16_t)v13, (int8x16_t)vcgtq_f32(v114, (float32x4_t)xmmword_185004980));
            v11 = (float32x4_t)vandq_s8(*v87, v115);
            goto LABEL_98;
          }
          if (v109 < 4)
          {
            if (v112 == 3)
            {
              v11 = (float32x4_t)v87->u32[0];
            }
            else
            {
              if (v110 + v108 == 6)
                v10.i64[0] = 0;
              else
                v10.i32[0] = v87->i32[2];
              v11.i64[0] = v87->i64[0];
              v11.i64[1] = v10.i64[0];
            }
            v10 = 0uLL;
            v87 = (int8x16_t *)((char *)v87 + 20);
          }
          else
          {
            if ((_DWORD)v109 == 4)
            {
              v10 = 0uLL;
            }
            else if ((_DWORD)v109 == 5)
            {
              v10 = (float32x4_t)v87[1].u32[0];
            }
            else
            {
              if (v110 + v108 == 18)
              {
                v11.i64[0] = 0;
              }
              else
              {
                v123 = 0;
                if ((v109 & 1) == 0)
                  v123.i32[0] = v87[1].i32[3];
                v11.i32[0] = v87[1].i32[2];
                *(int32x2_t *)v11.f32 = vzip1_s32(*(int32x2_t *)v11.f32, v123);
              }
              v10.i64[0] = v87[1].i64[0];
              v10.i64[1] = v11.i64[0];
            }
            v11 = *(float32x4_t *)v87;
LABEL_98:
            v87 = (int8x16_t *)((char *)v87 + 20);
            if (v109 > 5)
            {
              v13 = v84[2];
              v116 = v84[3];
              v14 = *v84;
              v117 = v84[1];
              v84 = (float32x4_t *)((char *)v84 + 60);
              v118 = (float32x4_t)vzip1q_s32((int32x4_t)v10, (int32x4_t)v10);
              v118.i32[2] = v10.i32[0];
              v119 = (float32x4_t)vzip1q_s32((int32x4_t)v11, (int32x4_t)v11);
              v119.i32[2] = v11.i32[0];
              v120 = (int32x4_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 4uLL);
              v89 = vmlaq_f32(v89, v117, (float32x4_t)vzip1q_s32(v120, v120));
              v90 = vmlaq_f32(v90, v13, (float32x4_t)vextq_s8((int8x16_t)v11, (int8x16_t)vdupq_laneq_s32((int32x4_t)v11, 3), 8uLL));
              v88 = vmlaq_f32(v88, v14, v119);
              v91 = vmlaq_f32(v91, v116, v118);
              if (v109 >= 8)
              {
                v12 = v86[1];
                goto LABEL_101;
              }
LABEL_159:
              if ((_DWORD)v109 == 4)
              {
                v12 = 0uLL;
              }
              else if ((_DWORD)v109 == 5)
              {
                v12 = (float32x4_t)v86[1].u32[0];
              }
              else
              {
                if (v110 + v108 == 18)
                  v13.i64[0] = 0;
                else
                  v13.i32[0] = v86[1].i32[2];
                v12.i64[0] = v86[1].i64[0];
                v12.i64[1] = v13.i64[0];
              }
LABEL_101:
              v121 = *v86;
              v86 = (float32x4_t *)((char *)v86 + 20);
              v13.i32[1] = v121.i32[1];
              v92 = vmlaq_f32(v92, v121, v11);
              v93 = vmlaq_f32(v93, v12, v10);
              v108 -= 15;
              v122 = (uint64_t)v109 <= 5;
              v109 -= 5;
              if (v122)
                goto LABEL_173;
              continue;
            }
          }
          break;
        }
        v124 = v110 + v108;
        if ((v111 + v108) < 8)
        {
          if ((v111 + v108) < 4)
          {
            v126 = 0uLL;
            v13 = 0uLL;
            if (v124)
            {
              if (v124 == 1)
              {
                v13.i64[0] = v84->u32[0];
                v14.i64[0] = 0;
              }
              else
              {
                v13.i64[0] = v84->i64[0];
                v14.i32[0] = v84->i32[2];
              }
              v13.i64[1] = v14.i64[0];
            }
          }
          else
          {
            if (v124 == 4)
            {
              v126 = 0uLL;
            }
            else if (v124 == 5)
            {
              v126 = (float32x4_t)v84[1].u32[0];
            }
            else
            {
              if (v110 + v108 == 6)
                v13.i64[0] = 0;
              else
                v13.i32[0] = v84[1].i32[2];
              v126.i64[0] = v84[1].i64[0];
              v126.i64[1] = v13.i64[0];
            }
            v13 = *v84;
          }
          v14 = 0uLL;
          v125 = 0uLL;
          goto LABEL_157;
        }
        if (v124 == 8)
        {
          v14 = 0uLL;
LABEL_146:
          v125 = 0uLL;
          goto LABEL_152;
        }
        if ((unint64_t)(v124 - 8) < 4)
        {
          if (v112 == 9)
          {
            v14.i64[0] = v84[2].u32[0];
            v12.i64[0] = 0;
          }
          else
          {
            v14.i64[0] = v84[2].i64[0];
            v12.i32[0] = v84[2].i32[2];
          }
          v14.i64[1] = v12.i64[0];
          goto LABEL_146;
        }
        if (v124 == 12)
        {
          v125 = 0uLL;
        }
        else if (v124 == 13)
        {
          v125 = (float32x4_t)v84[3].u32[0];
        }
        else
        {
          v127 = 0;
          if ((v124 & 1) == 0)
            v127.i32[0] = v84[3].i32[3];
          v125.i64[0] = v84[3].i64[0];
          v13.i32[0] = v84[3].i32[2];
          *(int32x2_t *)&v125.u32[2] = vzip1_s32(*(int32x2_t *)v13.f32, v127);
        }
        v14 = v84[2];
LABEL_152:
        v13 = *v84;
        v126 = v84[1];
LABEL_157:
        v128 = (float32x4_t)vzip1q_s32((int32x4_t)v10, (int32x4_t)v10);
        v128.i32[2] = v10.i32[0];
        v129 = (float32x4_t)vzip1q_s32((int32x4_t)v11, (int32x4_t)v11);
        v129.i32[2] = v11.i32[0];
        v130 = (int32x4_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 4uLL);
        v89 = vmlaq_f32(v89, v126, (float32x4_t)vzip1q_s32(v130, v130));
        v90 = vmlaq_f32(v90, v14, (float32x4_t)vextq_s8((int8x16_t)v11, (int8x16_t)vdupq_laneq_s32((int32x4_t)v11, 3), 8uLL));
        v88 = vmlaq_f32(v88, v13, v129);
        v91 = vmlaq_f32(v91, v125, v128);
        if (v109 >= 4)
        {
          v84 = (float32x4_t *)((char *)v84 + 60);
          goto LABEL_159;
        }
        if (v109 == 1)
        {
          v12 = (float32x4_t)v86->u32[0];
        }
        else
        {
          v13.i64[0] = 0;
          if (v109 != 2)
            v13.i32[0] = v86->i32[2];
          v12.i64[0] = v86->i64[0];
          v12.i64[1] = v13.i64[0];
        }
        v92 = vmlaq_f32(v92, v12, v11);
        v93 = vmlaq_f32(v93, (float32x4_t)0, v10);
LABEL_173:
        v10 = (float32x4_t)vextq_s8((int8x16_t)v91, (int8x16_t)v91, 4uLL).u64[0];
        v131 = vaddq_f32(v88, (float32x4_t)vextq_s8((int8x16_t)v90, (int8x16_t)v91, 4uLL));
        v132 = (int8x16_t)vaddq_f32(v89, v10);
        v133 = (float32x4_t)vextq_s8((int8x16_t)v92, (int8x16_t)v93, 0xCuLL);
        v133.i32[2] = 0;
        v134 = (int8x16_t)vaddq_f32(v92, v133);
        v135 = vaddq_f32((float32x4_t)vextq_s8(v132, (int8x16_t)vaddq_f32(v90, (float32x4_t)0), 8uLL), vaddq_f32(v131, (float32x4_t)vextq_s8((int8x16_t)v131, v132, 0xCuLL)));
        v135.i32[3] = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v134, v134, 8uLL), vadd_f32(*(float32x2_t *)v134.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v134.i8, 1))).u32[0];
        *v37++ = v135;
        ++v38;
        v39 = (int *)((char *)v39 + v21);
      }
      while (v38 != v20);
LABEL_176:
      v16 += v136;
      v17 += v18;
      ++v15;
    }
    while (v15 != a10);
  }
  return result;
}

float32x2_t *resample_horizontal<float,float,4,true>(float32x2_t *result, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  _BOOL4 v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  float32x4_t *v26;
  unint64_t v27;
  float32x2_t *v28;
  uint64_t v29;
  float32x4_t *v30;
  float32x4_t *v31;
  float32x2_t *v32;
  int v33;
  float32x4_t *v34;
  unint64_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x2_t v41;
  float32x4_t *v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int v46;
  uint64_t v47;
  __int32 v48;
  int v49;
  float32x4_t *v50;
  unint64_t v51;
  float32x4_t *v52;
  float32x2_t *v53;
  uint64_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  unint64_t v60;
  float32x4_t v61;
  float32x4_t *v62;
  float32x4_t v63;
  int32x2_t v64;
  int32x2_t v65;
  int v66;
  unint64_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  BOOL v74;
  unsigned int v75;
  int32x2_t v76;
  int32x2_t v77;
  float32x4_t v78;
  uint64_t v79;
  float32x2_t v80;

  if (a4 >= 1 && a8 >= 1)
  {
    v8 = 0;
    v9 = *a6;
    v10 = a6[1];
    v11 = *a7;
    v12 = a7[1];
    if (v11 >> 4 >= v12 >> 2)
      v13 = v12 >> 2;
    else
      v13 = v11 >> 4;
    v14 = a4;
    v15 = 4 * a2;
    v16 = v15 + 8;
    v17 = (char *)result + (v15 + 8) * a4;
    if (v13 >= *(int *)&v17[-v15 - 4] + (uint64_t)*(int *)&v17[-v15 - 8])
      v13 = *(int *)&v17[-v15 - 4] + (uint64_t)*(int *)&v17[-v15 - 8];
    v18 = (4 * a2 + 23) / (4 * a2 + 8);
    if (a2 > 1)
      v18 = 1;
    v19 = a2 > 3;
    v20 = (a2 & 3) == 0;
    LODWORD(v21) = (16 * (a2 & 3)) | 0x40;
    if ((a2 & 3) != 0)
      v21 = v21;
    else
      v21 = 128;
    v22 = v14 - v18;
    v23 = a2 >> 2;
    if (!v20)
      v19 = 0;
    v24 = ((v21 - 1) & 0xFFFFFFFFFFFFFFC0) + 64 * (v23 - v19);
    v25 = a8;
    if (v22 <= 1)
      v22 = 1;
    while (1)
    {
      v26 = *(float32x4_t **)(a5 + 8 * v8);
      if (v14 <= v18)
      {
        v27 = 0;
        v28 = result;
      }
      else
      {
        v27 = 0;
        v28 = result;
        while (1)
        {
          v29 = v28->i32[0];
          v30 = (float32x4_t *)(v9 + 16 * v29);
          v31 = (float32x4_t *)((char *)v30 + v24);
          if ((unint64_t)v30 + v24 > 16 * v13 + v9)
            break;
          if (v30 >= v31)
          {
            v36.i64[0] = 0x8000000080000000;
            v36.i64[1] = 0x8000000080000000;
            v37.i64[0] = 0x8000000080000000;
            v37.i64[1] = 0x8000000080000000;
            v38.i64[0] = 0x8000000080000000;
            v38.i64[1] = 0x8000000080000000;
            v39.i64[0] = 0x8000000080000000;
            v39.i64[1] = 0x8000000080000000;
            v40.i64[0] = 0x8000000080000000;
            v40.i64[1] = 0x8000000080000000;
          }
          else
          {
            v32 = v28 + 1;
            v33 = v28->i32[1];
            v34 = (float32x4_t *)(v10 + 4 * v29);
            v35 = (unint64_t)&v31[-4];
            if ((unint64_t)v30 < v35)
            {
              v37.i64[0] = 0x8000000080000000;
              v37.i64[1] = 0x8000000080000000;
              v38.i64[0] = 0x8000000080000000;
              v38.i64[1] = 0x8000000080000000;
              v39.i64[0] = 0x8000000080000000;
              v39.i64[1] = 0x8000000080000000;
              v40.i64[0] = 0x8000000080000000;
              v40.i64[1] = 0x8000000080000000;
              v42 = v30;
              v36.i64[0] = 0x8000000080000000;
              v36.i64[1] = 0x8000000080000000;
              do
              {
                v43 = *(float32x4_t *)v32->f32;
                v32 += 2;
                v44 = v43;
                v30 = v42 + 4;
                v37 = vmlaq_n_f32(v37, *v42, v43.f32[0]);
                v38 = vmlaq_lane_f32(v38, v42[1], *(float32x2_t *)v43.f32, 1);
                v39 = vmlaq_laneq_f32(v39, v42[2], v43, 2);
                v40 = vmlaq_laneq_f32(v40, v42[3], v43, 3);
                v45 = *v34++;
                v36 = vmlaq_f32(v36, v45, v44);
                v33 -= 4;
                v42 = v30;
              }
              while ((unint64_t)v30 < v35);
            }
            else
            {
              v36.i64[0] = 0x8000000080000000;
              v36.i64[1] = 0x8000000080000000;
              v37.i64[0] = 0x8000000080000000;
              v37.i64[1] = 0x8000000080000000;
              v38.i64[0] = 0x8000000080000000;
              v38.i64[1] = 0x8000000080000000;
              v39.i64[0] = 0x8000000080000000;
              v39.i64[1] = 0x8000000080000000;
              v40.i64[0] = 0x8000000080000000;
              v40.i64[1] = 0x8000000080000000;
            }
            if (v33 >= 1)
            {
              v37 = vmlaq_n_f32(v37, *v30, COERCE_FLOAT(*(_OWORD *)v32->f32));
              v38 = vmlaq_lane_f32(v38, v30[1], *v32, 1);
              v39 = vmlaq_laneq_f32(v39, v30[2], *(float32x4_t *)v32->f32, 2);
              v40 = vmlaq_laneq_f32(v40, v30[3], *(float32x4_t *)v32->f32, 3);
              v36 = vmlaq_f32(v36, *v34, *(float32x4_t *)v32->f32);
            }
          }
          *v26 = vaddq_f32(vaddq_f32(v37, v39), vaddq_f32(v38, v40));
          v41 = vadd_f32(*(float32x2_t *)v36.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL));
          v26[1].i32[0] = vadd_f32(v41, (float32x2_t)vdup_lane_s32((int32x2_t)v41, 1)).u32[0];
          v26 = (float32x4_t *)((char *)v26 + 20);
          ++v27;
          v28 = (float32x2_t *)((char *)v28 + v16);
          if (v27 == v22)
          {
            v27 = v22;
            break;
          }
        }
      }
      if (v27 < v14)
        break;
LABEL_97:
      v9 += v11;
      v10 += v12;
      if (++v8 == v25)
        return result;
    }
    while (1)
    {
      v46 = v28->i32[1];
      v47 = v28->i32[0];
      if ((int)v47 >= (int)v13)
        v48 = v13;
      else
        v48 = v28->i32[0];
      v49 = v13 - v48;
      if (v46 >= v49)
        v46 = v49;
      if (v46 < 1)
      {
        v59.i64[0] = 0x8000000080000000;
        v59.i64[1] = 0x8000000080000000;
        v55.i64[0] = 0x8000000080000000;
        v55.i64[1] = 0x8000000080000000;
        v56.i64[0] = 0x8000000080000000;
        v56.i64[1] = 0x8000000080000000;
        v57.i64[0] = 0x8000000080000000;
        v57.i64[1] = 0x8000000080000000;
        v58.i64[0] = 0x8000000080000000;
        v58.i64[1] = 0x8000000080000000;
        goto LABEL_94;
      }
      v50 = (float32x4_t *)(v9 + 16 * v47);
      v51 = (unint64_t)&v50[v46 - 4];
      v52 = (float32x4_t *)(v10 + 4 * v47);
      v53 = v28 + 1;
      if ((unint64_t)v50 >= v51)
      {
        v55.i64[0] = 0x8000000080000000;
        v55.i64[1] = 0x8000000080000000;
        v56.i64[0] = 0x8000000080000000;
        v56.i64[1] = 0x8000000080000000;
        v57.i64[0] = 0x8000000080000000;
        v57.i64[1] = 0x8000000080000000;
        v58.i64[0] = 0x8000000080000000;
        v58.i64[1] = 0x8000000080000000;
        v59.i64[0] = 0x8000000080000000;
        v59.i64[1] = 0x8000000080000000;
        goto LABEL_59;
      }
      v54 = v46;
      v55.i64[0] = 0x8000000080000000;
      v55.i64[1] = 0x8000000080000000;
      v56.i64[0] = 0x8000000080000000;
      v56.i64[1] = 0x8000000080000000;
      v57.i64[0] = 0x8000000080000000;
      v57.i64[1] = 0x8000000080000000;
      v58.i64[0] = 0x8000000080000000;
      v58.i64[1] = 0x8000000080000000;
      v59.i64[0] = 0x8000000080000000;
      v59.i64[1] = 0x8000000080000000;
      do
      {
        v60 = v17 - (char *)v53;
        if ((unint64_t)(v17 - (char *)v53) >= 0x10)
          v60 = 16;
        if (v60 < 0x10)
        {
          if (v54)
          {
            if (v54 == 1)
            {
              v61 = (float32x4_t)v53->u32[0];
            }
            else
            {
              v64 = 0;
              if ((_DWORD)v54 != 2)
              {
                v65 = 0;
                if ((v46 & 1) == 0)
                  v65.i32[0] = v53[1].i32[1];
                v64.i32[0] = v53[1].i32[0];
                v64 = vzip1_s32(v64, v65);
              }
              *(float32x2_t *)v61.f32 = *v53;
              *(int32x2_t *)&v61.u32[2] = v64;
            }
          }
          else
          {
            v61 = 0uLL;
          }
        }
        else
        {
          v61 = *(float32x4_t *)v53->f32;
        }
        v53 += 2;
        v62 = v50 + 4;
        v55 = vmlaq_n_f32(v55, *v50, v61.f32[0]);
        v56 = vmlaq_lane_f32(v56, v50[1], *(float32x2_t *)v61.f32, 1);
        v57 = vmlaq_laneq_f32(v57, v50[2], v61, 2);
        v58 = vmlaq_laneq_f32(v58, v50[3], v61, 3);
        v63 = *v52++;
        v59 = vmlaq_f32(v59, v63, v61);
        v54 -= 4;
        v50 = v62;
      }
      while ((unint64_t)v62 < v51);
      if ((int)v54 >= 1)
        break;
LABEL_94:
      *v26 = vaddq_f32(vaddq_f32(v55, v57), vaddq_f32(v56, v58));
      v80 = vadd_f32(*(float32x2_t *)v59.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL));
      v26[1].i32[0] = vadd_f32(v80, (float32x2_t)vdup_lane_s32((int32x2_t)v80, 1)).u32[0];
      v26 = (float32x4_t *)((char *)v26 + 20);
      ++v27;
      v28 = (float32x2_t *)((char *)v28 + v16);
      if (v27 == v14)
        goto LABEL_97;
    }
    v46 = v54;
    v50 = v62;
LABEL_59:
    v66 = v46;
    while (1)
    {
      v67 = v17 - (char *)v53;
      if ((unint64_t)(v17 - (char *)v53) >= 0x10)
        v67 = 16;
      if (v67 < 0x10)
      {
        if (v66 == 1)
        {
          v75 = v53->i32[0];
          v53 += 2;
          v68 = (float32x4_t)v75;
          v71 = *v50;
          goto LABEL_74;
        }
        v76 = 0;
        if (v66 != 2)
        {
          v77 = 0;
          if ((v46 & 1) == 0)
            v77.i32[0] = v53[1].i32[1];
          v76.i32[0] = v53[1].i32[0];
          v76 = vzip1_s32(v76, v77);
        }
        *(float32x2_t *)v68.f32 = *v53;
        *(int32x2_t *)&v68.u32[2] = v76;
      }
      else
      {
        v68 = *(float32x4_t *)v53->f32;
      }
      v53 += 2;
      if (v66 >= 4)
      {
        v69 = v50[3];
LABEL_66:
        v70 = v50[2];
LABEL_67:
        v71 = *v50;
        v72 = v50[1];
        goto LABEL_68;
      }
      if ((v66 & 0x3FFFFFFE) != 0)
      {
        v70 = 0uLL;
        v69 = 0uLL;
        if (v66 == 2)
          goto LABEL_67;
        goto LABEL_66;
      }
      v71 = *v50;
      if (v66 != 1)
      {
        v72 = v50[1];
        goto LABEL_75;
      }
LABEL_74:
      v72 = 0uLL;
LABEL_75:
      v70 = 0uLL;
      v69 = 0uLL;
LABEL_68:
      v55 = vmlaq_n_f32(v55, v71, v68.f32[0]);
      v56 = vmlaq_lane_f32(v56, v72, *(float32x2_t *)v68.f32, 1);
      v57 = vmlaq_laneq_f32(v57, v70, v68, 2);
      v58 = vmlaq_laneq_f32(v58, v69, v68, 3);
      if (v66 <= 3)
      {
        if (v66)
        {
          if (v66 == 1)
          {
            v78 = (float32x4_t)v52->u32[0];
          }
          else
          {
            v79 = 0;
            if (v66 != 2)
              LODWORD(v79) = v52->i32[2];
            v78.i64[0] = v52->i64[0];
            v78.i64[1] = v79;
          }
        }
        else
        {
          v78 = 0uLL;
        }
        v59 = vmlaq_f32(v59, v78, v68);
        goto LABEL_94;
      }
      v50 += 4;
      v73 = *v52++;
      v59 = vmlaq_f32(v59, v73, v68);
      v74 = __OFSUB__(v66, 4);
      v66 -= 4;
      if ((v66 < 0) ^ v74 | (v66 == 0))
        goto LABEL_94;
    }
  }
  return result;
}

uint64_t use_template_resampling_code()
{
  if (CGPreferencesCheck<CGResamplingAllowTemplateMethod>(void)::onceToken != -1)
    dispatch_once(&CGPreferencesCheck<CGResamplingAllowTemplateMethod>(void)::onceToken, &__block_literal_global_2_12434);
  return CGPreferencesCheck<CGResamplingAllowTemplateMethod>(void)::result;
}

uint64_t CGPDFAnnotationTypeID()
{
  if (CGPDFAnnotationTypeID_onceToken != -1)
    dispatch_once(&CGPDFAnnotationTypeID_onceToken, &__block_literal_global);
  return CGPDFAnnotationTypeID_id;
}

void CGPDFAnnotationFinalize(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

CFStringRef CGPDFAnnotationDebugDesc(uint64_t a1)
{
  const __CFAllocator *v2;
  uint64_t Type;
  const char *v4;
  const char *v5;
  const char *v6;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Type = CGPDFAnnotationGetType(a1);
  v4 = "Yes";
  if (*(_QWORD *)(a1 + 24))
    v5 = "Yes";
  else
    v5 = "No";
  if (*(_BYTE *)(a1 + 32))
    v6 = "Yes";
  else
    v6 = "No";
  if (!*(_BYTE *)(a1 + 56))
    v4 = "No";
  return CFStringCreateWithFormat(v2, 0, CFSTR("CGPDFAnnotation. Type? %d, Mutated? %s, BurnIn? %s IsGhost? %s"), Type, v5, v6, v4);
}

uint64_t CGPDFAnnotationGetType(uint64_t a1)
{
  const __CFDictionary *v2;
  const void *v3;
  const char **v4;
  CFTypeID v5;
  const char *v6;
  const char *v7;
  int v8;
  CGPDFDictionary *v10;
  char *value;

  v2 = *(const __CFDictionary **)(a1 + 24);
  if (!v2)
    goto LABEL_9;
  v3 = (const void *)CGPDFNameCreate("Subtype");
  v4 = (const char **)CFDictionaryGetValue(v2, v3);
  CFRelease(v3);
  if (!v4)
    goto LABEL_9;
  v5 = CFGetTypeID(v4);
  if (CGPDFNameTypeID_onceToken != -1)
    dispatch_once(&CGPDFNameTypeID_onceToken, &__block_literal_global_5_18214);
  if (v5 == CGPDFNameTypeID_id)
  {
    v6 = v4[2];
    v8 = *(unsigned __int8 *)v6;
    v7 = v6 + 1;
    if (v8 == 47)
      return CGPDFAnnotationTypeFromString(v7);
    else
      return CGPDFAnnotationTypeFromString(v4[2]);
  }
  else
  {
LABEL_9:
    v10 = *(CGPDFDictionary **)(a1 + 16);
    if (!v10)
      return 26;
    value = 0;
    if (!CGPDFDictionaryGetName(v10, "Subtype", (const char **)&value) || value == 0)
      return 26;
    else
      return CGPDFAnnotationTypeFromString(value);
  }
}

uint64_t CGPDFAnnotationTypeFromString(const char *a1)
{
  uint64_t result;

  result = strcmp(a1, "3D");
  if ((_DWORD)result)
  {
    if (!strcmp(a1, "Caret"))
    {
      return 1;
    }
    else if (!strcmp(a1, "Circle"))
    {
      return 2;
    }
    else if (!strcmp(a1, "FileAttachment"))
    {
      return 3;
    }
    else if (!strcmp(a1, "FreeText"))
    {
      return 4;
    }
    else if (!strcmp(a1, "Highlight"))
    {
      return 5;
    }
    else if (!strcmp(a1, "Ink"))
    {
      return 6;
    }
    else if (!strcmp(a1, "Line"))
    {
      return 7;
    }
    else if (!strcmp(a1, "Link"))
    {
      return 8;
    }
    else if (!strcmp(a1, "Movie"))
    {
      return 9;
    }
    else if (!strcmp(a1, "Polygon"))
    {
      return 10;
    }
    else if (!strcmp(a1, "PolyLine"))
    {
      return 11;
    }
    else if (!strcmp(a1, "Popup"))
    {
      return 12;
    }
    else if (!strcmp(a1, "Redact"))
    {
      return 14;
    }
    else if (!strcmp(a1, "Screen"))
    {
      return 15;
    }
    else if (!strcmp(a1, "Sound"))
    {
      return 16;
    }
    else if (!strcmp(a1, "Square"))
    {
      return 17;
    }
    else if (!strcmp(a1, "Squiggly"))
    {
      return 18;
    }
    else if (!strcmp(a1, "Stamp"))
    {
      return 19;
    }
    else if (!strcmp(a1, "StrikeOut"))
    {
      return 20;
    }
    else if (!strcmp(a1, "Text"))
    {
      return 21;
    }
    else if (!strcmp(a1, "Underline"))
    {
      return 23;
    }
    else if (!strcmp(a1, "Widget"))
    {
      return 25;
    }
    else if (!strcmp(a1, "PrinterMark"))
    {
      return 13;
    }
    else if (!strcmp(a1, "TrapNet"))
    {
      return 22;
    }
    else if (!strcmp(a1, "Watermark"))
    {
      return 24;
    }
    else
    {
      return 26;
    }
  }
  return result;
}

uint64_t CGPDFAnnotationCreate(const __CFDictionary *a1)
{
  uint64_t cftype;

  if (CGPDFAnnotationTypeID_onceToken != -1)
    dispatch_once(&CGPDFAnnotationTypeID_onceToken, &__block_literal_global);
  cftype = pdf_create_cftype();
  *(_QWORD *)(cftype + 16) = 0;
  *(_QWORD *)(cftype + 24) = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a1);
  *(_BYTE *)(cftype + 32) = 0;
  *(_QWORD *)(cftype + 40) = 0;
  *(_QWORD *)(cftype + 48) = 0;
  *(_BYTE *)(cftype + 56) = 0;
  return cftype;
}

uint64_t CGPDFAnnotationCreateWithCGPDFDictionary(uint64_t a1)
{
  uint64_t result;

  if (CGPDFAnnotationTypeID_onceToken != -1)
    dispatch_once(&CGPDFAnnotationTypeID_onceToken, &__block_literal_global);
  result = pdf_create_cftype();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_BYTE *)(result + 56) = 0;
  return result;
}

CFMutableDictionaryRef CGPDFAnnotationGetDictionary(uint64_t a1)
{
  CFMutableDictionaryRef result;

  result = *(CFMutableDictionaryRef *)(a1 + 24);
  if (!result)
  {
    result = CGPDFAppenderCreateCFDictionary(*(CGPDFDictionary **)(a1 + 16));
    *(_QWORD *)(a1 + 24) = result;
  }
  return result;
}

uint64_t CGPDFAnnotationGetCGPDFDictionary(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

float64_t CGPDFAnnotationGetRect(uint64_t a1)
{
  const void *v2;
  char PDFRect;
  CGPDFDictionary *v4;
  float64x2_t v6[2];

  memset(v6, 0, sizeof(v6));
  if (!*(_QWORD *)(a1 + 24)
    || (v2 = (const void *)CGPDFNameCreate("Rect"),
        PDFRect = CGCFDictionaryGetPDFRect(*(const __CFDictionary **)(a1 + 24), v2, v6),
        CFRelease(v2),
        (PDFRect & 1) == 0))
  {
    v4 = *(CGPDFDictionary **)(a1 + 16);
    if (v4)
      CGPDFDictionaryGetRect(v4, "Rect", v6[0].f64);
  }
  return v6[0].f64[0];
}

void CGContextDrawPDFAnnotation(CGContext *a1, uint64_t a2)
{
  CGPDFDictionary *v4;
  _BOOL4 Name;
  CGFloat a;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  const CGAffineTransform *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  const CGRect *v14;
  CGFloat *p_height;
  CGFloat *p_y;
  CGSize *p_size;
  CGFloat y;
  double width;
  CGFloat Rect;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  CGPDFStream *v27;
  CGPDFDictionary *v28;
  char *v29;
  _BOOL4 v30;
  double v31;
  _BOOL4 v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  CGRect v42;
  CGFloat x;
  double height;
  CGAffineTransform transform;
  CGAffineTransform v46;
  CGAffineTransform value;
  char *v48;
  CGPDFDictionaryRef v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;
  CGRect v54;
  CGRect v55;
  CGRect v56;
  CGRect v57;

  if (!a2)
    return;
  v4 = *(CGPDFDictionary **)(a2 + 16);
  if (!v4)
    return;
  value.a = 0.0;
  if (!CGPDFDictionaryGetDictionary(v4, "AP", (CGPDFDictionaryRef *)&value))
    return;
  v46.a = 0.0;
  v49 = 0;
  if (!CGPDFDictionaryGetDictionary(*(CGPDFDictionaryRef *)&value.a, "N", &v49))
  {
    a = value.a;
    v7 = "N";
LABEL_8:
    if (!CGPDFDictionaryGetStream(*(CGPDFDictionaryRef *)&a, v7, (CGPDFStreamRef *)&v46))
      return;
    goto LABEL_11;
  }
  v48 = 0;
  Name = CGPDFDictionaryGetName(*(CGPDFDictionaryRef *)(a2 + 16), "AS", (const char **)&v48);
  a = *(double *)&v49;
  if (Name)
  {
    v7 = v48;
    goto LABEL_8;
  }
  if (!CGPDFDictionaryGetStream(v49, "Off", (CGPDFStreamRef *)&v46))
    return;
LABEL_11:
  if (*(_QWORD *)&v46.a)
  {
    v8 = CGPDFFormCreate(*(CGPDFDictionary **)&v46.a);
    v9 = (_QWORD *)v8;
    v10 = (const CGAffineTransform *)(v8 + 56);
    if (!v8)
      v10 = &CGAffineTransformIdentity;
    v11 = *(_OWORD *)&v10->c;
    v12 = *(_OWORD *)&v10->a;
    v13 = v11;
    *(_OWORD *)&value.a = *(_OWORD *)&v10->a;
    *(_OWORD *)&value.c = v11;
    *(_OWORD *)&value.tx = *(_OWORD *)&v10->tx;
    v14 = &CGRectNull;
    p_height = &CGRectNull.size.height;
    p_y = &CGRectNull.origin.y;
    p_size = &CGRectNull.size;
    if (v8)
    {
      p_size = (CGSize *)(v8 + 40);
      p_y = (CGFloat *)(v8 + 32);
      v14 = (const CGRect *)(v8 + 24);
      p_height = (CGFloat *)(v8 + 48);
    }
    v50.size.height = *p_height;
    v50.origin.x = v14->origin.x;
    v50.origin.y = *p_y;
    v50.size.width = p_size->width;
    *(_OWORD *)&v46.a = v12;
    *(_OWORD *)&v46.c = v13;
    *(_OWORD *)&v46.tx = *(_OWORD *)&v10->tx;
    v42 = v50;
    v51 = CGRectApplyAffineTransform(v50, &v46);
    x = v51.origin.x;
    height = v51.size.height;
    y = v51.origin.y;
    width = v51.size.width;
    Rect = CGPDFAnnotationGetRect(a2);
    v22 = v21;
    v24 = v23;
    v26 = v25;
    if (v9)
    {
      v27 = (CGPDFStream *)v9[2];
      v28 = (CGPDFDictionary *)v9[13];
    }
    else
    {
      v27 = 0;
      v28 = 0;
    }
    v29 = CGPDFDrawingContextCreateWithStream(v27, v28, 0);
    CGContextSaveGState(a1);
    v30 = v26 < 0.0 || v24 < 0.0;
    v31 = Rect;
    if (v30)
    {
      v52.origin.x = Rect;
      v52.origin.y = v22;
      v52.size.width = v24;
      v52.size.height = v26;
      *(_QWORD *)&v31 = (unint64_t)CGRectStandardize(v52);
    }
    v32 = height < 0.0 || width < 0.0;
    v33 = x;
    if (v32)
    {
      v53.origin.x = x;
      v53.size.height = height;
      v53.origin.y = y;
      v53.size.width = width;
      *(_QWORD *)&v33 = (unint64_t)CGRectStandardize(v53);
    }
    v34 = y;
    v35 = v31 - v33;
    if (v30)
    {
      v54.origin.x = Rect;
      v54.origin.y = v22;
      v54.size.width = v24;
      v54.size.height = v26;
      v55 = CGRectStandardize(v54);
      v22 = v55.origin.y;
    }
    if (v32)
    {
      v56.origin.x = x;
      v56.size.height = height;
      v56.origin.y = y;
      v56.size.width = width;
      v57 = CGRectStandardize(v56);
      v34 = v57.origin.y;
    }
    transform.a = 1.0;
    transform.b = 0.0;
    transform.c = 0.0;
    transform.d = 1.0;
    transform.tx = (v24 - width) * 0.5 + v35;
    transform.ty = (v26 - height) * 0.5 + v22 - v34;
    CGContextConcatCTM(a1, &transform);
    v46 = value;
    CGContextConcatCTM(a1, &v46);
    CGContextClipToRect(a1, v42);
    CGPDFDrawingContextDraw((uint64_t)v29, (uint64_t)a1, v36, v37, v38, v39, v40, v41);
    CGContextRestoreGState(a1);
    CGPDFDrawingContextRelease(v29);
    if (v9)
      CFRelease(v9);
  }
}

void CGPDFAnnotationSetAnnotationForKey(uint64_t a1, const char *a2, const void *a3)
{
  __CFDictionary *CFDictionary;

  CFDictionary = *(__CFDictionary **)(a1 + 24);
  if (!CFDictionary)
  {
    CFDictionary = CGPDFAppenderCreateCFDictionary(*(CGPDFDictionary **)(a1 + 16));
    *(_QWORD *)(a1 + 24) = CFDictionary;
  }
  CGPDFAppenderDictionarySetValue(CFDictionary, a2, a3);
}

uint64_t CGPDFAnnotationSetBurnIn(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2;
  return result;
}

uint64_t CGPDFAnnotationGetBurnIn(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t CGPDFAnnotationSetIsGhost(uint64_t result, char a2)
{
  *(_BYTE *)(result + 56) = a2;
  return result;
}

CGPDFDictionary *CGPDFAnnotationIsPristine(uint64_t a1)
{
  CGPDFDictionary *result;
  const __CFString *v3;
  uint64_t Hash;
  const __CFString *CFDictionary;
  unsigned __int8 *v6;
  const char *v7;
  int v8;
  const char *v9;
  char *value;

  result = *(CGPDFDictionary **)(a1 + 16);
  if (result)
  {
    value = 0;
    result = (CGPDFDictionary *)CGPDFDictionaryGetName(result, "AAPL:Hash", (const char **)&value);
    if ((_DWORD)result)
    {
      v3 = *(const __CFString **)(a1 + 24);
      if (v3)
      {
        Hash = CGPDFAppenderDictionaryCreateHash(v3);
      }
      else
      {
        CFDictionary = (const __CFString *)CGPDFAppenderCreateCFDictionary(*(CGPDFDictionary **)(a1 + 16));
        Hash = CGPDFAppenderDictionaryCreateHash(CFDictionary);
        CFRelease(CFDictionary);
      }
      v6 = *(unsigned __int8 **)(Hash + 16);
      v8 = *v6;
      v7 = (const char *)(v6 + 1);
      if (v8 == 47)
        v9 = v7;
      else
        v9 = *(const char **)(Hash + 16);
      return (CGPDFDictionary *)(strcmp(value, v9) == 0);
    }
  }
  return result;
}

uint64_t CGPDFAnnotationIsVersioned()
{
  return 0;
}

CFTypeRef CPListInfoCopy(__int128 *a1, uint64_t a2)
{
  const void *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  CFTypeRef result;

  v4 = *(const void **)(a2 + 40);
  if (v4)
    CFRelease(v4);
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[1];
  *(_OWORD *)(a2 + 32) = a1[2];
  v8 = *a1;
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)a2 = v8;
  *(_OWORD *)(a2 + 16) = v7;
  result = *(CFTypeRef *)(a2 + 40);
  if (result)
    return CFRetain(result);
  return result;
}

void *splitParagraphAtTextLine(void *a1, uint64_t a2, unsigned int a3)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  int v10;

  v4 = a1;
  v5 = objc_msgSend(a1, "indexOf:", a2);
  if (v5 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v6 = v5;
    v7 = (void *)objc_msgSend(v4, "parent");
    if (v7)
    {
      v8 = v7;
      v9 = objc_msgSend(v7, "indexOf:", v4);
      if (v9 != 0x7FFFFFFFFFFFFFFFLL)
      {
        v10 = v9;
        v4 = (void *)objc_msgSend(v4, "copyAndSplitChildrenAtIndex:", v6 + a3);
        objc_msgSend(v8, "add:atIndex:", v4, (v10 + 1));

      }
    }
  }
  return v4;
}

CGDataConsumerRef CGDataConsumerCreateFlateEncoder(void *a1)
{
  z_stream *v2;

  v2 = (z_stream *)malloc_type_malloc(0xF8uLL, 0x2062DE7BuLL);
  v2->zalloc = (alloc_func)encoder_alloc;
  v2->zfree = (free_func)encoder_free;
  v2->opaque = 0;
  v2->next_in = 0;
  v2->avail_in = 0;
  v2->next_out = 0;
  v2->avail_out = 0;
  if (deflateInit_(v2, 1, "1.2.12", 112))
  {
    fprintf_l((FILE *)*MEMORY[0x1E0C80C10], 0, "deflateInit: error: %s.\n", v2->msg);
    free(v2);
    return 0;
  }
  else
  {
    v2->next_out = (Bytef *)&v2[1].avail_in;
    v2->avail_out = 128;
    if (a1)
      CFRetain(a1);
    v2[1].next_in = (Bytef *)a1;
    return CGDataConsumerCreate(v2, (const CGDataConsumerCallbacks *)&callbacks);
  }
}

void *encoder_alloc(uint64_t a1, int a2, int a3)
{
  return malloc_type_malloc((a3 * a2), 0x705560E0uLL);
}

void encoder_free(int a1, void *a2)
{
  free(a2);
}

uint64_t encoder_write(uint64_t strm, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;

  if (!strm)
    return strm;
  v4 = strm;
  *(_DWORD *)(strm + 8) = a3;
  *(_QWORD *)strm = a2;
  if (!(_DWORD)a3)
  {
    v7 = 0;
    return a3 - v7;
  }
  v5 = strm + 120;
  while (1)
  {
    if (*(_DWORD *)(v4 + 32))
      goto LABEL_7;
    if (CGDataConsumerPutBytes(*(_QWORD *)(v4 + 112), v4 + 120, 128) != 128)
      break;
    *(_DWORD *)(v4 + 32) = 128;
    *(_QWORD *)(v4 + 24) = v5;
LABEL_7:
    v6 = deflate((z_streamp)v4, 0);
    v7 = *(_DWORD *)(v4 + 8);
    if (v6 || !v7)
      return a3 - v7;
  }
  v7 = *(_DWORD *)(v4 + 8);
  return a3 - v7;
}

z_stream *encoder_flush(z_stream *result)
{
  z_stream *v1;
  Bytef *next_in;
  uint64_t (*v3)(_QWORD);

  if (result)
  {
    v1 = result;
    result = (z_stream *)do_flush(result, 0);
    if ((_DWORD)result)
    {
      next_in = v1[1].next_in;
      if (next_in)
      {
        if (!next_in[56])
        {
          v3 = (uint64_t (*)(_QWORD))*((_QWORD *)next_in + 10);
          if (v3)
            return (z_stream *)v3(*((_QWORD *)next_in + 2));
        }
      }
    }
  }
  return result;
}

void encoder_close(z_stream *a1)
{
  int v2;
  Bytef *next_in;
  void (*v4)(_QWORD);

  if (a1)
  {
    do_flush(a1, 4);
    if (a1->state)
    {
      v2 = deflateEnd(a1);
      if (v2)
        fprintf_l((FILE *)*MEMORY[0x1E0C80C10], 0, "deflateEnd: error %d: %s.\n", v2, a1->msg);
    }
    next_in = a1[1].next_in;
    if (next_in)
    {
      if (next_in[56]
        || (v4 = (void (*)(_QWORD))*((_QWORD *)next_in + 10)) == 0
        || (v4(*((_QWORD *)next_in + 2)), (next_in = a1[1].next_in) != 0))
      {
        CFRelease(next_in);
      }
    }
    free(a1);
  }
}

BOOL do_flush(z_streamp strm, int flush)
{
  int v4;
  unsigned int v5;
  Bytef *p_avail_in;
  uInt avail_out;
  int v8;
  BOOL v10;

  v4 = 0;
  v5 = 0;
  strm->avail_in = 0;
  p_avail_in = (Bytef *)&strm[1].avail_in;
  avail_out = strm->avail_out;
  while (avail_out == 128)
  {
LABEL_5:
    if (v4)
      return v5 < 2;
    v8 = deflate(strm, flush);
    if (v8 == -5 && avail_out == 128)
      v5 = 0;
    else
      v5 = v8;
    avail_out = strm->avail_out;
    if (avail_out)
      v10 = 1;
    else
      v10 = v5 == 1;
    v4 = v10;
    if (v5 >= 2)
    {
      v5 = v8;
      return v5 < 2;
    }
  }
  if (CGDataConsumerPutBytes((uint64_t)strm[1].next_in, (uint64_t)p_avail_in, 128 - avail_out) == 128 - avail_out)
  {
    strm->next_out = p_avail_in;
    strm->avail_out = 128;
    goto LABEL_5;
  }
  return 0;
}

void TrueType::~TrueType(TrueType *this)
{
  SimpleFont::~SimpleFont(this);
  JUMPOUT(0x186DC23C4);
}

uint64_t TrueType::get_format(TrueType *this)
{
  return 1;
}

_QWORD *TrueType::create_subset(uint64_t a1, int a2)
{
  _QWORD *v4;
  void *v6[2];
  char v7;
  void *__p[2];
  char v9;

  v4 = (_QWORD *)operator new();
  std::string::basic_string[abi:se180100]<0>((char **)v6, "TT");
  PDFFont::get_next_subset_name((uint64_t)__p, *(_QWORD *)(a1 + 8), (uint64_t)v6);
  FontSubset::FontSubset((uint64_t)v4, a1, (__int128 *)__p, a2);
  *v4 = &off_1E1627F60;
  if (v9 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  return v4;
}

void sub_184ABCBE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  MEMORY[0x186DC23C4](v20, 0x10F3C4094E7248ELL);
  _Unwind_Resume(a1);
}

char **std::string::basic_string[abi:se180100]<0>(char **a1, char *__s)
{
  size_t v4;
  size_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;

  if (!__s)
    goto LABEL_15;
  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_16;
  v5 = v4;
  if (v4 > 0x16)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = (char *)operator new(v7 + 1);
    a1[1] = (char *)v5;
    a1[2] = (char *)(v8 | 0x8000000000000000);
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = (char *)a1;
  }
  v9 = &v6[v5];
  if (v6 <= __s && v9 > __s)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    std::string::__throw_length_error[abi:se180100]();
  }
  if (v5)
    memmove(v6, __s, v5);
  *v9 = 0;
  return a1;
}

void std::string::__throw_length_error[abi:se180100]()
{
  std::__throw_length_error[abi:se180100]("basic_string");
}

void std::__throw_length_error[abi:se180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:se180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E1620B28, MEMORY[0x1E0DE42D0]);
}

void sub_184ABCD3C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:se180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

uint64_t CGFlexTRCToneMappingGetDefaultOptions()
{
  if (CGFlexTRCToneMappingGetDefaultOptions_predicate != -1)
    dispatch_once(&CGFlexTRCToneMappingGetDefaultOptions_predicate, &__block_literal_global_122);
  return CGFlexTRCToneMappingGetDefaultOptions_options;
}

uint64_t CGFlexLumaToneMappingGetDefaultOptions()
{
  if (CGFlexLumaToneMappingGetDefaultOptions_predicate != -1)
    dispatch_once(&CGFlexLumaToneMappingGetDefaultOptions_predicate, &__block_literal_global_7);
  return CGFlexLumaToneMappingGetDefaultOptions_options;
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

float CGGetFloatValue(const __CFNumber *a1)
{
  CFTypeID v2;
  CFTypeID TypeID;
  float result;
  float valuePtr;

  v2 = CFGetTypeID(a1);
  TypeID = CFNumberGetTypeID();
  result = 0.0;
  if (v2 == TypeID)
  {
    valuePtr = 0.0;
    CFNumberGetValue(a1, kCFNumberFloatType, &valuePtr);
    return valuePtr;
  }
  return result;
}

void CG::DisplayListResourceColor::getChildResources(CG::DisplayListResourceColor *this@<X0>, char **a2@<X8>)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *((_QWORD *)this + 3);
  if (v4)
  {
    v5 = (char *)operator new(8uLL);
    *(_QWORD *)v5 = v4;
    v6 = v5 + 8;
    *a2 = v5;
    a2[1] = v5 + 8;
    a2[2] = v5 + 8;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = *((_QWORD *)this + 4);
  if (v7)
  {
    v8 = v6 - v5;
    v9 = (v6 - v5) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
    if (v8 >> 2 > v10)
      v10 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
      v11 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(v11);
    else
      v12 = 0;
    v13 = (char *)(v11 + 8 * v9);
    *(_QWORD *)v13 = v7;
    v14 = v13 + 8;
    if (v6 != v5)
    {
      do
      {
        v15 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *((_QWORD *)v13 - 1) = v15;
        v13 -= 8;
      }
      while (v6 != v5);
      v5 = *a2;
    }
    *a2 = v13;
    a2[1] = v14;
    a2[2] = (char *)(v11 + 8 * v12);
    if (v5)
      operator delete(v5);
    a2[1] = v14;
  }
}

void sub_184ABD3F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

BOOL CG::DisplayListResourceColor::_equal_to(CG::DisplayListResourceColor *this, const CG::DisplayListResource *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  CGColor *v7;
  CGColor *v8;

  if (!this)
    __cxa_bad_typeid();
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 - 8) + 8);
  result = std::type_info::operator==[abi:se180100](v4, v5);
  if ((_DWORD)result)
  {
    v7 = (CGColor *)*((_QWORD *)this + 2);
    v8 = (CGColor *)*((_QWORD *)a2 + 2);
    if (v7)
    {
      if (v8)
      {
        result = CGColorEqualToColor(v7, v8);
        if (!(_DWORD)result)
          return result;
        goto LABEL_9;
      }
    }
    else if (!v8)
    {
LABEL_9:
      result = std::type_info::operator==[abi:se180100](v4, v5);
      if ((_DWORD)result)
        return *((_DWORD *)a2 + 2) == *((_DWORD *)this + 2);
      return result;
    }
    return 0;
  }
  return result;
}

BOOL std::type_info::operator==[abi:se180100](uint64_t a1, uint64_t a2)
{
  if (a1 == a2)
    return 1;
  if ((a2 & a1) < 0 != __OFSUB__(a1, a2))
    return strcmp((const char *)(a1 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(a2 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

void *std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(unint64_t a1)
{
  if (a1 >> 61)
    std::__throw_bad_array_new_length[abi:se180100]();
  return operator new(8 * a1);
}

void std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]()
{
  std::__throw_length_error[abi:se180100]("vector");
}

void std::__throw_bad_array_new_length[abi:se180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

_QWORD *CG::DisplayListResourceImage::getChildResources@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v4;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = this[5];
  if (v2)
  {
    v4 = operator new(8uLL);
    *a2 = v4;
    *v4 = v2;
    this = v4 + 1;
    a2[1] = this;
    a2[2] = this;
  }
  return this;
}

BOOL CG::DisplayListResourceImage::_equal_to(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  _BOOL8 result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
    __cxa_bad_typeid();
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8);
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 - 8) + 8);
  result = std::type_info::operator==[abi:se180100](v6, v7);
  if (result)
  {
    v9 = *(_QWORD *)(a1 + 16);
    v10 = *(_QWORD *)(a2 + 16);
    if (v9)
    {
      if (v10)
      {
        if ((a3 & 1) != 0)
        {
          if (CG::DisplayListResourceImage::_equal_to(CG::DisplayListResource const&,unsigned long)const::predicate != -1)
            dispatch_once(&CG::DisplayListResourceImage::_equal_to(CG::DisplayListResource const&,unsigned long)const::predicate, &__block_literal_global_132);
          v11 = CG::DisplayListResourceImage::_equal_to(CG::DisplayListResource const&,unsigned long)const::f(*(_QWORD *)(a1 + 16));
          if (CG::DisplayListResourceImage::_equal_to(CG::DisplayListResource const&,unsigned long)const::predicate != -1)
            dispatch_once(&CG::DisplayListResourceImage::_equal_to(CG::DisplayListResource const&,unsigned long)const::predicate, &__block_literal_global_4);
          if (v11 == CG::DisplayListResourceImage::_equal_to(CG::DisplayListResource const&,unsigned long)const::f(*(_QWORD *)(a2 + 16)))
          {
            v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8);
            v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 - 8) + 8);
            goto LABEL_16;
          }
        }
        else if (v9 == v10)
        {
          goto LABEL_16;
        }
      }
    }
    else if (!v10)
    {
LABEL_16:
      result = std::type_info::operator==[abi:se180100](v6, v7);
      if (result)
        return *(_DWORD *)(a2 + 8) == *(_DWORD *)(a1 + 8);
      return result;
    }
    return 0;
  }
  return result;
}

_QWORD *CG::DisplayListResourceShading::getChildResources@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v4;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = this[4];
  if (v2)
  {
    v4 = operator new(8uLL);
    *a2 = v4;
    *v4 = v2;
    this = v4 + 1;
    a2[1] = this;
    a2[2] = this;
  }
  return this;
}

BOOL CG::DisplayListResourceShading::_equal_to(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;

  if (!a1)
    __cxa_bad_typeid();
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 - 8) + 8);
  result = std::type_info::operator==[abi:se180100](v4, v5);
  if (result)
  {
    v7 = *(_QWORD *)(a1 + 16);
    v8 = *(_QWORD *)(a2 + 16);
    if (v7)
    {
      if (v8 && *(_DWORD *)(v7 + 16) == *(_DWORD *)(v8 + 16))
        goto LABEL_6;
    }
    else if (!v8)
    {
LABEL_6:
      result = std::type_info::operator==[abi:se180100](v4, v5);
      if (result)
        return *(_DWORD *)(a2 + 8) == *(_DWORD *)(a1 + 8);
      return result;
    }
    return 0;
  }
  return result;
}

void CG::DisplayListResourcePattern::~DisplayListResourcePattern(CG::DisplayListResourcePattern *this)
{
  CG::DisplayListResourcePattern::~DisplayListResourcePattern(this);
  JUMPOUT(0x186DC23C4);
}

{
  const void *v2;

  *(_QWORD *)this = &off_1E16293D0;
  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)this + 2) = 0;
  }
}

void CG::DisplayListResource::getChildResources(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

BOOL CG::DisplayListResourcePattern::_equal_to(CG::DisplayListResourcePattern *this, const CG::DisplayListResource *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;

  if (!this)
    __cxa_bad_typeid();
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 - 8) + 8);
  result = std::type_info::operator==[abi:se180100](v4, v5);
  if ((_DWORD)result)
  {
    v7 = *((_QWORD *)this + 2);
    v8 = *((_QWORD *)a2 + 2);
    if (v7)
    {
      if (v8 && *(_DWORD *)(v7 + 16) == *(_DWORD *)(v8 + 16))
        goto LABEL_6;
    }
    else if (!v8)
    {
LABEL_6:
      result = std::type_info::operator==[abi:se180100](v4, v5);
      if ((_DWORD)result)
        return *((_DWORD *)a2 + 2) == *((_DWORD *)this + 2);
      return result;
    }
    return 0;
  }
  return result;
}

_QWORD *CG::DisplayListResourceStyle::getChildResources@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v4;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = this[3];
  if (v2)
  {
    v4 = operator new(8uLL);
    *a2 = v4;
    *v4 = v2;
    this = v4 + 1;
    a2[1] = this;
    a2[2] = this;
  }
  return this;
}

BOOL CG::DisplayListResourceStyle::_equal_to(CG::DisplayListResourceStyle *this, const CG::DisplayListResource *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;

  if (!this)
    __cxa_bad_typeid();
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 - 8) + 8);
  result = std::type_info::operator==[abi:se180100](v4, v5);
  if ((_DWORD)result)
  {
    v7 = *((_QWORD *)this + 2);
    v8 = *((_QWORD *)a2 + 2);
    if (v7)
    {
      if (v8 && *(_DWORD *)(v7 + 16) == *(_DWORD *)(v8 + 16))
        goto LABEL_6;
    }
    else if (!v8)
    {
LABEL_6:
      result = std::type_info::operator==[abi:se180100](v4, v5);
      if ((_DWORD)result)
        return *((_DWORD *)a2 + 2) == *((_DWORD *)this + 2);
      return result;
    }
    return 0;
  }
  return result;
}

uint64_t CGPDFPageFinalize(unint64_t a1)
{
  uint64_t v2;
  os_unfair_lock_s *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;

  if (*(_BYTE *)(a1 + 24))
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2 && a1 != 0)
    {
      v4 = (os_unfair_lock_s *)(v2 + 208);
      os_unfair_lock_lock((os_unfair_lock_t)(v2 + 208));
      v5 = *(_QWORD *)(v2 + 200);
      if (v5)
      {
        v6 = std::__hash_table<std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>,std::__unordered_map_hasher<CGPDFPage *,std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>,std::hash<CGPDFPage *>,std::equal_to<CGPDFPage *>,true>,std::__unordered_map_equal<CGPDFPage *,std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>,std::equal_to<CGPDFPage *>,std::hash<CGPDFPage *>,true>,std::allocator<std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>>>::find<CGPDFPage *>((_QWORD *)(v5 + 24), a1);
        if (v6)
        {
          v7 = v6;
          std::list<CGPDFPage *>::erase((uint64_t *)v5, (uint64_t *)v6[3]);
          std::__hash_table<std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>,std::__unordered_map_hasher<CGPDFPage *,std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>,std::hash<CGPDFPage *>,std::equal_to<CGPDFPage *>,true>,std::__unordered_map_equal<CGPDFPage *,std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>,std::equal_to<CGPDFPage *>,std::hash<CGPDFPage *>,true>,std::allocator<std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>>>::erase((_QWORD *)(v5 + 24), v7);
          if (*(_BYTE *)(v5 + 72))
          {
            printf("LRUCache: removed page: %lu\n", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8));
            putchar(9);
            LRUCache::print((LRUCache *)v5);
          }
        }
      }
      os_unfair_lock_unlock(v4);
    }
  }
  pdf_page_release(*(_QWORD *)(a1 + 40));
  v8 = *(const void **)(a1 + 32);
  if (v8)
    CFRelease(v8);
  if (*(_BYTE *)(a1 + 24))
  {
    v9 = *(const void **)(a1 + 16);
    if (v9)
      CFRelease(v9);
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 336));
  v10 = *(const void **)(a1 + 344);
  if (v10)
    CFRelease(v10);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 336));
  v11 = *(const void **)(a1 + 368);
  if (v11)
    CFRelease(v11);
  v12 = *(const void **)(a1 + 296);
  if (v12)
    CFRelease(v12);
  v13 = *(const void **)(a1 + 312);
  if (v13)
    CFRelease(v13);
  v14 = *(const void **)(a1 + 328);
  if (v14)
    CFRelease(v14);
  return pthread_mutex_destroy((pthread_mutex_t *)(a1 + 216));
}

__CFString *CGPDFPageCopyDebugDesc(uint64_t a1)
{
  __CFString *Mutable;
  __CFString *v3;
  uint64_t v4;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v3 = Mutable;
  if (a1)
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  else
    v4 = 0;
  CFStringAppendFormat(Mutable, 0, CFSTR("<CGPDFPage %p> page number: %zu"), a1, v4);
  return v3;
}

CFTypeID CGPDFPageGetTypeID(void)
{
  if (CGPDFPageGetTypeID_onceToken != -1)
    dispatch_once(&CGPDFPageGetTypeID_onceToken, &__block_literal_global_154);
  return CGPDFPageGetTypeID_id;
}

void CGPDFPageRelease(CGPDFPageRef page)
{
  if (page)
    CFRelease(page);
}

CGPDFPageRef CGPDFPageRetain(CGPDFPageRef page)
{
  if (page)
    CFRetain(page);
  return page;
}

uint64_t CGPDFPageGetPage(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

CGPDFDocumentRef CGPDFPageGetDocument(CGPDFDocumentRef page)
{
  if (page)
    return (CGPDFDocumentRef)*((_QWORD *)page + 2);
  return page;
}

size_t CGPDFPageGetPageNumber(size_t page)
{
  if (page)
    return *(_QWORD *)(*(_QWORD *)(page + 40) + 8);
  return page;
}

int CGPDFPageGetRotationAngle(CGPDFPageRef page)
{
  CGPDFPageRef v1;
  pthread_mutex_t *v2;

  v1 = page;
  if (page)
  {
    v2 = (pthread_mutex_t *)((char *)page + 216);
    pthread_mutex_lock((pthread_mutex_t *)((char *)page + 216));
    LODWORD(v1) = *((_DWORD *)v1 + 12);
    pthread_mutex_unlock(v2);
  }
  return (int)v1;
}

CFTypeRef CGPDFPageGetBackgroundColorHint(uint64_t a1)
{
  const void *v1;

  if (a1 && (v1 = pdf_page_copy_background_color_hint(*(_QWORD *)(a1 + 40))) != 0)
    return CFAutorelease(v1);
  else
    return 0;
}

_QWORD *CGPDFPageCopyBackgroundColorHint(_QWORD *result)
{
  if (result)
    return pdf_page_copy_background_color_hint(result[5]);
  return result;
}

double CGPDFPageGetDrawingTransformForRect@<D0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, double *a5@<X8>, CGFloat a6@<D0>, CGFloat a7@<D1>, double a8@<D2>, double a9@<D3>)
{
  if (a1)
    return pdf_page_get_drawing_transform(a5, *(_QWORD *)(a1 + 40), a2, a3, a4, 0, -8.98846567e307, -8.98846567e307, 1.79769313e308, 1.79769313e308, a6, a7, a8, a9);
  *(CGAffineTransform *)a5 = CGAffineTransformIdentity;
  return CGAffineTransformIdentity.tx;
}

uint64_t CGPDFPageGetColorSpace(uint64_t result)
{
  if (result)
    return *(_QWORD *)(*(_QWORD *)(result + 40) + 56);
  return result;
}

CGPDFDictionaryRef CGPDFPageGetDictionary(CGPDFDictionaryRef page)
{
  if (page)
    return *(CGPDFDictionaryRef *)(*((_QWORD *)page + 5) + 16);
  return page;
}

uint64_t CGPDFPageGetThumbnail(uint64_t result)
{
  if (result)
    return pdf_page_get_thumbnail(*(_QWORD *)(result + 40));
  return result;
}

CGImageRef CGPDFPageCopyThumbnail(uint64_t *a1)
{
  uint64_t *v1;
  const void *thumbnail;
  const void *v3;

  if (a1)
  {
    v1 = a1;
    thumbnail = (const void *)pdf_page_get_thumbnail(a1[5]);
    if (thumbnail)
    {
      v3 = thumbnail;
      CFRetain(thumbnail);
      return (CGImageRef)v3;
    }
    a1 = v1;
  }
  return CGPDFPageCreateThumbnail((CGPDFPage *)a1);
}

CGImageRef CGPDFPageCreateThumbnail(CGPDFPage *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  CGColorSpaceRef DeviceRGB;
  CGColorSpace *v13;
  uint64_t v14;
  void *v15;
  CGContext *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  CGImageRef Image;
  _OWORD v23[2];
  CGRect BoxRect;

  BoxRect = CGPDFPageGetBoxRect(a1, kCGPDFMediaBox);
  v5 = ceil(BoxRect.size.width - BoxRect.origin.x);
  v6 = ceil(BoxRect.size.height - BoxRect.origin.y);
  if (v5 <= 0.0 || v6 <= 0.0)
    _CGHandleAssert("CGPDFPageCreateThumbnail", 441, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Documents/CGPDFPage.c", "dblWidth > 0 && dblHeight > 0", "width (%f) and height (%f) must be positive", v2, v3, v4, SLOBYTE(v5));
  v7 = vcvtpd_u64_f64(v5 * 256.0 / v6);
  v8 = 256;
  v9 = vcvtpd_u64_f64(v6 * 256.0 / v5);
  if (v5 / v6 >= 1.0)
  {
    v8 = v9;
    v7 = 256;
  }
  if (v8 >= 0x100)
    v10 = 256;
  else
    v10 = v8;
  if (v7 >= 0x100)
    v11 = 256;
  else
    v11 = v7;
  if (!v11 || !v10)
    _CGHandleAssert("CGPDFPageCreateThumbnail", 464, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Documents/CGPDFPage.c", "width > 0 && height > 0", "width (%lu) and height (%lu) must be positive2", v2, v3, v4, v11);
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  v13 = DeviceRGB;
  if (DeviceRGB)
    v14 = *(_QWORD *)(*((_QWORD *)DeviceRGB + 3) + 40) + 1;
  else
    v14 = 1;
  v15 = malloc_type_malloc(v11 * v10 * v14, 0xCA1D17BBuLL);
  memset(v15, 255, v11 * v10 * v14);
  v16 = CGBitmapContextCreateWithData(v15, v11, v10, 8uLL, v14 * v11, v13, 5u, 0, 0);
  CGColorSpaceRelease(v13);
  CGContextScaleCTM(v16, (double)v11 / v5, (double)v11 / v5);
  memset(v23, 0, sizeof(v23));
  CGContextDrawPDFPageWithDrawingCallbacks((uint64_t)v16, (unint64_t)a1, (uint64_t)v23, 0, v17, v18, v19, v20);
  Image = CGBitmapContextCreateImage(v16);
  if (v16)
    CFRelease(v16);
  return Image;
}

void CGPDFPagePurgeResources(uint64_t a1)
{
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  const __CFDictionary *v4;

  if (a1)
  {
    v1 = *(_QWORD *)(a1 + 40);
    v2 = (os_unfair_lock_s *)(v1 + 32);
    os_unfair_lock_lock((os_unfair_lock_t)(v1 + 32));
    v3 = *(_QWORD *)(v1 + 24);
    os_unfair_lock_unlock(v2);
    os_unfair_lock_lock((os_unfair_lock_t)(v3 + 80));
    v4 = *(const __CFDictionary **)(v3 + 40);
    if (v4)
    {
      CFDictionaryApplyFunction(v4, (CFDictionaryApplierFunction)call_dict_block, &__block_literal_global_7353);
      CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(v3 + 40));
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 80));
  }
}

CGPDFObjectRef CGPDFPageGetContents(CGPDFObjectRef result)
{
  uint64_t v1;
  CGPDFObjectRef value;

  if (result)
  {
    v1 = *((_QWORD *)result + 5);
    value = 0;
    if (CGPDFDictionaryGetObject(*(CGPDFDictionaryRef *)(v1 + 16), "Contents", &value))
      return value;
    else
      return 0;
  }
  return result;
}

void CGPDFPageSetExtraContentStream(uint64_t a1, const void *a2, const void *a3)
{
  pthread_mutex_t *v6;
  const void *v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  const void *v10;
  const void *v11;
  const void *v12;

  if (a1)
  {
    v6 = (pthread_mutex_t *)(a1 + 216);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 216));
    v7 = *(const void **)(a1 + 368);
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(a1 + 368) = 0;
    }
    if (a3 && *(const void **)(a1 + 16) != a3)
    {
      CFRetain(a3);
      *(_QWORD *)(a1 + 368) = a3;
    }
    v8 = *(_QWORD *)(a1 + 40);
    v9 = (os_unfair_lock_s *)(v8 + 88);
    os_unfair_lock_lock((os_unfair_lock_t)(v8 + 88));
    v10 = *(const void **)(v8 + 40);
    if (v10 != a2)
    {
      if (v10)
        CFRelease(v10);
      if (a2)
        CFRetain(a2);
      *(_QWORD *)(v8 + 40) = a2;
      os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 88));
      v9 = (os_unfair_lock_s *)(v8 + 32);
      os_unfair_lock_lock((os_unfair_lock_t)(v8 + 32));
      v11 = *(const void **)(v8 + 24);
      if (v11)
        CFRelease(v11);
      *(_QWORD *)(v8 + 24) = CGPDFResourcesCreateWithPage(v8, *(unsigned __int8 *)(v8 + 48));
    }
    os_unfair_lock_unlock(v9);
    pthread_mutex_unlock(v6);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 304));
    v12 = *(const void **)(a1 + 312);
    if (v12)
      CFRelease(v12);
    *(_QWORD *)(a1 + 312) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 304));
  }
}

void CGContextDrawPDFDocument(CGContextRef c, CGRect rect, CGPDFDocumentRef document, int page)
{
  double height;
  double width;
  CGFloat y;
  CGFloat x;
  CGPDFPageRef v9;
  CGPDFPage *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  _BOOL4 v28;
  double v29;
  double v30;
  uint64_t v31;
  float64x2_t v32;
  double v33;
  double v34;
  double recta;
  double rectb;
  _OWORD v37[2];
  CGRect v38;
  CGRect v39;
  CGRect v40;
  CGRect BoxRect;
  CGRect v42;
  CGRect v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;

  if (!c)
    return;
  if (!document)
    return;
  height = rect.size.height;
  width = rect.size.width;
  y = rect.origin.y;
  x = rect.origin.x;
  v9 = CGPDFDocumentGetPage(document, page);
  if (!v9)
    return;
  v10 = v9;
  CGContextSaveGState(c);
  v17 = height < 0.0 || width < 0.0;
  if (v17)
  {
    v38.origin.x = x;
    v38.origin.y = y;
    v38.size.width = width;
    v38.size.height = height;
    *(_QWORD *)&recta = (unint64_t)CGRectStandardize(v38);
    v39.origin.x = x;
    v39.origin.y = y;
    v39.size.width = width;
    v39.size.height = height;
    v40 = CGRectStandardize(v39);
  }
  else
  {
    recta = x;
    v40.origin.y = y;
  }
  if (*((_DWORD *)c + 4) == 1129601108)
    *(float64x2_t *)(*((_QWORD *)c + 12) + 56) = vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)(*((_QWORD *)c + 12) + 56), *(float64x2_t *)(*((_QWORD *)c + 12) + 24), recta), *(float64x2_t *)(*((_QWORD *)c + 12) + 40), v40.origin.y);
  else
    handle_invalid_context((char)"CGContextTranslateCTM", (uint64_t)c, v11, v12, v13, v14, v15, v16);
  BoxRect = CGPDFPageGetBoxRect(v10, kCGPDFMediaBox);
  v24 = BoxRect.origin.x;
  rectb = BoxRect.origin.y;
  v25 = BoxRect.size.width;
  v26 = BoxRect.size.height;
  v27 = width;
  if (v17)
  {
    v42.origin.x = x;
    v42.origin.y = y;
    v42.size.width = width;
    v42.size.height = height;
    *(CGRect *)(&v27 - 2) = CGRectStandardize(v42);
  }
  v33 = v27;
  v28 = v26 < 0.0 || v25 < 0.0;
  v29 = v25;
  if (v28)
  {
    v43.origin.x = v24;
    v43.origin.y = rectb;
    v43.size.width = v25;
    v43.size.height = v26;
    v44 = CGRectStandardize(v43);
    v29 = v44.size.width;
  }
  if (v17)
  {
    v45.origin.x = x;
    v45.origin.y = y;
    v45.size.width = width;
    v45.size.height = height;
    v46 = CGRectStandardize(v45);
    height = v46.size.height;
  }
  v30 = v26;
  if (v28)
  {
    v47.origin.x = v24;
    v47.origin.y = rectb;
    v47.size.width = v25;
    v47.size.height = v26;
    *(CGRect *)(&v30 - 3) = CGRectStandardize(v47);
  }
  if (*((_DWORD *)c + 4) != 1129601108)
  {
    handle_invalid_context((char)"CGContextScaleCTM", (uint64_t)c, v18, v19, v20, v21, v22, v23);
    if (v28)
      goto LABEL_26;
LABEL_28:
    v34 = -v24;
    goto LABEL_29;
  }
  v31 = *((_QWORD *)c + 12);
  v32 = vmulq_n_f64(*(float64x2_t *)(v31 + 40), height / v30);
  *(float64x2_t *)(v31 + 24) = vmulq_n_f64(*(float64x2_t *)(v31 + 24), v33 / v29);
  *(float64x2_t *)(v31 + 40) = v32;
  if (!v28)
    goto LABEL_28;
LABEL_26:
  v48.origin.x = v24;
  v48.origin.y = rectb;
  v48.size.width = v25;
  v48.size.height = v26;
  v34 = -COERCE_DOUBLE(CGRectStandardize(v48));
  v49.origin.x = v24;
  v49.origin.y = rectb;
  v49.size.width = v25;
  v49.size.height = v26;
  v50 = CGRectStandardize(v49);
  rectb = v50.origin.y;
LABEL_29:
  if (*((_DWORD *)c + 4) == 1129601108)
    *(float64x2_t *)(*((_QWORD *)c + 12) + 56) = vmlsq_lane_f64(vmlaq_n_f64(*(float64x2_t *)(*((_QWORD *)c + 12) + 56), *(float64x2_t *)(*((_QWORD *)c + 12) + 24), v34), *(float64x2_t *)(*((_QWORD *)c + 12) + 40), rectb, 0);
  else
    handle_invalid_context((char)"CGContextTranslateCTM", (uint64_t)c, v18, v19, v20, v21, v22, v23);
  memset(v37, 0, sizeof(v37));
  CGContextDrawPDFPageWithDrawingCallbacks((uint64_t)c, (unint64_t)v10, (uint64_t)v37, 0, v20, v21, v22, v23);
  CGContextRestoreGState(c);
}

void CGContextDrawPDFPageInRect(CGContext *a1, uint64_t *a2, CGPDFBox a3, int a4, int a5, CGFloat a6, CGFloat a7, double a8, double a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CGAffineTransform v16;
  CGAffineTransform v17;
  CGRect BoxRect;

  if (a2)
    pdf_page_get_drawing_transform(&v17.a, a2[5], a3, a4, a5, 1, -8.98846567e307, -8.98846567e307, 1.79769313e308, 1.79769313e308, a6, a7, a8, a9);
  else
    v17 = CGAffineTransformIdentity;
  CGContextSaveGState(a1);
  v16 = v17;
  CGContextConcatCTM(a1, &v16);
  BoxRect = CGPDFPageGetBoxRect((CGPDFPageRef)a2, a3);
  CGContextClipToRect(a1, BoxRect);
  memset(&v16, 0, 32);
  CGContextDrawPDFPageWithDrawingCallbacks((uint64_t)a1, (unint64_t)a2, (uint64_t)&v16, 0, v12, v13, v14, v15);
  CGContextRestoreGState(a1);
}

void CGContextDrawPDFPageWithOptions(CGContext *a1, uint64_t *a2, CGPDFBox a3, CFDictionaryRef theDict, double a5, double a6)
{
  int v12;
  int v13;
  int v14;
  int v15;
  unint64_t v16;
  int Boolean;
  int v18;
  int v19;
  int v20;
  void *v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGColorRef GenericGray;
  const __CFDictionary *Value;
  CGColor *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  CGAffineTransform transform;
  CGAffineTransform v44;
  int v45;
  CGRect ClipBoundingBox;
  CGRect BoxRect;

  LOBYTE(v44.a) = 0;
  v12 = CGCFDictionaryGetBoolean(theDict, CFSTR("kCGDrawPDFPageAllowUpscaleOptionKey"), (BOOL *)&v44) ^ 1;
  if (LOBYTE(v44.a))
    v13 = v12;
  else
    v13 = 1;
  LOBYTE(v44.a) = 0;
  v14 = CGCFDictionaryGetBoolean(theDict, CFSTR("kCGDrawPDFPageMaintainAspectRatioOptionKey"), (BOOL *)&v44) ^ 1;
  if (LOBYTE(v44.a))
    v15 = 1;
  else
    v15 = v14;
  v45 = 0;
  if (CGCFDictionaryGetInteger(theDict, CFSTR("kCGDrawPDFPageAdditionalRotationOptionKey"), &v45))
  {
    HIDWORD(v16) = -1527099483 * v45 + 47721858;
    LODWORD(v16) = HIDWORD(v16);
    if ((v16 >> 1) >= 0x2D82D83)
    {
      pdf_error("%s: value of CGContextDrawPDFPageOptionAdditionalRotation must be a multiple of 90", "void CGContextDrawPDFPageWithOptions(CGContextRef _Nonnull, CGPDFPageRef _Nonnull, CGPDFBox, CGSize, CFDictionaryRef _Nonnull)");
      return;
    }
  }
  LOBYTE(v44.a) = 0;
  Boolean = CGCFDictionaryGetBoolean(theDict, CFSTR("kCGDrawPDFPageDrawAnnotationsOptionKey"), (BOOL *)&v44);
  if (LOBYTE(v44.a))
    v18 = Boolean;
  else
    v18 = 0;
  LOBYTE(v44.a) = 0;
  v19 = CGCFDictionaryGetBoolean(theDict, CFSTR("kCGDrawPDFPageIsThumbnailOptionKey"), (BOOL *)&v44);
  if (LOBYTE(v44.a))
    v20 = v19;
  else
    v20 = 0;
  v21 = (void *)-[__CFDictionary valueForKey:](theDict, "valueForKey:", CFSTR("kCGDrawPDFPageSourceRectOptionKey"));
  if (v21)
  {
    objc_msgSend(v21, "rectValue");
  }
  else
  {
    v23 = -8.98846567e307;
    v25 = 1.79769313e308;
    v24 = 1.79769313e308;
    v22 = -8.98846567e307;
  }
  memset(&v44, 0, sizeof(v44));
  pdf_page_get_drawing_transform(&v44.a, a2[5], a3, v45, v15, v13, v22, v23, v24, v25, 0.0, 0.0, a5, a6);
  LOBYTE(transform.a) = 0;
  if (CGCFDictionaryGetBoolean(theDict, CFSTR("kCGDrawPDFPageWhiteBackgroundOptionKey"), (BOOL *)&transform)&& LOBYTE(transform.a))
  {
    GenericGray = CGColorCreateGenericGray(1.0, 1.0);
    goto LABEL_25;
  }
  if (theDict)
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("kCGDrawPDFPageBackgroundColorOptionKey"));
    if (Value)
    {
      GenericGray = CGColorCreateWithPropertyList(Value);
LABEL_25:
      v28 = GenericGray;
      if (GenericGray)
      {
        CGContextSaveGState(a1);
        CGContextSetFillColorWithColor(a1, v28);
        ClipBoundingBox = CGContextGetClipBoundingBox(a1);
        CGContextFillRect(a1, ClipBoundingBox);
        CGContextRestoreGState(a1);
        CFRelease(v28);
      }
    }
  }
  CGContextSaveGState(a1);
  transform = v44;
  CGContextConcatCTM(a1, &transform);
  BoxRect = CGPDFPageGetBoxRect((CGPDFPageRef)a2, a3);
  CGContextClipToRect(a1, BoxRect);
  CGContextSetAllowsAntialiasing(a1, 1);
  CGContextSetShouldAntialias(a1, 1);
  CGContextSetTextGreekingThreshold((uint64_t)a1, 0.0, v29, v30, v31, v32, v33, v34, v35);
  CGContextSetInterpolationQuality(a1, kCGInterpolationHigh);
  if (v20)
    CGContextSetLineWidthThreshold((uint64_t)a1, 0.0, v36, v37, v38, v39, v40, v41, v42);
  if (v18)
  {
    CGContextDrawPDFPageWithAnnotations(a1, (unint64_t)a2, 0, v38, v39, v40, v41, v42);
  }
  else
  {
    memset(&transform, 0, 32);
    CGContextDrawPDFPageWithDrawingCallbacks((uint64_t)a1, (unint64_t)a2, (uint64_t)&transform, 0, v39, v40, v41, v42);
  }
  CGContextRestoreGState(a1);
}

void CGContextDrawPDFPageWithAnnotations(CGContext *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __CFArray *Annotations;
  CFIndex Count;
  CFIndex v13;
  CFIndex i;
  const void *ValueAtIndex;
  _OWORD v16[2];

  if (a1 && a2)
  {
    memset(v16, 0, sizeof(v16));
    CGContextDrawPDFPageWithDrawingCallbacks((uint64_t)a1, a2, (uint64_t)v16, 0, a5, a6, a7, a8);
    os_unfair_lock_lock((os_unfair_lock_t)(a2 + 336));
    Annotations = *(__CFArray **)(a2 + 344);
    if (!Annotations)
    {
      Annotations = LoadAnnotations(a2);
      *(_QWORD *)(a2 + 344) = Annotations;
    }
    Count = CFArrayGetCount(Annotations);
    if (Count)
    {
      v13 = Count;
      for (i = 0; i != v13; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 344), i);
        CGContextSaveGState(a1);
        if (a3)
          (*(void (**)(uint64_t, CGContext *, unint64_t, const void *))(a3 + 16))(a3, a1, a2, ValueAtIndex);
        else
          CGContextDrawPDFAnnotation(a1, (uint64_t)ValueAtIndex);
        CGContextRestoreGState(a1);
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 336));
  }
}

__CFArray *LoadAnnotations(uint64_t a1)
{
  __CFArray *Mutable;
  uint64_t v3;
  size_t i;
  const void *v5;
  uint64_t v7;
  CGPDFArrayRef value;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  value = 0;
  if (CGPDFDictionaryGetArray(*(CGPDFDictionaryRef *)(*(_QWORD *)(a1 + 40) + 16), "Annots", &value))
  {
    if (value)
    {
      v3 = *((_QWORD *)value + 2);
      if (v3)
      {
        for (i = 0; i != v3; ++i)
        {
          v7 = 0;
          if (CGPDFArrayGetDictionary(value, i, (CGPDFDictionaryRef *)&v7))
          {
            v5 = (const void *)CGPDFAnnotationCreateWithCGPDFDictionary(v7);
            CFArrayAppendValue(Mutable, v5);
            CFRelease(v5);
          }
        }
      }
    }
  }
  return Mutable;
}

void CGContextDrawPDFPageWithProgressCallback(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD v8[2];
  __int128 v9;

  v8[0] = 0;
  v9 = 0u;
  v8[1] = a3;
  CGContextDrawPDFPageWithDrawingCallbacks(a1, a2, (uint64_t)v8, a4, a5, a6, a7, a8);
}

void CGContextDrawPDFPageWithContentTypes(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD v8[4];

  v8[0] = 1;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = a3;
  CGContextDrawPDFPageWithDrawingCallbacks(a1, a2, (uint64_t)v8, 0, a5, a6, a7, a8);
}

const void *CGPDFPageGetProperty(uint64_t a1, const void *a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 72)) != 0)
    return CGPropertiesGetProperty(v2, a2);
  else
    return 0;
}

void CGPDFPageSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  _DWORD *v8;

  if (a1 && a2 && a3)
  {
    v5 = *(_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(v5 + 72);
    v6 = (unint64_t *)(v5 + 72);
    if (!v7)
    {
      v8 = CGPropertiesCreate();
      while (!__ldxr(v6))
      {
        if (!__stxr((unint64_t)v8, v6))
          goto LABEL_11;
      }
      __clrex();
      CGPropertiesRelease((uint64_t)v8);
    }
LABEL_11:
    CGPropertiesSetProperty(*v6, a2, a3);
  }
}

void CGPDFPageRemoveProperty(uint64_t a1, const void *a2)
{
  uint64_t v2;

  if (a1 && a2)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 72);
    if (v2)
      CGPropertiesRemoveProperty(v2, a2);
  }
}

CGPDFContentStreamRef *CGPDFPageCopyTextString(CGPDFContentStreamRef *result)
{
  CGPDFContentStreamRef *v1;
  CGPDFContentStreamRef *v2;

  if (result)
  {
    v1 = (CGPDFContentStreamRef *)CGPDFTextExtractorCreateWithPage((uint64_t)result[5], 0);
    v2 = CGPDFTextExtractorCopyTextString(v1);
    CGPDFTextExtractorRelease(v1);
    return v2;
  }
  return result;
}

CGPDFContentStreamRef *CGPDFPageCopyTextStringWithGlyphs(CGPDFContentStreamRef *result)
{
  CGPDFContentStreamRef *v1;
  CGPDFContentStreamRef *v2;

  if (result)
  {
    v1 = (CGPDFContentStreamRef *)CGPDFTextExtractorCreateWithPage((uint64_t)result[5], 1);
    v2 = CGPDFTextExtractorCopyTextString(v1);
    CGPDFTextExtractorRelease(v1);
    return v2;
  }
  return result;
}

uint64_t CGPDFPagePrint(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  FILE *v3;
  int v5;
  uint64_t v6;
  CGPDFArray *v7;
  uint64_t v8;
  size_t i;
  CGPDFStreamRef v10;
  CGPDFObjectRef value;

  if (result)
  {
    v2 = *(_QWORD *)(result + 40);
    v10 = 0;
    v3 = (FILE *)(a2 ? a2 : *MEMORY[0x1E0C80C10]);
    fprintf(v3, "Page %zu:\n", *(_QWORD *)(v2 + 8));
    CGPDFDictionaryPrintWithIndent(*(_QWORD *)(v2 + 16), v3, 0);
    fputc(10, v3);
    value = 0;
    result = CGPDFDictionaryGetObject(*(CGPDFDictionaryRef *)(v2 + 16), "Contents", &value);
    if ((_DWORD)result && value != 0)
    {
      v5 = *((_DWORD *)value + 2);
      if (v5 == 7)
      {
        v7 = (CGPDFArray *)*((_QWORD *)value + 4);
        if (v7)
        {
          v8 = *((_QWORD *)v7 + 2);
          if (v8)
          {
            for (i = 0; i != v8; ++i)
            {
              result = CGPDFArrayGetStream(v7, i, &v10);
              if ((_DWORD)result)
              {
                fprintf(v3, "Stream %zu:\n", i);
                result = stream_print((uint64_t)v10, v3, 0, 1);
              }
            }
          }
        }
      }
      else if (v5 == 9)
      {
        v6 = *((_QWORD *)value + 4);
        fwrite("Stream 1:\n", 0xAuLL, 1uLL, v3);
        return stream_print(v6, v3, 0, 1);
      }
    }
  }
  return result;
}

BOOL CGPDFPageContainsWideGamutContent(uint64_t a1)
{
  int v2;
  uint64_t v3;
  CGPDFDictionaryRef v4;
  __CFSet *Mutable;
  int v6;
  CGPDFDictionaryRef v7;
  CGPDFDictionary *v8;
  CGPDFDictionaryRef v10[2];
  CGPDFDictionaryRef value;

  if (!a1)
    return 0;
  v2 = *(_DWORD *)(a1 + 284);
  if (v2)
    return v2 == 1;
  v4 = *(CGPDFDictionaryRef *)(*(_QWORD *)(a1 + 40) + 16);
  value = 0;
  Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
  while (!CGPDFDictionaryGetDictionary(v4, "Resources", &value))
  {
    v10[0] = 0;
    CFSetAddValue(Mutable, v4);
    if (!CGPDFDictionaryGetDictionary(v4, "Parent", v10) || CFSetContainsValue(Mutable, v10[0]))
      break;
    v4 = v10[0];
  }
  CFRelease(Mutable);
  v10[0] = 0;
  v10[1] = 0;
  if (value && resourceDictionaryContainsWideGamutContent(v10, value))
  {
    v6 = 1;
    v3 = 1;
  }
  else
  {
    v3 = 0;
    v6 = 2;
  }
  *(_DWORD *)(a1 + 284) = v6;
  v7 = v10[0];
  if (v10[0])
  {
    do
    {
      v8 = (CGPDFDictionary *)*((_QWORD *)v7 + 1);
      free(v7);
      v7 = v8;
    }
    while (v8);
  }
  return v3;
}

BOOL resourceDictionaryContainsWideGamutContent(_BYTE *a1, CGPDFDictionaryRef dict)
{
  _BOOL8 result;
  CGPDFDictionaryRef dicta;
  CGPDFDictionaryRef value;

  result = 1;
  if (!a1[8])
  {
    value = 0;
    if (!CGPDFDictionaryGetDictionary(dict, "ColorSpace", &value)
      || (CGPDFDictionaryApplyFunction(value, (CGPDFDictionaryApplierFunction)wideGamutColorSpaceDetector, a1), !a1[8]))
    {
      dicta = 0;
      if (!CGPDFDictionaryGetDictionary(dict, "XObject", &dicta))
        return 0;
      CGPDFDictionaryApplyFunction(dicta, (CGPDFDictionaryApplierFunction)wideGamutImageDetector, a1);
      if (!a1[8])
        return 0;
    }
  }
  return result;
}

void wideGamutColorSpaceDetector(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3;
  CGPDFArray *v5;
  CGPDFStreamRef v6;
  char *value;

  if (*(_BYTE *)(a3 + 8))
    v3 = 1;
  else
    v3 = a2 == 0;
  if (!v3 && *(_DWORD *)(a2 + 8) == 7)
  {
    v5 = *(CGPDFArray **)(a2 + 32);
    value = 0;
    if (CGPDFArrayGetName(v5, 0, (const char **)&value) && !strcmp(value, "ICCBased"))
    {
      v6 = 0;
      if (CGPDFArrayGetStream(v5, 1uLL, &v6) && isStreamWideGamutICCProfile(v6))
        *(_BYTE *)(a3 + 8) = 1;
    }
  }
}

void wideGamutImageDetector(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3;
  CGPDFStream *v4;
  CGPDFDictionary *v5;
  char *v7;
  CGPDFDictionaryRef v8;
  CGPDFDictionaryRef *v9;
  CGPDFDictionaryRef *v10;
  CGPDFDictionaryRef *v11;
  CFDataRef v12;
  CFDataRef v13;
  const void *v14;
  CGImage *v15;
  CGColorSpaceRef ColorSpace;
  int v17;
  CGPDFStreamRef v18;
  CGPDFDictionaryRef dict;
  char *__s1;
  char *value;

  if (*(_BYTE *)(a3 + 8))
    v3 = 1;
  else
    v3 = a2 == 0;
  if (v3)
    return;
  if (*(_DWORD *)(a2 + 8) != 9)
    return;
  v4 = *(CGPDFStream **)(a2 + 32);
  if (!v4)
    return;
  v5 = (CGPDFDictionary *)*((_QWORD *)v4 + 6);
  if (!v5)
    return;
  value = 0;
  if (!CGPDFDictionaryGetName(v5, "Subtype", (const char **)&value))
    return;
  v7 = value;
  if (!strcmp(value, "PS"))
    return;
  if (strcmp(v7, "Image"))
  {
    if (strcmp(v7, "Form"))
      return;
    __s1 = 0;
    if (CGPDFDictionaryGetName(v5, "Subtype2", (const char **)&__s1) && !strcmp(__s1, "PS"))
      return;
    dict = 0;
    CGPDFDictionaryGetDictionary(v5, "Resources", &dict);
    v8 = dict;
    if (!dict)
      return;
    v9 = *(CGPDFDictionaryRef **)a3;
    if (*(_QWORD *)a3)
    {
      v10 = *(CGPDFDictionaryRef **)a3;
      while (*v10 != dict)
      {
        v10 = (CGPDFDictionaryRef *)v10[1];
        if (!v10)
          goto LABEL_19;
      }
      return;
    }
LABEL_19:
    v11 = (CGPDFDictionaryRef *)malloc_type_malloc(0x10uLL, 0x2062DE7BuLL);
    if (v11)
    {
      *v11 = v8;
      v11[1] = (CGPDFDictionaryRef)v9;
      v9 = v11;
    }
    *(_QWORD *)a3 = v9;
    if (!resourceDictionaryContainsWideGamutContent(a3, dict))
      return;
LABEL_38:
    *(_BYTE *)(a3 + 8) = 1;
    return;
  }
  __s1 = 0;
  CGPDFDictionaryGetArray(v5, "ColorSpace", (CGPDFArrayRef *)&__s1);
  if (__s1)
  {
    dict = 0;
    if (CGPDFArrayGetName((CGPDFArrayRef)__s1, 0, (const char **)&dict) && !strcmp((const char *)dict, "ICCBased"))
    {
      v18 = 0;
      if (CGPDFArrayGetStream((CGPDFArrayRef)__s1, 1uLL, &v18) && isStreamWideGamutICCProfile(v18))
        goto LABEL_38;
    }
  }
  if (canFilterEmbedICCProfiles(v5))
  {
    LODWORD(dict) = 0;
    v12 = CGPDFStreamCopyData(v4, (CGPDFDataFormat *)&dict);
    if (v12)
    {
      v13 = v12;
      if (wideGamutImageDetector_predicate != -1)
        dispatch_once(&wideGamutImageDetector_predicate, &__block_literal_global_53);
      v14 = (const void *)wideGamutImageDetector_f(v13, 0);
      CFRelease(v13);
      if (v14)
      {
        if (wideGamutImageDetector_predicate_56 != -1)
          dispatch_once(&wideGamutImageDetector_predicate_56, &__block_literal_global_58);
        v15 = (CGImage *)wideGamutImageDetector_f_55(v14, 0, 0);
        CFRelease(v14);
        if (v15)
        {
          ColorSpace = CGImageGetColorSpace(v15);
          if (!ColorSpace)
          {
            CFRelease(v15);
            return;
          }
          v17 = *(unsigned __int8 *)(*((_QWORD *)ColorSpace + 3) + 14);
          CFRelease(v15);
          if (v17)
            goto LABEL_38;
        }
      }
    }
  }
}

BOOL isStreamWideGamutICCProfile(CGPDFStream *a1)
{
  CFDataRef v1;
  _BOOL8 v2;
  CGColorSpace *Retained;
  CGPDFDataFormat format;

  format = CGPDFDataFormatRaw;
  v1 = CGPDFStreamCopyData(a1, &format);
  v2 = (_BOOL8)v1;
  if (v1)
  {
    Retained = (CGColorSpace *)CGColorSpaceFromICCDataCacheGetRetained(v1);
    CFRelease((CFTypeRef)v2);
    if (Retained)
    {
      v2 = *(_BYTE *)(*((_QWORD *)Retained + 3) + 14) != 0;
      CGColorSpaceRelease(Retained);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t canFilterEmbedICCProfiles(CGPDFDictionary *a1)
{
  char *v2;
  uint64_t result;
  uint64_t v4;
  size_t v5;
  char *v6;
  CGPDFArrayRef array;
  char *value;

  value = 0;
  if (CGPDFDictionaryGetName(a1, "Filter", (const char **)&value))
  {
    v2 = value;
    if (strcmp(value, "DCTDecode"))
      return strcmp(v2, "JPXDecode") == 0;
  }
  else
  {
    array = 0;
    result = CGPDFDictionaryGetArray(a1, "Filter", &array);
    if (!(_DWORD)result)
      return result;
    if (!array)
      return 0;
    v4 = *((_QWORD *)array + 2);
    if (!v4)
      return 0;
    v5 = 0;
    while (1)
    {
      if (CGPDFArrayGetName(array, v5, (const char **)&value))
      {
        v6 = value;
        if (!strcmp(value, "DCTDecode") || !strcmp(v6, "JPXDecode"))
          break;
      }
      if (v4 == ++v5)
        return 0;
    }
  }
  return 1;
}

void *__wideGamutImageDetector_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (CGLibraryLoadImageIODYLD_once != -1)
    dispatch_once(&CGLibraryLoadImageIODYLD_once, &__block_literal_global_4_19707);
  if (!CGLibraryLoadImageIODYLD_handle)
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 28, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "handle != NULL", "Handle for \"%s\" failed to load", a6, a7, a8, (char)"CGImageSourceCreateImageAtIndex");
  result = dlsym((void *)CGLibraryLoadImageIODYLD_handle, "CGImageSourceCreateImageAtIndex");
  if (!result)
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 30, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "ptr != NULL", "Could not find symbol \"%s\" in library handle %p", v9, v10, v11, (char)"CGImageSourceCreateImageAtIndex");
  wideGamutImageDetector_f_55 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))result;
  return result;
}

void *__wideGamutImageDetector_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (CGLibraryLoadImageIODYLD_once != -1)
    dispatch_once(&CGLibraryLoadImageIODYLD_once, &__block_literal_global_4_19707);
  if (!CGLibraryLoadImageIODYLD_handle)
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 28, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "handle != NULL", "Handle for \"%s\" failed to load", a6, a7, a8, (char)"CGImageSourceCreateWithData");
  result = dlsym((void *)CGLibraryLoadImageIODYLD_handle, "CGImageSourceCreateWithData");
  if (!result)
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 30, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "ptr != NULL", "Could not find symbol \"%s\" in library handle %p", v9, v10, v11, (char)"CGImageSourceCreateWithData");
  wideGamutImageDetector_f = (uint64_t (*)(_QWORD, _QWORD))result;
  return result;
}

uint64_t CGPDFPageCreateWithImage(uint64_t a1, uint64_t a2, int a3, const __CFDictionary *a4)
{
  unint64_t v5;
  uint64_t v6;
  CGSize v9;
  __CFData *Mutable;
  CGDataConsumer *v11;
  __CFDictionary *v12;
  __CFDictionary *v13;
  const __CFString *v14;
  CGContext *v15;
  double v16;
  double v17;
  int v18;
  int v19;
  int v20;
  double v21;
  double v22;
  int Boolean;
  int v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  CGDataProvider *v33;
  CGPDFDocumentRef v34;
  CGAffineTransform transform;
  double v37;
  CGRect mediaBox;
  BOOL v39;
  CGRect v40;

  HIDWORD(v5) = -1527099483 * a3 + 47721858;
  LODWORD(v5) = HIDWORD(v5);
  if ((v5 >> 1) < 0x2D82D83)
  {
    if (a2)
    {
      v9 = *(CGSize *)(a2 + 16);
      mediaBox.origin = *(CGPoint *)a2;
      mediaBox.size = v9;
    }
    else
    {
      mediaBox.origin.x = 0.0;
      mediaBox.origin.y = 0.0;
      mediaBox.size = (CGSize)xmmword_1850049B0;
    }
    Mutable = CFDataCreateMutable(0, 0);
    v11 = CGDataConsumerCreateWithCFData(Mutable);
    v12 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v13 = v12;
    if (v12)
      CFDictionarySetValue(v12, CFSTR("kCGPDFContextShouldOutputAllImagesAsJPEG"), (const void *)*MEMORY[0x1E0C9AE50]);
    v37 = 0.0;
    if (a4)
    {
      v14 = CFSTR("kCGImageDestinationLossyCompressionQuality");
      if (CFDictionaryContainsKey(a4, CFSTR("kCGImageDestinationLossyCompressionQuality"))
        || (v14 = CFSTR("kCGPDFContextJPEGCompressionQuality"),
            CFDictionaryContainsKey(a4, CFSTR("kCGPDFContextJPEGCompressionQuality"))))
      {
        CGCFDictionaryGetFloat(a4, v14, &v37);
        CGCFDictionarySetFloat(v13, CFSTR("kCGPDFContextJPEGCompressionQuality"), v37);
      }
    }
    v15 = CGPDFContextCreate(v11, &mediaBox, v13);
    if (v11)
      CFRelease(v11);
    CFRelease(v13);
    if (a1)
    {
      v16 = (double)*(unint64_t *)(a1 + 40);
      v17 = (double)*(unint64_t *)(a1 + 48);
      v18 = *(unsigned __int8 *)(a1 + 38);
      if ((v18 - 9) <= 0xFFFFFFF7)
      {
        pdf_error("Invalid image orientation, assuming 1.");
        v18 = 1;
      }
    }
    else
    {
      v18 = 1;
      v16 = 0.0;
      v17 = 0.0;
    }
    v19 = a3 % 360;
    if (a3 % 360 < 0)
      LOWORD(v19) = a3 % 360 + 360;
    v20 = dword_184E3BE98[4 * (v18 - 1) + (unsigned __int16)v19 / 0x5Au];
    if ((v20 - 5) >= 4)
      v21 = v16;
    else
      v21 = v17;
    if ((v20 - 5) >= 4)
      v22 = v17;
    else
      v22 = v16;
    v39 = 0;
    Boolean = CGCFDictionaryGetBoolean(a4, CFSTR("kCGPDFPageCreateWithImageAllowUpscale"), &v39);
    if (v39)
      v24 = Boolean;
    else
      v24 = 0;
    v25 = mediaBox.size.width / v21;
    if (mediaBox.size.width / v21 >= mediaBox.size.height / v22)
      v25 = mediaBox.size.height / v22;
    if (v25 <= 1.0)
      v24 = 1;
    if (v24)
      v26 = v25;
    else
      v26 = 1.0;
    CGPDFContextBeginPage(v15, 0);
    CGContextTranslateCTM(v15, (mediaBox.size.width - v21 * v26) * 0.5, (mediaBox.size.height - v22 * v26) * 0.5);
    CGContextScaleCTM(v15, v26, v26);
    CGImageGetTransformForOrientationAndSize(v20, v27, v28, v29, v30, v31, v32, (uint64_t)&transform, v16, v17);
    CGContextConcatCTM(v15, &transform);
    v40.origin.x = 0.0;
    v40.origin.y = 0.0;
    v40.size.width = v16;
    v40.size.height = v17;
    CGContextDrawImage(v15, v40, (CGImageRef)a1);
    CGPDFContextEndPage(v15);
    CGPDFContextClose(v15);
    if (v15)
      CFRelease(v15);
    v33 = CGDataProviderCreateWithCFData(Mutable);
    CFRelease(Mutable);
    v34 = CGPDFDocumentCreateWithProvider(v33);
    CGDataProviderRelease(v33);
    v6 = CGPDFDocumentCopyPage((uint64_t)v34, 1uLL);
    if (v34)
      CFRelease(v34);
  }
  else
  {
    pdf_error("%s: Invalid rotation parameter (%d). It must be a multiple of 90.", "CGPDFPageCreateWithImage", a3);
    return 0;
  }
  return v6;
}

uint64_t CGPDFPageCreate(CFTypeRef *a1, unint64_t a2)
{
  return CGPDFPageCreate2(a1, a2, 0);
}

void CGPDFPageSetBoxRect(uint64_t a1, unsigned int a2, CGFloat a3, CGFloat a4, CGFloat a5, double a6)
{
  uint64_t v7;
  double *v12;
  const char *v13;
  char *v14;
  os_unfair_lock_s *v15;
  __CFArray *PDFRect;

  if (a1 && a2 <= 4)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
    {
      v12 = (double *)(a1 + 32 * a2);
      v12[7] = a3;
      v12[8] = a4;
      v12[9] = a5;
      v12[10] = a6;
      v13 = off_1E162F628[a2];
      v14 = *(char **)(v7 + 216);
      v15 = (os_unfair_lock_s *)(v7 + 212);
      os_unfair_lock_lock((os_unfair_lock_t)(v7 + 212));
      PDFRect = CGCFArrayCreatePDFRect(a3, a4, a5, a6);
      CGPDFAppenderMutateDictionaryValue(v14, *(uint64_t **)(*(_QWORD *)(a1 + 40) + 16), v13, PDFRect, 0);
      CFRelease(PDFRect);
      os_unfair_lock_unlock(v15);
    }
  }
}

void CGPDFPageSetRotationAngle(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unsigned int v7;
  char *v8;
  os_unfair_lock_s *v9;
  CFNumberRef v10;
  unsigned int valuePtr;
  uint64_t v12;
  uint64_t v13;

  if (a1)
  {
    HIDWORD(v4) = -1527099483 * a2;
    LODWORD(v4) = -1527099483 * a2;
    if ((v4 >> 1) <= 0x2D82D82 && (a2 & 0x80000000) == 0)
    {
      v12 = v2;
      v13 = v3;
      v6 = *(_QWORD *)(a1 + 16);
      if (v6)
      {
        v7 = a2 % 0x168;
        valuePtr = a2 % 0x168;
        pthread_mutex_lock((pthread_mutex_t *)(a1 + 216));
        *(_DWORD *)(a1 + 48) = v7;
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 216));
        v8 = *(char **)(v6 + 216);
        v9 = (os_unfair_lock_s *)(v6 + 212);
        os_unfair_lock_lock(v9);
        v10 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
        CGPDFAppenderMutateDictionaryValue(v8, *(uint64_t **)(*(_QWORD *)(a1 + 40) + 16), "Rotate", v10, 0);
        CFRelease(v10);
        os_unfair_lock_unlock(v9);
      }
    }
  }
}

os_unfair_lock_s *CGPDFPageGetAnnotationCount(os_unfair_lock_s *result)
{
  uint64_t v1;
  os_unfair_lock_s *v2;
  __CFArray *Annotations;
  CFIndex Count;

  if (result)
  {
    v1 = (uint64_t)result;
    v2 = result + 84;
    os_unfair_lock_lock(result + 84);
    Annotations = *(__CFArray **)(v1 + 344);
    if (!Annotations)
    {
      Annotations = LoadAnnotations(v1);
      *(_QWORD *)(v1 + 344) = Annotations;
    }
    Count = CFArrayGetCount(Annotations);
    os_unfair_lock_unlock(v2);
    return (os_unfair_lock_s *)Count;
  }
  return result;
}

const void *CGPDFPageGetAnnotationAtIndex(uint64_t a1, unint64_t a2)
{
  os_unfair_lock_s *v4;
  __CFArray *Annotations;
  unint64_t Count;
  const void *ValueAtIndex;

  if (!a1)
    return 0;
  v4 = (os_unfair_lock_s *)(a1 + 336);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 336));
  Annotations = *(__CFArray **)(a1 + 344);
  if (!Annotations)
  {
    Annotations = LoadAnnotations(a1);
    *(_QWORD *)(a1 + 344) = Annotations;
  }
  Count = CFArrayGetCount(Annotations);
  ValueAtIndex = 0;
  if ((Count & 0x8000000000000000) == 0 && Count > a2)
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 344), a2);
  os_unfair_lock_unlock(v4);
  return ValueAtIndex;
}

uint64_t AppendModeFindAnnotation(char *a1, CFArrayRef theArray, uint64_t a3, CFIndex *a4, _QWORD *a5)
{
  uint64_t result;
  uint64_t v10;
  CFIndex i;
  _QWORD *ValueAtIndex;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *MutableObject;
  uint64_t v17;
  uint64_t v18;

  result = CFArrayGetCount(theArray);
  if (result >= 1)
  {
    v10 = result;
    for (i = 0; v10 != i; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      v13 = ValueAtIndex;
      if (ValueAtIndex)
      {
        v14 = ValueAtIndex[2];
        v15 = ValueAtIndex[3];
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
      if (CGPDFAppenderHasMutableObject((uint64_t)a1, v14, v15))
        MutableObject = CGPDFAppenderGetMutableObject(a1, v14, v15);
      else
        MutableObject = 0;
      v17 = *(_QWORD *)(a3 + 16);
      result = *(_QWORD *)(a3 + 24);
      if (result)
      {
        if (!v17)
          goto LABEL_13;
      }
      else
      {
        result = (uint64_t)CGPDFAppenderCreateCFDictionary(*(CGPDFDictionary **)(a3 + 16));
        *(_QWORD *)(a3 + 24) = result;
        if (!v17)
        {
LABEL_13:
          v18 = 0;
          goto LABEL_14;
        }
      }
      v18 = *(_QWORD *)(v17 + 32);
LABEL_14:
      if (MutableObject == (char *)result || v14 == v18)
      {
        *a5 = v13;
        *a4 = i;
        return result;
      }
    }
  }
  return result;
}

uint64_t CGPDFPageGetReferenceForAnnotation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  os_unfair_lock_s *v5;
  _QWORD v7[6];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = 0;
  if (a1 && a2)
  {
    v5 = (os_unfair_lock_s *)(a1 + 336);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 336));
    if (*(_QWORD *)(a1 + 344))
    {
      v8 = 0;
      v9 = &v8;
      v10 = 0x2000000000;
      v11 = 0;
      v7[0] = MEMORY[0x1E0C809B0];
      v7[1] = 0x40000000;
      v7[2] = __CGPDFPageGetReferenceForAnnotation_block_invoke;
      v7[3] = &unk_1E162F548;
      v7[4] = &v8;
      v7[5] = a2;
      AppendModeUpdateAnnotations((_QWORD *)a1, (uint64_t)v7);
      os_unfair_lock_unlock(v5);
      v2 = v9[3];
      _Block_object_dispose(&v8, 8);
    }
    else
    {
      os_unfair_lock_unlock(v5);
      return 0;
    }
  }
  return v2;
}

void AppendModeUpdateAnnotations(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  CGPDFArray *v9;
  const void *CFArray;
  uint64_t v11;
  uint64_t v12;
  uint64_t MutableObject;
  uint64_t v14;
  const void *v15;
  char *v16;
  const void *v17;
  _OWORD *v18;
  __int128 v19;
  CGPDFArrayRef value;

  v4 = a1[2];
  if (v4)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v4 + 212));
    v5 = *(char **)(v4 + 216);
  }
  else
  {
    v5 = 0;
  }
  v6 = a1[44];
  v7 = a1[45];
  if (v6 | (unsigned __int16)v7)
    goto LABEL_13;
  v8 = *(uint64_t **)(a1[5] + 16);
  value = 0;
  if (CGPDFDictionaryGetArray((CGPDFDictionaryRef)v8, "Annots", &value))
  {
    v9 = value;
    if (value)
    {
      v6 = *((_QWORD *)value + 5);
      v7 = *((_QWORD *)value + 6);
    }
    else
    {
      v6 = 0;
      v7 = 0;
    }
    a1[44] = v6;
    a1[45] = v7;
    if (!(v6 | (unsigned __int16)v7))
    {
      CFArray = CGPDFAppenderCreateCFArray(v9);
      MutableObject = CGPDFAppenderCreateMutableObject((uint64_t)v5, CFArray);
      a1[44] = MutableObject;
      a1[45] = v14;
      v15 = (const void *)CGPDFReferenceCreate(MutableObject, v14);
      CGPDFAppenderMutateDictionaryValue(v5, v8, "Annots", v15, 0);
      goto LABEL_23;
    }
LABEL_13:
    CFArray = CGPDFAppenderGetMutableObject(v5, v6, v7);
    if (!CFArray)
      goto LABEL_15;
    goto LABEL_14;
  }
  CFArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  CGPDFAppenderMutateDictionaryValue(v5, v8, "Annots", CFArray, 2);
  if (v8)
  {
    v11 = v8[4];
    v12 = v8[5];
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v16 = CGPDFAppenderGetMutableObject(v5, v11, v12);
  v17 = (const void *)CGPDFNameCreate("Annots");
  v18 = CFDictionaryGetValue((CFDictionaryRef)v16, v17);
  CFRelease(v17);
  if (v18)
    v19 = v18[1];
  else
    v19 = 0uLL;
  *((_OWORD *)a1 + 22) = v19;
LABEL_23:
  CFRelease(CFArray);
  if (CFArray)
LABEL_14:
    (*(void (**)(uint64_t, char *, const void *))(a2 + 16))(a2, v5, CFArray);
LABEL_15:
  if (v4)
    os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 212));
}

void CGPDFPageAddAnnotation(uint64_t a1, void *a2)
{
  os_unfair_lock_s *v4;

  if (a1)
  {
    if (a2)
    {
      v4 = (os_unfair_lock_s *)(a1 + 336);
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 336));
      PageAddAnnotation((_QWORD *)a1, a2, -1);
      os_unfair_lock_unlock(v4);
    }
  }
}

void PageAddAnnotation(_QWORD *a1, void *value, CFIndex idx)
{
  __CFArray *Annotations;
  uint64_t v7;
  _QWORD v8[7];

  Annotations = (__CFArray *)a1[43];
  if (!Annotations)
  {
    Annotations = LoadAnnotations((uint64_t)a1);
    a1[43] = Annotations;
  }
  if (idx == -1)
  {
    idx = CFArrayGetCount(Annotations);
    Annotations = (__CFArray *)a1[43];
  }
  CFArrayInsertValueAtIndex(Annotations, idx, value);
  if (*((_BYTE *)value + 32))
  {
    v7 = a1[2];
    if (v7)
    {
      os_unfair_lock_lock((os_unfair_lock_t)(v7 + 212));
      CGPDFAppenderCreateAnnotationObject(*(char **)(v7 + 216), (uint64_t)a1, (uint64_t)value);
      os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 212));
    }
    else
    {
      CGPDFAppenderCreateAnnotationObject(0, (uint64_t)a1, (uint64_t)value);
    }
  }
  else
  {
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 0x40000000;
    v8[2] = __PageAddAnnotation_block_invoke;
    v8[3] = &__block_descriptor_tmp_71;
    v8[4] = a1;
    v8[5] = value;
    v8[6] = idx;
    AppendModeUpdateAnnotations(a1, (uint64_t)v8);
  }
}

void CGPDFPageRemoveAnnotation(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;

  if (a1 && a2)
  {
    v4 = (os_unfair_lock_s *)(a1 + 336);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 336));
    if (*(_QWORD *)(a1 + 344))
      PageRemoveAnnotation(a1, a2);
    os_unfair_lock_unlock(v4);
  }
}

CFIndex PageRemoveAnnotation(uint64_t a1, uint64_t a2)
{
  const __CFArray *v4;
  CFIndex FirstIndexOfValue;
  uint64_t v6;
  uint64_t v7;
  CGPDFDictionary *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *MutableObject;
  const void *v13;
  _QWORD *v14;
  CFTypeID v15;
  char *v16;
  const __CFArray *v17;
  CFTypeID v18;
  uint64_t v19;
  uint64_t v20;
  CFIndex Count;
  CFIndex v22;
  CFIndex v23;
  _QWORD *ValueAtIndex;
  uint64_t v25;
  const void *v26;
  _QWORD v28[5];
  CGPDFObjectRef value;
  CFRange v30;

  v4 = *(const __CFArray **)(a1 + 344);
  v30.length = CFArrayGetCount(v4);
  v30.location = 0;
  FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v4, v30, (const void *)a2);
  if (FirstIndexOfValue != -1)
  {
    if (!*(_BYTE *)(a2 + 32))
    {
      v28[0] = MEMORY[0x1E0C809B0];
      v28[1] = 0x40000000;
      v28[2] = __PageRemoveAnnotation_block_invoke;
      v28[3] = &__block_descriptor_tmp_72;
      v28[4] = a2;
      AppendModeUpdateAnnotations((_QWORD *)a1, (uint64_t)v28);
      goto LABEL_32;
    }
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
    {
      os_unfair_lock_lock((os_unfair_lock_t)(v6 + 212));
      if (!*(_BYTE *)(a2 + 32))
      {
LABEL_31:
        os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 212));
        goto LABEL_32;
      }
      v7 = *(_QWORD *)(v6 + 216);
    }
    else
    {
      v7 = 0;
    }
    v8 = *(CGPDFDictionary **)(*(_QWORD *)(a1 + 40) + 16);
    value = 0;
    CGPDFDictionaryGetObject(v8, "Contents", &value);
    v9 = *((_QWORD *)value + 2);
    v10 = *((_QWORD *)value + 3);
    if (!(v9 | (unsigned __int16)v10)
      || (CGPDFAppenderHasMutableObject(v7, *((_QWORD *)value + 2), *((_QWORD *)value + 3)) & 1) == 0)
    {
      if (v8)
      {
        v11 = *((_QWORD *)v8 + 4);
        v8 = (CGPDFDictionary *)*((_QWORD *)v8 + 5);
      }
      else
      {
        v11 = 0;
      }
      if (!CGPDFAppenderHasMutableObject(v7, v11, (uint64_t)v8))
        goto LABEL_30;
      MutableObject = CGPDFAppenderGetMutableObject((char *)v7, v11, (uint64_t)v8);
      v13 = (const void *)CGPDFNameCreate("Contents");
      v14 = CFDictionaryGetValue((CFDictionaryRef)MutableObject, v13);
      CFRelease(v13);
      if (!v14)
        goto LABEL_30;
      v15 = CFGetTypeID(v14);
      if (CGPDFReferenceTypeID_onceToken != -1)
        dispatch_once(&CGPDFReferenceTypeID_onceToken, &__block_literal_global_18202);
      if (v15 != CGPDFReferenceTypeID_id)
        goto LABEL_30;
      v9 = v14[2];
      v10 = v14[3];
    }
    v16 = CGPDFAppenderGetMutableObject((char *)v7, v9, v10);
    if (v16)
    {
      v17 = (const __CFArray *)v16;
      v18 = CFGetTypeID(v16);
      if (v18 == CFArrayGetTypeID())
      {
        v20 = *(_QWORD *)(a2 + 40);
        v19 = *(_QWORD *)(a2 + 48);
        Count = CFArrayGetCount(v17);
        if (Count >= 1)
        {
          v22 = Count;
          v23 = 0;
          while (1)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v17, v23);
            v25 = ValueAtIndex ? ValueAtIndex[2] : 0;
            if (v25 == v20)
              break;
            if (v22 == ++v23)
              goto LABEL_30;
          }
          CFArrayRemoveValueAtIndex(v17, v23);
          v26 = (const void *)CGPDFReferenceCreate(v20, v19);
          CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v7 + 16), v26);
          CFRelease(v26);
        }
      }
    }
LABEL_30:
    if (v6)
      goto LABEL_31;
LABEL_32:
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 344), FirstIndexOfValue);
  }
  return FirstIndexOfValue;
}

void CGPDFPageSubstituteAnnotation(uint64_t a1, uint64_t a2, void *a3)
{
  os_unfair_lock_s *v6;
  CFIndex v7;

  if (a1 && a2 && a3)
  {
    v6 = (os_unfair_lock_s *)(a1 + 336);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 336));
    if (*(_QWORD *)(a1 + 344))
    {
      v7 = PageRemoveAnnotation(a1, a2);
      if (v7 != -1)
        PageAddAnnotation((_QWORD *)a1, a3, v7);
    }
    os_unfair_lock_unlock(v6);
  }
}

void CGPDFPageSubstituteAnnotationDictionary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_unfair_lock_s *v6;
  _QWORD v7[6];

  if (a1 && a2 && a3)
  {
    v6 = (os_unfair_lock_s *)(a1 + 336);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 336));
    if (*(_QWORD *)(a1 + 344))
    {
      v7[0] = MEMORY[0x1E0C809B0];
      v7[1] = 0x40000000;
      v7[2] = __CGPDFPageSubstituteAnnotationDictionary_block_invoke;
      v7[3] = &__block_descriptor_tmp_41;
      v7[4] = a2;
      v7[5] = a3;
      AppendModeUpdateAnnotations((_QWORD *)a1, (uint64_t)v7);
      os_unfair_lock_unlock(v6);
    }
    else
    {
      os_unfair_lock_unlock(v6);
    }
  }
}

void CGPDFPageSortAnnotations(_QWORD *a1, uint64_t a2)
{
  _QWORD v2[6];

  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 0x40000000;
  v2[2] = __CGPDFPageSortAnnotations_block_invoke;
  v2[3] = &__block_descriptor_tmp_43;
  v2[4] = a2;
  v2[5] = a1;
  AppendModeUpdateAnnotations(a1, (uint64_t)v2);
}

void CGPDFPageEnumerateAnnotations(uint64_t a1, uint64_t a2)
{
  void *v4;
  __CFArray *Annotations;
  CFIndex Count;
  CFIndex v7;
  CFIndex i;
  const void *ValueAtIndex;

  if (a1 && a2)
  {
    v4 = (void *)MEMORY[0x186DC2BD4]();
    send_analytics_event((uint64_t)"com.apple.CoreGraphics.CGPDFPageEnumerateAnnotations");
    objc_autoreleasePoolPop(v4);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 336));
    Annotations = *(__CFArray **)(a1 + 344);
    if (!Annotations)
    {
      Annotations = LoadAnnotations(a1);
      *(_QWORD *)(a1 + 344) = Annotations;
    }
    Count = CFArrayGetCount(Annotations);
    if (Count)
    {
      v7 = Count;
      for (i = 0; i != v7; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 344), i);
        (*(void (**)(uint64_t, uint64_t, const void *))(a2 + 16))(a2, a1, ValueAtIndex);
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 336));
  }
}

void CGPDFPageCopyPageLayout(uint64_t a1)
{
  CGPDFPageCopyPageLayoutWithCTLD(a1, 1);
}

void CGPDFPageCopyPageLayoutWithCTLD(uint64_t a1, int a2)
{
  const void *v4;
  uint64_t cftype;
  PageLayout *v6;
  CGPDFContentStream *v7;
  CGPDFOperatorTable *v8;
  uint64_t i;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  _QWORD *v14;
  void ***v15;
  CGMutablePathRef Mutable;
  CGMutablePathRef v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  CGMutablePathRef *v25;
  _QWORD *v26;
  _QWORD *v27;
  CGPath *v28;
  int64x2_t v29;
  uint64_t v30;
  CGPDFScanner *v31;
  double *v32;
  double *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  int v39;
  char v40;
  double *v41;
  double v42;
  double v43;
  _QWORD *v44;
  _QWORD *v45;
  double v46;
  _DWORD *font_info;
  int v48;
  double v49;
  _DWORD *v50;
  int v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  _DWORD *v57;
  int v58;
  _DWORD *v59;
  int v60;
  double v61;
  double v62;
  double v63;
  CGFloat v64;
  double v65;
  CGFloat v66;
  double v67;
  _BOOL4 v68;
  double v69;
  _BOOL4 v70;
  double v71;
  double v72;
  double v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  double *v81;
  CGFloat *v82;
  double v83;
  double v84;
  double v85;
  double v86;
  CGFloat v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  double v94;
  uint64_t v95;
  uint64_t v96;
  double v97;
  CGFloat v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  CGFloat v105;
  CGFloat v106;
  double v107;
  double v108;
  double v109;
  double v110;
  CGFloat v111;
  double v112;
  unint64_t v113;
  double v114;
  double v115;
  CGFloat v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  uint64_t v126;
  double v127;
  CGFloat v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v134;
  double v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  double v139;
  uint64_t v140;
  double *v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  CGFloat v147;
  double v148;
  double v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  double v154;
  double v155;
  double v156;
  uint64_t v157;
  uint64_t v158;
  double v159;
  double v160;
  double v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  double v165;
  double v166;
  double v167;
  CGFloat v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void *v172;
  void *v173;
  id v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  id *v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t *v186;
  _QWORD *v187;
  _BYTE *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  char *v193;
  uint64_t v194;
  char *v195;
  uint64_t *v196;
  char *v197;
  char *j;
  uint64_t v199;
  double Current;
  double v201;
  __n128 v202;
  double v203;
  double v204;
  double v205;
  __n128 v206;
  id v207;
  CFAbsoluteTime v208;
  int v209;
  const void *v210;
  CGPDFPage *v211;
  os_unfair_lock_s *lock;
  uint64_t *v213;
  double v214;
  double v215;
  double v216;
  CGFloat v217;
  double v218;
  double v219;
  double v220;
  double v221;
  double v222;
  double rect;
  double recta;
  uint64_t v225;
  _QWORD *v226;
  void *v227[2];
  void *v228[2];
  __int128 v229;
  _OWORD v230[2];
  int v231;
  _BYTE v232[32];
  int v233;
  __int128 v234;
  id obj[2];
  BOOL v236;
  __int16 v237;
  int64x2_t *v238;
  int64x2_t v239;
  uint64_t v240;
  _QWORD *v241;
  __int16 v242[5];
  __int128 info;
  void *v244;
  void ***v245;
  char v246;
  CGFloat v247;
  CGFloat v248;
  CGFloat v249;
  CGFloat v250;
  void *__p;
  void *v252;
  uint64_t v253;
  char v254;
  __int128 v255;
  _BYTE v256[32];
  int v257;
  CFTypeRef cf[2];
  int64x2_t v259;
  _QWORD v260[4];
  CGRect BoxRect;
  CGRect v262;
  CGRect v263;
  CGRect v264;
  CGRect v265;
  CGRect v266;
  CGRect v267;
  CGRect v268;
  CGRect v269;
  CGRect v270;
  CGRect v271;
  CGRect v272;
  CGRect v273;
  CGRect v274;
  CGRect v275;
  CGRect v276;
  CGRect v277;

  v260[1] = *MEMORY[0x1E0C80C00];
  if (!a1)
    return;
  lock = (os_unfair_lock_s *)(a1 + 304);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 304));
  v211 = (CGPDFPage *)a1;
  v4 = *(const void **)(a1 + 312);
  if (v4 && CFRetain(v4))
  {
LABEL_200:
    os_unfair_lock_unlock(lock);
    return;
  }
  if (CGPDFPageLayoutGetTypeID(void)::onceToken != -1)
    dispatch_once(&CGPDFPageLayoutGetTypeID(void)::onceToken, &__block_literal_global_11122);
  cftype = pdf_create_cftype();
  if (!cftype)
  {
    *(_QWORD *)(a1 + 312) = 0;
    goto LABEL_200;
  }
  v209 = a2;
  v210 = (const void *)cftype;
  *(_QWORD *)(cftype + 16) = a1;
  v6 = (PageLayout *)(cftype + 16);
  *(_BYTE *)(cftype + 24) = 0;
  *(_OWORD *)(cftype + 192) = 0u;
  *(_OWORD *)(cftype + 32) = 0u;
  *(_OWORD *)(cftype + 48) = 0u;
  *(_OWORD *)(cftype + 64) = 0u;
  *(_OWORD *)(cftype + 80) = 0u;
  *(_OWORD *)(cftype + 96) = 0u;
  *(_OWORD *)(cftype + 112) = 0u;
  *(_OWORD *)(cftype + 128) = 0u;
  *(_OWORD *)(cftype + 144) = 0u;
  *(_OWORD *)(cftype + 160) = 0u;
  *(_OWORD *)(cftype + 176) = 0u;
  *(_OWORD *)(cftype + 208) = 0u;
  *(_OWORD *)(cftype + 224) = 0u;
  *(_OWORD *)(cftype + 240) = 0u;
  *(_OWORD *)(cftype + 256) = 0u;
  *(_OWORD *)(cftype + 272) = 0u;
  *(_OWORD *)(cftype + 288) = 0u;
  *(_OWORD *)(cftype + 304) = 0u;
  *(_OWORD *)(cftype + 320) = 0u;
  *(_OWORD *)(cftype + 336) = 0u;
  *(_OWORD *)(cftype + 352) = 0u;
  *(_OWORD *)(cftype + 368) = 0u;
  *(_DWORD *)(cftype + 384) = 1065353216;
  *(_DWORD *)(cftype + 392) = 0;
  *(_OWORD *)(cftype + 400) = 0u;
  *(_OWORD *)(cftype + 416) = 0u;
  *(_OWORD *)(cftype + 432) = 0u;
  *(_OWORD *)(cftype + 448) = 0u;
  *(_OWORD *)(cftype + 464) = 0u;
  *(_OWORD *)(cftype + 480) = 0u;
  v225 = a1;
  v226 = (_QWORD *)(cftype + 16);
  *(_OWORD *)v227 = 0u;
  *(_OWORD *)v228 = 0u;
  v229 = 0u;
  memset(v230, 0, sizeof(v230));
  v231 = 1065353216;
  memset(v232, 0, sizeof(v232));
  v233 = 1065353216;
  v234 = 0u;
  obj[0] = 0;
  obj[1] = objc_alloc_init(MEMORY[0x1E0CB37A0]);

  v237 = 32;
  v7 = (CGPDFContentStream *)CGPDFContentStreamCreate(*(_QWORD *)(a1 + 40));
  v8 = CGPDFOperatorTableCreate();
  if (v8)
  {
    for (i = 0; i != 100; i += 2)
      CGPDFOperatorTableSetCallback(v8, (&off_1E162FD88)[i], (CGPDFOperatorCallback)(&off_1E162FD88)[i + 1]);
  }
  BoxRect = CGPDFPageGetBoxRect(v211, kCGPDFCropBox);
  x = BoxRect.origin.x;
  y = BoxRect.origin.y;
  width = BoxRect.size.width;
  height = BoxRect.size.height;
  *(_QWORD *)&info = &v225;
  *((_QWORD *)&info + 1) = v8;
  v14 = CGPDFRStateCreate();
  v244 = v14;
  if (v14)
    v15 = (void ***)*v14;
  else
    v15 = 0;
  v245 = v15;
  v246 = 0;
  v247 = x;
  v248 = y;
  v249 = width;
  v250 = height;
  v252 = 0;
  v253 = 0;
  __p = 0;
  v254 = 0;
  v255 = 0u;
  memset(v256, 0, sizeof(v256));
  v257 = 1065353216;
  *(_OWORD *)cf = 0u;
  v259 = 0u;
  v260[0] = 0;
  Mutable = CGPathCreateMutable();
  v17 = Mutable;
  v18 = v259.i64[1];
  if (v259.i64[1] >= v260[0])
  {
    v20 = (v259.i64[1] - v259.i64[0]) >> 3;
    if ((unint64_t)(v20 + 1) >> 61)
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
    v21 = (v260[0] - v259.i64[0]) >> 2;
    if (v21 <= v20 + 1)
      v21 = v20 + 1;
    if (v260[0] - v259.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL)
      v22 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v22 = v21;
    v241 = v260;
    if (!v22)
      goto LABEL_203;
    v23 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(v22);
    if (!v23)
      goto LABEL_203;
    v25 = (CGMutablePathRef *)&v23[8 * v20];
    *v25 = v17;
    v19 = v25 + 1;
    v26 = (_QWORD *)v259.i64[1];
    v27 = (_QWORD *)v259.i64[0];
    if (v259.i64[1] == v259.i64[0])
    {
      v29 = vdupq_n_s64(v259.u64[1]);
    }
    else
    {
      do
      {
        v28 = (CGPath *)*--v26;
        *--v25 = v28;
        *v26 = 0;
      }
      while (v26 != v27);
      v29 = v259;
    }
    v259.i64[0] = (uint64_t)v25;
    v259.i64[1] = (uint64_t)v19;
    v239 = v29;
    v30 = v260[0];
    v260[0] = &v23[8 * v24];
    v240 = v30;
    v238 = (int64x2_t *)v29.i64[0];
    std::__split_buffer<applesauce::CF::ObjectRef<CGPath *>>::~__split_buffer((uint64_t)&v238);
  }
  else
  {
    if (!v259.i64[1])
      goto LABEL_203;
    *(_QWORD *)v259.i64[1] = Mutable;
    v19 = (_QWORD *)(v18 + 8);
  }
  v259.i64[1] = (uint64_t)v19;
  v31 = CGPDFScannerCreate(v7, v8, &info);
  CGPDFScannerScan(v31);
  if (v31)
    CFRelease(v31);
  if (v8)
    CFRelease(v8);
  if (v7)
    CFRelease(v7);
  CGPDFRStateRelease(v244);
  v238 = &v259;
  std::vector<applesauce::CF::ObjectRef<CGPath *>>::__destroy_vector::operator()[abi:se180100]((void ***)&v238);
  if (cf[1])
    CFRelease(cf[1]);
  if (cf[0])
    CFRelease(cf[0]);
  std::__hash_table<std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::__unordered_map_hasher<CGPDFFont *,std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::hash<CGPDFFont *>,std::equal_to<CGPDFFont *>,true>,std::__unordered_map_equal<CGPDFFont *,std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::equal_to<CGPDFFont *>,std::hash<CGPDFFont *>,true>,std::allocator<std::__hash_value_type<CGPDFFont *,std::pair<double,double>>>>::~__hash_table((uint64_t)v256);

  if (__p)
  {
    v252 = __p;
    operator delete(__p);
  }
  v213 = (uint64_t *)*((_QWORD *)&v234 + 1);
  v32 = (double *)v234;
  if ((_QWORD)v234 == *((_QWORD *)&v234 + 1))
  {
LABEL_190:
    if (!TextRecognitionLibraryCore(char **)::frameworkLibrary)
    {
      info = xmmword_1E165AAF0;
      v244 = 0;
      TextRecognitionLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
    }
    if (TextRecognitionLibraryCore(char **)::frameworkLibrary
      && (CGPDFDocumentIsLayoutWithCTLDEnabled() & v209) == 1)
    {
      Current = CFAbsoluteTimeGetCurrent();
      PageLayout::splitLines(v6, 0, 0, Current, v201, v202, v203, v204, v205, v206);
      v207 = PageLayout::getOrderedLayout(v6);
      v208 = CFAbsoluteTimeGetCurrent();
      pdf_log("CTLD took %g seconds", v208 - Current);
    }

    *(_QWORD *)&info = &v234;
    std::vector<PageLayoutFactory::TextChunk>::__destroy_vector::operator()[abi:se180100]((void ***)&info);
    std::__hash_table<std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::__unordered_map_hasher<CGPDFFont *,std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::hash<CGPDFFont *>,std::equal_to<CGPDFFont *>,true>,std::__unordered_map_equal<CGPDFFont *,std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::equal_to<CGPDFFont *>,std::hash<CGPDFFont *>,true>,std::allocator<std::__hash_value_type<CGPDFFont *,std::pair<double,double>>>>::~__hash_table((uint64_t)v232);
    std::__hash_table<std::__hash_value_type<applesauce::CF::ObjectRef<CGFont *>,double>,std::__unordered_map_hasher<applesauce::CF::ObjectRef<CGFont *>,std::__hash_value_type<applesauce::CF::ObjectRef<CGFont *>,double>,std::hash<applesauce::CF::ObjectRef<CGFont *>>,std::equal_to<applesauce::CF::ObjectRef<CGFont *>>,true>,std::__unordered_map_equal<applesauce::CF::ObjectRef<CGFont *>,std::__hash_value_type<applesauce::CF::ObjectRef<CGFont *>,double>,std::equal_to<applesauce::CF::ObjectRef<CGFont *>>,std::hash<applesauce::CF::ObjectRef<CGFont *>>,true>,std::allocator<std::__hash_value_type<applesauce::CF::ObjectRef<CGFont *>,double>>>::~__hash_table((uint64_t)v230);
    if (v228[1])
    {
      *(void **)&v229 = v228[1];
      operator delete(v228[1]);
    }
    if (v227[0])
    {
      v227[1] = v227[0];
      operator delete(v227[0]);
    }
    *((_QWORD *)v211 + 39) = v210;
    CFRetain(v210);
    goto LABEL_200;
  }
  v33 = 0;
  v236 = 0;
  while (1)
  {
    v34 = *((_QWORD *)v32 + 12);
    v35 = *((_QWORD *)v32 + 13);
    if (v34 != v35)
    {
      v36 = v34 + 2;
      do
      {
        v37 = *(unsigned __int16 *)(v36 - 2);
        objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceAndNewlineCharacterSet");
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        v39 = objc_msgSend(v38, "characterIsMember:", v37);

        if (v36 == v35)
          v40 = 0;
        else
          v40 = v39;
        v36 += 2;
      }
      while ((v40 & 1) != 0);
      if (!v39)
        goto LABEL_54;
    }
    if (!*((_BYTE *)v32 + 216))
    {
      v41 = v33;
    }
    else
    {
LABEL_54:
      v41 = v32;
      if (v33)
      {
        v42 = v33[18];
        v43 = v32[18];
        if ((v42 != 0.0 || v43 != 0.0) && vabdd_f64(v42, v43) > 0.174532925)
          goto LABEL_95;
        v44 = (_QWORD *)*((_QWORD *)v33 + 17);
        v45 = (_QWORD *)*((_QWORD *)v32 + 17);
        v46 = v33[21];
        font_info = get_font_info(v44);
        v48 = font_info ? font_info[2] : 0;
        v49 = v32[21];
        v50 = get_font_info(v44);
        v51 = v50 ? v50[2] : 0;
        v52 = v46 / (double)v48;
        if (v44 == v45 && vabdd_f64(v52, v49 / (double)v51) <= 2.22044605e-16)
          goto LABEL_73;
        v53 = v33[24];
        v54 = v33[26];
        v55 = v32[24];
        v56 = v32[26];
        v57 = get_font_info(v44);
        v58 = v57 ? v57[3] : 0;
        v59 = get_font_info(v44);
        v60 = v59 ? v59[4] : 0;
        if (v53 > v55 || v56 > v54 * 0.4 || (v41 = v32, v55 > v53 + v52 * (double)(v58 - v60)))
        {
LABEL_73:
          v61 = v32[25];
          if (v61 == 0.0 || (v62 = v33[25], v62 == 0.0))
          {
            if (vabdd_f64(v32[15], v33[15]) > v33[16])
              goto LABEL_95;
          }
          else
          {
            v63 = v32[26];
            v64 = v32[23];
            rect = v32[24];
            v65 = v33[26];
            v66 = v33[23];
            v67 = v33[24];
            v68 = v65 < 0.0 || v62 < 0.0;
            v69 = v33[23];
            if (v68)
              *(_QWORD *)&v69 = (unint64_t)CGRectStandardize(*(CGRect *)(v33 + 23));
            v70 = v63 < 0.0 || v61 < 0.0;
            v71 = v64;
            v72 = v61;
            if (v70)
            {
              v262.origin.x = v64;
              v262.origin.y = rect;
              v262.size.width = v61;
              v262.size.height = v63;
              *(CGRect *)&v71 = CGRectStandardize(v262);
            }
            if (v69 > v71 + v72)
              goto LABEL_95;
            v73 = v67;
            if (v68)
            {
              v263.origin.x = v66;
              v263.origin.y = v67;
              v263.size.width = v62;
              v263.size.height = v65;
              v264 = CGRectStandardize(v263);
              v73 = v264.origin.y;
            }
            if (v70)
            {
              v265.origin.x = v64;
              v265.origin.y = rect;
              v265.size.width = v61;
              v265.size.height = v63;
              v266 = CGRectStandardize(v265);
              if (v73 > v266.origin.y + v266.size.height)
                goto LABEL_95;
              v267.origin.x = v64;
              v267.origin.y = rect;
              v267.size.width = v61;
              v267.size.height = v63;
              v268 = CGRectStandardize(v267);
              rect = v268.origin.y;
            }
            else if (v73 > rect + v63)
            {
              goto LABEL_95;
            }
            if (v68)
            {
              v273.origin.x = v66;
              v273.origin.y = v67;
              v273.size.width = v62;
              v273.size.height = v65;
              v274 = CGRectStandardize(v273);
              v67 = v274.origin.y;
              v65 = v274.size.height;
            }
            if (rect > v67 + v65)
            {
LABEL_95:
              PageLayoutFactory::appendCurLine((PageLayoutFactory *)&v225, &v236);
              v41 = v32;
              goto LABEL_96;
            }
          }
          PageLayoutFactory::getSpaceWidth((int8x8_t *)&v225, (const TextChunk *)v33);
          v140 = *((_QWORD *)v33 + 4);
          if (*((_QWORD *)v33 + 3) == v140)
            goto LABEL_203;
          v141 = (double *)*((_QWORD *)v32 + 3);
          if (v141 == *((double **)v32 + 4))
            goto LABEL_203;
          v142 = v139;
          v144 = *(double *)(v140 - 16);
          v143 = *(double *)(v140 - 8);
          v145 = *(double *)(v140 - 32);
          v146 = *v141;
          v147 = v141[1];
          v148 = v141[2];
          v149 = v141[3];
          if (v144 < 0.0 || v143 < 0.0)
          {
            v150 = *(_QWORD *)(v140 - 24);
            v151 = *(_QWORD *)(v140 - 32);
            v152 = *(_QWORD *)(v140 - 16);
            v275 = CGRectStandardize(*(CGRect *)(&v143 - 3));
            v145 = v275.origin.x;
            v144 = v275.size.width;
          }
          if (v148 < 0.0 || v149 < 0.0)
          {
            v276.origin.x = v146;
            v276.origin.y = v147;
            v276.size.width = v148;
            v276.size.height = v149;
            *(_QWORD *)&v146 = (unint64_t)CGRectStandardize(v276);
          }
          v41 = v32;
          if (vabdd_f64(v146, v145 + v144) > v142)
          {
            v41 = v32;
            if (!*((_BYTE *)v32 + 216))
            {
              v153 = *((_QWORD *)v33 + 7);
              if (*((_QWORD *)v33 + 6) == v153)
                goto LABEL_203;
              v154 = v32[23];
              v155 = v32[25];
              v156 = v32[26];
              if (v155 < 0.0 || v156 < 0.0)
              {
                v157 = *((_QWORD *)v32 + 24);
                v158 = *((_QWORD *)v32 + 23);
                *(_QWORD *)&v154 = (unint64_t)CGRectStandardize(*(CGRect *)(&v155 - 2));
              }
              v159 = v33[23];
              v161 = v33[25];
              v160 = v33[26];
              if (v161 < 0.0 || v160 < 0.0)
              {
                v162 = *((_QWORD *)v33 + 24);
                v163 = *((_QWORD *)v33 + 23);
                v164 = *((_QWORD *)v33 + 25);
                v277 = CGRectStandardize(*(CGRect *)(&v160 - 3));
                v159 = v277.origin.x;
                v161 = v277.size.width;
              }
              v165 = *(double *)(v153 - 16);
              v166 = *(double *)(v153 - 8);
              v167 = *(double *)(v153 - 32);
              v168 = *(double *)(v153 - 24);
              if (v165 < 0.0 || v166 < 0.0)
              {
                v169 = *(_QWORD *)(v153 - 24);
                v170 = *(_QWORD *)(v153 - 8);
                *(CGRect *)&v167 = CGRectStandardize(*(CGRect *)&v167);
              }
              PageLayoutFactory::addUniChars((uint64_t)&v225, *((_QWORD *)v33 + 28), &v237, 1, -1, v159 + v161, NAN, v154 - (v159 + v161), NAN, v167 + v165, v168, NAN, v166, v136, v137, v138, *((_QWORD *)v33 + 18), *((_QWORD *)v33 + 19));
              v41 = v32;
            }
          }
        }
      }
    }
LABEL_96:
    std::vector<unsigned short>::reserve(v227, (uint64_t)(*((_QWORD *)v32 + 13) - *((_QWORD *)v32 + 12)) >> 1);
    v238 = 0;
    v242[0] = 32;
    *(_QWORD *)&info = &v225;
    *((_QWORD *)&info + 1) = v32;
    v244 = v32 + 12;
    v245 = (void ***)&v238;
    PageLayoutFactory::getSpaceWidth((int8x8_t *)&v225, (const TextChunk *)v32);
    v215 = v80;
    v81 = (double *)*((_QWORD *)v32 + 3);
    if (*((double **)v32 + 4) == v81)
      goto LABEL_203;
    v82 = (CGFloat *)*((_QWORD *)v32 + 6);
    if (*((CGFloat **)v32 + 7) == v82)
      goto LABEL_203;
    v84 = v81[2];
    v83 = v81[3];
    v85 = *v81;
    v86 = v81[1];
    v87 = v82[1];
    v219 = v82[2];
    v217 = *v82;
    v218 = v82[3];
    PageLayoutFactory::addChunkUnicodes(PageLayoutFactory::TextChunk const&)::$_0::operator()((uint64_t)&info, 0, v74, v75, v76, v77, v78, v79);
    v94 = *v32;
    v95 = *((_QWORD *)v32 + 1);
    v96 = v95 - *(_QWORD *)v32;
    if ((unint64_t)v96 >= 3)
      break;
LABEL_132:
    v32 += 29;
    v33 = v41;
    if (v32 == (double *)v213)
    {
      PageLayoutFactory::appendCurLine((PageLayoutFactory *)&v225, &v236);
      v171 = objc_msgSend(obj[1], "length");
      if (objc_msgSend(obj[1], "length") && objc_msgSend(obj[1], "characterAtIndex:", v171 - 1) == 10)
      {
        objc_msgSend(obj[1], "substringToIndex:", v171 - 1);
        v172 = (void *)objc_claimAutoreleasedReturnValue();
        v173 = (void *)objc_msgSend(v172, "mutableCopy");
        v174 = obj[1];
        obj[1] = v173;

        v175 = v226;
        v176 = v226[26];
        if (v226[25] == v176)
          goto LABEL_203;
        v226[26] = v176 - 8;
        v177 = v175[29];
        if (v175[28] == v177)
          goto LABEL_203;
        v175[29] = v177 - 8;
        v178 = (uint64_t *)v175[19];
        v179 = (uint64_t *)v175[20];
        while (v178 != v179)
        {
          v180 = *v178;
          if (v171 - 1 < (unint64_t)*v178)
            v180 = v171 - 1;
          *v178++ = v180;
        }
        if (*((_BYTE *)v175 + 8))
        {
          v181 = v175[38];
          if (v175[37] == v181)
            goto LABEL_203;
          v175[38] = v181 - 8;
        }
      }
      v182 = (id *)v226;
      if (v226[19] != v226[20])
      {
        v183 = objc_msgSend(obj[1], "length");
        v184 = v183;
        v186 = (uint64_t *)v182[20];
        v185 = (unint64_t)v182[21];
        if ((unint64_t)v186 >= v185)
        {
          v188 = v182[19];
          v189 = ((char *)v186 - v188) >> 3;
          if ((unint64_t)(v189 + 1) >> 61)
            std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
          v190 = v185 - (_QWORD)v188;
          v191 = v190 >> 2;
          if (v190 >> 2 <= (unint64_t)(v189 + 1))
            v191 = v189 + 1;
          if ((unint64_t)v190 >= 0x7FFFFFFFFFFFFFF8)
            v192 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v192 = v191;
          if (!v192)
            goto LABEL_203;
          v193 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(v192);
          if (!v193)
            goto LABEL_203;
          v195 = &v193[8 * v194];
          v196 = (uint64_t *)&v193[8 * v189];
          *v196 = v184;
          v187 = v196 + 1;
          v197 = (char *)v182[19];
          for (j = (char *)v182[20]; j != v197; j -= 8)
          {
            v199 = *((_QWORD *)j - 1);
            *--v196 = v199;
          }
          v182[19] = v196;
          v182[20] = v187;
          v182[21] = v195;
          if (v197)
            operator delete(v197);
        }
        else
        {
          if (!v186)
            goto LABEL_203;
          *v186 = v183;
          v187 = v186 + 1;
        }
        v182[20] = v187;
        v182 = (id *)v226;
      }
      objc_storeStrong(v182 + 3, obj[1]);
      goto LABEL_190;
    }
  }
  v97 = v83;
  v98 = v86;
  v99 = v96 >> 1;
  v100 = 56;
  v101 = 2;
  v102 = 1;
  while (1)
  {
    v103 = *((_QWORD *)v32 + 3);
    if (v102 >= (*((_QWORD *)v32 + 4) - v103) >> 5)
      break;
    v104 = *((_QWORD *)v32 + 6);
    if (v102 >= (*((_QWORD *)v32 + 7) - v104) >> 5 || v99 <= v102 - 1)
      break;
    v106 = *(double *)(v103 + v100 - 24);
    v105 = *(double *)(v103 + v100 - 16);
    v107 = *(double *)(v103 + v100 - 8);
    v108 = *(double *)(v103 + v100);
    v222 = *(double *)(v104 + v100 - 16);
    recta = *(double *)(v104 + v100 - 24);
    v220 = *(double *)(v104 + v100);
    v221 = *(double *)(v104 + v100 - 8);
    if (*(unsigned __int16 *)(*(_QWORD *)&v94 + v101 - 2) != *(unsigned __int16 *)(*(_QWORD *)&v94 + v101))
      goto LABEL_114;
    v216 = v87;
    if (v107 < 0.0 || (v109 = *(double *)(v103 + v100 - 24), v108 < 0.0))
    {
      v269.origin.x = *(CGFloat *)(v103 + v100 - 24);
      v269.origin.y = *(CGFloat *)(v103 + v100 - 16);
      v110 = v98;
      v269.size.width = *(CGFloat *)(v103 + v100 - 8);
      v111 = v269.origin.y;
      v112 = v97;
      v269.size.height = *(CGFloat *)(v103 + v100);
      v113 = (unint64_t)CGRectStandardize(v269);
      v98 = v110;
      v97 = v112;
      v105 = v111;
      v109 = *(double *)&v113;
    }
    if (v84 < 0.0 || (v114 = v85, v97 < 0.0))
    {
      v115 = v85;
      v116 = v98;
      v117 = v85;
      v118 = v98;
      v119 = v84;
      v214 = v107;
      v120 = v108;
      v121 = v84;
      v122 = v106;
      v123 = v105;
      v124 = v97;
      *(_QWORD *)&v114 = (unint64_t)CGRectStandardize(*(CGRect *)(&v97 - 3));
      v98 = v118;
      v85 = v117;
      v97 = v124;
      v105 = v123;
      v106 = v122;
      v84 = v121;
      v108 = v120;
      v107 = v214;
    }
    v125 = v109 - v114;
    v87 = v216;
    if (v125 < v215 * 0.5)
    {
      v126 = *((_QWORD *)v32 + 9);
      if (v102 >= (*((_QWORD *)v32 + 10) - v126) >> 3)
        break;
      v238 = (int64x2_t *)((char *)v238 + *(_QWORD *)(v126 + 8 * v102));
    }
    else
    {
LABEL_114:
      if (v84 < 0.0 || v97 < 0.0)
      {
        v127 = v85;
        v128 = v98;
        v129 = v84;
        v270 = CGRectStandardize(*(CGRect *)(&v97 - 3));
        v85 = v270.origin.x;
        v84 = v270.size.width;
      }
      if (v107 < 0.0 || v108 < 0.0)
      {
        v271.origin.x = v106;
        v271.origin.y = v105;
        v271.size.width = v107;
        v271.size.height = v108;
        *(_QWORD *)&v130 = (unint64_t)CGRectStandardize(v271);
      }
      else
      {
        v130 = v106;
      }
      v131 = v85 + v84;
      v132 = v130 - (v85 + v84);
      if (v132 > v215 && *((_BYTE *)v32 + 216) == 0)
      {
        if (v219 < 0.0 || v218 < 0.0)
        {
          v272.origin.x = v217;
          v272.origin.y = v87;
          v272.size.width = v219;
          v272.size.height = v218;
          *(CGRect *)&v134 = CGRectStandardize(v272);
        }
        else
        {
          v134 = v217;
          v135 = v219;
        }
        PageLayoutFactory::addUniChars((uint64_t)&v225, *((_QWORD *)v32 + 28), v242, 1, -1, v131, NAN, v132, NAN, v134 + v135, v87, NAN, v218, v91, v92, v93, *((_QWORD *)v32 + 18), *((_QWORD *)v32 + 19));
      }
      PageLayoutFactory::addChunkUnicodes(PageLayoutFactory::TextChunk const&)::$_0::operator()((uint64_t)&info, v102, v88, v89, v90, v91, v92, v93);
      v87 = v222;
      v219 = v221;
      v217 = recta;
      v218 = v220;
      v94 = *v32;
      v95 = *((_QWORD *)v32 + 1);
      v85 = v106;
      v98 = v105;
      v84 = v107;
      v97 = v108;
    }
    ++v102;
    v99 = (v95 - *(_QWORD *)&v94) >> 1;
    v101 += 2;
    v100 += 32;
    if (v102 >= v99)
      goto LABEL_132;
  }
LABEL_203:
  __break(1u);
}

void sub_184AC19D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t v60;
  void *v61;
  _QWORD *v63;
  void *v64;
  void *v65;
  void **v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;

  a60 = a13;
  std::vector<PageLayoutFactory::TextChunk>::__destroy_vector::operator()[abi:se180100]((void ***)&a60);
  std::__hash_table<std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::__unordered_map_hasher<CGPDFFont *,std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::hash<CGPDFFont *>,std::equal_to<CGPDFFont *>,true>,std::__unordered_map_equal<CGPDFFont *,std::__hash_value_type<CGPDFFont *,std::pair<double,double>>,std::equal_to<CGPDFFont *>,std::hash<CGPDFFont *>,true>,std::allocator<std::__hash_value_type<CGPDFFont *,std::pair<double,double>>>>::~__hash_table(a14);
  std::__hash_table<std::__hash_value_type<applesauce::CF::ObjectRef<CGFont *>,double>,std::__unordered_map_hasher<applesauce::CF::ObjectRef<CGFont *>,std::__hash_value_type<applesauce::CF::ObjectRef<CGFont *>,double>,std::hash<applesauce::CF::ObjectRef<CGFont *>>,std::equal_to<applesauce::CF::ObjectRef<CGFont *>>,true>,std::__unordered_map_equal<applesauce::CF::ObjectRef<CGFont *>,std::__hash_value_type<applesauce::CF::ObjectRef<CGFont *>,double>,std::equal_to<applesauce::CF::ObjectRef<CGFont *>>,std::hash<applesauce::CF::ObjectRef<CGFont *>>,true>,std::allocator<std::__hash_value_type<applesauce::CF::ObjectRef<CGFont *>,double>>>::~__hash_table((uint64_t)&a39);
  if (__p)
  {
    a37 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a33)
  {
    a34 = (uint64_t)a33;
    operator delete(a33);
  }
  v63 = (_QWORD *)a15;
  v64 = *(void **)(a15 + 472);
  if (v64)
  {
    *(_QWORD *)(a15 + 480) = v64;
    operator delete(v64);
    v63 = (_QWORD *)a15;
  }
  v65 = (void *)v63[56];
  if (v65)
  {
    v63[57] = v65;
    operator delete(v65);
    v63 = (_QWORD *)a15;
  }
  v66 = (void **)(v60 + 384);
  v67 = (void *)v63[53];
  if (v67)
  {
    *(_QWORD *)(a15 + 432) = v67;
    operator delete(v67);
  }
  v68 = *v66;
  if (*v66)
  {
    *(_QWORD *)(a15 + 408) = v68;
    operator delete(v68);
  }
  std::__hash_table<std::__hash_value_type<unsigned int,PDFAtomicElement * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,PDFAtomicElement * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,PDFAtomicElement * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,PDFAtomicElement * {__strong}>>>::~__hash_table(v60 + 336);

  v69 = *(void **)(a15 + 312);
  if (v69)
  {
    *(_QWORD *)(a15 + 320) = v69;
    operator delete(v69);
  }
  v70 = *(void **)(a15 + 288);
  if (v70)
  {
    *(_QWORD *)(a15 + 296) = v70;
    operator delete(v70);
  }
  a31 = v60 + 248;
  std::vector<std::pair<std::string,unsigned int>>::__destroy_vector::operator()[abi:se180100]((void ***)&a31);
  v71 = *(void **)(a15 + 240);
  if (v71)
  {
    *(_QWORD *)(a15 + 248) = v71;
    operator delete(v71);
  }
  v72 = *(void **)(a15 + 216);
  if (v72)
  {
    *(_QWORD *)(a15 + 224) = v72;
    operator delete(v72);
  }
  a31 = a11;
  std::vector<PageLayout::CharacterStyle>::__destroy_vector::operator()[abi:se180100]((void ***)&a31);
  v73 = *(void **)(a15 + 168);
  if (v73)
  {
    *(_QWORD *)(a15 + 176) = v73;
    operator delete(v73);
  }
  v74 = *(void **)(a15 + 144);
  if (v74)
  {
    *(_QWORD *)(a15 + 152) = v74;
    operator delete(v74);
  }
  v75 = *(void **)(a15 + 120);
  if (v75)
  {
    *(_QWORD *)(a15 + 128) = v75;
    operator delete(v75);
  }
  v76 = *(void **)(a15 + 96);
  if (v76)
  {
    *(_QWORD *)(a15 + 104) = v76;
    operator delete(v76);
  }
  v77 = *(void **)(a15 + 72);
  if (v77)
  {
    *(_QWORD *)(a15 + 80) = v77;
    operator delete(v77);
  }
  v78 = *(void **)(a15 + 48);
  if (v78)
  {
    *(_QWORD *)(a15 + 56) = v78;
    operator delete(v78);
  }

  _Unwind_Resume(a1);
}

uint64_t CGPDFPageInsertTableDescriptions(uint64_t result, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  _QWORD *v6;
  const void *v7;
  uint64_t *v8;
  uint64_t v9;
  std::mutex *v10;

  if (result)
  {
    v3 = result;
    if (CGPDFDocumentIsTaggedPDF(*(_QWORD *)(result + 16)))
      return 0;
    result = CGPDFDocumentIsLayoutWithCTLDEnabled();
    if ((_DWORD)result)
    {
      CGPDFPageCopyPageLayoutWithCTLD(v3, 0);
      CGPDFPageLayoutInsertTableDescriptions(v4, a2);
      os_unfair_lock_lock((os_unfair_lock_t)(v3 + 320));
      *(_QWORD *)(v3 + 328) = 0;
      v5 = *(const void **)(v3 + 16);
      if (!v5)
      {
        os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 320));
        return 0;
      }
      CFRetain(*(CFTypeRef *)(v3 + 16));
      CGPDFDocumentCopyTaggedContext((uint64_t)v5);
      if (v6)
      {
        v7 = v6;
        v8 = (uint64_t *)v6[2];
        v9 = *v8;
        if (*(_QWORD *)(*v8 + 24))
        {
          v10 = (std::mutex *)(v9 + 32);
          std::mutex::lock((std::mutex *)(v9 + 32));
          RemovePageNodesFromStructureElement(*(StructureElement **)(*v8 + 24), (CGPDFPage *)v3);
          std::mutex::unlock(v10);
        }
        CFRelease(v7);
      }
      CFRelease(v5);
      os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 320));
      CGPDFPageCopyRootTaggedNode(v3);
      return 1;
    }
  }
  return result;
}

CFTypeRef CGPDFPageCopyRootTaggedNode(uint64_t a1)
{
  os_unfair_lock_s *v2;
  const void *v3;
  CFTypeRef v4;
  const void *v5;
  uint64_t v6;
  _QWORD *v7;
  TaggedParser *v8;
  std::mutex *v9;
  _QWORD *v10;
  const void *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t StructureElement;
  PDFCRGroupRegion *v15;
  _OWORD *v16;
  _OWORD *i;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t CGPDFTaggedNodeFromStructureElement;
  NSMutableSet *v24;
  _QWORD *v25;

  if (a1)
  {
    v2 = (os_unfair_lock_s *)(a1 + 320);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 320));
    v3 = *(const void **)(a1 + 328);
    if (v3)
    {
      v4 = CFRetain(v3);
      if (v4)
        goto LABEL_24;
    }
    v5 = *(const void **)(a1 + 16);
    if (v5)
    {
      CFRetain(*(CFTypeRef *)(a1 + 16));
      CGPDFDocumentCopyTaggedContext((uint64_t)v5);
      if (!v6)
      {
        v4 = 0;
        *(_QWORD *)(a1 + 328) = 0;
LABEL_23:
        CFRelease(v5);
LABEL_24:
        os_unfair_lock_unlock(v2);
        return v4;
      }
      v7 = (_QWORD *)v6;
      TaggedParser::AddPage(*(TaggedParser **)(v6 + 16), (CGPDFPage *)a1);
      v8 = (TaggedParser *)v7[2];
      v9 = (std::mutex *)(*(_QWORD *)v8 + 32);
      std::mutex::lock(v9);
      v10 = *(_QWORD **)v8;
      if (*(_BYTE *)(*(_QWORD *)v8 + 97))
      {
        std::mutex::unlock(v9);
        v4 = 0;
        *(_QWORD *)(a1 + 328) = 0;
      }
      else
      {
        if (*v10 && (v11 = (const void *)CreateCGPDFTaggedNodeFromStructureElement(v10[3], (CGPDFPage *)a1)) != 0)
        {
          std::mutex::unlock(v9);
          *(_QWORD *)(a1 + 328) = v11;
        }
        else
        {
          CGPDFPageCopyPageLayoutWithCTLD(a1, 1);
          v13 = v12;
          v25 = v12;
          StructureElement = TaggedParser::CreateStructureElement(*(_QWORD *)(*(_QWORD *)v8 + 24), a1);
          *(_DWORD *)(StructureElement + 32) = 104;
          *(_BYTE *)(StructureElement + 64) = 1;
          v24 = (NSMutableSet *)objc_opt_new();
          PageLayout::getOrderedLayout((PageLayout *)(v13 + 2));
          v15 = (PDFCRGroupRegion *)objc_claimAutoreleasedReturnValue();
          TaggedParser::BuildStructureElementFromGroupRegion(v8, (StructureElement *)StructureElement, v15, (CGPDFPage *)a1, v24, (PageLayout *)(v13 + 2));

          v16 = (_OWORD *)v25[53];
          for (i = (_OWORD *)v25[54]; v16 != i; *(_OWORD *)(v18 + 280) = v21)
          {
            v18 = TaggedParser::CreateStructureElement(StructureElement, a1);
            *(_DWORD *)(v18 + 32) = 700;
            v19 = v16[1];
            *(_OWORD *)(v18 + 224) = *v16;
            *(_OWORD *)(v18 + 240) = v19;
            *(_BYTE *)(v18 + 256) = 1;
            v20 = *v16;
            v21 = v16[1];
            v16 += 2;
            *(_OWORD *)(v18 + 264) = v20;
          }

          CGPDFTaggedNodeFromStructureElement = CreateCGPDFTaggedNodeFromStructureElement(*(_QWORD *)(*(_QWORD *)v8 + 24), (CGPDFPage *)a1);
          v11 = (const void *)CGPDFTaggedNodeFromStructureElement;
          if (CGPDFTaggedNodeFromStructureElement)
            *(_BYTE *)(CGPDFTaggedNodeFromStructureElement + 112) = 0;
          if (v25)
            CFRelease(v25);
          std::mutex::unlock(v9);
          *(_QWORD *)(a1 + 328) = v11;
          if (!v11)
          {
            v4 = 0;
            goto LABEL_22;
          }
        }
        v4 = CFRetain(v11);
      }
LABEL_22:
      CFRelease(v7);
      goto LABEL_23;
    }
  }
  return 0;
}

void sub_184AC1FB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, void *a11, CFTypeRef cf)
{
  void *v12;

  if (cf)
    CFRelease(cf);
  std::mutex::unlock(a10);
  _Unwind_Resume(a1);
}

CFTypeRef CGPDFPageCopyLayout(uint64_t a1)
{
  os_unfair_lock_s *v2;
  const void *v3;
  CFTypeRef v4;
  CGPDFLayout *v5;

  if (!a1)
    return 0;
  v2 = (os_unfair_lock_s *)(a1 + 288);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 288));
  v3 = *(const void **)(a1 + 296);
  if (!v3 || (v4 = CFRetain(v3)) == 0)
  {
    v5 = CGPDFLayoutCreateWithPage(a1);
    *(_QWORD *)(a1 + 296) = v5;
    if (v5)
      v4 = CFRetain(v5);
    else
      v4 = 0;
  }
  os_unfair_lock_unlock(v2);
  return v4;
}

void CGPDFPageSetLayout(uint64_t a1, const void *a2)
{
  os_unfair_lock_s *v4;
  const void *v5;
  CFTypeRef v6;

  v4 = (os_unfair_lock_s *)(a1 + 288);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 288));
  v5 = *(const void **)(a1 + 296);
  if (v5 != a2)
  {
    if (v5)
      CFRelease(v5);
    if (a2)
      v6 = CFRetain(a2);
    else
      v6 = 0;
    *(_QWORD *)(a1 + 296) = v6;
  }
  os_unfair_lock_unlock(v4);
}

CFTypeRef CGPDFPageGetLayout(CFTypeRef result)
{
  CFTypeRef v1;

  if (result)
  {
    v1 = CGPDFPageCopyLayout((uint64_t)result);
    return CFAutorelease(v1);
  }
  return result;
}

void CGPDFPageRemoveLayout(uint64_t a1)
{
  os_unfair_lock_s *v2;
  const void *v3;

  v2 = (os_unfair_lock_s *)(a1 + 288);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 288));
  v3 = *(const void **)(a1 + 296);
  if (v3)
    CFRelease(v3);
  *(_QWORD *)(a1 + 296) = 0;
  os_unfair_lock_unlock(v2);
}

_QWORD *std::__put_character_sequence[abi:se180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  size_t v16;
  std::locale::__imp *p_b;
  uint64_t v18;
  uint64_t v19;
  std::locale *v20;
  uint64_t v21;
  _BYTE v23[16];
  std::locale __b;
  size_t v25;
  int64_t v26;

  MEMORY[0x186DC22BC](v23, a1);
  if (v23[0])
  {
    v6 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *((_QWORD *)v6 + 5);
    v8 = *((_DWORD *)v6 + 2);
    v9 = *((_DWORD *)v6 + 36);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&__b);
      *((_DWORD *)v6 + 36) = v9;
    }
    v11 = a2 + a3;
    if ((v8 & 0xB0) == 0x20)
      v12 = a2 + a3;
    else
      v12 = a2;
    if (!v7)
      goto LABEL_29;
    v13 = *((_QWORD *)v6 + 3);
    v14 = v13 <= a3;
    v15 = v13 - a3;
    v16 = v14 ? 0 : v15;
    if (v12 - a2 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, a2, v12 - a2) != v12 - a2)
    {
      goto LABEL_29;
    }
    if ((uint64_t)v16 >= 1)
    {
      if (v16 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:se180100]();
      if (v16 >= 0x17)
      {
        v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17)
          v18 = v16 | 7;
        v19 = v18 + 1;
        p_b = (std::locale::__imp *)operator new(v18 + 1);
        v25 = v16;
        v26 = v19 | 0x8000000000000000;
        __b.__locale_ = p_b;
      }
      else
      {
        HIBYTE(v26) = v16;
        p_b = (std::locale::__imp *)&__b;
      }
      memset(p_b, v9, v16);
      *((_BYTE *)p_b + v16) = 0;
      v20 = v26 >= 0 ? &__b : (std::locale *)__b.__locale_;
      v21 = (*(uint64_t (**)(uint64_t, std::locale *, size_t))(*(_QWORD *)v7 + 96))(v7, v20, v16);
      if (SHIBYTE(v26) < 0)
        operator delete(__b.__locale_);
      if (v21 != v16)
        goto LABEL_29;
    }
    if (v11 - v12 < 1
      || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, v12, v11 - v12) == v11 - v12)
    {
      *((_QWORD *)v6 + 3) = 0;
    }
    else
    {
LABEL_29:
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x186DC22C8](v23);
  return a1;
}

void sub_184AC2364(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _QWORD *v17;

  if (a17 < 0)
    operator delete(__p);
  MEMORY[0x186DC22C8](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x184AC2338);
}

void sub_184AC23C4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t CGPDFBase14GetBase14Name(char *a1)
{
  uint64_t result;

  LODWORD(result) = get_base14_name(a1);
  if ((int)result >= 15)
    return 0;
  else
    return result;
}

